{
  "metadata": {
    "timestamp": 1736710301913,
    "page": 89,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ithewei/libhv",
      "stars": 6928,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 0.69140625,
          "content": "build --copt=-std=c99\nbuild --cxxopt=-std=c++11\nbuild --define BUILD_SHARED=ON\nbuild --define BUILD_STATIC=ON\nbuild --define BUILD_EXAMPLES=ON\nbuild --define BUILD_UNITTEST=OFF\nbuild --define WITH_PROTOCOL=OFF\nbuild --define WITH_EVPP=ON\nbuild --define WITH_HTTP=ON\nbuild --define WITH_HTTP_SERVER=ON\nbuild --define WITH_HTTP_CLIENT=ON\nbuild --define WITH_MQTT=OFF\nbuild --define ENABLE_UDS=OFF\nbuild --define USE_MULTIMAP=OFF\nbuild --define WITH_CURL=OFF\nbuild --define WITH_NGHTTP2=OFF\nbuild --define WITH_OPENSSL=OFF\nbuild --define WITH_GNUTLS=OFF\nbuild --define WITH_MBEDTLS=OFF\nbuild --define WITH_KCP=OFF\nbuild --define WITH_WEPOLL=ON\nbuild --define ENABLE_WINDUMP=OFF\nbuild --define BUILD_FOR_MT=OFF\n\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.666015625,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  LLVM\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlinesLeft: true\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortIfStatementsOnASingleLine: true\nAllowShortLoopsOnASingleLine: true\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: false\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     true\n  BeforeElse:      true\n  IndentBraces:    false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Custom\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     160\nCommentPragmas:  '^ IWYU pragma:'\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: true\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH ]\nIncludeCategories:\n  - Regex:           '.*'\n    Priority:        1\n  - Regex:           '^\".*/'\n    Priority:        2\n  - Regex:           '^<)'\n    Priority:        3\nIncludeIsMainRegex: '$'\nIndentCaseLabels: false\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: true\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 4\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Right\nReflowComments:  true\nSortIncludes:    false\nSpaceAfterCStyleCast: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nTabWidth:        4\nUseTab:          Never\n...\n\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0341796875,
          "content": "cpputil/json.hpp linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5712890625,
          "content": "# Bazel\nbazel-*\nMODULE.bazel\nMODULE.bazel.lock\n\n# Compiled Object files\n*.o\n*.lo\n*.slo\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Compiled Static libraries\n*.a\n*.la\n*.lai\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# cache\n*~\n*.bk\n*.bak\n*.old\n*.new\n\n# IDE\n.vs\n.vscode\n.DS_Store\n\ntags\ncscope*\n.ycm*\n\n# generated\nexamples/protorpc/generated\n\n# output\n*.pid\n*.log\n*.db\n\ninclude\nlib\nbin\ntmp\ndist\ntest\n*_test\nbuild\nconfig.mk\nhconfig.h\nhtml/uploads\n\n# msvc\n*.VC.*\n*.vcxproj.*\nDebug\nRelease\n\n# cmake\nCMakeFiles\nCMakeCache.txt\ncmake_install.cmake\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.84375,
          "content": "language: cpp\n\njobs:\n  include:\n    - os: linux\n      dist: xenial\n      compiler: gcc\n      env: COVERALLS=no\n      script:\n        - ./configure\n        - make libhv examples unittest evpp\n\n    - os: osx\n      compiler: clang\n      env: COVERALLS=no\n      script:\n        - ./configure\n        - make libhv examples unittest evpp\n\n    - os: windows\n      compiler: msvc\n      env: COVERALLS=no\n      script:\n        - mkdir win64\n        - cd win64\n        - cmake .. -G \"Visual Studio 15 2017 Win64\"\n        - cmake --build .\n\nbefore_script:\n  - if [ \"$COVERALLS\" = \"yes\" ]; then\n      pip install --user cpp-coveralls;\n      export CC=\"$CC --coverage\" CXX=\"$CXX --coverage\";\n    fi\n\nafter_success:\n  - if [ \"$COVERALLS\" = \"yes\" ]; then\n      scripts/test-coverage.sh;\n      coveralls --gcov-options '\\-lp' --include base --include event --include http;\n    fi\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 10.4677734375,
          "content": "load(\"@rules_cc//cc:defs.bzl\", \"cc_binary\", \"cc_library\")\n\n\nconfig_setting(\n    name = \"ios\",\n    constraint_values = [\"@platforms//apple:ios\"],\n)\n\nconfig_setting(\n    name = \"msvc\",\n    values = {\n        \"compiler\": \"msvc-cl\",\n    },\n)\n\nconfig_setting(\n    name = \"debug\",\n    values = {\"compilation_mode\": \"dbg\"},\n)\n\nconfig_setting(\n    name = \"release\",\n    values = {\"compilation_mode\": \"opt\"},\n)\n\nconfig_setting(\n    name = \"build_shared\",\n    define_values = {\"BUILD_SHARED\": \"ON\"},\n)\n\nconfig_setting(\n    name = \"build_static\",\n    define_values = {\"BUILD_STATIC\": \"ON\"}\n)\n\nconfig_setting(\n    name = \"build_examples\",\n    define_values = {\"BUILD_EXAMPLES\": \"ON\"},\n)\n\nconfig_setting(\n    name = \"build_unittest\",\n    define_values = {\"BUILD_UNITTEST\": \"ON\"}\n)\n\nconfig_setting(\n    name = \"with_protocol\",\n    define_values = {\"WITH_PROTOCOL\": \"ON\"}\n)\n\nconfig_setting(\n    name = \"with_evpp\",\n    define_values = {\n        \"WITH_EVPP\": \"ON\",\n    },\n    visibility = [\":__subpackages__\"]\n)\n\nconfig_setting(\n    name = \"with_http\",\n    define_values = {\n        \"WITH_EVPP\": \"ON\",\n        \"WITH_HTTP\": \"ON\",\n    },\n    visibility = [\":__subpackages__\"]\n)\n\nconfig_setting(\n    name = \"with_http_server\",\n    define_values = {\n        \"WITH_EVPP\": \"ON\",\n        \"WITH_HTTP\": \"ON\",\n        \"WITH_HTTP_SERVER\": \"ON\",\n    },\n    visibility = [\":__subpackages__\"]\n)\n\nconfig_setting(\n    name = \"with_http_client\",\n    define_values = {\n        \"WITH_EVPP\": \"ON\",\n        \"WITH_HTTP\": \"ON\",\n        \"WITH_HTTP_CLIENT\": \"ON\",\n    },\n    visibility = [\":__subpackages__\"]\n)\n\nconfig_setting(\n    name = \"with_evpp_nghttp2\",\n    define_values = {\n        \"WITH_EVPP\": \"ON\",\n        \"WITH_HTTP\": \"ON\",\n        \"WITH_NGHTTP2\": \"ON\",\n    }\n)\n\nconfig_setting(\n    name = \"with_mqtt\",\n    define_values = {\"WITH_MQTT\": \"ON\"},\n    visibility = [\":__subpackages__\"],\n)\n\nconfig_setting(\n    name = \"enable_uds\",\n    define_values = {\"ENABLE_UDS\": \"ON\"}\n)\n\nconfig_setting(\n    name = \"use_multimap\",\n    define_values = {\"USE_MULTIMAP\": \"ON\"}\n)\n\nconfig_setting(\n    name = \"with_curl\",\n    define_values = {\"WITH_CURL\": \"ON\"}\n)\n\nconfig_setting(\n    name = \"with_nghttp2\",\n    define_values = {\"WITH_NGHTTP2\": \"ON\"}\n)\n\nconfig_setting(\n    name = \"with_openssl\",\n    define_values = {\"WITH_OPENSSL\": \"ON\"}\n)\n\nconfig_setting(\n    name = \"with_gnutls\",\n    define_values = {\"WITH_GNUTLS\": \"ON\"}\n)\n\nconfig_setting(\n    name = \"with_mbedtls\",\n    define_values = {\"WITH_MBEDTLS\": \"ON\"}\n)\n\nconfig_setting(\n    name = \"with_kcp\",\n    define_values = {\"WITH_KCP\": \"ON\"}\n)\n\nconfig_setting(\n    name = \"with_wepoll\",\n    constraint_values = [\"@platforms//os:windows\"],\n    define_values = {\"WITH_WEPOLL\": \"ON\"}\n)\n\nconfig_setting(\n    name = \"enable_windump\",\n    constraint_values = [\"@platforms//os:windows\"],\n    define_values = {\"ENABLE_WINDUMP\": \"ON\"}\n)\n\nconfig_setting(\n    name = \"build_for_mt_dbg\",\n    constraint_values = [\"@platforms//os:windows\"],\n    define_values = {\n        \"BUILD_FOR_MT\": \"ON\",\n        \"compilation_mode\": \"dbg\"\n    }\n)\n\nconfig_setting(\n    name = \"build_for_mt_opt\",\n    constraint_values = [\"@platforms//os:windows\"],\n    define_values = {\n        \"BUILD_FOR_MT\": \"ON\",\n        \"compilation_mode\": \"opt\"\n    }\n)\n\ngenrule(\n    name = \"config\",\n    outs = [\"hconfig.h\"],\n    cmd = \"($(execpath configure) && cp hconfig.h $@) || exit 1\",\n    tools = [\"configure\"],\n)\n\nHEADERS_DIRS = [\"base\", \"ssl\", \"event\"] + select({\n    \"with_wepoll\": [\"event/wepoll\"],\n    \"//conditions:default\": [],\n}) + select({\n    \"with_kcp\": [\"event/kcp\"],\n    \"//conditions:default\": [],\n}) + [\"util\"] + select({\n    \"with_protocol\": [\"protocol\"],\n    \"//conditions:default\": [],\n}) + select({\n    \"with_evpp\": [\"cpputil\", \"evpp\"],\n    \"//conditions:default\": [],\n}) + select({\n    \"with_http\": [\"http\"],\n    \"//conditions:default\": [],\n}) + select({\n    \"with_http_server\": [\"http/server\"],\n    \"//conditions:default\": [],\n}) + select({\n    \"with_http_client\": [\"http/client\"],\n    \"//conditions:default\": [],\n}) + select({\n    \"with_mqtt\": [\"mqtt\"],\n    \"//conditions:default\": [],\n})\n\nCOPTS = select({\n    \"debug\": [\"-DDEBUG\"],\n    \"release\": [\"-DNDEBUG\"],\n    \"//conditions:default\": [],\n}) + select({\n    \"enable_uds\": [\"-DENABLE_UDS\"],\n    \"//conditions:default\": [],\n}) + select({\n    \"use_multimap\": [\"-DUSE_MULTIMAP\"],\n    \"//conditions:default\": [],\n}) + select({\n    \"with_curl\": [\"-DWITH_CURL\"],\n    \"//conditions:default\": [],\n}) + select({\n    \"with_nghttp2\": [\"-DWITH_NGHTTP2\"],\n    \"//conditions:default\": [],\n}) + select({\n    \"with_openssl\": [\"-DWITH_OPENSSL\"],\n    \"//conditions:default\": [],\n}) + select({\n    \"with_gnutls\": [\"-DWITH_GNUTLS\"],\n    \"//conditions:default\": [],\n}) + select({\n    \"with_mbedtls\": [\"-DWITH_MBEDTLS\"],\n    \"//conditions:default\": [],\n}) + select({\n    \"@platforms//os:windows\": [\"-DWIN32_LEAN_AND_MEAN\", \"-D_CRT_SECURE_NO_WARNINGS\", \"-D_WIN32_WINNT=0x0600\"],\n    \"//conditions:default\": [],\n}) + select({\n    \"enable_windump\": [\"-DENABLE_WINDUMP\"],\n    \"//conditions:default\": [],\n}) + select({\n    \"build_for_mt_dbg\": [\"/MTd\"],\n    \"build_for_mt_opt\": [\"/MT\"],\n    \"//conditions:default\": [],\n})\n\nLINKOPTS = select({\n    \"msvc\": [],\n    \"//conditions:default\": [\"-pthread\"],\n}) + select({\n    \"@platforms//os:linux\": [\n        \"-lpthread\",\n        \"-lm\",\n        \"-ldl\",\n    ],\n    \"//conditions:default\": [],\n}) + select({\n    \"@bazel_tools//tools/cpp:gcc\": [\"-lrt\"],\n    \"//conditions:default\": [],\n})\n\nBASE_HEADERS = [\n    \"base/hplatform.h\",\n    \"base/hdef.h\",\n    \"base/hatomic.h\",\n    \"base/herr.h\",\n    \"base/htime.h\",\n    \"base/hmath.h\",\n    \"base/hbase.h\",\n    \"base/hversion.h\",\n    \"base/hsysinfo.h\",\n    \"base/hproc.h\",\n    \"base/hthread.h\",\n    \"base/hmutex.h\",\n    \"base/hsocket.h\",\n    \"base/hlog.h\",\n    \"base/hbuf.h\",\n    \"base/hmain.h\",\n    \"base/hendian.h\",\n]\n\nSSL_HEADERS = [\n    \"ssl/hssl.h\",\n]\n\nEVENT_HEADERS = [\n    \"event/hloop.h\",\n    \"event/nlog.h\",\n]\n\nUTIL_HEADERS = [\n    \"util/base64.h\",\n    \"util/md5.h\",\n    \"util/sha1.h\",\n]\n\nCPPUTIL_HEADERS = [\n    \"cpputil/hmap.h\",\n    \"cpputil/hstring.h\",\n    \"cpputil/hfile.h\",\n    \"cpputil/hpath.h\",\n    \"cpputil/hdir.h\",\n    \"cpputil/hurl.h\",\n    \"cpputil/hscope.h\",\n    \"cpputil/hthreadpool.h\",\n    \"cpputil/hasync.h\",\n    \"cpputil/hobjectpool.h\",\n    \"cpputil/ifconfig.h\",\n    \"cpputil/iniparser.h\",\n    \"cpputil/json.hpp\",\n    \"cpputil/singleton.h\",\n    \"cpputil/ThreadLocalStorage.h\",\n]\n\nEVPP_HEADERS = [\n    \"evpp/Buffer.h\",\n    \"evpp/Channel.h\",\n    \"evpp/Event.h\",\n    \"evpp/EventLoop.h\",\n    \"evpp/EventLoopThread.h\",\n    \"evpp/EventLoopThreadPool.h\",\n    \"evpp/Status.h\",\n    \"evpp/TcpClient.h\",\n    \"evpp/TcpServer.h\",\n    \"evpp/UdpClient.h\",\n    \"evpp/UdpServer.h\",\n]\n\nPROTOCOL_HEADERS = [\n    \"protocol/icmp.h\",\n    \"protocol/dns.h\",\n    \"protocol/ftp.h\",\n    \"protocol/smtp.h\",\n]\n\nHTTP_HEADERS = [\n    \"http/httpdef.h\",\n    \"http/wsdef.h\",\n    \"http/http_content.h\",\n    \"http/HttpMessage.h\",\n    \"http/HttpParser.h\",\n    \"http/WebSocketParser.h\",\n    \"http/WebSocketChannel.h\",\n]\n\nHTTP2_HEADERS = [\n    \"http/http2def.h\",\n    \"http/grpcdef.h\",\n]\n\nHTTP_CLIENT_HEADERS = [\n    \"http/client/HttpClient.h\",\n    \"http/client/requests.h\",\n    \"http/client/axios.h\",\n    \"http/client/AsyncHttpClient.h\",\n    \"http/client/WebSocketClient.h\",\n]\n\nHTTP_SERVER_HEADERS = [\n    \"http/server/HttpServer.h\",\n    \"http/server/HttpService.h\",\n    \"http/server/HttpContext.h\",\n    \"http/server/HttpResponseWriter.h\",\n    \"http/server/WebSocketServer.h\",\n]\n\nMQTT_HEADERS = [\n    \"mqtt/mqtt_protocol.h\",\n    \"mqtt/mqtt_client.h\",\n]\n\n\nHEADERS = [\"hv.h\", \":config\", \"hexport.h\"] + BASE_HEADERS + SSL_HEADERS + EVENT_HEADERS + UTIL_HEADERS + select({\n    \"with_protocol\": PROTOCOL_HEADERS,\n    \"//conditions:default\": [],\n}) + select({\n    \"with_evpp\": CPPUTIL_HEADERS + EVPP_HEADERS,\n    \"//conditions:default\": [],\n}) + select({\n    \"with_http\": HTTP_HEADERS,\n    \"//conditions:default\": [],\n}) + select({\n    \"with_evpp_nghttp2\": HTTP2_HEADERS,\n    \"//conditions:default\": [],\n}) + select({\n    \"with_http_server\": HTTP_SERVER_HEADERS,\n    \"//conditions:default\": [],\n}) + select({\n    \"with_http_client\": HTTP_CLIENT_HEADERS,\n    \"//conditions:default\": [],\n}) + select({\n    \"with_mqtt\": MQTT_HEADERS,\n    \"//conditions:default\": [],\n})\n\n\nCORE_SRCS = glob(\n    [\"*.h\"], exclude = [\"*_test.c\"]\n) + glob(\n    [\"base/*.h\", \"base/*.c\", \"base/*.cpp\"], exclude = [\"base/*_test.c\"]\n) + glob(\n    [\"ssl/*.h\", \"ssl/*.c\", \"ssl/*.cpp\"], exclude = [\"ssl/*_test.c\"]\n) + glob(\n    [\"event/*.h\", \"event/*.c\", \"event/*.cpp\"], exclude = [\"event/*_test.c\"]\n) + select({\n    \"with_wepoll\": glob([\"event/wepoll/*.h\", \"event/wepoll/*.c\", \"event/wepoll/*.cpp\"], exclude = [\"event/wepoll/*_test.c\"]),\n    \"//conditions:default\": [],\n}) + select({\n    \"with_kcp\": glob([\"event/kcp/*.h\", \"event/kcp/*.c\", \"event/kcp/*.cpp\"], exclude = [\"event/kcp/*_test.c\"]),\n    \"//conditions:default\": [],\n})\n\nSRCS = CORE_SRCS + glob([\"util/*.h\", \"util/*.c\", \"util/*.cpp\"], exclude = [\"util/*_test.c\"]) + select({\n    \"with_protocol\": glob([\"protocol/*.h\", \"protocol/*.c\", \"protocol/*.cpp\"], exclude = [\"protocol/*_test.c\"]),\n    \"//conditions:default\": [],\n}) + select({\n    \"with_evpp\": glob([\"cpputil/*.h\", \"cpputil/*.c\", \"cpputil/*.cpp\", \"evpp/*.h\", \"evpp/*.c\", \"evpp/*.cpp\"], exclude = [\"cpputil/*_test.c\", \"evpp/*_test.c\", \"evpp/*_test.cpp\"]),\n    \"//conditions:default\": [],\n}) + select({\n    \"with_http\": glob([\"http/*.h\", \"http/*.c\", \"http/*.cpp\"], exclude = [\"http/*_test.c\"]),\n    \"//conditions:default\": [],\n}) + select({\n    \"with_http_server\": glob([\"http/server/*.h\", \"http/server/*.c\", \"http/server/*.cpp\"], exclude = [\"http/server/*_test.c\"]),\n    \"//conditions:default\": [],\n}) + select({\n    \"with_http_client\": glob([\"http/client/*.h\", \"http/client/*.c\", \"http/client/*.cpp\"], exclude = [\"http/client/*_test.c\"]),\n    \"//conditions:default\": [],\n}) + select({\n    \"with_mqtt\": glob([\"mqtt/*.h\", \"mqtt/*.c\", \"mqtt/*.cpp\"], exclude = [\"mqtt/*_test.c\"]),\n    \"//conditions:default\": [],\n})\n\ncc_library(\n    name = \"hv_static\",\n    srcs = SRCS,\n    hdrs = HEADERS,\n    includes = HEADERS_DIRS,\n    defines = [\"HV_STATICLIB\"],\n    copts = COPTS,\n    linkstatic = True,\n    linkopts = LINKOPTS,\n)\n\n\ncc_library(\n    name = \"hv\",\n    srcs = SRCS,\n    hdrs = HEADERS,\n    includes = HEADERS_DIRS,\n    defines = [\"HV_DYNAMICLIB\"],\n    copts = COPTS,\n    linkopts = LINKOPTS,\n    visibility = [\"//visibility:public\"]\n)\n\nfilegroup(\n    name = \"libhv\",\n    srcs = select({\n        \"build_shared\": [\":hv\"],\n        \"//conditions:default\": [],\n    }) + select({\n        \"build_static\": [\":hv_static\"],\n        \"//conditions:default\": [],\n    })  + select({\n        \"build_examples\": [\"//examples:examples\"],\n        \"//conditions:default\": [],\n    })\n)\n\n\n"
        },
        {
          "name": "BUILD.md",
          "type": "blob",
          "size": 2.7509765625,
          "content": "## Prequired\n\n- c99\n- c++11\n\ngcc4.8+, msvc2015 or later\n\n## Makefile\noptions see [config.ini](config.ini)\n```\n./configure --with-openssl\nmake\nsudo make install\n```\n\n## cmake\noptions see [CMakeLists.txt](CMakeLists.txt)\n```\nmkdir build\ncd build\ncmake .. -DWITH_OPENSSL=ON\ncmake --build .\n```\n\n## bazel\noptions see [.bazelrc](.bazelrc)\n```\nbazel build libhv\n```\n\n## Unix\nuse Makefile or cmake or bazel\n\n## Windows\nuse cmake\n```\nmkdir win64\ncd win64\ncmake .. -G \"Visual Studio 15 2017 Win64\"\n#cmake .. -G \"Visual Studio 16 2019\" -A x64\n#cmake .. -G \"Visual Studio 17 2022\" -A x64\ncmake --build .\n```\n\n## CROSS_COMPILE\nuse Makefile\n```\nsudo apt install gcc-arm-linux-gnueabi g++-arm-linux-gnueabi # ubuntu\nexport CROSS_COMPILE=arm-linux-gnueabi-\n./configure\nmake clean\nmake libhv\n```\nor use cmake\n```\nmkdir build\ncd build\ncmake .. -DCMAKE_C_COMPILER=arm-linux-gnueabi-gcc -DCMAKE_CXX_COMPILER=arm-linux-gnueabi-g++\ncmake --build . --target libhv libhv_static\n```\n\n### mingw\nsee CROSS_COMPILE\n```\nsudo apt install mingw-w64 # ubuntu\n#export CROSS_COMPILE=i686-w64-mingw32-\nexport CROSS_COMPILE=x86_64-w64-mingw32-\n./configure\nmake clean\nmake libhv\n```\n\n### Android\n```\n#https://developer.android.com/ndk/downloads\n#export ANDROID_NDK_ROOT=~/Downloads/android-ndk-r21b\nmkdir build\ncd build\ncmake .. -DCMAKE_TOOLCHAIN_FILE=\"$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake\" -DANDROID_ABI=\"arm64-v8a\" -DANDROID_PLATFORM=android-21\ncmake --build . --target hv --config Release\n```\n\n### iOS\n```\nmkdir build\ncd build\ncmake .. -G Xcode -DCMAKE_TOOLCHAIN_FILE=../cmake/ios.toolchain.cmake -DPLATFORM=OS64 -DARCHS=\"arm64\" -DDEPLOYMENT_TARGET=9.0\ncmake --build . --target hv_static --config Release\n```\n\n## targets\n\n### lib\n- make libhv\n\n### examples\n- make examples\n\n### unittest\n- make unittest\n\n## options\n\n### compile without c++\n```\n./configure --without-evpp\nmake clean && make libhv\n```\n\n### compile WITH_OPENSSL\nEnable SSL/TLS in libhv is so easy :)\n```\n// see ssl/hssl.h\nhssl_ctx_t hssl_ctx_new(hssl_ctx_opt_t* opt);\n\n// see event/hloop.h\nint hio_new_ssl_ctx(hio_t* io, hssl_ctx_opt_t* opt);\n```\n\nhttps is the best example.\n```\nsudo apt install openssl libssl-dev # ubuntu\n./configure --with-openssl\nmake clean && make\nbin/httpd -s restart -d\nbin/curl -v http://localhost:8080\nbin/curl -v https://localhost:8443\n```\n\n### compile WITH_CURL\n```\n./configure --with-curl\nmake clean && make\nbin/httpd -s restart -d\nbin/curl -v http://localhost:8080\n```\n\n### compile WITH_NGHTTP2\n```\nsudo apt install libnghttp2-dev # ubuntu\n./configure --with-nghttp2\nmake clean && make\nbin/httpd -s restart -d\nbin/curl -v http://localhost:8080 --http2\n```\n\n### compile WITH_KCP\n```\n./configure --with-kcp\nmake clean && make\n```\n\n### compile WITH_MQTT\n```\n./configure --with-mqtt\nmake clean && make\n```\n\n### More\n```\n./configure --help\n```\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 9.3623046875,
          "content": "cmake_minimum_required(VERSION 3.6)\ncmake_policy(SET CMP0077 NEW)\n\nproject(hv VERSION 1.3.3)\n\noption(BUILD_SHARED \"build shared library\" ON)\noption(BUILD_STATIC \"build static library\" ON)\n\noption(BUILD_EXAMPLES \"build examples\" ON)\noption(BUILD_UNITTEST \"build unittest\" OFF)\n\n# see config.ini\noption(WITH_PROTOCOL \"compile protocol\" OFF)\n\noption(WITH_EVPP \"compile evpp\" ON)\noption(WITH_HTTP \"compile http\" ON)\noption(WITH_HTTP_SERVER \"compile http/server\" ON)\noption(WITH_HTTP_CLIENT \"compile http/client\" ON)\noption(WITH_MQTT \"compile mqtt\" OFF)\n\noption(ENABLE_UDS \"Unix Domain Socket\" OFF)\noption(USE_MULTIMAP \"MultiMap\" OFF)\n\noption(WITH_CURL \"with curl library (deprecated)\" OFF)\noption(WITH_NGHTTP2 \"with nghttp2 library\" OFF)\n\noption(WITH_OPENSSL \"with openssl library\" OFF)\noption(WITH_GNUTLS  \"with gnutls library\"  OFF)\noption(WITH_MBEDTLS \"with mbedtls library\" OFF)\n\noption(WITH_KCP \"compile event/kcp\" OFF)\n\nif(WIN32 OR MINGW)\n    option(WITH_WEPOLL \"compile event/wepoll -> use iocp\" ON)\n    option(ENABLE_WINDUMP \"Windows MiniDumpWriteDump\" OFF)\n    option(BUILD_FOR_MT \"build for /MT\" OFF)\n    if(BUILD_FOR_MT)\n        set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /MTd\")\n        set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /MTd\")\n        set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} /MT\")\n        set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /MT\")\n    endif()\nendif()\n\nmessage(STATUS \"CMAKE_SOURCE_DIR=${CMAKE_SOURCE_DIR}\")\nmessage(STATUS \"CMAKE_CURRENT_SOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR}\")\nif(NOT \"${CMAKE_CURRENT_SOURCE_DIR}\" STREQUAL \"${CMAKE_SOURCE_DIR}\")\n    set(BUILD_EXAMPLES OFF)\nendif()\n\nif(IOS)\n    set(BUILD_SHARED OFF)\n    set(BUILD_EXAMPLES OFF)\nendif()\n\nset(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake;${CMAKE_MODULE_PATH}\")\ninclude(utils)\ninclude(vars)\n\n# see configure\n# Checks for header files\ncheck_header(\"stdbool.h\")\ncheck_header(\"stdint.h\")\ncheck_header(\"stdatomic.h\")\ncheck_header(\"sys/types.h\")\ncheck_header(\"sys/stat.h\")\ncheck_header(\"sys/time.h\")\ncheck_header(\"fcntl.h\")\ncheck_header(\"pthread.h\")\ncheck_header(\"endian.h\")\ncheck_header(\"sys/endian.h\")\n\n# Checks for functions\nif(NOT MSVC)\n    set(CMAKE_REQUIRED_LIBRARIES \"-pthread\")\nendif()\ncheck_function(\"gettid\" \"unistd.h\")\ncheck_function(\"strlcpy\" \"string.h\")\ncheck_function(\"strlcat\" \"string.h\")\ncheck_function(\"clock_gettime\" \"time.h\")\ncheck_function(\"gettimeofday\" \"sys/time.h\")\ncheck_function(\"pthread_spin_lock\" \"pthread.h\")\ncheck_function(\"pthread_mutex_timedlock\" \"pthread.h\")\ncheck_function(\"sem_timedwait\" \"semaphore.h\")\ncheck_function(\"pipe\" \"unistd.h\")\ncheck_function(\"socketpair\" \"sys/socket.h\")\ncheck_function(\"eventfd\" \"sys/eventfd.h\")\ncheck_function(\"setproctitle\" \"unistd.h\")\n\nif (NOT HAVE_CLOCK_GETTIME)\n    include(CheckLibraryExists)\n    check_library_exists(rt clock_gettime \"\" HAVE_CLOCK_GETTIME_IN_RT)\n    if (HAVE_CLOCK_GETTIME_IN_RT)\n        set(HAVE_CLOCK_GETTIME ${HAVE_CLOCK_GETTIME_IN_RT})\n    endif()\nendif()\n\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/hconfig.h.in ${CMAKE_CURRENT_SOURCE_DIR}/hconfig.h)\n\n# see Makefile.in\nset(CMAKE_C_STANDARD 99)\nset(CMAKE_C_STANDARD_REQUIRED True)\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\n\nset(INCDIR include)\nset(SRCDIR src)\nset(LIBDIR lib)\nset(BINDIR bin)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${LIBDIR})\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${LIBDIR})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${BINDIR})\nmessage(STATUS \"CMAKE_LIBRARY_OUTPUT_DIRECTORY=${CMAKE_LIBRARY_OUTPUT_DIRECTORY}\")\n\nset(INCDIRS . include 3rd/include)\nset(LIBDIRS . lib 3rd/lib)\ninclude_directories(${INCDIRS} ${SRCDIR})\nlink_directories(${LIBDIRS})\n\nmessage(STATUS \"CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\")\nif(\"${CMAKE_BUILD_TYPE}\" STREQUAL \"Debug\")\n    add_definitions(-DDEBUG)\nelse()\n    add_definitions(-DNDEBUG)\nendif()\n\nif(ENABLE_UDS)\n    add_definitions(-DENABLE_UDS)\nendif()\n\nif(USE_MULTIMAP)\n    add_definitions(-DUSE_MULTIMAP)\nendif()\n\nif(WITH_CURL)\n    add_definitions(-DWITH_CURL)\n    set(LIBS ${LIBS} curl)\n    if(WIN32 OR MINGW)\n        set(LIBS ${LIBS} wldap32 advapi32 crypt32)\n    endif()\nendif()\n\nif(WITH_NGHTTP2)\n    add_definitions(-DWITH_NGHTTP2)\n    set(LIBS ${LIBS} nghttp2)\nendif()\n\nif(WITH_OPENSSL)\n    add_definitions(-DWITH_OPENSSL)\n    find_package(OpenSSL)\n    if(OpenSSL_FOUND)\n        set(LIBS ${LIBS} OpenSSL::SSL OpenSSL::Crypto)\n    else()\n        set(LIBS ${LIBS} ssl crypto)\n    endif()\nendif()\n\nif(WITH_GNUTLS)\n    add_definitions(-DWITH_GNUTLS)\n    set(LIBS ${LIBS} gnutls)\nendif()\n\nif(WITH_MBEDTLS)\n    add_definitions(-DWITH_MBEDTLS)\n    set(LIBS ${LIBS} mbedtls mbedx509 mbedcrypto)\nendif()\n\nif(WIN32 OR MINGW)\n    add_definitions(-DWIN32_LEAN_AND_MEAN -D_CRT_SECURE_NO_WARNINGS -D_WIN32_WINNT=0x0600)\n    set(LIBS ${LIBS} secur32 crypt32 winmm iphlpapi ws2_32)\n    if(ENABLE_WINDUMP)\n        add_definitions(-DENABLE_WINDUMP)\n        set(LIBS ${LIBS} dbghelp)\n    endif()\nendif()\n\nif(ANDROID)\n    set(LIBS ${LIBS} log)\nelseif(UNIX AND NOT MINGW)\n    set(LIBS ${LIBS} pthread m dl)\n    find_library(RT_LIBRARY rt)\n    if(RT_LIBRARY)\n        set(LIBS ${LIBS} rt)\n    endif()\nendif()\n\nif(APPLE)\n    set(LIBS ${LIBS} \"-framework CoreFoundation\" \"-framework Security\")\nendif()\n\n# see Makefile\nset(ALL_SRCDIRS . base ssl event event/kcp util cpputil evpp protocol http http/client http/server mqtt)\nset(CORE_SRCDIRS . base ssl event)\nif(WIN32 OR MINGW)\n    if(WITH_WEPOLL)\n        set(CORE_SRCDIRS ${CORE_SRCDIRS} event/wepoll)\n    endif()\nendif()\nif(WITH_KCP)\n    set(CORE_SRCDIRS ${CORE_SRCDIRS} event/kcp)\nendif()\nset(LIBHV_SRCDIRS ${CORE_SRCDIRS} util)\nset(LIBHV_HEADERS hv.h hconfig.h hexport.h)\nset(LIBHV_HEADERS ${LIBHV_HEADERS} ${BASE_HEADERS} ${SSL_HEADERS} ${EVENT_HEADERS} ${UTIL_HEADERS})\n\nif(WITH_PROTOCOL)\n    set(LIBHV_HEADERS ${LIBHV_HEADERS} ${PROTOCOL_HEADERS})\n    set(LIBHV_SRCDIRS ${LIBHV_SRCDIRS} protocol)\nendif()\n\nif(WITH_EVPP)\n    set(LIBHV_HEADERS ${LIBHV_HEADERS} ${CPPUTIL_HEADERS} ${EVPP_HEADERS})\n    set(LIBHV_SRCDIRS ${LIBHV_SRCDIRS} cpputil evpp)\n    if(WITH_HTTP)\n        set(LIBHV_HEADERS ${LIBHV_HEADERS} ${HTTP_HEADERS})\n        set(LIBHV_SRCDIRS ${LIBHV_SRCDIRS} http)\n        if(WITH_NGHTTP2)\n            set(LIBHV_HEADERS ${LIBHV_HEADERS} ${HTTP2_HEADERS})\n        endif()\n        if(WITH_HTTP_SERVER)\n            set(LIBHV_HEADERS ${LIBHV_HEADERS} ${HTTP_SERVER_HEADERS})\n            set(LIBHV_SRCDIRS ${LIBHV_SRCDIRS} http/server)\n        endif()\n        if(WITH_HTTP_CLIENT)\n            set(LIBHV_HEADERS ${LIBHV_HEADERS} ${HTTP_CLIENT_HEADERS})\n            set(LIBHV_SRCDIRS ${LIBHV_SRCDIRS} http/client)\n        endif()\n    endif()\n\n    if(CMAKE_SYSTEM_NAME MATCHES \"Linux\" AND CMAKE_COMPILER_IS_GNUCC)\n        set(LIBS ${LIBS} stdc++)\n    endif()\nendif()\n\nif(WITH_MQTT)\n    set(LIBHV_HEADERS ${LIBHV_HEADERS} ${MQTT_HEADERS})\n    set(LIBHV_SRCDIRS ${LIBHV_SRCDIRS} mqtt)\nendif()\n\nlist_source_directories(LIBHV_SRCS ${LIBHV_SRCDIRS})\n\nfile(INSTALL ${LIBHV_HEADERS} DESTINATION include/hv)\nfile(INSTALL ${LIBHV_HEADERS} DESTINATION ${PROJECT_SOURCE_DIR}/include/hv)\n\nif(BUILD_SHARED)\n    add_library(hv SHARED ${LIBHV_SRCS})\n    target_compile_definitions(hv PRIVATE HV_DYNAMICLIB)\n    target_include_directories(hv PRIVATE ${LIBHV_SRCDIRS}\n        INTERFACE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include> $<INSTALL_INTERFACE:include>)\n    target_link_libraries(hv ${LIBS})\n    install(TARGETS hv\n        EXPORT libhvConfig\n        ARCHIVE DESTINATION lib\n        LIBRARY DESTINATION lib\n        RUNTIME DESTINATION bin)\n    add_custom_target(libhv DEPENDS hv)\nendif()\n\nif(BUILD_STATIC)\n    add_library(hv_static STATIC ${LIBHV_SRCS})\n    target_compile_definitions(hv_static PUBLIC HV_STATICLIB)\n    target_include_directories(hv_static PRIVATE ${LIBHV_SRCDIRS}\n        INTERFACE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include> $<INSTALL_INTERFACE:include>)\n    target_link_libraries(hv_static ${LIBS})\n    install(TARGETS hv_static\n        EXPORT libhvConfig\n        ARCHIVE DESTINATION lib)\n    add_custom_target(libhv_static DEPENDS hv_static)\nendif()\n\ninstall(FILES ${LIBHV_HEADERS} DESTINATION include/hv)\ninstall(EXPORT libhvConfig DESTINATION lib/cmake/libhv)\n\nif(BUILD_SHARED)\n    set(HV_LIBRARIES hv CACHE INTERNAL \"link hv libraries\")\nelse()\n    add_definitions(-DHV_STATICLIB)\n    set(HV_LIBRARIES hv_static ${LIBS} CACHE INTERNAL \"link hv libraries\")\nendif()\n\nif(BUILD_EXAMPLES)\n    add_subdirectory(examples)\n    # for httpd -c etc/httpd.conf\n    file(INSTALL etc DESTINATION ${CMAKE_BINARY_DIR})\n    file(INSTALL etc DESTINATION ${CMAKE_BINARY_DIR}/bin)\n    file(INSTALL etc DESTINATION ${CMAKE_BINARY_DIR}/examples)\nendif()\n\nif(BUILD_UNITTEST)\n    add_subdirectory(unittest)\nendif()\n\n# CPack settings\nset(CPACK_PACKAGE_NAME \"libhv\")\nset(CPACK_PACKAGE_VERSION \"${PROJECT_VERSION}\")\nset(CPACK_PACKAGE_RELEASE 1)\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"A high-performance C/C++ network library\")\nset(CPACK_PACKAGE_VENDOR \"libhv\")\nset(CPACK_PACKAGE_CONTACT \"ithewei <ithewei@163.com>\")\nset(CPACK_PACKAGE_FILE_NAME \"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CMAKE_HOST_SYSTEM_PROCESSOR}\")\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE\")\nset(CPACK_RESOURCE_FILE_README \"${CMAKE_CURRENT_SOURCE_DIR}/README.md\")\n\n# Specify the package generators\nset(CPACK_GENERATOR \"TGZ;DEB;RPM\")\n\n# Enable CPack debug output\nset(CPACK_PACKAGE_DEBUG True)\n\n# https://cmake.org/cmake/help/latest/variable/CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION.html\nset(CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION \"ON\")\ninclude(CPack)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.47265625,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2020, ithewei\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 13.01953125,
          "content": "include config.mk\ninclude Makefile.vars\n\nMAKEF=$(MAKE) -f Makefile.in\nALL_SRCDIRS=. base ssl event event/kcp util cpputil evpp protocol http http/client http/server mqtt\nCORE_SRCDIRS=. base ssl event\nifeq ($(WITH_KCP), yes)\nCORE_SRCDIRS += event/kcp\nendif\n\nLIBHV_SRCDIRS = $(CORE_SRCDIRS) util\nLIBHV_HEADERS = hv.h hconfig.h hexport.h\nLIBHV_HEADERS += $(BASE_HEADERS) $(SSL_HEADERS) $(EVENT_HEADERS) $(UTIL_HEADERS)\n\nifeq ($(WITH_PROTOCOL), yes)\nLIBHV_HEADERS += $(PROTOCOL_HEADERS)\nLIBHV_SRCDIRS += protocol\nendif\n\nifeq ($(WITH_EVPP), yes)\nLIBHV_HEADERS += $(CPPUTIL_HEADERS) $(EVPP_HEADERS)\nLIBHV_SRCDIRS += cpputil evpp\n\nifeq ($(WITH_HTTP), yes)\nLIBHV_HEADERS += $(HTTP_HEADERS)\nLIBHV_SRCDIRS += http\n\nifeq ($(WITH_NGHTTP2), yes)\nLIBHV_HEADERS += $(HTTP2_HEADERS)\nendif\n\nifeq ($(WITH_HTTP_SERVER), yes)\nLIBHV_HEADERS += $(HTTP_SERVER_HEADERS)\nLIBHV_SRCDIRS += http/server\nendif\n\nifeq ($(WITH_HTTP_CLIENT), yes)\nLIBHV_HEADERS += $(HTTP_CLIENT_HEADERS)\nLIBHV_SRCDIRS += http/client\nendif\n\nendif\nendif\n\nifeq ($(WITH_MQTT), yes)\nLIBHV_HEADERS += $(MQTT_HEADERS)\nLIBHV_SRCDIRS += mqtt\nendif\n\ndefault: all\n\nall: libhv examples\n\t@echo \"make all done, please enjoy libhv.\"\n\nexamples: hmain_test htimer_test hloop_test pipe_test \\\n\tnc nmap tinyhttpd tinyproxyd httpd curl wget wrk consul \\\n\ttcp_client_test \\\n\ttcp_echo_server \\\n\ttcp_chat_server \\\n\ttcp_proxy_server \\\n\tudp_echo_server \\\n\tudp_proxy_server \\\n\tsocks5_proxy_server \\\n\tmulti-acceptor-processes \\\n\tmulti-acceptor-threads \\\n\tone-acceptor-multi-workers \\\n\thttp_server_test http_client_test \\\n\twebsocket_server_test \\\n\twebsocket_client_test \\\n\tmqtt_sub \\\n\tmqtt_pub \\\n\tmqtt_client_test \\\n\tjsonrpc\n\t@echo \"make examples done.\"\n\nclean:\n\t$(MAKEF) clean SRCDIRS=\"$(ALL_SRCDIRS)\"\n\t$(RM) examples/*.o examples/*/*.o\n\t$(RM) include/hv\n\t@echo \"make clean done.\"\n\nprepare:\n\t$(MKDIR) bin\n\nlibhv:\n\t$(MKDIR) lib\n\t$(MAKEF) TARGET=$@ TARGET_TYPE=\"SHARED|STATIC\" SRCDIRS=\"$(LIBHV_SRCDIRS)\"\n\t$(MKDIR) include/hv\n\t$(CP) $(LIBHV_HEADERS) include/hv\n\t@echo \"make libhv done.\"\n\ninstall:\n\t$(MKDIR) $(INSTALL_INCDIR)\n\t$(MKDIR) $(INSTALL_LIBDIR)\n\t$(CP) include/hv/* $(INSTALL_INCDIR)\n\t$(CP) lib/libhv.*  $(INSTALL_LIBDIR)\n\t$(LDCONFIG)\n\t@echo \"make install done.\"\n\nuninstall: clean\n\t$(RM) $(PREFIX)/include/hv\n\t$(RM) $(PREFIX)/lib/libhv.*\n\t@echo \"make uninstall done.\"\n\nhmain_test: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\". base cpputil\" SRCS=\"examples/hmain_test.cpp\"\n\nhtimer_test: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS)\" SRCS=\"examples/htimer_test.c\"\n\nhloop_test: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS)\" SRCS=\"examples/hloop_test.c\"\n\npipe_test: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS)\" SRCS=\"examples/pipe_test.c\"\n\ntcp_client_test: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS)\" SRCS=\"examples/tcp_client_test.c\"\n\ntcp_echo_server: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS)\" SRCS=\"examples/tcp_echo_server.c\"\n\ntcp_chat_server: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS)\" SRCS=\"examples/tcp_chat_server.c\"\n\ntcp_proxy_server: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS)\" SRCS=\"examples/tcp_proxy_server.c\"\n\nudp_echo_server: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS)\" SRCS=\"examples/udp_echo_server.c\"\n\nudp_proxy_server: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS)\" SRCS=\"examples/udp_proxy_server.c\"\n\nsocks5_proxy_server: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS)\" SRCS=\"examples/socks5_proxy_server.c\"\n\nmulti-acceptor-processes: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS)\" SRCS=\"examples/multi-thread/multi-acceptor-processes.c\"\n\nmulti-acceptor-threads: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS)\" SRCS=\"examples/multi-thread/multi-acceptor-threads.c\"\n\none-acceptor-multi-workers: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS)\" SRCS=\"examples/multi-thread/one-acceptor-multi-workers.c\"\n\nnc: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS)\" SRCS=\"examples/nc.c\"\n\ntinyhttpd: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS)\" SRCS=\"examples/tinyhttpd.c\"\n\ntinyproxyd: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS)\" SRCS=\"examples/tinyproxyd.c\"\n\nnmap: prepare libhv\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS) cpputil examples/nmap\" DEFINES=\"PRINT_DEBUG\"\n\nwrk: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS) util cpputil evpp http\" SRCS=\"examples/wrk.cpp\"\n\nhttpd: prepare\n\t$(RM) examples/httpd/*.o\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS) util cpputil evpp http http/client http/server examples/httpd\"\n\nconsul: prepare libhv\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS) util cpputil evpp http http/client examples/consul\" DEFINES=\"PRINT_DEBUG\"\n\ncurl: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS) util cpputil evpp http http/client\" SRCS=\"examples/curl.cpp\"\n\t# $(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS) util cpputil evpp http http/client\" SRCS=\"examples/curl.cpp\" WITH_CURL=yes\n\nwget: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS) util cpputil evpp http http/client\" SRCS=\"examples/wget.cpp\"\n\nhttp_server_test: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS) util cpputil evpp http http/server\" SRCS=\"examples/http_server_test.cpp\"\n\nhttp_client_test: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS) util cpputil evpp http http/client\" SRCS=\"examples/http_client_test.cpp\"\n\nwebsocket_server_test: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS) util cpputil evpp http http/server\" SRCS=\"examples/websocket_server_test.cpp\"\n\nwebsocket_client_test: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS) util cpputil evpp http http/client\" SRCS=\"examples/websocket_client_test.cpp\"\n\nmqtt_sub: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS) mqtt\" SRCS=\"examples/mqtt/mqtt_sub.c\"\n\nmqtt_pub: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS) mqtt\" SRCS=\"examples/mqtt/mqtt_pub.c\"\n\nmqtt_client_test: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS) mqtt\" SRCS=\"examples/mqtt/mqtt_client_test.cpp\"\n\nkcptun: kcptun_client kcptun_server\n\nkcptun_client: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS) examples/kcptun/smux examples/kcptun/client\"\n\nkcptun_server: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS) examples/kcptun/smux examples/kcptun/server\"\n\njsonrpc: jsonrpc_client jsonrpc_server\n\njsonrpc_client: prepare\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS)\" SRCS=\"examples/jsonrpc/jsonrpc_client.c examples/jsonrpc/cJSON.c\"\n\njsonrpc_server: prepare\n\t$(RM) examples/jsonrpc/*.o\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS)\" SRCS=\"examples/jsonrpc/jsonrpc_server.c examples/jsonrpc/cJSON.c\"\n\nprotorpc: protorpc_client protorpc_server\n\nprotorpc_protoc:\n\tbash examples/protorpc/proto/protoc.sh\n\nprotorpc_client: prepare protorpc_protoc\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS) cpputil evpp examples/protorpc/generated\" \\\n\t\tSRCS=\"examples/protorpc/protorpc_client.cpp examples/protorpc/protorpc.c\" \\\n\t\tLIBS=\"protobuf\"\n\nprotorpc_server: prepare protorpc_protoc\n\t$(RM) examples/protorpc/*.o\n\t$(MAKEF) TARGET=$@ SRCDIRS=\"$(CORE_SRCDIRS) cpputil evpp examples/protorpc/generated\" \\\n\t\tSRCS=\"examples/protorpc/protorpc_server.cpp examples/protorpc/protorpc.c\" \\\n\t\tLIBS=\"protobuf\"\n\nunittest: prepare\n\t$(CC)  -g -Wall -O0 -std=c99   -I. -Ibase            -o bin/rbtree_test       unittest/rbtree_test.c        base/rbtree.c\n\t$(CC)  -g -Wall -O0 -std=c99   -I. -Ibase            -o bin/hbase_test        unittest/hbase_test.c         base/hbase.c\n\t$(CC)  -g -Wall -O0 -std=c99   -I. -Ibase            -o bin/mkdir_p           unittest/mkdir_test.c         base/hbase.c\n\t$(CC)  -g -Wall -O0 -std=c99   -I. -Ibase            -o bin/rmdir_p           unittest/rmdir_test.c         base/hbase.c\n\t$(CC)  -g -Wall -O0 -std=c99   -I. -Ibase            -o bin/date              unittest/date_test.c          base/htime.c\n\t$(CC)  -g -Wall -O0 -std=c99   -I. -Ibase            -o bin/hatomic_test      unittest/hatomic_test.c       -pthread\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase            -o bin/hatomic_cpp_test  unittest/hatomic_test.cpp     -pthread\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase            -o bin/hthread_test      unittest/hthread_test.cpp     -pthread\n\t$(CC)  -g -Wall -O0 -std=c99   -I. -Ibase            -o bin/hmutex_test       unittest/hmutex_test.c        base/htime.c   -pthread\n\t$(CC)  -g -Wall -O0 -std=c99   -I. -Ibase            -o bin/connect_test      unittest/connect_test.c       base/hsocket.c base/htime.c\n\t$(CC)  -g -Wall -O0 -std=c99   -I. -Ibase            -o bin/socketpair_test   unittest/socketpair_test.c    base/hsocket.c\n\t$(CC)  -g -Wall -O0 -std=c99   -I. -Iutil            -o bin/base64            unittest/base64_test.c        util/base64.c\n\t$(CC)  -g -Wall -O0 -std=c99   -I. -Iutil            -o bin/md5               unittest/md5_test.c           util/md5.c\n\t$(CC)  -g -Wall -O0 -std=c99   -I. -Iutil            -o bin/sha1              unittest/sha1_test.c          util/sha1.c\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Icpputil  -o bin/hstring_test      unittest/hstring_test.cpp     cpputil/hstring.cpp\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Icpputil  -o bin/hpath_test        unittest/hpath_test.cpp       cpputil/hpath.cpp\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Icpputil  -o bin/hurl_test         unittest/hurl_test.cpp        cpputil/hurl.cpp base/hbase.c\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Icpputil  -o bin/ls                unittest/listdir_test.cpp     cpputil/hdir.cpp\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Icpputil  -o bin/ifconfig          unittest/ifconfig_test.cpp    cpputil/ifconfig.cpp\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Icpputil  -o bin/defer_test        unittest/defer_test.cpp\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Icpputil  -o bin/synchronized_test unittest/synchronized_test.cpp -pthread\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Icpputil  -o bin/threadpool_test   unittest/threadpool_test.cpp  -pthread\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Icpputil  -o bin/objectpool_test   unittest/objectpool_test.cpp  -pthread\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Issl -Ievent -Ievpp -Icpputil -Ihttp -Ihttp/client -Ihttp/server -o bin/sizeof_test unittest/sizeof_test.cpp\n\t$(CC)  -g -Wall -O0 -std=c99   -I. -Ibase -Iprotocol -o bin/nslookup          unittest/nslookup_test.c      protocol/dns.c  base/hsocket.c\n\t$(CC)  -g -Wall -O0 -std=c99   -I. -Ibase -Iprotocol -o bin/ping              unittest/ping_test.c          protocol/icmp.c base/hsocket.c base/htime.c -DPRINT_DEBUG\n\t$(CC)  -g -Wall -O0 -std=c99   -I. -Ibase -Iprotocol -o bin/ftp               unittest/ftp_test.c           protocol/ftp.c  base/hsocket.c\n\t$(CC)  -g -Wall -O0 -std=c99   -I. -Ibase -Iprotocol -Iutil -o bin/sendmail   unittest/sendmail_test.c      protocol/smtp.c base/hsocket.c util/base64.c\n\nrun-unittest: unittest\n\tbash scripts/unittest.sh\n\ncheck: examples\n\tbash scripts/check.sh\n\nevpp: prepare libhv\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Issl -Ievent -Icpputil -Ievpp -o bin/EventLoop_test           evpp/EventLoop_test.cpp           -Llib -lhv -pthread\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Issl -Ievent -Icpputil -Ievpp -o bin/EventLoopThread_test     evpp/EventLoopThread_test.cpp     -Llib -lhv -pthread\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Issl -Ievent -Icpputil -Ievpp -o bin/EventLoopThreadPool_test evpp/EventLoopThreadPool_test.cpp -Llib -lhv -pthread\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Issl -Ievent -Icpputil -Ievpp -o bin/TimerThread_test         evpp/TimerThread_test.cpp         -Llib -lhv -pthread\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Issl -Ievent -Icpputil -Ievpp -o bin/TcpServer_test           evpp/TcpServer_test.cpp           -Llib -lhv -pthread\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Issl -Ievent -Icpputil -Ievpp -o bin/TcpClient_test           evpp/TcpClient_test.cpp           -Llib -lhv -pthread\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Issl -Ievent -Icpputil -Ievpp -o bin/TcpClientEventLoop_test  evpp/TcpClientEventLoop_test.cpp  -Llib -lhv -pthread\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Issl -Ievent -Icpputil -Ievpp -o bin/UdpServer_test           evpp/UdpServer_test.cpp           -Llib -lhv -pthread\n\t$(CXX) -g -Wall -O0 -std=c++11 -I. -Ibase -Issl -Ievent -Icpputil -Ievpp -o bin/UdpClient_test           evpp/UdpClient_test.cpp           -Llib -lhv -pthread\n\n# UNIX only\nwebbench: prepare\n\t$(CC) -o bin/webbench unittest/webbench.c\n\necho-servers:\n\t$(CXX) -g -Wall -std=c++11 -O3 -o bin/pingpong_client echo-servers/pingpong_client.cpp -lhv -pthread\n\t$(CC)  -g -Wall -std=c99   -O3 -o bin/libevent_echo   echo-servers/libevent_echo.c     -levent\n\t$(CC)  -g -Wall -std=c99   -O3 -o bin/libev_echo      echo-servers/libev_echo.c        -lev\n\t$(CC)  -g -Wall -std=c99   -O3 -o bin/libuv_echo      echo-servers/libuv_echo.c        -luv\n\t$(CC)  -g -Wall -std=c99   -O3 -o bin/libhv_echo      echo-servers/libhv_echo.c        -lhv\n\t$(CXX) -g -Wall -std=c++11 -O3 -o bin/asio_echo       echo-servers/asio_echo.cpp       -lboost_system -pthread\n\t$(CXX) -g -Wall -std=c++11 -O3 -o bin/poco_echo       echo-servers/poco_echo.cpp       -lPocoNet -lPocoUtil -lPocoFoundation\n#\t$(CXX) -g -Wall -std=c++11 -O3 -o bin/muduo_echo      echo-servers/muduo_echo.cpp      -lmuduo_net -lmuduo_base -pthread\n\necho-benchmark: echo-servers\n\tbash echo-servers/benchmark.sh\n\n.PHONY: clean prepare install uninstall libhv examples unittest evpp echo-servers\n"
        },
        {
          "name": "Makefile.in",
          "type": "blob",
          "size": 6.7275390625,
          "content": "#+++++++++++++++++++++++++++++++++configure++++++++++++++++++++++++++++++++++++++++\n# OS=Windows,Linux,Android\n# ARCH=x86,x86_64,arm,aarch64\n# CC  = $(CROSS_COMPILE)gcc\n# CXX = $(CROSS_COMPILE)g++\n# CPPFLAGS += $(addprefix -D, $(DEFINES))\n# CPPFLAGS += $(addprefix -I, $(SRCDIRS))\n# CPPFLAGS += $(addprefix -I, $(INCDIRS))\n# LDFLAGS  += $(addprefix -L, $(LIBDIRS))\n# LDFLAGS  += $(addprefix -l, $(LIBS))\n#\n# Usage:\n# make all \\\n# TARGET=libxx \\\n# TARGET_TYPE=SHARED \\\n# BUILD_TYPE=DEBUG \\\n# CROSS_COMPILE=arm-linux-androideabi- \\\n# SRCDIRS=\"src/base src/event\" \\\n# INCDIRS=\"src/util\" \\\n# SRCS=\"src/util/hmain.cpp src/util/iniparser.cpp\" \\\n# DEFINES=USE_OPENCV \\\n# LIBS=\"opencv_core opencv_highgui\"\n#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n-include config.mk\n\n# VARIABLES\nTARGET ?= test\n# BUILD_TYPE=DEBUG,RELEASE\nBUILD_TYPE ?= RELEASE\n# TARGET_TYPE=EXECUTABLE,SHARED,STATIC,SHARED|STATIC\nTARGET_TYPE ?= EXECUTABLE\n\n# COMMANDS\nifdef CROSS_COMPILE\nCC \t= $(CROSS_COMPILE)gcc\nCXX = $(CROSS_COMPILE)g++\nCPP = $(CC) -E\nAS \t= $(CROSS_COMPILE)as\nLD\t= $(CROSS_COMPILE)ld\nAR\t= $(CROSS_COMPILE)ar\nNM\t= $(CROSS_COMPILE)nm\nSTRIP \t= $(CROSS_COMPILE)strip\nendif\n\nMKDIR = -mkdir -p 2>/dev/null\nCP = -cp -r 2>/dev/null\nRM = -rm -r 2>/dev/null\n\n# PLATFORM: OS, ARCH\nCC_VERSION=$(shell $(CC) --version 2>&1 | head -n 1)\nTARGET_PLATFORM=$(shell $(CC) -v 2>&1 | grep Target | sed 's/Target: //')\nifneq ($(findstring mingw, $(TARGET_PLATFORM)), )\n\tOS=Windows\nendif\nifneq ($(findstring android, $(TARGET_PLATFORM)), )\n\tOS=Android\nendif\nifneq ($(findstring darwin, $(TARGET_PLATFORM)), )\n\tOS=Darwin\nendif\nifndef OS\n\tOS=Linux\nendif\n\nifndef ARCH\nARCH=$(shell echo $(TARGET_PLATFORM) | awk -F'-' '{print $$1}')\nendif\n\n# CFLAGS, CXXFLAGS, ARFLAGS\nBUILD_TYPE_UPPER := $(shell echo $(BUILD_TYPE) | tr 'a-z' 'A-Z')\nifeq ($(BUILD_TYPE_UPPER), DEBUG)\n\tDEFAULT_CFLAGS = -g -Wall -O0\nelse\n\tDEFAULT_CFLAGS += -O2\nendif\n\nCFLAGS ?= $(DEFAULT_CFLAGS)\nCXXFLAGS ?= $(DEFAULT_CFLAGS)\n\nifneq ($(OS), Windows)\nifeq ($(findstring -fPIC, $(CFLAGS)), )\noverride CFLAGS += -fPIC\nendif\nifeq ($(findstring -fPIC, $(CXXFLAGS)), )\noverride CXXFLAGS += -fPIC\nendif\nendif\n\nifeq ($(findstring -std, $(CFLAGS)), )\noverride CFLAGS += -std=c99\nendif\n\nifeq ($(findstring -std, $(CXXFLAGS)), )\noverride CXXFLAGS += -std=c++11\nendif\n\nARFLAGS ?= cr\n\n# DIRS\nifeq ($(OS), Linux)\n\tPREFIX ?= /usr/local\nelse\n\tPREFIX ?= install\nendif\n\nINCDIR = include\nLIBDIR = lib\nSRCDIR = src\nBINDIR = bin\nDEPDIR = 3rd\nCONFDIR = etc\nDISTDIR = dist\nDOCDIR  = docs\n\nSRCDIRS += $(shell find $(SRCDIR) -type d)\noverride INCDIRS += $(INCDIR) $(DEPDIR) $(DEPDIR)/include\noverride LIBDIRS += $(LIBDIR) $(DEPDIR)/lib $(DEPDIR)/lib/$(TARGET_PLATFORM)\n\nALL_SRCS += $(foreach dir, $(SRCDIRS), $(wildcard $(dir)/*.c $(dir)/*.cc $(dir)/*.cpp))\nifeq ($(ALL_SRCS), )\n\tALL_SRCS = $(wildcard *.c *.cc *.cpp)\nendif\noverride SRCS += $(filter-out %_test.c %_test.cc %_test.cpp, $(ALL_SRCS))\n# OBJS += $(patsubst %.c, %.o, $(SRCS))\n# OBJS += $(patsubst %.cc, %.o, $(SRCS))\n# OBJS += $(patsubst %.cpp, %.o, $(SRCS))\nOBJS := $(addsuffix .o, $(basename $(SRCS)))\n\nINSTALLED_INCS=$(addprefix $(PREFIX)/$(INCDIR)/, $(shell ls $(INCDIR)))\nINSTALLED_LIBS=$(addprefix $(PREFIX)/$(LIBDIR)/, $(shell ls $(LIBDIR)))\nINSTALLED_BINS=$(addprefix $(PREFIX)/$(BINDIR)/, $(shell ls $(BINDIR)))\n\n# CPPFLAGS\nifeq ($(OS), Windows)\n\tCPPFLAGS += -D_WIN32_WINNT=0x600\nifeq ($(TARGET_TYPE), SHARED)\n\tCPPFLAGS += -DDLL_EXPORTS\nendif\nendif\n\nifeq ($(BUILD_TYPE_UPPER), DEBUG)\n\tCPPFLAGS += -DDEBUG\nelse\n\tCPPFLAGS += -DNDEBUG\nendif\n\nifeq ($(ENABLE_UDS), yes)\n\tCPPFLAGS += -DENABLE_UDS\nendif\n\nifeq ($(USE_MULTIMAP), yes)\n\tCPPFLAGS += -DUSE_MULTIMAP\nendif\n\nCPPFLAGS += $(addprefix -D, $(DEFINES))\nCPPFLAGS += $(addprefix -I, $(INCDIRS))\nCPPFLAGS += $(addprefix -I, $(SRCDIRS))\n\n# LDFLAGS\nifeq ($(OS), Windows)\n\tLDFLAGS += -static-libgcc -static-libstdc++\nendif\n\nifeq ($(WITH_CURL), yes)\n\tCPPFLAGS += -DWITH_CURL\n\tLDFLAGS += -lcurl\nifeq ($(OS), Windows)\n\tLDFLAGS += -lwldap32 -ladvapi32 -lcrypt32\nendif\nendif\n\nifeq ($(WITH_NGHTTP2), yes)\n\tCPPFLAGS += -DWITH_NGHTTP2\n\tLDFLAGS += -lnghttp2\nendif\n\nifeq ($(WITH_OPENSSL), yes)\n\tCPPFLAGS += -DWITH_OPENSSL\n\tLDFLAGS += -lssl -lcrypto\nelse\nifeq ($(WITH_GNUTLS), yes)\n\tCPPFLAGS += -DWITH_GNUTLS\n\tLDFLAGS += -lgnutls\nelse\nifeq ($(WITH_MBEDTLS), yes)\n\tCPPFLAGS += -DWITH_MBEDTLS\n\tLDFLAGS += -lmbedtls -lmbedx509 -lmbedcrypto\nendif\nendif\nendif\n\nLDFLAGS += $(addprefix -L, $(LIBDIRS))\nLDFLAGS += $(addprefix -l, $(LIBS))\n\nifeq ($(OS), Windows)\n\tLDFLAGS += -lsecur32 -lcrypt32 -lwinmm -liphlpapi -lws2_32\nifeq ($(ENABLE_WINDUMP), yes)\n\tCPPFLAGS += -DENABLE_WINDUMP\n\tLDFLAGS += -ldbghelp\nendif\n\tLDFLAGS += -Wl,-Bstatic -lstdc++ -lpthread -lm\nelse\nifeq ($(filter %.cc %.cpp, $(SRCS)), )\n\tLINK = $(CC)\nelse\n\tLINK = $(CXX)\n\tLDFLAGS += -lstdc++\nendif\nifeq ($(OS), Android)\n\tLDFLAGS += -lm -llog -ldl\nelse\n\tLDFLAGS += -lpthread -lm -ldl\n\tLINK_RT=$(shell echo \"int main(){return 0;}\" | $(CC) -x c - -lrt 2>&1)\nifeq ($(LINK_RT), )\n\tLDFLAGS += -lrt\nendif\nendif\nendif\n\nifeq ($(OS), Darwin)\n\tLDFLAGS += -framework CoreFoundation -framework Security\nendif\n\nLINK ?= $(CC)\n\n# info\n$(info $(CC_VERSION))\n\n$(info OS   = $(OS))\n$(info ARCH = $(ARCH))\n$(info MAKE = $(MAKE))\n$(info CC   = $(CC))\n$(info CXX  = $(CXX))\n\n$(info CFLAGS   = $(CFLAGS))\n$(info CXXFLAGS = $(CXXFLAGS))\n$(info CPPFLAGS = $(CPPFLAGS))\n$(info LDFLAGS  = $(LDFLAGS))\n\n$(info TARGET           = $(TARGET))\n$(info TARGET_TYPE      = $(TARGET_TYPE))\n$(info TARGET_PLATFORM  = $(TARGET_PLATFORM))\n$(info BUILD_TYPE       = $(BUILD_TYPE))\n\n$(info SRCS=$(SRCS))\n$(info OBJS=$(OBJS))\n\n# $(info INSTALLED_INCS=$(INSTALLED_INCS))\n# $(info INSTALLED_LIBS=$(INSTALLED_LIBS))\n# $(info INSTALLED_BINS=$(INSTALLED_BINS))\n\ndefault: all\n\nall: prepare $(TARGET)\n\nprepare:\n\t$(MKDIR) $(BINDIR) $(LIBDIR)\n\n$(TARGET): $(OBJS)\nifneq ($(findstring SHARED, $(TARGET_TYPE)), )\nifeq ($(OS), Windows)\n\t$(LINK) -shared $^ -o $(LIBDIR)/$@.dll $(LDFLAGS) -Wl,--output-def,$(LIBDIR)/$(@).def\nelse\nifeq ($(OS), Darwin)\n\t$(LINK) -dynamiclib -install_name @rpath/$@.dylib $^ -o $(LIBDIR)/$@.dylib $(LDFLAGS)\nelse\n\t$(LINK) -shared $^ -o $(LIBDIR)/$@.so $(LDFLAGS)\nendif\nendif\nendif\n\nifneq ($(findstring STATIC, $(TARGET_TYPE)), )\n\t$(AR) $(ARFLAGS) $(LIBDIR)/$@.a $^\nendif\n\nifneq ($(findstring EXECUTABLE, $(TARGET_TYPE)), )\nifeq ($(OS), Windows)\n\t$(LINK) $^ -o $(BINDIR)/$@.exe $(LDFLAGS)\nelse\n\t$(LINK) $^ -o $(BINDIR)/$@ $(LDFLAGS)\nendif\nendif\n\nclean:\n\t$(RM) $(OBJS)\n\t#$(RM) $(LIBDIR)\n\t#$(RM) $(BINDIR)\n\ninstall:\n\t$(CP) $(INCDIR)/* $(PREFIX)/$(INCDIR)/\n\t$(CP) $(LIBDIR)/* $(PREFIX)/$(LIBDIR)/\n\t$(CP) $(BINDIR)/* $(PREFIX)/$(BINDIR)/\n\t$(LDCONFIG)\n\nuninstall:\n\t$(RM) $(INSTALLED_INCS)\n\t$(RM) $(INSTALLED_LIBS)\n\t$(RM) $(INSTALLED_BINS)\n\ndist:\n\t$(MKDIR) $(DISTDIR)\n\t$(CP) $(INCDIR) $(LIBDIR) $(BINDIR) $(CONFDIR) $(DOCDIR) $(DISTDIR)\n\nundist:\n\t$(RM) $(DISTDIR)\n\n.PHONY: default all prepare clean install uninstall dist undist\n"
        },
        {
          "name": "Makefile.vars",
          "type": "blob",
          "size": 2.0400390625,
          "content": "MKDIR = -mkdir -p 2>/dev/null\nCP = -cp -r 2>/dev/null\nRM = -rm -r 2>/dev/null\nLDCONFIG = -ldconfig 2>/dev/null\n\nPREFIX ?= /usr/local\nINSTALL_INCDIR ?= $(PREFIX)/include/hv\nINSTALL_LIBDIR ?= $(PREFIX)/lib\n\nBASE_HEADERS =  base/hplatform.h\\\n\t\t\t\t\\\n\t\t\t\tbase/hdef.h\\\n\t\t\t\tbase/hatomic.h\\\n\t\t\t\tbase/herr.h\\\n\t\t\t\tbase/htime.h\\\n\t\t\t\tbase/hmath.h\\\n\t\t\t\tbase/hbase.h\\\n\t\t\t\tbase/hversion.h\\\n\t\t\t\tbase/hsysinfo.h\\\n\t\t\t\tbase/hproc.h\\\n\t\t\t\tbase/hthread.h\\\n\t\t\t\tbase/hmutex.h\\\n\t\t\t\tbase/hsocket.h\\\n\t\t\t\tbase/hlog.h\\\n\t\t\t\tbase/hbuf.h\\\n\t\t\t\tbase/hmain.h\\\n\t\t\t\tbase/hendian.h\\\n\nSSL_HEADERS =   ssl/hssl.h\n\nEVENT_HEADERS = event/hloop.h\\\n\t\t\t\tevent/nlog.h\\\n\nUTIL_HEADERS =  util/base64.h\\\n\t\t\t\tutil/md5.h\\\n\t\t\t\tutil/sha1.h\\\n\nCPPUTIL_HEADERS = cpputil/hmap.h\\\n\t\t\t\tcpputil/hstring.h\\\n\t\t\t\tcpputil/hfile.h\\\n\t\t\t\tcpputil/hpath.h\\\n\t\t\t\tcpputil/hdir.h\\\n\t\t\t\tcpputil/hurl.h\\\n\t\t\t\tcpputil/hscope.h\\\n\t\t\t\tcpputil/hthreadpool.h\\\n\t\t\t\tcpputil/hasync.h\\\n\t\t\t\tcpputil/hobjectpool.h\\\n\t\t\t\tcpputil/ifconfig.h\\\n\t\t\t\tcpputil/iniparser.h\\\n\t\t\t\tcpputil/json.hpp\\\n\t\t\t\tcpputil/singleton.h\\\n\t\t\t\tcpputil/ThreadLocalStorage.h\\\n\nEVPP_HEADERS  = evpp/Buffer.h\\\n\t\t\t\tevpp/Channel.h\\\n\t\t\t\tevpp/Event.h\\\n\t\t\t\tevpp/EventLoop.h\\\n\t\t\t\tevpp/EventLoopThread.h\\\n\t\t\t\tevpp/EventLoopThreadPool.h\\\n\t\t\t\tevpp/Status.h\\\n\t\t\t\tevpp/TcpClient.h\\\n\t\t\t\tevpp/TcpServer.h\\\n\t\t\t\tevpp/UdpClient.h\\\n\t\t\t\tevpp/UdpServer.h\\\n\nPROTOCOL_HEADERS =  protocol/icmp.h\\\n\t\t\t\t\tprotocol/dns.h\\\n\t\t\t\t\tprotocol/ftp.h\\\n\t\t\t\t\tprotocol/smtp.h\n\nHTTP_HEADERS =  http/httpdef.h\\\n\t\t\t\thttp/wsdef.h\\\n\t\t\t\thttp/http_content.h\\\n\t\t\t\thttp/HttpMessage.h\\\n\t\t\t\thttp/HttpParser.h\\\n\t\t\t\thttp/WebSocketParser.h\\\n\t\t\t\thttp/WebSocketChannel.h\\\n\nHTTP2_HEADERS = http/http2def.h\\\n\t\t\t\thttp/grpcdef.h\\\n\nHTTP_CLIENT_HEADERS =   http/client/HttpClient.h\\\n\t\t\t\t\t\thttp/client/requests.h\\\n\t\t\t\t\t\thttp/client/axios.h\\\n\t\t\t\t\t\thttp/client/AsyncHttpClient.h\\\n\t\t\t\t\t\thttp/client/WebSocketClient.h\\\n\nHTTP_SERVER_HEADERS =   http/server/HttpServer.h\\\n\t\t\t\t\t\thttp/server/HttpService.h\\\n\t\t\t\t\t\thttp/server/HttpContext.h\\\n\t\t\t\t\t\thttp/server/HttpResponseWriter.h\\\n\t\t\t\t\t\thttp/server/WebSocketServer.h\\\n\nMQTT_HEADERS = mqtt/mqtt_protocol.h\\\n\t\t\t   mqtt/mqtt_client.h\\\n"
        },
        {
          "name": "README-CN.md",
          "type": "blob",
          "size": 20.6669921875,
          "content": "[English](README.md) | 中文\n\n# libhv\n\n[![Linux](https://badgen.net/badge/Linux/success/green?icon=github)](https://github.com/ithewei/libhv/actions/workflows/CI.yml?query=branch%3Amaster)\n[![Windows](https://badgen.net/badge/Windows/success/green?icon=github)](https://github.com/ithewei/libhv/actions/workflows/CI.yml?query=branch%3Amaster)\n[![macOS](https://badgen.net/badge/macOS/success/green?icon=github)](https://github.com/ithewei/libhv/actions/workflows/CI.yml?query=branch%3Amaster)\n[![Android](https://badgen.net/badge/Android/success/green?icon=github)](https://github.com/ithewei/libhv/actions/workflows/CI.yml?query=branch%3Amaster)\n[![iOS](https://badgen.net/badge/iOS/success/green?icon=github)](https://github.com/ithewei/libhv/actions/workflows/CI.yml?query=branch%3Amaster)\n[![benchmark](https://github.com/ithewei/libhv/workflows/benchmark/badge.svg?branch=master)](https://github.com/ithewei/libhv/actions/workflows/benchmark.yml?query=branch%3Amaster)\n<br>\n[![release](https://badgen.net/github/release/ithewei/libhv?icon=github)](https://github.com/ithewei/libhv/releases)\n[![stars](https://badgen.net/github/stars/ithewei/libhv?icon=github)](https://github.com/ithewei/libhv/stargazers)\n[![forks](https://badgen.net/github/forks/ithewei/libhv?icon=github)](https://github.com/ithewei/libhv/forks)\n[![issues](https://badgen.net/github/issues/ithewei/libhv?icon=github)](https://github.com/ithewei/libhv/issues)\n[![PRs](https://badgen.net/github/prs/ithewei/libhv?icon=github)](https://github.com/ithewei/libhv/pulls)\n[![contributors](https://badgen.net/github/contributors/ithewei/libhv?icon=github)](https://github.com/ithewei/libhv/contributors)\n[![license](https://badgen.net/github/license/ithewei/libhv?icon=github)](LICENSE)\n<br>\n[![gitee](https://badgen.net/badge/mirror/gitee/red)](https://gitee.com/libhv/libhv)\n[![awesome-c](https://badgen.net/badge/icon/awesome-c/pink?icon=awesome&label&color)](https://github.com/oz123/awesome-c)\n[![awesome-cpp](https://badgen.net/badge/icon/awesome-cpp/pink?icon=awesome&label&color)](https://github.com/fffaraz/awesome-cpp)\n\n`libhv`是一个类似于`libevent、libev、libuv`的跨平台网络库，提供了更易用的接口和更丰富的协议。\n\n## 📚 中文资料\n\n- **libhv QQ群**: `739352073`，欢迎加群交流\n- **libhv 源码剖析**: <https://hewei.blog.csdn.net/article/details/123295998>\n- **libhv 接口手册**: <https://hewei.blog.csdn.net/article/details/103976875>\n- **libhv 教程目录**: <https://hewei.blog.csdn.net/article/details/113733758>\n- [libhv教程01--介绍与体验](https://hewei.blog.csdn.net/article/details/113702536)\n- [libhv教程02--编译与安装](https://hewei.blog.csdn.net/article/details/113704737)\n- [libhv教程03--链库与使用](https://hewei.blog.csdn.net/article/details/113706378)\n- [libhv教程04--编写一个完整的命令行程序](https://hewei.blog.csdn.net/article/details/113719503)\n- [libhv教程05--事件循环以及定时器的简单使用](https://hewei.blog.csdn.net/article/details/113724474)\n- [libhv教程06--创建一个简单的TCP服务端](https://hewei.blog.csdn.net/article/details/113737580)\n- [libhv教程07--创建一个简单的TCP客户端](https://hewei.blog.csdn.net/article/details/113738900)\n- [libhv教程08--创建一个简单的UDP服务端](https://hewei.blog.csdn.net/article/details/113871498)\n- [libhv教程09--创建一个简单的UDP客户端](https://hewei.blog.csdn.net/article/details/113871724)\n- [libhv教程10--创建一个简单的HTTP服务端](https://hewei.blog.csdn.net/article/details/113982999)\n- [libhv教程11--创建一个简单的HTTP客户端](https://hewei.blog.csdn.net/article/details/113984302)\n- [libhv教程12--创建一个简单的WebSocket服务端](https://hewei.blog.csdn.net/article/details/113985321)\n- [libhv教程13--创建一个简单的WebSocket客户端](https://hewei.blog.csdn.net/article/details/113985895)\n- [libhv教程14--200行实现一个纯C版jsonrpc框架](https://hewei.blog.csdn.net/article/details/119920540)\n- [libhv教程15--200行实现一个C++版protorpc框架](https://hewei.blog.csdn.net/article/details/119966701)\n- [libhv教程16--多线程/多进程服务端编程](https://hewei.blog.csdn.net/article/details/120366024)\n- [libhv教程17--Qt中使用libhv](https://hewei.blog.csdn.net/article/details/120699890)\n- [libhv教程18--动手写一个tinyhttpd](https://hewei.blog.csdn.net/article/details/121706604)\n- [libhv教程19--MQTT的实现与使用](https://hewei.blog.csdn.net/article/details/122753665)\n\n## ✨ 特性\n\n- 跨平台（Linux, Windows, macOS, Android, iOS, BSD, Solaris）\n- 高性能事件循环（网络IO事件、定时器事件、空闲事件、自定义事件、信号）\n- TCP/UDP服务端/客户端/代理\n- TCP支持心跳、重连、转发、多线程安全write和close等特性\n- 内置常见的拆包模式（固定包长、分界符、头部长度字段）\n- 可靠UDP支持: WITH_KCP\n- SSL/TLS加密通信（可选WITH_OPENSSL、WITH_GNUTLS、WITH_MBEDTLS）\n- HTTP服务端/客户端（支持https http1/x http2 grpc）\n- HTTP支持静态文件服务、目录服务、正向/反向代理服务、同步/异步API处理器\n- HTTP支持RESTful风格、路由、中间件、keep-alive长连接、chunked分块、SSE等特性\n- WebSocket服务端/客户端\n- MQTT客户端\n\n## ⌛️ 构建\n\n见[BUILD.md](BUILD.md)\n\nlibhv提供了以下构建方式:\n\n1、通过Makefile:\n```shell\n./configure\nmake\nsudo make install\n```\n\n2、通过cmake:\n```shell\nmkdir build\ncd build\ncmake ..\ncmake --build .\n```\n\n3、通过bazel:\n```shell\nbazel build libhv\n```\n\n4、通过vcpkg:\n```shell\nvcpkg install libhv\n```\n\n5、通过xmake:\n```shell\nxrepo install libhv\n```\n\n## ⚡️ 快速入门\n\n### 体验\n运行脚本`./getting_started.sh`:\n\n```shell\n# 下载编译\ngit clone https://github.com/ithewei/libhv.git\ncd libhv\n./configure\nmake\n\n# 运行httpd服务\nbin/httpd -h\nbin/httpd -d\n#bin/httpd -c etc/httpd.conf -s restart -d\nps aux | grep httpd\n\n# 文件服务\nbin/curl -v localhost:8080\n\n# 目录服务\nbin/curl -v localhost:8080/downloads/\n\n# API服务\nbin/curl -v localhost:8080/ping\nbin/curl -v localhost:8080/echo -d \"hello,world!\"\nbin/curl -v localhost:8080/query?page_no=1\\&page_size=10\nbin/curl -v localhost:8080/kv   -H \"Content-Type:application/x-www-form-urlencoded\" -d 'user=admin&pswd=123456'\nbin/curl -v localhost:8080/json -H \"Content-Type:application/json\" -d '{\"user\":\"admin\",\"pswd\":\"123456\"}'\nbin/curl -v localhost:8080/form -F 'user=admin' -F 'pswd=123456'\nbin/curl -v localhost:8080/upload -d \"@LICENSE\"\nbin/curl -v localhost:8080/upload -F \"file=@LICENSE\"\n\nbin/curl -v localhost:8080/test -H \"Content-Type:application/x-www-form-urlencoded\" -d 'bool=1&int=123&float=3.14&string=hello'\nbin/curl -v localhost:8080/test -H \"Content-Type:application/json\" -d '{\"bool\":true,\"int\":123,\"float\":3.14,\"string\":\"hello\"}'\nbin/curl -v localhost:8080/test -F 'bool=1' -F 'int=123' -F 'float=3.14' -F 'string=hello'\n# RESTful API: /group/:group_name/user/:user_id\nbin/curl -v -X DELETE localhost:8080/group/test/user/123\n\n# 压力测试\nbin/wrk -c 1000 -d 10 -t 4 http://127.0.0.1:8080/\n```\n\n### TCP\n#### TCP服务端\n**c版本**: [examples/tcp_echo_server.c](examples/tcp_echo_server.c)\n\n**c++版本**: [evpp/TcpServer_test.cpp](evpp/TcpServer_test.cpp)\n```c++\n#include \"TcpServer.h\"\nusing namespace hv;\n\nint main() {\n    int port = 1234;\n    TcpServer srv;\n    int listenfd = srv.createsocket(port);\n    if (listenfd < 0) {\n        return -1;\n    }\n    printf(\"server listen on port %d, listenfd=%d ...\\n\", port, listenfd);\n    srv.onConnection = [](const SocketChannelPtr& channel) {\n        std::string peeraddr = channel->peeraddr();\n        if (channel->isConnected()) {\n            printf(\"%s connected! connfd=%d\\n\", peeraddr.c_str(), channel->fd());\n        } else {\n            printf(\"%s disconnected! connfd=%d\\n\", peeraddr.c_str(), channel->fd());\n        }\n    };\n    srv.onMessage = [](const SocketChannelPtr& channel, Buffer* buf) {\n        // echo\n        channel->write(buf);\n    };\n    srv.setThreadNum(4);\n    srv.start();\n\n    // press Enter to stop\n    while (getchar() != '\\n');\n    return 0;\n}\n```\n\n**注意**:\n\n以上示例只是简单的`echo`服务，TCP是流式协议，实际应用中请务必添加边界进行拆包。<br>\n文本协议建议加上`\\0`或者`\\r\\n`分隔符，可参考 [examples/jsonrpc](examples/jsonrpc);<br>\n二进制协议建议加上自定义协议头，通过头部长度字段表明负载长度，可参考 [examples/protorpc](examples/protorpc);<br>\n通过`setUnpack`（c接口即`hio_set_unpack`）设置拆包规则，支持固定包长、分隔符、头部长度字段三种常见的拆包方式，<br>\n内部根据拆包规则处理粘包与分包，保证`onMessage`回调上来的是完整的一包数据，大大节省了上层处理粘包与分包的成本。<br>\n不想自定义协议和拆包组包的可直接使用现成的`HTTP/WebSocket`协议。<br>\n<br>\n`channel->write`（c接口即`hio_write`）是非阻塞的（事件循环异步编程里所有的一切都要求是非阻塞的），且多线程安全的。<br>\n发送大数据时应该做流控，通过`onWriteComplete`监听写完成事件，在可写时再发送下一帧数据。<br>\n具体示例代码可参考 [examples/tinyhttpd.c](examples/tinyhttpd.c) 中的 `http_serve_file`。<br>\n<br>\n`channel->close`（c接口即`hio_close`) 也是多线程安全的，这可以让网络IO事件循环线程里接收数据、拆包组包、反序列化后放入队列，<br>\n消费者线程/线程池从队列里取出数据、处理后发送响应和关闭连接，变得更加简单。<br>\n\n#### TCP客户端\n**c版本**: [examples/tcp_client_test.c](examples/tcp_client_test.c)\n\n**c++版本**: [evpp/TcpClient_test.cpp](evpp/TcpClient_test.cpp)\n```c++\n#include <iostream>\n#include \"TcpClient.h\"\nusing namespace hv;\n\nint main() {\n    int port = 1234;\n    TcpClient cli;\n    int connfd = cli.createsocket(port);\n    if (connfd < 0) {\n        return -1;\n    }\n    cli.onConnection = [](const SocketChannelPtr& channel) {\n        std::string peeraddr = channel->peeraddr();\n        if (channel->isConnected()) {\n            printf(\"connected to %s! connfd=%d\\n\", peeraddr.c_str(), channel->fd());\n        } else {\n            printf(\"disconnected to %s! connfd=%d\\n\", peeraddr.c_str(), channel->fd());\n        }\n    };\n    cli.onMessage = [](const SocketChannelPtr& channel, Buffer* buf) {\n        printf(\"< %.*s\\n\", (int)buf->size(), (char*)buf->data());\n    };\n    cli.start();\n\n    std::string str;\n    while (std::getline(std::cin, str)) {\n        if (str == \"close\") {\n            cli.closesocket();\n        } else if (str == \"start\") {\n            cli.start();\n        } else if (str == \"stop\") {\n            cli.stop();\n            break;\n        } else {\n            if (!cli.isConnected()) break;\n            cli.send(str);\n        }\n    }\n    return 0;\n}\n```\n\n### HTTP\n#### HTTP服务端\n见[examples/http_server_test.cpp](examples/http_server_test.cpp)\n\n**golang gin 风格**\n```c++\n#include \"HttpServer.h\"\nusing namespace hv;\n\nint main() {\n    HttpService router;\n    router.GET(\"/ping\", [](HttpRequest* req, HttpResponse* resp) {\n        return resp->String(\"pong\");\n    });\n\n    router.GET(\"/data\", [](HttpRequest* req, HttpResponse* resp) {\n        static char data[] = \"0123456789\";\n        return resp->Data(data, 10);\n    });\n\n    router.GET(\"/paths\", [&router](HttpRequest* req, HttpResponse* resp) {\n        return resp->Json(router.Paths());\n    });\n\n    router.GET(\"/get\", [](HttpRequest* req, HttpResponse* resp) {\n        resp->json[\"origin\"] = req->client_addr.ip;\n        resp->json[\"url\"] = req->url;\n        resp->json[\"args\"] = req->query_params;\n        resp->json[\"headers\"] = req->headers;\n        return 200;\n    });\n\n    router.POST(\"/echo\", [](const HttpContextPtr& ctx) {\n        return ctx->send(ctx->body(), ctx->type());\n    });\n\n    HttpServer server(&router);\n    server.setPort(8080);\n    server.setThreadNum(4);\n    server.run();\n    return 0;\n}\n```\n\n**注意**:\n\n上面示例直接运行在`main`主线程，`server.run()`会阻塞当前线程运行，所以`router`和`server`对象不会被析构，<br>\n如使用`server.start()`内部会另起线程运行，不会阻塞当前线程，但需要注意`router`和`server`的生命周期，<br>\n不要定义为局部变量被析构了，可定义为类成员变量或者全局变量，下面的`WebSocket`服务同理。<br>\n\n#### HTTP客户端\n见[examples/http_client_test.cpp](examples/http_client_test.cpp)\n\n**python requests 风格**\n```c++\n#include \"requests.h\"\n\nint main() {\n    auto resp = requests::get(\"http://www.example.com\");\n    if (resp == NULL) {\n        printf(\"request failed!\\n\");\n    } else {\n        printf(\"%s\\n\", resp->body.c_str());\n    }\n\n    resp = requests::post(\"127.0.0.1:8080/echo\", \"hello,world!\");\n    if (resp == NULL) {\n        printf(\"request failed!\\n\");\n    } else {\n        printf(\"%s\\n\", resp->body.c_str());\n    }\n\n    return 0;\n}\n```\n\n附HTTP相关接口文档:\n\n- [class HttpMessage](docs/cn/HttpMessage.md)\n- [class HttpClient](docs/cn/HttpClient.md)\n- [class HttpServer](docs/cn/HttpServer.md)\n- [class HttpContext](docs/cn/HttpContext.md)\n\n### WebSocket\n#### WebSocket服务端\n见[examples/websocket_server_test.cpp](examples/websocket_server_test.cpp)\n```c++\n#include \"WebSocketServer.h\"\nusing namespace hv;\n\nint main(int argc, char** argv) {\n    WebSocketService ws;\n    ws.onopen = [](const WebSocketChannelPtr& channel, const HttpRequestPtr& req) {\n        printf(\"onopen: GET %s\\n\", req->Path().c_str());\n    };\n    ws.onmessage = [](const WebSocketChannelPtr& channel, const std::string& msg) {\n        printf(\"onmessage: %.*s\\n\", (int)msg.size(), msg.data());\n    };\n    ws.onclose = [](const WebSocketChannelPtr& channel) {\n        printf(\"onclose\\n\");\n    };\n\n    WebSocketServer server(&ws);\n    server.setPort(9999);\n    server.setThreadNum(4);\n    server.run();\n    return 0;\n}\n```\n\n#### WebSocket客户端\n见[examples/websocket_client_test.cpp](examples/websocket_client_test.cpp)\n```c++\n#include \"WebSocketClient.h\"\nusing namespace hv;\n\nint main(int argc, char** argv) {\n    WebSocketClient ws;\n    ws.onopen = []() {\n        printf(\"onopen\\n\");\n    };\n    ws.onmessage = [](const std::string& msg) {\n        printf(\"onmessage: %.*s\\n\", (int)msg.size(), msg.data());\n    };\n    ws.onclose = []() {\n        printf(\"onclose\\n\");\n    };\n\n    // reconnect: 1,2,4,8,10,10,10...\n    reconn_setting_t reconn;\n    reconn_setting_init(&reconn);\n    reconn.min_delay = 1000;\n    reconn.max_delay = 10000;\n    reconn.delay_policy = 2;\n    ws.setReconnect(&reconn);\n\n    ws.open(\"ws://127.0.0.1:9999/test\");\n\n    std::string str;\n    while (std::getline(std::cin, str)) {\n        if (!ws.isConnected()) break;\n        if (str == \"quit\") {\n            ws.close();\n            break;\n        }\n        ws.send(str);\n    }\n\n    return 0;\n}\n```\n\n## 🍭 更多示例\n\n### c版本\n- 事件循环:     [examples/hloop_test.c](examples/hloop_test.c)\n- 定时器:       [examples/htimer_test.c](examples/htimer_test.c)\n- pipe示例:     [examples/pipe_test.c](examples/pipe_test.c)\n- TCP回显服务:  [examples/tcp_echo_server.c](examples/tcp_echo_server.c)\n- TCP聊天服务:  [examples/tcp_chat_server.c](examples/tcp_chat_server.c)\n- TCP代理服务:  [examples/tcp_proxy_server.c](examples/tcp_proxy_server.c)\n- UDP回显服务:  [examples/udp_echo_server.c](examples/udp_echo_server.c)\n- UDP代理服务:  [examples/udp_proxy_server.c](examples/udp_proxy_server.c)\n- SOCKS5代理服务: [examples/socks5_proxy_server.c](examples/socks5_proxy_server.c)\n- HTTP服务:     [examples/tinyhttpd.c](examples/tinyhttpd.c)\n- HTTP代理服务: [examples/tinyproxyd.c](examples/tinyproxyd.c)\n- jsonRPC示例:  [examples/jsonrpc](examples/jsonrpc)\n- MQTT示例:     [examples/mqtt](examples/mqtt)\n- 多accept进程模式: [examples/multi-thread/multi-acceptor-processes.c](examples/multi-thread/multi-acceptor-processes.c)\n- 多accept线程模式: [examples/multi-thread/multi-acceptor-threads.c](examples/multi-thread/multi-acceptor-threads.c)\n- 一个accept线程+多worker线程: [examples/multi-thread/one-acceptor-multi-workers.c](examples/multi-thread/one-acceptor-multi-workers.c)\n\n### c++版本\n- 事件循环: [evpp/EventLoop_test.cpp](evpp/EventLoop_test.cpp)\n- 事件循环线程: [evpp/EventLoopThread_test.cpp](evpp/EventLoopThread_test.cpp)\n- 事件循环线程池: [evpp/EventLoopThreadPool_test.cpp](evpp/EventLoopThreadPool_test.cpp)\n- 定时器:    [evpp/TimerThread_test.cpp](evpp/TimerThread_test.cpp)\n- TCP服务端: [evpp/TcpServer_test.cpp](evpp/TcpServer_test.cpp)\n- TCP客户端: [evpp/TcpClient_test.cpp](evpp/TcpClient_test.cpp)\n- UDP服务端: [evpp/UdpServer_test.cpp](evpp/UdpServer_test.cpp)\n- UDP客户端: [evpp/UdpClient_test.cpp](evpp/UdpClient_test.cpp)\n- HTTP服务端: [examples/http_server_test.cpp](examples/http_server_test.cpp)\n- HTTP客户端: [examples/http_client_test.cpp](examples/http_client_test.cpp)\n- WebSocket服务端: [examples/websocket_server_test.cpp](examples/websocket_server_test.cpp)\n- WebSocket客户端: [examples/websocket_client_test.cpp](examples/websocket_client_test.cpp)\n- protobufRPC示例: [examples/protorpc](examples/protorpc)\n- Qt中使用libhv示例: [hv-projects/QtDemo](https://github.com/hv-projects/QtDemo)\n\n### 模拟实现著名的命令行工具\n- 网络连接工具: [examples/nc](examples/nc.c)\n- 网络扫描工具: [examples/nmap](examples/nmap)\n- HTTP服务程序: [examples/httpd](examples/httpd)\n- HTTP压测工具: [examples/wrk](examples/wrk.cpp)\n- URL请求工具:  [examples/curl](examples/curl.cpp)\n- 文件下载工具: [examples/wget](examples/wget.cpp)\n- 服务注册与发现: [examples/consul](examples/consul)\n- kcptun隧道: [examples/kcptun](examples/kcptun)\n\n## 🥇 性能测试\n\n### TCP回显服务pingpong测试\n```shell\ncd echo-servers\n./build.sh\n./benchmark.sh\n```\n\n**吞吐量**:\n```shell\nlibevent running on port 2001\nlibev running on port 2002\nlibuv running on port 2003\nlibhv running on port 2004\nasio running on port 2005\npoco running on port 2006\n\n==============2001=====================================\n[127.0.0.1:2001] 4 threads 1000 connections run 10s\ntotal readcount=1616761 readbytes=1655563264\nthroughput = 157 MB/s\n\n==============2002=====================================\n[127.0.0.1:2002] 4 threads 1000 connections run 10s\ntotal readcount=2153171 readbytes=2204847104\nthroughput = 210 MB/s\n\n==============2003=====================================\n[127.0.0.1:2003] 4 threads 1000 connections run 10s\ntotal readcount=1599727 readbytes=1638120448\nthroughput = 156 MB/s\n\n==============2004=====================================\n[127.0.0.1:2004] 4 threads 1000 connections run 10s\ntotal readcount=2202271 readbytes=2255125504\nthroughput = 215 MB/s\n\n==============2005=====================================\n[127.0.0.1:2005] 4 threads 1000 connections run 10s\ntotal readcount=1354230 readbytes=1386731520\nthroughput = 132 MB/s\n\n==============2006=====================================\n[127.0.0.1:2006] 4 threads 1000 connections run 10s\ntotal readcount=1699652 readbytes=1740443648\nthroughput = 165 MB/s\n```\n\n### TCP代理服务压测\n\n```shell\n# sudo apt install iperf\niperf -s -p 5001 > /dev/null &\nbin/tcp_proxy_server 1212 127.0.0.1:5001 &\niperf -c 127.0.0.1 -p 5001 -l 8K\niperf -c 127.0.0.1 -p 1212 -l 8K\n```\n\n**带宽**:\n```shell\n------------------------------------------------------------\n[  3] local 127.0.0.1 port 52560 connected with 127.0.0.1 port 5001\n[ ID] Interval       Transfer     Bandwidth\n[  3]  0.0-10.0 sec  20.8 GBytes  17.9 Gbits/sec\n\n------------------------------------------------------------\n[  3] local 127.0.0.1 port 48142 connected with 127.0.0.1 port 1212\n[ ID] Interval       Transfer     Bandwidth\n[  3]  0.0-10.0 sec  11.9 GBytes  10.2 Gbits/sec\n```\n\n### HTTP压测\n```shell\n# sudo apt install wrk\nwrk -c 100 -t 4 -d 10s http://127.0.0.1:8080/\n\n# sudo apt install apache2-utils\nab -c 100 -n 100000 http://127.0.0.1:8080/\n```\n\n**libhv(port:8080) vs nginx(port:80)**\n\n![libhv-vs-nginx.png](html/downloads/libhv-vs-nginx.png)\n\n以上测试结果可以在 [Github Actions](https://github.com/ithewei/libhv/actions/workflows/benchmark.yml) 中查看。\n\n## 💎 用户案例\n\n如果您在使用`libhv`，欢迎通过PR将信息提交至此列表，让更多的用户了解`libhv`的实际使用场景，以建立更好的网络生态。\n\n| 用户 (公司名/项目名/个人联系方式) | 案例 (项目简介/业务场景) |\n| :--- | :--- |\n| [阅面科技](https://www.readsense.cn) | [猎户AIoT平台](https://orionweb.readsense.cn)设备管理、人脸检测HTTP服务、人脸搜索HTTP服务 |\n| [socks5-libhv](https://gitee.com/billykang/socks5-libhv) | socks5代理 |\n| [hvloop](https://github.com/xiispace/hvloop) | 类似[uvloop](https://github.com/MagicStack/uvloop)的python异步IO事件循环 |\n| [tsproxyd-android](https://github.com/Haiwen-GitHub/tsproxyd-android) | 一个基于libhv实现的android端web代理服务 |\n| [玄舟智维](https://zjzwxw.com) | C100K设备连接网关服务 |\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.6142578125,
          "content": "English | [中文](README-CN.md)\n\n# libhv\n\n[![Linux](https://badgen.net/badge/Linux/success/green?icon=github)](https://github.com/ithewei/libhv/actions/workflows/CI.yml?query=branch%3Amaster)\n[![Windows](https://badgen.net/badge/Windows/success/green?icon=github)](https://github.com/ithewei/libhv/actions/workflows/CI.yml?query=branch%3Amaster)\n[![macOS](https://badgen.net/badge/macOS/success/green?icon=github)](https://github.com/ithewei/libhv/actions/workflows/CI.yml?query=branch%3Amaster)\n[![Android](https://badgen.net/badge/Android/success/green?icon=github)](https://github.com/ithewei/libhv/actions/workflows/CI.yml?query=branch%3Amaster)\n[![iOS](https://badgen.net/badge/iOS/success/green?icon=github)](https://github.com/ithewei/libhv/actions/workflows/CI.yml?query=branch%3Amaster)\n[![benchmark](https://github.com/ithewei/libhv/workflows/benchmark/badge.svg?branch=master)](https://github.com/ithewei/libhv/actions/workflows/benchmark.yml?query=branch%3Amaster)\n<br>\n[![release](https://badgen.net/github/release/ithewei/libhv?icon=github)](https://github.com/ithewei/libhv/releases)\n[![stars](https://badgen.net/github/stars/ithewei/libhv?icon=github)](https://github.com/ithewei/libhv/stargazers)\n[![forks](https://badgen.net/github/forks/ithewei/libhv?icon=github)](https://github.com/ithewei/libhv/forks)\n[![issues](https://badgen.net/github/issues/ithewei/libhv?icon=github)](https://github.com/ithewei/libhv/issues)\n[![PRs](https://badgen.net/github/prs/ithewei/libhv?icon=github)](https://github.com/ithewei/libhv/pulls)\n[![contributors](https://badgen.net/github/contributors/ithewei/libhv?icon=github)](https://github.com/ithewei/libhv/contributors)\n[![license](https://badgen.net/github/license/ithewei/libhv?icon=github)](LICENSE)\n<br>\n[![gitee](https://badgen.net/badge/mirror/gitee/red)](https://gitee.com/libhv/libhv)\n[![awesome-c](https://badgen.net/badge/icon/awesome-c/pink?icon=awesome&label&color)](https://github.com/oz123/awesome-c)\n[![awesome-cpp](https://badgen.net/badge/icon/awesome-cpp/pink?icon=awesome&label&color)](https://github.com/fffaraz/awesome-cpp)\n\nLike `libevent, libev, and libuv`,\n`libhv` provides event-loop with non-blocking IO and timer,\nbut simpler api and richer protocols.\n\n## ✨ Features\n\n- Cross-platform (Linux, Windows, macOS, Android, iOS, BSD, Solaris)\n- High-performance EventLoop (IO, timer, idle, custom, signal)\n- TCP/UDP client/server/proxy\n- TCP supports heartbeat, reconnect, upstream, MultiThread-safe write and close, etc.\n- Built-in common unpacking modes (FixedLength, Delimiter, LengthField)\n- RUDP support: WITH_KCP\n- SSL/TLS support: (via WITH_OPENSSL or WITH_GNUTLS or WITH_MBEDTLS)\n- HTTP client/server (support https http1/x http2 grpc)\n- HTTP supports static service, indexof service, forward/reverse proxy service, sync/async API handler\n- HTTP supports RESTful, router, middleware, keep-alive, chunked, SSE, etc.\n- WebSocket client/server\n- MQTT client\n\n## ⌛️ Build\n\nsee [BUILD.md](BUILD.md)\n\nMakefile:\n```shell\n./configure\nmake\nsudo make install\n```\n\nor cmake:\n```shell\nmkdir build\ncd build\ncmake ..\ncmake --build .\n```\n\nor bazel:\n```shell\nbazel build libhv\n```\n\nor vcpkg:\n```shell\nvcpkg install libhv\n```\n\nor xmake:\n```shell\nxrepo install libhv\n```\n\n## ⚡️ Getting Started\n\nrun `./getting_started.sh`:\n\n```shell\ngit clone https://github.com/ithewei/libhv.git\ncd libhv\n./configure\nmake\n\nbin/httpd -h\nbin/httpd -d\n#bin/httpd -c etc/httpd.conf -s restart -d\nps aux | grep httpd\n\n# http file service\nbin/curl -v localhost:8080\n\n# http indexof service\nbin/curl -v localhost:8080/downloads/\n\n# http api service\nbin/curl -v localhost:8080/ping\nbin/curl -v localhost:8080/echo -d \"hello,world!\"\nbin/curl -v localhost:8080/query?page_no=1\\&page_size=10\nbin/curl -v localhost:8080/kv   -H \"Content-Type:application/x-www-form-urlencoded\" -d 'user=admin&pswd=123456'\nbin/curl -v localhost:8080/json -H \"Content-Type:application/json\" -d '{\"user\":\"admin\",\"pswd\":\"123456\"}'\nbin/curl -v localhost:8080/form -F 'user=admin' -F 'pswd=123456'\nbin/curl -v localhost:8080/upload -d \"@LICENSE\"\nbin/curl -v localhost:8080/upload -F \"file=@LICENSE\"\n\nbin/curl -v localhost:8080/test -H \"Content-Type:application/x-www-form-urlencoded\" -d 'bool=1&int=123&float=3.14&string=hello'\nbin/curl -v localhost:8080/test -H \"Content-Type:application/json\" -d '{\"bool\":true,\"int\":123,\"float\":3.14,\"string\":\"hello\"}'\nbin/curl -v localhost:8080/test -F 'bool=1' -F 'int=123' -F 'float=3.14' -F 'string=hello'\n# RESTful API: /group/:group_name/user/:user_id\nbin/curl -v -X DELETE localhost:8080/group/test/user/123\n\n# benchmark\nbin/wrk -c 1000 -d 10 -t 4 http://127.0.0.1:8080/\n```\n\n### TCP\n#### tcp server\n**c version**: [examples/tcp_echo_server.c](examples/tcp_echo_server.c)\n\n**c++ version**: [evpp/TcpServer_test.cpp](evpp/TcpServer_test.cpp)\n```c++\n#include \"TcpServer.h\"\nusing namespace hv;\n\nint main() {\n    int port = 1234;\n    TcpServer srv;\n    int listenfd = srv.createsocket(port);\n    if (listenfd < 0) {\n        return -1;\n    }\n    printf(\"server listen on port %d, listenfd=%d ...\\n\", port, listenfd);\n    srv.onConnection = [](const SocketChannelPtr& channel) {\n        std::string peeraddr = channel->peeraddr();\n        if (channel->isConnected()) {\n            printf(\"%s connected! connfd=%d\\n\", peeraddr.c_str(), channel->fd());\n        } else {\n            printf(\"%s disconnected! connfd=%d\\n\", peeraddr.c_str(), channel->fd());\n        }\n    };\n    srv.onMessage = [](const SocketChannelPtr& channel, Buffer* buf) {\n        // echo\n        channel->write(buf);\n    };\n    srv.setThreadNum(4);\n    srv.start();\n\n    // press Enter to stop\n    while (getchar() != '\\n');\n    return 0;\n}\n```\n\n#### tcp client\n**c version**: [examples/tcp_client_test.c](examples/tcp_client_test.c)\n\n**c++ version**: [evpp/TcpClient_test.cpp](evpp/TcpClient_test.cpp)\n```c++\n#include <iostream>\n#include \"TcpClient.h\"\nusing namespace hv;\n\nint main() {\n    int port = 1234;\n    TcpClient cli;\n    int connfd = cli.createsocket(port);\n    if (connfd < 0) {\n        return -1;\n    }\n    cli.onConnection = [](const SocketChannelPtr& channel) {\n        std::string peeraddr = channel->peeraddr();\n        if (channel->isConnected()) {\n            printf(\"connected to %s! connfd=%d\\n\", peeraddr.c_str(), channel->fd());\n        } else {\n            printf(\"disconnected to %s! connfd=%d\\n\", peeraddr.c_str(), channel->fd());\n        }\n    };\n    cli.onMessage = [](const SocketChannelPtr& channel, Buffer* buf) {\n        printf(\"< %.*s\\n\", (int)buf->size(), (char*)buf->data());\n    };\n    cli.start();\n\n    std::string str;\n    while (std::getline(std::cin, str)) {\n        if (str == \"close\") {\n            cli.closesocket();\n        } else if (str == \"start\") {\n            cli.start();\n        } else if (str == \"stop\") {\n            cli.stop();\n            break;\n        } else {\n            if (!cli.isConnected()) break;\n            cli.send(str);\n        }\n    }\n    return 0;\n}\n```\n\n### HTTP\n#### http server\nsee [examples/http_server_test.cpp](examples/http_server_test.cpp)\n\n**golang gin style**\n```c++\n#include \"HttpServer.h\"\nusing namespace hv;\n\nint main() {\n    HttpService router;\n    router.GET(\"/ping\", [](HttpRequest* req, HttpResponse* resp) {\n        return resp->String(\"pong\");\n    });\n\n    router.GET(\"/data\", [](HttpRequest* req, HttpResponse* resp) {\n        static char data[] = \"0123456789\";\n        return resp->Data(data, 10);\n    });\n\n    router.GET(\"/paths\", [&router](HttpRequest* req, HttpResponse* resp) {\n        return resp->Json(router.Paths());\n    });\n\n    router.GET(\"/get\", [](HttpRequest* req, HttpResponse* resp) {\n        resp->json[\"origin\"] = req->client_addr.ip;\n        resp->json[\"url\"] = req->url;\n        resp->json[\"args\"] = req->query_params;\n        resp->json[\"headers\"] = req->headers;\n        return 200;\n    });\n\n    router.POST(\"/echo\", [](const HttpContextPtr& ctx) {\n        return ctx->send(ctx->body(), ctx->type());\n    });\n\n    HttpServer server(&router);\n    server.setPort(8080);\n    server.setThreadNum(4);\n    server.run();\n    return 0;\n}\n```\n#### http client\nsee [examples/http_client_test.cpp](examples/http_client_test.cpp)\n\n**python requests style**\n```c++\n#include \"requests.h\"\n\nint main() {\n    auto resp = requests::get(\"http://www.example.com\");\n    if (resp == NULL) {\n        printf(\"request failed!\\n\");\n    } else {\n        printf(\"%s\\n\", resp->body.c_str());\n    }\n\n    resp = requests::post(\"127.0.0.1:8080/echo\", \"hello,world!\");\n    if (resp == NULL) {\n        printf(\"request failed!\\n\");\n    } else {\n        printf(\"%s\\n\", resp->body.c_str());\n    }\n\n    return 0;\n}\n```\n\n### WebSocket\n#### WebSocket server\nsee [examples/websocket_server_test.cpp](examples/websocket_server_test.cpp)\n```c++\n#include \"WebSocketServer.h\"\nusing namespace hv;\n\nint main(int argc, char** argv) {\n    WebSocketService ws;\n    ws.onopen = [](const WebSocketChannelPtr& channel, const HttpRequestPtr& req) {\n        printf(\"onopen: GET %s\\n\", req->Path().c_str());\n    };\n    ws.onmessage = [](const WebSocketChannelPtr& channel, const std::string& msg) {\n        printf(\"onmessage: %.*s\\n\", (int)msg.size(), msg.data());\n    };\n    ws.onclose = [](const WebSocketChannelPtr& channel) {\n        printf(\"onclose\\n\");\n    };\n\n    WebSocketServer server(&ws);\n    server.setPort(9999);\n    server.setThreadNum(4);\n    server.run();\n    return 0;\n}\n```\n\n#### WebSocket client\nsee [examples/websocket_client_test.cpp](examples/websocket_client_test.cpp)\n```c++\n#include \"WebSocketClient.h\"\nusing namespace hv;\n\nint main(int argc, char** argv) {\n    WebSocketClient ws;\n    ws.onopen = []() {\n        printf(\"onopen\\n\");\n    };\n    ws.onmessage = [](const std::string& msg) {\n        printf(\"onmessage: %.*s\\n\", (int)msg.size(), msg.data());\n    };\n    ws.onclose = []() {\n        printf(\"onclose\\n\");\n    };\n\n    // reconnect: 1,2,4,8,10,10,10...\n    reconn_setting_t reconn;\n    reconn_setting_init(&reconn);\n    reconn.min_delay = 1000;\n    reconn.max_delay = 10000;\n    reconn.delay_policy = 2;\n    ws.setReconnect(&reconn);\n\n    ws.open(\"ws://127.0.0.1:9999/test\");\n\n    std::string str;\n    while (std::getline(std::cin, str)) {\n        if (!ws.isConnected()) break;\n        if (str == \"quit\") {\n            ws.close();\n            break;\n        }\n        ws.send(str);\n    }\n\n    return 0;\n}\n```\n\n## 🍭 More examples\n### c version\n- [examples/hloop_test.c](examples/hloop_test.c)\n- [examples/htimer_test.c](examples/htimer_test.c)\n- [examples/pipe_test.c](examples/pipe_test.c)\n- [examples/tcp_echo_server.c](examples/tcp_echo_server.c)\n- [examples/tcp_chat_server.c](examples/tcp_chat_server.c)\n- [examples/tcp_proxy_server.c](examples/tcp_proxy_server.c)\n- [examples/udp_echo_server.c](examples/udp_echo_server.c)\n- [examples/udp_proxy_server.c](examples/udp_proxy_server.c)\n- [examples/socks5_proxy_server.c](examples/socks5_proxy_server.c)\n- [examples/tinyhttpd.c](examples/tinyhttpd.c)\n- [examples/tinyproxyd.c](examples/tinyproxyd.c)\n- [examples/jsonrpc](examples/jsonrpc)\n- [examples/mqtt](examples/mqtt)\n- [examples/multi-thread/multi-acceptor-processes.c](examples/multi-thread/multi-acceptor-processes.c)\n- [examples/multi-thread/multi-acceptor-threads.c](examples/multi-thread/multi-acceptor-threads.c)\n- [examples/multi-thread/one-acceptor-multi-workers.c](examples/multi-thread/one-acceptor-multi-workers.c)\n\n### c++ version\n- [evpp/EventLoop_test.cpp](evpp/EventLoop_test.cpp)\n- [evpp/EventLoopThread_test.cpp](evpp/EventLoopThread_test.cpp)\n- [evpp/EventLoopThreadPool_test.cpp](evpp/EventLoopThreadPool_test.cpp)\n- [evpp/TimerThread_test.cpp](evpp/TimerThread_test.cpp)\n- [evpp/TcpServer_test.cpp](evpp/TcpServer_test.cpp)\n- [evpp/TcpClient_test.cpp](evpp/TcpClient_test.cpp)\n- [evpp/UdpServer_test.cpp](evpp/UdpServer_test.cpp)\n- [evpp/UdpClient_test.cpp](evpp/UdpClient_test.cpp)\n- [examples/http_server_test.cpp](examples/http_server_test.cpp)\n- [examples/http_client_test.cpp](examples/http_client_test.cpp)\n- [examples/websocket_server_test.cpp](examples/websocket_server_test.cpp)\n- [examples/websocket_client_test.cpp](examples/websocket_client_test.cpp)\n- [examples/protorpc](examples/protorpc)\n- [hv-projects/QtDemo](https://github.com/hv-projects/QtDemo)\n\n### simulate well-known command line tools\n- [examples/nc](examples/nc.c)\n- [examples/nmap](examples/nmap)\n- [examples/httpd](examples/httpd)\n- [examples/wrk](examples/wrk.cpp)\n- [examples/curl](examples/curl.cpp)\n- [examples/wget](examples/wget.cpp)\n- [examples/consul](examples/consul)\n- [examples/kcptun](examples/kcptun)\n\n## 🥇 Benchmark\n### `pingpong echo-servers`\n```shell\ncd echo-servers\n./build.sh\n./benchmark.sh\n```\n\n**throughput**:\n```shell\nlibevent running on port 2001\nlibev running on port 2002\nlibuv running on port 2003\nlibhv running on port 2004\nasio running on port 2005\npoco running on port 2006\n\n==============2001=====================================\n[127.0.0.1:2001] 4 threads 1000 connections run 10s\ntotal readcount=1616761 readbytes=1655563264\nthroughput = 157 MB/s\n\n==============2002=====================================\n[127.0.0.1:2002] 4 threads 1000 connections run 10s\ntotal readcount=2153171 readbytes=2204847104\nthroughput = 210 MB/s\n\n==============2003=====================================\n[127.0.0.1:2003] 4 threads 1000 connections run 10s\ntotal readcount=1599727 readbytes=1638120448\nthroughput = 156 MB/s\n\n==============2004=====================================\n[127.0.0.1:2004] 4 threads 1000 connections run 10s\ntotal readcount=2202271 readbytes=2255125504\nthroughput = 215 MB/s\n\n==============2005=====================================\n[127.0.0.1:2005] 4 threads 1000 connections run 10s\ntotal readcount=1354230 readbytes=1386731520\nthroughput = 132 MB/s\n\n==============2006=====================================\n[127.0.0.1:2006] 4 threads 1000 connections run 10s\ntotal readcount=1699652 readbytes=1740443648\nthroughput = 165 MB/s\n```\n\n### `iperf tcp_proxy_server`\n```shell\n# sudo apt install iperf\niperf -s -p 5001 > /dev/null &\nbin/tcp_proxy_server 1212 127.0.0.1:5001 &\niperf -c 127.0.0.1 -p 5001 -l 8K\niperf -c 127.0.0.1 -p 1212 -l 8K\n```\n\n**Bandwidth**:\n```shell\n------------------------------------------------------------\n[  3] local 127.0.0.1 port 52560 connected with 127.0.0.1 port 5001\n[ ID] Interval       Transfer     Bandwidth\n[  3]  0.0-10.0 sec  20.8 GBytes  17.9 Gbits/sec\n\n------------------------------------------------------------\n[  3] local 127.0.0.1 port 48142 connected with 127.0.0.1 port 1212\n[ ID] Interval       Transfer     Bandwidth\n[  3]  0.0-10.0 sec  11.9 GBytes  10.2 Gbits/sec\n```\n\n### `webbench`\n```shell\n# sudo apt install wrk\nwrk -c 100 -t 4 -d 10s http://127.0.0.1:8080/\n\n# sudo apt install apache2-utils\nab -c 100 -n 100000 http://127.0.0.1:8080/\n```\n\n**libhv(port:8080) vs nginx(port:80)**\n\n![libhv-vs-nginx.png](html/downloads/libhv-vs-nginx.png)\n\nAbove test results can be found on [Github Actions](https://github.com/ithewei/libhv/actions/workflows/benchmark.yml).\n"
        },
        {
          "name": "TREE.md",
          "type": "blob",
          "size": 1.5009765625,
          "content": "## 目录结构\n\n```\n.\n├── base        libhv基础设施，如常用宏定义、数据结构、日期时间、线程、进程、日志、套接字\n├── bin         可执行文件安装目录\n├── build       cmake默认构建目录\n├── cert        SSL证书存放目录\n├── cmake       cmake脚本存放目录\n├── cpputil     libhv工具类，如字符串、文件、路径、线程池、json解析、ini解析\n├── docs        文档存放目录\n├── echo-servers 包含libevent、libev、libuv、libhv、asio、poco、muduo等多个网络库的tcp echo server写法，并做压力测试\n├── etc         应用程序配置目录\n├── event       libhv事件循环模块\n├── evpp        事件循环c++封装类\n├── examples    示例代码\n│   └── httpd\n├── html        网页document_root目录\n│   ├── downloads   下载目录\n│   └── uploads     上传目录\n├── http        libhv http模块\n│   ├── client\n│   └── server\n├── include     头文件安装目录\n│   └── hv\n├── lib         库文件安装目录\n├── logs        日志生成目录\n├── misc        杂项\n├── mqtt        MQTT协议\n├── protocol    包含icmp、dns、ftp、smtp等协议的实现\n├── scripts     shell脚本存放目录\n├── ssl         SSL/TLS加密通信\n├── unittest    单元测试代码\n└── util        libhv工具函数，如base64、md5、sha1\n\n```\n"
        },
        {
          "name": "WORKSPACE.bazel",
          "type": "blob",
          "size": 0.0224609375,
          "content": "workspace(name = \"hv\")\n"
        },
        {
          "name": "base",
          "type": "tree",
          "content": null
        },
        {
          "name": "cert",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.ini",
          "type": "blob",
          "size": 0.6640625,
          "content": "# Don't modify this file, you should modify config.mk or\n# run ./configure --with-MODULE --enable-FEATURE\n\nPREFIX=/usr/local\nINSTALL_INCDIR=$(PREFIX)/include/hv\nINSTALL_LIBDIR=$(PREFIX)/lib\n\n# modules\n# include icmp dns ftp smtp\nWITH_PROTOCOL=no\n\nWITH_EVPP=yes\nWITH_HTTP=yes\nWITH_HTTP_SERVER=yes\nWITH_HTTP_CLIENT=yes\nWITH_MQTT=no\n\n# features\n# base/hsocket.h: Unix Domain Socket\nENABLE_UDS=no\n# base/RAII.cpp: Windows MiniDumpWriteDump\nENABLE_WINDUMP=no\n# http/http_content.h: KeyValue,QueryParams,MultiPart\nUSE_MULTIMAP=no\n\n# dependencies\n# for http/client\nWITH_CURL=no\n# for http2\nWITH_NGHTTP2=no\n# for SSL/TLS\nWITH_OPENSSL=no\nWITH_GNUTLS=no\nWITH_MBEDTLS=no\n\n# rudp\nWITH_KCP=no\n"
        },
        {
          "name": "config.mk",
          "type": "blob",
          "size": 0.3330078125,
          "content": "\nPREFIX=/usr/local\nINSTALL_INCDIR=$(PREFIX)/include/hv\nINSTALL_LIBDIR=$(PREFIX)/lib\nWITH_PROTOCOL=no\nWITH_EVPP=yes\nWITH_HTTP=yes\nWITH_HTTP_SERVER=yes\nWITH_HTTP_CLIENT=yes\nWITH_MQTT=no\nENABLE_UDS=no\nENABLE_WINDUMP=no\nUSE_MULTIMAP=no\nWITH_CURL=no\nWITH_NGHTTP2=no\nWITH_OPENSSL=no\nWITH_GNUTLS=no\nWITH_MBEDTLS=no\nWITH_KCP=no\nCONFIG_DATE=20220224\n"
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 6.4130859375,
          "content": "#!/bin/bash\n\n. \"$(dirname \"$0\")/scripts/shini.sh\"\n\nprint_help() {\n    shini_parse \"config.ini\"\n    cat << END\nUsage: ./configure [--option] ...\n\noptions:\n  --prefix=PREFIX           (DEFAULT: $PREFIX)\n  --incdir=INSTALL_INCDIR   (DEFAULT: $PREFIX/include/hv)\n  --libdir=INSTALL_LIBDIR   (DEFAULT: $PREFIX/lib)\n\n  --with-MODULE\n  --without-MODULE\n  --enable-FEATURE\n  --disable-FEATURE\n\nmodules:\n  --with-protocol       compile protocol module?        (DEFAULT: $WITH_PROTOCOL)\n  --with-evpp           compile evpp module?            (DEFAULT: $WITH_EVPP)\n  --with-http           compile http module?            (DEFAULT: $WITH_HTTP)\n  --with-http-client    compile http client module?     (DEFAULT: $WITH_HTTP_CLIENT)\n  --with-http-server    compile http server module?     (DEFAULT: $WITH_HTTP_SERVER)\n  --with-mqtt           compile mqtt module?            (DEFAULT: $WITH_MQTT)\n\nfeatures:\n  --enable-uds          enable Unix Domain Socket?      (DEFAULT: $ENABLE_UDS)\n  --enable-windump      enable Windows coredump?        (DEFAULT: $ENABLE_WINDUMP)\n\ndependencies:\n  --with-curl           compile with curl?              (DEFAULT: $WITH_CURL)\n  --with-nghttp2        compile with nghttp2?           (DEFAULT: $WITH_NGHTTP2)\n  --with-openssl        compile with openssl?           (DEFAULT: $WITH_OPENSSL)\n  --with-gnutls         compile with gnutls?            (DEFAULT: $WITH_GNUTLS)\n  --with-mbedtls        compile with mbedtls?           (DEFAULT: $WITH_MBEDTLS)\n\nrudp:\n  --with-kcp            compile with kcp?               (DEFAULT: $WITH_KCP)\n\nEND\n}\n\nmkdir tmp 2>/dev/null\nwhile [ -n \"$1\" ]\ndo\n    opt=\"$1\"\n    KEY=\"\"\n    VAL=yes\n    case $opt in\n        --help)\n            print_help\n            exit 0\n            ;;\n        --prefix=*)\n            KEY=\"PREFIX\"\n            VAL=${opt:9}\n            ;;\n        --incdir=*)\n            KEY=\"INSTALL_INCDIR\"\n            VAL=${opt:9}\n            ;;\n        --libdir=*)\n            KEY=\"INSTALL_LIBDIR\"\n            VAL=${opt:9}\n            ;;\n        --with-*)\n            KEY=\"WITH_${opt:7}\"\n            ;;\n        --without-*)\n            KEY=\"WITH_${opt:10}\"\n            VAL=no\n            ;;\n        --enable-*)\n            KEY=\"ENABLE_${opt:9}\"\n            ;;\n        --disable-*)\n            KEY=\"ENABLE_${opt:10}\"\n            VAL=no\n            ;;\n        *)\n            print_help\n            exit 255\n            ;;\n    esac\n\n    if [ -n $KEY ]; then\n        FEATURE=$(echo \"$KEY\" | tr \"a-z-\" \"A-Z_\")\n        if [ ! -f tmp/config.mk ]; then\n            cp config.ini tmp/config.mk\n        fi\n        shini_write \"tmp/config.mk\" \"\" \"$FEATURE\" \"$VAL\"\n    fi\n\n    shift 1\ndone\n\n# config.mk\necho \"[config.mk]\"\nif [ -f tmp/config.mk ]; then\n    mv tmp/config.mk config.mk\n    shini_write \"config.mk\" \"\" \"CONFIG_DATE\" \"$(date +%Y%m%d)\"\nfi\ncat config.mk\necho \"\"\n\n# Checks for compiler\necho -e \"\\nchecking for compiler...\"\nif [ $CROSS_COMPILE ]; then\n    CC=${CROSS_COMPILE}gcc\n    CXX=${CROSS_COMPILE}g++\nfi\n\nif [ ! $CC ]; then\n    CC=gcc\n    CXX=g++\nfi\nCC_VERSION=`$CC --version 2>&1 | head -n 1`\n\necho \"CC  = $CC\"\necho \"CXX = $CXX\"\necho \"$CC_VERSION\"\n\n# Checks for os\necho -e \"\\nchecking for os...\"\nHOST_OS=`uname -s`\nHOST_ARCH=`uname -m`\nTARGET_PLATFORM=`$CC -v 2>&1 | grep Target | sed 's/Target: //'`\nTARGET_ARCH=`echo $TARGET_PLATFORM | awk -F'-' '{print $1}'`\n\ncase $TARGET_PLATFORM in\n    *mingw*) TARGET_OS=Windows ;;\n    *android*) TARGET_OS=Android ;;\n    *darwin*) TARGET_OS=Darwin ;;\n    *) TARGET_OS=Linux ;;\nesac\n\necho \"HOST_OS         = $HOST_OS\"\necho \"HOST_ARCH       = $HOST_ARCH\"\necho \"TARGET_PLATFORM = $TARGET_PLATFORM\"\necho \"TARGET_OS       = $TARGET_OS\"\necho \"TARGET_ARCH     = $TARGET_ARCH\"\n\n# hconfig.h\necho -e \"\\n>> hconfig.h\"\nconfile=hconfig.h\ncat << END > $confile\n#ifndef HV_CONFIG_H_\n#define HV_CONFIG_H_\n\nEND\n\nwrite_define() {\ncat << END >> hconfig.h\n#ifndef $macro\n#define $macro $value\n#endif\n\nEND\n}\n\nCheckHeaderExists() {\nrm tmp/check 2>/dev/null\ncat << END > tmp/check.c\n#include <$header>\n\nint main() {\n    return 0;\n}\n\nEND\n$CC -o tmp/check tmp/check.c 2>/dev/null\nif [ -x tmp/check ]; then\n    value=1\nelse\n    value=0\nfi\n}\n\nCheckSymbolExists() {\nCheckHeaderExists\nif [ $value -eq 0 ]; then\n    return;\nfi\nrm tmp/check 2>/dev/null\ncat << END > tmp/check.c\n#include <$header>\n\nint $function(void** pp) {return 0;}\nint main() {\n    void* p;\n    return $function(&p);\n}\n\nEND\n$CC -o tmp/check tmp/check.c 2>/dev/null\nif [ -x tmp/check ]; then\n    value=0\nelse\n    value=1\nfi\n}\n\ncheck_header() {\necho -n \"checking for $header... \"\nCheckHeaderExists\nif [ $value -eq 0 ]; then\n    echo \"no\"\nelse\n    echo \"yes\"\nfi\nmacro=HAVE_$(echo $header | tr a-z./ A-Z__)\nwrite_define\n}\n\ncheck_function() {\necho -n \"checking for $function... \"\nCheckSymbolExists\nif [ $value -eq 0 ]; then\n    echo \"no\"\nelse\n    echo \"yes\"\nfi\nmacro=HAVE_$(echo $function | tr a-z A-Z)\nwrite_define\n}\n\ncheck_option() {\nvalue=$(eval echo \\$$option)\necho \"checking for $option=$value\"\nif [ \"$value\" == \"yes\" ]; then\ncat << END >> $confile\n#define $option 1\nEND\nelse\ncat << END >> $confile\n/* #undef $option */\nEND\nfi\n}\n\n# Checks for programs\n\n# Checks for libraries\n\n# Checks for header files\nheader=stdbool.h && check_header\nheader=stdint.h && check_header\nheader=stdatomic.h && check_header\nheader=sys/types.h && check_header\nheader=sys/stat.h && check_header\nheader=sys/time.h && check_header\nheader=fcntl.h && check_header\nheader=pthread.h && check_header\nheader=endian.h && check_header\nheader=sys/endian.h && check_header\n\n# Checks for functions\nfunction=gettid && header=unistd.h && check_function\nfunction=strlcpy && header=string.h && check_function\nfunction=strlcat && header=string.h && check_function\nfunction=clock_gettime && header=time.h && check_function\nfunction=gettimeofday && header=sys/time.h && check_function\nfunction=pthread_spin_lock && header=pthread.h && check_function\nfunction=pthread_mutex_timedlock && header=pthread.h && check_function\nfunction=sem_timedwait && header=semaphore.h && check_function\nfunction=pipe && header=unistd.h && check_function\nfunction=socketpair && header=sys/socket.h && check_function\nfunction=eventfd && header=sys/eventfd.h && check_function\nfunction=setproctitle && header=unistd.h && check_function\n\n# Checks for options\nsource config.mk 2>/dev/null\noption=WITH_OPENSSL && check_option\noption=WITH_GNUTLS && check_option\noption=WITH_MBEDTLS && check_option\noption=ENABLE_UDS && check_option\noption=USE_MULTIMAP && check_option\noption=WITH_KCP && check_option\n\n# end confile\ncat << END >> $confile\n\n#endif // HV_CONFIG_H_\nEND\n\necho \"configure done.\"\n"
        },
        {
          "name": "cpputil",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "echo-servers",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "event",
          "type": "tree",
          "content": null
        },
        {
          "name": "evpp",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "getting_started.sh",
          "type": "blob",
          "size": 3.357421875,
          "content": "#!/bin/bash\n\necho \"Welcome to libhv!\"\necho \"Press any key to run ...\"\n\necho_cmd() {\n    echo -e \"\\n\\033[36m$cmd\\033[0m\"\n    read -n1\n}\n\nrun_cmd() {\n    echo_cmd\n    $cmd\n}\n\n# compile httpd curl\nif [ ! -x bin/httpd -o ! -x bin/curl ]; then\n    cmd=\"make httpd curl\" && echo_cmd\n    ./configure\n    make clean\n    make -j4 httpd curl\nfi\n\n# run httpd\nprocesses=$(ps aux | grep -v grep | grep httpd | wc -l)\nif [ $processes -lt 1 ]; then\n    cmd=\"bin/httpd -c etc/httpd.conf -s restart -d\" && run_cmd\nfi\nps aux | grep -v grep | grep httpd\n\n# http file service\ncmd=\"bin/curl -v localhost:8080\" && run_cmd\n\n# http indexof service\ncmd=\"bin/curl -v localhost:8080/downloads/\" && run_cmd\ncmd=\"bin/curl -v localhost:8080/downloads/中文.html\" && run_cmd\n\n# http api service\ncmd=\"bin/curl -v localhost:8080/paths\" && run_cmd\n\ncmd=\"bin/curl -v localhost:8080/ping\" && run_cmd\n\ncmd=\"bin/curl -v localhost:8080/data\" && run_cmd\n\ncmd=\"bin/curl -v localhost:8080/html/index.html\" && run_cmd\n\ncmd=\"bin/curl -v localhost:8080/get?env=1\" && run_cmd\n\ncmd=\"bin/curl -v localhost:8080/service\" && run_cmd\n\ncmd=\"bin/curl -v localhost:8080/async\" && run_cmd\n\ncmd=\"bin/curl -v localhost:8080/wildcard/test\" && run_cmd\n\ncmd=\"bin/curl -v localhost:8080/echo -d 'hello,world!'\" && echo_cmd\nbin/curl -v localhost:8080/echo -d 'hello,world!'\n\ncmd=\"bin/curl -v localhost:8080/query?page_no=1&page_size=10\" && run_cmd\n\ncmd=\"bin/curl -v localhost:8080/kv   -H 'Content-Type:application/x-www-form-urlencoded' -d 'user=admin&pswd=123456'\" && echo_cmd\n     bin/curl -v localhost:8080/kv   -H 'Content-Type:application/x-www-form-urlencoded' -d 'user=admin&pswd=123456'\n\ncmd=\"bin/curl -v localhost:8080/json -H 'Content-Type:application/json' -d '{\\\"user\\\":\\\"admin\\\",\\\"pswd\\\":\\\"123456\\\"}'\" && echo_cmd\n     bin/curl -v localhost:8080/json -H 'Content-Type:application/json' -d '{\"user\":\"admin\",\"pswd\":\"123456\"}'\n\ncmd=\"bin/curl -v localhost:8080/form -F 'user=admin' -F 'pswd=123456'\" && echo_cmd\n     bin/curl -v localhost:8080/form -F 'user=admin' -F 'pswd=123456'\n\ncmd=\"bin/curl -v localhost:8080/upload?filename=LICENSE -d '@LICENSE'\" && echo_cmd\n     bin/curl -v localhost:8080/upload?filename=LICENSE -d '@LICENSE'\n\ncmd=\"bin/curl -v localhost:8080/upload -F 'file=@LICENSE'\" && echo_cmd\n     bin/curl -v localhost:8080/upload -F 'file=@LICENSE'\n\ncmd=\"bin/curl -v localhost:8080/upload/README.md -d '@README.md'\" && echo_cmd\n     bin/curl -v localhost:8080/upload/README.md -d '@README.md'\n\ncmd=\"bin/curl -v localhost:8080/test -H 'Content-Type:application/x-www-form-urlencoded' -d 'bool=1&int=123&float=3.14&string=hello'\" && echo_cmd\n     bin/curl -v localhost:8080/test -H 'Content-Type:application/x-www-form-urlencoded' -d 'bool=1&int=123&float=3.14&string=hello'\n\ncmd=\"bin/curl -v localhost:8080/test -H 'Content-Type:application/json' -d '{\\\"bool\\\":true,\\\"int\\\":123,\\\"float\\\":3.14,\\\"string\\\":\\\"hello\\\"}'\" && echo_cmd\n     bin/curl -v localhost:8080/test -H 'Content-Type:application/json' -d '{\"bool\":true,\"int\":123,\"float\":3.14,\"string\":\"hello\"}'\n\ncmd=\"bin/curl -v localhost:8080/test -F 'bool=1' -F 'int=123' -F 'float=3.14' -F 'string=hello'\" && echo_cmd\n     bin/curl -v localhost:8080/test -F 'bool=1' -F 'int=123' -F 'float=3.14' -F 'string=hello'\n\n# RESTful API: /group/:group_name/user/:user_id\ncmd=\"bin/curl -v -X DELETE localhost:8080/group/test/user/123\" && run_cmd\n\n# show log\ncmd=\"tail -n 50 logs/httpd*.log\" && run_cmd\n\necho -e \"\\nEnjoy libhv!\\n\"\n"
        },
        {
          "name": "hconfig.h",
          "type": "blob",
          "size": 1.49609375,
          "content": "#ifndef HV_CONFIG_H_\n#define HV_CONFIG_H_\n\n#ifndef HAVE_STDBOOL_H\n#define HAVE_STDBOOL_H 1\n#endif\n\n#ifndef HAVE_STDINT_H\n#define HAVE_STDINT_H 1\n#endif\n\n#ifndef HAVE_STDATOMIC_H\n#define HAVE_STDATOMIC_H 0\n#endif\n\n#ifndef HAVE_SYS_TYPES_H\n#define HAVE_SYS_TYPES_H 1\n#endif\n\n#ifndef HAVE_SYS_STAT_H\n#define HAVE_SYS_STAT_H 1\n#endif\n\n#ifndef HAVE_SYS_TIME_H\n#define HAVE_SYS_TIME_H 1\n#endif\n\n#ifndef HAVE_FCNTL_H\n#define HAVE_FCNTL_H 1\n#endif\n\n#ifndef HAVE_PTHREAD_H\n#define HAVE_PTHREAD_H 1\n#endif\n\n#ifndef HAVE_ENDIAN_H\n#define HAVE_ENDIAN_H 1\n#endif\n\n#ifndef HAVE_SYS_ENDIAN_H\n#define HAVE_SYS_ENDIAN_H 0\n#endif\n\n#ifndef HAVE_GETTID\n#define HAVE_GETTID 0\n#endif\n\n#ifndef HAVE_STRLCPY\n#define HAVE_STRLCPY 1\n#endif\n\n#ifndef HAVE_STRLCAT\n#define HAVE_STRLCAT 1\n#endif\n\n#ifndef HAVE_CLOCK_GETTIME\n#define HAVE_CLOCK_GETTIME 1\n#endif\n\n#ifndef HAVE_GETTIMEOFDAY\n#define HAVE_GETTIMEOFDAY 1\n#endif\n\n#ifndef HAVE_PTHREAD_SPIN_LOCK\n#define HAVE_PTHREAD_SPIN_LOCK 0\n#endif\n\n#ifndef HAVE_PTHREAD_MUTEX_TIMEDLOCK\n#define HAVE_PTHREAD_MUTEX_TIMEDLOCK 0\n#endif\n\n#ifndef HAVE_SEM_TIMEDWAIT\n#define HAVE_SEM_TIMEDWAIT 0\n#endif\n\n#ifndef HAVE_PIPE\n#define HAVE_PIPE 1\n#endif\n\n#ifndef HAVE_SOCKETPAIR\n#define HAVE_SOCKETPAIR 1\n#endif\n\n#ifndef HAVE_EVENTFD\n#define HAVE_EVENTFD 1\n#endif\n\n#ifndef HAVE_SETPROCTITLE\n#define HAVE_SETPROCTITLE 0\n#endif\n\n/* #undef WITH_OPENSSL */\n/* #undef WITH_GNUTLS */\n/* #undef WITH_MBEDTLS */\n\n/* #undef ENABLE_UDS */\n/* #undef USE_MULTIMAP */\n\n#define WITH_WEPOLL     1\n/* #undef WITH_KCP */\n\n#endif // HV_CONFIG_H_\n"
        },
        {
          "name": "hconfig.h.in",
          "type": "blob",
          "size": 1.8798828125,
          "content": "#ifndef HV_CONFIG_H_\n#define HV_CONFIG_H_\n\n#ifndef HAVE_STDBOOL_H\n#define HAVE_STDBOOL_H @HAVE_STDBOOL_H@\n#endif\n\n#ifndef HAVE_STDINT_H\n#define HAVE_STDINT_H @HAVE_STDINT_H@\n#endif\n\n#ifndef HAVE_STDATOMIC_H\n#define HAVE_STDATOMIC_H @HAVE_STDATOMIC_H@\n#endif\n\n#ifndef HAVE_SYS_TYPES_H\n#define HAVE_SYS_TYPES_H @HAVE_SYS_TYPES_H@\n#endif\n\n#ifndef HAVE_SYS_STAT_H\n#define HAVE_SYS_STAT_H @HAVE_SYS_STAT_H@\n#endif\n\n#ifndef HAVE_SYS_TIME_H\n#define HAVE_SYS_TIME_H @HAVE_SYS_TIME_H@\n#endif\n\n#ifndef HAVE_FCNTL_H\n#define HAVE_FCNTL_H @HAVE_FCNTL_H@\n#endif\n\n#ifndef HAVE_PTHREAD_H\n#define HAVE_PTHREAD_H @HAVE_PTHREAD_H@\n#endif\n\n#ifndef HAVE_ENDIAN_H\n#define HAVE_ENDIAN_H @HAVE_ENDIAN_H@\n#endif\n\n#ifndef HAVE_SYS_ENDIAN_H\n#define HAVE_SYS_ENDIAN_H @HAVE_SYS_ENDIAN_H@\n#endif\n\n#ifndef HAVE_GETTID\n#define HAVE_GETTID @HAVE_GETTID@\n#endif\n\n#ifndef HAVE_STRLCPY\n#define HAVE_STRLCPY @HAVE_STRLCPY@\n#endif\n\n#ifndef HAVE_STRLCAT\n#define HAVE_STRLCAT @HAVE_STRLCAT@\n#endif\n\n#ifndef HAVE_CLOCK_GETTIME\n#define HAVE_CLOCK_GETTIME @HAVE_CLOCK_GETTIME@\n#endif\n\n#ifndef HAVE_GETTIMEOFDAY\n#define HAVE_GETTIMEOFDAY @HAVE_GETTIMEOFDAY@\n#endif\n\n#ifndef HAVE_PTHREAD_SPIN_LOCK\n#define HAVE_PTHREAD_SPIN_LOCK @HAVE_PTHREAD_SPIN_LOCK@\n#endif\n\n#ifndef HAVE_PTHREAD_MUTEX_TIMEDLOCK\n#define HAVE_PTHREAD_MUTEX_TIMEDLOCK @HAVE_PTHREAD_MUTEX_TIMEDLOCK@\n#endif\n\n#ifndef HAVE_SEM_TIMEDWAIT\n#define HAVE_SEM_TIMEDWAIT @HAVE_SEM_TIMEDWAIT@\n#endif\n\n#ifndef HAVE_PIPE\n#define HAVE_PIPE @HAVE_PIPE@\n#endif\n\n#ifndef HAVE_SOCKETPAIR\n#define HAVE_SOCKETPAIR @HAVE_SOCKETPAIR@\n#endif\n\n#ifndef HAVE_EVENTFD\n#define HAVE_EVENTFD @HAVE_EVENTFD@\n#endif\n\n#ifndef HAVE_SETPROCTITLE\n#define HAVE_SETPROCTITLE @HAVE_SETPROCTITLE@\n#endif\n\n#cmakedefine WITH_OPENSSL   1\n#cmakedefine WITH_GNUTLS    1\n#cmakedefine WITH_MBEDTLS   1\n\n#cmakedefine ENABLE_UDS     1\n#cmakedefine USE_MULTIMAP   1\n\n#cmakedefine WITH_WEPOLL    1\n#cmakedefine WITH_KCP       1\n\n#endif // HV_CONFIG_H_\n"
        },
        {
          "name": "hexport.h",
          "type": "blob",
          "size": 2.3017578125,
          "content": "#ifndef HV_EXPORT_H_\n#define HV_EXPORT_H_\n\n// HV_EXPORT\n#if defined(HV_STATICLIB) || defined(HV_SOURCE)\n    #define HV_EXPORT\n#elif defined(_MSC_VER)\n    #if defined(HV_DYNAMICLIB) || defined(HV_EXPORTS) || defined(hv_EXPORTS)\n        #define HV_EXPORT  __declspec(dllexport)\n    #else\n        #define HV_EXPORT  __declspec(dllimport)\n    #endif\n#elif defined(__GNUC__)\n    #define HV_EXPORT  __attribute__((visibility(\"default\")))\n#else\n    #define HV_EXPORT\n#endif\n\n// HV_INLINE\n#define HV_INLINE static inline\n\n// HV_DEPRECATED\n#if defined(HV_NO_DEPRECATED)\n#define HV_DEPRECATED\n#elif defined(__GNUC__) || defined(__clang__)\n#define HV_DEPRECATED   __attribute__((deprecated))\n#elif defined(_MSC_VER)\n#define HV_DEPRECATED   __declspec(deprecated)\n#else\n#define HV_DEPRECATED\n#endif\n\n// HV_UNUSED\n#if defined(__GNUC__)\n    #define HV_UNUSED   __attribute__((visibility(\"unused\")))\n#else\n    #define HV_UNUSED\n#endif\n\n#ifdef __cplusplus\n\n#ifndef EXTERN_C\n#define EXTERN_C            extern \"C\"\n#endif\n\n#ifndef BEGIN_EXTERN_C\n#define BEGIN_EXTERN_C      extern \"C\" {\n#endif\n\n#ifndef END_EXTERN_C\n#define END_EXTERN_C        } // extern \"C\"\n#endif\n\n#ifndef BEGIN_NAMESPACE\n#define BEGIN_NAMESPACE(ns) namespace ns {\n#endif\n\n#ifndef END_NAMESPACE\n#define END_NAMESPACE(ns)   } // namespace ns\n#endif\n\n#ifndef USING_NAMESPACE\n#define USING_NAMESPACE(ns) using namespace ns;\n#endif\n\n#ifndef DEFAULT\n#define DEFAULT(x)  = x\n#endif\n\n#ifndef ENUM\n#define ENUM(e)     enum e\n#endif\n\n#ifndef STRUCT\n#define STRUCT(s)   struct s\n#endif\n\n#else\n\n#define EXTERN_C    extern\n#define BEGIN_EXTERN_C\n#define END_EXTERN_C\n\n#define BEGIN_NAMESPACE(ns)\n#define END_NAMESPACE(ns)\n#define USING_NAMESPACE(ns)\n\n#ifndef DEFAULT\n#define DEFAULT(x)\n#endif\n\n#ifndef ENUM\n#define ENUM(e)\\\ntypedef enum e e;\\\nenum e\n#endif\n\n#ifndef STRUCT\n#define STRUCT(s)\\\ntypedef struct s s;\\\nstruct s\n#endif\n\n#endif // __cplusplus\n\n#define BEGIN_NAMESPACE_HV  BEGIN_NAMESPACE(hv)\n#define END_NAMESPACE_HV    END_NAMESPACE(hv)\n#define USING_NAMESPACE_HV  USING_NAMESPACE(hv)\n\n// MSVC ports\n#ifdef _MSC_VER\n\n#pragma warning (disable: 4251) // STL dll\n#pragma warning (disable: 4275) // dll-interface\n\n#if _MSC_VER < 1900 // < VS2015\n\n#ifndef __cplusplus\n#ifndef inline\n#define inline __inline\n#endif\n#endif\n\n#ifndef snprintf\n#define snprintf _snprintf\n#endif\n\n#endif\n#endif\n\n#endif // HV_EXPORT_H_\n"
        },
        {
          "name": "html",
          "type": "tree",
          "content": null
        },
        {
          "name": "http",
          "type": "tree",
          "content": null
        },
        {
          "name": "hv.h",
          "type": "blob",
          "size": 0.6962890625,
          "content": "#ifndef HV_H_\n#define HV_H_\n\n/**\n * @copyright 2018 HeWei, all rights reserved.\n */\n\n// platform\n#include \"hconfig.h\"\n#include \"hexport.h\"\n#include \"hplatform.h\"\n\n// c\n#include \"hdef.h\"   // <stddef.h>\n#include \"hatomic.h\"// <stdatomic.h>\n#include \"herr.h\"   // <errno.h>\n#include \"htime.h\"  // <time.h>\n#include \"hmath.h\"  // <math.h>\n\n#include \"hbase.h\"\n#include \"hversion.h\"\n#include \"hsysinfo.h\"\n#include \"hproc.h\"\n#include \"hthread.h\"\n#include \"hmutex.h\"\n#include \"hsocket.h\"\n\n#include \"hlog.h\"\n#include \"hbuf.h\"\n\n// cpp\n#ifdef __cplusplus\n#include \"hmap.h\"       // <map>\n#include \"hstring.h\"    // <string>\n#include \"hfile.h\"\n#include \"hpath.h\"\n#include \"hdir.h\"\n#include \"hurl.h\"\n#endif\n\n#endif  // HV_H_\n"
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "mqtt",
          "type": "tree",
          "content": null
        },
        {
          "name": "protocol",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "ssl",
          "type": "tree",
          "content": null
        },
        {
          "name": "unittest",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}