{
  "metadata": {
    "timestamp": 1736710323720,
    "page": 122,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yarrick/iodine",
      "stars": 6314,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0986328125,
          "content": "/bin/\n*.o\n/src/base64u.c\n/src/base64u.h\n/tests/test\n*.o.d\n/src/obj/local/*/iodine\n/src/libs/*/iodine\n"
        },
        {
          "name": ".vimrc",
          "type": "blob",
          "size": 0.0634765625,
          "content": "set noexpandtab\nset tabstop=8\nset softtabstop=8\nset shiftwidth=8\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 8.4775390625,
          "content": "\niodine - https://code.kryo.se/iodine\n\n************************************\n\nCHANGES:\n\nmaster:\n\t- Changed deprecated tzsetwall() to tzset() (only used by FreeBSD),\n\t  patch by Pouria Mousavizadeh Tehrani.\n    - Now builds on macOS even without if_utun.h (pre 10.6).\n\n2023-04-17: 0.8.0 \"Burning Snowman\"\n\t- Mac OS X: Support native utun VPN devices. Patch by\n\t\tPeter Sagerson, ported from OpenVPN by Catalin Patulea.\n\t- Fix compilation failure on kFreeBSD and Hurd, by Gregor Herrmann\n\t- Patch from Ryan Welton that fixes compilation warning.\n\t- README converted to markdown by Nicolas Braud-Santoni.\n\t- Linux: use pkg-config for systemd support flags.\n\t\tPatch by Jason A. Donenfeld.\n\t- Add support for IPv6 in the server.\n\t   Raw mode will be with same protocol as used for login.\n\t   Traffic inside tunnel is still IPv4.\n\t- Update android build to try to support 5.0 (Lollipop) and newer.\n\t- Change external IP lookup to using myip.opendns.com via DNS.\n\t- Add option to choose IPv4 listen address from external IP lookup.\n\t- Add server support for handling multiple domains via wildcard.\n\t- Recognize tap device component id 'root' prefix on Windows.\n\n2014-06-16: 0.7.0 \"Kryoptonite\"\n\t- Partial IPv6 support (#107)\n\t   Client can connect to iodined through an relaying IPv6\n\t   nameserver. Server only supports IPv4 for now.\n\t   Traffic inside tunnel is IPv4.\n\t- Add socket activation for systemd, by Michael Scherer.\n\t- Add automated lookup of external ip (via -n auto).\n\t- Bugfix for OS X (Can't assign requested address)\n\t- Fix DNS tunneling bug caused by uninitialized variable, #94\n\t- Handle spaces when entering password interactively, fixes #93.\n\t\tPatch by Hagar.\n\t- Add -R option to set OpenBSD routing domain for the DNS socket.\n\t\tPatch by laurent at gouloum fr, fixes #95.\n\t- Add android patches and makefile, from Marcel Bokhorst, fixes #105.\n\t- Added missing break in iodine.c, by Pavel Pergamenshchik, #108.\n\t- A number of minor patches from Frank Denis, Gregor Herrmann and\n\t\tBarak A. Pearlmutter.\n\t- Testcase compilation fixes for OS X and FreeBSD\n\t- Do not let sockets be inherited by sub-processes, fixes #99.\n\t- Add unspecified RR type (called PRIVATE; id 65399, in private use\n\t\trange). For servers with RFC3597 support. Fixes #97.\n\t- Fix authentication bypass vulnerability; found by Oscar Reparaz.\n\n2010-02-06: 0.6.0-rc1 \"Hotspotify\"\n\t- Fixed tunnel not working on Windows.\n\t- Any device name is now supported on Windows, fixes #47.\n\t- Multiple installed TAP32 interfaces are now supported, fixes #46.\n\t- Return nonzero if tunnel fails to open, fixes #62.\n\t- Support for setting a SELinux context, based on patch by\n\t\tSebastien Raveau. Sample context file in doc/iodine.te\n\t- Allow listen port and DNS forward port to be the same if listen IP\n\t\tdoes not include localhost.\n\t- The client will now exit if configuring IP or MTU fails.\n\t- The starting cache miss value is randomized at startup, fixes #65.\n\t- Raw UDP mode added. If the iodined server is reachable directly,\n\t\tpackets can be sent to it without DNS encoding. Fixes #36.\n\t- Do not overwrite users CC/CFLAGS/LDFLAGS, only add to them.\n\t- Added -F option to write pidfile, based on patch from\n\t\tmisc at mandriva.org. Fixes #70.\n\t- Allow password to be set via environment variable, fixes #77.\n\t\tBased on patch by logix.\n\t- Client now prints server tunnel IP, fixes #78. Patch by logix.\n\t- Fix build error on Mac OS X 10.6, patch by G. Rischard. #79.\n\t- Added support for CNAME/TXT/A/MX query types, fixes #75.\n\t\tPatch by Anne Bezemer, merge help by logix.\n\t- Merged low-latency patch from Anne Bezemer, fixes #76.\n\t- Resolve client nameserver argument if given as hostname, fixes #82.\n\t- Open log before chroot, fixes #86: logging on FreeBSD.\n\t- Merged big bugfix patch from Anne Bezemer, #88.\n\n2009-06-01: 0.5.2 \"WifiFree\"\n\t- Fixed client segfault on OS X, #57\n\t- Added check that nameserver lookup was successful\n\t- Fixed ENOTSOCK error on OS X and FreeBSD, #58.\n\n2009-03-21: 0.5.1 \"Boringo\"\n\t- Added initial Windows support, fixes #43.\n\t- Added length check of autoprobe responses\n\t- Refactored and added unit tests\n\t- Added syslog logging for iodined on version and login packets\n\t- Fixed segfault when encoding just one block, fixes #51.\n\t\tThe normal code was never affected by this.\n\t- Added win32 code to read DNS server from system, fixes #45.\n\t- Disabled password echo on win32, fixes #44.\n\t- Fix encoding error making all autoprobing > 1024 bytes fail, #52.\n\t- Increase default interface MTU to 1200.\n\t- Fix autoprobing error making every third probe fail, set IP flag\n\t\tDont-Fragment where supported. Fixes #54.\n\t- Added TAP32 version 0901 as accepted (#53).\n\n2009-01-23: 0.5.0 \"iPassed\"\n\t- Fixed segfault in server when sending version reject.\n\t- Applied patch to make iodine build on BeOS R5-BONE and Haiku,\n\t\tfrom Francois Revol. Still work to do to get tun device working.\n\t- Added capability to forward DNS queries outside tunnel domain to\n\t\ta nameserver on localhost. Use -b port to enable, fixes #31.\n\t- iodined now replies to NS request on its own domain, fixes issue #33.\n\t\tThe destination IP address is sent as reply. Use -n to specify\n\t\ta specific IP address to return (if behind NAT etc).\n\t- Upstream data is now Base64 encoded if relay server preserves case and\n\t\tsupports the plus (+) character in domain names, fixes #16.\n\t- Fixed problem in client when DNS trans. ID has highest bit set (#37)\n\t- IP addresses are now assigned within the netmask, so iodined can\n\t\tuse any address for itself, fixes #28.\n\t- Netmask size is now adjustable. Setting a small net will reduce the\n\t\tnumber of users. Use x.x.x.x/n notation on iodined tunnel ip.\n\t\tThis fixes #27.\n\t- Downstream data is now fragmented, and the fragment size is auto-\n\t\tprobed after login. Fixes #7. It only took a few years :)\n\t- Enhanced the checks that validates incoming packets\n\t- Fixed endless loop in fragment size autodetection, #39.\n\t- Fixed broken hostname dot placing with specific lengths, #40.\n\n2008-08-06: 0.4.2 \"Opened Zone\"\n\t- Applied a few small patches from Maxim Bourmistrov and Gregor Herrmann\n\t- Applied a patch for not creating and configuring the tun interface,\n\t\tDebian bug #477692 by Vincent Bernat, controlled by -s switch\n\t- Applied a security patch from Andrew Griffiths, use setgroups() to\n\t\tlimit the groups of the user\n\t- Applied a patch to make iodine build on (Open)Solaris, from Albert Lee\n\t\tNeeds TUN/TAP driver http://www.whiteboard.ne.jp/~admin2/tuntap/\n\t\tStill needs more code in tun.c for opening/closing the device\n\t- Added option in server (-c) to disable IP/port checking on packets,\n\t\twill hopefully help when server is behind NAT\n\t- Fixed bug #21, now only IP address part of each packet is checked.\n\t\tShould remove the need for the -c option and also work with\n\t\tbugfixed DNS servers worldwide.\n\t- Added -D option on server to enable debugging. Debug level 1 now \n\t\tprints info about each RX/TX datagram.\n\n2007-11-30: 0.4.1 \"Tea Online\"\n\t- Introduced encoding API\n\t- Switched to new Base32 implementation\n\t- Added Base64 implementation that only uses 63 chars (not used yet)\n\t- Refined 'install' make target and use $(MAKE) for recursive calls\n\t- All received error messages (RCODE field) are echoed\n\t- Top domain limited to 128 chars\n\t- Case preservation check sent after login to decide codec\n\t- Fixed crash on incoming NULL query in server with bad top domain\n\t- /etc/resolv.conf is consulted if no nameserver is given on commandline\n\t- Applied patch from Matthew W. S. Bell (Detach before chroot/dropping priv)\n\n2007-03-25: 0.4.0 \"Run Home\"\n\t- Added multiuser support (up to 8 users simultaneously)\n\t- Added authentication (password entered as argument or on stdin)\n\t- Added manpage\n\t- Added install/uninstall make target\n\t- Cleanup of dns code, more test cases, use check library\n\t- Changed directory structure\n\n2006-11-08: 0.3.4\n\t- Fixed handshake() buffer overflow\n\t  (Found by poplix, Secunia: SA22674 / FrSIRT/ADV-2006-4333)\n\t- Added more tests\n\t- More name parsing enhancements\n\t- Now runs on Linux/AMD64\n\t- Added setting to change server port\n\n2006-11-05: 0.3.3\n\t- Fixed possible buffer overflow\n\t  (Found by poplix, Bugtraq ID: 20883)\n\t- Reworked dns hostname encoding\n\n2006-09-11: 0.3.2\n\t- Support for NetBSD\n\t- Fixed potential security problems\n\t- Name parsing routines rewritten, added regression tests\n\t- New encoding, 25% more peak upstream throughput\n\t- New -l option to set local ip to listen to on server\n\n2006-07-11: 0.3.1\n\t- Add Mac OSX support\n\t- Add setting device name\n\t- Use compression of domain name in reply (should allow setting MTU\n\t\tapprox 200 bytes higher)\n\n2006-06-24: 0.3.0\n\t- First public release\n\t- Support for Linux, FreeBSD, OpenBSD\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.7197265625,
          "content": "Copyright (c) 2006-2020 iodine authors\n\nPermission to use, copy, modify, and/or distribute this software for any purpose\nwith or without fee is hereby granted, provided that the above copyright notice\nand this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.9267578125,
          "content": "prefix?=/usr/local\nsbindir=$(prefix)/sbin\ndatadir=$(prefix)/share\nmandir=$(datadir)/man\ndocdir=$(datadir)/doc\n\nDESTDIR=\n\nINSTALL=install\nINSTALL_FLAGS=\n\nMKDIR=mkdir\nMKDIR_FLAGS=-p\n\nRM=rm\nRM_FLAGS=-f\n\nTARGETOS = `uname`\n\nall:\n\t@$(MAKE) -C src TARGETOS=$(TARGETOS) all\n\ninstall: all\n\t$(MKDIR) $(MKDIR_FLAGS) $(DESTDIR)$(sbindir)\n\t$(INSTALL) $(INSTALL_FLAGS) bin/iodine $(DESTDIR)$(sbindir)/iodine\n\tchmod 755 $(DESTDIR)$(sbindir)/iodine\n\t$(INSTALL) $(INSTALL_FLAGS) bin/iodined $(DESTDIR)$(sbindir)/iodined\n\tchmod 755 $(DESTDIR)$(sbindir)/iodined\n\t$(MKDIR) $(MKDIR_FLAGS) $(DESTDIR)$(mandir)/man8\n\t$(INSTALL) $(INSTALL_FLAGS) man/iodine.8 $(DESTDIR)$(mandir)/man8/iodine.8\n\tchmod 644 $(DESTDIR)$(mandir)/man8/iodine.8\n\t$(MKDIR) $(MKDIR_FLAGS) $(DESTDIR)$(docdir)/iodine\n\t$(INSTALL) $(INSTALL_FLAGS) README.md $(DESTDIR)$(docdir)/iodine/README.md\n\tchmod 644 $(DESTDIR)$(docdir)/iodine/README.md\n\nuninstall:\n\t$(RM) $(RM_FLAGS) $(DESTDIR)$(sbindir)/iodine\n\t$(RM) $(RM_FLAGS) $(DESTDIR)$(sbindir)/iodined\n\t$(RM) $(RM_FLAGS) $(DESTDIR)$(mandir)/man8/iodine.8\n\ntest: all\n\t@echo \"!! The check library is required for compiling and running the tests\"\n\t@echo \"!! Get it at https://libcheck.github.io/check/\"\n\t@$(MAKE) -C tests TARGETOS=$(TARGETOS) all\n\nclean:\n\t@echo \"Cleaning...\"\n\t@$(MAKE) -C src clean\n\t@$(MAKE) -C tests clean\n\t@rm -rf bin iodine-latest*\n\n#Helper target for windows/android zipfiles\niodine-latest:\n\t@rm -rf iodine-latest*\n\t@mkdir -p iodine-latest\n\t@echo \"Create date: \" > iodine-latest/VERSION.txt\n\t@LANG=en_US date >> iodine-latest/VERSION.txt\n\t@echo \"Git version: \" >> iodine-latest/VERSION.txt\n\t@git rev-parse HEAD >> iodine-latest/VERSION.txt\n\t@for i in README.md CHANGELOG; do cp $$i iodine-latest/$$i.txt; done\n\t@unix2dos iodine-latest/*\n\n#non-PIE build for old android\ncross-android-old:\n\t@$(MAKE) -C src base64u.c\n\t@(cd src && ndk-build NDK_PROJECT_PATH=. APP_BUILD_SCRIPT=Android.mk APP_PLATFORM=android-3)\n\n#Position-indepedent build for modern android\ncross-android:\n\t@$(MAKE) -C src base64u.c\n\t@(cd src && ndk-build NDK_PROJECT_PATH=. APP_BUILD_SCRIPT=Android.16.mk APP_PLATFORM=android-16)\n\niodine-latest-android.zip: iodine-latest\n\t@mv iodine-latest iodine-latest-android\n\t@mkdir -p iodine-latest-android/pre-kitkat/armeabi\n\t@mkdir -p iodine-latest-android/pre-kitkat/x86\n\t@$(MAKE) cross-android-old TARGET_ARCH_ABI=armeabi\n\t@cp src/libs/armeabi/* iodine-latest-android/pre-kitkat/armeabi\n\t@$(MAKE) cross-android-old TARGET_ARCH_ABI=x86\n\t@cp src/libs/x86/* iodine-latest-android/pre-kitkat/x86\n\t@rm -rf src/libs src/obj\n\t@mkdir -p iodine-latest-android/armeabi\n\t@mkdir -p iodine-latest-android/arm64-v8a\n\t@mkdir -p iodine-latest-android/x86\n\t@$(MAKE) cross-android TARGET_ARCH_ABI=armeabi\n\t@cp src/libs/armeabi/* iodine-latest-android/armeabi\n\t@$(MAKE) cross-android TARGET_ARCH_ABI=arm64-v8a\n\t@cp src/libs/arm64-v8a/* iodine-latest-android/arm64-v8a\n\t@$(MAKE) cross-android TARGET_ARCH_ABI=x86\n\t@cp src/libs/x86/* iodine-latest-android/x86\n\t@cp README-android.txt iodine-latest-android\n\t@zip -r iodine-latest-android.zip iodine-latest-android\n\ncross-mingw32:\n\t@$(MAKE) -C src TARGETOS=windows32 CC=i686-w64-mingw32-gcc all\n\ncross-mingw64:\n\t@$(MAKE) -C src TARGETOS=windows32 CC=x86_64-w64-mingw32-gcc all\n\niodine-latest-windows.zip: iodine-latest\n\t@mv iodine-latest iodine-latest-windows\n\t@mkdir -p iodine-latest-windows/64bit iodine-latest-windows/32bit\n\t@$(MAKE) -C src TARGETOS=windows32 CC=i686-w64-mingw32-gcc clean all\n\t@i686-w64-mingw32-strip bin/iodine*\n\t@for i in `ls bin`; do cp bin/$$i iodine-latest-windows/32bit/$$i.exe; done\n\t@cp /usr/i686-w64-mingw32/sys-root/mingw/bin/zlib1.dll iodine-latest-windows/32bit\n\t@$(MAKE) -C src TARGETOS=windows32 CC=x86_64-w64-mingw32-gcc clean all\n\t@x86_64-w64-mingw32-strip bin/iodine*\n\t@for i in `ls bin`; do cp bin/$$i iodine-latest-windows/64bit/$$i.exe; done\n\t@cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/zlib1.dll iodine-latest-windows/64bit\n\t@cp README-win32.txt iodine-latest-windows\n\t@zip -r iodine-latest-windows.zip iodine-latest-windows\n\n"
        },
        {
          "name": "README-android.txt",
          "type": "blob",
          "size": 1.33203125,
          "content": "\r\n\r\niodine - https://code.kryo.se/iodine\r\n\r\n***********************************\r\n\r\nExtra README file for Android\r\n\r\n\r\n== Running iodine on Android:\r\n1. Get root access on your android device\r\n\r\n2. Find/build a compatible tun.ko for your specific Android kernel\r\n\r\n3. Copy tun.ko and the iodine binary to your device:\r\n   (Almost all devices need the armeabi binary. Only Intel powered\r\n   ones need the x86 build.)\r\n\r\n\t\tadb push tun.ko /data/local/tmp\r\n\t\tadb push iodine /data/local/tmp\r\n\t\tadb shell\r\n\t\tsu\r\n\t\tcd /data/local/tmp\r\n\t\tchmod 777 iodine\r\n\r\n4. Run iodine (see the man page for parameters)\r\n\r\n\t\t./iodine ...\r\n\r\nFor more information: http://blog.bokhorst.biz/5123\r\n\r\n== Building iodine for Android:\r\n1. Download and install the Android SDK and NDK\r\n\r\n2. Download and unpack the iodine sources\r\n\r\n3. Build:\r\n\tcd src\r\n\tmake base64u.h base64u.c\r\n\tndk-build NDK_PROJECT_PATH=. APP_BUILD_SCRIPT=Android.16.mk APP_PLATFORM=android-16\r\n\r\n   or run \"make cross-android\" in the iodine root directory.\r\n   To build for other archs, specify TARGET_ARCH_ABI:\r\n\t\t\"make cross-android TARGET_ARCH_ABI=x86\"\r\n\r\n   For older android versions (pre-kitkat), build with \"make cross-android-old\" in the\r\n   root directory, or manually like above but with APP_PLATFORM=android-3 and with\r\n   APP_BUILD_SCRIPT=Android.mk\r\n\r\n   The iodine binary ends up in src/libs/<arch>/iodine\r\n"
        },
        {
          "name": "README-win32.txt",
          "type": "blob",
          "size": 1.8955078125,
          "content": "\r\n\r\niodine - https://code.kryo.se/iodine\r\n\r\n***********************************\r\n\r\nExtra README file for Win32 related stuff\r\n\r\n\r\n== Running iodine on Windows:\r\n\r\n0. After iodine 0.6, you need Windows XP or newer to run.\r\n\r\n1. Install the TAP driver \r\n   https://openvpn.net/index.php/open-source/downloads.html\r\n   Download the OpenVPN TAP driver (under section Tap-windows)\r\n   Problems has been reported with the NDIS6 version (9.2x.y), use the\r\n   NDIS5 version for now if possible.\r\n\r\n2. Have at least one TAP32 interface installed. There are scripts for adding\r\n   and removing in the OpenVPN bin directory. If you have more than one\r\n   installed, use -d to specify which. Use double quotes if you have spaces,\r\n   example: iodine.exe -d \"Local Area Connection 4\" abc.ab\r\n\r\n3. Make sure the interface you want to use does not have a default gateway set.\r\n\r\n4. Run iodine/iodined as normal (see the main README file).\r\n   You may have to run it as administrator depending on user privileges.\r\n\r\n5. Enjoy!\r\n\r\n\r\n== Building on Windows:\r\nYou need:\r\n\tMinGW, MSYS, GCC, zlib\r\n\r\nThen just run make\r\n\r\n\r\n== Cross-compiling for MinGW:\r\nYou need:\r\n\tMinGW crosscompiler, crosscompiled zlib\r\n\r\nThen run \"make cross-mingw\"\r\nNote that the binaries will not get a .exe suffix\r\n\r\n\r\n== Zlib download\r\nYou can get zlib for MinGW here (both for native and crosscompile):\r\nhttps://code.kryo.se/iodine/deps/zlib.zip\r\nUnzip it in your MinGW directory on Windows or in $ROOT/usr for\r\ncross-compile.\r\n\r\n\r\n== Results of crappy Win32 API:\r\nThe following fixable limitations apply:\r\n- Server cannot read packet destination address\r\n\r\nThe following (probably) un-fixable limitations apply:\r\n- A password entered as -P argument can be shown in process list\r\n- Priviligies cannot be dropped\r\n- chroot() cannot be used\r\n- Detaching from terminal not possible\r\n- Server on windows must be run with /30 netmask\r\n- Client can only talk to server, not other clients\r\n\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.4501953125,
          "content": "iodine - <https://code.kryo.se/iodine>\n=====================================\n\n\nThis is a piece of software that lets you tunnel IPv4 data through a DNS\nserver. This can be usable in different situations where internet access is\nfirewalled, but DNS queries are allowed.\n\n\nCOMPILING\n---------\n\nIodine has no configure script. There are two optional features for Linux\n(SELinux and systemd support) that will be enabled automatically if the\nrelevant header files are found in `/usr/include`.\n(See script at `./src/osflags`)\n\nRun `make` to compile the server and client binaries.\nRun `make install` to copy binaries and manpage to the destination directory.\nRun `make test` to compile and run the unit tests. (Requires the `check` library)\n\n\nQUICKSTART\n----------\n\nTry it out within your own LAN! Follow these simple steps:\n- On your server, run: `./iodined -f 10.0.0.1 test.com`.\n  If you already use the `10.0.0.0` network, use another internal net like\n  `172.16.0.0`.\n- Enter a password.\n- On the client, run: `./iodine -f -r 192.168.0.1 test.com`.\n  Replace `192.168.0.1` with your server's ip address.\n- Enter the same password.\n- Now the client has the tunnel ip `10.0.0.2` and the server has `10.0.0.1`.\n- Try pinging each other through the tunnel.\n- Done! :)\n\nTo actually use it through a relaying nameserver, see below.\n\n\nHOW TO USE\n----------\n\nNote: server and client are required to speak the exact same protocol. In most\ncases, this means running the same iodine version. Unfortunately, implementing\nbackward and forward protocol compatibility is usually not feasible.\n\n### Server side\nTo use this tunnel, you need control over a real domain (like `mydomain.com`),\nand a server with a public IP address to run `iodined` on. If this server\nalready runs a DNS program, change its listening port and then use `iodined`'s\n`-b` option to let `iodined` forward the DNS requests. (Note that this procedure\nis not advised in production environments, because `iodined`'s DNS forwarding\nis not completely transparent, for example zone transfers will not work.)\nAlternatively you can forward the subdomain from your DNS server to `iodined`\nwhich must then run on a different port (`-p`).\n\nThen, delegate a subdomain (say, `t1.mydomain.com`) to the iodined server.\nIf you use BIND for your domain, add two lines like these to the zone file:\n\n\tt1\t\tIN\tNS\tt1ns.mydomain.com.\t\t; note the dot!\n\tt1ns\t\tIN\tA\t10.15.213.99\n\nThe `NS` line is all that's needed to route queries for the `t1` subdomain\nto the `t1ns` server. We use a short name for the subdomain, to keep as much\nspace as possible available for the data traffic. At the end of the `NS` line\nis the name of your `iodined` server. This can be any name, pointing anywhere,\nbut in this case it's easily kept in the same zone file. It must be a name\n(not an IP address), and that name itself must have an `A` record\n(not a `CNAME`).\n\nIf your `iodined` server has a dynamic IP, use a dynamic DNS provider. Simply\npoint the `NS` line to it, and leave the `A` line out:\n\n\tt1\t\tIN\tNS\tmyname.mydyndnsprovider.com.\t; note the dot!\n\nThen reload or restart your nameserver program. Now any DNS queries for\ndomains ending in `t1.mydomain.com` will be sent to your `iodined` server.\n\nFinally start `iodined` on your server. The first argument is the IP address\ninside the tunnel, which can be from any range that you don't use yet (for\nexample `192.168.99.1`), and the second argument is the assigned domain (in this\ncase `t1.mydomain.com`). Using the `-f` option will keep iodined running in the\nforeground, which helps when testing. iodined will open a virtual interface\n(\"tun device\"), and will also start listening for DNS queries on UDP port 53.\nEither enter a password on the commandline (`-P pass`) or after the server has\nstarted. Now everything is ready for the client.\n\nIf there is a chance you'll be using an iodine tunnel from unexpected\nenvironments, start `iodined` with a `-c` option.\nResulting commandline in this example situation:\n\n\t./iodined -f -c -P secretpassword 192.168.99.1 t1.mydomain.com\n\n### Client side\nAll the setup is done, just start `iodine`. It takes one or two arguments, the\nfirst is the local relaying DNS server (optional) and the second is the domain\nyou used (`t1.mydomain.com`). If you don't specify the first argument, the\nsystem's current DNS setting will be consulted.\n\nIf DNS queries are allowed to any computer, you can directly give the `iodined`\nserver's address as first argument (in the example: `t1ns.mydomain.com` or\n`10.15.213.99`). In that case, it may also happen that _any_ traffic is allowed\nto the DNS port (53 UDP) of any computer. Iodine will detect this, and switch\nto raw UDP tunneling if possible. To force DNS tunneling in any case, use the\n`-r` option (especially useful when testing within your own network).\n\nThe client's tunnel interface will get an IP close to the server's (in this\ncase `192.168.99.2` or `.3` etc.) and a suitable MTU. Enter the same password as\non the server either as commandline option or after the client has started.\nUsing the `-f` option will keep the iodine client running in the foreground.\n\nResulting commandline in this example situation, adding -r forces DNS tunneling\neven if raw UDP tunneling would be possible:\n\n\t./iodine -f -P secretpassword t1.mydomain.com\n\nFrom either side, you should now be able to ping the IP address on the other\nend of the tunnel. In this case, `ping 192.168.99.1` from the iodine client, and\n`192.168.99.2` from the iodine server.\n\n\n### MISC. INFO\n\n#### IPv6\nThe data inside the tunnel is IPv4 only.\n\nThe server listens to both IPv4 and IPv6 for incoming requests by default.\nUse options `-4` or `-6` to only listen on one protocol. Raw mode will be\nattempted on the same protocol as used for the login.\n\nThe client can use IPv4 or IPv6 nameservers to connect to iodined. The relay\nnameservers will translate between protocols automatically if needed. Use\noptions `-4` or `-6` to force the client to use a specific IP version for its DNS\nqueries.\n\nIf your server is listening on IPv6 and is reachable, add an AAAA record for it\nto your DNS setup. Extending the example above would look like this:\n\n\tt1\t\tIN\tNS\tt1ns.mydomain.com.\t\t; note the dot!\n\tt1ns\t\tIN\tA\t10.15.213.99\n\tt1ns\t\tIN\tAAAA\t2001:db8::1001:99\n\n#### Routing\nIt is possible to route all traffic through the DNS tunnel. To do this, first\nadd a host route to the nameserver used by iodine over the wired/wireless\ninterface with the default gateway as gateway. Then replace the default\ngateway with the iodined server's IP address inside the DNS tunnel, and\nconfigure the server to do NAT.\n\nHowever, note that the tunneled data traffic is not encrypted at all, and can\nbe read and changed by external parties relatively easily. For maximum\nsecurity, run a VPN through the DNS tunnel (=double tunneling), or use secure\nshell (SSH) access, possibly with port forwarding. The latter can also be used\nfor web browsing, when you run a web proxy (for example Privoxy) on your\nserver.\n\n#### Testing\nThe `iodined` server replies to `NS` requests sent for subdomains of the tunnel\ndomain. If your iodined subdomain is `t1.mydomain.com`, send a `NS` request for\n`foo123.t1.mydomain.com` to see if the delegation works.\n`dig` is a good tool for this:\n\n\t% dig -t NS foo123.t1.mydomain.com\n\tns.io.citronna.de.\n\nAlso, the iodined server will answer requests starting with 'z' for any of the\nsupported request types, for example:\n\n\tdig -t TXT z456.t1.mydomain.com\n\tdig -t SRV z456.t1.mydomain.com\n\tdig -t CNAME z456.t1.mydomain.com\n\nThe reply should look like garbled text in all these cases.\n\n#### Mac OS X\nOn Mac OS X 10.6 and later, iodine supports the native utun devices built into\nthe OS - use `-d utunX`.\n\n\nOperational info\n----------------\n\nThe DNS-response fragment size is normally autoprobed to get maximum bandwidth.\nTo force a specific value (and speed things up), use the `-m` option.\n\nThe DNS hostnames are normally used up to their maximum length, 255 characters.\nSome DNS relays have been found that answer full-length queries rather\nunreliably, giving widely varying (and mostly very bad) results of the\nfragment size autoprobe on repeated tries. In these cases, use the `-M` switch\nto reduce the DNS hostname length to, for example 200 characters, which makes\nthese DNS relays much more stable. This is also useful on some “de-optimizing”\nDNS relays that stuff the response with two full copies of the query, leaving\nvery little space for downstream data (also not capable of EDNS0). The `-M`\nswitch can trade some upstream bandwidth for downstream bandwidth. Note that\nthe minimum `-M` value is about 100, since the protocol can split packets (1200\nbytes max) in only 16 fragments, requiring at least 75 real data bytes per\nfragment.\n\nThe upstream data is sent gzipped encoded with Base32; or Base64 if the relay\nserver supports mixed case and `+` in domain names; or Base64u if `_` is\nsupported instead; or Base128 if high-byte-value characters are supported.\nThis upstream encoding is autodetected. The DNS protocol allows one query per\npacket, and one query can be max 256 chars. Each domain name part can be max\n63 chars. So your domain name and subdomain should be as short as possible to\nallow maximum upstream throughput.\n\nSeveral DNS request types are supported, with the `NULL` and `PRIVATE` types\nexpected to provide the largest downstream bandwidth. The `PRIVATE` type uses\nvalue 65399 in the private-use range. Other available types are `TXT`, `SRV`,\n`MX`, `CNAME` and `A` (returning `CNAME`), in decreasing bandwidth order.\nNormally the “best” request type is autodetected and used. However, DNS relays\nmay impose limits on for example NULL and TXT, making SRV or MX actually the best\nchoice. This is not autodetected, but can be forced using the `-T` option.\nIt is advisable to try various alternatives especially when the autodetected\nrequest type provides a downstream fragment size of less than 200 bytes.\n\nNote that `SRV`, `MX` and `A` (returning `CNAME`) queries may/will cause\nadditional lookups by \"smart\" caching nameservers to get an actual IP address,\nwhich may either slow down or fail completely.\n\nDNS responses for non-`NULL/PRIVATE` queries can be encoded with the same set of\ncodecs as upstream data. This is normally also autodetected, but no fully\nexhaustive tests are done, so some problems may not be noticed when selecting\nmore advanced codecs. In that case, you'll see failures/corruption in the\nfragment size autoprobe. In particular, several DNS relays have been found that\nchange replies returning hostnames (`SRV`, `MX`, `CNAME`, `A`) to lowercase only\nwhen that hostname exceeds ca. 180 characters. In these and similar cases, use\nthe `-O` option to try other downstream codecs; Base32 should always work.\n\nNormal operation now is for the server to _not_ answer a DNS request until\nthe next DNS request has come in, a.k.a. being “lazy”. This way, the server\nwill always have a DNS request handy when new downstream data has to be sent.\nThis greatly improves (interactive) performance and latency, and allows to\nslow down the quiescent ping requests to 4 second intervals by default, and\npossibly much slower. In fact, the main purpose of the pings now is to force\na reply to the previous ping, and prevent DNS server timeouts (usually at\nleast 5-10 seconds per RFC1035). Some DNS servers are more impatient and will\ngive SERVFAIL errors (timeouts) in periods without tunneled data traffic. All\ndata should still get through in these cases, but `iodine` will reduce the ping\ninterval to 1 second anyway (-I1) to reduce the number of error messages. This\nmay not help for very impatient DNS relays like `dnsadvantage.com` (ultradns),\nwhich time out in 1 second or even less. Yet data will still get trough, and\nyou can ignore the `SERVFAIL` errors.\n\nIf you are running on a local network without any DNS server in-between, try\n`-I 50` (iodine and iodined close the connection after 60 seconds of silence).\nThe only time you'll notice a slowdown, is when DNS reply packets go missing;\nthe `iodined` server then has to wait for a new ping to re-send the data. You can\nspeed this up by generating some upstream traffic (keypress, ping). If this\nhappens often, check your network for bottlenecks and/or run with `-I1`.\n\nThe delayed answering in lazy mode will cause some “carrier grade” commercial\nDNS relays to repeatedly re-send the same DNS query to the iodined server.\nIf the DNS relay is actually implemented as a pool of parallel servers,\nduplicate requests may even arrive from multiple sources. This effect will\nonly be visible in the network traffic at the `iodined` server, and will not\naffect the client's connection. Iodined will notice these duplicates, and send\nthe same answer (when its time has come) to both the original query and the\nlatest duplicate. After that, the full answer is cached for a short while.\nDelayed duplicates that arrive at the server even later, get a reply that the\niodine client will ignore (if it ever arrives there).\n\nIf you have problems, try inspecting the traffic with network monitoring tools\nlike tcpdump or ethereal/wireshark, and make sure that the relaying DNS server\nhas not cached the response. A cached error message could mean that you\nstarted the client before the server. The `-D` (and `-DD`) option on the server\ncan also show received and sent queries.\n\n\nTIPS & TRICKS\n-------------\n\nIf your port 53 is taken on a specific interface by an application that does\nnot use it, use `-p` on iodined to specify an alternate port (like `-p 5353`)\nand use for instance iptables (on Linux) to forward the traffic:\n\n\tiptables -t nat -A PREROUTING -i eth0 -p udp --dport 53 -j DNAT --to :5353\n\n(Sent in by Tom Schouten)\n\nIodined will reject data from clients that have not been active (data/pings)\nfor more than 60 seconds. Similarly, iodine will exit when no downstream\ndata has been received for 60 seconds. In case of a long network outage or\nsimilar, just restart iodine (re-login), possibly multiple times until you get\nyour old IP address back. Once that's done, just wait a while, and you'll\neventually see the tunneled TCP traffic continue to flow from where it left\noff before the outage.\n\nWith the introduction of the downstream packet queue in the server, its memory\nusage has increased with several megabytes in the default configuration.\nFor use in low-memory environments (e.g. running on your DSL router), you can\ndecrease USERS and undefine OUTPACKETQ_LEN in user.h without any ill conse-\nquence, assuming at most one client will be connected at any time. A small\nDNSCACHE_LEN is still advised, preferably 2 or higher, however you can also\nundefine it to save a few more kilobytes.\n\nOne iodine server can handle multiple domains. Set up different NS records\non the same domain all pointing to the same host, and use a wildcard\nat the start of the topdomain argument (example `*.mydomain.com`). iodine\nwill accept tunnel traffic for all domains matching that pattern. The wildcard\nhas to be at the start of the topdomain argument and be followed by a dot.\n\n\nPERFORMANCE\n-----------\n\nThis section tabulates some performance measurements. To view properly, use\na fixed-width font like Courier.\n\nMeasurements were done in protocol 00000502 in lazy mode; upstream encoding\nalways Base128; `iodine -M255`; `iodined -m1130`. Network conditions were not\nextremely favorable; results are not benchmarks but a realistic indication of\nreal-world performance that can be expected in similar situations.\n\nUpstream/downstream throughput was measured by `scp`'ing a file previously\nread from `/dev/urandom` (i.e. incompressible), and measuring size with\n`ls -l ; sleep 30 ; ls -l` on a separate non-tunneled connection. Given the\nlarge `scp` block size of 16 kB, this gives a resolution of 4.3 kbit/s, which\nexplains why some values are exactly equal.\nPing round-trip times measured with `ping -c100`, presented are average rtt\nand mean deviation (indicating spread around the average), in milliseconds.\n\n\n### Situation 1: `Laptop  ->   Wifi AP   ->  Home server  ->  DSL provider  ->  Datacenter`\n\n\t iodine    DNS \"relay\"        bind9           DNS cache        iodined\n\n\t                        downstr.  upstream downstr.  ping-up       ping-down\n\t                        fragsize   kbit/s   kbit/s  avg +/-mdev   avg +/-mdev\n\t-----------------------------------------------------------------------------\n\n\tiodine -> Wifi AP :53\n\t  -Tnull (= -Oraw)           982    43.6    131.0   28.0    4.6   26.8    3.4\n\n\tiodine -> Home server :53\n\t  -Tnull (= -Oraw)          1174    48.0    305.8   26.6    5.0   26.9    8.4\n\n\tiodine -> DSL provider :53\n\t  -Tnull (= -Oraw)          1174    56.7    367.0   20.6    3.1   21.2    4.4\n\t  -Ttxt -Obase32             730    56.7    174.7*\n\t  -Ttxt -Obase64             874    56.7    174.7\n\t  -Ttxt -Obase128           1018    56.7    174.7\n\t  -Ttxt -Oraw               1162    56.7    358.2\n\t  -Tsrv -Obase128            910    56.7    174.7\n\t  -Tcname -Obase32           151    56.7     43.6\n\t  -Tcname -Obase128          212    56.7     52.4\n\n\tiodine -> DSL provider :53\n\t  wired (no Wifi) -Tnull    1174    74.2    585.4   20.2    5.6   19.6    3.4\n\n\t [174.7* : these all have 2frag/packet]\n\n\n### Situation 2: `Laptop  ->  Wifi+vpn / wired  ->  Home server`\n\n\t iodine                            iodined\n\n\t                        downstr.  upstream downstr.  ping-up       ping-down\n\t                        fragsize   kbit/s   kbit/s  avg +/-mdev   avg +/-mdev\n\t-----------------------------------------------------------------------------\n\n\twifi + openvpn  -Tnull      1186   166.0   1022.3    6.3    1.3    6.6    1.6\n\n\twired  -Tnull               1186   677.2   2464.1    1.3    0.2    1.3    0.1\n\n\n### Notes\n\nPerformance is strongly coupled to low ping times, as iodine requires\nconfirmation for every data fragment before moving on to the next. Allowing\nmultiple fragments in-flight like TCP could possibly increase performance,\nbut it would likely cause serious overload for the intermediary DNS servers.\nThe current protocol scales performance with DNS responsivity, since the\nDNS servers are on average handling at most one DNS request per client.\n\n\nPORTABILITY\n-----------\n\niodine has been tested on Linux (arm, ia64, x86, AMD64 and SPARC64), FreeBSD\n(ia64, x86), OpenBSD (x86), NetBSD (x86), MacOS X (ppc and x86, with\n<http://tuntaposx.sourceforge.net/>). and Windows (with OpenVPN TAP32 driver, see\nwin32 readme file).  It should be easy to port to other unix-like systems that\nhave TUN/TAP tunneling support. Let us know if you get it to run on other\nplatforms.\n\n\nTHE NAME\n--------\n\nThe name iodine was chosen since it starts with IOD (IP Over DNS) and since\niodine has atomic number 53, which happens to be the DNS port number.\n\n\nTHANKS\n------\n\n- To kuxien for FreeBSD and OS X testing\n- To poplix for code audit\n\n\nAUTHORS & LICENSE\n-----------------\n\nCopyright (c) 2006-2014 Erik Ekman <yarrick@kryo.se>, 2006-2009 Bjorn\nAndersson <flex@kryo.se>. Also major contributions by Anne Bezemer.\n\nPermission to use, copy, modify, and/or distribute this software for any purpose\nwith or without fee is hereby granted, provided that the above copyright notice\nand this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n\n\nMD5 implementation by L. Peter Deutsch (license and source in `src/md5.[ch]`)\nCopyright (C) 1999, 2000, 2002 Aladdin Enterprises.  All rights reserved.\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}