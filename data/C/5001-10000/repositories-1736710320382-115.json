{
  "metadata": {
    "timestamp": 1736710320382,
    "page": 115,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "machyve/xhyve",
      "stars": 6440,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0615234375,
          "content": "build\nDerivedData\n.DS_Store\n*~\n*.rej\n*.orig\ncscope.*\ntags\nTAGS\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.5439453125,
          "content": "Copyright (c) 2015-2018 xhyve developers\nAdditional copyrights are declared on individual source files\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nThe views and conclusions contained in the software and documentation are those\nof the authors and should not be interpreted as representing official policies,\neither expressed or implied, of the xhyve project.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.1103515625,
          "content": "GIT_VERSION := $(shell git describe --abbrev=6 --dirty --always --tags)\n\nifeq ($V, 1)\n\tVERBOSE =\nelse\n\tVERBOSE = @\nendif\n\ninclude config.mk\n\nVMM_SRC := \\\n\tsrc/vmm/x86.c \\\n\tsrc/vmm/vmm.c \\\n\tsrc/vmm/vmm_host.c \\\n\tsrc/vmm/vmm_mem.c \\\n\tsrc/vmm/vmm_lapic.c \\\n\tsrc/vmm/vmm_instruction_emul.c \\\n\tsrc/vmm/vmm_ioport.c \\\n\tsrc/vmm/vmm_callout.c \\\n\tsrc/vmm/vmm_stat.c \\\n\tsrc/vmm/vmm_util.c \\\n\tsrc/vmm/vmm_api.c \\\n\tsrc/vmm/intel/vmx.c \\\n\tsrc/vmm/intel/vmx_msr.c \\\n\tsrc/vmm/intel/vmcs.c \\\n\tsrc/vmm/io/vatpic.c \\\n\tsrc/vmm/io/vatpit.c \\\n\tsrc/vmm/io/vhpet.c \\\n\tsrc/vmm/io/vioapic.c \\\n\tsrc/vmm/io/vlapic.c \\\n\tsrc/vmm/io/vpmtmr.c \\\n\tsrc/vmm/io/vrtc.c\n\nXHYVE_SRC := \\\n\tsrc/acpitbl.c \\\n\tsrc/atkbdc.c \\\n\tsrc/bhyvegc.c \\\n\tsrc/block_if.c \\\n\tsrc/bootrom.c \\\n\tsrc/console.c \\\n\tsrc/consport.c \\\n\tsrc/dbgport.c \\\n\tsrc/inout.c \\\n\tsrc/ioapic.c \\\n\tsrc/mem.c \\\n\tsrc/mevent.c \\\n\tsrc/mptbl.c \\\n\tsrc/pci_ahci.c \\\n\tsrc/pci_e82545.c \\\n\tsrc/pci_emul.c \\\n\tsrc/pci_fbuf.c \\\n\tsrc/pci_hostbridge.c \\\n\tsrc/pci_irq.c \\\n\tsrc/pci_lpc.c \\\n\tsrc/pci_uart.c \\\n\tsrc/pci_virtio_block.c \\\n\tsrc/pci_virtio_net_tap.c \\\n\tsrc/pci_virtio_net_vmnet.c \\\n\tsrc/pci_virtio_rnd.c \\\n\tsrc/pm.c \\\n\tsrc/post.c \\\n\tsrc/ps2kbd.c \\\n\tsrc/ps2mouse.c \\\n\tsrc/rtc.c \\\n\tsrc/rfb.c \\\n\tsrc/smbiostbl.c \\\n\tsrc/sockstream.c \\\n\tsrc/task_switch.c \\\n\tsrc/uart_emul.c \\\n\tsrc/xhyve.c \\\n\tsrc/vga.c \\\n\tsrc/virtio.c \\\n\tsrc/xmsr.c\n\nFIRMWARE_SRC := \\\n\tsrc/firmware/kexec.c \\\n\tsrc/firmware/fbsd.c\n\nSRC := \\\n\t$(VMM_SRC) \\\n\t$(XHYVE_SRC) \\\n\t$(FIRMWARE_SRC)\n\nOBJ := $(SRC:src/%.c=build/%.o)\nDEP := $(OBJ:%.o=%.d)\nINC := -Iinclude\n\nCFLAGS += -DVERSION=\\\"$(GIT_VERSION)\\\"\n\nTARGET = build/xhyve\n\nall: $(TARGET) | build\n\n.PHONY: clean all\n.SUFFIXES:\n\n-include $(DEP)\n\nbuild:\n\t@mkdir -p build\n\nbuild/%.o: src/%.c\n\t@echo cc $<\n\t@mkdir -p $(dir $@)\n\t$(VERBOSE) $(ENV) $(CC) $(CFLAGS) $(INC) $(DEF) -MMD -MT $@ -MF build/$*.d -o $@ -c $<\n\n$(TARGET).sym: $(OBJ)\n\t@echo ld $(notdir $@)\n\t$(VERBOSE) $(ENV) $(LD) $(LDFLAGS) -Xlinker $(TARGET).lto.o -o $@ $(OBJ)\n\t@echo dsym $(notdir $(TARGET).dSYM)\n\t$(VERBOSE) $(ENV) $(DSYM) $@ -o $(TARGET).dSYM\n\n$(TARGET): $(TARGET).sym\n\t@echo strip $(notdir $@)\n\t$(VERBOSE) $(ENV) $(STRIP) $(TARGET).sym -o $@\n\nclean:\n\t@rm -rf build\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.4013671875,
          "content": "# [xhyve.xyz](http://www.xhyve.xyz)\n\n![](./xhyve_logo.png)\n<!-- https://thenounproject.com/term/squirrel/57718/ -->\n\nAbout\n-----\n\nThe *xhyve hypervisor* is a port of [bhyve](http://www.bhyve.org) to macOS. It is built on top of [Hypervisor.framework](https://developer.apple.com/library/mac/documentation/DriversKernelHardware/Reference/Hypervisor/index.html) in OS X 10.10 Yosemite and higher, runs entirely in userspace, and has no other dependencies. It can run FreeBSD, some Linux distributions, and Windows 10 and may gain support for other guest operating systems in the future.\n\nLicense: [BSD-2-Clause](LICENSE)\n\nIntroduction: [http://www.pagetable.com/?p=831](http://www.pagetable.com/?p=831)\n\nRequirements\n------------\n\n* OS X 10.10.3 Yosemite or later\n* a 2010 or later Mac (i.e. a CPU that supports EPT: `sysctl kern.hv_support` = 1)\n\nInstallation\n------------\n\nIf you have homebrew, then simply:\n\n    $ brew update\n    $ brew install --HEAD xhyve\n\nThe `--HEAD` in the brew command ensures that you always get the latest changes, even if the homebrew database is not yet updated. If for any reason you don't want that simply do `brew install xhyve` .\n\nIf you have MacPorts, then simply:\n\n    $ sudo port selfupdate\n    $ sudo port install xhyve\n\nMacPorts is up to date with the GitHub ref listed in the port info\n\n    $ port info xhyve\n    xhyve @20170117 (emulators)\n    ...\n\nOtherwise:\n\nBuilding\n--------\n    $ git clone https://github.com/machyve/xhyve.git\n    $ cd xhyve\n    $ xcodebuild\n\nThe resulting binary will be in build/Release/xhyve\n\nUsage\n-----\n\n    $ xhyve -h\n\nSee below for steps to boot various OSs\n\nWhat is *bhyve*?\n--------------\n\n*bhyve* is the FreeBSD hypervisor, roughly analogous to KVM + QEMU on Linux. It has a focus on simplicity.\n\nIt exposes the following peripherals to virtual machines:\n\n  - Local x(2)APIC\n  - IO-APIC\n  - 8259A PIC\n  - 8253/8254 PIT\n  - HPET\n  - PM Timer\n  - RTC\n  - PS/2 Keyboard and Mouse (via VNC)\n  - PCI\n    - host bridge\n    - passthrough\n    - UART\n    - AHCI (i.e. HDD and CD)\n    - VirtIO block device\n    - VirtIO networking\n    - VirtIO RNG\n    - Intel e1000 (aka e82545)\n    - VGA/Framebuffer (exposed with a minimal VNC server)\n    - XHCI USB support with one device defined - a tablet for Windows guest support\n\n*bhyve* architecture\n------------------\n                                                           Linux\n               I/O        VM control       FreeBSD        NetBSD\n                                                          OpenBSD\n             |     A        |     A           |              |\n             V     |        V     |           V              V\n         +-------------++-------------++-------------++-------------+\n         |             ||             ||             ||             |\n         |    bhyve    ||  bhyvectl   ||  bhyveload  || grub2-bhyve |\n         |             ||             ||             ||             |\n         |             ||             ||             ||             |\n         +-------------++-------------++-------------++-------------+\n         +----------------------------------------------------------+\n         |                        libvmmapi                         |\n         +----------------------------------------------------------+\n                                       A\n                                       |                         user\n         ------------------------------â”¼------------------------------\n                                       | ioctl         FreeBSD kernel\n                                       V\n                         +----------------------------+\n                         |        VMX/SVM host        |\n                         |       VMX/SVM guest        |\n                         |   VMX/SVM nested paging    |\n                         |           Timers           |\n                         |         Interrupts         |\n                         +----------------------------+\n                          vmm.ko\n\n\n**vmm.ko**\n\nThe *bhyve* FreeBSD kernel module. Manages VM and vCPU objects, the guest physical address space and handles guest interaction with PIC, PIT, HPET, PM Timer, x(2)APIC and I/O-APIC. Contains a minimal x86 emulator to decode guest MMIO. Executes the two innermost vCPU runloops (VMX/SVM and interrupts/timers/paging). Has backends for Intel VMX and AMD SVM. Provides an ioctl and mmap API to userspace.\n\n**libvmmapi**\n\nThin abstraction layer between the vmm.ko ioctl interface and the userspace C API.\n\n**bhyve**\n\nThe userspace *bhyve* component (kind of a very light-weight QEMU) that executes virtual machines. Runs the guest I/O vCPU runloops. Manages ACPI, PCI and all non in-kernel devices. Interacts with vmm.ko through libvmmapi.\n\n**bhyvectl**\n\nSomewhat superfluous utility to introspect and manage the life cycle of virtual machines. Virtual machines and vCPUs can exist as kernel objects independently of a *bhyve* host process. Typically used to delete VM objects after use. Odd architectural choice.\n\n**bhyveload**\n\nUserspace port of the FreeBSD bootloader. This is a cumbersome workaround to bootstrap a FreeBSD guest operating system without using firmware. It creates a VM object, loads the FreeBSD kernel into guest memory, sets up the initial vCPU state and then exits. Only then a VM can be executed by *bhyve*.\n\n**grub2-bhyve**\n\nPerforms the same function as bhyveload but is a userspace port of [GRUB2](http://github.com/grehan-freebsd/grub2-bhyve). It is used to bootstrap guest operating systems other than FreeBSD, i.e. Linux, OpenBSD and NetBSD.\n\n\n*xhyve* architecture\n------------------\n        +----------------------------------------------------------+\n        | xhyve                                                    |\n        |                                                          |\n        |                            I/O                           |\n        |                                                          |\n        |                                                          |\n        |                                                          |\n        |+--------------------------------------------------------+|\n        ||  vmm                   VMX guest                       ||\n        ||                          Timers                        ||\n        ||                        Interrupts                      ||\n        |+--------------------------------------------------------+|\n        +----------------------------------------------------------+\n        +----------------------------------------------------------+\n        |                   Hypervisor.framework                   |\n        +----------------------------------------------------------+\n                                      A\n                                      |                         user\n        ------------------------------â”¼------------------------------\n                                      |syscall            xnu kernel\n                                      V\n        \n                                   VMX host\n                               VMX nested paging\n\n\n*xhyve* shares most of the code with *bhyve* but is architecturally very different. Hypervisor.framework provides an interface to the VMX VMCS guest state and a safe subset of the VMCS control fields, thus making userspace hypervisors without any additional kernel extensions possible. The VMX host state and all aspects of nested paging are handled by the macOS kernel, you can manage the guest physical address space simply through mapping of regions of your own address space.\n\n*xhyve* is equivalent to the *bhyve* process but gains a subset of a userspace port of the vmm kernel module. SVM, PCI passthrough and the VMX host and EPT aspects are dropped. The vmm component provides a libvmmapi compatible interface to *xhyve*. Hypervisor.framework seems to enforce a strict 1:1 relationship between a host process/VM and host thread/vCPU, that means VMs and vCPUs can only be interacted with by the processes and threads that created them. Therefore, unlike *bhyve*, *xhyve* needs to adhere to a single process model. Multiple virtual machines can be created by launching multiple instances of *xhyve*. *xhyve* retains most of the *bhyve* command line interface.\n\n*bhyvectl*, *bhyveload* and *grub2-bhyve* are incompatible with a single process model and are dropped. *xhyve* supports the Linux [kexec protocol](http://www.kernel.org/doc/Documentation/x86/boot.txt), a very simple and straightforward way to bootstrap a Linux kernel. It takes a bzImage and optionally initrd image and kernel parameter string as input.\n\n*xhyve* can now boot an OS via EFI. The BSD-licensed TianoCore EFI built for *bhyve* can be used to boot Windows and other OSs.\n\nNetworking\n----------\nIf you want the same IP address across VM reboots, assign a UUID to a particular VM:\n\n    $ xhyve [-U uuid]\n\n**Optional:**\n\nIf you need more advanced networking and already have a configured [TAP](http://tuntaposx.sourceforge.net) device you can use it with:\n\n\tvirtio-tap,tapX\n\ninstead of:\n\n    virtio-net\n\nWhere *X* is your tap device, i.e. */dev/tapX*.\n\nBooting TinyCoreLinux\n---------------------\n\nEverything needed to boot TinyCoreLinux is included with *xhyve*.\n\n**Steps:**\n\n- From Terminal, launch the `xhyverun-tinycorelinux.sh` script in your xhyve directory.\n\nBooting FreeBSD (via userboot)\n------------------------------\n**Requirements:**\n\n- A FreeBSD iso image. This can be downloaded from FreeBSD.org\n\n**Steps:**\n\n- Build *xhyve* with `make` (type `make` in Terminal from your *xhyve* directory) - this will build an unsigned copy of *xhyve*\n- `mkfile 5g FreeBSD.dmg` - Create a blank image to install to\n- Use your favorite text editor to edit the xhyverun-freebsd.sh script and properly set the paths to the iso and disk image\n- Run the script from Terminal with sudo: `sudo ./xhyverun-freebsd.sh` and enter your admin password\n\n**Known Issues:**\n- This will only work with an unsigned build of *xhyve* - See *Codesigning/Entitlements* in **Issues**\n\n\nBooting Windows (via EFI)\n-------------------------\n\nNow that *xhyve* has support for a framebuffer, EFI and the e1000 NIC, *xhyve* can now run Windows in a VM. \n\n**Requirements:**\n\n- A Windows 10 iso image. This can be downloaded from Microsoft: [Windows 10 iso](https://www.microsoft.com/en-us/software-download/windows10ISO)\n- A license key for Windows.\n- The *bhyve* EFI - this can be downloaded **in FreeBSD** via `pkg install bhyve-firmware` - the EFI will be named \"BHYVE_UEFI.fd\" and installed into `/usr/local/share/uefi-firmware`. Copy that file to macOS.\n- A VNC client - these vary greatly in speed and willingness to connect to the fairly minimal VNC server built into the framebuffer code.\n\n**Steps:**\n\n- `mkfile 20g Windows.dmg` - Create a blank image to install to\n- Use your favorite text editor to edit the `xhyverun-windows.sh` script and properly set the paths to the iso, disk image and BHYVE_UEFI.fd\n- From Terminal, launch the modified `xhyverun-windows.sh` script in your xhyve directory.\n- Connect the VNC client to 127.0.0.1:29000\n\n**Known Issues:**\n\n- Windows does not recognize more than one CPU and the CPU device is missing from Device Manager\n- The e1000 emulation works, but is incomplete - network statistics don't appear in Task Manager or Resource Monitor\n- Mouse positioning in VNC is wacky - this is due to the nature of how mouse deltas are passed to the VM and what Windows does to them afterwards. Once Windows is installed, one can enable remote connection and connect with Microsoft Remote Desktop instead of the VNC client.\n\nIssues\n------\n\n### Virtual Box\nIf you are, or were, running any version of VirtualBox, prior to 4.3.30 or 5.0, and attempt to run *xhyve*, your system will immediately crash as a kernel panic is triggered. This is due to a VirtualBox bug (that got fixed in newest VirtualBox versions) as VirtualBox wasn't playing nice with OSX's Hypervisor.framework used by *xhyve*.\n\nTo get around this you either have to update to newest VirtualBox 4.3 or 5.0 or, if you for some reason are unable to update, to reboot your Mac after using VirtualBox and before attempting to use *xhyve*. (see issues [#5](https://github.com/mist64/xhyve/issues/5) and [#9](https://github.com/mist64/xhyve/issues/9) for the full context)\n\n### Code signing/Entitlements\nmacOS limits access to the networking API (vmnet) to builds that are code signed and have the appropriate entitlement. The code signing/entitlement requirement can be bypassed by running *xhyve* as root (via `sudo`). A code signed build cannot run FreeBSD via the `userboot.so` bootloader as that requires loading and executing code that is outside the code signature (even as root). Building *xhyve* via `xcodebuild` signs the build. Building *xhyve* via `make` does not.\n\nTODO\n----\n\n- vmm:\n  - enable APIC access page to speed up APIC emulation (**performance**)\n  - enable x2APIC MSRs (even faster) (**performance**)\n  - vmm_callout:\n      - is a quick'n'dirty implementation of the FreeBSD kernel callout mechanism\n      - seems to be racy\n      - fix races or perhaps replace with something better\n      - use per vCPU timer event thread (**performance**)?\n      - use hardware VMX preemption timer instead of `pthread_cond_wait` (**performance**)\n  - some 32-bit guests are broken (support PAE paging in VMCS)\n  - PCID guest support (**performance**)\n- block_if:\n  - macOS does not support `preadv`/`pwritev`, we need to serialize reads and writes for the time being until we find a better solution. (**performance**)\n  - support block devices other than plain files\n- virtio_net:\n  - unify TAP and vmnet backends\n  - vmnet: send/receive more than a single packet at a time (**performance**)\n- virtio_rnd:\n  - is untested\n- e1000\n  - is untested beyond basically working with Windows\n  - fix missing statistics (see Booting Windows)\n  - add support for TAP\n  - tune performance (**performance**)\n- framebuffer\n  - is untested beyond basically working with Windows\n  - VNC: add support for more modern connections (ssh) to improve security and compatibility with more clients\n  - add an option to share the framebuffer with a client UI app (specifics need defining) (**performance**)\n- UEFI\n  - is untested beyond basically working with Windows\n  - Needs testing against various OSs\n  - figure out why Windows doesn't properly see more than one CPU (might also involve ACPI)\n- XHCI\n  - Move XHCI support and the tablet device to *xhyve*\n- remove explicit state transitions:\n  - since only the owning task/thread can modify the VM/vCPUs a lot of the synchronization might be unnecessary (**performance**)\n- performance, performance and performance\n- remove vestigial code, cleanup\n"
        },
        {
          "name": "config.mk",
          "type": "blob",
          "size": 2.033203125,
          "content": "###############################################################################\n# Config                                                                      #\n#                                                                             #\n# [XHYVE_CONFIG_ASSERT] VMM asserts (disable for release builds?)             #\n# [XHYVE_CONFIG_TRACE]  VMM event tracer                                      #\n# [XHYVE_CONFIG_STATS]  VMM event profiler                                    #\n###############################################################################\n\nDEFINES := \\\n  -DXHYVE_CONFIG_ASSERT\n\n###############################################################################\n# Toolchain                                                                   #\n###############################################################################\n\nCC := clang\nAS := clang\nLD := clang\nSTRIP := strip\nDSYM := dsymutil\n\nENV := \\\n  LANG=en_US.US-ASCII\n\n###############################################################################\n# CFLAGS                                                                      #\n###############################################################################\n\nCFLAGS_OPT := \\\n  -Os \\\n  -flto \\\n  -fstrict-aliasing\n\nCFLAGS_WARN := \\\n  -Weverything \\\n  -Werror \\\n  -Wno-unknown-warning-option \\\n  -Wno-reserved-id-macro \\\n  -pedantic\n\nCFLAGS_DIAG := \\\n  -fmessage-length=152 \\\n  -fdiagnostics-show-note-include-stack \\\n  -fmacro-backtrace-limit=0 \\\n  -fcolor-diagnostics\n\nCFLAGS_DBG := \\\n  -g\n\nCFLAGS := \\\n  -arch x86_64 \\\n  -x c \\\n  -std=c11 \\\n  -fno-common \\\n  -fvisibility=hidden \\\n  $(DEFINES) \\\n  $(CFLAGS_OPT) \\\n  $(CFLAGS_WARN) \\\n  $(CFLAGS_DIAG) \\\n  $(CFLAGS_DBG)\n\n###############################################################################\n# LDFLAGS                                                                     #\n###############################################################################\n\nLDFLAGS_DBG := \\\n  -Xlinker -object_path_lto\n\nLDFLAGS := \\\n  -arch x86_64 \\\n  -framework Hypervisor \\\n  -framework vmnet \\\n  -lz \\\n  $(LDFLAGS_DBG)\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "xcconfigs",
          "type": "tree",
          "content": null
        },
        {
          "name": "xcscripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "xhyve.1",
          "type": "blob",
          "size": 8.96484375,
          "content": ".\\\" Copyright (c) 2013 Peter Grehan\n.\\\" Copyright (c) 2015 xhyve developers\n.\\\" All rights reserved.\n.\\\"\n.\\\" Redistribution and use in source and binary forms, with or without\n.\\\" modification, are permitted provided that the following conditions\n.\\\" are met:\n.\\\" 1. Redistributions of source code must retain the above copyright\n.\\\"    notice, this list of conditions and the following disclaimer.\n.\\\" 2. Redistributions in binary form must reproduce the above copyright\n.\\\"    notice, this list of conditions and the following disclaimer in the\n.\\\"    documentation and/or other materials provided with the distribution.\n.\\\"\n.\\\" THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND\n.\\\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n.\\\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n.\\\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE\n.\\\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n.\\\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n.\\\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n.\\\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n.\\\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n.\\\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n.\\\" SUCH DAMAGE.\n.\\\"\n.Dd September 11, 2015\n.Dt XHYVE 1\n.Os\n.Sh NAME\n.Nm xhyve\n.Nd \"run a guest operating system inside a virtual machine\"\n.Sh SYNOPSIS\n.Nm\n.Op Fl behuwxACHPWY\n.Op Fl c Ar numcpus\n.Op Fl g Ar gdbport\n.Op Fl l Ar lpcdev Ns Op , Ns Ar conf\n.Op Fl m Ar size Ns Op Ar K|k|M|m|G|g|T|t\n.Op Fl p Ar vcpu:hostcpu\n.Op Fl s Ar slot,emulation Ns Op , Ns Ar conf\n.Op Fl U Ar uuid\n.Op Fl f Ar firmware\n.Sh DESCRIPTION\n.Nm\nis a hypervisor that runs guest operating systems inside a\nvirtual machine.\n.Pp\nParameters such as the number of virtual CPUs, amount of guest memory, and\nI/O connectivity can be specified with command-line parameters.\n.Pp\n.Nm\nruns until the guest operating system reboots or an unhandled hypervisor\nexit is detected.\n.Sh OPTIONS\n.Bl -tag -width 10n\n.It Fl A\nGenerate ACPI tables.\nRequired for\n.Fx Ns /amd64\nguests.\n.It Fl b\nEnable a low-level console device supported by\n.Fx\nkernels compiled with\n.Cd \"device bvmconsole\" .\nThis option will be deprecated in a future version.\n.It Fl c Ar numcpus\nNumber of guest virtual CPUs.\nThe default is 1 and the maximum is 16.\n.It Fl C\nInclude guest memory in core file.\n.It Fl e\nForce\n.Nm\nto exit when a guest issues an access to an I/O port that is not emulated.\nThis is intended for debug purposes.\n.It Fl g Ar gdbport\nFor\n.Fx\nkernels compiled with\n.Cd \"device bvmdebug\" ,\nallow a remote kernel kgdb to be relayed to the guest kernel gdb stub\nvia a local IPv4 address and this port.\nThis option will be deprecated in a future version.\n.It Fl h\nPrint help message and exit.\n.It Fl H\nYield the virtual CPU thread when a HLT instruction is detected.\nIf this option is not specified, virtual CPUs will use 100% of a host CPU.\n.It Fl l Ar lpcdev Ns Op , Ns Ar conf\nAllow devices behind the LPC PCI-ISA bridge to be configured.\nThe only supported devices are the TTY-class devices\n.Ar com1\nand\n.Ar com2\nand the boot ROM device\n.Ar bootrom .\n.It Fl m Ar size Ns Op Ar K|k|M|m|G|g|T|t\nGuest physical memory size in bytes.\n.Pp\nThe size argument may be suffixed with one of K, M, G or T (either upper\nor lower case) to indicate a multiple of kilobytes, megabytes, gigabytes,\nor terabytes.\nIf no suffix is given, the value is assumed to be in megabytes.\n.It Fl p Ar vcpu:hostcpu\nPin guest's virtual CPU\n.Em vcpu\nto\n.Em hostcpu .\n.It Fl P\nForce the guest virtual CPU to exit when a PAUSE instruction is detected.\n.It Fl s Ar slot,emulation Ns Op , Ns Ar conf\nConfigure a virtual PCI slot and function.\n.Pp\n.Nm\nprovides PCI bus emulation and virtual devices that can be attached to\nslots on the bus.\nThere are 32 available slots, with the option of providing up to 8 functions\nper slot.\n.Bl -tag -width 10n\n.It Ar slot\n.Ar pcislot[:function]\n.Ar bus:pcislot:function\n.Pp\nThe\n.Ar pcislot\nvalue is 0 to 31.\nThe optional\n.Ar function\nvalue is 0 to 7.\nThe optional\n.Ar bus\nvalue is 0 to 255.\nIf not specified, the\n.Ar function\nvalue defaults to 0.\nIf not specified, the\n.Ar bus\nvalue defaults to 0.\n.It Ar emulation\n.Bl -tag -width 10n\n.It Li hostbridge | Li amd_hostbridge\n.Pp\nProvide a simple host bridge.\nThis is usually configured at slot 0, and is required by most guest\noperating systems.\nThe\n.Li amd_hostbridge\nemulation is identical but uses a PCI vendor ID of\n.Li AMD .\n.It Li passthru\nPCI pass-through device.\n.It Li virtio-net\nVirtio network interface.\n.It Li virtio-blk\nVirtio block storage interface.\n.It Li virtio-rnd\nVirtio RNG interface.\n.It Li ahci-cd\nAHCI controller attached to an ATAPI CD/DVD.\n.It Li ahci-hd\nAHCI controller attached to a SATA hard-drive.\n.It Li uart\nPCI 16550 serial device.\n.It Li lpc\nLPC PCI-ISA bridge with COM1 and COM2 16550 serial ports and a boot ROM.\nThe LPC bridge emulation can only be configured on bus 0.\n.El\n.It Op Ar conf\nThis optional parameter describes the backend for device emulations.\nIf\n.Ar conf\nis not specified, the device emulation has no backend and can be\nconsidered unconnected.\n.Pp\nNetwork devices:\n.Bl -tag -width 10n\n.It Ar tapN Ns Op , Ns Ar mac=xx:xx:xx:xx:xx:xx\n.It Ar vmnetN Ns Op , Ns Ar mac=xx:xx:xx:xx:xx:xx\n.Pp\nIf\n.Ar mac\nis not specified, the MAC address is derived from a fixed OUI and the\nremaining bytes from an MD5 hash of the slot and function numbers and\nthe device name.\n.Pp\nThe MAC address is an ASCII string in\n.Xr ethers 5\nformat.\n.El\n.Pp\nBlock storage devices:\n.Bl -tag -width 10n\n.It Pa /filename Ns Oo , Ns Ar block-device-options Oc\n.It Pa /dev/xxx Ns Oo , Ns Ar block-device-options Oc\n.El\n.Pp\nThe\n.Ar block-device-options\nare:\n.Bl -tag -width 8n\n.It Li nocache\nOpen the file with\n.Dv O_DIRECT .\n.It Li direct\nOpen the file using\n.Dv O_SYNC .\n.It Li ro\nForce the file to be opened read-only.\n.It Li sectorsize= Ns Ar logical Ns Oo / Ns Ar physical Oc\nSpecify the logical and physical sector sizes of the emulated disk.\nThe physical sector size is optional and is equal to the logical sector size\nif not explicitly specified.\n.El\n.Pp\nTTY devices:\n.Bl -tag -width 10n\n.It Li stdio\nConnect the serial port to the standard input and output of\nthe\n.Nm\nprocess.\n.It Pa /dev/xxx\nUse the host TTY device for serial port I/O.\n.El\n.Pp\nBoot ROM device:\n.Bl -tag -width 10n\n.It Pa romfile\nMap\n.Ar romfile\nin the guest address space reserved for boot firmware.\n.El\n.Pp\nPass-through devices:\n.Bl -tag -width 10n\n.It Ns Ar slot Ns / Ns Ar bus Ns / Ns Ar function\nConnect to a PCI device on the host at the selector described by\n.Ar slot ,\n.Ar bus ,\nand\n.Ar function\nnumbers.\n.El\n.Pp\nThe host device must have been reserved at boot-time using the\n.Va pptdev\nloader variable as described in\n.Xr vmm 4 .\n.El\n.It Fl u\nRTC keeps UTC time.\n.It Fl U Ar uuid\nSet the universally unique identifier\n.Pq UUID\nin the guest's System Management BIOS System Information structure.\nBy default a UUID is generated from the host's hostname and\n.Ar vmname .\n.It Fl w\nIgnore accesses to unimplemented Model Specific Registers (MSRs).\nThis is intended for debug purposes.\n.It Fl W\nForce virtio PCI device emulations to use MSI interrupts instead of MSI-X\ninterrupts.\n.It Fl x\nThe guest's local APIC is configured in x2APIC mode.\n.It Fl Y\nDisable MPtable generation.\n.It Fl f Ar firmware\nTODO Explain this!\n.El\n.Sh EXAMPLES\nTo run a virtual machine with 1GB of memory, two virtual CPUs, a virtio\nblock device backed by the\n.Pa /my/image\nfilesystem image, and a serial port for the console:\n.Bd -literal -offset indent\nxhyve -c 2 -s 0,hostbridge -s 1,lpc -s 2,virtio-blk,/my/image \\\\\n  -l com1,stdio -A -H -P -m 1G \\\\\n  -f kexec,vmlinuz,initrd.gz,\"earlyprintk=serial console=ttyS0\"\n.Ed\n.Pp\nRun a 24GB single-CPU virtual machine with three network ports, one of which\nhas a MAC address specified:\n.Bd -literal -offset indent\nxhyve -s 0,hostbridge -s 1,lpc -s 2:0,virtio-net,tap0 \\\\\n  -s 2:1,virtio-net,tap1 \\\\\n  -s 2:2,virtio-net,tap2,mac=00:be:fa:76:45:00 \\\\\n  -s 3,virtio-blk,/my/image -l com1,stdio \\\\\n  -A -H -P -m 24G -f fbsd,userboot.so,bootvolume.img,\"\" \\\\\n.Ed\n.Pp\nRun an 8GB quad-CPU virtual machine with 8 AHCI SATA disks, an AHCI ATAPI\nCD-ROM, a single virtio network port, an AMD hostbridge, and the console\nport connected to an\n.Xr nmdm 4\nnull-modem device.\n.Bd -literal -offset indent\nxhyve -c 4 \\\\\n  -s 0,amd_hostbridge -s 1,lpc \\\\\n  -s 1:0,ahci-hd,/images/disk.1 \\\\\n  -s 1:1,ahci-hd,/images/disk.2 \\\\\n  -s 1:2,ahci-hd,/images/disk.3 \\\\\n  -s 1:3,ahci-hd,/images/disk.4 \\\\\n  -s 1:4,ahci-hd,/images/disk.5 \\\\\n  -s 1:5,ahci-hd,/images/disk.6 \\\\\n  -s 1:6,ahci-hd,/images/disk.7 \\\\\n  -s 1:7,ahci-hd,/images/disk.8 \\\\\n  -s 2,ahci-cd,/images/install.iso \\\\\n  -s 3,virtio-net,tap0 \\\\\n  -l com1,/dev/nmdm0A \\\\\n  -A -H -P -m 8G \\\\\n  -f kexec,vmlinuz,initrd.gz,\"earlyprintk=serial console=ttyS0\"\n\n.Ed\n.Sh HISTORY\n.Nm\nis a port of FreeBSD's bhyve hypervisor to OS X that\nworks entirely in userspace and has no other dependencies.\n.Sh AUTHORS\n.An Michael Steil Aq Mt mist64@mac.com\n"
        },
        {
          "name": "xhyve.xcodeproj",
          "type": "tree",
          "content": null
        },
        {
          "name": "xhyve_logo.png",
          "type": "blob",
          "size": 19.572265625,
          "content": null
        },
        {
          "name": "xhyverun-freebsd.sh",
          "type": "blob",
          "size": 0.341796875,
          "content": "#!/bin/sh\n\nBOOTVOLUME=\"<path of FreeBSD iso>\"\nIMG=\"<path of disk image for FreeBSD>\"\n\nPATH=\"build/Release:build:$PATH\"\n\nxhyve \\\n    -A \\\n    -m 2G \\\n    -c 2 \\\n    -s 0:0,hostbridge \\\n    -s 2:0,virtio-net \\\n    -s 3:0,ahci-cd,$BOOTVOLUME \\\n    -s 4:0,virtio-blk,$IMG \\\n    -s 31,lpc \\\n    -l com1,stdio \\\n    -f fbsd,test/userboot.so,$BOOTVOLUME,\"\"\n"
        },
        {
          "name": "xhyverun-tinycorelinux.sh",
          "type": "blob",
          "size": 0.205078125,
          "content": "#!/bin/sh\n\nPATH=\"build/Release:build:$PATH\"\n\nxhyve \\\n    -A \\\n    -m 1G \\\n    -s 0:0,hostbridge \\\n    -s 31,lpc \\\n    -l com1,stdio \\\n    -f kexec,test/vmlinuz,test/initrd.gz,\"earlyprintk=serial console=ttyS0\"\n"
        },
        {
          "name": "xhyverun-windows.sh",
          "type": "blob",
          "size": 0.392578125,
          "content": "#!/bin/sh\n\nBOOTVOLUME=\"<path of Windows iso>\"\nIMG=\"<path of disk image for Windows>\"\nFIRMWARE=\"<path of BHYVE_UEFI.fd>\"\n\nPATH=\"build/Release:build:$PATH\"\n\nxhyve \\\n    -w \\\n    -m 4G \\\n    -c 2 \\\n    -s 0:0,hostbridge \\\n    -s 3,ahci-cd,$BOOTVOLUME \\\n    -s 4,ahci-hd,$IMG \\\n   \t-s 5,e1000 \\\n    -s 29,fbuf,tcp=127.0.0.1:29000,w=1024,h=768,wait \\\n    -s 31,lpc -l com1,stdio \\\n    -l bootrom,$FIRMWARE\n\n"
        }
      ]
    }
  ]
}