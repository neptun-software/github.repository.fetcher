{
  "metadata": {
    "timestamp": 1736710335367,
    "page": 140,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/ios-webkit-debug-proxy",
      "stars": 5978,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4345703125,
          "content": "# Compiled source\n*.o\n*.lo\n*.la\n.deps\n.libs\nsrc/ios_webkit_debug_proxy\nexamples/dl_client\nexamples/wi_client\nexamples/ws_echo1\nexamples/ws_echo2\n*.exe\n\n# OS generated files\n.DS_Store\n\n# Build generated files\nMakefile\nMakefile.in\naclocal.m4\nautom4te.cache\nautoscan.log\ncompile\nconfig.guess\nconfig.sub\nconfig.h\nconfig.h.in\nconfig.log\nconfig.status\nconfigure\nconfigure.scan\ndepcomp\nltmain.sh\ninstall-sh\nmissing\nstamp-h1\nlibtool\n*~\n\n# Vim\n*.sw[o-p]\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.5048828125,
          "content": "https://developers.google.com/google-bsd-license\n\nCopyright 2012, Google Inc.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n  * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n  * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 0.1728515625,
          "content": "# Google BSD license https://developers.google.com/google-bsd-license\n# Copyright 2012 Google Inc. wrightt@google.com\n\nAUTOMAKE_OPTIONS = foreign\nSUBDIRS = src include examples\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.625,
          "content": "# iOS WebKit Debug Proxy\n\nThe ios_webkit_debug_proxy (aka _iwdp_) proxies requests from usbmuxd daemon over a websocket connection, allowing developers to send commands to MobileSafari and UIWebViews on real and simulated iOS devices.\n\n## Installation\n\niOS WebKit Debug Proxy works on Linux, MacOS & Windows.\n\n### MacOS\n\nIt's easiest to install with [homebrew](http://brew.sh/):\n\n```console\nbrew install ios-webkit-debug-proxy\n```\n### Windows\nIt's easiest to install with [scoop](http://scoop.sh/):\n```\nscoop bucket add extras\nscoop install ios-webkit-debug-proxy\n```\nNote: you also need the latest version of [iTunes](https://www.apple.com/il/itunes/download/) installed.\n\n### Linux\n\nInstall dependencies available in apt repository:\n```console\nsudo apt-get install autoconf automake libusb-dev libusb-1.0-0-dev libplist-dev libtool libssl-dev\n```\n\nBuild and install dependencies that require more recent versions:\n- [libplist](https://github.com/libimobiledevice/libplist)\n- [libimobiledevice-glue](https://github.com/libimobiledevice/libimobiledevice-glue)\n- [libusbmuxd](https://github.com/libimobiledevice/libusbmuxd)\n- [libimobiledevice](https://github.com/libimobiledevice/libimobiledevice)\n- [usbmuxd](https://github.com/libimobiledevice/usbmuxd)\n\nBuild and install `ios-webkit-debug-proxy`:\n```console\ngit clone https://github.com/google/ios-webkit-debug-proxy.git\ncd ios-webkit-debug-proxy\n\n./autogen.sh\nmake\nsudo make install\n```\n\n## Usage\n\nOn Linux, you must run the `usbmuxd` daemon.  The above install adds a /lib/udev rule to start the daemon whenever a device is attached.\n\nTo verify that usbmuxd can list your attached device(s), ensure that `libimobiledevice-utils` is installed and then run `idevice_id -l`.\n\n### Start the simulator or device\n\nThe iOS Simulator is supported, but it must be started **before** the proxy.  The simulator can be started in XCode,  standalone, or via the command line:\n\n```sh\n# Xcode changes these paths frequently, so doublecheck them\nSDK_DIR=\"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs\"\nSIM_APP=\"/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app/Contents/MacOS/Simulator\"\n$SIM_APP -SimulateApplication $SDK_DIR/iPhoneSimulator8.4.sdk/Applications/MobileSafari.app/MobileSafari\n```\n\n#### Enable the inspector\n\nYour attached iOS devices must have â‰¥1 open browser tabs and the inspector enabled via:\n  `Settings > Safari > Advanced > Web Inspector = ON`\n\n### Start the proxy\n\n```console\nios_webkit_debug_proxy\n```\n\n* `--debug` for verbose output.\n* `--frontend` to specify a frontend\n* `--help` for more options.\n* `Ctrl-C` to quit. Also, the proxy can be left running as a background process.\n\n### Using with DevTools\n\nios_webkit_debug_proxy can be used with many tools such as Chrome DevTools and Safari Web Inspector.\n\n#### Chrome Devtools\n\nIn recent versions of Chrome and Safari there're major discrepancies between [Chrome Remote Debugging Protocol](https://developer.chrome.com/devtools/docs/debugger-protocol) and [Webkit Inspector Protocol](https://github.com/WebKit/webkit/tree/master/Source/JavaScriptCore/inspector/protocol), which means that newer versions of Chrome DevTools aren't compatible with Safari.\n\n#### Safari Web Inspector\nYou can use Safari Web Inspector extracted from Webkit sources, e.g. [artygus/webkit-webinspector](https://github.com/artygus/webkit-webinspector) or [HimbeersaftLP/ios-safari-remote-debug-kit](https://github.com/HimbeersaftLP/ios-safari-remote-debug-kit).\n\n#### Firefox DevTools via Valence\nAnother option is [mozilla/valence](https://github.com/mozilla/valence) which enables Firefox DevTools to be used with iOS.\n\n## Configuration\n\n### View and inspect debuggable tabs\n\nNavigate to [localhost:9221](http://localhost:9221). You'll see a listing of all connected devices.\n\nClick through to view tabs available on each, and click through again to open the DevTools for a tab.\n\n### Setting the DevTools UI URL\n\n[Chrome DevTools UI](https://developers.google.com/chrome-developer-tools/) used as a default frontend:\n\n    http://chrome-devtools-frontend.appspot.com/static/27.0.1453.93/devtools.html\n\nYou can use the `-f` argument to specify different frontend source, like Chrome's local DevTools, a local\n[Chromium checkout](https://chromium.googlesource.com/chromium/src/+/master/third_party/WebKit/Source/devtools/) or another URL:\n\n```console\n# examples:\nios_webkit_debug_proxy -f chrome-devtools://devtools/bundled/inspector.html\nios_webkit_debug_proxy -f ~/chromium/src/third_party/WebKit/Source/devtools/front_end/inspector.html\nios_webkit_debug_proxy -f http://foo.com:1234/bar/inspector.html\n```\n\nIf you use `-f chrome-devtools://devtools/bundled/inspector.html`, you won't be able to click the links shown in `localhost:9222` as Chrome blocks clicking these URLs. However, you can copy/paste them into the address bar.\n\nJust the same, you can apply the appropriate port (9222) and page (2) values below.\n\n    chrome-devtools://devtools/bundled/inspector.html?ws=localhost:9222/devtools/page/1\n\nThe `-f` value must end in \".html\". Due to security reasons, `https` URLs will not work; use `http` or force-allow with the URL bar's shield icon. As of Chrome 45, the primary URL [changed](https://codereview.chromium.org/1144393004/) from `devtools.html` to `inspector.html`.\n\nTo disable the frontend proxy, use the `--no-frontend` argument.\n\n#### Port assigment\n\nThe default configuration works well for most developers. The device_id-to-port assignment defaults to:\n\n    :9221 for the device list\n    :9222 for the first iOS device that is attached\n    :9223 for the second iOS device that is attached\n    ...\n    :9322 for the max device\n\nIf a port is in use then the next available port will be used, up to the range limit.\n\nThe port assignment is first-come-first-serve but is preserved if a device is detached and reattached, assuming that the proxy is not restarted, e.g.:\n\n  1. start the proxy\n  1. the device list gets :9221\n  1. attach A gets :9222\n  1. attach B gets :9223\n  1. detach A, doesn't affect B's port\n  1. attach C gets :9224 (not :9222)\n  1. reattach A gets :9222 again (not :9225)\n\nThe port assignment rules can be set via the command line with `-c`.  The default is equivalent to:\n\n    ios_webkit_debug_proxy -c null:9221,:9222-9322\n\nwhere \"null\" represents the device list.  The following example restricts the proxy to a single device and port:\n\n    ios_webkit_debug_proxy -c 4ea8dd11e8c4fbc1a2deadbeefa0fd3bbbb268c7:9227\n\n\n### Troubleshooting\n\n##### undefined reference to symbol 'log10@@GLIBC_2.2.5'\n```console\n/usr/bin/ld: ios_webkit_debug_proxy-char_buffer.o: undefined reference to symbol 'log10@@GLIBC_2.2.5'\n//lib/x86_64-linux-gnu/libm.so.6: error adding symbols: DSO missing from command line\n```\n\nRun this before `make`: `./configure LIBS=\"-lm\"`\n\n##### error while loading shared libraries: libimobiledevice.so.6\n```console\nios_webkit_debug_proxy: error while loading shared libraries: libimobiledevice.so.6: cannot open shared object file: No such file or directory\n```\n\nRun `sudo ldconfig`\n\n##### idevice_id not found\n\nThe `idevice_id` executable may be found as part of the libimobiledevice-utils package.\n\n##### could not start com.apple.webinspector! success\n\n[Remove and rebuild libimobiledevice](https://github.com/google/ios-webkit-debug-proxy/issues/82#issuecomment-74205898).\n\n##### Could not connect to lockdownd (or doesn't work with iOS10+)\n> Could not connect to lockdownd. Exiting.: No such file or directory. Unable to attach <long id> inspector ios_webkit_debug_proxy\n\nCheck the device for [a prompt to trust the connected computer](http://i.stack.imgur.com/hPaqX.png). Choose \"Trust\" and try again.\n\n> Could not connect to lockdownd. Exiting.: Broken pipe. Unable to attach <long id> inspector\n\nor\n\n> Could not connect to lockdownd, error code -\\<number\\>. Exiting.\n\nMake sure you're using latest version of ios-webkit-debug-proxy\n\n##### Inspectable pages list is empty for iOS >= 12.2\n\nMake sure you're using latest version of ios-webkit-debug-proxy\n\n##### Can not see Simulator\n\n  - Make sure you started simulator before the proxy\n  - Check that webinspector switch is enabled (Settings -> Safari -> Advanced -> Web Inspector)\n  - Most likely simulator's web inspector daemon listens on ipv6 interface, check that you have `::1 localhost` line in `/etc/hosts`\n\n##### Building under Rosetta (OS X)\n\nlibimobildevice formulae [depends on](https://github.com/Homebrew/homebrew-core/blob/d6c416caf0622f2aac47742bca679c3510d0b1d9/Formula/libimobiledevice.rb#L30) openssl@1.1, which is key-only and requires the following env paths for the build\n\n```console\nexport PKG_CONFIG_PATH=\"/usr/local/opt/openssl@1.1/lib/pkgconfig\"\nexport LDFLAGS=\"-L/usr/local/opt/openssl@1.1/lib\"\nexport CPPFLAGS=\"-I/usr/local/opt/openssl@1.1/include\"\n```\n\n##### If no luck so far...\nLastly, always try replugging in the USB cable.\n\n\n## IWDP Clients\n\nJSON-formatted APIs are provided for programmatic clients.\n  * <http://localhost:9221/json> will list all devices\n  * <http://localhost:9222/json> to list device \":9222\"'s tabs\n  * [ws://localhost:9222/devtools/page/1]() to inspect a tab.\n\nSee the [examples/README](examples/README.md) for example clients: NodeJS, C, clientside JS, websocket and more.\n\n## Design\n\n![Alt overview](overview.png \"Overview\")\n\nView the [design document](design.md) for an overview of the source layout and architecture.\n\n## License and Copyright\n\nGoogle BSD license <https://developers.google.com/google-bsd-license>\nCopyright 2012 Google Inc.  <wrightt@google.com>\n\nThe proxy uses the following open-source packages:\n   - [libplist 2.2.0](http://cgit.sukimashita.com/libplist.git)\n   - [libusbmuxd 2.0.0](http://cgit.sukimashita.com/usbmuxd.git/)\n   - [libimobiledevice 1.3.0](http://cgit.sukimashita.com/libimobiledevice.git)\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.408203125,
          "content": "#!/bin/sh\n#\n# Google BSD license https://developers.google.com/google-bsd-license\n# Copyright 2012 Google Inc. wrightt@google.com\n\nrun () {\n  echo $*\n  $* || exit 1\n}\n\ngprefix=`which glibtoolize 2>&1 >/dev/null`\nif [ $? -eq 0 ]; then\n  run glibtoolize --force\nelse\n  run libtoolize --force\nfi\nrun aclocal\nrun autoheader\nrun automake --add-missing\nrun autoconf\n\nif [ -z \"$NOCONFIGURE\" ]; then\n  run ./configure \"$@\"\nfi\n"
        },
        {
          "name": "clients.png",
          "type": "blob",
          "size": 104.140625,
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 3.2890625,
          "content": "# Google BSD license https://developers.google.com/google-bsd-license\n# Copyright 2012 Google Inc. wrightt@google.com\n#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n\nAC_PREREQ([2.63])\nAC_INIT([ios_webkit_debug_proxy], [1.9.1], [https://github.com/google/ios-webkit-debug-proxy/issues])\nAM_INIT_AUTOMAKE([1.10 no-define])\nAC_CONFIG_SRCDIR([src/])\nAC_CONFIG_HEADERS([config.h])\n\n# Checks for programs.\nAC_PROG_CC\nAM_PROG_CC_C_O\nAC_PROG_INSTALL\nPKG_PROG_PKG_CONFIG\n\n# Checks for libraries.\nPKG_CHECK_MODULES(libimobiledevice, libimobiledevice-1.0 >= 1.3.0)\nPKG_CHECK_MODULES(libplist, libplist-2.0 >= 2.2.0)\nPKG_CHECK_MODULES(libusbmuxd, libusbmuxd-2.0 >= 2.0.0)\nPKG_CHECK_MODULES(openssl, openssl >= 1.1.0)\nAC_CHECK_LIB([plist-2.0], [plist_to_xml],\n             [ ], [AC_MSG_FAILURE([*** Unable to link with libplist])],\n             [$libplist_LIBS])\nAC_CHECK_LIB([m], [log10])\nAC_CHECK_LIB([imobiledevice-1.0], [idevice_new],\n             [ ], [AC_MSG_FAILURE([*** Unable to link with libimobiledevice])],\n             [$libimobiledevice_LIBS])\nLT_INIT\n\n# Defines versions of required modules\nlibimobiledevice_version=`$PKG_CONFIG --modversion libimobiledevice-1.0`\nlibplist_version=`$PKG_CONFIG --modversion libplist-2.0`\nlibusbmuxd_version=`$PKG_CONFIG --modversion libusbmuxd-2.0`\n\nAC_DEFINE_UNQUOTED([LIBIMOBILEDEVICE_VERSION], [\"$libimobiledevice_version\"], [ ])\nAC_DEFINE_UNQUOTED([LIBPLIST_VERSION], [\"$libplist_version\"], [ ])\nAC_DEFINE_UNQUOTED([LIBUSBMUXD_VERSION], [\"$libusbmuxd_version\"], [ ])\n\n[libplist_version_major=`expr \"$libplist_version\" : '\\([0-9]*\\)'`]\n[libplist_version_minor=`expr \"$libplist_version\" : '[0-9]*\\.\\([0-9]*\\)'`]\nAC_DEFINE_UNQUOTED([LIBPLIST_VERSION_MAJOR], [$libplist_version_major], [ ])\nAC_DEFINE_UNQUOTED([LIBPLIST_VERSION_MINOR], [$libplist_version_minor], [ ])\n\n# Checks for header files.\nAC_HEADER_STDC\nAC_HEADER_RESOLV\nAC_CHECK_HEADERS([arpa/inet.h inttypes.h netdb.h netinet/in.h stddef.h stdint.h stdlib.h string.h sys/socket.h sys/time.h])\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_TYPE_INT8_T\nAC_TYPE_SIZE_T\nAC_TYPE_SSIZE_T\nAC_TYPE_UINT16_T\nAC_TYPE_UINT32_T\nAC_TYPE_UINT64_T\nAC_TYPE_UINT8_T\n\n# Checks for library functions.\nAC_FUNC_MALLOC\nAC_FUNC_REALLOC\n\n# Check for operating system\nAC_MSG_CHECKING([whether to enable WIN32 build settings])\ncase ${host_os} in\n  *mingw*|*msys*|*cygwin*)\n    win32=true\n    AC_MSG_RESULT([yes])\n    AC_DEFINE(WIN32_LEAN_AND_MEAN, 1, [Define to limit the scope of windows.h])\n    AC_DEFINE(__USE_MINGW_ANSI_STDIO, 1, [Define to use C99 printf/snprintf in MinGW])\n    ;;\n  *)\n    win32=false\n    AC_MSG_RESULT([no])\n    ;;\nesac\nAM_CONDITIONAL(WIN32, test \"x$win32\" = \"xtrue\")\n\n# Check for pcre presence if regex.h is absent\nAC_CHECK_HEADER(regex.h, [ac_have_regex_h=\"yes\"], [ac_have_regex_h=\"no\"])\nif test \"x$ac_have_regex_h\" = \"xno\"; then\n  PKG_CHECK_MODULES(libpcreposix, libpcreposix, [], [AC_MSG_ERROR([Neither regex.h nor pcre headers were found])])\nelse\n  AC_DEFINE(HAVE_REGEX_H, 1, [regex.h is present])\nfi\n\nAC_CHECK_FUNCS([memmove memset regcomp select socket strcasecmp strncasecmp strchr strdup strndup strrchr strstr strtol strcasestr getline])\n\nAC_CONFIG_FILES([Makefile src/Makefile include/Makefile examples/Makefile])\n\nCFLAGS=\"${CFLAGS} -Wall -Werror\"\n\nAC_OUTPUT\n"
        },
        {
          "name": "design.md",
          "type": "blob",
          "size": 4.2158203125,
          "content": "Google BSD license <https://developers.google.com/google-bsd-license>   \nCopyright 2012 Google Inc.  <wrightt@google.com>\n\n\niOS WebKit Debug Proxy Design\n=============================\n\nSee the [README.md](README.md) for an overview.\n\nSource\n------\n\n- [src/ios_webkit_debug_proxy_main.c](src/ios_webkit_debug_proxy_main.c)   \n   \\- The \"main\"   \n\n- [src/ios_webkit_debug_proxy.c](src/ios_webkit_debug_proxy.c)    \n   \\- WebInspector to WebKit Remote Debugging Protocol translator   \n   \\- See [examples/wdp_client.html](examples/wdp_client.html) and <http://localhost:9221>   \n\n- [src/webinspector.c](src/webinspector.c)   \n   \\- iOS WebInspector library   \n   \\- See [examples/wi_client.c](examples/wi_client.c)\n   \\- See [src/rpc.c](src/rpc.c) parser\n\n- [src/device_listener.c](src/device_listener.c)   \n   \\- iOS device add/remove listener   \n   \\- See [examples/dl_client.c](examples/dl_client.c)   \n\n- [src/websocket.c](src/websocket.c)   \n   \\- A generic WebSocket library   \n   \\- Uses base64.c and sha1.c from [PolarSSL](http://www.polarssl.org)   \n   \\- See [examples/ws_echo1.c](examples/ws_echo1.c) and [examples/ws_echo2.c](examples/ws_echo2.c)\n\n- Utilities:   \n   \\- [src/char_buffer.c](src/char_buffer.c) byte buffer   \n   \\- [src/hash_table.c](src/hash_table.c) dictionary   \n   \\- [src/port_config.c](src/port_config.c) parses device_id:port config files   \n   \\- [src/socket_manager.c](src/socket_manager.c) select-based socket controller   \n\n\nArchitecture\n------------\n\nThe high-level design is shown below:\n\n![Alt overview](overview.png \"Overview\")\n\nThe various clients are shown below:\n\n![Alt clients](clients.png \"Clients\")\n\n\nThe major components of the ios_webkit_debug_proxy are:\n\n  1. A device_listener that listens for iOS device add/remove events\n  1. A (port, webinspector) pair for each device, e.g.:   \n     - [(port 9222 <--> iphoneX's inspector),\n     -  (port 9223 <--> iphoneY's inspector), ...]\n  1. Zero or more active WebSocket clients, e.g.:\n     - [websocketA is connected to :9222/devtools/page/7, ...]\n  1. A socket_manager that handles all the socket I/O\n\n\nThe code is object-oriented via the use of structs and function pointers.\nFor example, the device_listener struct defines two \"public API\" functions:\n\n    dl_status (*start)(dl_t self);\n    dl_status (*on_recv)(dl_t self, const char *buf, );\n\nand three \"abstract\" callback functions:\n\n    dl_status (*send)(dl_t self, const char *buf, size_t length);\n    dl_status (*on_attach)(dl_t self, const char *device_id);\n    dl_status (*on_detach)(dl_t self, const char *device_id);\n\nplus a field for client use:\n\n    void *state;\n\nFor example, [examples/dl_client.c](examples/dl_client.c) creates a listener and sets the missing callbacks:\n\n    int fd = dl_connect();\n    dl_t dl = dl_new(); // sets the \"start\" and \"on_recv\" functions\n    dl->state = fd;     // for use by \"my_send\"\n    dl->send = my_send; // --> send((int)dl->state, buf, length);\n    dl->on_attach = my_on_attach; // --> printf(\"%s\", device_id);\n    dl->on_detach = my_on_detach; // --> ditto\n\nthen does:\n\n    dl->start();\n\nLastly, the client forwards all socket input to the listener's \"on_recv\"\nhandler:\n\n    char buf[1024];\n    while (1) {\n       int len = recv(fd, buf, 1024);\n       if (dl->on_recv(dl, buf, len)) break;\n    }\n\nwhere \"on_recv\" buffers the input and calls our \"my_on_message\" when it has a\nfull message.\n\nNote that the \"on_recv\" and \"send\" functions abstract the I/O from the\ninterface, which simplifies debugging and unit testing.\n\n\nThe detailed design is shown below:\n\n![Alt design](design.png \"Design\")\n\nLines in red are controlled by the main \"ios_webkit_debug_proxy\".  For example, although the figure shows a direct red line from the socket_manager's \"on_recv\" to the ios_webkit_debug_proxy's handler, this is implemented as a callback through ios_webkit_debug_proxy_main's \"iwdpm_on_recv(...)\".  This design isolate the components from one another and simplifies both offline and per-component unit testing.\n\n\nThe code is single-threaded and uses non-blocking I/O.  Instead of having a thread per socket that does blocking reads, the single  socket_manager's non-blocking select forwards data to the \"on_recv\" function of websocket/webinspector/etc.  This improves system scalability and makes it easier to debug and unit test.\n\n"
        },
        {
          "name": "design.png",
          "type": "blob",
          "size": 88.943359375,
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "overview.png",
          "type": "blob",
          "size": 60.3681640625,
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}