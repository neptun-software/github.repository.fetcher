{
  "metadata": {
    "timestamp": 1736710356327,
    "page": 169,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FreeRTOS/FreeRTOS",
      "stars": 5542,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1025390625,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 4\n\n[{Makefile,**.mk,Makefile.in}]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.705078125,
          "content": "# Ignore MacOS file system related.\n**/*.DS_Store*\n\n# Ignore build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Dd]ebug_with_Libslirp/\n[Rr]elease/\n[Rr]eleases/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n[Ll]ogs/\n[Bb]uild/\n\n# CodeWarrior temporary files\n*.tdt\nCWSettingsWindows.stg\n\n# Executable Files\n*.exe\n*.hex\n*.bin\n*.elf\n*.out\n*.rom\n\n# MS Word Files\n*.doc\n*.docx\n\n# Visual Studio cache/options directory\n.vs/\n\n# Visual Studio Solution / project User Option files\n*.suo\n*.vcxproj.user\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Ignore certificate files.\n*.pem\n*.crt\n\n# Ignore Visual Studio user files\n*.suo\n*.vcxproj.user\n\n# Atmel Studio user files\n*.atsuo\n\n# Image Files\n*.png\n*.jpg\n*.jpeg\n\n# Renesas IDE temporary files\n*.nav\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 4.6171875,
          "content": "[submodule \"FreeRTOS/Source\"]\n\tpath = FreeRTOS/Source\n\turl = https://github.com/FreeRTOS/FreeRTOS-Kernel.git\n[submodule \"FreeRTOS/Test/CMock/CMock\"]\n\tpath = FreeRTOS/Test/CMock/CMock\n\turl = https://github.com/ThrowTheSwitch/CMock.git\n[submodule \"FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP\"]\n\tpath = FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP\n\turl = https://github.com/FreeRTOS/FreeRTOS-Plus-TCP\n[submodule \"FreeRTOS-Plus/Source/AWS/device-shadow\"]\n\tpath = FreeRTOS-Plus/Source/AWS/device-shadow\n\turl = https://github.com/aws/device-shadow-for-aws-iot-embedded-sdk\n[submodule \"FreeRTOS-Plus/Source/Application-Protocols/coreMQTT\"]\n\tpath = FreeRTOS-Plus/Source/Application-Protocols/coreMQTT\n\turl = https://github.com/FreeRTOS/coreMQTT\n[submodule \"FreeRTOS-Plus/Source/coreJSON\"]\n\tpath = FreeRTOS-Plus/Source/coreJSON\n\turl = https://github.com/FreeRTOS/coreJSON\n[submodule \"FreeRTOS-Plus/Test/CMock\"]\n\tpath = FreeRTOS-Plus/Test/CMock\n\turl = https://github.com/ThrowTheSwitch/CMock\n[submodule \"FreeRTOS-Plus/ThirdParty/mbedtls\"]\n\tpath = FreeRTOS-Plus/ThirdParty/mbedtls\n\turl = https://github.com/Mbed-TLS/mbedtls.git\n[submodule \"FreeRTOS-Plus/Source/Application-Protocols/corePKCS11\"]\n\tpath = FreeRTOS-Plus/Source/corePKCS11\n\turl = https://github.com/FreeRTOS/corePKCS11.git\n[submodule \"FreeRTOS-Plus/Source/AWS/jobs\"]\n\tpath = FreeRTOS-Plus/Source/AWS/jobs\n\turl = https://github.com/aws/jobs-for-aws-iot-embedded-sdk.git\n[submodule \"FreeRTOS-Plus/Source/AWS/device-defender\"]\n\tpath = FreeRTOS-Plus/Source/AWS/device-defender\n\turl = https://github.com/aws/device-defender-for-aws-iot-embedded-sdk.git\n[submodule \"FreeRTOS-Plus/Source/Application-Protocols/coreHTTP\"]\n\tpath = FreeRTOS-Plus/Source/Application-Protocols/coreHTTP\n\turl = https://github.com/FreeRTOS/coreHTTP\n[submodule \"FreeRTOS-Plus/Source/Utilities/backoff_algorithm\"]\n\tpath = FreeRTOS-Plus/Source/Utilities/backoff_algorithm\n\turl = https://github.com/FreeRTOS/backoffAlgorithm.git\n[submodule \"FreeRTOS-Plus/ThirdParty/wolfSSL\"]\n\tpath = FreeRTOS-Plus/ThirdParty/wolfSSL\n\turl = https://github.com/wolfSSL/wolfssl.git\n[submodule \"FreeRTOS-Plus/ThirdParty/libslirp\"]\n\tpath = FreeRTOS-Plus/ThirdParty/libslirp\n\turl = https://gitlab.com/qemu-project/libslirp.git\n[submodule \"FreeRTOS-Plus/ThirdParty/glib\"]\n\tpath = FreeRTOS-Plus/ThirdParty/glib\n\turl = https://github.com/GNOME/glib.git\n[submodule \"FreeRTOS-Plus/Source/Application-Protocols/coreMQTT-Agent\"]\n\tpath = FreeRTOS-Plus/Source/Application-Protocols/coreMQTT-Agent\n\turl = https://github.com/FreeRTOS/coreMQTT-Agent.git\n[submodule \"FreeRTOS-Plus/Source/AWS/ota\"]\n\tpath = FreeRTOS-Plus/Source/AWS/ota\n\turl = https://github.com/aws/ota-for-aws-iot-embedded-sdk.git\n[submodule \"FreeRTOS-Plus/Source/Application-Protocols/coreSNTP\"]\n\tpath = FreeRTOS-Plus/Source/Application-Protocols/coreSNTP\n\turl = https://github.com/FreeRTOS/coreSNTP.git\n[submodule \"FreeRTOS/Demo/ThirdParty/Community-Supported-Demos\"]\n\tpath = FreeRTOS/Demo/ThirdParty/Community-Supported-Demos\n\turl = https://github.com/FreeRTOS/FreeRTOS-Community-Supported-Demos\n[submodule \"FreeRTOS/Demo/ThirdParty/Partner-Supported-Demos\"]\n\tpath = FreeRTOS/Demo/ThirdParty/Partner-Supported-Demos\n\turl = https://github.com/FreeRTOS/FreeRTOS-Partner-Supported-Demos\n[submodule \"FreeRTOS-Plus/Source/AWS/sigv4\"]\n\tpath = FreeRTOS-Plus/Source/AWS/sigv4\n\turl = https://github.com/aws/SigV4-for-AWS-IoT-embedded-sdk.git\n[submodule \"FreeRTOS-Plus/Source/FreeRTOS-Cellular-Interface\"]\n\tpath = FreeRTOS-Plus/Source/FreeRTOS-Cellular-Interface\n\turl = https://github.com/FreeRTOS/FreeRTOS-Cellular-Interface.git\n[submodule \"FreeRTOS-Plus/ThirdParty/tinycbor\"]\n\tpath = FreeRTOS-Plus/ThirdParty/tinycbor\n\turl = https://github.com/intel/tinycbor.git\n[submodule \"FreeRTOS-Plus/Source/AWS/fleet-provisioning\"]\n\tpath = FreeRTOS-Plus/Source/AWS/fleet-provisioning\n\turl = https://github.com/aws/Fleet-Provisioning-for-AWS-IoT-embedded-sdk.git\n[submodule \"FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/bg96\"]\n\tpath = FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/bg96\n\turl = https://github.com/FreeRTOS/Lab-FreeRTOS-Cellular-Interface-Reference-Quectel-BG96.git\n[submodule \"FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/hl7802\"]\n\tpath = FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/hl7802\n\turl = https://github.com/FreeRTOS/Lab-FreeRTOS-Cellular-Interface-Reference-Sierra-Wireless-HL7802.git\n[submodule \"FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/sara-r4\"]\n\tpath = FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/sara-r4\n\turl = https://github.com/FreeRTOS/Lab-FreeRTOS-Cellular-Interface-Reference-ublox-SARA-R4.git\n[submodule \"FreeRTOS-Plus/Source/FreeRTOS-Plus-Trace\"]\n\tpath = FreeRTOS-Plus/Source/FreeRTOS-Plus-Trace\n\turl = https://github.com/percepio/TraceRecorderSource.git\n"
        },
        {
          "name": "FreeRTOS+TCP.url",
          "type": "blob",
          "size": 0.146484375,
          "content": "[{000214A0-0000-0000-C000-000000000046}]\nProp3=19,2\n[InternetShortcut]\nURL=http://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/index.html\nIDList=\n"
        },
        {
          "name": "FreeRTOS-Plus",
          "type": "tree",
          "content": null
        },
        {
          "name": "FreeRTOS",
          "type": "tree",
          "content": null
        },
        {
          "name": "GitHub-FreeRTOS-Home.url",
          "type": "blob",
          "size": 0.138671875,
          "content": "[{000214A0-0000-0000-C000-000000000046}]\nProp3=19,2\n[InternetShortcut]\nURL=https://github.com/FreeRTOS/FreeRTOS\nIconIndex=0\nIDList=\nHotKey=0\n\n"
        },
        {
          "name": "History.txt",
          "type": "blob",
          "size": 138.7412109375,
          "content": "Documentation and download available at https://www.FreeRTOS.org/\n\nChanges between FreeRTOS 202112.00 and FreeRTOS 202212.00 released December 2022\n\n\t+ Released LTS 2.0 versions of FreeRTOS Kernel, FreeRTOS+TCP, coreMQTT, corePKCS11,\n\t  coreHTTP, coreJSON, AWS IoT Over-the-air-Updates (OTA), AWS IoT Device Shadow, AWS IoT Jobs,\n\t  AWS IoT Device Defender, Backoff Algorithm, AWS IoT Fleet Provisioning, coreSNTP,\n\t  SigV4, and FreeRTOS Cellular Interface libraries\n\t    - FreeRTOS Kernel V10.5.1\n\t\t- FreeRTOS+TCP V3.1.0\n\t\t- coreMQTT v2.1.1\n\t\t- corePKCS11 v3.5.0\n\t\t- coreJSON v3.2.0\n\t\t- AWS IoT Over-the-air (OTA) Update v3.4.0\n\t\t- AWS IoT Device Shadow v1.3.0\n\t\t- AWS IoT Jobs v1.3.0\n\t\t- AWS IoT Device Defender v1.3.0\n\t\t- Backoff Algorithm v1.3.0\n\t\t- AWS IoT Fleet Provisioning v1.1.0\n\t\t- coreSNTP v1.2.0\n\t\t- SigV4 v1.2.0\n\t\t- FreeRTOS Cellular Interface v1.3.0\n\t+ Updated coreMQTT Agent library to v1.2.0 to be compatible with coreMQTT v2.X.X.\n\t+ Demo Updates\n\t    - Added Visual Studio static library projects for FreeRTOS Kernel, FreeRTOS+TCP,\n\t\t  Logging, MbedTLS, coreHTTP, and corePKCS11 in FreeRTOS-Plus/VisualStudio_StaticProjects.\n\t\t- All demos dependent on coreMQTT have been updated to be compatible with coreMQTT v2.X.X.\n\t\t- All Windows Simulator projects have been updated to use new static Visual Studio projects.\n\t+ Updated MbedTLS version to 3.2.1.\n\nChanges between FreeRTOS 202111.00 and FreeRTOS 202112.00 released December 2021\n\n\t+ Added Fleet Provisioning library and demo showcasing the use of Fleet Provisioning library.\n\t+ Added Sigv4 library and updated HTTP S3 download demo to showcase its use.\n\t+ Added CBMC proofs for all public and private functions in the OTA Update library\n\t+ Updated mbed TLS version used by corePKCS11 to v2.28.0\n\nChanges between FreeRTOS 202107.00 and FreeRTOS 202111.00 released November 2021\n\n\t+ Add Cellular library and demo showcasing use of Cellular library.\n\t+ Add demo project for [PolarFire SoC FPGA Icicle Kit](https://www.microsemi.com/existing-parts/parts/152514).\n\nChanges between FreeRTOS 202104.00 and FreeRTOS 202107.00 released July 2021\n\n\t+ Release coreSNTP v1.0.0, a client library for SNTP communication.\n\t+ Add demo showcasing use of coreSNTP library to setup SNTP client for\n\t  synchronizing demo system time with time servers.\n\t+ Demo Updates\n\t\t- Update Device Shadow demo to use Named Shadow feature.\n\n\nChanges between FreeRTOS 202012.00 and FreeRTOS 202104.00 released April 2021\n\n\t+ Released LTS versions of AWS IoT Device Defender, AWS IoT Jobs and\n\t  AWS IoT Over-the-air-Updates (OTA) libraries\n\t\t- AWS IoT Device Defender v1.1.0\n\t\t- AWS IoT Jobs v1.1.0\n\t\t- AWS IoT Over-the-air (OTA) Update v3.0.0\n\t+ Added new coreMQTT Agent library.\n\t+ Demo Updates\n\t\t- Add basic publish-subscribe demo for coreMQTT Agent library.\n\t\t\t- For examples of using coreMQTT Agent library to communicate with\n\t\t\t  multiple AWS IoT services from different tasks using a shared\n\t\t\t  MQTT connection, refer to https://github.com/FreeRTOS/coreMQTT-Agent-Demos\n\t\t- OTA demo over MQTT\n\t\t- OTA demo over HTTP\n\t\t- Added custom metrics to AWS Device Defender demo.\n\nChanges between FreeRTOS 202011.00 and FreeRTOS 202012.00 released December 2020\n\n\t+ Includes libraries that are part of the FreeRTOS 202012.00 LTS release.\n\t\t- Learn more at https:/freertos.org/lts-libraries.html\n\t+ Networking support for QEMU MPS2\n\t+ Demo Updates\n\t\t- AWS IoT Jobs Library\n\t\t- AWS Device Defender\n\t\t- HTTP Mutual Auth\n\t\t- HTTP Plaintext\n\t\t- UDP for FreeRTOS+TCP\n\t\t- S3 Upload & Download\n\n\nChanges between FreeRTOS V10.4.1 and FreeRTOS 202011.00 released November 10 2020\n\n\t+ Added new coreJSON Library. See https://www.freertos.org/json/\n\t+ Added new coreMQTT Library. See https://www.freertos.org/mqtt/\n\t+ Added new corePKCS11 Library. See https://www.freertos.org/pkcs11/\n\t+ Added new AWS IoT Device Shadow Library. See\n\t  https://www.freertos.org/iot-device-shadow/\n\t+ Updated to FreeRTOS Kernel v10.4.2. See\n\t  https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/master/History.txt\n\t+ Updated to FreeRTOS+TCP v2.3.1. See\n\t  https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/master/History.txt\n\t+ Update WolfSSL to 4.5.0 and add the WolfSSL FIPS ready demo.\n\t+ Convert most dependent libraries to Git submodules.\n\t+ Various general maintenance and improvements.\n\n\nChanges between FreeRTOS V10.4.0 and FreeRTOS V10.4.1 released September 17 2020\n\tSee https://www.FreeRTOS.org/FreeRTOS-V10.4.x.html\n\n\t+ Fixed an incorrectly named parameter that prevented the\n\t  ulTaskNotifyTakeIndexed macro compiling, and the name space clash in the\n\t  test code that prevented this error causing test failures.\n\n\nChanges between FreeRTOS V10.3.1 and FreeRTOS V10.4.0 released September 10 2020\n\n\tSee https://www.FreeRTOS.org/FreeRTOS-V10.4.x.html\n\n\tMajor enhancements:\n\n\t+ Task notifications:  Prior to FreeRTOS V10.4.0 each created task had a\n\t  single direct to task notification.  From FreeRTOS V10.4.0 each task has\n\t  an array of notifications.  The direct to task notification API has been\n\t  extended with API functions postfixed with \"Indexed\" to enable the API to\n\t  operate on a task notification at any array index.  See\n\t  https://www.freertos.org/RTOS-task-notifications.html for more information.\n\t+ Kernel ports that support memory protection units (MPUs): The ARMv7-M and\n\t  ARMv8-M MPU ports now support a privilege access only heap. The ARMv7-M\n\t  MPU ports now support devices that have 16 MPU regions, have the ability\n\t  to override default memory attributes for privileged code and data\n\t  regions, and have the ability to place the FreeRTOS kernel code outside of\n\t  the Flash memory. The ARMv8-M MPU ports now support tickless idle mode.\n\t  See https://www.freertos.org/FreeRTOS-MPU-memory-protection-unit.html\n\t  for more information.\n\n\tAdditional noteworthy updates:\n\n\t+ Code formatting is now automated to facilitate the increase in\n\t  collaborative development in Git.  The auto-formated code is not identical\n\t  to the original formatting conventions.  Most notably spaces are now used\n\t  in place of tabs.\n\t+ The prototypes for callback functions (those that start with \"Application\",\n\t  such as vApplicationStackOverflowHook()) are now in the FreeRTOS header\n\t  files, removing the need for application writers to add prototypes into\n\t  the C files in which they define the functions.\n\t+ New Renesas RXv3 port layer.\n\t+ Updates to the Synopsys ARC code, including support for EM and HS cores,\n\t  and updated BSP.\n\t+ Added new POSIX port layer that allows FreeRTOS to run on Linux hosts in\n\t  the same way the Windows port layer enables FreeRTOS to run on Windows\n\t  hosts.\n\t+ Many other minor optimisations and enhancements. For full details\n\t  see https://github.com/FreeRTOS/FreeRTOS-Kernel/commits/master\n\n\nChanges between FreeRTOS V10.3.0 and FreeRTOS V10.3.1 released February 18 2020\n\n\tSee https://www.FreeRTOS.org/FreeRTOS-V10.3.x.html\n\n\t+ ./FreeRTOS-Labs directory was removed from this file. The libraries it\n\tcontained are now available as a separate download.\n\nChanges between FreeRTOS V10.2.1 and FreeRTOS V10.3.0 released February 7 2020\n\n\tSee https://www.FreeRTOS.org/FreeRTOS-V10.3.x.html\n\n\tNew and updated kernel ports:\n\n\t+ Added RISC-V port for the IAR compiler.\n\t+ Update the Windows simulator port to use a synchronous object to prevent\n\t  a user reported error whereby a task continues to run for a short time\n\t  after being moved to the Blocked state.  Note we were not able to\n\t  replicate the reported issue and it likely depends on your CPU model.\n\t+ Correct alignment of stack top in RISC-V port when\n\t  configISR_STACK_SIZE_WORDS is defined to a non zero value, which causes\n\t  the interrupt stack to be statically allocated.\n\t+ The RISC-V machine timer compare register can now be for any HART, whereas\n\t  previously it was always assumed FreeRTOS was running on HART 0.\n\t+ Update the sequence used to update the 64-bit machine timer\n\t  compare register on 32-bit cores to match that suggested in RISC-V\n\t  documentation.\n\t+ Added tickless low power modes into the ARM, IAR and GCC Cortex-M0 compiler\n\t  ports.\n\t+ Updated the behaviour of the ARMv7-M MPU (Memory Protection Unit) ports to\n\t  match that of the ARMv8-M ports whereby privilege escalations can only\n\t  originate from within the kernel's own memory segment.  Added\n\t  configENFORCE_SYSTEM_CALLS_FROM_KERNEL_ONLY configuration constant.\n\t+ Update existing MPU ports to correctly disable the MPU before it is\n\t  updated.\n\t+ Added contributed port and demo application for a T-Head (formally C-SKY)\n\t  microcontroller.\n\n\tNew API functions:\n\n\t+ Added the vPortGetHeapStats() API function which returns information on\n\t  the heap_4 and heap_5 state.\n\t+ Added xTaskCatchUpTicks(), which corrects the tick count value after the\n\t  application code has held interrupts disabled for an extended period.\n\t+ Added xTaskNotifyValueClear() API function.\n\t+ Added uxTimerGetReloadMode() API function.\n\n\tOther miscellaneous changes:\n\t+ Change type of uxPendedTicks from UBaseType_t to TickType_t to ensure it\n\t  has the same type as variables with which it is compared to, and therefore\n\t  also renamed the variable xPendingTicks.\n\t+ Update Keil projects that use the MPU so memory regions come from linker\n\t  script (scatter file) variables instead of being hard coded.\n\t+ Added LPC51U68 Cortex-M0+ demos for GCC (MCUXpresso), Keil and IAR\n\t  compilers.\n\t+ Added CORTEX_MPU_STM32L4_Discovery_Keil_STM32Cube demo.\n\t+ Added LPC54018 MPU demo.\n\t+ Rename xTaskGetIdleRunTimeCounter() to ulTaskGetIdleRunTimeCounter().\n\n\nChanges between FreeRTOS V10.2.1 and FreeRTOS V10.2.0 released May 13 2019:\n\n\t+ Added ARM Cortex-M23 port layer to complement the pre-existing ARM\n\t  Cortex-M33 port layer.\n\t+ The RISC-V port now automatically switches between 32-bit and 64-bit\n\t  cores.\n\t+ Introduced the portMEMORY_BARRIER macro to prevent instruction re-ordering\n\t  when GCC link time optimisation is used.\n\t+ Introduced the portDONT_DISCARD macro to the ARMv8-M ports to try and\n\t  prevent the secure side builds from removing symbols required by the\n\t  non secure side build.\n\t+ Introduced the portARCH_NAME to provide additional data to select semi-\n\t  automated build environments.\n\t+ Cortex-M33 and Cortex-M23 ports now correctly disable the MPU before\n\t  updating the MPU registers.\n\n\t+ Added Nuvoton NuMaker-PFM-M2351 ARM Cortex-M23 demo.\n\t+ Added LPC55S69 ARM Cortex-M33 demo.\n\t+ Added an STM32 dual core AMP stress test demo.\n\n\nChanges between FreeRTOS V10.1.1 and FreeRTOS V10.2.0 released February 25 2019:\n\n\t+ Added GCC RISC-V MCU port with three separate demo applications.\n\t+ Included pre-existing ARM Cortex-M33 (ARMv8-M) GCC/ARMclang and IAR ports\n\t  with Keil simulator demo.\n\t+ Update the method used to detect if a timer is active.  Previously the\n\t  timer was deemed to be inactive if it was not referenced from a list.\n\t  However, when a timer is updated it is temporarily removed from, then\n\t  re-added to a list, so now the timer's active status is stored separately.\n\t+ Add vTimerSetReloadMode(), xTaskGetIdleRunTimeCounter(), and\n\t  xTaskGetApplicationTaskTagFromISR() API functions.\n\t+ Updated third party Xtensa port so it is MIT licensed.\n\t+ Added configINCLUDE_PLATFORM_H_INSTEAD_OF_IODEFINE_H to the Renesas\n\t  compiler RX600v2 port to enable switching between platform.h and\n\t  iodefine.h includes within that port's port.c file.\n\t+ Removed the 'FromISR' functions from the MPU ports as ISRs run privileged\n\t  anyway.\n\t+ Added uxTaskGetStackHighWaterMark2() function to enable the return type to\n\t  be changed without breaking backward compatibility.\n\t  uxTaskGetStackHighWaterMark() returns a UBaseType_t as always,\n\t  uxTaskGetStackHighWaterMark2() returns configSTACK_DEPTH_TYPE to allow the\n\t  user to determine the return type.\n\t+ Fixed issues in memory protected ports related to different combinations\n\t  of static memory only and dynamic memory only builds.  As a result the\n\t  definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE became more\n\t  complex and was moved to FreeRTOS.h with a table explaining its definition.\n\t+ Added a 'get task tag from ISR' function.\n\t+ Change the method used to determine if a timer is active or not from just\n\t  seeing if it is referenced from the active timer list to storing its\n\t  active state explicitly.  The change prevents the timer reporting that it\n\t  is inactive while it is being moved from one list to another.\n\t+ The pcName parameter passed into the task create functions can be NULL,\n\t  previously a name had to be provided.\n\t+ When using tickless idle, prvResetNextTaskUnblockTime() is now only called\n\t  in xTaskRemoveFromEventList() if the scheduler is not suspended.\n\t+ Introduced portHAS_STACK_OVERFLOW_CHECKING, which should be set to 1 for\n\t  FreeRTOS ports that run on architectures that have stack limit registers.\n\n\nChanges between FreeRTOS V10.1.0 and FreeRTOS V10.1.1 released 7 September 2018\n\n\t+ Reverted a few structure name changes that broke several kernel aware\n\t  debugger plug-ins.\n\t+ Updated to the latest trace recorder code.\n\t+ Fixed some formatting in the FreeRTOS+TCP TCP/IP stack code.\n\t+ Reverted moving some variables from file to function scope as doing so\n\t  broke debug scenarios that require the static qualifier to be removed.\n\nChanges between FreeRTOS V10.0.1 and FreeRTOS V10.1.0 released 22 August 2018\n\n\tFreeRTOS Kernel Changes:\n\n\t+ Update lint checked MISRA compliance to use the latest MISRA standard, was\n\t  previously using the original MISRA standard.\n\t+ Updated all object handles (TaskHandle_t, QueueHandle_t, etc.) to be\n\t  unique types instead of void pointers, improving type safety.  (this was\n\t  attempted some years back but had to be backed out due to bugs in some\n\t  debuggers).  Note this required the pvContainer member of a ListItem_t\n\t  struct to be renamed - set configENABLE_BACKWARD_COMPATIBILITY to 1 if\n\t  this causes an issue.\n\t+ Added configUSE_POSIX_ERRNO to enable per task POSIX style errno\n\t  functionality in a more user friendly way - previously the generic thread\n\t  local storage feature was used for this purpose.\n\t+ Added Xtensa port and demo application for the XCC compiler.\n\t+ Changed the implementation of vPortEndScheduler() for the Win32 port to\n\t  simply call exit( 0 ).\n\t+ Bug fix in vPortEnableInterrupt() for the GCC Microblaze port to protect\n\t  the read modify write access to an internal Microblaze register.\n\t+ Fix minor niggles when the MPU is used with regards to prototype\n\t  differences, static struct size differences, etc.\n\t+ The usStackHighWaterMark member of the TaskStatus_t structure now has type\n\t  configSTACK_DEPTH_TYPE in place of uint16_t - that change should have been\n\t  made when the configSTACK_DEPTH_TYPE type (which gets around the previous\n\t  16-bit limit on stack size specifications) was introduced.\n\t+ Added the xMessageBufferNextLengthBytes() API function and likewise stream\n\t  buffer equivalent.\n\t+ Introduce configMESSAGE_BUFFER_LENGTH_TYPE to allow the number of bytes\n\t  used to hold the length of a message in the message buffer to be reduced.\n\t  configMESSAGE_BUFFER_LENGTH_TYPE default to size_t, but if, for example,\n\t  messages can never be more than 255 bytes it could be set to uint8_t,\n\t  saving 3 bytes each time a message is written into the message buffer\n\t  (assuming sizeof( size_t ) is 4).\n\t+ Updated the StaticTimer_t structure to ensure it matches the size of the\n\t  Timer_t structure when the size of TaskFunction_t does not equal the size\n\t  of void *.\n\t+ Update various Xilinx demos to use 2018.1 version of the SDK tools.\n\t+ Various updates to demo tasks to maintain test coverage.\n\t+ FreeRTOS+UDP was removed in FreeRTOS V10.1.0 as it was replaced by\n\t  FreeRTOS+TCP, which was brought into the main download in FreeRTOS\n\t  V10.0.0.  FreeRTOS+TCP can be configured as a UDP only stack, and\n\t  FreeRTOS+UDP does not contain the patches applied to FreeRTOS+TCP.\n\n\tFreeRTOS+TCP Changes:\n\n\t+ Multiple security improvements and fixes in packet parsing routines, DNS\n\t  caching, and TCP sequence number and ID generation.\n\t+ Disable NBNS and LLMNR by default.\n\t+ Add TCP hang protection by default.\n\n\tWe thank Ori Karliner of Zimperium zLabs Team for reporting these issues.\n\n\nChanges between FreeRTOS V10.0.0 and FreeRTOS V10.0.1, released December 20 2017\n\n\t+ Fix position of \"#if defined( __cplusplus )\" in stream_buffer.h.\n\t+ Correct declarations of MPU_xQueuePeek() and MPU_xQueueSemaphoreTake() in\n\t  mpu_prototypes.h.\n\t+ Correct formatting in vTaskList() helper function when it prints the state\n\t  of the currently executing task.\n\t+ Introduce #error if stream_buffer.c is built without\n\t  configUSE_TASK_NOTIFICATIONS set to 1.\n\t+ Update FreeRTOS+TCP to V2.0.0\n\t\t- Improve the formatting of text that displays the available netword\n\t\t  interfaces when FreeRTOS+TCP is used on Windows with WinPCap.\n\t\t- Introduce ipconfigSOCKET_HAS_USER_WAKE_CALLBACK option to enable a user\n\t\t  definable callback to execute when data arrives on a socket.\n\nChanges between FreeRTOS V9.0.1 and FreeRTOS V10.0.0:\n\n\tThe FreeRTOS kernel is now MIT licensed: https://www.FreeRTOS.org/license\n\n\tNew Features and components:\n\n\t+ Stream Buffers - see https://www.FreeRTOS.org/RTOS-stream-buffer-example.html\n\t+ Message Buffers - see https://www.FreeRTOS.org//RTOS-message-buffer-example.html\n\t+ Move FreeRTOS+TCP into the main repository, along with the basic Win32\n\t  TCP demo FreeRTOS_Plus_TCP_Minimal_Windows_Simulator.\n\n\tNew ports or demos:\n\n\t+ Added demo for TI SimpleLink CC3220 MCU.\n\t+ Added MPU and non MPU projects for Microchip CEC and MEC 17xx and 51xx\n\t  MCUs.\n\t+ Added CORTEX_MPU_Static_Simulator_Keil_GCC demo to test static allocation\n\t  in the MPU port.\n\n\tFixes or enhancements:\n\n\t+ Cortex-M ports push additional register prior to calling\n\t  vTaskSwitchContext to ensure 8-byte alignment is maintained.  Only\n\t  important if a user defined tick hook function performs an operation that\n\t  requires 8-byte alignment.\n\t+ Optimisations to the implementation of the standard tickless idle mode on\n\t  Cortex-M devices.\n\t+ Improvements to the Win32 port including using higher priority threads.\n\t+ Ensure interrupt stack alignment on PIC32 ports.\n\t+ Updated GCC TriCore port to build with later compiler versions.\n\t+ Update mpu_wrappers.c to support static allocation.\n\t+ The uxNumberOfItems member of List_t is now volatile - solving an issue\n\t  when the IAR compiler was used with maximum optimization.\n\t+ Introduced configRECORD_STACK_HIGH_ADDRESS.  When set to 1 the stack start\n\t  address is saved into each task's TCB (assuming stack grows down).\n\t+ Introduced configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H to allow user defined\n\t  functionality, and user defined initialisation, to be added to FreeRTOS's\n\t  tasks.c source file.  When configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H is\n\t  set to 1 a user provided header file called freertos_task_c_additions.h\n\t  will be included at the bottom of tasks.c.  Functions defined in that\n\t  header file can call freertos_tasks_c_additions_init(), which in turn\n\t  calls a macro called FREERTOS_TASKS_C_ADDITIONS_INIT(), if it is defined.\n\t  FREERTOS_TASKS_C_ADDITIONS_INIT() can be defined in FreeRTOSConfig.h.\n\t+ Introduced configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( x ) which can be\n\t  defined by a user in FreeRTOSConfig.h.  The macro is called before\n\t  assessing whether to enter tickless idle mode or not.  If the macro sets\n\t  x to zero then tickless idle mode will not be entered.  This allows users\n\t  to abort tickless idle mode entry before the tickless idle function is\n\t  even called - previously it was only possible to abort from within the\n\t  tickless idle function itself.\n\t+ Added configPRINTF(), which can be defined by users to allow all libraries\n\t  to use the same print formatter.\n\t+ Introduced configMAX() and configMIN() macros which default to standard\n\t  max( x, y ) and min( x, y ) macro behaviour, but can be overridden if the\n\t  application writer defines the same macros in FreeRTOSConfig.h.\n\t+ Corrected the definition of StaticTask_t in the case where\n\t  INCLUDE_xTaskAbortDelay is set to 1.\n\t+ Introduced configTIMER_SERVICE_TASK_NAME and configIDLE_TASK_NAME, both of\n\t  which can be defined to strings in FreeRTOSConfig.h to change the default\n\t  names of the timer service and idle tasks respectively.\n\t+ Only fill the stack of a newly created task with a known value if stack\n\t  checking, or high water mark checking/viewing, is in use - removing the\n\t  dependency on memset() in other cases.\n\t+ Introduced xTaskCreateRestrictedStatic() so static allocation can be used\n\t  with the MPU.\n\t+ Ensure suspended tasks cannot be unsuspended by a received task\n\t  notification.\n\t+ Fix race condition in vTaskSetTimeOutState().\n\t+ Updated trace recorder files to the latest version.\n\nChanges since FreeRTOS V9.0.0:\n\n\t+ Priority dis-inheritance behaviour has been enhanced in the case where a\n\t  task that attempted to take a mutex that was held by a lower priority task\n\t  timed out before it was able to obtain the mutex (causing the task that\n\t  holds the mutex to have its priority raised, then lowered again, in\n\t  accordance with the priority inheritance protocol).\n\t+ Split the overloaded xQueueGenericReceive() function into three separate\n\t  dedicated functions.\n\t+ Allow the default human readable text names given to the Idle and Timer\n\t  tasks to be overridden by defining the configIDLE_TASK_NAME and\n\t  configTIMER_SERVICE_TASK_NAME definitions respectively in FreeRTOSConfig.h.\n\t+ Introduced configINITIAL_TICK_COUNT to allow the tick count to take a\n\t  value of than than 0 when the system boots.  This can be useful for\n\t  testing purposes - although setting configUSE_16_BIT_TICKS to 1 can also\n\t  be used to test frequent tick overflows.\n\t+ Ensure the Cortex-M SysTick count is cleared to zero before starting the\n\t  first task.\n\t+ Add configASSERT() into ARM Cortex-M ports to check the number of priority\n\t  bit settings.\n\t+ Clear the 'control' register before starting ARM Cortex-M4F ports in case\n\t  the FPU is used before the scheduler is started.  This just saves a few\n\t  bytes on the main stack as it prevents space being left for a later save\n\t  of FPU registers.\n\t+ Added xSemaphoreGetMutexHolderFromISR().\n\t+ Corrected use of portNVIC_PENDSVSET to portNVIC_PENDSVSET_BIT in MPU ports.\n\t+ Introduced configSTACK_DEPTH_TYPE to allow users to change the type used\n\t  to specify the stack size when using xTaskCreate().  For historic reasons,\n\t  when FreeRTOS was only used on small MCUs, the type was set to uint16_t,\n\t  but that can be too restrictive when FreeRTOS is used on larger\n\t  processors.  configSTACK_DEPTH_TYPE defaults to uint16_t.\n\t  xTaskCreateStatic(), being a newer function, used a uint32_t.\n\t+ Increase the priority of the Windows threads used by the Win32 port.  As\n\t  all the threads run on the same core, and the threads run with very high\n\t  priority, there is a risk that the host will become unresponsive, so also\n\t  prevent the Windows port executing on single core hosts.\n\nChanges between FreeRTOS V9.0.0 and FreeRTOS V9.0.0rc2 released May 25 2016:\n\n\tSee https://www.FreeRTOS.org/FreeRTOS-V9.html\n\n\tRTOS kernel updates:\n\n\t+ The prototype of the new xTaskCreateStatic() API function was modified to\n\t  remove a parameter and improve compatibility with other new\n\t  \"CreateStatic()\" API functions.  The stack size parameter in\n\t  xTaskCreateStatic() is now uint32_t, which changes the prototype of the\n\t  callback functions.  See the following URL:\n\t  https://www.FreeRTOS.org/xTaskCreateStatic.html\n\t+ GCC ARM Cortex-A port:  Introduced the configUSE_TASK_FPU_SUPPORT\n\t  constant.  When configUSE_TASK_FPU_SUPPORT is set to 2 every task is\n\t  automatically given a floating point (FPU) context.\n\t+ GCC ARM Cortex-A port:  It is now possible to automatically save and\n\t  restore all floating point (FPU) registers on entry to each potentially\n\t  nested interrupt by defining vApplicationFPUSafeIRQHandler() instead of\n\t  vApplicationIRQHandler().\n\t+ All ARM Cortex-M3/4F/7 ports:  Clear the least significant bit of the task\n\t  entry address placed onto the stack of a task when the task is created for\n\t  strict compliance with the ARM Cortex-M3/4/7 architecture documentation\n\t  (no noticeable effect unless using the QMEU emulator).\n\t+ Added GCC and Keil ARM Cortex-M4F MPU ports - previously the MPU was only\n\t  supported on ARM Cortex-M3.\n\t+ ARM Cortex-M3/4F MPU ports:  Update to fully support the FreeRTOS V9.0.0\n\t  API (other than static object creation) and added the\n\t  FreeRTOS/Demo/CORTEX_MPU_Simulator_Keil_GCC demo application to\n\t  demonstrate how to use the updated MPU port.\n\t+ All ARM Cortex-M3/4F/7 ports:  Add additional barrier instructions to the\n\t  default low power tickless implementation.\n\t+ All ARM Cortex-M0 ports:  Prevent an item being left on the stack of the\n\t  first task that executes.\n\t+ Win32 ports:  Reduce the amount of stack used and change the way Windows\n\t  threads are deleted to increase the maximum execution time.\n\t+ Add an ARM Cortex-M4F port for the MikroC compiler.  Ensure to read the\n\t  documentation page for this port before use.\n\t+ MPS430X IAR port:  Update to be compatible with the latest EW430 tools\n\t  release.\n\t+ IAR32 GCC port:  Correct vPortExitCritical() when\n\t  configMAX_API_CALL_INTERRUPT_PRIORITY == portMAX_PRIORITY.\n\t+ For consistency vTaskGetTaskInfo() now has the alias vTaskGetInfo(),\n\t  xTaskGetTaskHandle() now has the alias xTaskGetHandle() and\n\t  pcQueueGetQueueName() now has an alias pcQueueGetName().\n\t+ Fix various errors in comments and compiler warnings.\n\n\tDemo application updates:\n\n\t+ Update Atmel Studio projects to use Atmel Studio 7.\n\t+ Update Xilinx SDK projects to use the 2016.1 version of the SDK.\n\t+ Remove dependency on legacy IO libraries from the PIC32 demos.\n\t+ Move the Xilinx UltraScale Cortex-R5 demo into the main distribution.\n\t+ Update the MSP432 libraries to the latest version.\n\t+ Add Microchip CEC1302 (ARM Cortex-M4F) demos for GCC, Keil and MikroC\n\t  compilers.\n\t+ Move the Atmel SAMA5D2 demo into the main distribution.\n\nChanges between FreeRTOS V9.0.0rc1 and FreeRTOS V9.0.0rc2 (release candidate 2)\nreleased March 30 2016:\n\n\tNOTE - See https://www.FreeRTOS.org/FreeRTOS-V9.html for details\n\n\t+ The functions that create RTOS objects using static memory allocation have\n\t  been simplified and will not revert to using dynamic allocation if a\n\t  buffer is passed into a function as NULL.\n\t+ Introduced the configSUPPORT_DYNAMIC_ALLOCATION configuration constant to\n\t  allow a FreeRTOS application to be built without a heap even being being\n\t  defined. The Win32 example located in the\n\t  /FreeRTOS/demo/WIN32-MSVC-Static-Allocation-Only directory is provided as\n\t  a reference for projects that do not include a FreeRTOS heap.\n\t+ Minor run-time optimisations.\n\t+ Two new low power tickless implementations that target Silicon Labs EFM32\n\t  microcontrollers.\n\t+ Addition of the xTimerGetPeriod() and xTimerGetExpireTime() API functions.\n\nChanges between FreeRTOS V8.2.3 and FreeRTOS V9.0.0rc1 (release candidate 1)\nreleased February 19 2016:\n\n\tRTOS Kernel Updates:\n\n\t+ Major new feature - tasks, semaphores, queues, timers and event groups can\n\t  now be created using statically allocated memory, so without any calls to\n\t  pvPortMalloc().\n\t+ Major new features - Added the xTaskAbortDelay() API function which allows\n\t  one task to force another task to immediately leave the Blocked state,\n\t  even if the event the blocked task is waiting for has not occurred, or the\n\t  blocked task's timeout has not expired.\n\t+ Updates necessary to allow FreeRTOS to run on 64-bit architectures.\n\t+ Added vApplicationDaemonTaskStartupHook() which executes when the RTOS\n\t  daemon task (which used to be called the timer service task) starts\n\t  running.  This is useful if the application includes initialisation code\n\t  that would benefit from executing after the scheduler has been started.\n\t+ Added the xTaskGetTaskHandle() API function, which obtains a task handle\n\t  from the task's name.  xTaskGetTaskHandle() uses multiple string compare\n\t  operations, so it is recommended that it is called only once per task.\n\t  The handle returned by xTaskGetTaskHandle() can then be stored locally for\n\t  later re-use.\n\t+ Added the pcQueueGetQueueName() API function, which obtains the name of\n\t  a queue from the queue's handle.\n\t+ Tickless idling (for low power applications) can now also be used when\n\t  configUSE_PREEMPTION is 0.\n\t+ If one task deletes another task, then the stack and TCB of the deleted\n\t  task is now freed immediately.  If a task deletes itself, then the stack\n\t  and TCB of the deleted task are freed by the Idle task as before.\n\t+ If a task notification is used to unblock a task from an ISR, but the\n\t  xHigherPriorityTaskWoken parameter is not used, then pend a context switch\n\t  that will then occur during the next tick interrupt.\n\t+ Heap_1.c and Heap_2.c now use the configAPPLICATION_ALLOCATED_HEAP\n\t  settings, which previously was only used by heap_4.c.\n\t  configAPPLICATION_ALLOCATED_HEAP allows the application writer to declare\n\t  the array that will be used as the FreeRTOS heap, and in-so-doing, place\n\t  the heap at a specific memory location.\n\t+ TaskStatus_t structures are used to obtain details of a task.\n\t  TaskStatus_t now includes the bae address of the task's stack.\n\t+ Added the vTaskGetTaskInfo() API function, which returns a TaskStatus_t\n\t  structure that contains information about a single task.  Previously this\n\t  information could only be obtained for all the tasks at once, as an array\n\t  of TaskStatus_t structures.\n\t+ Added the uxSemaphoreGetCount() API function.\n\t+ Replicate previous Cortex-M4F and Cortex-M7 optimisations in some\n\t  Cortex-M3 port layers.\n\n\tDemo Application Updates:\n\n\tFurther demo applications will be added prior to the final FreeRTOS V9\n\trelease.\n\n\t+ Updated SAM4L Atmel Studio project to use Atmel Studio 7.\n\t+ Added ARM Cortex-A53 64-bit port.\n\t+ Added a port and demo for the ARM Cortex-A53 64-bit cores on the Xilinx\n\t  Ultrascale MPSoC.\n\t+ Added Cortex-M7 SAME70 GCC demo.\n\t+ Added EFM32 Giant and Wonder Gecko demos.\n\n\nChanges between V8.2.2 and V8.2.3 released October 16, 2015\n\n\tRTOS kernel updates:\n\n\t+ Fix bug identified in a modification made in V8.2.2 to the software timer\n\t  code that allows tickless low power applications to sleep indefinitely\n\t  when software timers are used.\n\t+ Simplify and improve efficiency of stack overflow checking.\n\t+ Add xTaskNotifyStateClear() API function.\n\t+ New IAR and GCC Cortex-R ports for microprocessors that do not use an ARM\n\t  generic interrupt controller (GIC).\n\t+ New PIC32MEC14xx port.\n\t+ Add support for PIC32MZ EF parts (with floating point) into the PIC32MZ\n\t  port.\n\t+ Zynq7000 port layer now declares the functions that setup and clear the\n\t  tick interrupt as weak symbols so they can be overridden by the\n\t  application, and uses a global XScuGic object so the same object can be\n\t  used by the application code.\n\t+ Introduced configUSE_TASK_FPU_SUPPORT, although the PIC32MZ EF port is\n\t  currently the only port that uses it.\n\t+ Updates to RL78 and 78K0 IAR port layers to improve support for\n\t  combinations of memory models.\n\t+ Minor updates to heap_5.c to remove compiler warnings generated by some\n\t  compilers.\n\t+ License simplifications.  See /FreeRTOS/License/license.txt in the\n\t  official distribution.\n\n\tFreeRTOS+ updates:\n\n\t+ Update directory names to use WolfSSL instead of CyaSSL, inline with\n\t  WolfSSL's re-branding.\n\t+ Update to latest WolfSSL code.\n\t+ Update to latest FreeRTOS+Trace recorder code.\n\t+ Add in the FreeRTOS+Trace recorder library required for streaming trace.\n\n\tDemo application changes:\n\n\t+ Add demo applications for Renesas RZ/T (Cortex-R), PIC32MZ EF (PIC32 with\n\t  floating point hardware), PIC32MEC14xx, RX71M, RX113 and RX231.\n\t+ General tidy up of spelling and compiler warnings.\n\n\nChanges between V8.2.1 and V8.2.2 released August 12, 2015\n\n\tRTOS kernel updates:\n\n\t+ Added Intel IA32/x86 32-bit port.\n\t+ General maintenance.\n\t+ PRIVILEGED_FUNCTION and PRIVILEGED_DATA macros, which are used in memory\n\t  protected systems, have been added to the newer event group and software\n\t  timer functions.\n\t+ Add the errno definitions used by FreeRTOS+ components into projdefs.h.\n\t+ Remove the restriction that prevented tick-less idle implementations\n\t  waiting indefinitely when software timers were used in the same\n\t  application.\n\t+ Introduce xTaskNotifyAndQueryFromISR() as the interrupt safe version of\n\t  xTaskNotifyAndQuery().\n\t+ Add additional NOPs to the MSP430X port layers to ensure strict compliance\n\t  with the hardware documentation.\n\t+ Microblaze port: Added option for port optimised task selection.\n\t+ Microblaze port: Previously tasks inherited the exception enable state\n\t  at the time the task was created.  Now all tasks are created with\n\t  exceptions enabled if the Microblaze design supports exceptions.\n\t+ Windows port: Add additional safe guards to ensure the correct start up\n\t  sequence and thread switching timing.\n\t+ Windows port: Improve the implementation of the port optimised task\n\t  selection assembly code.\n\t+ Update heap_4 and heap_5 to allow use on 64-bit processors.\n\t+ Simplify the code that creates a queue.\n\t+ General improved tick-less idle behaviour.\n\t+ Ensure none of the variables in the common kernel files are initialised to\n\t  anything other than zero.\n\t+ Correct calculation of xHeapStructSize in heap_4 and heap_5.\n\n\tDemo application updates:\n\n\t+ Added demo project for the new IA32/x86 port that targets the Galileo\n\t  hardware.\n\t+ Added MSP430FR5969 demos (previously provided as a separate download).\n\t+ Added FreeRTOS BSP repository for automatic creation of FreeRTOS\n\t  applications in the Xilinx SDK.\n\t+ Added Atmel Studio / GCC project for the SAMV71 (ARM Cortex-M7)\n\t+ Update Xilinx SDK projects to use version 2015.2 of the SDK.\n\t+ Remove Microblaze demos that were using obsolete tools.\n\t+ Add MSP43FR5969 IAR and CCS demos.\n\n\tFreeRTOS+ Updates:\n\n\t+ Updated FreeRTOS+Trace recorder library, which requires an update to the\n\t  FreeRTOS+Trace application.\n\t+ Added Reliance Edge source code and demo application.  Reliance edge is\n\t  a fail safe transactional file system ideal for applications that require\n\t  file storage, and especially when high reliability is essential.\n\t+ Introduce configAPPLICATION_PROVIDES_cOutputBuffer to allow FreeRTOS+CLI\n\t  users to place the output buffer at a fixed memory address.\n\t+ Improve the NetworkInterface.c file provided for the Windows port of\n\t  FreeRTOS+UDP.\n\nChanges between V8.2.0 and V8.2.1 released 24th March 2015.\n\n\tRTOS kernel updates:\n\n\t+ Added user definable and flexible thread local storage facility.\n\t+ Added vTimerSetTimerID() API function to complement the pvTimerGetTimerID()\n\t  function to allow the timer's ID to be used as timer local storage.\n\t+ Fixed a potential issue related to the use of queue sets from an ISR.\n\t+ Some updates to the Xilinx Microblaze GCC port.\n\t+ Added ARM Cortex-M4F port for Texas Instruments Code Composer Studio.\n\t+ Added ARM Cortex-M7 r0p1 port layer for IAR, GCC and Keil which contains a\n\t  minor errata work around.  All other ARM Cortex-M7 core revisions should\n\t  use the ARM Cortex-M4F port.\n\t+ Exclude the whole of croutine.c if configUSE_CO_ROUTINES is set to 0.\n\t+ Change some data types from uint32_t to size_t in preparation for 64-bit\n\t  Windows port.\n\t+ Update the PIC32 port to remove deprecation warnings output by the latest\n\t  XC32 compilers.\n\t+ Fix bug when xQueueOverwrite() and xQueueOverwrite() from ISR are used to\n\t  overwrite items in two queues that are part of the same set.\n\n\tDemo application updates:\n\n\t+ Added demo application for TI's ARM Cortex-M4F based MSP432\n\t  microcontroller using IAR, Keil and CCS compilers.\n\t+ Added demo application for STM32F ARM Cortex-M7 based microcontroller\n\t  using IAR and Keil.\n\t+ Added demo application for Atmel SAMV71 ARM Cortex-M7 based\n\t  microcontroller using IAR and Keil.\n\t+ Added Microblaze demo that uses the 2014.4 version of the Xilinx SDK and\n\t  runs on the KC705 evaluation board (Kintex FPGA).\n\nChanges between V8.1.2 and V8.2.0 released 16th January 2015\n\n\tChanges between release candidate 1 and the official release are restricted\n\tto maintenance only.\n\n\tSignificant RTOS kernel updates:\n\n\t+ MAJOR NEW FEATURE!  Task notifications.  Please see the following URL for\n\t  details: https://www.FreeRTOS.org/RTOS-task-notifications.html\n\t+ NEW HEADER FILE REQUIRED!  Obsolete definitions have been separated into\n\t  a new header file called FreeRTOS/Source/include/deprecated_definitions.h.\n\t  This header file must be present to build.  Note some of the obsolete\n\t  definitions are still used by very old demo application projects.\n\n\tOther RTOS kernel updates:\n\n\t+ Made xSemaphoreGiveFromISR() a function rather than a macro that calls\n\t  xQueueGenericSendFromISR().  This allows for major performance\n\t  enhancements at the expense of some additional code size if both functions\n\t  are used in the same application.  NOTE:  In most uses cases such use of\n\t  a semaphore can now be replaced with a task notification which is smaller\n\t  and faster still.\n\t+ The TCB is now always allocated such that the task's stack grows away from\n\t  the TCB (improves debugging of stack overflows as the overflow will not\n\t  overwrite the task's name).\n\t+ GCC, IAR and Keil Cortex-M4F ports now use more inlining (performance\n\t  enhancements at the cost of a little additional code space).\n\t+ Queues are now allocated with a single call to pvPortMalloc() which\n\t  allocates both the queue structure and the queue storage area.\n\t+ Introduced a new critical section macro for reading the tick count that\n\t  defines away to nothing in cases where the width of the tick allows the\n\t  tick count to be read atomically (performance benefits - especially when\n\t  optimisation is on).\n\t+ Introduced configAPPLICATION_ALLOCATED_HEAP in heap_4.c to allow the\n\t  application writer to provide their own heap array - and in so doing\n\t  control the location of the heap.\n\t+ Introduced configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES which, when set, will\n\t  include known values in both list and list item structures.  The values\n\t  are intended to assist debugging.  If the values get overwritten then it\n\t  is likely application code has written over RAM used by the kernel.\n\t+ configASSERT()s in all Cortex-M ports used to test the lowest 5 bits of\n\t  the interrupt control register to detect taskENTER_CRITICAL() being called\n\t  from an interrupt.  This has been changed to test all 8 bits.\n\t+ Introduced uxTaskPriorityGetFromISR().\n\t+ Microblze V8 port now tests XPAR_MICROBLAZE_0_USE_FPU for inequality to 0\n\t  rather than equality to 1, and 2 and 3 are also valid values.\n\t+ Cortex-A5 GIC-less port no longer passes the address of the interrupting\n\t  peripheral into the interrupt handler.\n\t+ Fix an issue in FreeRTOS-MPU where an attempt was made to free the stack\n\t  belonging to a task when the task was deleted, even when the stack was\n\t  allocated statically.\n\t+ Utility (helper) functions that format task statistic information into\n\t  human readable tables now pad task names with spaces to ensure columns\n\t  line up correctly even where task name lengths vary greatly.\n\t+ Update FreeRTOS+Trace recorder library to version 2.7.0.\n\n\tDemo application updates:\n\n\t+ Added two new standard demo task sets:  IntSemTest and TaskNotify.\n\t+ Added port and demo application for Atmel SAMA5D4 Cortex-A5 MPU.\n\t+ Added demo application for Altera Cyclone V Cortex-A9 MPU.\n\t+ Updated Zynq demo to use version 2014.4 of Xilinx's SDK and added in\n\t  demo tasks for new RTOS features.\n\t+ Updated Atmel SAM4E and SAM4S demos to include a lot of additional test\n\t  and demo tasks.\n\t+ Fixed a corner case issue in Atmel SAM4L low power tickless\n\t  implementation, and added button interrupt handling.\n\t+ Make the interrupt queue tests more tolerant to heave CPU loads.\n\t+ Updated MSVC FreeRTOS simulator demo to include the latest standard test\n\t  and demo tasks.\n\t+ Updated MingW/Eclipse FreeRTOS simulator demo to match the FreeRTOS MSVC\n\t  simulator demo.\n\t+ Updated all demos that use FreeRTOS+Trace to work with the latest trace\n\t  recorder code.\n\n\nChanges between V8.1.1 and V8.1.2 released September 2nd 2014\n\n\tMove the defaulting of configUSE_PORT_OPTIMISED_TASK_SELECTION into the\n\tindividual port layers where necessary so it does not affect ports that do\n\tnot support the definition.\n\nChanges between V8.1.0 and V8.1.1 released August 29th 2014\n\n\tBy popular requests - a minor patch to V8.1.0 to re-instate the ability to\n\tgive a mutex type semaphore (with priority inheritance) from an interrupt\n\thandler.\n\nChanges between V8.0.1 and V8.1.0 released August 26th 2014\n\n\tFreeRTOS scheduler, kernel, demo and test updates:\n\n\t+ Improved the priority inheritance algorithms to assist integration with\n\t  off the shelf middleware that may hold multiple mutexes simultaneously.\n\t+ Introduce heap_5.c, which is similar to heap_4.c but allows the heap to\n\t  span multiple non-contiguous memory regions.\n\t+ Updated all Cortex-A9 ports to help trap a couple of common usage errors -\n\t  the first being when a task incorrectly attempts to exit its implementing\n\t  function and the second being when a non interrupt safe API function is\n\t  called from an interrupt.\n\t+ Update all Cortex-A9 ports to remove obsolete mode switches prior to\n\t  restoring a task context.\n\t+ configUSE_PORT_OPTIMISED_TASK_SELECTION now defaults to 1 instead of 0.\n\t+ Update all Cortex-M3/4F ports to trap a non interrupt safe API function\n\t  being called from an interrupt handler.\n\t+ Simplify the alignment checks in heap_4.c.\n\t+ Update the MSVC Windows simulator demo to use heap_5.c in place of\n\t  heap_4.c to ensure end users have an example to refer to.\n\t+ Updated standard demo test code to test the new priority inheritance\n\t  algorithms.\n\t+ Updated the standard demo tasks to make use of stdint and the FreeRTOS\n\t  specific typedefs that were introduced in FreeRTOS V8.0.0.\n\t+ Introduce the pdMS_TO_TICKS() macro as a more user friendly and intuitive\n\t  alternative to pdTICKS_PER_MS - both of which can be used to convert a\n\t  time specified in milliseconds to a time specified in RTOS ticks.\n\t+ Fix a bug in the Tasking compiler's Cortex-M port that resulted in an\n\t  incorrect value being written to the basepri register.  This only effects\n\t  users of the Tasking compiler.\n\t+ Update the Zynq demo to use version 2014.2 of the SDK and add in an lwIP\n\t  example that demonstrates lwIP being used with both its raw and sockets\n\t  interfaces.\n\t+ Updated the CCS Cortex-R4 port to enable it to be built with the latest\n\t  CCS compiler.\n\n\tNew ports and demo applications:\n\n\t+ Two Renesas RX64M ports (RXv2 core) and demos introduced, one for the GCC\n\t  compiler and one for the Renesas compiler.  Both demos use e2 studio.\n\t+ Generic IAR Cortex-A5 port (without any reliance on a GIC) introduced.\n\t  The new port is demonstrated on an Atmel SAMA5D3 XPlained board.\n\n\tFreeRTOS+ component updates:\n\n\t+ Update CyaSSL to the latest version.\n\t+ Updated the FreeRTOS+ components supplied directly by Real Time Engineers\n\t  Ltd. to make use of stdint and the FreeRTOS specific typedefs that were\n\t  introduced in FreeRTOS V8.0.0.\n\t+ Rework and simplify the FreeRTOS+FAT SL RAM disk driver.\n\n\tMiscellaneous updates and maintenance:\n\n\t+ Update the IAR and DS-5/ARM RZ demos to target the official RZ RSK\n\t  hardware in place of the previously targeted Renesas internal (not\n\t  publicly available) hardware.\n\t+ Various other maintenance tasks.\n\n\nChanges between V8.0.0 and V8.0.1 released 2nd May 2014\n\n\t+ Minor fixes to the event group functionality that was released in V8.0.0.\n\t  The 'clear bits from ISR' functionality is now implemented using a\n\t  deferred interrupt callback instead of a function, and the 'wait bits' and\n\t  'task sync' functions now correctly clear internal control bits before\n\t  returning a value in every possible path through the respective functions.\n\t+ Ensure the updating of internal control data is protected by a critical\n\t  section after a task is deleted or suspended.\n\t+ Minor fixes to FreeRTOS+FAT SL - namely seeking beyond the end of a file\n\t  when the offset was not a multiple of the sector size.\n\t+ Ensure Cortex-A9 system registers are only ever accessed as 32-bit values,\n\t  even when only the lest significant byte of the register is implemented.\n\n\tOther updates:\n\n\t+ Updated the XMC4200 IAR project so it links with version 7.x of the IAR\n\t  tools.\n\t+ Add RL78L1C demo.\n\t+ Add pcTimerGetName() API function.\n\t+ Call _reclaim_reent() when a task is deleted if configUSE_NEWLIB_REENTRANT\n\t  is defined.\n\nChanges between V7.6.0 and V8.0.0 released 19th Feb 2014\n\n\thttps://www.FreeRTOS.org/upgrading-to-FreeRTOS-V8.html\n\n\tFreeRTOS V8.x.x is a drop-in compatible replacement for FreeRTOS V7.x.x,\n\talthough a change to the type used to reference character strings may result\n\tin application code generating a few (easily clearable) compiler warnings\n\tafter the upgrade, and an updated typedef naming convention means use of the\n\told typedef names is now discouraged.\n\tSee https://www.FreeRTOS.org/upgrading-to-FreeRTOS-V8.html for full\n\tinformation.\n\n\tNew features and functionality:\n\n\t+ Event groups - see https://www.FreeRTOS.org/FreeRTOS-Event-Groups.html\n\t+ Centralised deferred interrupt processing - see\n\t  https://www.FreeRTOS.org/xTimerPendFunctionCallFromISR.html\n\n\tOther updates:\n\n\t+ Previously, when a task left the Blocked state, a context switch was\n\t  performed if the priority of the unblocked task was greater than or equal\n\t  to the priority of the Running task.  Now a context switch is only\n\t  performed if the priority of the unblocked task is greater than the\n\t  priority of the Running task.\n\t+ New low power tickless demonstration project that targets the ST STM32L\n\t  microcontroller - see\n\t  https://www.FreeRTOS.org/STM32L-discovery-low-power-tickless-RTOS-demo.html\n\t+ Add xPortGetMinimumEverFreeHeapSize() to heap_4.c.\n\t+ Small change to the tickless low power implementation on the SAM4L to\n\t  ensure the alarm value (compare match value) cannot be set to zero when a\n\t  tickless period is exited due to an interrupt originating from a source\n\t  other than the RTOS tick.\n\t+ Update the GCC/Eclipse Win32 simulator demo to make better use of Eclipse\n\t  resource filters and match the functionality of the MSVC equivalent.\n\t+ xTaskIsTaskSuspended() is no longer a public function.  Use\n\t  eTaskGetState() in its place.\n\t+ Improved trace macros, including tracing of heap usage.\n\t+ Remove one level of indirection when accepting interrupts on the PIC32MZ.\n\t+ Add Cortex-A9 GCC port layer.\n\t+ Add Xilinx Zynq demo application.\n\n\nChanges between V7.5.3 and V7.6.0 released 18th November 2013\n\n\tV7.6.0 changes some behaviour when the co-operative scheduler is used (when\n\tconfigUSE_PREEMPTION is set to 0).  It is important to note that the\n\tbehaviour of the pre-emptive scheduler is unchanged - the following\n\tdescription only applies when configUSE_PREEMPTION is set to 0:\n\n\tWHEN configUSE_PREEMPTION IS SET TO 0 (which is in a small minority of\n\tcases) a context switch will now only occur when a task places itself into\n\tthe Blocked state, or explicitly calls taskYIELD().  This differs from\n\tprevious versions, where a context switch would also occur when implicitly\n\tmoving a higher priority task out of the Blocked state.  For example,\n\tpreviously, WHEN PREEMPTION WAS TURNED OFF, if task A unblocks task B by\n\twriting to a queue, then the scheduler would switch to the higher priority\n\ttask.  Now, WHEN PREEMPTION IS TURNED OFF, if task A unblocks task B by\n\twriting to a queue, task B will not start running until task A enters the\n\tBlocked state or task A calls taskYIELD().  [If configUSE_PREEMPTION is not\n\tset to 0, so the normal pre-emptive scheduler is being used, then task B\n\twill start running immediately that it is moved out of the Blocked state].\n\n\tOther changes:\n\n\t+ Added a port layer and a demo project for the new PIC32MZ architecture.\n\t+ Update the PIC32MX port layer to re-introduce some ehb instructions that\n\t  were previously removed, add the ability to catch interrupt stack\n\t  overflows (previously only task stack overflows were trapped), and also\n\t  add the ability to catch an application task incorrectly attempting to\n\t  return from its implementing function.\n\t+ Make dramatic improvements to the performance of the Win32 simulator port\n\t  layer.\n\t+ Ensure tasks that are blocked indefinitely report their state as Blocked\n\t  instead of Suspended.\n\t+ Slight improvement to the Cortex-M4F port layers where previously one\n\t  register was inadvertently being saved twice.\n\t+ Introduce the xSemaphoreCreateBinary() API function to ensure consistency\n\t  in the semantics of how each semaphore type is created.  It is no longer\n\t  recommended to use vSemaphoreCreateBinary() (the version prefixed with a\n\t  'v'), although it will remain in the code for backward compatibility.\n\t+ Update the Cortex-M0 port layers to allow the scheduler to be started\n\t  without using the SVC handler.\n\t+ Added a build configuration to the PIC32MX MPLAB X demo project that\n\t  targets the PIC32 USB II starter kit.  Previously all the build\n\t  configurations required the Explorer 16 hardware.\n\t+ Some of the standard demo tasks have been updated to ensure they execute\n\t  correctly with the updated co-operative scheduling behaviour.\n\t+ Added comprehensive demo for the Atmel SAM4E, including use of\n\t  FreeRTOS+UDP, FreeRTOS+FAT SL and FreeRTOS+CLI.\n\n\tFreeRTOS+ Changes:\n\n\t+ Minor maintenance on FreeRTOS+UDP.\n\nChanges between V7.5.2 and V7.5.3 released October 14 2013\n\n\tKernel changes:\n\n\t+ Prior to V7.5.x yields requested from the tick hook would occur in the\n\t  same tick interrupt - revert to that original behaviour.\n\t+ New API function uxQueueSpacesAvailable().\n\t+ Introduced the prvTaskExitError() function to Cortex-M0, Cortex-M3/4\n\t  and Cortex-M4F ports.  prvTaskExitError() is used to trap tasks that\n\t  attempt to return from their implementing functions (tasks should call\n\t  vTaskDelete( NULL ); if they want to exit).\n\t+ The Cortex-M0 version of portSET_INTERRUPT_MASK_FROM_ISR and\n\t  portCLEAR_INTERRUPT_MASK_FROM_ISR are now fully nestable.\n\t+ Improved behaviour and robustness of the default Cortex-M tickless idle\n\t  behaviour.\n\t+ Add workaround for silicon errata PMU_CM001 in Infineon XMC4000 devices to\n\t  all Cortex-M4F ports.\n\t+ Add Cortex-M0 port for Keil.\n\t+ Updated Cortus port.\n\t+ Ensure _impure_ptr is initialised before the scheduler is started.\n\t  Previously it was not set until the first context switch.\n\n\tFreeRTOS+ changes:\n\n\t+ Update FreeRTOS+UDP to V1.0.1 - including direct integration of the\n\t  FreeRTOS+Nabto task, improvements to the DHCP behaviour, and a correction\n\t  to the test that prevents the network event hook being called on the first\n\t  network down event.  The FreeRTOS+UDP change history is maintained\n\t  separately.\n\t+ Correct the __NVIC_PRIO_BITS setting in the LPC18xx.h header files\n\t  provided in the NXP CMSIS library, then update the interrupts used by the\n\t  LPC18xx demos accordingly.\n\t+ Replace double quotes (\") with single quotes (') in FreeRTOS+CLI help\n\t  strings to ensure the strings can be used with the JSON descriptions used\n\t  in the FreeRTOS+Nabto demos.\n\n\tDemo and miscellaneous changes:\n\n\t+ Added demo for the Atmel SAMD20 Cortex-M0+.  The demo includes\n\t  FreeRTOS+CLI\n\t+ Added a demo for the Infineon Cortex-M0 that can be built with the IAR\n\t  Keil and GCC tools.\n\t+ Updated the Infineon XMC4000 demos for IAR, Keil, GCC and Tasking tools,\n\t  with additional build configurations to directly support the XMC4200 and\n\t  XMC4400 devices, in addition to the previously supported XMC4500.\n\t+ Updated the demo application.\n\t+ Added additional trace macros traceMALLOC and traceFREE to track heap\n\t  usage.\n\nChanges between V7.5.0 and V7.5.2 released July 24 2013\n\n\tV7.5.2 makes the new Cortex-M vPortCheckInterruptPriority() function\n\tcompatible with the STM32 standard peripheral driver library, and adds\n\tan extra critical section to the default low power tickless mode\n\timplementation.  Only users of the STM32 peripheral library or the default\n\ttickless implementation need update from version 7.5.0.\n\nChanges between V7.4.2 and V7.5.0 released July 19 2013\n\n\tV7.5.0 is a major upgrade that includes multiple scheduling and efficiency\n\timprovements, and some new API functions.\n\n\tCompatibility information for FreeRTOS users:\n\t  FreeRTOS V7.5.0 is backward compatible with FreeRTOS V7.4.0 with one\n\t  exception; the vTaskList() and vTaskGetRunTimeStats() functions are now\n\t  considered legacy, having been replaced by the single uxTaskGetSystemState()\n\t  function.  configUSE_STATS_FORMATTING_FUNCTIONS must be set to 1 in\n\t  FreeRTOSConfig.h for vTaskList() and vTaskGetRunTimeStats() to be\n\t  available.\n\n\tCompatibility information for FreeRTOS port writers:\n\t  vTaskIncrementTick() is now called xTaskIncrementTick() (because it now\n\t  returns a value).\n\n\tHeadline changes:\n\n\t+ Multiple scheduling and efficiency improvements.\n\t+ Core kernel files now pass PC-Lint V8 static checking without outputting\n\t  any warnings (information on the test conditions will follow).\n\n\tNew API functions:\n\n\t+ uxTaskGetSystemState() https://www.FreeRTOS.org/uxTaskGetSystemState.html\n\t+ xQueueOverwrite() https://www.FreeRTOS.org/xQueueOverwrite.html\n\t+ xQueueOverwriteFromISR()\n\t+ xQueuePeekFromISR()\n\n\tThe following ports and demos, which were previously available separately,\n\tare now incorporated into the main FreeRTOS zip file download:\n\n\t+ ARM Cortex-A9 IAR\n\t+ ARM Cortex-A9 ARM compiler\n\t+ Renesas RZ\n\t+ Microsemi SmartFusion2\n\n\tNew FreeRTOSConfig.h settings\n\thttp://shop.freertos.org/FreeRTOS_API_and_Configuration_Reference_s/1822.htm\n\n\t+ configUSE_TIME_SLICING\n\t+ configUSE_NEWLIB_REENTRANT\n\t+ configUSE_STATS_FORMATTING_FUNCTIONS\n\t+ configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS\n\n\tOther changes:\n\n\t+ (MPU port only) The configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS\n\t  options provides a mechanism that allows application writers to execute\n\t  certain functions in privileged mode even when a task is running in user\n\t  mode.\n\t+ Ports that support interrupt nesting now include a configASSERT() that\n\t  will trigger if an interrupt safe FreeRTOS function is called from an\n\t  interrupt that has a priority designated as above the maximum system/API\n\t  call interrupt priority.\n\t+ The included FreeRTOS+Trace recorder code has been updated to the latest\n\t  version, and the demo applications that use the trace recorder code have\n\t  been updated accordingly.\n\t+ The FreeRTOS Windows Simulator (MSVC version only) has been updated to\n\t  include a new basic 'blinky' build option in addition to the original\n\t  comprehensive build option.\n\t+ Improve RAM usage efficiency of heap_4.c and heap_2.c.\n\t+ Prevent heap_4.c from attempting to free memory blocks that were not\n\t  allocated by heap_4.c, or have already been freed.\n\t+ As FreeRTOS now comes with FreeRTOS+FAT SL (donated by HCC) the Chan FATfs\n\t  files have been removed from FreeRTOS/Demo/Common.\n\t+ Fix build error when R4 port is build in co-operative mode.\n\t+ Multiple port and demo application maintenance activities.\n\nChanges between V7.4.1 and V7.4.2 released May 1 2013\n\n\tNOTE: There are no changes in the FreeRTOS kernel between V7.4.1 and V7.4.2\n\n\t+ Added FreeRTOS+FAT SL source code and demo project.  The demo project\n\t  runs in the FreeRTOS Windows simulator for easy and hardware independent\n\t  experimentation and evaluation.  See https://www.FreeRTOS.org/fat_sl\n\nChanges between V7.4.0 and V7.4.1 released April 18 2013\n\n\t+ To ensure strict conformance with the spec and ensure compatibility with\n\t  future chips data and instruction barrier instructions have been added to\n\t  the yield macros of Cortex-M and Cortex-R port layers.  For efficiency\n\t  the Cortex-M port layer \"yield\" and \"yield\" from ISR are now implemented\n\t  separately as the barrier instructions are not required in the ISR case.\n\t+ Added FreeRTOS+UDP into main download.\n\t+ Reorganised the FreeRTOS+ directory so it now matches the FreeRTOS\n\t  directory with Source and Demo subdirectories.\n\t+ Implemented the Berkeley sockets select() function in FreeRTOS+UDP.\n\t+ Changed (unsigned) casting in calls to standard library functions with\n\t  (size_t) casting.\n\t+ Added the Atmel SAM4L and Renesas RX100 demos that demonstrates the\n\t  tickless (tick suppression) low power FreeRTOS features.\n\t+ Add a new RL78 IAR demo that targets numerous new RL78 chips and\n\t  evaluation boards.\n\t+ Adjusted stack alignment on RX200 ports to ensure an assert was not\n\t  falsely triggered when configASSERT() is defined.\n\t+ Updated the Cortex_M4F_Infineon_XMC4500_IAR demo to build with the latest\n\t  version of EWARM.\n\t+ Corrected header comments in the het.c and het.h files (RM48/TMS570 demo).\n\n\nChanges between V7.3.0 and V7.4.0 released February 20 2013\n\n\t+ New feature:  Queue sets.  See:\n\t  https://www.FreeRTOS.org/Pend-on-multiple-rtos-objects.html\n\t+ Overhauled the default tickless idle mode implementation provided with the\n\t  ARM Cortex-M3 port layers.\n\t+ Enhanced tickless support in the core kernel code with the introduction of\n\t  the configEXPECTED_IDLE_TIME_BEFORE_SLEEP macro and the\n\t  eTaskConfirmSleepModeStatus() function.\n\t+ Added the QueueSet.c common demo/test file.  Several demo applications\n\t  have been updated to use the new demo/test tasks.\n\t+ Removed reliance on the PLIB libraries from the MPLAB PIC32 port layer and\n\t  demo applications.\n\t+ Added the FreeRTOS+Trace recorder code to the MSVC Win32 demo.\n\t+ Renamed eTaskStateGet() to eTaskGetState() for consistency, and added a\n\t  pre-processor macro for backward compatibility with the previous name.\n\t+ Updated functions implemented in the core queue.c source file to allow\n\t  queue.h to be included from the .c file directly (this prevents compiler\n\t  warnings that were generated by some compilers).\n\t+ Updated the CCS Cortex-R4 port layer to replace the CLZ assembler function\n\t  with the CLZ compiler intrinsic that is provided by the latest versions of\n\t  the CCS ARM compiler.\n\t+ Updated all heap_x.c implementations to replace the structure that was\n\t  used to ensure the start of the heap was aligned with a more portable\n\t  direct C code implementation.\n\t+ Added support for PIC24 devices that include EDS.\n\t+ Minor optimisations to the PIC32 port layer.\n\t+ Minor changes to tasks.c that allow the state viewer plug-ins to display\n\t  additional information.\n\t+ Bug fix:  Update prvProcessReceivedCommands() in timers.c to remove an\n\t  issue that could occur if the priority of the timer daemon task was set\n\t  below the priority of tasks that used timer services.\n\t+ Update the FreeRTOS+Trace recorder code to the latest version.\n\nChanges between V7.2.0 and V7.3.0 released October 31 2012\n\n\t+ Added ability to override the default scheduler task selection mechanism\n\t  with implementations that make use of architecture specific instructions.\n\t+ Added ability to suppress tick interrupts during idle time, and in so\n\t  doing, provide the ability to make use of architecture specific low power\n\t  functionality.\n\t+ Added the portSUPPRESS_TICKS_AND_SLEEP() macro and vTaskStepTick() helper\n\t  function.\n\t+ Added the configSYSTICK_CLOCK_HZ configuration constant.\n\t+ Reworked the Cortex-M3 and Cortex-M4F port layers for GCC, Keil and IAR to\n\t  directly support basic power saving functionality.\n\t+ Added hooks to allow basic power saving to be augmented in the application\n\t  by making use of chip specific functionality.\n\t+ Minor change to allow mutex type semaphores to be used from interrupts\n\t  (which would not be a normal usage model for a mutex).\n\t+ Change the behaviour of the interrupt safe interrupt mask save and restore\n\t  macros in the Cortex-M ports.  The save macro now returns the previous\n\t  mask value.  The restore macro now uses the previous mask value.  These\n\t  changes are not necessary for the kernel's own implementation, and are\n\t  made purely because the macros were being used by application writers.\n\t+ Added eTaskStateGet() API function.\n\t+ Added port specific optimisations to the PIC32 port layer, and updated the\n\t  PIC32 demo applications to make use of this new feature.\n\t+ Added port specific optimisations to the Win32 simulator port.\n\t+ Added new ports and demo applications for the TI Hercules RM48 and TMS570\n\t  safety microcontrollers.\n\t+ Added SAM3 demos targeting the ATSAM3S-EK2 and ATSAM3X-EK evaluation\n\t  boards.\n\t+ Updated the PIC32 MPLAB X project to manually set the compiler include\n\t  paths instead of using the IDE entry box following reports that the\n\t  include paths were somehow being deleted.\n\t+ Improved character handling in FreeRTOS+CLI.\n\nChanges between V7.1.1 and V7.2.0 released 14 August 2012\n\n\tFreeRTOS V7.2.0 is backward compatible with FreeRTOS V7.1.2.\n\n\t+ Added a FreeRTOS+ sub-directory.  The directory contains some FreeRTOS+\n\t  source code, and example projects that use the FreeRTOS Win32 simulator.\n\t+ Added a new example heap allocation implementation (heap_4.c) that\n\t  includes memory block coalescence.\n\t+ Added a demo that targets the Atmel SAM4S Cortex-M4 based microcontroller.\n\t  The demo is preconfigured to build using the free Atmel Studio 6 IDE and\n\t  GCC compiler.\n\t+ Added xSemaphoreTakeFromISR() implementation.\n\t+ The last parameter in ISR safe FreeRTOS queue and semaphore functions\n\t  (xHigherPriorityTaskWoken) is now optional and can be set to NULL if it\n\t  is not required.\n\t+ Update the IAR and MSP430X ports to clear all lower power mode bits before\n\t  exiting the tick interrupt [bug fix].\n\t+ Allow xQueueReset() to be used, even when the queues event lists are not\n\t  empty.\n\t+ Added a vQueueDelete() handler for the FreeRTOS MPU port (this was\n\t  previously missing).\n\t+ Updated the vPortSVCHandler() functions in the FreeRTOS MPU port layer to\n\t  ensure it compiles with the latest ARM GCC compilers from Linaro.\n\t+ Updated the prvReadGP() function in the NIOS II port to ensure the compiler\n\t  can choose any register for the functions parameter (required at high\n\t  compiler optimisation levels).\n\t+ Add #error macros into the Keil and IAR Cortex-M ports to ensure they\n\t  cannot be built if the user has set configMAX_SYSCALL_INTERRUPT_PRIORITY\n\t  to 0.\n\t+ Added comments in the FreeRTOSConfig.h files associated with Cortex-M3 and\n\t  Cortex-M4 demos stating that the configMAX_SYSCALL_INTERRUPT_PRIORITY\n\t  parameter must not be set to 0.\n\t+ Introduce new INCLUDE_xQueueGetMutexHolder configuration constant\n\t  (defaulted to 0).\n\t+ Added two new list handling macros - for internal use only in upcoming new\n\t  products.\n\t+ Removed all mention of the legacy vTaskStartTrace and ulTaskEndTrace\n\t  macros.  FreeRTOS+Trace supersedes the legacy trace.\n\t+ Added a configASSERT() into the vPortFree() function in heap_1.c as it is\n\t  invalid for the function to be called.\n\t+ Made the xRxLock and xTxLock members of the queue structure volatile.\n\t  This is probably not necessary, and is included as a precautionary\n\t  measure.\n\t+ Modify the assert() that checks to see if the priority passed into an\n\t  xTaskCreate() function is within valid bounds to permit the assert to be\n\t  used in the FreeRTOS MPU port.\n\t+ The software timer service (daemon) task is now created in a way that\n\t  to ensure compatibility with FreeRTOS MPU.\n\nChanges between V7.1.0 and V7.1.1 released May 1 2012\n\n\tNew ports:\n\n\tThe following ports are brand new:\n\t+ Cortex-M3 Tasking\n\n\tThe following ports have been available as separate downloads for a number\n\tof months, but are now included in the main FreeRTOS download.\n\t+ Cortex-M0 IAR\n\t+ Cortex-M0 GCC\n\t+ Cortex-M4F GCC (with full floating point support)\n\n\n\tNew demos:\n\n\tThe following demos are brand new:\n\t+ Renesas RX63N RDK (Renesas compiler)\n\n\tThe following demos have been available as separate downloads for a number\n\tof months, but are now included in the main FreeRTOS download.\n\t+ NXP LPC1114 GCC/LPCXpresso\n\t+ ST STM32F0518 IAR\n\t+ Infineon XMC4500 GCC/Atollic\n\t+ Infineon XMC4500 IAR\n\t+ Infineon XMC4500 Keil\n\t+ Infineon XMC4500 Tasking\n\n\n\tKernel miscellaneous / maintenance:\n\n\t+ Introduced the portSETUP_TCB() macro to remove the requirement for the\n\t  Windows simulator to use the traceTASK_CREATE() macro, leaving the trace\n\t  macro available for use by FreeRTOS+Trace (https://www.FreeRTOS.org/trace).\n\t+ Added a new trace macro, traceMOVE_TASK_TO_READY_STATE(), to allow future\n\t  FreeRTOS+Trace versions to provide even more information to users.\n\t+ Updated the FreeRTOS MPU port to be correct for changes that were\n\t  introduced in FreeRTOS V7.1.0.\n\t+ Introduced the xQueueReset() API function.\n\t+ Introduced the xSemaphoreGetMutexHolder() API function.\n\t+ Tidy up various port implementations to add the static key word where\n\t  appropriate, and remove obsolete code.\n\t+ Slight change to the initial stack frame given to the RX600 ports to allow\n\t  them to be used in the Eclipse based E2Studio IDE without confusing GDB.\n\t+ Correct the alignment given to the initial stack of Cortex-M4F tasks.\n\t+ Added a NOP following each DINT instruction on MSP430 devices for strict\n\t  conformance with the instructions on using DINT.\n\t+ Changed the implementation of thread deletes in the Win32 port to prevent\n\t  the port making use of the traceTASK_DELETE() trace macros - leaving this\n\t  macro free for use by FreeRTOS+Trace.\n\t+ Made some benign changes to the RX600 Renesas compiler port layer to\n\t  ensure the code can be built to a library without essential code being\n\t  removed by the linker.\n\t+ Reverted the change in the name of the uxTaskNumber variable made in\n\t  V7.1.0 as it broke the IAR plug-in.\n\n\n\tDemo miscellaneous / maintenance:\n\n\t+ The command interpreter has now been formally released as FreeRTOS+CLI,\n\t  and been moved out of the main FreeRTOS download, to instead be available\n\t  from the FreeRTOS+ Ecosystem site https://www.FreeRTOS.org/plus.\n\t+ flash_timer.c/h has been added to the list of standard demo tasks.  This\n\t  performs the same functionality as the flash.c tasks, but using software\n\t  timers in place of tasks.\n\t+ Upgraded the PIC32 demo as follows:  Changes to how the library functions\n\t  are called necessitated by the new compiler version, addition of MPLAB X\n\t  project with PIC32MX360, PIC32MX460 and PIC32MX795 configurations,\n\t  addition of simply blinky demo, updated FreeRTOSConfig.h to include more\n\t  parameters, addition of hook function stubs.\n\t+ The MSP430X IAR and CCS demos have been updated to ensure the power\n\t  settings are correct for the configured CPU frequency.\n\t+ Rowley CrossWorks projects have been updated to correct the \"multiple\n\t  definition of ...\" warnings introduced when the toolchain was updated.\n\t+ Updated various FreeRTOSConfig.h header files associated with projects\n\t  that build with Eclipse to include a #error statement informing the user\n\t  that the CreateProjectDirectoryStructure.bat batch file needs to be\n\t  executed before the projects can be opened.\n\t+ Renamed directories that included \"CCS4\" in their name to remove the '4'\n\t  and instead just be \"CCS\".  This is because the demo was updated and\n\t  tested to also work with later Code Composer Studio versions.\n\t+ Updated the TCP/IP periodic timer frequency in numerous uIP demos to be\n\t  50ms instead of 500ms.\n\nChanges between V7.0.2 and V7.1.0 released December 13 2011\n\n\tNew ports:\n\n\t+ Cortex-M4F IAR port.\n\t+ Cortex-M4F Keil/RVDS port.\n\t+ TriCore GCC port.\n\n\tNew demos:\n\n\t+ NXP LPC4350 using the Keil MDK, and demonstrated on a Hitex development\n\t  board.\n\t+ ST STM32F407 using the IAR Embedded Workbench for ARM, and demonstrated on\n\t  the IAR STM32F407ZG-SK starter kit.\n\t+ Infineon TriCore TC1782, using the GCC compiler, demonstrated on the\n\t  TriBoard TC1782 evaluation board.\n\t+ Renesas RX630, using the Renesas compiler and HEW, demonstrated on an\n\t  RX630 RSK (Renesas Starter Kit).\n\n\tMiscellaneous / maintenance:\n\n\t+ Removed all calls to printf() from the K60/IAR Kinetis demo so the project\n\t  can execute stand alone - without being connected to the debugger.\n\t+ Completed the command interpreter framework.  Command handlers now receive\n\t  the entire command string, giving them direct access to parameters.\n\t  Utility functions are provided to check the number of parameters, and\n\t  return parameter sub-strings.\n\t+ The previously documented fix for the bug in xTaskResumeFromISR() that\n\t  effected (only) ports supporting interrupt nesting has now been\n\t  incorporated into the main release.\n\t+ The portALIGNMENT_ASSERT_pxCurrentTCB() definition has been added to allow\n\t  specific ports to skip the second stack alignment check when a task is\n\t  created.  This is because the second check is not appropriate for some\n\t  ports - including the new TriCore port where the checked pointer does not\n\t  actually point to a stack.\n\t+ The portCLEAN_UP_TCB() macro has been added to allow port specific clean\n\t  up when a task is deleted - again this is required by the TriCore port.\n\t+ Various other minor changes to ensure warning free builds on a growing\n\t  number of microcontroller and toolchain platforms.  This includes a\n\t  (benign) correction to the prototype of the\n\t  vApplicationStackOverflowHook() definition found in lots of recent demos.\n\n\tTrace system:\n\n\t+ The legacy trace mechanism has been completely removed - it has been\n\t  obsolete for the years since the trace macros were introduced.  The\n\t  configuration constant configUSE_TRACE_FACILITY is now used to optionally\n\t  include additional queue and task information.  The additional information\n\t  is intended to make the trace mechanism more generic, and allow the trace\n\t  output to provide more information.  When configUSE_TRACE_FACILITY is set\n\t  to 1:\n\t\t- the queue structure includes an additional member to hold the queue\n\t\t  type, which can be base, mutex, counting semaphore, binary semaphore\n\t\t  or recursive mutex.\n\t\t- the queue structure includes an additional member to hold a queue\n\t\t  number.  A trace tool can set and query the queue number for its own\n\t\t  purposes.  The kernel does not use the queue number itself.\n\t\t- the TCB structure includes an additional member to hold a task number\n\t\t  number.  A trace tool can set and query the task number for its own\n\t\t  purposes.  The kernel does not use the task number itself.\n\t+ Queues and all types of semaphores are now automatically allocated their\n\t  type as they are created.\n\t+ Added two new trace macros - traceTASK_PRIORITY_INHERIT() and\n\t  traskTASK_PRIORITY_DISINHERIT().\n\t+ Updated the traceQUEUE_CREATE_FAILED() macro to take a parameter that\n\t  indicates the type of queue, mutex, or semaphore that failed to be\n\t  created.\n\t+ The position from which traceCREATE_MUTEX() is called has been moved from\n\t  after the call to xQueueGenericSend() [within the same function] to before\n\t  the call.  This ensures the trace events occur in the correct order.\n\t+ The value passed into tracePRIORITY_SET() has been corrected for the case\n\t  where vTaskPrioritySet() is called with a null parameter.\n\nChanges between V7.0.1 and V7.0.2 released September 20 2011\n\n\tNew ports:\n\n\t+ The official FreeRTOS Renesas RX200 port and demo application have been\n\t  incorporated into the main FreeRTOS zip file download.\n\t+ The official FreeRTOS Renesas RL78 port and demo application have been\n\t  incorporated into the main FreeRTOS zip file download.\n\t+ The official FreeRTOS Freescale Kinetis K60 tower demo application has\n\t  been incorporated into the main FreeRTOS zip file download.  This includes\n\t  an embedded web server example.\n\t+ A new Microblaze V8 port layer has been created to replace the older, now\n\t  deprecated, port layer.  The V8 port supports V8.x of the Microblaze IP,\n\t  including exceptions, caches, and the floating point unit.  A new\n\t  Microblaze demo has also been added to demonstrate the new Microblaze V8\n\t  port layer.  The demo application was created using V13.1 of the Xilinx\n\t  EDK, and includes a basic embedded web server that uses lwIP V1.4.0.\n\t+ The official FreeRTOS Fujitsu FM3 MB9A310 demo application has been\n\t  incorporated into the main FreeRTOS zip file download.  Projects are\n\t  provided for both the IAR and Keil toolchains.\n\n\n\tAPI additions:\n\n\t+ xTaskGetIdleTaskHandle() has been added.\n\t+ xTaskGetTimerDaemonTaskHandle() has been added.\n\t+ pcTaskGetTaskName() has been added.\n\t+ vSemaphoreDelete() macro has been added to make it obvious how to delete\n\t  a semaphore.  In previous versions vQueueDelete() had to be used.\n\t+ vTaskCleanUpResources() has been removed.  It has been obsolete for a\n\t  while.\n\t+ portPOINTER_SIZE_TYPE has been introduced to prevent compiler warnings\n\t  being generated when the size of a pointer does not match the size of\n\t  the stack type.  This will (has already) be used in new ports, but will\n\t  not be retrofitted to existing ports until the existing port itself is\n\t  updated.\n\n\tOther updates and news:\n\n\t+ The core files have all been modified to tighten the coding standard even\n\t  further.  These are style, not functional changes.\n\t+ All ARM7 port layers have been slightly modified to prevent erroneous\n\t  assert() failures when tasks are created and configASSERT() is defined.\n\t+ All ARM IAR projects have been updated to build with the latest V6.2.x\n\t  versions of the IAR Embedded Workbench for ARM tools (EWARM).  This was\n\t  necessary due to a change in the way EWARM uses the CMSIS libraries.\n\t+ The PIC32 port layer has been updated in preparation for V2 of the C32\n\t  compiler.\n\t+ The old Virtex-4 Microblaze demo has been marked as deprecated.  Please\n\t  use the brand new Spartan-6 port and demo in its place.\n\t+ The bones of a new generic command interpreter is located in\n\t  FreeRTOS/Demo/Common/Utils/CommandInterpreter.c.  This is still a work in\n\t  progress, and not documented.  It is however already in use.  It will be\n\t  documented in full when the projects that are already using it are\n\t  completed.\n\t+ A couple of new standard demos have been included.  First, a version of\n\t  flop.c called sp_flop.c.  This is similar to flop.c, but uses single\n\t  precision floats in place of double precision doubles.  This allows the\n\t  for testing ports to processors that have only single precision floating\n\t  point units, and revert to using emulated calculations whenever a double\n\t  is used.  Second, comtest_strings.c has been included to allow the test\n\t  of UART drivers when an entire string is transmitted at once.  The\n\t  previous comtest.c only used single character transmission and reception.\n\t+ lwIP V1.4.0 is now included in the FreeRTOS/Demo/Common directory, and\n\t  used by a couple of new demos.\n\nChanges between V7.0.0 and V7.0.1 released May 13 2011\n\n\t+ Added a Fujitsu FM3 demo application for both the IAR and Keil tool\n\t  chains.\n\t+ Added a SmartFusion demo application for all of the IAR, Keil and\n\t  SoftConsole (GCC/Eclipse) tool chains.\n\t+ Updated the RX600 port and demo applications to take into account the\n\t  different semantics required when using the latest (V1.0.2.0) version of\n\t  the Renesas compiler.\n\t+ Modified the RX600 Ethernet driver slightly to make it more robust under\n\t  heavy load, and updated the uIP handling task to make use of the FreeRTOS\n\t  software timers.\n\t+ Slightly changed the PIC32 port layer to move an ehb instruction in line\n\t  with the recommendations of the MIPS core manual, and ensure 8 byte stack\n\t  alignment is truly always obtained.\n\t+ Changed the behaviour when tasks are suspended before the scheduler has\n\t  been started.  Before, there needed to be at least one task that was not\n\t  in the suspended state.  This is no longer the case.\n\nChanges between V6.1.1 and V7.0.0 released April 8 2011\n\n\tFreeRTOS V7.0.0 is backward compatible with FreeRTOS V6.x.x\n\n\tMain changes:\n\n\t+ Introduced a new software timer implementation.\n\t+ Introduced a new common demo application file to exercise the new timer\n\t  implementation.\n\t+ Updated the Win32/MSVC simulator project to include the new software timer\n\t  demo tasks and software timer tick hook test.  Much simpler software timer\n\t  demonstrations are included in the demo projects for both of the new ports\n\t  (MSP430X with CCS4 and STM32 with TrueStudio).\n\t+ Various enhancements to the kernel implementation in tasks.c.  These are\n\t  transparent to users and do not effect the pre-existing API.\n\t+ Added calls to configASSERT() within the kernel code.  configASSERT() is\n\t  functionally equivalent to the standard C assert() macro, but does not\n\t  rely on the compiler providing assert.h.\n\n\tOther changes:\n\n\t+ Updated the MSP430X IAR port and demo project to include support for the\n\t  medium memory model.\n\t+ Added a demo project for the MSP430X that targets the MSP430X Discovery\n\t  board and uses the Code Composer Studio 4 tools.  This demo includes use\n\t  of the new software timer implementation.\n\t+ Added an STM32F100RB demo project that targets the STM32 Discovery Board\n\t  and uses the TrueStudio Eclipse based IDE from Atollic.\n\t+ Removed some compiler warnings from the PSoC demo application.\n\t+ Updated the PIC32 port layer to ensure the\n\t  configMAX_SYSCALL_INTERRUPT_PRIORITY constant works as expected no matter\n\t  what its value is (within the valid range set by the microcontroller\n\t  kernel).\n\t+ Updated the PIC24, dsPIC and PIC32 projects so they work with the latest\n\t  MPLAB compiler versions from Microchip.\n\t+ Various cosmetic changes to prepare for a standards compliance statement\n\t  that will be published after the software release.\n\n\nChanges between V6.1.0 and V6.1.1 released January 14 2011\n\n\t+ Added two new Windows simulator ports.  One uses the free Microsoft Visual\n\t  Studio 2010 express edition, and the other the free MingW/Eclipse\n\t  environment.  Demo projects are provided for both.\n\t+ Added three demo projects for the PSoC 5 (CYAC5588).  These are for the\n\t  GCC, Keil, and RVDS build tools, and all use the PSoC Creator IDE.\n\t+ Added a demo for the low power STM32L152 microcontroller using the IAR\n\t  Embedded Workbench.\n\t+ Added a new port for the MSP430X core using the IAR Embedded Workbench.\n\t+ Updated all the RX62N demo projects that target the Renesas Demonstration\n\t  Kit (RDK) to take into account the revered LED wiring on later hardware\n\t  revisions, and the new J-Link debug interface DLL.\n\t+ Updated all the RX62N demo projects so the IO page served by the example\n\t  embedded web server works with all web browsers.\n\t+ Updated the Red Suite projects to work with the up coming Red Suite\n\t  release, and to use a more recent version of the CMSIS libraries.\n\t+ Added the traceTAKE_MUTEX_RECURSIVE_FAILED() trace macro.\n\t+ Removed the (pointless) parameter from the traceTASK_CREATE_FAILED()\n\t  trace macro.\n\t+ Introduced the portALT_GET_RUN_TIME_COUNTER_VALUE() macro to compliment\n\t  the already existing portGET_RUN_TIME_COUNTER_VALUE().  This allows for\n\t  more flexibility in how the time base for the run time statistics feature\n\t  can be implemented.\n\t+ Added a \"cpsie i\" instruction before the \"svc 0\" instruction used to start\n\t  the scheduler in each of the Cortex M3 ports.  This is to ensure that\n\t  interrupts are globally enabled prior to the \"svc 0\" instruction being\n\t  executed in cases where interrupts are left disabled by the C start up\n\t  code.\n\t+ Slight optimisation in the run time stats calculation.\n\nChanges between V6.0.5 and V6.1.0 released October 6 2010\n\n\t+ Added xTaskGetTickCountFromISR() function.\n\t+ Modified vTaskSuspend() to allow tasks that have just been created to be\n\t  immediately suspended even when the kernel has not been started.  This\n\t  allows them to effectively start in the Suspended state - a feature that\n\t  has been asked for on numerous occasions to assist with initialisation\n\t  procedures.\n\t+ Added ports for the Renesas RX62N using IAR, GCC and Renesas tool suites.\n\t+ Added a STM32F103 demo application that uses the Rowley tools.\n\t+ Under specific conditions xFreeBytesRemaining within heap_2.c could end up\n\t  with an incorrect\tvalue.  This has been fixed.\n\t+ xTaskCreateGeneric() has a parameter that can be used to pass the handle\n\t  of the task just created out to the calling task.  The assignment to this\n\t  parameter has been moved to ensure it is assigned prior to the newly\n\t  created having any possibility of executing.  This takes into account the\n\t  case where the assignment is made to a global variable that is accessed by\n\t  the newly created task.\n\t+ Fixed some build time compiler warnings in various FreeTCPIP (based on\n\t  uIP) files.\n\t+ Fixed some build time compiler warnings in Demo/Common/Minimal/IntQueue.c.\n\nChanges between V6.0.4 and V6.0.5 released May 17 2010\n\n\t+ Added port and demo application for the Cortus APS3 processor.\n\nChanges between V6.0.3 and V6.0.4 released March 14 2010\n\n\t+ All the contributed files that were located in the Demo/Unsupported_Demos\n\t  directory have been removed.  These files are instead now available in the\n\t  new  Community Contributions section of the FreeRTOS website.  See\n\t  https://www.FreeRTOS.org/RTOS-contributed-ports.html\n\t+ The project file located in the Demo/CORTEX_STM32F107_GCC_Rowley directory\n\t  has been upgraded to use V2.x of the Rowley Crossworks STM32 support\n\t  package.\n\t+ An initial Energy Micro EFM32 demo has been included.  This will be\n\t  updated over the coming months to make better use of the low power modes\n\t  the EFM32 provides.\n\nChanges between V6.0.2 and V6.0.3 released February 26 2010\n\n\t+ SuperH SH7216 (SH2A-FPU) port and demo application added.\n\t+ Slight modification made to the default implementation of\n\t  pvPortMallocAligned() and vPortFreeAligned() macros so by default they\n\t  just call pvPortMalloc() and vPortFree().  The macros are only needed to\n\t  be defined when a memory protection unit (MPU) is being used - and then\n\t  only depending on other configuration settings.\n\nChanges between V6.0.1 and V6.0.2 released January 9th 2010\n\n\t+ Changed all GCC ARM 7 ports to use 0 as the SWI instruction parameter.\n\t  Previously the parameter was blank and therefore only an implicit 0 but\n\t  newer GCC releases do not permit this.\n\t+ Updated IAR SAM7S and SAM7X ports to work with IAR V5.40.\n\t+ Changed the stack alignment requirement for PIC32 from 4 bytes to 8 bytes.\n\t+ Updated prvListTaskWithinSingleList() is it works on processors where the\n\t  stack grows up from low memory.\n\t+ Corrected some comments.\n\t+ Updated the startup file for the RVDS LPC21xx demo.\n\nChanges between V6.0.0 and V6.0.1 released November 15th 2009\n\n\t+ Altered pxPortInitialiseStack() for all Cortex-M3 ports to ensure the\n\t  stack pointer is where the compiler expects it to be when a task first\n\t  starts executing.\n\n\t  The following minor changes only effect the Cortex-M3 MPU port:\n\n\t+ portRESET_PRIVILEGE() assembly macro updated to include a clobber list.\n\t+ Added prototypes for all the privileged function wrappers to ensure no\n\t  compile time warnings are generated no matter what the warning level\n\t  setting.\n\t+ Corrected the name of portSVC_prvRaisePrivilege to\n\t  portSVC_RAISE_PRIVILEGE.\n\t+ Added conditional compilation into xTaskGenericCreate() to prevent some\n\t  compilers issuing warnings when portPRIVILEGE_BIT is defined as zero.\n\n\nChanges between V5.4.2 and V6.0.0 released October 16th 2009\n\n\tFreeRTOS V6 is backward compatible with FreeRTOS V5.x.\n\n\tMain changes:\n\n\t+ FreeRTOS V6 is the first version to include memory protection unit (MPU)\n\t  support.  Two ports now exist for the Cortex M3, the standard FreeRTOS\n\t  which does not include MPU support, and FreeRTOS-MPU which does.\n\t+ xTaskCreateRestricted() and vTaskAllocateMPURegions() API functions added\n\t  in support of FreeRTOS-MPU.\n\t+ Wording for the GPL exception has been (hopefully) clarified.  Also the\n\t  license.txt file included in the download has been fixed (the previous\n\t  version contained some corruption).\n\n\tOther changes:\n\n\t+ New API function xPortGetFreeHeapSize() added to heap_1.c and heap_2.c.\n\t+ ARM7 GCC demo interrupt service routines wrappers have been modified to\n\t  call the C portion using an __asm statement.  This prevents the function\n\t  call being inlined at higher optimisation levels.\n\t+ ARM7 ports now automatically set the THUMB bit if necessary when\n\t  setting up the initial stack of a task - removing the need for\n\t  THUMB_INTERWORK to be defined.  This also allows THUMB mode and ARM mode\n\t  tasks to be mixed more easily.\n\t+ All ARM7/9 ports now have portBYTE_ALIGNMENT set to 8 by default.\n\t+ Various demo application project files have been updated to be up to date\n\t  with the latest IDE versions.\n\t+ The linker scripts used with command line GCC demos have been updated to\n\t  include an eh_frame section to allow their use with the latest Yagarto\n\t  release.  Likewise the demo makefiles have been updated to include\n\t  command line options to reduce or eliminate the eh_frame section all\n\t  together.\n\t+ The definition of portBYTE_ALIGNMENT_MASK has been moved out of the\n\t  various memory allocation files and into the common portable.h header\n\t  file.\n\t+ Removed unnecessary use of portLONG, portSHORT and portCHAR.\n\t+ Added LM3Sxxxx demo for Rowley CrossWorks.\n\t+ Posix simulator has been upgraded - see the corresponding WEB page on the\n\t  FreeRTOS.org site.\n\n\nChanges between V5.4.1 and V5.4.2 released August 9th 2009\n\n\t+ Added a new port and demo app for the Altera Nios2 soft core.\n\t+ Added LPC1768 demo for IAR.\n\t+ Added a USB CDC demo to all LPC1768 demos (Code Red, CrossWorks and IAR).\n\t+ Changed clock frequency of LPC1768 demos to 99MHz.\n\nChanges between V5.4.0 and V5.4.1 released July 25th 2009\n\n\t+ New hook function added.  vApplicationMallocFailedHook() is (optionally)\n\t  called if pvPortMalloc() returns NULL.\n\t+ Additional casting added to xTaskCheckForTimeOut().  This prevents\n\t  problems that can arise should configUSE_16_BIT_TICKS be set to 1 on a\n\t  32 bit architecture (which would probably be a mistake, anyway).\n\t+ Corrected the parameter passed to NVIC_SetPriority() to set the MAC\n\t  interrupt priority in both LPC1768 demos.\n\t+ Decreased the default setting of configMINIMAL_STACK_SIZE in the PIC32\n\t  demo application to ensure the heap space was not completely consumed\n\t  before the scheduler was started.\n\nChanges between V5.3.1 and V5.4.0 released July 13th 2009\n\n\t+ Added Virtex5 / PPC440 port and demos.\n\t+ Replaced the LPC1766 Red Suite demo with an LPC1768 Red Suite demo.  The\n\t  original demo was configured to use engineering samples of the CPU.  The\n\t  new demo has an improved Ethernet driver.\n\t+ Added LPC1768 Rowley demo with zero copy Ethernet driver.\n\t+ Reworked byte alignment code to ensure 8 byte alignment works correctly.\n\t+ Set configUSE_16_BIT_TICKS to 0 in the PPC405 demo projects.\n\t+ Changed the initial stack setup for the PPC405 to ensure the small data\n\t  area pointers are setup correctly.\n\nChanges between V5.3.0 and V5.3.1 released June 21st 2009\n\n\t+ Added ColdFire V1 MCF51CN128 port and WEB server demo.\n\t+ Added STM32 Connectivity Line STM32107 Cortex M3 WEB server demo.\n\t+ Changed the Cortex M3 port.c asm statements to __asm so it can be\n\t  compiled using Rowley CrossWorks V2 in its default configuration.\n\t+ Updated the Posix/Linux simulator contributed port.\n\nChanges between V5.2.0 and V5.3.0 released June 1st 2009\n\n\tMain changes:\n\n\t+ Added new (optional) feature that gathers statistics on the amount of CPU\n\t  time used by each task.\n\t+ Added a new demo application for the Atmel AT91SAM3U Cortex-M3 based\n\t  microcontroller.\n\t+ Added a new demo application for the NXP LPC1766 Cortex-M3 based\n\t  microcontroller.\n\t+ Added a contributed port/demo that allows FreeRTOS to be 'simulated' in a\n\t  Linux environment.\n\n\tMinor changes:\n\t+ Updated the Stellaris uIP WEB server demos to include the new run time\n\t  statistics gathering feature - and include a served WEB page that\n\t  presents the information in a tabular format.\n\t+ Added in the lwIP port layer for the Coldfire MCF52259.\n\t+ Updated the CrossWorks LPC2368 WEB server to include an image in the\n\t  served content.\n\t+ Changed some of the timing in the initialisation of the LPC2368 MAC to\n\t  permit its use on all part revisions.\n\t+ Minor modifications to the core uIP code to remove some compiler warnings.\n\t+ Added xTaskGetApplicationTaskTag() function and updated the OpenWatcom\n\t  demo to make use of the new function.\n\t+ Added contributed demos for AVR32 AP7000, STM32 Primer 2 and STM32 using\n\t  Rowley Crossworks.\n\t+ Heap_1.c and Heap_2.c used to define structures for the purpose of data\n\t  alignment.  These have been converted to unions to save a few bytes of\n\t  RAM that would otherwise be wasted.\n\t+ Remove the call to strncpy() used to copy the task name into the TCB when\n\t  the maximum task name is configured to be 1 byte long.\n\nChanges between V5.1.2 and V5.2.0 released March 14th 2009\n\n\t+ Optimised the queue send and receive functions (also used by semaphores).\n\t+ Replaced the standard critical sections used to protect BIOS calls in the\n\t  PC port to instead use scheduler locks.  This is because the BIOS calls\n\t  always return with interrupts enabled.\n\t+ Corrected unclosed comments in boot.s.\n\nChanges between V5.1.1 and V5.1.2 released February 9th 2009\n\n\t+ Added NEC V850ES port and demo.\n\t+ Added NEC 78K0R port and demo.\n\t+ Added MCF52259 port and demo.\n\t+ Added the AT91SAM9XE port and demo.\n\t+ Updated the MCF52233 FEC driver to work around a silicon bug that\n\t  prevents the part auto negotiating some network parameters.\n\t+ Minor modifications to the MCF52233 makefile to permit it to be used\n\t  on Linux hosts.\n\t+ Updated the STM32 primer files to allow them to be built with the latest\n\t  version of the RIDE tools.\n\t+ Updated the threads.js Java script used for kernel aware debugging in\n\t  the Rowley CrossWorks IDE.\n\n\nChanges between V5.1.0 and V5.1.1 released November 20, 2008\n\n\t+ Added Coldfire MCF52233 WEB server demo using GCC and Eclipse.\n\t+ Added IAR MSP430 port and demo.\n\t+ Corrected several compiler time issues that had crept in as tool versions\n\t  change.\n\t+ Included FreeRTOS-uIP - a faster uIP.  This is not yet complete.\n\nChanges between V5.0.4 and V5.1.0 released October 24, 2008\n\n\t+ Added a new port and demo application for the ColdFire V2 core using the\n\t  CodeWarrior development tools.\n\t+ Replaced the ARM7 demo that used the old (and now no longer supported)\n\t  Keil compiler with a new port that uses the new Keil/RVDS combo.\n\t+ Stack overflow checking now works for stacks that grow up from low\n\t  memory (PIC24 and dsPIC).\n\t+ BUG FIX - set the PIC32 definition of portSTACK_GROWTH to the correct\n\t  value of -1.\n\t+ MSP430 port layers have been updated to permit tasks to place the\n\t  microcontroller into power down modes 1 to 3.  The demo applications have\n\t  likewise been updated to demonstrate the new feature.\n\t+ Replaced the two separate MSP430/Rowley port layers with a single and more\n\t  flexible version.\n\t+ Added more contributed ports, including ports for NEC and SAM9\n\t  microcontrollers.\n\t+ Changed the linker script used in the LPC2368 Eclipse demo.\n\nChanges between V5.0.3 and V5.0.4 released September 22, 2008\n\n\t+ Completely re-written port for ColdFire GCC.\n\t+ Bug fix:  All Cortex M3 ports have a minor change to the code that sets\n\t  the pending interrupt.\n\t+ Some header files require that FreeRTOS.h be included prior to their\n\t  inclusion.  #error message have been added to all such header file\n\t  informing users to the cause of the compilation error should the headers\n\t  not be included in the correct order.\n\nChanges between V5.0.2 and V5.0.3 released July 31, 2008\n\n\tChanges relating to the Cortex M3:\n\n\t+ Added configMAX_SYSCALL_INTERRUPT_PRIORITY usage to all the Cortex M3\n\t  ports and demos.  See the port documentation pages on the FreeRTOS.org\n\t  WEB site for full usage information.\n\t+ Improved efficiency of Cortex M3 port even further.\n\t+ Ensure the Cortex M3 port works no matter where the vector table is\n\t  located.\n\t+ Added the IntQTimer demo/test tasks to a demo project for each CM3 port\n\t  (Keil, GCC and IAR) to test the new configMAX_SYSCALL_INTERRUPT_PRIORITY\n\t  functionality.\n\t+ Added the mainINCLUDE_WEB_SERVER definition to the LM3SXXXX IAR and Keil\n\t  projects to allow the WEB server to be conditionally excluded from the\n\t  build and therefore allow use of the KickStart (code size limited)\n\t  compiler version.\n\n\tOther changes:\n\n\t+ Moved the PIC24 and dsPIC versions of vPortYield() from the C file to\n\t  an assembly file to allow use with all MPLAB compiler versions.  This also\n\t  allows the omit-frame-pointer optimisation to be turned off.\n\nChanges between V5.0.0 and V5.0.2 released May 30, 2008\n\n\t+ Updated the PIC32 port to allow queue API calls to be used from\n\t  interrupts above the kernel interrupt priority, and to allow full\n\t  interrupt nesting.  Task stack usages has also been reduced.\n\t+ Added a new PowerPC port that demonstrates how the trace macros can be\n\t  used to allow the use of a floating point co-processor.  The\n\t  traceTASK_SWITCHED_OUT() and traceTASK_SWITCHED_INT() macros are used to\n\t  save and restore the floating point context respectively for those tasks\n\t  that actually use floating point operations.\n\t+ BUG FIX:  The first PPC405 port contained a bug in that it did not leave\n\t  adequate space above the stack for the backchain to be saved when a task\n\t  started to execute for the first time.\n\t+ Updated queue.c to add in the means to allow interrupt nesting and for\n\t  queue API functions to be called from interrupts that have a priority\n\t  above the kernel priority.  This is only supported on PIC32 ports thus\n\t  far.\n\t+ Fixed the compiler warnings that were generated when the latest version\n\t  of WinAVR was used.\n\t+ Remove all inline usage of 'inline' from the core kernel code.\n\t+ Added the queue registry feature.  The queue registry is provided as a\n\t  means for kernel aware debuggers to locate queue definitions.  It has no\n\t  purpose unless you are using a kernel aware debugger.  The queue registry\n\t  will only be used when configQUEUE_REGISTRY_SIZE is greater than zero.\n\t+ Added the ST Cortex-M3 drivers into the Demo/Common/Drivers directory to\n\t  prevent them from having to be included in multiple demos.\n\t+ Added a Keil STM32 demo application.\n\t+ Changed the blocktim.c test files as it is no longer legitimate for all\n\t  ports to call queue API functions from within a critical section.\n\t+ Added the IntQueue.c test file to test the calling of queue API functions\n\t  from different interrupt priority levels, and test interrupt nesting.\n\nChanges between V5.0.0 and V5.0.1\n\n\t+ V5.0.1 was a customer specific release.\n\nChanges between V4.8.0 and V5.0.0 released April 15, 2008\n\n\t*** VERY IMPORTANT INFORMATION ON UPGRADING TO FREERTOS.ORG V5.0.0 ***\n\n\tThe parameters to the functions xQueueSendFromISR(), xQueueSendToFrontFromISR(),\n\txQueueSendToBackFromISR() and xSemaphoreGiveFromISR() have changed.  You must\n\tupdate all calls to these functions to use the new calling convention!  Your\n\tcompiler might not issue any type mismatch warnings!\n\n\n\tOther changes:\n\n\t+ Support added for the new Luminary Micro LM3S3768 and LM3S3748 Cortex-M3\n\t  microcontrollers.\n\t+ New task hook feature added.\n\t+ PowerPC demo updated to use version 10.1 of the Xilinx EDK.\n\t+ Efficiency gains within the PIC32 port layer.\n\nChanges between V4.7.2 and V4.8.0 released March 26 2008\n\n\t+ Added a Virtex4 PowerPC 405 port and demo application.\n\t+ Added optional stack overflow checking and new\n\t  uxTaskGetStackHighWaterMark() function.\n\t+ Added new xQueueIsQueueEmptyFromISR(), xQueueIsQueueFullFromISR() and\n\t  uxQueueMessagesWaitingFromISR() API functions.\n\t+ Efficiency improvements to the Cortex-M3 port layer.  NOTE: This\n\t  requires that an SVC handler be installed in the application.\n\t+ Efficiency improvements to the queue send and receive functions.\n\t+ Added new trace macros.  These are application definable to provide\n\t  a flexible trace facility.\n\t+ Implemented the configKERNEL_INTERRUPT_PRIORITY within the Keil Cortex\n\t  M3 port layer (bringing it up to the same standard as the IAR and GCC\n\t  versions).\n\t+ Ports that used the arm-stellaris-eabi-gcc tools have been converted to\n\t  use the arm-non-eabi-gcc tools.\n\nChanges between V4.7.1 and V4.7.2 released February 21, 2008\n\n\t+ Added Fujitsu MB91460 port and demo.\n\t+ Added Fujitsu MB96340 port and demo.\n\t+ Tidied up the capitalisation of include files to facilitate builds on\n\t  Linux hosts.\n\t+ Removed some redundant casting that was generating warnings - but was\n\t  included to remove warnings on other compilers.\n\nChanges between V4.7.0 and V4.7.1 released February 3, 2008\n\n\t+ Updated all IAR ARM projects to use V5.11 of the IAR Embedded Workbench\n\t  for ARM.\n\t+ Introduced recursive semaphore feature.\n\t+ Updated LPC2368 demos to take into account silicon bugs in old chip\n\t  revisions.\n\t+ Updated STR9 uIP port to manually set the net mask and gateway addresses.\n\t+ Updating demos to allow more to run with the co-operative scheduler.\n\t+ Fixed co-operative scheduler behaviour upon the occurrence of a tick\n\t  interrupt while the scheduler was suspended.\n\t+ Updated documentation contained within semphr.h.\n\t+ ARM7 GCC ports no longer use the IRQ attribute.\n\nChanges between V4.6.1 and V4.7.0 released December 6, 2007\n\n\t+ Introduced the counting semaphore macros and demo source files.  The\n          Open Watcom PC project has been updated to include the new demo.  See\n          the online documentation for more information.\n\t+ Introduced the 'alternative' queue handling API and demo source files.\n\t  The Open Watcom PC project has been updated to include the new demo\n\t  source files.  See the online documentation for more information.\n\t+ Added AT91SAM7X Eclipse demo project.\n\t+ Added the STM32 primer demo project for the GCC compiler and Ride IDE.\n\t+ Removed the .lock files that were mistakenly included in the V4.6.1\n\t  eclipse workspaces.\n\nChanges between V4.6.0 and V4.6.1 released November 5 2007\n\n\t+ Added support for the MIPS M4K based PIC32.\n\t+ Added 'extern \"C\"' to all the header files to facilitate use with C++.\n\nChanges between V4.5.0 and V4.6.0 released October 28 2007\n\n\t+ Changed the method used to force a context switch within an ISR for the\n\t  ARM7/9 GCC ports only.  The portENTER_SWITCHING_ISR() and\n\t  portEXIT_SWITCHING_ISR() macros are no longer supported.  This is to\n\t  ensure correct behaviour no matter which GCC version is used, with or\n\t  without the -fomit-frame-pointer option, and at all optimisation levels.\n\t+ Corrected the prototype for xQueueGenericSend() within queue.h.\n\nChanges between V4.4.0 and V4.5.0 released September 17 2007\n\n\t+ Added the xQueueSendToFront(), xQueueSendToBack() and xQueuePeek()\n\t  functionality.  These should now be used in preference to the old\n\t  xQueueSend() function - which is maintained for backward compatibility.\n\t+ Added Mutex functionality.  The behaviour of mutexes is subtly different\n\t  to the already existing binary semaphores as mutexes automatically\n\t  include a priority inheritance mechanism.\n\t+ Added the GenQTest.c and QPeek.c to test and demonstrate the behaviour\n\t  of the new functionality.\n\t+ Updated the LM3Sxxxx and PC ports to include the new GenQTest.c and\n\t  QPeek.c files.\n\t+ Updated the GCC port for the Cortex M3 to include the\n\t  configKERNEL_INTERRUPT_PRIORITY functionality.  This was previously only\n\t  included in the IAR port.\n\t+ Optimised the GCC and IAR port layer code - specifically the context\n\t  switch code.\n\t+ Consolidated the LM3Sxxxx EK demos for all development tools into a\n\t  single project that automatically detects which version of the EK the\n\t  application is executing on.\n\t+ Added Eclipse support for LM3Sxxxx evaluation kits.\n\t+ Added Eclipse support for the Keil LPC2368 evaluation kit.\n\t+ Added the Demo/Drivers directory to hold code that is common to multiple\n\t  demo application projects.\n\t+ Included some minor bug fixes in the uIP 1.0 code.\n\t+ Added an lwIP demo for the STR9 - thanks ST for assistance.\n\t+ Updated the AVR32 port to ensure correct behaviour with full compiler\n\t  optimisation.\n\t+ Included binaries for OpenOCD FTDI and parallel port interfaces.\n\nChanges between V4.4.0 and V4.3.1 released July 31, 2007\n\n\t+ Added AVR32 UC3B demo application.\n\t+ Updated AVR32 UC3A port and demo applications.\n\t+ Added IAR lwIP demo for AVR32 UC3A.\n\t+ Updated listGET_OWNER_OF_NEXT_ENTRY() to assist compiler optimisation\n\t  (thanks Niu Yong for making the suggestion).\n\t+ Added xTaskGetSchedulerState() API function.\n\t+ BUG FIX:  Corrected behaviour when tasks that are blocked indefinitely\n\t  have their block time adjusted (within xQueueSend() and xQueueReceive()),\n\t  and are the subject of a call the vTaskResume() when they are not\n\t  actually in the Suspended state (thanks Dan Searles for reporting the\n\t  issues).\n\n\nChanges between V4.3.0 and V4.3.1 released June 11, 2007\n\n\t+ Added STMicroelectronics STM32 Cortex-M3 demo application.\n\t+ Updated ustdlib.c for the GCC LM3S6965 demo.\n\nChanges between V4.2.1 and V4.3.0 released June 5, 2007\n\n\t+ Introduced configKERNEL_INTERRUPT_PRIORITY to the IAR Cortex-M3, PIC24\n\t  and dsPIC ports.  See the LM3S6965 and PIC24 demo application\n\t  documentation pages for more information.\n\t+ Updated the PIC24 and dsPIC demos to build with V3.0 of the PIC30 GCC\n\t  tools, and changed the demo applications.\n\t+ Added demos for the new Ethernet and CAN enabled Luminary Micro Stellaris\n\t  microcontrollers.\n\t+ Corrected bug in uIP the demos that prevented frames of approximately 1480\n\t  bytes and over from being transmitted.\n\t+ Included the LPC2368/uIP/Rowley demo into the main FreeRTOS.org\n\t  download.\n\t+ Update to WizC PIC18 port to permit its use with version 14 of the\n\t  compiler.  Thanks Marcel!\n\nChanges between V4.2.1 and V4.2.0 released April 2, 2007\n\n\t+ Added AVR32 AT32UC3A ports for GCC and IAR.\n\t+ Added -fomit-frame-pointer option to lwIP SAM7X demo makefile.\n\t+ Moved location of call to LCD_Init() in STR9 demo to ensure it is only\n\t  called after the scheduler has been started.\n\nChanges between V4.1.3 and V4.2.0 released February 8, 2007\n\n\t+ Changes to both task.c and queue.c as a result of testing performed on\n\t  the SafeRTOS code base.\n\t+ Added Cortex-M3 LM3S811 demos for GCC and IAR tools.\n\nChanges between V4.1.2 and V4.1.3 released November 19, 2006\n\n\t+ Added STR750 ARM7 port using the Raisonance RIDE/GCC tools.\n\t+ Added -fomit-frame-pointer option to Rowley ARM7 demos as work around\n\t  to GCC bug at some optimisation levels.\n\t+ Altered the way the heap is defined in the LM3S811 Keil demo to prevent\n\t  the RAM usage from counting toward the code size limit calculation.\n\t+ CO-ROUTINE BUG FIX:  Removed the call to prvIsQueueEmpty from within\n\t  xQueueCRReceive as it exited with interrupts enabled.  Thanks Paul Katz.\n\t+ Tasks that block on events with a timeout of portMAX_DELAY are now\n\t  blocked indefinitely if configINCLUDE_vTaskSuspend is defined.\n\t  Previously portMAX_DELAY was just the longest block time possible. This\n\t  is still the case if configINCLUDE_vTaskSuspend is not defined.\n\t+ Minor changes to some demo application files.\n\nChanges between V4.1.1 and V4.1.2 released October 21, 2006\n\n\t+ Added 16bit PIC ports and demos.\n\t+ Added STR750 port and demo.\n\n\nChanges between V4.1.0 and V4.1.1 released September 24, 2006\n\n\t+ Added the Luminary Micro Stellaris LM3S811 demo application.\n\nChanges between V4.0.5 and V4.1.0 released August 28, 2006\n\n\t+ Prior to V4.1.0, under certain documented circumstances, it was possible\n\t  for xQueueSend() and xQueueReceive() to return without having completed\n\t  and without their block time expiring.  The block time effectively\n\t  stated a maximum block time, and the return value of the function needed\n\t  to be checked to determine the reason for returning.  This is no longer\n\t  the case as the functions will only return once the block time has\n\t  expired or they are able to complete their operation.  It is therefore no\n\t  longer necessary to wrap calls within loops.\n\t+ Changed the critical section handling in the IAR AVR port to correct the\n\t  behaviour when used with later compiler versions.\n\t+ Added the LPC2138 CrossWorks demo into the zip file.  Previously this was\n\t  only available as a separate download.\n\t+ Modified the AVR demo applications to demonstrate the use of co-routines.\n\nChanges between V4.0.4 and V4.0.5 released August 13, 2006\n\n\t+ Introduced API function xTaskResumeFromISR().  Same functionality as\n\t  xTaskResume(), but can be called from within an interrupt service routine.\n\t+ Optimised vListInsert() in the case when the wake time is the maximum\n\t  tick count value.\n\t+ Bug fix:  The 'value' of the event list item is updated when the priority\n\t  of a task is changed.  Previously only the priority of the TCB itself was\n\t  changed.\n\t+ vTaskPrioritySet() and vTaskResume() no longer use the event list item.\n\t  This has not been necessary since V4.0.1 when the xMissedYield handling\n\t  was added.\n\t+ Lowered the PCLK setting on the ARM9 STR9 demo from 96MHz to 48MHz.\n\t+ When ending the scheduler - do not try to attempt a context switch when\n\t  deleting the current task.\n\t+ SAM7X EMAC drivers:  Corrected the Rx frame length mask when obtaining\n\t  the length from the rx descriptor.\n\n\nChanges between V4.0.3 and V4.0.4 released June 22, 2006\n\n\t+ Added a port and demo application for the STR9 ARM9 based processors from\n\t  ST.\n\t+ Slight optimisation to the vTaskPrioritySet() function.\n\t+ Included the latest uIP version (1.0) in the demo/common/ethernet\n\t  directory.\n\nChanges between V4.0.2 and V4.0.3 released June 7, 2006\n\n\t+ Added a port and demo application for the Cortex-M3 target using the IAR\n\t  development tools.\n\t+ The ARM Cortex-m3 Rowley projects have been updated to use V1.6 of the\n\t  CrossStudio tools.\n\t+ The heap size defined for the lwIP Rowley demo has been reduced so that\n\t  the project will link correctly when using the command line GCC tools\n\t  also.  The makefile has also been modified to allow debugging.\n\t+ The lwIP Rowley demo not includes a 'kernel aware' debug window.\n\t+ The uIP Rowley project has been updated to build with V1.6 of CrossWorks.\n\t+ The second set of tasks in the blockQ demo were created the wrong way\n\t  around (inconsistent to the description in the file).  This has been\n\t  corrected.\n\nChanges between V4.0.1 and V4.0.2 released May 28, 2006\n\n\t+ Port and demo application added for the Tern Ethernet Engine controller.\n\t+ Port and demo application added for MC9S12 using GCC, thanks to\n\t  Jefferson \"imajeff\" Smith.\n\t+ The function vTaskList() now suspends the scheduler rather than disabling\n\t  interrupts during the creation of the task list.\n\t+ Allow a task to delete itself by passing in its own handle.  Previously\n\t  this could only be done by passing in NULL.\n\t+ Corrected the value passed to the WDG_PeriodValueConfig() library\n\t  function in the STR71x demo.\n\t+ The tick hook function is now called only within a tick isr.  Previously\n\t  it was also called when the tick function was called during the scheduler\n\t  unlocking process.\n\t+ The EMAC driver in the SAM7X lwIP demo has been made more robust as per\n\t  the thread: http://sourceforge.net/forum/message.php?msg_id=3714405\n\t+ In the PC ports:  Add function prvSetTickFrequencyDefault() to set the\n\t  DOS tick back to its proper value when the scheduler exits.  Thanks\n\t  Raynald!\n\t+ In the Borland x86 ports there was a mistake in the portFIRST_CONTEXT\n\t  macro where the BP register was not popped from the stack correctly.  The\n\t  BP value would never get used so this did not cause a problem, but it has\n\t  been corrected all the same.\n\n\nChanges between V4.0.0 and V4.0.1 released April 7 2006\n\n\t+ Improved the ARM CORTEX M3 ports so they now only have to service\n\t  pendSV interrupts.\n\t+ Added a Luminary Micro port and demo for use with Rowley CrossWorks.\n\t+ Added the xMissedYield handling to tasks.c.\n\nChanges between V3.2.4 and V4.0.0\n\n\tMajor changes:\n\n\t+ Added new RTOS port for Luminary Micros ARM CORTEX M3 microcontrollers.\n\t+ Added new co-routine functionality.\n\n\tOther kernel changes:\n\n\t+ An optional tick hook call is now included in the tick function.\n\t+ Introduced the xMiniListItem structure and removed the list pxHead\n\t  member in order to reduce RAM usage.\n\t+ Added the following definitions to the FreeRTOSConfig.h file included\n\t  with every port:\n\t\tconfigUSE_TICK_HOOK\n\t\tconfigUSE_CO_ROUTINES\n\t\tconfigMAX_CO_ROUTINE_PRIORITIES\n\t+ The volatile qualification has been changed on the list members to allow\n\t  the task.c code to be tidied up a bit.\n\t+ The scheduler can now be started even if no tasks have been created!\n\t  This is to allow co-routines to run when there are no tasks.\n\t+ A task being woken by an event will now preempt the currently running task\n\t  even if its priority is only equal to the currently running task.\n\n\tPort and demo application changes:\n\n\t+ Updated the WinAVR demo to compile with the latest version of WinAVR\n\t  with no warnings generated.\n\t+ Changed the WinAVR makefile to make chars signed - needed for the\n\t  co-routine code if BaseType_t is set to char.\n\t+ Added new demo application file crflash.c.  This demonstrates co-routine\n\t  functionality including passing data between co-routines.\n\t+ Added new demo application file crhook.c.  This demonstrates co-routine\n\t  and tick hook functionality including passing data between and ISR and\n\t  a co-routine.\n\t+ Some NOP's were missing following stmdb{}^ instructions in various ARM7\n\t  ports.  These have been added.\n\t+ Updated the Open Watcom PC demo project to include the crflash and crhook\n\t  demo co-routines as an example of their use.\n\t+ Updated the H8S demo to compile with the latest version of GCC.\n\t+ Updated the SAM7X EMAC drivers to take into account the hardware errata\n\t  regarding lost packets.\n\t+ Changed the default MAC address used by some WEB server demos as the\n\t  original addresses used was not liked by some routers.\n\t+ Modified the SAM7X/IAR startup code slightly to prevent it hanging on\n\t  some systems when the code is executed using a j-link debugger.  The\n\t  j-link macro file configures the PLL before the code executes so\n\t  attempting to configure it again in the startup code was causing a\n\t  problem for some user.  Now a check is performed first to see if the\n\t  PLL is already set up.\n\t+ GCC port now contain all assembler code in a single asm block rather than\n\t  individual blocks as before.\n\t+ GCC LPC2000 code now explicitly uses R0 rather than letting the assembler\n\t  choose the register to use as a temporary register during the context\n\t  switch.\n\t+ Added portNOP() macro.\n\t+ The compare match load value on LPC2000 ports now has 1 added to correct\n\t  the value used.\n\t+ The minimal stack depth has been increased slightly on the WIZC PIC18\n\t  port.\n\nChanges between V3.2.3 and V3.2.4\n\n\t+ Modified the GCC ARM7 port layer to allow use with GCC V4.0.0 and above.\n\t  Many thanks to Glen Biagioni for the provided update.\n\t+ Added a new Microblaze port and demo application.\n\t+ Modified the SAM7X EMAC demo to default to use the MII interface rather\n\t  than the RMII interface.\n\t+ Modified the startup sequence of the SAM7X demo slightly to allow the\n\t  EMAC longer to auto negotiate.\n\nChanges between V3.2.2 and V3.2.3\n\n\t+ Added MII interface support to the SAM7X EMAC peripheral driver.\n\t  Previously versions worked with the RMII interface only.\n\t+ Added command line GCC support to the SAM7X lwIP demo.  Previously the\n\t  project could only be built using the CrossWorks IDE.  Modifications to\n\t  this end include the addition of a standard makefile and linker script to\n\t  the download, and some adjustments to the stacks allocated to each task.\n\t+ Changed the page returned by the lwIP WEB server demo to display the\n\t  task status table rather than the TCP/IP statistics.\n\t+ Corrected the capitalisation of some header file includes and makefile\n\t  dependencies to facilitate use on Linux host computers.\n\t+ The various LPC2000 ports had a mistake in the timer setup where the\n\t  prescale value was written to T0_PC instead of T0_PR.  This would have\n\t  no effect unless a prescale value was actually required.  This has been\n\t  corrected.\n\nChanges between V3.2.1 and V3.2.2 - Released 23 September, 2005\n\n\t+ Added an IAR port for the Philips LPC2129\n\t+ The Atmel ARM7 IAR demo project files are now saved in the IAR Embedded\n\t  Workbench V4.30a format.\n\t+ Updated the J-Link macro file included with the SAM7X uIP demo project\n\t  to allow the demo board to be reset over the J-Link.\n\nChanges between V3.2.0 and V3.2.1 - Released 1 September, 2005\n\n\t+ Added lwIP demo for AT91SAM7X using Rowley tools.\n\t+ Added uIP demo for AT91SAM7X using IAR tools.\n\t+ Added function xTaskGetCurrentTaskHandle().\n\t+ Renamed events.h to mevents.h to prevent it conflicting with the events.h\n\t  generated automatically by the HCS12 processor expert utility.  events.h\n\t  is only used by the PC demo application.\n\t+ Both PIC18 ports now initialise the TBLPTRU to 0 as this is the value\n\t  expected by the compiler, and the compilers do not write to this\n\t  register.\n\t+ The HCS12 banked model demo now creates the 'suicide' tasks immediately\n\t  prior to starting the scheduler.  These tasks should be the last tasks to\n\t  get started in order for the test to function correctly.\n\nChanges between V3.1.1 and V3.2.0 - Released 29 June, 2005\n\n\tV3.2.0 introduces two new MSP430 ports and corrects a minor kernel\n\tissues.  Thanks to Ares.qi for his input.\n\n\t+ Added two MSP430 ports that use the Rowley CrossWorks development tools.\n\t  One port just mirrors the existing GCC port.  The other port was provided\n\t  by Milos Prokic.  Thanks!\n\t+ V3.2.0 corrects the behavior when vTaskPrioritySet() or vTaskResume()\n\t  are called while the scheduler is locked (by a call to\n\t  vTaskSuspendAll()).  When this is done the subject task now starts to\n\t  execute immediately when the scheduler is unlocked if it has the highest\n\t  priority that is ready to run.  Previously there was a possibility that\n\t  the task would not run until the next RTOS tick or call to portYIELD().\n\t+ Another similar small correction ensures that in the case where more than\n\t  one task is blocked on a semaphore or queue, the task with the highest\n\t  priority is guaranteed to be unblocked first.\n\t+ Added a couple of more test tasks to the PC demo which cover the points\n\t  above.\n\nChanges between V3.1.0 and V3.1.1 - Released 21st June, 2005\n\n\tThis release updates the HCS12 port.  The common kernel code\n\tremains unchanged.\n\n\t+ Updated the HCS12 port to support banking and introduced a demo\n\t  application for the MC9S12DP256.  The new demo application is\n\t  located in the Demo/HCS12_CodeWarrior_banked directory.\n\t+ The name of the directory containing the MC9S12F32 demo application\n\t  has been changed to Demo/HCS12_CodeWarrior_small (as in 'small'\n\t  memory model).\n\t+ MC9S12F32 demo updated slightly to use the PLL.  The CPU speed for the\n\t  demo application is now 24MHz.  Previously it was 8MHz.\n\t+ The demo application file Demo/Common/Minimal/death.c has a slight\n\t  alteration to prevent it using floating point variables.\n\n\nChanges between V3.0.0 and V3.1.0 - Released 11th June, 2005\n\n\t+ Added new ports for ST Microsystems STR71x, and Freescale HCS12\n\t  microcontrollers.  Currently the HCS12 port is limited to the small\n\t  memory model.  Large memory models will be supported in the next\n\t  release.\n\t+ PIC18 wizC port updated.  Thanks to Marcel van Lieshout for his\n\t  continuing contribution.\n\t+ The accuracy of the AVR port timer setup has been improved.  Thanks to\n\t  Thomas Krutmann for this contribution.\n\t+ Added a new conditional compilation macro configIDLE_SHOULD_YIELD.\n\t  See the WEB documentation for details.\n\t+ Updated the CrossWorks uIP demo to build with V1.4 of CrossWorks.\n\t+ Slight modification to the SAM7 release build configuration to correct\n\t  an include path definition.\n\t+ Updated the MPLAB PIC18 documentation to provide extra details on linker\n\t  file configuration.\n\nChanges between V3.0.0 and V2.6.1 - Released 23rd April, 2005\n\n\tV3.0.0 includes many enhancements, so this history list is broken into\n\tsubsections as follows:\n\n\t\tAPI changes\n\t\tNew ports\n\t\tDirectory name changes\n\t\tKernel and miscellaneous changes changes\n\n\t- API changes\n\n\t\t+ Each port now defines BaseType_t as the data type that is most\n\t\t  efficient for that architecture.  The type BaseType_t is used\n\t\t  extensively in API calls necessitating the following changes to the\n\t\t  FreeRTOS API function prototypes.\n\n\t\t  See the \"New for V3.0.0\" section of the FreeRTOS online\n\t\t  documentation for full details of API changes.\n\n\t- New ports\n\n\t\t+ The AT91FR40008 ARM7 port contributed by John Feller is now included\n\t\t  in the download (thanks John!).\n\t\t+ The PIC18 port for the wizC/fedC compiler contributed by Marcel van\n\t\t  Lieshout is now included in the download (thanks Marcel!).\n\t\t+ The IAR port for the AVR microcontroller has been upgraded to V3.0.0\n\t\t  and is now a supported port.\n\n\t- Directory name changes\n\n\t\tFor consistency, and to allow integration of the new ports, the\n\t\tfollowing directory names have been changed.\n\n\t\t+ The source/portable/GCC/ARM7 directory has been renamed\n\t\t  source/portable/GCC/ARM7_LPC2000 so it is compatible with the naming\n\t\t  of other GCC ARM7 ports.\n\t\t+ The Demo/PIC directory has been renamed Demo/PIC18_MPLAB to\n\t\t  accommodate the wizC/fedC PIC port.\n\t\t+ The demo applications for the two AVR ports no longer share the same\n\t\t  directory.  The WinAVR demo is in the Demo/AVR_ATMega323_WinAVR\n\t\t  directory and the IAR port in the Demo/AVR_ATMega323_IAR directory.\n\n\n\t- Kernel and miscellaneous changes changes\n\n\t\t  See the \"New for V3.0.0\" section of the FreeRTOS online\n\t\t  documentation for more information.\n\n\t\t+ Previously 'portmacro.h' contained some user editable definitions\n\t\t  relating to the user application, and some fixed definitions relating\n\t\t  specifically to the port being used.  The application specific\n\t\t  definitions have been removed from 'portmacro.h' and placed inside a\n\t\t  new header file called 'FreeRTOSConfig.h'.  'portmacro.h' should now\n\t\t  never be modified by the user.  A 'FreeRTOSConfig.h' is now included\n\t\t  in each of FreeRTOS/Demo subdirectories - as it's settings relate to\n\t\t  the demo application rather than being specific to the port.\n\t\t+ Introduced configUSE_IDLE_HOOK in idle task.\n\t\t+ The idle task will yield when another idle priority task is ready to\n\t\t  run. Previously the idle task would run to the end of its time slice\n\t\t  regardless.\n\t\t+ The idle task is now created when the scheduler is started.  This\n\t\t  requires less stack than the previous scheme where it was created upon\n\t\t  creation of the first application task.\n\t\t+ The function usPortCheckFreeStackSpace() has been renamed\n\t\t  usTaskCheckFreeStackSpace() and moved from the portable layer to\n\t\t  tasks.c.\n\t\t+ Corrected spelling of portMINMAL_STACK_SIZE to portMINIMAL_STACK_SIZE.\n\t\t+ The portheap.c file included with the AVR port has been deleted.  The\n\t\t  AVR demo now uses the standard heap1 sample memory allocator.\n\t\t+ The GCC AVR port is now build using the standard make utility.  The\n\t\t  batch files used previously have been deleted.  This means a recent\n\t\t  version of WinAVR is required in order to create a binary suitable for\n\t\t  source level debugging.\n\t\t+ vTaskStartScheduler() no longer takes the configUSE_PREEMPTION\n\t\t  constant as a parameter.  Instead the constant is used directly within\n\t\t  tasks.c  and no parameter is required.\n\t\t+ The header file 'FreeRTOS.h' has been created and is used to include\n\t\t  'projdefs.h', 'FreeRTOSConfig.h' and 'portable.h' in the necessary\n\t\t  order.  FreeRTOS.h can now be included in place of these other\n\t\t  headers.\n\t\t+ The header file 'errors.h' has been deleted.  The definitions it\n\t\t  contained are now located within 'projdefs.h'.\n\t\t+ pvPortMalloc() now takes a size_t parameter as per the ANSI malloc().\n\t\t  Previously an unsigned short was used.\n\t\t+ When resuming the scheduler a yield is performed if either a tick has\n\t\t  been missed, or a task is moved from the pending ready list into a\n\t\t  ready list.  Previously a yield was not performed on this second\n\t\t  condition.\n\t\t+ In heap1.c an overflow check has been added to ensure the next free\n\t\t  byte variable does not wrap around.\n\t\t+ Introduced the portTASK_FUNCTION() and portTASK_FUNCTION_PROTO()\n\t\t  macros.\n\t\t+ The MPLAB PIC port now saved the TABLAT register in interrupt service\n\t\t  routines.\n\nChanges between V2.6.0 and V2.6.1 - Released Feb 22, 2005\n\n\tThis version adds support for the H8 processor.\n\n\tOther changes:\n\n\t+ tskMAX_TASK_NAME_LEN removed from the task.h header and added to each\n\t  individual portmacro.h file as portMAX_TASK_NAME_LEN.  This allows RAM\n\t  limited ports to allocate fewer characters to the task name.\n\t+ AVR port - Replaced the inb() and outb() functions with direct memory\n\t  access.  This allows the port to be built with the 20050414 build of\n\t  WinAVR.\n\t+ GCC LPC2106 port - removed the 'static' from the definition of\n\t  vNonPreemptiveTick() to allow the demo to link when using the cooperative\n\t  scheduler.\n\t+ GCC LPC2106 port - Corrected the optimisation options in the batch files\n\t  ROM_THUMB.bat, RAM_THUMB.bat, ROM_ARM.bat and RAM_ARM.bat.  The lower case\n\t  -o is replaced by an uppercase -O.\n\t+ Tasks.c - The strcpy call has been removed when copying across the task\n\t  name into the TCB.\n\t+ Updated the trace visualisation to always be 4 byte aligned so it can be\n\t  used on ARM architectures.\n\t+ There are now two tracecon executables (that convert the trace file binary\n\t  into an ASCII file).  One for big endian targets and one for little endian\n\t  targets.\n\t+ Added ucTasksDeleted variable to prevent vTaskSuspendAll() being called\n\t  too often in the idle task.\n\t+ SAM7 USB driver - Replaced the duplicated RX_DATA_BK0 in the interrupt\n\t  mask with the RX_DATA_BK1.\n\n\nChanges between V2.5.5 and V2.6.0 - Released January 16, 2005\n\n\t+ Added the API function vTaskDelayUntil().  The demo app file\n\t  Demo/Common/Minimal/flash.c has been updated to demonstrate its use.\n\t+ Added INCLUDE_vTaskDelay conditional compilation.\n\t+ Changed the name of the Demo/ARM7_AtmelSAM7S64_IAR directory to\n\t  Demo/ARM7_AT91SAM7S64_IAR for consistency.\n\t+ Modified the AT91SAM7S USB driver to allow descriptors that have\n\t  a length that is an exact multiple of the FIFO to be transmitted.\n\nChanges between V2.5.4 and V2.5.5 - Released January 3, 2005\n\n\tThis version adds support for the Atmel SAM7 ARM7 microcontrollers\n\talong with the IAR development tools.\n\n\tOther changes:\n\n\t+ Renamed the Demo/ARM7 directory to Demo/ARM7_LPC2106_GCC.\n\t+ Renamed the Demo/ARM7_Keil directory to Demo/ARM7_LPC2129_Keil.\n\t+ Modified the Philips ARM7 serial interrupt service routines to only\n\t  process one interrupt per call.  This seems to enable the ISR to\n\t  operate more quickly.\n\t+ Removed the 'far' keyword from the Open Watcom portable layer source\n\t  files.  This allows their use with V1.3 of Open Watcom.\n\t+ Minor modifications to the SDCC build files to allow their use under\n\t  Linux.  Thanks to Frieder Ferlemann for this contribution.\n\t+ Small change to sTaskCreate() to allow a context switch even when\n\t  pxCreatedTask is NULL.  Thanks to Kamil for this contribution.\n\t+ inline keyword removed from vTaskSwitchContext() and VTaskIncrementTick()\n\t  definitions.\n\nChanges between V2.5.3 and V2.5.4 - Released Dec 1, 2004\n\n\tThis is an important maintenance release.\n\n\tThe function cTaskResumeAll() has been modified so it can be used safely\n\tprior to the kernel being initialised.  This was an issue as\n\tcTaskResumeAll() is called from pvPortMalloc().  Thanks to Daniel Braun\n\tfor highlighting this issue.\n\nChanges between V2.5.2 and V2.5.3 - Released Nov 2, 2004\n\n\tThe critical section handling functions have been changed for the GCC ARM7\n\tport.   Some optimisation levels use the stack differently to others.  This\n\tmeans the interrupt flags cannot always be stored on the stack and are\n\tinstead now stored in a variable, which is then saved as part of the\n\ttasks context.  This allows the GCC ARM7 port to be used at all\n\toptimisation levels - including -Os.\n\n\tOther minor changes:\n\n\t+ MSP430 definition of usCriticalNesting now uses the volatile qualifier.\n\t  This is probably not required but added just in case.\n\nChanges between V2.5.1 and V2.5.2 - Released Oct 26, 2004\n\n\t+ Added the Keil ARM7 port.\n\t+ Slight modification to comtest.c to make the delay periods more random.\n\t  This creates a better test condition.\n\nChanges between V2.5.0 and V2.5.1 - Released Oct 9, 2004\n\n\t+ Added the MSP430 port.\n\t+ Extra comments added to the GCC ARM7 port.c and portISR.c files.\n\t+ The memory pool allocated within heap_1.c has been placed within a\n\t  structure to ensure correct memory alignment on 32bit systems.\n\t+ Within the GCC ARM7 serial drivers an extra check is made to ensure\n\t  the post to the queue was successful if then attempting immediately\n\t  retrieve the posted character.\n\t+ Changed the name of the constant portTICKS_PER_MS to portTICK_PERIOD_MS\n\t  as the old name was misleading.\n\n\nChanges between V2.4.2 and V2.5.0 - Released Aug 12, 2004\n\n\tThe RTOS source code download now includes three separate memory allocation\n\tschemes - so you can choose the most appropriate for your application.\n\tThese are found in the Source/Portable/MemMang directory.  The demo\n\tapplication projects have also been updated to demonstrate the new schemes.\n\tSee the \"Memory Management\" page of the API documentation for more details.\n\n\t+ Added heap_1.c, heap_2.c and heap_3.c in the Source/Portable/MemMang\n\t  directory.\n\t+ Replaced the portheap.c files for each demo application with one of the\n\t  new memory allocation files.\n\t+ Updated the portmacro.h file for each demo application to include the\n\t  constants required for the new memory allocators: portTOTAL_HEAP_SIZE and\n\t  portBYTE_ALIGNMENT.\n\t+ Added a new test to the ARM7 demo application that tests the operation\n\t  of the heap_2 memory allocator.\n\n\nChanges between V2.4.1 and V2.4.2 - Released July 14, 2004\n\n\t+ The ARM7 port now supports THUMB mode.\n\t+ Modification to the ARM7 demo application serial port driver.\n\nChanges between V2.4.0 and V2.4.1 - Released July 2, 2004\n\n\t+ Rationalised the ARM7 port version of portEXIT_CRITICAL() -\n\t  improvements provided by Bill Knight.\n\t+ Made demo serial driver more complete and robust.\n\n\nChanges between V2.4.0 and V2.3.1 - Released June 30, 2004\n\n\t+ Added the first ARM7 port - thanks to Bill Knight for the assistance\n\t  provided.\n\t+ Added extra files to the Demo/Common/Minimal directory.  These are\n\t  equivalent to their Demo/Common/Full counterparts but with the\n\t  calls to the functions defined in print.c removed.\n\t+ Added TABLAT to the list of registers saved as part of a PIC18 context.\n\nChanges between V2.3.0 and V2.3.1 - Released June 25, 2004\n\n\t+ Changed the way the vector table is defined to be more portable.\n\t+ Corrected the definitions of SPH and SPL in portmacro.s90.\n\t  The previous definitions prevented V2.3.0 operating if the iom323.h\n\t  header file was included in portmacro.s90.\n\nChanges between V2.2.0 and V2.3.0 - Released June 19, 2004\n\n\t+ Added an AVR port that uses the IAR compiler.\n\t+ Explicit use of 'signed' qualifier on plain char types.\n\t+ Modified the Open Watcom project files to use 'signed' as the\n\t  default char type.\n\t+ Changed odd calculation of initial pxTopOfStack value when\n\t  portSTACK_GROWTH < 0.\n\t+ Added inline qualifier to context switch functions within task.c.\n\t  Ports that do not support the (non ANSI) inline keyword have the\n\t  inline #define'd away in  their respective portmacro.h files.\n\nChanges between V2.1.1 and V2.2.0 - Released May 18, 2004\n\n\t+ Added Cygnal 8051 port.\n\t+ PCLATU and PCLATH are now saved as part of the PIC18 context.  This\n\t  allows function pointers to be used within tasks.  Thanks to Javier\n\t  Espeche for the enhancement.\n\t+ Minor changes to demo application files to reduce stack usage.\n\t+ Minor changes to prevent compiler warnings when compiling the new port.\n\nChanges between V2.1.0 and V2.1.1 - Released March 12, 2004\n\n\t+ Bug fix - pxCurrentTCB is now initialised before the call to\n\t  prvInitialiseTaskLists().  Previously pxCurrentTCB could be accessed\n\t  while null during the initialisation sequence.  Thanks to Giuseppe\n\t  Franco for the correction.\n\nChanges between V2.0.0 and V2.1.0 - Released Feb 29, 2004\n\n\tV2.1.0 has significant reworks that greatly reduce the amount of time\n\tthe kernel has interrupts disabled.  The first section of modifications\n\tlisted here must be taken into account by users.  The second section\n\tare related to the kernel implementation and as such are transparent.\n\n\tSection1 :\n\n\t+ The typedef TickType_t has been introduced.  All delay times should\n\t  now use a variable of type TickType_t in place of the unsigned long's\n\t  used previously.  API function prototypes have been updated\n\t  appropriately.\n\t+ The configuration macro USE_16_BIT_TICKS has been introduced.  If set\n\t  to 1 TickType_t is defined as an unsigned short.  If set to 0\n\t  TickType_t is defined as an unsigned long.  See the configuration\n\t  section of the API documentation for more details.\n\t+ The configuration macro INCLUDE_vTaskSuspendAll is now obsolete.\n\t+ vTaskResumeAll() has been renamed cTaskResumeAll() as it now returns a\n\t  value (see the API documentation).\n\t+ ulTaskGetTickCount() has been renamed xTaskGetTickCount() as the type\n\t  it returns now depends on the USE_16_BIT_TICKS definition.\n\t+ cQueueReceive() must now >never< be used from within an ISR.  Use the new\n\t  cQueueReceiveFromISR() function instead.\n\n\tSection 2:\n\n\t+ A mechanism has been introduced that allows a queue to be accessed by\n\t  a task and ISR simultaneously.\n\t+ A \"pending ready\" queue has been introduced that enables interrupts to\n\t  be processed when the scheduler is suspended.\n\t+ The list implementation has been improved to provide faster item\n\t  removal.\n\t+ The scheduler now makes use of the scheduler suspend mechanism in places\n\t  where previously interrupts were disabled.\n\nChanges between V1.2.6 and V2.0.0 - Released Jan 31, 2004\n\n\t+ Introduced new API functions:\n\t\tvTaskPriorityGet ()\n\t\tvTaskPrioritySet ()\n\t\tvTaskSuspend ()\n\t\tvTaskResume ()\n\t\tvTaskSuspendAll ()\n\t\tvTaskResumeAll ()\n\t+ Added conditional compilation options that allow the components of the\n\t  kernel that are unused by an application to be excluded from the build.\n\t  See the Configuration section on the WEB site for more information (on\n\t  the API pages).  The macros have been added to each portmacro.h file (\n\t  sometimes called prtmacro.h).\n\t+ Rearranged tasks.c.\n\t+ Added demo application file dynamic.c.\n\t+ Updated the PC demo application to make use of dynamic.c.\n\t+ Updated the documentation contained in the kernel header files.\n\t+ Creating a task now causes a context switch if the task being created\n\t  has a higher priority than the calling task - assuming the kernel is\n\t  running.\n\t+ vTaskDelete() now only causes a context switch if the calling task is\n\t  the task being deleted.\n\nChanges between V1.2.5 and V1.2.6 - Released December 31, 2003\n\n\tBarring the change to the interrupt vector (PIC port) these are minor\n\tenhancements.\n\n\t+ The interrupt vector used for the PIC master ISR has been changed from\n\t  0x18 to 0x08 - where it should have always been.  The incorrect address\n\t  still works but probably executes a number of NOP's before getting to the\n\t  ISR.\n\t+ Changed the baud rate used by the AVR demo application to 38400.  This\n\t  has an error percentage of less than one percent with an 8MHz clock.\n\t+ Raised the priority of the Rx task in demo\\full\\comtest.c.  This only\n\t  affects the Flashlite and PC ports.  This was done to prevent the Rx\n\t  buffer becoming full.\n\t+ Reverted the Flashlite COM port driver back so it does not use the DMA.\n\t  The DMA appears to miss characters under stress.  The Borland Flashlite\n\t  port was also calculating a register value incorrectly resulting in the\n\t  wrong DMA source address being used.  The same code worked fine when\n\t  compiling with Open Watcom.  Other minor enhancements were made to the\n\t  interrupt handling.\n\t+ Modified the PIC serial Rx ISR to check for and clear overrun errors.\n\t  Overrun errors seem to prevent any further characters being received.\n\t+ The PIC demo projects now have some optimisation switched on.\n\n\nChanges between V1.2.4 and V1.2.5\n\n\tSmall fix made to the PIC specific port.c file described below.\n\n\t+ Introduced portGLOBAL_INTERRUPT_FLAG definition to test the global\n\t  interrupt flag setting.  Using the two bits defined within\n\t  portINITAL_INTERRUPT_STATE was causing the w register to get clobbered\n\t  before the test was performed.\n\nChanges between V1.2.3 and V1.2.4\n\n\tV1.2.4 contains a release version of the PIC18 port.\n\tAn optional exception has been included with the GPL.  See the licensing\n\tsection of www.FreeRTOS.org for details.\n\n\t+ The function xPortInitMinimal() has been renamed to\n\t  xSerialPortInitMinimal() and the function xPortInit() has been renamed\n\t  to xSerialPortInit().\n\t+ The function sSerialPutChar() has been renamed cSerialPutChar() and\n\t  the function return type chaned to portCHAR.\n\t+ The integer and flop tasks now include calls to tskYIELD(), allowing\n\t  them to be used with the cooperative scheduler.\n\t+ All the demo applications now use the integer and comtest tasks when the\n \t  cooperative scheduler is being used.  Previously they were only used with\n\t  the preemptive scheduler.\n\t+ Minor changes made to operation of minimal versions of comtest.c and\n\t  integer.c.\n\t+ The ATMega port definition of portCPU_CLOSK_HZ definition changed to\n\t  8MHz base 10, previously it base 16.\n\n\n\nChanges between V1.2.2a and V1.2.3\n\n\tThe only change of any significance is to the license, which has changed\n\tfrom the Open Software License to the GNU GPL.\n\n\tThe zip file also contains a pre-release version of the PIC18 port.  This\n\thas not yet completed testing and as such does not constitute part of the\n\tV1.2.3 release.  It is still however covered by the GNU GPL.\n\n\tThere are minor source code changes to accommodate the PIC C compiler.\n\tThese mainly involve more explicit casting.\n\n\t+ sTaskCreate() has been modified slightly to make use of the\n\t  portSTACK_GROWTH macro.  This is required for the PIC port where the\n\t  stack grows in the opposite direction to the other existing ports.\n\t+ prvCheckTasksWaitingTermination() has been modified slightly to bring\n\t  the decrementing of usCurrentNumberOfTasks within the critical section,\n\t  where it should have been since the creation of an eight bit port.\n\nChanges between V1.2.2 and V1.2.2a\n\n\tThe makefile and buildcoff.bat files included with the AVR demo application\n\thave been modified for use with the September 2003 build of WinAVR.  No\n\tsource files have changed.\n\nChanges between V1.2.1 and V1.2.2\n\n\tThere are only minor changes here to allow the PC and Flashlite 186 ports\n\tto use the Borland V4.52 compiler, as supplied with the Flashlite 186\n\tdevelopment kit.\n\n\t+ Introduced a BCC directory under source\\portable.  This contains all the\n\t  files specific to the Borland compiler port.\n\t+ Corrected the macro naming of portMS_PER_TICK to portTICKS_PER_MS.\n\t+ Modified comtest.c to increase the rate at which the string is\n\t  transmitted and received on the serial port.  The Flashlite 186 demo\n\t  app baud rate has also been increased.\n\t+ The values of the constants used in both integer.c files have been\n          increased to force the Borland compiler to use 32 bit values.  The\n          Borland optimiser placed the previous values in 16 bit registers, and in\n          So doing invalidated the test.\n\nChanges between V1.2.0 and V1.2.1\n\n\tThis version includes some minor changes to the list implementation aimed\n\tat improving the context switch time - with is now approximately 10% faster.\n\tChanges include the removal of some null pointer assignment checks.  These\n\twere redundant where the scheduler uses the list functions, but means any\n\tuser application choosing to use the same list functions must now check\n\tthat no NULL pointers are passed as a parameter.\n\n\tThe Flashlite 186 serial port driver has also been modified to use a DMA\n\tchannel for transmissions.  The serial driver is fully functional but still\n\tunder development.  Flashlite users may prefer to use V1.2.0 for now.\n\n\tDetails:\n\n\t+ Changed the baud rate for the ATMega323 serial test from 19200 to 57600.\n\t+ Use vSerialPutString() instead of single character puts in\n\t  Demo\\Full\\Comtest.c.  This allows the use of the flashlite DMA serial\n\t  driver.  Also the check variable only stops incrementing after two\n\t  consecutive failures.\n\t+ semtest.c creates four tasks, two of which operate at the idle priority.\n\t  The tasks that operate at the idle priority now use a lower expected\n\t  count than those running at a higher priority.  This prevents the low\n\t  priority tasks from signalling an error because they have not been\n\t  scheduled enough time for each of them to count the shared variable to\n\t  the higher original value.\n\t+ The flashlite 186 serial driver now uses a DMA channel for transmissions.\n\t+ Removed the volatile modifier from the list function parameters.  This was\n\t  only ever included to prevent compiler warnings.  Now warnings are\n\t  removed by casting parameters where the calls are made.\n\t+ prvListGetOwnerOfNextEntry() and prvListGetOwnerOfHeadEntry() have been\n\t  removed from list.c and added as macros in list.h.\n\t+ usNumberOfItems has been added to the list structure.  This removes the\n\t  need for a pointer comparison when checking if a list is empty, and so\n\t  is slightly faster.\n\t+ Removed the NULL check in vListRemove().  This makes the call faster but\n\t  necessitates any application code utilising the list implementation to\n\t  ensure NULL pointers are not passed.\n\t+ Renamed portTICKS_PER_MS definition to portMS_PER_TICK (milli seconds\n\t  per tick).  This is what it always should have been.\n\nChanges between V1.01 and V1.2.0\n\n\tThe majority of these changes were made to accommodate the 8bit AVR port.\n\tThe scheduler workings have not changed, but some of the data types used\n\thave been made more friendly to an eight bit environment.\n\n\tDetails:\n\n\t+ Changed the version numbering format.\n\t+ Added AVR port.\n\t+ Split the directory demo\\common into demo\\common\\minimal and\n\t  demo\\common\\full.  The files in the full directory are for systems with\n\t  a display (currently PC and Flashlite 186 demo's).  The files in the\n\t  minimal directory are for systems with limited RAM and no display\n\t  (currently MegaAVR).\n\t+ Minor changes to demo application function prototypes to make more use\n\t  of 8bit data types.\n\t+ Within the scheduler itself the following functions have slightly\n\t  modified declarations to make use of 8bit data types where possible:\n\t\txQueueCreate(),\n\t\tsQueueReceive(),\n\t\tsQUeueReceive(),\n\t\tusQueueMessageWaiting(),\n\t\tsQueueSendFromISR(),\n\t\tsSemaphoreTake(),\n\t\tsSemaphoreGive(),\n\t\tsSemaphoreGiveFromISR(),\n\t\tsTaskCreate(),\n\t\tsTaskMoveFromEventList().\n\n\t  Where the return type has changed the function name has also changed in\n\t  accordance with the naming convention.  For example\n\t  usQueueMessageWaiting() has become ucQueueMessageWaiting().\n\t+ The definition tskMAX_PRIORITIES has been moved from task.h to\n\t  portmacro.h and renamed portMAX_PRIORITIES.  This allows different\n\t  ports to allocate a different maximum number of priorities.\n\t+ By default the trace facility is off, previously USE_TRACE_FACILITY\n\t  was defined.\n\t+ comtest.c now uses a psuedo random delay between sends.  This allows for\n\t  better testing as the interrupts do not arrive at regular intervals.\n\t+ Minor change to the Flashlite serial port driver.  The driver is written\n\t  to demonstrate the scheduler and is not written to be efficient.\n\n\n\nChanges between V1.00 and V1.01\n\n\tThese changes improve the ports.  The scheduler itself has not changed.\n\n\tImproved context switch mechanism used when performing a context\n\tswitch from an ISR (both the tick ISR and the serial comms ISR's within\n\tthe demo application).  The new mechanism is faster and uses less stack.\n\n\tThe assembler file portasm.asm has been replaced by a header file\n\tportasm.h.  This includes a few assembler macro definitions.\n\n\tAll saving and restoring of registers onto/off of the stack is now handled\n\tby the compiler.  This means the initial stack setup for a task has to\n\tmimic the stack used by the compiler, which is different for debug and\n\trelease builds.\n\n\tSlightly changed the operation of the demo application, details below.\n\n\tDetails:\n\n\t+ portSWITCH_CONTEXT() replaced by vPortFirstContext().\n\t+ pxPortInitialiseStack() modified to replicate the stack used by the\n\t  compiler.\n\t+ portasm.asm file removed.\n\t+ portasm.h introduced.  This contains macro definitions for\n\t  portSWITCH_CONTEXT() and portFIRST_CONTEXT().\n\t+ Context switch from ISR now uses the compiler generated interrupt\n\t  mechanism.  This is done simply by calling portSWITCH_CONTEXT and leaving\n\t  the save/restore to compiler generated code.\n\t+ Calls to taskYIELD() during ISR's have been replaced by calling the\n\t  simpler and faster portSWITCH_CONTEXT().\n\t+ The Flashlite 186 port now uses 186 instruction set (used to use 80x86\n\t  instructions only).\n\t+ The blocking queue tasks within the demo application did not operate\n\t  quite as described.  This has been corrected.\n\t+ The priority of the comtest Rx task within the demo application has been\n\t  lowered.  Received characters are now processed (read from the queue) at\n\t  the idle priority, allowing low priority tasks to run evenly at times of\n\t  a high communications overhead.\n\t+ Prevent the call to kbhit() in main.c for debug builds as the debugger\n\t  seems to have problems stepping over the call.  This if for the PC port\n\t  only.\n\n\n\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.01171875,
          "content": "MIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Quick_Start_Guide.url",
          "type": "blob",
          "size": 0.1357421875,
          "content": "[InternetShortcut]\nURL=http://www.freertos.org/FreeRTOS-quick-start-guide.html\nIDList=\n[{000214A0-0000-0000-C000-000000000046}]\nProp3=19,2\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.69921875,
          "content": "The [FreeRTOS 202411.00](https://github.com/FreeRTOS/FreeRTOS/tree/202411.00) release updates FreeRTOS Kernel, FreeRTOS+TCP, coreMQTT, corePKCS11, coreHTTP, coreJSON, AWS IoT Over-the-air-Updates (OTA), AWS IoT Device Shadow, AWS IoT Jobs, AWS IoT Device Defender, Backoff Algorithm, AWS IoT Fleet Provisioning, coreSNTP, SigV4, and FreeRTOS Cellular Interface libraries to their [202406-LTS](https://github.com/FreeRTOS/FreeRTOS-LTS/blob/202406-LTS/CHANGELOG.md) versions. It also updates coreMQTT Agent to v1.3.0 and MbedTLS to v3.5.1. This release also adds ARMv7-R No_GIC Port Demo, ARMv7-R MPU Port Demos and FreeRTOS_Plus_TCP_IPv6_Demo Windows Simulator Demo. Additionally, all WinSim Demos are updated to use TLSv1.3. This release also updates WolfSSL to version v5.6.4.\n\nThe [FreeRTOS 202212.00](https://github.com/FreeRTOS/FreeRTOS/tree/202212.00) release updates FreeRTOS Kernel, FreeRTOS+TCP, coreMQTT, corePKCS11, coreHTTP, coreJSON, AWS IoT Over-the-air-Updates (OTA), AWS IoT Device Shadow, AWS IoT Jobs, AWS IoT Device Defender, Backoff Algorithm, AWS IoT Fleet Provisioning, coreSNTP, SigV4, and FreeRTOS Cellular Interface libraries to their [LTS 2.0](https://github.com/FreeRTOS/FreeRTOS-LTS/blob/202210-LTS/CHANGELOG.md) versions. It also updates coreMQTT Agent to v1.2.0 to be compatible with coreMQTT v2.X.X, and updates MbedTLS to v3.2.1. This release also adds Visual Studio static library projects for the FreeRTOS Kernel, FreeRTOS+TCP, Logging, MbedTLS, coreHTTP, and corePKCS11. With the addition of the static library projects, all Visual Studio projects have been updated to use them. Additionally, all demos dependent on coreMQTT have been updated to work with coreMQTT v2.X.X.\n\n## Getting started\nThe [FreeRTOS.org](https://www.freertos.org) website contains a [FreeRTOS Kernel Quick Start Guide](https://www.freertos.org/Documentation/01-FreeRTOS-quick-start/01-Beginners-guide/02-Quick-start-guide), a [list of supported devices and compilers](https://www.freertos.org/RTOS_ports.html), the [API reference](https://www.freertos.org/Documentation/02-Kernel/04-API-references/01-Task-creation/00-TaskHandle), and many other resources.\n\n### Getting help\nYou can use your Github login to get support from both the FreeRTOS community and directly from the primary FreeRTOS developers on our [active support forum](https://forums.freertos.org).  The [FAQ](https://www.freertos.org/Why-FreeRTOS/FAQs) provides another support resource.\n\n## Cloning this repository\nThis repo uses [Git Submodules](https://git-scm.com/book/en/v2/Git-Tools-Submodules) to bring in dependent components.\n\n**Note:** If you download the ZIP file provided by the GitHub UI, you will not get the contents of the submodules. (The ZIP file is also not a valid git repository)\n\nIf using Windows, because this repository and its submodules contain symbolic links, set `core.symlinks` to true with the following command:\n```\ngit config --global core.symlinks true\n```\nIn addition to this, either enable [Developer Mode](https://docs.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development) or, whenever using a git command that writes to the system (e.g. `git pull`, `git clone`, and `git submodule update --init --recursive`), use a console elevated as administrator so that git can properly create symbolic links for this repository. Otherwise, symbolic links will be written as normal files with the symbolic links' paths in them as text. [This](https://blogs.windows.com/windowsdeveloper/2016/12/02/symlinks-windows-10/) gives more explanation.\n\nTo clone using HTTPS:\n```\ngit clone https://github.com/FreeRTOS/FreeRTOS.git --recurse-submodules\n```\nUsing SSH:\n```\ngit clone git@github.com:FreeRTOS/FreeRTOS.git --recurse-submodules\n```\n\nIf you have downloaded the repo without using the `--recurse-submodules` argument, you need to run:\n```\ngit submodule update --init --recursive\n```\n\n## Repository structure\nThis repository contains the FreeRTOS Kernel, a number of supplementary libraries including the LTS ones, and a comprehensive set of example projects.  Many libraries (including the FreeRTOS kernel) are included as Git submodules from their own Git repositories.\n\n### Kernel source code and example projects\n```FreeRTOS/Source``` contains the FreeRTOS kernel source code (submoduled from https://github.com/FreeRTOS/FreeRTOS-Kernel).\n\n```FreeRTOS/Demo``` contains pre-configured example projects that demonstrate the FreeRTOS kernel executing on different hardware platforms and using different compilers.\n\n### Supplementary library source code and example projects\n```FreeRTOS-Plus/Source``` contains source code for additional FreeRTOS component libraries, as well as select partner provided libraries. These subdirectories contain further readme files and links to documentation.\n\n```FreeRTOS-Plus/Demo``` contains pre-configured example projects that demonstrate the FreeRTOS kernel used with the additional FreeRTOS component libraries.\n\n## Previous releases\n[Releases](https://github.com/FreeRTOS/FreeRTOS/releases) contains older FreeRTOS releases.\n\n\n## FreeRTOS Lab Projects\nFreeRTOS Lab projects are libraries and demos that are fully functional, but may be experimental or undergoing optimizations and refactorization to improve memory usage, modularity, documentation, demo usability, or test coverage.\n\nMost FreeRTOS Lab libraries can be found in the [FreeRTOS-Labs repository](https://github.com/FreeRTOS/FreeRTOS-Labs).\n\nA number of FreeRTOS Lab Demos can be found in the [FreeRTOS Github Organization](https://github.com/FreeRTOS) by searching for \"Lab\" or following [this link](https://github.com/FreeRTOS?q=Lab&type=&language=) to the search results.\n\n## coreMQTT Agent Demos\nThe [FreeRTOS/coreMQTT-Agent-Demos](https://github.com/FreeRTOS/coreMQTT-Agent-Demos) repository contains demos to showcase use of the [coreMQTT-Agent](https://github.com/FreeRTOS/coreMQTT-Agent) library to share an MQTT connection between multiple application tasks.\n\nThe demos show a single MQTT connection usage between multiple application tasks for interacting with AWS services (including [Over-the-air-Updates](https://docs.aws.amazon.com/freertos/latest/userguide/freertos-ota-dev.html), [Device Shadow](https://docs.aws.amazon.com/iot/latest/developerguide/iot-device-shadows.html),\n [Device Defender](https://docs.aws.amazon.com/iot/latest/developerguide/device-defender.html)) alongside performing simple Publish-Subscribe operations.\n## CBMC\n\nThe `FreeRTOS/Test/CBMC/proofs` directory contains CBMC proofs.\n\nTo learn more about CBMC and proofs specifically, review the training material [here](https://model-checking.github.io/cbmc-training).\n\nIn order to run these proofs you will need to install CBMC and other tools by following the instructions [here](https://model-checking.github.io/cbmc-training/installation.html).\n"
        },
        {
          "name": "Upgrading-to-FreeRTOS.url",
          "type": "blob",
          "size": 0.103515625,
          "content": "[InternetShortcut]\nURL=https://freertos.org/a00104.html#upgrade-instructions\nIDList=\nHotKey=0\nIconIndex=0\n"
        },
        {
          "name": "cspell.config.yaml",
          "type": "blob",
          "size": 0.64453125,
          "content": "---\n$schema: https://raw.githubusercontent.com/streetsidesoftware/cspell/main/cspell.schema.json\nversion: '0.2'\n# Allows things like stringLength\nallowCompoundWords: true\n\n# Read files not to spell check from the git ignore\nuseGitignore: true\n\n#  Language settings for C\nlanguageSettings:\n  - caseSensitive: false\n    enabled: true\n    languageId: c\n    locale: \"*\"\n\n# Add a dictionary, and the path to the word list\ndictionaryDefinitions:\n  - name: freertos-words\n    path: '.github/.cSpellWords.txt'\n    addWords: true\n\ndictionaries:\n  - freertos-words\n\n# Paths and files to ignore\nignorePaths:\n  - 'dependency'\n  - 'docs'\n  - 'ThirdParty'\n  - 'History.txt'\n"
        },
        {
          "name": "manifest.yml",
          "type": "blob",
          "size": 6.044921875,
          "content": "name : \"FreeRTOS\"\nversion: \"202212.00\"\ndescription: \"This is the standard distribution of FreeRTOS.\"\nlicense: \"MIT\"\n\ndependencies:\n  - name: \"FreeRTOS-Kernel\"\n    version: \"f31787d\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/FreeRTOS/FreeRTOS-Kernel.git\"\n      path: \"FreeRTOS/Source\"\n\n  - name: \"FreeRTOS-Plus-TCP\"\n    version: \"fbb668ac\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/FreeRTOS/FreeRTOS-Plus-TCP.git\"\n      path: \"FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP\"\n\n  - name: \"coreJSON\"\n    version: \"b92c8cd\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/FreeRTOS/coreJSON.git\"\n      path: \"FreeRTOS-Plus/Source/coreJSON\"\n\n  - name: \"sigv4\"\n    version: \"9d9f95a\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/aws/SigV4-for-AWS-IoT-embedded-sdk.git\"\n      path: \"FreeRTOS-Plus/Source/AWS/sigv4\"\n\n  - name: \"coreHTTP\"\n    version: \"dc94df0\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/FreeRTOS/coreHTTP.git\"\n      path: \"FreeRTOS-Plus/Source/Application-Protocols/coreHTTP\"\n\n  - name: \"coreMQTT\"\n    version: \"238350a\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/FreeRTOS/coreMQTT.git\"\n      path: \"FreeRTOS-Plus/Source/Application-Protocols/coreMQTT\"\n\n  - name: \"coreMQTT Agent\"\n    version: \"d3668a6\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/FreeRTOS/coreMQTT-Agent.git\"\n      path: \"FreeRTOS-Plus/Source/Application-Protocols/coreMQTT-Agent\"\n\n  - name: \"corePKCS11\"\n    version: \"59875a9\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/FreeRTOS/corePKCS11.git\"\n      path: \"FreeRTOS-Plus/Source/corePKCS11\"\n\n  - name: \"device-defender\"\n    version: \"9dbf7ba\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/aws/Device-Defender-for-AWS-IoT-embedded-sdk.git\"\n      path: \"FreeRTOS-Plus/Source/AWS/device-defender\"\n\n  - name: \"device-shadow\"\n    version: \"2f16e7c\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/aws/Device-Shadow-for-AWS-IoT-embedded-sdk.git\"\n      path: \"FreeRTOS-Plus/Source/AWS/device-shadow\"\n\n  - name: \"jobs\"\n    version: \"f1c3bd6\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/aws/Jobs-for-AWS-IoT-embedded-sdk.git\"\n      path: \"FreeRTOS-Plus/Source/AWS/jobs\"\n\n  - name: \"wolfssl\"\n    version: \"v4.5.0-stable\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/wolfSSL/wolfssl\"\n      path: \"FreeRTOS-Plus/ThirdParty/wolfSSL\"\n\n  - name: \"mbedtls\"\n    version: \"v3.5.1\"\n    repository:\n      type: \"git\"\n      url:  \"https://github.com/Mbed-TLS/mbedtls.git\"\n      path: \"FreeRTOS-Plus/ThirdParty/mbedtls\"\n\n  - name: \"glib\"\n    version: \"2.76.3\"\n    repository:\n      type: \"git\"\n      url:  \"https://gitlab.gnome.org/GNOME/glib.git\"\n      path: \"FreeRTOS-Plus/ThirdParty/glib\"\n\n  - name: \"libslirp\"\n    version: \"177da3d\"\n    repository:\n      type: \"git\"\n      url:  \"https://gitlab.freedesktop.org/slirp/libslirp.git\"\n      path: \"FreeRTOS-Plus/ThirdParty/libslirp\"\n\n  - name: \"backoffAlgorithm\"\n    version: \"0b4f992\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/FreeRTOS/backoffAlgorithm\"\n      path: \"FreeRTOS-Plus/Source/Utilities/backoff_algorithm\"\n\n  - name: \"ota\"\n    version: \"9a8395b\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/aws/ota-for-aws-iot-embedded-sdk\"\n      path: \"FreeRTOS-Plus/Source/AWS/ota\"\n\n  - name: \"coreSNTP\"\n    version: \"c5face5\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/FreeRTOS/coreSNTP\"\n      path: \"FreeRTOS-Plus/Source/Application-Protocols/coreSNTP\"\n\n  - name: \"FreeRTOS-Community-Supported-Demos\"\n    version: \"272ca5b\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/FreeRTOS/FreeRTOS-Community-Supported-Demos\"\n      path: \"FreeRTOS/Demo/ThirdParty/Community-Supported-Demos\"\n\n  - name: \"FreeRTOS-Partner-Supported-Demos\"\n    version: \"022783f\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/FreeRTOS/FreeRTOS-Partner-Supported-Demos\"\n      path: \"FreeRTOS/Demo/ThirdParty/Partner-Supported-Demos\"\n\n  - name: \"FreeRTOS-Cellular-Interface\"\n    version: \"f1097fb\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/FreeRTOS/FreeRTOS-Cellular-Interface.git\"\n      path: \"FreeRTOS-Plus/Source/FreeRTOS-Cellular-Interface\"\n\n  - name: \"Lab-FreeRTOS-Cellular-Interface-Reference-Quectel-BG96\"\n    version: \"f61fc4c\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/FreeRTOS/Lab-FreeRTOS-Cellular-Interface-Reference-Quectel-BG96.git\"\n      path: \"FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/bg96\"\n\n  - name: \"Lab-FreeRTOS-Cellular-Interface-Reference-Sierra-Wireless-HL7802\"\n    version: \"7d6393a\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/FreeRTOS/Lab-FreeRTOS-Cellular-Interface-Reference-Sierra-Wireless-HL7802.git\"\n      path: \"FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/hl7802\"\n\n  - name: \"Lab-FreeRTOS-Cellular-Interface-Reference-ublox-SARA-R4\"\n    version: \"dcdae99\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/FreeRTOS/Lab-FreeRTOS-Cellular-Interface-Reference-ublox-SARA-R4.git\"\n      path: \"FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/sara-r4\"\n\n  - name: \"fleet-provisioning\"\n    version: \"daf174d\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/aws/Fleet-Provisioning-for-AWS-IoT-embedded-sdk.git\"\n      path: \"FreeRTOS-Plus/Source/AWS/fleet-provisioning\"\n\n  - name: \"tinycbor\"\n    version: \"v0.6.0\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/intel/tinycbor.git\"\n      path: \"FreeRTOS-Plus/ThirdParty/tinycbor\"\n\n  - name: \"TraceRecorder\"\n    version: \"3aa0355\"\n    repository:\n      type: \"git\"\n      url: \"https://github.com/percepio/TraceRecorderSource.git\"\n      path: \"FreeRTOS-Plus/Source/FreeRTOS-Plus-Trace\"\n\n  - name: \"CMock\"\n    version: \"afa2949\"\n    repository:\n      type: \"git\"\n      url: \" https://github.com/ThrowTheSwitch/CMock.git\"\n      path: \"FreeRTOS/Test/CMock/CMock\"\n\n  - name: \"CMock\"\n    version: \"150573c\"\n    repository:\n      type: \"git\"\n      url: \" https://github.com/ThrowTheSwitch/CMock.git\"\n      path: \"FreeRTOS-Plus/Test/CMock\"\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}