{
  "metadata": {
    "timestamp": 1736710327066,
    "page": 129,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "klange/toaruos",
      "stars": 6197,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3876953125,
          "content": "*.aux\n*.idx\n*.ilg\n*.ind\n*.log\n*.o\n*.a\n*.out\n*.pdf\n*.so\n*.swp\n*.swn\n*.toc\n*.ko\n*.pcap\n.gdb_history\n/ramdisk.tar\n/ramdisk.igz\n/misaka-kernel.64\n/misaka-kernel\n/kernel/symbols.S\n/util/build\n/util/local\n/util/cross\n/base/bin/*\n/base/usr/bin/*\n/base/usr/lib/*\n/base/lib/kuroko/*\n/base/usr/share/games/doom\n/.make/\n/cdrom\n/fatbase\n/image.iso\n/boot/mbr.sys\n/bootstub\n/.arch\n/kernel8.img\n/kernel8.img.elf\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2197265625,
          "content": "[submodule \"util/binutils-gdb\"]\n\tpath = util/binutils-gdb\n\turl = ../../toaruos/binutils-gdb\n[submodule \"util/gcc\"]\n\tpath = util/gcc\n\turl = ../../toaruos/gcc\n[submodule \"kuroko\"]\n\tpath = kuroko\n\turl = ../../kuroko-lang/kuroko\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.6474609375,
          "content": "K. Lange <klange@toaruos.org>\nK. Lange <klange@toaruos.org> <klange@dakko.us>\nK. Lange <klange@toaruos.org> <k@dakko.us>\nK. Lange <klange@toaruos.org> <kevin.lange@dakko.us>\nK. Lange <klange@toaruos.org> <kevin.lange@mujin.co.jp>\nK. Lange <klange@toaruos.org> <kevin.lange@phpwnage.com>\nK. Lange <klange@toaruos.org> <klange@yelp.com>\nMarkus Schober <schober1@bobrife.acm.uiuc.edu> <schober1@illinois.edu>\nMike Gerow <gerow@mgerow.com> <gerow.mike@gmail.com>\nTianyi Wang <wang103@illinois.edu> <tianyi@Rin.(none)>\nJozef Nagy <jozefnagy1133@yahoo.com> <38380751+jozefnagyoff@users.noreply.github.com>\nMai M. <mathew1800@gmail.com>\nOfek Lavie <ofeklavie@gmail.com>\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.388671875,
          "content": "Maintainer and Author:\n\n    K. Lange\n\nMajor Contributors:\n\n    Mike Gerow\n    Dale Weiler\n    Matt White\n    Markus Schober\n\nOther Contributors:\n\n    Adam DiCarlo\n    David Hayman\n    Fabien Siron\n    Gil Mendes\n    Ivailo Monev\n    Josh Kilmer\n    Lioncash\n    Noah Rosamilia\n    Ofek\n    Patrick Lucas\n    Peter Harliman Liem\n    Shawn Anastasio\n    Steve Jenson\n    Tianyi Wang\n    Tyler Bindon\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.5859375,
          "content": "\nUniversity of Illinois/NCSA Open Source License\n\nCopyright (c) 2011-2022 K Lange, et al. (hereafter [fullname]). All rights reserved.\n\nDeveloped by: ToaruOS (hereafter [project])\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation files\n(the \"Software\"), to deal with the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\n* Redistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimers.\n\n* Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimers in the\n  documentation and/or other materials provided with the distribution.\n\n* Neither the names of [fullname], [project] nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this Software without specific prior written permission.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nCONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 7.6396484375,
          "content": "# ToaruOS 2.0 root Makefile\nTOOLCHAIN=util\nBASE=base\nexport PATH := $(shell $(TOOLCHAIN)/activate.sh)\n\nARCH ?= $(shell $(TOOLCHAIN)/arch.sh)\n\ninclude build/${ARCH}.mk\n\n# Cross compiler binaries\nCC = ${TARGET}-gcc\nNM = ${TARGET}-nm\nCXX= ${TARGET}-g++\nAR = ${TARGET}-ar\nAS = ${TARGET}-as\nOC = ${TARGET}-objcopy\nSTRIP= ${TARGET}-strip\n\n# CFLAGS for kernel objects and modules\nKERNEL_CFLAGS  = -ffreestanding -O2 -std=gnu11 -g -static\nKERNEL_CFLAGS += -Wall -Wextra -Wno-unused-function -Wno-unused-parameter -Wstrict-prototypes\nKERNEL_CFLAGS += -pedantic -Wwrite-strings ${ARCH_KERNEL_CFLAGS}\n\n# Defined constants for the kernel\nKERNEL_CFLAGS += -D_KERNEL_ -DKERNEL_ARCH=${ARCH}\nKERNEL_CFLAGS += -DKERNEL_GIT_TAG=$(shell util/make-version)\n\n# Automatically find kernel sources from relevant paths\nKERNEL_OBJS =  $(patsubst %.c,%.o,$(wildcard kernel/*.c))\nKERNEL_OBJS += $(patsubst %.c,%.o,$(wildcard kernel/*/*.c))\nKERNEL_OBJS += $(patsubst %.c,%.o,$(wildcard kernel/arch/${ARCH}/*.c))\n\n# Assembly sources only come from the arch-dependent directory\nKERNEL_ASMOBJS  = $(filter-out kernel/symbols.o,$(patsubst %.S,%.o,$(wildcard kernel/arch/${ARCH}/*.S)))\n\n# These sources are used to determine if we should update symbols.o\nKERNEL_SOURCES  = $(wildcard kernel/*.c) $(wildcard kernel/*/*.c) $(wildcard kernel/${ARCH}/*/*.c)\nKERNEL_SOURCES += $(wildcard kernel/arch/${ARCH}/*.S)\n\n# Kernel modules are one file = one module; if you want to build more complicated\n# modules, you could potentially use `ld -r` to turn multiple source objects into\n# a single relocatable object file.\nARCH_ENABLED_MODS = $(shell util/valid-modules.sh $(ARCH))\nMODULES = $(patsubst modules/%.c,$(BASE)/mod/%.ko,$(foreach mod,$(ARCH_ENABLED_MODS),modules/$(mod).c))\n\nEMU = qemu-system-${ARCH}\n\nAPPS=$(patsubst apps/%.c,%,$(wildcard apps/*.c))\nAPPS_X=$(foreach app,$(APPS),$(BASE)/bin/$(app))\nAPPS_Y=$(foreach app,$(APPS),.make/$(app).mak)\nAPPS_SH=$(patsubst apps/%.sh,%.sh,$(wildcard apps/*.sh))\nAPPS_SH_X=$(foreach app,$(APPS_SH),$(BASE)/bin/$(app))\nAPPS_KRK=$(patsubst apps/%.krk,%.krk,$(wildcard apps/*.krk))\nAPPS_KRK_X=$(foreach app,$(APPS_KRK),$(BASE)/bin/$(app))\n\nLIBS=$(patsubst lib/%.c,%,$(wildcard lib/*.c))\nLIBS_X=$(foreach lib,$(LIBS),$(BASE)/lib/libtoaru_$(lib).so)\nLIBS_Y=$(foreach lib,$(LIBS),.make/$(lib).lmak)\n\nKRK_MODS = $(patsubst kuroko/src/modules/module_%.c,$(BASE)/lib/kuroko/%.so,$(wildcard kuroko/src/modules/module_*.c))\nKRK_MODS += $(patsubst kuroko/modules/%,$(BASE)/lib/kuroko/%,$(wildcard kuroko/modules/*.krk kuroko/modules/*/*.krk kuroko/modules/*/*/.krk kuroko/modules/*/*/*.krk))\nKRK_MODS += $(patsubst lib/kuroko/%,$(BASE)/lib/kuroko/%,$(wildcard lib/kuroko/*.krk))\nKRK_MODS_X = $(patsubst lib/kuroko/%.c,$(BASE)/lib/kuroko/%.so,$(wildcard lib/kuroko/*.c))\nKRK_MODS_Y = $(patsubst lib/kuroko/%.c,.make/%.kmak,$(wildcard lib/kuroko/*.c))\n\nCFLAGS= -O2 -std=gnu11 -I. -Iapps -fplan9-extensions -Wall -Wextra -Wno-unused-parameter ${ARCH_USER_CFLAGS}\nLIBC_CFLAGS = -O2 -std=gnu11 -ffreestanding -Wall -Wextra -Wno-unused-parameter ${ARCH_USER_CFLAGS}\n\nLIBC_OBJS  = $(patsubst %.c,%.o,$(wildcard libc/*.c))\nLIBC_OBJS += $(patsubst %.c,%.o,$(wildcard libc/*/*.c))\nLIBC_OBJS += $(patsubst %.c,%.o,$(wildcard libc/arch/${ARCH}/*.c))\n\nGCC_SHARED = $(BASE)/usr/lib/libgcc_s.so.1 $(BASE)/usr/lib/libgcc_s.so\n\nCRTS  = $(BASE)/lib/crt0.o $(BASE)/lib/crti.o $(BASE)/lib/crtn.o\n\nLC = $(BASE)/lib/libc.so $(GCC_SHARED)\n\n.PHONY: all system clean run shell\n\n$(BASE)/mod/%.ko: modules/%.c | dirs\n\t${CC} -c ${KERNEL_CFLAGS} -fno-pie -mcmodel=large  -o $@ $<\n\nramdisk.igz: $(wildcard $(BASE)/* $(BASE)/*/* $(BASE)/*/*/* $(BASE)/*/*/*/* $(BASE)/*/*/*/*/*) $(APPS_X) $(LIBS_X) $(KRK_MODS_X) $(BASE)/bin/kuroko $(BASE)/lib/ld.so $(BASE)/lib/libm.so $(APPS_KRK_X) $(KRK_MODS) $(APPS_SH_X) $(MODULES)\n\tpython3 util/createramdisk.py\n\nKRK_SRC = $(sort $(wildcard kuroko/src/*.c))\n$(BASE)/bin/kuroko: $(KRK_SRC) $(CRTS)  lib/rline.c | $(LC)\n\t$(CC) $(CFLAGS) -o $@ -Wl,--export-dynamic -Ikuroko/src $(KRK_SRC) lib/rline.c\n\n$(BASE)/lib/kuroko/%.so: kuroko/src/modules/module_%.c| dirs $(LC)\n\t$(CC) $(CFLAGS) -shared -fPIC -Ikuroko/src -o $@ $<\n\n$(BASE)/lib/kuroko/%.krk: kuroko/modules/%.krk | dirs\n\tmkdir -p $(dir $@)\n\tcp $< $@\n\n$(BASE)/lib/kuroko/%.krk: lib/kuroko/%.krk | dirs\n\tmkdir -p $(dir $@)\n\tcp $< $@\n\n$(BASE)/lib/libkuroko.so: $(KRK_SRC) | $(LC)\n\t$(CC) -O2 -shared -fPIC -Ikuroko/src -o $@ $(filter-out kuroko/src/kuroko.c,$(KRK_SRC))\n\n$(BASE)/lib/ld.so: linker/linker.c $(BASE)/lib/libc.a | dirs $(LC)\n\t$(CC) -g -static -Wl,-static $(CFLAGS) -z max-page-size=0x1000 -o $@ -Os -T linker/link.ld $<\n\nkernel/sys/version.o: ${KERNEL_SOURCES}\n\nkernel/symbols.o: ${KERNEL_ASMOBJS} ${KERNEL_OBJS} util/gensym.krk\n\t-rm -f kernel/symbols.o\n\t${NM} -g -f p ${KERNEL_ASMOBJS} ${KERNEL_OBJS} | kuroko util/gensym.krk > kernel/symbols.S\n\t${CC} -c kernel/symbols.S -o $@\n\nkernel/%.o: kernel/%.S\n\t${CC} -c $< -o $@\n\nHEADERS = $(wildcard base/usr/include/kernel/*.h) $(wildcard base/usr/include/kernel/*/*.h)\n\nkernel/%.o: kernel/%.c ${HEADERS}\n\t${CC} ${KERNEL_CFLAGS} -nostdlib -g -Iinclude -c -o $@ $<\n\nclean:\n\t-rm -f ${KERNEL_ASMOBJS}\n\t-rm -f ${KERNEL_OBJS} $(MODULES)\n\t-rm -f kernel/symbols.o kernel/symbols.S misaka-kernel misaka-kernel.64\n\t-rm -f ramdisk.tar ramdisk.igz \n\t-rm -f $(APPS_Y) $(LIBS_Y) $(KRK_MODS_Y) $(KRK_MODS)\n\t-rm -f $(APPS_X) $(LIBS_X) $(KRK_MODS_X) $(APPS_KRK_X) $(APPS_SH_X)\n\t-rm -f $(BASE)/lib/crt0.o $(BASE)/lib/crti.o $(BASE)/lib/crtn.o\n\t-rm -f $(BASE)/lib/libc.so $(BASE)/lib/libc.a\n\t-rm -f $(LIBC_OBJS) $(BASE)/lib/ld.so $(BASE)/lib/libkuroko.so $(BASE)/lib/libm.so\n\t-rm -f $(BASE)/bin/kuroko\n\t-rm -f $(GCC_SHARED)\n\t-rm -f boot/efi/*.o boot/bios/*.o\n\nlibc/%.o: libc/%.c base/usr/include/syscall.h \n\t$(CC) ${LIBC_CFLAGS} -fPIC -c -o $@ $<\n\n.PHONY: libc\nlibc: $(BASE)/lib/libc.a $(BASE)/lib/libc.so\n\n$(BASE)/lib/libc.a: ${LIBC_OBJS} $(CRTS)\n\t$(AR) cr $@ $(LIBC_OBJS)\n\n$(BASE)/lib/libc.so: ${LIBC_OBJS} | $(CRTS)\n\t${CC} -nodefaultlibs -shared -fPIC -o $@ $^ -lgcc\n\n$(BASE)/lib/crt%.o: libc/arch/${ARCH}/crt%.S\n\t${AS} -o $@ $<\n\n$(BASE)/usr/lib/%: $(TOOLCHAIN)/local/${TARGET}/lib/% | dirs\n\tcp -a $< $@\n\t-$(STRIP) $@\n\n$(BASE)/lib/libm.so: util/libm.c\n\t$(CC) -shared -nostdlib -fPIC -o $@ $<\n\n$(BASE)/dev:\n\tmkdir -p $@\n$(BASE)/tmp:\n\tmkdir -p $@\n$(BASE)/proc:\n\tmkdir -p $@\n$(BASE)/bin:\n\tmkdir -p $@\n$(BASE)/lib:\n\tmkdir -p $@\n$(BASE)/cdrom:\n\tmkdir -p $@\n$(BASE)/var:\n\tmkdir -p $@\n$(BASE)/mod:\n\tmkdir -p $@\n$(BASE)/lib/kuroko:\n\tmkdir -p $@\n$(BASE)/usr/lib:\n\tmkdir -p $@\n$(BASE)/usr/bin:\n\tmkdir -p $@\nboot/efi:\n\tmkdir -p $@\nboot/bios:\n\tmkdir -p $@\nfatbase/efi/boot:\n\tmkdir -p $@\ncdrom:\n\tmkdir -p $@\n.make:\n\tmkdir -p .make\ndirs: $(BASE)/dev $(BASE)/tmp $(BASE)/proc $(BASE)/bin $(BASE)/lib $(BASE)/cdrom $(BASE)/usr/lib $(BASE)/usr/bin $(BASE)/lib/kuroko cdrom $(BASE)/var fatbase/efi/boot .make $(BASE)/mod boot/efi boot/bios\n\nifeq (,$(findstring clean,$(MAKECMDGOALS)))\n-include ${APPS_Y}\n-include ${LIBS_Y}\n-include ${KRK_MODS_Y}\nendif\n\n.make/%.lmak: lib/%.c util/auto-dep.krk | dirs $(CRTS)\n\tkuroko util/auto-dep.krk --makelib $< > $@\n\n.make/%.mak: apps/%.c util/auto-dep.krk | dirs $(CRTS)\n\tkuroko util/auto-dep.krk --make $< > $@\n\n.make/%.kmak: lib/kuroko/%.c util/auto-dep.krk | dirs\n\tkuroko util/auto-dep.krk --makekurokomod $< > $@\n\n$(BASE)/bin/%.sh: apps/%.sh\n\tcp $< $@\n\tchmod +x $@\n\n$(BASE)/bin/%.krk: apps/%.krk\n\tcp $< $@\n\tchmod +x $@\n\n.PHONY: libs\nlibs: $(LIBS_X)\n\n.PHONY: apps\napps: $(APPS_X)\n\nSOURCE_FILES  = $(wildcard kernel/*.c kernel/*/*.c kernel/*/*/*.c kernel/*/*/*/*.c)\nSOURCE_FILES += $(wildcard apps/*.c linker/*.c libc/*.c libc/*/*.c lib/*.c lib/kuroko/*.c)\nSOURCE_FILES += $(wildcard kuroko/src/*.c kuroko/src/*.h kuroko/src/*/*.c kuroko/src/*/*.h)\nSOURCE_FILES += $(wildcard $(BASE)/usr/include/*.h $(BASE)/usr/include/*/*.h $(BASE)/usr/include/*/*/*.h)\ntags: $(SOURCE_FILES)\n\tctags -f tags $(SOURCE_FILES)\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.6455078125,
          "content": "# ToaruOS\n\nToaruOS is a \"complete\" operating system for x86-64 PCs and experimental support for ARMv8.\n\nWhile many independent, hobby, and research OSes aim to experiment with new designs, ToaruOS is intended as an educational resource, providing a representative microcosm of functionality found in major desktop operating systems.\n\nThe OS includes a kernel, bootloader, dynamic shared object linker, C standard library, its own composited windowing system, a dynamic bytecode-compiled programming language, advanced code editor, and dozens of other utilities and example applications.\n\nThere are no external runtime dependencies and all required source code, totalling roughly 100k lines of (primarily) C, is included in this repository, save for [Kuroko](https://github.com/kuroko-lang/kuroko), which lives separately.\n\n![Screenshot](https://klange.dev/s/Screenshot%20from%202021-12-06%2011-38-12.png)\n*Demonstration of ToaruOS's UI and some applications.*\n\n## History\n\n> I have been working on ToaruOS for over a decade now, and my goals have changed over the years.\n>\n> When I first started the project in December 2010, my aim was to \"learn by doing\" - studying Unix-like systems by making one from scratch.\n> I had been a contributor to Compiz, one of the first widely-used compositing window managers for X11, a few years prior, and somewhat naturally ToaruOS gained a GUI built on similar concepts early on.\n>\n> For its original 1.0 release in 2015, ToaruOS was not the \"completely from scratch\" OS it has since become.\n> Newlib provided the libc, and the GUI was built on Cairo, libpng, and Freetype.\n> In the middle of 2018, I started a new project to replace these third-party components, which was eventually completed and merged to become ToaruOS 1.6.\n>\n> Through out the project, ToaruOS has also attracted quite a few beginner OS developers who have tried to use it as a reference.\n> ToaruOS's kernel, however, was a source of personal embarrassment for me, and in April 2021, after a long hiatus, I began work on a new one.\n> The result was Misaka: a new 64-bit, SMP-enabled kernel. Misaka was merged in May and started the 1.99 series of beta releases leading up to ToaruOS 2.0.\n\n## Features\n\n- **Dynamically linked userspace** with shared libraries and `dlopen`.\n- **Composited graphical UI** with software acceleration and a late-2000s design inspiration.\n- **VM integration** for absolute mouse and automatic display sizing in VirtualBox and VMware Workstation.\n- **Unix-like terminal interface** including a feature-rich terminal emulator and several familiar utilities.\n- **Optional third-party ports** including GCC 10.3, Binutils, SDL1.2, Quake, and more.\n\n### Notable Components\n\n- **Misaka** (kernel), [kernel/](kernel/), a hybrid modular kernel, and the core of the operating system.\n- **Yutani** (window compositor), [apps/compositor.c](apps/compositor.c), manages window buffers, layout, and input routing.\n- **Bim** (text editor), [apps/bim.c](apps/bim.c), is a Vim-inspired editor with syntax highlighting.\n- **Terminal**, [apps/terminal.c](apps/terminal.c), xterm-esque terminal emulator with 24-bit color support.\n- **ld.so** (dynamic linker/loader), [linker/linker.c](linker/linker.c), loads dynamically-linked ELF binaries.\n- **Esh** (shell), [apps/esh.c](apps/esh.c), supports pipes, redirections, variables, etc.\n- **Kuroko** (interpreter), [kuroko/](https://kuroko-lang.github.io/), a dynamic bytecode-compiled programming language.\n\n## Current Goals\n\nThe following projects are currently in progress:\n\n- **Rewrite the network stack** for greater throughput, stability, and server support.\n- **Improve SMP performance** with better scheduling and smarter userspace synchronization functions.\n- **Support more hardware** with new device drivers for AHCI, USB, virtio devices, etc.\n- **Bring back ports** from ToaruOS \"Legacy\", like muPDF and Mesa.\n- **Improve POSIX coverage** especially in regards to signals, synchronization primitives, as well as by providing more common utilities.\n- **Continue to improve the C library** which remains quite incomplete compared to Newlib and is a major source of issues with bringing back old ports.\n- **Replace third-party development tools** to get the OS to a state where it is self-hosting with just the addition of a C compiler.\n- **Implement a C compiler toolchain** in [toarucc](https://github.com/klange/toarucc).\n\n## Building / Installation\n\n### Building With Docker\n\nGeneral users hoping to build ToaruOS from source are recommended to fork the repository on Github and make use of the Github CI pipeline.\n\nFor those looking to build locally on an appropriately configured Linux host with Docker, a build container is available. The ToaruOS repository should be used as a bind mount at `/root/misaka` and `util/build-in-docker.sh` can be run within this container to complete the compilation process:\n\n    git clone https://github.com/klange/toaruos\n    cd toaruos\n    git submodule update --init kuroko\n    docker pull toaruos/build-tools:1.99.x\n    docker run -v `pwd`:/root/misaka -w /root/misaka -e LANG=C.UTF-8 -t toaruos/build-tools:1.99.x util/build-in-docker.sh\n\nAfter building like this, you can run the various utility targets (`make run`, etc.). Try `make shell` to run a ToaruOS shell using a serial port with QEMU.\n\n### Build Process Internals\n\nThe `Makefile` uses a Kuroko tool, `auto-dep.krk`, to generate additional Makefiles for the userspace applications and libraries, automatically resolving dependencies based on `#include` directives.\n\nIn an indeterminate order, the C library, kernel, userspace librares and applications are built, combined into a compressed archive for use as a ramdisk, and then packaged into an ISO9660 filesystem image.\n\n### Project Layout\n\n- **apps** - Userspace applications, all first-party.\n- **base** - Ramdisk root filesystem staging directory. Includes C headers in `base/usr/include`, as well as graphical resources for the compositor and window decorator.\n- **boot** - BIOS and EFI loader with interactive menus.\n- **build** - Auxiliary build scripts for platform ports.\n- **kernel** - The Misaka kernel.\n- **kuroko** - Submodule checkout of the Kuroko interpreter.\n- **lib** - Userspace libraries.\n- **libc** - C standard library implementation.\n- **linker** - Userspace dynamic linker/loader, implements shared library support.\n- **modules** - Loadable driver modules for the kernel.\n- **util** - Utility scripts, staging directory for the toolchain (binutils/gcc).\n- **.make** - Generated Makefiles.\n\n### Filesystem Layout\n\nThe root filesystem is set up as follows:\n\n- `bin`: First-party applications.\n- `cdrom`: Mount point for the CD, if available.\n- `dev`: Virtual device directory, generated by the kernel.\n  - `net`: Network interface devices.\n  - `pex`: Packet Exchange hub, lists accessible IPC services.\n  - `pts`: PTY secondaries, endpoints for TTYs.\n- `etc`: Configuration files, startup scripts.\n- `home`: User directories.\n- `lib`: First-party libraries\n  - `kuroko`: Kuroko modules.\n- `mod`: Loadable kernel modules.\n- `proc`: Virtual files that present kernel state.\n  - `1`, etc.: Virtual files with status information for individual processes.\n- `src`: Source files, see \"Project Layout\" section above.\n- `tmp`: Mounted as a read/write tmpfs normally.\n- `usr`: Userspace resources\n  - `bin`: Third-party applications, normally empty until packages are installed.\n  - `include`: Header files, including potentially ones from third-party packages.\n  - `lib`: Third-party libraries. Should have `libgcc_s.so` by default.\n  - `share`: Various resources.\n    - `bim`: Syntax highlighting and themes for the text editor.\n    - `cursor`: Mouse cursor sprites.\n    - `fonts`: TrueType font files. Live CDs ship with Deja Vu Sans.\n    - `games`: Dumping ground for game-related resource files, like Doom wads.\n    - `help`: Documentation files for the Help Browser application.\n    - `icons`: PNG icons, divided into further directories by size.\n    - `ttk`: Spritesheet resources for the window decorator and widget library.\n    - `wallpapers`: JPEG wallpapers.\n- `var`: Runtime files, including package manager manifest cache, PID files, some lock files, etc.\n\n## Running ToaruOS\n\n### VirtualBox and VMware Workstation\n\nThe best end-user experience with ToaruOS will be had in either of these virtual machines, as ToaruOS has support for their automatic display sizing and absolute mouse positioning.\n\nSet up a new VM for an \"other\" 64-bit guest, supply it with at least 1GiB of RAM, attach the CD image, remove or ignore any hard disks, and select an Intel Gigabit NIC. Two or more CPUs are recommended, as well.\n\n![VirtualBox screenshot](https://klange.dev/s/Screenshot%20from%202021-12-06%2011-39-27.png)\n*ToaruOS running in VirtualBox.*\n\n![VMware screenshot](https://klange.dev/s/Screenshot%20from%202021-12-06%2011-41-17.png)\n*ToaruOS running in VMware Workstation Player.*\n\nBy default, the bootloader will pass a flag to the VirtualBox device driver to disable \"Seamless\" support as the implementation has a performance overhead. To enable Seamless mode, use the bootloader menu to check the \"VirtualBox Seamless\" option before booting. The menu also has options to disable automatic guest display sizing if you experience issues with this feature.\n\n### QEMU\n\nMost development of ToaruOS happens in QEMU, as it provides the most flexibility in hardware and the best debugging experience. A recommended QEMU command line in an Ubuntu 20.04 host is:\n\n```\nqemu-system-x86_64 -enable-kvm -m 1G -device AC97 -cdrom image.iso -smp 2\n```\n\nReplace `-enable-kvm` with `-accel hvm` or `-accel haxm` as appropriate on host platforms without KVM, or remove it to try under QEMU's TCG software emulation.\n\nNote that QEMU command line options are not stable and these flags may produce warnings in newer versions.\n\nThe option `-M q35` will replace the PIIX chipset emulation with a newer one, which has the side effect of switching the IDE controller for a SATA one. This can result in faster boot times at the expense of ToaruOS not being able to read its own CD at runtime until I get around to finishing my AHCI driver.\n\n### Other\n\nToaruOS has been successfully tested on real hardware. If the native BIOS or EFI loaders fail to function, try booting with Grub. ToaruOS complies with the \"Multiboot\" and \"Multiboot 2\" specs so it may be loaded with either the `multiboot` or `multiboot2` commands as follows:\n\n```\nmultiboot2 /path/to/misaka-kernel root=/dev/ram0 migrate vid=auto start=live-session\nmodule2 /path/to/ramdisk.igz\nset gfxpayload=keep\n```\n\n![Native photo](https://klange.dev/s/IMG_8387.jpg)\n*ToaruOS running natively from a USB stick on a ThinkPad T410.*\n\n## License\n\nAll first-party parts of ToaruOS are made available under the terms of the University of Illinois / NCSA License, which is a BSD-style permissive license.\nUnless otherwise specified, this is the original and only license for all files in this repository - just because a file does not have a copyright header does not mean it isn't under this license.\nToaruOS is intended as an educational reference, and I encourage the use of my code, but please be sure you follow the requirements of the license.\nYou may redistribute code under the NCSA license, as well as make modifications to the code and sublicense it under other terms (such as the GPL, or a proprietary license), but you must always include the copyright notice specified in the license as well as make the full text of the license (it's only a couple paragraphs) available to end-users.\n\nWhile most of ToaruOS is written entirely by myself, be sure to include other authors where relevant, such as with [Mike's audio subsystem](https://github.com/klange/toaruos/blob/master/kernel/audio/snd.c) or [Dale's string functions](https://github.com/klange/toaruos/blob/master/kernel/misc/string.c).\n\nSome components of ToaruOS, such as [Kuroko](https://github.com/kuroko-lang/kuroko/blob/9f6160092ecece0f2c18b63c066151cbe0ded1bb/LICENSE) or [bim](https://github.com/klange/toaruos/blob/master/apps/bim.c#L3) have different but compatible terms.\n\n## Community\n\n### Mirrors\n\nToaruOS is regularly mirrored to multiple Git hosting sites.\n\n- Gitlab: [toaruos/toaruos](https://gitlab.com/toaruos/toaruos)\n- GitHub: [klange/toaruos](https://github.com/klange/toaruos)\n- Bitbucket: [klange/toaruos](https://bitbucket.org/klange/toaruos)\n- ToaruOS.org: [klange/toaruos](https://git.toaruos.org/klange/toaruos)\n\n### IRC\n\n`#toaruos` on Libera (`irc.libera.chat`)\n\n## FAQs\n\n### Is ToaruOS self-hosting?\n\nIndividual applications and libraries can be built by installing the `build-essential` metapackage from the repository, which will pull in `gcc` and `binutils`.\nSources are available in the `/src` directory on the live CD in a similar layout to this repository, and the `auto-dep.krk` utility script is also available.\n\nFor building ramdisks, finalized kernels, or CD images, some components are currently unavailable.\nIn particular, the [build script for ramdisks](util/createramdisk.py) is still written in Python and depends on its `tarfile` module and `zlib` support.\nPreviously, with a capable compiler toolchain, ToaruOS 1.x was able to build its own kernel, userspace, libraries, and bootloader, and turn these into a working ISO CD image through a Python script that performed a similar function to the Makefile.\n\nToaruOS is not currently capable of building most of its ports, due to a lack of a proper POSIX shell and Make implementation. These are eventual goals of the project.\n\n### Is ToaruOS a Linux distribution?\n\nNo, not at all. There is no code from Linux anywhere in ToaruOS, nor were Linux sources used as a reference material.\n\nToaruOS is a completely independent project, and all code in this repository - which is the entire codebase of the operating system, including its kernel, bootloaders, libraries, and applications - is original, written by myself and a handful of contributors over the course of ten years.\nThe complete source history, going back to when ToaruOS was nothing more than a baremetal \"hello world\" can be tracked through this git repository.\n\n### When you say \"complete\"...\n\nToaruOS is complete in the sense that it covers the whole range of functionality for an OS: It is not \"just a kernel\" or \"just a userspace\".\n\nToaruOS is _not_ complete in the sense of being \"done\".\n\n### Is ToaruOS POSIX-compliant?\n\nWhile I aim to support POSIX interfaces well enough for software to be ported, strict implementation of the standard is not a major goal of the OS, and full compliance may even be undesirable.\n\n### Are contributions accepted?\n\nToaruOS is a personal project, not a community project. Contributions in the form of code should be discussed in advance. Ports and other work outside of the repo, however, are a great way to help out.\n\nYou can also help by contributing to [Kuroko](https://github.com/kuroko-lang/kuroko) - which is part of why it's kept as a separate repository.\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "base",
          "type": "tree",
          "content": null
        },
        {
          "name": "boot",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "kernel",
          "type": "tree",
          "content": null
        },
        {
          "name": "kuroko",
          "type": "commit",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "libc",
          "type": "tree",
          "content": null
        },
        {
          "name": "linker",
          "type": "tree",
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}