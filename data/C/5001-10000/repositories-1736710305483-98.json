{
  "metadata": {
    "timestamp": 1736710305483,
    "page": 98,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "flightlessmango/MangoHud",
      "stars": 6697,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.5966796875,
          "content": "# See http://editorconfig.org to read about the EditorConfig format.\n# - Automatically supported by VS2017+ and most common IDE or text editors.\n# - For older VS2010 to VS2015, install https://marketplace.visualstudio.com/items?itemName=EditorConfigTeam.EditorConfig\n\n# top-most EditorConfig file\nroot = true\n\n# Default settings:\n# Use 4 spaces as indentation\n[*]\nindent_style = space\nindent_size = 4\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[src/overlay*{cpp,h}]\nindent_size = 3\n\n[src/{keybinds,vulkan}.{cpp,h}]\nindent_size = 3\n\n[src/mesa/**]\nindent_size = 3\n\n[meson.build]\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.548828125,
          "content": "build\nbuilddir\n__pycache__\n.vscode\nMangoHud*.tar.*\npkg\nmangohud*.tar.*\nlib32-mangohud*.tar.*\n\n# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# subprojects\nsubprojects/packagecache/\nsubprojects/Vulkan-Headers-*/\nsubprojects/imgui-*/\nsubprojects/spdlog-*/\nsubprojects/nlohmann_json-*/\nsubprojects/implot-*/\nsubprojects/cmocka/\n\n#GNU Global Metadata\n**/GPATH\n**/GRTAGS\n**/GTAGS\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1015625,
          "content": "[submodule \"modules/minhook\"]\n\tpath = modules/minhook\n\turl = https://github.com/flightlessmango/minhook\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "MIT License\n\nCopyright (c) 2020 flightlessmango\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 32.9169921875,
          "content": "# MangoHud\n\nA Vulkan and OpenGL overlay for monitoring FPS, temperatures, CPU/GPU load and more.\n\n![Example gif showing a standard performance readout with frametimes](assets/overlay_example.gif)\n\n---\n\n- [MangoHud](#mangohud)\n  - [Installation - Build From Source](#installation---build-from-source)\n    - [Dependencies](#dependencies)\n    - [Building with build script](#building-with-build-script)\n  - [Installation - Pre-packaged Binaries](#installation---pre-packaged-binaries)\n    - [GitHub releases](#github-releases)\n    - [Arch-based distributions](#arch-based-distributions)\n    - [Debian, Ubuntu](#debian-ubuntu)\n    - [Fedora](#fedora)\n    - [Solus](#solus)\n    - [openSUSE](#opensuse)\n    - [Flatpak](#flatpak)\n  - [Normal usage](#normal-usage)\n  - [OpenGL](#opengl)\n  - [Hud configuration](#hud-configuration)\n    - [Environment Variables: **`MANGOHUD_CONFIG`**, **`MANGOHUD_CONFIGFILE`**, and **`MANGOHUD_PRESETSFILE`**](#environment-variables)\n  - [Vsync](#vsync)\n    - [OpenGL Vsync](#opengl-vsync)\n    - [Vulkan Vsync](#vulkan-vsync)\n  - [Keybindings](#keybindings)\n  - [Workarounds](#workarounds)\n  - [FPS logging](#fps-logging)\n    - [Online visualization: FlightlessMango.com](#online-visualization-flightlessmangocom)\n    - [Local visualization: `mangoplot`](#local-visualization-mangoplot)\n\n## Installation - Build From Source\n\n---\n\nIf you wish to compile MangoHud to keep up to date with any changes - first clone this repository and cd into it:\n\n```\ngit clone --recurse-submodules https://github.com/flightlessmango/MangoHud.git\ncd MangoHud\n```\n\nUsing `meson` to install \"manually\":\n\n```\nmeson build\nninja -C build install\n```\n\nBy default, meson should install MangoHud to `/usr/local`. Specify install prefix with `--prefix=/usr` if desired.\nAdd `-Dappend_libdir_mangohud=false` option to meson to not append `mangohud` to libdir if desired (e.g. /usr/local/lib/mangohud).\n\nTo install 32-bit build on 64-bit distro, specify proper `libdir`: `lib32` for Arch, `lib/i386-linux-gnu` on Debian-based distros. RPM-based distros usually install 32-bit libraries to `/usr/lib` and 64-bit to `/usr/lib64`.\nYou may have to change `PKG_CONFIG_PATH` to point to correct folders for your distro.\n\n```\nCC=\"gcc -m32\" \\\nCXX=\"g++ -m32\" \\\nPKG_CONFIG_PATH=\"/usr/lib32/pkgconfig:/usr/lib/i386-linux-gnu/pkgconfig:/usr/lib/pkgconfig\" \\\nmeson build32 --libdir lib32\nninja -C build32 install\n```\n\n### Dependencies\n\nInstall necessary development packages.\n\n- gcc, g++\n- or gcc-multilib, g++-multilib for 32-bit support\n- meson >=0.54\n- ninja (ninja-build)\n- glslang\n- libGL/libEGL (libglvnd, mesa-common-dev, mesa-libGL-devel etc)\n- X11 (libx11-dev)\n- XNVCtrl (libxnvctrl-dev), optional, use `-Dwith_xnvctrl=disabled` option with `meson` to disable\n- D-Bus (libdbus-1-dev), optional, use `-Dwith_dbus=disabled` option with `meson` to disable\n- wayland-client\n- xcbcommon\n\nPython 3 libraries:\n\n- Mako (python3-mako or install with `pip`)\n\nIf distro's packaged `meson` is too old and gives build errors, install newer version with `pip` (`python3-pip`).\n\n### Meson options\n\n| Option        | Default | Description\n| --------      | ------- | -\n| with_nvml     | enabled    |Required for NVIDIA GPU metrics on wayland\n| with_xnvctrl  | enabled    |Required for NVIDIA GPU metrics on older GPUs\n| with_x11      | enabled    |Required for keybinds on x11\n| with_wayland  | enabled    |Required for keybinds on wayland\n| with_dbus     | enabled    |Required for using the media features\n| mangoapp      | false      |Includes mangoapp\n| mangohudctl   | false      |Include mangohudctl\n| tests         | auto       |Includes tests\n| mangoplot     | true       |Includes mangoplot\n\n\n### Building with build script\n\nYou can also use `build.sh` script to do some things automatically like install dependencies, if distro is supported but it usually assumes you are running on x86_64 architecture.\n\nTo just build it, execute:\n\n```\n./build.sh build\n```\n\nYou can also pass arguments to meson:\n\n```\n./build.sh build -Dwith_xnvctrl=disabled\n```\n\nResulting files will be install to `./build/release` folder.\n\nIf you have compiled MangoHud from source, to install it, execute:\n\n```\n./build.sh install\n```\n\nYou can then subsequently uninstall MangoHud via the following command\n\n```\n./build.sh uninstall\n```\n\nTo tar up the resulting binaries into a package and create a release tar with installer script, execute:\n\n```\n./build.sh package release\n```\n\nor combine the commands, although `package` should also call `build` if it doesn't find the built libs:\n\n```\n./build.sh build package release\n```\n\nIf you have built MangoHud before and suddenly it fails, you can try cleaning the `build` folder, execute:\n\n```\n./build.sh clean\n```\n\nCurrently it just does `rm -fr build` and clears subprojects.\n\n__NOTE: If you are running an Ubuntu-based, Arch-based, Fedora-based, or openSUSE-based distro, the build script will automatically detect and prompt you to install missing build dependencies. If you run into any issues with this please report them!__\n\n## Installation - Pre-packaged Binaries\n\n---\n\n### GitHub releases\n\nIf you do not wish to compile anything, simply download the file under [Releases](https://github.com/flightlessmango/MangoHud/releases), extract it, and from within the extracted folder in terminal, execute:\n\n```\n./mangohud-setup.sh install\n```\n\n### Arch-based distributions\n\nIf you are using an Arch-based distribution, install [`mangohud`](https://archlinux.org/packages/extra/x86_64/mangohud/) and [`lib32-mangohud`](https://archlinux.org/packages/multilib/x86_64/lib32-mangohud/) from the `extra`/`multilib` repository. [`mangohud-git`](https://aur.archlinux.org/packages/mangohud-git/) and [`lib32-mangohud-git`](https://aur.archlinux.org/packages/lib32-mangohud-git/) are available on the AUR to be installed via your favourite AUR helper. These can help fix issues with the hud not activating when using stable releases from pacman!\n\nIf you are building it by yourself, you need to enable multilib repository, by editing pacman config:\n\n```\nsudo nano /etc/pacman.conf\n```\n\nand uncomment:\n\n```txt\n#[multilib]\n#Include = /etc/pacman.d/mirrorlist\n```\n\nthen save the file and execute:\n\n```\nsudo pacman -Syy\n```\n\n### Debian, Ubuntu\n\nIf you are using Debian 11 (Bullseye) or later, Ubuntu 21.10 (Impish) or later, or distro derived from them, to install the [MangoHud](https://tracker.debian.org/pkg/mangohud) package, execute:\n\n```\nsudo apt install mangohud\n```\n\nOptionally, if you also need MangoHud for 32-bit applications, execute:\n\n```\nsudo apt install mangohud:i386\n```\n\n### Fedora\n\nIf you are using Fedora, to install the [MangoHud](https://src.fedoraproject.org/rpms/mangohud) package, execute:\n\n```\nsudo dnf install mangohud\n```\n\n### Solus\n\nIf you are using Solus, to install [MangoHud](https://dev.getsol.us/source/mangohud/) simply execute:\n\n```\nsudo eopkg it mangohud\n```\n\n### openSUSE\n\nIf you run openSUSE Leap or Tumbleweed you can get Mangohud from the official repositories.\nThere are two packages, [mangohud](https://software.opensuse.org/package/mangohud) for 64bit and [mangohud-32bit](https://software.opensuse.org/package/mangohud-32bit) for 32bit application support.\nTo have Mangohud working for both 32bit and 64bit applications you need to install both packages even on a 64bit operating system.\n\n```\nsudo zypper in mangohud mangohud-32bit\n```\n\nLeap doesn't seem to have the 32bit package.\n\nLeap 15.2\n\n```\nsudo zypper addrepo -f https://download.opensuse.org/repositories/games:tools/openSUSE_Leap_15.2/games:tools.repo\nsudo zypper install mangohud\n```\n\nLeap 15.3\n\n```\nsudo zypper addrepo -f https://download.opensuse.org/repositories/games:tools/openSUSE_Leap_15.3/games:tools.repo\nsudo zypper install mangohud\n```\n\n### Flatpak\n\nIf you are using Flatpaks, you will have to add the [Flathub repository](https://flatpak.org/setup/) for your specific distribution, and then, to install it, execute:\n\nFor flatpak:\n\n```\nflatpak install org.freedesktop.Platform.VulkanLayer.MangoHud\n```\n\nTo enable MangoHud for all Steam games:\n\n```\nflatpak override --user --env=MANGOHUD=1 com.valvesoftware.Steam\n```\n\n## Normal usage\n\n---\n\nTo enable the MangoHud overlay layer for Vulkan and OpenGL, run :\n\n`mangohud /path/to/app`\n\nFor Lutris games, go to the System options in Lutris (make sure that advanced options are enabled) and add this to the `Command prefix` setting:\n\n`mangohud`\n\nFor Steam games, you can add this as a launch option:\n\n`mangohud %command%`\n\nOr alternatively, add `MANGOHUD=1` to your shell profile (Vulkan only).\n\n## OpenGL\n\nOpenGL games may also need `dlsym` hooking, which is now enabled by default. Set the `MANGOHUD_DLSYM` env to `0` to disable like `MANGOHUD_DLSYM=0 %command%` for Steam.\n\nSome Linux native OpenGL games overrides LD_PRELOAD and stops MangoHud from working. You can sometimes fix this by editing LD_PRELOAD in the start script\n`LD_PRELOAD=/path/to/mangohud/lib/`\n\n## gamescope\n\nTo enable mangohud with gamescope you need to install mangoapp.\n`gamescope --mangoapp %command%`\n\nUsing normal mangohud with gamescope is not supported.\n\n## Hud configuration\n\nMangoHud comes with a config file which can be used to set configuration options globally or per application. Usually it is installed as `/usr/share/doc/mangohud/MangoHud.conf.example` or [get a copy from here](https://raw.githubusercontent.com/flightlessmango/MangoHud/master/data/MangoHud.conf).\n\nThe priorities of different config files are:\n\n1. `/path/to/application/dir/MangoHud.conf`\n2. Per-application configuration in ~/.config/MangoHud:\n    1. `~/.config/MangoHud/<application_name>.conf` for native applications, where `<application_name>` is the case sensitive name of the executable\n    2. `~/.config/MangoHud/wine-<application_name>.conf` for wine/proton apps, where `<application_name>` is the case sensitive name of the executable without the `.exe` ending\n3. `~/.config/MangoHud/MangoHud.conf`\n\nExample: For Overwatch, this would be `wine-Overwatch.conf` (even though the executable you run from Lutris is `Battle.net.exe`, the actual game executable name is `Overwatch.exe`).\n\nIf you start the game from the terminal with MangoHud enabled (for example by starting Lutris from the terminal), MangoHud will print the config file names it is looking for.\n\nYou can find an example config in /usr/share/doc/mangohud\n\n[GOverlay](https://github.com/benjamimgois/goverlay) is a GUI application that can be used to manage the config\n\n---\n\n### Environment Variables\n\nYou can also customize the hud by using the `MANGOHUD_CONFIG` environment variable while separating different options with a comma. This takes priority over any config file.\n\nYou can also specify configuration file with `MANGOHUD_CONFIGFILE=/path/to/config` for applications whose names are hard to guess (java, python etc).\n\nYou can also specify presets file with `MANGOHUD_PRESETSFILE=/path/to/config`. This is especially useful when running mangohud in a sandbox such as flatpak.\n\nYou can also specify custom hud libraries for OpenGL using `MANGOHUD_OPENGL_LIBS=/path/to/libMangoHud_opengl.so`. This is useful for testing MangoHud without modifying the installation on your system.\n\nA partial list of parameters are below. See the config file for a complete list.\nParameters that are enabled by default have to be explicitly disabled. These (currently) are `fps`, `frame_timing`, `cpu_stats` (cpu load), `gpu_stats` (gpu load), and each can be disabled by setting the corresponding variable to 0 (e.g., fps=0).\n\n| Variable                           | Description                                                                           |\n|------------------------------------|---------------------------------------------------------------------------------------|\n| `af`                               | Anisotropic filtering level. Improves sharpness of textures viewed at an angle `0`-`16` |\n| `alpha`                            | Set the opacity of all text and frametime graph `0.0`-`1.0`                           |\n| `arch`                             | Show if the application is 32- or 64-bit                                              |\n| `autostart_log=`                   | Starts the log after X seconds from mangohud init                                     |\n| `background_alpha`                 | Set the opacity of the background `0.0`-`1.0`                                         |\n| `battery_color`                    | Change the battery text color                                                         |\n| `battery_icon`                     | Display battery icon instead of percent                                               |\n| `battery_watt`                     | Display wattage for the battery option                                                |\n| `battery_time`                     | Display remaining time for battery option                                             |\n| `battery`                          | Display current battery percent and energy consumption                                |\n| `benchmark_percentiles`            | Configure which framerate percentiles are shown in the logging summary. Default is `97,AVG,1,0.1` |\n| `bicubic`                          | Force bicubic filtering                                                               |\n| `blacklist`                        | Add a program to the blacklist. e.g `blacklist=vkcube,WatchDogs2.exe`                 |\n| `cellpadding_y`                    | Set the vertical cellpadding, default is `-0.085` |\n| `control=`                         | Sets up a unix socket with a specific name that can be connected to with mangohud-control.<br>I.e. `control=mangohud` or `control=mangohud-%p` (`%p` will be replaced by process id)    |\n| `core_load_change`                 | Change the colors of cpu core loads, uses the same data from `cpu_load_value` and `cpu_load_change` |\n| `core_load`                        | Display load & frequency per core                                                     |\n| `core_bars`                        | Change the display of `core_load` from numbers to vertical bars                       |\n| `cpu_load_change`                  | Change the color of the CPU load depending on load                                    |\n| `cpu_load_color`                   | Set the colors for the gpu load change low, medium and high. e.g `cpu_load_color=0000FF,00FFFF,FF00FF` |\n| `cpu_load_value`                   | Set the values for medium and high load e.g `cpu_load_value=50,90`                    |\n| `cpu_mhz`                          | Show the CPUs current MHz                                                             |\n| `cpu_power`<br>`gpu_power`         | Display CPU/GPU draw in watts                                                         |\n| `cpu_temp`<br>`gpu_temp`<br>`gpu_junction_temp`<br>`gpu_mem_temp`           | Display current CPU/GPU temperature                                                  |\n| `cpu_text`<br>`gpu_text`           | Override CPU and GPU text. `gpu_text` is a list in case of multiple GPUs              |\n| `custom_text_center`               | Display a custom text centered useful for a header e.g `custom_text_center=FlightLessMango Benchmarks` |\n| `custom_text`                      | Display a custom text e.g `custom_text=Fsync enabled`                                 |\n| `debug`                            | Shows the graph of gamescope app frametimes and latency (only on gamescope obviously) |\n| `device_battery_icon`              | Display wirless device battery icon.                                                  |\n| `device_battery`                   | Display wireless device battery percent. Currently supported arguments `gamepad` and `mouse` e.g `device_battery=gamepad,mouse` |\n| `display_server`                   | Display the current display session (e.g. X11 or wayland)                             |\n| `dynamic_frame_timing`             | This changes frame_timing y-axis to correspond with the current maximum and minimum frametime instead of being a static 0-50 |\n| `engine_short_names`               | Display a short version of the used engine (e.g. `OGL` instead of `OpenGL`)           |\n| `engine_version`                   | Display OpenGL or vulkan and vulkan-based render engine's version                     |\n| `exec`                             | Display output of bash command in next column, e.g. `custom_text=/home` , `exec=df -h /home \\| tail -n 1`. Only works with `legacy_layout=0` |\n| `exec_name`                        | Display current exec name                                                             |\n| `fan`                              | Shows the Steam Deck fan rpm                                                          |\n| `fcat`                             | Enables frame capture analysis                                                        |\n| `fcat_overlay_width=`              | Sets the width of fcat. Default is `24`                                               |\n| `fcat_screen_edge=`                | Decides the edge fcat is displayed on. A value between `1` and `4`                    |\n| `font_file_text`                   | Change text font. Otherwise `font_file` is used                                       |\n| `font_file`                        | Change default font (set location to .TTF/.OTF file)                                  |\n| `font_glyph_ranges`                | Specify extra font glyph ranges, comma separated: `korean`, `chinese`, `chinese_simplified`, `japanese`, `cyrillic`, `thai`, `vietnamese`, `latin_ext_a`, `latin_ext_b`. If you experience crashes or text is just squares, reduce font size or glyph ranges |\n| `font_scale=`                      | Set global font scale. Default is `1.0`                                               |\n| `font_scale_media_player`          | Change size of media player text relative to `font_size`                              |\n| `font_size=`                       | Customizable font size. Default is `24`                                              |\n| `font_size_text=`                  | Customizable font size for other text like media metadata. Default is `24`           |\n| `fps_color_change`                 | Change the FPS text color depepending on the FPS value                                |\n| `fps_color=`                       | Choose the colors that the fps changes to when `fps_color_change` is enabled. Corresponds with fps_value. Default is `b22222,fdfd09,39f900`   |\n| `fps_limit_method`                 | If FPS limiter should wait before or after presenting a frame. Choose `late` (default) for the lowest latency or `early` for the smoothest frametimes |\n| `fps_limit`                        | Limit the apps framerate. Comma-separated list of one or more FPS values. `0` means unlimited |\n| `fps_only`                         | Show FPS only. ***Not meant to be used with other display params***                   |\n| `fps_sampling_period=`             | Time interval between two sampling points for gathering the FPS in milliseconds. Default is `500`   |\n| `fps_value`                        | Choose the break points where `fps_color_change` changes colors between. E.g `60,144`, default is `30,60` |\n| `fps_metrics`                      | Takes a list of decimal values or the value avg, e.g `avg,0.001`                      |\n| `reset_fps_metrics`                | Reset fps metrics keybind, default is `Shift_R+F9`                                    |\n| `fps_text`                         | Display custom text for engine name in front of FPS                                   |\n| `frame_count`                      | Display frame count                                                                   |\n| `frametime`                        | Display frametime next to FPS text                                                    |\n| `frame_timing_detailed`            | Display frame timing in a more detailed chart                                         |\n| `fsr`                              | Display the status of FSR (only works in gamescope)                                   |\n| `hdr`                              | Display the status of HDR (only works in gamescope)                                   |\n| `refresh_rate`                     | Display the current refresh rate (only works in gamescope)                            |\n| `full`                             | Enable most of the toggleable parameters (currently excludes `histogram`)             |\n| `gamemode`                         | Show if GameMode is on                                                                |\n| `gpu_color`<br>`cpu_color`<br>`vram_color`<br>`ram_color`<br>`io_color`<br>`engine_color`<br>`frametime_color`<br>`background_color`<br>`text_color`<br>`media_player_color`<br>`network_color`         | Change default colors: `gpu_color=RRGGBB` |\n| `gpu_core_clock`<br>`gpu_mem_clock`| Display GPU core/memory frequency                                                     |\n| `gpu_fan`                          | GPU fan in rpm on AMD, FAN in percent on NVIDIA |\n| `gpu_load_change`                  | Change the color of the GPU load depending on load                                    |\n| `gpu_load_color`                   | Set the colors for the gpu load change low,medium and high. e.g `gpu_load_color=0000FF,00FFFF,FF00FF` |\n| `gpu_load_value`                   | Set the values for medium and high load e.g `gpu_load_value=50,90`                    |\n| `gpu_name`                         | Display GPU name from pci.ids                                                         |\n| `gpu_voltage`                      | Display GPU voltage (only works on AMD GPUs)                                          |\n| `gpu_list`                         | List GPUs to display `gpu_list=0,1`                                                   |\n| `hide_fsr_sharpness`               | Hides the sharpness info for the `fsr` option (only available in gamescope)           |\n| `histogram`                        | Change FPS graph to histogram                                                         |\n| `horizontal`                       | Display Mangohud in a horizontal position                                             |\n| `horizontal_stretch`               | Stretches the background to the screens width in `horizontal` mode                    |\n| `hud_compact`                      | Display compact version of MangoHud                                                   |\n| `hud_no_margin`                    | Remove margins around MangoHud                                                        |\n| `io_read`<br> `io_write`           | Show non-cached IO read/write, in MiB/s                                               |\n| `log_duration`                     | Set amount of time the logging will run for (in seconds)                              |\n| `log_interval`                     | Change the default log interval in milliseconds. Default is `0`                       |\n| `log_versioning`                   | Adds more headers and information such as versioning to the log. This format is not supported on flightlessmango.com (yet)    |\n| `media_player_format`              | Format media player metadata. Add extra text etc. Semi-colon breaks to new line. Defaults to `{title};{artist};{album}` |\n| `media_player_name`                | Force media player DBus service name without the `org.mpris.MediaPlayer2` part, like `spotify`, `vlc`, `audacious` or `cantata`. If none is set, MangoHud tries to switch between currently playing players |\n| `media_player`                     | Show media player metadata                                                            |\n| `no_display`                       | Hide the HUD by default                                                               |\n| `no_small_font`                    | Use primary font size for smaller text like units                                     |\n| `offset_x` `offset_y`              | HUD position offsets                                                                  |\n| `output_file`                      | Set location and name of the log file                                                 |\n| `output_folder`                    | Set location of the output files (Required for logging)                               |\n| `pci_dev`                          | Select GPU device in multi-gpu setups                                                 |\n| `permit_upload`                    | Allow uploading of logs to Flightlessmango.com                                        |\n| `picmip`                           | Mip-map LoD bias. Negative values will increase texture sharpness (and aliasing). Positive values will increase texture blurriness `-16`-`16` |\n| `position=`                        | Location of the HUD: `top-left` (default), `top-right`, `middle-left`, `middle-right`, `bottom-left`, `bottom-right`, `top-center`, `bottom-center` |\n| `preset=`                          | Comma separated list of one or more presets. Default is `-1,0,1,2,3,4`. Available presets:<br>`0` (No Hud)<br> `1` (FPS Only)<br> `2` (Horizontal)<br> `3` (Extended)<br> `4` (Detailed)<br>User defined presets can be created by using a [presets.conf](data/presets.conf) file in `~/.config/MangoHud/`.                      |\n| `procmem`<br>`procmem_shared`, `procmem_virt`| Displays process' memory usage: resident, shared and/or virtual. `procmem` (resident) also toggles others off if disabled |\n| `ram`<br>`vram`                    | Display system RAM/VRAM usage                                                         |\n| `read_cfg`                         | Add to MANGOHUD_CONFIG as first parameter to also load config file. Otherwise only `MANGOHUD_CONFIG` parameters are used |\n| `reload_cfg=`                      | Change keybind for reloading the config. Default = `Shift_L+F4`                       |\n| `resolution`                       | Display the current resolution                                                        |\n| `retro`                            | Disable linear texture filtering. Makes textures look blocky                          |\n| `round_corners`                    | Change the amount of roundness of the corners have e.g `round_corners=10.0`           |\n| `show_fps_limit`                   | Display the current FPS limit                                                         |\n| `swap`                             | Display swap space usage next to system RAM usage                                     |\n| `table_columns`                    | Set the number of table columns for ImGui, defaults to 3                              |\n| `temp_fahrenheit`                  | Show temperature in Fahrenheit                                                        |\n| `text_outline`                     | Draw an outline around text for better readability. Enabled by default.               |\n| `text_outline_color=`              | Set the color of `text_outline`. Default = `000000`                                   |\n| `text_outline_thickness=`          | Set the thickness of `text_outline`. Default = `1.5`                                  |\n| `throttling_status`                | Show if GPU is throttling based on Power, current, temp or \"other\" (Only shows if throttling is currently happening). Currently disabled by default for Nvidia as it causes lag on 3000 series |\n| `throttling_status_graph`          | Same as `throttling_status` but displays throttling in the frametime graph and only power and temp throttling |\n| `time`<br>`time_format=%T`         | Display local time. See [std::put_time](https://en.cppreference.com/w/cpp/io/manip/put_time) for formatting help. NOTE: Sometimes apps may set `TZ` (timezone) environment variable to UTC/GMT |\n| `time_no_label`                    | Remove the label before time                                                          |\n| `toggle_fps_limit`                 | Cycle between FPS limits (needs at least two values set with `fps_limit`). Defaults to `Shift_L+F1`                                    |\n| `toggle_preset`                    | Cycle between Presets. Defaults to `Shift_R+F10`                                      |\n| `toggle_hud=`<br>`toggle_logging=` | Modifiable toggle hotkeys. Default are `Shift_R+F12` and `Shift_L+F2`, respectively   |\n| `toggle_hud_position`              | Toggle MangoHud position. Default is `R_Shift+F11`                                     |\n| `trilinear`                        | Force trilinear filtering                                                             |\n| `upload_log`                       | Change keybind for uploading log                                                      |\n| `upload_logs`                      | Enables automatic uploads of logs to flightlessmango.com                              |\n| `version`                          | Show current MangoHud version                                                         |\n| `vkbasalt`                         | Show if vkBasalt is on                                                                |\n| `vsync`<br> `gl_vsync`             | Set Vsync for OpenGL or Vulkan                                                        |\n| `vulkan_driver`                    | Display used Vulkan driver (radv/amdgpu-pro/amdvlk)                                   |\n| `width=`<br>`height=`              | Customizable HUD dimensions (in pixels)                                              |\n| `wine_color`                       | Change color of the wine/proton text                                                  |\n| `wine`                             | Show current Wine or Proton version in use                                            |\n| `winesync`                         | Show wine sync method in use                                                          |\n| `present_mode`                     | Shows current vulkan [present mode](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPresentModeKHR.html) or vsync status in opengl  |\n| `network`                          | Show network interfaces tx and rx kb/s. You can specify interface with `network=eth0` |\n\nExample: `MANGOHUD_CONFIG=cpu_temp,gpu_temp,position=top-right,height=500,font_size=32`\nBecause comma is also used as option delimiter and needs to be escaped for values with a backslash, you can use `+` like `MANGOHUD_CONFIG=fps_limit=60+30+0` instead.\n\n*Note: Width and Height are set automatically based on the font_size, but can be overridden.*\n\n*Note: RAPL is currently used for Intel CPUs to show power draw with `cpu_power` which may be unreadable for non-root users due to [vulnerability](https://platypusattack.com/). The corresponding `energy_uj` file has to be readable by corresponding user, e.g. by running `chmod o+r /sys/class/powercap/intel-rapl\\:0/energy_uj` as root, else the power shown will be **0 W**, though having the file readable may potentially be a security vulnerability persisting until system reboots.*\n\n*Note: The [zenpower3](https://git.exozy.me/a/zenpower3) or [zenergy](https://github.com/boukehaarsma23/zenergy) kernel driver must be installed to show the power draw of Ryzen CPUs.*\n\n## Vsync\n\n### OpenGL Vsync\n\n- `-1` = Adaptive sync\n- `0`  = Off\n- `1`  = On\n- `n`  = Sync to refresh rate / n.\n\n### Vulkan Vsync\n\n- `0` = Adaptive VSync (FIFO_RELAXED_KHR)\n- `1` = Off (IMMEDIATE_KHR)\n- `2` = Mailbox (VSync with uncapped FPS) (MAILBOX_KHR)\n- `3` = On (FIFO_KHR)\n\nNot all vulkan vsync options may be supported on your device, you can check what your device supports here [vulkan.gpuinfo.org](https://vulkan.gpuinfo.org/listsurfacepresentmodes.php?platform=linux)\n\n## Keybindings\n\n- `Shift_L+F2` : Toggle Logging\n- `Shift_L+F4` : Reload Config\n- `Shift_R+F12` : Toggle Hud\n- `Shift_R+9` : Reset FPS metrics\n\n## Workarounds\n\nOptions starting with \"gl_*\" are for OpenGL.\n\n- `gl_size_query = viewport` : Specify what to use for getting display size. Options are \"viewport\", \"scissorbox\" or disabled. Defaults to using glXQueryDrawable.\n- `gl_bind_framebuffer = 0..N` : (Re)bind given framebuffer before MangoHud gets drawn. Helps with Crusader Kings III.\n- `gl_dont_flip = 1` : Don't swap origin if using GL_UPPER_LEFT. Helps with Ryujinx.\n\n## FPS logging\n\nYou must set a valid path for `output_folder` in your configuration to store logs in.\n\nWhen you toggle logging (default keybind is `Shift_L+F2`), a file is created with the game name plus a date & timestamp in your `output_folder`.\n\nLog files can be visualized with two different tools: online and locally.\n\n### Online visualization: FlightlessMango.com\nLog files can be (batch) uploaded to [FlightlessMango.com](https://flightlessmango.com/games/user_benchmarks), which will then take care of creating a frametime graph and a summary with 1% min / average framerate / 97th percentile in a table form and a horizontal bar chart form.\n\nNotes:\n- Uploaded benchmarks are public: you can share them with anyone by simply giving them the link.\n- Benchmark filenames are used as legend in the produced tables and graphs, they can be renamed after the upload.\n\n![Gif illustrating the log uploading process](assets/log_upload_example.gif)\n\n### Local visualization: `mangoplot`\n`mangoplot` is a plotting script that is shipped with `MangoHud`: on a given folder, it takes each log file, makes a 1D heatmap of its framerates, then stacks the heats maps vertically to form a 2D graph for easy visual comparison between benchmarks.\n\nExample output:\n\n![Overwatch 2 windows 11 vs linux](assets/Overwatch2-w11-vs-linux.svg)\n\n<sub><sup>Overwatch 2, 5950X + 5700XT, low graphics preset, FHD, 50% render scale</sup></sub>\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-source.sh",
          "type": "blob",
          "size": 1.046875,
          "content": "#!/bin/sh\n\nVERSION=$(git describe --tags --dirty)\nNAME=MangoHud-${VERSION}\nTAR_NAME=${NAME}-Source.tar.xz\nDFSG_TAR_NAME=${NAME}-Source-DFSG.tar.xz\n\n# remove existing files\nrm -rf sourcedir\nrm -rf ${NAME}\nrm -f ${TAR_NAME}\nrm -f ${DFSG_TAR_NAME}\n\n# create tarball with meson\nmeson setup sourcedir\nmeson dist --formats=xztar --include-subprojects --no-tests -C sourcedir\nmv sourcedir/meson-dist/*.tar.xz ${TAR_NAME}\n\n# create DFSG compliant version\n# unpack since tarball is compressed\nmkdir ${NAME}\ntar -xf ${TAR_NAME} --strip 1 -C ${NAME}\n# nvml.h is not DFSG compliant\nrm ${NAME}/include/nvml.h\n# minhook not needed\nrm -r ${NAME}/modules/minhook\n# spdlog from system\nrm -r ${NAME}/subprojects/spdlog-*\n# nlohmann_json from system\nrm -r ${NAME}/subprojects/nlohmann_json-*\n# remove some vulkan clutter\nrm -r ${NAME}/subprojects/Vulkan-Headers-*/cmake ${NAME}/subprojects/Vulkan-Headers-*/BUILD.gn\n# remove some dear imgui clutter\nrm -rf ${NAME}/subprojects/imgui-*/examples\n# compress new sources\ntar -cJf ${DFSG_TAR_NAME} ${NAME}\n\n# cleanup\nrm -r sourcedir\nrm -r ${NAME}\n"
        },
        {
          "name": "build-srt.sh",
          "type": "blob",
          "size": 5.2978515625,
          "content": "#!/usr/bin/env bash\n# Specialized build script for Steam Runtime SDK docker\nset -e\n\nIFS=\" \" read -ra debian_chroot < /etc/debian_chroot\nLOCAL_CC=${CC:-gcc-5}\nLOCAL_CXX=${CXX:-g++-5}\nRUNTIME=${RUNTIME:-${debian_chroot[1]}}\nSRT_VERSION=${SRT_VERSION:-${debian_chroot[2]}}\nVERSION=$(git describe --long --tags --always | sed 's/\\([^-]*-g\\)/r\\1/;s/-/./g;s/^v//')\n\ndependencies() {\n\n    if [[ ! -f build-srt/release/usr/lib/libMangoHud.so ]]; then\n        install() {\n            set +e\n            for i in ${DEPS[@]}; do\n                dpkg-query -s \"$i\" &> /dev/null\n                if [[ $? == 1 ]]; then\n                    INSTALL=\"$INSTALL\"\"$i \"\n                fi\n            done\n            if [[ ! -z \"$INSTALL\" ]]; then\n                apt-get update\n                apt-get -y install $INSTALL\n            fi\n            set -e\n        }\n\n        echo \"# Checking Dependencies\"\n        DEPS=(${LOCAL_CC}-multilib ${LOCAL_CXX}-multilib unzip)\n        install\n\n\n        # use py3.5 with scout, otherwise hope python is new enough\n        set +e\n        which python3.5 >/dev/null\n        if [ $? -eq 0 ]; then\n            # py3.2 is weird\n            ln -sf python3.5 /usr/bin/python3\n        fi\n        set -e\n\n        if [[ ! -f ./bin/get-pip.py ]]; then\n            curl https://bootstrap.pypa.io/pip/3.5/get-pip.py -o bin/get-pip.py\n            python3 ./bin/get-pip.py\n        fi\n        pip3 install 'meson>=0.54' mako\n\n        if [[ ! -f /usr/include/NVCtrl/NVCtrl.h ]]; then\n            curl -LO http://mirrors.kernel.org/ubuntu/pool/main/n/nvidia-settings/libxnvctrl0_440.64-0ubuntu1_amd64.deb\n            curl -LO http://mirrors.kernel.org/ubuntu/pool/main/n/nvidia-settings/libxnvctrl-dev_440.64-0ubuntu1_amd64.deb\n            dpkg -i libxnvctrl0_440.64-0ubuntu1_amd64.deb libxnvctrl-dev_440.64-0ubuntu1_amd64.deb\n        fi\n\n        # preinstalled 7.10.xxxx\n        #if [[ ! -f /usr/local/bin/glslangValidator ]]; then\n        #    curl -LO https://github.com/KhronosGroup/glslang/releases/download/master-tot/glslang-master-linux-Release.zip\n        #    unzip glslang-master-linux-Release.zip bin/glslangValidator\n        #    /usr/bin/install -m755 bin/glslangValidator /usr/local/bin/\n        #    rm bin/glslangValidator glslang-master-linux-Release.zip\n        #fi\n    fi\n}\n\nconfigure() {\n    dependencies\n    git submodule update --init\n    if [[ ! -f \"build-srt/meson64/build.ninja\" ]]; then\n        export CC=\"${LOCAL_CC}\"\n        export CXX=\"${LOCAL_CXX}\"\n        meson build-srt/meson64 --libdir lib/mangohud/lib --prefix /usr -Dappend_libdir_mangohud=false $@ ${CONFIGURE_OPTS}\n    fi\n    if [[ ! -f \"build-srt/meson32/build.ninja\" ]]; then\n        export CC=\"${LOCAL_CC} -m32\"\n        export CXX=\"${LOCAL_CXX} -m32\"\n        export PKG_CONFIG_PATH=\"/usr/lib32/pkgconfig:/usr/lib/i386-linux-gnu/pkgconfig:/usr/lib/pkgconfig:${PKG_CONFIG_PATH_32}\"\n        meson build-srt/meson32 --libdir lib/mangohud/lib32 --prefix /usr -Dappend_libdir_mangohud=false $@ ${CONFIGURE_OPTS}\n    fi\n}\n\nbuild() {\n    if [[ ! -f \"build-srt/meson64/build.ninja\" || ! -f \"build-srt/meson32/build.ninja\" ]]; then\n        configure $@\n    fi\n    DESTDIR=\"$PWD/build-srt/release\" ninja -C build-srt/meson32 install\n    DESTDIR=\"$PWD/build-srt/release\" ninja -C build-srt/meson64 install\n}\n\npackage() {\n    LIB=\"build-srt/release/usr/lib/mangohud/lib/libMangoHud.so\"\n    LIB32=\"build-srt/release/usr/lib/mangohud/lib32/libMangoHud.so\"\n    if [[ ! -f \"$LIB\" || \"$LIB\" -ot \"build-srt/meson64/src/libMangoHud.so\" ]]; then\n        build\n    fi\n    tar --numeric-owner --owner=0 --group=0 \\\n        -C build-srt/release -cvf \"build-srt/MangoHud-package.tar\" .\n}\n\nrelease() {\n    rm build-srt/MangoHud-package.tar\n    mkdir -p build-srt/MangoHud\n    package\n    cp --preserve=mode bin/mangohud-setup.sh build-srt/MangoHud/mangohud-setup.sh\n    cp build-srt/MangoHud-package.tar build-srt/MangoHud/MangoHud-package.tar\n    tar --numeric-owner --owner=0 --group=0 \\\n        -C build-srt -czvf build-srt/MangoHud-${VERSION}_${RUNTIME}-${SRT_VERSION}.tar.gz MangoHud\n}\n\nclean() {\n    rm -rf \"build-srt/\"\n}\n\nusage() {\n    if test -z $1; then\n        echo \"Unrecognized command argument: $a\"\n    else\n        echo \"$0 requires one argument\"\n    fi\n    echo -e \"\\nUsage: $0 <command>\\n\"\n    echo \"Available commands:\"\n    echo -e \"\\tpull\\t\\tPull latest commits (code) from Git\"\n    echo -e \"\\tconfigure\\tEnsures that dependencies are installed, updates git submodules, and generates files needed for building MangoHud. This is automatically run by the build command\"\n    echo -e \"\\tbuild\\t\\tIf needed runs configure and then builds (compiles) MangoHud\"\n    echo -e \"\\tpackage\\t\\tRuns build if needed and then builds a tar package from MangoHud\"\n    echo -e \"\\tclean\\t\\tRemoves build directory\"\n    echo -e \"\\trelease\\t\\tBuilds a MangoHud release tar package\"\n}\n\nif [[ -z $@ ]]; then\n    usage no-args\nfi\n\nwhile [ $# -gt 0 ]; do\n    OPTS=()\n    arg=\"$1\"\n    shift\n\n    while [ $# -gt 0 ] ; do\n        case $1 in\n        -*)\n            OPTS+=(\"$1\")\n            shift\n        ;;\n        *)\n            break\n        ;;\n        esac;\n    done\n\n    echo -e \"\\e[1mCommand:\\e[92m\" $arg \"\\e[94m\"${OPTS[@]}\"\\e[39m\\e[0m\"\n    case $arg in\n        \"configure\") configure ${OPTS[@]};;\n        \"build\") build ${OPTS[@]};;\n        \"package\") package;;\n        \"clean\") clean;;\n        \"release\") release;;\n        *)\n            usage\n    esac\ndone\n"
        },
        {
          "name": "build-with-srt-docker.sh",
          "type": "blob",
          "size": 1.46484375,
          "content": "#!/usr/bin/env bash\n# Usage example: $0 master soldier 0.20210618.0\nset -u\n\nif [ $# -eq 2 ]; then\n  echo Specify runtime version too\n  exit 1\nfi\n\nSRCDIR=$PWD\nBRANCH=\"${1:-master}\"\n# soldier 0.20210618.0 or newer\n# scout 0.20210630.0 or newer\nRUNTIME=\"${2:-soldier}\"\nVERSION=\"${3:-0.20210618.0}\"\nIMAGE=\"steamrt_${RUNTIME}_${VERSION}_amd64:mango-${RUNTIME}\"\nBASEURL=\"https://repo.steampowered.com/steamrt-images-${RUNTIME}/snapshots/${VERSION}\"\nCACHEDIR=\"./cache/steamrt-images-${RUNTIME}/snapshots/${VERSION}\"\n\nmkdir -p \"${CACHEDIR}\"\n\necho -e \"\\e[1mBuilding branch \\e[92m${BRANCH}\\e[39m using \\e[92m${RUNTIME}:${VERSION}\\e[39m runtime\\e[0m\"\n\nif ! docker inspect --type=image ${IMAGE} 2>&1 >/dev/null ; then\n  rm -fr ./cache/empty\n  set -e\n  mkdir -p ./cache/empty\n  sed \"s/%RUNTIME%/${RUNTIME}/g\" steamrt.Dockerfile.in  > ./cache/steamrt.Dockerfile\n\n  wget -P \"${CACHEDIR}\" -c ${BASEURL}/com.valvesoftware.SteamRuntime.Sdk-amd64,i386-${RUNTIME}-sysroot.tar.gz\n  cp --reflink=always \"${CACHEDIR}/com.valvesoftware.SteamRuntime.Sdk-amd64,i386-${RUNTIME}-sysroot.tar.gz\" ./cache/empty/\n  docker build -f ./cache/steamrt.Dockerfile -t ${IMAGE} ./cache/empty\nfi\n\ndocker run --entrypoint=/bin/sh --rm -i -v \"${SRCDIR}/srt-output:/output\" ${IMAGE} << EOF\nexport RUNTIME=${RUNTIME}\nexport SRT_VERSION=${VERSION}\ngit clone git://github.com/flightlessmango/MangoHud.git . --branch ${BRANCH} --recurse-submodules --progress\n./build-srt.sh clean build package release\ncp -v build-srt/MangoHud*tar.gz /output/\nEOF\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 12.7587890625,
          "content": "#!/usr/bin/env bash\nset -e\n\n# Import the variables for dependencies\nsource ./build_deps.sh\n\nOS_RELEASE_FILES=(\"/etc/os-release\" \"/usr/lib/os-release\")\nXDG_DATA_HOME=\"${XDG_DATA_HOME:-$HOME/.local/share}\"\nXDG_CONFIG_HOME=\"${XDG_CONFIG_HOME:-$HOME/.config}\"\nCONFIG_DIR=\"$XDG_CONFIG_HOME/MangoHud\"\nVERSION=$(git describe --long --tags --always | sed 's/\\([^-]*-g\\)/r\\1/;s/-/./g;s/^v//')\nSU_CMD=$(command -v sudo || command -v doas || echo)\nMACHINE=$(uname -m || echo)\n\n# doas requires a double dash if the command it runs will include any dashes,\n# so append a double dash to the command\n[[ $SU_CMD == *doas ]] && SU_CMD=\"$SU_CMD -- \"\n\n# Correctly identify the os-release file.\nfor os_release in ${OS_RELEASE_FILES[@]} ; do\n    if [[ ! -e \"${os_release}\" ]]; then\n        continue\n    fi\n    DISTRO=$(sed -rn 's/^ID(_LIKE)*=(.+)/\\L\\2/p' ${os_release} | sed 's/\"//g')\ndone\n\ndependencies() {\n    if [[ ! -f build/release/usr/lib/libMangoHud.so ]]; then\n        missing_deps() {\n            echo \"# Missing dependencies:$INSTALL\"\n            read -rp \"Do you wish the script to install these packages? [y/N]\" PERMISSION\n            case \"$PERMISSION\" in\n                \"y\"|\"Y\") echo \"Attempting to install missing packages\"; sleep 0.5;;\n                *) echo \"Continuing with missing dependencies\"; sleep 1;;\n            esac\n        }\n        dep_install() {\n            set +e\n            for i in $(eval echo $DEPS); do\n                $MANAGER_QUERY \"$i\" &> /dev/null\n                if [[ $? == 1 ]]; then\n                    INSTALL=\"$INSTALL\"\"$i \"\n                fi\n            done\n            if [[ ! -z \"$INSTALL\" ]]; then\n                missing_deps\n                if [[ \"$PERMISSION\" == \"Y\" || \"$PERMISSION\" == \"y\" ]]; then\n                    $SU_CMD $MANAGER_INSTALL $INSTALL\n                fi\n            fi\n            set -e\n        }\n\n        for i in $DISTRO; do\n        echo \"# Checking dependencies for \\\"$i\\\"\"\n        case $i in\n            *arch*|*manjaro*|*artix*|*SteamOS*)\n                MANAGER_QUERY=\"pacman -Q\"\n                MANAGER_INSTALL=\"pacman -S\"\n                DEPS=\"{${DEPS_ARCH}}\"\n                dep_install\n                break\n            ;;\n            *fedora*|*nobara*)\n                MANAGER_QUERY=\"dnf list installed\"\n                MANAGER_INSTALL=\"dnf install\"\n                DEPS=\"{${DEPS_FEDORA}}\"\n                dep_install\n\n                unset INSTALL\n                DEPS=\"{glibc-devel.i686,libstdc++-devel.i686,libX11-devel.i686,wayland-devel.i686,libxkbcommon-devel.i686}\"\n                dep_install\n                break\n            ;;\n\n            *debian*|*ubuntu*|*deepin*|*pop*)\n                MANAGER_QUERY=\"dpkg-query -s\"\n                MANAGER_INSTALL=\"apt install\"\n                DEPS=\"{${DEPS_DEBIAN}}\"\n                dep_install\n\n                if [[ $(pip3 show meson; echo $?) == 1 || $(pip3 show mako; echo $?) == 1 ]]; then\n                    $SU_CMD pip3 install 'meson>=0.54' mako\n                fi\n                if [[ ! -f /usr/local/bin/glslangValidator ]]; then\n                    wget https://github.com/KhronosGroup/glslang/releases/download/master-tot/glslang-master-linux-Release.zip\n                    unzip glslang-master-linux-Release.zip bin/glslangValidator\n                    $SU_CMD /usr/bin/install -m755 bin/glslangValidator /usr/local/bin/\n                    rm bin/glslangValidator glslang-master-linux-Release.zip\n                fi\n                break\n            ;;\n            *suse*)\n                echo \"You may have to enable packman repository for some extra packages: ${DEPS_SUSE_EXTRA}\"\n                echo \"Leap:       zypper ar -cfp 90 https://ftp.gwdg.de/pub/linux/misc/packman/suse/openSUSE_Leap_15.1/ packman\"\n                echo \"Tumbleweed: zypper ar -cfp 90 http://ftp.gwdg.de/pub/linux/misc/packman/suse/openSUSE_Tumbleweed/ packman\"\n\n                MANAGER_QUERY=\"rpm -q\"\n                MANAGER_INSTALL=\"zypper install\"\n                DEPS=\"{${DEPS_SUSE},${DEPS_SUSE_EXTRA}}\"\n                dep_install\n\n                if [[ $(pip3 show meson; echo $?) == 1 ]]; then\n                    $SU_CMD pip3 install 'meson>=0.54'\n                fi\n                break\n            ;;\n            *solus*)\n                unset MANAGER_QUERY\n                unset DEPS\n                MANAGER_INSTALL=\"eopkg it\"\n\n                local packages=(${DEPS_SOLUS//,/ })\n\n                # eopkg doesn't emit exit codes properly, so use the python API to find if a package is installed.\n                for package in ${packages[@]}; do\n                    python -c \"import pisi.db; import sys; idb = pisi.db.installdb.InstallDB(); sys.exit(0 if idb.has_package(\\\"${package}\\\") else 1)\"\n                    if [[ $? -ne 0 ]]; then\n                        INSTALL=\"${INSTALL}\"\"${package} \"\n                    fi\n                done\n\n                # likewise, ensure the whole system.devel component is satisfied\n                python -c \"import pisi.db; import sys; idb = pisi.db.installdb.InstallDB(); cdb = pisi.db.componentdb.ComponentDB(); mpkgs = [x for x in cdb.get_packages('system.devel') if not idb.has_package(x)]; sys.exit(0 if len(mpkgs) == 0 else 1)\"\n\n                if [[ $? -ne 0 ]]; then\n                    INSTALL=\"${INSTALL}\"\"-c system.devel \"\n                fi\n                dep_install\n                break\n                ;;\n            *)\n                echo \"# Unable to find distro information!\"\n                echo \"# Attempting to build regardless\"\n        esac\n        done\n    fi\n}\n\nconfigure() {\n    dependencies\n    git submodule update --init --depth 50\n    CONFIGURE_OPTS=\"-Dwerror=true\"\n    if [[ ! -f \"build/meson64/build.ninja\" ]]; then\n        meson build/meson64 --libdir lib/mangohud/lib64 --prefix /usr -Dappend_libdir_mangohud=false $@ ${CONFIGURE_OPTS}\n    fi\n    if [[ ! -f \"build/meson32/build.ninja\" && \"$MACHINE\" = \"x86_64\" ]]; then\n        export CC=\"gcc -m32\"\n        export CXX=\"g++ -m32\"\n        export PKG_CONFIG_PATH=\"/usr/lib32/pkgconfig:/usr/lib/i386-linux-gnu/pkgconfig:/usr/lib/pkgconfig:${PKG_CONFIG_PATH_32}\"\n        meson build/meson32 --libdir lib/mangohud/lib32 --prefix /usr -Dappend_libdir_mangohud=false $@ ${CONFIGURE_OPTS}\n    fi\n}\n\nbuild() {\n    if [[ ! -f \"build/meson64/build.ninja\" ]]; then\n        configure $@\n    fi\n    DESTDIR=\"$PWD/build/release\" ninja -C build/meson64 install\n\n    if [ \"$MACHINE\" = \"x86_64\" ]; then\n        DESTDIR=\"$PWD/build/release\" ninja -C build/meson32 install\n    fi\n\n    sed -i 's:/usr/\\\\$LIB:/usr/lib/mangohud/\\\\$LIB:g' \"$PWD/build/release/usr/bin/mangohud\"\n}\n\npackage() {\n    LIB=\"build/release/usr/lib/mangohud/lib64/libMangoHud.so\"\n    LIB32=\"build/release/usr/lib/mangohud/lib32/libMangoHud.so\"\n    if [[ ! -f \"$LIB\" || \"$LIB\" -ot \"build/meson64/src/libMangoHud.so\" ]]; then\n        build\n    fi\n    tar --numeric-owner --owner=0 --group=0 \\\n        -C build/release -cvf \"build/MangoHud-package.tar\" .\n}\n\nrelease() {\n    rm build/MangoHud-package.tar\n    mkdir -p build/MangoHud\n    package\n    cp --preserve=mode bin/mangohud-setup.sh build/MangoHud/mangohud-setup.sh\n    cp build/MangoHud-package.tar build/MangoHud/MangoHud-package.tar\n    tar --numeric-owner --owner=0 --group=0 \\\n        -C build -czvf build/MangoHud-$VERSION.tar.gz MangoHud\n}\n\nuninstall() {\n    [ \"$UID\" -eq 0 ] || exec $SU_CMD bash \"$0\" uninstall\n    rm -rfv \"/usr/lib/mangohud\"\n    rm -rfv \"/usr/share/doc/mangohud\"\n    rm -fv \"/usr/share/man/man1/mangohud.1\"\n    rm -fv \"/usr/share/vulkan/implicit_layer.d/mangohud.json\"\n    rm -fv \"/usr/share/vulkan/implicit_layer.d/MangoHud.json\"\n    rm -fv \"/usr/share/vulkan/implicit_layer.d/MangoHud.x86.json\"\n    rm -fv \"/usr/share/vulkan/implicit_layer.d/MangoHud.x86_64.json\"\n    rm -fv \"/usr/bin/mangohud\"\n    rm -fv \"/usr/bin/mangoplot\"\n    rm -fv \"/usr/bin/mangohud.x86\"\n}\n\ninstall() {\n    rm -rf \"$HOME/.local/share/MangoHud/\"\n    rm -f \"$HOME/.local/share/vulkan/implicit_layer.d/\"{mangohud32.json,mangohud64.json}\n\n    [ \"$UID\" -eq 0 ] || mkdir -pv \"${CONFIG_DIR}\"\n    [ \"$UID\" -eq 0 ] || build\n    [ \"$UID\" -eq 0 ] || exec $SU_CMD bash \"$0\" install\n\n    uninstall\n\n    DEFAULTLIB=lib32\n    for i in $DISTRO; do\n        case $i in\n            *arch*)\n            DEFAULTLIB=lib64\n            ;;\n        esac\n    done\n\n    if [ \"$MACHINE\" != \"x86_64\" ]; then\n        # Native libs\n        DEFAULTLIB=lib64\n    fi\n\n    echo DEFAULTLIB: $DEFAULTLIB\n    /usr/bin/install -Dvm644 ./build/release/usr/lib/mangohud/lib64/libMangoHud.so /usr/lib/mangohud/lib64/libMangoHud.so\n    /usr/bin/install -Dvm644 ./build/release/usr/lib/mangohud/lib64/libMangoHud_opengl.so /usr/lib/mangohud/lib64/libMangoHud_opengl.so\n    /usr/bin/install -Dvm644 ./build/release/usr/lib/mangohud/lib64/libMangoHud_shim.so /usr/lib/mangohud/lib64/libMangoHud_shim.so\n    if [ \"$MACHINE\" = \"x86_64\" ]; then\n      /usr/bin/install -Dvm644 ./build/release/usr/lib/mangohud/lib32/libMangoHud.so /usr/lib/mangohud/lib32/libMangoHud.so\n      /usr/bin/install -Dvm644 ./build/release/usr/lib/mangohud/lib32/libMangoHud_opengl.so /usr/lib/mangohud/lib32/libMangoHud_opengl.so\n      /usr/bin/install -Dvm644 ./build/release/usr/lib/mangohud/lib32/libMangoHud_shim.so /usr/lib/mangohud/lib32/libMangoHud_shim.so\n    fi\n\n    /usr/bin/install -Dvm644 ./build/release/usr/share/vulkan/implicit_layer.d/MangoHud.x86_64.json /usr/share/vulkan/implicit_layer.d/MangoHud.x86_64.json\n    /usr/bin/install -Dvm644 ./build/release/usr/share/vulkan/implicit_layer.d/MangoHud.x86.json /usr/share/vulkan/implicit_layer.d/MangoHud.x86.json\n    /usr/bin/install -Dvm644 ./build/release/usr/share/man/man1/mangohud.1 /usr/share/man/man1/mangohud.1\n    /usr/bin/install -Dvm644 ./build/release/usr/share/doc/mangohud/MangoHud.conf.example /usr/share/doc/mangohud/MangoHud.conf.example\n    /usr/bin/install -vm755  ./build/release/usr/bin/mangohud /usr/bin/mangohud\n    /usr/bin/install -vm755  ./build/release/usr/bin/mangoplot /usr/bin/mangoplot\n\n    ln -sv $DEFAULTLIB /usr/lib/mangohud/lib\n\n    # FIXME get the triplet somehow\n    ln -sv lib64 /usr/lib/mangohud/x86_64\n    ln -sv lib64 /usr/lib/mangohud/x86_64-linux-gnu\n    ln -sv . /usr/lib/mangohud/lib64/x86_64\n    ln -sv . /usr/lib/mangohud/lib64/x86_64-linux-gnu\n\n    ln -sv lib32 /usr/lib/mangohud/i686\n    ln -sv lib32 /usr/lib/mangohud/i386-linux-gnu\n    ln -sv lib32 /usr/lib/mangohud/i686-linux-gnu\n\n    mkdir -p /usr/lib/mangohud/tls\n    ln -sv ../lib64 /usr/lib/mangohud/tls/x86_64\n    ln -sv ../lib32 /usr/lib/mangohud/tls/i686\n\n    # Some distros search in $prefix/x86_64-linux-gnu/tls/x86_64 etc instead\n    if [ ! -e /usr/lib/mangohud/lib/i386-linux-gnu ]; then\n        ln -sv ../lib32 /usr/lib/mangohud/lib/i386-linux-gnu\n    fi\n    if [ ! -e /usr/lib/mangohud/lib/i686-linux-gnu ]; then\n        ln -sv ../lib32 /usr/lib/mangohud/lib/i686-linux-gnu\n    fi\n    if [ ! -e /usr/lib/mangohud/lib/x86_64-linux-gnu ]; then\n        ln -sv ../lib64 /usr/lib/mangohud/lib/x86_64-linux-gnu\n    fi\n\n    # $LIB can be \"lib/tls/x86_64\"?\n    ln -sv ../tls /usr/lib/mangohud/lib/tls\n\n    #ln -sv lib64 /usr/lib/mangohud/aarch64-linux-gnu\n    #ln -sv lib64 /usr/lib/mangohud/arm-linux-gnueabihf\n\n    echo \"MangoHud Installed\"\n}\n\nreinstall() {\n    build\n    package\n    install\n}\n\nclean() {\n    rm -rf \"build\"\n    rm -rf subprojects/*/\n}\n\nusage() {\n    if test -z $1; then\n        echo \"Unrecognized command argument: $arg\"\n    else\n        echo \"$0 requires one argument\"\n    fi\n    echo -e \"\\nUsage: $0 <command>\\n\"\n    echo \"Available commands:\"\n    echo -e \"\\tpull\\t\\tPull latest commits (code) from Git\"\n    echo -e \"\\tconfigure\\tEnsures that dependencies are installed, updates git submodules, and generates files needed for building MangoHud. This is automatically run by the build command\"\n    echo -e \"\\tbuild\\t\\tIf needed runs configure and then builds (compiles) MangoHud\"\n    echo -e \"\\tpackage\\t\\tRuns build if needed and then builds a tar package from MangoHud\"\n    echo -e \"\\tinstall\\t\\tInstall MangoHud onto your system\"\n    echo -e \"\\treinstall\\tRuns build, then package, and finally install\"\n    echo -e \"\\tclean\\t\\tRemoves build directory\"\n    echo -e \"\\tuninstall\\tRemoves installed MangoHud files from your system\"\n    echo -e \"\\trelease\\t\\tBuilds a MangoHud release tar package\"\n}\n\nif [[ -z $@ ]]; then\n    usage no-args\nfi\n\nwhile [ $# -gt 0 ]; do\n    OPTS=()\n    arg=\"$1\"\n    shift\n\n    while [ $# -gt 0 ] ; do\n        case $1 in\n        -*)\n            OPTS+=(\"$1\")\n            shift\n        ;;\n        *)\n            break\n        ;;\n        esac;\n    done\n\n    echo -e \"\\e[1mCommand:\\e[92m\" $arg \"\\e[94m\"${OPTS[@]}\"\\e[39m\\e[0m\"\n    case $arg in\n        \"pull\") git pull ${OPTS[@]};;\n        \"configure\") configure ${OPTS[@]};;\n        \"build\") build ${OPTS[@]};;\n        \"build_dbg\") build --buildtype=debug -Dglibcxx_asserts=true ${OPTS[@]};;\n        \"package\") package;;\n        \"install\") install;;\n        \"reinstall\") reinstall;;\n        \"clean\") clean;;\n        \"uninstall\") uninstall;;\n        \"release\") release;;\n        *)\n            usage\n    esac\ndone\n"
        },
        {
          "name": "build_deps.sh",
          "type": "blob",
          "size": 1.078125,
          "content": "DEPS_ARCH=\"gcc,meson,pkgconf,python-mako,glslang,libglvnd,lib32-libglvnd,libxnvctrl,libdrm,python-numpy,python-matplotlib,libxkbcommon,lib32-libxkbcommon\"\nDEPS_FEDORA=\"meson,gcc,gcc-c++,libX11-devel,glslang,python3-mako,mesa-libGL-devel,libXNVCtrl-devel,dbus-devel,python3-numpy,python3-matplotlib,libstdc++-static,libstdc++-static.i686,libxkbcommon-devel,wayland-devel\"\nDEPS_DEBIAN=\"gcc,g++,gcc-multilib,g++-multilib,ninja-build,python3-pip,python3-setuptools,python3-wheel,pkg-config,mesa-common-dev,libx11-dev,libxnvctrl-dev,libdbus-1-dev,python3-numpy,python3-matplotlib,libxkbcommon-dev,libxkbcommon-dev:i386,libwayland-dev,libwayland-dev:i386\"\nDEPS_SOLUS=\"mesalib-32bit-devel,glslang,libstdc++-32bit,glibc-32bit-devel,mako,numpy,matplotlib,libxkbcommon-devel\"\n\nDEPS_SUSE=\"gcc-c++,gcc-c++-32bit,libpkgconf-devel,ninja,python3-pip,python3-Mako,libX11-devel,glslang-devel,glibc-devel,glibc-devel-32bit,libstdc++-devel,libstdc++-devel-32bit,Mesa-libGL-devel,dbus-1-devel,python-numpy,python-matplotlib,libxkbcommon-devel,libxkbcommon-devel-32bit,wayland-devel-32bit\"\nDEPS_SUSE_EXTRA=\"libXNVCtrl-devel\"\n"
        },
        {
          "name": "control",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 7.943359375,
          "content": "project('MangoHud',\n  ['c', 'cpp'],\n  version : 'v0.7.2',\n  license : 'MIT',\n  meson_version: '>=0.60.0',\n  default_options : ['buildtype=release', 'c_std=c99', 'cpp_std=c++14', 'warning_level=2']\n)\n\ncc = meson.get_compiler('c')\ncpp = meson.get_compiler('cpp')\n\nprog_python = import('python').find_installation('python3', modules: ['mako'])\nnull_dep = dependency('', required : false)\n\nmangohud_version = vcs_tag(\n  command: ['git', 'describe', '--tags', '--dirty=+'],\n  input:  'version.h.in',\n  output: 'version.h')\n\nmangohud_version_dep = declare_dependency(sources : mangohud_version)\n\npre_args = [\n  '-D__STDC_CONSTANT_MACROS',\n  '-D__STDC_FORMAT_MACROS',\n  '-D__STDC_LIMIT_MACROS',\n  '-DPACKAGE_VERSION=\"@0@\"'.format(meson.project_version()),\n  '-DSPDLOG_COMPILED_LIB'\n]\n\n# Always set max spdlog level, handle this using MANGOHUD_LOG_LEVEL instead.\nif get_option('buildtype') == 'debug'\n  pre_args += '-DDEBUG'\n  pre_args += '-DSPDLOG_ACTIVE_LEVEL=SPDLOG_LEVEL_TRACE'\nelse\n  pre_args += '-DSPDLOG_ACTIVE_LEVEL=SPDLOG_LEVEL_DEBUG'\nendif\n# TODO: this is very incomplete\nis_unixy = false\nif ['linux', 'cygwin', 'gnu'].contains(host_machine.system())\n  pre_args += '-D_GNU_SOURCE'\n  pre_args += '-DHAVE_PTHREAD'\n  is_unixy = true\nendif\n\nif get_option('glibcxx_asserts')\n  pre_args += '-D_GLIBCXX_ASSERTIONS'\nendif\n\n# Check for GCC style atomics\nif cc.compiles('''#include <stdint.h>\n                  int main() {\n                    struct {\n                      uint64_t *v;\n                    } x;\n                    return (int)__atomic_load_n(x.v, __ATOMIC_ACQUIRE) &\n                           (int)__atomic_add_fetch(x.v, (uint64_t)1, __ATOMIC_ACQ_REL);\n\n                  }''',\n               name : 'GCC atomic builtins')\n  pre_args += '-DUSE_GCC_ATOMIC_BUILTINS'\nendif\n\n# Not in C99, needs POSIX\nif cc.compiles('''\n                 #define _GNU_SOURCE\n                 #include <time.h>\n                  int main() {\n                    struct timespec ts;\n                    return timespec_get(&ts, TIME_UTC);\n\n                  }''',\n               name : 'Supports timespec_get')\n  pre_args += '-DHAVE_TIMESPEC_GET'\nendif\n\n# Check for GCC style builtins\nforeach b : ['bswap32', 'bswap64', 'clz', 'clzll', 'ctz', 'expect', 'ffs',\n             'ffsll', 'popcount', 'popcountll', 'unreachable']\n  if cc.has_function(b)\n    pre_args += '-DHAVE___BUILTIN_@0@'.format(b.to_upper())\n  endif\nendforeach\n\nvulkan_wsi_args = []\nvulkan_wsi_deps = []\n\nif is_unixy\n  dep_x11 = dependency('x11', required: get_option('with_x11'))\n  dep_wayland_client = dependency('wayland-client',\n      required: get_option('with_wayland'), version : '>=1.11')\n  dbus_dep = dependency('dbus-1', required: get_option('with_dbus')).partial_dependency(compile_args : true, includes : true)\n  dep_xkb = dependency('xkbcommon', required: get_option('with_x11').enabled() or get_option('with_wayland').enabled())\nelse\n  dep_x11 = null_dep\n  dep_wayland_client = null_dep\n  dbus_dep = null_dep\nendif\n\nif dep_x11.found()\n  vulkan_wsi_args += ['-DVK_USE_PLATFORM_XLIB_KHR']\n  vulkan_wsi_deps += dep_x11.partial_dependency(compile_args : true, includes : true)\nendif\nif dep_wayland_client.found()\n  vulkan_wsi_args += ['-DVK_USE_PLATFORM_WAYLAND_KHR']\n  vulkan_wsi_deps += dep_wayland_client\n  vulkan_wsi_deps += dep_xkb\nendif\n\nif is_unixy and not dep_x11.found() and not dep_wayland_client.found()\n  error('At least one of \"with_x11\" and \"with_wayland\" should be enabled')\nendif\n\ninc_common = [\n    include_directories('include'),\n]\n\ndep_pthread = dependency('threads')\n\nadd_project_arguments(\n  cc.get_supported_arguments([\n    '-Werror=implicit-function-declaration',\n    '-Werror=missing-declarations',\n    '-Werror=missing-prototypes',\n    '-Werror=return-type',\n    '-Werror=incompatible-pointer-types',\n    '-Wno-unused-parameter',\n    '-Qunused-arguments',\n    '-fno-math-errno',\n    '-fno-trapping-math',\n    '-Wno-missing-field-initializers',\n  ]), language : ['c'],\n)\n\nadd_project_arguments(\n  cpp.get_supported_arguments([\n    '-Werror=missing-declarations',\n    '-Werror=return-type',\n    '-Wno-unused-parameter',\n    '-Qunused-arguments',\n    '-fno-math-errno',\n    '-fno-trapping-math',\n    '-Wno-non-virtual-dtor',\n    '-Wno-missing-field-initializers',\n  ]), language : ['cpp'],\n)\n\nforeach a : pre_args\n  add_project_arguments(a, language : ['c', 'cpp'])\nendforeach\n\n# check for dl support\nif is_unixy\n  if cc.has_function('dlopen')\n    dep_dl = null_dep\n  else\n    dep_dl = cc.find_library('dl')\n  endif\n# check for linking with rt by default\n  if cc.has_function('clock_gettime')\n    dep_rt = null_dep\n  else\n    dep_rt = cc.find_library('rt')\n  endif\nelse\n  dep_dl = null_dep\n  dep_rt = null_dep\nendif\n\n# Commented code can be used if mangohud start using latest SDK Vulkan-Headers\n# Allowing user to build mangohud using system Vulkan-Headers\n#if not dependency('VulkanHeaders').found()\n  vkh_sp = subproject('vulkan-headers')\n  vk_api_xml = vkh_sp.get_variable('vulkan_api_xml')\n  dep_vulkan = vkh_sp.get_variable('vulkan_headers_dep')\n#else\n#  dep_vulkan = dependency('VulkanHeaders', required: true)\n#  vk_api_xml = files('/usr/share/vulkan/registry/vk.xml')\n#endif\n\n\n\nvk_enum_to_str = custom_target(\n  'vk_enum_to_str',\n  input : ['bin/gen_enum_to_str.py', vk_api_xml],\n  output : ['vk_enum_to_str.c', 'vk_enum_to_str.h'],\n  command : [\n    prog_python, '@INPUT0@', '--xml', '@INPUT1@',\n    '--outdir', meson.current_build_dir()\n  ],\n)\n\nimgui_options = [\n  'default_library=static',\n  'werror=false',\n  # use 'auto_features=disabled' once available: https://github.com/mesonbuild/meson/issues/5320\n  'dx9=disabled',\n  'dx10=disabled',\n  'dx11=disabled',\n  'dx12=disabled',\n  'metal=disabled',\n  'opengl=disabled',\n  'vulkan=disabled',\n  'glfw=disabled',\n  'sdl2=disabled',\n  'osx=disabled',\n  'win=disabled',\n  'allegro5=disabled',\n  'webgpu=disabled',\n  'sdl_renderer=disabled'\n]\n\nsizeof_ptr = cc.sizeof('void*')\nif sizeof_ptr == 8\n  pre_args += '-DMANGOHUD_ARCH=\"64bit\"'\nelif sizeof_ptr == 4\n  pre_args += '-DMANGOHUD_ARCH=\"32bit\"'\nendif\n\nif get_option('mangoapp')\n  imgui_options += [\n    'opengl=enabled',\n    'glfw=enabled',\n  ]\nendif\ndearimgui_dep = dependency('imgui', fallback: ['imgui'], required: true, default_options: imgui_options)\n\nif is_unixy\nimplot_dep = dependency('implot', fallback: ['implot'], required: true, default_options: ['default_library=static'])\nelse\nimplot_dep = null_dep\nimplot_lib = static_library('nulllib', [])\nendif\n\nspdlog_options = [\n  'default_library=static',\n  'compile_library=true',\n  'werror=false',\n  'tests=disabled',\n  'external_fmt=disabled',\n  'std_format=disabled'\n]\n\nspdlog_dep = dependency('spdlog', required: false)\n\nif get_option('use_system_spdlog').disabled() or not spdlog_dep.found()\n    if get_option('use_system_spdlog').enabled()\n      warning('spdlog dependency not found following back to submodule')\n    endif\n    spdlog_sp = subproject('spdlog', default_options: spdlog_options)\n    spdlog_dep = spdlog_sp.get_variable('spdlog_dep')\nendif\n\nif ['windows', 'mingw'].contains(host_machine.system())\n  minhook_dep = dependency('minhook', fallback: ['minhook', 'minhook_dep'], required: true)\n  windows_deps = [\n    minhook_dep,\n  ]\nelse\n  windows_deps = null_dep\nendif\n\nif get_option('mangoapp')\n  glfw3_dep = dependency('glfw3')\n  glew_dep = dependency('glew')\nendif\n\njson_dep = dependency('nlohmann_json')\nsubdir('src')\n\nif get_option('include_doc')\n  subdir('data')\nendif\n\nif get_option('tests').enabled()\n  cmocka_dep = dependency('cmocka', fallback: ['cmocka', 'cmocka_dep'])\n\n  e = executable('amdgpu', 'tests/test_amdgpu.cpp',\n    files(\n      'src/amdgpu.cpp',\n      'src/cpu.cpp',\n      'src/gpu.cpp',\n      'src/gpu_fdinfo.cpp',\n      'src/nvidia.cpp',\n      'src/mesa/util/os_time.c',\n      'src/file_utils.cpp',\n    ),\n    cpp_args: ['-DTEST_ONLY'],\n    dependencies: [\n      cmocka_dep,\n      spdlog_dep,\n      implot_dep,\n      dearimgui_dep\n    ],\n    include_directories: inc_common)\n\n  test('test amdgpu', e, workdir : meson.project_source_root() + '/tests')\n\nendif\n\n# install helper scripts\nif get_option('mangoplot').enabled()\n  subdir('bin')\nendif\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 1.3173828125,
          "content": "option('glibcxx_asserts', type : 'boolean', value : false)\noption('use_system_spdlog', type : 'feature', value : 'disabled', description: 'Use system spdlog library')\noption('append_libdir_mangohud', type : 'boolean', value : true, description: 'Append \"mangohud\" to libdir path or not.')\noption('include_doc', type : 'boolean', value : true, description: 'Include the example config, man pages, appstream files etc.')\noption('with_nvml', type : 'combo', value : 'enabled', choices: ['enabled', 'system', 'disabled'], description: 'Enable NVML support')\noption('with_xnvctrl', type : 'feature', value : 'enabled', description: 'Enable XNVCtrl support')\noption('with_x11', type : 'feature', value : 'enabled')\noption('with_wayland', type : 'feature', value : 'enabled')\noption('with_dbus', type : 'feature', value : 'enabled')\noption('loglevel', type: 'combo', choices : ['trace', 'debug', 'info', 'warn', 'err', 'critical', 'off'], value : 'info', description: 'Max log level in non-debug build')\noption('mangoapp', type: 'boolean', value : false)\noption('mangohudctl', type: 'boolean', value : false)\noption('tests', type: 'feature', value: 'auto', description: 'Run tests')\noption('mangoplot', type: 'feature', value: 'enabled')\noption('dynamic_string_tokens', type: 'boolean', value: true, description: 'Use dynamic string tokens in LD_PRELOAD')\n"
        },
        {
          "name": "mingw32.txt",
          "type": "blob",
          "size": 0.3056640625,
          "content": "[binaries]\nc = 'i686-w64-mingw32-gcc'\ncpp = 'i686-w64-mingw32-g++'\nar = 'i686-w64-mingw32-ar'\nstrip = 'i686-w64-mingw32-strip'\npkg-config = 'i686-w64-mingw32-pkg-config'\nsh = '/usr/bin/sh'\n\n[properties]\nneeds_exe_wrapper = true\n\n[host_machine]\nsystem = 'windows'\ncpu_family = 'x86'\ncpu = 'i686'\nendian = 'little'\n"
        },
        {
          "name": "mingw64.txt",
          "type": "blob",
          "size": 0.3203125,
          "content": "[binaries]\nc = 'x86_64-w64-mingw32-gcc'\ncpp = 'x86_64-w64-mingw32-g++'\nar = 'x86_64-w64-mingw32-ar'\nstrip = 'x86_64-w64-mingw32-strip'\npkg-config = 'x86_64-w64-mingw32-pkg-config'\nsh = '/usr/bin/sh'\n\n[properties]\nneeds_exe_wrapper = true\n\n[host_machine]\nsystem = 'windows'\ncpu_family = 'x86_64'\ncpu = 'x86_64'\nendian = 'little'\n"
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkgbuild",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "steamrt.Dockerfile.in",
          "type": "blob",
          "size": 0.9033203125,
          "content": "FROM scratch\nADD com.valvesoftware.SteamRuntime.Sdk-amd64,i386-%RUNTIME%-sysroot.tar.gz /\nWORKDIR /build\nRUN \\\nset -e; \\\nmkdir -p /run/systemd; \\\necho 'docker' > /run/systemd/container; \\\nmkdir -p /prep; cd /prep; \\\nif [ -f /usr/bin/python3.5 ]; then \\\n  ln -sf python3.5 /usr/bin/python3; \\\n  curl https://bootstrap.pypa.io/pip/3.5/get-pip.py -o get-pip.py; \\\nelse \\\n  curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py; \\\nfi; \\\nif [ ! -f /usr/bin/unzip ]; then apt-get update; apt-get -y install unzip; fi; \\\npython3 ./get-pip.py; \\\npip3 install meson mako; \\\ncurl -LO http://mirrors.kernel.org/ubuntu/pool/main/n/nvidia-settings/libxnvctrl0_440.64-0ubuntu1_amd64.deb; \\\ncurl -LO http://mirrors.kernel.org/ubuntu/pool/main/n/nvidia-settings/libxnvctrl-dev_440.64-0ubuntu1_amd64.deb; \\\ndpkg -i libxnvctrl0_440.64-0ubuntu1_amd64.deb libxnvctrl-dev_440.64-0ubuntu1_amd64.deb; \\\ncd /; rm -fr /prep; \\\n:\n\nCMD [\"/bin/bash\"]\n"
        },
        {
          "name": "subprojects",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.h.in",
          "type": "blob",
          "size": 0.0498046875,
          "content": "#pragma once\n\n#define MANGOHUD_VERSION \"@VCS_TAG@\"\n"
        }
      ]
    }
  ]
}