{
  "metadata": {
    "timestamp": 1736710286900,
    "page": 57,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pygame/pygame",
      "stars": 7660,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.732421875,
          "content": "# Pygame build process: config.py setup.py\n/Setup\n*.pyc\n/build/\n/src_py/version.py\n\n# Windows prebuilt external libraries\n/prebuilt-x??\n/prebuilt_downloads\n\n# macOS generated files\n.DS_Store\n\n# Sphinx generated files: makeref.py\n/docs/generated\n\n# Emacs temporary files\n*~\n\n# VIM temporary files\n*.swp\n\n# Visual Studio cache/config directory\n.vs/\n\n# Visual Studio Code cache/config directory\n.vscode/\n\n# PyCharm cache/config directory\n.idea/\n\n# mypy\n.mypy_cache/\n\n# Other\nenvdev*\n.virtualenv*\nbuildconfig/manylinux-build/wheelhouse/\nanenv\ndist\n.vagrant\n*.egg-info/\n*.so\n__pycache__\n_headers/*\n\n# generated by cython\nsrc_c/_sdl2/audio.c\nsrc_c/_sdl2/controller.c\nsrc_c/_sdl2/mixer.c\nsrc_c/_sdl2/sdl2.c\nsrc_c/_sdl2/video.c\nsrc_c/_sprite.c\nsrc_c/pypm.c\n\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.69921875,
          "content": "# Learn more about this config here: https://pre-commit.com/\n\n# To enable these pre-commit hooks run:\n# `brew install pre-commit` or `python3 -m pip install pre-commit`\n# Then in the project root directory run `pre-commit install`\n\nrepos:\n  - repo: https://github.com/psf/black-pre-commit-mirror\n    rev: 24.4.0\n    hooks:\n      - id: black\n        args: [--skip-string-normalization]\n        exclude: |\n            (?x)^(\n                ^buildconfig/.*$\n                | ^docs/reST/.*$\n                | docs/es/conf.py\n                | setup.py\n            )$\n\n  - repo: https://github.com/pre-commit/mirrors-clang-format\n    rev: v18.1.3\n    hooks:\n      - id: clang-format\n        exclude: |\n            (?x)^(\n                ^src_c/_sdl2/.*$\n                | ^src_c/doc/.*$\n                | docs/reST/_static/script.js\n                | docs/reST/_templates/header.h\n                | src_c/include/sse2neon.h\n                | src_c/pypm.c\n                | src_c/SDL_gfx/SDL_gfxPrimitives.c\n                | src_c/SDL_gfx/SDL_gfxPrimitives.h\n                | src_c/SDL_gfx/SDL_gfxPrimitives_font.h\n                | src_c/sdlmain_osx.m\n            )$\n\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.2.4\n    hooks:\n    - id: codespell\n      args: [\"--skip=docs/es/*,src_c/*,setup.py,*.json\"]\n      additional_dependencies:\n        - tomli\n\n  - repo: https://github.com/charliermarsh/ruff-pre-commit\n    rev: v0.3.7\n    hooks:\n      - id: ruff\n        args: [\n          --exclude, setup.py,\n          --extend-ignore, \"E401,E402,E701,E721,E722,E731,E741,F401,F403,F405,F821,F841\",\n          --extend-select, \"ASYNC,C4,PERF,W\",\n          # --line-length, \"159\",\n          --target-version, py37,\n        ]\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 10.572265625,
          "content": ".. image:: https://raw.githubusercontent.com/pygame/pygame/main/docs/reST/_static/pygame_logo.svg\n  :alt: pygame\n  :target: https://www.pygame.org/\n\n\n|AppVeyorBuild| |PyPiVersion| |PyPiLicense|\n|Python3| |GithubCommits| |BlackFormatBadge|\n\nPygame_ is a free and open-source cross-platform library\nfor the development of multimedia applications like video games using Python.\nIt uses the `Simple DirectMedia Layer library`_ and several other\npopular libraries to abstract the most common functions, making writing\nthese programs a more intuitive task.\n\n`We need your help`_ to make pygame the best it can be!\nNew contributors are welcome.\n\n\nInstallation\n------------\n\nBefore installing pygame, you must check that Python is installed\non your machine. To find out, open a command prompt (if you have\nWindows) or a terminal (if you have MacOS or Linux) and type this:\n::\n\n   python --version\n\n\nIf a message such as \"Python 3.8.10\" appears, it means that Python\nis correctly installed. If an error message appears, it means that\nit is not installed yet. You must then go to the `official website\n<https://www.python.org/downloads/>`_ to download it.\n\nOnce Python is installed, you have to perform a final check: you have\nto see if pip is installed. Generally, pip is pre-installed with\nPython but we are never sure. Same as for Python, type the following\ncommand:\n::\n\n   pip --version\n\n\nIf a message such as \"pip 20.0.2 from /usr/lib/python3/dist-packages/pip\n(python 3.8)\" appears, you are ready to install pygame! To install\nit, enter this command:\n::\n\n   pip install pygame\n\nOnce pygame is installed, quickly test your library by entering the following\ncommand, which opens one of the many example games that comes pre-installed: \n::\n\n\tpython3 -m pygame.examples.aliens\n\n\nIf this doesn’t work, the `Getting Started \n<https://www.pygame.org/wiki/GettingStarted/>`_ section of the official \nwebsite has more information for platform specific issues, such as adding\npython to your machine’s PATH settings\n\n\nHelp\n----\n\nIf you are just getting started with pygame, you should be able to\nget started fairly quickly.  Pygame comes with many tutorials and\nintroductions.  There is also full reference documentation for the\nentire library. Browse the documentation on the `docs page`_. You\ncan also browse the documentation locally by running\n``python -m pygame.docs`` in your terminal. If the docs aren't found\nlocally, it'll launch the online website instead.\n\nThe online documentation stays up to date with the development version\nof pygame on GitHub.  This may be a bit newer than the version of pygame\nyou are using. To upgrade to the latest full release, run\n``pip install pygame --upgrade`` in your terminal.\n\nBest of all, the examples directory has many playable small programs\nwhich can get you started playing with the code right away.\n\n\nFeatures\n----------\n\nPygame is a powerful library for game development, offering a wide\nrange of features to simplify your coding journey. Let's delve into\nwhat pygame has to offer:\n\nGraphics - With pygame, creating dynamic and engaging graphics has\nnever been easier. The library provides simple yet effective tools for\n2D graphics and animation, including support for images, rectangles,\nand polygon shapes. Whether you're a seasoned game developer or just\nstarting out, pygame has you covered.\n\nSound - Pygame also includes support for playing and manipulating sound\nand music, making it easy to add sound effects and background music to\nyour games. With support for WAV, MP3, and OGG file formats, you have\nplenty of options to choose from.\n\nInput - Pygame provides intuitive functions for handling keyboard, mouse,\nand joystick input, allowing you to quickly and easily implement player\ncontrols in your games. No more struggling with complex input code, pygame\nmakes it simple.\n\nGame Development - Lastly, pygame provides a comprehensive suite of tools\nand features specifically designed for game development. From collision\ndetection to sprite management, pygame has everything you need to create\nexciting and engaging games. Whether you're building a platformer, puzzle\ngame, or anything in between, pygame has you covered.\n\n\nBuilding From Source\n--------------------\n\nIf you want to use features that are currently in development,\nor you want to contribute to pygame, you will need to build pygame\nlocally from its source code, rather than pip installing it.\n\nInstalling from source is fairly automated. The most work will\ninvolve compiling and installing all the pygame dependencies.  Once\nthat is done, run the ``setup.py`` script which will attempt to\nauto-configure, build, and install pygame.\n\nMuch more information about installing and compiling is available\non the `Compilation wiki page`_.\n\nContribute\n----------\n\n* `Documentation Contributions <https://github.com/pygame/pygame/tree/main/docs>`_ - Guidelines for contributing to the main documentations\n* `Writing your first unit test <http://renesd.blogspot.com/2019/11/draft-2-of-lets-write-unit-test.html>`_ - Step by step guide on how to write your first unit test in Python for Pygame.\n* `How to Hack Pygame <https://www.pygame.org/wiki/Hacking>`_ - Information on hacking, developing, and modifying Pygame\n* `Issue Tracker for beginners <https://github.com/pygame/pygame/labels/good%20first%20issue>`_ - A way for beginners to contribute to the project\n* `Bugs & Patches <https://www.pygame.org/wiki/patchesandbugs>`_ - Report bugs\n* `Communication tools <https://www.pygame.org/wiki/info>`_ - More information and ways to get in touch with the Pygame team\n\n\nCredits\n-------\n\nThanks to everyone who has helped contribute to this library.\nSpecial thanks are also in order.\n\n* Marcus Von Appen: many changes, and fixes, 1.7.1+ freebsd maintainer\n* Lenard Lindstrom: the 1.8+ windows maintainer, many changes, and fixes\n* Brian Fisher for svn auto builder, bug tracker and many contributions\n* Rene Dudfield: many changes, and fixes, 1.7+ release manager/maintainer\n* Phil Hassey for his work on the pygame.org website\n* DR0ID for his work on the sprite module\n* Richard Goedeken for his smoothscale function\n* Ulf Ekström for his pixel perfect collision detection code\n* Pete Shinners: original author\n* David Clark for filling the right-hand-man position\n* Ed Boraas and Francis Irving: Debian packages\n* Maxim Sobolev: FreeBSD packaging\n* Bob Ippolito: MacOS and OS X porting (much work!)\n* Jan Ekhol, Ray Kelm, and Peter Nicolai: putting up with early design ideas\n* Nat Pryce for starting our unit tests\n* Dan Richter for documentation work\n* TheCorruptor for his incredible logos and graphics\n* Nicholas Dudfield: many test improvements\n* Alex Folkner for pygame-ctypes\n\nThanks to those sending in patches and fixes: Niki Spahiev, Gordon\nTyler, Nathaniel Pryce, Dave Wallace, John Popplewell, Michael Urman,\nAndrew Straw, Michael Hudson, Ole Martin Bjoerndalen, Herve Cauwelier,\nJames Mazer, Lalo Martins, Timothy Stranex, Chad Lester, Matthias\nSpiller, Bo Jangeborg, Dmitry Borisov, Campbell Barton, Diego Essaya,\nEyal Lotem, Regis Desgroppes, Emmanuel Hainry, Randy Kaelber\nMatthew L Daniel, Nirav Patel, Forrest Voight, Charlie Nolan,\nFrankie Robertson, John Krukoff, Lorenz Quack, Nick Irvine,\nMichael George, Saul Spatz, Thomas Ibbotson, Tom Rothamel, Evan Kroske,\nCambell Barton.\n\nAnd our bug hunters above and beyond: Angus, Guillaume Proux, Frank\nRaiser, Austin Henry, Kaweh Kazemi, Arturo Aldama, Mike Mulcheck,\nMichael Benfield, David Lau\n\nThere's many more folks out there who've submitted helpful ideas, kept\nthis project going, and basically made our life easier.  Thanks!\n\nMany thank you's for people making documentation comments, and adding to the\npygame.org wiki.\n\nAlso many thanks for people creating games and putting them on the\npygame.org website for others to learn from and enjoy.\n\nLots of thanks to James Paige for hosting the pygame bugzilla.\n\nAlso a big thanks to Roger Dingledine and the crew at SEUL.ORG for our\nexcellent hosting.\n\nDependencies\n------------\n\nPygame is obviously strongly dependent on SDL and Python.  It also\nlinks to and embeds several other smaller libraries.  The font\nmodule relies on SDL_ttf, which is dependent on freetype.  The mixer\n(and mixer.music) modules depend on SDL_mixer.  The image module\ndepends on SDL_image, which also can use libjpeg and libpng.  The\ntransform module has an embedded version of SDL_rotozoom for its\nown rotozoom function.  The surfarray module requires the Python\nNumPy package for its multidimensional numeric arrays.\nDependency versions:\n\n\n+----------+------------------------+\n| CPython  | >= 3.6 (Or use PyPy3)  |\n+----------+------------------------+\n| SDL      | >= 2.0.8               |\n+----------+------------------------+\n| SDL_mixer| >= 2.0.0               |\n+----------+------------------------+\n| SDL_image| >= 2.0.2               |\n+----------+------------------------+\n| SDL_ttf  | >= 2.0.11              |\n+----------+------------------------+\n| SDL_gfx  | (Optional, vendored in)|\n+----------+------------------------+\n| NumPy    | >= 1.6.2 (Optional)    |\n+----------+------------------------+\n\n\n\nLicense\n-------\n\nThis library is distributed under `GNU LGPL version 2.1`_, which can\nbe found in the file ``docs/LGPL.txt``.  We reserve the right to place\nfuture versions of this library under a different license.\n\nThis basically means you can use pygame in any project you want,\nbut if you make any changes or additions to pygame itself, those\nmust be released with a compatible license (preferably submitted\nback to the pygame project).  Closed source and commercial games are fine.\n\nThe programs in the ``examples`` subdirectory are in the public domain.\n\nSee docs/licenses for licenses of dependencies.\n\n\n.. |AppVeyorBuild| image:: https://ci.appveyor.com/api/projects/status/x4074ybuobsh4myx?svg=true\n   :target: https://ci.appveyor.com/project/pygame/pygame\n\n.. |PyPiVersion| image:: https://img.shields.io/pypi/v/pygame.svg?v=1\n   :target: https://pypi.python.org/pypi/pygame\n\n.. |PyPiLicense| image:: https://img.shields.io/pypi/l/pygame.svg?v=1\n   :target: https://pypi.python.org/pypi/pygame\n\n.. |Python3| image:: https://img.shields.io/badge/python-3-blue.svg?v=1\n\n.. |GithubCommits| image:: https://img.shields.io/github/commits-since/pygame/pygame/2.1.2.svg\n   :target: https://github.com/pygame/pygame/compare/2.1.2...main\n\n.. |BlackFormatBadge| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n\n.. _pygame: https://www.pygame.org\n.. _Simple DirectMedia Layer library: https://www.libsdl.org\n.. _We need your help: https://www.pygame.org/contribute.html\n.. _Compilation wiki page: https://www.pygame.org/wiki/Compilation\n.. _docs page: https://www.pygame.org/docs/\n.. _GNU LGPL version 2.1: https://www.gnu.org/copyleft/lesser.html\n"
        },
        {
          "name": "buildconfig",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.7939453125,
          "content": "[tox:tox]\nenvlist = py{36,37,38,39,310,311,312}\nskip_missing_interpreters = True\nskipsdist = True\n\n[testenv]\ndeps =\n    numpy\nsetenv =\n    SDL_AUDIODRIVER=disk\n    SDL_VIDEODRIVER=dummy\npassenv =\n    PORTMIDI_INC_PORTTIME\ncommands =\n    python -m buildconfig -auto\n    pip install .\n    python -m pygame.tests\n\n[options.entry_points]\npyinstaller40 =\n\thook-dirs = pygame.__pyinstaller:get_hook_dirs\n\n# ignore-words-list is a comma-separated list of lowercase words to be\n#   ignored by codespell.  Typos should be fixed but for instance Mechanim\n#   is the name of a software product so we want codespell to ignore that.\n[codespell]\nskip = ./docs/es/*,./src_c/*,setup.py,*.json\nignore-words-list = ags,ans,appen,datas,fo,likey,mechanim,nd,nin,nnumber,paeth,pevents,rocess,statics,testin\nquiet-level = 35\n\n[isort]\ninclude_trailing_comma = True\nknown_first_party = pygame\nknown_third_party = numpy, distutils, setuptools, sphinx\nline_length = 88\nmulti_line_output = 3\nsrc_paths = src_py\n\n[pylint.MESSAGES CONTROL]\nextension-pkg-whitelist=pygame\nenable=\n    use-symbolic-message-instead,\n\ndisable=\n    attribute-defined-outside-init,\n    broad-except,\n    duplicate-code,\n    empty-docstring,\n    fixme,\n    global-statement,\n    global-variable-undefined,\n    import-error,\n    import-outside-toplevel,\n    invalid-name,\n    missing-docstring,\n    no-member,\n    protected-access,\n    raise-missing-from,\n    redefined-builtin,\n    redefined-outer-name,\n    super-with-arguments,\n    too-few-public-methods,\n    too-many-arguments,\n    too-many-branches,\n    too-many-instance-attributes,\n    too-many-lines,\n    too-many-locals,\n    undefined-all-variable,\n    undefined-variable,\n    unused-import, # False positive because there are no __all__ sometime.\n    useless-object-inheritance,\n    wrong-import-order,\n    wrong-import-position,\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 34.0400390625,
          "content": "#!/usr/bin/env python\n#\n# This is the distutils setup script for pygame.\n# Full instructions are in https://www.pygame.org/wiki/GettingStarted\n#\n# To configure, compile, install, just run this script.\n#     python setup.py install\n\nimport glob\nimport platform\nimport sysconfig\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\nwith open('README.rst', encoding='utf-8') as readme:\n    LONG_DESCRIPTION = readme.read()\n\nEXTRAS = {}\n\nMETADATA = {\n    \"name\": \"pygame\",\n    \"version\": \"2.6.1.dev1\",\n    \"license\": \"LGPL\",\n    \"url\": \"https://www.pygame.org\",\n    \"author\": \"A community project.\",\n    \"author_email\": \"pygame@pygame.org\",\n    \"description\": \"Python Game Development\",\n    \"long_description\": LONG_DESCRIPTION,\n    \"long_description_content_type\": \"text/x-rst\",\n    \"project_urls\": {\n        \"Documentation\": \"https://pygame.org/docs\",\n        \"Bug Tracker\": \"https://github.com/pygame/pygame/issues\",\n        \"Source\": \"https://github.com/pygame/pygame\",\n        \"Twitter\": \"https://twitter.com/pygame_org\",\n    },\n    \"classifiers\": [\n        \"Development Status :: 6 - Mature\",\n        \"License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)\",\n        \"Programming Language :: Assembly\",\n        \"Programming Language :: C\",\n        \"Programming Language :: Cython\",\n        \"Programming Language :: Objective C\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Games/Entertainment\",\n        \"Topic :: Multimedia :: Sound/Audio\",\n        \"Topic :: Multimedia :: Sound/Audio :: MIDI\",\n        \"Topic :: Multimedia :: Sound/Audio :: Players\",\n        \"Topic :: Multimedia :: Graphics\",\n        \"Topic :: Multimedia :: Graphics :: Capture :: Digital Camera\",\n        \"Topic :: Multimedia :: Graphics :: Capture :: Screen Capture\",\n        \"Topic :: Multimedia :: Graphics :: Graphics Conversion\",\n        \"Topic :: Multimedia :: Graphics :: Viewers\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS\",\n    ],\n    \"python_requires\": '>=3.6',\n}\n\nimport re\nimport sys\nimport os\n\n# just import these always and fail early if not present\nfrom setuptools import setup\nimport distutils\n\n\nif os.environ.get('PYGAME_DETECT_AVX2', '') != '':\n    import distutils.ccompiler\n\n    avx2_filenames = ['simd_blitters_avx2']\n\n    compiler_options = {\n        'unix': ('-mavx2',),\n        'msvc': ('/arch:AVX2',)\n    }\n\n    def spawn(self, cmd, **kwargs):\n        should_use_avx2 = False\n        # try to be thorough in detecting that we are on a platform that potentially supports AVX2\n        machine_name = platform.machine()\n        if ((machine_name.startswith((\"x86\", \"i686\")) or\n            machine_name.lower() == \"amd64\") and\n                os.environ.get(\"MAC_ARCH\") != \"arm64\"):\n            should_use_avx2 = True\n\n        if should_use_avx2:\n            extra_options = compiler_options.get(self.compiler_type)\n            if extra_options is not None:\n                # filenames are closer to the end of command line\n                for argument in reversed(cmd):\n                    # Check if argument contains a filename. We must check for all\n                    # possible extensions; checking for target extension is faster.\n                    if not argument.endswith(self.obj_extension):\n                        continue\n\n                    # check for a filename only to avoid building a new string\n                    # with variable extension\n                    for filename in avx2_filenames:\n                        off_end = -len(self.obj_extension)\n                        off_start = -len(filename) + off_end\n                        if argument.endswith(filename, off_start, off_end):\n                            if self.compiler_type == 'bcpp':\n                                # Borland accepts a source file name at the end,\n                                # insert the options before it\n                                cmd[-1:-1] = extra_options\n                            else:\n                                cmd += extra_options\n\n                    # filename is found, no need to search any further\n                    break\n\n        distutils.ccompiler.spawn(cmd, dry_run=self.dry_run, **kwargs)\n\n    distutils.ccompiler.CCompiler.__spawn = distutils.ccompiler.CCompiler.spawn\n    distutils.ccompiler.CCompiler.spawn = spawn\n\n# A (bit hacky) fix for https://github.com/pygame/pygame/issues/2613\n# This is due to the fact that distutils uses command line args to\n# export PyInit_* functions on windows, but those functions are already exported\n# and that is why compiler gives warnings\nfrom distutils.command.build_ext import build_ext\n\nbuild_ext.get_export_symbols = lambda self, ext: []\n\nIS_PYPY = '__pypy__' in sys.builtin_module_names\nIS_MSC = sys.platform == \"win32\" and \"MSC\" in sys.version\n\ndef compilation_help():\n    \"\"\" On failure point people to a web page for help.\n    \"\"\"\n    the_system = platform.system()\n\n    if the_system == 'Linux':\n        distro_name = ''\n        try:\n            import distro\n            distro_name = distro.id()\n        except ImportError:\n            if hasattr(platform, 'linux_distribution'):\n                distro_name = platform.linux_distribution()[0].lower()\n\n        if distro_name != '':\n            distro_mapping = {\n                'ubuntu': 'Ubuntu',\n                'debian': 'Debian',\n                'slackware': 'Slackware',\n                'fedora': 'Fedora',\n            }\n            the_system = distro_mapping.get(distro_name, the_system)\n\n    help_urls = {\n        'Linux': 'https://www.pygame.org/wiki/Compilation',\n        'Ubuntu': 'https://www.pygame.org/wiki/CompileUbuntu',\n        'Windows': 'https://www.pygame.org/wiki/CompileWindows',\n        'Darwin': 'https://www.pygame.org/wiki/MacCompile',\n        'RedHat': 'https://www.pygame.org/wiki/CompileRedHat',\n        'Fedora': 'https://www.pygame.org/wiki/CompileFedora',\n        # TODO There is nothing in the following pages yet\n        'Suse': 'https://www.pygame.org/wiki/CompileSuse',\n        'Python (from pypy.org)': 'https://www.pygame.org/wiki/CompilePyPy',\n        'Free BSD': 'https://www.pygame.org/wiki/CompileFreeBSD',\n        'Debian': 'https://www.pygame.org/wiki/CompileDebian',\n        'Slackware': 'https://www.pygame.org/wiki/CompileSlackware',\n    }\n\n    default = 'https://www.pygame.org/wiki/Compilation'\n    url = help_urls.get(the_system, default)\n\n    if IS_PYPY:\n        url += '\\n    https://www.pygame.org/wiki/CompilePyPy'\n\n    print('\\n---')\n    print('For help with compilation see:')\n    print(f'    {url}')\n    print('To contribute to pygame development see:')\n    print('    https://www.pygame.org/contribute.html')\n    print('---\\n')\n\n\nif not hasattr(sys, 'version_info') or sys.version_info < (3, 6):\n    compilation_help()\n    raise SystemExit(\"Pygame requires Python3 version 3.6 or above.\")\nif IS_PYPY and sys.pypy_version_info < (7,):\n    raise SystemExit(\"Pygame requires PyPy version 7.0.0 above, compatible with CPython >= 3.6\")\n\n\ndef consume_arg(name):\n    if name in sys.argv:\n        sys.argv.remove(name)\n        return True\n    return False\n\n\n# get us to the correct directory\npath = os.path.split(os.path.abspath(sys.argv[0]))[0]\nos.chdir(path)\n\nSTRIPPED = False\n\n# STRIPPED builds don't have developer resources like docs or tests\nif \"PYGAME_ANDROID\" in os.environ:\n    # test cases and docs are useless inside an APK\n    STRIPPED = True\n\nif consume_arg('-stripped'):\n    STRIPPED = True\n\nenable_arm_neon = False\nif consume_arg('-enable-arm-neon'):\n    enable_arm_neon = True\n    cflags = os.environ.get('CFLAGS', '')\n    if cflags:\n        cflags += ' '\n    cflags += '-mfpu=neon'\n    os.environ['CFLAGS'] = cflags\n\ncompile_cython = False\ncython_only = False\nif consume_arg('cython'):\n    compile_cython = True\n\nif consume_arg('cython_only'):\n    compile_cython = True\n    cython_only = True\n\nif not cython_only:\n    # If there is no generated C code, compile the cython/.pyx files\n    if any(x in [\"build_ext\", \"build\", \"sdist\", \"bdist_wheel\", \"install\"] for x in sys.argv) and (\n        not glob.glob(os.path.join(\"src_c\", \"_sdl2\", \"audio.c\"))\n        or not glob.glob(os.path.join(\"src_c\", \"pypm.c\"))\n    ):\n        compile_cython = True\n    else:\n        print (\"Skipping Cython compilation\")\n\nif compile_cython:\n    if \"setup_requires\" not in METADATA:\n        METADATA[\"setup_requires\"] = []\n    # We require Cython if there is no generated source code.\n    METADATA[\"setup_requires\"].append('cython>=3.0')\n\nif compile_cython:\n    print (\"Compiling Cython files\")\n    # compile .pyx files\n    # So you can `setup.py cython` or `setup.py cython install`\n    try:\n        from Cython.Build.Dependencies import cythonize_one\n    except ImportError:\n        print(\"You need cython. https://cython.org/, python -m pip install cython --user\")\n        sys.exit(1)\n\n    from Cython.Build.Dependencies import create_extension_list\n    from Cython.Build.Dependencies import create_dependency_tree\n\n    try:\n        from Cython.Compiler.Main import Context\n        from Cython.Compiler.Options import CompilationOptions, default_options\n\n        c_options = CompilationOptions(default_options)\n        ctx = Context.from_options(c_options)\n    except ImportError:\n        from Cython.Compiler.Main import Context, CompilationOptions, default_options\n\n        c_options = CompilationOptions(default_options)\n        ctx = c_options.create_context()\n\n    pyx_files = glob.glob(os.path.join('src_c', 'cython', 'pygame', '*.pyx')) + \\\n                glob.glob(os.path.join('src_c', 'cython', 'pygame', '**', '*.pyx'))\n\n    pyx_files, pyx_meta = create_extension_list(pyx_files, ctx=ctx)\n    deps = create_dependency_tree(ctx)\n\n    queue = []\n\n    for ext in pyx_files:\n        pyx_file = ext.sources[0]  # TODO: check all sources, extension\n\n        c_file = os.path.splitext(pyx_file)[0].split(os.path.sep)\n        del c_file[1:3]  # output in src_c/\n        c_file = os.path.sep.join(c_file) + '.c'\n\n        # update outdated .c files\n        if os.path.isfile(c_file):\n            c_timestamp = os.path.getmtime(c_file)\n            if c_timestamp < deps.timestamp(pyx_file):\n                dep_timestamp, dep = deps.timestamp(pyx_file), pyx_file\n                priority = 0\n            else:\n                dep_timestamp, dep = deps.newest_dependency(pyx_file)\n                priority = 2 - (dep in deps.immediate_dependencies(pyx_file))\n            if dep_timestamp > c_timestamp:\n                outdated = True\n            else:\n                outdated = False\n        else:\n            outdated = True\n            priority = 0\n        if outdated:\n            print(f'Compiling {pyx_file} because it changed.')\n            queue.append((priority, dict(pyx_file=pyx_file, c_file=c_file, fingerprint=None, quiet=False,\n                                         options=c_options, full_module_name=ext.name,\n                                         embedded_metadata=pyx_meta.get(ext.name))))\n\n    # compile in right order\n    queue.sort(key=lambda a: a[0])\n    queue = [pair[1] for pair in queue]\n\n    count = len(queue)\n    for i, kwargs in enumerate(queue):\n        kwargs['progress'] = f'[{i + 1}/{count}] '\n        cythonize_one(**kwargs)\n\n    if cython_only:\n        sys.exit(0)\n\nno_compilation = 'docs' in sys.argv\nAUTO_CONFIG = not os.path.isfile('Setup') and not no_compilation\nif consume_arg('-auto'):\n    AUTO_CONFIG = True\n\nimport os.path, glob, stat, shutil\nimport distutils.sysconfig\nfrom distutils.core import setup, Command\nfrom distutils.extension import read_setup_file\nfrom distutils.command.install_data import install_data\nfrom distutils.command.sdist import sdist\n\nrevision = ''\n\n\ndef add_datafiles(data_files, dest_dir, pattern):\n    \"\"\"Add directory structures to data files according to a pattern\"\"\"\n    src_dir, elements = pattern\n\n    def do_directory(root_dest_path, root_src_path, elements):\n        files = []\n        for e in elements:\n            if isinstance(e, list):\n                src_dir, elems = e\n                dest_path = '/'.join([root_dest_path, src_dir])\n                src_path = os.path.join(root_src_path, src_dir)\n                do_directory(dest_path, src_path, elems)\n            else:\n                files.extend(glob.glob(os.path.join(root_src_path, e)))\n        if files:\n            data_files.append((root_dest_path, files))\n\n    do_directory(dest_dir, src_dir, elements)\n\n\n# # allow optionally using setuptools for bdist_egg.\n# if consume_arg(\"-setuptools\") in sys.argv:\n#     from setuptools import setup\n#     sys.argv.remove (\"-setuptools\")\n\n# we need to eat this argument in to distutils doesn't trip over it\nconsume_arg(\"-setuptools\")\n\n# NOTE: the bdist_mpkg_support is for darwin.\ntry:\n    import bdist_mpkg_support\nexcept ImportError:\n    pass\nelse:\n    EXTRAS.update({\n        'options': bdist_mpkg_support.options,\n        'setup_requires': ['bdist_mpkg>=0.4.2'],\n        # 'install_requires': ['pyobjc'],\n        # 'dependency_links': ['http://rene.f0o.com/~rene/stuff/macosx/']\n    })\n\n# headers to install\nheaders = glob.glob(os.path.join('src_c', '*.h'))\nheaders.remove(os.path.join('src_c', 'scale.h'))\nheaders.append(os.path.join('src_c', 'include'))\n\nimport distutils.command.install_headers\n\n\n# monkey patch distutils header install to copy over directories\ndef run_install_headers(self):\n    headers = self.distribution.headers\n    if not headers:\n        return\n\n    self.mkpath(self.install_dir)\n    for header in headers:\n        if os.path.isdir(header):\n            destdir = os.path.join(self.install_dir, os.path.basename(header))\n            self.mkpath(destdir)\n            for entry in os.listdir(header):\n                header1 = os.path.join(header, entry)\n                if not os.path.isdir(header1):\n                    (out, _) = self.copy_file(header1, destdir)\n                    self.outfiles.append(out)\n        else:\n            (out, _) = self.copy_file(header, self.install_dir)\n            self.outfiles.append(out)\n\n\ndistutils.command.install_headers.install_headers.run = run_install_headers\n\n# option for not installing the headers.\nif consume_arg(\"-noheaders\"):\n    headers = []\n\n# sanity check for any arguments\nif len(sys.argv) == 1 and sys.stdout.isatty():\n    reply = input('\\nNo Arguments Given, Perform Default Install? [Y/n]')\n    if not reply or reply[0].lower() != 'n':\n        sys.argv.append('install')\n\n# make sure there is a Setup file\nif AUTO_CONFIG:\n    print('\\n\\nWARNING, No \"Setup\" File Exists, Running \"buildconfig/config.py\"')\n    import buildconfig.config\n\n    try:\n        buildconfig.config.main(AUTO_CONFIG)\n    except:\n        compilation_help()\n        raise\n    if '-config' in sys.argv:\n        sys.exit(0)\n    print('\\nContinuing With \"setup.py\"')\n\ntry:\n    s_mtime = os.stat(\"Setup\")[stat.ST_MTIME]\n    sin_mtime = os.stat(os.path.join('buildconfig', 'Setup.SDL2.in'))[stat.ST_MTIME]\n    if sin_mtime > s_mtime:\n        print('\\n\\nWARNING, \"buildconfig/Setup.SDL2.in\" newer than \"Setup\",'\n              'you might need to modify \"Setup\".')\nexcept OSError:\n    pass\n\nif no_compilation:\n    extensions = []\nelse:\n    # get compile info for all extensions\n    try:\n        extensions = read_setup_file('Setup')\n    except:\n        print(\"\"\"Error with the \"Setup\" file,\n    perhaps make a clean copy from \"Setup.in\".\"\"\")\n        compilation_help()\n        raise\n\nfor e in extensions:\n    # Only define the ARM_NEON defines if they have been enabled at build time.\n    if enable_arm_neon:\n        e.define_macros.append(('PG_ENABLE_ARM_NEON', '1'))\n\n    e.extra_compile_args.extend(\n        # some warnings are skipped here\n        (\"/W3\", \"/wd4142\", \"/wd4996\") if IS_MSC else (\"-Wall\", \"-Wno-error=unknown-pragmas\")\n    )\n\n    if \"surface\" in e.name and sys.platform == \"darwin\":\n        # skip -Werror on alphablit because sse2neon is used on arm mac\n        continue\n\n    if \"rwobject\" in e.name and not IS_MSC:\n        # because Py_FileSystemDefaultEncoding is deprecated in 3.12.0a7\n        e.extra_compile_args.append(\"-Wno-error=deprecated-declarations\")\n\n    if \"freetype\" in e.name and sys.platform not in (\"darwin\", \"win32\"):\n        # TODO: fix freetype issues here\n        if sysconfig.get_config_var(\"MAINCC\") != \"clang\":\n            e.extra_compile_args.append(\"-Wno-error=unused-but-set-variable\")\n\n    if \"mask\" in e.name and IS_MSC:\n        # skip analyze warnings that pop up a lot in mask for now. TODO fix\n        e.extra_compile_args.extend((\"/wd6385\", \"/wd6386\"))\n\n    if (\n            \"CI\" in os.environ\n            and not e.name.startswith(\"_sdl2\")\n            and e.name not in (\"pypm\", \"_sprite\", \"gfxdraw\")\n    ):\n        # Do -Werror only on CI, and exclude -Werror on Cython C files and gfxdraw\n        e.extra_compile_args.append(\"/WX\" if IS_MSC else \"-Wundef\")\n\n# if not building font, try replacing with ftfont\nalternate_font = os.path.join('src_py', 'font.py')\nif os.path.exists(alternate_font):\n    os.remove(alternate_font)\n\nhave_font = False\nhave_freetype = False\nfor e in extensions:\n    if e.name == 'font':\n        have_font = True\n    if e.name == '_freetype':\n        have_freetype = True\nif not have_font and have_freetype:\n    shutil.copyfile(os.path.join('src_py', 'ftfont.py'), alternate_font)\n\n# extra files to install\ndata_path = os.path.join(distutils.sysconfig.get_python_lib(), 'pygame')\npygame_data_files = []\ndata_files = [('pygame', pygame_data_files)]\n\n# add *.pyi files into distribution directory\nstub_dir = os.path.join('buildconfig', 'stubs', 'pygame')\npygame_data_files.append(os.path.join(stub_dir, 'py.typed'))\ntype_files = glob.glob(os.path.join(stub_dir, '*.pyi'))\nfor type_file in type_files:\n    pygame_data_files.append(type_file)\n\n_sdl2 = glob.glob(os.path.join(stub_dir, '_sdl2', '*.pyi'))\nif _sdl2:\n    _sdl2_data_files = []\n    data_files.append(('pygame/_sdl2', _sdl2_data_files))\n    for type_file in _sdl2:\n        _sdl2_data_files.append(type_file)\n\n# add non .py files in lib directory\nfor f in glob.glob(os.path.join('src_py', '*')):\n    if not f[-3:] == '.py' and not f[-4:] == '.doc' and os.path.isfile(f):\n        pygame_data_files.append(f)\n\n# We don't need to deploy tests, example code, or docs inside a game\n\n# tests/fixtures\nadd_datafiles(data_files, 'pygame/tests',\n              ['test',\n               [['fixtures',\n                 [['xbm_cursors',\n                   ['*.xbm']],\n                  ['fonts',\n                   ['*.ttf', '*.otf', '*.bdf', '*.png']]]]]])\n\n# examples\nadd_datafiles(data_files, 'pygame/examples',\n              ['examples', ['README.rst', ['data', ['*']]]])\n\n# docs\nadd_datafiles(data_files, 'pygame/docs/generated',\n              ['docs/generated',\n               ['*.html',  # Navigation and help pages\n                '*.txt',  # License text\n                '*.js',  # For doc search\n                'LGPL.txt',  # pygame license\n                ['ref',  # pygame reference\n                 ['*.html',  # Reference pages\n                  '*.js',  # Comments script\n                  '*.json']],  # Comment data\n                ['c_api',  # pygame C API\n                 ['*.html']],\n                ['tut',  # Tutorials\n                 ['*.html',\n                  ['tom',\n                   ['*.html',\n                    '*.png']]]],\n                ['_static',  # Sphinx added support files\n                 ['*.css',\n                  '*.png',\n                  '*.ico',\n                  '*.js',\n                  '*.zip',\n                  '*.svg']],\n                ['_images',  # Sphinx added reST \".. image::\" refs\n                 ['*.jpg',\n                  '*.png',\n                  '*.gif']],\n                ['_sources',  # Used for ref search\n                 ['*.txt',\n                  ['ref',\n                   ['*.txt']]]]]])\n\n\n# generate the version module\ndef parse_version(ver):\n    return ', '.join(s for s in re.findall(r'\\d+', ver)[0:3])\n\n\ndef parse_source_version():\n    pgh_major = -1\n    pgh_minor = -1\n    pgh_patch = -1\n    major_exp_search = re.compile(r'define\\s+PG_MAJOR_VERSION\\s+([0-9]+)').search\n    minor_exp_search = re.compile(r'define\\s+PG_MINOR_VERSION\\s+([0-9]+)').search\n    patch_exp_search = re.compile(r'define\\s+PG_PATCH_VERSION\\s+([0-9]+)').search\n    pg_header = os.path.join('src_c', 'include', '_pygame.h')\n    with open(pg_header) as f:\n        for line in f:\n            if pgh_major == -1:\n                m = major_exp_search(line)\n                if m: pgh_major = int(m.group(1))\n            if pgh_minor == -1:\n                m = minor_exp_search(line)\n                if m: pgh_minor = int(m.group(1))\n            if pgh_patch == -1:\n                m = patch_exp_search(line)\n                if m: pgh_patch = int(m.group(1))\n    if pgh_major == -1:\n        raise SystemExit(\"_pygame.h: cannot find PG_MAJOR_VERSION\")\n    if pgh_minor == -1:\n        raise SystemExit(\"_pygame.h: cannot find PG_MINOR_VERSION\")\n    if pgh_patch == -1:\n        raise SystemExit(\"_pygame.h: cannot find PG_PATCH_VERSION\")\n    return (pgh_major, pgh_minor, pgh_patch)\n\n\ndef write_version_module(pygame_version, revision):\n    vernum = parse_version(pygame_version)\n    src_vernum = parse_source_version()\n    if vernum != ', '.join(str(e) for e in src_vernum):\n        raise SystemExit(\"_pygame.h version differs from 'METADATA' version\"\n                         \": %s vs %s\" % (vernum, src_vernum))\n    with open(os.path.join('buildconfig', 'version.py.in')) as header_file:\n        header = header_file.read()\n    with open(os.path.join('src_py', 'version.py'), 'w') as version_file:\n        version_file.write(header)\n        version_file.write('ver = \"' + pygame_version + '\"  # pylint: disable=invalid-name\\n')\n        version_file.write(f'vernum = PygameVersion({vernum})\\n')\n        version_file.write('rev = \"' + revision + '\"  # pylint: disable=invalid-name\\n')\n        version_file.write('\\n__all__ = [\"SDL\", \"ver\", \"vernum\", \"rev\"]\\n')\n\n\nwrite_version_module(METADATA['version'], revision)\n\n# required. This will be filled if doing a Windows build.\ncmdclass = {}\n\n\ndef add_command(name):\n    def decorator(command):\n        assert issubclass(command, distutils.cmd.Command)\n        cmdclass[name] = command\n        return command\n\n    return decorator\n\n\n# try to find DLLs and copy them too  (only on windows)\nif sys.platform == 'win32' and not 'WIN32_DO_NOT_INCLUDE_DEPS' in os.environ:\n\n    from distutils.command.build_ext import build_ext\n\n    # add dependency DLLs to the project\n    lib_dependencies = {}\n    for e in extensions:\n        if e.name.startswith('COPYLIB_'):\n            lib_dependencies[e.name[8:]] = e.libraries\n\n\n    def dependencies(roots):\n        \"\"\"Return a set of dependencies for the list of library file roots\n\n        The return set is a dictionary keyed on library root name with values of 1.\n        \"\"\"\n\n        root_set = {}\n        for root in roots:\n            try:\n                deps = lib_dependencies[root]\n            except KeyError:\n                pass\n            else:\n                root_set[root] = 1\n                root_set.update(dependencies(deps))\n        return root_set\n\n\n    the_dlls = {}\n    required_dlls = {}\n    for e in extensions:\n        if e.name.startswith('COPYLIB_'):\n            the_dlls[e.name[8:]] = e.library_dirs[0]\n        else:\n            required_dlls.update(dependencies(e.libraries))\n\n    # join the required_dlls and the_dlls keys together.\n    lib_names = {}\n    for lib in list(required_dlls.keys()) + list(the_dlls.keys()):\n        lib_names[lib] = 1\n\n    for lib in lib_names.keys():\n        # next DLL; a distutils bug requires the paths to have Windows separators\n        f = the_dlls[lib].replace('/', os.sep)\n        if f == '_':\n            print(f\"WARNING, DLL for {lib} library not found.\")\n        else:\n            pygame_data_files.append(f)\n\n    if '-enable-msvc-analyze' in sys.argv:\n        # calculate the MSVC compiler version as an int\n        msc_pos = sys.version.find('MSC v.')\n        msc_ver = 1900\n        if msc_pos != -1:\n            msc_ver = int(sys.version[msc_pos + 6:msc_pos + 10])\n        print('Analyzing with MSC_VER =', msc_ver)\n\n        # excluding system headers from analyze out put was only added after MSCV_VER 1913\n        if msc_ver >= 1913:\n            os.environ['CAExcludePath'] = 'C:\\\\Program Files (x86)\\\\'\n\n        for e in extensions:\n            e.extra_compile_args.extend(\n                (\n                    \"/analyze\",\n                    \"/wd28251\",\n                    \"/wd28301\",\n                )\n            )\n\n            if msc_ver >= 1913:\n                e.extra_compile_args.extend(\n                    (\n                        \"/experimental:external\",\n                        \"/external:W0\",\n                        \"/external:env:CAExcludePath\",\n                    )\n                )\n\n\n    def has_flag(compiler, flagname):\n        \"\"\"\n        Adapted from here: https://github.com/pybind/python_example/blob/master/setup.py#L37\n        \"\"\"\n        from distutils.errors import CompileError\n        import tempfile\n        root_drive = os.path.splitdrive(sys.executable)[0] + '\\\\'\n        with tempfile.NamedTemporaryFile('w', suffix='.cpp', delete=False) as f:\n            f.write('int main (int argc, char **argv) { return 0; }')\n            fname = f.name\n        try:\n            compiler.compile([fname], output_dir=root_drive, extra_postargs=[flagname])\n        except CompileError:\n            return False\n        else:\n            try:\n                base_file = os.path.splitext(fname)[0]\n                obj_file = base_file + '.obj'\n                os.remove(obj_file)\n            except OSError:\n                pass\n        finally:\n            try:\n                os.remove(fname)\n            except OSError:\n                pass\n        return True\n\n\n    # filter flags, returns list of accepted flags\n    def flag_filter(compiler, *flags):\n        return [flag for flag in flags if has_flag(compiler, flag)]\n\n\n    if IS_MSC:\n        @add_command('build_ext')\n        class WinBuildExt(build_ext):\n            \"\"\"This build_ext sets necessary environment variables for MinGW\"\"\"\n\n            # __sdl_lib_dir is possible location of msvcrt replacement import\n            # libraries, if they exist. Pygame module base only links to SDL so\n            # should have the SDL library directory as its only -L option.\n            for e in extensions:\n                if e.name == 'base':\n                    __sdl_lib_dir = e.library_dirs[0].replace('/', os.sep)\n                    break\n\n            def build_extensions(self):\n                # Add supported optimisations flags to reduce code size with MSVC\n                opts = flag_filter(self.compiler, \"/GF\", \"/Gy\")\n                for extension in extensions:\n                    extension.extra_compile_args += opts\n\n                build_ext.build_extensions(self)\n\n\n        # Add the precompiled smooth scale MMX functions to transform.\n        def replace_scale_mmx():\n            for e in extensions:\n                if e.name == 'transform':\n                    if '64 bit' in sys.version:\n                        e.extra_objects.append(\n                            os.path.join('buildconfig', 'obj', 'win64', 'scale_mmx.obj'))\n                    else:\n                        e.extra_objects.append(\n                            os.path.join('buildconfig', 'obj', 'win32', 'scale_mmx.obj'))\n                    for i in range(len(e.sources)):\n                        if e.sources[i].endswith('scale_mmx.c'):\n                            del e.sources[i]\n                            return\n\n\n        if not 'ARM64' in sys.version:\n            replace_scale_mmx()\n\n# clean up the list of extensions\nfor e in extensions[:]:\n    if e.name.startswith('COPYLIB_'):\n        extensions.remove(e)  # don't compile the COPYLIBs, just clean them\n    else:\n        e.name = 'pygame.' + e.name  # prepend package name on modules\n\n\n# data installer with improved intelligence over distutils\n# data files are copied into the project directory instead\n# of willy-nilly\n@add_command('install_data')\nclass smart_install_data(install_data):\n    def run(self):\n        # need to change self.install_dir to the actual library dir\n        install_cmd = self.get_finalized_command('install')\n        self.install_dir = getattr(install_cmd, 'install_lib')\n        return install_data.run(self)\n\n\n@add_command('sdist')\nclass OurSdist(sdist):\n    def initialize_options(self):\n        sdist.initialize_options(self)\n        # we do not want MANIFEST.in to appear in the root cluttering up things.\n        self.template = os.path.join('buildconfig', 'MANIFEST.in')\n\n\nif \"bdist_msi\" in sys.argv:\n    # if you are making an msi, we want it to overwrite files\n    # we also want to include the repository revision in the file name\n    from distutils.command import bdist_msi\n    import msilib\n\n\n    @add_command('bdist_msi')\n    class bdist_msi_overwrite_on_install(bdist_msi.bdist_msi):\n        def run(self):\n            bdist_msi.bdist_msi.run(self)\n\n            # Remove obsolete files.\n            comp = \"pygame1\"  # Pygame component\n            prop = comp  # Directory property\n            records = [(\"surfarray.pyd\", comp,\n                        \"SURFAR~1.PYD|surfarray.pyd\", prop, 1),\n                       (\"sndarray.pyd\", comp,\n                        \"SNDARRAY.PYD|sndarray.pyd\", prop, 1),\n                       (\"camera.pyd\", comp, \"CAMERA.PYD|camera.pyd\", prop, 1),\n                       (\"color.py\", comp, \"COLOR.PY|color.py\", prop, 1),\n                       (\"color.pyc\", comp, \"COLOR.PYC|color.pyc\", prop, 1),\n                       (\"color.pyo\", comp, \"COLOR.PYO|color.pyo\", prop, 1)]\n            msilib.add_data(self.db, \"RemoveFile\", records)\n\n            # Overwrite outdated files.\n            fullname = self.distribution.get_fullname()\n            installer_name = self.get_installer_filename(fullname)\n            print(f\"changing {installer_name} to overwrite files on install\")\n            msilib.add_data(self.db, \"Property\", [(\"REINSTALLMODE\", \"amus\")])\n            self.db.Commit()\n\n        def get_installer_filename(self, fullname):\n            if revision:\n                fullname += '-hg_' + revision\n            return bdist_msi.bdist_msi.get_installer_filename(self, fullname)\n\n\n# test command.  For doing 'python setup.py test'\n\n@add_command('test')\nclass TestCommand(Command):\n    user_options = []\n\n    def initialize_options(self):\n        self._dir = os.getcwd()\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        '''\n        runs the tests with default options.\n        '''\n        import subprocess\n        return subprocess.call([sys.executable, os.path.join('test', '__main__.py')])\n\n\n@add_command('docs')\nclass DocsCommand(Command):\n    \"\"\" For building the pygame documentation with `python setup.py docs`.\n    This generates html, and documentation .h header files.\n    \"\"\"\n    user_options = [\n        (\n            'fullgeneration',\n            'f',\n            'Full generation. Do not use a saved environment, always read all files.'\n        )\n    ]\n    boolean_options = ['fullgeneration']\n\n    def initialize_options(self):\n        self._dir = os.getcwd()\n        self.fullgeneration = None\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        '''\n        runs Sphinx to build the docs.\n        '''\n        import subprocess\n        print(\"Using python:\", sys.executable)\n        command_line = [\n            sys.executable, os.path.join('buildconfig', 'makeref.py')\n        ]\n        if self.fullgeneration:\n            command_line.append('full_generation')\n        if subprocess.call(command_line) != 0:\n            raise SystemExit(\"Failed to build documentation\")\n\n\n# Prune empty file lists.\ndata_files = [(path, files) for path, files in data_files if files]\n\n# finally,\n# call distutils with all needed info\nPACKAGEDATA = {\n    \"cmdclass\": cmdclass,\n    \"packages\": ['pygame',\n                 'pygame.threads',\n                 'pygame._sdl2',\n                 'pygame.tests',\n                 'pygame.tests.test_utils',\n                 'pygame.tests.run_tests__tests',\n                 'pygame.tests.run_tests__tests.all_ok',\n                 'pygame.tests.run_tests__tests.failures1',\n                 'pygame.tests.run_tests__tests.incomplete',\n                 'pygame.tests.run_tests__tests.infinite_loop',\n                 'pygame.tests.run_tests__tests.print_stderr',\n                 'pygame.tests.run_tests__tests.print_stdout',\n                 'pygame.tests.run_tests__tests.incomplete_todo',\n                 'pygame.tests.run_tests__tests.exclude',\n                 'pygame.tests.run_tests__tests.timeout',\n                 'pygame.tests.run_tests__tests.everything',\n                 'pygame.docs',\n                 'pygame.examples',\n                 'pygame.__pyinstaller'],\n    \"package_dir\": {'pygame': 'src_py',\n                    'pygame._sdl2': 'src_py/_sdl2',\n                    'pygame.threads': 'src_py/threads',\n                    'pygame.tests': 'test',\n                    'pygame.docs': 'docs',\n                    'pygame.examples': 'examples',\n                    'pygame.__pyinstaller': 'src_py/__pyinstaller'},\n    \"headers\": headers,\n    \"ext_modules\": extensions,\n    \"data_files\": data_files,\n    \"zip_safe\": False,\n}\nif STRIPPED:\n    pygame_data_files = []\n    data_files = [('pygame', [\"src_py/freesansbold.ttf\",\n                              \"src_py/pygame.ico\",\n                              \"src_py/pygame_icon.icns\",\n                              \"src_py/pygame_icon.bmp\",\n                              \"src_py/pygame_icon_mac.bmp\"])]\n\n    PACKAGEDATA = {\n        \"cmdclass\": cmdclass,\n        \"packages\": ['pygame',\n                     'pygame.threads',\n                     'pygame._sdl2'],\n        \"package_dir\": {'pygame': 'src_py',\n                        'pygame._sdl2': 'src_py/_sdl2',\n                        'pygame.threads': 'src_py/threads'},\n        \"ext_modules\": extensions,\n        \"zip_safe\": False,\n        \"data_files\": data_files\n    }\n\nPACKAGEDATA.update(METADATA)\nPACKAGEDATA.update(EXTRAS)\n\ntry:\n    setup(**PACKAGEDATA)\nexcept:\n    compilation_help()\n    raise\n"
        },
        {
          "name": "src_c",
          "type": "tree",
          "content": null
        },
        {
          "name": "src_py",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}