{
  "metadata": {
    "timestamp": 1736710355726,
    "page": 167,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "RPISEC/MBE",
      "stars": 5558,
      "defaultBranch": "master",
      "files": [
        {
          "name": "ACKNOWLEDGEMENTS",
          "type": "blob",
          "size": 0.4130859375,
          "content": "ACKNOWLEDGMENTS / AUTHORS OF MODERN BINARY EXPLOITATION\n\nOriginal Authors\n  * Patrick Biernat\n  * Jeremy Blackthorne\n  * Alexei Bulazel\n  * Branden Clark\n  * Sophia D'Antoine\n  * Markus Gaasedelen\n  * Austin Ralls\n\nSpecial thanks to\n  * The RPI CS Department for giving us this opportunity and letting us run with it\n  * Professor BÃ¼lent Yener for sponsoring such a course\n  * Our students who put up with us all semester\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 0.4091796875,
          "content": "WARZONE CHANGELOG\n--------------------------------------\nv1.1 - September 2015\n-Project 2 was not meant to be suid, this has been fixed\n-Lab 6C should now be be exploitable 100% of the time as intended\n-Lab 6B had a bug fixed that rendered it unsolvable\n-Lab 6A canaries are now properly disabled, as they were in class\n-Lab 8A source now has the '-static' flag to reflect the binary\n\nv1.0 - June 2015\n-Initial release\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.107421875,
          "content": "# RPISEC copyright/license should go here\n\ncmake_minimum_required(VERSION 2.8)\n\nproject(MBE)\nenable_testing()\ninclude_directories(\"./include\")\n\n# Settings\nset(MBE_FLAGS \"-m32 -O0 -fno-inline-functions\")\nset(DISABLE_DEP_FLAG \"-z execstack\")\nset(DISABLE_RELRO_FLAG \"-z norelro\")\nset(DISABLE_CANARY_FLAG \"-fno-stack-protector\")\nset(NO_MITS_FLAGS \"${DISABLE_DEP_FLAG} ${DISABLE_RELRO_FLAG} ${DISABLE_CANARIES_FLAG}\")\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${MBE_FLAGS}\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${MBE_FLAGS}\")\n\n# Handy macro\nMACRO(SUBDIRLIST result curdir)\n  FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)\n  SET(dirlist \"\")\n  FOREACH(child ${children})\n    IF(IS_DIRECTORY ${curdir}/${child})\n        LIST(APPEND dirlist ${child})\n    ENDIF()\n  ENDFOREACH()\n  SET(${result} ${dirlist})\nENDMACRO()\n\nMACRO(SET_FLAGS target flags)\n  SET_TARGET_PROPERTIES(${target} PROPERTIES COMPILE_FLAGS ${flags})\n  SET_TARGET_PROPERTIES(${target} PROPERTIES LINK_FLAGS ${flags})\nENDMACRO()\n\n# Where the files students get will go (install dir)\nset(RELEASE_DIR \"${CMAKE_BINARY_DIR}/release\")\n\n### Build the code ###\nadd_subdirectory(src)\n"
        },
        {
          "name": "ERRATA.md",
          "type": "blob",
          "size": 0.6943359375,
          "content": "This document contains errors found post-publication of the RPISEC MBE lecture\nslides. Please refer to it when reading or presenting the material.\n\nIf you have found an error not listed here, feel free to submit a [github issue](https://github.com/RPISEC/MBE/issues)\nor [contact us](https://github.com/RPISEC/MBE#i-have-a-question-how-can-i-get-in-touch-with-you).\n\n### Lecture 07 - DEP and ROP\n\nI. Slides 17 - 20 \"History of DEP\"\n   - MPROTECT, SEGMEXEC and PAGEEXEC provided by grsecurity for the Linux kernel was released in October 1st, 2000\n\n### Lecture 09 - Address Space Layout Randomization (ASLR)\nI. Slade 27 \"History of ASLR\"\n   - ASLR provided by grsecurity for the Linux kernel was released in 2001\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.1337890625,
          "content": "Build instructions\n\nMake an Ubuntu 14.04 x32 server VM for building/testing.\n\nmkdir ./build && cd ./build\ncmake ../\nmake && make install\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2626953125,
          "content": "Copyright (c) 2015, RPISEC\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list\n   of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list\n   of conditions and the following disclaimer in the documentation and/or other materials\n   provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\nTHE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT\nOF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\nTORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.099609375,
          "content": "# Modern Binary Exploitation - CSCI 4968\nThis repository contains the materials as developed and used by [RPISEC](http://rpis.ec) to\nteach Modern Binary Exploitation at [Rensselaer Polytechnic Institute](http://rpi.edu) in\nSpring 2015. This was a university course developed and run solely by students to teach\nskills in vulnerability research, reverse engineering, and binary exploitation.\n\n<p align=\"center\">\n<img width=\"600px\" src=\"/resources/images/mbe.jpg\" alt=\"MBE\"/>\n</p>\n\n## About the Course\n\nVulnerability research & exploit development is something totally outside the bounds of what\nyou see in a normal computer science curriculum, but central to a lot of what we RPISEC\nmembers find ourselves doing in our free time. We also find that subjects in offensive\nsecurity tend to have a stigma around them in university that we would like to help shake\noff. These are practical, applied skills that we're excited to share with those interested\nin learning.\n\nThe question this course posed was _'Can we teach a bunch of programmers how to pwn?'_\n\n**Course website:** [http://security.cs.rpi.edu/courses/binexp-spring2015/](https://web.archive.org/web/20210710080726/http://security.cs.rpi.edu/courses/binexp-spring2015/)\n\n**Syllabus:** [http://security.cs.rpi.edu/courses/binexp-spring2015/Syllabus.pdf](https://web.archive.org/web/20210413214448/http://security.cs.rpi.edu/courses/binexp-spring2015/Syllabus.pdf)\n\n### Course Abstract\n\n>_Cybersecurity is one of the fastest growing fields in computer science, though its study is rarely covered in academia due to its rapid pace of development and its technical specificity. Modern Binary Exploitation will focus on teaching practical offensive security skills in binary exploitation and reverse engineering. Through a combination of interactive lectures, hands on labs, and guest speakers from industry, the course will offer students a rare opportunity to explore some of the most technically involved and fascinating subjects in the rapidly evolving field of security._\n\n>_The course will start off by covering basic x86 reverse engineering, vulnerability analysis, and classical forms of Linux-based userland binary exploitation. It will then transition into protections found on modern systems (Canaries, DEP, ASLR, RELRO, Fortify Source, etc) and the techniques used to defeat them. Time permitting, the course will also cover other subjects in exploitation including kernel-land and Windows based exploitation._\n\n### Prerequisite Knowledge\nThis course carried a prereq of\n[Computer Organization - CSCI 2500](http://catalog.rpi.edu/preview_course_nopop.php?catoid=10&coid=16571)\nat RPI. Computer Organization is RPI's basic computer architecture course that teaches\nthings like C, MIPS assembly, x86 assembly, Datapaths, CPU Pipelining, CPU Caching,\nMemory Mapping, etc.\n\nOur expected demographic for Modern Binary Exploitation was students with zero reverse\nengineering or binary exploitation knowledge. That said, to be able to take this course\nyou will probably need at least the following skills.\n* Working knowledge of C/C++\n* Any assembly level experience\n* Basic Linux command line experience\n\n### Lecture Breakdown\nLecture | Title | Topics\n------- | ----- | ------\n01 | Syllabus and Review | Linux, C, x86\n02 | Introduction to Reverse Engineering | Tools and the VM\n03 | Extended Reverse Engineering | GDB & IDA\n04 | Intro to Memory Corruption | ELF, the stack, calling conventions, buffer overflows\n05 | Shellcoding / Code Injection | Writing shellcode, developing scenario relevant payloads\n06 | Format String Vulnerabilities | Format strings, DTOR/GOT overwrites\n07 | DEP and ROP | Data Execution Prevention, writing ROP chains, ret2libc\n08 | Secure Systems and Game Console Exploitation | OpenBSD, SELinux, GRSEC, Game Console Exploitation\n09 | Address Space Layout Randomization (ASLR) | Overview, info leaks, partial overwrites, ASLR closure\n10 | Heap Exploitation | Heap structure and concepts, corruption, use after free\n11 | Misc Concepts and Stack Cookies | Signed/unsignedness issues, uninitialized data, etc, bypassing stack cookies\n12 | C++ Differences and Concepts | C++ basics, structures, vTables, exceptions\n13 | Linux Kernel Exploitation | Kernel basics, kernel exploitation, mitigations (mmap_min_addr, kallsyms, SMEP/SMAP), bypassing mitigations\n14 | Exploitation on 64bit, ARM, Windows | Exploitation differences on other architectures & platforms\n15 | Automation & The Future of Exploitation | Fuzzing, taint analysis, dynamic instrumentation, SMT/SAT solvers\n\n*Refer to [ERRATA.md](https://github.com/RPISEC/MBE/blob/master/ERRATA.md) for slide corrections.*\n\n### Lab Breakdown\nLab | Topic | Corresponding Lectures\n--- | ----- | ----------------------\n[01](/src/lab01) | Reverse Engineering | 01-03\n[02](/src/lab02) | Memory Corruption | 04\n[03](/src/lab03) | Shellcoding | 05\n[04](/src/lab04) | Format Strings | 06\n[P1](/src/project1) | Project 1 | 01-06 (Comprehensive)\n[05](/src/lab05) | DEP and ROP | 07\n**XX** | **ASLR should always be enabled from this point on** | **See VM Information for details**\n[06](/src/lab06) | ASLR | 09\n[07](/src/lab07) | Heap | 10\n[08](/src/lab08) | Misc and Stack Cookies | 11\n[09](/src/lab09) | C++ | 12\n[P2](/src/project2) | Project 2 | 01-12 (Comprehensive)\n[10](/src/lab10) | Linux Kernel | 13\n\n### Repository Breakdown\n* [src/](/src) - Source code for labs\n* [setup_wargame.sh](/setup_wargame.sh),[external_tools.sh](/external_tools.sh) - Install scripts to setup MBE on an Ubuntu 14.04 32-bit machine\n* [MBE_release.tar.gz](https://github.com/RPISEC/MBE/releases/download/v1.1_release/MBE_release.tar.gz) - Binaries for labs and projects\n* [MBE_lectures.tar.gz](https://github.com/RPISEC/MBE/releases/download/v1.1_release/MBE_lectures.tar.gz) - PDFs of all lecture slides\n* [MBE_VM.vmdk.gz](https://github.com/RPISEC/MBE/releases/download/v1.1_release/MBE_VM.vmdk.gz) - A vmdk (disk image) of a VM that is already setup\n\n## Labs - The RPISEC Warzone\n\nThe Warzone is a custom wargame that was built from the ground up for this course. It provided\na complete and consistent learning platform for us to release the labs and projects to the\nstudents. The wargame was built ontop of a vanilla Ubuntu 14.04 32-bit server install, and is\nmodeled after existing local privilege escalation themed wargames. If you have ever played\nthe fantastic [IO wargame](https://io.netgarage.org/) (formerly hosted at SmashTheStack), the Warzone has a\nsomewhat similar structure.\n\n<p align=\"center\">\n<img src=\"/resources/images/warzone.png\" alt=\"RPISEC Warzone\"/>\n</p>\n\nSome basic tweaks have been made in an attempt to isolate players from each other and create\nan individual experience, but it's probably far from perfect. It also comes pre-installed with\nsome tools, scripts, and configs that can make a beginner's life a bit easier in exploit\ndevelopment.\n\nYou can roll with the Warzone we designed, or you can try to setup your own using our scripts.\n___\n### Option One - Pre-made Warzone VM\nAs the years pass, compilers will change, security will improve, and the challenges in this\nrepo may no longer be solvable. Because of this, we have created a virtual machine disk image\nthat closely replicates the universal Warzone wargame server we ran for the duration of this\ncourse. The VM has all the tools setup, challenges pre-compiled, and lab accounts ready to go.\nHopefully it will endure the test of time.\n\n#### Virtual Machine Setup\n\nRPISEC is a huge advocate of VMware because of its quality and stability, so we recommend\nusing our disk image below with VMware Workstation, VMware Fusion, or VMware Player. That\nsaid, it should also work with VirtualBox.\n\nVMware provides a great [2 minute video](https://www.youtube.com/watch?v=I6WfFLQwoPg) on how to setup a virtual machine using an existing disk image.\n\n<p align=\"center\">\n<a href=\"https://www.youtube.com/watch?v=I6WfFLQwoPg\"><img src=\"/resources/images/vmware.png\" alt=\"Final\"/></a>\n</p>\n\n1. Download [MBE_VM.vmdk.gz](https://github.com/RPISEC/MBE/releases/download/v1.1_release/MBE_VM.vmdk.gz) from our release page\n2. Extract the archive to obtain the disk image\n3. Using VMware go to `File->New Virtual Machine...` and create a Custom VM\n4. When prompted for `Guest Operating System Installation`, select `I will install the operating system later`\n5. You can use the default options for almost all the prompts you encounter. For specs, we suggest the following:\n  * 1 processor / core\n  * 512 MB of RAM\n  * NAT Networking\n6. When prompted to `Select a Disk`, select `Use an existing virtual disk` and navigate to the .vmdk you extracted\n7. In the end your final screen should look something like this. Click Finish and then power on the VM.\n\n<p align=\"center\">\n<img src=\"/resources/images/final.png\" alt=\"Final\"/>\n</p>\n\n\n#### How to Play\nWe tried to keep the course fairly self contained but if you find yourself lost or struggling [OverTheWire's Bandit](http://overthewire.org/wargames/bandit/) is a great intro to Linux wargames. You can also poke people on [IRC](#contact) if you have questions.\n* SSH is pre-setup on the VM, but we need an IP. First, sign in through the VMWare or VirtualBox console. To find the IP address type:<br>\n  ```$ ip addr```<br>\n  <p align=\"center\">\n  <img src=\"/resources/images/ip_addr.png\" alt=\"ip addr\"/>\n  </p>\n  and then SSH using [PuTTY](http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe) or a command line client<br>\n  <code>$ ssh lab1C@172.16.29.130</code><br>\n  <code>lab1C@172.16.130's password: lab01start</code><br>\n* Navigate to `/levels/labXX` to begin<br>\n  ```$ cd /levels/lab01```\n* The Warzone is structured like any local privilege escalation wargame.\nYou must exploit a challenge to escalate your privileges and gain access to another user (level).\nOnce you exploit a level and escalate to the next user (confirm with `whoami`), read their password from their home dir<br>\n  ```$ cat /home/lab1B/.pass```\n* SSH in using the new username and password to continue!\n\n#### VM information\n* admin user: `gameadmin:gameadmin`\n* lecture user: `lecture:lecture`\n* rc files are in `/etc/cfg`\n  * All lab/project users have symlinks to these files in their home directories\n  * These files are also symlinked in `/etc/skel`\n* To begin a lab, login as `labXC:lab0Xstart`\n  * e.g. `lab1C:lab01start`\n  * Projects are `projectX:projectXstart`\n* Levels are in `/levels`\n* Passwords are in `/home/$USER/.pass`\n* Tools are installed in `/tools` and `/usr/local/bin`\n* **ASLR must be enabled after completing the DEP/ROP lab, and stay enabled for the rest of the course**\n  * Until reboot: ```# echo 2 > /proc/sys/kernel/randomize_va_space```\n  * Persist reboot: ```# echo 'kernel.randomize_va_space = 2' > /etc/sysctl.d/01-disable-aslr.conf```\n\n___\n### Option Two - Make a Custom Warzone\nWe have provided a bash script that will fully setup the exact environment in the provided VM. \n\n**DO NOT RUN THIS SCRIPT ON YOUR PERSONAL COMPUTER, RUN IT IN A VIRTUAL MACHINE**\n\n1. Download [MBE_release.tar.gz](https://github.com/RPISEC/MBE/releases/download/v1.1_release/MBE_release.tar.gz)\n2. Move the archive to your VM or machine and extract it <br>\n  **NOTE: It is not recommended to run the script from /tmp, as the sticky bits can screw up wildcards** <br>\n  ```$ tar xzvf MBE_release.tar.gz```\n3. Modify the configuration variables at the top of [setup_wargame.sh](/setup_wargame.sh) to suit your needs\n4. Make the setup script executable and run it with sudo<br>\n  ```$ chmod +x ./setup_wargame.sh```<br>```$ sudo ./setup_wargame.sh```<br>\nIt should take about 10-20 minutes to complete depending on your internet connection and the\nnumber of Ubuntu updates.\n\n## Frequently Asked Questions\n\n#### Why can't I login to lab1c?\nAccount names are case sensitive, so please check that you're logging in as lab1**C**\n\n#### Why am I getting 'permission denied' errors?\nThe warzone marks many files as immutable to prevent users from changing them and\nruining the game for other players. For example, we don't want the lab2B user to\ndelete its `.pass` file or `/levels` files. A few system files, such as `/etc/passwd`,\nare also marked immutable. \n\nIf you would like to modify or delete these files simply remove the immutable flag\n```bash\nchattr -i filename\n```\nWe recommend that you add the flag back when you are done making your changes\n```bash\nchattr +i filename\n```\n\n#### Where are the lab solutions?\nPosting solutions spoils the fun and grind of the game, and as an academic resource it is\nlikely some of these materials may be re-used by other classes in the future. As goes with\nmost wargames, we would like to ask that you refrain from publicly posting writeups or\nexploits to the labs and projects.\n\nIf you are ever stuck on a problem or have any questions, you're more than welcome to\nask on [IRC](#contact).\n\n#### Why are the lecture slides for XYZ so sparse?\nThis was a very hands on course, so almost every lecture we had students slinging GDB commands\nor following along with us on screen. The slides were accessory to the lectures and may have\ngaps or experience brevity at times. With seven of us creating and giving lectures, the slides\nand teaching styles vary a bit. We did our best to keep them consistent. \n\n#### Do you have videos of the lectures?\nSadly we did not record any of the lectures, maybe next time.\n\n#### Why provide the lab sources to the students?\nWe're huge fans of reversing / CTF challenges, but reversing is mostly a time problem. With\nstudents juggling other classes and work during the school semester, we'd rather them focus on\nlearning the exploitation techniques without the overhead of reversing every binary. \n\n#### These challenges are really easy, what gives?\nThe 50 students that enrolled had little to no prior computer security experience. The labs \nare not designed to be novel CTF challenges, they're meant to be more academic examples paced\nto crystallize the concepts. Seasoned CTF'ers can probably blow through most of these\nchallenges in a day or two. \n\n#### Why didn't you cover subject XYZ?\nIf XYZ is related to vulnerability research, we're all ears. The course is far from perfect\nand we are open to hear any feedback for improving it. \n\n#### Will this course be taught again at RPI?\nThere's a lot of interest in having it offered again, so it's being considered for Spring\n2016. The feedback was almost exclusively positive with the students finding the material\nchallenging, but engaging. We've got dozens of ideas on how to make it even better next time.\n\n#### Where can I learn more?\nPlay more wargames:\n* [SmashTheStack IO](http://io.smashthestack.org/)\n* [Pwnable KR](http://pwnable.kr/)\n* [OverTheWire](http://overthewire.org/wargames/)\n* [Reversing KR](http://reversing.kr/)\n* [W3Challs](http://w3challs.com/)\n\nAnd when they're happening, play [CTFs](https://ctftime.org/)!\n\n#### <a name=\"contact\"></a>I have a question, how can I get in touch with you?\nOur club keeps a pretty active [IRC](http://rpis.ec/irc) presence. Someone there can probably\nanswer your question.\n\n**Server:** `irc.rpis.ec`\n**Port:** `6667`, or `6697` (SSL)\n\n\nIf you would like a more formal means of communication, you can reach us at `contact [at] rpis.ec`\n\n\n# Licensing\nThis course was explicitly designed for academic & educational use only. Please keep this\nin mind when sharing and distributing our course material. The specific licenses involved\ncan be found below.\n\n**Lecture Slides**\n\nThe lectures are covered by the Creative Commons Attribution-NonCommercial 4.0\nInternational license [CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/legalcode).\n<p align=\"center\">\n<a href=\"https://creativecommons.org/licenses/by-nc/4.0/\"><img src=\"/resources/images/cc-by-nc.png\" alt=\"CC BY-NC 4.0\"/></a>\n</p>\n\n**Code**\n\nThe code in this repo is covered by the BSD 2-Clause license. You can view this license in [LICENSE](/LICENSE).\n\n# Acknowledgements\nHundreds of hours and countless all nighters went into the production and execution of\nthis course. This section serves to recognize those who made all of this possible.\n\n## Original Authors\n  * Patrick Biernat\n  * Jeremy Blackthorne\n  * Alexei Bulazel\n  * Branden Clark\n  * Sophia D'Antoine\n  * Markus Gaasedelen\n  * Austin Ralls\n\n## Special Thanks\n  * The [RPI CS Department](http://www.cs.rpi.edu/) for giving us this opportunity and letting us run with it\n  * Professor BÃ¼lent Yener for sponsoring such a course\n  * Our students who put up with us all semester\n"
        },
        {
          "name": "external_tools.sh",
          "type": "blob",
          "size": 2.458984375,
          "content": "#!/bin/bash\n\n#########################################\n#           Install Tools\n#########################################\n\n# install pip packages\nfunction install_pip2s {\n  easy_install -U pip requests\n  pip2 install colorama git+https://github.com/Gallopsled/pwntools#egg=pwntools docopt capstone ropgadget libformatstr xortool\n  # capstone is weird\n  cp /usr/local/lib/python2.7/dist-packages/usr/lib/python2.7/dist-packages/capstone/libcapstone.so /usr/lib/libcapstone.so.3\n  # patch pwntools in a terrible way\n  if [ `uname -i` == 'i686' ]; then\n      sed -i 's/platform\\.machine()/\"i386\"/' /usr/local/lib/python2.7/dist-packages/pwnlib/asm.py\n  fi\n}\nexport -f install_pip2s\n\n# setup gdb PEDA\nfunction install_gdb_peda {\n  OPWD=$PWD\n  # remove gdb if it exists on this system\n  apt-get remove -y gdb\n\n  # grab gdb\n  cd /tmp\n  wget -O gdb.pkg.tar.xz http://ftp.gnu.org/gnu/gdb/gdb-7.9.tar.xz\n  tar -Jxf gdb.pkg.tar.xz\n\n  # compile gdb\n  cd gdb-*\n  ./configure --with-python=python2 --prefix=/usr\n  make\n  make install\n  cp -R gdb/data-directory/python /usr/share/gdb\n\n  # remove gdb\n  cd ..\n  rm -rf gdb*\n  echo \"gdb hold\" | dpkg --set-selections\n  echo \"[+] Installed gdb with python2!\"\n\n  cd $TOOLS_DIR\n  git clone https://github.com/longld/peda.git $TOOLS_DIR/peda\n  mkdir -p $SKEL_LINK_DIR\n  touch $GDBINIT\n  echo \"source $TOOLS_DIR/peda/peda.py\" >> $GDBINIT\n  echo \"[+] Installed gdb PEDA!\"\n  cd $OPWD\n}\nexport -f install_gdb_peda\n\n# setup checksec\nfunction install_checksec {\n  OPWD=$PWD\n  cd /usr/local/bin\n  wget https://github.com/slimm609/checksec.sh/raw/master/checksec -O checksec\n  chmod +x checksec\n  echo \"[+] Installed checksec!\"\n  cd $OPWD\n}\nexport -f install_checksec\n\n# setup radare2\nfunction install_radare2 {\n  OPWD=$PWD\n  cd $TOOLS_DIR\n  sudo -u $REALUSER git clone https://github.com/radare/radare2.git\n  cd radare2\n  sudo -u $REALUSER ./sys/install.sh\n  echo \"[+] Installed radare2!\"\n  cd $OPWD\n}\nexport -f install_radare2\n\n# setup fixenv\nfunction install_fixenv {\n  OPWD=$PWD\n  cd /tmp\n  git clone https://github.com/hellman/fixenv.git\n  mv ./fixenv/r.sh /usr/local/bin/fixenv\n  chmod +x /usr/local/bin/fixenv\n  rm -rf /tmp/fixenv\n  echo \"[+] Installed fixenv!\"\n  cd $OPWD\n}\nexport -f install_fixenv\n\n# setup shtest\nfunction install_shtest {\n  OPWD=$PWD\n  cd /tmp\n  git clone https://github.com/hellman/shtest.git\n  cd shtest\n  gcc -Wall -m32 shtest.c -o shtest\n  mv shtest /usr/local/bin/shtest\n  cd ..\n  rm -rf shtest\n  echo \"[+] Installed shtest!\"\n  cd $OPWD\n}\nexport -f install_shtest\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup_wargame.sh",
          "type": "blob",
          "size": 15.8642578125,
          "content": "#!/bin/bash\n\n#########################################\n#          Pre-install checks\n#########################################\n\n# Warn the user about running this on their host machine\n# (because it makes various invasive settings-changes, and runs a ton of vulnerable services)\necho -e \"\\x1b[31;1mDON'T RUN THIS ON YOUR REAL COMPUTER\\x1b[0m\"\necho \"Are you running this inside a VM? (If you don't know what that means, don't run the script.)\"\nread -p \"(yes/no)> \"\nif [ \"$REPLY\" != 'yes' ]; then\n    exit\nfi\n\nif [ \"$USER\" != 'root' ]; then\n    echo \"ERROR: Script must be run using root!\"\n    exit\nfi\n\necho -e \"\\x1b[32;1mProceeding with the installation.\\x1b[0m\"\n\n#########################################\n#     Per-Machine Install Variables\n#########################################\n\n# change these things\nexport PUBKEY=\"\"\nexport REALUSER='gameadmin'\nexport HOSTNAME='warzone'\nexport LEVELS_DIR='/levels'\nexport SKEL_DIR='/etc/skel'\nexport SKEL_LINK_DIR='/etc/cfg'\nexport TOOLS_DIR='/tools'\nexport TOOLOWNER='toolman'\n\n# leave as is\nexport VIMRC=$(echo $SKEL_LINK_DIR/.vimrc)\nexport SCREENRC=$(echo $SKEL_LINK_DIR/.screenrc)\nexport BASHRC=$(echo $SKEL_LINK_DIR/.bashrc)\nexport PROFILE=$(echo $SKEL_LINK_DIR/.profile)\nexport GDBINIT=$(echo $SKEL_LINK_DIR/.gdbinit)\nexport R2CONF=$(echo $SKEL_LINK_DIR/.radare2rc)\n\n#########################################\n#             Basic Setup\n#########################################\n\n# hush login motd\ntouch .hushlogin\n\n# update and apt-get a ton of stuff\napt-get update\napt-get -y upgrade\napt-get -y install unattended-upgrades htop fonts-inconsolata git gdb gcc gcc-multilib g++ g++-multilib git ltrace linux-source openssh-server python-pip ipython python-dev vim guile-2.0 unzip socat libncurses5-dev texinfo\nsudo dpkg-reconfigure -plow unattended-upgrades\n\n# Create main user\nuseradd -m -s /bin/bash $REALUSER\nadduser $REALUSER sudo\n\n# install ssh key\nHOME_DIR=$(eval echo ~$REALUSER)\nsudo -u $REALUSER mkdir $HOME_DIR/.ssh\nchmod 700 $HOME_DIR/.ssh\nsudo -u $REALUSER echo $PUBKEY > $HOME_DIR/.ssh/authorized_keys\nchmod 600 $HOME_DIR/.ssh/authorized_keys\nchown $REALUSER:$REALUSER $HOME_DIR/.ssh/authorized_keys\nrestart ssh\n\n# set perms\nchmod 0700 $HOME_DIR\n\n# set hostname\nold_hostname=$(cat /etc/hostname)\nhostname \"$HOSTNAME\"\ncat /etc/hosts | sed s/\"$old_hostname\"/\"$HOSTNAME\"/ > /tmp/newhosts\nmv /tmp/newhosts /etc/hosts\necho \"$HOSTNAME\" > /etc/hostname\n\n#########################################\n#    Configure Wargame Environment\n#########################################\n\n# hardening / wargamification\n\n# restricting access mostly means make root accessible only, chmod 700 or s/t\nchmod 700 `which dmesg`\nchmod 700 `which fuser`\nchmod 700 `which htop`\nchmod 700 `which kill`\nchmod 700 `which killall`\nchmod 700 `which lsof`\nchmod 700 `which pgrep`\nchmod 700 `which pkill`\nchmod 700 `which ps`\nchmod 700 `which screen`\nchmod 700 `which su`\nchmod 700 `which tmux`\nchmod 700 `which top`\nchmod 700 `which ulimit`\nchmod 700 `which users`\nchmod 700 `which w`\nchmod 700 `which wall`\nchmod 700 `which who`\nchmod 700 `which write`\n\n# restrict access to /proc/maps/\nsed -i 's/^exit 0$//' /etc/rc.local\necho -e 'mount -o remount,hidepid=2 /proc\\n' >> /etc/rc.local\nmount -o remount,hidepid=2 /proc\nchmod 551 /proc\n\n# make /tmp be not world readable, have sticky bits\nchmod 1773 /tmp\n\n# disable ssh'ing ? (not sure if possible, but these make it harder)\niptables -A OUTPUT -p tcp --dport 22 -j DROP\nchmod 700 `which ssh`\n\n# disable aslr\necho 0 | tee /proc/sys/kernel/randomize_va_space\necho 'kernel.randomize_va_space = 0' > /etc/sysctl.d/01-disable-aslr.conf\n\n# resource management, stop forkbombs and filling the server (nproclimit)\n# make group for wargame users\ngroupadd gameuser\necho -e '@gameuser\\thard\\tnproc\\t500' >> /etc/security/limits.conf\necho -e '@gameuser\\t-\\tpriority\\t15' >> /etc/security/limits.conf\n\n# on-login banner\nchmod -x /etc/update-motd.d/*\necho -e '#!/bin/sh\\ncat /etc/banner' > /etc/update-motd.d/00-banner\nchmod +x /etc/update-motd.d/00-banner\necho 'G1swOzMxbSAgICAgICAgX19fX19fX19fX19fX19fX19fX18uX19fICBfX19fX19fX19fX19fX19f\nX19fX19fX19fX19fXyAgICAgICAgICAgICAgICANCiAgICAgICAgXF9fX19fXyAgIFxfX19fX18g\nICBcICAgfC8gICBfX19fXy9cXyAgIF9fX19fL1xfICAgX19fIFwgICAgICAgICAgICAgICANCiAg\nICAgICAgIHwgICAgICAgXy98ICAgICBfX18vICAgfFxfX19fXyAgXCAgfCAgICBfXylfIC8gICAg\nXCAgXC8gICAgICAgICAgICAgICANCiAgICAgICAgIHwgICAgfCAgIFx8ICAgIHwgICB8ICAgfC8g\nICAgICAgIFwgfCAgICAgICAgXFwgICAgIFxfX19fICAgICAgICAgICAgICANCiAgICAgICAgIHxf\nX19ffF8gIC98X19fX3wgICB8X19fL19fX19fX18gIC8vX19fX19fXyAgLyBcX19fX19fICAvICAg\nICAgICAgICAgICANCiAgICAgICAgICAgICAgICBcLyAgICAgICAgICAgICAgICAgICAgICBcLyAg\nICAgICAgIFwvICAgICAgICAgXC8gICAgICAgICAgICAgICANChtbMDszNm0gX18gICAgICBfXyAg\nX19fX18gX19fX19fX19fX19fX19fX19fX19fX19fX19fXyAgICBfX19fX19fICBfX19fX19fX19f\nXw0KLyAgXCAgICAvICBcLyAgXyAgXFxfX19fX18gICBcX19fXyAgICAvXF9fX19fICBcICAgXCAg\nICAgIFwgXF8gICBfX19fXy8NClwgICBcL1wvICAgLyAgL19cICBcfCAgICAgICBfLyAvICAgICAv\nICAvICAgfCAgIFwgIC8gICB8ICAgXCB8ICAgIF9fKV8gDQogXCAgICAgICAgLyAgICB8ICAgIFwg\nICAgfCAgIFwvICAgICAvXyAvICAgIHwgICAgXC8gICAgfCAgICBcfCAgICAgICAgXA0KICBcX18v\nXCAgL1xfX19ffF9fICAvX19fX3xfICAvX19fX19fXyBcXF9fX19fX18gIC9cX19fX3xfXyAgL19f\nX19fX18gIC8NCiAgICAgICBcLyAgICAgICAgIFwvICAgICAgIFwvICAgICAgICBcLyAgICAgICAg\nXC8gICAgICAgICBcLyAgICAgICAgXC8gDQoNChtbMG0gICAgICAgIC0tLS0tLS0tLS0tLS0tLS0t\nLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAgICAgICANCg0KICAgICAg\nICAgICAgICAgICAgICAgICBDaGFsbGVuZ2VzIGFyZSBpbiAvbGV2ZWxzICAgICAgICAgICAgICAg\nICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgUGFzc3dvcmRzIGFyZSBpbiAvaG9tZS9sYWIq\nLy5wYXNzICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIFlvdSBjYW4gY3JlYXRlIGZp\nbGVzIG9yIHdvcmsgZGlyZWN0b3JpZXMgaW4gL3RtcCAgICAgICAgICAgIA0KICAgICAgICAgICAg\nICAgICAgICANCiAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tWyAbWzA7OTJtY29udGFjdEBycGlz\nLmVjG1swbSBdLS0tLS0tLS0tLS0tLS0tLS0gICAgICAgICAgDQoNCg==' | base64 -d > /etc/banner\nrm /etc/legal\n\n# disable crontab\ntouch /etc/cron.allow\n\n#more I'm sure\n\n#########################################\n#           Install Tools\n#########################################\n\n# make tools owner\nuseradd -M -s /bin/false $TOOLOWNER\n\n# make tools dir\nmkdir $TOOLS_DIR\nchmod 777 $TOOLS_DIR\n\nsource ./external_tools.sh\ninstall_pip2s\ninstall_gdb_peda\ninstall_checksec\ninstall_radare2\ninstall_fixenv\ninstall_shtest\n\n# set perms\nchown -R $TOOLOWNER:$TOOLOWNER $TOOLS_DIR/*\nchmod 775 $TOOLS_DIR\n\n#########################################\n#       Create Skeleton User\n#########################################\n\n# this should populate the skel folder with symlinks. That way any user we make later on the\n# server will auto copy these settings, and they will be in a single location for editing.\nexport SKEL=$SKEL_DIR\nmkdir $SKEL_LINK_DIR\n\n# setup vim config\ntouch $VIMRC\n(echo syntax on \\\n; echo set tabstop=4 softtabstop=4 shiftwidth=4 \\\n; echo set expandtab ai number ruler \\\n; echo highlight Comment ctermfg=green \\\n; echo set viminfo=) >> $VIMRC\necho \"[+] Configured VIM!\"\n\n# setup .bashrc\ncp $SKEL_DIR/.bashrc $BASHRC\n(echo -e \"\\n# Start user config\" \\\n; echo \"export TERM=screen-256color\" \\\n; echo \"export PS1='\\[\\033[01;31m\\]\\u\\[\\033[00;37m\\]@\\[\\033[01;32m\\]\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ '\" \\\n; echo \"export ENV='/etc/profile'\" \\\n; echo \"alias grep='grep --color=auto'\" \\\n; echo \"alias ls='ls --color=auto -l'\" \\\n; echo \"alias checksec='checksec --file'\" \\\n; echo \"alias ropgadget='ROPgadget --binary'\" \\\n; echo \"alias gdb='gdb -q'\") >> $BASHRC\necho \"[+] Configured bash!\"\n\n# setup .profile\ncp $SKEL_DIR/.profile $PROFILE\necho \"[+] Configured profile!\"\n\n# setup .gdbinit\n(echo -e \"\\nset disassembly-flavor intel\" \\\n; echo \"set detach-on-fork off\" \\\n; echo \"set follow-fork-mode child\") >> $GDBINIT\necho \"[+] Configured gdb!\"\n\n# setup radare2 config\necho 'e scr.utf8 = true' > $R2CONF\nmkdir -p $SKEL_LINK_DIR/.config/radare2\nln -s /dev/null $SKEL_LINK_DIR/.config/radare2/history\n\n# make sure the admin user gets these pretty confs, too\ncp $SKEL_LINK_DIR/.* /home/$REALUSER/\nchown -R $REALUSER:$REALUSER $(eval echo ~$REALUSER)\n\n# start fresh and add symlinks\nrm -rf $SKEL_DIR\nmkdir $SKEL_DIR\nln -s $VIMRC $SKEL_DIR/.vimrc\nln -s $BASHRC $SKEL_DIR/.bashrc\nln -s $PROFILE $SKEL_DIR/.profile\nln -s $GDBINIT $SKEL_DIR/.gdbinit\nln -s $R2CONF $SKEL_DIR/.radare2rc\nln -s $SKEL_LINK_DIR/.config $SKEL_DIR/.config\n\n# disable bash history\nln -s /dev/null $SKEL_DIR/.bash_history\nchattr -fR +i $SKEL_LINK_DIR\n\n#########################################\n#             Setup wargame\n#########################################\n\nfunction setup_level {\n  if [ \"$#\" -ne 7 ]; then\n      echo \"ERROR: Missing arguments\"\n      exit\n  fi\n  # rename arguments\n  username=$1\n  next_level=$2\n  next_password=$3\n  level_subdir=$4\n  local level_files=(\"${!5}\")\n  local level_owners=(\"${!6}\")\n  local level_perms=(\"${!7}\")\n\n  # unchattr passwd\n  chattr -f -i /etc/passwd\n  chattr -f -i /etc/shadow\n\n  # make current level user\n  user_home=$(eval echo ~$username)\n  id -u $username &> /dev/null; uexist=$?;\n  if [ \"$uexist\" -eq \"1\" ]; then\n      useradd -m -s /bin/bash -G gameuser $username\n      user_home=$(eval echo ~$username)\n      echo $username:$([ -f $user_home/.pass ] && cat $user_home/.pass \\\n                       || echo $level_subdir\"start\") | chpasswd\n  fi\n  # make next level user\n  next_home=$(eval echo ~$next_level)\n  id -u $next_level &> /dev/null; uexist=$?;\n  if [ \"$uexist\" -eq \"1\" ]; then\n      useradd -m -s /bin/bash -G gameuser $next_level\n      next_home=$(eval echo ~$next_level)\n      echo $next_level:$next_password | chpasswd\n      echo $next_password > $next_home/.pass\n      chown $next_level:$next_level $next_home/.pass\n      chmod 0400 $next_home/.pass\n  fi\n  # make sure everything is unchattr'd\n  chattr -fR -i $user_home\n  chattr -fR -i $next_home\n  chattr -fR -i $LEVELS_DIR\n\n  # add the levels and perms\n  llen=${#level_files[@]}\n  for (( i=0; i<${llen}; i++ )); do\n      chown ${level_owners[$i]} $LEVELS_DIR/$level_subdir/${level_files[$i]}\n      chmod ${level_perms[$i]} $LEVELS_DIR/$level_subdir/${level_files[$i]}\n  done\n\n  # re-chattr levels/directories\n  chattr -fR +i $user_home\n  chattr -fR +i $next_home\n  chattr -fR +i $LEVELS_DIR\n\n  # re-chattr passwd\n  chattr -f +i /etc/passwd\n  chattr -f +i /etc/shadow\n}\n\nfunction add_simple_level {\n    local level_files=(\"$1\" \"$1.c\")\n    local level_owners=(\"$2:$1\" \"$1:$1\")\n    local level_perms=(\"4550\" \"0400\")\n    setup_level $1 $2 $3 $4 level_files[@] level_owners[@] level_perms[@]\n}\n\nfunction add_socat_on_start {\n    # $1 = working directory\n    # $2 = exec cmd\n    # $3 = listen part\n    # $4 = user to run exec as\n    echo -e \"cd $1\\nsocat TCP-LISTEN:$3,reuseaddr,fork,su=$4 EXEC:\\\"$2\\\" &\" >> /etc/rc.local\n}\n\n# Stick levels folder where it belongs\nmkdir $LEVELS_DIR\nif [ -d \"./levels\" ]\nthen\n    cp -R ./levels/* $LEVELS_DIR\nelse\n    echo \"ERROR: ./levels not found\"\n    exit\nfi\n\n# Add LICENSE and ACKNOWLEDGEMENTS\ncp LICENSE $LEVELS_DIR/LICENSE\ncp LICENSE $LEVELS_DIR/CHANGELOG\ncp ACKNOWLEDGEMENTS $LEVELS_DIR/ACKNOWLEDGEMENTS\nchmod 444 $LEVELS_DIR/ACKNOWLEDGEMENTS\nchmod 444 $LEVELS_DIR/CHANGELOG\nchmod 444 $LEVELS_DIR/LICENSE\n\n# Add lab01\n# Will throw some errors since no source file, but w/e\nlab=lab1\nadd_simple_level $lab'C' $lab'B' 'n0_str1ngs_n0_pr0bl3m' lab01\nadd_simple_level $lab'B' $lab'A' '1337_3nCRyptI0n_br0' lab01\nadd_simple_level $lab'A' $lab'end' '1uCKy_Gue55' lab01\n\n# Add lab02\nlab=lab2\nadd_simple_level $lab'C' $lab'B' '1m_all_ab0ut_d4t_b33f' lab02\nadd_simple_level $lab'B' $lab'A' 'i_c4ll_wh4t_i_w4nt_n00b' lab02\nadd_simple_level $lab'A' $lab'end' 'D1d_y0u_enj0y_y0ur_cats?' lab02\n\n# Add lab03\nlab=lab3\nadd_simple_level $lab'C' $lab'B' 'th3r3_iz_n0_4dm1ns_0n1y_U!' lab03\nadd_simple_level $lab'B' $lab'A' 'wh0_n33ds_5h3ll3_wh3n_U_h4z_s4nd' lab03\nadd_simple_level $lab'A' $lab'end' 'sw00g1ty_sw4p_h0w_ab0ut_d3m_h0ps' lab03\n\n# Add lab04\nlab=lab4\nadd_simple_level $lab'C' $lab'B' 'bu7_1t_w4sn7_brUt3_f0rc34b1e!' lab04\nadd_simple_level $lab'B' $lab'A' 'fg3ts_d0e5n7_m4k3_y0u_1nv1nc1bl3' lab04\nadd_simple_level $lab'A' $lab'end' '1t_w4s_ju5t_4_w4rn1ng' lab04\n\n# Add lab05\nlab=lab5\nadd_simple_level $lab'C' $lab'B' 's0m3tim3s_r3t2libC_1s_3n0ugh' lab05\nadd_simple_level $lab'B' $lab'A' 'th4ts_th3_r0p_i_lik3_2_s33' lab05\nadd_simple_level $lab'A' $lab'end' 'byp4ss1ng_d3p_1s_c00l_am1rite' lab05\n\n# Add lab06\nlab=lab6\nadd_simple_level $lab'C' $lab'B' 'p4rti4l_0verwr1tes_r_3nuff' lab06\nlevel_files=($lab'B' $lab'B.c' $lab'B.readme')\nlevel_owners=($lab'A:'$lab'B' $lab'B:'$lab'B' $lab'B:'$lab'B')\nlevel_perms=('0550' '0400' '0400')\nsetup_level $lab'B' $lab'A' 'strncpy_1s_n0t_s0_s4f3_l0l' lab06 level_files[@] level_owners[@] level_perms[@]\nadd_socat_on_start \"$LEVELS_DIR/lab06\" \"timeout 300 $LEVELS_DIR/lab06/lab6B\" 6642 $lab'A'\nadd_simple_level $lab'A' $lab'end' 'eye_gu3ss_0n_@ll_mah_h0m3w3rk' lab06\n\n# Add lab07\nlab=lab7\nadd_simple_level $lab'C' $lab'A' 'us3_4ft3r_fr33s_4re_s1ck' lab07\nlevel_files=($lab'A' $lab'A.c' $lab'A.readme')\nlevel_owners=($lab'end:'$lab'A' $lab'A:'$lab'A' $lab'A:'$lab'A')\nlevel_perms=('0550' '0400' '0400')\nsetup_level $lab'A' $lab'end' '0verfl0wz_0n_th3_h3ap_4int_s0_bad' lab07 level_files[@] level_owners[@] level_perms[@]\nadd_socat_on_start \"$LEVELS_DIR/lab07\" \"timeout 60 $LEVELS_DIR/lab07/lab7A\" 7741 $lab'end'\n\n# Add lab08\nlab=lab8\nadd_simple_level $lab'C' $lab'B' '3v3ryth1ng_Is_@_F1l3' lab08\nadd_simple_level $lab'B' $lab'A' 'Th@t_w@5_my_f@v0r1t3_ch@11' lab08\nlevel_files=($lab'A' $lab'A.c' $lab'A.readme')\nlevel_owners=($lab'end:'$lab'A' $lab'A:'$lab'A' $lab'A:'$lab'A')\nlevel_perms=('0550' '0400' '0400')\nsetup_level $lab'A' $lab'end' 'H4x0r5_d0nt_N33d_m3t4pHYS1c5' lab08 level_files[@] level_owners[@] level_perms[@]\nadd_socat_on_start \"$LEVELS_DIR/lab08\" \"timeout 60 $LEVELS_DIR/lab08/lab8A\" 8841 $lab'end'\n\n# Add lab09 (cpp and networked)\nlab=lab9\nlevel_files=($lab'C' $lab'C.cpp' $lab'C.readme')\nlevel_owners=($lab'A:'$lab'C' $lab'C:'$lab'C' $lab'C:'$lab'C')\nlevel_perms=('0550' '0400' '0400')\nsetup_level $lab'C' $lab'A' '1_th0uGht_th4t_w4rn1ng_wa5_l4m3' lab09 level_files[@] level_owners[@] level_perms[@]\nadd_socat_on_start \"$LEVELS_DIR/lab09\" \"timeout 60 $LEVELS_DIR/lab09/lab9C\" 9943 $lab'A'\nlevel_files=($lab'A' $lab'A.cpp' $lab'A.readme')\nlevel_owners=($lab'end:'$lab'A' $lab'A:'$lab'A' $lab'A:'$lab'A')\nlevel_perms=('0550' '0400' '0400')\nsetup_level $lab'A' $lab'end' '1_d1dNt_3v3n_n33d_4_Hilti_DD350' lab09 level_files[@] level_owners[@] level_perms[@]\nadd_socat_on_start \"$LEVELS_DIR/lab09\" \"timeout 300 $LEVELS_DIR/lab09/lab9A\" 9941 $lab'end'\n\n# Add project1\nlab=project1\nlevel_files=('tw33tchainz' 'README')\nlevel_owners=($lab'_priv:'$lab $lab':'$lab)\nlevel_perms=('4550' '0400')\nsetup_level $lab $lab'_priv' 'm0_tw33ts_m0_ch4inz_n0_m0n3y' $lab level_files[@] level_owners[@] level_perms[@]\n\n# Add project2\nlab=project2\nlevel_files=('rpisec_nuke' 'README' 'GENERAL_CROWELL.key' 'GENERAL_DOOM.key' 'GENERAL_HOTZ.key')\nlevel_owners=($lab'_priv:'$lab $lab':'$lab $lab'_priv:'$lab $lab'_priv:'$lab $lab'_priv:'$lab)\nlevel_perms=('0550' '0400' '0400' '0400' '0400')\nsetup_level $lab $lab'_priv' 'th3_pr1nt_funct10n_w4s_100_l!n3s_al0ne' $lab level_files[@] level_owners[@] level_perms[@]\nadd_socat_on_start \"$LEVELS_DIR/project2\" \"timeout 300 $LEVELS_DIR/project2/rpisec_nuke\" 31337 $lab'_priv'\n\n# Add lecture examples\nlecuser=lecture\nlecpriv=lecture_priv\n## Make users\nchattr -fR -i /etc/passwd\nchattr -fR -i /etc/shadow\nuseradd -m -s /bin/bash -G gameuser $lecuser\necho $lecuser':'$lecuser | chpasswd\nuseradd -m -s /bin/bash -G gameuser $lecpriv\npasswd -l $lecpriv\nchattr -fR +i $(eval echo ~$lecuser)\nchattr -fR +i $(eval echo ~$lecpriv)\nchattr -fR +i /etc/passwd\nchattr -fR +i /etc/shadow\n## Set permissions\nchattr -fR -i $LEVELS_DIR\nfind /levels/lecture -type f | xargs -I {} chown $lecpriv:$lecuser {} {}\nfind /levels/lecture -type f | xargs -I {} chmod 4550 {} {}\nfind /levels/lecture -type f -name '*.c*' | xargs -I {} chown $lecuser:$lecuser {} {}\nfind /levels/lecture -type f -name '*.c*' | xargs -I {} chmod 0400 {} {}\nchattr -fR +i $LEVELS_DIR\n\n# This needs to be here\necho 'exit 0' >> /etc/rc.local\n\necho '*** DONE! ***'\necho -n 'reboot now? (y/n): '\nread REBOOT\nif [ \"$REBOOT\" == 'y' ]; then\n    reboot\nelse\n    echo 'You must reboot for certain settings to kick in'\n    echo 'Please reboot soon'\nfi\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}