{
  "metadata": {
    "timestamp": 1736710343842,
    "page": 152,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ponylang/ponyc",
      "stars": 5762,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".ci-dockerfiles",
          "type": "tree",
          "content": null
        },
        {
          "name": ".ci-scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerfiles",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.30859375,
          "content": "[attr]pony text eol=lf whitespace=tab-in-indent,trailing-space,tabwidth=2\n[attr]win  text eol=crlf whitespace=tab-in-indent,trailing-space,tabwidth=2\n\n*.c pony\n*.cc pony\n*.h pony\n*.pony pony\n*.yml pony\n*.sh pony\n*.bash pony\n\n*.bat win\n\n.gitattributes export-ignore\n.gitignore export-ignore\n\nCHANGELOG.md merge=union\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.390625,
          "content": "tags\n.DS_Store\n*.o\n*.obj\n*.s\n*.ll\n*.bc\n*.a\n*.exe\n*.exp\n*.ilk\n*.lib\n*.pdb\n*.sublime*\n.*.swp\n.*.swo\n*.dSYM/\n*.psess\n*.vspx\ntmp.eof\ntmp.longline\n.vs/\nCppProperties.json\nbuild/\nwork/\noutput/\n_ReSharper.*\n.vscode/\n.clangd/\n# clangd cache and index\n/.cache/\nsrc/common/dtrace_probes.h\npackages/stdlib/stdlib\n/stdlib-docs/\n/compile_commands.json\n\n# Allow these paths\n!src/libponyrt/lang/except_try_catch.ll\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1083984375,
          "content": "[submodule \"lib/llvm/src\"]\n  path = lib/llvm/src\n  url = https://github.com/llvm/llvm-project\n  ignore = dirty\n"
        },
        {
          "name": ".markdownlintignore",
          "type": "blob",
          "size": 0.05859375,
          "content": "benchmark/*\nCHANGELOG.md\nCODE_OF_CONDUCT.md\n.release-notes/\n"
        },
        {
          "name": ".release-notes",
          "type": "tree",
          "content": null
        },
        {
          "name": "BUILD.md",
          "type": "blob",
          "size": 9.1171875,
          "content": "# Building ponyc from source\n\nFirst of all, you need a compiler with decent C11 support. We officially support Clang on Unix and MSVC on Windows; the following are known to work:\n\n- Clang >= 3.4\n- XCode Clang >= 6.0\n- MSVC >= 2017\n- GCC >= 4.7\n\nYou also need [CMake](https://cmake.org/download/) version 3.21 or higher. You also need a version of [Python 3](https://www.python.org/downloads/) installed; it's required in order to build LLVM.\n\n## Clone this repository\n\nThe Pony build process uses git submodules so you need to build from a checked out clone of this repository.\n\n## Build Steps\n\nThe build system uses CMake, and includes a helper wrapper that will automatically set up your out-of-source build directories and libraries for you.\n\nThe build system is divided into several stages:\n\n- Build the vendored LLVM libraries that are included in the `lib/llvm/src` Git submodule by running `make libs` (`.\\make.ps1 libs` on Windows).  This stage only needs to be run once the first time you build (or if the vendored LLVM submodule changes, or if you run `make distclean`).\n  - This can take a while. To ensure it's using all cores, try `make libs build_flags=\"-j6\"`, replacing `6` with the number of CPU cores available.\n\n- `make configure` to configure the CMake build directory.  Use `make configure config=debug` (`.\\make.ps1 configure -Config Debug`) for a debug build.\n- `make build` will build ponyc and put it in `build/release`.  Use `make build config=debug` (`.\\make.ps1 build -Config Debug` on Windows) for a debug build that goes in `build/debug`.\n- `make test` will run the test suite.\n- `make install` will install ponyc to `/usr/local` by default (`make install prefix=/foo` to install elsewhere; `make install -Prefix foo` on Windows).\n- `make clean` will clean your ponyc build, but not the libraries.\n- `make distclean` will delete the entire `build` directory, including the libraries.\n\nThe build system defaults to using Clang on Unix.  In order to use GCC, you must explicitly set it in the `configure` step: `make configure CC=gcc CXX=g++`.\n\n## FreeBSD\n\n```bash\npkg install -y cmake gmake libunwind git\ngmake libs\ngmake configure\ngmake build\nsudo gmake install\n```\n\nNote that you only need to run `gmake libs` once the first time you build (or if the version of LLVM in the `lib/llvm/src` Git submodule changes).\n\n## DragonFly\n\n```bash\npkg install -y cxx_atomics\n```\n\nThen continue with the same instructions as FreeBSD.\n\n## Linux\n\n```bash\nmake libs\nmake configure\nmake build\nsudo make install\n```\n\nAdditional Requirements:\n\nDistribution | Requires\n--- | ---\nAlpine 3.17+ | binutils-gold, clang, clang-dev, cmake, make\nCentOS 8 | clang, cmake, diffutils, libatomic, libstdc++-static, make, zlib-devel\nFedora | clang, cmake, libatomic, libstdc++-static, make\nFedora 41 | binutils-gold, clang, cmake, libatomic, libstdc++-static, make\nOpenSuse Leap | binutils-gold, cmake\nRaspbian 32-bit | cmake\nRaspbian 64-bit | cmake, clang\nRocky | clang, cmake, diffutils, libatomic, libstdc++-static, make, zlib-devel\nUbuntu | clang, cmake, make\nVoid | clang, cmake, make, libatomic libatomic-devel\n\nNote that you only need to run `make libs` once the first time you build (or if the version of LLVM in the `lib/llvm/src` Git submodule changes).\n\n### 32-bit Raspbian\n\nInstalling on a 32-bit Raspbian is slightly different from other Linux based\nOperating Systems. There are two important things to note:\n\n- at the moment, only `gcc` can be used to build Pony; `clang` currently doesn't work.\n- you'll need to override the `tune` option to configure.\n\n```bash\nmake libs\nmake configure tune=native\nmake build\nsudo make install\n```\n\n### 64-bit Raspbian\n\nInstalling on a 64-bit Raspbian is slightly different from other Linux based\nOperating Systems, you'll need to override the `arch` option to configure, but otherwise, everything is the same.\n\n```bash\nmake libs pic_flag=-fPIC\nmake configure arch=armv8-a pic_flag=-fPIC\nmake build\nsudo make install arch=armv8-a\n```\n\n### Asahi\n\nInstalling on Asahi is slightly different due to running on the M1 processor. You'll need to override the `arch` option to configure, but otherwise, everything is the same.\n\n```bash\nmake libs\nmake configure arch=armv8\nmake build\nsudo make install\n```\n\n## macOS\n\nFor Intel-based macOS:\n\n```bash\nmake libs\nmake configure\nmake build\nsudo make install\n```\n\nFor Apple Silicon macOS (M1 processors):\n\n```bash\nmake libs\nmake configure arch=armv8\nmake build arch=armv8\nsudo make install\n```\n\nNote that you only need to run `make libs` once the first time you build (or if the version of LLVM in the `lib/llvm/src` Git submodule changes).\n\n## Windows\n\nBuilding on Windows requires the following:\n\n- [CMake](https://cmake.org/download/) version 3.15.0 or higher needs to be in your PATH.\n- [Python 3](https://www.python.org/downloads/)\n- Visual Studio 2019 or 2017 (available [here](https://www.visualstudio.com/vs/community/)) or the Visual C++ Build Tools 2019 or 2017 (available [here](https://visualstudio.microsoft.com/visual-cpp-build-tools/)).\n  - If using Visual Studio, install the `Desktop Development with C++` workload.\n  - If using Visual C++ Build Tools, install the `Visual C++ build tools` workload, and the `Visual Studio C++ core features` individual component.\n  - Install the latest `Windows 10 SDK (10.x.x.x) for Desktop` component.\n\nIn a PowerShell prompt, run:\n\n```powershell\n.\\make.ps1 libs\n.\\make.ps1 configure\n.\\make.ps1 build\n```\n\nFollowing building, to make `ponyc.exe` globally available, add it to your `PATH` either by using Advanced System Settings->Environment Variables to extend `PATH` or by using the `setx` command, e.g. `setx PATH \"%PATH%;<ponyc repo>\\build\\release\"`\n\nNote that you only need to run `.\\make.ps1 libs` once the first time you build (or if the version of LLVM in the `lib/llvm/src` Git submodule changes).\n\n---\n\n## Additional Build Options on Unix\n\n### arch\n\nYou can specify the CPU architecture to build Pony for via the `arch` make option:\n\n```bash\nmake configure arch=arm7\nmake build\n```\n\n## dtrace\n\nBSD and Linux based versions of Pony support using DTrace and SystemTap for collecting Pony runtime events.\n\nDTrace support is enabled by setting `use=dtrace` in the build command line like:\n\n```bash\nmake configure use=dtrace\nmake build\n```\n\n### lto\n\nLink-time optimizations provide a performance improvement. You should strongly consider turning on LTO if you build ponyc from source. It's off by default as it comes with some caveats:\n\n- If you aren't using clang as your linker, we've seen LTO generate incorrect binaries. It's rare but it can happen. Before turning on LTO you need to be aware that it's possible.\n\n- If you are on MacOS, turning on LTO means that if you upgrade your version of XCode, you will have to rebuild your Pony compiler. You won't be able to link Pony programs if there is a mismatch between the version of XCode used to build the Pony runtime and the version of XCode you currently have installed.\n\nLTO is enabled by setting `lto` to `yes` in the build command line like:\n\n```bash\nmake configure lto=yes\nmake build\n```\n\n### runtime-bitcode\n\nIf you're compiling with Clang, you can build the Pony runtime as an LLVM bitcode file by setting `runtime-bitcode` to `yes` in the build command line:\n\n```bash\nmake configure runtime-bitcode=yes\nmake build\n```\n\nThen, you can pass the `--runtimebc` option to ponyc in order to use the bitcode file instead of the static library to link in the runtime:\n\n```bash\nponyc --runtimebc\n```\n\nThis functionality boils down to \"super LTO\" for the runtime. The Pony compiler will have full knowledge of the runtime and will perform advanced interprocedural optimisations between your Pony code and the runtime. If you're looking for maximum performance, you should consider this option. Note that this can result in very long optimisation times.\n\n### systematic testing\n\nSystematic testing allows for running of Pony programs in a deterministic manner. It accomplishes this by coordinating the interleaving of the multiple runtime scheduler threads in a deterministic and reproducible manner instead of allowing them all to run in parallel like happens normally. This ability to reproduce a particular runtime behavior is invaluable for debugging runtime issues.\n\nSystematic testing is enabled by setting `use=scheduler_scaling_pthreads,systematic_testing` in the build command line like:\n\n```bash\nmake configure use=scheduler_scaling_pthreads,systematic_testing\nmake build\n```\n\nMore information about systematic testing can be found in [SYSTEMATIC_TESTING.md](SYSTEMATIC_TESTING.md).\n\n## Compiler Development\n\nTo ease development and support LSP tools like [clangd](https://clangd.llvm.org), create a `compile_commands.json` file with the following steps:\n\n1. Run the `make configure` step for building ponyc with the following variable defined: `CMAKE_FLAGS='-DCMAKE_EXPORT_COMPILE_COMMANDS=ON'`\n2. symlink the generated `compile_commands.json` files into the project root directory:\n\n  ```bash\n  ln -sf build/build_debug/compile_commands.json compile_commands.json\n  ```\n\n  Replace `build_debug` with `build_release` is you are using a release configuration for compilation.\n\nNow [clangd](https://clangd.llvm.org) will pick up the generated file and will be able to respond much quicker than without `compile_commands.json` file.\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 103.9931640625,
          "content": "# Change Log\n\nAll notable changes to the Pony compiler and standard library will be documented in this file. This project adheres to [Semantic Versioning](http://semver.org/) and [Keep a CHANGELOG](http://keepachangelog.com/).\n\n## [unreleased] - unreleased\n\n### Fixed\n\n- Make sure scheduler threads don't ACK the quiescence protocol CNF messages if they have an actor waiting to be run ([PR #4583](https://github.com/ponylang/ponyc/pull/4583))\n\n### Added\n\n\n### Changed\n\n- Change stack_depth_t to size_t on OpenBSD ([PR #4575](https://github.com/ponylang/ponyc/pull/4575))\n\n## [0.58.9] - 2024-12-29\n\n### Fixed\n\n- Fixed an issue that caused the `actor_pinning` documentation to not be built\n\n## [0.58.8] - 2024-12-27\n\n### Fixed\n\n- Fix rare termination logic failures that could result in early shutdown ([PR #4556](https://github.com/ponylang/ponyc/pull/4556))\n\n### Added\n\n- Add Fedora 41 as a supported platform ([PR #4557](https://github.com/ponylang/ponyc/pull/4557))\n- Add support for pinning actors to a dedicated scheduler thread ([PR #4547](https://github.com/ponylang/ponyc/pull/4547))\n\n### Changed\n\n- Drop Fedora 39 support ([PR #4558](https://github.com/ponylang/ponyc/pull/4558))\n- Update Pony musl Docker images to Alpine 3.20 ([PR #4562](https://github.com/ponylang/ponyc/pull/4562))\n\n## [0.58.7] - 2024-11-30\n\n### Fixed\n\n- Correctly find custom-built `llc` ([PR #4537](https://github.com/ponylang/ponyc/pull/4537))\n- Fix buffer out of bounds access issue ([PR #4540](https://github.com/ponylang/ponyc/pull/4540))\n- Fix bug in ASIO shutdown ([PR #4548](https://github.com/ponylang/ponyc/pull/4548))\n- Fix early quiescence/termination bug ([PR #4550](https://github.com/ponylang/ponyc/pull/4550))\n\n### Changed\n\n- Recycle actor heap chunks after GC instead of returning to pool ([PR #4531](https://github.com/ponylang/ponyc/pull/4531))\n\n## [0.58.6] - 2024-10-16\n\n### Fixed\n\n- Fix use after free bug in actor heap finalisation that can lead to a segfault ([PR #4522](https://github.com/ponylang/ponyc/pull/4522))\n- Make heap small chunk size setting logic more precise/correct ([PR #4527](https://github.com/ponylang/ponyc/pull/4527))\n\n## [0.58.5] - 2024-06-01\n\n### Changed\n\n- Update the base image for our ponyc images ([PR #4515](https://github.com/ponylang/ponyc/pull/4515))\n\n## [0.58.4] - 2024-05-01\n\n### Fixed\n\n- Fix compiler crash ([PR #4505](https://github.com/ponylang/ponyc/pull/4505))\n- Fix generation of invalid LLVM IR  ([PR #4506](https://github.com/ponylang/ponyc/pull/4506))\n\n### Added\n\n- Add prebuilt ponyc binaries for Ubuntu 24.04 ([PR #4508](https://github.com/ponylang/ponyc/pull/4508))\n\n## [0.58.3] - 2024-03-30\n\n### Fixed\n\n- Fix bug in documentation generation ([PR #4502](https://github.com/ponylang/ponyc/pull/4502))\n\n## [0.58.2] - 2024-02-24\n\n### Fixed\n\n- Fix for potential memory corruption in `Array.copy_to` ([PR #4490](https://github.com/ponylang/ponyc/pull/4490))\n- Fix bug when serializing bare lambdas ([PR #4486](https://github.com/ponylang/ponyc/pull/4486))\n\n### Added\n\n- Add Fedora 39 as a supported platform ([PR #4485](https://github.com/ponylang/ponyc/pull/4485))\n- Add MacOS on Apple Silicon as a supported platform ([PR #4487](https://github.com/ponylang/ponyc/pull/4487))\n- Add constrained_types package to the standard library ([PR #4493](https://github.com/ponylang/ponyc/pull/4493))\n\n## [0.58.1] - 2024-01-27\n\n### Fixed\n\n- Fix missing \"runtime_info\" package documentation ([PR #4476](https://github.com/ponylang/ponyc/pull/4476))\n- Use the correct LLVM intrinsics for `powi` on *nix. ([PR #4481](https://github.com/ponylang/ponyc/pull/4481))\n\n## [0.58.0] - 2023-11-24\n\n### Changed\n\n- Disallow `return` at the end of a `with` block ([PR #4467](https://github.com/ponylang/ponyc/pull/4467))\n- Make the `verify` pass on by default ([PR #4036](https://github.com/ponylang/ponyc/pull/4036))\n\n## [0.57.1] - 2023-10-29\n\n### Fixed\n\n- Fix compiling Pony programs on X86 MacOS when XCode 15 is the linker ([PR #4466](https://github.com/ponylang/ponyc/pull/4466))\n\n## [0.57.0] - 2023-10-08\n\n### Fixed\n\n- Fix broken DTrace support ([PR #4453](https://github.com/ponylang/ponyc/pull/4453))\n- Fix compilation error when building with pool_memalign in release mode ([PR #4455](https://github.com/ponylang/ponyc/pull/4455))\n- Fix compiler bug that allows an unsafe data access pattern ([PR #4458](https://github.com/ponylang/ponyc/pull/4458))\n\n### Changed\n\n- Fix compiler bug that allows an unsafe data access pattern ([PR #4458](https://github.com/ponylang/ponyc/pull/4458))\n\n## [0.56.2] - 2023-09-16\n\n### Added\n\n- \"No op\" release to get Windows release out\n\n## [0.56.1] - 2023-09-16\n\n### Fixed\n\n- Fix \"double socket close\" issue with Windows version of TCPConnection ([PR #4437](https://github.com/ponylang/ponyc/pull/4437))\n\n## [0.56.0] - 2023-08-30\n\n### Fixed\n\n- Avoid hangs in async pony_check properties when using actions ([PR #4405](https://github.com/ponylang/ponyc/pull/4405))\n\n### Added\n\n- Add macOS on Intel as fully supported platform ([PR #4390](https://github.com/ponylang/ponyc/pull/4390))\n\n### Changed\n\n- Drop support for Alpine versions prior to 3.17 ([PR #4407](https://github.com/ponylang/ponyc/pull/4407))\n- Update Pony musl Docker images to Alpine 3.18 ([PR #4407](https://github.com/ponylang/ponyc/pull/4407))\n- Drop FreeBSD as a supported platform ([PR #4382](https://github.com/ponylang/ponyc/pull/4382))\n- Drop macOS on Apple Silicon as a fully supported platform ([PR #4403](https://github.com/ponylang/ponyc/pull/4403))\n\n## [0.55.1] - 2023-08-16\n\n### Fixed\n\n- Fix broken linking when using a sanitizer ([PR #4393](https://github.com/ponylang/ponyc/pull/4393))\n- Fix memory errors with some `--debug` program builds ([PR #4372](https://github.com/ponylang/ponyc/pull/4372))\n\n### Changed\n\n- Stop putting `stable` in ponyc Docker images ([PR #4353](https://github.com/ponylang/ponyc/pull/4353))\n- Move heap ownership info from chunk to pagemap ([PR #4371](https://github.com/ponylang/ponyc/pull/4371))\n\n## [0.55.0] - 2023-05-27\n\n### Changed\n\n- Change supported MacOS version from Monterey to Ventura ([PR #4349](https://github.com/ponylang/ponyc/pull/4349))\n- Fix a possible resource leak with `with` blocks ([PR #4347](https://github.com/ponylang/ponyc/pull/4347))\n- Drop Ubuntu 18.04 support ([PR #4351](https://github.com/ponylang/ponyc/pull/4351))\n\n## [0.54.1] - 2023-04-12\n\n### Fixed\n\n- Fix bug in HeapToStack optimization pass ([PR #4341](https://github.com/ponylang/ponyc/pull/4341))\n\n### Changed\n\n- LLVM 15 ([PR #4327](https://github.com/ponylang/ponyc/pull/4327))\n\n## [0.54.0] - 2023-02-27\n\n### Fixed\n\n- Remove ambiguity from \"not safe to write\" compiler error message ([PR #4299](https://github.com/ponylang/ponyc/pull/4299))\n- Fix waiting on Windows to be sure I/O events can still come in. ([PR #4325](https://github.com/ponylang/ponyc/pull/4325))\n\n### Added\n\n- Create libponyc-standalone on MacOS ([PR #4303](https://github.com/ponylang/ponyc/pull/4303))\n- Build ponyc-standalone.lib for windows ([PR #4307](https://github.com/ponylang/ponyc/pull/4307))\n\n### Changed\n\n- Update DTrace probes ([PR #4302](https://github.com/ponylang/ponyc/pull/4302))\n- Stop building the \"x86-64-unknown-linux-gnu\" ponyc package ([PR #4312](https://github.com/ponylang/ponyc/pull/4312))\n- Remove json package from the standard library ([PR #4323])(https://github.com/ponylang/ponyc/pull/4323)\n\n## [0.53.0] - 2023-01-04\n\n### Fixed\n\n- Fix infinite loop in compiler ([PR #4293](https://github.com/ponylang/ponyc/pull/4293))\n- Fix compiler segfault caused by infinite recursion ([PR #4292](https://github.com/ponylang/ponyc/pull/4292))\n- Fix runtime segfault ([PR #4294](https://github.com/ponylang/ponyc/pull/4294))\n\n### Changed\n\n- Implement empty ranges RFC ([PR #4280](https://github.com/ponylang/ponyc/pull/4280))\n\n## [0.52.5] - 2022-12-30\n\n### Fixed\n\n- Fix compiler crash introduced in #4283 ([PR #4288](https://github.com/ponylang/ponyc/pull/4288))\n\n## [0.52.4] - 2022-12-29\n\n### Fixed\n\n- Fix an assert in `call.c` when checking an invalid argument for autorecover ([PR #4278](https://github.com/ponylang/ponyc/pull/4278))\n- Fix an issue with infinite loops while typechecking some expressions ([PR #4274](https://github.com/ponylang/ponyc/pull/4274))\n- Fix soundness bug introduced in Pony 0.51.2 ([PR #4283](https://github.com/ponylang/ponyc/pull/4283))\n\n## [0.52.3] - 2022-12-16\n\n### Fixed\n\n- Fix segfault caused by unsafe garbage collection optimization ([PR #4256](https://github.com/ponylang/ponyc/pull/4256))\n- Fix incorrectly implemented PR #4243 ([PR #4276](https://github.com/ponylang/ponyc/pull/4276))\n\n### Changed\n\n- Remove macOS on Intel as a supported platform ([PR #4270](https://github.com/ponylang/ponyc/pull/4270))\n\n## [0.52.2] - 2022-12-01\n\n### Fixed\n\n- Fix multiple races within actor/cycle detector interactions ([PR #4251](https://github.com/ponylang/ponyc/pull/4251))\n- Fix crash when calling `(this.)create()` ([PR #4263](https://github.com/ponylang/ponyc/pull/4263))\n\n### Added\n\n- Don't include \"home file\" in documentation search ([PR #4243](https://github.com/ponylang/ponyc/pull/4243))\n- Add support for erase left and erase line in term.ANSI ([PR #4246](https://github.com/ponylang/ponyc/pull/4246))\n\n### Changed\n\n- Improve TCP backpressure handling on Windows ([PR #4252](https://github.com/ponylang/ponyc/pull/4252))\n- Update supported FreeBSD to 13.1 ([PR #4185](https://github.com/ponylang/ponyc/pull/4185))\n- Drop Rocky 8 support ([PR #4262](https://github.com/ponylang/ponyc/pull/4262))\n\n## [0.52.1] - 2022-11-14\n\n### Added\n\n- Update docgen to generate source files that are ignored ([PR #4239](https://github.com/ponylang/ponyc/pull/4239))\n\n## [0.52.0] - 2022-11-10\n\n### Fixed\n\n- Avoid fairly easy to trigger overflow in Windows Time.nanos code ([PR #4227](https://github.com/ponylang/ponyc/pull/4227))\n- Fix incorrect interaction between String/Array reserve and Pointer realloc ([PR #4223](https://github.com/ponylang/ponyc/pull/4223))\n- Fix broken documentation generation on Windows ([PR #4226](https://github.com/ponylang/ponyc/pull/4226))\n\n### Changed\n\n- Sort package types in documentation ([PR #4228](https://github.com/ponylang/ponyc/pull/4228))\n- Adapt documentation generation to use the mkdocs material theme ([PR #4226](https://github.com/ponylang/ponyc/pull/4226)\n\n## [0.51.4] - 2022-10-29\n\n### Fixed\n\n- Fix broken readline package ([PR #4199](https://github.com/ponylang/ponyc/pull/4199))\n\n## [0.51.3] - 2022-10-02\n\n### Fixed\n\n- Fix bug in `StdStream.print` ([PR #4180](https://github.com/ponylang/ponyc/pull/4180))\n- Fix identity comparison check with desugared creations ([PR #4182](https://github.com/ponylang/ponyc/pull/4182))\n\n## [0.51.2] - 2022-08-26\n\n### Fixed\n\n- Fix for crash when methods with default private type params in remote packages are called  ([PR #4167](https://github.com/ponylang/ponyc/pull/4167))\n- Fix incorrect atomics usage ([PR #4159](https://github.com/ponylang/ponyc/pull/4159))\n\n### Added\n\n- Auto-recover constructor expressions ([PR #4124](https://github.com/ponylang/ponyc/pull/4124))\n- Support for RISC-V ([PR #3435](https://github.com/ponylang/ponyc/pull/3435))\n- Enhance runtime stats tracking ([PR #4144](https://github.com/ponylang/ponyc/pull/4144))\n\n## [0.51.1] - 2022-06-29\n\n### Fixed\n\n- Fix String.f32 and String.f64 errors with non null terminated strings ([PR #4132](https://github.com/ponylang/ponyc/pull/4132))\n- Fix for infinite Ranges ([PR #4127](https://github.com/ponylang/ponyc/pull/4127))\n- Ensure reachability of types returned by FFI calls ([PR #4149](https://github.com/ponylang/ponyc/pull/4149))\n- Support void* (Pointer[None]) parameters in bare lambdas and functions ([PR #4152](https://github.com/ponylang/ponyc/pull/4152))\n\n### Added\n\n- Avoid clearing chunks at start of GC ([PR #4143](https://github.com/ponylang/ponyc/pull/4143))\n- Systematic testing for the runtime ([PR #4140](https://github.com/ponylang/ponyc/pull/4140))\n\n### Changed\n\n- Update to basing musl images off of Alpine 3.16 ([PR #4139](https://github.com/ponylang/ponyc/pull/4139))\n\n## [0.51.0] - 2022-05-29\n\n### Fixed\n\n- Disable incorrect runtime assert for ASIO thread shutdown. ([PR #4122](https://github.com/ponylang/ponyc/pull/4122))\n\n### Added\n\n- Add prebuilt ponyc releases on MacOS for Apple Silicon ([PR #4119](https://github.com/ponylang/ponyc/pull/4119))\n\n### Changed\n\n- Update base image for glibc Linux docker images ([PR #4100](https://github.com/ponylang/ponyc/pull/4100))\n- Update LLVM to 14.0.3 ([PR #4055](https://github.com/ponylang/ponyc/pull/4055))\n- Don't use \"mostly debug runtime\" with release configurations ([PR #4112](https://github.com/ponylang/ponyc/pull/4112))\n\n## [0.50.0] - 2022-04-30\n\n### Fixed\n\n- Fix crash with exhaustive match and generics ([PR #4057](https://github.com/ponylang/ponyc/pull/4057))\n- Fix parameter names not being checked ([PR #4061](https://github.com/ponylang/ponyc/pull/4061))\n- Fix compiler crash in HeapToStack optimization pass ([PR #4067](https://github.com/ponylang/ponyc/pull/4067))\n- Strengthen the ordering for some atomic operations ([PR #4083](https://github.com/ponylang/ponyc/pull/4083))\n- Fix a runtime fault for Windows IOCP w/ memtrack messages. ([PR #4094](https://github.com/ponylang/ponyc/pull/4094))\n\n### Added\n\n- Allow to override the return type of FFI functions ([PR #4060](https://github.com/ponylang/ponyc/pull/4060))\n- Add prebuilt ponyc releases for Ubuntu 22.04 ([PR #4097](https://github.com/ponylang/ponyc/pull/4097))\n\n### Changed\n\n- Don't allow FFI calls in default methods or behaviors ([PR #4065](https://github.com/ponylang/ponyc/pull/4065))\n\n## [0.49.1] - 2022-03-13\n\n### Fixed\n\n- Ban unstable variables ([PR #4018](https://github.com/ponylang/ponyc/pull/4018))\n\n## [0.49.0] - 2022-02-26\n\n### Fixed\n\n- Add workaround for compiler assertion failure in Promise.flatten_next ([PR #3991](https://github.com/ponylang/ponyc/pull/3991))\n- Take exhaustive match into account when checking for field initialization ([PR #4006](https://github.com/ponylang/ponyc/pull/4006))\n- Fix compiler crash related to using tuples as a generic constraint ([PR #4005](https://github.com/ponylang/ponyc/pull/4005))\n- Fix incorrect \"field not initialized\" error with while/else ([PR #4009](https://github.com/ponylang/ponyc/pull/4009))\n- Fix incorrect \"field not initialized\" error with try/else ([PR #4011](https://github.com/ponylang/ponyc/pull/4011))\n- Fix compiler crash related to using tuples in a union as a generic constraint ([PR #4017](https://github.com/ponylang/ponyc/pull/4017))\n- Fix incorrect code returned by ANSI.erase ([PR #4022](https://github.com/ponylang/ponyc/pull/4022))\n- Fix the signature of Iter's map_stateful/map to not require ephemerals ([PR #4026](https://github.com/ponylang/ponyc/pull/4026))\n- Use symbol table from definition scope when looking up references from default method bodies ([PR #4027](https://github.com/ponylang/ponyc/pull/4027))\n- Fix LLVM IR verification error found via PonyCheck ([PR #4039](https://github.com/ponylang/ponyc/pull/4039))\n- Fix failed initialization bug in Process Monitor ([PR #4043](https://github.com/ponylang/ponyc/pull/4043))\n\n### Added\n\n- Add LeastCommonMultiple and GreatestCommonDivisor to math package ([PR #4001](https://github.com/ponylang/ponyc/pull/4001))\n- Add PonyCheck to standard library ([PR #4034](https://github.com/ponylang/ponyc/pull/4034))\n\n### Changed\n\n- Reimplement `with` ([PR #4024](https://github.com/ponylang/ponyc/pull/4024))\n- Remove `logger` package from the standard library ([PR #4035](https://github.com/ponylang/ponyc/pull/4035))\n- Rename `ponybench` to match standard naming conventions. ([PR #4033](https://github.com/ponylang/ponyc/pull/4033))\n- Change the standard library pattern for object capabilities ([PR #4031](https://github.com/ponylang/ponyc/pull/4031))\n- Update Windows version used as the base for Windows images ([PR #4044](https://github.com/ponylang/ponyc/pull/4044))\n- Rename `ponytest` package to conform to naming standards ([PR #4032](https://github.com/ponylang/ponyc/pull/4032))\n\n## [0.48.0] - 2022-02-08\n\n### Fixed\n\n- Fix runtime crash when tracing class iso containing struct val ([PR #3993](https://github.com/ponylang/ponyc/pull/3993))\n\n### Added\n\n- Add a pony primitive that exposes scheduler information ([PR #3984](https://github.com/ponylang/ponyc/pull/3984))\n- Expose additional scheduler info via the runtime_info package ([PR #3988](https://github.com/ponylang/ponyc/pull/3988))\n- Add additional methods to itertools ([PR #3992](https://github.com/ponylang/ponyc/pull/3992))\n\n### Changed\n\n- Stop creating prebuilt ponyc releases for Ubuntu 21.04 ([PR #3990](https://github.com/ponylang/ponyc/pull/3990))\n- Revert \"prevent non-opaque structs from being used as behaviour parameters\" ([PR #3995](https://github.com/ponylang/ponyc/pull/3995))\n- Update LLVM to 13.0.1 ([PR #3994](https://github.com/ponylang/ponyc/pull/3994))\n- Remove out parameter from `pony_os_stdin_read` ([PR #4000](https://github.com/ponylang/ponyc/pull/4000))\n\n## [0.47.0] - 2022-02-02\n\n### Fixed\n\n- Fix return checking in behaviours and constructors ([PR #3971](https://github.com/ponylang/ponyc/pull/3971))\n- Fix issue that could lead to a muted actor being run ([PR #3974](https://github.com/ponylang/ponyc/pull/3974))\n- Fix loophole that allowed interfaces to be used to violate encapsulation ([PR #3973](https://github.com/ponylang/ponyc/pull/3973))\n- Fix compiler assertion failure when assigning error to a variable ([PR #3980](https://github.com/ponylang/ponyc/pull/3980))\n\n### Added\n\n- Add \"nodoc\" annotation ([PR #3978](https://github.com/ponylang/ponyc/pull/3978))\n\n### Changed\n\n- Remove simplebuiltin compiler option ([PR #3965](https://github.com/ponylang/ponyc/pull/3965))\n- Remove library mode option from ponyc ([PR #3975](https://github.com/ponylang/ponyc/pull/3975))\n- Change `builtin/AsioEventNotify` from an interface to a trait ([PR #3973](https://github.com/ponylang/ponyc/pull/3973))\n- Don't allow interfaces to have private methods ([PR #3973](https://github.com/ponylang/ponyc/pull/3973))\n- Remove hack that prevented documentation generation for \"test classes\" ([PR #3978](https://github.com/ponylang/ponyc/pull/3978))\n\n## [0.46.0] - 2022-01-16\n\n### Changed\n\n- Stop creating CentOS 8 prebuilt ponyc releases ([PR #3955](https://github.com/ponylang/ponyc/pull/3955))\n- Hide C header implementation details related to actor pad size. ([PR #3960](https://github.com/ponylang/ponyc/pull/3960))\n- Change type of Env.root to AmbientAuth ([PR #3962](https://github.com/ponylang/ponyc/pull/3962))\n\n## [0.45.2] - 2021-12-31\n\n### Fixed\n\n- Clarify wording for some subtyping errors ([PR #3933](https://github.com/ponylang/ponyc/pull/3933))\n- Fix inability to fully build pony on Raspberry PI 4's with 64-bit Raspbian ([PR #3949](https://github.com/ponylang/ponyc/pull/3949))\n\n### Added\n\n- Add build instructions for 64-bit Raspbian ([PR #3880](https://github.com/ponylang/ponyc/pull/3880))\n\n## [0.45.1] - 2021-12-02\n\n### Fixed\n\n- Fix underlying time source for Time.nanos() on macOS ([PR #3921](https://github.com/ponylang/ponyc/pull/3921))\n- Fix `cli` package from mangling option arguments with equal signs ([PR #3925](https://github.com/ponylang/ponyc/pull/3925))\n\n## [0.45.0] - 2021-11-01\n\n### Fixed\n\n- Fix erratic cycle detector triggering on some Arm systems ([PR #3854](https://github.com/ponylang/ponyc/pull/3854))\n- Fix non-release build crashes on Arm ([PR #3860](https://github.com/ponylang/ponyc/pull/3860))\n- Fix major source of runtime instability on non-x86 based platforms ([PR #3871](https://github.com/ponylang/ponyc/pull/3871))\n- Fix segfaults with debug mode code on 64-bit Arm ([PR #3875](https://github.com/ponylang/ponyc/pull/3875))\n- Fix incorrect version in nightly ponyc builds ([PR #3895](https://github.com/ponylang/ponyc/pull/3895))\n\n### Added\n\n- Add Ubuntu 21.04 nightly builds and releases builds ([PR #3866](https://github.com/ponylang/ponyc/pull/3866))\n- Add 64-bit Arm (Graviton) as a supported platform ([PR #3876](https://github.com/ponylang/ponyc/pull/3876))\n- Add build instructions for 32-bit Raspbian ([PR #3879](https://github.com/ponylang/ponyc/pull/3879))\n- Add Apple Silicon as a supported platform ([PR #3883](https://github.com/ponylang/ponyc/pull/3883))\n\n### Changed\n\n- Remove options package ([PR #3844](https://github.com/ponylang/ponyc/pull/3844))\n- Update to LLVM 13.0.0 ([PR #3837](https://github.com/ponylang/ponyc/pull/3837))\n\n## [0.44.0] - 2021-09-03\n\n### Fixed\n\n- Fix a compile-time crash related to Pony-specific optimizations. ([PR #3831](https://github.com/ponylang/ponyc/pull/3831))\n\n### Changed\n\n- Update FilePath constructors to allow a non-partial way to create a FilePath ([PR #3819](https://github.com/ponylang/ponyc/pull/3819))\n\n## [0.43.2] - 2021-08-28\n\n### Fixed\n\n- Clean up child process exits on Windows ([PR #3817](https://github.com/ponylang/ponyc/pull/3817))\n- Cleanup and fixes for Windows sockets ([PR #3816](https://github.com/ponylang/ponyc/pull/3816))\n- Stop standalone libponyc from needing zlib ([PR #3827](https://github.com/ponylang/ponyc/pull/3827))\n\n## [0.43.1] - 2021-08-03\n\n### Fixed\n\n- Fixed Makefile for FreeBSD ([PR #3808](https://github.com/ponylang/ponyc/pull/3808))\n\n### Added\n\n- Add FileMode.u32 ([PR #3809](https://github.com/ponylang/ponyc/pull/3809))\n- Add FileMode.u32 ([PR #3810](https://github.com/ponylang/ponyc/pull/3810))\n- Make working with promises of promises easier  ([PR #3813](https://github.com/ponylang/ponyc/pull/3813))\n\n## [0.43.0] - 2021-07-14\n\n### Fixed\n\n- Fix OOM on MacOS when using xcode 12.5 ([PR #3793](https://github.com/ponylang/ponyc/pull/3793))\n- Fix MacOS version mismatch warnings when linking Pony programs ([PR #3798](https://github.com/ponylang/ponyc/pull/3798))\n- Fix the calculation of \"is prime\" for numbers after 1321. ([PR #3799](https://github.com/ponylang/ponyc/pull/3799))\n- Prevent non-opaque structs from being used as behaviour parameters ([PR #3781](https://github.com/ponylang/ponyc/pull/3781))\n\n### Added\n\n- Add support for prebuilt Rocky Linux versions ([PR #3783](https://github.com/ponylang/ponyc/pull/3783))\n\n### Changed\n\n- Update to LLVM 12.0.1 ([PR #3745](https://github.com/ponylang/ponyc/pull/3745))\n\n## [0.42.0] - 2021-07-07\n\n### Fixed\n\n- Fix bug where Flags.remove could set flags in addition to unsetting them ([PR #3777](https://github.com/ponylang/ponyc/pull/3777))\n\n### Added\n\n- Allow Flags instances to be created with a set bit encoding ([PR #3778](https://github.com/ponylang/ponyc/pull/3778))\n\n### Changed\n\n- Don't allow PONYPATH to override standard library ([PR #3780](https://github.com/ponylang/ponyc/pull/3780))\n\n## [0.41.2] - 2021-06-29\n\n### Fixed\n\n- Fix \"iftype\" expressions not being usable in lambdas or object literals ([PR #3763](https://github.com/ponylang/ponyc/pull/3763))\n- Fix code generation for variadic FFI functions on arm64 ([PR #3768](https://github.com/ponylang/ponyc/pull/3768))\n\n## [0.41.1] - 2021-05-22\n\n### Fixed\n\n- Fix NullablePointer type constraint check being omitted in FFI declarations ([PR #3758](https://github.com/ponylang/ponyc/pull/3758))\n\n## [0.41.0] - 2021-05-07\n\n### Fixed\n\n- Change to Steed's model of subtyping ([PR #3643](https://github.com/ponylang/ponyc/pull/3643))\n- Fix memory corruption with Array.chop and String.chop ([PR #3755](https://github.com/ponylang/ponyc/pull/3755))\n\n### Changed\n\n- Improve error message for match on structs ([PR #3746](https://github.com/ponylang/ponyc/pull/3746))\n- RFC 68: Mandatory FFI declarations ([PR #3739](https://github.com/ponylang/ponyc/pull/3739))\n- Change return type of String.add to String iso^ ([PR #3752](https://github.com/ponylang/ponyc/pull/3752))\n- Improve error message on destructuring of non-tuple types ([PR #3753](https://github.com/ponylang/ponyc/pull/3753))\n\n## [0.40.0] - 2021-05-01\n\n### Fixed\n\n- Use built-in offset argument to cpointer ([PR #3741](https://github.com/ponylang/ponyc/pull/3741))\n\n### Added\n\n- Add `IsPrime` checker to `math` package ([PR #3738](https://github.com/ponylang/ponyc/pull/3738))\n\n### Changed\n\n- Change supported FreeBSD to 13.0 ([PR #3743](https://github.com/ponylang/ponyc/pull/3743))\n\n## [0.39.1] - 2021-03-29\n\n### Fixed\n\n- Fix compiler crash related to type parameter references ([PR #3725](https://github.com/ponylang/ponyc/pull/3725))\n- Fix early pipe shutdown with Windows ProcessMonitor ([PR #3726](https://github.com/ponylang/ponyc/pull/3726))\n- Fix literal inference through partial function ([PR #3729](https://github.com/ponylang/ponyc/pull/3729))\n\n## [0.39.0] - 2021-02-27\n\n### Fixed\n\n- Fix calculation of # CPU cores (FreeBSD/DragonFly) ([PR #3707](https://github.com/ponylang/ponyc/pull/3707))\n- Fix partial FFI declarations ignoring partial annotation ([PR #3713](https://github.com/ponylang/ponyc/pull/3713))\n- Fix building ponyc on DragonFly BSD ([PR #3676](https://github.com/ponylang/ponyc/pull/3676))\n- Fix symbol table patching for overriding default methods ([PR #3719](https://github.com/ponylang/ponyc/pull/3719))\n- Fix tuple related compiler segfaults ([PR #3723](https://github.com/ponylang/ponyc/pull/3723))\n\n### Added\n\n- Create a standalone libponyc on Linux ([PR #3716](https://github.com/ponylang/ponyc/pull/3716))\n\n### Changed\n\n- Update supported FreeBSD to 12.2 ([PR #3706](https://github.com/ponylang/ponyc/pull/3706))\n\n## [0.38.3] - 2021-01-29\n\n### Fixed\n\n- Fix memory safety problem with Array.from_cpointer ([PR #3675](https://github.com/ponylang/ponyc/pull/3675))\n- Fix bad package names in generated documentation ([PR #3700](https://github.com/ponylang/ponyc/pull/3700))\n\n## [0.38.2] - 2020-12-26\n\n### Fixed\n\n- Fix race conditions that can lead to a segfault ([PR #3667](https://github.com/ponylang/ponyc/pull/3667))\n- Fix compiler crash when an if block ends with an assignment that has no result value. ([PR #3670](https://github.com/ponylang/ponyc/pull/3670))\n- Fix link errors on macOS Big Sur ([PR #3686](https://github.com/ponylang/ponyc/pull/3686))\n- Fix unhandled null pointer returning from os_addrinfo_intern ([PR #3687](https://github.com/ponylang/ponyc/pull/3687))\n\n## [0.38.1] - 2020-09-26\n\n### Fixed\n\n- Fix race condition in cycle detector block sent handling ([PR #3666](https://github.com/ponylang/ponyc/pull/3666))\n\n## [0.38.0] - 2020-09-24\n\n### Fixed\n\n- Fix build failure under GCC 10.2 ([PR #3630](https://github.com/ponylang/ponyc/pull/3630))\n- Fix building libs with Visual Studio 16.7 ([PR #3635](https://github.com/ponylang/ponyc/pull/3635))\n- Fix missing Makefile lines to re-enable multiple `use=` options ([PR #3637](https://github.com/ponylang/ponyc/pull/3637))\n- Consistent handling of  function calls in consume expressions ([PR #3647](https://github.com/ponylang/ponyc/pull/3647))\n- Speed up cycle detector reaping some actors ([PR #3649](https://github.com/ponylang/ponyc/pull/3649))\n- Prevent compiler crashes on certain `consume` expressions ([PR #3650](https://github.com/ponylang/ponyc/pull/3650))\n- Fix soundness problem with Array.chop ([PR #3657](https://github.com/ponylang/ponyc/pull/3657))\n- Allow for building on DragonFlyBSD again ([PR #3654](https://github.com/ponylang/ponyc/pull/3654))\n\n### Added\n\n- Add prebuilt ponyc binaries for CentOS 8 ([PR #3629](https://github.com/ponylang/ponyc/pull/3629))\n- Add prebuilt ponyc binaries for Ubuntu 20.04 ([PR #3632](https://github.com/ponylang/ponyc/pull/3632))\n- Improvements to garbage collection of short-lived actors ([PR #3653](https://github.com/ponylang/ponyc/pull/3653))\n\n### Changed\n\n- Make Range.next() partial ([PR #3639](https://github.com/ponylang/ponyc/pull/3639))\n\n## [0.37.0] - 2020-08-28\n\n### Fixed\n\n- Fix unsound return types being allowed for autorecover ([PR #3595](https://github.com/ponylang/ponyc/pull/3595))\n- Fix compile error with GCC 8.3 ([PR #3618](https://github.com/ponylang/ponyc/pull/3618))\n- Always allow field access for objects defined inside a recover block ([PR #3606](https://github.com/ponylang/ponyc/pull/3606))\n\n### Changed\n\n- Update to basing musl images off of Alpine 3.12 ([PR #3609](https://github.com/ponylang/ponyc/pull/3609))\n- Revert \"Implement RFC0067\" ([PR #3619](https://github.com/ponylang/ponyc/pull/3619))\n\n## [0.36.0] - 2020-07-31\n\n### Fixed\n\n- Compile fix for the latest MSVC compiler (MSVC 19.26.28806.0, from Visual Studio 16.6.2) ([PR #3576](https://github.com/ponylang/ponyc/pull/3576))\n- Fix with expressions using tuple destructuring. ([PR #3586](https://github.com/ponylang/ponyc/pull/3586))\n- Fix typeparam check endless recursion ([PR #3589](https://github.com/ponylang/ponyc/pull/3589))\n- Force removing read-only files on Windows with `FilePath.remove()` ([PR #3588](https://github.com/ponylang/ponyc/pull/3588))\n\n### Added\n\n- Added vs2019 preview support for building ponyc ([PR #3587](https://github.com/ponylang/ponyc/pull/3587))\n- Implement RFC 66: Iter maybe ([PR #3603](https://github.com/ponylang/ponyc/pull/3603))\n\n### Changed\n\n- Change trn->trn to box to fix a soundness hole ([PR #3591](https://github.com/ponylang/ponyc/pull/3591))\n- Add LogLevel as argument to LogFormatter ([PR #3597](https://github.com/ponylang/ponyc/pull/3597))\n\n## [0.35.1] - 2020-05-13\n\n### Fixed\n\n- Fix incorrect Windows process waiting ([PR #3559](https://github.com/ponylang/ponyc/pull/3559))\n\n### Changed\n\n- Rename FreeBSD artifacts ([PR #3556](https://github.com/ponylang/ponyc/pull/3556))\n\n## [0.35.0] - 2020-05-11\n\n### Fixed\n\n- Fix CommandParser incorrectly handling multiple end-of-option delimiters ([PR #3541](https://github.com/ponylang/ponyc/pull/3541))\n- Correctly report process termination status in ProcessNotify.dispose() ([PR #3419](https://github.com/ponylang/ponyc/pull/3419))\n- Ensure non-blocking process wait and correctly report process exit status ([PR #3419](https://github.com/ponylang/ponyc/pull/3419))\n- Fix atomics usage related to actor muting for ARM ([PR #3552](https://github.com/ponylang/ponyc/pull/3552))\n\n### Added\n\n- Add Ubuntu18.04 builds ([PR #3545](https://github.com/ponylang/ponyc/pull/3545))\n\n### Changed\n\n- Ensure that waiting on a child process when using ProcessMonitor is non-blocking ([PR #3419](https://github.com/ponylang/ponyc/pull/3419))\n\n## [0.34.1] - 2020-05-07\n\n### Fixed\n\n- Fix unneeded dependency on Linux glibc systems ([PR #3538](https://github.com/ponylang/ponyc/pull/3538))\n\n## [0.34.0] - 2020-05-03\n\n### Added\n\n- Build Docker images for windows builds ([PR #3492](https://github.com/ponylang/ponyc/pull/3492))\n- Added support for VS Preview ([PR #3487](https://github.com/ponylang/ponyc/pull/3487))\n- Add nightly FreeBSD 12.1 builds ([PR #3502](https://github.com/ponylang/ponyc/pull/3502))\n- Add OSSockOpt constants added by Linux 5.1 kernel ([PR #3515](https://github.com/ponylang/ponyc/pull/3515))\n- Add prebuilt FreeBSD 12.1 builds for releases ([PR #3525](https://github.com/ponylang/ponyc/pull/3525))\n\n### Changed\n\n- Build PonyC using CMake ([PR #3234](https://github.com/ponylang/ponyc/pull/3234))\n- Update  supported FreeBSD version to 12.1 ([PR #3495](https://github.com/ponylang/ponyc/pull/3495))\n- Make clang our default compiler on Linux, macOS, and FreeBSD ([PR #3506](https://github.com/ponylang/ponyc/pull/3506))\n- schedule the cycle detector with higher priority using the inject queue ([PR #3507](https://github.com/ponylang/ponyc/pull/3507))\n- Update glibc Docker image based to Ubuntu 20 ([PR #3522](https://github.com/ponylang/ponyc/pull/3522))\n- Change supported Ubuntu version to Ubuntu 20 ([PR #3522](https://github.com/ponylang/ponyc/pull/3522))\n- Let processmonitor chdir before exec ([PR #3530](https://github.com/ponylang/ponyc/pull/3530))\n- Removed unused Unsupported error from ProcessMonitor([PR #3530](https://github.com/ponylang/ponyc/pull/3530))\n- Update ProcessMonitor errors to contain error messages ([PR #3532](https://github.com/ponylang/ponyc/pull/3532))\n\n## [0.33.2] - 2020-02-03\n\n### Fixed\n\n- fix cli issue when providing --help=false. ([PR #3442](https://github.com/ponylang/ponyc/pull/3442))\n- Fix linker error when creating symlinks on Windows ([PR #3444](https://github.com/ponylang/ponyc/pull/3444))\n- Fix \"not match\" and \"not if\" causing a syntax error ([PR #3449](https://github.com/ponylang/ponyc/pull/3449))\n\n### Added\n\n- LLVM 9.0.x support ([PR #3320](https://github.com/ponylang/ponyc/pull/3320))\n\n### Changed\n\n- Better error message for check_receiver_cap ([PR #3450](https://github.com/ponylang/ponyc/pull/3450))\n- Improved error for undefined but used left side of declarations ([PR #3451](https://github.com/ponylang/ponyc/pull/3451))\n\n## [0.33.1] - 2019-12-13\n\n### Fixed\n\n- Fix building ponyc with clang on Ubuntu ([PR #3378](https://github.com/ponylang/ponyc/pull/3378))\n- Fix error using latest VS2019 to build ponyc ([PR #3369](https://github.com/ponylang/ponyc/pull/3369))\n\n### Changed\n\n- Update default LLVM 7.1.0 ([PR #3377](https://github.com/ponylang/ponyc/pull/3377))\n\n## [0.33.0] - 2019-11-01\n\n### Fixed\n\n- Building ponyc with GCC 8+ ([PR #3345](https://github.com/ponylang/ponyc/pull/3345))\n\n### Added\n\n- Allow programmatic override of the default runtime options ([PR #3342](https://github.com/ponylang/ponyc/pull/3342))\n\n### Changed\n\n- `--ponythreads` has been renamed to `--ponymaxthreads` ([PR #3334](https://github.com/ponylang/ponyc/pull/3334))\n- All `--pony*` options that accept a value, will be checked for minimal values ([PR #3303](https://github.com/ponylang/ponyc/pull/3317))\n- Default to statically linking LLVM into ponyc ([PR #3355](https://github.com/ponylang/ponyc/pull/3355))\n\n## [0.32.0] - 2019-09-29\n\n### Added\n\n- Allow fields to be `consume`d (sometimes) ([PR #3304](https://github.com/ponylang/ponyc/pull/3304))\n- `--ponynoscale` option ([PR #3303](https://github.com/ponylang/ponyc/pull/3303))\n- `--ponyhelp` option to compiled program ([PR #3312](https://github.com/ponylang/ponyc/pull/3312))\n\n### Changed\n\n- Rename MaybePointer to NullablePointer ([PR #3293](https://github.com/ponylang/ponyc/pull/3293))\n- `--ponyminthreads` option can't be larger than `--ponythreads` ([PR #3303](https://github.com/ponylang/ponyc/pull/3303))\n- `--ponythreads` option can't be larger than cores available ([PR #3303](https://github.com/ponylang/ponyc/pull/3303))\n\n## [0.31.0] - 2019-08-31\n\n### Fixed\n\n- Fix static linking issue by changing the link order ([PR #3259](https://github.com/ponylang/ponyc/pull/3259))\n\n### Added\n\n- Add `--link-ldcmd` command line argument for overriding the `ld` command used for linking ([PR #3259](https://github.com/ponylang/ponyc/pull/3259))\n- Make builds with `musl` on `glibc` systems possible ([PR #3263](https://github.com/ponylang/ponyc/pull/3263))\n- Add `proxy_via(destination_host, destination_service)` to `TCPConnectionNotify` to allow TCP handlers to change the hostname & service from a TCPConnectionNotify before connecting ([PR #3230](https://github.com/ponylang/ponyc/pull/3230))\n- Add `add` and `sub` to `collections/persistent/Map` ([PR #3275](https://github.com/ponylang/ponyc/pull/3275))\n\n### Changed\n\n- Remove unnecessary argument to `Map.sub` ([PR #3275](https://github.com/ponylang/ponyc/pull/3275))\n- No longer supply AppImage as a release format ([PR #3288](https://github.com/ponylang/ponyc/pull/3288))\n\n## [0.30.0] - 2019-07-27\n\n### Fixed\n\n- Fix `which dtrace` path check ([PR #3229](https://github.com/ponylang/ponyc/pull/3229))\n- Fix segfault due to Cycle Detector viewref inconsistency ([PR #3254](https://github.com/ponylang/ponyc/pull/3254))\n\n### Changed\n\n- Make Map insertion functions total ([PR #3203](https://github.com/ponylang/ponyc/pull/3203))\n- Stop building Tumbleweed packages for releases ([PR #3228](https://github.com/ponylang/ponyc/pull/3228))\n- Stop creating Debian Buster releases ([PR #3227](https://github.com/ponylang/ponyc/pull/3227))\n- Remove `glob` package from standard library ([PR #3220](https://github.com/ponylang/ponyc/pull/3220))\n- Remove `regex` package from standard library ([PR #3218](https://github.com/ponylang/ponyc/pull/3218))\n- Remove `crypto` package from standard library ([PR #3225](https://github.com/ponylang/ponyc/pull/3225))\n- Remove `net/ssl` package from standard library ([PR #3225](https://github.com/ponylang/ponyc/pull/3225))\n\n## [0.29.0] - 2019-07-06\n\n### Fixed\n\n- Do not permit leading zeros in JSON numbers ([PR #3167](https://github.com/ponylang/ponyc/pull/3167))\n- Make reading via TCPConnection re-entrant safe ([PR #3175](https://github.com/ponylang/ponyc/pull/3175))\n- Cleanup TCPConnection GC-safety mechanism for writev buffers ([PR #3177](https://github.com/ponylang/ponyc/pull/3177))\n- Add SSL tests and fix some SSL related bugs ([PR #3174](https://github.com/ponylang/ponyc/pull/3174))\n- Fix lib/llvm to support MacOS ([PR #3181](https://github.com/ponylang/ponyc/pull/3181))\n- Close Denial of Service issue with TCPConnection.expect ([PR #3197](https://github.com/ponylang/ponyc/pull/3197))\n- Fix return type checking to allow aliasing for non-ephemeral return types. ([PR #3201](https://github.com/ponylang/ponyc/pull/3201))\n\n### Added\n\n- Allow use of OpenSSL 1.1.1 when building Pony ([PR #3156](https://github.com/ponylang/ponyc/pull/3156))\n- Add `pointer.offset` to get arbitrary pointer tags via offset ([PR #3177](https://github.com/ponylang/ponyc/pull/3177))\n- Add DTrace/SystemTap probes for muted & unmuted events ([PR #3196](https://github.com/ponylang/ponyc/pull/3196))\n- Add method to AsioEvent to see if an event is a oneshot ([PR #3198](https://github.com/ponylang/ponyc/pull/3198))\n\n### Changed\n\n- Do not permit leading zeros in JSON numbers ([PR #3167](https://github.com/ponylang/ponyc/pull/3167))\n- Make TCPConnection yield on writes to not hog cpu ([PR #3176](https://github.com/ponylang/ponyc/pull/3176))\n- Change how TCP connection reads data to improve performance ([PR #3178](https://github.com/ponylang/ponyc/pull/3178))\n- Allow use of runtime TCP connect without ASIO one shot ([PR #3171](https://github.com/ponylang/ponyc/pull/3171))\n- Simplify buffering in TCPConnection ([PR #3185](https://github.com/ponylang/ponyc/pull/3185))\n- Allow for fine-grained control of yielding CPU in TCPConnection ([PR #3197](https://github.com/ponylang/ponyc/pull/3187))\n- Make TCPConnection.expect partial ([PR #3197](https://github.com/ponylang/ponyc/pull/3197))\n\n## [0.28.1] - 2019-06-01\n\n### Fixed\n\n- Don't turn off Epoll OneShot when resubscribing to events  ([PR #3136](https://github.com/ponylang/ponyc/pull/3136))\n- Add unchop to array and unchop, repeat_str and mul to string ([PR #3155](https://github.com/ponylang/ponyc/pull/3155))\n- Fix cycle detector issue with checking for blocked actors ([PR #3154](https://github.com/ponylang/ponyc/pull/3154))\n- Wake up suspended scheduler threads if there is work for another one ([PR #3153](https://github.com/ponylang/ponyc/pull/3153))\n\n### Added\n\n- Add Docker image based on Alpine ([PR #3138](https://github.com/ponylang/ponyc/pull/3135))\n- Added `XorOshiro128StarStar` and `SplitMix64` PRNGs. ([PR #3135](https://github.com/ponylang/ponyc/pull/3135))\n- Added function `Random.int_unbiased`. ([PR #3135](https://github.com/ponylang/ponyc/pull/3135))\n- Added `from_u64` constructor to 128 bit state PRNGs. ([PR #3135](https://github.com/ponylang/ponyc/pull/3135))\n- Add unchop to array and unchop, repeat_str and mul to string ([PR #3155](https://github.com/ponylang/ponyc/pull/3155))\n\n### Changed\n\n- Updated `XorOshiro128Plus` parameters. This PRNG will now produce different values for the same seed as before. ([PR #3135](https://github.com/ponylang/ponyc/pull/3135))\n- Use fixed-point inversion for `Random.int` if the platform allows. ([PR #3135](https://github.com/ponylang/ponyc/pull/3135))\n\n## [0.28.0] - 2019-03-22\n\n### Fixed\n\n- Ensure methods reached through a union are detected as reachable. ([PR #3102](https://github.com/ponylang/ponyc/pull/3102))\n- Fixed issue with ponyc not being able to find Visual Studio Build Tools in non-standard locations. ([PR #3086](https://github.com/ponylang/ponyc/pull/3086))\n- Update TCPConnection docs around local and remote addresses ([PR #3050](https://github.com/ponylang/ponyc/pull/3050))\n\n### Changed\n\n- Stop Supporting Ubuntu Artful ([PR #3100](https://github.com/ponylang/ponyc/pull/3100))\n- Upgrade Docker image to use LLVM 7.0.1 ([PR #3079](https://github.com/ponylang/ponyc/pull/3079))\n- Stop trying to be clever when finding user's LLVM installation ([PR #3077](https://github.com/ponylang/ponyc/pull/3077))\n- Stop supporting Ubuntu Trusty ([PR #3076](https://github.com/ponylang/ponyc/pull/3076))\n- Stop supporting Debian Jessie ([PR #3078](https://github.com/ponylang/ponyc/pull/3078))\n\n## [0.27.0] - 2019-03-01\n\n### Fixed\n\n- Fix default arguments not being displayed correctly in generated docs ([PR #3018](https://github.com/ponylang/ponyc/pull/3018))\n- Fix linker library version error on MacOS when installed via Homebrew ([PR #2998](https://github.com/ponylang/ponyc/pull/2998))\n- Correctly specify linkage on Windows for runtime library backpressure functions. ([PR #2989](https://github.com/ponylang/ponyc/pull/2989))\n- Reject Pointer and MaybePointer from being embedded ([PR #3006](https://github.com/ponylang/ponyc/pull/3006))\n\n### Added\n\n- Add FreeBSD 12 with LLVM 7 as supported platform ([PR #3039](https://github.com/ponylang/ponyc/pull/3039))\n- Windows implementation of Process and Pipe. ([PR #3019](https://github.com/ponylang/ponyc/pull/3019))\n- LLVM 7.0.1 compatibility ([PR #2976](https://github.com/ponylang/ponyc/pull/2976))\n- [RFC 61] Add Modulo Operator (and floored division) ([PR #2997](https://github.com/ponylang/ponyc/pull/2997))\n- Update Windows build system to handle the latest Visual Studio 2017 version ([PR #2992](https://github.com/ponylang/ponyc/pull/2992))\n\n### Changed\n\n- make String.f32() and String.f64() partial ([PR #3043](https://github.com/ponylang/ponyc/pull/3043))\n- Change `--ponyminthreads` default to `0` ([PR #3020](https://github.com/ponylang/ponyc/pull/3020))\n- Change default to disable pinning of scheduler threads to CPU cores ([PR #3024](https://github.com/ponylang/ponyc/pull/3024))\n- Fix linker library version error on MacOS when installed via Homebrew ([PR #2998](https://github.com/ponylang/ponyc/pull/2998))\n\n## [0.26.0] - 2019-01-25\n\n### Fixed\n\n- Fix signed/unsigned conversion bug in siphash24 implementation ([PR #2979](https://github.com/ponylang/ponyc/pull/2979))\n- Fixes for telemetry.stp script ([PR #2983](https://github.com/ponylang/ponyc/pull/2983))\n- libponyc: resolve relative paths in use \"path:...\" statements ([PR #2964](https://github.com/ponylang/ponyc/pull/2964))\n- Fix silent crash with incorrect time formats in Windows ([PR #2971](https://github.com/ponylang/ponyc/pull/2971))\n- Add whitespace between multiple args on cli help output ([PR #2942](https://github.com/ponylang/ponyc/pull/2942))\n- Fix unsafe cases in capability subtyping implementation ([PR #2660](https://github.com/ponylang/ponyc/pull/2660))\n- Fix race condition with socket close event from peer ([PR #2923](https://github.com/ponylang/ponyc/pull/2923))\n- Link to libexecinfo on BSD always, not just in a debug compiler ([PR #2916](https://github.com/ponylang/ponyc/pull/2916))\n- Install libdtrace_probes.a into the right directory on FreeBSD ([PR #2919](https://github.com/ponylang/ponyc/pull/2919))\n- Fix scheduler thread wakeup bug ([PR #2926](https://github.com/ponylang/ponyc/pull/2926))\n- Correct README.md link to AppImage packaging location ([PR #2927](https://github.com/ponylang/ponyc/pull/2927))\n- Fix unsoundness when replacing `this` viewpoint in method calls. ([PR #2503](https://github.com/ponylang/ponyc/pull/2503))\n\n### Added\n\n- [RFC 60] Add binary heaps ([PR #2950](https://github.com/ponylang/ponyc/pull/2950))\n- Make _SignedInteger and _UnsignedInteger public ([PR #2939](https://github.com/ponylang/ponyc/pull/2939))\n\n### Changed\n\n- Fix silent crash with incorrect time formats in Windows ([PR #2971](https://github.com/ponylang/ponyc/pull/2971))\n- Add before/after iteration hooks to ponybench ([PR #2898](https://github.com/ponylang/ponyc/pull/2898))\n\n## [0.25.0] - 2018-10-13\n\n### Fixed\n\n- Fix invalid allocation bug in runtime that allows for segfaults ([PR #2896](https://github.com/ponylang/ponyc/pull/2896))\n- `buffered` performance improvements and bug fix ([PR #2890](https://github.com/ponylang/ponyc/pull/2890))\n- Fix hash collision handling in persistent map ([PR #2894](https://github.com/ponylang/ponyc/pull/2894))\n- Correctly handle modifier keys for TTY stdin on Windows ([PR #2892](https://github.com/ponylang/ponyc/pull/2892))\n- Fix installation of libponyrt.bc on Linux ([PR #2893](https://github.com/ponylang/ponyc/pull/2893))\n- Fix compilation warning on windows. ([PR #2877](https://github.com/ponylang/ponyc/pull/2877))\n- Fix building on Windows in a directory with spaces in its name ([PR #2879](https://github.com/ponylang/ponyc/pull/2879))\n- Fix losing data when reading from STDIN. ([PR #2872](https://github.com/ponylang/ponyc/pull/2872))\n- Fix validation of provides lists of object literals. ([PR #2860](https://github.com/ponylang/ponyc/pull/2860))\n- Fix `files/Path.clean()` not correctly handling multiple `..` ([PR #2862](https://github.com/ponylang/ponyc/pull/2862))\n- Fix skipped try-then clauses on return, break and continue statements ([PR #2853](https://github.com/ponylang/ponyc/pull/2853))\n- Fix performance and memory consumption issues with `files.FileLines` ([PR #2707](https://github.com/ponylang/ponyc/pull/2707))\n- Fix ASIO one shot lost notifications problem ([PR #2897](https://github.com/ponylang/ponyc/pull/2897))\n\n### Added\n\n- Add ability to get iso array from an iso string. ([PR #2889](https://github.com/ponylang/ponyc/pull/2889))\n- Add modc method to integer types ([PR #2883](https://github.com/ponylang/ponyc/pull/2883))\n- Add divc method to integer types ([PR #2882](https://github.com/ponylang/ponyc/pull/2882))\n- [RFC 58] Add partial arithmetic for integer types ([PR #2865](https://github.com/ponylang/ponyc/pull/2865))\n- Added OpenBSD support. ([PR #2823](https://github.com/ponylang/ponyc/pull/2823))\n- Added `set_up` method to `ponytest.UnitTest` as equivalent to existing `tear_down` method ([PR #2707](https://github.com/ponylang/ponyc/pull/2707))\n- Added `keep_line_breaks` argument to function `buffered.Reader.line` ([PR #2707](https://github.com/ponylang/ponyc/pull/2707))\n\n### Changed\n\n- Rename mod and related operators to rem ([PR #2888](https://github.com/ponylang/ponyc/pull/2888))\n- Improved CHAMP map ([PR #2894](https://github.com/ponylang/ponyc/pull/2894))\n- Use RLIMIT_STACK's current limit for Pthreads stack size if it is sane ([PR #2852](https://github.com/ponylang/ponyc/pull/2852))\n- Remove `File.line` method in favor of using `FileLines` ([PR #2707](https://github.com/ponylang/ponyc/pull/2707))\n\n## [0.24.4] - 2018-07-29\n\n### Fixed\n\n- Fix array and string trim_in_place allocation bounds check ([PR #2840](https://github.com/ponylang/ponyc/pull/2840))\n\n## [0.24.3] - 2018-07-24\n\n### Added\n\n- Nothing - this was purely to fix a problem in the previously release\n\n## [0.24.2] - 2018-07-24\n\n### Fixed\n\n- Fix `make arch=XXXXX` command to be able to correctly find libponyrt.\n\n## [0.24.1] - 2018-07-22\n\n### Fixed\n\n- Add libexecinfo to debug builds for BSD ([PR #2826](https://github.com/ponylang/ponyc/pull/2826))\n\n### Added\n\n- Add SSL APLN support ([PR #2816](https://github.com/ponylang/ponyc/pull/2816))\n- Make dynamic scheduler scaling more robust and configurable ([PR #2801](https://github.com/ponylang/ponyc/pull/2801))\n\n## [0.24.0] - 2018-06-29\n\n### Fixed\n\n- Always use \"binary\" mode when opening files on Windows. ([PR #2811](https://github.com/ponylang/ponyc/pull/2811))\n- Do not set File._errno when reading less than requested bytes. ([PR #2785](https://github.com/ponylang/ponyc/pull/2785))\n- Correctly allocate memory for linker arguments ([PR #2797](https://github.com/ponylang/ponyc/pull/2797))\n- Fix build on DragonFly BSD ([PR #2794](https://github.com/ponylang/ponyc/pull/2794))\n- Fix some edge cases in code generation for loops that jump away. ([PR #2791](https://github.com/ponylang/ponyc/pull/2791))\n- Fix repeat loop symbol tracking to allow more valid cases. ([PR #2786](https://github.com/ponylang/ponyc/pull/2786))\n-  Fix incorrect disposable/destroyed epoll resubscribe handling ([PR #2781](https://github.com/ponylang/ponyc/pull/2781))\n- Fix GC-safety issue with writev pointers in File. ([PR #2775](https://github.com/ponylang/ponyc/pull/2775))\n- Disable neon for armhf if not supported by C/C++ compiler ([PR #2672](https://github.com/ponylang/ponyc/pull/2672))\n\n### Changed\n\n- Run cycle detector every N ms based on timer ([PR #2709](https://github.com/ponylang/ponyc/pull/2709))\n- [RFC 55] Remove package net/http from stdlib ([PR #2795](https://github.com/ponylang/ponyc/pull/2795))\n- Change refcap of JsonDoc to ref for better usability ([PR #2747](https://github.com/ponylang/ponyc/pull/2747))\n- Change NetAddress class to hide its fields behind functions, fixing cross-platform compatibility. ([PR #2734](https://github.com/ponylang/ponyc/pull/2734))\n\n## [0.23.0] - 2018-06-10\n\n### Fixed\n\n- Fix File.writev and File.flush in cases where the IO vector exceeds IOV_MAX. ([PR #2771](https://github.com/ponylang/ponyc/pull/2771))\n- Fix incorrect tuple handling ([PR #2763](https://github.com/ponylang/ponyc/pull/2763))\n- Fix Promise bug where join() element's reject doesn't reject the entire join ([PR #2770](https://github.com/ponylang/ponyc/pull/2770))\n\n### Added\n\n- Add Integer.bit_reverse, exposing the llvm.bitreverse intrinsic. ([PR #2710](https://github.com/ponylang/ponyc/pull/2710))\n\n### Changed\n\n- RFC 56: Make buffered.reader.line return String iso^ ([PR #2756](https://github.com/ponylang/ponyc/pull/2756))\n\n## [0.22.6] - 2018-06-07\n\n### Fixed\n\n- Fix compiler segfault caused by dead code removal of tupled variables ([PR #2757](https://github.com/ponylang/ponyc/pull/2757))\n- Fix `collections/persistent/Lists.from()` to return elements in the correct order ([PR #2754](https://github.com/ponylang/ponyc/pull/2754))\n- Fix performance related to dynamic scheduler scaling ([PR #2751](https://github.com/ponylang/ponyc/pull/2751))\n- Fix incorrect disposable/destroyed epoll resubscribe handling ([PR #2744](https://github.com/ponylang/ponyc/pull/2744))\n- Fix performance regression in serialization performance ([PR #2752](https://github.com/ponylang/ponyc/pull/2752))\n\n## [0.22.5] - 2018-06-05\n\n### Fixed\n\n- Fix memory overflow when allocating CPUs when numa is enabled ([PR #2745](https://github.com/ponylang/ponyc/pull/2745))\n\n## [0.22.4] - 2018-06-04\n\n### Fixed\n\n- Fix compiler crash related to union types with duplicate members. ([PR #2738](https://github.com/ponylang/ponyc/pull/2738))\n- Fix CommandSpec without args and help ([PR #2721](https://github.com/ponylang/ponyc/pull/2721))\n\n## [0.22.3] - 2018-05-31\n\n### Fixed\n\n- Only enable mcx16 for gcc for x86_64 targets ([PR #2725](https://github.com/ponylang/ponyc/pull/2725))\n- Fix String.concat ignoring the len parameter ([PR #2723](https://github.com/ponylang/ponyc/pull/2723))\n\n## [0.22.2] - 2018-05-26\n\n### Fixed\n\n- Relax ProcessMonitor checks for execute bits ([PR #2717](https://github.com/ponylang/ponyc/pull/2717))\n\n## [0.22.1] - 2018-05-25\n\n### Fixed\n\n- Broken docker image creation\n\n## [0.22.0] - 2018-05-24\n\n### Fixed\n\n- Incorrect rstrip handling of multibyte characters ([PR #2706](https://github.com/ponylang/ponyc/pull/2706))\n- Fix File.flush return value for case of zero bytes to flush. ([PR #2704](https://github.com/ponylang/ponyc/pull/2704))\n- Enable virtual terminal color output on Windows. ([PR #2702](https://github.com/ponylang/ponyc/pull/2702))\n- Compute File.writeable based on FileWrite instead of FileRead. ([PR #2698](https://github.com/ponylang/ponyc/pull/2698))\n- Do not use llvm.smul.with.overflow.i64 anymore ([PR #2693](https://github.com/ponylang/ponyc/pull/2693))\n- Change directory.open_file() to use readonly open ([PR #2697](https://github.com/ponylang/ponyc/pull/2697))\n- Avoid flattening arrow to type param, fixing typechecking when reified with another type param. ([PR #2692](https://github.com/ponylang/ponyc/pull/2692))\n- Fix File.valid() and clarify File behavior in error cases ([PR #2656](https://github.com/ponylang/ponyc/pull/2656))\n- Fix tuple pattern matching issue where only some elements would violate caps. ([PR #2658](https://github.com/ponylang/ponyc/pull/2658))\n- Fix scheduler suspend edge case assertion ([PR #2641](https://github.com/ponylang/ponyc/pull/2641))\n- Fix code generation failure with tuples in recover blocks ([PR #2642](https://github.com/ponylang/ponyc/pull/2642))\n- Do not mute sender if sender is under pressure ([PR #2644](https://github.com/ponylang/ponyc/pull/2644))\n- Fix FilePath.walk performance issues (issue #2158). ([PR #2634](https://github.com/ponylang/ponyc/pull/2634))\n- Fix backpressure-related TCPConnection busy-loop bug (issue #2620). ([PR #2627](https://github.com/ponylang/ponyc/pull/2627))\n- Fix off-by-one error in String.cstring ([PR #2616](https://github.com/ponylang/ponyc/pull/2616))\n- Fix compiler crash related to array inference. ([PR #2603](https://github.com/ponylang/ponyc/pull/2603))\n- Ensure ASIO thread cannot be stopped prematurely ([PR #2612](https://github.com/ponylang/ponyc/pull/2612))\n- Handle EAGAIN errors on socket operations ([PR #2611](https://github.com/ponylang/ponyc/pull/2611))\n- Properly report type parameter capability errors ([PR #2598](https://github.com/ponylang/ponyc/pull/2598))\n- Update the Windows build to support the latest Visual C++ Build Tools ([PR #2594](https://github.com/ponylang/ponyc/pull/2594))\n- Fix tracing of boxed tuples through interfaces ([PR #2593](https://github.com/ponylang/ponyc/pull/2593))\n- Partially mitigate LLVM's infinite loops bug ([PR #2592](https://github.com/ponylang/ponyc/pull/2592))\n- Fix extracting docstring from constructors ([PR #2586](https://github.com/ponylang/ponyc/pull/2586))\n- Always unsubscribe process_monitor fds before closing them (#2529) ([PR #2574](https://github.com/ponylang/ponyc/pull/2574))\n- Fix two race conditions where an ASIO wakeup notifications can be lost ([PR #2561](https://github.com/ponylang/ponyc/pull/2561))\n- Fix compiler crash in alternate name suggestion logic (issue #2508). ([PR #2552](https://github.com/ponylang/ponyc/pull/2552))\n- Make the File.open constructor use read-only mode (Issue #2567) ([PR #2568](https://github.com/ponylang/ponyc/pull/2568))\n- Correctly typecheck FFI arguments with regard to aliasing ([PR #2550](https://github.com/ponylang/ponyc/pull/2550))\n- Allow tuples to match empty interfaces ([PR #2532](https://github.com/ponylang/ponyc/pull/2532))\n- Properly report default argument inference errors ([PR #2504](https://github.com/ponylang/ponyc/pull/2504))\n- Do not catch foreign exceptions in Pony try blocks. This still doesn't work on Windows, foreign code doesn't catch foreign exceptions if they've traversed a Pony frame. ([PR #2466](https://github.com/ponylang/ponyc/pull/2466))\n- Fix LLVM IR verification with DoNotOptimise ([PR #2506](https://github.com/ponylang/ponyc/pull/2506))\n\n### Added\n\n- Add addc, subc and mulc functions to I128 and U128 ([PR #2645](https://github.com/ponylang/ponyc/pull/2645))\n- Add mechanism to register (noisy) signal handler ([PR #2631](https://github.com/ponylang/ponyc/pull/2631))\n- Added `nosupertype` annotation for subtyping exclusion (RFC 54). ([PR #2678](https://github.com/ponylang/ponyc/pull/2678))\n- `SourceLoc.type_name` method ([PR #2643](https://github.com/ponylang/ponyc/pull/2643))\n- Update with experimental support for LLVM 6.0.0 ([PR #2595](https://github.com/ponylang/ponyc/pull/2595))\n- Improve pattern matching error reporting ([PR #2628](https://github.com/ponylang/ponyc/pull/2628))\n- Allow recovering at most one element of a tuple to mutable capability. ([PR #2585](https://github.com/ponylang/ponyc/pull/2585))\n- Add full'ish support for network socket get & set options ([PR #2513](https://github.com/ponylang/ponyc/pull/2513))\n- Add basic compiler plugins ([PR #2566](https://github.com/ponylang/ponyc/pull/2566))\n- [RFC 50] add member docstrings ([PR #2543](https://github.com/ponylang/ponyc/pull/2543))\n- Allow user defined help string at CommandSpec.add_help() ([PR #2535](https://github.com/ponylang/ponyc/pull/2535))\n- Embed source code into generated documentation. ([PR #2439](https://github.com/ponylang/ponyc/pull/2439))\n- Compile error when comparing sugared constructors with 'is' or 'isnt' (#2024) ([PR #2494](https://github.com/ponylang/ponyc/pull/2494))\n- Support OpenSSL 1.1.0 ([PR #2415](https://github.com/ponylang/ponyc/pull/2415))\n- Add U64 type to `cli` package. ([PR #2488](https://github.com/ponylang/ponyc/pull/2488))\n- Allow customisation of `Env.input` and `Env.exitcode` in artificial environments\n- `hash64()` function and related helper types in `collections` for 64-bit hashes ([PR #2615](https://github.com/ponylang/ponyc/pull/2615))\n\n### Changed\n\n- `SourceLoc.method` renamed as `SourceLoc.method_name` method ([PR #2643](https://github.com/ponylang/ponyc/pull/2643))\n- New Ponybench API (RFC 52) ([PR #2578](https://github.com/ponylang/ponyc/pull/2578))\n- Forbid impossible pattern matching on generic capabilities ([PR #2499](https://github.com/ponylang/ponyc/pull/2499))\n- Remove case functions ([PR #2542](https://github.com/ponylang/ponyc/pull/2542))\n- Rename Date to PosixDate ([PR #2436](https://github.com/ponylang/ponyc/pull/2436))\n- Fix and re-enable dynamic scheduler scaling ([PR #2483](https://github.com/ponylang/ponyc/pull/2483))\n- Expose OutStream rather than StdStream in Env ([PR #2463](https://github.com/ponylang/ponyc/pull/2463))\n- Rename StdinNotify to InputNotify\n- `digestof` and `hash()` now return USize instead of U64 ([PR #2615](https://github.com/ponylang/ponyc/pull/2615))\n\n## [0.21.3] - 2018-01-14\n\n### Fixed\n\n- Fix pthread condition variable usage for dynamic scheduler scaling ([PR #2472](https://github.com/ponylang/ponyc/pull/2472))\n- Fix various memory leaks ([PR #2479](https://github.com/ponylang/ponyc/pull/2479))\n- Fix double free in expr_typeref ([PR #2467](https://github.com/ponylang/ponyc/pull/2467))\n- Fix some spurious process manager test failures ([PR #2452](https://github.com/ponylang/ponyc/pull/2452))\n- Fix ANTLR definition for char escape sequences ([PR #2440](https://github.com/ponylang/ponyc/pull/2440))\n\n### Added\n\n- Add the pony_try function to receive Pony errors in C code ([PR #2457](https://github.com/ponylang/ponyc/pull/2457))\n\n### Changed\n\n- Disable -avx512f on LLVM < 5.0.0 to avoid LLVM bug 30542 ([PR #2475](https://github.com/ponylang/ponyc/pull/2475))\n- Deprecate LLVM 3.7.1 and 3.8.1 support ([PR #2461](https://github.com/ponylang/ponyc/pull/2461))\n\n## [0.21.2] - 2017-12-26\n\n### Fixed\n\n- Don't suspend schedulers if terminating and reset steal_attempts on wake ([PR #2447](https://github.com/ponylang/ponyc/pull/2447))\n\n## [0.21.1] - 2017-12-23\n\n### Added\n\n- Dynamic scheduler thread scaling based on workload ([PR #2386](https://github.com/ponylang/ponyc/pull/2386))\n- Support setting the binary executable name with `--bin-name`. ([PR #2430](https://github.com/ponylang/ponyc/pull/2430))\n\n## [0.21.0] - 2017-12-17\n\n### Fixed\n\n- Forbid structs with embed fields with finalisers ([PR #2420](https://github.com/ponylang/ponyc/pull/2420))\n- Fix codegen ordering of implicit finalisers ([PR #2419](https://github.com/ponylang/ponyc/pull/2419))\n- Fix GC tracing of struct fields ([PR #2418](https://github.com/ponylang/ponyc/pull/2418))\n- Remove redundant error message for unhandled partial calls that are actually in a try block. ([PR #2411](https://github.com/ponylang/ponyc/pull/2411))\n- Fix allocation sizes in runtime benchmarks ([PR #2383](https://github.com/ponylang/ponyc/pull/2383))\n- Fail pony_start if ASIO backend wasn't successfully initialized ([PR #2381](https://github.com/ponylang/ponyc/pull/2381))\n- Make windows sleep consistent with non-windows sleep ([PR #2382](https://github.com/ponylang/ponyc/pull/2382))\n- Fix Iter.{skip,take,nth} to check '.has_next()' of their inner iterator ([PR #2377](https://github.com/ponylang/ponyc/pull/2377))\n- Restart ASIO if needed while runtime is attempting to terminate. ([PR #2373](https://github.com/ponylang/ponyc/pull/2373))\n- fix Range with negative or 0 step and allow backward Ranges (having `min > max`) ([PR #2350](https://github.com/ponylang/ponyc/pull/2350))\n- Improve work-stealing \"scheduler is blocked\" logic ([PR #2355](https://github.com/ponylang/ponyc/pull/2355))\n- Make take_while short-circuit ([PR #2358](https://github.com/ponylang/ponyc/pull/2358))\n- Fix compilation error with 'use=dtrace' for FreeBSD 11 ([PR #2343](https://github.com/ponylang/ponyc/pull/2343))\n- Fix Set.intersect ([PR #2361](https://github.com/ponylang/ponyc/pull/2361))\n-  Fixed state handling of HTTP client connections ([PR #2273](https://github.com/ponylang/ponyc/pull/2273))\n- Fix incorrect detection of exhaustive matches for structural equality comparisons on some primitives. ([PR #2342](https://github.com/ponylang/ponyc/pull/2342))\n- Fix poor randomness properties of first call to `Rand.next()`. ([PR #2321](https://github.com/ponylang/ponyc/pull/2321))\n- Fully close unspecified family TCP connections on Windows. ([PR #2325](https://github.com/ponylang/ponyc/pull/2325))\n- Make ContentsLogger implement the Logger interface ([PR #2330](https://github.com/ponylang/ponyc/pull/2330))\n- Fix alloc bug in String/Array trimming functions ([PR #2336](https://github.com/ponylang/ponyc/pull/2336))\n- Fix small chunk finaliser premature re-use bug ([PR #2335](https://github.com/ponylang/ponyc/pull/2335))\n- Make Payload.respond() send given parameter, not `this`. ([PR #2324](https://github.com/ponylang/ponyc/pull/2324))\n- Garbage collect actors when --ponynoblock is in use ([PR #2307](https://github.com/ponylang/ponyc/pull/2307))\n- Fix incorrect kevent structure size ([PR #2312](https://github.com/ponylang/ponyc/pull/2312))\n- Fix possible repetition in Iter.flat_map ([PR #2304](https://github.com/ponylang/ponyc/pull/2304))\n\n### Added\n\n- Add DTrace probes for all message push and pop operations ([PR #2295](https://github.com/ponylang/ponyc/pull/2295))\n- Experimental support for LLVM 4.0.1 (#1592) and 5.0.0. ([PR #2303](https://github.com/ponylang/ponyc/pull/2303))\n- Add pony stable to docker image ([PR #2364](https://github.com/ponylang/ponyc/pull/2364))\n- Enable CodeView debug information with MSVC on Windows ([PR #2334](https://github.com/ponylang/ponyc/pull/2334))\n- Generalized runtime backpressure. ([PR #2264](https://github.com/ponylang/ponyc/pull/2264))\n- A microbenchmark for measuring message passing rates in the Pony runtime. ([PR #2347](https://github.com/ponylang/ponyc/pull/2347))\n- Add `chop` function for chopping `iso` Strings and Arrays ([PR #2337](https://github.com/ponylang/ponyc/pull/2337))\n- Add --ponyversion option to compiled binary ([PR #2318](https://github.com/ponylang/ponyc/pull/2318))\n- Implement RFC 47 (Serialise signature) ([PR #2272](https://github.com/ponylang/ponyc/pull/2272))\n\n### Changed\n\n- Remove unused FormatSettings interface and related types. ([PR #2397](https://github.com/ponylang/ponyc/pull/2397))\n- Error on unreachable cases in match expressions and illegal as expressions. ([PR #2289](https://github.com/ponylang/ponyc/pull/2289))\n\n## [0.20.0] - 2017-10-17\n\n### Fixed\n\n- Forbid single '_' in case expr and case methods ([PR #2269](https://github.com/ponylang/ponyc/pull/2269))\n\n### Changed\n\n- Turn off LTO by default on OSX ([PR #2284](https://github.com/ponylang/ponyc/pull/2284))\n- Replace memory-leak-inciting `Writer.reserve` with more intuitive `Writer.reserve_current` method. ([PR #2260](https://github.com/ponylang/ponyc/pull/2260))\n\n## [0.19.3] - 2017-10-09\n\n### Fixed\n\n- Don't verify partial calls for method bodies inherited from a trait. ([PR #2261](https://github.com/ponylang/ponyc/pull/2261))\n- Fix broken method and type headings in generated documentation ([PR #2262](https://github.com/ponylang/ponyc/pull/2262))\n- Fix array inference from ReadSeq interface with tuple element type. ([PR #2259](https://github.com/ponylang/ponyc/pull/2259))\n- Fix compiler crash related to inferred lambda argument in apply sugar. ([PR #2258](https://github.com/ponylang/ponyc/pull/2258))\n- Fix excess work stealing under low loads ([PR #2254](https://github.com/ponylang/ponyc/pull/2254))\n- Fix compiler crash on case methods with `_` as a method parameter. ([PR #2252](https://github.com/ponylang/ponyc/pull/2252))\n- Fix implicit fallthrough in array inference. ([PR #2251](https://github.com/ponylang/ponyc/pull/2251))\n- Fix small chunk finaliser bug. ([PR #2257](https://github.com/ponylang/ponyc/pull/2257))\n\n## [0.19.2] - 2017-09-24\n\n### Fixed\n\n- Fix codegen failure on field access ([PR #2244](https://github.com/ponylang/ponyc/pull/2244))\n- Make Windows link step use the command-line `--linker` value if present. ([PR #2231](https://github.com/ponylang/ponyc/pull/2231))\n- Fix empty string serialisation ([PR #2247](https://github.com/ponylang/ponyc/pull/2247))\n\n### Added\n\n- Added Array.swap_elements, Random.shuffle and extends Random with methods for generating all Integer types (RFC 46). ([PR #2128](https://github.com/ponylang/ponyc/pull/2128))\n\n## [0.19.1] - 2017-09-14\n\n### Fixed\n\n- Fix broken \"make\" command ([PR #2220](https://github.com/ponylang/ponyc/pull/2220))\n- Fix inconsistencies in multi-line triple-quoted strings ([PR #2221](https://github.com/ponylang/ponyc/pull/2221))\n- Fix undersized string buffer for library link command in Windows. ([PR #2223](https://github.com/ponylang/ponyc/pull/2223))\n- Fix Iter.take to handle infinite iterator ([PR #2212](https://github.com/ponylang/ponyc/pull/2212))\n- Fix handling of empty and multi-byte character literals ([PR #2214](https://github.com/ponylang/ponyc/pull/2214))\n\n### Added\n\n- Inference of lambda type and array element type from an antecedent (RFC 45). ([PR #2168](https://github.com/ponylang/ponyc/pull/2168))\n\n## [0.19.0] - 2017-09-02\n\n### Fixed\n\n- Fix codegen failures on incompatible FFI declarations ([PR #2205](https://github.com/ponylang/ponyc/pull/2205))\n- Disallow named arguments for methods of a type union where parameter names differ ([PR #2194](https://github.com/ponylang/ponyc/pull/2194))\n- Fix compiler crash on illegal read from '_' ([PR #2201](https://github.com/ponylang/ponyc/pull/2201))\n- Fix signals on Sierra ([PR #2195](https://github.com/ponylang/ponyc/pull/2195))\n- Fix race condition in kqueue event system implementation ([PR #2193](https://github.com/ponylang/ponyc/pull/2193))\n\n### Added\n\n- `pony_chain` runtime function\n\n### Changed\n\n- The `pony_sendv` and `pony_sendv_single` runtime functions now take a message chain instead of a single message\n- Improve the itertools API (RFC 49) ([PR #2190](https://github.com/ponylang/ponyc/pull/2190))\n- Forbid struct finalisers ([PR #2202](https://github.com/ponylang/ponyc/pull/2202))\n\n## [0.18.1] - 2017-08-25\n\n### Fixed\n\n- Don't print capabilities for type params when generating docs ([PR #2184](https://github.com/ponylang/ponyc/pull/2184))\n\n### Added\n\n- DragonFly BSD 4.8 support ([PR #2183](https://github.com/ponylang/ponyc/pull/2183))\n- Process monitor async write buffering ([PR #2186](https://github.com/ponylang/ponyc/pull/2186))\n\n## [0.18.0] - 2017-08-19\n\n### Fixed\n\n- Fix compiler crash on union-of-tuples to tuple conversions ([PR #2176](https://github.com/ponylang/ponyc/pull/2176))\n- Fix compiler error on lambda capture of '_' ([PR #2171](https://github.com/ponylang/ponyc/pull/2171))\n- Fix read past the end of a buffer in `pool.c`. ([PR #2139](https://github.com/ponylang/ponyc/pull/2139))\n\n### Changed\n\n- Make actor continuations a build time option ([PR #2179](https://github.com/ponylang/ponyc/pull/2179))\n- RFC #48 Change String.join to take Iterable ([PR #2159](https://github.com/ponylang/ponyc/pull/2159))\n- Change fallback linker to \"gcc\" from \"gcc-6\" on Linux. ([PR #2166](https://github.com/ponylang/ponyc/pull/2166))\n- Change the signature of `pony_continuation` and `pony_triggergc` to take a `pony_ctx_t*` instead of a `pony_actor_t*`.\n\n## [0.17.0] - 2017-08-05\n\n### Fixed\n\n- Fix cursor location for displaying compiler errors and info. ([PR #2136](https://github.com/ponylang/ponyc/pull/2136))\n- Fix indent detection when lexing docstrings that contain whitespace-only lines. ([PR #2131](https://github.com/ponylang/ponyc/pull/2131))\n- Fix compiler crash on typecheck error in FFI call. ([PR #2124](https://github.com/ponylang/ponyc/pull/2124))\n- Fix compiler assert on match including structural equality on union type. ([PR #2117](https://github.com/ponylang/ponyc/pull/2117))\n\n### Added\n\n- Support GCC7 on Linux ([PR #2134](https://github.com/ponylang/ponyc/pull/2134))\n- Add regex match iterator ([PR #2109](https://github.com/ponylang/ponyc/pull/2109))\n- Add more promise methods (RFC 35) ([PR #2084](https://github.com/ponylang/ponyc/pull/2084))\n- Add ability to default enable PIC when compiling ponyc ([PR #2113](https://github.com/ponylang/ponyc/pull/2113))\n\n### Changed\n\n- Treat `as` type of array literals as the alias of the element type. ([PR #2126](https://github.com/ponylang/ponyc/pull/2126))\n- docgen: ignore test types and add cli flag to only document public types ([PR #2112](https://github.com/ponylang/ponyc/pull/2112))\n\n## [0.16.1] - 2017-07-30\n\n### Fixed\n\n- Fix reachability analysis for intersection types ([PR #2106](https://github.com/ponylang/ponyc/pull/2106))\n- Fix compiler assertion failure at code generation ([PR #2099](https://github.com/ponylang/ponyc/pull/2099))\n- FreeBSD builds([PR #2107](https://github.com/ponylang/ponyc/pull/2107))\n\n## [0.16.0] - 2017-07-28\n\n### Fixed\n\n- Fix compiler assertion failure on unused reference to `_` ([PR #2091](https://github.com/ponylang/ponyc/pull/2091))\n- Destroy all actors on runtime termination ([PR #2058](https://github.com/ponylang/ponyc/pull/2058))\n- Fixed compiler segfault on empty triple quote comment. ([PR #2053](https://github.com/ponylang/ponyc/pull/2053))\n- Fix compiler crash on exhaustive match where last case is a union subset ([PR #2049](https://github.com/ponylang/ponyc/pull/2049))\n- Make pony_os_std_print() write a newline when given empty input. ([PR #2050](https://github.com/ponylang/ponyc/pull/2050))\n- Fix boxed tuple identity when type identifiers differ ([PR #2009](https://github.com/ponylang/ponyc/pull/2009))\n- Fix crash on interface function pointer generation ([PR #2025](https://github.com/ponylang/ponyc/pull/2025))\n\n### Added\n\n- Alpine Linux compatibility for pony ([PR #1844](https://github.com/ponylang/ponyc/pull/1844))\n- Add cli package implementing the CLI syntax ([RFC #38](https://github.com/ponylang/rfcs/blob/main/text/0038-cli-format.md))\n   - Initial ([PR #1897](https://github.com/ponylang/ponyc/pull/1897)) implemented the full RFC and contained:\n      - Enhanced Posix / GNU program argument syntax.\n      - Commands and sub-commands.\n      - Bool, String, I64 and F64 option / arg types.\n      - Help command and syntax errors with formatted output.\n   - Update ([PR #2019](https://github.com/ponylang/ponyc/pull/2019)) added:\n      - String-seq (ReadSeq[String]) types for repeated string options / args.\n      - Command fullname() to make it easier to match on unique command names.\n      - Checking that commands are leaves so that partial commands return syntax errors.\n\n### Changed\n\n- Forbid returning and passing tuples to FFI functions ([PR #2012](https://github.com/ponylang/ponyc/pull/2012))\n- Deprecate support of Clang 3.3\n- Explicit partial calls - a question mark is now required to be at the call site for every call to a partial function.\n    - See [RFC 39](https://github.com/ponylang/rfcs/blob/main/text/0039-explicit-partial-calls.md).\n    - Migration scripts for user code, for convenience, are provided here:\n        - [Unix](https://gist.github.com/jemc/95969e3e2b58ddb0dede138c737907f5)\n        - [Windows](https://gist.github.com/kulibali/cd5caf3a32d510bb86412f3fd4d52d0f)\n\n## [0.15.0] - 2017-07-08\n\n### Fixed\n\n- Fix bug in `as` capture ([PR #1981](https://github.com/ponylang/ponyc/pull/1981))\n- Fix assert failure on lambda parameter missing type. ([PR #2011](https://github.com/ponylang/ponyc/pull/2011))\n- Fix iftype where the type variable appears as a type parameter. ([PR #2007](https://github.com/ponylang/ponyc/pull/2007))\n- Fix support for recursive constraints in iftype conditions. ([PR #1961](https://github.com/ponylang/ponyc/pull/1961))\n- Fix segfault in Array.trim_in_place ([PR #1999](https://github.com/ponylang/ponyc/pull/1999))\n- Fix segfault in String.trim_in_place ([PR #1997](https://github.com/ponylang/ponyc/pull/1997))\n- Assertion failure with directly recursive trait ([PR #1989](https://github.com/ponylang/ponyc/pull/1989))\n- Add compile error for generic Main ([PR #1970](https://github.com/ponylang/ponyc/pull/1970))\n- Prevent duplicate long_tests from being registered ([PR #1962](https://github.com/ponylang/ponyc/pull/1962))\n- Assertion failure on identity comparison of tuples with different cardinalities ([PR #1946](https://github.com/ponylang/ponyc/pull/1946))\n- Stop default arguments from using the function scope ([PR #1948](https://github.com/ponylang/ponyc/pull/1948))\n- Fix compiler crash when a field is used in a default argument. ([PR #1940](https://github.com/ponylang/ponyc/pull/1940))\n- Fix compiler crash on non-existent field reference in constructor. ([PR #1941](https://github.com/ponylang/ponyc/pull/1941))\n- Fix compiler crash on \"_\" as argument in a case expression. ([PR #1924](https://github.com/ponylang/ponyc/pull/1924))\n- Fix compiler crash on type argument error inside an early return. ([PR #1923](https://github.com/ponylang/ponyc/pull/1923))\n- Correctly generate debug information in forwarding methods ([PR #1914](https://github.com/ponylang/ponyc/pull/1914))\n- Resolved compiler segfault on optimization pass (issue #1225) ([PR #1910](https://github.com/ponylang/ponyc/pull/1910))\n- Fix a bug in finaliser handling ([PR #1908](https://github.com/ponylang/ponyc/pull/1908))\n- Fix compiler crash for type errors in call arguments inside a tuple. ([PR #1906](https://github.com/ponylang/ponyc/pull/1906))\n- Fix compiler crash involving \"dont care\" symbol in an if or try block. ([PR #1907](https://github.com/ponylang/ponyc/pull/1907))\n- Don't call TCPConnection backpressure notifies incorrectly ([PR #1904](https://github.com/ponylang/ponyc/pull/1904))\n- Fix outdated methods in persistent.Map docstring. ([PR #1901](https://github.com/ponylang/ponyc/pull/1901))\n- Fix format for number types (issue #1920) ([PR #1927](https://github.com/ponylang/ponyc/pull/1927))\n\n### Added\n\n- Make tuples be subtypes of empty interfaces (like Any). ([PR #1937](https://github.com/ponylang/ponyc/pull/1937))\n- Add Persistent Vec (RFC 42) ([PR #1949](https://github.com/ponylang/ponyc/pull/1949))\n- Add support for custom serialisation (RFC 21) ([PR #1839](https://github.com/ponylang/ponyc/pull/1839))\n- Add persistent set (RFC 42) ([PR #1925](https://github.com/ponylang/ponyc/pull/1925))\n- Bare methods and bare lambdas (RFC 34) ([PR #1858](https://github.com/ponylang/ponyc/pull/1858))\n- xoroshiro128+ implementation ([PR #1909](https://github.com/ponylang/ponyc/pull/1909))\n- Exhaustive match ([RFC #40](https://github.com/ponylang/rfcs/blob/main/text/0040-exhaustive-match.md)) ([PR #1891](https://github.com/ponylang/ponyc/pull/1891))\n- Command line options for printing help ([PR #1899](https://github.com/ponylang/ponyc/pull/1899))\n- `Nanos.from_wall_clock` function to convert from a wall clock as obtained from `Time.now()` into number of nanoseconds since \"the beginning of time\". ([PR #1967](https://github.com/ponylang/ponyc/pull/1967))\n\n### Changed\n\n- Change machine word constructors to have no default argument. ([PR #1938](https://github.com/ponylang/ponyc/pull/1938))\n- Change iftype to use elseif instead of elseiftype as next keyword. ([PR #1905](https://github.com/ponylang/ponyc/pull/1905))\n- Removed misleading `Time.wall_to_nanos`. ([PR #1967](https://github.com/ponylang/ponyc/pull/1967))\n\n## [0.14.0] - 2017-05-06\n\n### Fixed\n\n- Compiler error instead of crash for invalid this-dot reference in a trait. ([PR #1879](https://github.com/ponylang/ponyc/pull/1879))\n- Compiler error instead of crash for too few args to constructor in case pattern. ([PR #1880](https://github.com/ponylang/ponyc/pull/1880))\n- Pony runtime hashmap bug that resulted in issues [#1483](https://github.com/ponylang/ponyc/issues/1483), [#1781](https://github.com/ponylang/ponyc/issues/1781), and [#1872](https://github.com/ponylang/ponyc/issues/1872). ([PR #1886](https://github.com/ponylang/ponyc/pull/1886))\n- Compiler crash when compiling to a library ([Issue #1881](https://github.com/ponylang/ponyc/issues/1881))([PR #1890](https://github.com/ponylang/ponyc/pull/1890))\n\n### Changed\n\n- TCPConnection.connect_failed, UDPNotify.not_listening, TCPListenNotify.not_listening no longer have default implementation. The programmer is now required to implement error handling or consciously choose to ignore. ([PR #1853](https://github.com/ponylang/ponyc/pull/1853)\n\n## [0.13.2] - 2017-04-29\n\n### Fixed\n\n- Don’t consider type arguments inside a constraint as constraints. ([PR #1870](https://github.com/ponylang/ponyc/pull/1870))\n- Disable mcx16 on aarch64 ([PR #1856](https://github.com/ponylang/ponyc/pull/1856))\n- Fix assert failure on explicit reference to `this` in constructor. (issue #1865) ([PR #1867](https://github.com/ponylang/ponyc/pull/1867))\n- Compiler crash when using unconstrained type parameters in an `iftype` condition (issue #1689)\n\n## [0.13.1] - 2017-04-22\n\n### Fixed\n\n- Reify function references used as addressof operands correctly ([PR #1857](https://github.com/ponylang/ponyc/pull/1857))\n- Properly account for foreign objects in GC ([PR #1842](https://github.com/ponylang/ponyc/pull/1842))\n- Compiler crash when using the `addressof` operator on a function with an incorrect number of type arguments\n\n### Added\n\n- Iftype conditions (RFC 26) ([PR #1855](https://github.com/ponylang/ponyc/pull/1855))\n\n## [0.13.0] - 2017-04-07\n\n### Fixed\n\n- Do not allow capability subtyping when checking constraint subtyping. ([PR #1816](https://github.com/ponylang/ponyc/pull/1816))\n- Allow persistent map to use any hash function ([PR #1799](https://github.com/ponylang/ponyc/pull/1799))\n\n### Changed\n\n- Pass # of times called to TCPConnectionNotify.received ([PR #1777](https://github.com/ponylang/ponyc/pull/1777))\n\n## [0.12.3] - 2017-04-01\n\n### Fixed\n\n- Improve Visual Studio and Microsoft C++ Build Tools detection. ([PR #1794](https://github.com/ponylang/ponyc/pull/1794))\n\n## [0.12.2] - 2017-03-30\n\n### Fixed\n\n- Fix extreme CPU use in scheduler on Windows ([PR #1785](https://github.com/ponylang/ponyc/pull/1785))\n- Fix broken ponytest \"only\" filter ([PR #1780](https://github.com/ponylang/ponyc/pull/1780))\n\n## [0.12.1] - 2017-03-29\n\n### Fixed\n\n- Bug in ponytest resulted in all tests being skipped ([PR #1778](https://github.com/ponylang/ponyc/pull/1778))\n\n## [0.12.0] - 2017-03-29\n\n### Fixed\n\n- Don't ignore buffer length when printing ([PR #1768](https://github.com/ponylang/ponyc/pull/1768))\n- Ifdef out ANSITerm signal handler for SIGWINCH ([PR #1763](https://github.com/ponylang/ponyc/pull/1763))\n- Fix build error on 32 bits systems ([PR #1762](https://github.com/ponylang/ponyc/pull/1762))\n- Fix annotation-related compiler assertion failure (issue #1751) ([PR #1757](https://github.com/ponylang/ponyc/pull/1757))\n- Improve packaged Linux binary performance ([PR #1755](https://github.com/ponylang/ponyc/pull/1755))\n- Fix false positive test failure on 32 bits ([PR #1749](https://github.com/ponylang/ponyc/pull/1749))\n\n### Added\n\n- Support XCode 8.3 and LLVM 3.9 ([PR #1765](https://github.com/ponylang/ponyc/pull/1765))\n\n### Changed\n\n- Arrays as sequences ([PR #1741](https://github.com/ponylang/ponyc/pull/1741))\n- Add ability for ponytest to exclude tests based on name ([PR #1717](https://github.com/ponylang/ponyc/pull/1717))\n- Renamed ponytest \"filter\" flag to \"only\" ([PR #1717](https://github.com/ponylang/ponyc/pull/1717))\n\n## [0.11.4] - 2017-03-23\n\n### Fixed\n\n- Identity comparison of boxed values ([PR #1726](https://github.com/ponylang/ponyc/pull/1726))\n- Reify type refs in inherited method bodies ([PR #1722](https://github.com/ponylang/ponyc/pull/1722))\n- Fix compilation error on non-x86 systems ([PR #1718](https://github.com/ponylang/ponyc/pull/1718))\n- Call finalisers for embedded fields when parent type has no finalizer. ([PR #1629](https://github.com/ponylang/ponyc/pull/1629))\n- Fix compiling errors for 32-bit ([PR #1709](https://github.com/ponylang/ponyc/pull/1709))\n- Improved persistent map api (RFC 36) ([PR #1705](https://github.com/ponylang/ponyc/pull/1705))\n- Fix compiler assert on arrow to typeparam in constraint. ([PR #1701](https://github.com/ponylang/ponyc/pull/1701))\n- Segmentation fault on runtime termination.\n\n## [0.11.3] - 2017-03-16\n\n### Fixed\n\n- Build Linux release binaries correctly ([PR #1699](https://github.com/ponylang/ponyc/pull/1699))\n\n## [0.11.2] - 2017-03-16\n\n### Fixed\n\n- Fix illegal instruction errors on older cpus when using packaged Pony ([PR #1686](https://github.com/ponylang/ponyc/pull/1686))\n- Correctly pass `arch=` when building docker image ([PR #1681](https://github.com/ponylang/ponyc/pull/1681))\n\n### Changed\n\n- Make buffered.Reader.append accept any ByteSeq. ([PR #1644](https://github.com/ponylang/ponyc/pull/1644))\n\n## [0.11.1] - 2017-03-14\n\n### Fixed\n\n- Fix AVX/AVX2 issues with prebuilt ponyc ([PR #1663](https://github.com/ponylang/ponyc/pull/1663))\n- Fix linking with '--as-needed' (sensitive to linking order) ([PR #1654](https://github.com/ponylang/ponyc/pull/1654))\n- Fix FreeBSD 11 compilation\n\n## [0.11.0] - 2017-03-11\n\n### Fixed\n\n- Make HTTPSession type tag by default ([PR #1650](https://github.com/ponylang/ponyc/pull/1650))\n- Fix type parameters not being visible to a lambda type in a type alias ([PR #1633](https://github.com/ponylang/ponyc/pull/1633))\n- Remove the check for union types on match error ([PR #1630](https://github.com/ponylang/ponyc/pull/1630))\n- TCPListener: unsubscribe asio before socket close ([PR #1626](https://github.com/ponylang/ponyc/pull/1626))\n- Fix buffer overflow in case method docstring ([PR #1615](https://github.com/ponylang/ponyc/pull/1615))\n- Fix capability checking for gencap-constrained type parameters. ([PR #1593](https://github.com/ponylang/ponyc/pull/1593))\n- Fix error in ANTLR grammar regarding duplicate '-~'. (#1602) ([PR #1604](https://github.com/ponylang/ponyc/pull/1604))\n- Escape special characters in ANLTR strings. (#1600) ([PR #1601](https://github.com/ponylang/ponyc/pull/1601))\n- Use LLVM to detect CPU features by default if --features aren't specified. ([PR #1580](https://github.com/ponylang/ponyc/pull/1580))\n- Always call finalisers for embedded fields ([PR #1586](https://github.com/ponylang/ponyc/pull/1586))\n- Check for null terminator in String._append ([PR #1582](https://github.com/ponylang/ponyc/pull/1582))\n- Fix TCP Connection data receive race condition ([PR #1578](https://github.com/ponylang/ponyc/pull/1578))\n- Fix Linux epoll event resubscribe performance and race condition. ([PR #1564](https://github.com/ponylang/ponyc/pull/1564))\n- Correctly resubscribe TCPConnection to ASIO events after throttling ([PR #1558](https://github.com/ponylang/ponyc/pull/1558))\n- Performance fix in the runtime actor schedule ([PR #1521](https://github.com/ponylang/ponyc/pull/1521))\n- Disallow type parameter names shadowing other types. ([PR #1526](https://github.com/ponylang/ponyc/pull/1526))\n- Don't double resubscribe to asio events in TCPConnection ([PR #1509](https://github.com/ponylang/ponyc/pull/1509))\n- Improve Map.get_or_else performance ([PR #1482](https://github.com/ponylang/ponyc/pull/1482))\n- Back pressure notifications now given when encountered while sending data during `TCPConnection` pending writes\n- Improve efficiency of muted TCPConnection on non Windows platforms ([PR #1477](https://github.com/ponylang/ponyc/pull/1477))\n- Compiler assertion failure during type checking\n- Runtime memory allocator bug\n- Compiler crash on tuple sending generation (issue #1546)\n- Compiler crash due to incorrect subtype assignment (issue #1474)\n- Incorrect code generation when sending certain types of messages (issue #1594)\n\n### Added\n\n- Close over free variables in lambdas and object literals ([PR #1648](https://github.com/ponylang/ponyc/pull/1648))\n- Add assert_no_error test condition to PonyTest ([PR #1605](https://github.com/ponylang/ponyc/pull/1605))\n- Expose `st_dev` and `st_ino` fields of stat structure ([PR #1589](https://github.com/ponylang/ponyc/pull/1589))\n- Packed structures (RFC 32) ([PR #1536](https://github.com/ponylang/ponyc/pull/1536))\n- Add `insert_if_absent` method to Map ([PR #1519](https://github.com/ponylang/ponyc/pull/1519))\n- Branch prediction annotations (RFC 30) ([PR #1528](https://github.com/ponylang/ponyc/pull/1528))\n- Readline interpret C-d on empty line as EOF ([PR #1504](https://github.com/ponylang/ponyc/pull/1504))\n- AST annotations (RFC 27) ([PR #1485](https://github.com/ponylang/ponyc/pull/1485))\n- Unsafe mathematic and logic operations. Can be faster but can have undefined results for some inputs (issue #993)\n- Equality comparison for NetAddress ([PR #1569](https://github.com/ponylang/ponyc/pull/1569))\n- Host address comparison for NetAddress ([PR #1569](https://github.com/ponylang/ponyc/pull/1569))\n\n### Changed\n\n- Rename IPAddress to NetAddress ([PR #1559](https://github.com/ponylang/ponyc/pull/1559))\n- Remove delegates (RFC 31) ([PR #1534](https://github.com/ponylang/ponyc/pull/1534))\n- Upgrade to LLVM 3.9.1 ([PR #1498](https://github.com/ponylang/ponyc/pull/1498))\n- Deprecate LLVM 3.6.2 support ([PR #1511](https://github.com/ponylang/ponyc/pull/1511)) ([PR #1502](https://github.com/ponylang/ponyc/pull/1502)) (PR ##1512)\n- Ensure TCPConnection is established before writing data to it (issue #1310)\n- Always allow writing to `_` (dontcare) ([PR #1499](https://github.com/ponylang/ponyc/pull/1499))\n- Methods returning their receiver to allow call chaining have been changed to return either None or some useful value. Generalised method chaining implemented in version 0.9.0 should be used as a replacement. The full list of updated methods follows. No details means that the method now returns None.\n  - builtin.Seq\n    - reserve\n    - clear\n    - push\n    - unshift\n    - append\n    - concat\n    - truncate\n  - builtin.Array\n    - reserve\n    - compact\n    - undefined\n    - insert\n    - truncate\n    - trim_in_place\n    - copy_to\n    - remove\n    - clear\n    - push\n    - unshift\n    - append\n    - concat\n    - reverse_in_place\n  - builtin.String\n    - reserve\n    - compact\n    - recalc\n    - truncate\n    - trim_in_place\n    - delete\n    - lower_in_place\n    - upper_in_place\n    - reverse_in_place\n    - push\n    - unshift\n    - append\n    - concat\n    - clear\n    - insert_in_place\n    - insert_byte\n    - cut_in_place\n    - replace (returns the number of occurrences replaced)\n    - strip\n    - lstrip\n    - rstrip\n  - buffered.Reader\n    - clear\n    - append\n    - skip\n  - buffered.Writer\n    - reserve\n    - reserve_chunks\n    - number writing functions (e.g. u16_le)\n    - write\n    - writev\n  - capsicum.CapRights0\n    - set\n    - unset\n  - collections.Flag\n    - all\n    - clear\n    - set\n    - unset\n    - flip\n    - union\n    - intersect\n    - difference\n    - remove\n  - collections.ListNode\n    - prepend (returns whether the node was removed from another List)\n    - append (returns whether the node was removed from another List)\n    - remove\n  - collections.List\n    - reserve\n    - remove\n    - clear\n    - prepend_node\n    - append_node\n    - prepend_list\n    - append_list\n    - push\n    - unshift\n    - append\n    - concat\n    - truncate\n  - collections.Map\n    - concat\n    - compact\n    - clear\n  - collections.RingBuffer\n    - push (returns whether the collection was full)\n    - clear\n  - collections.Set\n    - clear\n    - set\n    - unset\n    - union\n    - intersect\n    - difference\n    - remove\n  - files.FileMode\n    - exec\n    - shared\n    - group\n    - private\n  - files.File\n    - seek_start\n    - seek_end\n    - seek\n    - flush\n    - sync\n  - time.Date\n    - normal\n  - net.http.Payload\n    - update (returns the old value)\n  - net.ssl.SSLContext\n    - set_cert\n    - set_authority\n    - set_ciphers\n    - set_client_verify\n    - set_server_verify\n    - set_verify_depth\n    - allow_tls_v1\n    - allow_tls_v1_1\n    - allow_tls_v1_2\n- TCP sockets on Linux now use Epoll One Shot\n- Non-sendable locals and parameters are now seen as `tag` inside of recover expressions instead of being inaccessible.\n- TCP sockets on FreeBSD and MacOSX now use Kqueue one shot\n- All arithmetic and logic operations are now fully defined for every input by default (issue #993)\n- Removed compiler flag `--ieee-math`\n- The `pony_start` runtime function now takes a `language_features` boolean parameter indicating whether the Pony-specific runtime features (e.g. network or serialisation) should be initialised\n\n## [0.10.0] - 2016-12-12\n\n### Fixed\n\n- Don't violate reference capabilities when assigning via a field ([PR #1471](https://github.com/ponylang/ponyc/pull/1471))\n- Check errors correctly for method chaining ([PR #1463](https://github.com/ponylang/ponyc/pull/1463))\n- Fix compiler handling of type params in stacks (issue #918) ([PR #1452](https://github.com/ponylang/ponyc/pull/1452))\n- Fix String.recalc method for cases where no null terminator is found (issue #1446) ([PR #1450](https://github.com/ponylang/ponyc/pull/1450))\n- Make space() check if string is null terminated (issue #1426) ([PR #1430](https://github.com/ponylang/ponyc/pull/1430))\n- Fix is_null_terminated reading arbitrary memory (issue #1425) ([PR #1429](https://github.com/ponylang/ponyc/pull/1429))\n- Set null terminator in String.from_iso_array (issue #1435) ([PR #1436](https://github.com/ponylang/ponyc/pull/1436))\n\n### Added\n\n- Added String.split_by, which uses a string delimiter (issue #1399) ([PR #1434](https://github.com/ponylang/ponyc/pull/1434))\n- Extra DTrace/SystemTap probes concerning scheduling.\n\n### Changed\n\n- Behaviour calls return None instead of their receiver (RFC 28) ([PR #1460](https://github.com/ponylang/ponyc/pull/1460))\n- Update from_array to prevent a copy (issue #1097) ([PR #1423](https://github.com/ponylang/ponyc/pull/1423))\n\n## [0.9.0] - 2016-11-11\n\n### Fixed\n\n- Stop leaking memory during serialization (issue #1413) ([PR #1414](https://github.com/ponylang/ponyc/pull/1414))\n- Fixed compiler segmentation fault when given an invalid target triple. ([PR #1406](https://github.com/ponylang/ponyc/pull/1406))\n- Fixed error message when no type arguments are given (issue #1396) ([PR #1397](https://github.com/ponylang/ponyc/pull/1397))\n- Fixed compiler assert failure when constructor is called on type intersection (issue #1398) ([PR #1401](https://github.com/ponylang/ponyc/pull/1401))\n- Fix compiler assert fail on circular type inference error (issue #1334) ([PR #1339](https://github.com/ponylang/ponyc/pull/1339))\n- Performance problem in the scheduler queue when running with many threads (issue #1404)\n- Invalid name mangling in generated C headers (issue #1377)\n\n### Added\n\n- Method chaining (RFC #25) ([PR #1411](https://github.com/ponylang/ponyc/pull/1411))\n- Iter class methods `all`, `any`, `collect`, `count`, `find`, `last`, `nth`, `run`, `skip`, `skip_while`, `take`, `take_while` (issue #1370)\n- Output of `ponyc --version` shows C compiler used to build pony (issue #1245)\n- Makefile detects `llvmconfig39` in addition to `llvm-config-3.9` (#1379)\n- LLVM 3.9 support\n\n### Changed\n\n- Changed lambda literal syntax to be more concise (issue #1391) ([PR #1400](https://github.com/ponylang/ponyc/pull/1400))\n\n## [0.8.0] - 2016-10-27\n\n### Fixed\n\n- Link the correct version of `libponyrt` when compiling with `--pic` on Linux (issue #1359)\n\n### Added\n\n- Runtime function `pony_send_next`. This function can help optimise some message sending scenarios.\n- Floating point `min_normalised`. The function returns the smallest normalised positive number, as `min_value` used to do (issue #1351)\n\n### Changed\n\n- Floating point `min_value` now returns the smallest negative number instead of the smallest normalised positive number (issue #1351)\n\n## [0.7.0] - 2016-10-22\n\n### Fixed\n\n- Concatenate docstrings from case methods (issue #575).\n\n### Added\n\n- TCP read and write backpressure hooks in `TCPConnection` (issue #1311)\n- Allow TCP notifiers to cause connections to yield while receiving (issue #1343)\n\n### Changed\n\n- `break` without a value now generates its value from the `else` branch of a loop instead of being an implicit `break None`.\n- The `for` loop will now break out of the loop instead of continuing with the following iterations if `Iterator.next` errors.\n\n## [0.6.0] - 2016-10-20\n\n### Fixed\n\n- Compiling ponyrt with Clang versions >= 3.3, < 3.6.\n- Restrict mutable tuple recovery to maintain reference capability security (issue #1123)\n- Crash in the runtime scheduler queues\n\n### Added\n\n- DTrace and SystemTap support - `use=dtrace`\n\n### Changed\n\n- Replaces `use=telemetry` by DTrace/SystemTap scripts\n- `String.cstring()` now always returns a null-terminated string\n  (which may result in a copy) while `cpointer()` (also available on\n  `Array` objects) returns a pointer to the underlying array as-is\n  (issue #1309).\n\n## [0.5.1] - 2016-10-15\n\n### Fixed\n\n- `SSLConnection` ignoring the `sent` notifier method (issue #1268)\n- Runtime crash in the runtime scheduler queues (issue #1319)\n\n## [0.5.0] - 2016-10-09\n\n### Fixed\n\n- Memory copy bounds for `String.clone` (issue #1289).\n- Security issues in `ProcessMonitor` (issue #1180)\n- `SSLConnection` bugs due to missing `sentv` notify method (issue #1282)\n\n### Added\n\n- `Iter` class (issue #1267)\n- read_until method on buffered.Reader (RFC 0013)\n- `format` package (issue #1285)\n\n### Changed\n\n- `Stringable` interface no longer involves formatting (issue #1285)\n- Remove unused error types from ProcessError (issue #1293)\n- HTML documentation for expanded union types now adds line breaks to improve readability (issue #1263)\n\n## [0.4.0] - 2016-09-26\n\n### Fixed\n\n- Unexpected message ordering in `ProcessManager` (issue #1265)\n\n### Added\n\n- TCP writev performance improvement by avoiding throwing errors\n\n## [0.3.3] - 2016-09-23\n\n### Fixed\n\n- Incorrect build number generated on Windows when building from non-git directory.\n- Stop generating `llvm.invariant.load` for fields of `val` references.\n- Embedded fields construction through tuples.\n\n### Added\n\n- Improved error handling for `files` package.\n- ProcessMonitor.expect\n- ProcessNotify.created\n- ProcessNotify.expect\n\n### Changed\n\n- On Linux and FreeBSD, ponyc now uses $CC as the linker if the environment variable is defined.\n\n## [0.3.2] - 2016-09-18\n\n### Fixed\n\n- The `ponyc` version is now consistently set from the VERSION file.\n- Stop generating `llvm.invariant.load` intrinsic for \"let\" references, as these don't necessarily match the semantics of that intrinsic.\n\n### Changed\n\n- The `setversion` and `release` commands have been removed from `Makefile`.\n- LTO is again enabled by default on OSX\n- make now builds a `release` rather than `debug` build by default\n\n## [0.3.1] - 2016-09-14\n\n### Fixed\n\n- Make sure all scheduler threads are pinned to CPU cores; on Linux/FreeBSD this wasn't the case for the main thread.\n- Account for both hyperthreading and NUMA locality when assigning scheduler threads to cores on Linux.\n- Stop generating `llvm.invariant.start` intrinsic. It was causing various problems in code generation.\n- Buffer overflow triggerable by very long `ponyc` filename (issue #1177).\n- Assertion failure in optimisation passes.\n- Race condition in scheduler queues on weakly-ordered architectures.\n- Issue #1212 by reverting commit e56075d46d7d9e1d8c5e8be7ed0506ad2de98734\n\n### Added\n\n- `--ponypinasio` runtime option for pinning asio thread to a cpu core.\n- `--ponynopin` runtime option for not pinning any threads at all.\n\n### Changed\n\n- Path.base now provides option to omit the file extension from the result.\n- Map.upsert returns value for upserted key rather than `this`.\n- `ponyc --version` now includes llvm version in its output.\n- LTO is now disabled by default on OSX.\n\n## [0.3.0] - 2016-08-26\n\n### Fixed\n\n- Check for Main.create before reachability analysis.\n- Interface subtyping need not be invariant on type args.\n- @fowles: handle regex empty match.\n- @praetonus: readline history handling.\n- Put unbox constructors on machine words into the vtable.\n- @jonas-l: parse URL with omitted password.\n- Adjust for ephemerality in cap_single().\n- Finalisation always occurs.\n- Type checking platform dependent FFI declarations on all platforms.\n- Interface subtyping takes receiver capabilities into account.\n- Pony-as-library support, particularly pony_register_thread().\n- Bug in `HashMap._search`.\n- Crashing gc bug caused by \"force freeing\" objects with finalizers.\n- Bug in `String.compare` and `String.compare_sub`.\n- Crashing gc bug from using `get` instead of `getorput` in `gc_markactor`.\n- Add -rpath to the link command for library paths\n- Simplify contains() method on HashMap.\n- Lambda captures use the alias of the expression type.\n- Trace boxed primitives in union types.\n- Use -isystem for LLVM include directory only if it is not in search path.\n- Union tuples as return type with machine words (issue #849)\n- Incorrect \\\" handling in character literals\n- Incorrect \\' handling in string literals\n- Compiler crash on type alias of a lambda type.\n- Late detection of errors silently emitted in lexer/parser.\n- Compiler crash when handling invalid lambda return types\n- Memory leak fixed when something sent as iso is then sent as val.\n- Compiler crash when handling object literal with uninitialized fields.\n- Associate a nice name with function types based on the type of the function.\n- Use the nice name for types when generating documentation.\n- Compiler crash when generating C library for the exported actors containing functions with variadic return type contatining None\n- AST Printing of string literals with quote characters.\n- HTTP/1.1 connections are now persistent by default.\n- Runtime crash when Main.create is a function instead of a constructor.\n- Compiler bug where `as` operator with a lambda literal caused seg fault.\n- String.read_int failure on lowest number in the range of signed integers.\n- Regex incorrect of len variable when PCRE2_ERROR_NOMEMORY is encountered.\n- No longer silently ignores lib paths containing parens on Windows.\n- Make linking more dynamic and allow for overriding linker and linker arch.\n- Fix issue with creating hex and octal strings if precision was specified.\n- Correctly parses Windows 10 SDK versions, and includes new UCRT library when linking with Windows 10 SDK.\n- Performance of Array.append and Array.concat (no unnecessary calls to push).\n- Performance of Map.upsert and Map.update (don't replace existing keys)\n- Segmentation fault from allocating zero-sized struct.\n- Segmentation fault from serialising zero-sized array.\n- Assertion failure from type-checking in invalid programs.\n- Make the offset parameter of String.rfind inclusive of the given index.\n\n### Added\n\n- 32-bit ARM port.\n- 32-bit X86 port.\n- Embedded fields.\n- C-style structs.\n- Maybe[A] to encode C-style structs that aren't present.\n- OpenFile and CreateFile primitives to return well-typed errors.\n- @fowles: String.join\n- Array slice, permute, reverse.\n- Pooltrack and telemetry runtime builds.\n- ifdef expressions for platform dependent code.\n- User specified build flags.\n- Pure Pony implementation of 128 bit integer maths for 32-bit platforms.\n- UDP broadcast for both IPv4 and IPv6.\n- Message batching.\n- Case functions.\n- Timeouts for PonyTest long tests.\n- contains() method on HashMap\n- contains() method on HashSet\n- Support for empty sections in ini parsing.\n- --verbose,-V option for compiler informational messages.\n- Logger package\n- `ArrayValues.rewind()` method.\n- Nanos primitive in time package.\n- Persistent package, with List and Map\n- Custom chunk size for Stdin.\n- Itertools package\n- TCPConnection.expect\n- TCPConnectionNotify.sentv\n- HashMap.get_or_else\n- ponytest TestHelper.expect_action, complete_action, and fail_action\n- ponytest TestHelper.dispose_when_done\n- copysign and infinite for floating point numbers\n- contains() method on Array\n- GC tracing with acquire/release semantics.\n- pony_alloc_msg_size runtime function\n- `net/WriteBuffer`\n- `serialise` package.\n- optional parameter in json objects, arrays, and doc to turn on pretty printing\n- `DoNotOptimise` primitive\n- `compact` method for `Array` and `String`\n- `String.push_utf32()` method.\n- Allow the use of a LLVM bitcode file for the runtime instead of a static library.\n- add iterators to persistent/Map (`keys()`, `values()`, and `pairs()`)\n- add notification of terminal resize\n- `trim` and `trim_in_place` methods for `Array` and `String`.\n- `is_null_terminated` and `null_terminated` methods for `String`.\n- `from_iso_array` constructor on `String`.\n- `Sort` primitive\n- PonyBench package\n\n### Changed\n\n- Interfaces are invariant if they are structurally equivalent.\n- Improved type checking with configuration management.\n- Improved realloc behaviour after heap_alloc_large.\n- Set-based upper bounds for generic constraints.\n- Moved the position of a default capability in a type specification.\n- Replaced '&' with 'addressof' for taking address in FFI calls.\n- @jemc: use half-open ranges for String operations.\n- Improved TCPConnection with a dynamically size of buffers\n- Drop dynamic LTO detection in the build system.\n- Parameterized Array.find and Array.rfind with a comparator.\n- `this->` adapted types check match on the upper bounds.\n- Renamed `identityof` to `digestof`.\n- Moved and renamed `net/Buffer` to `buffered/Reader` and `buffered/Writer`.\n- Print compiler error and info messages to stderr instead of stdout.\n- `Hashmap.concat` now returns `this` rather than `None`\n- Only allow single, internal underscores in numeric literals.\n- `ponyc --version` now includes the build type (debug/release) in its output.\n- Strings now grow and shrink geometrically.\n- Embedded fields can now be constructed from complex expressions containing constructors\n- Sendable members of non-sendable objects can be used in recover expressions in certain cases.\n- ProcessNotify functions are passed a reference to ProcessMonitor.\n- The constructor of `Options` doesn't require an `Env` anymore but just a simple `String` array.\n\n## [0.2.1] - 2015-10-06\n\n### Fixed\n\n- Check shallow marking in heap_ismarked.\n\n## [0.2.0] - 2015-10-05\n\n### Fixed\n\n- Handle internal pointers and recursion.\n- Allow recursing through non-pony alloc'd memory in GC.\n- Set an LLVM triple with no version stamp to prevent XCode 7 link warnings.\n- use \"path:\" adds link paths only for the current build.\n- Handle null characters in Strings and string literals.\n\n### Added\n\n- Platform indicators for LP64, LLP64, ILP32.\n- Compile and link with LTO.\n- Use Pointer[None] for void* in FFI.\n- Root authority capability in Env.\n- Fine grained capabilities for files and directories.\n- Use Capsicum on FreeBSD.\n- Apply can be sugared with type arguments.\n- Search pony_packages directories for use commands.\n- Buffer peek functions (@jemc)\n- collections/Ring\n- Promises package\n\n### Changed\n\n- Renamed some builtin types.\n- abs() now returns an unsigned integer.\n- Improved memory allocation speed.\n- Reduced memory pressure.\n- Scheduler steals when only the CD is on a scheduler thread queue.\n- use commands searches ../pony_packages recursively similar to Node.js\n- Readline uses a Promise to handle async responses.\n\n## [0.1.7] - 2015-06-18\n\n### Fixed\n\n- Viewpoint adaptation with a type expression on the left-hand side.\n\n### Added\n\n- Pass Pony function pointers to C FFI.\n\n### Changed\n\n- The pony runtime now uses the same option parser as ponyc. A pony program exits if bad runtime args are provided.\n- Output directory now created if it doesn't already exist.\n- Improvements to automatic documentation generator.\n- Union type for String.compare result.\n\n## [0.1.6] - 2015-06-15\n\n### Fixed\n\n- ANSI stripping on zero length writes to stdout/stderr.\n- More OS X 10.8 compatibility.\n- SSL multithreading support.\n- Nested tuple code generation.\n- Only finalise blocked actors when detecting quiescence.\n- URL parse error.\n\n### Added\n\n- Automatic documentation generator in the compiler.\n- FreeBSD 10.1 support, thanks to Ben Laurie.\n- Allow method calls on union types when the signatures are compatible.\n- Subtyping of polymorphic methods.\n- Primitive `_init` and `_final` for C library initialisation and shutdown.\n- collections.Flags\n- lambda sugar.\n\n### Changed\n\n- Separated the FFI '&' operator from the identityof operator.\n- Operators on Set and Map are now persistent.\n- use \"file:...\" becomes use \"package:...\"\n- Allow \"s at the end of triple-quoted strings.\n- Allow behaviours and functions to be subtypes of each other.\n\n## [0.1.5] - 2015-05-15\n\n### Fixed\n\n- OS X 10.8 compatibility.\n\n## [0.1.4] - 2015-05-14\n\n### Fixed\n\n- Check whether parameters to behaviours, actor constructors and isolated constructors are sendable after flattening, to allow sendable type parameters to be used as parameters.\n- Eliminate spurious \"control expression\" errors when another compile error has occurred.\n- Handle circular package dependencies.\n- Fixed ponyc options issue related to named long options with no arguments\n- Cycle detector view_t structures are now reference counted.\n\n### Added\n\n- ANSI terminal handling on all platforms, including Windows.\n- The lexer now allows underscore characters in numeric literals. This allows long numeric literals to be broken up for human readability.\n- \"Did you mean?\" support when the compiler doesn't recognise a name but something similar is in scope.\n- Garbage collection and cycle detection parameters can now be set from the command line.\n- Added a FileStream wrapper to the file package.\n\n### Changed\n\n- When using a package without a package identifier (eg. `use \"foo\"` as opposed to `use f = \"foo\"`), a `Main` type in the package will not be imported. This allows all packages to include unit tests that are run from their included `Main` actor without causing name conflicts.\n- The `for` sugar now wraps the `next()` call in a try expression that does a `continue` if an error is raised.\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 10.2841796875,
          "content": "cmake_minimum_required(VERSION 3.21 FATAL_ERROR)\n\nfile(STRINGS \"VERSION\" PONYC_PROJECT_VERSION)\nproject(Pony VERSION ${PONYC_PROJECT_VERSION} LANGUAGES C CXX)\n\n# Grab the PonyC version number from the \"VERSION\" source file.\nif(NOT DEFINED PONYC_VERSION)\n    execute_process(\n        COMMAND git rev-parse --short HEAD\n        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n        OUTPUT_VARIABLE GIT_REVISION\n        OUTPUT_STRIP_TRAILING_WHITESPACE\n    )\n\n    set(PONYC_VERSION \"${PONYC_PROJECT_VERSION}-${GIT_REVISION}\")\nendif()\n\n# Uncomment this to show build commands\n# set(CMAKE_VERBOSE_MAKEFILE ON)\n\n# We require C++14 (because LLVM does)\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# We require LLVM, Google Test and Google Benchmark\nif(NOT PONY_CROSS_LIBPONYRT)\n    find_package(LLVM REQUIRED CONFIG PATHS \"build/libs/lib/cmake/llvm\" \"build/libs/lib64/cmake/llvm\" NO_DEFAULT_PATH)\n    find_package(GTest REQUIRED CONFIG PATHS \"build/libs/lib/cmake/GTest\" \"build/libs/lib64/cmake/GTest\" NO_DEFAULT_PATH)\n    find_package(benchmark REQUIRED CONFIG PATHS \"build/libs/lib/cmake/benchmark\" \"build/libs/lib64/cmake/benchmark\" NO_DEFAULT_PATH)\nendif()\n\n# Uses\nif(PONY_USE_VALGRIND)\n    set(PONY_OUTPUT_SUFFIX \"${PONY_OUTPUT_SUFFIX}-valgrind\")\n    add_compile_options(-DUSE_VALGRIND)\nendif()\n\nif(PONY_USE_THREAD_SANITIZER)\n    set(PONY_OUTPUT_SUFFIX \"${PONY_OUTPUT_SUFFIX}-thread_sanitizer\")\n    list(APPEND PONY_SANITIZERS_ENABLED \"thread\")\nendif()\n\nif(PONY_USE_ADDRESS_SANITIZER)\n    set(PONY_OUTPUT_SUFFIX \"${PONY_OUTPUT_SUFFIX}-address_sanitizer\")\n    list(APPEND PONY_SANITIZERS_ENABLED \"address\")\nendif()\n\nif(PONY_USE_UNDEFINED_BEHAVIOR_SANITIZER)\n    set(PONY_OUTPUT_SUFFIX \"${PONY_OUTPUT_SUFFIX}-undefined_behavior_sanitizer\")\n    list(APPEND PONY_SANITIZERS_ENABLED \"undefined\")\nendif()\n\nif(PONY_SANITIZERS_ENABLED)\n    list(JOIN PONY_SANITIZERS_ENABLED \",\" PONY_SANITIZERS_VALUE)\n    add_compile_options(-fsanitize=${PONY_SANITIZERS_VALUE} -DPONY_SANITIZER=\\\"${PONY_SANITIZERS_VALUE}\\\")\n    add_link_options(-fsanitize=${PONY_SANITIZERS_VALUE} -DPONY_SANITIZER=\\\"${PONY_SANITIZERS_VALUE}\\\")\nendif()\n\nif(PONY_USE_COVERAGE)\n    set(PONY_OUTPUT_SUFFIX \"${PONY_OUTPUT_SUFFIX}-coverage\")\n    if(CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n        add_compile_options(-O0 -fprofile-instr-generate -fcoverage-mapping)\n        add_link_options(-fprofile-instr-generate -fcoverage-mapping)\n    else()\n        add_compile_options(-O0 -fprofile-arcs -ftest-coverage)\n        add_link_options(-fprofile-arcs)\n    endif()\nendif()\n\nif(PONY_USE_POOLTRACK)\n    set(PONY_OUTPUT_SUFFIX \"${PONY_OUTPUT_SUFFIX}-pooltrack\")\n    add_compile_options(-DUSE_POOLTRACK)\nendif()\n\nif(PONY_USE_DTRACE)\n    set(PONY_OUTPUT_SUFFIX \"${PONY_OUTPUT_SUFFIX}-dtrace\")\n    add_compile_options(-DUSE_DYNAMIC_TRACE)\nendif()\n\nif(PONY_USE_RUNTIMESTATS)\n    set(PONY_OUTPUT_SUFFIX \"${PONY_OUTPUT_SUFFIX}-runtimestats\")\n    add_compile_options(-DUSE_RUNTIMESTATS)\nendif()\n\nif(PONY_USE_SCHEDULER_SCALING_PTHREADS)\n    set(PONY_OUTPUT_SUFFIX \"${PONY_OUTPUT_SUFFIX}-scheduler_scaling_pthreads\")\n    add_compile_options(-DUSE_SCHEDULER_SCALING_PTHREADS)\nendif()\n\nif(PONY_USE_SYSTEMATIC_TESTING)\n    set(PONY_OUTPUT_SUFFIX \"${PONY_OUTPUT_SUFFIX}-systematic_testing\")\n    add_compile_options(-DUSE_SYSTEMATIC_TESTING)\nendif()\n\nif(PONY_USE_RUNTIMESTATS_MESSAGES)\n    set(PONY_OUTPUT_SUFFIX \"${PONY_OUTPUT_SUFFIX}-runtimestats_messages\")\n    add_compile_options(-DUSE_RUNTIMESTATS -DUSE_RUNTIMESTATS_MESSAGES)\nendif()\n\nif(PONY_USE_POOL_MEMALIGN)\n    set(PONY_OUTPUT_SUFFIX \"${PONY_OUTPUT_SUFFIX}-pool_memalign\")\n    add_compile_options(-DUSE_POOL_MEMALIGN)\nendif()\n\n# LibPonyC tests assume that our outputs are two directories above the root directory.\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG \"${CMAKE_BINARY_DIR}/../debug${PONY_OUTPUT_SUFFIX}\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE \"${CMAKE_BINARY_DIR}/../release${PONY_OUTPUT_SUFFIX}\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL \"${CMAKE_BINARY_DIR}/../minsizerel${PONY_OUTPUT_SUFFIX}\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${CMAKE_BINARY_DIR}/../relwithdebinfo${PONY_OUTPUT_SUFFIX}\")\n\n# Libs are now always built in release mode.\nset(PONY_LLVM_BUILD_MODE \"1\")\n\nif(NOT DEFINED PONY_ARCH)\n    set(PONY_ARCH \"native\")\nendif()\n\n# System information\nmessage(\"-- CMAKE_SYSTEM_INFO_FILE: ${CMAKE_SYSTEM_INFO_FILE}\")\nmessage(\"-- CMAKE_SYSTEM_NAME:      ${CMAKE_SYSTEM_NAME}\")\nmessage(\"-- CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}\")\nmessage(\"-- CMAKE_SYSTEM:           ${CMAKE_SYSTEM}\")\n\nset(_compiler_arch ${CMAKE_C_COMPILER_ARCHITECTURE_ID})\nif(\"${_compiler_arch}\" STREQUAL \"\")\n    set(_compiler_arch ${CMAKE_SYSTEM_PROCESSOR})\nendif()\n\nmessage(\"Compiler architecture is ${_compiler_arch}\")\n\nif(NOT MSVC)\n    if((NOT DEFINED PONY_PIC_FLAG) OR (PONY_PIC_FLAG STREQUAL \"\"))\n        set(PONY_PIC_FLAG \"-fpic\")\n    endif()\nendif()\n\nset(PONY_OSX_PLATFORM 13.0.0)\n\n# LLVM component setup\nif(NOT PONY_CROSS_LIBPONYRT)\n    set(LLVM_COMPONENTS\n        core\n        demangle\n        objcarcopts\n        orcjit\n    )\n\n    list (FIND LLVM_TARGETS_TO_BUILD \"AArch64\" _index)\n    if (${_index} GREATER -1)\n        list(APPEND\n            LLVM_COMPONENTS\n            aarch64asmparser\n            aarch64codegen\n            aarch64desc\n            aarch64info\n        )\n    endif()\n\n    list (FIND LLVM_TARGETS_TO_BUILD \"ARM\" _index)\n    if (${_index} GREATER -1)\n        list(APPEND\n            LLVM_COMPONENTS\n            armasmparser\n            armcodegen\n            armdesc\n            arminfo\n        )\n    endif()\n\n    list (FIND LLVM_TARGETS_TO_BUILD \"WebAssembly\" _index)\n    if (${_index} GREATER -1)\n        list(APPEND\n            LLVM_COMPONENTS\n            webassemblyasmparser\n            webassemblycodegen\n            webassemblydesc\n            webassemblyinfo\n        )\n    endif()\n\n    list (FIND LLVM_TARGETS_TO_BUILD \"X86\" _index)\n    if (${_index} GREATER -1)\n        list(APPEND\n            LLVM_COMPONENTS\n            x86asmparser\n            x86codegen\n            x86desc\n            x86info\n        )\n    endif()\n\n    list (FIND LLVM_TARGETS_TO_BUILD \"RISCV\" _index)\n    if (${_index} GREATER -1)\n        list(APPEND\n            LLVM_COMPONENTS\n            riscvasmparser\n            riscvcodegen\n            riscvdesc\n            riscvinfo\n        )\n    endif()\n\n    llvm_map_components_to_libnames(PONYC_LLVM_LIBS ${LLVM_COMPONENTS})\n    # message(\"PONYC_LLVM_LIBS: ${PONYC_LLVM_LIBS}\")\nendif()\n\n# Required definitions.  We use these generators so that the defines are correct for both *nix (where the config applies at configuration time) and Windows (where the config applies at build time).\nadd_compile_definitions(\n    BUILD_COMPILER=\"${CMAKE_C_COMPILER_VERSION}\"\n    _FILE_OFFSET_BITS=64\n    __STDC_CONSTANT_MACROS\n    __STDC_FORMAT_MACROS\n    __STDC_LIMIT_MACROS\n    LLVM_BUILD_MODE=${PONY_LLVM_BUILD_MODE}\n    LLVM_VERSION=\"${LLVM_VERSION}\"\n    PONY_COMPILER=\"${CMAKE_C_COMPILER}\"\n    PONY_ARCH=\"${PONY_ARCH}\"\n    PONY_DEFAULT_PIC=true\n    $<$<CONFIG:Debug>:PONY_BUILD_CONFIG=\"debug\">\n    $<$<CONFIG:Release>:PONY_BUILD_CONFIG=\"release\">\n    $<$<CONFIG:RelWithDebInfo>:PONY_BUILD_CONFIG=\"release\">\n    $<$<CONFIG:MinSizeRel>:PONY_BUILD_CONFIG=\"release\">\n    PONY_USE_BIGINT\n    PONY_VERSION=\"${PONYC_VERSION}\"\n    $<$<CONFIG:Debug>:DEBUG>\n    $<$<CONFIG:Release>:NDEBUG>\n    $<$<CONFIG:RelWithDebInfo>:NDEBUG>\n    $<$<CONFIG:MinSizeRel>:NDEBUG>\n    $<$<CONFIG:Debug>:PONY_VERSION_STR=\"${PONYC_VERSION} [debug]\\\\nCompiled with: LLVM ${LLVM_VERSION} -- ${CMAKE_C_COMPILER_ID}-${CMAKE_C_COMPILER_VERSION}-${_compiler_arch}\">\n    $<$<CONFIG:Release>:PONY_VERSION_STR=\"${PONYC_VERSION} [release]\\\\nCompiled with: LLVM ${LLVM_VERSION} -- ${CMAKE_C_COMPILER_ID}-${CMAKE_C_COMPILER_VERSION}-${_compiler_arch}\">\n    $<$<CONFIG:RelWithDebInfo>:PONY_VERSION_STR=\"${PONYC_VERSION} [relwithdebinfo]\\\\nCompiled with: LLVM ${LLVM_VERSION} -- ${CMAKE_C_COMPILER_ID}-${CMAKE_C_COMPILER_VERSION}-${_compiler_arch}\">\n    $<$<CONFIG:MinSizeRel>:PONY_VERSION_STR=\"${PONYC_VERSION} [minsizerel]\\\\nCompiled with: LLVM ${LLVM_VERSION} -- ${CMAKE_C_COMPILER_ID}-${CMAKE_C_COMPILER_VERSION}-${_compiler_arch}\">\n    PONY_OSX_PLATFORM=${PONY_OSX_PLATFORM}\n)\n\ninclude(CheckIPOSupported)\nif(PONY_USE_LTO)\n    check_ipo_supported(RESULT _ipo_supported OUTPUT error)\nendif()\n\nif(_ipo_supported)\n    message(\"Configuring with IPO/LTO\")\n    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)\n    add_compile_definitions(PONY_USE_LTO)\nendif()\n\nif(MSVC)\n    set_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n    # Disable some warnings for Windows, and compile Debug builds with the regular CRT.\n    add_compile_options(\n        /wd4142\n        /wd4996\n        $<$<CONFIG:Debug>:/MD>\n        /WX\n        /EHa\n    )\n    add_compile_definitions(\n        _MBCS\n        _CRT_SECURE_NO_WARNINGS\n        $<$<CONFIG:Debug>:_ITERATOR_DEBUG_LEVEL=0>\n    )\nelse()\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -std=gnu11 -Werror -Wconversion -Wno-sign-conversion -Wextra -Wall -Wno-unknown-warning-option ${PONY_PIC_FLAG} -fexceptions\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=gnu++11 -fno-rtti ${PONY_PIC_FLAG} -fexceptions\")\n    add_link_options(-rdynamic)\nendif()\n\nif(${CMAKE_HOST_SYSTEM_NAME} MATCHES \"Darwin\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -DUSE_SCHEDULER_SCALING_PTHREADS\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libc++\")\nendif()\n\nif(${CMAKE_HOST_SYSTEM_NAME} MATCHES \"DragonFly\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -L/usr/local/cxx_atomics\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -isystem /usr/local/cxx_atomics\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -isystem /usr/local/cxx_atomics\")\nendif()\n\nset(CMAKE_STATIC_LIBRARY_PREFIX \"\")\n\nif (PONY_CROSS_LIBPONYRT)\n    add_subdirectory(src/libponyrt)\n    install(TARGETS libponyrt)\nelse()\n    add_subdirectory(src/libponyc)\n    add_subdirectory(src/libponyrt)\n    add_subdirectory(src/ponyc)\n\n    add_subdirectory(test/libponyc)\n    add_subdirectory(test/libponyrt)\n    add_subdirectory(test/full-program-runner)\n    add_subdirectory(test/full-program-tests)\n\n    add_subdirectory(benchmark/libponyc)\n    add_subdirectory(benchmark/libponyrt)\n\n    install(TARGETS\n        ponyc\n        libponyc.tests\n        libponyc.benchmarks\n        libponyrt.benchmarks\n        libponyrt.tests\n        DESTINATION bin)\n    install(TARGETS\n        libponyrt\n        DESTINATION lib)\n    install(DIRECTORY packages/ DESTINATION packages)\n    install(DIRECTORY examples/ DESTINATION examples PATTERN .gitignore EXCLUDE)\nendif()\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 6.45703125,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at coc@ponylang.io. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n\n# Social Rules\n\nIn addition to having a code of conduct as an anti-harassment policy, we have a small set of [social rules](https://www.recurse.com/manual#sub-sec-social-rules) we follow. We (the project maintainers) lifted these rules from the [Recurse Center](https://www.recurse.com). We've seen these rules in effect in other environments. We'd like the Pony community to share a similar positive environment. These rules are intended to be lightweight, and to make more explicit certain social norms that are normally implicit. Most of our social rules really boil down to “don't be a jerk” or “don't be annoying.” Of course, almost nobody sets out to be a jerk or annoying, so telling people not to be jerks isn't a very productive strategy.\n\nUnlike the anti-harassment policy, violation of the social rules will not result in expulsion from the Pony community or a strong warning from project maintainers. Rather, they are designed to provide some lightweight social structure for community members to use when interacting with each other.\n\n## No feigning surprise.\n\nThe first rule means you shouldn't act surprised when people say they don't know something. This applies to both technical things (\"What?! I can't believe you don't know what the stack is!\") and non-technical things (\"You don't know who RMS is?!\"). Feigning surprise has absolutely no social or educational benefit: When people feign surprise, it's usually to make them feel better about themselves and others feel worse. And even when that's not the intention, it's almost always the effect.\n\n## No well-actually's\n\nA well-actually happens when someone says something that's almost - but not entirely - correct, and you say, \"well, actually…\" and then give a minor correction. This is especially annoying when the correction has no bearing on the actual conversation. This doesn't mean we aren't about truth-seeking or that we don't care about being precise. Almost all well-actually's in our experience are about grandstanding, not truth-seeking.\n\n## No subtle -isms\n\nOur last social rule bans subtle racism, sexism, homophobia, transphobia, and other kinds of bias. This one is different from the rest, because it covers a class of behaviors instead of one very specific pattern.\n\nSubtle -isms are small things that make others feel uncomfortable, things that we all sometimes do by mistake. For example, saying \"It's so easy my grandmother could do it\" is a subtle -ism. Like the other three social rules, this one is often accidentally broken. Like the other three, it's not a big deal to mess up – you just apologize and move on.\n\nIf you see a subtle -ism in the Pony community, you can point it out to the relevant person, either publicly or privately, or you can ask one of the project maintainers to say something. After this, we ask that all further discussion move off of public channels. If you are a third party, and you don't see what could be biased about the comment that was made, feel free to talk to the project maintainers. Please don't say, \"Comment X wasn't homophobic!\" Similarly, please don't pile on to someone who made a mistake. The \"subtle\" in \"subtle -isms\" means that it's probably not obvious to everyone right away what was wrong with the comment.\n\nIf you have any questions about any part of the code of conduct or social rules, please feel free to reach out to any of the project maintainers.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.5556640625,
          "content": "# Contributing\n\nIt's good to hear that you want to contribute to Pony!\n\nThere are a number of ways to contribute to Pony. As this document is a little long, feel free to jump to the section that applies to you currently:\n\n* [Feature request](#feature-request)\n* [Bug report](#bug-report)\n* [How to contribute](#how-to-contribute)\n* [Pull request](#pull-request)\n\nAdditional notes regarding formatting:\n\n* [Documentation formatting](#documentation-formatting)\n* [Code formatting](#code-formatting)\n* [Standard Library File Naming](#standard-library-file-naming)\n\n## Feature request\n\nFor any feature requests or enhancements to the Pony distribution, it is quite likely that you have to go through our [RFC process](https://github.com/ponylang/rfcs). Before opening or submitting any feature requests, please make sure you are familiar with the RFC process and follow the process as required.\n\nIf you submit a pull request to implement a new feature without going through the RFC process, it may be closed with a polite request to submit an RFC first.\n\n## Bug report\n\nFirst of all please [search existing issues](https://github.com/ponylang/ponyc/issues) to make sure your issue hasn't already been reported. If you cannot find a suitable issue — [create a new one](https://github.com/ponylang/ponyc/issues/new).\n\nProvide the following details:\n\n* short summary of what you was trying to achieve,\n* a code causing the bug,\n* expected result,\n* actual results and\n* environment details: at least operating system and compiler version (`ponyc -v`).\n\nIf possible, try to isolate the problem and provide just enough code to demonstrate it. Add any related information which might help to fix the issue.\n\n## How to contribute\n\nWe use a fairly standard GitHub pull request workflow. If you have already contributed to a project via GitHub pull request, you can skip this section and proceed to the [specific details of what we ask for in a pull request](#pull-request). If this is your first time contributing to a project via GitHub, read on.\n\nHere is the basic GitHub workflow:\n\n1. Fork the ponyc repo. you can do this via the GitHub website. This will result in you having your own copy of the ponyc repo under your GitHub account.\n2. Clone your ponyc repo to your local machine\n3. Make a branch for your change\n4. Make your change on that branch\n5. Push your change to your repo\n6. Use the github ui to open a PR\n\nSome things to note that aren't immediately obvious to folks just starting out:\n\n1. Your fork doesn't automatically stay up to date with change in the main repo.\n2. Any changes you make on your branch that you used for the PR will automatically appear in the PR so if you have more than 1 PR, be sure to always create different branches for them.\n3. Weird things happen with commit history if you don't create your PR branches off of main so always make sure you have the main branch checked out before creating a branch for a PR\n\nIf you feel overwhelmed at any point, don't worry, it can be a lot to learn when you get started. Feel free to reach out via [Zulip](https://ponylang.zulipchat.com/#narrow/stream/192795-contribute-to-Pony).\n\nYou can get help using GitHub via [the official documentation](https://help.github.com/). Some highlights include:\n\n* [Fork A Repo](https://help.github.com/articles/fork-a-repo/)\n* [Creating a pull request](https://help.github.com/articles/creating-a-pull-request/)\n* [Syncing a fork](https://help.github.com/articles/syncing-a-fork/)\n\n## Pull request\n\nWhile we don't require that your pull request be a single commit, note that we will end up squashing all your commits into a single commit when we merge. While your PR is in review, we may ask for additional changes, please do not squash those commits while the review is underway. We ask that you not squash while a review is underway as it can make it hard to follow what is going on.\n\nWhen opening your pull request, please make sure that the initial comment on the PR is the commit message we should use when we merge. Making sure your commit message conforms to these guidelines for [writ(ing) a good commit message](http://chris.beams.io/posts/git-commit/).\n\nMake sure to issue 1 pull request per feature. Don't lump unrelated changes together. If you find yourself using the word \"and\" in your commit comment, you\nare probably doing too much for a single PR.\n\nWe keep a [CHANGELOG](CHANGELOG.md) of all software changes with behavioural effects in ponyc. If your PR includes such changes (rather than say a documentation update), a Pony team member will do the following before merging it, so that the PR will be automatically added to the CHANGELOG:\n\n* Ensure that the ticket is tagged with one or more appropriate \"changelog - *\" labels - each label corresponds to a section of the changelog where this change will be automatically mentioned.\n* Ensure that the ticket title is appropriate - the title will be used as the summary of the change, so it should be appropriately formatted, including a ticket reference if the PR is a fix to an existing bug ticket.\n  * For example, an appropriate title for a PR that fixes a bug reported in issue ticket #98 might look like:\n  * *Fixed compiler crash related to tuple recovery (issue #98)*\n\nOnce those conditions are met, the PR can be merged, and an automated system will immediately add the entry to the changelog. Keeping the changelog entries out of the file changes in the PR helps to avoid conflicts and other administrative headaches when many PRs are in progress.\n\nAny change that involves a changelog entry will trigger a bot to request that you add release notes to your PR.\n\nPull requests from accounts that aren't members of the Ponylang organization require approval from a member before running. Approval is required after each update that you make. This could involve a lot of waiting on your part for approvals. If you are opening PRs to verify that changes all pass CI before \"opening it for real\", we strongly suggest that you open the PR against the `main` branch of your fork. CI will then run in your fork and you don't need to wait for approval from a Ponylang member.\n\n## Grammar Changes\n\nIf your contribution contains changes to the grammar of the language, you should update the `pony.g` file at the root of the repository with `ponyc --antlr > pony.g`.\n\n## Documentation Formatting\n\nWhen contributing to documentation, try to keep the following style guidelines in mind:\n\n* Wherever possible, try to match the style of surrounding documentation.\n* Avoid hard-wrapping lines within paragraphs (using line breaks in the middle of or between sentences to make lines shorter than a certain length). Instead, turn on soft-wrapping in your editor and expect the documentation renderer to let the text flow to the width of the container.\n* Apply code highlighting to identifier names, such as types, fields, variables and parameters via the customary markdown syntax of wrapping the name in backticks.\n\n## Code Formatting\n\nFor code formatting guidelines please see [The Style Guide](https://github.com/ponylang/ponyc/blob/main/STYLE_GUIDE.md).\n\n## Standard Library File Naming\n\nFor standard library file naming guidelines see [The Style Guide](https://github.com/ponylang/ponyc/blob/main/STYLE_GUIDE.md#naming).\n\n## Source Code Coverage of Ponyc\n\nTo get C code coverage information for test runs or for calling ponyc, call `make` with `use=coverage config=debug`. This works both for *clang* and *gcc*. Make sure to configure `CC` and `CXX` environment variables both to either `gcc` and `g++` or `clang` and `clang++`.\n\n### Using gcc and lcov\n\n* Compile ponyc with `use=coverage config=debug` and environment variables `CC=gcc CXX=g++`\n* Run ponyc or the test suite from `build/debug-coverage`\n* generate the html coverage report:\n\n  ```bash\n  # generate coverage report\n  lcov --directory .build/debug-coverage/obj –zerocounters\n  lcov --directory .build/debug-coverage/obj --capture --output-file ponyc.info\n  genhtml -o build/debug-coverage/coverage ponyc.info\n  ```\n\n* open the html report at `build/debug-coverage/coverage/index.html`\n\n### Using clang and llvm-cov\n\n* Compile ponyc with `use=coverage config=debug` and environment variables `CC=clang CXX=clang++`\n* Run ponyc or the test suite from `build/debug-coverage` with environment variable: `LLVM_PROFILE_FILE=\"build/debug-coverage/coverage.profraw\"`\n* generate coverage data:\n\n  ```bash\n  llvm-profdata merge -sparse -output=build/debug-coverage/coverage.profdata build/debug-coverage/coverage.profraw\n  ```\n\n* show coverage data (only for `lexer.c` in this case):\n\n  ```bash\n  llvm-cov show ./build/debug-coverage/libponyc.tests -instr-profile=./build/debug-coverage/coverage.profdata src/libponyc/ast/lexer.c\n  ```\n"
        },
        {
          "name": "EDITORS.md",
          "type": "blob",
          "size": 1.57421875,
          "content": "# Editor support\n\n* Sublime Text: [Pony Language](https://packagecontrol.io/packages/Pony%20Language)\n* Atom: [language-pony](https://atom.io/packages/language-pony)\n* Visual Studio: [VS-pony](https://github.com/ponylang/VS-pony)\n* Visual Studio Code: [vscode-pony](https://marketplace.visualstudio.com/items?itemName=npruehs.pony)\n* Vim:\n  * [vim-pony](https://github.com/jakwings/vim-pony)\n  * [pony.vim](https://github.com/dleonard0/pony-vim-syntax)\n  * [currycomb: Syntastic support](https://github.com/killerswan/pony-currycomb.vim)\n  * [SpaceVim](http://spacevim.org), available as layer for Vim and [Neovim](https://neovim.io). Just follow [installation instructions](https://github.com/SpaceVim/SpaceVim) then load `lang#pony` layer inside configuration file (*$HOME/.SpaceVim.d/init.toml*)\n* Emacs:\n  * [ponylang-mode](https://github.com/ponylang/ponylang-mode)\n  * [flycheck-pony](https://github.com/ponylang/flycheck-pony)\n  * [pony-snippets](https://github.com/ponylang/pony-snippets)\n* BBEdit: [bbedit-pony](https://github.com/TheMue/bbedit-pony)\n* Micro: [micro-pony-plugin](https://github.com/Theodus/micro-pony-plugin)\n* Nano: [pony.nanorc file](https://github.com/serialhex/nano-highlight/blob/master/pony.nanorc)\n* Kate: update syntax definition file: Settings -> Configure Kate -> Open/Save -> Modes & Filetypes -> Download Highlighting Files\n* CudaText: lexer in Addon Manager\n* Vis: has a [lexer](https://github.com/martanne/vis/blob/master/lua/lexers/pony.lua) for Pony\n* Kakoune: has [Pony support](https://github.com/mawww/kakoune/blob/master/rc/filetype/pony.kak) in the main repository\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 5.24609375,
          "content": "# Installing Pony\n\nPrebuilt Pony binaries are available on a number of platforms. They are built using a very generic CPU instruction set and as such, will not provide maximum performance. If you need to get the best performance possible from your Pony program, we strongly recommend [building from source](BUILD.md).\n\nAll prebuilt releases are currently AMD64 only. If you want to install on different CPU architecture, you'll need to [build from source](BUILD.md).\n\nPrebuilt Pony installations will use clang as the default C compiler and clang++ as the default C++ compiler. If you prefer to use different compilers, such as gcc and g++, these defaults can be overridden by setting the `$CC` and `$CXX` environment variables to your compiler of choice.\n\n## Linux\n\nPrebuilt Linux packages are available via [ponyup](https://github.com/ponylang/ponyup) for Glibc and musl libc based Linux distribution. You can install nightly builds as well as official releases using ponyup.\n\nIf you are running on a support Linux platform, ponyup should correctly select it so long as you have `cc` and `lsb_release` installed. If for some reason, the installation script can't identify your distribution, you can manually select your platform.\n\nIf we aren't creating packages for your distribution and you would like us to, please stop by the [release stream](https://ponylang.zulipchat.com/#narrow/stream/190364-release) in the [ponylang Zulip](https://ponylang.zulipchat.com) to discuss adding support. Please note, we are almost assuredly going to ask you to help support your distribution.\n\nAt the moment, we support all supported LTS Ubuntu versions and any distributions built on top of Ubuntu (like Linux Mint and Pop!_OS).\n\n### Supported Glibc distributions\n\nCurrently, we have packages for the following Glibc based distributions:\n\n- Fedora 41\n- Linux Mint 19, 20, 21\n- Pop!_OS 20.04, 22.04, 24.04\n- Ubuntu 20.04, 22.04, 24.04\n\n### Supported Alpine versions\n\nStarting with Pony version 0.56.0, only Alpine 3.17 and later are supported. Pomyup will happily 0.56.0 on Alpine 3.16, but you won't be able to link programs. By the same token, installing version of Pony prior to 0.56.0 on Alpine 3.17 will also fail to link.\n\n### Manually selecting your Linux platform\n\nTo manually set your platform if ponyup is unable to identify it:\n\n```bash\nponyup default PLATFORM\n```\n\nwhere `PLATFORM` is from the table below\n\nDistribution | PLATFORM String\n--- | ---\nAlpine | x86_64-linux-musl\nFedora 41 | x86_64-linux-fedora41\nLinux Mint 20.x | x86_64-linux-ubuntu20.04\nLinux Mint 21.x | x86_64-linux-ubuntu22.04\nPop!_OS 20.04 | x86_64-linux-ubuntu20.04\nPop!_OS 22.04 | x86_64-linux-ubuntu22.04\nPop!_OS 24.04 | x86_64-linux-ubuntu24.04\nUbuntu 20.04 | x86_64-linux-ubuntu20.04\nUbuntu 22.04 | x86_64-linux-ubuntu22.04\nUbuntu 24.04 | x86_64-linux-ubuntu24.04\n\n### Install the latest release\n\n```bash\n\nponyup update ponyc release\n```\n\n### Additional requirements\n\nAll ponyc Linux installations need to have a C compiler such as clang installed. Compilers other than clang might work, but clang is the officially supported C compiler.\n\n### Troubleshooting Glibc compatibility\n\nMost Linux distributions are based on Glibc and all software for them must use the same version of Glibc. You might see an error like the following when trying to use ponyc:\n\n```console\nponyc: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not found (required by ponyc)\n```\n\nIf you get that error, it means that the Glibc we compiled ponyc with isn't compatible with your distribution. You've installed a ponyc build that isn't compatible with the C ABI on your distribution. You'll probably need to [build ponyc from source](BUILD.md). If you believe that you've installed a correct package for your distribution, please stop by the [beginner help stream](https://ponylang.zulipchat.com/#narrow/stream/189985-beginner-help) on the [ponylang Zulip](https://ponylang.zulipchat.com) to discuss what you are seeing.\n\n## macOS\n\nPrebuilt macOS packages are available for macOS via [ponyup](https://github.com/ponylang/ponyup). You can also install nightly builds using ponyup.\n\nTo install the most recent ponyc on macOS:\n\n```bash\nponyup update ponyc release\n```\n\n## Windows\n\nWindows users will need to install:\n\n- Visual Studio 2022 or 2019 (available [here](https://www.visualstudio.com/vs/community/)) or the Microsoft C++ Build Tools (available [here](https://visualstudio.microsoft.com/visual-cpp-build-tools/)).\n  - Install the `Desktop Development with C++` workload, along with the latest `Windows 10 SDK (10.x.x.x) for Desktop` individual component.\n\nOnce you have installed the prerequisites, you can get prebuilt release or nightly builds via [ponyup](https://github.com/ponylang/ponyup).  To install the most recent ponyc on Windows:\n\n```pwsh\nponyup update ponyc release\n```\n\nYou can also download the latest ponyc release from [Cloudsmith](https://dl.cloudsmith.io/public/ponylang/releases/raw/versions/latest/ponyc-x86-64-pc-windows-msvc.zip). Unzip the release file in a convenient location, and you will find `ponyc.exe` in the `bin` directory. Following extraction, to make `ponyc.exe` globally available, add it to your `PATH` either by using Advanced System Settings->Environment Variables to extend `PATH` or by using the `setx` command, e.g. `setx PATH \"%PATH%;<directory you unzipped to>\\bin\"`\n"
        },
        {
          "name": "INSTALL_DOCKER.md",
          "type": "blob",
          "size": 2.6396484375,
          "content": "# Docker\n\nDocker based Pony environments are available. The following tags are available:\n\n- latest (most recent build of the `main` branch)\n- release (most recent release)\n- x.y.z (tagged release e.g. 0.33.1)\n\nIf you prefer to use the Alpine images, you can use the following tags:\n\n- alpine (most recent build of the `main` branch)\n- release-alpine (most recent release)\n- x.y.z-alpine (tagged release e.g. 0.33.1)\n\nThe docker images also include common Pony tools like [ponyup](https://github.com/ponylang/ponyup), [corral](https://github.com/ponylang/corral), and [changelog-tool](https://github.com/ponylang/changelog-tool).\n\n## Using Pony from Docker\n\nYou'll need to install Docker using [the instructions here](https://docs.docker.com/engine/installation/). Then you can pull a pony docker image using the following command (where TAG is the tag you want to use)\n\n```bash\ndocker pull ghcr.io/ponylang/ponyc:TAG\n```\n\nThen you'll be able to run `ponyc` to compile a Pony program in a given directory, running a command like this:\n\n```bash\ndocker run -v /path/to/my-code:/src/main ghcr.io/ponylang/ponyc:TAG\n```\n\nIf you're unfamiliar with Docker, remember to ensure that whatever path you provide for `/path/to/my-code` is a full path name and not a relative path, and also note the lack of a closing slash, `/`, at the *end* of the path name.\n\nNote that if your host doesn't match the docker container, you'll probably have to run the resulting program inside the docker container as well, using a command like this:\n\n```bash\ndocker run -v /path/to/my-code:/src/main ghcr.io/ponylang/ponyc:TAG ./main\n```\n\nTo compile and run in one step run a command like this:\n\n```bash\ndocker run -v /path/to/my-code:/src/main ghcr.io/ponylang/ponyc:TAG sh -c \"ponyc && ./main\"\n```\n\n### Docker for Windows\n\nPull an image as above:\n\n```bash\ndocker pull ghcr.io/ponylang/ponyc:TAG\n```\n\nShare a local drive (volume), such as `c:`, with Docker for Windows, so that they are available to your containers. (Refer to [shared drives](https://docs.docker.com/docker-for-windows/#shared-drives) in the Docker for Windows documentation for details.)\n\nThen you'll be able to run `ponyc` to compile a Pony program in a given directory, running a command like this:\n\n```bash\ndocker run -v c:/path/to/my-code:/src/main ghcr.io/ponylang/ponyc:TAG\n```\n\nNote the inserted drive letter. Replace with your drive letter as appropriate.\n\nTo run a program, run a command like this:\n\n```bash\ndocker run -v c:/path/to/my-code:/src/main ghcr.io/ponylang/ponyc:TAG ./main\n```\n\nTo compile and run in one step run a command like this:\n\n```bash\ndocker run -v c:/path/to/my-code:/src/main ghcr.io/ponylang/ponyc:TAG sh -c \"ponyc && ./main\"\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.318359375,
          "content": "Copyright (C) 2016-2020, The Pony Developers\nCopyright (c) 2014-2015, Causality Ltd.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 14.6689453125,
          "content": "config ?= release\narch ?= native\ntune ?= generic\nbuild_flags ?= -j2\nllvm_archs ?= X86;ARM;AArch64;WebAssembly;RISCV\nllvm_config ?= Release\nllc_arch ?= x86-64\npic_flag ?=\n\nifndef version\n  version := $(shell cat VERSION)\n  ifneq ($(wildcard .git),)\n    sha := $(shell git rev-parse --short HEAD)\n    tag := $(version)-$(sha)\n  else\n    tag := $(version)\n  endif\nelse\n  tag := $(version)\nendif\n\nsymlink := yes\nifdef DESTDIR\n  prefix := $(DESTDIR)\n  ponydir := $(prefix)\n  symlink := no\nelse\n  prefix ?= /usr/local\n  ponydir ?= $(prefix)/lib/pony/$(tag)\nendif\n\n# Use clang by default; because CC defaults to 'cc'\n# you must explicitly set CC=gcc to use gcc\nifndef CC\n  ifneq (,$(shell clang --version 2>&1 | grep 'clang version'))\n    CC = clang\n    CXX = clang++\n  endif\nelse ifeq ($(CC), cc)\n  ifneq (,$(shell clang --version 2>&1 | grep 'clang version'))\n    CC = clang\n    CXX = clang++\n  endif\nendif\n\n# By default, CC is cc and CXX is g++\n# So if you use standard alternatives on many Linuxes\n# You can get clang and g++ and then bad things will happen\nifneq (,$(shell $(CC) --version 2>&1 | grep 'clang version'))\n  ifneq (,$(shell $(CXX) --version 2>&1 | grep \"Free Software Foundation\"))\n    CXX = c++\n  endif\n\n  ifneq (,$(shell $(CXX) --version 2>&1 | grep \"Free Software Foundation\"))\n    $(error CC is clang but CXX is g++. They must be from matching compilers.)\n  endif\nelse ifneq (,$(shell $(CC) --version 2>&1 | grep \"Free Software Foundation\"))\n  ifneq (,$(shell $(CXX) --version 2>&1 | grep 'clang version'))\n    CXX = c++\n  endif\n\n  ifneq (,$(shell $(CXX) --version 2>&1 | grep 'clang version'))\n    $(error CC is gcc but CXX is clang++. They must be from matching compilers.)\n  endif\nendif\n\n# Make sure the compiler gets all relevant search paths on FreeBSD\nifeq ($(shell uname -s),FreeBSD)\n  ifeq (,$(findstring /usr/local/include,$(shell echo $CPATH)))\n    export CPATH = /usr/local/include:$CPATH\n  endif\n  ifeq (,$(findstring /usr/local/lib,$(shell echo $LIBRARY_PATH)))\n    export LIBRARY_PATH = /usr/local/lib:$LIBRARY_PATH\n  endif\nendif\n\nsrcDir := $(shell dirname '$(subst /Volumes/Macintosh HD/,/,$(realpath $(lastword $(MAKEFILE_LIST))))')\nbuildDir := $(srcDir)/build/build_$(config)\n\n# get outDir from CMake install file or fall back to default if the file doesn't exist\noutDir := $(subst /libponyrt.tests,,$(shell grep -o -s '$(srcDir)\\/build\\/$(config).*\\/libponyrt.tests' $(buildDir)/cmake_install.cmake))\nifeq ($(outDir),)\n  outDir := $(srcDir)/build/$(config)\nendif\n\nlibsSrcDir := $(srcDir)/lib\nlibsBuildDir := $(srcDir)/build/build_libs\nlibsOutDir := $(srcDir)/build/libs\n\nifndef verbose\n  SILENT = @\n  CMAKE_VERBOSE_FLAGS :=\nelse\n  SILENT =\n  CMAKE_VERBOSE_FLAGS := -DCMAKE_VERBOSE_MAKEFILE=ON\nendif\n\nCMAKE_FLAGS := $(CMAKE_FLAGS) $(CMAKE_VERBOSE_FLAGS)\n\nifeq ($(lto),yes)\n  LTO_CONFIG_FLAGS = -DPONY_USE_LTO=true\nelse\n  LTO_CONFIG_FLAGS =\nendif\n\nifeq ($(runtime-bitcode),yes)\n  ifeq (,$(shell $(CC) -v 2>&1 | grep clang))\n    $(error Compiling the runtime as a bitcode file requires clang)\n  endif\n  BITCODE_FLAGS = -DPONY_RUNTIME_BITCODE=true\nelse\n  BITCODE_FLAGS =\nendif\n\nPONY_USES =\n\ncomma:= ,\nempty:=\nspace:= $(empty) $(empty)\n\ndefine USE_CHECK\n  $$(info Enabling use option: $1)\n  ifeq ($1,valgrind)\n    PONY_USES += -DPONY_USE_VALGRIND=true\n  else ifeq ($1,thread_sanitizer)\n    PONY_USES += -DPONY_USE_THREAD_SANITIZER=true\n  else ifeq ($1,address_sanitizer)\n    PONY_USES += -DPONY_USE_ADDRESS_SANITIZER=true\n  else ifeq ($1,undefined_behavior_sanitizer)\n    PONY_USES += -DPONY_USE_UNDEFINED_BEHAVIOR_SANITIZER=true\n  else ifeq ($1,coverage)\n    PONY_USES += -DPONY_USE_COVERAGE=true\n  else ifeq ($1,pooltrack)\n    PONY_USES += -DPONY_USE_POOLTRACK=true\n  else ifeq ($1,dtrace)\n    DTRACE ?= $(shell which dtrace)\n    ifeq (, $$(DTRACE))\n      $$(error No dtrace compatible user application static probe generation tool found)\n    endif\n    PONY_USES += -DPONY_USE_DTRACE=true\n  else ifeq ($1,scheduler_scaling_pthreads)\n    PONY_USES += -DPONY_USE_SCHEDULER_SCALING_PTHREADS=true\n  else ifeq ($1,systematic_testing)\n    PONY_USES += -DPONY_USE_SYSTEMATIC_TESTING=true\n  else ifeq ($1,runtimestats)\n    PONY_USES += -DPONY_USE_RUNTIMESTATS=true\n  else ifeq ($1,runtimestats_messages)\n    PONY_USES += -DPONY_USE_RUNTIMESTATS_MESSAGES=true\n  else ifeq ($1,pool_memalign)\n    PONY_USES += -DPONY_USE_POOL_MEMALIGN=true\n  else\n    $$(error ERROR: Unknown use option specified: $1)\n  endif\nendef\n\nifdef use\n  ifneq (${MAKECMDGOALS}, configure)\n    $(error You can only specify use= for 'make configure')\n\telse\n    $(foreach useitem,$(sort $(subst $(comma),$(space),$(use))),$(eval $(call USE_CHECK,$(useitem))))\n  endif\nendif\n\nifneq ($(findstring lldb,$(usedebugger)),)\n  debuggercmd := $(usedebugger) --batch --one-line \"breakpoint set --name main\" --one-line run --one-line \"process handle SIGINT --pass true --stop false\" --one-line \"process handle SIGUSR2 --pass true --stop false\"  --one-line \"thread continue\" --one-line-on-crash \"frame variable\" --one-line-on-crash \"register read\" --one-line-on-crash \"bt all\" --one-line-on-crash \"quit 1\" --\n  testextras := --gtest_throw_on_failure\nelse ifneq ($(findstring gdb,$(usedebugger)),)\n  debuggercmd := $(usedebugger) --quiet --batch --return-child-result --eval-command=\"set confirm off\" --eval-command=\"set pagination off\" --eval-command=\"handle SIGINT nostop pass\" --eval-command=\"handle SIGUSR2 nostop pass\" --eval-command=run  --eval-command=\"info args\" --eval-command=\"info locals\" --eval-command=\"info registers\" --eval-command=\"thread apply all bt full\" --eval-command=quit --args\nelse ifneq ($(strip $(usedebugger)),)\n  $(error Unknown debugger: '$(usedebugger)')\nendif\n\n.DEFAULT_GOAL := build\n.PHONY: all libs cleanlibs configure cross-configure build test test-ci test-check-version test-core test-stdlib-debug test-stdlib-release test-examples test-stress test-validate-grammar clean\n\nlibs:\n\t$(SILENT)mkdir -p '$(libsBuildDir)'\n\t$(SILENT)cd '$(libsBuildDir)' && env CC=\"$(CC)\" CXX=\"$(CXX)\" cmake -B '$(libsBuildDir)' -S '$(libsSrcDir)' -DPONY_PIC_FLAG=$(pic_flag) -DCMAKE_INSTALL_PREFIX=\"$(libsOutDir)\" -DCMAKE_BUILD_TYPE=\"$(llvm_config)\" -DLLVM_TARGETS_TO_BUILD=\"$(llvm_archs)\" $(CMAKE_FLAGS)\n\t$(SILENT)cd '$(libsBuildDir)' && env CC=\"$(CC)\" CXX=\"$(CXX)\" cmake --build '$(libsBuildDir)' --target install --config $(llvm_config) -- $(build_flags)\n\ncleanlibs:\n\t$(SILENT)rm -rf '$(libsBuildDir)'\n\t$(SILENT)rm -rf '$(libsOutDir)'\n\nconfigure:\n\t$(SILENT)mkdir -p '$(buildDir)'\n\t$(SILENT)cd '$(buildDir)' && env CC=\"$(CC)\" CXX=\"$(CXX)\" cmake -B '$(buildDir)' -S '$(srcDir)' -DCMAKE_BUILD_TYPE=$(config) -DPONY_ARCH=$(arch) -DPONY_PIC_FLAG=$(pic_flag) -DPONYC_VERSION=$(tag) -DCMAKE_C_FLAGS=\"-march=$(arch) -mtune=$(tune)\" -DCMAKE_CXX_FLAGS=\"-march=$(arch) -mtune=$(tune)\" $(BITCODE_FLAGS) $(LTO_CONFIG_FLAGS) $(CMAKE_FLAGS) $(PONY_USES)\n\nall: build\n\nbuild:\n\t$(SILENT)cd '$(buildDir)' && env CC=\"$(CC)\" CXX=\"$(CXX)\" cmake --build '$(buildDir)' --config $(config) --target all -- $(build_flags)\n\nponyc:\n\t$(SILENT)cd '$(buildDir)' && env CC=\"$(CC)\" CXX=\"$(CXX)\" cmake --build '$(buildDir)' --config $(config) --target ponyc -- $(build_flags)\n\ncrossBuildDir := $(srcDir)/build/$(arch)/build_$(config)\n\ncross-libponyrt:\n\t$(SILENT)mkdir -p $(crossBuildDir)\n\t$(SILENT)cd '$(crossBuildDir)' && env CC=$(CC) CXX=$(CXX) cmake -B '$(crossBuildDir)' -S '$(srcDir)' -DCMAKE_CROSSCOMPILING=true -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_SYSTEM_PROCESSOR=$(arch) -DCMAKE_C_COMPILER=$(CC) -DCMAKE_CXX_COMPILER=$(CXX) -DPONY_CROSS_LIBPONYRT=true -DCMAKE_BUILD_TYPE=$(config) -DCMAKE_C_FLAGS=\"$(cross_cflags)\" -DCMAKE_CXX_FLAGS=\"$(cross_cflags)\" -DPONY_ARCH=$(arch) -DPONYC_VERSION=$(version) -DLL_FLAGS=\"$(cross_llc_flags)\"  $(CMAKE_FLAGS)\n\t$(SILENT)cd '$(crossBuildDir)' && env CC=$(CC) CXX=$(CXX) cmake --build '$(crossBuildDir)' --config $(config) --target libponyrt -- $(build_flags)\n\ntest: all test-core test-stdlib-release test-examples\n\ntest-ci: all test-check-version test-core test-stdlib-debug test-stdlib-release test-examples test-validate-grammar\n\ntest-cross-ci: cross_args=--triple=$(cross_triple) --cpu=$(cross_cpu) --link-arch=$(cross_arch) --linker='$(cross_linker)' $(cross_ponyc_args)\ntest-cross-ci: debuggercmd=\ntest-cross-ci: test-core test-stdlib-debug test-stdlib-release test-examples\n\ntest-check-version: all\n\t$(SILENT)cd '$(outDir)' && ./ponyc --version\n\ntest-core: all test-libponyrt test-libponyc test-full-programs-debug test-full-programs-release\n\ntest-libponyrt: all\n\t$(SILENT)cd '$(outDir)' && $(debuggercmd) ./libponyrt.tests --gtest_shuffle $(testextras)\n\ntest-libponyc: all\n\t$(SILENT)cd '$(outDir)' && $(debuggercmd) ./libponyc.tests --gtest_shuffle $(testextras)\n\nifeq ($(shell uname -s),FreeBSD)\n  num_cores := `sysctl -n hw.ncpu`\nelse ifeq ($(shell uname -s),Darwin)\n  num_cores := `sysctl -n hw.ncpu`\nelse\n  num_cores := `nproc --all`\nendif\n\ntest-full-programs-release: all\n\t@mkdir -p $(outDir)/full-program-tests/release\n\t$(SILENT)cd '$(outDir)' && $(buildDir)/test/full-program-runner/full-program-runner --debugger='$(debuggercmd)' --timeout_s=120 --max_parallel=$(num_cores) --ponyc=$(outDir)/ponyc --output=$(outDir)/full-program-tests/release --test_lib=$(outDir)/test_lib $(srcDir)/test/full-program-tests\n\ntest-full-programs-debug: all\n\t@mkdir -p $(outDir)/full-program-tests/debug\n\t$(SILENT)cd '$(outDir)' && $(buildDir)/test/full-program-runner/full-program-runner --debugger='$(debuggercmd)' --timeout_s=120 --max_parallel=$(num_cores) --ponyc=$(outDir)/ponyc --debug --output=$(outDir)/full-program-tests/debug --test_lib=$(outDir)/test_lib $(srcDir)/test/full-program-tests\n\ntest-stdlib-release: all\n\t$(SILENT)cd '$(outDir)' && PONYPATH=.:$(PONYPATH) ./ponyc -b stdlib-release --pic --checktree $(cross_args) ../../packages/stdlib && echo Built `pwd`/stdlib-release && $(cross_runner) $(debuggercmd) ./stdlib-release --sequential\n\ntest-stdlib-debug: all\n\t$(SILENT)cd '$(outDir)' && PONYPATH=.:$(PONYPATH) ./ponyc -d -b stdlib-debug --pic --strip --checktree $(cross_args) ../../packages/stdlib && echo Built `pwd`/stdlib-debug && $(cross_runner) $(debuggercmd) ./stdlib-debug --sequential\n\ntest-examples: all\n\t$(SILENT)cd '$(outDir)' && PONYPATH=.:$(PONYPATH) find ../../examples/*/* -name '*.pony' -print | xargs -n 1 dirname | sort -u | grep -v ffi- | xargs -n 1 -I {} ./ponyc -d -s --checktree -o {} {}\n\ntest-validate-grammar: all\n\t$(SILENT)cd '$(outDir)' && ./ponyc --antlr >> pony.g.new && diff ../../pony.g pony.g.new\n\ntest-cross-stress-release: cross_args=--triple=$(cross_triple) --cpu=$(cross_cpu) --link-arch=$(cross_arch) --linker='$(cross_linker)' $(cross_ponyc_args)\ntest-cross-stress-release: debuggercmd=\ntest-cross-stress-release: test-stress-release\ntest-stress-release: all\n\t$(SILENT)cd '$(outDir)' && PONYPATH=.:$(PONYPATH) ./ponyc -b ubench --pic $(cross_args) ../../test/rt-stress/string-message-ubench && echo Built `pwd`/ubench && $(cross_runner) $(debuggercmd) ./ubench --pingers 320 --initial-pings 5 --report-count 40 --report-interval 300 --ponynoblock --ponynoscale\n\ntest-cross-stress-debug: cross_args=--triple=$(cross_triple) --cpu=$(cross_cpu) --link-arch=$(cross_arch) --linker='$(cross_linker)' $(cross_ponyc_args)\ntest-cross-stress-debug: debuggercmd=\ntest-cross-stress-debug: test-stress-debug\ntest-stress-debug: all\n\t$(SILENT)cd '$(outDir)' && PONYPATH=.:$(PONYPATH) ./ponyc -d -b ubench --pic $(cross_args) ../../test/rt-stress/string-message-ubench && echo Built `pwd`/ubench && $(cross_runner) $(debuggercmd) ./ubench --pingers 320 --initial-pings 5 --report-count 40 --report-interval 300 --ponynoblock --ponynoscale\n\ntest-cross-stress-with-cd-release: cross_args=--triple=$(cross_triple) --cpu=$(cross_cpu) --link-arch=$(cross_arch) --linker='$(cross_linker)' $(cross_ponyc_args)\ntest-cross-stress-with-cd-release: debuggercmd=\ntest-cross-stress-with-cd-release: test-stress-with-cd-release\ntest-stress-with-cd-release: all\n\t$(SILENT)cd '$(outDir)' && PONYPATH=.:$(PONYPATH) ./ponyc -b ubench --pic $(cross_args) ../../test/rt-stress/string-message-ubench && echo Built `pwd`/ubench && $(cross_runner) $(debuggercmd) ./ubench --pingers 320 --initial-pings 5 --report-count 40 --report-interval 300 --ponynoscale\n\ntest-cross-stress-with-cd-debug: cross_args=--triple=$(cross_triple) --cpu=$(cross_cpu) --link-arch=$(cross_arch) --linker='$(cross_linker)' $(cross_ponyc_args)\ntest-cross-stress-with-cd-debug: debuggercmd=\ntest-cross-stress-with-cd-debug: test-stress-with-cd-debug\ntest-stress-with-cd-debug: all\n\t$(SILENT)cd '$(outDir)' && PONYPATH=.:$(PONYPATH) ./ponyc -d -b ubench --pic $(cross_args) ../../test/rt-stress/string-message-ubench && echo Built `pwd`/ubench && $(cross_runner) $(debuggercmd) ./ubench --pingers 320 --initial-pings 5 --report-count 40 --report-interval 300 --ponynoscale\n\nclean:\n\t$(SILENT)([ -d '$(buildDir)' ] && cd '$(buildDir)' && cmake --build '$(buildDir)' --config $(config) --target clean) || true\n\t$(SILENT)rm -rf $(crossBuildDir)\n\t$(SILENT)rm -rf $(buildDir)\n\t$(SILENT)rm -rf $(outDir)*\n\ndistclean:\n\t$(SILENT)([ -d build ] && rm -rf build) || true\n\ninstall: build\n\t@mkdir -p $(ponydir)/bin\n\t@mkdir -p $(ponydir)/lib/$(arch)\n\t@mkdir -p $(ponydir)/include/pony/detail\n\t$(SILENT)cp $(buildDir)/src/libponyrt/libponyrt.a $(ponydir)/lib/$(arch)\n\t$(SILENT)if [ -f $(outDir)/libponyc.a ]; then cp $(outDir)/libponyc.a $(ponydir)/lib/$(arch); fi\n\t$(SILENT)if [ -f $(outDir)/libponyc-standalone.a ]; then cp $(outDir)/libponyc-standalone.a $(ponydir)/lib/$(arch); fi\n\t$(SILENT)if [ -f $(outDir)/libponyrt-pic.a ]; then cp $(outDir)/libponyrt-pic.a $(ponydir)/lib/$(arch); fi\n\t$(SILENT)cp $(outDir)/ponyc $(ponydir)/bin\n\t$(SILENT)cp src/libponyrt/pony.h $(ponydir)/include\n\t$(SILENT)cp src/common/pony/detail/atomics.h $(ponydir)/include/pony/detail\n\t$(SILENT)cp -r packages $(ponydir)/\nifeq ($(symlink),yes)\n\t@mkdir -p $(prefix)/bin\n\t@mkdir -p $(prefix)/lib\n\t@mkdir -p $(prefix)/include/pony/detail\n\t$(SILENT)ln -s -f $(ponydir)/bin/ponyc $(prefix)/bin/ponyc\n\t$(SILENT)if [ -f $(ponydir)/lib/$(arch)/libponyc.a ]; then ln -s -f $(ponydir)/lib/$(arch)/libponyc.a $(prefix)/lib/libponyc.a; fi\n\t$(SILENT)if [ -f $(ponydir)/lib/$(arch)/libponyc-standalone.a ]; then ln -s -f $(ponydir)/lib/$(arch)/libponyc-standalone.a $(prefix)/lib/libponyc-standalone.a; fi\n\t$(SILENT)if [ -f $(ponydir)/lib/$(arch)/libponyrt.a ]; then ln -s -f $(ponydir)/lib/$(arch)/libponyrt.a $(prefix)/lib/libponyrt.a; fi\n\t$(SILENT)if [ -f $(ponydir)/lib/$(arch)/libponyrt-pic.a ]; then ln -s -f $(ponydir)/lib/$(arch)/libponyrt-pic.a $(prefix)/lib/libponyrt-pic.a; fi\n\t$(SILENT)ln -s -f $(ponydir)/include/pony.h $(prefix)/include/pony.h\n\t$(SILENT)ln -s -f $(ponydir)/include/pony/detail/atomics.h $(prefix)/include/pony/detail/atomics.h\nendif\n\nuninstall:\n\t-$(SILENT)rm -rf $(ponydir) ||:\n\t-$(SILENT)rm -f $(prefix)/bin/ponyc ||:\n\t-$(SILENT)rm -f $(prefix)/lib/libponyc*.a ||:\n\t-$(SILENT)rm -f $(prefix)/lib/libponyrt*.a ||:\n\t-$(SILENT)rm -rf $(prefix)/lib/pony ||:\n\t-$(SILENT)rm -f $(prefix)/include/pony.h ||:\n\t-$(SILENT)rm -rf $(prefix)/include/pony ||:\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.9189453125,
          "content": "# Pony\n\nPony is an open-source, object-oriented, actor-model, capabilities-secure, high-performance programming language.\n\n## Status\n\nPony is still pre-1.0 and as such, semi-regularly introduces breaking changes. These changes are usually fairly easy to adapt to. Applications written in Pony are currently used in production environments.\n\n## Supported platforms\n\n### Operating Systems\n\n* Linux\n* macOS\n* Windows 10\n\n### CPUs\n\n* Full support for 64-bit platforms\n  * x86, ARM and RISC-V CPUs only\n* Partial support for 32-bit platforms\n  * The `arm` and `armhf` architectures are tested via CI (Continuous\n    Integration testing)\n\n## Best effort platforms\n\nBest effort platforms mean that there is support for the platform in the codebase but, we don't have any testing for the platform. We won't intentionally break a best-effort platform or remove support for it from the codebase, at the same time, we do make no effort to maintain it. When you go build a \"best effort platform\" from source, you might find it doesn't build. We welcome thoughtful pull requests to bring the platform up-to-date.\n\n* DragonFlyBSD (x86 only)\n* FreeBSD (x86 only)\n\n## More Information\n\n* [Installation](INSTALL.md)\n* [Building from source](BUILD.md)\n* [Docker images](INSTALL_DOCKER.md)\n* [Editor support](EDITORS.md)\n\n## Resources\n\n* [Learn more about Pony](https://www.ponylang.io/discover/)\n* [Start learning Pony](https://www.ponylang.io/learn/)\n  * [Getting help](https://www.ponylang.io/learn/#getting-help)\n* [Try Pony online](https://playground.ponylang.io)\n* [Frequently Asked Questions](https://www.ponylang.io/faq/)\n* [Community](https://www.ponylang.io/community/)\n\n## Contributing\n\nWe welcome contributions to Pony. Please read through [CONTRIBUTING.md](CONTRIBUTING.md) for details on how to get started.\n\n## License\n\nPony is distributed under the terms of the [2-Clause BSD License](https://opensource.org/licenses/BSD-2-Clause). See [LICENSE](LICENSE) for details.\n"
        },
        {
          "name": "RELEASE_PROCESS.md",
          "type": "blob",
          "size": 4.94140625,
          "content": "# How to cut a Pony release\n\nThis document is aimed at members of the Pony team who might be cutting a release of Pony. It serves as a checklist that can take you through doing a release step-by-step.\n\n## Prerequisites\n\n* You must have commit access to the ponyc repository.\n* It would be helpful to have read and write access to the ponylang [cloudsmith](https://cloudsmith.io/) account.\n\n### Validate external services are functional\n\nWe rely on Cloudsmith and GitHub Actions as part of our release process. Both need to be up and functional in order to do a release. Check the status of each before starting a release. If any are reporting issues, push the release back a day or until whenever they are all reporting no problems.\n\n* [Cloudsmith](https://status.cloudsmith.io/)\n* [GitHub](https://www.githubstatus.com/)\n\n## Releasing\n\nPlease note that this document was written with the assumption that you are using a clone of the `ponyc` repo. You have to be using a clone rather than a fork. It is advised that you do this by making a fresh clone of the `ponyc` repo from which you will release.\n\n```bash\ngit clone git@github.com:ponylang/ponyc.git ponyc-release-clean\ncd ponyc-release-clean\n```\n\nBefore getting started, you will need a number for the version that you will be releasing as well as an agreed upon \"golden commit\" that will form the basis of the release.\n\nThe \"golden commit\" must be `HEAD` on the `main` branch of this repository. At this time, releasing from any other location is not supported.\n\nFor the duration of this document, that we are releasing version is `0.3.1`. Any place you see those values, please substitute your own version.\n\n```bash\ngit tag release-0.3.1\ngit push origin release-0.3.1\n```\n\n### Wait on release artifacts\n\nOn each release, we upload ponyc binaries for builds to Cloudsmith. The releases are built on [GitHub Actions](https://github.com/ponylang/ponyc/actions/workflows/release.yml).\n\nYou can verify that the release artifacts were successfully built and uploaded by checking the [ponylang Cloudsmith releases repository](https://cloudsmith.io/~ponylang/repos/releases/packages/) and that all packages exist.\n\nPackage names will be:\n\n* ponyc-arm64-apple-darwin.tar.gz\n* ponyc-x86-64-apple-darwin.tar.gz\n* ponyc-x86-64-pc-windows-msvc.zip\n* ponyc-x86-64-unknown-linux-fedora41.tar.gz\n* ponyc-x86-64-unknown-linux-musl.tar.gz\n* ponyc-x86-64-unknown-linux-ubuntu20.04.tar.gz\n* ponyc-x86-64-unknown-linux-ubuntu22.04.tar.gz\n* ponyc-x86-64-unknown-linux-ubuntu24.04.tar.gz\n\nand should have a version field listing that matches the current release e.g. `0.3.1`.\n\nIf not all files are presents after 10 to 15 minutes then either a build job is delayed waiting for resources or something has gone wrong. Check [GitHub Actions](https://github.com/ponylang/ponyc/actions/workflows/release.yml) to learn more.\n\n### Wait on Docker images to be built\n\nAs part of every release, 6 Docker images are built:\n\n* Ubuntu images\n  * release\n  * 0.3.1\n* Alpine images\n  * release-alpine\n  * 0.3.1-alpine\n* Windows images\n  * release-windows\n  * 0.3.1-windows\n\nThe images are built via GitHub action after Linux releases have been uploaded to Cloudsmith. Cloudsmith sends an event to GitHub that triggers Docker images builds in the [\"Cloudsmith package synchronised\" workflow](https://github.com/ponylang/ponyc/actions/workflows/cloudsmith-package-sychronised.yml).You can track the progress of the builds (including failures) there. You can validate that all the images have been pushed by checking the tags of the [ponylang/ponyc package](https://github.com/ponylang/ponyc/pkgs/container/ponyc).\n\n### Verify that the Pony Playground updated to the new version\n\nOnce the images have been updated, the Pony playground should automatically update. You can check the version running by compiling a small Pony program and verifying that the version listed in the output matches the newly released Pony version.\n\nIf the versions are different, you'll need to log in to the playground server as root and run `bash update-playground.bash`.\n\n## If something goes wrong\n\nThe release process can be restarted at various points in it's lifecycle by pushing specially crafted tags.\n\n### Start a release\n\nAs documented above, a release is started by pushing a tag of the form `release-x.y.z`.\n\n### Build artifacts\n\nThe release process can be manually restarted from here by pushing a tag of the form `x.y.z`. The pushed tag must be on the commit to build the release artifacts from. During the normal process, that commit is the same as the one that `release-x.y.z`.\n\n### Announce release\n\nThe release process can be manually restarted from here by push a tag of the form `announce-x.y.z`. The tag must be on a commit that is after \"Release x.y.z\" commit that was generated during the `Start a release` portion of the process.\n\nIf you need to restart from here, you will need to pull the latest updates from the ponyc repo as it will have changed and the commit you need to tag will not be available in your copy of the repo with pulling.\n"
        },
        {
          "name": "STYLE_GUIDE.md",
          "type": "blob",
          "size": 18.4267578125,
          "content": "# Pony Standard Library Style Guide\n\nThis is a document describing the preferred practices for writing code for the Pony standard library. Other projects are free to use the same style, but you are free to use any style in other projects. The following conventions are meant to ensure consistency and readability of Pony code. Any of the following rules may be broken in situations where the recommended practice would diminish readability.\n\n## Formatting\n\n### Line Length\n\nThe maximum line length is 80 columns.\n\n### Trailing Whitespace\n\nNo trailing whitespace at the end of lines.\n\n### Indentation\n\nUse 2 spaces for indentation, no hard tabs.\n\n```pony\nactor Main\n  new create(env: Env) =>\n    env.out.print(\"Hello, world!\")\n```\n\n### Blank Lines\n\n- One blank line is placed between top-level declarations such as classes, primitives, actors, etc.\n- There is no blank lines between the class declaration and its first member or documentation.\n- Fields have no blank lines between them.\n- Functions are separated from other members by one line.\n\n  ```pony\n  // OK\n  class Foo\n    let bar: Bar\n    let baz: Baz\n\n    fun foo() =>\n      // ...\n\n    fun bar() =>\n      // ...\n\n  // OK\n  class Foo\n    \"\"\"\n    Some documentation\n    \"\"\"\n    let bar: Bar\n\n    fun foo() =>\n      // ...\n\n  // OK\n  class Foo\n    fun foo() =>\n      // ...\n\n  // Not OK\n  class Foo\n\n    let bar: Bar\n    let baz: Baz\n    fun foo() =>\n      // ...\n  ```\n\n- Blank lines between __one-line__ functions or primitives may be omitted if they are related.\n\n  ```pony\n  primitive Red fun apply(): U32 => 0xFF0000FF\n  primitive Green fun apply(): U32 => 0x00FF00FF\n  primitive Blue fun apply(): U32 => 0x0000FFFF\n\n  type Color is (Red | Green | Blue)\n  ```\n\n### Whitespace\n\n- Use spaces around binary operators and after commas, colons, and semicolons. Do not put spaces around brackets or parentheses.\n\n  ```pony\n  let x: USize = 3\n\n  x = x + (5 * x)\n\n  (let a, let b) = (\"a\", \"b\")\n\n  let ns = [as USize: 1; 2; 3]\n\n  fun foo(i: USize, bar: USize = 0)\n\n  foo(x where bar = y)\n  ```\n\n- The `not` operator is surrounded by spaces, but the `-` operator is not followed by a space.\n\n  ```pony\n  if not x then -a end\n  ```\n\n- Lambda expressions follow the rules above except that a space is placed before the closing brace only if the lambda is on one line.\n\n  ```pony\n  // OK\n  {(a: USize, b: USize): USize => a + b }\n\n  // OK\n  {(a: USize, b: USize): USize =>\n    a + b\n  }\n\n  // Not OK\n  {(a: USize, b: USize): USize => a + b}\n\n  // Not OK\n  { (a: USize, b: USize): USize => a + b }\n\n  // Not OK\n  {(a: USize, b: USize): USize =>\n    a + b }\n  ```\n\n- Normal rules apply to Lambda types.\n\n  ```pony\n  // OK\n  type foo is {(USize, USize): USize} box\n\n  // Not OK\n  type foo is {(USize, USize): USize } box\n\n  // Not OK\n  type foo is { (USize, USize): USize } box\n  ```\n\n### Type Aliases\n\nAlign long union and intersection types with each type on a separate line starting with the `(`, `|`, or `&` symbols. In this case, every symbol must be separated by a single space or a newline.\n\n```pony\n// OK\ntype Signed is (I8 | I16 | I32 | I64 | I128)\n\n// OK\ntype Signed is\n  ( I8\n  | I16\n  | I32\n  | I64\n  | I128 )\n\n// OK\ntype Signed is\n  ( I8\n  | I16\n  | I32\n  | I64\n  | I128\n  )\n\n// Not OK\ntype Signed is ( I8\n              | I16\n              | I32\n              | I64\n              | I128 )\n\n// Not OK\ntype Signed is\n  (I8\n  |I16\n  |I32\n  |I64\n  |I128)\n```\n\n### Array Literals\n\nMultiline arrays generally have a newline between each entry, though logical exceptions exist (such as tables).\n\n```pony\n// OK\nlet ns = [as USize: 1; 2; 3]\n\n// OK\nlet strs = [\"a\"; \"b\"; \"c\"]\n\n// OK\nlet ns =\n  [ as USize:\n    1\n    2\n    3 ]\n\n// OK\nlet ns =\n  [ as USize:\n    1\n    2\n    3\n  ]\n\n// Not OK\nlet ns =\n  [as USize:\n   1\n   2\n   3\n  ]\n\n// Not OK\nlet ns = [ as USize:\n    1\n    2\n    3\n]\n\n// Not OK\nlet ns = [ as USize:\n          1\n          2\n          3 ]\n```\n\n### Control Structures\n\n- Control structures are aligned so that their keywords (if, else, for, try, end, etc.) are at the same indentation level.\n\n  ```pony\n  if cond1 then e1\n  elseif cond2 then e2\n  else e3\n  end\n\n  if cond1 then\n    e1\n  elseif cond2 then\n    e2\n  else\n    e3\n  end\n\n  for name in [\"Bob\"; \"Fred\"; \"Sarah\"].values() do\n    env.out.print(name)\n  end\n  ```\n\n- Small expressions may be placed on a single line.\n\n  ```pony\n  if cond then e1 else e2 end\n  ```\n\n- Match expression cases are __not__ indented.\n\n  ```pony\n  match (x, y)\n  | (None, _) => \"none\"\n  | (let s: String, 2) => s + \" two\"\n  | (let s: String, 3) => s + \" three\"\n  | (let s: String, let u: U32) if u > 14 => s + \" other big integer\"\n  | (let s: String, _) => s + \" other small integer\"\n  else \"something else\"\n  end\n\n  match alive\n  | true =>\n    Debug.err(\"Beep boop!\")\n    this.forever()\n  | false =>\n    Debug.err(\"Ugah!\")\n    None\n  end\n  ```\n\n- Match expressions __may not__ be on a single line.\n\n  ```pony\n  // OK\n  match x\n  | let n: U8 => n.string()\n  else \"0\"\n  end\n\n  // Not OK\n  match x | let n: U8 => n.string() else \"0\" end\n  ```\n\n### Assignment\n\nAssignment of a multiline expression is indented below the `=` symbol.\n\n```pony\n// OK\nvar x =\n  if friendly then\n    \"Hello\"\n  else\n    false\n  end\n\n// OK\nlet output =\n  recover String(\n    file_name.size()\n      + file_linenum.size()\n      + file_linepos.size()\n      + msg.size()\n      + 4)\n  end\n\n// Not OK\nvar x = if friendly then\n  \"Hello\"\nelse\n  false\nend\n```\n\n### Method Declarations\n\n- Partial functions are denoted with a `?` separated from other symbols by one space.\n\n  ```pony\n  // OK\n  fun foo(): Foo^ ? =>\n  // ...\n\n  // OK\n  fun foo() ? =>\n  // ...\n\n  // Not OK\n  fun foo(): Foo^? =>\n  // ...\n\n  // Not OK\n  fun foo()? =>\n  // ...\n  ```\n\n- Multiline function parameters are each listed on a separate line. The return type preceded by a `:` is placed at the same indentation level followed by a question mark (if the function is partial). The `=>` is placed on a separate line between the parameter list and the function body at the same indentation level as the `fun` keyword. These rules also apply to FFI function declarations.\n\n  ```pony\n  // OK\n  fun find(\n    value: A!,\n    offset: USize = 0,\n    nth: USize = 0,\n    predicate: {(box->A!, box->A!): Bool} val =\n      {(l: box->A!, r: box->A!): Bool => l is r })\n    : USize ?\n  =>\n    // ...\n\n  // OK\n  fun tag _init(typ': ValueType, default': (Value | None))\n    : (ValueType, Value, Bool) ?\n  =>\n    // ...\n\n  // OK\n  @pony_asio_event_create[AsioEventID](\n    owner: AsioEventNotify,\n    fd: U32,\n    flags: U32,\n    nsec: U64,\n    noisy: Bool)\n\n  // Not OK\n  fun find(\n           value: A!,\n           offset: USize = 0,\n           nth: USize = 0,\n           predicate: {(box->A!, box->A!): Bool} val =\n             {(l: box->A!, r: box->A!): Bool => l is r })\n           : USize ?\n           =>\n    // ...\n  ```\n\n### Function Calls\n\n- No spaces are placed around the `.` symbol, but the `.>` symbol is spaced like an infix operator.\n\n  ```pony\n  // OK\n  Iter[I64](input.values()).skip(2).next()\n\n  // OK\n  output .> append(file_name) .> append(\":\") .> append(msg)\n\n  // Not OK\n  Iter[I64](input . values()) . skip(2) . next()\n\n  // Not OK\n  output.>append(file_name).>append(\":\").>append(msg)\n  ```\n\n- Explicit partial calls are postfixed with '?' operator without whitespace in between.\n\n  ```pony\n  // OK\n  [as U8: 0; 1; 1].apply(0)?\n\n  // not OK\n  let newVal = myHashMap.insert(\"key\", \"value\") ?\n  ```\n\n- Multiple function calls should generally be aligned so that each call is placed on a separate line indented below the initial object.\n\n  ```pony\n  // OK\n  Iter[I64](input.values())\n    .take_while({(x: I64): Bool ? => error })\n    .collect(Array[I64]))\n\n  // OK\n  output\n    .> append(file_name)\n    .> append(\":\")\n    .> append(msg)\n\n  // Not OK\n  Iter[I64](input.values()).take_while({(x: I64): Bool ? => error })\n    .collect(Array[I64]))\n\n  // Not OK\n  output\n  .> append(file_name)\n  .> append(\":\")\n  .> append(msg)\n  ```\n\n- Function arguments mostly follow the same rules as arguments in method declarations. However, all arguments may be placed on the following line with an additional level of indentation if all arguments would fit on that line. Otherwise, arguments must be placed on individual lines. These rules also apply to FFI calls. A `where` keyword and the following arguments may all exist on their own line.\n\n  ```pony\n  // OK\n  h.assert_true(Iter[I64](input.values()).any(is_positive))\n\n  // OK\n  Iter[String].chain(\n    [input0.values(); input1.values(); input0.values()].values())\n\n  // OK\n  h.assert_eq[String](\n    \"   fmt   \",\n    Format(\"fmt\", FormatDefault, PrefixDefault, -1, 9, AlignCenter))\n\n  // OK\n  buf.append(Format.int[U32](\n    high\n    where fmt = FormatHexBare, width = 4))\n\n  // Not OK\n  @pony_asio_event_create(this, fd,\n    AsioEvent.read_write_oneshot(), 0, true)\n\n  // Not OK\n  options.upsert(o.spec().name(),\n                 o,\n                 {(x, n) => x._append(n) })?\n  ```\n\n### Type Parameters and Constraints\n\nMultiline type parameters are each listed on a separate line. Type constraints will start on the next line beginning with the `is` keyword. Complex type constraints follow the rules described in [Type Aliases](#type-aliases).\n\n```pony\n// OK\ntype Map[\n  K: (mut.Hashable val & Equatable[K]),\n  V: Any #share]\n  is HashMap[K, V, mut.HashEq[K]]\n\n// OK\nclass Flags[\n  A: Flag[B] val, B: (Unsigned & Integer[B] val) = U64]\n  is Comparable[Flags[A, B] box]\n\n// OK\ntype BinaryHeapPriority[A: Comparable[A] #read]\n  is ( _BinaryHeapPriority[A]\n    & (MinHeapPriority[A] | MaxHeapPriority[A]) )\n\n// OK\nfun ref zip4[B, C, D, E](\n  i2: Iterator[B],\n  i3: Iterator[C],\n  i4: Iterator[D],\n  i5: Iterator[E])\n  : Iter[(A, B, C, D, E)]^\n=>\n\n// OK\nfun div_checked[\n  T: (SignedInteger[T, U] val & Signed),\n  U: UnsignedInteger[U] val](\n  x: T,\n  y: T)\n  : (T, Bool)\n=>\n\n// Not OK\nprimitive HashEq64\n  [A: (Hashable64 #read & Equatable[A] #read)] is HashFunction64[A]\n\n// Not OK\nclass Flags[A: Flag[B] val,\n            B: (Unsigned & Integer[B] val) = U64]\n  is Comparable[Flags[A, B] box]\n\n// Not OK\nclass val _MapCollisions[K: Any #share, V: Any #share,\n  H: mut.HashFunction[K] val]\n\n// Not OK\nfun mod_checked\n  [T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](\n  x: T,\n  y: T)\n  : (T, Bool)\n=>\n\n```\n\n## Naming\n\n- `CamelCase` is used for types and `snake_case` is used for field, function, and variable names.\n\n- Acronyms (HTTP, JSON, XML) in types are uppercase.\n\n  ```pony\n  // OK\n  primitive URLEncode\n\n  // OK\n  type TCPConnectionAuth is (AmbientAuth | NetAuth | TCPAuth | TCPConnectAuth)\n\n  // OK\n  let url = URL.valid(\"https://www.ponylang.io/\")\n\n  // Not OK\n  class JsonDoc\n  ```\n\n- The file name of Pony source files should be based on the name of the *principal type* defined in that file.\n  - The *principal type* in a file is the type that makes up the bulk of the significant lines of code in the file or is conceptually more important or fundamental than all other types in the file. For example, if a file defines a trait type and a group of small class types that all provide that trait, then the trait type should be considered the *principal type*.\n  - If there are multiple types defined in the file which all have equal significance and a shared name prefix, then the shared prefix should be used as the *principal type name*. For example, a file that defines `PacketFoo`, `PacketBar`, and `PacketBaz` types should use `Packet` as the *principal type name*, even if no `Packet` type is defined.\n  - If there are multiple significant types defined in the file which do not have a shared name prefix, then this should be taken as a hint that these types should probably be defined in separate files instead of together in one file.\n\n- The *file name* should be directly derived from the *principal type name* using a consistent reproducible scheme of case conversion.\n  - The *file name* should be the \"snake case\" version of the *principal type name*. That is, each word in the *principal type name* (as defined by transitions from lowercase to uppercase letters) should be separated with the underscore character (`_`) and lowercased to generate the *file name*. For example, a file that defines the `ContentsLog` type should be named `contents_log.pony`.\n  - If the *principal type* is a private type (its name beginning with an underscore character), then the *file name* should also be prefixed with an underscore character to highlight the fact that it defines a private type. For example, a file that defines the `_ClientConnection` type should be named `_client_connection.pony`.\n  - If the *principal type* name contains an initialism (a sequence of uppercase letters with no lowercase letters between them), then the entire initialism should be considered as a single word when converting to snake case. Note that if there is another word following the initialism, its first letter will also be uppercase, but should not be considered part of the sequence of uppercase letters that form the initialism. For example, a file that defines the `SSLContext` type should be named `ssl_context.pony`.\n\n- A Pony package name is derived from the name of the directory which contains its source files. Package names, and therefore the corresponding directory names, should use `snake_case`.\n\n## Documentation\n\n### Public Functions and Types\n\nPublic functions and types must include a triple-quoted docstring unless it is self-explanatory to anyone with the most basic knowledge of the domain. Markdown is used for formatting. The `\"\"\"` tokens are placed on their own lines, even when the entire docstring could fit on a single line with the `\"\"\"` tokens.\n\n```pony\nprimitive Format\n  \"\"\"\n  Provides functions for generating formatted strings.\n  * fmt. Format to use.\n  * prefix. Prefix to use.\n  * prec. Precision to use. The exact meaning of this depends on the type,\n  but is generally the number of characters used for all, or part, of the\n  string. A value of -1 indicates that the default for the type should be\n  used.\n  * width. The minimum number of characters that will be in the produced\n  string. If necessary the string will be padded with the fill character to\n  make it long enough.\n  * align. Specify whether fill characters should be added at the beginning or\n  end of the generated string, or both.\n  * fill: The character to pad a string with if is is shorter than width.\n  \"\"\"\n```\n\n### Package-level documentation\n\nPackage-level documentation should be placed in a file called `<PACKAGE>.pony` within a triple-quoted docstring at the top of the file. This same file may contain additional content if such organization makes sense for the package.\n\n## Comments\n\nSingle line comments will have exactly one space between the `//` token and the beginning of the comment message. This single space may only be omitted if the comment only contains valid Pony code. Single line comments that continue a previous comment have the same spacing requirements. No such restrictions are placed on multiline comments between the `/*` and `*/` tokens.\n\n```pony\n// if `data` is 1 cacheline or less in size\n// copy it into the existing `_current` array\n// to coalesce multiple tiny arrays\n// into a single bigger array\n```\n\n## Testing\n\n### Ordering\n\nTests should be ordered alphabetically (within reason) separated into sections based on platform inclusion/exclusion criteria. First, list tests that run on all platforms, next list tests which include/exclude one platform, and lastly list tests which include/exclude multiple platforms. Sections should have an increasing number of inclusions/exclusions therefore if you have a section including only one platform, the next section should be tests excluding only that platform. When considering multiple platforms, list them alphabetically between sections and within sections. The set of known platforms recognized by `ifdef` can be found in `Platform` within `builtin`.\n\n```pony\nactor Main is TestList\n  new create(env: Env) => PonyTest(env, this)\n  new make() => None\n\n  fun tag tests(test: PonyTest) =>\n    // Tests below include all systems and are listed alphabetically\n    test(_TestOnAllSystemsA)\n    test(_TestOnAllSystemsB)\n    test(_TestOnAllSystemsC)\n\n    // Tests below include only bsd and are listed alphabetically\n    ifdef bsd then\n      test(_TestOnBsdA)\n      test(_TestOnBsdB)\n      test(_TestOnBsdC)\n    end\n\n    // Tests below exclude bsd and are listed alphabetically\n    ifdef not bsd then\n      test(_TestOnAllSystemsExceptBsdA)\n      test(_TestOnAllSystemsExceptBsdB)\n      test(_TestOnAllSystemsExceptBsdC)\n    end\n\n    // Tests below include only osx and are listed alphabetically\n    ifdef osx then\n      test(_TestOnOsxA)\n      test(_TestOnOsxB)\n      test(_TestOnOsxC)\n    end\n\n    // Tests below exclude osx and are listed alphabetically\n    ifdef not osx then\n      test(_TestOnAllSystemsExceptOsxA)\n      test(_TestOnAllSystemsExceptOsxB)\n      test(_TestOnAllSystemsExceptOsxC)\n    end\n\n    // Tests below include only windows and are listed alphabetically\n    ifdef windows then\n      test(_TestOnWindowsA)\n      test(_TestOnWindowsB)\n      test(_TestOnWindowsC)\n    end\n\n    // Tests below exclude windows and are listed alphabetically\n    ifdef not windows then\n      test(_TestOnAllSystemsExceptWindowsA)\n      test(_TestOnAllSystemsExceptWindowsB)\n      test(_TestOnAllSystemsExceptWindowsC)\n    end\n\n    // Tests below exclude bsd/windows and are listed alphabetically\n    ifdef not bsd or not windows then\n      test(_TestOnAllSystemsExceptBsdOrWindowsA)\n      test(_TestOnAllSystemsExceptBsdOrWindowsB)\n      test(_TestOnAllSystemsExceptBsdOrWindowsC)\n    end\n\n    // Tests below exclude osx/windows and are listed alphabetically\n    ifdef not osx or not windows then\n      test(_TestOnAllSystemsExceptOsxOrWindowsA)\n      test(_TestOnAllSystemsExceptOsxOrWindowsB)\n      test(_TestOnAllSystemsExceptOsxOrWindowsC)\n    end\n\n    // Tests below exclude bsd/osx/windows and are listed alphabetically\n    ifdef not bsd or not osx or not windows then\n      test(_TestOnAllSystemsExceptBsdOrOsxOrWindowsA)\n      test(_TestOnAllSystemsExceptBsdOrOsxOrWindowsB)\n      test(_TestOnAllSystemsExceptBsdOrOsxOrWindowsC)\n    end\n```\n\nIt can sometimes make more sense to not use alphabetical ordering -- such as when using a generic test builder -- in such circumstances breaking alphabetical ordering is allowed.\n\n```pony\nactor Main is TestList\n  new create(env: Env) => PonyTest(env, this)\n  new make() => None\n\n  fun tag tests(test: PonyTest) =>\n    // Tests below include all systems and are listed in increasing type argument size\n    test(_TestOnAllSystemsWithBuilder[U8]())\n    test(_TestOnAllSystemsWithBuilder[U16]())\n    test(_TestOnAllSystemsWithBuilder[U32]())\n    test(_TestOnAllSystemsWithBuilder[U64]())\n    test(_TestOnAllSystemsWithBuilder[U128]())\n```\n"
        },
        {
          "name": "SUPPORT.md",
          "type": "blob",
          "size": 1.7939453125,
          "content": "# Getting help with Pony\n\nLooking for help with Pony? Awesome. We are here to help. Before you open an issue against this repo, we ask you read the following to better direct you to the proper forum.\n\n## Opening an issue\n\nWe ask you to refrain from opening GitHub issues for non-actionable items. We use GitHub issues to track bugs and other problems that can be resolved. If you are not sure how to code a particular problem, how to decipher an error message, wondering about a benchmark, or anything of that sort, please use reach out via [our Zulip community][zulip].\n\n## How to get help\n\nIf you are looking for an answer \"right now,\" we suggest you give our [Zulip community][zulip-beginner-help] a try. Whatever your question is, it isn't dumb, and we won't get annoyed.\n\nMany folks encounter the same issues or have the same questions, be sure to give the [frequently asked questions][FAQ] section of this website a read.\n\nThink you've found a bug? It's entirely possible. Pony is a relatively young language that is still changing at a rapid pace and bugs do happen. Your best bet. Write to the mailing list with your issue and verify that you are experiencing an issue; once a more knowledgeable member of the community confirms you are experiencing a bug, open an issue.\n\n* [Open an issue][issues]\n\nThe Pony community while small is helpful and inviting. We think you'll find interacting with us to be an enjoyable experience. You can get a lot more community-related resources in the [community section][website community section] of this site.\n\n[FAQ]: https://www.ponylang.io/faq/\n[zulip]: https://ponylang.zulipchat.com\n[zulip-beginner-help]: https://ponylang.zulipchat.com/#narrow/stream/189985-beginner-help\n[issues]: https://github.com/ponylang/ponyc/issues\n[website community section]: https://www.ponylang.io/community/\n"
        },
        {
          "name": "SYSTEMATIC_TESTING.md",
          "type": "blob",
          "size": 3.0947265625,
          "content": "# Systematic testing for the runtime\n\nPony is a concurrent and parallel language. Different actors can be run at the same time on multiple CPUs. The Pony runtime coordinates all of this interleaving of actors and contains a fair amount of complexity. Runtime functionality such as the message queues and the backpressure system rely on atomic operations which can be tricky to get right across multiple platforms.\n\nSystematic testing allows for running of Pony programs in a deterministic manner. It accomplishes this by coordinating the interleaving of the multiple runtime scheduler threads in a deterministic and reproducible manner instead of allowing them all to run in parallel like happens normally. This ability to reproduce a particular runtime behavior is invaluable for debugging runtime issues.\n\nThe overall idea and some details of the implementation for systematic testing has been shamelessly stolen from the [Verona runtime](https://github.com/microsoft/verona/blob/master/docs/explore.md#systematic-testing). This implementation doesn't include replayable runtime unit tests like Verona, but it sets a foundation for allowing replayable runs of programs (and probably tests) for debugging runtime issues such as backpressure/etc. Additionally, while all development and testing was done on Linux, in theory this systematic testing functionality should work on other operating systems (Windows, MacOS, etc) barring issues related to lack of atomics for tracking the active thread and whether a thread has stopped executing or not (unlikely to be an issue on MacOS/other `pthread` based threading implementations).\n\n## Building\n\nInstructions for how to build with systematic testing enabled can be found in [BUILD.md](BUILD.md).\n\nThe output of building and running `examples/helloworld` with systematic testing enabled will look something like:\n\n```bash\nme@home:~/ponyc$ ./helloworld\nSystematic testing using seed: 360200870782547...\n(rerun with `<app> --ponysystematictestingseed 360200870782547` to reproduce)\n<SNIPPED LOTS OF OUTPUT>\nthread 139871784978176: yielding to thread: 139871776585472.. next_index: 3\nHello, world.\nthread 139871776585472: yielding to thread: 139871768192768.. next_index: 4\n<SNIPPED LOTS OF OUTPUT>\nSystematic testing successfully finished!\nme@home:~/ponyc$\n```\n\n## Uses\n\nAs an example, if someone has a test that has an intermittent failure (that is somehow related to timing of how actors are scheduled and run) they could recompile the test with systematic testing enabled and then run the test until it fails and then continually reproduce the failure by re-using the same seed via the --ponysystematictestingseed <SEED_THAT_CAUSED_FAILURE> cli argument. Then once the intermittent failure can be reliably reproduced, it should make it significantly easier to track down the root cause and fix the bug.\n\nNOTE: While systematic testing could be useful to users of ponyc (like in the example scenario), we expect it to get more use from developers of Pony as they enhance the runtime (i.e. changes to backpressure, changes to the message queue, changes to the objectmap, changes to GC, changes to the cycle detector, etc).\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0068359375,
          "content": "0.58.9\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "make.ps1",
          "type": "blob",
          "size": 20.1298828125,
          "content": "﻿Param(\n    [Parameter(Position=0, HelpMessage=\"Enter the action to take, e.g. libs, cleanlibs, configure, build, clean, distclean, test, install.\")]\n    [string]\n    $Command = 'build',\n\n    [Parameter(HelpMessage=\"The build configuration (Release, Debug, RelWithDebInfo, MinSizeRel).\")]\n    [string]\n    $Config = \"Release\",\n\n    [Parameter(HelpMessage=\"The CMake generator, e.g. `\"Visual Studio 16 2019`\"\")]\n    [string]\n    $Generator = \"default\",\n\n    [Parameter(HelpMessage=\"The architecture to use for compiling, e.g. `\"x64`\"\")]\n    [string]\n    $Arch = \"x64\",\n\n    [Parameter(HelpMessage=\"The location to install to\")]\n    [string]\n    $Prefix = \"default\",\n\n    [Parameter(HelpMessage=\"The version to use when packaging\")]\n    [string]\n    $Version = \"default\",\n\n    [Parameter(HelpMessage=\"Whether or not to turn on LTO\")]\n    [string]\n    $Lto = \"no\",\n\n    [Parameter(HelpMessage=\"Whether or not to run tests in LLDB debugger\")]\n    [string]\n    $Uselldb = \"no\",\n\n    [Parameter(HelpMessage=\"Tests to run\")]\n    [string]\n    $TestsToRun = 'libponyrt.tests,libponyc.tests,libponyc.run.tests.debug,libponyc.run.tests.release,stdlib-debug,stdlib-release,grammar'\n)\n\n$srcDir = Split-Path $script:MyInvocation.MyCommand.Path\n\nswitch ($Version)\n{\n    \"default\" { $Version = (Get-Content $srcDir\\VERSION) + \"-\" + (git rev-parse --short --verify HEAD) }\n    \"nightly\" { $Version = \"nightly\" + (Get-Date).ToString(\"yyyyMMdd\") }\n    \"date\" { $Version = (Get-Date).ToString(\"yyyyMMdd\") }\n}\n\n# Sanitize config to conform to CMake build configs.\nswitch ($Config.ToLower())\n{\n    \"release\" { $Config = \"Release\"; break; }\n    \"debug\" { $Config = \"Debug\"; break; }\n    \"relwithdebinfo\" { $Config = \"RelWithDebInfo\"; break; }\n    \"minsizerel\" { $Config = \"MinSizeRel\"; break; }\n    default { throw \"'$Config' is not a valid config; use Release, Debug, RelWithDebInfo, or MinSizeRel).\" }\n}\n$config_lower = $Config.ToLower()\n\nif ($null -eq (Get-Command \"cmake.exe\" -ErrorAction SilentlyContinue)) {\n\tWrite-Output \"Warning, unable to find cmake.exe in your PATH, trying to discover one in Visual Studio installation.\"\n\tPush-Location\n\t$vswhere = \"${env:ProgramFiles(x86)}\\Microsoft Visual Studio\\Installer\\vswhere.exe\"\n\tif (Test-Path $vswhere -PathType Leaf ) {\n    \t$cmakePath = $(Get-Item $( Invoke-Expression '& \"$vswhere\" -prerelease -latest -requires Microsoft.VisualStudio.Component.VC.CMake.Project -find Common7/IDE/**/cmake.exe ' )).Directory.FullName\n\t    if ($null -ne $cmakePath) {\n\t\t\t$env:Path = \"$env:Path;$cmakePath\"\n\t\t\tWrite-Output \"Success, CMake added to current PATH from $cmakePath\"\n\t\t} else {\n\t\t\tWrite-Output \"Your latest Visual Studio installation does not include CMake package.\"\n\t\t}\n\t} else {\n\t\tWrite-Output \"No Visual Studio 2017+ was found in the system.\"\n\t}\n\tPop-Location\n}\n\nif ($Generator -eq \"default\")\n{\n    $Generator = cmake --help | Where-Object { $_ -match '\\*\\s+(.*\\S)\\s+(\\[arch\\])?\\s+=' } | Foreach-Object { $Matches[1].Trim() } | Select-Object -First 1\n}\n\nif ($Generator -match 'Visual Studio')\n{\n    $buildDir = Join-Path -Path $srcDir -ChildPath \"build\\build\"\n}\nelse\n{\n    $buildDir = Join-Path -Path $srcDir -ChildPath \"build\\build_$config_lower\"\n}\n\n# Some CI services build inside the temp directory, which MSVC doesn't like.\n$tempPath = [IO.Path]::GetFullPath($env:TEMP)\n$buildPath = [IO.Path]::GetFullPath((Join-Path -Path $srcDir -ChildPath \"build\"))\nif ($buildPath.StartsWith($tempPath, [StringComparison]::OrdinalIgnoreCase))\n{\n    $newTempPath = Join-Path -Path $srcDir -ChildPath \"tempdir\"\n    if (!(Test-Path $newTempPath -PathType Leaf))\n    {\n        New-Item $newTempPath -ItemType Directory\n    }\n    $env:TMP = $newTempPath\n    $env:TEMP = $newTempPath\n}\n\n$libsDir = Join-Path -Path $srcDir -ChildPath \"build\\libs\"\n$outDir = Join-Path -Path $srcDir -ChildPath \"build\\$config_lower\"\n\nWrite-Output \"Source directory: $srcDir\"\nWrite-Output \"Build directory:  $buildDir\"\nWrite-Output \"Libs directory:   $libsDir\"\nWrite-Output \"Output directory: $outDir\"\nWrite-Output \"Temp directory:   $env:TEMP\"\n\nif ($Prefix -eq \"default\")\n{\n    $Prefix = Join-Path -Path $srcDir -ChildPath \"build\\install\"\n}\nelseif (![System.IO.Path]::IsPathRooted($Prefix))\n{\n    $Prefix = Join-Path -Path $srcDir -ChildPath $Prefix\n}\n\nWrite-Output \"make.ps1 $Command -Config $Config -Generator `\"$Generator`\" -Prefix `\"$Prefix`\" -Version `\"$Version`\"\"\n\nif (($Command.ToLower() -ne \"libs\") -and ($Command.ToLower() -ne \"distclean\") -and !(Test-Path -Path $libsDir))\n{\n    throw \"Libs directory '$libsDir' does not exist; you may need to run 'make.ps1 libs' first.\"\n}\n\nif ($Generator.Contains(\"Win64\") -or $Generator.Contains(\"Win32\"))\n{\n    $Arch = \"\"\n}\n\nswitch ($Command.ToLower())\n{\n    \"dummy\" { break }\n    \"libs\"\n    {\n        if (!(Test-Path -Path $libsDir))\n        {\n            New-Item -ItemType \"directory\" -Path $libsDir | Out-Null\n        }\n\n        $libsBuildDir = Join-Path -Path $srcDir -ChildPath \"build\\build_libs\"\n        if (!(Test-Path -Path $libsBuildDir))\n        {\n            New-Item -ItemType \"directory\" -Path $libsBuildDir | Out-Null\n        }\n\n        $libsSrcDir = Join-Path -Path $srcDir -ChildPath \"lib\"\n        Write-Output \"Configuring libraries...\"\n        if ($Arch.Length -gt 0)\n        {\n            & cmake.exe -B \"$libsBuildDir\" -S \"$libsSrcDir\" -G \"$Generator\" -A $Arch -Thost=x64 -DCMAKE_INSTALL_PREFIX=\"$libsDir\" -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=\"X86;ARM;AArch64;WebAssembly;RISCV\"\n            $err = $LastExitCode\n        }\n        else\n        {\n            & cmake.exe -B \"$libsBuildDir\" -S \"$libsSrcDir\" -G \"$Generator\" -Thost=x64 -DCMAKE_INSTALL_PREFIX=\"$libsDir\" -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=\"X86;ARM;AArch64;WebAssembly;RISCV\"\n            $err = $LastExitCode\n        }\n        if ($err -ne 0) { throw \"Error: exit code $err\" }\n\n        # Write-Output \"Building libraries...\"\n        Write-Output \"cmake.exe --build `\"$libsBuildDir`\" --target install --config Release\"\n        & cmake.exe --build \"$libsBuildDir\" --target install --config Release\n        $err = $LastExitCode\n        if ($err -ne 0) { throw \"Error: exit code $err\" }\n        break\n    }\n    \"cleanlibs\"\n    {\n        if (Test-Path -Path $libsDir)\n        {\n            Write-Output \"Removing $libsDir...\"\n            Remove-Item -Path $libsDir -Recurse -Force\n        }\n        break\n    }\n    \"configure\"\n    {\n        $lto_flag = \"\"\n        if ($Lto -eq \"yes\")\n        {\n            $lto_flag = \"-DPONY_USE_LTO=true\"\n        }\n\n        if ($Arch.Length -gt 0)\n        {\n            Write-Output \"cmake.exe -B `\"$buildDir`\" -S `\"$srcDir`\" -G `\"$Generator`\" -A $Arch -Thost=x64 -DCMAKE_INSTALL_PREFIX=`\"$Prefix`\" -DCMAKE_BUILD_TYPE=`\"$Config`\" -DPONYC_VERSION=`\"$Version`\"\"\n            & cmake.exe -B \"$buildDir\" -S \"$srcDir\" -G \"$Generator\" -A $Arch -Thost=x64 -DCMAKE_INSTALL_PREFIX=\"$Prefix\" -DCMAKE_BUILD_TYPE=\"$Config\" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DPONYC_VERSION=\"$Version\" $lto_flag --no-warn-unused-cli\n        }\n        else\n        {\n            Write-Output \"cmake.exe -B `\"$buildDir`\" -S `\"$srcDir`\" -G `\"$Generator`\" -Thost=x64 -DCMAKE_INSTALL_PREFIX=`\"$Prefix`\" -DCMAKE_BUILD_TYPE=`\"$Config`\" -DPONYC_VERSION=`\"$Version`\"\"\n            & cmake.exe -B \"$buildDir\" -S \"$srcDir\" -G \"$Generator\" -Thost=x64 -DCMAKE_INSTALL_PREFIX=\"$Prefix\" -DCMAKE_BUILD_TYPE=\"$Config\" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DPONYC_VERSION=\"$Version\" $lto_flag --no-warn-unused-cli\n        }\n        $err = $LastExitCode\n        if ($err -ne 0) { throw \"Error: exit code $err\" }\n        break\n    }\n    \"build\"\n    {\n        Write-Output \"cmake.exe --build `\"$buildDir`\" --config $Config --target ALL_BUILD\"\n        & cmake.exe --build \"$buildDir\" --config $Config --target ALL_BUILD\n        $err = $LastExitCode\n        if ($err -ne 0) { throw \"Error: exit code $err\" }\n        break\n    }\n    \"clean\"\n    {\n        if (Test-Path $buildDir)\n        {\n            Write-Output \"cmake.exe --build `\"buildDir`\" --config $Config --target clean\"\n            & cmake.exe --build \"$buildDir\" --config $Config --target clean\n        }\n\n        if (Test-Path $outDir)\n        {\n            Write-Output \"Remove-Item -Path $outDir -Recurse -Force\"\n            Remove-Item -Path \"$outDir\" -Recurse -Force\n        }\n        break\n    }\n    \"distclean\"\n    {\n        if (Test-Path ($srcDir + \"\\build\"))\n        {\n            Write-Output \"Remove-Item -Path `\"$srcDir\\build`\" -Recurse -Force\"\n            Remove-Item -Path \"$srcDir\\build\" -Recurse -Force\n        }\n        break\n    }\n    \"test\"\n    {\n        $numTestSuitesRun = 0\n        $failedTestSuites = @()\n\n        & $outDir\\ponyc.exe --version\n\n        if ($Uselldb -eq \"yes\")\n        {\n            $lldbcmd = 'C:\\msys64\\mingw64\\bin\\lldb.exe'\n            $lldbargs = @('--batch', '--one-line', 'run', '--one-line-on-crash', '\"frame variable\"', '--one-line-on-crash', '\"register read\"', '--one-line-on-crash', '\"bt all\"', '--one-line-on-crash', '\"quit 1\"', '--')\n        }\n\n        # libponyrt.tests\n        if ($TestsToRun -match 'libponyrt.tests')\n        {\n            $numTestSuitesRun += 1;\n            try\n            {\n                if ($Uselldb -eq \"yes\")\n                {\n                    Write-Output \"$lldbcmd $lldbargs $outDir\\libponyrt.tests.exe --gtest_shuffle\"\n                    $lldboutput = & $lldbcmd $lldbargs $outDir\\libponyrt.tests.exe --gtest_shuffle\n                    Write-Output $lldboutput\n                    $err = ($lldboutput | Select-String -Pattern 'exited with status = (\\S+)').Matches[0].Groups[1].Value\n                }\n                else\n                {\n                    Write-Output \"$outDir\\libponyrt.tests.exe --gtest_shuffle\"\n                    & $outDir\\libponyrt.tests.exe --gtest_shuffle\n                    $err = $LastExitCode\n                }\n            }\n            catch\n            {\n                $err = -1\n            }\n            if ($err -ne 0) { $failedTestSuites += 'libponyrt.tests' }\n        }\n\n        # libponyc.tests\n        if ($TestsToRun -match 'libponyc.tests')\n        {\n            $numTestSuitesRun += 1;\n            try\n            {\n                if ($Uselldb -eq \"yes\")\n                {\n                    Write-Output \"$lldbcmd $lldbargs $outDir\\libponyc.tests.exe --gtest_shuffle\"\n                    $lldboutput = & $lldbcmd $lldbargs $outDir\\libponyc.tests.exe --gtest_shuffle\n                    Write-Output $lldboutput\n                    $err = ($lldboutput | Select-String -Pattern 'exited with status = (\\S+)').Matches[0].Groups[1].Value\n                }\n                else\n                {\n                    Write-Output \"$outDir\\libponyc.tests.exe --gtest_shuffle\"\n                    & $outDir\\libponyc.tests.exe --gtest_shuffle\n                    $err = $LastExitCode\n                }\n            }\n            catch\n            {\n                $err = -1\n            }\n            if ($err -ne 0) { $failedTestSuites += 'libponyc.tests' }\n        }\n\n        # libponyc.run.tests\n        if ($TestsToRun -match 'libponyc.run.tests')\n        {\n            foreach ($runConfig in ('debug', 'release'))\n            {\n                if (-not ($TestsToRun -match \"libponyc.run.tests.$runConfig\"))\n                {\n                    continue\n                }\n                $numTestSuitesRun += 1;\n\n                $runOutDir = \"$outDir\\full-program-tests\\$runConfig\"\n                $debugFlag = if ($runConfig -eq 'debug') { 'true' } else { 'false' }\n\n                $debuggercmd = ''\n                if ($Uselldb -eq \"yes\")\n                {\n                    $debuggercmd = \"$lldbcmd $lldbargs\"\n                    $debuggercmd = $debuggercmd -replace ' ', '%20'\n                    $debuggercmd = $debuggercmd -replace '\"', '%22'\n                }\n\n                if (-not (Test-Path $runOutDir)) { New-Item -ItemType Directory -Force -Path $runOutDir }\n                Write-Output \"$buildDir\\test\\full-program-runner\\full-program-runner.exe --debug=$debugFlag --debugger=$debuggercmd --timeout_s=60 --max_parallel=1 --debug=$debugFlag --test_lib=$outDir\\test_lib --ponyc=$outDir\\ponyc.exe --output=$runOutDir $srcDir\\test\\full-program-tests\"\n                & $buildDir\\test\\full-program-runner\\full-program-runner.exe --debugger=$debuggercmd --timeout_s=60 --max_parallel=1 --debug=$debugFlag --test_lib=$outDir\\test_lib --ponyc=$outDir\\ponyc.exe --output=$runOutDir $srcDir\\test\\full-program-tests\n                $err = $LastExitCode\n                if ($err -ne 0) { $failedTestSuites += \"libponyc.run.tests.$runConfig\" }\n            }\n        }\n\n        # stdlib-debug\n        if ($TestsToRun -match 'stdlib-debug')\n        {\n            $numTestSuitesRun += 1;\n            Write-Output \"$outDir\\ponyc.exe -d --checktree -b stdlib-debug -o $outDir $srcDir\\packages\\stdlib\"\n            & $outDir\\ponyc.exe -d --checktree -b stdlib-debug -o $outDir $srcDir\\packages\\stdlib\n            if ($LastExitCode -eq 0)\n            {\n                try\n                {\n                    if ($Uselldb -eq \"yes\")\n                    {\n                        Write-Output \"$lldbcmd $lldbargs $outDir\\stdlib-debug.exe --sequential --exclude=`\"net/`\"\"\n                        $lldboutput = & $lldbcmd $lldbargs $outDir\\stdlib-debug.exe --sequential --exclude=\"net/\"\n                        Write-Output $lldboutput\n                        $err = ($lldboutput | Select-String -Pattern 'exited with status = (\\S+)').Matches[0].Groups[1].Value\n                    }\n                    else\n                    {\n                        Write-Output \"$outDir\\stdlib-debug.exe --sequential --exclude=`\"net/`\"\"\n                        & $outDir\\stdlib-debug.exe --sequential --exclude=\"net/\"\n                        $err = $LastExitCode\n                    }\n                }\n                catch\n                {\n                    $err = -1\n                }\n                if ($err -ne 0) { $failedTestSuites += 'stdlib-debug' }\n            }\n            else\n            {\n                $failedTestSuites += 'compile stdlib-debug'\n            }\n        }\n\n        # stdlib-release\n        if ($TestsToRun -match 'stdlib-release')\n        {\n            $numTestSuitesRun += 1;\n            Write-Output \"$outDir\\ponyc.exe --checktree -b stdlib-release -o $outDir $srcDir\\packages\\stdlib\"\n            & $outDir\\ponyc.exe --checktree -b stdlib-release -o $outDir $srcDir\\packages\\stdlib\n            if ($LastExitCode -eq 0)\n            {\n                try\n                {\n                    if ($Uselldb -eq \"yes\")\n                    {\n                        Write-Output \"$lldbcmd $lldbargs $outDir\\stdlib-release.exe --sequential --exclude=`\"net/`\"\"\n                        $lldboutput = & $lldbcmd $lldbargs $outDir\\stdlib-release.exe --sequential --exclude=\"net/\"\n                        Write-Output $lldboutput\n                        $err = ($lldboutput | Select-String -Pattern 'exited with status = (\\S+)').Matches[0].Groups[1].Value\n                    }\n                    else\n                    {\n                        Write-Output \"$outDir\\stdlib-release.exe --sequential --exclude=`\"net/`\"\"\n                        & $outDir\\stdlib-release.exe --sequential --exclude=\"net/\"\n                        $err = $LastExitCode\n                    }\n                }\n                catch\n                {\n                    $err = -1\n                }\n                if ($err -ne 0) { $failedTestSuites += 'stdlib-release' }\n            }\n            else\n            {\n                $failedTestSuites += 'compile stdlib-release'\n            }\n        }\n\n        # grammar\n        if ($TestsToRun -match 'grammar')\n        {\n            $numTestSuitesRun += 1\n            Get-Content -Path \"$srcDir\\pony.g\" -Encoding ASCII | Out-File -Encoding UTF8 \"$outDir\\pony.g.orig\"\n            & $outDir\\ponyc.exe --antlr | Out-File -Encoding UTF8 \"$outDir\\pony.g.test\"\n            if ($LastExitCode -eq 0)\n            {\n                $origHash = (Get-FileHash -Path \"$outDir\\pony.g.orig\").Hash\n                $testHash = (Get-FileHash -Path \"$outDir\\pony.g.test\").Hash\n\n                Write-Output \"grammar original hash:  $origHash\"\n                Write-Output \"grammar generated hash: $testHash\"\n\n                if ($origHash -ne $testHash)\n                {\n                    $failedTestSuites += 'generated grammar file differs from baseline'\n                }\n            }\n            else\n            {\n                $failedTestSuites += 'generate grammar'\n            }\n        }\n\n        #\n        $numTestSuitesFailed = $failedTestSuites.Length\n        Write-Output \"Test suites run: $numTestSuitesRun, num failed: $numTestSuitesFailed\"\n        if ($numTestSuitesFailed -ne 0)\n        {\n            $failedTestSuitesList = [string]::Join(', ', $failedTestSuites)\n            Write-Output \"Test suites failed: ($failedTestSuitesList)\"\n            exit $numTestSuitesFailed\n        }\n        break\n    }\n    \"stress-test-release\"\n    {\n        $lldbcmd = 'C:\\msys64\\mingw64\\bin\\lldb.exe'\n        $lldbargs = @('--batch', '--one-line', 'run', '--one-line-on-crash', '\"frame variable\"', '--one-line-on-crash', '\"register read\"', '--one-line-on-crash', '\"bt all\"', '--one-line-on-crash', '\"quit 1\"', '--')\n\n        & $outDir\\ponyc.exe --bin-name=ubench --output=$outDir test\\rt-stress\\string-message-ubench\n        & $lldbcmd $lldbargs $outDir\\ubench.exe --pingers 320 --initial-pings 5 --report-count 40 --report-interval 300 --ponynoscale --ponynoblock\n        $err = $LastExitCode\n        if ($err -ne 0) { throw \"Stress test failed: exit code $err\" }\n        break\n    }\n    \"stress-test-with-cd-release\"\n    {\n        $lldbcmd = 'C:\\msys64\\mingw64\\bin\\lldb.exe'\n        $lldbargs = @('--batch', '--one-line', 'run', '--one-line-on-crash', '\"frame variable\"', '--one-line-on-crash', '\"register read\"', '--one-line-on-crash', '\"bt all\"', '--one-line-on-crash', '\"quit 1\"', '--')\n\n        & $outDir\\ponyc.exe --bin-name=ubench --output=$outDir test\\rt-stress\\string-message-ubench\n        & $lldbcmd $lldbargs $outDir\\ubench.exe --pingers 320 --initial-pings 5 --report-count 40 --report-interval 300 --ponynoscale\n        $err = $LastExitCode\n        if ($err -ne 0) { throw \"Stress test failed: exit code $err\" }\n        break\n    }\n    \"stress-test-debug\"\n    {\n        $lldbcmd = 'C:\\msys64\\mingw64\\bin\\lldb.exe'\n        $lldbargs = @('--batch', '--one-line', 'run', '--one-line-on-crash', '\"frame variable\"', '--one-line-on-crash', '\"register read\"', '--one-line-on-crash', '\"bt all\"', '--one-line-on-crash', '\"quit 1\"', '--')\n\n        & $outDir\\ponyc.exe --debug --bin-name=ubench --output=$outDir test\\rt-stress\\string-message-ubench\n        & $lldbcmd $lldbargs $outDir\\ubench.exe --pingers 320 --initial-pings 5 --report-count 40 --report-interval 300 --ponynoscale --ponynoblock\n        $err = $LastExitCode\n        if ($err -ne 0) { throw \"Stress test failed: exit code $err\" }\n        break\n    }\n    \"stress-test-with-cd-debug\"\n    {\n        $lldbcmd = 'C:\\msys64\\mingw64\\bin\\lldb.exe'\n        $lldbargs = @('--batch', '--one-line', 'run', '--one-line-on-crash', '\"frame variable\"', '--one-line-on-crash', '\"register read\"', '--one-line-on-crash', '\"bt all\"', '--one-line-on-crash', '\"quit 1\"', '--')\n\n        & $outDir\\ponyc.exe --debug --bin-name=ubench --output=$outDir test\\rt-stress\\string-message-ubench\n        & $lldbcmd $lldbargs $outDir\\ubench.exe --pingers 320 --initial-pings 5 --report-count 40 --report-interval 300 --ponynoscale\n        $err = $LastExitCode\n        if ($err -ne 0) { throw \"Stress test failed: exit code $err\" }\n        break\n    }\n    \"install\"\n    {\n        Write-Output \"cmake.exe --build `\"$buildDir`\" --config $Config --target install\"\n        & cmake.exe --build \"$buildDir\" --config $Config --target install\n        $err = $LastExitCode\n        if ($err -ne 0) { throw \"Error: exit code $err\" }\n        break\n    }\n    \"package\"\n    {\n        $package = \"ponyc-x86-64-pc-windows-msvc.zip\"\n        Write-Output \"Creating $buildDir\\..\\$package\"\n\n        # Remove unneeded files; we do it this way because Compress-Archive cannot add a single file to anything other than the root directory\n        Get-ChildItem -File -Path \"$Prefix\\bin\\*\" -Exclude ponyc.exe | Remove-Item\n        Compress-Archive -Path \"$Prefix\\bin\", \"$Prefix\\lib\", \"$Prefix\\packages\", \"$Prefix\\examples\" -DestinationPath \"$buildDir\\..\\$package\" -Force\n        break\n    }\n    default\n    {\n        throw \"Unknown command '$Command'. use: {libs, cleanlibs, configure, build, clean, test, install, package, distclean}\"\n    }\n}\n"
        },
        {
          "name": "minimal-cases",
          "type": "tree",
          "content": null
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "pony.cloc",
          "type": "blob",
          "size": 0.138671875,
          "content": "Pony\n    filter remove_matches ^\\s*//\n    filter call_regexp_common C\n    filter remove_inline //.*$\n    extension pony\n    3rd_gen_scale 1.0\n"
        },
        {
          "name": "pony.g",
          "type": "blob",
          "size": 10.833984375,
          "content": "// ANTLR v3 grammar\ngrammar pony;\n\noptions\n{\n  output = AST;\n  k = 1;\n}\n\n// Parser\n\nmodule\n  : STRING? use* class_def* \n  ;\n\nuse\n  : 'use' (ID '=')? (STRING | use_ffi) ('if' infix)?\n  ;\n\nuse_ffi\n  : '@' (ID | STRING) typeargs ('(' | LPAREN_NEW) params? ')' '?'?\n  ;\n\nclass_def\n  : ('type' | 'interface' | 'trait' | 'primitive' | 'struct' | 'class' | 'actor') ('\\\\' ID (',' ID)* '\\\\')? '@'? cap? ID typeparams? ('is' type)? STRING? members\n  ;\n\nmembers\n  : field* method*\n  ;\n\nfield\n  : ('var' | 'let' | 'embed') ID ':' type ('=' infix)? STRING?\n  ;\n\nmethod\n  : ('fun' | 'be' | 'new') ('\\\\' ID (',' ID)* '\\\\')? (cap | '@')? ID typeparams? ('(' | LPAREN_NEW) params? ')' (':' type)? '?'? STRING? ('=>' rawseq)?\n  ;\n\nannotatedrawseq\n  : ('\\\\' ID (',' ID)* '\\\\')? (exprseq | jump)\n  ;\n\nrawseq\n  : exprseq\n  | jump\n  ;\n\nexprseq\n  : assignment (semiexpr | nosemi)?\n  ;\n\nnextexprseq\n  : nextassignment (semiexpr | nosemi)?\n  ;\n\nnosemi\n  : nextexprseq\n  | jump\n  ;\n\nsemiexpr\n  : ';' (exprseq | jump)\n  ;\n\njump\n  : ('return' | 'break' | 'continue' | 'error' | 'compile_intrinsic' | 'compile_error') rawseq?\n  ;\n\nnextassignment\n  : nextinfix ('=' assignment)?\n  ;\n\nassignment\n  : infix ('=' assignment)?\n  ;\n\nnextinfix\n  : nextterm antlr_0*\n  ;\n\ninfix\n  : term antlr_1*\n  ;\n\nisop\n  : ('is' | 'isnt') term\n  ;\n\nbinop\n  : ('and' | 'or' | 'xor' | '+' | '-' | '*' | '/' | '%' | '%%' | '+~' | '-~' | '*~' | '/~' | '%~' | '%%~' | '<<' | '>>' | '<<~' | '>>~' | '==' | '!=' | '<' | '<=' | '>=' | '>' | '==~' | '!=~' | '<~' | '<=~' | '>=~' | '>~') '?'? term\n  ;\n\nnextterm\n  : 'if' ('\\\\' ID (',' ID)* '\\\\')? rawseq 'then' rawseq (elseif | ('else' annotatedrawseq))? 'end'\n  | 'ifdef' ('\\\\' ID (',' ID)* '\\\\')? infix 'then' rawseq (elseifdef | ('else' annotatedrawseq))? 'end'\n  | 'iftype' ('\\\\' ID (',' ID)* '\\\\')? iftype (elseiftype | ('else' annotatedrawseq))? 'end'\n  | 'match' ('\\\\' ID (',' ID)* '\\\\')? rawseq caseexpr* ('else' annotatedrawseq)? 'end'\n  | 'while' ('\\\\' ID (',' ID)* '\\\\')? rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'\n  | 'repeat' ('\\\\' ID (',' ID)* '\\\\')? rawseq 'until' annotatedrawseq ('else' annotatedrawseq)? 'end'\n  | 'for' ('\\\\' ID (',' ID)* '\\\\')? idseq 'in' rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'\n  | 'with' ('\\\\' ID (',' ID)* '\\\\')? (withelem (',' withelem)*) 'do' rawseq 'end'\n  | 'try' ('\\\\' ID (',' ID)* '\\\\')? rawseq ('else' annotatedrawseq)? ('then' annotatedrawseq)? 'end'\n  | 'recover' ('\\\\' ID (',' ID)* '\\\\')? cap? rawseq 'end'\n  | 'consume' cap? term\n  | nextpattern\n  | '#' postfix\n  ;\n\nterm\n  : 'if' ('\\\\' ID (',' ID)* '\\\\')? rawseq 'then' rawseq (elseif | ('else' annotatedrawseq))? 'end'\n  | 'ifdef' ('\\\\' ID (',' ID)* '\\\\')? infix 'then' rawseq (elseifdef | ('else' annotatedrawseq))? 'end'\n  | 'iftype' ('\\\\' ID (',' ID)* '\\\\')? iftype (elseiftype | ('else' annotatedrawseq))? 'end'\n  | 'match' ('\\\\' ID (',' ID)* '\\\\')? rawseq caseexpr* ('else' annotatedrawseq)? 'end'\n  | 'while' ('\\\\' ID (',' ID)* '\\\\')? rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'\n  | 'repeat' ('\\\\' ID (',' ID)* '\\\\')? rawseq 'until' annotatedrawseq ('else' annotatedrawseq)? 'end'\n  | 'for' ('\\\\' ID (',' ID)* '\\\\')? idseq 'in' rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'\n  | 'with' ('\\\\' ID (',' ID)* '\\\\')? (withelem (',' withelem)*) 'do' rawseq 'end'\n  | 'try' ('\\\\' ID (',' ID)* '\\\\')? rawseq ('else' annotatedrawseq)? ('then' annotatedrawseq)? 'end'\n  | 'recover' ('\\\\' ID (',' ID)* '\\\\')? cap? rawseq 'end'\n  | 'consume' cap? term\n  | pattern\n  | '#' postfix\n  ;\n\nwithelem\n  : idseq '=' rawseq\n  ;\n\ncaseexpr\n  : '|' ('\\\\' ID (',' ID)* '\\\\')? casepattern? ('if' rawseq)? ('=>' rawseq)?\n  ;\n\nelseiftype\n  : 'elseif' ('\\\\' ID (',' ID)* '\\\\')? iftype (elseiftype | ('else' annotatedrawseq))?\n  ;\n\niftype\n  : type '<:' type 'then' rawseq\n  ;\n\nelseifdef\n  : 'elseif' ('\\\\' ID (',' ID)* '\\\\')? infix 'then' rawseq (elseifdef | ('else' annotatedrawseq))?\n  ;\n\nelseif\n  : 'elseif' ('\\\\' ID (',' ID)* '\\\\')? rawseq 'then' rawseq (elseif | ('else' annotatedrawseq))?\n  ;\n\nidseq\n  : ID\n  | ('(' | LPAREN_NEW) idseq_in_seq (',' idseq_in_seq)* ')'\n  ;\n\nidseq_in_seq\n  : ID\n  | ('(' | LPAREN_NEW) idseq_in_seq (',' idseq_in_seq)* ')'\n  ;\n\nnextpattern\n  : ('var' | 'let' | 'embed') ID (':' type)?\n  | nextparampattern\n  ;\n\ncasepattern\n  : ('var' | 'let' | 'embed') ID (':' type)?\n  | caseparampattern\n  ;\n\npattern\n  : ('var' | 'let' | 'embed') ID (':' type)?\n  | parampattern\n  ;\n\nnextparampattern\n  : ('not' | 'addressof' | MINUS_NEW | MINUS_TILDE_NEW | 'digestof') parampattern\n  | nextpostfix\n  ;\n\ncaseparampattern\n  : ('not' | 'addressof' | '-' | '-~' | MINUS_NEW | MINUS_TILDE_NEW | 'digestof') caseparampattern\n  | casepostfix\n  ;\n\nparampattern\n  : ('not' | 'addressof' | '-' | '-~' | MINUS_NEW | MINUS_TILDE_NEW | 'digestof') parampattern\n  | postfix\n  ;\n\nnextpostfix\n  : nextatom antlr_2*\n  ;\n\ncasepostfix\n  : caseatom antlr_3*\n  ;\n\npostfix\n  : atom antlr_4*\n  ;\n\ncall\n  : '(' positional? named? ')' '?'?\n  ;\n\nchain\n  : '.>' ID\n  ;\n\ntilde\n  : '~' ID\n  ;\n\ndot\n  : '.' ID\n  ;\n\nnextatom\n  : ID\n  | 'this'\n  | literal\n  | LPAREN_NEW rawseq tuple? ')'\n  | LSQUARE_NEW ('as' type ':')? rawseq? ']'\n  | 'object' ('\\\\' ID (',' ID)* '\\\\')? cap? ('is' type)? members 'end'\n  | '{' ('\\\\' ID (',' ID)* '\\\\')? cap? ID? typeparams? ('(' | LPAREN_NEW) lambdaparams? ')' lambdacaptures? (':' type)? '?'? '=>' rawseq '}' cap?\n  | '@{' ('\\\\' ID (',' ID)* '\\\\')? cap? ID? typeparams? ('(' | LPAREN_NEW) lambdaparams? ')' lambdacaptures? (':' type)? '?'? '=>' rawseq '}' cap?\n  | '@' (ID | STRING) typeargs? ('(' | LPAREN_NEW) positional? named? ')' '?'?\n  | '__loc'\n  | 'if' ('\\\\' ID (',' ID)* '\\\\')? rawseq 'then' rawseq (elseif | ('else' annotatedrawseq))? 'end'\n  | 'while' ('\\\\' ID (',' ID)* '\\\\')? rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'\n  | 'for' ('\\\\' ID (',' ID)* '\\\\')? idseq 'in' rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'\n  ;\n\ncaseatom\n  : ID\n  | 'this'\n  | literal\n  | ('(' | LPAREN_NEW) rawseq tuple? ')'\n  | ('[' | LSQUARE_NEW) ('as' type ':')? rawseq? ']'\n  | 'object' ('\\\\' ID (',' ID)* '\\\\')? cap? ('is' type)? members 'end'\n  | '{' ('\\\\' ID (',' ID)* '\\\\')? cap? ID? typeparams? ('(' | LPAREN_NEW) lambdaparams? ')' lambdacaptures? (':' type)? '?'? '=>' rawseq '}' cap?\n  | '@{' ('\\\\' ID (',' ID)* '\\\\')? cap? ID? typeparams? ('(' | LPAREN_NEW) lambdaparams? ')' lambdacaptures? (':' type)? '?'? '=>' rawseq '}' cap?\n  | '@' (ID | STRING) typeargs? ('(' | LPAREN_NEW) positional? named? ')' '?'?\n  | '__loc'\n  | 'while' ('\\\\' ID (',' ID)* '\\\\')? rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'\n  | 'for' ('\\\\' ID (',' ID)* '\\\\')? idseq 'in' rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'\n  ;\n\natom\n  : ID\n  | 'this'\n  | literal\n  | ('(' | LPAREN_NEW) rawseq tuple? ')'\n  | ('[' | LSQUARE_NEW) ('as' type ':')? rawseq? ']'\n  | 'object' ('\\\\' ID (',' ID)* '\\\\')? cap? ('is' type)? members 'end'\n  | '{' ('\\\\' ID (',' ID)* '\\\\')? cap? ID? typeparams? ('(' | LPAREN_NEW) lambdaparams? ')' lambdacaptures? (':' type)? '?'? '=>' rawseq '}' cap?\n  | '@{' ('\\\\' ID (',' ID)* '\\\\')? cap? ID? typeparams? ('(' | LPAREN_NEW) lambdaparams? ')' lambdacaptures? (':' type)? '?'? '=>' rawseq '}' cap?\n  | '@' (ID | STRING) typeargs? ('(' | LPAREN_NEW) positional? named? ')' '?'?\n  | '__loc'\n  | 'if' ('\\\\' ID (',' ID)* '\\\\')? rawseq 'then' rawseq (elseif | ('else' annotatedrawseq))? 'end'\n  | 'while' ('\\\\' ID (',' ID)* '\\\\')? rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'\n  | 'for' ('\\\\' ID (',' ID)* '\\\\')? idseq 'in' rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'\n  ;\n\ntuple\n  : ',' rawseq (',' rawseq)*\n  ;\n\nlambdacaptures\n  : ('(' | LPAREN_NEW) (lambdacapture | 'this') (',' (lambdacapture | 'this'))* ')'\n  ;\n\nlambdacapture\n  : ID (':' type)? ('=' infix)?\n  ;\n\nlambdaparams\n  : lambdaparam (',' lambdaparam)*\n  ;\n\nlambdaparam\n  : ID (':' type)? ('=' infix)?\n  ;\n\npositional\n  : rawseq (',' rawseq)*\n  ;\n\nnamed\n  : 'where' namedarg (',' namedarg)*\n  ;\n\nnamedarg\n  : ID '=' rawseq\n  ;\n\ntype\n  : atomtype ('->' type)?\n  ;\n\natomtype\n  : 'this'\n  | cap\n  | ('(' | LPAREN_NEW) infixtype tupletype? ')'\n  | nominal\n  | lambdatype\n  | barelambdatype\n  ;\n\nbarelambdatype\n  : '@{' cap? ID? typeparams? ('(' | LPAREN_NEW) (type (',' type)*)? ')' (':' type)? '?'? '}' (cap | gencap)? ('^' | '!')?\n  ;\n\nlambdatype\n  : '{' cap? ID? typeparams? ('(' | LPAREN_NEW) (type (',' type)*)? ')' (':' type)? '?'? '}' (cap | gencap)? ('^' | '!')?\n  ;\n\ntupletype\n  : ',' infixtype (',' infixtype)*\n  ;\n\ninfixtype\n  : type antlr_5*\n  ;\n\nisecttype\n  : '&' type\n  ;\n\nuniontype\n  : '|' type\n  ;\n\nnominal\n  : ID ('.' ID)? typeargs? (cap | gencap)? ('^' | '!')?\n  ;\n\ngencap\n  : '#read'\n  | '#send'\n  | '#share'\n  | '#alias'\n  | '#any'\n  ;\n\ncap\n  : 'iso'\n  | 'trn'\n  | 'ref'\n  | 'val'\n  | 'box'\n  | 'tag'\n  ;\n\ntypeargs\n  : '[' typearg (',' typearg)* ']'\n  ;\n\ntypeparams\n  : ('[' | LSQUARE_NEW) typeparam (',' typeparam)* ']'\n  ;\n\nparams\n  : (param | '...') (',' (param | '...'))*\n  ;\n\ntypeparam\n  : ID (':' type)? ('=' typearg)?\n  ;\n\ntypearg\n  : type\n  | literal\n  | '#' postfix\n  ;\n\nliteral\n  : 'true'\n  | 'false'\n  | INT\n  | FLOAT\n  | STRING\n  ;\n\nparam\n  : ID ':' type ('=' infix)?\n  ;\n\nantlr_0\n  : binop\n  | isop\n  | 'as' type\n  ;\n\nantlr_1\n  : binop\n  | isop\n  | 'as' type\n  ;\n\nantlr_2\n  : dot\n  | tilde\n  | chain\n  | typeargs\n  | call\n  ;\n\nantlr_3\n  : dot\n  | tilde\n  | chain\n  | typeargs\n  | call\n  ;\n\nantlr_4\n  : dot\n  | tilde\n  | chain\n  | typeargs\n  | call\n  ;\n\nantlr_5\n  : uniontype\n  | isecttype\n  ;\n\n// Rules of the form antlr_* are only present to avoid a bug in the\n// interpreter\n\n/* Precedence\n\nValue:\n1. postfix\n2. unop\n3. binop\n4. =\n5. seq\n6. ,\n\nType:\n1. ->\n2. & |\n3. ,\n*/\n\n// Lexer\n\nID\n  : LETTER (LETTER | DIGIT | '_' | '\\'')*\n  | '_' (LETTER | DIGIT | '_' | '\\'')*\n  ;\n\nINT\n  : DIGIT (DIGIT | '_')*\n  | '0' 'x' (HEX | '_')+\n  | '0' 'b' (BINARY | '_')+\n  | '\\'' CHAR_CHAR* '\\''\n  ;\n\nFLOAT\n  : DIGIT (DIGIT | '_')* ('.' DIGIT (DIGIT | '_')*)? EXP?\n  ;\n\nSTRING\n  : '\"' STRING_CHAR* '\"'\n  | '\"\"\"' (('\"' | '\"\"') ? ~'\"')* '\"\"\"' '\"'*\n  ;\n\nLPAREN_NEW\n  : NEWLINE '('\n  ;\n\nLSQUARE_NEW\n  : NEWLINE '['\n  ;\n\nMINUS_NEW\n  : NEWLINE '-'\n  ;\n\nMINUS_TILDE_NEW\n  : NEWLINE '-~'\n  ;\n\nLINECOMMENT\n  : '//' ~('\\n')* {$channel = HIDDEN;}\n  ;\n\nNESTEDCOMMENT\n  : '/*' (NESTEDCOMMENT | '/' ~'*' | ~('*' | '/') | ('*'+ ~('*' | '/')))* '*'+ '/' {$channel = HIDDEN;}\n  ;\n\nWS\n  : (' ' | '\\t' | '\\r')+ {$channel = HIDDEN;}\n  ;\n\nNEWLINE\n  : '\\n' (' ' | '\\t' | '\\r')* {$channel = HIDDEN;}\n  ;\n\nfragment\nCHAR_CHAR\n  : '\\\\' '\\'' | CHAR_ESC\n  | ~('\\'' | '\\\\')\n  ;\n\nfragment\nSTRING_CHAR\n  : '\\\\' '\"' | ESC\n  | ~('\"' | '\\\\')\n  ;\n\nfragment\nEXP\n  : ('e' | 'E') ('+' | '-')? (DIGIT | '_')+\n  ;\n\nfragment\nLETTER\n  : 'a'..'z' | 'A'..'Z'\n  ;\n\nfragment\nBINARY\n  : '0'..'1'\n  ;\n\nfragment\nDIGIT\n  : '0'..'9'\n  ;\n\nfragment\nHEX\n  : DIGIT | 'a'..'f' | 'A'..'F'\n  ;\n\nfragment\nESC\n  : CHAR_ESC\n  | UNICODE_ESC\n  | UNICODE2_ESC\n  ;\n\nfragment\nCHAR_ESC\n  : '\\\\' ('a' | 'b' | 'e' | 'f' | 'n' | 'r' | 't' | 'v' | '\\\\' | '0')\n  | HEX_ESC\n  ;\n\nfragment\nHEX_ESC\n  : '\\\\' 'x' HEX HEX\n  ;\n\nfragment\nUNICODE_ESC\n  : '\\\\' 'u' HEX HEX HEX HEX\n  ;\n\nfragment\nUNICODE2_ESC\n  : '\\\\' 'U' HEX HEX HEX HEX HEX HEX\n  ;\n\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}