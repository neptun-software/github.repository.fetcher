{
  "metadata": {
    "timestamp": 1736710291397,
    "page": 67,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wasm3/wasm3",
      "stars": 7405,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".codespellrc",
          "type": "blob",
          "size": 0.1298828125,
          "content": "[codespell]\nskip = ./test/wasi/brotli/alice29.txt,./test/.spec-*,./build*\nquiet-level = 2\nignore-words-list = gameboy,iif,strng,woh\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.150390625,
          "content": "/build*\n/source-*\n/.toolchains\ntest/.spec-*\ntest/*.log\ntest/tailcall/*.S\nnode_modules/\n__pycache__/\n.project\n.cproject\n.settings\n.vscode\n.DS_Store\n*zig-*/"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 7.20703125,
          "content": "cmake_minimum_required(VERSION 3.11)\n\n# Detect WasiEnv\nif(DEFINED ENV{WASI_CC} OR DEFINED WASI_SDK_PREFIX)\n  set(WASIENV           1)\nendif()\n\n# Detect MinGW\nif(WIN32 AND CMAKE_C_COMPILER_ID MATCHES \"GNU\")\n  set(MINGW             1)\nendif()\n\n# Set options\n\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"set build type to Release\")\nendif()\n\nif(WASIENV)\n  set(BUILD_WASI \"metawasi\" CACHE STRING \"WASI implementation\")\nelseif(EMSCRIPTEN OR EMSCRIPTEN_LIB)\n  set(BUILD_WASI \"none\" CACHE STRING \"WASI implementation\")\nelse()\n  set(BUILD_WASI \"uvwasi\" CACHE STRING \"WASI implementation\")\nendif()\nset_property(CACHE BUILD_WASI PROPERTY STRINGS none simple uvwasi metawasi)\n\noption(BUILD_NATIVE \"Build with machine-specific optimisations\" ON)\n\nset(OUT_FILE \"wasm3\")\n\nif(NOT APP_DIR)\n  set(APP_DIR  \"platforms/app\")\nendif()\n\n# Configure the toolchain\n\nif(CLANG OR CLANG_SUFFIX)\n  set(CMAKE_C_COMPILER   \"clang${CLANG_SUFFIX}\")\n  set(CMAKE_CXX_COMPILER \"clang++${CLANG_SUFFIX}\")\n\n  if(BUILD_FUZZ)\n    set(CMAKE_TRY_COMPILE_TARGET_TYPE \"STATIC_LIBRARY\")\n    set(OUT_FILE         \"wasm3-fuzzer\")\n    set(APP_DIR          \"platforms/app_fuzz\")\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE STRING \"set build type to Debug\")\n    set(CMAKE_C_FLAGS    \"${CMAKE_C_FLAGS} -fsanitize=fuzzer,address\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=fuzzer,address\")\n  endif()\nendif()\n\nif(WASIENV)\n  set(OUT_FILE           \"wasm3.wasm\")\nendif()\n\nif(CLANG_CL)\n  set(CMAKE_C_COMPILER   \"clang-cl\")\n  set(CMAKE_CXX_COMPILER \"clang-cl\")\n  set(CMAKE_LINKER       \"lld-link\")\nendif()\n\nif(EMSCRIPTEN OR EMSCRIPTEN_LIB)\n  set(CMAKE_C_COMPILER   \"emcc\")\n  set(CMAKE_CXX_COMPILER \"em++\")\n\n  if (EMSCRIPTEN_LIB)\n    set(APP_DIR          \"platforms/emscripten_lib\")\n    set(OUT_FILE         \"wasm3.wasm\")\n    set(CMAKE_C_FLAGS    \"${CMAKE_C_FLAGS} -s STANDALONE_WASM\")\n  else()\n    set(APP_DIR          \"platforms/emscripten\")\n    set(OUT_FILE         \"wasm3.html\")\n  endif()\nendif()\n\nif(BUILD_32BIT)\n  set(CMAKE_C_FLAGS      \"${CMAKE_C_FLAGS}   -m32\")\nendif()\n\n\n\nproject(wasm3)\n\nmessage(\"----\")\nmessage(\"Generator:  ${CMAKE_GENERATOR}\")\nmessage(\"Compiler:   ${CMAKE_C_COMPILER_ID}\")\nmessage(\"Build Type: ${CMAKE_BUILD_TYPE}\")\n\n\ninclude(CheckIPOSupported)\n\nset(CMAKE_C_STANDARD 99)\nset(CMAKE_C_STANDARD_REQUIRED YES)\nset(CMAKE_C_EXTENSIONS NO)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED YES)\nset(CMAKE_CXX_EXTENSIONS NO)\n\n\nfile(GLOB app_srcs \"${APP_DIR}/*.c\")\nadd_executable(${OUT_FILE} ${app_srcs})\n\n#-fno-optimize-sibling-calls\n\nset(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -DDEBUG=1\")\n\nif(EMSCRIPTEN OR EMSCRIPTEN_LIB)\n\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -s GLOBAL_BASE=1024 -s TOTAL_STACK=2MB -s INITIAL_MEMORY=4MB -s ALLOW_MEMORY_GROWTH\")\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -s EXPORTED_FUNCTIONS=\\\"[\\\\\\\"_malloc\\\\\\\",\\\\\\\"_free\\\\\\\",\\\\\\\"_main\\\\\\\"]\\\"\")\n\n  set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} -O3 -flto -Wfatal-errors -s ASSERTIONS=0\")\n  set(CMAKE_EXE_LINKER_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} --strip-all --gc-sections\")\n\n  if(WASM_EXT)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -mbulk-memory -mnontrapping-fptoint -msign-ext -mtail-call\")\n  endif()\n\nelseif(WASIENV)\n\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Dd_m3HasTracer\")\n  set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} -O3 -Wfatal-errors -fomit-frame-pointer -fno-stack-check -fno-stack-protector\")\n\n  if(WASM_EXT)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -mbulk-memory -mnontrapping-fptoint -msign-ext -mtail-call\")\n  endif()\n\n  # TODO: LTO breaks wasm imports currently:\n  # https://www.mail-archive.com/llvm-bugs@lists.llvm.org/msg36273.html\n\n  #-flto -Wl,--lto-O3\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,-z,stack-size=8388608\")\n\nelseif(MSVC OR CMAKE_C_COMPILER_FRONTEND_VARIANT MATCHES \"MSVC\")\n\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Dd_m3HasTracer -D_CRT_SECURE_NO_WARNINGS /WX- /diagnostics:column\")\n\n  string(REGEX REPLACE \"/W[0-4]\" \"/W0\" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n\n  if (CMAKE_C_COMPILER_ID MATCHES \"MSVC\")\n\n    if(\"${CMAKE_SIZEOF_VOID_P}\" STREQUAL \"4\")\n      set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /d2noftol3\")\n    endif()\n\n    set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} /Oxs /Oy /GS- /Zi /Zo /arch:AVX2\")\n\n    # Uncomment this if you want to disassemble the release build,\n    # for example: dumpbin /DISASM wasm3.exe /out:wasm3.S\n    #set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /DEBUG:FULL\")\n\n  else()\n    set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} /Oxs /Oy /GS- /Qvec -Clang -O3\")\n  endif()\n\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /STACK:8388608\") # stack size\n\nelse()\n\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Dd_m3HasTracer\") #-Dd_m3FixedHeap=1048576\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wall -Wextra -Wparentheses -Wundef -Wpointer-arith -Wstrict-aliasing=2\")\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Werror=implicit-function-declaration\") # -Werror=cast-align\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-unused-function -Wno-unused-variable -Wno-unused-parameter -Wno-missing-field-initializers\")\n  if (CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n    # TODO: Place clang-specific options here\n  elseif(CMAKE_C_COMPILER_ID MATCHES \"Intel\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fp-model precise\")\n  elseif(CMAKE_C_COMPILER_ID MATCHES \"GNU\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wjump-misses-init\")\n  endif()\n  set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -ggdb -O0\")\n\n  set(CMAKE_C_FLAGS_RELEASE \"-O3 -Wfatal-errors -fomit-frame-pointer -fno-stack-check -fno-stack-protector\") #-fno-inline\n\n  if(BUILD_NATIVE)\n    if(APPLE AND CMAKE_C_COMPILER_ID MATCHES \"Clang\" AND CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \"arm64\")\n      set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} -mcpu=native\")\n    elseif(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \"x86_64\")\n      set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} -march=native\")\n    endif()\n  endif()\n\n  set(CMAKE_EXE_LINKER_FLAGS_DEBUG \"-O0\")\n  set(CMAKE_EXE_LINKER_FLAGS_RELEASE \"-O3\")\n\n  target_link_libraries(${OUT_FILE} m)\n\nendif()\n\ntarget_link_libraries(${OUT_FILE} m3)\n\nif(BUILD_WASI MATCHES \"simple\")\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Dd_m3HasWASI\")\nelseif(BUILD_WASI MATCHES \"metawasi\")\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Dd_m3HasMetaWASI\")\nelseif(BUILD_WASI MATCHES \"uvwasi\")\n  include(FetchContent)\n  FetchContent_Declare(\n    uvwasi\n    GIT_REPOSITORY  https://github.com/nodejs/uvwasi.git\n    GIT_TAG         v0.0.18\n  )\n\n  FetchContent_GetProperties(uvwasi)\n  if(NOT uvwasi_POPULATED)\n    FetchContent_Populate(uvwasi)\n    include_directories(\"${uvwasi_SOURCE_DIR}/include\")\n    add_subdirectory(${uvwasi_SOURCE_DIR} ${uvwasi_BINARY_DIR} EXCLUDE_FROM_ALL)\n  endif()\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Dd_m3HasUVWASI\")\n  target_link_libraries(${OUT_FILE} uvwasi_a uv_a)\nendif()\n\ncheck_ipo_supported(RESULT result)\nif(result AND NOT WASIENV) # TODO: LTO breaks wasm imports\n  set_property(TARGET ${OUT_FILE} PROPERTY INTERPROCEDURAL_OPTIMIZATION True)\n  message(\"LTO:        ON\")\nelse()\n  message(\"LTO:        OFF\")\nendif()\n\nadd_subdirectory(source)\n\nmessage(\"Flags:         ${CMAKE_C_FLAGS}\")\nmessage(\"Debug flags:   ${CMAKE_C_FLAGS_DEBUG}\")\nmessage(\"Release flags: ${CMAKE_C_FLAGS_RELEASE}\")\n\nmessage(\"----\")\n\n# Install\n\ninclude(GNUInstallDirs)\n\ninstall(TARGETS ${OUT_FILE} RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.06640625,
          "content": "MIT License\n\nCopyright (c) 2019 Steven Massey, Volodymyr Shymanskyy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.03125,
          "content": "\n> [!NOTE]\n> I regret to inform the community that since [my house was destroyed by russians who invaded my country](https://twitter.com/vshymanskyy/status/1568657607229075456), **Wasm3 will enter a minimal maintenance phase**. At this time, I am unable to continue the development of new features. However, I am committed to keeping the project alive and will actively review and merge incoming Pull Requests. I deeply appreciate your understanding and support during this difficult period. **Your contributions to Wasm3 are now more valuable than ever.**\n\n<img align=\"right\" width=\"30%\" src=\"/extra/screenshot-ios.png\">\n\n# <img src=\"/extra/wasm-symbol.svg\" width=\"32\" height=\"32\" /> Wasm3\n\n[![StandWithUkraine](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/badges/StandWithUkraine.svg)](https://github.com/vshymanskyy/StandWithUkraine/blob/main/docs/README.md) \n[![GitHub issues](https://img.shields.io/github/issues-raw/wasm3/wasm3?style=flat-square&label=issues&color=success)](https://github.com/wasm3/wasm3/issues) \n[![Tests status](https://img.shields.io/github/actions/workflow/status/wasm3/wasm3/tests.yml?branch=main&style=flat-square&logo=github&label=tests)](https://github.com/wasm3/wasm3/actions) \n[![Fuzzing Status](https://img.shields.io/badge/oss--fuzz-fuzzing-success?style=flat-square)](https://bugs.chromium.org/p/oss-fuzz/issues/list?can=1&q=proj:wasm3) \n[![GitHub license](https://img.shields.io/badge/license-MIT-blue?style=flat-square)](https://github.com/wasm3/wasm3) \n\nA fast WebAssembly interpreter and the most universal WASM runtime.  \n<sub>Based on [**CoreMark 1.0**](./docs/Performance.md) and [**independent**](https://00f.net/2021/02/22/webassembly-runtimes-benchmarks) benchmarks. Your mileage may vary.</sub>\n\n[![X (formerly Twitter) Follow](https://img.shields.io/twitter/follow/wasm3_engine)](https://twitter.com/wasm3_engine) \n[![Discord](https://img.shields.io/discord/671415645073702925?style=social&logo=discord&color=7289da&label=discord)](https://discord.gg/qmZjgnd)\n\n## Installation\n\n**Please follow the [installation instructions](./docs/Installation.md).**\n\nWasm3 can also be used as a library for:\n\n[<img src=\"https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/python.svg\" width=\"18\" height=\"18\" /> Python3](https://github.com/wasm3/pywasm3) │ \n[<img src=\"https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/rust.svg\" width=\"18\" height=\"18\" /> Rust](https://github.com/wasm3/wasm3-rs) │ \n[<img src=\"https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/cplusplus.svg\" width=\"18\" height=\"18\" /> C/C++](https://github.com/wasm3/wasm3) │ \n[<img src=\"https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/d.svg\" width=\"18\" height=\"18\" /> D](https://github.com/kassane/wasm3-d) │ \n[<img src=\"https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/go.svg\" width=\"18\" height=\"18\" /> GoLang](https://github.com/matiasinsaurralde/go-wasm3) │ \n[<img src=\"https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/zig.svg\" width=\"18\" height=\"18\" /> Zig](https://github.com/alichay/zig-wasm3) │\n[<img src=\"https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/perl.svg\" width=\"18\" height=\"18\" /> Perl](https://metacpan.org/pod/Wasm::Wasm3)  \n[<img src=\"https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/swift.svg\" width=\"18\" height=\"18\" /> Swift](https://github.com/shareup/wasm-interpreter-apple) │ \n[<img src=\"https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/dotnet.svg\" width=\"18\" height=\"18\" /> .Net](https://github.com/tana/Wasm3DotNet) │ \n[<img src=\"https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/nim.svg\" width=\"18\" height=\"18\" /> Nim](https://github.com/beef331/wasm3) │ \n[<img src=\"https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/arduino.svg\" width=\"18\" height=\"18\" /> Arduino, PlatformIO, Particle](https://github.com/wasm3/wasm3-arduino) │ [QuickJS](https://github.com/saghul/txiki.js)\n\n## Status\n\n`wasm3` passes the [WebAssembly spec testsuite](https://github.com/WebAssembly/spec/tree/master/test/core) and is able to run many `WASI` apps.\n\nMinimum useful system requirements: **~64Kb** for code and **~10Kb** RAM\n\n`wasm3` runs on a wide range of architectures (`x86`, `x86_64`, `ARM`, `RISC-V`, `PowerPC`, `MIPS`, `Xtensa`, `ARC32`, ...) and [platforms](/platforms):\n- <img src=\"https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/linux.svg\" width=\"18\" height=\"18\" /> Linux,\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/c/c4/Windows_logo_-_2021_%28Black%29.svg\" width=\"18\" height=\"18\" /> Windows,\n<img src=\"https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/apple.svg\" width=\"18\" height=\"18\" /> OS X,\n<img src=\"https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/freebsd.svg\" width=\"18\" height=\"18\" /> FreeBSD,\n<img src=\"https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/android.svg\" width=\"18\" height=\"18\" /> Android,\n<img src=\"https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/apple.svg\" width=\"18\" height=\"18\" /> iOS\n- <img src=\"https://cdn.rawgit.com/feathericons/feather/master/icons/wifi.svg\" width=\"18\" height=\"18\" /> OpenWrt, Yocto, Buildroot (routers, modems, etc.)\n- <img src=\"https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/raspberrypi.svg\" width=\"18\" height=\"18\" /> Raspberry Pi, Orange Pi and other SBCs\n- <img src=\"https://cdn.rawgit.com/feathericons/feather/master/icons/cpu.svg\" width=\"18\" height=\"18\" /> MCUs: Arduino, ESP8266, ESP32, Particle, ... [see full list](./docs/Hardware.md)\n- <img src=\"https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/firefoxbrowser.svg\" width=\"18\" height=\"18\" /> Browsers. Yes, using WebAssembly itself!\n- <img src=\"extra/wasm-symbol.svg\" width=\"18\" height=\"18\" /> `wasm3` can execute `wasm3` (self-hosting)\n\n## Features\n\n| Webassembly [Proposals][WasmProps]  | Extra |\n| --- | --- |\n| ☑ Import/Export of Mutable Globals           | ☑ Structured execution tracing     |\n| ☑ Non-trapping float-to-int conversions      | ☑ Big-Endian systems support       |\n| ☑ Sign-extension operators                   | ☑ Wasm and WASI self-hosting       |\n| ☑ Multi-value                                | ☑ Gas metering                     |\n| ☑ Bulk memory operations (partial support)   | ☑ Linear memory limit (< 64KiB)    |\n| ☑ Custom page size                           |\n| ⏳ Multiple memories                          |\n| ⏳ Reference types                            |\n| ☐ Tail call optimization                     |\n| ☐ Fixed-width SIMD                           |\n| ☐ Exception handling                         |\n| ☐ Stack Switching                            |\n\n## Motivation\n\n**Why use a \"slow interpreter\" versus a \"fast JIT\"?**\n\nIn many situations, speed is not the main concern. Runtime executable size, memory usage, startup latency can be improved with the interpreter approach. Portability and security are much easier to achieve and maintain. Additionally, development impedance is much lower. A simple library like Wasm3 is easy to compile and integrate into an existing project. (Wasm3 builds in a just few seconds). Finally, on some platforms (i.e. iOS and WebAssembly itself) you can't generate executable code pages in runtime, so JIT is unavailable.\n\n**Why would you want to run WASM on embedded devices?**\n\nWasm3 started as a research project and remains so by any means. Evaluating the engine in different environments is part of the research. Given that we have `Lua`, `JS`, `Python`, `Lisp`, `...` running on MCUs, `WebAssembly` is a promising alternative. It provides toolchain decoupling as well as a completely sandboxed, well-defined, predictable environment. Among practical use cases we can list `edge computing`, `scripting`, `plugin systems`, running `IoT rules`, `smart contracts`, etc.\n\n## Used by\n\n[<img src=\"/extra/logos/wasmcloud.png\" height=\"32\" />](https://wasmcloud.dev)　\n[<img src=\"/extra/logos/wowcube.png\" height=\"32\" />](https://wowcube.com)　\n[<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3c/Siemens_AG_logo.svg/1024px-Siemens_AG_logo.svg.png\" height=\"22\" />](https://github.com/siemens/dtasm/tree/main/runtime/dtasm3)　\n[<img src=\"/extra/logos/scailable.png\" height=\"32\" />](https://scailable.net)　\n[<img src=\"/extra/logos/blynk.png\" height=\"32\" />](https://blynk.io)　\n[<img src=\"/extra/logos/iden3.svg\" height=\"32\" />](https://www.iden3.io)　\n[<img src=\"https://upload.wikimedia.org/wikipedia/commons/b/b0/NuttX_logo.png\" height=\"32\" />](https://github.com/apache/incubator-nuttx-apps/tree/master/interpreters/wasm3)　\n[<img src=\"/extra/logos/losant.png\" height=\"28\" />](https://github.com/Losant/eea-examples)　\n[<img src=\"https://user-images.githubusercontent.com/1506708/114701856-069ce700-9d2c-11eb-9b72-9ce2dfd9f0fb.png\" height=\"32\" />](https://github.com/kateinoigakukun/wasmic-ios)　\n[<img src=\"https://assets-global.website-files.com/636ab6ba0e1bd250e3aaedaf/636e155e93894cd4d030c4d7_balena_logo_dark.svg\" height=\"32\" />](https://github.com/balena-io-playground/balena-wasm3)　\n[<img src=\"https://krustlet.dev/images/horizontal.svg\" height=\"32\" />](https://github.com/deislabs/krustlet-wasm3)　\n[<img src=\"/extra/logos/shareup_app.svg\" height=\"24\" />](https://shareup.app/blog/introducing-shareup)　\n[<img src=\"https://wasm4.org/img/logo.png\" height=\"32\" />](https://wasm4.org)\n\n## Further Resources\n\n[Demos](./docs/Demos.md)  \n[Installation instructions](./docs/Installation.md)  \n[Cookbook](./docs/Cookbook.md)  \n[Troubleshooting](./docs/Troubleshooting.md)  \n[Build and Development instructions](./docs/Development.md)  \n[Supported Hardware](./docs/Hardware.md)  \n[Testing & Fuzzing](./docs/Testing.md)  \n[Performance](./docs/Performance.md)  \n[Interpreter Architecture](./docs/Interpreter.md)  \n[Logging](./docs/Diagnostics.md)  \n[Awesome WebAssembly Tools](https://github.com/vshymanskyy/awesome-wasm-tools/blob/main/README.md)\n\n### License\nThis project is released under The MIT License (MIT)\n\n\n[WasmProps]: https://github.com/WebAssembly/proposals/blob/main/README.md  \"WebAssembly Finished Proposals\"\n"
        },
        {
          "name": "build-cross.py",
          "type": "blob",
          "size": 7.69140625,
          "content": "#!/usr/bin/env python3\n\n# Author: Volodymyr Shymanskyy\n\nimport argparse\nimport subprocess\nimport multiprocessing\nfrom pathlib import Path\nimport time\nimport os\nimport contextlib\n\nmusl_targets = [\n    { \"name\": \"linux-x86_64\"    , \"arch\": \"x86_64-linux-musl\"           },\n    { \"name\": \"linux-i686\"      , \"arch\": \"i686-linux-musl\"             , \"skip_tests\" : True},\n\n    #{ \"name\": \"win-i686\"       , \"arch\": \"i686-w64-mingw32\"            },\n    #{ \"name\": \"win-x64\"        , \"arch\": \"x86_64-w64-mingw32\"          },\n\n    { \"name\": \"linux-aarch64\"   , \"arch\": \"aarch64-linux-musl\"          , \"runner\": \"qemu-aarch64-static\"   },\n    { \"name\": \"linux-armv6\"     , \"arch\": \"armv6-linux-musleabihf\"      , \"runner\": \"qemu-arm-static\"       },\n    { \"name\": \"linux-armv7l\"    , \"arch\": \"armv7l-linux-musleabihf\"     , \"runner\": \"qemu-arm-static\"       },\n    { \"name\": \"linux-mipsel-sf\" , \"arch\": \"mipsel-linux-muslsf\"         , \"runner\": \"qemu-mipsel-static\"    },\n    { \"name\": \"linux-mipsel\"    , \"arch\": \"mipsel-linux-musl\"           , \"runner\": \"qemu-mipsel-static\"    },\n    { \"name\": \"linux-mips-sf\"   , \"arch\": \"mips-linux-muslsf\"           , \"runner\": \"qemu-mips-static\"      },\n    { \"name\": \"linux-mips\"      , \"arch\": \"mips-linux-musl\"             , \"runner\": \"qemu-mips-static\"      },\n    { \"name\": \"linux-mips64el\"  , \"arch\": \"mips64el-linux-musl\"         , \"runner\": \"qemu-mips64el-static\"  },\n    { \"name\": \"linux-mips64\"    , \"arch\": \"mips64-linux-musl\"           , \"runner\": \"qemu-mips64-static\"    },\n    { \"name\": \"linux-rv32\"      , \"arch\": \"riscv32-linux-musl\"          , \"runner\": \"qemu-riscv32-static\"   },\n    { \"name\": \"linux-rv64\"      , \"arch\": \"riscv64-linux-musl\"          , \"runner\": \"qemu-riscv64-static\"   },\n    { \"name\": \"linux-ppc\"       , \"arch\": \"powerpc-linux-musl\"          , \"runner\": \"qemu-ppc-static\"       },\n    { \"name\": \"linux-ppc64\"     , \"arch\": \"powerpc64-linux-musl\"        , \"runner\": \"qemu-ppc64-static\"     },\n    { \"name\": \"linux-s390x\"     , \"arch\": \"s390x-linux-musl\"            , \"runner\": \"qemu-s390x-static\"     },\n    #{ \"name\": \"linux-m68k\"      , \"arch\": \"m68k-linux-musl\"             , \"runner\": \"qemu-m68k-static\"      },\n    #{ \"name\": \"linux-microblaze\", \"arch\": \"microblaze-linux-musl\"       , \"runner\": \"qemu-microblaze-static\" },\n\n    { \"name\": \"linux-armv7l-vfpv3\"      , \"arch\": \"armv7l-linux-musleabihf\" , \"runner\": \"qemu-arm-static\"       , \"cflags\": \"-march=armv7-a -mfpu=vfpv3 -mthumb -Wa,-mimplicit-it=thumb\" },\n    { \"name\": \"linux-mipsel-24kc-sf\"    , \"arch\": \"mipsel-linux-muslsf\"     , \"runner\": \"qemu-mipsel-static\"    , \"cflags\": \"-march=24kc\" },\n\n    { \"name\": \"wasi-sdk-8\"      , \"arch\": \"wasi-sdk-8.0\"  , \"sdk\": 8    , \"runner\": \"wasmer\" },\n    { \"name\": \"wasi-sdk-11\"     , \"arch\": \"wasi-sdk-11.0\" , \"sdk\": 11   , \"runner\": \"wasmer\" },\n    #{ \"name\": \"wasi-sdk-16\"     , \"arch\": \"wasi-sdk-16.0\" , \"sdk\": 16   , \"runner\": \"wasmer\" },\n]\n\nVERBOSE = False\nRETEST = False\nREBUILD = False\n\ndef run(cmd):\n    subprocess.run(cmd, shell=True, check=True, capture_output=not VERBOSE)\n\ndef build_target(target):\n    if target['name'].startswith(\"wasi\"):\n        build_wasi(target)\n    else:\n        build_musl(target)\n\ndef build_wasi(target):\n    WASI_VERSION = str(target['sdk'])\n    WASI_VERSION_FULL = WASI_VERSION + \".0\"\n    WASI_SDK_PATH = f\"{os.getcwd()}/.toolchains/{target['arch']}\"\n    if not Path(f\"{WASI_SDK_PATH}/bin\").exists():\n        print(f\"Downloading {target['name']} toolchain\")\n        WASI_TAR = f\"wasi-sdk-{WASI_VERSION_FULL}-linux.tar.gz\"\n        run(f\"\"\"\n            mkdir -p .toolchains\n            cd .toolchains\n            wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-{WASI_VERSION}/{WASI_TAR}\n            tar xzf {WASI_TAR}\n            rm {WASI_TAR}\n            \"\"\")\n\n    wasm3_binary = f\"build-cross/wasm3-{target['name']}.wasm\"\n\n    if REBUILD or not Path(wasm3_binary).exists():\n        build_dir = f\"build-cross/{target['name']}/\"\n        print(f\"Building {target['name']} target\")\n        run(f\"\"\"\n            mkdir -p {build_dir}\n            cd {build_dir}\n            cmake -GNinja -DCMAKE_TOOLCHAIN_FILE=\"{WASI_SDK_PATH}/share/cmake/wasi-sdk.cmake\" -DWASI_SDK_PREFIX=\"{WASI_SDK_PATH}\" ../..\n            cmake --build .\n            cp wasm3.wasm ../wasm3-{target['name']}.wasm\n            \"\"\")\n\n    run_tests(wasm3_binary, target, f\"{target['runner']} run --mapdir=/:. ../{wasm3_binary} --\".strip())\n\ndef build_musl(target):\n    muslcc = f\".toolchains/{target['arch']}-cross/bin/{target['arch']}-gcc\"\n    if not Path(muslcc).exists():\n        print(f\"Downloading {target['name']} toolchain\")\n        tar_name = f\"{target['arch']}-cross.tgz\"\n        run(f\"\"\"\n            mkdir -p .toolchains\n            cd .toolchains\n            curl -O -C - https://musl.cc/{tar_name}\n            tar xzf {tar_name}\n            rm {tar_name}\n            \"\"\")\n\n    if not 'cflags' in target:\n        target['cflags'] = \"\"\n    if not 'runner' in target:\n        target['runner'] = \"\"\n\n    wasm3_binary = f\"build-cross/wasm3-{target['name']}\"\n\n    if REBUILD or not Path(wasm3_binary).exists():\n        build_dir = f\"build-cross/{target['name']}/\"\n        print(f\"Building {target['name']} target\")\n        run(f\"\"\"\n            mkdir -p {build_dir}\n            cd {build_dir}\n            export CC=\"../../{muslcc}\"\n            export CFLAGS=\"{target['cflags']}\"\n            export LDFLAGS=\"-static -s\"\n            cmake -GNinja -DBUILD_NATIVE=OFF ../..\n            cmake --build .\n            cp wasm3 ../wasm3-{target['name']}\n            \"\"\")\n\n    run_tests(wasm3_binary, target, f\"{target['runner']} ../{wasm3_binary}\".strip())\n\ndef run_tests(wasm3_binary, target, wasm3_cmd):\n    if \"skip_tests\" in target:\n        return\n\n    test_spec_ok = Path(f\"build-cross/{target['name']}/.test-spec-ok\")\n    if RETEST or not test_spec_ok.exists():\n        with contextlib.suppress(FileNotFoundError):\n            test_spec_ok.unlink()\n        try:\n            run(f\"\"\"\n                cd test\n                python3 run-spec-test.py --exec \"{wasm3_cmd} --repl\"\n                \"\"\")\n            print(f\"Testing {target['name']} target (spec): OK\")\n            test_spec_ok.touch()\n        except Exception as e:\n            print(f\"Testing {target['name']} target (spec): failed\")\n            print(e)\n            pass\n\n    test_wasi_ok = Path(f\"build-cross/{target['name']}/.test-wasi-ok\")\n    if RETEST or not test_wasi_ok.exists():\n        with contextlib.suppress(FileNotFoundError):\n            test_wasi_ok.unlink()\n        try:\n            run(f\"\"\"\n                cd test\n                python3 run-wasi-test.py --fast --exec \"{wasm3_cmd}\"\n                \"\"\")\n            print(f\"Testing {target['name']} target (WASI): OK\")\n            test_wasi_ok.touch()\n        except Exception as e:\n            print(f\"Testing {target['name']} target (WASI): failed\")\n            print(e)\n            pass\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('-j','--jobs', type=int, metavar='N', default=multiprocessing.cpu_count(), help='parallel builds')\n    parser.add_argument('-v','--verbose', action='store_true', help='verbose output')\n    parser.add_argument('--retest', action='store_true', help='force tests')\n    parser.add_argument('--rebuild', action='store_true', help='force builds')\n    parser.add_argument('--target', metavar='NAME')\n    args = parser.parse_args()\n\n    if args.target:\n        musl_targets = filter(lambda t: args.target in t['name'] or args.target in t['arch'], musl_targets)\n\n    VERBOSE = args.verbose\n    RETEST = args.retest\n    REBUILD = args.rebuild\n\n    if args.jobs <= 1:\n        for t in musl_targets:\n            build_target(t)\n    else:\n        p = multiprocessing.Pool(args.jobs)\n        p.map(build_target, musl_targets)\n"
        },
        {
          "name": "build.zig",
          "type": "blob",
          "size": 2.4306640625,
          "content": "const std = @import(\"std\");\n\npub fn build(b: *std.Build) !void {\n    const target = b.standardTargetOptions(.{});\n    const optimize = b.standardOptimizeOption(.{});\n\n    const libm3_only = b.option(bool, \"libm3\", \"Build libwasm3 only\") orelse false;\n\n    const libwasm3 = b.addStaticLibrary(.{\n        .name = \"m3\",\n        .target = target,\n        .optimize = optimize,\n    });\n    libwasm3.root_module.sanitize_c = false; // fno-sanitize=undefined\n    libwasm3.defineCMacro(\"d_m3HasTracer\", null);\n\n    if (libwasm3.rootModuleTarget().isWasm()) {\n        if (libwasm3.rootModuleTarget().os.tag == .wasi) {\n            libwasm3.defineCMacro(\"d_m3HasWASI\", null);\n            libwasm3.linkSystemLibrary(\"wasi-emulated-process-clocks\");\n        }\n    }\n    libwasm3.addIncludePath(b.path(\"source\"));\n    libwasm3.addCSourceFiles(.{\n        .files = &.{\n            \"source/m3_api_libc.c\",\n            \"source/extensions/m3_extensions.c\",\n            \"source/m3_api_meta_wasi.c\",\n            \"source/m3_api_tracer.c\",\n            \"source/m3_api_uvwasi.c\",\n            \"source/m3_api_wasi.c\",\n            \"source/m3_bind.c\",\n            \"source/m3_code.c\",\n            \"source/m3_compile.c\",\n            \"source/m3_core.c\",\n            \"source/m3_env.c\",\n            \"source/m3_exec.c\",\n            \"source/m3_function.c\",\n            \"source/m3_info.c\",\n            \"source/m3_module.c\",\n            \"source/m3_parse.c\",\n        },\n        .flags = if (libwasm3.rootModuleTarget().isWasm())\n            &cflags ++ [_][]const u8{\n                \"-Xclang\",\n                \"-target-feature\",\n                \"-Xclang\",\n                \"+tail-call\",\n            }\n        else\n            &cflags,\n    });\n    libwasm3.linkSystemLibrary(\"m\");\n    libwasm3.linkLibC();\n\n    if (!libm3_only) {\n        const wasm3 = b.addExecutable(.{\n            .name = \"wasm3\",\n            .target = target,\n            .optimize = optimize,\n        });\n        for (libwasm3.root_module.include_dirs.items) |dir| {\n            wasm3.addIncludePath(dir.path);\n        }\n        wasm3.addCSourceFile(.{\n            .file = .{ .cwd_relative = \"platforms/app/main.c\" },\n            .flags = &cflags,\n        });\n\n        wasm3.linkLibrary(libwasm3);\n        b.installArtifact(wasm3);\n    } else b.installArtifact(libwasm3);\n}\n\nconst cflags = [_][]const u8{\n    \"-Wall\",\n    \"-Wextra\",\n    \"-Wpedantic\",\n    \"-Wparentheses\",\n    \"-Wundef\",\n    \"-Wpointer-arith\",\n    \"-Wstrict-aliasing=2\",\n    \"-std=gnu11\",\n};\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "extra",
          "type": "tree",
          "content": null
        },
        {
          "name": "platforms",
          "type": "tree",
          "content": null
        },
        {
          "name": "source",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}