{
  "metadata": {
    "timestamp": 1736710371254,
    "page": 189,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jagt/clumsy",
      "stars": 5317,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0830078125,
          "content": "bin/\nbuild/\ntmp/\nzig-cache/\nzig-out/\netc/clumsy.aps\n*.swp\nobj_vs\nobj_ninja\nobj_gmake\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.134765625,
          "content": "clumsy (https://jagt.github.io/clumsy/) is licensed under the MIT License.\n\nMIT License\n\nCopyright (c) 2013-2022 Chen Tao and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.0556640625,
          "content": "# clumsy\n\n__clumsy makes your network condition on Windows significantly worse, but in a managed and interactive manner.__\n\nLeveraging the awesome [WinDivert](http://reqrypt.org/windivert.html), clumsy stops living network packets and capture them, lag/drop/tamper/.. the packets on demand, then send them away. Whether you want to track down weird bugs related to broken network, or evaluate your application on poor connections, clumsy will come in handy:\n\n* No installation.\n* No need for proxy setup or code change in your application.\n* System wide network capturing means it works on any application.\n* Works even if you're offline (ie, connecting from localhost to localhost).\n* Your application keeps running, while clumsy can start and stop anytime.\n* Interactive control how bad the network can be, with enough visual feedback to tell you what's going on.\n\nSee [this page](http://jagt.github.io/clumsy) for more info and build instructions.\n\n\n## Details\n\nSimulate network latency, delay, packet loss with clumsy on Windows 7/8/10:\n\n![](clumsy-demo.gif)\n\n\n## License\n\nMIT\n"
        },
        {
          "name": "build.zig",
          "type": "blob",
          "size": 6.267578125,
          "content": "const std = @import(\"std\");\nconst Builder = std.build.Builder;\nconst Pkg = std.build.Pkg;\nconst Step = std.build.Step;\nconst debug = std.debug;\nconst Allocator = std.mem.Allocator;\nconst CrossTarget = std.zig.CrossTarget;\n\nconst ClumsyArch = enum { x86, x64 };\nconst ClumsyConf = enum { Debug, Release, Ship };\nconst ClumsyWinDivertSign = enum { A, B, C };\n\npub fn build(b: *std.build.Builder) void {\n    const arch = b.option(ClumsyArch, \"arch\", \"x86, x64\") orelse .x64;\n    const conf = b.option(ClumsyConf, \"conf\", \"Debug, Release\") orelse .Debug;\n    const windivert_sign = b.option(ClumsyWinDivertSign, \"sign\", \"A, B, C\") orelse .A;\n    const windows_kit_bin_root = b.option([]const u8, \"windows_kit_bin_root\", \"Windows SDK Bin root\") orelse \"C:/Program Files (x86)/Windows Kits/10/bin/10.0.19041.0\";\n\n    const arch_tag = @tagName(arch);\n    const conf_tag = @tagName(conf);\n    const sign_tag = @tagName(windivert_sign);\n    const windivert_dir = b.fmt(\"WinDivert-2.2.0-{s}\", .{sign_tag});\n\n    debug.print(\"- arch: {s}, conf: {s}, sign: {s}\\n\", .{@tagName(arch), @tagName(conf), @tagName(windivert_sign)});\n    debug.print(\"- windows_kit_bin_root: {s}\\n\", .{windows_kit_bin_root});\n    _ = std.fs.realpathAlloc(b.allocator, windows_kit_bin_root) catch @panic(\"windows_kit_bin_root not found\");\n\n    const prefix = b.fmt(\"{s}_{s}_{s}\", .{arch_tag, conf_tag, sign_tag});\n    b.exe_dir = b.fmt(\"{s}/{s}\", .{b.install_path, prefix});\n\n    debug.print(\"- out: {s}\\n\", .{b.exe_dir});\n\n    const tmp_path = b.fmt(\"tmp/{s}\", .{prefix});\n    b.makePath(tmp_path) catch @panic(\"unable to create tmp directory\");\n\n    b.installFile(b.fmt(\"external/{s}/{s}/WinDivert.dll\", .{windivert_dir, arch_tag}), b.fmt(\"{s}/WinDivert.dll\", .{prefix}));\n    switch (arch) {\n        .x64 => b.installFile(b.fmt(\"external/{s}/{s}/WinDivert64.sys\", .{windivert_dir, arch_tag}), b.fmt(\"{s}/WinDivert64.sys\", .{prefix})),\n        .x86 => b.installFile(b.fmt(\"external/{s}/{s}/WinDivert32.sys\", .{windivert_dir, arch_tag}), b.fmt(\"{s}/WinDivert32.sys\", .{prefix})),\n    }\n\n    b.installFile(\"etc/config.txt\", b.fmt(\"{s}/config.txt\", .{prefix}));\n    if (conf == .Ship)\n        b.installFile(\"LICENSE\", b.fmt(\"{s}/License.txt\", .{prefix}));\n\n    const res_obj_path = b.fmt(\"{s}/clumsy_res.obj\", .{tmp_path});\n\n    const rc_exe = b.findProgram(&.{\n        \"rc\",\n    }, &.{\n        b.pathJoin(&.{windows_kit_bin_root, @tagName(arch)}),\n    }) catch @panic(\"unable to find `rc.exe`, check your windows_kit_bin_root\");\n\n    const archFlag = switch (arch) {\n        .x86 => \"X86\",\n        .x64 => \"X64\",\n    };\n    const cmd = b.addSystemCommand(&.{\n        rc_exe,\n        \"/nologo\",\n        \"/d\",\n        \"NDEBUG\",\n        \"/d\",\n        archFlag,\n        \"/r\",\n        \"/fo\",\n        res_obj_path,\n        \"etc/clumsy.rc\",\n    });\n\n    const exe = b.addExecutable(\"clumsy\", null);\n\n    switch (conf) {\n        .Debug => {\n            exe.setBuildMode(.Debug);\n            exe.subsystem = .Console;\n        },\n        .Release => {\n            exe.setBuildMode(.ReleaseSafe);\n            exe.subsystem = .Windows;\n        },\n        .Ship => {\n            exe.setBuildMode(.ReleaseFast);\n            exe.subsystem = .Windows;\n        },\n    }\n    const triple  = switch (arch) {\n        .x64 => \"x86_64-windows-gnu\",\n        .x86 => \"i386-windows-gnu\",\n    };\n\n    const target = CrossTarget.parse(.{\n        .arch_os_abi = triple,\n    }) catch unreachable;\n    exe.setTarget(target);\n\n    exe.step.dependOn(&cmd.step);\n    exe.addObjectFile(res_obj_path);\n    exe.addCSourceFile(\"src/bandwidth.c\", &.{\"\"});\n    exe.addCSourceFile(\"src/divert.c\", &.{\"\"});\n    exe.addCSourceFile(\"src/drop.c\", &.{\"\"});\n    exe.addCSourceFile(\"src/duplicate.c\", &.{\"\"});\n    exe.addCSourceFile(\"src/elevate.c\", &.{\"\"});\n    exe.addCSourceFile(\"src/lag.c\", &.{\"\"});\n    exe.addCSourceFile(\"src/main.c\", &.{\"\"});\n    exe.addCSourceFile(\"src/ood.c\", &.{\"\"});\n    exe.addCSourceFile(\"src/packet.c\", &.{\"\"});\n    exe.addCSourceFile(\"src/reset.c\", &.{\"\"});\n    exe.addCSourceFile(\"src/tamper.c\", &.{\"\"});\n    exe.addCSourceFile(\"src/throttle.c\", &.{\"\"});\n    exe.addCSourceFile(\"src/utils.c\", &.{\"\"});\n    exe.addCSourceFile(\"src/utils.c\", &.{\"\"});\n\n    if (arch == .x86)\n        exe.addCSourceFile(\"etc/chkstk.s\", &.{\"\"});\n\n    exe.addIncludeDir(b.fmt(\"external/{s}/include\", .{windivert_dir}));\n\n    const iupLib = switch (arch) {\n        .x64 => \"external/iup-3.30_Win64_mingw6_lib\",\n        .x86 => \"external/iup-3.30_Win32_mingw6_lib\",\n    };\n\n    exe.addIncludeDir(b.pathJoin(&.{iupLib, \"include\"}));\n    exe.addCSourceFile(b.pathJoin(&.{iupLib, \"libiup.a\"}), &.{\"\"});\n\n    exe.linkLibC();\n    exe.addLibPath(b.fmt(\"external/{s}/{s}\", .{windivert_dir, arch_tag}));\n    exe.linkSystemLibrary(\"WinDivert\");\n    exe.linkSystemLibrary(\"comctl32\");\n    exe.linkSystemLibrary(\"Winmm\");\n    exe.linkSystemLibrary(\"ws2_32\");\n    exe.linkSystemLibrary(\"kernel32\");\n    exe.linkSystemLibrary(\"gdi32\");\n    exe.linkSystemLibrary(\"comdlg32\");\n    exe.linkSystemLibrary(\"uuid\");\n    exe.linkSystemLibrary(\"ole32\");\n\n    const exe_install_step = b.addInstallArtifact(exe);  \n    if (conf == .Ship)\n    {\n        const remove_pdb_step = RemoveOutFile.create(b, \"clumsy.pdb\");\n        remove_pdb_step.step.dependOn(&exe_install_step.step);\n        b.getInstallStep().dependOn(&remove_pdb_step.step);\n    }\n    else\n    {\n        b.getInstallStep().dependOn(&exe_install_step.step);\n    }\n\n    const clean_all = b.step(\"clean\", \"purge zig-cache and zig-out\");\n    clean_all.dependOn(&b.addRemoveDirTree(b.install_path).step);\n    //  TODO can't clean cache atm since build.exe is in it\n    // clean_all.dependOn(&b.addRemoveDirTree(\"zig-cache\").step);\n}\n\npub const RemoveOutFile = struct {\n    step: Step,\n    builder: *Builder,\n    rel_path: []const u8,\n\n    pub fn create(builder: *Builder, rel_path: []const u8) *@This() {\n        const self = builder.allocator.create(@This()) catch unreachable;\n        self.* = . {\n            .step = Step.init(.custom, builder.fmt(\"RemoveOutFile {s}\", .{rel_path}), builder.allocator, make),\n            .builder = builder,\n            .rel_path = rel_path,\n        };\n        return self;\n    }\n\n    fn make(step: *Step) anyerror!void {\n        const self = @fieldParentPtr(RemoveOutFile, \"step\", step);\n        const out_dir = try std.fs.openDirAbsolute(self.builder.exe_dir, .{});\n        try out_dir.deleteFile(self.rel_path);\n    }\n};"
        },
        {
          "name": "clumsy-demo.gif",
          "type": "blob",
          "size": 185.5576171875,
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "genie.lua",
          "type": "blob",
          "size": 6.2763671875,
          "content": "-- genie, https://github.com/bkaradzic/GENie\n-- known working version\n-- https://github.com/bkaradzic/bx/blob/51f25ba638b9cb35eb2ac078f842a4bed0746d56/tools/bin/windows/genie.exe\n\nMINGW_ACTION = 'gmake'\n\nif _ACTION == 'clean' then\n    os.rmdir('./build')\n    os.rmdir('./bin')\n    os.rmdir('./obj_vs')\n    os.rmdir('./obj_' .. MINGW_ACTION)\nend\n\nif _ACTION == MINGW_ACTION then\n    -- need a msys2 with clang\n    premake.gcc.cc   = 'clang'\n    premake.gcc.cxx  = 'clang++'\n    premake.gcc.ar   = 'llvm-ar'\n    premake.llvm = true\nend\n\nlocal LIB_DIVERT_VC11 = 'external/WinDivert-2.2.0-A'\nlocal LIB_DIVERT_MINGW = 'external/WinDivert-2.2.0-A'\nlocal LIB_IUP_WIN32_VC11 = 'external/iup-3.30_Win32_dll16_lib'\nlocal LIB_IUP_WIN64_VC11 = 'external/iup-3.30_Win64_dll16_lib'\nlocal LIB_IUP_WIN32_MINGW = 'external/iup-3.30_Win32_mingw6_lib'\nlocal LIB_IUP_WIN64_MINGW = 'external/iup-3.30_Win64_mingw6_lib'\n\nlocal ROOT = os.getcwd()\nprint(ROOT)\n\nsolution('clumsy')\n    location(\"./build\")\n    configurations({'Debug', 'Release'})\n    platforms({'x32', 'x64'})\n\n    project('clumsy')\n        language(\"C\")\n        files({'src/**.c', 'src/**.h'})\n        links({'WinDivert', 'iup', 'comctl32', 'Winmm', 'ws2_32'}) \n        if string.match(_ACTION, '^vs') then -- only vs can include rc file in solution\n            files({'./etc/clumsy.rc'})\n        elseif _ACTION == MINGW_ACTION then\n            files({'./etc/clumsy.rc'})\n        end\n\n        configuration('Debug')\n\t\t\tflags({'ExtraWarnings', 'Symbols'})\n            defines({'_DEBUG'})\n            kind(\"ConsoleApp\")\n\n        configuration('Release')\n\t\t\tflags({\"Optimize\"})            \n\t\t\tflags({'Symbols'}) -- keep the debug symbols for development\n            defines({'NDEBUG'})\n            kind(\"WindowedApp\")\n\n        configuration(MINGW_ACTION)\n            links({'kernel32', 'gdi32', 'comdlg32', 'uuid', 'ole32'}) -- additional libs\n            buildoptions({\n                '-Wno-missing-braces',\n                '-Wno-missing-field-initializers',\n                '--std=c99'\n            }) \n            objdir('obj_'..MINGW_ACTION)\n\n        configuration(\"vs*\")\n            defines({\"_CRT_SECURE_NO_WARNINGS\"})\n            flags({'NoManifest'})\n            kind(\"WindowedApp\") -- We don't need the console window in VS as we use OutputDebugString().\n            buildoptions({'/wd\"4214\"'})\n\t\t\tlinkoptions({'/ENTRY:\"mainCRTStartup\" /SAFESEH:NO'})\n\t\t\t-- characterset(\"MBCS\")\n            includedirs({LIB_DIVERT_VC11 .. '/include'})\n            objdir('obj_vs')\n\n        configuration({'x32', 'vs*'})\n            -- defines would be passed to resource compiler for whatever reason\n            -- and ONLY can be put here not under 'configuration('x32')' or it won't work\n            defines({'X32'})\n            includedirs({LIB_IUP_WIN32_VC11 .. '/include'})\n            libdirs({\n                LIB_DIVERT_VC11 .. '/x86',\n                LIB_IUP_WIN32_VC11 .. ''\n                })\n\n        configuration({'x64', 'vs*'})\n            defines({'X64'})\n            includedirs({LIB_IUP_WIN64_VC11 .. '/include'})\n            libdirs({\n                LIB_DIVERT_VC11 .. '/x64',\n                LIB_IUP_WIN64_VC11 .. ''\n                })\n\n        configuration({'x32', MINGW_ACTION})\n            defines({'X32'}) -- defines would be passed to resource compiler for whatever reason\n            includedirs({LIB_DIVERT_MINGW .. '/include',\n                LIB_IUP_WIN32_MINGW .. '/include'})\n            libdirs({\n                LIB_DIVERT_MINGW .. '/x86',\n                LIB_IUP_WIN32_MINGW .. ''\n                })\n            resoptions({'-O coff', '-F pe-i386'}) -- mingw64 defaults to x64\n\n        configuration({'x64', MINGW_ACTION})\n            defines({'X64'})\n            includedirs({LIB_DIVERT_MINGW .. '/include',\n                LIB_IUP_WIN64_MINGW .. '/include'})\n            libdirs({\n                LIB_DIVERT_MINGW .. '/x64',\n                LIB_IUP_WIN64_MINGW .. ''\n                })\n\n        local function set_bin(platform, config, arch)\n            local platform_str\n            if platform == 'vs*' then\n                platform_str = 'vs'\n            else\n                platform_str = platform\n            end\n            local subdir = ROOT .. '/bin/' .. platform_str .. '/' .. config .. '/' .. arch\n            local divert_lib, iup_lib\n            if platform == 'vs*' then \n                if arch == 'x64' then\n                    divert_lib = ROOT .. '/' .. LIB_DIVERT_VC11  .. '/x64/'\n                    iup_lib = ROOT .. '/' .. LIB_IUP_WIN64_VC11 .. ''\n                else\n                    divert_lib = ROOT ..'/' .. LIB_DIVERT_VC11 .. '/x86/'\n                    iup_lib = ROOT ..'/' .. LIB_IUP_WIN32_VC11 .. ''\n                end\n            elseif platform == MINGW_ACTION then\n                if arch == 'x64' then\n                    divert_lib = ROOT .. '/' .. LIB_DIVERT_MINGW .. '/x64/'\n                    iup_lib = ROOT .. '/' .. LIB_IUP_WIN64_MINGW .. ''\n                else\n                    divert_lib = ROOT .. '/' .. LIB_DIVERT_MINGW .. '/x86/'\n                    iup_lib = ROOT .. '/' .. LIB_IUP_WIN32_MINGW .. ''\n                end\n            end\n            configuration({platform, config, arch})\n                targetdir(subdir)\n                debugdir(subdir)\n                if platform == 'vs*' then\n                    postbuildcommands({\n                        \"robocopy \" .. divert_lib ..\" \" .. subdir .. '  *.dll *.sys >> robolog.txt',\n                        \"robocopy \" .. iup_lib .. \" \"  .. subdir .. ' iup.dll >> robolog.txt',\n                        \"robocopy \" .. ROOT .. \"/etc/ \"   .. subdir .. ' config.txt >> robolog.txt',\n                        \"exit /B 0\"\n                    })\n                elseif platform == MINGW_ACTION then \n                    postbuildcommands({\n                        -- robocopy returns non 0 will fail make\n                        'cp ' .. divert_lib .. \"WinDivert* \" .. subdir,\n                        'cp ' .. ROOT .. \"/etc/config.txt \" .. subdir,\n                    })\n                end\n        end\n\n        set_bin('vs*', 'Debug', \"x32\")\n        set_bin('vs*', 'Debug', \"x64\")\n        set_bin('vs*', 'Release', \"x32\")\n        set_bin('vs*', 'Release', \"x64\")\n        set_bin(MINGW_ACTION, 'Debug', \"x32\")\n        set_bin(MINGW_ACTION, 'Debug', \"x64\")\n        set_bin(MINGW_ACTION, 'Release', \"x32\")\n        set_bin(MINGW_ACTION, 'Release', \"x64\")\n\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}