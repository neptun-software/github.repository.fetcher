{
  "metadata": {
    "timestamp": 1736710300092,
    "page": 86,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Kitware/CMake",
      "stars": 6986,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.376953125,
          "content": "---\n# This configuration requires clang-format version 15 exactly.\nBasedOnStyle: Mozilla\nAlignOperands: false\nAllowShortFunctionsOnASingleLine: InlineOnly\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterClass:      true\n  AfterEnum:       true\n  AfterFunction:   true\n  AfterStruct:     true\n  AfterUnion:      true\nBreakBeforeBraces: Custom\nColumnLimit: 79\nIndentPPDirectives: AfterHash\nSortUsingDeclarations: false\nSpaceAfterTemplateKeyword: true\nIncludeBlocks: Regroup\nIncludeCategories:\n  - Regex:           '^[<\"]cmSTL\\.hxx'\n    Priority:        -2\n  - Regex:           '^[<\"]cmConfigure\\.h'\n    Priority:        -1\n  - Regex:           '^<queue>'\n    Priority:        1\n  - Regex:           '^(<|\")cm(ext)?/'\n    Priority:        2\n  - Regex:           '^(<|\")windows\\.h'\n    Priority:        3\n  - Regex:           '^<sys/'\n    Priority:        5\n  - Regex:           '^(<|\")Qt?[A-Z]'\n    Priority:        6\n  - Regex:           '^<cmtp/'\n    Priority:        7\n  - Regex:           '^(<|\")cmsys/'\n    Priority:        8\n  - Regex:           '^(<|\")cm_'\n    Priority:        9\n  - Regex:           '^(<|\")cm[A-Z][^.]+\\.h'\n    Priority:        10\n  - Regex:           '^<[^.]+\\.h'\n    Priority:        4\n  - Regex:           '^<'\n    Priority:        1\n  - Regex:           '.*'\n    Priority:        11\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 2.517578125,
          "content": "---\nChecks: \"-*,\\\nbugprone-*,\\\n-bugprone-assignment-in-if-condition,\\\n-bugprone-crtp-constructor-accessibility,\\\n-bugprone-easily-swappable-parameters,\\\n-bugprone-empty-catch,\\\n-bugprone-implicit-widening-of-multiplication-result,\\\n-bugprone-inc-dec-in-conditions,\\\n-bugprone-macro-parentheses,\\\n-bugprone-multi-level-implicit-pointer-conversion,\\\n-bugprone-narrowing-conversions,\\\n-bugprone-return-const-ref-from-parameter,\\\n-bugprone-suspicious-stringview-data-usage,\\\n-bugprone-switch-missing-default-case,\\\n-bugprone-too-small-loop-variable,\\\n-bugprone-unchecked-optional-access,\\\n-bugprone-unused-local-non-trivial-variable,\\\n-bugprone-unused-return-value,\\\n-bugprone-use-after-move,\\\nmisc-*,\\\n-misc-confusable-identifiers,\\\n-misc-const-correctness,\\\n-misc-include-cleaner,\\\n-misc-non-private-member-variables-in-classes,\\\n-misc-no-recursion,\\\n-misc-static-assert,\\\n-misc-use-anonymous-namespace,\\\n-misc-use-internal-linkage,\\\nmodernize-*,\\\n-modernize-avoid-c-arrays,\\\n-modernize-concat-nested-namespaces,\\\n-modernize-macro-to-enum,\\\n-modernize-return-braced-init-list,\\\n-modernize-type-traits,\\\n-modernize-use-emplace,\\\n-modernize-use-nodiscard,\\\n-modernize-use-noexcept,\\\n-modernize-use-trailing-return-type,\\\n-modernize-use-transparent-functors,\\\nperformance-*,\\\n-performance-avoid-endl,\\\n-performance-enum-size,\\\n-performance-unnecessary-copy-initialization,\\\n-performance-unnecessary-value-param,\\\nreadability-*,\\\n-readability-avoid-nested-conditional-operator,\\\n-readability-avoid-unconditional-preprocessor-if,\\\n-readability-convert-member-functions-to-static,\\\n-readability-enum-initial-value,\\\n-readability-function-cognitive-complexity,\\\n-readability-function-size,\\\n-readability-identifier-length,\\\n-readability-identifier-naming,\\\n-readability-implicit-bool-conversion,\\\n-readability-inconsistent-declaration-parameter-name,\\\n-readability-magic-numbers,\\\n-readability-make-member-function-const,\\\n-readability-math-missing-parentheses,\\\n-readability-named-parameter,\\\n-readability-simplify-boolean-expr,\\\n-readability-static-accessed-through-instance,\\\n-readability-suspicious-call-argument,\\\n-readability-uppercase-literal-suffix,\\\n-readability-use-std-min-max,\\\ncmake-*,\\\n-cmake-ostringstream-use-cmstrcat,\\\n-cmake-string-concatenation-use-cmstrcat,\\\n-cmake-use-bespoke-enum-class,\\\n\"\nHeaderFilterRegex: 'Source/cm[^/]*\\.(h|hxx|cxx)$'\nCheckOptions:\n  - key:   modernize-use-default-member-init.UseAssignment\n    value: '1'\n  - key:   modernize-use-equals-default.IgnoreMacros\n    value: '0'\n  - key:   modernize-use-auto.MinTypeNameLength\n    value: '80'\n...\n"
        },
        {
          "name": ".codespellrc",
          "type": "blob",
          "size": 0.6455078125,
          "content": "[codespell]\ncheck-filenames =\ncheck-hidden =\n# Disable warnings about binary files\nquiet-level = 2\nbuiltin = clear,rare,en-GB_to_en-US\nskip = */.git,*/build,*/Copyright.txt,*/CTestCustom.cmake.in,*/doxygen.config,*/Modules/Internal/CPack/NSIS.template.in,*/Source/CursesDialog/form/*,*/Source/kwsys/*,*/Tests/RunCMake/CPack/tests/DMG_SLA/German.*,*/Tests/RunCMake/ParseImplicitData/*.input,*/Tests/StringFileTest/test.utf8,*.pfx,*/Utilities/cm*\nignore-words-list = aci,ags,ake,ans,ba,ccompiler,cconfiguration,certi,conly,copyin,dependees,dne,dum,earch,ect,filetest,fo,helpfull,hiden,isnt,keypair,nd,ned,nin,nknown,ot,pard,sectionin,seh,ser,te,upto,varn,vas,wee\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.16015625,
          "content": "root = true\n\n[*]\ncharset = utf-8\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[{CMakeLists.txt,*.cmake,*.rst}]\nindent_size = 2\nindent_style = space\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.2041015625,
          "content": ".git*            export-ignore\n.hooks*          export-ignore\n.codespellrc     export-ignore\n.editorconfig    export-ignore\n\n# Custom attribute to mark sources as using our C code style.\n[attr]our-c-style  whitespace=tab-in-indent  format.clang-format=15\n\n# Custom attribute to mark sources as generated.\n# Do not perform whitespace checks.  Do not format.\n[attr]generated  whitespace=-tab-in-indent,-indent-with-non-tab -format.clang-format\n\nbootstrap        eol=lf\nconfigure        eol=lf\n*.[1-9]          eol=lf\n*.bash           eol=lf\n*.sh             eol=lf\n*.sh.in          eol=lf\n\n*.bat            eol=crlf\n*.bat.in         eol=crlf\n*.sln            eol=crlf\n*.vcproj         eol=crlf\n\n*.pfx            -text\n*.png            -text\n*.png.in         -text\n\n*.c              our-c-style\n*.cc             our-c-style\n*.cpp            our-c-style\n*.cu             our-c-style\n*.cxx            our-c-style\n*.h              our-c-style\n*.hh             our-c-style\n*.hpp            our-c-style\n*.hxx            our-c-style\n*.notcu          our-c-style\n*.tcc            our-c-style\n\n*.cmake          whitespace=tab-in-indent\n*.rst            whitespace=tab-in-indent conflict-marker-size=79\n*.txt            whitespace=tab-in-indent\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5361328125,
          "content": "/CMakeUserPresets.json\n\n# Common build directories\n/build*/\n\n# CI jobs that run in symlinked trees produce these artifacts.\n/real_work/\n/work\n\n# MacOS Finder files.\n.DS_Store\n\n# Python compile output.\n*.pyc\n\n# See Utilities/Sphinx/tutorial_archive.cmake\n/Help/_generated\n\n# CLion work directory\n/.idea/\n# CLion build directories\n/cmake-build-*/\n\n# QtCreator files.\n/CMakeLists.txt.user*\n\n# Visual Studio Code\n/.vscode/\n/.cache/\n\n# Visual Studio work directory\n/.vs/\n# Visual Studio build directory\n/out/\n\n# clang-tidy output\n/clang-tidy-fixes.patch\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 35.703125,
          "content": "include:\n    # Metadata shared by many jobs\n    - local: .gitlab/rules.yml\n    - local: .gitlab/artifacts.yml\n\n    # OS builds.\n    - local: .gitlab/os-linux.yml\n    - local: .gitlab/os-macos.yml\n    - local: .gitlab/os-windows.yml\n\n    # Post-build steps\n    - local: .gitlab/upload.yml\n\nstages:\n    - prep\n    - build\n    - test\n    - test-ext\n    - upload\n\nvariables:\n    # Some jobs that place their artifacts in a different directory will override this.\n    CMAKE_CI_BUILD_DIR: build\n\n################################################################################\n# Job declarations\n#\n# Each job must pull in each of the following keys:\n#\n#   - a \"base image\"\n#   - a build script\n#   - tags for the jobs\n#   - rules for when to run the job\n#\n# Additionally, jobs may also contain:\n#\n#   - artifacts\n#   - needs jobs for required jobs\n################################################################################\n\n# Job prefixes:\n#   - `b:` build\n#   - `l:` lint\n#   - `p:` prep\n#   - `t:` test\n#   - `u:` upload\n\n# Prep jobs\n\np:source-package:\n    extends:\n        - .linux_prep_source\n        - .cmake_prep_source_linux\n        - .linux_x86_64_tags\n        - .cmake_release_artifacts\n        - .run_only_for_package\n    variables:\n        CMAKE_CI_ARTIFACTS_NAME: \"artifacts-source\"\n\np:doc-package:\n    extends:\n        - .fedora41_sphinx_package\n        - .cmake_prep_doc_linux\n        - .linux_x86_64_tags\n        - .cmake_doc_artifacts\n        - .run_only_for_package\n\nu:source-package:\n    extends:\n        - .rsync_upload_package\n        - .run_only_for_package\n    needs:\n        - p:source-package\n\nb:version-update:\n    extends:\n        - .cmake_version_update_linux\n        - .linux_x86_64_tags\n        - .run_version_update\n\n# Documentation builds\n\nb:cmake.org-help:\n    extends:\n        - .cmake_org_help\n        - .run_cmake_org_help\n    needs: []\n\nu:cmake.org-help:\n    extends:\n        - .rsync_upload_help\n        - .run_cmake_org_help\n    needs:\n        - b:cmake.org-help\n\n# Lint builds\n\nl:codespell:\n    extends:\n        - .cmake_codespell_linux\n        - .linux_x86_64_tags\n        - .run_automatically\n\nl:iwyu-debian12:\n    extends:\n        - .debian12_iwyu\n        - .cmake_build_linux\n        - .linux_x86_64_tags\n        - .cmake_cdash_artifacts\n        - .run_automatically\n\nl:tidy-fedora41:\n    extends:\n        - .fedora41_tidy\n        - .cmake_build_linux\n        - .cmake_tidy_artifacts\n        - .linux_x86_64_tags\n        - .cmake_cdash_artifacts\n        - .run_automatically\n\nl:sphinx-fedora41:\n    extends:\n        - .fedora41_sphinx\n        - .cmake_build_linux\n        - .cmake_sphinx_artifacts\n        - .linux_x86_64_tags\n        - .run_automatically\n    variables:\n        CMAKE_CI_JOB_CONTINUOUS: \"true\"\n        CMAKE_CI_JOB_HELP: \"true\"\n\nl:clang-analyzer-fedora41:\n    extends:\n        - .fedora41_clang_analyzer\n        - .cmake_build_linux\n        - .linux_x86_64_tags\n        - .run_automatically\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\n# Linux builds\n\nb:centos7-x86_64:\n    extends:\n        - .linux_release_x86_64\n        - .cmake_build_linux_release\n        - .cmake_release_artifacts\n        - .linux_x86_64_tags\n        - .run_manually\n    variables:\n        CMAKE_CI_ARTIFACTS_NAME: \"artifacts-centos7-x86_64\"\n\nb:centos7-aarch64:\n    extends:\n        - .linux_release_aarch64\n        - .cmake_build_linux_release\n        - .cmake_release_artifacts\n        - .linux_aarch64_tags\n        - .run_manually\n    variables:\n        CMAKE_CI_ARTIFACTS_NAME: \"artifacts-centos7-aarch64\"\n        CMAKE_CI_NO_MR: \"true\"\n\nt:debian12-ninja:\n    extends:\n        - .debian12_ninja\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags\n        - .cmake_junit_artifacts\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY_NINJA: \"true\"\n\nt:debian12-aarch64-ninja:\n    extends:\n        - .debian12_aarch64_ninja\n        - .cmake_test_linux_release\n        - .linux_aarch64_tags\n        - .cmake_junit_artifacts\n        - .run_dependent\n        - .needs_centos7_aarch64\n    variables:\n        CMAKE_CI_NO_MR: \"true\"\n\nt:debian12-ninja-clang:\n    extends:\n        - .debian12_ninja_clang\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:debian12-makefiles-clang:\n    extends:\n        - .debian12_makefiles_clang\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:debian12-ninja-multi-symlinked:\n    extends:\n        - .debian12_ninja_multi_symlinked\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags\n        - .cmake_junit_artifacts\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n        CMAKE_CI_JOB_NIGHTLY_NINJA: \"true\"\n\nt:debian12-hip-radeon:\n    extends:\n        - .debian12_hip_radeon\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags_radeon\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:fedora41-hip-radeon:\n    extends:\n        - .fedora41_hip_radeon\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags_radeon\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:fedora41-makefiles-lfortran:\n    extends:\n        - .fedora41_makefiles_lfortran\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:fedora41-ninja-lfortran:\n    extends:\n        - .fedora41_ninja_lfortran\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:fedora41-ninja-clang:\n    extends:\n        - .fedora41_ninja_clang\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:fedora41-ninja-multi-clang:\n    extends:\n        - .fedora41_ninja_multi_clang\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:fedora41-makefiles-clang:\n    extends:\n        - .fedora41_makefiles_clang\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:fedora41-makefiles:\n    extends:\n        - .fedora41_makefiles\n        - .cmake_test_linux_release\n        - .linux_x86_64_v3_tags\n        - .run_dependent\n        - .needs_centos7_x86_64\n\nt:fedora41-makefiles-nospace:\n    extends:\n        - .fedora41_makefiles\n        - .cmake_test_linux_release\n        - .linux_x86_64_v3_tags\n        - .cmake_junit_artifacts\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        GIT_CLONE_PATH: \"$CI_BUILDS_DIR/cmake-ci\"\n        CMAKE_CI_BUILD_NAME: fedora41_makefiles_nospace\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:nvhpc22.11-ninja:\n    extends:\n        - .nvhpc_ninja\n        - .cmake_test_linux_release\n        - .linux_x86_64_v3_tags_cuda\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:cuda9.2-nvidia:\n    extends:\n        - .cuda9.2_nvidia\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags_cuda\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:cuda10.2-nvidia:\n    extends:\n        - .cuda10.2_nvidia\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags_cuda\n        - .cmake_junit_artifacts\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:cuda10.2-clang:\n    extends:\n        - .cuda10.2_clang\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags_cuda\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:cuda11.6-nvidia:\n    extends:\n        - .cuda11.6_nvidia\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags_cuda\n        - .cmake_junit_artifacts\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:cuda11.6-clang:\n    extends:\n        - .cuda11.6_clang\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags_cuda\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:cuda11.8-minimal-ninja:\n    extends:\n        - .cuda11.8_minimal_nvidia\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags_cuda\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:cuda11.8-minimal-splayed-ninja:\n    extends:\n        - .cuda11.8_splayed_nvidia\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags_cuda\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:cuda12.2-nvidia:\n    extends:\n        - .cuda12.2_nvidia\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags_cuda\n        - .cmake_junit_artifacts\n        - .run_dependent\n        - .needs_centos7_x86_64\n\nt:cuda12.2-nvidia-clang:\n    extends:\n        - .cuda12.2_nvidia_clang\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags_cuda\n        - .cmake_junit_artifacts\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:cuda12.2-clang:\n    extends:\n        - .cuda12.2_clang\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags_cuda\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:hip5.5-nvidia:\n    extends:\n        - .hip5.5_nvidia\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags_cuda\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:hip5.5-radeon:\n    extends:\n        - .hip5.5_radeon\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags_radeon\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:linux-gcc-cxx-modules-ninja:\n    extends:\n        - .gcc_cxx_modules_ninja\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:linux-gcc-cxx-modules-ninja-multi:\n    extends:\n        - .gcc_cxx_modules_ninja_multi\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:debian10-legacy:\n    extends:\n        - .debian10_legacy\n        - .cmake_test_linux_release\n        - .linux_x86_64_tags\n        - .cmake_junit_artifacts\n        - .run_dependent\n        - .needs_centos7_x86_64\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nb:fedora41-ninja:\n    extends:\n        - .fedora41_ninja\n        - .cmake_build_linux\n        - .cmake_build_artifacts\n        - .linux_x86_64_tags\n        - .run_manually\n    variables:\n        CMAKE_CI_JOB_CONTINUOUS: \"true\"\n\nb:fedora41-makefiles-symlinked:\n    extends:\n        - .fedora41_makefiles_symlinked\n        - .cmake_build_linux\n        - .cmake_build_artifacts\n        - .linux_x86_64_tags\n        - .run_manually\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nb:debian12-makefiles-inplace:\n    extends:\n        - .debian12_makefiles_inplace\n        - .cmake_build_linux_standalone\n        - .linux_x86_64_tags\n        - .run_manually\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nb:debian12-extdeps:\n    extends:\n        - .debian12_extdeps\n        - .cmake_build_linux_standalone\n        - .linux_x86_64_tags\n        - .run_manually\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nb:debian12-aarch64-extdeps:\n    extends:\n        - .debian12_aarch64_extdeps\n        - .cmake_build_linux_standalone\n        - .linux_aarch64_tags\n        - .run_manually\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nb:fedora41-extdeps:\n    extends:\n        - .fedora41_extdeps\n        - .cmake_build_linux_standalone\n        - .linux_x86_64_tags\n        - .run_manually\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:fedora41-ninja:\n    extends:\n        - .fedora41_ninja\n        - .cmake_test_linux\n        - .linux_x86_64_tags_x11\n        - .cmake_test_artifacts\n        - .run_dependent\n    needs:\n        - b:fedora41-ninja\n    variables:\n        CMAKE_CI_JOB_CONTINUOUS: \"true\"\n\nt:fedora41-makefiles-symlinked:\n    extends:\n        - .fedora41_makefiles_symlinked\n        - .cmake_test_linux\n        - .linux_x86_64_tags_x11\n        - .cmake_test_artifacts\n        - .run_dependent\n    needs:\n        - b:fedora41-makefiles-symlinked\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:fedora41-ninja-multi:\n    extends:\n        - .fedora41_ninja_multi\n        - .cmake_test_linux_external\n        - .linux_x86_64_tags\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:fedora41-ninja\n\nt:intel2016u2-makefiles:\n    extends:\n        - .cmake_test_linux_intelclassic_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: intel2016u2_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2016u2-el7\n\nt:intel2017u8-makefiles:\n    extends:\n        - .cmake_test_linux_intelclassic_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: intel2017u8_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2017u8-el7\n\nt:intel2018u4-makefiles:\n    extends:\n        - .cmake_test_linux_intelclassic_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: intel2018u4_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2018u4-el7\n\nt:intel2019u4-makefiles:\n    extends:\n        - .cmake_test_linux_intelclassic_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: intel2019u4_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2019u4-el7\n\nt:intel2020u4-makefiles:\n    extends:\n        - .cmake_test_linux_intelclassic_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: intel2020u4_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2020u4-el8\n\nt:intel2021.1.1-makefiles:\n    extends:\n        - .cmake_test_linux_intelclassic_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: intel2021.1.1_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2021.1.1-el8\n\nt:intel2021.1.2-makefiles:\n    extends:\n        - .cmake_test_linux_intelclassic_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: intel2021.1.2_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2021.1.2-el8\n\nt:intel2021.2.0-makefiles:\n    extends:\n        - .cmake_test_linux_intelclassic_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: intel2021.2.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2021.2.0-el8\n\nt:intel2021.3.0-makefiles:\n    extends:\n        - .cmake_test_linux_intelclassic_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: intel2021.3.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2021.3.0-el8\n\nt:intel2021.4.0-makefiles:\n    extends:\n        - .cmake_test_linux_intelclassic_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: intel2021.4.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2021.4.0-el8\n\nt:intel2021.5.0-makefiles:\n    extends:\n        - .cmake_test_linux_intelclassic_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: intel2021.5.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2022.0.2-el8\n\nt:intel2021.6.0-makefiles:\n    extends:\n        - .cmake_test_linux_intelclassic_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: intel2021.6.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2022.1.0-el8\n\nt:intel2021.7.0-makefiles:\n    extends:\n        - .cmake_test_linux_intelclassic_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: intel2021.7.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2022.2.0-el8\n\nt:intel2021.8.0-makefiles:\n    extends:\n        - .cmake_test_linux_intelclassic_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: intel2021.8.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2023.0.0-el8\n\nt:intel2021.9.0-makefiles:\n    extends:\n        - .cmake_test_linux_intelclassic_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: intel2021.9.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2023.1.0-el8\n\nt:intel2021.10.0-makefiles:\n    extends:\n        - .cmake_test_linux_intelclassic_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: intel2021.10.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2023.2.1-el8\n\nt:oneapi2021.1.1-makefiles:\n    extends:\n        - .cmake_test_linux_inteloneapi_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: oneapi2021.1.1_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2021.1.1-el8\n\nt:oneapi2021.1.2-makefiles:\n    extends:\n        - .cmake_test_linux_inteloneapi_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: oneapi2021.1.2_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2021.1.2-el8\n\nt:oneapi2021.2.0-makefiles:\n    extends:\n        - .cmake_test_linux_inteloneapi_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: oneapi2021.2.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2021.2.0-el8\n\nt:oneapi2021.3.0-makefiles:\n    extends:\n        - .cmake_test_linux_inteloneapi_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: oneapi2021.3.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2021.3.0-el8\n\nt:oneapi2021.4.0-makefiles:\n    extends:\n        - .cmake_test_linux_inteloneapi_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: oneapi2021.4.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2021.4.0-el8\n\nt:oneapi2022.0.2-makefiles:\n    extends:\n        - .cmake_test_linux_inteloneapi_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: oneapi2022.0.2_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2022.0.2-el8\n\nt:oneapi2022.1.0-makefiles:\n    extends:\n        - .cmake_test_linux_inteloneapi_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: oneapi2022.1.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2022.1.0-el8\n\nt:oneapi2022.2.0-makefiles:\n    extends:\n        - .cmake_test_linux_inteloneapi_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: oneapi2022.2.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2022.2.0-el8\n\nt:oneapi2023.0.0-makefiles:\n    extends:\n        - .cmake_test_linux_inteloneapi_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: oneapi2023.0.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2023.0.0-el8\n\nt:oneapi2023.1.0-makefiles:\n    extends:\n        - .cmake_test_linux_inteloneapi_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: oneapi2023.1.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2023.1.0-el8\n\nt:oneapi2023.2.0-makefiles:\n    extends:\n        - .cmake_test_linux_inteloneapi_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: oneapi2023.2.1_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2023.2.1-el8\n\nt:oneapi2024.0.0-makefiles:\n    extends:\n        - .cmake_test_linux_inteloneapi_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: oneapi2024.0.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2024.0.0-el8\n\nt:oneapi2024.1.0-makefiles:\n    extends:\n        - .cmake_test_linux_inteloneapi_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: oneapi2024.1.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2024.1.0-el8\n\nt:oneapi2024.2.0-makefiles:\n    extends:\n        - .cmake_test_linux_inteloneapi_makefiles\n    variables:\n        CMAKE_CI_BUILD_NAME: oneapi2024.2.0_makefiles\n        CMAKE_CI_INTELCOMPILER_IMAGE_TAG: 2024.2.0-rocky9\n\nb:linux-x86_64-package:\n    extends:\n        - .linux_package\n        - .linux_release_x86_64\n        - .cmake_build_linux_release\n        - .cmake_release_artifacts\n        - .linux_x86_64_tags\n        - .run_only_for_package\n    needs:\n        - p:doc-package\n    variables:\n        CMAKE_CI_ARTIFACTS_NAME: \"artifacts-linux-x86_64\"\n\nu:linux-x86_64-package:\n    extends:\n        - .rsync_upload_package\n        - .run_only_for_package\n    needs:\n        - b:linux-x86_64-package\n\nb:linux-aarch64-package:\n    extends:\n        - .linux_package\n        - .linux_release_aarch64\n        - .cmake_build_linux_release\n        - .cmake_release_artifacts\n        - .linux_aarch64_tags\n        - .run_only_for_package\n    needs:\n        - p:doc-package\n    variables:\n        CMAKE_CI_ARTIFACTS_NAME: \"artifacts-linux-aarch64\"\n\nu:linux-aarch64-package:\n    extends:\n        - .rsync_upload_package\n        - .run_only_for_package\n    needs:\n        - b:linux-aarch64-package\n\n## Sanitizer builds\n\nb:fedora41-asan:\n    extends:\n        - .fedora41_asan\n        - .cmake_build_linux\n        - .cmake_build_artifacts\n        - .linux_x86_64_tags\n        - .run_manually\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:fedora41-asan:\n    extends:\n        - .fedora41_asan\n        - .cmake_memcheck_linux\n        - .linux_x86_64_tags\n        - .run_dependent\n    needs:\n        - b:fedora41-asan\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\n# macOS builds\n\nb:macos-x86_64-ninja:\n    extends:\n        - .macos_x86_64_ninja\n        - .cmake_build_macos\n        - .cmake_build_artifacts\n        - .macos_x86_64_tags\n        - .run_manually\n    variables:\n        CMAKE_CI_NO_MR: \"true\"\n\nb:macos-arm64-ninja:\n    extends:\n        - .macos_arm64_ninja\n        - .cmake_build_macos\n        - .cmake_build_artifacts\n        - .macos_arm64_tags\n        - .run_manually\n    variables:\n        CMAKE_CI_JOB_CONTINUOUS: \"true\"\n\nb:macos-arm64-ninja-symlinked:\n    extends:\n        - .macos_arm64_ninja_symlinked\n        - .cmake_build_macos\n        - .cmake_build_artifacts\n        - .macos_arm64_tags\n        - .run_manually\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nb:macos-arm64-curl:\n    extends:\n        - .macos_arm64_curl\n        - .cmake_build_macos\n        - .cmake_build_artifacts\n        - .macos_arm64_tags\n        - .run_manually\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nb:macos-arm64-pch:\n    extends:\n        - .macos_arm64_pch\n        - .cmake_build_macos\n        - .macos_arm64_tags\n        - .run_manually\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:macos-x86_64-ninja:\n    extends:\n        - .macos_x86_64_ninja\n        - .cmake_test_macos\n        - .cmake_test_artifacts\n        - .macos_x86_64_tags\n        - .run_dependent\n    needs:\n        - b:macos-x86_64-ninja\n    variables:\n        CMAKE_CI_NO_MR: \"true\"\n\nt:macos-arm64-ninja:\n    extends:\n        - .macos_arm64_ninja\n        - .cmake_test_macos\n        - .cmake_test_artifacts\n        - .macos_arm64_tags\n        - .run_dependent\n    needs:\n        - b:macos-arm64-ninja\n    variables:\n        CMAKE_CI_JOB_CONTINUOUS: \"true\"\n        CMAKE_CI_JOB_NIGHTLY_NINJA: \"true\"\n\nt:macos-arm64-ninja-symlinked:\n    extends:\n        - .macos_arm64_ninja_symlinked\n        - .cmake_test_macos\n        - .cmake_test_artifacts\n        - .macos_arm64_tags\n        - .run_dependent\n    needs:\n        - b:macos-arm64-ninja-symlinked\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n        CMAKE_CI_JOB_NIGHTLY_NINJA: \"true\"\n\nt:macos-arm64-curl:\n    extends:\n        - .macos_arm64_curl\n        - .cmake_test_macos\n        - .macos_arm64_tags\n        - .run_dependent\n    needs:\n        - b:macos-arm64-curl\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nb:macos-x86_64-makefiles:\n    extends:\n        - .macos_x86_64_makefiles\n        - .cmake_build_macos\n        - .cmake_build_artifacts\n        - .macos_x86_64_tags\n        - .run_manually\n\nt:macos-x86_64-makefiles:\n    extends:\n        - .macos_x86_64_makefiles\n        - .cmake_test_macos\n        - .macos_x86_64_tags\n        - .run_dependent\n    needs:\n        - b:macos-x86_64-makefiles\n\nt:macos-arm64-ninja-multi:\n    extends:\n        - .macos_arm64_ninja_multi\n        - .cmake_test_macos_external\n        - .macos_arm64_tags_ext\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:macos-arm64-ninja\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:macos-x86_64-xcode:\n    extends:\n        - .macos_x86_64_xcode\n        - .cmake_test_macos_external\n        - .macos_x86_64_tags_ext\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:macos-x86_64-ninja\n    variables:\n        CMAKE_CI_NO_MR: \"true\"\n\nt:macos-arm64-xcode:\n    extends:\n        - .macos_arm64_xcode\n        - .cmake_test_macos_external\n        - .macos_arm64_tags_ext\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:macos-arm64-ninja\n\nt:macos-arm64-xcode-symlinked:\n    extends:\n        - .macos_arm64_xcode_symlinked\n        - .cmake_test_macos_external\n        - .macos_arm64_tags_ext\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:macos-arm64-ninja\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:macos-x86_64-ninja-ub:\n    extends:\n        - .macos_x86_64_ninja_ub\n        - .cmake_test_macos_external\n        - .macos_x86_64_tags_ext\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:macos-x86_64-ninja\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:macos-arm64-xcode-ub:\n    extends:\n        - .macos_arm64_xcode_ub\n        - .cmake_test_macos_external\n        - .macos_arm64_tags_ext\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:macos-arm64-ninja\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nb:macos-package:\n    extends:\n        - .macos_package\n        - .cmake_build_macos\n        - .cmake_release_artifacts\n        - .macos_arm64_tags_package\n        - .run_only_for_package\n    needs:\n        - p:doc-package\n    variables:\n        CMAKE_CI_ARTIFACTS_NAME: \"artifacts-macos-universal\"\n\nu:macos-package:\n    extends:\n        - .rsync_upload_package\n        - .run_only_for_package\n    needs:\n        - b:macos-package\n\nb:macos10.10-package:\n    extends:\n        - .macos10.10_package\n        - .cmake_build_macos\n        - .cmake_release_artifacts\n        - .macos_arm64_tags_package\n        - .run_only_for_package\n    needs:\n        - p:doc-package\n    variables:\n        CMAKE_CI_ARTIFACTS_NAME: \"artifacts-macos10.10-universal\"\n\nu:macos10.10-package:\n    extends:\n        - .rsync_upload_package\n        - .run_only_for_package\n    needs:\n        - b:macos10.10-package\n\n# Windows x86_64 jobs\n\nb:windows-vs2022-x64-ninja:\n    extends:\n        - .windows_vs2022_x64_ninja\n        - .cmake_build_windows\n        - .cmake_build_artifacts\n        - .windows_x86_64_tags_nonconcurrent_vs2022\n        - .run_manually\n    variables:\n        CMAKE_CI_JOB_CONTINUOUS: \"true\"\n\nb:windows-vs2022-x64-pch:\n    extends:\n        - .windows_vs2022_x64_pch\n        - .cmake_build_windows\n        - .windows_x86_64_tags_nonconcurrent_vs2022\n        - .run_manually\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:windows-vs2022-x64-ninja:\n    extends:\n        - .windows_vs2022_x64_ninja\n        - .cmake_test_windows\n        - .windows_x86_64_tags_nonconcurrent_vs2022\n        - .cmake_test_artifacts\n        - .run_dependent\n    needs:\n        - b:windows-vs2022-x64-ninja\n    variables:\n        CMAKE_CI_JOB_CONTINUOUS: \"true\"\n        CMAKE_CI_JOB_NIGHTLY_NINJA: \"true\"\n\nt:windows-vs2022-x64-ninja-multi:\n    extends:\n        - .windows_vs2022_x64_ninja_multi\n        - .cmake_test_windows_external\n        - .windows_x86_64_tags_concurrent_vs2022\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-vs2022-x64-ninja\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\n.t:windows-vs2022-x64:\n    extends:\n        - .windows_vs2022_x64\n        - .cmake_test_windows_external\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-vs2022-x64-ninja\n\nt:windows-vs2022-x64:\n    extends:\n        - .t:windows-vs2022-x64\n        - .windows_x86_64_tags_concurrent_vs2022\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"false\"\n\nt:windows-vs2022-x64-nightly:\n    extends:\n        - .t:windows-vs2022-x64\n        - .windows_x86_64_tags_concurrent_vs2022_android\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:windows-vs2022-x64-i18n:\n    extends:\n        - .t:windows-vs2022-x64\n        - .windows_x86_64_tags_concurrent_vs2022_android\n    variables:\n        GIT_CLONE_PATH: \"$CI_BUILDS_DIR\\\\cmake i18n cï\\\\$CI_CONCURRENT_ID\"\n        CMAKE_CONFIGURATION: windows_vs2022_x64_i18n\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:windows-vs2019-x64:\n    extends:\n        - .windows_vs2019_x64\n        - .cmake_test_windows_external\n        - .windows_x86_64_tags_concurrent_vs2019_android\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-vs2022-x64-ninja\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:windows-vs2022-x64-nmake:\n    extends:\n        - .windows_vs2022_x64_nmake\n        - .cmake_test_windows_external\n        - .windows_x86_64_tags_concurrent_vs2022\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-vs2022-x64-ninja\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:windows-vs2022-x64-jom:\n    extends:\n        - .windows_vs2022_x64_jom\n        - .cmake_test_windows_external\n        - .windows_x86_64_tags_concurrent_vs2022\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-vs2022-x64-ninja\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:windows-borland5.5:\n    extends:\n        - .windows_borland5.5\n        - .cmake_test_windows_external\n        - .windows_x86_64_tags_concurrent\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-vs2022-x64-ninja\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:windows-borland5.8:\n    extends:\n        - .windows_borland5.8\n        - .cmake_test_windows_external\n        - .windows_x86_64_tags_concurrent\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-vs2022-x64-ninja\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:windows-clang19.1-cl-ninja:\n    extends:\n        - .windows_clang_ninja\n        - .cmake_test_windows_external\n        - .windows_x86_64_tags_concurrent\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-vs2022-x64-ninja\n    variables:\n        CMAKE_CI_BUILD_NAME: windows_clang19.1_cl_ninja\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:windows-clang19.1-cl-nmake:\n    extends:\n        - .windows_clang_nmake\n        - .cmake_test_windows_external\n        - .windows_x86_64_tags_concurrent\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-vs2022-x64-ninja\n    variables:\n        CMAKE_CI_BUILD_NAME: windows_clang19.1_cl_nmake\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:windows-clang19.1-gnu-ninja:\n    extends:\n        - .windows_clang_ninja\n        - .cmake_test_windows_external\n        - .windows_x86_64_tags_concurrent\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-vs2022-x64-ninja\n    variables:\n        CMAKE_CI_BUILD_NAME: windows_clang19.1_gnu_ninja\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:windows-clang19.1-gnu-nmake:\n    extends:\n        - .windows_clang_nmake\n        - .cmake_test_windows_external\n        - .windows_x86_64_tags_concurrent\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-vs2022-x64-ninja\n    variables:\n        CMAKE_CI_BUILD_NAME: windows_clang19.1_gnu_nmake\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:windows-intel2021.9.0-ninja:\n    extends:\n        - .windows_intelclassic_ninja\n        - .cmake_test_windows_external\n        - .windows_x86_64_tags_concurrent_vs2022\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-vs2022-x64-ninja\n    variables:\n        CMAKE_CI_BUILD_NAME: windows_intel2021.9.0_ninja\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:windows-oneapi2024.1.0-ninja:\n    extends:\n        - .windows_inteloneapi_ninja\n        - .cmake_test_windows_external\n        - .windows_x86_64_tags_concurrent_vs2022\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-vs2022-x64-ninja\n    variables:\n        CMAKE_CI_BUILD_NAME: windows_oneapi2024.1.0_ninja\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:mingw_osdn_io-mingw_makefiles:\n    extends:\n        - .mingw_osdn_io_mingw_makefiles\n        - .cmake_test_windows_external\n        - .windows_x86_64_tags_concurrent\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-vs2022-x64-ninja\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:mingw_osdn_io-msys_makefiles:\n    extends:\n        - .mingw_osdn_io_msys_makefiles\n        - .cmake_test_windows_external\n        - .windows_x86_64_tags_concurrent\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-vs2022-x64-ninja\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:windows-msvc-v71-nmake:\n    extends:\n        - .windows_msvc_v71_nmake\n        - .cmake_test_windows_external\n        - .windows_x86_64_tags_concurrent\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-vs2022-x64-ninja\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:windows-openwatcom1.9:\n    extends:\n        - .windows_openwatcom1.9\n        - .cmake_test_windows_external\n        - .windows_x86_64_tags_concurrent\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-vs2022-x64-ninja\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:windows-orangec6.73.1:\n    extends:\n        - .windows_orangec6.73.1\n        - .cmake_test_windows_external\n        - .windows_x86_64_tags_concurrent\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-vs2022-x64-ninja\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\n# Windows arm64 jobs\n\nb:windows-arm64-vs2022-ninja:\n    extends:\n        - .windows_arm64_vs2022_ninja\n        - .cmake_build_windows\n        - .cmake_build_artifacts\n        - .windows_arm64_tags_nonconcurrent_vs2022\n        - .run_manually\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:windows-arm64-vs2022-ninja:\n    extends:\n        - .windows_arm64_vs2022_ninja\n        - .cmake_test_windows\n        - .windows_arm64_tags_nonconcurrent_vs2022\n        - .cmake_test_artifacts\n        - .run_dependent\n    needs:\n        - b:windows-arm64-vs2022-ninja\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\nt:windows-arm64-vs2022:\n    extends:\n        - .windows_arm64_vs2022\n        - .cmake_test_windows_external\n        - .windows_arm64_tags_concurrent_vs2022\n        - .cmake_junit_artifacts\n        - .run_dependent\n    needs:\n        - t:windows-arm64-vs2022-ninja\n    variables:\n        CMAKE_CI_JOB_NIGHTLY: \"true\"\n\n# Windows package jobs\n\nb:windows-x86_64-package:\n    extends:\n        - .windows_x86_64_package\n        - .cmake_build_windows\n        - .cmake_release_artifacts\n        - .windows_x86_64_tags_nonconcurrent_vs2022\n        - .run_only_for_package\n    needs:\n        - p:doc-package\n    variables:\n        CMAKE_CI_ARTIFACTS_NAME: \"artifacts-windows-x86_64\"\n\nu:windows-x86_64-package:\n    extends:\n        - .rsync_upload_package\n        - .run_only_for_package\n    needs:\n        - b:windows-x86_64-package\n\nb:windows-i386-package:\n    extends:\n        - .windows_i386_package\n        - .cmake_build_windows\n        - .cmake_release_artifacts\n        - .windows_x86_64_tags_nonconcurrent_vs2022\n        - .run_only_for_package\n    needs:\n        - p:doc-package\n    variables:\n        CMAKE_CI_ARTIFACTS_NAME: \"artifacts-windows-i386\"\n\nu:windows-i386-package:\n    extends:\n        - .rsync_upload_package\n        - .run_only_for_package\n    needs:\n        - b:windows-i386-package\n\nb:windows-arm64-package:\n    extends:\n        - .windows_arm64_package\n        - .cmake_build_windows\n        - .cmake_release_artifacts\n        - .windows_x86_64_tags_nonconcurrent_vs2022_arm64\n        - .run_only_for_package\n    needs:\n        - p:doc-package\n    variables:\n        CMAKE_CI_ARTIFACTS_NAME: \"artifacts-windows-arm64\"\n\nu:windows-arm64-package:\n    extends:\n        - .rsync_upload_package\n        - .run_only_for_package\n    needs:\n        - b:windows-arm64-package\n"
        },
        {
          "name": ".gitlab",
          "type": "tree",
          "content": null
        },
        {
          "name": ".hooks-config",
          "type": "blob",
          "size": 0.408203125,
          "content": "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n# file Copyright.txt or https://cmake.org/licensing for details.\n\n# Loaded by .git/hooks/(pre-commit|commit-msg|prepare-commit-msg)\n# during git commit after local hooks have been installed.\n\n[hooks \"chain\"]\n\tpre-commit = Utilities/Git/pre-commit\n\tcommit-msg = Utilities/Git/commit-msg\n\tprepare-commit-msg = Utilities/Git/prepare-commit-msg\n"
        },
        {
          "name": "Auxiliary",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeCPack.cmake",
          "type": "blob",
          "size": 9.8486328125,
          "content": "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n# file Copyright.txt or https://cmake.org/licensing for details.\n\noption(CMAKE_INSTALL_DEBUG_LIBRARIES\n  \"Install Microsoft runtime debug libraries with CMake.\" FALSE)\nmark_as_advanced(CMAKE_INSTALL_DEBUG_LIBRARIES)\n\n# By default, do not warn when built on machines using only VS Express:\nif(NOT DEFINED CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS)\n  set(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS ON)\nendif()\n\nif(CMake_INSTALL_DEPENDENCIES)\n  include(${CMake_SOURCE_DIR}/Modules/InstallRequiredSystemLibraries.cmake)\nendif()\n\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"CMake is a build tool\")\nset(CPACK_PACKAGE_VENDOR \"Kitware\")\nset(CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/Copyright.txt\")\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/Copyright.txt\")\nset(CPACK_PACKAGE_NAME \"${CMAKE_PROJECT_NAME}\")\nset(CPACK_PACKAGE_VERSION \"${CMake_VERSION}\")\nset(CPACK_PACKAGE_INSTALL_DIRECTORY \"${CPACK_PACKAGE_NAME}\")\nset(CPACK_SOURCE_PACKAGE_FILE_NAME \"cmake-${CMake_VERSION}\")\nset(CPACK_DMG_SLA_USE_RESOURCE_FILE_LICENSE OFF)\n\n# Installers for 32- vs. 64-bit CMake:\n#  - Root install directory (displayed to end user at installer-run time)\n#  - \"NSIS package/display name\" (text used in the installer GUI)\n#  - Registry key used to store info about the installation\nif(CMAKE_CL_64)\n  set(CPACK_NSIS_INSTALL_ROOT \"$PROGRAMFILES64\")\n  set(CPACK_NSIS_PACKAGE_NAME \"${CPACK_PACKAGE_NAME} ${CPACK_PACKAGE_VERSION} (Win64)\")\nelse()\n  set(CPACK_NSIS_INSTALL_ROOT \"$PROGRAMFILES\")\n  set(CPACK_NSIS_PACKAGE_NAME \"${CPACK_PACKAGE_NAME} ${CPACK_PACKAGE_VERSION}\")\nendif()\nset(CPACK_PACKAGE_INSTALL_REGISTRY_KEY \"${CPACK_NSIS_PACKAGE_NAME}\")\n\nif(NOT DEFINED CPACK_SYSTEM_NAME)\n  # make sure package is not Cygwin-unknown, for Cygwin just\n  # cygwin is good for the system name\n  if(\"x${CMAKE_SYSTEM_NAME}\" STREQUAL \"xCYGWIN\")\n    set(CPACK_SYSTEM_NAME Cygwin)\n  else()\n    set(CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR})\n  endif()\nendif()\nif(${CPACK_SYSTEM_NAME} MATCHES Windows)\n  if(CMAKE_CL_64)\n    set(CPACK_SYSTEM_NAME win64-x64)\n    set(CPACK_IFW_TARGET_DIRECTORY \"@RootDir@/Program Files/${CMAKE_PROJECT_NAME}\")\n  else()\n    set(CPACK_SYSTEM_NAME win32-x86)\n  endif()\nendif()\n\n# Command for configure IFW script templates\ninclude(${CMake_SOURCE_DIR}/Modules/CPackIFWConfigureFile.cmake)\n\n# Advanced IFW configuration\nset(_cpifwrc CPACK_IFW_COMPONENT_GROUP_CMAKE_)\nset(_cpifwrcconf _CPACK_IFW_COMPONENT_GROUP_CMAKE)\nset(${_cpifwrcconf} \"# CMake IFW configuration\\n\")\nmacro(_cmifwarg DESCRIPTION TYPE NAME DEFAULT)\n  set(_var CMake_IFW_ROOT_COMPONENT_${NAME})\n  if(DEFINED ${_var})\n    set(${_var} ${${_var}} CACHE ${TYPE} ${DESCRIPTION})\n    mark_as_advanced(${_var})\n  elseif(NOT \"${DEFAULT}\" STREQUAL \"\")\n    set(${_var} ${DEFAULT})\n  endif()\n  if(DEFINED ${_var})\n    set(${_cpifwrcconf}\n      \"${${_cpifwrcconf}}  set(${_cpifwrc}${NAME}\\n    \\\"${${_var}}\\\")\\n\")\n  endif()\nendmacro()\n\n_cmifwarg(\"Package <Name> tag (domen-like)\"\n  STRING NAME \"\")\n_cmifwarg(\"Package <DisplayName> tag\"\n  STRING DISPLAY_NAME \"\")\n_cmifwarg(\"Package <Description> tag\"\n  STRING DESCRIPTION \"\")\n_cmifwarg(\"Package <ReleaseDate> tag (keep empty to auto generate)\"\n  STRING RELEASE_DATE \"\")\n_cmifwarg(\"Package <Default> tag (values: TRUE, FALSE, SCRIPT)\"\n  STRING DEFAULT \"\")\n_cmifwarg(\"Package <Version> tag\"\n  STRING VERSION\n  \"${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}.${CMake_VERSION_PATCH}\")\n_cmifwarg(\"Package <SortingPriority> tag\"\n  STRING PRIORITY \"100\")\n_cmifwarg(\"Package <ForsedInstallation> tag\"\n  STRING FORCED_INSTALLATION \"\")\n\nset(${_cpifwrc}LICENSES_DEFAULT\n  \"${CPACK_PACKAGE_NAME} Copyright;${CPACK_RESOURCE_FILE_LICENSE}\")\n\n# Components\nif(CMake_INSTALL_COMPONENTS)\n  set(_CPACK_IFW_COMPONENTS_ALL cmake ctest cpack)\n  if(WIN32 AND NOT CYGWIN)\n      list(APPEND _CPACK_IFW_COMPONENTS_ALL cmcldeps)\n  endif()\n  if(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME)\n    set(_CPACK_IFW_COMPONENT_UNSPECIFIED_NAME\n      ${CMAKE_INSTALL_DEFAULT_COMPONENT_NAME})\n  else()\n    set(_CPACK_IFW_COMPONENT_UNSPECIFIED_NAME Unspecified)\n  endif()\n  list(APPEND _CPACK_IFW_COMPONENTS_ALL ${_CPACK_IFW_COMPONENT_UNSPECIFIED_NAME})\n  string(TOUPPER \"${_CPACK_IFW_COMPONENT_UNSPECIFIED_NAME}\"\n    _CPACK_IFW_COMPONENT_UNSPECIFIED_UNAME)\n  if(BUILD_CursesDialog)\n    list(APPEND _CPACK_IFW_COMPONENTS_ALL ccmake)\n  endif()\n  if(BUILD_QtDialog)\n    list(APPEND _CPACK_IFW_COMPONENTS_ALL cmake-gui)\n    if(USE_LGPL)\n      set(_CPACK_IFW_COMPONENT_CMAKE-GUI_LICENSES \"set(CPACK_IFW_COMPONENT_CMAKE-GUI_LICENSES\n  \\\"LGPLv${USE_LGPL}\\\" \\\"${CMake_SOURCE_DIR}/Licenses/LGPLv${USE_LGPL}.txt\\\")\")\n    endif()\n  endif()\n  if(SPHINX_MAN)\n    list(APPEND _CPACK_IFW_COMPONENTS_ALL sphinx-man)\n  endif()\n  if(SPHINX_HTML)\n    list(APPEND _CPACK_IFW_COMPONENTS_ALL sphinx-html)\n  endif()\n  if(SPHINX_SINGLEHTML)\n    list(APPEND _CPACK_IFW_COMPONENTS_ALL sphinx-singlehtml)\n  endif()\n  if(SPHINX_QTHELP)\n    list(APPEND _CPACK_IFW_COMPONENTS_ALL sphinx-qthelp)\n  endif()\n  if(SPHINX_LATEXPDF)\n    list(APPEND _CPACK_IFW_COMPONENTS_ALL sphinx-latexpdf)\n  endif()\n  if(CMake_BUILD_DEVELOPER_REFERENCE)\n    if(CMake_BUILD_DEVELOPER_REFERENCE_HTML)\n      list(APPEND _CPACK_IFW_COMPONENTS_ALL cmake-developer-reference-html)\n    endif()\n    if(CMake_BUILD_DEVELOPER_REFERENCE_QTHELP)\n      list(APPEND _CPACK_IFW_COMPONENTS_ALL cmake-developer-reference-qthelp)\n    endif()\n  endif()\n  set(_CPACK_IFW_COMPONENTS_CONFIGURATION \"\n  # Components\n  set(CPACK_COMPONENTS_ALL \\\"${_CPACK_IFW_COMPONENTS_ALL}\\\")\n  set(CPACK_COMPONENTS_GROUPING IGNORE)\n  \")\n  _cmifwarg(\"Package <Script> template\"\n    FILEPATH SCRIPT_TEMPLATE \"${CMake_SOURCE_DIR}/Source/QtIFW/CMake.qs.in\")\nelse()\n  if(BUILD_QtDialog AND USE_LGPL)\n    set(${_cpifwrc}LICENSES_DEFAULT\n      \"${${_cpifwrc}LICENSES_DEFAULT};LGPLv${USE_LGPL};${CMake_SOURCE_DIR}/Licenses/LGPLv${USE_LGPL}.txt\")\n  endif()\n  _cmifwarg(\"Package <Script> template\"\n    FILEPATH SCRIPT_TEMPLATE \"${CMake_SOURCE_DIR}/Source/QtIFW/installscript.qs.in\")\nendif()\n_cmifwarg(\"Package <Script> generated\"\n  FILEPATH SCRIPT_GENERATED \"${CMake_BINARY_DIR}/CMake.qs\")\n\n_cmifwarg(\"Package <Licenses> tag (pairs of <display_name> <file_path>)\"\n  STRING LICENSES \"${${_cpifwrc}LICENSES_DEFAULT}\")\n\nif(${CMAKE_SYSTEM_NAME} MATCHES Windows)\n  set(_CPACK_IFW_PACKAGE_ICON\n      \"set(CPACK_IFW_PACKAGE_ICON \\\"${CMake_SOURCE_DIR}/Source/QtDialog/CMakeSetup.ico\\\")\")\n  if(BUILD_QtDialog)\n    set(_CPACK_IFW_SHORTCUT_OPTIONAL \"${_CPACK_IFW_SHORTCUT_OPTIONAL}component.addOperation(\\\"CreateShortcut\\\", \\\"@TargetDir@/bin/cmake-gui.exe\\\", \\\"@StartMenuDir@/CMake (cmake-gui).lnk\\\");\\n\")\n  endif()\n  if(SPHINX_HTML)\n    set(_CPACK_IFW_SHORTCUT_OPTIONAL \"${_CPACK_IFW_SHORTCUT_OPTIONAL}component.addOperation(\\\"CreateShortcut\\\", \\\"@TargetDir@/doc/cmake-${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}/html/index.html\\\", \\\"@StartMenuDir@/CMake Documentation.lnk\\\");\\n\")\n  endif()\n  if(CMake_BUILD_DEVELOPER_REFERENCE)\n    if(CMake_BUILD_DEVELOPER_REFERENCE_HTML)\n    set(_CPACK_IFW_SHORTCUT_OPTIONAL \"${_CPACK_IFW_SHORTCUT_OPTIONAL}component.addOperation(\\\"CreateShortcut\\\", \\\"@TargetDir@/doc/cmake-${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}/developer-reference/html/index.html\\\", \\\"@StartMenuDir@/CMake Developer Reference.lnk\\\");\\n\")\n    endif()\n  endif()\n  install(FILES \"${CMake_SOURCE_DIR}/Source/QtIFW/cmake.org.html\"\n    DESTINATION \"${CMAKE_DOC_DIR}\"\n  )\nendif()\n\nif(${CMAKE_SYSTEM_NAME} MATCHES Linux)\n  set(CPACK_IFW_TARGET_DIRECTORY \"@HomeDir@/${CMAKE_PROJECT_NAME}\")\n  set(CPACK_IFW_ADMIN_TARGET_DIRECTORY \"@ApplicationsDir@/${CMAKE_PROJECT_NAME}\")\nendif()\n\n# Components scripts configuration\nif((EXISTS \"${CMake_IFW_ROOT_COMPONENT_SCRIPT_TEMPLATE}\")\n  AND (NOT \"${CMake_IFW_ROOT_COMPONENT_SCRIPT_GENERATED}\" STREQUAL \"\")\n  AND (NOT \"${CMake_IFW_ROOT_COMPONENT_SCRIPT}\"))\n  cpack_ifw_configure_file(\"${CMake_IFW_ROOT_COMPONENT_SCRIPT_TEMPLATE}\"\n    \"${CMake_IFW_ROOT_COMPONENT_SCRIPT_GENERATED}\")\n  _cmifwarg(\"Package <Script> tag\"\n    FILEPATH SCRIPT \"${CMake_IFW_ROOT_COMPONENT_SCRIPT_GENERATED}\")\nendif()\nforeach(_script\n  CMake.Dialogs.QtGUI\n  CMake.Documentation.SphinxHTML\n  CMake.DeveloperReference.HTML)\n  cpack_ifw_configure_file(\"${CMake_SOURCE_DIR}/Source/QtIFW/${_script}.qs.in\"\n    \"${CMake_BINARY_DIR}/${_script}.qs\")\nendforeach()\n\nif(NOT DEFINED CPACK_PACKAGE_FILE_NAME)\n  # if the CPACK_PACKAGE_FILE_NAME is not defined by the cache\n  # default to source package - system, on cygwin system is not\n  # needed\n  if(CYGWIN)\n    set(CPACK_PACKAGE_FILE_NAME \"${CPACK_SOURCE_PACKAGE_FILE_NAME}\")\n  else()\n    set(CPACK_PACKAGE_FILE_NAME\n      \"${CPACK_SOURCE_PACKAGE_FILE_NAME}-${CPACK_SYSTEM_NAME}\")\n  endif()\nendif()\n\nset(CPACK_PACKAGE_CONTACT \"cmake+development@discourse.cmake.org\")\n\nif(UNIX)\n  set(CPACK_STRIP_FILES \"${CMAKE_BIN_DIR}/ccmake;${CMAKE_BIN_DIR}/cmake;${CMAKE_BIN_DIR}/cpack;${CMAKE_BIN_DIR}/ctest\")\n  set(CPACK_SOURCE_STRIP_FILES \"\")\n  set(CPACK_PACKAGE_EXECUTABLES \"ccmake\" \"CMake\")\nendif()\n\nset(CPACK_WIX_UPGRADE_GUID \"8ffd1d72-b7f1-11e2-8ee5-00238bca4991\")\n\nif(CMake_BUILD_WIX_CUSTOM_ACTION)\n  if(CMAKE_CONFIGURATION_TYPES)\n    set(CMake_BUILD_WIX_CUSTOM_ACTION_MULTI_CONFIG TRUE)\n  else()\n    set(CMake_BUILD_WIX_CUSTOM_ACTION_MULTI_CONFIG FALSE)\n  endif()\nendif()\n\n# Set the options file that needs to be included inside CMakeCPackOptions.cmake\nset(QT_DIALOG_CPACK_OPTIONS_FILE ${CMake_BINARY_DIR}/Source/QtDialog/QtDialogCPack.cmake)\nconfigure_file(\"${CMake_SOURCE_DIR}/CMakeCPackOptions.cmake.in\"\n  \"${CMake_BINARY_DIR}/CMakeCPackOptions.cmake\" @ONLY)\nset(CPACK_PROJECT_CONFIG_FILE \"${CMake_BINARY_DIR}/CMakeCPackOptions.cmake\")\n\nset(CPACK_SOURCE_IGNORE_FILES\n  # Files specific to version control.\n  \"/\\\\\\\\.git/\"\n  \"/\\\\\\\\.gitattributes$\"\n  \"/\\\\\\\\.github/\"\n  \"/\\\\\\\\.gitignore$\"\n  \"/\\\\\\\\.hooks-config$\"\n\n  # Cygwin package build.\n  \"/\\\\\\\\.build/\"\n\n  # Temporary files.\n  \"\\\\\\\\.swp$\"\n  \"\\\\\\\\.#\"\n  \"/#\"\n  \"~$\"\n  )\n\nif(CMake_CPACK_CUSTOM_SCRIPT)\n  include(${CMake_CPACK_CUSTOM_SCRIPT})\nendif()\n\n# include CPack model once all variables are set\ninclude(CPack)\n"
        },
        {
          "name": "CMakeCPackOptions.cmake.in",
          "type": "blob",
          "size": 11.8642578125,
          "content": "# This file is configured at cmake time, and loaded at cpack time.\n# To pass variables to cpack from cmake, they must be configured\n# in this file.\n\nif(CPACK_GENERATOR MATCHES \"NSIS\")\n  set(CPACK_NSIS_INSTALL_ROOT \"@CPACK_NSIS_INSTALL_ROOT@\")\n\n  # set the install/uninstall icon used for the installer itself\n  # There is a bug in NSI that does not handle full unix paths properly.\n  set(CPACK_NSIS_MUI_ICON \"@CMake_SOURCE_DIR@/Utilities/Release\\\\CMakeLogo.ico\")\n  set(CPACK_NSIS_MUI_UNIICON \"@CMake_SOURCE_DIR@/Utilities/Release\\\\CMakeLogo.ico\")\n  # set the package header icon for MUI\n  set(CPACK_PACKAGE_ICON \"@CMake_SOURCE_DIR@/Utilities/Release\\\\CMakeInstall.bmp\")\n  # tell cpack to create links to the doc files\n  set(CPACK_NSIS_MENU_LINKS\n    \"@CMAKE_DOC_DIR@/html/index.html\" \"CMake Documentation\"\n    \"https://cmake.org\" \"CMake Web Site\"\n    )\n  # Use the icon from cmake-gui for add-remove programs\n  set(CPACK_NSIS_INSTALLED_ICON_NAME \"bin\\\\cmake-gui.exe\")\n\n  set(CPACK_NSIS_PACKAGE_NAME \"@CPACK_NSIS_PACKAGE_NAME@\")\n  set(CPACK_NSIS_DISPLAY_NAME \"@CPACK_NSIS_PACKAGE_NAME@, a cross-platform, open-source build system\")\n  set(CPACK_NSIS_HELP_LINK \"https://cmake.org\")\n  set(CPACK_NSIS_URL_INFO_ABOUT \"http://www.kitware.com\")\n  set(CPACK_NSIS_CONTACT @CPACK_PACKAGE_CONTACT@)\n  set(CPACK_NSIS_MODIFY_PATH ON)\nendif()\n\n# include the cpack options for qt dialog if they exist\n# they might not if qt was not enabled for the build\ninclude(\"@QT_DIALOG_CPACK_OPTIONS_FILE@\" OPTIONAL)\n\nif(CPACK_GENERATOR MATCHES \"IFW\")\n\n  # Installer configuration\n  set(CPACK_IFW_PACKAGE_TITLE \"CMake Build Tool\")\n  set(CPACK_IFW_PRODUCT_URL \"https://cmake.org\")\n  @_CPACK_IFW_PACKAGE_ICON@\n  set(CPACK_IFW_PACKAGE_WINDOW_ICON\n    \"@CMake_SOURCE_DIR@/Source/QtDialog/CMakeSetup128.png\")\n  set(CPACK_IFW_PACKAGE_CONTROL_SCRIPT\n    \"@CMake_SOURCE_DIR@/Source/QtIFW/controlscript.qs\")\n\n  # Uninstaller configuration\n  set(CPACK_IFW_PACKAGE_MAINTENANCE_TOOL_NAME \"cmake-maintenance\")\n  @_CPACK_IFW_COMPONENTS_CONFIGURATION@\n  # Unspecified\n  set(CPACK_IFW_COMPONENT_@_CPACK_IFW_COMPONENT_UNSPECIFIED_UNAME@_VERSION\n    \"@CMake_IFW_ROOT_COMPONENT_VERSION@\")\n\n  # Package configuration group\n  set(CPACK_IFW_PACKAGE_GROUP CMake)\n\n  # Group configuration\n\n  # CMake\n  set(CPACK_COMPONENT_GROUP_CMAKE_DISPLAY_NAME\n    \"@CPACK_PACKAGE_NAME@\")\n  set(CPACK_COMPONENT_GROUP_CMAKE_DESCRIPTION\n    \"@CPACK_PACKAGE_DESCRIPTION_SUMMARY@\")\n  @_CPACK_IFW_COMPONENT_GROUP_CMAKE@\n\n  # Tools\n  set(CPACK_COMPONENT_GROUP_TOOLS_DISPLAY_NAME \"Command-Line Tools\")\n  set(CPACK_COMPONENT_GROUP_TOOLS_DESCRIPTION\n    \"Command-Line Tools: cmake, ctest and cpack\")\n  set(CPACK_COMPONENT_GROUP_TOOLS_PARENT_GROUP CMake)\n  set(CPACK_IFW_COMPONENT_GROUP_TOOLS_PRIORITY 90)\n  set(CPACK_IFW_COMPONENT_GROUP_TOOLS_VERSION\n    \"@CMake_IFW_ROOT_COMPONENT_VERSION@\")\n\n  set(CPACK_COMPONENT_CMAKE_DISPLAY_NAME \"cmake\")\n  set(CPACK_COMPONENT_CMAKE_DESCRIPTION\n    \"The \\\"cmake\\\" executable is the CMake command-line interface\")\n  set(CPACK_COMPONENT_CMAKE_REQUIRED TRUE)\n  set(CPACK_COMPONENT_CMAKE_GROUP Tools)\n  set(CPACK_IFW_COMPONENT_CMAKE_NAME \"CMake\")\n  set(CPACK_IFW_COMPONENT_CMAKE_PRIORITY 89)\n  set(CPACK_IFW_COMPONENT_CMAKE_VERSION\n    \"@CMake_IFW_ROOT_COMPONENT_VERSION@\")\n\n  set(CPACK_COMPONENT_CTEST_DISPLAY_NAME \"ctest\")\n  set(CPACK_COMPONENT_CTEST_DESCRIPTION\n    \"The \\\"ctest\\\" executable is the CMake test driver program\")\n  set(CPACK_COMPONENT_CTEST_REQUIRED TRUE)\n  set(CPACK_COMPONENT_CTEST_GROUP Tools)\n  set(CPACK_IFW_COMPONENT_CTEST_NAME \"CTest\")\n  set(CPACK_IFW_COMPONENT_CTEST_PRIORITY 88)\n  set(CPACK_IFW_COMPONENT_CTEST_VERSION\n    \"@CMake_IFW_ROOT_COMPONENT_VERSION@\")\n\n  set(CPACK_COMPONENT_CPACK_DISPLAY_NAME \"cpack\")\n  set(CPACK_COMPONENT_CPACK_DESCRIPTION\n    \"The \\\"cpack\\\" executable is the CMake packaging program\")\n  set(CPACK_COMPONENT_CPACK_REQUIRED TRUE)\n  set(CPACK_COMPONENT_CPACK_GROUP Tools)\n  set(CPACK_IFW_COMPONENT_CPACK_NAME \"CPack\")\n  set(CPACK_IFW_COMPONENT_CPACK_PRIORITY 87)\n  set(CPACK_IFW_COMPONENT_CPACK_VERSION\n    \"@CMake_IFW_ROOT_COMPONENT_VERSION@\")\n\n  set(CPACK_COMPONENT_CMCLDEPS_DISPLAY_NAME \"cmcldeps\")\n  set(CPACK_COMPONENT_CMCLDEPS_DESCRIPTION\n    \"The \\\"cmcldeps\\\" executable is wrapper around \\\"cl\\\" program\")\n  set(CPACK_COMPONENT_CMCLDEPS_GROUP Tools)\n  set(CPACK_IFW_COMPONENT_CMCLDEPS_NAME \"CMClDeps\")\n  set(CPACK_IFW_COMPONENT_CMCLDEPS_PRIORITY 86)\n  set(CPACK_IFW_COMPONENT_CMCLDEPS_VERSION\n    \"@CMake_IFW_ROOT_COMPONENT_VERSION@\")\n\n  # Dialogs\n  set(CPACK_COMPONENT_GROUP_DIALOGS_DISPLAY_NAME \"Interactive Dialogs\")\n  set(CPACK_COMPONENT_GROUP_DIALOGS_DESCRIPTION\n    \"Interactive Dialogs with Console and GUI interfaces\")\n  set(CPACK_COMPONENT_GROUP_DIALOGS_PARENT_GROUP CMake)\n  set(CPACK_IFW_COMPONENT_GROUP_DIALOGS_PRIORITY 80)\n  set(CPACK_IFW_COMPONENT_GROUP_DIALOGS_VERSION\n    \"@CMake_IFW_ROOT_COMPONENT_VERSION@\")\n\n  set(CPACK_COMPONENT_CMAKE-GUI_DISPLAY_NAME \"cmake-gui\")\n  set(CPACK_COMPONENT_CMAKE-GUI_GROUP Dialogs)\n  set(CPACK_IFW_COMPONENT_CMAKE-GUI_NAME \"QtGUI\")\n  set(CPACK_IFW_COMPONENT_CMAKE-GUI_SCRIPT\n    \"@CMake_BINARY_DIR@/CMake.Dialogs.QtGUI.qs\")\n  set(CPACK_IFW_COMPONENT_CMAKE-GUI_VERSION\n    \"@CMake_IFW_ROOT_COMPONENT_VERSION@\")\n  @_CPACK_IFW_COMPONENT_CMAKE-GUI_LICENSES@\n\n  set(CPACK_COMPONENT_CCMAKE_DISPLAY_NAME \"ccmake\")\n  set(CPACK_COMPONENT_CCMAKE_GROUP Dialogs)\n  set(CPACK_IFW_COMPONENT_CCMAKE_NAME \"CursesGUI\")\n  set(CPACK_IFW_COMPONENT_CCMAKE_VERSION\n    \"@CMake_IFW_ROOT_COMPONENT_VERSION@\")\n\n  # Documentation\n  set(CPACK_COMPONENT_GROUP_DOCUMENTATION_DISPLAY_NAME \"Documentation\")\n  set(CPACK_COMPONENT_GROUP_DOCUMENTATION_DESCRIPTION\n    \"CMake Documentation in different formats (html, man, qch)\")\n  set(CPACK_COMPONENT_GROUP_DOCUMENTATION_PARENT_GROUP CMake)\n  set(CPACK_IFW_COMPONENT_GROUP_DOCUMENTATION_PRIORITY 60)\n  set(CPACK_IFW_COMPONENT_GROUP_DOCUMENTATION_VERSION\n    \"@CMake_IFW_ROOT_COMPONENT_VERSION@\")\n\n  set(CPACK_COMPONENT_SPHINX-MAN_DISPLAY_NAME \"man\")\n  set(CPACK_COMPONENT_SPHINX-MAN_GROUP Documentation)\n  set(CPACK_COMPONENT_SPHINX-MAN_DISABLED TRUE)\n  set(CPACK_IFW_COMPONENT_SPHINX-MAN_NAME \"SphinxMan\")\n  set(CPACK_IFW_COMPONENT_SPHINX-MAN_VERSION\n    \"@CMake_IFW_ROOT_COMPONENT_VERSION@\")\n\n  set(CPACK_COMPONENT_SPHINX-HTML_DISPLAY_NAME \"HTML\")\n  set(CPACK_COMPONENT_SPHINX-HTML_GROUP Documentation)\n  set(CPACK_IFW_COMPONENT_SPHINX-HTML_NAME \"SphinxHTML\")\n  set(CPACK_IFW_COMPONENT_SPHINX-HTML_SCRIPT\n    \"@CMake_BINARY_DIR@/CMake.Documentation.SphinxHTML.qs\")\n  set(CPACK_IFW_COMPONENT_SPHINX-HTML_VERSION\n    \"@CMake_IFW_ROOT_COMPONENT_VERSION@\")\n\n  set(CPACK_COMPONENT_SPHINX-SINGLEHTML_DISPLAY_NAME \"Single HTML\")\n  set(CPACK_COMPONENT_SPHINX-SINGLEHTML_GROUP Documentation)\n  set(CPACK_COMPONENT_SPHINX-SINGLEHTML_DISABLED TRUE)\n  set(CPACK_IFW_COMPONENT_SPHINX-SINGLEHTML_NAME \"SphinxSingleHTML\")\n  set(CPACK_IFW_COMPONENT_SPHINX-SINGLEHTML_VERSION\n    \"@CMake_IFW_ROOT_COMPONENT_VERSION@\")\n\n  set(CPACK_COMPONENT_SPHINX-QTHELP_DISPLAY_NAME \"Qt Compressed Help\")\n  set(CPACK_COMPONENT_SPHINX-QTHELP_GROUP Documentation)\n  set(CPACK_COMPONENT_SPHINX-QTHELP_DISABLED TRUE)\n  set(CPACK_IFW_COMPONENT_SPHINX-QTHELP_NAME \"SphinxQtHelp\")\n  set(CPACK_IFW_COMPONENT_SPHINX-QTHELP_VERSION\n    \"@CMake_IFW_ROOT_COMPONENT_VERSION@\")\n\n  # Developer Reference\n  set(CPACK_COMPONENT_GROUP_DEVELOPERREFERENCE_DISPLAY_NAME \"Developer Reference\")\n  set(CPACK_COMPONENT_GROUP_DEVELOPERREFERENCE_DESCRIPTION\n    \"CMake Reference in different formats (html, qch)\")\n  set(CPACK_COMPONENT_GROUP_DEVELOPERREFERENCE_PARENT_GROUP CMake)\n  set(CPACK_IFW_COMPONENT_GROUP_DEVELOPERREFERENCE_PRIORITY 50)\n  set(CPACK_IFW_COMPONENT_GROUP_DEVELOPERREFERENCE_VERSION\n    \"@CMake_IFW_ROOT_COMPONENT_VERSION@\")\n\n  set(CPACK_COMPONENT_CMAKE-DEVELOPER-REFERENCE-HTML_DISPLAY_NAME \"HTML\")\n  set(CPACK_COMPONENT_CMAKE-DEVELOPER-REFERENCE-HTML_GROUP DeveloperReference)\n  set(CPACK_COMPONENT_CMAKE-DEVELOPER-REFERENCE-HTML_DISABLED TRUE)\n  set(CPACK_IFW_COMPONENT_CMAKE-DEVELOPER-REFERENCE-HTML_NAME \"HTML\")\n  set(CPACK_IFW_COMPONENT_CMAKE-DEVELOPER-REFERENCE-HTML_SCRIPT\n    \"@CMake_BINARY_DIR@/CMake.DeveloperReference.HTML.qs\")\n  set(CPACK_IFW_COMPONENT_CMAKE-DEVELOPER-REFERENCE-HTML_VERSION\n    \"@CMake_IFW_ROOT_COMPONENT_VERSION@\")\n\n  set(CPACK_COMPONENT_CMAKE-DEVELOPER-REFERENCE-QTHELP_DISPLAY_NAME \"Qt Compressed Help\")\n  set(CPACK_COMPONENT_CMAKE-DEVELOPER-REFERENCE-QTHELP_GROUP DeveloperReference)\n  set(CPACK_COMPONENT_CMAKE-DEVELOPER-REFERENCE-QTHELP_DISABLED TRUE)\n  set(CPACK_IFW_COMPONENT_CMAKE-DEVELOPER-REFERENCE-QTHELP_NAME \"QtHelp\")\n  set(CPACK_IFW_COMPONENT_CMAKE-DEVELOPER-REFERENCE-QTHELP_VERSION\n    \"@CMake_IFW_ROOT_COMPONENT_VERSION@\")\n\nendif()\n\nif(\"${CPACK_GENERATOR}\" STREQUAL \"DragNDrop\")\n  set(CPACK_DMG_BACKGROUND_IMAGE\n      \"@CMake_SOURCE_DIR@/Packaging/CMakeDMGBackground.tif\")\n  set(CPACK_DMG_DS_STORE_SETUP_SCRIPT\n      \"@CMake_SOURCE_DIR@/Packaging/CMakeDMGSetup.scpt\")\nendif()\n\nif(\"${CPACK_GENERATOR}\" STREQUAL \"WIX\")\n  set(CPACK_WIX_VERSION 4)\n  set(CPACK_WIX_BUILD_EXTRA_FLAGS \"\")\n\n  # Reset CPACK_PACKAGE_VERSION to deal with WiX restriction.\n  # But the file names still use the full CMake_VERSION value:\n  set(CPACK_PACKAGE_FILE_NAME\n    \"cmake-@CMake_VERSION@-${CPACK_SYSTEM_NAME}\")\n  set(CPACK_SOURCE_PACKAGE_FILE_NAME\n    \"cmake-@CMake_VERSION@\")\n\n  if(NOT CPACK_WIX_SIZEOF_VOID_P)\n    set(CPACK_WIX_SIZEOF_VOID_P \"@CMAKE_SIZEOF_VOID_P@\")\n  endif()\n\n  set(CPACK_PACKAGE_VERSION\n    \"@CMake_VERSION_MAJOR@.@CMake_VERSION_MINOR@\")\n  # WIX installers require at most a 4 component version number, where\n  # each component is an integer between 0 and 65534 inclusive\n  set(patch \"@CMake_VERSION_PATCH@\")\n  if(patch MATCHES \"^[0-9]+$\" AND patch LESS 65535)\n    set(CPACK_PACKAGE_VERSION \"${CPACK_PACKAGE_VERSION}.${patch}\")\n  endif()\n\n  set(CPACK_WIX_PROPERTY_ARPURLINFOABOUT \"https://cmake.org\")\n\n  set(CPACK_WIX_PROPERTY_ARPCONTACT \"@CPACK_PACKAGE_CONTACT@\")\n\n  set(CPACK_WIX_PROPERTY_ARPCOMMENTS\n    \"CMake is a cross-platform, open-source build system.\"\n  )\n\n  set(CPACK_WIX_PRODUCT_ICON\n    \"@CMake_SOURCE_DIR@/Utilities/Release/CMakeLogo.ico\"\n  )\n\n  set_property(INSTALL \"@CMAKE_DOC_DIR@/html/index.html\" PROPERTY\n    CPACK_START_MENU_SHORTCUTS \"CMake Documentation\"\n  )\n\n  set_property(INSTALL \"cmake.org.html\" PROPERTY\n    CPACK_START_MENU_SHORTCUTS \"CMake Web Site\"\n  )\n\n  list(APPEND CPACK_WIX_BUILD_EXTRA_FLAGS -dcl high)\n\n  set(CPACK_WIX_UI_BANNER\n    \"@CMake_SOURCE_DIR@/Utilities/Release/WiX/ui_banner.jpg\"\n  )\n\n  set(CPACK_WIX_UI_DIALOG\n    \"@CMake_SOURCE_DIR@/Utilities/Release/WiX/ui_dialog.jpg\"\n  )\n\n  set(CPACK_WIX_EXTRA_SOURCES\n    \"@CMake_SOURCE_DIR@/Utilities/Release/WiX/install_dir.wxs\"\n    \"@CMake_SOURCE_DIR@/Utilities/Release/WiX/options.wxs\"\n    \"@CMake_SOURCE_DIR@/Utilities/Release/WiX/options_dlg.wxs\"\n  )\n\n  set(_WIX_CUSTOM_ACTION_ENABLED \"@CMake_BUILD_WIX_CUSTOM_ACTION@\")\n  if(_WIX_CUSTOM_ACTION_ENABLED)\n    list(APPEND CPACK_WIX_EXTRA_SOURCES\n      \"@CMake_SOURCE_DIR@/Utilities/Release/WiX/cmake_nsis_overwrite_dialog.wxs\"\n      )\n    list(APPEND CPACK_WIX_BUILD_EXTRA_FLAGS -d CHECK_NSIS=1)\n\n    set(_WIX_CUSTOM_ACTION_MULTI_CONFIG \"@CMake_BUILD_WIX_CUSTOM_ACTION_MULTI_CONFIG@\")\n    if(_WIX_CUSTOM_ACTION_MULTI_CONFIG)\n      if(CPACK_BUILD_CONFIG)\n        set(_WIX_CUSTOM_ACTION_CONFIG \"${CPACK_BUILD_CONFIG}\")\n      else()\n        set(_WIX_CUSTOM_ACTION_CONFIG \"Release\")\n      endif()\n\n      list(APPEND CPACK_WIX_EXTRA_SOURCES\n        \"@CMake_BINARY_DIR@/Utilities/Release/WiX/custom_action_dll-${_WIX_CUSTOM_ACTION_CONFIG}.wxs\")\n    else()\n      list(APPEND CPACK_WIX_EXTRA_SOURCES\n        \"@CMake_BINARY_DIR@/Utilities/Release/WiX/custom_action_dll.wxs\")\n    endif()\n  endif()\n\n  set(CPACK_WIX_UI_REF \"CMakeUI_InstallDir_$(sys.BUILDARCHSHORT)\")\n\n  set(CPACK_WIX_PATCH_FILE\n    \"@CMake_SOURCE_DIR@/Utilities/Release/WiX/patch_path_env.xml\"\n  )\n\n  set(CPACK_WIX_TEMPLATE\n    \"@CMake_SOURCE_DIR@/Utilities/Release/WiX/WIX.template.in\"\n  )\n\n  set(BUILD_QtDialog \"@BUILD_QtDialog@\")\n\n  if(BUILD_QtDialog)\n    list(APPEND CPACK_WIX_PATCH_FILE\n      \"@CMake_SOURCE_DIR@/Utilities/Release/WiX/patch_desktop_shortcut.xml\"\n      )\n    list(APPEND CPACK_WIX_BUILD_EXTRA_FLAGS -d BUILD_QtDialog=1)\n  endif()\nendif()\n"
        },
        {
          "name": "CMakeGraphVizOptions.cmake",
          "type": "blob",
          "size": 0.1494140625,
          "content": "set(GRAPHVIZ_IGNORE_TARGETS \"tartest;testSystemTools;testRegistry;testProcess;testIOS;testHashSTL;testFail;testCommandLineArguments;xrtest;LIBCURL;foo\")\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 21.4130859375,
          "content": "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n# file Copyright.txt or https://cmake.org/licensing for details.\n\ncmake_minimum_required(VERSION 3.13...3.30 FATAL_ERROR)\nset(CMAKE_USER_MAKE_RULES_OVERRIDE_C ${CMAKE_CURRENT_SOURCE_DIR}/Source/Modules/OverrideC.cmake)\nset(CMAKE_USER_MAKE_RULES_OVERRIDE_CXX ${CMAKE_CURRENT_SOURCE_DIR}/Source/Modules/OverrideCXX.cmake)\n\nproject(CMake)\nunset(CMAKE_USER_MAKE_RULES_OVERRIDE_CXX)\nunset(CMAKE_USER_MAKE_RULES_OVERRIDE_C)\n\n# FIXME: This block should go away after a transition period.\nif(MSVC AND NOT CMAKE_VERSION VERSION_LESS 3.15)\n  # Filter out MSVC runtime library flags that may have come from\n  # the cache of an existing build tree or from scripts.\n  foreach(l IN ITEMS C CXX)\n    foreach(c IN ITEMS DEBUG MINSIZEREL RELEASE RELWITHDEBINFO)\n      string(REGEX REPLACE \"[-/]M[DT]d?( |$)\" \"\" \"CMAKE_${l}_FLAGS_${c}\" \"${CMAKE_${l}_FLAGS_${c}}\")\n    endforeach()\n  endforeach()\nendif()\n\n# Make sure we can find internal find_package modules only used for\n# building CMake and not for shipping externally\nlist(INSERT CMAKE_MODULE_PATH 0 ${CMake_SOURCE_DIR}/Source/Modules)\n\nif(CMAKE_BOOTSTRAP)\n  # Running from bootstrap script.  Set local variable and remove from cache.\n  set(CMAKE_BOOTSTRAP 1)\n  unset(CMAKE_BOOTSTRAP CACHE)\nendif()\n\nif(CMake_TEST_HOST_CMAKE)\n  get_filename_component(CMake_TEST_EXTERNAL_CMAKE \"${CMAKE_COMMAND}\" DIRECTORY)\nendif()\n\nif(NOT CMake_TEST_EXTERNAL_CMAKE)\n  if(CMAKE_SYSTEM_NAME STREQUAL \"HP-UX\")\n    message(FATAL_ERROR\n      \"CMake no longer compiles on HP-UX.  See\\n\"\n      \"  https://gitlab.kitware.com/cmake/cmake/-/issues/17137\\n\"\n      \"Use CMake 3.9 or lower instead.\"\n      )\n  endif()\n\n  set(CMake_BIN_DIR ${CMake_BINARY_DIR}/bin)\nendif()\n\nif(CMake_GUI_DISTRIBUTE_WITH_Qt_LGPL)\n  if(CMake_GUI_DISTRIBUTE_WITH_Qt_LGPL MATCHES \"^3|2\\\\.1$\")\n    set(USE_LGPL \"${CMake_GUI_DISTRIBUTE_WITH_Qt_LGPL}\")\n  else()\n    set(USE_LGPL \"2.1\")\n  endif()\nelse()\n  set(USE_LGPL \"\")\nendif()\n\n# Use most-recent available language dialects with GNU and Clang\nif(NOT DEFINED CMAKE_C_STANDARD AND NOT CMake_NO_C_STANDARD)\n  include(${CMake_SOURCE_DIR}/Source/Checks/cm_c11_thread_local.cmake)\n  if(NOT CMake_C11_THREAD_LOCAL_BROKEN)\n    set(CMAKE_C_STANDARD 11)\n  else()\n    set(CMAKE_C_STANDARD 99)\n  endif()\nendif()\nif(NOT DEFINED CMAKE_CXX_STANDARD AND NOT CMake_NO_CXX_STANDARD)\n  if(CMAKE_CXX_COMPILER_ID STREQUAL SunPro AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.14)\n    set(CMAKE_CXX_STANDARD 98)\n  else()\n    include(${CMake_SOURCE_DIR}/Source/Checks/cm_cxx17_check.cmake)\n    if(NOT CMake_CXX17_BROKEN)\n      set(CMAKE_CXX_STANDARD 17)\n    else()\n      include(${CMake_SOURCE_DIR}/Source/Checks/cm_cxx14_check.cmake)\n      if(NOT CMake_CXX14_BROKEN)\n        set(CMAKE_CXX_STANDARD 14)\n      else()\n        set(CMAKE_CXX_STANDARD 11)\n      endif()\n    endif()\n  endif()\nendif()\nif(NOT CMake_TEST_EXTERNAL_CMAKE)\n  # include special compile flags for some compilers\n  include(CompileFlags.cmake)\n\n  # check for available C++ features\n  include(${CMake_SOURCE_DIR}/Source/Checks/cm_cxx_features.cmake)\n\n  if(NOT CMake_HAVE_CXX_UNIQUE_PTR)\n    message(FATAL_ERROR \"The C++ compiler does not support C++11 (e.g. std::unique_ptr).\")\n  endif()\nendif()\n\n# Inform STL library header wrappers whether to use system versions.\nconfigure_file(Utilities/std/cmSTL.hxx.in Utilities/cmSTL.hxx @ONLY)\n\n# set the internal encoding of CMake to UTF-8\nset(KWSYS_ENCODING_DEFAULT_CODEPAGE CP_UTF8)\n\n# option to use COMPONENT with install command\noption(CMake_INSTALL_COMPONENTS \"Using components when installing\" OFF)\nmark_as_advanced(CMake_INSTALL_COMPONENTS)\nmacro(CMake_OPTIONAL_COMPONENT NAME)\n  if(CMake_INSTALL_COMPONENTS)\n    set(COMPONENT COMPONENT ${NAME})\n  else()\n    set(COMPONENT)\n  endif()\nendmacro()\n\n# option to disable installing 3rd-party dependencies\noption(CMake_INSTALL_DEPENDENCIES\n  \"Whether to install 3rd-party runtime dependencies\" OFF)\nmark_as_advanced(CMake_INSTALL_DEPENDENCIES)\n\n# option to build reference for CMake developers\noption(CMake_BUILD_DEVELOPER_REFERENCE\n  \"Build CMake Developer Reference\" OFF)\nmark_as_advanced(CMake_BUILD_DEVELOPER_REFERENCE)\n\n# option to build using interprocedural optimizations (IPO/LTO)\noption(CMake_BUILD_LTO \"Compile CMake with link-time optimization if supported\" OFF)\nif(CMake_BUILD_LTO)\n  include(CheckIPOSupported)\n  check_ipo_supported(RESULT HAVE_IPO)\n  if(HAVE_IPO)\n    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)\n  endif()\nendif()\n\noption(CMake_BUILD_PCH \"Compile CMake with precompiled headers\" OFF)\n\n# Check whether to build support for the debugger mode.\nif(NOT CMake_TEST_EXTERNAL_CMAKE)\n  if(NOT DEFINED CMake_ENABLE_DEBUGGER)\n    # The debugger uses cppdap, which does not compile everywhere.\n    if(CMAKE_SYSTEM_NAME MATCHES \"Windows|Darwin|Linux|BSD|DragonFly|CYGWIN|MSYS\"\n        AND NOT (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 19.16)\n        AND NOT (CMAKE_CXX_COMPILER_ID STREQUAL \"XLClang\" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 16.1)\n        AND NOT (CMAKE_CXX_COMPILER_ID STREQUAL \"LCC\" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 1.23)\n        )\n      set(CMake_ENABLE_DEBUGGER 1)\n    else()\n      set(CMake_ENABLE_DEBUGGER 0)\n    endif()\n  endif()\nelse()\n  set(CMake_ENABLE_DEBUGGER 0)\nendif()\n\n#-----------------------------------------------------------------------\n# a macro to deal with system libraries, implemented as a macro\n# simply to improve readability of the main script\n#-----------------------------------------------------------------------\nmacro(CMAKE_HANDLE_SYSTEM_LIBRARIES)\n  include(CMakeDependentOption)\n\n  # Allow the user to enable/disable all system utility library options by\n  # defining CMAKE_USE_SYSTEM_LIBRARIES or CMAKE_USE_SYSTEM_LIBRARY_${util}.\n  set(UTILITIES BZIP2 CPPDAP CURL EXPAT FORM JSONCPP LIBARCHIVE LIBLZMA LIBRHASH LIBUV NGHTTP2 ZLIB ZSTD)\n  foreach(util IN LISTS UTILITIES)\n    if(NOT DEFINED CMAKE_USE_SYSTEM_LIBRARY_${util}\n        AND DEFINED CMAKE_USE_SYSTEM_LIBRARIES)\n      set(CMAKE_USE_SYSTEM_LIBRARY_${util} \"${CMAKE_USE_SYSTEM_LIBRARIES}\")\n    endif()\n    if(DEFINED CMAKE_USE_SYSTEM_LIBRARY_${util})\n      if(CMAKE_USE_SYSTEM_LIBRARY_${util})\n        set(CMAKE_USE_SYSTEM_LIBRARY_${util} ON)\n      else()\n        set(CMAKE_USE_SYSTEM_LIBRARY_${util} OFF)\n      endif()\n      if(CMAKE_BOOTSTRAP)\n        unset(CMAKE_USE_SYSTEM_LIBRARY_${util} CACHE)\n      endif()\n      string(TOLOWER \"${util}\" lutil)\n      set(CMAKE_USE_SYSTEM_${util} \"${CMAKE_USE_SYSTEM_LIBRARY_${util}}\"\n        CACHE BOOL \"Use system-installed ${lutil}\" FORCE)\n    elseif(util STREQUAL \"CURL\" AND APPLE)\n      # macOS provides a curl with backends configured by Apple.\n      set(CMAKE_USE_SYSTEM_LIBRARY_${util} ON)\n    else()\n      set(CMAKE_USE_SYSTEM_LIBRARY_${util} OFF)\n    endif()\n  endforeach()\n  if(CMAKE_BOOTSTRAP)\n    unset(CMAKE_USE_SYSTEM_LIBRARIES CACHE)\n  endif()\n\n  # Optionally use system utility libraries.\n  option(CMAKE_USE_SYSTEM_LIBARCHIVE \"Use system-installed libarchive\" \"${CMAKE_USE_SYSTEM_LIBRARY_LIBARCHIVE}\")\n  if(CMake_ENABLE_DEBUGGER)\n    option(CMAKE_USE_SYSTEM_CPPDAP \"Use system-installed cppdap\" \"${CMAKE_USE_SYSTEM_LIBRARY_CPPDAP}\")\n  endif()\n  option(CMAKE_USE_SYSTEM_CURL \"Use system-installed curl\" \"${CMAKE_USE_SYSTEM_LIBRARY_CURL}\")\n  option(CMAKE_USE_SYSTEM_EXPAT \"Use system-installed expat\" \"${CMAKE_USE_SYSTEM_LIBRARY_EXPAT}\")\n  CMAKE_DEPENDENT_OPTION(CMAKE_USE_SYSTEM_ZLIB \"Use system-installed zlib\"\n    \"${CMAKE_USE_SYSTEM_LIBRARY_ZLIB}\" \"NOT CMAKE_USE_SYSTEM_LIBARCHIVE;NOT CMAKE_USE_SYSTEM_CURL\" ON)\n  CMAKE_DEPENDENT_OPTION(CMAKE_USE_SYSTEM_BZIP2 \"Use system-installed bzip2\"\n    \"${CMAKE_USE_SYSTEM_LIBRARY_BZIP2}\" \"NOT CMAKE_USE_SYSTEM_LIBARCHIVE\" ON)\n  CMAKE_DEPENDENT_OPTION(CMAKE_USE_SYSTEM_ZSTD \"Use system-installed zstd\"\n    \"${CMAKE_USE_SYSTEM_LIBRARY_ZSTD}\" \"NOT CMAKE_USE_SYSTEM_LIBARCHIVE\" ON)\n  CMAKE_DEPENDENT_OPTION(CMAKE_USE_SYSTEM_LIBLZMA \"Use system-installed liblzma\"\n    \"${CMAKE_USE_SYSTEM_LIBRARY_LIBLZMA}\" \"NOT CMAKE_USE_SYSTEM_LIBARCHIVE\" ON)\n  CMAKE_DEPENDENT_OPTION(CMAKE_USE_SYSTEM_NGHTTP2 \"Use system-installed nghttp2\"\n    \"${CMAKE_USE_SYSTEM_LIBRARY_NGHTTP2}\" \"NOT CMAKE_USE_SYSTEM_CURL\" ON)\n  option(CMAKE_USE_SYSTEM_FORM \"Use system-installed libform\" \"${CMAKE_USE_SYSTEM_LIBRARY_FORM}\")\n  CMAKE_DEPENDENT_OPTION(CMAKE_USE_SYSTEM_JSONCPP \"Use system-installed jsoncpp\"\n    \"${CMAKE_USE_SYSTEM_LIBRARY_JSONCPP}\" \"NOT CMAKE_USE_SYSTEM_CPPDAP\" ON)\n  option(CMAKE_USE_SYSTEM_LIBRHASH \"Use system-installed librhash\" \"${CMAKE_USE_SYSTEM_LIBRARY_LIBRHASH}\")\n  option(CMAKE_USE_SYSTEM_LIBUV \"Use system-installed libuv\" \"${CMAKE_USE_SYSTEM_LIBRARY_LIBUV}\")\n\n  # For now use system KWIML only if explicitly requested rather\n  # than activating via the general system libs options.\n  option(CMAKE_USE_SYSTEM_KWIML \"Use system-installed KWIML\" OFF)\n  mark_as_advanced(CMAKE_USE_SYSTEM_KWIML)\n\n  # Mention to the user what system libraries are being used.\n  if(CMAKE_USE_SYSTEM_CURL)\n    # Avoid messaging about curl-only dependencies.\n    list(REMOVE_ITEM UTILITIES NGHTTP2)\n  endif()\n  foreach(util IN LISTS UTILITIES ITEMS KWIML)\n    if(CMAKE_USE_SYSTEM_${util})\n      message(STATUS \"Using system-installed ${util}\")\n    endif()\n  endforeach()\n\n  # Inform utility library header wrappers whether to use system versions.\n  configure_file(Utilities/cmThirdParty.h.in Utilities/cmThirdParty.h @ONLY)\n\nendmacro()\n\n#-----------------------------------------------------------------------\n# a macro to determine the generator and ctest executable to use\n# for testing. Simply to improve readability of the main script.\n#-----------------------------------------------------------------------\nmacro(CMAKE_SETUP_TESTING)\n  if(BUILD_TESTING)\n    set(CMAKE_TEST_SYSTEM_LIBRARIES 0)\n    foreach(util IN ITEMS CURL EXPAT ZLIB)\n      if(CMAKE_USE_SYSTEM_${util})\n        set(CMAKE_TEST_SYSTEM_LIBRARIES 1)\n      endif()\n    endforeach()\n\n    # This variable is set by cmake, however to\n    # test cmake we want to make sure that\n    # the ctest from this cmake is used for testing\n    # and not the ctest from the cmake building and testing\n    # cmake.\n    if(CMake_TEST_EXTERNAL_CMAKE)\n      set(CMAKE_CTEST_COMMAND \"${CMake_TEST_EXTERNAL_CMAKE}/ctest\")\n      set(CMAKE_CMAKE_COMMAND \"${CMake_TEST_EXTERNAL_CMAKE}/cmake\")\n      set(CMAKE_CPACK_COMMAND \"${CMake_TEST_EXTERNAL_CMAKE}/cpack\")\n      foreach(exe IN ITEMS cmake ctest cpack)\n        add_executable(${exe} IMPORTED)\n        set_property(TARGET ${exe} PROPERTY IMPORTED_LOCATION ${CMake_TEST_EXTERNAL_CMAKE}/${exe})\n      endforeach()\n    else()\n      set(CMAKE_CTEST_COMMAND \"${CMake_BIN_DIR}/ctest\")\n      set(CMAKE_CMAKE_COMMAND \"${CMake_BIN_DIR}/cmake\")\n      set(CMAKE_CPACK_COMMAND \"${CMake_BIN_DIR}/cpack\")\n    endif()\n  endif()\n\n  # configure some files for testing\n  configure_file(Tests/.NoDartCoverage Tests/.NoDartCoverage)\n  configure_file(CTestCustom.cmake.in CTestCustom.cmake @ONLY)\nendmacro()\n\n\n# Provide a way for Visual Studio Express users to turn OFF the new FOLDER\n# organization feature. Default to ON for non-Express users. Express users must\n# explicitly turn off this option to build CMake in the Express IDE...\n#\noption(CMAKE_USE_FOLDERS \"Enable folder grouping of projects in IDEs.\" ON)\nmark_as_advanced(CMAKE_USE_FOLDERS)\n\n\noption(CMake_RUN_CLANG_TIDY \"Run clang-tidy with the compiler.\" OFF)\nif(CMake_RUN_CLANG_TIDY)\n  if(CMake_SOURCE_DIR STREQUAL CMake_BINARY_DIR)\n    message(FATAL_ERROR \"CMake_RUN_CLANG_TIDY requires an out-of-source build!\")\n  endif()\n  find_program(CLANG_TIDY_COMMAND NAMES clang-tidy)\n  if(NOT CLANG_TIDY_COMMAND)\n    message(FATAL_ERROR \"CMake_RUN_CLANG_TIDY is ON but clang-tidy is not found!\")\n  endif()\n  set(CMAKE_CXX_CLANG_TIDY \"${CLANG_TIDY_COMMAND}\")\n\n  option(CMake_USE_CLANG_TIDY_MODULE \"Use CMake's clang-tidy module.\" OFF)\n  if(CMake_USE_CLANG_TIDY_MODULE)\n    find_library(CMake_CLANG_TIDY_MODULE NAMES cmake-clang-tidy-module DOC \"Location of the clang-tidy module\")\n    if(NOT CMake_CLANG_TIDY_MODULE)\n      message(FATAL_ERROR \"CMake_USE_CLANG_TIDY_MODULE is ON but cmake-clang-tidy-module is not found!\")\n    endif()\n    list(APPEND CMAKE_CXX_CLANG_TIDY \"--load=${CMake_CLANG_TIDY_MODULE}\")\n    set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS \"${CMake_CLANG_TIDY_MODULE}\")\n  endif()\n\n  set(CMake_CLANG_TIDY_EXPORT_FIXES_DIR \"\" CACHE PATH \"Directory to put clang-tidy fix files in.\")\n  mark_as_advanced(CMake_CLANG_TIDY_EXPORT_FIXES_DIR)\n  if(CMake_CLANG_TIDY_EXPORT_FIXES_DIR)\n    if(NOT IS_ABSOLUTE \"${CMake_CLANG_TIDY_EXPORT_FIXES_DIR}\")\n      message(FATAL_ERROR \"CMake_CLANG_TIDY_EXPORT_FIXES_DIR must be an absolute path!\")\n    endif()\n    set(CMAKE_CXX_CLANG_TIDY_EXPORT_FIXES_DIR \"${CMake_CLANG_TIDY_EXPORT_FIXES_DIR}\")\n  endif()\n\n  # Create a preprocessor definition that depends on .clang-tidy content so\n  # the compile command will change when .clang-tidy changes.  This ensures\n  # that a subsequent build re-runs clang-tidy on all sources even if they\n  # do not otherwise need to be recompiled.  Nothing actually uses this\n  # definition.  We add it to targets on which we run clang-tidy just to\n  # get the build dependency on the .clang-tidy file.\n  file(SHA1 ${CMAKE_CURRENT_SOURCE_DIR}/.clang-tidy clang_tidy_sha1)\n  set(CLANG_TIDY_DEFINITIONS \"CLANG_TIDY_SHA1=${clang_tidy_sha1}\")\n  unset(clang_tidy_sha1)\n  if(CMake_USE_CLANG_TIDY_MODULE)\n    file(SHA1 \"${CMake_CLANG_TIDY_MODULE}\" clang_tidy_module_sha1)\n    list(APPEND CLANG_TIDY_DEFINITIONS \"CLANG_TIDY_MODULE_SHA1=${clang_tidy_module_sha1}\")\n    unset(clang_tidy_module_sha1)\n  endif()\n\nendif()\nconfigure_file(.clang-tidy .clang-tidy COPYONLY)\n\n\noption(CMake_RUN_IWYU \"Run include-what-you-use with the compiler.\" OFF)\nif(CMake_RUN_IWYU)\n  if(CMake_BUILD_PCH)\n    message(FATAL_ERROR \"CMake_RUN_IWYU and CMake_BUILD_PCH are ON, but they are incompatible!\")\n  endif()\n  find_program(IWYU_COMMAND NAMES include-what-you-use iwyu)\n  if(NOT IWYU_COMMAND)\n    message(FATAL_ERROR \"CMake_RUN_IWYU is ON but include-what-you-use is not found!\")\n  endif()\n  set(CMAKE_CXX_INCLUDE_WHAT_YOU_USE\n    \"${IWYU_COMMAND};-Xiwyu;--mapping_file=${CMake_SOURCE_DIR}/Utilities/IWYU/mapping.imp;-w\")\n  option(CMake_IWYU_VERBOSE \"Run include-what-you-use in verbose mode\" OFF)\n  if (CMake_IWYU_VERBOSE)\n    list(APPEND CMAKE_CXX_INCLUDE_WHAT_YOU_USE\n      -Xiwyu -v7)\n  endif ()\n  list(APPEND CMAKE_CXX_INCLUDE_WHAT_YOU_USE ${CMake_IWYU_OPTIONS})\nendif()\n\n\n#-----------------------------------------------------------------------\n# a macro that only sets the FOLDER target property if it's\n# \"appropriate\"\n#-----------------------------------------------------------------------\nmacro(CMAKE_SET_TARGET_FOLDER tgt folder)\n  if(CMAKE_USE_FOLDERS)\n    set_property(GLOBAL PROPERTY USE_FOLDERS ON)\n    if(MSVC AND TARGET ${tgt})\n      set_property(TARGET \"${tgt}\" PROPERTY FOLDER \"${folder}\")\n    endif()\n  else()\n    set_property(GLOBAL PROPERTY USE_FOLDERS OFF)\n  endif()\nendmacro()\n\n#-----------------------------------------------------------------------\nif(NOT CMake_TEST_EXTERNAL_CMAKE)\n  if(CMAKE_CXX_PLATFORM_ID MATCHES \"OpenBSD\")\n    execute_process(COMMAND ${CMAKE_CXX_COMPILER}\n      ${CMAKE_CXX_COMPILER_ARG1} -dumpversion\n      OUTPUT_VARIABLE _GXX_VERSION\n    )\n    string(REGEX REPLACE \"([0-9])\\\\.([0-9])(\\\\.[0-9])?\" \"\\\\1\\\\2\"\n      _GXX_VERSION_SHORT ${_GXX_VERSION})\n    if(_GXX_VERSION_SHORT EQUAL 33)\n      message(FATAL_ERROR\n        \"GXX 3.3 on OpenBSD is known to cause CPack to Crash.\\n\"\n        \"Please use GXX 4.2 or greater to build CMake on OpenBSD\\n\"\n        \"${CMAKE_CXX_COMPILER} version is: ${_GXX_VERSION}\")\n    endif()\n  endif()\nendif()\n\n#-----------------------------------------------------------------------\n# The main section of the CMakeLists file\n#\n#-----------------------------------------------------------------------\ninclude(Source/CMakeVersion.cmake)\n\ninclude(CTest)\n\n# Set up test-time configuration.\nset_directory_properties(PROPERTIES\n  TEST_INCLUDE_FILE \"${CMake_BINARY_DIR}/Tests/EnforceConfig.cmake\")\n\nif(NOT CMake_TEST_EXTERNAL_CMAKE)\n  # where to write the resulting executables and libraries\n  set(BUILD_SHARED_LIBS OFF)\n  set(EXECUTABLE_OUTPUT_PATH \"\" CACHE INTERNAL \"No configurable exe dir.\")\n  set(LIBRARY_OUTPUT_PATH \"\" CACHE INTERNAL\n    \"Where to put the libraries for CMake\")\n\n  # Load install destinations.\n  include(Source/CMakeInstallDestinations.cmake)\n\n  if(BUILD_TESTING)\n    include(${CMake_SOURCE_DIR}/Tests/CMakeInstall.cmake)\n  endif()\n\n  # Checks for cmSystemTools.\n  if(WIN32)\n    set(HAVE_UNSETENV 0)\n    set(HAVE_ENVIRON_NOT_REQUIRE_PROTOTYPE 1)\n  else()\n    include(CheckSymbolExists)\n    CHECK_SYMBOL_EXISTS(unsetenv \"stdlib.h\" HAVE_UNSETENV)\n    CHECK_SYMBOL_EXISTS(environ \"stdlib.h\" HAVE_ENVIRON_NOT_REQUIRE_PROTOTYPE)\n  endif()\nendif()\n\n# CMAKE_TESTS_CDASH_SERVER: CDash server used by CMake/Tests.\n#\n# If not defined or \"\", this variable defaults to the server at\n# \"http://open.cdash.org\".\n#\n# If set explicitly to \"NOTFOUND\", curl tests and ctest tests that use\n# the network are skipped.\n#\n# If set to something starting with \"http://localhost/\", the CDash is\n# expected to be an instance of CDash used for CDash testing, pointing\n# to a cdash4simpletest database. In these cases, the CDash dashboards\n# should be run first.\n#\nif(\"x${CMAKE_TESTS_CDASH_SERVER}\" STREQUAL \"x\" AND NOT CMake_TEST_NO_NETWORK)\n  set(CMAKE_TESTS_CDASH_SERVER \"http://open.cdash.org\")\nendif()\n\nif(CMake_TEST_EXTERNAL_CMAKE)\n  set(KWIML_TEST_ENABLE 1)\n  add_subdirectory(Utilities/KWIML)\nendif()\n\nif(NOT CMake_TEST_EXTERNAL_CMAKE)\n  find_package(Threads)\n  # build the utilities\n  include(CMakeBuildUtilities)\n\n  if(BUILD_QtDialog)\n    if(APPLE)\n      set(CMAKE_BUNDLE_VERSION\n        \"${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}.${CMake_VERSION_PATCH}\")\n      set(CMAKE_BUNDLE_LOCATION \"${CMAKE_INSTALL_PREFIX}\")\n      # make sure CMAKE_INSTALL_PREFIX ends in /\n      if(NOT CMAKE_INSTALL_PREFIX MATCHES \"/$\")\n        string(APPEND CMAKE_INSTALL_PREFIX \"/\")\n      endif()\n      string(APPEND CMAKE_INSTALL_PREFIX \"CMake.app/Contents\")\n    endif()\n  endif()\n\n  if(UNIX)\n    # Install executables with the RPATH set for libraries outside the build tree.\n    # This is also suitable for binaries in the build tree.  Avoid re-link on install.\n    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH ON CACHE BOOL \"Install with RPATH set to find custom-built libraries.\")\n    set(CMAKE_BUILD_WITH_INSTALL_RPATH ON CACHE BOOL \"Build with RPATH set to match install-tree RPATH.\")\n    mark_as_advanced(CMAKE_INSTALL_RPATH_USE_LINK_PATH CMAKE_BUILD_WITH_INSTALL_RPATH)\n  endif()\n\n  # add the uninstall support\n  configure_file(cmake_uninstall.cmake.in cmake_uninstall.cmake @ONLY)\n  add_custom_target(uninstall\n    \"${CMAKE_COMMAND}\" -P \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\")\n\n  include(CMakeCPack.cmake)\n\nendif()\n\n# setup some Testing support (a macro defined in this file)\nCMAKE_SETUP_TESTING()\n\nif(NOT CMake_TEST_EXTERNAL_CMAKE)\n  if(NOT CMake_VERSION_IS_RELEASE)\n    if((CMAKE_C_COMPILER_ID STREQUAL \"GNU\" AND\n        NOT \"${CMAKE_C_COMPILER_VERSION}\" VERSION_LESS 4.2) OR\n       (CMAKE_C_COMPILER_ID STREQUAL \"Clang\" AND\n        NOT \"${CMAKE_C_COMPILER_VERSION}\" VERSION_LESS 3.0 AND\n        NOT \"x${CMAKE_C_SIMULATE_ID}\" STREQUAL \"xMSVC\") OR\n       CMAKE_C_COMPILER_ID STREQUAL \"AppleClang\" OR\n       CMAKE_C_COMPILER_ID STREQUAL \"LCC\")\n      set(C_FLAGS_LIST -Wcast-align -Werror-implicit-function-declaration -Wchar-subscripts\n                       -Wall -W -Wpointer-arith -Wwrite-strings -Wformat-security\n                       -Wmissing-format-attribute -fno-common -Wundef\n      )\n      set(CXX_FLAGS_LIST -Wnon-virtual-dtor -Wcast-align -Wchar-subscripts -Wall -W\n                         -Wshadow -Wpointer-arith -Wformat-security -Wundef\n      )\n\n      foreach(FLAG_LANG IN ITEMS C CXX)\n        foreach(FLAG IN LISTS ${FLAG_LANG}_FLAGS_LIST)\n          if(NOT \" ${CMAKE_${FLAG_LANG}_FLAGS} \" MATCHES \" ${FLAG} \")\n            string(APPEND CMAKE_${FLAG_LANG}_FLAGS \" ${FLAG}\")\n          endif()\n        endforeach()\n      endforeach()\n\n      unset(C_FLAGS_LIST)\n      unset(CXX_FLAGS_LIST)\n    endif()\n  endif()\n\n  # build the remaining subdirectories\n  add_subdirectory(Source)\n  add_subdirectory(Utilities)\nendif()\n\nadd_subdirectory(Tests)\n\nif(NOT CMake_TEST_EXTERNAL_CMAKE)\n  if(BUILD_TESTING)\n    CMAKE_SET_TARGET_FOLDER(CMakeLibTests \"Tests\")\n  endif()\n  if(TARGET documentation)\n    CMAKE_SET_TARGET_FOLDER(documentation \"Documentation\")\n  endif()\nendif()\n\nif(BUILD_TESTING)\n  add_test(SystemInformationNew \"${CMAKE_CMAKE_COMMAND}\"\n    --system-information  -G \"${CMAKE_GENERATOR}\"\n  )\nendif()\n\nif(NOT CMake_TEST_EXTERNAL_CMAKE)\n  # Install license file as it requires.\n  install(FILES Copyright.txt DESTINATION ${CMAKE_DOC_DIR})\n\n  # Install script directories.\n  install(\n    DIRECTORY Help Modules Templates\n    DESTINATION ${CMAKE_DATA_DIR}\n    FILE_PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ\n    DIRECTORY_PERMISSIONS OWNER_READ OWNER_EXECUTE OWNER_WRITE\n                          GROUP_READ GROUP_EXECUTE\n                          WORLD_READ WORLD_EXECUTE\n    PATTERN \"*.sh*\" PERMISSIONS OWNER_READ OWNER_EXECUTE OWNER_WRITE\n                                GROUP_READ GROUP_EXECUTE\n                                WORLD_READ WORLD_EXECUTE\n    REGEX \"/(ExportImportList|cpp)$\"\n      PERMISSIONS OWNER_READ OWNER_EXECUTE OWNER_WRITE\n                  GROUP_READ GROUP_EXECUTE\n                  WORLD_READ WORLD_EXECUTE\n    REGEX \"Help/(dev|guide)($|/)\" EXCLUDE\n    )\n\n  # Install auxiliary files integrating with other tools.\n  add_subdirectory(Auxiliary)\n\n  # Optionally sign installed binaries.\n  if(CMake_INSTALL_SIGNTOOL)\n    configure_file(Source/CMakeInstallSignTool.cmake.in Source/CMakeInstallSignTool.cmake @ONLY)\n    install(SCRIPT ${CMAKE_CURRENT_BINARY_DIR}/Source/CMakeInstallSignTool.cmake)\n  endif()\nendif()\n"
        },
        {
          "name": "CMakeLogo.gif",
          "type": "blob",
          "size": 4.3759765625,
          "content": null
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 3.169921875,
          "content": "Contributing to CMake\n*********************\n\nThe following summarizes the process for contributing changes.\nSee documentation on `CMake Development`_ for more information.\n\n.. _`CMake Development`: Help/dev/README.rst\n\nCommunity\n=========\n\nCMake is maintained and supported by `Kitware`_ and developed in\ncollaboration with a productive community of contributors.\nPlease post to the ``Development`` category of the `CMake Forum`_ to raise\ndiscussion of development topics.\n\n.. _`Kitware`: https://www.kitware.com/cmake\n.. _`CMake Forum`: https://discourse.cmake.org\n\nPatches\n=======\n\nCMake uses `Kitware's GitLab Instance`_ to manage development and code review.\nTo contribute patches:\n\n#. Fork the upstream `CMake Repository`_ into a personal account.\n#. Run `Utilities/SetupForDevelopment.sh`_ for local git configuration.\n#. See `Building CMake`_ for building CMake locally.\n#. See the `CMake Source Code Guide`_ for coding guidelines\n   and the `CMake Testing Guide`_ for testing instructions.\n#. Create a topic branch named suitably for your work.\n   Base all new work on the upstream ``master`` branch.\n   Base work on the upstream ``release`` branch only if it fixes a\n   regression or bug in a feature new to that release.\n   If in doubt, prefer ``master``.  Reviewers may simply ask for\n   a rebase if deemed appropriate in particular cases.\n#. Create commits making incremental, distinct, logically complete changes\n   with appropriate `commit messages`_.\n#. Push the topic branch to a personal repository fork on GitLab.\n#. Create a GitLab Merge Request targeting the upstream ``master`` branch\n   (even if the change is intended for merge to the ``release`` branch).\n   Check the box labeled \"Allow commits from members who can merge to the\n   target branch\".  This will allow maintainers to make minor edits on your\n   behalf.\n\nThe merge request will enter the `CMake Review Process`_ for consideration.\n\n.. _`Kitware's GitLab Instance`: https://gitlab.kitware.com\n.. _`CMake Repository`: https://gitlab.kitware.com/cmake/cmake\n.. _`Utilities/SetupForDevelopment.sh`: Utilities/SetupForDevelopment.sh\n.. _`Building CMake`: README.rst#building-cmake\n.. _`CMake Source Code Guide`: Help/dev/source.rst\n.. _`CMake Testing Guide`: Help/dev/testing.rst\n.. _`commit messages`: Help/dev/review.rst#commit-messages\n.. _`CMake Review Process`: Help/dev/review.rst\n\nCMake Dashboard Client\n======================\n\nThe *integration testing* step of the `CMake Review Process`_ uses a set of\ntesting machines that follow an integration branch on their own schedule to\ndrive testing and submit results to the `CMake CDash Page`_.  Anyone is\nwelcome to provide testing machines in order to help keep support for their\nplatforms working.\n\nSee documentation on `CMake Integration Testing`_ for more information.\n\n.. _`CMake CDash Page`: https://open.cdash.org/index.php?project=CMake\n.. _`CMake Integration Testing`: Help/dev/integration-testing.rst\n\nLicense\n=======\n\nWe do not require any formal copyright assignment or contributor license\nagreement.  Any contributions intentionally sent upstream are presumed\nto be offered under terms of the OSI-approved BSD 3-clause License.\nSee `Copyright.txt`_ for details.\n\n.. _`Copyright.txt`: Copyright.txt\n"
        },
        {
          "name": "CTestConfig.cmake",
          "type": "blob",
          "size": 0.552734375,
          "content": "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n# file Copyright.txt or https://cmake.org/licensing for details.\n\n# If changing this file, also update Utilities/Sphinx/CTestConfig.cmake\n\nset(CTEST_PROJECT_NAME \"CMake\")\nset(CTEST_NIGHTLY_START_TIME \"1:00:00 UTC\")\n\nif(NOT CTEST_DROP_METHOD STREQUAL \"https\")\n  set(CTEST_DROP_METHOD \"http\")\nendif()\nset(CTEST_DROP_SITE \"open.cdash.org\")\nset(CTEST_DROP_LOCATION \"/submit.php?project=CMake\")\nset(CTEST_DROP_SITE_CDASH TRUE)\nset(CTEST_CDASH_VERSION \"1.6\")\nset(CTEST_CDASH_QUERY_VERSION TRUE)\n"
        },
        {
          "name": "CTestCustom.cmake.in",
          "type": "blob",
          "size": 7.65625,
          "content": "list(APPEND CTEST_CUSTOM_ERROR_MATCH\n  \"ERROR:\")\n\nlist(APPEND CTEST_CUSTOM_WARNING_EXCEPTION\n  \"warning: cast from 'char\\\\*' to 'cmCursesWidget\\\\*' increases required alignment of target type\" # Occurs when using Solaris's system libform\n  \"xtree.[0-9]+. : warning C4702: unreachable code\"\n  \"warning LNK4221\"\n  \"warning LNK4204\" # Occurs by race condition with objects in small libs\n  \"variable .var_args[2]*. is used before its value is set\"\n  \"warning: variable .__d[01]. was set but never used\" # FD_ZERO on NVHPC\n  \"jobserver unavailable\"\n  \"warning: \\\\(Long double usage is reported only once for each file\"\n  \"warning: To disable this warning use\"\n  \"could not be inlined\"\n  \"libcm(curl|expat).*has no symbols\"\n  \"cm(curl|expat).build/[^ ]*.o has no symbols\"\n  \"not sorted slower link editing will result\"\n  \"stl_deque.h:479\"\n  \"Utilities.cmzlib.\"\n  \"Utilities.cmzstd.\"\n  \"Utilities.cmbzip2.\"\n  \"Source.CTest.Curl\"\n  \"Source.CursesDialog.form\"\n  \"Utilities.cmcurl\"\n  \"Utilities.cmexpat.\"\n  \"Utilities.cmlibarchive\"\n  \"warning: declaration of .single. shadows a global declaration\"\n  \"/usr/include.*(warning|note).*shadowed declaration is here\"\n  \"/usr/bin/ld.*warning.*-..*directory.name.*bin.*does not exist\"\n  \"Redeclaration of .send..... with a different storage class specifier\"\n  \"is not used for resolving any symbol\"\n  \"Clock skew detected\"\n  \"remark\\\\(1209\"\n  \"remark: .*LOOP WAS VECTORIZED\"\n  \"warning .980: wrong number of actual arguments to intrinsic function .std::basic_\"\n  \"LINK : warning LNK4089: all references to.*ADVAPI32.dll.*discarded by /OPT:REF\"\n  \"LINK : warning LNK4089: all references to.*CRYPT32.dll.*discarded by /OPT:REF\"\n  \"LINK : warning LNK4089: all references to.*PSAPI.DLL.*discarded by /OPT:REF\"\n  \"LINK : warning LNK4089: all references to.*RPCRT4.dll.*discarded by /OPT:REF\"\n  \"LINK : warning LNK4089: all references to.*SHELL32.dll.*discarded by /OPT:REF\"\n  \"LINK : warning LNK4089: all references to.*USER32.dll.*discarded by /OPT:REF\"\n  \"LINK : warning LNK4089: all references to.*ole32.dll.*discarded by /OPT:REF\"\n  \"Warning.*: .*/Utilities/KWIML/test/test_int_format.h.* # Redundant preprocessing concatenation\"\n  \"Warning: library was too large for page size.*\"\n  \"Warning: public.*_archive_.*in module.*archive_*clashes with prior module.*archive_.*\"\n  \"Warning: public.*BZ2_bz.*in module.*bzlib.*clashes with prior module.*bzlib.*\"\n  \"Warning: public.*_archive.*clashes with prior module.*\"\n  \"Warning: LINN32: Last line.*is less.*\"\n  \"Warning: Olimit was exceeded on function.*\"\n  \"Warning: To override Olimit for all functions in file.*\"\n  \"Warning: Function .* can throw only the exceptions thrown by the function .* it overrides\\\\.\"\n  \"WarningMessagesDialog\\\\.cxx\"\n  \"warning.*directory name.*CMake-Xcode.*/bin/.*does not exist.*\"\n  \"stl_deque.h:1051\"\n  \"Tests/CMakeLib/testCTestResourceSpec.cxx:.*warning: missing initializer for member.*cmCTestResourceSpec::.*\" # GCC 4.8 disagrees with later compilers on C++11 initializer list conversion\n  \"(Lexer|Parser).*warning.*conversion.*may (alter its value|change the sign)\"\n  \"(Lexer|Parser).*warning.*(statement is unreachable|will never be executed)\"\n  \"(Lexer|Parser).*warning.*variable.*was set but never used\"\n  \"LexerParser.*warning.*empty expression statement has no effect; remove unnecessary\"\n  \"PGC-W-0095-Type cast required for this conversion.*ProcessUNIX.c\"\n  \"[Qq]t([Cc]ore|[Gg]ui|[Ww]idgets).*warning.*conversion.*may alter its value\"\n  \"warning:.*is.*very unsafe.*consider using.*\"\n  \"warning:.*is.*misused, please use.*\"\n  \"cmake.version.manifest.*manifest authoring warning.*Unrecognized Element\"\n  \"cc-3968 CC: WARNING File.*\" # \"implicit\" truncation by static_cast\n  \"ld: warning: directory not found for option .-(F|L)\"\n  \"ld: warning .*/libgcc.a archive's cputype\"\n  \"ld: warning: ignoring file .*/libgcc.a, file was built for archive which is not the architecture being linked\"\n  \"ld: warning: in .*/libgcc.a, file is not of required architecture\"\n  \"ld: warning: symbol .(deflate|inflate)_copyright. has differing sizes\" # system libz and QtCore disagree\n  \"warning.*This version of Mac OS X is unsupported\"\n  \"clang.*: warning: argument unused during compilation: .-g\"\n  \"note: in expansion of macro\" # diagnostic context note\n  \"note: expanded from macro\" # diagnostic context note\n  \"cm(StringCommand|CTestTestHandler)\\\\.cxx.*warning.*rand.*may return deterministic values\"\n  \"cm(StringCommand|CTestTestHandler)\\\\.cxx.*warning.*rand.*isn.*t random\" # we do not do crypto\n  \"cm(StringCommand|CTestTestHandler)\\\\.cxx.*warning.*srand.*seed choices are.*poor\" # we do not do crypto\n  \"cmFindPackageCommand.cxx.*: warning #177-D: parameter .* was declared but never referenced\"\n  \"IPA warning: function.*multiply defined in\"\n  \"LICENSE WARNING\" # PGI license expiry.  Not useful in nightly testing.\n\n  # Ignore compiler summary warning, assuming prior text has matched some\n  # other warning expression:\n  \"[0-9,]+ warnings? generated.\" # Clang\n  \"compilation completed with warnings\" # PGI\n  \"[0-9]+ Warning\\\\(s\\\\) detected\" # SunPro\n\n  # Ignore false positive on `cm::optional` usage from GCC\n  \"cmFileCommand.cxx:[0-9]*:[0-9]*: warning: '\\\\*\\\\(\\\\(void\\\\*\\\\)& tlsVerifyOpt \\\\+2\\\\)' may be used uninitialized in this function \\\\[-Wmaybe-uninitialized\\\\]\"\n  \"cmGlobalNinjaGenerator.cxx:[0-9]*:[0-9]*: warning: '.*cm::optional<CxxModuleMapFormat>::_mem\\\\)\\\\)' may be used uninitialized \\\\[-Wmaybe-uninitialized\\\\]\"\n  \"cmGlobalNinjaGenerator.cxx:[0-9]*:[0-9]*: note: '.*cm::optional<CxxModuleMapFormat>::_mem\\\\)\\\\)' was declared here\"\n  \"cmGlobalNinjaGenerator.cxx:[0-9]*:[0-9]*: warning: '\\\\*\\\\(\\\\(void\\\\*\\\\)& modmap_fmt \\\\+4\\\\)' may be used uninitialized in this function \\\\[-Wmaybe-uninitialized\\\\]\"\n\n  # clang-analyzer exceptions\n  \"cmListFileLexer.c:[0-9]+:[0-9]+: warning: Array subscript is undefined\"\n  \"jsoncpp/src/.*:[0-9]+:[0-9]+: warning: Value stored to .* is never read\"\n  \"liblzma/common/index_encoder.c:[0-9]+:[0-9]+: warning: Value stored to '[^']+' during its initialization is never read\"\n  \"liblzma/liblzma/common/index.c:[0-9]+:[0-9]+: warning: Access to field '[^']+' results in a dereference of a null pointer\"\n  \"liblzma/simple/x86.c:[0-9]+:[0-9]+: warning: The result of the '<<' expression is undefined\"\n  \"librhash/librhash/.*:[0-9]+:[0-9]+: warning: The left operand of '[^']+' is a garbage value\"\n  \"libuv/src/.*:[0-9]+:[0-9]+: warning: 1st function call argument is an uninitialized value\"\n  \"libuv/src/.*:[0-9]+:[0-9]+: warning: Dereference of null pointer\"\n  \"libuv/src/.*:[0-9]+:[0-9]+: warning: The left operand of '[^']+' is a garbage value\"\n  \"libuv/src/.*:[0-9]+:[0-9]+: warning: Value of '[^']+' was not checked and may be overwritten by function '[^']+'\"\n  \"nghttp2/lib/.*:[0-9]+:[0-9]+: warning: Access to field '[^']+' results in a dereference of a null pointer\"\n  \"nghttp2/lib/.*:[0-9]+:[0-9]+: warning: Dereference of null pointer\"\n  \"nghttp2/lib/.*:[0-9]+:[0-9]+: warning: Value stored to '[^']+' is never read\"\n  \"zstd/lib/.*:[0-9]+:[0-9]+: warning: Assigned value is garbage or undefined\"\n  \"zstd/lib/.*:[0-9]+:[0-9]+: warning: Dereference of null pointer\"\n  \"zstd/lib/.*:[0-9]+:[0-9]+: warning: The right operand of .* is a garbage value due to array index out of bounds\"\n  )\n\nif(NOT \"@CMAKE_GENERATOR@\" MATCHES \"Xcode\")\n  list(APPEND CTEST_CUSTOM_COVERAGE_EXCLUDE\n    \"XCode\"\n    )\nendif ()\n\nlist(APPEND CTEST_CUSTOM_COVERAGE_EXCLUDE\n  # Exclude kwsys files from coverage results. They are reported\n  # (with better coverage results) on kwsys dashboards...\n  \"/Source/(cm|kw)sys/\"\n\n  # Exclude try_compile sources from coverage results:\n  \"/CMakeFiles/CMakeTmp/\"\n\n  # Exclude Qt source files from coverage results:\n  \"[A-Za-z]./[Qq]t/qt-.+-opensource-src\"\n  )\n\nlist(APPEND CTEST_CUSTOM_MEMCHECK_IGNORE\n  kwsys.testProcess-10 # See Source/kwsys/CTestCustom.cmake.in\n  )\n"
        },
        {
          "name": "CompileFlags.cmake",
          "type": "blob",
          "size": 5.1767578125,
          "content": "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n# file Copyright.txt or https://cmake.org/licensing for details.\n\n#-----------------------------------------------------------------------------\n# set some special flags for different compilers\n#\nif(WIN32 AND CMAKE_C_COMPILER_ID STREQUAL \"Intel\")\n  set(_INTEL_WINDOWS 1)\nendif()\n\nif(WIN32 AND CMAKE_C_COMPILER_ID MATCHES \"^(Clang|IntelLLVM)$\"\n   AND \"x${CMAKE_CXX_SIMULATE_ID}\" STREQUAL \"xMSVC\")\n  set(_CLANG_MSVC_WINDOWS 1)\nendif()\n\n# Disable deprecation warnings for standard C functions.\n# really only needed for newer versions of VS, but should\n# not hurt other versions, and this will work into the\n# future\nif(MSVC OR _INTEL_WINDOWS OR _CLANG_MSVC_WINDOWS)\n  add_compile_definitions(_CRT_SECURE_NO_DEPRECATE _CRT_NONSTDC_NO_DEPRECATE)\nelse()\nendif()\n\n# MSVC 14.28 enables C5105, but the Windows SDK 10.0.18362.0 triggers it.\nif(CMAKE_C_COMPILER_ID STREQUAL \"MSVC\" AND NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 19.28)\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -wd5105\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -wd5105\")\nendif()\n\n# Use a stack size large enough for CMake_DEFAULT_RECURSION_LIMIT.\nif(MSVC)\n  string(APPEND CMAKE_EXE_LINKER_FLAGS \" ${CMAKE_CXX_LINKER_WRAPPER_FLAG}-stack:10000000\")\nelseif(MINGW OR MSYS OR CYGWIN)\n  string(APPEND CMAKE_EXE_LINKER_FLAGS \" -Wl,--stack,10000000\")\nelseif(_CLANG_MSVC_WINDOWS AND \"x${CMAKE_CXX_COMPILER_FRONTEND_VARIANT}\" STREQUAL \"xGNU\")\n  string(APPEND CMAKE_EXE_LINKER_FLAGS \" -Xlinker -stack:20000000\")\nendif()\n\n# Silence \"Additional optimization may be attained by recompiling and\n# specifying MAXMEM option\" warning on XLC (AIX)\nif(CMAKE_CXX_COMPILER_ID MATCHES \"^(XL|XLClang)$\")\n  string(APPEND CMAKE_CXX_FLAGS \" -qmaxmem=-1\")\nendif()\n\n# Silence duplicate symbol warnings on AIX\nif(CMAKE_SYSTEM_NAME MATCHES \"AIX\")\n  if(NOT CMAKE_COMPILER_IS_GNUCXX)\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -bhalt:5 \")\n  endif()\nendif()\n\nif(CMAKE_SYSTEM MATCHES \"OSF1-V\")\n  if(NOT CMAKE_COMPILER_IS_GNUCXX)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -timplicit_local -no_implicit_include \")\n  endif()\nendif()\n\n# Workaround for short jump tables on PA-RISC\nif(CMAKE_SYSTEM_PROCESSOR MATCHES \"^parisc\")\n  if(CMAKE_COMPILER_IS_GNUCC)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -mlong-calls\")\n  endif()\n  if(CMAKE_COMPILER_IS_GNUCXX)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mlong-calls\")\n  endif()\nendif()\n\n# Use 64-bit off_t on 32-bit Linux\nif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\" AND CMAKE_SIZEOF_VOID_P EQUAL 4)\n  # ensure 64bit offsets are used for filesystem accesses for 32bit compilation\n  add_compile_definitions(_FILE_OFFSET_BITS=64)\nendif()\n\n# Workaround for TOC Overflow on ppc64\nset(bigTocFlag \"\")\nif(CMAKE_SYSTEM_NAME STREQUAL \"AIX\" AND\n   CMAKE_SYSTEM_PROCESSOR MATCHES \"powerpc\")\n  set(bigTocFlag \"-Wl,-bbigtoc\")\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\" AND\n   CMAKE_SYSTEM_PROCESSOR MATCHES \"ppc64\")\n  set(bigTocFlag \"-Wl,--no-multi-toc\")\nendif()\nif(bigTocFlag)\n  include(CheckCXXLinkerFlag)\n  check_cxx_linker_flag(${bigTocFlag} BIG_TOC_FLAG_SUPPORTED)\n  if(BIG_TOC_FLAG_SUPPORTED)\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${bigTocFlag}\")\n  endif()\nendif()\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL SunPro AND\n    NOT DEFINED CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION)\n  if (NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.13)\n    if (NOT CMAKE_CXX_STANDARD OR CMAKE_CXX_STANDARD EQUAL 98)\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++03\")\n    endif()\n  else()\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -library=stlport4\")\n  endif()\nendif()\n\nforeach(lang IN ITEMS C CXX)\n  # Suppress warnings from PGI compiler.\n  if (CMAKE_${lang}_COMPILER_ID STREQUAL \"PGI\")\n    set(CMAKE_${lang}_FLAGS \"${CMAKE_${lang}_FLAGS} -w\")\n  endif()\nendforeach()\n\n# use the ansi CXX compile flag for building cmake\nif (CMAKE_ANSI_CXXFLAGS)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${CMAKE_ANSI_CXXFLAGS}\")\nendif ()\n\nif (CMAKE_ANSI_CFLAGS)\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${CMAKE_ANSI_CFLAGS}\")\nendif ()\n\n# Allow per-translation-unit parallel builds when using MSVC\nif(CMAKE_GENERATOR MATCHES \"Visual Studio\" AND\n   (CMAKE_C_COMPILER_ID MATCHES \"MSVC|Intel\" OR\n   CMAKE_CXX_COMPILER_ID MATCHES \"MSVC|Intel\"))\n\n  set(CMake_MSVC_PARALLEL ON CACHE STRING \"\\\nEnables /MP flag for parallel builds using MSVC. Specify an \\\ninteger value to control the number of threads used (Only \\\nworks on some older versions of Visual Studio). Setting to \\\nON lets the toolchain decide how many threads to use. Set to \\\nOFF to disable /MP completely.\" )\n\n  if(CMake_MSVC_PARALLEL)\n    if(CMake_MSVC_PARALLEL GREATER 0)\n      string(APPEND CMAKE_C_FLAGS \" /MP${CMake_MSVC_PARALLEL}\")\n      string(APPEND CMAKE_CXX_FLAGS \" /MP${CMake_MSVC_PARALLEL}\")\n    else()\n      string(APPEND CMAKE_C_FLAGS \" /MP\")\n      string(APPEND CMAKE_CXX_FLAGS \" /MP\")\n    endif()\n  endif()\nendif()\n\n# Get rid of excess -Wunused-but-set-variable on release builds with LCC >= 1.26\nforeach(l IN ITEMS C CXX)\n  if(CMAKE_${l}_COMPILER_ID STREQUAL \"LCC\" AND NOT CMAKE_${l}_COMPILER_VERSION VERSION_LESS 1.26)\n    foreach(c IN ITEMS MINSIZEREL RELEASE RELWITHDEBINFO)\n      string(APPEND \"CMAKE_${l}_FLAGS_${c}\" \" -Wno-unused-but-set-variable\")\n    endforeach()\n  endif()\nendforeach()\n"
        },
        {
          "name": "Copyright.txt",
          "type": "blob",
          "size": 5.3486328125,
          "content": "CMake - Cross Platform Makefile Generator\nCopyright 2000-2025 Kitware, Inc. and Contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n* Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n\n* Neither the name of Kitware, Inc. nor the names of Contributors\n  may be used to endorse or promote products derived from this\n  software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n------------------------------------------------------------------------------\n\nThe following individuals and institutions are among the Contributors:\n\n* Aaron C. Meadows <cmake@shadowguarddev.com>\n* Adriaan de Groot <groot@kde.org>\n* Aleksey Avdeev <solo@altlinux.ru>\n* Alexander Neundorf <neundorf@kde.org>\n* Alexander Smorkalov <alexander.smorkalov@itseez.com>\n* Alexey Sokolov <sokolov@google.com>\n* Alex Merry <alex.merry@kde.org>\n* Alex Turbov <i.zaufi@gmail.com>\n* Andreas Pakulat <apaku@gmx.de>\n* Andreas Schneider <asn@cryptomilk.org>\n* André Rigland Brodtkorb <Andre.Brodtkorb@ifi.uio.no>\n* Axel Huebl, Helmholtz-Zentrum Dresden - Rossendorf\n* Benjamin Eikel\n* Bjoern Ricks <bjoern.ricks@gmail.com>\n* Brad Hards <bradh@kde.org>\n* Christopher Harvey\n* Christoph Grüninger <foss@grueninger.de>\n* Clement Creusot <creusot@cs.york.ac.uk>\n* Daniel Blezek <blezek@gmail.com>\n* Daniel Pfeifer <daniel@pfeifer-mail.de>\n* Dawid Wróbel <me@dawidwrobel.com>\n* Enrico Scholz <enrico.scholz@informatik.tu-chemnitz.de>\n* Eran Ifrah <eran.ifrah@gmail.com>\n* Esben Mose Hansen, Ange Optimization ApS\n* Geoffrey Viola <geoffrey.viola@asirobots.com>\n* Google Inc\n* Gregor Jasny\n* Helio Chissini de Castro <helio@kde.org>\n* Ilya Lavrenov <ilya.lavrenov@itseez.com>\n* Insight Software Consortium <insightsoftwareconsortium.org>\n* Intel Corporation <www.intel.com>\n* Jan Woetzel\n* Jordan Williams <jordan@jwillikers.com>\n* Julien Schueller\n* Kelly Thompson <kgt@lanl.gov>\n* Konstantin Podsvirov <konstantin@podsvirov.pro>\n* Laurent Montel <montel@kde.org>\n* Mario Bensi <mbensi@ipsquad.net>\n* Martin Gräßlin <mgraesslin@kde.org>\n* Mathieu Malaterre <mathieu.malaterre@gmail.com>\n* Matthaeus G. Chajdas\n* Matthias Kretz <kretz@kde.org>\n* Matthias Maennich <matthias@maennich.net>\n* Michael Hirsch, Ph.D. <www.scivision.co>\n* Michael Stürmer\n* Miguel A. Figueroa-Villanueva\n* Mike Durso <rbprogrammer@gmail.com>\n* Mike Jackson\n* Mike McQuaid <mike@mikemcquaid.com>\n* Nicolas Bock <nicolasbock@gmail.com>\n* Nicolas Despres <nicolas.despres@gmail.com>\n* Nikita Krupen'ko <krnekit@gmail.com>\n* NVIDIA Corporation <www.nvidia.com>\n* OpenGamma Ltd. <opengamma.com>\n* Patrick Stotko <stotko@cs.uni-bonn.de>\n* Per Øyvind Karlsen <peroyvind@mandriva.org>\n* Peter Collingbourne <peter@pcc.me.uk>\n* Petr Gotthard <gotthard@honeywell.com>\n* Philip Lowman <philip@yhbt.com>\n* Philippe Proulx <pproulx@efficios.com>\n* Raffi Enficiaud, Max Planck Society\n* Raumfeld <raumfeld.com>\n* Roger Leigh <rleigh@codelibre.net>\n* Rolf Eike Beer <eike@sf-mail.de>\n* Roman Donchenko <roman.donchenko@itseez.com>\n* Roman Kharitonov <roman.kharitonov@itseez.com>\n* Ruslan Baratov\n* Sebastian Holtermann <sebholt@xwmw.org>\n* Stephen Kelly <steveire@gmail.com>\n* Sylvain Joubert <joubert.sy@gmail.com>\n* The Qt Company Ltd.\n* Thomas Sondergaard <ts@medical-insight.com>\n* Tobias Hunger <tobias.hunger@qt.io>\n* Todd Gamblin <tgamblin@llnl.gov>\n* Tristan Carel\n* University of Dundee\n* Vadim Zhukov\n* Will Dicharry <wdicharry@stellarscience.com>\n\nSee version control history for details of individual contributions.\n\nThe above copyright and license notice applies to distributions of\nCMake in source and binary form.  Third-party software packages supplied\nwith CMake under compatible licenses provide their own copyright notices\ndocumented in corresponding subdirectories or source files.\n\n------------------------------------------------------------------------------\n\nCMake was initially developed by Kitware with the following sponsorship:\n\n * National Library of Medicine at the National Institutes of Health\n   as part of the Insight Segmentation and Registration Toolkit (ITK).\n\n * US National Labs (Los Alamos, Livermore, Sandia) ASC Parallel\n   Visualization Initiative.\n\n * National Alliance for Medical Image Computing (NAMIC) is funded by the\n   National Institutes of Health through the NIH Roadmap for Medical Research,\n   Grant U54 EB005149.\n\n * Kitware, Inc.\n"
        },
        {
          "name": "DartConfig.cmake",
          "type": "blob",
          "size": 0.365234375,
          "content": "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n# file Copyright.txt or https://cmake.org/licensing for details.\n\nset(CTEST_PROJECT_NAME \"CMake\")\nset(CTEST_NIGHTLY_START_TIME \"21:00:00 EDT\")\n\nset(CTEST_DROP_METHOD \"http\")\nset(CTEST_DROP_SITE \"open.cdash.org\")\nset(CTEST_DROP_LOCATION \"/submit.php?project=CMake\")\nset(CTEST_DROP_SITE_CDASH TRUE)\n"
        },
        {
          "name": "Help",
          "type": "tree",
          "content": null
        },
        {
          "name": "Licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "Modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "Packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 3.8837890625,
          "content": "CMake\n*****\n\nIntroduction\n============\n\nCMake is a cross-platform, open-source build system generator.\nFor full documentation visit the `CMake Home Page`_ and the\n`CMake Documentation Page`_. The `CMake Community Wiki`_ also\nreferences useful guides and recipes.\n\n.. _`CMake Home Page`: https://cmake.org\n.. _`CMake Documentation Page`: https://cmake.org/documentation\n.. _`CMake Community Wiki`: https://gitlab.kitware.com/cmake/community/-/wikis/home\n\nCMake is maintained and supported by `Kitware`_ and developed in\ncollaboration with a productive community of contributors.\n\n.. _`Kitware`: https://www.kitware.com/cmake\n\nLicense\n=======\n\nCMake is distributed under the OSI-approved BSD 3-clause License.\nSee `Copyright.txt`_ for details.\n\n.. _`Copyright.txt`: Copyright.txt\n\nBuilding CMake\n==============\n\nSupported Platforms\n-------------------\n\n* Microsoft Windows\n* Apple macOS\n* Linux\n* FreeBSD\n* OpenBSD\n* Solaris\n* AIX\n\nOther UNIX-like operating systems may work too out of the box, if not\nit should not be a major problem to port CMake to this platform.\nPlease post to the `CMake Discourse Forum`_ to ask if others have\nhad experience with the platform.\n\n.. _`CMake Discourse Forum`: https://discourse.cmake.org\n\nBuilding CMake with CMake\n-------------------------\n\nYou can build CMake as any other project with a CMake-based build system:\nrun an already-installed CMake on this source tree with your preferred\ngenerator and options.  Then build it and install it.\n\nTo build the documentation, install `Sphinx`_ and configure CMake with\n``-DSPHINX_HTML=ON`` and/or ``-DSPHINX_MAN=ON`` to enable the \"html\" or\n\"man\" builder.  Add ``-DSPHINX_EXECUTABLE=/path/to/sphinx-build`` if the\ntool is not found automatically.\n\nTo run the test suite, run ``ctest`` in the CMake build directory after\nbuilding.  See the `CMake Testing Guide`_ for details.\n\n.. _`Sphinx`: https://sphinx-doc.org\n.. _`CMake Testing Guide`: Help/dev/testing.rst\n\nBuilding CMake from Scratch\n---------------------------\n\nUNIX/Mac OSX/MinGW/MSYS/Cygwin\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou need to have a C++ compiler (supporting C++11) and a ``make`` installed.\nRun the ``bootstrap`` script you find in the source directory of CMake.\nYou can use the ``--help`` option to see the supported options.\nYou may use the ``--prefix=<install_prefix>`` option to specify a custom\ninstallation directory for CMake.  Once this has finished successfully,\nrun ``make`` and ``make install``.\n\nFor example, if you simply want to build and install CMake from source,\nyou can build directly in the source tree::\n\n  $ ./bootstrap && make && sudo make install\n\nOr, if you plan to develop CMake or otherwise run the test suite, create\na separate build tree::\n\n  $ mkdir build && cd build\n  $ ../bootstrap && make\n\nWindows\n^^^^^^^\n\nThere are two ways for building CMake under Windows:\n\n1. Compile with MSVC from VS 2015 or later.\n   You need to download and install a binary release of CMake.  You can get\n   these releases from the `CMake Download Page`_.  Then proceed with the\n   instructions above for `Building CMake with CMake`_.\n\n2. Bootstrap with MinGW under MSYS2.\n   Download and install `MSYS2`_.  Then install the required build tools::\n\n     $ pacman -S --needed git base-devel mingw-w64-x86_64-gcc\n\n   and bootstrap as above.\n\n.. _`CMake Download Page`: https://cmake.org/download\n.. _`MSYS2`: https://www.msys2.org/\n\nReporting Bugs\n==============\n\nIf you have found a bug:\n\n1. If you have a patch, please read the `CONTRIBUTING.rst`_ document.\n\n2. Otherwise, please post to the `CMake Discourse Forum`_ and ask about\n   the expected and observed behaviors to determine if it is really\n   a bug.\n\n3. Finally, if the issue is not resolved by the above steps, open\n   an entry in the `CMake Issue Tracker`_.\n\n.. _`CMake Issue Tracker`: https://gitlab.kitware.com/cmake/cmake/-/issues\n\nContributing\n============\n\nSee `CONTRIBUTING.rst`_ for instructions to contribute.\n\n.. _`CONTRIBUTING.rst`: CONTRIBUTING.rst\n"
        },
        {
          "name": "Source",
          "type": "tree",
          "content": null
        },
        {
          "name": "Templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "Utilities",
          "type": "tree",
          "content": null
        },
        {
          "name": "bootstrap",
          "type": "blob",
          "size": 65.392578125,
          "content": "#!/bin/sh\n# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n# file Copyright.txt or https://cmake.org/licensing for details.\n\ndie() {\n  echo \"$@\" 1>&2 ; exit 1\n}\n\n# Compile flag extraction function.\ncmake_extract_standard_flags()\n{\n  id=\"${1:-*}\"\n  lang=\"${2}\"\n  ver=\"${3}\"\n  sed -n \"s/ *set *( *CMAKE_${lang}${ver}_EXTENSION_COMPILE_OPTION *\\\"\\{0,1\\}\\([^\\\")]*\\).*/\\1/p\" \\\n    \"${cmake_source_dir}/Modules/Compiler/\"${id}-${lang}.cmake \\\n    2>/dev/null | tr ';' ' '\n  # Clang's CXX compiler flags are in the common module.\n  sed -n \"s/ *set *( *CMAKE_\\\\\\${lang}${ver}_EXTENSION_COMPILE_OPTION *\\\"\\{0,1\\}\\([^\\\")]*\\).*/\\1/p\" \\\n    \"${cmake_source_dir}/Modules/Compiler/Clang.cmake\" \\\n    2>/dev/null | tr ';' ' '\n}\n\n# Version number extraction function.\ncmake_version_component()\n{\n  sed -n \"\n/^set(CMake_VERSION_${1}/ {s/set(CMake_VERSION_${1} *\\([0-9]*\\)).*/\\1/;p;}\n\" \"${cmake_source_dir}/Source/CMakeVersion.cmake\"\n}\n\n# Install destination extraction function.\ncmake_install_dest_default()\n{\n  sed -n '\n/^ *set(CMAKE_'\"${1}\"'_DIR_DEFAULT.*) # '\"${2}\"'$/ {\n  s/^ *set(CMAKE_'\"${1}\"'_DIR_DEFAULT *\"\\([^\"]*\\)\").*$/\\1/\n  s/${CMake_VERSION_MAJOR}/'\"${cmake_version_major}\"'/\n  s/${CMake_VERSION_MINOR}/'\"${cmake_version_minor}\"'/\n  s/${CMake_VERSION_PATCH}/'\"${cmake_version_patch}\"'/\n  p\n  q\n}\n' \"${cmake_source_dir}/Source/CMakeInstallDestinations.cmake\"\n}\n\ncmake_toupper()\n{\n    echo \"$1\" | tr '[a-z]' '[A-Z]'\n}\n\n# Detect system and directory information.\ncmake_system=`uname`\ncmake_source_dir=`cd \"\\`dirname \\\"$0\\\"\\`\";pwd`\ncmake_binary_dir=`pwd`\n\n# Load version information.\ncmake_version_major=\"`cmake_version_component MAJOR`\"\ncmake_version_minor=\"`cmake_version_component MINOR`\"\ncmake_version_patch=\"`cmake_version_component PATCH`\"\ncmake_version=\"${cmake_version_major}.${cmake_version_minor}.${cmake_version_patch}\"\ncmake_version_rc=\"`cmake_version_component RC`\"\nif test \"$cmake_version_rc\" != \"\"; then\n  cmake_version=\"${cmake_version}-rc${cmake_version_rc}\"\nfi\n\ncmake_copyright=\"`grep '^Copyright .* Kitware' \"${cmake_source_dir}/Copyright.txt\"`\"\n\ncmake_bin_dir_keyword=\"OTHER\"\ncmake_data_dir_keyword=\"OTHER\"\ncmake_doc_dir_keyword=\"OTHER\"\ncmake_man_dir_keyword=\"OTHER\"\ncmake_xdgdata_dir_keyword=\"OTHER\"\ncmake_bin_dir=\"\"\ncmake_data_dir=\"\"\ncmake_doc_dir=\"\"\ncmake_man_dir=\"\"\ncmake_xdgdata_dir=\"\"\ncmake_init_file=\"\"\ncmake_bootstrap_system_libs=\"\"\ncmake_bootstrap_qt_gui=\"\"\ncmake_bootstrap_qt_qmake=\"\"\ncmake_bootstrap_debugger=\"\"\ncmake_sphinx_info=\"\"\ncmake_sphinx_man=\"\"\ncmake_sphinx_html=\"\"\ncmake_sphinx_qthelp=\"\"\ncmake_sphinx_latexpdf=\"\"\ncmake_sphinx_build=\"\"\ncmake_sphinx_flags=\"\"\n\n# Determine whether this is a Cygwin environment.\nif echo \"${cmake_system}\" | grep CYGWIN >/dev/null 2>&1; then\n  cmake_system_cygwin=true\n  cmake_doc_dir_keyword=\"CYGWIN\"\n  cmake_man_dir_keyword=\"CYGWIN\"\nelse\n  cmake_system_cygwin=false\nfi\n\n# Determine whether this is a MSYS environment.\nif echo \"${cmake_system}\" | grep MSYS >/dev/null 2>&1; then\n  cmake_system_msys=true\n  cmake_doc_dir_keyword=\"MSYS\"\n  cmake_man_dir_keyword=\"MSYS\"\nelse\n  cmake_system_msys=false\nfi\n\n# Determine whether this is a MinGW environment.\nif echo \"${cmake_system}\" | grep 'MINGW' >/dev/null 2>&1; then\n  cmake_system_mingw=true\nelse\n  cmake_system_mingw=false\nfi\n\n# Determine whether this is OS X\nif echo \"${cmake_system}\" | grep Darwin >/dev/null 2>&1; then\n  cmake_system_darwin=true\nelse\n  cmake_system_darwin=false\nfi\n\n# Determine whether this is BeOS\nif echo \"${cmake_system}\" | grep BeOS >/dev/null 2>&1; then\n  cmake_system_beos=true\n  cmake_doc_dir_keyword=\"HAIKU\"\n  cmake_man_dir_keyword=\"HAIKU\"\nelse\n  cmake_system_beos=false\nfi\n\n# Determine whether this is Haiku\nif echo \"${cmake_system}\" | grep Haiku >/dev/null 2>&1; then\n  cmake_system_haiku=true\n  cmake_doc_dir_keyword=\"HAIKU\"\n  cmake_man_dir_keyword=\"HAIKU\"\nelse\n  cmake_system_haiku=false\nfi\n\n# Determine whether this is OpenVMS\nif echo \"${cmake_system}\" | grep OpenVMS >/dev/null 2>&1; then\n  cmake_system_openvms=true\nelse\n  cmake_system_openvms=false\nfi\n\n# Determine whether this is HP-UX\nif echo \"${cmake_system}\" | grep HP-UX >/dev/null 2>&1; then\n  die 'CMake no longer compiles on HP-UX.  See\n\n  https://gitlab.kitware.com/cmake/cmake/-/issues/17137\n\nUse CMake 3.9 or lower instead.'\n  cmake_system_hpux=true\nelse\n  cmake_system_hpux=false\nfi\n\n# Determine whether this is AIX\nif echo \"${cmake_system}\" | grep AIX >/dev/null 2>&1; then\n  cmake_system_aix=true\nelse\n  cmake_system_aix=false\nfi\n\n# Determine whether this is Linux\nif echo \"${cmake_system}\" | grep Linux >/dev/null 2>&1; then\n  cmake_system_linux=true\nelse\n  cmake_system_linux=false\nfi\n\n# Determine whether this is a PA-RISC machine\n# This only works for Linux or HP-UX, not other PA-RISC OSs (BSD maybe?). Also\n# may falsely detect parisc on HP-UX m68k\ncmake_machine_parisc=false\nif ${cmake_system_linux}; then\n  if uname -m | grep parisc >/dev/null 2>&1; then\n    cmake_machine_parisc=true\n  fi\nelif ${cmake_system_hpux}; then\n  if uname -m | grep ia64 >/dev/null 2>&1; then : ; else\n    cmake_machine_parisc=true\n  fi\nfi\n\n# Choose the generator to use for bootstrapping.\nif ${cmake_system_mingw}; then\n  # Bootstrapping from an MSYS prompt.\n  cmake_bootstrap_generator=\"MSYS Makefiles\"\nelse\n  # Bootstrapping from a standard UNIX prompt.\n  cmake_bootstrap_generator=\"Unix Makefiles\"\nfi\n\n# Choose tools and extensions for this platform.\nif ${cmake_system_openvms}; then\n  _tmp=\"_tmp\"\n  _cmk=\"_cmk\"\n  _diff=`which diff`\nelse\n  _tmp=\".tmp\"\n  _cmk=\".cmk\"\n  _diff=\"diff\"\nfi\n\n# Construct bootstrap directory name.\ncmake_bootstrap_dir=\"${cmake_binary_dir}/Bootstrap${_cmk}\"\n\n# Helper function to fix windows paths.\ncase \"${cmake_system}\" in\n*MINGW*)\n  cmake_fix_slashes()\n  {\n    cmd //c echo \"$(echo \"$1\" | sed 's/\\\\/\\//g')\" | sed 's/^\"//;s/\" *$//'\n  }\n  ;;\n*)\n  cmake_fix_slashes()\n  {\n    echo \"$1\" | sed 's/\\\\/\\//g'\n  }\n  ;;\nesac\n\n# Choose the default install prefix.\nif ${cmake_system_mingw}; then\n  if test \"x${PROGRAMFILES}\" != \"x\"; then\n    cmake_default_prefix=`cmake_fix_slashes \"${PROGRAMFILES}/CMake\"`\n  elif test \"x${ProgramFiles}\" != \"x\"; then\n    cmake_default_prefix=`cmake_fix_slashes \"${ProgramFiles}/CMake\"`\n  elif test \"x${SYSTEMDRIVE}\" != \"x\"; then\n    cmake_default_prefix=`cmake_fix_slashes \"${SYSTEMDRIVE}/Program Files/CMake\"`\n  elif test \"x${SystemDrive}\" != \"x\"; then\n    cmake_default_prefix=`cmake_fix_slashes \"${SystemDrive}/Program Files/CMake\"`\n  else\n    cmake_default_prefix=\"c:/Program Files/CMake\"\n  fi\nelif ${cmake_system_haiku}; then\n  cmake_default_prefix=`finddir B_COMMON_DIRECTORY`\nelse\n  cmake_default_prefix=\"/usr/local\"\nfi\n\n# Lookup default install destinations.\ncmake_bin_dir_default=\"`cmake_install_dest_default BIN ${cmake_bin_dir_keyword}`\"\ncmake_data_dir_default=\"`cmake_install_dest_default DATA ${cmake_data_dir_keyword}`\"\ncmake_doc_dir_default=\"`cmake_install_dest_default DOC ${cmake_doc_dir_keyword}`\"\ncmake_man_dir_default=\"`cmake_install_dest_default MAN ${cmake_man_dir_keyword}`\"\ncmake_xdgdata_dir_default=\"`cmake_install_dest_default XDGDATA ${cmake_xdgdata_dir_keyword}`\"\n\nCMAKE_KNOWN_C_COMPILERS=\"cc gcc clang xlc icx tcc\"\nCMAKE_KNOWN_CXX_COMPILERS=\"aCC xlC CC g++ clang++ c++ icpx\"\nCMAKE_KNOWN_MAKE_PROCESSORS=\"gmake make smake\"\nCMAKE_KNOWN_NINJA_PROCESSORS=\"ninja-build ninja samu\"\n\nCMAKE_PROBLEMATIC_FILES=\"\\\n  CMakeCache.txt \\\n  CMakeSystem.cmake \\\n  CMakeCCompiler.cmake \\\n  CMakeCXXCompiler.cmake \\\n  */CMakeSystem.cmake \\\n  */CMakeCCompiler.cmake \\\n  */CMakeCXXCompiler.cmake \\\n  Source/cmConfigure.h \\\n  Source/CTest/Curl/config.h \\\n  Utilities/cmThirdParty.h \\\n  Utilities/cmcurl/lib/curl_config.h \\\n  Utilities/cmlibarchive/config.h \\\n  Utilities/cmliblzma/config.h \\\n  Utilities/cmnghttp2/config.h \\\n  \"\n\nCMAKE_UNUSED_SOURCES=\"\\\n  cmGlobalXCodeGenerator \\\n  cmLocalXCodeGenerator \\\n  cmXCodeObject \\\n  cmXCode21Object \\\n  cmSourceGroup \\\n\"\n\nCMAKE_CXX_SOURCES=\"\\\n  cmAddCompileDefinitionsCommand \\\n  cmAddCustomCommandCommand \\\n  cmAddCustomTargetCommand \\\n  cmAddDefinitionsCommand \\\n  cmAddDependenciesCommand \\\n  cmAddExecutableCommand \\\n  cmAddLibraryCommand \\\n  cmAddSubDirectoryCommand \\\n  cmAddTestCommand \\\n  cmArgumentParser \\\n  cmBinUtilsLinker \\\n  cmBinUtilsLinuxELFGetRuntimeDependenciesTool \\\n  cmBinUtilsLinuxELFLinker \\\n  cmBinUtilsLinuxELFObjdumpGetRuntimeDependenciesTool \\\n  cmBinUtilsMacOSMachOGetRuntimeDependenciesTool \\\n  cmBinUtilsMacOSMachOLinker \\\n  cmBinUtilsMacOSMachOOToolGetRuntimeDependenciesTool \\\n  cmBinUtilsWindowsPEGetRuntimeDependenciesTool \\\n  cmBinUtilsWindowsPEDumpbinGetRuntimeDependenciesTool \\\n  cmBinUtilsWindowsPELinker \\\n  cmBinUtilsWindowsPEObjdumpGetRuntimeDependenciesTool \\\n  cmBlockCommand \\\n  cmBreakCommand \\\n  cmBuildCommand \\\n  cmBuildDatabase \\\n  cmCMakeLanguageCommand \\\n  cmCMakeMinimumRequired \\\n  cmList \\\n  cmCMakePath \\\n  cmCMakePathCommand \\\n  cmCMakePolicyCommand \\\n  cmCPackPropertiesGenerator \\\n  cmCacheManager \\\n  cmCommandArgumentParserHelper \\\n  cmCommands \\\n  cmCommonTargetGenerator \\\n  cmComputeComponentGraph \\\n  cmComputeLinkDepends \\\n  cmComputeLinkInformation \\\n  cmComputeTargetDepends \\\n  cmConsoleBuf \\\n  cmConditionEvaluator \\\n  cmConfigureFileCommand \\\n  cmContinueCommand \\\n  cmCoreTryCompile \\\n  cmCreateTestSourceList \\\n  cmCryptoHash \\\n  cmCustomCommand \\\n  cmCustomCommandGenerator \\\n  cmCustomCommandLines \\\n  cmCxxModuleMapper \\\n  cmCxxModuleUsageEffects \\\n  cmDefinePropertyCommand \\\n  cmDefinitions \\\n  cmDocumentationFormatter \\\n  cmELF \\\n  cmEnableLanguageCommand \\\n  cmEnableTestingCommand \\\n  cmEvaluatedTargetProperty \\\n  cmExecProgramCommand \\\n  cmExecuteProcessCommand \\\n  cmExpandedCommandArgument \\\n  cmExperimental \\\n  cmExportBuildCMakeConfigGenerator \\\n  cmExportBuildFileGenerator \\\n  cmExportCMakeConfigGenerator \\\n  cmExportFileGenerator \\\n  cmExportInstallCMakeConfigGenerator \\\n  cmExportInstallFileGenerator \\\n  cmExportSet \\\n  cmExportTryCompileFileGenerator \\\n  cmExprParserHelper \\\n  cmExternalMakefileProjectGenerator \\\n  cmFileCommand \\\n  cmFileCommand_ReadMacho \\\n  cmFileCopier \\\n  cmFileInstaller \\\n  cmFileSet \\\n  cmFileTime \\\n  cmFileTimeCache \\\n  cmFileTimes \\\n  cmFindBase \\\n  cmFindCommon \\\n  cmFindFileCommand \\\n  cmFindLibraryCommand \\\n  cmFindPackageCommand \\\n  cmFindPackageStack \\\n  cmFindPathCommand \\\n  cmFindProgramCommand \\\n  cmForEachCommand \\\n  cmFunctionBlocker \\\n  cmFunctionCommand \\\n  cmFSPermissions \\\n  cmGeneratedFileStream \\\n  cmGeneratorExpression \\\n  cmGeneratorExpressionContext \\\n  cmGeneratorExpressionDAGChecker \\\n  cmGeneratorExpressionEvaluationFile \\\n  cmGeneratorExpressionEvaluator \\\n  cmGeneratorExpressionLexer \\\n  cmGeneratorExpressionNode \\\n  cmGeneratorExpressionParser \\\n  cmGeneratorTarget \\\n  cmGeneratorTarget_CompatibleInterface \\\n  cmGeneratorTarget_IncludeDirectories \\\n  cmGeneratorTarget_Link \\\n  cmGeneratorTarget_LinkDirectories \\\n  cmGeneratorTarget_Options \\\n  cmGeneratorTarget_Sources \\\n  cmGeneratorTarget_TargetPropertyEntry \\\n  cmGeneratorTarget_TransitiveProperty \\\n  cmGetCMakePropertyCommand \\\n  cmGetDirectoryPropertyCommand \\\n  cmGetFilenameComponentCommand \\\n  cmGetPipes \\\n  cmGetPropertyCommand \\\n  cmGetSourceFilePropertyCommand \\\n  cmGetTargetPropertyCommand \\\n  cmGetTestPropertyCommand \\\n  cmGlobalCommonGenerator \\\n  cmGlobalGenerator \\\n  cmGlobVerificationManager \\\n  cmHexFileConverter \\\n  cmIfCommand \\\n  cmImportedCxxModuleInfo \\\n  cmIncludeCommand \\\n  cmIncludeGuardCommand \\\n  cmIncludeDirectoryCommand \\\n  cmIncludeRegularExpressionCommand \\\n  cmInstallCMakeConfigExportGenerator \\\n  cmInstallCommand \\\n  cmInstallCommandArguments \\\n  cmInstallCxxModuleBmiGenerator \\\n  cmInstallDirectoryGenerator \\\n  cmInstallExportGenerator \\\n  cmInstallFileSetGenerator \\\n  cmInstallFilesCommand \\\n  cmInstallFilesGenerator \\\n  cmInstallGenerator \\\n  cmInstallGetRuntimeDependenciesGenerator \\\n  cmInstallImportedRuntimeArtifactsGenerator \\\n  cmInstallRuntimeDependencySet \\\n  cmInstallRuntimeDependencySetGenerator \\\n  cmInstallScriptGenerator \\\n  cmInstallSubdirectoryGenerator \\\n  cmInstallTargetGenerator \\\n  cmInstallTargetsCommand \\\n  cmInstalledFile \\\n  cmJSONHelpers \\\n  cmJSONState \\\n  cmLDConfigLDConfigTool \\\n  cmLDConfigTool \\\n  cmLinkDirectoriesCommand \\\n  cmLinkItem \\\n  cmLinkItemGraphVisitor \\\n  cmLinkLineComputer \\\n  cmLinkLineDeviceComputer \\\n  cmListCommand \\\n  cmListFileCache \\\n  cmLocalCommonGenerator \\\n  cmLocalGenerator \\\n  cmMSVC60LinkLineComputer \\\n  cmMacroCommand \\\n  cmMakeDirectoryCommand \\\n  cmMakefile \\\n  cmMarkAsAdvancedCommand \\\n  cmMathCommand \\\n  cmMessageCommand \\\n  cmMessenger \\\n  cmNewLineStyle \\\n  cmOSXBundleGenerator \\\n  cmOptionCommand \\\n  cmOrderDirectories \\\n  cmOutputConverter \\\n  cmParseArgumentsCommand \\\n  cmPathLabel \\\n  cmPathResolver \\\n  cmPolicies \\\n  cmProcessOutput \\\n  cmProjectCommand \\\n  cmValue \\\n  cmPropertyDefinition \\\n  cmPropertyMap \\\n  cmGccDepfileLexerHelper \\\n  cmGccDepfileReader \\\n  cmReturnCommand \\\n  cmPackageInfoReader \\\n  cmPlaceholderExpander \\\n  cmPlistParser \\\n  cmRulePlaceholderExpander \\\n  cmRuntimeDependencyArchive \\\n  cmScriptGenerator \\\n  cmSearchPath \\\n  cmSeparateArgumentsCommand \\\n  cmSetCommand \\\n  cmSetDirectoryPropertiesCommand \\\n  cmSetPropertyCommand \\\n  cmSetSourceFilesPropertiesCommand \\\n  cmSetTargetPropertiesCommand \\\n  cmSetTestsPropertiesCommand \\\n  cmSiteNameCommand \\\n  cmSourceFile \\\n  cmSourceFileLocation \\\n  cmStandardLevelResolver \\\n  cmState \\\n  cmStateDirectory \\\n  cmStateSnapshot \\\n  cmString \\\n  cmStringAlgorithms \\\n  cmStringReplaceHelper \\\n  cmStringCommand \\\n  cmSubcommandTable \\\n  cmSubdirCommand \\\n  cmSystemTools \\\n  cmTarget \\\n  cmTargetCompileDefinitionsCommand \\\n  cmTargetCompileFeaturesCommand \\\n  cmTargetCompileOptionsCommand \\\n  cmTargetIncludeDirectoriesCommand \\\n  cmTargetLinkLibrariesCommand \\\n  cmTargetLinkOptionsCommand \\\n  cmTargetPrecompileHeadersCommand \\\n  cmTargetPropCommandBase \\\n  cmTargetPropertyComputer \\\n  cmTargetSourcesCommand \\\n  cmTargetTraceDependencies \\\n  cmTest \\\n  cmTestGenerator \\\n  cmTimestamp \\\n  cmTransformDepfile \\\n  cmTryCompileCommand \\\n  cmTryRunCommand \\\n  cmUnsetCommand \\\n  cmUVHandlePtr \\\n  cmUVProcessChain \\\n  cmVersion \\\n  cmWhileCommand \\\n  cmWindowsRegistry \\\n  cmWorkingDirectory \\\n  cmXcFramework \\\n  cmake  \\\n  cmakemain \\\n  cmcmd  \\\n  cm_fileno \\\n\"\n\nif ${cmake_system_darwin}; then\n  CMAKE_CXX_SOURCES=\"${CMAKE_CXX_SOURCES}\\\n    cmMachO \\\n  \"\nfi\n\nif ${cmake_system_mingw}; then\n  CMAKE_CXX_SOURCES=\"${CMAKE_CXX_SOURCES}\\\n    cmGlobalMSYSMakefileGenerator \\\n    cmGlobalMinGWMakefileGenerator \\\n    cmVSSetupHelper \\\n  \"\nfi\n\nCMAKE_STD_CXX_HEADERS=\"\\\n  filesystem \\\n  memory \\\n  optional \\\n  shared_mutex \\\n  string_view \\\n  utility \\\n\"\nCMAKE_STD_CXX_SOURCES=\"\\\n  fs_path \\\n  string_view \\\n\"\n\nLexerParser_CXX_SOURCES=\"\\\n  cmCommandArgumentLexer \\\n  cmCommandArgumentParser \\\n  cmExprLexer \\\n  cmExprParser \\\n  cmGccDepfileLexer \\\n\"\n\nLexerParser_C_SOURCES=\"\\\n  cmListFileLexer \\\n\"\n\nif ${cmake_system_mingw}; then\n  KWSYS_C_SOURCES=\"\\\n    EncodingC \\\n    ProcessWin32 \\\n    String \\\n    System \\\n    Terminal\"\nelse\n  KWSYS_C_SOURCES=\"\\\n    EncodingC \\\n    ProcessUNIX \\\n    String \\\n    System \\\n    Terminal\"\nfi\n\nKWSYS_CXX_SOURCES=\"\\\n  Directory \\\n  EncodingCXX \\\n  FStream \\\n  Glob \\\n  RegularExpression \\\n  Status \\\n  SystemTools\"\n\nKWSYS_FILES=\"\\\n  Directory.hxx \\\n  Encoding.h \\\n  Encoding.hxx \\\n  FStream.hxx \\\n  Glob.hxx \\\n  Process.h \\\n  RegularExpression.hxx \\\n  Status.hxx \\\n  String.h \\\n  System.h \\\n  SystemTools.hxx \\\n  Terminal.h\"\n\nLIBRHASH_C_SOURCES=\"\\\n  librhash/algorithms.c \\\n  librhash/byte_order.c \\\n  librhash/hex.c \\\n  librhash/md5.c \\\n  librhash/rhash.c \\\n  librhash/sha1.c \\\n  librhash/sha256.c \\\n  librhash/sha3.c \\\n  librhash/sha512.c \\\n  librhash/util.c \\\n  \"\n\nJSONCPP_CXX_SOURCES=\"\\\n  src/lib_json/json_reader.cpp \\\n  src/lib_json/json_value.cpp \\\n  src/lib_json/json_writer.cpp \\\n  \"\n\nif ${cmake_system_mingw}; then\n  LIBUV_C_SOURCES=\"\\\n    src/fs-poll.c \\\n    src/idna.c\n    src/inet.c \\\n    src/threadpool.c \\\n    src/strscpy.c \\\n    src/strtok.c \\\n    src/timer.c \\\n    src/uv-common.c \\\n    src/win/async.c \\\n    src/win/core.c \\\n    src/win/detect-wakeup.c \\\n    src/win/dl.c \\\n    src/win/error.c \\\n    src/win/fs-event.c \\\n    src/win/fs.c \\\n    src/win/getaddrinfo.c \\\n    src/win/getnameinfo.c \\\n    src/win/handle.c \\\n    src/win/loop-watcher.c \\\n    src/win/pipe.c \\\n    src/win/poll.c \\\n    src/win/process-stdio.c \\\n    src/win/process.c \\\n    src/win/signal.c \\\n    src/win/stream.c \\\n    src/win/tcp.c \\\n    src/win/thread.c \\\n    src/win/tty.c \\\n    src/win/udp.c \\\n    src/win/util.c \\\n    src/win/winapi.c \\\n    src/win/winsock.c \\\n    \"\nelse\n  LIBUV_C_SOURCES=\"\\\n    src/strscpy.c \\\n    src/strtok.c \\\n    src/timer.c \\\n    src/uv-common.c \\\n    src/unix/cmake-bootstrap.c \\\n    src/unix/core.c \\\n    src/unix/fs.c \\\n    src/unix/loop.c \\\n    src/unix/loop-watcher.c \\\n    src/unix/no-fsevents.c \\\n    src/unix/pipe.c \\\n    src/unix/poll.c \\\n    src/unix/posix-hrtime.c \\\n    src/unix/posix-poll.c \\\n    src/unix/process.c \\\n    src/unix/signal.c \\\n    src/unix/stream.c \\\n    src/unix/tcp.c \\\n    src/unix/tty.c \\\n    \"\nfi\n\n# Display CMake bootstrap usage\ncmake_usage()\n{\necho '\nUsage: '\"$0\"' [<options>...] [-- <cmake-options>...]\nOptions: [defaults in brackets after descriptions]\nConfiguration:\n  --help                  print this message\n  --version               only print version information\n  --verbose               display more information\n  --parallel=n            bootstrap cmake in parallel, where n is\n                          number of nodes [1]\n  --generator=<generator> generator to use (MSYS Makefiles, Unix Makefiles,\n                          or Ninja)\n  --enable-ccache         Enable ccache when building cmake\n  --init=FILE             load FILE as script to populate cache\n  --system-libs           use all system-installed third-party libraries\n                          (for use only by package maintainers)\n  --no-system-libs        use all cmake-provided third-party libraries\n                          (default)\n  --system-cppdap         use system-installed cppdap library\n  --no-system-cppdap      use cmake-provided cppdap library (default)\n  --system-curl           use system-installed curl library (default on macOS)\n  --no-system-curl        use cmake-provided curl library (default elsewhere)\n  --system-expat          use system-installed expat library\n  --no-system-expat       use cmake-provided expat library (default)\n  --system-jsoncpp        use system-installed jsoncpp library\n  --no-system-jsoncpp     use cmake-provided jsoncpp library (default)\n  --system-zlib           use system-installed zlib library\n  --no-system-zlib        use cmake-provided zlib library (default)\n  --system-bzip2          use system-installed bzip2 library\n  --no-system-bzip2       use cmake-provided bzip2 library (default)\n  --system-liblzma        use system-installed liblzma library\n  --no-system-liblzma     use cmake-provided liblzma library (default)\n  --system-nghttp2        use system-installed nghttp2 library\n  --no-system-nghttp2     use cmake-provided nghttp2 library (default)\n  --system-zstd           use system-installed zstd library\n  --no-system-zstd        use cmake-provided zstd library (default)\n  --system-libarchive     use system-installed libarchive library\n  --no-system-libarchive  use cmake-provided libarchive library (default)\n  --system-librhash       use system-installed librhash library\n  --no-system-librhash    use cmake-provided librhash library (default)\n  --system-libuv          use system-installed libuv library\n  --no-system-libuv       use cmake-provided libuv library (default)\n\n  --bootstrap-system-libuv use system-installed libuv library for bootstrap\n  --bootstrap-system-jsoncpp use system-installed jsoncpp library for bootstrap\n  --bootstrap-system-librhash use system-installed librhash library for bootstrap\n\n  --qt-gui                build the Qt-based GUI (requires Qt >= 4.2)\n  --no-qt-gui             do not build the Qt-based GUI (default)\n  --qt-qmake=<qmake>      use <qmake> as the qmake executable to find Qt\n\n  --debugger              enable debugger support (default if supported)\n  --no-debugger           disable debugger support\n\n  --sphinx-info           build Info manual with Sphinx\n  --sphinx-man            build man pages with Sphinx\n  --sphinx-html           build html help with Sphinx\n  --sphinx-qthelp         build qch help with Sphinx\n  --sphinx-latexpdf       build PDF with Sphinx using LaTeX\n  --sphinx-build=<sb>     use <sb> as the sphinx-build executable\n  --sphinx-flags=<flags>  pass <flags> to sphinx-build executable\n\nDirectory and file names:\n  --prefix=PREFIX         install files in tree rooted at PREFIX\n                          ['\"${cmake_default_prefix}\"']\n  --bindir=DIR            install binaries in PREFIX/DIR\n                          ['\"${cmake_bin_dir_default}\"']\n  --datadir=DIR           install data files in PREFIX/DIR\n                          ['\"${cmake_data_dir_default}\"']\n  --docdir=DIR            install documentation files in PREFIX/DIR\n                          ['\"${cmake_doc_dir_default}\"']\n  --mandir=DIR            install man pages files in PREFIX/DIR/manN\n                          ['\"${cmake_man_dir_default}\"']\n  --xdgdatadir=DIR        install XDG specific files in PREFIX/DIR\n                          ['\"${cmake_xdgdata_dir_default}\"']\n'\n  exit 10\n}\n\n# Display CMake bootstrap usage\ncmake_version_display()\n{\n  echo \"CMake ${cmake_version}, ${cmake_copyright}\"\n}\n\n# Display CMake bootstrap error, display the log file and exit\ncmake_error()\n{\n  res=$1\n  shift 1\n  echo \"---------------------------------------------\"\n  echo \"Error when bootstrapping CMake:\"\n  echo \"$*\"\n  echo \"---------------------------------------------\"\n  if test -f cmake_bootstrap.log; then\n    echo \"Log of errors: `pwd`/cmake_bootstrap.log\"\n    #cat cmake_bootstrap.log\n    echo \"---------------------------------------------\"\n  fi\n  exit ${res}\n}\n\ncmake_generate_file_tmp ()\n{\n  OUTFILE=\"$1\"\n  TMPFILE=\"$2\"\n  if \"${_diff}\" \"$TMPFILE\" \"$OUTFILE\" > /dev/null 2> /dev/null ; then\n    rm -f \"$TMPFILE\"\n  else\n    mv -f \"$TMPFILE\" \"$OUTFILE\"\n  fi\n}\n\ncmake_generate_file ()\n{\n  OUTFILE=\"$1\"\n  CONTENT=\"$2\"\n  echo \"$CONTENT\" > \"$OUTFILE.tmp\"\n  cmake_generate_file_tmp \"$OUTFILE\" \"$OUTFILE.tmp\"\n}\n\n# Replace KWSYS_NAMESPACE with cmsys\ncmake_replace_string ()\n{\n  INFILE=\"$1\"\n  OUTFILE=\"$2\"\n  SEARCHFOR=\"$3\"\n  REPLACEWITH=\"$4\"\n  if test -f \"${INFILE}\" || ${cmake_system_openvms}; then\n    sed \"s/\\@${SEARCHFOR}\\@/${REPLACEWITH}/g\" \"${INFILE}\" > \"${OUTFILE}${_tmp}\"\n    if test -f \"${OUTFILE}${_tmp}\"; then\n      if \"${_diff}\" \"${OUTFILE}\" \"${OUTFILE}${_tmp}\" > /dev/null 2> /dev/null ; then\n        #echo \"Files are the same\"\n        rm -f \"${OUTFILE}${_tmp}\"\n      else\n        mv -f \"${OUTFILE}${_tmp}\" \"${OUTFILE}\"\n      fi\n    fi\n  else\n    cmake_error 1 \"Cannot find file ${INFILE}\"\n  fi\n}\n\ncmake_kwsys_config_replace_string ()\n{\n  INFILE=\"$1\"\n  OUTFILE=\"$2\"\n  shift 2\n  APPEND=\"$*\"\n  if test -f \"${INFILE}\" || ${cmake_system_openvms}; then\n    echo \"${APPEND}\" > \"${OUTFILE}${_tmp}\"\n    sed \"/./ {s/\\@KWSYS_NAMESPACE\\@/cmsys/g;\n              s/@KWSYS_BUILD_SHARED@/${KWSYS_BUILD_SHARED}/g;\n              s/@KWSYS_LFS_AVAILABLE@/${KWSYS_LFS_AVAILABLE}/g;\n              s/@KWSYS_LFS_REQUESTED@/${KWSYS_LFS_REQUESTED}/g;\n              s/@KWSYS_NAME_IS_KWSYS@/${KWSYS_NAME_IS_KWSYS}/g;\n              s/@KWSYS_STL_HAS_WSTRING@/${KWSYS_STL_HAS_WSTRING}/g;\n              s/@KWSYS_CXX_HAS_EXT_STDIO_FILEBUF_H@/${KWSYS_CXX_HAS_EXT_STDIO_FILEBUF_H}/g;\n             }\" \"${INFILE}\" >> \"${OUTFILE}${_tmp}\"\n    if test -f \"${OUTFILE}${_tmp}\"; then\n      if \"${_diff}\" \"${OUTFILE}\" \"${OUTFILE}${_tmp}\" > /dev/null 2> /dev/null ; then\n        #echo \"Files are the same\"\n        rm -f \"${OUTFILE}${_tmp}\"\n      else\n        mv -f \"${OUTFILE}${_tmp}\" \"${OUTFILE}\"\n      fi\n    fi\n  else\n    cmake_error 2 \"Cannot find file ${INFILE}\"\n  fi\n}\n# Write string into a file\ncmake_report ()\n{\n  FILE=$1\n  shift\n  echo \"$*\" >> ${FILE}\n}\n\n# Escape spaces in strings for artifacts\ncmake_escape_artifact ()\n{\n  if test \"${cmake_bootstrap_generator}\" = \"Ninja\"; then\n    echo $1 | sed \"s/ /$ /g\"\n  else\n    echo $1 | sed \"s/ /\\\\\\\\ /g\"\n  fi\n}\n\n# Escape spaces in strings for shell\ncmake_escape_shell ()\n{\n  echo $1 | sed \"s/ /\\\\\\\\ /g\"\n}\n\n# Encode object file names.\ncmake_obj ()\n{\n  echo $1 | sed 's/\\//-/g' | sed 's/$/\\.o/'\n}\n\n# Strip prefix from argument\ncmake_arg ()\n{\n  echo \"$1\" | sed \"s/^${2-[^=]*=}//\"\n}\n\n# Write message to the log\ncmake_log ()\n{\n  echo \"$*\" >> cmake_bootstrap.log\n}\n\n# Return temp file\ncmake_tmp_file ()\n{\n  echo \"cmake_bootstrap_$$_test\"\n}\n\n# Run a compiler test. First argument is compiler, second one are compiler\n# flags, third one is test source file to be compiled\ncmake_try_run ()\n{\n  COMPILER=$1\n  FLAGS=$2\n  TESTFILE=$3\n  if test ! -f \"${TESTFILE}\"; then\n    echo \"Test file ${TESTFILE} missing. Please verify your CMake source tree.\"\n    exit 4\n  fi\n  TMPFILE=`cmake_tmp_file`\n  echo \"Try: ${COMPILER}\"\n  echo \"Line: ${COMPILER} ${FLAGS} ${TESTFILE} -o ${TMPFILE}\"\n  echo \"----------  file   -----------------------\"\n  cat \"${TESTFILE}\"\n  echo \"------------------------------------------\"\n  ${COMPILER} ${FLAGS} \"${TESTFILE}\" -o \"${TMPFILE}\"\n  RES=$?\n  if test \"${RES}\" -ne \"0\"; then\n    echo \"Test failed to compile\"\n    return 1\n  fi\n  if test ! -f \"${TMPFILE}\" && test ! -f \"${TMPFILE}.exe\"; then\n    echo \"Test failed to produce executable\"\n    return 2\n  fi\n  ./${TMPFILE}\n  RES=$?\n  rm -f \"${TMPFILE}\"\n  if test \"${RES}\" -ne \"0\"; then\n    echo \"Test produced non-zero return code\"\n    return 3\n  fi\n  echo \"Test succeeded\"\n  return 0\n}\n\n# Run a make test. First argument is the make interpreter.\ncmake_try_make ()\n{\n  MAKE_PROC=\"$1\"\n  MAKE_FLAGS=\"$2\"\n  echo \"Try: ${MAKE_PROC}\"\n  \"${MAKE_PROC}\" ${MAKE_FLAGS}\n  RES=$?\n  if test \"${RES}\" -ne \"0\"; then\n    echo \"${MAKE_PROC} does not work\"\n    return 1\n  fi\n  if test ! -f \"test\" && test ! -f \"test.exe\"; then\n    echo \"${COMPILER} does not produce output\"\n    return 2\n  fi\n  ./test\n  RES=$?\n  rm -f \"test\"\n  if test \"${RES}\" -ne \"0\"; then\n    echo \"${MAKE_PROC} produces strange executable\"\n    return 3\n  fi\n  echo \"${MAKE_PROC} works\"\n  return 0\n}\n\n# Parse arguments\ncmake_verbose=\ncmake_parallel_make=\ncmake_ccache_enabled=\ncmake_prefix_dir=\"${cmake_default_prefix}\"\nbootstrap_system_libuv=\nbootstrap_system_jsoncpp=\nbootstrap_system_librhash=\nwhile test $# != 0; do\n  case \"$1\" in\n  --prefix=*) dir=`cmake_arg \"$1\"`\n              cmake_prefix_dir=`cmake_fix_slashes \"$dir\"` ;;\n  --parallel=*) cmake_parallel_make=`cmake_arg \"$1\"` ;;\n  --generator=*) cmake_bootstrap_generator=`cmake_arg \"$1\"` ;;\n  --bindir=*) cmake_bin_dir=`cmake_arg \"$1\"` ;;\n  --datadir=*) cmake_data_dir=`cmake_arg \"$1\"` ;;\n  --docdir=*) cmake_doc_dir=`cmake_arg \"$1\"` ;;\n  --mandir=*) cmake_man_dir=`cmake_arg \"$1\"` ;;\n  --xdgdatadir=*) cmake_xdgdata_dir=`cmake_arg \"$1\"` ;;\n  --init=*) cmake_init_file=`cmake_arg \"$1\"` ;;\n  --system-libs) cmake_bootstrap_system_libs=\"${cmake_bootstrap_system_libs} -DCMAKE_USE_SYSTEM_LIBRARIES=1\" ;;\n  --no-system-libs) cmake_bootstrap_system_libs=\"${cmake_bootstrap_system_libs} -DCMAKE_USE_SYSTEM_LIBRARIES=0\" ;;\n  --system-bzip2|--system-cppdap|--system-curl|--system-expat|--system-jsoncpp|--system-libarchive|--system-librhash|--system-zlib|--system-liblzma|--system-nghttp2|--system-zstd|--system-libuv)\n    lib=`cmake_arg \"$1\" \"--system-\"`\n    cmake_bootstrap_system_libs=\"${cmake_bootstrap_system_libs} -DCMAKE_USE_SYSTEM_LIBRARY_`cmake_toupper $lib`=1\" ;;\n  --no-system-bzip2|--no-system-cppdap|--no-system-curl|--no-system-expat|--no-system-jsoncpp|--no-system-libarchive|--no-system-librhash|--no-system-zlib|--no-system-liblzma|--no-system-nghttp2|--no-system-zstd|--no-system-libuv)\n    lib=`cmake_arg \"$1\" \"--no-system-\"`\n    cmake_bootstrap_system_libs=\"${cmake_bootstrap_system_libs} -DCMAKE_USE_SYSTEM_LIBRARY_`cmake_toupper $lib`=0\" ;;\n  --bootstrap-system-libuv) bootstrap_system_libuv=\"1\" ;;\n  --bootstrap-system-jsoncpp) bootstrap_system_jsoncpp=\"1\" ;;\n  --bootstrap-system-librhash) bootstrap_system_librhash=\"1\" ;;\n  --qt-gui) cmake_bootstrap_qt_gui=\"1\" ;;\n  --no-qt-gui) cmake_bootstrap_qt_gui=\"0\" ;;\n  --qt-qmake=*) cmake_bootstrap_qt_qmake=`cmake_arg \"$1\"` ;;\n  --debugger) cmake_bootstrap_debugger=\"1\" ;;\n  --no-debugger) cmake_bootstrap_debugger=\"0\" ;;\n  --sphinx-info) cmake_sphinx_info=\"1\" ;;\n  --sphinx-man) cmake_sphinx_man=\"1\" ;;\n  --sphinx-html) cmake_sphinx_html=\"1\" ;;\n  --sphinx-qthelp) cmake_sphinx_qthelp=\"1\" ;;\n  --sphinx-latexpdf) cmake_sphinx_latexpdf=\"1\" ;;\n  --sphinx-build=*) cmake_sphinx_build=`cmake_arg \"$1\"` ;;\n  --sphinx-flags=*) cmake_sphinx_flags=`cmake_arg \"$1\"` ;;\n  --help) cmake_usage ;;\n  --version) cmake_version_display ; exit 2 ;;\n  --verbose) cmake_verbose=TRUE ;;\n  --enable-ccache) cmake_ccache_enabled=TRUE ;;\n  CC=*) CC=`cmake_arg \"$1\"` ;;\n  CXX=*) CXX=`cmake_arg \"$1\"` ;;\n  CFLAGS=*) CFLAGS=`cmake_arg \"$1\"` ;;\n  CXXFLAGS=*) CXXFLAGS=`cmake_arg \"$1\"` ;;\n  LDFLAGS=*) LDFLAGS=`cmake_arg \"$1\"` ;;\n  --) shift; break ;;\n  *) die \"Unknown option: $1\" ;;\n  esac\n  shift\ndone\n\n# Make sure the generator is valid\ncase \"${cmake_bootstrap_generator}\" in\n  'MSYS Makefiles'|'Unix Makefiles'|'Ninja') ;;\n  *) cmake_error 10 \"Invalid generator: ${cmake_bootstrap_generator}\"\nesac\n\n# If verbose, display some information about bootstrap\nif test -n \"${cmake_verbose}\"; then\n  echo \"---------------------------------------------\"\n  echo \"Source directory: ${cmake_source_dir}\"\n  echo \"Binary directory: ${cmake_binary_dir}\"\n  echo \"Prefix directory: ${cmake_prefix_dir}\"\n  echo \"System:           ${cmake_system}\"\n  echo \"Generator:        ${cmake_bootstrap_generator}\"\n  if test \"x${cmake_parallel_make}\" != \"x\"; then\n    echo \"Doing parallel make: ${cmake_parallel_make}\"\n  fi\n  echo \"\"\nfi\n\necho \"---------------------------------------------\"\n# Get CMake version\necho \"`cmake_version_display`\"\n\n# Check for in-source build\ncmake_in_source_build=\nif test -f \"${cmake_binary_dir}/Source/cmake.cxx\" &&\n     test -f \"${cmake_binary_dir}/Source/cmake.h\"; then\n  if test -n \"${cmake_verbose}\"; then\n    echo \"Warning: This is an in-source build\"\n  fi\n  cmake_in_source_build=TRUE\nfi\n\n# If this is not an in-source build, then Bootstrap stuff should not exist.\nif test -z \"${cmake_in_source_build}\"; then\n  # Did somebody bootstrap in the source tree?\n  if test -d \"${cmake_source_dir}/Bootstrap${_cmk}\"; then\n    cmake_error 10 \"Found directory \\\"${cmake_source_dir}/Bootstrap${_cmk}\\\".\nLooks like somebody did bootstrap CMake in the source tree, but now you are\ntrying to do bootstrap in the binary tree. Please remove Bootstrap${_cmk}\ndirectory from the source tree.\"\n  fi\n  # Is there a cache in the source tree?\n  for cmake_problematic_file in ${CMAKE_PROBLEMATIC_FILES}; do\n    if test -f \"${cmake_source_dir}/${cmake_problematic_file}\"; then\n      cmake_error 10 \"Found \\\"${cmake_source_dir}/${cmake_problematic_file}\\\".\nLooks like somebody tried to build CMake in the source tree, but now you are\ntrying to do bootstrap in the binary tree. Please remove \\\"${cmake_problematic_file}\\\"\nfrom the source tree.\"\n    fi\n  done\nfi\n\n# Make bootstrap directory\ntest -d \"${cmake_bootstrap_dir}\" || mkdir \"${cmake_bootstrap_dir}\"\nif test ! -d \"${cmake_bootstrap_dir}\"; then\n  cmake_error 3 \"Cannot create directory ${cmake_bootstrap_dir} to bootstrap CMake.\"\nfi\ncd \"${cmake_bootstrap_dir}\"\n\ntest -d \"cmsys\" || mkdir \"cmsys\"\nif test ! -d \"cmsys\"; then\n  cmake_error 4 \"Cannot create directory ${cmake_bootstrap_dir}/cmsys\"\nfi\n\n# Delete all the bootstrap files\nrm -f \"${cmake_bootstrap_dir}/cmake_bootstrap.log\"\nrm -f \"${cmake_bootstrap_dir}/cmConfigure.h${_tmp}\"\nrm -f \"${cmake_bootstrap_dir}/cmVersionConfig.h${_tmp}\"\n\n# If building in-source, remove any cmConfigure.h that may\n# have been created by a previous run of the bootstrap cmake.\nif test -n \"${cmake_in_source_build}\"; then\n  rm -f \"${cmake_source_dir}/Source/cmConfigure.h\"\nfi\n\n# If exist compiler flags, set them\ncmake_c_flags=${CFLAGS}\ncmake_cxx_flags=${CXXFLAGS}\ncmake_ld_flags=${LDFLAGS}\n\n# Add generator-specific files\nif test \"${cmake_bootstrap_generator}\" = \"Ninja\"; then\n  CMAKE_CXX_SOURCES=\"${CMAKE_CXX_SOURCES} \\\n    cmFortranParserImpl \\\n    cmGlobalNinjaGenerator \\\n    cmLocalNinjaGenerator \\\n    cmNinjaLinkLineComputer \\\n    cmNinjaLinkLineDeviceComputer \\\n    cmNinjaNormalTargetGenerator \\\n    cmNinjaTargetGenerator \\\n    cmNinjaUtilityTargetGenerator \\\n    \"\n\n  LexerParser_CXX_SOURCES=\"${LexerParser_CXX_SOURCES} \\\n    cmFortranLexer \\\n    cmFortranParser \\\n    \"\nelse\n  CMAKE_CXX_SOURCES=\"${CMAKE_CXX_SOURCES} \\\n    cmDepends \\\n    cmDependsC \\\n    cmDependsCompiler \\\n    cmGlobalUnixMakefileGenerator3 \\\n    cmLocalUnixMakefileGenerator3 \\\n    cmMakefileExecutableTargetGenerator \\\n    cmMakefileLibraryTargetGenerator \\\n    cmMakefileTargetGenerator \\\n    cmMakefileUtilityTargetGenerator \\\n    cmProcessTools \\\n    \"\nfi\n\n# Add Cygwin-specific flags\nif ${cmake_system_cygwin} || ${cmake_system_msys}; then\n  cmake_ld_flags=\"${LDFLAGS} -Wl,--enable-auto-import\"\nfi\n\n# Add CoreFoundation framework on Darwin\nif ${cmake_system_darwin}; then\n  cmake_ld_flags=\"${LDFLAGS} -framework CoreFoundation\"\nfi\n\n# Add BeOS toolkits...\nif ${cmake_system_beos}; then\n  cmake_ld_flags=\"${LDFLAGS} -lroot -lbe\"\nfi\n\n# Add Haiku toolkits...\nif ${cmake_system_haiku}; then\n  cmake_ld_flags=\"${LDFLAGS} -lroot -lbe\"\nfi\n\n# Add AIX arch-specific link flags.\nif ${cmake_system_aix}; then\n  if uname -p | grep powerpc >/dev/null 2>&1; then\n    cmake_ld_flags=\"${LDFLAGS} -Wl,-bbigtoc\"\n  fi\nfi\n\n#-----------------------------------------------------------------------------\n# Detect known toolchains on some platforms.\ncmake_toolchains=''\ncase \"${cmake_system}\" in\n  *AIX*)   cmake_toolchains='XL GNU' ;;\n  *CYGWIN*) cmake_toolchains='GNU' ;;\n  *MSYS*) cmake_toolchains='GNU' ;;\n  *Darwin*) cmake_toolchains='Clang GNU' ;;\n  *Linux*) cmake_toolchains='GNU Clang XL PGI PathScale' ;;\n  *MINGW*) cmake_toolchains='GNU' ;;\nesac\n\n# Toolchain compiler name table.\ncmake_toolchain_Clang_CC='clang'\ncmake_toolchain_Clang_CXX='clang++'\ncmake_toolchain_GNU_CC='gcc'\ncmake_toolchain_GNU_CXX='g++'\ncmake_toolchain_PGI_CC='pgcc'\ncmake_toolchain_PGI_CXX='pgCC'\ncmake_toolchain_PathScale_CC='pathcc'\ncmake_toolchain_PathScale_CXX='pathCC'\ncmake_toolchain_XL_CC='xlc'\ncmake_toolchain_XL_CXX='xlC'\n\ncmake_toolchain_try()\n{\n  tc=\"$1\"\n  TMPFILE=`cmake_tmp_file`\n\n  eval \"tc_CC=\\${cmake_toolchain_${tc}_CC}\"\n  echo 'int main() { return 0; }' > \"${TMPFILE}.c\"\n  cmake_try_run \"$tc_CC\" \"\" \"${TMPFILE}.c\" >> cmake_bootstrap.log 2>&1\n  tc_result_CC=\"$?\"\n  rm -f \"${TMPFILE}.c\"\n  test \"${tc_result_CC}\" = \"0\" || return 1\n\n  eval \"tc_CXX=\\${cmake_toolchain_${tc}_CXX}\"\n  echo 'int main() { return 0; }' > \"${TMPFILE}.cpp\"\n  cmake_try_run \"$tc_CXX\" \"\" \"${TMPFILE}.cpp\" >> cmake_bootstrap.log 2>&1\n  tc_result_CXX=\"$?\"\n  rm -f \"${TMPFILE}.cpp\"\n  test \"${tc_result_CXX}\" = \"0\" || return 1\n\n  cmake_toolchain=\"$tc\"\n}\n\ncmake_toolchain_detect()\n{\n  cmake_toolchain=\n  for tc in ${cmake_toolchains}; do\n    echo \"Checking for $tc toolchain\" >> cmake_bootstrap.log 2>&1\n    cmake_toolchain_try \"$tc\" &&\n    echo \"Found $tc toolchain\" &&\n    break\n  done\n}\n\nif test -z \"${CC}\" && test -z \"${CXX}\"; then\n  cmake_toolchain_detect\nfi\n\nthread_flags=''\ncase \"${cmake_system}\" in\n  *AIX*)   thread_flags='-pthread' ;;\nesac\n\n#-----------------------------------------------------------------------------\n# Test C compiler\ncmake_c_compiler=\n\n# If CC is set, use that for compiler, otherwise use list of known compilers\nif test -n \"${cmake_toolchain}\"; then\n  eval cmake_c_compilers=\"\\${cmake_toolchain_${cmake_toolchain}_CC}\"\nelse\n  cmake_c_compilers=\"${CMAKE_KNOWN_C_COMPILERS}\"\nfi\n\ncmake_c_compiler_try_set()\n{\n  test_compiler=\"$1\"\n  test_thread_flags=\"$2\"\n\n  # Check if C compiler works\n  TMPFILE=`cmake_tmp_file`\n  echo '\n#ifdef __cplusplus\n# error \"The CMAKE_C_COMPILER is set to a C++ compiler\"\n#endif\n\n#if defined(_AIX) && defined(__GNUC__) && !defined(_THREAD_SAFE)\n#error \"On AIX with GNU we need the -pthread flag.\"\n#endif\n\n#if defined(__sun) && __STDC_VERSION__ < 199901L\n#error \"On Solaris we need C99.\"\n#endif\n\n#if defined(__hpux) && !(defined(__GNUC__) && ((__GNUC__ * 100) + __GNUC_MINOR__) >= 409)\n#error \"On HP-UX we need GCC 4.9 or higher.\"\n#endif\n\n#include <stdio.h>\n\nint main(int argc, char* argv[])\n{\n  printf(\"%d%c\", (argv != 0), (char)0x0a);\n  return argc - 1;\n}\n' > \"${TMPFILE}.c\"\n  for std in 11 99 90; do\n    std_flags=\"`cmake_extract_standard_flags \\\"${cmake_toolchain}\\\" C \\\"${std}\\\"`\"\n    for std_flag in '' $std_flags; do\n      for thread_flag in '' $test_thread_flags; do\n        echo \"Checking whether '${test_compiler} ${cmake_c_flags} ${cmake_ld_flags} ${std_flag} ${thread_flag}' works.\" >> cmake_bootstrap.log 2>&1\n        if cmake_try_run \"${test_compiler}\" \"${cmake_c_flags} ${cmake_ld_flags} ${std_flag} ${thread_flag}\" \\\n          \"${TMPFILE}.c\" >> cmake_bootstrap.log 2>&1; then\n          cmake_c_compiler=\"${test_compiler}\"\n          cmake_c_flags=\"${cmake_c_flags} ${std_flag} ${thread_flag}\"\n          rm -f \"${TMPFILE}.c\"\n          return 0\n        fi\n      done\n    done\n  done\n  rm -f \"${TMPFILE}.c\"\n  return 1\n}\n\nif test -n \"${CC}\"; then\n  cmake_c_compiler_try_set \"${CC}\" \"${thread_flags}\"\nelse\n  for compiler in ${cmake_c_compilers}; do\n    if cmake_c_compiler_try_set \"${compiler}\" \"${thread_flags}\"; then\n      break\n    fi\n  done\nfi\n\nif test -z \"${cmake_c_compiler}\"; then\n  cmake_error 6 \"Cannot find appropriate C compiler on this system.\nPlease specify one using environment variable CC.\nSee cmake_bootstrap.log for compilers attempted.\n\"\nfi\necho \"C compiler on this system is: ${cmake_c_compiler} ${cmake_c_flags}\"\n\n#-----------------------------------------------------------------------------\n# Test CXX compiler\ncmake_cxx_compiler=\n\n# On Mac OSX, CC is the same as cc, so make sure not to try CC as c++ compiler.\n\n# If CC is set, use that for compiler, otherwise use list of known compilers\nif test -n \"${cmake_toolchain}\"; then\n  eval cmake_cxx_compilers=\"\\${cmake_toolchain_${cmake_toolchain}_CXX}\"\nelse\n  cmake_cxx_compilers=\"${CMAKE_KNOWN_CXX_COMPILERS}\"\nfi\n\n# Check if C++ compiler works\ncmake_cxx_compiler_try_set()\n{\n  test_compiler=\"$1\"\n  test_thread_flags=\"$2\"\n\n  TMPFILE=`cmake_tmp_file`\necho '\n#include <iostream>\n#include <memory>\n#include <unordered_map>\n\n#if __cplusplus < 201103L\n#error \"Compiler is not in a mode aware of C++11.\"\n#endif\n\n#if defined(_AIX) && defined(__GNUC__) && !defined(_THREAD_SAFE)\n#error \"On AIX with GNU we need the -pthread flag.\"\n#endif\n\n#if defined(__SUNPRO_CC) && __SUNPRO_CC < 0x5140\n#error \"SunPro <= 5.13 mode not supported due to bug in move semantics.\"\n#endif\n\n#if defined(__hpux) && !(defined(__GNUC__) && ((__GNUC__ * 100) + __GNUC_MINOR__) >= 409)\n#error \"On HP-UX we need GCC 4.9 or higher.\"\n#endif\n\n#if __cplusplus > 201103L\n#include <iterator>\nint check_cxx14()\n{\n  int a[] = { 0, 1, 2 };\n  auto ai = std::cbegin(a);\n\n  int b[] = { 2, 1, 0 };\n  auto bi = std::cend(b);\n\n  return *ai + *(bi - 1);\n}\n#else\nint check_cxx14()\n{\n  return 0;\n}\n#endif\n\n#if (__cplusplus >= 201703L || defined(__INTEL_COMPILER) && defined(__cpp_deduction_guides))\n#include <optional>\ntemplate <typename T,\n          typename std::invoke_result<decltype(&T::get), T>::type = nullptr>\ntypename T::pointer get_ptr(T& item)\n{\n  return item.get();\n}\n\nint check_cxx17()\n{\n  // Intel compiler do not handle correctly 'decltype' inside 'invoke_result'\n  std::unique_ptr<int> u(new int(0));\n  get_ptr(u);\n  std::optional<int> oi = 0;\n  return oi.value();\n}\n#else\nint check_cxx17()\n{\n  return 0;\n}\n#endif\n\nclass Class\n{\npublic:\n  int Get() const { return this->Member; }\nprivate:\n  int Member = 1;\n};\nint main()\n{\n  auto const c = std::unique_ptr<Class>(new Class);\n  std::cout << c->Get() << check_cxx14() << check_cxx17() << std::endl;\n  return 0;\n}\n' > \"${TMPFILE}.cxx\"\n  for std in 17 14 11; do\n    std_flags=\"`cmake_extract_standard_flags \\\"${cmake_toolchain}\\\" CXX \\\"${std}\\\"`\"\n    for std_flag in '' $std_flags; do\n      for thread_flag in '' $test_thread_flags; do\n        echo \"Checking whether '${test_compiler} ${cmake_cxx_flags} ${cmake_ld_flags} ${std_flag} ${thread_flag}' works.\" >> cmake_bootstrap.log 2>&1\n        if cmake_try_run \"${test_compiler}\" \"${cmake_cxx_flags} ${cmake_ld_flags} ${std_flag} ${thread_flag}\" \\\n          \"${TMPFILE}.cxx\" >> cmake_bootstrap.log 2>&1; then\n          cmake_cxx_compiler=\"${test_compiler}\"\n          cmake_cxx_flags=\"${cmake_cxx_flags} ${std_flag} ${thread_flag} \"\n          rm -f \"${TMPFILE}.cxx\"\n          return 0\n        fi\n      done\n    done\n  done\n  rm -f \"${TMPFILE}.cxx\"\n  return 1\n}\n\nif test -n \"${CXX}\"; then\n  cmake_cxx_compiler_try_set \"${CXX}\" \"${thread_flags}\"\nelse\n  for compiler in ${cmake_cxx_compilers}; do\n    if cmake_cxx_compiler_try_set \"${compiler}\" \"${thread_flags}\"; then\n      break\n    fi\n  done\nfi\n\nif test -z \"${cmake_cxx_compiler}\"; then\ncmake_error 7 \"Cannot find a C++ compiler that supports both C++11 and the specified C++ flags.\nPlease specify one using environment variable CXX.\nThe C++ flags are \\\"$cmake_cxx_flags\\\".\nThey can be changed using the environment variable CXXFLAGS.\nSee cmake_bootstrap.log for compilers attempted.\"\nfi\necho \"C++ compiler on this system is: ${cmake_cxx_compiler} ${cmake_cxx_flags}\"\n\n#-----------------------------------------------------------------------------\n# Test CXX features\n\ncmake_cxx_features=\"make_unique filesystem\"\n\nfor feature in ${cmake_cxx_features}; do\n  eval \"cmake_have_cxx_${feature}=0\"\n  echo \"Checking whether '${cmake_cxx_compiler} ${cmake_cxx_flags} ${cmake_ld_flags}' supports '${feature}'.\" >> cmake_bootstrap.log 2>&1\n  if cmake_try_run \"${cmake_cxx_compiler}\" \"${cmake_cxx_flags} ${cmake_ld_flags}\" \\\n                   \"${cmake_source_dir}/Source/Checks/cm_cxx_${feature}.cxx\" >> cmake_bootstrap.log 2>&1; then\n    eval \"cmake_have_cxx_${feature}=1\"\n  fi\ndone\n\ncmake_have_cxx_features=\"\"\nfor feature in ${cmake_cxx_features}; do\n  feature_variable=\"cmake_have_cxx_${feature}\"\n  eval \"feature_value=\\${${feature_variable}}\"\n  if test \"${feature_value}\" -eq \"1\"; then\n    cmake_have_cxx_features=\"${cmake_have_cxx_features} -DCMake_HAVE_CXX_`cmake_toupper ${feature}`=${feature_value}\"\n  fi\ndone\n\ncmake_generate_file \"${cmake_bootstrap_dir}/cmSTL.hxx\" \"\"\n\n\n#-----------------------------------------------------------------------------\n# Test Make\n\ncmake_make_processor=\ncmake_make_flags=\n\n# If MAKE is set, use that for make processor, otherwise use list of known make\nif test -n \"${MAKE}\"; then\n  cmake_make_processors=\"${MAKE}\"\nelif test \"${cmake_bootstrap_generator}\" = \"Ninja\"; then\n  cmake_make_processors=\"${CMAKE_KNOWN_NINJA_PROCESSORS}\"\nelse\n  cmake_make_processors=\"${CMAKE_KNOWN_MAKE_PROCESSORS}\"\nfi\n\nTMPFILE=\"`cmake_tmp_file`_dir\"\nrm -rf \"${cmake_bootstrap_dir}/${TMPFILE}\"\nmkdir \"${cmake_bootstrap_dir}/${TMPFILE}\"\ncd \"${cmake_bootstrap_dir}/${TMPFILE}\"\nif test \"${cmake_bootstrap_generator}\" = \"Ninja\"; then\n  echo '\nrule cc\n  command = '\"${cmake_c_compiler}\"' '\"${cmake_ld_flags} ${cmake_c_flags}\"' -o $out $in\nbuild test: cc test.c\n'>\"build.ninja\"\nelse\n  echo '\ntest: test.c\n\t'\"${cmake_c_compiler}\"' '\"${cmake_ld_flags} ${cmake_c_flags}\"' -o test test.c\n'>\"Makefile\"\nfi\necho '\n#include <stdio.h>\nint main(){ printf(\"1%c\", (char)0x0a); return 0; }\n' > \"test.c\"\ncmake_original_make_flags=\"${cmake_make_flags}\"\nif test \"x${cmake_parallel_make}\" != \"x\"; then\n  cmake_make_flags=\"${cmake_make_flags} -j ${cmake_parallel_make}\"\nfi\nfor a in ${cmake_make_processors}; do\n  if test -z \"${cmake_make_processor}\" && cmake_try_make \"${a}\" \"${cmake_make_flags}\" >> ../cmake_bootstrap.log 2>&1; then\n    cmake_make_processor=\"${a}\"\n  fi\ndone\ncmake_full_make_flags=\"${cmake_make_flags}\"\nif test \"x${cmake_original_make_flags}\" != \"x${cmake_make_flags}\"; then\n  if test -z \"${cmake_make_processor}\"; then\n    cmake_make_flags=\"${cmake_original_make_flags}\"\n    for a in ${cmake_make_processors}; do\n      if test -z \"${cmake_make_processor}\" && cmake_try_make \"${a}\" \"${cmake_make_flags}\" >> ../cmake_bootstrap.log 2>&1; then\n        cmake_make_processor=\"${a}\"\n      fi\n    done\n  fi\nfi\ncd \"${cmake_bootstrap_dir}\"\n\nif test \"${cmake_bootstrap_generator}\" = \"Ninja\"; then\n  mf_str=Ninja\nelse\n  mf_str=Makefile\nfi\nif test -z \"${cmake_make_processor}\"; then\n  cmake_error 8 \"Cannot find appropriate ${mf_str} processor on this system.\nPlease specify one using environment variable MAKE.\"\nfi\nrm -rf \"${cmake_bootstrap_dir}/${TMPFILE}\"\necho \"${mf_str} processor on this system is: ${cmake_make_processor}\"\nif test \"x${cmake_full_make_flags}\" != \"x${cmake_make_flags}\"; then\n  echo \"---------------------------------------------\"\n  echo \"${mf_str} processor ${cmake_make_processor} does not support parallel build\"\n  echo \"---------------------------------------------\"\nfi\n\n# Test for kwsys features\nKWSYS_NAME_IS_KWSYS=0\nKWSYS_BUILD_SHARED=0\nKWSYS_LFS_AVAILABLE=0\nKWSYS_LFS_REQUESTED=0\nKWSYS_STL_HAS_WSTRING=0\nKWSYS_CXX_HAS_EXT_STDIO_FILEBUF_H=0\nKWSYS_CXX_HAS_SETENV=0\nKWSYS_CXX_HAS_UNSETENV=0\nKWSYS_CXX_HAS_ENVIRON_IN_STDLIB_H=0\nKWSYS_CXX_HAS_UTIMENSAT=0\nKWSYS_CXX_HAS_UTIMES=0\n\nif cmake_try_run \"${cmake_cxx_compiler}\" \\\n  \"${cmake_cxx_flags} ${cmake_ld_flags} -DTEST_KWSYS_CXX_HAS_SETENV\" \\\n  \"${cmake_source_dir}/Source/kwsys/kwsysPlatformTestsCXX.cxx\" >> cmake_bootstrap.log 2>&1; then\n  KWSYS_CXX_HAS_SETENV=1\n  echo \"${cmake_cxx_compiler} has setenv\"\nelse\n  echo \"${cmake_cxx_compiler} does not have setenv\"\nfi\n\nif cmake_try_run \"${cmake_cxx_compiler}\" \\\n  \"${cmake_cxx_flags} ${cmake_ld_flags} -DTEST_KWSYS_CXX_HAS_UNSETENV\" \\\n  \"${cmake_source_dir}/Source/kwsys/kwsysPlatformTestsCXX.cxx\" >> cmake_bootstrap.log 2>&1; then\n  KWSYS_CXX_HAS_UNSETENV=1\n  echo \"${cmake_cxx_compiler} has unsetenv\"\nelse\n  echo \"${cmake_cxx_compiler} does not have unsetenv\"\nfi\n\nif cmake_try_run \"${cmake_cxx_compiler}\" \\\n  \"${cmake_cxx_flags} ${cmake_ld_flags} -DTEST_KWSYS_CXX_HAS_ENVIRON_IN_STDLIB_H\" \\\n  \"${cmake_source_dir}/Source/kwsys/kwsysPlatformTestsCXX.cxx\" >> cmake_bootstrap.log 2>&1; then\n  KWSYS_CXX_HAS_ENVIRON_IN_STDLIB_H=1\n  echo \"${cmake_cxx_compiler} has environ in stdlib.h\"\nelse\n  echo \"${cmake_cxx_compiler} does not have environ in stdlib.h\"\nfi\n\nif cmake_try_run \"${cmake_cxx_compiler}\" \\\n  \"${cmake_cxx_flags} ${cmake_ld_flags} -DTEST_KWSYS_STL_HAS_WSTRING\" \\\n  \"${cmake_source_dir}/Source/kwsys/kwsysPlatformTestsCXX.cxx\" >> cmake_bootstrap.log 2>&1; then\n  KWSYS_STL_HAS_WSTRING=1\n  echo \"${cmake_cxx_compiler} has stl wstring\"\nelse\n  echo \"${cmake_cxx_compiler} does not have stl wstring\"\nfi\n\nif cmake_try_run \"${cmake_cxx_compiler}\" \\\n  \"${cmake_cxx_flags} ${cmake_ld_flags} -DTEST_KWSYS_CXX_HAS_EXT_STDIO_FILEBUF_H\" \\\n  \"${cmake_source_dir}/Source/kwsys/kwsysPlatformTestsCXX.cxx\" >> cmake_bootstrap.log 2>&1; then\n  KWSYS_CXX_HAS_EXT_STDIO_FILEBUF_H=1\n  echo \"${cmake_cxx_compiler} has <ext/stdio_filebuf.h>\"\nelse\n  echo \"${cmake_cxx_compiler} does not have <ext/stdio_filebuf.h>\"\nfi\n\nif test -n \"${cmake_ccache_enabled}\"; then\n  echo \"Building CMake with ccache\"\n  cmake_c_compiler=\"ccache ${cmake_c_compiler}\"\n  cmake_cxx_compiler=\"ccache ${cmake_cxx_compiler}\"\nfi\n\n# Just to be safe, let us store compiler and flags to the header file\n\ncmake_bootstrap_version='$Revision$'\ncmake_compiler_settings_comment=\"/*\n * Generated by ${cmake_source_dir}/bootstrap\n * Version:     ${cmake_bootstrap_version}\n *\n * Source directory: ${cmake_source_dir}\n * Binary directory: ${cmake_bootstrap_dir}\n *\n * C compiler:   ${cmake_c_compiler}\n * C flags:      ${cmake_c_flags}\n *\n * C++ compiler: ${cmake_cxx_compiler}\n * C++ flags:    ${cmake_cxx_flags}\n *\n * Make:         ${cmake_make_processor}\n *\n * Sources:\n * ${CMAKE_CXX_SOURCES} ${CMAKE_C_SOURCES}\n * STD Sources:\n * ${CMAKE_STD_CXX_HEADERS} ${CMAKE_STD_CXX_SOURCES}\n * LexerParser Sources:\n * ${LexerParser_CXX_SOURCES} ${LexerParser_C_SOURCES}\n * kwSys Sources:\n * ${KWSYS_CXX_SOURCES} ${KWSYS_C_SOURCES}\n * libuv Sources:\n * ${LIBUV_C_SOURCES}\n * jsoncpp Sources:\n * ${JSONCPP_CXX_SOURCES}\n * librhash Sources:\n * ${LIBRHASH_C_SOURCES}\n */\n\"\n\ncmake_report cmConfigure.h${_tmp} \"${cmake_compiler_settings_comment}\"\n\n# When bootstrapping on MinGW with MSYS we must convert the source\n# directory to a windows path.\nif ${cmake_system_mingw}; then\n    CMAKE_BOOTSTRAP_SOURCE_DIR=`cd \"${cmake_source_dir}\"; pwd -W`\n    CMAKE_BOOTSTRAP_BINARY_DIR=`cd \"${cmake_binary_dir}\"; pwd -W`\nelse\n    CMAKE_BOOTSTRAP_SOURCE_DIR=\"${cmake_source_dir}\"\n    CMAKE_BOOTSTRAP_BINARY_DIR=\"${cmake_binary_dir}\"\nfi\n\n# Write CMake version\ncmake_report cmVersionConfig.h${_tmp} \"#define CMake_VERSION_MAJOR ${cmake_version_major}\"\ncmake_report cmVersionConfig.h${_tmp} \"#define CMake_VERSION_MINOR ${cmake_version_minor}\"\ncmake_report cmVersionConfig.h${_tmp} \"#define CMake_VERSION_PATCH ${cmake_version_patch}\"\ncmake_report cmVersionConfig.h${_tmp} \"#define CMake_VERSION \\\"${cmake_version}\\\"\"\ncmake_report cmConfigure.h${_tmp} \"#define CMAKE_BOOTSTRAP_SOURCE_DIR \\\"${CMAKE_BOOTSTRAP_SOURCE_DIR}\\\"\"\ncmake_report cmConfigure.h${_tmp} \"#define CMAKE_BOOTSTRAP_BINARY_DIR \\\"${CMAKE_BOOTSTRAP_BINARY_DIR}\\\"\"\ncmake_report cmConfigure.h${_tmp} \"#define CMake_DEFAULT_RECURSION_LIMIT 400\"\ncmake_report cmConfigure.h${_tmp} \"#define CMAKE_BIN_DIR \\\"/bootstrap-not-insalled\\\"\"\ncmake_report cmConfigure.h${_tmp} \"#define CMAKE_DATA_DIR \\\"/bootstrap-not-insalled\\\"\"\ncmake_report cmConfigure.h${_tmp} \"#define CM_FALLTHROUGH\"\n\nif test \"${cmake_bootstrap_generator}\" = \"Ninja\"; then\n  cmake_report cmConfigure.h${_tmp} \"#define CMAKE_BOOTSTRAP_NINJA\"\nelse\n  cmake_report cmConfigure.h${_tmp} \"#define CMAKE_BOOTSTRAP_MAKEFILES\"\nfi\n\nif ${cmake_system_darwin}; then\n  cmake_report cmConfigure.h${_tmp} \"#define CMake_USE_MACH_PARSER\"\nfi\n\nif ${cmake_system_mingw}; then\n  cmake_report cmConfigure.h${_tmp} \"#if defined(_WIN32) && !defined(NOMINMAX)\"\n  cmake_report cmConfigure.h${_tmp} \"#  define NOMINMAX\"\n  cmake_report cmConfigure.h${_tmp} \"#endif\"\n  cmake_report cmConfigure.h${_tmp} \"#if defined(_WIN32) && !defined(KWSYS_ENCODING_DEFAULT_CODEPAGE)\"\n  cmake_report cmConfigure.h${_tmp} \"#  define KWSYS_ENCODING_DEFAULT_CODEPAGE CP_UTF8\"\n  cmake_report cmConfigure.h${_tmp} \"#endif\"\nfi\n\n# Regenerate configured headers\nfor h in Configure VersionConfig; do\n  if \"${_diff}\" cm${h}.h cm${h}.h${_tmp} > /dev/null 2> /dev/null; then\n    rm -f cm${h}.h${_tmp}\n  else\n    mv -f cm${h}.h${_tmp} cm${h}.h\n  fi\ndone\n\n# Prepare KWSYS\ncmsys_header_files=\"cmsys/Configure.h cmsys/Configure.hxx\"\ncmake_kwsys_config_replace_string \\\n  \"${cmake_source_dir}/Source/kwsys/Configure.hxx.in\" \\\n  \"${cmake_bootstrap_dir}/cmsys/Configure.hxx\" \\\n  \"${cmake_compiler_settings_comment}\"\ncmake_kwsys_config_replace_string \\\n  \"${cmake_source_dir}/Source/kwsys/Configure.h.in\" \\\n  \"${cmake_bootstrap_dir}/cmsys/Configure.h\" \\\n  \"${cmake_compiler_settings_comment}\"\n\nfor a in ${KWSYS_FILES}; do\n  cmake_replace_string \"${cmake_source_dir}/Source/kwsys/${a}.in\" \\\n     \"${cmake_bootstrap_dir}/cmsys/${a}\" KWSYS_NAMESPACE cmsys\n  cmsys_header_files=\"${cmsys_header_files} cmsys/${a}\"\ndone\n\necho \"#pragma once\" > \"${cmake_bootstrap_dir}/cmThirdParty.h.tmp\"\nif test \"x${bootstrap_system_libuv}\" != \"x\"; then\n  echo \"#define CMAKE_USE_SYSTEM_LIBUV\" >> \"${cmake_bootstrap_dir}/cmThirdParty.h.tmp\"\nfi\nif test \"x${bootstrap_system_jsoncpp}\" != \"x\"; then\n  echo \"#define CMAKE_USE_SYSTEM_JSONCPP\" >> \"${cmake_bootstrap_dir}/cmThirdParty.h.tmp\"\nfi\nif test \"x${bootstrap_system_librhash}\" != \"x\"; then\n  echo \"#define CMAKE_USE_SYSTEM_LIBRHASH\" >> \"${cmake_bootstrap_dir}/cmThirdParty.h.tmp\"\nfi\ncmake_generate_file_tmp \"${cmake_bootstrap_dir}/cmThirdParty.h\" \"${cmake_bootstrap_dir}/cmThirdParty.h.tmp\"\n\n# Generate Makefile\ndep=\"cmConfigure.h ${cmsys_header_files}\"\nfor h in \"${cmake_source_dir}\"/Source/*.hxx; do\n  dep=\"${dep} `cmake_escape_artifact \\\"${h}\\\"`\"\ndone\nfor h in \"${cmake_source_dir}\"/Source/*.h; do\n  dep=\"${dep} `cmake_escape_artifact \\\"${h}\\\"`\"\ndone\nfor h in ${CMAKE_STD_CXX_HEADERS}; do\n  dep=\"${dep} `cmake_escape_artifact \\\"${cmake_source_dir}\\\"`/Utilities/std/cm/${h}\"\ndone\nobjs=\"\"\nfor a in ${CMAKE_CXX_SOURCES} ${CMAKE_C_SOURCES} ${CMAKE_STD_CXX_SOURCES} ${LexerParser_CXX_SOURCES} ${LexerParser_C_SOURCES} ${KWSYS_CXX_SOURCES} ${KWSYS_C_SOURCES}; do\n  objs=\"${objs} ${a}.o\"\ndone\nif test \"x${bootstrap_system_libuv}\" = \"x\"; then\n  for a in ${LIBUV_C_SOURCES}; do\n    objs=\"${objs} uv-`cmake_obj ${a}`\"\n  done\nfi\nif test \"x${bootstrap_system_librhash}\" = \"x\"; then\n  for a in ${LIBRHASH_C_SOURCES}; do\n    objs=\"${objs} rhash-`cmake_obj ${a}`\"\n  done\nfi\nif test \"x${bootstrap_system_jsoncpp}\" = \"x\"; then\n  for a in ${JSONCPP_CXX_SOURCES}; do\n    objs=\"${objs} jsoncpp-`cmake_obj ${a}`\"\n  done\nfi\n\nlibs=\"\"\n\nuv_c_flags=\"\"\nif ${cmake_system_mingw}; then\n  uv_c_flags=\"${uv_c_flags} -DWIN32_LEAN_AND_MEAN -D_WIN32_WINNT=0x0600\"\n  libs=\"${libs} -lws2_32 -lpsapi -liphlpapi -lshell32 -luserenv -lole32 -loleaut32 -luuid\"\nelse\n  case \"${cmake_system}\" in\n    *AIX*)\n      uv_c_flags=\"${uv_c_flags} -D_ALL_SOURCE -D_XOPEN_SOURCE=500 -D_LINUX_SOURCE_COMPAT\"\n      libs=\"${libs} -lperfstat\"\n      ;;\n    *Darwin*)\n      uv_c_flags=\"${uv_c_flags} -D_DARWIN_USE_64_BIT_INODE=1 -D_DARWIN_UNLIMITED_SELECT=1\"\n      ;;\n    *HP-UX*)\n      uv_c_flags=\"${uv_c_flags} -D_XOPEN_SOURCE_EXTENDED\"\n      ;;\n    *Linux*)\n      uv_c_flags=\"${uv_c_flags} -D_GNU_SOURCE\"\n      libs=\"${libs} -ldl -lrt\"\n      ;;\n    *kFreeBSD*)\n      libs=\"${libs} -lkvm -lfreebsd-glue\"\n      ;;\n    *BSD*)\n      libs=\"${libs} -lkvm\"\n      ;;\n    *SunOS*)\n      uv_c_flags=\"${uv_c_flags} -D__EXTENSIONS__ -D_XOPEN_SOURCE=600\"\n      libs=\"${libs} -lkstat -lnsl -lsendfile -lsocket -lrt\"\n      ;;\n    *QNX*)\n      uv_c_flags=\"${uv_c_flags} -D_XOPEN_SOURCE=700\"\n      libs=\"${libs} -lsocket\"\n      ;;\n  esac\nfi\nif test \"x${bootstrap_system_libuv}\" = \"x\"; then\n  uv_c_flags=\"${uv_c_flags} `cmake_escape_shell \"-I${cmake_source_dir}/Utilities/cmlibuv/include\"`\"\n  if ${cmake_system_mingw}; then\n    uv_c_flags=\"${uv_c_flags} `cmake_escape_shell \"-I${cmake_source_dir}/Utilities/cmlibuv/src/win\"`\"\n  else\n    uv_c_flags=\"${uv_c_flags} `cmake_escape_shell \"-I${cmake_source_dir}/Utilities/cmlibuv/src/unix\"`\"\n  fi\n  uv_c_flags=\"${uv_c_flags} `cmake_escape_shell \"-I${cmake_source_dir}/Utilities/cmlibuv/src\"`\"\nelse\n  if test `which pkg-config`; then\n    use_uv_flags=\"`pkg-config --cflags libuv`\"\n    use_uv_ldflags=\"`pkg-config --libs libuv`\"\n    cmake_c_flags=\"${cmake_c_flags} ${use_uv_flags}\"\n    cmake_cxx_flags=\"${cmake_cxx_flags} ${use_uv_flags}\"\n  else\n    use_uv_ldflags=\"-luv\"\n  fi\n  libs=\"${libs} ${use_uv_ldflags}\"\nfi\n\nlibrhash_c_flags=\"-DNO_IMPORT_EXPORT\"\nif test \"x${bootstrap_system_librhash}\" != \"x\"; then\n  if test `which pkg-config`; then\n    use_librhash_flags=\"`pkg-config --cflags librhash`\"\n    use_librhash_ldflags=\"`pkg-config --libs librhash`\"\n    cmake_c_flags=\"${cmake_c_flags} ${use_librhash_flags}\"\n    cmake_cxx_flags=\"${cmake_cxx_flags} ${use_librhash_flags}\"\n  else\n    use_librhash_ldflags=\"-lrhash\"\n  fi\n  libs=\"${libs} ${use_librhash_ldflags}\"\nfi\n\njsoncpp_cxx_flags=\nif test \"x${bootstrap_system_jsoncpp}\" = \"x\"; then\n  jsoncpp_cxx_flags=\"${jsoncpp_cxx_flags} `cmake_escape_shell \"-I${cmake_source_dir}/Utilities/cmjsoncpp/include\"`\"\nelse\n  if test `which pkg-config`; then\n    use_jsoncpp_flags=\"`pkg-config --cflags jsoncpp`\"\n    use_jsoncpp_ldflags=\"`pkg-config --libs jsoncpp`\"\n    cmake_cxx_flags=\"${cmake_cxx_flags} ${use_jsoncpp_flags}\"\n  else\n    use_jsoncpp_ldflags=\"-ljsoncpp\"\n  fi\n  libs=\"${libs} ${use_jsoncpp_ldflags}\"\nfi\n\nif test \"x${cmake_ansi_cxx_flags}\" != \"x\"; then\n  cmake_cxx_flags=\"${cmake_ansi_cxx_flags} ${cmake_cxx_flags}\"\nfi\n\nsystem_flags=''\ncase \"${cmake_system}\" in\n  # Ensure filesystem access uses 64-bit offsets even on 32-bit hosts.\n  *Linux*) system_flags='-D_FILE_OFFSET_BITS=64' ;;\nesac\nif test \"x${system_flags}\" != \"x\"; then\n  cmake_c_flags=\"${cmake_c_flags} ${system_flags}\"\n  cmake_cxx_flags=\"${cmake_cxx_flags} ${system_flags}\"\nfi\n\nif test \"x${cmake_c_flags}\" != \"x\"; then\n  cmake_c_flags=\"${cmake_c_flags} \"\nfi\n\nif test \"x${cmake_cxx_flags}\" != \"x\"; then\n  cmake_cxx_flags=\"${cmake_cxx_flags} \"\nfi\n\nwrite_source_rule() {\n  lang=\"$1\"\n  obj=\"$2\"\n  src=\"$3\"\n  src_flags=\"$4\"\n\n  if test \"${lang}\" = \"c\"; then\n    ninja_rule=cc\n    compiler=\"${cmake_c_compiler}\"\n    flags=\"${cmake_c_flags}\"\n  elif test \"${lang}\" = \"cxx\"; then\n    ninja_rule=cxx\n    compiler=\"${cmake_cxx_compiler}\"\n    flags=\"${cmake_cxx_flags}\"\n  fi\n\n  if test \"${cmake_bootstrap_generator}\" = \"Ninja\"; then\n    echo \"build ${obj} : ${ninja_rule} ${src} | ${dep}\" >> \"${cmake_bootstrap_dir}/build.ninja\"\n    echo \"  srcflags = ${src_flags}\" >> \"${cmake_bootstrap_dir}/build.ninja\"\n  else\n    echo \"${obj} : ${src} ${dep}\" >> \"${cmake_bootstrap_dir}/Makefile\"\n    echo \"\t${compiler} ${flags} ${src_flags} -c ${src} -o ${obj}\" >> \"${cmake_bootstrap_dir}/Makefile\"\n  fi\n}\n\ncmake_c_flags_String=\"-DKWSYS_STRING_C\"\nif ${cmake_system_mingw}; then\n  cmake_c_flags_EncodingC=\"-DKWSYS_ENCODING_DEFAULT_CODEPAGE=CP_ACP\"\n  cmake_cxx_flags_EncodingCXX=\"${cmake_c_flags_EncodingC}\"\n  cmake_cxx_flags_cmProcessOutput=\"${cmake_c_flags_EncodingC}\"\nfi\ncmake_cxx_flags_SystemTools=\"\n  -DKWSYS_CXX_HAS_SETENV=${KWSYS_CXX_HAS_SETENV}\n  -DKWSYS_CXX_HAS_UNSETENV=${KWSYS_CXX_HAS_UNSETENV}\n  -DKWSYS_CXX_HAS_ENVIRON_IN_STDLIB_H=${KWSYS_CXX_HAS_ENVIRON_IN_STDLIB_H}\n  -DKWSYS_CXX_HAS_UTIMENSAT=${KWSYS_CXX_HAS_UTIMENSAT}\n  -DKWSYS_CXX_HAS_UTIMES=${KWSYS_CXX_HAS_UTIMES}\n\"\ncmake_c_flags=\"${cmake_c_flags} \\\n  -DCMAKE_BOOTSTRAP \\\n  -I`cmake_escape_shell \\\"${cmake_bootstrap_dir}\\\"` \\\n  -I`cmake_escape_shell \\\"${cmake_source_dir}/Source\\\"` \\\n  -I`cmake_escape_shell \\\"${cmake_source_dir}/Source/LexerParser\\\"` \\\n  -I`cmake_escape_shell \\\"${cmake_source_dir}/Utilities\\\"`\"\ncmake_cxx_flags=\"${cmake_cxx_flags} \\\n  -DCMAKE_BOOTSTRAP \\\n  ${cmake_have_cxx_features} \\\n  -I`cmake_escape_shell \\\"${cmake_bootstrap_dir}\\\"` \\\n  -I`cmake_escape_shell \\\"${cmake_source_dir}/Source\\\"` \\\n  -I`cmake_escape_shell \\\"${cmake_source_dir}/Source/LexerParser\\\"` \\\n  -I`cmake_escape_shell \\\"${cmake_source_dir}/Utilities/std\\\"` \\\n  -I`cmake_escape_shell \\\"${cmake_source_dir}/Utilities\\\"`\"\nif test \"${cmake_bootstrap_generator}\" = \"Ninja\"; then\n  echo \"cc = ${cmake_c_compiler}\" > \"${cmake_bootstrap_dir}/build.ninja\"\n  echo \"cxx = ${cmake_cxx_compiler}\" >> \"${cmake_bootstrap_dir}/build.ninja\"\n  echo \"cflags = ${cmake_c_flags}\" >> \"${cmake_bootstrap_dir}/build.ninja\"\n  echo \"cxxflags = ${cmake_cxx_flags}\" >> \"${cmake_bootstrap_dir}/build.ninja\"\n  echo \"ldflags = ${cmake_ld_flags}\" >> \"${cmake_bootstrap_dir}/build.ninja\"\n  echo \"rule cc\" >> \"${cmake_bootstrap_dir}/build.ninja\"\n  echo \"  command = \\$cc \\$cflags \\$srcflags -c \\$in -o \\$out\" >> \"${cmake_bootstrap_dir}/build.ninja\"\n  echo \"rule cxx\" >> \"${cmake_bootstrap_dir}/build.ninja\"\n  echo \"  command = \\$cxx \\$cxxflags \\$srcflags -c \\$in -o \\$out\" >> \"${cmake_bootstrap_dir}/build.ninja\"\n  echo \"rule link\" >> \"${cmake_bootstrap_dir}/build.ninja\"\n  echo \"  command = \\$cxx \\$ldflags \\$cxxflags \\$in \\$libs -o \\$out\" >> \"${cmake_bootstrap_dir}/build.ninja\"\n  echo \"build cmake: link ${objs}\" >> \"${cmake_bootstrap_dir}/build.ninja\"\n  echo \"  libs = ${libs}\" >> \"${cmake_bootstrap_dir}/build.ninja\"\nelse\n  echo \"cmake: ${objs}\" > \"${cmake_bootstrap_dir}/Makefile\"\n  echo \"\t${cmake_cxx_compiler} ${cmake_ld_flags} ${cmake_cxx_flags} ${objs} ${libs} -o cmake\" >> \"${cmake_bootstrap_dir}/Makefile\"\nfi\nfor a in ${CMAKE_CXX_SOURCES}; do\n  src=`cmake_escape_artifact \"${cmake_source_dir}/Source/${a}.cxx\"`\n  src_flags=`eval echo \\\\${cmake_cxx_flags_\\${a}}`\n  write_source_rule \"cxx\" \"${a}.o\" \"${src}\" \"${src_flags}\"\ndone\nfor a in ${CMAKE_C_SOURCES}; do\n  src=`cmake_escape_artifact \"${cmake_source_dir}/Source/${a}.c\"`\n  write_source_rule \"c\" \"${a}.o\" \"${src}\" \"\"\ndone\nfor a in ${CMAKE_STD_CXX_SOURCES}; do\n  src=`cmake_escape_artifact \"${cmake_source_dir}/Utilities/std/cm/bits/${a}.cxx\"`\n  src_flags=`eval echo \\\\${cmake_cxx_flags_\\${a}}`\n  write_source_rule \"cxx\" \"${a}.o\" \"${src}\" \"${src_flags}\"\ndone\nfor a in ${LexerParser_CXX_SOURCES}; do\n  src=`cmake_escape_artifact \"${cmake_source_dir}/Source/LexerParser/${a}.cxx\"`\n  src_flags=`eval echo \\\\${cmake_cxx_flags_\\${a}}`\n  write_source_rule \"cxx\" \"${a}.o\" \"${src}\" \"${src_flags}\"\ndone\nfor a in ${LexerParser_C_SOURCES}; do\n  src=`cmake_escape_artifact \"${cmake_source_dir}/Source/LexerParser/${a}.c\"`\n  write_source_rule \"c\" \"${a}.o\" \"${src}\" \"\"\ndone\nfor a in ${KWSYS_C_SOURCES}; do\n  src=`cmake_escape_artifact \"${cmake_source_dir}/Source/kwsys/${a}.c\"`\n  src_flags=\"`eval echo \\\\${cmake_c_flags_\\${a}}` -DKWSYS_NAMESPACE=cmsys\"\n  write_source_rule \"c\" \"${a}.o\" \"${src}\" \"${src_flags}\"\ndone\nfor a in ${KWSYS_CXX_SOURCES}; do\n  src=`cmake_escape_artifact \"${cmake_source_dir}/Source/kwsys/${a}.cxx\"`\n  src_flags=\"`eval echo \\\\${cmake_cxx_flags_\\${a}}` -DKWSYS_NAMESPACE=cmsys\"\n  write_source_rule \"cxx\" \"${a}.o\" \"${src}\" \"${src_flags}\"\ndone\nif test \"x${bootstrap_system_libuv}\" = \"x\"; then\n  for a in ${LIBUV_C_SOURCES}; do\n    src=`cmake_escape_artifact \"${cmake_source_dir}/Utilities/cmlibuv/${a}\"`\n    write_source_rule \"c\" \"uv-`cmake_obj ${a}`\" \"${src}\" \"${uv_c_flags}\"\n  done\nfi\nif test \"x${bootstrap_system_librhash}\" = \"x\"; then\n  for a in ${LIBRHASH_C_SOURCES}; do\n    src=`cmake_escape_artifact \"${cmake_source_dir}/Utilities/cmlibrhash/${a}\"`\n    write_source_rule \"c\" \"rhash-`cmake_obj ${a}`\" \"${src}\" \"${librhash_c_flags}\"\n  done\nfi\nif test \"x${bootstrap_system_jsoncpp}\" = \"x\"; then\n  for a in ${JSONCPP_CXX_SOURCES}; do\n    src=`cmake_escape_artifact \"${cmake_source_dir}/Utilities/cmjsoncpp/${a}\"`\n    write_source_rule \"cxx\" \"jsoncpp-`cmake_obj ${a}`\" \"${src}\" \"${jsoncpp_cxx_flags}\"\n  done\nfi\nif test \"${cmake_bootstrap_generator}\" = \"Ninja\"; then\n  echo \"\nrule rebuild_cache\n  command = cd \\\"${cmake_binary_dir}\\\" && \\\"${cmake_source_dir}/bootstrap\\\" --generator=\\\"${cmake_bootstrap_generator}\\\"\n  generator = 1\nbuild build.ninja : rebuild_cache\n\" >> \"${cmake_bootstrap_dir}/build.ninja\"\nelse\n  echo \"\nrebuild_cache:\n\tcd \\\"${cmake_binary_dir}\\\" && \\\"${cmake_source_dir}/bootstrap\\\" --generator=\\\"${cmake_bootstrap_generator}\\\"\n\" >> \"${cmake_bootstrap_dir}/Makefile\"\nfi\n\n# Write our default settings to Bootstrap${_cmk}/InitialCacheFlags.cmake.\necho '\n# Generated by '\"${cmake_source_dir}\"'/bootstrap\n# Default cmake settings.  These may be overridden any settings below.\nset (CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"Choose the type of build.\") # not FORCE to preserve defaults specified elsewhere\nset (CMAKE_INSTALL_PREFIX \"'\"${cmake_prefix_dir}\"'\" CACHE PATH \"Install path prefix, prepended onto install directories.\" FORCE)\nset (CMAKE_DOC_DIR \"'\"${cmake_doc_dir}\"'\" CACHE PATH \"Install location for documentation (relative to prefix).\" FORCE)\nset (CMAKE_MAN_DIR \"'\"${cmake_man_dir}\"'\" CACHE PATH \"Install location for man pages (relative to prefix).\" FORCE)\nset (CMAKE_BIN_DIR \"'\"${cmake_bin_dir}\"'\" CACHE PATH \"Install location for binaries (relative to prefix).\" FORCE)\nset (CMAKE_DATA_DIR \"'\"${cmake_data_dir}\"'\" CACHE PATH \"Install location for data (relative to prefix).\" FORCE)\nset (CMAKE_XDGDATA_DIR \"'\"${cmake_xdgdata_dir}\"'\" CACHE PATH \"Install location for XDG specific files (relative to prefix).\" FORCE)\n' > \"${cmake_bootstrap_dir}/InitialCacheFlags.cmake\"\n\n# Add configuration settings given as command-line options.\nif test \"x${cmake_bootstrap_qt_gui}\" != \"x\"; then\n  echo '\nset (BUILD_QtDialog '\"${cmake_bootstrap_qt_gui}\"' CACHE BOOL \"Build Qt dialog for CMake\" FORCE)\n' >> \"${cmake_bootstrap_dir}/InitialCacheFlags.cmake\"\nfi\nif test \"x${cmake_bootstrap_qt_qmake}\" != \"x\"; then\n  echo '\nset (QT_QMAKE_EXECUTABLE \"'\"${cmake_bootstrap_qt_qmake}\"'\" CACHE FILEPATH \"Location of Qt qmake\" FORCE)\n' >> \"${cmake_bootstrap_dir}/InitialCacheFlags.cmake\"\nfi\nif test \"x${cmake_bootstrap_debugger}\" != \"x\"; then\n  echo '\nset (CMake_ENABLE_DEBUGGER '\"${cmake_bootstrap_debugger}\"' CACHE BOOL \"Enable CMake debugger support\" FORCE)\n' >> \"${cmake_bootstrap_dir}/InitialCacheFlags.cmake\"\nfi\nif test \"x${cmake_sphinx_info}\" != \"x\"; then\n  echo '\nset (SPHINX_INFO \"'\"${cmake_sphinx_info}\"'\" CACHE BOOL \"Build Info manual with Sphinx\" FORCE)\n' >> \"${cmake_bootstrap_dir}/InitialCacheFlags.cmake\"\nfi\nif test \"x${cmake_sphinx_man}\" != \"x\"; then\n  echo '\nset (SPHINX_MAN \"'\"${cmake_sphinx_man}\"'\" CACHE BOOL \"Build man pages with Sphinx\" FORCE)\n' >> \"${cmake_bootstrap_dir}/InitialCacheFlags.cmake\"\nfi\nif test \"x${cmake_sphinx_html}\" != \"x\"; then\n  echo '\nset (SPHINX_HTML \"'\"${cmake_sphinx_html}\"'\" CACHE BOOL \"Build html help with Sphinx\" FORCE)\n' >> \"${cmake_bootstrap_dir}/InitialCacheFlags.cmake\"\nfi\nif test \"x${cmake_sphinx_qthelp}\" != \"x\"; then\n  echo '\nset (SPHINX_QTHELP \"'\"${cmake_sphinx_qthelp}\"'\" CACHE BOOL \"Build qch help with Sphinx\" FORCE)\n' >> \"${cmake_bootstrap_dir}/InitialCacheFlags.cmake\"\nfi\nif test \"x${cmake_sphinx_latexpdf}\" != \"x\"; then\n  echo '\nset (SPHINX_LATEXPDF \"'\"${cmake_sphinx_latexpdf}\"'\" CACHE BOOL \"Build PDF help with Sphinx using LaTeX\" FORCE)\n' >> \"${cmake_bootstrap_dir}/InitialCacheFlags.cmake\"\nfi\nif test \"x${cmake_sphinx_build}\" != \"x\"; then\n  echo '\nset (SPHINX_EXECUTABLE \"'\"${cmake_sphinx_build}\"'\" CACHE FILEPATH \"Location of Qt sphinx-build\" FORCE)\n' >> \"${cmake_bootstrap_dir}/InitialCacheFlags.cmake\"\nfi\nif test \"x${cmake_sphinx_flags}\" != \"x\"; then\n  echo '\nset (SPHINX_FLAGS [==['\"${cmake_sphinx_flags}\"']==] CACHE STRING \"Flags to pass to sphinx-build\" FORCE)\n' >> \"${cmake_bootstrap_dir}/InitialCacheFlags.cmake\"\nfi\n\n# Add user-specified settings.  Handle relative-path case for\n# specification of cmake_init_file.\n(\ncd \"${cmake_binary_dir}\"\nif test -f \"${cmake_init_file}\"; then\n  cat \"${cmake_init_file}\" >> \"${cmake_bootstrap_dir}/InitialCacheFlags.cmake\"\nfi\n)\n\necho \"---------------------------------------------\"\n\n# Run make to build bootstrap cmake\nif test \"${cmake_bootstrap_generator}\" = \"Ninja\"; then\n  ninja_v=-v\nelse\n  ninja_v=\nfi\nif test \"x${cmake_parallel_make}\" != \"x\"; then\n  ${cmake_make_processor} ${cmake_make_flags} ${ninja_v}\nelse\n  ${cmake_make_processor} ${ninja_v}\nfi\nRES=$?\nif test \"${RES}\" -ne \"0\"; then\n  cmake_error 9 \"Problem while running ${cmake_make_processor}\"\nfi\ncd \"${cmake_binary_dir}\"\n\n# Set C, CXX, and MAKE environment variables, so that real real cmake will be\n# build with same compiler and make\nCC=\"${cmake_c_compiler}\"\nCXX=\"${cmake_cxx_compiler}\"\nMAKE=\"${cmake_make_processor}\"\nexport CC\nexport CXX\nexport MAKE\nexport CFLAGS\nexport CXXFLAGS\nexport LDFLAGS\n\n# Run bootstrap CMake to configure real CMake\ncmake_options=\"-DCMAKE_BOOTSTRAP=1\"\nif test -n \"${cmake_verbose}\"; then\n  cmake_options=\"${cmake_options} -DCMAKE_VERBOSE_MAKEFILE=1\"\nfi\n\"${cmake_bootstrap_dir}/cmake\" \"${cmake_source_dir}\" \"-C${cmake_bootstrap_dir}/InitialCacheFlags.cmake\" \"-G${cmake_bootstrap_generator}\" ${cmake_options} ${cmake_bootstrap_system_libs} \"$@\"\nRES=$?\nif test \"${RES}\" -ne \"0\"; then\n  cmake_error 11 \"Problem while running initial CMake\"\nfi\n\necho \"---------------------------------------------\"\n\n# And we are done. Now just run make\necho \"CMake has bootstrapped.  Now run ${cmake_make_processor}.\"\n"
        },
        {
          "name": "cmake_uninstall.cmake.in",
          "type": "blob",
          "size": 0.775390625,
          "content": "if(NOT EXISTS \"@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt\")\n  message(FATAL_ERROR \"Cannot find install manifest: \\\"@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt\\\"\")\nendif()\n\nfile(READ \"@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt\" files)\nstring(REPLACE \"\\n\" \";\" files \"${files}\")\nforeach(file ${files})\n  message(STATUS \"Uninstalling \\\"$ENV{DESTDIR}${file}\\\"\")\n  if(EXISTS \"$ENV{DESTDIR}${file}\")\n    execute_process(\n      COMMAND \"@CMAKE_COMMAND@\" -E rm -f \"$ENV{DESTDIR}${file}\"\n      OUTPUT_VARIABLE rm_out\n      RESULT_VARIABLE rm_retval\n      )\n    if(\"${rm_retval}\" STREQUAL 0)\n    else()\n      message(FATAL_ERROR \"Problem when removing \\\"$ENV{DESTDIR}${file}\\\"\")\n    endif()\n  else()\n    message(STATUS \"File \\\"$ENV{DESTDIR}${file}\\\" does not exist.\")\n  endif()\nendforeach()\n"
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 0.0966796875,
          "content": "#!/bin/sh\ncmake_source_dir=`cd \"\\`dirname \\\"$0\\\"\\`\";pwd`\nexec \"${cmake_source_dir}/bootstrap\" \"$@\"\n"
        }
      ]
    }
  ]
}