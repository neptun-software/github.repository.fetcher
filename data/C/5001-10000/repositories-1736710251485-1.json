{
  "metadata": {
    "timestamp": 1736710251485,
    "page": 1,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "libvips/libvips",
      "stars": 9942,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.6572265625,
          "content": "BasedOnStyle: GNU\nAccessModifierOffset: -4\nAlignAfterOpenBracket: DontAlign\nAlignEscapedNewlines: DontAlign\nAlignOperands: DontAlign\nAllowAllArgumentsOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Stroustrup\nIndentWidth: 4\nSortIncludes: Never\nSpaceAfterCStyleCast: true\nSpaceBeforeParens: ControlStatements\nTabWidth: 4\nUseTab: Always\n# Our column limit is actually 80, but setting that results in clang-format\n# making a lot of dubious hanging-indent choices; disable it and assume the\n# developer will line wrap appropriately. clang-format will still check\n# existing hanging indents.\nColumnLimit: 0\n"
        },
        {
          "name": ".codespellrc",
          "type": "blob",
          "size": 0.240234375,
          "content": "[codespell]\nskip = .git,*.pdf,*.svg,./test/test-suite/images,./fuzz/common_fuzzer_corpus,./build/meson-private,./build,*.gir,*.po,./cplusplus/html,./libvips/deprecated,*.xml\nignore-words-list = gir,ody,te,tre,mmaped,openin,dout,inout,co-ordinate\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2138671875,
          "content": "# http://editorconfig.org\n\n[*]\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.{cpp,c,h}]\nindent_style = tab\nindent_size = 4\n\n[*.py]\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.4892578125,
          "content": "# Since version 2.23 (released in August 2019), git-blame has a feature\n# to ignore or bypass certain commits.\n#\n# This file contains a list of commits that are not likely what you\n# are looking for in a blame, such as mass reformatting or renaming.\n# You can set this file as a default ignore file for blame by running\n# the following command.\n#\n# $ git config blame.ignoreRevsFile .git-blame-ignore-revs\n\n# Enforce code consistency with clang-format (#3125)\n873ae7305f07a3a1493249148c1d0f0a0407f797\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4296875,
          "content": "# Shell scripts sources can't have CRLF line endings\n*.sh eol=lf\n\n# Ignore repository language statistics and hide diffs for generated files\nlibvips/colour/profiles.c linguist-generated=true\n\n# Omit from release tarball\n.clang-format export-ignore\n.codespellrc export-ignore\n.editorconfig export-ignore\n.git-blame-ignore-revs export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\n.gitkeep export-ignore\n.github/ export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.416015625,
          "content": "### C\n# Object files\n*.o\n\n# Libraries\n*.a\n*.la\n*.lo\n\n# Build directories\nbuild/\ndebug/\nrelease/\n\n# Executables\n*.out\n### End of C\n\n### Python\n# Byte-compiled / optimized\n__pycache__/\n*.py[cod]\n\n# Unit test\n.pytest_cache/\n### End of Python\n\n### VIM\n# Temporary files\n*~\ntmp\ntmp-*\n\n# Swap\n.*.swp\n.*.swo\n\n# Backup\n*.bak\n\n# Auto-generated tag files\ntags\nTAGS\n### End of VIM\n\n### Distribution\nvips-*.tar.gz\n### End of Distribution\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.6181640625,
          "content": "libvips Code of Conduct\n=======================\n\nlibvips, is developed and maintained by a mixed group of professionals and\nvolunteers from all over the world.\n\nWe ask people to adhere to a few ground rules. They apply equally to founders,\nmaintainers, contributors and those seeking help and guidance.\n\nThis is not meant to be an exhaustive list of things you are not allowed to do.\nWe rather would like you to think of it as a guide to enrich our community and\nthe technical community in general with new knowledge and perspectives by\nallowing everyone to participate.\n\nThis code of conduct applies to all spaces managed by the libvips\ncommunity. This includes the mailing list, our GitHub projects, face to face\nevents, and any other forums created by the community for communication\nwithin the community. In addition, violations of this code outside these\nspaces may also affect a person's ability to participate within them.\n\nIf you believe someone is violating the code of conduct, we ask that you\nreport it.\n\n-   **Be friendly and patient.**\n-   **Be welcoming.** We strive to be a community that welcomes and supports\n    people of all backgrounds.\n-   **Be considerate.** Your work will be used by other people, and you in turn\n    will depend on the work of others. Any decision you take will affect users\n    and colleagues, and you should take those consequences into account when\n    making decisions. Remember that we're a world-wide community, so you might\n    not be communicating in someone else's primary language.\n-   **Be respectful.** Not all of us will agree all the time, but disagreement\n    is no excuse for poor behavior and poor manners. We might all experience\n    some frustration now and then, but we cannot allow that frustration to turn\n    into a personal attack. It’s important to remember that a community where\n    people feel uncomfortable or threatened is not a productive one. Members of\n    our community should be respectful when dealing with other members as\n    well as with people outside the our community.\n-   **Be careful in the words that you choose.** We are a community of\n    professionals, and we conduct ourselves professionally. Be kind to others.\n    Do not insult or put down other participants. Harassment and other\n    exclusionary behavior aren't acceptable. This includes, but is not limited\n    to:\n    -   Violent threats or language directed against another person.\n    -   Discriminatory jokes and language.\n    -   Posting sexually explicit or violent material.\n    -   Posting (or threatening to post) other people's personally identifying\n        information (\"doxing\").\n    -   Personal insults, especially those using racist or sexist terms.\n    -   Unwelcome sexual attention.\n    -   Advocating for, or encouraging, any of the above behavior.\n    -   Repeated harassment of others. In general, if someone asks you to stop,\n        then stop.\n-   **When we disagree, try to understand why.** Disagreements, both social and\n    technical, happen all the time. It is important that we resolve\n    disagreements and differing views constructively. Remember that we’re\n    different. The strength of group software development comes from its\n    varied community, people from a wide range of backgrounds. Different\n    people have different perspectives on issues. Being unable to understand\n    why someone holds a viewpoint doesn’t mean that they’re wrong. Don’t\n    forget we all make mistakes and blaming each other doesn’t get us\n    anywhere. Instead, focus on helping to resolve issues and learning\n    from mistakes.\n\nText based on the Code of Conduct of the [Django\ncommunity](https://www.djangoproject.com/conduct/).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.4814453125,
          "content": "# Contributing to libvips\n\nThank you for your interest in contributing to libvips! There are many ways to\ncontribute, and we appreciate all contributions.\n\n## Code style\n\nThis project uses `clang-format` to maintain a consistent code style throughout\nthe codebase. We recommend using version 14 (as available in Ubuntu 22.04), to\navoid any formatting mismatch with our [GitHub Actions lint check](\n.github/workflows/lint.yml).\n\n`clang-format` can be used via the `git-clang-format` script. On some systems,\nit may already be installed (or be installable via your package manager). If\nso, you can simply run it – the following commands will format only the code\non the staged changes:\n```shell\n# Stage original changes\n$ git add .\n\n# Run clang-format on staged changes\n$ git clang-format\n\n# Stage formatting changes and commit\n$ git add .\n$ git commit -m \"My commit message\"\n```\n\nAlternatively, you can format only the code changed in the most recent commit:\n```shell\n$ git clang-format HEAD~1\n```\n\nNote that this modifies the files, but doesn't commit them – you'll likely want\nto run:\n```shell\n$ git commit --amend -a\n```\n\nin order to update the last commit with all pending changes.\n\nIn an emergency, reformat the entire project with something like:\n\n```shell\nfind . \\\n  \\( -name \"*.[hc]\" -o -name \"*.cc\" -o -name \"*.cpp\" \\) \\\n  -not \\( -path \"./libvips/foreign/libnsgif/*\" -o \\\n    -name vips-operators.cpp -o \\\n    -name StandaloneFuzzTargetMain.c -o \\\n    -name profiles.c \\) | \\\n  xargs clang-format -i\n```\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 153.75,
          "content": "8.17.0\n\n- add `keep_duplicate_frames` option to GIF save [dloebl]\n- add Magic Kernel support [akimon658]\n- tiff: add threadsafe warning/error handlers (requires libtiff 4.5.0+) [lovell]\n- tiffload: add support for fail_on flag [lovell]\n- tiffload: add support for unlimited flag (requires libtiff 4.7.0+) [lovell]\n\n8.16.1\n\n- support multipage JXL\n- fix PFM byte order on big-endian machines [agoode]\n- morph: fix erode Highway path [kleisauke]\n- morph: fix C-paths with masks containing zero [kleisauke]\n- fix `--vips-info` CLI flag with GLib >= 2.80 [kleisauke]\n- make `subsample-mode=on` and `lossless=true` mutually exclusive [kleisauke]\n- fix SZI write with openslide4 [goran-hc]\n- heifsave: prevent use of AV1 intra block copy feature [lovell]\n- threadpool: improve cooperative downsizing [kleisauke]\n- fix alpha shift during colourspace conversions [frederikrosenberg]\n- heifsave: set image orientation using irot and imir transformations [lovell]\n- XYZ2Yxy: guard against divide by zero\n- fix MSVC compile error [na-trium-144]\n- exif: ensure enumerated entries can to converted to string values [lovell]\n\n10/10/24 8.16.0\n\n- allow small offsets for the PDF magic string [project0]\n- add support for OJPEG tiffs [DarthSim]\n- add \"palette\" metadata item to flag palette images [DarthSim]\n- jxl load and save now support exif, xmp, animation [DarthSim]\n- improved configure output\n- add a filetype blocker for imagemagick\n- add basic g_auto support\n- support for long EXIF values [MarcosAndre]\n- better system error messages on windows [kleisauke]\n- add configurable max coordinate and vips_max_coord_get()\n- improve kill handling\n- PFM save and load now uses scRGB (ie. linear 0-1) [NiHoel]\n- turn vips_addalpha() into a VipsOperation [RiskoZoSlovenska]\n- add vips_rawsave_target(), vips_rawsave_buffer() [akash-akya]\n- vipsheader supports multiple \"-f field\" arguments [sergeevabc]\n- add \"target_size\" to webpsave [john-parton]\n- add \"passes\" to webpsave [john-parton]\n- revise sRGB -> B_W coefficients [daniellovera]\n- add vips_sdf(), vips_clamp(), vips_maxpair(), vips_minpair()\n- more const for the C++ API [Julianiolo]\n- deprecate \"cache\" (use tilecache instead)\n- add tests for tokenisation\n- add \"unpack_complex\" option to vips_getpoint()\n- add deflate compression level setting to tiffsave [ruven]\n- add \"smart_deblock\" to webpsave [goodusername123]\n\n4/10/24 8.15.5\n\n- version bump, revise C++ soname\n\n3/10/24 8.15.4\n\n- fix an off-by-one error in vips__token_get()\n- heifsave: fix crash when passing an invalid bitdepth [kleisauke]\n- webpsave: fix memory leak on error [dloebl]\n- heifsave: ensure NCLX profile is freed in lossless mode [kleisauke]\n- threadpool: fix a race condition in error handling [kleisauke]\n- disable GLib cast checks and asserts for plain builds [kleisauke]\n- fix jpeg in tiff for high Q [nahilsobh]\n- threadset: fix a race condition during thread exit [kleisauke]\n- fix compatibility with MSVC [Julianiolo]\n\n11/8/24 8.15.3\n\n- fix dzsave of >8-bit images to JPEG\n- jpegsave: fix chrominance subsampling mode with jpegli [kleisauke]\n- pngload: disable ADLER32/CRC checking in non-fail mode [kleisauke]\n- improve target_clones support check [kleisauke]\n- fix pipe read limit\n- fix a rare crash on Windows in highly threaded applications [Julianiolo]\n- vipssave: fix infinite loop on Windows with large images [pdbourke]\n- conva: fix a crash with {u,}{short,int} images [erdmann]\n- fix vips_image_get_string\n- heifsave: fix lossless mode [kleisauke]\n- composite: fix dest-atop blend mode [kleisauke]\n- fix vips_source_map for zero-length sources [kleisauke]\n\n12/3/24 8.15.2\n\n- fix deflate compression of tiff pyramids [manthey]\n- thumbnail always writes 8-bit thumbnails [turtletowerz]\n- lower min scale factor to 0.0 in svgload and pdfload [lovell]\n- heifload: don't warn on images with nclx profiles [kleisauke]\n- ppmload: ensure multi-line comments are skipped [lovell]\n- fix arrayjoin with some pipelines [TheEssem]\n- fix high Q mono JPEG TIFF write with mozjpeg [cavenel]\n- tiffsave: ensure large file support (>2GB) on MSVC [kleisauke]\n- check linker for target_clones support [lovell]\n\n18/12/23 8.15.1\n\n- reduceh: fix Highway path on SSE2 [DarthSim]\n- fix JPEG in TIFF colourspace for Q >= 90 [heman1-test]\n- fix build with upcoming libjxl 0.9 [kleisauke]\n- jxlsave: lower min effort value to 1 [DarthSim]\n- fix build without libjpeg [ionenwks]\n- fix vips7 plugin load [jcupitt]\n- allow \".jfif\" as a suffix for jpegsave [casperbrike]\n- don't let the magick sniffer hijack TIFF [kleisauke]\n- ignore BLOCKED classes in foreign map [jcupitt]\n- add locks to fftw3 calls [akash-akya]\n\n11/11/23 8.15.0\n\n- add support for target_clones attribute [lovell]\n\t* use with (un)premultiply for ~10% perf gain on AVX CPUs\n\t* use with XYZ to LAB colourspace conversion for ~10% perf gain on AVX CPUs\n- add fast path to extract_band and bandjoin for uchar images [lovell]\n- reduce `vips_sharpen` max `sigma` to 10 [lovell]\n- inline scRGB to XYZ colourspace conversion, ~2x faster [lovell]\n- set \"interlaced=1\" for interlaced GIF images [kleisauke]\n- add @line_art to find_trim [miltoncandelero]\n- improve C++ binding [MathemanFlo]\n\t* add `inplace()` / `VImage::new_from_memory_copy()`\n\t* add overloads for `draw_*()` / `VImage::thumbnail_buffer()`\n- allow negative line spacing in text [donghuikugou]\n- add VIPS_META_BITS_PER_SAMPLE metadata, deprecate the\n  \"palette-bit-depth\" and \"heif-bitdepth\" meta fields [MathemanFlo]\n- add \"revalidate\" to foreign loaders [jcupitt]\n- add `premultiplied` option to smartcrop [lovell]\n- add \"prewitt\" and \"scharr\" edge detectors, \"sobel\" is more accurate for\n  non-uchar formats [jcupitt]\n- add support for forms in pdfium loader [kleisauke]\n- swap built-in profiles with ICC v4 variants [kleisauke]\n- remove libgsf dependency in favor of libarchive [kleisauke]\n- better chunking for small shrinks [jcupitt]\n- use alpha range of 0.0 - 1.0 for scRGB images [DarthSim]\n- add support for 16-bit float TIFFs [DarthSim]\n- add direct mode to dzsave [jcupitt]\n- require C++11 as a minimum standard [kleisauke]\n- add support for SIMD via Highway [kleisauke]\n- threaded write in tiffsave for tiled JPEG and JPEG2000 [jcupitt]\n- add vips_thread_execute() to the public API [jcupitt]\n- add \"keep\" flag to foreign savers, deprecate \"strip\" [a3mar]\n- improve scRGB handling [jcupitt]\n\n18/9/23 8.14.5\n\n- fix a crash with alpha plus icc_import and icc_export [jcupitt]\n- fix a crash in jxlsave [jcupitt]\n\n15/8/23 8.14.4\n\n- fix null-pointer dereference during svgload [kleisauke]\n- heif{load,save}: guard against NULL strings [kleisauke]\n- pdfiumload: fix rendering of pages with different sizes [DarthSim]\n\n20/7/23 8.14.3\n\n- fix ICC handling of greyscale images with a incompatible profile [kleisauke]\n- fix use-after-free during tiff pyramid save [kleisauke]\n- fix vips7 PNG load and save when using libspng [jcupitt]\n- tiffload: slightly relax tile size sanity check [lovell]\n- heifsave: limit dimensions to a maximum edge of 16384 [lovell]\n- colourspace: ensure CMYK conversion uses the embedded ICC profile [kleisauke]\n- ensure chromatic adaptation during icc_{im,ex}port() [kleisauke]\n- improve ICC compatibility check for CMYK images [kleisauke]\n\n21/3/23 8.14.2\n\n- use a private fontmap in vips_text() [jcupitt]\n- increase sanity checks on TIFF tile dimensions [lovell]\n- ensure compatibility with libheif > 1.14.2 [kleisauke]\n- minor doc fixes [jcupitt]\n- sanitise dimensions in JPEG-compressed TIFF images [lovell]\n- fix target pnm write [ewelot]\n- dedupe FITS header write [ewelot]\n- fix `strip` parameter in webpsave [jcupitt]\n- earlier abort of webpsave on kill [dloebl]\n- fix thumbnail of CMYK images with an embedded ICC profile [kleisauke]\n- fix ICC handling of RGB images with a monochrome profile [kleisauke]\n- ensure ICC transforms keep all precision [kleisauke]\n- fix openslideload associated=XXX load [jcupitt]\n- fix compatibility with MSVC [SpaceIm]\n\n9/1/23 8.14.1\n\n- add vips_thread_isworker() compatibility function [remicollet]\n- add vips_semaphore_down_timeout() [kleisauke]\n- idle threads are removed after 15s [kleisauke]\n- fix version number in gtk-doc index [kleisauke]\n- save mono fits images as NAXIS=2 [ewelot]\n- fix jpeg `autorotate` for orientation 3 [zhifengzhuang]\n\n22/12/22 8.14.0\n\n- remove autotools\n- remove various obsolete scripts\n- remove benchmark\n- `jp2ksave` defaults to chroma subsample off, and jp2 write\n- don't minimise `vips_sink_screen()` input after expose ... improves\n  caching during interactive use\n- require libjxl 0.6+\n- add `interlace` option to GIF save [dloebl]\n- magick load sets `magick-format` metadata [aksdb]\n- add `.pnm` save [ewelot]\n- threaded tiff jp2k and jpeg decompress\n- improve speed and efficiency of animated WebP write [dloebl]\n- add `rgb` mode to openslideload\n- new thread recycler\n- threadpools size dynamically with load\n- operations can hint threadpool size\n- faster `dzsave`\n- support for N-colour ICC profiles\n- add bash completions for `vips`\n- fits load and allows many more bands\n- fits write doesn't duplicate header fields\n- add `wrap` to `vips_text()`\n- GIF load supports truncated frames [tlsa]\n- EXIF support for PNG load and save\n- expose location of interest when using attention based cropping [ejoebstl]\n- deprecate gifsave `reoptimise`, add `reuse`\n- add `encoder` to heifsave [dloebl]\n- add `cplusplus` meson build option [jcupitt]\n- make arrayjoin much faster with large arrays\n\n9/11/22 started 8.13.4\n- missing include in mosaic_fuzzer [ServOKio]\n- emit \"finish\" at the end of targetcustom write [lucaskanashiro]\n\n11/10/22 started 8.13.3\n- improve rules for 16-bit heifsave [johntrunc]\n- improve libspng palette write [kleisauke]\n- improve libspng palette sort [DarthSim]\n- ensure EXIF has prefix before parsing [lovell]\n- fix low bit depth palette spng save [DarthSim]\n- fix thumbnail of non-sRGB images with an export profile [kleisauke]\n\n5/9/22 started 8.13.2\n- in dzsave, add add missing include directive for errno/EEXIST [kleisauke]\n- fix 8 bit palette PNG save [lovell]\n- fix null string in buffer print [pclewis]\n- revise caching of seq mode loaders [jcupitt]\n- reduce latency on dzsave kill [kleisauke]\n- improve text too large check [kleisauke]\n- fix subifd writing for small images [ruven]\n- name ICC profiles in spngsave [lovell]\n\n24/7/22 started 8.13.1\n- fix im7 feature detection in meson\n- add a summary table at the end of configure in meson\n- fix libpng fallback when spng is disabled in meson\n- add \"unlimited\" to jpegload\n- better 0 detection in unpremultiply\n- fix low bitdepth spng save [jeffska]\n- fix PNG low bitdepth save of high bitdepth images\n- add support for libjxl 0.7 [kleisauke]\n- improve compatibility with older libgsf versions [kleisauke]\n\n21/11/21 started 8.13\n- configure fails for requested but unmet dependencies [remicollet]\n- add support for another quantiser [DarthSim]\n- add \"extend\", \"background\" and \"premultiplied\" to vips_mapim() to fix edge\n  antialiasing [GavinJoyce]\n- add support for HDR HEIC and AVIF images\n- add vips_spngsave()\n- jpeg2000 load left-justifies bitdepth\n- add \"password\" option to pdfload, fix byte ordering of \"background\"\n- add vips_operation_block_set(), vips_block_untrusted_set()\n- improve the pixel rng\n- new meson build system [tintou]\n- improve introspection annotations [tintou]\n- add \"unlimited\" to heifload [lovell]\n- add support for regions in C++ API [shado23]\n- add \"maxerror\" to gifsave [dloebl]\n- update libnsgif API [tlsa]\n- deprecate \"properties\" option to dzsave (now always on)\n- add vips_dzsave_buffer()\n- always set the min stack size for pthreads, if we can\n- add \"fail-on\" to thumbnail\n- add \"gap\" option to vips_reduce[hv]() and vips_resize() [kleisauke]\n- add \"ceil\" option to vips_shrink() [kleisauke]\n- quality improvements for image resizing [kleisauke]\n- add vips_source_new_from_target()\n- add vips_target_seek(), vips_target_read(), vips_target_new_temp()\n- add vips_tiffsave_target()\n- add vips_target_end(), deprecate vips_target_finish()\n- add \"mixed\" to webpsave [dloebl]\n- add support for ICC profiles and linear encoding to JXL load and save [f1ac]\n- add \"reoptimise\" to gifsave [dloebl]\n- add \"bitdepth\" to magicksave [dloebl]\n- change default PNG filter to \"none\" [lovell]\n\n26/11/21 started 8.12.3\n- better arg checking for vips_hist_find_ndim() [travisbell]\n- fix thumbnail with CMYK output [AdamGaskins]\n- fix size_t / ssize_t confusion [flga]\n- fix jxl compatibility break [lovell]\n\n26/11/21 started 8.12.2\n- make exif resuint optional and default to inch\n- win: don't set create time on inappropriate file descriptors [lovell]\n- fall back to magicksave for gif if cgif is not present [erik-frontify]\n- fix a crash with 0 length vectors\n- change default frame delay for GIFs from 1s to 0.1s\n- remove stray trailing comma from iiif3 dirnames [whalehub]\n- fix TTF load [chregu]\n- revise GIF save alpha threshold [jfcalvo]\n- raise libpng pixel size limit from 1m to 10m pixels [jskrzypek]\n- fix gif save change detector [TheEssem]\n- fix load from pipe with variable size reads\n\n21/11/21 started 8.12.1\n- fix insert [chregu]\n\n14/6/21 started 8.12\n- all tools support `--version`\n- add vips_svgload_string() convenience function\n- fix thumbnail with small image plus crop plus no upsize [Andrewsville]\n- rename speed / reduction-effort / etc. params as \"effort\"\n- add gifsave [lovell]\n- arrayjoin minimises inputs during sequential processing, saving a lot of\n  memory and file descriptors\n- add vips_image_get_format_max()\n- flatten handles out of range alpha and max_alpha correctly\n- don't use atexit for cleanup, it's too unreliable\n- tiff writer loops for the whole image rather than per page [LionelArn2]\n- fix VipsSource with named pipes [vibbix]\n- added restart_interval option to jpegsave [manthey]\n- add IIIF3 support to dzsave [martimpassos]\n- add atan2 to math2 [indus]\n- improve buffer and target save file format selection\n- added VipsForeignPpmFormat, format arg to ppm savers\n- add fail-on to give better control over loader error sensitivity\n- add hyperbolic functions sinh, cosh, tanh, asinh, acosh, atanh [hroskes]\n- add untiled jp2k load\n- \"insert\" will minimise in seq mode\n- better EXIF string handling [lovell]\n\n16/8/21 started 8.11.4\n- fix off-by-one error in new rank fast path\n- add \"unlimited\" flag to png load [joshuamsager]\n- improve filtering of .v enums [lovell]\n- better logic to prevent shrink to nothing in thumbnail [kleisauke]\n\n14/7/21 started 8.11.3\n- build threadpool later [kleisauke]\n- add jxlsave prototypes [adil-benameur]\n- limit text chunks in PNGs [randy408]\n\n15/6/20 started 8.11.2\n- better libdir guessing [remi]\n- fix tiff pyramid creation with jp2k compression (was broken by 8.11.1)\n- don't load modules if we're built without modules\n\n18/6/21 started 8.11.1\n- add more example code to C docs\n- update libtool support in configure.ac\n- more startup info if VIPS_INFO is set\n- command-line programs set glib prgname (no longer set for you by VIPS_INIT)\n- enable strip chopping for TIFF read [DavidStorm]\n- disable modules by default for static builds [kleisauke]\n- fix jpeg tiff pyramid save\n\n14/8/20 started 8.11\n- add vips_jpegload_source() and vips_svgload_source() to public C API\n- integrate doxygen in build system to generate C++ API docs\n- improve C++ API doc comments\n- add VipsInterpolate and guint64 support to C++ API\n- add VImage::new_from_memory_steal [Zeranoe]\n- vipsthumbnail supports stdin / stdout thumbnailing\n- have a lock just for pdfium [DarthSim]\n- get pdfium load building again [Projkt-James]\n- add _source load support for pdfium\n- add \"seed\" param to perlin, worley and gaussnoise\n- add vips_source_g_input_stream_new() to load images from a GInputStream\n- add openslideload_source(), vipsload_source(), vipssave_target()\n- add hist path to rank for large windows on uchar images\n- better 8/16-bit choice for pngsave\n- avoid NaN in mapim [afontenot]\n- hist_find outputs a double histogram for large images [erdmann]\n- fix ref leaks in mosaicing package\n- run libvips leak test in CI\n- add vips_fitsload_source(), vips_niftiload_source()\n- png and gif load note background colour as metadata [781545872]\n- add vips_image_[set|get]_array_double()\n- add GIF load with libnsgif\n- add jp2kload, jp2ksave\n- add jp2k compression to tiff load and save\n- add JPEG-XL load and save\n- add black_point_compensation flag for icc transforms\n- add \"rgba\" flag to vips_text() to enable full colour text rendering\n- move openslide, libheif, poppler and magick to loadable modules [kleisauke]\n- better detection of invalid ICC profiles, better fallback paths\n- add \"premultiply\" flag to tiffsave\n- new threading model has a single threadpool shared by all\n  pipelines [kleisauke]\n\n30/4/21 start 8.10.7\n- better vips7 PNG load compatibility [SkyDiverCool]\n- fix load of large PPM images from a pipe [ewelot]\n\n22/12/20 start 8.10.6\n- don't seek on bad file descriptors [kleisauke]\n- check for null memory sources [kleisauke]\n- improve ppmload, fixing a couple of small bugs\n- improve EOF detection in jpegload [bozaro]\n- improve error detection in spngload [randy408]\n- fix includes of glib headers in C++ [lovell]\n- fix build with more modern librsvg [lovell]\n- fix a possible segv with very wide images [f1ac]\n- fix issue thumbnailing RGBA images in linear mode [jjonesrs]\n- improve vipsthumbnail profile handling\n- fix tiff deflate predictor setting [Adios]\n- fix vector path for composite on i386 [kleisauke]\n\n18/12/20 started 8.10.5\n- fix potential /0 in animated webp load [lovell]\n\n14/12/20 started 8.10.4\n- fix spng detection\n\n18/10/20 started 8.10.3\n- relax heic is_a rules [hisham]\n- fix vips7 webp load [barryspearce]\n- fix out of bounds exif read in heifload\n- fix out of bounds read in tiffload\n- fix tiffsave region shrink mode [imgifty]\n- add missing flushes on write to target [harukizaemon]\n- hide info messages you could get with some older glibs [kleisauke]\n- fix --no-strip on dzsave with icc-profiles [altert]\n- better GraphicsMagick image write [bfriesen]\n- add missing read loops to spng, heif, giflib and ppm load [kleisauke]\n- block zero width or height images from imagemagick load [Koen1999]\n- check for overflow in gifload height [lovell]\n- fix msb_first default in ppm load and save [ewelot]\n- force binary mode on win for connection read / write [Alreiber]\n- better testing for output to target [barryspearce]\n- ppmload_source was missing is_a [ewelot]\n- improve webpload rounding and blending behaviour [lovell]\n- fix range clip in int32 -> unsigned casts [ewelot]\n- fix precision error in clip of float -> int casts [ewelot]\n- fix load of HEIC images with 0 length metadata [ddennedy-gpsw]\n- revise rounding in reduce [kleisauke]\n\n6/9/20 started 8.10.2\n- update magicksave/load profile handling [kelilevi]\n- better demand hint rules [kaas3000]\n- fix tiff thumbnail from buffer and source [vansante]\n- in jpegsave, don't set JFIF resolution if we set EXIF resolution\n- bump minimum libheif version to 1.3 [lovell]\n- dzsave in iiif mode could set info.json dimensions off by one [Linden6]\n- pdfload allows dpi and scale to both be set [le0daniel]\n- allow gaussblur sigma zero, meaning no blur\n- better heif signature detection [lovell]\n- fix vips_fractsurf() typo [kleisauke]\n- better heif EOF detection [lovell]\n- fix gir build with g-o-i 1.66+ [László]\n- improve seek behaviour on pipes\n- add \"speed\" param to heifsave [lovell]\n- fix regression in C path for dilate / erode [kleisauke]\n- fix build with libheif save but no load [estepnv]\n\n9/8/20 started 8.10.1\n- fix markdown -> xml conversion in doc generation\n- remove typedef redefinitions to please old gccs\n- fix regression in tiff pyramid thumbnailing [tand826]\n- stop 0-length buffer being passed to imagemagick [lovell]\n- convert no-profile CMYK to RGB on save [augustocdias]\n- ensure SVG loader skips input with chars outside x09-x7F range [lovell]\n- better mask sizing in gaussmat [johntrunc]\n- fix tiffsave \"squash\" handling [barryspearce]\n- fix jpegload autorotate [chregu]\n- only start the background render thread on first use\n\n24/1/20 started 8.10.0\n- more conformat IIIF output from dzsave [regisrob]\n- add @id to dzsave to set IIIF id property [regisrob]\n- add max and min to region shrink [rgluskin]\n- allow \\ as an escape character in vips_break_token() [akemrir]\n- tiffsave has a \"depth\" param to set max pyr depth\n- libtiff LOGLUV images load and save as libvips XYZ\n- add gifload_source, csvload_source, csvsave_target, matrixload_source,\n  matrixsave_source, pdfload_source, heifload_source, heifsave_target,\n  ppmload_source, ppmsave_target\n- revise vipsthumbnail flags\n- add VIPS_LEAK env var\n- add vips_pipe_read_limit_set(), --vips-pipe-read-limit,\n  VIPS_PIPE_READ_LIMIT\n- revise gifload to fix BACKGROUND and PREVIOUS dispose [alon-ne]\n- add subsample_mode, deprecate no_subsample in jpegsave [Elad-Laufer]\n- add vips_isdirf()\n- add PAGENUMBER support to tiff write [jclavoie-jive]\n- add \"all\" mode to smartcrop\n- flood fill could stop half-way for some very complex shapes\n- better handling of unaligned reads in multipage tiffs [petoor]\n- mark old --delete option to vipsthumbnail as deprecated [UweOhse]\n- png save with a bad ICC profile just gives a warning\n- add \"premultipled\" option to vips_affine(), clarified vips_resize()\n  behaviour with alpha channels\n- improve bioformats support with read and write of tiff subifd pyramids\n- thumbnail exploits subifd pyramids\n- handle all EXIF orientation cases, deprecate\n  vips_autorot_get_angle() [Elad-Laufer]\n- load PNGs with libspng, if possible\n- deprecate heifload autorotate -- it's now always on\n- revised resize improves accuracy [kleisauke]\n- add --vips-config flag to show configuration info\n- add \"bitdepth\" param to tiff save, deprecate \"squash\" [MathemanFlo]\n- tiff load and save now supports 2 and 4 bit data [MathemanFlo]\n- pngsave @bitdepth parameter lets you write 1, 2 and 4 bit PNGs\n- ppmsave also uses \"bitdepth\" now, for consistency\n- reduce operation cache max to 100\n- rework the final bits of vips7 for vips8 [kleisauke]\n- --disable-deprecated now works [kleisauke]\n- vipsheader allows \"stdin\" as a filename\n- gifload allows gifs with images outside the canvas\n- wasm compatibility patches [kleisauke]\n- webpsave has a @profile param\n\n24/4/20 started 8.9.3\n- better iiif tile naming [IllyaMoskvin]\n\n31/1/19 started 8.9.2\n- fix a deadlock with --vips-leak [DarthSim]\n- better gifload behaviour for DISPOSAL_UNSPECIFIED [DarthSim]\n- ban ppm max_value < 0\n- add fuzz corpus to dist\n- detect read errors correctly in source_sniff\n- fix regression in autorot [malomalo]\n- thumbnail on HEIC images could select the thumbnail incorrectly under some\n  size modes [ZorinArsenij]\n\n20/6/19 started 8.9.1\n- don't use the new source loaders for new_from_file or new_from_buffer, it\n  will break the loader priority system\n- fix thumbnail autorot [janko]\n- fix a warning with magicksave with no delay array [chregu]\n- fix a race in tiled tiff load [kleisauke]\n- better imagemagick init [LebronCurry]\n- lock for metadata changes [jcupitt]\n\n20/6/19 started 8.9.0\n- add vips_image_get/set_array_int()\n- disable webp alpha output if all frame fill the canvas and are solid\n- support arrays of delays for animated images [deftomat]\n- add \"unlimited\" flag to svgload\n- disable webp alpha output if all frames fill the canvas and are solid\n- add \"compression\" option to heifsave [lovell]\n- support webp and zstd compression in tiff\n- loaders use \"minimise\" to close input files earlier\n- integrate support for oss-fuzz [omira-sch]\n- add vips_switch() / vips_case() ... fast many-way ifthenelse\n- better const handling for arithmetic operators fixes comparisons against out\n  of range values\n- sharpen restores input colourspace\n- handle alpha in heifload / heifsave [meyermarcel]\n- add @interpretation and @format to rawload\n- nifti load/save uses double for all floating point metadata\n- add vips_error_buffer_copy()\n- add VipsSource and VipsTarget: a universal IO class for loaders and savers\n- jpeg, png, tiff (though not tiffsave), rad, svg, ppm and webp use the\n  new IO class\n- rewritten ppm load/save is faster and uses less memory\n- add @no_strip option to dzsave [kalozka1]\n- add iiif layout to dzsave\n- fix use of resolution-unit metadata on tiff save [kayarre]\n- support TIFF CIELAB images with alpha [angelmixu]\n- support TIFF with premultiplied alpha in any band\n- block metadata changes on shared images [pvdz]\n- RGB and sRGB are synonmous\n\n17/9/19 started 8.8.4\n- improve compatibility with older imagemagick versions\n- remove realpath, since it can fail on systems with grsec\n\n31/8/19 started 8.8.3\n- revert sharpen restoring the input colourspace\n- xres/yres tiffsave params were in pixels/cm [f--f]\n\n9/7/19 started 8.8.2\n- better early shutdown in readers\n- don't attempt to save large XMP to jpeg [tnextday]\n- always fetch HEIC metadata from the main image [zhoux2016]\n- fix loop in malformed ppm [Kyle-Kyle]\n- better support for PNGs with long comment names\n- fix build with GM\n- add locks for pdfium load\n- fix build with MSVC\n- fix a problem with shinkv tail processing [angelmixu]\n- fix a read one byte beyond buffer bug in jpegload\n- make GIF parsing less strict\n- better feof() handling in GIF load\n- clip coding and interpretation on vips image read\n- check image bounds for GIF load\n- prevent over-pre-shrink in thumbnail [kleisauke]\n- fix sharpen with sigma 0.5 [2h4dl]\n- sharpen restores input colourspace\n- verify bands/format for coded images\n- improve data_length handling for jpeg metadata\n\n24/5/19 started 8.8.1\n- improve realpath() use on older libc\n- better magickload error messages\n- more consistent behaviour for page-height metadata\n- fix for composite with many small images and some combinations of blend modes\n- fix memleak in tiff pyr save to memory [scossu]\n- istiff attempts to read the first directory rather than just testing the\n  magic number [przemyslawpluta]\n- much faster ismagick() [jcupitt]\n- better behaviour for vips_region_fetch() if request lies partly outside image\n- remove 256 band limit in arithmetic.c [erdmann]\n- disable Orc if building with CET [lovell]\n- fix vipsthumbnail with pyr tiff [kleisauke]\n- text autofit could occasionally terminate early [levmorozov]\n- fewer warnings on tiffload [chregu]\n- vips_resize() breaks aspect ratio and limits shrink to prevent <1px\n  dimensions [lovell]\n\n21/9/18 started 8.8.0\n- much faster smartcrop [lovell]\n- add low/high to smartcrop [jcupitt]\n- add XMP support to png read/write [jcupitt]\n- deprecate thumbnail auto_rotate, add no_rotate [jcupitt]\n- implement thumbnail shrink-on-load for openslide images [jcupitt]\n- add animated webp support [jcupitt]\n- revise vips_cast() to improve behaviour with uint images [erdmann]\n- add bandand()/or()/eor() to cplusplus binding [clcaalu]\n- implement shrink-on-load for tiff pyramids [jcupitt]\n- added vips_image_set_blob_copy() [jcupitt]\n- don't stop composite on first non-transparent image [felixbuenemann, GDmac]\n- add vips_rect_overlapsrect()\n- composite is much faster at positioning subimages\n- stop tiff pyr layers if width or height drop to 1 [gvincke]\n- dzsave has a new skip_blanks option\n- add vips_CMYK2XYZ() and vips_XYZ2CMYK(), plus associated routes\n- include cmyk and srgb fallback profiles\n- add vips_profile_load() and use it everywhere\n- fix race in temp filename creation [lhecker]\n- add @reduction_effort param to webpsave [lovell]\n- add @option_string param to thumbnail_buffer [kleisauke]\n- add XMP, IPCT, ICC, EXIF etc. support to magickload/magicksave\n- much lower memuse for gifload\n- tilecache speedups\n- add vips_heifload(), vips_heifsave()\n- add heif thumbnail support to vips_thumbnail()\n- free threadpool earlier, reducing mem growth for some long-running\n  processes [jtorresfabra]\n- add vips_region_fetch() / _width() / _height() for language bindings\n- vips_text() supports justification\n- move vips_image_set_kill() and iskilled() to the public API\n- dzsave to szi sets suffix correctly [martinweihrauch]\n- dzsave szi writes \"scan-properties.xml\"\n- add vips_image_(get|set)_image()\n- add openslideload option to attach all associated images as metadata\n- dzsave to szi will write all associated images\n- remove old c++ and python interfaces\n- vipsthumbnail can thumbnail animated and multipage images\n- deprecate webpload @shrink, use @scale instead\n\n31/3/19 started 8.7.5\n- better buffer sizing in tiff reader [omira-sch]\n\n4/1/19 started 8.7.4\n- magickload with magick6 API did not chain exceptions correctly causing a\n  memory leak under some conditions [kleisauke]\n- zero memory on allocate to prevent write of uninitialized memory under some\n  error conditions [Balint Varga-Perke]\n\n21/11/18 started 8.7.3\n- fix infinite loop for autofit with non-scaleable font\n- mapim was not offsetting by window offset [erdmann]\n- better rounding for scale [kleisauke]\n- fix a memleak in magick6load [kleisauke]\n\n21/11/18 started 8.7.2\n- more info output for temp files to help diagnose problems\n- vips_text() could set the wrong DPI\n- vips_text() leaked in autofit mode\n\n23/9/18 started 8.7.1\n- update function list in docs [janko-m]\n- test for g_str_to_ascii() [jcupitt]\n- fix temp file open on Windows and fallback on linux [lovell]\n\n23/12/17 started 8.7.0\n- add magicksave, save image with libMagick [dlemstra]\n- remove jpeg thumbnail from EXIF if \"jpeg-thumbnail-data\" has been removed by\n  user\n- hough_line scales width to 0 - 180, not 0 - 360\n- hough_line is 4x faster\n- hough_circle is 2x faster\n- add vips_sobel() and vips_canny() edge detectors\n- add vips_rotate() ... a convenience method for vips_similarity()\n- svgload was missing is_a [lovell]\n- better header sniffing for small files\n- drop incompatible ICC profiles before save\n- better hasalpha rules\n- create funcs always make MULTIBAND (ie. no alpha)\n- use O_TMPFILE, if available [Alexander--]\n- set \"interlaced=1\" for interlaced JPG and PNG images\n- add PDFium PDF loader\n- jpegload adds a jpeg-chroma-subsample field with eg. 4:4:4 for no\n  chrominance subsampling.\n- tiffload, pdfload, magickload set VIPS_META_N_PAGES \"n-pages\" metadata item\n- add fontfile option to vips_text() [fangqiao]\n- add vips_transpose3d() -- swap major dimensions in a volumetric image\n- remove vips7 stuff from default API ... you must now #include it explicitly\n- added vips_argument_get_id() to fix derived classes on win32 [angelmixu]\n- fix compile with MSVC 2017 [angelmixu]\n- pdfload has a option for background\n- vips7 C++ interface defaults off\n- make members, getters and operators \"const\" in cpp API\n- composite has params for x/y position of sub-images [medakk]\n- add Mitchell kernel\n- pyramid builders have a choice of 2x2 shrinkers [harukizaemon]\n- add `palette` option to pngsave [felixbuenemann]\n- add basic nifti load/save support\n- support writing string-valued fields via libexif\n- paste in the test suite from pyvips\n- get EXIF tag names from tag plus ifd [@Nan619]\n- escape ASCII control characters in XML\n- magickload now sniffs some file types itself\n- update radiance load from upstream\n- add region_shrink to tiffsave\n- mapim could fail for float index images with coordinates out of int range\n- scale openexr alpha to 0 - 255\n- close input earlier, when we can [kleisauke]\n- add vips_object_get_args() for language bindings [kleisauke]\n\n12/3/18 started 8.6.4\n- better fitting of fonts with overhanging edges [Adrià]\n- revise C++ example [fangqiao]\n- strict round down on jpeg shrink on load [davidwood]\n- configure test for g++ 7.2 and composite.cpp\n- don't Ping in magickload, too unreliable\n- ensure WebP can add metadata when compiled with libwebpmux [lovell]\n- improve accuracy of vector path convolution [felixbuenemann]\n\n12/2/18 started 8.6.3\n- use pkg-config to find libjpeg, if we can\n- better clean of output image in vips_image_write() fixes a crash\n  writing twice to memory\n- better rounding behaviour in convolution means we hit the vector path more\n  often\n- fix a crash if a delayed load failed [gsharpsh00ter]\n- icc_import attaches the fallback profile if it used it\n\n5/1/18 started 8.6.2\n- vips_sink_screen() keeps a ref to the input image ... stops a rare race\n- fix a minor accidental ABI break in 8.6.0 -> 8.6.1 [remicollet]\n- fix read of plane-separate TIFFs with large strips [remicollet]\n- fix a C++ warning in composite.cpp [lovell]\n- remove number of images limit in composite\n- composite allows 1 mode ... reused for all joins\n- fix race in vips_sink() for seq read\n\n10/12/17 started 8.6.1\n- fix mmap window new/free cycling\n- fix some compiler warnings\n- remove the 64-image limit on bandary operations\n- better version date [bmwiedemann]\n- bump wrapper script version [bgilbert]\n- fix a memleak on error during jpeg buffer write [lovell]\n- fix misspelling of IPTC as IPCT [lovell]\n- seq could be set on small images opened in random-access mode [aferrero2707]\n- fix small memleak in dzsave [lovell]\n- small speedup for rgb->g [lovell]\n\n15/4/17 started 8.6.0\n- supports fits images with leading non-image HDUs, thanks benepo\n- add vips_image_new_from_image() and vips_image_new_from_image1() ... make a\n  constant image\n- add new_from_image() to Python as well\n- slight change to cpp new_from_image() to match py/C behaviour\n- vips_conv(), vips_compass(), vips_convsep() default to FLOAT precision\n- add FORCE resize mode to break aspect ratio\n- add vips_thumbnail_image()\n- better prefix guessing on Windows, thanks tumagonx\n- savers support a \"page_height\" option for multipage save\n- rename 'disc' as 'memory' and default off\n- add vips_find_trim(), search for non-background areas\n- remove lcms1 support, it had bitrotted\n- `join` tagged as seq\n- support tiffsave_buffer for pyramids, thanks bubba\n- thumbnail and vipsthumbnail have an option for rendering intent, thanks\n  kleisauke\n- set file create time on Windows, thanks dlong500\n- remove python tests ... moved to pyvips test suite\n- vips7 and vips8 python bindings default to off ... use the new pyvips\n  binding instead\n- better svgload: larger output, handle missing width/height, thanks lovell\n- add vips_gravity() ... embed, but with direction rather than position\n- vips_text() can autofit text to a box, thanks gargsms\n- add vips_composite() / vips_composite2(): merge a set of images with\n  a set of blend modes\n- better gobject-introspection annotations, thanks astavale\n- vips_image_write() severs all links between images, when it can ... thanks\n  Warren and Nakilon\n- vector path for convolution is more accurate and can handle larger masks\n- linear and cubic kernels for reduce are higher quality\n- added vips_value_set_blob_free()\n- \"--size Nx\" to vipsthumbnail was broken, thanks jrochkind\n- fix build with gcc 7\n- add vips_fill_nearest() ... fill pixels with nearest colour\n- add VIPS_COMBINE_MIN, a new combining mode for vips_compass()\n- vips_hist_find_indexed() now has a @combine parameter\n- vips_affine() and vips_similarity() have a \"background\" parameter\n- fix nasty jaggies on the edges of affine output, thanks chregu\n- add gif-delay, gif-comment and gif-loop metadata\n- add dispose handling to gifload\n- dzsave outputs extra right and bottom overlap-only tiles, for closer spec\n  adherence\n- deprecate the \"centre\" option for vips_resize(): it's now always on\n- setting the EXIF data block automatically sets other image tags\n- add \"extend\" option to affine; resize uses it to stop black edges\n\n29/8/17 started 8.5.9\n- make --fail stop jpeg read on any libjpeg warning, thanks @mceachen\n- don't build enumtypes so often, removing perl as a compile dependency\n- fix a crash with heavy use of draw operations from language bindings,\n  thanks @Nakilon\n\n2/8/17 started 8.5.8\n- fix transparency detection in merge, thanks Haida\n- define env var VIPS_WARNING to hide warning messages\n- shut down dzsave output earlier to help mark-sweep bindings\n- fix webp thumbnail upscale, thanks Kleis\n\n9/6/17 started 8.5.7\n- better smartcrop\n- transform cmyk->rgb automatically on write if there's an embedded profile\n  and the saver does not support cmyk\n- fix DPI mixup in svgload ... we were writing images about 20% too large,\n  thanks Fosk\n\n19/5/17 started 8.5.6\n- tiff read with start page > 0 could break edge tiles or strips\n- raise b64 limit to allow for huge profiles (thanks jaume)\n- fix error return in blob save (thanks jaume)\n- tag vipsprofile as py2 (thanks ioquatix)\n- don't cache thumbnail (thanks tomasc)\n\n23/4/17 started 8.5.5\n- doc polishing\n- more improvements for truncated PNG files, thanks juyunsang\n- improve corrupted jpg handling, thanks juyunsang\n- fix small test suite issues on os x\n\n23/4/17 started 8.5.4\n- don't depend on image width when setting n_lines, thanks kleisauke\n\n7/4/17 started 8.5.3\n- more link fixing in docs\n- revise cache sizing again to help out of order errors under heavy load, thanks\n  kleisauke\n\n25/3/17 started 8.5.2\n- better behaviour for truncated PNG files, thanks Yury\n- missing proto for vips_tiffsave_buffer(), thanks greut\n- move some docs from the wiki and blog into core libvips docs\n- add support for markdown in docs\n\n25/3/17 started 8.5.1\n- init more classes earlier, thanks David\n\n13/10/16 started 8.5.0\n- rewritten buffer system is safer and frees memory earlier\n- added tiff save to buffer\n- added dzsave save to buffer (zip only)\n- revise header get/set functions\n- better vipsheader behaviour with complex field types\n- added vips_image_hasalpha()\n- added vips_thumbnail() / vips_thumbnail_buffer()\n- webpload/webpsave read and write icc, xmp, exif metadata\n- better >4gb detect for zip dzsave output [Felix Bünemann]\n- all loaders have a @fail option, meaning fail on first warning, though it\n  only does anything for jpg and csv\n- add vips_image_get_fields() to help bindings\n- add tiff multi-page read/write\n- add VIPS_META_PAGE_HEIGHT metadata\n- IM6/IM7 magickload supports page/n/page-height, all_frames deprecated\n- gifload supports n/page-height\n- added #defines for VIPS_SONAME, VIPS_LIBRARY_CURRENT, VIPS_LIBRARY_REVISION,\n  VIPS_LIBRARY_AGE\n- better support for bscale / bzero in fits images\n- deprecate vips_warn() / vips_info(); use g_warning() / g_info() instead\n- vipsthumbnail supports much fancier geometry strings, thanks tomasc\n- vips_thumbnail() has new @size option\n- fix --vips-cache-max etc.\n- add compute reordering, plus some new API to support it:\n  vips_reorder_margin_hint() and vips_reorder_prepare_many(), thanks\n  aferrero2707\n- kick load operations from cache on read error, thanks gaillard\n- fix return from C++ assignment operator overloads (+=, -= etc)\n- add @max_slope to vips_hist_local() to implement CLAHE, thanks hunter-87\n- vips_gaussnoise() pixels are reproducible on recalc, thanks MvGulik\n- max/min sort values by y and x coordinate\n- tiff read uses libtiff scanline API if rows-per-strip is large\n- vips_region_shrink() knows about alpha, helps dzsave and tiffsave\n- use expat, not libxml, for XML load ... removes a required dependency, since\n  we get expat as part of glib\n- new sequential mode infrastructure is faster and more flexible\n- add vips_smartcrop(), based on sharp's smartcropper\n- vipsthumbnail has a --smartcrop option\n- added vips_rot90() etc. convenience functions\n- fix vips_resize() bug when hscale and vscale were very different\n\n8/12/16 started 8.4.5\n- allow libgsf-1.14.26 to help centos, thanks tdiprima\n\n11/11/16 started 8.4.4\n- fix crash in vips.exe arg parsing on Windows, thanks Yury\n\n18/10/16 started 8.4.3\n- fix error detection in gif_close, thanks aaron42net\n- fix tiny threading memleak\n- improve compatibility with very old glib, see #548\n\n27/9/16 started 8.4.2\n- small doc improvements\n- fix error message for metadata fetch type mismatch\n- resolve a race condition in thread shutdown, thanks Lovell\n\n1/5/16 started 8.4\n- many more wepsave options [Felix Bünemann]\n- added quant_table option to wepsave [Felix Bünemann]\n- added @n option to pdfload, thanks andris\n- dzsave won't write empty tiles in google mode, thanks bverem, perog,\n  felixbuenemann\n- allow nested [] in CLI args\n- restore BandFmt on unpremultiply in vipsthumbnail\n- better python detection and build [Felix Bünemann]\n- max-alpha defaults to 65535 for RGB16/GREY16\n- added radsave_buffer [Henri Chain]\n- support tiff orientation tag\n- autorotate option for tiff load\n- tiffsave converts for jpg if jpg compression is turned on\n- tiffsave supports --strip\n- conversions to GREY16 could lock\n- free pixel buffers on image close as well as thread exit ... stops main\n  thread buffers clogging up the system\n- dzsave can write compressed zips [Felix Bünemann]\n- vips_image_write() only refs the input when it has to ... makes it easier to\n  combine many images in bounded memory\n- VImage::write() implementation was missing\n- VImage::write() return value changed from void to VImage to help chaining\n- added C++ arithmetic assignment overloads, += etc.\n- VImage::ifthenelse() with double args was missing =0 on options\n- better accuracy for reducev with smarter multiplication\n- better quality for vips_resize() with linear/cubic kernels\n- pyvips8 can create new metadata\n- better upsizing with vips_resize()\n- add imagemagick v7 support, thanks sachinwalia2k8\n- added vips_worley(), vips_perlin() noise generators\n- added vips_convf(), vips_convi(), vips_convasep(), vips_conva() ...\n  im_conv*() functions rewritten as classes\n- vips_convsep() calls vips_convasep() for the approximate case\n- new fixed-point vector path for convi is up to about 2x faster\n- gif loader can make 1, 2, 3, or 4 bands depending on file contents\n- support --strip for pngsave\n- add svgz support [Felix Bünemann]\n- rename bootstrap.sh -> autogen.sh to help snapcraft\n- support unicode filenames on Windows\n- added VIPS_ROUND as well as VIPS_RINT\n- resize/reduce*/shrink*/affine now round output size to nearest rather than\n  rounding down, thanks ioquatix\n- better support for tile overlaps in google maps mode in dzsave\n- dzsave puts vips-properties.xml in the main dir for gm and zoomify layouts\n- resize and reduce have @centre option for centre convention downsampling\n- vipsthumbnail uses centre convention to better match imagemagick\n_ add vips_foreign_get_suffixes()\n\n19/8/16 started 8.3.4\n- better transparency handling in gifload, thanks diegocsandrim\n\n30/7/16 started 8.3.3\n- fix performance regression in 8.3.2, thanks Lovell\n- yet more robust vips file reading\n\n18/5/16 started 8.3.2\n- more robust vips image reading\n- more robust tiff read [Matt Richards]\n\n15/4/16 started 8.3.1\n- rename vips wrapper script, it was still vips-8.2, thanks Benjamin\n- export C++ operator overloads for MSVC linking [Lovell]\n- fix magickload @page with GraphicsMagick\n- add giflib5 support\n- allow resize >1 on one axis, <1 on the other\n- vips_resize has an optional @kernel argument\n- fix giflib4 detection [felixbuenemann]\n\n29/1/16 started 8.3\n- add vips_reduce*() ... a fast path for affine downsize\n- vips_resize() uses vips_reduce() with lanczos3\n- bicubic is better on 32-bit int images\n- add pdfload, svgload, gifload for PDF, SVG and GIF rendering\n- vipsthumbnail knows about pdfload and svgload\n- added @page param to magickload\n- matload is more specific (thanks bithive)\n- lower mem use for progressive jpg decode\n- sharpen has a new @sigma param, @radius is deprecated\n- sharpen allows a much greater range of parameters\n- sharpen defaults now suitable for screen output\n- better handling of deprecated args in python\n- much better handling of arrayimage command-line args\n- faster hist_find (Lovell Fuller)\n- webpload has a @shrink parameter for shrink-on-load\n- vipsthumbnail knows about webp shrink-on-load\n- better behaviour for vips_cast() shift of non-int types (thanks apacheark)\n- python .bandrank() now works like .bandjoin()\n- vipsthumbnail --interpolator and --sharpen switches are deprecated\n- switches to disable PPM, Rad and Analyze support\n- added VIPS_COUNT_PIXELS(), overcomputation tracking\n- @out_format in vips_system() can contain [options]\n- webpsave_buffer no longer ignores @lossless, thanks aaron42net\n- float tiff tagged as scRGB to match photoshop convention, thanks Murat\n- better jpeg autorot, thanks otto\n\n24/3/16 started 8.2.4\n- fix nohalo and vsqbs interpolators, thanks Rafael\n\n27/1/16 started 8.2.3\n- fix a crash with SPARC byte-order labq vips images\n- fix parsing of filenames containing brackets, thanks shilpi230\n- fix hist_entropy (lovell)\n- small fixes to radiance load\n\n12/1/16 started 8.2.2\n- changes to ease compiling C++ binding with MSVC [Lovell Fuller]\n- reorder file tests to put slow loaders last\n- ifthenelse needs less C stack during eval\n- better rounding in bilinear interpolator\n- fix to \"make check\" in non-C locales [felixbuenemann]\n- use compiler builtins isnan, isinf, fabs, fmin, fmax, ceil, floor when\n  possible [Lovell Fuller]\n- tune vips_shrinkh(), 30% faster [Lovell Fuller]\n- remove SEQ hint from vips_subsample(), fixes cli performance [erdmann]\n- fix double free on attach ICC profile from file in tiff write [erdmann]\n- use g_assert_not_reached()\n- better vips-from-C docs\n- remove Duff from im_conv() / im_conv_f() for a 25% speedup [Lovell Fuller]\n\n1/1/16 started 8.2.1\n- add a compat stub [Benjamin Gilbert]\n- python bandjoin is now just an instance function\n- small doc improvements\n- small vips7 C++ improvement\n- remove exception specifications from vips8 C++ interface [Lovell Fuller]\n- VImage::get_typeof() now returns GType\n\n7/10/15 started 8.2.0\n- added im_bufmagick2vips(), a vips7 wrapper for magick load from buffer\n- fetch unset property now returns default value rather than warning\n- many more const declarations to help gobject-introspection\n- rewritten vips_shrink() is 2x faster, much lower memuse, now handles complex\n- only allow [] for filename options\n- add memory.h to Python API .. makes tracked highwater visible\n- added bandjoin_const to add constant bands to an image\n- better alpha handling for tiff write, thanks sadaqatullahn\n- better cache sizing for vips_resize()\n- sizealike / formatalike / bandsalike elide completely if they can for\n  a x2 saving in C stack use in many cases\n- added vips_mapim() ... resample with an index image, plus test\n- try to improve vips_resize() quality a little more\n- vips_resize() can do non-square resizes\n- dzsave removes tile metadata by default, thanks Benjamin\n- jpeg strip option removes a little more, thanks Benjamin\n- added vips_image_new_from_memory_copy()\n- improve vips_sink_screen() stability under heavy load\n- added vips_arrayjoin()\n- Python x.bandjoin(y) is now x.ibandjoin(y), sorry\n- faster and lower-mem TIFF read\n- faster bilinear interpolator\n- TIFF loads and saves IMAGEDESCRIPTION\n- add --properties flag to tiffsave\n- dzsave defaults changed: now writes 256x256 jpegs for non-edge tiles, thanks\n  Daniel\n\n7/5/15 started 8.1.1\n- oop, vips-8.0 wrapper script should be vips-8.1, thanks Danilo\n- fix vips7 pathname parsing on windows, thanks Lovell\n\n7/5/15 starteld 8.1.0\n- add vips_premultiply(), vips_unpremultiply()\n- change the alpha range rules for vips_flatten() to match vips_premultiply()\n- vipsthumbnail uses vips_resize() rather than its own code\n- vipsthumbnail uses vips_premultiply() for better alpha quality\n- added bandand() bandor() bandeor() convenience funcs to Python\n- oops, base64 encode could pad by up to two zero bytes\n- added VipsRefString as a thing that gi bindings can unpack\n- support \"with Vips.Image as i:\" in Python\n- try to support DOS CSV and PPM files on linux\n- add vips_byteswap(), remove byteswap option from vips_copy()\n- add vips_bandfold()/vips_bandunfold()\n- dzsave supports zip output > 4gb, thanks benjamin\n- add support for HSV colourspace [Jonas Øgaard]\n- skip oversized markers in jpeg write\n- jpeg exif tags saved as name rather than title\n- can now set any jpeg exif tag, not just modify existing tags\n- add vips_hist_entropy()\n- vips_log(), vips_log10() are zero-avoiding\n- better overlap handling for dzsave, thanks robclouth\n- add @spacing option to vips_text()\n- tiff loads and saves IPCT and Photoshop data\n\n7/5/15 started 8.0.3\n- dzsave and tif pyr write could fail for some image dimensions, thanks Jonas\n\n4/5/15 started 8.0.2\n- fix a refcount error in C++ wrapper, thanks huskier\n- better C++ api test\n- test suite improvements\n- remove a couple of stray header decls, thanks benjamin\n\n25/4/15 started 8.0.1\n- fix some compiler warnings\n- work around a glib bug that can cause segv under load\n- add some notes on threading to the docs\n- better leak reporting\n\n11/2/15 started 8.0\n- remove old doc stuff, lots of doc improvements\n- add fliphor(), flipver(), rot90(), rot180(), rot270(), median(), dilate(),\n  erode() convenience methods to Python and C++\n- python: use [] to index and slice image bands, use () to get a point\n- c++: use [] to band index, () returns a vector<double>\n- add shift option to cast\n- sRGB2scRGB and scRGB2sRGB scale 16-bit alpha to and from 8-bit\n- add magickload_buffer() [mcuelenaere]\n- add vips_foreign_is_a_buffer() [mcuelenaere]\n- added test_foreign.py, plus more test images\n- added vips_region_shrink(), fast x2 shrinker\n- rewritten tiff writer is about 3 - 4x faster at making pyramids\n- jpg, magick, png, tiff readers now use only 1 fd per input image\n- added vips_info_set(), vips_progress_set(), vips_profile_set() ... bindings\n  can now support all the vips command-line options if they wish\n- better conversion to greyscale, thanks bkw\n- add vips_image_copy_memory(), improves stability with heavy threading\n- jpegsave supports new mozjpeg features [lovell]\n- add vips_vipsload(), vips_vipssave() ... why not\n\n26/3/15 started 7.42.4\n- im_maxpos_avg() avoids NaN\n- small tiffsave doc improvements\n- better thresholding for tiffsave \"squash\" mode\n- add @miniswhite mode to tiffsave\n\n6/2/15 started 7.42.3\n- bump version for back-compat ABI change\n- added vips_image_memory(), an alias for vips_image_new_memory()\n- improvements to configure for python\n- remove --disable-cxx configure flag\n- python imageize preserves interpretation\n- fix dzsave as a target format\n\n30/12/14 started 7.42.2\n- C++ required output params were broken, thanks Lovell\n- remove VImage::scale() to get scale from header, it clashed with the\n  VipsScale operator, thanks Lovell\n- allow c++ set enum from string\n- display param default and range in usage\n- better docs\n- more tests\n- renamed VIPS_FOREIGN_DZ_DEPTH_1 as VIPS_FOREIGN_DZ_DEPTH_ONE etc. to help\n  bindings\n- vipsthumbnail will return an error code if one or more conversions failed\n- disable chroma subsample in jpeg-tiff if Q >= 90\n- try to handle tiffs with old-style 8-bit colormaps\n- rename vipsthumbnail -o as -f, -o stays as a hidden flag\n- fix some small leaks\n- faster openslide load, thanks Benjamin\n- add VInterpolate class to cplusplus binding, thanks Lovell\n- add lower-level operation cache access\n- turn on leak testing in test suite\n- don't use isnormal() to test for crazy FP numbers, thanks Murat\n- much faster RGB16 -> sRGB path\n\n24/12/14 started 7.42.1\n- add gobject-2.0 to Requires: in vips and vips-cpp .pc files\n- bump soname\n- fix VipsBlob read\n- remove \"future\" dependency, thanks bgilbert\n\n4/11/14 started 7.42.0\n- better default resolution for png load\n- better pbm (one bit) load, better pfm (float) load/save\n- added pbm (one bit) save\n- changed vips_gaussblur() parameters, sorry\n- add .szi as a dzsave zip synonym\n- support tiff XMP metadata\n- support @density arg to magickload [Lovell]\n- support python3.4 and python2.7 in new python binding\n- vips_gaussmat() and vips_logmat() are now int by default, to match\n  vips_conv(), and use @precision, not @integer\n- added --disable-pyvips8 switch to turn off new py binding\n- \"vips thing\" exit status can now be used to test for optional components\n\n25/7/14 started 7.41.0\n- start working on --disable-deprecated\n- fix pngload with libpng >1.6.1\n- add vips_resize()\n- return of vips_init(), but just for bindings\n- revised type.c to make it more binding-friendly\n- add @background arg to save: the colour to flatten against\n- add VIPS_ARGUMENT_MODIFY flag ... used for draw_circle etc, meaning an op\n  which modifies its argument\n- rename VIPS_OPERATION_RELATIONAL_NOTEQUAL as VIPS_OPERATION_RELATIONAL_NOTEQ\n  for consistency\n- python vips8 binding\n- python vips8 test suite: test_arithmetic.py, test_colour.py,\n  test_conversion.py\n- move zoomify ImageProperties file, now a better match to the official tool\n- rename VIPS_ANGLE_180 as VIPS_ANGLE_D180 etc. to help python\n- remove cimg support, we have a gmic plugin now instead\n- add support for vips8 plugins\n- added \"autorotate\" option to jpeg load\n- added autorot operator\n- added @filter option to pngsave (Lovell)\n- C++ vips8 binding\n\n27/10/14 started 7.40.12\n- better tiff detection (Lovell)\n- fix memleak in sharpen (Lovell)\n- fix profile handling in XYZ2scRGB, thanks Lovell\n\n8/10/14 started 7.40.11\n- rework extra band handling for colour functions\n- set interpretation of matlut output more carefully\n\n8/9/14 started 7.40.10\n- icc_import and icc_transform checks the input profile for compatibility\n  with the image, thanks James\n- try to make vips_thread_shutdown() optional\n\n8/9/14 started 7.40.9\n- support jfif resunit \"none\"\n- support GRAY as an input and output ICC space\n- fix a read loop with setjmp() in png read, if the png file is broken\n- fix vipsthumbnail with both input cmyk and output rgb profiles specified\n- vipsthumbnail retries with specified input profile if embedded profile is\n  broken\n- add @profile option to pngsave, matching tiff and jpeg\n- fix a race in the operation cache [Lovell]\n\n8/9/14 started 7.40.8\n- fix configure on rhel6 [Lovell]\n- mono <-> rgb converters were not handling extra bands, thanks James\n- support jpeg resunit \"none\"\n\n21/8/14 started 7.40.7\n- width and height were swapped in matlab load\n- set interpretation more carefully on matlab load\n- fix memleak in tilecache [Lovell]\n- fix memleak in VipsArray [Lovell]\n- fix memleak in webp load from buffer [Lovell]\n- fix memleak in png save to buffer [Lovell]\n- make out of order read in png and jpg a fatal error\n- add thread_shutdown() to C++ (and thereby to python)\n\n12/8/14 started 7.40.6\n- more doc fixes\n- fix similarity rotate+scale, thanks Topochicho\n- fix 16-bit PNG save, thanks John\n- fix dzsave date on Windows, thanks John\n- fix vipsthumbnail on many-core systems, thanks James\n\n25/7/14 started 7.40.5\n- fix a race in im_maxpos_avg()\n- limit n_thr on tiny images\n- don't exit() on memleak detected, just warn\n- add \"autocrop\" option to openslide load\n- argh fix affine, again, there were sometimes black bars with nohalo and the\n  vips8 interface\n- pngsave in interlaced mode makes a copy of the image, so it's always seq\n- vipsthumbnail shrinks to 1/2 window_size\n- vipsthumbnail has an anti-alias filter between shrink and affine\n- vipsthumbnail defaults to bicubic\n- better rounding behaviour for fixed-point bicubic reduces noise\n- fix pngload with libpng >=1.6.11\n- fix colour for openslide read associated\n\n4/7/14 started 7.40.4\n- fix vips_rawsave_fd(), thanks aferrero2707\n- fix im_point()\n- vips_scale() now does round to nearest to avoid rounding errors\n- improve im_openout() compat macro\n- more vips7 compatibility fixes, thanks steve\n- more robust vips_system()\n- add webp support to vips7\n\n30/6/14 started 7.40.3\n- fix interlaced thumbnails in vipsthumbnail, thanks lovell\n- fix use of \"header\" in benchmark/, thanks David\n- fits save now caches the image before write, so it's top-to-bottom\n- add --properties argument to dzsave, thanks bgilbert, jhenriksen\n\n25/6/14 started 7.40.2\n- dzsave write to zip stops at 4gb, thanks bgilbert\n- improve short option name handling, thanks bgilbert\n- added --enable-docs configure option to help freebsd\n- removed a bash-ism from configure to help freebsd\n- don't assume GType fits in an int to help freebsd\n\n24/6/14 started 7.40.1\n- revise man.1 pages\n- fix vips_guess_prefix()\n\n23/6/14 started 7.40.0\n- version bump\n- renamed \"header\" as \"vipsheader\" and \"edvips\" as \"vipsedit\"\n\n21/1/14 started 7.39.0\n- auto-decode for (almost) all operations, see vips_image_decode()\n- background render thread cleans up and quits neatly\n- colourspace has a source_space option\n- operations can be tagged as \"deprecated\"\n- redo im_draw_circle(), im_draw_flood(), im_draw_line(), im_draw_mask(),\n  im_draw_image(), im_draw_rect(), im_draw_point(), im_read_point(),\n  im_draw_smudge(), im_label_regions() as classes\n- better rounding in vips_flatten()\n- VipsStatistic operations are sequential\n- vipsthumbnail has --rotate auto-rotate option\n- removed embedded thumbnail reader from vipsthumbnail: embedded thumbnails\n  are too unlike the main image\n- fix to vipsthumbnail --crop, thanks Alessandro\n- add vips_sum()\n- add vips_hough base class and vips_hough_line()\n- add \"mode\" param to vips_draw_image()\n- add vips_hough_circle()\n- reduce default cache size to 1,000 operations\n- added \"postbuild\" signal\n- vips_system() now supports many input images and you can change image\n  argument order\n- support 16-bit palette TIFFs, plus palette TIFFs can have an alpha\n- libgsf-1 is now an optional dependency\n- dzsave can directly write a ZIP file\n- add \".vips\" as an alternative suffix for vips files\n- added vips_tiffload_buffer()\n- added vips_image_new_from_buffer(), vips_image_write_to_buffer()\n- added vips_object_set_from_string()\n- added @container option to dzsave\n- support 1/2/4 bit palette tiff images with alpha\n- vips_system() now uses g_spawn_command_line_sync()\n- added im_tile_cache_random() to help nip2\n- added hough_circle() to vips7 C++ API\n- added Travis CI config, thanks Lovell\n- im_*merge(), im_*mosaic(), im_match*(), im_global_balance*(), im_remosaic(),\n  im_*mosaic1(), im_*merge1() redone as classes\n- better filename tracking for globalbalance\n- revised vips8 image load/save API, now simpler and more logical\n- operations emit \"invalidate\" if any of their input images invalidate\n- operation cache drops ops on invalidate\n- skipahead is back, thanks to a new threadpool tweak\n\n6/3/14 started 7.38.6\n- grey ramp minimum was wrong\n- vipsthumbnail --crop could fail for very non-square images, thanks\n  Alessandro\n- fix a crash in vips_rawsave(), thanks Andrea\n- updated German translation, thanks Chris\n- fix coordinate error in affine, thanks ferryfax\n\n24/2/14 started 7.38.5\n- jpeg load from buffer could write to input, thanks Lovell\n- fix webpload from buffer, thanks Lovell\n- vips_sequential() could fail under heavy load\n- remove support for seq mode read for operations like extract\n\n13/2/14 started 7.38.4\n- --sharpen=none option to vipsthumbnail was broken, thanks ferryfax\n- more locking on property create and lookup to help very-threaded systems,\n  thanks Nick\n\n22/1/14 started 7.38.3\n- undeprecate VIPS_MASK_IDEAL_HIGHPASS and friends, ruby-vips was using them,\n  thanks ahacking\n\n22/1/14 started 7.38.2\n- auto RAD decode for affine\n- falsecolour was not working for some image types\n- foreign memory buffer images did not have the right dhint, broke\n  command-line falsecolour on sequential images\n- support many Radiance readers active at once\n- add secret \"rgbjpeg\" flag to vips_tiffsave() to help IIP\n\n19/1/14 started 7.38.1\n- bump soname, thanks benjamin\n- better conversion to and from scrgb/xyz for rad (hdr)\n- fix --interpolate flag to vipsthumbnail, thanks Lovell\n\n18/1/14 started 7.38.0\n- version bump\n\n19/10/13 started 7.37.0\n- redone im_rotate_*mask45(), im_gauss_*mask*(), im_log_*mask(), im_dilate(),\n  im_erode(), im_rank_image(), im_compass(), im_linedet(), im_gradient(),\n  im_convsep(), im_convsep_f(), im_fastcor(), im_spcor(), im_sharpen()\n  as classes\n- im_gradcor() deprecated\n- vips_init() now does some ABI compat checking, though this change requires\n  an ABI break\n- add \"interlace\" option to vips_jpegsave()\n- remove vips_image_copy_fields() and vips_demand_hint() and add\n  vips_image_pipeline() to do both jobs\n- vipsthumbnail allows non-square bounding boxes, thanks seth\n- add vips_matrixprint()\n- add @point subsample mode to vips_subsample()\n- im_contrast_surface() deprecated: it was slower than calling conv a few\n  times\n- radiance load supports sequential read\n- rewritten radiance decode is much faster\n- add vips_crop(), a synonym for vips_extract_area()\n- rename vips_gammacorrect() as vips_gamma(), now takes 1 / exp\n- vips_gamma() works for any format\n- add --linear mode to vipsthumbnail\n- support XYZ as a PCS for vips_icc_import() and vips_icc_export()\n- add --strip option to jpegsave\n- added vips_gaussblur() convenience function\n- added --vips-profile, records and dumps thread timing and memory use info\n- added vipsprofile, visualises --vips-profile output\n- auto-vectorization-friendly inner loops\n- added vips::init() and vips::shutdown() to C++ API\n- reuse pixel buffers on sharing to reduce mem cycling\n- conv is SMALLTILE, huge mem use saving on wide images\n- vipsthumbnail has a --crop option\n- remove video4linux1 code, it was useless on all modern linuxes\n- redone freq filter builders as classes\n- redone im_fwfft(), im_invfft(), im_freqflt(), im_disp_ps(), im_fractsurf(),\n  im_phasecor() as classes\n- vips_colourspace() allows B_W, GREY16, RGB16 as source / target\n- added vips_thread_shutdown(), thanks Lovell\n- vips_linear() has a uchar output mode\n- redone im_cntlines(), im_rank() as classes\n- move im_zerox() to deprecated, it wasm't very useful\n\n9/1/14 started 7.36.6\n- fix some clang compiler warnings\n\n20/11/13 started 7.36.5\n- better cache sizing in unbuffered sequential mode\n- allow larger tile_size in dzsave\n- remove use of PATH_MAX to help gnu hurd\n- fix vips_hist_match()\n\n15/11/13 started 7.36.4\n- improve compat with im_init_world()\n\n18/10/13 started 7.36.3\n- fix compiler warnings in ubuntu 13.10\n- reverse similarity rotation direction to match the convention used\n  elsewhere in vips\n- fix blocked caching of sequential load operations\n- fix cache flags\n- fix --delete option to vipsthumbnail\n\n10/10/13\tstarted 7.36.2\n- better jpeg startup\n- rename jpeg bool type to reduce confusion between libraries\n\n3/10/13\tstarted 7.36.1\n- fix to help OS X build\n\n3/10/13\tstarted 7.36.0\n- version bump\n\n1/7/13 started 7.35.0\n- added vips_matrixload() and vips_matrixsave(), load and save vips mat format\n- rename image arrays as image matrices ... INTERPRETATION_ARRAY ->\n  INTERPRETATION_MATRIX etc.\n- rewrite im_buildlut(), im_identity*(), im_maplut(), im_falsecolour(),\n  im_gammacorrect(), im_histgr(), im_histcum(), im_histnorm(), im_heq(),\n  im_histnD(), im_histindexed(), im_histspec(), im_invertlut(), im_lhisteq(),\n  im_stdif(), im_project(), im_profile(), im_tone_build*(), im_mpercent*(),\n  im_ismonotonic() as classes\n- vips_hist_local(), vips_stdif() do any number of bands\n- thin vips8 wrapper for im_histplot()\n- added vips_error_freeze() / vips_error_thaw()\n- used freeze() / thaw() to stop file format sniffers logging spurious errors\n- vipsthumbnail uses embedded jpg thumbnails if it can\n- rename vips_diag() as vips_info(), add --vips-info flag\n- deprecate im_hsp()\n- added vips_webpload(), vips_webpload_buffer(), vips_webpsave(),\n  vips_webpsave_buffer(), vips_webpsave_mime()\n- tiff reader allows separate planes for strip read\n- tiff reader and writer allow many more formats, eg. 32-bit int, complex, etc.\n- tiff reader and writer allow any number of bands\n- added vips_image_new_matrixv()\n- dzsave basename param now called filename, so you can use .dz as a\n  destination (basename is still there but deprecated)\n- new _UNBUFFERED sequential mode saves memory in some important cases\n- vips_conv() is a simple wrapper over the old convolution functions\n- new optimize_coding param for jpeg write produces optimal Huffman tables,\n  thanks Lovell\n- im_tone_map() and im_tone_analyse() deprecated\n- new --band arg to vips_maplut() replaces im_tone_map() functionality\n- added vips_similarity(), simple wrapper for vips_affine() that lets you\n  give a scale and rotate\n\n3/7/13 started 7.34.2\n- lower priority for Matlab load to reduce segvs from Mat_Open(), thanks\n  Michael\n- null-terminate libexif strings, thanks Mike\n- openslide always outputs solid pixels\n\n28/6/13 started 7.34.1\n- fix morphological operators on non-uchar images\n- remove any ICC profile when we use vips to go to srgb\n\n7/6/13 started 7.34.0\n- version bump\n- oops, VImage.PIL_mode_from_vips() failed for CMYK, thanks Alessandro\n- fix no-pango build\n- add im_vips2dz(): run the deepzoom writer from vips7\n- vips_magickload() has an option to read all images in a sequence\n- redo im_make_xy(), im_*eye(), im_zone*(), im_sines() as classes\n- added vips_pngload_buffer()\n- faster --centre option to dzsave, thanks Kacey\n\n12/3/13 started 7.33.0\n- vipsthumbnail lets you specify the sharpening mask\n- turn off caching for im_copy()/vips_copy(), we use copy to stop sharing, and\n  it's cheap so caching doesn't help anyway\n- auto rshift down to 8 bits on save, if necessary\n- im_gaussnoise(), im_copy_file(), im_grid(), im_scale(), im_scaleps(),\n  im_wrap(), im_rotquad(), im_zoom(), im_subsample(), im_msb(), im_text(),\n  im_system(), im_system_image()\n  redone as classes\n- add --angle option to dzsave\n- another vips_shrink() fix argh\n\n14/5/13 started 7.32.4\n- icc import and export could segv on very wide images\n- fix centos 5 build, thanks re-boot\n\n16/4/13 started 7.32.3\n- rename GETTEXT_PACKAGE as vips7.32 to help Debian (thanks Jay)\n- added \"persistent\" option to tilecache\n\n12/3/13 started 7.32.2\n- removed some left-over debugging code from configure.ac\n- better handling of args without values, thanks Ruven\n- better error messages from vips.c\n- fix demand hints so \"vips shrink\" works again, thanks Jan\n- im_jpeg2vips.c builds without jpeglib.h, thanks Alessandro\n\n6/2/13 started 7.32.1\n- fix --without-lcms, thanks speckins\n- updates to licence, thanks Benjamin\n- remove \"fred\" from dist\n- better bootstrap on OS X\n\n22/1/13 started 7.32.0\n- tilecache in threaded mode could deadlock if the downstream pixel source\n  raised an error (thanks Todd)\n- fix another dzsave corner-case (thanks Martin)\n- neater output for \"header\"\n- added VIPS_META_LOADER: record the loader name\n= header displays this loader hint\n- vipsthumbnail is better at cache sizing\n\n31/8/12 started 7.31.0\n- redone im_Lab2XYZ(), im_XYZ2Lab(), im_Lab2LCh(), im_LCh2Lab(), im_UCS2LCh,\n  im_LCh2UCS(), im_XYZ2Yxy(), im_Yxy2XYZ(), im_float2rad(), im_rad2float(),\n  im_Lab2LabQ(), im_LabQ2Lab(), im_Lab2LabS(), im_LabS2Lab(), im_LabQ2LabS(),\n  im_LabS2LabQ(), im_LabQ2disp(), im_XYZ2disp(), im_disp2XYZ(),\n  im_icc_import*(), im_icc_export*(), im_icc_transform*(), im_dE_fromLab(),\n  im_dECMC_fromLab(), im_dE00_from_Lab(), im_icc_ac2rc() as classes\n- added vips_colourspace(), vips_colourspace_issupported(), replaces all\n  derived conversions\n- faster and more accurate sRGB <-> XYZ conversion\n- support 16-bit sRGB import and export\n- rename UCS colourspace as CMC\n- dzsave can write zoomify and google maps layout as well\n- tilecache supports threaded access, so openslide read now threads\n- openslide2vips gets underlying tile size from openslide\n- embed has 'background' option\n- dzsave --layout google has a @background option\n- dzsave has a --depth option\n- update for new glib threading API\n- remove no threads option, glib no longer support it\n- better --help output for vips driver prog\n- vipsthumbnail -o allows absolute file names\n- much better exif handling for jpg images (thanks Gary)\n- preserve jpeg app13 (photoshop ipct)\n- vips_max() / _min() track the top n maxima / minima\n- deprecate im_maxpos_avg(): too specialised to be worth maintaining\n- deprecate im_linreg(): easily done by combining other operators\n- deprecate im_point(): easily done by combining other operators\n- add binary complex operations, with cross_phase as the only one so far\n- added vips_bandbool(), with vips_bandand(), _bandor(), _bandeor() as\n  convenience functions\n- added scRGB colourspace, linear light float space with sRGB primaries\n- all interpolators use corner convention ... we had round-to-nearest in\n  several of them before, causing a range of annoying problems\n- redone im_affine*() as a class\n- added input space displacement to affine\n- VipsArea is threadsafe\n- dzsave has a --centre option\n\n31/12/12 started 7.30.8\n- png icc profile write was broken\n\n31/12/12 started 7.30.7\n- better option parsing for \"vips\", thanks Haida\n- small fixes to help OS X\n- backported threaded tile cache from next version, im_tile_cache() now\n  uses it to prevent a deadlock, see comment there\n\n14/11/12 started 7.30.6\n- capture tiff warnings earlier\n\n14/11/12 started 7.30.5\n- fix libtool version mess up (thanks Benjamin)\n\n2/10/12 started 7.30.4\n- remove options from format string in .dzi (thanks Martin)\n- vipsCC.pc required the wrong version of vips (thanks Alessandro)\n- larger max tile size for dzsave\n- linecache is 50% larger to leave some slop room\n\n13/9/12 started 7.30.3\n- linecache sized itself too large\n- fix a compile failure if libtiff was not found (thanks Martin)\n- dzsave did not work for images with an odd number of scanlines\n  (thanks Martin)\n\n4/9/12 started 7.30.2\n- sequential stops all threads on error\n- sequential delays ahead threads rather than blocking them completely\n\n6/8/12 started 7.30.1\n- fixes to dzsave: shrink down to a 1x1 pixel tile, round image size up on\n  shrink, write a .dzi file with the pyramid params, default tile size and\n  overlap now matches the openslide writer\n- wrap VipsInterpolate for C++\n- so affinei and affinei_all appear in Python\n- be more cautious enabling YCbCr mode in tiff write\n- add \"DEPRECATED\" flag to arguments\n- jpeg load/save note and use the preferred resolution unit\n- better error msgs for enum args\n- fix compiler warnings in production build (thanks Dmitry)\n- fix spurious warnings about exif updates\n- VipsSequential has an integrated cache and stalls out of order threads\n- add a line cache ... sizes up dynamically with request size\n- tilecache / linecache use a hash table not a linear list\n\n20/7/12 started 7.30.0\n- support \"rs\" mode in vips7\n- add --vips-version cmdline arg\n- fix --without-tiff / exr / jpeg / png / magick\n- add --vips-fatal flag\n\n19/3/12 started 7.29.0\n- sanity-check PNG read geometry\n- nearest-neighbor interpolation rounds coordinates to nearest instead of\n  rounding down (thanks Nicolas)\n- add dzsave, save in deep zoom format\n- rework im_shrink() as a class\n- remove im_rightshift_size(), just a convenience function now\n- vipsthumbnail no longer removes profiles by default\n- much more gentle sharpening in thumbnails\n- added \"minimise\" signal, used by tilecache to drop\n- add :seq support to im_tiff2vips(), im_jpeg2vips() ... helps ruby-vips\n- better thread safety for vips8 operation dispatch\n- better thread safety for upstream / downstream image linking\n- added \"rs\" open mode, removed \"rd\"\n- added vips_operation_get_flags() ... system for attaching sets of flags to\n  operations\n- added VIPS_OPERATION_SEQUENTIAL flag\n- vips8 command-line interface uses this to turn sequential mode on\n  automatically when possible\n- better handling of input files in vips7 command-line interface\n- sequential can skip ahead, so extract / insert are now seq\n\n16/7/12 started 7.28.10\n- wopconst was broken\n- vips_sign() was broken\n- png save compression range was wrong\n- more/moreeq was wrong\n- vips7 ppm save with options was broken\n- don't cache write operations\n\n18/6/12 started 7.28.9\n- slightly more memory debugging output\n- remove references to the static bicubic interpolator from the docs\n- fix temp file handling on Windows --- was breaking for non-vips files\n  over 100mb\n- better support for using images from multiple threads\n\n18/6/12 started 7.28.8\n- fixes for centos5 portability\n\n18/6/12 started 7.28.7\n- add vips_flatten() -- flatten RGBA to RGB\n- better alpha handling in PNG load\n- don't save RGBA PNG as CMYK JPG (thanks Tobsn)\n- fix a crash with malformed jpg files (thanks Grigoriy)\n- vipsthumbnail enables sequential mode more and caches lines better\n\n19/4/12 started 7.28.6\n- better resolution unit handling in deprecated im_vips2tiff()\n- use TIFF_CFLAGS output from pkg-config (thanks Jay)\n- much faster vips_argument_map()\n- make jpeg pyramids work with tiff4\n- tiff loader always offers THINSTRIP (thanks Diuming)\n- add \"nocache\" operation flag, set for sequential load (thanks Diuming)\n- fix a crash in the tiff reader for huge values of RowsPerStrip (thanks\n  Nicolas)\n- remove use of G_DEFINE_BOXED_TYPE() to help compat (thanks Jake)\n\n19/4/12 started 7.28.5\n- ifthenelse blend mode was broken\n- small blend speedup\n- default to libtiff-4\n\n17/4/12 started 7.28.4\n- up max buffer size for vipsbuf\n\n6/4/12 started 7.28.3\n- vips_divide() failed for int arguments\n- fix warning for unused vips7 gvalue argument\n- fix openslide read: always return png-style rgba, im_argb2rgba() becomes a\n  NOP\n- cast to unsigned int now removes <0 values\n- vips7 interface to openslide now supports :,level,associated options (thanks\n  Benjamin)\n- make vips8 cache smaller\n- more accurate progress reporting\n\n13/3/12 started 7.28.2\n- xres/yres tiffsave args were broken\n\n13/3/12 started 7.28.1\n- add ICC profile read/write for png files\n\n30/1/12 started 7.28.0\n- version bump\n- added vips_foreign_find_save_options()/vips_foreign_find_load_options()\n- delayed write to foreign via a \"w\" image was not working\n- support operations with many returns in Python\n- sequential read mode\n- better im_shrink()\n- added vips_sequential()\n- new vips_sink_memory() keeps read ordering\n- tiff, jpeg, png readers support sequential read\n- max/min avoid NaN\n- oop, histnorm was broken by the new vipsstats\n- never use IM ping to get a header, fixes BMP load\n- set @filename for non-vips formats in vips7 compat layer\n- make Xres/Yres double\n- completely disable debug by default in production builds\n\n20/8/11 started 7.27.0\n- version bump for new dev cycle\n- im_subtract(), im_avg(), im_min(), im_minpos(), im_copy(), im_embed(),\n  im_flophor(), im_flipver(), im_insert(), im_insert_noexpand(), im_lrjoin(),\n  im_tbjoin(), im_extract_area(), im_extract_bands(), im_extract_areabands(),\n  im_replicate(), im_clip2fmt(), im_gbandjoin(), im_bandjoin(), im_invert(),\n  im_lintra(), im_lintra_vec(), im_black(), im_rot90, im_rot180(), im_rot270()\n  im_sintra(), im_costra(), im_tantra(), im_asintra(), im_acostra(),\n  im_atantra(), im_exptra(), im_exp10tra(), im_logtra(), im_log10tra(),\n  im_abs(), im_sign(), im_max(), im_maxpos(), im_deviate(), im_divide(),\n  im_multiply(), im_stats(), im_measure(), im_recomb(), im_floor(), im_ceil(),\n  im_rint(), im_equal*(), im_notequal*(), im_less*(), im_lesseq*(), im_more*(),\n  im_moreeq*(), im_remainder*(), im_and*(), im_or*(), im_eor*(), im_shift*(),\n  im_pow*(), im_exp*(), im_ifthenelse(), im_blend(), im_c2amph(), im_c2rect(),\n  im_bandmean(), im_c2real(), im_c2imag(), im_ri2c(), im_jpeg*2vips(),\n  im_vips2jpeg*(), im_tiff2vips(), im_vips2tiff(), im_exr2vips(),\n  im_fits2vips(), im_vips2fits(), im_analyze2vips(), im_raw2vips(),\n  im_vips2raw(), im_magick2vips(), im_png2vips(), im_png2*(), im_ppm2vips(),\n  im_vips2ppm(), im_mat2vips(), im_rad2vips(), im_vips2rad()\n  redone as classes\n- added argument priorities to help control arg ordering\n- generate has a 'stop' param to signal successful early termination\n- added optional output args, eg. x/y for min\n- CLI supports optional output args\n- in im_vips2tiff, enable YCbCr compression for jpeg write\n- VipsMin stops search early if it can\n- C API supports optional output args\n- switch back to int-valued operations\n- add the operation cache, various --vips-cache-* flags\n- fallback vips_init()\n- vips_tracked_malloc() tracks allocation size and can report total mem usage\n- cache limits, drop, init, flush plus command-line controls\n- remove dmalloc support, was never used and valgrind is better\n- im_csv2vips() allows quoted strings, including escaped quotes\n- added vips_shutdown()\n- added --vips-leak flag\n- more VipsImage props\n- added vips_image_write(), old one becomes vips_image_write_to_file()\n- added vips_region_paint_pel()\n- added VipsArea as a public struct\n- added array members and arguments\n- added nary\n- remove VipsPool, vips_object_local_array() is much better\n- cache.c now drops if you have too many open files\n- CLI args to change max files\n- new format for handling exif tags\n- switch SMALLTILE to 128, 512 was just too big\n- oop mode \"rd\" was not always being used for images\n- added ARRAY interpretation for images\n- VipsStats tracks minpos/maxpos as well\n- moved mask/ to deprecated\n- use atexit() to call vips_shutdown()\n- set _O_TEMPORARY on delete-on-close temp images if possible\n- unlink temps on rewind on *nix, less likely to leave temps on a crash\n- added complex conj as a basic operation\n- rect/polar/conj work on any format, not just complex\n- new VipsFile system for load/save in image formats\n- options now introspectable, try \"vips jpegsave\"\n- copy swap uses glib byteswap macros, about 2x faster\n- edvips can change vips header byte ordering\n- \"header\" is terse by default\n- \"header\" outputs filenames if working on many files\n- added openslide support (Benjamin Gilbert)\n- allow new-style load/save options in filenames to\n  vips_image_new_from_file() etc.\n- VipsFormat is deprecated\n- remove outchecks from documented API\n- support gobject-introspection\n- new Python binding based on gobject-introspection\n- only spot options at the end of arg strings\n- add vips_cache() as a vips8 operator\n- remove the old fft fallback\n- remove fftw2 support\n- much faster im_draw_smudge()\n\n14/1/12 started 7.26.8\n- interpolate CLI args were broken (thanks speckins)\n\n5/12/11 started 7.26.7\n- lazy read from tiled tiff from layers other than 0 was broken\n- optional args to vips_call*() do not work, disabled (fixed correctly in\n  master)\n- address calculations in files over 4gb were broken on 32-bit platforms\n  (broken since March 2011, oops)\n\n12/10/11 started 7.26.6\n- NOCACHE was not being set correctly on OS X causing performance\n  problems with large files\n- update Orientation exif tag on jpeg write\n\n12/10/11 started 7.26.5\n- jpeg read/write copies over XMP data\n- handle offset correctly in separable convolutions (thanks Nicolas)\n- macros for class arg boilerplate\n- class arg order set by new 'priority' param\n- VipsExtend, VipsDirection enums added\n\n12/9/11 started 7.26.4\n- fallback vips_init()\n- im_openout() compat stub was wrong, breaking ruby-vips\n- vips_class_map_concrete_all() needed a compat macro too\n- vips_class_map_all() was broken\n\n10/8/11 started 7.26.3\n- don't use G_VALUE_COLLECT_INIT(), many platforms do not have a glib this\n  recent\n- don't leave image->kill set when we detect termination\n- test for a working C++ compiler, disable C++ parts of none found\n\n10/8/11 started 7.26.2\n- oops, im_benchmark.c had some stuff turned off\n- configure option --without-cfitsio was broken (thanks Mike)\n\n26/7/11 started 7.26.1\n- doc fixups\n- oops, ==0 missing from a strcmp() in vips7compat\n- fixed a race in im_XYZ2Lab() table build\n- added im_concurrency_get() to operation db\n- better benchmarkn.sh runs for the correct number of CPUs automatically, runs\n  three times for each one, and just reports the fastest\n\n26/7/11 started 7.26.0\n- version bunp for 7.26\n- various fixes to get win32 and OS X building\n\n6/12/10 started 7.25.0\n- attach the jpeg thumbnail and multiscan fields (thanks Mike)\n- faster tiff read for some common cases\n- faster im_tile_cache()\n- if we use C++ in libvips, add -lstdc++ to vips-7.xx.pc\n- im_vips2png() / im_png2vips() set / get png resolution (thanks Zhiyu Wu)\n- updated README\n- don't use tables for bilinear on float data for a small speedup (thanks\n  Nicolas Robidoux)\n- no tables for uchar either, about a 15% speedup (thanks Nicolas)\n- dmask write was broken\n- lr/tbmerge() cast images to match, like im_insert()\n- lr/tbmosaic() work for any mix of image formats / bands\n- removed ancient balance stuff from im_lr/tbmosaic()\n- gtk-doc for mosaicing\n- add im_fits2vips() to the operation database\n- im_fits2vips() is lazy and much faster\n- im__file_open_write() / _read() has a flag for text_mode, get rid of all the\n  remaining fopen()s\n- move cooc_* and glds_* to deprecated\n- move im_dif_std() to almostdeprecated\n- move im_simcontr() to almostdeprecated\n- add im_sines() to operation db\n- move im_spatres() to almostdeprecated\n- done gtk-doc for other\n- --vips-progress tells you about nthreads, tile size, nlines\n- gtk-doc for interpolate\n- move im_stretch3() to deprecated\n- move im_clamp() to deprecated\n- gtk-doc for video ... all operators done! amazing argh\n- set MAP_NOCACHE on OS X, otherwise performance dives off a cliff with\n  files larger than memory\n- removed man pages, we are all gtk-doc now\n- im_jpeg2vips() ignores weird APP1 chunks\n- im_add() for int/uint was broken\n- im_ri2c() was broken\n- added VIPS_FORMAT_BIGENDIAN format flag\n- moved IMAGE and REGION to VipsImage and VipsRegion, classes over VipsObject\n- Rect -> VipsRect\n- libpng-1.5 supported\n- better png read for 1-bit and palette images\n- fits write\n- better fits metadata support\n- renamed all header fields, old names still supported, hopefully\n- all of iofuncs moved to vips_ namespace\n- lots of old iofuncs API moved to deprecated\n- added VipsOperation, an abstract base class for all vips operations\n- added VipsAdd, the first operation object\n- im_tiff2vips() int/uint mixup for rows_per_strip, thanks Bubba\n- removed the links feature, won't work with vips8\n- got rid of the tools/ subdirs\n- added im_bufjpeg2vips()\n- tiff reader can do 1, 2, 4, 8 bit palette images\n- tiff palette read can do mono images\n- im_bufjpeg2vips() has a \"header_only\" parameter\n- added vips_image_get_data()\n- updated German translation (thanks Chris)\n- fixed typo in im_conv() overflow estimation which could cause errors\n- vips.c has new action syntax, knows about vips8 operations\n- add now has sizealike\n- vips7 binops all do sizealike too, also gbandjoin and ifthenelse\n- new API is now functional\n- vips.c generates GOption flags for vips8 operations\n- added im_gauss_dmask_sep()\n- laplacian generator lost -ve lobes for large sigma\n- added im_aconv(), approximate convolution\n- bumped smalltile to 512x512 for testing\n- added VipsPool, got rid of floating refs again, argh\n- VIPS_EXEEXT is now part of the exported API\n- im_blend() also does sizealike, oops\n- jpeg write was not inverting CMYK, thanks Ole\n- im_falsecolour() converts to mono 8-bit for you\n- im_icc_import*/export*() cast inputs for you\n- im_vips2tiff() uses im__temp_name() for intermediates\n- added vips_wrap7 ... wrap up vips7 operations as vips8 classes\n- man pages are back for commands\n\n30/11/10 started 7.24.0\n- bump for new stable\n- added im_dmask2imask(), im_imask2dmask()\n- im_rotate_*mask90() can do masks of any size (thanks Adam Turcotte)\n\n18/7/10 started 7.23.0\n- im_vips2bufjpeg() writes to a linked list, so it will work for any size\n  image and header\n- added im_vips2bufpng()\n- use GetTempPath() to pick a temp dir on Windows\n- added \"rd\" mode to im_open()\n- vipsthumbnail and vips use \"rd\"\n- im_divide spots /0\n- remove liboil dependency, we will use Orc instead\n- various small cleanups (thanks Tim)\n- add lcms2 support\n- VImage(filename) defaults to \"rd\" mode\n- revise window_offset / window_size, again\n- fix a mixup with ANY hints that caused performance problems on the main\n  benchmark\n- rewritten im_circle as im_draw_circle, im_circle moved to almostdeprecated\n- added IM_TYPE_RW args for inplace ops --- nip2 uses this to wrap inplace ops\n  automatically\n- special-case 3x3 masks in im_conv() for a 20% speedup\n- add IM_TYPE_RW flag for im__rw_image, helps nip2 auto-wrap inplace ops\n- im_insertplace() casts and bandalikes\n- copy iconv.m4 and friends in bootstrap, thanks Mike\n- moved the stupid _copy() versions of the inplace ops to deprecated, since\n  nip2 can call inplace ops directly now\n- added im_draw_rect(), moved im_paintrect() to deprecated\n- added im_draw_image(), moved im_insertplace() to deprecated\n- added im_draw_line(), now clips, moved im_fastline() to deprecated\n- added im_draw_line_user(), now clips, moved im_fastlineuser() to deprecated\n- added im_draw_mask(), now wrappable, moved im_plotmask() to deprecated\n- added im_draw_point(), moved im_plotpoint() to deprecated\n- added im_read_point(), now partial, moved im_readpoint() to deprecated\n- added im_draw_smudge(), moved im_smudge() / im_smear() to deprecated\n- convolution functions support complex images\n- im_blend() can have any format condition image and it's converted to uchar\n- security fix for vips-7.23 wrapper script (thanks Jay)\n- im_affine() has a larger safety margin\n- fix gtk-doc warnings\n- small mask load/save improvements\n- mask gtk-doc done\n- add cfitsio dependency\n- add FITS reader\n- land the vector branch and the orc dependency ... we have SSE\n  erode/dilate/add/conv\n- add IM_SWAP\n- dilate/erode do (!=0) on non-uchar images\n- add multipass Orc to im_conv(), 3.5x faster for 5x5 mask\n- im_profile() works for any image format, any number of bands\n- im_rank_image() works for mix of formats, bands\n- morph gtk-doc done\n- oops, missing braces in debug.h and util.h, thanks Laurence\n- update C++/Python binding\n- oop, bool constants are always (int) now, so (^-1) works for unsigned types,\n  thanks Nicolas Robidoux\n- much lower memuse for im_cache() in complex pipelines\n- im_scale_dmask() normalises to 20, not 100 ... we hit the fast\n  conv path more often\n\n12/5/10 started 7.22.2\n- the conditional image of ifthenelse can be any format, a (!=0) is added if\n  necessary\n- oops vipsthumbnail sharpening was turning off for integer shrinks,\n  thanks Nicolas Robidoux\n- im_vips2jpeg() could fail for very small images (thanks Tim)\n- threadpool wasn't stopping on allocate errors (thanks Tim)\n- vips_sink_disc() could block if allocate failed (thanks Tim)\n\n12/5/10 started 7.22.1\n- fix a problem with tiff pyramid write and >1cpu, thanks Ruven\n- constant ops clip to target range\n- oops, moreconst and moreeqconst were the same\n- better buffer handling in sinkdisc for single-line images\n- less chatty errors from \"vips\"\n- oops, don't rename \"copy_set\" as \"copy_\", thanks Ole\n\n12/5/10 started 7.22.0\n- bump and rename\n- vipsthumbnail has a manualpage and sharpens correctly\n- more interpolator work\n- fixes to --disable-cxx mode (thanks Mike)\n- added German translation, thanks Chris Leick\n- fixed typos in some messages, thanks Chris Leick\n- fix gettext startup\n- all \"colour\" in messages changed to \"color\", have a proper en_GB\n  translation file\n- vipsthumbnail delete profile failed if there was a profile\n- interpolate cli unref was broken\n- more accurate, slightly faster bilinear and bicubic (thanks Nicolas Robidoux)\n\n21/3/10 started 7.21.3\n- added progress feedback to threadpool\n- --vips-wbuffer2 switch does all wbuffer use now\n- im_wbuffer2() renamed as vips_discsink(), some cleanups\n- im_gammacorrect() can do 16-bit images too\n- im_histplot() could fail for signed int histograms\n- im_fwfft() and im_invfft() could free their output image too early\n- added im_local_imask(), im_local_dmask()\n- added im_mpercent_hist()\n- im_maplut() casts the index image to one of the uint types\n- fixed a couple of /0 problems with scale == 0 masks\n- set G_LOG_DOMAIN to VIPS so we can use g_warning etc.\n- added VIPS_DEBUG_MSG() macro\n- --vips-wbuffer2 turns on threadpool for im_iterate as well\n- im_vips2tiff() uses vips_sink() instead of threadgroup\n- strip out threadgroup\n- add --enable-debug=xxx flag\n- im_iterate() -> vips_sink()\n- better number-of-bands detection for im_magick2vips()\n- added im_get_argv0()\n- added PFM read / write\n\n16/1/10 started 7.21.2\n- \"invalidate\" is careful to keep images alive, so invalidate callbacks can do\n  im_close()\n- flood_blob could loop if start point == ink\n- added im_meta_remove()\n- added remove profile option to vipsthumbnail\n- added vips_bandfmt_iscomplex() and friends, im_iscomplex() and friends\n  deprecated\n- im_bandjoin()/im_gbandjoin() work with images of varying formats\n- added im_copy_native(), deprecated im_copy_from() and friends\n- im_check*() name rationalisation\n- finally removed old flood stuff\n- im_insert*() bandalike and formatalike\n- im_*join() bandalike and formatalike\n- im_ri2c() bandalike\n- im_vips2png() saves 16-bit PNGs, if necessary\n- vipsthumbnail has selectable interpolators, optional sharpen\n- moved a lot of stuff (eg. im_iscomplex()) from deprecated to\n  almostdeprecated to avoid breakage\n- im_csv2vips(): allow lines that end with EOF rather than \\n\n- im_vips2tiff has a bigtiff option\n- oops, im_lineset() needs to ask for WIO of mask and ink\n- move cache invalidation to REGION, fixes a race\n- don't im_invalidate() after paint, it can cause horrible performance\n  problems ... for example, im_plotmask() used as the action operator for\n  im_fastlineuser() is terrible\n- instead, users of the inplace operations need to call im_invalidate() at the\n  end of a set of paint actions to trigger an update\n- parent/child renamed as upstream/downstream in DAG\n- set VIPS_ICC_DIR in configure\n- ICC profiles are looked for in VIPS_ICC_DIR as a fallback\n- im_render() mask image generation no longer triggers image calc\n- threadgroups scale output buffers with number of threads for smalltile ...\n  improves SMP scaling for narrow images on many-way machines\n- default to max number of processors (--vips-concurrency and IM_CONCURRENCY\n  set >0 can override) on linux and win32\n- better nprocs guesser\n- im_render() fixes to help the paintbox, some speedups too\n- added im_wbuffer2(), a new distributed threading system, and --vips-wbuffer2\n  to enable it, thank you Christian\n\n15/1/10 started 7.21.1\n- added \"written\" callbacks, used to implement write to non-vips formats\n\n26/11/09 started 7.21.0\n- branch for new dev cycle\n- argh, missing init from colour.c (thanks Peter)\n- argh, im_measure() was not looping over bands correctly (thanks Peter)\n- removed mmap_limit, we now always use windows ... reduces VM use hugely,\n  because mmap windows are freed when their regions are freed, while images\n  are only unmapped when they are closed\n- have a min bytes for mmap windows as well, so we don't make too many tiny\n  windows\n- im_disp2Lab() was broken\n- deprecated.h is now defined in terms of current functionality, rather than\n  repeating stuff\n- im_flood() and friends rewritten, typically 4x faster\n- removed --with-cimg option, added --disable-cxx\n- added im_system_image() (thanks Roland)\n- added postclose callbacks\n- added vipsthumbnail\n- oops, generate C++/Python wrappers for deprecated operations by default\n- read TIFF images strip-wise, not scanline-wise\n- better TIFF YCbCr reading (thanks Ole)\n- isanalyze generates fewer silly error messages\n\n26/11/09 started 7.20.3\n- updated en_GB.po translation\n- file_length is gint64 to avoid win32 breakage\n\n23/11/09 started 7.20.2\n- GETTEXT_PACKAGE now includes lib version number (thanks Jay)\n\n11/11/09 started 7.20.1\n- oop, im_clip2fmt() was missing PTOP flag, should get a small speedup\n- im_conv() / im_convf() didn't like all-zero masks\n- small updates to im_convf() from im_conv()\n- im_read_imask() produced an incorrect error message if passed a doublemask\n- rename im_convf(), im_convsepf() as _f()\n- vips.c drops _f suffix when overloading\n- regenerate C++ binding, don't make deprecated package\n\n9/11/09 started 7.20.0\n- removed vips-7.x.spec.in, shouldn't really have this in SVN\n- bumped version to 7.20\n- fixes to get \"make dist\" working again\n\n3/4/09 started 7.19.0\n- version bump\n- tiny conv speedup\n- catch lcms error messages\n- fix includes for gtk+-3.0\n- report virtual memory too in im__print_all()\n- cosmetic changes to nohalo\n- im_magick2vips() needs to invert alpha\n- now (more or less) passes -Wextra\n- added \"fail\" option to im_jpeg2vips: fail with an error on any warning\n  (thank you Ole)\n- started gtk-doc changes\n- renamed im_meta_get_type() and im_header_get_type() as\n  im_meta_get_typeof() and im_header_get_typeof() to prevent confusion with\n  GObject type definers (was breaking gtkdoc object scan)\n- revised more names, limited documented API\n- im_buildlut() could segv for non-zero based tables (thanks Jack)\n- VIPS_BUF_STATIC() does not take length arg\n- check for SetImageOption() so we work with GraphicsMagick too\n- \"header\" sets a non-zero exit code if anything failed\n- add and use im_check_uncoded() and friends\n- matlab load handles column-major and plane-separated images (thanks Mikhail)\n- JPEG save allows \"none\" for profile, meaning don't attach a profile\n- saner, simpler, faster typecasting for im_add(), im_subtract(),\n  im_multiply(), im_divide(), im_remainder()\n- im_remainder() has a float result for float types\n- im_measure() allows sel == NULL, meaning all patches\n- added \"deprecated\" package\n- faster, simpler, better im_max(), im_min, im_avg(), im_deviate()\n- im_max() returns true modulus, not square of modulus, for complex images\n- im_avg() works for complex, returning average modulus\n- im_system() fix (thanks Roland)\n- im_system() rewrite\n- im_maxpos()/im_minpos() are partial and work for complex\n- im_max()/im_min() are now convenience functions\n- im_maxpos_avg() handles complex and multi-band images\n- added im_point(), rewrite im_point_bilinear() in terms of this\n- close callbacks now happen *after* images have closed resources (such as\n  open files) ... this lets them delete temps and stuff. Expect breakage :(\n- added vips_interpolate_get_window_offset()\n- boolean revised: smaller, more general, faster\n- im_remainderconst_vec() renamed to im_remainder_vec() for consistency\n- added im_shift*_vec()\n- renamed im_eor_vec() as im_eorimage_vec() for consistency, also and, or\n- renamed im_eorconst() as im_eorimage_const() for consistency, also and, or\n- relational revised: smaller, more general, faster\n- im_blend()/im_ifthenelse() allows many-band conditional, 1-band then/else\n- im_blend()/im_ifthenelse() allows band and format to differ between then\n  and else parts\n- better im_check() functions\n- added im_flood_other() as start of simple segmentation operator\n- added im_label_regions()\n- im_printlines(), im_debugim() deprecated (use im_vips2csv() instead)\n- meta, header, callback, error, region, check, generate, memory gtkdocs\n- removed printlines tool, vips2csv is much better\n- removed other useless tools as well: debugim, binfile\n- fix up addr calcs on 64-bit machines with >2gb images and inplace ops\n  (thanks Christoph)\n- im_generate() checks that im_demand_hint() has been called for this image\n- im_jpeg2vips.c, set scale_num on shrink (thanks Guido)\n- heh argh reading history always stopped after the first line (thanks Haida)\n- added im_histindexed\n- new im_iterate() calls start and stop functions from workers so resources\n  they make are owned by the worker thread ... this makes it possible to have\n  start functions which create multiple regions and therefore allows\n  im_iterate() to scan more than one image at once\n- threadgroup no longer has any default action, you must attach a work\n  function\n- added im_copy_file()\n- added im_insertset()\n- im_insertplace() allows small to be outside big\n- added im__colour_difference(), colour ops now work on any image format\n- added im_col_display_get_table(), so display tables are now shared by name\n- added im__colour_unary()\n- drop \"set\" postfix from names, so \"insert\" can now take a vector of positions\n- deprecate all the \"_raw\" variants, not really necessary now\n- removed \"contrib\", not very useful anymore\n- added im_header_as_string()\n- im_malloc()/im_free() now call g_try_malloc()/g_free() ... removes confusion\n  over whether to use im_free() or g_free() for things like im_header_string()\n- added im_history_get(), im_getexp(), im_printdesc() as wrapped functions ...\n  so you no longer need the \"header\" program\n- image vectors from Python work, woo\n\n25/3/09 started 7.18.0\n- revised version numbers\n- updated vipsmanual\n- revised manpages\n- removed name and \"changed\" from vipsobject since we don't use them yet\n- explicitly link with stdc++ for nohalo etc. stuff\n- wrap im_gauss_imask_sep in C++/Python\n\n6/3/09 started 7.17.3\n- revised nohalo\n- remove fading stuff from im_render() -- cleaner and simpler\n- configure spots support for \"restrict\"\n- reset dcm:display-range on magick read to help DICOM\n- saner im_buildlut() behaviour\n- added im_gauss_imask_sep()\n- allow open and view of truncated images (thanks Joe & Rachel)\n- revising rounding on im_affine*() coordinate transforms to make them more\n  stable\n- added Radiance write\n- added im_float2rad()\n- added IM_CODING_RAD, support where it makes sense (extract, flip, rotate,\n  etc.)\n- IM_PROGRESS env var\n- docs for rad2float and IM_CODING_RAD\n\n3/3/09 started 7.17.2\n- im_magick2vips.c: allow funky bit depths, like 14 (thanks Mikkel)\n- isradiance was returning TRUE too often\n- radiance loader now loads packed RGBE/XYZE instead of unpacking to float\n- added im_rad2float()\n\n11/10/08 started 7.17.0\n- merge vips-7.16 branch back into trunk\n- bumped version number to 7.17.0\n- re-added type.[hc]\n- added vipsinterpolate and im_affinei\n- added yafrsmooth interpolation\n- added yafrtest\n- added yafrnohalo\n- ubuntu 8.10 changes\n- interpolators get an output pointer, not region\n- tuning for bicubic\n- revised transform / clip code, we now do corner not centre\n- yafr-smooth reworked along the lines of bicubic\n- cleanups after yafr hacking\n- added affinei_all\n- don't set im_error() on failed callback\n- moved im_format_t to VipsFormat, now sits over VipsObject\n- IM_FORMAT_FLAG_PARTIAL -> VIPS_FORMAT_PARTIAL\n- updated docs\n- interpolators use type introspection\n- added vips --list classes, does formats too\n- include sys/param.h to get PATH_MAX in more places\n- added vips_format_get_flags()\n- oop, forgot to check for cancel during tiled tiff write\n- don't use mmap for tiff read: no performance advantage, chews up VM\n- VIPS_INTERPOLATE_SHIFT bumped to 12, we need the extra precision for u16 gel\n  data\n- added string->double transform for cmdline args\n- merged class-params branch back into trunk\n- IM_FREE() can do \"const char*\" variables\n- im_buf_t renamed as VipsBuf\n- added vips_object_to_string()\n- added \"nickname\" and \"description\" properties to VipsObject\n- shift/and/or/eor ops were broken for non-int types\n- added nohalo interpolator\n- updated format docs\n- IM_INPUT_INTERPOLATE() now used by affinei and affinei_all\n- added vips_object_new\n- resamplers/interpolators now in a resample package\n- removed yafrnohalo.c\n- added matio as a dependency\n- added Matlab save file read\n- added Radiance file read\n- better file-not-found messages\n\n11/9/08 started 7.16.3\n- oop typo in manpage for im_project()\n- doc fixes\n- returning non-zero from eval callbacks was not always stopping computation\n\n11/9/08 started 7.16.2\n- added --without-v4l option\n- added -no-undefined to libsrcCC build, so we get a libvipsCC.dll\n- removed the swig dependency: we include the generated bindings in the\n  distribution tarball\n\n6/9/08 started 7.16.1\n- trigger eval callbacks on tiled tiff write\n- added vips as an im_format_t\n- added im_format_write()/_read() convenience functions\n- more cleanups for the format API, argh\n- removed win32/ directory now mingw finally makes DLLs correctly\n- removed the windowed spcor for now, it has some edge effects\n\n24/8/08 branch for 7.16\n- renames and version numbers\n- load plgs from libdir as well as libdir/vips-x.x for compat\n- complex -> complex conversion was broken\n- refstring <-> gstring transforms\n- better behaviour with Magick non-presence\n- added --enable-links switch to configure ... we no longer make the bin/im_*\n  links by default\n- started a 'format' section in the docs\n- configure fails if no gettext found\n- revised po/\n- released as 7.16.0!\n\n25/5/08 fork for loadable image format branch\n- image load/save in non-vips format code moved to own dir\n- simple format searching added\n- some cleanups for vips load\n- im_open() simplified\n- add im_format_flags\n- only consider formats with a save method in im_format_for_name()\n- oops, format sort order was reversed\n- im_filename_suffix() includes \".\" in suffix\n- merge back into trunk for 7.15.1\n- remove im_ispng(), im_png2vips_header() etc. & friends\n- add \"vips --list formats\"\n- rename VBuf as im_buf_t for consistency\n- add type.[hc], start of new type system\n- removed man pages for IM_MIN, MAX and RINT to avoid case confusion on\n  OS X / win\n\n7/3/08 started 7.15.0\n- MAGIC constants should be tagged as unsigned\n- write MAGIC correctly on sparc/powerpc machines (thanks Joe)\n- oop, we were still making fade threads even when not fading\n- tiny cond jump fixes for valgrind in colour.c\n- remove -lstdc++ from libs, except on windows\n- push Magick cflags earlier in the include order to make it easier to pick\n  GraphicsMagick over ImageMagick (thanks Mikhail)\n- fix the en_GB translation\n- use meta to preserve resunit between tiff load and save\n- small doc improvements\n- read and write CMYKA tiff (thanks Doron)\n- performance improvements for morphology ops, esp. when zooming out\n- oop, im_render() was broken for mask == NULL\n- better support for multiple Python installs (thanks Jay)\n- better IM_SETSTR() stops some warnings\n- im_histcum() works for signed histograms\n- better rounding for im_conv(), im_convsep()\n- tiny speedup for im_conv()\n- better /0 test for remainderconst\n- revise i18n configure, get rid of intltool\n- command-line IMAGVEC input could segv with non-vips image output\n- added .tobuffer()/.frombuffer(), .tostring()/.fromstring() to Python binding\n- add PIL_mode_from_vips () and vips_from_PIL_mode () utility functions\n- update docs for new Python stuff\n- FIND_ macros no longer search for stuff, you have to specify prefixes if the\n  packages are not on the default path (or in $prefix). This avoids some\n  accidents on some platforms\n- configure prints a summary of optional packages found at the end\n- im_lhisteq() checks for window too small\n- added invalidate callbacks\n- now tests for MagickWand before ImageMagick (thanks Adam Turcotte)\n- added \"-rotate\" option to vips2dj\n- added man page for im_resize_linear\n- better jpeg-in-tiff YCbCr read (thanks Ole)\n- oops, invalidatefns were not being freed on im__close()\n- VMask() can init from std::vector, so Python can init from []\n- added IM_LIBDIR, im_guess_libdir()\n- load plugins from libdir/vips-x.x on startup\n- added meta get/set int/double/string/area/blob/GValue to C++ API\n- include time_t in vips.h, thanks Nicolas Robidoux\n- lock global image list (thanks lee)\n\n25/1/08 started 7.14.0\n- bump all version numbers for new stable\n- better CMYK JPEG read (thanks Ole)\n- add __str__ to VError in Python (thanks Ole)\n- revert the dynamic wrapping for Python :-( next version!\n- added VImage::convert2disc (thanks Ole)\n- you can now set the jpeg quality factor for tiff pyramids (thanks Joe)\n- you can now shrink jpegs during read, see \"man im_jpeg2vips\"\n- added CMYK JPEG write\n- optionally use GraphicsMagick (thanks Bob Friesenhahn)\n- look for MAGICKCORE_HDRI_SUPPORT (thanks Marcel)\n- set icc profiles in tiff pyramids explicitly (thanks Joe)\n- add --without-cimg configure option\n- add im_maxpos_subpel\n- make im_abs compile without liboil\n- add im_align_bands\n- fix type overflow in complex division\n- fix im_cross_phase and im_addgnoise (Tom)\n- updated docs, C++ and python\n- header no longer stops on error\n- C++ dummy2.cpp helps OS X linking\n\n12/12/07 started 7.13.3\n- added \"include <cstring>\" to VImage.cc to help gcc 4.3\n- started moving the python binding to dynamic wrapping\n- added im_wrap(), im_wraptwo(), im_phasecor_fft(), im_cross_phase() (Tom)\n- memleak plugged in im_save_string_setf()\n- bugfix in and docs for im_gradcor() (Tom)\n- use Glib macros to make im_msb work on big-endian platforms (Tom)\n- use Glib macros to get rid of needless compile warnings (Tom)\n- fix type overflow in im_c2ps/im_abs (Tom)\n\n31/10/07 started 7.13.2\n- build cimg on windows fixes\n- various include cleanups, updated man pages\n- break im_wbuffer() out to a separate API\n- use im_wbuffer() to make im_vips2jpeg() compress in the background\n- also im_vips2png(), im_vips2tiff(), im_vips2ppm()\n- revised evaluation progress system\n- new evalstart/evalend/preclose callbacks fix over/underflow reporting\n- but the meaning of evalend has changed in a non-backwards-compatible way :(\n  use preclose instead ito get the old behaviour\n- added \"--vips-progress\" flag to turn on a simple eval progress tracker\n- make im_spcor[12] static, im_spcor is wrapper (Tom)\n\n28/9/07 started 7.13.1\n- vips2dj can print RGB images\n- oop, include <stdexcept> missing\n- add protos for generate/iterate function args, fix warnings\n- add cimg package, we now have C++ source inside VIPS, sigh\n- added OUTPUT_DOUBLEVEC and OUTPUT_INTVEC, use for im_maxpos_vec() and friends\n\n29/8/07 started 7.13.0\n- we now have a trunk and the version is 7.13.x, woo!\n- move manpages into a separate man/ dir ... speeds up builds a lot on windows\n- don't install malkovich\n- don't fail on unknown args for python (thanks Simon)\n\n1/8/07 started 7.12.5\n- im_embed() is more general ... x and y can be negative\n- predicate.c is smaller and cleaner\n- libsrcCC link improvement from Pablo\n- support 32/64-bit ImageMagick as well (thanks Marcel)\n- better im_magick2vips() for Q8 ImageMagick\n- split repository to trunk/branches ready for a stable 7.12.x branch\n\n27/7/07 started 7.12.4\n- proto.h had vars called small, breaking on win32\n- more python fixing, we now have working matrices too\n\n17/7/07 started 7.12.3\n- fix to VImage.i for gcc 4.2 (thanks Damir)\n- eek, off by 1 for more than 1 band hists\n- needed a slightly larger worst-case buffer in im__b64_encode()\n- tiny cleanup for make_hI() prevents cond jump on ui in valgrind\n- --disable-threads was broken again\n- remove .svn dirs from dist\n- now passes distcheck again\n\n17/7/07 started 7.12.2\n- added im_bandmean()\n- added support for TIFFTAG_PREDICTOR (Andrey Kiselev)\n- fix TIFFOpen() mode snafu (Andrey Kiselev)\n\n11/5/07 started 7.12.1\n- memory.c abort()s with DEBUG\n- oops, im_bits_of_fmt() manpage was not being installed\n- im_histcum() can do all image types\n- updated NEWS\n- added im_csv2vips_header()\n- command-line csv read was broken (thanks Tom)\n- removed length limit on argument vectors (Tom)\n- added IM_PREFIX, configure-time install prefix\n- oop, turned off memory.c DEBUG\n- fix some bogus gcc 4.1 warnings with im_open_local_array()\n- better vips usage message\n- oops, IM_ANY missing from im_demand_hint() manpage (thanks Shahid)\n- just warn if plugins fail to load in im_init_world()\n- expose Vargv and make refblock public rather than private so that\n  subclasses of VImage can add vips-style member operations (thanks Pablo)\n- oops, im_initdesc() needed to have bbits set correctly (thanks Shahid)\n- make VError derive from std::exception more officially\n- woo, got exceptions working in SWIG\n- soname version bumped to 12.x.x\n- oops, added vector ops to Python\n- check for overflow of int in return of strtol in dispatch system (Tom)\n- add im_[di]mask_[xy]size to dispatch system (Tom)\n- add im_gradcor(), im_grad_[xy] (Tom)\n\n26/3/07 started 7.11.21\n- ooo, added %include \"std_except.i\" & friends to VError.i, VImage.i\n- im_init_world() is more lenient about recursive invocation\n- im_gbandjoin() falls back to im_copy() for 1 input image\n- race condition fixed in im_render.c (thanks Simon)\n- bump for 7.12!!!\n\n26/1/07 started 7.11.20\n- another fix to im_region_image() (thanks Mikkel)\n- tiny speed up to im_rect_includesrect()\n- avoid recursive invocation in im_init_world() (thanks Christian)\n- fix to extract_prefix (thanks Christian)\n- buffer cache is now per thread\n- combine buffer unref and ref in a single operation to reduce malloc/free\n  cycles\n- new internal API for passing regions between threads means we can remove\n  buffer locks\n- more buffer/region sanity checks, plus a memory barrier\n- lock around error buffer changes\n- im_vips2mask() was wrong for nx1 m-band images\n- liboil back to \"test\"\n- add buffer_cache_list to avoid GHashTable _insert()s\n- oop, --vips-concurrency was broken\n- renamed (in dispatch layer) im_and/or/eor_const -> im_and/or/eorimageconst\n  for consistency\n- C++ API wraps IMAGEVEC, DOUBLEVEC, INTVEC arguments\n- oop, IMAGE % vector<double> was broken\n\n21/12/06 started 7.11.19\n- added im_linreg() (Tom)\n- various C++ API polishes, plus a bugfix (Dennis Lubert)\n- vips.spec split to devel and python too (Dennis Lubert)\n- be more explicit about sizeof(magic)\n- init magic to native order by default (thanks Dennis)\n- Hist becomes im_history_get()\n- new history mechanism is faster, uses much less memory, and removes\n  duplicate lines\n- added im_get_option_group()\n- added official im_concurrency_set()/_get()()\n- don't read bbits from vips files ... set ourselves from bandfmt\n- oops add RGB16 and GREY16 to C++ header\n- --list packages option to vips.c\n- updated docs to 7.12\n- oops, im_region_image() snafu was causing a lot of recomputation\n- make im_mpercent() suck a little less\n- EXIF save was a bit bOrked ... cause of mac crashes?\n- im_histgr(), im_heq(), im_hist() all number bands from zero now\n- fix stride in liboil calls\n- set RGB16 on 16-bit RGB ICC export\n\n29/11/06 started 7.11.18\n- added im_buffer_t so regions can share calculated pixels: 2-3x speedup on\n  the benchmark\n- im_region_local() -> im_region_buffer()\n- im_sharpen() order change to help sharing\n- im_invalidate() clears buffer caches\n- add sentinel attributes\n- add some missing im_demand_hint()s\n- paint ops invalidate the output image\n- fix nothread eval\n- raise threads limit to 1024 (thanks Christian)\n- manual redone\n- vipsCC python init() hooks\n- add liboil dependency\n- use liboil for im_abs(), im_add(), im_divide(), im_floor(), im_multiply(),\n  im_subtract(), im_lintra(), im_avg(),im_deviate()\n- quiet libtoolize test (thanks Tom)\n- im_benchmarkn now regrows image each time\n- strip meta from sample2.v ... saves a lot of mem (esp. Hist)\n- added im_isscalar() (Tom)\n- added IM_REGION_ADDR_TOPLEFT() (Tom)\n- reduce size of im_rightshift_size.c to help compile (Tom)\n- make im_stop_many(NULL) safe (Tom)\n\n24/11/06 started 7.11.17\n1;5Q\n- better benchmark script makes graphing easier\n- double-buffer image file writes\n- reuse write threads\n- clean up threadgroup / iterate / generate\n- added im_benchmarkn to make it easier to make a CPU-bound op on large\n  machines\n- im_cache() failed for cpus > 1\n\n1/11/06 started 7.11.16\n- moved im__convert_saveable() into im_copy() (thanks Christian)\n- missing gobject dependency (thanks Christian)\n- --enable-threads was broken (thanks Christian)\n- eval without theads was broken (thanks Christian)\n- LIBADD libvips.la to libvipsCC.la (thanks Simon)\n- benchmark.sh is now plain sh, not bash\n- set ORIENTATION_TOPLEFT in im_vips2tiff (thanks Josef)\n- oops, im_vips2csv() output separator was broken\n- added im_benchmark2\n- move XYZ2Lab LUT build outside the eval thread\n\n30/10/06 started 7.11.15\n- print leaked windows\n- oops, race condition in im_window_unref()\n- integrated im_region_window() into im_region_image(), tiny speed up\n\n6/10/06 started 7.11.14\n- ifthenelse and affine dhints revised\n- buildlut no longer outputs x cods\n- configure asks for glib >= 2.6 (we need GOption)\n- configure uses AC_TOOL_CHECK to find tool names to help cross-compiling.\n- better configure test for libexif\n- add </libexif/ prefix if required\n- test for glibtoolize during bootstrap to help OS X\n- add --version to vips main prog\n- don't set Type in im_scale, want to be able to scale hists, for example\n- im_vips2mask() allows multiband hists as well\n- im_vips2csv() lets you specify an output separator\n- vips.c cleanups in arg handling\n- removed python binding to C layer, too hard to get it working right\n- leak test python test program\n- added throw() decls to C++ to help SWIG\n- no longer derive VError from std::exception, can't get it to work with SWIG\n- added mmap window manager to share windows between regions ... big reduction\n  in VM use for large workspaces and for SMP\n- add im_spcor2 (with sliding window) (Tom)\n\n15/9/06 started 7.11.12\n- python vips wrapper hooks into init to start vips\n- oop, python detect was broken again\n- im_file_length() error return was wrong (thanks Christian)\n- im_csv2vips() isnored last column if there was no trailing\n  whitespace/quoting\n- test for NULL filename/mode, common if you forget to check argc\n  (thanks Bruno)\n- im_break_token() returns NULL on trailing whitespace ... helps read_dmask\n  work with trailing whitespace on matrix headers\n- added im_buildlut(3)\n- removed extra im_free() in im_copy() fallback in im_msb()\n- added GValue input/output args\n- various C++ binding improvements (thanks Dennis): namespace support,\n  VError inherits from std::exception, small fixups\n- remove im_msb() warning on fallback to copy for uchar ... not very serious,\n  happens a lot in nip2\n- added <vips/vips> C++ include ... include in a namespace\n- added im_benchmark / SMP benchmark script\n- add im_maxpos_avg() and im_point_bilinear() (Tom)\n- make im_region_free(NULL) safe (Tom)\n- link in manpages for im_contrast_surface (Tom)\n\n8/9/06 started 7.11.11\n- add im_norm_dmask()\n- removed old code for gradient and lindetect\n- internal decls split from proto.h to help SWIG\n- test for python and SWIG during configure\n- added python dir for the binding\n- python binding done!\n- oops, --without-python was broken (thanks Tom)\n- added python/test\n- add im_lu_decomp() im_lu_solve(), rewrite NR type functions in terms of these (Tom)\n\n23/6/06 started 7.11.10\n- still more im_affine() rounding/clipping tweaks\n- ignore \"--\" arguments to vips.c\n- im_init_world() also sets g_*_prgname() and loads plugins\n- add manpage for im_init_world() (oops)\n- error_exit() prints prgname\n- various cygwin fixes\n- fix cache thread assert failure (thanks Joe)\n- \"header\" now uses GOption, slightly different args, will loop over args\n- fixed assert() overenthusiasm in im_prepare()\n- im_csv2vips() now has separate whitespace / separator tables\n- add im_rightshift_size() (Tom)\n- add im_maxpos_vec(), im_minpos_vec() (Tom)\n- add im_norm_dmask() (Tom)\n- make im_free_[di]mask(NULL) safe (Tom)\n\n23/6/06 started 7.11.9\n- back on sourceforge CVS again\n- require openexr 1.2.2 or greater\n- range check xy on im_insert*() for sanity\n- VMask::invertlut decl removed (thanks Jean)\n- added \\\"all\\\" option to vips.c\n\n17/5/06 started 7.11.8\n- debrokened openexr read\n- added im_tile_cache()\n- added tiled read to im_exr2vips()\n- im_tiff2vips() now uses im_tile_cache() rather than its own cache ...\n  faster in some cases, less RAM use in some cases, saves 200+ lines\n- removed 'broken' read option from im_tiff2vips()\n- read/write doubles with g_ascii_strtod() and friends where appropriate\n- add a \"thread\" member to region to help sanity check region ownership\n- saner threadgroup fixes a race problem on gcc 4.0.3 / amd64\n- added im_vips2csv()\n- im_open() now does CSV read/write too\n- oops, broke vips main prog for function name in argv1 case\n\n22/4/06 started 7.11.7\n- split vips_png.c to im_vips2png.c and im_png2vips.c\n- added OpenEXR dependency\n- added im_exr2vips(), im_exr2vips_header()\n- added im_isexr(), im_open() knows about OpenEXR\n- added im_contrast_surface(), im_contrast_surface_raw() (Tom)\n- added im_msb(), im_msb_band() (Tom)\n- im_scale() sets Type on output\n- added RGB16, GREY16 types\n- im_*2vips() set these types if appropriate\n- configure fixes for mac\n- vips main prog uses GOption\n- im_icc_* locks around calls to cmsDoTransform() to avoid corruption on SMP\n  machines\n- add im_prepare_many() (Tom)\n\n10/3/06 started 7.11.6\n- typo in manpage and header for im_rect_dup() (Tom)\n- don't abort image load if XML read fails\n- added im_video_test() ... test video source\n- oops, lcms .pc finder was not working\n- clipping problem in im_affine() fixed (thanks Clare)\n- test for attr support in libmagick\n- im_text() returns an error for empty string\n- im_falsecolour() scale reversed\n- im_remosaic() could crash on bad mosaics\n- configure changes to fix --without-magick, lcms and fftw (but sadly we now\n  require .pc files for these libs)\n- im_vips2jpeg() automatically converts to 1 or 3 band sRGB uchar for write\n- also im_vips2png()\n- added im_project()\n\n20/2/06 started 7.11.5\n- added im_csv2vips()\n- commas in filename options can be escaped with a '\\'\n- raise tile buffer limit (thanks Ruven)\n- im_spcor() and im_fastcor() have prettier borders\n- im_fastcor() returns sum of squares of differences, not sum of abs of\n  differences\n\n18/11/05 started 7.11.4\n- small win32 fixes, thanks Juan\n- added im_flood_blob_copy() ... a temporary hack\n- much faster im_histplot()\n- read RGBA palette-ized PNG images more robustly (thanks Tom)\n- turn on -ms-bitfields automatically for mingw\n\n26/9/05 started 7.11.3\n- better error recovery for im_binfile() file too large\n- all raw files now use mmap windows, so (eg.) ppm and analyze reads can go\n  >2GB\n- remove DISABLE_COMPAT ... you now have to define IM_ENABLE_DEPRECATED to get\n  broken #defines\n- fix to build without exif, thanks Chas\n- use native win32 API for seek()/truncate() to work with large files\n- use attribute to check printf-style args with gcc\n- fix gcc4 warnings\n- removed ebuild, since it's in gentoo now\n- im_magick2vips() sets meta from attributes (good for dicom)\n- im_magick2vips() writes many-frame images as tall thin VIPS images\n- im_histcum() was broken for vertical histograms\n- im_histnorm() is neater\n- simpler and faster inner loop for im_conv() and im_convf() avoids gcc4 bug\n- appendc() was reading past the end of the buffer on MSB machines\n\n13/6/05 started 7.11.2\n- im_copy_set() was messed up in 7.11.1\n- put into CVS, phew\n- fixed a rounding bug in im_affine() ... should no longer get black edges on\n  image resize\n- if TIFF open fails in im_open(), try going through libmagick\n- merge requires all bands == 0 for transparency (used to just check 1st\n  band)\n- 16 bit LAB TIFF read/write was wrong\n- new GType for refstring makes it visible from im_header_map()\n- jpeg loader attaches exif data (and human-readable meta fields)\n- jpeg saver writes any exif data\n- meta not wiped by im_*incheck() in a \"w\" image\n- meta keeps traverse order\n- now require glib >= 2.4\n- require libxml-2.0 for meta save and new history mechanism\n- no more .desc files, history saved in XML after pixel data\n- i/s/d meta fields saved there too\n- added base64 encode/decode\n- added blob header write\n- added a save string type: types which define transforms to and from the\n  save format get serialized\n- GValue meta API now exposed, since we can serialise anything\n- jpeg loader loads ICC profiles\n- jpeg saver saves ICC profiles from the VIPS header\n- src/header.c knows about meta system\n- added im_analyze2vips(), im_grid(), im_raw2vips()\n- extract/grid/replicate/zoom were not setting TRANSFORM flag\n- better falsecolour LUT\n- less stupid + more portable read/write of VIPS header\n- better im_updatehist()\n- jpeg load sets vips xres/yres from exif, if possible\n- jpeg save sets exif xres/yres from vips, if possible\n- icc_export and icc_transform  attach profiles and intents to output images\n- added im_icc_import_embedded() to import with an embedded profile\n- split vips_jpeg.c into two, it was getting too big\n- added im_cp_descv(), im_cp_desc_array(), funcs use them\n- removed im_append_Hist() from API\n- fixed meta copy bug\n- better history copy, removed nonsense about 1st line of Hist being special\n- tiff read/write now reads/writes ICC profile from meta\n- edvips rewritten to remove stupidness, and can now set xml\n- header can now print xml extension block\n- IM_ prefix for colour temp names\n\n1/6/05 started 7.11\n- added im_copy_morph()\n- im_region_region() allows Bands and BandFmt to differ, provided\n  sizeof( pel ) is the same ... makes im_copy_morph() work\n- added im_meta*() functions (MW)\n- im_header_*() rewritten for meta\n- added im_header_exists(), im_header_map()\n- use pkg-config to find libpng and ImageMagick\n- added im_lineset()\n- added im_extract_areabands() (JF)\n- added im_copy_from() (JF)\n\n15/4/05 started 7.10.12\n- im_ifthenelse just evals left/right for region all zero/all one\n- also im_blend\n- swap g_setenv() back to plain setenv() so we work with glib 2.2\n\n9/4/05 JC started 7.10.11\n- docs no longer have broken links\n- fixed memleak in im_text()\n\n8/4/05\n- one bit tiff read was sometimes reading a byte too far in each scanline\n\n14/1/05 started 7.10.9\n- im_filename_split() will now usually work for filenames containing ':'\n  characters\n- added im_render_fade() for fancier nip2 image repaint\n- added \"ccittfax4\" as a TIFF compression option\n- fix all 64-bit compiler warnings\n- \",\" allowed as column separator in mask read\n- better at spotting singular matrices\n- small im_render() tidies\n- glib dependency reduced to just 2.0, but untested ... helps people building\n  on older systems who aren't interested in nip2\n- removing leading spaces from IMAGEVEC arguments\n- load non-interlaced PNGs more efficiently\n- 1 point mosaic functions work on more image types\n- better memory allocation debugging info\n- local memory on regions can shrink as well as grow\n- shut down threadgroups on render if no dirty tiles\n- limit number of simultaneous renders\n- higher mmap window threshold\n- allow max == -1 for unlimited render cache\n- 'priority' marks non-suspendable renders\n- im_embed() mode == 4 paints white pels\n- im_tiff2vips() was broken with --disable-threads\n- oops, im_errormsg() compat macros were GCC only\n- larger default tile size and strip height\n- tiff write sets PHOTOMETRIC_CIELAB for vips TYPE_LAB images ... so we can\n  write float LAB as well as float RGB (thanks Ruven)\n- also 16 bit LAB TIFF write\n- im_render() rewritten\n\n20/11/04 started 7.10.8\n- im_sharpen() is ~15% faster\n- more quoting for MAGICK finder\n- im_XYZ2Lab() uses a LUT rather than cbrt(), 5x faster\n- --disable-threads removes gthread dependency completely (thanks Simon)\n- intercept TIFF warnings as well as errors ... stops occasional libMagick\n  exceptions\n- add im_init_world() to im_init() as well to help backwards compat (thanks\n  Simon)\n- im_icc_present() function description was broken, thanks Jay\n- oops, libtool library versioning was wrong, thanks Jay\n- can now make TIFF pyramids of any non-complex image type (was uchar and LAB\n  only), thanks Ruven\n- 1st order mosaic code now works for LABQ too\n- build system changes to make \"make distcheck\" work\n- RPM .spec files fixed up and updated by configure (thanks Simon)\n- tiny cleanups for vdump\n- use g_setenv()/g_getenv()\n- tiny improvements to IM_FREE*()\n- tiny VImage debug print fixes (thanks Jay)\n- swap off_t for gint64 to fix LARGEFILE support on win32\n- computation feedback now uses gint64 for number of pels, so we give feedback\n  correctly on images with >2**31 pels\n- other small fixes for >2**31 pels in an image\n\n10/11/04 started 7.10.7\n- im_histnD() was not checking BandFmt (thanks Kirk)\n- improvements to threading system speed up non-vips output in some cases\n- use cbrt(x) where we can ... 10x faster than pow(x,1.0/3) on win32\n- typeo in im_text() when built without PANGOFT2 (thanks Stefan)\n\n1/11/04 styarted 7.10.6\n- tiny doc fixes\n- scripts now only depend on 'vips' program\n- im_open( \"r\" ) is now lazier ... for non-VIPS formats, we delay read until\n  the first ->generate()\n- so im_open_header() now deprecated since im_open(\"r\") is identical\n- now looks for fftw3 as well as fftw2 ... slightly faster ffts\n\n19/10/04 started 7.10.5\n- fix to light_correct (thanks Jay)\n- edvips knows about xoffset/yoffset\n- better vips enum<->char conversions\n\n4/10/04 started 7.10.4\n- man page fixes (thanks Jay)\n- removed last csh scripts (thanks Jay)\n- scripts default VIPSHOME to $prefix (thanks Jay)\n- doc build system tidies\n- im_rank() edge padding was wrong\n- im_vips2tiff() can now embed ICC profiles\n\n22/9/04 started 7.10.3\n- mildly better im_vips2tiff()\n- *, -, +, /, % between two images now work for mixed number of bands\n- im_free() was missing a man page\n- revised documentation\n\n1/9/04 started 7.10.2\n- C++ .pc files were still set for 7.9, grr\n- im_insertplace() didn't check compatibility of images (thanks Matt)\n\n27/7/04 started 7.10.1\n- set default stack size explicitly to help platforms with a very low default\n- 16 bit RGB tiff read was broken (bug introduced in 7.9.5, thanks Haida)\n- !pangoft2 was broken, thanks Kenneth\n- win32 build fixes\n\n12/7/04 renamed as 7.10.0\n- added NOCACHE function flag ... stops nip memoising video & paint ops\n- added im_extract_bands() ... takes out many bands from an image\n- im_vips2tiff() scanline write speed up for area pipelines\n\n10/6/04 started 7.9.6\n- tiny polishing of im_ppm2vips()\n- im_blend() can now work on labq\n- boolean ops all work on float/complex images (by casting to int)\n- im_maplut() was broken for 1 band image + many band lut + >8 bit output\n- im_lintra_vec() now handles 1 band image and many band vector to make many\n  band image\n- oops, im_lintra_vec() was missing a man page\n- im_measure() can work on labq\n- im_lhisteq() uses new embed mode, _raw() version is one pixel smaller, sets\n  Xoffset/Yoffset for new origin scheme\n- generalised im_tone_build() to any image type to make im_tone_build_range()\n\n20/5/04 started 7.9.5\n- tiff output res can be a single number too\n- added im_text() to make a bitmap from a string with pango\n- im_tiff2vips() does 16 bit RGBA\n- im_binfile() was broken since 7.9.2 due to im_mapfile() change\n- im_ppm2vips() now works for 16 bit images\n- added im_copy_swap() ... copies, reversing byte order\n- im_resize_linear() was broken for some images, thanks Javi\n\n8/3/04 started 7.9.4\n- oops, config.h include missing in a few places\n- im_vips2tiff() can now write 1 bit images\n- im__find_lr/tboverlap() now exported to nip\n- better edge tile handling for tiff read/write (thanks Ruven)\n- added extend-pixels-from-edge mode to im_embed()\n- im_conv*(), im_rank(), im_stdif(), im_dilate(), im_erode() all use it to\n  expand their input, so their output now has guess borders, not black borders\n- im_fastcor() now does an im_embed( 1 ) on the output ... the zero borders\n  were very annoying before, since you would usually be searching for the\n  minimum point\n- no change to im_spcor(), since you will usually be searching for the maximum\n- better im_render() cache behaviour under heavy loads\n- im_affine() revised\n\t* clip, resample and transform is now pixel-perfect for all\n\t  inputs (I hope)\n\t* uses the new embed to make sure there are no black borders\n\t  from edge interpolation\n\t* about 20 - 30% faster\n- policy change: Xoffset and Yoffset are now set by all operations to record\n  the position of the input origin in the output\n- im_replicate() is much faster for some cases\n- added tile and mirror flags to im_embed()\n- added im_cache() convenience function\n- better ETA for image calculation\n- im_tiff2vips() now has a \"broken\" option so it can read tiled tiffs made\n  with earlier versions of vips\n- on convert float to int format, now does floor() not rint() ... more\n  'mathematical'\n- added im_rint()\n- im_sharpen() now uses a gaussian mask\n- im_convsep() more resistant to int overflow problems\n- added im_make_xy(), avoids rounding problems with the old float-based thing\n- im_profile() now makes vertical images for a vertical profile\n- added im_vips2tiff() option to set the resolution in inches not cm (thanks\n  Andrey)\n- im_binfile() is now exported\n\n6/2/04 started 7.9.3\n- added an im_init_world() to im_open(), to help old progs\n- renamed VSemaphore as im_semaphore_t\n- started using libtool library versioning\n- now uses g_module_*() in place of dlopen()\n- now uses pkg-config instead of vips-config (thanks Simon)\n- fixes to vips.h for _ADDR() with DEBUG on (thanks Konrad)\n\n10/12/03 started 7.9.2\n- patches for freebsd, thanks Lev Serebryakov\n- vips2dj knows about my colour laser printer\n- added i18n support, glib/gmodule/gthread dependency\n- im_error*() API revised to be more i18n friendly\n- List type removed, now uses g_slist\n- VBuf added, some more utility funcs pushed down from nip\n- im_thread stuff removed, now uses g_thread\n- im_lock stuff removed, now uses g_mutex\n- im_semaphore_t renamed to VSemaphore, not sure this is a good idea\n- build with --disable-threads to turn off threaded render\n- #include <vips/vips.h> now pulls in most of the public API, you shouldn't\n  need other vips includes very often\n- im_close() is better at cleaning up if there's an error\n- inverse FFTs could fail for wider-than-high images with fftw\n- better im_icc_transform error messages\n- bug fix in im_render with large caches\n- im_binfile() now has an offset parameter\n- im_mapfile()/im_unmapfile() now work on IMAGE and record the length of the\n  file they mapped ... this lets VIPS successfully unmap a file if it changes\n  size while it's open\n\n20/10/03 started 7.9.1\n- threadgroups now have their own kill flag\n- im_plotmask() now does anti-aliasing\n- im_iterate() fix for operations on mmap window images (thanks Clare)\n- im_writeline() stops on kill\n- fix for im_fwfft() segv for wider-than-high real images (thanks Andrey)\n- fix for im_fwfft() to work for non-square real images (thanks Andrey)\n- can now read and write 32-bit IEEE float TIFF (Andrey Kiselev)\n- clean-ups for colour.c (Andrey Kiselev)\n- no longer lets you make an image with width|height|bands == 0 (thanks Joe)\n- im_vips2tiff(), im_vips2*jpeg*(), im_vips2png(), im_vips2ppm() could\n  sometimes fail for mmap window input images (thanks David)\n- added IM_RECT_HCENTRE(), IM_RECT_VCENTRE() macros\n\n20/8/03 JC\n- started 7.9.0\n- added im_rank_image() ... im_maxvalue() a special case of this\n- im_subtract() goes up to int earlier for better value preserving, thanks\n  Haida\n- im_rank() much faster for large windows, correct result on all platforms\n  (dratted memcpy() was causing problems before)\n- fixed problem with libMagick config if installed somewhere strange\n- fixed problem with include order in library compile\n- added --without-magick configure option\n- added im_render(), threaded background image paint\n- added im_replicate(), replicate an image horizontally and vertically\n\n31/5/03 JC\n- started 7.8.11\n- fixed a problem with relational operators and some combinations of input\n  types (bug introduced in 7.8.9), thanks Haida\n- vips-7.8 script overrides VIPSHOME environment variable\n- better im_guess_prefix\n- stupid light_correct script no longer uses /pics/tmp\n- added batch_crop script\n\n22/5/03\n- started 7.8.10\n- the JPEG writer can embed ICC profiles in output images ... although I've\n  yet to see it make any difference :-( test this carefully at some point\n- fixed a possible coredumper in jpeg write\n- jpeg read now spots truncated files\n- im_invertlut() now makes an image, not a mask ... sorry :-(\n- im_histnD() makes an n-dimensional histogram from an n-band image\n- im_col_pythagoras() patch\n- IM_NUMBER() now returns int not size_t\n- new win32 build system from Juan and friends, based on tmake\n- sample project files for MSVC added, thanks Juan\n- win32/ subdir now has the win32 build systems\n- spec/ subdir now has the spec files for building RPMs\n- dist now includes formatted documentation\n- license change: VIPS is now LGPL, nip stays GPL ... this means proprietary\n  programs can link against the vips library\n- had a report of a working VIPS build on a 64 bit system (!)\n- im_log_dmask() now includes all of the negative lobe, thanks matt\n- vips-7.8 start script now auto-relocates\n- im_spcor_raw(), im_fastcor_raw() now exported\n\n29/4/03\n- started 7.8.9\n- changes to build to help MSVC\n- oops, makedef.pl missed out function names with an initial cap, and\n  error_exit()\n- im_min() and im_max() gave random wrong results for >1 thread on >1 CPU\n  machines (bug introduced in 7.7.20), thanks Joe\n- vips.c no longer generates C++ wrappers for functions with no image argument\n  (thanks Haida)\n- im_invertlut() now wrapped by hand in VMask.cc\n- C++ docs updated\n- added im_open_header(), returns an IMAGE with just width/height/etc and no\n  data\n- ... so now \"header\" will print useful stuff even on truncated files\n- tiff writer knows about alpha (thanks Jenny)\n\n7/2/03\n- started 7.8.8\n- build failed with lcms turned off\n- im_spcor() could segv for 16bit images (thanks Joe)\n- im_tiff2vips() read resolution expressed as pixels/cm incorrectly\n- im_vips2tiff() tries not to write mad resolutions\n- header and im_open file type tests reordered for slight speedup\n- im_copy_set() had a broken dispatch function for xres/yres\n- im_fwfft() exploits libfftw real -> complex transform if possible for a 2x\n  speed-up (thanks Matt)\n- im_invfftr() added for complex -> real inverse transform for 2x speed-up\n  (thanks Matt)\n- im_freqflt() now uses im_invfftr() for real result and speedup\n- im_flipver() could segv on some inputs, thanks Clare\n- relational operators now work on complex\n- relational rewritten ... now fractionally slower, but 1/3 the size\n- vips2dj -1:1 produced incorrect height\n- better overlap-too-small detection in mosaicing code\n- im_system() can have NULL output\n- global balance ignores overlaps with only transparent pixels\n\n3/1/03\n- started 7.8.7\n- worked in patch from Hans Breuer (thanks!)\n\t- png read/write with im_png2vips(), im_png2vips_header(),\n\t  im_vips2png(), im_ispng()\n\t- im_errorstring() and im_col_displays() are now functions not externs\n\t  (helps DLLs)\n\t- many include fixes to help native win32 build\n- added libMagick support, 78 file formats now loadable with\n  im_magick2vips(), im_magick2vips_header() and im_ismagick(), w00t\n- now installs vips.m4 to $prefix/share/aclocal\n- added im_icc_export_depth() ... export to device space with a specified bit\n  depth (8 or 16)\n- vips.def now rebuilt with custom rule in libsrc/Makefile.am\n- removed externs im_Type, im_BandFmt, im_Coding, im_Compression to simplify\n  DLL build\n- im_mmap() -> im__mmap(), since it's supposed to be an internal function\n- new vips-7.8.x/proj directory holds unsupported sample makefiles and\n  config.h for building with the MSC toolchain\n- new scripts batch_image_convert and batch_rubber_sheet (thanks Joe)\n- added the RPM .spec files to the main distribution\n- InitializeMagic() now passed \"\" rather than NULL to avoid assert() problems\n  on some libMagic versions\n\n2/12/02\n- started 7.8.6\n- now reads 8-bit RGBA tiff\n- C++ build guide fixes (thanks fsicre)\n- im_Type2char array text slightly messed up\n- global_balance is safer for complex mixed mosaics\n- removed im_lintra() fallback to im_copy() for scale == 1, offset == 0 ...\n  too confusing\n- im_tiff2vips() now reads 16-bit LAB\n- added im_Lab2LabS() and im_LabS2Lab()\n\n5/11/02\n- started 7.8.5\n- fix for mmap window of local region ... caused im_iterate() to break\n  sometimes for large images, in turn occasionally breaking\n  im_max()/im_min()/etc. (thanks Joe)\n- tiny speed up for im_rot90()/270()\n- on install on win32, add .exe suffix for links\n- vips.c knows to remove .exe suffix for linked commands\n- added im_errormsg_system() ... decode win32 error codes too\n- pagesize calcs for roving mmap windows were messed up on win32 (thanks Kirk)\n- some TODO cleanups\n- global balance broke horribly if you had filenames with spaces in (thanks\n  Clare)\n\n31/10/02\n- started 7.8.4\n- im_unmapfile() includes mixed up on mac os x\n- libtool patched for mac os x\n- vips.c sets numeric locale to \"C\"\n\n27/10/02\n- started 7.8.3\n- configure fixes help mac os x\n- im_guess_prefix() adds \".exe\" suffix on w32 if not there\n- changed im_measure() error messages to number bands from 1\n- added func descriptor for im_read_dmask() to help nip, updated C++ API, docs\n\n21/10/02 JC\n- started 7.8.2\n- tries rand() if random() is not available\n- tries mktemp() if mkstemp() is not available\n- turns off realpath() if not available\n- added IM_DIR_SEP/IM_DIR_SEP_STR directory separator character/string\n- added IM_PATH_SEP/IM_PATH_SEP_STR path separator character/string\n- added im_path_is_absolute()\n- vips.c knows to link to vips.exe on win32\n- spot mingw* and set BINARY_OPEN\n- open images in binary too (since we now read() the header)\n\n10/10/02 JC\n- im_lintra() and im_lintra_vec() were broken for complex images :-( thanks\n  matt\n- renamed im_and() as im_andimage(), im_eor() as im_eorimage() and im_or() as\n  im_orimage() ... avoids breakage in the C++ layer\n- added im_dE00_fromLab()\n- limited release as vips-7.8.0\n\n2/10/02\n- renamed as vips-7.8, woohoo\n- revised documentation\n\n19/9/02 JC\n- started sorting out VIPS #defines ... there are now a sensible set of new\n  names (eg. NOCODING becomes IM_CODING_NONE, LAB becomes IM_TYPE_LAB)\n- define IM_NO_VIPS7_COMPAT to turn off the old names\n- added im_mmap()/im_munmap() layer for windows portability\n- removed the contents of history.h .. obsolete\n- added IM_IMAGE_ADDR() macro\n\n10/9/02 JC\n- handle errors from TIFF lib correctly\n- configure fixes for cygwin\n- CMYK TIFF write fixed\n- configure fixes for mingw\n\n5/9/02 JC\n- im_cp_desc() now copies Xoffset/Yoffset\n\n21/8/02 JC\n- started 7.7.24\n- reads CMYK TIFF\n- reads dpi from TIFFs\n- better float Xres/Yres\n\n14/8/02 JC\n- new header fields Xoffset and Yoffset ... used by functions to hint\n  the position of the origin in output images\n- support added to c++ api and to header\n- im__lrmerge(), im__tbmerge(), im__affine(), im_insert(),\n  set Xoffset/Yoffset\n- now uses <lcms.h>, not <lcms/lcms.h> for better suse w0rkage\n- better configure for fftw (uses libdfftw name if libfftw not found)\n\n8/8/02 JC\n- large file support with mmap() windows ... had to change\n  im_prepare_inplace() to im_prepare_to()\n\n  benchmark:\n\n  - system\n\n\thardware: 2 x 2.5GHz P4, 1GB RAM, 15k SCSI, ReiserFS\n\tos: suse 8 (kernel 2.4.18)\n\tcompiler: gcc 2.95.3, -O2, threads turned on\n\timages: fred.v, fred2.v; both 4k by 4k LABPACK (64MB)\n\timages: jim.v, jim2.v; both 15k by 15k LABPACK (900MB)\n\ttime: smallest real of 5 runs, system idle\n\tvips: 7.7.23, debug on in im_openin.c, window limit set with an\n\t  environment variable\n\n  - benchmarks\n\n\tcpu-bound: im_sharpen fred.v fred3.v 11 1.5 20 50 1 2\n\tio-bound: im_insert fred.v fred2.v fred3.v 4000 0\n\tworst-case: im_rot90 fred.v fred3.v\n\n  - results\n\n\tdesktop:\n\n\t\t\tno mmap windows\t\tmmap windows\n\n\tcpu-bound\treal    0m3.712s\treal    0m3.970s\n\t\t\tuser    0m6.010s\tuser    0m6.390s\n\t\t\tsys     0m0.900s \tsys     0m1.110s\n\n\tio-bound\treal    0m1.813s\treal    0m1.865s\n\t\t\tuser    0m0.900s\tuser    0m0.990s\n\t\t\tsys     0m1.720s \tsys     0m1.520s\n\n\tworst-case\treal    0m1.344s\treal    0m3.039s\n\t\t\tuser    0m1.270s\tuser    0m2.230s\n\t\t\tsys     0m0.850s\tsys     0m3.050s\n\n  not quite sure why sharpen is a little slower (4%?) ... IO speed is about\n  the same though ... worst-case is having to constantly move windows about\n  (500,000 page faults, vs 10,000 for no windows)\n\n  again, with an image larger than RAM\n\n  \t\t\tno mmap windows\t\tmmap windows\n\n\tio-bound \treal    2m52.759s\treal    2m11.172s\n\t\t\tuser    0m14.940s\tuser    0m14.890s\n\t\t\tsys     0m29.940s\tsys     0m26.560s\n\n\tworst-case\treal    3m35.391s\treal    3m50.760s\n\t\t\tuser    0m19.850s\tuser    0m26.600s\n\t\t\tsys     0m12.650s \tsys     0m43.130s\n\n  mmap windows actually slightly faster in this case ... plus they stress the\n  OS less\n\n31/7/02 JC\n- added -lm for better lcms detect\n- README notes for fftw on suse8\n- im_profile() sets HISTOGRAM for output image\n- im_copy()/im_copy_set() function descriptor no longer sets PTOP ... helps\n  avoid LUT problems\n- im_subsample()/im_zoom() fall back to im_copy() for shrink/grow == 1\n- im_lintra() falls back to im_copy() for scale == 1, offset == 0\n- no longer use Type == LUT ... all just Type == HISTOGRAM now\n- im_blend() was messed up for > 1 band images :(\n\n16/7/02 JC\n- started 7.7.23\n- im_XYZ2sRGB() wasn't setting Type = sRGB\n- im_icc_import() was broken for rgb\n- im_header_string() had wrong return type in function database\n\n13/7/02 JC\n- added im_flood_blob()\n- added im_open_local_array() ... C API convenience function\n- oop, im_flood() was missing a man page\n- Type == FOURIER added to help visualisation\n- released as 7.7.22\n\n30/6/02 JC\n- JPEG, TIFF and PPM import all now set sRGB Type for RGB import\n- im_header_int(), im_header_double() and im_header_string() added to aid\n  UIs\n- now uses gettimeofday(), not time()\n- for consistency with other trig functions, im_c2amph() now returns degrees\n  not radians (ouch)\n- added im_c2rect() ... turn (amp, phase) to rectangular\n- added im_sign() ... unit vector in direction of value\n- better im_scaleps() ... old code was terrible\n- rewritten im_rotquad() ... now partial\n- im_icc_export()/_import() now do ABSOLUTE correctly\n- added im_icc_ac2rc() ... converts absolute to relative colorimetry\n\n25/6/02 JC\n- added im_copy_set(3) ... like im_copy(), but set informational header fields\n\n20/6/02 JC\n- added im_ceil(), im_floor()\n- im_Lab2LabQ was not clipping a/b range correctly\n- im_icc_export(), own ABSOLUTE mode\n- released as 7.7.21\n\n28/5/02 JC\n- im_remainderconst_vec broken for float/double\n- added Yxy colourspace\n\n16/05/02 JC\n- auug, libtool was all messed up ... redone all the autotools stuff\n- uses libtool convenience libraries to build vips in sections\n- uses config subdir for temp files and .m4 things\n- patched stupid suse config.guess\n- vips2dj patched for better raw cmyk\n- released as 7.7.20\n\n12/5/02 JC\n- im_vips2jpeg*() and im_vips2ppm() now both partial\n- started updating the C++ guide\n- had to change the location of the C++ headers :-( all C++ progs should now\n  have:\n\n\t#include <vips/vipscpp.h>\n\n  this is so things can work on systems which do not have case sensitive\n  file systems\n\n- changes for Mac OS X\n  * im_system() TRUE/FALSE removed\n  * searches /*/[lib|include] to get fink libs for tiff and jpeg\n\n30/4/02 JC\n- several functions were missing IM_FN_PIO in their descriptor ... this was\n  harmless for nip/ip/C, but broke the ref counting in the C++ layer\n- im_system() now defaults \"/tmp\" for temp files\n- STRING input and output args were broken for C++ :-(\n- threads exit more quickly on error\n- im_min()/im_max() now partial (at last)\n- im_remainderconst()/im_remainderconst_vec() added\n- --with-dmalloc configure switch\n- vips2dj does CMYK and mono too\n- im_vips2tiff() allows any number of bands (but not the right way to\n  write CMYK, see TODO)\n\n26/4/02 JC\n- old ICC profile reader removed\n- little cms wrapped ... configure spots it, im_icc_transform() uses it to map\n  between two images\n- also im_icc_import() and im_icc_export() so you can see PCS images\n- im_icc_present() to test for existence of lib\n- README fixes\n\n4/4/02 JC\n- TODO changes\n- oops, DEBUG left on in im_invertlut()\n\n2/4/02 JC\n- im_fwfft.c/im_invfft.c now use libfftw if available ... about 5x speed up\n  and double precision\n- added FIND_FFTW autoconf macro\n- include/vips/proto.h changes\n\n26/3/02 JC\n- started 7.7.19\n\n25/3/02 JC\n- im_log_dmask() was broken (thanks matt)\n- casts between VDMask and VIMask were broken (thanks matt)\n- various error msgs improvements and tiny man page fixes\n\n13/3/02 JC\n- tb/lr merge first/last cache moved to per-call state for better sharing\n- im_remosaic() bails out faster on error and makes better error messages\n\n13/3/02 ruven\n- im_vips2tiff() pyramids stop at tilesize, not 64x64\n\n25/02/02 JC\n- im_remosaic() is smarter, and works better with im_global_balance()\n- im_affine() 2x faster\n\n14/2/02 JC\n- started 7.7.18\n- vips.m4 and libsrc/Makefile.am fixes for IRIX\n\n11/02/02 JC\n- vips/thread.h and vips/threadgroup.h were missing extern \"C\" for C++\n- VImage::write() now tracks dependencies, so you can write() to a partial\n  safely ... although it's not a very useful thing to do (thanks Mike)\n- new VImage::print() function for debugging\n- added im_print()\n\n22/01/02 JC\n- started 7.7.17\n\n15/01/02 JC\n- im_rect_unionrect() and im_rect_intersectrect() safer for repeated args\n- im_video_v4l() no longer perror()s on ioctl fail for less spam\n\n03/01/02 JC\n- started 7.7.16\n- im_version_string() really does return the date as well now\n\n12/12/01 JC\n- im_guess_prefix() extra smartness for relative path names\n- VImage() no longer uses tmpnam() (thanks Paul)\n\n11/12/01 JC\n- renamed im_fexists() as im_existsf()\n\n7/12/01 JC\n- ppm man pages added (doh)\n\n28/11/01 JC\n- warnings on g++ 2.96 fixed\n\n22/11/01 JC\n- started 7.7.15\n- im_video_v4l() failed to compile on non-linux platforms\n\n7/11/01 JC\n- im_remosaic() added\n- im_*merge() are more intelligent about transparency in bizarre overlaps\n- grr! putenv() semantics change on more recent clibs ... should be safer\n  now\n\n19/10/01 JC\n- VDisplay( \"display name\" ) segved on unknown display :-( thanks mike\n\n26/9/01 JC\n- contrib tools get data files from share/vips/xxx area now\n- im_vipshome() renamed as im_guess_prefix(), reworked for new package layout\n- doc/ build sorted out\n- ... but of course, docs still need updating for 7.8\n\n20/9/01 JC\n- fix to im_vipshome()\n- ip2 renamed as nip\n- split to library only ... separate ip and nip packages\n- new VIPS_VERSION_* macros set from configure.in in vips/version.h.in\n- vips.m4 VIPS finder\n- reworked README, doc/README and TODO\n- now installs to /usr/local/ by default\n- fmask4th.c was including varargs.h ... d'oh\n- include area reorganised: everything inside <vips/..> now ... hopefully the\n  only user-visible change is that all plain C progs need to change:\n\n\t#include <vips.h>\n\n  to:\n\n\t#include <vips/vips.h>\n\n  the C++ API should be unaltered\n\n21/8/01 ruven\n- im_setupout() was missing some #includes\n\n20/8/01 JC\n- started 7.7.14\n\n15/8/01 JC\n- added libxml dependency for ip2\n\n27/7/01 JC\n- im_conv(), im_convf(), im_convsep(), im_convsepf() now reject masks with\n  scale == 0\n\n26/7/01 JC\n- started 7.7.12\n\n25/7/01 JC\n- started 7.7.11\n- oop, im_histeq() and im_tonemap() also missed\n- better error messages from im_run_command()\n\n23/7/01 JC\n- started 7.7.10\n- im_sharpen() failed due to change in im_band_extract() offset\n\n20/7/01 JC\n- started 7.7.9\n\n4/7/01 JC\n- im_open(,\"w\") open() delayed until im_setupout(), very slightly safer\n- updated im_open() man page\n- im_tiff2vips() now embeds index in filename ... and it's page number (from\n  0), not subsample factor\n- finally bit the bullet ... im_extract()/im_extract_band() now number from\n  zero (sorry!)\n- and im_lrmosaic()/im_tbmosaic() bandno param too\n\n29/6/01 JC\n- im_region_free() now frees immediately\n\n27/6/01 JC\n- im_vips2tiff() man page updated for deflate, 2 years late\n\n22/6/01 JC\n- oops, limit wrong on im_rank()\n\n21/6/01 JC\n- better post_install for --prefix outside VIPS's tree\n- -ltiff needs -lm in acinclude.m4 ... fixes configure on redhat 7.x\n\n13/6/01 JC\n- started 7.7.8\n\n6/6/01 JC\n- im_invertlut() added\n\n31/5/01 JC\n- im_colour_temperature, im_XYZ2Lab_temp, im_Lab2XYZ_temp added\n- ... colour temp stuff needs sorting out properly\n\n25/5/01 JC\n- added vips-config script, cf. gtk-config\n- --without-threads option added\n- did a bit of work on the C++ API docs\n\n24/5/01 JC\n- added im_tiff2vips_header(), im_jpeg2vips_header() and im_ppm2vips_header()\n- header uses these to print fields quickly\n- switched to config.h\n- configure.in rewritten ... much nicer, fewer options, more automatic\n\n17/5/01 JC\n- im_matinv() didn't free stuff correctly on singular matrix\n\n16/5/01 JC\n- vips2dj now knows about 5000ps printers\n- allow RW mode for non-native VIPS image files, for 8 bit images\n\n2/5/01 JC\n- started 7.7.7\n\n1/5/01 JC\n- im_addgnoise() did not work for >1 band images\n\n23/4/01 JC\n- configure options to remove support for JPEG and TIFF ... helpful for a no-\n  dependencies build\n\n20/4/01 JC\n- im_(v)snprintf() added\n- all sprintf()s removed\n\n15/4/01 JC\n- im_affine() had a rounding problem\n\n11/4/01 JC\n- tiny mosaicing bug fixed in im__lrcalcon\n- started 7.7.6\n\n21/3/01 JC\n- new iblend code in im_tbmerge() was typo-d\n- mosaic1 was broken by affine too\n\n20/3/01 JC\n- im_image() failed for FMTUCHAR\n\n12/3/01 JC\n- started 7.7.5\n- im_sharpen() uses separable convolution for big speed up\n- new \"Print\" menu\n\n11/3/01 JC\n- REALVEC renamed as DOUBLEVEC\n- added IMAGEVEC\n- added IM_INPUT_IMAGEVEC\n- gbandjoin now has function description\n- new function im_maxvalue()\n- im_compass()/im_lindetect() reimplemented with im_conv()/im_maxvalue(),\n  about 15% faster, works for any type, partial\n- im_gradient() reimplemented with im_conv()/im_abs()/im_add(), about 30%\n  slower, works for any type, partial\n\n10/3/01 JC\n- new function, im_clip2fmt() converts between any image formats ...\n  slightly faster than the old im_clip()\n- legacy im_clip2us() etc. functions now just call this\n\n9/3/01 JC\n- im_conv() rewritten, simpler, about 10% faster\n- im_convsep() rewritten, now does any non-complex type, partial, 20% faster\n- new functions: im_convf(), im_convsepf() for DOUBLEMASK\n- raw versions of each\n- legacy convolvers (eg. im_convbi()) removed\n\n8/3/01 JC\n- new function im_blend()\n- new function im_lab_morph()\n- speed up to im_ifthenelse()\n- speed up to im_*merge() (uses integer arithmetic for integer blends)\n\n4/3/01 JC\n- tiny speed ups to im_histgr()\n- speed ups to im_maplut()\n\n3/3/01 JC\n- new functions: im_histnorm(), im_histcum()\n- im_histeq() more general\n- im_vipshome() --- better behaviour for relative paths\n\n2/3/01 JC\n- new video package\n- im_video_v4l1() (video for linux) added\n- configure.in switches to turn v4l1 on and off\n\n1/3/01 JC\n- new im_histspec() implementation ... more general, bugs removed\n\n14/2/01 JC\n- better vips2dj usage message\n\n13/2/01 JC\n- im_image_sanity() added, called in various places in iofuncs\n\n9/2/01 JC\n- added 'check' and 'name' class member stuff to ip from ip_gtk2\n- new \"Plot\" menu\n- new \"Overlay\" menu\n- more stuff in _stdenv/_list ... curried forms of head/tail etc.\n\n7/2/01 JC\n- started 7.7.4\n- vips2dj and vdump now use im_vipshome()\n\n5/2/01 JC\n- new im_vipshome() function\n- min()/max() macros renamed as MIN()/MAX()\n- new im_load_plugins() function\n- vips.exe and ip now load $VIPSHOME/lib plugins at startup\n\n2/2/01 JC\n- mosaicing functions now have an extra max blend width parameter\n\n30/1/01 JC\n- fixed tbmerge no overlap detect\n\n13/12/00 JC\n- started 7.7.3\n\n30/12/00 JC\n- vips.h fixes for cygwin/wingdi conflict\n\n27/11/00 JC\n- added im_vips2ppm(), im_open() imports and exports it\n- fixed nasty implicit output conversion problem for PIO dispatch() calls\n\n21/11/00 JC\n- added im_ppm2vips()\n\n16/11/00 JC\n- configure.in fixes ... jpeg found correctly now\n- searches for libz as well\n\n16/11/00 JC\n- started 7.7.2\n\n5/11/00 JC\n- speed up to lab2labq\n\n19/10/00 JC\n- started 7.7.1\n\n13/1/00 JC\n- oops, im_open() was missing an 'else' in jpeg/tiff load\n\n5/8/00 JC\n- im_vips2tiff() now has mode string embedded in output filename\n- im_vips2jpeg() now has qfac in output filename\n- im_open() understands this\n\n11/7/00 JC\n- new im_image() function ... wraps a VIPS image around a memory buffer\n- C++ layer changes:\n\t* now use #include <vips/Vips.h>\n\t* error renamed as VError\n\t* new VMask() constructors\n\t* new VImage() constructor\n\t* new VImage::data() access member\n\t* more operator equivalences: <, >, <=, >=, ==, !=, &, |, ^, %\n\n17/6/00 JC\n- more consts added to vips protos\n\n10/5/00 JC\n- minor configure.in changes to help solaris\n- removed _TIFFmalloc() and _TIFFfree() calls\n\n9/3/00 JC\n- fixed rounding problem in generate grid\n\n8/3/00 JC\n- fixup to im_system() temp dir\n\n7/3/00 JC\n- added im_system()\n- small tidies\n\n1/3/00 JC\n- better plugin test in configure.in\n\n26/2/00 JC\n- fixes to Makefile.am in ip/src* and configure.in, to help ip find the right\n  gtk includes on systems with more than one gtk-xxx installed\n\n21/2/00 JC\n- now builds ip and ip_gtk2\n\n16/2/00 JC\n- configure.in fixes for xil and some TIFF/JPEG strangeness\n\n15/2/00 JC\n- im_global_balancef() was broken! d'oh\n- note in README about enabling video cards\n\n10/2/00 JC\n- configure now searches for xil ... FIND_XIL macro\n- im_zoom() spots integer overflow\n- better shape set on region drag end in ip\n- better zoom-too-far handling in ip\n\n13/1/00 JC\n- fixes to configure etc. to help cygwin\n- jpeg is now searched for too ... FIND_JPEG macro\n\n10/1/00 JC\n- global_balance() now uses new affine() atuff\n\n27/12/99 JC\n- mosaic1 stuff now uses new affine() funcs\n\n21/12/99 JC\n- added Joe's docs\n- im_LabS2LabQ() rounding on a/b slightly broken for a/b == 0\n\n20/12/99 JC\n- new function: im_affine()\n- similarity*() now in terms of affine()\n- tests for error return in reduce.c from maplut\n- small clean-ups\n\n15/12/99\n- im_version() added, new iofuncs package for it\n- ip did not call zero-input-arg vips functions\n- vips.c did not like zero-input-arg functions\n\n6/12/99 JC\n- Sobel filter was a bit broken\n\n3/12/99 JC\n- menu reorganisation\n- generate gauss mask dialog\n\n2/12/99 JC\n- reworked text file IO, better error messages\n\n1/12/99 JC\n- reworked .iprc filename stuff, cleaner\n\n30/11/99 JC\n- better menu set switcher in calc preferences\n- ip now thinks it's 7.7\n- did a spellcheck on the ip guide\n\n29/11/99 JC\n- 7.7 started!\n- srgb D65->D50 converter\n- Negate added to arith\n- find similar pixel value dialog\n- find similar colour dialog\n- paste into background dialog\n\n19/11/99 JC\n- adjust labq was missing\n- shrink image defaulted to /2 not /1\n- sharpdropshadow broken\n- Rotate.* broken\n- vips-7.6.3 release\n\n18/11/99 JC\n- ip didn't report space free on >2GB filesystems correctly\n- ip did not link statically against libXpm on solaris7\n\n17/11/99 JC\n- im_histplot() failed for all 0's histogram\n- new profile_image dialog\n- man pages for im_sRGB2XYZ/im_XYZ2sRGB were broken\n- new colourize image dialog\n- new shrink image image dialog\n- new expand image image dialog\n- better doc Makefiles\n\n16/11/99 JC\n- more menu reorganising\n- new image_to_mask/mask_to_image buttons\n- new match_two_images dialog\n- new measure_colour_chart dialog\n\n15/11/99 JC\n- new custom LABQ sharpen in Image menu\n- configure support for SGI video (thanks Ruven)\n- menu fiddling in ip\n- new \"resize canvas\" menu item\n- im_insert_noexpand() added, no docs tho'\n\n11/11/99 JC\n- new ip menu item: Image=>Adjust white/black/saturation of LabQ\n- fixed bug in decompose complex number\n- browse-icons now ignores errors\n- better error msg for \"12 12\" etc cases\n\n10/11/99 JC\n- open hi-res gives proper error msg if no file found\n- made file-select boxes a bit more compact and clearer\n- updated configure.in for vips-examples-7.6\n\n9/11/99 JC\n- new column start point moved\n- vdump now defaults to subsample 1, portrait\n- navigation boxes were broken\n- no longer shrink-to-fit if loading as high res\n- better positioning of zoom windows\n- removed some old cruft\n\n8/11/99 JC\n- ooops, im_remainder() got lost somehow\n- refguide converted to latex and updated\n- cppguide updated\n\n5/11/99 JC\n- libguide converted to latex and updated\n\n4/11/99 JC\n- ip guide now latex2htmls cleanly ... still needs updating tho'\n- cpp/app guide latex2html redone\n\n2/11/99 JC\n- configure no longer adds -32 to IRIX builds for you\n- some more stuff in README\n- simple DEBUGM malloc tracking, made libsrc/iofuncs/memory.c\n- changed im_malloc() to return void *\n- removed duplicate im_malloc() proto from util.h\n- changed all malloc/free to go through im_malloc()/im_free()\n\n23/10/99 JC\n- double-click on error image now pops a load browser and an error dialog\n- add-new-column no longer scrolls to right edge of workspace\n- better scroll-to-bottom on item add\n- load ws twice does not cause 'already open' errors\n- memorise directory button in fsb\n\n18/10/99 JC\n- new FIND_TIFF/FIND_MOTIF macros for acinclude.m4\n- new ./configure switches, see ./configure --help\n- enabled static libs\n\n8/10/99\n- broke action_proc_bop() into smaller functions, stops bad code gen on\n  gcc2.95.1 (and others, prolly)\n- restored old Makefiles in doc/src/ipguide\n- vips7.6 script renamed as vips-7.6\n\n5/10/99\n- replace image was broken\n- some menu reorganisation\n- 'reload all menus' button\n\n4/10/99\n- computed regions in ip were broken\n- updated system.iprc defaults\n- new menu item: adjust white/black points\n\n2/10/99\n- browse icons was broken\n- greyscale 16-bit tiled tiff was broken\n- extra mutex locks for TIFF*() in im_tiff2vips()\n\n1/10/99\n- some automake probs fixed\n- squished two ip bugs\n\n30/9/99\n- fixed problem with pthreads, now works on suse6.2 as well\n- new API stuff for threaded evaluation with im_threadgroup_t\n- new public interface provide platform independent threads/locks/semaphores\n- no error box if you zoom out too far now\n\n26/9/99\n- lr/tb merge blend was not quite right ... should be smoother now\n- histplot broken for float images\n\n24/9/99\n- better mono->labq converter\n- more portable ispoweroftwo detect for freq filter stuff\n\n23/9/99\n- better graphics expose handling\n\n17/9/99\n- >/< stuff in ip was a bit mixed up\n- ink preview fixed for mono images\n- help popup fixed\n\n15/9/99\n- linedetect and sobel filters for ip, thnx Kirk\n\n14/9/99\n- Find_histogram was broken\n- im_profile() man pages was broken\n- ooops, ip had old set of macros\n\n10/9/99\n- im_and/im_or/im_eor now work for any integer type\n\nSummer hols: (2nd half August '99)\n- initial heap block larger to avoid start gcs\n- def slicer fixed\n- larger max heap\n- toolkits with initial '_' hidden by default\n- custom recomb\n- dialog.def removed\n- ... other menu fixes\n- generate grid menu\n- im_remainder() added\n- new cursor change code, hglass rotates during comp!\n- dialog.c handles cursor changes better\n- rubber band in paintbox displays\n- mag widget stays on right!\n- undo/redo single pixel paint ops\n- heap size control from prefs\n- cancel for reductions as well as for image calc\n- browse stuff reworked, no more .icon.v files\n- save stops you overwriting open .v files\n- better animate_countdown() handling\n- better resize behaviour for bars added to images\n- better code generation, bug fixed in state tracking\n- auto recover from crash\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 25.908203125,
          "content": "                  GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\f\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \"Lesser\" General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\f\n                  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\f\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\f\n  6. As an exception to the Sections above, you may also combine or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\f\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\f\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\f\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                            NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\f\n           How to Apply These Terms to Your New Libraries\n\n  If you develop a new library, and you want it to be of the greatest\npossible use to the public, we recommend making it free software that\neveryone can redistribute and change.  You can do so by permitting\nredistribution under these terms (or, alternatively, under the terms of the\nordinary General Public License).\n\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the library's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the library, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n  <signature of Ty Coon>, 1 April 1990\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.8037109375,
          "content": "# libvips: an image processing library\n\n[![CI](https://github.com/libvips/libvips/workflows/CI/badge.svg)](https://github.com/libvips/libvips/actions)\n[![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/libvips.svg)](https://issues.oss-fuzz.com/issues?q=is:open%20project:libvips)\n[![Coverity Status](https://scan.coverity.com/projects/6503/badge.svg)](https://scan.coverity.com/projects/jcupitt-libvips)\n[![Gitter](https://badges.gitter.im/libvips/devchat.svg)](https://gitter.im/libvips/devchat?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n# Introduction\n\nlibvips is a [demand-driven, horizontally\nthreaded](https://github.com/libvips/libvips/wiki/Why-is-libvips-quick)\nimage processing library. Compared to similar\nlibraries, [libvips runs quickly and uses little\nmemory](https://github.com/libvips/libvips/wiki/Speed-and-memory-use).\nlibvips is licensed under the [LGPL-2.1-or-later](\nhttps://spdx.org/licenses/LGPL-2.1-or-later).\n\nIt has around [300\noperations](https://libvips.github.io/libvips/API/current/func-list.html)\ncovering arithmetic, histograms, convolution, morphological\noperations, frequency filtering, colour, resampling,\nstatistics and others. It supports a large range of [numeric\ntypes](https://libvips.github.io/libvips/API/current/VipsImage.html#VipsBandFormat),\nfrom 8-bit int to 128-bit complex. Images can have any number of bands.\nIt supports a good range of image formats, including JPEG, JPEG 2000, JPEG XL,\nTIFF, PNG, WebP, HEIC, AVIF, FITS, Matlab, OpenEXR, PDF, SVG, HDR, PPM / PGM /\nPFM, CSV, GIF, Analyze, NIfTI, DeepZoom, and OpenSlide. It can also load\nimages via ImageMagick or GraphicsMagick, letting it work with formats\nlike DICOM.\n\nIt comes with bindings for\n[C](https://libvips.github.io/libvips/API/current/using-from-c.html),\n[C++](https://libvips.github.io/libvips/API/current/libvips-from-C++.html),\nand the\n[command-line](https://libvips.github.io/libvips/API/current/using-cli.html).\nFull bindings are available for :\n\n| Language | Binding |\n|---|---|\n| Ruby | [ruby-vips](https://rubygems.org/gems/ruby-vips) |\n| Python | [pyvips](https://pypi.python.org/pypi/pyvips) |\n| PHP | [php-vips](https://github.com/libvips/php-vips) |\n| C# / .NET | [NetVips](https://www.nuget.org/packages/NetVips) |\n| Go | [govips](https://github.com/davidbyttow/govips) |\n| Lua | [lua-vips](https://github.com/libvips/lua-vips) |\n| Crystal | [crystal-vips](https://github.com/naqvis/crystal-vips) |\n| Elixir | [vix](https://github.com/akash-akya/vix) |\n| JVM | [vips-ffm](https://github.com/lopcode/vips-ffm) |\n\nlibvips is used as an image processing engine by:\n\n| |\n|---|\n| [sharp (on node.js)](https://www.npmjs.org/package/sharp) |\n| [imgproxy](https://github.com/imgproxy/imgproxy) |\n| [bimg](https://github.com/h2non/bimg) |\n| [sharp for Go](https://github.com/DAddYE/vips) |\n| [Ruby on Rails](https://edgeguides.rubyonrails.org/active_storage_overview.html) |\n| [CarrierWave](https://github.com/carrierwaveuploader/carrierwave#using-vips) |\n| [mediawiki](https://www.mediawiki.org/wiki/Extension:VipsScaler) |\n| [PhotoFlow](https://github.com/aferrero2707/PhotoFlow) |\n| [JVips](https://github.com/criteo/JVips) |\n\nand others. The official libvips GUI is\n[nip2](https://github.com/libvips/nip2), a strange combination of a\nspreadsheet and a photo editor.\n\n# Install\n\nThere are packages for most Unix-like operating systems, including\nmacOS. Check your package manager.\n\nThere are binaries for Windows in\n[releases](https://github.com/libvips/libvips/releases).\n\nThe [libvips website](https://libvips.github.io/libvips) has [detailed\ninstall notes](https://libvips.github.io/libvips/install.html).\n\n# Building from source\n\nlibvips uses the [Meson build system](https://mesonbuild.com), version 0.56\nor later. Meson can use [`ninja`](https://ninja-build.org), Visual Studio or\nXCode as a backend, so you'll also need one of them.\n\nlibvips must have `build-essential`, `pkg-config`, `libglib2.0-dev`,\n`libexpat1-dev`.  See the **Dependencies** section below for a full list\nof the libvips optional dependencies.\n\nThere are basic bash completions in `completions/`, see the README in there.\n\n## Cheatsheet\n\n```\ncd libvips-x.y.x\nmeson setup build --prefix /my/install/prefix\ncd build\nmeson compile\nmeson test\nmeson install\n```\n\nCheck the output of `meson setup` carefully and make sure it found everything\nyou wanted it to find.  Add arguments to `meson setup` to change the build\nconfiguration.\n\n- Add flags like `-Dnsgif=false` to turn libvips options on and off, see\n  `meson_options.txt` for a list of all the build options libvips supports.\n\n- Add flags like `-Dmagick=disabled` to turn libvips dependencies on and off,\n  see `meson_options.txt` and the list below for a summary of all the libvips\n  dependencies.\n\n- You might need to add `--libdir lib` on Debian if you don't want the arch\n  name in the library path.\n\n- Add `--default-library static` for a static build.\n\n- Use e.g. `CC=clang CXX=clang++ meson setup ...` to change compiler.\n\n- You can have an alternative build directory, pick whatever names you like,\n  for example one for release and one for debug.\n\nThere's a more comprehensive test suite you can run once libvips has been\ninstalled. Use `pytest` in the libvips base directory.\n\n## Optional dependencies\n\nIf suitable versions are found, libvips will add support for the following\nlibraries automatically. Packages are generally found with `pkg-config`,\nso make sure that is working.\n\n### libjpeg\n\nAnything that is compatible with the IJG JPEG library. Use `mozjpeg` if you\ncan. Another option is `libjpeg-turbo`.\n\n### libexif\n\nIf available, libvips adds support for EXIF metadata in JPEG files.\n\n### librsvg\n\nThe usual SVG loader. If this is not present, vips will try to load SVGs\nvia imagemagick instead.\n\n### PDFium\n\nIf present, libvips will attempt to load PDFs with PDFium. Download the\nprebuilt pdfium binary from:\n\n    https://github.com/bblanchon/pdfium-binaries\n\nUntar to the libvips install prefix, for example:\n\n    cd ~/vips\n    tar xf ~/pdfium-linux.tgz\n\nCreate a `pdfium.pc` like this (update the version number):\n\n    VIPSHOME=/home/john/vips\n    cat > $VIPSHOME/lib/pkgconfig/pdfium.pc << EOF\n         prefix=$VIPSHOME\n         exec_prefix=\\${prefix}\n         libdir=\\${exec_prefix}/lib\n         includedir=\\${prefix}/include\n         Name: pdfium\n         Description: pdfium\n         Version: 4290\n         Requires:\n         Libs: -L\\${libdir} -lpdfium\n         Cflags: -I\\${includedir}\n    EOF\n\nIf PDFium is not detected, libvips will look for `poppler-glib` instead.\n\n### poppler-glib\n\nThe Poppler PDF renderer, with a glib API. If this is not present, vips\nwill try to load PDFs via imagemagick.\n\n### cgif\n\nIf available, libvips will save GIFs with\n[cgif](https://github.com/dloebl/cgif). If this is not present, vips will\ntry to save gifs via imagemagick instead.\n\n### libarchive\n\nIf available, libvips adds support for creating image pyramids with `dzsave`.\n\n### libtiff\n\nThe TIFF library. It needs to be built with support for JPEG and\nZIP compression. 3.4b037 and later are known to be OK.\n\n### fftw3\n\nIf libvips finds this library, it uses it for fourier transforms.\n\n### lcms2\n\nIf present, `vips_icc_import()`, `vips_icc_export()` and `vips_icc_transform()`\ncan be used to manipulate images with ICC profiles.\n\n### libspng\n\nIf present, libvips will load and save PNG files using libspng. If not, it\nwill look for the standard libpng package.\n\n### libimagequant, quantizr\n\nIf one of these quantisation packages is present, libvips can write 8-bit\npalette-ised PNGs and GIFs.\n\n### ImageMagick, or optionally GraphicsMagick\n\nIf available, libvips adds support for loading and saving all\nlibMagick-supported image file types. You can enable and disable load and save\nseparately.\n\nImagemagick 6.9+ needs to have been built with `--with-modules`. Most packaged\nIMs are, I think.\n\nIf you are going to be using libvips with untrusted images, perhaps in a\nweb server, for example, you should consider the security implications of\nenabling a package with such a large attack surface.\n\n### pangocairo\n\nIf available, libvips adds support for text rendering. You need the\npackage pangocairo in `pkg-config --list-all`.\n\n### highway\n\nIf present, libvips will accelerate some operations with SIMD. If not, it\nwill look for the orc-0.4 package.\n\n### matio\n\nIf available, vips can load images from Matlab save files.\n\n### cfitsio\n\nIf available, vips can load FITS images.\n\n### libwebp\n\nIf available, vips can load and save WebP images.\n\n### libniftiio\n\nIf available, vips can load and save NIfTI images.\n\n### OpenEXR\n\nIf available, libvips will directly read (but not write, sadly)\nOpenEXR images.\n\n### OpenJPEG\n\nIf available, libvips will read and write JPEG2000 images.\n\n### libjxl\n\nIf available, libvips will read and write JPEG-XL images.\n\n### OpenSlide\n\nIf available, libvips can load OpenSlide-supported virtual slide\nfiles: Aperio, Hamamatsu, Leica, MIRAX, Sakura, Trestle, and Ventana.\n\n### libheif\n\nIf available, libvips can load and save HEIC and AVIF images. Your libheif (in\nturn) needs to be built with the correct decoders and encoders. You can check\nwith eg.:\n\n```console\n$ heif-convert --list-decoders\nHEIC decoders:\n- libde265 = libde265 HEVC decoder, version 1.0.9\nAVIF decoders:\n- dav1d = dav1d v6.6.0\n- aom = AOMedia Project AV1 Decoder v3.5.0\n$ heif-enc --list-encoders\nHEIC encoders:\n- x265 = x265 HEVC encoder (3.5+1-f0c1022b6) [default]\nAVIF encoders:\n- aom = AOMedia Project AV1 Encoder v3.5.0 [default]\n- svt = SVT-AV1 encoder v1.1.0\n- rav1e = Rav1e encoder\n```\n\n# Contributors\n\n### Code Contributors\n\nThis project exists thanks to all the people who contribute.\n\n<a href=\"https://github.com/libvips/libvips/graphs/contributors\"><img src=\"https://opencollective.com/libvips/contributors.svg?width=890&button=false\" /></a>\n\n### Organizations\n\nWe've had generous financial support from our sponsors. Thank you very much!\n\n<img src=\"https://opencollective.com/libvips/sponsors.svg?width=890&button=false\" />\n"
        },
        {
          "name": "completions",
          "type": "tree",
          "content": null
        },
        {
          "name": "cplusplus",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "libvips",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 31.353515625,
          "content": "project('vips', 'c', 'cpp',\n    version: '8.17.0',\n    meson_version: '>=0.55',\n    default_options: [\n        # this is what glib uses (one of our required deps), so we use it too\n        'c_std=gnu99',\n        # we use some C++11 features\n        'cpp_std=c++11',\n        # do a release (optimised) build by default\n        'buildtype=release',\n        # turn off asserts etc. in release mode\n        'b_ndebug=if-release'\n    ]\n)\n\nversion_parts = meson.project_version().split('.')\nversion_major = version_parts[0]\nversion_minor = version_parts[1]\nversion_patch = version_parts[2]\n\n# rules:\n# sources changed: increment revision\n# binary interface changed: increment current, reset revision to 0\n#   binary interface changes backwards compatible?: increment age\n#   binary interface changes not backwards compatible?: reset age to 0\nlibrary_revision = 0\nlibrary_current = 61\nlibrary_age = 19\nlibrary_version = '@0@.@1@.@2@'.format(library_current - library_age, library_age, library_revision)\ndarwin_versions = [library_current + 1, '@0@.@1@'.format(library_current + 1, library_revision)]\n\ngnome = import('gnome')\npymod = import('python')\npkg = import('pkgconfig')\ni18n = import('i18n')\n\n# if we're optimising (eg. release mode) we turn off cast checks and g_asserts\nif get_option('optimization') not in ['0', 'g']\n    add_project_arguments('-DG_DISABLE_CAST_CHECKS', language : ['cpp', 'c'])\n    add_project_arguments('-DG_DISABLE_CHECKS', language : ['cpp', 'c'])\n    add_project_arguments('-DG_DISABLE_ASSERT', language : ['cpp', 'c'])\nendif\n\n# in debug mode we automatically enable leak checks\n# also true for 'debugoptimized'\nif get_option('debug')\n    add_project_arguments('-DDEBUG_LEAK', language : ['cpp', 'c'])\nendif\n\nhost_os = host_machine.system()\ncc = meson.get_compiler('c')\ncpp = meson.get_compiler('cpp')\n\n# Prevent use of void* pointer arithmetic to support MSVC\nadd_project_arguments(cc.get_supported_arguments('-Werror=pointer-arith'), language : ['cpp', 'c'])\n\n# libFuzzer related things\nfuzzing_engine = get_option('fuzzing_engine')\nif fuzzing_engine == 'libfuzzer'\n    if not cc.has_argument('-fsanitize=fuzzer')\n        error('fuzzing_engine libfuzzer requires \"-fsanitize=fuzzer\"')\n    endif\n    fuzzer_args = ['-fsanitize=fuzzer-no-link', '-fsanitize=fuzzer']\n    add_project_arguments(cc.first_supported_argument(fuzzer_args), language : ['cpp', 'c'])\nendif\n\nglib_dep = dependency('glib-2.0', version: '>=2.52')\ngio_dep = dependency('gio-2.0')\ngobject_dep = dependency('gobject-2.0')\ngmodule_dep = dependency('gmodule-no-export-2.0', required: get_option('modules'))\nexpat_dep = dependency('expat')\nthread_dep = dependency('threads')\nm_dep = cc.find_library('m', required: false)\n\n# Start to form our dependencies\n\n# External dependencies we've detected\nexternal_deps = [\n    glib_dep,\n    gio_dep,\n    gobject_dep,\n    gmodule_dep,\n    expat_dep,\n]\n\n# External dependencies of modules we've detected\n# These dependencies are not included in vips.pc\nmodule_deps = []\n\n# Required deps that may or may not be external versioned libraries\nother_deps = [\n    thread_dep,\n    m_dep,\n]\n\nnodelete_link_args = cc.get_supported_link_arguments('-Wl,-z,nodelete')\n\nprefix_dir = get_option('prefix')\nlib_dir = prefix_dir / get_option('libdir')\n\nproject_source_root = meson.current_source_dir()\nproject_build_root = meson.current_build_dir()\n\nif gmodule_dep.found() and gmodule_dep.get_variable(pkgconfig: 'gmodule_supported') == 'true'\n    # Disable modules by default when building static libraries\n    modules_enabled = get_option('modules').enabled() or get_option('default_library') == 'shared'\nelif get_option('modules').enabled()\n    error('GModule is not supported on your system, please reconfigure with -Dmodules=disabled')\nelse\n    modules_enabled = false\nendif\n\nmodule_dir = lib_dir / 'vips-modules-@0@.@1@'.format(version_major, version_minor)\n\ncfg_var = configuration_data()\ncfg_var.set_quoted('G_LOG_DOMAIN', 'VIPS')\n\nif modules_enabled\n    cfg_var.set('ENABLE_MODULES', '1')\nendif\n\n# Detect and set symbol visibility\nif get_option('default_library') == 'shared' and host_os in ['windows', 'cygwin']\n    cfg_var.set('DLL_EXPORT', true)\n    if cc.has_function_attribute('visibility:hidden')\n        cfg_var.set('_VIPS_PUBLIC', '__attribute__((visibility(\"default\"))) __declspec(dllexport)')\n    else\n        cfg_var.set('_VIPS_PUBLIC', '__declspec(dllexport)')\n    endif\nelif cc.has_function_attribute('visibility:hidden')\n    cfg_var.set('_VIPS_PUBLIC', '__attribute__((visibility(\"default\")))')\nendif\n\n# we also need to be able to mix vector and scalar arithmetic\nvector_arithmetic_check = '''\ntypedef float v4f __attribute__((vector_size(4 * sizeof(float)),aligned(16)));\nint main(void) {\n    v4f f = {1, 2, 3, 4}; f *= 12.0;\n    v4f g = {5, 6, 7, 8}; f = g > 0 ? g : -1 * g;\n}\n'''\n\n# gcc 7.2 seems to work, but then gets confused by signed constants in templates\nsigned_constants_check = '''\ntypedef float v4f __attribute__((vector_size(4 * sizeof(float)),aligned(16)));\ntemplate <typename T>\nstatic void\nh( v4f B )\n{\n    v4f f;\n    f = -1 * B;\n}\n'''\n\nif cpp.compiles(vector_arithmetic_check, name: 'Has vector arithmetic', dependencies: m_dep) and \\\n    cpp.compiles(signed_constants_check, name: 'Has signed constants in vector templates', dependencies: m_dep)\n    cfg_var.set('HAVE_VECTOR_ARITH', '1')\nendif\n\n# HAVE_TARGET_CLONES\ntarget_clones_check = '''\nstatic int __attribute__((target_clones(\"default,avx\")))\nhas_target_clones(void) {\n    return 0;\n}\n\nint main(void) {\n    int (*func)(void) = has_target_clones;\n    return func();\n}\n'''\nif meson.can_run_host_binaries()\n    rres = cc.run(target_clones_check, args: '-Werror', name: 'Has target_clones attribute')\n    have_target_clones = rres.compiled() and rres.returncode() == 0\nelse\n    have_target_clones = cc.links(target_clones_check, args: '-Werror', name: 'Has target_clones attribute')\nendif\nif have_target_clones\n    cfg_var.set('HAVE_TARGET_CLONES', '1')\nendif\n\nfunc_names = [ '_aligned_malloc', 'posix_memalign', 'memalign' ]\nforeach func_name : func_names\n    if cc.has_function(func_name)\n        cfg_var.set('HAVE_' + func_name.to_upper(), '1')\n    endif\nendforeach\n\nif cc.has_function('pthread_setattr_default_np', args: '-D_GNU_SOURCE', prefix: '#include <pthread.h>', dependencies: thread_dep)\n    cfg_var.set('HAVE_PTHREAD_DEFAULT_NP', '1')\nendif\n\n# needed by rsvg and others\nzlib_dep = dependency('zlib', version: '>=0.4', required: get_option('zlib'))\nif zlib_dep.found()\n    external_deps += zlib_dep\n    cfg_var.set('HAVE_ZLIB', '1')\nendif\n\nlibarchive_dep = dependency('libarchive', version: '>=3.0.0', required: get_option('archive'))\nif libarchive_dep.found()\n    external_deps += libarchive_dep\n    cfg_var.set('HAVE_LIBARCHIVE', '1')\nendif\n\nfftw_dep = dependency('fftw3', required: get_option('fftw'))\nif fftw_dep.found()\n    external_deps += fftw_dep\n    cfg_var.set('HAVE_FFTW', '1')\nendif\n\n# TODO: simplify this when requiring meson>=0.60.0\nmagick_dep = dependency(get_option('magick-package'), required: false)\nif not magick_dep.found()\n    # very old versions called it \"ImageMagick\"\n    magick_dep = dependency('ImageMagick', required: get_option('magick'))\nendif\nmagick_found = not get_option('magick').disabled() and magick_dep.found()\nmagick_module = false\nif magick_found\n    magick_module = modules_enabled and not get_option('magick-module').disabled()\n    if magick_module\n        cfg_var.set('MAGICK_MODULE', '1')\n        module_deps += magick_dep\n    else\n        external_deps += magick_dep\n    endif\n    magick7 = magick_dep.version().version_compare('>=7.0')\n    # IM7 uses <MagickCore/MagickCore.h>\n    # IM6 uses <magick/MagickCore.h> (since 6.2.3) but still provides <magick/api.h>\n    # GM uses <magick/api.h>\n    magick_include = magick7 ? '#include <MagickCore/MagickCore.h>' : '#include <magick/api.h>'\n    if magick7\n        cfg_var.set('HAVE_MAGICK7', '1')\n    else\n        # come here for imagemagick6, and graphicsmagick1.x, which also uses\n        # the im6 API\n        cfg_var.set('HAVE_MAGICK6', '1')\n        if cc.has_member('struct _ImageInfo', 'number_scenes', prefix: magick_include, dependencies: magick_dep)\n            cfg_var.set('HAVE_NUMBER_SCENES', '1')\n        endif\n        func_names = [ 'InheritException', 'AcquireExceptionInfo', 'SetImageProperty', 'SetImageExtent', 'AcquireImage', 'GetVirtualPixels', 'ResetImageProfileIterator', 'ResetImageAttributeIterator', 'ResetImagePropertyIterator', 'MagickCoreGenesis', 'SetImageOption', 'BlobToStringInfo', 'OptimizePlusImageLayers', 'OptimizeImageTransparency', 'GetMagicInfo' ]\n        foreach func_name : func_names\n            if cc.has_function(func_name, prefix: magick_include, dependencies: magick_dep)\n                cfg_var.set('HAVE_' + func_name.to_upper(), '1')\n            endif\n        endforeach\n        if cc.compiles(magick_include + '\\nColorspaceType colorspace = CMYColorspace;', name: 'Has CMYColorspace', dependencies: magick_dep)\n            cfg_var.set('HAVE_CMYCOLORSPACE', '1')\n        endif\n        if cc.compiles(magick_include + '\\nColorspaceType colorspace = HCLpColorspace;', name: 'Has HCLpColorspace', dependencies: magick_dep)\n            cfg_var.set('HAVE_HCLPCOLORSPACE', '1')\n        endif\n        # GetImageMagick() takes two args under GM, three under IM\n        if cc.compiles(magick_include + '\\nint main() {(void)GetImageMagick(NULL, 0, NULL);}', name: 'GetImageMagick takes three arguments', dependencies: magick_dep)\n            cfg_var.set('HAVE_GETIMAGEMAGICK3', '1')\n        endif\n    endif\n\n    if 'load' in get_option('magick-features')\n        cfg_var.set('ENABLE_MAGICKLOAD', '1')\n    endif\n    if 'save' in get_option('magick-features')\n        cfg_var.set('ENABLE_MAGICKSAVE', '1')\n        if cc.has_function('ImportImagePixels', prefix: magick_include, dependencies: magick_dep)\n            cfg_var.set('HAVE_IMPORTIMAGEPIXELS', '1')\n        endif\n        if cc.has_function('ImagesToBlob', prefix: magick_include, dependencies: magick_dep)\n            cfg_var.set('HAVE_IMAGESTOBLOB', '1')\n        endif\n    endif\nendif\n\ncfitsio_dep = dependency('cfitsio', required: get_option('cfitsio'))\nif cfitsio_dep.found()\n    external_deps += cfitsio_dep\n    cfg_var.set('HAVE_CFITSIO', '1')\nendif\n\n# quant package we use\nquantisation_package = disabler()\n\nimagequant_dep = dependency('imagequant', required: get_option('imagequant'))\nif imagequant_dep.found()\n    external_deps += imagequant_dep\n    cfg_var.set('HAVE_IMAGEQUANT', '1')\n    quantisation_package = imagequant_dep\nendif\n\n# only if libimagequant not found\nquantizr_dep = disabler()\nif not quantisation_package.found()\n    quantizr_dep = dependency('quantizr', required: get_option('quantizr'))\n    if quantizr_dep.found()\n        external_deps += quantizr_dep\n        cfg_var.set('HAVE_QUANTIZR', '1')\n        quantisation_package = quantizr_dep\n    endif\nendif\n\ncgif_dep = disabler()\nif quantisation_package.found()\n    cgif_dep = dependency('cgif', version: '>=0.2.0', required: get_option('cgif'))\n    if cgif_dep.found()\n        external_deps += cgif_dep\n        cfg_var.set('HAVE_CGIF', '1')\n        if cc.compiles('#include <cgif.h>\\nint i = CGIF_ATTR_NO_LOOP;', name: 'Has CGIF_ATTR_NO_LOOP', dependencies: cgif_dep)\n            cfg_var.set('HAVE_CGIF_ATTR_NO_LOOP', '1')\n        endif\n        if cc.compiles('#include <cgif.h>\\nint i = CGIF_FRAME_ATTR_INTERLACED;', name: 'Has CGIF_FRAME_ATTR_INTERLACED', dependencies: cgif_dep)\n            cfg_var.set('HAVE_CGIF_FRAME_ATTR_INTERLACED', '1')\n        endif\n        if cc.compiles('#include <cgif.h>\\nint i = CGIF_GEN_KEEP_IDENT_FRAMES;', name: 'Has CGIF_GEN_KEEP_IDENT_FRAMES', dependencies: cgif_dep)\n            cfg_var.set('HAVE_CGIF_GEN_KEEP_IDENT_FRAMES', '1')\n        endif\n    endif\nendif\n\nlibexif_dep = dependency('libexif', version: '>=0.6', required: get_option('exif'))\nif libexif_dep.found()\n    external_deps += libexif_dep\n    cfg_var.set('HAVE_EXIF', '1')\n    # some libexif packages need include <libexif/poop.h>, some just <poop.h>\n    # how annoying\n    if cc.has_header('exif-data.h', dependencies: libexif_dep)\n        # libexif includes don't need libexif prefix\n        cfg_var.set('UNTAGGED_EXIF', '1')\n    endif\n    # 0.6.22 adds a couple of EXIF 2.3 ASCII tags\n    if libexif_dep.version().version_compare('>=0.6.22')\n        cfg_var.set('HAVE_EXIF_0_6_22', '1')\n    endif\n    # 0.6.23 adds some OffsetTime* and GPS* ASCII tags\n    if libexif_dep.version().version_compare('>=0.6.23')\n        cfg_var.set('HAVE_EXIF_0_6_23', '1')\n    endif\nendif\n\nlibjpeg_dep = dependency('libjpeg', required: get_option('jpeg'))\nif libjpeg_dep.found()\n    external_deps += libjpeg_dep\n    cfg_var.set('HAVE_JPEG', '1')\n    # features like trellis quant are exposed as extension parameters ...\n    # mozjpeg 3.2 and later have #define JPEG_C_PARAM_SUPPORTED, but we must\n    # work with earlier versions\n    if cc.has_function('jpeg_c_bool_param_supported', prefix: '#include <stdio.h>\\n#include <jpeglib.h>', dependencies: libjpeg_dep)\n        cfg_var.set('HAVE_JPEG_EXT_PARAMS', '1')\n    endif\nendif\n\n# png package we use\npng_package = disabler()\n\n# Look for libspng first\n# - it's sometimes called \"spng.pc\", sometimes \"libspng.pc\", we must search for\n#   both\n# - we need 0.7+ for PNG write support\n# TODO: simplify this when requiring meson>=0.60.0\nspng_dep = dependency('spng', version: '>=0.7', required: false)\nif not spng_dep.found()\n    spng_dep = dependency('libspng', version: '>=0.7', required: get_option('spng'))\nendif\nif not get_option('spng').disabled() and spng_dep.found()\n    external_deps += spng_dep\n    cfg_var.set('HAVE_SPNG', '1')\n    png_package = spng_dep\nendif\n\n# only if libspng not found\nif not png_package.found()\n    png_dep = dependency('libpng', version: '>=1.2.9', required: get_option('png'))\n    if png_dep.found()\n        external_deps += png_dep\n        cfg_var.set('HAVE_PNG', '1')\n        if cc.has_function('png_set_chunk_malloc_max', prefix: '#include <png.h>', dependencies: png_dep)\n            cfg_var.set('HAVE_PNG_SET_CHUNK_MALLOC_MAX', '1')\n        endif\n        png_package = png_dep\n    endif\nendif\n\n# libwebp ... target 0.6+ to reduce complication\n# webp has the stuff for handling metadata in two separate libraries -- we\n# insist on having both of them\nlibwebp_dep = dependency('libwebp', version: '>=0.6', required: get_option('webp'))\nif libwebp_dep.found()\n    external_deps += libwebp_dep\n    external_deps += dependency('libwebpmux', version: '>=0.6')\n    external_deps += dependency('libwebpdemux', version: '>=0.6')\n    cfg_var.set('HAVE_LIBWEBP', '1')\nendif\n\npangocairo_dep = dependency('pangocairo', version: '>=1.32.6', required: get_option('pangocairo'))\nif pangocairo_dep.found()\n    external_deps += pangocairo_dep\n    cfg_var.set('HAVE_PANGOCAIRO', '1')\nendif\n\n# text rendering with fontconfig requires pangoft2\npangoft2_dep = dependency('pangoft2', version: '>=1.32.6', required: get_option('fontconfig'))\nfontconfig_dep = dependency('fontconfig', required: get_option('fontconfig'))\nfontconfig_found = pangoft2_dep.found() and fontconfig_dep.found() and pangocairo_dep.found()\nif fontconfig_found\n    external_deps += pangoft2_dep\n    external_deps += fontconfig_dep\n    cfg_var.set('HAVE_FONTCONFIG', '1')\nendif\n\nlibtiff_dep = dependency('libtiff-4', required: get_option('tiff'))\nif libtiff_dep.found()\n    external_deps += libtiff_dep\n    cfg_var.set('HAVE_TIFF', '1')\n    # ZSTD and WEBP in TIFF added in libtiff 4.0.10\n    if cc.get_define('COMPRESSION_WEBP', prefix: '#include <tiff.h>', dependencies: libtiff_dep) != ''\n        cfg_var.set('HAVE_TIFF_COMPRESSION_WEBP', '1')\n    endif\n    # TIFFOpenOptions added in libtiff 4.5.0\n    if cc.has_function('TIFFOpenOptionsAlloc', prefix: '#include <tiffio.h>', dependencies: libtiff_dep)\n        cfg_var.set('HAVE_TIFF_OPEN_OPTIONS', '1')\n    endif\n    # TIFFOpenOptionsSetMaxCumulatedMemAlloc added in libtiff 4.7.0\n    if cc.has_function('TIFFOpenOptionsSetMaxCumulatedMemAlloc', prefix: '#include <tiffio.h>', dependencies: libtiff_dep)\n        cfg_var.set('HAVE_TIFF_OPEN_OPTIONS_SET_MAX_CUMULATED_MEM_ALLOC', '1')\n    endif\nendif\n\n# 2.40.3 so we get the UNLIMITED open flag\nlibrsvg_dep = dependency('librsvg-2.0', version: '>=2.40.3', required: get_option('rsvg'))\ncairo_dep = dependency('cairo', version: '>=1.2', required: get_option('rsvg'))\nlibrsvg_found = librsvg_dep.found() and cairo_dep.found()\nif librsvg_found\n    external_deps += librsvg_dep\n    external_deps += cairo_dep\n    cfg_var.set('HAVE_RSVG', '1')\nendif\n\nopenslide_dep = dependency('openslide', version: '>=3.3.0', required: get_option('openslide'))\nopenslide_module = false\nif openslide_dep.found()\n    openslide_module = modules_enabled and not get_option('openslide-module').disabled()\n    if openslide_module\n        cfg_var.set('OPENSLIDE_MODULE', '1')\n        module_deps += openslide_dep\n    else\n        external_deps += openslide_dep\n    endif\n    cfg_var.set('HAVE_OPENSLIDE', '1')\n    if openslide_dep.version().version_compare('>=3.4.0')\n        cfg_var.set('HAVE_OPENSLIDE_3_4', '1')\n    endif\n\n    if cc.has_function('openslide_get_icc_profile_size', dependencies: openslide_dep)\n        cfg_var.set('HAVE_OPENSLIDE_ICC', '1')\n    endif\nendif\n\nmatio_dep = dependency('matio', required: get_option('matio'))\nif matio_dep.found()\n    external_deps += matio_dep\n    cfg_var.set('HAVE_MATIO', '1')\nendif\n\n# lcms ... refuse to use lcms1\nlcms_dep = dependency('lcms2', required: get_option('lcms'))\nif lcms_dep.found()\n    external_deps += lcms_dep\n    cfg_var.set('HAVE_LCMS2', '1')\nendif\n\n# require 1.2.2 since 1.2.1 has a broken ImfCloseTiledInputFile()\nopenexr_dep = dependency('OpenEXR', version: '>=1.2.2', required: get_option('openexr'))\nif openexr_dep.found()\n    external_deps += openexr_dep\n    cfg_var.set('HAVE_OPENEXR', '1')\nendif\n\n# 2.4 is the first one to have working threading and tiling\nlibopenjp2_dep = dependency('libopenjp2', version: '>=2.4', required: get_option('openjpeg'))\nif libopenjp2_dep.found()\n    external_deps += libopenjp2_dep\n    cfg_var.set('HAVE_LIBOPENJP2', '1')\nendif\n\n# simd package we use\nsimd_package = disabler()\n\n# Require 1.0.5 to support the `ReorderDemote2To(u8, i16, i16)` operation\n# See: https://github.com/google/highway/pull/1247\nlibhwy_dep = dependency('libhwy', version: '>=1.0.5', required: get_option('highway'))\nif libhwy_dep.found()\n    external_deps += libhwy_dep\n    cfg_var.set('HAVE_HWY', '1')\n    # 1.1.0 adds `InterleaveWhole{Lower,Upper}` and `Dup128VecFromValues`\n    if libhwy_dep.version().version_compare('>=1.1.0')\n        cfg_var.set('HAVE_HWY_1_1_0', '1')\n    endif\n    # Always disable SSSE3 since it is rare to have SSSE3 but not SSE4\n    disabled_targets = ['HWY_SSSE3']\n    # Optionally, build without AVX512 support (helps to reduce binary size at the cost of performance)\n    #disabled_targets += ['HWY_AVX3']\n    #disabled_targets += ['HWY_AVX3_ZEN4']\n    #disabled_targets += ['HWY_AVX3_SPR']\n    add_project_arguments('-DHWY_DISABLED_TARGETS=@0@'.format('|'.join(disabled_targets)), language: ['cpp'])\n    simd_package = libhwy_dep\nendif\n\n# only if highway not found\nif not simd_package.found()\n    # we use loadpw etc.\n    orc_dep = dependency('orc-0.4', version: '>=0.4.11', required: get_option('orc'))\n    if orc_dep.found()\n        external_deps += orc_dep\n        cfg_var.set('HAVE_ORC', '1')\n        # orc 0.4.30+ works with cf-protection, but 0.4.30 has a bug with multiple\n        # definitions of OrcTargetPowerPCFlags, so insist on 0.4.31\n        if orc_dep.version().version_compare('>=0.4.31')\n            cfg_var.set('HAVE_ORC_CF_PROTECTION', '1')\n        endif\n        simd_package = orc_dep\n    endif\nendif\n\n# pdf loader we use\npdf_loader = disabler()\n\n# pick 4200 as the starting version number ... no reason, really, it'd\n# probably work with much older versions\npdfium_dep = dependency('pdfium', version: '>=4200', required: get_option('pdfium'))\nif pdfium_dep.found()\n    external_deps += pdfium_dep\n    cfg_var.set('HAVE_PDFIUM', '1')\n    pdf_loader = pdfium_dep\nendif\n\nlibheif_dep = dependency('libheif', version: '>=1.4.0', required: get_option('heif'))\nlibheif_module = false\nif libheif_dep.found()\n    libheif_module = modules_enabled and not get_option('heif-module').disabled()\n    if libheif_module\n        cfg_var.set('HEIF_MODULE', '1')\n        module_deps += libheif_dep\n    else\n        external_deps += libheif_dep\n    endif\n    cfg_var.set('HAVE_HEIF', '1')\n    # added in 1.6.0\n    if cpp.has_function('heif_image_handle_get_raw_color_profile', prefix: '#include <libheif/heif.h>', dependencies: libheif_dep)\n        cfg_var.set('HAVE_HEIF_COLOR_PROFILE', '1')\n    endif\n    if cpp.has_function('heif_context_set_maximum_image_size_limit', prefix: '#include <libheif/heif.h>', dependencies: libheif_dep)\n        cfg_var.set('HAVE_HEIF_SET_MAX_IMAGE_SIZE_LIMIT', '1')\n    endif\n    # added in 1.7.0\n    if cpp.has_member('struct heif_decoding_options', 'convert_hdr_to_8bit', prefix: '#include <libheif/heif.h>', dependencies: libheif_dep)\n        cfg_var.set('HAVE_HEIF_DECODING_OPTIONS_CONVERT_HDR_TO_8BIT', '1')\n    endif\n    # heif_main_brand added in 1.4.0, but heif_avif appeared in 1.7 ... just check\n    # the libheif version number since testing for enums is annoying\n    if libheif_dep.version().version_compare('>=1.7.0')\n        cfg_var.set('HAVE_HEIF_AVIF', '1')\n    endif\n    # added in 1.10.0\n    if cpp.has_function('heif_encoder_parameter_get_valid_integer_values', prefix: '#include <libheif/heif.h>', dependencies: libheif_dep)\n        cfg_var.set('HAVE_HEIF_ENCODER_PARAMETER_GET_VALID_INTEGER_VALUES', '1')\n    endif\n    # added in 1.11.0\n    if cpp.has_member('struct heif_encoding_options', 'output_nclx_profile', prefix: '#include <libheif/heif.h>', dependencies: libheif_dep)\n        cfg_var.set('HAVE_HEIF_ENCODING_OPTIONS_OUTPUT_NCLX_PROFILE', '1')\n    endif\n\n    # heif_init added in 1.13.0\n    if libheif_dep.version().version_compare('>=1.13.0')\n        cfg_var.set('HAVE_HEIF_INIT', '1')\n    endif\n    # heif_encoding_options.image_orientation added in 1.14.0\n    if cpp.has_member('struct heif_encoding_options', 'image_orientation', prefix: '#include <libheif/heif.h>', dependencies: libheif_dep)\n        cfg_var.set('HAVE_HEIF_ENCODING_OPTIONS_IMAGE_ORIENTATION', '1')\n    endif\n    # heif_error_success added in 1.17.0\n    if libheif_dep.version().version_compare('>=1.17.0')\n        cfg_var.set('HAVE_HEIF_ERROR_SUCCESS', '1')\n    endif\nendif\n\nlibjxl_dep = dependency('libjxl', version: '>=0.6', required: get_option('jpeg-xl'))\nlibjxl_threads_dep = dependency('libjxl_threads', version: '>=0.6', required: get_option('jpeg-xl'))\nlibjxl_found = libjxl_dep.found() and libjxl_threads_dep.found()\nlibjxl_module = false\nif libjxl_found\n    libjxl_module = modules_enabled and not get_option('jpeg-xl-module').disabled()\n    if libjxl_module\n        cfg_var.set('LIBJXL_MODULE', '1')\n        module_deps += libjxl_dep\n        module_deps += libjxl_threads_dep\n    else\n        external_deps += libjxl_dep\n        external_deps += libjxl_threads_dep\n    endif\n    cfg_var.set('HAVE_LIBJXL', '1')\n    if libjxl_dep.version().version_compare('>=0.7')\n        cfg_var.set('HAVE_LIBJXL_0_7', '1')\n    endif\n    if libjxl_dep.version().version_compare('>=0.9')\n        cfg_var.set('HAVE_LIBJXL_0_9', '1')\n    endif\nendif\n\n# only if pdfium not found\nlibpoppler_module = false\nif not pdf_loader.found()\n    libpoppler_dep = dependency('poppler-glib', version: '>=0.16.0', required: get_option('poppler'))\n    if not cairo_dep.found()\n        cairo_dep = dependency('cairo', version: '>=1.2', required: get_option('poppler'))\n    endif\n    if libpoppler_dep.found() and cairo_dep.found()\n        libpoppler_module = modules_enabled and not get_option('poppler-module').disabled()\n        if libpoppler_module\n            cfg_var.set('POPPLER_MODULE', '1')\n            module_deps += libpoppler_dep\n            module_deps += cairo_dep\n        else\n            external_deps += libpoppler_dep\n            external_deps += cairo_dep\n        endif\n        cfg_var.set('HAVE_POPPLER', '1')\n        pdf_loader = libpoppler_dep\n    endif\nendif\n\n# niftiio.pc is not present, and only provides the CMake package definition\n# files since v3.0.0, so, as a last resort, fall back on heuristic grabbing the\n# libs when -Dnifti-prefix-dir=<PREFIX> is specified\n#\n# cmake find fails on ubuntu due to /usr/lib/x86_64-linux-gnu madness, so it's\n# simplest to create a niftiio.pc in this case\n#\n# create /usr/lib/x86_64-linux-gnu/pkgconfig/niftiio.pc:\n#\n#   prefix=/usr\n#   libdir=${prefix}/lib/x86_64-linux-gnu\n#   includedir=${prefix}/include/nifti\n#   Name: niftiio\n#   Description: Core i/o routines for reading and writing nifti-1 format files\n#   Version: 3.0.1\n#   Requires: xproto\n#   Libs: -L${libdir} -lniftiio -lznz\n#   Cflags: -I${includedir}\n#\n# TODO: simplify this when requiring meson>=0.60.0\nnifti_prefix_dir = get_option('nifti-prefix-dir')\nlibnifti_dep = dependency('niftiio', method: 'pkg-config', required: false)\nif not libnifti_dep.found()\n    libnifti_dep = dependency('NIFTI',\n      version: '>=3.0.0',\n      method: 'cmake',\n      modules: ['NIFTI::niftiio'],\n      required: get_option('nifti').enabled() and nifti_prefix_dir == '')\nendif\nif nifti_prefix_dir != '' and not libnifti_dep.found()\n    nifti_inc = include_directories(nifti_prefix_dir / 'include' / 'nifti')\n    nifti_lib = cc.find_library('niftiio', has_headers: ['nifti1_io.h'], header_include_directories: nifti_inc, required: get_option('nifti'))\n    znz_lib = cc.find_library('znz', has_headers: ['znzlib.h'], header_include_directories: nifti_inc, required: get_option('nifti'))\n    libnifti_dep = declare_dependency(dependencies: [nifti_lib, znz_lib], include_directories: nifti_inc)\nendif\nlibnifti_found = not get_option('nifti').disabled() and libnifti_dep.found()\nif libnifti_found\n    external_deps += libnifti_dep\n    cfg_var.set('HAVE_NIFTI', '1')\nendif\n\nif cc.has_header('sys/file.h')\n    cfg_var.set('HAVE_SYS_FILE_H', '1')\nendif\nif cc.has_header('sys/param.h')\n    cfg_var.set('HAVE_SYS_PARAM_H', '1')\nendif\nif cc.has_header('sys/mman.h')\n    cfg_var.set('HAVE_SYS_MMAN_H', '1')\nendif\nif cc.has_header('unistd.h')\n    cfg_var.set('HAVE_UNISTD_H', '1')\nendif\nif cc.has_header('io.h')\n    cfg_var.set('HAVE_IO_H', '1')\nendif\nif cc.has_header('direct.h')\n    cfg_var.set('HAVE_DIRECT_H', '1')\nendif\nif get_option('deprecated')\n    cfg_var.set('ENABLE_DEPRECATED', '1')\nendif\nif get_option('nsgif')\n    cfg_var.set('HAVE_NSGIF', '1')\nendif\nif get_option('ppm')\n    cfg_var.set('HAVE_PPM', '1')\nendif\nif get_option('analyze')\n    cfg_var.set('HAVE_ANALYZE', '1')\nendif\nif get_option('radiance')\n    cfg_var.set('HAVE_RADIANCE', '1')\nendif\n\ngettext_domain = 'vips@0@.@1@'.format(version_major, version_minor)\ncfg_var.set_quoted('GETTEXT_PACKAGE', gettext_domain)\ncfg_var.set_quoted('VIPS_PREFIX', prefix_dir)\ncfg_var.set_quoted('VIPS_LIBDIR', lib_dir)\nif cc.has_function('ngettext')\n    cfg_var.set('ENABLE_NLS', 1)\n    have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset')\nelse\n    libintl_dep = cc.find_library('intl', required: false)\n    if libintl_dep.found()\n        other_deps += libintl_dep\n        cfg_var.set('ENABLE_NLS', 1)\n        have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset', prefix: '#include <libintl.h>', dependencies: libintl_dep)\n    else\n        have_bind_textdomain_codeset = false\n    endif\nendif\ncfg_var.set('HAVE_BIND_TEXTDOMAIN_CODESET', have_bind_textdomain_codeset)\n\nif host_os == 'darwin'\n    profile_dir = '/Library/ColorSync/Profiles'\nelif host_os == 'windows'\n    # need double escapes since this will get pasted into a #define in a C\n    # header ... the C:\\Windows is usually overwritten with the result of\n    # GetWindowsDirectoryW()\n    profile_dir = 'C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\spool\\\\\\\\drivers\\\\\\\\color'\nelse\n    profile_dir = get_option('prefix') / get_option('datadir') / 'color' / 'icc'\nendif\ncfg_var.set_quoted('VIPS_ICC_DIR', profile_dir)\n\nconfig_file = configure_file(\n    configuration: cfg_var,\n    output: 'config.h'\n)\n\nconfig_dep = declare_dependency(\n    sources: config_file,\n    include_directories: include_directories('.'),\n    compile_args: '-DHAVE_CONFIG_H=1',\n)\n\nlibvips_deps = [config_dep] + external_deps + other_deps\n\ngir = find_program('g-ir-scanner', required: get_option('introspection'))\nenable_introspection = gir.found() and (not meson.is_cross_build() or get_option('introspection').enabled())\n\nbuild_summary = {\n  'Build options':\n    {'enable debug': [get_option('debug')],\n     'enable deprecated': [get_option('deprecated')],\n     'enable modules': [modules_enabled],\n     'enable gtk-doc': [get_option('gtk_doc')],\n     'enable doxygen': [get_option('doxygen')],\n     'enable introspection': [enable_introspection],\n     'enable examples': [get_option('examples')],\n     'enable cplusplus': [get_option('cplusplus')],\n     'enable RAD load/save': [get_option('radiance')],\n     'enable Analyze7 load': [get_option('analyze')],\n     'enable PPM load/save': [get_option('ppm')],\n     'enable GIF load': [get_option('nsgif')],\n    },\n}\nbuild_features = {\n  'Optional external packages':\n    {'FFTs': ['fftw', fftw_dep],\n     'SIMD support': ['libhwy or liborc', simd_package],\n     'ICC profile support': ['lcms2', lcms_dep],\n     'deflate compression': ['zlib', zlib_dep],\n     'text rendering': ['pangocairo', pangocairo_dep],\n     'font file support': ['fontconfig', fontconfig_found ? fontconfig_dep : disabler()],\n     'EXIF metadata support': ['libexif', libexif_dep],\n    },\n  'External image format libraries':\n    {'JPEG load/save': ['libjpeg', libjpeg_dep],\n     'JXL load/save': ['libjxl', libjxl_found ? libjxl_dep : disabler(), libjxl_module],\n     'JPEG2000 load/save': ['OpenJPEG', libopenjp2_dep],\n     'PNG load/save': ['libspng or libpng', png_package],\n     'image quantisation': ['imagequant or quantizr', quantisation_package],\n     'TIFF load/save': ['libtiff', libtiff_dep],\n     'image pyramid save': ['libarchive', libarchive_dep],\n     'HEIC/AVIF load/save': ['libheif', libheif_dep, libheif_module],\n     'WebP load/save': ['libwebp', libwebp_dep],\n     'PDF load': ['PDFium or Poppler', pdf_loader, libpoppler_module],\n     'SVG load': ['librsvg', librsvg_found ? librsvg_dep : disabler()],\n     'EXR load': ['OpenEXR', openexr_dep],\n     'WSI load': ['OpenSlide', openslide_dep, openslide_module],\n     'Matlab load': ['Matio', matio_dep],\n     'NIfTI load/save': ['libnifti', libnifti_found ? libnifti_dep : disabler()],\n     'FITS load/save': ['cfitsio', cfitsio_dep],\n     'GIF save': ['cgif', cgif_dep],\n     'Magick @0@'.format('/'.join(get_option('magick-features'))): [get_option('magick-package'), magick_found ? magick_dep : disabler(), magick_module],\n    },\n}\n\n# external_deps can have duplicates (eg. cairo can appear several times),\n# which will make summary fail\nseen_deps = []\nforeach dep: external_deps + module_deps\n    if dep.type_name() != 'internal' and dep.name() not in seen_deps\n       summary(dep.name(), dep.version(), section: 'Dependencies')\n       seen_deps += dep.name()\n    endif\nendforeach\nforeach section_title, section : build_summary\n    summary(section, bool_yn: true, section: section_title)\nendforeach\nforeach section_title, section: build_features\n    foreach key, arr : section\n        dep_name = arr[0]\n        found = arr[1].found()\n        if found and arr[1].type_name() != 'internal'\n            dep_name = arr[1].name()\n        endif\n        dynamic_module = arr.length() > 2 ? [' (dynamic module: ', arr[2], ')'] : []\n        summary('@0@ with @1@'.format(key, dep_name), [found] + dynamic_module, bool_yn: true, list_sep: '', section: section_title)\n    endforeach\nendforeach\n\nsubdir('libvips')\nif get_option('gtk_doc')\n    subdir('doc')\nendif\nif get_option('examples')\n  subdir('examples')\nendif\nif get_option('cplusplus')\n  subdir('cplusplus')\nendif\n\n# these lines removed by a regexp for oss-fuzz builds, don't touch!\nsubdir('man')\nsubdir('po')\nsubdir('tools')\nsubdir('test')\nsubdir('fuzz')\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 4.9833984375,
          "content": "# core options\n\noption('deprecated',\n  type: 'boolean',\n  value: true,\n  description: 'Build deprecated components')\n\noption('examples',\n  type: 'boolean',\n  value: true,\n  description: 'Build example programs')\n\noption('cplusplus',\n  type: 'boolean',\n  value: true,\n  description: 'Build C++ API')\n\noption('doxygen',\n  type: 'boolean',\n  value: false,\n  description: 'Build C++ documentation')\n\noption('gtk_doc',\n  type: 'boolean',\n  value: false,\n  description: 'Build GTK-doc documentation')\n\noption('modules',\n  type: 'feature',\n  value: 'enabled',\n  description: 'Build dynamic modules')\n\noption('introspection',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build GObject introspection data')\n\noption('vapi',\n  type: 'boolean',\n  value: false,\n  description: 'Build VAPI')\n\n# External libraries\n\noption('cfitsio',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with cfitsio')\n\noption('cgif',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with cgif')\n\noption('exif',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with libexif')\n\noption('fftw',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with fftw3')\n\noption('fontconfig',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with fontconfig')\n\noption('archive',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with libarchive')\n\noption('heif',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with libheif')\n\noption('heif-module',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build libheif as module')\n\noption('imagequant',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with imagequant')\n\noption('jpeg',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with jpeg')\n\noption('jpeg-xl',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with libjxl')\n\noption('jpeg-xl-module',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build libjxl as module')\n\noption('lcms',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with lcms2')\n\noption('magick',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with libMagic')\n\noption('magick-package',\n  type: 'string',\n  value: 'MagickCore',\n  description: 'ImageMagick package to build with')\n\noption('magick-features',\n  type: 'array',\n  choices: ['load', 'save'],\n  value: ['load', 'save'],\n  description: 'Enable libMagic load or save capabilities')\n\noption('magick-module',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build libMagic as module')\n\noption('matio',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with matio')\n\noption('nifti',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with nifti')\n\noption('nifti-prefix-dir',\n  type: 'string',\n  value: '',\n  description: 'Prefix where nifticlib is installed (optional)')\n\noption('openexr',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with OpenEXR')\n\noption('openjpeg',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with libopenjp2')\n\noption('openslide',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with OpenSlide')\n\noption('openslide-module',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build OpenSlide as module')\n\noption('highway',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with highway')\n\noption('orc',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with orc-0.4')\n\noption('pangocairo',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with pangocairo')\n\noption('pdfium',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with pdfium')\n\noption('png',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with png')\n\noption('poppler',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with poppler')\n\noption('poppler-module',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build poppler as module')\n\noption('quantizr',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with quantizr')\n\noption('rsvg',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with rsvg')\n\noption('spng',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with spng')\n\noption('tiff',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with tiff')\n\noption('webp',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with libwebp')\n\noption('zlib',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build with zlib')\n\n# not external libraries, but we have options to disable them to reduce\n# the potential attack surface\n\noption('nsgif',\n  type: 'boolean',\n  value: true,\n  description: 'Build with nsgif')\n\noption('ppm',\n  type: 'boolean',\n  value: true,\n  description: 'Build with ppm')\n\noption('analyze',\n  type: 'boolean',\n  value: true,\n  description: 'Build with analyze')\n\noption('radiance',\n  type: 'boolean',\n  value: true,\n  description: 'Build with radiance')\n\n# fuzzing options\n\noption('fuzzing_engine',\n    type: 'combo',\n    choices : ['none', 'libfuzzer', 'oss-fuzz'],\n    value: 'none',\n    description: 'Select the fuzzing engine')\n\noption('fuzzer_ldflags',\n    type: 'string',\n    description: 'Extra LDFLAGS used during linking of fuzzing binaries')\n"
        },
        {
          "name": "po",
          "type": "tree",
          "content": null
        },
        {
          "name": "suppressions",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}