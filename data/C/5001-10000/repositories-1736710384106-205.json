{
  "metadata": {
    "timestamp": 1736710384106,
    "page": 205,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pervognsen/bitwise",
      "stars": 5140,
      "defaultBranch": "master",
      "files": [
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 6.6953125,
          "content": "**Q: What is Bitwise?**\n\nBitwise is my free educational project about building the software and hardware\nstack for a simple computer from scratch, running on an FPGA. This includes all the\nsystems software, including operating system, compiler, etc, as well as the\nHDL source code for the CPU, graphics chip, peripheral controllers, etc.\n\nBy watching daily or semidaily streams on Twitch, uploaded later as videos to YouTube,\nreading blog posts and articles, and studying code pushed daily to GitHub, you will get\nto watch over my shoulder as I build the system from scratch, starting with an empty\nsource control repository, and you will learn how everything works so you can build it\nyourself too. Most code will be written off stream, but every new line of code will\nbe covered during code reviews at the beginning of each stream.\n\n**Q: Who are you?**\n\nI'm Per Vognsen. I've worked as a game engine programmer and systems programmer\nat companies like Epic Games, NVIDIA, RAD Game Tools and Oculus for more than\n15 years. In 2017, I decided to take a break from professional programming, partly\nto pursue this project.\n\n**Q: Why are you doing this project?**\n\nI've always wanted something like this to exist, and now felt like the right time.\nThere have been some similar projects in the past. A big influence is Niklaus Wirth's\nOberon system, and Wirth's work in general.\n\n**Q: What license is it released under?**\n\nThe code and associated artifacts will be released into the public domain.\n\n**Q: How are you funding it?**\n\nBitwise is funded by self-sustaining savings. There is no need for financial support.\n\n**Q: How can I help?**\n\nFor now, the biggest help would be tuning in, spreading the word, and participating\nin the community. My long-term motivation will be largely driven by the community's\nresponse.\n\n**Q: What do I need to know in advance to follow along?**\n\nThe only hard requirement is fluency in the C programming language and understanding\nthe foundational ideas of computer science and computers that you'd typically pick up\nas a computer science undergraduate student or as a working programmer, e.g. standard\ntextbook algorithms and data structures. But the more you already know, the easier it\nwill be. While the formal prerequisites for Bitwise are minimal, don't expect it to be\neasy. Be ready to wrestle with new ideas on a recurring basis. Some topics will\nout of necessity be covered at a rapid pace, with pointers to additional reading material\nfor people who need or want to learn more.\n\n**Q: Do I need to spend money on hardware?**\n\nBitwise is designed so that you will get as close to the complete experience as possible even if\nyou don't own any FPGA development boards. We will be creating simulators and cycle-accurate\nmodels of the major peripherals like DDR3 DRAM and other IO interfaces. Even if you own\nFPGA boards, you wouldn't want to use them directly very often during development. That said,\nif after progressing through the hardware design track you decide to spend some money to\nbe able to test your code on a real FPGA, we are targeting an entry-level board with a price\naround $100 and a higher-end board for the serious enthusiast with a price around $400. But\nit must be strongly emphasized that this is not required. More information on the recommended\nboards will be available once we progress through the hardware design track.\n\n**Q: How much time should I expect to spend per week to keep up?**\n\nBitwise is structured so people can participate with different levels of commitment depending\non their free time and interest. At one extreme, if you're only casually curious about Bitwise,\nyou might choose to just follow the blog and read the weekly summaries and articles, and maybe\nwatch an occasional video. That would only take about an hour per week. At the other extreme,\nyou could treat Bitwise like a high-intensity college course and devote several hours to it\nper day, between watching the streams, studying the code, and doing your own coding. \n\nWith the piecewise design and construction of the Bitwise software and hardware, you can decide\nto drop off at any natural stopping point, having acquired some new self-contained knowledge and\nskills. The goal is to have natural milestones every few weeks. And conversely, if you weren't\nfollowing from the beginning, past summaries and articles can help you fast-forward and get up\nto speed quickly without having to go through all the old content if you don't want to.\n\nIt's also totally valid to follow along at your own pace without trying to keep up with the\nreal-time release of new material. All Bitwise materials will be kept available free of charge\nlong after the project has ended.\n\n**Q: What languages will we be using?**\n\nMost systems-level software will be written in our own C-like systems programming language, which\nwill be implemented in C99. We'll also be writing a smattering of RISC V assembly language by hand.\nAlong the way, we'll learn how to implement other kinds of languages, like Forth, Lisp, and an\nembeddable scripting language. But the only language you need to know fluently in advance is C.\n\nFor hardware design, we'll be using a hardware description language (HDL) of our own design. It will\ntarget Verilog as an intermediate language for the synthesis compiler, so we will need to learn to\nread and write a basic subset of Verilog. It's not assumed you know Verilog or any other HDL in advance.\n\nPython is used as a jack-of-all-trades language for ad-hoc scripting and prototyping. It will also be\nused heavily as a language and platform for everything related to hardware design. Our custom HDL\nwill be implemented as an embedded domain-specific language in Python. It helps to know Python in\nadvance, but if you have experience with similar languages, you should be able to pick it up along the way.\n\n**Q: What major supporting software is required?**\n\nYou need a C compiler. I will be using Visual C++ for Windows, but you can use GCC and Clang on\nyour operating system of choice. [Visual Studio Community](https://www.visualstudio.com/downloads/)\nis free to use for individuals and contains a fully featured C/C++ compiler and IDE.\n\nWe'll be using Python 3.6 with the [Conda](https://conda.io/miniconda.html) package manager\nto manage the Python environment and its package dependencies.\n\nFor Verilog, we'll be using the open source Verilator tool for cycle-accurate simulation and the free\nWebPACK version of Xilinx's FPGA toolchain Vivado for everything related to Xilinx FPGAs.\n\n**Q: Where can I can ask questions or have discussions about Bitwise?**\n\nYou use the [forums](https://bitwise.handmade.network/forums) or the [Discord](https://discord.gg/7TSA6ZF)\nchat server. GitHub issues and pull requests are not an appropriate venue for discussions. Please read the\n[community guidelines](GUIDELINES.md)\n"
        },
        {
          "name": "GUIDELINES.md",
          "type": "blob",
          "size": 1.64453125,
          "content": "# 1. Community Guidelines\n1. When interacting with others in the Bitwise community, always be respectful. We do not\n  tolerate bullying, shaming, name calling or discrimination, whether it concerns someone's\n  personal background or their technical choices.\n2. Be friendly and patient with beginners. We're all learning together.\n3. Use the [forums](http://bitwise.handmade.network) or the [Discord](https://discord.gg/7TSA6ZF) chat server for open-ended discussions.\n\n# 2. GitHub Issues and Pull Requests\n1. GitHub issues and pull requests are reserved for specific issues and fixes. It's _not_ a forum.\n2. Issues and pull requests must be written in a neutral, constructive tone, like you were addressing a coworker.\n   Comments should be about the program or design, never the person, which helps keep communications technical\n   and collaborative.\n3. Issues can be used for reporting bugs and other specific issues. Issues may also be used for\n   general requests, but make sure you first read all the docs and understand the project goals.\n4. Pull requests must be focused on specific fixes. Code bugs, broken links and typos are fair game,\n   but see below. Large scale design or code proposals are explicitly off-topic for pull requests.\n   You can discuss such changes on the forums.\n5. Fresh on-stream code is going to be subject to rapid change. Unless it's committed to an already\n   stable part of the codebase (and right now there are no stable parts), it's not worth submitting\n   pull requests for small, semi-obvious bugs if that part of the code is clearly in flux. Often\n   such bugs will have been fixed locally or would be discovered naturally on the next stream.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.3935546875,
          "content": "All code, data, writings and other original works related to Bitwise are released into the public domain.\n\nIf you have derived benefit from Bitwise or have incorporated parts of Bitwise directly into your own work\nand products, Bitwise's author, [Per Vognsen](mailto:per.vognsen@gmail.com), would appreciate an email describing\nhow and where it was used, but you are under no legal obligation to do so.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.5380859375,
          "content": "# Announcing Bitwise\n\nFeynman's blackboard quote \"What I cannot create, I do not understand\" never fails to give me goosebumps.\n\nI've always been obsessed with how things work under the hood--physical contraptions as well as abstract concepts.\nMost engineers and programmers I've met are motivated by building things, and their knowledge and skills are first\nand foremost a tool for achieving that. But I'm motivated by learning how things work, and the process of solving\nproblems and designing and implementing systems has been a tool for increasing my understanding. And of course there's\nthe unrivaled thrill of seeing what you've built actually work and come alive!\n\nAfter working as a game developer and systems programmer for over 15 years at places like Epic Games, NVIDIA, RAD Game\nTools and most recently Oculus, I decided it was time to take a break from professional programming and spend a few years\npursuing a long-time dream of mine, a project I've dubbed Bitwise, where I want to share my passion and try to demonstrate\nby example how to build systems from scratch, with a low-level computing focus.\n\nHere are some examples of what you will learn to build:\n- Hardware description language compilers and simulators\n- FPGA-based hardware, including CPU, GPU, HDMI controller, Ethernet MAC, DDR3 PHY, etc\n- Kernels, including drivers, hardware abstraction layer, scheduler, virtual memory manager, file systems, TCP/IP stack, etc\n- Systems libraries, including GUIs, memory allocators, etc.\n- Systems applications, including compilers, assemblers, disassemblers, profilers, debuggers, etc\n- Test infrastructure, including property-based testing, directed randomized testing, fuzz testing, etc.\n\nMy goal with Bitwise is to show that these things can be done much more simply and quickly than people realize if we strongly favor\nsimplicity over marginal gains in feature completeness or performance. The goal is not to outdo or compete with any existing product;\nthe goal is to show how things work with real hardware and software.\n\nBitwise will consist of educational videos, articles, and software/hardware source code. The code will be released into\nthe public domain for everyone to study and extend as they see fit. Everything produced as part of the project is free of\ncharge. I'm doing this project as a service to the community and neither ask nor accept financial donations.\n\nDespite the hardware focus, I want to make it clear almost nothing we do will require any special hardware or FPGA development boards\nfor you to participate. All our development will be done with free tools that run on normal Windows, Linux or Mac computers. I will\nperiodically demonstrate code running on real FPGA boards, but it will mostly be for debugging purposes. In fact, we want to minimize\nthe time we spend dealing with real hardware since it's usually painful and time intensive compared to running in simulation.\n\n# Structure\n\n_NOTE:_ This is highly subject to change based on feedback from the community.\n\nMy plan is to treat Bitwise as a full-time commitment for several years. Avoiding burnout is a major priority.\n\nI will be streaming daily or semidaily on Twitch, one or two hours per session. Videos will be posted later on YouTube.\n\nWhen I'm not streaming, I will be working full-time on the project: programming, writing and other related activities.\n\nI will be writing weekly or semiweekly blog posts summarizing the progress since the last update.\n\nCode streams will begin with a code review and walk-through of the diffs that were committed since last stream. Thus,\neven though a lot of the code will necessarily be written off stream, you won't miss out on a single line of code. After\neach review, I will push the latest changes to the GitHub repository, where everyone can download them.\n\nTo keep things fun for myself and viewers, the streams will frequently alternate between different development tracks. In a\ngiven week, streams might alternate between the primary software and hardware development tasks, but you can expect streams on\nrandom side topics to be commonplace. If you're not interested in some topics, there will likely be others to your liking.\n\nMost streams will be focused on live coding, while others will be in a more conventional presentation format.\n\nAside from the progress summary blog posts, I will try to distill what I cover on stream into standalone articles. Writing\narticles is a lot of work, but my hope is that by using my overviews from the stream as a template, I will be able to\nwrite them more quickly than if I had to start with a blank page. The audience for articles is much larger, so this will\nextend the project's reach, and it helps prospective or lapsed viewers to catch up to the streams; it's not practical for\nmost people to catch up by watching archived streams. \n\n# Prerequisites\n\nThe intended audience are fluent C programmers. Python is used as a secondary language, but knowing Python in advance is not\na prerequisite. The pace will be quick; while I will give overviews of many different topics, not everything can be covered\nin depth, so pointers to additional reading material will be provided whenever possible.\n\n# Schedule\n\nThe expected stream schedule is Monday through Friday, 6 PM PDT/9 PM EDT/2 AM CET.\n\nThe kick-off stream is planned for March 12. I expect it will mainly be an overview and Q&A.\n\nThe first major project will be the C-like systems language compiler. I expect the initial work on this to be a few weeks,\nafter which we will start working on the hardware track as well.\n\nI'm located in Thailand, so the schedule is my attempt at juggling time zone differences. I may balance it out by moving some\nstreams to Saturdays or Sundays during morning or noon hours for Europeans. I will be spending a month in Europe each year\nin August, which will force a rotation of the schedule.\n\n# Roadmap\n\n_NOTE:_ This is subject to change, but it gives you an idea of what I have planned. The outline corresponds to an estimated six\nmonths of work, depending on my productivity and how much we decide to focus on the critical path versus side topics.\n\nWe will be building not only software but hardware.\n\nOn the hardware side of things, we will be designing a computer from scratch that can be synthesized and deployed on a real\n[FPGA](https://en.wikipedia.org/wiki/Field-programmable_gate_array). This will include a\n[RISC-V](https://en.wikipedia.org/wiki/RISC-V) CPU, [GPU](https://en.wikipedia.org/wiki/Graphics_processing_unit),\nIO interface controllers for [DDR3](https://en.wikipedia.org/wiki/DDR3_SDRAM) memory, HDMI video/audio, Ethernet networking, and more.\n\nBut before getting there, we will need to learn about digital logic and how to design hardware with an\n[HDL](https://en.wikipedia.org/wiki/Hardware_description_language). In fact, we will designing our own HDL and the associated\ntoolchain, including software-based simulators and debugging tools. Along the way we'll be doing lots of fun mini-projects,\nlike designing a version of [Pong](https://en.wikipedia.org/wiki/Pong) entirely using logic gates, and implementing a variant of the\ntoy parallel computer used in the Zachtronics game [TIS-100](https://en.wikipedia.org/wiki/TIS-100).\n\nIn tandem, we will also be building the software stack. This includes both the host-side tooling as well as the software that\nruns on the Bitwise computer. Eventually most of the host tooling will be portable to the Bitwise computer itself! This toolchain\nwill start with a simple but powerful C-like systems programming language that will initially be bootstrapped to run on the host\nand which we will use to construct all the other software. As we first bring up the CPU, we will be writing the emulator, assembler,\ndisassembler and debugger in this language.\n\nFrom there we'll be writing test programs in the assembly language to validate the CPU. Once the CPU is in a usable state, we will\ncode a backend for our systems language compiler that targets our CPU and so start running simple compiled programs on it. At that point\nwe will build a simple microcontroller-class task-switching operating system and some simple applications on top of it.\n\nAt first, the CPU will be a simple RV32I microcontroller-class core with limited features and performance, and the only IO peripheral\nwill be a [UART](https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter) for communicating with the host. Over time\nwe will make this more capable. We will extend the CPU to eventually support RISC-V's RV32G profile, which includes support for integer\nmultiply/divide and floating point instructions. To improve performance we will add instruction pipelining and branch prediction,\nand caches once we have DRAM support. We will also be building out our peripherals to support audio/video output and\nnetworking, and the software to support this will be constructed in parallel as the hardware comes online.\n\nEventually we will end up with a simple desktop-class operating system with a graphical user interface that can run games and other\napplications we've written. We might eventually try to bring up Linux on the computer once we've implemented MMU support, but that\nis not a primary goal.\n\nAnd this is only the beginning!\n\n# Links\n\nPlease follow on Twitch, YouTube and Twitter to see when streams go live and when new videos are uploaded.\n\nThere is a Discord chat server if you have questions or just want to hang out and chat.\n\n- GitHub: https://github.com/pervognsen/bitwise\n- Forums: https://bitwise.handmade.network/forums\n- Discord chat server: https://discord.gg/7TSA6ZF\n- Twitch channel: https://twitch.tv/pervognsen\n- YouTube channel: https://youtube.com/pervognsen\n- Twitter: https://twitter.com/pervognsen\n"
        },
        {
          "name": "ion",
          "type": "tree",
          "content": null
        },
        {
          "name": "noir",
          "type": "tree",
          "content": null
        },
        {
          "name": "notes",
          "type": "tree",
          "content": null
        },
        {
          "name": "rattle",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}