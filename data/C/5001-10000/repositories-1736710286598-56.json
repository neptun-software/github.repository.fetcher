{
  "metadata": {
    "timestamp": 1736710286598,
    "page": 56,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nodemcu/nodemcu-firmware",
      "stars": 7714,
      "defaultBranch": "release",
      "files": [
        {
          "name": ".gdbinit",
          "type": "blob",
          "size": 0.8330078125,
          "content": "#\n# This is very much a work in progress to show how we can use macros to make the\n# GDB interface a lot more useable.  For example the next / step commands only\n# work if the stepper doesn't leave the current scope.  Beyond that you have a\n# single hardware breakpoint which can be used as an hb or a wa.  You have to\n# remember to delete the previous one, so the br macro does this for you.\n#\nfile app/.output/eagle/debug/image/eagle.app.v6.out\n#set remotedebug 1\nset remotelogfile gdb_rsp_logfile.txt\nset serial baud 115200\nset remote hardware-breakpoint-limit 1\nset remote hardware-watchpoint-limit 1\n#set debug xtensa 4\ntarget remote /dev/ttyUSB0\n\nset confirm off\nset print null-stop\ndefine br\n  d\n  hb $arg0\nend\n\ndefine upto\n  d\n  hb $arg0\n  c\nend\n\nset pagination off\nset history filename ~/.gdb_history\nset history save on\nset history size 1000\n\n"
        },
        {
          "name": ".gdbinitlua",
          "type": "blob",
          "size": 4.515625,
          "content": "\nset pagination off\nset print null-stop\n\ndefine prTS\n  set $o = &(((TString *)(($arg0).value))->tsv)\n  printf \"Common header: next = %p, marked = 0x%01x\\n\", $o->next, $o->marked\n  printf \"String: hash = 0x%08x, len = %u : %s\\n\", $o->hash, $o->len, (char *)($o+1)\nend\n\ndefine prTnodes\n  set $o = (Table *)($arg0)\n  set $n = 1<<($o->lsizenode)\n  set $i = 0\n  while $i < $n\n    set $nd = ($o->node) + $i\n    if $nd->i_key.nk.tt && $nd->i_val.tt\n      if $nd->i_key.nk.tt == 6\n        printf \"%4u: %s  %2i\\n\", $i, $nd->i_key.nk.tt , $nd->i_val.tt\n      else\n        printf \"%4u: %2i  %2i\\n\", $i, $nd->i_key.nk.tt , $nd->i_val.tt\n      end\n    end\n    set $i = $i +1\n  end\nend\n\ndefine prTarray\n  set $o = (Table *)($arg0)\n  set $n = $o->sizearray\n  set $i = 0\n  while $i < $n\n    set $nd = ($o->array) + $i\n    prTV $nd\n    set $i = $i +1\n  end\nend\n\ndefine prTV\n  if $arg0\n    set $type = ($arg0).tt\n    set $val  = ($arg0).value\n\n    if $type == 0\n      # NIL\n      printf \"Nil\\n\"\n    end\n    if $type == 1\n       # Boolean\n       printf \"Boolean: %u\\n\", $val.n\n    end\n    if $type == 2\n       # Light User Data\n       printf \"Light Udata: %p\\n\", $val.p\n    end\n    if $type == 3\n       # Number\n       printf \"Number: %u\\n\", $val.n\n    end\n    if $type == 4\n       # String\n       printf \"String: %s\\n\", (char *)($val.p)+16\n    end\n    if $type == 5\n      # Table\n      set $o = &($val->gc.h)\n      printf \"Common header: next = %p, marked = 0x%01x\\n\", $o->next, $o->marked\n      printf \"Nodes: %4i  %p\\n\", 2<<($o->lsizenode), $o->node\n      printf \"Arry:  %4i  %p\\n\", $o->sizearray, $o->array\n    end\n    if $type == 6\n      # Function\n      set $o = &($val->gc.cl.c)\n      printf \"Common header: next = %p, marked = 0x%01x\\n\", $o->next, $o->marked\n       if $o->isC == 0\n        set $o = &($val->gc.cl.l)\n        printf \"LClosure: nupvalues = %u, gclist = %p, env = %p, p = %p\\n\", \\\n          $o->nupvalues, $o->gclist, $o->env, $o->p\n      else\n        printf \"CClosure: nupvalues = %u, gclist = %p, env = %p, f = %p\\np\", \\\n          $o->nupvalues, $o->gclist, $o->env, $o->f\n      end\n    end\n    if $type == 7\n      # UserData\n      set $o = &($val->gc.u.uv)\n      printf \"Common header: next = %p, marked = 0x%01x\\n\", $o->next, $o->marked\n      printf \"UD = %p Userdata: metatable = \", ($o+1))\n      print ($o)->metatable\n    end\n    if $type == 8\n      # Thread\n    end\n   if $type == 21\n       # ROTable\n       printf \"ROTable: %p\\n\", $val.p\n    end\n    if $type == 38\n        # Light Function\n       printf \"Light Func: %p\\n\", $val.p\n    end\n  end\nend\n\ndefine prT\n print *(Table*)($arg0)\nend\n\ndefine prL\n  if L > 0\n    printf \" stack:   %u\\n\", L->top-L->base\n    printf \" hooking: %u, %u, %u, %u, %p\\n\",  L->hookmask, L->allowhook, L->basehookcount, L->hookcount, L->hook\n  end\nend\n\ndefine dumpstrt\n  set $st = $arg0\n  set $i = 0\n  while $i< $st->size\n    set $o = &(((TString *)($st->hash[$i]))->tsv)\n    while $o\n      if $o->next\n        printf \"Slot: %5i   %p  %p  %08x  %02x  %4u\", \\\n           $i, $o, $o->next, $o->hash, $o->marked, $o->len\n      else\n        printf \"Slot: %5i   %p              %08x  %02x  %4u\", \\\n           $i, $o, $o->hash, $o->marked, $o->len\n      end\n      if $o->marked & 0x80\n        printf \"* %s\\n\", *(char **)($o+1)\n      else\n        printf \"  %s\\n\", (char *)($o+1)\n      end\n      set $o = &(((TString *)($o->next))->tsv)\n    end\n    set $i = $i + 1\n  end\nend\n\ndefine dumpRAMstrt\n  dumpstrt &(L->l_G->strt)\nend\n\ndefine dumpROstrt\n  dumpstrt &(L->l_G->ROstrt)\nend\n\ndefine graylist\n  set $n = $arg0\n  while  $n\n    printf \"%p %2u %02X\\n\",$n, $n->gch.tt, $n->gch.marked\n    set $n=$n->gch.next\n  end\nend\n\ndefine prPC\n printf \"Excuting instruction %i: %08x\\n\", (pc - cl->p->code)+1-1, i\nend\n\n\ndefine where\n  set  $f=cl->p\n  printf \"<%s:%u,%u>,  opcode %u\\n\",\\\n    (char *)$f->source+17, $f->linedefined, $f->lastlinedefined, pc - $f->code\nend\n\ndefine callinfo\n  printf \"%p:  \", L->ci\n  print *L->ci\nend\n\ndefine luastack\n  set $i = 0\n  set $ci = L->base_ci\n  set $s = L->stack\n  set $last = L->stack_last - L->stack\n  printf \"stack = %p, last: %i, size: %i, \" , $s, $last, L->stacksize\n  if $last+6==L->stacksize\n    printf \"(OK)\\n\"\n  else\n    printf \"(MISMATCH)\\n\"\n  end\n   printf \" Ndx   top     base   func\\n\"\n  while $ci <= L->ci\n    printf \"%3u %6i %6i %6i\\n\", $i++, $ci->top-$s, $ci->base-$s, ($ci++)->func-$s\n  end\nend\n\ndefine stacklen\n  printf \"%i  top: %p, base: %p\\n\", \\\n    L->ci->top - L->base, L->ci->top, L->base\nend\n\ndefine stackcheck\n  set $ci = L->ci\n  printf \"Used: %i, Headroom: %i, Total: %i\\n\", \\\n    L->top-$ci->base-1, $ci->top-L->top+1, $ci->top-$ci->base\nend\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.421875,
          "content": "sdk/\ncache/\nuser_config.h\nserver-ca.crt\nsdkconfig\nsdkconfig.old*\nbuild/\ncomponents/*/.output/\ntools/toolchains\nextmods.ini\n.ccache\nbin\n\n.gdb_history\napp/lua/.std\napp/lua53/.std\nsdk/\nlocal/\nluac.cross\nluac.cross.int\nuz_unzip\nuz_zip\n\n#ignore Eclipse project files\n.cproject\n.project\n.settings/\n\n# ignore VS Code files\n.vscode/**\n# ignore VS files\n.vs/**\n\n# ignore IDEA files\n.idea\n*.iml\n\n#ignore temp file for build infos\nbuildinfo.h\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.3349609375,
          "content": "[submodule \"app/u8g2lib/u8g2\"]\n\tpath = app/u8g2lib/u8g2\n\turl = https://github.com/olikraus/U8g2_Arduino.git\n[submodule \"app/ucglib/ucg\"]\n        path = app/ucglib/ucg\n        url = https://github.com/olikraus/Ucglib_Arduino.git\n[submodule \"app/libc/c99-snprintf\"]\n\tpath = app/libc/c99-snprintf\n\turl = https://github.com/weiss/c99-snprintf.git\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.4267578125,
          "content": "# Read the Docs configuration file for MkDocs projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-20.04\n  tools:\n    python: \"3.7\"\n\nmkdocs:\n  configuration: mkdocs.yml\n\n# Optionally declare the Python requirements required to build your docs\npython:\n  install:\n  - requirements: docs/requirements.txt\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 10.095703125,
          "content": "# Contributing to NodeMCU\n\n:+1::tada: First off, thanks for taking the time to contribute! :tada::+1:\n\nThe following is a set of guidelines for contributing to NodeMCU on GitHub. These are just guidelines, not rules, use your best judgment and feel free to propose changes to this document in a pull request.\n\nIt is appreciated if you raise an issue _before_ you start changing NodeMCU, discussing the proposed change; emphasizing that you are proposing to develop the patch yourself, and outlining the strategy for implementation. This type of discussion is what we should be doing on the issues list and it is better to do this before or in parallel to developing the patch rather than having \"you should have done it this way\" type of feedback on the PR itself.\n\n### Table Of Contents\n* [General remarks](#general-remarks)\n* [Development environment setup](#development-environment-setup)\n* [Writing Documentation](#writing-documentation)\n* [Working with Git and GitHub](#working-with-git-and-github)\n  * [General flow](#general-flow)\n  * [Keeping your fork in sync](#keeping-your-fork-in-sync)\n  * [Commit messages](#commit-messages)\n* [For collaborators](#for-collaborators)\n  * [Handling releases](#handling-releases)\n\n## General remarks\nWe are a friendly and welcoming community and look forward to your contributions. Once your contribution is integrated into this repository we feel responsible for it. Therefore, be prepared for constructive feedback. Before we merge anything we need to ensure that it fits in and is consistent with the rest of NodeMCU.\nIf you made something really cool but won't spend the time to integrate it into this upstream project please still share it in your fork on GitHub. If you mention it in an issue we'll take a look at it anyway.\n\n## Development environment setup\nUse the platform and tools you feel most comfortable with. There are no constraints imposed by this project. You have (at least) two options to set up the toolchain to build the NodeMCU firmware:\n- [Full-fledged Linux environment](http://www.esp8266.com/wiki/doku.php?id=toolchain#how_to_setup_a_vm_to_host_your_toolchain), either physical or virtual.\n- [Docker image](https://hub.docker.com/r/marcelstoer/nodemcu-build/) which allows running the build inside the container as if you were running a build script on your local machine.\n\n## Writing Lua Code\nA great resource about writing Lua for NodeMCU can be found in [Lua Developer FAQ](https://nodemcu.readthedocs.io/en/latest/lua-developer-faq/) - make sure to read it! When you're writing your Lua code and it's not working as it should you can test it with `luacheck` tool that can help you find various types of bugs. To install it you have to install [luarocks](https://luarocks.org/) and use command `sudo luarocks install luacheck` to install the tool. Now you're ready to go! By using this command (assuming you're in `nodemcu-firmware` directory):\n\n`luacheck --config tools/luacheck_config.lua <your file to check>`\n\nyou can look for bugs and problems within the code!\n\n## Writing Documentation\nThe NodeMCU documentation is maintained within the same repository as the code. The primary reason is to keep the two in sync more easily. It's thus trivial for the NodeMCU team to verify that a PR includes the necessary documentation. Furthermore, the documentation is merged automatically with the code if it moves from branch X to Y.\n\nThe documentation consists of a collection of Markdown files (see note on Markdown syntax at end of chapter) stored in the [`/docs`](docs) directory. With every commit, a human readable and browsable version is automatically built with [Read the Docs](https://readthedocs.io/) (RTD). The public NodeMCU documentation can be found at [nodemcu.readthedocs.io](http://nodemcu.readthedocs.io/).\n\nThere are essentially only two things to keep in mind if you're contributing a PR:\n\n- If you add functions to or change functions of an *existing module* you should modify the module's `.md` file in [`/docs/en/modules`](docs/en/modules). Adhere to the existing documentation structure and keep functions in alphabetical order.\n- If you add a *new module* you should, in addition to the above, also add a reference for the new `.md` file to [`mkdocs.yml`](./mkdocs.yml) (lines 32+). Note that modules are ordered alphabetically here as well.\n\nIf you also want to verify that all is well with your Markdown files you can install Python-based [MkDocs](http://www.mkdocs.org/), which is used by RTD to build the static HTML files, and run `mkdocs serve` in the root of your NodeMCU firmware directory.\n\nA note on Markdown *syntax*. As MkDocs is Python-based it's no surprise it uses a [Python Markdown implementation](https://pythonhosted.org/Markdown/). The good news is that it sticks pretty closely to John Gruber's Markdown and also [supports tables and fenced code blocks](http://www.mkdocs.org/user-guide/writing-your-docs/#markdown-extensions) just like GitHub does.\n\nA collection of doc-writing hints and tips is maintained on the [wiki](https://github.com/nodemcu/nodemcu-firmware/wiki/Notes-about-writing-docs).\n\nIf you're interested in some NodeMCU history you're welcome to read [issue #774](https://github.com/nodemcu/nodemcu-firmware/issues/774)\n\n## Working with Git and GitHub\n\n*Pull requests for new features and fixes should be opened against the `dev` branch.*\n\nAvoid intermediate merge commits. [Rebase](https://www.atlassian.com/git/tutorials/merging-vs-rebasing) your feature branch onto `dev` to pull updates and verify your local changes against them before placing the pull request.\n\n### General flow\n1. [Fork](https://help.github.com/articles/fork-a-repo) the NodeMCU repo on GitHub.\n1. [Create a branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/#creating-a-branch) in your fork on GitHub **based on the `dev` branch**.\n1. Clone the fork on your machine with `git clone https://github.com/<your-account>/<nodemcu-fork>.git`\n1. `cd <nodemcu-fork>` then run `git remote add upstream https://github.com/nodemcu/nodemcu-firmware.git`\n1. `git checkout <branch-name>`\n1. Make changes to the code base and commit them using e.g. `git commit -a -m 'Look ma, I did it'`\n1. When you're done:\n 1. Think about [squashing (some of) your commits](http://www.andrewconnell.com/blog/squash-multiple-git-commits-into-one). There are [several ways](http://stackoverflow.com/a/5201642/131929) to do this. There's no need to squash everything into a single commit as GitHub offers to do this when we merge your changes. However, you might want to trim your commit history to relevant chunks.\n 1. Bring your fork up-to-date with the NodeMCU upstream repo ([see below](#keeping-your-fork-in-sync)). Then rebase your branch on `dev` running `git rebase dev`.\n1. `git push`\n1. [Create a pull request](https://help.github.com/articles/creating-a-pull-request/) (PR) on GitHub.\n\nThis is just one way of doing things. If you're proficient in Git matters you're free to choose your own. If you want to read more then the [GitHub chapter in the Git book](http://git-scm.com/book/en/v2/GitHub-Contributing-to-a-Project#The-GitHub-Flow) is a way to start. [GitHub's own documentation](https://help.github.com/categories/collaborating-with-issues-and-pull-requests/) contains a wealth of information as well.\n\nAs a Windows or Mac user you could also resort to [GitHub Desktop](https://desktop.github.com/). It's a mature GUI application that supports most of the tasks outlined above.\n\n### Keeping your fork in sync\nYou need to sync your fork with the NodeMCU upstream repository from time to time, latest before you rebase (see flow above).\n\n1. `git fetch upstream`\n1. `git checkout dev` but you may do this for `release` as well\n1. `git merge upstream/dev`\n\n### Commit messages\n\nFrom: [http://git-scm.com/book/ch5-2.html](http://git-scm.com/book/ch5-2.html)\n<pre>\nShort (50 chars or less) summary of changes\n\nMore detailed explanatory text, if necessary.  Wrap it to about 72\ncharacters or so.  In some contexts, the first line is treated as the\nsubject of an email and the rest of the text as the body.  The blank\nline separating the summary from the body is critical (unless you omit\nthe body entirely); tools like rebase can get confused if you run the\ntwo together.\n\nFurther paragraphs come after blank lines.\n\n - Bullet points are okay, too\n\n - Typically a hyphen or asterisk is used for the bullet, preceded by a\n   single space, with blank lines in between, but conventions vary here\n</pre>\n\nDon't forget to [reference affected issues](https://help.github.com/articles/closing-issues-via-commit-messages/) in the commit message to have them closed automatically on GitHub.\n\n[Amend](https://help.github.com/articles/changing-a-commit-message/) your commit messages if necessary to make sure what the world sees on GitHub is as expressive and meaningful as possible.\n\n## For collaborators\n\n### Handling releases\n- Create a [milestone](https://github.com/nodemcu/nodemcu-firmware/milestones) right after you cut a new release. Give it a meaningful name if you already have an idea what the scope of the upcoming release is going to be. Set the due date to ~2 months in the future.\n- Add this milestone to every PR before you merge it. Also, add the milestone to PRs you want to see land in this milestone.\n- Add notes to the description of the milestone in the course of the ~2 months it lives.\n- Be careful and reluctant to merge PRs once we're past the 6-weeks mark of a milestone. Ideally, we don't merge anything in the last 2 weeks.\n- Cutting a release\n    - Create a PR for the `release` branch for collaborators to approve.\n    - Once approved merge it. :exclamation::boom::exclamation: Make sure you do NOT \"squash and merge\" but make a regular merge commit!\n    - Fetch the changes into your local clone and create an annotated tag like so: `git tag -a <SDK-version>-release_<yyyyMMdd> -m \"\"`, `git push --tags`\n     - Create a new [release](https://github.com/nodemcu/nodemcu-firmware/releases) based on the tag you just pushed. The version name is the same as the tag name.\n     - Write release notes. Mention breaking changes explicitly. Since every PR that went into this release is linked to from the milestone it should be fairly easy to include important changes in the release notes.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0615234375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 zeroday nodemcu.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 15.2724609375,
          "content": "#  copyright (c) 2010 Espressif System\n#\n.NOTPARALLEL:\n\nTOP_DIR:=$(abspath $(dir $(lastword $(MAKEFILE_LIST))))\n\n# SDK base version, as released by Espressif depends on the RELEASE flag\n#\n# RELEASE = lastest pulls the latest V3.0.0 branch version as at the issue of this make\n# otherwise it pulls the labelled version in the SDK version's release directory\n#\nifeq (\"$(RELEASE)\",\"latest-3.0\")\n  SDK_VER        := 3.0.0\n  SDK_FILE_SHA1  := NA\n  SDK_ZIP_ROOT   := ESP8266_NONOS_SDK-release-v$(SDK_VER)\n  SDK_FILE_VER   := release/v$(SDK_VER)\nelse ifeq (\"$(RELEASE)\",\"master\")\n  SDK_VER        := master\n  SDK_FILE_SHA1  := NA\n  SDK_ZIP_ROOT   := ESP8266_NONOS_SDK-$(SDK_VER)\n  SDK_FILE_VER   := $(SDK_VER)\nelse\n# SDK_VER        := 3.0\n# SDK_FILE_VER   := v$(SDK_VER)\n  SDK_FILE_VER   := e4434aa730e78c63040ace360493aef420ec267c\n  SDK_VER        := 3.0-e4434aa\n  SDK_FILE_SHA1  := ac6528a6a206d3d4c220e4035ced423eb314cfbf\n  SDK_ZIP_ROOT   := ESP8266_NONOS_SDK-$(SDK_FILE_VER)\nendif\nSDK_REL_DIR      := sdk/esp_iot_sdk_v$(SDK_VER)\nSDK_DIR          := $(TOP_DIR)/$(SDK_REL_DIR)\nAPP_DIR          := $(TOP_DIR)/app\n\nESPTOOL_VER := 2.6\n\n# Ensure that the Espresif SDK is search before application paths and also prevent\n# the SDK's c_types.h from being included from anywhere, by predefining its include-guard.\n\nCCFLAGS :=  $(CCFLAGS) -I $(PDIR)sdk-overrides/include -I $(SDK_DIR)/include -D_C_TYPES_H_\nLDFLAGS := -L$(SDK_DIR)/lib -L$(SDK_DIR)/ld $(LDFLAGS)\n\nifdef DEBUG\n  CCFLAGS += -ggdb -O0\n  LDFLAGS += -ggdb\nelse\n  CCFLAGS += -O2\nendif\n\n\n# Handling of V=1/VERBOSE=1 flag\n#\n# if V=1, $(summary) does nothing\n# if V is unset or not 1, $(summary) echoes a summary\nVERBOSE ?=\nV ?= $(VERBOSE)\nifeq (\"$(V)\",\"1\")\n  export summary := @true\nelse\n  export summary := @echo\n  # disable echoing of commands, directory names\n  MAKEFLAGS += --silent -w\nendif  # $(V)==1\n\nifndef BAUDRATE\n  BAUDRATE=115200\nendif\n\n#############################################################\n# Select compile\n#\n#  ** HEALTH WARNING ** This section is largely legacy directives left over from\n#  an Espressif template.  As far as I (TerrryE) know, we've only used the Linux\n#  Path. I have successfully build AMD and Intel (both x86, AMD64) and RPi ARM6\n#  all under Ubuntu.  Our docker container runs on Windows in an Ubuntu VM.\n#  Johny Mattson maintains a prebuild AMD64 xtensa cross-compile gcc v4.8.5\n#  toolchain which is compatible with the non-OS SDK and can be used on any recent\n#  Ubuntu version including the Docker and Travis build environments.\n#\n#  You have the option to build your own toolchain and specify a TOOLCHAIN_ROOT\n#  environment variable (see https://github.com/pfalcon/esp-open-sdk).  If your\n#  architecture is compatable then you can omit this variable and the make will\n#  download and use this prebuilt toolchain.\n#\n#  If any developers wish to develop, test and support alternative environments\n#  then please raise a GitHub issue on this work.\n#\n\nifndef $(OS)\n  # Assume Windows if MAKE_HOST contains \"indows\" and Linux otherwise\n  ifneq (,$(findstring indows,$(MAKE_HOST)))\n    OS := windows\n  else\n    OS := linux\n  endif\nendif\n\nifneq (,$(findstring indows,$(OS)))\n  #------------ BEGIN UNTESTED ------------ We are not under Linux, e.g.under windows.\n  ifeq ($(XTENSA_CORE),lx106)\n    # It is xcc\n    AR = xt-ar\n    CC = xt-xcc\n    CXX = xt-xcc\n    NM = xt-nm\n    CPP = xt-cpp\n    OBJCOPY = xt-objcopy\n    #MAKE = xt-make\n    CCFLAGS += --rename-section .text=.irom0.text --rename-section .literal=.irom0.literal\n  else\n    # It is gcc, may be cygwin\n    # Can we use -fdata-sections?\n    CCFLAGS += -ffunction-sections -fno-jump-tables -fdata-sections -fpack-struct=4\n    AR = xtensa-lx106-elf-ar\n    CC = xtensa-lx106-elf-gcc\n    CXX = xtensa-lx106-elf-g++\n    NM = xtensa-lx106-elf-nm\n    CPP = xtensa-lx106-elf-cpp\n    OBJCOPY = xtensa-lx106-elf-objcopy\n  endif\n  FIRMWAREDIR = ..\\\\bin\\\\\n  ifndef COMPORT\n    ESPPORT = com1\n  else\n    ESPPORT = $(COMPORT)\n  endif\n  ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)\n# ->AMD64\n  endif\n  ifeq ($(PROCESSOR_ARCHITECTURE),x86)\n# ->IA32\n  endif\n  #---------------- END UNTESTED ---------------- We are under windows.\nelse\n  # We are under other system, may be Linux. Assume using gcc.\n\n  UNAME_S := $(shell uname -s)\n  UNAME_P := $(shell uname -p)\n  ifeq ($(OS),linux)\n    ifndef TOOLCHAIN_ROOT\n      TOOLCHAIN_VERSION = 20190731.0\n      GCCTOOLCHAIN      = linux-x86_64-$(TOOLCHAIN_VERSION)\n      TOOLCHAIN_ROOT    = $(TOP_DIR)/tools/toolchains/esp8266-$(GCCTOOLCHAIN)\n      GITHUB_TOOLCHAIN  = https://github.com/jmattsson/esp-toolchains\n      export PATH:=$(PATH):$(TOOLCHAIN_ROOT)/bin\n    endif\n  endif\n\n  ifndef COMPORT\n    ESPPORT = /dev/ttyUSB0\n  else\n    ESPPORT = $(COMPORT)\n  endif\n\n  CCFLAGS += -ffunction-sections -fno-jump-tables -fdata-sections\n  AR      = xtensa-lx106-elf-ar\n  CC      = $(WRAPCC) xtensa-lx106-elf-gcc\n  CXX     = $(WRAPCC) xtensa-lx106-elf-g++\n  NM      = xtensa-lx106-elf-nm\n  CPP     = $(WRAPCC) xtensa-lx106-elf-gcc -E\n  OBJCOPY = xtensa-lx106-elf-objcopy\n  FIRMWAREDIR = ../bin/\n  WGET = wget --tries=10 --timeout=15 --waitretry=30 --read-timeout=20 --retry-connrefused\nendif\n\nGITHUB_SDK       = https://github.com/espressif/ESP8266_NONOS_SDK\nGITHUB_ESPTOOL   = https://github.com/espressif/esptool\n\nESPTOOL ?= $(TOP_DIR)/tools/toolchains/esptool.py\n\nSUBDIRS ?= $(patsubst %/,%,$(dir $(filter-out tools/Makefile,$(wildcard */Makefile))))\n\nODIR    := .output\n\nifdef TARGET\nCSRCS   ?= $(wildcard *.c)\nCXXSRCS ?= $(wildcard *.cpp)\nASRCs   ?= $(wildcard *.s)\nASRCS   ?= $(wildcard *.S)\n\nOBJODIR := $(ODIR)/$(TARGET)/$(FLAVOR)/obj\n\nOBJS := $(CSRCS:%.c=$(OBJODIR)/%.o) \\\n        $(CXXSRCS:%.cpp=$(OBJODIR)/%.o) \\\n        $(ASRCs:%.s=$(OBJODIR)/%.o) \\\n        $(ASRCS:%.S=$(OBJODIR)/%.o)\n\nDEPS := $(CSRCS:%.c=$(OBJODIR)/%.d) \\\n        $(CXXSCRS:%.cpp=$(OBJODIR)/%.d) \\\n        $(ASRCs:%.s=$(OBJODIR)/%.d) \\\n        $(ASRCS:%.S=$(OBJODIR)/%.d)\n\nLIBODIR := $(ODIR)/$(TARGET)/$(FLAVOR)/lib\nOLIBS := $(GEN_LIBS:%=$(LIBODIR)/%)\n\nIMAGEODIR := $(ODIR)/$(TARGET)/$(FLAVOR)/image\nOIMAGES := $(GEN_IMAGES:%=$(IMAGEODIR)/%)\n\nBINODIR := $(ODIR)/$(TARGET)/$(FLAVOR)/bin\nOBINS := $(GEN_BINS:%=$(BINODIR)/%)\n\nifndef PDIR\n  ifneq ($(wildcard $(TOP_DIR)/local/fs/*),)\n    SPECIAL_MKTARGETS += spiffs-image\n  else\n    SPECIAL_MKTARGETS += spiffs-image-remove\n  endif\nendif\nendif   # TARGET\n#\n# Note:\n# https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html\n# If you add global optimize options then they will override \"-Os\" defined above.\n# Note that \"-Os\" should NOT be used to reduce code size because of the runtime\n# impact of the extra non-aligned exception burdon.\n#\nCCFLAGS += \t\t\t\\\n\t-g\t\t\t\\\n\t-Wpointer-arith\t\t\\\n\t-Wundef\t\t\t\\\n\t-Werror\t\t\t\\\n\t-Wl,-EL\t\t\t\\\n\t-fno-inline-functions\t\\\n\t-nostdlib       \\\n\t-mlongcalls\t\\\n\t-mtext-section-literals \\\n#\t-Wall\n\nCFLAGS = $(CCFLAGS) $(DEFINES) $(EXTRA_CCFLAGS) $(STD_CFLAGS) $(INCLUDES)\nDFLAGS = $(CCFLAGS) $(DDEFINES) $(EXTRA_CCFLAGS) $(STD_CFLAGS) $(INCLUDES)\n\n\n#############################################################\n# Functions\n#\n\nifdef TARGET\n\ndefine ShortcutRule\n$(1): .subdirs $(2)/$(1)\nendef\n\ndefine MakeLibrary\nDEP_LIBS_$(1) = $$(foreach lib,$$(filter %.a,$$(COMPONENTS_$(1))),$$(dir $$(lib))$$(LIBODIR)/$$(notdir $$(lib)))\nDEP_OBJS_$(1) = $$(foreach obj,$$(filter %.o,$$(COMPONENTS_$(1))),$$(dir $$(obj))$$(OBJODIR)/$$(notdir $$(obj)))\n$$(LIBODIR)/$(1).a: $$(OBJS) $$(DEP_OBJS_$(1)) $$(DEP_LIBS_$(1)) $$(DEPENDS_$(1))\n\t@mkdir -p $$(LIBODIR)\n\t$$(if $$(filter %.a,$$?),mkdir -p $$(EXTRACT_DIR)_$(1))\n\t$$(if $$(filter %.a,$$?),cd $$(EXTRACT_DIR)_$(1); $$(foreach lib,$$(filter %.a,$$?),$$(AR) xo $$(UP_EXTRACT_DIR)/$$(lib);))\n\t$(summary) AR $(patsubst $(TOP_DIR)/%,%,$(CURDIR))/$<\n\t$$(AR) ru $$@ $$(filter %.o,$$?) $$(if $$(filter %.a,$$?),$$(EXTRACT_DIR)_$(1)/*.o)\n\t$$(if $$(filter %.a,$$?),$$(RM) -r $$(EXTRACT_DIR)_$(1))\nendef\n\ndefine MakeImage\nDEP_LIBS_$(1) = $$(foreach lib,$$(filter %.a,$$(COMPONENTS_$(1))),$$(dir $$(lib))$$(LIBODIR)/$$(notdir $$(lib)))\nDEP_OBJS_$(1) = $$(foreach obj,$$(filter %.o,$$(COMPONENTS_$(1))),$$(dir $$(obj))$$(OBJODIR)/$$(notdir $$(obj)))\n$$(IMAGEODIR)/$(1).out: $$(OBJS) $$(DEP_OBJS_$(1)) $$(DEP_LIBS_$(1)) $$(DEPENDS_$(1))\n\t@mkdir -p $$(IMAGEODIR)\n\t$(summary) LD $(patsubst $(TOP_DIR)/%,%,$(CURDIR))/$$@\n\t$$(CC) $$(LDFLAGS) $$(if $$(LINKFLAGS_$(1)),$$(LINKFLAGS_$(1)),$$(LINKFLAGS_DEFAULT) $$(OBJS) $$(DEP_OBJS_$(1)) $$(DEP_LIBS_$(1))) -o $$@\nendef\n\n$(BINODIR)/%.bin: $(IMAGEODIR)/%.out\n\t@mkdir -p $(BINODIR)\n\t$(summary) NM $(patsubst $(TOP_DIR)/%,%,$(CURDIR))/$@\n\t@$(NM) $< | grep -w U && { echo \"Firmware has undefined (but unused) symbols!\"; exit 1; } || true\n\t$(summary) ESPTOOL $(patsubst $(TOP_DIR)/%,%,$(CURDIR))/$< $(FIRMWAREDIR)\n\t$(ESPTOOL) elf2image --flash_mode dio --flash_freq 40m $< -o $(FIRMWAREDIR)\n\nendif # TARGET\n#############################################################\n# Rules base\n# Should be done in top-level makefile only\n#\n\nifndef TARGET\nall: toolchain sdk_pruned pre_build buildinfo .subdirs\nelse\nall: .subdirs $(OBJS) $(OLIBS) $(OIMAGES) $(OBINS) $(SPECIAL_MKTARGETS)\nendif\n\n.PHONY: sdk_extracted\n.PHONY: sdk_pruned\n.PHONY: toolchain\n\nsdk_extracted: $(TOP_DIR)/sdk/.extracted-$(SDK_VER)\nsdk_pruned: sdk_extracted toolchain $(TOP_DIR)/sdk/.pruned-$(SDK_VER)\n\nifdef GITHUB_TOOLCHAIN\n  TOOLCHAIN_ROOT := $(TOP_DIR)/tools/toolchains/esp8266-linux-x86_64-$(TOOLCHAIN_VERSION)\n\ntoolchain: $(TOOLCHAIN_ROOT)/bin $(ESPTOOL)\n\n$(TOOLCHAIN_ROOT)/bin: $(TOP_DIR)/cache/toolchain-esp8266-$(GCCTOOLCHAIN).tar.xz\n\tmkdir -p $(TOP_DIR)/tools/toolchains/\n\t$(summary) EXTRACT $(patsubst $(TOP_DIR)/%,%,$<)\n\ttar -xJf $< -C $(TOP_DIR)/tools/toolchains/\n\ttouch $@\n\n$(TOP_DIR)/cache/toolchain-esp8266-$(GCCTOOLCHAIN).tar.xz:\n\tmkdir -p $(TOP_DIR)/cache\n\t$(summary) WGET $(patsubst $(TOP_DIR)/%,%,$@)\n\t$(WGET) $(GITHUB_TOOLCHAIN)/releases/download/$(GCCTOOLCHAIN)/toolchain-esp8266-$(GCCTOOLCHAIN).tar.xz -O $@ \\\n\t|| { rm -f \"$@\"; exit 1; }\nelse\ntoolchain: $(ESPTOOL)\nendif\n\n$(ESPTOOL): $(TOP_DIR)/cache/esptool/v$(ESPTOOL_VER).tar.gz\n\tmkdir -p $(TOP_DIR)/tools/toolchains/\n\ttar -C $(TOP_DIR)/tools/toolchains/ -xzf $< --strip-components=1 esptool-$(ESPTOOL_VER)/esptool.py\n\tchmod +x $@\n\ttouch $@\n\n$(TOP_DIR)/cache/esptool/v$(ESPTOOL_VER).tar.gz:\n\tmkdir -p $(TOP_DIR)/cache/esptool/\n\t$(WGET) $(GITHUB_ESPTOOL)/archive/v$(ESPTOOL_VER).tar.gz -O $@ || { rm -f \"$@\"; exit 1; }\n\n$(TOP_DIR)/sdk/.extracted-$(SDK_VER): $(TOP_DIR)/cache/$(SDK_FILE_VER).zip\n\tmkdir -p \"$(dir $@)\"\n\t$(summary) UNZIP $(patsubst $(TOP_DIR)/%,%,$<)\n\t(cd \"$(dir $@)\" && \\\n\t rm -fr esp_iot_sdk_v$(SDK_VER) ESP8266_NONOS_SDK-* && \\\n\t unzip $(TOP_DIR)/cache/$(SDK_FILE_VER).zip \\\n\t       '*/lib/*' \\\n\t       '*/ld/*.v6.ld' \\\n\t       '*/include/*' \\\n\t       '*/bin/esp_init_data_default_v05.bin' \\\n\t)\n\tmv $(dir $@)/$(SDK_ZIP_ROOT) $(dir $@)/esp_iot_sdk_v$(SDK_VER)\n\ttouch $@\n\n$(TOP_DIR)/sdk/.pruned-$(SDK_VER):\n\trm -f $(SDK_DIR)/lib/liblwip.a $(SDK_DIR)/lib/libssl.a $(SDK_DIR)/lib/libmbedtls.a\n\t$(summary) PRUNE libmain.a libc.a\n\techo \"$(PATH)\"\n\t$(AR) d $(SDK_DIR)/lib/libmain.a time.o\n\t$(AR) d $(SDK_DIR)/lib/libc.a lib_a-time.o\n\ttouch $@\n\n$(TOP_DIR)/cache/$(SDK_FILE_VER).zip:\n\tmkdir -p \"$(dir $@)\"\n\t$(summary) WGET $(patsubst $(TOP_DIR)/%,%,$@)\n\t$(WGET) $(GITHUB_SDK)/archive/$(SDK_FILE_VER).zip -O $@ || { rm -f \"$@\"; exit 1; }\n\tif test \"$(SDK_FILE_SHA1)\" != \"NA\"; then echo \"$(SDK_FILE_SHA1)  $@\" | sha1sum -c - || { rm -f \"$@\"; exit 1; }; fi\n\nclean:\n\t$(foreach d, $(SUBDIRS), $(MAKE) -C $(d) clean;)\n\t$(RM) -r $(ODIR)/$(TARGET)/$(FLAVOR)\n\t$(RM) -r \"$(TOP_DIR)/sdk\"\n\nclobber: $(SPECIAL_CLOBBER)\n\t$(foreach d, $(SUBDIRS), $(MAKE) -C $(d) clobber;)\n\t$(RM) -r $(ODIR)\n\nflash:\n\t@echo \"use one of the following targets to flash the firmware\"\n\t@echo \"  make flash512k     - for ESP with 512kB flash size\"\n\t@echo \"  make flash1m-dout  - for ESP with   1MB flash size and flash mode = dout (Sonoff, ESP8285)\"\n\t@echo \"  make flash4m       - for ESP with   4MB flash size\"\n\nflash512k:\n\t$(MAKE) -e FLASHOPTIONS=\"-fm qio -fs  4m -ff 40m\" flashinternal\n\nflash4m:\n\t$(MAKE) -e FLASHOPTIONS=\"-fm dio -fs 32m -ff 40m\" flashinternal\n\nflash1m-dout:\n\t$(MAKE) -e FLASHOPTIONS=\"-fm dout -fs 8m -ff 40m\" flashinternal\n\n\nflashinternal:\nifndef PDIR\n\t$(MAKE) -C $(APP_DIR) flashinternal\nelse\n\t$(ESPTOOL) --port $(ESPPORT) --baud $(BAUDRATE) write_flash $(FLASHOPTIONS) 0x00000 $(FIRMWAREDIR)0x00000.bin 0x10000 $(FIRMWAREDIR)0x10000.bin\nendif\n\n.subdirs:\n\t@set -e; $(foreach d, $(SUBDIRS), $(MAKE) -C $(d);)\n\nifneq ($(MAKECMDGOALS),clean)\n  ifneq ($(MAKECMDGOALS),clobber)\n    ifdef DEPS\n      sinclude $(DEPS)\n    endif\n  endif\nendif\n\n.PHONY: spiffs-image-remove\n\nspiffs-image-remove:\n\t$(MAKE) -C tools remove-image spiffsimg/spiffsimg\n\n.PHONY: spiffs-image\n\nspiffs-image: bin/0x10000.bin\n\t$(MAKE) -C tools\n############ Note: this target needs moving into app/modules make ############\n.PHONY: pre_build\n\nifneq ($(wildcard $(TOP_DIR)/server-ca.crt),)\npre_build: $(APP_DIR)/modules/server-ca.crt.h\n\n$(APP_DIR)/modules/server-ca.crt.h: $(TOP_DIR)/server-ca.crt\n\t$(summary) MKCERT $(patsubst $(TOP_DIR)/%,%,$<)\n\tpython $(TOP_DIR)/tools/make_server_cert.py $(TOP_DIR)/server-ca.crt > $(APP_DIR)/modules/server-ca.crt.h\n\nDEFINES += -DHAVE_SSL_SERVER_CRT=\\\"server-ca.crt.h\\\"\nelse\npre_build:\n\t@-rm -f $(APP_DIR)/modules/server-ca.crt.h\nendif\n\n.PHONY: buildinfo\n\nbuildinfo:\n\ttools/update_buildinfo.sh\n\nifdef TARGET\n$(OBJODIR)/%.o: %.c\n\t@mkdir -p $(dir $@);\n\t$(summary) CC $(patsubst $(TOP_DIR)/%,%,$(CURDIR))/$<\n\t$(CC) $(if $(findstring $<,$(DSRCS)),$(DFLAGS),$(CFLAGS)) $(COPTS_$(*F)) -o $@ -c $<\n\n$(OBJODIR)/%.d: %.c\n\t@mkdir -p $(dir $@);\n\t$(summary) DEPEND: CC $(patsubst $(TOP_DIR)/%,%,$(CURDIR))/$<\n\t@set -e; rm -f $@; \\\n\t$(CC) -M $(CFLAGS) $< > $@.$$$$; \\\n\tsed 's,\\($*\\.o\\)[ :]*,$(OBJODIR)/\\1 $@ : ,g' < $@.$$$$ > $@; \\\n\trm -f $@.$$$$\n\n$(OBJODIR)/%.o: %.cpp\n\t@mkdir -p $(OBJODIR);\n\t$(summary) CXX $(patsubst $(TOP_DIR)/%,%,$(CURDIR))/$<\n\t$(CXX) $(if $(findstring $<,$(DSRCS)),$(DFLAGS),$(CFLAGS)) $(COPTS_$(*F)) -o $@ -c $<\n\n$(OBJODIR)/%.d: %.cpp\n\t@mkdir -p $(OBJODIR);\n\t$(summary) DEPEND: CXX $(patsubst $(TOP_DIR)/%,%,$(CURDIR))/$<\n\t@set -e; rm -f $@; \\\n\tsed 's,\\($*\\.o\\)[ :]*,$(OBJODIR)/\\1 $@ : ,g' < $@.$$$$ > $@; \\\n\trm -f $@.$$$$\n\n$(OBJODIR)/%.o: %.s\n\t@mkdir -p $(dir $@);\n\t$(summary) CC $(patsubst $(TOP_DIR)/%,%,$(CURDIR))/$<\n\t$(CC) $(CFLAGS) -o $@ -c $<\n\n$(OBJODIR)/%.d: %.s\n\t@mkdir -p $(dir $@); \\\n\tset -e; rm -f $@; \\\n\t$(CC) -M $(CFLAGS) $< > $@.$$$$; \\\n\tsed 's,\\($*\\.o\\)[ :]*,$(OBJODIR)/\\1 $@ : ,g' < $@.$$$$ > $@; \\\n\trm -f $@.$$$$\n\n$(OBJODIR)/%.o: %.S\n\t@mkdir -p $(dir $@);\n\t$(summary) CC $(patsubst $(TOP_DIR)/%,%,$(CURDIR))/$<\n\t$(CC) $(CFLAGS) -D__ASSEMBLER__ -o $@ -c $<\n\n$(OBJODIR)/%.d: %.S\n\t@mkdir -p $(dir $@); \\\n\tset -e; rm -f $@; \\\n\t$(CC) -M $(CFLAGS) $< > $@.$$$$; \\\n\tsed 's,\\($*\\.o\\)[ :]*,$(OBJODIR)/\\1 $@ : ,g' < $@.$$$$ > $@; \\\n\trm -f $@.$$$$\n\n$(foreach lib,$(GEN_LIBS),$(eval $(call ShortcutRule,$(lib),$(LIBODIR))))\n\n$(foreach image,$(GEN_IMAGES),$(eval $(call ShortcutRule,$(image),$(IMAGEODIR))))\n\n$(foreach bin,$(GEN_BINS),$(eval $(call ShortcutRule,$(bin),$(BINODIR))))\n\n$(foreach lib,$(GEN_LIBS),$(eval $(call MakeLibrary,$(basename $(lib)))))\n\n$(foreach image,$(GEN_IMAGES),$(eval $(call MakeImage,$(basename $(image)))))\n\nendif # TARGET\n#############################################################\n# Recursion Magic - Don't touch this!!\n#\n# Each subtree potentially has an include directory\n#   corresponding to the common APIs applicable to modules\n#   rooted at that subtree. Accordingly, the INCLUDE PATH\n#   of a module can only contain the include directories up\n#   its parent path, and not its siblings\n#\n# Required for each makefile to inherit from the parent\n#\n\nPDIR := ../$(PDIR)\nsinclude $(PDIR)Makefile\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.064453125,
          "content": "# NodeMCU 3.0.0\n> Lua-based firmware for ESP8266 WiFi SOC\n\n[![Join the chat at https://gitter.im/nodemcu/nodemcu-firmware](https://img.shields.io/gitter/room/badges/shields.svg)](https://gitter.im/nodemcu/nodemcu-firmware?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![CI](https://github.com/nodemcu/nodemcu-firmware/actions/workflows/build.yml/badge.svg)](https://github.com/nodemcu/nodemcu-firmware/actions/workflows/build.yml)\n[![Documentation Status](https://img.shields.io/badge/docs-release-yellow.svg?style=flat)](http://nodemcu.readthedocs.io/en/release/)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat)](#license)\n\nNodeMCU is an open source [Lua](https://www.lua.org/) based firmware for the [ESP8266 WiFi SOC from Espressif](https://www.espressif.com/en/products/socs/esp8266) and uses an on-module flash-based [SPIFFS](https://github.com/pellepl/spiffs) file system. NodeMCU is implemented in C and is layered on the [Espressif NON-OS SDK](https://github.com/espressif/ESP8266_NONOS_SDK).\n\nThe firmware was initially developed as is a companion project to the popular ESP8266-based [NodeMCU development modules]((https://github.com/nodemcu/nodemcu-devkit-v1.0)), but the project is now community-supported, and the firmware can now be run on _any_ ESP module.\n\n## Summary\n\n- Easy to program wireless node and/or access point\n- Based on Lua 5.1.4 or Lua 5.3 but without `debug`, `io`, `os` and (most of the) `math` modules\n- Asynchronous event-driven programming model\n- More than **70 built-in C modules** and **close to 20 Lua modules**\n- Firmware available with or without floating point support (integer-only uses less memory)\n- Up-to-date documentation at [https://nodemcu.readthedocs.io](https://nodemcu.readthedocs.io)\n\n### LFS support\n\nIn July 2018 support for a Lua Flash Store (LFS) was introduced. LFS  allows Lua code and its associated constant data to be executed directly out of flash-memory; just as the firmware itself is executed. This now enables NodeMCU developers to create **Lua applications with up to 256Kb** Lua code and read-only constants executing out of flash. All of the RAM is available for read-write data!\n\n## Programming Model\n\nThe NodeMCU programming model is similar to that of [Node.js](https://en.wikipedia.org/wiki/Node.js), only in Lua. It is asynchronous and event-driven. Many functions, therefore, have parameters for callback functions. To give you an idea what a NodeMCU program looks like study the short snippets below. For more extensive examples have a look at the [`/lua_examples`](lua_examples) folder in the repository on GitHub.\n\n```lua\n-- a simple HTTP server\nsrv = net.createServer(net.TCP)\nsrv:listen(80, function(conn)\n\tconn:on(\"receive\", function(sck, payload)\n\t\tprint(payload)\n\t\tsck:send(\"HTTP/1.0 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<h1> Hello, NodeMCU.</h1>\")\n\tend)\n\tconn:on(\"sent\", function(sck) sck:close() end)\nend)\n```\n```lua\n-- connect to WiFi access point\nwifi.setmode(wifi.STATION)\nwifi.sta.config{ssid=\"SSID\", pwd=\"password\"}\n```\n\n## Documentation\n\nThe entire [NodeMCU documentation](https://nodemcu.readthedocs.io) is maintained right in this repository at [/docs](docs). The fact that the API documentation is maintained in the same repository as the code that *provides* the API ensures consistency between the two. With every commit the documentation is rebuilt by Read the Docs and thus transformed from terse Markdown into a nicely browsable HTML site at [https://nodemcu.readthedocs.io](https://nodemcu.readthedocs.io).\n\n\nPages:\n\n- How to [build the firmware](https://nodemcu.readthedocs.io/en/release/build/)\n- How to [flash the firmware](https://nodemcu.readthedocs.io/en/release/flash/)\n- How to [upload code and NodeMCU IDEs](https://nodemcu.readthedocs.io/en/release/upload/)\n- API documentation for every module\n\n\n## Releases\n\nDue to the ever-growing number of modules available within NodeMCU, pre-built binaries are no longer made available. Use the automated [custom firmware build service](http://nodemcu-build.com/) to get the specific firmware configuration you need, or consult the [documentation](http://nodemcu.readthedocs.io/en/release/build/) for other options to build your own firmware.\n\nThis project uses two main branches, `release` and `dev`. `dev` is actively worked on and it's also where PRs should be created against. `release` thus can be considered \"stable\" even though there are no automated regression tests. The goal is to merge back to `release` roughly every 2 months. Depending on the current \"heat\" (issues, PRs) we accept changes to `dev` for 5-6 weeks and then hold back for 2-3 weeks before the next snap is completed.\n\nA new tag is created every time the `dev` branch is merged back to `release`. They are listed in this repo's [releases](https://github.com/nodemcu/nodemcu-firmware/releases).\n\nTag names follow the `<SDK-version>-release_yyyymmdd` pattern.\n\n## Support\n\nSee [https://nodemcu.readthedocs.io/en/release/support/](https://nodemcu.readthedocs.io/en/release/support/).\n\n## License\n\n[MIT](/LICENSE) © [zeroday](https://github.com/NodeMCU)/[nodemcu.com](http://nodemcu.com/index_en.html)\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ld",
          "type": "tree",
          "content": null
        },
        {
          "name": "local",
          "type": "tree",
          "content": null
        },
        {
          "name": "lua_examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lua_modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 5.2060546875,
          "content": "site_name: NodeMCU Documentation\nsite_description: Description of the NodeMCU documentation\nrepo_url: https://github.com/nodemcu/nodemcu-firmware/\n\ntheme:\n  name: \"readthedocs\"\n  hljs_languages:\n    - lua\nstrict: false #Allows to build and test documentation in local environment where some links are unreachable\n\n# Uncomment the line below to build docs to be used locally; site/index.html\n# will then be the root of a locally-linked documentation tree.\n# use_directory_urls: false\n\nmarkdown_extensions:\n  #http://pythonhosted.org/Markdown/extensions/admonition.html\n  - admonition:\n  - toc:\n      permalink: True\n\n#required due to https://github.com/rtfd/readthedocs.org/issues/1313\n#see http://mkdocs.readthedocs.org/en/latest/user-guide/styling-your-docs/#customising-a-theme\nextra_css:\n  - css/extra.css\nextra_javascript:\n  - js/extra.js\n\nnav:\n  - Overview: 'index.md'\n  - Basics:\n      - Getting started: 'getting-started.md'\n      - Building the firmware: 'build.md'\n      - Flashing the firmware: 'flash.md'\n      - Uploading code: 'upload.md'\n      - Compiling code: 'compiling.md'\n      - Support: 'support.md'\n  - Reference:\n      - NodeMCU Language Reference Manual: 'nodemcu-lrm.md'\n      - Programming in NodeMCU: 'nodemcu-pil.md'\n  - FAQs:\n      - Lua Developer FAQ: 'lua-developer-faq.md'\n      - Extension Developer FAQ: 'extn-developer-faq.md'\n      - Hardware FAQ: 'hardware-faq.md'\n  - Whitepapers:\n      - Lua 5.3 Support: 'lua53.md'\n      - Lua Flash Store (LFS): 'lfs.md'\n      - Lua Compact Debug (LCD): 'lcd.md'\n      - Filesystem on SD card: 'sdcard.md'\n      - Internal filesystem: 'spiffs.md'\n  - Lua Modules:\n      - 'Lua modules directory': 'lua-modules/README.md'\n      - 'bh1750': 'lua-modules/bh1750.md'\n      - 'bme280': 'lua-modules/bme280.md'\n      - 'cohelper': 'lua-modules/cohelper.md'\n      - 'ds18b20': 'lua-modules/ds18b20.md'\n      - 'ds3231': 'lua-modules/ds3231.md'\n      - 'fifo': 'lua-modules/fifo.md'\n      - 'fifosock': 'lua-modules/fifosock.md'\n      - 'file_lfs': 'lua-modules/file_lfs.md'\n      - 'ftpserver': 'lua-modules/ftpserver.md'\n      - 'gossip': 'lua-modules/gossip.md'\n      - 'hdc1000': 'lua-modules/hdc1000.md'\n      - 'httpserver': 'lua-modules/httpserver.md'\n      - 'imap': 'lua-modules/imap.md'\n      - 'liquidcrystal': 'lua-modules/liquidcrystal.md'\n      - 'lm92': 'lua-modules/lm92.md'\n      - 'mcp23008': 'lua-modules/mcp23008.md'\n      - 'mcp23017': 'lua-modules/mcp23017.md'\n      - 'redis': 'lua-modules/redis.md'\n      - 'telnet': 'lua-modules/telnet.md'\n      - 'yeelink': 'lua-modules/yeelink.md'\n  - C Modules:\n      - 'adc': 'modules/adc.md'\n      - 'ads1115': 'modules/ads1115.md'\n      - 'adxl345': 'modules/adxl345.md'\n      - 'am2320': 'modules/am2320.md'\n      - 'apa102': 'modules/apa102.md'\n      - 'bit': 'modules/bit.md'\n      - 'bloom': 'modules/bloom.md'\n      - 'bme280': 'modules/bme280.md'\n      - 'bme280_math': 'modules/bme280_math.md'\n      - 'bme680': 'modules/bme680.md'\n      - 'bmp085': 'modules/bmp085.md'\n      - 'cjson': 'modules/cjson.md'\n      - 'coap': 'modules/coap.md'\n      - 'color-utils': 'modules/color-utils.md'\n      - 'cron': 'modules/cron.md'\n      - 'crypto': 'modules/crypto.md'\n      - 'dcc': 'modules/dcc.md'\n      - 'dht': 'modules/dht.md'\n      - 'encoder': 'modules/encoder.md'\n      - 'enduser setup / captive portal / WiFi manager': 'modules/enduser-setup.md'\n      - 'file': 'modules/file.md'\n      - 'gdbstub': 'modules/gdbstub.md'\n      - 'gpio': 'modules/gpio.md'\n      - 'hdc1080': 'modules/hdc1080.md'\n      - 'hmc5883l': 'modules/hmc5883l.md'\n      - 'http': 'modules/http.md'\n      - 'hx711': 'modules/hx711.md'\n      - 'i2c': 'modules/i2c.md'\n      - 'l3g4200d': 'modules/l3g4200d.md'\n      - 'mcp4725': 'modules/mcp4725.md'\n      - 'mdns': 'modules/mdns.md'\n      - 'mqtt': 'modules/mqtt.md'\n      - 'net': 'modules/net.md'\n      - 'node': 'modules/node.md'\n      - 'ow (1-Wire)': 'modules/ow.md'\n      - 'pcm': 'modules/pcm.md'\n      - 'perf': 'modules/perf.md'\n      - 'pipe': 'modules/pipe.md'\n      - 'pixbuf': 'modules/pixbuf.md'\n      - 'pwm': 'modules/pwm.md'\n      - 'pwm2': 'modules/pwm2.md'\n      - 'rfswitch': 'modules/rfswitch.md'\n      - 'rotary': 'modules/rotary.md'\n      - 'rtcfifo': 'modules/rtcfifo.md'\n      - 'rtcmem': 'modules/rtcmem.md'\n      - 'rtctime': 'modules/rtctime.md'\n      - 'si7021': 'modules/si7021.md'\n      - 'sigma delta': 'modules/sigma-delta.md'\n      - 'sjson': 'modules/sjson.md'\n      - 'sntp': 'modules/sntp.md'\n      - 'softuart': 'modules/softuart.md'\n      - 'somfy': 'modules/somfy.md'\n      - 'spi': 'modules/spi.md'\n      - 'struct': 'modules/struct.md'\n      - 'switec': 'modules/switec.md'\n      - 'tcs34725': 'modules/tcs34725.md'\n      - 'tls': 'modules/tls.md'\n      - 'tm1829': 'modules/tm1829.md'\n      - 'tmr': 'modules/tmr.md'\n      - 'tsl2561': 'modules/tsl2561.md'\n      - 'u8g2': 'modules/u8g2.md'\n      - 'uart': 'modules/uart.md'\n      - 'ucg': 'modules/ucg.md'\n      - 'websocket': 'modules/websocket.md'\n      - 'wiegand': 'modules/wiegand.md'\n      - 'wifi': 'modules/wifi.md'\n      - 'wifi.monitor': 'modules/wifi_monitor.md'\n      - 'wps': 'modules/wps.md'\n      - 'ws2801': 'modules/ws2801.md'\n      - 'ws2812': 'modules/ws2812.md'\n      - 'ws2812-effects': 'modules/ws2812-effects.md'\n      - 'xpt2046': 'modules/xpt2046.md'\n"
        },
        {
          "name": "msvc",
          "type": "tree",
          "content": null
        },
        {
          "name": "rtd-requirements.txt",
          "type": "blob",
          "size": 0.3037109375,
          "content": "#################################################################\n# This file is configured in RTD -> Admin -> Advanced Settings! #\n#################################################################\n# Enforce a specific MkDocs version by using the standard pip requirements.txt syntax\n# mkdocs >= 0.16.3, < 0.17\n"
        },
        {
          "name": "sdk-overrides",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}