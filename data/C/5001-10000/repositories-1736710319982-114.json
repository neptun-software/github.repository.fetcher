{
  "metadata": {
    "timestamp": 1736710319982,
    "page": 114,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fluent/fluent-bit",
      "stars": 6446,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".build-trigger",
          "type": "blob",
          "size": 0.0361328125,
          "content": "b265b55a-cfa6-4f9b-a035-4421ee68b7f9\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0595703125,
          "content": "# We need the git commit info\n# .git\nbuild/**\ndockerfiles/**\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.755859375,
          "content": ".idea\n.vscode\n.clang-format\n.DS_Store\n*~\n_book/\nlib/jemalloc\ntests/internal/flb_tests_internal.h\ntests/runtime/flb_tests_runtime.h\nbuild/*\ninclude/fluent-bit/flb_info.h\ninclude/fluent-bit/flb_plugins.h\ninclude/fluent-bit/flb_version.h\ninclude/fluent-bit/conf/*.h\ninclude/fluent-bit/tls/flb_tls_info.h\ninit/fluent-bit.service\nlib/chunkio/include/chunkio/cio_version.h\nlib/monkey/monkey.service\nlib/monkey/include/monkey/mk_core/mk_core_info.h\n\npackaging/.env\npackaging/packages\npackaging/distros/**/sources/\npackaging/releases\npackaging/latest/\npackaging/aws-release-sync/\nworkflow/\n*.key\n*.log\n*.tar.gz\n*.o\n# clangd files\n.cache/\ncompile_commands.json\n\nworkflow/\n.kitchen/\n\n.vagrant/\n# examples\nexamples/wasi_serde_json/target/\n# WASM test data\ntests/runtime/wasm/go/*.wasm\n"
        },
        {
          "name": "CHUNKS.md",
          "type": "blob",
          "size": 4.376953125,
          "content": "# Fluent Bit Chunks (internals)\n\nWhen using Fluent Bit you might read about `chunks`. A Chunk is a unit of\ndata that groups multiple records of the same type under the same Tag.\n\nAs part of the data ingestion workflow in the pipeline, input plugins who are in\ncharge to collect information from different sources, encode the data as `records`\nin a MessagePack buffer and associate them with a Tag (a tag is used for routing).\n\nInternally, Fluent Bit offer two APIs to _ingest_ the records into the pipeline\ndepending of the message type to ingest.\n\n- flb_input_chunk_append_raw(): logs ingestion, defined in flb_input_chunk.c\n- flb_input_metrics_append(): metrics ingestion, defined in flb_input_metric.c\n\nWhen invoking any of the functions mentioned above, the API will make sure to\nfind a pre-existing Chunk of the same type that contains the exact same Tag specified\nby the caller, if no available Chunk exists, a new one is created.\n\nFor reliability and flexibility reasons, an input plugin might specify that all\nChunks associated to it will be only located in memory, others might enable\n```storage.type filesystem``` so the Chunk will be located also in filesystem.\n\n## Chunk I/O: Low level\n\nIn the low level side, all the Chunks management magic happens on a thin library called\n[Chunk I/O](https://github.com/edsiper/chunkio). This library helps to provide\ndifferent backend types such as memory and filesystem, checksums and care of file system\ndata synchronization.\n\nThe Chunks at the file system level has it own format, but it's totally agnostic from the\ncontent that Fluent Bit stores on it.\n\nThe following is the layout of a Chunk in the file system:\n\n```\n+--------------+----------------+\n|     0xC1     |     0x00       +--> Header 2 bytes\n+--------------+----------------+\n|    4 BYTES CRC32 + 16 BYTES   +--> CRC32(Content) + Padding\n+-------------------------------+\n|            Content            |\n|  +-------------------------+  |\n|  |         2 BYTES         +-----> Metadata Length\n|  +-------------------------+  |\n|  +-------------------------+  |\n|  |                         |  |\n|  |        Metadata         +-----> Optional Metadata (up to 65535 bytes)\n|  |                         |  |\n|  +-------------------------+  |\n|  +-------------------------+  |\n|  |                         |  |\n|  |       Content Data      +-----> User Data\n|  |                         |  |\n|  +-------------------------+  |\n+-------------------------------+\n```\n\nFor Fluent Bit, the important areas of information are _Metadata_ and _Content Data_.\n\n## Metadata and Content Data\n\nOn Fluent Bit the metadata and content handling has changed a bit, specifically from the\noriginal version implemented as of v1.8 and the changes on the new v1.9 series:\n\n### Fluent Bit >= v1.9\n\nMetadata on this version introduces 4 bytes at the beginning that identifies the\nformat version by setting bytes 0xF1 and 0x77. The third byte called ```type```\nspecifies the type of records the Chunk is storing, for Logs this value is ```0x0``` and for Metrics is ```0x1```. The four byte is unused for now.\n\nThe following diagrams shows the data format:\n\n\n```\n                --   +---------+-------+\n               /     |  0xF1   | 0x77  |  <- Magic Bytes\n              /      +---------+-------+\nMetadata     <       |  Type   | 0x00  |  <- Chunk type and unused byte\n              \\      +---------+-------+\n               \\     |      Tag        |  <- Tag associated to records in the content\n                --   +-----------------+\n               /     |  +-----------+  |\n              /      |  |           |  |\nContent Data <       |  |  records  |  |\n              \\      |  |           |  |\n               \\     |  +-----------+  |\n                --   +-----------------+\n```\n\nFluent Bit API provides backward compatibility with the previous metadata and content\nformat found on series v1.8.\n\n### Fluent Bit <= v1.8\n\nUp to Fluent Bit <= 1.8.x, the metadata and content data is simple, where metadata\nonly stores the Tag and content data the msgpack records.\n\n```\n                     +-----------------+\nMetadata     <       |      Tag        |  <- Tag associated to records in the content\n                --   +-----------------+\n               /     |  +-----------+  |\n              /      |  |           |  |\nContent Data <       |  |  records  |  |\n              \\      |  |           |  |\n               \\     |  +-----------+  |\n                --   +-----------------+\n```\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 44.3876953125,
          "content": "cmake_minimum_required(VERSION 3.12)\nproject(fluent-bit C)\n\n# CMP0069 ensures that LTO is enabled for all compilers\ncmake_policy(SET CMP0069 NEW)\nset(CMAKE_POLICY_DEFAULT_CMP0069 NEW)\n\n# Fluent Bit Version\nset(FLB_VERSION_MAJOR  4)\nset(FLB_VERSION_MINOR  0)\nset(FLB_VERSION_PATCH  0)\nset(FLB_VERSION_STR \"${FLB_VERSION_MAJOR}.${FLB_VERSION_MINOR}.${FLB_VERSION_PATCH}\")\n\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\n# Define macro to identify Windows system (without Cygwin)\nif(CMAKE_SYSTEM_NAME MATCHES \"Windows\")\n  set(FLB_SYSTEM_WINDOWS On)\n  add_definitions(-DFLB_SYSTEM_WINDOWS)\nendif()\n\n# Define macro to identify macOS system\nif(CMAKE_SYSTEM_NAME MATCHES \"Darwin\")\n  set(FLB_SYSTEM_MACOS On)\n  add_definitions(-DFLB_SYSTEM_MACOS)\nendif()\n\n# Define macro to identify Linux system\nif(CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n  set(FLB_SYSTEM_LINUX On)\n  add_definitions(-DFLB_SYSTEM_LINUX)\n  if (CMAKE_SYSTEM_PROCESSOR MATCHES \"^(arm64|aarch64)\")\n    set(FLB_LINUX_ON_AARCH64 On)\n    add_definitions(-DFLB_LINUX_ON_AARCH64)\n  endif()\nendif()\n\n# Update CFLAGS\nif (MSVC)\n  add_definitions(-D_CRT_SECURE_NO_WARNINGS)\n  add_definitions(-D_CRT_NONSTDC_NO_WARNINGS)\n\n  # Use custom CFLAGS for MSVC\n  #\n  #   /Zi ...... Generate pdb files.\n  #   /MT ...... Static link C runtimes.\n  #   /wd4711 .. C4711 (function selected for inline expansion)\n  #   /wd4100 .. C4100 (unreferenced formal parameter)\n  #   /wd5045 .. C5045 (Spectre mitigation)\n  #\n  set(CMAKE_C_FLAGS \"/DWIN32 /D_WINDOWS /DNDEBUG /O2 /Zi /wd4100 /wd4711 /wd5045\")\n  set(CMAKE_EXE_LINKER_FLAGS \"/Debug /INCREMENTAL:NO\")\n  set(CMAKE_BUILD_TYPE None)\n\n  # Use add_compile_options() to set /MT since Visual Studio\n  # Generator does not notice /MT in CMAKE_C_FLAGS.\n  add_compile_options(/MT)\nelse()\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wall\")\n  # The following flags are to enhance security, but it may impact performance,\n  # we disable them by default.\n  if (FLB_WASM_STACK_PROTECT)\n    if (WAMR_BUILD_TARGET MATCHES \"X86_.*\" OR WAMR_BUILD_TARGET STREQUAL \"AMD_64\")\n      set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -ftrapv -D_FORTIFY_SOURCE=2\")\n    endif ()\n    set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fstack-protector-strong --param ssp-buffer-size=4\")\n    set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wl,-z,noexecstack,-z,relro,-z,now\")\n  endif()\nendif()\n\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -D__FLB_FILENAME__=__FILE__\")\n\nif(${CMAKE_SYSTEM_PROCESSOR} MATCHES \"armv7l\")\n  set(CMAKE_C_LINK_FLAGS \"${CMAKE_C_LINK_FLAGS} -latomic\")\n  set(CMAKE_CXX_LINK_FLAGS \"${CMAKE_CXX_LINK_FLAGS} -latomic\")\nendif()\nif(${CMAKE_SYSTEM_NAME} MATCHES \"FreeBSD\")\n  set(FLB_SYSTEM_FREEBSD On)\n  add_definitions(-DFLB_SYSTEM_FREEBSD)\n  set(CMAKE_C_LINK_FLAGS \"${CMAKE_C_LINK_FLAGS} -lutil\")\n  set(CMAKE_CXX_LINK_FLAGS \"${CMAKE_CXX_LINK_FLAGS} -lutil\")\nendif()\n\n# *BSD is not supported platform for wasm-micro-runtime except for FreeBSD.\n# Now, we should be disabled for these platforms.\nif(NOT FLB_SYSTEM_FREEBSD AND ${CMAKE_SYSTEM_NAME} MATCHES \"BSD\")\n  message(STATUS \"This platform is not supported for WASM feature so disabled.\")\n  set(FLB_WASM OFF)\nelseif(FLB_SYSTEM_FREEBSD)\n  message(STATUS \"Some of FreeBSD environment do not work with hardware boundary check so disabled.\")\n  set(WAMR_DISABLE_STACK_HW_BOUND_CHECK 1)\nendif()\n\nINCLUDE(TestBigEndian)\ninclude(GNUInstallDirs)\ninclude(ExternalProject)\ninclude(cmake/FindJournald.cmake)\ninclude(cmake/FindMonkey.cmake)\ninclude(cmake/macros.cmake)\ninclude(cmake/platform_feature_checks.cmake)\nset(CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/cmake/sanitizers-cmake/cmake\" ${CMAKE_MODULE_PATH})\nfind_package(Sanitizers)\n\n# Output paths\nset(FLB_ROOT \"${CMAKE_CURRENT_SOURCE_DIR}\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/bin\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/lib\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/library\")\n\n# Build Options\noption(FLB_ALL                 \"Enable all features\"                         No)\noption(FLB_DEBUG               \"Build with debug mode (-g)\"                 Yes)\noption(FLB_RELEASE             \"Build with release mode (-O2 -g -DNDEBUG)\"   No)\nset(FLB_IPO \"ReleaseOnly\" CACHE STRING \"Build with interprocedural optimization\")\nset_property(CACHE FLB_IPO PROPERTY STRINGS \"On;Off;ReleaseOnly\")\noption(FLB_SMALL               \"Optimise for small size\"       No)\nset(FLB_SECURITY \"ReleaseOnly\" CACHE STRING \"Build with security optimizations\")\nset_property(CACHE FLB_SECURITY PROPERTY STRINGS \"On;Off;ReleaseOnly\")\noption(FLB_COVERAGE            \"Build with code-coverage\"      No)\noption(FLB_JEMALLOC            \"Build with Jemalloc support\"   No)\noption(FLB_REGEX               \"Build with Regex support\"     Yes)\noption(FLB_UTF8_ENCODER        \"Build with UTF8 encoding support\" Yes)\noption(FLB_PARSER              \"Build with Parser support\"    Yes)\noption(FLB_TLS                 \"Build with SSL/TLS support\"   Yes)\noption(FLB_BINARY              \"Build executable binary\"      Yes)\noption(FLB_EXAMPLES            \"Build examples\"               Yes)\noption(FLB_SHARED_LIB          \"Build shared library\"         Yes)\noption(FLB_VALGRIND            \"Enable Valgrind support\"       No)\noption(FLB_TRACE               \"Enable trace mode\"             No)\noption(FLB_CHUNK_TRACE         \"Enable chunk traces\"          Yes)\noption(FLB_TESTS_RUNTIME       \"Enable runtime tests\"          No)\noption(FLB_TESTS_INTERNAL      \"Enable internal tests\"         No)\noption(FLB_TESTS_INTERNAL_FUZZ \"Enable internal fuzz tests\"    No)\noption(FLB_TESTS_OSSFUZZ       \"Enable OSS-Fuzz build\"         No)\noption(FLB_MTRACE              \"Enable mtrace support\"         No)\noption(FLB_POSIX_TLS           \"Force POSIX thread storage\"    No)\noption(FLB_INOTIFY             \"Enable inotify support\"       Yes)\noption(FLB_SQLDB               \"Enable SQL embedded DB\"       Yes)\noption(FLB_HTTP_SERVER         \"Enable HTTP Server\"           Yes)\noption(FLB_BACKTRACE           \"Enable stacktrace support\"    Yes)\noption(FLB_LUAJIT              \"Enable Lua Scripting support\" Yes)\noption(FLB_RECORD_ACCESSOR     \"Enable record accessor\"       Yes)\noption(FLB_SIGNV4              \"Enable AWS Signv4 support\"    Yes)\noption(FLB_AWS                 \"Enable AWS support\"           Yes)\noption(FLB_STATIC_CONF         \"Build binary using static configuration\")\noption(FLB_STREAM_PROCESSOR    \"Enable Stream Processor\"                    Yes)\noption(FLB_SIMD                \"Enable SIMD support\"                         No)\noption(FLB_CORO_STACK_SIZE     \"Set coroutine stack size\")\noption(FLB_AVRO_ENCODER        \"Build with Avro encoding support\"            No)\noption(FLB_AWS_ERROR_REPORTER  \"Build with aws error reporting support\"      No)\noption(FLB_ARROW               \"Build with Apache Arrow support\"             No)\noption(FLB_WINDOWS_DEFAULTS    \"Build with predefined Windows settings\"     Yes)\noption(FLB_WASM                \"Build with WASM runtime support\"            Yes)\noption(FLB_WAMRC               \"Build with WASM AOT compiler executable\"    No)\noption(FLB_WASM_STACK_PROTECT  \"Build with WASM runtime with strong stack protector flags\" No)\noption(FLB_ENFORCE_ALIGNMENT   \"Enable limited platform specific aligned memory access\" No)\n\n# Native Metrics Support (cmetrics)\noption(FLB_METRICS             \"Enable metrics support\"       Yes)\n\n# Native Profiules Support (cprofiles)\noption(FLB_PROFILES            \"Enable profiles support\"      Yes)\n\n# Proxy Plugins\noption(FLB_PROXY_GO            \"Enable Go plugins support\"    Yes)\n\n# Built-in Custom Plugins\noption(FLB_CUSTOM_CALYPTIA     \"Enable Calyptia Support\"      Yes)\n\n# Config formats\noption(FLB_CONFIG_YAML         \"Enable YAML config format\"    Yes)\n\n# List of plugins available and defaults for each option\ninclude(cmake/plugins_options.cmake)\n\n\n# Event loop backend (advanced users only)\n# ----------------------------------------\n# The following options are for advanced users only, they are used to enable\n# specific event loop backends. By default, the build system will try to\n# detect the best backend for the current Operating System. If you want to\n# force a specific backend, you can use ONE of the following options.\n#\n# Note that these options will enable the proper option for Monkey library.\noption(FLB_EVENT_LOOP_EPOLL     \"Enable epoll(2) event loop backend\"  No)\noption(FLB_EVENT_LOOP_POLL      \"Enable poll(2) event loop backend\"   No)\noption(FLB_EVENT_LOOP_KQUEUE    \"Enable kqueue(2) event loop backend\" No)\noption(FLB_EVENT_LOOP_SELECT    \"Enable select(2) event loop backend\" No)\noption(FLB_EVENT_LOOP_LIBEVENT  \"Enable libevent event loop backend\"  No)\n\n# SIMD support\nif(FLB_SIMD)\n  FLB_DEFINITION(FLB_HAVE_SIMD)\nendif()\n\nif(DEFINED FLB_NIGHTLY_BUILD AND NOT \"${FLB_NIGHTLY_BUILD}\" STREQUAL \"\")\n  FLB_DEFINITION_VAL(FLB_NIGHTLY_BUILD ${FLB_NIGHTLY_BUILD})\nendif()\n\nif(FLB_IN_STORAGE_BACKLOG)\n  FLB_DEFINITION(FLB_HAVE_IN_STORAGE_BACKLOG)\nendif()\n\n# Debug callbacks\noption(FLB_HTTP_CLIENT_DEBUG  \"Enable HTTP Client debug callbacks\"   No)\n\n# Run ldconfig on package post-install\noption(FLB_RUN_LDCONFIG \"Enable execution of ldconfig after installation\" No)\n\n# Prefer system libraries if available\noption(FLB_PREFER_SYSTEM_LIBS             \"Prefer system libraries\"                   No)\noption(FLB_PREFER_SYSTEM_LIB_BACKTRACE    \"Prefer the libbacktrace system library\"    ${FLB_PREFER_SYSTEM_LIBS})\noption(FLB_PREFER_SYSTEM_LIB_CARES        \"Prefer the libcares system library\"        ${FLB_PREFER_SYSTEM_LIBS})\noption(FLB_PREFER_SYSTEM_LIB_JEMALLOC     \"Prefer the libjemalloc system library\"     ${FLB_PREFER_SYSTEM_LIBS})\noption(FLB_PREFER_SYSTEM_LIB_KAFKA        \"Prefer the libkafka system library\"        ${FLB_PREFER_SYSTEM_LIBS})\noption(FLB_PREFER_SYSTEM_LIB_LUAJIT       \"Prefer the libluajit system library\"       ${FLB_PREFER_SYSTEM_LIBS})\noption(FLB_PREFER_SYSTEM_LIB_NGHTTP2      \"Prefer the libnghttp2 system library\"      ${FLB_PREFER_SYSTEM_LIBS})\n\n# Enable all features\nif(FLB_ALL)\n  # Global\n  set(FLB_DEBUG           1)\n  set(FLB_TLS             1)\n\n  # Input plugins\n  set(FLB_IN_CPU          1)\n  set(FLB_IN_MEM          1)\n  set(FLB_IN_KMSG         1)\n  set(FLB_IN_MQTT         1)\n  set(FLB_IN_SERIAL       1)\n  set(FLB_IN_STDIN        1)\n  set(FLB_IN_HEAD         1)\n  set(FLB_IN_PROC         1)\n  set(FLB_IN_DISK         1)\n  set(FLB_IN_DUMMY        1)\n  set(FLB_IN_DUMMY_THREAD 1)\n  set(FLB_IN_NETIF        1)\n  set(FLB_IN_NGINX_STATUS 1)\n  set(FLB_IN_EXEC         1)\n  set(FLB_IN_UNIX_SOCKET  1)\n\n  # Output plugins\n  set(FLB_OUT_ES          1)\n  set(FLB_OUT_FORWARD     1)\n  set(FLB_OUT_GELF        1)\n  set(FLB_OUT_HTTP        1)\n  set(FLB_OUT_NATS        1)\n  set(FLB_OUT_NULL        1)\n  set(FLB_OUT_PLOT        1)\n  set(FLB_OUT_FILE        1)\n  set(FLB_OUT_RETRY       1)\n  set(FLB_OUT_TD          1)\n  set(FLB_OUT_STDOUT      1)\n  set(FLB_OUT_S3          1)\n  set(FLB_OUT_SYSLOG      1)\n  set(FLB_OUT_LIB         1)\n  set(FLB_OUT_FLOWCOUNTER 1)\n  set(FLB_OUT_WEBSOCKET   1)\nendif()\n\nif(FLB_DEV)\n  FLB_DEFINITION(FLB_HAVE_DEV)\n\n  set(FLB_DEBUG             On)\n  set(FLB_TRACE             On)\n  set(FLB_CHUNK_TRACE       On)\n  set(FLB_METRICS           On)\n  set(FLB_PROFILES          On)\n  set(FLB_IN_EVENT_TEST     On)\n  set(FLB_HTTP_SERVER       On)\n  set(FLB_HTTP_CLIENT_DEBUG On)\n  set(FLB_TESTS_INTERNAL    On)\nendif()\n\nif(FLB_TRACE)\n  add_definitions(-DFLB_TRACE=1)\nendif()\n\nif(FLB_CHUNK_TRACE)\n  FLB_DEFINITION(FLB_HAVE_CHUNK_TRACE)\nendif()\n\n# SSL/TLS: add encryption support\nif(FLB_OUT_TD)\n  set(FLB_TLS ON)\nendif()\n\nif(FLB_HTTP_CLIENT_DEBUG)\n  FLB_DEFINITION(FLB_HAVE_HTTP_CLIENT_DEBUG)\nendif()\n\nif (FLB_TESTS_OSSFUZZ)\n  FLB_DEFINITION(FLB_HAVE_TESTS_OSSFUZZ)\nendif()\n\nif (FLB_WASM)\n  # For Linking libedit adjustments on LLVM 15.\n  include(cmake/FindLibEdit.cmake)\nendif()\n\n# Set Fluent Bit dependency libraries path\ninclude(cmake/libraries.cmake)\n\n# Export headers provided by libraries/dependencies\ninclude(cmake/headers.cmake)\n\n# Tweak build targets for Windows\nif(FLB_SYSTEM_WINDOWS)\n  include(cmake/windows-setup.cmake)\nendif()\n\n# Tweak build targets for macOS\nif (FLB_SYSTEM_MACOS)\n  # build tweaks\n  include(cmake/macos-setup.cmake)\nendif()\n\n# Build for SystemZ - s390x arch\nif (FLB_SYSTEM_LINUX)\n  include(cmake/s390x.cmake)\nendif ()\n\n# Build for Linux - riscv64 arch\nif (FLB_SYSTEM_LINUX)\n  include(cmake/riscv64.cmake)\nendif ()\n\n# Enable signed char support on Linux AARCH64 if specified\nif (FLB_LINUX_ON_AARCH64)\n  set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsigned-char\")\n  message(STATUS \"Enabling signed char\")\nendif()\n\n# Extract Git commit information for debug output.\n# Note that this is only set when cmake is run, the intent here is to use in CI for verification of releases so is acceptable.\n# For a better solution see https://jonathanhamberg.com/post/cmake-embedding-git-hash/ but this is simple and easy.\nfind_package(Git)\n# If we do not have Git or this is not a Git repo or another error this just is ignored and we have no output at runtime.\nexecute_process(COMMAND\n  \"${GIT_EXECUTABLE}\" -c log.showSignature=false log -1 --format=%H\n  WORKING_DIRECTORY \"${FLB_ROOT}\"\n  OUTPUT_VARIABLE FLB_GIT_HASH\n  ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)\nmessage(STATUS \"Git hash: ${FLB_GIT_HASH}\")\n\n# Optional features like Stream Processor and Record Accessor needs Flex\n# and Bison to generate it parsers.\nfind_package(FLEX 2)\nfind_package(BISON 3)\n\nif(FLEX_FOUND AND BISON_FOUND)\n  set(FLB_FLEX_BISON  1)\nendif()\n\nif(FLB_SMALL)\n  if(CMAKE_COMPILER_IS_GNUCC)\n    set(strip_flag  \" -s \")\n  else()\n    set(strip_flag  \"\")\n  endif()\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Os -g0 ${strip_flag} -fno-stack-protector -fomit-frame-pointer -DNDEBUG -U_FORTIFY_SOURCE\")\nendif()\n\nif(FLB_COVERAGE)\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -g -O0 --coverage -fprofile-arcs -ftest-coverage\")\n  set(CMAKE_BUILD_TYPE \"Debug\")\nendif()\n\n# Enable Debug symbols if specified\nif(MSVC)\n  set(CMAKE_BUILD_TYPE None)  # Avoid flag conflicts (See CMakeList.txt:L18)\nelseif(FLB_RELEASE)\n  set(CMAKE_BUILD_TYPE \"RelWithDebInfo\")\nelseif(FLB_DEBUG)\n  set(CMAKE_BUILD_TYPE \"Debug\")\nendif()\n\nif(FLB_IPO STREQUAL \"On\" OR (FLB_IPO STREQUAL \"ReleaseOnly\" AND FLB_RELEASE))\n  include(CheckIPOSupported)\n  check_ipo_supported(RESULT ipo_supported)\n  # IPO in GCC versions smaller v8 is broken\n  if(ipo_supported AND NOT (CMAKE_COMPILER_IS_GNUCC AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 8))\n    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)\n  else()\n    message(Warning \"IPO is not supported on this platform\")\n  endif()\nendif()\n\n# Memory alignment enforcement\nif(FLB_ENFORCE_ALIGNMENT)\n  FLB_DEFINITION(FLB_ENFORCE_ALIGNMENT)\nendif()\n\n# Harden release binary against security vulnerabilities\nif(FLB_SECURITY STREQUAL \"On\" OR (FLB_SECURITY STREQUAL \"ReleaseOnly\" AND FLB_RELEASE))\n  if (NOT MSVC)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wl,-z,relro,-z,now\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wl,-z,noexecstack\")\n    if(NOT FLB_SMALL)\n      set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fstack-protector\")\n      # Fortify requires optimization\n      if(CMAKE_BUILD_TYPE STREQUAL \"Release\" OR CMAKE_BUILD_TYPE STREQUAL \"RelWithDebInfo\")\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -D_FORTIFY_SOURCE=1\")\n      endif()\n    endif()\n  endif()\nendif()\n\nif(FLB_PARSER)\n  FLB_DEFINITION(FLB_HAVE_PARSER)\n  message(STATUS \"Enabling FLB_REGEX since FLB_PARSER requires\")\n  set(FLB_REGEX On)\nendif()\n\n# Is sanitize_address defined ?\nif(SANITIZE_ADDRESS)\n  FLB_DEFINITION(FLB_HAVE_SANITIZE_ADDRESS)\nendif()\n\n# Record Accessor\nif(FLB_RECORD_ACCESSOR)\n  if(NOT FLB_FLEX_BISON)\n    message(FATAL_ERROR\n      \"Record Accessor feature requires Flex and Bison in your system.\\n\"\n      \"This is a build time dependency, you can either install the \"\n      \"dependencies or disable the feature setting the CMake option \"\n      \"-DFLB_RECORD_ACCESSOR=Off .\"\n      )\n  endif()\n  FLB_DEFINITION(FLB_HAVE_RECORD_ACCESSOR)\nendif()\n\n# Stream Processor\nif(FLB_STREAM_PROCESSOR)\n  if(NOT FLB_FLEX_BISON)\n    message(FATAL_ERROR\n      \"Stream Processor feature requires Flex and Bison in your system.\\n\"\n      \"This is a build time dependency, you can either install the \"\n      \"dependencies or disable the feature setting the CMake option \"\n      \"-DFLB_STREAM_PROCESSOR=Off .\"\n      )\n  endif()\n\n  # Enable Stream Processor internal helper plugin\n  set(FLB_IN_STREAM_PROCESSOR On)\n  FLB_DEFINITION(FLB_HAVE_STREAM_PROCESSOR)\nendif()\n\n# mk_core is aware about jemalloc usage, we need to disable this as\n# fluent-bit do not use it.\nset(WITH_SYSTEM_MALLOC  1 CACHE BOOL \"Use system memory allocator\")\n\n# Headers: required headers by bundled libraries, this act as a helper for\n# CFL, Ctraces, CMetrics, CProfiles and fluent-otel-proto\n#\n# Note: any check_c_source_compiles() cmake function might require this to\n# work.\n#\nset(CMAKE_REQUIRED_INCLUDES\n  ${FLB_PATH_ROOT_SOURCE}/${FLB_PATH_LIB_CFL}/include\n  ${FLB_PATH_ROOT_SOURCE}/${FLB_PATH_LIB_FLUENT_OTEL}/include/\n  ${FLB_PATH_ROOT_SOURCE}/${FLB_PATH_LIB_FLUENT_OTEL}/proto_c/\n  )\n\n# CFL\nadd_subdirectory(${FLB_PATH_LIB_CFL} EXCLUDE_FROM_ALL)\n\n# fluent-otel-proto\nFLB_OPTION(FLUENT_PROTO_METRICS ON)\nFLB_OPTION(FLUENT_PROTO_PROFILES ON)\nadd_subdirectory(${FLB_PATH_LIB_FLUENT_OTEL} EXCLUDE_FROM_ALL)\n\n# MsgPack options\noption(MSGPACK_ENABLE_CXX             OFF)\noption(MSGPACK_ENABLE_SHARED          OFF)\noption(MSGPACK_BUILD_TESTS            OFF)\noption(MSGPACK_BUILD_EXAMPLES         OFF)\nadd_subdirectory(${FLB_PATH_LIB_MSGPACK} EXCLUDE_FROM_ALL)\n\n# MPack\nadd_definitions(-DMPACK_EXTENSIONS=1)\nadd_subdirectory(${FLB_PATH_LIB_MPACK} EXCLUDE_FROM_ALL)\n\n# Miniz (zip)\nadd_subdirectory(${FLB_PATH_LIB_MINIZ} EXCLUDE_FROM_ALL)\n\n# ring buffer library\nadd_subdirectory(${FLB_PATH_LIB_RING_BUFFER} EXCLUDE_FROM_ALL)\n\n# Avro\nif(FLB_AVRO_ENCODER)\n  # jansson\n  option(JANSSON_BUILD_DOCS         OFF)\n  option(JANSSON_EXAMPLES           OFF)\n  option(JANSSON_WITHOUT_TESTS       ON)\n  option(JANSSON_BUILD_SHARED_LIBS  OFF)\n  add_subdirectory(${FLB_PATH_LIB_JANSSON})\n\n  #avro\n  add_subdirectory(${FLB_PATH_LIB_AVRO} EXCLUDE_FROM_ALL)\nendif()\n\n# tutf8e\nif(FLB_UTF8_ENCODER)\n  add_subdirectory(${FLB_PATH_LIB_TUTF8E} EXCLUDE_FROM_ALL)\nendif()\n\n# snappy\nadd_subdirectory(${FLB_PATH_LIB_SNAPPY} EXCLUDE_FROM_ALL)\n\n# CMetrics\nadd_subdirectory(${FLB_PATH_LIB_CMETRICS} EXCLUDE_FROM_ALL)\n\n# CTraces\nadd_subdirectory(${FLB_PATH_LIB_CTRACES} EXCLUDE_FROM_ALL)\n\n# CProfiles\nadd_subdirectory(${FLB_PATH_LIB_CPROFILES} EXCLUDE_FROM_ALL)\n\n# Nghttp2 options\nif(FLB_PREFER_SYSTEM_LIB_NGHTTP2)\n  find_package(PkgConfig)\n  pkg_check_modules(NGHTTP2 libnghttp2>=1.0.0)\nendif()\nif(NGHTTP2_FOUND)\n  include_directories(${NGHTTP2_INCLUDE_DIRS})\n  link_directories(${NGHTTP2_LIBRARY_DIRS})\nelse()\n  include(cmake/nghttp2.cmake)\nendif()\n\n# C-Ares (DNS library)\nif(FLB_PREFER_SYSTEM_LIB_CARES)\n  find_package(PkgConfig)\n  pkg_check_modules(LIBCARES libcares>=1.18.0)\nendif()\nif(LIBCARES_FOUND)\n  include_directories(${LIBCARES_INCLUDE_DIRS})\n  link_directories(${LIBCARES_LIBRARY_DIRS})\nelse()\n  include(cmake/cares.cmake)\nendif()\n\n# Chunk I/O\nFLB_OPTION(CIO_LIB_STATIC  ON)\nFLB_OPTION(CIO_LIB_SHARED  OFF)\nadd_subdirectory(${FLB_PATH_LIB_CHUNKIO} EXCLUDE_FROM_ALL)\n\n# Lib: build the core libraries used by Fluent-Bit\nFLB_DEFINITION(JSMN_PARENT_LINKS)\nFLB_DEFINITION(JSMN_STRICT)\nadd_subdirectory(${FLB_PATH_LIB_JSMN})\n# Runtime Tests (filter_kubernetes) requires HTTP Server\nif(FLB_TESTS_RUNTIME)\n  FLB_OPTION(FLB_HTTP_SERVER  ON)\nendif()\n\n# Monkey Core Library\nmacro(MK_SET_OPTION option value)\n  set(${option} ${value} CACHE INTERNAL \"\" FORCE)\nendmacro()\nMK_SET_OPTION(MK_SYSTEM_MALLOC    ON)\nMK_SET_OPTION(MK_DEBUG            ON)\n\n# Monkey backend event loop\nif (FLB_EVENT_LOOP_EPOLL)\n  MK_SET_OPTION(MK_EVENT_LOOP_EPOLL ON)\n  FLB_DEFINITION(FLB_EVENT_LOOP_EPOLL)\n  message(STATUS \"FLB Event loop backend > epoll(2)\")\nelseif (FLB_EVENT_LOOP_POLL)\n  MK_SET_OPTION(MK_EVENT_LOOP_POLL ON)\n  FLB_DEFINITION(FLB_EVENT_LOOP_POLL)\n  message(STATUS \"FLB Event loop backend > poll(2)\")\nelseif (FLB_EVENT_LOOP_KQUEUE)\n  MK_SET_OPTION(MK_EVENT_LOOP_KQUEUE ON)\n  FLB_DEFINITION(FLB_EVENT_LOOP_KQUEUE)\n  message(STATUS \"FLB Event loop backend > kqueue(2)\")\nelseif (FLB_EVENT_LOOP_SELECT)\n  MK_SET_OPTION(MK_EVENT_LOOP_SELECT ON)\n  FLB_DEFINITION(FLB_EVENT_LOOP_SELECT)\n  message(STATUS \"FLB Event loop backend > select(2)\")\nelseif (FLB_EVENT_LOOP_LIBEVENT)\n  MK_SET_OPTION(MK_EVENT_LOOP_LIBEVENT ON)\n  FLB_DEFINITION(FLB_EVENT_LOOP_LIBEVENT)\n  message(STATUS \"FLB Event loop backend > libevent\")\nelse()\n  FLB_DEFINITION(FLB_EVENT_LOOP_AUTO_DISCOVERY)\n  message(STATUS \"FLB Event loop backend > auto discovery (Monkey library)\")\nendif()\n\n# Build Monkey HTTP Server\nif(FLB_HTTP_SERVER)\n  add_subdirectory(${FLB_PATH_LIB_MONKEY} EXCLUDE_FROM_ALL)\nelse()\n  add_subdirectory(${FLB_PATH_LIB_MONKEY}/mk_core EXCLUDE_FROM_ALL)\nendif()\n\nif(FLB_TLS)\n  FLB_DEFINITION(FLB_HAVE_TLS)\n\n  option(ENABLE_TESTING  OFF)\n  option(ENABLE_PROGRAMS OFF)\n  option(INSTALL_MBEDTLS_HEADERS OFF)\n\n  # Link OpenSSL statically on Windows.\n  if (FLB_SYSTEM_WINDOWS)\n    set(OPENSSL_USE_STATIC_LIBS ON)\n    set(OPENSSL_MSVC_STATIC_RT  ON)\n  endif()\n\n  # find OpenSSL (our preferred choice now)\n  find_package(OpenSSL)\n  if(OPENSSL_FOUND)\n    FLB_DEFINITION(FLB_HAVE_OPENSSL)\n  endif()\n\n  if (FLB_SYSTEM_WINDOWS AND NOT(OPENSSL_FOUND))\n    # win32 builds w/o openssl will fail later so we might as well catch it\n    # early instead.\n    MESSAGE(FATAL_ERROR \"OpenSSL required on Windows, see DEVELOPER_GUIDE.md\")\n  endif()\nendif()\n\n# Metrics\nif(FLB_METRICS)\n  FLB_DEFINITION(FLB_HAVE_METRICS)\nendif()\n\n# Profiles\nif(FLB_PROFILES)\n  FLB_DEFINITION(FLB_HAVE_PROFILES)\nendif()\n\n# WASM\nif(FLB_WASM)\n  if (FLB_SYSTEM_LINUX)\n    check_c_source_compiles(\"\n       #include <stdatomic.h>\n       int main() {\n          _Atomic int a;\n          return 0;\n       }\" FLB_HAVE_STDATOMIC_H)\n    include(CheckIncludeFiles)\n    check_include_files(stdatomic.h FLB_HAVE_STDATOMIC_H)\n    if (FLB_HAVE_STDATOMIC_H)\n      enable_language (ASM)\n      FLB_DEFINITION(FLB_HAVE_WASM)\n    else ()\n      message(STATUS \"This platform does not provide stdatomic.h that is needed for the FLB_WASM feature so disabled.\")\n      set(FLB_WASM OFF)\n    endif ()\n  else ()\n    enable_language (ASM)\n    FLB_DEFINITION(FLB_HAVE_WASM)\n  endif ()\nendif()\n\n# AWS\nif (FLB_AWS)\n  FLB_DEFINITION(FLB_HAVE_AWS)\n\n  # Support for credential_process in the AWS config file is currently Linux-only.\n  # The current implementation might work for other Unix systems, but would require\n  # further testing to confirm.\n  # Spawning a sub-process in Windows is very different and will require its own\n  # implementation.\n  if(${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n    FLB_OPTION(FLB_HAVE_AWS_CREDENTIAL_PROCESS ON)\n    FLB_DEFINITION(FLB_HAVE_AWS_CREDENTIAL_PROCESS)\n  else()\n    FLB_OPTION(FLB_HAVE_AWS_CREDENTIAL_PROCESS OFF)\n  endif()\nendif()\n\nif (FLB_AWS_ERROR_REPORTER)\n  FLB_DEFINITION(FLB_HAVE_AWS_ERROR_REPORTER)\nendif()\n\n# Signv4\nif (FLB_SIGNV4)\n  FLB_DEFINITION(FLB_HAVE_SIGNV4)\nendif()\n\nif(FLB_SQLDB)\n  FLB_DEFINITION(FLB_HAVE_SQLDB)\n  add_subdirectory(${FLB_PATH_LIB_SQLITE})\nendif()\n\nif(FLB_TRACE)\n  FLB_DEFINITION(FLB_HAVE_TRACE)\nendif()\n\n# Disable colors and any other control characters in the output\nif (FLB_LOG_NO_CONTROL_CHARS)\n  FLB_DEFINITION(FLB_LOG_NO_CONTROL_CHARS)\nendif()\n\nif(FLB_HTTP_SERVER)\n  FLB_OPTION(FLB_METRICS ON)\n  FLB_DEFINITION(FLB_HAVE_METRICS)\n  FLB_DEFINITION(FLB_HAVE_HTTP_SERVER)\nendif()\n\nif(NOT TARGET co)\n  add_subdirectory(${FLB_PATH_LIB_CO})\nendif()\n\nif(NOT TARGET rbtree)\n  add_subdirectory(${FLB_PATH_LIB_RBTREE})\nendif()\n\n# Systemd Journald support\nif(JOURNALD_FOUND)\n  FLB_DEFINITION(FLB_HAVE_SYSTEMD)\n\n  check_c_source_compiles(\"\n    #include <systemd/sd-bus.h>\n    int main() {\n       return 0;\n    }\" FLB_HAVE_SYSTEMD_SDBUS)\n\n  if(FLB_HAVE_SYSTEMD_SDBUS)\n    FLB_DEFINITION(FLB_HAVE_SYSTEMD_SDBUS)\n  endif()\nelse()\n  FLB_OPTION(FLB_IN_SYSTEMD OFF)\nendif()\n\n# Valgrind support\ncheck_c_source_compiles(\"\n  #include <valgrind/valgrind.h>\n  int main() {\n     return 0;\n  }\" FLB_HAVE_VALGRIND)\n\nif(FLB_VALGRIND OR FLB_HAVE_VALGRIND)\n  FLB_DEFINITION(FLB_HAVE_VALGRIND)\nendif()\n\n# fork(2) support\ncheck_c_source_compiles(\"\n  #include <unistd.h>\n  int main() {\n     fork();\n     return 0;\n  }\" FLB_HAVE_FORK)\n\nif(FLB_HAVE_FORK)\n  FLB_DEFINITION(FLB_HAVE_FORK)\nendif()\n\n# mtrace support\nif(FLB_MTRACE)\n  check_c_source_compiles(\"\n    #include <mcheck.h>\n    int main() {\n       return 0;\n    }\" FLB_HAVE_MTRACE)\n\n  if(FLB_HAVE_MTRACE AND FLB_DEBUG)\n    FLB_DEFINITION(FLB_HAVE_MTRACE)\n  endif()\nendif()\n\n# timespec_get() support\ncheck_c_source_compiles(\"\n  #include <time.h>\n  int main() {\n     struct tm tm;\n     return timespec_get(&tm, TIME_UTC);\n  }\" FLB_HAVE_TIMESPEC_GET)\nif(FLB_HAVE_TIMESPEC_GET)\n  FLB_DEFINITION(FLB_HAVE_TIMESPEC_GET)\nendif()\n\n# gmtoff support\ncheck_c_source_compiles(\"\n  #include <time.h>\n  int main() {\n     struct tm tm;\n     tm.tm_gmtoff = 0;\n     return 0;\n  }\" FLB_HAVE_GMTOFF)\nif(FLB_HAVE_GMTOFF)\n  FLB_DEFINITION(FLB_HAVE_GMTOFF)\nendif()\n\n# clock_get_time() support for macOS.\ncheck_c_source_compiles(\"\n  #include <mach/clock.h>\n  #include <mach/mach.h>\n  int main() {\n      clock_serv_t cclock;\n      mach_timespec_t mts;\n      host_get_clock_service(mach_host_self(), CALENDAR_CLOCK, &cclock);\n      clock_get_time(cclock, &mts);\n      return mach_port_deallocate(mach_task_self(), cclock);\n  }\" FLB_HAVE_CLOCK_GET_TIME)\nif(FLB_HAVE_CLOCK_GET_TIME)\n  FLB_DEFINITION(FLB_HAVE_CLOCK_GET_TIME)\nendif()\n\n# unix socket support\ncheck_c_source_compiles(\"\n  #include <unistd.h>\n  #include <sys/un.h>\n  #include <sys/types.h>\n  #include <sys/socket.h>\n  int main() {\n      int sock;\n      sock = socket(AF_UNIX, SOCK_STREAM, 0);\n      close(sock);\n      return 0;\n  }\" FLB_HAVE_UNIX_SOCKET)\nif(FLB_HAVE_UNIX_SOCKET)\n  FLB_DEFINITION(FLB_HAVE_UNIX_SOCKET)\nendif()\n\n# byte order detection\ntest_big_endian(BIG_ENDIAN_SYSTEM_DETECTED)\n\nif (BIG_ENDIAN_SYSTEM_DETECTED)\n    FLB_DEFINITION(FLB_HAVE_BIG_ENDIAN_SYSTEM)\nelse()\n    FLB_DEFINITION(FLB_HAVE_LITTLE_ENDIAN_SYSTEM)\nendif ()\n\n# Configuration file YAML format support\nif(FLB_CONFIG_YAML)\n  find_package(PkgConfig)\n  # libyaml's corresponding pkg-config file is yaml-0.1.pc.\n  # We should search it first.\n  pkg_check_modules(LIBYAML QUIET yaml-0.1)\n\n  if (LIBYAML_FOUND)\n    # For if(FLB_HAVE_LIBYAML) clause on CMakeList.txt.\n    set(FLB_HAVE_LIBYAML 1)\n    FLB_DEFINITION(FLB_HAVE_LIBYAML)\n    # For non-standard libyaml installation paths such as homebrew bottled libyaml.\n    include_directories(${LIBYAML_INCLUDEDIR})\n    link_directories(${LIBYAML_LIBRARY_DIRS})\n  else()\n    if (FLB_LIBYAML_DIR)\n      set(LIBYAML_LIBRARY_DIRS \"${FLB_LIBYAML_DIR}/lib\")\n      set(LIBYAML_INCLUDEDIR \"${FLB_LIBYAML_DIR}/include\")\n      message(STATUS \"specified libyaml dir: ${FLB_LIBYAML_DIR}\")\n      if (MSVC)\n        FLB_DEFINITION(YAML_DECLARE_STATIC)\n      endif ()\n      set(FLB_HAVE_LIBYAML 1)\n      FLB_DEFINITION(FLB_HAVE_LIBYAML)\n      include_directories(${LIBYAML_INCLUDEDIR})\n      link_directories(${LIBYAML_LIBRARY_DIRS})\n    else ()\n      # Requires libyaml support\n      check_c_source_compiles(\"\n      #include <yaml.h>\n      int main() {\n        yaml_parser_t parser;\n        return 0;\n      }\" FLB_HAVE_LIBYAML)\n\n      if(NOT FLB_HAVE_LIBYAML)\n        message(FATAL_ERROR\n          \"YAML development dependencies required for YAML configuration format handling.\\n\"\n          \"This is a build time dependency, you can either install the \"\n          \"dependencies or disable the feature setting the CMake option \"\n          \"-DFLB_CONFIG_YAML=Off .\"\n        )\n      endif()\n    endif ()\n\n    FLB_DEFINITION(FLB_HAVE_LIBYAML)\n  endif()\nendif()\n\n# check attribute alloc_size\ncheck_c_source_compiles(\"\n#include <stdlib.h>\n__attribute__ ((alloc_size(1, 2))) static void* f(size_t a, size_t b) {\n    return calloc(a, b);\n}\nint main() {\n    f(1, 2);\n    return 0;\n}\n\" FLB_HAVE_ATTRIBUTE_ALLOC_SIZE)\nif(FLB_HAVE_ATTRIBUTE_ALLOC_SIZE)\n  FLB_DEFINITION(FLB_HAVE_ATTRIBUTE_ALLOC_SIZE)\nendif()\n\n# parameters for flb_msgpack_raw_to_json_sds buffer strategy\nif (NOT DEFINED FLB_MSGPACK_TO_JSON_INIT_BUFFER_SIZE)\n  FLB_DEFINITION_VAL(FLB_MSGPACK_TO_JSON_INIT_BUFFER_SIZE 2.0)\nelse()\n  FLB_DEFINITION_VAL(FLB_MSGPACK_TO_JSON_INIT_BUFFER_SIZE ${FLB_MSGPACK_TO_JSON_INIT_BUFFER_SIZE})\nendif()\n\nif (NOT DEFINED FLB_MSGPACK_TO_JSON_REALLOC_BUFFER_SIZE)\n  FLB_DEFINITION_VAL(FLB_MSGPACK_TO_JSON_REALLOC_BUFFER_SIZE 0.10)\nelse()\n  FLB_DEFINITION_VAL(FLB_MSGPACK_TO_JSON_REALLOC_BUFFER_SIZE ${FLB_MSGPACK_TO_JSON_REALLOC_BUFFER_SIZE})\nendif()\n\n# Build tools/xxd-c\nadd_subdirectory(tools/xxd-c)\n\n# Static configuration generator (using xxd-c)\nif(FLB_STATIC_CONF)\n  FLB_DEFINITION(FLB_HAVE_STATIC_CONF)\n  add_subdirectory(gen_static_conf)\nendif()\n\n# Special definition to set the coroutine stack size\nif(FLB_CORO_STACK_SIZE)\n  add_definitions(-DFLB_CORO_STACK_SIZE=${FLB_CORO_STACK_SIZE})\n  set(FLB_BUILD_FLAGS \"${FLB_BUILD_FLAGS}#ifndef FLB_CORO_STACK_SIZE\\n#define FLB_CORO_STACK_SIZE ${FLB_CORO_STACK_SIZE}\\n#endif\\n\")\nelse()\n\nendif()\n\nset(FLB_PROG_NAME \"Fluent Bit\")\nset(FLB_OUT_NAME \"fluent-bit\")\n\nif(FLB_PROXY_GO)\n  FLB_DEFINITION(FLB_HAVE_PROXY_GO)\nendif()\n\nif(\"${GNU_HOST}\" STREQUAL \"\")\n    set(AUTOCONF_HOST_OPT \"\")\nelse()\n    set(AUTOCONF_HOST_OPT \"--host=${GNU_HOST}\")\nendif()\n\nif(CMAKE_GENERATOR MATCHES \"Ninja\")\n  if(FLB_SYSTEM_WINDOWS)\n    MESSAGE(FATAL_ERROR \"Building with Ninja is not supported on Windows\")\n  else()\n    set(EXTERNAL_BUILD_TOOL \"make\")\n  endif()\nelse()\n  set(EXTERNAL_BUILD_TOOL \"$(MAKE)\")\nendif()\n\n# Memory Allocator\n# ================\nif(FLB_JEMALLOC AND ${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n  if(FLB_PREFER_SYSTEM_LIB_JEMALLOC)\n    find_package(PkgConfig)\n    pkg_check_modules(JEMALLOC jemalloc>=5.0.0)\n  endif()\n  if(JEMALLOC_FOUND)\n    include_directories(${JEMALLOC_INCLUDE_DIRS})\n    link_directories(${JEMALLOC_LIBRARY_DIRS})\n  else()\n    FLB_DEFINITION(JEMALLOC_MANGLE)\n\n    # Add support for options like page size, if empty we default it\n    if(NOT DEFINED FLB_JEMALLOC_OPTIONS OR \"${FLB_JEMALLOC_OPTIONS}\" STREQUAL \"\")\n      set(FLB_JEMALLOC_OPTIONS \"--with-lg-quantum=3\")\n    endif()\n    # Split into a list so CMake handles it correctly when passing to configure command\n    separate_arguments(FLB_JEMALLOC_OPTIONS_LIST UNIX_COMMAND ${FLB_JEMALLOC_OPTIONS})\n    message(STATUS \"jemalloc configure: ${FLB_JEMALLOC_OPTIONS_LIST}\")\n\n    # Link to Jemalloc as an external dependency\n    set(FLB_LIBJEMALLOC_PATH \"${CMAKE_CURRENT_BINARY_DIR}/lib/libjemalloc_pic.a\")\n    ExternalProject_Add(jemalloc\n      SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/lib/jemalloc-5.3.0\n      CONFIGURE_COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/lib/jemalloc-5.3.0/configure ${AUTOCONF_HOST_OPT} \"${FLB_JEMALLOC_OPTIONS_LIST}\" --prefix=<INSTALL_DIR>\n      CFLAGS=-std=gnu99\\ -Wall\\ -pipe\\ -g3\\ -O3\\ -funroll-loops\n      BUILD_COMMAND ${EXTERNAL_BUILD_TOOL}\n      BUILD_BYPRODUCTS ${FLB_LIBJEMALLOC_PATH}\n      INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/\n      INSTALL_COMMAND ${EXTERNAL_BUILD_TOOL} install_lib_static install_include)\n    add_library(libjemalloc STATIC IMPORTED GLOBAL)\n    set_target_properties(libjemalloc PROPERTIES IMPORTED_LOCATION ${FLB_LIBJEMALLOC_PATH})\n    add_dependencies(libjemalloc jemalloc)\n    include_directories(\"${CMAKE_BINARY_DIR}/include/\")\n    set(JEMALLOC_LIBRARIES \"libjemalloc\")\n  endif()\n  FLB_DEFINITION(FLB_HAVE_JEMALLOC)\nelse()\n  FLB_OPTION(FLB_JEMALLOC OFF)\nendif()\n\n# LibBacktrace (friendly stacktrace support)\n# =========================================\nif(FLB_BACKTRACE)\n  if(FLB_PREFER_SYSTEM_LIB_BACKTRACE)\n    find_path(LIBBACKTRACE_INCLUDE_DIRS NAMES backtrace.h)\n    find_library(LIBBACKTRACE_LIBRARIES NAMES backtrace)\n  endif()\n  if(LIBBACKTRACE_INCLUDE_DIRS AND LIBBACKTRACE_LIBRARIES)\n    message(STATUS \"libbacktrace found (${LIBBACKTRACE_LIBRARIES})\")\n    include_directories(${LIBBACKTRACE_INCLUDE_DIRS})\n    link_directories(${LIBBACKTRACE_LIBRARY_DIRS})\n  else()\n    message(STATUS \"libbacktrace not found, building ourselves\")\n    if (CMAKE_OSX_SYSROOT)\n      # From macOS Mojave, /usr/include does not store C SDK headers.\n      # For libbacktrace building on macOS, we have to tell C headers where they are located.\n      set(DEPS_C_COMPILER \"${CMAKE_C_COMPILER} -isysroot ${CMAKE_OSX_SYSROOT}\")\n    else()\n      set(DEPS_C_COMPILER \"${CMAKE_C_COMPILER}\")\n    endif()\n    set(FLB_LIBBACKTRACE_PATH \"${CMAKE_CURRENT_BINARY_DIR}/backtrace-prefix/lib/libbacktrace.a\")\n    ExternalProject_Add(backtrace\n      SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/lib/libbacktrace-8602fda/\n      CONFIGURE_COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/lib/libbacktrace-8602fda/configure ${AUTOCONF_HOST_OPT} --prefix=<INSTALL_DIR> --enable-shared=no --enable-static=yes\n      BUILD_COMMAND ${EXTERNAL_BUILD_TOOL}\n      BUILD_BYPRODUCTS ${FLB_LIBBACKTRACE_PATH}\n      INSTALL_COMMAND ${EXTERNAL_BUILD_TOOL} DESTDIR= install\n      )\n    add_library(libbacktrace STATIC IMPORTED GLOBAL)\n    set_target_properties(libbacktrace PROPERTIES IMPORTED_LOCATION ${FLB_LIBBACKTRACE_PATH})\n    add_dependencies(libbacktrace backtrace)\n    include_directories(\"${CMAKE_CURRENT_BINARY_DIR}/backtrace-prefix/include/\")\n    set(LIBBACKTRACE_LIBRARIES \"libbacktrace\")\n  endif()\n  FLB_DEFINITION(FLB_HAVE_LIBBACKTRACE)\nendif()\n\nif(FLB_IN_KAFKA OR FLB_OUT_KAFKA)\n  if(FLB_PREFER_SYSTEM_LIB_KAFKA)\n    find_package(PkgConfig)\n    pkg_check_modules(KAFKA rdkafka>=2.3.0)\n  endif()\n  if(KAFKA_FOUND)\n    include_directories(${KAFKA_INCLUDE_DIRS})\n    link_directories(${KAFKA_LIBRARY_DIRS})\n  else()\n    include(cmake/kafka.cmake)\n  endif()\nendif()\n\n# Onigmo (Regex Engine) options\n# =====================\nif(FLB_REGEX)\n  option(ONIGMO_SHARED_LIB    OFF)\n  option(ONIGMO_CTESTS        OFF)\n  option(ONIGMO_CTESTS_SAMPLE OFF)\n  option(ONIGMO_PYTHON_TESTS  OFF)\n  FLB_DEFINITION(FLB_HAVE_REGEX)\n\n  if (FLB_SYSTEM_WINDOWS)\n    # We need this line in order to link libonigmo.lib statically.\n    # Read onigmo/README for details.\n    FLB_DEFINITION_VAL(ONIG_EXTERN \"extern\")\n  endif()\n  add_subdirectory(${FLB_PATH_LIB_ONIGMO} EXCLUDE_FROM_ALL)\nendif()\n\n# tutf8e (UTF8 Encoding)\n# =====================\nif(FLB_UTF8_ENCODER)\n  FLB_DEFINITION(FLB_HAVE_UTF8_ENCODER)\nendif()\n\n# avro-c (Avro Encoding)\n# =====================\nif(FLB_AVRO_ENCODER)\n  FLB_DEFINITION(FLB_HAVE_AVRO_ENCODER)\nendif()\n\n# LuaJIT (Scripting Support)\n# ==========================\nif(FLB_LUAJIT)\n  if(FLB_PREFER_SYSTEM_LIB_LUAJIT)\n    find_package(PkgConfig)\n    pkg_check_modules(LUAJIT luajit>=2.1.0)\n  endif()\n  if(LUAJIT_FOUND)\n    include_directories(${LUAJIT_INCLUDE_DIRS})\n    link_directories(${LUAJIT_LIBRARY_DIRS})\n  else()\n    include(cmake/luajit.cmake)\n  endif()\n  FLB_DEFINITION(FLB_HAVE_LUAJIT)\nendif()\n\n# PostgreSQL\n# ==========\nfind_package(PostgreSQL)\nif(FLB_OUT_PGSQL AND (NOT PostgreSQL_FOUND))\n   FLB_OPTION(FLB_OUT_PGSQL OFF)\nendif()\n\n# Arrow GLib\n# ==========\nfind_package(PkgConfig)\npkg_check_modules(ARROW_GLIB QUIET arrow-glib)\nif(FLB_ARROW AND ARROW_GLIB_FOUND)\n  FLB_DEFINITION(FLB_HAVE_ARROW)\nelse()\n  set(FLB_ARROW OFF)\nendif()\n\n# EBPF Support\n# ============\nif (FLB_IN_EBPF)\n  find_package(PkgConfig)\n\n  # Check for libbpf with pkg-config\n  pkg_check_modules(LIBBPF libbpf>=0.5.0)\n\n  if (LIBBPF_FOUND)\n    message(STATUS \"libbpf found: ${LIBBPF_LIBRARIES}\")\n    include_directories(${LIBBPF_INCLUDE_DIRS})\n    list(APPEND EXTRA_LIBS ${LIBBPF_LIBRARIES})\n  else()\n    # Manually find the library if pkg-config fails\n    find_library(LIBBPF_LIBRARY NAMES bpf REQUIRED)\n    if (LIBBPF_LIBRARY)\n      message(STATUS \"Found libbpf: ${LIBBPF_LIBRARY}\")\n      list(APPEND EXTRA_LIBS ${LIBBPF_LIBRARY})\n    else()\n      if (FLB_SYSTEM_LINUX)\n        message(FATAL_ERROR \"libbpf is required on Linux. Please install libbpf or ensure it is in your library path.\")\n      else()\n        message(STATUS \"libbpf is not found. Disabling eBPF support.\")\n        set(FLB_IN_EBPF OFF)\n      endif()\n    endif()\n  endif()\n\nendif()\n\n# Pthread Local Storage\n# =====================\n# By default we expect the compiler already support thread local storage\n# through __thread type, otherwise Fluent Bit fallback to the old POSIX\n# pthread mode (pthread_key_t), or it can be forced setting FLB_POSIX_TLS\n# for testing/compatibility purposes.\nif(NOT FLB_POSIX_TLS)\n  check_c_source_compiles(\"\n   __thread int a;\n   int main() {\n       __tls_get_addr(0);\n       return 0;\n   }\" FLB_HAVE_C_TLS)\n  if(FLB_HAVE_C_TLS)\n    FLB_DEFINITION(FLB_HAVE_C_TLS)\n  endif()\nendif()\n\n# accept(4)\ncheck_c_source_compiles(\"\n    #define _GNU_SOURCE\n    #include <stdio.h>\n    #include <sys/socket.h>\n    int main() {\n        accept4(0, NULL, NULL, 0);\n        return 0;\n    }\" FLB_HAVE_ACCEPT4)\nif(FLB_HAVE_ACCEPT4)\n  FLB_DEFINITION(FLB_HAVE_ACCEPT4)\nendif()\n\n# inotify_init(2)\nif(FLB_INOTIFY)\n  check_c_source_compiles(\"\n    #include <sys/inotify.h>\n    int main() {\n        return inotify_init1(0);\n    }\" FLB_HAVE_INOTIFY)\n  if(FLB_HAVE_INOTIFY)\n    FLB_DEFINITION(FLB_HAVE_INOTIFY)\n  endif()\nendif()\n\ninclude(CheckSymbolExists)\n\n# Check for getentropy(3)\ncheck_symbol_exists(getentropy \"unistd.h\" HAVE_GETENTROPY)\nif(HAVE_GETENTROPY)\n  FLB_DEFINITION(FLB_HAVE_GETENTROPY)\nendif()\n\n# getentropy(3) is in sys/random.h on mac\ncheck_symbol_exists(getentropy \"sys/random.h\" HAVE_GETENTROPY_SYS_RANDOM)\nif(HAVE_GETENTROPY_SYS_RANDOM)\n  FLB_DEFINITION(FLB_HAVE_GETENTROPY_SYS_RANDOM)\nendif()\n\nconfigure_file(\n  \"${PROJECT_SOURCE_DIR}/include/fluent-bit/flb_info.h.in\"\n  \"${PROJECT_SOURCE_DIR}/include/fluent-bit/flb_info.h\"\n  )\n\nconfigure_file(\n  \"${PROJECT_SOURCE_DIR}/include/fluent-bit/flb_version.h.in\"\n  \"${PROJECT_SOURCE_DIR}/include/fluent-bit/flb_version.h\"\n  )\n\nconfigure_file(\n  \"${PROJECT_SOURCE_DIR}/include/fluent-bit/tls/flb_tls_info.h.in\"\n  \"${PROJECT_SOURCE_DIR}/include/fluent-bit/tls/flb_tls_info.h\"\n  )\n\n# Installation Directories\n# ========================\nif(${CMAKE_SYSTEM_NAME} MATCHES \"Windows\")\n  set(FLB_INSTALL_BINDIR \"bin\")\n  set(FLB_INSTALL_LIBDIR \"lib\")\n  set(FLB_INSTALL_CONFDIR \"conf\")\n  set(FLB_INSTALL_INCLUDEDIR \"include\")\nelse()\n  set(FLB_INSTALL_BINDIR ${CMAKE_INSTALL_FULL_BINDIR})\n  set(FLB_INSTALL_LIBDIR \"${CMAKE_INSTALL_LIBDIR}/${FLB_OUT_NAME}\")\n  set(FLB_INSTALL_CONFDIR \"${CMAKE_INSTALL_SYSCONFDIR}/${FLB_OUT_NAME}/\")\n  set(FLB_INSTALL_INCLUDEDIR \"${CMAKE_INSTALL_PREFIX}/include\")\nendif()\n\n# Instruct CMake to build the Fluent Bit Core\nadd_subdirectory(include)\nadd_subdirectory(plugins)\nadd_subdirectory(src)\n\nif(NOT FLB_SHARED_LIB)\n  set(FLB_EXAMPLES OFF)\nendif()\n\nif(FLB_EXAMPLES)\n  add_subdirectory(examples)\nendif()\n\nif(FLB_TESTS_RUNTIME)\n  enable_testing()\n  add_subdirectory(tests/runtime/)\n  add_subdirectory(tests/runtime_shell/)\nendif()\n\nif(FLB_TESTS_INTERNAL)\n  enable_testing()\n  add_subdirectory(tests/internal/)\nendif()\n\n# Installer Generation (Cpack)\n# ============================\n\nset(CPACK_PACKAGE_VERSION ${FLB_VERSION_STR})\nset(CPACK_PACKAGE_NAME \"fluent-bit\")\n\nset(CPACK_PACKAGE_RELEASE 1)\nset(CPACK_PACKAGE_CONTACT \"Eduardo Silva <eduardo.silva@chronosphere.io>\")\nset(CPACK_PACKAGE_VENDOR \"Chronosphere Inc.\")\nset(CPACK_RESOURCE_FILE_LICENSE \"${PROJECT_SOURCE_DIR}/LICENSE\")\nset(CPACK_PACKAGING_INSTALL_PREFIX \"/\")\n\nset(CPACK_PACKAGE_FILE_NAME \"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_PACKAGE_RELEASE}.${CMAKE_SYSTEM_PROCESSOR}\")\n\nif(FLB_SYSTEM_WINDOWS)\n  set(CPACK_GENERATOR \"NSIS\" \"ZIP\" \"WIX\")\n\n  if (CMAKE_SYSTEM_PROCESSOR MATCHES \"^(ARM64|AARCH64)\")\n    set(CPACK_PACKAGE_FILE_NAME \"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-winarm64\")\n  elseif(CMAKE_SIZEOF_VOID_P EQUAL 8)\n    set(CPACK_PACKAGE_FILE_NAME \"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-win64\")\n  else()\n    set(CPACK_PACKAGE_FILE_NAME \"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-win32\")\n  endif()\nendif()\n\n# Enable components\nset(CPACK_DEB_COMPONENT_INSTALL ON)\nset(CPACK_RPM_COMPONENT_INSTALL ON)\nset(CPACK_productbuild_COMPONENT_INSTALL ON)\nset(CPACK_COMPONENTS_ALL ${CPACK_COMPONENTS_ALL} binary library headers headers-extra)\nset(CPACK_COMPONENTS_GROUPING \"ONE_PER_GROUP\")\n\nset(CPACK_COMPONENT_BINARY_GROUP \"RUNTIME\")\nset(CPACK_COMPONENT_LIBRARY_GROUP \"RUNTIME\")\n\n# Debian package setup and name sanitizer\nset(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)\n\nfind_program(DPKG_PROGRAM dpkg DOC \"dpkg program of Debian-based systems\")\nif(DPKG_PROGRAM)\n  execute_process(\n    COMMAND ${DPKG_PROGRAM} --print-architecture\n    OUTPUT_VARIABLE CPACK_DEBIAN_PACKAGE_ARCHITECTURE\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n    )\n\n  set(CPACK_DEBIAN_HEADERS_FILE_NAME \"${CPACK_PACKAGE_NAME}_${CPACK_PACKAGE_VERSION}_${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}-headers.deb\")\n  set(CPACK_DEBIAN_HEADERS_EXTRA_FILE_NAME \"${CPACK_PACKAGE_NAME}_${CPACK_PACKAGE_VERSION}_${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}-headers-extra.deb\")\n  set(CPACK_DEBIAN_RUNTIME_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}\")\n  set(CPACK_DEBIAN_RUNTIME_FILE_NAME \"${CPACK_PACKAGE_NAME}_${CPACK_PACKAGE_VERSION}_${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}.deb\")\n  set(CPACK_DEBIAN_RUNTIME_PACKAGE_CONTROL_EXTRA\n    ${PROJECT_SOURCE_DIR}/cpack/debian/conffiles\n    )\n\n  if(FLB_RUN_LDCONFIG)\n    set(LDCONFIG_DIR ${FLB_INSTALL_LIBDIR})\n    file(WRITE ${PROJECT_BINARY_DIR}/scripts/postinst \"\nmkdir -p /etc/ld.so.conf.d\necho \\\"${LDCONFIG_DIR}\\\" > /etc/ld.so.conf.d/libfluent-bit.conf\nldconfig\n    \")\n    file(WRITE ${PROJECT_BINARY_DIR}/scripts/prerm \"\nrm -f -- /etc/ld.so.conf.d/libfluent-bit.conf\nldconfig\n    \")\n    set(CPACK_DEBIAN_RUNTIME_PACKAGE_CONTROL_EXTRA \"${PROJECT_BINARY_DIR}/scripts/postinst;${PROJECT_BINARY_DIR}/scripts/prerm\")\n  endif(FLB_RUN_LDCONFIG)\n\nendif()\n\n# RPM Generation information\nset(CPACK_RPM_PACKAGE_GROUP \"System Environment/Daemons\")\nset(CPACK_RPM_PACKAGE_LICENSE \"Apache v2.0\")\nset(CPACK_RPM_PACKAGE_RELEASE ${CPACK_PACKAGE_RELEASE})\nset(CPACK_PACKAGE_DESCRIPTION_FILE \"${PROJECT_SOURCE_DIR}/cpack/description\")\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"Fast data collector for Linux\")\nset(CPACK_RPM_SPEC_MORE_DEFINE \"%define ignore \\#\")\nset(CPACK_RPM_RUNTIME_USER_FILELIST\n  \"%config(noreplace) /etc/${FLB_OUT_NAME}/${FLB_OUT_NAME}.conf\"\n  \"%config(noreplace) /etc/${FLB_OUT_NAME}/parsers.conf\"\n  \"%config(noreplace) /etc/${FLB_OUT_NAME}/plugins.conf\"\n  \"%ignore /lib\"\n  \"%ignore /lib/systemd\"\n  \"%ignore /lib/systemd/system\"\n  \"%ignore /lib64\"\n  \"%ignore /lib64/pkgconfig\"\n  \"%ignore /usr/local\"\n  \"%ignore /usr/local/bin\"\n  \"%ignore /opt\"\n  \"%ignore /etc\")\n\nset(CPACK_RPM_PACKAGE_AUTOREQ ON)\nset(CPACK_RPM_RUNTIME_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}\")\nset(CPACK_RPM_HEADERS_FILE_NAME \"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_PACKAGE_RELEASE}.${CMAKE_SYSTEM_PROCESSOR}-headers.rpm\")\nset(CPACK_RPM_HEADERS_EXTRA_FILE_NAME \"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_PACKAGE_RELEASE}.${CMAKE_SYSTEM_PROCESSOR}-headers-extra.rpm\")\nset(CPACK_RPM_RUNTIME_FILE_NAME \"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_PACKAGE_RELEASE}.${CMAKE_SYSTEM_PROCESSOR}.rpm\")\n\n# CPack: DEB\nset(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)\n\n# CPack: Windows System\nif(CPACK_GENERATOR MATCHES \"NSIS\")\n  set(CPACK_MONOLITHIC_INSTALL 1)\n  set(CPACK_PACKAGE_INSTALL_DIRECTORY \"fluent-bit\")\nendif()\n\n# CPack: Windows System w/ WiX\nif(CPACK_GENERATOR MATCHES \"WIX\")\n  set(CPACK_WIX_UPGRADE_GUID cb6825fd-37e6-4596-a55d-6d490d4fe178)\n  configure_file(LICENSE \"${CMAKE_CURRENT_BINARY_DIR}/LICENSE.txt\")\n  configure_file(${CMAKE_SOURCE_DIR}/cpack/wix/WIX.template.in.cmakein\n    ${CMAKE_CURRENT_BINARY_DIR}/WIX.template.in)\n  # Specify LICENSE file that has .txt extension\n  set(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_BINARY_DIR}/LICENSE.txt\")\n  set(CPACK_WIX_TEMPLATE ${CMAKE_CURRENT_BINARY_DIR}/WIX.template.in)\n  set(CPACK_WIX_LIGHT_EXTENSIONS \"WixUtilExtension\")\nendif()\n\nif(FLB_SYSTEM_MACOS)\n  # Determine the platform suffix\n  execute_process(\n    COMMAND uname -m\n    RESULT_VARIABLE UNAME_M_RESULT\n    OUTPUT_VARIABLE UNAME_ARCH\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n    )\n  if (UNAME_M_RESULT EQUAL 0 AND UNAME_ARCH STREQUAL \"arm64\")\n    set(FLUENT_BIT_PKG ${CMAKE_CURRENT_BINARY_DIR}/fluent-bit-${FLB_VERSION_STR}-apple)\n  elseif(UNAME_M_RESULT EQUAL 0 AND UNAME_ARCH STREQUAL \"x86_64\")\n    set(FLUENT_BIT_PKG ${CMAKE_CURRENT_BINARY_DIR}/fluent-bit-${FLB_VERSION_STR}-intel)\n  else()\n    set(FLUENT_BIT_PKG ${CMAKE_CURRENT_BINARY_DIR}/fluent-bit-${FLB_VERSION_STR}-${UNAME_ARCH})\n  endif()\n\n  if (CPACK_GENERATOR MATCHES \"productbuild\")\n    set(CPACK_SET_DESTDIR \"ON\")\n    configure_file(cpack/macos/welcome.txt.cmakein ${CMAKE_CURRENT_BINARY_DIR}/welcome.txt)\n    configure_file(cpack/macos/fluent-bit.plist.cmakein ${CMAKE_CURRENT_BINARY_DIR}/${FLB_OUT_NAME}.plist)\n    configure_file(LICENSE ${CMAKE_CURRENT_BINARY_DIR}/LICENSE.txt)\n    find_program(CONVERTER textutil)\n    if (NOT CONVERTER)\n      message(FATAL_ERROR \"textutil not found.\")\n    endif()\n    if (CONVERTER)\n      execute_process(COMMAND ${CONVERTER} -convert html \"${CMAKE_SOURCE_DIR}/README.md\" -output \"${CMAKE_BINARY_DIR}/README.html\")\n    endif()\n    set(CPACK_PACKAGE_FILE_NAME \"${FLUENT_BIT_PKG}\")\n    set(CPACK_RESOURCE_FILE_WELCOME ${CMAKE_CURRENT_BINARY_DIR}/welcome.txt)\n    set(CPACK_RESOURCE_FILE_LICENSE ${CMAKE_CURRENT_BINARY_DIR}/LICENSE.txt)\n    set(CPACK_RESOURCE_FILE_README ${CMAKE_CURRENT_BINARY_DIR}/README.html)\n    set(CPACK_PRODUCTBUILD_IDENTIFIER \"io.fluentbit.${FLB_OUT_NAME}\")\n    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${FLB_OUT_NAME}.plist\n      COMPONENT binary\n      DESTINATION /Library/LaunchDaemons)\n  endif()\nendif()\n\ninclude(CPack)\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 3.3720703125,
          "content": "# Fluent Bit Code Owners\n# ----------------------\n# The following file list the code owners or responsibles for code\n# review on different components or extensions of Fluent Bit, applicable for\n# any original code author (not only maintainers).\n#\n# NOTE: if you are a original code author and you are not listed here, please\n# open a PR with the proper modification :)\n\n# Global Owners\n# -------------\n*                        @edsiper @leonardo-albertovich @fujimotos @koleini\n\n# Build System & Portability\n# --------------------------\n/CMakeLists.txt          @fujimotos @niedbalski @patrick-stephens @celalettin1286\n/cmake/                  @fujimotos @niedbalski @patrick-stephens @celalettin1286\n\n# CI\n# -------------------------\n/.github/                @niedbalski @patrick-stephens @celalettin1286\n/appveyor.yml            @niedbalski @patrick-stephens @celalettin1286\n/dockerfiles/            @niedbalski @patrick-stephens @celalettin1286\n/packaging/              @niedbalski @patrick-stephens @celalettin1286\n/codebase-structure.svg  @niedbalski @patrick-stephens @celalettin1286\n/install.sh              @niedbalski @patrick-stephens @celalettin1286\n\n# Core: Signv4\n# ------------\n/src/flb_signv4.c        @pettitwesley\n/src/flb_lib.c           @edsiper @niedbalski\n\n# Core: AWS Auth & Utils\n# ------------\n/src/aws                 @pettitwesley\n\n# AWS header files\n/include/aws                   @pettitwesley\n/include/flb_aws_credentials.h @pettitwesley\n/include/flb_aws_util.h        @pettitwesley\n\n# Core: Stream Processor\n# ----------------\n/src/stream_processor/   @koleini\n\n# Input Plugins\n# -------------\n/plugins/in_collectd     @fujimotos\n/plugins/in_docker       @nokute78 @edsiper\n/plugins/in_dummy        @nokute78\n/plugins/in_netif        @nokute78\n/plugins/in_statsd       @fujimotos\n/plugins/in_thermal      @nokute78\n/plugins/in_winlog       @fujimotos\n\n# Filter Plugins\n# --------------\n/plugins/filter_aws      @pettitwesley\n/plugins/filter_ecs      @pettitwesley\n\n# Output Plugins\n# --------------\n/plugins/out_datadog     @nokute78 @edsiper\n/plugins/out_es          @pettitwesley @edsiper\n/plugins/out_pgsql       @sxd\n/plugins/out_stackdriver @braydonk @jefferbrecht @jeffluoo\n\n# AWS Plugins\n/plugins/out_s3               @pettitwesley\n/plugins/out_cloudwatch_logs  @pettitwesley\n/plugins/out_kinesis_firehose @pettitwesley\n/plugins/out_kinesis_streams  @pettitwesley\n/plugins/out_opensearch       @pettitwesley @edsiper\n\n# AWS test code\n/tests/internal/aws             @pettitwesley\n/tests/internal/aws_*           @pettitwesley\n/tests/runtime/filter_ecs.c     @pettitwesley\n/tests/runtime/filter_aws.c     @pettitwesley\n/tests/runtime/out_cloudwatch.c @pettitwesley\n/tests/runtime/out_firehose.c   @pettitwesley\n/tests/runtime/out_kinesis.c    @pettitwesley\n/tests/runtime/out_opensearch.c @pettitwesley @edsiper\n/tests/runtime/out_s3.c         @pettitwesley\n\n# Google test code\n# --------------\n/tests/runtime/out_stackdriver.c @braydonk @jefferbrecht @jeffluoo\n/tests/runtime/data/stackdriver  @braydonk @jefferbrecht @jeffluoo\n\n# Devcontainer\n/.devcontainer                  @patrick-stephens @niedbalski @edsiper\n\n# Calyptia Fleet\n/include/fluent-bit/calyptia/       @pwhelan @patrick-stephens @niedbalski\n/plugins/custom_calyptia/       @pwhelan @patrick-stephens @niedbalski\n/plugins/custom_calyptia/       @pwhelan @patrick-stephens @niedbalski\n/plugins/out_calyptia/     @pwhelan @patrick-stephens @niedbalski\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.1396484375,
          "content": "# Community Code of Conduct\n\nFluent Bit follows the [CNCF Code of Conduct](https://github.com/cncf/foundation/blob/master/code-of-conduct.md).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 9.5712890625,
          "content": "# Contribution Guidelines for Fluent-Bit\n\nWe build Open Source software and we invite everyone to join us and contribute. So if you are interested into participate, please refer to the guidelines below.\n\n## Developer Guide\n\n[Developer Guide with code examples](DEVELOPER_GUIDE.md).\n\n## GIT Repositories\n\nAll code changes and submissions happens on [Github](http://github.com), that means that to start contributing you should clone the target repository, perform local changes and then do a Pull Request. For more details about the workflow we suggest you check the following documents:\n\n - https://help.github.com/articles/using-pull-requests\n - https://help.github.com/articles/creating-a-pull-request\n\n## Coding Style\n\nOur development coding style for C is based on the Apache C style guidelines, we use similar rules, to get more details about it please check the following URL:\n\n - https://httpd.apache.org/dev/styleguide.html\n\nYou have to pay attention to the code indentation, tabs are 4 spaces, spaces on conditionals, etc. If your code submission is not aligned, it will be rejected.\n\n### General requirements\n\n#### Line Length\n\nFluent Bit source code lines length should not exceed 90 characters.\n\n#### Braces usage on conditionals, loops and functions:\n\nAlways append braces to a conditional or loop expression, e.g:\n\n```c\nif (ret == -1) {\n    return -1;\n}\n```\n\nno matters if the code under the conditional is just one line, we need braces. Note that the opening brace is on the right side of the conditional and __not__ in the next line. Same rule applies for _while_() and do while() loop iterators\n\nFor __if__ and __else__ always respect a new line after the opening brace:\n\n```c\nif (ret == -1) {\n    return -1;\n}\nelse if (ret == 0) {\n    return 0;\n}\n```\n\nFor **function definitions** the brace position is different,  the opening brace is __always__ in the next line, e.g:\n\n```c\nint flb_something(int a, int b)\n{\n    return a + b;\n}\n```\n\n### Variable definitions\n\nVariables must be declared at the beginning of a function and not in the middle of the code, the following example demonstrate the wrong way to do it:\n\n```c\nint flb_something(int a, int b)\n{\n    if (a > 10) {\n        return 1;\n    }\n    else {\n        int ret;\n        ret = a + b;\n        return ret;\n    }\n}\n```\n\nthe proper way is to perform the variable definitions on top:\n\n```c\nint flb_something(int a, int b)\n{\n    int ret;\n\n    if (a > 10) {\n        return 1;\n    }\n    else {\n        ret = a + b;\n        return ret;\n    }\n}\n```\n\n### Functions and nested levels\n\nIf your function is too long where many nested levels exists, consider to split your function in different ones and declare the spitted parts as static functions if they don't be intended to be called out of the scope of the source code file in question.\n\n### Comments in the code\n\nCommenting code is always encouraged, that makes things easier to the reader to understand what the code is doing or aims to do.\n\nIn Fluent Bit, every code comment starts with a slash asterisk ```/*```  and ends with a asterisk slash ```*/```. If the text in the comment is longer than 80 characters, append a new commented line. We use the following format depending on the case:\n\n#### Single line comment\n\n```C\n/* This is my comment */\n```\n\n#### Multiline comment\n\n```c\n/*\n * This is my comment which is longer than 80 characters, so we must use the\n * multi-line type comments.\n */\n```\n\n\n\n\n\n## Commit Changes\n\nWhen you commit your local changes in your repository (before to push to Github), we need you take care of the following:\n\n - Your principal commit message (one line subject) **must be** prefixed with the core section name in lowercase plus a colon. If you are fixing an call from the engine the commit message should be:\n\n   ```\n   engine: fix handling of abc\n   ```\n\n   Expanding a bit the example feature message we could use the following command:\n\n   > $ git commit -a -s\n   >\n   > engine: fix handling of abc\n   >\n   > This patch fix a problem when managing the flush buffer of ABC output plugin. It adds\n   > a new routines to check proper return values and validate certain exceptions.\n   >\n   > the patch have been tested using tools A & B.\n   >\n   > Signed-off-by: Your Name <your@email.com>\n\n   If you want to see a real example, run the following command:\n\n   > $ git log 54ea8d0b164d949745b5f4b83959400469737b45\n\n   Your patches should be fully documented. That will make the review process faster for us and a faster merge for you.\n\n   Common components prefix are:\n\n   - utils:\n   - pack:\n   - sds:\n   - http_client:\n\n   As you can see prefixes are basically the file name of the source code file under [src](https://github.com/fluent/fluent-bit/tree/master/src) directory without the file prefix <u>flb_</u>.\n\n   When committing changes to code that's related to some plugins, the commit subject must be prefixed with the name of the plugin being changed, e.g:\n\n   - in_stdin:\n   - out_http:\n   - out_kafka:\n\n   please refer to the [plugins](https://github.com/fluent/fluent-bit/tree/master/plugins) directory as a reference\n\n- One single commit **must not** include changes to files that are different from the component specified in the subject, e.g: If you are extending flb_utils.c file, the git patch should not touch any other file than flb_utils.c or flb_utils.h.\n\n- One single commit **must not** include multiple prefixes to specify different areas being touched.\n\n - The subject of the commit **must not** be longer than 80 characters.\n\n - On the commit body, each line **must not** be longer than 80 characters.\n\n - On most of cases we want full description about what your patch is doing, the patch description should be self descriptive.. like for dummies. Do not assume everybody knows what you are doing and on each line do not exceed 80 characters.\n\n - When running the __git commit__ command, make sure you are using the __-s__ flag, that will add a Signed-off comment in the patch description. If your commit is not signed-off, Github DCO check will fail and your contribution will not be reviewed until that get's fixed.\n\n## Licensing\n\n[Fluent-Bit](http://fluentbit.io) is an Open Source project and all it code base _must_ be under the terms of the [Apache License v2.0](http://www.apache.org/licenses/LICENSE-2.0). When submitting changes to the core or any new plugin, you agreed to share that code under the license mentioned. All your source code files must have the following header:\n\n```\n/*  Fluent Bit\n *  ==========\n *  Copyright (C) 2015-2024 The Fluent Bit Authors\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n```\n\nDespite some licenses can be compatible with Apache, we want to keep things easy and clear avoiding a mix of Licenses across the project.\n\n## Code review, no feelings\n\nWhen we review your code submission, they must follow our coding style, the code should be clear enough, documented if required and the patch Subject and Description well formed (within others).\n\nIf your code needs some improvement, someone of the reviewers or core developers will write a comment in your Pull Request, so please take in count the suggestion there, otherwise your request will never be merged.\n\nDespite the effort that took for you to create the contribution, that is not an indication that the code have to be merged into upstream, everything will be reviewed and must be aligned as the code base.\n\n## Release branches\n\nFluent Bit follows this general branching strategy:\n\n* `master` is the next major version (not yet released)\n* `<major>` is the branch for an existing stable release\n\nGenerally a PR will target the default `master` branch so the changes will go into the next major release.\n\nOnce merged, this does not mean they will automatically go into the next minor release of the current series.\n\nA particular set of changes might want to be applied to the current or previous releases so please also submit a PR targeting the branch for the particular release series you want or think it should be applied to, e.g. if a change should go into a 1.8.X release then target the `1.8` branch.\n\n## Unit Tests\n\nFluent bit uses ctest for unit testing. \n\nThese tests are separated by internal and runtime tests which are in the `tests/internal` and `tests/runtime` directories respecitively. \n\nTo enable these tests they must be enabled using cmake.\n\nTo enable the runtime tests:\n\n```shell\n$ cd build ; cmake .. -DFLB_TESTS_RUNTIME=On\n```\n\nTo enable the internal tests:\n\n```shell\n$ cd build ; cmake .. -DFLB_TESTS_INTERNAL=On\n```\n\nTo enable both a combination of both `-DFLB_TESTS_RUNTIME` and `-DFLB_TESTS_INTERNAL` can be used.\n\nThese tests will be compiled along with the main fluent bit binary.\n\nThey can be run all at once by running `make test` or individually by running the relevant tests binary from the `build/bin` directory, ie:\n\n```shell\nbuild$ ./bin/flb-it-core-timeout\n...\nbuild$ ./bin/flb-rt-out_http\n...\n```\n\nIndividual tests can be run by passing the name of the test to the corresponding test binary:\n\n```shell\nbuild$ ./bin/flb-rt-filter_kubernetes kube_core_unescaping_json\n...\n```\n\nIf you have an extremely fast machine with multiple cores and/or threads it is also possible to execute all the tests in parallel using ctest:\n\n```shell\nbuild$ ctest -j${NUM_PROC}\n"
        },
        {
          "name": "CONTRIBUTING_DOCS.md",
          "type": "blob",
          "size": 0.09765625,
          "content": "please go to https://github.com/fluent/fluent-bit-docs/blob/master/CONTRIBUTING.md for more details."
        },
        {
          "name": "DEVELOPER_GUIDE.md",
          "type": "blob",
          "size": 36.5712890625,
          "content": "# Beginners Guide to Contributing to Fluent Bit\n\nAssuming you have some basic knowledge of C, this guide should help you understand how to make code\nchanges to Fluent Bit.\n\n## Table of Contents\n\n- [Beginners Guide to Contributing to Fluent Bit](#beginners-guide-to-contributing-to-fluent-bit)\n  - [Table of Contents](#table-of-contents)\n  - [Development Environment](#development-environment)\n    - [Devcontainer](#devcontainer)\n    - [Vagrant](#vagrant)\n  - [Libraries](#libraries)\n    - [Memory Management](#memory-management)\n    - [Strings](#strings)\n    - [HTTP Client](#http-client)\n    - [Linked Lists](#linked-lists)\n    - [Message Pack](#message-pack)\n  - [Concurrency](#concurrency)\n    - [Coroutine Code: How does it work?](#coroutine-code-how-does-it-work)\n    - [Practical Advice: How coroutines will affect your code](#practical-advice-how-coroutines-will-affect-your-code)\n      - [Filter Plugins](#filter-plugins)\n      - [Output plugins](#output-plugins)\n  - [Plugin API](#plugin-api)\n    - [Input](#input)\n    - [Filter](#filter)\n    - [Output](#output)\n    - [Config Maps](#config-maps)\n  - [Testing](#testing)\n    - [Building and Testing on Windows](#building-and-testing-on-windows)\n    - [Valgrind](#valgrind)\n  - [Need more help?](#need-more-help)\n\n## Development Environment\n\nDevelopment environments allow to work without any dependency locally.\n\n### Devcontainer\n\nA Development Container (or Dev Container for short) allows you to use a container as a full-featured development environment.\n\nThanks to [Visual Studio Code integration](https://code.visualstudio.com/docs/devcontainers/containers), devcontainers are managed easily.\n\n#### Prerequirements\n\nPlease refer to the [devcontainer documentation](https://code.visualstudio.com/docs/devcontainers/containers#_system-requirements) for full details on pre-requisites and installation.\n\n#### Using without optional tools\n\n```shell\ndocker run \\\n    --name devcontainer-fluent-bit \\\n    --volume $PWD/:/workspaces/fluent-bit \\\n    --user $UID:$GID \\\n    --tty \\\n    --detach \\\n    fluent/fluent-bit:latest-debug\n\ndocker exec --user root devcontainer-fluent-bit addgroup --system --gid $GID fluent-bit\ndocker exec --user root devcontainer-fluent-bit useradd --create-home --system --uid $UID --gid $GID fluent-bit\ndocker exec --user root devcontainer-fluent-bit sh -c 'mkdir -p /etc/sudoers.d; echo \"fluent-bit   ALL=(ALL:ALL) NOPASSWD:ALL\" > /etc/sudoers.d/fluent-bit'\ndocker exec -it devcontainer-fluent-bit bash\n\ncd /workspaces/fluent-bit\n```\n\nIf local applications need to access fluent-bit server or tcp/udp inputs, the ports must be publish with --publish flag. ex:\n\n```text\ndocker run \\\n--publish 2020:2020 \\\n--publish 80:80 \\\n...\n```\n\n### Vagrant\nVagrant enables the creation and configuration of lightweight, reproducible, and portable development environments.\n\n#### Prerequirements\n- [vagrant](https://www.vagrantup.com)\n- [vagrant providers](https://developer.hashicorp.com/vagrant/docs/providers)\n\n#### Using\n\n```shell\nvagrant up\nvagrant ssh\n```\n\n## Libraries\n\nMost external libraries are embedded in the project in the [/lib](/lib) folder. To keep its footprint low and make cross-platform builds simple, Fluent Bit attempts keep its dependency graph small.\n\nThe external library you are mostly likely to interact with is [msgpack](https://github.com/msgpack/msgpack-c).\n\nFor crypto, Fluent Bit uses [mbedtls](https://github.com/ARMmbed/mbedtls).\n\n### Memory Management\n\nWhen you write Fluent Bit code, you will use Fluent Bit's versions of the standard C functions for working with memory:\n\n- [`flb_malloc()`](include/fluent-bit/flb_mem.h) - equivalent to `malloc`, allocates memory.\n- [`flb_calloc()`](include/fluent-bit/flb_mem.h)  - equivalent to `calloc`, allocates memory and initializes it to zero.\n- [`flb_realloc()`](include/fluent-bit/flb_mem.h) - equivalent to `realloc`.\n- [`flb_free()`](include/fluent-bit/flb_mem.h) - equivalent to `free`, releases allocated memory.\n\nNote that many types have a specialized create and destroy function. For example,\n[`flb_sds_create()` and `flb_sds_destroy()`](include/fluent-bit/flb_sds.h) (more about this in the next section).\n\n### Strings\n\nFluent Bit has a stripped down version of the popular [SDS](https://github.com/antirez/sds) string library. See [flb_sds.h](include/fluent-bit/flb_sds.h) for the API.\n\nIn general, you should use SDS strings in any string processing code. SDS strings are fully compatible with any C function that accepts a null-terminated sequence of characters; to understand how they work, see the [explanation on Github](https://github.com/antirez/sds#how-sds-strings-work).\n\n### HTTP Client\n\nFluent Bit has its own network connection library. The key types and functions are defined in the following header files:\n\n- [flb_upstream.h](include/fluent-bit/flb_upstream.h)\n- [flb_http_client.h](include/fluent-bit/flb_http_client.h)\n- [flb_io.h](include/fluent-bit/flb_io.h)\n\nThe following code demonstrates making an HTTP request in Fluent Bit:\n\n```c\n#include <fluent-bit/flb_upstream.h>\n#include <fluent-bit/flb_io.h>\n#include <fluent-bit/flb_http_client.h>\n#include <fluent-bit/flb_info.h>\n#include <fluent-bit/flb_config.h>\n\n#define HOST  \"127.0.0.1\"\n#define PORT  80\n\nstatic flb_sds_t make_request(struct flb_config *config)\n{\n    struct flb_upstream *upstream;\n    struct flb_http_client *client;\n    size_t b_sent;\n    int ret;\n    struct flb_upstream_conn *u_conn;\n    flb_sds_t resp;\n\n    /* Create an 'upstream' context */\n    upstream = flb_upstream_create(config, HOST, PORT, FLB_IO_TCP, NULL);\n    if (!upstream) {\n        flb_error(\"[example] connection initialization error\");\n        return -1;\n    }\n\n    /* Retrieve a TCP connection from the 'upstream' context */\n    u_conn = flb_upstream_conn_get(upstream);\n    if (!u_conn) {\n        flb_error(\"[example] connection initialization error\");\n        flb_upstream_destroy(upstream);\n        return -1;\n    }\n\n    /* Create HTTP Client request/context */\n    client = flb_http_client(u_conn,\n                             FLB_HTTP_GET, metadata_path,\n                             NULL, 0,\n                             FLB_FILTER_AWS_IMDS_V2_HOST, 80,\n                             NULL, 0);\n\n    if (!client) {\n        flb_error(\"[example] count not create http client\");\n        flb_upstream_conn_release(u_conn);\n        flb_upstream_destroy(upstream);\n        return -1;\n    }\n\n    /* Perform the HTTP request */\n ret = flb_http_do(client, &b_sent)\n\n    /* Validate return status and HTTP status if set */\n    if (ret != 0 || client->resp.status != 200) {\n        if (client->resp.payload_size > 0) {\n            flb_debug(\"[example] Request failed and returned: \\n%s\",\n                      client->resp.payload);\n        }\n        flb_http_client_destroy(client);\n        flb_upstream_conn_release(u_conn);\n        flb_upstream_destroy(upstream);\n        return -1;\n    }\n\n    /* Copy payload response to an output SDS buffer */\n    data = flb_sds_create_len(client->resp.payload,\n                              client->resp.payload_size);\n\n    flb_http_client_destroy(client);\n    flb_upstream_conn_release(u_conn);\n    flb_upstream_destroy(upstream);\n\n    return resp;\n}\n```\n\nAn `flb_upstream` structure represents a host/endpoint that you want to call. Normally, you'd store this structure somewhere so that it can be re-used. An `flb_upstream_conn` represents a connection to that host for a single HTTP request. The connection structure should not be used for more than one request.\n\n### Linked Lists\n\nFluent Bit contains a library for constructing linked lists- [mk_list](lib/monkey/include/monkey/mk_core/mk_list.h). The type stores data as a circular linked list.\n\nThe [`mk_list.h`](lib/monkey/include/monkey/mk_core/mk_list.h) header file contains several macros and functions for use with the lists. The example below shows how to create a list, iterate through it, and delete an element.\n\n```c\n#include <monkey/mk_core/mk_list.h>\n#include <fluent-bit/flb_info.h>\n\nstruct item {\n    char some_data;\n\n    struct mk_list _head;\n};\n\nstatic int example()\n{\n    struct mk_list *tmp;\n    struct mk_list *head;\n    struct mk_list items;\n    int i;\n    int len;\n    char characters[] = \"abcdefghijk\";\n    struct item *an_item;\n\n    len = strlen(characters);\n\n    /* construct a list */\n    mk_list_init(&items);\n\n    for (i = 0; i < len; i++) {\n        an_item = flb_malloc(sizeof(struct item));\n        if (!an_item) {\n            flb_errno();\n            return -1;\n        }\n        an_item->some_data = characters[i];\n        mk_list_add(&an_item->_head, &items);\n    }\n\n    /* iterate through the list */\n    flb_info(\"Iterating through list\");\n    mk_list_foreach_safe(head, tmp, &items) {\n        an_item = mk_list_entry(head, struct item, _head);\n        flb_info(\"list item data value: %c\", an_item->some_data);\n    }\n\n    /* remove an item */\n    mk_list_foreach_safe(head, tmp, &items) {\n        an_item = mk_list_entry(head, struct item, _head);\n        if (an_item->some_data == 'b') {\n            mk_list_del(&an_item->_head);\n            flb_free(an_item);\n        }\n    }\n}\n```\n\n### Message Pack\n\nFluent Bit uses [msgpack](https://msgpack.org/index.html) to internally store data. If you write code for Fluent Bit, it is almost certain that you will interact with msgpack.\n\nFluent Bit embeds the [msgpack-c](https://github.com/msgpack/msgpack-c) library. The example below shows manipulating message pack to add a new key-value pair to a record. In Fluent Bit, the [filter_record_modifier](plugins/filter_record_modifier) plugin adds or deletes keys from records. See its code for more.\n\n```c\n#define A_NEW_KEY        \"key\"\n#define A_NEW_KEY_LEN    3\n#define A_NEW_VALUE      \"value\"\n#define A_NEW_VALUE_LEN  5\n\nstatic int cb_filter(const void *data, size_t bytes,\n                     const char *tag, int tag_len,\n                     void **out_buf, size_t *out_size,\n                     struct flb_filter_instance *f_ins,\n                     void *context,\n                     struct flb_config *config)\n{\n    (void) f_ins;\n    (void) config;\n    size_t off = 0;\n    int i = 0;\n    int ret;\n    struct flb_time tm;\n    int total_records;\n    int new_keys = 1;\n    msgpack_sbuffer tmp_sbuf;\n    msgpack_packer tmp_pck;\n    msgpack_unpacked result;\n    msgpack_object  *obj;\n    msgpack_object_kv *kv;\n\n    /* Create temporary msgpack buffer */\n    msgpack_sbuffer_init(&tmp_sbuf);\n    msgpack_packer_init(&tmp_pck, &tmp_sbuf, msgpack_sbuffer_write);\n\n    /* Iterate over each item */\n    msgpack_unpacked_init(&result);\n    while (msgpack_unpack_next(&result, data, bytes, &off) == MSGPACK_UNPACK_SUCCESS) {\n        /*\n         * Each record is a msgpack array [timestamp, map] of the\n         * timestamp and record map. We 'unpack' each record, and then re-pack\n         * it with the new fields added.\n         */\n\n        if (result.data.type != MSGPACK_OBJECT_ARRAY) {\n            continue;\n        }\n\n        /* unpack the array of [timestamp, map] */\n        flb_time_pop_from_msgpack(&tm, &result, &obj);\n\n        /* obj should now be the record map */\n        if (obj->type != MSGPACK_OBJECT_MAP) {\n            continue;\n        }\n\n        /* re-pack the array into a new buffer */\n        msgpack_pack_array(&tmp_pck, 2);\n        flb_time_append_to_msgpack(&tm, &tmp_pck, 0);\n\n        /* new record map size is old size + the new keys we will add */\n        total_records = obj->via.map.size + new_keys;\n        msgpack_pack_map(&tmp_pck, total_records);\n\n        /* iterate through the old record map and add it to the new buffer */\n        kv = obj->via.map.ptr;\n        for(i=0; i < obj->via.map.size; i++) {\n            msgpack_pack_object(&tmp_pck, (kv+i)->key);\n            msgpack_pack_object(&tmp_pck, (kv+i)->val);\n        }\n\n        /* append new keys */\n        msgpack_pack_str(&tmp_pck, A_NEW_KEY_LEN);\n        msgpack_pack_str_body(&tmp_pck, A_NEW_KEY, A_NEW_KEY_LEN);\n        msgpack_pack_str(&tmp_pck, A_NEW_VALUE_LEN);\n        msgpack_pack_str_body(&tmp_pck, A_NEW_VALUE, A_NEW_VALUE_LEN);\n\n    }\n    msgpack_unpacked_destroy(&result);\n\n    /* link new buffers */\n    *out_buf  = tmp_sbuf.data;\n    *out_size = tmp_sbuf.size;\n    return FLB_FILTER_MODIFIED;\n```\n\nPlease also check out the message pack examples on the [msgpack-c GitHub repo](https://github.com/msgpack/msgpack-c).\n\n## Concurrency\n\nFluent Bit uses [\"coroutines\"](https://en.wikipedia.org/wiki/Coroutine); a concurrent programming model in which subroutines can be paused and resumed. Co-routines are cooperative routines- instead of blocking, they cooperatively pass execution between each other. Coroutines are implemented as part of Fluent Bit's core network IO libraries. When a blocking network IO operation is made (for example, waiting for a response on a socket), a routine will cooperatively yield (pause itself) and pass execution to Fluent Bit engine, which will schedule (activate) other routines. Once the blocking IO operation is complete, the sleeping coroutine will be scheduled again (resumed). This model allows Fluent Bit to achieve performance benefits without the headaches that often come from having multiple active threads.\n\nThis Fluent Bit engine consists of an event loop that is built upon [github.com/monkey/monkey](https://github.com/monkey/monkey). The monkey project is a server and library designed for low resource usage. It was primarily implemented by Eduardo Silva, who also created Fluent Bit.\n\n### Coroutine Code: How does it work?\n\nTo understand how this works, let's walkthrough an example in the code.\n\nThe elasticsearch plugin makes an HTTP request to an elasticsearch cluster, when the following [line of code runs](https://github.com/fluent/fluent-bit/blob/1.3/plugins/out_es/es.c#L581):\n\n```c\nret = flb_http_do(c, &b_sent);\n```\n\nThis calls the http request function, in [`flb_http_client.c`, which makes a TCP write call](https://github.com/fluent/fluent-bit/blob/1.3/src/flb_http_client.c#L840):\n\n```c\nret = flb_io_net_write(c->u_conn,\n                       c->body_buf, c->body_len,\n                       &bytes_body);\n```\n\nThat activates code in Fluent Bit's core TCP library, which is where the coroutine magic happens. This code is in [flb_io.c](https://github.com/fluent/fluent-bit/blob/1.3/src/flb_io.c#L241). After opening a socket, the code inserts an item on the event loop:\n\n```c\nret = mk_event_add(u->evl,\n                   u_conn->fd,\n                   FLB_ENGINE_EV_THREAD,\n                   MK_EVENT_WRITE, &u_conn->event);\n```\n\nThis instructs the event loop to watch our socket's file descriptor. Then, [a few lines below, we yield back to the engine thread](https://github.com/fluent/fluent-bit/blob/1.3/src/flb_io.c#L304):\n\n```c\n/*\n * Return the control to the parent caller, we need to wait for\n * the event loop to get back to us.\n */\nflb_thread_yield(th, FLB_FALSE);\n```\n\nRemember, only one thread is active at a time. If the current coroutine did not yield back to engine, it would monopolize execution until the socket IO operation was complete. Since IO operations may take a long time, we can increase performance by allowing another routine to perform work.\n\nThe core routine in Fluent Bit is the engine in `flb_engine.c`. Here we can find the [code that will resume the elasticsearch plugin](https://github.com/fluent/fluent-bit/blob/1.3/src/flb_engine.c#L553) once it's IO operation is complete:\n\n```c\nif (event->type == FLB_ENGINE_EV_THREAD) {\n    struct flb_upstream_conn *u_conn;\n    struct flb_thread *th;\n\n    /*\n     * Check if we have some co-routine associated to this event,\n     * if so, resume the co-routine\n     */\n    u_conn = (struct flb_upstream_conn *) event;\n    th = u_conn->thread;\n    flb_trace(\"[engine] resuming thread=%p\", th);\n    flb_thread_resume(th);\n}\n```\n\nThis will return execution to the code right after the [flb_thread_yield](https://github.com/fluent/fluent-bit/blob/1.3/src/flb_io.c#L304) call in the IO library.\n\n### Practical Advice: How coroutines will affect your code\n\n#### Filter Plugins\n\nFilter plugins do not support coroutines, consequently you must disable async mode if your filter makes an HTTP request:\n\n```c\n/* Remove async flag from upstream */\nupstream->flags &= ~(FLB_IO_ASYNC);\n```\n\n#### Output plugins\n\nOutput plugins use coroutines. Plugins have a context structure which is available in all calls and can be used to store state. In general, you can write code without ever considering concurrency. This is because only one coroutine is active at a time. Thus, synchronization primitives like mutex locks or semaphores are not needed.\n\nThere are some cases where you need to consider concurrency; consider the following code (this is fluent bit c pseudo-code, not a full example):\n\n```c\n/* output plugin flush method for sending records */\nstatic void cb_my_plugin_flush(...)\n{\n    /* context structure that allows the plugin to store state */\n    struct flb_my_plugin *ctx = out_context;\n    ...\n    /* write something to context */\n    ctx->flag = somevalue;\n\n    /* make an async http call */\n    ret = flb_http_do(c, &b_sent);\n\n    /*\n     * do something with the context flag; the value of flag is indeterminate\n     * because we just made an async call.\n     */\n    somecall(ctx->flag);\n}\n```\n\nWhen the http call is made, the current coroutine may be paused and another can be scheduled. That other coroutine may also call `cb_my_plugin_flush`. If that happens, the value of the `flag` on the context may be changed. This could potentially lead to a race condition when the first coroutine resumes. Consequently, you must be extremely careful when storing state on the context. In general, context values should be set when a plugin is initialized, and then should only be read from afterwards.\n\nRemember, if needed, you can ensure that an HTTP call is made synchronously by modifying your flb_upstream:\n\n```c\n/* Remove async flag from upstream */\nupstream->flags &= ~(FLB_IO_ASYNC);\n```\n\nThis can be re-enabled at any time:\n\n```c\n/* re-enable async for future calls */\nupstream->flags |= FLB_IO_ASYNC;\n```\n\n## Plugin API\n\nEach plugin is a shared object which is [loaded into Fluent Bit](https://github.com/fluent/fluent-bit/blob/1.3/src/flb_plugin.c#L70) using dlopen and dlsym.\n\n### Input\n\nThe input plugin structure is defined in [flb_input.h](https://github.com/fluent/fluent-bit/blob/master/include/fluent-bit/flb_input.h#L62). There are a number of functions which a plugin can implement, most only implement `cb_init`, `cb_collect`, and `cb_exit`.\n\nThe [`\"dummy\"` input plugin](plugins/in_dummy) very simple and is an excellent example to review to understand more.\n\n### Filter\n\nThe structure for filter plugins is defined in [flb_filter.h](https://github.com/fluent/fluent-bit/blob/master/include/fluent-bit/flb_filter.h#L44). Each plugin must implement `cb_init`, `cb_filter`, and `cb_exit`.\n\nThe [filter_record_modifier](plugins/filter_record_modifier) is a good example of a filter plugin.\n\nNote that filter plugins can not asynchronously make HTTP requests. If your plugin needs to make a request, add the following code when you initialize your `flb_upstream`:\n\n```c\n/* Remove async flag from upstream */\nupstream->flags &= ~(FLB_IO_ASYNC);\n```\n\n### Output\n\nOutput plugins are defined in [flb_output.h](https://github.com/fluent/fluent-bit/blob/master/include/fluent-bit/flb_output.h#L57). Each plugin must implement `cb_init`, `cb_flush`, and `cb_exit`.\n\nThe [stdout plugin](plugins/out_stdout) is very simple; review its code to understand how output plugins work.\n\n### Config Maps\n\nConfig maps are an improvement to the previous Fluent Bit API that was used by plugins to read configuration values. The new config maps feature warns the user if there is an unknown configuration key and reduces risk of bad configuration due to typos or deprecated property names. They will also allow dynamic configuration reloading to be implemented in the future.\n\nThere are various types of supported configuration types. Full list available [here](https://github.com/fluent/fluent-bit/blob/v1.4.2/include/fluent-bit/flb_config_map.h#L29). The most used ones are:\n\n| Type                   | Description           |\n| -----------------------|:---------------------:|\n| FLB_CONFIG_MAP_INT     | Represents integer data type |\n| FLB_CONFIG_MAP_BOOL    | Represents boolean data type |\n| FLB_CONFIG_MAP_DOUBLE  | Represents a double |\n| FLB_CONFIG_MAP_SIZE    | Provides size_type as an integer datatype large enough to represent any possible string size. |\n| FLB_CONFIG_MAP_STR     | Represents string data type |\n| FLB_CONFIG_MAP_CLIST   | Comma separated list of strings |\n| FLB_CONFIG_MAP_SLIST   | Empty space separated list of strings |\n\nA config map expects certain public fields at registration.\n\n| Public Fields | Description           |\n| --------------|:---------------------|\n| Type          | This field is the data type of the property that we are writing to the config map. If the property is of type `int` we use `FLB_CONFIG_MAP_INT`, if `string` `FLB_CONFIG_MAP_STR` etc. |\n| Name          | This field is the name of the configuration property. For example for the property flush count we use `flush_count`|\n| Default Value | This field allows the user to set the default value of the property. For example, for a property of type `FLB_CONFIG_MAP_BOOL` (boolean), the default value may be false. Then we have to give `false` as default value. If there is no default value, `NULL` is given.|\n| Flags         | This field allows the user to set option flags. For example, it specifies in certain cases if multiple entries are allowed. |\n| Set Property  | This field decides if the property needs to be written to plugin context or just validated. If the property needs to be written to the plugin context, the value of this field needs to `FLB_TRUE` or else the value will be `FLB_FALSE`.|\n| Offset        | This field represents the member offset. It is 0 if the property is not written to the plugin context and if the property is being written to the plugin context it is ```offsetof(struct name_of_plugin_structure, name_of_property)```. The macro offsetof() returns the offset of the field *member* from the start of the structure type.|\n| Description   | This field is so that the user can give a short description of the property. It is `NULL` if no description is needed or given. |\n\nFor example for [stdout](https://github.com/fluent/fluent-bit/blob/v1.4.2/plugins/out_stdout/stdout.c#L158) plugin the config map is something like:\n\n```c\n/* Configuration properties map */\nstatic struct flb_config_map config_map[] = {\n    {\n     FLB_CONFIG_MAP_STR, \"format\", NULL,\n     0, FLB_FALSE, 0,\n     \"Specifies the data format to be printed. Supported formats are msgpack json, json_lines and json_stream.\"\n    },\n    {\n     FLB_CONFIG_MAP_STR, \"json_date_format\", NULL,\n     0, FLB_FALSE, 0,\n     \"Specifies the name of the date field in output.\"\n    },\n    {\n     FLB_CONFIG_MAP_STR, \"json_date_key\", \"date\",\n     0, FLB_TRUE, offsetof(struct flb_stdout, json_date_key),\n     \"Specifies the format of the date. Supported formats are double,  iso8601, java_sql_timestamp and epoch.\"\n    },\n\n    /* EOF */\n    {0}\n};\n\n/* Plugin registration */\nstruct flb_output_plugin out_stdout_plugin = {\n    .name         = \"stdout\",\n    .description  = \"Prints events to STDOUT\",\n    .cb_init      = cb_stdout_init,\n    .cb_flush     = cb_stdout_flush,\n    .cb_exit      = cb_stdout_exit,\n    .flags        = 0,\n    .config_map   = config_map\n};\n\n```\n\nIn the above code snippet, the property *format* is of type string which supports formats like json, msgpack etc. It has default value NULL(in which case it uses msgpack), no flags, and it is being only validated by the config map and hence set_property field is `FLB_FALSE` with member offset 0. No description is written for *format* property at present.\nSimilarly, for the property *json_date_key*, type is string, default value is date, and it is being written to context so the set_property field is `FLB_TRUE` with a member offset. Again, no description is written for it.\n\nUpon initilization the engine loads the config map like [this](https://github.com/fluent/fluent-bit/blob/v1.4.2/plugins/out_stdout/stdout.c#L48):\n\n```c\n    ret = flb_output_config_map_set(ins, (void *) ctx);\n```\n\n[flb_output_config_map_set](https://github.com/fluent/fluent-bit/blob/v1.4.2/include/fluent-bit/flb_output.h#L510) returns [flb_config_map_set](https://github.com/fluent/fluent-bit/blob/v1.4.2/src/flb_config_map.c#L513) which is a function used by plugins that needs to populate their context structure with the configuration properties already mapped.\n\nSome points to keep in mind while migrating an existing plugin to a config map interface:\n\n- All memory allocations and releases of properties on exit are handled by the config map interface.\n- The config map does not parse host and port properties since these properties are handled automatically for plugins that perform network operations.\n- Some plugins might also have an empty config_map. This is so that it would show an error when someone tried to use a non-existent parameter.\n\n## Testing\n\nDuring development, you can build Fluent Bit as follows:\n\n```shell\ncd build\ncmake -DFLB_DEV=On ../\nmake\n```\n\nNote that Fluent Bit uses Cmake 3 and on some systems you may need to invoke it as `cmake3`.\n\nTo set up and build your environment, please refer to the packaging containers for a dependency list: <https://github.com/fluent/fluent-bit/tree/master/packaging/distros>.\n\nSee [Building and Testing on Windows](#building-and-testing-on-windows) for Windows instructions.\n\nA simple container-based script [`run_code_analysis.sh`](./run_code_analysis.sh) is provided to run unit tests using <https://github.com/marketplace/actions/cmake-swiss-army-knife>.\n\n```shell\n$ ./run_code_analysis.sh\n...\n+ ctest --output-on-failure .\nTest project /tmp/source\n        Start   1: flb-rt-core-timeout\n  1/109 Test   #1: flb-rt-core-timeout ........................   Passed   10.31 sec\n        Start   2: flb-rt-in_event_test\n  2/109 Test   #2: flb-rt-in_event_test .......................   Passed    9.01 sec\n        Start   3: flb-rt-in_cpu\n...\n\n```\n\nRefer to <https://github.com/marketplace/actions/cmake-swiss-army-knife> for full details but this can run with sanitizers, valgrind and other tooling too by setting the `TEST_PRESENT` environment variable.\n\nA [`Vagrantfile`](./Vagrantfile) is provided to simplify building on a VM, this will set up a VM using Vagrant you can then build in.\n\n```shell\nvagrant up\nvagrant ssh\ncd build\nrm -rf *\ncmake ...\nmake\n```\n\nIt also acts as a reference for the tooling required to be installed on a local PC if you want to build things.\n\nThe VM created by Vagrant uses `rsync` to synchronize the files with rather than directly mounting the local directory.\nThe reason is to handle any permission issues and isolate the underlying host filesystem.\nRefer to the Vagrant documentation for syncing changes: <https://www.vagrantup.com/docs/cli/rsync-auto>\n\nTo enable the unit tests run:\n\n```shell\ncmake -DFLB_DEV=On -DFLB_TESTS_RUNTIME=On -DFLB_TESTS_INTERNAL=On ../\nmake\n```\n\nInternal tests are for the internal libraries of Fluent Bit. Runtime tests are for the plugins.\n\nYou can run the unit tests with `make test`, however, this is inconvenient in practice. Each test file will create an executable in the `build/bin` directory which you can run directly. For example, if you want to run the SDS tests, you can invoke them as follows:\n\n```shell\n$ ./bin/flb-it-sds\nTest sds_usage...                               [   OK   ]\nTest sds_printf...                              [   OK   ]\nSUCCESS: All unit tests have passed.\n```\n\n### Building and testing on Windows\n\nFluent Bit is built with MSVC and CMake on Windows.\n\nWindows builds of Fluent Bit override the set of enabled plugins. See\n[`cmake/windows-setup.cmake`](./cmake/windows-setup.cmake) for the override\nlist and other Windows-specific build rules.\n\n#### Using a Github Action\n\nFor developers without convenient access to a Windows build machine the easiest\nway to build a branch of Fluent Bit on Windows is to fork the `fluent-bit`\nrepository and enable workflow runs. The\n[`.github/workflows/pr-windows-build.yaml`](.github/workflows/pr-windows-build.yaml)\nworkflow can then be invoked in your branch via the Actions tab on your forked\nrepository to build your patch.\n\nThis workflow will not run automatically on pull requests opened against the\n`fluent/fluent-bit` repository so it's best you run it yourself in your fork. \n\nThe resulting binaries are uploaded as a Github workflow artifact which can be\nfound on the workflow run page.\n\nAt time of writing this workflow *does not run any of the Fluent Bit test suite*\n- so it only checks that the target branch can be compiled. To run tests, a local\nbuild will be required.\n\n#### Using Docker for Windows\n\nFor Windows users with Hyper-V capable machines the simplest way to build a\nbranch of Fluent Bit is to use\n[Docker Desktop for Windows](https://docs.docker.com/desktop/install/windows-install/)\nto build\n[`./dockerfiles/Dockerfile.windows`](./dockerfiles/Dockerfile.windows).\n\nThis method does not require manual installation of any build dependencies.\n\nThe Dockerfile build does *not* run any Fluent Bit test suites. To run tests you\nwill need to use a different method.\n\nMost OS virtualisation tools and virtual machine hosting services do not enable\nnested virtualisation, so it is generally not possible to use this method on\nvirtualized windows machines.\n\n#### Locally on a Windows machine\n\nLocal compilation on a Windows machine takes the longest to set up, but is the\nmost convenient for iterating development work.\n\nAt time of writing this is the only way to run the Fluent Bit tests on Windows.\n\nIn lieu of full Windows dev environment setup instructions, see these CI automation\nresources for how to set up a Windows build of fluent-bit:\n\n* [`dockerfiles/Dockerfile.windows`](./dockerfiles/Dockerfile.windows) - only build-able using Docker for Windows\n* [`appveyor.yml`](./appveyor.yml)\n* [`.github/workflows/call-build-windows.yaml`](.github/workflows/call-build-windows.yaml) - github automation that runs the build on a Windows worker.\n\nThe dependencies must be present:\n\n* Microsoft Visual Studio C/C++ toolchain. The CI automation uses MSVC 2019 at time of writing. MSVC Community Edition works fine.\n* [CMake](https://cmake.org/) 3.x on the `PATH`\n* A build of [OpenSSL](https://www.openssl.org/) as static libraries, pointed to by the `-DOPENSSL_ROOT_DIR` CMake variable.\n* The CI automation uses vcpkg to install dependencies [](https://github.com/fluent/fluent-bit/blob/master/.github/workflows/call-build-windows.yaml#L148)\n* `flex.exe` and `bison.exe` must be present on the `PATH`. The CI automation uses https://github.com/lexxmark/winflexbison.\n\nAssuming that `cmake` is on the `PATH`, Visual Studio is installed,\nWinFlexBison is present at `%SYSTEMDRIVE%\\WinFlexBison` and OpenSSL is present\nat `%PROGRAMFILES%\\OpenSSL-Win64`, the following Powershell commands should\nproduce a basic Fluent Bit build:\n\n```powershell\n$env:PATH += \"$env:SystemDrive\\WinFlexBison\"\nmkdir build\ncd build\ncmake -DOPENSSL_ROOT_DIR=\"$env:ProgramFiles\\OpenSSL-Win64\" -S .. -B .\ncmake --build .\n```\n\nThe build output will be `bin\\Debug\\fluent-bit.exe`.\n\nIf in doubt, check the CI and build automation files referenced above for specifics.\n\n### Building on a Windows Server 2022\n\nThe following steps have been tested on a Windows Server 2022 Datacenter edition on top of GCP.\n\n1. **Download and Install Visual Studio 2022** (Community Edition)\n    - **Download**: Go to [Visual Studio Download Page](https://visualstudio.microsoft.com/downloads/).\n    - **Install**:\n        - Select **Community Edition** and check the following components during installation:\n            - **Desktop development with C++**\n            - **Linux development with C++**\n\n2. **Install Flex and Bison**\n    1. Create a new file called `setup-flex-bison.ps1` and paste the following script:\n\n    ```powershell\n    # Define variables for Flex and Bison\n    $flexBisonUrl = \"https://sourceforge.net/projects/winflexbison/files/win_flex_bison3-latest.zip/download\"\n    $downloadPath = \"$env:TEMP\\win_flex_bison.zip\"\n    $extractPath = \"C:\\win_flex_bison\"\n    $flexExe = \"flex.exe\"\n    $bisonExe = \"bison.exe\"\n\n    # Step 2: Download and Setup Flex and Bison\n    Write-Output \"Downloading win_flex_bison...\"\n    Invoke-WebRequest -Uri $flexBisonUrl -OutFile $downloadPath\n\n    # Create the extract directory if it does not exist\n    If (!(Test-Path -Path $extractPath)) {\n        New-Item -ItemType Directory -Path $extractPath\n    }\n\n    # Extract the zip file\n    Write-Output \"Extracting win_flex_bison...\"\n    Add-Type -AssemblyName System.IO.Compression.FileSystem\n    [System.IO.Compression.ZipFile]::ExtractToDirectory($downloadPath, $extractPath)\n\n    # Rename the executables\n    Write-Output \"Renaming executables...\"\n    Rename-Item \"$extractPath\\win_flex.exe\" \"$extractPath\\$flexExe\" -Force\n    Rename-Item \"$extractPath\\win_bison.exe\" \"$extractPath\\$bisonExe\" -Force\n\n    # Add Flex and Bison path to system environment variables\n    Write-Output \"Adding Flex and Bison path to environment variables...\"\n    $envPath = [System.Environment]::GetEnvironmentVariable(\"Path\", \"Machine\")\n    If ($envPath -notlike \"*$extractPath*\") {\n        [System.Environment]::SetEnvironmentVariable(\"Path\", \"$envPath;$extractPath\", \"Machine\")\n        Write-Output \"Path updated. Please restart your command prompt to apply changes.\"\n    } else {\n        Write-Output \"Path already contains the Flex and Bison directory.\"\n    }\n\n    # Cleanup\n    Remove-Item $downloadPath\n\n    Write-Output \"Flex and Bison setup complete.\"\n    ```\n\n    2. Run the Script: Open PowerShell as administrator.\n\n    ```powershell\n    .\\setup-flex-bison.ps1\n    ```\n\n    3. Restart the command prompt: After the script completes, restart your command prompt or Visual Studio for the changes to take effect.\n\n3. **Create `vcpkg.json` file for the dependencies**\n\n    In the root of your project, create a `vcpkg.json` file with the following content:\n\n    ```json\n    {\n        \"name\": \"fluent-bit\",\n        \"version\": \"3.2.0\",\n        \"dependencies\": [\n            {\n                \"name\": \"openssl\",\n                \"default-features\": false\n            },\n            {\n                \"name\": \"libyaml\",\n                \"default-features\": false\n            }\n        ],\n        \"builtin-baseline\": \"9f5925e81bbcd9c8c34cc7a8bd25e3c557b582b2\"\n    }\n    ```\n\n4. **Install dependencies using `vcpkg`**\n\n    ```bash\n    vcpkg install --triplet x64-windows-static\n    ```\n\n    You should see output like:\n\n    ```bash\n    libyaml:x64-windows-static      0.2.5#5      A C library for parsing and emitting YAML.\n    openssl:x64-windows-static      3.3.2#1      OpenSSL is an open source project that provides SSL and TLS.\n    ```\n\n5. **Link `vcpkg` with Visual Studio**\n\n    ```bash\n    vcpkg integrate install\n    ```\n\n6. **Generate the Visual Studio solution of Fluent Bit using CMake**\n\n    ```bash\n    cd build\n    cmake -G \"Visual Studio 17 2022\" -DFLB_TESTS_INTERNAL=Off -DFLB_TESTS_RUNTIME=Off -DCMAKE_TOOLCHAIN_FILE=\"C:/Program Files/Microsoft Visual Studio/2022/Community/VC/vcpkg/scripts/buildsystems/vcpkg.cmake\" -DOPENSSL_ROOT_DIR=C:/path/to/your/vcpkg_installed/x64-windows-static -DFLB_LIBYAML_DIR=C:/path/to/your/vcpkg_installed/x64-windows-static ..\n    ```\n\n    **Notes**:\n    - Replace `C:/path/to/your/vcpkg_installed/x64-windows-static` with the actual path where `vcpkg` installed OpenSSL and LibYAML.\n    - When installing with `vcpkg`, you can also specify a different install root using `--x-install-root`.\n    - This will generate a Visual Studio solution file, which you can open and compile.\n\n7. **Run the binary build**\n\n    ```bash\n    cmake --build . --parallel 4 --clean-first\n    ```\n\n    **Notes**:\n    - You can choose to omit the `--parallel` option.\n    - The `--clean-first` option will clear cache and start a fresh clean build.\n\n### Valgrind\n\n[Valgrind](https://valgrind.org/) is a tool that will help you detect and diagnose memory issues in your code. It will check for memory leaks and invalid memory accesses.\n\nWhen you use Valgrind, you should compile Fluent Bit with the following options:\n\n```\n$ cmake -DFLB_DEV=On -DFLB_VALGRIND=On ../\n$ make\n```\n\nTo use it while developing, invoke it before Fluent Bit:\n\n```shell\nvalgrind ./bin/fluent-bit {args for fluent bit}\n```\n\nValgrind becomes especially powerful when you run it on your unit tests. We recommend writing unit tests that cover a large fraction of code paths in your contribution. You can then check your code for memory issues by invoking the test binaries with Valgrind:\n\n```shell\nvalgrind ./bin/flb-rt-your-test\n```\n\nThis will allow you to check for memory issues in code paths (ex error cases) which are hard to trigger through manual testing.\n\nSee above for using the `run_code_analysis.sh` script as well to run Valgrind on unit tests with the simple tooling in a container:\n\n```shell\n$ export TEST_PRESET=valgrind\n$ ./run_code_analysis.sh\n...\n```\n\n## Need more help?\n\nThe best way to learn how Fluent Bit code works is to read it. If you need help understanding the code, reach out to the community, or open a PR with changes that are a work in progress.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.0234375,
          "content": "./dockerfiles/Dockerfile"
        },
        {
          "name": "GOLANG_OUTPUT_PLUGIN.md",
          "type": "blob",
          "size": 3.095703125,
          "content": "# Fluent Bit + Golang output plugins\n\nThe current development version of Fluent Bit, integrates support to load\n_shared_ plugins built in Golang. The interface still needs some adjustment\nbut is functional. The expectation is to release Fluent Bit v0.10 with full\nsupport for Go.\n\n## Getting Started\n\nCompile Fluent Bit with Golang support, e.g:\n\n```\n$ cd build/\n$ cmake -DFLB_DEBUG=On -DFLB_PROXY_GO=On ../\n$ make\n```\n\nOnce compiled, we can see a new option in the binary `-e` which stands for\n_external plugin_, e.g:\n\n```\n$ bin/fluent-bit -h\nUsage: fluent-bit [OPTION]\n\nAvailable Options\n  -c  --config=FILE\tspecify an optional configuration file\n  -d, --daemon\t\trun Fluent Bit in background mode\n  -f, --flush=SECONDS\tflush timeout in seconds (default: 5)\n  -i, --input=INPUT\tset an input\n  -m, --match=MATCH\tset plugin match, same as '-p match=abc'\n  -o, --output=OUTPUT\tset an output\n  -p, --prop=\"A=B\"\tset plugin configuration property\n  -e, --plugin=FILE\tload an external plugin (shared lib)\n  ...\n```\n\n## Build a plugin in Go\n\nTo make easier to build plugins, we have published a _fluent-bit-go_ package:\n\nhttp://github.com/fluent/fluent-bit-go\n\nIn the same repository we have published a plugin example called\n__out_multiinstance__ that just prints the records to the standard output:\n\nhttps://github.com/fluent/fluent-bit-go/tree/master/examples/out_multiinstance\n\nAt a minimum, a Go plugin looks like this:\n\n```go\npackage main\n\nimport \"github.com/fluent/fluent-bit-go/output\"\n\n//export FLBPluginRegister\nfunc FLBPluginRegister(def unsafe.Pointer) int {\n    // Gets called only once when the plugin.so is loaded\n\treturn output.FLBPluginRegister(ctx, \"gstdout\", \"Stdout GO!\")\n}\n\n//export FLBPluginInit\nfunc FLBPluginInit(plugin unsafe.Pointer) int {\n    // Gets called only once for each instance you have configured.\n    return output.FLB_OK\n}\n\n//export FLBPluginFlushCtx\nfunc FLBPluginFlushCtx(ctx, data unsafe.Pointer, length C.int, tag *C.char) int {\n    // Gets called with a batch of records to be written to an instance.\n    return output.FLB_OK\n}\n\n//export FLBPluginExit\nfunc FLBPluginExit() int {\n\treturn output.FLB_OK\n}\n\nfunc main() {\n}\n```\n\nThe code above is a template to write an output plugin. It's really important\nto keep the package name as `main` and add an explicit `main()` function.\nThis is a requirement as the code will be built as a shared library.\n\nTo build the code above, use the following line:\n\n```go\n$ go build -buildmode=c-shared -o out_gstdout.so out_gstdout.go\n```\n\nOnce built, a shared library called `out_gstdout.so` will be available. It's\nreally important to double check the final .so file is what we expect. Doing a\n`ldd` over the library we should see something similar to this:\n\n```\n$ ldd out_gstdout.so\n\tlinux-vdso.so.1 =>  (0x00007fff561dd000)\n\tlibpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fc4aeef0000)\n\tlibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fc4aeb27000)\n\t/lib64/ld-linux-x86-64.so.2 (0x000055751a4fd000)\n```\n\n## Run Fluent Bit + the new plugin\n\n```\n$ bin/fluent-bit -e /path/to/out_gstdout.so -i cpu -o gstdout\n```\n\nFor more details or assistance write to eduardo@treasure-data.com\n"
        },
        {
          "name": "GOVERNANCE.md",
          "type": "blob",
          "size": 2.5654296875,
          "content": "# Fluent Bit & Governance\n\nFluent Bit is a CNCF sub-project under the umbrella of Fluentd.\n\n\n\n## Your organization is not yet a maintainer\n\nThe following items describes the global process for an individual to become a maintainer:\n\n* Express interest to maintainers that your organization is interested in becoming a\n  maintainer. Becoming a maintainer generally means that you are going to be spending substantial\n  time on Fluent Bit for the foreseeable future. You should have domain expertise and be extremely\n  proficient in C. Ultimately your goal is to become a maintainer that will represent your\n  organization.\n* We will expect you to start contributing increasingly complicated PRs, under the guidance\n  of the existing maintainers.\n* We may ask you to do some PRs from our backlog.\n* As you gain experience with the code base and our standards, we will ask you to do code reviews\n  for incoming PRs (i.e., all maintainers are expected to shoulder a proportional share of\n  community reviews).\n* After a period of approximately 6-8 months of working together and making sure we see eye to eye,\n  the existing maintainers will confer and decide whether to grant maintainer status or not.\n  We make no guarantees on the length of time this will take, but 6-8 months is the approximate\n  goal.\n\nNote that maintainer status is primary assigned to the individual, the organization that support his work gets an _honor title_ of _maintainer organization_, but If the maintainer moves to a new organization the _honor title_ is transferred. \n\n## Maintainer responsibilities\n\n* Monitor Slack (delayed response is perfectly acceptable).\n* Triage GitHub issues and perform pull request reviews for other maintainers and the community.\n* Triage build issues - file issues for known flaky builds or bugs, and either fix or find someone\n  to fix any master build breakages.\n* Make sure that ongoing PRs are moving forward at the right pace or closing them.\n* In general continue to be willing to spend at least 25% of ones time working on Fluent Bit (~1.25\n  business days per week).\n\n## When does a maintainer lose maintainer status\n\nIf a maintainer is no longer interested or cannot perform the maintainer duties listed above, they\nshould volunteer to quit the existing role.\n\n## Conflict resolution and voting\n\nIn general, we prefer that technical issues and maintainer membership are amicably worked out\nbetween the persons involved. If a dispute cannot be decided independently, the maintainers can be\ncalled in to decide an issue. If the maintainers themselves cannot decide an issue, the issue will\nbe resolved by voting. "
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.935546875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "MAINTAINERS.md",
          "type": "blob",
          "size": 1.69921875,
          "content": "# Fluent Bit Maintainers\n\nFluent Bit is developed and supported by many individuals and companies.  The following table list the names of maintainers per components and the company supporting their work.\n\n| Maintainer Name                                       | Components               | Company                                           |\n| :---------------------------------------------------- | ------------------------ | ------------------------------------------------- |\n| [Eduardo Silva](https://github.com/edsiper)           | All                      | [Chronosphere](https://chronosphere.io)                  |\n| [Leonardo Alminana](https://github.com/leonardo-albertovich) | All               | [Chronosphere](https://chronosphere.io)                  |\n| [Masoud Koleini](https://github.com/koleini)          | Stream Processor         | [Arm](https://www.arm.com/)                       |\n| [Hiroshi Hatake](https://github.com/cosmo0920)        | All                      | [Chronosphere](https://chronosphere.io)                  |\n| [Fujimoto Seiji](https://github.com/fujimotos)        | Windows Platform         | Individual                                        |\n| [Wesley Pettit](https://github.com/PettitWesley)      | Amazon Plugins (AWS)     | [Amazon Web Services](https://aws.amazon.com/)    |\n| [Cedric Lamoriniere](https://github.com/clamoriniere) | Datadog Output Plugin    | [Datadog](https://www.datadoghq.com/)             |\n| [Jonathan Gonzalez V.](https://github.com/sxd)        | PostgreSQL Output Plugin | [2ndQuadrant](https://www.2ndquadrant.com/en/)    |\n| [Jorge Niedbalski](https://github.com/niedbalski)     | CI && Containers         | [Personal Blog](https://niedbalski.dev/)                 |\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.875,
          "content": "# ![logo](fluentbit_logo.png)\n\n### CI Status\n\n| CI Workflow       | Status             |\n|-------------------|--------------------|\n| Unit Tests (master) | [![CI/Unit Tests](https://github.com/fluent/fluent-bit/actions/workflows/unit-tests.yaml/badge.svg?branch=master)](https://github.com/fluent/fluent-bit/actions/workflows/unit-tests.yaml) |\n| Integration Tests (master) | [![CI/Integration Tests](https://github.com/fluent/fluent-bit/actions/workflows/master-integration-test.yaml/badge.svg)](https://github.com/fluent/fluent-bit/actions/workflows/master-integration-test.yaml)|\n| Arm builds         | <a href=\"https://actuated.dev/\"><img alt=\"Arm CI sponsored by Actuated\" src=\"https://docs.actuated.dev/images/actuated-badge.png\" width=\"120px\"></img></a> |\n| Latest release |  [![CI/Build](https://github.com/fluent/fluent-bit/actions/workflows/staging-release.yaml/badge.svg)](https://github.com/fluent/fluent-bit/actions/workflows/staging-release.yaml)|\n\n## About\n\n![](documentation/fluentbit_ecosystem.png)\n\n[Fluent Bit](http://fluentbit.io) is a fast Log, Metrics and Traces Processor and Forwarder for Linux, Windows, Embedded Linux, MacOS and BSD family operating systems. It's part of the Graduated [Fluentd](http://fluentd.org) Ecosystem and a [CNCF](https://cncf.io) sub-project.\n\nFluent Bit allows to collect different signal types such as logs, metrics and traces from different sources, process them and deliver them to different backends such as [Fluentd](http://fluentd.org), Elasticsearch, Splunk, DataDog, Kafka, New Relic, Azure services, AWS services, Google services, NATS, InfluxDB or any custom HTTP end-point.\n\nFluent Bit comes with full SQL [Stream Processing](https://docs.fluentbit.io/manual/stream-processing/introduction) capabilities: data manipulation and analytics using SQL queries.\n\nFluent Bit runs on x86_64, x86, arm32v7, and arm64v8 architectures.\n\n## Features\n\n- High Performance at low CPU and Memory footprint\n- Data Parsing\n  - Convert your unstructured messages using our parsers: [JSON](https://docs.fluentbit.io/manual/pipeline/parsers/json), [Regex](https://docs.fluentbit.io/manual/pipeline/parsers/regular-expression), [LTSV](https://docs.fluentbit.io/manual/pipeline/parsers/ltsv) and [Logfmt](https://docs.fluentbit.io/manual/pipeline/parsers/logfmt)\n- Reliability and Data Integrity\n  - [Backpressure](https://docs.fluentbit.io/manual/administration/backpressure) Handling\n  - [Data Buffering](https://docs.fluentbit.io/manual/administration/buffering-and-storage) in memory and file system\n- Networking\n  - Security: built-in TLS/SSL support\n  - Asynchronous I/O\n- Pluggable Architecture and [Extensibility](https://docs.fluentbit.io/manual/development): Inputs, Filters and Outputs\n  - More than 70 built-in plugins available\n  - Extensibility\n    - Write any input, filter or output plugin in C language\n    - Write [Filters in Lua](https://docs.fluentbit.io/manual/filter/lua) or [Output plugins in Golang](https://docs.fluentbit.io/manual/development/golang-output-plugins)\n- [Monitoring](https://docs.fluentbit.io/manual/administration/monitoring): expose internal metrics over HTTP in JSON and [Prometheus](https://prometheus.io/) format\n- [Stream Processing](https://docs.fluentbit.io/manual/stream-processing/introduction): Perform data selection and transformation using simple SQL queries\n  - Create new streams of data using query results\n  - Aggregation Windows\n  - Data analysis and prediction: Timeseries forecasting\n- Portable: runs on Linux, MacOS, Windows and BSD systems\n\n## Fluent Bit in Production\n\nFluent Bit is a widely adopted solution in production environments. As of 2024, Fluent Bit has surpassed 15 billion downloads and continues to be deployed over 10 million times daily. Below is a preview of some of the organizations that rely heavily on Fluent Bit in their production systems:\n\n> If your company uses Fluent Bit and is not listed, feel free to open a GitHub issue and we will add the logo.\n\n![users](documentation/fluentbit_users.png)\n\n## [Documentation](https://docs.fluentbit.io)\n\nOur official project documentation for [installation](https://docs.fluentbit.io/manual/installation), [configuration](https://docs.fluentbit.io/manual/administration/configuring-fluent-bit), deployment and development topics is located here:\n\n- [https://docs.fluentbit.io](https://fluentbit.io)\n\n### Quick Start\n\n#### Build from Scratch\n\nIf you aim to build Fluent Bit from sources, you can go ahead and start with the following commands.\n\n```bash\ncd build\ncmake ..\nmake\nbin/fluent-bit -i cpu -o stdout -f 1\n```\n\nIf you are interested into more details, please refer to the [Build & Install](https://docs.fluentbit.io/manual/installation/sources/build-and-install) section.\n\n#### Requirements\n\n- CMake >= 3.0\n- Flex\n- Bison\n- YAML library/headers\n- OpenSSL library/headers\n\n#### Linux Packages\n\nWe provide packages for most common Linux distributions:\n\n- [Debian](https://docs.fluentbit.io/manual/installation/linux/debian)\n- [Raspbian](https://docs.fluentbit.io/manual/installation/linux/raspbian-raspberry-pi)\n- [Ubuntu](https://docs.fluentbit.io/manual/installation/linux/ubuntu)\n- [CentOS](https://docs.fluentbit.io/manual/installation/linux/redhat-centos)\n\n#### Linux / Docker Container Images\n\nOur Linux containers images are the most common deployment model, thousands of\nnew installation happen every day, learn more about the available images and\ntags [here](https://docs.fluentbit.io/manual/installation/docker).\n\n#### Windows Packages\n\nFluent Bit is fully supported on Windows environments, get started with [these instructions](https://docs.fluentbit.io/manual/installation/windows).\n\n#### Running on s390x\n\nFluent Bit runs on Linux on IBM Z(s390x), but the WASM filter plugin is not. For the LUA filter plugin, it runs when `libluajit` is installed on the system and fluent bit is built with `FLB_LUAJIT` and `FLB_PREFER_SYSTEM_LIB_LUAJIT` on.\n\n### Plugins: Inputs, Filters and Outputs\n\n[Fluent Bit](http://fluentbit.io) is based in a pluggable architecture where different plugins plays a major role in the data pipeline:\n\n#### Input Plugins\n\n| name | title | description |\n| :--- | :--- | :--- |\n| [collectd](https://docs.fluentbit.io/manual/pipeline/inputs/collectd) | Collectd | Listen for UDP packets from Collectd. |\n| [cpu](https://docs.fluentbit.io/manual/pipeline/inputs/cpu-metrics) | CPU Usage | measure total CPU usage of the system. |\n| [disk](https://docs.fluentbit.io/manual/pipeline/inputs/disk-io-metrics) | Disk Usage | measure Disk I/Os. |\n| [dummy](https://docs.fluentbit.io/manual/pipeline/inputs/dummy) | Dummy | generate dummy event. |\n| [exec](https://docs.fluentbit.io/manual/pipeline/inputs/exec) | Exec | executes external program and collects event logs. |\n| [forward](https://docs.fluentbit.io/manual/pipeline/inputs/forward) | Forward | Fluentd forward protocol. |\n| [head](https://docs.fluentbit.io/manual/pipeline/inputs/head) | Head | read first part of files. |\n| [health](https://docs.fluentbit.io/manual/pipeline/inputs/health) | Health | Check health of TCP services. |\n| [kmsg](https://docs.fluentbit.io/manual/pipeline/inputs/kernel-logs) | Kernel Log Buffer | read the Linux Kernel log buffer messages. |\n| [mem](https://docs.fluentbit.io/manual/pipeline/inputs/memory-metrics) | Memory Usage | measure the total amount of memory used on the system. |\n| [mqtt](https://docs.fluentbit.io/manual/pipeline/inputs/mqtt) | MQTT | start a MQTT server and receive publish messages. |\n| [netif](https://docs.fluentbit.io/manual/pipeline/inputs/network-io-metrics) | Network Traffic | measure network traffic. |\n| [proc](https://docs.fluentbit.io/manual/pipeline/inputs/process) | Process | Check health of Process. |\n| [random](https://docs.fluentbit.io/manual/pipeline/inputs/random) | Random | Generate Random samples. |\n| [serial](https://docs.fluentbit.io/manual/pipeline/inputs/serial-interface) | Serial Interface | read data information from the serial interface. |\n| [stdin](https://docs.fluentbit.io/manual/pipeline/inputs/standard-input) | Standard Input | read data from the standard input. |\n| [syslog](https://docs.fluentbit.io/manual/pipeline/inputs/syslog) | Syslog | read syslog messages from a Unix socket. |\n| [systemd](https://docs.fluentbit.io/manual/pipeline/inputs/systemd) | Systemd | read logs from Systemd/Journald. |\n| [tail](https://docs.fluentbit.io/manual/pipeline/inputs/tail) | Tail | Tail log files. |\n| [tcp](https://docs.fluentbit.io/manual/pipeline/inputs/tcp) | TCP | Listen for JSON messages over TCP. |\n| [thermal](https://docs.fluentbit.io/manual/pipeline/inputs/thermal) | Thermal | measure system temperature(s). |\n\n#### Filter Plugins\n\n| name | title | description |\n| :--- | :--- | :--- |\n| [aws](https://docs.fluentbit.io/manual/pipeline/filters/aws-metadata) | AWS Metadata | Enrich logs with AWS Metadata. |\n| [expect](https://docs.fluentbit.io/manual/pipeline/filters/expect) | Expect | Validate records match certain criteria in structure. |\n| [grep](https://docs.fluentbit.io/manual/pipeline/filters/grep) | Grep | Match or exclude specific records by patterns. |\n| [kubernetes](https://docs.fluentbit.io/manual/pipeline/filters/kubernetes) | Kubernetes | Enrich logs with Kubernetes Metadata. |\n| [lua](https://docs.fluentbit.io/manual/pipeline/filters/lua) | Lua | Filter records using Lua Scripts. |\n| [parser](https://docs.fluentbit.io/manual/pipeline/filters/parser) | Parser | Parse record. |\n| [record\\_modifier](https://docs.fluentbit.io/manual/pipeline/filters/record-modifier) | Record Modifier | Modify record. |\n| [rewrite\\_tag](https://docs.fluentbit.io/manual/pipeline/filters/rewrite-tag) | Rewrite Tag | Re-emit records under new tag. |\n| [stdout](https://docs.fluentbit.io/manual/pipeline/filters/standard-output) | Stdout | Print records to the standard output interface. |\n| [throttle](https://docs.fluentbit.io/manual/pipeline/filters/throttle) | Throttle | Apply rate limit to event flow. |\n| [nest](https://docs.fluentbit.io/manual/pipeline/filters/nest) | Nest | Nest records under a specified key |\n| [modify](https://docs.fluentbit.io/manual/pipeline/filters/modify) | Modify | Modifications to record. |\n\n#### Output Plugins\n\n| name | title | description |\n| :--- | :--- | :--- |\n| [azure](https://docs.fluentbit.io/manual/pipeline/outputs/azure) | Azure Log Analytics | Ingest records into Azure Log Analytics |\n| [bigquery](https://docs.fluentbit.io/manual/pipeline/outputs/bigquery) | BigQuery | Ingest records into Google BigQuery |\n| [counter](https://docs.fluentbit.io/manual/pipeline/outputs/counter) | Count Records | Simple records counter. |\n| [datadog](https://docs.fluentbit.io/manual/pipeline/outputs/datadog) | Datadog | Ingest logs into Datadog. |\n| [es](https://docs.fluentbit.io/manual/pipeline/outputs/elasticsearch) | Elasticsearch | flush records to a Elasticsearch server. |\n| [file](https://docs.fluentbit.io/manual/pipeline/outputs/file) | File | Flush records to a file. |\n| [flowcounter](https://docs.fluentbit.io/manual/pipeline/outputs/flowcounter) | FlowCounter | Count records. |\n| [forward](https://docs.fluentbit.io/manual/pipeline/outputs/forward) | Forward | Fluentd forward protocol. |\n| [gelf](https://docs.fluentbit.io/manual/pipeline/outputs/gelf) | GELF | Flush records to Graylog |\n| [http](https://docs.fluentbit.io/manual/pipeline/outputs/http) | HTTP | Flush records to an HTTP end point. |\n| [influxdb](https://docs.fluentbit.io/manual/pipeline/outputs/influxdb) | InfluxDB | Flush records to InfluxDB time series database. |\n| [kafka](https://docs.fluentbit.io/manual/pipeline/outputs/kafka) | Apache Kafka | Flush records to Apache Kafka |\n| [kafka-rest](https://docs.fluentbit.io/manual/pipeline/outputs/kafka-rest-proxy) | Kafka REST Proxy | Flush records to a Kafka REST Proxy server. |\n| [loki](https://docs.fluentbit.io/manual/pipeline/outputs/loki) | Loki | Flush records to Loki server. |\n| [nats](https://docs.fluentbit.io/manual/pipeline/outputs/nats) | NATS | Flush records to a NATS server. |\n| [null](https://docs.fluentbit.io/manual/pipeline/outputs/null) | NULL | Throw away events. |\n| [s3](https://docs.fluentbit.io/manual/pipeline/outputs/s3) | S3 | Flush records to s3 |\n| [stackdriver](https://docs.fluentbit.io/manual/pipeline/outputs/stackdriver) | Google Stackdriver Logging | Flush records to Google Stackdriver Logging service. |\n| [stdout](https://docs.fluentbit.io/manual/pipeline/outputs/standard-output) | Standard Output | Flush records to the standard output. |\n| [splunk](https://docs.fluentbit.io/manual/pipeline/outputs/splunk) | Splunk | Flush records to a Splunk Enterprise service |\n| [tcp](https://docs.fluentbit.io/manual/pipeline/outputs/tcp-and-tls) | TCP & TLS | Flush records to a TCP server. |\n| [td](https://docs.fluentbit.io/manual/pipeline/outputs/treasure-data) | [Treasure Data](http://www.treasuredata.com) | Flush records to the [Treasure Data](http://www.treasuredata.com) cloud service for analytics. |\n\n## Contributing\n\n[Fluent Bit](https://fluentbit.io) is an open project, several individuals and companies contribute in different forms like coding, documenting, testing, spreading the word at events within others. If you want to learn more about contributing opportunities please reach out to us through our [Community Channels](https://fluentbit.io/community/).\n\nIf you are interested in contributing to Fluent bit with bug fixes, new features or coding in general, please refer to the code [CONTRIBUTING](CONTRIBUTING.md) guidelines. You can also refer the Beginners Guide to contributing to Fluent Bit [here.](DEVELOPER_GUIDE.md)\n\n## Community & Contact\n\nFeel free to join us on our Slack channel, Mailing List or IRC:\n\n- [Slack](http://slack.fluentd.org) (#fluent-bit channel)\n- [Twitter](http://twitter.com/fluentbit)\n\n## License\n\nThis program is under the terms of the [Apache License v2.0](http://www.apache.org/licenses/LICENSE-2.0).\n\n## Authors\n\n[Fluent Bit](http://fluentbit.io) is sponsored and maintained by several companies in the Cloud Native community, including all the major cloud providers.\n\nYou can see a list of contributors [here](https://github.com/fluent/fluent-bit/graphs/contributors).\n\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.580078125,
          "content": "# Security Policy\n\n## Supported Versions\n\n\n| Version | Supported          |\n|---------| ------------------ |\n| 3.2.x   | :white_check_mark: |\n| 3.1.x   | :white_check_mark: |\n| < 3.1   | :x:                |\n\n## Reporting a Vulnerability\n\nPlease get in touch with the team at fluentbit-security@googlegroups.com, and we'll take it from there.  \nThank you in advance for helping to keep Fluent-bit secure.\n\n## Announcements\n\nFor related CVEs that may or not affect Fluent Bit we'll be doing the corresponding announcement through [discussions](https://github.com/fluent/fluent-bit/discussions).\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 1.4619140625,
          "content": "# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nVagrant.configure(\"2\") do |config|\n  # config.vm.box = \"ubuntu/focal64\"     # Ubuntu 20.04 Focal Fossa (non CO-RE)\n  # config.vm.box = \"ubuntu/hirsute64\"   # Ubuntu 21.04 Hirsute Hippo (CO-RE)\n  # config.vm.box = \"ubuntu/impish64\"    #  Ubuntu 21.10 Impish Indri (CO-RE)\n  config.vm.box = \"ubuntu/jammy64\"       #  Ubuntu 22.04 Jammy Jellyfish (CO-RE)\n\n  config.ssh.extra_args = [\"-t\", \"cd /vagrant; bash --login\"]\n\n  # Use rsync rather than mounting into the VM as triggers a few issues with permissions during build\n  config.vm.synced_folder \".\", \"/vagrant\", type: \"rsync\"\n\n  config.vm.provider \"virtualbox\" do |vb|\n    vb.gui = false\n    vb.memory = \"2048\"\n  end\n\n  config.vm.provision \"shell\", inline: <<-SHELL\n    VAGRANT_HOME=\"/home/vagrant\"\n\n    apt-get update\n    apt-get install --yes apt-transport-https ca-certificates curl\n\n    # https://github.com/fluent/fluent-bit/tree/master/packaging/distros/ubuntu\n\n    # Main build\n    apt-get install --yes build-essential cmake dh-make git make openssl pkg-config tar\n    # Dependencies\n    apt-get install --yes libssl3 libssl-dev libsasl2-dev pkg-config libsystemd-dev zlib1g-dev libpq-dev postgresql-server-dev-all flex bison libyaml-dev libpq5 libbpf-dev\n\n    # Debug\n    apt-get install --yes gdb valgrind\n\n    # From Unit Tests:\n    apt-get install --yes gcc-7 g++-7 clang-6.0 gcovr\n\n    # For packaging potentially\n    apt-get install --yes docker.io\n    usermod -aG docker vagrant\n  SHELL\nend\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 3.2578125,
          "content": "version: v1-winbuild-{build}\n\n#\n# If you change dependencies etc here, please also check and update\n# the other Windows build resources:\n#\n# - DEVELOPER_GUIDE.md \"Windows\" section\n# - appveyor.yml\n# - .github/workflows/call-build-windows.yaml\n# - dockerfiles/Dockerfile.windows\n#\n\nimage: Visual Studio 2019\n\nplatform:\n  - Win32\n  - x64\n\nenvironment:\n  vspath: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community'\n  winflexbison: https://github.com/lexxmark/winflexbison/releases/download/v2.5.22/win_flex_bison-2.5.22.zip\n  PATH: '%PATH%;C:\\WinFlexBison'\n\nconfiguration:\n  - Release\n\nskip_commits:\n  files:\n    - \".github/**/*\"\n    - \"packaging/**/*\"\n    - \"dockerfiles/**/*\"\n    - \"**/*.md\"\n    - \"**/*.sh\"\n\ninstall:\n  - ps: Invoke-WebRequest -O winflexbison.zip $env:winflexbison\n  - ps: Expand-Archive winflexbison.zip -Destination /WinFlexBison\n  - ps: Copy-Item -Path /WinFlexBison/win_bison.exe /WinFlexBison/bison.exe\n  - ps: Copy-Item -Path /WinFlexBison/win_flex.exe /WinFlexBison/flex.exe\n  - cd C:\\Tools\\vcpkg\n  - git pull\n  - .\\bootstrap-vcpkg.bat\n  - cd %APPVEYOR_BUILD_FOLDER%\n\nbefore_build:\n  - if %PLATFORM%==Win32 call C:\\tools\\vcpkg\\vcpkg install --recurse openssl --triplet x86-windows-static\n  - if %PLATFORM%==x64   call C:\\tools\\vcpkg\\vcpkg install --recurse openssl --triplet x64-windows-static\n  - if %PLATFORM%==Win32 call \"%vspath%\\VC\\Auxiliary\\Build\\vcvars32.bat\"\n  - if %PLATFORM%==x64   call \"%vspatH%\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n\nbuild_script:\n  - ps: |\n        cd $ENV:APPVEYOR_BUILD_FOLDER\\build\n\n        if ( \"x64\" -eq $env:PLATFORM ) {\n             $OPENSSL_DIR = \"C:\\tools\\vcpkg\\packages\\openssl_x64-windows-static\"\n        }\n        else {\n            $OPENSSL_DIR = \"C:\\tools\\vcpkg\\packages\\openssl_x86-windows-static\"\n        }\n        # CACHE GENERATION\n        cmake -G \"NMake Makefiles\" `\n                     -D FLB_TESTS_INTERNAL=On `\n                     -D OPENSSL_ROOT_DIR=$OPENSSL_DIR `\n                     -D FLB_WITHOUT_flb-rt-out_elasticsearch=On `\n                     -D FLB_WITHOUT_flb-rt-out_td=On `\n                     -D FLB_WITHOUT_flb-rt-out_forward=On `\n                     -D FLB_WITHOUT_flb-rt-in_disk=On `\n                     -D FLB_WITHOUT_flb-rt-in_proc=On `\n                     -D FLB_WITHOUT_flb-it-parser=On `\n                     -D FLB_WITHOUT_flb-it-unit_sizes=On `\n                     -D FLB_WITHOUT_flb-it-network=On `\n                     -D FLB_WITHOUT_flb-it-pack=On `\n                     -D FLB_WITHOUT_flb-it-signv4=On `\n                     -D FLB_WITHOUT_flb-it-aws_credentials=On `\n                     -D FLB_WITHOUT_flb-it-aws_credentials_ec2=On `\n                     -D FLB_WITHOUT_flb-it-aws_credentials_http=On `\n                     -D FLB_WITHOUT_flb-it-aws_credentials_profile=On `\n                     -D FLB_WITHOUT_flb-it-aws_credentials_sts=On `\n                     -D FLB_WITHOUT_flb-it-aws_util=On `\n                     -D FLB_WITHOUT_flb-it-input_chunk=On `\n                     ../\n        # COMPILE\n        cmake --build .\n\n        # RUNNING TESTS\n        ctest --build-run-dir $PWD --output-on-failure\n\n  - cpack\n  - cmake -G \"NMake Makefiles\" ..\\\n  - cmake --build .\n  - cpack\n\nartifacts:\n  - path: build/fluent-bit-*.exe\n    name: fluent-bit-installer\n  - path: build/fluent-bit-*.zip\n    name: fluent-bit-zip\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "conf",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpack",
          "type": "tree",
          "content": null
        },
        {
          "name": "debian.sh",
          "type": "blob",
          "size": 0.1259765625,
          "content": "#!/bin/sh\n\nrm -rf build/*\nrm -rf debian/tmp\nfakeroot debian/rules clean\nfakeroot debian/rules build\nfakeroot debian/rules binary\n"
        },
        {
          "name": "doc-reports",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker_compose",
          "type": "tree",
          "content": null
        },
        {
          "name": "dockerfiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fluent-bit-4.0.0.bb",
          "type": "blob",
          "size": 1.548828125,
          "content": "# Fluent Bit - Yocto / Bitbake\n# ============================\n# The following Bitbake package the latest Fluent Bit stable release.\n\nSUMMARY = \"Fast Log processor and Forwarder\"\nDESCRIPTION = \"Fluent Bit is a data collector, processor and  \\\nforwarder for Linux. It supports several input sources and \\\nbackends (destinations) for your data. \\\n\"\n\nHOMEPAGE = \"http://fluentbit.io\"\nBUGTRACKER = \"https://github.com/fluent/fluent-bit/issues\"\n\nLICENSE = \"Apache-2.0\"\nLIC_FILES_CHKSUM = \"file://LICENSE;md5=2ee41112a44fe7014dce33e26468ba93\"\nSECTION = \"net\"\n\nPR = \"r0\"\nPV = \"4.0.0\"\n\nSRCREV = \"v${PV}\"\nSRC_URI = \"git://github.com/fluent/fluent-bit.git;nobranch=1\"\n\nS = \"${WORKDIR}/git\"\nDEPENDS = \"zlib bison-native flex-native\"\nINSANE_SKIP_${PN}-dev += \"dev-elf\"\n\n# Use CMake 'Unix Makefiles' generator\nOECMAKE_GENERATOR ?= \"Unix Makefiles\"\n\n# Fluent Bit build options\n# ========================\n\n# Host related setup\nEXTRA_OECMAKE += \"-DGNU_HOST=${HOST_SYS} \"\n\n# Disable LuaJIT and filter_lua support\nEXTRA_OECMAKE += \"-DFLB_LUAJIT=Off -DFLB_FILTER_LUA=Off \"\n\n# Disable Library and examples\nEXTRA_OECMAKE += \"-DFLB_SHARED_LIB=Off -DFLB_EXAMPLES=Off \"\n\n# Systemd support (optional)\nDEPENDS += \"systemd\"\nEXTRA_OECMAKE += \"-DFLB_IN_SYSTEMD=On \"\n\n# Kafka Output plugin (disabled by default): note that when\n# enabling Kafka output plugin, the backend library librdkafka\n# requires 'openssl' as a dependency.\n#\n# DEPENDS += \"openssl \"\n# EXTRA_OECMAKE += \"-DFLB_OUT_KAFKA=On \"\n\ninherit cmake systemd\n\nSYSTEMD_SERVICE_${PN} = \"fluent-bit.service\"\nTARGET_CC_ARCH_append = \" ${SELECTED_OPTIMIZATION}\"\n"
        },
        {
          "name": "fluent-bit_git.bb",
          "type": "blob",
          "size": 1.59375,
          "content": "# Fluent Bit - Yocto / Bitbake\n# ============================\n# The following Bitbake recipe aims to be used as a reference for testing\n# or development purposes. This recipe takes Fluent Bit from GIT master\n# which is under active development and not suggested for production.\n\nSUMMARY = \"Fast Log processor and Forwarder\"\nDESCRIPTION = \"Fluent Bit is a data collector, processor and  \\\nforwarder for Linux. It supports several input sources and \\\nbackends (destinations) for your data. \\\n\"\n\nHOMEPAGE = \"http://fluentbit.io\"\nBUGTRACKER = \"https://github.com/fluent/fluent-bit/issues\"\n\nLICENSE = \"Apache-2.0\"\nLIC_FILES_CHKSUM = \"file://LICENSE;md5=2ee41112a44fe7014dce33e26468ba93\"\nSECTION = \"net\"\n\nPR = \"r0\"\nPV = \"1.1-git\"\n\nSRCREV = \"${AUTOREV}\"\nSRC_URI = \"git://github.com/fluent/fluent-bit\"\n\nS = \"${WORKDIR}/git\"\nDEPENDS = \"zlib bison-native flex-native\"\nINSANE_SKIP_${PN}-dev += \"dev-elf\"\n\n# Use CMake 'Unix Makefiles' generator\nOECMAKE_GENERATOR ?= \"Unix Makefiles\"\n\n# Fluent Bit build options\n# ========================\n\n# Host related setup\nEXTRA_OECMAKE += \"-DGNU_HOST=${HOST_SYS} \"\n\n# Disable LuaJIT and filter_lua support\nEXTRA_OECMAKE += \"-DFLB_LUAJIT=Off -DFLB_FILTER_LUA=Off \"\n\n# Disable Library and examples\nEXTRA_OECMAKE += \"-DFLB_SHARED_LIB=Off -DFLB_EXAMPLES=Off \"\n\n# Kafka Output plugin (disabled by default): note that when\n# enabling Kafka output plugin, the backend library librdkafka\n# requires 'openssl' as a dependency.\n#\n# DEPENDS += \"openssl \"\n# EXTRA_OECMAKE += \"-DFLB_OUT_KAFKA=On \"\n\ninherit cmake systemd\n\nSYSTEMD_SERVICE_${PN} = \"fluent-bit.service\"\nTARGET_CC_ARCH_append = \" ${SELECTED_OPTIMIZATION}\"\n"
        },
        {
          "name": "fluentbit_logo.png",
          "type": "blob",
          "size": 17.990234375,
          "content": null
        },
        {
          "name": "gen_static_conf",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "init",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 3.8251953125,
          "content": "#!/usr/bin/env bash\nset -e\n\n# Provided primarily to simplify testing for staging, etc.\nRELEASE_URL=${FLUENT_BIT_PACKAGES_URL:-https://packages.fluentbit.io}\nRELEASE_KEY=${FLUENT_BIT_PACKAGES_KEY:-$RELEASE_URL/fluentbit.key}\n\n# Optionally specify the version to install\nRELEASE_VERSION=${FLUENT_BIT_RELEASE_VERSION:-}\n# Optionally prefix install commands, e.g. use 'echo ' here to prevent installation after repo set up.\nINSTALL_CMD_PREFIX=${FLUENT_BIT_INSTALL_COMMAND_PREFIX:-}\n# Optionally set the name of th package to install, e.g. for legacy td-agent-bit.\nINSTALL_PACKAGE_NAME=${FLUENT_BIT_INSTALL_PACKAGE_NAME:-fluent-bit}\n# Optional Apt/Yum additional parameters (e.g. releasever for AL2022/AL2023)\nAPT_PARAMETERS=${FLUENT_BIT_INSTALL_APT_PARAMETERS:-}\nYUM_PARAMETERS=${FLUENT_BIT_INSTALL_YUM_PARAMETERS:-}\n\necho \"================================\"\necho \" Fluent Bit Installation Script \"\necho \"================================\"\necho \"This script requires superuser access to install packages.\"\necho \"You will be prompted for your password by sudo.\"\n\n# Determine package type to install: https://unix.stackexchange.com/a/6348\n# OS used by all - for Debs it must be Ubuntu or Debian\n# CODENAME only used for Debs\nif [ -f /etc/os-release ]; then\n    # Debian uses Dash which does not support source\n    # shellcheck source=/dev/null\n    . /etc/os-release\n    OS=$( echo \"${ID}\" | tr '[:upper:]' '[:lower:]')\n    CODENAME=$( echo \"${VERSION_CODENAME}\" | tr '[:upper:]' '[:lower:]')\nelif lsb_release &>/dev/null; then\n    OS=$(lsb_release -is | tr '[:upper:]' '[:lower:]')\n    CODENAME=$(lsb_release -cs)\nelse\n    OS=$(uname -s)\nfi\n\nSUDO=sudo\nif [ \"$(id -u)\" -eq 0 ]; then\n    SUDO=''\nelse\n    # Clear any previous sudo permission\n    sudo -k\nfi\n\n# Set up version pinning\nAPT_VERSION=''\nYUM_VERSION=''\nif [ -n \"${RELEASE_VERSION}\" ]; then\n    APT_VERSION=\"=$RELEASE_VERSION\"\n    YUM_VERSION=\"-$RELEASE_VERSION\"\nfi\n\n# Now set up repos and install dependent on OS, version, etc.\n# Will require sudo\ncase ${OS} in\n    amzn|amazonlinux)\n        $SUDO sh <<SCRIPT\nrpm --import $RELEASE_KEY\ncat << EOF > /etc/yum.repos.d/fluent-bit.repo\n[fluent-bit]\nname = Fluent Bit\n# Legacy server style\nbaseurl = $RELEASE_URL/amazonlinux/$VERSION\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=$RELEASE_KEY\nenabled=1\nEOF\ncat /etc/yum.repos.d/fluent-bit.repo\n$INSTALL_CMD_PREFIX yum -y $YUM_PARAMETERS install $INSTALL_PACKAGE_NAME$YUM_VERSION\nSCRIPT\n    ;;\n    centos|centoslinux|rhel|redhatenterpriselinuxserver|fedora|rocky|almalinux)\n        # We need variable expansion and non-expansion on the URL line to pick up the base URL.\n        # Therefore we combine things with sed to handle it.\n        $SUDO sh <<SCRIPT\nrpm --import $RELEASE_KEY\ncat << EOF > /etc/yum.repos.d/fluent-bit.repo\n[fluent-bit]\nname = Fluent Bit\n# Legacy server style\nbaseurl = $RELEASE_URL/centos/VERSION_SUBSTR\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=$RELEASE_KEY\nenabled=1\nEOF\nsed -i 's|VERSION_SUBSTR|\\$releasever/|g' /etc/yum.repos.d/fluent-bit.repo\ncat /etc/yum.repos.d/fluent-bit.repo\n$INSTALL_CMD_PREFIX yum -y $YUM_PARAMETERS install $INSTALL_PACKAGE_NAME$YUM_VERSION\nSCRIPT\n    ;;\n    ubuntu|debian)\n        # Remember apt-key add is deprecated\n        # https://wiki.debian.org/DebianRepository/UseThirdParty#OpenPGP_Key_distribution\n        $SUDO sh <<SCRIPT\nexport DEBIAN_FRONTEND=noninteractive\nmkdir -p /usr/share/keyrings/\ncurl $RELEASE_KEY | gpg --dearmor > /usr/share/keyrings/fluentbit-keyring.gpg\ncat > /etc/apt/sources.list.d/fluent-bit.list <<EOF\ndeb [signed-by=/usr/share/keyrings/fluentbit-keyring.gpg] $RELEASE_URL/${OS}/${CODENAME} ${CODENAME} main\nEOF\ncat /etc/apt/sources.list.d/fluent-bit.list\napt-get -y update\n$INSTALL_CMD_PREFIX apt-get -y $APT_PARAMETERS install $INSTALL_PACKAGE_NAME$APT_VERSION\nSCRIPT\n    ;;\n    *)\n        echo \"${OS} not supported.\"\n        exit 1\n    ;;\nesac\n\necho \"\"\necho \"Installation completed. Happy Logging!\"\necho \"\"\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "run_code_analysis.sh",
          "type": "blob",
          "size": 2.0791015625,
          "content": "#!/bin/bash\nset -eux\nSCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\"\n\n# Simple helper script to run various code-analysis tools (sanitisers, coverage, etc.) and unit test using a simple helper container.\n# Refer to https://github.com/lpenz/ghaction-cmake for more details: https://github.com/lpenz/ghaction-cmake#using-in-other-environments\nTEST_PRESET=${TEST_PRESET:-coverage}\n\nexport SOURCE_DIR=${SOURCE_DIR:-$SCRIPT_DIR}\nCONTAINER_RUNTIME=${CONTAINER_RUNTIME:-docker}\n\n# From the Dockerfile\nFLB_CMAKE_OPTIONS=${FLB_CMAKE_OPTIONS:--DFLB_BACKTRACE=Off -DFLB_SHARED_LIB=Off -DFLB_DEBUG=On -DFLB_ALL=On -DFLB_EXAMPLES=Off -DFLB_TESTS_INTERNAL=On -DFLB_TESTS_RUNTIME=On}\nADDITIONAL_DEPS=${ADDITIONAL_DEPS:-libssl-dev libsasl2-dev pkg-config libsystemd-dev zlib1g-dev libpq-dev postgresql-server-dev-all flex bison libyaml-dev netcat}\n\n# From the Unit Tests script\nSKIP_TESTS=${SKIP_TESTS:-flb-rt-out_elasticsearch flb-it-network flb-it-fstore flb-rt-out_elasticsearch flb-rt-out_td flb-rt-out_forward flb-rt-in_disk flb-rt-in_proc}\n\nSKIP=\"\"\nfor skip in $SKIP_TESTS\ndo\n    SKIP=\"$SKIP -DFLB_WITHOUT_${skip}=1\"\ndone\n\n# Check we have an actual Fluent Bit source directory\nif [[ ! -d \"$SOURCE_DIR\" ]]; then\n    echo \"ERROR: no SOURCE_DIR directory\"\n    exit 1\nelif [[ ! -f \"$SOURCE_DIR\"/CMakeLists.txt ]]; then\n    echo \"ERROR: no CMakeLists.txt found in SOURCE_DIR\"\n    exit 1\nfi\n\nmachine_id_file=\"$(mktemp)\"\n< /dev/urandom tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 > \"${machine_id_file}\"\n\nexit_code=0\n# Run the action we want on it but using an in-container build directory to prevent various permissions errors and files locally\n\"$CONTAINER_RUNTIME\" run --rm -t -w \"/tmp/source\" -v \"${SOURCE_DIR}:/source:ro\" \\\n    -v \"${machine_id_file}:/etc/machine-id:ro\" \\\n    -e INPUT_PRESET=\"$TEST_PRESET\" \\\n    -e INPUT_DEPENDENCIES_DEBIAN=\"$ADDITIONAL_DEPS\" \\\n    -e INPUT_CMAKEFLAGS=\"$FLB_CMAKE_OPTIONS $SKIP\" \\\n    -e INPUT_PRE_COMMAND=\"cp -R /source /tmp\" \\\n    -e INPUT_WORKING-DIRECTORY=\"/tmp/source\" \\\n    lpenz/ghaction-cmake:0.19 \\\n    || exit_code=$?\n\nrm -f \"${machine_id_file}\"\nexit \"${exit_code}\"\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "snap",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "update_version.sh",
          "type": "blob",
          "size": 3.115234375,
          "content": "#!/bin/bash\nset -e\nSCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\"\n\nfunction usage() {\n    echo \"Usage: $0 2.1.2\"\n    echo \"Or set NEW_VERSION=2.1.2\"\n}\n\nfunction sed_wrapper() {\n  if sed --version >/dev/null 2>&1; then\n    $(which sed) \"$@\"\n  else\n    if command -v gsed >/dev/null 2>&1 ; then\n      # homebrew gnu-sed is required on MacOS\n      gsed \"$@\"\n    else\n      echo \"ERROR: No valid GNU compatible 'sed' found, if on macOS please run 'brew install gnu-sed'\" >&2\n      exit 1\n    fi\n  fi\n}\n\nNEW_VERSION=${NEW_VERSION:-$1}\n\nif [[ -z \"$NEW_VERSION\" ]]; then\n    usage\n    exit 1\nfi\n\n# Handle stripping the v prefix if present\nif [[ \"$NEW_VERSION\" =~ ^v?([0-9]+\\.[0-9]+\\.[0-9]+)$ ]] ; then\n    NEW_VERSION=${BASH_REMATCH[1]}\n    echo \"Valid version string: $NEW_VERSION\"\nelse\n    echo \"ERROR: Invalid semver string: $NEW_VERSION\" >&2\n    exit 1\nfi\n\n# Get the current year\nNEW_COPYRIGHT_YEAR=${NEW_COPYRIGHT_YEAR:-$(date +%Y)}\n\n# Update Copyright statement\nsed_wrapper -i -E \"s/Copyright \\(C\\) 2015-([0-9]+)/Copyright (C) 2015-$NEW_COPYRIGHT_YEAR/g\" \"$SCRIPT_DIR\"/include/fluent-bit/flb_version.h.in\n\n# Extract and verify each version\nmajor=$(echo \"$NEW_VERSION\" | cut -d. -f1)\nminor=$(echo \"$NEW_VERSION\" | cut -d. -f2)\npatch=$(echo \"$NEW_VERSION\" | cut -d. -f3)\n\nif [[ -z \"$major\" ]]; then\n    echo \"ERROR: major is empty, invalid version: $NEW_VERSION\" >&2\n    exit 1\nfi\nif [[ -z \"$minor\" ]]; then\n    echo \"ERROR: minor is empty, invalid version: $NEW_VERSION\" >&2\n    exit 1\nfi\nif [[ -z \"$patch\" ]]; then\n    echo \"ERROR: patch is empty, invalid version: $NEW_VERSION\" >&2\n    exit 1\nfi\n\n# Build version\nsed_wrapper -i \"s/FLB_VERSION_MAJOR  [0-9]/FLB_VERSION_MAJOR  $major/g\" \"$SCRIPT_DIR\"/CMakeLists.txt\nsed_wrapper -i \"s/FLB_VERSION_MINOR  [0-9]/FLB_VERSION_MINOR  $minor/g\" \"$SCRIPT_DIR\"/CMakeLists.txt\nsed_wrapper -i \"s/FLB_VERSION_PATCH  [0-9]/FLB_VERSION_PATCH  $patch/g\" \"$SCRIPT_DIR\"/CMakeLists.txt\n\n# Dockerfile\nsed_wrapper -i \"s/ARG RELEASE_VERSION=[0-9].[0-9].[0-9]/ARG RELEASE_VERSION=$NEW_VERSION/g\" \"$SCRIPT_DIR\"/dockerfiles/Dockerfile\nsed_wrapper -i \"s/ARG RELEASE_VERSION=[0-9].[0-9].[0-9]/ARG RELEASE_VERSION=$NEW_VERSION/g\" \"$SCRIPT_DIR\"/dockerfiles/Dockerfile*\n\n\n# Snap\nsed_wrapper -i -E \"s/version: '[0-9]+\\.[0-9]+\\.[0-9]+'/version: '$NEW_VERSION'/g\" \"$SCRIPT_DIR\"/snap/snapcraft.yaml\n\n# Bitbake / Yocto\nif [[ -f \"fluent-bit-$NEW_VERSION.bb\" ]]; then\n    echo \"ERROR: existing fluent-bit-$NEW_VERSION.bb\"\n    exit 1\nelse\n    mv -vf \"$SCRIPT_DIR\"/fluent-bit-*.*.*.bb \"fluent-bit-$NEW_VERSION.bb\"\n    sed_wrapper -i -E \"s/^PV =.*$/PV = \\\"$NEW_VERSION\\\"/g\" \"fluent-bit-$NEW_VERSION.bb\"\nfi\n\nif [[ \"${DISABLE_COMMIT:-no}\" == \"no\" ]]; then\n    if ! command -v git &> /dev/null ; then\n        echo \"ERROR: Missing git CLI\" >&2\n        exit 1\n    fi\n\n    git commit -s -m \"build: bump to v$NEW_VERSION\" -- CMakeLists.txt\n    git commit -s -m \"dockerfile: bump to v$NEW_VERSION\" -- dockerfiles/*\n    git commit -s -m \"snap: bump to v$NEW_VERSION\" snap/snapcraft.yaml\n    # Handle renaming\n    git add \"*.bb\"\n    git commit -a -s -m \"bitbake: bump to v$NEW_VERSION\"\nelse\n    echo \"Skipping commits\"\nfi\n\necho \"Updated version successfully\"\n"
        },
        {
          "name": "valgrind.supp",
          "type": "blob",
          "size": 2.3984375,
          "content": "# pthread\n{\n   Pthread 'fake' leak at glibc level\n   Memcheck:Leak\n   match-leak-kinds: possible\n   fun:calloc\n   fun:allocate_dtv\n   fun:_dl_allocate_tls\n   fun:allocate_stack\n   fun:pthread_create@@GLIBC_2.2.5\n   fun:mk_utils_worker_spawn\n   fun:flb_worker_create\n   fun:flb_log_init\n   fun:flb_lib_worker\n   fun:start_thread\n   fun:clone\n}\n\n# dl-open suppressions\n{\n   Skip _dl_load_cache_lookup\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:strdup\n   fun:_dl_load_cache_lookup\n   fun:_dl_map_object\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n   fun:do_dlopen\n   fun:_dl_catch_error\n   fun:dlerror_run\n   fun:__libc_dlopen_mode\n   fun:pthread_cancel_init\n   fun:_Unwind_ForcedUnwind\n}\n\n{\n   Skip _dl_new_object\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:_dl_new_object\n   fun:_dl_map_object_from_fd\n   fun:_dl_map_object\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n   fun:do_dlopen\n   fun:_dl_catch_error\n   fun:dlerror_run\n   fun:__libc_dlopen_mode\n   fun:pthread_cancel_init\n   fun:_Unwind_ForcedUnwind\n}\n\n{\n   Skip _dl_check_map_versions\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:calloc\n   fun:_dl_check_map_versions\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n   fun:do_dlopen\n   fun:_dl_catch_error\n   fun:dlerror_run\n   fun:__libc_dlopen_mode\n   fun:pthread_cancel_init\n   fun:_Unwind_ForcedUnwind\n   fun:__pthread_unwind\n   fun:__do_cancel\n   fun:pthread_exit\n}\n\n{\n   Skip unwind->_dl_new_object\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:calloc\n   fun:_dl_new_object\n   fun:_dl_map_object_from_fd\n   fun:_dl_map_object\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n   fun:do_dlopen\n   fun:_dl_catch_error\n   fun:dlerror_run\n   fun:__libc_dlopen_mode\n   fun:pthread_cancel_init\n   fun:_Unwind_ForcedUnwind\n}\n\n# Thread Pool (multi-worker mode in output instance). When the thread pool interface\n# starts, the flb_output_thread.c allocate a context. Valgrind complains about it\n# but in reality it's only used inside the thread.\n{\n   <insert_a_suppression_name_here>\n   Helgrind:Race\n   fun:flb_output_thread_pool_flush\n   fun:flb_output_task_flush\n   fun:tasks_start\n   fun:flb_engine_dispatch\n   fun:flb_engine_flush\n   fun:flb_engine_handle_event\n   fun:flb_engine_start\n   fun:flb_lib_worker\n   obj:/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_helgrind-amd64-linux.so\n   fun:start_thread\n   fun:clone\n}\n"
        }
      ]
    }
  ]
}