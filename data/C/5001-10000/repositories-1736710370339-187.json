{
  "metadata": {
    "timestamp": 1736710370339,
    "page": 187,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "guanzhi/GmSSL",
      "stars": 5326,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4228515625,
          "content": "\n# generated file\n/build*\n/demos/*.pem\n/demos/.private\n/demos/scripts/*.pem\n/demos/scripts/*.der\n/demos/scripts/*.txt\n/demos/scripts/*.bin\n/demos/scripts/*.sig\n\n/examples/*\n\n# Object files\n*.o\n*.obj\n\n# All kinds of executables\n*.so\n*.so.*\n*.dylib\n*.dylib.*\n*.dll\n*.dll.*\n*.exe\n*.pyc\n*.exp\n*.lib\n*.pdb\n*.ilk\n*.def\n*.rc\n*.res\n\n# macOS\n.DS_Store\n*.tar.gz\n\n# editor artefacts\n.vscode/*\n*.swp\n.#*\n\\#*#\n*~\n\n/docs/*\n\n/.vs/*\n/out/*\n\n*.plist\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 15.806640625,
          "content": "if (CMAKE_VERSION VERSION_LESS \"3.0\")\n\tcmake_minimum_required(VERSION 2.8)\nelse()\n\tcmake_minimum_required(VERSION 3.6)\nendif()\nproject(GmSSL C)\n\nSET(CMAKE_PROJECT_HOMEPAGE_URL \"http://gmssl.org\")\n\nset(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)\nset(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)\nSET(CMAKE_MODULE_PATH \"${CMAKE_MODULE_PATH};${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\ninclude_directories(include)\n\nif(MSVC)\n\t#add_compile_options(/O2) # conflict with CI /0d (not optimized)\nelse()\n\tadd_compile_options(-O3)\nendif()\n\noption(ENABLE_TEST_SPEED \"Enable test speed\" OFF)\n\n\n\noption(ENABLE_SM2_ARM64 \"Enable SM2_Z256 ARMv8 assembly\" OFF)\noption(ENABLE_SM3_ARM64 \"Enable SM3 Arm Neon implementation (10% faster on Apple M2)\" OFF)\noption(ENABLE_SM4_ARM64 \"Enable SM4 AARCH64 assembly implementation\" OFF)\noption(ENABLE_SM4_CE \"Enable SM4 ARM CE assembly implementation\" OFF)\noption(ENABLE_SM9_ARM64 \"Enable SM9_Z256 ARMv8 assembly\" OFF)\noption(ENABLE_GMUL_ARM64 \"Enable GF(2^128) Multiplication AArch64 assembly\" OFF)\n\n\noption(ENABLE_SM4_AVX2 \"Enable SM4 AVX2 8x implementation\" OFF)\noption(ENABLE_SM4_AESNI \"Enable SM4 AES-NI (4x) implementation\" OFF)\noption(ENABLE_SM2_AMD64 \"Enable SM2_Z256 X86_64 assembly\" OFF)\n\n\noption(ENABLE_SM3_SSE \"Enable SM3 SSE assembly implementation\" OFF)\n\noption(ENABLE_SM4_CTR_AESNI_AVX \"Enable SM4 CTR AESNI+AVX assembly implementation\" OFF)\noption(ENABLE_SM4_CL \"Enable SM4 OpenCL\" OFF)\n\n\noption(ENABLE_INTEL_RDRAND \"Enable Intel RDRAND instructions\" OFF)\noption(ENABLE_INTEL_RDSEED \"Enable Intel RDSEED instructions\" OFF)\n\noption(ENABLE_SM4_ECB \"Enable SM4 ECB mode\" ON)\noption(ENABLE_SM4_OFB \"Enable SM4 OFB mode\" ON)\noption(ENABLE_SM4_CFB \"Enable SM4 CFB mode\" ON)\noption(ENABLE_SM4_CCM \"Enable SM4 CCM mode\" ON)\noption(ENABLE_SM4_XTS \"Enable SM4 XTS mode\" ON)\noption(ENABLE_SM4_CBC_MAC \"Enable SM4-CBC-MAC\" ON)\n\noption(ENABLE_SM2_EXTS \"Enable SM2 Extensions\" OFF)\noption(ENABLE_SM3_XMSS \"Enable SM3-XMSS signature\" ON)\n\n\noption(ENABLE_SHA1 \"Enable SHA1\" ON)\noption(ENABLE_SHA2 \"Enable SHA2\" ON)\noption(ENABLE_AES \"Enable AES\" ON)\noption(ENABLE_CHACHA20 \"Enable Chacha20\" ON)\n\noption(ENABLE_SKF \"Enable SKF module\" OFF)\noption(ENABLE_SDF \"Enable SDF module\" ON)\n\noption(ENABLE_ASM_UNDERSCORE_PREFIX \"Add prefix `_` to assembly symbols\" ON)\n\noption(ENABLE_TLS_DEBUG \"Enable TLS and TLCP print debug message\" OFF)\n\noption (ENABLE_SM2_ENC_PRE_COMPUTE \"Enable SM2 encryption precomputing\" ON)\n\nset(src\n\tsrc/version.c\n\tsrc/debug.c\n\tsrc/sm4.c\n\tsrc/sm4_cbc.c\n\tsrc/sm4_ctr.c\n\tsrc/sm4_gcm.c\n\tsrc/sm3.c\n\tsrc/sm3_hmac.c\n\tsrc/sm3_kdf.c\n\tsrc/sm3_pbkdf2.c\n\tsrc/sm3_digest.c\n\tsrc/sm2_z256.c\n\tsrc/sm2_z256_table.c\n\tsrc/sm2_key.c\n\tsrc/sm2_sign.c\n\tsrc/sm2_enc.c\n\tsrc/sm2_exch.c\n\tsrc/sm9_z256.c\n\tsrc/sm9_z256_table.c\n\tsrc/sm9_key.c\n\tsrc/sm9_sign.c\n\tsrc/sm9_enc.c\n\tsrc/sm9_exch.c\n\tsrc/zuc.c\n\tsrc/zuc_modes.c\n\tsrc/block_cipher.c\n\tsrc/digest.c\n\tsrc/hmac.c\n\tsrc/hkdf.c\n\tsrc/gf128.c\n\tsrc/ghash.c\n\tsrc/sm4_cbc_sm3_hmac.c\n\tsrc/sm4_ctr_sm3_hmac.c\n\tsrc/pkcs8.c\n\tsrc/ec.c\n\tsrc/rsa.c\n\tsrc/asn1.c\n\tsrc/hex.c\n\tsrc/base64.c\n\tsrc/pem.c\n\tsrc/x509_alg.c\n\tsrc/x509_cer.c\n\tsrc/x509_ext.c\n\tsrc/x509_req.c\n\tsrc/x509_crl.c\n\tsrc/x509_new.c\n\tsrc/cms.c\n\tsrc/socket.c\n\tsrc/tls.c\n\tsrc/tls_ext.c\n\tsrc/tls_trace.c\n\tsrc/tlcp.c\n\tsrc/tls12.c\n\tsrc/tls13.c\n\tsrc/file.c\n\tsrc/file.c\n)\n\nset(tools\n\ttools/gmssl.c\n\ttools/version.c\n\ttools/sm4.c\n\ttools/sm4_cbc.c\n\ttools/sm4_ctr.c\n\ttools/sm4_gcm.c\n\ttools/sm4_cbc_sm3_hmac.c\n\ttools/sm4_ctr_sm3_hmac.c\n\ttools/sm3.c\n\ttools/sm3hmac.c\n\ttools/sm3_pbkdf2.c\n\ttools/sm3xmss_keygen.c\n\ttools/sm2keygen.c\n\ttools/sm2sign.c\n\ttools/sm2verify.c\n\ttools/sm2encrypt.c\n\ttools/sm2decrypt.c\n\ttools/sm9setup.c\n\ttools/sm9keygen.c\n\ttools/sm9sign.c\n\ttools/sm9verify.c\n\ttools/sm9encrypt.c\n\ttools/sm9decrypt.c\n\ttools/zuc.c\n\ttools/rand.c\n\ttools/ghash.c\n\ttools/certgen.c\n\ttools/certparse.c\n\ttools/certverify.c\n\ttools/certrevoke.c\n\ttools/reqgen.c\n\ttools/reqparse.c\n\ttools/reqsign.c\n\ttools/crlgen.c\n\ttools/crlget.c\n\ttools/crlparse.c\n\ttools/crlverify.c\n\ttools/cmssign.c\n\ttools/cmsverify.c\n\ttools/cmsencrypt.c\n\ttools/cmsdecrypt.c\n\ttools/cmsparse.c\n\ttools/tlcp_client.c\n\ttools/tlcp_server.c\n\ttools/tls12_client.c\n\ttools/tls12_server.c\n\ttools/tls13_client.c\n\ttools/tls13_server.c\n)\n\nset(tests\n\tsm4\n\tsm4_cbc\n\tsm4_ctr\n\tsm4_gcm\n\tsm3\n\tsm4_sm3_hmac\n\tsm2_z256\n\tsm2_key\n\tsm2_sign\n\tsm2_enc\n\tsm9\n\tzuc\n\tblock_cipher\n\tdigest\n\thmac\n\thkdf\n\tgf128\n\tghash\n\tpkcs8\n\tec\n\tasn1\n\thex\n\tbase64\n\tpem\n\tx509\n\tx509_oid\n\tx509_alg\n\tx509_str\n\tx509_ext\n\tx509_req\n\tx509_crl\n\tcms\n\ttls\n\ttls13\n)\n\n\n\n\ninclude(CheckSymbolExists)\n\n\noption(ENABLE_SMALL_FOOTPRINT \"Enable small code size\" OFF)\nif (ENABLE_SMALL_FOOTPRINT)\n\tmessage(STATUS \"ENABLE_SMALL_FOOTPRINT is ON\")\n\tadd_definitions(-DENABLE_SMALL_FOOTPRINT)\nendif()\n\n\n\nif (ENABLE_TEST_SPEED)\n\tmessage(STATUS \"ENABLE_TEST_SPEED is ON\")\n\tadd_definitions(-DENABLE_TEST_SPEED)\nendif()\n\n\noption(ENABLE_SM2_ALGOR_ID_ENCODE_NULL \"Enable AlgorithmIdenifier with algorithm sm2sign_with_sm3 encode a NULL object as parameters\" OFF)\nif (ENABLE_SM2_ALGOR_ID_ENCODE_NULL)\n\tmessage(STATUS \"ENABLE_SM2_ALGOR_ID_ENCODE_NULL is ON\")\n\tadd_definitions(-DENABLE_SM2_ALGOR_ID_ENCODE_NULL)\nendif()\n\nif (ENABLE_ASM_UNDERSCORE_PREFIX)\n\tmessage(STATUS \"ENABLE_ASM_UNDERSCORE_PREFIX is ON\")\n\tadd_definitions(-DENABLE_ASM_UNDERSCORE_PREFIX)\nendif()\n\nif (ENABLE_GMUL_ARM64)\n\tmessage(STATUS \"ENABLE_GMUL_ARM64 is ON\")\n\tadd_definitions(-DENABLE_GMUL_ARM64)\n\tenable_language(ASM)\n\t#list(APPEND src src/gf128_arm64.S)\n\tlist(APPEND src src/gf128_arm64.c)\nendif()\n\n\n\nif (ENABLE_SM2_ARM64)\n\tmessage(STATUS \"ENABLE_SM2_ARM64 is ON\")\n\tadd_definitions(-DENABLE_SM2_ARM64)\n\tenable_language(ASM)\n\tlist(APPEND src src/sm2_z256_arm64.S)\nendif()\n\nif (ENABLE_SM2_AMD64)\n\tmessage(STATUS \"ENABLE_SM2_AMD64 is ON\")\n\tadd_definitions(-DENABLE_SM2_AMD64)\n\tenable_language(ASM)\n\tlist(APPEND src src/sm2_z256_amd64.S)\nendif()\n\nif (ENABLE_SM2_NEON)\n\tmessage(STATUS \"ENABLE_SM2_NEON is ON\")\n\tadd_definitions(-DENABLE_SM2_NEON)\nendif()\n\nif (ENABLE_SM9_ARM64)\n\tmessage(STATUS \"ENABLE_SM9_ARM64 is ON\")\n\tadd_definitions(-DENABLE_SM9_ARM64)\n\tenable_language(ASM)\n\tlist(APPEND src src/sm9_z256_arm64.S)\nendif()\n\n\nif (ENABLE_TLS_DEBUG)\n\tmessage(STATUS \"ENABLE_TLS_DEBUG is ON\")\n\tadd_definitions(-DENABLE_TLS_DEBUG)\nendif()\n\n\nif (ENABLE_SM3_SSE)\n\tmessage(STATUS \"ENABLE_SM3_SSE is ON\")\n\tlist(FIND src src/sm3.c sm3_index)\n\tlist(REMOVE_AT src ${sm3_index})\n\tlist(INSERT src ${sm3_index} src/sm3_sse.c)\nendif()\n\nif (ENABLE_SM3_ARM64)\n\tmessage(STATUS \"ENABLE_SM3_ARM64 is ON\")\n\tlist(FIND src src/sm3.c index)\n\tlist(REMOVE_AT src ${index})\n\tlist(INSERT src ${index} src/sm3_arm64.c)\nendif()\n\nif (ENABLE_SM4_ARM64)\n\tmessage(STATUS \"ENABLE_SM4_ARM64 is ON\")\n\tlist(FIND src src/sm4.c sm4_index)\n\tlist(REMOVE_AT src ${sm4_index})\n\tlist(INSERT src ${sm4_index} src/sm4_arm64.c)\n\tenable_language(ASM)\nendif()\n\nif (ENABLE_SM4_AVX2)\n\tmessage(STATUS \"ENABLE_SM4_AVX2 is ON\")\n\tlist(FIND src src/sm4.c sm4_index)\n\tlist(REMOVE_AT src ${sm4_index})\n\tlist(INSERT src ${sm4_index} src/sm4_avx2.c)\n\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -march=native\")\nendif()\n\nif (ENABLE_SM4_AESNI)\n\tmessage(STATUS \"ENABLE_SM4_AESNI is ON\")\n\tlist(FIND src src/sm4.c sm4_index)\n\tlist(REMOVE_AT src ${sm4_index})\n\tlist(INSERT src ${sm4_index} src/sm4_aesni.c)\n\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -march=native\")\nendif()\n\n\n\n\nif (ENABLE_SM4_CE)\n\tmessage(STATUS \"ENABLE_SM4_CE is ON\")\n\tlist(FIND src src/sm4.c sm4_index)\n\tlist(REMOVE_AT src ${sm4_index})\n\tlist(INSERT src ${sm4_index} src/sm4_ce.c)\n\tset_source_files_properties(src/sm4_ce.c PROPERTIES COMPILE_OPTIONS \"-march=armv8.2-a+sm4\")\nendif()\n\n\nif (ENABLE_SM4_CTR_AESNI_AVX)\n\tmessage(STATUS \"ENABLE_SM4_CTR_AESNI_AVX is ON\")\n\tlist(FIND src src/sm4_ctr.c sm4_ctr_index)\n\tlist(REMOVE_AT src ${sm4_ctr_index})\n\tlist(INSERT src ${sm4_ctr_index} src/sm4_ctr_aesni_avx.c)\n\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -march=native\")\nendif()\n\n\n\nif (ENABLE_SM4_CL)\n\tmessage(STATUS \"ENABLE_SM4_CL is ON\")\n\tadd_definitions(-DENABLE_SM4_CL)\n\tif (CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n\t\tadd_definitions(-DMACOS) # to include <OpenCL/OpenCL.h>\n\tendif()\n\tlist(APPEND src src/sm4_cl.c)\n\tlist(APPEND tests sm4_cl)\nendif()\n\nif (ENABLE_SM4_ECB)\n\tmessage(STATUS \"ENABLE_SM4_ECB is ON\")\n\tadd_definitions(-DENABLE_SM4_ECB)\n\tlist(APPEND src src/sm4_ecb.c)\n\tlist(APPEND tools tools/sm4_ecb.c)\n\tlist(APPEND tests sm4_ecb)\nendif()\n\nif (ENABLE_SM4_OFB)\n\tmessage(STATUS \"ENABLE_SM4_OFB is ON\")\n\tadd_definitions(-DENABLE_SM4_OFB)\n\tlist(APPEND src src/sm4_ofb.c)\n\tlist(APPEND tools tools/sm4_ofb.c)\n\tlist(APPEND tests sm4_ofb)\nendif()\n\nif (ENABLE_SM4_CFB)\n\tmessage(STATUS \"ENABLE_SM4_CFB is ON\")\n\tadd_definitions(-DENABLE_SM4_CFB)\n\tlist(APPEND src src/sm4_cfb.c)\n\tlist(APPEND tools tools/sm4_cfb.c)\n\tlist(APPEND tests sm4_cfb)\nendif()\n\nif (ENABLE_SM4_CCM)\n\tmessage(STATUS \"ENABLE_SM4_CCM is ON\")\n\tset(ENABLE_SM4_CBC_MAC ON)\n\tadd_definitions(-DENABLE_SM4_CCM)\n\tlist(APPEND src src/sm4_ccm.c)\n\tlist(APPEND tools tools/sm4_ccm.c)\n\tlist(APPEND tests sm4_ccm)\nendif()\n\nif (ENABLE_SM4_XTS)\n\tmessage(STATUS \"ENABLE_SM4_XTS is ON\")\n\tadd_definitions(-DENABLE_SM4_XTS)\n\tlist(APPEND src src/sm4_xts.c)\n\tlist(APPEND tools tools/sm4_xts.c)\n\tlist(APPEND tests sm4_xts)\nendif()\n\n\nif (ENABLE_SM2_EXTS)\n\tmessage(STATUS \"ENABLE_SM4_AESNI_AVX\")\n\tlist(APPEND src\n\t\tsrc/sm2_key_share.c\n\t\tsrc/sm2_recover.c\n\t\tsrc/sm2_blind.c\n\t\tsrc/sm2_ring.c\n\t\tsrc/sm2_elgamal.c\n\t\tsrc/sm2_commit.c)\n\tlist(APPEND tests sm2_key_share sm2_blind sm2_ring sm2_elgamal sm2_commit)\nendif()\n\n\nif (ENABLE_SM3_XMSS)\n\tmessage(STATUS \"ENABLE_SM3_XMSS is ON\")\n\tlist(APPEND src src/sm3_xmss.c)\n\n\toption(ENABLE_SM3_XMSS_CROSSCHECK \"Enable XMSS SHA-256 cross-check\" OFF)\n\tif (ENABLE_SM3_XMSS_CROSSCHECK)\n\t\tmessage(STATUS \"ENABLE_SM3_XMSS_CROSSCHECK is ON\")\n\t\tadd_definitions(-DENABLE_SM3_XMSS_CROSSCHECK)\n\t\tlist(APPEND tests sm3_xmss)\n\tendif()\nendif()\n\n\nif (ENABLE_SHA1)\n\tmessage(STATUS \"ENABLE_SHA1 is ON\")\n\tadd_definitions(-DENABLE_SHA1)\n\tlist(APPEND src src/sha1.c)\n\tlist(APPEND tests sha1)\nendif()\n\n\nif (ENABLE_SHA2)\n\tmessage(STATUS \"ENABLE_SHA2 is ON\")\n\tadd_definitions(-DENABLE_SHA2)\n\tlist(APPEND src src/sha256.c src/sha512.c)\n\tlist(APPEND tests sha224 sha256 sha384 sha512)\nendif()\n\n\nif (ENABLE_AES)\n\tmessage(STATUS \"ENABLE_AES is ON\")\n\tlist(APPEND src src/aes.c src/aes_modes.c)\n\tlist(APPEND tests aes)\nendif()\n\n\nif (ENABLE_CHACHA20)\n\tmessage(STATUS \"ENABLE_CHACHA20 is ON\")\n\tlist(APPEND src src/chacha20.c)\n\tlist(APPEND tests chacha20)\nendif()\n\n\nif (ENABLE_INTEL_RDRAND)\n\tinclude(CheckSourceCompiles)\n\tset(CMAKE_REQUIRED_FLAGS \"-rdrand\")\n\tcheck_source_compiles(C\n\t\t\"#include <immintrin.h> int main(void) { unsigned long long val; _rdrand64_step(&val); return 0; }\"\n\t\tHAVE_INTEL_RDRAND)\n\tif (HAVE_INTEL_RDRAND)\n\t\tmessage(STATUS \"ENABLE_INTEL_RDRAND\")\n\t\tadd_definitions(-DENABLE_INTEL_RDRAND)\n\t\tlist(APPEND src src/rdrand.c)\n\t\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -mrdrnd\")\n\tendif()\n\tif (ENABLE_INTEL_RDSEED)\n\t\tset(CMAKE_REQUIRED_FLAGS \"-rdseed\")\n\t\tcheck_source_compiles(C\n\t\t\t\"#include <immintrin.h> int main(void) { unsigned long long val; _rdseed64_step(&val); return 0; }\"\n\t\t\tHAVE_INTEL_RDSEED)\n\t\tif (HAVE_INTEL_RDSEED)\n\t\t\tmessage(STATUS \"ENABLE_INTEL_RDSEED\")\n\t\t\tadd_definitions(-DENABLE_INTEL_RDSEED)\n\t\t\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -mrdseed\")\n\t\tendif()\n\tendif()\nendif()\n\n\nif (ENABLE_SM4_CBC_MAC)\n\tmessage(STATUS \"ENABLE_SM4_CBC_MAC is ON\")\n\tlist(APPEND src src/sm4_cbc_mac.c)\n\tlist(APPEND tools tools/sm4_cbc_mac.c)\n\tlist(APPEND tests sm4_cbc_mac)\nendif()\n\n\ncheck_symbol_exists(getentropy \"unistd.h\" HAVE_GETENTROPY)\nif (WIN32)\n\tadd_definitions(-D_WINSOCK_DEPRECATED_NO_WARNINGS)\n\tlist(APPEND src src/rand_win.c src/http_win.c)\nelseif (APPLE)\n\tlist(APPEND src src/rand_apple.c src/http.c)\nelseif (HAVE_GETENTROPY)\n\tlist(APPEND src src/rand_unix.c src/http.c)\n\tmessage(STATUS \"have getentropy\")\nelse()\n\tlist(APPEND src src/rand.c src/http.c)\nendif()\n\n\nif (ENABLE_SKF)\n\tmessage(STATUS \"ENABLE_SKF is ON\")\n\tlist(APPEND src\n\t\tsrc/skf/skf.c\n\t\tsrc/skf/skf_lib.c\n\t\tsrc/skf/skf_meth.c\n\t\tsrc/skf/skf_ext.c\n\t\tsrc/skf/skf_prn.c\n\t\tsrc/skf/skf_wisec.c)\n\tlist(APPEND tools tools/skfutil.c)\n\tadd_library(skf_dummy SHARED src/skf/skf_dummy.c)\n\tset_target_properties(skf_dummy PROPERTIES VERSION 3.1 SOVERSION 3)\nendif()\n\nif (ENABLE_SDF)\n\tmessage(STATUS \"ENABLE_SDF is ON\")\n\tadd_definitions(-DENABLE_SDF)\n\tlist(APPEND src\n\t\tsrc/sdf/sdf.c\n\t\tsrc/sdf/sdf_lib.c\n\t\tsrc/sdf/sdf_meth.c\n\t\tsrc/sdf/sdf_ext.c\n\t\tsrc/sdf/sdf_sansec.c)\n\tlist(APPEND tools tools/sdfinfo.c tools/sdfdigest.c tools/sdfexport.c tools/sdfsign.c tools/sdfencrypt.c tools/sdfdecrypt.c tools/sdftest.c)\nendif()\n\n\noption(ENABLE_HTTP_TESTS \"Enable HTTP GET/POST related tests\" OFF)\nif (ENABLE_HTTP_TESTS)\n\tmessage(STATUS \"ENABLE_HTTP_TESTS\")\n\tlist(APPEND tests http http_crl)\nendif()\n\n\noption(BUILD_SHARED_LIBS \"Build using shared libraries\" ON)\n\nif (CMAKE_C_COMPILER_ID MATCHES \"MSVC\")\n\tmessage(STATUS \"CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS\")\n\tset(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON) # set before add_library\nendif()\n\nadd_library(gmssl ${src})\n\n\n\n\n\nif (WIN32)\n\ttarget_link_libraries(gmssl -lws2_32)\nelseif (APPLE)\n\tif (ENABLE_SDF)\n\t\ttarget_link_libraries(gmssl dl)\n\tendif()\n\ttarget_link_libraries(gmssl \"-framework Security\")\n\tif (ENABLE_SM4_CL)\n\t\t# FIXME: different rules for cl and OpenCL framework\n\t\ttarget_link_libraries(gmssl \"-framework OpenCL\")\n\tendif()\n\t#target_link_libraries(gmssl \"-framework CoreFoundation\") # rand_apple.c CFRelease()\nelseif (MINGW)\n\ttarget_link_libraries(gmssl PRIVATE wsock32)\nelse()\n\tif (ENABLE_SDF)\n\t\ttarget_link_libraries(gmssl dl)\n\tendif()\nendif()\n\n\nset(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib\")\n\nSET_TARGET_PROPERTIES(gmssl PROPERTIES VERSION 3.1 SOVERSION 3)\n\n\ninstall(TARGETS gmssl ARCHIVE DESTINATION lib LIBRARY DESTINATION lib RUNTIME DESTINATION bin)\ninstall(DIRECTORY ${CMAKE_SOURCE_DIR}/include/gmssl DESTINATION include)\n\nif(UNIX AND NOT APPLE)\n\tmessage(STATUS \"Detected Linux, configuring /etc/ld.so.conf.d/gmssl.conf\")\n\tinstall(CODE \"\n\t\texecute_process(COMMAND mkdir -p /etc/ld.so.conf.d)\n\t\texecute_process(COMMAND bash -c \\\"echo /usr/local/lib > /etc/ld.so.conf.d/gmssl.conf\\\")\n\t\texecute_process(COMMAND ldconfig)\n\t\")\nendif()\n\n\nif (NOT ${CMAKE_SYSTEM_NAME} STREQUAL \"iOS\")\n\tadd_executable(gmssl-bin ${tools})\n\ttarget_link_libraries(gmssl-bin LINK_PUBLIC gmssl)\n\tset_target_properties(gmssl-bin PROPERTIES RUNTIME_OUTPUT_NAME gmssl)\n\tif (MINGW)\n\t\ttarget_link_libraries(gmssl-bin PRIVATE Ws2_32)\n\tendif()\n\n\tenable_testing()\n\tforeach(name ${tests})\n\t\tadd_test(NAME ${name} COMMAND ${name}test)\n\t\tadd_executable(${name}test tests/${name}test.c)\n\t\ttarget_link_libraries (${name}test LINK_PUBLIC gmssl)\n\tendforeach()\n\n\tinstall(TARGETS gmssl-bin RUNTIME DESTINATION bin)\nendif()\n\nif (CMAKE_C_COMPILER_ID MATCHES \"MSVC\")\n\tset_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT gmssl-bin)\n\tset(CMAKE_INSTALL_PREFIX \"C:/Program Files/GmSSL\") # change by `cmake -DCMAKE_INSTALL_PREFIX=C:\\path\\to\\install`\n\t# run `set path=%path%;C:\\Program Files\\GmSSL\\bin`\n\tadd_compile_definitions(_CRT_SECURE_NO_WARNINGS)\n\n\ttarget_compile_options(gmssl PRIVATE /utf-8)\n\ttarget_compile_options(gmssl-bin PRIVATE /utf-8)\n\n#\ttarget_compile_options(gmssl PRIVATE /wd4996)\n#\ttarget_compile_options(gmssl-bin PRIVATE /wd4996)\nendif()\n\n\nadd_test(NAME sm3_commands COMMAND ${CMAKE_COMMAND} -P \"${CMAKE_SOURCE_DIR}/cmake/sm3_commands.cmake\")\nadd_test(NAME sm2_commands COMMAND ${CMAKE_COMMAND} -P \"${CMAKE_SOURCE_DIR}/cmake/sm2_commands.cmake\")\nadd_test(NAME cert_commands COMMAND ${CMAKE_COMMAND} -P \"${CMAKE_SOURCE_DIR}/cmake/cert_commands.cmake\")\nif(NOT WIN32)\n\tadd_test(NAME tlcp_commands COMMAND ${CMAKE_COMMAND} -P \"${CMAKE_SOURCE_DIR}/cmake/tlcp_commands.cmake\")\n\tadd_test(NAME tls12_commands COMMAND ${CMAKE_COMMAND} -P \"${CMAKE_SOURCE_DIR}/cmake/tls12_commands.cmake\")\n\tadd_test(NAME tls13_commands COMMAND ${CMAKE_COMMAND} -P \"${CMAKE_SOURCE_DIR}/cmake/tls13_commands.cmake\")\nendif()\n\n# Generate install package with cpack\n#\tcpack -G TGZ\n#\tcpack -G STGZ\n#\tcpack -G NSIS64 # Windows only\n#\n# Install the STGZ package\n#\t./GmSSL-<version>-Linux.sh --prefix=/usr/local\n#\nset(CPACK_PACKAGE_NAME \"GmSSL\")\nset(CPACK_PACKAGE_VENDOR \"GmSSL develop team\")\nset(CPACK_PACKAGE_VERSION \"3.1.2-Dev\")\nset(CPACK_PACKAGE_DESCRIPTION_FILE ${PROJECT_SOURCE_DIR}/README.md)\nset(CPACK_NSIS_MODIFY_PATH ON)\ninclude(CPack)\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 13.833984375,
          "content": "# 编译与安装\r\n\r\n[TOC]\r\n\r\n## 概述\r\n\r\nGmSSL当前版本采用CMake构建系统。由于CMake是一个跨平台的编译、安装工具，因此GmSSL可以在大多数主流操作系统上编译、安装和运行。GmSSL项目官方测试了Windows (包括Visual Stduio和Cygwin)、Linux、Mac、Android和iOS这几个主流操作系统上的编译，并通过GitHub的CI工作流对提交的最新代码进行自动化的编译测试。\r\n\r\n和其他基于CMake的开源项目类似，GmSSL的构建过程主要包含配置、编译、测试、安装这几个步骤。以Linux操作系统环境为例，在下载并解压GmSSL源代码后，进入源代码目录，执行如下命令：\r\n\r\n```bash\r\nmkdir build\r\ncd build\r\ncmake ..\r\nmake\r\nmake test\r\nsudo make install\r\n```\r\n\r\n就可以完成配置、编译、测试和安装。\r\n\r\n在执行`make`编译成功后，在`build/bin`目录下会生成项目的可执行文件和库文件。对于密码工具来说，在安装使用之前通过`make test`进行测试是重要的一步，如果测试失败，那么不应该使用这个软件。在发生某个测试错误后，可以执行`build/bin`下的具体某个测试命令行，如`sm4test`，这样可以看到具体的错误打印信息。\r\n\r\n执行`sudo make install`，安装完成后，可以命令行中调用`gmssl`命令行工具。在Linux和Mac环境下，头文件通常被安装在`/usr/local/include/gmssl`目录下，库文件被安装在`/usr/local/lib`目录下。\r\n\r\n## 项目源代码\r\n\r\nGmSSL项目的源代码在GitHub中发布和维护。\r\n\r\n项目在GitHub的主页为：https://github.com/guanzhi/GmSSL\r\n\r\n源代码包含主分支的最新代码和定期发布的Release版本，建议优先采用主分支最新版。\r\n\r\n### 通过CI判断当前代码状态\r\n\r\n有时候最新提交的代码可能存在编译错误，通常这些错误会在1-2天内被新的提交修复。如果当前最新代码还没有修复，那么可以通过GitHub的CI状态来选择没有错误的代码。\r\n\r\n通过GitHub的CI工作流状态可以判断某次提交是否存在编译错误，目前GmSSL项目中配置了如下编译环境：\r\n\r\n* CMake ubuntu-latest\r\n* CMake windows-latest\r\n* CMake macos-latest\r\n* CMake-Android\r\n* CMake-iOS\r\n\r\n通过查看这些CI的状态，可以判断当前代码是否可以在对应操作系统上成功编译。如果当前最新代码无法在某个平台上编译，那么可以选择之前某个通过测试的Commit版本。\r\n\r\n##配置编译选项\r\n\r\n在执行`cmake`阶段可以对项目的默认编译配置进行修改，修改是通过设置CMake变量来完成的，可以查看项目源代码中的`CMakeLists.txt`中所有的`option`指令来查看可选的配置。例如：\r\n\r\n```cmake\r\noption(BUILD_SHARED_LIBS \"Build using shared libraries\" OFF)\r\n```\r\n\r\n表明项目默认生成静态库，不生成动态库。\r\n\r\n###设置生成动态库或静态库\r\n\r\nGmSSL的CMake默认生成动态库，可以通过设定CMake变量`BUILD_SHARED_LIBS`为`ON`或者`OFF`来指定生成动态库或静态库。\r\n\r\n```\r\ncmake .. -DBUILD_SHARED_LIBS=ON\r\n```\r\n\r\n ### 设置优化的密码算法实现\r\n\r\nGmSSL包含了针对特定硬件和处理指令集的密码算法优化实现，如针对Intel AVX2等指令集的优化，针对GPU的优化等，这些优化实现在匹配的处理器上的实现速度或安全性会大大超过默认的C语言实现。\r\n\r\n在配置阶段可以显式地指定采用优化实现，可选的CMake配置变量包括：\r\n\r\n* `ENABLE_SM3_AVX_BMI2`  SM3算法的AVX + BMI2指令集实现。\r\n* `ENABLE_SM3_X8_AVX2` SM3算法的AVX2指令集并行实现。\r\n* `ENABLE_SM3_X16_AVX512` SM3算法的AVX512指令集并行实现。\r\n* `ENABLE_SM4_AESNI_AVX` SM4算法的AESNI +AVX指令集实现。\r\n* `ENABLE_RDRND` 基于Intel RDRND指令的硬件随机数生成器。\r\n* `ENABLE_GF128_PCLMULQDQ` 基于Intel PCLMULQDQ指令的GCM模式实现。\r\n\r\n### 编译不安全的密码算法\r\n\r\n处于教学目的，GmSSL源代码中包含了一组不安全的密码算法，这些算法默认情况下不被编译到二进制文件中，可以通过设置`ENABLE_BROKEN_CRYPTO`，在配置阶段启用这些算法，在当前`build`目录中执行：\r\n\r\n```bash\r\ncmake .. -DENABLE_BROKEN_CRYPTO=ON\r\nmake\r\n```\r\n\r\n重新编译后，加入GmSSL库文件的算法包括：\r\n\r\n* DES分组密码\r\n* SHA1哈希函数\r\n* MD5哈希函数\r\n* RC4序列密码\r\n\r\n## 在Visual Studio环境中编译\r\n\r\nCMake支持通过指定不同的构建系统生成器（Generator），生成不同类型的Makefile。在Windows和Visual Studio环境下，CMake即可以生成常规的Visual Studio解决方案(.sln)文件，在Visual Studio图形界面中完成编译，也可以生成类似于Linux环境下的Makefile文件，在命令行环境下完成编译和测试。\r\n\r\n### 生成Makefile编译\r\n\r\n在安装完Visual Studio之后，在启动菜单栏中会出现Visual Studio菜单目录，其中包含x64 Native Tools Command Prompt for VS 2022等多个终端命令行环境菜单项。\r\n\r\n```bash\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community>cd /path/to/gmssl\r\nmkdir build\r\ncd build\r\ncmake .. -G \"NMake Makefiles\"\r\nnmake\r\nnmake test\r\n```\r\n\r\n在编译完成后直接执行安装会报权限错误，这是因为安装过程需要向系统目录中写入文件，而当前打开命令行环境的用户不具备该权限。可以通过右键选择“更多-以管理员身份运行”打开x64 Native Tools Command Prompt for VS 2022终端，执行\r\n\r\n```\r\nnmake install\r\n```\r\n\r\n那么`gmssl`命令行程序、头文件和库文件分别被写入`C:/Program Files/GmSSL/bin`、`C:/Program Files/GmSSL/include`、`C:/Program Files/GmSSL/lib`这几个系统目录中。为了能够直接在命令行环境任意目录下执行`gmssl`命令行程序，需要将其安装目录加入到系统路径中，可以执行：\r\n\r\n```bash\r\nset path=%path%;C:\\Program Files\\GmSSL\\bin\r\n```\r\n\r\n设置完毕后可以在命令行中执行`path`，查看新的路径是否已经成功加入。\r\n\r\n### 在Visual Studio图形界面中编译\r\n\r\n在安装完Visual Studio之后，在启动菜单栏中会出现Visual Studio菜单目录，其中包含x64 Native Tools Command Prompt for VS 2022等多个终端命令行环境菜单项。\r\n\r\n```bash\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community>cd /path/to/gmssl\r\nmkdir build\r\ncd build\r\ncmake ..\r\n```\r\n\r\n完成后可以看到CMake在`build`目录下生成了一个`GmSSL.sln`文件和大量的`.vcxproj`文件。\r\n\r\n点击`GmSSL.sln`就打开Visual Studio，点击Visual Studio工具栏上的\"本地Windows调试器\"按钮，可以启动编译。\r\n\r\n在Visual Studio界面中可以选择Debug、Release、MinSizeRel等不同配置。\r\n\r\n### 在Visual Studio中运行测试\r\n\r\n在解决方案资源管理器中找到`RUN_TESTS`项目，右键菜单选择\"调试-启动新实例\"，即可运行测试，并且在”输出“窗口中看到测试结果。测试完成后会出现RUN_TESTS拒绝访问的对话框。\r\n\r\n### 选择生成32位或64位程序\r\n\r\n通过在Visual Studio不同的命令行环境中编译GmSSL，可以生成32位的X86或者64位的X86_64程序，在x64 Native Tools Command Prompt for VS 2022命令行环境下，生成的是64位的程序，在x86 Native Tools Command Prompt for VS 2022命令行环境下，生成的是32位的程序。\r\n\r\n可以通过Windows操作系统内置的资源管理器来检查编译生成的可执行程序是32位还是64位，在资源管理器的CPU页面中，通过“选择列”增加“平台”列，这样就可以显示每个进程的是32位或64位。可以运行`gmssl tlcp_client`或者在某个测试文件中增加循环时间来保持命令行运行一段时间。\r\n\r\n## 在Cygwin环境中编译\r\n\r\nCygwin是Windows上的Linux模拟运行环境。Cygwin提供了Linux Shell和大量Linux命令行工具，也提供了应用程序开发必须的编译工具、头文件和库文件。面向Linux开发的应用通常依赖`unistd.h`、`sys/socket.h`等头文件及函数，但是Visual Studio的C库并没有提供这些POSIX函数实现，因此这些Linux应用没有办法直接在Windows环境下编译。Cygwin通过封装Windows操作系统原生功能，提供了一个POSIX接口层，以及封装这些功能的动态库(`cygwin1.dll`)，并且提供了GCC、CMake等完整的Linux编译工具链，这意味着标准所有Linux环境下的标准头文件都存在，并且代码中依赖GCC编译器的特殊语法都可以被编译器识别（Visual Studio的`cl`编译器不能完整支持C99语法），因此标准的Linux应用都可以通过Cygwin移植到Windows环境，编译为Windows本地应用。Cygwin提供的Linux Shell环境意味Shell脚本也是可以使用的。\r\n\r\n在Cygwin环境下编译生成的可执行程序是原生的Windows程序，和Visual Studio编译的程序的主要区别在于，Cygwin下编译的程序都必须依赖`cygwin1.dll`这个动态库，因为应用所有的POSIX函数调用都需要通过这个动态库翻译为Windows本地的系统调用（如WinSock2），因此发布Cygwin的程序不太方便，必须要包含一个较大的`cygwin1.dll`库文件。另外如果应用涉及大量的系统调用，那么通过Cygwin中间层会引入一定的开销，理论上会比Visual Studio编译的应用效率略低。\r\n\r\n总的来说，如果你想在Windows环境下快速尝试一下GmSSL的命令行功能，并且可能需要利用Linux Shell环境下的一些常用工具做实验和测试，或者不太熟悉Visual Studio开发环境，那么采用Cygwin环境是一个非常方便的选择。\r\n\r\n### 准备Cygwin环境\r\n\r\nCygwin的安装、配置都是通过一个单一的`setup-x86_64.exe`应用程序完成的。在Cygwin的官网 https://www.cygwin.com/ 可以下载这个应用程序。\r\n\r\n注意，在首次安装的时候可能没有选择所有需要的程序，再次运行`setup-x86_64.exe`程序可以对环境进行配置和更新。有些工具，例如CMake，官方提供了独立的Windows安装包，在Cygwin环境下没有必要独立安装这些工具，也不建议安装，所有依赖的Linux工具都应该通过Cygwin环境来配置管理。\r\n\r\n在安装、配置完成之后，可以通过运行`Cygwin64 Terminal`应用，打开一个命令行环境。\r\n\r\n### 在Cygwin环境中编译GmSSL\r\n\r\nCygwin环境相对标准的Linux环境有一些细微的差别。首先，在Cygwin命令行环境中，文件系统是一个类似Linux文件系统结构的独立目录，如果源代码已经下载到Windows操作系统中（比如，下载到用户的Download目录），那么需要首先将源代码拷贝到Cygwin文件系统的用户目录中（例如当前用户默认目录`~`）。在Cygwin文件系统中，Windows文件系统被映射到`/cygdrive`目录中，Windows当前用户Guan Zhi的下载目录中的`GmSSL-master.zip`文件就被映射到`/cygdrive/c/Users/Guan Zhi/Downloads/GmSSL-master.zip`中。\r\n\r\n```bash\r\ncp \"/cygdrive/c/Users/Guan Zhi/Downloads/GmSSL-master.zip\" ~/\r\n```\r\n\r\n然后可以按照Linux环境下相似的过程编译、安装\r\n\r\n```bash\r\nunzip GmSSL-master.zip\r\ncd GmSSL-master\r\nmkdir build\r\ncd build\r\ncmake ..\r\nmake\r\nmake test\r\nmake install\r\n```\r\n\r\n注意，由于在Cygwin环境中用户本身具有系统权限，因此在执行`make install`时不需要`sudo`。\r\n\r\n在安装完成之后，可以在Cygwin的命令行环境下执行`gmssl`命令行，或者运行源代码`demo`目录下的演示脚本。\r\n\r\n注意，将`gmssl`等可执行程序直接从Cygwin目录拷贝到Windows文件系统下，在执行时会提示找不到`cygwin1.dll`的错误，运行或者发布可执行程序时，应处理好对这个动态库的依赖问题。\r\n\r\n### 存在的问题\r\n\r\n似乎CMake选项`BUILD_SHARED_LIBS` 不起作用，总会同时生成静态库和动态库。\r\n\r\nCygwin的动态库名称比较特殊，是以`cyg`开头的。\r\n\r\n## 面向iOS/iPhoneOS的交叉编译\r\n\r\n下载 https://github.com/leetal/ios-cmake ，将`ios.toolchain.cmake`文件复制到`build`目录。\r\n\r\n```bash\r\nmkdir build; cd build\r\ncmake .. -G Xcode -DCMAKE_TOOLCHAIN_FILE=../ios.toolchain.cmake -DPLATFORM=OS64\r\ncmake --build . --config Release\r\n```\r\n\r\n如果出现“error: Signing for \"gmssl\" requires a development team.”错误，可以用Xcode打开工程文件，在Signing配置中设置Development Team。\r\n\r\n## 面向Android的交叉编译\r\n\r\n下载Android NDK，执行\r\n\r\n```bash\r\nmkdir build; cd build\r\ncmake .. -DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake  -DANDROID_ABI=arm64-v8a  -DANDROID_PLATFORM=android-23\r\nmake\r\n```\r\n\r\n## 安装包构建\r\n\r\n依赖cmake工具包中的cpack工具，生成可发布的安装包。\r\n\r\n生成的安装包在`build`目录下。\r\n\r\n### 构建DEB安装包\r\n\r\n```\r\nmkdir build; cd build\r\ncmake .. -DCMAKE_BUILD_TYPE=Release\r\ncpack -G DEB\r\n```\r\n\r\n### 构建RPM安装包\r\n\r\n```\r\nmkdir build; cd build\r\ncmake .. -DCMAKE_BUILD_TYPE=Release\r\ncpack -G RPM\r\n```\r\n\r\n### 构建`.sh`安装脚本\r\n\r\n```\r\nmkdir build; cd build\r\ncmake .. -DCMAKE_BUILD_TYPE=Release\r\ncpack -G DEB\r\nmake package\r\n```\r\n\r\n## 生成二进制包\r\n\r\n为了保证兼容性，发布的二进制包不包含针对特定指令集的优化代码，并且不启用编译器的`-O3`优化。\r\n\r\n在正式发布之前，需要在测试平台上编译、测试、安装。验证`gmssl`命令行可以正确使用，验证`sm3_demo.c`可以正确和`-lgmssl`编译，并且可以正确输出哈希值。\r\n\r\n完成编译和测试后，在`build`目录下执行如下操作\r\n\r\n``` bash\r\n#!/bin/bash -x\r\nVERSION=3.2.0\r\nOS=macos\r\nARCH=arm64\r\nmkdir build; cd build; cmake ..; make\r\ncmake .. -DBUILD_SHARED_LIBS=OFF; make\r\nmkdir gmssl-$VERSION\r\ncd gmssl-$VERSION\r\nmkdir bin; mkdir lib; mkdir include\r\ncp ../bin/gmssl bin\r\ncp -P ../bin/libgmssl* lib\r\ncp -r ../../include/gmssl include\r\ncd ..\r\ntar czvf gmssl-$VERSION-$OS-$ARCH.tar.gz gmssl-$VERSION\r\n```\r\n\r\n其中`cmake .. -DBUILD_SHARED_LIBS=OFF; make`重新生成了静态库，以及和静态库连接的`gmssl`二进制程序，因此最终打包的`gmssl`命令行不依赖系统库之外的动态库。\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.9345703125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.95703125,
          "content": "# GmSSL\n\n[![CMake-Ubuntu/macOS](https://github.com/guanzhi/GmSSL/workflows/CMake/badge.svg)](https://github.com/guanzhi/GmSSL/actions/workflows/cmake.yml)\n[![CMake-Windows](https://github.com/guanzhi/GmSSL/workflows/CMake-windows/badge.svg)](https://github.com/guanzhi/GmSSL/actions/workflows/cmake-windows.yml)\n[![CMake-Android](https://github.com/guanzhi/GmSSL/actions/workflows/android-ci.yml/badge.svg)](https://github.com/guanzhi/GmSSL/actions/workflows/android-ci.yml)\n[![CMake-iOS](https://github.com/guanzhi/GmSSL/actions/workflows/ios.yml/badge.svg)](https://github.com/guanzhi/GmSSL/actions/workflows/ios.yml)\n\nGmSSL是由北京大学自主开发的国产商用密码开源库，实现了对国密算法、标准和安全通信协议的全面功能覆盖，支持包括移动端在内的主流操作系统和处理器，支持密码钥匙、密码卡等典型国产密码硬件，提供功能丰富的命令行工具及多种编译语言编程接口。\n\n\n## 主要特性\n\n* 超轻量：GmSSL 3 大幅度降低了内存需求和二进制代码体积，不依赖动态内存，可以用于无操作系统的低功耗嵌入式环境(MCU、SOC等)，开发者也可以更容易地将国密算法和SSL协议嵌入到现有的项目中。\n* 更合规：GmSSL 3 可以配置为仅包含国密算法和国密协议(TLCP协议)，依赖GmSSL 的密码应用更容易满足密码产品型号检测的要求，避免由于混杂非国密算法、不安全算法等导致的安全问题和合规问题。\n* 更安全：TLS 1.3在安全性和通信延迟上相对之前的TLS协议有巨大的提升，GmSSL 3 支持TLS 1.3协议和RFC 8998的国密套件。GmSSL 3 默认支持密钥的加密保护，提升了密码算法的抗侧信道攻击能力。\n* 跨平台：GmSSL 3 更容易跨平台，构建系统不再依赖Perl，默认的CMake构建系统可以容易地和Visual Studio、Android NDK等默认编译工具配合使用，开发者也可以手工编写Makefile在特殊环境中编译、剪裁。\n\n## 下载\n\n* GmSSL的主分支版本为 [GmSSL-3.1.1](https://github.com/guanzhi/GmSSL/releases/tag/v3.1.1)，主要增加跨平台特性，特别是对Windows/Visual Studio的支持，Windows、Android、iOS平台的开发者需要使用该版本。\n\n## 编译与安装\n\nGmSSL 3 采用了cmake构建系统。下载源代码后将其解压缩，进入源码目录，执行：\n\n```bash\nmkdir build\ncd build\ncmake ..\nmake\nmake test\nsudo make install\n```\n\n在`make install`完成后，GmSSL会在默认安装目录中安装`gmssl`命令行工具，在头文件目录中创建`gmssl`目录，并且在库目录中安装`libgmssl.a`、`libgmssl.so`等库文件。\n\n### Visual Studio环境编译\n\n在Visual Studio命令提示符下执行：\n\n```bash\nmkdir build\ncd build\ncmake .. -G \"NMake Makefiles\" -DWIN32=ON\nnmake\n```\n\n## 主要功能\n\n### 密码算法\n\n* 分组密码：SM4 (CBC/CTR/GCM/ECB/CFB/OFB/CCM/XTS), AES (CBC/CTR/GCM)\n* 序列密码：ZUC/ZUC-256, ChaCha20\n* 哈希函数: SM3, SHA-1, SHA-224/256/384/512\n* 公钥密码：SM2加密/签名, SM9加密/签名\n* MAC算法：HMAC, GHASH, CBC-MAC\n* 密钥导出函数：PBKDF2、HKDF\n* 随机数生成器：Intel RDRAND, HASH_DRBG (NIST.SP.800-90A)\n\n### 证书和数字信封\n\n* 数字证书：X.509证书, CRL证书注销列表, CSR (PKCS #10) 证书签名请求\n* 私钥加密：基于SM4/SM3口令加密的PEM格式私钥 (PKCS #8)\n* 数字信封：SM2密码消息 (GM/T 0010-2012)\n\n### SSL协议\n\n* TLCP 1.1，支持密码套`TLS_ECC_SM4_CBC_SM3 {0xE0,0x13}` (GB/T 38636-2020、GM/T 0024-2014)\n* TLS 1.2，支持密码套件`TLS_ECDHE_SM4_CBC_SM3 {0xE0,0x11}` (GB/T 38636-2020、GM/T 0024-2014)\n* TLS 1.3，支持密码套件`TLS_SM4_GCM_SM3 {0x00,0xC6}`  (RFC 8998)\n\n### 多语言接口\n\nGmSSL通过子项目提供多种多种编程语言绑定\n\n * [GmSSL-Java](https://github.com/GmSSL/GmSSL-Java) 以JNI方式实现的Java语言绑定\n * [GmSSL-PHP](https://github.com/GmSSL/GmSSL-PHP) 以PHP扩展方式实现的PHP语言绑定\n * [GmSSL-Go](https://github.com/GmSSL/GmSSL-Go) 以CGO方式实现的Go语言绑定\n * [GmSSL-Python](https://github.com/GmSSL/GmSSL-Python) 以ctypes方式实现的Python语言绑定\n * [GmSSL-JS](https://github.com/guanzhi/GmSSL-JS) 纯JavaScript实现的国密算法库\n\n### 支持国密硬件\n\nGmSSL内置支持国密SDF密码硬件（通常为PCI-E接口的密码卡或者服务器密码机）和SKF密码硬件（通常为小型USB密码钥匙）。经过测试的密码产品型号包括：\n\n* to be added.\n\n开发者也可以用GmSSL的子项目SoftSDF(https://github.com/GmSSL/SoftSDF) ，用功能等效（但是不具备密码硬件密钥保护等价的安全性）的软件SDF模块来进行开发和测试，正式部署的时候再替换为硬件SDF。\n\n### OpenSSL兼容性\n\nGmSSL 3.0版本重写了所有的代码并改变了原有API，因此当前GmSSL版本和OpenSSL不兼容，无法直接用GmSSL替换OpenSSL进行编译。GmSSL提供了子项目 OpenSSL-Compatibility-Layer (https://github.com/GmSSL/OpenSSL-Compatibility-Layer) 提供了OpenSSL的兼容层，Nginx等应用可以通过OpenSSL-Compatibility-Layer调用GmSSL功能。经过测试目前兼容层可以兼容Nginx 1.16 ~ 1.25 之间的版本。\n\n## Benchmark\n\n性能测试结果是在单核单线程且未修改处理器默认配置下5次测试中取最好效果。由于未关闭睿频或进行大小核设置，这个成绩通常会略高于多核多线程中每核心的平均成绩。\n\n```\ncmake .. -DENABLE_TEST_SPEED=ON\nmake\n./bin/sm4test; ./bin/sm3test; ./bin/sm2_signtest; ./bin/sm2_enctest; ./bin/sm9test; ./bin/zuctest\n```\n\nMacBook Pro 13-inch 2018: 2.7 GHz Quad-Core Intel Core i7, Intel  Iris Plus Graphics 655. 8 GB 2133 HMz LPDDR3. macOS Sonoma 14.3.\n\n```\nspeed_sm4_encrypt: 164.826108 MiB per second\nspeed_sm4_encrypt_blocks: 163.120495 MiB per second\nspeed_sm4_cbc_encrypt_blocks: 156.870435 MiB per second\nspeed_sm4_cbc_decrypt_blocks: 174.701097 MiB per second\nspeed_sm4_ctr_encrypt_blocks: 178.457901 MiB per second\nspeed_sm4_ctr32_encrypt_blocks: 185.007458 MiB per second\nspeed_zuc_generate_keystream: 337.403260-MiB per second\nspeed_zuc_encrypt: 356.315696-MiB per second\ntest_sm3_speed: 273.551034 MiB per second\nsm2_sign_ctx speed (ENABLE_SM2_AMD64): 4096 signs time 0.036916 seconds, 110954.599632 signs per second\nsm2_sign_ctx speed : 4096 signs time 0.236611 seconds, 17311.114023 signs per second\ntest_sm2_encrypt_ctx_speed (ENABLE_SM2_AMD64): 17879.592122 encryptions per second\ntest_sm2_encrypt_ctx_speed: 1869.314131 encryptions per second\ntest_sm9_z256_pairing_speed: 173 pairings per second\n```\n\nMacBook Air M2 2022. Apple M2. 16 GB. Sonoma 14.5.\n\n```\nspeed_sm4_encrypt: 143.180578 MiB per second\nspeed_sm4_encrypt_blocks: 190.928509 MiB per second\nspeed_sm4_cbc_encrypt_blocks: 148.519447 MiB per second\nspeed_sm4_cbc_decrypt_blocks: 187.305378 MiB per second\nspeed_sm4_ctr_encrypt_blocks: 191.195450 MiB per second\nspeed_sm4_ctr32_encrypt_blocks: 191.522725 MiB per second\nspeed_zuc_generate_keystream: 344.604781-MiB per second\nspeed_zuc_encrypt: 344.723575-MiB per second\ntest_sm3_speed: 327.298762 MiB per second\nsm2_sign_ctx speed : 4096 signs time 0.290709 seconds, 14089.691066 signs per second\ntest_sm2_encrypt_ctx_speed: 1518.575861 encryptions per second\ntest_sm9_z256_pairing_speed: 141 pairings per seconds\n```\n\n## ChangeLog\n\n自从3.1.1版本以来\n\n* 提升了全部国密算法的性能，并在`tests`测试程序中增加了国密算法的性能测试\n* 增加了SM4 ECB/CFB/OFB/CCM/XTS加密模式，带SM3-HMAC的SM4 CBC/CTR模式，并且在`gmssl`命令行工具中增加了所有SM4加密模式的选项\n* 在`gmssl`命令行中增加了GHASH计算的选项\n* 增加了`sdftest`正确性和兼容性测试命令，以独立子项目的形式提供了SDF的软件实现SoftSDF\n* 移除了RC4, MD5等已被攻破的密码算法\n\n## 开发者们\n<a href=\"https://github.com/guanzhi/GmSSL/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=guanzhi/GmSSL\" />\n</a>\n\n## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/guanzhi/GmSSL.svg)](https://starchart.cc/guanzhi/GmSSL)\n\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}