{
  "metadata": {
    "timestamp": 1736710352330,
    "page": 160,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Mbed-TLS/mbedtls",
      "stars": 5636,
      "defaultBranch": "development",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.099609375,
          "content": "# Classify all '.function' files as C for syntax highlighting purposes\n*.function linguist-language=C\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.373046875,
          "content": "# Random seed file created by test scripts and sample programs\nseedfile\n# MBEDTLS_PSA_INJECT_ENTROPY seed file created by the test framework\n00000000ffffff52.psa_its\n# Log files created by all.sh to reduce the logs in case a component runs\n# successfully\nquiet-make.*\n\n# CMake build artifacts:\nCMakeCache.txt\nCMakeFiles\nCTestTestfile.cmake\ncmake_install.cmake\nTesting\n# CMake generates *.dir/ folders for in-tree builds (used by MSVC projects), ignore all of those:\n*.dir/\n# MSVC files generated by CMake:\n/*.sln\n/*.vcxproj\n/*.filters\n\n# Test coverage build artifacts:\nCoverage\n*.gcno\n*.gcda\ncoverage-summary.txt\n\n# generated by scripts/memory.sh\nmassif-*\n\n# Eclipse project files\n.cproject\n.project\n/.settings\n\n# Unix-like build artifacts:\n*.o\n*.s\n\n# MSVC build artifacts:\n*.exe\n*.pdb\n*.ilk\n*.lib\n\n# Python build artifacts:\n*.pyc\n\n# CMake generates *.dir/ folders for in-tree builds (used by MSVC projects), ignore all of those:\n*.dir/\n\n# Microsoft CMake extension for Visual Studio Code generates a build directory by default\n/build/\n\n# Generated documentation:\n/apidoc\n\n# PSA Crypto compliance test repo, cloned by test_psa_compliance.py\n/psa-arch-tests\n\n# Editor navigation files:\n/GPATH\n/GRTAGS\n/GSYMS\n/GTAGS\n/TAGS\n/cscope*.out\n/tags\n\n# clangd compilation database\ncompile_commands.json\n# clangd index files\n/.cache/clangd/index/\n\n# VScode folder to store local debug files and configurations\n.vscode\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.193359375,
          "content": "[submodule \"framework\"]\n\tpath = framework\n\turl = https://github.com/Mbed-TLS/mbedtls-framework\n[submodule \"tf-psa-crypto\"]\n\tpath = tf-psa-crypto\n\turl = https://github.com/Mbed-TLS/TF-PSA-Crypto.git\n"
        },
        {
          "name": ".globalrc",
          "type": "blob",
          "size": 0.0419921875,
          "content": "default:\\\n    :langmap=c\\:.c.h.function:\\\n\n"
        },
        {
          "name": ".mypy.ini",
          "type": "blob",
          "size": 0.095703125,
          "content": "[mypy]\nmypy_path = framework/scripts:scripts\nnamespace_packages = True\nwarn_unused_configs = True\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 2.6591796875,
          "content": "[MASTER]\ninit-hook='import sys; sys.path.append(\"scripts\"); sys.path.append(\"framework/scripts\")'\nmin-similarity-lines=10\n\n[BASIC]\n# We're ok with short funtion argument names.\n# [invalid-name]\nargument-rgx=[a-z_][a-z0-9_]*$\n\n# Allow filter and map.\n# [bad-builtin]\nbad-functions=input\n\n# We prefer docstrings, but we don't require them on all functions.\n# Require them only on long functions (for some value of long).\n# [missing-docstring]\ndocstring-min-length=10\n\n# No upper limit on method names. Pylint <2.1.0 has an upper limit of 30.\n# [invalid-name]\nmethod-rgx=[a-z_][a-z0-9_]{2,}$\n\n# Allow module names containing a dash (but no underscore or uppercase letter).\n# They are whole programs, not meant to be included by another module.\n# [invalid-name]\nmodule-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+)|[a-z][-0-9a-z]+)$\n\n# Some functions don't need docstrings.\n# [missing-docstring]\nno-docstring-rgx=(run_)?main$\n\n# We're ok with short local or global variable names.\n# [invalid-name]\nvariable-rgx=[a-z_][a-z0-9_]*$\n\n[DESIGN]\n# Allow more than the default 7 attributes.\n# [too-many-instance-attributes]\nmax-attributes=15\n\n[FORMAT]\n# Allow longer modules than the default recommended maximum.\n# [too-many-lines]\nmax-module-lines=2000\n\n[MESSAGES CONTROL]\n# * locally-disabled, locally-enabled: If we disable or enable a message\n#   locally, it's by design. There's no need to clutter the Pylint output\n#   with this information.\n# * logging-format-interpolation: Pylint warns about things like\n#   ``log.info('...'.format(...))``. It insists on ``log.info('...', ...)``.\n#   This is of minor utility (mainly a performance gain when there are\n#   many messages that use formatting and are below the log level).\n#   Some versions of Pylint (including 1.8, which is the version on\n#   Ubuntu 18.04) only recognize old-style format strings using '%',\n#   and complain about something like ``log.info('{}', foo)`` with\n#   logging-too-many-args (Pylint supports new-style formatting if\n#   declared globally with logging_format_style under [LOGGING] but\n#   this requires Pylint >=2.2).\n# * no-else-return: Allow the perfectly reasonable idiom\n#    if condition1:\n#        return value1\n#    else:\n#        return value2\n# * unnecessary-pass: If we take the trouble of adding a line with \"pass\",\n#   it's because we think the code is clearer that way.\ndisable=locally-disabled,locally-enabled,logging-format-interpolation,no-else-return,unnecessary-pass\n\n[REPORTS]\n# Don't diplay statistics. Just the facts.\nreports=no\n\n[VARIABLES]\n# Allow unused variables if their name starts with an underscore.\n# [unused-argument]\ndummy-variables-rgx=_.*\n\n[SIMILARITIES]\n# Ignore imports when computing similarities.\nignore-imports=yes\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.9951171875,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Include all submodules in the build\nsubmodules:\n  include: all\n  recursive: true\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-20.04\n  tools:\n    python: \"3.9\"\n  jobs:\n    pre_build:\n    - ./framework/scripts/apidoc_full.sh\n    - breathe-apidoc -o docs/api apidoc/xml\n    post_build:\n    - |\n      # Work around Readthedocs bug: Command parsing fails if the 'if' statement is on the first line\n      if [ \"$READTHEDOCS_VERSION\" = \"development\" ]; then\n        \"$READTHEDOCS_VIRTUALENV_PATH/bin/rtd\" projects \"Mbed TLS API\" redirects sync --wet-run -f docs/redirects.yaml\n      fi\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  builder: dirhtml\n  configuration: docs/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n  install:\n  - requirements: docs/requirements.txt\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.693359375,
          "content": "# Declare python as our language. This way we get our chosen Python version,\n# and pip is available. Gcc and clang are available anyway.\ndist: jammy\nos: linux\nlanguage: python\npython: 3.10\n\ncache: ccache\n\nbranches:\n  only:\n    coverity_scan\n\ninstall:\n  - $PYTHON scripts/min_requirements.py\n\nenv:\n  global:\n    - SEED=1\n    - secure: \"GF/Fde5fkm15T/RNykrjrPV5Uh1KJ70cP308igL6Xkk3eJmqkkmWCe9JqRH12J3TeWw2fu9PYPHt6iFSg6jasgqysfUyg+W03knRT5QNn3h5eHgt36cQJiJr6t3whPrRaiM6U9omE0evm+c0cAwlkA3GGSMw8Z+na4EnKI6OFCo=\"\naddons:\n  coverity_scan:\n    project:\n      name: \"ARMmbed/mbedtls\"\n    notification_email: support-mbedtls@arm.com\n    build_command_prepend:\n    build_command: make\n    branch_pattern: coverity_scan\n"
        },
        {
          "name": ".uncrustify.cfg",
          "type": "blob",
          "size": 6.220703125,
          "content": "# Configuration options for Uncrustify specifying the Mbed TLS code style.\n#\n# Note: The code style represented by this file has not yet been introduced\n# to Mbed TLS.\n#\n# Copyright The Mbed TLS Contributors\n# SPDX-License-Identifier: Apache-2.0 OR GPL-2.0-or-later\n\n\n# Wrap lines at 100 characters\ncode_width = 100\n\n# Allow splitting long for statements between the condition statements\nls_for_split_full = true\n\n# Allow splitting function calls between arguments\nls_func_split_full = true\n\ninput_tab_size = 4\n\n# Spaces-only indentation\nindent_with_tabs = 0\n\nindent_columns = 4\n\n# Indent 'case' 1 level from 'switch'\nindent_switch_case = indent_columns\n\n# Line-up strings broken by '\\'\nindent_align_string = true\n\n# Braces on the same line (Egyptian-style braces)\nnl_enum_brace = remove\nnl_union_brace = remove\nnl_struct_brace = remove\nnl_do_brace = remove\nnl_if_brace = remove\nnl_for_brace = remove\nnl_else_brace = remove\nnl_while_brace = remove\nnl_switch_brace = remove\n\n# Braces on same line as keywords that follow them - 'else' and the 'while' in 'do {} while ()';\nnl_brace_else = remove\nnl_brace_while = remove\n# Space before else on the same line\nsp_brace_else = add\n# If else is on the same line as '{', force exactly 1 space between them\nsp_else_brace = force\n\n# Functions are the exception and have braces on the next line\nnl_fcall_brace = add\nnl_fdef_brace = add\n\n# Force exactly one space between ')' and '{' in statements\nsp_sparen_brace = force\n\n# At least 1 space around assignment\nsp_assign = add\n\n# Remove spaces around the preprocessor '##' token-concatenate\nsp_pp_concat = ignore\n\n# At least 1 space around '||' and '&&'\nsp_bool = add\n\n# But no space after the '!' operator\nsp_not = remove\n\n# No space after the bitwise-not '~' operator\nsp_inv = remove\n\n# No space after the addressof '&' operator\nsp_addr = remove\n\n# No space around the member '.' and '->' operators\nsp_member = remove\n\n# No space after the dereference '*' operator\nsp_deref = remove\n\n# No space after a unary negation '-'\nsp_sign = remove\n\n# No space between the '++'/'--' operator and its operand\nsp_incdec = remove\n\n# At least 1 space around comparison operators\nsp_compare = add\n\n# Remove spaces inside all kinds of parentheses:\n\n# Remove spaces inside parentheses\nsp_inside_paren = remove\n\n# No spaces inside statement parentheses\nsp_inside_sparen = remove\n\n# No spaces inside cast parentheses '( char )x' -> '(char)x'\nsp_inside_paren_cast = remove\n\n# No spaces inside function parentheses\nsp_inside_fparen = remove\n# (The case where the function has no parameters/arguments)\nsp_inside_fparens = remove\n\n# No spaces inside the first parentheses in a function type\nsp_inside_tparen = remove\n\n# (Uncrustify >= 0.74.0) No spaces inside parens in for statements\nsp_inside_for = remove\n\n# Remove spaces between nested parentheses '( (' -> '(('\nsp_paren_paren = remove\n# (Uncrustify >= 0.74.0)\nsp_sparen_paren = remove\n\n# Remove spaces between ')' and adjacent '('\nsp_cparen_oparen = remove\n\n# (Uncrustify >= 0.73.0) space between 'do' and '{'\nsp_do_brace_open = force\n\n# (Uncrustify >= 0.73.0) space between '}' and 'while'\nsp_brace_close_while = force\n\n# At least 1 space before a '*' pointer star\nsp_before_ptr_star = add\n\n# Remove spaces between pointer stars\nsp_between_ptr_star = remove\n\n# No space after a pointer star\nsp_after_ptr_star = remove\n\n# But allow a space in the case of e.g. char * const x;\nsp_after_ptr_star_qualifier = ignore\n\n# Remove space after star in a function return type\nsp_after_ptr_star_func = remove\n\n# At least 1 space after a type in variable definition etc\nsp_after_type = add\n\n# Force exactly 1 space between a statement keyword (e.g. 'if') and an opening parenthesis\nsp_before_sparen = force\n\n# Remove a space before a ';'\nsp_before_semi = remove\n# (Uncrustify >= 0.73.0) Remove space before a semi in a non-empty for\nsp_before_semi_for = remove\n# (Uncrustify >= 0.73.0) Remove space in empty first statement of a for\nsp_before_semi_for_empty = remove\n# (Uncrustify >= 0.74.0) Remove space in empty middle statement of a for\nsp_between_semi_for_empty = remove\n\n# Add a space after a ';' (unless a comment follows)\nsp_after_semi = add\n# (Uncrustify >= 0.73.0) Add a space after a semi in non-empty for statements\nsp_after_semi_for = add\n# (Uncrustify >= 0.73.0) No space after final semi in empty for statements\nsp_after_semi_for_empty = remove\n\n# Remove spaces on the inside of square brackets '[]'\nsp_inside_square = remove\n\n# Must have at least 1 space after a comma\nsp_after_comma = add\n\n# Must not have a space before a comma\nsp_before_comma = remove\n\n# No space before the ':' in a case statement\nsp_before_case_colon = remove\n\n# Must have space after a cast - '(char)x' -> '(char) x'\nsp_after_cast = add\n\n# No space between 'sizeof' and '('\nsp_sizeof_paren = remove\n\n# At least 1 space inside '{ }'\nsp_inside_braces = add\n\n# At least 1 space inside '{ }' in an enum\nsp_inside_braces_enum = add\n\n# At least 1 space inside '{ }' in a struct\nsp_inside_braces_struct = add\n\n# At least 1 space between a function return type and the function name\nsp_type_func = add\n\n# No space between a function name and its arguments/parameters\nsp_func_proto_paren = remove\nsp_func_def_paren = remove\nsp_func_call_paren = remove\n\n# No space between '__attribute__' and '('\nsp_attribute_paren = remove\n\n# No space between 'defined' and '(' in preprocessor conditions\nsp_defined_paren = remove\n\n# At least 1 space between a macro's name and its definition\nsp_macro = add\nsp_macro_func = add\n\n# Force exactly 1 space between a '}' and the name of a typedef if on the same line\nsp_brace_typedef = force\n\n# At least 1 space before a '\\' line continuation\nsp_before_nl_cont = add\n\n# At least 1 space around '?' and ':' in ternary statements\nsp_cond_colon = add\nsp_cond_question = add\n\n# Space between #else/#endif and comment afterwards\nsp_endif_cmt = add\n\n# Remove newlines at the start of a file\nnl_start_of_file = remove\n\n# At least 1 newline at the end of a file\nnl_end_of_file = add\nnl_end_of_file_min = 1\n\n# Add braces in single-line statements\nmod_full_brace_do = add\nmod_full_brace_for = add\nmod_full_brace_if = add\nmod_full_brace_while = add\n\n# Remove parentheses from return statements\nmod_paren_on_return = remove\n\n# Disable removal of leading spaces in a multi-line comment if the first and\n# last lines are the same length\ncmt_multi_check_last = false\n"
        },
        {
          "name": "3rdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "BRANCHES.md",
          "type": "blob",
          "size": 5.865234375,
          "content": "# Maintained branches\n\nAt any point in time, we have a number of maintained branches, currently consisting of:\n\n- The [`main`](https://github.com/Mbed-TLS/mbedtls/tree/main) branch:\n  this always contains the latest release, including all publicly available\n  security fixes.\n- The [`development`](https://github.com/Mbed-TLS/mbedtls/tree/development) branch:\n  this is where the next major version of Mbed TLS (version 4.0) is being\n  prepared. It has API changes that make it incompatible with Mbed TLS 3.x,\n  as well as all the new features and bug fixes and security fixes.\n- One or more long-time support (LTS) branches: these only get bug fixes and\n  security fixes. Currently, the supported LTS branches are:\n- [`mbedtls-2.28`](https://github.com/Mbed-TLS/mbedtls/tree/mbedtls-2.28).\n- [`mbedtls-3.6`](https://github.com/Mbed-TLS/mbedtls/tree/mbedtls-3.6).\n\nWe retain a number of historical branches, whose names are prefixed by `archive/`,\nsuch as [`archive/mbedtls-2.7`](https://github.com/Mbed-TLS/mbedtls/tree/archive/mbedtls-2.7).\nThese branches will not receive any changes or updates.\n\nWe use [Semantic Versioning](https://semver.org/). In particular, we maintain\nAPI compatibility in the `main` branch across minor version changes (e.g.\nthe API of 3.(x+1) is backward compatible with 3.x). We only break API\ncompatibility on major version changes (e.g. from 3.x to 4.0). We also maintain\nABI compatibility within LTS branches; see the next section for details.\n\nWe will make regular LTS releases on an 18-month cycle, each of which will have\na 3 year support lifetime. On this basis, 3.6 LTS (released March 2024) will be\nsupported until March 2027. The next LTS release will be a 4.x release, which is\nplanned for September 2025.\n\n## Backwards Compatibility for application code\n\nWe maintain API compatibility in released versions of Mbed TLS. If you have\ncode that's working and secure with Mbed TLS x.y.z and does not rely on\nundocumented features, then you should be able to re-compile it without\nmodification with any later release x.y'.z' with the same major version\nnumber, and your code will still build, be secure, and work.\n\nNote that this guarantee only applies if you either use the default\ncompile-time configuration (`mbedtls/mbedtls_config.h`) or the same modified\ncompile-time configuration. Changing compile-time configuration options can\nresult in an incompatible API or ABI, although features will generally not\naffect unrelated features (for example, enabling or disabling a\ncryptographic algorithm does not break code that does not use that\nalgorithm).\n\nNote that new releases of Mbed TLS may extend the API. Here are some\nexamples of changes that are common in minor releases of Mbed TLS, and are\nnot considered API compatibility breaks:\n\n* Adding or reordering fields in a structure or union.\n* Removing a field from a structure, unless the field is documented as public.\n* Adding items to an enum.\n* Returning an error code that was not previously documented for a function\n  when a new error condition arises.\n* Changing which error code is returned in a case where multiple error\n  conditions apply.\n* Changing the behavior of a function from failing to succeeding, when the\n  change is a reasonable extension of the current behavior, i.e. the\n  addition of a new feature.\n\nThere are rare exceptions where we break API compatibility: code that was\nrelying on something that became insecure in the meantime (for example,\ncrypto that was found to be weak) may need to be changed. In case security\ncomes in conflict with backwards compatibility, we will put security first,\nbut always attempt to provide a compatibility option.\n\n## Backward compatibility for the key store\n\nWe maintain backward compatibility with previous versions of the\nPSA Crypto persistent storage since Mbed TLS 2.25.0, provided that the\nstorage backend (PSA ITS implementation) is configured in a compatible way.\nWe intend to maintain this backward compatibility throughout a major version\nof Mbed TLS (for example, all Mbed TLS 3.y versions will be able to read\nkeys written under any Mbed TLS 3.x with x <= y).\n\nMbed TLS 3.x can also read keys written by Mbed TLS 2.25.0 through 2.28.x\nLTS, but future major version upgrades (for example from 2.28.x/3.x to 4.y)\nmay require the use of an upgrade tool.\n\nNote that this guarantee does not currently fully extend to drivers, which\nare an experimental feature. We intend to maintain compatibility with the\nbasic use of drivers from Mbed TLS 2.28.0 onwards, even if driver APIs\nchange. However, for more experimental parts of the driver interface, such\nas the use of driver state, we do not yet guarantee backward compatibility.\n\n## Long-time support branches\n\nFor the LTS branches, additionally we try very hard to also maintain ABI\ncompatibility (same definition as API except with re-linking instead of\nre-compiling) and to avoid any increase in code size or RAM usage, or in the\nminimum version of tools needed to build the code. The only exception, as\nbefore, is in case those goals would conflict with fixing a security issue, we\nwill put security first but provide a compatibility option. (So far we never\nhad to break ABI compatibility in an LTS branch, but we occasionally had to\nincrease code size for a security fix.)\n\nFor contributors, see the [Backwards Compatibility section of\nCONTRIBUTING](CONTRIBUTING.md#backwards-compatibility).\n\n## Current Branches\n\nThe following branches are currently maintained:\n\n- [main](https://github.com/Mbed-TLS/mbedtls/tree/main)\n- [`development`](https://github.com/Mbed-TLS/mbedtls/)\n- [`mbedtls-3.6`](https://github.com/Mbed-TLS/mbedtls/tree/mbedtls-3.6)\n maintained until March 2027, see\n  <https://github.com/Mbed-TLS/mbedtls/releases/tag/v3.6.0>.\n- [`mbedtls-2.28`](https://github.com/Mbed-TLS/mbedtls/tree/mbedtls-2.28)\n maintained until the end of 2024, see\n  <https://github.com/Mbed-TLS/mbedtls/releases/tag/v2.28.8>.\n\nUsers are urged to always use the latest version of a maintained branch.\n"
        },
        {
          "name": "BUGS.md",
          "type": "blob",
          "size": 0.904296875,
          "content": "## Known issues\n\nKnown issues in Mbed TLS are [tracked on GitHub](https://github.com/Mbed-TLS/mbedtls/issues).\n\n## Reporting a bug\n\nIf you think you've found a bug in Mbed TLS, please follow these steps:\n\n1. Make sure you're using the latest version of a\n   [maintained branch](BRANCHES.md): `main`, `development`,\n   or a long-time support branch.\n2. Check [GitHub](https://github.com/Mbed-TLS/mbedtls/issues) to see if\n   your issue has already been reported. If not, …\n3. If the issue is a security risk (for example: buffer overflow,\n   data leak), please report it confidentially as described in\n   [`SECURITY.md`](SECURITY.md). If not, …\n4. Please [create an issue on on GitHub](https://github.com/Mbed-TLS/mbedtls/issues).\n\nPlease do not use GitHub for support questions. If you want to know\nhow to do something with Mbed TLS, please see [`SUPPORT.md`](SUPPORT.md) for available documentation and support channels.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 25.1201171875,
          "content": "#\n# CMake build system design considerations:\n#\n# - Include directories:\n#   + Do not define include directories globally using the include_directories\n#     command but rather at the target level using the\n#     target_include_directories command. That way, it is easier to guarantee\n#     that targets are built using the proper list of include directories.\n#   + Use the PUBLIC and PRIVATE keywords to specify the scope of include\n#     directories. That way, a target linking to a library (using the\n#     target_link_libraries command) inherits from the library PUBLIC include\n#     directories and not from the PRIVATE ones.\n# - MBEDTLS_TARGET_PREFIX: CMake targets are designed to be alterable by calling\n#   CMake in order to avoid target name clashes, via the use of\n#   MBEDTLS_TARGET_PREFIX. The value of this variable is prefixed to the\n#   mbedtls, mbedx509, tfpsacrypto and mbedtls-apidoc targets.\n#\n\n# We specify a minimum requirement of 3.10.2, but for now use 3.5.1 here\n# until our infrastructure catches up.\ncmake_minimum_required(VERSION 3.5.1)\n\ninclude(CMakePackageConfigHelpers)\n\n# Include convenience functions for printing properties and variables, like\n# cmake_print_properties(), cmake_print_variables().\ninclude(CMakePrintHelpers)\n\n# https://cmake.org/cmake/help/latest/policy/CMP0011.html\n# Setting this policy is required in CMake >= 3.18.0, otherwise a warning is generated. The OLD\n# policy setting is deprecated, and will be removed in future versions.\ncmake_policy(SET CMP0011 NEW)\n# https://cmake.org/cmake/help/latest/policy/CMP0012.html\n# Setting the CMP0012 policy to NEW is required for FindPython3 to work with CMake 3.18.2\n# (there is a bug in this particular version), otherwise, setting the CMP0012 policy is required\n# for CMake versions >= 3.18.3 otherwise a deprecated warning is generated. The OLD policy setting\n# is deprecated and will be removed in future versions.\ncmake_policy(SET CMP0012 NEW)\n\nif(TEST_CPP)\n    project(\"Mbed TLS\"\n        LANGUAGES C CXX\n        VERSION 4.0.0\n    )\nelse()\n    project(\"Mbed TLS\"\n        LANGUAGES C\n        VERSION 4.0.0\n    )\nendif()\n\ninclude(GNUInstallDirs)\n\n# Determine if Mbed TLS is being built as a subproject using add_subdirectory()\nif(NOT DEFINED MBEDTLS_AS_SUBPROJECT)\n  set(MBEDTLS_AS_SUBPROJECT ON)\n  if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n    set(MBEDTLS_AS_SUBPROJECT OFF)\n  endif()\nendif()\n\n# Set the project and framework root directory.\nset(MBEDTLS_DIR ${CMAKE_CURRENT_SOURCE_DIR})\nset(MBEDTLS_FRAMEWORK_DIR ${CMAKE_CURRENT_SOURCE_DIR}/framework)\n\noption(ENABLE_PROGRAMS \"Build Mbed TLS programs.\" ON)\n\noption(MBEDTLS_FATAL_WARNINGS \"Compiler warnings treated as errors\" ON)\nif(CMAKE_HOST_WIN32)\n    # N.B. The comment on the next line is significant! If you change it,\n    # edit the sed command in prepare_release.sh that modifies\n    # CMakeLists.txt.\n    option(GEN_FILES \"Generate the auto-generated files as needed\" OFF) # off in development\nelse()\n    option(GEN_FILES \"Generate the auto-generated files as needed\" ON)\nendif()\n\noption(DISABLE_PACKAGE_CONFIG_AND_INSTALL \"Disable package configuration, target export and installation\" ${MBEDTLS_AS_SUBPROJECT})\n\nif (CMAKE_C_SIMULATE_ID)\n    set(COMPILER_ID ${CMAKE_C_SIMULATE_ID})\nelse()\n    set(COMPILER_ID ${CMAKE_C_COMPILER_ID})\nendif(CMAKE_C_SIMULATE_ID)\n\nstring(REGEX MATCH \"Clang\" CMAKE_COMPILER_IS_CLANG \"${COMPILER_ID}\")\nstring(REGEX MATCH \"GNU\" CMAKE_COMPILER_IS_GNU \"${COMPILER_ID}\")\nstring(REGEX MATCH \"IAR\" CMAKE_COMPILER_IS_IAR \"${COMPILER_ID}\")\nstring(REGEX MATCH \"MSVC\" CMAKE_COMPILER_IS_MSVC \"${COMPILER_ID}\")\n\n# the test suites currently have compile errors with MSVC\nif(CMAKE_COMPILER_IS_MSVC)\n    option(ENABLE_TESTING \"Build Mbed TLS tests.\" OFF)\nelse()\n    option(ENABLE_TESTING \"Build Mbed TLS tests.\" ON)\nendif()\n\noption(USE_STATIC_MBEDTLS_LIBRARY \"Build Mbed TLS static library.\" ON)\noption(USE_SHARED_MBEDTLS_LIBRARY \"Build Mbed TLS shared library.\" OFF)\noption(LINK_WITH_PTHREAD \"Explicitly link Mbed TLS library to pthread.\" OFF)\noption(LINK_WITH_TRUSTED_STORAGE \"Explicitly link Mbed TLS library to trusted_storage.\" OFF)\n\n# Warning string - created as a list for compatibility with CMake 2.8\nset(CTR_DRBG_128_BIT_KEY_WARN_L1 \"****  WARNING!  MBEDTLS_CTR_DRBG_USE_128_BIT_KEY defined!\\n\")\nset(CTR_DRBG_128_BIT_KEY_WARN_L2 \"****  Using 128-bit keys for CTR_DRBG limits the security of generated\\n\")\nset(CTR_DRBG_128_BIT_KEY_WARN_L3 \"****  keys and operations that use random values generated to 128-bit security\\n\")\n\nset(CTR_DRBG_128_BIT_KEY_WARNING \"${WARNING_BORDER}\"\n                         \"${CTR_DRBG_128_BIT_KEY_WARN_L1}\"\n                         \"${CTR_DRBG_128_BIT_KEY_WARN_L2}\"\n                         \"${CTR_DRBG_128_BIT_KEY_WARN_L3}\"\n                         \"${WARNING_BORDER}\")\n\n# Python 3 is only needed here to check for configuration warnings.\nif(NOT CMAKE_VERSION VERSION_LESS 3.15.0)\n    set(Python3_FIND_STRATEGY LOCATION)\n    find_package(Python3 COMPONENTS Interpreter)\n    if(Python3_Interpreter_FOUND)\n        set(MBEDTLS_PYTHON_EXECUTABLE ${Python3_EXECUTABLE})\n    endif()\nelse()\n    find_package(PythonInterp 3)\n    if(PYTHONINTERP_FOUND)\n        set(MBEDTLS_PYTHON_EXECUTABLE ${PYTHON_EXECUTABLE})\n    endif()\nendif()\nif(MBEDTLS_PYTHON_EXECUTABLE)\n\n    # If 128-bit keys are configured for CTR_DRBG, display an appropriate warning\n    execute_process(COMMAND ${MBEDTLS_PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/scripts/config.py -f ${CMAKE_CURRENT_SOURCE_DIR}/include/mbedtls/mbedtls_config.h get MBEDTLS_CTR_DRBG_USE_128_BIT_KEY\n                        RESULT_VARIABLE result)\n    if(${result} EQUAL 0)\n        message(WARNING ${CTR_DRBG_128_BIT_KEY_WARNING})\n    endif()\n\nendif()\n\n# We now potentially need to link all executables against PThreads, if available\nset(CMAKE_THREAD_PREFER_PTHREAD TRUE)\nset(THREADS_PREFER_PTHREAD_FLAG TRUE)\nfind_package(Threads)\n\n# If this is the root project add longer list of available CMAKE_BUILD_TYPE values\nif(NOT MBEDTLS_AS_SUBPROJECT)\n    set(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE}\n        CACHE STRING \"Choose the type of build: None Debug Release Coverage ASan ASanDbg MemSan MemSanDbg Check CheckFull TSan TSanDbg\"\n        FORCE)\nendif()\n\n# Make MBEDTLS_CONFIG_FILE and MBEDTLS_USER_CONFIG_FILE into PATHs\nset(MBEDTLS_CONFIG_FILE \"\" CACHE FILEPATH \"Mbed TLS config file (overrides default).\")\nset(MBEDTLS_USER_CONFIG_FILE \"\" CACHE FILEPATH \"Mbed TLS user config file (appended to default).\")\n\n# Create a symbolic link from ${base_name} in the binary directory\n# to the corresponding path in the source directory.\n# Note: Copies the file(s) on Windows.\nfunction(link_to_source base_name)\n    set(link \"${CMAKE_CURRENT_BINARY_DIR}/${base_name}\")\n    set(target \"${CMAKE_CURRENT_SOURCE_DIR}/${base_name}\")\n\n    # Linking to non-existent file is not desirable. At best you will have a\n    # dangling link, but when building in tree, this can create a symbolic link\n    # to itself.\n    if (EXISTS ${target} AND NOT EXISTS ${link})\n        if (CMAKE_HOST_UNIX)\n            execute_process(COMMAND ln -s ${target} ${link}\n                RESULT_VARIABLE result\n                ERROR_VARIABLE output)\n\n            if (NOT ${result} EQUAL 0)\n                message(FATAL_ERROR \"Could not create symbolic link for: ${target} --> ${output}\")\n            endif()\n        else()\n            if (IS_DIRECTORY ${target})\n                file(GLOB_RECURSE files FOLLOW_SYMLINKS LIST_DIRECTORIES false RELATIVE ${target} \"${target}/*\")\n                foreach(file IN LISTS files)\n                    configure_file(\"${target}/${file}\" \"${link}/${file}\" COPYONLY)\n                endforeach(file)\n            else()\n                configure_file(${target} ${link} COPYONLY)\n            endif()\n        endif()\n    endif()\nendfunction(link_to_source)\n\n# Get the filename without the final extension (i.e. convert \"a.b.c\" to \"a.b\")\nfunction(get_name_without_last_ext dest_var full_name)\n    # Split into a list on '.' (but a cmake list is just a ';'-separated string)\n    string(REPLACE \".\" \";\" ext_parts \"${full_name}\")\n    # Remove the last item if there are more than one\n    list(LENGTH ext_parts ext_parts_len)\n    if (${ext_parts_len} GREATER \"1\")\n        math(EXPR ext_parts_last_item \"${ext_parts_len} - 1\")\n        list(REMOVE_AT ext_parts ${ext_parts_last_item})\n    endif()\n    # Convert back to a string by replacing separators with '.'\n    string(REPLACE \";\" \".\" no_ext_name \"${ext_parts}\")\n    # Copy into the desired variable\n    set(${dest_var} ${no_ext_name} PARENT_SCOPE)\nendfunction(get_name_without_last_ext)\n\ninclude(CheckCCompilerFlag)\n\nset(CMAKE_C_EXTENSIONS OFF)\nset(CMAKE_C_STANDARD 99)\n\nfunction(set_base_compile_options target)\n    if(CMAKE_COMPILER_IS_GNU)\n        set_gnu_base_compile_options(${target})\n    elseif(CMAKE_COMPILER_IS_CLANG)\n        set_clang_base_compile_options(${target})\n    elseif(CMAKE_COMPILER_IS_IAR)\n        set_iar_base_compile_options(${target})\n    elseif(CMAKE_COMPILER_IS_MSVC)\n        set_msvc_base_compile_options(${target})\n    endif()\nendfunction(set_base_compile_options)\n\nfunction(set_gnu_base_compile_options target)\n    # some warnings we want are not available with old GCC versions\n    # note: starting with CMake 2.8 we could use CMAKE_C_COMPILER_VERSION\n    execute_process(COMMAND ${CMAKE_C_COMPILER} -dumpversion\n                    OUTPUT_VARIABLE GCC_VERSION)\n    target_compile_options(${target} PRIVATE -Wall -Wextra -Wwrite-strings -Wmissing-prototypes)\n    if (GCC_VERSION VERSION_GREATER 3.0 OR GCC_VERSION VERSION_EQUAL 3.0)\n        target_compile_options(${target} PRIVATE -Wformat=2 -Wno-format-nonliteral)\n    endif()\n    if (GCC_VERSION VERSION_GREATER 4.3 OR GCC_VERSION VERSION_EQUAL 4.3)\n        target_compile_options(${target} PRIVATE -Wvla)\n    endif()\n    if (GCC_VERSION VERSION_GREATER 4.5 OR GCC_VERSION VERSION_EQUAL 4.5)\n        target_compile_options(${target} PRIVATE -Wlogical-op)\n    endif()\n    if (GCC_VERSION VERSION_GREATER 4.8 OR GCC_VERSION VERSION_EQUAL 4.8)\n        target_compile_options(${target} PRIVATE -Wshadow)\n    endif()\n    if (GCC_VERSION VERSION_GREATER 5.0)\n        CHECK_C_COMPILER_FLAG(\"-Wformat-signedness\" C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS)\n        if(C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS)\n            target_compile_options(${target} PRIVATE -Wformat-signedness)\n        endif()\n    endif()\n    if (GCC_VERSION VERSION_GREATER 7.0 OR GCC_VERSION VERSION_EQUAL 7.0)\n      target_compile_options(${target} PRIVATE -Wformat-overflow=2 -Wformat-truncation)\n    endif()\n    target_compile_options(${target} PRIVATE $<$<CONFIG:Release>:-O2>)\n    target_compile_options(${target} PRIVATE $<$<CONFIG:Debug>:-O0 -g3>)\n    target_compile_options(${target} PRIVATE $<$<CONFIG:Coverage>:-O0 -g3 --coverage>)\n    set_target_properties(${target} PROPERTIES LINK_FLAGS_COVERAGE \"--coverage\")\n    # Old GCC versions hit a performance problem with test_suite_pkwrite\n    # \"Private keey write check EC\" tests when building with Asan+UBSan\n    # and -O3: those tests take more than 100x time than normal, with\n    # test_suite_pkwrite taking >3h on the CI. Observed with GCC 5.4 on\n    # Ubuntu 16.04 x86_64 and GCC 6.5 on Ubuntu 18.04 x86_64.\n    # GCC 7.5 and above on Ubuntu 18.04 appear fine.\n    # To avoid the performance problem, we use -O2 when GCC version is lower than 7.0.\n    # It doesn't slow down much even with modern compiler versions.\n    target_compile_options(${target} PRIVATE $<$<CONFIG:ASan>:-fsanitize=address -fno-common -fsanitize=undefined -fno-sanitize-recover=all>)\n    if (GCC_VERSION VERSION_LESS 7.0)\n        target_compile_options(${target} PRIVATE $<$<CONFIG:ASan>:-O2>)\n    else()\n        target_compile_options(${target} PRIVATE $<$<CONFIG:ASan>:-O3>)\n    endif()\n    set_target_properties(${target} PROPERTIES LINK_FLAGS_ASAN \"-fsanitize=address -fsanitize=undefined\")\n    target_compile_options(${target} PRIVATE $<$<CONFIG:ASanDbg>:-fsanitize=address -fno-common -fsanitize=undefined -fno-sanitize-recover=all -O1 -g3 -fno-omit-frame-pointer -fno-optimize-sibling-calls>)\n    set_target_properties(${target} PROPERTIES LINK_FLAGS_ASANDBG \"-fsanitize=address -fsanitize=undefined\")\n    target_compile_options(${target} PRIVATE $<$<CONFIG:TSan>:-fsanitize=thread -O3>)\n    set_target_properties(${target} PROPERTIES LINK_FLAGS_TSAN \"-fsanitize=thread\")\n    target_compile_options(${target} PRIVATE $<$<CONFIG:TSanDbg>:-fsanitize=thread -O1 -g3 -fno-omit-frame-pointer -fno-optimize-sibling-calls>)\n    set_target_properties(${target} PROPERTIES LINK_FLAGS_TSANDBG \"-fsanitize=thread\")\n    target_compile_options(${target} PRIVATE $<$<CONFIG:Check>:-Os>)\n    target_compile_options(${target} PRIVATE $<$<CONFIG:CheckFull>:-Os -Wcast-qual>)\n\n    if(MBEDTLS_FATAL_WARNINGS)\n        target_compile_options(${target} PRIVATE -Werror)\n    endif(MBEDTLS_FATAL_WARNINGS)\nendfunction(set_gnu_base_compile_options)\n\nfunction(set_clang_base_compile_options target)\n    target_compile_options(${target} PRIVATE -Wall -Wextra -Wwrite-strings -Wmissing-prototypes -Wpointer-arith -Wimplicit-fallthrough -Wshadow -Wvla -Wformat=2 -Wno-format-nonliteral)\n    target_compile_options(${target} PRIVATE $<$<CONFIG:Release>:-O2>)\n    target_compile_options(${target} PRIVATE $<$<CONFIG:Debug>:-O0 -g3>)\n    target_compile_options(${target} PRIVATE $<$<CONFIG:Coverage>:-O0 -g3 --coverage>)\n    set_target_properties(${target} PROPERTIES LINK_FLAGS_COVERAGE \"--coverage\")\n    target_compile_options(${target} PRIVATE $<$<CONFIG:ASan>:-fsanitize=address -fno-common -fsanitize=undefined -fno-sanitize-recover=all -O3>)\n    set_target_properties(${target} PROPERTIES LINK_FLAGS_ASAN \"-fsanitize=address -fsanitize=undefined\")\n    target_compile_options(${target} PRIVATE $<$<CONFIG:ASanDbg>:-fsanitize=address -fno-common -fsanitize=undefined -fno-sanitize-recover=all -O1 -g3 -fno-omit-frame-pointer -fno-optimize-sibling-calls>)\n    set_target_properties(${target} PROPERTIES LINK_FLAGS_ASANDBG \"-fsanitize=address -fsanitize=undefined\")\n    target_compile_options(${target} PRIVATE $<$<CONFIG:MemSan>:-fsanitize=memory>)\n    set_target_properties(${target} PROPERTIES LINK_FLAGS_MEMSAN \"-fsanitize=memory\")\n    target_compile_options(${target} PRIVATE $<$<CONFIG:MemSanDbg>:-fsanitize=memory -O1 -g3 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize-memory-track-origins=2>)\n    set_target_properties(${target} PROPERTIES LINK_FLAGS_MEMSANDBG \"-fsanitize=memory\")\n    target_compile_options(${target} PRIVATE $<$<CONFIG:TSan>:-fsanitize=thread -O3>)\n    set_target_properties(${target} PROPERTIES LINK_FLAGS_TSAN \"-fsanitize=thread\")\n    target_compile_options(${target} PRIVATE $<$<CONFIG:TSanDbg>:-fsanitize=thread -O1 -g3 -fno-omit-frame-pointer -fno-optimize-sibling-calls>)\n    set_target_properties(${target} PROPERTIES LINK_FLAGS_TSANDBG \"-fsanitize=thread\")\n    target_compile_options(${target} PRIVATE $<$<CONFIG:Check>:-Os>)\n\n    if(MBEDTLS_FATAL_WARNINGS)\n        target_compile_options(${target} PRIVATE -Werror)\n    endif(MBEDTLS_FATAL_WARNINGS)\nendfunction(set_clang_base_compile_options)\n\nfunction(set_iar_base_compile_options target)\n    target_compile_options(${target} PRIVATE --warn_about_c_style_casts)\n    target_compile_options(${target} PRIVATE $<$<CONFIG:Release>:-Ohz>)\n    target_compile_options(${target} PRIVATE $<$<CONFIG:Debug>:--debug -On>)\n\n    if(MBEDTLS_FATAL_WARNINGS)\n        target_compile_options(${target} PRIVATE --warnings_are_errors)\n    endif(MBEDTLS_FATAL_WARNINGS)\nendfunction(set_iar_base_compile_options)\n\nfunction(set_msvc_base_compile_options target)\n    # Strictest warnings, UTF-8 source and execution charset\n    target_compile_options(${target} PRIVATE /W3 /utf-8)\n\n    if(MBEDTLS_FATAL_WARNINGS)\n        target_compile_options(${target} PRIVATE /WX)\n    endif(MBEDTLS_FATAL_WARNINGS)\nendfunction(set_msvc_base_compile_options)\n\nfunction(set_config_files_compile_definitions target)\n    # Pass-through MBEDTLS_CONFIG_FILE, MBEDTLS_USER_CONFIG_FILE,\n    # TF_PSA_CRYPTO_CONFIG_FILE and TF_PSA_CRYPTO_USER_CONFIG_FILE\n    if(MBEDTLS_CONFIG_FILE)\n        target_compile_definitions(${target}\n            PUBLIC MBEDTLS_CONFIG_FILE=\"${MBEDTLS_CONFIG_FILE}\")\n    endif()\n    if(MBEDTLS_USER_CONFIG_FILE)\n        target_compile_definitions(${target}\n            PUBLIC MBEDTLS_USER_CONFIG_FILE=\"${MBEDTLS_USER_CONFIG_FILE}\")\n    endif()\n    if(TF_PSA_CRYPTO_CONFIG_FILE)\n        target_compile_definitions(${target}\n            PUBLIC TF_PSA_CRYPTO_CONFIG_FILE=\"${TF_PSA_CRYPTO_CONFIG_FILE}\")\n    endif()\n    if(TF_PSA_CRYPTO_USER_CONFIG_FILE)\n        target_compile_definitions(${target}\n            PUBLIC TF_PSA_CRYPTO_USER_CONFIG_FILE=\"${TF_PSA_CRYPTO_USER_CONFIG_FILE}\")\n    endif()\nendfunction(set_config_files_compile_definitions)\n\nif(CMAKE_BUILD_TYPE STREQUAL \"Check\" AND TEST_CPP)\n    set(CMAKE_CXX_STANDARD 11)\n    set(CMAKE_CXX_STANDARD_REQUIRED ON)\n    set(CMAKE_CXX_EXTENSIONS OFF)\n    if(CMAKE_COMPILER_IS_CLANG OR CMAKE_COMPILER_IS_GNU)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pedantic\")\n    endif()\nendif()\n\nif (NOT EXISTS \"${MBEDTLS_FRAMEWORK_DIR}/CMakeLists.txt\")\n    if (EXISTS \"${MBEDTLS_DIR}/.git\")\n        message(FATAL_ERROR \"${MBEDTLS_FRAMEWORK_DIR}/CMakeLists.txt not found (and does appear to be a git checkout). Run `git submodule update --init` from the source tree to fetch the submodule contents.\")\n    else ()\n        message(FATAL_ERROR \"${MBEDTLS_FRAMEWORK_DIR}/CMakeLists.txt not found (and does not appear to be a git checkout). Please ensure you have downloaded the right archive from the release page on GitHub.\")\n    endif()\nendif()\nadd_subdirectory(framework)\n\nadd_subdirectory(include)\n\nset(TF_PSA_CRYPTO_TARGET_PREFIX ${MBEDTLS_TARGET_PREFIX} CACHE STRING \"\")\nset(TF_PSA_CRYPTO_FATAL_WARNINGS ${MBEDTLS_FATAL_WARNINGS} CACHE BOOL \"\")\nset(USE_STATIC_TF_PSA_CRYPTO_LIBRARY ${USE_STATIC_MBEDTLS_LIBRARY} CACHE BOOL \"\")\nset(USE_SHARED_TF_PSA_CRYPTO_LIBRARY ${USE_SHARED_MBEDTLS_LIBRARY} CACHE BOOL \"\")\nadd_subdirectory(tf-psa-crypto)\n\nset(tfpsacrypto_target \"${TF_PSA_CRYPTO_TARGET_PREFIX}tfpsacrypto\")\nif (USE_STATIC_MBEDTLS_LIBRARY)\n    set(tfpsacrypto_static_target ${tfpsacrypto_target})\nendif()\nif(USE_STATIC_MBEDTLS_LIBRARY AND USE_SHARED_MBEDTLS_LIBRARY)\n    string(APPEND tfpsacrypto_static_target \"_static\")\nendif()\n\nset(tf_psa_crypto_library_targets\n    ${TF_PSA_CRYPTO_TARGET_PREFIX}tfpsacrypto\n    ${TF_PSA_CRYPTO_TARGET_PREFIX}builtin\n    ${TF_PSA_CRYPTO_TARGET_PREFIX}everest\n    ${TF_PSA_CRYPTO_TARGET_PREFIX}p256m)\n\nif(USE_STATIC_MBEDTLS_LIBRARY AND USE_SHARED_MBEDTLS_LIBRARY)\n    list(APPEND tf_psa_crypto_library_targets\n         ${TF_PSA_CRYPTO_TARGET_PREFIX}tfpsacrypto_static\n         ${TF_PSA_CRYPTO_TARGET_PREFIX}builtin_static)\nendif()\n\nforeach(target IN LISTS tf_psa_crypto_library_targets)\n    if(NOT TARGET ${target})\n        message(FATAL_ERROR \"TF-PSA-Crypto target ${target} does not exist.\")\n    endif()\nendforeach(target)\n\nadd_subdirectory(library)\n\nadd_subdirectory(pkgconfig)\n\n#\n# The C files in framework/tests/src directory contain test code shared among test suites\n# and programs. This shared test code is compiled and linked to test suites and\n# programs objects as a set of compiled objects. The compiled objects are NOT\n# built into a library that the test suite and program objects would link\n# against as they link against the tfpsacrypto, mbedx509 and mbedtls libraries.\n# The reason is that such library is expected to have mutual dependencies with\n# the aforementioned libraries and that there is as of today no portable way of\n# handling such dependencies (only toolchain specific solutions).\n#\n# Thus the below definition of the `mbedtls_test` CMake library of objects\n# target. This library of objects is used by tests and programs CMake files\n# to define the test executables.\n#\nif(ENABLE_TESTING OR ENABLE_PROGRAMS)\n    file(GLOB MBEDTLS_TEST_FILES\n         ${MBEDTLS_FRAMEWORK_DIR}/tests/src/*.c\n         ${MBEDTLS_FRAMEWORK_DIR}/tests/src/drivers/*.c)\n    add_library(mbedtls_test OBJECT ${MBEDTLS_TEST_FILES})\n    set_base_compile_options(mbedtls_test)\n    if(GEN_FILES)\n        add_custom_command(\n            OUTPUT\n                ${MBEDTLS_FRAMEWORK_DIR}/tests/src/test_keys.h\n            COMMAND\n                \"${MBEDTLS_PYTHON_EXECUTABLE}\"\n                \"${MBEDTLS_FRAMEWORK_DIR}/scripts/generate_test_keys.py\"\n                \"--output\"\n                \"${MBEDTLS_FRAMEWORK_DIR}/tests/src/test_keys.h\"\n            DEPENDS\n                ${MBEDTLS_FRAMEWORK_DIR}/scripts/generate_test_keys.py\n        )\n        add_custom_target(mbedtls_test_keys_header\n            DEPENDS ${MBEDTLS_FRAMEWORK_DIR}/tests/src/test_keys.h)\n        add_dependencies(mbedtls_test mbedtls_test_keys_header)\n    endif()\n    target_include_directories(mbedtls_test\n        PRIVATE ${MBEDTLS_FRAMEWORK_DIR}/tests/include\n        PRIVATE tests/include\n        PRIVATE include\n        PRIVATE tf-psa-crypto/include\n        PRIVATE tf-psa-crypto/drivers/builtin/include\n        PRIVATE tf-psa-crypto/drivers/everest/include\n        PRIVATE library\n        PRIVATE tf-psa-crypto/core\n        PRIVATE tf-psa-crypto/drivers/builtin/src)\n    # Request C11, needed for memory poisoning tests\n    set_target_properties(mbedtls_test PROPERTIES C_STANDARD 11)\n    set_config_files_compile_definitions(mbedtls_test)\n\n    file(GLOB MBEDTLS_TEST_HELPER_FILES\n         tests/src/*.c tests/src/test_helpers/*.c)\n    add_library(mbedtls_test_helpers OBJECT ${MBEDTLS_TEST_HELPER_FILES})\n    set_base_compile_options(mbedtls_test_helpers)\n    if(GEN_FILES)\n        add_custom_command(\n            OUTPUT\n                ${CMAKE_CURRENT_SOURCE_DIR}/tests/src/test_certs.h\n            COMMAND\n                \"${MBEDTLS_PYTHON_EXECUTABLE}\"\n                \"${MBEDTLS_FRAMEWORK_DIR}/scripts/generate_test_cert_macros.py\"\n                \"--output\"\n                \"${CMAKE_CURRENT_SOURCE_DIR}/tests/src/test_certs.h\"\n            DEPENDS\n                ${MBEDTLS_FRAMEWORK_DIR}/scripts/generate_test_cert_macros.py\n        )\n        add_custom_target(mbedtls_test_certs_header\n            DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/tests/src/test_certs.h)\n        add_dependencies(mbedtls_test_helpers mbedtls_test_certs_header)\n    endif()\n    target_include_directories(mbedtls_test_helpers\n        PRIVATE ${MBEDTLS_FRAMEWORK_DIR}/tests/include\n        PRIVATE tests/include\n        PRIVATE include\n        PRIVATE tf-psa-crypto/include\n        PRIVATE tf-psa-crypto/drivers/builtin/include\n        PRIVATE library\n        PRIVATE tf-psa-crypto/core\n        PRIVATE tf-psa-crypto/drivers/builtin/src\n        PRIVATE tf-psa-crypto/drivers/everest/include)\n\n    set_config_files_compile_definitions(mbedtls_test_helpers)\nendif()\n\nif(ENABLE_PROGRAMS)\n    set(ssl_opt_target \"${MBEDTLS_TARGET_PREFIX}ssl-opt\")\n    add_custom_target(${ssl_opt_target})\n\n    add_subdirectory(programs)\nendif()\n\nADD_CUSTOM_TARGET(${MBEDTLS_TARGET_PREFIX}mbedtls-apidoc\n    COMMAND doxygen mbedtls.doxyfile\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/doxygen)\n\nif(ENABLE_TESTING)\n    enable_testing()\n\n    add_subdirectory(tests)\n\n    # additional convenience targets for Unix only\n    if(UNIX AND (NOT MBEDTLS_AS_SUBPROJECT))\n        # For coverage testing:\n        # 1. Build with:\n        #         cmake -D CMAKE_BUILD_TYPE=Coverage /path/to/source && make\n        # 2. Run the relevant tests for the part of the code you're interested in.\n        #    For the reference coverage measurement, see\n        #    tests/scripts/basic-build-test.sh\n        # 3. Run scripts/lcov.sh to generate an HTML report.\n        ADD_CUSTOM_TARGET(lcov\n            COMMAND scripts/lcov.sh\n        )\n\n        ADD_CUSTOM_TARGET(memcheck\n            COMMAND sed -i.bak s+/usr/bin/valgrind+`which valgrind`+ DartConfiguration.tcl\n            COMMAND ctest -O memcheck.log -D ExperimentalMemCheck\n            COMMAND tail -n1 memcheck.log | grep 'Memory checking results:' > /dev/null\n            COMMAND rm -f memcheck.log\n            COMMAND mv DartConfiguration.tcl.bak DartConfiguration.tcl\n        )\n    endif()\n\n    # Make scripts needed for testing available in an out-of-source build.\n    if (NOT ${CMAKE_CURRENT_BINARY_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})\n        link_to_source(scripts)\n        # Copy (don't link) DartConfiguration.tcl, needed for memcheck, to\n        # keep things simple with the sed commands in the memcheck target.\n        configure_file(${CMAKE_CURRENT_SOURCE_DIR}/DartConfiguration.tcl\n                    ${CMAKE_CURRENT_BINARY_DIR}/DartConfiguration.tcl COPYONLY)\n    endif()\nendif()\n\nif(NOT DISABLE_PACKAGE_CONFIG_AND_INSTALL)\n    configure_package_config_file(\n        \"cmake/MbedTLSConfig.cmake.in\"\n        \"cmake/MbedTLSConfig.cmake\"\n            INSTALL_DESTINATION \"cmake\")\n\n    write_basic_package_version_file(\n        \"cmake/MbedTLSConfigVersion.cmake\"\n            COMPATIBILITY SameMajorVersion\n            VERSION 4.0.0)\n\n    install(\n        FILES \"${CMAKE_CURRENT_BINARY_DIR}/cmake/MbedTLSConfig.cmake\"\n              \"${CMAKE_CURRENT_BINARY_DIR}/cmake/MbedTLSConfigVersion.cmake\"\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/MbedTLS\")\n\n    export(\n        EXPORT MbedTLSTargets\n        NAMESPACE MbedTLS::\n        FILE \"cmake/MbedTLSTargets.cmake\")\n\n    install(\n        EXPORT MbedTLSTargets\n        NAMESPACE MbedTLS::\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/MbedTLS\"\n        FILE \"MbedTLSTargets.cmake\")\n\n    if(CMAKE_VERSION VERSION_GREATER 3.15 OR CMAKE_VERSION VERSION_EQUAL 3.15)\n        # Do not export the package by default\n        cmake_policy(SET CMP0090 NEW)\n\n        # Make this package visible to the system\n        export(PACKAGE MbedTLS)\n    endif()\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 9.40234375,
          "content": "Contributing\n============\nWe gratefully accept bug reports and contributions from the community. All PRs are reviewed by the project team / community, and may need some modifications to\nbe accepted.\n\nQuick Checklist for PR contributors\n-----------------------------------\nMore details on all of these points may be found in the sections below.\n\n- [Sign-off](#license-and-copyright): all commits must be signed off.\n- [Tests](#tests): please ensure the PR includes adequate tests.\n- [Changelog](#documentation): if needed, please provide a changelog entry.\n- [Backports](#long-term-support-branches): provide a backport if needed (it's fine to wait until the main PR is accepted).\n\nCoding Standards\n----------------\n- Contributions should include tests, as mentioned in the [Tests](#tests) and [Continuous Integration](#continuous-integration-tests) sections. Please check that your contribution passes basic tests before submission, and check the CI results after making a pull request.\n- The code should be written in a clean and readable style, and must follow [our coding standards](https://mbed-tls.readthedocs.io/en/latest/kb/development/mbedtls-coding-standards/).\n- The code should be written in a portable generic way, that will benefit the whole community, and not only your own needs.\n- The code should be secure, and will be reviewed from a security point of view as well.\n\nMaking a Contribution\n---------------------\n1. [Check for open issues](https://github.com/Mbed-TLS/mbedtls/issues) or [start a discussion](https://lists.trustedfirmware.org/mailman3/lists/mbed-tls.lists.trustedfirmware.org) around a feature idea or a bug.\n1. Fork the [Mbed TLS repository on GitHub](https://github.com/Mbed-TLS/mbedtls) to start making your changes. As a general rule, you should use the [\"development\" branch](https://github.com/Mbed-TLS/mbedtls/tree/development) as a basis.\n1. Write a test which shows that the bug was fixed or that the feature works as expected.\n1. Send a pull request (PR) and work with us until it gets merged and published. Contributions may need some modifications, so a few rounds of review and fixing may be necessary. See our [review process guidelines](https://mbed-tls.readthedocs.io/en/latest/reviews/review-for-contributors/).\n1. For quick merging, the contribution should be short, and concentrated on a single feature or topic. The larger the contribution is, the longer it would take to review it and merge it.\n\nBackwards Compatibility\n-----------------------\n\nThe project aims to minimise the impact on users upgrading to newer versions of the library and it should not be necessary for a user to make any changes to their own code to work with a newer version of the library. Unless the user has made an active decision to use newer features, a newer generation of the library or a change has been necessary due to a security issue or other significant software defect, no modifications to their own code should be necessary. To achieve this, API compatibility is maintained between different versions of Mbed TLS on the main development branch and in LTS (Long Term Support) branches, as described in [BRANCHES.md](BRANCHES.md).\n\nTo minimise such disruption to users, where a change to the interface is required, all changes to the ABI or API, even on the main development branch where new features are added, need to be justifiable by either being a significant enhancement, new feature or bug fix which is best resolved by an interface change. If there is an API change, the contribution, if accepted, will be merged only when there is a major release.\n\nNo changes are permitted to the definition of functions in the public interface which will change the API. Instead the interface can only be changed by its extension. Where changes to an existing interface are necessary, functions in the public interface which need to be changed are marked as 'deprecated'. If there is a strong reason to replace an existing function with one that has a slightly different interface (different prototype, or different documented behavior), create a new function with a new name with the desired interface. Keep the old function, but mark it as deprecated.\n\nPeriodically, the library will remove deprecated functions from the library which will be a breaking change in the API, but such changes will be made only in a planned, structured way that gives sufficient notice to users of the library.\n\nLong Term Support Branches\n--------------------------\nMbed TLS maintains several LTS (Long Term Support) branches, which are maintained continuously for a given period. The LTS branches are provided to allow users of the library to have a maintained, stable version of the library which contains only security fixes and fixes for other defects, without encountering additional features or API extensions which may introduce issues or change the code size or RAM usage, which can be significant considerations on some platforms. To allow users to take advantage of the LTS branches, these branches maintain backwards compatibility for both the public API and ABI.\n\nWhen backporting to these branches please observe the following rules:\n\n1. Any change to the library which changes the API or ABI cannot be backported.\n1. All bug fixes that correct a defect that is also present in an LTS branch must be backported to that LTS branch. If a bug fix introduces a change to the API such as a new function, the fix should be reworked to avoid the API change. API changes without very strong justification are unlikely to be accepted.\n1. If a contribution is a new feature or enhancement, no backporting is required. Exceptions to this may be additional test cases or quality improvements such as changes to build or test scripts.\n\nIt would be highly appreciated if contributions are backported to LTS branches in addition to the [development branch](https://github.com/Mbed-TLS/mbedtls/tree/development) by contributors.\n\nThe list of maintained branches can be found in the [Current Branches section\nof BRANCHES.md](BRANCHES.md#current-branches).\n\nTests\n-----\nAs mentioned, tests that show the correctness of the feature or bug fix should be added to the pull request, if no such tests exist.\n\nMbed TLS includes a comprehensive set of test suites in the `tests/` directory that are dynamically generated to produce the actual test source files (e.g. `test_suite_ssl.c`). These files are generated from a `function file` (e.g. `suites/test_suite_ssl.function`) and a `data file` (e.g. `suites/test_suite_ssl.data`). The function file contains the test functions. The data file contains the test cases, specified as parameters that will be passed to the test function.\n\n[A Knowledge Base article describing how to add additional tests is available on the Mbed TLS website](https://mbed-tls.readthedocs.io/en/latest/kb/development/test_suites/).\n\nA test script `tests/scripts/basic-build-test.sh` is available to show test coverage of the library. New code contributions should provide a similar level of code coverage to that which already exists for the library.\n\nSample applications, if needed, should be modified as well.\n\nContinuous Integration Tests\n----------------------------\nOnce a PR has been made, the Continuous Integration (CI) tests are triggered and run. You should follow the result of the CI tests, and fix failures.\n\nIt is advised to enable the [githooks scripts](https://github.com/Mbed-TLS/mbedtls/tree/development/tests/git-scripts) prior to pushing your changes, for catching some of the issues as early as possible.\n\nDocumentation\n-------------\nMbed TLS is well documented, but if you think documentation is needed, speak out!\n\n1. All interfaces should be documented through Doxygen. New APIs should introduce Doxygen documentation.\n1. Complex parts in the code should include comments.\n1. If needed, a Readme file is advised.\n1. If a [Knowledge Base (KB)](https://mbed-tls.readthedocs.io/en/latest/kb/) article should be added, write this as a comment in the PR description.\n1. A [ChangeLog](https://github.com/Mbed-TLS/mbedtls/blob/development/ChangeLog.d/00README.md) entry should be added for this contribution.\n\nLicense and Copyright\n---------------------\n\nUnless specifically indicated otherwise in a file, Mbed TLS files are provided under a dual [Apache-2.0](https://spdx.org/licenses/Apache-2.0.html) OR [GPL-2.0-or-later](https://spdx.org/licenses/GPL-2.0-or-later.html) license. See the [LICENSE](LICENSE) file for the full text of these licenses. This means that users may choose which of these licenses they take the code under.\n\nContributors must accept that their contributions are made under both the Apache-2.0 AND [GPL-2.0-or-later](https://spdx.org/licenses/GPL-2.0-or-later.html) licenses.\n\nAll new files should include the standard SPDX license identifier where possible, i.e. \"SPDX-License-Identifier: Apache-2.0 OR GPL-2.0-or-later\".\n\nThe copyright on contributions is retained by the original authors of the code. Where possible for new files, this should be noted in a comment at the top of the file in the form: \"Copyright The Mbed TLS Contributors\".\n\nWhen contributing code to us, the committer and all authors are required to make the submission under the terms of the [Developer Certificate of Origin](dco.txt), confirming that the code submitted can (legally) become part of the project, and is submitted under both the Apache-2.0 AND GPL-2.0-or-later licenses.\n\nThis is done by including the standard Git `Signed-off-by:` line in every commit message. If more than one person contributed to the commit, they should also add their own `Signed-off-by:` line.\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 328.5390625,
          "content": "Mbed TLS ChangeLog (Sorted per branch, date)\n\n= Mbed TLS 3.6.0 branch released 2024-03-28\n\nAPI changes\n   * Remove `tls13_` in mbedtls_ssl_tls13_conf_early_data() and\n     mbedtls_ssl_tls13_conf_max_early_data_size() API names. Early data\n     feature may not be TLS 1.3 specific in the future. Fixes #6909.\n\nDefault behavior changes\n   * psa_import_key() now only accepts RSA keys in the PSA standard formats.\n     The undocumented ability to import other formats (PKCS#8, SubjectPublicKey,\n     PEM) accepted by the pkparse module has been removed. Applications that\n     need these formats can call mbedtls_pk_parse_{public,}key() followed by\n     mbedtls_pk_import_into_psa().\n\nRequirement changes\n   * Drop support for Visual Studio 2013 and 2015, and Arm Compiler 5.\n\nNew deprecations\n   * Rename the MBEDTLS_SHA256_USE_A64_CRYPTO_xxx config options to\n     MBEDTLS_SHA256_USE_ARMV8_A_CRYPTO_xxx. The old names may still\n     be used, but are deprecated.\n   * In the PSA API, domain parameters are no longer used for anything.\n     They are deprecated and will be removed in a future version of the\n     library.\n   * mbedtls_ecp_write_key() is deprecated in favor of\n     mbedtls_ecp_write_key_ext().\n\nRemovals\n   * In the PSA API, the experimental way to encode the public exponent of\n     an RSA key as a domain parameter is no longer supported. Use\n     psa_generate_key_ext() instead.\n   * Temporary function mbedtls_pk_wrap_as_opaque() is removed. To mimic the\n     same behavior mbedtls_pk_get_psa_attributes() and\n     mbedtls_pk_import_into_psa() can be used to import a PK key into PSA,\n     while mbedtls_pk_setup_opaque() can be used to wrap a PSA key into a opaque\n     PK context.\n\nFeatures\n   * Added an example program showing how to hash with the PSA API.\n   * Support Armv8-A Crypto Extension acceleration for SHA-256\n     when compiling for Thumb (T32) or 32-bit Arm (A32).\n   * AES-NI is now supported in Windows builds with clang and clang-cl.\n     Resolves #8372.\n   * Add new mbedtls_x509_csr_parse_der_with_ext_cb() routine which allows\n     parsing unsupported certificate extensions via user provided callback.\n   * Enable the new option MBEDTLS_BLOCK_CIPHER_NO_DECRYPT to omit\n     the decryption direction of block ciphers (AES, ARIA, Camellia).\n     This affects both the low-level modules and the high-level APIs\n     (the cipher and PSA interfaces). This option is incompatible with modes\n     that use the decryption direction (ECB in PSA, CBC, XTS, KW) and with DES.\n   * Support use of Armv8-A Cryptographic Extensions for hardware acclerated\n     AES when compiling for Thumb (T32) or 32-bit Arm (A32).\n   * If a cipher or AEAD mechanism has a PSA driver, you can now build the\n     library without the corresponding built-in implementation. Generally\n     speaking that requires both the key type and algorithm to be accelerated\n     or they'll both be built in. However, for CCM and GCM the built-in\n     implementation is able to take advantage of a driver that only\n     accelerates the key type (that is, the block cipher primitive). See\n     docs/driver-only-builds.md for full details and current limitations.\n   * The CTR_DRBG module will now use AES from a PSA driver if MBEDTLS_AES_C is\n     disabled. This requires PSA_WANT_ALG_ECB_NO_PADDING in addition to\n     MBEDTLS_PSA_CRYPTO_C and PSA_WANT_KEY_TYPE_AES.\n   * Fewer modules depend on MBEDTLS_CIPHER_C, making it possible to save code\n     size by disabling it in more circumstances. In particular, the CCM and\n     GCM modules no longer depend on MBEDTLS_CIPHER_C. Also,\n     MBEDTLS_PSA_CRYPTO can now be enabled without MBEDTLS_CIPHER_C if all\n     unauthenticated (non-AEAD) ciphers are disabled, or if they're all\n     fully provided by drivers. See docs/driver-only-builds.md for full\n     details and current limitations; in particular, NIST_KW and PKCS5/PKCS12\n     decryption still unconditionally depend on MBEDTLS_CIPHER_C.\n   * Add support for record size limit extension as defined by RFC 8449\n     and configured with MBEDTLS_SSL_RECORD_SIZE_LIMIT.\n     Application data sent and received will be fragmented according to\n     Record size limits negotiated during handshake.\n   * Improve performance of AES-GCM, AES-CTR and CTR-DRBG when\n     hardware accelerated AES is not present (around 13-23% on 64-bit Arm).\n   * Add functions mbedtls_ecc_group_to_psa() and mbedtls_ecc_group_from_psa()\n     to convert between Mbed TLS and PSA curve identifiers.\n   * Add utility functions to manipulate mbedtls_ecp_keypair objects, filling\n     gaps made by making its fields private: mbedtls_ecp_set_public_key(),\n     mbedtls_ecp_write_public_key(), mbedtls_ecp_keypair_calc_public(),\n     mbedtls_ecp_keypair_get_group_id(). Fixes #5017, #5441, #8367, #8652.\n   * Add functions mbedtls_md_psa_alg_from_type() and\n     mbedtls_md_type_from_psa_alg() to convert between mbedtls_md_type_t and\n     psa_algorithm_t.\n   * Add partial platform support for z/OS.\n   * Improve performance for gcc (versions older than 9.3.0) and IAR.\n   * Add functions mbedtls_ecdsa_raw_to_der() and mbedtls_ecdsa_der_to_raw() to\n     convert ECDSA signatures between raw and DER (ASN.1) formats.\n   * Add support for using AES-CBC 128, 192, and 256 bit schemes\n     with PKCS#5 PBES2. Keys encrypted this way can now be parsed by PK parse.\n   * The new function mbedtls_rsa_get_bitlen() returns the length of the modulus\n     in bits, i.e. the key size for an RSA key.\n   * Add pc files for pkg-config, e.g.:\n     pkg-config --cflags --libs (mbedtls|mbedcrypto|mbedx509)\n   * Add getter (mbedtls_ssl_session_get_ticket_creation_time()) to access\n     `mbedtls_ssl_session.ticket_creation_time`.\n   * The new functions mbedtls_pk_get_psa_attributes() and\n     mbedtls_pk_import_into_psa() provide a uniform way to create a PSA\n     key from a PK key.\n   * The benchmark program now reports times for both ephemeral and static\n     ECDH in all ECDH configurations.\n   * Add support for 8-bit GCM tables for Shoup's algorithm to speedup GCM\n     operations when hardware accelerated AES is not present. Improves\n     performance by around 30% on 64-bit Intel; 125% on Armv7-M.\n   * The new function psa_generate_key_ext() allows generating an RSA\n     key pair with a custom public exponent.\n   * The new function mbedtls_ecp_write_key_ext() is similar to\n     mbedtls_ecp_write_key(), but can be used without separately calculating\n     the output length.\n   * Add new accessor to expose the private group id member of\n     `mbedtls_ecdh_context` structure.\n   * Add new accessor to expose the `MBEDTLS_PRIVATE(ca_istrue)` member of\n     `mbedtls_x509_crt` structure. This requires setting\n     the MBEDTLS_X509_EXT_BASIC_CONSTRAINTS bit in the certificate's\n     ext_types field.\n   * mbedtls_psa_get_random() is always available as soon as\n     MBEDTLS_PSA_CRYPTO_CLIENT is enabled at build time and psa_crypto_init() is\n     called at runtime. This together with MBEDTLS_PSA_RANDOM_STATE can be\n     used as random number generator function (f_rng) and context (p_rng) in\n     legacy functions.\n   * The new functions mbedtls_pk_copy_from_psa() and\n     mbedtls_pk_copy_public_from_psa() provide ways to set up a PK context\n     with the same content as a PSA key.\n   * Add new accessors to expose the private session-id,\n     session-id length, and ciphersuite-id members of\n     `mbedtls_ssl_session` structure.\n     Add new accessor to expose the ciphersuite-id of\n     `mbedtls_ssl_ciphersuite_t` structure.Design ref: #8529\n   * Mbed TLS now supports the writing and reading of TLS 1.3 early data (see\n     docs/tls13-early-data.md). The support enablement is controlled at build\n     time by the MBEDTLS_SSL_EARLY_DATA configuration option and at runtime by\n     the mbedtls_ssl_conf_early_data() API (by default disabled in both cases).\n   * Add protection for multithreaded access to the PSA keystore and protection\n     for multithreaded access to the the PSA global state, including\n     concurrently calling psa_crypto_init() when MBEDTLS_THREADING_C and\n     MBEDTLS_THREADING_PTHREAD are defined. See\n     docs/architecture/psa-thread-safety/psa-thread-safety.md for more details.\n     Resolves issues #3263 and #7945.\n\nSecurity\n   * Fix a stack buffer overread (less than 256 bytes) when parsing a TLS 1.3\n     ClientHello in a TLS 1.3 server supporting some PSK key exchange mode. A\n     malicious client could cause information disclosure or a denial of service.\n     Fixes CVE-2024-30166.\n   * Passing buffers that are stored in untrusted memory as arguments\n     to PSA functions is now secure by default.\n     The PSA core now protects against modification of inputs or exposure\n     of intermediate outputs during operations. This is currently implemented\n     by copying buffers.\n     This feature increases code size and memory usage. If buffers passed to\n     PSA functions are owned exclusively by the PSA core for the duration of\n     the function call (i.e. no buffer parameters are in shared memory),\n     copying may be disabled by setting MBEDTLS_PSA_ASSUME_EXCLUSIVE_BUFFERS.\n     Note that setting this option will cause input-output buffer overlap to\n     be only partially supported (#3266).\n     Fixes CVE-2024-28960.\n   * Restore the maximum TLS version to be negotiated to the configured one\n     when an SSL context is reset with the mbedtls_ssl_session_reset() API.\n     An attacker was able to prevent an Mbed TLS server from establishing any\n     TLS 1.3 connection potentially resulting in a Denial of Service or forced\n     version downgrade from TLS 1.3 to TLS 1.2. Fixes #8654 reported by hey3e.\n     Fixes CVE-2024-28755.\n   * When negotiating TLS version on server side, do not fall back to the\n     TLS 1.2 implementation of the protocol if it is disabled.\n     - If the TLS 1.2 implementation was disabled at build time, a TLS 1.2\n       client could put the TLS 1.3-only server in an infinite loop processing\n       a TLS 1.2 ClientHello, resulting in a denial of service. Reported by\n       Matthias Mucha and Thomas Blattmann, SICK AG.\n     - If the TLS 1.2 implementation was disabled at runtime, a TLS 1.2 client\n       was able to successfully establish a TLS 1.2 connection with the server.\n       Reported by alluettiv on GitHub.\n    Fixes CVE-2024-28836.\n\nBugfix\n   * Fix the build with CMake when Everest or P256-m is enabled through\n     a user configuration file or the compiler command line. Fixes #8165.\n   * Fix compilation error in C++ programs when MBEDTLS_ASN1_PARSE_C is\n     disabled.\n   * Fix possible NULL dereference issue in X509 cert_req program if an entry\n     in the san parameter is not separated by a colon.\n   * Fix possible NULL dereference issue in X509 cert_write program if an entry\n     in the san parameter is not separated by a colon.\n   * Fix an inconsistency between implementations and usages of `__cpuid`,\n     which mainly causes failures when building Windows target using\n     mingw or clang. Fixes #8334 & #8332.\n   * Fix build failure in conda-forge.  Fixes #8422.\n   * Fix parsing of CSRs with critical extensions.\n   * Switch to milliseconds as the unit for ticket creation and reception time\n     instead of seconds. That avoids rounding errors when computing the age of\n     tickets compared to peer using a millisecond clock (observed with GnuTLS).\n     Fixes #6623.\n   * Fix TLS server accepting TLS 1.2 handshake while TLS 1.2\n     is disabled at runtime. Fixes #8593.\n   * Remove accidental introduction of RSA signature algorithms\n     in TLS Suite B Profile. Fixes #8221.\n   * Fix unsupported PSA asymmetric encryption and decryption\n     (psa_asymmetric_[en|de]crypt) with opaque keys.\n     Resolves #8461.\n   * On Linux on ARMv8, fix a build error with SHA-256 and SHA-512\n     acceleration detection when the libc headers do not define the\n     corresponding constant. Reported by valord577.\n   * Correct initial capacities for key derivation algorithms:TLS12_PRF,\n     TLS12_PSK_TO_MS, PBKDF2-HMAC, PBKDF2-CMAC\n   * Fix mbedtls_pk_get_bitlen() for RSA keys whose size is not a\n     multiple of 8. Fixes #868.\n   * Avoid segmentation fault caused by releasing not initialized\n     entropy resource in gen_key example. Fixes #8809.\n   * mbedtls_pem_read_buffer() now performs a check on the padding data of\n     decrypted keys and it rejects invalid ones.\n   * Fix mbedtls_pk_sign(), mbedtls_pk_verify(), mbedtls_pk_decrypt() and\n     mbedtls_pk_encrypt() on non-opaque RSA keys to honor the padding mode in\n     the RSA context. Before, if MBEDTLS_USE_PSA_CRYPTO was enabled and the\n     RSA context was configured for PKCS#1 v2.1 (PSS/OAEP), the sign/verify\n     functions performed a PKCS#1 v1.5 signature instead and the\n     encrypt/decrypt functions returned an error. Fixes #8824.\n   * Fix missing bitflags in SSL session serialization headers. Their absence\n     allowed SSL sessions saved in one configuration to be loaded in a\n     different, incompatible configuration.\n   * In TLS 1.3 clients, fix an interoperability problem due to the client\n     generating a new random after a HelloRetryRequest. Fixes #8669.\n   * Fix the restoration of the ALPN when loading serialized connection with\n     the mbedtls_ssl_context_load() API.\n   * Fix NULL pointer dereference in mbedtls_pk_verify_ext() when called using\n     an opaque RSA context and specifying MBEDTLS_PK_RSASSA_PSS as key type.\n   * Fix RSA opaque keys always using PKCS1 v1.5 algorithms instead of the\n     primary algorithm of the wrapped PSA key.\n   * Fully support arbitrary overlap between inputs and outputs of PSA\n     functions. Note that overlap is still only partially supported when\n     MBEDTLS_PSA_ASSUME_EXCLUSIVE_BUFFERS is set (#3266).\n\nChanges\n   * Use heap memory to allocate DER encoded public/private key.\n     This reduces stack usage significantly for writing a public/private\n     key to a PEM string.\n   * PSA_WANT_ALG_CCM and PSA_WANT_ALG_CCM_STAR_NO_TAG are no more synonyms and\n     they are now treated separately. This means that they should be\n     individually enabled in order to enable respective support; also the\n     corresponding MBEDTLS_PSA_ACCEL symbol should be defined in case\n     acceleration is required.\n   * Moved declaration of functions mbedtls_ecc_group_to_psa and\n     mbedtls_ecc_group_of_psa from psa/crypto_extra.h to mbedtls/psa_util.h\n   * mbedtls_pk_sign_ext() is now always available, not just when\n     PSA (MBEDTLS_PSA_CRYPTO_C) is enabled.\n   * Extended PSA Crypto configurations options for FFDH by making it possible\n     to select only some of the parameters / groups, with the macros\n     PSA_WANT_DH_RFC7919_XXXX. You now need to defined the corresponding macro\n     for each size you want to support. Also, if you have an FFDH accelerator,\n     you'll need to define the appropriate MBEDTLS_PSA_ACCEL macros to signal\n     support for these domain parameters.\n   * RSA support in PSA no longer auto-enables the pkparse and pkwrite modules,\n     saving code size when those are not otherwise enabled.\n   * mbedtls_mpi_exp_mod and code that uses it, notably RSA and DHM operations,\n     have changed their speed/memory compromise as part of a proactive security\n     improvement. The new default value of MBEDTLS_MPI_WINDOW_SIZE roughly\n     preserves the current speed, at the expense of increasing memory\n     consumption.\n   * Rename directory containing Visual Studio files from visualc/VS2013 to\n     visualc/VS2017.\n   * The TLS 1.3 protocol is now enabled in the default configuration.\n\n= Mbed TLS 3.5.2 branch released 2024-01-26\n\nSecurity\n   * Fix a timing side channel in private key RSA operations. This side channel\n     could be sufficient for an attacker to recover the plaintext. A local\n     attacker or a remote attacker who is close to the victim on the network\n     might have precise enough timing measurements to exploit this. It requires\n     the attacker to send a large number of messages for decryption. For\n     details, see \"Everlasting ROBOT: the Marvin Attack\", Hubert Kario. Reported\n     by Hubert Kario, Red Hat.\n   * Fix a failure to validate input when writing x509 extensions lengths which\n     could result in an integer overflow, causing a zero-length buffer to be\n     allocated to hold the extension. The extension would then be copied into\n     the buffer, causing a heap buffer overflow.\n\n= Mbed TLS 3.5.1 branch released 2023-11-06\n\nChanges\n   *  Mbed TLS is now released under a dual Apache-2.0 OR GPL-2.0-or-later\n      license. Users may choose which license they take the code under.\n\nBugfix\n   * Fix accidental omission of MBEDTLS_TARGET_PREFIX in 3rdparty modules\n     in CMake.\n\n= Mbed TLS 3.5.0 branch released 2023-10-05\n\nAPI changes\n   * Mbed TLS 3.4 introduced support for omitting the built-in implementation\n     of ECDSA and/or EC J-PAKE when those are provided by a driver. However,\n     there was a flaw in the logic checking if the built-in implementation, in\n     that it failed to check if all the relevant curves were supported by the\n     accelerator. As a result, it was possible to declare no curves as\n     accelerated and still have the built-in implementation compiled out.\n     Starting with this release, it is necessary to declare which curves are\n     accelerated (using MBEDTLS_PSA_ACCEL_ECC_xxx macros), or they will be\n     considered not accelerated, and the built-in implementation of the curves\n     and any algorithm possible using them will be included in the build.\n   * Add new millisecond time type `mbedtls_ms_time_t` and `mbedtls_ms_time()`\n     function, needed for TLS 1.3 ticket lifetimes. Alternative implementations\n     can be created using an ALT interface.\n\nRequirement changes\n   * Officially require Python 3.8 now that earlier versions are out of support.\n   * Minimum required Windows version is now Windows Vista, or\n     Windows Server 2008.\n\nNew deprecations\n   * PSA_WANT_KEY_TYPE_xxx_KEY_PAIR and\n     MBEDTLS_PSA_ACCEL_KEY_TYPE_xxx_KEY_PAIR, where xxx is either ECC or RSA,\n     are now being deprecated in favor of PSA_WANT_KEY_TYPE_xxx_KEY_PAIR_yyy and\n     MBEDTLS_PSA_ACCEL_KEY_TYPE_xxx_KEY_PAIR_yyy. Here yyy can be: BASIC,\n     IMPORT, EXPORT, GENERATE, DERIVE. The goal is to have a finer detail about\n     the capabilities of the PSA side for either key.\n   * MBEDTLS_CIPHER_BLKSIZE_MAX is deprecated in favor of\n     MBEDTLS_MAX_BLOCK_LENGTH (if you intended what the name suggests:\n     maximum size of any supported block cipher) or the new name\n     MBEDTLS_CMAC_MAX_BLOCK_SIZE (if you intended the actual semantics:\n     maximum size of a block cipher supported by the CMAC module).\n   * mbedtls_pkcs5_pbes2() and mbedtls_pkcs12_pbe() functions are now\n     deprecated in favor of mbedtls_pkcs5_pbes2_ext() and\n     mbedtls_pkcs12_pbe_ext() as they offer more security by checking\n     for overflow of the output buffer and reporting the actual length\n     of the output.\n\nFeatures\n   * All modules that use hashes or HMAC can now take advantage of PSA Crypto\n     drivers when MBEDTLS_PSA_CRYPTO_C is enabled and psa_crypto_init() has\n     been called. Previously (in 3.3), this was restricted to a few modules,\n     and only in builds where MBEDTLS_MD_C was disabled; in particular the\n     entropy module was not covered which meant an external RNG had to be\n     provided - these limitations are lifted in this version. A new set of\n     feature macros, MBEDTLS_MD_CAN_xxx, has been introduced that can be used\n     to check for availability of hash algorithms, regardless of whether\n     they're provided by a built-in implementation, a driver or both. See\n     docs/driver-only-builds.md.\n   * When a PSA driver for ECDH is present, it is now possible to disable\n     MBEDTLS_ECDH_C in the build in order to save code size. For TLS 1.2\n     key exchanges based on ECDH(E) to work, this requires\n     MBEDTLS_USE_PSA_CRYPTO. Restartable/interruptible ECDHE operations in\n     TLS 1.2 (ECDHE-ECDSA key exchange) are not supported in those builds yet,\n     as PSA does not have an API for restartable ECDH yet.\n   * When all of ECDH, ECDSA and EC J-PAKE are either disabled or provided by\n     a driver, it is possible to disable MBEDTLS_ECP_C (and MBEDTLS_BIGNUM_C\n     if not required by another module) and still get support for ECC keys and\n     algorithms in PSA, with some limitations. See docs/driver-only-builds.txt\n     for details.\n   * Add parsing of directoryName subtype for subjectAltName extension in\n     x509 certificates.\n   * Add support for server-side TLS version negotiation. If both TLS 1.2 and\n     TLS 1.3 protocols are enabled, the TLS server now selects TLS 1.2 or\n     TLS 1.3 depending on the capabilities and preferences of TLS clients.\n     Fixes #6867.\n   * X.509 hostname verification now supports IPAddress Subject Alternate Names.\n   * Add support for reading and writing X25519 and X448\n     public and private keys in RFC 8410 format using the existing PK APIs.\n   * When parsing X.509 certificates, support the extensions\n     SignatureKeyIdentifier and AuthorityKeyIdentifier.\n   * Don't include the PSA dispatch functions for PAKEs (psa_pake_setup() etc)\n     if no PAKE algorithms are requested\n   * Add support for the FFDH algorithm and DH key types in PSA, with\n     parameters from RFC 7919. This includes a built-in implementation based\n     on MBEDTLS_BIGNUM_C, and a driver dispatch layer enabling alternative\n     implementations of FFDH through the driver entry points.\n   * It is now possible to generate certificates with SubjectAltNames.\n     Currently supported subtypes: DnsName, UniformResourceIdentifier,\n     IP address, OtherName, and DirectoryName, as defined in RFC 5280.\n     See mbedtls_x509write_crt_set_subject_alternative_name for\n     more information.\n   * X.509 hostname verification now partially supports URI Subject Alternate\n     Names. Only exact matching, without any normalization procedures\n     described in 7.4 of RFC5280, will result in a positive URI verification.\n   * Add function mbedtls_oid_from_numeric_string() to parse an OID from a\n     string to a DER-encoded mbedtls_asn1_buf.\n   * Add SHA-3 family hash functions.\n   * Add support to restrict AES to 128-bit keys in order to save code size.\n     A new configuration option, MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH, can be\n     used to enable this feature.\n   * AES performance improvements. Uplift varies by platform,\n     toolchain, optimisation flags and mode.\n     Aarch64, gcc -Os and CCM, GCM and XTS benefit the most.\n     On Aarch64, uplift is typically around 20 - 110%.\n     When compiling with gcc -Os on Aarch64, AES-XTS improves\n     by 4.5x.\n   * Add support for PBKDF2-HMAC through the PSA API.\n   * New symbols PSA_WANT_KEY_TYPE_xxx_KEY_PAIR_yyy and\n     MBEDTLS_PSA_ACCEL_KEY_TYPE_xxx_KEY_PAIR_yyy (where xxx is either ECC, RSA\n     or DH) were introduced in order to have finer accuracy in defining the\n     PSA capabilities for each key. These capabilities, named yyy above, can be\n     any of: BASIC, IMPORT, EXPORT, GENERATE, DERIVE.\n     - DERIVE is only available for ECC keys, not for RSA or DH ones.\n     - implementations are free to enable more than what it was strictly\n       requested. For example BASIC internally enables IMPORT and EXPORT\n       (useful for testing purposes), but this might change in the future.\n   * Add support for FFDH key exchange in TLS 1.3.\n     This is automatically enabled as soon as PSA_WANT_ALG_FFDH\n     and the ephemeral or psk-ephemeral key exchange mode are enabled.\n     By default, all groups are offered; the list of groups can be\n     configured using the existing API function mbedtls_ssl_conf_groups().\n   * Improve mbedtls_x509_time performance and reduce memory use.\n   * Reduce syscalls to time() during certificate verification.\n   * Allow MBEDTLS_CONFIG_FILE and MBEDTLS_USER_CONFIG_FILE to be set by\n     setting the CMake variable of the same name at configuration time.\n   * Add getter (mbedtls_ssl_cache_get_timeout()) to access\n     `mbedtls_ssl_cache_context.timeout`.\n   * Add getter (mbedtls_ssl_get_hostname()) to access\n     `mbedtls_ssl_context.hostname`.\n   * Add getter (mbedtls_ssl_conf_get_endpoint()) to access\n     `mbedtls_ssl_config.endpoint`.\n   * Support for \"opaque\" (PSA-held) ECC keys in the PK module has been\n     extended: it is now possible to use mbedtls_pk_write_key_der(),\n     mbedtls_pk_write_key_pem(), mbedtls_pk_check_pair(), and\n     mbedtls_pk_verify() with opaque ECC keys (provided the PSA attributes\n     allow it).\n   * The documentation of mbedtls_ecp_group now describes the optimized\n     representation of A for some curves. Fixes #8045.\n   * Add a possibility to generate CSR's with RCF822 and directoryName subtype\n     of subjectAltName extension in x509 certificates.\n   * Add support for PBKDF2-CMAC through the PSA API.\n   * New configuration option MBEDTLS_AES_USE_HARDWARE_ONLY introduced. When\n     using CPU-accelerated AES (e.g., Arm Crypto Extensions), this option\n     disables the plain C implementation and the run-time detection for the\n     CPU feature, which reduces code size and avoids the vulnerability of the\n     plain C implementation.\n   * Accept arbitrary AttributeType and AttributeValue in certificate\n     Distinguished Names using RFC 4514 syntax.\n   * Applications using ECC over secp256r1 through the PSA API can use a\n     new implementation with a much smaller footprint, but some minor\n     usage restrictions. See the documentation of the new configuration\n     option MBEDTLS_PSA_P256M_DRIVER_ENABLED for details.\n\nSecurity\n   * Fix a case where potentially sensitive information held in memory would not\n     be completely zeroized during TLS 1.2 handshake, in both server and client\n     configurations.\n   * In configurations with ARIA or Camellia but not AES, the value of\n     MBEDTLS_CIPHER_BLKSIZE_MAX was 8, rather than 16 as the name might\n     suggest. This did not affect any library code, because this macro was\n     only used in relation with CMAC which does not support these ciphers.\n     This may affect application code that uses this macro.\n   * Developers using mbedtls_pkcs5_pbes2() or mbedtls_pkcs12_pbe() should\n     review the size of the output buffer passed to this function, and note\n     that the output after decryption may include CBC padding. Consider moving\n     to the new functions mbedtls_pkcs5_pbes2_ext() or mbedtls_pkcs12_pbe_ext()\n     which checks for overflow of the output buffer and reports the actual\n     length of the output.\n   * Improve padding calculations in CBC decryption, NIST key unwrapping and\n     RSA OAEP decryption. With the previous implementation, some compilers\n     (notably recent versions of Clang and IAR) could produce non-constant\n     time code, which could allow a padding oracle attack if the attacker\n     has access to precise timing measurements.\n   * Updates to constant-time C code so that compilers are less likely to use\n     conditional instructions, which can have an observable difference in\n     timing. (Clang has been seen to do this.) Also introduce assembly\n     implementations for 32- and 64-bit Arm and for x86 and x86-64, which are\n     guaranteed not to use conditional instructions.\n   * Fix definition of MBEDTLS_MD_MAX_BLOCK_SIZE, which was too\n     small when MBEDTLS_SHA384_C was defined and MBEDTLS_SHA512_C was\n     undefined. Mbed TLS itself was unaffected by this, but user code\n     which used MBEDTLS_MD_MAX_BLOCK_SIZE could be affected. The only\n     release containing this bug was Mbed TLS 3.4.0.\n   * Fix a buffer overread when parsing short TLS application data records in\n     null-cipher cipher suites. Credit to OSS-Fuzz.\n   * Fix a remotely exploitable heap buffer overflow in TLS handshake parsing.\n     In TLS 1.3, all configurations are affected except PSK-only ones, and\n     both clients and servers are affected.\n     In TLS 1.2, the affected configurations are those with\n     MBEDTLS_USE_PSA_CRYPTO and ECDH enabled but DHM and RSA disabled,\n     and only servers are affected, not clients.\n     Credit to OSS-Fuzz.\n\nBugfix\n   * Fix proper sizing for PSA_EXPORT_[KEY_PAIR/PUBLIC_KEY]_MAX_SIZE and\n     PSA_SIGNATURE_MAX_SIZE buffers when at least one accelerated EC is bigger\n     than all built-in ones and RSA is disabled.\n     Resolves #6622.\n   * Add missing md.h includes to some of the external programs from\n     the programs directory. Without this, even though the configuration\n     was sufficient for a particular program to work, it would only print\n     a message that one of the required defines is missing.\n   * Fix declaration of mbedtls_ecdsa_sign_det_restartable() function\n     in the ecdsa.h header file. There was a build warning when the\n     configuration macro MBEDTLS_ECDSA_SIGN_ALT was defined.\n     Resolves #7407.\n   * Fix an error when MBEDTLS_ECDSA_SIGN_ALT is defined but not\n     MBEDTLS_ECDSA_VERIFY_ALT, causing ecdsa verify to fail. Fixes #7498.\n   * Fix missing PSA initialization in sample programs when\n     MBEDTLS_USE_PSA_CRYPTO is enabled.\n   * Fix the J-PAKE driver interface for user and peer to accept any values\n     (previously accepted values were limited to \"client\" or \"server\").\n   * Fix clang and armclang compilation error when targeting certain Arm\n     M-class CPUs (Cortex-M0, Cortex-M0+, Cortex-M1, Cortex-M23,\n     SecurCore SC000). Fixes #1077.\n   * Fix \"unterminated '#pragma clang attribute push'\" in sha256/sha512.c when\n     built with MBEDTLS_SHAxxx_USE_A64_CRYPTO_IF_PRESENT but don't have a\n     way to detect the crypto extensions required. A warning is still issued.\n   * Fixed an issue that caused compile errors when using CMake and the IAR\n     toolchain.\n   * Fix very high stack usage in SSL debug code. Reported by Maximilian\n     Gerhardt in #7804.\n   * Fix a compilation failure in the constant_time module when\n     building for arm64_32 (e.g., for watchos). Reported by Paulo\n     Coutinho in #7787.\n   * Fix crypt_and_hash decryption fail when used with a stream cipher\n     mode of operation due to the input not being multiple of block size.\n     Resolves #7417.\n   * Fix a bug in which mbedtls_x509_string_to_names() would return success\n     when given a invalid name string if it did not contain '=' or ','.\n   * Fix compilation warnings in aes.c, which prevented the\n     example TF-M configuration in configs/ from building cleanly:\n     tfm_mbedcrypto_config_profile_medium.h with\n     crypto_config_profile_medium.h.\n   * In TLS 1.3, fix handshake failure when a client in its ClientHello\n     proposes an handshake based on PSK only key exchange mode or at least\n     one of the key exchange modes using ephemeral keys to a server that\n     supports only the PSK key exchange mode.\n   * Fix CCM* with no tag being not supported in a build with CCM as the only\n     symmetric encryption algorithm and the PSA configuration enabled.\n   * Fix the build with MBEDTLS_PSA_INJECT_ENTROPY. Fixes #7516.\n   * Fix a compilation error on some platforms when including mbedtls/ssl.h\n     with all TLS support disabled. Fixes #6628.\n   * Fix x509 certificate generation to conform to RFC 5480 / RFC 5758 when\n     using ECC key. The certificate was rejected by some crypto frameworks.\n     Fixes #2924.\n   * Fix a potential corruption of the passed-in IV when mbedtls_aes_crypt_cbc()\n     is called with zero length and padlock is not enabled.\n   * Fix compile failure due to empty enum in cipher_wrap.c, when building\n     with a very minimal configuration. Fixes #7625.\n   * Fix some cases where mbedtls_mpi_mod_exp, RSA key construction or ECDSA\n     signature can silently return an incorrect result in low memory conditions.\n   * Don't try to include MBEDTLS_PSA_CRYPTO_USER_CONFIG_FILE when\n     MBEDTLS_PSA_CRYPTO_CONFIG is disabled.\n   * Fix IAR compiler warnings.\n   * Fix an issue when parsing an otherName subject alternative name into a\n     mbedtls_x509_san_other_name struct. The type-id of the otherName was not\n     copied to the struct. This meant that the struct had incomplete\n     information about the otherName SAN and contained uninitialized memory.\n   * Fix the detection of HardwareModuleName otherName SANs. These were being\n     detected by comparing the wrong field and the check was erroneously\n     inverted.\n   * Fix a build error in some configurations with MBEDTLS_PSA_CRYPTO_CONFIG\n     enabled, where some low-level modules required by requested PSA crypto\n     features were not getting automatically enabled. Fixes #7420.\n   * Fix undefined symbols in some builds using TLS 1.3 with a custom\n     configuration file.\n   * Fix log level for the got supported group message. Fixes #6765\n   * Functions in the ssl_cache module now return a negative MBEDTLS_ERR_xxx\n     error code on failure. Before, they returned 1 to indicate failure in\n     some cases involving a missing entry or a full cache.\n   * mbedtls_pk_parse_key() now rejects trailing garbage in encrypted keys.\n   * Fix the build with CMake when Everest or P256-m is enabled through\n     a user configuration file or the compiler command line. Fixes #8165.\n\nChanges\n   * Enable Arm / Thumb bignum assembly for most Arm platforms when\n     compiling with gcc, clang or armclang and -O0.\n   * Enforce minimum RSA key size when generating a key\n     to avoid accidental misuse.\n   * Use heap memory to allocate DER encoded RSA private key.\n     This reduces stack usage significantly for RSA signature\n     operations when MBEDTLS_PSA_CRYPTO_C is defined.\n   * Update Windows code to use BCryptGenRandom and wcslen, and\n     ensure that conversions between size_t, ULONG, and int are\n     always done safely.  Original contribution by Kevin Kane #635, #730\n     followed by Simon Butcher #1453.\n   * Users integrating their own PSA drivers should be aware that\n     the file library/psa_crypto_driver_wrappers.c has been renamed\n     to psa_crypto_driver_wrappers_no_static.c.\n   * When using CBC with the cipher module, the requirement to call\n     mbedtls_cipher_set_padding_mode() is now enforced. Previously, omitting\n     this call accidentally applied a default padding mode chosen at compile\n     time.\n\n= Mbed TLS 3.4.1 branch released 2023-08-04\n\nBugfix\n   * Fix builds on Windows with clang\n\nChanges\n   * Update test data to avoid failures of unit tests after 2023-08-07.\n\n= Mbed TLS 3.4.0 branch released 2023-03-28\n\nDefault behavior changes\n   * The default priority order of TLS 1.3 cipher suites has been modified to\n     follow the same rules as the TLS 1.2 cipher suites (see\n     ssl_ciphersuites.c). The preferred cipher suite is now\n     TLS_CHACHA20_POLY1305_SHA256.\n\nNew deprecations\n   * mbedtls_x509write_crt_set_serial() is now being deprecated in favor of\n     mbedtls_x509write_crt_set_serial_raw(). The goal here is to remove any\n     direct dependency of X509 on BIGNUM_C.\n   * PSA to mbedtls error translation is now unified in psa_util.h,\n     deprecating mbedtls_md_error_from_psa. Each file that performs error\n     translation should define its own version of PSA_TO_MBEDTLS_ERR,\n     optionally providing file-specific error pairs. Please see psa_util.h for\n     more details.\n\nFeatures\n   * Added partial support for parsing the PKCS #7 Cryptographic Message\n     Syntax, as defined in RFC 2315. Currently, support is limited to the\n     following:\n     - Only the signed-data content type, version 1 is supported.\n     - Only DER encoding is supported.\n     - Only a single digest algorithm per message is supported.\n     - Certificates must be in X.509 format. A message must have either 0\n       or 1 certificates.\n     - There is no support for certificate revocation lists.\n     - The authenticated and unauthenticated attribute fields of SignerInfo\n       must be empty.\n     Many thanks to Daniel Axtens, Nayna Jain, and Nick Child from IBM for\n     contributing this feature, and to Demi-Marie Obenour for contributing\n     various improvements, tests and bug fixes.\n   * General performance improvements by accessing multiple bytes at a time.\n     Fixes #1666.\n   * Improvements to use of unaligned and byte-swapped memory, reducing code\n     size and improving performance (depending on compiler and target\n     architecture).\n   * Add support for reading points in compressed format\n     (MBEDTLS_ECP_PF_COMPRESSED) with mbedtls_ecp_point_read_binary()\n     (and callers) for Short Weierstrass curves with prime p where p = 3 mod 4\n     (all mbedtls MBEDTLS_ECP_DP_SECP* and MBEDTLS_ECP_DP_BP* curves\n      except MBEDTLS_ECP_DP_SECP224R1 and MBEDTLS_ECP_DP_SECP224K1)\n   * SHA224_C/SHA384_C are now independent from SHA384_C/SHA512_C respectively.\n     This helps in saving code size when some of the above hashes are not\n     required.\n   * Add parsing of V3 extensions (key usage, Netscape cert-type,\n     Subject Alternative Names) in x509 Certificate Sign Requests.\n   * Use HOSTCC (if it is set) when compiling C code during generation of the\n     configuration-independent files. This allows them to be generated when\n     CC is set for cross compilation.\n   * Add parsing of uniformResourceIdentifier subtype for subjectAltName\n     extension in x509 certificates.\n   * Add an interruptible version of sign and verify hash to the PSA interface,\n     backed by internal library support for ECDSA signing and verification.\n   * Add parsing of rfc822Name subtype for subjectAltName\n     extension in x509 certificates.\n   * The configuration macros MBEDTLS_PSA_CRYPTO_PLATFORM_FILE and\n     MBEDTLS_PSA_CRYPTO_STRUCT_FILE specify alternative locations for\n     the headers \"psa/crypto_platform.h\" and \"psa/crypto_struct.h\".\n   * When a PSA driver for ECDSA is present, it is now possible to disable\n     MBEDTLS_ECDSA_C in the build in order to save code size. For PK, X.509\n     and TLS to fully work, this requires MBEDTLS_USE_PSA_CRYPTO to be enabled.\n     Restartable/interruptible ECDSA operations in PK, X.509 and TLS are not\n     supported in those builds yet, as driver support for interruptible ECDSA\n     operations is not present yet.\n   * Add a driver dispatch layer for EC J-PAKE, enabling alternative\n     implementations of EC J-PAKE through the driver entry points.\n   * Add new API mbedtls_ssl_cache_remove for cache entry removal by\n     its session id.\n   * Add support to include the SubjectAltName extension to a CSR.\n   * Add support for AES with the Armv8-A Cryptographic Extension on\n     64-bit Arm. A new configuration option, MBEDTLS_AESCE_C, can\n     be used to enable this feature. Run-time detection is supported\n     under Linux only.\n   * When a PSA driver for EC J-PAKE is present, it is now possible to disable\n     MBEDTLS_ECJPAKE_C in the build in order to save code size. For the\n     corresponding TLS 1.2 key exchange to work, MBEDTLS_USE_PSA_CRYPTO needs\n     to be enabled.\n   * Add functions mbedtls_rsa_get_padding_mode() and mbedtls_rsa_get_md_alg()\n     to read non-public fields for padding mode and hash id from\n     an mbedtls_rsa_context, as requested in #6917.\n   * AES-NI is now supported with Visual Studio.\n   * AES-NI is now supported in 32-bit builds, or when MBEDTLS_HAVE_ASM\n     is disabled, when compiling with GCC or Clang or a compatible compiler\n     for a target CPU that supports the requisite instructions (for example\n     gcc -m32 -msse2 -maes -mpclmul). (Generic x86 builds with GCC-like\n     compilers still require MBEDTLS_HAVE_ASM and a 64-bit target.)\n   * It is now possible to use a PSA-held (opaque) password with the TLS 1.2\n     ECJPAKE key exchange, using the new API function\n     mbedtls_ssl_set_hs_ecjpake_password_opaque().\n\nSecurity\n   * Use platform-provided secure zeroization function where possible, such as\n     explicit_bzero().\n   * Zeroize SSL cache entries when they are freed.\n   * Fix a potential heap buffer overread in TLS 1.3 client-side when\n     MBEDTLS_DEBUG_C is enabled. This may result in an application crash.\n   * Add support for AES with the Armv8-A Cryptographic Extension on 64-bit\n     Arm, so that these systems are no longer vulnerable to timing side-channel\n     attacks. This is configured by MBEDTLS_AESCE_C, which is on by default.\n     Reported by Demi Marie Obenour.\n   * MBEDTLS_AESNI_C, which is enabled by default, was silently ignored on\n     builds that couldn't compile the GCC-style assembly implementation\n     (most notably builds with Visual Studio), leaving them vulnerable to\n     timing side-channel attacks. There is now an intrinsics-based AES-NI\n     implementation as a fallback for when the assembly one cannot be used.\n\nBugfix\n   * Fix possible integer overflow in mbedtls_timing_hardclock(), which\n     could cause a crash in programs/test/benchmark.\n   * Fix IAR compiler warnings. Fixes #6924.\n   * Fix a bug in the build where directory names containing spaces were\n     causing generate_errors.pl to error out resulting in a build failure.\n     Fixes issue #6879.\n   * In TLS 1.3, when using a ticket for session resumption, tweak its age\n     calculation on the client side. It prevents a server with more accurate\n     ticket timestamps (typically timestamps in milliseconds) compared to the\n     Mbed TLS ticket timestamps (in seconds) to compute a ticket age smaller\n     than the age computed and transmitted by the client and thus potentially\n     reject the ticket. Fix #6623.\n   * Fix compile error where MBEDTLS_RSA_C and MBEDTLS_X509_CRT_WRITE_C are\n     defined, but MBEDTLS_PK_RSA_ALT_SUPPORT is not defined. Fixes #3174.\n   * List PSA_WANT_ALG_CCM_STAR_NO_TAG in psa/crypto_config.h so that it can\n     be toggled with config.py.\n   * The key derivation algorithm PSA_ALG_TLS12_ECJPAKE_TO_PMS cannot be\n     used on a shared secret from a key agreement since its input must be\n     an ECC public key. Reject this properly.\n   * mbedtls_x509write_crt_set_serial() now explicitly rejects serial numbers\n     whose binary representation is longer than 20 bytes. This was already\n     forbidden by the standard (RFC5280 - section 4.1.2.2) and now it's being\n     enforced also at code level.\n   * Fix potential undefined behavior in mbedtls_mpi_sub_abs().  Reported by\n     Pascal Cuoq using TrustInSoft Analyzer in #6701; observed independently by\n     Aaron Ucko under Valgrind.\n   * Fix behavior of certain sample programs which could, when run with no\n     arguments, access uninitialized memory in some cases. Fixes #6700 (which\n     was found by TrustInSoft Analyzer during REDOCS'22) and #1120.\n   * Fix parsing of X.509 SubjectAlternativeName extension. Previously,\n     malformed alternative name components were not caught during initial\n     certificate parsing, but only on subsequent calls to\n     mbedtls_x509_parse_subject_alt_name(). Fixes #2838.\n   * Make the fields of mbedtls_pk_rsassa_pss_options public. This makes it\n     possible to verify RSA PSS signatures with the pk module, which was\n     inadvertently broken since Mbed TLS 3.0.\n   * Fix bug in conversion from OID to string in\n     mbedtls_oid_get_numeric_string(). OIDs such as 2.40.0.25 are now printed\n     correctly.\n   * Reject OIDs with overlong-encoded subidentifiers when converting\n     them to a string.\n   * Reject OIDs with subidentifier values exceeding UINT_MAX.  Such\n     subidentifiers can be valid, but Mbed TLS cannot currently handle them.\n   * Reject OIDs that have unterminated subidentifiers, or (equivalently)\n     have the most-significant bit set in their last byte.\n   * Silence warnings from clang -Wdocumentation about empty \\retval\n     descriptions, which started appearing with Clang 15. Fixes #6960.\n   * Fix the handling of renegotiation attempts in TLS 1.3. They are now\n     systematically rejected.\n   * Fix an unused-variable warning in TLS 1.3-only builds if\n     MBEDTLS_SSL_RENEGOTIATION was enabled. Fixes #6200.\n   * Fix undefined behavior in mbedtls_ssl_read() and mbedtls_ssl_write() if\n     len argument is 0 and buffer is NULL.\n   * Allow setting user and peer identifiers for EC J-PAKE operation\n     instead of role in PAKE PSA Crypto API as described in the specification.\n     This is a partial fix that allows only \"client\" and \"server\" identifiers.\n   * Fix a compilation error when PSA Crypto is built with support for\n     TLS12_PRF but not TLS12_PSK_TO_MS. Reported by joerchan in #7125.\n   * In the TLS 1.3 server, select the preferred client cipher suite, not the\n     least preferred. The selection error was introduced in Mbed TLS 3.3.0.\n   * Fix TLS 1.3 session resumption when the established pre-shared key is\n     384 bits long. That is the length of pre-shared keys created under a\n     session where the cipher suite is TLS_AES_256_GCM_SHA384.\n   * Fix an issue when compiling with MBEDTLS_SHA512_USE_A64_CRYPTO_IF_PRESENT\n     enabled, which required specifying compiler flags enabling SHA3 Crypto\n     Extensions, where some compilers would emit EOR3 instructions in other\n     modules, which would then fail if run on a CPU without the SHA3\n     extensions. Fixes #5758.\n\nChanges\n   * Install the .cmake files into CMAKE_INSTALL_LIBDIR/cmake/MbedTLS,\n     typically /usr/lib/cmake/MbedTLS.\n   * Mixed-endian systems are explicitly not supported any more.\n   * When MBEDTLS_USE_PSA_CRYPTO and MBEDTLS_ECDSA_DETERMINISTIC are both\n     defined, mbedtls_pk_sign() now use deterministic ECDSA for ECDSA\n     signatures. This aligns the behaviour with MBEDTLS_USE_PSA_CRYPTO to\n     the behaviour without it, where deterministic ECDSA was already used.\n   * Visual Studio: Rename the directory containing Visual Studio files from\n     visualc/VS2010 to visualc/VS2013 as we do not support building with versions\n     older than 2013. Update the solution file to specify VS2013 as a minimum.\n   * programs/x509/cert_write:\n     - now it accepts the serial number in 2 different formats: decimal and\n       hex. They cannot be used simultaneously\n     - \"serial\" is used for the decimal format and it's limted in size to\n       unsigned long long int\n     - \"serial_hex\" is used for the hex format; max length here is\n       MBEDTLS_X509_RFC5280_MAX_SERIAL_LEN*2\n   * The C code follows a new coding style. This is transparent for users but\n     affects contributors and maintainers of local patches. For more\n     information, see\n     https://mbed-tls.readthedocs.io/en/latest/kb/how-to/rewrite-branch-for-coding-style/\n   * Changed the default MBEDTLS_ECP_WINDOW_SIZE from 6 to 2.\n     As tested in issue 6790, the correlation between this define and\n     RSA decryption performance has changed lately due to security fixes.\n     To fix the performance degradation when using default values the\n     window was reduced from 6 to 2, a value that gives the best or close\n     to best results when tested on Cortex-M4 and Intel i7.\n   * When enabling MBEDTLS_SHA256_USE_A64_CRYPTO_* or\n     MBEDTLS_SHA512_USE_A64_CRYPTO_*, it is no longer necessary to specify\n     compiler target flags on the command line; the library now sets target\n     options within the appropriate modules.\n\n= Mbed TLS 3.3.0 branch released 2022-12-14\n\nDefault behavior changes\n   * Previously the macro MBEDTLS_SSL_DTLS_CONNECTION_ID implemented version 05\n     of the IETF draft, and was marked experimental and disabled by default.\n     It is now no longer experimental, and implements the final version from\n     RFC 9146, which is not interoperable with the draft-05 version.\n     If you need to communicate with peers that use earlier versions of\n     Mbed TLS, then you need to define MBEDTLS_SSL_DTLS_CONNECTION_ID_COMPAT\n     to 1, but then you won't be able to communicate with peers that use the\n     standard (non-draft) version.\n     If you need to interoperate with both classes of peers with the\n     same build of Mbed TLS, please let us know about your situation on the\n     mailing list or GitHub.\n\nRequirement changes\n   * When building with PSA drivers using generate_driver_wrappers.py, or\n     when building the library from the development branch rather than\n     from a release, the Python module jsonschema is now necessary, in\n     addition to jinja2. The official list of required Python modules is\n     maintained in scripts/basic.requirements.txt and may change again\n     in the future.\n\nNew deprecations\n   * Deprecate mbedtls_asn1_free_named_data().\n     Use mbedtls_asn1_free_named_data_list()\n     or mbedtls_asn1_free_named_data_list_shallow().\n\nFeatures\n   * Support rsa_pss_rsae_* signature algorithms in TLS 1.2.\n   * make: enable building unversioned shared library, with e.g.:\n     \"SHARED=1 SOEXT_TLS=so SOEXT_X509=so SOEXT_CRYPTO=so make lib\"\n     resulting in library names like \"libmbedtls.so\" rather than\n     \"libmbedcrypto.so.11\".\n   * Expose the EC J-PAKE functionality through the Draft PSA PAKE Crypto API.\n     Only the ECC primitive with secp256r1 curve and SHA-256 hash algorithm\n     are supported in this implementation.\n   * Some modules can now use PSA drivers for hashes, including with no\n     built-in implementation present, but only in some configurations.\n     - RSA OAEP and PSS (PKCS#1 v2.1), PKCS5, PKCS12 and EC J-PAKE now use\n       hashes from PSA when (and only when) MBEDTLS_MD_C is disabled.\n     - PEM parsing of encrypted files now uses MD-5 from PSA when (and only\n       when) MBEDTLS_MD5_C is disabled.\n     See the documentation of the corresponding macros in mbedtls_config.h for\n     details.\n     Note that some modules are not able to use hashes from PSA yet, including\n     the entropy module. As a consequence, for now the only way to build with\n     all hashes only provided by drivers (no built-in hash) is to use\n     MBEDTLS_PSA_CRYPTO_EXTERNAL_RNG.\n   * When MBEDTLS_USE_PSA_CRYPTO is enabled, X.509, TLS 1.2 and TLS 1.3 now\n     properly negotiate/accept hashes based on their availability in PSA.\n     As a consequence, they now work in configurations where the built-in\n     implementations of (some) hashes are excluded and those hashes are only\n     provided by PSA drivers. (See previous entry for limitation on RSA-PSS\n     though: that module only use hashes from PSA when MBEDTLS_MD_C is off).\n   * Add support for opaque keys as the private keys associated to certificates\n     for authentication in TLS 1.3.\n   * Add the LMS post-quantum-safe stateful-hash asymmetric signature scheme.\n     Signature verification is production-ready, but generation is for testing\n     purposes only. This currently only supports one parameter set\n     (LMS_SHA256_M32_H10), meaning that each private key can be used to sign\n     1024 messages. As such, it is not intended for use in TLS, but instead\n     for verification of assets transmitted over an insecure channel,\n     particularly firmware images.\n   * Add the LM-OTS post-quantum-safe one-time signature scheme, which is\n     required for LMS. This can be used independently, but each key can only\n     be used to sign one message so is impractical for most circumstances.\n   * Mbed TLS now supports TLS 1.3 key establishment via pre-shared keys.\n     The pre-shared keys can be provisioned externally or via the ticket\n     mechanism (session resumption).\n     The ticket mechanism is supported when the configuration option\n     MBEDTLS_SSL_SESSION_TICKETS is enabled.\n     New options MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_xxx_ENABLED\n     control the support for the three possible TLS 1.3 key exchange modes.\n   * cert_write: support for setting extended key usage attributes. A\n     corresponding new public API call has been added in the library,\n     mbedtls_x509write_crt_set_ext_key_usage().\n   * cert_write: support for writing certificate files in either PEM\n     or DER format.\n   * The PSA driver wrapper generator generate_driver_wrappers.py now\n     supports a subset of the driver description language, including\n     the following entry points: import_key, export_key, export_public_key,\n     get_builtin_key, copy_key.\n   * The new functions mbedtls_asn1_free_named_data_list() and\n     mbedtls_asn1_free_named_data_list_shallow() simplify the management\n     of memory in named data lists in X.509 structures.\n   * The TLS 1.2 EC J-PAKE key exchange can now use the PSA Crypto API.\n     Additional PSA key slots will be allocated in the process of such key\n     exchange for builds that enable MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED and\n     MBEDTLS_USE_PSA_CRYPTO.\n   * Add support for DTLS Connection ID as defined by RFC 9146, controlled by\n     MBEDTLS_SSL_DTLS_CONNECTION_ID (enabled by default) and configured with\n     mbedtls_ssl_set_cid().\n   * Add a driver dispatch layer for raw key agreement, enabling alternative\n     implementations of raw key agreement through the key_agreement driver\n     entry point. This entry point is specified in the proposed PSA driver\n     interface, but had not yet been implemented.\n   * Add an ad-hoc key derivation function handling EC J-PAKE to PMS\n     calculation that can be used to derive the session secret in TLS 1.2,\n     as described in draft-cragie-tls-ecjpake-01. This can be achieved by\n     using PSA_ALG_TLS12_ECJPAKE_TO_PMS as the key derivation algorithm.\n\nSecurity\n   * Fix potential heap buffer overread and overwrite in DTLS if\n     MBEDTLS_SSL_DTLS_CONNECTION_ID is enabled and\n     MBEDTLS_SSL_CID_IN_LEN_MAX > 2 * MBEDTLS_SSL_CID_OUT_LEN_MAX.\n   * Fix an issue where an adversary with access to precise enough information\n     about memory accesses (typically, an untrusted operating system attacking\n     a secure enclave) could recover an RSA private key after observing the\n     victim performing a single private-key operation if the window size used\n     for the exponentiation was 3 or smaller. Found and reported by Zili KOU,\n     Wenjian HE, Sharad Sinha, and Wei ZHANG. See \"Cache Side-channel Attacks\n     and Defenses of the Sliding Window Algorithm in TEEs\" - Design, Automation\n     and Test in Europe 2023.\n\nBugfix\n   * Refactor mbedtls_aes_context to support shallow-copying. Fixes #2147.\n   * Fix an issue with in-tree CMake builds in releases with GEN_FILES\n     turned off: if a shipped file was missing from the working directory,\n     it could be turned into a symbolic link to itself.\n   * Fix a long-standing build failure when building x86 PIC code with old\n     gcc (4.x). The code will be slower, but will compile. We do however\n     recommend upgrading to a more recent compiler instead. Fixes #1910.\n   * Fix support for little-endian Microblaze when MBEDTLS_HAVE_ASM is defined.\n     Contributed by Kazuyuki Kimura to fix #2020.\n   * Use double quotes to include private header file psa_crypto_cipher.h.\n     Fixes 'file not found with <angled> include' error\n     when building with Xcode.\n   * Fix handling of broken symlinks when loading certificates using\n     mbedtls_x509_crt_parse_path(). Instead of returning an error as soon as a\n     broken link is encountered, skip the broken link and continue parsing\n     other certificate files. Contributed by Eduardo Silva in #2602.\n   * Fix an interoperability failure between an Mbed TLS client with both\n     TLS 1.2 and TLS 1.3 support, and a TLS 1.2 server that supports\n     rsa_pss_rsae_* signature algorithms. This failed because Mbed TLS\n     advertised support for PSS in both TLS 1.2 and 1.3, but only\n     actually supported PSS in TLS 1.3.\n   * Fix a compilation error when using CMake with an IAR toolchain.\n     Fixes #5964.\n   * Fix a build error due to a missing prototype warning when\n     MBEDTLS_DEPRECATED_REMOVED is enabled.\n   * Fix mbedtls_ctr_drbg_free() on an initialized but unseeded context. When\n     MBEDTLS_AES_ALT is enabled, it could call mbedtls_aes_free() on an\n     uninitialized context.\n   * Fix a build issue on Windows using CMake where the source and build\n     directories could not be on different drives. Fixes #5751.\n   * Fix bugs and missing dependencies when building and testing\n     configurations with only one encryption type enabled in TLS 1.2.\n   * Provide the missing definition of mbedtls_setbuf() in some configurations\n     with MBEDTLS_PLATFORM_C disabled. Fixes #6118, #6196.\n   * Fix compilation errors when trying to build with\n     PSA drivers for AEAD (GCM, CCM, Chacha20-Poly1305).\n   * Fix memory leak in ssl_parse_certificate_request() caused by\n     mbedtls_x509_get_name() not freeing allocated objects in case of error.\n     Change mbedtls_x509_get_name() to clean up allocated objects on error.\n   * Fix build failure with MBEDTLS_RSA_C and MBEDTLS_PSA_CRYPTO_C but not\n     MBEDTLS_USE_PSA_CRYPTO or MBEDTLS_PK_WRITE_C. Fixes #6408.\n   * Fix build failure with MBEDTLS_RSA_C and MBEDTLS_PSA_CRYPTO_C but not\n     MBEDTLS_PK_PARSE_C. Fixes #6409.\n   * Fix ECDSA verification, where it was not always validating the\n     public key. This bug meant that it was possible to verify a\n     signature with an invalid public key, in some cases. Reported by\n     Guido Vranken using Cryptofuzz in #4420.\n   * Fix a possible null pointer dereference if a memory allocation fails\n     in TLS PRF code. Reported by Michael Madsen in #6516.\n   * Fix TLS 1.3 session resumption. Fixes #6488.\n   * Add a configuration check to exclude optional client authentication\n     in TLS 1.3 (where it is forbidden).\n   * Fix a bug in which mbedtls_x509_crt_info() would produce non-printable\n     bytes when parsing certificates containing a binary RFC 4108\n     HardwareModuleName as a Subject Alternative Name extension. Hardware\n     serial numbers are now rendered in hex format. Fixes #6262.\n   * Fix bug in error reporting in dh_genprime.c where upon failure,\n     the error code returned by mbedtls_mpi_write_file() is overwritten\n     and therefore not printed.\n   * In the bignum module, operations of the form (-A) - (+A) or (-A) - (-A)\n     with A > 0 created an unintended representation of the value 0 which was\n     not processed correctly by some bignum operations. Fix this. This had no\n     consequence on cryptography code, but might affect applications that call\n     bignum directly and use negative numbers.\n   * Fix a bug whereby the list of signature algorithms sent as part of\n     the TLS 1.2 server certificate request would get corrupted, meaning the\n     first algorithm would not get sent and an entry consisting of two random\n     bytes would be sent instead. Found by Serban Bejan and Dudek Sebastian.\n   * Fix undefined behavior (typically harmless in practice) of\n     mbedtls_mpi_add_mpi(), mbedtls_mpi_add_abs() and mbedtls_mpi_add_int()\n     when both operands are 0 and the left operand is represented with 0 limbs.\n   * Fix undefined behavior (typically harmless in practice) when some bignum\n     functions receive the most negative value of mbedtls_mpi_sint. Credit\n     to OSS-Fuzz. Fixes #6597.\n   * Fix undefined behavior (typically harmless in practice) in PSA ECB\n     encryption and decryption.\n   * Move some SSL-specific code out of libmbedcrypto where it had been placed\n     accidentally.\n   * Fix a build error when compiling the bignum module for some Arm platforms.\n     Fixes #6089, #6124, #6217.\n\nChanges\n   * Add the ability to query PSA_WANT_xxx macros to query_compile_time_config.\n   * Calling AEAD tag-specific functions for non-AEAD algorithms (which\n     should not be done - they are documented for use only by AES-GCM and\n     ChaCha20+Poly1305) now returns MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE\n     instead of success (0).\n\n= Mbed TLS 3.2.1 branch released 2022-07-12\n\nBugfix\n   *  Re-add missing generated file library/psa_crypto_driver_wrappers.c\n\n= Mbed TLS 3.2.0 branch released 2022-07-11\n\nDefault behavior changes\n   * mbedtls_cipher_set_iv will now fail with ChaCha20 and ChaCha20+Poly1305\n     for IV lengths other than 12. The library was silently overwriting this\n     length with 12, but did not inform the caller about it. Fixes #4301.\n\nRequirement changes\n   * The library will no longer compile out of the box on a platform without\n     setbuf(). If your platform does not have setbuf(), you can configure an\n     alternative function by enabling MBEDTLS_PLATFORM_SETBUF_ALT or\n     MBEDTLS_PLATFORM_SETBUF_MACRO.\n\nNew deprecations\n   * Deprecate mbedtls_ssl_conf_max_version() and\n     mbedtls_ssl_conf_min_version() in favor of\n     mbedtls_ssl_conf_max_tls_version() and\n     mbedtls_ssl_conf_min_tls_version().\n   * Deprecate mbedtls_cipher_setup_psa(). Use psa_aead_xxx() or\n     psa_cipher_xxx() directly instead.\n   * Secure element drivers enabled by MBEDTLS_PSA_CRYPTO_SE_C are deprecated.\n     This was intended as an experimental feature, but had not been explicitly\n     documented as such. Use opaque drivers with the interface enabled by\n     MBEDTLS_PSA_CRYPTO_DRIVERS instead.\n   * Deprecate mbedtls_ssl_conf_sig_hashes() in favor of the more generic\n     mbedtls_ssl_conf_sig_algs(). Signature algorithms for the TLS 1.2 and\n     TLS 1.3 handshake should now be configured with\n     mbedtls_ssl_conf_sig_algs().\n\nFeatures\n   * Add accessor to obtain ciphersuite id from ssl context.\n   * Add accessors to get members from ciphersuite info.\n   * Add mbedtls_ssl_ticket_rotate() for external ticket rotation.\n   * Add accessor to get the raw buffer pointer from a PEM context.\n   * The structures mbedtls_ssl_config and mbedtls_ssl_context now store\n     a piece of user data which is reserved for the application. The user\n     data can be either a pointer or an integer.\n   * Add an accessor function to get the configuration associated with\n     an SSL context.\n   * Add a function to access the protocol version from an SSL context in a\n     form that's easy to compare. Fixes #5407.\n   * Add function mbedtls_md_info_from_ctx() to recall the message digest\n     information that was used to set up a message digest context.\n   * Add ALPN support in TLS 1.3 clients.\n   * Add server certificate selection callback near end of Client Hello.\n     Register callback with mbedtls_ssl_conf_cert_cb().\n   * Provide mechanism to reset handshake cert list by calling\n     mbedtls_ssl_set_hs_own_cert() with NULL value for own_cert param.\n   * Add accessor mbedtls_ssl_get_hs_sni() to retrieve SNI from within\n     cert callback (mbedtls_ssl_conf_cert_cb()) during handshake.\n   * The X.509 module now uses PSA hash acceleration if present.\n   * Add support for psa crypto key derivation for elliptic curve\n     keys. Fixes #3260.\n   * Add function mbedtls_timing_get_final_delay() to access the private\n     final delay field in an mbedtls_timing_delay_context, as requested in\n     #5183.\n    * Add mbedtls_pk_sign_ext() which allows generating RSA-PSS signatures when\n      PSA Crypto is enabled.\n   * Add function mbedtls_ecp_export() to export ECP key pair parameters.\n     Fixes #4838.\n   * Add function mbedtls_ssl_is_handshake_over() to enable querying if the SSL\n     Handshake has completed or not, and thus whether to continue calling\n     mbedtls_ssl_handshake_step(), requested in #4383.\n   * Add the function mbedtls_ssl_get_own_cid() to access our own connection id\n     within mbedtls_ssl_context, as requested in #5184.\n   * Introduce mbedtls_ssl_hs_cb_t typedef for use with\n     mbedtls_ssl_conf_cert_cb() and perhaps future callbacks\n     during TLS handshake.\n   * Add functions mbedtls_ssl_conf_max_tls_version() and\n     mbedtls_ssl_conf_min_tls_version() that use a single value to specify\n     the protocol version.\n    * Extend the existing PSA_ALG_TLS12_PSK_TO_MS() algorithm to support\n      mixed-PSK. Add an optional input PSA_KEY_DERIVATION_INPUT_OTHER_SECRET\n      holding the other secret.\n   * When MBEDTLS_PSA_CRYPTO_CONFIG is enabled, you may list the PSA crypto\n     feature requirements in the file named by the new macro\n     MBEDTLS_PSA_CRYPTO_CONFIG_FILE instead of the default psa/crypto_config.h.\n     Furthermore you may name an additional file to include after the main\n     file with the macro MBEDTLS_PSA_CRYPTO_USER_CONFIG_FILE.\n   * Add the function mbedtls_x509_crt_has_ext_type() to access the ext types\n     field within mbedtls_x509_crt context, as requested in #5585.\n   * Add HKDF-Expand and HKDF-Extract as separate algorithms in the PSA API.\n   * Add support for the ARMv8 SHA-2 acceleration instructions when building\n     for Aarch64.\n   * Add support for authentication of TLS 1.3 clients by TLS 1.3 servers.\n   * Add support for server HelloRetryRequest message. The TLS 1.3 client is\n     now capable of negotiating another shared secret if the one sent in its\n     first ClientHello was not suitable to the server.\n   * Add support for client-side TLS version negotiation. If both TLS 1.2 and\n     TLS 1.3 protocols are enabled in the build of Mbed TLS, the TLS client now\n     negotiates TLS 1.3 or TLS 1.2 with TLS servers.\n   * Enable building of Mbed TLS with TLS 1.3 protocol support but without TLS\n     1.2 protocol support.\n   * Mbed TLS provides an implementation of a TLS 1.3 server (ephemeral key\n     establishment only). See docs/architecture/tls13-support.md for a\n     description of the support. The MBEDTLS_SSL_PROTO_TLS1_3 and\n     MBEDTLS_SSL_SRV_C configuration options control this.\n   * Add accessors to configure DN hints for certificate request:\n     mbedtls_ssl_conf_dn_hints() and mbedtls_ssl_set_hs_dn_hints()\n   * The configuration option MBEDTLS_USE_PSA_CRYPTO, which previously\n     affected only a limited subset of crypto operations in TLS, X.509 and PK,\n     now causes most of them to be done using PSA Crypto; see\n     docs/use-psa-crypto.md for the list of exceptions.\n   * The function mbedtls_pk_setup_opaque() now supports RSA key pairs as well.\n     Opaque keys can now be used everywhere a private key is expected in the\n     TLS and X.509 modules.\n   * Opaque pre-shared keys for TLS, provisioned with\n     mbedtls_ssl_conf_psk_opaque() or mbedtls_ssl_set_hs_psk_opaque(), which\n     previously only worked for \"pure\" PSK key exchange, now can also be used\n     for the \"mixed\" PSK key exchanges as well: ECDHE-PSK, DHE-PSK, RSA-PSK.\n   * cmake now detects if it is being built as a sub-project, and in that case\n     disables the target export/installation and package configuration.\n   * Make USE_PSA_CRYPTO compatible with KEY_ID_ENCODES_OWNER. Fixes #5259.\n   * Add example programs cipher_aead_demo.c, md_hmac_demo.c, aead_demo.c\n     and hmac_demo.c, which use PSA and the md/cipher interfaces side\n     by side in order to illustrate how the operation is performed in PSA.\n     Addresses #5208.\n\nSecurity\n   * Zeroize dynamically-allocated buffers used by the PSA Crypto key storage\n     module before freeing them. These buffers contain secret key material, and\n     could thus potentially leak the key through freed heap.\n   * Fix potential memory leak inside mbedtls_ssl_cache_set() with\n     an invalid session id length.\n   * Add the platform function mbedtls_setbuf() to allow buffering to be\n     disabled on stdio files, to stop secrets loaded from said files being\n     potentially left in memory after file operations. Reported by\n     Glenn Strauss.\n   * Fix a potential heap buffer overread in TLS 1.2 server-side when\n     MBEDTLS_USE_PSA_CRYPTO is enabled, an opaque key (created with\n     mbedtls_pk_setup_opaque()) is provisioned, and a static ECDH ciphersuite\n     is selected. This may result in an application crash or potentially an\n     information leak.\n   * Fix a buffer overread in DTLS ClientHello parsing in servers with\n     MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE enabled. An unauthenticated client\n     or a man-in-the-middle could cause a DTLS server to read up to 255 bytes\n     after the end of the SSL input buffer. The buffer overread only happens\n     when MBEDTLS_SSL_IN_CONTENT_LEN is less than a threshold that depends on\n     the exact configuration: 258 bytes if using mbedtls_ssl_cookie_check(),\n     and possibly up to 571 bytes with a custom cookie check function.\n     Reported by the Cybeats PSI Team.\n    * Fix a buffer overread in TLS 1.3 Certificate parsing. An unauthenticated\n      client or server could cause an MbedTLS server or client to overread up\n      to 64 kBytes of data and potentially overread the input buffer by that\n      amount minus the size of the input buffer. As overread data undergoes\n      various checks, the likelihood of reaching the boundary of the input\n      buffer is rather small but increases as its size\n      MBEDTLS_SSL_IN_CONTENT_LEN decreases.\n   * Fix check of certificate key usage in TLS 1.3. The usage of the public key\n     provided by a client or server certificate for authentication was not\n     checked properly when validating the certificate. This could cause a\n     client or server to be able to authenticate itself through a certificate\n     to an Mbed TLS TLS 1.3 server or client while it does not own a proper\n     certificate to do so.\n\nBugfix\n   * Declare or use PSA_WANT_ALG_CCM_STAR_NO_TAG following the general\n     pattern for PSA_WANT_xxx symbols. Previously you had to specify\n     PSA_WANT_ALG_CCM for PSA_ALG_CCM_STAR_NO_TAG.\n   * Fix a memory leak if mbedtls_ssl_config_defaults() is called twice.\n   * Fixed swap of client and server random bytes when exporting them alongside\n     TLS 1.3 handshake and application traffic secret.\n   * Fix several bugs (warnings, compiler and linker errors, test failures)\n     in reduced configurations when MBEDTLS_USE_PSA_CRYPTO is enabled.\n   * Fix a bug in (D)TLS curve negotiation: when MBEDTLS_USE_PSA_CRYPTO was\n     enabled and an ECDHE-ECDSA or ECDHE-RSA key exchange was used, the\n     client would fail to check that the curve selected by the server for\n     ECDHE was indeed one that was offered. As a result, the client would\n     accept any curve that it supported, even if that curve was not allowed\n     according to its configuration. Fixes #5291.\n   * The TLS 1.3 implementation is now compatible with the\n     MBEDTLS_USE_PSA_CRYPTO configuration option.\n   * Fix unit tests that used 0 as the file UID. This failed on some\n     implementations of PSA ITS. Fixes #3838.\n   * Fix mbedtls_ssl_get_version() not reporting TLSv1.3. Fixes #5406.\n   * Fix API violation in mbedtls_md_process() test by adding a call to\n     mbedtls_md_starts(). Fixes #2227.\n   * Fix compile errors when MBEDTLS_HAVE_TIME is not defined. Add tests\n     to catch bad uses of time.h.\n   * Fix a race condition in out-of-source builds with CMake when generated data\n     files are already present. Fixes #5374.\n   * Fix the library search path when building a shared library with CMake\n     on Windows.\n   * Fix bug in the alert sending function mbedtls_ssl_send_alert_message()\n     potentially leading to corrupted alert messages being sent in case\n     the function needs to be re-called after initially returning\n     MBEDTLS_SSL_WANT_WRITE. Fixes #1916.\n   * In configurations with MBEDTLS_SSL_DTLS_CONNECTION_ID enabled but not\n     MBEDTLS_DEBUG_C, DTLS handshakes using CID would crash due to a null\n     pointer dereference. Fix this. Fixes #3998.\n     The fix was released, but not announced, in Mbed TLS 3.1.0.\n   * Fix incorrect documentation of mbedtls_x509_crt_profile. The previous\n     documentation stated that the `allowed_pks` field applies to signatures\n     only, but in fact it does apply to the public key type of the end entity\n     certificate, too. Fixes #1992.\n   * Fix undefined behavior in mbedtls_asn1_find_named_data(), where val is\n     not NULL and val_len is zero.\n   * Fix compilation error with mingw32. Fixed by Cameron Cawley in #4211.\n   * Fix compilation error when using C++ Builder on Windows. Reported by\n     Miroslav Mastny in #4015.\n   * psa_raw_key_agreement() now returns PSA_ERROR_BUFFER_TOO_SMALL when\n     applicable. Fixes #5735.\n   * Fix a bug in the x25519 example program where the removal of\n     MBEDTLS_ECDH_LEGACY_CONTEXT caused the program not to run. Fixes #4901 and\n     #3191.\n   * Fix a TLS 1.3 handshake failure when the peer Finished message has not\n     been received yet when we first try to fetch it.\n   * Encode X.509 dates before 1/1/2000 as UTCTime rather than\n     GeneralizedTime. Fixes #5465.\n   * Add mbedtls_x509_dn_get_next function to return the next relative DN in\n     an X509 name, to allow walking the name list. Fixes #5431.\n    * Fix order value of curve x448.\n   * Fix string representation of DNs when outputting values containing commas\n     and other special characters, conforming to RFC 1779. Fixes #769.\n   * Silence a warning from GCC 12 in the selftest program. Fixes #5974.\n   * Fix check_config.h to check that we have MBEDTLS_SSL_KEEP_PEER_CERTIFICATE\n     when MBEDTLS_SSL_PROTO_TLS1_3 is specified, and make this and other\n     dependencies explicit in the documentation. Fixes #5610.\n   * Fix mbedtls_asn1_write_mpi() writing an incorrect encoding of 0.\n   * Fix a TLS 1.3 handshake failure when the first attempt to send the client\n     Finished message on the network cannot be satisfied. Fixes #5499.\n   * Fix resource leaks in mbedtls_pk_parse_public_key() in low\n     memory conditions.\n   * Fix server connection identifier setting for outgoing encrypted records\n     on DTLS 1.2 session resumption. After DTLS 1.2 session resumption with\n     connection identifier, the Mbed TLS client now properly sends the server\n     connection identifier in encrypted record headers. Fix #5872.\n   * Fix a null pointer dereference when performing some operations on zero\n     represented with 0 limbs (specifically mbedtls_mpi_mod_int() dividing\n     by 2, and mbedtls_mpi_write_string() in base 2).\n   * Fix record sizes larger than 16384 being sometimes accepted despite being\n     non-compliant. This could not lead to a buffer overflow. In particular,\n     application data size was already checked correctly.\n   * Fix MBEDTLS_SVC_KEY_ID_GET_KEY_ID() and MBEDTLS_SVC_KEY_ID_GET_OWNER_ID()\n     which have been broken, resulting in compilation errors, since Mbed TLS\n     3.0.\n   * Ensure that TLS 1.2 ciphersuite/certificate and key selection takes into\n     account not just the type of the key (RSA vs EC) but also what it can\n     actually do. Resolves #5831.\n   * Fix CMake windows host detection, especially when cross compiling.\n   * Fix an error in make where the absence of a generated file caused\n     make to break on a clean checkout. Fixes #5340.\n   * Work around an MSVC ARM64 compiler bug causing incorrect behaviour\n     in mbedtls_mpi_exp_mod(). Reported by Tautvydas Žilys in #5467.\n   * Removed the prompt to exit from all windows build programs, which was causing\n     issues in CI/CD environments.\n\nChanges\n   * The file library/psa_crypto_driver_wrappers.c is now generated\n     from a template. In the future, the generation will support\n     driver descriptions. For the time being, to customize this file,\n     see docs/proposed/psa-driver-wrappers-codegen-migration-guide.md\n   * Return PSA_ERROR_INVALID_ARGUMENT if the algorithm passed to one-shot\n     AEAD functions is not an AEAD algorithm. This aligns them with the\n     multipart functions, and the PSA Crypto API 1.1 specification.\n   * In mbedtls_pk_parse_key(), if no password is provided, don't allocate a\n     temporary variable on the heap. Suggested by Sergey Kanatov in #5304.\n   * Assume source files are in UTF-8 when using MSVC with CMake.\n   * Fix runtime library install location when building with CMake and MinGW.\n     DLLs are now installed in the bin directory instead of lib.\n   * cmake: Use GnuInstallDirs to customize install directories\n     Replace custom LIB_INSTALL_DIR variable with standard CMAKE_INSTALL_LIBDIR\n     variable. For backward compatibility, set CMAKE_INSTALL_LIBDIR if\n     LIB_INSTALL_DIR is set.\n   * Add a CMake option that enables static linking of the runtime library\n     in Microsoft Visual C++ compiler. Contributed by Microplankton.\n   * In CMake builds, add aliases for libraries so that the normal MbedTLS::*\n     targets work when MbedTLS is built as a subdirectory. This allows the\n     use of FetchContent, as requested in #5688.\n\n= mbed TLS 3.1.0 branch released 2021-12-17\n\nAPI changes\n   * New error code for GCM: MBEDTLS_ERR_GCM_BUFFER_TOO_SMALL.\n     Alternative GCM implementations are expected to verify\n     the length of the provided output buffers and to return the\n     MBEDTLS_ERR_GCM_BUFFER_TOO_SMALL in case the buffer length is too small.\n   * You can configure groups for a TLS key exchange with the new function\n     mbedtls_ssl_conf_groups(). It extends mbedtls_ssl_conf_curves().\n   * Declare a number of structure fields as public: the fields of\n     mbedtls_ecp_curve_info, the fields describing the result of ASN.1 and\n     X.509 parsing, and finally the field fd of mbedtls_net_context on\n     POSIX/Unix-like platforms.\n\nRequirement changes\n   * Sign-magnitude and one's complement representations for signed integers are\n     not supported. Two's complement is the only supported representation.\n\nNew deprecations\n   * Deprecate mbedtls_ssl_conf_curves() in favor of the more generic\n     mbedtls_ssl_conf_groups().\n\nRemovals\n   * Remove the partial support for running unit tests via Greentea on Mbed OS,\n     which had been unmaintained since 2018.\n\nFeatures\n   * Enable support for Curve448 via the PSA API. Contributed by\n     Archana Madhavan in #4626. Fixes #3399 and #4249.\n   * The identifier of the CID TLS extension can be configured by defining\n     MBEDTLS_TLS_EXT_CID at compile time.\n   * Implement the PSA multipart AEAD interface, currently supporting\n     ChaChaPoly and GCM.\n   * Warn if errors from certain functions are ignored. This is currently\n     supported on GCC-like compilers and on MSVC and can be configured through\n     the macro MBEDTLS_CHECK_RETURN. The warnings are always enabled\n     (where supported) for critical functions where ignoring the return\n     value is almost always a bug. Enable the new configuration option\n     MBEDTLS_CHECK_RETURN_WARNING to get warnings for other functions. This\n     is currently implemented in the AES, DES and md modules, and will be\n     extended to other modules in the future.\n   * Add missing PSA macros declared by PSA Crypto API 1.0.0:\n     PSA_ALG_IS_SIGN_HASH, PSA_ALG_NONE, PSA_HASH_BLOCK_LENGTH, PSA_KEY_ID_NULL.\n   * Add support for CCM*-no-tag cipher to the PSA.\n     Currently only 13-byte long IV's are supported.\n     For decryption a minimum of 16-byte long input is expected.\n     These restrictions may be subject to change.\n   * Add new API mbedtls_ct_memcmp for constant time buffer comparison.\n   * Add functions to get the IV and block size from cipher_info structs.\n   * Add functions to check if a cipher supports variable IV or key size.\n   * Add the internal implementation of and support for CCM to the PSA multipart\n     AEAD interface.\n   * Mbed TLS provides a minimum viable implementation of the TLS 1.3\n     protocol. See docs/architecture/tls13-support.md for the definition of\n     the TLS 1.3 Minimum Viable Product (MVP). The MBEDTLS_SSL_PROTO_TLS1_3\n     configuration option controls the enablement of the support. The APIs\n     mbedtls_ssl_conf_min_version() and mbedtls_ssl_conf_max_version() allow\n     to select the 1.3 version of the protocol to establish a TLS connection.\n   * Add PSA API definition for ARIA.\n\nSecurity\n   * Zeroize several intermediate variables used to calculate the expected\n     value when verifying a MAC or AEAD tag. This hardens the library in\n     case the value leaks through a memory disclosure vulnerability. For\n     example, a memory disclosure vulnerability could have allowed a\n     man-in-the-middle to inject fake ciphertext into a DTLS connection.\n   * In psa_aead_generate_nonce(), do not read back from the output buffer.\n     This fixes a potential policy bypass or decryption oracle vulnerability\n     if the output buffer is in memory that is shared with an untrusted\n     application.\n   * In psa_cipher_generate_iv() and psa_cipher_encrypt(), do not read back\n     from the output buffer. This fixes a potential policy bypass or decryption\n     oracle vulnerability if the output buffer is in memory that is shared with\n     an untrusted application.\n   * Fix a double-free that happened after mbedtls_ssl_set_session() or\n     mbedtls_ssl_get_session() failed with MBEDTLS_ERR_SSL_ALLOC_FAILED\n     (out of memory). After that, calling mbedtls_ssl_session_free()\n     and mbedtls_ssl_free() would cause an internal session buffer to\n     be free()'d twice.\n\nBugfix\n   * Stop using reserved identifiers as local variables. Fixes #4630.\n   * The GNU makefiles invoke python3 in preference to python except on Windows.\n     The check was accidentally not performed when cross-compiling for Windows\n     on Linux. Fix this. Fixes #4774.\n   * Prevent divide by zero if either of PSA_CIPHER_ENCRYPT_OUTPUT_SIZE() or\n     PSA_CIPHER_UPDATE_OUTPUT_SIZE() were called using an asymmetric key type.\n   * Fix a parameter set but unused in psa_crypto_cipher.c. Fixes #4935.\n   * Don't use the obsolete header path sys/fcntl.h in unit tests.\n     These header files cause compilation errors in musl.\n     Fixes #4969.\n   * Fix missing constraints on x86_64 and aarch64 assembly code\n     for bignum multiplication that broke some bignum operations with\n     (at least) Clang 12.\n     Fixes #4116, #4786, #4917, #4962.\n   * Fix mbedtls_cipher_crypt: AES-ECB when MBEDTLS_USE_PSA_CRYPTO is enabled.\n   * Failures of alternative implementations of AES or DES single-block\n     functions enabled with MBEDTLS_AES_ENCRYPT_ALT, MBEDTLS_AES_DECRYPT_ALT,\n     MBEDTLS_DES_CRYPT_ECB_ALT or MBEDTLS_DES3_CRYPT_ECB_ALT were ignored.\n     This does not concern the implementation provided with Mbed TLS,\n     where this function cannot fail, or full-module replacements with\n     MBEDTLS_AES_ALT or MBEDTLS_DES_ALT. Reported by Armelle Duboc in #1092.\n   * Some failures of HMAC operations were ignored. These failures could only\n     happen with an alternative implementation of the underlying hash module.\n   * Fix the error returned by psa_generate_key() for a public key. Fixes #4551.\n   * Fix compile-time or run-time errors in PSA\n     AEAD functions when ChachaPoly is disabled. Fixes #5065.\n   * Remove PSA'a AEAD finish/verify output buffer limitation for GCM.\n     The requirement of minimum 15 bytes for output buffer in\n     psa_aead_finish() and psa_aead_verify() does not apply to the built-in\n     implementation of GCM.\n   * Move GCM's update output buffer length verification from PSA AEAD to\n     the built-in implementation of the GCM.\n     The requirement for output buffer size to be equal or greater then\n     input buffer size is valid only for the built-in implementation of GCM.\n     Alternative GCM implementations can process whole blocks only.\n   * Fix the build of sample programs when neither MBEDTLS_ERROR_C nor\n     MBEDTLS_ERROR_STRERROR_DUMMY is enabled.\n   * Fix PSA_ALG_RSA_PSS verification accepting an arbitrary salt length.\n     This algorithm now accepts only the same salt length for verification\n     that it produces when signing, as documented. Use the new algorithm\n     PSA_ALG_RSA_PSS_ANY_SALT to accept any salt length. Fixes #4946.\n   * The existing predicate macro name PSA_ALG_IS_HASH_AND_SIGN is now reserved\n     for algorithm values that fully encode the hashing step, as per the PSA\n     Crypto API specification. This excludes PSA_ALG_RSA_PKCS1V15_SIGN_RAW and\n     PSA_ALG_ECDSA_ANY. The new predicate macro PSA_ALG_IS_SIGN_HASH covers\n     all algorithms that can be used with psa_{sign,verify}_hash(), including\n     these two.\n   * Fix issue in Makefile on Linux with SHARED=1, that caused shared libraries\n     not to list other shared libraries they need.\n   * Fix a bug in mbedtls_gcm_starts() when the bit length of the iv\n     exceeds 2^32. Fixes #4884.\n   * Fix an uninitialized variable warning in test_suite_ssl.function with GCC\n     version 11.\n   * Fix the build when no SHA2 module is included. Fixes #4930.\n   * Fix the build when only the bignum module is included. Fixes #4929.\n   * Fix a potential invalid pointer dereference and infinite loop bugs in\n     pkcs12 functions when the password is empty. Fix the documentation to\n     better describe the inputs to these functions and their possible values.\n     Fixes #5136.\n   * The key usage flags PSA_KEY_USAGE_SIGN_MESSAGE now allows the MAC\n     operations psa_mac_compute() and psa_mac_sign_setup().\n   * The key usage flags PSA_KEY_USAGE_VERIFY_MESSAGE now allows the MAC\n     operations psa_mac_verify() and psa_mac_verify_setup().\n\nChanges\n    * Explicitly mark the fields mbedtls_ssl_session.exported and\n      mbedtls_ssl_config.respect_cli_pref as private. This was an\n      oversight during the run-up to the release of Mbed TLS 3.0.\n      The fields were never intended to be public.\n   * Implement multi-part CCM API.\n     The multi-part functions: mbedtls_ccm_starts(), mbedtls_ccm_set_lengths(),\n     mbedtls_ccm_update_ad(), mbedtls_ccm_update(), mbedtls_ccm_finish()\n     were introduced in mbedTLS 3.0 release, however their implementation was\n     postponed until now.\n     Implemented functions support chunked data input for both CCM and CCM*\n     algorithms.\n   * Remove MBEDTLS_SSL_EXPORT_KEYS, making it always on and increasing the\n     code size by about 80B on an M0 build. This option only gated an ability\n     to set a callback, but was deemed unnecessary as it was yet another define\n     to remember when writing tests, or test configurations. Fixes #4653.\n   * Improve the performance of base64 constant-flow code. The result is still\n     slower than the original non-constant-flow implementation, but much faster\n     than the previous constant-flow implementation. Fixes #4814.\n   * Ignore plaintext/ciphertext lengths for CCM*-no-tag operations.\n     For CCM* encryption/decryption without authentication, input\n     length will be ignored.\n   * Indicate in the error returned if the nonce length used with\n     ChaCha20-Poly1305 is invalid, and not just unsupported.\n   * The mbedcrypto library includes a new source code module constant_time.c,\n     containing various functions meant to resist timing side channel attacks.\n     This module does not have a separate configuration option, and functions\n     from this module will be included in the build as required. Currently\n     most of the interface of this module is private and may change at any\n     time.\n   * The generated configuration-independent files are now automatically\n     generated by the CMake build system on Unix-like systems. This is not\n     yet supported when cross-compiling.\n\n= Mbed TLS 3.0.0 branch released 2021-07-07\n\nAPI changes\n   * Remove HAVEGE module.\n     The design of HAVEGE makes it unsuitable for microcontrollers. Platforms\n     with a more complex CPU usually have an operating system interface that\n     provides better randomness. Instead of HAVEGE, declare OS or hardware RNG\n     interfaces with mbedtls_entropy_add_source() and/or use an entropy seed\n     file created securely during device provisioning. See\n     https://mbed-tls.readthedocs.io/en/latest/kb/how-to/add-entropy-sources-to-entropy-pool/ for\n     more information.\n   * Add missing const attributes to API functions.\n   * Remove helpers for the transition from Mbed TLS 1.3 to Mbed TLS 2.0: the\n     header compat-1.3.h and the script rename.pl.\n   * Remove certs module from the API.\n     Transfer keys and certificates embedded in the library to the test\n     component. This contributes to minimizing library API and discourages\n     users from using unsafe keys in production.\n   * Move alt helpers and definitions.\n     Various helpers and definitions available for use in alt implementations\n     have been moved out of the include/ directory and into the library/\n     directory. The files concerned are ecp_internal.h and rsa_internal.h\n     which have also been renamed to ecp_internal_alt.h and rsa_alt_helpers.h\n     respectively.\n   * Move internal headers.\n     Header files that were only meant for the library's internal use and\n     were not meant to be used in application code have been moved out of\n     the include/ directory. The headers concerned are bn_mul.h, aesni.h,\n     padlock.h, entropy_poll.h and *_internal.h.\n   * Drop support for parsing SSLv2 ClientHello\n     (MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO).\n   * Drop support for SSLv3 (MBEDTLS_SSL_PROTO_SSL3).\n   * Drop support for TLS record-level compression (MBEDTLS_ZLIB_SUPPORT).\n   * Drop support for RC4 TLS ciphersuites.\n   * Drop support for single-DES ciphersuites.\n   * Drop support for MBEDTLS_SSL_HW_RECORD_ACCEL.\n   * Update AEAD output size macros to bring them in line with the PSA Crypto\n     API version 1.0 spec. This version of the spec parameterizes them on the\n     key type used, as well as the key bit-size in the case of\n     PSA_AEAD_TAG_LENGTH.\n   * Add configuration option MBEDTLS_X509_REMOVE_INFO which\n     removes the mbedtls_x509_*_info(), mbedtls_debug_print_crt()\n     as well as other functions and constants only used by\n     those functions. This reduces the code footprint by\n     several kB.\n   * Remove SSL error codes `MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED`\n     and `MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH` which are never\n     returned from the public SSL API.\n   * Remove `MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE` and return\n     `MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL` instead.\n   * The output parameter of mbedtls_sha512_finish, mbedtls_sha512,\n     mbedtls_sha256_finish and mbedtls_sha256 now has a pointer type\n     rather than array type. This removes spurious warnings in some compilers\n     when outputting a SHA-384 or SHA-224 hash into a buffer of exactly\n     the hash size.\n   * Remove the MBEDTLS_TEST_NULL_ENTROPY config option. Fixes #4388.\n   * The interface of the GCM module has changed to remove restrictions on\n     how the input to multipart operations is broken down. mbedtls_gcm_finish()\n     now takes extra output parameters for the last partial output block.\n     mbedtls_gcm_update() now takes extra parameters for the output length.\n     The software implementation always produces the full output at each\n     call to mbedtls_gcm_update(), but alternative implementations activated\n     by MBEDTLS_GCM_ALT may delay partial blocks to the next call to\n     mbedtls_gcm_update() or mbedtls_gcm_finish(). Furthermore, applications\n     no longer pass the associated data to mbedtls_gcm_starts(), but to the\n     new function mbedtls_gcm_update_ad().\n     These changes are backward compatible for users of the cipher API.\n   * Replace MBEDTLS_SHA512_NO_SHA384 config option with MBEDTLS_SHA384_C.\n     This separates config option enabling the SHA384 algorithm from option\n     enabling the SHA512 algorithm. Fixes #4034.\n   * Introduce MBEDTLS_SHA224_C.\n     This separates config option enabling the SHA224 algorithm from option\n     enabling SHA256.\n   * The getter and setter API of the SSL session cache (used for\n     session-ID based session resumption) has changed to that of\n     a key-value store with keys being session IDs and values\n     being opaque instances of `mbedtls_ssl_session`.\n   * Remove the mode parameter from RSA operation functions. Signature and\n     decryption functions now always use the private key and verification and\n     encryption use the public key. Verification functions also no longer have\n     RNG parameters.\n   * Modify semantics of `mbedtls_ssl_conf_[opaque_]psk()`:\n     In Mbed TLS 2.X, the API prescribes that later calls overwrite\n     the effect of earlier calls. In Mbed TLS 3.0, calling\n     `mbedtls_ssl_conf_[opaque_]psk()` more than once will fail,\n     leaving the PSK that was configured first intact.\n     Support for more than one PSK may be added in 3.X.\n   * The function mbedtls_x509write_csr_set_extension() has an extra parameter\n     which allows to mark an extension as critical. Fixes #4055.\n   * For multi-part AEAD operations with the cipher module, calling\n     mbedtls_cipher_finish() is now mandatory. Previously the documentation\n     was unclear on this point, and this function happened to never do\n     anything with the currently implemented AEADs, so in practice it was\n     possible to skip calling it, which is no longer supported.\n   * The option MBEDTLS_ECP_FIXED_POINT_OPTIM use pre-computed comb tables\n     instead of computing tables in runtime. Thus, this option now increase\n     code size, and it does not increase RAM usage in runtime anymore.\n   * Remove the SSL APIs mbedtls_ssl_get_input_max_frag_len() and\n     mbedtls_ssl_get_output_max_frag_len(), and add a new API\n     mbedtls_ssl_get_max_in_record_payload(), complementing the existing\n     mbedtls_ssl_get_max_out_record_payload().\n     Uses of mbedtls_ssl_get_input_max_frag_len() and\n     mbedtls_ssl_get_input_max_frag_len() should be replaced by\n     mbedtls_ssl_get_max_in_record_payload() and\n     mbedtls_ssl_get_max_out_record_payload(), respectively.\n   * mbedtls_rsa_init() now always selects the PKCS#1v1.5 encoding for an RSA\n     key. To use an RSA key with PSS or OAEP, call mbedtls_rsa_set_padding()\n     after initializing the context. mbedtls_rsa_set_padding() now returns an\n     error if its parameters are invalid.\n   * Replace MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE by a runtime\n     configuration function mbedtls_ssl_conf_preference_order(). Fixes #4398.\n   * Instead of accessing the len field of a DHM context, which is no longer\n     supported, use the new function mbedtls_dhm_get_len() .\n   * In modules that implement cryptographic hash functions, many functions\n     mbedtls_xxx() now return int instead of void, and the corresponding\n     function mbedtls_xxx_ret() which was identical except for returning int\n     has been removed. This also concerns mbedtls_xxx_drbg_update(). See the\n     migration guide for more information. Fixes #4212.\n   * For all functions that take a random number generator (RNG) as a\n     parameter, this parameter is now mandatory (that is, NULL is not an\n     acceptable value). Functions which previously accepted NULL and now\n     reject it are: the X.509 CRT and CSR writing functions; the PK and RSA\n     sign and decrypt function; mbedtls_rsa_private(); the functions\n     in DHM and ECDH that compute the shared secret; the scalar multiplication\n     functions in ECP.\n   * The following functions now require an RNG parameter:\n     mbedtls_ecp_check_pub_priv(), mbedtls_pk_check_pair(),\n     mbedtls_pk_parse_key(), mbedtls_pk_parse_keyfile().\n   * mbedtls_ssl_conf_export_keys_ext_cb() and\n     mbedtls_ssl_conf_export_keys_cb() have been removed and\n     replaced by a new API mbedtls_ssl_set_export_keys_cb().\n     Raw keys and IVs are no longer passed to the callback.\n     Further, callbacks now receive an additional parameter\n     indicating the type of secret that's being exported,\n     paving the way for the larger number of secrets\n     in TLS 1.3. Finally, the key export callback and\n     context are now connection-specific.\n   * Signature functions in the RSA and PK modules now require the hash\n     length parameter to be the size of the hash input. For RSA signatures\n     other than raw PKCS#1 v1.5, this must match the output size of the\n     specified hash algorithm.\n   * The functions mbedtls_pk_sign(), mbedtls_pk_sign_restartable(),\n     mbedtls_ecdsa_write_signature() and\n     mbedtls_ecdsa_write_signature_restartable() now take an extra parameter\n     indicating the size of the output buffer for the signature.\n   * Implement one-shot cipher functions, psa_cipher_encrypt and\n     psa_cipher_decrypt, according to the PSA Crypto API 1.0.0\n     specification.\n   * Direct access to fields of structures declared in public headers is no\n     longer supported except for fields that are documented public. Use accessor\n     functions instead. For more information, see the migration guide entry\n     \"Most structure fields are now private\".\n   * mbedtls_ssl_get_session_pointer() has been removed, and\n     mbedtls_ssl_{set,get}_session() may now only be called once for any given\n     SSL context.\n\nDefault behavior changes\n   * Enable by default the functionalities which have no reason to be disabled.\n     They are: ARIA block cipher, CMAC mode, elliptic curve J-PAKE library and\n     Key Wrapping mode as defined in NIST SP 800-38F. Fixes #4036.\n   * Some default policies for X.509 certificate verification and TLS have\n     changed: curves and hashes weaker than 255 bits are no longer accepted\n     by default. The default order in TLS now favors faster curves over larger\n     curves.\n\nRequirement changes\n   * The library now uses the %zu format specifier with the printf() family of\n     functions, so requires a toolchain that supports it. This change does not\n     affect the maintained LTS branches, so when contributing changes please\n     bear this in mind and do not add them to backported code.\n   * If you build the development version of Mbed TLS, rather than an official\n     release, some configuration-independent files are now generated at build\n     time rather than checked into source control. This includes some library\n     source files as well as the Visual Studio solution. Perl, Python 3 and a\n     C compiler for the host platform are required. See “Generated source files\n     in the development branch” in README.md for more information.\n   * Refresh the minimum supported versions of tools to build the\n     library. CMake versions older than 3.10.2 and Python older\n     than 3.6 are no longer supported.\n\nRemovals\n   * Remove the MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_CERTIFICATES\n     compile-time option, which was off by default. Users should not trust\n     certificates signed with SHA-1 due to the known attacks against SHA-1.\n     If needed, SHA-1 certificates can still be verified by using a custom\n     verification profile.\n   * Removed deprecated things in psa/crypto_compat.h. Fixes #4284\n   * Removed deprecated functions from hashing modules. Fixes #4280.\n   * Remove PKCS#11 library wrapper. PKCS#11 has limited functionality,\n     lacks automated tests and has scarce documentation. Also, PSA Crypto\n     provides a more flexible private key management.\n     More details on PCKS#11 wrapper removal can be found in the mailing list\n     https://lists.trustedfirmware.org/pipermail/mbed-tls/2020-April/000024.html\n   * Remove deprecated error codes. Fix #4283\n   * Remove MBEDTLS_ENABLE_WEAK_CIPHERSUITES configuration option. Fixes #4416.\n   * Remove the MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_CERTIFICATES\n     compile-time option. This option has been inactive for a long time.\n     Please use the `lifetime` parameter of `mbedtls_ssl_ticket_setup()`\n     instead.\n   * Remove the following deprecated functions and constants of hex-encoded\n     primes based on RFC 5114 and RFC 3526 from library code and tests:\n     mbedtls_aes_encrypt(), mbedtls_aes_decrypt(), mbedtls_mpi_is_prime(),\n     mbedtls_cipher_auth_encrypt(), mbedtls_cipher_auth_decrypt(),\n     mbedtls_ctr_drbg_update(), mbedtls_hmac_drbg_update(),\n     mbedtls_ecdsa_write_signature_det(), mbedtls_ecdsa_sign_det(),\n     mbedtls_ssl_conf_dh_param(), mbedtls_ssl_get_max_frag_len(),\n     MBEDTLS_DHM_RFC5114_MODP_2048_P, MBEDTLS_DHM_RFC5114_MODP_2048_G,\n     MBEDTLS_DHM_RFC3526_MODP_2048_P, MBEDTLS_DHM_RFC3526_MODP_2048_G,\n     MBEDTLS_DHM_RFC3526_MODP_3072_P, MBEDTLS_DHM_RFC3526_MODP_3072_G,\n     MBEDTLS_DHM_RFC3526_MODP_4096_P, MBEDTLS_DHM_RFC3526_MODP_4096_G.\n     Remove the deprecated file: include/mbedtls/net.h. Fixes #4282.\n   * Remove MBEDTLS_SSL_MAX_CONTENT_LEN configuration option, since\n     MBEDTLS_SSL_IN_CONTENT_LEN and MBEDTLS_SSL_OUT_CONTENT_LEN replace\n     it. Fixes #4362.\n   * Remove the MBEDTLS_SSL_RECORD_CHECKING option and enable by default its\n     previous action. Fixes #4361.\n   * Remove support for TLS 1.0, TLS 1.1 and DTLS 1.0, as well as support for\n     CBC record splitting, fallback SCSV, and the ability to configure\n     ciphersuites per version, which are no longer relevant. This removes the\n     configuration options MBEDTLS_SSL_PROTO_TLS1,\n     MBEDTLS_SSL_PROTO_TLS1_1, MBEDTLS_SSL_CBC_RECORD_SPLITTING and\n     MBEDTLS_SSL_FALLBACK_SCSV as well as the functions\n     mbedtls_ssl_conf_cbc_record_splitting(),\n     mbedtls_ssl_get_key_exchange_md_ssl_tls(), mbedtls_ssl_conf_fallback(),\n     and mbedtls_ssl_conf_ciphersuites_for_version(). Fixes #4286.\n   * The RSA module no longer supports private-key operations with the public\n     key and vice versa.\n   * Remove the MBEDTLS_SSL_DTLS_BADMAC_LIMIT config.h option. Fixes #4403.\n   * Remove all the 3DES ciphersuites:\n     MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA,\n     MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA,\n     MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,\n     MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA,\n     MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,\n     MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,\n     MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA,\n     MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA,\n     MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA. Remove the\n     MBEDTLS_REMOVE_3DES_CIPHERSUITES option which is no longer relevant.\n     Fixes #4367.\n   * Remove the MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3 option and let the code\n     behave as if it was always disabled. Fixes #4386.\n   * Remove MBEDTLS_ECDH_LEGACY_CONTEXT config option since this was purely for\n     backward compatibility which is no longer supported. Addresses #4404.\n   * Remove the following macros: MBEDTLS_CHECK_PARAMS,\n     MBEDTLS_CHECK_PARAMS_ASSERT, MBEDTLS_PARAM_FAILED,\n     MBEDTLS_PARAM_FAILED_ALT. Fixes #4313.\n   * Remove the  MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION config.h\n     option. The mbedtls_x509_crt_parse_der_with_ext_cb() is the way to go for\n     migration path. Fixes #4378.\n   * Remove the MBEDTLS_X509_CHECK_KEY_USAGE and\n     MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE config.h options and let the code\n     behave as if they were always enabled. Fixes #4405.\n   * MBEDTLS_ECP_MAX_BITS is no longer a configuration option because it is\n     now determined automatically based on supported curves.\n   * Remove the following functions: mbedtls_timing_self_test(),\n     mbedtls_hardclock_poll(), mbedtls_timing_hardclock() and\n     mbedtls_set_alarm(). Fixes #4083.\n   * The configuration option MBEDTLS_ECP_NO_INTERNAL_RNG has been removed as\n     it no longer had any effect.\n   * Remove all support for MD2, MD4, RC4, Blowfish and XTEA. This removes the\n     corresponding modules and all their APIs and related configuration\n     options. Fixes #4084.\n   * Remove MBEDTLS_SSL_TRUNCATED_HMAC and also remove\n     MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT config option. Users are better served by\n     using a CCM-8 ciphersuite than a CBC ciphersuite with truncated HMAC.\n     See issue #4341 for more details.\n   * Remove the compile-time option\n     MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_KEY_EXCHANGE.\n\nFeatures\n   * Add mbedtls_rsa_rsassa_pss_sign_ext() function allowing to generate a\n     signature with a specific salt length. This function allows to validate\n     test cases provided in the NIST's CAVP test suite. Contributed by Cédric\n     Meuter in PR #3183.\n   * Added support for built-in driver keys through the PSA opaque crypto\n     driver interface. Refer to the documentation of\n     MBEDTLS_PSA_CRYPTO_BUILTIN_KEYS for more information.\n   * Implement psa_sign_message() and psa_verify_message().\n   * The multi-part GCM interface (mbedtls_gcm_update() or\n     mbedtls_cipher_update()) no longer requires the size of partial inputs to\n     be a multiple of 16.\n   * The multi-part GCM interface now supports chunked associated data through\n     multiple calls to mbedtls_gcm_update_ad().\n   * The new function mbedtls_mpi_random() generates a random value in a\n     given range uniformly.\n   * Alternative implementations of the AES, DHM, ECJPAKE, ECP, RSA and timing\n     modules had undocumented constraints on their context types. These\n     constraints have been relaxed.\n     See docs/architecture/alternative-implementations.md for the remaining\n     constraints.\n   * The new functions mbedtls_dhm_get_len() and mbedtls_dhm_get_bitlen()\n     query the size of the modulus in a Diffie-Hellman context.\n   * The new function mbedtls_dhm_get_value() copy a field out of a\n     Diffie-Hellman context.\n   * Use the new function mbedtls_ecjpake_set_point_format() to select the\n     point format for ECJPAKE instead of accessing the point_format field\n     directly, which is no longer supported.\n   * Implement psa_mac_compute() and psa_mac_verify() as defined in the\n     PSA Cryptograpy API 1.0.0 specification.\n\nSecurity\n   * Fix a bias in the generation of finite-field Diffie-Hellman-Merkle (DHM)\n     private keys and of blinding values for DHM and elliptic curves (ECP)\n     computations. Reported by FlorianF89 in #4245.\n   * Fix a potential side channel vulnerability in ECDSA ephemeral key generation.\n     An adversary who is capable of very precise timing measurements could\n     learn partial information about the leading bits of the nonce used for the\n     signature, allowing the recovery of the private key after observing a\n     large number of signature operations. This completes a partial fix in\n     Mbed TLS 2.20.0.\n   * Fix an issue where an adversary with access to precise enough information\n     about memory accesses (typically, an untrusted operating system attacking\n     a secure enclave) could recover an RSA private key after observing the\n     victim performing a single private-key operation. Found and reported by\n     Zili KOU, Wenjian HE, Sharad Sinha, and Wei ZHANG.\n   * Fix an issue where an adversary with access to precise enough timing\n     information (typically, a co-located process) could recover a Curve25519\n     or Curve448 static ECDH key after inputting a chosen public key and\n     observing the victim performing the corresponding private-key operation.\n     Found and reported by Leila Batina, Lukas Chmielewski, Björn Haase, Niels\n     Samwel and Peter Schwabe.\n\nBugfix\n   * Fix premature fopen() call in mbedtls_entropy_write_seed_file which may\n     lead to the seed file corruption in case if the path to the seed file is\n     equal to MBEDTLS_PLATFORM_STD_NV_SEED_FILE. Contributed by Victor\n     Krasnoshchok in #3616.\n   * PSA functions creating a key now return PSA_ERROR_INVALID_ARGUMENT rather\n     than PSA_ERROR_INVALID_HANDLE when the identifier specified for the key\n     to create is not valid, bringing them in line with version 1.0.0 of the\n     specification. Fix #4271.\n   * Add printf function attributes to mbedtls_debug_print_msg to ensure we\n     get printf format specifier warnings.\n   * PSA functions other than psa_open_key now return PSA_ERROR_INVALID_HANDLE\n     rather than PSA_ERROR_DOES_NOT_EXIST for an invalid handle, bringing them\n     in line with version 1.0.0 of the specification. Fix #4162.\n   * Fix a bug in ECDSA that would cause it to fail when the hash is all-bits\n     zero. Fixes #1792\n   * Fix some cases in the bignum module where the library constructed an\n     unintended representation of the value 0 which was not processed\n     correctly by some bignum operations. This could happen when\n     mbedtls_mpi_read_string() was called on \"-0\", or when\n     mbedtls_mpi_mul_mpi() and mbedtls_mpi_mul_int() was called with one of\n     the arguments being negative and the other being 0. Fixes #4643.\n   * Fix a compilation error when MBEDTLS_ECP_RANDOMIZE_MXZ_ALT is\n     defined. Fixes #4217.\n   * Fix an incorrect error code when parsing a PKCS#8 private key.\n   * In a TLS client, enforce the Diffie-Hellman minimum parameter size\n     set with mbedtls_ssl_conf_dhm_min_bitlen() precisely. Before, the\n     minimum size was rounded down to the nearest multiple of 8.\n   * In library/net_sockets.c, _POSIX_C_SOURCE and _XOPEN_SOURCE are\n     defined to specific values.  If the code is used in a context\n     where these are already defined, this can result in a compilation\n     error.  Instead, assume that if they are defined, the values will\n     be adequate to build Mbed TLS.\n   * With MBEDTLS_PSA_CRYPTO_C disabled, some functions were getting built\n     nonetheless, resulting in undefined reference errors when building a\n     shared library. Reported by Guillermo Garcia M. in #4411.\n   * The cipher suite TLS-RSA-WITH-CAMELLIA-256-GCM-SHA384 was not available\n     when SHA-1 was disabled and was offered when SHA-1 was enabled but SHA-384\n     was disabled. Fix the dependency. Fixes #4472.\n   * Do not offer SHA384 cipher suites when SHA-384 is disabled. Fixes #4499.\n   * Fix test suite code on platforms where int32_t is not int, such as\n     Arm Cortex-M. Fixes #4530.\n   * Fix some issues affecting MBEDTLS_ARIA_ALT implementations: a misplaced\n     directive in a header and a missing initialization in the self-test.\n   * Fix a missing initialization in the Camellia self-test, affecting\n     MBEDTLS_CAMELLIA_ALT implementations.\n   * Restore the ability to configure PSA via Mbed TLS options to support RSA\n     key pair operations but exclude RSA key generation. When MBEDTLS_GENPRIME\n     is not defined PSA will no longer attempt to use mbedtls_rsa_gen_key().\n     Fixes #4512.\n   * Fix a regression introduced in 2.24.0 which broke (D)TLS CBC ciphersuites\n     (when the encrypt-then-MAC extension is not in use) with some ALT\n     implementations of the underlying hash (SHA-1, SHA-256, SHA-384), causing\n     the affected side to wrongly reject valid messages. Fixes #4118.\n   * Remove outdated check-config.h check that prevented implementing the\n     timing module on Mbed OS. Fixes #4633.\n   * Fix PSA_ALG_TLS12_PRF and PSA_ALG_TLS12_PSK_TO_MS being too permissive\n     about missing inputs.\n   * Fix mbedtls_net_poll() and mbedtls_net_recv_timeout() often failing with\n     MBEDTLS_ERR_NET_POLL_FAILED on Windows. Fixes #4465.\n   * Fix a resource leak in a test suite with an alternative AES\n     implementation. Fixes #4176.\n   * Fix a crash in mbedtls_mpi_debug_mpi on a bignum having 0 limbs. This\n     could notably be triggered by setting the TLS debug level to 3 or above\n     and using a Montgomery curve for the key exchange. Reported by lhuang04\n     in #4578. Fixes #4608.\n   * psa_verify_hash() was relying on implementation-specific behavior of\n     mbedtls_rsa_rsassa_pss_verify() and was causing failures in some _ALT\n     implementations. This reliance is now removed. Fixes #3990.\n   * Disallow inputs of length different from the corresponding hash when\n     signing or verifying with PSA_ALG_RSA_PSS (The PSA Crypto API mandates\n     that PSA_ALG_RSA_PSS uses the same hash throughout the algorithm.)\n   * Fix a null pointer dereference when mbedtls_mpi_exp_mod() was called with\n     A=0 represented with 0 limbs. Up to and including Mbed TLS 2.26, this bug\n     could not be triggered by code that constructed A with one of the\n     mbedtls_mpi_read_xxx functions (including in particular TLS code) since\n     those always built an mpi object with at least one limb.\n     Credit to OSS-Fuzz. Fixes #4641.\n   * Fix mbedtls_mpi_gcd(G,A,B) when the value of B is zero. This had no\n     effect on Mbed TLS's internal use of mbedtls_mpi_gcd(), but may affect\n     applications that call mbedtls_mpi_gcd() directly. Fixes #4642.\n   * The PSA API no longer allows the creation or destruction of keys with a\n     read-only lifetime. The persistence level PSA_KEY_PERSISTENCE_READ_ONLY\n     can now only be used as intended, for keys that cannot be modified through\n     normal use of the API.\n   * When MBEDTLS_PSA_CRYPTO_SPM is enabled, crypto_spe.h was not included\n     in all the right places. Include it from crypto_platform.h, which is\n     the natural place. Fixes #4649.\n   * Fix which alert is sent in some cases to conform to the\n     applicable RFC: on an invalid Finished message value, an\n     invalid max_fragment_length extension, or an\n     unsupported extension used by the server.\n   * Correct (change from 12 to 13 bytes) the value of the macro describing the\n     maximum nonce length returned by psa_aead_generate_nonce().\n\nChanges\n   * Fix the setting of the read timeout in the DTLS sample programs.\n   * Add extra printf compiler warning flags to builds.\n   * Fix memsan build false positive in x509_crt.c with clang 11\n   * Alternative implementations of CMAC may now opt to not support 3DES as a\n     CMAC block cipher, and still pass the CMAC self test.\n   * Remove the AES sample application programs/aes/aescrypt2 which shows\n     bad cryptographic practice. Fix #1906.\n   * Remove configs/config-psa-crypto.h, which no longer had any intended\n     differences from the default configuration, but had accidentally diverged.\n   * When building the test suites with GNU make, invoke python3 or python, not\n     python2, which is no longer supported upstream.\n   * fix build failure on MinGW toolchain when __USE_MING_ANSI_STDIO is on.\n     When that flag is on, standard GNU C printf format specifiers\n     should be used.\n   * Replace MBEDTLS_SSL_CID_PADDING_GRANULARITY and\n     MBEDTLS_SSL_TLS1_3_PADDING_GRANULARITY with a new single unified option\n     MBEDTLS_SSL_CID_TLS1_3_PADDING_GRANULARITY. Fixes #4335.\n   * Reduce the default value of MBEDTLS_ECP_WINDOW_SIZE. This reduces RAM usage\n     during ECC operations at a negligible performance cost.\n   * mbedtls_mpi_read_binary(), mbedtls_mpi_read_binary_le() and\n     mbedtls_mpi_read_string() now construct an mbedtls_mpi object with 0 limbs\n     when their input has length 0. Note that this is an implementation detail\n     and can change at any time, so this change should be transparent, but it\n     may result in mbedtls_mpi_write_binary() or mbedtls_mpi_write_string()\n     now writing an empty string where it previously wrote one or more\n     zero digits when operating from values constructed with an mpi_read\n     function and some mpi operations.\n   * Add CMake package config generation for CMake projects consuming Mbed TLS.\n   * config.h has been split into build_info.h and mbedtls_config.h\n     build_info.h is intended to be included from C code directly, while\n     mbedtls_config.h is intended to be edited by end users wishing to\n     change the build configuration, and should generally only be included from\n     build_info.h.\n   * The handling of MBEDTLS_CONFIG_FILE has been moved into build_info.h.\n   * A config file version symbol, MBEDTLS_CONFIG_VERSION was introduced.\n     Defining it to a particular value will ensure that Mbed TLS interprets\n     the config file in a way that's compatible with the config file format\n     used by the Mbed TLS release whose MBEDTLS_VERSION_NUMBER has the same\n     value.\n     The only value supported by Mbed TLS 3.0.0 is 0x03000000.\n   * Various changes to which alert and/or error code may be returned\n   * during the TLS handshake.\n   * Implicitly add PSA_KEY_USAGE_SIGN_MESSAGE key usage policy flag when\n     PSA_KEY_USAGE_SIGN_HASH flag is set and PSA_KEY_USAGE_VERIFY_MESSAGE flag\n     when PSA_KEY_USAGE_VERIFY_HASH flag is set. This usage flag extension\n     is also applied when loading a key from storage.\n\n= mbed TLS 2.26.0 branch released 2021-03-08\n\nAPI changes\n   * Renamed the PSA Crypto API output buffer size macros to bring them in line\n     with version 1.0.0 of the specification.\n   * The API glue function mbedtls_ecc_group_of_psa() now takes the curve size\n     in bits rather than bytes, with an additional flag to indicate if the\n     size may have been rounded up to a whole number of bytes.\n   * Renamed the PSA Crypto API AEAD tag length macros to bring them in line\n     with version 1.0.0 of the specification.\n\nDefault behavior changes\n   * In mbedtls_rsa_context objects, the ver field was formerly documented\n     as always 0. It is now reserved for internal purposes and may take\n     different values.\n\nNew deprecations\n   * PSA_KEY_EXPORT_MAX_SIZE, PSA_HASH_SIZE, PSA_MAC_FINAL_SIZE,\n     PSA_BLOCK_CIPHER_BLOCK_SIZE, PSA_MAX_BLOCK_CIPHER_BLOCK_SIZE and\n     PSA_ALG_TLS12_PSK_TO_MS_MAX_PSK_LEN have been renamed, and the old names\n     deprecated.\n   * PSA_ALG_AEAD_WITH_DEFAULT_TAG_LENGTH and PSA_ALG_AEAD_WITH_TAG_LENGTH\n     have been renamed, and the old names deprecated.\n\nFeatures\n   * The PSA crypto subsystem can now use HMAC_DRBG instead of CTR_DRBG.\n     CTR_DRBG is used by default if it is available, but you can override\n     this choice by setting MBEDTLS_PSA_HMAC_DRBG_MD_TYPE at compile time.\n     Fix #3354.\n   * Automatic fallback to a software implementation of ECP when\n     MBEDTLS_ECP_xxx_ALT accelerator hooks are in use can now be turned off\n     through setting the new configuration flag MBEDTLS_ECP_NO_FALLBACK.\n   * The PSA crypto subsystem can now be configured to use less static RAM by\n     tweaking the setting for the maximum amount of keys simultaneously in RAM.\n     MBEDTLS_PSA_KEY_SLOT_COUNT sets the maximum number of volatile keys that\n     can exist simultaneously. It has a sensible default if not overridden.\n   * Partial implementation of the PSA crypto driver interface: Mbed TLS can\n     now use an external random generator instead of the library's own\n     entropy collection and DRBG code. Enable MBEDTLS_PSA_CRYPTO_EXTERNAL_RNG\n     and see the documentation of mbedtls_psa_external_get_random() for details.\n   * Applications using both mbedtls_xxx and psa_xxx functions (for example,\n     applications using TLS and MBEDTLS_USE_PSA_CRYPTO) can now use the PSA\n     random generator with mbedtls_xxx functions. See the documentation of\n     mbedtls_psa_get_random() for details.\n   * In the PSA API, the policy for a MAC or AEAD algorithm can specify a\n     minimum MAC or tag length thanks to the new wildcards\n     PSA_ALG_AT_LEAST_THIS_LENGTH_MAC and\n     PSA_ALG_AEAD_WITH_AT_LEAST_THIS_LENGTH_TAG.\n\nSecurity\n   * Fix a security reduction in CTR_DRBG when the initial seeding obtained a\n     nonce from entropy. Applications were affected if they called\n     mbedtls_ctr_drbg_set_nonce_len(), if they called\n     mbedtls_ctr_drbg_set_entropy_len() with a size that was 3/2 times the key\n     length, or when the entropy module uses SHA-256 and CTR_DRBG uses AES-256.\n     In such cases, a random nonce was necessary to achieve the advertised\n     security strength, but the code incorrectly used a constant instead of\n     entropy from the nonce.\n     Found by John Stroebel in #3819 and fixed in #3973.\n   * Fix a buffer overflow in mbedtls_mpi_sub_abs() when calculating\n     |A| - |B| where |B| is larger than |A| and has more limbs (so the\n     function should return MBEDTLS_ERR_MPI_NEGATIVE_VALUE). Only\n     applications calling mbedtls_mpi_sub_abs() directly are affected:\n     all calls inside the library were safe since this function is\n     only called with |A| >= |B|. Reported by Guido Vranken in #4042.\n   * Fix an errorneous estimation for an internal buffer in\n     mbedtls_pk_write_key_pem(). If MBEDTLS_MPI_MAX_SIZE is set to an odd\n     value the function might fail to write a private RSA keys of the largest\n     supported size.\n     Found by Daniel Otte, reported in #4093 and fixed in #4094.\n   * Fix a stack buffer overflow with mbedtls_net_poll() and\n     mbedtls_net_recv_timeout() when given a file descriptor that is\n     beyond FD_SETSIZE. Reported by FigBug in #4169.\n   * Guard against strong local side channel attack against base64 tables by\n     making access aceess to them use constant flow code.\n\nBugfix\n   * Fix use-after-scope error in programs/ssl/ssl_client2.c and ssl_server2.c\n   * Fix memory leak that occured when calling psa_close_key() on a\n     wrapped key with MBEDTLS_PSA_CRYPTO_SE_C defined.\n   * Fix an incorrect error code if an RSA private operation glitched.\n   * Fix a memory leak in an error case in psa_generate_derived_key_internal().\n   * Fix a resource leak in CTR_DRBG and HMAC_DRBG when MBEDTLS_THREADING_C\n     is enabled, on platforms where initializing a mutex allocates resources.\n     This was a regression introduced in the previous release. Reported in\n     #4017, #4045 and #4071.\n   * Ensure that calling mbedtls_rsa_free() or mbedtls_entropy_free()\n     twice is safe. This happens for RSA when some Mbed TLS library functions\n     fail. Such a double-free was not safe when MBEDTLS_THREADING_C was\n     enabled on platforms where freeing a mutex twice is not safe.\n   * Fix a resource leak in a bad-arguments case of mbedtls_rsa_gen_key()\n     when MBEDTLS_THREADING_C is enabled on platforms where initializing\n     a mutex allocates resources.\n   * Fixes a bug where, if the library was configured to include support for\n     both the old SE interface and the new PSA driver interface, external keys were\n     not loaded from storage. This was fixed by #3996.\n   * This change makes 'mbedtls_x509write_crt_set_basic_constraints'\n     consistent with RFC 5280 4.2.1.9 which says: \"Conforming CAs MUST\n     include this extension in all CA certificates that contain public keys\n     used to validate digital signatures on certificates and MUST mark the\n     extension as critical in such certificates.\" Previous to this change,\n     the extension was always marked as non-critical. This was fixed by\n     #3698.\n\nChanges\n   * A new library C file psa_crypto_client.c has been created to contain\n     the PSA code needed by a PSA crypto client when the PSA crypto\n     implementation is not included into the library.\n   * On recent enough versions of FreeBSD and DragonFlyBSD, the entropy module\n     now uses the getrandom syscall instead of reading from /dev/urandom.\n\n= mbed TLS 2.25.0 branch released 2020-12-11\n\nAPI changes\n   * The numerical values of the PSA Crypto API macros have been updated to\n     conform to version 1.0.0 of the specification.\n   * PSA_ALG_STREAM_CIPHER replaces PSA_ALG_CHACHA20 and PSA_ALG_ARC4.\n     The underlying stream cipher is determined by the key type\n     (PSA_KEY_TYPE_CHACHA20 or PSA_KEY_TYPE_ARC4).\n   * The functions mbedtls_cipher_auth_encrypt() and\n     mbedtls_cipher_auth_decrypt() no longer accept NIST_KW contexts,\n     as they have no way to check if the output buffer is large enough.\n     Please use mbedtls_cipher_auth_encrypt_ext() and\n     mbedtls_cipher_auth_decrypt_ext() instead. Credit to OSS-Fuzz and\n     Cryptofuzz. Fixes #3665.\n\nRequirement changes\n   * Update the minimum required CMake version to 2.8.12.  This silences a\n     warning on CMake 3.19.0. #3801\n\nNew deprecations\n   * PSA_ALG_CHACHA20 and PSA_ALG_ARC4 have been deprecated.\n     Use PSA_ALG_STREAM_CIPHER instead.\n   * The functions mbedtls_cipher_auth_encrypt() and\n     mbedtls_cipher_auth_decrypt() are deprecated in favour of the new\n     functions mbedtls_cipher_auth_encrypt_ext() and\n     mbedtls_cipher_auth_decrypt_ext(). Please note that with AEAD ciphers,\n     these new functions always append the tag to the ciphertext, and include\n     the tag in the ciphertext length.\n\nFeatures\n   * Partial implementation of the new PSA Crypto accelerator APIs. (Symmetric\n     ciphers, asymmetric signing/verification and key generation, validate_key\n     entry point, and export_public_key interface.)\n   * Add support for ECB to the PSA cipher API.\n   * In PSA, allow using a key declared with a base key agreement algorithm\n     in combined key agreement and derivation operations, as long as the key\n     agreement algorithm in use matches the algorithm the key was declared with.\n     This is currently non-standard behaviour, but expected to make it into a\n     future revision of the PSA Crypto standard.\n   * Add MBEDTLS_TARGET_PREFIX CMake variable, which is prefixed to the mbedtls,\n     mbedcrypto, mbedx509 and apidoc CMake target names. This can be used by\n     external CMake projects that include this one to avoid CMake target name\n     clashes.  The default value of this variable is \"\", so default target names\n     are unchanged.\n   * Add support for DTLS-SRTP as defined in RFC 5764. Contributed by Johan\n     Pascal, improved by Ron Eldor.\n   * In the PSA API, it is no longer necessary to open persistent keys:\n     operations now accept the key identifier. The type psa_key_handle_t is now\n     identical to psa_key_id_t instead of being platform-defined. This bridges\n     the last major gap to compliance with the PSA Cryptography specification\n     version 1.0.0. Opening persistent keys is still supported for backward\n     compatibility, but will be deprecated and later removed in future\n     releases.\n   * PSA_AEAD_NONCE_LENGTH, PSA_AEAD_NONCE_MAX_SIZE, PSA_CIPHER_IV_LENGTH and\n     PSA_CIPHER_IV_MAX_SIZE macros have been added as defined in version\n     1.0.0 of the PSA Crypto API specification.\n\nSecurity\n   * The functions mbedtls_cipher_auth_encrypt() and\n     mbedtls_cipher_auth_decrypt() would write past the minimum documented\n     size of the output buffer when used with NIST_KW. As a result, code using\n     those functions as documented with NIST_KW could have a buffer overwrite\n     of up to 15 bytes, with consequences ranging up to arbitrary code\n     execution depending on the location of the output buffer.\n   * Limit the size of calculations performed by mbedtls_mpi_exp_mod to\n     MBEDTLS_MPI_MAX_SIZE to prevent a potential denial of service when\n     generating Diffie-Hellman key pairs. Credit to OSS-Fuzz.\n   * A failure of the random generator was ignored in mbedtls_mpi_fill_random(),\n     which is how most uses of randomization in asymmetric cryptography\n     (including key generation, intermediate value randomization and blinding)\n     are implemented. This could cause failures or the silent use of non-random\n     values. A random generator can fail if it needs reseeding and cannot not\n     obtain entropy, or due to an internal failure (which, for Mbed TLS's own\n     CTR_DRBG or HMAC_DRBG, can only happen due to a misconfiguration).\n   * Fix a compliance issue whereby we were not checking the tag on the\n     algorithm parameters (only the size) when comparing the signature in the\n     description part of the cert to the real signature. This meant that a\n     NULL algorithm parameters entry would look identical to an array of REAL\n     (size zero) to the library and thus the certificate would be considered\n     valid. However, if the parameters do not match in *any* way then the\n     certificate should be considered invalid, and indeed OpenSSL marks these\n     certs as invalid when mbedtls did not.\n     Many thanks to guidovranken who found this issue via differential fuzzing\n     and reported it in #3629.\n   * Zeroising of local buffers and variables which are used for calculations\n     in mbedtls_pkcs5_pbkdf2_hmac(), mbedtls_internal_sha*_process(),\n     mbedtls_internal_md*_process() and mbedtls_internal_ripemd160_process()\n     functions to erase sensitive data from memory. Reported by\n     Johan Malmgren and Johan Uppman Bruce from Sectra.\n\nBugfix\n   * Fix an invalid (but nonzero) return code from mbedtls_pk_parse_subpubkey()\n     when the input has trailing garbage. Fixes #2512.\n   * Fix build failure in configurations where MBEDTLS_USE_PSA_CRYPTO is\n     enabled but ECDSA is disabled. Contributed by jdurkop. Fixes #3294.\n   * Include the psa_constant_names generated source code in the source tree\n     instead of generating it at build time. Fixes #3524.\n   * Fix rsa_prepare_blinding() to retry when the blinding value is not\n     invertible (mod N), instead of returning MBEDTLS_ERR_RSA_RNG_FAILED. This\n     addresses a regression but is rare in practice (approx. 1 in 2/sqrt(N)).\n     Found by Synopsys Coverity, fix contributed by Peter Kolbus (Garmin).\n     Fixes #3647.\n   * Use socklen_t on Android and other POSIX-compliant system\n   * Fix the build when the macro _GNU_SOURCE is defined to a non-empty value.\n     Fix #3432.\n   * Consistently return PSA_ERROR_INVALID_ARGUMENT on invalid cipher input\n     sizes (instead of PSA_ERROR_BAD_STATE in some cases) to make the\n     psa_cipher_* functions compliant with the PSA Crypto API specification.\n   * mbedtls_ecp_curve_list() now lists Curve25519 and Curve448 under the names\n     \"x25519\" and \"x448\". These curves support ECDH but not ECDSA. If you need\n     only the curves that support ECDSA, filter the list with\n     mbedtls_ecdsa_can_do().\n   * Fix psa_generate_key() returning an error when asked to generate\n     an ECC key pair on Curve25519 or secp244k1.\n   * Fix psa_key_derivation_output_key() to allow the output of a combined key\n     agreement and subsequent key derivation operation to be used as a key\n     inside of the PSA Crypto core.\n   * Fix handling of EOF against 0xff bytes and on platforms with unsigned\n     chars. Fixes a build failure on platforms where char is unsigned. Fixes\n     #3794.\n   * Fix an off-by-one error in the additional data length check for\n     CCM, which allowed encryption with a non-standard length field.\n     Fixes #3719.\n   * Correct the default IV size for mbedtls_cipher_info_t structures using\n     MBEDTLS_MODE_ECB to 0, since ECB mode ciphers don't use IVs.\n   * Make arc4random_buf available on NetBSD and OpenBSD when _POSIX_C_SOURCE is\n     defined. Fix contributed in #3571.\n   * Fix conditions for including string.h in error.c. Fixes #3866.\n   * psa_set_key_id() now also sets the lifetime to persistent for keys located\n     in a secure element.\n   * Attempting to create a volatile key with a non-zero key identifier now\n     fails. Previously the key identifier was just ignored when creating a\n     volatile key.\n   * Attempting to create or register a key with a key identifier in the vendor\n     range now fails.\n   * Fix build failures on GCC 11. Fixes #3782.\n   * Add missing arguments of debug message in mbedtls_ssl_decrypt_buf.\n   * Fix a memory leak in mbedtls_mpi_sub_abs() when the result was negative\n     (an error condition) and the second operand was aliased to the result.\n   * Fix a case in elliptic curve arithmetic where an out-of-memory condition\n     could go undetected, resulting in an incorrect result.\n   * In CTR_DRBG and HMAC_DRBG, don't reset the reseed interval in seed().\n     Fixes #2927.\n   * In PEM writing functions, fill the trailing part of the buffer with null\n     bytes. This guarantees that the corresponding parsing function can read\n     the buffer back, which was the case for mbedtls_x509write_{crt,csr}_pem\n     until this property was inadvertently broken in Mbed TLS 2.19.0.\n     Fixes #3682.\n   * Fix a build failure that occurred with the MBEDTLS_AES_SETKEY_DEC_ALT\n     option on. In this configuration key management methods that are required\n     for MBEDTLS_CIPHER_MODE_XTS were excluded from the build and made it fail.\n     Fixes #3818. Reported by John Stroebel.\n\nChanges\n   * Reduce stack usage significantly during sliding window exponentiation.\n     Reported in #3591 and fix contributed in #3592 by Daniel Otte.\n   * The PSA persistent storage format is updated to always store the key bits\n     attribute. No automatic upgrade path is provided. Previously stored keys\n     must be erased, or manually upgraded based on the key storage format\n     specification (docs/architecture/mbed-crypto-storage-specification.md).\n     Fixes #3740.\n   * Remove the zeroization of a pointer variable in AES rounds. It was valid\n     but spurious and misleading since it looked like a mistaken attempt to\n     zeroize the pointed-to buffer. Reported by Antonio de la Piedra, CEA\n     Leti, France.\n\n= mbed TLS 2.24.0 branch released 2020-09-01\n\nAPI changes\n   * In the PSA API, rename the types of elliptic curve and Diffie-Hellman\n     group families to psa_ecc_family_t and psa_dh_family_t, in line with the\n     PSA Crypto API specification version 1.0.0.\n     Rename associated macros as well:\n     PSA_ECC_CURVE_xxx renamed to PSA_ECC_FAMILY_xxx\n     PSA_DH_GROUP_xxx renamed to PSA_DH_FAMILY_xxx\n     PSA_KEY_TYPE_GET_CURVE renamed to to PSA_KEY_TYPE_ECC_GET_FAMILY\n     PSA_KEY_TYPE_GET_GROUP renamed to PSA_KEY_TYPE_DH_GET_FAMILY\n\nDefault behavior changes\n   * Stop storing persistent information about externally stored keys created\n     through PSA Crypto with a volatile lifetime. Reported in #3288 and\n     contributed by Steven Cooreman in #3382.\n\nFeatures\n   * The new function mbedtls_ecp_write_key() exports private ECC keys back to\n     a byte buffer. It is the inverse of the existing mbedtls_ecp_read_key().\n   * Support building on e2k (Elbrus) architecture: correctly enable\n     -Wformat-signedness, and fix the code that causes signed-one-bit-field\n     and sign-compare warnings. Contributed by makise-homura (Igor Molchanov)\n     <akemi_homura@kurisa.ch>.\n\nSecurity\n   * Fix a vulnerability in the verification of X.509 certificates when\n     matching the expected common name (the cn argument of\n     mbedtls_x509_crt_verify()) with the actual certificate name: when the\n     subjecAltName extension is present, the expected name was compared to any\n     name in that extension regardless of its type. This means that an\n     attacker could for example impersonate a 4-bytes or 16-byte domain by\n     getting a certificate for the corresponding IPv4 or IPv6 (this would\n     require the attacker to control that IP address, though). Similar attacks\n     using other subjectAltName name types might be possible. Found and\n     reported by kFYatek in #3498.\n   * When checking X.509 CRLs, a certificate was only considered as revoked if\n     its revocationDate was in the past according to the local clock if\n     available. In particular, on builds without MBEDTLS_HAVE_TIME_DATE,\n     certificates were never considered as revoked. On builds with\n     MBEDTLS_HAVE_TIME_DATE, an attacker able to control the local clock (for\n     example, an untrusted OS attacking a secure enclave) could prevent\n     revocation of certificates via CRLs. Fixed by no longer checking the\n     revocationDate field, in accordance with RFC 5280. Reported by\n     yuemonangong in #3340. Reported independently and fixed by\n     Raoul Strackx and Jethro Beekman in #3433.\n   * In (D)TLS record decryption, when using a CBC ciphersuites without the\n     Encrypt-then-Mac extension, use constant code flow memory access patterns\n     to extract and check the MAC. This is an improvement to the existing\n     countermeasure against Lucky 13 attacks. The previous countermeasure was\n     effective against network-based attackers, but less so against local\n     attackers. The new countermeasure defends against local attackers, even\n     if they have access to fine-grained measurements. In particular, this\n     fixes a local Lucky 13 cache attack found and reported by Tuba Yavuz,\n     Farhaan Fowze, Ken (Yihan) Bai, Grant Hernandez, and Kevin Butler\n     (University of Florida) and Dave Tian (Purdue University).\n   * Fix side channel in RSA private key operations and static (finite-field)\n     Diffie-Hellman. An adversary with precise enough timing and memory access\n     information (typically an untrusted operating system attacking a secure\n     enclave) could bypass an existing counter-measure (base blinding) and\n     potentially fully recover the private key.\n   * Fix a 1-byte buffer overread in mbedtls_x509_crl_parse_der().\n     Credit to OSS-Fuzz for detecting the problem and to Philippe Antoine\n     for pinpointing the problematic code.\n   * Zeroising of plaintext buffers in mbedtls_ssl_read() to erase unused\n     application data from memory. Reported in #689 by\n     Johan Uppman Bruce of Sectra.\n\nBugfix\n   * Library files installed after a CMake build no longer have execute\n     permission.\n   * Use local labels in mbedtls_padlock_has_support() to fix an invalid symbol\n     redefinition if the function is inlined.\n     Reported in #3451 and fix contributed in #3452 by okhowang.\n   * Fix the endianness of Curve25519 keys imported/exported through the PSA\n     APIs. psa_import_key and psa_export_key will now correctly expect/output\n     Montgomery keys in little-endian as defined by RFC7748. Contributed by\n     Steven Cooreman in #3425.\n   * Fix build errors when the only enabled elliptic curves are Montgomery\n     curves. Raised by signpainter in #941 and by Taiki-San in #1412. This\n     also fixes missing declarations reported by Steven Cooreman in #1147.\n   * Fix self-test failure when the only enabled short Weierstrass elliptic\n     curve is secp192k1. Fixes #2017.\n   * PSA key import will now correctly import a Curve25519/Curve448 public key\n     instead of erroring out. Contributed by Steven Cooreman in #3492.\n   * Use arc4random_buf on NetBSD instead of rand implementation with cyclical\n     lower bits. Fix contributed in #3540.\n   * Fix a memory leak in mbedtls_md_setup() when using HMAC under low memory\n     conditions. Reported and fix suggested by Guido Vranken in #3486.\n   * Fix bug in redirection of unit test outputs on platforms where stdout is\n     defined as a macro. First reported in #2311 and fix contributed in #3528.\n\nChanges\n   * Only pass -Wformat-signedness to versions of GCC that support it. Reported\n     in #3478 and fix contributed in #3479 by okhowang.\n   * Reduce the stack consumption of mbedtls_x509write_csr_der() which\n     previously could lead to stack overflow on constrained devices.\n     Contributed by Doru Gucea and Simon Leet in #3464.\n   * Undefine the ASSERT macro before defining it locally, in case it is defined\n     in a platform header. Contributed by Abdelatif Guettouche in #3557.\n   * Update copyright notices to use Linux Foundation guidance. As a result,\n     the copyright of contributors other than Arm is now acknowledged, and the\n     years of publishing are no longer tracked in the source files. This also\n     eliminates the need for the lines declaring the files to be part of\n     MbedTLS. Fixes #3457.\n   * Add the command line parameter key_pwd to the ssl_client2 and ssl_server2\n     example applications which allows to provide a password for the key file\n     specified through the existing key_file argument. This allows the use of\n     these applications with password-protected key files. Analogously but for\n     ssl_server2 only, add the command line parameter key_pwd2 which allows to\n     set a password for the key file provided through the existing key_file2\n     argument.\n\n= mbed TLS 2.23.0 branch released 2020-07-01\n\nDefault behavior changes\n   * In the experimental PSA secure element interface, change the encoding of\n     key lifetimes to encode a persistence level and the location. Although C\n     prototypes do not effectively change, code calling\n     psa_register_se_driver() must be modified to pass the driver's location\n     instead of the keys' lifetime. If the library is upgraded on an existing\n     device, keys created with the old lifetime value will not be readable or\n     removable through Mbed TLS after the upgrade.\n\nFeatures\n   * New functions in the error module return constant strings for\n     high- and low-level error codes, complementing mbedtls_strerror()\n     which constructs a string for any error code, including compound\n     ones, but requires a writable buffer. Contributed by Gaurav Aggarwal\n     in #3176.\n   * The new utility programs/ssl/ssl_context_info prints a human-readable\n     dump of an SSL context saved with mbedtls_ssl_context_save().\n   * Add support for midipix, a POSIX layer for Microsoft Windows.\n   * Add new mbedtls_x509_crt_parse_der_with_ext_cb() routine which allows\n     parsing unsupported certificate extensions via user provided callback.\n     Contributed by Nicola Di Lieto <nicola.dilieto@gmail.com> in #3243 as\n     a solution to #3241.\n   * Pass the \"certificate policies\" extension to the callback supplied to\n     mbedtls_x509_crt_parse_der_with_ext_cb() if it contains unsupported\n     policies (#3419).\n   * Added support to entropy_poll for the kern.arandom syscall supported on\n     some BSD systems. Contributed by Nia Alarie in #3423.\n   * Add support for Windows 2000 in net_sockets. Contributed by opatomic. #3239\n\nSecurity\n   * Fix a side channel vulnerability in modular exponentiation that could\n     reveal an RSA private key used in a secure enclave. Noticed by Sangho Lee,\n     Ming-Wei Shih, Prasun Gera, Taesoo Kim and Hyesoon Kim (Georgia Institute\n     of Technology); and Marcus Peinado (Microsoft Research). Reported by Raoul\n     Strackx (Fortanix) in #3394.\n   * Fix side channel in mbedtls_ecp_check_pub_priv() and\n     mbedtls_pk_parse_key() / mbedtls_pk_parse_keyfile() (when loading a\n     private key that didn't include the uncompressed public key), as well as\n     mbedtls_ecp_mul() / mbedtls_ecp_mul_restartable() when called with a NULL\n     f_rng argument. An attacker with access to precise enough timing and\n     memory access information (typically an untrusted operating system\n     attacking a secure enclave) could fully recover the ECC private key.\n     Found and reported by Alejandro Cabrera Aldaya and Billy Brumley.\n   * Fix issue in Lucky 13 counter-measure that could make it ineffective when\n     hardware accelerators were used (using one of the MBEDTLS_SHAxxx_ALT\n     macros). This would cause the original Lucky 13 attack to be possible in\n     those configurations, allowing an active network attacker to recover\n     plaintext after repeated timing measurements under some conditions.\n     Reported and fix suggested by Luc Perneel in #3246.\n\nBugfix\n   * Fix the Visual Studio Release x64 build configuration for mbedtls itself.\n     Completes a previous fix in Mbed TLS 2.19 that only fixed the build for\n     the example programs. Reported in #1430 and fix contributed by irwir.\n   * Fix undefined behavior in X.509 certificate parsing if the\n     pathLenConstraint basic constraint value is equal to INT_MAX.\n     The actual effect with almost every compiler is the intended\n     behavior, so this is unlikely to be exploitable anywhere. #3192\n   * Fix issue with a detected HW accelerated record error not being exposed\n     due to shadowed variable. Contributed by Sander Visser in #3310.\n   * Avoid NULL pointer dereferencing if mbedtls_ssl_free() is called with a\n     NULL pointer argument. Contributed by Sander Visser in #3312.\n   * Fix potential linker errors on dual world platforms by inlining\n     mbedtls_gcc_group_to_psa(). This allows the pk.c module to link separately\n     from psa_crypto.c. Fixes #3300.\n   * Remove dead code in X.509 certificate parsing. Contributed by irwir in\n     #2855.\n   * Include asn1.h in error.c. Fixes #3328 reported by David Hu.\n   * Fix potential memory leaks in ecp_randomize_jac() and ecp_randomize_mxz()\n     when PRNG function fails. Contributed by Jonas Lejeune in #3318.\n   * Remove unused macros from MSVC projects. Reported in #3297 and fix\n     submitted in #3333 by irwir.\n   * Add additional bounds checks in ssl_write_client_hello() preventing\n     output buffer overflow if the configuration declared a buffer that was\n     too small.\n   * Set _POSIX_C_SOURCE to at least 200112L in C99 code. Reported in #3420 and\n     fix submitted in #3421 by Nia Alarie.\n   * Fix building library/net_sockets.c and the ssl_mail_client program on\n     NetBSD. Contributed by Nia Alarie in #3422.\n   * Fix false positive uninitialised variable reported by cpp-check.\n     Contributed by Sander Visser in #3311.\n   * Update iv and len context pointers manually when reallocating buffers\n     using the MBEDTLS_SSL_VARIABLE_BUFFER_LENGTH feature. This caused issues\n     when receiving a connection with CID, when these fields were shifted\n     in ssl_parse_record_header().\n\nChanges\n   * Fix warnings about signedness issues in format strings. The build is now\n     clean of -Wformat-signedness warnings. Contributed by Kenneth Soerensen\n     in #3153.\n   * Fix minor performance issue in operations on Curve25519 caused by using a\n     suboptimal modular reduction in one place. Found and fix contributed by\n     Aurelien Jarno in #3209.\n   * Combine identical cases in switch statements in md.c. Contributed\n     by irwir in #3208.\n   * Simplify a bounds check in ssl_write_certificate_request(). Contributed\n     by irwir in #3150.\n   * Unify the example programs termination to call mbedtls_exit() instead of\n     using a return command. This has been done to enable customization of the\n     behavior in bare metal environments.\n   * Fix mbedtls_x509_dn_gets to escape non-ASCII characters as \"?\".\n     Contributed by Koh M. Nakagawa in #3326.\n   * Use FindPython3 when cmake version >= 3.15.0\n   * Abort the ClientHello writing function as soon as some extension doesn't\n     fit into the record buffer. Previously, such extensions were silently\n     dropped. As a consequence, the TLS handshake now fails when the output\n     buffer is not large enough to hold the ClientHello.\n   * The unit tests now rely on header files in framework/tests/include/test and source\n     files in framework/tests/src. When building with make or cmake, the files in\n     framework/tests/src are compiled and the resulting object linked into each test\n     executable.\n   * The ECP module, enabled by `MBEDTLS_ECP_C`, now depends on\n     `MBEDTLS_CTR_DRBG_C` or `MBEDTLS_HMAC_DRBG_C` for some side-channel\n     coutermeasures. If side channels are not a concern, this dependency can\n     be avoided by enabling the new option `MBEDTLS_ECP_NO_INTERNAL_RNG`.\n   * Align MSVC error flag with GCC and Clang. Contributed by Carlos Gomes\n     Martinho. #3147\n   * Remove superfluous assignment in mbedtls_ssl_parse_certificate(). Reported\n     in #3182 and fix submitted by irwir. #3217\n   * Fix typo in XTS tests. Reported and fix submitted by Kxuan. #3319\n\n= mbed TLS 2.22.0 branch released 2020-04-14\n\nNew deprecations\n   * Deprecate MBEDTLS_SSL_HW_RECORD_ACCEL that enables function hooks in the\n     SSL module for hardware acceleration of individual records.\n   * Deprecate mbedtls_ssl_get_max_frag_len() in favour of\n     mbedtls_ssl_get_output_max_frag_len() and\n     mbedtls_ssl_get_input_max_frag_len() to be more precise about which max\n     fragment length is desired.\n\nSecurity\n   * Fix issue in DTLS handling of new associations with the same parameters\n     (RFC 6347 section 4.2.8): an attacker able to send forged UDP packets to\n     the server could cause it to drop established associations with\n     legitimate clients, resulting in a Denial of Service. This could only\n     happen when MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE was enabled in config.h\n     (which it is by default).\n   * Fix side channel in ECC code that allowed an adversary with access to\n     precise enough timing and memory access information (typically an\n     untrusted operating system attacking a secure enclave) to fully recover\n     an ECDSA private key. Found and reported by Alejandro Cabrera Aldaya,\n     Billy Brumley and Cesar Pereida Garcia. CVE-2020-10932\n   * Fix a potentially remotely exploitable buffer overread in a\n     DTLS client when parsing the Hello Verify Request message.\n\nFeatures\n   * The new build option MBEDTLS_SSL_VARIABLE_BUFFER_LENGTH automatically\n     resizes the I/O buffers before and after handshakes, reducing the memory\n     consumption during application data transfer.\n\nBugfix\n   * Fix compilation failure when both MBEDTLS_SSL_PROTO_DTLS and\n     MBEDTLS_SSL_HW_RECORD_ACCEL are enabled.\n   * Remove a spurious check in ssl_parse_client_psk_identity that triggered\n     a warning with some compilers. Fix contributed by irwir in #2856.\n   * Fix a function name in a debug message. Contributed by Ercan Ozturk in\n     #3013.\n\nChanges\n   * Mbed Crypto is no longer a Git submodule. The crypto part of the library\n     is back directly in the present repository.\n   * Split mbedtls_ssl_get_max_frag_len() into\n     mbedtls_ssl_get_output_max_frag_len() and\n     mbedtls_ssl_get_input_max_frag_len() to ensure that a sufficient input\n     buffer is allocated by the server (if MBEDTLS_SSL_VARIABLE_BUFFER_LENGTH\n     is defined), regardless of what MFL was configured for it.\n\n= mbed TLS 2.21.0 branch released 2020-02-20\n\nNew deprecations\n   * Deprecate MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO that enables parsing\n     SSLv2 ClientHello messages.\n   * Deprecate MBEDTLS_SSL_PROTO_SSL3 that enables support for SSLv3.\n   * Deprecate for MBEDTLS_PKCS11_C, the wrapper around the pkcs11-helper\n     library which allows TLS authentication to use keys stored in a\n     PKCS#11 token such as a smartcard.\n\nSecurity\n   * Fix potential memory overread when performing an ECDSA signature\n     operation. The overread only happens with cryptographically low\n     probability (of the order of 2^-n where n is the bitsize of the curve)\n     unless the RNG is broken, and could result in information disclosure or\n     denial of service (application crash or extra resource consumption).\n     Found by Auke Zeilstra and Peter Schwabe, using static analysis.\n   * To avoid a side channel vulnerability when parsing an RSA private key,\n     read all the CRT parameters from the DER structure rather than\n     reconstructing them. Found by Alejandro Cabrera Aldaya and Billy Bob\n     Brumley. Reported and fix contributed by Jack Lloyd.\n     ARMmbed/mbed-crypto#352\n\nFeatures\n   * The new build option MBEDTLS_SHA512_NO_SHA384 allows building SHA-512\n     support without SHA-384.\n\nAPI changes\n   * Change the encoding of key types and curves in the PSA API. The new\n     values are aligned with the upcoming release of the PSA Crypto API\n     specification version 1.0.0. The main change which may break some\n     existing code is that elliptic curve key types no longer encode the\n     exact curve: a psa_ecc_curve_t or psa_key_type_t value only encodes\n     a curve family and the key size determines the exact curve (for example,\n     PSA_ECC_CURVE_SECP_R1 with 256 bits is P256R1). ARMmbed/mbed-crypto#330\n\nBugfix\n   * Fix an unchecked call to mbedtls_md() in the x509write module.\n   * Fix build failure with MBEDTLS_ZLIB_SUPPORT enabled. Reported by\n     Jack Lloyd in #2859. Fix submitted by jiblime in #2963.\n   * Fix some false-positive uninitialized variable warnings in X.509. Fix\n     contributed by apple-ihack-geek in #2663.\n   * Fix a possible error code mangling in psa_mac_verify_finish() when\n     a cryptographic accelerator fails. ARMmbed/mbed-crypto#345\n   * Fix a bug in mbedtls_pk_parse_key() that would cause it to accept some\n     RSA keys that would later be rejected by functions expecting private\n     keys. Found by Catena cyber using oss-fuzz (issue 20467).\n   * Fix a bug in mbedtls_pk_parse_key() that would cause it to\n     accept some RSA keys with invalid values by silently fixing those values.\n\n= mbed TLS 2.20.0 branch released 2020-01-15\n\nDefault behavior changes\n   * The initial seeding of a CTR_DRBG instance makes a second call to the\n     entropy function to obtain entropy for a nonce if the entropy size is less\n     than 3/2 times the key size. In case you want to disable the extra call to\n     grab entropy, you can call mbedtls_ctr_drbg_set_nonce_len() to force the\n     nonce length to 0.\n\nSecurity\n   * Enforce that mbedtls_entropy_func() gathers a total of\n     MBEDTLS_ENTROPY_BLOCK_SIZE bytes or more from strong sources. In the\n     default configuration, on a platform with a single entropy source, the\n     entropy module formerly only grabbed 32 bytes, which is good enough for\n     security if the source is genuinely strong, but less than the expected 64\n     bytes (size of the entropy accumulator).\n   * Zeroize local variables in mbedtls_internal_aes_encrypt() and\n     mbedtls_internal_aes_decrypt() before exiting the function. The value of\n     these variables can be used to recover the last round key. To follow best\n     practice and to limit the impact of buffer overread vulnerabilities (like\n     Heartbleed) we need to zeroize them before exiting the function.\n     Issue reported by Tuba Yavuz, Farhaan Fowze, Ken (Yihang) Bai,\n     Grant Hernandez, and Kevin Butler (University of Florida) and\n     Dave Tian (Purdue University).\n   * Fix side channel vulnerability in ECDSA. Our bignum implementation is not\n     constant time/constant trace, so side channel attacks can retrieve the\n     blinded value, factor it (as it is smaller than RSA keys and not guaranteed\n     to have only large prime factors), and then, by brute force, recover the\n     key. Reported by Alejandro Cabrera Aldaya and Billy Brumley.\n   * Fix side channel vulnerability in ECDSA key generation. Obtaining precise\n     timings on the comparison in the key generation enabled the attacker to\n     learn leading bits of the ephemeral key used during ECDSA signatures and to\n     recover the private key. Reported by Jeremy Dubeuf.\n   * Catch failure of AES functions in mbedtls_ctr_drbg_random(). Uncaught\n     failures could happen with alternative implementations of AES. Bug\n     reported and fix proposed by Johan Uppman Bruce and Christoffer Lauri,\n     Sectra.\n\nFeatures\n   * Key derivation inputs in the PSA API can now either come from a key object\n     or from a buffer regardless of the step type.\n   * The CTR_DRBG module can grab a nonce from the entropy source during the\n     initial seeding. The default nonce length is chosen based on the key size\n     to achieve the security strength defined by NIST SP 800-90A. You can\n     change it with mbedtls_ctr_drbg_set_nonce_len().\n   * Add ENUMERATED tag support to the ASN.1 module. Contributed by\n     msopiha-linaro in ARMmbed/mbed-crypto#307.\n\nAPI changes\n   * In the PSA API, forbid zero-length keys. To pass a zero-length input to a\n     key derivation function, use a buffer instead (this is now always\n     possible).\n   * Rename psa_asymmetric_sign() to psa_sign_hash() and\n     psa_asymmetric_verify() to psa_verify_hash().\n\nBugfix\n   * Fix an incorrect size in a debugging message. Reported and fix\n     submitted by irwir. Fixes #2717.\n   * Fix an unused variable warning when compiling without DTLS.\n     Reported and fix submitted by irwir. Fixes #2800.\n   * Remove a useless assignment. Reported and fix submitted by irwir.\n     Fixes #2801.\n   * Fix a buffer overflow in the PSA HMAC code when using a long key with an\n     unsupported algorithm. Fixes ARMmbed/mbed-crypto#254.\n   * Fix mbedtls_asn1_get_int to support any number of leading zeros. Credit\n     to OSS-Fuzz for finding a bug in an intermediate version of the fix.\n   * Fix mbedtls_asn1_get_bitstring_null to correctly parse bitstrings of at\n     most 2 bytes.\n   * mbedtls_ctr_drbg_set_entropy_len() and\n     mbedtls_hmac_drbg_set_entropy_len() now work if you call them before\n     mbedtls_ctr_drbg_seed() or mbedtls_hmac_drbg_seed().\n\nChanges\n   * Remove the technical possibility to define custom mbedtls_md_info\n     structures, which was exposed only in an internal header.\n   * psa_close_key(0) and psa_destroy_key(0) now succeed (doing nothing, as\n     before).\n   * Variables containing error codes are now initialized to an error code\n     rather than success, so that coding mistakes or memory corruption tends to\n     cause functions to return this error code rather than a success. There are\n     no known instances where this changes the behavior of the library: this is\n     merely a robustness improvement. ARMmbed/mbed-crypto#323\n   * Remove a useless call to mbedtls_ecp_group_free(). Contributed by\n     Alexander Krizhanovsky in ARMmbed/mbed-crypto#210.\n   * Speed up PBKDF2 by caching the digest calculation. Contributed by Jack\n     Lloyd and Fortanix Inc in ARMmbed/mbed-crypto#277.\n   * Small performance improvement of mbedtls_mpi_div_mpi(). Contributed by\n     Alexander Krizhanovsky in ARMmbed/mbed-crypto#308.\n\n= mbed TLS 2.19.1 branch released 2019-09-16\n\nFeatures\n   * Declare include headers as PUBLIC to propagate to CMake project consumers\n     Contributed by Zachary J. Fields in PR #2949.\n   * Add nss_keylog to ssl_client2 and ssl_server2, enabling easier analysis of\n     TLS sessions with tools like Wireshark.\n\nAPI Changes\n   * Make client_random and server_random const in\n     mbedtls_ssl_export_keys_ext_t, so that the key exporter is discouraged\n     from modifying the client/server hello.\n\nBugfix\n   * Fix some false-positive uninitialized variable warnings in crypto. Fix\n     contributed by apple-ihack-geek in #2663.\n\n= mbed TLS 2.19.0 branch released 2019-09-06\n\nSecurity\n   * Fix a missing error detection in ECJPAKE. This could have caused a\n     predictable shared secret if a hardware accelerator failed and the other\n     side of the key exchange had a similar bug.\n   * When writing a private EC key, use a constant size for the private\n     value, as specified in RFC 5915. Previously, the value was written\n     as an ASN.1 INTEGER, which caused the size of the key to leak\n     about 1 bit of information on average and could cause the value to be\n     1 byte too large for the output buffer.\n   * The deterministic ECDSA calculation reused the scheme's HMAC-DRBG to\n     implement blinding. Because of this for the same key and message the same\n     blinding value was generated. This reduced the effectiveness of the\n     countermeasure and leaked information about the private key through side\n     channels. Reported by Jack Lloyd.\n\nFeatures\n   * Add new API functions mbedtls_ssl_session_save() and\n     mbedtls_ssl_session_load() to allow serializing a session, for example to\n     store it in non-volatile storage, and later using it for TLS session\n     resumption.\n   * Add a new API function mbedtls_ssl_check_record() to allow checking that\n     an incoming record is valid, authentic and has not been seen before. This\n     feature can be used alongside Connection ID and SSL context serialisation.\n     The feature is enabled at compile-time by MBEDTLS_SSL_RECORD_CHECKING\n     option.\n   * New implementation of X25519 (ECDH using Curve25519) from Project Everest\n     (https://project-everest.github.io/). It can be enabled at compile time\n     with MBEDTLS_ECDH_VARIANT_EVEREST_ENABLED. This implementation is formally\n     verified and significantly faster, but is only supported on x86 platforms\n     (32-bit and 64-bit) using GCC, Clang or Visual Studio. Contributed by\n     Christoph Wintersteiger from Microsoft Research.\n   * Add mbedtls_net_close(), enabling the building of forking servers where\n     the parent process closes the client socket and continue accepting, and\n     the child process closes the listening socket and handles the client\n     socket. Contributed by Robert Larsen in #2803.\n\nAPI Changes\n   * Add DER-encoded test CRTs to library/certs.c, allowing\n     the example programs ssl_server2 and ssl_client2 to be run\n     if MBEDTLS_FS_IO and MBEDTLS_PEM_PARSE_C are unset. Fixes #2254.\n   * The HAVEGE state type now uses uint32_t elements instead of int.\n   * The functions mbedtls_ecp_curve_list() and mbedtls_ecp_grp_id_list() now\n     list all curves for which at least one of ECDH or ECDSA is supported, not\n     just curves for which both are supported. Call mbedtls_ecdsa_can_do() or\n     mbedtls_ecdh_can_do() on each result to check whether each algorithm is\n     supported.\n   * The new function mbedtls_ecdsa_sign_det_ext() is similar to\n     mbedtls_ecdsa_sign_det() but allows passing an external RNG for the\n     purpose of blinding.\n\nNew deprecations\n   * Deprecate mbedtls_ecdsa_sign_det() in favor of a functions that can take an\n     RNG function as an input.\n   * Calling mbedtls_ecdsa_write_signature() with NULL as the f_rng argument\n     is now deprecated.\n\nBugfix\n   * Fix missing bounds checks in X.509 parsing functions that could\n     lead to successful parsing of ill-formed X.509 CRTs. Fixes #2437.\n   * Fix multiple X.509 functions previously returning ASN.1 low-level error\n     codes to always wrap these codes into X.509 high level error codes before\n     returning. Fixes #2431.\n   * Fix to allow building test suites with any warning that detects unused\n     functions. Fixes #1628.\n   * Fix typo in net_would_block(). Fixes #528 reported by github-monoculture.\n   * Remove redundant include file in timing.c. Fixes #2640 reported by irwir.\n   * Fix build failure when building with mingw on Windows by including\n     stdarg.h where needed. Fixes #2656.\n   * Fix Visual Studio Release x64 build configuration by inheriting\n     PlatformToolset from the project configuration. Fixes #1430 reported by\n     irwir.\n   * Enable Suite B with subset of ECP curves. Make sure the code compiles even\n     if some curves are not defined. Fixes #1591 reported by dbedev.\n   * Fix misuse of signed arithmetic in the HAVEGE module. #2598\n   * Avoid use of statically sized stack buffers for certificate writing.\n     This previously limited the maximum size of DER encoded certificates\n     in mbedtls_x509write_crt_der() to 2Kb. Reported by soccerGB in #2631.\n   * Fix partial zeroing in x509_get_other_name. Found and fixed by ekse, #2716.\n   * Update test certificates that were about to expire. Reported by\n     Bernhard M. Wiedemann in #2357.\n   * Fix the build on ARMv5TE in ARM mode to not use assembly instructions\n     that are only available in Thumb mode. Fix contributed by Aurelien Jarno\n     in #2169.\n   * Fix propagation of restart contexts in restartable EC operations.\n     This could previously lead to segmentation faults in builds using an\n     address-sanitizer and enabling but not using MBEDTLS_ECP_RESTARTABLE.\n   * Fix memory leak in in mpi_miller_rabin(). Contributed by\n     Jens Wiklander <jens.wiklander@linaro.org> in #2363\n   * Improve code clarity in x509_crt module, removing false-positive\n     uninitialized variable warnings on some recent toolchains (GCC8, etc).\n     Discovered and fixed by Andy Gross (Linaro), #2392.\n   * Fix bug in endianness conversion in bignum module. This lead to\n     functionally incorrect code on bigendian systems which don't have\n     __BYTE_ORDER__ defined. Reported by Brendan Shanks. Fixes #2622.\n\nChanges\n   * Replace multiple uses of MD2 by SHA-256 in X.509 test suite. Fixes #821.\n   * Make it easier to define MBEDTLS_PARAM_FAILED as assert (which config.h\n     suggests). #2671\n   * Make `make clean` clean all programs always. Fixes #1862.\n   * Add a Dockerfile and helper scripts (all-in-docker.sh, basic-in-docker.sh,\n     docker-env.sh) to simplify running test suites on a Linux host. Contributed\n     by Peter Kolbus (Garmin).\n   * Add `reproducible` option to `ssl_client2` and `ssl_server2` to enable\n     test runs without variability. Contributed by Philippe Antoine (Catena\n     cyber) in #2681.\n   * Extended .gitignore to ignore Visual Studio artifacts. Fixed by ConfusedSushi.\n   * Adds fuzz targets, especially for continuous fuzzing with OSS-Fuzz.\n     Contributed by Philippe Antoine (Catena cyber).\n   * Remove the crypto part of the library from Mbed TLS. The crypto\n     code and tests are now only available via Mbed Crypto, which\n     Mbed TLS references as a Git submodule.\n\n= mbed TLS 2.18.1 branch released 2019-07-12\n\nBugfix\n   * Fix build failure when building with mingw on Windows by including\n     stdarg.h where needed. Fixes #2656.\n\nChanges\n   * Enable building of Mbed TLS as a CMake subproject. Suggested and fixed by\n     Ashley Duncan in #2609.\n\n= mbed TLS 2.18.0 branch released 2019-06-11\n\nFeatures\n   * Add the Any Policy certificate policy oid, as defined in\n     rfc 5280 section 4.2.1.4.\n   * It is now possible to use NIST key wrap mode via the mbedtls_cipher API.\n     Contributed by Jack Lloyd and Fortanix Inc.\n   * Add the Wi-SUN Field Area Network (FAN) device extended key usage.\n   * Add the oid certificate policy x509 extension.\n   * It is now possible to perform RSA PKCS v1.5 signatures with RIPEMD-160 digest.\n     Contributed by Jack Lloyd and Fortanix Inc.\n   * Extend the MBEDTLS_SSL_EXPORT_KEYS to export the handshake randbytes,\n     and the used tls-prf.\n   * Add public API for tls-prf function, according to requested enum.\n   * Add support for parsing otherName entries in the Subject Alternative Name\n     X.509 certificate extension, specifically type hardware module name,\n     as defined in RFC 4108 section 5.\n   * Add support for parsing certificate policies extension, as defined in\n     RFC 5280 section 4.2.1.4. Currently, only the \"Any Policy\" policy is\n     supported.\n   * List all SAN types in the subject_alt_names field of the certificate.\n     Resolves #459.\n   * Add support for draft-05 of the Connection ID extension, as specified\n     in https://tools.ietf.org/html/draft-ietf-tls-dtls-connection-id-05.\n     The Connection ID extension allows to keep DTLS connections beyond the\n     lifetime of the underlying transport by adding a connection identifier\n     to the DTLS record header. This identifier can be used to associated an\n     incoming record with the correct connection data even after the peer has\n     changed its IP or port. The feature is enabled at compile-time by setting\n     MBEDTLS_SSL_DTLS_CONNECTION_ID (disabled by default), and at run-time\n     through the new APIs mbedtls_ssl_conf_cid() and mbedtls_ssl_set_cid().\n\n\nAPI Changes\n   * Extend the MBEDTLS_SSL_EXPORT_KEYS to export the handshake randbytes,\n     and the used tls-prf.\n   * Add public API for tls-prf function, according to requested enum.\n\nBugfix\n   * Fix private key DER output in the key_app_writer example. File contents\n     were shifted by one byte, creating an invalid ASN.1 tag. Fixed by\n     Christian Walther in #2239.\n   * Fix potential memory leak in X.509 self test. Found and fixed by\n     Junhwan Park, #2106.\n   * Reduce stack usage of hkdf tests. Fixes #2195.\n   * Fix 1-byte buffer overflow in mbedtls_mpi_write_string() when\n     used with negative inputs. Found by Guido Vranken in #2404. Credit to\n     OSS-Fuzz.\n   * Fix bugs in the AEAD test suite which would be exposed by ciphers which\n     either used both encrypt and decrypt key schedules, or which perform padding.\n     GCM and CCM were not affected. Fixed by Jack Lloyd.\n   * Fix incorrect default port number in ssl_mail_client example's usage.\n     Found and fixed by irwir. #2337\n   * Add psa_util.h to test/cpp_dummy_build to fix build_default_make_gcc_and_cxx.\n     Fixed by Peter Kolbus (Garmin). #2579\n   * Add missing parentheses around parameters in the definition of the\n     public macro MBEDTLS_X509_ID_FLAG. This could lead to invalid evaluation\n     in case operators binding less strongly than subtraction were used\n     for the parameter.\n   * Add a check for MBEDTLS_X509_CRL_PARSE_C in ssl_server2, guarding the crl\n     sni entry parameter. Reported by inestlerode in #560.\n   * Set the next sequence of the subject_alt_name to NULL when deleting\n     sequence on failure. Found and fix suggested by Philippe Antoine.\n     Credit to OSS-Fuzz.\n\nChanges\n   * Server's RSA certificate in certs.c was SHA-1 signed. In the default\n     mbedTLS configuration only SHA-2 signed certificates are accepted.\n     This certificate is used in the demo server programs, which lead the\n     client programs to fail at the peer's certificate verification\n     due to an unacceptable hash signature. The certificate has been\n     updated to one that is SHA-256 signed. Fix contributed by\n     Illya Gerasymchuk.\n   * Return from various debugging routines immediately if the\n     provided SSL context is unset.\n   * Remove dead code from bignum.c in the default configuration.\n     Found by Coverity, reported and fixed by Peter Kolbus (Garmin). Fixes #2309.\n   * Add test for minimal value of MBEDTLS_MPI_WINDOW_SIZE to all.sh.\n     Contributed by Peter Kolbus (Garmin).\n   * Change wording in the `mbedtls_ssl_conf_max_frag_len()`'s documentation to\n     improve clarity. Fixes #2258.\n\n= mbed TLS 2.17.0 branch released 2019-03-19\n\nFeatures\n   * Add a new X.509 API call `mbedtls_x509_parse_der_nocopy()`\n     which allows copy-less parsing of DER encoded X.509 CRTs,\n     at the cost of additional lifetime constraints on the input\n     buffer, but at the benefit of reduced RAM consumption.\n   * Add a new function mbedtls_asn1_write_named_bitstring() to write ASN.1\n     named bitstring in DER as required by RFC 5280 Appendix B.\n   * Add MBEDTLS_REMOVE_3DES_CIPHERSUITES to allow removing 3DES ciphersuites\n     from the default list (enabled by default). See\n     https://sweet32.info/SWEET32_CCS16.pdf.\n\nAPI Changes\n   * Add a new X.509 API call `mbedtls_x509_parse_der_nocopy()`.\n     See the Features section for more information.\n   * Allow to opt in to the removal the API mbedtls_ssl_get_peer_cert()\n     for the benefit of saving RAM, by disabling the new compile-time\n     option MBEDTLS_SSL_KEEP_PEER_CERTIFICATE (enabled by default for\n     API stability). Disabling this option makes mbedtls_ssl_get_peer_cert()\n     always return NULL, and removes the peer_cert field from the\n     mbedtls_ssl_session structure which otherwise stores the peer's\n     certificate.\n\nSecurity\n   * Make mbedtls_ecdh_get_params return an error if the second key\n     belongs to a different group from the first. Before, if an application\n     passed keys that belonged to different group, the first key's data was\n     interpreted according to the second group, which could lead to either\n     an error or a meaningless output from mbedtls_ecdh_get_params. In the\n     latter case, this could expose at most 5 bits of the private key.\n\nBugfix\n   * Fix a compilation issue with mbedtls_ecp_restart_ctx not being defined\n     when MBEDTLS_ECP_ALT is defined. Reported by jwhui. Fixes #2242.\n   * Run the AD too long test only if MBEDTLS_CCM_ALT is not defined.\n     Raised as a comment in #1996.\n   * Reduce the stack consumption of mbedtls_mpi_fill_random() which could\n     previously lead to a stack overflow on constrained targets.\n   * Add `MBEDTLS_SELF_TEST` for the mbedtls_self_test functions\n     in the header files, which missed the precompilation check. #971\n   * Fix returning the value 1 when mbedtls_ecdsa_genkey failed.\n   * Remove a duplicate #include in a sample program. Fixed by Masashi Honma #2326.\n   * Remove the mbedtls namespacing from the header file, to fix a \"file not found\"\n     build error. Fixed by Haijun Gu #2319.\n   * Fix signed-to-unsigned integer conversion warning\n     in X.509 module. Fixes #2212.\n   * Reduce stack usage of `mpi_write_hlp()` by eliminating recursion.\n     Fixes #2190.\n   * Fix false failure in all.sh when backup files exist in include/mbedtls\n     (e.g. config.h.bak). Fixed by Peter Kolbus (Garmin) #2407.\n   * Ensure that unused bits are zero when writing ASN.1 bitstrings when using\n     mbedtls_asn1_write_bitstring().\n   * Fix issue when writing the named bitstrings in KeyUsage and NsCertType\n     extensions in CSRs and CRTs that caused these bitstrings to not be encoded\n     correctly as trailing zeroes were not accounted for as unused bits in the\n     leading content octet. Fixes #1610.\n\nChanges\n   * Reduce RAM consumption during session renegotiation by not storing\n     the peer CRT chain and session ticket twice.\n   * Include configuration file in all header files that use configuration,\n     instead of relying on other header files that they include.\n     Inserted as an enhancement for #1371\n   * Add support for alternative CSR headers, as used by Microsoft and defined\n     in RFC 7468. Found by Michael Ernst. Fixes #767.\n   * Correct many misspellings. Fixed by MisterDA #2371.\n   * Provide an abstraction of vsnprintf to allow alternative implementations\n     for platforms that don't provide it. Based on contributions by Joris Aerts\n     and Nathaniel Wesley Filardo.\n   * Fix clobber list in MIPS assembly for large integer multiplication.\n     Previously, this could lead to functionally incorrect assembly being\n     produced by some optimizing compilers, showing up as failures in\n     e.g. RSA or ECC signature operations. Reported in #1722, fix suggested\n     by Aurelien Jarno and submitted by Jeffrey Martin.\n   * Reduce the complexity of the timing tests. They were assuming more than the\n     underlying OS actually guarantees.\n   * Fix configuration queries in ssl-opt.h. #2030\n   * Ensure that ssl-opt.h can be run in OS X. #2029\n   * Re-enable certain interoperability tests in ssl-opt.sh which had previously\n     been disabled for lack of a sufficiently recent version of GnuTLS on the CI.\n   * Ciphersuites based on 3DES now have the lowest priority by default when\n     they are enabled.\n\n= mbed TLS 2.16.0 branch released 2018-12-21\n\nFeatures\n   * Add a new config.h option of MBEDTLS_CHECK_PARAMS that enables validation\n     of parameters in the API. This allows detection of obvious misuses of the\n     API, such as passing NULL pointers. The API of existing functions hasn't\n     changed, but requirements on parameters have been made more explicit in\n     the documentation. See the corresponding API documentation for each\n     function to see for which parameter values it is defined. This feature is\n     disabled by default. See its API documentation in config.h for additional\n     steps you have to take when enabling it.\n\nAPI Changes\n   * The following functions in the random generator modules have been\n     deprecated and replaced as shown below. The new functions change\n     the return type from void to int to allow returning error codes when\n     using MBEDTLS_<MODULE>_ALT for the underlying AES or message digest\n     primitive. Fixes #1798.\n     mbedtls_ctr_drbg_update() -> mbedtls_ctr_drbg_update_ret()\n     mbedtls_hmac_drbg_update() -> mbedtls_hmac_drbg_update_ret()\n   * Extend ECDH interface to enable alternative implementations.\n   * Deprecate error codes of the form MBEDTLS_ERR_xxx_INVALID_KEY_LENGTH for\n     ARIA, CAMELLIA and Blowfish. These error codes will be replaced by\n     the more generic per-module error codes MBEDTLS_ERR_xxx_BAD_INPUT_DATA.\n   * Additional parameter validation checks have been added for the following\n     modules - AES, ARIA, Blowfish, CAMELLIA, CCM, GCM, DHM, ECP, ECDSA, ECDH,\n     ECJPAKE, SHA, Chacha20 and Poly1305, cipher, pk, RSA, and MPI.\n     Where modules have had parameter validation added, existing parameter\n     checks may have changed. Some modules, such as Chacha20 had existing\n     parameter validation whereas other modules had little. This has now been\n     changed so that the same level of validation is present in all modules, and\n     that it is now optional with the MBEDTLS_CHECK_PARAMS flag which by default\n     is off. That means that checks which were previously present by default\n     will no longer be.\n\nNew deprecations\n   * Deprecate mbedtls_ctr_drbg_update and mbedtls_hmac_drbg_update\n     in favor of functions that can return an error code.\n\nBugfix\n   * Fix for Clang, which was reporting a warning for the bignum.c inline\n     assembly for AMD64 targets creating string literals greater than those\n     permitted by the ISO C99 standard. Found by Aaron Jones. Fixes #482.\n   * Fix runtime error in `mbedtls_platform_entropy_poll()` when run\n     through qemu user emulation. Reported and fix suggested by randombit\n     in #1212. Fixes #1212.\n   * Fix an unsafe bounds check when restoring an SSL session from a ticket.\n     This could lead to a buffer overflow, but only in case ticket authentication\n     was broken. Reported and fix suggested by Guido Vranken in #659.\n   * Add explicit integer to enumeration type casts to example program\n     programs/pkey/gen_key which previously led to compilation failure\n     on some toolchains. Reported by phoenixmcallister. Fixes #2170.\n   * Fix double initialization of ECC hardware that made some accelerators\n     hang.\n   * Clarify documentation of mbedtls_ssl_set_own_cert() regarding the absence\n     of check for certificate/key matching. Reported by Attila Molnar, #507.\n\n = mbed TLS 2.15.1 branch released 2018-11-30\n\n Changes\n    * Update the Mbed Crypto submodule to version 0.1.0b2.\n\n = mbed TLS 2.15.0 branch released 2018-11-23\n\n Features\n    * Add an experimental build option, USE_CRYPTO_SUBMODULE, to enable use of\n      Mbed Crypto as the source of the cryptography implementation.\n    * Add an experimental configuration option, MBEDTLS_PSA_CRYPTO_C, to enable\n      the PSA Crypto API from Mbed Crypto when additionally used with the\n      USE_CRYPTO_SUBMODULE build option.\n\n Changes\n    * Add unit tests for AES-GCM when called through mbedtls_cipher_auth_xxx()\n      from the cipher abstraction layer. Fixes #2198.\n\n= mbed TLS 2.14.1 branch released 2018-11-30\n\nSecurity\n   * Fix timing variations and memory access variations in RSA PKCS#1 v1.5\n     decryption that could lead to a Bleichenbacher-style padding oracle\n     attack. In TLS, this affects servers that accept ciphersuites based on\n     RSA decryption (i.e. ciphersuites whose name contains RSA but not\n     (EC)DH(E)). Discovered by Eyal Ronen (Weizmann Institute),  Robert Gillham\n     (University of Adelaide), Daniel Genkin (University of Michigan),\n     Adi Shamir (Weizmann Institute), David Wong (NCC Group), and Yuval Yarom\n     (University of Adelaide, Data61). The attack is described in more detail\n     in the paper available here: http://cat.eyalro.net/cat.pdf  CVE-2018-19608\n   * In mbedtls_mpi_write_binary(), don't leak the exact size of the number\n     via branching and memory access patterns. An attacker who could submit\n     a plaintext for RSA PKCS#1 v1.5 decryption but only observe the timing\n     of the decryption and not its result could nonetheless decrypt RSA\n     plaintexts and forge RSA signatures. Other asymmetric algorithms may\n     have been similarly vulnerable. Reported by Eyal Ronen, Robert Gillham,\n     Daniel Genkin, Adi Shamir, David Wong and Yuval Yarom.\n   * Wipe sensitive buffers on the stack in the CTR_DRBG and HMAC_DRBG\n     modules.\n\nAPI Changes\n   * The new functions mbedtls_ctr_drbg_update_ret() and\n     mbedtls_hmac_drbg_update_ret() are similar to mbedtls_ctr_drbg_update()\n     and mbedtls_hmac_drbg_update() respectively, but the new functions\n     report errors whereas the old functions return void. We recommend that\n     applications use the new functions.\n\n= mbed TLS 2.14.0 branch released 2018-11-19\n\nSecurity\n   * Fix overly strict DN comparison when looking for CRLs belonging to a\n     particular CA. This previously led to ignoring CRLs when the CRL's issuer\n     name and the CA's subject name differed in their string encoding (e.g.,\n     one using PrintableString and the other UTF8String) or in the choice of\n     upper and lower case. Reported by Henrik Andersson of Bosch GmbH in issue\n     #1784.\n   * Fix a flawed bounds check in server PSK hint parsing. In case the\n     incoming message buffer was placed within the first 64KiB of address\n     space and a PSK-(EC)DHE ciphersuite was used, this allowed an attacker\n     to trigger a memory access up to 64KiB beyond the incoming message buffer,\n     potentially leading to an application crash or information disclosure.\n   * Fix mbedtls_mpi_is_prime() to use more rounds of probabilistic testing. The\n     previous settings for the number of rounds made it practical for an\n     adversary to construct non-primes that would be erroneously accepted as\n     primes with high probability. This does not have an impact on the\n     security of TLS, but can matter in other contexts with numbers chosen\n     potentially by an adversary that should be prime and can be validated.\n     For example, the number of rounds was enough to securely generate RSA key\n     pairs or Diffie-Hellman parameters, but was insufficient to validate\n     Diffie-Hellman parameters properly.\n     See \"Prime and Prejudice\" by by Martin R. Albrecht and Jake Massimo and\n     Kenneth G. Paterson and Juraj Somorovsky.\n\nFeatures\n   * Add support for temporarily suspending expensive ECC computations after\n     some configurable amount of operations. This is intended to be used in\n     constrained, single-threaded systems where ECC is time consuming and can\n     block other operations until they complete. This is disabled by default,\n     but can be enabled by MBEDTLS_ECP_RESTARTABLE at compile time and\n     configured by mbedtls_ecp_set_max_ops() at runtime. It applies to the new\n     xxx_restartable functions in ECP, ECDSA, PK and X.509 (CRL not supported\n     yet), and to existing functions in ECDH and SSL (currently only\n     implemented client-side, for ECDHE-ECDSA ciphersuites in TLS 1.2,\n     including client authentication).\n   * Add support for Arm CPU DSP extensions to accelerate asymmetric key\n     operations. On CPUs where the extensions are available, they can accelerate\n     MPI multiplications used in ECC and RSA cryptography. Contributed by\n     Aurelien Jarno.\n   * Extend RSASSA-PSS signature to allow a smaller salt size. Previously, PSS\n     signature always used a salt with the same length as the hash, and returned\n     an error if this was not possible. Now the salt size may be up to two bytes\n     shorter. This allows the library to support all hash and signature sizes\n     that comply with FIPS 186-4, including SHA-512 with a 1024-bit key.\n   * Add support for 128-bit keys in CTR_DRBG. Note that using keys shorter\n     than 256 bits limits the security of generated material to 128 bits.\n\nAPI Changes\n   * Add a common error code of `MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED` for\n     a feature that is not supported by underlying alternative\n     implementations implementing cryptographic primitives. This is useful for\n     hardware accelerators that don't implement all options or features.\n\nNew deprecations\n   * All module specific errors following the form\n     MBEDTLS_ERR_XXX_FEATURE_UNAVAILABLE that indicate a feature is not\n     supported are deprecated and are now replaced by the new equivalent\n     platform error.\n   * All module specific generic hardware acceleration errors following the\n     form MBEDTLS_ERR_XXX_HW_ACCEL_FAILED that are deprecated and are replaced\n     by the equivalent plaform error.\n   * Deprecate the function mbedtls_mpi_is_prime() in favor of\n     mbedtls_mpi_is_prime_ext() which allows specifying the number of\n     Miller-Rabin rounds.\n\nBugfix\n   * Fix wrong order of freeing in programs/ssl/ssl_server2 example\n     application leading to a memory leak in case both\n     MBEDTLS_MEMORY_BUFFER_ALLOC_C and MBEDTLS_MEMORY_BACKTRACE are set.\n     Fixes #2069.\n   * Fix a bug in the update function for SSL ticket keys which previously\n     invalidated keys of a lifetime of less than a 1s. Fixes #1968.\n   * Fix failure in hmac_drbg in the benchmark sample application, when\n     MBEDTLS_THREADING_C is defined. Found by TrinityTonic, #1095\n   * Fix a bug in the record decryption routine ssl_decrypt_buf()\n     which lead to accepting properly authenticated but improperly\n     padded records in case of CBC ciphersuites using Encrypt-then-MAC.\n   * Fix memory leak and freeing without initialization in the example\n     program programs/x509/cert_write. Fixes #1422.\n   * Ignore IV in mbedtls_cipher_set_iv() when the cipher mode is\n     MBEDTLS_MODE_ECB. Found by ezdevelop. Fixes #1091.\n   * Zeroize memory used for buffering or reassembling handshake messages\n     after use.\n   * Use `mbedtls_platform_zeroize()` instead of `memset()` for zeroization\n     of sensitive data in the example programs aescrypt2 and crypt_and_hash.\n   * Change the default string format used for various X.509 DN attributes to\n     UTF8String. Previously, the use of the PrintableString format led to\n     wildcards and non-ASCII characters being unusable in some DN attributes.\n     Reported by raprepo in #1860 and by kevinpt in #468. Fix contributed by\n     Thomas-Dee.\n   * Fix compilation failure for configurations which use compile time\n     replacements of standard calloc/free functions through the macros\n     MBEDTLS_PLATFORM_CALLOC_MACRO and MBEDTLS_PLATFORM_FREE_MACRO.\n     Reported by ole-de and ddhome2006. Fixes #882, #1642 and #1706.\n\nChanges\n   * Removed support for Yotta as a build tool.\n   * Add tests for session resumption in DTLS.\n   * Close a test gap in (D)TLS between the client side and the server side:\n     test the handling of large packets and small packets on the client side\n     in the same way as on the server side.\n   * Change the dtls_client and dtls_server samples to work by default over\n     IPv6 and optionally by a build option over IPv4.\n   * Change the use of Windows threading to use Microsoft Visual C++ runtime\n     calls, rather than Win32 API calls directly. This is necessary to avoid\n     conflict with C runtime usage. Found and fixed by irwir.\n   * Remember the string format of X.509 DN attributes when replicating\n     X.509 DNs. Previously, DN attributes were always written in their default\n     string format (mostly PrintableString), which could lead to CRTs being\n     created which used PrintableStrings in the issuer field even though the\n     signing CA used UTF8Strings in its subject field; while X.509 compliant,\n     such CRTs were rejected in some applications, e.g. some versions of\n     Firefox, curl and GnuTLS. Reported in #1033 by Moschn. Fix contributed by\n     Thomas-Dee.\n   * Improve documentation of mbedtls_ssl_get_verify_result().\n     Fixes #517 reported by github-monoculture.\n   * Add MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR flag to mbedtls_mpi_gen_prime() and\n     use it to reduce error probability in RSA key generation to levels mandated\n     by FIPS-186-4.\n\n= mbed TLS 2.13.1 branch released 2018-09-06\n\nAPI Changes\n   * Extend the platform module with an abstraction mbedtls_platform_gmtime_r()\n     whose implementation should behave as a thread-safe version of gmtime().\n     This allows users to configure such an implementation at compile time when\n     the target system cannot be deduced automatically, by setting the option\n     MBEDTLS_PLATFORM_GMTIME_R_ALT. At this stage Mbed TLS is only able to\n     automatically select implementations for Windows and POSIX C libraries.\n\nBugfix\n   * Fix build failures on platforms where only gmtime() is available but\n     neither gmtime_r() nor gmtime_s() are present. Fixes #1907.\n\n= mbed TLS 2.13.0 branch released 2018-08-31\n\nSecurity\n   * Fix an issue in the X.509 module which could lead to a buffer overread\n     during certificate extensions parsing. In case of receiving malformed\n     input (extensions length field equal to 0), an illegal read of one byte\n     beyond the input buffer is made. Found and analyzed by Nathan Crandall.\n\nFeatures\n   * Add support for fragmentation of outgoing DTLS handshake messages. This\n     is controlled by the maximum fragment length as set locally or negotiated\n     with the peer, as well as by a new per-connection MTU option, set using\n     mbedtls_ssl_set_mtu().\n   * Add support for auto-adjustment of MTU to a safe value during the\n     handshake when flights do not get through (RFC 6347, section 4.1.1.1,\n     last paragraph).\n   * Add support for packing multiple records within a single datagram,\n     enabled by default.\n   * Add support for buffering out-of-order handshake messages in DTLS.\n     The maximum amount of RAM used for this can be controlled by the\n     compile-time constant MBEDTLS_SSL_DTLS_MAX_BUFFERING defined\n     in mbedtls/config.h.\n\nAPI Changes\n   * Add function mbedtls_ssl_set_datagram_packing() to configure\n     the use of datagram packing (enabled by default).\n\nBugfix\n   * Fix a potential memory leak in mbedtls_ssl_setup() function. An allocation\n     failure in the function could lead to other buffers being leaked.\n   * Fixes an issue with MBEDTLS_CHACHAPOLY_C which would not compile if\n     MBEDTLS_ARC4_C and MBEDTLS_CIPHER_NULL_CIPHER weren't also defined. #1890\n   * Fix a memory leak in ecp_mul_comb() if ecp_precompute_comb() fails.\n     Fix contributed by Espressif Systems.\n   * Add ecc extensions only if an ecc based ciphersuite is used.\n     This improves compliance to RFC 4492, and as a result, solves\n     interoperability issues with BouncyCastle. Raised by milenamil in #1157.\n   * Replace printf with mbedtls_printf in the ARIA module. Found by\n     TrinityTonic in #1908.\n   * Fix potential use-after-free in mbedtls_ssl_get_max_frag_len()\n     and mbedtls_ssl_get_record_expansion() after a session reset. Fixes #1941.\n   * Fix a bug that caused SSL/TLS clients to incorrectly abort the handshake\n     with TLS versions 1.1 and earlier when the server requested authentication\n     without providing a list of CAs. This was due to an overly strict bounds\n     check in parsing the CertificateRequest message,\n     introduced in Mbed TLS 2.12.0. Fixes #1954.\n   * Fix a miscalculation of the maximum record expansion in\n     mbedtls_ssl_get_record_expansion() in case of ChachaPoly ciphersuites,\n     or CBC ciphersuites in (D)TLS versions 1.1 or higher. Fixes #1913, #1914.\n   * Fix undefined shifts with negative values in certificates parsing\n     (found by Catena cyber using oss-fuzz)\n   * Fix memory leak and free without initialization in pk_encrypt\n     and pk_decrypt example programs. Reported by Brace Stout. Fixes #1128.\n   * Remove redundant else statement. Raised by irwir. Fixes #1776.\n\nChanges\n   * Copy headers preserving timestamps when doing a \"make install\".\n     Contributed by xueruini.\n   * Allow the forward declaration of public structs. Contributed by Dawid\n     Drozd. Fixes #1215 raised by randombit.\n   * Improve compatibility with some alternative CCM implementations by using\n     CCM test vectors from RAM.\n   * Add support for buffering of out-of-order handshake messages.\n   * Add warnings to the documentation of the HKDF module to reduce the risk\n     of misusing the mbedtls_hkdf_extract() and mbedtls_hkdf_expand()\n     functions. Fixes #1775. Reported by Brian J. Murray.\n\n= mbed TLS 2.12.0 branch released 2018-07-25\n\nSecurity\n   * Fix a vulnerability in TLS ciphersuites based on CBC and using SHA-384,\n     in (D)TLS 1.0 to 1.2, that allowed an active network attacker to\n     partially recover the plaintext of messages under some conditions by\n     exploiting timing measurements. With DTLS, the attacker could perform\n     this recovery by sending many messages in the same connection. With TLS\n     or if mbedtls_ssl_conf_dtls_badmac_limit() was used, the attack only\n     worked if the same secret (for example a HTTP Cookie) has been repeatedly\n     sent over connections manipulated by the attacker. Connections using GCM\n     or CCM instead of CBC, using hash sizes other than SHA-384, or using\n     Encrypt-then-Mac (RFC 7366) were not affected. The vulnerability was\n     caused by a miscalculation (for SHA-384) in a countermeasure to the\n     original Lucky 13 attack. Found by Kenny Paterson, Eyal Ronen and Adi\n     Shamir.\n   * Fix a vulnerability in TLS ciphersuites based on CBC, in (D)TLS 1.0 to\n     1.2, that allowed a local attacker, able to execute code on the local\n     machine as well as manipulate network packets, to partially recover the\n     plaintext of messages under some conditions by using a cache attack\n     targeting an internal MD/SHA buffer. With TLS or if\n     mbedtls_ssl_conf_dtls_badmac_limit() was used, the attack only worked if\n     the same secret (for example a HTTP Cookie) has been repeatedly sent over\n     connections manipulated by the attacker. Connections using GCM or CCM\n     instead of CBC or using Encrypt-then-Mac (RFC 7366) were not affected.\n     Found by Kenny Paterson, Eyal Ronen and Adi Shamir.\n   * Add a counter-measure against a vulnerability in TLS ciphersuites based\n     on CBC, in (D)TLS 1.0 to 1.2, that allowed a local attacker, able to\n     execute code on the local machine as well as manipulate network packets,\n     to partially recover the plaintext of messages under some conditions (see\n     previous entry) by using a cache attack targeting the SSL input record\n     buffer. Connections using GCM or CCM instead of CBC or using\n     Encrypt-then-Mac (RFC 7366) were not affected. Found by Kenny Paterson,\n     Eyal Ronen and Adi Shamir.\n\nFeatures\n   * Add new crypto primitives from RFC 7539: stream cipher Chacha20, one-time\n     authenticator Poly1305 and AEAD construct Chacha20-Poly1305. Contributed\n     by Daniel King.\n   * Add support for CHACHA20-POLY1305 ciphersuites from RFC 7905.\n   * Add platform support for the Haiku OS. (https://www.haiku-os.org).\n     Contributed by Augustin Cavalier.\n   * Make the receive and transmit buffers independent sizes, for situations\n     where the outgoing buffer can be fixed at a smaller size than the incoming\n     buffer, which can save some RAM. If buffer lengths are kept equal, there\n     is no functional difference. Contributed by Angus Gratton, and also\n     independently contributed again by Paul Sokolovsky.\n   * Add support for key wrapping modes based on AES as defined by\n     NIST SP 800-38F algorithms KW and KWP and by RFC 3394 and RFC 5649.\n\nBugfix\n   * Fix the key_app_writer example which was writing a leading zero byte which\n     was creating an invalid ASN.1 tag. Found by Aryeh R. Fixes #1257.\n   * Fix compilation error on C++, because of a variable named new.\n     Found and fixed by Hirotaka Niisato in #1783.\n   * Fix \"no symbols\" warning issued by ranlib when building on Mac OS X. Fix\n     contributed by tabascoeye.\n   * Clarify documentation for mbedtls_ssl_write() to include 0 as a valid\n     return value. Found by @davidwu2000. #839\n   * Fix a memory leak in mbedtls_x509_csr_parse(), found by catenacyber,\n     Philippe Antoine. Fixes #1623.\n   * Remove unused headers included in x509.c. Found by Chris Hanson and fixed\n     by Brendan Shanks. Part of a fix for #992.\n   * Fix compilation error when MBEDTLS_ARC4_C is disabled and\n     MBEDTLS_CIPHER_NULL_CIPHER is enabled. Found by TrinityTonic in #1719.\n   * Added length checks to some TLS parsing functions. Found and fixed by\n     Philippe Antoine from Catena cyber. #1663.\n   * Fix the inline assembly for the MPI multiply helper function for i386 and\n     i386 with SSE2. Found by László Langó. Fixes #1550\n   * Fix namespacing in header files. Remove the `mbedtls` namespacing in\n     the `#include` in the header files. Resolves #857\n   * Fix compiler warning of 'use before initialisation' in\n     mbedtls_pk_parse_key(). Found by Martin Boye Petersen and fixed by Dawid\n     Drozd. #1098\n   * Fix decryption for zero length messages (which contain all padding) when a\n     CBC based ciphersuite is used together with Encrypt-then-MAC. Previously,\n     such a message was wrongly reported as an invalid record and therefore lead\n     to the connection being terminated. Seen most often with OpenSSL using\n     TLS 1.0. Reported by @kFYatek and by Conor Murphy on the forum. Fix\n     contributed by Espressif Systems. Fixes #1632\n   * Fix ssl_client2 example to send application data with 0-length content\n     when the request_size argument is set to 0 as stated in the documentation.\n     Fixes #1833.\n   * Correct the documentation for `mbedtls_ssl_get_session()`. This API has\n     deep copy of the session, and the peer certificate is not lost. Fixes #926.\n   * Fix build using -std=c99. Fixed by Nick Wilson.\n\nChanges\n   * Fail when receiving a TLS alert message with an invalid length, or invalid\n     zero-length messages when using TLS 1.2. Contributed by Espressif Systems.\n   * Change the default behaviour of mbedtls_hkdf_extract() to return an error\n     when calling with a NULL salt and non-zero salt_len. Contributed by\n     Brian J Murray\n   * Change the shebang line in Perl scripts to look up perl in the PATH.\n     Contributed by fbrosson.\n   * Allow overriding the time on Windows via the platform-time abstraction.\n     Fixed by Nick Wilson.\n   * Use gmtime_r/gmtime_s for thread-safety. Fixed by Nick Wilson.\n\n= mbed TLS 2.11.0 branch released 2018-06-18\n\nFeatures\n   * Add additional block mode, OFB (Output Feedback), to the AES module and\n     cipher abstraction module.\n   * Implement the HMAC-based extract-and-expand key derivation function\n     (HKDF) per RFC 5869. Contributed by Thomas Fossati.\n   * Add support for the CCM* block cipher mode as defined in IEEE Std. 802.15.4.\n   * Add support for the XTS block cipher mode with AES (AES-XTS).\n     Contributed by Aorimn in pull request #414.\n   * In TLS servers, support offloading private key operations to an external\n     cryptoprocessor. Private key operations can be asynchronous to allow\n     non-blocking operation of the TLS server stack.\n\nBugfix\n   * Fix the cert_write example to handle certificates signed with elliptic\n     curves as well as RSA. Fixes #777 found by dbedev.\n   * Fix for redefinition of _WIN32_WINNT to avoid overriding a definition\n     used by user applications. Found and fixed by Fabio Alessandrelli.\n   * Fix compilation warnings with IAR toolchain, on 32 bit platform.\n     Reported by rahmanih in #683\n   * Fix braces in mbedtls_memory_buffer_alloc_status(). Found by sbranden, #552.\n\nChanges\n   * Changed CMake defaults for IAR to treat all compiler warnings as errors.\n   * Changed the Clang parameters used in the CMake build files to work for\n     versions later than 3.6. Versions of Clang earlier than this may no longer\n     work. Fixes #1072\n\n= mbed TLS 2.10.0 branch released 2018-06-06\n\nFeatures\n   * Add support for ARIA cipher (RFC 5794) and associated TLS ciphersuites\n     (RFC 6209). Disabled by default, see MBEDTLS_ARIA_C in config.h\n\nAPI Changes\n   * Extend the platform module with a util component that contains\n     functionality shared by multiple Mbed TLS modules. At this stage\n     platform_util.h (and its associated platform_util.c) only contain\n     mbedtls_platform_zeroize(), which is a critical function from a security\n     point of view. mbedtls_platform_zeroize() needs to be regularly tested\n     against compilers to ensure that calls to it are not removed from the\n     output binary as part of redundant code elimination optimizations.\n     Therefore, mbedtls_platform_zeroize() is moved to the platform module to\n     facilitate testing and maintenance.\n\nBugfix\n   * Fix an issue with MicroBlaze support in bn_mul.h which was causing the\n     build to fail. Found by zv-io. Fixes #1651.\n\nChanges\n   * Support TLS testing in out-of-source builds using cmake. Fixes #1193.\n   * Fix redundant declaration of mbedtls_ssl_list_ciphersuites. Raised by\n     TrinityTonic. #1359.\n\n= mbed TLS 2.9.0 branch released 2018-04-30\n\nSecurity\n   * Fix an issue in the X.509 module which could lead to a buffer overread\n     during certificate validation. Additionally, the issue could also lead to\n     unnecessary callback checks being made or to some validation checks to be\n     omitted. The overread could be triggered remotely, while the other issues\n     would require a non DER-compliant certificate to be correctly signed by a\n     trusted CA, or a trusted CA with a non DER-compliant certificate. Found by\n     luocm. Fixes #825.\n   * Fix the buffer length assertion in the ssl_parse_certificate_request()\n     function which led to an arbitrary overread of the message buffer. The\n     overreads could be caused by receiving a malformed message at the point\n     where an optional signature algorithms list is expected when the signature\n     algorithms section is too short. In builds with debug output, the overread\n     data is output with the debug data.\n   * Fix a client-side bug in the validation of the server's ciphersuite choice\n     which could potentially lead to the client accepting a ciphersuite it didn't\n     offer or a ciphersuite that cannot be used with the TLS or DTLS version\n     chosen by the server. This could lead to corruption of internal data\n     structures for some configurations.\n\nFeatures\n   * Add an option, MBEDTLS_AES_FEWER_TABLES, to dynamically compute smaller AES\n     tables during runtime, thereby reducing the RAM/ROM footprint by ~6KiB.\n     Suggested and contributed by jkivilin in pull request #394.\n   * Add initial support for Curve448 (RFC 7748). Only mbedtls_ecp_mul() and\n     ECDH primitive functions (mbedtls_ecdh_gen_public(),\n     mbedtls_ecdh_compute_shared()) are supported for now. Contributed by\n     Nicholas Wilson in pull request #348.\n\nAPI Changes\n   * Extend the public API with the function of mbedtls_net_poll() to allow user\n     applications to wait for a network context to become ready before reading\n     or writing.\n   * Add function mbedtls_ssl_check_pending() to the public API to allow\n     a check for whether more more data is pending to be processed in the\n     internal message buffers.\n     This function is necessary to determine when it is safe to idle on the\n     underlying transport in case event-driven IO is used.\n\nBugfix\n   * Fix a spurious uninitialized variable warning in cmac.c. Fix independently\n     contributed by Brian J Murray and David Brown.\n   * Add missing dependencies in test suites that led to build failures\n     in configurations that omit certain hashes or public-key algorithms.\n     Fixes #1040.\n   * Fix C89 incompatibility in benchmark.c. Contributed by Brendan Shanks.\n     #1353\n   * Add missing dependencies for MBEDTLS_HAVE_TIME_DATE and\n     MBEDTLS_VERSION_FEATURES in some test suites. Contributed by\n     Deomid Ryabkov. Fixes #1299, #1475.\n   * Fix the Makefile build process for building shared libraries on Mac OS X.\n     Fixed by mnacamura.\n   * Fix parsing of PKCS#8 encoded Elliptic Curve keys. Previously Mbed TLS was\n     unable to parse keys which had only the optional parameters field of the\n     ECPrivateKey structure. Found by Jethro Beekman, fixed in #1379.\n   * Return the plaintext data more quickly on unpadded CBC decryption, as\n     stated in the mbedtls_cipher_update() documentation. Contributed by\n     Andy Leiserson.\n   * Fix overriding and ignoring return values when parsing and writing to\n     a file in pk_sign program. Found by kevlut in #1142.\n   * Restrict usage of error code MBEDTLS_ERR_SSL_WANT_READ to situations\n     where data needs to be fetched from the underlying transport in order\n     to make progress. Previously, this error code was also occasionally\n     returned when unexpected messages were being discarded, ignoring that\n     further messages could potentially already be pending to be processed\n     in the internal buffers; these cases led to deadlocks when event-driven\n     I/O was used. Found and reported by Hubert Mis in #772.\n   * Fix buffer length assertions in the ssl_parse_certificate_request()\n     function which leads to a potential one byte overread of the message\n     buffer.\n   * Fix invalid buffer sizes passed to zlib during record compression and\n     decompression.\n   * Fix the soversion of libmbedcrypto to match the soversion of the\n     maintained 2.7 branch. The soversion was increased in Mbed TLS\n     version 2.7.1 to reflect breaking changes in that release, but the\n     increment was missed in 2.8.0 and later releases outside of the 2.7 branch.\n\nChanges\n   * Remove some redundant code in bignum.c. Contributed by Alexey Skalozub.\n   * Support cmake builds where Mbed TLS is a subproject. Fix contributed\n     independently by Matthieu Volat and Arne Schwabe.\n   * Improve testing in configurations that omit certain hashes or\n     public-key algorithms. Includes contributions by Gert van Dijk.\n   * Improve negative testing of X.509 parsing.\n   * Do not define global mutexes around readdir() and gmtime() in\n     configurations where the feature is disabled. Found and fixed by Gergely\n     Budai.\n   * Harden the function mbedtls_ssl_config_free() against misuse, so that it\n     doesn't leak memory if the user doesn't use mbedtls_ssl_conf_psk() and\n     instead incorrectly manipulates the configuration structure directly.\n     Found and fix submitted by junyeonLEE in #1220.\n   * Provide an empty implementation of mbedtls_pkcs5_pbes2() when\n     MBEDTLS_ASN1_PARSE_C is not enabled. This allows the use of PBKDF2\n     without PBES2. Fixed by Marcos Del Sol Vives.\n   * Add the order of the base point as N in the mbedtls_ecp_group structure\n     for Curve25519 (other curves had it already). Contributed by Nicholas\n     Wilson #481\n   * Improve the documentation of mbedtls_net_accept(). Contributed by Ivan\n     Krylov.\n   * Improve the documentation of mbedtls_ssl_write(). Suggested by\n     Paul Sokolovsky in #1356.\n   * Add an option in the Makefile to support ar utilities where the operation\n     letter must not be prefixed by '-', such as LLVM. Found and fixed by\n     Alex Hixon.\n   * Allow configuring the shared library extension by setting the DLEXT\n     environment variable when using the project makefiles.\n   * Optimize unnecessary zeroing in mbedtls_mpi_copy. Based on a contribution\n     by Alexey Skalozub in #405.\n   * In the SSL module, when f_send, f_recv or f_recv_timeout report\n     transmitting more than the required length, return an error. Raised by\n     Sam O'Connor in #1245.\n   * Improve robustness of mbedtls_ssl_derive_keys against the use of\n     HMAC functions with non-HMAC ciphersuites. Independently contributed\n     by Jiayuan Chen in #1377. Fixes #1437.\n   * Improve security of RSA key generation by including criteria from\n     FIPS 186-4. Contributed by Jethro Beekman. #1380\n   * Declare functions in header files even when an alternative implementation\n     of the corresponding module is activated by defining the corresponding\n     MBEDTLS_XXX_ALT macro. This means that alternative implementations do\n     not need to copy the declarations, and ensures that they will have the\n     same API.\n   * Add platform setup and teardown calls in test suites.\n\n= mbed TLS 2.8.0 branch released 2018-03-16\n\nDefault behavior changes\n   * The truncated HMAC extension now conforms to RFC 6066. This means\n     that when both sides of a TLS connection negotiate the truncated\n     HMAC extension, Mbed TLS can now interoperate with other\n     compliant implementations, but this breaks interoperability with\n     prior versions of Mbed TLS. To restore the old behavior, enable\n     the (deprecated) option MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT in\n     config.h. Found by Andreas Walz (ivESK, Offenburg University of\n     Applied Sciences).\n\nSecurity\n   * Fix implementation of the truncated HMAC extension. The previous\n     implementation allowed an offline 2^80 brute force attack on the\n     HMAC key of a single, uninterrupted connection (with no\n     resumption of the session).\n   * Verify results of RSA private key operations to defend\n     against Bellcore glitch attack.\n   * Fix a buffer overread in ssl_parse_server_key_exchange() that could cause\n     a crash on invalid input.\n   * Fix a buffer overread in ssl_parse_server_psk_hint() that could cause a\n     crash on invalid input.\n   * Fix CRL parsing to reject CRLs containing unsupported critical\n     extensions. Found by Falko Strenzke and Evangelos Karatsiolis.\n\nFeatures\n   * Extend PKCS#8 interface by introducing support for the entire SHA\n     algorithms family when encrypting private keys using PKCS#5 v2.0.\n     This allows reading encrypted PEM files produced by software that\n     uses PBKDF2-SHA2, such as OpenSSL 1.1. Submitted by Antonio Quartulli,\n     OpenVPN Inc. Fixes #1339\n   * Add support for public keys encoded in PKCS#1 format. #1122\n\nNew deprecations\n   * Deprecate support for record compression (configuration option\n     MBEDTLS_ZLIB_SUPPORT).\n\nBugfix\n   * Fix the name of a DHE parameter that was accidentally changed in 2.7.0.\n     Fixes #1358.\n   * Fix test_suite_pk to work on 64-bit ILP32 systems. #849\n   * Fix mbedtls_x509_crt_profile_suiteb, which used to reject all certificates\n     with flag MBEDTLS_X509_BADCERT_BAD_PK even when the key type was correct.\n     In the context of SSL, this resulted in handshake failure. Reported by\n     daniel in the Mbed TLS forum. #1351\n   * Fix Windows x64 builds with the included mbedTLS.sln file. #1347\n   * Fix setting version TLSv1 as minimal version, even if TLS 1\n     is not enabled. Set MBEDTLS_SSL_MIN_MAJOR_VERSION\n     and MBEDTLS_SSL_MIN_MINOR_VERSION instead of\n     MBEDTLS_SSL_MAJOR_VERSION_3 and MBEDTLS_SSL_MINOR_VERSION_1. #664\n   * Fix compilation error on Mingw32 when _TRUNCATE is defined. Use _TRUNCATE\n     only if __MINGW32__ not defined. Fix suggested by Thomas Glanzmann and\n     Nick Wilson on issue #355\n   * In test_suite_pk, pass valid parameters when testing for hash length\n     overflow. #1179\n   * Fix memory allocation corner cases in memory_buffer_alloc.c module. Found\n     by Guido Vranken. #639\n   * Log correct number of ciphersuites used in Client Hello message. #918\n   * Fix X509 CRT parsing that would potentially accept an invalid tag when\n     parsing the subject alternative names.\n   * Fix a possible arithmetic overflow in ssl_parse_server_key_exchange()\n     that could cause a key exchange to fail on valid data.\n   * Fix a possible arithmetic overflow in ssl_parse_server_psk_hint() that\n     could cause a key exchange to fail on valid data.\n   * Don't define mbedtls_aes_decrypt and mbedtls_aes_encrypt under\n     MBEDTLS_DEPRECATED_REMOVED. #1388\n   * Fix a 1-byte heap buffer overflow (read-only) during private key parsing.\n     Found through fuzz testing.\n\nChanges\n   * Fix tag lengths and value ranges in the documentation of CCM encryption.\n     Contributed by Mathieu Briand.\n   * Fix typo in a comment ctr_drbg.c. Contributed by Paul Sokolovsky.\n   * Remove support for the library reference configuration for picocoin.\n   * MD functions deprecated in 2.7.0 are no longer inline, to provide\n     a migration path for those depending on the library's ABI.\n   * Clarify the documentation of mbedtls_ssl_setup.\n   * Use (void) when defining functions with no parameters. Contributed by\n     Joris Aerts. #678\n\n= mbed TLS 2.7.0 branch released 2018-02-03\n\nSecurity\n   * Fix a heap corruption issue in the implementation of the truncated HMAC\n     extension. When the truncated HMAC extension is enabled and CBC is used,\n     sending a malicious application packet could be used to selectively corrupt\n     6 bytes on the peer's heap, which could potentially lead to crash or remote\n     code execution. The issue could be triggered remotely from either side in\n     both TLS and DTLS. CVE-2018-0488\n   * Fix a buffer overflow in RSA-PSS verification when the hash was too large\n     for the key size, which could potentially lead to crash or remote code\n     execution. Found by Seth Terashima, Qualcomm Product Security Initiative,\n     Qualcomm Technologies Inc. CVE-2018-0487\n   * Fix buffer overflow in RSA-PSS verification when the unmasked data is all\n     zeros.\n   * Fix an unsafe bounds check in ssl_parse_client_psk_identity() when adding\n     64 KiB to the address of the SSL buffer and causing a wrap around.\n   * Fix a potential heap buffer overflow in mbedtls_ssl_write(). When the (by\n     default enabled) maximum fragment length extension is disabled in the\n     config and the application data buffer passed to mbedtls_ssl_write\n     is larger than the internal message buffer (16384 bytes by default), the\n     latter overflows. The exploitability of this issue depends on whether the\n     application layer can be forced into sending such large packets. The issue\n     was independently reported by Tim Nordell via e-mail and by Florin Petriuc\n     and sjorsdewit on GitHub. Fix proposed by Florin Petriuc in #1022.\n     Fixes #707.\n   * Add a provision to prevent compiler optimizations breaking the time\n     constancy of mbedtls_ssl_safer_memcmp().\n   * Ensure that buffers are cleared after use if they contain sensitive data.\n     Changes were introduced in multiple places in the library.\n   * Set PEM buffer to zero before freeing it, to avoid decoded private keys\n     being leaked to memory after release.\n   * Fix dhm_check_range() failing to detect trivial subgroups and potentially\n     leaking 1 bit of the private key. Reported by prashantkspatil.\n   * Make mbedtls_mpi_read_binary() constant-time with respect to the input\n     data. Previously, trailing zero bytes were detected and omitted for the\n     sake of saving memory, but potentially leading to slight timing\n     differences. Reported by Marco Macchetti, Kudelski Group.\n   * Wipe stack buffer temporarily holding EC private exponent\n     after keypair generation.\n   * Fix a potential heap buffer over-read in ALPN extension parsing\n     (server-side). Could result in application crash, but only if an ALPN\n     name larger than 16 bytes had been configured on the server.\n   * Change default choice of DHE parameters from untrustworthy RFC 5114\n     to RFC 3526 containing parameters generated in a nothing-up-my-sleeve\n     manner.\n\nFeatures\n   * Allow comments in test data files.\n   * The selftest program can execute a subset of the tests based on command\n     line arguments.\n   * New unit tests for timing. Improve the self-test to be more robust\n     when run on a heavily-loaded machine.\n   * Add alternative implementation support for CCM and CMAC (MBEDTLS_CCM_ALT,\n     MBEDTLS_CMAC_ALT). Submitted by Steven Cooreman, Silicon Labs.\n   * Add support for alternative implementations of GCM, selected by the\n     configuration flag MBEDTLS_GCM_ALT.\n   * Add support for alternative implementations for ECDSA, controlled by new\n     configuration flags MBEDTLS_ECDSA_SIGN_ALT, MBEDTLS_ECDSA_VERIFY_ALT and\n     MBEDTLS_ECDSDA_GENKEY_AT in config.h.\n     The following functions from the ECDSA module can be replaced\n     with alternative implementation:\n     mbedtls_ecdsa_sign(), mbedtls_ecdsa_verify() and mbedtls_ecdsa_genkey().\n   * Add support for alternative implementation of ECDH, controlled by the\n     new configuration flags MBEDTLS_ECDH_COMPUTE_SHARED_ALT and\n     MBEDTLS_ECDH_GEN_PUBLIC_ALT in config.h.\n     The following functions from the ECDH module can be replaced\n     with an alternative implementation:\n     mbedtls_ecdh_gen_public() and mbedtls_ecdh_compute_shared().\n   * Add support for alternative implementation of ECJPAKE, controlled by\n     the new configuration flag MBEDTLS_ECJPAKE_ALT.\n   * Add mechanism to provide alternative implementation of the DHM module.\n\nAPI Changes\n   * Extend RSA interface by multiple functions allowing structure-\n     independent setup and export of RSA contexts. Most notably,\n     mbedtls_rsa_import() and mbedtls_rsa_complete() are introduced for setting\n     up RSA contexts from partial key material and having them completed to the\n     needs of the implementation automatically. This allows to setup private RSA\n     contexts from keys consisting of N,D,E only, even if P,Q are needed for the\n     purpose or CRT and/or blinding.\n   * The configuration option MBEDTLS_RSA_ALT can be used to define alternative\n     implementations of the RSA interface declared in rsa.h.\n   * The following functions in the message digest modules (MD2, MD4, MD5,\n     SHA1, SHA256, SHA512) have been deprecated and replaced as shown below.\n     The new functions change the return type from void to int to allow\n     returning error codes when using MBEDTLS_<MODULE>_ALT.\n     mbedtls_<MODULE>_starts() -> mbedtls_<MODULE>_starts_ret()\n     mbedtls_<MODULE>_update() -> mbedtls_<MODULE>_update_ret()\n     mbedtls_<MODULE>_finish() -> mbedtls_<MODULE>_finish_ret()\n     mbedtls_<MODULE>_process() -> mbedtls_internal_<MODULE>_process()\n\nNew deprecations\n   * Deprecate usage of RSA primitives with non-matching key-type\n     (e.g. signing with a public key).\n   * Direct manipulation of structure fields of RSA contexts is deprecated.\n     Users are advised to use the extended RSA API instead.\n   * Deprecate usage of message digest functions that return void\n     (mbedtls_<MODULE>_starts, mbedtls_<MODULE>_update,\n     mbedtls_<MODULE>_finish and mbedtls_<MODULE>_process where <MODULE> is\n     any of MD2, MD4, MD5, SHA1, SHA256, SHA512) in favor of functions\n     that can return an error code.\n   * Deprecate untrustworthy DHE parameters from RFC 5114. Superseded by\n     parameters from RFC 3526 or the newly added parameters from RFC 7919.\n   * Deprecate hex string DHE constants MBEDTLS_DHM_RFC3526_MODP_2048_P etc.\n     Supserseded by binary encoded constants MBEDTLS_DHM_RFC3526_MODP_2048_P_BIN\n     etc.\n   * Deprecate mbedtls_ssl_conf_dh_param() for setting default DHE parameters\n     from hex strings. Superseded by mbedtls_ssl_conf_dh_param_bin()\n     accepting DHM parameters in binary form, matching the new constants.\n\nBugfix\n   * Fix ssl_parse_record_header() to silently discard invalid DTLS records\n     as recommended in RFC 6347 Section 4.1.2.7.\n   * Fix memory leak in mbedtls_ssl_set_hostname() when called multiple times.\n     Found by projectgus and Jethro Beekman, #836.\n   * Fix usage help in ssl_server2 example. Found and fixed by Bei Lin.\n   * Parse signature algorithm extension when renegotiating. Previously,\n     renegotiated handshakes would only accept signatures using SHA-1\n     regardless of the peer's preferences, or fail if SHA-1 was disabled.\n   * Fix leap year calculation in x509_date_is_valid() to ensure that invalid\n     dates on leap years with 100 and 400 intervals are handled correctly. Found\n     by Nicholas Wilson. #694\n   * Fix some invalid RSA-PSS signatures with keys of size 8N+1 that were\n     accepted. Generating these signatures required the private key.\n   * Fix out-of-memory problem when parsing 4096-bit PKCS8-encrypted RSA keys.\n     Found independently by Florian in the mbed TLS forum and by Mishamax.\n     #878, #1019.\n   * Fix variable used before assignment compilation warnings with IAR\n     toolchain. Found by gkerrien38.\n   * Fix unchecked return codes from AES, DES and 3DES functions in\n     pem_aes_decrypt(), pem_des_decrypt() and pem_des3_decrypt() respectively.\n     If a call to one of the functions of the cryptographic primitive modules\n     failed, the error may not be noticed by the function\n     mbedtls_pem_read_buffer() causing it to return invalid values. Found by\n     Guido Vranken. #756\n   * Include configuration file in md.h, to fix compilation warnings.\n     Reported by aaronmdjones in #1001\n   * Correct extraction of signature-type from PK instance in X.509 CRT and CSR\n     writing routines that prevented these functions to work with alternative\n     RSA implementations. Raised by J.B. in the Mbed TLS forum. Fixes #1011.\n   * Don't print X.509 version tag for v1 CRT's, and omit extensions for\n     non-v3 CRT's.\n   * Fix bugs in RSA test suite under MBEDTLS_NO_PLATFORM_ENTROPY. #1023 #1024\n   * Fix net_would_block() to avoid modification by errno through fcntl() call.\n     Found by nkolban. Fixes #845.\n   * Fix handling of handshake messages in mbedtls_ssl_read() in case\n     MBEDTLS_SSL_RENEGOTIATION is disabled. Found by erja-gp.\n   * Add a check for invalid private parameters in mbedtls_ecdsa_sign().\n     Reported by Yolan Romailler.\n   * Fix word size check in in pk.c to not depend on MBEDTLS_HAVE_INT64.\n   * Fix incorrect unit in benchmark output. #850\n   * Add size-checks for record and handshake message content, securing\n     fragile yet non-exploitable code-paths.\n   * Fix crash when calling mbedtls_ssl_cache_free() twice. Found by\n     MilenkoMitrovic, #1104\n   * Fix mbedtls_timing_alarm(0) on Unix and MinGW.\n   * Fix use of uninitialized memory in mbedtls_timing_get_timer() when reset=1.\n   * Fix possible memory leaks in mbedtls_gcm_self_test().\n   * Added missing return code checks in mbedtls_aes_self_test().\n   * Fix issues in RSA key generation program programs/x509/rsa_genkey and the\n     RSA test suite where the failure of CTR DRBG initialization lead to\n     freeing an RSA context and several MPI's without proper initialization\n     beforehand.\n   * Fix error message in programs/pkey/gen_key.c. Found and fixed by Chris Xue.\n   * Fix programs/pkey/dh_server.c so that it actually works with dh_client.c.\n     Found and fixed by Martijn de Milliano.\n   * Fix an issue in the cipher decryption with the mode\n     MBEDTLS_PADDING_ONE_AND_ZEROS that sometimes accepted invalid padding.\n     Note, this padding mode is not used by the TLS protocol. Found and fixed by\n     Micha Kraus.\n   * Fix the entropy.c module to not call mbedtls_sha256_starts() or\n     mbedtls_sha512_starts() in the mbedtls_entropy_init() function.\n   * Fix the entropy.c module to ensure that mbedtls_sha256_init() or\n     mbedtls_sha512_init() is called before operating on the relevant context\n     structure. Do not assume that zeroizing a context is a correct way to\n     reset it. Found independently by ccli8 on Github.\n   * In mbedtls_entropy_free(), properly free the message digest context.\n   * Fix status handshake status message in programs/ssl/dtls_client.c. Found\n     and fixed by muddog.\n\nChanges\n   * Extend cert_write example program by options to set the certificate version\n     and the message digest. Further, allow enabling/disabling of authority\n     identifier, subject identifier and basic constraints extensions.\n   * Only check for necessary RSA structure fields in `mbedtls_rsa_private`. In\n     particular, don't require P,Q if neither CRT nor blinding are\n     used. Reported and fix proposed independently by satur9nine and sliai\n     on GitHub.\n   * Only run AES-192 self-test if AES-192 is available. Fixes #963.\n   * Tighten the RSA PKCS#1 v1.5 signature verification code and remove the\n     undeclared dependency of the RSA module on the ASN.1 module.\n   * Update all internal usage of deprecated message digest functions to the\n     new ones with return codes. In particular, this modifies the\n     mbedtls_md_info_t structure. Propagate errors from these functions\n     everywhere except some locations in the ssl_tls.c module.\n   * Improve CTR_DRBG error handling by propagating underlying AES errors.\n   * Add MBEDTLS_ERR_XXX_HW_ACCEL_FAILED error codes for all cryptography\n     modules where the software implementation can be replaced by a hardware\n     implementation.\n   * Add explicit warnings for the use of MD2, MD4, MD5, SHA-1, DES and ARC4\n     throughout the library.\n\n= mbed TLS 2.6.0 branch released 2017-08-10\n\nSecurity\n   * Fix authentication bypass in SSL/TLS: when authmode is set to optional,\n     mbedtls_ssl_get_verify_result() would incorrectly return 0 when the peer's\n     X.509 certificate chain had more than MBEDTLS_X509_MAX_INTERMEDIATE_CA\n     (default: 8) intermediates, even when it was not trusted. This could be\n     triggered remotely from either side. (With authmode set to 'required'\n     (the default), the handshake was correctly aborted).\n   * Reliably wipe sensitive data after use in the AES example applications\n     programs/aes/aescrypt2 and programs/aes/crypt_and_hash.\n     Found by Laurent Simon.\n\nFeatures\n   * Add the functions mbedtls_platform_setup() and mbedtls_platform_teardown()\n     and the context struct mbedtls_platform_context to perform\n     platform-specific setup and teardown operations. The macro\n     MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT allows the functions to be overridden\n     by the user in a platform_alt.h file. These new functions are required in\n     some embedded environments to provide a means of initialising underlying\n     cryptographic acceleration hardware.\n\nAPI Changes\n   * Reverted API/ABI breaking changes introduced in mbed TLS 2.5.1, to make the\n     API consistent with mbed TLS 2.5.0. Specifically removed the inline\n     qualifier from the functions mbedtls_aes_decrypt, mbedtls_aes_encrypt,\n     mbedtls_ssl_ciphersuite_uses_ec and mbedtls_ssl_ciphersuite_uses_psk. Found\n     by James Cowgill. #978\n   * Certificate verification functions now set flags to -1 in case the full\n     chain was not verified due to an internal error (including in the verify\n     callback) or chain length limitations.\n   * With authmode set to optional, the TLS handshake is now aborted if the\n     verification of the peer's certificate failed due to an overlong chain or\n     a fatal error in the verify callback.\n\nBugfix\n   * Add a check if iv_len is zero in GCM, and return an error if it is zero.\n     Reported by roberto. #716\n   * Replace preprocessor condition from #if defined(MBEDTLS_THREADING_PTHREAD)\n     to #if defined(MBEDTLS_THREADING_C) as the library cannot assume they will\n     always be implemented by pthread support. #696\n   * Fix a resource leak on Windows platforms in mbedtls_x509_crt_parse_path(),\n     in the case of an error. Found by redplait. #590\n   * Add MBEDTLS_MPI_CHK to check for error value of mbedtls_mpi_fill_random.\n     Reported and fix suggested by guidovranken. #740\n   * Fix conditional preprocessor directives in bignum.h to enable 64-bit\n     compilation when using ARM Compiler 6.\n   * Fix a potential integer overflow in the version verification for DER\n     encoded X.509 CRLs. The overflow could enable maliciously constructed CRLs\n     to bypass the version verification check. Found by Peng Li/Yueh-Hsun Lin,\n     KNOX Security, Samsung Research America\n   * Fix potential integer overflow in the version verification for DER\n     encoded X.509 CSRs. The overflow could enable maliciously constructed CSRs\n     to bypass the version verification check. Found by Peng Li/Yueh-Hsun Lin,\n     KNOX Security, Samsung Research America\n   * Fix a potential integer overflow in the version verification for DER\n     encoded X.509 certificates. The overflow could enable maliciously\n     constructed certificates to bypass the certificate verification check.\n   * Fix a call to the libc function time() to call the platform abstraction\n     function mbedtls_time() instead. Found by wairua. #666\n   * Avoid shadowing of time and index functions through mbed TLS function\n     arguments. Found by inestlerode. #557.\n\nChanges\n   * Added config.h option MBEDTLS_NO_UDBL_DIVISION, to prevent the use of\n     64-bit division. This is useful on embedded platforms where 64-bit division\n     created a dependency on external libraries. #708\n   * Removed mutexes from ECP hardware accelerator code. Now all hardware\n     accelerator code in the library leaves concurrency handling to the\n     platform. Reported by Steven Cooreman. #863\n   * Define the macro MBEDTLS_AES_ROM_TABLES in the configuration file\n     config-no-entropy.h to reduce the RAM footprint.\n   * Added a test script that can be hooked into git that verifies commits\n     before they are pushed.\n   * Improve documentation of PKCS1 decryption functions.\n\n= mbed TLS 2.5.1 released 2017-06-21\n\nSecurity\n   * Fixed unlimited overread of heap-based buffer in mbedtls_ssl_read().\n     The issue could only happen client-side with renegotiation enabled.\n     Could result in DoS (application crash) or information leak\n     (if the application layer sent data read from mbedtls_ssl_read()\n     back to the server or to a third party). Can be triggered remotely.\n   * Removed SHA-1 and RIPEMD-160 from the default hash algorithms for\n     certificate verification. SHA-1 can be turned back on with a compile-time\n     option if needed.\n   * Fixed offset in FALLBACK_SCSV parsing that caused TLS server to fail to\n     detect it sometimes. Reported by Hugo Leisink. #810\n   * Tighten parsing of RSA PKCS#1 v1.5 signatures, to avoid a\n     potential Bleichenbacher/BERserk-style attack.\n\nBugfix\n   * Remove size zero arrays from ECJPAKE test suite. Size zero arrays are not\n     valid C and they prevented the test from compiling in Visual Studio 2015\n     and with GCC using the -Wpedantic compilation option.\n   * Fix insufficient support for signature-hash-algorithm extension,\n     resulting in compatibility problems with Chrome. Found by hfloyrd. #823\n   * Fix behaviour that hid the original cause of fatal alerts in some cases\n     when sending the alert failed. The fix makes sure not to hide the error\n     that triggered the alert.\n   * Fix SSLv3 renegotiation behaviour and stop processing data received from\n     peer after sending a fatal alert to refuse a renegotiation attempt.\n     Previous behaviour was to keep processing data even after the alert has\n     been sent.\n   * Accept empty trusted CA chain in authentication mode\n     MBEDTLS_SSL_VERIFY_OPTIONAL. Found by Jethro Beekman. #864\n   * Fix implementation of mbedtls_ssl_parse_certificate() to not annihilate\n     fatal errors in authentication mode MBEDTLS_SSL_VERIFY_OPTIONAL and to\n     reflect bad EC curves within verification result.\n   * Fix bug that caused the modular inversion function to accept the invalid\n     modulus 1 and therefore to hang. Found by blaufish. #641.\n   * Fix incorrect sign computation in modular exponentiation when the base is\n     a negative MPI. Previously the result was always negative. Found by Guido\n     Vranken.\n   * Fix a numerical underflow leading to stack overflow in mpi_read_file()\n     that was triggered uppon reading an empty line. Found by Guido Vranken.\n\nChanges\n   * Send fatal alerts in more cases. The previous behaviour was to skip\n     sending the fatal alert and just drop the connection.\n   * Clarify ECDSA documentation and improve the sample code to avoid\n     misunderstanding and potentially dangerous use of the API. Pointed out\n     by Jean-Philippe Aumasson.\n\n= mbed TLS 2.5.0 branch released 2017-05-17\n\nSecurity\n   * Wipe stack buffers in RSA private key operations\n     (rsa_rsaes_pkcs1_v15_decrypt(), rsa_rsaes_oaep_decrypt). Found by Laurent\n     Simon.\n   * Add exponent blinding to RSA private operations as a countermeasure\n     against side-channel attacks like the cache attack described in\n     https://arxiv.org/abs/1702.08719v2.\n     Found and fix proposed by Michael Schwarz, Samuel Weiser, Daniel Gruss,\n     Clémentine Maurice and Stefan Mangard.\n\nFeatures\n   * Add hardware acceleration support for the Elliptic Curve Point module.\n     This involved exposing parts of the internal interface to enable\n     replacing the core functions and adding and alternative, module level\n     replacement support for enabling the extension of the interface.\n   * Add a new configuration option to 'mbedtls_ssl_config' to enable\n     suppressing the CA list in Certificate Request messages. The default\n     behaviour has not changed, namely every configured CAs name is included.\n\nAPI Changes\n   * The following functions in the AES module have been deprecated and replaced\n     by the functions shown below. The new functions change the return type from\n     void to int to allow returning error codes when using MBEDTLS_AES_ALT,\n     MBEDTLS_AES_DECRYPT_ALT or MBEDTLS_AES_ENCRYPT_ALT.\n     mbedtls_aes_decrypt() -> mbedtls_internal_aes_decrypt()\n     mbedtls_aes_encrypt() -> mbedtls_internal_aes_encrypt()\n\nBugfix\n   * Remove macros from compat-1.3.h that correspond to deleted items from most\n     recent versions of the library. Found by Kyle Keen.\n   * Fixed issue in the Threading module that prevented mutexes from\n     initialising. Found by sznaider. #667 #843\n   * Add checks in the PK module for the RSA functions on 64-bit systems.\n     The PK and RSA modules use different types for passing hash length and\n     without these checks the type cast could lead to data loss. Found by Guido\n     Vranken.\n\n= mbed TLS 2.4.2 branch released 2017-03-08\n\nSecurity\n   * Add checks to prevent signature forgeries for very large messages while\n     using RSA through the PK module in 64-bit systems. The issue was caused by\n     some data loss when casting a size_t to an unsigned int value in the\n     functions rsa_verify_wrap(), rsa_sign_wrap(), rsa_alt_sign_wrap() and\n     mbedtls_pk_sign(). Found by Jean-Philippe Aumasson.\n   * Fixed potential livelock during the parsing of a CRL in PEM format in\n     mbedtls_x509_crl_parse(). A string containing a CRL followed by trailing\n     characters after the footer could result in the execution of an infinite\n     loop. The issue can be triggered remotely. Found by Greg Zaverucha,\n     Microsoft.\n   * Removed MD5 from the allowed hash algorithms for CertificateRequest and\n     CertificateVerify messages, to prevent SLOTH attacks against TLS 1.2.\n     Introduced by interoperability fix for #513.\n   * Fixed a bug that caused freeing a buffer that was allocated on the stack,\n     when verifying the validity of a key on secp224k1. This could be\n     triggered remotely for example with a maliciously constructed certificate\n     and potentially could lead to remote code execution on some platforms.\n     Reported independently by rongsaws and Aleksandar Nikolic, Cisco Talos\n     team. #569 CVE-2017-2784\n\nBugfix\n   * Fix output certificate verification flags set by x509_crt_verify_top() when\n     traversing a chain of trusted CA. The issue would cause both flags,\n     MBEDTLS_X509_BADCERT_NOT_TRUSTED and MBEDTLS_X509_BADCERT_EXPIRED, to be\n     set when the verification conditions are not met regardless of the cause.\n     Found by Harm Verhagen and inestlerode. #665 #561\n   * Fix the redefinition of macro ssl_set_bio to an undefined symbol\n     mbedtls_ssl_set_bio_timeout in compat-1.3.h, by removing it.\n     Found by omlib-lin. #673\n   * Fix unused variable/function compilation warnings in pem.c, x509_crt.c and\n     x509_csr.c that are reported when building mbed TLS with a config.h that\n     does not define MBEDTLS_PEM_PARSE_C. Found by omnium21. #562\n   * Fix incorrect renegotiation condition in ssl_check_ctr_renegotiate() that\n     would compare 64 bits of the record counter instead of 48 bits as indicated\n     in RFC 6347 Section 4.3.1. This could cause the execution of the\n     renegotiation routines at unexpected times when the protocol is DTLS. Found\n     by wariua. #687\n   * Fixed multiple buffer overreads in mbedtls_pem_read_buffer() when parsing\n     the input string in PEM format to extract the different components. Found\n     by Eyal Itkin.\n   * Fixed potential arithmetic overflow in mbedtls_ctr_drbg_reseed() that could\n     cause buffer bound checks to be bypassed. Found by Eyal Itkin.\n   * Fixed potential arithmetic overflows in mbedtls_cipher_update() that could\n     cause buffer bound checks to be bypassed. Found by Eyal Itkin.\n   * Fixed potential arithmetic overflow in mbedtls_md2_update() that could\n     cause buffer bound checks to be bypassed. Found by Eyal Itkin.\n   * Fixed potential arithmetic overflow in mbedtls_base64_decode() that could\n     cause buffer bound checks to be bypassed. Found by Eyal Itkin.\n   * Fixed heap overreads in mbedtls_x509_get_time(). Found by Peng\n     Li/Yueh-Hsun Lin, KNOX Security, Samsung Research America.\n   * Fix potential memory leak in mbedtls_x509_crl_parse(). The leak was caused\n     by missing calls to mbedtls_pem_free() in cases when a\n     MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT error was encountered. Found and\n     fix proposed by Guido Vranken. #722\n   * Fixed the templates used to generate project and solution files for Visual\n     Studio 2015 as well as the files themselves, to remove a build warning\n     generated in Visual Studio 2015. Reported by Steve Valliere. #742\n   * Fix a resource leak in ssl_cookie, when using MBEDTLS_THREADING_C.\n     Raised and fix suggested by Alan Gillingham in the mbed TLS forum. #771\n   * Fix 1 byte buffer overflow in mbedtls_mpi_write_string() when the MPI\n     number to write in hexadecimal is negative and requires an odd number of\n     digits. Found and fixed by Guido Vranken.\n   * Fix unlisted DES configuration dependency in some pkparse test cases. Found\n     by inestlerode. #555\n\n= mbed TLS 2.4.1 branch released 2016-12-13\n\nChanges\n   * Update to CMAC test data, taken from - NIST Special Publication 800-38B -\n     Recommendation for Block Cipher Modes of Operation: The CMAC Mode for\n     Authentication – October  2016\n\n= mbed TLS 2.4.0 branch released 2016-10-17\n\nSecurity\n   * Removed the MBEDTLS_SSL_AEAD_RANDOM_IV option, because it was not compliant\n     with RFC-5116 and could lead to session key recovery in very long TLS\n     sessions. \"Nonce-Disrespecting Adversaries Practical Forgery Attacks on GCM in\n     TLS\" - H. Bock, A. Zauner, S. Devlin, J. Somorovsky, P. Jovanovic.\n     https://eprint.iacr.org/2016/475.pdf\n   * Fixed potential stack corruption in mbedtls_x509write_crt_der() and\n     mbedtls_x509write_csr_der() when the signature is copied to the buffer\n     without checking whether there is enough space in the destination. The\n     issue cannot be triggered remotely. Found by Jethro Beekman.\n\nFeatures\n   * Added support for CMAC for AES and 3DES and AES-CMAC-PRF-128, as defined by\n     NIST SP 800-38B, RFC-4493 and RFC-4615.\n   * Added hardware entropy selftest to verify that the hardware entropy source\n     is functioning correctly.\n   * Added a script to print build environment info for diagnostic use in test\n     scripts, which is also now called by all.sh.\n   * Added the macro MBEDTLS_X509_MAX_FILE_PATH_LEN that enables the user to\n     configure the maximum length of a file path that can be buffered when\n     calling mbedtls_x509_crt_parse_path().\n   * Added a configuration file config-no-entropy.h that configures the subset of\n     library features that do not require an entropy source.\n   * Added the macro MBEDTLS_ENTROPY_MIN_HARDWARE in config.h. This allows users\n     to configure the minimum number of bytes for entropy sources using the\n     mbedtls_hardware_poll() function.\n\nBugfix\n   * Fix for platform time abstraction to avoid dependency issues where a build\n     may need time but not the standard C library abstraction, and added\n     configuration consistency checks to check_config.h\n   * Fix dependency issue in Makefile to allow parallel builds.\n   * Fix incorrect handling of block lengths in crypt_and_hash.c sample program,\n     when GCM is used. Found by udf2457. #441\n   * Fix for key exchanges based on ECDH-RSA or ECDH-ECDSA which weren't\n     enabled unless others were also present. Found by David Fernandez. #428\n   * Fix for out-of-tree builds using CMake. Found by jwurzer, and fix based on\n     a contribution from Tobias Tangemann. #541\n   * Fixed cert_app.c sample program for debug output and for use when no root\n     certificates are provided.\n   * Fix conditional statement that would cause a 1 byte overread in\n     mbedtls_asn1_get_int(). Found and fixed by Guido Vranken. #599\n   * Fixed pthread implementation to avoid unintended double initialisations\n     and double frees. Found by Niklas Amnebratt.\n   * Fixed the sample applications gen_key.c, cert_req.c and cert_write.c for\n     builds where the configuration MBEDTLS_PEM_WRITE_C is not defined. Found\n     by inestlerode. #559.\n   * Fix mbedtls_x509_get_sig() to update the ASN1 type in the mbedtls_x509_buf\n     data structure until after error checks are successful. Found by\n     subramanyam-c. #622\n   * Fix documentation and implementation missmatch for function arguments of\n     mbedtls_gcm_finish(). Found by cmiatpaar. #602\n   * Guarantee that P>Q at RSA key generation. Found by inestlerode. #558\n   * Fix potential byte overread when verifying malformed SERVER_HELLO in\n     ssl_parse_hello_verify_request() for DTLS. Found by Guido Vranken.\n   * Fix check for validity of date when parsing in mbedtls_x509_get_time().\n     Found by subramanyam-c. #626\n   * Fix compatibility issue with Internet Explorer client authentication,\n     where the limited hash choices prevented the client from sending its\n     certificate. Found by teumas. #513\n   * Fix compilation without MBEDTLS_SELF_TEST enabled.\n\nChanges\n   * Extended test coverage of special cases, and added new timing test suite.\n   * Removed self-tests from the basic-built-test.sh script, and added all\n     missing self-tests to the test suites, to ensure self-tests are only\n     executed once.\n   * Added support for 3 and 4 byte lengths to mbedtls_asn1_write_len().\n   * Added support for a Yotta specific configuration file -\n     through the symbol YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE.\n   * Added optimization for code space for X.509/OID based on configured\n     features. Contributed by Aviv Palivoda.\n   * Renamed source file library/net.c to library/net_sockets.c to avoid\n     naming collision in projects which also have files with the common name\n     net.c. For consistency, the corresponding header file, net.h, is marked as\n     deprecated, and its contents moved to net_sockets.h.\n   * Changed the strategy for X.509 certificate parsing and validation, to no\n     longer disregard certificates with unrecognised fields.\n\n= mbed TLS 2.3.0 branch released 2016-06-28\n\nSecurity\n   * Fix missing padding length check in mbedtls_rsa_rsaes_pkcs1_v15_decrypt\n     required by PKCS1 v2.2\n   * Fix potential integer overflow to buffer overflow in\n     mbedtls_rsa_rsaes_pkcs1_v15_encrypt and mbedtls_rsa_rsaes_oaep_encrypt\n     (not triggerable remotely in (D)TLS).\n   * Fix a potential integer underflow to buffer overread in\n     mbedtls_rsa_rsaes_oaep_decrypt. It is not triggerable remotely in\n     SSL/TLS.\n\nFeatures\n   * Support for platform abstraction of the standard C library time()\n     function.\n\nBugfix\n   * Fix bug in mbedtls_mpi_add_mpi() that caused wrong results when the three\n     arguments where the same (in-place doubling). Found and fixed by Janos\n     Follath. #309\n   * Fix potential build failures related to the 'apidoc' target, introduced\n     in the previous patch release. Found by Robert Scheck. #390 #391\n   * Fix issue in Makefile that prevented building using armar. #386\n   * Fix memory leak that occurred only when ECJPAKE was enabled and ECDHE and\n     ECDSA was disabled in config.h . The leak didn't occur by default.\n   * Fix an issue that caused valid certificates to be rejected whenever an\n     expired or not yet valid certificate was parsed before a valid certificate\n     in the trusted certificate list.\n   * Fix bug in mbedtls_x509_crt_parse that caused trailing extra data in the\n     buffer after DER certificates to be included in the raw representation.\n   * Fix issue that caused a hang when generating RSA keys of odd bitlength\n   * Fix bug in mbedtls_rsa_rsaes_pkcs1_v15_encrypt that made null pointer\n     dereference possible.\n   * Fix issue that caused a crash if invalid curves were passed to\n     mbedtls_ssl_conf_curves. #373\n   * Fix issue in ssl_fork_server which was preventing it from functioning. #429\n   * Fix memory leaks in test framework\n   * Fix test in ssl-opt.sh that does not run properly with valgrind\n   * Fix unchecked calls to mmbedtls_md_setup(). Fix by Brian Murray. #502\n\nChanges\n   * On ARM platforms, when compiling with -O0 with GCC, Clang or armcc5,\n     don't use the optimized assembly for bignum multiplication. This removes\n     the need to pass -fomit-frame-pointer to avoid a build error with -O0.\n   * Disabled SSLv3 in the default configuration.\n   * Optimized mbedtls_mpi_zeroize() for MPI integer size. (Fix by Alexey\n     Skalozub).\n   * Fix non-compliance server extension handling. Extensions for SSLv3 are now\n     ignored, as required by RFC6101.\n\n= mbed TLS 2.2.1 released 2016-01-05\n\nSecurity\n   * Fix potential double free when mbedtls_asn1_store_named_data() fails to\n     allocate memory. Only used for certificate generation, not triggerable\n     remotely in SSL/TLS. Found by Rafał Przywara. #367\n   * Disable MD5 handshake signatures in TLS 1.2 by default to prevent the\n     SLOTH attack on TLS 1.2 server authentication (other attacks from the\n     SLOTH paper do not apply to any version of mbed TLS or PolarSSL).\n     https://www.mitls.org/pages/attacks/SLOTH\n\nBugfix\n   * Fix over-restrictive length limit in GCM. Found by Andreas-N. #362\n   * Fix bug in certificate validation that caused valid chains to be rejected\n     when the first intermediate certificate has pathLenConstraint=0. Found by\n     Nicholas Wilson. Introduced in mbed TLS 2.2.0. #280\n   * Removed potential leak in mbedtls_rsa_rsassa_pkcs1_v15_sign(), found by\n     JayaraghavendranK. #372\n   * Fix suboptimal handling of unexpected records that caused interop issues\n     with some peers over unreliable links. Avoid dropping an entire DTLS\n     datagram if a single record in a datagram is unexpected, instead only\n     drop the record and look at subsequent records (if any are present) in\n     the same datagram. Found by jeannotlapin. #345\n\n= mbed TLS 2.2.0 released 2015-11-04\n\nSecurity\n   * Fix potential double free if mbedtls_ssl_conf_psk() is called more than\n     once and some allocation fails. Cannot be forced remotely. Found by Guido\n     Vranken, Intelworks.\n   * Fix potential heap corruption on Windows when\n     mbedtls_x509_crt_parse_path() is passed a path longer than 2GB. Cannot be\n     triggered remotely. Found by Guido Vranken, Intelworks.\n   * Fix potential buffer overflow in some asn1_write_xxx() functions.\n     Cannot be triggered remotely unless you create X.509 certificates based\n     on untrusted input or write keys of untrusted origin. Found by Guido\n     Vranken, Intelworks.\n   * The X509 max_pathlen constraint was not enforced on intermediate\n     certificates. Found by Nicholas Wilson, fix and tests provided by\n     Janos Follath. #280 and #319\n\nFeatures\n   * Experimental support for EC J-PAKE as defined in Thread 1.0.0.\n     Disabled by default as the specification might still change.\n   * Added a key extraction callback to accees the master secret and key\n     block. (Potential uses include EAP-TLS and Thread.)\n\nBugfix\n   * Self-signed certificates were not excluded from pathlen counting,\n     resulting in some valid X.509 being incorrectly rejected. Found and fix\n     provided by Janos Follath. #319\n   * Fix build error with configurations where ECDHE-PSK is the only key\n     exchange. Found and fix provided by Chris Hammond. #270\n   * Fix build error with configurations where RSA, RSA-PSK, ECDH-RSA or\n     ECHD-ECDSA if the only key exchange. Multiple reports. #310\n   * Fixed a bug causing some handshakes to fail due to some non-fatal alerts\n     not being properly ignored. Found by mancha and Kasom Koht-arsa, #308\n   * mbedtls_x509_crt_verify(_with_profile)() now also checks the key type and\n     size/curve against the profile. Before that, there was no way to set a\n     minimum key size for end-entity certificates with RSA keys. Found by\n     Matthew Page of Scannex Electronics Ltd.\n   * Fix failures in MPI on Sparc(64) due to use of bad assembly code.\n     Found by Kurt Danielson. #292\n   * Fix typo in name of the extKeyUsage OID. Found by inestlerode, #314\n   * Fix bug in ASN.1 encoding of booleans that caused generated CA\n     certificates to be rejected by some applications, including OS X\n     Keychain. Found and fixed by Jonathan Leroy, Inikup.\n\nChanges\n   * Improved performance of mbedtls_ecp_muladd() when one of the scalars is 1\n     or -1.\n\n= mbed TLS 2.1.2 released 2015-10-06\n\nSecurity\n   * Added fix for CVE-2015-5291 to prevent heap corruption due to buffer\n     overflow of the hostname or session ticket. Found by Guido Vranken,\n     Intelworks.\n   * Fix potential double-free if mbedtls_ssl_set_hs_psk() is called more than\n     once in the same handhake and mbedtls_ssl_conf_psk() was used.\n     Found and patch provided by Guido Vranken, Intelworks. Cannot be forced\n     remotely.\n   * Fix stack buffer overflow in pkcs12 decryption (used by\n     mbedtls_pk_parse_key(file)() when the password is > 129 bytes.\n     Found by Guido Vranken, Intelworks. Not triggerable remotely.\n   * Fix potential buffer overflow in mbedtls_mpi_read_string().\n     Found by Guido Vranken, Intelworks. Not exploitable remotely in the context\n     of TLS, but might be in other uses. On 32 bit machines, requires reading a\n     string of close to or larger than 1GB to exploit; on 64 bit machines, would\n     require reading a string of close to or larger than 2^62 bytes.\n   * Fix potential random memory allocation in mbedtls_pem_read_buffer()\n     on crafted PEM input data. Found and fix provided by Guido Vranken,\n     Intelworks. Not triggerable remotely in TLS. Triggerable remotely if you\n     accept PEM data from an untrusted source.\n   * Fix possible heap buffer overflow in base64_encoded() when the input\n     buffer is 512MB or larger on 32-bit platforms. Found by Guido Vranken,\n     Intelworks. Not trigerrable remotely in TLS.\n   * Fix potential double-free if mbedtls_conf_psk() is called repeatedly on\n     the same mbedtls_ssl_config object and memory allocation fails. Found by\n     Guido Vranken, Intelworks. Cannot be forced remotely.\n   * Fix potential heap buffer overflow in servers that perform client\n     authentication against a crafted CA cert. Cannot be triggered remotely\n     unless you allow third parties to pick trust CAs for client auth.\n     Found by Guido Vranken, Intelworks.\n\nBugfix\n   * Fix compile error in net.c with musl libc. Found and patch provided by\n     zhasha (#278).\n   * Fix macroization of 'inline' keyword when building as C++. (#279)\n\nChanges\n   * Added checking of hostname length in mbedtls_ssl_set_hostname() to ensure\n     domain names are compliant with RFC 1035.\n   * Fixed paths for check_config.h in example config files. (Found by bachp)\n     (#291)\n\n= mbed TLS 2.1.1 released 2015-09-17\n\nSecurity\n   * Add countermeasure against Lenstra's RSA-CRT attack for PKCS#1 v1.5\n     signatures. (Found by Florian Weimer, Red Hat.)\n     https://securityblog.redhat.com/2015/09/02/factoring-rsa-keys-with-tls-perfect-forward-secrecy/\n   * Fix possible client-side NULL pointer dereference (read) when the client\n     tries to continue the handshake after it failed (a misuse of the API).\n     (Found and patch provided by Fabian Foerg, Gotham Digital Science using\n     afl-fuzz.)\n\nBugfix\n   * Fix warning when using a 64bit platform. (found by embedthis) (#275)\n   * Fix off-by-one error in parsing Supported Point Format extension that\n     caused some handshakes to fail.\n\nChanges\n   * Made X509 profile pointer const in mbedtls_ssl_conf_cert_profile() to allow\n     use of mbedtls_x509_crt_profile_next. (found by NWilson)\n   * When a client initiates a reconnect from the same port as a live\n     connection, if cookie verification is available\n     (MBEDTLS_SSL_DTLS_HELLO_VERIFY defined in config.h, and usable cookie\n     callbacks set with mbedtls_ssl_conf_dtls_cookies()), this will be\n     detected and mbedtls_ssl_read() will return\n     MBEDTLS_ERR_SSL_CLIENT_RECONNECT - it is then possible to start a new\n     handshake with the same context. (See RFC 6347 section 4.2.8.)\n\n= mbed TLS 2.1.0 released 2015-09-04\n\nFeatures\n   * Added support for yotta as a build system.\n   * Primary open source license changed to Apache 2.0 license.\n\nBugfix\n   * Fix segfault in the benchmark program when benchmarking DHM.\n   * Fix build error with CMake and pre-4.5 versions of GCC (found by Hugo\n     Leisink).\n   * Fix bug when parsing a ServerHello without extensions (found by David\n     Sears).\n   * Fix bug in CMake lists that caused libmbedcrypto.a not to be installed\n     (found by Benoit Lecocq).\n   * Fix bug in Makefile that caused libmbedcrypto and libmbedx509 not to be\n     installed (found by Rawi666).\n   * Fix compile error with armcc 5 with --gnu option.\n   * Fix bug in Makefile that caused programs not to be installed correctly\n     (found by robotanarchy) (#232).\n   * Fix bug in Makefile that prevented from installing without building the\n     tests (found by robotanarchy) (#232).\n   * Fix missing -static-libgcc when building shared libraries for Windows\n     with make.\n   * Fix link error when building shared libraries for Windows with make.\n   * Fix error when loading libmbedtls.so.\n   * Fix bug in mbedtls_ssl_conf_default() that caused the default preset to\n     be always used (found by dcb314) (#235)\n   * Fix bug in mbedtls_rsa_public() and mbedtls_rsa_private() that could\n     result trying to unlock an unlocked mutex on invalid input (found by\n     Fredrik Axelsson) (#257)\n   * Fix -Wshadow warnings (found by hnrkp) (#240)\n   * Fix memory corruption on client with overlong PSK identity, around\n     SSL_MAX_CONTENT_LEN or higher - not triggerrable remotely (found by\n     Aleksandrs Saveljevs) (#238)\n   * Fix unused function warning when using MBEDTLS_MDx_ALT or\n     MBEDTLS_SHAxxx_ALT (found by Henrik) (#239)\n   * Fix memory corruption in pkey programs (found by yankuncheng) (#210)\n\nChanges\n   * The PEM parser now accepts a trailing space at end of lines (#226).\n   * It is now possible to #include a user-provided configuration file at the\n     end of the default config.h by defining MBEDTLS_USER_CONFIG_FILE on the\n     compiler's command line.\n   * When verifying a certificate chain, if an intermediate certificate is\n     trusted, no later cert is checked. (suggested by hannes-landeholm)\n     (#220).\n   * Prepend a \"thread identifier\" to debug messages (issue pointed out by\n     Hugo Leisink) (#210).\n   * Add mbedtls_ssl_get_max_frag_len() to query the current maximum fragment\n     length.\n\n= mbed TLS 2.0.0 released 2015-07-13\n\nFeatures\n   * Support for DTLS 1.0 and 1.2 (RFC 6347).\n   * Ability to override core functions from MDx, SHAx, AES and DES modules\n     with custom implementation (eg hardware accelerated), complementing the\n     ability to override the whole module.\n   * New server-side implementation of session tickets that rotate keys to\n     preserve forward secrecy, and allows sharing across multiple contexts.\n   * Added a concept of X.509 cerificate verification profile that controls\n     which algorithms and key sizes (curves for ECDSA) are acceptable.\n   * Expanded configurability of security parameters in the SSL module with\n     mbedtls_ssl_conf_dhm_min_bitlen() and mbedtls_ssl_conf_sig_hashes().\n   * Introduced a concept of presets for SSL security-relevant configuration\n     parameters.\n\nAPI Changes\n   * The library has been split into libmbedcrypto, libmbedx509, libmbedtls.\n     You now need to link to all of them if you use TLS for example.\n   * All public identifiers moved to the mbedtls_* or MBEDTLS_* namespace.\n     Some names have been further changed to make them more consistent.\n     Migration helpers scripts/rename.pl and include/mbedtls/compat-1.3.h are\n     provided. Full list of renamings in scripts/data_files/rename-1.3-2.0.txt\n   * Renamings of fields inside structures, not covered by the previous list:\n     mbedtls_cipher_info_t.key_length -> key_bitlen\n     mbedtls_cipher_context_t.key_length -> key_bitlen\n     mbedtls_ecp_curve_info.size -> bit_size\n   * Headers are now found in the 'mbedtls' directory (previously 'polarssl').\n   * The following _init() functions that could return errors have\n     been split into an _init() that returns void and another function that\n     should generally be the first function called on this context after init:\n     mbedtls_ssl_init() -> mbedtls_ssl_setup()\n     mbedtls_ccm_init() -> mbedtls_ccm_setkey()\n     mbedtls_gcm_init() -> mbedtls_gcm_setkey()\n     mbedtls_hmac_drbg_init() -> mbedtls_hmac_drbg_seed(_buf)()\n     mbedtls_ctr_drbg_init()  -> mbedtls_ctr_drbg_seed()\n     Note that for mbedtls_ssl_setup(), you need to be done setting up the\n     ssl_config structure before calling it.\n   * Most ssl_set_xxx() functions (all except ssl_set_bio(), ssl_set_hostname(),\n     ssl_set_session() and ssl_set_client_transport_id(), plus\n     ssl_legacy_renegotiation()) have been renamed to mbedtls_ssl_conf_xxx()\n     (see rename.pl and compat-1.3.h above) and their first argument's type\n     changed from ssl_context to ssl_config.\n   * ssl_set_bio() changed signature (contexts merged, order switched, one\n     additional callback for read-with-timeout).\n   * The following functions have been introduced and must be used in callback\n     implementations (SNI, PSK) instead of their *conf counterparts:\n     mbedtls_ssl_set_hs_own_cert()\n     mbedtls_ssl_set_hs_ca_chain()\n     mbedtls_ssl_set_hs_psk()\n   * mbedtls_ssl_conf_ca_chain() lost its last argument (peer_cn), now set\n     using mbedtls_ssl_set_hostname().\n   * mbedtls_ssl_conf_session_cache() changed prototype (only one context\n     pointer, parameters reordered).\n   * On server, mbedtls_ssl_conf_session_tickets_cb() must now be used in\n     place of mbedtls_ssl_conf_session_tickets() to enable session tickets.\n   * The SSL debug callback gained two new arguments (file name, line number).\n   * Debug modes were removed.\n   * mbedtls_ssl_conf_truncated_hmac() now returns void.\n   * mbedtls_memory_buffer_alloc_init() now returns void.\n   * X.509 verification flags are now an uint32_t. Affect the signature of:\n     mbedtls_ssl_get_verify_result()\n     mbedtls_x509_ctr_verify_info()\n     mbedtls_x509_crt_verify() (flags, f_vrfy -> needs to be updated)\n     mbedtls_ssl_conf_verify() (f_vrfy -> needs to be updated)\n   * The following functions changed prototype to avoid an in-out length\n     parameter:\n     mbedtls_base64_encode()\n     mbedtls_base64_decode()\n     mbedtls_mpi_write_string()\n     mbedtls_dhm_calc_secret()\n   * In the NET module, all \"int\" and \"int *\" arguments for file descriptors\n     changed type to \"mbedtls_net_context *\".\n   * net_accept() gained new arguments for the size of the client_ip buffer.\n   * In the threading layer, mbedtls_mutex_init() and mbedtls_mutex_free() now\n     return void.\n   * ecdsa_write_signature() gained an additional md_alg argument and\n     ecdsa_write_signature_det() was deprecated.\n   * pk_sign() no longer accepts md_alg == POLARSSL_MD_NONE with ECDSA.\n   * Last argument of x509_crt_check_key_usage() and\n     mbedtls_x509write_crt_set_key_usage() changed from int to unsigned.\n   * test_ca_list (from certs.h) is renamed to test_cas_pem and is only\n     available if POLARSSL_PEM_PARSE_C is defined (it never worked without).\n   * Test certificates in certs.c are no longer guaranteed to be nul-terminated\n     strings; use the new *_len variables instead of strlen().\n   * Functions mbedtls_x509_xxx_parse(), mbedtls_pk_parse_key(),\n     mbedtls_pk_parse_public_key() and mbedtls_dhm_parse_dhm() now expect the\n     length parameter to include the terminating null byte for PEM input.\n   * Signature of mpi_mul_mpi() changed to make the last argument unsigned\n   * calloc() is now used instead of malloc() everywhere. API of platform\n     layer and the memory_buffer_alloc module changed accordingly.\n     (Thanks to Mansour Moufid for helping with the replacement.)\n   * Change SSL_DISABLE_RENEGOTIATION config.h flag to SSL_RENEGOTIATION\n     (support for renegotiation now needs explicit enabling in config.h).\n   * Split MBEDTLS_HAVE_TIME into MBEDTLS_HAVE_TIME and MBEDTLS_HAVE_TIME_DATE\n     in config.h\n   * net_connect() and net_bind() have a new 'proto' argument to choose\n     between TCP and UDP, using the macros NET_PROTO_TCP or NET_PROTO_UDP.\n     Their 'port' argument type is changed to a string.\n   * Some constness fixes\n\nRemovals\n   * Removed mbedtls_ecp_group_read_string(). Only named groups are supported.\n   * Removed mbedtls_ecp_sub() and mbedtls_ecp_add(), use\n     mbedtls_ecp_muladd().\n   * Removed individual mdX_hmac, shaX_hmac, mdX_file and shaX_file functions\n     (use generic functions from md.h)\n   * Removed mbedtls_timing_msleep(). Use mbedtls_net_usleep() or a custom\n     waiting function.\n   * Removed test DHM parameters from the test certs module.\n   * Removed the PBKDF2 module (use PKCS5).\n   * Removed POLARSSL_ERROR_STRERROR_BC (use mbedtls_strerror()).\n   * Removed compat-1.2.h (helper for migrating from 1.2 to 1.3).\n   * Removed openssl.h (very partial OpenSSL compatibility layer).\n   * Configuration options POLARSSL_HAVE_LONGLONG was removed (now always on).\n   * Configuration options POLARSSL_HAVE_INT8 and POLARSSL_HAVE_INT16 have\n     been removed (compiler is required to support 32-bit operations).\n   * Configuration option POLARSSL_HAVE_IPV6 was removed (always enabled).\n   * Removed test program o_p_test, the script compat.sh does more.\n   * Removed test program ssl_test, superseded by ssl-opt.sh.\n   * Removed helper script active-config.pl\n\nNew deprecations\n   * md_init_ctx() is deprecated in favour of md_setup(), that adds a third\n     argument (allowing memory savings if HMAC is not used)\n\nSemi-API changes (technically public, morally private)\n   * Renamed a few headers to include _internal in the name. Those headers are\n     not supposed to be included by users.\n   * Changed md_info_t into an opaque structure (use md_get_xxx() accessors).\n   * Changed pk_info_t into an opaque structure.\n   * Changed cipher_base_t into an opaque structure.\n   * Removed sig_oid2 and rename sig_oid1 to sig_oid in x509_crt and x509_crl.\n   * x509_crt.key_usage changed from unsigned char to unsigned int.\n   * Removed r and s from ecdsa_context\n   * Removed mode from des_context and des3_context\n\nDefault behavior changes\n   * The default minimum TLS version is now TLS 1.0.\n   * RC4 is now blacklisted by default in the SSL/TLS layer, and excluded from the\n     default ciphersuite list returned by ssl_list_ciphersuites()\n   * Support for receiving SSLv2 ClientHello is now disabled by default at\n     compile time.\n   * The default authmode for SSL/TLS clients is now REQUIRED.\n   * Support for RSA_ALT contexts in the PK layer is now optional. Since is is\n     enabled in the default configuration, this is only noticeable if using a\n     custom config.h\n   * Default DHM parameters server-side upgraded from 1024 to 2048 bits.\n   * A minimum RSA key size of 2048 bits is now enforced during ceritificate\n     chain verification.\n   * Negotiation of truncated HMAC is now disabled by default on server too.\n   * The following functions are now case-sensitive:\n     mbedtls_cipher_info_from_string()\n     mbedtls_ecp_curve_info_from_name()\n     mbedtls_md_info_from_string()\n     mbedtls_ssl_ciphersuite_from_string()\n     mbedtls_version_check_feature()\n\nRequirement changes\n   * The minimum MSVC version required is now 2010 (better C99 support).\n   * The NET layer now unconditionnaly relies on getaddrinfo() and select().\n   * Compiler is required to support C99 types such as long long and uint32_t.\n\nAPI changes from the 1.4 preview branch\n   * ssl_set_bio_timeout() was removed, split into mbedtls_ssl_set_bio() with\n     new prototype, and mbedtls_ssl_set_read_timeout().\n   * The following functions now return void:\n     mbedtls_ssl_conf_transport()\n     mbedtls_ssl_conf_max_version()\n     mbedtls_ssl_conf_min_version()\n   * DTLS no longer hard-depends on TIMING_C, but uses a callback interface\n     instead, see mbedtls_ssl_set_timer_cb(), with the Timing module providing\n     an example implementation, see mbedtls_timing_delay_context and\n     mbedtls_timing_set/get_delay().\n   * With UDP sockets, it is no longer necessary to call net_bind() again\n     after a successful net_accept().\n\nChanges\n   * mbedtls_ctr_drbg_random() and mbedtls_hmac_drbg_random() are now\n     thread-safe if MBEDTLS_THREADING_C is enabled.\n   * Reduced ROM fooprint of SHA-256 and added an option to reduce it even\n     more (at the expense of performance) MBEDTLS_SHA256_SMALLER.\n\n= mbed TLS 1.3 branch\n\nSecurity\n   * With authmode set to SSL_VERIFY_OPTIONAL, verification of keyUsage and\n     extendedKeyUsage on the leaf certificate was lost (results not accessible\n     via ssl_get_verify_results()).\n   * Add countermeasure against \"Lucky 13 strikes back\" cache-based attack,\n     https://dl.acm.org/citation.cfm?id=2714625\n\nFeatures\n   * Improve ECC performance by using more efficient doubling formulas\n     (contributed by Peter Dettman).\n   * Add x509_crt_verify_info() to display certificate verification results.\n   * Add support for reading DH parameters with privateValueLength included\n     (contributed by Daniel Kahn Gillmor).\n   * Add support for bit strings in X.509 names (request by Fredrik Axelsson).\n   * Add support for id-at-uniqueIdentifier in X.509 names.\n   * Add support for overriding snprintf() (except on Windows) and exit() in\n     the platform layer.\n   * Add an option to use macros instead of function pointers in the platform\n     layer (helps get rid of unwanted references).\n   * Improved Makefiles for Windows targets by fixing library targets and making\n     cross-compilation easier (thanks to Alon Bar-Lev).\n   * The benchmark program also prints heap usage for public-key primitives\n     if POLARSSL_MEMORY_BUFFER_ALLOC_C and POLARSSL_MEMORY_DEBUG are defined.\n   * New script ecc-heap.sh helps measuring the impact of ECC parameters on\n     speed and RAM (heap only for now) usage.\n   * New script memory.sh helps measuring the ROM and RAM requirements of two\n     reduced configurations (PSK-CCM and NSA suite B).\n   * Add config flag POLARSSL_DEPRECATED_WARNING (off by default) to produce\n     warnings on use of deprecated functions (with GCC and Clang only).\n   * Add config flag POLARSSL_DEPRECATED_REMOVED (off by default) to produce\n     errors on use of deprecated functions.\n\nBugfix\n   * Fix compile errors with PLATFORM_NO_STD_FUNCTIONS.\n   * Fix compile error with PLATFORM_EXIT_ALT (thanks to Rafał Przywara).\n   * Fix bug in entropy.c when THREADING_C is also enabled that caused\n     entropy_free() to crash (thanks to Rafał Przywara).\n   * Fix memory leak when gcm_setkey() and ccm_setkey() are used more than\n     once on the same context.\n   * Fix bug in ssl_mail_client when password is longer that username (found\n     by Bruno Pape).\n   * Fix undefined behaviour (memcmp( NULL, NULL, 0 );) in X.509 modules\n     (detected by Clang's 3.6 UBSan).\n   * mpi_size() and mpi_msb() would segfault when called on an mpi that is\n     initialized but not set (found by pravic).\n   * Fix detection of support for getrandom() on Linux (reported by syzzer) by\n     doing it at runtime (using uname) rather that compile time.\n   * Fix handling of symlinks by \"make install\" (found by Gaël PORTAY).\n   * Fix potential NULL pointer dereference (not trigerrable remotely) when\n     ssl_write() is called before the handshake is finished (introduced in\n     1.3.10) (first reported by Martin Blumenstingl).\n   * Fix bug in pk_parse_key() that caused some valid private EC keys to be\n     rejected.\n   * Fix bug in Via Padlock support (found by Nikos Mavrogiannopoulos).\n   * Fix thread safety bug in RSA operations (found by Fredrik Axelsson).\n   * Fix hardclock() (only used in the benchmarking program) with some\n     versions of mingw64 (found by kxjhlele).\n   * Fix warnings from mingw64 in timing.c (found by kxjklele).\n   * Fix potential unintended sign extension in asn1_get_len() on 64-bit\n     platforms.\n   * Fix potential memory leak in ssl_set_psk() (found by Mansour Moufid).\n   * Fix compile error when POLARSSL_SSL_DISABLE_RENEGOTATION and\n     POLARSSL_SSL_SSESSION_TICKETS where both enabled in config.h (introduced\n     in 1.3.10).\n   * Add missing extern \"C\" guard in aesni.h (reported by amir zamani).\n   * Add missing dependency on SHA-256 in some x509 programs (reported by\n     Gergely Budai).\n   * Fix bug related to ssl_set_curves(): the client didn't check that the\n     curve picked by the server was actually allowed.\n\nChanges\n   * Remove bias in mpi_gen_prime (contributed by Pascal Junod).\n   * Remove potential sources of timing variations (some contributed by Pascal\n     Junod).\n   * Options POLARSSL_HAVE_INT8 and POLARSSL_HAVE_INT16 are deprecated.\n   * Enabling POLARSSL_NET_C without POLARSSL_HAVE_IPV6 is deprecated.\n   * compat-1.2.h and openssl.h are deprecated.\n   * Adjusting/overriding CFLAGS and LDFLAGS with the make build system is now\n     more flexible (warning: OFLAGS is not used any more) (see the README)\n     (contributed by Alon Bar-Lev).\n   * ssl_set_own_cert() no longer calls pk_check_pair() since the\n     performance impact was bad for some users (this was introduced in 1.3.10).\n   * Move from SHA-1 to SHA-256 in example programs using signatures\n     (suggested by Thorsten Mühlfelder).\n   * Remove some unneeded inclusions of header files from the standard library\n     \"minimize\" others (eg use stddef.h if only size_t is needed).\n   * Change #include lines in test files to use double quotes instead of angle\n     brackets for uniformity with the rest of the code.\n   * Remove dependency on sscanf() in X.509 parsing modules.\n\n= mbed TLS 1.3.10 released 2015-02-09\nSecurity\n   * NULL pointer dereference in the buffer-based allocator when the buffer is\n     full and polarssl_free() is called (found by Mark Hasemeyer)\n     (only possible if POLARSSL_MEMORY_BUFFER_ALLOC_C is enabled, which it is\n     not by default).\n   * Fix remotely-triggerable uninitialised pointer dereference caused by\n     crafted X.509 certificate (TLS server is not affected if it doesn't ask for a\n     client certificate) (found using Codenomicon Defensics).\n   * Fix remotely-triggerable memory leak caused by crafted X.509 certificates\n     (TLS server is not affected if it doesn't ask for a client certificate)\n     (found using Codenomicon Defensics).\n   * Fix potential stack overflow while parsing crafted X.509 certificates\n     (TLS server is not affected if it doesn't ask for a client certificate)\n     (found using Codenomicon Defensics).\n   * Fix timing difference that could theoretically lead to a\n     Bleichenbacher-style attack in the RSA and RSA-PSK key exchanges\n     (reported by Sebastian Schinzel).\n\nFeatures\n   * Add support for FALLBACK_SCSV (draft-ietf-tls-downgrade-scsv).\n   * Add support for Extended Master Secret (draft-ietf-tls-session-hash).\n   * Add support for Encrypt-then-MAC (RFC 7366).\n   * Add function pk_check_pair() to test if public and private keys match.\n   * Add x509_crl_parse_der().\n   * Add compile-time option POLARSSL_X509_MAX_INTERMEDIATE_CA to limit the\n     length of an X.509 verification chain.\n   * Support for renegotiation can now be disabled at compile-time\n   * Support for 1/n-1 record splitting, a countermeasure against BEAST.\n   * Certificate selection based on signature hash, preferring SHA-1 over SHA-2\n     for pre-1.2 clients when multiple certificates are available.\n   * Add support for getrandom() syscall on recent Linux kernels with Glibc or\n     a compatible enough libc (eg uClibc).\n   * Add ssl_set_arc4_support() to make it easier to disable RC4 at runtime\n     while using the default ciphersuite list.\n   * Added new error codes and debug messages about selection of\n     ciphersuite/certificate.\n\nBugfix\n   * Stack buffer overflow if ctr_drbg_update() is called with too large\n     add_len (found by Jean-Philippe Aumasson) (not triggerable remotely).\n   * Possible buffer overflow of length at most POLARSSL_MEMORY_ALIGN_MULTIPLE\n     if memory_buffer_alloc_init() was called with buf not aligned and len not\n     a multiple of POLARSSL_MEMORY_ALIGN_MULTIPLE (not triggerable remotely).\n   * User set CFLAGS were ignored by Cmake with gcc (introduced in 1.3.9, found\n     by Julian Ospald).\n   * Fix potential undefined behaviour in Camellia.\n   * Fix potential failure in ECDSA signatures when POLARSSL_ECP_MAX_BITS is a\n     multiple of 8 (found by Gergely Budai).\n   * Fix unchecked return code in x509_crt_parse_path() on Windows (found by\n     Peter Vaskovic).\n   * Fix assembly selection for MIPS64 (thanks to James Cowgill).\n   * ssl_get_verify_result() now works even if the handshake was aborted due\n     to a failed verification (found by Fredrik Axelsson).\n   * Skip writing and parsing signature_algorithm extension if none of the\n     key exchanges enabled needs certificates. This fixes a possible interop\n     issue with some servers when a zero-length extension was sent. (Reported\n     by Peter Dettman.)\n   * On a 0-length input, base64_encode() did not correctly set output length\n     (found by Hendrik van den Boogaard).\n\nChanges\n   * Use deterministic nonces for AEAD ciphers in TLS by default (possible to\n     switch back to random with POLARSSL_SSL_AEAD_RANDOM_IV in config.h).\n   * Blind RSA private operations even when POLARSSL_RSA_NO_CRT is defined.\n   * ssl_set_own_cert() now returns an error on key-certificate mismatch.\n   * Forbid repeated extensions in X.509 certificates.\n   * debug_print_buf() now prints a text view in addition to hexadecimal.\n   * A specific error is now returned when there are ciphersuites in common\n     but none of them is usable due to external factors such as no certificate\n     with a suitable (extended)KeyUsage or curve or no PSK set.\n   * It is now possible to disable negotiation of truncated HMAC server-side\n     at runtime with ssl_set_truncated_hmac().\n   * Example programs for SSL client and server now disable SSLv3 by default.\n   * Example programs for SSL client and server now disable RC4 by default.\n   * Use platform.h in all test suites and programs.\n\n= PolarSSL 1.3.9 released 2014-10-20\nSecurity\n   * Lowest common hash was selected from signature_algorithms extension in\n     TLS 1.2 (found by Darren Bane) (introduced in 1.3.8).\n   * Remotely-triggerable memory leak when parsing some X.509 certificates\n     (server is not affected if it doesn't ask for a client certificate)\n     (found using Codenomicon Defensics).\n   * Remotely-triggerable memory leak when parsing crafted ClientHello\n     (not affected if ECC support was compiled out) (found using Codenomicon\n     Defensics).\n\nBugfix\n   * Support escaping of commas in x509_string_to_names()\n   * Fix compile error in ssl_pthread_server (found by Julian Ospald).\n   * Fix net_accept() regarding non-blocking sockets (found by Luca Pesce).\n   * Don't print uninitialised buffer in ssl_mail_client (found by Marc Abel).\n   * Fix warnings from Clang's scan-build (contributed by Alfred Klomp).\n   * Fix compile error in timing.c when POLARSSL_NET_C and POLARSSL_SELFTEST\n     are defined but not POLARSSL_HAVE_TIME (found by Stephane Di Vito).\n   * Remove non-existent file from VS projects (found by Peter Vaskovic).\n   * ssl_read() could return non-application data records on server while\n     renegotation was pending, and on client when a HelloRequest was received.\n   * Server-initiated renegotiation would fail with non-blocking I/O if the\n     write callback returned WANT_WRITE when requesting renegotiation.\n   * ssl_close_notify() could send more than one message in some circumstances\n     with non-blocking I/O.\n   * Fix compiler warnings on iOS (found by Sander Niemeijer).\n   * x509_crt_parse() did not increase total_failed on PEM error\n   * Fix compile error with armcc in mpi_is_prime()\n   * Fix potential bad read in parsing ServerHello (found by Adrien\n     Vialletelle).\n\nChanges\n   * Ciphersuites using SHA-256 or SHA-384 now require TLS 1.x (there is no\n     standard defining how to use SHA-2 with SSL 3.0).\n   * Ciphersuites using RSA-PSK key exchange new require TLS 1.x (the spec is\n     ambiguous on how to encode some packets with SSL 3.0).\n   * Made buffer size in pk_write_(pub)key_pem() more dynamic, eg smaller if\n     RSA is disabled, larger if POLARSSL_MPI_MAX_SIZE is larger.\n   * ssl_read() now returns POLARSSL_ERR_NET_WANT_READ rather than\n     POLARSSL_ERR_SSL_UNEXPECTED_MESSAGE on harmless alerts.\n   * POLARSSL_MPI_MAX_SIZE now defaults to 1024 in order to allow 8192 bits\n     RSA keys.\n   * Accept spaces at end of line or end of buffer in base64_decode().\n   * X.509 certificates with more than one AttributeTypeAndValue per\n     RelativeDistinguishedName are not accepted any more.\n\n= PolarSSL 1.3.8 released 2014-07-11\nSecurity\n   * Fix length checking for AEAD ciphersuites (found by Codenomicon).\n     It was possible to crash the server (and client) using crafted messages\n     when a GCM suite was chosen.\n\nFeatures\n   * Add CCM module and cipher mode to Cipher Layer\n   * Support for CCM and CCM_8 ciphersuites\n   * Support for parsing and verifying RSASSA-PSS signatures in the X.509\n     modules (certificates, CRLs and CSRs).\n   * Blowfish in the cipher layer now supports variable length keys.\n   * Add example config.h for PSK with CCM, optimized for low RAM usage.\n   * Optimize for RAM usage in example config.h for NSA Suite B profile.\n   * Add POLARSSL_REMOVE_ARC4_CIPHERSUITES to allow removing RC4 ciphersuites\n     from the default list (inactive by default).\n   * Add server-side enforcement of sent renegotiation requests\n     (ssl_set_renegotiation_enforced())\n   * Add SSL_CIPHERSUITES config.h flag to allow specifying a list of\n     ciphersuites to use and save some memory if the list is small.\n\nChanges\n   * Add LINK_WITH_PTHREAD option in CMake for explicit linking that is\n     required on some platforms (e.g. OpenBSD)\n   * Migrate zeroizing of data to polarssl_zeroize() instead of memset()\n     against unwanted compiler optimizations\n   * md_list() now returns hashes strongest first\n   * Selection of hash for signing ServerKeyExchange in TLS 1.2 now picks\n     strongest offered by client.\n   * All public contexts have _init() and _free() functions now for simpler\n     usage pattern\n\nBugfix\n   * Fix in debug_print_msg()\n   * Enforce alignment in the buffer allocator even if buffer is not aligned\n   * Remove less-than-zero checks on unsigned numbers\n   * Stricter check on SSL ClientHello internal sizes compared to actual packet\n     size (found by TrustInSoft)\n   * Fix WSAStartup() return value check (found by Peter Vaskovic)\n   * Other minor issues (found by Peter Vaskovic)\n   * Fix symlink command for cross compiling with CMake (found by Andre\n     Heinecke)\n   * Fix DER output of gen_key app (found by Gergely Budai)\n   * Very small records were incorrectly rejected when truncated HMAC was in\n     use with some ciphersuites and versions (RC4 in all versions, CBC with\n     versions < TLS 1.1).\n   * Very large records using more than 224 bytes of padding were incorrectly\n     rejected with CBC-based ciphersuites and TLS >= 1.1\n   * Very large records using less padding could cause a buffer overread of up\n     to 32 bytes with CBC-based ciphersuites and TLS >= 1.1\n   * Restore ability to use a v1 cert as a CA if trusted locally. (This had\n     been removed in 1.3.6.)\n   * Restore ability to locally trust a self-signed cert that is not a proper\n     CA for use as an end entity certificate. (This had been removed in\n     1.3.6.)\n   * Fix preprocessor checks for bn_mul PPC asm (found by Barry K. Nathan).\n   * Use \\n\\t rather than semicolons for bn_mul asm, since some assemblers\n     interpret semicolons as comment delimiters (found by Barry K. Nathan).\n   * Fix off-by-one error in parsing Supported Point Format extension that\n     caused some handshakes to fail.\n   * Fix possible miscomputation of the premaster secret with DHE-PSK key\n     exchange that caused some handshakes to fail with other implementations.\n     (Failure rate <= 1/255 with common DHM moduli.)\n   * Disable broken Sparc64 bn_mul assembly (found by Florian Obser).\n   * Fix base64_decode() to return and check length correctly (in case of\n     tight buffers)\n   * Fix mpi_write_string() to write \"00\" as hex output for empty MPI (found\n     by Hui Dong)\n\n= PolarSSL 1.3.7 released on 2014-05-02\nFeatures\n   * debug_set_log_mode() added to determine raw or full logging\n   * debug_set_threshold() added to ignore messages over threshold level\n   * version_check_feature() added to check for compile-time options at\n     run-time\n\nChanges\n   * POLARSSL_CONFIG_OPTIONS has been removed. All values are individually\n     checked and filled in the relevant module headers\n   * Debug module only outputs full lines instead of parts\n   * Better support for the different Attribute Types from IETF PKIX (RFC 5280)\n   * AES-NI now compiles with \"old\" assemblers too\n   * Ciphersuites based on RC4 now have the lowest priority by default\n\nBugfix\n   * Only iterate over actual certificates in ssl_write_certificate_request()\n     (found by Matthew Page)\n   * Typos in platform.c and pkcs11.c (found by Daniel Phillips and Steffan\n     Karger)\n   * cert_write app should use subject of issuer certificate as issuer of cert\n   * Fix false reject in padding check in ssl_decrypt_buf() for CBC\n     ciphersuites, for full SSL frames of data.\n   * Improve interoperability by not writing extension length in ClientHello /\n     ServerHello when no extensions are present (found by Matthew Page)\n   * rsa_check_pubkey() now allows an E up to N\n   * On OpenBSD, use arc4random_buf() instead of rand() to prevent warnings\n   * mpi_fill_random() was creating numbers larger than requested on\n     big-endian platform when size was not an integer number of limbs\n   * Fix dependencies issues in X.509 test suite.\n   * Some parts of ssl_tls.c were compiled even when the module was disabled.\n   * Fix detection of DragonflyBSD in net.c (found by Markus Pfeiffer)\n   * Fix detection of Clang on some Apple platforms with CMake\n     (found by Barry K. Nathan)\n\n= PolarSSL 1.3.6 released on 2014-04-11\n\nFeatures\n   * Support for the ALPN SSL extension\n   * Add option 'use_dev_random' to gen_key application\n   * Enable verification of the keyUsage extension for CA and leaf\n     certificates (POLARSSL_X509_CHECK_KEY_USAGE)\n   * Enable verification of the extendedKeyUsage extension\n     (POLARSSL_X509_CHECK_EXTENDED_KEY_USAGE)\n\nChanges\n   * x509_crt_info() now prints information about parsed extensions as well\n   * pk_verify() now returns a specific error code when the signature is valid\n     but shorter than the supplied length.\n   * Use UTC time to check certificate validity.\n   * Reject certificates with times not in UTC, per RFC 5280.\n\nSecurity\n   * Avoid potential timing leak in ecdsa_sign() by blinding modular division.\n     (Found by Watson Ladd.)\n   * The notAfter date of some certificates was no longer checked since 1.3.5.\n     This affects certificates in the user-supplied chain except the top\n     certificate. If the user-supplied chain contains only one certificates,\n     it is not affected (ie, its notAfter date is properly checked).\n   * Prevent potential NULL pointer dereference in ssl_read_record() (found by\n     TrustInSoft)\n\nBugfix\n   * The length of various ClientKeyExchange messages was not properly checked.\n   * Some example server programs were not sending the close_notify alert.\n   * Potential memory leak in mpi_exp_mod() when error occurs during\n     calculation of RR.\n   * Fixed malloc/free default #define in platform.c (found by Gergely Budai).\n   * Fixed type which made POLARSSL_ENTROPY_FORCE_SHA256 uneffective (found by\n     Gergely Budai).\n   * Fix #include path in ecdsa.h which wasn't accepted by some compilers.\n     (found by Gergely Budai)\n   * Fix compile errors when POLARSSL_ERROR_STRERROR_BC is undefined (found by\n     Shuo Chen).\n   * oid_get_numeric_string() used to truncate the output without returning an\n     error if the output buffer was just 1 byte too small.\n   * dhm_parse_dhm() (hence dhm_parse_dhmfile()) did not set dhm->len.\n   * Calling pk_debug() on an RSA-alt key would segfault.\n   * pk_get_size() and pk_get_len() were off by a factor 8 for RSA-alt keys.\n   * Potential buffer overwrite in pem_write_buffer() because of low length\n     indication (found by Thijs Alkemade)\n   * EC curves constants, which should be only in ROM since 1.3.3, were also\n     stored in RAM due to missing 'const's (found by Gergely Budai).\n\n= PolarSSL 1.3.5 released on 2014-03-26\nFeatures\n   * HMAC-DRBG as a separate module\n   * Option to set the Curve preference order (disabled by default)\n   * Single Platform compatilibity layer (for memory / printf / fprintf)\n   * Ability to provide alternate timing implementation\n   * Ability to force the entropy module to use SHA-256 as its basis\n     (POLARSSL_ENTROPY_FORCE_SHA256)\n   * Testing script ssl-opt.sh added for testing 'live' ssl option\n     interoperability against OpenSSL and PolarSSL\n   * Support for reading EC keys that use SpecifiedECDomain in some cases.\n   * Entropy module now supports seed writing and reading\n\nChanges\n   * Deprecated the Memory layer\n   * entropy_add_source(), entropy_update_manual() and entropy_gather()\n     now thread-safe if POLARSSL_THREADING_C defined\n   * Improvements to the CMake build system, contributed by Julian Ospald.\n   * Work around a bug of the version of Clang shipped by Apple with Mavericks\n     that prevented bignum.c from compiling. (Reported by Rafael Baptista.)\n   * Revamped the compat.sh interoperatibility script to include support for\n     testing against GnuTLS\n   * Deprecated ssl_set_own_cert_rsa() and ssl_set_own_cert_rsa_alt()\n   * Improvements to tests/Makefile, contributed by Oden Eriksson.\n\nSecurity\n   * Forbid change of server certificate during renegotiation to prevent\n     \"triple handshake\" attack when authentication mode is 'optional' (the\n     attack was already impossible when authentication is required).\n   * Check notBefore timestamp of certificates and CRLs from the future.\n   * Forbid sequence number wrapping\n   * Fixed possible buffer overflow with overlong PSK\n   * Possible remotely-triggered out-of-bounds memory access fixed (found by\n     TrustInSoft)\n\nBugfix\n   * ecp_gen_keypair() does more tries to prevent failure because of\n     statistics\n   * Fixed bug in RSA PKCS#1 v1.5 \"reversed\" operations\n   * Fixed testing with out-of-source builds using cmake\n   * Fixed version-major intolerance in server\n   * Fixed CMake symlinking on out-of-source builds\n   * Fixed dependency issues in test suite\n   * Programs rsa_sign_pss and rsa_verify_pss were not using PSS since 1.3.0\n   * Bignum's MIPS-32 assembly was used on MIPS-64, causing chaos. (Found by\n     Alex Wilson.)\n   * ssl_cache was creating entries when max_entries=0 if TIMING_C was enabled.\n   * m_sleep() was sleeping twice too long on most Unix platforms.\n   * Fixed bug with session tickets and non-blocking I/O in the unlikely case\n     send() would return an EAGAIN error when sending the ticket.\n   * ssl_cache was leaking memory when reusing a timed out entry containing a\n     client certificate.\n   * ssl_srv was leaking memory when client presented a timed out ticket\n     containing a client certificate\n   * ssl_init() was leaving a dirty pointer in ssl_context if malloc of\n     out_ctr failed\n   * ssl_handshake_init() was leaving dirty pointers in subcontexts if malloc\n     of one of them failed\n   * Fix typo in rsa_copy() that impacted PKCS#1 v2 contexts\n   * x509_get_current_time() uses localtime_r() to prevent thread issues\n\n= PolarSSL 1.3.4 released on 2014-01-27\nFeatures\n   * Support for the Koblitz curves: secp192k1, secp224k1, secp256k1\n   * Support for RIPEMD-160\n   * Support for AES CFB8 mode\n   * Support for deterministic ECDSA (RFC 6979)\n\nBugfix\n   * Potential memory leak in bignum_selftest()\n   * Replaced expired test certificate\n   * ssl_mail_client now terminates lines with CRLF, instead of LF\n   * net module handles timeouts on blocking sockets better (found by Tilman\n     Sauerbeck)\n   * Assembly format fixes in bn_mul.h\n\nSecurity\n   * Missing MPI_CHK calls added around unguarded mpi calls (found by\n     TrustInSoft)\n\n= PolarSSL 1.3.3 released on 2013-12-31\nFeatures\n   * EC key generation support in gen_key app\n   * Support for adhering to client ciphersuite order preference\n     (POLARSSL_SSL_SRV_RESPECT_CLIENT_PREFERENCE)\n   * Support for Curve25519\n   * Support for ECDH-RSA and ECDH-ECDSA key exchanges and ciphersuites\n   * Support for IPv6 in the NET module\n   * AES-NI support for AES, AES-GCM and AES key scheduling\n   * SSL Pthread-based server example added (ssl_pthread_server)\n\nChanges\n   * gen_prime() speedup\n   * Speedup of ECP multiplication operation\n   * Relaxed some SHA2 ciphersuite's version requirements\n   * Dropped use of readdir_r() instead of readdir() with threading support\n   * More constant-time checks in the RSA module\n   * Split off curves from ecp.c into ecp_curves.c\n   * Curves are now stored fully in ROM\n   * Memory usage optimizations in ECP module\n   * Removed POLARSSL_THREADING_DUMMY\n\nBugfix\n   * Fixed bug in mpi_set_bit() on platforms where t_uint is wider than int\n   * Fixed X.509 hostname comparison (with non-regular characters)\n   * SSL now gracefully handles missing RNG\n   * Missing defines / cases for RSA_PSK key exchange\n   * crypt_and_hash app checks MAC before final decryption\n   * Potential memory leak in ssl_ticket_keys_init()\n   * Memory leak in benchmark application\n   * Fixed x509_crt_parse_path() bug on Windows platforms\n   * Added missing MPI_CHK() around some statements in mpi_div_mpi() (found by\n     TrustInSoft)\n   * Fixed potential overflow in certificate size verification in\n     ssl_write_certificate() (found by TrustInSoft)\n\nSecurity\n   * Possible remotely-triggered out-of-bounds memory access fixed (found by\n     TrustInSoft)\n\n= PolarSSL 1.3.2 released on 2013-11-04\nFeatures\n   * PK tests added to test framework\n   * Added optional optimization for NIST MODP curves (POLARSSL_ECP_NIST_OPTIM)\n   * Support for Camellia-GCM mode and ciphersuites\n\nChanges\n   * Padding checks in cipher layer are now constant-time\n   * Value comparisons in SSL layer are now constant-time\n   * Support for serialNumber, postalAddress and postalCode in X509 names\n   * SSL Renegotiation was refactored\n\nBugfix\n   * More stringent checks in cipher layer\n   * Server does not send out extensions not advertised by client\n   * Prevent possible alignment warnings on casting from char * to 'aligned *'\n   * Misc fixes and additions to dependency checks\n   * Const correctness\n   * cert_write with selfsign should use issuer_name as subject_name\n   * Fix ECDSA corner case: missing reduction mod N (found by DualTachyon)\n   * Defines to handle UEFI environment under MSVC\n   * Server-side initiated renegotiations send HelloRequest\n\n= PolarSSL 1.3.1 released on 2013-10-15\nFeatures\n   * Support for Brainpool curves and TLS ciphersuites (RFC 7027)\n   * Support for ECDHE-PSK key-exchange and ciphersuites\n   * Support for RSA-PSK key-exchange and ciphersuites\n\nChanges\n   * RSA blinding locks for a smaller amount of time\n   * TLS compression only allocates working buffer once\n   * Introduced POLARSSL_HAVE_READDIR_R for systems without it\n   * config.h is more script-friendly\n\nBugfix\n   * Missing MSVC defines added\n   * Compile errors with POLARSSL_RSA_NO_CRT\n   * Header files with 'polarssl/'\n   * Const correctness\n   * Possible naming collision in dhm_context\n   * Better support for MSVC\n   * threading_set_alt() name\n   * Added missing x509write_crt_set_version()\n\n= PolarSSL 1.3.0 released on 2013-10-01\nFeatures\n   * Elliptic Curve Cryptography module added\n   * Elliptic Curve Diffie Hellman module added\n   * Ephemeral Elliptic Curve Diffie Hellman support for SSL/TLS\n    (ECDHE-based ciphersuites)\n   * Ephemeral Elliptic Curve Digital Signature Algorithm support for SSL/TLS\n    (ECDSA-based ciphersuites)\n   * Ability to specify allowed ciphersuites based on the protocol version.\n   * PSK and DHE-PSK based ciphersuites added\n   * Memory allocation abstraction layer added\n   * Buffer-based memory allocator added (no malloc() / free() / HEAP usage)\n   * Threading abstraction layer added (dummy / pthread / alternate)\n   * Public Key abstraction layer added\n   * Parsing Elliptic Curve keys\n   * Parsing Elliptic Curve certificates\n   * Support for max_fragment_length extension (RFC 6066)\n   * Support for truncated_hmac extension (RFC 6066)\n   * Support for zeros-and-length (ANSI X.923) padding, one-and-zeros\n     (ISO/IEC 7816-4) padding and zero padding in the cipher layer\n   * Support for session tickets (RFC 5077)\n   * Certificate Request (CSR) generation with extensions (key_usage,\n     ns_cert_type)\n   * X509 Certificate writing with extensions (basic_constraints,\n     issuer_key_identifier, etc)\n   * Optional blinding for RSA, DHM and EC\n   * Support for multiple active certificate / key pairs in SSL servers for\n     the same host (Not to be confused with SNI!)\n\nChanges\n   * Ability to enable / disable SSL v3 / TLS 1.0 / TLS 1.1 / TLS 1.2\n     individually\n   * Introduced separate SSL Ciphersuites module that is based on\n     Cipher and MD information\n   * Internals for SSL module adapted to have separate IV pointer that is\n     dynamically set (Better support for hardware acceleration)\n   * Moved all OID functionality to a separate module. RSA function\n     prototypes for the RSA sign and verify functions changed as a result\n   * Split up the GCM module into a starts/update/finish cycle\n   * Client and server now filter sent and accepted ciphersuites on minimum\n     and maximum protocol version\n   * Ability to disable server_name extension (RFC 6066)\n   * Renamed error_strerror() to the less conflicting polarssl_strerror()\n     (Ability to keep old as well with POLARSSL_ERROR_STRERROR_BC)\n   * SHA2 renamed to SHA256, SHA4 renamed to SHA512 and functions accordingly\n   * All RSA operations require a random generator for blinding purposes\n   * X509 core refactored\n   * x509_crt_verify() now case insensitive for cn (RFC 6125 6.4)\n   * Also compiles / runs without time-based functions (!POLARSSL_HAVE_TIME)\n   * Support faulty X509 v1 certificates with extensions\n     (POLARSSL_X509_ALLOW_EXTENSIONS_NON_V3)\n\nBugfix\n   * Fixed parse error in ssl_parse_certificate_request()\n   * zlib compression/decompression skipped on empty blocks\n   * Support for AIX header locations in net.c module\n   * Fixed file descriptor leaks\n\nSecurity\n   * RSA blinding on CRT operations to counter timing attacks\n     (found by Cyril Arnaud and Pierre-Alain Fouque)\n\n\n= Version 1.2.14 released 2015-05-??\n\nSecurity\n   * Fix potential invalid memory read in the server, that allows a client to\n     crash it remotely (found by Caj Larsson).\n   * Fix potential invalid memory read in certificate parsing, that allows a\n     client to crash the server remotely if client authentication is enabled\n     (found using Codenomicon Defensics).\n   * Add countermeasure against \"Lucky 13 strikes back\" cache-based attack,\n     https://dl.acm.org/citation.cfm?id=2714625\n\nBugfix\n   * Fix bug in Via Padlock support (found by Nikos Mavrogiannopoulos).\n   * Fix hardclock() (only used in the benchmarking program) with some\n     versions of mingw64 (found by kxjhlele).\n   * Fix warnings from mingw64 in timing.c (found by kxjklele).\n   * Fix potential unintended sign extension in asn1_get_len() on 64-bit\n     platforms (found with Coverity Scan).\n\n= Version 1.2.13 released 2015-02-16\nNote: Although PolarSSL has been renamed to mbed TLS, no changes reflecting\n      this will be made in the 1.2 branch at this point.\n\nSecurity\n   * Fix remotely-triggerable uninitialised pointer dereference caused by\n     crafted X.509 certificate (TLS server is not affected if it doesn't ask\n     for a client certificate) (found using Codenomicon Defensics).\n   * Fix remotely-triggerable memory leak caused by crafted X.509 certificates\n     (TLS server is not affected if it doesn't ask for a client certificate)\n     (found using Codenomicon Defensics).\n   * Fix potential stack overflow while parsing crafted X.509 certificates\n     (TLS server is not affected if it doesn't ask for a client certificate)\n     found using Codenomicon Defensics).\n   * Fix buffer overread of size 1 when parsing crafted X.509 certificates\n     (TLS server is not affected if it doesn't ask for a client certificate).\n\nBugfix\n   * Fix potential undefined behaviour in Camellia.\n   * Fix memory leaks in PKCS#5 and PKCS#12.\n   * Stack buffer overflow if ctr_drbg_update() is called with too large\n     add_len (found by Jean-Philippe Aumasson) (not triggerable remotely).\n   * Fix bug in MPI/bignum on s390/s390x (reported by Dan Horák) (introduced\n     in 1.2.12).\n   * Fix unchecked return code in x509_crt_parse_path() on Windows (found by\n     Peter Vaskovic).\n   * Fix assembly selection for MIPS64 (thanks to James Cowgill).\n   * ssl_get_verify_result() now works even if the handshake was aborted due\n     to a failed verification (found by Fredrik Axelsson).\n   * Skip writing and parsing signature_algorithm extension if none of the\n     key exchanges enabled needs certificates. This fixes a possible interop\n     issue with some servers when a zero-length extension was sent. (Reported\n     by Peter Dettman.)\n   * On a 0-length input, base64_encode() did not correctly set output length\n     (found by Hendrik van den Boogaard).\n\nChanges\n   * Blind RSA private operations even when POLARSSL_RSA_NO_CRT is defined.\n   * Forbid repeated extensions in X.509 certificates.\n   * Add compile-time option POLARSSL_X509_MAX_INTERMEDIATE_CA to limit the\n     length of an X.509 verification chain (default = 8).\n= Version 1.2.12 released 2014-10-24\n\nSecurity\n   * Remotely-triggerable memory leak when parsing some X.509 certificates\n     (server is not affected if it doesn't ask for a client certificate).\n     (Found using Codenomicon Defensics.)\n\nBugfix\n   * Fix potential bad read in parsing ServerHello (found by Adrien\n     Vialletelle).\n   * ssl_close_notify() could send more than one message in some circumstances\n     with non-blocking I/O.\n   * x509_crt_parse() did not increase total_failed on PEM error\n   * Fix compiler warnings on iOS (found by Sander Niemeijer).\n   * Don't print uninitialised buffer in ssl_mail_client (found by Marc Abel).\n   * Fix net_accept() regarding non-blocking sockets (found by Luca Pesce).\n   * ssl_read() could return non-application data records on server while\n     renegotation was pending, and on client when a HelloRequest was received.\n   * Fix warnings from Clang's scan-build (contributed by Alfred Klomp).\n\nChanges\n   * X.509 certificates with more than one AttributeTypeAndValue per\n     RelativeDistinguishedName are not accepted any more.\n   * ssl_read() now returns POLARSSL_ERR_NET_WANT_READ rather than\n     POLARSSL_ERR_SSL_UNEXPECTED_MESSAGE on harmless alerts.\n   * Accept spaces at end of line or end of buffer in base64_decode().\n\n= Version 1.2.11 released 2014-07-11\nFeatures\n   * Entropy module now supports seed writing and reading\n\nChanges\n   * Introduced POLARSSL_HAVE_READDIR_R for systems without it\n   * Improvements to the CMake build system, contributed by Julian Ospald.\n   * Work around a bug of the version of Clang shipped by Apple with Mavericks\n     that prevented bignum.c from compiling. (Reported by Rafael Baptista.)\n   * Improvements to tests/Makefile, contributed by Oden Eriksson.\n   * Use UTC time to check certificate validity.\n   * Reject certificates with times not in UTC, per RFC 5280.\n   * Migrate zeroizing of data to polarssl_zeroize() instead of memset()\n     against unwanted compiler optimizations\n\nSecurity\n   * Forbid change of server certificate during renegotiation to prevent\n     \"triple handshake\" attack when authentication mode is optional (the\n     attack was already impossible when authentication is required).\n   * Check notBefore timestamp of certificates and CRLs from the future.\n   * Forbid sequence number wrapping\n   * Prevent potential NULL pointer dereference in ssl_read_record() (found by\n     TrustInSoft)\n   * Fix length checking for AEAD ciphersuites (found by Codenomicon).\n     It was possible to crash the server (and client) using crafted messages\n     when a GCM suite was chosen.\n\nBugfix\n   * Fixed X.509 hostname comparison (with non-regular characters)\n   * SSL now gracefully handles missing RNG\n   * crypt_and_hash app checks MAC before final decryption\n   * Fixed x509_crt_parse_path() bug on Windows platforms\n   * Added missing MPI_CHK() around some statements in mpi_div_mpi() (found by\n     TrustInSoft)\n   * Fixed potential overflow in certificate size verification in\n     ssl_write_certificate() (found by TrustInSoft)\n   * Fix ASM format in bn_mul.h\n   * Potential memory leak in bignum_selftest()\n   * Replaced expired test certificate\n   * ssl_mail_client now terminates lines with CRLF, instead of LF\n   * Fix bug in RSA PKCS#1 v1.5 \"reversed\" operations\n   * Fixed testing with out-of-source builds using cmake\n   * Fixed version-major intolerance in server\n   * Fixed CMake symlinking on out-of-source builds\n   * Bignum's MIPS-32 assembly was used on MIPS-64, causing chaos. (Found by\n     Alex Wilson.)\n   * ssl_init() was leaving a dirty pointer in ssl_context if malloc of\n     out_ctr failed\n   * ssl_handshake_init() was leaving dirty pointers in subcontexts if malloc\n     of one of them failed\n   * x509_get_current_time() uses localtime_r() to prevent thread issues\n   * Some example server programs were not sending the close_notify alert.\n   * Potential memory leak in mpi_exp_mod() when error occurs during\n     calculation of RR.\n   * Improve interoperability by not writing extension length in ClientHello\n     when no extensions are present (found by Matthew Page)\n   * rsa_check_pubkey() now allows an E up to N\n   * On OpenBSD, use arc4random_buf() instead of rand() to prevent warnings\n   * mpi_fill_random() was creating numbers larger than requested on\n     big-endian platform when size was not an integer number of limbs\n   * Fix detection of DragonflyBSD in net.c (found by Markus Pfeiffer)\n   * Stricter check on SSL ClientHello internal sizes compared to actual packet\n     size (found by TrustInSoft)\n   * Fix preprocessor checks for bn_mul PPC asm (found by Barry K. Nathan).\n   * Use \\n\\t rather than semicolons for bn_mul asm, since some assemblers\n     interpret semicolons as comment delimiters (found by Barry K. Nathan).\n   * Disable broken Sparc64 bn_mul assembly (found by Florian Obser).\n   * Fix base64_decode() to return and check length correctly (in case of\n     tight buffers)\n\n= Version 1.2.10 released 2013-10-07\nChanges\n   * Changed RSA blinding to a slower but thread-safe version\n\nBugfix\n   * Fixed memory leak in RSA as a result of introduction of blinding\n   * Fixed ssl_pkcs11_decrypt() prototype\n   * Fixed MSVC project files\n\n= Version 1.2.9 released 2013-10-01\nChanges\n   * x509_verify() now case insensitive for cn (RFC 6125 6.4)\n\nBugfix\n   * Fixed potential memory leak when failing to resume a session\n   * Fixed potential file descriptor leaks (found by Remi Gacogne)\n   * Minor fixes\n\nSecurity\n   * Fixed potential heap buffer overflow on large hostname setting\n   * Fixed potential negative value misinterpretation in load_file()\n   * RSA blinding on CRT operations to counter timing attacks\n     (found by Cyril Arnaud and Pierre-Alain Fouque)\n\n= Version 1.2.8 released 2013-06-19\nFeatures\n   * Parsing of PKCS#8 encrypted private key files\n   * PKCS#12 PBE and derivation functions\n   * Centralized module option values in config.h to allow user-defined\n     settings without editing header files by using POLARSSL_CONFIG_OPTIONS\n\nChanges\n   * HAVEGE random generator disabled by default\n   * Internally split up x509parse_key() into a (PEM) handler function\n     and specific DER parser functions for the PKCS#1 and unencrypted\n     PKCS#8 private key formats\n   * Added mechanism to provide alternative implementations for all\n     symmetric cipher and hash algorithms (e.g. POLARSSL_AES_ALT in\n     config.h)\n   * PKCS#5 module added. Moved PBKDF2 functionality inside and deprecated\n     old PBKDF2 module\n\nBugfix\n   * Secure renegotiation extension should only be sent in case client\n     supports secure renegotiation\n   * Fixed offset for cert_type list in ssl_parse_certificate_request()\n   * Fixed const correctness issues that have no impact on the ABI\n   * x509parse_crt() now better handles PEM error situations\n   * ssl_parse_certificate() now calls x509parse_crt_der() directly\n     instead of the x509parse_crt() wrapper that can also parse PEM\n     certificates\n   * x509parse_crtpath() is now reentrant and uses more portable stat()\n   * Fixed bignum.c and bn_mul.h to support Thumb2 and LLVM compiler\n   * Fixed values for 2-key Triple DES in cipher layer\n   * ssl_write_certificate_request() can handle empty ca_chain\n\nSecurity\n   * A possible DoS during the SSL Handshake, due to faulty parsing of\n     PEM-encoded certificates has been fixed (found by Jack Lloyd)\n\n= Version 1.2.7 released 2013-04-13\nFeatures\n   * Ability to specify allowed ciphersuites based on the protocol version.\n\nChanges\n   * Default Blowfish keysize is now 128-bits\n   * Test suites made smaller to accommodate Raspberry Pi\n\nBugfix\n   * Fix for MPI assembly for ARM\n   * GCM adapted to support sizes > 2^29\n\n= Version 1.2.6 released 2013-03-11\nBugfix\n   * Fixed memory leak in ssl_free() and ssl_reset() for active session\n   * Corrected GCM counter incrementation to use only 32-bits instead of\n     128-bits (found by Yawning Angel)\n   * Fixes for 64-bit compilation with MS Visual Studio\n   * Fixed net_bind() for specified IP addresses on little endian systems\n   * Fixed assembly code for ARM (Thumb and regular) for some compilers\n\nChanges\n   * Internally split up rsa_pkcs1_encrypt(), rsa_pkcs1_decrypt(),\n     rsa_pkcs1_sign() and rsa_pkcs1_verify() to separate PKCS#1 v1.5 and\n     PKCS#1 v2.1 functions\n   * Added support for custom labels when using rsa_rsaes_oaep_encrypt()\n     or rsa_rsaes_oaep_decrypt()\n   * Re-added handling for SSLv2 Client Hello when the define\n     POLARSSL_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO is set\n   * The SSL session cache module (ssl_cache) now also retains peer_cert\n     information (not the entire chain)\n\nSecurity\n   * Removed further timing differences during SSL message decryption in\n     ssl_decrypt_buf()\n   * Removed timing differences due to bad padding from\n     rsa_rsaes_pkcs1_v15_decrypt() and rsa_pkcs1_decrypt() for PKCS#1 v1.5\n     operations\n\n= Version 1.2.5 released 2013-02-02\nChanges\n   * Allow enabling of dummy error_strerror() to support some use-cases\n   * Debug messages about padding errors during SSL message decryption are\n     disabled by default and can be enabled with POLARSSL_SSL_DEBUG_ALL\n   * Sending of security-relevant alert messages that do not break\n     interoperability can be switched on/off with the flag\n     POLARSSL_SSL_ALL_ALERT_MESSAGES\n\nSecurity\n   * Removed timing differences during SSL message decryption in\n     ssl_decrypt_buf() due to badly formatted padding\n\n= Version 1.2.4 released 2013-01-25\nChanges\n   * More advanced SSL ciphersuite representation and moved to more dynamic\n     SSL core\n   * Added ssl_handshake_step() to allow single stepping the handshake process\n\nBugfix\n   * Memory leak when using RSA_PKCS_V21 operations fixed\n   * Handle future version properly in ssl_write_certificate_request()\n   * Correctly handle CertificateRequest message in client for <= TLS 1.1\n     without DN list\n\n= Version 1.2.3 released 2012-11-26\nBugfix\n   * Server not always sending correct CertificateRequest message\n\n= Version 1.2.2 released 2012-11-24\nChanges\n   * Added p_hw_data to ssl_context for context specific hardware acceleration\n     data\n   * During verify trust-CA is only checked for expiration and CRL presence\n\nBugfixes\n   * Fixed client authentication compatibility\n   * Fixed dependency on POLARSSL_SHA4_C in SSL modules\n\n= Version 1.2.1 released 2012-11-20\nChanges\n   * Depth that the certificate verify callback receives is now numbered\n     bottom-up (Peer cert depth is 0)\n\nBugfixes\n   * Fixes for MSVC6\n   * Moved mpi_inv_mod() outside POLARSSL_GENPRIME\n   * Allow R and A to point to same mpi in mpi_div_mpi (found by Manuel\n     Pégourié-Gonnard)\n   * Fixed possible segfault in mpi_shift_r() (found by Manuel\n     Pégourié-Gonnard)\n   * Added max length check for rsa_pkcs1_sign with PKCS#1 v2.1\n\n= Version 1.2.0 released 2012-10-31\nFeatures\n   * Added support for NULL cipher (POLARSSL_CIPHER_NULL_CIPHER) and weak\n     ciphersuites (POLARSSL_ENABLE_WEAK_CIPHERSUITES). They are disabled by\n     default!\n   * Added support for wildcard certificates\n   * Added support for multi-domain certificates through the X509 Subject\n     Alternative Name extension\n   * Added preliminary ASN.1 buffer writing support\n   * Added preliminary X509 Certificate Request writing support\n   * Added key_app_writer example application\n   * Added cert_req example application\n   * Added base Galois Counter Mode (GCM) for AES\n   * Added TLS 1.2 support (RFC 5246)\n   * Added GCM suites to TLS 1.2 (RFC 5288)\n   * Added commandline error code convertor (util/strerror)\n   * Added support for Hardware Acceleration hooking in SSL/TLS\n   * Added OpenSSL / PolarSSL compatibility script (tests/compat.sh) and\n     example application (programs/ssl/o_p_test) (requires OpenSSL)\n   * Added X509 CA Path support\n   * Added Thumb assembly optimizations\n   * Added DEFLATE compression support as per RFC3749 (requires zlib)\n   * Added blowfish algorithm (Generic and cipher layer)\n   * Added PKCS#5 PBKDF2 key derivation function\n   * Added Secure Renegotiation (RFC 5746)\n   * Added predefined DHM groups from RFC 5114\n   * Added simple SSL session cache implementation\n   * Added ServerName extension parsing (SNI) at server side\n   * Added option to add minimum accepted SSL/TLS protocol version\n\nChanges\n   * Removed redundant POLARSSL_DEBUG_MSG define\n   * AES code only check for Padlock once\n   * Fixed const-correctness mpi_get_bit()\n   * Documentation for mpi_lsb() and mpi_msb()\n   * Moved out_msg to out_hdr + 32 to support hardware acceleration\n   * Changed certificate verify behaviour to comply with RFC 6125 section 6.3\n     to not match CN if subjectAltName extension is present (Closes ticket #56)\n   * Cipher layer cipher_mode_t POLARSSL_MODE_CFB128 is renamed to\n     POLARSSL_MODE_CFB, to also handle different block size CFB modes.\n   * Removed handling for SSLv2 Client Hello (as per RFC 5246 recommendation)\n   * Revamped session resumption handling\n   * Generalized external private key implementation handling (like PKCS#11)\n     in SSL/TLS\n   * Revamped x509_verify() and the SSL f_vrfy callback implementations\n   * Moved from unsigned long to fixed width uint32_t types throughout code\n   * Renamed ciphersuites naming scheme to IANA reserved names\n\nBugfix\n   * Fixed handling error in mpi_cmp_mpi() on longer B values (found by\n     Hui Dong)\n   * Fixed potential heap corruption in x509_name allocation\n   * Fixed single RSA test that failed on Big Endian systems (Closes ticket #54)\n   * mpi_exp_mod() now correctly handles negative base numbers (Closes ticket\n     #52)\n   * Handle encryption with private key and decryption with public key as per\n     RFC 2313\n   * Handle empty certificate subject names\n   * Prevent reading over buffer boundaries on X509 certificate parsing\n   * mpi_add_abs() now correctly handles adding short numbers to long numbers\n     with carry rollover (found by Ruslan Yushchenko)\n   * Handle existence of OpenSSL Trust Extensions at end of X.509 DER blob\n   * Fixed MPI assembly for SPARC64 platform\n\nSecurity\n   * Fixed potential memory zeroization on miscrafted RSA key (found by Eloi\n     Vanderbeken)\n\n= Version 1.1.8 released on 2013-10-01\nBugfix\n   * Fixed potential memory leak when failing to resume a session\n   * Fixed potential file descriptor leaks\n\nSecurity\n   * Potential buffer-overflow for ssl_read_record() (independently found by\n     both TrustInSoft and Paul Brodeur of Leviathan Security Group)\n   * Potential negative value misinterpretation in load_file()\n   * Potential heap buffer overflow on large hostname setting\n\n= Version 1.1.7 released on 2013-06-19\nChanges\n   * HAVEGE random generator disabled by default\n\nBugfix\n   * x509parse_crt() now better handles PEM error situations\n   * ssl_parse_certificate() now calls x509parse_crt_der() directly\n     instead of the x509parse_crt() wrapper that can also parse PEM\n     certificates\n   * Fixed values for 2-key Triple DES in cipher layer\n   * ssl_write_certificate_request() can handle empty ca_chain\n\nSecurity\n   * A possible DoS during the SSL Handshake, due to faulty parsing of\n     PEM-encoded certificates has been fixed (found by Jack Lloyd)\n\n= Version 1.1.6 released on 2013-03-11\nBugfix\n   * Fixed net_bind() for specified IP addresses on little endian systems\n\nChanges\n   * Allow enabling of dummy error_strerror() to support some use-cases\n   * Debug messages about padding errors during SSL message decryption are\n     disabled by default and can be enabled with POLARSSL_SSL_DEBUG_ALL\n\nSecurity\n   * Removed timing differences during SSL message decryption in\n     ssl_decrypt_buf()\n   * Removed timing differences due to bad padding from\n     rsa_rsaes_pkcs1_v15_decrypt() and rsa_pkcs1_decrypt() for PKCS#1 v1.5\n     operations\n\n= Version 1.1.5 released on 2013-01-16\nBugfix\n   * Fixed MPI assembly for SPARC64 platform\n   * Handle existence of OpenSSL Trust Extensions at end of X.509 DER blob\n   * mpi_add_abs() now correctly handles adding short numbers to long numbers\n     with carry rollover\n   * Moved mpi_inv_mod() outside POLARSSL_GENPRIME\n   * Prevent reading over buffer boundaries on X509 certificate parsing\n   * mpi_exp_mod() now correctly handles negative base numbers (Closes ticket\n     #52)\n   * Fixed possible segfault in mpi_shift_r() (found by Manuel\n     Pégourié-Gonnard)\n   * Allow R and A to point to same mpi in mpi_div_mpi (found by Manuel\n     Pégourié-Gonnard)\n   * Added max length check for rsa_pkcs1_sign with PKCS#1 v2.1\n   * Memory leak when using RSA_PKCS_V21 operations fixed\n   * Handle encryption with private key and decryption with public key as per\n     RFC 2313\n   * Fixes for MSVC6\n\nSecurity\n   * Fixed potential memory zeroization on miscrafted RSA key (found by Eloi\n     Vanderbeken)\n\n= Version 1.1.4 released on 2012-05-31\nBugfix\n   * Correctly handle empty SSL/TLS packets (Found by James Yonan)\n   * Fixed potential heap corruption in x509_name allocation\n   * Fixed single RSA test that failed on Big Endian systems (Closes ticket #54)\n\n= Version 1.1.3 released on 2012-04-29\nBugfix\n   * Fixed random MPI generation to not generate more size than requested.\n\n= Version 1.1.2 released on 2012-04-26\nBugfix\n   * Fixed handling error in mpi_cmp_mpi() on longer B values (found by\n     Hui Dong)\n\nSecurity\n   * Fixed potential memory corruption on miscrafted client messages (found by\n     Frama-C team at CEA LIST)\n   * Fixed generation of DHM parameters to correct length (found by Ruslan\n     Yushchenko)\n\n= Version 1.1.1 released on 2012-01-23\nBugfix\n   * Check for failed malloc() in ssl_set_hostname() and x509_get_entries()\n     (Closes ticket #47, found by Hugo Leisink)\n   * Fixed issues with Intel compiler on 64-bit systems (Closes ticket #50)\n   * Fixed multiple compiler warnings for VS6 and armcc\n   * Fixed bug in CTR_CRBG selftest\n\n= Version 1.1.0 released on 2011-12-22\nFeatures\n   * Added ssl_session_reset() to allow better multi-connection pools of\n     SSL contexts without needing to set all non-connection-specific\n     data and pointers again. Adapted ssl_server to use this functionality.\n   * Added ssl_set_max_version() to allow clients to offer a lower maximum\n     supported version to a server to help buggy server implementations.\n     (Closes ticket #36)\n   * Added cipher_get_cipher_mode() and cipher_get_cipher_operation()\n     introspection functions (Closes ticket #40)\n   * Added CTR_DRBG based on AES-256-CTR (NIST SP 800-90) random generator\n   * Added a generic entropy accumulator that provides support for adding\n     custom entropy sources and added some generic and platform dependent\n     entropy sources\n\nChanges\n   * Documentation for AES and Camellia in modes CTR and CFB128 clarified.\n   * Fixed rsa_encrypt and rsa_decrypt examples to use public key for\n     encryption and private key for decryption. (Closes ticket #34)\n   * Inceased maximum size of ASN1 length reads to 32-bits.\n   * Added an EXPLICIT tag number parameter to x509_get_ext()\n   * Added a separate CRL entry extension parsing function\n   * Separated the ASN.1 parsing code from the X.509 specific parsing code.\n     So now there is a module that is controlled with POLARSSL_ASN1_PARSE_C.\n   * Changed the defined key-length of DES ciphers in cipher.h to include the\n     parity bits, to prevent mistakes in copying data. (Closes ticket #33)\n   * Loads of minimal changes to better support WINCE as a build target\n     (Credits go to Marco Lizza)\n   * Added POLARSSL_MPI_WINDOW_SIZE definition to allow easier time to memory\n     trade-off\n   * Introduced POLARSSL_MPI_MAX_SIZE and POLARSSL_MPI_MAX_BITS for MPI size\n     management (Closes ticket #44)\n   * Changed the used random function pointer to more flexible format. Renamed\n     havege_rand() to havege_random() to prevent mistakes. Lots of changes as\n     a consequence in library code and programs\n   * Moved all examples programs to use the new entropy and CTR_DRBG\n   * Added permissive certificate parsing to x509parse_crt() and\n     x509parse_crtfile(). With permissive parsing the parsing does not stop on\n     encountering a parse-error. Beware that the meaning of return values has\n     changed!\n   * All error codes are now negative. Even on mermory failures and IO errors.\n\nBugfix\n   * Fixed faulty HMAC-MD2 implementation. Found by dibac. (Closes\n     ticket #37)\n   * Fixed a bug where the CRL parser expected an EXPLICIT ASN.1 tag\n     before version numbers\n   * Allowed X509 key usage parsing to accept 4 byte values instead of the\n     standard 1 byte version sometimes used by Microsoft. (Closes ticket #38)\n   * Fixed incorrect behaviour in case of RSASSA-PSS with a salt length\n     smaller than the hash length. (Closes ticket #41)\n   * If certificate serial is longer than 32 octets, serial number is now\n     appended with '....' after first 28 octets\n   * Improved build support for s390x and sparc64 in bignum.h\n   * Fixed MS Visual C++ name clash with int64 in sha4.h\n   * Corrected removal of leading \"00:\" in printing serial numbers in\n     certificates and CRLs\n\n= Version 1.0.0 released on 2011-07-27\nFeatures\n   * Expanded cipher layer with support for CFB128 and CTR mode\n   * Added rsa_encrypt and rsa_decrypt simple example programs.\n\nChanges\n   * The generic cipher and message digest layer now have normal error\n     codes instead of integers\n\nBugfix\n   * Undid faulty bug fix in ssl_write() when flushing old data (Ticket\n     #18)\n\n= Version 0.99-pre5 released on 2011-05-26\nFeatures\n   * Added additional Cipher Block Modes to symmetric ciphers\n     (AES CTR, Camellia CTR, XTEA CBC) including the option to\n     enable and disable individual modes when needed\n   * Functions requiring File System functions can now be disabled\n     by undefining POLARSSL_FS_IO\n   * A error_strerror function() has been added to translate between\n     error codes and their description.\n   * Added mpi_get_bit() and mpi_set_bit() individual bit setter/getter\n     functions.\n   * Added ssl_mail_client and ssl_fork_server as example programs.\n\nChanges\n   * Major argument / variable rewrite. Introduced use of size_t\n     instead of int for buffer lengths and loop variables for\n     better unsigned / signed use. Renamed internal bigint types\n     t_int and t_dbl to t_uint and t_udbl in the process\n   * mpi_init() and mpi_free() now only accept a single MPI\n     argument and do not accept variable argument lists anymore.\n   * The error codes have been remapped and combining error codes\n     is now done with a PLUS instead of an OR as error codes\n     used are negative.\n   * Changed behaviour of net_read(), ssl_fetch_input() and ssl_recv().\n     net_recv() now returns 0 on EOF instead of\n     POLARSSL_ERR_NET_CONN_RESET. ssl_fetch_input() returns\n     POLARSSL_ERR_SSL_CONN_EOF on an EOF from its f_recv() function.\n     ssl_read() returns 0 if a POLARSSL_ERR_SSL_CONN_EOF is received\n     after the handshake.\n   * Network functions now return POLARSSL_ERR_NET_WANT_READ or\n     POLARSSL_ERR_NET_WANT_WRITE instead of the ambiguous\n     POLARSSL_ERR_NET_TRY_AGAIN\n\n= Version 0.99-pre4 released on 2011-04-01\nFeatures\n   * Added support for PKCS#1 v2.1 encoding and thus support\n     for the RSAES-OAEP and RSASSA-PSS operations.\n   * Reading of Public Key files incorporated into default x509\n     functionality as well.\n   * Added mpi_fill_random() for centralized filling of big numbers\n     with random data (Fixed ticket #10)\n\nChanges\n   * Debug print of MPI now removes leading zero octets and\n     displays actual bit size of the value.\n   * x509parse_key() (and as a consequence x509parse_keyfile())\n     does not zeroize memory in advance anymore. Use rsa_init()\n     before parsing a key or keyfile!\n\nBugfix\n   * Debug output of MPI's now the same independent of underlying\n     platform (32-bit / 64-bit) (Fixes ticket #19, found by Mads\n     Kiilerich and Mihai Militaru)\n   * Fixed bug in ssl_write() when flushing old data (Fixed ticket\n     #18, found by Nikolay Epifanov)\n   * Fixed proper handling of RSASSA-PSS verification with variable\n     length salt lengths\n\n= Version 0.99-pre3 released on 2011-02-28\nThis release replaces version 0.99-pre2 which had possible copyright issues.\nFeatures\n   * Parsing PEM private keys encrypted with DES and AES\n     are now supported as well (Fixes ticket #5)\n   * Added crl_app program to allow easy reading and\n     printing of X509 CRLs from file\n\nChanges\n   * Parsing of PEM files moved to separate module (Fixes\n     ticket #13). Also possible to remove PEM support for\n     systems only using DER encoding\n\nBugfixes\n   * Corrected parsing of UTCTime dates before 1990 and\n     after 1950\n   * Support more exotic OID's when parsing certificates\n     (found by Mads Kiilerich)\n   * Support more exotic name representations when parsing\n     certificates (found by Mads Kiilerich)\n   * Replaced the expired test certificates\n   * Do not bail out if no client certificate specified. Try\n     to negotiate anonymous connection (Fixes ticket #12,\n     found by Boris Krasnovskiy)\n\nSecurity fixes\n   * Fixed a possible Man-in-the-Middle attack on the\n     Diffie Hellman key exchange (thanks to Larry Highsmith,\n     Subreption LLC)\n\n= Version 0.99-pre1 released on 2011-01-30\nFeatures\nNote: Most of these features have been donated by Fox-IT\n   * Added Doxygen source code documentation parts\n   * Added reading of DHM context from memory and file\n   * Improved X509 certificate parsing to include extended\n     certificate fields, including Key Usage\n   * Improved certificate verification and verification\n     against the available CRLs\n   * Detection for DES weak keys and parity bits added\n   * Improvements to support integration in other\n     applications:\n       + Added generic message digest and cipher wrapper\n       + Improved information about current capabilities,\n         status, objects and configuration\n       + Added verification callback on certificate chain\n         verification to allow external blacklisting\n       + Additional example programs to show usage\n   * Added support for PKCS#11 through the use of the\n     libpkcs11-helper library\n\nChanges\n   * x509parse_time_expired() checks time in addition to\n     the existing date check\n   * The ciphers member of ssl_context and the cipher member\n     of ssl_session have been renamed to ciphersuites and\n     ciphersuite respectively. This clarifies the difference\n     with the generic cipher layer and is better naming\n     altogether\n\n= Version 0.14.0 released on 2010-08-16\nFeatures\n   * Added support for SSL_EDH_RSA_AES_128_SHA and\n     SSL_EDH_RSA_CAMELLIA_128_SHA ciphersuites\n   * Added compile-time and run-time version information\n   * Expanded ssl_client2 arguments for more flexibility\n   * Added support for TLS v1.1\n\nChanges\n   * Made Makefile cleaner\n   * Removed dependency on rand() in rsa_pkcs1_encrypt().\n     Now using random fuction provided to function and\n     changed the prototype of rsa_pkcs1_encrypt(),\n     rsa_init() and rsa_gen_key().\n   * Some SSL defines were renamed in order to avoid\n     future confusion\n\nBug fixes\n   * Fixed CMake out of source build for tests (found by\n     kkert)\n   * rsa_check_private() now supports PKCS1v2 keys as well\n   * Fixed deadlock in rsa_pkcs1_encrypt() on failing random\n     generator\n\n= Version 0.13.1 released on 2010-03-24\nBug fixes\n   * Fixed Makefile in library that was mistakenly merged\n   * Added missing const string fixes\n\n= Version 0.13.0 released on 2010-03-21\nFeatures\n   * Added option parsing for host and port selection to\n     ssl_client2\n   * Added support for GeneralizedTime in X509 parsing\n   * Added cert_app program to allow easy reading and\n     printing of X509 certificates from file or SSL\n     connection.\n\nChanges\n   * Added const correctness for main code base\n   * X509 signature algorithm determination is now\n     in a function to allow easy future expansion\n   * Changed symmetric cipher functions to\n     identical interface (returning int result values)\n   * Changed ARC4 to use separate input/output buffer\n   * Added reset function for HMAC context as speed-up\n     for specific use-cases\n\nBug fixes\n   * Fixed bug resulting in failure to send the last\n     certificate in the chain in ssl_write_certificate() and\n     ssl_write_certificate_request() (found by fatbob)\n   * Added small fixes for compiler warnings on a Mac\n     (found by Frank de Brabander)\n   * Fixed algorithmic bug in mpi_is_prime() (found by\n     Smbat Tonoyan)\n\n= Version 0.12.1 released on 2009-10-04\nChanges\n   * Coverage test definitions now support 'depends_on'\n     tagging system.\n   * Tests requiring specific hashing algorithms now honor\n     the defines.\n\nBug fixes\n   * Changed typo in #ifdef in x509parse.c (found\n     by Eduardo)\n\n= Version 0.12.0 released on 2009-07-28\nFeatures\n   * Added CMake makefiles as alternative to regular Makefiles.\n   * Added preliminary Code Coverage tests for AES, ARC4,\n     Base64, MPI, SHA-family, MD-family, HMAC-SHA-family,\n     Camellia, DES, 3-DES, RSA PKCS#1, XTEA, Diffie-Hellman\n     and X509parse.\n\nChanges\n   * Error codes are not (necessarily) negative. Keep\n     this is mind when checking for errors.\n   * RSA_RAW renamed to SIG_RSA_RAW for consistency.\n   * Fixed typo in name of POLARSSL_ERR_RSA_OUTPUT_TOO_LARGE.\n   * Changed interface for AES and Camellia setkey functions\n     to indicate invalid key lengths.\n\nBug fixes\n   * Fixed include location of endian.h on FreeBSD (found by\n     Gabriel)\n   * Fixed include location of endian.h and name clash on\n     Apples (found by Martin van Hensbergen)\n   * Fixed HMAC-MD2 by modifying md2_starts(), so that the\n     required HMAC ipad and opad variables are not cleared.\n     (found by code coverage tests)\n   * Prevented use of long long in bignum if\n     POLARSSL_HAVE_LONGLONG not defined (found by Giles\n     Bathgate).\n   * Fixed incorrect handling of negative strings in\n     mpi_read_string() (found by code coverage tests).\n   * Fixed segfault on handling empty rsa_context in\n     rsa_check_pubkey() and rsa_check_privkey() (found by\n     code coverage tests).\n   * Fixed incorrect handling of one single negative input\n     value in mpi_add_abs() (found by code coverage tests).\n   * Fixed incorrect handling of negative first input\n     value in mpi_sub_abs() (found by code coverage tests).\n   * Fixed incorrect handling of negative first input\n     value in mpi_mod_mpi() and mpi_mod_int(). Resulting\n     change also affects mpi_write_string() (found by code\n     coverage tests).\n   * Corrected is_prime() results for 0, 1 and 2 (found by\n     code coverage tests).\n   * Fixed Camellia and XTEA for 64-bit Windows systems.\n\n= Version 0.11.1 released on 2009-05-17\n   * Fixed missing functionality for SHA-224, SHA-256, SHA384,\n     SHA-512 in rsa_pkcs1_sign()\n\n= Version 0.11.0 released on 2009-05-03\n   * Fixed a bug in mpi_gcd() so that it also works when both\n     input numbers are even and added testcases to check\n     (found by Pierre Habouzit).\n   * Added support for SHA-224, SHA-256, SHA-384 and SHA-512\n     one way hash functions with the PKCS#1 v1.5 signing and\n     verification.\n   * Fixed minor bug regarding mpi_gcd located within the\n     POLARSSL_GENPRIME block.\n   * Fixed minor memory leak in x509parse_crt() and added better\n     handling of 'full' certificate chains (found by Mathias\n     Olsson).\n   * Centralized file opening and reading for x509 files into\n     load_file()\n   * Made definition of net_htons() endian-clean for big endian\n     systems (Found by Gernot).\n   * Undefining POLARSSL_HAVE_ASM now also handles prevents asm in\n     padlock and timing code.\n   * Fixed an off-by-one buffer allocation in ssl_set_hostname()\n     responsible for crashes and unwanted behaviour.\n   * Added support for Certificate Revocation List (CRL) parsing.\n   * Added support for CRL revocation to x509parse_verify() and\n     SSL/TLS code.\n   * Fixed compatibility of XTEA and Camellia on a 64-bit system\n     (found by Felix von Leitner).\n\n= Version 0.10.0 released on 2009-01-12\n   * Migrated XySSL to PolarSSL\n   * Added XTEA symmetric cipher\n   * Added Camellia symmetric cipher\n   * Added support for ciphersuites: SSL_RSA_CAMELLIA_128_SHA,\n     SSL_RSA_CAMELLIA_256_SHA and SSL_EDH_RSA_CAMELLIA_256_SHA\n   * Fixed dangerous bug that can cause a heap overflow in\n     rsa_pkcs1_decrypt (found by Christophe Devine)\n\n================================================================\nXySSL ChangeLog\n\n= Version 0.9 released on 2008-03-16\n\n    * Added support for ciphersuite: SSL_RSA_AES_128_SHA\n    * Enabled support for large files by default in aescrypt2.c\n    * Preliminary openssl wrapper contributed by David Barrett\n    * Fixed a bug in ssl_write() that caused the same payload to\n      be sent twice in non-blocking mode when send returns EAGAIN\n    * Fixed ssl_parse_client_hello(): session id and challenge must\n      not be swapped in the SSLv2 ClientHello (found by Greg Robson)\n    * Added user-defined callback debug function (Krystian Kolodziej)\n    * Before freeing a certificate, properly zero out all cert. data\n    * Fixed the \"mode\" parameter so that encryption/decryption are\n      not swapped on PadLock; also fixed compilation on older versions\n      of gcc (bug reported by David Barrett)\n    * Correctly handle the case in padlock_xcryptcbc() when input or\n      output data is non-aligned by falling back to the software\n      implementation, as VIA Nehemiah cannot handle non-aligned buffers\n    * Fixed a memory leak in x509parse_crt() which was reported by Greg\n      Robson-Garth; some x509write.c fixes by Pascal Vizeli, thanks to\n      Matthew Page who reported several bugs\n    * Fixed x509_get_ext() to accept some rare certificates which have\n      an INTEGER instead of a BOOLEAN for BasicConstraints::cA.\n    * Added support on the client side for the TLS \"hostname\" extension\n      (patch contributed by David Patino)\n    * Make x509parse_verify() return BADCERT_CN_MISMATCH when an empty\n      string is passed as the CN (bug reported by spoofy)\n    * Added an option to enable/disable the BN assembly code\n    * Updated rsa_check_privkey() to verify that (D*E) = 1 % (P-1)*(Q-1)\n    * Disabled obsolete hash functions by default (MD2, MD4); updated\n      selftest and benchmark to not test ciphers that have been disabled\n    * Updated x509parse_cert_info() to correctly display byte 0 of the\n      serial number, setup correct server port in the ssl client example\n    * Fixed a critical denial-of-service with X.509 cert. verification:\n      peer may cause xyssl to loop indefinitely by sending a certificate\n      for which the RSA signature check fails (bug reported by Benoit)\n    * Added test vectors for: AES-CBC, AES-CFB, DES-CBC and 3DES-CBC,\n      HMAC-MD5, HMAC-SHA1, HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-512\n    * Fixed HMAC-SHA-384 and HMAC-SHA-512 (thanks to Josh Sinykin)\n    * Modified ssl_parse_client_key_exchange() to protect against\n      Daniel Bleichenbacher attack on PKCS#1 v1.5 padding, as well\n      as the Klima-Pokorny-Rosa extension of Bleichenbacher's attack\n    * Updated rsa_gen_key() so that ctx->N is always nbits in size\n    * Fixed assembly PPC compilation errors on Mac OS X, thanks to\n      David Barrett and Dusan Semen\n\n= Version 0.8 released on 2007-10-20\n\n    * Modified the HMAC functions to handle keys larger\n      than 64 bytes, thanks to Stephane Desneux and gary ng\n    * Fixed ssl_read_record() to properly update the handshake\n      message digests, which fixes IE6/IE7 client authentication\n    * Cleaned up the XYSSL* #defines, suggested by Azriel Fasten\n    * Fixed net_recv(), thanks to Lorenz Schori and Egon Kocjan\n    * Added user-defined callbacks for handling I/O and sessions\n    * Added lots of debugging output in the SSL/TLS functions\n    * Added preliminary X.509 cert. writing by Pascal Vizeli\n    * Added preliminary support for the VIA PadLock routines\n    * Added AES-CFB mode of operation, contributed by chmike\n    * Added an SSL/TLS stress testing program (ssl_test.c)\n    * Updated the RSA PKCS#1 code to allow choosing between\n      RSA_PUBLIC and RSA_PRIVATE, as suggested by David Barrett\n    * Updated ssl_read() to skip 0-length records from OpenSSL\n    * Fixed the make install target to comply with *BSD make\n    * Fixed a bug in mpi_read_binary() on 64-bit platforms\n    * mpi_is_prime() speedups, thanks to Kevin McLaughlin\n    * Fixed a long standing memory leak in mpi_is_prime()\n    * Replaced realloc with malloc in mpi_grow(), and set\n      the sign of zero as positive in mpi_init() (reported\n      by Jonathan M. McCune)\n\n= Version 0.7 released on 2007-07-07\n\n    * Added support for the MicroBlaze soft-core processor\n    * Fixed a bug in ssl_tls.c which sometimes prevented SSL\n      connections from being established with non-blocking I/O\n    * Fixed a couple bugs in the VS6 and UNIX Makefiles\n    * Fixed the \"PIC register ebx clobbered in asm\" bug\n    * Added HMAC starts/update/finish support functions\n    * Added the SHA-224, SHA-384 and SHA-512 hash functions\n    * Fixed the net_set_*block routines, thanks to Andreas\n    * Added a few demonstration programs: md5sum, sha1sum,\n      dh_client, dh_server, rsa_genkey, rsa_sign, rsa_verify\n    * Added new bignum import and export helper functions\n    * Rewrote README.txt in program/ssl/ca to better explain\n      how to create a test PKI\n\n= Version 0.6 released on 2007-04-01\n\n    * Ciphers used in SSL/TLS can now be disabled at compile\n      time, to reduce the memory footprint on embedded systems\n    * Added multiply assembly code for the TriCore and modified\n      havege_struct for this processor, thanks to David Patiño\n    * Added multiply assembly code for 64-bit PowerPCs,\n      thanks to Peking University and the OSU Open Source Lab\n    * Added experimental support of Quantum Cryptography\n    * Added support for autoconf, contributed by Arnaud Cornet\n    * Fixed \"long long\" compilation issues on IA-64 and PPC64\n    * Fixed a bug introduced in xyssl-0.5/timing.c: hardclock\n      was not being correctly defined on ARM and MIPS\n\n= Version 0.5 released on 2007-03-01\n\n    * Added multiply assembly code for SPARC and Alpha\n    * Added (beta) support for non-blocking I/O operations\n    * Implemented session resuming and client authentication\n    * Fixed some portability issues on WinCE, MINIX 3, Plan9\n      (thanks to Benjamin Newman), HP-UX, FreeBSD and Solaris\n    * Improved the performance of the EDH key exchange\n    * Fixed a bug that caused valid packets with a payload\n      size of 16384 bytes to be rejected\n\n= Version 0.4 released on 2007-02-01\n\n    * Added support for Ephemeral Diffie-Hellman key exchange\n    * Added multiply asm code for SSE2, ARM, PPC, MIPS and M68K\n    * Various improvement to the modular exponentiation code\n    * Rewrote the headers to generate the API docs with doxygen\n    * Fixed a bug in ssl_encrypt_buf (incorrect padding was\n      generated) and in ssl_parse_client_hello (max. client\n      version was not properly set), thanks to Didier Rebeix\n    * Fixed another bug in ssl_parse_client_hello: clients with\n      cipherlists larger than 96 bytes were incorrectly rejected\n    * Fixed a couple memory leak in x509_read.c\n\n= Version 0.3 released on 2007-01-01\n\n    * Added server-side SSLv3 and TLSv1.0 support\n    * Multiple fixes to enhance the compatibility with g++,\n      thanks to Xosé Antón Otero Ferreira\n    * Fixed a bug in the CBC code, thanks to dowst; also,\n      the bignum code is no longer dependent on long long\n    * Updated rsa_pkcs1_sign to handle arbitrary large inputs\n    * Updated timing.c for improved compatibility with i386\n      and 486 processors, thanks to Arnaud Cornet\n\n= Version 0.2 released on 2006-12-01\n\n    * Updated timing.c to support ARM and MIPS arch\n    * Updated the MPI code to support 8086 on MSVC 1.5\n    * Added the copyright notice at the top of havege.h\n    * Fixed a bug in sha2_hmac, thanks to newsoft/Wenfang Zhang\n    * Fixed a bug reported by Adrian Rüegsegger in x509_read_key\n    * Fixed a bug reported by Torsten Lauter in ssl_read_record\n    * Fixed a bug in rsa_check_privkey that would wrongly cause\n      valid RSA keys to be dismissed (thanks to oldwolf)\n    * Fixed a bug in mpi_is_prime that caused some primes to fail\n      the Miller-Rabin primality test\n\n    I'd also like to thank Younès Hafri for the CRUX linux port,\n    Khalil Petit who added XySSL into pkgsrc and Arnaud Cornet\n    who maintains the Debian package :-)\n\n= Version 0.1 released on 2006-11-01\n"
        },
        {
          "name": "ChangeLog.d",
          "type": "tree",
          "content": null
        },
        {
          "name": "DartConfiguration.tcl",
          "type": "blob",
          "size": 0.107421875,
          "content": "Site: localhost\nBuildName: Mbed TLS-test\nCoverageCommand: /usr/bin/gcov\nMemoryCheckCommand: /usr/bin/valgrind\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 29.15234375,
          "content": "Mbed TLS files are provided under a dual [Apache-2.0](https://spdx.org/licenses/Apache-2.0.html)\nOR [GPL-2.0-or-later](https://spdx.org/licenses/GPL-2.0-or-later.html) license.\nThis means that users may choose which of these licenses they take the code\nunder.\n\nThe full text of each of these licenses is given below.\n\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n===============================================================================\n\n\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 8.1982421875,
          "content": "DESTDIR=/usr/local\nPREFIX=mbedtls_\nPERL ?= perl\n\nifneq (,$(filter-out lib library/%,$(or $(MAKECMDGOALS),all)))\n    ifeq (,$(wildcard framework/exported.make))\n        # Use the define keyword to get a multi-line message.\n        # GNU make appends \".  Stop.\", so tweak the ending of our message accordingly.\n        ifneq (,$(wildcard .git))\n            define error_message\n${MBEDTLS_PATH}/framework/exported.make not found (and does appear to be a git checkout). Run `git submodule update --init` from the source tree to fetch the submodule contents.\nThis is a fatal error\n            endef\n        else\n            define error_message\n${MBEDTLS_PATH}/framework/exported.make not found (and does not appear to be a git checkout). Please ensure you have downloaded the right archive from the release page on GitHub.\n            endef\n        endif\n        $(error $(error_message))\n    endif\n    include framework/exported.make\nendif\n\n.SILENT:\n\n.PHONY: all no_test programs lib tests install uninstall clean test check lcov apidoc apidoc_clean\n\nall: programs tests\n\t$(MAKE) post_build\n\nno_test: programs\n\nprograms: lib mbedtls_test\n\t$(MAKE) -C programs\n\nssl-opt: lib mbedtls_test\n\t$(MAKE) -C programs ssl-opt\n\t$(MAKE) -C tests ssl-opt\n\nlib:\n\t$(MAKE) -C library\n\nifndef PSASIM\ntests: lib\nendif\ntests: mbedtls_test\n\t$(MAKE) -C tests\n\nmbedtls_test:\n\t$(MAKE) -C tests mbedtls_test\n\n.PHONY: FORCE\nFORCE:\n\nlibrary/%: FORCE\n\t$(MAKE) -C library $*\nprograms/%: FORCE\n\t$(MAKE) -C programs $*\ntests/%: FORCE\n\t$(MAKE) -C tests $*\n\n.PHONY: generated_files\ngenerated_files: library/generated_files\ngenerated_files: programs/generated_files\ngenerated_files: tests/generated_files\ngenerated_files: visualc_files\n\n# Set GEN_FILES to the empty string to disable dependencies on generated\n# source files. Then `make generated_files` will only build files that\n# are missing, it will not rebuilt files that are present but out of date.\n# This is useful, for example, if you have a source tree where\n# `make generated_files` has already run and file timestamps reflect the\n# time the files were copied or extracted, and you are now in an environment\n# that lacks some of the necessary tools to re-generate the files.\n# If $(GEN_FILES) is non-empty, the generated source files' dependencies\n# are treated ordinarily, based on file timestamps.\nGEN_FILES ?= yes\n\n# In dependencies where the target is a configuration-independent generated\n# file, use `TARGET: $(gen_file_dep) DEPENDENCY1 DEPENDENCY2 ...`\n# rather than directly `TARGET: DEPENDENCY1 DEPENDENCY2 ...`. This\n# enables the re-generation to be turned off when GEN_FILES is disabled.\nifdef GEN_FILES\ngen_file_dep =\nelse\n# Order-only dependency: generate the target if it's absent, but don't\n# re-generate it if it's present but older than its dependencies.\ngen_file_dep = |\nendif\n\n.PHONY: visualc_files\nVISUALC_FILES = visualc/VS2017/mbedTLS.sln visualc/VS2017/mbedTLS.vcxproj\n# TODO: $(app).vcxproj for each $(app) in programs/\nvisualc_files: $(VISUALC_FILES)\n\n# Ensure that the .c files that generate_visualc_files.pl enumerates are\n# present before it runs. It doesn't matter if the files aren't up-to-date,\n# they just need to be present.\n$(VISUALC_FILES): | library/generated_files\n$(VISUALC_FILES): | programs/generated_files\n$(VISUALC_FILES): | tests/generated_files\n$(VISUALC_FILES): $(gen_file_dep) scripts/generate_visualc_files.pl\n$(VISUALC_FILES): $(gen_file_dep) scripts/data_files/vs2017-app-template.vcxproj\n$(VISUALC_FILES): $(gen_file_dep) scripts/data_files/vs2017-main-template.vcxproj\n$(VISUALC_FILES): $(gen_file_dep) scripts/data_files/vs2017-sln-template.sln\n# TODO: also the list of .c and .h source files, but not their content\n$(VISUALC_FILES):\n\techo \"  Gen   $@ ...\"\n\t$(PERL) scripts/generate_visualc_files.pl\n\nifndef WINDOWS\ninstall: no_test\n\tmkdir -p $(DESTDIR)/include/mbedtls\n\tcp -rp include/mbedtls $(DESTDIR)/include\n\tcp -rp tf-psa-crypto/drivers/builtin/include/mbedtls $(DESTDIR)/include\n\tmkdir -p $(DESTDIR)/include/psa\n\tcp -rp tf-psa-crypto/include/psa $(DESTDIR)/include\n\n\tmkdir -p $(DESTDIR)/lib\n\tcp -RP library/libmbedtls.*    $(DESTDIR)/lib\n\tcp -RP library/libmbedx509.*   $(DESTDIR)/lib\n\tcp -RP library/libmbedcrypto.* $(DESTDIR)/lib\n\n\tmkdir -p $(DESTDIR)/bin\n\tfor p in programs/*/* ; do              \\\n\t    if [ -x $$p ] && [ ! -d $$p ] ;     \\\n\t    then                                \\\n\t        f=$(PREFIX)`basename $$p` ;     \\\n\t        cp $$p $(DESTDIR)/bin/$$f ;     \\\n\t    fi                                  \\\n\tdone\n\nuninstall:\n\trm -rf $(DESTDIR)/include/mbedtls\n\trm -rf $(DESTDIR)/include/psa\n\trm -f $(DESTDIR)/lib/libmbedtls.*\n\trm -f $(DESTDIR)/lib/libmbedx509.*\n\trm -f $(DESTDIR)/lib/libmbedcrypto.*\n\n\tfor p in programs/*/* ; do              \\\n\t    if [ -x $$p ] && [ ! -d $$p ] ;     \\\n\t    then                                \\\n\t        f=$(PREFIX)`basename $$p` ;     \\\n\t        rm -f $(DESTDIR)/bin/$$f ;      \\\n\t    fi                                  \\\n\tdone\nendif\n\n\nWARNING_BORDER_LONG      =**********************************************************************************\\n\nCTR_DRBG_128_BIT_KEY_WARN_L1=****  WARNING!  MBEDTLS_CTR_DRBG_USE_128_BIT_KEY defined!                      ****\\n\nCTR_DRBG_128_BIT_KEY_WARN_L2=****  Using 128-bit keys for CTR_DRBG limits the security of generated         ****\\n\nCTR_DRBG_128_BIT_KEY_WARN_L3=****  keys and operations that use random values generated to 128-bit security ****\\n\n\nCTR_DRBG_128_BIT_KEY_WARNING=\\n$(WARNING_BORDER_LONG)$(CTR_DRBG_128_BIT_KEY_WARN_L1)$(CTR_DRBG_128_BIT_KEY_WARN_L2)$(CTR_DRBG_128_BIT_KEY_WARN_L3)$(WARNING_BORDER_LONG)\n\n# Post build steps\npost_build:\nifndef WINDOWS\n\n\t# If 128-bit keys are configured for CTR_DRBG, display an appropriate warning\n\t-scripts/config.py get MBEDTLS_CTR_DRBG_USE_128_BIT_KEY && ([ $$? -eq 0 ]) && \\\n\t    echo '$(CTR_DRBG_128_BIT_KEY_WARNING)'\n\nendif\n\nclean: clean_more_on_top\n\t$(MAKE) -C library clean\n\t$(MAKE) -C programs clean\n\t$(MAKE) -C tests clean\n\nclean_more_on_top:\nifndef WINDOWS\n\tfind . \\( -name \\*.gcno -o -name \\*.gcda -o -name \\*.info \\) -exec rm {} +\nendif\n\nneat: clean_more_on_top\n\t$(MAKE) -C library neat\n\t$(MAKE) -C programs neat\n\t$(MAKE) -C tests neat\nifndef WINDOWS\n\trm -f visualc/VS2017/*.vcxproj visualc/VS2017/mbedTLS.sln\nelse\n\tif exist visualc\\VS2017\\*.vcxproj del /Q /F visualc\\VS2017\\*.vcxproj\n\tif exist visualc\\VS2017\\mbedTLS.sln del /Q /F visualc\\VS2017\\mbedTLS.sln\nendif\n\nifndef PSASIM\ncheck: lib\nendif\ncheck: tests\n\t$(MAKE) -C tests check\n\ntest: check\n\nifndef WINDOWS\n# For coverage testing:\n# 1. Build with:\n#         make CFLAGS='--coverage -g3 -O0' LDFLAGS='--coverage'\n# 2. Run the relevant tests for the part of the code you're interested in.\n#    For the reference coverage measurement, see\n#    tests/scripts/basic-build-test.sh\n# 3. Run scripts/lcov.sh to generate an HTML report.\nlcov:\n\tscripts/lcov.sh\n\napidoc:\n\tmkdir -p apidoc\n\tcd doxygen && doxygen mbedtls.doxyfile\n\napidoc_clean:\n\trm -rf apidoc\nendif\n\n## Editor navigation files\nC_SOURCE_FILES = $(wildcard \\\n\tinclude/*/*.h \\\n\tlibrary/*.[hc] \\\n\ttf-psa-crypto/core/*.[hc] \\\n\ttf-psa-crypto/include/*/*.h \\\n\ttf-psa-crypto/drivers/*/include/*/*.h \\\n\ttf-psa-crypto/drivers/*/include/*/*/*.h \\\n\ttf-psa-crypto/drivers/*/include/*/*/*/*.h \\\n\ttf-psa-crypto/drivers/builtin/src/*.[hc] \\\n\ttf-psa-crypto/drivers/*/*.c \\\n\ttf-psa-crypto/drivers/*/*/*.c \\\n\ttf-psa-crypto/drivers/*/*/*/*.c \\\n\ttf-psa-crypto/drivers/*/*/*/*/*.c \\\n\tprograms/*/*.[hc] \\\n\tframework/tests/include/*/*.h framework/tests/include/*/*/*.h \\\n\tframework/tests/src/*.c framework/tests/src/*/*.c \\\n\ttests/suites/*.function \\\n\ttf-psa-crypto/tests/suites/*.function \\\n)\n# Exuberant-ctags invocation. Other ctags implementations may require different options.\nCTAGS = ctags --langmap=c:+.h.function --line-directives=no -o\ntags: $(C_SOURCE_FILES)\n\t$(CTAGS) $@ $(C_SOURCE_FILES)\nTAGS: $(C_SOURCE_FILES)\n\tetags --no-line-directive -o $@ $(C_SOURCE_FILES)\nglobal: GPATH GRTAGS GSYMS GTAGS\nGPATH GRTAGS GSYMS GTAGS: $(C_SOURCE_FILES)\n\tls $(C_SOURCE_FILES) | gtags -f - --gtagsconf .globalrc\ncscope: cscope.in.out cscope.po.out cscope.out\ncscope.in.out cscope.po.out cscope.out: $(C_SOURCE_FILES)\n\tcscope -bq -u -Iinclude -Ilibrary -Itf-psa-crypto/core \\\n        -Itf-psa-crypto/include \\\n\t-Itf-psa-crypto/drivers/builtin/src \\\n\t$(patsubst %,-I%,$(wildcard tf-psa-crypto/drivers/*/include)) -Iframework/tests/include $(C_SOURCE_FILES)\n.PHONY: cscope global\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.4462890625,
          "content": "README for Mbed TLS\n===================\n\nMbed TLS is a C library that implements cryptographic primitives, X.509 certificate manipulation and the SSL/TLS and DTLS protocols. Its small code footprint makes it suitable for embedded systems.\n\nMbed TLS includes a reference implementation of the [PSA Cryptography API](#psa-cryptography-api). This is currently a preview for evaluation purposes only.\n\nConfiguration\n-------------\n\nMbed TLS should build out of the box on most systems. Some platform specific options are available in the fully documented configuration file `include/mbedtls/mbedtls_config.h`, which is also the place where features can be selected. This file can be edited manually, or in a more programmatic way using the Python 3 script `scripts/config.py` (use `--help` for usage instructions).\n\nCompiler options can be set using conventional environment variables such as `CC` and `CFLAGS` when using the Make and CMake build system (see below).\n\nWe provide some non-standard configurations focused on specific use cases in the `configs/` directory. You can read more about those in `configs/README.txt`\n\nDocumentation\n-------------\n\nThe main Mbed TLS documentation is available via [ReadTheDocs](https://mbed-tls.readthedocs.io/).\n\nDocumentation for the PSA Cryptography API is available [on GitHub](https://arm-software.github.io/psa-api/crypto/).\n\nTo generate a local copy of the library documentation in HTML format, tailored to your compile-time configuration:\n\n1. Make sure that [Doxygen](http://www.doxygen.nl/) is installed.\n1. Run `make apidoc`.\n1. Browse `apidoc/index.html` or `apidoc/modules.html`.\n\nFor other sources of documentation, see the [SUPPORT](SUPPORT.md) document.\n\nCompiling\n---------\n\nThere are currently three active build systems used within Mbed TLS releases:\n\n-   GNU Make\n-   CMake\n-   Microsoft Visual Studio\n\nThe main systems used for development are CMake and GNU Make. Those systems are always complete and up-to-date. The others should reflect all changes present in the CMake and Make build system, although features may not be ported there automatically.\n\nThe Make and CMake build systems create three libraries: libmbedcrypto/libtfpsacrypto, libmbedx509, and libmbedtls. Note that libmbedtls depends on libmbedx509 and libmbedcrypto/libtfpsacrypto, and libmbedx509 depends on libmbedcrypto/libtfpsacrypto. As a result, some linkers will expect flags to be in a specific order, for example the GNU linker wants `-lmbedtls -lmbedx509 -lmbedcrypto`.\n\n### Tool versions\n\nYou need the following tools to build the library with the provided makefiles:\n\n* GNU Make 3.82 or a build tool that CMake supports.\n* A C99 toolchain (compiler, linker, archiver). We actively test with GCC 5.4, Clang 3.8, Arm Compiler 6, IAR 8 and Visual Studio 2017. More recent versions should work. Slightly older versions may work.\n* Python 3.8 to generate the test code. Python is also needed to integrate PSA drivers and to build the development branch (see next section).\n* Perl to run the tests, and to generate some source files in the development branch.\n* CMake 3.10.2 or later (if using CMake).\n* Microsoft Visual Studio 2017 or later (if using Visual Studio).\n* Doxygen 1.8.11 or later (if building the documentation; slightly older versions should work).\n\n### Git usage\n\nThe `development` branch and the `mbedtls-3.6` long-term support branch of Mbed TLS use a [Git submodule](https://git-scm.com/book/en/v2/Git-Tools-Submodules#_cloning_submodules) ([framework](https://github.com/Mbed-TLS/mbedtls-framework)). This is not needed to merely compile the library at a release tag. This is not needed to consume a release archive (zip or tar).\n\n### Generated source files in the development branch\n\nThe source code of Mbed TLS includes some files that are automatically generated by scripts and whose content depends only on the Mbed TLS source, not on the platform or on the library configuration. These files are not included in the development branch of Mbed TLS, but the generated files are included in official releases. This section explains how to generate the missing files in the development branch.\n\nThe following tools are required:\n\n* Perl, for some library source files and for Visual Studio build files.\n* Python 3.8 and some Python packages, for some library source files, sample programs and test data. To install the necessary packages, run:\n    ```\n    python3 -m pip install --user -r scripts/basic.requirements.txt\n    ```\n    Depending on your Python installation, you may need to invoke `python` instead of `python3`. To install the packages system-wide, omit the `--user` option.\n* A C compiler for the host platform, for some test data.\n\nIf you are cross-compiling, you must set the `CC` environment variable to a C compiler for the host platform when generating the configuration-independent files.\n\nAny of the following methods are available to generate the configuration-independent files:\n\n* If not cross-compiling, running `make` with any target, or just `make`, will automatically generate required files.\n* On non-Windows systems, when not cross-compiling, CMake will generate the required files automatically.\n* Run `make generated_files` to generate all the configuration-independent files.\n* On Unix/POSIX systems, run `tests/scripts/check-generated-files.sh -u` to generate all the configuration-independent files.\n* On Windows, run `scripts\\make_generated_files.bat` to generate all the configuration-independent files.\n\n### Make\n\nWe require GNU Make. To build the library and the sample programs, GNU Make and a C compiler are sufficient. Some of the more advanced build targets require some Unix/Linux tools.\n\nWe intentionally only use a minimum of functionality in the makefiles in order to keep them as simple and independent of different toolchains as possible, to allow users to more easily move between different platforms. Users who need more features are recommended to use CMake.\n\nIn order to build from the source code using GNU Make, just enter at the command line:\n\n    make\n\nIn order to run the tests, enter:\n\n    make check\n\nThe tests need Python to be built and Perl to be run. If you don't have one of them installed, you can skip building the tests with:\n\n    make no_test\n\nYou'll still be able to run a much smaller set of tests with:\n\n    programs/test/selftest\n\nIn order to build for a Windows platform, you should use `WINDOWS_BUILD=1` if the target is Windows but the build environment is Unix-like (for instance when cross-compiling, or compiling from an MSYS shell), and `WINDOWS=1` if the build environment is a Windows shell (for instance using mingw32-make) (in that case some targets will not be available).\n\nSetting the variable `SHARED` in your environment will build shared libraries in addition to the static libraries. Setting `DEBUG` gives you a debug build. You can override `CFLAGS` and `LDFLAGS` by setting them in your environment or on the make command line; compiler warning options may be overridden separately using `WARNING_CFLAGS`. Some directory-specific options (for example, `-I` directives) are still preserved.\n\nPlease note that setting `CFLAGS` overrides its default value of `-O2` and setting `WARNING_CFLAGS` overrides its default value (starting with `-Wall -Wextra`), so if you just want to add some warning options to the default ones, you can do so by setting `CFLAGS=-O2 -Werror` for example. Setting `WARNING_CFLAGS` is useful when you want to get rid of its default content (for example because your compiler doesn't accept `-Wall` as an option). Directory-specific options cannot be overridden from the command line.\n\nDepending on your platform, you might run into some issues. Please check the Makefiles in `library/`, `programs/` and `tests/` for options to manually add or remove for specific platforms. You can also check [the Mbed TLS Knowledge Base](https://mbed-tls.readthedocs.io/en/latest/kb/) for articles on your platform or issue.\n\nIn case you find that you need to do something else as well, please let us know what, so we can add it to the [Mbed TLS Knowledge Base](https://mbed-tls.readthedocs.io/en/latest/kb/).\n\n### CMake\n\nIn order to build the source using CMake in a separate directory (recommended), just enter at the command line:\n\n    mkdir /path/to/build_dir && cd /path/to/build_dir\n    cmake /path/to/mbedtls_source\n    cmake --build .\n\nIn order to run the tests, enter:\n\n    ctest\n\nThe test suites need Python to be built and Perl to be executed. If you don't have one of these installed, you'll want to disable the test suites with:\n\n    cmake -DENABLE_TESTING=Off /path/to/mbedtls_source\n\nIf you disabled the test suites, but kept the programs enabled, you can still run a much smaller set of tests with:\n\n    programs/test/selftest\n\nTo configure CMake for building shared libraries, use:\n\n    cmake -DUSE_SHARED_MBEDTLS_LIBRARY=On /path/to/mbedtls_source\n\nThere are many different build modes available within the CMake buildsystem. Most of them are available for gcc and clang, though some are compiler-specific:\n\n-   `Release`. This generates the default code without any unnecessary information in the binary files.\n-   `Debug`. This generates debug information and disables optimization of the code.\n-   `Coverage`. This generates code coverage information in addition to debug information.\n-   `ASan`. This instruments the code with AddressSanitizer to check for memory errors. (This includes LeakSanitizer, with recent version of gcc and clang.) (With recent version of clang, this mode also instruments the code with UndefinedSanitizer to check for undefined behaviour.)\n-   `ASanDbg`. Same as ASan but slower, with debug information and better stack traces.\n-   `MemSan`. This instruments the code with MemorySanitizer to check for uninitialised memory reads. Experimental, needs recent clang on Linux/x86\\_64.\n-   `MemSanDbg`. Same as MemSan but slower, with debug information, better stack traces and origin tracking.\n-   `Check`. This activates the compiler warnings that depend on optimization and treats all warnings as errors.\n\nSwitching build modes in CMake is simple. For debug mode, enter at the command line:\n\n    cmake -D CMAKE_BUILD_TYPE=Debug /path/to/mbedtls_source\n\nTo list other available CMake options, use:\n\n    cmake -LH\n\nNote that, with CMake, you can't adjust the compiler or its flags after the\ninitial invocation of cmake. This means that `CC=your_cc make` and `make\nCC=your_cc` will *not* work (similarly with `CFLAGS` and other variables).\nThese variables need to be adjusted when invoking cmake for the first time,\nfor example:\n\n    CC=your_cc cmake /path/to/mbedtls_source\n\nIf you already invoked cmake and want to change those settings, you need to\nremove the build directory and create it again.\n\nNote that it is possible to build in-place; this will however overwrite the\nprovided Makefiles (see `scripts/tmp_ignore_makefiles.sh` if you want to\nprevent `git status` from showing them as modified). In order to do so, from\nthe Mbed TLS source directory, use:\n\n    cmake .\n    make\n\nIf you want to change `CC` or `CFLAGS` afterwards, you will need to remove the\nCMake cache. This can be done with the following command using GNU find:\n\n    find . -iname '*cmake*' -not -name CMakeLists.txt -exec rm -rf {} +\n\nYou can now make the desired change:\n\n    CC=your_cc cmake .\n    make\n\nRegarding variables, also note that if you set CFLAGS when invoking cmake,\nyour value of CFLAGS doesn't override the content provided by cmake (depending\non the build mode as seen above), it's merely prepended to it.\n\n#### Consuming Mbed TLS\n\nMbed TLS provides a package config file for consumption as a dependency in other\nCMake projects. You can include Mbed TLS's CMake targets yourself with:\n\n    find_package(MbedTLS)\n\nIf prompted, set `MbedTLS_DIR` to `${YOUR_MBEDTLS_INSTALL_DIR}/cmake`. This\ncreates the following targets:\n\n- `MbedTLS::tfpsacrypto` (Crypto library)\n- `MbedTLS::mbedtls` (TLS library)\n- `MbedTLS::mbedx509` (X509 library)\n\nYou can then use these directly through `target_link_libraries()`:\n\n    add_executable(xyz)\n\n    target_link_libraries(xyz\n        PUBLIC MbedTLS::mbedtls\n               MbedTLS::tfpsacrypto\n               MbedTLS::mbedx509)\n\nThis will link the Mbed TLS libraries to your library or application, and add\nits include directories to your target (transitively, in the case of `PUBLIC` or\n`INTERFACE` link libraries).\n\n#### Mbed TLS as a subproject\n\nMbed TLS supports being built as a CMake subproject. One can\nuse `add_subdirectory()` from a parent CMake project to include Mbed TLS as a\nsubproject.\n\n### Microsoft Visual Studio\n\nThe build files for Microsoft Visual Studio are generated for Visual Studio 2017.\n\nThe solution file `mbedTLS.sln` contains all the basic projects needed to build the library and all the programs. The files in tests are not generated and compiled, as these need Python and perl environments as well. However, the selftest program in `programs/test/` is still available.\n\nIn the development branch of Mbed TLS, the Visual Studio solution files need to be generated first as described in [“Generated source files in the development branch”](#generated-source-files-in-the-development-branch).\n\nExample programs\n----------------\n\nWe've included example programs for a lot of different features and uses in [`programs/`](programs/README.md).\nPlease note that the goal of these sample programs is to demonstrate specific features of the library, and the code may need to be adapted to build a real-world application.\n\nTests\n-----\n\nMbed TLS includes an elaborate test suite in `tests/` that initially requires Python to generate the tests files (e.g. `test\\_suite\\_ssl.c`). These files are generated from a `function file` (e.g. `suites/test\\_suite\\_ssl.function`) and a `data file` (e.g. `suites/test\\_suite\\_ssl.data`). The `function file` contains the test functions. The `data file` contains the test cases, specified as parameters that will be passed to the test function.\n\nFor machines with a Unix shell and OpenSSL (and optionally GnuTLS) installed, additional test scripts are available:\n\n-   `tests/ssl-opt.sh` runs integration tests for various TLS options (renegotiation, resumption, etc.) and tests interoperability of these options with other implementations.\n-   `tests/compat.sh` tests interoperability of every ciphersuite with other implementations.\n-   `tests/scripts/test-ref-configs.pl` test builds in various reduced configurations.\n-   `tests/scripts/depends.py` test builds in configurations with a single curve, key exchange, hash, cipher, or pkalg on.\n-   `tests/scripts/all.sh` runs a combination of the above tests, plus some more, with various build options (such as ASan, full `mbedtls_config.h`, etc).\n\nInstead of manually installing the required versions of all tools required for testing, it is possible to use the Docker images from our CI systems, as explained in [our testing infrastructure repository](https://github.com/Mbed-TLS/mbedtls-test/blob/main/README.md#quick-start).\n\nPorting Mbed TLS\n----------------\n\nMbed TLS can be ported to many different architectures, OS's and platforms. Before starting a port, you may find the following Knowledge Base articles useful:\n\n-   [Porting Mbed TLS to a new environment or OS](https://mbed-tls.readthedocs.io/en/latest/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS/)\n-   [What external dependencies does Mbed TLS rely on?](https://mbed-tls.readthedocs.io/en/latest/kb/development/what-external-dependencies-does-mbedtls-rely-on/)\n-   [How do I configure Mbed TLS](https://mbed-tls.readthedocs.io/en/latest/kb/compiling-and-building/how-do-i-configure-mbedtls/)\n\nMbed TLS is mostly written in portable C99; however, it has a few platform requirements that go beyond the standard, but are met by most modern architectures:\n\n- Bytes must be 8 bits.\n- All-bits-zero must be a valid representation of a null pointer.\n- Signed integers must be represented using two's complement.\n- `int` and `size_t` must be at least 32 bits wide.\n- The types `uint8_t`, `uint16_t`, `uint32_t` and their signed equivalents must be available.\n- Mixed-endian platforms are not supported.\n- SIZE_MAX must be at least as big as INT_MAX and UINT_MAX.\n\nPSA cryptography API\n--------------------\n\n### PSA API\n\nArm's [Platform Security Architecture (PSA)](https://developer.arm.com/architectures/security-architectures/platform-security-architecture) is a holistic set of threat models, security analyses, hardware and firmware architecture specifications, and an open source firmware reference implementation. PSA provides a recipe, based on industry best practice, that allows security to be consistently designed in, at both a hardware and firmware level.\n\nThe [PSA cryptography API](https://arm-software.github.io/psa-api/crypto/) provides access to a set of cryptographic primitives. It has a dual purpose. First, it can be used in a PSA-compliant platform to build services, such as secure boot, secure storage and secure communication. Second, it can also be used independently of other PSA components on any platform.\n\nThe design goals of the PSA cryptography API include:\n\n* The API distinguishes caller memory from internal memory, which allows the library to be implemented in an isolated space for additional security. Library calls can be implemented as direct function calls if isolation is not desired, and as remote procedure calls if isolation is desired.\n* The structure of internal data is hidden to the application, which allows substituting alternative implementations at build time or run time, for example, in order to take advantage of hardware accelerators.\n* All access to the keys happens through key identifiers, which allows support for external cryptoprocessors that is transparent to applications.\n* The interface to algorithms is generic, favoring algorithm agility.\n* The interface is designed to be easy to use and hard to accidentally misuse.\n\nArm welcomes feedback on the design of the API. If you think something could be improved, please open an issue on our Github repository. Alternatively, if you prefer to provide your feedback privately, please email us at [`mbed-crypto@arm.com`](mailto:mbed-crypto@arm.com). All feedback received by email is treated confidentially.\n\n### PSA implementation in Mbed TLS\n\nMbed TLS includes a reference implementation of the PSA Cryptography API.\nHowever, it does not aim to implement the whole specification; in particular it does not implement all the algorithms.\n\n### PSA drivers\n\nMbed TLS supports drivers for cryptographic accelerators, secure elements and random generators. This is work in progress. Please note that the driver interfaces are not fully stable yet and may change without notice. We intend to preserve backward compatibility for application code (using the PSA Crypto API), but the code of the drivers may have to change in future minor releases of Mbed TLS.\n\nPlease see the [PSA driver example and guide](docs/psa-driver-example-and-guide.md) for information on writing a driver.\n\nLicense\n-------\n\nUnless specifically indicated otherwise in a file, Mbed TLS files are provided under a dual [Apache-2.0](https://spdx.org/licenses/Apache-2.0.html) OR [GPL-2.0-or-later](https://spdx.org/licenses/GPL-2.0-or-later.html) license. See the [LICENSE](LICENSE) file for the full text of these licenses, and [the 'License and Copyright' section in the contributing guidelines](CONTRIBUTING.md#License-and-Copyright) for more information.\n\n### Third-party code included in Mbed TLS\n\nThis project contains code from other projects. This code is located within the `tf-psa-crypto/drivers/` directory. The original license text is included within project subdirectories, where it differs from the normal Mbed TLS license, and/or in source files. The projects are listed below:\n\n* `drivers/everest/`: Files stem from [Project Everest](https://project-everest.github.io/) and are distributed under the Apache 2.0 license.\n* `drivers/p256-m/p256-m/`: Files have been taken from the [p256-m](https://github.com/mpg/p256-m) repository. The code in the original repository is distributed under the Apache 2.0 license. It is distributed in Mbed TLS under a dual Apache-2.0 OR GPL-2.0-or-later license with permission from the author.\n\nContributing\n------------\n\nWe gratefully accept bug reports and contributions from the community. Please see the [contributing guidelines](CONTRIBUTING.md) for details on how to do this.\n\nContact\n-------\n\n* To report a security vulnerability in Mbed TLS, please email <mbed-tls-security@lists.trustedfirmware.org>. For more information, see [`SECURITY.md`](SECURITY.md).\n* To report a bug or request a feature in Mbed TLS, please [file an issue on GitHub](https://github.com/Mbed-TLS/mbedtls/issues/new/choose).\n* Please see [`SUPPORT.md`](SUPPORT.md) for other channels for discussion and support about Mbed TLS.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 6.1259765625,
          "content": "## Reporting Vulnerabilities\n\nIf you think you have found an Mbed TLS security vulnerability, then please\nsend an email to the security team at\n<mbed-tls-security@lists.trustedfirmware.org>.\n\n## Security Incident Handling Process\n\nOur security process is detailed in our\n[security\ncenter](https://developer.trustedfirmware.org/w/mbed-tls/security-center/).\n\nIts primary goal is to ensure fixes are ready to be deployed when the issue\ngoes public.\n\n## Maintained branches\n\nOnly the maintained branches, as listed in [`BRANCHES.md`](BRANCHES.md),\nget security fixes.\nUsers are urged to always use the latest version of a maintained branch.\n\n## Threat model\n\nWe classify attacks based on the capabilities of the attacker.\n\n### Remote attacks\n\nIn this section, we consider an attacker who can observe and modify data sent\nover the network. This includes observing the content and timing of individual\npackets, as well as suppressing or delaying legitimate messages, and injecting\nmessages.\n\nMbed TLS aims to fully protect against remote attacks and to enable the user\napplication in providing full protection against remote attacks. Said\nprotection is limited to providing security guarantees offered by the protocol\nbeing implemented. (For example Mbed TLS alone won't guarantee that the\nmessages will arrive without delay, as the TLS protocol doesn't guarantee that\neither.)\n\n**Warning!** Block ciphers do not yet achieve full protection against attackers\nwho can measure the timing of packets with sufficient precision. For details\nand workarounds see the [Block Ciphers](#block-ciphers) section.\n\n### Local attacks\n\nIn this section, we consider an attacker who can run software on the same\nmachine. The attacker has insufficient privileges to directly access Mbed TLS\nassets such as memory and files.\n\n#### Timing attacks\n\nThe attacker is able to observe the timing of instructions executed by Mbed TLS\nby leveraging shared hardware that both Mbed TLS and the attacker have access\nto. Typical attack vectors include cache timings, memory bus contention and\nbranch prediction.\n\nMbed TLS provides limited protection against timing attacks. The cost of\nprotecting against timing attacks widely varies depending on the granularity of\nthe measurements and the noise present. Therefore the protection in Mbed TLS is\nlimited. We are only aiming to provide protection against **publicly\ndocumented attack techniques**.\n\nAs attacks keep improving, so does Mbed TLS's protection. Mbed TLS is moving\ntowards a model of fully timing-invariant code, but has not reached this point\nyet.\n\n**Remark:** Timing information can be observed over the network or through\nphysical side channels as well. Remote and physical timing attacks are covered\nin the [Remote attacks](remote-attacks) and [Physical\nattacks](physical-attacks) sections respectively.\n\n**Warning!** Block ciphers do not yet achieve full protection. For\ndetails and workarounds see the [Block Ciphers](#block-ciphers) section.\n\n#### Local non-timing side channels\n\nThe attacker code running on the platform has access to some sensor capable of\npicking up information on the physical state of the hardware while Mbed TLS is\nrunning. This could for example be an analogue-to-digital converter on the\nplatform that is located unfortunately enough to pick up the CPU noise.\n\nMbed TLS doesn't make any security guarantees against local non-timing-based\nside channel attacks. If local non-timing attacks are present in a use case or\na user application's threat model, they need to be mitigated by the platform.\n\n#### Local fault injection attacks\n\nSoftware running on the same hardware can affect the physical state of the\ndevice and introduce faults.\n\nMbed TLS doesn't make any security guarantees against local fault injection\nattacks. If local fault injection attacks are present in a use case or a user\napplication's threat model, they need to be mitigated by the platform.\n\n### Physical attacks\n\nIn this section, we consider an attacker who has access to physical information\nabout the hardware Mbed TLS is running on and/or can alter the physical state\nof the hardware (e.g. power analysis, radio emissions or fault injection).\n\nMbed TLS doesn't make any security guarantees against physical attacks. If\nphysical attacks are present in a use case or a user application's threat\nmodel, they need to be mitigated by physical countermeasures.\n\n### Caveats\n\n#### Out-of-scope countermeasures\n\nMbed TLS has evolved organically and a well defined threat model hasn't always\nbeen present. Therefore, Mbed TLS might have countermeasures against attacks\noutside the above defined threat model.\n\nThe presence of such countermeasures don't mean that Mbed TLS provides\nprotection against a class of attacks outside of the above described threat\nmodel. Neither does it mean that the failure of such a countermeasure is\nconsidered a vulnerability.\n\n#### Block ciphers\n\nCurrently there are four block ciphers in Mbed TLS: AES, CAMELLIA, ARIA and\nDES. The pure software implementation in Mbed TLS implementation uses lookup\ntables, which are vulnerable to timing attacks.\n\nThese timing attacks can be physical, local or depending on network latency\neven a remote. The attacks can result in key recovery.\n\n**Workarounds:**\n\n- Turn on hardware acceleration for AES. This is supported only on selected\n  architectures and currently only available for AES. See configuration options\n  `MBEDTLS_AESCE_C`, `MBEDTLS_AESNI_C` for details.\n- Add a secure alternative implementation (typically hardware acceleration) for\n  the vulnerable cipher. See the [Alternative Implementations\nGuide](docs/architecture/alternative-implementations.md) for more information.\n- Use cryptographic mechanisms that are not based on block ciphers. In\n  particular, for authenticated encryption, use ChaCha20/Poly1305 instead of\n  block cipher modes. For random generation, use HMAC\\_DRBG instead of CTR\\_DRBG.\n\n#### Everest\n\nThe HACL* implementation of X25519 taken from the Everest project only protects\nagainst remote timing attacks. (See their [Security\nPolicy](https://github.com/hacl-star/hacl-star/blob/main/SECURITY.md).)\n\nThe Everest variant is only used when `MBEDTLS_ECDH_VARIANT_EVEREST_ENABLED`\nconfiguration option is defined. This option is off by default.\n"
        },
        {
          "name": "SUPPORT.md",
          "type": "blob",
          "size": 0.6640625,
          "content": "## Documentation\n\nHere are some useful sources of information about using Mbed TLS:\n\n- [ReadTheDocs](https://mbed-tls.readthedocs.io/);\n- API documentation, see the [Documentation section of the\n  README](README.md#documentation);\n- the `docs` directory in the source tree;\n- the [Mbed TLS Knowledge Base](https://mbed-tls.readthedocs.io/en/latest/kb/);\n- the [Mbed TLS mailing-list\n  archives](https://lists.trustedfirmware.org/archives/list/mbed-tls@lists.trustedfirmware.org/).\n\n## Asking Questions\n\nIf you can't find your answer in the above sources, please use the [Mbed TLS\nmailing list](https://lists.trustedfirmware.org/mailman3/lists/mbed-tls.lists.trustedfirmware.org).\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "dco.txt",
          "type": "blob",
          "size": 1.3876953125,
          "content": "Developer Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "doxygen",
          "type": "tree",
          "content": null
        },
        {
          "name": "framework",
          "type": "commit",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkgconfig",
          "type": "tree",
          "content": null
        },
        {
          "name": "programs",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tf-psa-crypto",
          "type": "commit",
          "content": null
        },
        {
          "name": "visualc",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}