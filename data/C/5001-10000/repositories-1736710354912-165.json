{
  "metadata": {
    "timestamp": 1736710354912,
    "page": 165,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zmap/zmap",
      "stars": 5594,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.2724609375,
          "content": "BasedOnStyle: LLVM\nIndentWidth: 8\nUseTab: Always\nBreakBeforeBraces: Linux\nAllowShortIfStatementsOnASingleLine: false\nIndentCaseLabels: false\nDerivePointerAlignment: false\nPointerAlignment: Right\nBreakStringLiterals: false\nSortIncludes: false\nReflowComments: false\nColumnLimit: 0\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2060546875,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\n\n[*.{c,h}]\nindent_style = tab\nindent_size = 8\n\n[CMakeLists.txt]\nindent_style = spaces\nindent_size = 4\n\n[*.py]\nindent_style = spaces\nindent_size = 4\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.39453125,
          "content": "!.clang-format\n*.o\n*.a\n*.pyc\n*.pyo\n*~\n\\#*\nsrc/zmap\nsrc/zopt.h\nsrc/zopt.c\nsrc/zbopt.h\nsrc/zbopt.c\nsrc/zitopt.c\nsrc/zitopt.h\nsrc/topt.c\nsrc/topt.h\nsrc/ztopt.c\nsrc/ztopt.h\nsrc/*.ggo\nsrc/zblocklist\nsrc/ztee\nsrc/ziterate\nlexer.c\nlexer.h\nparser.c\nparser.h\n*.deb\n!.gitignore\n!.travis.yml\ncmake_installer.sh\nCMakeFiles\n*.cmake\nMakefile\nCMakeCache.txt\ninstall_manifest.txt\n_CPack_Packages/*\nsrc/ztests\n*.DS_Store\n"
        },
        {
          "name": "10gigE.md",
          "type": "blob",
          "size": 1.962890625,
          "content": "10GigE (Zippier) ZMap\n===========\n\nIt is possible to build ZMap to run at 95% of 10 GigE linespeed, sending over 14\nmillion packets per second. This requires a compatible Intel 10 Gbps Ethernet\nNIC and Linux.\n\n### Prerequisites\n\n  0. A working ZMap development environment (see [INSTALL.md](install.md))\n  1. A [PF_RING ZC](http://www.ntop.org/products/pf_ring/pf_ring-zc-zero-copy/)\n     license from ntop.\n  2. PF_RING ZC headers and kernel module\n  3. A 10 Gbps NIC with compatible \"PF_RING-aware\" drivers\n  4. A Linux (not BSD or Mac) installation\n  5. For best results, a computer with at least 8 *physical* cores on the same\n     NUMA node.\n  6. libnuma (`sudo apt-get install libnuma-dev`)\n\n### Building\n\nMost build errors are due to incorrectly building or installing PF_RING. Make\nsure you have build the drivers, the kernel module, and the userland library, as\nwell as install the headers and kernel module to the correct locations.\n\nThe PF_RING `make install` command might not copy `pfring_zc.h` to\n`/usr/include`, in which case manually install the file and set permissions\ncorrectly.\n\nTo build navigate to the root of the repository and run:\n\n```\n$ cmake -DWITH_PFRING=ON -DENABLE_DEVELOPMENT=OFF .\n$ make\n```\n\n### Running\n\nYou'll have to carefully select the number of threads to use, as well as specify\nas zero-copy interface, e.g. `zc:eth1`. Use the `--cores` option to pick which\ncores to pin to. Make sure to pin to different physical cores, and note that\nsome machines interleave physical and \"virtual\" cores. \n```\n$ sudo ./src/zmap -p 80 -i zc:eth7 -o output.csv -T 5\n```\n\n### Considerations\n\nDO NOT TAKE THIS LIGHTLY!\n\nRunning ZMap at 10Gbps hits every /16 on the Internet over 200 times a second.\nEven if you have a large source IP range to scan from, it's very obvious that\nyou're scanning. As always, follow scanning best practices, honor blocklist\nrequests, and signal benign/research intent via domain names and websites on\nyour scan IPs.\n\nRemember, you're sending a lot of traffic.\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.3193359375,
          "content": "Zakir Durumeric <zakir@cs.stanford.edu>\nDavid Adrian <davidcadrian@gmail.com>\nPhillip Stephens <phillip4@stanford.edu>\nDaniel Roethlisberger <daniel@roe.ch>\nEric Wustrow <ewust@colorado.edu>\nJ. Alex Halderman <jhalderm@umich.edu>\nPaul Pearce <pearce@gatech.edu>\nAriana Mirian <amirian@umich.edu>\nHD Moore <HD_Moore@rapid7.com>\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 12.1884765625,
          "content": "# 1.0.0 2013-8-16\n* Initial public release.\n\n# 1.0.1 2013-8-17\n## BUGFIX\n* Issue #4 \"Missing module_ssldb? Redis module won't compile.\" - removed dependencies on ssldb.\n\n## SUPPORT\n* Issue #3 \"Error after running make\" - added documentation that ZMap requires 64-bit system.\n* Issue #1 \"Failure at calloc for 'ip_seen' on KVM VPSs?\" - added documentation on memory requirements for ZMap.\n\n# 1.0.2 2013-8-18\n## BUGFIX\n* Issue #14 \"gcc 4.7.2 -Wunprototyped-calls error with recv_run.\" - changed recv_run header to match def in recv.c.\n\n# 1.0.3 2013-8-19\n## BUGFIX\n* Issues #21, #28 \"fixed get_gateway malloc/memset errors\".\n* Issue #24 \"Makefile does not respect LDFLAGS\" - changed = to += for CFLAGS, LDFAGS, and LDLIBS.\n\n# 1.1.0 2013-11-18\n## BUGFIX\n* Source port in UDP module corrected to use network order instead of host order.\n\n## FEATURE\n* Updated probe and output module interface that allows arbitrary data to be passed from the probe module (e.g. additional TCP fields) that can then be output as requested.\n* Replaced simple_file, and redis_file output modules with csv module that allows user controlled output of what fields should be output to a csv file. As well, implemented `--list-output-fields` that allows users to find what fields are available.\n* Added output-filters that allow users to control what types of packets that want output (e.g. classification = \"SYNACK\" && is_repeat = 0).\n* Drop root privileges after opening necessary sockets if run as privileged user.\n* Added paged bitmap for removing duplicate responses so that if small subnets are scanned, large amount of memory is no longer required.\n* Fast scanning of small subnets. Scanning small subnets no longer requires iterating over the entire IPv4 address space, which allows ZMap-like speed for all network sizes.\n* Scan CIDR blocks from the command-line instead of only through whitelist file (e.g. ZMap -p 443 192.168.0.0/16 10.0.0.0/8).\n* Redis output module now allows connecting to arbitrary redis servers and lists from the command-line via output module parameter.\n* JSON output module added.\n* 32-bit support.\n* UDP Packet Support.\n\n# 1.1.1 2013-12-16\n## BUGFIX\n* Fixed bit-map, which was incorrectly deduplicating responses.\n* CMake correctly installs files into /etc/zmap.\n\n# 1.1.2 2014-01-21\n## BUGFIX\n* Off-by-one error in paged bitmap.\n\n# 1.2.0 2014-03-10\n## BUGFIX\n* ICMP values added incorrectly, timestamp unavailable.\n* Setting fixed number of probes may inadverantly target specific networks.\n* Scans occasionally skip cooldown period due to lock issue.\n\n## FEATURE\n* Added MongoDB as a supported output module.\n* Added context to allow easier packaging in Debian and Ubuntu and Fedora and Brew and Macports.\n* Remove dnet dependency for Linux.\n* Remove random extra printed saddr.\n* Build with optimizations by default.\n* Added JSON metadata output.\n* Added syslog support.\n* Added BSD/mac support.\n* Removed bizarre executible bits on random example code in git repo.\n* Added support for scanning by FQDN.\n* Adding sharding support.\n\n# 1.2.1 2014-06-09\n## BUGFIX\n* UDP scans sometimes double-counted IP header length.\n* Properly check UDP packet length.\n* Integer overflow in JSON metadata when printing generator.\n* All calls to malloc checked for failure.\n\n## FEATURE\n* Autodetect number of sender threads.\n* Add ignore-invalid-hosts option for blocklist.\n\n# 2.1.0\t2015-09-02\n## BUGFIX\n* ZMap now filters out packets that are from the local MAC instead of only capturing packets from the local gateway. The prior approach caused valid responses to be dropped for a fair number of users.\n* ZMap would sometimes segfault if the number of threads was greater than the number of destination hosts.\n* ZMap did not crash when it was unable to write to the output file. This would cause ZMap to continue running when it was piped into another application and that application died. We not log_fatal if the output is no longer accessible per ferror.\n* Pcap filter captures outgoing packets.\n* Install overwrites blocklist file.\n* Output is sometimes colored.\n* Use correct email for Zakir in AUTHORS.\n* Random-number generator is now thread safe.\n* Finding a generator would crash with low probability.\n\n## CHANGED\n* JSON output uses underscores instead of hyphens.\n* Removes support for deprecated simple_file and extended_file options.\n* Rename redis module to redis-packed.\n* Probe module API takes user data argument.\n* Output to `stdout` by default.\n* Remove space in csv output header.\n* Build with JSON support by default.\n* Don't print blocklisted CIDR blocks to log. These are available in `--metadata-file` and end up flooding the log with a ton of metadata.\n* Remove type field from JSON output module and get rid of header.\n* Remove `--summary`. This has been replaced by `--metadata-file`.\n* JSON metadata now uses ISO-8601 compatible timestamps instead of proprietary log format.\n* Remove buggy and never officially-released DNS probe module.\n* Add icmp-echo-time probe module for measuring RTT MongoDB output module.\n\n## FEATURE\n* zblocklist (a standalone utility that allows you to efficiently check IP addresses against a ZMap compatible whitelist and blocklist. This is helpful if you are doing something like ```cat list-of-ips | zgrab``` and to make sure that you're still following your blocklist.\n* ztee (a standalone utility that buffers between ZMap and ZGrab) and allows extracting just IP address from a larger ZMap output in order to complete follow up handshakes without losing any data.\n* NTP probe module.\n* Status-updates-file (monitor output as a csv).\n* Add redis-csv output module.\n* Colored log output.\n* Add pf_ring and 10GigE support.\n* Optional app-success field output in monitor.\n\n# 2.1.1\t2015-09-11\n## BUGFIX\n* make install works on more systems\n\n## CHANGED\n* CMakeLists.txt is now much more sane and packager-friendly\n* Switch CHANGELOG and INSTALL to Markdown\n* Generate `*.ggo` files from `*.ggo.in` files that define ZMap version as a macro\n\n# 3.0.0 2023-06-23\nWe're happy to provide ZMap 3.0.0, only slightly under six years late. We recommend using this release over any previous 2.x release.\n\nZMap 3.0.0 represents several years of development and contains more than a hundred small bug fixes from ZMap 2.1.1., including many fixes for UDP modules, sharding, and progress calculation. Below, are some of the most important changes:\n\n## BUGFIX\n\n* Fix send rate calculations\n* Accept RST packets for SEQ+0 (per RFC)\n* Packets per second is packets per second now instead of IPs per second\n* MaxResults is now the number of packets that pass the output filter (#502)\n* Try all routing tables in Linux\n* Fix crash on invalid UDP packets\n* Fix failed initialize on single-question DNS probes\n* Fix inaccurate blocklist warning\n* Use monotonic OS clocks for monitoring and rate estimation\n* Fix bugs in UDP template arguments\n* Increase UDP PCAP snaplen to prevent packet truncation\n* Exit on failed sends\n* Fix incorrect time remaining calculations on sharded scans\n\n## FEATURE\n\n* Added --list-of-ips feature which allows scanning a large number (e.g., hundreds of millions or billons) of individual IPS\n* Improved user messages when network settings can't be automatically discovered\n* Consistent ICMP support and handling across all probe modules (#470)\n* Set TCP MSS flags to avoid filtering by destination hosts (#673)\n* Sane default behavior that can be explained with other CLI flags\n* Non-Flat Result output and JSON result encoding\n* IP Fragment Checking\n* DNS, TCP SYN-ACK, and Bacnet Probe Module\n* Change Whitelist/Blacklist terms to Allowlist/Blocklist\n* Add extended validation bytes for probe modules that can use greater entropy\n* Support non-continuous source IP's (#516)\n* Add NetBSD and DragonFly BSD compatibility code (#411)\n* Improved ICMP validation based on returned packet (#419)\n\n## REMOVED\n\n* Drop Redis and MongoDB support (#661)\n\n\n# 4.0.0 2023-11-06\nZMap 4.0.0 introduces the notion of multi-port scanning, which has been a long requested feature. This is a breaking change since ZMap now operates on a metric of (ip,port) target instead of simply IP (e.g., for scan rate). It also introduces new dependencies (e.g., libjudy) to support multi-port scanning and changes ZMap's command-line interface. Below are some of the most important changes:\n\n## BUGFIX\n\n* Fix segmentation fault when passing no port to the ICMP module (or any module without a port requirement)\n\n## FEATURE\n\n* Multi-port scanning support\n* Store link-layer timestamp in icmp_echo_time module (#726)\n* Build support for ARM-based Macs\n* Use the network interface containing the default route for usability\n* Improve the dst port validation\n\n\n# 4.1.0 2024-03-21\nZMap 4.1.0 contains a number of bug fixes and performance enhancements, especially around the sending of probe packets. Additionally, the `IP_ID` is now randomized to prevent the fingerprinting of ZMap scan traffic. Below are some of the most important changes:\n\n## BUGFIX\n\n* Fixes a bug where an assertion error would always occur when the `-I` flag was used\n* Fixes `--probe-args` parsing with the DNS module\n* Prevents crash when `--batch` size overflowed the uint8 holding the batch_size\n* Fixes size calculation with `--iplayer` option that caused an overflow in `fake_eth_hdr`\n* Fixes shard initialization with multi-port that could cause the scan to scan port 0 \n* Fixes inaccurate estimated time remaining and percentage complete calculations during a multi-port scan\n* Fixes building from source on MidnightBSD\n* Fixes hit-rate calculation with multiple `--probes` packets per target\n\n\n## FEATURE\n\n* Randomizes the IP packet ID to prevent fingerprinting of scan traffic\n* Adds support for Netmap to increase performance on supported NIC's w/ the requisite drivers\n* Adds send packet batching (using `sendmmsg`) to improve performance on Linux/BSD\n* Adds hardware acceleration for AES to improve performance when the CPU begins to become the bottleneck\n* Adds integration tests and compilation checks for supported OS's as Github Actions\n* Adds --probe-args options to the TCP SYN scan module to send TCP header options identical to Ubuntu (default), MacOS, Windows, or No Options.\n* Sets default number of sending threads to min(4, number of host cores)\n* Handles IPv6 addresses in `blocklist.conf`\n* Supports `--iplayer` on MacOS\n\n\n# 4.1.1 2024-05-21\n\n## DOCUMENTATION\n* updated CHANGELOG.md and README.md to contain the changes from v4.1.0 and point to the latest version.\n\n## ENHANCEMENT\n\n* Use same IP TTL as ubuntu (#850)\n* Add TCP options parsing in receive thread (#858)\n\n## BUGFIX\n\n* Fixed a bug which caused inaccurate ETA every 44 secs.\n* Fixed a bug where a malformed TCP options returned to the scanner would cause the receive thread to hang.\n\n\n# 4.2.0 2024-07-09\n\n## BUGFIX\n\n* Fixed a bug where ZMap's behavior with a --max-targets of a percentage with multiple ports was inconsistent with our documentation/expectations. (#886)\n\n## ENHANCEMENT\n\n* Bump the base Docker image from Ubuntu 20.04 to 24.04 (#888)\n\n\n# 4.3.0 2024-11-27\n\n## FEATURE\n* New UDP probe for DTLS servers by @dlenskiSB in https://github.com/zmap/zmap/pull/890\n* New UDP probes by @annalittle in https://github.com/zmap/zmap/pull/899\n* Add source port validation CLI option and associated code to UDP module by @phillip-stephens in https://github.com/zmap/zmap/pull/901\n\n## BUGFIX\n\n* Fix 904 - multi-port scans lead to int overflow by @phillip-stephens in https://github.com/zmap/zmap/pull/905\n* Fix ZMap not obeying `--rate` edge case by @phillip-stephens in https://github.com/zmap/zmap/pull/907\n* Match JSON function to variable type by @phillip-stephens in https://github.com/zmap/zmap/pull/908\n* Fix source port range size warning by @Murgeye in https://github.com/zmap/zmap/pull/891\n\n## ENHANCEMENT\n* Handle upgrade path for blacklist to blocklist by @phillip-stephens in https://github.com/zmap/zmap/pull/895\n* Fixes ubuntu docker base image versions in github tests by @phillip-stephens in https://github.com/zmap/zmap/pull/898\n* Fix Mac build CI step by @phillip-stephens in https://github.com/zmap/zmap/pull/906\n\n\n# 4.3.1 2024-12-10\n\n## BUGFIX\n\n* Missed an uint32 which caused multi-port scans to end early by @phillip-stephens in https://github.com/zmap/zmap/pull/914\n* Fix for #913 (where a handful of targets were scanned twice) and added IPv4 scan coverage integration test and python wrapper with --fast-dryrun by @phillip-stephens in https://github.com/zmap/zmap/pull/916"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.94921875,
          "content": "cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n- family-names: \"Durumeric\"\n  given-names: \"Zakir\"\n  orcid: \"https://orcid.org/0000-0002-9647-4192\"\n- family-names: \"Wustrow\"\n  given-names: \"Eric\"\n- family-names: \"Halderman\"\n  given-names: \"J. Alex\"\n  orcid: \"https://orcid.org/0000-0002-9116-5390\"\ntitle: \"zmap\"\n# TODO add version/doi once we tag and release ZMap 4.1 into package managers\ndate-released: 2013-08\nurl: \"https://github.com/zmap/zmap\"\npreferred-citation:\n  type: \"conference-paper\"\n  authors:\n    - family-names: \"Durumeric\"\n      given-names: \"Zakir\"\n      orcid: \"https://orcid.org/0000-0002-9647-4192\"\n    - family-names: \"Wustrow\"\n      given-names: \"Eric\"\n    - family-names: \"Halderman\"\n      given-names: \"J. Alex\"\n      orcid: \"https://orcid.org/0000-0002-9116-5390\"\n  collection-title: \"22nd USENIX Security Symposium\"\n  title: \"ZMap: Fast Internet-Wide Scanning and its Security Applications\"\n  year: 2013\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 10.0556640625,
          "content": "cmake_minimum_required(VERSION 2.8.12 FATAL_ERROR)\nproject(ZMAP C)\nset(ZMAP_VERSION DEVELOPMENT) # Change DEVELOPMENT to version number for release\n\noption(ENABLE_DEVELOPMENT \"Enable development specific compiler and linker flags\" OFF)\noption(ENABLE_LOG_TRACE \"Enable log trace messages\" OFF)\noption(RESPECT_INSTALL_PREFIX_CONFIG \"Respect CMAKE_INSTALL_PREFIX for /etc\" OFF)\noption(WITH_WERROR \"Build with -Werror\" OFF)\noption(WITH_PFRING \"Build with PF_RING ZC for send (10 GigE)\" OFF)\noption(WITH_NETMAP \"Build with netmap(4) for send/recv (10+ GigE)\" OFF)\noption(WITH_AES_HW \"Build with AES hardware acceleration (x86_64 and arm64)\" OFF)\noption(FORCE_CONF_INSTALL \"Overwrites existing configuration files at install\" OFF)\n\nif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n    set(USING_CLANG \"YES\")\nelse()\n    set(USING_GCC \"YES\")\nendif()\n\nif(\"${CMAKE_SYSTEM_NAME}\" MATCHES \"FreeBSD\" OR \"${CMAKE_SYSTEM_NAME}\" MATCHES \"NetBSD\" OR \"${CMAKE_SYSTEM_NAME}\" MATCHES \"DragonFly\" OR \"${CMAKE_SYSTEM_NAME}\" MATCHES \"MidnightBSD\")\n    set(BSD \"YES\")\nendif()\n\nif(\"${CMAKE_SYSTEM_NAME}\" MATCHES \"NetBSD\")\n    set(NetBSD \"YES\")\nendif()\n\n# Hardening and warnings for building with gcc\n# Maybe add -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations\nset(GCCWARNINGS\n    \"-Wall -Wformat=2 -Wno-format-nonliteral\"\n    \"-pedantic -fno-strict-aliasing\"\n    \"-Wextra\"\n    \"-Wfloat-equal -Wundef -Wwrite-strings -Wredundant-decls\"\n    \"-Wnested-externs -Wbad-function-cast -Winit-self\"\n    \"-Wmissing-noreturn\"\n    \"-Wstack-protector\"\n)\n\n# Fix line breaks\nstring(REPLACE \";\" \" \"  GCCWARNINGS \"${GCCWARNINGS}\")\n\nif(WITH_WERROR)\n    set(GCCWARNINGS \"${GCCWARNINGS} -Werror\")\nendif()\n\n# Check for dependencies\nfind_library(FOUND_JUDY HINTS /usr/include/ NAMES Judy libjudy-dev judy dev-libs/judy judy-devel)\nif (NOT FOUND_JUDY)\n    message(FATAL_ERROR \"Missing dependency: did not find Judy library, please install Judy or equivalent. More details in INSTALL.md\")\nendif()\n\nfind_library(FOUND_GMP HINTS /usr/include/ NAMES libgmp3-dev gmp dev-libs/gmp gmp-devel)\nif (NOT FOUND_GMP)\n    message(FATAL_ERROR \"Missing dependency: did not find gmp library, please install gmp or equivalent. More details in INSTALL.md\")\nendif()\n\nfind_library(FOUND_PCAP HINTS /usr/include/ NAMES pcap libpcap-dev libpcap net-libs/libpcap libpcap-devel)\nif (NOT FOUND_PCAP)\n    message(FATAL_ERROR \"Missing dependency: did not find libpcap library, please install libpcap or equivalent. More details in INSTALL.md\")\nendif()\n\nfind_program(FOUND_FLEX HINTS /usr/include/ /usr/bin/ NAMES flex sys-devel/flex)\nif (NOT FOUND_FLEX)\n    message(FATAL_ERROR \"Missing dependency: did not find flex, please install flex or equivalent. More details in INSTALL.md\")\nendif()\nfind_program(FOUND_BYACC HINTS /usr/include/ NAMES byacc dev-util/byacc)\nif (NOT FOUND_BYACC)\n    message(FATAL_ERROR \"Missing dependency: did not find byacc, please install byacc or equivalent. More details in INSTALL.md\")\nendif()\nfind_library(FOUND_JSON HINTS /usr/include/ NAMES json libjson-c-dev json-c-devel json-c dev-libs/json-c)\nif (NOT FOUND_JSON)\n    message(FATAL_ERROR \"Missing dependency: did not find libjson-c, please install libjson-c or equivalent. More details in INSTALL.md\")\nendif()\nfind_program(FOUND_GENGETOPT HINTS /usr/include/ NAMES gengetopt dev-util/gengetopt)\nif (NOT FOUND_GENGETOPT)\n    message(FATAL_ERROR \"Missing dependency: did not find gengetopt, please install gengetopt or equivalent. More details in INSTALL.md\")\nendif()\n\nfind_path(FOUND_LIBUNISTRING # UniString is neither a library or a program, but install several header files in the include path\n        NAMES unistr.h\n        PATH_SUFFIXES include\n)\nif (NOT FOUND_LIBUNISTRING)\n    message(FATAL_ERROR \"Missing dependency: did not find libunistring, please install libunistring or equivalent. More details in INSTALL.md\")\nendif()\n\nfind_program(FOUND_PKGCONFIG HINTS /usr/include/ NAMES pkg-config dev-util/pkgconf)\nif (NOT FOUND_PKGCONFIG)\n    message(FATAL_ERROR \"Missing dependency: did not find pkg-config, please install pkg-config or equivalent. More details in INSTALL.md\")\nendif()\n\n\nif(ENABLE_DEVELOPMENT)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -ggdb\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -g\")\nelse()\n    # Hardening and optimizations for building with gcc\n    set(GCCHARDENING \"-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2 -fstack-protector-all -fwrapv -fPIC --param ssp-buffer-size=1\")\n    if(NOT APPLE AND NOT BSD)\n        set(LDHARDENING \"-z relro -z now\")\n    else()\n        set(LDHARDENING \"\")\n    endif()\n\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${GCCHARDENING} -O2\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${LDHARDENING} ${CMAKE_EXE_LINKER_FLAGS}\")\nendif()\n\nif(ENABLE_LOG_TRACE)\n    add_definitions(\"-DDEBUG\")\nendif()\n\n\nset(CMAKE_C_FLAGS \"${GCCWARNINGS} ${CMAKE_C_FLAGS}\")\n\n\ninclude(FindPkgConfig)\npkg_check_modules(JSON json-c)\nif(JSON_FOUND)\n    include_directories(${JSON_INCLUDE_DIRS})\nelse()\n    message(FATAL_ERROR \"Did not find libjson\")\nendif()\nstring(REPLACE \";\" \" \" JSON_CFLAGS \"${JSON_CFLAGS}\")\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${JSON_CFLAGS}\")\n\nif(WITH_PFRING)\n    add_definitions(\"-DPFRING\")\n    set(PFRING_LIBRARIES pfring rt numa)\nendif()\n\nif(WITH_NETMAP)\n    add_definitions(\"-DNETMAP\")\nendif()\n\nif(WITH_AES_HW)\n    add_definitions(\"-DAES_HW\")\nendif()\n\nset(JUDY_LIBRARIES \"Judy\")\n\n# Standard FLAGS\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -std=gnu11\")\nif(NOT APPLE)\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -pthread\")\nendif()\n\n# Set up OS-specific include directories\nif(APPLE)\n    if(EXISTS /opt/local/include)\n        include_directories(/opt/local/include)\n    endif()\n    if(EXISTS /opt/local/lib)\n        link_directories(/opt/local/lib)\n    endif()\n    if(EXISTS /usr/local/include)\n        include_directories(/usr/local/include)\n    endif()\n    if(EXISTS /usr/local/lib)\n        link_directories(/usr/local/lib)\n    endif()\n    if(EXISTS /opt/homebrew)\n        include_directories(/opt/homebrew/include)\n        link_directories(/opt/homebrew/lib)\n    endif()\nendif()\n\nif(BSD)\n    include_directories(/usr/local/include)\n    link_directories(/usr/local/lib)\nendif()\n\nif(NetBSD)\n    include_directories(/usr/pkg/include)\n    link_directories(/usr/pkg/lib)\nendif()\n\nadd_subdirectory(lib)\nadd_subdirectory(src)\n\n# Install conf files\nif(RESPECT_INSTALL_PREFIX_CONFIG)\n    set(CONFIG_DESTINATION \"etc/zmap\")\nelse()\n    set(CONFIG_DESTINATION \"/etc/zmap\")\nendif()\n\nFILE(GLOB CONF_FILES \"${PROJECT_SOURCE_DIR}/conf/*\")\n\n# Upgrade path for old conf files - this is necessary for users upgrading from a version where we called the blocklist file blacklist.conf\n# Must occur before the install command\nif(EXISTS \"${CONFIG_DESTINATION}/blacklist.conf\")\n    message(STATUS \"Old configuration file detected at ${CONFIG_DESTINATION}/blacklist.conf, creating a symlink to ${CONFIG_DESTINATION}/blocklist.conf to match the new flag conventions\")\n    execute_process(\n            COMMAND ${CMAKE_COMMAND} -E create_symlink \"${CONFIG_DESTINATION}/blacklist.conf\" \"${CONFIG_DESTINATION}/blocklist.conf\"\n    )\n    message(STATUS \"blocklist.conf has been successfully symlinked to blacklist.conf.\")\nendif()\n\n# If the zmap.conf file exists and contains the old blacklist-file option, replace it with the new blocklist-file option\nif(EXISTS \"${CONFIG_DESTINATION}/zmap.conf\")\n    file(READ \"${CONFIG_DESTINATION}/zmap.conf\" FILE_CONTENTS)\n\n    if(FILE_CONTENTS MATCHES \"blacklist-file \\\"${CONFIG_DESTINATION}/blacklist.conf\\\"\")\n        string(REPLACE \"blacklist-file \\\"${CONFIG_DESTINATION}/blacklist.conf\\\"\"\n                \"blocklist-file \\\"${CONFIG_DESTINATION}/blocklist.conf\\\"\"\n                FILE_CONTENTS\n                \"${FILE_CONTENTS}\")\n        file(WRITE \"${CONFIG_DESTINATION}/zmap.conf\" \"${FILE_CONTENTS}\")\n\n        message(STATUS \"Blacklist to blocklist file path successfully updated in ${CONFIG_DESTINATION}/zmap.conf.\")\n    else()\n        message(STATUS \"blacklist-file option does not exist in ${CONFIG_DESTINATION}/zmap.conf. No changes necessary to upgrade ZMap configuration file.\")\n    endif()\nelse()\n    message(STATUS \"No ZMap configuration file detected at ${CONFIG_DESTINATION}/zmap.conf. No changes necessary to upgrade ZMap configuration file.\")\nendif()\n\nmessage(STATUS \"Default ZMap configuration file location is /etc/zmap\")\nforeach(EACH_CONF ${CONF_FILES})\n    get_filename_component(CONF_BASENAME ${EACH_CONF} NAME)\n    message(STATUS \"Checking if ${CONF_BASENAME} exists there...\")\n    if(NOT EXISTS \"${CONFIG_DESTINATION}/${CONF_BASENAME}\")\n        install(FILES ${EACH_CONF} DESTINATION ${CONFIG_DESTINATION})\n    elseif(FORCE_CONF_INSTALL)\n        message(WARNING \"FORCE_CONF_INSTALL will overwrite any existing configuration files\")\n        install(FILES ${EACH_CONF} DESTINATION ${CONFIG_DESTINATION})\n    else()\n        message(WARNING \"Existing configuration file detected at /etc/zmap/${CONF_BASENAME}, ${CONF_BASENAME} from sources will NOT be installed. Please check and install manually!\")\n    endif()\nendforeach()\n\n# Allow Debian Packaging\ninclude(InstallRequiredSystemLibraries)\n\nset(CPACK_SET_DESTDIR \"on\")\nset(CPACK_PACKAGING_INSTALL_PREFIX \"/tmp\")\nset(CPACK_GENERATOR \"DEB\")\n\nset(CPACK_DEBIAN_PACKAGE_VERSION ${ZMAP_VERSION})\nset(CPACK_DEBIAN_PACKAGE_PRIORITY \"optional\")\nset(CPACK_DEBIAN_PACKAGE_SECTION \"network\")\nset(CPACK_DEBIAN_ARCHITECTURE ${CMAKE_SYSTEM_PROCESSOR})\nset(CPACK_DEBIAN_PACKAGE_DEPENDS \"libc6 (>= 2.1.3), libgmp10, libpcap0.8, libjson-c-dev\")\n\nset(CPACK_PACKAGE_DESCRIPTION \"Internet-scale network scanner\")\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"ZMap is an open source network scanner that enables researchers to easily perform Internet-wide network studies. With a single machine and a well provisioned network uplink, ZMap is capable of performing a complete scan of the IPv4 address space in under five minutes, approaching the theoretical limit of gigabit Ethernet. ZMap can be used to study protocol adoption over time, monitor service availability, and help us better understand large systems distributed across the Internet.\")\nset(CPACK_PACKAGE_CONTACT \"Zakir Durumeric <zakird@gmail.com>\")\nset(CPACK_PACKAGE_FILE_NAME \"${CMAKE_PROJECT_NAME}_${VERSION}_${CPACK_DEBIAN_ARCHITECTURE}\")\n\nset(CPACK_COMPONENTS_ALL Libraries ApplicationData)\n\ninclude(CPack)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.4501953125,
          "content": "Contributing to ZMap\n====================\n\nZMap accepts contributions in the form of issues and pull requests. In either\ncase, before posting please [search](https://github.com/zmap/zmap/issues) to see\nif your change or bug report has been addressed previously.\n\n[INSTALL](INSTALL.md#building-from-source) provides guidance on building ZMap\nfrom source.\n\nDeveloping\n----------\n\n- ZMap code follows the [Linux kernel style guide][kernelguide]. We maintain [a\n  configuration file](/.clang-format) for `clang-format` that applies this\n  style. You can use the [format.sh](/format.sh) script to apply this style.\n\n- Before submitting a PR, please rebase/squash your commits down to a single\n  commit. Follow these [commit message guidelines][guidelines], especially with\n  regard to formatting.\n\nReviewing\n---------\n\n- All commits must be reviewed in the form of a pull request by a ZMap\n  maintainer. This usually means @zakird or @dadrian (or both).\n\n- All pull-requests should be squash-merged into master.\n\n- When squash-merging, put the PR number in the commit title. GitHub does this\n  automatically in the web interface.  Condense the commit messages down to a\n  single message; often this can just be the commit message from the first\n  commit in a PR. Follow the commit formatting guidelines [here][guidelines].\n\n[kernelguide]: https://www.kernel.org/doc/Documentation/process/coding-style.rst\n[guidelines]: https://github.com/torvalds/subsurface-for-dirk/blob/master/README#L92\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.439453125,
          "content": "####\n# A Docker container for running zmap\n#\n# To build, beware of caching and:\n#\n#   * If you wish to build current main\n#\n#        docker build -t zmap .\n#\n#   * If you wish to build a specific commit, git checkout to that specific commit before building\n#\n# To run CI pre-built images, use:\n#\n#     docker run -it --rm --net=host ghcr.io/zmap/zmap <zmap args>\n####\n\nFROM ubuntu:24.04 as builder\n\nENV DEBIAN_FRONTEND=noninteractive\nENV TZ=Etc/UTC\n\nRUN apt-get update \\\n    && apt-get install -y \\\n    build-essential \\\n    cmake \\\n    libgmp3-dev \\\n    gengetopt \\\n    libpcap-dev \\\n    flex \\\n    byacc \\\n    libjson-c-dev \\\n    libjudy-dev \\\n    pkg-config \\\n    libunistring-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /usr/local/src\n\nCOPY . .\n\nRUN cd /usr/local/src \\\n    && mkdir -p /opt/zmap \\\n    && cmake . -DRESPECT_INSTALL_PREFIX_CONFIG=ON  \\\n    && cmake --build . --parallel \"$(nproc)\" \\\n    && cmake --install . --prefix \"/opt/zmap\"\n\nFROM ubuntu:24.04\n\nLABEL org.opencontainers.image.source=\"https://github.com/zmap/zmap\"\n\nRUN apt-get update \\\n    && apt-get install -y \\\n    libpcap0.8 \\\n    libjson-c5 \\\n    libjudydebian1 \\\n    libgmp10 \\\n    dumb-init \\\n    && rm -rf /var/lib/apt/lists/*\n\nCOPY --from=builder /opt/zmap /opt/zmap\n\nENV PATH=\"/opt/zmap/sbin:${PATH}\"\n\n# dumb-init allows us to more easily send signals to zmap,\n# for example by allowing ctrl-c of a running container and zmap will stop.\nENTRYPOINT [\"dumb-init\", \"/opt/zmap/sbin/zmap\"]\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 4.333984375,
          "content": "# Installing and Building ZMap\n\n## Installing via Package Manager\n\nZMap operates on GNU/Linux, macOS, and BSD. The latest stable version may be available in package managers.\n\n| OS                                        |                         |\n| ----------------------------------------- | ----------------------- |\n| Fedora 19+ or EPEL 6+                     | `yum install zmap` |\n| Debian 8+ or Ubuntu 14.04+                | `apt install zmap` |\n| Gentoo                                    | `emerge zmap`      |\n| macOS (using [Homebrew](https://brew.sh)) | `brew install zmap`     |\n| macOS (using [MacPorts](https://macports.org)) | `port install zmap`|\n| Arch Linux                                | `pacman -S zmap`   |\n\n## Building from Source\n\n### Installing ZMap Dependencies\n\nZMap has the following dependencies:\n\n  - [CMake](http://www.cmake.org/) - Cross-platform, open-source build system\n  - [GMP](http://gmplib.org/) - Arbitrary precision arithmetic\n  - [gengetopt](http://www.gnu.org/software/gengetopt/gengetopt.html) - Command line option parsing\n  - [libpcap](http://www.tcpdump.org/) - User-level packet capture library\n  - [flex](http://flex.sourceforge.net/) and [byacc](http://invisible-island.net/byacc/) - Lexer and parser generator\n  - [json-c](https://github.com/json-c/json-c/) - JSON parsing and output\n  - [libunistring](https://www.gnu.org/software/libunistring/) - Unicode string library\n  - [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/) - compiler and library helper tool\n  - [libjudy](https://judy.sourceforge.net/) - Judy Array for packet de-duplication\n\nInstall the required dependencies with the following commands.\n\n* On Debian-based systems (including Ubuntu):\n   ```sh\n   sudo apt-get install build-essential cmake libgmp3-dev gengetopt libpcap-dev flex byacc libjson-c-dev pkg-config libunistring-dev libjudy-dev\n   ```\n\n* On RHEL- and Fedora-based systems (including CentOS):\n   ```sh\n   sudo dnf install gcc cmake gmp-devel gengetopt libpcap-devel flex byacc json-c-devel libunistring-devel Judy-devel\n   ```\n* On Arch systems\n   ```sh\n   pacman -S base-devel cmake gmp gengetopt libpcap flex byacc json-c pkg-config libunistring judy python\n   ```\n\n* On Gentoo systems\n   ```sh\n   emerge sys-devel/binutils dev-libs/gmp dev-util/gengetopt net-libs/libpcap sys-devel/flex dev-util/byacc dev-libs/json-c dev-util/pkgconf dev-libs/libunistring dev-libs/judy\n   ```\n\n* On macOS systems (using [Homebrew](https://brew.sh/)):\n  ```sh\n  brew install pkg-config cmake gmp gengetopt json-c byacc libunistring judy\n  ```\n\n* On macOS systems (using [MacPorts](https://macports.org/)):\n  ```\n  sudo port install cmake byacc flex gengetopt pkgconfig gmp libpcap json-c libunistring judy\n  ```\n\n* To launch a shell inside a Docker container with the build dependencies\n  mounted at `/src`:\n  ```sh\n  docker run -it -v $(pwd):/src zmap/builder\n  ```\n\n### Building and Installing ZMap\n\nOnce these prerequisites are installed, ZMap can be compiled by running:\n  ```sh\n  cmake .\n  make -j4\n  ```\n\nand then installed via `sudo make install`.\n\n### Development Notes\n\n- Enabling development turns on debug symbols, and turns off optimizations.\nRelease builds should be built with `-DENABLE_DEVELOPMENT=OFF`.\n\n- Enabling `log_trace` can have a major performance impact and should not be used\nexcept during early development. Release builds should be built with `-DENABLE_LOG_TRACE=OFF`.\n\n- Building packages for some systems like Fedora and RHEL requires a user-definable\ndirectory (buildroot) to put files. The way to respect this prefix is to run cmake\nwith `-DRESPECT_INSTALL_PREFIX_CONFIG=ON`.\n\n- Manpages (and their HTML representations) are generated from the `.ronn` source\nfiles in the repository, using the [ronn](https://github.com/rtomayko/ronn) tool.\nThis does not happen automatically as part of the build process; to regenerate the\nman pages you'll need to run `make manpages`. This target assumes that `ronn` is\nin your PATH.\n\n- Building with some versions of CMake may fail with `unable to find parser.h`.\nIf this happens, try updating CMake. If it still fails, don't clone ZMap into a\npath that contains the string `.com`, and try again.\n\n- ZMap may be installed to an alternative directory, with the `CMAKE_INSTALL_PREFIX`\noption. For example, to install it in `$HOME/opt` run\n    ```sh\n    cmake -DCMAKE_INSTALL_PREFIX=$HOME/opt .\n    make -j4\n    make install\n    ```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.935546875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.6201171875,
          "content": "ZMap: The Internet Scanner\n==========================\n\n![Build Status](https://github.com/zmap/zmap/actions/workflows/cmake.yml/badge.svg)\n\nZMap is a fast stateless single packet network scanner designed for Internet-wide network\nsurveys. On a typical desktop computer with a gigabit Ethernet connection, ZMap\nis capable of scanning the entire public IPv4 address space on a single port in \nunder 45 minutes. For example, sending a TCP SYN packet to every IPv4 address\non port 25 to find all potential SMTP servers running on that port. With a \n10gigE connection and [netmap](http://info.iet.unipi.it/~luigi/netmap/) or \n[PF_RING](http://www.ntop.org/products/packet-capture/pf_ring/), ZMap can scan \nthe IPv4 address space in under 5 minutes.\n\nZMap operates on GNU/Linux, Mac OS, and BSD. ZMap currently has fully implemented\nprobe modules for TCP SYN scans, ICMP, DNS queries, UPnP, BACNET, and can send a\nlarge number of [UDP probes](https://github.com/zmap/zmap/blob/master/examples/udp-probes/README).\nIf you are looking to do more involved scans (e.g., banner grab or TLS handshake), \ntake a look at [ZGrab 2](https://github.com/zmap/zgrab2), ZMap's sister project \nthat performs stateful application-layer handshakes.\n\n\nUsing ZMap\n----------\n\nIf you haven't used ZMap before, we have a step-by-step [Getting Started Guide](https://github.com/zmap/zmap/wiki/Getting-Started-Guide) that details how to perform basic scans. Documentation about all of ZMap's options and more advanced functionality can be found in our [Wiki](https://github.com/zmap/zmap/wiki). For best practices, see [Scanning Best Practices](https://github.com/zmap/zmap/wiki/Scanning-Best-Practices). \n\nIf you have questions, please first check our [FAQ](https://github.com/zmap/zmap/wiki/FAQ). Still have questions? Ask the community in [Github Discussions](https://github.com/zmap/zmap/discussions/categories/q-a). Please do not create an Issue for usage or support questions.\n\nInstallation\n------------\n\nThe latest stable release of ZMap is  [4.3.1](https://github.com/zmap/zmap/releases/tag/v4.3.1) and supports Linux, macOS, and\nBSD. See [INSTALL](INSTALL.md) for instructions on to install ZMap through a package manager or from source.\n\nArchitecture\n------------\n\nMore information about ZMap's architecture and a comparison with other tools can be found in these research papers:\n\n * [ZMap: Fast Internet-Wide Scanning and its Security Applications](https://zmap.io/paper.pdf)\n * [Zippier ZMap: Internet-Wide Scanning at 10 Gbps](https://jhalderm.com/pub/papers/zmap10gig-woot14.pdf)\n * [Ten Years of ZMap](https://arxiv.org/pdf/2406.15585)\n\nIf you use ZMap for published research, please cite the original research paper:\n\n```\n@inproceedings{durumeric2013zmap,\n  title={{ZMap}: Fast Internet-wide scanning and its security applications},\n  author={Durumeric, Zakir and Wustrow, Eric and Halderman, J Alex},\n  booktitle={22nd USENIX Security Symposium},\n  year={2013}\n}\n```\n\nCiting the ZMap paper helps us to track ZMap usage within the research community and to pursue funding for continued development.\n\n\nLicense and Copyright\n---------------------\n\nZMap Copyright 2024 Regents of the University of Michigan\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied. See LICENSE for the specific\nlanguage governing permissions and limitations under the License.\n"
        },
        {
          "name": "README.netmap.md",
          "type": "blob",
          "size": 3.111328125,
          "content": "Fast packet I/O using netmap\n============================\n\nZMap can be built for sending and receiving packets using netmap(4), for very\nhigh packet rates, especially on 10 GbE and faster links.\nSee [netmap/README.md](https://github.com/luigirizzo/netmap) for more\ninformation on netmap.\n\nNetmap is available by default on FreeBSD on many architectures, including\namd64 and arm64, and is easy to add to the kernel config on architectures where\nit is not built by default.  On Linux, netmap itself and netmap-aware drivers\ncan be installed by following the instructions in\n[netmap/LINUX/README.md](https://github.com/luigirizzo/netmap/blob/master/LINUX/README.md).\n\n\n### Prerequisites\n\n  0. A working ZMap development environment (see [INSTALL.md](INSTALL.md)).\n  1. A kernel with netmap support (check for existence of `/dev/netmap`).\n  2. For best results, a NIC with a driver that is netmap-aware, such as\n     FreeBSD's `ixgbe` or `ixl`.\n\n\n### Building\n\nTo build navigate to the root of the repository and run:\n\n```\n$ cmake -DWITH_NETMAP=ON -DENABLE_DEVELOPMENT=OFF .\n$ make\n```\n\nFor best results on hardware that supports AES acceleration, additionally use\n`-DWITH_AES_HW=ON` to enable support for AES-NI and ARMv8 CE, where applicable.\n\n\n### Running\n\nRun zmap as you would normally.\n\n```\n$ sudo ./src/zmap -p 443 -i ix0 -o output.csv\n```\n\nWarning:  Netmap will disconnect the NIC from the host network stack for the\nduration of the scan.  If you use an interface that you depend on for e.g. SSH\naccess, you will lose connectivity until ZMap exits.\n\n\n### Performance tuning\n\nFor best results, use the `--cores` option to pick which cores to pin to,\npinning to different physical cores.  By default, the number of send threads is\nset to the number of available cores after setting aside one core for the\nreceive thread, capped to 4 send threads, but you may still want to override\nthe number of send threads with `-T`.  The number of send threads cannot exceed\nthe number of TX rings of the NIC.\n\nTuning batch size can also have an effect on send rate.  `--batch 256` is not\nan unreasonable starting point on 10 GbE hardware.\n\n\n### Switch ports and STP\n\nGoing into and leaving Netmap mode causes the link to go down and up as part of\na PHY reset.  If the interface is connected to a switch with STP enabled, then\ndepending on port configuration, the switch might be muting the port for as\nmany as 30 seconds while the port goes through the listening and learning STP\nstates.  To work around this, use `--netmap-wait-ping` with an address that you\nknow will respond to ICMP echo requests.  ZMap will then only start scanning\nafter having received an ICMP echo reply from the address.\n\n```\n$ sudo ./src/zmap -p 443 -i ix0 -o output.csv --netmap-wait-ping 8.8.8.8\n```\n\n\n### Considerations\n\nDO NOT TAKE THIS LIGHTLY!\n\nRunning ZMap at 10Gbps hits every /16 on the Internet over 200 times a second.\nEven if you have a large source IP range to scan from, it's very obvious that\nyou're scanning. As always, follow scanning best practices, honor blocklist\nrequests, and signal benign/research intent via domain names and websites on\nyour scan IPs.\n\nRemember, you're sending a lot of traffic.\n"
        },
        {
          "name": "checkFormat.sh",
          "type": "blob",
          "size": 0.4228515625,
          "content": "#!/bin/bash\n\nCLANG_FORMAT=clang-format-6.0\n\nfiles_to_lint=$(find ./src ./lib -type f -name '*.c' -or -name '*.h')\n\nfail=0\nfor f in ${files_to_lint}; do\n  d=\"$(diff -u \"$f\" <($CLANG_FORMAT -style=file \"$f\") || true)\"\n  if ! [ -z \"$d\" ]; then\n    printf \"The file %s is not compliant with the coding style:\\n%s\\n\" \"$f\" \"$d\"\n    fail=1\n  fi\ndone\n\nif [ \"$fail\" -eq \"1\" ]; then\n  if [ ! -z $ZMAP_ENFORCE_FORMAT ]; then\n    exit 1\n  fi\nfi\n"
        },
        {
          "name": "conf",
          "type": "tree",
          "content": null
        },
        {
          "name": "containers",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "format.sh",
          "type": "blob",
          "size": 0.6455078125,
          "content": "#!/bin/bash\nset -e\nset -o pipefail\n\nMAJOR_REV=$((clang-format --version | awk '{print $3}' | cut -d '.' -f 1) || echo 0)\nif [ $MAJOR_REV -lt 5 ]; then\n\techo \"error: need at least clang-format version 5.x\"\n\texit 1\nfi\n\nFORMAT_CMD=\"clang-format -i -style=file\"\n\n# No files passed, format everything\nif [ $# -eq 0 ]; then\n\techo \"formatting all C code in src/ and lib/\"\n\tfind ./src -type f -name '*.c' -exec $FORMAT_CMD {} \\;\n\tfind ./src -type f -name '*.h' -exec $FORMAT_CMD {} \\;\n\tfind ./lib -type f -name '*.c' -exec $FORMAT_CMD {} \\;\n\tfind ./lib -type f -name '*.h' -exec $FORMAT_CMD {} \\;\n\texit 0\nfi\n\n# File names passed, format only those files\n$FORMAT_CMD $@\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "release-build.sh",
          "type": "blob",
          "size": 0.1044921875,
          "content": "#!/bin/bash\ncmake \\\n  -DENABLE_DEVELOPMENT=off \\\n  -DZMAP_VERSION=$1 \\\n  -DENABLE_LOG_TRACE=off \\\n  .\nmake\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}