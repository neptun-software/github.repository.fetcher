{
  "metadata": {
    "timestamp": 1736710277024,
    "page": 44,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "peng-zhihui/ElectronBot",
      "stars": 8205,
      "defaultBranch": "main",
      "files": [
        {
          "name": "1.Hardware",
          "type": "tree",
          "content": null
        },
        {
          "name": "2.Firmware",
          "type": "tree",
          "content": null
        },
        {
          "name": "3.Software",
          "type": "tree",
          "content": null
        },
        {
          "name": "4.CAD-Model",
          "type": "tree",
          "content": null
        },
        {
          "name": "5.Docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "6.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.9814453125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\r\n                       Version 3, 29 June 2007\r\n\r\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\r\n Everyone is permitted to copy and distribute verbatim copies\r\n of this license document, but changing it is not allowed.\r\n\r\n                            Preamble\r\n\r\n  The GNU General Public License is a free, copyleft license for\r\nsoftware and other kinds of works.\r\n\r\n  The licenses for most software and other practical works are designed\r\nto take away your freedom to share and change the works.  By contrast,\r\nthe GNU General Public License is intended to guarantee your freedom to\r\nshare and change all versions of a program--to make sure it remains free\r\nsoftware for all its users.  We, the Free Software Foundation, use the\r\nGNU General Public License for most of our software; it applies also to\r\nany other work released this way by its authors.  You can apply it to\r\nyour programs, too.\r\n\r\n  When we speak of free software, we are referring to freedom, not\r\nprice.  Our General Public Licenses are designed to make sure that you\r\nhave the freedom to distribute copies of free software (and charge for\r\nthem if you wish), that you receive source code or can get it if you\r\nwant it, that you can change the software or use pieces of it in new\r\nfree programs, and that you know you can do these things.\r\n\r\n  To protect your rights, we need to prevent others from denying you\r\nthese rights or asking you to surrender the rights.  Therefore, you have\r\ncertain responsibilities if you distribute copies of the software, or if\r\nyou modify it: responsibilities to respect the freedom of others.\r\n\r\n  For example, if you distribute copies of such a program, whether\r\ngratis or for a fee, you must pass on to the recipients the same\r\nfreedoms that you received.  You must make sure that they, too, receive\r\nor can get the source code.  And you must show them these terms so they\r\nknow their rights.\r\n\r\n  Developers that use the GNU GPL protect your rights with two steps:\r\n(1) assert copyright on the software, and (2) offer you this License\r\ngiving you legal permission to copy, distribute and/or modify it.\r\n\r\n  For the developers' and authors' protection, the GPL clearly explains\r\nthat there is no warranty for this free software.  For both users' and\r\nauthors' sake, the GPL requires that modified versions be marked as\r\nchanged, so that their problems will not be attributed erroneously to\r\nauthors of previous versions.\r\n\r\n  Some devices are designed to deny users access to install or run\r\nmodified versions of the software inside them, although the manufacturer\r\ncan do so.  This is fundamentally incompatible with the aim of\r\nprotecting users' freedom to change the software.  The systematic\r\npattern of such abuse occurs in the area of products for individuals to\r\nuse, which is precisely where it is most unacceptable.  Therefore, we\r\nhave designed this version of the GPL to prohibit the practice for those\r\nproducts.  If such problems arise substantially in other domains, we\r\nstand ready to extend this provision to those domains in future versions\r\nof the GPL, as needed to protect the freedom of users.\r\n\r\n  Finally, every program is threatened constantly by software patents.\r\nStates should not allow patents to restrict development and use of\r\nsoftware on general-purpose computers, but in those that do, we wish to\r\navoid the special danger that patents applied to a free program could\r\nmake it effectively proprietary.  To prevent this, the GPL assures that\r\npatents cannot be used to render the program non-free.\r\n\r\n  The precise terms and conditions for copying, distribution and\r\nmodification follow.\r\n\r\n                       TERMS AND CONDITIONS\r\n\r\n  0. Definitions.\r\n\r\n  \"This License\" refers to version 3 of the GNU General Public License.\r\n\r\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\r\nworks, such as semiconductor masks.\r\n\r\n  \"The Program\" refers to any copyrightable work licensed under this\r\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\r\n\"recipients\" may be individuals or organizations.\r\n\r\n  To \"modify\" a work means to copy from or adapt all or part of the work\r\nin a fashion requiring copyright permission, other than the making of an\r\nexact copy.  The resulting work is called a \"modified version\" of the\r\nearlier work or a work \"based on\" the earlier work.\r\n\r\n  A \"covered work\" means either the unmodified Program or a work based\r\non the Program.\r\n\r\n  To \"propagate\" a work means to do anything with it that, without\r\npermission, would make you directly or secondarily liable for\r\ninfringement under applicable copyright law, except executing it on a\r\ncomputer or modifying a private copy.  Propagation includes copying,\r\ndistribution (with or without modification), making available to the\r\npublic, and in some countries other activities as well.\r\n\r\n  To \"convey\" a work means any kind of propagation that enables other\r\nparties to make or receive copies.  Mere interaction with a user through\r\na computer network, with no transfer of a copy, is not conveying.\r\n\r\n  An interactive user interface displays \"Appropriate Legal Notices\"\r\nto the extent that it includes a convenient and prominently visible\r\nfeature that (1) displays an appropriate copyright notice, and (2)\r\ntells the user that there is no warranty for the work (except to the\r\nextent that warranties are provided), that licensees may convey the\r\nwork under this License, and how to view a copy of this License.  If\r\nthe interface presents a list of user commands or options, such as a\r\nmenu, a prominent item in the list meets this criterion.\r\n\r\n  1. Source Code.\r\n\r\n  The \"source code\" for a work means the preferred form of the work\r\nfor making modifications to it.  \"Object code\" means any non-source\r\nform of a work.\r\n\r\n  A \"Standard Interface\" means an interface that either is an official\r\nstandard defined by a recognized standards body, or, in the case of\r\ninterfaces specified for a particular programming language, one that\r\nis widely used among developers working in that language.\r\n\r\n  The \"System Libraries\" of an executable work include anything, other\r\nthan the work as a whole, that (a) is included in the normal form of\r\npackaging a Major Component, but which is not part of that Major\r\nComponent, and (b) serves only to enable use of the work with that\r\nMajor Component, or to implement a Standard Interface for which an\r\nimplementation is available to the public in source code form.  A\r\n\"Major Component\", in this context, means a major essential component\r\n(kernel, window system, and so on) of the specific operating system\r\n(if any) on which the executable work runs, or a compiler used to\r\nproduce the work, or an object code interpreter used to run it.\r\n\r\n  The \"Corresponding Source\" for a work in object code form means all\r\nthe source code needed to generate, install, and (for an executable\r\nwork) run the object code and to modify the work, including scripts to\r\ncontrol those activities.  However, it does not include the work's\r\nSystem Libraries, or general-purpose tools or generally available free\r\nprograms which are used unmodified in performing those activities but\r\nwhich are not part of the work.  For example, Corresponding Source\r\nincludes interface definition files associated with source files for\r\nthe work, and the source code for shared libraries and dynamically\r\nlinked subprograms that the work is specifically designed to require,\r\nsuch as by intimate data communication or control flow between those\r\nsubprograms and other parts of the work.\r\n\r\n  The Corresponding Source need not include anything that users\r\ncan regenerate automatically from other parts of the Corresponding\r\nSource.\r\n\r\n  The Corresponding Source for a work in source code form is that\r\nsame work.\r\n\r\n  2. Basic Permissions.\r\n\r\n  All rights granted under this License are granted for the term of\r\ncopyright on the Program, and are irrevocable provided the stated\r\nconditions are met.  This License explicitly affirms your unlimited\r\npermission to run the unmodified Program.  The output from running a\r\ncovered work is covered by this License only if the output, given its\r\ncontent, constitutes a covered work.  This License acknowledges your\r\nrights of fair use or other equivalent, as provided by copyright law.\r\n\r\n  You may make, run and propagate covered works that you do not\r\nconvey, without conditions so long as your license otherwise remains\r\nin force.  You may convey covered works to others for the sole purpose\r\nof having them make modifications exclusively for you, or provide you\r\nwith facilities for running those works, provided that you comply with\r\nthe terms of this License in conveying all material for which you do\r\nnot control copyright.  Those thus making or running the covered works\r\nfor you must do so exclusively on your behalf, under your direction\r\nand control, on terms that prohibit them from making any copies of\r\nyour copyrighted material outside their relationship with you.\r\n\r\n  Conveying under any other circumstances is permitted solely under\r\nthe conditions stated below.  Sublicensing is not allowed; section 10\r\nmakes it unnecessary.\r\n\r\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\r\n\r\n  No covered work shall be deemed part of an effective technological\r\nmeasure under any applicable law fulfilling obligations under article\r\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\r\nsimilar laws prohibiting or restricting circumvention of such\r\nmeasures.\r\n\r\n  When you convey a covered work, you waive any legal power to forbid\r\ncircumvention of technological measures to the extent such circumvention\r\nis effected by exercising rights under this License with respect to\r\nthe covered work, and you disclaim any intention to limit operation or\r\nmodification of the work as a means of enforcing, against the work's\r\nusers, your or third parties' legal rights to forbid circumvention of\r\ntechnological measures.\r\n\r\n  4. Conveying Verbatim Copies.\r\n\r\n  You may convey verbatim copies of the Program's source code as you\r\nreceive it, in any medium, provided that you conspicuously and\r\nappropriately publish on each copy an appropriate copyright notice;\r\nkeep intact all notices stating that this License and any\r\nnon-permissive terms added in accord with section 7 apply to the code;\r\nkeep intact all notices of the absence of any warranty; and give all\r\nrecipients a copy of this License along with the Program.\r\n\r\n  You may charge any price or no price for each copy that you convey,\r\nand you may offer support or warranty protection for a fee.\r\n\r\n  5. Conveying Modified Source Versions.\r\n\r\n  You may convey a work based on the Program, or the modifications to\r\nproduce it from the Program, in the form of source code under the\r\nterms of section 4, provided that you also meet all of these conditions:\r\n\r\n    a) The work must carry prominent notices stating that you modified\r\n    it, and giving a relevant date.\r\n\r\n    b) The work must carry prominent notices stating that it is\r\n    released under this License and any conditions added under section\r\n    7.  This requirement modifies the requirement in section 4 to\r\n    \"keep intact all notices\".\r\n\r\n    c) You must license the entire work, as a whole, under this\r\n    License to anyone who comes into possession of a copy.  This\r\n    License will therefore apply, along with any applicable section 7\r\n    additional terms, to the whole of the work, and all its parts,\r\n    regardless of how they are packaged.  This License gives no\r\n    permission to license the work in any other way, but it does not\r\n    invalidate such permission if you have separately received it.\r\n\r\n    d) If the work has interactive user interfaces, each must display\r\n    Appropriate Legal Notices; however, if the Program has interactive\r\n    interfaces that do not display Appropriate Legal Notices, your\r\n    work need not make them do so.\r\n\r\n  A compilation of a covered work with other separate and independent\r\nworks, which are not by their nature extensions of the covered work,\r\nand which are not combined with it such as to form a larger program,\r\nin or on a volume of a storage or distribution medium, is called an\r\n\"aggregate\" if the compilation and its resulting copyright are not\r\nused to limit the access or legal rights of the compilation's users\r\nbeyond what the individual works permit.  Inclusion of a covered work\r\nin an aggregate does not cause this License to apply to the other\r\nparts of the aggregate.\r\n\r\n  6. Conveying Non-Source Forms.\r\n\r\n  You may convey a covered work in object code form under the terms\r\nof sections 4 and 5, provided that you also convey the\r\nmachine-readable Corresponding Source under the terms of this License,\r\nin one of these ways:\r\n\r\n    a) Convey the object code in, or embodied in, a physical product\r\n    (including a physical distribution medium), accompanied by the\r\n    Corresponding Source fixed on a durable physical medium\r\n    customarily used for software interchange.\r\n\r\n    b) Convey the object code in, or embodied in, a physical product\r\n    (including a physical distribution medium), accompanied by a\r\n    written offer, valid for at least three years and valid for as\r\n    long as you offer spare parts or customer support for that product\r\n    model, to give anyone who possesses the object code either (1) a\r\n    copy of the Corresponding Source for all the software in the\r\n    product that is covered by this License, on a durable physical\r\n    medium customarily used for software interchange, for a price no\r\n    more than your reasonable cost of physically performing this\r\n    conveying of source, or (2) access to copy the\r\n    Corresponding Source from a network server at no charge.\r\n\r\n    c) Convey individual copies of the object code with a copy of the\r\n    written offer to provide the Corresponding Source.  This\r\n    alternative is allowed only occasionally and noncommercially, and\r\n    only if you received the object code with such an offer, in accord\r\n    with subsection 6b.\r\n\r\n    d) Convey the object code by offering access from a designated\r\n    place (gratis or for a charge), and offer equivalent access to the\r\n    Corresponding Source in the same way through the same place at no\r\n    further charge.  You need not require recipients to copy the\r\n    Corresponding Source along with the object code.  If the place to\r\n    copy the object code is a network server, the Corresponding Source\r\n    may be on a different server (operated by you or a third party)\r\n    that supports equivalent copying facilities, provided you maintain\r\n    clear directions next to the object code saying where to find the\r\n    Corresponding Source.  Regardless of what server hosts the\r\n    Corresponding Source, you remain obligated to ensure that it is\r\n    available for as long as needed to satisfy these requirements.\r\n\r\n    e) Convey the object code using peer-to-peer transmission, provided\r\n    you inform other peers where the object code and Corresponding\r\n    Source of the work are being offered to the general public at no\r\n    charge under subsection 6d.\r\n\r\n  A separable portion of the object code, whose source code is excluded\r\nfrom the Corresponding Source as a System Library, need not be\r\nincluded in conveying the object code work.\r\n\r\n  A \"User Product\" is either (1) a \"consumer product\", which means any\r\ntangible personal property which is normally used for personal, family,\r\nor household purposes, or (2) anything designed or sold for incorporation\r\ninto a dwelling.  In determining whether a product is a consumer product,\r\ndoubtful cases shall be resolved in favor of coverage.  For a particular\r\nproduct received by a particular user, \"normally used\" refers to a\r\ntypical or common use of that class of product, regardless of the status\r\nof the particular user or of the way in which the particular user\r\nactually uses, or expects or is expected to use, the product.  A product\r\nis a consumer product regardless of whether the product has substantial\r\ncommercial, industrial or non-consumer uses, unless such uses represent\r\nthe only significant mode of use of the product.\r\n\r\n  \"Installation Information\" for a User Product means any methods,\r\nprocedures, authorization keys, or other information required to install\r\nand execute modified versions of a covered work in that User Product from\r\na modified version of its Corresponding Source.  The information must\r\nsuffice to ensure that the continued functioning of the modified object\r\ncode is in no case prevented or interfered with solely because\r\nmodification has been made.\r\n\r\n  If you convey an object code work under this section in, or with, or\r\nspecifically for use in, a User Product, and the conveying occurs as\r\npart of a transaction in which the right of possession and use of the\r\nUser Product is transferred to the recipient in perpetuity or for a\r\nfixed term (regardless of how the transaction is characterized), the\r\nCorresponding Source conveyed under this section must be accompanied\r\nby the Installation Information.  But this requirement does not apply\r\nif neither you nor any third party retains the ability to install\r\nmodified object code on the User Product (for example, the work has\r\nbeen installed in ROM).\r\n\r\n  The requirement to provide Installation Information does not include a\r\nrequirement to continue to provide support service, warranty, or updates\r\nfor a work that has been modified or installed by the recipient, or for\r\nthe User Product in which it has been modified or installed.  Access to a\r\nnetwork may be denied when the modification itself materially and\r\nadversely affects the operation of the network or violates the rules and\r\nprotocols for communication across the network.\r\n\r\n  Corresponding Source conveyed, and Installation Information provided,\r\nin accord with this section must be in a format that is publicly\r\ndocumented (and with an implementation available to the public in\r\nsource code form), and must require no special password or key for\r\nunpacking, reading or copying.\r\n\r\n  7. Additional Terms.\r\n\r\n  \"Additional permissions\" are terms that supplement the terms of this\r\nLicense by making exceptions from one or more of its conditions.\r\nAdditional permissions that are applicable to the entire Program shall\r\nbe treated as though they were included in this License, to the extent\r\nthat they are valid under applicable law.  If additional permissions\r\napply only to part of the Program, that part may be used separately\r\nunder those permissions, but the entire Program remains governed by\r\nthis License without regard to the additional permissions.\r\n\r\n  When you convey a copy of a covered work, you may at your option\r\nremove any additional permissions from that copy, or from any part of\r\nit.  (Additional permissions may be written to require their own\r\nremoval in certain cases when you modify the work.)  You may place\r\nadditional permissions on material, added by you to a covered work,\r\nfor which you have or can give appropriate copyright permission.\r\n\r\n  Notwithstanding any other provision of this License, for material you\r\nadd to a covered work, you may (if authorized by the copyright holders of\r\nthat material) supplement the terms of this License with terms:\r\n\r\n    a) Disclaiming warranty or limiting liability differently from the\r\n    terms of sections 15 and 16 of this License; or\r\n\r\n    b) Requiring preservation of specified reasonable legal notices or\r\n    author attributions in that material or in the Appropriate Legal\r\n    Notices displayed by works containing it; or\r\n\r\n    c) Prohibiting misrepresentation of the origin of that material, or\r\n    requiring that modified versions of such material be marked in\r\n    reasonable ways as different from the original version; or\r\n\r\n    d) Limiting the use for publicity purposes of names of licensors or\r\n    authors of the material; or\r\n\r\n    e) Declining to grant rights under trademark law for use of some\r\n    trade names, trademarks, or service marks; or\r\n\r\n    f) Requiring indemnification of licensors and authors of that\r\n    material by anyone who conveys the material (or modified versions of\r\n    it) with contractual assumptions of liability to the recipient, for\r\n    any liability that these contractual assumptions directly impose on\r\n    those licensors and authors.\r\n\r\n  All other non-permissive additional terms are considered \"further\r\nrestrictions\" within the meaning of section 10.  If the Program as you\r\nreceived it, or any part of it, contains a notice stating that it is\r\ngoverned by this License along with a term that is a further\r\nrestriction, you may remove that term.  If a license document contains\r\na further restriction but permits relicensing or conveying under this\r\nLicense, you may add to a covered work material governed by the terms\r\nof that license document, provided that the further restriction does\r\nnot survive such relicensing or conveying.\r\n\r\n  If you add terms to a covered work in accord with this section, you\r\nmust place, in the relevant source files, a statement of the\r\nadditional terms that apply to those files, or a notice indicating\r\nwhere to find the applicable terms.\r\n\r\n  Additional terms, permissive or non-permissive, may be stated in the\r\nform of a separately written license, or stated as exceptions;\r\nthe above requirements apply either way.\r\n\r\n  8. Termination.\r\n\r\n  You may not propagate or modify a covered work except as expressly\r\nprovided under this License.  Any attempt otherwise to propagate or\r\nmodify it is void, and will automatically terminate your rights under\r\nthis License (including any patent licenses granted under the third\r\nparagraph of section 11).\r\n\r\n  However, if you cease all violation of this License, then your\r\nlicense from a particular copyright holder is reinstated (a)\r\nprovisionally, unless and until the copyright holder explicitly and\r\nfinally terminates your license, and (b) permanently, if the copyright\r\nholder fails to notify you of the violation by some reasonable means\r\nprior to 60 days after the cessation.\r\n\r\n  Moreover, your license from a particular copyright holder is\r\nreinstated permanently if the copyright holder notifies you of the\r\nviolation by some reasonable means, this is the first time you have\r\nreceived notice of violation of this License (for any work) from that\r\ncopyright holder, and you cure the violation prior to 30 days after\r\nyour receipt of the notice.\r\n\r\n  Termination of your rights under this section does not terminate the\r\nlicenses of parties who have received copies or rights from you under\r\nthis License.  If your rights have been terminated and not permanently\r\nreinstated, you do not qualify to receive new licenses for the same\r\nmaterial under section 10.\r\n\r\n  9. Acceptance Not Required for Having Copies.\r\n\r\n  You are not required to accept this License in order to receive or\r\nrun a copy of the Program.  Ancillary propagation of a covered work\r\noccurring solely as a consequence of using peer-to-peer transmission\r\nto receive a copy likewise does not require acceptance.  However,\r\nnothing other than this License grants you permission to propagate or\r\nmodify any covered work.  These actions infringe copyright if you do\r\nnot accept this License.  Therefore, by modifying or propagating a\r\ncovered work, you indicate your acceptance of this License to do so.\r\n\r\n  10. Automatic Licensing of Downstream Recipients.\r\n\r\n  Each time you convey a covered work, the recipient automatically\r\nreceives a license from the original licensors, to run, modify and\r\npropagate that work, subject to this License.  You are not responsible\r\nfor enforcing compliance by third parties with this License.\r\n\r\n  An \"entity transaction\" is a transaction transferring control of an\r\norganization, or substantially all assets of one, or subdividing an\r\norganization, or merging organizations.  If propagation of a covered\r\nwork results from an entity transaction, each party to that\r\ntransaction who receives a copy of the work also receives whatever\r\nlicenses to the work the party's predecessor in interest had or could\r\ngive under the previous paragraph, plus a right to possession of the\r\nCorresponding Source of the work from the predecessor in interest, if\r\nthe predecessor has it or can get it with reasonable efforts.\r\n\r\n  You may not impose any further restrictions on the exercise of the\r\nrights granted or affirmed under this License.  For example, you may\r\nnot impose a license fee, royalty, or other charge for exercise of\r\nrights granted under this License, and you may not initiate litigation\r\n(including a cross-claim or counterclaim in a lawsuit) alleging that\r\nany patent claim is infringed by making, using, selling, offering for\r\nsale, or importing the Program or any portion of it.\r\n\r\n  11. Patents.\r\n\r\n  A \"contributor\" is a copyright holder who authorizes use under this\r\nLicense of the Program or a work on which the Program is based.  The\r\nwork thus licensed is called the contributor's \"contributor version\".\r\n\r\n  A contributor's \"essential patent claims\" are all patent claims\r\nowned or controlled by the contributor, whether already acquired or\r\nhereafter acquired, that would be infringed by some manner, permitted\r\nby this License, of making, using, or selling its contributor version,\r\nbut do not include claims that would be infringed only as a\r\nconsequence of further modification of the contributor version.  For\r\npurposes of this definition, \"control\" includes the right to grant\r\npatent sublicenses in a manner consistent with the requirements of\r\nthis License.\r\n\r\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\r\npatent license under the contributor's essential patent claims, to\r\nmake, use, sell, offer for sale, import and otherwise run, modify and\r\npropagate the contents of its contributor version.\r\n\r\n  In the following three paragraphs, a \"patent license\" is any express\r\nagreement or commitment, however denominated, not to enforce a patent\r\n(such as an express permission to practice a patent or covenant not to\r\nsue for patent infringement).  To \"grant\" such a patent license to a\r\nparty means to make such an agreement or commitment not to enforce a\r\npatent against the party.\r\n\r\n  If you convey a covered work, knowingly relying on a patent license,\r\nand the Corresponding Source of the work is not available for anyone\r\nto copy, free of charge and under the terms of this License, through a\r\npublicly available network server or other readily accessible means,\r\nthen you must either (1) cause the Corresponding Source to be so\r\navailable, or (2) arrange to deprive yourself of the benefit of the\r\npatent license for this particular work, or (3) arrange, in a manner\r\nconsistent with the requirements of this License, to extend the patent\r\nlicense to downstream recipients.  \"Knowingly relying\" means you have\r\nactual knowledge that, but for the patent license, your conveying the\r\ncovered work in a country, or your recipient's use of the covered work\r\nin a country, would infringe one or more identifiable patents in that\r\ncountry that you have reason to believe are valid.\r\n\r\n  If, pursuant to or in connection with a single transaction or\r\narrangement, you convey, or propagate by procuring conveyance of, a\r\ncovered work, and grant a patent license to some of the parties\r\nreceiving the covered work authorizing them to use, propagate, modify\r\nor convey a specific copy of the covered work, then the patent license\r\nyou grant is automatically extended to all recipients of the covered\r\nwork and works based on it.\r\n\r\n  A patent license is \"discriminatory\" if it does not include within\r\nthe scope of its coverage, prohibits the exercise of, or is\r\nconditioned on the non-exercise of one or more of the rights that are\r\nspecifically granted under this License.  You may not convey a covered\r\nwork if you are a party to an arrangement with a third party that is\r\nin the business of distributing software, under which you make payment\r\nto the third party based on the extent of your activity of conveying\r\nthe work, and under which the third party grants, to any of the\r\nparties who would receive the covered work from you, a discriminatory\r\npatent license (a) in connection with copies of the covered work\r\nconveyed by you (or copies made from those copies), or (b) primarily\r\nfor and in connection with specific products or compilations that\r\ncontain the covered work, unless you entered into that arrangement,\r\nor that patent license was granted, prior to 28 March 2007.\r\n\r\n  Nothing in this License shall be construed as excluding or limiting\r\nany implied license or other defenses to infringement that may\r\notherwise be available to you under applicable patent law.\r\n\r\n  12. No Surrender of Others' Freedom.\r\n\r\n  If conditions are imposed on you (whether by court order, agreement or\r\notherwise) that contradict the conditions of this License, they do not\r\nexcuse you from the conditions of this License.  If you cannot convey a\r\ncovered work so as to satisfy simultaneously your obligations under this\r\nLicense and any other pertinent obligations, then as a consequence you may\r\nnot convey it at all.  For example, if you agree to terms that obligate you\r\nto collect a royalty for further conveying from those to whom you convey\r\nthe Program, the only way you could satisfy both those terms and this\r\nLicense would be to refrain entirely from conveying the Program.\r\n\r\n  13. Use with the GNU Affero General Public License.\r\n\r\n  Notwithstanding any other provision of this License, you have\r\npermission to link or combine any covered work with a work licensed\r\nunder version 3 of the GNU Affero General Public License into a single\r\ncombined work, and to convey the resulting work.  The terms of this\r\nLicense will continue to apply to the part which is the covered work,\r\nbut the special requirements of the GNU Affero General Public License,\r\nsection 13, concerning interaction through a network will apply to the\r\ncombination as such.\r\n\r\n  14. Revised Versions of this License.\r\n\r\n  The Free Software Foundation may publish revised and/or new versions of\r\nthe GNU General Public License from time to time.  Such new versions will\r\nbe similar in spirit to the present version, but may differ in detail to\r\naddress new problems or concerns.\r\n\r\n  Each version is given a distinguishing version number.  If the\r\nProgram specifies that a certain numbered version of the GNU General\r\nPublic License \"or any later version\" applies to it, you have the\r\noption of following the terms and conditions either of that numbered\r\nversion or of any later version published by the Free Software\r\nFoundation.  If the Program does not specify a version number of the\r\nGNU General Public License, you may choose any version ever published\r\nby the Free Software Foundation.\r\n\r\n  If the Program specifies that a proxy can decide which future\r\nversions of the GNU General Public License can be used, that proxy's\r\npublic statement of acceptance of a version permanently authorizes you\r\nto choose that version for the Program.\r\n\r\n  Later license versions may give you additional or different\r\npermissions.  However, no additional obligations are imposed on any\r\nauthor or copyright holder as a result of your choosing to follow a\r\nlater version.\r\n\r\n  15. Disclaimer of Warranty.\r\n\r\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\r\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\r\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\r\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\r\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\r\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\r\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\r\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\r\n\r\n  16. Limitation of Liability.\r\n\r\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\r\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\r\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\r\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\r\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\r\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\r\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\r\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\r\nSUCH DAMAGES.\r\n\r\n  17. Interpretation of Sections 15 and 16.\r\n\r\n  If the disclaimer of warranty and limitation of liability provided\r\nabove cannot be given local legal effect according to their terms,\r\nreviewing courts shall apply local law that most closely approximates\r\nan absolute waiver of all civil liability in connection with the\r\nProgram, unless a warranty or assumption of liability accompanies a\r\ncopy of the Program in return for a fee.\r\n\r\n                     END OF TERMS AND CONDITIONS\r\n\r\n            How to Apply These Terms to Your New Programs\r\n\r\n  If you develop a new program, and you want it to be of the greatest\r\npossible use to the public, the best way to achieve this is to make it\r\nfree software which everyone can redistribute and change under these terms.\r\n\r\n  To do so, attach the following notices to the program.  It is safest\r\nto attach them to the start of each source file to most effectively\r\nstate the exclusion of warranty; and each file should have at least\r\nthe \"copyright\" line and a pointer to where the full notice is found.\r\n\r\n    <one line to give the program's name and a brief idea of what it does.>\r\n    Copyright (C) <year>  <name of author>\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nAlso add information on how to contact you by electronic and paper mail.\r\n\r\n  If the program does terminal interaction, make it output a short\r\nnotice like this when it starts in an interactive mode:\r\n\r\n    <program>  Copyright (C) <year>  <name of author>\r\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\r\n    This is free software, and you are welcome to redistribute it\r\n    under certain conditions; type `show c' for details.\r\n\r\nThe hypothetical commands `show w' and `show c' should show the appropriate\r\nparts of the General Public License.  Of course, your program's commands\r\nmight be different; for a GUI interface, you would use an \"about box\".\r\n\r\n  You should also get your employer (if you work as a programmer) or school,\r\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\r\nFor more information on this, and how to apply and follow the GNU GPL, see\r\n<http://www.gnu.org/licenses/>.\r\n\r\n  The GNU General Public License does not permit incorporating your program\r\ninto proprietary programs.  If your program is a subroutine library, you\r\nmay consider it more useful to permit linking proprietary applications with\r\nthe library.  If this is what you want to do, use the GNU Lesser General\r\nPublic License instead of this License.  But first, please read\r\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.93359375,
          "content": "<h1 align=\"center\">ElectronBot: Mini Desktop Robot</h1>\n<div align=\"center\">\n\n\n<a href=\"https://github.com/peng-zhihui/ElectronBot/stargazers\"><img src=\"https://img.shields.io/github/stars/peng-zhihui/ElectronBot\" alt=\"Stars Badge\"/></a>\n<a href=\"https://github.com/peng-zhihui/ElectronBot/network/members\"><img src=\"https://img.shields.io/github/forks/peng-zhihui/ElectronBot\" alt=\"Forks Badge\"/></a>\n<a href=\"https://github.com/peng-zhihui/ElectronBot/pulls\"><img src=\"https://img.shields.io/github/issues-pr/peng-zhihui/ElectronBot\" alt=\"Pull Requests Badge\"/></a>\n<a href=\"https://github.com/peng-zhihui/ElectronBot/issues\"><img src=\"https://img.shields.io/github/issues/peng-zhihui/ElectronBot\" alt=\"Issues Badge\"/></a>\n<a href=\"https://github.com/peng-zhihui/ElectronBot/graphs/contributors\"><img alt=\"GitHub contributors\" src=\"https://img.shields.io/github/contributors/peng-zhihui/ElectronBot?color=2b9348\"></a>\n<a href=\"https://github.com/peng-zhihui/ElectronBot/blob/master/LICENSE\"><img src=\"https://img.shields.io/github/license/peng-zhihui/ElectronBot?color=2b9348\" alt=\"License Badge\"/></a>\n\n<a href=\"https://github.com/peng-zhihui/ElectronBot/blob/main/enREADME.md\"><img src=\"https://img.shields.io/static/v1?label=&labelColor=505050&message=English README 英文自述文件&color=%230076D6&style=flat&logo=google-chrome&logoColor=green\" alt=\"website\"/></a>\n\n<a href=\"https://www.youtube.com/watch?v=FmKTiH5Lca4\"><img src=\"https://img.shields.io/youtube/views/FmKTiH5Lca4?style=social\" alt=\"YouTube Video Views\"/></a>\n<a href=\"https://www.youtube.com/channel/UCBAdGeil51Iw4y29Sh9Y7hA\"><img src=\"https://img.shields.io/youtube/channel/subscribers/UCBAdGeil51Iw4y29Sh9Y7hA?style=social\" alt=\"YouTube Channel Subscribers\"/></a>\n  \n<!-- <img src=\"http://hits.dwyl.com/peng-zhihui/ElectronBot.svg\" alt=\"Hits Badge\"/> -->\n\n<i>喜欢这个项目吗？请考虑给 Star ⭐️ 以帮助改进！</i>\n\n</div>\n\n---\n\n> 本项目是一个桌面级小机器工具人，外观设计的灵感来源是WALL-E里面的EVE~机器人具备USB通信显示画面功能，具备6个自由度（手部roll、pitch，颈部，腰部各一个），使用自己修改的特制舵机支持关节角度回传。\n>\n> 本项目提供了配套的全套开发资料和对应SDK以供二次开发，SDK使用说明见后文。\n>\n> **视频介绍**：[【自制】我做了个能动的 电 脑 配 件！【软核】_哔哩哔哩](https://www.bilibili.com/video/BV1ka411b76m/)\n>\n> **Video** : [I made a cute mini desktop robot ! - YouTube](https://www.youtube.com/watch?v=F29vrvUwqS4)\n\n\n\n**注意：Issues里面是讨论项目开发相关话题的，不要在里面发无意义的消息，不然watch了仓库的人都会收到通知邮件会给别人造成困扰的！！！灌水可以在仓库的Discuss里讨论！**\n\n![](/5.Docs/Images/robot1.jpg)\n\n---\n\n### 更新说明：\n\n**22.4.5更新：**\n\n* 添加单独的USB通信功能测试工程以及预编译文件，在`6.Tests\\TestDisplayUSB\\_Released`目录；使用方法是直接给STM32F4烧录hex文件，然后直接在电脑端运行`Sample.exe`，硬件正常的话屏幕会显示文件夹里的视频。\n* 上述预编译文件的源码和固件也在文件夹里有提供，相当于一个最小测试工程，可以自己查看代码进行调试。\n* 注意在6个舵机没有测试验证成功之前，调试代码不要使用舵机收发指令的功能，不然总线会阻塞导致程序卡住，推荐的方式是先单独一个一个功能调试，完成了之后再整合做联调。\n\n> 安装教程可以参考：\n>\n> [数码甲鱼的简单生活](https://space.bilibili.com/1668139036) 同学的胎教级教程：https://www.bilibili.com/video/BV1sY4y1Y7t6\n>\n> [绿荫阿广](https://space.bilibili.com/25228512)同学的安装视频 ：https://www.bilibili.com/video/BV1oY4y1v7oN\n\n**22.4.17更新：**\n\n* 添加语音识别版电子，感谢[jinsonli/ElectronBot-Voice ](https://github.com/jinsonli/ElectronBot-Voice)的分享，演示效果可以看这个视频：[我复刻了电脑配件机器人electronbot【语音版】](https://www.bilibili.com/video/BV18a411v7JS)\n* 视频中演示的舵机调试工具已添加到本仓库\n\n### 1.项目文件说明 \n\n#### 1.1 Hardware\n\nHardware文件夹内是ElectronBot里面用到的所有电路的原理图和PCB文件，提供Altium Designer格式的源文件以及Gerber格式的光绘文件用于提供给厂家进行直接加工。\n\n一共有如下几块板子：\n\n* **ElectronBot**：头部的主控板，包含主控MCUSTM32F405RGT6，圆形屏幕GC9A01，USB-HS的PHY芯片USB3300，以及SD卡。\n* **SensorBoard**：肚子里的传感器板子，包含一个手势传感器，一个USB-HUB芯片，5个I2C舵机的接口，一个MPU6050加速度计&陀螺仪等（USB摄像头也是连接到这个板子的）。\n\n* **BaseConnector**：底座上的USB Type-C插座，通过8-Pin的FFC排线和SensorBoard连接，因为机器人本体需要旋转所以使用了柔性排线。\n* **ServoDrive**：用于魔改舵机替换舵机驱动板的电路，通过I2C总线接口和SensorBoard以及头部主控连接。\n\n* **ServoDrive-DK**：同上，但是把PCB的触点接口换成了接插件，方便调试，调试完了下载代码到上面的板子（因为体积太小所以上面的板子没有下载口接插件，所以不方便调试，这里单独提供一个DK版本）。\n\n#### 1.2 Firmware\n\nFirmware中提供了上面所有板子的固件源码，主要包含以下两个工程：\n\n* **ElectronBot-fw**：头部主控板的固件代码，用于驱动圆形屏幕，实现USB-CDC协议的自定义设备，以及进行舵机控制。\n* **ServoDrive-fw**：ServoDrive板子的固件，包含舵机的电位器ADC采样，I2C从机通信和协议解析，电机控制的PWM输出，以及PID闭环算法实现。\n* **ServoDrive-fw-LL**：也是ServoDrive板子的固件，与上面不同的是改用LL库而不是HAL库实现，所以Flash占用会小一些，可以放进16K的MCU，大家根据自己的情况选择需要的固件。\n\n工程都是基于STM32HAL实现的，所以提供了对应的`.ioc`文件，可以自行用STM32CubeMX打开，生成对应的keil或者STM32IDE工程文件。当让也可以像我一样，用CLion进行编译和下载，把CLion变成STM32的IDE的方法参考我之前发的一篇教程：[配置CLion用于STM32开发【优雅の嵌入式开发】](https://zhuanlan.zhihu.com/p/145801160) 。\n\n#### 1.3 Software\n\nSoftware中提供了视频里演示的上位机软件ElectronStudio的Unity工程源码，以及SDK库和SDK源文件，库的层级关系由下至上分别是：\n\n`ElectronBotSDK-LowLevel` -> `ElectronBotSDK-Player` -> `ElectronBotSDK-UnityBridge` -> `Electron-Studio`\n\n> SDK的使用方法见后文。\n\n此外文件夹里还包含了BotDriver也就是ElectronBot连接电脑需要安装的USB驱动文件，安装方法是在设备管理器里右键更新驱动，然后选择自定义目录导航到这个文件夹即可安装。\n\n> 安装过程需要禁用Windows的强制驱动签名（没钱给M$买签名），禁用方法根据你的操作系统版本有不同，可以百度一下。\n\n#### 1.4 CAD-Model\n\n文件夹中包含了ElectronBot的结构设计图纸，`.step`通用格式可以在所有软件里打开编辑；同时为了满足有的同学想要Fusion360里面的原始工程，我也共享了`.f3d`格式源文件，源文件里包含了完整的编辑建模时间轴。\n\n共享连接：https://a360.co/3t6CUMS\n\n此目录下也包含了视频里演示的[oooooohmygosh](https://space.bilibili.com/38053181)同学设计的表情包动画，其中每个表情的动画都包含了三个片段：`进入-循环-退出`，进入和退出是可以和其他动画进行无缝衔接的，因此可以方便用代码调用这些表情包实现很多效果。\n\n> 表情文件需要修改为英文名和路径后使用。\n\n我把视频结尾提到的收纳盒也上传了，可以用FDM打印，5%填充即可。\n\n![](5.Docs/Images/robot8.jpg)\n\n#### 1.5 Docs\n\n相关的参考文件，包括芯片的Datasheet等。\n\n此目录下还有个_LargeFiles文件夹，是软件过程项目中依赖的一些库（比如OpenCV）因为DLL比较大超过了100MB，GitHub需要开启LFS才能提交，而我不想开启LFS，因此单独拿出来压缩了提交到仓库，编译工程的时候需要把这些库放到对应工程目录下，具体的路径见 `_path.txt`。\n\n### 2.硬件架构说明\n\n机器人的硬件分为**结构**和**电路**。\n\n#### 2.1 结构设计\n\n结构设计方面大家可以研究3D图纸，值得注意的点如下：\n\n**主要部件的加工方式？**\n\n* 我是用3D打印加工的，因为包含了齿轮等精密部件，传统FDM打印的精度可能不太理想，光固化是可以的，但是支撑问题可能导致打印机表面不平整，而且LCD光固化的零件强度不太够。所以推荐使用HP尼龙打印，可以去嘉立创（三维猴）打印，价格这几个零件加起来应该是200-300元左右。\n* 也用到了几个轴承和一些特殊的螺丝，轴承型号的话肩膀关节的型号是`6x10x3mm`，腰部轴承型号是`25x32x4mm`。特殊螺丝是肩膀roll自由度的推杆，使用了`M2x25mm`的半牙螺丝。\n\n* 手臂推杆还用到了一个小挡块，这个挡块不用打印加工，直接用一段橡胶电线剪下一小段即可（视频里有演示），这个挡块是需要和推杆的螺丝固定到一起的，可以使用502粘合。\n\n**手臂的驱动原理？**\n\n* 视频里其实演示了，我自己设计了一个比较巧妙的驱动方式，pitch方向运动很好理解就是齿轮传动，roll方向使用了T型推杆如下：\n\n  ![](/5.Docs/Images/robot2.jpg)\n\n* 推杆被M2螺丝的帽以及一个挡块限制住，当黄色的组件转动的时候，带动推杆左右移动，而推杆的另一端在手臂组件内由一个导槽限制运动方向从而将动力传递到转轴，此方案的力矩是可以双向传递的\n\n  ![](/5.Docs/Images/robot3.jpg)\n\n**脸部的透明玻璃如何制作的**\n\n* tb搜索`表蒙子`，我用的`31.5mm`直径的。\n\n  ![](5.Docs/Images/robot6.jpg)\n\n**安装顺序？**\n\n可以参考这位[绿荫阿广](https://space.bilibili.com/25228512)同学的安装视频 ：https://www.bilibili.com/video/BV1oY4y1v7oN\n\n* 安装过程中还有一点值得注意的是，因为机身体积太极限，几个舵机的安装架有的是需要剪短一边的不然塞不下，然后如果自己的打印机比较脆螺丝固定不牢的话，也可以使用热熔胶固定。\n* 另外手臂的推杆可以稍微打磨一下并加上润滑脂使其推动更顺畅。\n\n#### 2.2 电路设计\n\n电路没啥好分析的，直接看原理图吧。\n\n值得提一下的是USB-HUB的拓扑，如下：\n\n![](/5.Docs/Images/robot4.jpg)\n\n**关于芯片选型？**\n\n* 主控的STM32F4，这个不可替换，因为F4以下的型号不支持USB-HS外接PHY。\n* 舵机驱动的STM32F0，这个可以替换，而且建议有能力的同学替换，因为我项目中用到的STM32F042P6芯片比较贵（买的十多元一片），而舵机驱动对于芯片的性能要求没那么高，完全可以用STM8之类的8位MCU替代，所以大家可以参考我的固件源码寻求能够替换的MCU改进一下方案。\n* 替换STM32F0的MCU需要支持以下特性：带一个ADC采样、带两路PWM输出、带一个I2C接口，Flash和SRAM大小根据我的代码需要32K和4K或者更大（我固件用了HAL库以及C++特性，如果你可以基于LL库或者不适用C++的话应该需求还可以小一半）。\n\n**关于烧录方式？**\n\n* 使用JLink、STLink之类的调试器烧录，注意驱动板因为体积限制只留了三个烧录触点，需要使用`SH1.0`的接插件接触进行烧写。\n\n**关于舵机的改造？**\n\n* 通常的RC-Servo都是使用电位器进行绝对角度的测量的，因此我在驱动板中也是使用ADC读取电位器的电压值转换成角度反馈，而驱动芯片使用了我找到的封装最小的一个芯片`FM116B`。大家改造舵机的时候，注意区分电机两根接线的方向，如果调试发现电机不闭环的话，可能需要交换一下接线顺序。\n\n* 另外那个小的3g舵机的改造需要把盖子拆开去掉（空间实在是太小加了盖子驱动塞不进去），然后去掉了后盖的舵机需要换成M1x10mm的螺丝进行固定不然会散架的。\n\n  > 其实最理想的情况是找舵机厂家定制一个这样的迷你舵机，但是因为我一个人小批量做人家肯定不接单的，大家有渠道的话可以尝试一下。\n\n**关于摄像头选型？**\n\n* 我是用的是这款：https://item.taobao.com/item.htm?id=567717780577\n\n  ![](/5.Docs/Images/robot5.jpg)\n\n* 当然大家可以根据需要自己替换别的USB摄像头（黑白的、高帧率的），只要塞得下就行，摄像头是直接拆了接线焊在SensorBoard上的 。\n\n  > 值得注意的是，**我用的USB-HUB芯片的1拖4的**，目前使用了三个口，还剩一个其实可以再集成一个USB麦克风，这样ElectronBot也能当作电脑的麦克风使用了。 \n\n### 3.软件架构说明\n\n#### 3.1 固件代码\n\n固件代码的细节和流程说明比较繁琐，晚点我慢慢补充吧，总之可以直接基于前面提到的方式进行编译下载，然后慢慢研究源码。\n\n> STM32F4的源码如果通过`.ioc`重新生成工程的话，记得要把USB相关的几个文件预先备份，生成完代码后再替换回我原来的文件，因为CubeMX会覆盖生成把相关代码修改掉（我实际是使用Git的文件版本回退操作的 ）。\n\n#### 3.2 舵机I2C协议\n\n魔改后的舵机通过I2C接口和控制板进行通信，STM32F4的控制板为主机，舵机为从机。通信的过程始终是主机发起的，主机首先下发位置、参数等指令，然后即时取回相关数据完成一个通信来回。\n\n每个舵机作为从机接收两个地址的指令：**自己的ID号**，以及**0号广播**。广播用于在没有给舵机设置地址的时候作为通配地址使用（比如你刚烧写完舵机固件，此时舵机的Flash是没有储存自己的ID的，只能通过0号地址通信）。\n\n**值得注意的是：舵机和主机的上电需要有先后顺序，一定要先让从机初始化完成开始监听数据，再让主机发送指令！**\n\n> 如果主机发送指令的时候从机不响应，或者多个舵机地址相同同时响应，都可能引起通信错误，因此需要保证上述的顺序。\n>\n> 由于硬件上主机和舵机上电都是同时的，所以在主机的固件代码中，有一个延时2S的代码（其实可以不用那么久），就是等待舵机都上电初始化完成再开始通信。\n>\n> 调试的时候，一个舵机一个舵机调试，注释掉其他未连接的舵机的通信代码，不然也会造成轮询等待超时。\n\n关于舵机的指令含义，感谢 **[leazer](https://github.com/leazer)** 同学在Issues整理的表格：\n\n![](https://pengzhihui-markdown.oss-cn-shanghai.aliyuncs.com/img/20220322010150.png)\n\n> 指令后续可能会更新。\n\n#### 3.3 SDK使用说明\n\nSDK架构设计如图：\n\n![](/5.Docs/Images/robot7.jpg)\n\n具体的使用方法可以参考SDK工程中给出的`sample.cpp`，我是用CLion+MSVC工具链编译的，大家也可以把源码复制到自己的Visual Studio工程编译。\n\n`ElectronBotSDK-UnityBridge`工程编译生成的DLL文件需要拷贝到`Unity\\ElectronBot-Studio\\Assets\\Plugins`目录下，用于连接本地的C++代码和Unity中C#环境。\n\n> **对了，注意ElectronStudio中目前选择图片视频文件还不支持中文路径！**\n\n关于SDK的具体实现细节可以阅读源码，我晚点有空也会再更新描述。\n\n### 有的问题在Issues里面已经解答了，问问题之前先翻一下open/closed的Issues。\n\n\n\n> 感谢以下项目：\n>\n> [opencv/opencv: Open Source Computer Vision Library (github.com)](https://github.com/opencv/opencv)\n>\n> https://github.com/CMU-Perceptual-Computing-Lab/openpose\n>\n> [Lexikos/AutoHotkey_L: AutoHotkey - macro-creation and automation-oriented scripting utility for Windows. (github.com)](https://github.com/Lexikos/AutoHotkey_L)\n>\n> https://blog.csdn.net/pq8888168/article/details/85781908\n\n"
        },
        {
          "name": "enREADME.md",
          "type": "blob",
          "size": 19.015625,
          "content": "<h1 align=\"center\">ElectronBot: Mini Desktop Robot</h1>\n<div align=\"center\">\n\n\n<i>This project is a desktop-level small robot tool. The inspiration for the appearance design is the EVE~ robot in WALL-E, which has the function of USB communication and display screen, and has 6 degrees of freedom (roll, pitch, neck, waist, etc.). A), use your own modified special servo to support joint angle return.</i>\n\n<a href=\"https://github.com/peng-zhihui/ElectronBot/stargazers\"><img src=\"https://img.shields.io/github/stars/peng-zhihui/ElectronBot\" alt=\"Stars Badge\"/></a>\n<a href=\"https://github.com/peng-zhihui/ElectronBot/network/members\"><img src=\"https://img.shields.io/github/forks/peng-zhihui/ElectronBot\" alt=\"Forks Badge\"/></a>\n<a href=\"https://github.com/peng-zhihui/ElectronBot/pulls\"><img src=\"https://img.shields.io/github/issues-pr/peng-zhihui/ElectronBot\" alt=\"Pull Requests Badge\"/></a>\n<a href=\"https://github.com/peng-zhihui/ElectronBot/issues\"><img src=\"https://img.shields.io/github/issues/peng-zhihui/ElectronBot\" alt=\"Issues Badge\"/></a>\n<a href=\"https://github.com/peng-zhihui/ElectronBot/graphs/contributors\"><img alt=\"GitHub contributors\" src=\"https://img.shields.io/github/contributors/peng-zhihui/ElectronBot?color=2b9348\"></a>\n<a href=\"https://github.com/peng-zhihui/ElectronBot/blob/master/LICENSE\"><img src=\"https://img.shields.io/github/license/peng-zhihui/ElectronBot?color=2b9348\" alt=\"License Badge\"/></a>\n\n<a href=\"https://github.com/peng-zhihui/ElectronBot\"><img src=\"https://img.shields.io/static/v1?label=&labelColor=505050&message=Chinese 中文自述文件&color=%230076D6&style=flat&logo=google-chrome&logoColor=green\" alt=\"website\"/></a>\n\n<a href=\"https://www.youtube.com/watch?v=FmKTiH5Lca4\"><img src=\"https://img.shields.io/youtube/views/FmKTiH5Lca4?style=social\" alt=\"YouTube Video Views\"/></a>\n<a href=\"https://www.youtube.com/channel/UCBAdGeil51Iw4y29Sh9Y7hA\"><img src=\"https://img.shields.io/youtube/channel/subscribers/UCBAdGeil51Iw4y29Sh9Y7hA?style=social\" alt=\"YouTube Channel Subscribers\"/></a>\n  \n<!-- <img src=\"http://hits.dwyl.com/peng-zhihui/ElectronBot.svg\" alt=\"Hits Badge\"/> -->\n\n<i>Loved the project? Please consider giving a Star ⭐️ to help it improve!</i>\n\n</div>\n\n\n\n---\n\n> This project provides a complete set of development materials and corresponding SDK for secondary development. Please refer to the following for SDK usage instructions.\n>\n> **Video introduction**: [[Homemade] I made an active computer accessory! [Soft Core]_bilibili](https://www.bilibili.com/video/BV1ka411b76m/)\n>\n> **Video** : [I made a cute mini desktop robot ! - YouTube](https://www.youtube.com/watch?v=F29vrvUwqS4)\n\n\n\n**Note: Issues discuss topics related to project development, don't send meaningless messages in it, otherwise people who watch the warehouse will receive notification emails, which will cause trouble to others! ! ! Irrigation can be discussed in Discuss in the warehouse! **\n\n![](/5.Docs/Images/robot1.jpg)\n\n---\n\n### Release Notes:\n\n**22.4.5 update:**\n\n* Add a separate USB communication function test project and precompiled files in the `6.Tests\\TestDisplayUSB\\_Released` directory; the method of use is to directly burn the hex file to the STM32F4, and then run `Sample.exe` directly on the computer. Normally, the screen will display the videos in the folder.\n* The source code and firmware of the above precompiled files are also provided in the folder, which is equivalent to a minimum test project, and you can view the code yourself for debugging.\n* Note that before the 6 servos have not been successfully tested and verified, the debugging code should not use the function of the servos to send and receive commands, otherwise the bus will be blocked and the program will be stuck. Joint debugging.\n\n> For installation tutorials, please refer to:\n>\n> [The Simple Life of Digital Turtle](https://space.bilibili.com/1668139036) Prenatal education-level tutorial for students: https://www.bilibili.com/video/BV1sY4y1Y7t6\n>\n> [Green Shadow Aguang](https://space.bilibili.com/25228512) The installation video of classmates: https://www.bilibili.com/video/BV1oY4y1v7oN\n\n**Updated on 22.4.17:**\n\n* Added voice recognition version of ElectronBot, thanks to [jinsonli/ElectronBot-Voice ](https://github.com/jinsonli/ElectronBot-Voice) for sharing, you can see this video for the demonstration effect: [I copied the computer accessories robot electronbot [ Voice version]] (https://www.bilibili.com/video/BV18a411v7JS)\n* The servo debugging tool demonstrated in the video has been added to this repository\n\n### 1. Project file description\n\n#### 1.1 Hardware\n\nIn the Hardware folder are the schematic diagrams and PCB files of all circuits used in ElectronBot. Source files in Altium Designer format and light drawing files in Gerber format are provided for direct processing by manufacturers.\n\nThere are a total of the following boards:\n\n* **ElectronBot**: The main control board of the head, including the main control MCUSTM32F405RGT6, the circular screen GC9A01, the USB-HS PHY chip USB3300, and the SD card.\n* **SensorBoard**: The sensor board in the stomach, including a gesture sensor, a USB-HUB chip, 5 I2C servo interfaces, an MPU6050 accelerometer & gyroscope, etc. (the USB camera is also connected to this board) .\n\n* **BaseConnector**: The USB Type-C socket on the base is connected to the SensorBoard through an 8-Pin FFC cable. Because the robot body needs to be rotated, a flexible cable is used.\n* **ServoDrive**: The circuit used to replace the servo drive board with the magic modified servo. It is connected to the SensorBoard and the head master through the I2C bus interface.\n\n* **ServoDrive-DK**: Same as above, but the contact interface of the PCB is replaced by a connector, which is convenient for debugging. After debugging, download the code to the above board (because the size is too small, the above board does not have a download port connector, So it is not convenient to debug, here is a separate DK version).\n\n#### 1.2 Firmware\n\nFirmware provides the firmware source code of all the above boards, mainly including the following two projects:\n\n* **ElectronBot-fw**: The firmware code of the main control board of the head, used to drive the circular screen, implement the custom device of the USB-CDC protocol, and control the servo.\n* **ServoDrive-fw**: ServoDrive board firmware, including servo potentiometer ADC sampling, I2C slave communication and protocol analysis, motor control PWM output, and PID closed-loop algorithm implementation.\n* **ServoDrive-fw-LL**: It is also the firmware of the ServoDrive board. The difference from the above is that the LL library is used instead of the HAL library, so the Flash footprint will be smaller and can be put into a 16K MCU. Select the desired firmware depending on the situation.\n\nThe projects are all implemented based on STM32HAL, so the corresponding `.ioc` file is provided, which can be opened with STM32CubeMX by yourself to generate the corresponding keil or STM32IDE project file. When you can also compile and download with CLion like me, and turn CLion into an IDE for STM32, please refer to a tutorial I posted before: [Configuring CLion for STM32 Development [Elegant Embedded Development]](https ://zhuanlan.zhihu.com/p/145801160).\n\n#### 1.3 Software\n\nThe software provides the Unity project source code of the host computer software ElectronStudio demonstrated in the video, as well as the SDK library and SDK source files. The hierarchical relationship of the library from bottom to top is:\n\n`ElectronBotSDK-LowLevel` -> `ElectronBotSDK-Player` -> `ElectronBotSDK-UnityBridge` -> `Electron-Studio`\n\n> See below for how to use the SDK.\n\nIn addition, the folder also contains BotDriver, which is the USB driver file that ElectronBot needs to install to connect to the computer. The installation method is to right-click in the device manager to update the driver, and then select the custom directory to navigate to this folder to install.\n\n> During the installation process, you need to disable the mandatory driver signature of Windows (there is no money to buy a signature for M$). The method of disabling is different according to your operating system version. You can check it on Baidu.\n\n#### 1.4 CAD-Model\n\nThe folder contains the structural design drawings of ElectronBot. The `.step` general format can be opened and edited in all software; at the same time, in order to satisfy some students who want the original project in Fusion360, I also shared the `.f3d` format source file , the source file contains the complete editing modeling timeline.\n\nShared Connection: https://a360.co/3t6CUMS\n\nThis directory also contains the emoji animations designed by students [oooooohmygosh](https://space.bilibili.com/38053181) demonstrated in the video. Each emoji animation contains three segments: `Enter-loop -Exit`, entry and exit can be seamlessly connected with other animations, so it is convenient to call these emoticons with code to achieve many effects.\n\n> The emoji file needs to be modified to English name and path before use.\n\nI also uploaded the storage box mentioned at the end of the video, which can be printed with FDM and filled with 5%.\n\n![](5.Docs/Images/robot8.jpg)\n\n#### 1.5 Docs\n\nRelevant reference documents, including the chip's Datasheet, etc.\n\nThere is also a _LargeFiles folder in this directory, which is some libraries (such as OpenCV) that the software process project depends on. Because the DLL is larger than 100MB, GitHub needs to open LFS to submit, and I don't want to open LFS, so I take it out and compress it separately In order to submit to the warehouse, you need to put these libraries in the corresponding project directory when compiling the project. For the specific path, see `_path.txt`.\n\n### 2. Hardware Architecture Description\n\nThe hardware of the robot is divided into **structure** and **circuit**.\n\n#### 2.1 Structural Design\n\nIn terms of structural design, you can study 3D drawings. The points worth noting are as follows:\n\n**How ​​the main components are processed? **\n\n* I used 3D printing, because it contains precision parts such as gears, the accuracy of traditional FDM printing may not be ideal, light curing is possible, but the support problem may cause the surface of the printer to be uneven, and the strength of LCD light-cured parts Not enough. Therefore, it is recommended to use HP nylon printing, you can go to Jia Li Chuang (3D monkey) to print, the price of these parts should add up to about 200-300 yuan.\n* Several bearings and some special screws are also used. The bearing model is `6x10x3mm` for the shoulder joint, and the model for the waist bearing is `25x32x4mm`. The special screw is the push rod of the shoulder roll degree of freedom, and the `M2x25mm` half-thread screw is used.\n\n* The arm push rod also uses a small block, this block does not need to be printed, just cut a small section with a piece of rubber wire (there is a demonstration in the video), this block needs to be fixed with the screw of the push rod. Yes, 502 bonding can be used.\n\n**The driving principle of the arm? **\n\n* In fact, it is demonstrated in the video. I designed a relatively ingenious driving method. The pitch direction movement is well understood as gear transmission. The roll direction uses a T-shaped push rod as follows:\n\n  ![](/5.Docs/Images/robot2.jpg)\n\n* The push rod is restricted by the cap of the M2 screw and a stopper. When the yellow component rotates, it drives the push rod to move left and right, and the other end of the push rod is restricted by a guide groove in the arm assembly to transmit the power. To the rotating shaft, the torque of this scheme can be transmitted in both directions\n\n  ![](/5.Docs/Images/robot3.jpg)\n\n**How ​​the clear glass for the face is made**\n\n*tb search for `Table Mengzi`, I used the `31.5mm` diameter.\n\n  ![](5.Docs/Images/robot6.jpg)\n\n**Installation order? **\n\nYou can refer to the installation video of this [Green Shadow Aguang] (https://space.bilibili.com/25228512): https://www.bilibili.com/video/BV1oY4y1v7oN\n\n* It is also worth noting that during the installation process, because the volume of the fuselage is too limited, some of the mounting brackets of several servos need to be cut short, otherwise they cannot be plugged. Can be fixed with hot melt glue.\n* In addition, the push rod of the arm can be slightly polished and greased to make it push more smoothly.\n\n#### 2.2 Circuit Design\n\nThere is nothing to analyze the circuit, just look at the schematic diagram.\n\nIt is worth mentioning that the topology of the USB-HUB is as follows:\n\n![](/5.Docs/Images/robot4.jpg)\n\n**About chip selection? **\n\n* Master STM32F4, this is irreplaceable, because models below F4 do not support USB-HS external PHY.\n* The STM32F0 driven by the steering gear can be replaced, and it is recommended that capable students replace it, because the STM32F042P6 chip used in my project is more expensive (bought a piece of more than ten yuan), and the performance requirements of the steering gear driver are not so much for the chip High, it can be replaced by 8-bit MCU such as STM8, so you can refer to my firmware source code to find a replacement MCU to improve the solution.\n* The MCU that replaces the STM32F0 needs to support the following features: with an ADC sampling, with two PWM outputs, with an I2C interface, the Flash and SRAM size needs to be 32K and 4K or larger according to my code (My firmware uses HAL library and C++ Features, if you can be based on the LL library or don't use C++, the requirements should be half as small).\n\n**About the burning method? **\n\n* Use debuggers such as JLink and STLink for programming. Note that only three programming contacts are left on the driver board due to the size limit. You need to use the `SH1.0` connector contacts for programming.\n\n**About the modification of the steering gear? **\n\n* The usual RC-Servo uses potentiometers to measure the absolute angle, so I also use the ADC to read the voltage value of the potentiometer in the driver board and convert it into angle feedback, and the driver chip uses the smallest package I found. A chip `FM116B`. When you modify the steering gear, pay attention to distinguish the direction of the two wires of the motor. If the debugging finds that the motor is not closed-loop, you may need to exchange the wiring sequence.\n\n* In addition, the transformation of the small 3g servo needs to disassemble and remove the cover (the space is too small to add the cover driver and can't be plugged in), and then the servo with the rear cover removed needs to be replaced with M1x10mm screws for fixing, otherwise it will fall apart. of.\n\n  > In fact, the ideal situation is to find a steering gear manufacturer to customize a mini steering gear like this, but because I am doing small batches by myself, I will definitely not accept orders. If you have channels, you can try it.\n\n**About camera selection? **\n\n* I use this one: https://item.taobao.com/item.htm?id=567717780577\n\n  ![](/5.Docs/Images/robot5.jpg)\n\n* Of course, you can replace other USB cameras (black and white, high frame rate) according to your needs, as long as it can be plugged in, the camera is directly disconnected and welded on the SensorBoard.\n\n  > It is worth noting that the 1-to-4 port of the USB-HUB chip I used currently uses three ports, and the remaining one can actually integrate a USB microphone, so that ElectronBot can also be used as a computer microphone used.\n\n### 3. Software Architecture Description\n\n#### 3.1 Firmware Code\n\nThe details and process descriptions of the firmware code are relatively cumbersome. I will add them later. In short, you can compile and download directly based on the method mentioned above, and then slowly study the source code.\n\n> If the source code of STM32F4 regenerates the project through `.ioc`, remember to back up several files related to USB in advance, and then replace the original file after generating the code, because CubeMX will overwrite the generation and modify the relevant code ( I actually use Git's file version rollback operation).\n\n#### 3.2 Servo I2C Protocol\n\nThe modified steering gear communicates with the control board through the I2C interface. The control board of the STM32F4 is the master and the steering gear is the slave. The communication process is always initiated by the host. The host first issues commands such as location and parameters, and then retrieves the relevant data immediately to complete a round-trip communication.\n\nEach servo acts as a slave to receive commands from two addresses: ** own ID number **, and ** broadcast number 0**. Broadcast is used as a wildcard address when no address is set for the servo (for example, if you have just programmed the servo firmware, at this time the servo's Flash does not store its own ID, and can only communicate through address 0) .\n\n**It is worth noting that the power-on of the servo and the host needs to be in order. Be sure to let the slave machine initialize and start monitoring data, and then let the host send commands! **\n\n> If the slave does not respond when the host sends a command, or if multiple servos with the same address respond at the same time, it may cause a communication error, so the above sequence needs to be guaranteed.\n>\n> Since the host and the servos are powered on at the same time on the hardware, there is a 2S delay code in the host's firmware code (in fact, it doesn't take that long), which is to wait for the servos to be powered on and the initialization is completed before starting the communication.\n>\n> When debugging, debug one servo and one servo, and comment out the communication codes of other unconnected servos, otherwise it will also cause polling to wait for timeout.\n\nRegarding the command meaning of the steering gear, I would like to thank **[leazer](https://github.com/leazer)** for the table organized by the students in Issues:\n\n![](https://pengzhihui-markdown.oss-cn-shanghai.aliyuncs.com/img/20220322010150.png)\n\n> Instructions may be updated in the future.\n\n#### 3.3 SDK Instructions\n\nThe SDK architecture design is shown in the figure:\n\n![](/5.Docs/Images/robot7.jpg)\n\nFor the specific usage method, please refer to the `sample.cpp` given in the SDK project. I compiled it with the CLion+MSVC toolchain. You can also copy the source code to your own Visual Studio project for compilation.\n\nThe DLL files generated by the `ElectronBotSDK-UnityBridge` project need to be copied to the `Unity\\ElectronBot-Studio\\Assets\\Plugins` directory to connect the local C++ code and the C# environment in Unity.\n\n> **By the way, note that the current selection of picture and video files in ElectronStudio does not support Chinese paths! **\n\nFor the specific implementation details of the SDK, you can read the source code, and I will update the description later when I have time.\n\n### Some questions have already been answered in Issues, please read open/closed Issues before asking questions.\n\n\n\n> Thanks to the following items:\n>\n> [opencv/opencv: Open Source Computer Vision Library (github.com)](https://github.com/opencv/opencv)\n>\n> https://github.com/CMU-Perceptual-Computing-Lab/openpose\n>\n> [Lexikos/AutoHotkey_L: AutoHotkey - macro-creation and automation-oriented scripting utility for Windows. (github.com)](https://github.com/Lexikos/AutoHotkey_L)\n>\n> https://blog.csdn.net/pq8888168/article/details/85781908\n"
        }
      ]
    }
  ]
}