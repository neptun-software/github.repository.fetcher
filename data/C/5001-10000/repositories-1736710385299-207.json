{
  "metadata": {
    "timestamp": 1736710385299,
    "page": 207,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bytecodealliance/wasm-micro-runtime",
      "stars": 5089,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.220703125,
          "content": "# using [clang-formt-12 options](https://releases.llvm.org/12.0.0/tools/clang/docs/ClangFormatStyleOptions.html)\nRawStringFormats:\n  - Language: Cpp\n    Delimiters:\n      - c\n      - C\n      - cc\n      - CC\n      - cpp\n      - Cpp\n      - CPP\n      - 'c++'\n      - 'C++'\n      - h\n      - hpp\n    CanonicalDelimiter: ''\n    BasedOnStyle:    Mozilla\n\nLanguage: Cpp\nBasedOnStyle: Mozilla\n# 6.1\nIndentWidth: 4\nContinuationIndentWidth: 4\n# 6.2\nTabWidth: 4\nUseTab: Never\n# 6.3\nColumnLimit: 80\n# 6.9\nAlignAfterOpenBracket: Align\nBinPackArguments: true\nBinPackParameters: true\n# 6.10\nBreakBeforeBraces: Custom\nBraceWrapping:\n  AfterCaseLabel: true\n  AfterClass: true\n  AfterControlStatement: false\n  AfterEnum: false\n  AfterFunction: true\n  AfterNamespace: false\n  AfterObjCDeclaration: false\n  AfterStruct: false\n  AfterUnion: false\n  AfterExternBlock: false\n  BeforeCatch: false\n  BeforeElse: true\n  IndentBraces: false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: false\n  SplitEmptyNamespace: true\n# 6.27\nBreakBeforeBinaryOperators: NonAssignment\n\n# additional\nAlignEscapedNewlines: Left\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowAllArgumentsOnNextLine: false\nPointerAlignment: Right\nSpaceAroundPointerQualifiers: After\nSortIncludes: false\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.591796875,
          "content": "# refer to https://clang.llvm.org/extra/clang-tidy/checks/list.html\n\nChecks:  '-*, readability-identifier-naming, clang-analyzer-core.*,'\nWarningsAsErrors:    '-*'\nHeaderFilterRegex:   ''\nFormatStyle:         file\nInheritParentConfig: false\nAnalyzeTemporaryDtors: false\nUser:                wamr\nCheckOptions:\n  - key:             readability-identifier-naming.VariableCase\n    value:           lower_case\n  - key:             readability-identifier-naming.ParameterCase\n    value:           lower_case\n  - key:             readability-identifier-naming.MacroDefinitionCase\n    value:           UPPER_CASE\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.2421875,
          "content": "# for now, it is used to speed up wasi-nn tests only.\n# you shall adapt below rules to incoming requirements\n\nbuild\n*/build\n*/*/build\n*/*/*/build\n*/*/*/*/build\n*/*/*/*/*/build\n*/*/*/*/*/*/build\n.*\n\ncore/deps\n!core/deps/tensorflow-src\nsamples\ntests\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7490234375,
          "content": ".cache\n.clangd\n.vs\n.vscode\n.venv\n/.idea\n**/cmake-build-*/\n**/*build*/\n!/build-scripts\n*.obj\n*.a\n*.so\n.clangd\n.DS_Store\n*.o\n.aider*\n\ncore/deps/**\ncore/shared/mem-alloc/tlsf\ncore/iwasm/libraries/lib-wasi-threads/test/*.wasm\ncore/iwasm/libraries/lib-socket/test/*.wasm\n\nproduct-mini/app-samples/hello-world/test.wasm\nproduct-mini/platforms/linux-sgx/enclave-sample/App/\nproduct-mini/platforms/linux-sgx/enclave-sample/Enclave/\nproduct-mini/platforms/linux-sgx/enclave-sample/iwasm\n\nbuild_out\ntests/wamr-test-suites/workspace\n\n!/test-tools/wamr-ide/VSCode-Extension/.vscode\n\nsamples/socket-api/wasm-src/inc/pthread.h\n\n**/__pycache__\n\ntests/benchmarks/coremark/coremark*\n\nsamples/workload/include/**\n!samples/workload/include/.gitkeep\n\n# core/iwasm/libraries/wasi-threads\n"
        },
        {
          "name": "ADOPTERS.md",
          "type": "blob",
          "size": 6.048828125,
          "content": "# WAMR adopters\n\n_If you are using WAMR in production/pre-production at your organization, please add your company name to this list.\nThe list is in alphabetical order._\n\n| Organization                           | Contact                                                      | Status                                                       | Description of Use                                           |\n| -------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [Alibaba](https://www.alibaba.com)     | [@johnlanni](https://github.com/johnlanni)                   | ![production](https://img.shields.io/badge/-production-blue?style=flat) | Higress is a next-generation cloud-native gateway built on the core of open-source Istio + Envoy based on Alibaba's internal Envoy Gateway practice. |\n| [Amazon](https://www.amazon.com)       | [@loganek](https://github.com/loganek)                       | ![production](https://img.shields.io/badge/-production-blue?style=flat) | Prime Video is a global streaming service by Amazon that provides on-demand access to a vast library of movies, TV shows, and original programming, as well as live content. |\n| [Ant Group](https://www.antgroup.com)  | [@wei-tang](https://github.com/wei-tang)                     | ![production](https://img.shields.io/badge/-production-blue?style=flat) | AntChain is a blockchain technology platform owned by Ant Group, a Chinese tech conglomerate that also runs Alipay, China's largest digital payment system. |\n| [Bosch](https://www.bosch.com)         | emily.ruppel@us.bosch.com | ![Undisclosed](https://img.shields.io/badge/-Undisclosed-orange?style=flat)   | Silverline Cloud-Edge platform                              |\n| [Disney](https://www.disney.com)     |                                                 | ![production](https://img.shields.io/badge/-production-blue?style=flat)                                                 | Disney+ Streaming                                            |\n| [Intel](https://www.intel.com)      | [@wenyongh](https://github.com/wenyongh)                                    | ![Undisclosed](https://img.shields.io/badge/-Undisclosed-orange?style=flat) | Edge and the embedded environments |\n| [Moonbit](https://www.moonbitlang.com) | [@peter-jerry-ye](https://github.com/peter-jerry-ye) | ![Undisclosed](https://img.shields.io/badge/-Undisclosed-orange?style=flat) | MoonBit is an end-to-end programming language toolchain for cloud and edge computing using WebAssembly. |\n| [Microsoft](https://www.microsoft.com) | [@Mossaka](https://github.com/Mossaka)                       | ![production](https://img.shields.io/badge/-production-blue?style=flat)                                                       | Hyperlight runs Wasm workloads in VMs without OS and kernel, it is a solution for improving the management and security of Wasm workloads on Azure. |\n| [Midokura](https://www.midokura.com)                          |   [@yamt](https://github.com/yamt)                                     | ![Undisclosed](https://img.shields.io/badge/-Undisclosed-orange?style=flat) | The next-generation Edge AI sensing platform                                                   |\n| [Siemens](https://www.siemens.com)    | [@ttrenner](https://github.com/ttrenner)                     | ![Undisclosed](https://img.shields.io/badge/-Undisclosed-orange?style=flat)                                                | Industrial, IoT                                               |\n| [Sony Semiconductor Solutions](https://www.sony-semicon.com)      | [@dongsheng28849455](https://github.com/dongsheng28849455)                                    | ![production](https://img.shields.io/badge/-production-blue?style=flat) | AI digital camera                                                   |\n| [Xiaomi](https://www.mi.com)           | [@no1wudi](https://github.com/no1wudi)                       | ![production](https://img.shields.io/badge/-production-blue?style=flat) | Xiaomi Vela is Xiaomi's IoT embedded software platform based on the open-source, real-time operating system NuttX. |\n| [Xiaomi](https://www.mi.com)           | [@no1wudi](https://github.com/no1wudi)                       | ![production](https://img.shields.io/badge/-production-blue?style=flat) | TEE (trusted execution environment) app engine. |\n\n# Adopted in open-source projects\n\n_The list is in alphabetical order._\n\n| Project                                                      | Reference                                                    |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [Apache Teaclave](https://github.com/apache/incubator-teaclave) | https://github.com/apache/incubator-teaclave/blob/master/docs/executing-wasm.md |\n| [Envoy](https://github.com/envoyproxy/envoy)                 | https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_features/wasm.rst |\n| [faasm](https://github.com/faasm/faasm)                      | https://github.com/faasm/faasm/blob/main/docs/source/wamr.md |\n| [fluent-bit](https://github.com/fluent/fluent-bit)           | https://github.com/fluent/fluent-bit/tree/master/lib/wasm-micro-runtime-WAMR-1.3.0 |\n| [harfbuzz](https://github.com/harfbuzz/harfbuzz)             | https://github.com/harfbuzz/harfbuzz/blob/main/docs/wasm-shaper.md#enabling-the-wasm-shaper-when-building-harfbuzz |\n| [inclave-containers](https://github.com/inclavare-containers/inclavare-containers) | https://github.com/inclavare-containers/inclavare-containers |\n| [private-data-objects](https://github.com/hyperledger-labs/private-data-objects) | https://github.com/hyperledger-labs/private-data-objects/blob/main/common/interpreter/wawaka_wasm/README.md |\n| [runwasi](https://github.com/containerd/runwasi)             | https://github.com/containerd/runwasi/pull/508 (WIP)         |\n| [Wasmnizer-ts](https://github.com/web-devkits/Wasmnizer-ts)  | https://github.com/web-devkits/Wasmnizer-ts                  |\n"
        },
        {
          "name": "ATTRIBUTIONS.md",
          "type": "blob",
          "size": 4.556640625,
          "content": "WebAssembly Micro Runtime Attributions\n======================================\n\nWAMR project reused some components from other open source project:\n- **cJson**: in the repository [wamr-app-framework](https://github.com/bytecodealliance/wamr-app-framework/), used in the host_tool for remotely managing wasm applications\n- **contiki-ng**: for the coap protocol implementation\n- **freebsd libm**: used in core/shared/platform/alios/bh_math.c\n- **LVGL**: in the repository [wamr-app-framework](https://github.com/bytecodealliance/wamr-app-framework/), for the gui samples and wrapped the wasm graphic layer\n- **llvm**: for the AOT/JIT compilation\n- **wasm-c-api**: to implement the C-APIs of wasm. using headers and sameples\n- **wasmtime**: for the wasi libc implementation\n- **zephyr**: for several platform specific examples\n- **WebAssembly debugging patch for LLDB**: for extending the ability of LLDB to support wasm debugging\n- **libuv**: for the WASI Libc with uvwasi implementation\n- **uvwasi**: for the WASI Libc with uvwasi implementation\n- **asmjit**: for the Fast JIT x86-64 codegen implementation\n- **zydis**: for the Fast JIT x86-64 codegen implementation\n- **NuttX ELF headers**: used in core/iwasm/aot/debug/elf_parser.c\n- **Dhrystone**: for the test benchmark dhrystone\n\nThe WAMR fast interpreter is a clean room development. We would acknowledge the inspirations by [WASM3](https://github.com/wasm3/wasm3) open source project for the approach of pre-calculated operand stack location.\n\n|  third party components | version number | latest release | vendor pages | CVE details |\n| --- | --- | --- | --- | --- |\n| cjson | 1.7.16 | 1.7.16 | https://github.com/DaveGamble/cJSON | https://www.cvedetails.com/vendor/19164/Cjson-Project.html |\n| contiki-ng (er-coap) | unspecified | 3.0 | https://github.com/contiki-os/contiki | https://www.cvedetails.com/vendor/16528/Contiki-os.html |\n| freebsd libm | unspecified | 13.0 | https://www.freebsd.org/ | https://www.cvedetails.com/vendor/6/Freebsd.html |\n| LVGL | 6.0.1 | 7.11.0 | https://lvgl.io/ | |\n| llvm | 11.0.1 | 12.0.0 | https://llvm.org | https://www.cvedetails.com/vendor/13260/Llvm.html |\n| wasm-c-api | ac9b509f4df86e40e56e9b01f3f49afab0100037 | c9d31284651b975f05ac27cee0bab1377560b87e | https://github.com/WebAssembly/wasm-c-api | |\n| wasmtime | unspecified | v0.26.0 | https://github.com/bytecodealliance/wasmtime | |\n| zephyr | unspecified | v2.5.0 | https://www.zephyrproject.org/ | https://www.cvedetails.com/vendor/19255/Zephyrproject.html |\n| WebAssembly debugging patch for LLDB | unspecified | unspecified | https://reviews.llvm.org/D78801 | |\n| libuv | v1.46.0 | v1.46.0 | https://github.com/libuv/libuv | https://www.cvedetails.com/vendor/15402/Libuv-Project.html |\n| uvwasi | unspecified | v0.0.12 | https://github.com/nodejs/uvwasi | |\n| asmjit | unspecified | unspecified | https://github.com/asmjit/asmjit | |\n| zydis | unspecified | e14a07895136182a5b53e181eec3b1c6e0b434de | https://github.com/zyantific/zydis | |\n| NuttX ELF headers | 72313301e23f9c2de969fb64b9a0f67bb4c284df | 10.3.0 | https://github.com/apache/nuttx | |\n| Dhrystone | 2.1 | 2.1 | https://fossies.org/linux/privat/old/ | |\n\n## Licenses\n\n### cJson\n\n[LICENSE](https://github.com/bytecodealliance/wamr-app-framework/blob/main/test-tools/host-tool/external/cJSON/LICENSE)\n\n### contiki-ng\n\n[LICENSE](./core/shared/coap/er-coap/LICENSE.md)\n\n### freebsd libm\n\n[COPYRIGHT](./core/shared/platform/common/math/COPYRIGHT)\n\n### LVGL\n\n[LICENSE](https://github.com/bytecodealliance/wamr-app-framework/blob/main/samples/littlevgl/LICENCE.txt)\n\n[LICENSE](https://github.com/bytecodealliance/wamr-app-framework/blob/main/app-framework/wgl/app/wa-inc/lvgl/LICENCE.txt)\n\n### llvm\n\n[LICENSE](./LICENSE)\n\n### wasm-c-api\n\n[LICENSE](./samples/wasm-c-api/src/LICENSE)\n\n### wasmtime\n\n[LICENSE](./core/iwasm/libraries/libc-wasi/sandboxed-system-primitives/LICENSE)\n\n[LICENSE](./core/iwasm/libraries/libc-wasi/sandboxed-system-primitives/src/LICENSE)\n\n[LICENSE](./core/iwasm/libraries/libc-wasi/sandboxed-system-primitives/include/LICENSE)\n\n### zephyr\n\n[LICENSE](https://github.com/bytecodealliance/wamr-app-framework/blob/main/samples/gui/wasm-runtime-wgl/src/platform/zephyr/LICENSE)\n\n### libuv\n\n[LICENSE](./core/iwasm/libraries/libc-uvwasi/LICENSE_LIBUV)\n\n### uvwasi\n\n[LICENSE](./core/iwasm/libraries/libc-uvwasi/LICENSE_UVWASI)\n\n### asmjit\n\n[LICENSE](./core/iwasm/fast-jit/cg/LICENSE_ASMJIT)\n\n### zydis\n\n[LICENSE](./core/iwasm/fast-jit/cg/LICENSE_ZYDIS)\n\n### NuttX ELF headers\n\n[LICENSE](./core/iwasm/aot/debug/LICENSE_NUTTX)\n\n[NOTICE](./core/iwasm/aot/debug/NOTICE_NUTTX)\n\n### Dhrystone\n\n[LICENSE](./tests/benchmarks/dhrystone/LICENSE)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 6.2236328125,
          "content": "# Copyright (C) 2019 Intel Corporation.  All rights reserved.\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\ncmake_minimum_required (VERSION 3.0)\n\nif(ESP_PLATFORM)\n  include (${COMPONENT_DIR}/build-scripts/esp-idf/wamr/CMakeLists.txt)\n  return()\nendif()\n\nproject (iwasm LANGUAGES C)\n\nset(CMAKE_CXX_STANDARD 17)\n\nset (CMAKE_VERBOSE_MAKEFILE OFF)\n\nif (NOT DEFINED WAMR_BUILD_PLATFORM)\n  string (TOLOWER ${CMAKE_HOST_SYSTEM_NAME} WAMR_BUILD_PLATFORM)\nendif ()\n\nif (NOT DEFINED WAMR_BUILD_STATIC)\n  set (WAMR_BUILD_STATIC 1)\nendif ()\nif (NOT DEFINED WAMR_BUILD_SHARED)\n  set (WAMR_BUILD_SHARED 1)\nendif ()\n\n# Reset default linker flags\nset (CMAKE_SHARED_LIBRARY_LINK_C_FLAGS \"\")\nset (CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS \"\")\n\nset (CMAKE_C_STANDARD 99)\n\n# Set WAMR_BUILD_TARGET, currently values supported:\n# \"X86_64\", \"AMD_64\", \"X86_32\", \"AARCH64[sub]\", \"ARM[sub]\", \"THUMB[sub]\",\n# \"MIPS\", \"XTENSA\", \"RISCV64[sub]\", \"RISCV32[sub]\"\nif (NOT DEFINED WAMR_BUILD_TARGET)\n  if (CMAKE_SYSTEM_PROCESSOR MATCHES \"^(arm64|aarch64)\")\n    set (WAMR_BUILD_TARGET \"AARCH64\")\n  elseif (CMAKE_SYSTEM_PROCESSOR STREQUAL \"riscv64\")\n    set (WAMR_BUILD_TARGET \"RISCV64\")\n  elseif (CMAKE_SIZEOF_VOID_P EQUAL 8)\n    # Build as X86_64 by default in 64-bit platform\n    set (WAMR_BUILD_TARGET \"X86_64\")\n  elseif (CMAKE_SIZEOF_VOID_P EQUAL 4)\n    # Build as X86_32 by default in 32-bit platform\n    set (WAMR_BUILD_TARGET \"X86_32\")\n  else ()\n    message(SEND_ERROR \"Unsupported build target platform!\")\n  endif ()\nendif ()\n\nif (NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release)\nendif ()\n\nif (NOT DEFINED WAMR_BUILD_INTERP)\n  # Enable Interpreter by default\n  set (WAMR_BUILD_INTERP 1)\nendif ()\n\nif (NOT DEFINED WAMR_BUILD_AOT)\n  # Enable AOT by default.\n  set (WAMR_BUILD_AOT 1)\nendif ()\n\nif (NOT DEFINED WAMR_BUILD_JIT)\n  # Disable JIT by default.\n  set (WAMR_BUILD_JIT 0)\nendif ()\n\nif (NOT DEFINED WAMR_BUILD_FAST_JIT)\n  # Disable Fast JIT by default\n  set (WAMR_BUILD_FAST_JIT 0)\nendif ()\n\nif (NOT DEFINED WAMR_BUILD_LIBC_BUILTIN)\n  # Enable libc builtin support by default\n  set (WAMR_BUILD_LIBC_BUILTIN 1)\nendif ()\n\nif (NOT DEFINED WAMR_BUILD_LIBC_WASI)\n  # Enable libc wasi support by default\n  set (WAMR_BUILD_LIBC_WASI 1)\nendif ()\n\nif (NOT DEFINED WAMR_BUILD_FAST_INTERP)\n  # Enable fast interpreter\n  set (WAMR_BUILD_FAST_INTERP 1)\nendif ()\n\nif (NOT DEFINED WAMR_BUILD_MULTI_MODULE)\n  # Disable multiple modules by default\n  set (WAMR_BUILD_MULTI_MODULE 0)\nendif ()\n\nif (NOT DEFINED WAMR_BUILD_LIB_PTHREAD)\n  # Disable pthread library by default\n  set (WAMR_BUILD_LIB_PTHREAD 0)\nendif ()\n\nif (NOT DEFINED WAMR_BUILD_LIB_WASI_THREADS)\n  # Disable wasi threads library by default\n  set (WAMR_BUILD_LIB_WASI_THREADS 0)\nendif ()\n\nif (NOT DEFINED WAMR_BUILD_MINI_LOADER)\n  # Disable wasm mini loader by default\n  set (WAMR_BUILD_MINI_LOADER 0)\nendif ()\n\nif (NOT DEFINED WAMR_BUILD_SIMD)\n  # Enable SIMD by default\n  set (WAMR_BUILD_SIMD 1)\nendif ()\n\nif (NOT DEFINED WAMR_BUILD_REF_TYPES)\n  # Enable reference types by default\n  set (WAMR_BUILD_REF_TYPES 1)\nendif ()\n\nset (WAMR_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR})\n\ninclude (${WAMR_ROOT_DIR}/build-scripts/runtime_lib.cmake)\n\nif (NOT WIN32)\n  set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wall -Wextra -Wformat -Wformat-security \\\n                                       -ffunction-sections -fdata-sections \\\n                                       -Wno-unused-parameter -Wno-pedantic \\\n                                       -fvisibility=hidden\")\n  # Remove the extra spaces for better make log\n  string (REGEX REPLACE \"  *\" \" \" CMAKE_C_FLAGS ${CMAKE_C_FLAGS})\n  set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wextra -Wformat -Wformat-security -Wno-unused\")\nendif()\n\nif (WAMR_BUILD_TARGET MATCHES \"X86_.*\" OR WAMR_BUILD_TARGET STREQUAL \"AMD_64\")\n  if (NOT (CMAKE_C_COMPILER MATCHES \".*clang.*\" OR CMAKE_C_COMPILER_ID MATCHES \".*Clang\"))\n    set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -mindirect-branch-register\")\n  endif ()\nendif ()\n\n# The following flags are to enhance security, but it may impact performance,\n# we disable them by default.\n#if (WAMR_BUILD_TARGET MATCHES \"X86_.*\" OR WAMR_BUILD_TARGET STREQUAL \"AMD_64\")\n#  set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -ftrapv -D_FORTIFY_SOURCE=2\")\n#endif ()\n#set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fstack-protector-strong --param ssp-buffer-size=4\")\n#set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wl,-z,noexecstack,-z,relro,-z,now\")\n\ninclude (${SHARED_DIR}/utils/uncommon/shared_uncommon.cmake)\n\nset (THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads REQUIRED)\n\nif (MSVC)\n  add_definitions(-DCOMPILING_WASM_RUNTIME_API=1)\nendif ()\n\n# STATIC LIBRARY\nif (WAMR_BUILD_STATIC)\n    add_library(iwasm_static STATIC ${WAMR_RUNTIME_LIB_SOURCE})\n    set_target_properties (iwasm_static PROPERTIES OUTPUT_NAME vmlib)\n    target_include_directories(iwasm_static INTERFACE ${WAMR_ROOT_DIR}/core/iwasm/include)\n    target_link_libraries (iwasm_static INTERFACE ${LLVM_AVAILABLE_LIBS} ${UV_A_LIBS} -lm -ldl ${CMAKE_THREAD_LIBS_INIT})\n    if (WAMR_BUILD_WASM_CACHE EQUAL 1)\n      target_link_libraries(iwasm_static INTERFACE boringssl_crypto)\n    endif ()\n\n    if (MINGW)\n      target_link_libraries (iwasm_static PRIVATE ws2_32)\n    endif ()\n\n    if (WIN32)\n      target_link_libraries(iwasm_static PRIVATE ntdll)\n    endif()\n\n    install (TARGETS iwasm_static ARCHIVE DESTINATION lib)\nendif ()\n\n# SHARED LIBRARY\nif (WAMR_BUILD_SHARED)\n    add_library (iwasm_shared SHARED ${WAMR_RUNTIME_LIB_SOURCE})\n    set_target_properties (iwasm_shared PROPERTIES OUTPUT_NAME iwasm)\n    target_include_directories(iwasm_shared INTERFACE ${WAMR_ROOT_DIR}/core/iwasm/include)\n    target_link_libraries (iwasm_shared PUBLIC ${LLVM_AVAILABLE_LIBS} ${UV_A_LIBS} -lm -ldl ${CMAKE_THREAD_LIBS_INIT})\n    if (WAMR_BUILD_WASM_CACHE EQUAL 1)\n      target_link_libraries(iwasm_shared INTERFACE boringssl_crypto)\n    endif ()\n\n    if (MINGW)\n      target_link_libraries(iwasm_shared INTERFACE -lWs2_32 -lwsock32)\n      target_link_libraries(iwasm_shared PRIVATE ws2_32)\n    endif ()\n\n    if (WIN32)\n      target_link_libraries(iwasm_shared PRIVATE ntdll)\n    endif()\n\n    install (TARGETS iwasm_shared LIBRARY DESTINATION lib)\nendif ()\n\n# HEADERS\ninstall (FILES\n    ${WAMR_ROOT_DIR}/core/iwasm/include/wasm_c_api.h\n    ${WAMR_ROOT_DIR}/core/iwasm/include/wasm_export.h\n    ${WAMR_ROOT_DIR}/core/iwasm/include/lib_export.h\n    DESTINATION include)\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 1.4091796875,
          "content": "# In this project, we use CODEOWNERS to identify people who are likely to know\n# who should review a pull request.\n#\n# People listed in this file are committing to respond in a timely fashion to\n# PRs in the selected areas. However, that response doesn't have to be a full\n# code review; it could also take any of these forms:\n#\n# - \"I intend to review this but I can't yet. Please leave me a message if I\n#   haven't responded by (a specific date in the near future).\"\n#\n# - \"I think (a specific other contributor) should review this.\" (Note that the\n#   best reviewer for a PR may not necessarily be listed in this file.)\n#\n# People must only be added to this file if they've agreed to provide one of\n# the above responses in a reasonable amount of time for every PR to which\n# they're assigned.\n#\n# We only ask for this commitment from people who are employed full-time to\n# work on this project. We gratefully welcome reviews from other contributors,\n# but we don't believe it's fair to ask volunteers to respond quickly.\n\n# If none of the later patterns match, assign to anyone. This team is the\n# parent of all the other teams and automatically includes everyone on those\n# teams.\n* @loganek @lum1n0us @no1wudi @TianlongLiang @wenyongh @xujuntwt95329 @yamt\n\n# Some parts of the project require more specialized knowledge. In those areas\n# we designate smaller groups who are more likely to be aware of who's working\n# in specific areas.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.36328125,
          "content": "# Contributor Covenant Code of Conduct\n\n*Note*: this Code of Conduct pertains to individuals' behavior. Please also see the [Organizational Code of Conduct][OCoC].\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the Bytecode Alliance CoC team at [report@bytecodealliance.org](mailto:report@bytecodealliance.org). The CoC team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The CoC team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the Bytecode Alliance's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[OCoC]: ORG_CODE_OF_CONDUCT.md\n[homepage]: https://www.contributor-covenant.org\n[version]: https://www.contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.1162109375,
          "content": "Contributing to WAMR\n=====================\nAs an open-source project, we welcome and encourage the community to submit patches directly to the project. In our collaborative open source environment, standards and methods for submitting changes help reduce the chaos that can result from an active development community.\nWe want to make contributing to this project as easy and transparent as possible, whether it's:\n- Reporting a bug\n- the current state of the code\n- Submitting a fix\n- Proposing new features\n\nLicense\n=======\nWAMR uses the same license as LLVM: the `Apache 2.0 license` with the LLVM\nexception. See the LICENSE file for details. This license allows you to freely\nuse, modify, distribute and sell your own products based on WAMR.\nAny contributions you make will be under the same license.\n\nCode changes\n===================\nWe Use Github Flow, So All Code Changes Happen Through Pull Requests. Pull requests are the best way to propose changes to the codebase. We actively welcome your pull requests:\n\n- If you've added code that should be tested, add tests. Ensure the test suite passes.\n- Avoid use macros for different platforms. Use seperate folder of source files to host diffeent platform logic.\n- Put macro definitions inside share_lib/include/config.h if you have to use macro.\n- Make sure your code lints and compliant to our coding style.\n- Extend the application library is highly welcome.\n\nCoding Style\n===============================\nPlease use [K&R](https://en.wikipedia.org/wiki/Indentation_style#K.26R) coding style, such as 4 spaces for indentation rather than tabs etc.\nWe suggest using VS Code like IDE or stable coding format tools, like clang-format, to make your code compliant to the customized format(in .clang-format).\n\nReport bugs\n===================\nWe use GitHub issues to track public bugs. Report a bug by [open a new issue](https://github.com/intel/wasm-micro-runtime/issues/new).\n\nCode of Conduct\n===============\n\nWAMR is a [Bytecode Alliance](https://bytecodealliance.org/) project, and follows the Bytecode Alliance's [Code of Conduct](CODE_OF_CONDUCT.md) and [Organizational Code of Conduct](ORG_CODE_OF_CONDUCT.md).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.955078125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n--- LLVM Exceptions to the Apache 2.0 License ----\n\nAs an exception, if, as a result of your compiling your source code, portions\nof this Software are embedded into an Object form of such source code, you\nmay redistribute such embedded portions in such Object form without complying\nwith the conditions of Sections 4(a), 4(b) and 4(d) of the License.\n\nIn addition, if you combine or link compiled forms of this Software with\nsoftware that is licensed under the GPLv2 (\"Combined Software\") and if a\ncourt of competent jurisdiction determines that the patent provision (Section\n3), the indemnity provision (Section 9) or other Section of the License\nconflicts with the conditions of the GPLv2, you may retroactively and\nprospectively choose to deem waived or otherwise exclude such Section(s) of\nthe License, but only in their entirety and only with respect to the Combined\nSoftware.\n\n"
        },
        {
          "name": "ORG_CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 6.8720703125,
          "content": "# Bytecode Alliance Organizational Code of Conduct (OCoC)\n\n*Note*: this Code of Conduct pertains to organizations' behavior. Please also see the [Individual Code of Conduct](CODE_OF_CONDUCT.md).\n\n## Preamble\n\nThe Bytecode Alliance (BA) welcomes involvement from organizations,\nincluding commercial organizations.  This document is an\n*organizational* code of conduct, intended particularly to provide\nguidance to commercial organizations.  It is distinct from the\n[Individual Code of Conduct (ICoC)](CODE_OF_CONDUCT.md), and does not \nreplace the ICoC. This OCoC applies to any group of people acting in \nconcert as a BA member or as a participant in BA activities, whether \nor not that group is formally incorporated in some jurisdiction.\n\nThe code of conduct described below is not a set of rigid rules, and\nwe did not write it to encompass every conceivable scenario that might\narise.  For example, it is theoretically possible there would be times\nwhen asserting patents is in the best interest of the BA community as\na whole.  In such instances, consult with the BA, strive for\nconsensus, and interpret these rules with an intent that is generous\nto the community the BA serves.\n\nWhile we may revise these guidelines from time to time based on\nreal-world experience, overall they are based on a simple principle:\n\n*Bytecode Alliance members should observe the distinction between\n public community functions and private functions — especially\n commercial ones — and should ensure that the latter support, or at\n least do not harm, the former.*\n\n## Guidelines\n\n * **Do not cause confusion about Wasm standards or interoperability.** \n \n   Having an interoperable WebAssembly core is a high priority for\n   the BA, and members should strive to preserve that core.  It is fine\n   to develop additional non-standard features or APIs, but they\n   should always be clearly distinguished from the core interoperable\n   Wasm.\n \n   Treat the WebAssembly name and any BA-associated names with\n   respect, and follow BA trademark and branding guidelines.  If you\n   distribute a customized version of software originally produced by\n   the BA, or if you build a product or service using BA-derived\n   software, use names that clearly distinguish your work from the\n   original.  (You should still provide proper attribution to the\n   original, of course, wherever such attribution would normally be\n   given.)\n     \n   Further, do not use the WebAssembly name or BA-associated names in\n   other public namespaces in ways that could cause confusion, e.g.,\n   in company names, names of commercial service offerings, domain\n   names, publicly-visible social media accounts or online service\n   accounts, etc.  It may sometimes be reasonable, however, to\n   register such a name in a new namespace and then immediately donate\n   control of that account to the BA, because that would help the project\n   maintain its identity.\n     \n * **Do not restrict contributors.** If your company requires\n   employees or contractors to sign non-compete agreements, those\n   agreements must not prevent people from participating in the BA or\n   contributing to related projects.\n\n   This does not mean that all non-compete agreements are incompatible\n   with this code of conduct.  For example, a company may restrict an\n   employee's ability to solicit the company's customers.  However, an\n   agreement must not block any form of technical or social\n   participation in BA activities, including but not limited to the\n   implementation of particular features.\n\n   The accumulation of experience and expertise in individual persons,\n   who are ultimately free to direct their energy and attention as\n   they decide, is one of the most important drivers of progress in\n   open source projects.  A company that limits this freedom may hinder\n   the success of the BA's efforts.\n\n * **Do not use patents as offensive weapons.** If any BA participant\n   prevents the adoption or development of BA technologies by\n   asserting its patents, that undermines the purpose of the\n   coalition.  The collaboration fostered by the BA cannot include\n   members who act to undermine its work.\n \n * **Practice responsible disclosure** for security vulnerabilities.\n   Use designated, non-public reporting channels to disclose technical\n   vulnerabilities, and give the project a reasonable period to\n   respond, remediate, and patch.\n\n   Vulnerability reporters may patch their company's own offerings, as\n   long as that patching does not significantly delay the reporting of\n   the vulnerability.  Vulnerability information should never be used\n   for unilateral commercial advantage.  Vendors may legitimately\n   compete on the speed and reliability with which they deploy\n   security fixes, but withholding vulnerability information damages\n   everyone in the long run by risking harm to the BA project's\n   reputation and to the security of all users.\n\n * **Respect the letter and spirit of open source practice.** While\n     there is not space to list here all possible aspects of standard\n     open source practice, some examples will help show what we mean:\n\n   * Abide by all applicable open source license terms.  Do not engage\n     in copyright violation or misattribution of any kind.\n\n   * Do not claim others' ideas or designs as your own.\n\n   * When others engage in publicly visible work (e.g., an upcoming\n     demo that is coordinated in a public issue tracker), do not\n     unilaterally announce early releases or early demonstrations of\n     that work ahead of their schedule in order to secure private\n     advantage (such as marketplace advantage) for yourself.\n\n   The BA reserves the right to determine what constitutes good open\n   source practices and to take action as it deems appropriate to\n   encourage, and if necessary enforce, such practices.\n\n## Enforcement\n\nInstances of organizational behavior in violation of the OCoC may \nbe reported by contacting the Bytecode Alliance CoC team at \n[report@bytecodealliance.org](mailto:report@bytecodealliance.org). The \nCoC team will review and investigate all complaints, and will respond \nin a way that it deems appropriate to the circumstances. The CoC team \nis obligated to maintain confidentiality with regard to the reporter of \nan incident. Further details of specific enforcement policies may be \nposted separately.\n\nWhen the BA deems an organization in violation of this OCoC, the BA\nwill, at its sole discretion, determine what action to take.  The BA\nwill decide what type, degree, and duration of corrective action is\nneeded, if any, before a violating organization can be considered for\nmembership (if it was not already a member) or can have its membership\nreinstated (if it was a member and the BA canceled its membership due\nto the violation).\n\nIn practice, the BA's first approach will be to start a conversation,\nwith punitive enforcement used only as a last resort.  Violations\noften turn out to be unintentional and swiftly correctable with all\nparties acting in good faith.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.7880859375,
          "content": "# WebAssembly Micro Runtime\n\n\n**A [Bytecode Alliance][BA] project**\n\n[BA]: https://bytecodealliance.org/\n\n**[Guide](https://wamr.gitbook.io/)**&emsp;&emsp;**[Website](https://bytecodealliance.github.io/wamr.dev)**&emsp;&emsp;**[Chat](https://bytecodealliance.zulipchat.com/#narrow/stream/290350-wamr)**\n\n[Build WAMR](./doc/build_wamr.md) | [Build AOT Compiler](./wamr-compiler/README.md) | [Embed WAMR](./doc/embed_wamr.md) | [Export Native API](./doc/export_native_api.md) | [Build Wasm Apps](./doc/build_wasm_app.md) | [Samples](./samples/README.md)\n\nWebAssembly Micro Runtime (WAMR) is a lightweight standalone WebAssembly (Wasm) runtime with small footprint, high performance and highly configurable features for applications cross from embedded, IoT, edge to Trusted Execution Environment (TEE), smart contract, cloud native and so on. It includes a few parts as below:\n- [**VMcore**](./core/iwasm/): A set of runtime libraries for loading and running Wasm modules. It supports rich running modes including interpreter, Ahead-of-Time compilation(AoT) and Just-in-Time compilation (JIT). WAMR supports two JIT tiers - Fast JIT, LLVM JIT, and dynamic tier-up from Fast JIT to LLVM JIT.\n- [**iwasm**](./product-mini/): The executable binary built with WAMR VMcore which supports WASI and command line interface.\n- [**wamrc**](./wamr-compiler/): The AOT compiler to compile Wasm file into AOT file\n- Useful components and tools for building real solutions with WAMR vmcore:\n  - [App-framework](https://github.com/bytecodealliance/wamr-app-framework/blob/main/app-framework/README.md): A framework for supporting APIs for the Wasm applications\n  - [App-manager](https://github.com/bytecodealliance/wamr-app-framework/blob/main/app-mgr/README.md): A framework for dynamical loading the Wasm module remotely\n  - [WAMR-IDE](./test-tools/wamr-ide): An experimental VSCode extension for developping WebAssembly applications with C/C++\n\n\n### Key features\n- Full compliant to the W3C Wasm MVP\n- Small runtime binary size (core vmlib on cortex-m4f with tail-call/bulk memroy/shared memroy support, text size from bloaty)\n  * ~58.9K for fast interpreter\n  * ~56.3K for classic interpreter\n  * ~29.4K for aot runtime\n  * ~21.4K for libc-wasi library\n  * ~3.7K for libc-builtin library\n- Near to native speed by AOT and JIT\n- Self-implemented AOT module loader to enable AOT working on Linux, Windows, MacOS, Android, SGX and MCU systems\n- Choices of Wasm application libc support: the built-in libc subset for the embedded environment or [WASI](https://github.com/WebAssembly/WASI) for the standard libc\n- [The simple C APIs to embed WAMR into host environment](./doc/embed_wamr.md), see [how to integrate WAMR](./doc/embed_wamr.md) and the [API list](./core/iwasm/include/wasm_export.h)\n- [The mechanism to export native APIs to Wasm applications](./doc/export_native_api.md), see [how to register native APIs](./doc/export_native_api.md)\n- [Multiple modules as dependencies](./doc/multi_module.md), ref to [document](./doc/multi_module.md) and [sample](samples/multi-module)\n- [Multi-thread, pthread APIs and thread management](./doc/pthread_library.md), ref to [document](./doc/pthread_library.md) and [sample](samples/multi-thread)\n- [wasi-threads](./doc/pthread_impls.md#wasi-threads-new), ref to [document](./doc/pthread_impls.md#wasi-threads-new) and [sample](samples/wasi-threads)\n- [Linux SGX (Intel Software Guard Extension) support](./doc/linux_sgx.md), ref to [document](./doc/linux_sgx.md)\n- [Source debugging support](./doc/source_debugging.md), ref to [document](./doc/source_debugging.md)\n- [XIP (Execution In Place) support](./doc/xip.md), ref to [document](./doc/xip.md)\n- [Berkeley/Posix Socket support](./doc/socket_api.md), ref to [document](./doc/socket_api.md) and [sample](./samples/socket-api)\n- [Multi-tier JIT](./product-mini#linux) and [Running mode control](https://bytecodealliance.github.io/wamr.dev/blog/introduction-to-wamr-running-modes/)\n- Language bindings: [Go](./language-bindings/go/README.md), [Python](./language-bindings/python/README.md), [Rust](./language-bindings/rust/README.md)\n\n### Wasm post-MVP features\n- [wasm-c-api](https://github.com/WebAssembly/wasm-c-api), ref to [document](doc/wasm_c_api.md) and [sample](samples/wasm-c-api)\n- [128-bit SIMD](https://github.com/WebAssembly/simd), ref to [samples/workload](samples/workload)\n- [Reference Types](https://github.com/WebAssembly/reference-types), ref to [document](doc/ref_types.md) and [sample](samples/ref-types)\n- [Bulk memory operations](https://github.com/WebAssembly/bulk-memory-operations), [Shared memory](https://github.com/WebAssembly/threads/blob/main/proposals/threads/Overview.md#shared-linear-memory), [Memory64](https://github.com/WebAssembly/memory64)\n- [Tail-call](https://github.com/WebAssembly/tail-call), [Garbage Collection](https://github.com/WebAssembly/gc), [Exception Handling](https://github.com/WebAssembly/exception-handling)\n\n### Supported architectures and platforms\nThe WAMR VMcore supports the following architectures:\n- X86-64, X86-32\n- ARM, THUMB (ARMV7 Cortex-M7 and Cortex-A15 are tested)\n- AArch64 (Cortex-A57 and Cortex-A53 are tested)\n- RISCV64, RISCV32 (RISC-V LP64 and RISC-V LP64D are tested)\n- XTENSA, MIPS, ARC\n\nThe following platforms are supported, click each link below for how to build iwasm on that platform. Refer to [WAMR porting guide](./doc/port_wamr.md) for how to port WAMR to a new platform.\n- [Linux](./product-mini/README.md#linux),  [Linux SGX (Intel Software Guard Extension)](./doc/linux_sgx.md),  [MacOS](./product-mini/README.md#macos),  [Android](./product-mini/README.md#android), [Windows](./product-mini/README.md#windows), [Windows (MinGW, MSVC)](./product-mini/README.md#mingw)\n- [Zephyr](./product-mini/README.md#zephyr),  [AliOS-Things](./product-mini/README.md#alios-things),  [VxWorks](./product-mini/README.md#vxworks), [NuttX](./product-mini/README.md#nuttx), [RT-Thread](./product-mini/README.md#RT-Thread), [ESP-IDF(FreeRTOS)](./product-mini/README.md#esp-idf)\n\n\n## Getting started\n- [Build VM core](./doc/build_wamr.md) and [Build wamrc AOT compiler](./wamr-compiler/README.md)\n- [Build iwasm (mini product)](./product-mini/README.md): [Linux](./product-mini/README.md#linux), [SGX](./doc/linux_sgx.md), [MacOS](./product-mini/README.md#macos) and [Windows](./product-mini/README.md#windows)\n- [Embed into C/C++](./doc/embed_wamr.md), [Embed into Python](./language-bindings/python), [Embed into Go](./language-bindings/go), [Embed in Rust](./language-bindings/rust)\n- [Register native APIs for Wasm applications](./doc/export_native_api.md)\n- [Build wamrc AOT compiler](./wamr-compiler/README.md)\n- [Build Wasm applications](./doc/build_wasm_app.md)\n- [Port WAMR to a new platform](./doc/port_wamr.md)\n- [VS Code development container](./doc/devcontainer.md)\n- [Samples](./samples) and [Benchmarks](./tests/benchmarks)\n- [End-user APIs documentation](https://bytecodealliance.github.io/wamr.dev/apis/)\n\n\n### Performance and memory\n- [Blog: The WAMR memory model](https://bytecodealliance.github.io/wamr.dev/blog/the-wamr-memory-model/)\n- [Blog: Understand WAMR heaps](https://bytecodealliance.github.io/wamr.dev/blog/understand-the-wamr-heaps/) and [stacks](https://bytecodealliance.github.io/wamr.dev/blog/understand-the-wamr-stacks/)\n- [Blog: Introduction to WAMR running modes](https://bytecodealliance.github.io/wamr.dev/blog/introduction-to-wamr-running-modes/)\n- [Memory usage tuning](./doc/memory_tune.md): the memory model and how to tune the memory usage\n- [Memory usage profiling](./doc/build_wamr.md#enable-memory-profiling-experiment): how to profile the memory usage\n- [Performance tuning](./doc/perf_tune.md): how to tune the performance\n- [Benchmarks](./tests/benchmarks): checkout these links for how to run the benchmarks: [PolyBench](./tests/benchmarks/polybench), [CoreMark](./tests/benchmarks/coremark), [Sightglass](./tests/benchmarks/sightglass), [JetStream2](./tests/benchmarks/jetstream)\n- [Performance and footprint data](https://github.com/bytecodealliance/wasm-micro-runtime/wiki/Performance): the performance and footprint data\n\n\nProject Technical Steering Committee\n====================================\nThe [WAMR PTSC Charter](./TSC_Charter.md) governs the operations of the project TSC.\nThe current TSC members:\n- [dongsheng28849455](https://github.com/dongsheng28849455) - **Dongsheng Yan**, <dongsheng.yan@sony.com>\n- [loganek](https://github.com/loganek) - **Marcin Kolny**, <mkolny@amazon.co.uk>\n- [lum1n0us](https://github.com/lum1n0us) - **Liang He**， <liang.he@intel.com>\n- [no1wudi](https://github.com/no1wudi) **Qi Huang**, <huangqi3@xiaomi.com>\n- [qinxk-inter](https://github.com/qinxk-inter) - **Xiaokang Qin**， <xiaokang.qxk@antgroup.com>\n- [ttrenner ](https://github.com/ttrenner) - **Trenner, Thomas**， <trenner.thomas@siemens.com>\n- [wei-tang](https://github.com/wei-tang) - **Wei Tang**， <tangwei.tang@antgroup.com>\n- [wenyongh](https://github.com/wenyongh) - **Wenyong Huang**， <wenyong.huang@intel.com>\n- [woodsmc](https://github.com/woodsmc) - **Woods, Chris**， <chris.woods@siemens.com>\n- [xujuntwt95329](https://github.com/xujuntwt95329) - **Jun Xu**， <Jun1.Xu@intel.com>\n- [xwang98](https://github.com/xwang98) - **Xin Wang**， <xin.wang@intel.com> (chair)\n- [yamt](https://github.com/yamt) - **Takashi Yamamoto**, <yamamoto@midokura.com>\n\n\nLicense\n=======\nWAMR uses the same license as LLVM: the `Apache 2.0 license` with the LLVM\nexception. See the LICENSE file for details. This license allows you to freely\nuse, modify, distribute and sell your own products based on WAMR.\nAny contributions you make will be under the same license.\n\n# More resources\n- [Who use WAMR?](https://github.com/bytecodealliance/wasm-micro-runtime/wiki)\n- [WAMR Blogs](https://bytecodealliance.github.io/wamr.dev/blog/)\n- [Community news and events](https://bytecodealliance.github.io/wamr.dev/events/)\n- [WAMR TSC meetings](https://github.com/bytecodealliance/wasm-micro-runtime/wiki/TSC-meeting-notes)\n\n"
        },
        {
          "name": "RELEASE_NOTES.md",
          "type": "blob",
          "size": 60.8779296875,
          "content": "## WAMR-2.2.0\n\n### Breaking changes \n\n### New features \n- Add support for multi-memory proposal in classic interpreter (#3742) \n- wasi-nn: Add a new target for llama.cpp as a wasi-nn backend (#3709)\n- Add memory instance support apis (#3786) \n- Implement a first version of shared heap feature (#3789) \n- Support dynamic aot debug (#3788) \n- Implement shared heap for AOT (#3815)\n- Support table64 extension in classic-interp and AOT running modes (#3811)\n  \n\n### Bug fixes\n- Enable merged os_mmap for aot data sections (#3681) \n- Fix arm64 issues on mac (#3688) \n- aot loader: Call os_mmap with MMAP_MAP_32BIT only when target is x86-64 or riscv64 (#3755)\n- Fix building iwasm_shared and iwasm_static libs on win32 (#3762) \n- Fix compile error when multi-module and tags are enabled (#3781)\n- Fix aot multi export memory support (#3791)\n- Fix Windows compile error when uvwasi is enabled (#3810)\n- Fix missing symbols when using aot mode on riscv platforms (#3812)\n- Fix mac build of libc_emcc_wrapper.c (#3836)\n- aot_comp_option.h: Add missing stdint.h header (#3834)\n- Fix compilation error found in tflite test (#3820) \n- Fix exec_env_tls assertion in module instantiation (#3844) \n- Fix issues of destroy_shared_heaps (#3847)\n\n### Enhancements\n- aot loader: Refine os_mmap related code (#3711)\n- Enable merged os_mmap for aot data sections and aot text (#3743)\n- Improve posix mmap retry logic (#3714)\n- Remove unnecessary code duplication in aot runtime (#3767)\n- Add wamrc parameter to configure stack frame features (#3763) \n- refactoring: Re-use commit IP functionality between exception handling and other cases (#3768)\n- AOT call stack optimizations (#3773) \n- Appease GCC strict prototypes warning (#3775)\n- Appease GCC -Wformat (#3783)\n- Fix compiler warnings (#3784)\n- Implement option for skipping function index in the callstack (#3785)\n- Fix a compile warning in aot_emit_function.c (#3793) \n- Restore cmake hidden compile symbol visibility (#3796)\n- Refactor shared heap feature for interpreter mode (#3794)\n- Add no_resolve to LoadArgs and wasm_runtime_resolve_symbols (#3790)\n- shared heap: Fix some issues and add basic unit test case (#3801)\n- Add shared heap sample (#3806)\n- Fix unused param warning when GC is enabled (#3814)\n- Add scoreboard CI for supply-chain security (#3819)\n- Emit load_addr and load_size if WAMR_ENABLE_COMPILER is set (#3835)\n- libc-emcc: Use alternate method to check getrandom support (#3848)\n- Enable libc-wasi for windows msvc build (#3852) \n- Remove unused folder samples/gui and samples/littlevgl (#3853) \n- Fix some compile warnings and typos (#3854)\n- Allow to set native stack boundary to exec_env (#3862)\n- Refine wasm/aot function instance lookup (#3865)\n- Fix quadratic runtime for duplicate export name detection (#3861)\n\n  \n### Others\n- Add a comment on AOT_SECTION_TYPE_SIGNATURE (#3746) \n- CI: Freeze version of bloaty for NuttX compilation (#3756)\n- aot compiler: Allow to control stack boundary check when boundary check is enabled (#3754)\n- Update ref to the multi-memory tests (#3764)\n- compilation_on_nuttx.yml: Update checkout action to suppress warnings (#3765)\n- CI: Disable parallel test in spectest for NuttX (#3780)\n- spec_test_on_nuttx.yml: Disable riscv32_ilp32f for now (#3777) \n- Ignore temporary file from aider (#3787)\n- Add CODEOWNERS (#3822)\n- build(deps): bump github/codeql-action from 2.2.4 to 3.26.9 (#3826)\n- build(deps): bump actions/upload-artifact from 3.1.0 to 4.4.0 (#3827)\n- build(deps): bump ossf/scorecard-action from 2.3.1 to 2.4.0 (#3828)\n- build(deps): bump github/codeql-action from 3.26.9 to 3.26.11 (#3843) \n- build(deps): bump actions/upload-artifact from 4.4.0 to 4.4.3 (#3855)\n- build(deps): bump github/codeql-action from 3.26.11 to 3.26.12 (#3856)\n- Add Windows wamrc and iwasm build in release CI (#3857)\n- Fix syntax error in codeql_buildscript.sh (#3864)\n- release CI: Add another iwasm binary that supports Garbage Collection and Exception Handling (#3866)\n- Fix lookup function issue reported in nightly run (#3868)\n \n---\n\n## WAMR-2.1.2\n\n### Breaking Changes\n - wasi-nn: Apply new architecture (#3692)\n\n### New Features\n - [wasi-nn] Add a new wasi-nn backend openvino (#3603)\n - Add APIs into wasm_c_api.h to summary wasm function execution duration (#3639)\n - Add support for RISCV32 ILP32F (#3708)\n\n### Bug Fixes\n - libc-builtin: Fix function prototype for wasm_runtime_module_realloc (#3702)\n - Fix potential memory leak in insert_native_symbol (#3712)\n - aot compiler: Fix NaN handling for opcode f32/f64.const in XIP mode (#3721)\n - Fix table idx resolving in op call_indirect/return_call_indirect (#3726)\n\n### Enhancements\n - Remove a few hardcoded spec test knowledge from the core library (#3648)\n - Change log of import function to be consistent (#3656)\n - libc-builtin: Fix a printf format (#3652)\n - Set compile symbol visibility to hidden in cmake (#3655)\n - wamrc: Add --mllvm= option (#3658)\n - wamr-compiler: Avoid size-level tweak if target is specified (#3659)\n - aot runtime: Add missing arm/thumb relocations (#3660)\n - aot compiler: Enlarge AOTNativeSymbol->symbol (#3662)\n - aot compiler: Bail out on too long native symbol names (#3663)\n - Support more features for rt-thread (#3661)\n - Zephyr User Mode Support (#3650)\n - Set posix thread name for debug build (#3657)\n - Add emscripten_sleep() wrapper to libc-emcc (#3669)\n - Fix a compilation warning (#3682)\n - wamrc: Add some help text for --size-level (#3689)\n - Restore linux iwasm default visibility (#3691)\n - posix_thread.c: Restore old signal alternate stack before thread exit (#3693)\n - libc-wasi: Make rights of STDIN/STDOUT/STDERR fixed and overlook their access modes (#3694)\n - [refactoring] Extract read leb to a separate file, share the code between loader and mini loader (#3701)\n - debug-interp: Only add lock when signal_flag is SIG_SINGSTEP (#3704)\n - Fix compilation warnings (#3707)\n - Add missing headers in bh_atomic.h and aot_llvm_extra.cpp (#3715)\n - Update std atomic check and simd compatibility check for arc compiler (#3716)\n - aot compiler: Track non-0x00 tableindex as ref types use (#3695)\n - compilation: Use the dedicated stack-sizes section only for AOT (#3732)\n - riscv: Add missing relocation intrinsics for __fixdfsi/__ltdf2 (#3733)\n\n### Others\n - Fix night run CI (#3640)\n - spec-test-script/runtest.py: Don't assume the tmp dir path (#3632)\n - wamr-test-suites: Remove dead code (wasi_test) (#3634)\n - wamr-test-suites/test_wamr.sh: Add an option to specify wamrc binary (#3635)\n - CI: Build llvm for xtensa (#3637)\n - spec-test-script/runtest.py: Avoid specifying -v=0 unnecessarily (#3642)\n - spec-test-script: Add xtensa case (#3643)\n - spec-test-script/runtest.py: Move \"--size-level=1\" to common place for RISCV64 (#3644)\n - spec-test-script/runtest.py: Use a shorter timeout when expected to fail (#3647)\n - spec-test-script: Make case_last_words larger (#3651)\n - spec-test-script/runtest.py: Reduce stack size for aot w/o gc (#3653)\n - spec-test-script: Skip a few tests for xtensa qemu (#3664)\n - spec-test-script: Use -mtext-section-literals for xtensa xip (#3666)\n - spec_test_on_nuttx.yml: Add xtensa (#3665)\n - spec_test_on_nuttx.yml: Enable xip (#3671)\n - spec_test_on_nuttx.yml: Record more logs (#3670)\n - spec_test_on_nuttx.yml: Replace sed with kconfig-tweak (#3672)\n - spec_test_on_nuttx.yml: Retire CONFIG_EOL_IS_LF (#3676)\n - spec-test-script/runtest.py: Use wamrc --xip option for xip (#3683)\n - CI: Bump NuttX version to 12.6 (#3684)\n - wamr-test-suites: Clean up generated tmp files after spec test (#3700)\n - test_wamr.sh: Fix build wabt tool (#3703)\n - NuttX: Retire CONFIG_ARCH_RV32IM and CONFIG_ARCH_RV64GC (#3717)\n - runtest.py: Normallize option handling for XIP mode (#3722)\n - CI: Enable XIP spectest for RISCV32 ILP32F (#3727)\n - CI: Unify configuration stage for NuttX (#3725)\n\n---\n\n## WAMR-2.1.1\n\n### Breaking Changes\n - Sync up with latest wasi-nn spec (#3530)\n\n### New Features\n - Add APIs to get package version (#3601)\n - Export API wasm_runtime_enlarge_memory (#3569)\n - Add table type API support (#3515)\n - Add wasm_runtime_get_module_package_type() and wasm_runtime_get_file_package_type() (#3600)\n\n### Bug Fixes\n - wasm_application.c: Avoid null pointer dereference (#3620)\n - EH: Use the consistent type for EH handlers (#3619)\n - wasm loader: Fix several issues in GC and exception handling (#3586)\n - wasm loader: Fix push_frame_offset when pushing v128 type (#3588)\n - Add integer overflow check for some indices in wasm/aot loader (#3579)\n - aot-analyzer: Fix a few printf formats (#3590)\n - aot-analyzer: Fix macos build (#3589)\n - Fix compilation errors in aot-analyzer tool (#3584)\n - interp debugger: Fix setting invalid value to step_count (#3583)\n - aot loader: Check import global value type before using (#3571)\n - Fix missing stack frame alloc/free in AOT multi-module invoke (#3562)\n - aot loader: Verify global value type (#3560)\n - aot loader: Add more checks in load_native_symbol_section() (#3559)\n - core/shared/platform: Zero memory returned by os_mmap in some platforms (#3551)\n - dwarf_extractor.cpp: Fix buffer overruns (#3541)\n - aot loader: Prevent loading multiple native symbol sections (#3538)\n - Validate func type in aot loader (#3535)\n - wamrc: Fix truncated DW_AT_producer (#3537)\n - wasm loader: Fix pop invalid offset count when stack top is ANY (#3516)\n - Fix two fuzz issues (#3529)\n - Fix several issues reported by oss-fuzz (#3526)\n\n### Enhancements\n - Fix compile warnings/error reported in Windows (#3616)\n - wasm loader: Reject v128 for interpreters (#3611)\n - Fix typos in wamrc and wasm_export.h (#3609)\n - Bump ocaml/setup-ocaml from 2 to 3 (#3604)\n - CMakeLists.txt: Fix Android pthread linkage (#3591)\n - Add more arm AOT reloc entries (#3587)\n - wasi-nn: Use numpy v1 in wasi-nn test requirements.txt (#3582)\n - Optimize for multi-module support in AOT mode (#3563)\n - aot compiler: Propagate const-ness by ourselves (#3567)\n - aot_resolve_target_info: Avoid in-place modification of e_type (#3564)\n - Allow missing imports in wasm loader and report error in wasm instantiation instead (#3539)\n - aot compiler: Use larger alignment for load/store when possible (#3552)\n - Consistent const keyword position in wasm_export.h (#3558)\n - wasm_memory.c: Fix typo: hasn't been initialize -> `hasn't been initialized` (#3547)\n - dwarf_extractor.cpp: Try to preserve link name (#3542)\n - dwarf_extractor.cpp: Enable limited support for C++ (#3540)\n - Sync up with latest wasi-nn spec (#3530)\n - Expose more functions related to emitting AOT files (#3520)\n - Make wasi-nn backends as separated shared libraries (#3509)\n - build_llvm.py: Speed up llvm build with multi procs on windows (#3512)\n - Fix compilation warnings of wasi-nn (#3497)\n - Add missing functions to make RIOT work with the 2.x.x version (#3508)\n\n### Others\n - Update devcontainer.md (#3628)\n - Fix compile errors on workload bwa and benchmark jetstream (#3617)\n - wasm-mutator-fuzz: Set compilers earlier (#3585)\n - wasm-mutator-fuzz: Make compilers overridable (#3578)\n - wasi-nn: Add wasmedge-wasinn-example as smoke test (#3554)\n - Add standalone cases (#3536)\n - wasm-mutator-fuzz: Fix build errors and warnings for macOS (#3519)\n - wasm-mutator-fuzz: Use another variable to check if in oss-fuzz environment (#3518)\n - Add wasi-nn example as smoke test case (#3501)\n\n---\n\n## WAMR-2.1.0\n\n### Breaking Changes\n\n### New Features\n - Add wasm_export.h APIs to expose memory type (#3496)\n - Add api to get export global instance (#3452)\n - Add wasm-mutator-fuzz test (#3420)\n - Implement Memory64 support for AOT (#3362)\n - Add wasm module global type information APIs (#3406)\n - Add aot binary analysis tool aot-analyzer (#3379)\n - Expose API to get import/export function's param/result valkind (#3363)\n - Add WASI support for esp-idf platform (#3348)\n\n### Bug Fixes\n - Fix posix build when libc wasi is disabled and debug interp is enabled (#3503)\n - Fix wasm_mini_loader.c build when jit or multi-module is enabled (#3502)\n - Fix wasm loader check data segment count (#3492)\n - Fix loader parse block type and calculate dynamic offset for loop args (#3482)\n - Fix memory64 handling find_block_addr and execute_main (#3480)\n - Fix two issues to make fuzzing test quit earlier (#3471)\n - Fix test-wamr-ide CI failure (#3485)\n - NuttX: Fix a dbus-related crash on esp32s3 (#3470)\n - Clone data segments when specified with load args (#3463)\n - Fix codeql compilation error (#3461)\n - Fix several typos and fix bh_log calculate mills (#3441)\n - ssp_config.h: Fix ifdef for android random api (#3444)\n - libc-wasi: Fix a locking botch (#3437)\n - Fix fast interp RECOVER_BR_INFO and local set/tee (#3434)\n - aot compiler: Fix a type mismatch in compile_op_float_min_max (#3423)\n - Correct Exception Handling tag type when GC is enabled (#3413)\n - wasm loader: Fix handling if block without op else (#3404)\n - ref-types: Correct default value for function local variables (#3397)\n - aot compiler: Fix the length type passed to aot_memmove/aot_memset (#3378)\n - Fix loader and mini-loader select potiential error (#3374)\n - Fix aot debugger compilation error on windows (#3370)\n - A few native stack detection fixes for macOS/arm64 (#3368)\n - Fix ESP32-S3 compiling error (#3359)\n - Fix a few native stack address calculations (#3351)\n\n### Enhancements\n - Modify logging for windows exception handler and remove unused function (#3489)\n - posix iwasm: Make the timeout logic a bit more robust (#3478)\n - libc-builtin: Enhance buffered print for printf_wrapper (#3460)\n - Enhance GC const initializer expression to support nested struct/array new (#3447)\n - wasi: Tweak the configuration for nuttx and explain why (#3451)\n - NuttX: Replace esp32s3 bits with the OS-provided APIs (#3439)\n - Allow not copying the wasm binary in wasm-c-api and not referring to the binary in wasm/aot loader (#3389)\n - aot: Make precheck functions use short-call for xtensa (#3418)\n - Add wasm_runtime_detect_native_stack_overflow_size (#3355)\n - Enhance wasm loader checks for opcode br_table (#3352)\n\n### Others\n - Bump requests from 2.32.2 to 2.32.3 in /build-scripts (#3494)\n - Enable building static library on Android platform (#3488)\n - wasm-mutator-fuzz: Generate more kinds of corpus (#3487)\n - Correct nuttx repo names (#3484)\n - Bump requests from 2.31.0 to 2.32.2 in /build-scripts (#3474)\n - wasm-mutator-fuzz: Adapt to oss-fuzz compilation (#3464)\n - Add regression tests of BA issue cases (#3462)\n - Add malformed test cases (#3459)\n - NuttX: Rename a few recently-added nuttx options (#3449)\n - wamr-test-suites: Enable AOT multi-module spec tests (#3450)\n - Remove install_wasi_sdk from workload preparation script (#3445)\n - Add cmake static/shared library build settings (#3443)\n - Update spec test to latest commit (#3293)\n - Fix typo of WAMR_CONFIGUABLE_BOUNDS_CHECKS (#3424)\n - ci/coding_guidelines_check.py: Allow some well-known file names to contain '-' (#3428)\n - product-mini/platforms/posix/main.c: Adapt to WASM_MEM_DUAL_BUS_MIRROR (#3427)\n - Add comments to global type function declarations (#3431)\n - nuttx/esp32s3: Apply ibus/dbus adjustment to internal ram 1 as well (#3421)\n - Change WASM_ANYREF to WASM_EXTERNREF (#3426)\n - Remove unused macros which were moved to wamr-app-framework (#3425)\n - Add WASM_V128 in wasm_valkind_enum (#3412)\n - Fix basic example, parameter missmatch between host and wasm (#3415)\n - Fix workspaces path in build_wamr.sh (#3414)\n - core/iwasm/compilation: Remove stale function prototypes (#3408)\n - Add test cases for the requirements of \"gc-aot\" feature (#3399)\n - append_aot_to_wasm.py: Add --ver-str option to emit more info in custom section name (#3398)\n - Fix clang compile warnings (#3396)\n - Fix some more spelling issues (#3393)\n - Fix some spelling issues (#3385)\n - samples/native-stack-overflow: Examine native functions with signature (#3382)\n - Add some more comments on WASM_STACK_GUARD_SIZE (#3380)\n - Fix typo for 'native' in wasm_export.h (#3376)\n - CI: Use macos-13 instead of macos-latest (#3366)\n - Test more samples in nightly-run CI (#3358)\n - Random improvements to samples/native-stack-overflow (#3353)\n - Reduce WASM_STACK_GUARD_SIZE a bit for posix-like platforms (#3350)\n - doc: Add ADOPTERS.md (#3324)\n - Update binary size info in README.md (#3030)\n - core/config.h: Bump the default WASM_STACK_GUARD_SIZE (#3344)\n - Add unit test suites (#3490)\n - Fix internal global getter types (#3495)\n - Fix CI build and run unit tests (#3499)\n\n---\n\n## WAMR-2.0.0\n\n### Breaking Changes\n- The AOT ABI was changed after GC and memory64 features were introduced:\n  - Implement GC feature for interpreter, AOT and LLVM-JIT (#3125)\n  - Implement memory64 for classic interpreter (#3266)\n  - Always allocate linear memory using mmap (#3052)\n  - Refactor APIs and data structures as preliminary work for Memory64 (#3209)\n- Remove unused argument in wasm_runtime_lookup_function (#3218)\n- Separate app-manager and app-framework from WAMR (#3129)\n\n### New Features\n- Implement GC feature for interpreter, AOT and LLVM-JIT (#3125)\n- Implement memory64 for classic interpreter (#3266)\n- Add wasi_ephemeral_nn module support (#3241)\n\n### Bug Fixes\n- EH: Fix broken stack usage calculation (#3121)\n- Fix loader check_wasi_abi_compatibility (#3126)\n- Fix possible integer overflow in loader target block check (#3133)\n- Fix locel.set in polymorphic stack (#3135)\n- Fix threads opcodes' boundary check in classic-interp and fast-interp (#3136)\n- fast-interp: Fix copy_stack_top_i64 overlap issue (#3146)\n- Fix a ubsan complaint \"applying zero offset to null pointer\" (#3160)\n- fast-interp: Fix GC opcode ref.as_non_null (#3156)\n- Fix llvm jit push funcref/externref result type issue (#3169)\n- Fix wasm loader handling opcode br_table (#3176)\n- Fix ref.func opcode check when GC is enabled (#3181)\n- lldb_function_to_function_dbi: Fix a null dereference (#3189)\n- Fix compilation errors on MinGW (#3217)\n- Fix compilation errors on esp-idf platform (#3224)\n- Fix aot relocation symbols not found on windows 32-bit (#3231)\n- posix_file.c: Correct the dirfd argument that passes to fstatat (#3244)\n- Fix compilation errors on zephyr platform (#3255)\n- Fix dynamic offset not updated in op_br for block with ret type (#3269)\n- aot debug: Fix a NULL dereference (#3274)\n- thread mgr: Free aux stack only when it was allocated (#3282)\n- interp: Restore context from prev_frame after tail calling a native function (#3283)\n- Sync simd opcode definitions spec (#3290)\n- Fix posix_fadvise error handling (#3323)\n- Fix windows relocation string parsing issue (#3333)\n\n### Enhancements\n- Zero the memory mapped from os_mmap in NuttX (#3132)\n- Use logger for runtime error/debug prints (#3097)\n- aot_compile_op_call: Stop setting calling convention explicitly (#3140)\n- aot compiler: Place precheck wrapper before the corresponding wrapped function (#3141)\n- Fix null pointer access in fast-interp when configurable soft bound check is enabled (#3150)\n- Clarify how to verify SGX evidence without an Intel SGX-enabled platform (#3158)\n- zephyr: Use zephyr sys_cache instead of CMSIS (#3162)\n- VSCode IDE enhancement and readme update (#3172)\n- Add vprintf override for android and esp-idf (#3174)\n- zephyr: Include math only with minimal libc (#3177)\n- zephyr: Implement Alloc_With_System_Allocator (#3179)\n- Use indirect call in pre-checker function to avoid relocation in XIP mode (#3142)\n- Implement the remaining Windows filesystem functions (#3166)\n- Fix LLVM assertion failure and update CONTRIBUTING.md (#3197)\n- Allow overriding max memory on module instantiation (#3198)\n- Get location info from function indexes in addr2line script (#3206)\n- Demangle function names in stack trace when using addr2line script (#3211)\n- Refactor APIs and data structures as preliminary work for Memory64 (#3209)\n- Allow converting the zero wasm address to native (#3215)\n- Small refactor on WASMModuleInstance and fix Go/Python language bindings (#3227)\n- Add esp32c6 support (#3234)\n- Make android platform's cmake flags configurable (#3239)\n- Go binding: Change C.long to C.int64_t when call wasm_runtime_set_wasi_args_ex (#3235)\n- Implement apis to set and get the name of a wasm module (#3254)\n- Append '\\0' to every name string in aot name section (#3249)\n- Add cmake flag to control aot intrinsics (#3261)\n- Add lock and ref_count for runtime init (#3263)\n- nuttx: Migrate NuttX CMake build for WAMR (#3256)\n- LLVM 19: Switch to debug records (#3272)\n- aot debug: Process lldb_function_to_function_dbi only for C (#3278)\n- Fix warnings/issues reported in Windows and by CodeQL/Coverity (#3275)\n- Enhance wasm loading with LoadArgs and support module names (#3265)\n- Add wamr to esp-idf components registry (#3287)\n- zephyr: Add missing pthread library functions (#3291)\n- Add more checks in wasm loader (#3300)\n- Log warning if growing table failed (#3310)\n- Enhance GC subtyping checks (#3317)\n- User defined memory allocator for different purposes (#3316)\n- Add a comment on WASM_STACK_GUARD_SIZE (#3332)\n- Allow executing malloc/free from native in memory64 mode (#3315)\n- Add functions to expose module import/export info (#3330)\n\n### Others\n- Add ARM MacOS to the CI (#3120)\n- Download jetstream src from github instead of browserbench.org (#3196)\n- Update document to add wamr-rust-sdk introduction (#3204)\n- Fix nightly run tsan ASLR issue (#3233)\n- Add CodeQL Workflow for Code Security Analysis (#2812)\n- Add issue templates (#3248)\n- Fix CI error when install packages for macos-14 (#3270)\n- Update document for GC, exception handling and memory64 features (#3284)\n- Update release CI (#3295)\n- Add native-stack-overflow sample (#3321)\n\n---\n\n## WAMR-1.3.2\n\n### Breaking Changes\n\n### New Features\n- Implement Exception Handling for classic interpreter (#3096)\n  - Use `cmake -DWAMR_BUILD_EXCE_HANDLING=1/0` option to enable/disable\n    the feature, and by default it is disabled\n  - It is still in highly experimental stage\n\n### Bug Fixes\n- Fix build errors when initializing wasm_val_t values with macros (#3007)\n- fix(wasm-c-api): Do not clone stack frames if there's no trap (#3008)\n- classic-interp: Handle SIMD opcode when JIT is enabled (#3046)\n- fast-interp: Fix dynamic offset error issue in else branch (#3058)\n- wasm_cluster_destroy_spawned_exec_env: Avoid \"invalid exec env\" trap (#3068)\n- thread-mgr: Fix locking problems around aux stack allocation (#3073)\n- cosmopolitan: Update compiler and update platform_internal.h (#3079)\n- wasi: Apply wasm_runtime_begin_blocking_op to poll as well (#3080)\n- Fix memory/table segment checks in memory.init/table.init (#3081)\n- perf profiling: Adjust the calculation of execution time (#3089)\n- aot: Fix LLVMSetTailCallKind check (#3099)\n- fast-interp: Fix stack recovery for else branch (#3100)\n- fast-interp: Fix frame_offset pop order (#3101)\n- Fix AOT compilation on MacOS (#3102)\n- fast-interp: Fix block with parameter in polymorphic stack issue (#3112)\n- Fix read and validation of misc/simd/atomic sub opcodes (#3115)\n\n### Enhancements\n- Clear compilation warning and dead code (#3002)\n- aot debug: Try to use a bit more appropriate file names (#3000)\n- Increase default app thread stack size (#3010)\n- Rename rwlock_init to avoid conflict (#3016)\n- nuttx: Use larger alignment for os_mmap and comment why (#3017)\n- Allow using mmap for shared memory if hw bound check is disabled (#3029)\n- Don't redefine D_INO if already defined (#3036)\n- Enhancements on wasm function execution time statistic (#2985)\n- wamr-compiler: Fix non-x86{_64} host builds (#3037)\n- Disable quick aot entry for interp and fast-jit (#3039)\n- nuttx: Add option to enable quick aot entry (#3040)\n- Set CONFIG_HAS_CAP_ENTER to support posix file api for freertos (#3041)\n- Revert \"Enable MAP_32BIT for macOS (#2992)\" (#3032)\n- Enable quick aot entry when hw bound check is disabled (#3044)\n- Do not inherit WASM_SUSPEND_FLAG_BLOCKING from the parent thread (#3051)\n- wasm_runtime_begin_blocking_op: A comment about usage expectation (#3056)\n- Check arguments before calling bh_hash_map_find (#3055)\n- Fix aot large model (--size-level=0) with LLVM 18 (#3057)\n- Add flag to control Winsocket initialization (#3060)\n- nuttx: If STACK_GUARD_SIZE is not set, leave it to config.h (#2927)\n- Enhance setting write gs base with cmake variable (#3066)\n- aot_reloc_x86_64.c: Suggest to try --size-level=0 as well (#3067)\n- Fix some issues reported by CodeQL (#3064)\n- Remove a lot of \"unused parameter\" warnings (#3075)\n- Forward log and log level to custom bh_log callback (#3070)\n- Fix inconsistent code style in aot_loader.c (#3082)\n- freertos: Thread exit more common (#3094)\n- Fix windows build error and compilation warnings (#3095)\n\n### Others\n- Fix nightly-run CI failure (#3014)\n- Build samples in debug mode (#3019)\n- Remove deprecated tests in language-bindings python (#3018)\n- Avoid unused thread_id warning and recompile multi-module sample (#3033)\n- samples/terminate: Add a sample to demonstrate wasm_runtime_terminate (#3043)\n- Bump NuttX version to 12.4.x in CI (#3047)\n- perf_tune.md: Add refine the calling processes between host and wasm (#3065)\n- build_wamr.md: Update the document (#3074)\n- Fix download link for wasi-sdk (#3077)\n- README.md: Fix typo tunning to tuning (#3078)\n- Update outdated reference link in multi_module.md (#3092)\n- Add comments to suppress warning from clang-tidy (#3088)\n- CI: Update version of checkout to suppress warnings (#3093)\n- test_wamr.sh: Allow using test script on different platforms (#3098)\n\n---\n\n## WAMR-1.3.1\n\n### Breaking Changes\n- In multi-threading, when an exception was thrown in wasm_func_call(),\n  the trap returned contains the stack frames of the thread where the\n  exception occurs, but not the stack frames of the main thread.\n- Disable emitting custom name section to AOT file with\n  `wamrc --enable-dump-call-stack` option, instead, use\n  `wamrc --emit-custom-sections=name` to emit it and make it clear.\n\n### New Features\n- Enable AOT linux perf support (#2930)\n\n### Bug Fixes\n- Corrects Zephyr include files for current versions of Zephyr (#2881)\n- Fix possible dead lock in wasm_cluster_spawn_exec_env (#2882)\n- Handle ambiguous fstflags on fd_filestat_set_times (#2892)\n- Fix memory size not updating after growing in interpreter (#2898)\n- fixed(freertos): Fix crash when wasm app call pthread_exit(NULL) (#2970)\n- fast-jit: Fix const shift and const i64 compare issues (#2969)\n- Fix ref.is_null processing in fast-interp loader (#2971)\n- simd-128: The input lanes of integer-to-integer narrowing ops should be interpreted as signed (#2850)\n- Fix ref.func function declared check in wasm loader (#2972)\n- Fix fast-interp polymorphic stack processing (#2974)\n- Fix potential recursive lock in pthread_create_wrapper (#2980)\n- Fix build failure on esp-idf platform (#2991)\n- Return stack frames of crashed thread when using wasm-c-api (#2908)\n- Fix compilation error on iOS due to macOS-specific API (#2995)\n- Fix a bug when emit the custom name section to aot file (#2987)\n- Fix linux-sgx build error when libc-wasi is disabled (#2997)\n\n### Enhancements\n- fix command-reactor: Look for _initialize only if _start not found (#2891)\n- Refactor reloc symbols for riscv (#2894)\n- Avoid memory import failure when wasi-threads is enabled (#2893)\n- interpreter: Simplify memory.grow a bit (#2899)\n- Avoid reporting timestamp if custom logger is used (#2905)\n- Expose API to set log level in embedder (#2907)\n- Add a script to translate jitted function names in flamegraph (#2906)\n- Refine wasm-c-api wasm_func_call (#2922)\n- Add VectorCombine pass for JIT and AOT (#2923)\n- Enable wasm_runtime_terminate for single-threading (#2924)\n- nuttx: Add CONFIG_INTERPRETERS_WAMR_DEBUG_AOT (#2929)\n- Allow to control built-in libraries for wamrc from command line options (#2928)\n- Fix a bug that appends '_precheck' to aot_func (#2936)\n- freertos: Add os_cond_broadcast for pthread wrapper (#2937)\n- Append .aot to .wasm as a custom section named \"aot\" (#2933)\n- fix(sgx-ra): Fix building when enclave is built without librats ahead (#2968)\n- Refine LLVM JIT function call process (#2925)\n- Refine AOT function call process (#2940)\n- Allow to set segue flags for wasm-c-api JIT (#2926)\n- freertos: Minor changes for freertos libc_wasi build adaption (#2973)\n- freertos: Change ssp_config.h due to clock_nanosleep() not supported in freertos (#2979)\n- aot compiler: Some updates for LLVM 18 (#2981)\n- Enable MAP_32BIT for macOS (#2992)\n- Register quick call entries to speedup the aot/jit func call process (#2978)\n- Refine AOT/JIT code call wasm-c-api import process (#2982)\n\n### Others\n- compilation_on_nuttx.yml: Use docker image to simplify env setup (#2878)\n- samples/spawn-thread: Disable libc and pthread (#2883)\n- Add arm64 to nuttx compilation test (#2886)\n- samples/spawn-thread: Tweak to expose a bug (#2888)\n- Fix typo in CI config and suppress STORE_U8 in TSAN (#2802)\n- Using docker image for nuttx spectest (#2887)\n- doc: Separate source_debugging.md into two files (#2932)\n- doc/build_wasm_app.md: Add a note about aot abi compatibility (#2993)\n\n---\n\n## WAMR-1.3.0\n\n### Breaking Changes\n- Abstract POSIX filesystem functions (#2585)\n  - Change API wasm_runtime_set_wasi_args_ex's arguments\n    `int stdinfd/stdoutfd/stderrfd` to `int64_t stdinfd/stdoutfd/stderrfd`\n- core/iwasm: Support mapped file system access on non-libuv WASI (#2628)\n  - Enable mapping host directories to guest directories by parsing\n    the `map_dir_list` argument in API `wasm_runtime_init_wasi` for libc-wasi\n- Support muti-module for AOT mode (#2482)\n  - Add argument `package_type_t module_type` for module_reader callback\n- Generate jitdump to support linux perf for LLVM JIT (#2788)\n  - Add a field `bool linux_perf_support` in RuntimeInitArgs\n- Remove provision of unnecessary fd rights (#2579)\n- libc-wasi: Conditionally support SYNC flags (#2581)\n\n### New Features\n- Support muti-module for AOT mode (#2482)\n- Implement libc-wasi for Windows platform (#2740)\n- Implement module instance context APIs (#2436)\n- Implement async termination of blocking thread (#2516)\n- Generate jitdump to support linux perf for LLVM JIT (#2788)\n- Add Cosmopolitan Libc Platform (#2598)\n\n### Bug Fixes\n- sgx-ra: Disable the building of samples (#2507)\n- Handle a return from wasi _start function correctly (#2529)\n- fd_object_release: Preserve errno (#2535)\n- Fix build error with ancient GCC (4.8) (#2553)\n- Fix compiling error for RT-Thread (#2569)\n- Fix potential unaligned store issue when extra return value is v128 (#2583)\n- Fix loader push_pop_frame_ref_offset (#2590)\n- Fix compilation error on Android platform (#2594)\n- Ignore handling SIG_DFL/SIG_IGN for previous sig action (#2589)\n- Fix nightly run sanitizer error in Fast JIT (#2601)\n- Check ValueKind before extracting a constant int value (#2595)\n- Patch implementations of vfbinop(min,max,pmin,pax) (#2584)\n- Improve stack trace dump and fix coding guideline CI (#2599)\n- aot_resolve_stack_sizes: Disable the size check for now (#2608)\n- Remove module instance from hashmap in wasi_nn_destroy (#2613)\n- Fix label index out-of-range references in op_br_table_cache (#2615)\n- Fix compilation of shift opcodes on x86_64 and i386 architectures (#2619)\n- Fix potential issue in aot compiler when translating block opcodes (#2622)\n- Use another default pipeline when opt-level is 0 (#2624)\n- Fix AOT shift operations for indirect constants (#2627)\n- Fix fast-interp \"pre-compiled label offset out of range\" issue (#2659)\n- Revert \"Strip static and shared libraries of iwasm to reduce the binary size (#2431)\" (#2669)\n- Fix windows compilation on C++20 (#2670)\n- Fix fast-jit f32/f64 truncate to i32/i64 (#2671)\n- Fix use getrandom on cosmopolitan libc (#2674)\n- Fix repeatedly initialize shared memory data and protect the memory's fields (#2673)\n- Minor fixes for Go bindings (#2676)\n- Fix issues reported by Coverity (#2681)\n- Add more buffer boundary checks in wasm loader (#2734)\n- Grab cluster->lock when modifying exec_env->module_inst (#2685)\n- Fix CMSIS import with Zephyr 3.4+ (#2744)\n- Fix log messages in Zephyr example (#2761)\n- Fix fast-jit callnative translation (#2765)\n- aot compiler: Disable musttail for thumb (#2771)\n- Fix data/elem drop (#2747)\n- Fix formatting in aot_dump_perf_profiling (#2796)\n- Fix formatting in wasm_dump_perf_profiling (#2799)\n- Fix memory.init opcode issue in fast-interp (#2798)\n- aot compiler: Fix handle next reachable if block (#2793)\n- Fix configurable bounds checks typo (#2809)\n- Attestation: Free JSON from the Wasm module heap (#2803)\n- Update Zephyr support to v3.5.0 and make instructions generic to boards (#2805)\n- Return error when shutdown() fails (#2801)\n- iwasm: Print help when meeting unknown cmd options (#2824)\n- Fix fast-jit accessing shared memory's fields issue (#2841)\n- Fix wasm loader handle op_br_table and op_drop (#2864)\n- Fix block with type issue in fast interp (#2866)\n- Fix float argument handling for riscv32 ilp32d (#2871)\n- Portably handle fd_advise on directory fd (#2875)\n- Fix sample basic intToStr was called with wrong length (#2876)\n\n### Enhancements\n- Implement strict validation of thread IDs according to the specification (#2521)\n- Stop abusing shared memory lock to protect exception (#2509)\n- Implement os_usleep for posix (#2517)\n- set_exception_visitor: Remove the special case for wasi proc exit (#2525)\n- Revert \"Return error when exception was raised after main thread finishes\" (#2524)\n- libc-wasi: Remove unused code (#2528)\n- Add callback to handle memory.grow failures (#2522)\n- Add context to enlarge memory error callback (#2546)\n- Add ARM aeabi symbol for clearing memory content in a specific range (#2531)\n- Unifdef -U WASMTIME_SSP_STATIC_CURFDS (#2533)\n- Fix typo for IP address buffer (#2532)\n- Add an API to terminate instance (#2538)\n- Add user to enlarge memory error callback (#2546)\n- runtest.py: Show accurate case amount in summary (#2549)\n- Allow using custom signal handler from non-main thread (#2551)\n- Return __WASI_EINVAL from fd_prestat_dir_name (#2580)\n- Support AOT compiler with LLVM 17 (#2567)\n- Add support for closing/renumbering preopen fds (#2578)\n- Enable AOT usage on M1 mac (#2618)\n- core/iwasm: Support mapped file system access on non-libuv WASI (#2628)\n- Enable MASM automatically in runtime_lib.cmake (#2634)\n- Abstract POSIX filesystem functions (#2585)\n- Implement wasi clock_time/clock_res get (#2637)\n- Fix several typo/warning/unused-code issues (#2655)\n- Partial windows filesystem implementation (#2657)\n- Apply no_sanitize_address for clang compiler in several places (#2663)\n- Refactor clock functions to use WASI types (#2666)\n- Refine lock/unlock shared memory (#2682)\n- Fix several AOT compiler issues (#2697)\n- Fix AOT compiler simd shift opcodes (#2715)\n- Fix invalid use of jit_reg_is_const_val in fast-jit (#2718)\n- Use user defined malloc/free functions for user defined memory allocator (#2717)\n- Move WASI types into separate header (#2724)\n- Provide default vprintf on UWP (#2725)\n- Fix typo in Zephyr simple example (#2738)\n- Fix switch-case fallthrough compilation warning (#2753)\n- Add eabihf ABI support and set vendor-sys of bare-metal targets (#2745)\n- Return uint32 from WASI functions (#2749)\n- Add compilation flag to enable/disable heap corruption check (#2766)\n- Extend os_mmap to support map file from fd (#2763)\n- Fix printing ref.extern addresses in wasm_application.c (#2774)\n- Remove unused JitBitmap (#2775)\n- Use next generation crypto API on Windows (#2769)\n- More precise help info of enabled targets for wamrc (#2783)\n- Refine atomic operation flags in bh_atomic.h (#2780)\n- Fix comment in WAMR_MEM_DUAL_BUS_MIRROR (#2791)\n- Fix return type in wasm_loader_get_custom_section (#2794)\n- Add support for custom sections in nuttx (#2795)\n- Change is_shared_memory type from bool to uint8 (#2800)\n- Fix typos in zephyr platform struct descriptions (#2818)\n- Access linear memory size atomically (#2834)\n- Output warning and quit if import/export name contains '\\00' (#2806)\n- Use wasm_config_t to pass private configuration to wasm_engine_new (#2837)\n- core/iwasm/interpreter/wasm_loader.c: remove an extra validation (#2845)\n- Don't add \"+d\" to riscv cpu features if already given (#2855)\n- Fix compilation warnings on Windows (#2868)\n\n### Others\n- Add mutex stress test (#2472)\n- Add unit tests for the tid allocator (#2519)\n- Add support for running tests on apple M1 macs (#2554)\n- export_native_api.md: Add a note about thread termination (#2572)\n- test_wamr.sh: Print a bit more meaningful message (#2574)\n- run_wasi_tests.sh: Provide stdin by ourselves (#2576)\n- Fix a few issues in \"run_wasi_tests.sh: provide stdin by ourselves\" (#2582)\n- Fix compile error of tsf benchmark (#2588)\n- test_wamr.sh: Bump wasi-testsuite version (#2568)\n- samples/inst-context-threads: Add a brief explanation (#2592)\n- doc/memory_tune.md: \"remove malloc\" hack is not relevant to wasi-threads (#2603)\n- Refactor stress tests to make them runnable in reactor mode (#2614)\n- Run rust tests from wasi-testsuite (#2484)\n- spec-test-script: Fix NaN comparision between v128 values (#2605)\n- CI: Enable testing AOT multi-module feature (#2621)\n- Vote for nomination of Woods, Chris and Trenner, Thomas as TSC members (#2638)\n- Add tsan for fast interp and aot (#2679)\n- Enable WASI tests on Windows CI (#2699)\n- docs: Fix typo in export native APIs doc (#2750)\n- Update RISC-V compilers in Nuttx compilation CI and spec test CI (#2756)\n- Enable more LLVM backends for the release wamrc binary (#2778)\n- Disable FPU in NuttX spec test (#2781)\n- Fix broken links in app-mgr README.md (#2786)\n- Fix build error of libsodium benchmark (#2792)\n- Fix wamr-test-suites script for macos (#2819)\n- Run spec test for classic/fast-interp in NuttX CI (#2817)\n- test_wamr.sh: Don't bother to build shared library (#2844)\n- doc/build_wamr.md: Fix links to RISC-V named ABIs (#2852)\n- Fix typos of CIDR in docs and help text (#2851)\n- Enable spectest on riscv64 (#2843)\n- Update FPU configuration in spec_test_on_nuttx.yml (#2856)\n\n---\n\n## WAMR-1.2.3\n\n### Breaking Changes\n- Increase default native stack size (#2332)\n\n### New Features\n- Implement the segue optimization for LLVM AOT/JIT (#2230)\n- Implement AOT static PGO (#2243)\n- Enable static PGO for Linux SGX (#2270)\n- Add Rust Formatters to Debugger (Vector, Map etc.) (#2219)\n\n### Bug Fixes\n- The Python language-binding needs python>=3.9 (#2228)\n- aot_compile_op_call: Remove a wrong optimization (#2233)\n- Fix typo in samples/ref-types (#2236)\n- Update thread proposal ignore cases (#2246)\n- Disable writting GS register on linux-sgx platform (#2255)\n- Fix compile error of wamrc with llvm-13/llvm-14 (#2261)\n- aot/jit: Set module layout (#2260)\n- Fix build error with LLVM 16 (#2259)\n- spec-test-script: Disable conversions.wast on i386 (#2269)\n- Fix a heap corruption bug in ems realloc (#2279)\n- Fix fast-interp issue of LAST_OP_OUTPUT_I32/64 check (#2295)\n- Fix wamrc build issues with LLVM 13 and LLVM 16 (#2313)\n- aot: Move stack_sizes table to a dedicated section (#2317)\n- product-mini/platforms/linux: Mark vmlib POSITION_INDEPENDENT_CODE (#2323)\n- aot: Avoid possible relocations around \"stack_sizes\" for XIP mode (#2322)\n- Avoid switch lowering to lookup tables for XIP (#2339)\n- Fix typo in zephyr's Dockerfile.old (#2354)\n- Fix typo (dwarf) in the codebase (#2367)\n- Implement suspend flags as atomic variable (#2361)\n- Fix llvm jit failed to lookup aot_stack_sizes symbol issue (#2384)\n- Fix some check issues on table operations (#2392)\n- Fix ExpandMemoryOpPass doesn't work properly (#2399)\n- Fix non-builtin BH_ATOMIC_32_FETCH_OR and BH_ATOMIC_32_FETCH_AND (#2400)\n- Fix wasi-sockets tests (#2389)\n- Fix result arity check on select_t opcode (#2406)\n- Re-organize intrinsics in aot_reloc_riscv.c to fix some FPU issues (#2414)\n- Fix lib-pthread issues (#2410)\n- Fix typo in test_wamr.sh (#2421)\n- Fix memory sharing (#2415)\n- wasm_export.h: Fix struct wasm_val_t (#2435)\n- Fix typos in wamrc print_help() (#2442)\n- iwasm: Fix native lib cleanup after error occurs (#2443)\n- Correct --heap-size option in messages (#2458)\n- wasm_instantiate: Fix a potential integer overflow issue (#2459)\n- Fix windows link error and clear windows warnings (#2463)\n- aot: Disable musttail for mips (#2457)\n- Fix opcode overwrite issue in fast interp (#2476)\n- wamrc: Fix windows relocation to `aot_func_internal#n` (#2474)\n- Fix windows AOT hw bound check (#2475)\n- Fix typo in aot_emit_aot_file.c (#2478)\n\n### Enhancements\n- A few changes related to WAMRC_LLC_COMPILER (#2218)\n- Enhance linux-sgx CI (#2102)\n- Add asan and ubsan to WAMR CI (#2161)\n- Update doc on WAMR_DISABLE_HW_BOUND_CHECK 32-bit (#2262)\n- wamrc: Add an incompatibility note in the help message (#2276)\n- Add cmake variable to disable writing gs register (#2284)\n- Make hmu_tree_node 4 byte aligned to reduce compiler warning (#2268)\n- Appease unused warning on min_uint64 (#2277)\n- Fix format warning by PRIu32 in [wasm|aot] dump call stack  (#2251)\n- Fix a compile warning due to missing include (#2293)\n- Fix dockerfile linter warnings (#2291)\n- Enable windows x86-32 AOT relocations (#2285)\n- wamr-ide: Add vscode extension tests (#2292)\n- AOT/JIT native stack bound check improvement (#2244)\n- Add retries to flaky step in nightly run CI (#2306)\n- Use system libuv if available (#1861)\n- wasi-nn: Simplify cmake and headers' location (#2308)\n- wasi-nn: Improve tests paths for local dev (#2309)\n- aot: Implement a few more relocation types for riscv (#2318)\n- wasi-nn: Add support of wasi-nn as shared lib (#2310)\n- Add a few more assertions on structures to which aot abi is sensitive (#2326)\n- Fix sanitizer errors in posix socket  (#2331)\n- Add \"--xip\" option for wamrc (#2336)\n- Add \"--enable-llvm-passes=<passes>\" option to wamrc (#2335)\n- Make memory access boundary check behavior configurable (#2289)\n- Migrate ExpandMemoryOpPass to llvm new pass manager (#2334)\n- Allow defining hints without exact socket type or address family (#2337)\n- wamrc: Warn on text relocations for XIP (#2340)\n- Add scripts to validate lldb source debugger (#2150)\n- Add docker file to fix Zephy ESP32 linking issue (#2314)\n- Add \"--native-lib=<lib>\" option to wamrc (#2342)\n- Fix unused warnings on disable_bounds_checks (#2347)\n- Add \"--enable-builtin-intrinsics=<flags>\" option to wamrc (#2341)\n- nuttx: Add a kconfig for wasi-threads (#2343)\n- iwasm: Disable app heap by default if wasi is enabled (#2346)\n- Fix some static scan issues (#2362)\n- Bring up WAMR on esp32-s3 device (#2348)\n- ESP-IDF platform supports to load AOT to PSRAM and run it (#2385)\n- Add hadolint CI for Dockerfile linting (#2387)\n- Move generic parts of wasm_suspend_flags.h to bh_atomic.h (#2393)\n- bh_atomic.h: Add comments (#2398)\n- bh_atomic.h: Add BH_ATOMIC_32_FETCH_ADD/BH_ATOMIC_32_FETCH_SUB (#2408)\n- Update libuv version to v1.46.0 (#2405)\n- Remove a few unused functions (#2409)\n- Add initial stress test (#2364)\n- Move wasm_runtime_destroy_wasi and wasi_nn_destroy calls together (#2418)\n- embed_wamr.md: Improvements about threads (#2420)\n- Add runtime inited checks in Enclave command handlings to improve security (#2416)\n- Add some relocation symbols for xtensa target (#2422)\n- Remove unnecessary and extra zero length check in mem functions' macro (#2428)\n- Introduce WASMModuleInstanceExtraCommon (#2429)\n- Strip static and shared libraries of iwasm to reduce the binary size (#2431)\n- Auto-check wrgsbase in cmake script (#2437)\n- iwasm: call native lib init/deinit if exists (#2439)\n- wasi-nn: Support uint8 quantized networks (#2433)\n- Implement `wasm_externref_objdel` and `wasm_externref_set_cleanup` (#2455)\n- wasi-nn: Improve TPU support (#2447)\n- wamr-python: Enable debugging WASM and grant dir access (#2449)\n- Build wasi-libc from source in WAMR CI (#2465)\n- wamrc: More friendly to print help info (#2451)\n- Add another wamr test (#2411)\n- Fix issues reported by Coverity and clear windows warnings (#2467)\n- Clone the input binary during wasm_module_validate (#2483)\n\n### Others\n- Nuttx CI: Ignore the expired certificate for riscv gcc toolchain (#2222)\n- core/iwasm/compilation: constify a bit (#2223)\n- Bump requests from 2.28.2 to 2.31.0 in /build-scripts (#2229)\n- dwarf_extractor: Constify a bit (#2278)\n- AOTFuncContext: Remove a stale comment (#2283)\n- Add performance tunning document (#2286)\n- Reduce CI jobs number (#2296)\n- CI: Update used node version to 16 (#2303)\n- Update Docker image for latest version of external libraries & tools (#2374)\n- Upgrade cJSON version to v1.7.16 (#2404)\n- Upgrade XNNPACK workload (#2394)\n- Build more benchmarks in workload XNNPACK (#2417)\n- Upgrade SGX-RA integration for 0.1.2 and Ubuntu 20.04 (#2454)\n- Add sample pre-commit hook (#2470)\n\n---\n\n## WAMR-1.2.2\n\n### Breaking Changes\n\n### New Features\n- Implement Fast JIT multi-threading feature (#2134)\n\n### Bug Fixes\n- Update request.ts wasm_response_send signature (#2122)\n- Fix ems allocator unaligned memory access on riscv64 (#2140)\n- libc_wasi_wrapper.c: Fix min func issue for size_t < 8 bytes on some platforms (#2152)\n- Fix three multi-threading and wasm-c-api-imports issues (#2173)\n- Fix build polybench benchmark error with wasi-sdk-19.0 (#2187)\n- Fix wamr-ide debugger ignoring launch config (#2155)\n\n### Enhancements\n- Add test for validating linear memory size updates (#2078)\n- Update Zephyr docs to remove unsupported west subcommand (#2128)\n- Update messages/comments to refer the new place of the version definition (#2133)\n- build_wamr_lldb.yml: sync lldb build options between ubuntu and macos (#2132)\n- build_wamr_vscode_ext.yml: vsce publish only on the official repo (#2130)\n- VSCode-Extension: Download lldb built for ubuntu 20.04 (#2139)\n- Avoid re-installing if Tensorflow is already installed for WASI-NN (#2148)\n- wamrc: Add --stack-usage option (#2158)\n- Fix URL in language-bindings/python/README.md (#2166)\n- Fix URL in embed_wamr.md (#2165)\n- Fix URL in README.md (#2168)\n- Return error when exception was raised after main thread finishes (#2169)\n- wasi-nn: Add external delegation to support several NPU/GPU (#2162)\n- Update document for iwasm/wamrc dependent packages (#2183)\n- Use a manual flag to disable clock_nanosleep on the unsupported platforms (#2176)\n- Fix compile warnings on windows platform (#2208)\n\n### Others\n- CI: Add ubsan checks to samples/wasm-c-api (#2147)\n- CI: More precise trigger paths for github actions (#2157)\n\n---\n\n## WAMR-1.2.1\n\n### Breaking Changes\n\n### New Features\n\n### Bug Fixes\n- libc-wasi/posix.c: Fix POLL{RD,WR}NORM in uClibc (#2069)\n- Fix bh_assert for 64-bit platforms (#2071)\n- wamr-ide: Modify Dockerfile to update base image version and fix build issue (#2068)\n- Fix module_malloc/module_free issues (#2072)\n- Fix use after free when dumping call stack (#2084)\n- Fix compilation errors of workload xnnpack and meshoptimizer (#2081)\n- Fix typo in Fast JIT's BUILD_COND_BR Macro (#2092)\n- Fix sanitizer pointer overflow warning when perform pointer arithmetic (#2098)\n- Update sample workload tensorflow (#2101)\n- Fix ref.func forward-declared function check (#2099)\n- Fix interpreter read linear memory size for multi-threading (#2088)\n\n### Enhancements\n- Limit the minimal size of bh_hashmap (#2073)\n- Bump tensorflow to 2.11.1 in /core/iwasm/libraries/wasi-nn/test (#2061)\n- Bump tensorflow to 2.11.1 in install_tensorflow.sh (#2076)\n- Add support for universal binaries on OSX (#2060)\n- Update documents (#2100)\n\n### Others\n- spectest/nuttx: Increase stack size of iwasm task (#2082)\n- ci: Refactor windows build definition (#2087)\n- ci: Enable WASI threads in CI (#2086)\n- Use wasi-sdk-20 to build wasi-threads cases in CI (#2095)\n\n---\n\n## WAMR-1.2.0\n\n### Breaking Changes\n\n\n### New Features\n- Implement two-level Multi-tier JIT engine: tier-up from Fast JIT to LLVM JIT to get quick cold startup and better performance\n- Enable running mode control for runtime, wasm module instance and iwasm\n- Implement wasi-threads feature\n- Upgrade toolkits: upgrade to llvm-15.0, wasi-sdk-19.0, emsdk-3.1.28 and so on\n- Port WAMR to the FreeBSD platform\n- Refactor wasi-nn to simplify the support for multiple frameworks\n- wasi-nn: Enable GPU support\n- wasi-nn: Support multiple TFLite models\n- Add WAMR API bindings in Python\n- Add libsodium benchmark\n\n### Bug Fixes\n- Fix wasm-c-api import func link issue in wasm_instance_new\n- Fix watchpoint segfault when using debug interp without server\n- libc-wasi: Fix spurious poll timeout\n- Fix typo verify_module in aot_compiler.c\n- Fix failure about preopen of reactor modules\n- Fix equal check in AOT XIP float cmp intrinsic\n- Fix issue of resolving func name in custom name section\n- Fix go language binding build on macos arm64\n- Prevent undefined behavior from c_api_func_imports == NULL\n- Fix potential block issue in source debugger\n- SGX IPFS: Fix a segfault and support seeking beyond the end of files while using SEEK_CUR/SEEK_END\n- Fix undef error about WAMR_BUILD_MEMORY_PROFILING\n- Fix jit memory overwritten after instance deinstantiate\n- Fix stack alignment issue on ia32\n- Fix explicit casts and types in espidf_socket.c\n- Fix potential integer overflow issue in wasm-c-api\n- Fix libc-wasi build failure when using clang\n- Fix wamrapi python binding for darwin\n- Fix getting port issue in posix os_socket_bind\n- Fix key error in build_llvm.py\n- nuttx: Add missing pthread.h header\n- Fix os_socket_addr_resolve() for IPv6\n- Enhance/Fix sample socket-api and workload\n- Fix fast-jit build error\n- Fix dead lock in source debugger\n- fix debugger: Set termination flags also when in debug mode\n\n### Enhancements\n- Add WAMR-IDE vscode extension to the Visual Studio Marketplace\n- Refine Windows thread waiting list operations\n- Improve wasm-c-api instantiation-time linking\n- Enable platform support for esp-idf v5.0.1\n- Readme refactoring\n- Add architecture diagram for wasm function\n- Add architecture document for wasm export\n- Add architecture diagram for wasm globals and classic-interp stack frame\n- Use boringssl instead of openssl to implement wasm cache loading\n- Implement i32.rem_s and i32.rem_u intrinsic\n- Perfect the codebase for wamr-ide\n- Remove unnecessary ret value control when spec test is enabled\n- Use float version library routine for XIP aot_intrinsic_xxx APIs\n- Register missing symbols for f32 to 64 bit integer conversion\n- Report error in instantiation when meeting unlinked import globals\n- Add more types and APIs for attr_container\n- Simplify fcmp intrinsic logic for AOT/XIP\n- Add some missing macros for int literals in wamr-sdk libc-builtin-sysroot stdint.h\n- nuttx: Mock socket APIs if NET is disabled\n- Main thread spread exception when thread-mgr is enabled\n- Implement opcode atomic.wait and atomic.notify for Fast JIT\n- Add docker images auto check and setup support for WAMR-IDE\n- Make memory profiling show native stack usage\n- Enable gcc-4.8 compilation\n- Enable specifying out-of-source platform configuration cmake file\n- Add gh api call for fetching llvm version (#1942) Fixes\n- Don't terminate other threads when create thread failed\n- Modify poll_oneoff in libc-wasi to make it interruptible\n- Expose wasm_runtime_call_indirect\n- Make a workaround for EGO when fstat returns NOT_SUPPORT\n- Re-org calling post instantiation functions\n- Enable custom llvm build flags\n- support SSH for git clone llvm\n- Support dump call stack on exception and dump call stack on nuttx\n- Update document for source debugging\n- Document some info about estimating memory usage\n- Document the summary of two pthread implementations\n- Refine aot compiler check suspend_flags and fix issue of multi-tier jit\n\n### Others\n- Enable XIP in CI daily test\n- Integrate wasi test suite to wamr-test-suites and CI\n- Add CI for wasi-threads tests\n- Update CIs and documents to make naming of generated binaries consist\n- Enable CI wasi test suite for x86-32 classic/fast interpreter\n- CI: Enable libc-wasi compilation test on NuttX\n- CI: Enable Multi-tier JIT by default for released iwasm binary\n- Enable CI build for gcc 4.8 on linux\n\n---\n\n## WAMR-1.1.2\n\n### Breaking Changes\n- Remove the LLVM MCJIT mode, replace it with LLVM ORC JIT eager mode\n- Add option to pass user data to the allocator functions of RuntimeInitArgs\n- Change how iwasm returns:\n  - return 1 if an exception was thrown, else\n  - return the wasi exit code if the wasm app is a wasi app, else\n  - keep the same behavior as before\n- Enable bulk memory by default\n\n### New Features\n- Add control for the native stack check with hardware trap\n- Add memory watchpoint support to debugger\n- Add wasm_module_obtain() to clone wasm_module_t\n- Implement Fast JIT dump call stack and perf profiling\n- esp-idf: Add socket support for esp-idf platform\n\n### Bug Fixes\n- Fix XIP issue caused by rem_s on RISC-V\n- Fix XIP issues of fp to int cast and int rem/div\n- Fix missing float cmp for XIP\n- Correct the arch name for armv7a on NuttX\n- Fix issue of restoring wasm operand stack\n- Fix issue of thumb relocation R_ARM_THM_MOVT_ABS\n- Fix fast jit issue of translating opcode i32.rem_s/i64.rem_s\n- Fix interp/fast-jit float min/max issues\n- Fix missing intrinsics for risc-v which were reported by spec test\n- wasm-c-api: Fix init/destroy thread env multiple times issue\n- Fix wasm-c-api import func link issue in wasm_instance_new\n- Fix sample ref-types/wasm-c-api build error with wat2wasm low version\n- Fix zephyr sample build errors\n- Fix source debugger error handling: continue executing when detached\n- Fix scenario where the timeout for atomic wait is set to negative number\n- Fix link cxx object file error when building wamrc for docker image\n- Fix XIP issue of handling 64-bit const in 32-bit target\n\n### Enhancements\n- Refactor the layout of interpreter and AOT module instance\n- Refactor LLVM JIT: remove mcjit and legacy pass manager, upgrade to ORCv2 JIT\n- Refine Fast JIT call indirect and call native process\n- Refine Fast JIT accessing memory/table instance and global data\n- Refine AOT exception check when function return\n- Enable source debugger reconnection\n- Add wasm_runtime_get_wasi_exit_code\n- linux-sgx: Use non-destructive modes for opening files using SGX IPFS\n- Add wasm_runtime_unregister_natives\n- Implement invokeNative asm code for MinGW\n- Add wamr Blog link and Gitbook link to readme\n- Remove unnecessary app heap memory clean operations to reduce process RSS\n- Normalize how the global heap pool is configured across iwasm apps\n- Refine the stack frame size check in interpreter\n- Enlarge the default wasm operand stack size to 64KB\n- Use cmake POSITION_INDEPENDENT_CODE instead of hardcoding -pie -fPIE\n- Implement R_ARM_THM_MOVT_[ABS|REPL] for thumb\n- Suppress the warnings when building with GCC11\n- samples/native-lib: Add a bit more complicated example\n- Add mutex initializer for wasm-c-api engine operations\n- XIP adaptation for xtensa platform\n- Update libuv version number\n- Remove an improper assumption when creating wasm_trap\n- Avoid initialize LLVM repeatedly\n- linux-sgx: Improve the remote attestation\n- linux-sgx: Improve the documentation of SGX-RA sample\n- linux-sgx: Allow to open files with arbitrary paths in the sandbox using IPFS\n- Avoid raising exception when debugging with VSCode\n- wamr-test-suites: Update runtest.py to support python3\n- Enable Nuttx spec test option and register aot symbols\n- Use wabt binary instead of building from source in spec test\n- nuttx: Enable ref types by Kconfig\n- Update xtensa LLVM version to 15.x\n- Add bh_print_proc_mem() to dump memory info of current process\n- Create trap for error message when wasm_instance_new fails\n- wamr-test-suites: Add support for ARM/RISCV by QEMU\n- Enable to compile WAMR on platforms that don't support IPV6\n- Fix warnings in the posix socket implementation\n- Update document for MacOS compilation\n- Install patched LLDB on vscode extension activation\n- Add ARM aeabi memcpy/memmove/memset symbols for AOT bulk memory ops\n- Enable wasm cache loading in wasm-c-api\n\n### Others\n- Add CIs to release new version and publish binary files\n- Add more compilation groups of fast jit into CI\n- Enable spec test on nuttx and daily run it\n\n---\n\n## WAMR-1.1.1\n\n- Implement Linux SGX socket API getpeername, recvfrom and sendto\n- Implement Linux SGX POSIX calls based on getsockname and set/getbool\n- Integrate WASI-NN into WAMR: support TensorFlow/CPU/F32 in the first stage\n- Add timeout send/recv and multicast client/server socket examples\n- Support cross building and linking LLVM shared libs for wamrc\n- Add darwin support for app_framework\n- Add ios support for product-mini\n- Update export_native_api.md: Relax the \"ground rule\"\n- wasm_export.h: Add comments on wasm_runtime_register_natives\n- Remove unused wasm_runtime_is_module_registered\n- samples/multi-module: Examine module registration a bit\n- samples/native-lib: Fix exec_env type\n- Fix Linux SGX directional OCALL parameter for getsockname\n- Fix threads issue to enable running threads spec proposal test cases\n- Fix the \"register native with iwasm\" stuff for macOS\n- Fix issues in assemblyscript lib\n- Wrap wasi_socket_ext api with extern \"C\" to fix link failure with cxx project\n- Fix invalid size of memory allocated in wasi init\n- posix_thread.c: Avoid sem_getvalue deprecation warning on macOS\n\n---\n\n## WAMR-1.1.0\n\n- Extend support for Socket API:\n  - Implement IPv6 (along with IPv4) for all the socket-related operations\n  - Enable resolving host name IP address by adding a host call to WASI\n  - Implement a security feature for controlling what domains are allowed to be resolved\n  - Allow configuring socket options by adding host calls to WASI for setting and reading the options\n  - Enable connection-less communication between hosts by adding host calls to WASI for sending\n  - data directly to a given address and receiving messages from a specific address\n  - Fix verification of the address in the address pool\n  - Add more samples and update the documents\n  - Implement SGX IPFS as POSIX backend for file interaction for linux-sgx\n- Integrates the Intel SGX feature called Intel Protection File System Library (IPFS) into the runtime\n  to create, operate and delete files inside the enclave, while guaranteeing the confidentiality and\n  integrity of the data persisted\n- Make libc-builtin buffered printf be a common feature\n- Enable passing through arguments for build_llvm.sh\n- Update \\_\\_wasi_sock_accept signature to match wasi_snapshot_preview1\n- Enable build wasi_socket_ext.c with both clang and clang++\n- Add check for code section size, fix interpreter float operations\n- Prevent an already detached thread from being detached again for thread manager\n- Fix several issues related to AOT debug and update source_debugging.md\n- Fix Windows/MSVC build issues and compile warnings\n- Fix wasm loader: function sub local count can be 0\n- Fix crash in dumping call stack when the AOT file doesn't contain custom name section\n- Fix Dockerfile lint errors and suppress hadolint warnings for pinning versions part\n- Fix Fast JIT issues reported by instrument test\n- Fix link error for ESP-IDF 4.4.2\n- Fix syntax errors and undefined names in Python code\n- Fix issues reported by Coverity\n- Fix Go binding build error\n- Fix a wrongly named parameter and enhance the docs in bh_hashmap.h\n\n---\n\n## WAMR-1.0.0\n\n- Implement Python language binding\n- Implement Go language binding\n- Implement Fast JIT engine\n- Implement hw bound check for interpreter and Fast JIT\n- Enable the semantic version mechanism for WAMR\n- Implement POSIX semaphore support for linux platform\n- Implement SGX getrandom/getentropy without ocall\n- Enable remote attestation by librats in SGX mode\n- Upgrade WAMR-IDE and source debugging\n- Support print exception info in source debugger\n- Support emit specified custom sections into AoT file\n- Refactor spec test script and CI workflows\n- Support integrate 3rd-party toolchains into wamrc\n- Enable dump call stack to a buffer\n- Enable aot compiler with llvm-14/15\n- Don't suppress prev signal handler in hw bound check\n- Remove unnecessary memset after mmap\n- Refine wasm\\*runtime_call_wasm_a/v\n- Enable app management and thread support for esp32 arch\n- Enable libc-wasi support for esp-idf arch\n- Implement xtensa XIP\n- Enable memory leak check\n- Introduce basic CI for nuttx\n- Update documents\n- Fix module_realloc with NULL ptr issue\n- Fix a typo of macro in wasm_application.c\n- nuttx: add CONFIG_INTERPRETERS_WAMR_PERF_PROFILING\n- aot_reloc_xtensa.c: define \\_\\_packed if not available\n- Fix bh_vector extend_vector not locked issue\n- Enable build libc-wasi for nuttx\n- Fix typo in embed_wamr.md\n- Fix drop opcode issue in fast interpreter\n- Fix typos in wasm_mini_loader.c\n- Fix issues reported by Coverity and Klocwork\n- Add missing aot relocation symbols for xtensa target\n- Add arc compiler-rt functions and reloc type for mwdt\n- Fix get invokeNative float ret value issue with clang compiler\n- Make robust on choosing target assumption for X86_32 support\n- Fix an issue of wasm_cluster_spread_custom_data when called before exec\n- Fix socket api verification of addresses in the address pool\n- Add API wasm_runtime_set_module_inst\n- Set noexecstack CXX link flags for wamrc\n- Add import subtyping validation\n- Fix libc-wasi/uvwasi poll/environ_get issues\n- Add missing symbol for aot_reloc_arc.c\n- Add a dev docker container for WAMR repo\n- Fix dump call stack issue in interpreter\n- Fix windows thread data issue and enhance windows os_mmap\n- Support custom stack guard size\n- Implement i64.div and i64.rem intrinsics\n- Let iwasm return non-zero value when running failed\n- Reserve one pointer size for fast-interp code_compiled_size\n- Enable libc-wasi support for esp-idf\n- Expose wasm_runtime_get_exec_env_singleton to the API users\n- Normalize wasm types to refine interpreter call_indirect\n- Remove unused wasm_runtime_create_exec_env_and_call_wasm\n- Fix linear memory page count issues\n- debug: Retire wasm_debug\\*(get|set)\\_engine_active mechanism\n- wasm_application.c: Do not start debug instance automatically\n- Fix typo in simd_conversions.c\n- nuttx: Add CONFIG_INTERPRETERS_WAMR_DEBUG_INTERP\n- Add a new API to get free memory in memory pool\n- Fix multi-module and some other issues\n- Fix build issue of the meshoptimizer workload\n- Fix build error on alios platform\n\n---\n\n## WAMR-X.Y.Z\n\n### Breaking Changes\n\n### New Features\n\n### Bug Fixes\n\n### Enhancements\n\n### Others\n\n---\n\n\n"
        },
        {
          "name": "SConscript",
          "type": "blob",
          "size": 0.552734375,
          "content": "#\n# Copyright (c) 2021, RT-Thread Development Team\n#\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n#\n\n# for module compiling\nimport os\n\nfrom building import *\n\nobjs = []\ncwd  = GetCurrentDir()\nlist = os.listdir(cwd)\n\nif GetDepend(['PKG_USING_WAMR']):\n    wamr_entry_sconscript  = os.path.join(cwd, \"product-mini\", \"platforms\", \"rt-thread\", 'SConscript')\n    wamr_runlib_sconscript = os.path.join(cwd, \"build-scripts\", 'SConscript')\n\n    objs = objs + SConscript(wamr_entry_sconscript)\n    objs = objs + SConscript(wamr_runlib_sconscript)\n\nReturn('objs')\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.26171875,
          "content": "# Security Policy\n\nPlease refer to the [Bytecode Alliance security policy](https://bytecodealliance.org/security) for details on how to report security issues in WebAssembly Micro Runtime, our disclosure policy, and how to receive notifications about security issues.\n"
        },
        {
          "name": "TSC_Charter.md",
          "type": "blob",
          "size": 7.337890625,
          "content": "# Project Technical Steering Committee (PTSC) Charter\n\n## Section 1. Guiding Principle\n\nThe WebAssembly Micro Runtime (WAMR) project is part of the\nBytecode Alliance (BA) which operates transparently, openly,\ncollaboratively, and ethically. Project proposals, timelines, and status\nmust not merely be open, but also easily visible to outsiders.\n\n## Section 2. Project Governance under Bytecode Alliance\n\nTechnical leadership for the WAMR projects within the Bytecode Alliance\nis delegated to the projects through the project charter. Though the BA TSC\nwill not interfere with day-to-day discussions, votes or meetings of the PTSC,\nthe BA TSC may request additional amendments to the PTSC charter when\nthere is misalignment between the project charter and the BA mission and values.\n\n\n\nThe PTSC structure described in this document may be overhauled as part of\nestablishing a BA TSC in order to adhere to constraints or requirements that\nTSC will impose on project-level governance.\n\n## Section 3. Establishment of the PTSC\n\nPTSC memberships are not time-limited. There is no maximum size of the PTSC.\nThe size is expected to vary in order to ensure adequate coverage of important\nareas of expertise, balanced with the ability to make decisions efficiently.\nThe PTSC must have at least four members.\n\nThere is no specific set of requirements or qualifications for PTSC\nmembership beyond these rules. The PTSC may add additional members to the\nPTSC by a standard PTSC motion and vote. A PTSC member may be removed from the\nPTSC by voluntary resignation, by a standard PTSC motion, or in accordance to the\nparticipation rules described below.\n\nChanges to PTSC membership should be posted in the agenda, and may be suggested\nas any other agenda item.\n\nThe PTSC may, at its discretion, invite any number of non-voting observers to\nparticipate in the public portion of PTSC discussions and meetings.\n\nThe PTSC shall meet regularly using tools that enable participation by the\ncommunity (e.g. weekly on a Zulip channel, or through any other\nappropriate means selected by the PTSC ). The meeting shall be directed by\nthe PTSC Chairperson. Responsibility for directing individual meetings may be\ndelegated by the PTSC Chairperson to any other PTSC member. Minutes or an\nappropriate recording shall be taken and made available to the community\nthrough accessible public postings.\n\nPTSC members are expected to regularly participate in PTSC activities.\n\nIn the case where an individual PTSC member -- within any three month period --\nattends fewer than 25% of the regularly scheduled meetings, does not\nparticipate in PTSC discussions, *and* does not participate in PTSC votes, the\nmember shall be automatically removed from the PTSC. The member may be invited\nto continue attending PTSC meetings as an observer.\n\n## Section 4. Responsibilities of the PTSC\n\nSubject to such policies as may be set by the BA TSC, the WAMR PTSC is\nresponsible for all technical development within the WAMR  project,\nincluding:\n\n* Setting release dates.\n* Release quality standards.\n* Technical direction.\n* Project governance and process.\n* GitHub repository hosting.\n* Conduct guidelines.\n* Maintaining the list of additional Collaborators.\n* Development process and any coding standards.\n* Mediating technical conflicts between Collaborators or Foundation\nprojects.\n\nThe PTSC will define WAMR project’s release vehicles.\n\n## Section 5. WAMR Project Operations\n\nThe PTSC will establish and maintain a development process for the WAMR\nproject. The development process will establish guidelines\nfor how the developers and community will operate. It will, for example,\nestablish appropriate timelines for PTSC review (e.g. agenda items must be\npublished at least a certain number of hours in advance of a PTSC\nmeeting).\n\nThe PTSC and entire technical community will follow any processes as may\nbe specified by the Bytecode Alliance Board relating to the intake and license compliance\nreview of contributions, including the Bytecode Alliance IP Policy.\n\n## Section 6. Elections\n\nLeadership roles in the WAMR project will be peer elected\nrepresentatives of the community.\n\nFor election of persons (such as the PTSC Chairperson), a multiple-candidate\nmethod should be used, such as:\n\n* [Condorcet][] or\n* [Single Transferable Vote][]\n\nMultiple-candidate methods may be reduced to simple election by plurality\nwhen there are only two candidates for one position to be filled. No\nelection is required if there is only one candidate and no objections to\nthe candidate's election. Elections shall be done within the projects by\nthe Collaborators active in the project.\n\nThe PTSC will elect from amongst voting PTSC members a PTSC Chairperson to\nwork on building an agenda for PTSC meetings. The PTSC shall hold annual\n\nelections to select a PTSC Chairperson; there are no limits on the number\nof terms a PTSC Chairperson may serve.\n\n## Section 7. Voting\n\nFor internal project decisions, Collaborators shall operate under Lazy\nConsensus. The PTSC shall establish appropriate guidelines for\nimplementing Lazy Consensus (e.g. expected notification and review time\nperiods) within the development process.\n\nThe PTSC follows a [Consensus Seeking][] decision making model. When an agenda\nitem has appeared to reach a consensus the moderator will ask \"Does anyone\nobject?\" as a final call for dissent from the consensus.\n\nIf an agenda item cannot reach a consensus a PTSC member can call for\neither a closing vote or a vote to table the issue to the next meeting.\nThe call for a vote must be seconded by a majority of the PTSC or else the\ndiscussion will continue.\n\nFor all votes, a simple majority of all PTSC members for, or against, the issue\nwins. A PTSC member may choose to participate in any vote through abstention.\n\n## Section 8. Project Roles\n\nThe WAMR git repository is maintained by the PTSC and\nadditional Collaborators who are added by the PTSC on an ongoing basis.\n\nIndividuals making significant and valuable contributions,\n“Contributor(s)”, are made Collaborators and given commit-access to the\nproject. These individuals are identified by the PTSC and their addition\nas Collaborators is discussed during a PTSC meeting. Modifications of the\ncontents of the git repository are made on a collaborative basis as defined in\nthe development process.\n\nCollaborators may opt to elevate significant or controversial\nmodifications, or modifications that have not found consensus to the PTSC\nfor discussion by assigning the `tsc-agenda` tag to a pull request or\nissue. The PTSC should serve as the final arbiter where required. The PTSC\nwill maintain and publish a list of current Collaborators, as\nwell as a development process guide for Collaborators and Contributors\nlooking to participate in the development effort.\n\n## Section 9. Definitions\n\n* **Contributors**: contribute code or other artifacts, but do not have\nthe right to commit to the code base. Contributors work with the\nproject’s Collaborators to have code committed to the code base. A\nContributor may be promoted to a Collaborator by the PTSC. Contributors should\nrarely be encumbered by the PTSC.\n\n* **Project**: a technical collaboration effort, e.g. a subsystem, that\nis organized through the project creation process and approved by the\nPTSC.\n\n[Consensus Seeking]: https://en.wikipedia.org/wiki/Consensus-seeking_decision-making\n[Condorcet]: https://en.wikipedia.org/wiki/Condorcet_method\n[Single Transferable Vote]: https://en.wikipedia.org/wiki/Single_transferable_vote\n\n"
        },
        {
          "name": "build-scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "idf_component.yml",
          "type": "blob",
          "size": 0.51953125,
          "content": "version: \"2.0.0\"\ndescription: WebAssembly Micro Runtime - A lightweight standalone WebAssembly (Wasm) runtime with small footprint, high performance and highly configurable features\nurl: https://bytecodealliance.org/\nrepository: https://github.com/bytecodealliance/wasm-micro-runtime.git\ndocumentation: https://wamr.gitbook.io/\nissues: https://github.com/bytecodealliance/wasm-micro-runtime/issues\ndependencies:\n  idf: \">=4.4\"\ntargets:\n  - esp32\n  - esp32s3\n  - esp32c3\n  - esp32c6\nexamples:\n  - path: product-mini/platforms/esp-idf"
        },
        {
          "name": "language-bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "product-mini",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "wamr-compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "wamr-sdk",
          "type": "tree",
          "content": null
        },
        {
          "name": "zephyr",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}