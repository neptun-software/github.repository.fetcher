{
  "metadata": {
    "timestamp": 1736557539680,
    "page": 594,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fastify/fastify",
      "stars": 32780,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".borp.yaml",
          "type": "blob",
          "size": 0.05,
          "content": "files:\n  - 'test/**/*.test.js'\n  - 'test/**/*.test.mjs'\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.16,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\nquote_type = single\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.08,
          "content": "# Set default behavior to automatically convert line endings\n* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.47,
          "content": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# vuepress v2.x temp and cache directory\n.temp\n.cache\n\n# Docusaurus cache and generated files\n.docusaurus\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\n\n# Vim swap files\n*.swp\n\n# macOS files\n.DS_Store\n\n# lock files\nbun.lockb\npackage-lock.json\npnpm-lock.yaml\nyarn.lock\n\n# editor files\n.vscode\n.idea\n\n# tap files\n.tap/\n\n# Optional compressed files (npm generated package, zip, etc)\n/*.zip\n\n# 0x\nprofile-*\n\n# clinic\nprofile*\n*clinic*\n*flamegraph*\n\n# generated code\nexamples/typescript-server.js\ntest/types/index.js\n\n# test tap report\nout.tap\n\n# test certification\ntest/https/fastify.cert\ntest/https/fastify.key\n/test/types/import.js\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.19,
          "content": "# Gitpod Configuration File\n# SEE https://www.gitpod.io/docs/references/gitpod-yml\n\ntasks:\n  - init: npm install\n    name: Install Dependencies\n\nvscode:\n  extensions:\n    - \"dbaeumer.vscode-eslint\"\n"
        },
        {
          "name": ".markdownlint-cli2.yaml",
          "type": "blob",
          "size": 0.36,
          "content": "# See https://github.com/DavidAnson/markdownlint-cli2\nconfig:\n  # Disable all rules by default.\n  default: false\n\n  # Enforce line length.\n  MD013:\n    line_length: 80\n    code_block_line_length: 120\n    headings: false\n    tables: false\n    strict: false\n    stern: false\n\nglobs:\n  - '**/*.md'\n\nignores:\n  - 'node_modules/**'\n  - 'test/**/*.md'\n\nnoProgress: true\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.23,
          "content": ".editorconfig\n.gitattributes\n.gitignore\n.github\n.nyc_output\n.DS_Store\ncoverage/\ntools/\n.tap/\nCODE_OF_CONDUCT.md\nCONTRIBUTING.md\nEXPENSE_POLICY.md\n.clinic\n.gitpod.yml\n\n# test certification\ntest/https/fastify.cert\ntest/https/fastify.key\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.02,
          "content": "package-lock=false\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0,
          "content": "*\n"
        },
        {
          "name": ".taprc",
          "type": "blob",
          "size": 0.12,
          "content": "# vim: set filetype=yaml :\nnode-arg:\n  - '--allow-natives-syntax'\n\ninclude:\n  - 'test/**/*.test.js'\n  - 'test/**/*.test.mjs'\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.14,
          "content": "# Code of Conduct\n\nPlease see Fastify's [organization-wide code of conduct\n](https://github.com/fastify/.github/blob/main/CODE_OF_CONDUCT.md)."
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.39,
          "content": "# Fastify is an OPEN Open Source Project\n\n## What?\n\nIndividuals making significant and valuable contributions are given\ncommit-access to the project to contribute as they see fit. This project is more\nlike an open wiki than a standard guarded open source project.\n\nSee our [informal contributing guide](./docs/Guides/Contributing.md) for more\ndetails on contributing to this project.\n\n### I want to be a collaborator!\n\nIf you think you meet the above criteria and we have not invited you yet, we are\nsorry! Feel free reach out to a [Lead\nMaintainer](https://github.com/fastify/fastify#team) privately with a few links\nto your valuable contributions. Read the [GOVERNANCE](GOVERNANCE.md) to get more\ninformation.\n\n## Rules\n\nThere are a few basic ground-rules for contributors:\n\n1. **No `--force` pushes** on `main` or modifying the Git history in any way\n   after a PR has been merged.\n1. **Non-main branches** ought to be used for ongoing work.\n1. **External API changes and significant modifications** ought to be subject to\n   an **internal pull-request** to solicit feedback from other contributors.\n1. Internal pull-requests to solicit feedback are *encouraged* for any other\n   non-trivial contribution but left to the discretion of the contributor.\n1. Contributors should attempt to adhere to the prevailing code-style.\n1. At least two contributors, or one core member, must approve pull-requests\n   prior to merging.\n1. All integrated CI services must be green before a pull-request can be merged.\n1. A lead maintainer must merge SemVer-major changes in this repository.\n1. In case it is not possible to reach consensus in a pull-request, the decision\n   is left to the lead maintainer's team.\n\n### Fastify previous versions\n\nEvery Fastify's version is on its own branch. All Fastify related\nchanges should be based on the corresponding branch.\n\nWe have a [Long Term Support](./docs/Reference/LTS.md) policy that defines\nthe organization efforts for each Fastify's version.\n\n|Version|Branch|\n|-------|------|\n**v1.x**|[branch 1.x](https://github.com/fastify/fastify/tree/1.x)|\n**v2.x**|[branch 2.x](https://github.com/fastify/fastify/tree/2.x)|\n**v3.x**|[branch 3.x](https://github.com/fastify/fastify/tree/3.x)|\n**v4.x**|[branch 4.x](https://github.com/fastify/fastify/tree/4.x)|\n\n## Releases\n\nDeclaring formal releases remains the prerogative of the lead maintainers. Do\nnot bump version numbers in pull requests.\n\n## Plugins\n\nThe contributors to the Fastify's plugins must attend the same rules of the\nFastify repository with a few adjustments:\n\n1. Any member can publish a release.\n1. The plugin version must follow the [semver](https://semver.org/)\n   specification.\n1. The Node.js compatibility must match with the Fastify's main branch.\n1. The new release must have the changelog information stored in the GitHub\n     release. For this scope we suggest to adopt a tool like\n     [`releasify`](https://github.com/fastify/releasify) to archive this.\n1. PR opened by bots (like Dependabot) can be merged if the CI is green and the\n   Node.js versions supported are the same of the plugin.\n\n## Changes to this arrangement\n\nThis is an experiment and feedback is welcome! This document may also be subject\nto pull-requests or changes by contributors where you believe you have something\nvaluable to add or change.\n\n# Fastify Organization Structure\n\nThe Fastify structure is detailed in the [GOVERNANCE](GOVERNANCE.md) document.\n\n### Onboarding Collaborators\n\nWelcome to the team! We are happy to have you. Before you start, please complete\nthe following tasks:\n1. Set up 2 factor authentication for GitHub and NPM\n    - [GitHub\n    2FA](https://help.github.com/en/articles/securing-your-account-with-two-factor-authentication-2fa)\n    - [NPM 2FA](https://docs.npmjs.com/about-two-factor-authentication)\n2. Choose which team to join *(more than one is ok!)* based on how you want to\n   help.\n    - Core team: maintains the Fastify core and its documentation\n    - Plugins team: maintains the Fastify's plugins and its ecosystem\n3. Open a pull request to\n   [`fastify/fastify:HEAD`](https://github.com/fastify/fastify/pulls) that adds\n   your name, username, and email to the team you have chosen in the\n   [README.md](./README.md) and [package.json](./package.json) *(if you are part\n   of the core team)* files. The members lists are sorted alphabetically by last\n   name; make sure to add your name in the proper order.\n4. Open a pull request to\n   [`fastify/website:HEAD`](https://github.com/fastify/website/pulls) adding\n   yourself to the\n   [team.yml](https://github.com/fastify/website/blob/HEAD/static/data/team.yml)\n   file. This list is also sorted alphabetically so make sure to add your name\n   in the proper order. Use your GitHub profile icon for the `picture:` field.\n5. Read the [pinned announcements](https://github.com/orgs/fastify/discussions/categories/announcements)\n   to be updated with the organisation’s news.\n6. The person that does the onboarding must add you to the [npm\n   org](https://www.npmjs.com/org/fastify), so that you can help maintaining the\n   official plugins.\n7. Optionally, the person can be added as an Open Collective member\n   by the lead team.\n\n### Offboarding Collaborators\n\nWe are thankful to you and we are really glad to have worked with you. We'll be\nreally happy to see you here again if you want to come back, but for now the\nperson that did the onboarding must:\n1. Ask the collaborator if they want to stay or not.\n1. If the collaborator can't work with us anymore, they should:\n  1. Open a pull request to\n     [`fastify/fastify:HEAD`](https://github.com/fastify/fastify/pulls) and move\n     themselves to the *Past Collaborators* section.\n  2. Open a pull request to\n     [`fastify/website:HEAD`](https://github.com/fastify/website/pulls) and move\n     themselves to the *Past Collaborators* section in the\n     [team.yml](https://github.com/fastify/website/blob/HEAD/static/data/team.yml)\n     file.\n\nThe person that did the onboarding must:\n1. If the collaborator doesn't reply to the ping in reasonable time, open the\n   pull requests described above.\n2. Remove the collaborator from the Fastify teams on GitHub.\n3. Remove the collaborator from the [npm\n   org](https://www.npmjs.com/org/fastify).\n4. Remove the collaborator from the Azure team.\n5. Remove the collaborator from the Open Collective members.\n-----------------------------------------\n\n<a id=\"developers-certificate-of-origin\"></a>\n## Developer's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n* (a) The contribution was created in whole or in part by me and I have the\n  right to submit it under the open source license indicated in the file; or\n\n* (b) The contribution is based upon previous work that, to the best of my\n  knowledge, is covered under an appropriate open source license and I have the\n  right under that license to submit that work with modifications, whether\n  created in whole or in part by me, under the same open source license (unless\n  I am permitted to submit under a different license), as indicated in the file;\n  or\n\n* (c) The contribution was provided directly to me by some other person who\n  certified (a), (b) or (c) and I have not modified it.\n\n* (d) I understand and agree that this project and the contribution are public\n  and that a record of the contribution (including all personal information I\n  submit with it, including my sign-off) is maintained indefinitely and may be\n  redistributed consistent with this project or the open source license(s)\n  involved.\n"
        },
        {
          "name": "EXPENSE_POLICY.md",
          "type": "blob",
          "size": 4.04,
          "content": "# Expense Policy\n\nFastify collaborators accept donations through the [Open Collective](https://opencollective.com/fastify/)\nplatform and [GitHub Sponsors](https://github.com/sponsors/fastify)\nto enhance the project and support the community.\n\nThis Collective is run by and for the benefit of the independent contributors to\nthe Fastify open source software project.\nThis Collective is not endorsed or administered by OpenJS Foundation, Inc.\n(the “OpenJS Foundation”). The OpenJS Foundation does not receive or have\ncontrol over any funds contributed. The OpenJS Foundation does not direct or\notherwise supervise the actions of any contributor to the Fastify project,\nand all donations made will be expended for the private benefit of or otherwise\nto reimburse individuals that do not have an employer/employee, contractor, or\nother agency relationship with the OpenJS Foundation.\nThe Fastify marks used herein are used under license from the OpenJS Foundation\nfor the benefit of the open source software community.\n\nThe admins of the Fastify Collective are the [lead maintainers](./GOVERNANCE.md)\nof the project.\n\nThis document outlines the process for requesting reimbursement or an invoice\nfor expenses.\n\n## Reimbursement\n\nReimbursement is applicable for expenses already paid, such as:\n\n- Stickers\n- Gadgets\n- Hosting\n\n**Before making any purchases**, initiate a [new discussion](https://github.com/orgs/fastify/discussions)\nin the `fastify` organization with the following information:\n\n- What is needed\n- Why it is needed\n- Cost\n- Deadline\n\nOnce the discussion is approved by a lead maintainer and with no unresolved objections,\nthe purchase can proceed, and an expense can be submitted to the [Open Collective][submit].\nThis process takes a minimum of 3 business days from the request to allow time for\ndiscussion approval.\n\nThe discussion helps prevent misunderstandings and ensures the expense is not rejected.\nAs a project under the OpenJS Foundation, Fastify benefits from the Foundation's\nresources, including servers, domains, and [travel funds](https://github.com/openjs-foundation/community-fund/tree/main/programs/travel-fund).\n\nAlways seek approval first.\n\n## Invoice\n\nInvoices are for services provided to the Fastify project, such as PR reviews,\ndocumentation, etc.\nA VAT number is not required to submit an invoice.\nRefer to the [Open Collective documentation][openc_docs] for details.\n\n### Adding a bounty to an issue\n\nIssues become eligible for a bounty when the core team adds the `bounty` label,\nwith the amount determined by the core team based on `estimated hours * rate`\n(suggested $50 per hour).\n\n> Example: If the estimated time to fix the issue is 2 hours,\n> the bounty will be $100.\n\nTo add a bounty:\n\n- Apply the `bounty` label to the issue\n- Comment on the issue with the bounty amount\n- Edit the first comment of the issue using this template:\n\n```\n## 💰 Bounty\n\nThis issue has a bounty of [$AMOUNT](LINK TO THE BOUNTY COMMENT).\n_Read more about [the bounty program](./EXPENSE_POLICY.md)_\n```\n\nFor discussions on bounties or determining amounts, open a [new discussion](https://github.com/orgs/fastify/discussions/new?category=bounty).\n\n### Outstanding contributions\n\nThe lead team can decide to add a bounty to an issue or PR not labeled as `bounty`\nif the contribution is outstanding.\n\n### Claiming a bounty\n\nTo claim a bounty:\n\n- Submit a PR that fixes the issue\n- If multiple submissions exist, a core member will choose the best solution\n- Once merged, the PR author can claim the bounty by:\n  - Submitting an expense to the [Open Collective][submit] with the PR link\n  - Adding a comment on the PR with a link to their Open Collective expense to\n    ensure the claimant is the issue resolver\n- The expense will be validated by a lead maintainer and then the payment will be\n  processed by Open Collective\n\nIf the Open Collective budget is insufficient, the expense will be rejected.\nUnclaimed bounties are available for other issues.\n\n[submit]: https://opencollective.com/fastify/expenses/new\n[openc_docs]: https://docs.oscollective.org/how-it-works/basics/invoice-and-reimbursement-examples\n"
        },
        {
          "name": "GOVERNANCE.md",
          "type": "blob",
          "size": 0.15,
          "content": "# Fastify Project Governance\n\nPlease see Fastify's [organization-wide governance\n](https://github.com/fastify/.github/blob/main/GOVERNANCE.md) document."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.15,
          "content": "MIT License\n\nCopyright (c) 2016-2024 The Fastify Team\n\nThe Fastify team members are listed at https://github.com/fastify/fastify#team\nand in the README file.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "PROJECT_CHARTER.md",
          "type": "blob",
          "size": 4.3,
          "content": "# Fastify Charter\n\nThe Fastify project aims to build a fast and low overhead web framework for\nNode.js.\n\n\n## Section 0: Guiding Principles\n\nThe Fastify project is part of the [OpenJS Foundation][openjs foundation]. It\noperates transparently, openly, collaboratively, and ethically. Project\nproposals, timelines, and status must not merely be open, but also easily\nvisible to outsiders.\n\n\n## Section 1: Scope\n\nFastify is a web framework highly focused on providing the best developer\nexperience with the least overhead and a plugin architecture.\n\n### 1.1: In-scope\n\n+ Develop a web framework for Node.js with a focus on developer experience,\n  performance and extensibility.\n+ Plugin Architecture\n+ Support web protocols\n+ Official plugins for common user requirements\n+ Documentation:\n  + Project (policies, processes, and releases)\n  + Guides and Tutorials\n  + Framework API\n  + Website\n+ Write easier APIs for developers\n+ Tools:\n  + CI services\n  + Bots to improve overall efficiency\n  + Releases\n+ Support:\n  + Community\n  + Users's issues and questions\n+ Contributors's pull request review\n\n### 1.2: Out-of-Scope\n\n+ Support versions of Node.js at EOL (end of life) stage\n+ Support serverless architecture\n+ Contributions that violates the [Code of Conduct](CODE_OF_CONDUCT.md)\n\n\n## Section 2: Relationship with OpenJS Foundation CPC.\n\nTechnical leadership for the projects within the [OpenJS Foundation][openjs\nfoundation] is delegated to the projects through their project charters by the\n[OpenJS Foundation Cross-Project Council](https://openjsf.org/about/governance/)\n(CPC). In the case of the Fastify project, it is delegated to the [Fastify\nCollaborators](README.md#team). The OpenJS Foundation's business leadership is\nthe Board of Directors (the \"Board\").\n\nThis Fastify Charter reflects a carefully constructed balanced role for the\nCollaborators and the CPC in the governance of the OpenJS Foundation. The\ncharter amendment process is for the Fastify Collaborators to propose change\nusing simple majority of the full Fastify Organization, the proposed changes\nbeing subject to review and approval by the CPC. The CPC may additionally make\namendments to the Collaborators charter at any time, though the CPC will not\ninterfere with day-to-day discussions, votes or meetings of the Fastify\nOrganization.\n\n\n### 2.1 Other Formal Project Relationships\n\nSection Intentionally Left Blank\n\n\n## Section 3: Fastify Governing Body\n\nFastify is governed by its [maintainers](README.md#team). See [how it is\nstructured](GOVERNANCE.md) for more information.\n\n\n## Section 4: Roles & Responsibilities\n\nThe roles and responsibilities of Fastify's maintainers are described in [the\nproject organization](GOVERNANCE.md).\n\n### Section 4.1 Project Operations & Management\n\nSection Intentionally Left Blank\n\n### Section 4.2: Decision-making, Voting, and/or Elections\n\n**Decision-making**\n\nFastify's features can be discussed in GitHub issues and/or projects. Consensus\non a discussion is reached when there is no objection by any collaborators.\n\nWhenever there is not consensus, Lead Maintainers will have final say on the\ntopic.\n\n**Voting, and/or Elections**\n\nThese processes are described in the [GOVERNANCE](GOVERNANCE.md) document.\n\n### Section 4.3: Other Project Roles\n\nSection Intentionally Left Blank\n\n## Section 5: Definitions\n\n+ *Contributors*: contribute code or other artifacts, but do not have the right\n  to commit to the code base. Contributors work with the project’s Collaborators\n  to have code committed to the code base. Contributors should rarely be\n  encumbered by the Fastify Collaborators and never by the CPC or OpenJS\n  Foundation Board.\n\n+ *Collaborators*: contribute code and other artifacts, have the right to commit\n  to the code base and release plugins projects. Collaborators follow the\n  [CONTRIBUTING](CONTRIBUTING.md) guidelines to manage the project. A\n  Collaborator could be encumbered by other Fastify Collaborators and never by\n  the CPC or OpenJS Foundation Board.\n\n+ *Lead Maintainers*: founders of the project, contribute code and other\n  artifacts, have the right to commit to the code base and release the project.\n  Lead Maintainers follow the [CONTRIBUTING](CONTRIBUTING.md) guidelines to\n  manage the project. A Lead Maintainer will be encumbered by the Fastify\n  Collaborators and by the CPC or OpenJS Foundation Board.\n\n[openjs foundation]: https://openjsf.org\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.1,
          "content": "<div align=\"center\"> <a href=\"https://fastify.dev/\">\n    <img\n      src=\"https://github.com/fastify/graphics/raw/HEAD/fastify-landscape-outlined.svg\"\n      width=\"650\"\n      height=\"auto\"\n    />\n  </a>\n</div>\n\n<div align=\"center\">\n\n[![CI](https://github.com/fastify/fastify/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/fastify/fastify/actions/workflows/ci.yml)\n[![Package Manager\nCI](https://github.com/fastify/fastify/workflows/package-manager-ci/badge.svg?branch=main)](https://github.com/fastify/fastify/actions/workflows/package-manager-ci.yml)\n[![Web\nSIte](https://github.com/fastify/fastify/workflows/website/badge.svg?branch=main)](https://github.com/fastify/fastify/actions/workflows/website.yml)\n[![neostandard javascript style](https://img.shields.io/badge/code_style-neostandard-brightgreen?style=flat)](https://github.com/neostandard/neostandard)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/7585/badge)](https://bestpractices.coreinfrastructure.org/projects/7585)\n\n</div>\n\n<div align=\"center\">\n\n[![NPM\nversion](https://img.shields.io/npm/v/fastify.svg?style=flat)](https://www.npmjs.com/package/fastify)\n[![NPM\ndownloads](https://img.shields.io/npm/dm/fastify.svg?style=flat)](https://www.npmjs.com/package/fastify)\n[![Security Responsible\nDisclosure](https://img.shields.io/badge/Security-Responsible%20Disclosure-yellow.svg)](https://github.com/fastify/fastify/blob/main/SECURITY.md)\n[![Discord](https://img.shields.io/discord/725613461949906985)](https://discord.gg/fastify)\n[![Contribute with Gitpod](https://img.shields.io/badge/Contribute%20with-Gitpod-908a85?logo=gitpod&color=blue)](https://gitpod.io/#https://github.com/fastify/fastify)\n[![Open Collective backers and sponsors](https://img.shields.io/opencollective/all/fastify)](https://github.com/sponsors/fastify#sponsors)\n\n</div>\n\n<br />\n\nAn efficient server implies a lower cost of the infrastructure, a better\nresponsiveness under load and happy users. How can you efficiently handle the\nresources of your server, knowing that you are serving the highest number of\nrequests as possible, without sacrificing security validations and handy\ndevelopment?\n\nEnter Fastify. Fastify is a web framework highly focused on providing the best\ndeveloper experience with the least overhead and a powerful plugin architecture.\nIt is inspired by Hapi and Express and as far as we know, it is one of the\nfastest web frameworks in town.\n\nThe `main` branch refers to the Fastify `v5` release, which is not released/LTS yet.\nCheck out the [`4.x` branch](https://github.com/fastify/fastify/tree/4.x) for `v4`.\n\n### Table of Contents\n\n - [Quick start](#quick-start)\n - [Install](#install)\n - [Example](#example)\n - [Core features](#core-features)\n - [Benchmarks](#benchmarks)\n - [Documentation](#documentation)\n - [Ecosystem](#ecosystem)\n - [Support](#support)\n - [Team](#team)\n - [Hosted by](#hosted-by)\n - [License](#license)\n\n\n### Quick start\n\nCreate a folder and make it your current working directory:\n\n```sh\nmkdir my-app\ncd my-app\n```\n\nGenerate a fastify project with `npm init`:\n\n```sh\nnpm init fastify\n```\n\nInstall dependencies:\n\n```sh\nnpm i\n```\n\nTo start the app in dev mode:\n\n```sh\nnpm run dev\n```\n\nFor production mode:\n\n```sh\nnpm start\n```\n\nUnder the hood `npm init` downloads and runs [Fastify\nCreate](https://github.com/fastify/create-fastify), which in turn uses the\ngenerate functionality of [Fastify CLI](https://github.com/fastify/fastify-cli).\n\n\n### Install\n\nTo install Fastify in an existing project as a dependency:\n\n```sh\nnpm i fastify\n```\n\n### Example\n\n```js\n// Require the framework and instantiate it\n\n// ESM\nimport Fastify from 'fastify'\n\nconst fastify = Fastify({\n  logger: true\n})\n// CommonJs\nconst fastify = require('fastify')({\n  logger: true\n})\n\n// Declare a route\nfastify.get('/', (request, reply) => {\n  reply.send({ hello: 'world' })\n})\n\n// Run the server!\nfastify.listen({ port: 3000 }, (err, address) => {\n  if (err) throw err\n  // Server is now listening on ${address}\n})\n```\n\nwith async-await:\n\n```js\n// ESM\nimport Fastify from 'fastify'\n\nconst fastify = Fastify({\n  logger: true\n})\n// CommonJs\nconst fastify = require('fastify')({\n  logger: true\n})\n\nfastify.get('/', async (request, reply) => {\n  reply.type('application/json').code(200)\n  return { hello: 'world' }\n})\n\nfastify.listen({ port: 3000 }, (err, address) => {\n  if (err) throw err\n  // Server is now listening on ${address}\n})\n```\n\nDo you want to know more? Head to the <a\nhref=\"./docs/Guides/Getting-Started.md\"><code><b>Getting Started</b></code></a>.\n\n> ## Note\n> `.listen` binds to the local host, `localhost`, interface by default\n> (`127.0.0.1` or `::1`, depending on the operating system configuration). If\n> you are running Fastify in a container (Docker,\n> [GCP](https://cloud.google.com/), etc.), you may need to bind to `0.0.0.0`. Be\n> careful when deciding to listen on all interfaces; it comes with inherent\n> [security\n> risks](https://web.archive.org/web/20170711105010/https://snyk.io/blog/mongodb-hack-and-secure-defaults/).\n> See [the documentation](./docs/Reference/Server.md#listen) for more\n> information.\n\n### Core features\n\n- **Highly performant:** as far as we know, Fastify is one of the fastest web\n  frameworks in town, depending on the code complexity we can serve up to 76+\n  thousand requests per second.\n- **Extensible:** Fastify is fully extensible via its hooks, plugins and\n  decorators.\n- **Schema based:** even if it is not mandatory we recommend to use [JSON\n  Schema](https://json-schema.org/) to validate your routes and serialize your\n  outputs, internally Fastify compiles the schema in a highly performant\n  function.\n- **Logging:** logs are extremely important but are costly; we chose the best\n  logger to almost remove this cost, [Pino](https://github.com/pinojs/pino)!\n- **Developer friendly:** the framework is built to be very expressive and help\n  the developer in their daily use, without sacrificing performance and\n  security.\n\n### Benchmarks\n\n__Machine:__ EX41S-SSD, Intel Core i7, 4Ghz, 64GB RAM, 4C/8T, SSD.\n\n__Method:__: `autocannon -c 100 -d 40 -p 10 localhost:3000` * 2, taking the\nsecond average\n\n| Framework          | Version                    | Router?      |  Requests/sec |\n| :----------------- | :------------------------- | :----------: | ------------: |\n| Express            | 4.17.3                     | &#10003;     | 14,200        |\n| hapi               | 20.2.1                     | &#10003;     | 42,284        |\n| Restify            | 8.6.1                      | &#10003;     | 50,363        |\n| Koa                | 2.13.0                     | &#10007;     | 54,272        |\n| **Fastify**        | **4.0.0**                  | **&#10003;** | **77,193**    |\n| -                  |                            |              |               |\n| `http.Server`      | 16.14.2\t                  | &#10007;     | 74,513        |\n\nBenchmarks taken using https://github.com/fastify/benchmarks. This is a\nsynthetic, \"hello world\" benchmark that aims to evaluate the framework overhead.\nThe overhead that each framework has on your application depends on your\napplication, you should __always__ benchmark if performance matters to you.\n\n## Documentation\n* [__`Getting Started`__](./docs/Guides/Getting-Started.md)\n* [__`Guides`__](./docs/Guides/Index.md)\n* [__`Server`__](./docs/Reference/Server.md)\n* [__`Routes`__](./docs/Reference/Routes.md)\n* [__`Encapsulation`__](./docs/Reference/Encapsulation.md)\n* [__`Logging`__](./docs/Reference/Logging.md)\n* [__`Middleware`__](./docs/Reference/Middleware.md)\n* [__`Hooks`__](./docs/Reference/Hooks.md)\n* [__`Decorators`__](./docs/Reference/Decorators.md)\n* [__`Validation and Serialization`__](./docs/Reference/Validation-and-Serialization.md)\n* [__`Fluent Schema`__](./docs/Guides/Fluent-Schema.md)\n* [__`Lifecycle`__](./docs/Reference/Lifecycle.md)\n* [__`Reply`__](./docs/Reference/Reply.md)\n* [__`Request`__](./docs/Reference/Request.md)\n* [__`Errors`__](./docs/Reference/Errors.md)\n* [__`Content Type Parser`__](./docs/Reference/ContentTypeParser.md)\n* [__`Plugins`__](./docs/Reference/Plugins.md)\n* [__`Testing`__](./docs/Guides/Testing.md)\n* [__`Benchmarking`__](./docs/Guides/Benchmarking.md)\n* [__`How to write a good plugin`__](./docs/Guides/Write-Plugin.md)\n* [__`Plugins Guide`__](./docs/Guides/Plugins-Guide.md)\n* [__`HTTP2`__](./docs/Reference/HTTP2.md)\n* [__`Long Term Support`__](./docs/Reference/LTS.md)\n* [__`TypeScript and types support`__](./docs/Reference/TypeScript.md)\n* [__`Serverless`__](./docs/Guides/Serverless.md)\n* [__`Recommendations`__](./docs/Guides/Recommendations.md)\n\n中文文档[地址](https://github.com/fastify/docs-chinese/blob/HEAD/README.md)\n\n## Ecosystem\n\n- [Core](./docs/Guides/Ecosystem.md#core) - Core plugins maintained by the\n  _Fastify_ [team](#team).\n- [Community](./docs/Guides/Ecosystem.md#community) - Community supported\n  plugins.\n- [Live Examples](https://github.com/fastify/example) - Multirepo with a broad\n  set of real working examples.\n- [Discord](https://discord.gg/D3FZYPy) - Join our discord server and chat with\n  the maintainers.\n\n## Support\nPlease visit [Fastify help](https://github.com/fastify/help) to view prior\nsupport issues and to ask new support questions.\n\nVersion 3 of Fastify and lower are EOL and will not receive any security or bug fixes.\n\nFastify's partner, HeroDevs, provides commercial security fixes for all\nunsupported versions at [https://herodevs.com/support/fastify-nes][hd-link].\nFastify's supported version matrix is available in the\n[Long Term Support][lts-link] documentation.\n\n## Contributing\n\nWhether reporting bugs, discussing improvements and new ideas or writing code,\nwe welcome contributions from anyone and everyone. Please read the [CONTRIBUTING](./CONTRIBUTING.md)\nguidelines before submitting pull requests.\n\n## Team\n\n_Fastify_ is the result of the work of a great community. Team members are\nlisted in alphabetical order.\n\n**Lead Maintainers:**\n* [__Matteo Collina__](https://github.com/mcollina),\n  <https://twitter.com/matteocollina>, <https://www.npmjs.com/~matteo.collina>\n* [__Tomas Della Vedova__](https://github.com/delvedor),\n  <https://twitter.com/delvedor>, <https://www.npmjs.com/~delvedor>\n* [__KaKa Ng__](https://github.com/climba03003),\n  <https://www.npmjs.com/~climba03003>\n* [__Manuel Spigolon__](https://github.com/eomm),\n  <https://twitter.com/manueomm>, <https://www.npmjs.com/~eomm>\n* [__James Sumners__](https://github.com/jsumners),\n  <https://twitter.com/jsumners79>, <https://www.npmjs.com/~jsumners>\n\n### Fastify Core team\n* [__Aras Abbasi__](https://github.com/uzlopak),\n  <https://www.npmjs.com/~uzlopak>\n* [__Harry Brundage__](https://github.com/airhorns/),\n  <https://twitter.com/harrybrundage>, <https://www.npmjs.com/~airhorns>\n* [__Matteo Collina__](https://github.com/mcollina),\n  <https://twitter.com/matteocollina>, <https://www.npmjs.com/~matteo.collina>\n* [__Gürgün Dayıoğlu__](https://github.com/gurgunday),\n  <https://www.npmjs.com/~gurgunday>\n* [__Tomas Della Vedova__](https://github.com/delvedor),\n  <https://twitter.com/delvedor>, <https://www.npmjs.com/~delvedor>\n* [__Carlos Fuentes__](https://github.com/metcoder95),\n  <https://twitter.com/metcoder95>, <https://www.npmjs.com/~metcoder95>\n* [__Vincent Le Goff__](https://github.com/zekth)\n* [__Luciano Mammino__](https://github.com/lmammino),\n  <https://twitter.com/loige>, <https://www.npmjs.com/~lmammino>\n* [__KaKa Ng__](https://github.com/climba03003),\n  <https://www.npmjs.com/~climba03003>\n* [__Luis Orbaiceta__](https://github.com/luisorbaiceta),\n  <https://twitter.com/luisorbai>, <https://www.npmjs.com/~luisorbaiceta>\n* [__Maksim Sinik__](https://github.com/fox1t),\n  <https://twitter.com/maksimsinik>, <https://www.npmjs.com/~fox1t>\n* [__Manuel Spigolon__](https://github.com/eomm),\n  <https://twitter.com/manueomm>, <https://www.npmjs.com/~eomm>\n* [__James Sumners__](https://github.com/jsumners),\n  <https://twitter.com/jsumners79>, <https://www.npmjs.com/~jsumners>\n\n### Fastify Plugins team\n* [__Harry Brundage__](https://github.com/airhorns/),\n  <https://twitter.com/harrybrundage>, <https://www.npmjs.com/~airhorns>\n* [__Simone Busoli__](https://github.com/simoneb),\n  <https://twitter.com/simonebu>, <https://www.npmjs.com/~simoneb>\n* [__Dan Castillo__](https://github.com/dancastillo),\n  <https://www.npmjs.com/~dancastillo>\n* [__Matteo Collina__](https://github.com/mcollina),\n  <https://twitter.com/matteocollina>, <https://www.npmjs.com/~matteo.collina>\n* [__Gürgün Dayıoğlu__](https://github.com/gurgunday),\n  <https://www.npmjs.com/~gurgunday>\n* [__Tomas Della Vedova__](https://github.com/delvedor),\n  <https://twitter.com/delvedor>, <https://www.npmjs.com/~delvedor>\n* [__Carlos Fuentes__](https://github.com/metcoder95),\n  <https://twitter.com/metcoder95>, <https://www.npmjs.com/~metcoder95>\n* [__Vincent Le Goff__](https://github.com/zekth)\n* [__Jean Michelet__](https://github.com/jean-michelet),\n  <https://www.npmjs.com/~jean-michelet>\n* [__KaKa Ng__](https://github.com/climba03003),\n  <https://www.npmjs.com/~climba03003>\n* [__Maksim Sinik__](https://github.com/fox1t),\n  <https://twitter.com/maksimsinik>, <https://www.npmjs.com/~fox1t>\n* [__Frazer Smith__](https://github.com/Fdawgs), <https://www.npmjs.com/~fdawgs>\n* [__Manuel Spigolon__](https://github.com/eomm),\n  <https://twitter.com/manueomm>, <https://www.npmjs.com/~eomm>\n\n### Emeritus Contributors\nGreat contributors on a specific area in the Fastify ecosystem will be invited\nto join this group by Lead Maintainers when they decide to step down from the\nactive contributors group.\n\n* [__Tommaso Allevi__](https://github.com/allevo),\n  <https://twitter.com/allevitommaso>, <https://www.npmjs.com/~allevo>\n* [__Ethan Arrowood__](https://github.com/Ethan-Arrowood/),\n  <https://twitter.com/arrowoodtech>, <https://www.npmjs.com/~ethan_arrowood>\n* [__Çağatay Çalı__](https://github.com/cagataycali),\n  <https://twitter.com/cagataycali>, <https://www.npmjs.com/~cagataycali>\n* [__David Mark Clements__](https://github.com/davidmarkclements),\n  <https://twitter.com/davidmarkclem>,\n  <https://www.npmjs.com/~davidmarkclements>\n* [__dalisoft__](https://github.com/dalisoft), <https://twitter.com/dalisoft>,\n  <https://www.npmjs.com/~dalisoft>\n* [__Dustin Deus__](https://github.com/StarpTech),\n  <https://twitter.com/dustindeus>, <https://www.npmjs.com/~starptech>\n* [__Denis Fäcke__](https://github.com/SerayaEryn),\n  <https://twitter.com/serayaeryn>, <https://www.npmjs.com/~serayaeryn>\n* [__Rafael Gonzaga__](https://github.com/rafaelgss),\n  <https://twitter.com/_rafaelgss>, <https://www.npmjs.com/~rafaelgss>\n* [__Trivikram Kamat__](https://github.com/trivikr),\n  <https://twitter.com/trivikram>, <https://www.npmjs.com/~trivikr>\n* [__Ayoub El Khattabi__](https://github.com/AyoubElk),\n  <https://twitter.com/ayoubelkh>, <https://www.npmjs.com/~ayoubelk>\n* [__Cemre Mengu__](https://github.com/cemremengu),\n  <https://twitter.com/cemremengu>, <https://www.npmjs.com/~cemremengu>\n* [__Salman Mitha__](https://github.com/salmanm),\n  <https://www.npmjs.com/~salmanm>\n* [__Nathan Woltman__](https://github.com/nwoltman),\n  <https://twitter.com/NathanWoltman>, <https://www.npmjs.com/~nwoltman>\n\n## Hosted by\n\n[<img\nsrc=\"https://github.com/openjs-foundation/artwork/blob/main/openjs_foundation/openjs_foundation-logo-horizontal-color.png?raw=true\"\nwidth=\"250px;\"/>](https://openjsf.org/projects)\n\nWe are a [At-Large\nProject](https://github.com/openjs-foundation/cross-project-council/blob/HEAD/PROJECT_PROGRESSION.md#at-large-projects)\nin the [OpenJS Foundation](https://openjsf.org/).\n\n## Sponsors\n\nSupport this project by becoming a [SPONSOR](./SPONSORS.md)!\nFastify has an [Open Collective](https://opencollective.com/fastify)\npage where we accept and manage financial contributions.\n\n## Acknowledgements\n\nThis project is kindly sponsored by:\n- [NearForm](https://nearform.com)\n- [Platformatic](https://platformatic.dev)\n\nPast Sponsors:\n- [LetzDoIt](https://www.letzdoitapp.com/)\n\nThis list includes all companies that support one or more of the team members\nin the maintenance of this project.\n\n## License\n\nLicensed under [MIT](./LICENSE).\n\nFor your convenience, here is a list of all the licenses of our production\ndependencies:\n- MIT\n- ISC\n- BSD-3-Clause\n- BSD-2-Clause\n\n[hd-link]: https://www.herodevs.com/support/fastify-nes?utm_source=fastify&utm_medium=link&utm_campaign=github_readme\n[lts-link]: https://fastify.dev/docs/latest/Reference/LTS/\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.13,
          "content": "# Security Policy\n\nPlease see Fastify's [organization-wide security policy\n](https://github.com/fastify/.github/blob/main/SECURITY.md)."
        },
        {
          "name": "SPONSORS.md",
          "type": "blob",
          "size": 0.71,
          "content": "# Sponsors\n\nAll active sponsors of Fastify are listed here, in order of contribution!\nOur sponsors are the reason why we can work on some issues or features\nthat otherwise would be impossible to do.\n\nIf you want to become a sponsor, please check out our [Open Collective page](https://opencollective.com/fastify)\nor [GitHub Sponsors](https://github.com/sponsors/fastify)!\n\n## Tier 4\n\n_Be the first!_\n\n## Tier 3\n\n- [Mercedes-Benz Group](https://github.com/mercedes-benz)\n- [Val Town, Inc.](https://opencollective.com/valtown)\n- [Handsontable - JavaScript Data Grid](https://handsontable.com/docs/react-data-grid/?utm_source=Fastify_GH&utm_medium=sponsorship&utm_campaign=library_sponsorship_2024)\n\n## Tier 2\n\n_Be the first!_\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "eslint.config.js",
          "type": "blob",
          "size": 0.2,
          "content": "'use strict'\n\nmodule.exports = require('neostandard')({\n  ignores: [\n    'lib/configValidator.js',\n    'lib/error-serializer.js',\n    'test/same-shape.test.js',\n    'test/types/import.js'\n  ],\n  ts: true\n})\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fastify.d.ts",
          "type": "blob",
          "size": 13.05,
          "content": "import * as http from 'node:http'\nimport * as http2 from 'node:http2'\nimport * as https from 'node:https'\nimport { Socket } from 'node:net'\n\nimport { Options as AjvOptions, ValidatorFactory } from '@fastify/ajv-compiler'\nimport { FastifyError } from '@fastify/error'\nimport { Options as FJSOptions, SerializerFactory } from '@fastify/fast-json-stringify-compiler'\nimport { ConstraintStrategy, HTTPVersion } from 'find-my-way'\nimport { InjectOptions, CallbackFunc as LightMyRequestCallback, Chain as LightMyRequestChain, Response as LightMyRequestResponse } from 'light-my-request'\n\nimport { AddContentTypeParser, ConstructorAction, FastifyBodyParser, FastifyContentTypeParser, getDefaultJsonParser, hasContentTypeParser, ProtoAction } from './types/content-type-parser'\nimport { FastifyContextConfig, FastifyReplyContext, FastifyRequestContext } from './types/context'\nimport { FastifyErrorCodes } from './types/errors'\nimport { DoneFuncWithErrOrRes, HookHandlerDoneFunction, onCloseAsyncHookHandler, onCloseHookHandler, onErrorAsyncHookHandler, onErrorHookHandler, onListenAsyncHookHandler, onListenHookHandler, onReadyAsyncHookHandler, onReadyHookHandler, onRegisterHookHandler, onRequestAbortAsyncHookHandler, onRequestAbortHookHandler, onRequestAsyncHookHandler, onRequestHookHandler, onResponseAsyncHookHandler, onResponseHookHandler, onRouteHookHandler, onSendAsyncHookHandler, onSendHookHandler, onTimeoutAsyncHookHandler, onTimeoutHookHandler, preCloseAsyncHookHandler, preCloseHookHandler, preHandlerAsyncHookHandler, preHandlerHookHandler, preParsingAsyncHookHandler, preParsingHookHandler, preSerializationAsyncHookHandler, preSerializationHookHandler, preValidationAsyncHookHandler, preValidationHookHandler, RequestPayload } from './types/hooks'\nimport { FastifyInstance, FastifyListenOptions, PrintRoutesOptions } from './types/instance'\nimport {\n  FastifyBaseLogger,\n  FastifyChildLoggerFactory,\n  FastifyLogFn,\n  FastifyLoggerInstance,\n  FastifyLoggerOptions,\n  LogLevel,\n  PinoLoggerOptions\n} from './types/logger'\nimport { FastifyPlugin, FastifyPluginAsync, FastifyPluginCallback, FastifyPluginOptions } from './types/plugin'\nimport { FastifyRegister, FastifyRegisterOptions, RegisterOptions } from './types/register'\nimport { FastifyReply } from './types/reply'\nimport { FastifyRequest, RequestGenericInterface } from './types/request'\nimport { RouteGenericInterface, RouteHandler, RouteHandlerMethod, RouteOptions, RouteShorthandMethod, RouteShorthandOptions, RouteShorthandOptionsWithHandler } from './types/route'\nimport { FastifySchema, FastifySchemaCompiler, FastifySchemaValidationError, SchemaErrorDataVar, SchemaErrorFormatter } from './types/schema'\nimport { FastifyServerFactory, FastifyServerFactoryHandler } from './types/serverFactory'\nimport { FastifyTypeProvider, FastifyTypeProviderDefault, SafePromiseLike } from './types/type-provider'\nimport { ContextConfigDefault, HTTPMethods, RawReplyDefaultExpression, RawRequestDefaultExpression, RawServerBase, RawServerDefault, RequestBodyDefault, RequestHeadersDefault, RequestParamsDefault, RequestQuerystringDefault } from './types/utils'\n\ndeclare module '@fastify/error' {\n  interface FastifyError {\n    validationContext?: SchemaErrorDataVar;\n    validation?: FastifySchemaValidationError[];\n  }\n}\n\ntype Fastify = typeof fastify\n\ndeclare namespace fastify {\n  export const errorCodes: FastifyErrorCodes\n\n  export type FastifyHttp2SecureOptions<\n    Server extends http2.Http2SecureServer,\n    Logger extends FastifyBaseLogger = FastifyBaseLogger\n  > = FastifyServerOptions<Server, Logger> & {\n    http2: true,\n    https: http2.SecureServerOptions,\n    http2SessionTimeout?: number\n  }\n\n  export type FastifyHttp2Options<\n    Server extends http2.Http2Server,\n    Logger extends FastifyBaseLogger = FastifyBaseLogger\n  > = FastifyServerOptions<Server, Logger> & {\n    http2: true,\n    http2SessionTimeout?: number\n  }\n\n  export type FastifyHttpsOptions<\n    Server extends https.Server,\n    Logger extends FastifyBaseLogger = FastifyBaseLogger\n  > = FastifyServerOptions<Server, Logger> & {\n    https: https.ServerOptions | null\n  }\n\n  export type FastifyHttpOptions<\n    Server extends http.Server,\n    Logger extends FastifyBaseLogger = FastifyBaseLogger\n  > = FastifyServerOptions<Server, Logger> & {\n    http?: http.ServerOptions | null\n  }\n\n  type FindMyWayVersion<RawServer extends RawServerBase> = RawServer extends http.Server ? HTTPVersion.V1 : HTTPVersion.V2\n\n  export interface ConnectionError extends Error {\n    code: string,\n    bytesParsed: number,\n    rawPacket: {\n      type: string,\n      data: number[]\n    }\n  }\n\n  type TrustProxyFunction = (address: string, hop: number) => boolean\n\n  /**\n   * Options for a fastify server instance. Utilizes conditional logic on the generic server parameter to enforce certain https and http2\n   */\n  export type FastifyServerOptions<\n    RawServer extends RawServerBase = RawServerDefault,\n    Logger extends FastifyBaseLogger = FastifyBaseLogger\n  > = {\n    ignoreTrailingSlash?: boolean,\n    ignoreDuplicateSlashes?: boolean,\n    connectionTimeout?: number,\n    keepAliveTimeout?: number,\n    maxRequestsPerSocket?: number,\n    forceCloseConnections?: boolean | 'idle',\n    requestTimeout?: number,\n    pluginTimeout?: number,\n    bodyLimit?: number,\n    maxParamLength?: number,\n    disableRequestLogging?: boolean,\n    exposeHeadRoutes?: boolean,\n    onProtoPoisoning?: ProtoAction,\n    onConstructorPoisoning?: ConstructorAction,\n    logger?: boolean | FastifyLoggerOptions<RawServer> & PinoLoggerOptions,\n    loggerInstance?: Logger\n    serializerOpts?: FJSOptions | Record<string, unknown>,\n    serverFactory?: FastifyServerFactory<RawServer>,\n    caseSensitive?: boolean,\n    allowUnsafeRegex?: boolean,\n    requestIdHeader?: string | false,\n    requestIdLogLabel?: string;\n    useSemicolonDelimiter?: boolean,\n    genReqId?: (req: RawRequestDefaultExpression<RawServer>) => string,\n    trustProxy?: boolean | string | string[] | number | TrustProxyFunction,\n    querystringParser?: (str: string) => { [key: string]: unknown },\n    constraints?: {\n      [name: string]: ConstraintStrategy<FindMyWayVersion<RawServer>, unknown>,\n    },\n    schemaController?: {\n      bucket?: (parentSchemas?: unknown) => {\n        add(schema: unknown): FastifyInstance;\n        getSchema(schemaId: string): unknown;\n        getSchemas(): Record<string, unknown>;\n      };\n      compilersFactory?: {\n        buildValidator?: ValidatorFactory;\n        buildSerializer?: SerializerFactory;\n      };\n    };\n    return503OnClosing?: boolean,\n    ajv?: {\n      customOptions?: AjvOptions,\n      plugins?: (Function | [Function, unknown])[]\n    },\n    frameworkErrors?: <RequestGeneric extends RequestGenericInterface = RequestGenericInterface, TypeProvider extends FastifyTypeProvider = FastifyTypeProviderDefault, SchemaCompiler extends FastifySchema = FastifySchema>(\n      error: FastifyError,\n      req: FastifyRequest<RequestGeneric, RawServer, RawRequestDefaultExpression<RawServer>, FastifySchema, TypeProvider>,\n      res: FastifyReply<RequestGeneric, RawServer, RawRequestDefaultExpression<RawServer>, RawReplyDefaultExpression<RawServer>, FastifyContextConfig, SchemaCompiler, TypeProvider>\n    ) => void,\n    rewriteUrl?: (\n      // The RawRequestDefaultExpression, RawReplyDefaultExpression, and FastifyTypeProviderDefault parameters\n      // should be narrowed further but those generic parameters are not passed to this FastifyServerOptions type\n      this: FastifyInstance<RawServer, RawRequestDefaultExpression<RawServer>, RawReplyDefaultExpression<RawServer>, Logger, FastifyTypeProviderDefault>,\n      req: RawRequestDefaultExpression<RawServer>\n    ) => string,\n    schemaErrorFormatter?: SchemaErrorFormatter,\n    /**\n     * listener to error events emitted by client connections\n     */\n    clientErrorHandler?: (error: ConnectionError, socket: Socket) => void,\n    childLoggerFactory?: FastifyChildLoggerFactory\n  }\n\n  /**\n   * @deprecated use {@link FastifySchemaValidationError}\n   */\n  export type ValidationResult = FastifySchemaValidationError\n\n  /* Export additional types */\n  export type {\n    LightMyRequestChain, InjectOptions, LightMyRequestResponse, LightMyRequestCallback, // 'light-my-request'\n    FastifyRequest, RequestGenericInterface, // './types/request'\n    FastifyReply, // './types/reply'\n    FastifyPluginCallback, FastifyPluginAsync, FastifyPluginOptions, FastifyPlugin, // './types/plugin'\n    FastifyListenOptions, FastifyInstance, PrintRoutesOptions, // './types/instance'\n    FastifyLoggerOptions, FastifyBaseLogger, FastifyLoggerInstance, FastifyLogFn, LogLevel, // './types/logger'\n    FastifyRequestContext, FastifyContextConfig, FastifyReplyContext, // './types/context'\n    RouteHandler, RouteHandlerMethod, RouteOptions, RouteShorthandMethod, RouteShorthandOptions, RouteShorthandOptionsWithHandler, RouteGenericInterface, // './types/route'\n    FastifyRegister, FastifyRegisterOptions, RegisterOptions, // './types/register'\n    FastifyBodyParser, FastifyContentTypeParser, AddContentTypeParser, hasContentTypeParser, getDefaultJsonParser, ProtoAction, ConstructorAction, // './types/content-type-parser'\n    FastifyError, // '@fastify/error'\n    FastifySchema, FastifySchemaCompiler, // './types/schema'\n    HTTPMethods, RawServerBase, RawRequestDefaultExpression, RawReplyDefaultExpression, RawServerDefault, ContextConfigDefault, RequestBodyDefault, RequestQuerystringDefault, RequestParamsDefault, RequestHeadersDefault, // './types/utils'\n    DoneFuncWithErrOrRes, HookHandlerDoneFunction, RequestPayload, onCloseAsyncHookHandler, onCloseHookHandler, onErrorAsyncHookHandler, onErrorHookHandler, onReadyAsyncHookHandler, onReadyHookHandler, onListenAsyncHookHandler, onListenHookHandler, onRegisterHookHandler, onRequestAsyncHookHandler, onRequestHookHandler, onResponseAsyncHookHandler, onResponseHookHandler, onRouteHookHandler, onSendAsyncHookHandler, onSendHookHandler, onTimeoutAsyncHookHandler, onTimeoutHookHandler, preHandlerAsyncHookHandler, preHandlerHookHandler, preParsingAsyncHookHandler, preParsingHookHandler, preSerializationAsyncHookHandler, preSerializationHookHandler, preValidationAsyncHookHandler, preValidationHookHandler, onRequestAbortHookHandler, onRequestAbortAsyncHookHandler, preCloseAsyncHookHandler, preCloseHookHandler, // './types/hooks'\n    FastifyServerFactory, FastifyServerFactoryHandler, // './types/serverFactory'\n    FastifyTypeProvider, FastifyTypeProviderDefault, SafePromiseLike, // './types/type-provider'\n    FastifyErrorCodes // './types/errors'\n  }\n  // named export\n  // import { plugin } from 'plugin'\n  // const { plugin } = require('plugin')\n  export const fastify: Fastify\n  // default export\n  // import plugin from 'plugin'\n  export { fastify as default }\n}\n\n/**\n * Fastify factory function for the standard fastify http, https, or http2 server instance.\n *\n * The default function utilizes http\n *\n * @param opts Fastify server options\n * @returns Fastify server instance\n */\ndeclare function fastify<\n  Server extends http2.Http2SecureServer,\n  Request extends RawRequestDefaultExpression<Server> = RawRequestDefaultExpression<Server>,\n  Reply extends RawReplyDefaultExpression<Server> = RawReplyDefaultExpression<Server>,\n  Logger extends FastifyBaseLogger = FastifyBaseLogger,\n  TypeProvider extends FastifyTypeProvider = FastifyTypeProviderDefault\n> (opts: fastify.FastifyHttp2SecureOptions<Server, Logger>): FastifyInstance<Server, Request, Reply, Logger, TypeProvider> & SafePromiseLike<FastifyInstance<Server, Request, Reply, Logger, TypeProvider>>\n\ndeclare function fastify<\n  Server extends http2.Http2Server,\n  Request extends RawRequestDefaultExpression<Server> = RawRequestDefaultExpression<Server>,\n  Reply extends RawReplyDefaultExpression<Server> = RawReplyDefaultExpression<Server>,\n  Logger extends FastifyBaseLogger = FastifyBaseLogger,\n  TypeProvider extends FastifyTypeProvider = FastifyTypeProviderDefault\n> (opts: fastify.FastifyHttp2Options<Server, Logger>): FastifyInstance<Server, Request, Reply, Logger, TypeProvider> & SafePromiseLike<FastifyInstance<Server, Request, Reply, Logger, TypeProvider>>\n\ndeclare function fastify<\n  Server extends https.Server,\n  Request extends RawRequestDefaultExpression<Server> = RawRequestDefaultExpression<Server>,\n  Reply extends RawReplyDefaultExpression<Server> = RawReplyDefaultExpression<Server>,\n  Logger extends FastifyBaseLogger = FastifyBaseLogger,\n  TypeProvider extends FastifyTypeProvider = FastifyTypeProviderDefault\n> (opts: fastify.FastifyHttpsOptions<Server, Logger>): FastifyInstance<Server, Request, Reply, Logger, TypeProvider> & SafePromiseLike<FastifyInstance<Server, Request, Reply, Logger, TypeProvider>>\n\ndeclare function fastify<\n  Server extends http.Server,\n  Request extends RawRequestDefaultExpression<Server> = RawRequestDefaultExpression<Server>,\n  Reply extends RawReplyDefaultExpression<Server> = RawReplyDefaultExpression<Server>,\n  Logger extends FastifyBaseLogger = FastifyBaseLogger,\n  TypeProvider extends FastifyTypeProvider = FastifyTypeProviderDefault\n> (opts?: fastify.FastifyHttpOptions<Server, Logger>): FastifyInstance<Server, Request, Reply, Logger, TypeProvider> & SafePromiseLike<FastifyInstance<Server, Request, Reply, Logger, TypeProvider>>\n\n// CJS export\n// const fastify = require('fastify')\nexport = fastify\n"
        },
        {
          "name": "fastify.js",
          "type": "blob",
          "size": 31.7,
          "content": "'use strict'\n\nconst VERSION = '5.2.1'\n\nconst Avvio = require('avvio')\nconst http = require('node:http')\nconst diagnostics = require('node:diagnostics_channel')\nlet lightMyRequest\n\nconst {\n  kAvvioBoot,\n  kChildren,\n  kServerBindings,\n  kBodyLimit,\n  kSupportedHTTPMethods,\n  kRoutePrefix,\n  kLogLevel,\n  kLogSerializers,\n  kHooks,\n  kSchemaController,\n  kRequestAcceptVersion,\n  kReplySerializerDefault,\n  kContentTypeParser,\n  kReply,\n  kRequest,\n  kFourOhFour,\n  kState,\n  kOptions,\n  kPluginNameChain,\n  kSchemaErrorFormatter,\n  kErrorHandler,\n  kKeepAliveConnections,\n  kChildLoggerFactory,\n  kGenReqId\n} = require('./lib/symbols.js')\n\nconst { createServer } = require('./lib/server')\nconst Reply = require('./lib/reply')\nconst Request = require('./lib/request')\nconst Context = require('./lib/context.js')\nconst decorator = require('./lib/decorate')\nconst ContentTypeParser = require('./lib/contentTypeParser')\nconst SchemaController = require('./lib/schema-controller')\nconst { Hooks, hookRunnerApplication, supportedHooks } = require('./lib/hooks')\nconst { createChildLogger, defaultChildLoggerFactory, createLogger } = require('./lib/logger-factory')\nconst pluginUtils = require('./lib/pluginUtils')\nconst { getGenReqId, reqIdGenFactory } = require('./lib/reqIdGenFactory')\nconst { buildRouting, validateBodyLimitOption } = require('./lib/route')\nconst build404 = require('./lib/fourOhFour')\nconst getSecuredInitialConfig = require('./lib/initialConfigValidation')\nconst override = require('./lib/pluginOverride')\nconst noopSet = require('./lib/noop-set')\nconst {\n  appendStackTrace,\n  AVVIO_ERRORS_MAP,\n  ...errorCodes\n} = require('./lib/errors')\n\nconst { defaultInitOptions } = getSecuredInitialConfig\n\nconst {\n  FST_ERR_ASYNC_CONSTRAINT,\n  FST_ERR_BAD_URL,\n  FST_ERR_FORCE_CLOSE_CONNECTIONS_IDLE_NOT_AVAILABLE,\n  FST_ERR_OPTIONS_NOT_OBJ,\n  FST_ERR_QSP_NOT_FN,\n  FST_ERR_SCHEMA_CONTROLLER_BUCKET_OPT_NOT_FN,\n  FST_ERR_AJV_CUSTOM_OPTIONS_OPT_NOT_OBJ,\n  FST_ERR_AJV_CUSTOM_OPTIONS_OPT_NOT_ARR,\n  FST_ERR_INSTANCE_ALREADY_LISTENING,\n  FST_ERR_REOPENED_CLOSE_SERVER,\n  FST_ERR_ROUTE_REWRITE_NOT_STR,\n  FST_ERR_SCHEMA_ERROR_FORMATTER_NOT_FN,\n  FST_ERR_ERROR_HANDLER_NOT_FN,\n  FST_ERR_ROUTE_METHOD_INVALID\n} = errorCodes\n\nconst { buildErrorHandler } = require('./lib/error-handler.js')\n\nconst initChannel = diagnostics.channel('fastify.initialization')\n\nfunction defaultBuildPrettyMeta (route) {\n  // return a shallow copy of route's sanitized context\n\n  const cleanKeys = {}\n  const allowedProps = ['errorHandler', 'logLevel', 'logSerializers']\n\n  allowedProps.concat(supportedHooks).forEach(k => {\n    cleanKeys[k] = route.store[k]\n  })\n\n  return Object.assign({}, cleanKeys)\n}\n\n/**\n * @param {import('./fastify.js').FastifyServerOptions} options\n */\nfunction fastify (options) {\n  // Options validations\n  if (options && typeof options !== 'object') {\n    throw new FST_ERR_OPTIONS_NOT_OBJ()\n  } else {\n    // Shallow copy options object to prevent mutations outside of this function\n    options = Object.assign({}, options)\n  }\n\n  if (options.querystringParser && typeof options.querystringParser !== 'function') {\n    throw new FST_ERR_QSP_NOT_FN(typeof options.querystringParser)\n  }\n\n  if (options.schemaController && options.schemaController.bucket && typeof options.schemaController.bucket !== 'function') {\n    throw new FST_ERR_SCHEMA_CONTROLLER_BUCKET_OPT_NOT_FN(typeof options.schemaController.bucket)\n  }\n\n  validateBodyLimitOption(options.bodyLimit)\n\n  const requestIdHeader = typeof options.requestIdHeader === 'string' && options.requestIdHeader.length !== 0 ? options.requestIdHeader.toLowerCase() : (options.requestIdHeader === true && 'request-id')\n  const genReqId = reqIdGenFactory(requestIdHeader, options.genReqId)\n  const requestIdLogLabel = options.requestIdLogLabel || 'reqId'\n  const bodyLimit = options.bodyLimit || defaultInitOptions.bodyLimit\n  const disableRequestLogging = options.disableRequestLogging || false\n\n  const ajvOptions = Object.assign({\n    customOptions: {},\n    plugins: []\n  }, options.ajv)\n  const frameworkErrors = options.frameworkErrors\n\n  // Ajv options\n  if (!ajvOptions.customOptions || Object.prototype.toString.call(ajvOptions.customOptions) !== '[object Object]') {\n    throw new FST_ERR_AJV_CUSTOM_OPTIONS_OPT_NOT_OBJ(typeof ajvOptions.customOptions)\n  }\n  if (!ajvOptions.plugins || !Array.isArray(ajvOptions.plugins)) {\n    throw new FST_ERR_AJV_CUSTOM_OPTIONS_OPT_NOT_ARR(typeof ajvOptions.plugins)\n  }\n\n  // Instance Fastify components\n\n  const { logger, hasLogger } = createLogger(options)\n\n  // Update the options with the fixed values\n  options.connectionTimeout = options.connectionTimeout || defaultInitOptions.connectionTimeout\n  options.keepAliveTimeout = options.keepAliveTimeout || defaultInitOptions.keepAliveTimeout\n  options.maxRequestsPerSocket = options.maxRequestsPerSocket || defaultInitOptions.maxRequestsPerSocket\n  options.requestTimeout = options.requestTimeout || defaultInitOptions.requestTimeout\n  options.logger = logger\n  options.requestIdHeader = requestIdHeader\n  options.requestIdLogLabel = requestIdLogLabel\n  options.disableRequestLogging = disableRequestLogging\n  options.ajv = ajvOptions\n  options.clientErrorHandler = options.clientErrorHandler || defaultClientErrorHandler\n\n  const initialConfig = getSecuredInitialConfig(options)\n\n  // exposeHeadRoutes have its default set from the validator\n  options.exposeHeadRoutes = initialConfig.exposeHeadRoutes\n\n  // Default router\n  const router = buildRouting({\n    config: {\n      defaultRoute,\n      onBadUrl,\n      constraints: options.constraints,\n      ignoreTrailingSlash: options.ignoreTrailingSlash || defaultInitOptions.ignoreTrailingSlash,\n      ignoreDuplicateSlashes: options.ignoreDuplicateSlashes || defaultInitOptions.ignoreDuplicateSlashes,\n      maxParamLength: options.maxParamLength || defaultInitOptions.maxParamLength,\n      caseSensitive: options.caseSensitive,\n      allowUnsafeRegex: options.allowUnsafeRegex || defaultInitOptions.allowUnsafeRegex,\n      buildPrettyMeta: defaultBuildPrettyMeta,\n      querystringParser: options.querystringParser,\n      useSemicolonDelimiter: options.useSemicolonDelimiter ?? defaultInitOptions.useSemicolonDelimiter\n    }\n  })\n\n  // 404 router, used for handling encapsulated 404 handlers\n  const fourOhFour = build404(options)\n\n  // HTTP server and its handler\n  const httpHandler = wrapRouting(router, options)\n\n  // we need to set this before calling createServer\n  options.http2SessionTimeout = initialConfig.http2SessionTimeout\n  const { server, listen } = createServer(options, httpHandler)\n\n  const serverHasCloseAllConnections = typeof server.closeAllConnections === 'function'\n  const serverHasCloseIdleConnections = typeof server.closeIdleConnections === 'function'\n\n  let forceCloseConnections = options.forceCloseConnections\n  if (forceCloseConnections === 'idle' && !serverHasCloseIdleConnections) {\n    throw new FST_ERR_FORCE_CLOSE_CONNECTIONS_IDLE_NOT_AVAILABLE()\n  } else if (typeof forceCloseConnections !== 'boolean') {\n    /* istanbul ignore next: only one branch can be valid in a given Node.js version */\n    forceCloseConnections = serverHasCloseIdleConnections ? 'idle' : false\n  }\n\n  const keepAliveConnections = !serverHasCloseAllConnections && forceCloseConnections === true ? new Set() : noopSet()\n\n  const setupResponseListeners = Reply.setupResponseListeners\n  const schemaController = SchemaController.buildSchemaController(null, options.schemaController)\n\n  // Public API\n  const fastify = {\n    // Fastify internals\n    [kState]: {\n      listening: false,\n      closing: false,\n      started: false,\n      ready: false,\n      booting: false,\n      readyPromise: null\n    },\n    [kKeepAliveConnections]: keepAliveConnections,\n    [kSupportedHTTPMethods]: {\n      bodyless: new Set([\n        // Standard\n        'GET',\n        'HEAD',\n        'TRACE'\n      ]),\n      bodywith: new Set([\n        // Standard\n        'DELETE',\n        'OPTIONS',\n        'PATCH',\n        'PUT',\n        'POST'\n      ])\n    },\n    [kOptions]: options,\n    [kChildren]: [],\n    [kServerBindings]: [],\n    [kBodyLimit]: bodyLimit,\n    [kRoutePrefix]: '',\n    [kLogLevel]: '',\n    [kLogSerializers]: null,\n    [kHooks]: new Hooks(),\n    [kSchemaController]: schemaController,\n    [kSchemaErrorFormatter]: null,\n    [kErrorHandler]: buildErrorHandler(),\n    [kChildLoggerFactory]: defaultChildLoggerFactory,\n    [kReplySerializerDefault]: null,\n    [kContentTypeParser]: new ContentTypeParser(\n      bodyLimit,\n      (options.onProtoPoisoning || defaultInitOptions.onProtoPoisoning),\n      (options.onConstructorPoisoning || defaultInitOptions.onConstructorPoisoning)\n    ),\n    [kReply]: Reply.buildReply(Reply),\n    [kRequest]: Request.buildRequest(Request, options.trustProxy),\n    [kFourOhFour]: fourOhFour,\n    [pluginUtils.kRegisteredPlugins]: [],\n    [kPluginNameChain]: ['fastify'],\n    [kAvvioBoot]: null,\n    [kGenReqId]: genReqId,\n    // routing method\n    routing: httpHandler,\n    // routes shorthand methods\n    delete: function _delete (url, options, handler) {\n      return router.prepareRoute.call(this, { method: 'DELETE', url, options, handler })\n    },\n    get: function _get (url, options, handler) {\n      return router.prepareRoute.call(this, { method: 'GET', url, options, handler })\n    },\n    head: function _head (url, options, handler) {\n      return router.prepareRoute.call(this, { method: 'HEAD', url, options, handler })\n    },\n    trace: function _trace (url, options, handler) {\n      return router.prepareRoute.call(this, { method: 'TRACE', url, options, handler })\n    },\n    patch: function _patch (url, options, handler) {\n      return router.prepareRoute.call(this, { method: 'PATCH', url, options, handler })\n    },\n    post: function _post (url, options, handler) {\n      return router.prepareRoute.call(this, { method: 'POST', url, options, handler })\n    },\n    put: function _put (url, options, handler) {\n      return router.prepareRoute.call(this, { method: 'PUT', url, options, handler })\n    },\n    options: function _options (url, options, handler) {\n      return router.prepareRoute.call(this, { method: 'OPTIONS', url, options, handler })\n    },\n    all: function _all (url, options, handler) {\n      return router.prepareRoute.call(this, { method: this.supportedMethods, url, options, handler })\n    },\n    // extended route\n    route: function _route (options) {\n      // we need the fastify object that we are producing so we apply a lazy loading of the function,\n      // otherwise we should bind it after the declaration\n      return router.route.call(this, { options })\n    },\n    hasRoute: function _route (options) {\n      return router.hasRoute.call(this, { options })\n    },\n    findRoute: function _findRoute (options) {\n      return router.findRoute(options)\n    },\n    // expose logger instance\n    log: logger,\n    // type provider\n    withTypeProvider,\n    // hooks\n    addHook,\n    // schemas\n    addSchema,\n    getSchema: schemaController.getSchema.bind(schemaController),\n    getSchemas: schemaController.getSchemas.bind(schemaController),\n    setValidatorCompiler,\n    setSerializerCompiler,\n    setSchemaController,\n    setReplySerializer,\n    setSchemaErrorFormatter,\n    // set generated request id\n    setGenReqId,\n    // custom parsers\n    addContentTypeParser: ContentTypeParser.helpers.addContentTypeParser,\n    hasContentTypeParser: ContentTypeParser.helpers.hasContentTypeParser,\n    getDefaultJsonParser: ContentTypeParser.defaultParsers.getDefaultJsonParser,\n    defaultTextParser: ContentTypeParser.defaultParsers.defaultTextParser,\n    removeContentTypeParser: ContentTypeParser.helpers.removeContentTypeParser,\n    removeAllContentTypeParsers: ContentTypeParser.helpers.removeAllContentTypeParsers,\n    // Fastify architecture methods (initialized by Avvio)\n    register: null,\n    after: null,\n    ready: null,\n    onClose: null,\n    close: null,\n    printPlugins: null,\n    hasPlugin: function (name) {\n      return this[pluginUtils.kRegisteredPlugins].includes(name) || this[kPluginNameChain].includes(name)\n    },\n    // http server\n    listen,\n    server,\n    addresses: function () {\n      /* istanbul ignore next */\n      const binded = this[kServerBindings].map(b => b.address())\n      binded.push(this.server.address())\n      return binded.filter(adr => adr)\n    },\n    // extend fastify objects\n    decorate: decorator.add,\n    hasDecorator: decorator.exist,\n    decorateReply: decorator.decorateReply,\n    decorateRequest: decorator.decorateRequest,\n    hasRequestDecorator: decorator.existRequest,\n    hasReplyDecorator: decorator.existReply,\n    addHttpMethod,\n    // fake http injection\n    inject,\n    // pretty print of the registered routes\n    printRoutes,\n    // custom error handling\n    setNotFoundHandler,\n    setErrorHandler,\n    // child logger\n    setChildLoggerFactory,\n    // Set fastify initial configuration options read-only object\n    initialConfig,\n    // constraint strategies\n    addConstraintStrategy: router.addConstraintStrategy.bind(router),\n    hasConstraintStrategy: router.hasConstraintStrategy.bind(router)\n  }\n\n  Object.defineProperties(fastify, {\n    listeningOrigin: {\n      get () {\n        const address = this.addresses().slice(-1).pop()\n        /* ignore if windows: unix socket is not testable on Windows platform */\n        /* c8 ignore next 3 */\n        if (typeof address === 'string') {\n          return address\n        }\n        const host = address.family === 'IPv6' ? `[${address.address}]` : address.address\n        return `${this[kOptions].https ? 'https' : 'http'}://${host}:${address.port}`\n      }\n    },\n    pluginName: {\n      configurable: true,\n      get () {\n        if (this[kPluginNameChain].length > 1) {\n          return this[kPluginNameChain].join(' -> ')\n        }\n        return this[kPluginNameChain][0]\n      }\n    },\n    prefix: {\n      configurable: true,\n      get () { return this[kRoutePrefix] }\n    },\n    validatorCompiler: {\n      configurable: true,\n      get () { return this[kSchemaController].getValidatorCompiler() }\n    },\n    serializerCompiler: {\n      configurable: true,\n      get () { return this[kSchemaController].getSerializerCompiler() }\n    },\n    childLoggerFactory: {\n      configurable: true,\n      get () { return this[kChildLoggerFactory] }\n    },\n    version: {\n      configurable: true,\n      get () { return VERSION }\n    },\n    errorHandler: {\n      configurable: true,\n      get () {\n        return this[kErrorHandler].func\n      }\n    },\n    genReqId: {\n      configurable: true,\n      get () { return this[kGenReqId] }\n    },\n    supportedMethods: {\n      configurable: false,\n      get () {\n        return [\n          ...this[kSupportedHTTPMethods].bodyless,\n          ...this[kSupportedHTTPMethods].bodywith\n        ]\n      }\n    }\n  })\n\n  if (options.schemaErrorFormatter) {\n    validateSchemaErrorFormatter(options.schemaErrorFormatter)\n    fastify[kSchemaErrorFormatter] = options.schemaErrorFormatter.bind(fastify)\n  }\n\n  // Install and configure Avvio\n  // Avvio will update the following Fastify methods:\n  // - register\n  // - after\n  // - ready\n  // - onClose\n  // - close\n\n  const avvioPluginTimeout = Number(options.pluginTimeout)\n  const avvio = Avvio(fastify, {\n    autostart: false,\n    timeout: isNaN(avvioPluginTimeout) === false ? avvioPluginTimeout : defaultInitOptions.pluginTimeout,\n    expose: {\n      use: 'register'\n    }\n  })\n  // Override to allow the plugin encapsulation\n  avvio.override = override\n  avvio.on('start', () => (fastify[kState].started = true))\n  fastify[kAvvioBoot] = fastify.ready // the avvio ready function\n  fastify.ready = ready // overwrite the avvio ready function\n  fastify.printPlugins = avvio.prettyPrint.bind(avvio)\n\n  // cache the closing value, since we are checking it in an hot path\n  avvio.once('preReady', () => {\n    fastify.onClose((instance, done) => {\n      fastify[kState].closing = true\n      router.closeRoutes()\n\n      hookRunnerApplication('preClose', fastify[kAvvioBoot], fastify, function () {\n        if (fastify[kState].listening) {\n          /* istanbul ignore next: Cannot test this without Node.js core support */\n          if (forceCloseConnections === 'idle') {\n            // Not needed in Node 19\n            instance.server.closeIdleConnections()\n            /* istanbul ignore next: Cannot test this without Node.js core support */\n          } else if (serverHasCloseAllConnections && forceCloseConnections) {\n            instance.server.closeAllConnections()\n          } else if (forceCloseConnections === true) {\n            for (const conn of fastify[kKeepAliveConnections]) {\n              // We must invoke the destroy method instead of merely unreffing\n              // the sockets. If we only unref, then the callback passed to\n              // `fastify.close` will never be invoked; nor will any of the\n              // registered `onClose` hooks.\n              conn.destroy()\n              fastify[kKeepAliveConnections].delete(conn)\n            }\n          }\n        }\n\n        // No new TCP connections are accepted.\n        // We must call close on the server even if we are not listening\n        // otherwise memory will be leaked.\n        // https://github.com/nodejs/node/issues/48604\n        if (!options.serverFactory || fastify[kState].listening) {\n          instance.server.close(function (err) {\n            /* c8 ignore next 6 */\n            if (err && err.code !== 'ERR_SERVER_NOT_RUNNING') {\n              done(null)\n            } else {\n              done()\n            }\n          })\n        } else {\n          process.nextTick(done, null)\n        }\n      })\n    })\n  })\n\n  // Create bad URL context\n  const onBadUrlContext = new Context({\n    server: fastify,\n    config: {}\n  })\n\n  // Set the default 404 handler\n  fastify.setNotFoundHandler()\n  fourOhFour.arrange404(fastify)\n\n  router.setup(options, {\n    avvio,\n    fourOhFour,\n    logger,\n    hasLogger,\n    setupResponseListeners,\n    throwIfAlreadyStarted,\n    keepAliveConnections\n  })\n\n  // Delay configuring clientError handler so that it can access fastify state.\n  server.on('clientError', options.clientErrorHandler.bind(fastify))\n\n  if (initChannel.hasSubscribers) {\n    initChannel.publish({ fastify })\n  }\n\n  // Older nodejs versions may not have asyncDispose\n  if ('asyncDispose' in Symbol) {\n    fastify[Symbol.asyncDispose] = function dispose () {\n      return fastify.close()\n    }\n  }\n\n  return fastify\n\n  function throwIfAlreadyStarted (msg) {\n    if (fastify[kState].started) throw new FST_ERR_INSTANCE_ALREADY_LISTENING(msg)\n  }\n\n  // HTTP injection handling\n  // If the server is not ready yet, this\n  // utility will automatically force it.\n  function inject (opts, cb) {\n    // lightMyRequest is dynamically loaded as it seems very expensive\n    // because of Ajv\n    if (lightMyRequest === undefined) {\n      lightMyRequest = require('light-my-request')\n    }\n\n    if (fastify[kState].started) {\n      if (fastify[kState].closing) {\n        // Force to return an error\n        const error = new FST_ERR_REOPENED_CLOSE_SERVER()\n        if (cb) {\n          cb(error)\n          return\n        } else {\n          return Promise.reject(error)\n        }\n      }\n      return lightMyRequest(httpHandler, opts, cb)\n    }\n\n    if (cb) {\n      this.ready(err => {\n        if (err) cb(err, null)\n        else lightMyRequest(httpHandler, opts, cb)\n      })\n    } else {\n      return lightMyRequest((req, res) => {\n        this.ready(function (err) {\n          if (err) {\n            res.emit('error', err)\n            return\n          }\n          httpHandler(req, res)\n        })\n      }, opts)\n    }\n  }\n\n  function ready (cb) {\n    if (this[kState].readyPromise !== null) {\n      if (cb != null) {\n        this[kState].readyPromise.then(() => cb(null, fastify), cb)\n        return\n      }\n\n      return this[kState].readyPromise\n    }\n\n    let resolveReady\n    let rejectReady\n\n    // run the hooks after returning the promise\n    process.nextTick(runHooks)\n\n    // Create a promise no matter what\n    // It will work as a barrier for all the .ready() calls (ensuring single hook execution)\n    // as well as a flow control mechanism to chain cbs and further\n    // promises\n    this[kState].readyPromise = new Promise(function (resolve, reject) {\n      resolveReady = resolve\n      rejectReady = reject\n    })\n\n    if (!cb) {\n      return this[kState].readyPromise\n    } else {\n      this[kState].readyPromise.then(() => cb(null, fastify), cb)\n    }\n\n    function runHooks () {\n      // start loading\n      fastify[kAvvioBoot]((err, done) => {\n        if (err || fastify[kState].started || fastify[kState].ready || fastify[kState].booting) {\n          manageErr(err)\n        } else {\n          fastify[kState].booting = true\n          hookRunnerApplication('onReady', fastify[kAvvioBoot], fastify, manageErr)\n        }\n        done()\n      })\n    }\n\n    function manageErr (err) {\n      // If the error comes out of Avvio's Error codes\n      // We create a make and preserve the previous error\n      // as cause\n      err = err != null && AVVIO_ERRORS_MAP[err.code] != null\n        ? appendStackTrace(err, new AVVIO_ERRORS_MAP[err.code](err.message))\n        : err\n\n      if (err) {\n        return rejectReady(err)\n      }\n\n      resolveReady(fastify)\n      fastify[kState].booting = false\n      fastify[kState].ready = true\n      fastify[kState].promise = null\n    }\n  }\n\n  // Used exclusively in TypeScript contexts to enable auto type inference from JSON schema.\n  function withTypeProvider () {\n    return this\n  }\n\n  // wrapper that we expose to the user for hooks handling\n  function addHook (name, fn) {\n    throwIfAlreadyStarted('Cannot call \"addHook\"!')\n\n    if (fn == null) {\n      throw new errorCodes.FST_ERR_HOOK_INVALID_HANDLER(name, fn)\n    }\n\n    if (name === 'onSend' || name === 'preSerialization' || name === 'onError' || name === 'preParsing') {\n      if (fn.constructor.name === 'AsyncFunction' && fn.length === 4) {\n        throw new errorCodes.FST_ERR_HOOK_INVALID_ASYNC_HANDLER()\n      }\n    } else if (name === 'onReady' || name === 'onListen') {\n      if (fn.constructor.name === 'AsyncFunction' && fn.length !== 0) {\n        throw new errorCodes.FST_ERR_HOOK_INVALID_ASYNC_HANDLER()\n      }\n    } else if (name === 'onRequestAbort') {\n      if (fn.constructor.name === 'AsyncFunction' && fn.length !== 1) {\n        throw new errorCodes.FST_ERR_HOOK_INVALID_ASYNC_HANDLER()\n      }\n    } else {\n      if (fn.constructor.name === 'AsyncFunction' && fn.length === 3) {\n        throw new errorCodes.FST_ERR_HOOK_INVALID_ASYNC_HANDLER()\n      }\n    }\n\n    if (name === 'onClose') {\n      this.onClose(fn.bind(this))\n    } else if (name === 'onReady' || name === 'onListen' || name === 'onRoute') {\n      this[kHooks].add(name, fn)\n    } else {\n      this.after((err, done) => {\n        _addHook.call(this, name, fn)\n        done(err)\n      })\n    }\n    return this\n\n    function _addHook (name, fn) {\n      this[kHooks].add(name, fn)\n      this[kChildren].forEach(child => _addHook.call(child, name, fn))\n    }\n  }\n\n  // wrapper that we expose to the user for schemas handling\n  function addSchema (schema) {\n    throwIfAlreadyStarted('Cannot call \"addSchema\"!')\n    this[kSchemaController].add(schema)\n    this[kChildren].forEach(child => child.addSchema(schema))\n    return this\n  }\n\n  function defaultClientErrorHandler (err, socket) {\n    // In case of a connection reset, the socket has been destroyed and there is nothing that needs to be done.\n    // https://nodejs.org/api/http.html#http_event_clienterror\n    if (err.code === 'ECONNRESET' || socket.destroyed) {\n      return\n    }\n\n    let body, errorCode, errorStatus, errorLabel\n\n    if (err.code === 'ERR_HTTP_REQUEST_TIMEOUT') {\n      errorCode = '408'\n      errorStatus = http.STATUS_CODES[errorCode]\n      body = `{\"error\":\"${errorStatus}\",\"message\":\"Client Timeout\",\"statusCode\":408}`\n      errorLabel = 'timeout'\n    } else if (err.code === 'HPE_HEADER_OVERFLOW') {\n      errorCode = '431'\n      errorStatus = http.STATUS_CODES[errorCode]\n      body = `{\"error\":\"${errorStatus}\",\"message\":\"Exceeded maximum allowed HTTP header size\",\"statusCode\":431}`\n      errorLabel = 'header_overflow'\n    } else {\n      errorCode = '400'\n      errorStatus = http.STATUS_CODES[errorCode]\n      body = `{\"error\":\"${errorStatus}\",\"message\":\"Client Error\",\"statusCode\":400}`\n      errorLabel = 'error'\n    }\n\n    // Most devs do not know what to do with this error.\n    // In the vast majority of cases, it's a network error and/or some\n    // config issue on the load balancer side.\n    this.log.trace({ err }, `client ${errorLabel}`)\n    // Copying standard node behavior\n    // https://github.com/nodejs/node/blob/6ca23d7846cb47e84fd344543e394e50938540be/lib/_http_server.js#L666\n\n    // If the socket is not writable, there is no reason to try to send data.\n    if (socket.writable) {\n      socket.write(`HTTP/1.1 ${errorCode} ${errorStatus}\\r\\nContent-Length: ${body.length}\\r\\nContent-Type: application/json\\r\\n\\r\\n${body}`)\n    }\n    socket.destroy(err)\n  }\n\n  // If the router does not match any route, every request will land here\n  // req and res are Node.js core objects\n  function defaultRoute (req, res) {\n    if (req.headers['accept-version'] !== undefined) {\n      // we remove the accept-version header for performance result\n      // because we do not want to go through the constraint checking\n      // the usage of symbol here to prevent any collision on custom header name\n      req.headers[kRequestAcceptVersion] = req.headers['accept-version']\n      req.headers['accept-version'] = undefined\n    }\n    fourOhFour.router.lookup(req, res)\n  }\n\n  function onBadUrl (path, req, res) {\n    if (frameworkErrors) {\n      const id = getGenReqId(onBadUrlContext.server, req)\n      const childLogger = createChildLogger(onBadUrlContext, logger, req, id)\n\n      const request = new Request(id, null, req, null, childLogger, onBadUrlContext)\n      const reply = new Reply(res, request, childLogger)\n\n      if (disableRequestLogging === false) {\n        childLogger.info({ req: request }, 'incoming request')\n      }\n\n      return frameworkErrors(new FST_ERR_BAD_URL(path), request, reply)\n    }\n    const body = `{\"error\":\"Bad Request\",\"code\":\"FST_ERR_BAD_URL\",\"message\":\"'${path}' is not a valid url component\",\"statusCode\":400}`\n    res.writeHead(400, {\n      'Content-Type': 'application/json',\n      'Content-Length': body.length\n    })\n    res.end(body)\n  }\n\n  function buildAsyncConstraintCallback (isAsync, req, res) {\n    if (isAsync === false) return undefined\n    return function onAsyncConstraintError (err) {\n      if (err) {\n        if (frameworkErrors) {\n          const id = getGenReqId(onBadUrlContext.server, req)\n          const childLogger = createChildLogger(onBadUrlContext, logger, req, id)\n\n          const request = new Request(id, null, req, null, childLogger, onBadUrlContext)\n          const reply = new Reply(res, request, childLogger)\n\n          if (disableRequestLogging === false) {\n            childLogger.info({ req: request }, 'incoming request')\n          }\n\n          return frameworkErrors(new FST_ERR_ASYNC_CONSTRAINT(), request, reply)\n        }\n        const body = '{\"error\":\"Internal Server Error\",\"message\":\"Unexpected error from async constraint\",\"statusCode\":500}'\n        res.writeHead(500, {\n          'Content-Type': 'application/json',\n          'Content-Length': body.length\n        })\n        res.end(body)\n      }\n    }\n  }\n\n  function setNotFoundHandler (opts, handler) {\n    throwIfAlreadyStarted('Cannot call \"setNotFoundHandler\"!')\n\n    fourOhFour.setNotFoundHandler.call(this, opts, handler, avvio, router.routeHandler)\n    return this\n  }\n\n  function setValidatorCompiler (validatorCompiler) {\n    throwIfAlreadyStarted('Cannot call \"setValidatorCompiler\"!')\n    this[kSchemaController].setValidatorCompiler(validatorCompiler)\n    return this\n  }\n\n  function setSchemaErrorFormatter (errorFormatter) {\n    throwIfAlreadyStarted('Cannot call \"setSchemaErrorFormatter\"!')\n    validateSchemaErrorFormatter(errorFormatter)\n    this[kSchemaErrorFormatter] = errorFormatter.bind(this)\n    return this\n  }\n\n  function setSerializerCompiler (serializerCompiler) {\n    throwIfAlreadyStarted('Cannot call \"setSerializerCompiler\"!')\n    this[kSchemaController].setSerializerCompiler(serializerCompiler)\n    return this\n  }\n\n  function setSchemaController (schemaControllerOpts) {\n    throwIfAlreadyStarted('Cannot call \"setSchemaController\"!')\n    const old = this[kSchemaController]\n    const schemaController = SchemaController.buildSchemaController(old, Object.assign({}, old.opts, schemaControllerOpts))\n    this[kSchemaController] = schemaController\n    this.getSchema = schemaController.getSchema.bind(schemaController)\n    this.getSchemas = schemaController.getSchemas.bind(schemaController)\n    return this\n  }\n\n  function setReplySerializer (replySerializer) {\n    throwIfAlreadyStarted('Cannot call \"setReplySerializer\"!')\n\n    this[kReplySerializerDefault] = replySerializer\n    return this\n  }\n\n  // wrapper that we expose to the user for configure the custom error handler\n  function setErrorHandler (func) {\n    throwIfAlreadyStarted('Cannot call \"setErrorHandler\"!')\n\n    if (typeof func !== 'function') {\n      throw new FST_ERR_ERROR_HANDLER_NOT_FN()\n    }\n\n    this[kErrorHandler] = buildErrorHandler(this[kErrorHandler], func.bind(this))\n    return this\n  }\n\n  function setChildLoggerFactory (factory) {\n    throwIfAlreadyStarted('Cannot call \"setChildLoggerFactory\"!')\n\n    this[kChildLoggerFactory] = factory\n    return this\n  }\n\n  function printRoutes (opts = {}) {\n    // includeHooks:true - shortcut to include all supported hooks exported by fastify.Hooks\n    opts.includeMeta = opts.includeHooks ? opts.includeMeta ? supportedHooks.concat(opts.includeMeta) : supportedHooks : opts.includeMeta\n    return router.printRoutes(opts)\n  }\n\n  function wrapRouting (router, { rewriteUrl, logger }) {\n    let isAsync\n    return function preRouting (req, res) {\n      // only call isAsyncConstraint once\n      if (isAsync === undefined) isAsync = router.isAsyncConstraint()\n      if (rewriteUrl) {\n        req.originalUrl = req.url\n        const url = rewriteUrl.call(fastify, req)\n        if (typeof url === 'string') {\n          req.url = url\n        } else {\n          const err = new FST_ERR_ROUTE_REWRITE_NOT_STR(req.url, typeof url)\n          req.destroy(err)\n        }\n      }\n      router.routing(req, res, buildAsyncConstraintCallback(isAsync, req, res))\n    }\n  }\n\n  function setGenReqId (func) {\n    throwIfAlreadyStarted('Cannot call \"setGenReqId\"!')\n\n    this[kGenReqId] = reqIdGenFactory(this[kOptions].requestIdHeader, func)\n    return this\n  }\n\n  function addHttpMethod (method, { hasBody = false } = {}) {\n    if (typeof method !== 'string' || http.METHODS.indexOf(method) === -1) {\n      throw new FST_ERR_ROUTE_METHOD_INVALID()\n    }\n\n    if (hasBody === true) {\n      this[kSupportedHTTPMethods].bodywith.add(method)\n      this[kSupportedHTTPMethods].bodyless.delete(method)\n    } else {\n      this[kSupportedHTTPMethods].bodywith.delete(method)\n      this[kSupportedHTTPMethods].bodyless.add(method)\n    }\n\n    const _method = method.toLowerCase()\n    if (!this.hasDecorator(_method)) {\n      this.decorate(_method, function (url, options, handler) {\n        return router.prepareRoute.call(this, { method, url, options, handler })\n      })\n    }\n\n    return this\n  }\n}\n\nfunction validateSchemaErrorFormatter (schemaErrorFormatter) {\n  if (typeof schemaErrorFormatter !== 'function') {\n    throw new FST_ERR_SCHEMA_ERROR_FORMATTER_NOT_FN(typeof schemaErrorFormatter)\n  } else if (schemaErrorFormatter.constructor.name === 'AsyncFunction') {\n    throw new FST_ERR_SCHEMA_ERROR_FORMATTER_NOT_FN('AsyncFunction')\n  }\n}\n\n/**\n * These export configurations enable JS and TS developers\n * to consume fastify in whatever way best suits their needs.\n * Some examples of supported import syntax includes:\n * - `const fastify = require('fastify')`\n * - `const { fastify } = require('fastify')`\n * - `import * as Fastify from 'fastify'`\n * - `import { fastify, TSC_definition } from 'fastify'`\n * - `import fastify from 'fastify'`\n * - `import fastify, { TSC_definition } from 'fastify'`\n */\nmodule.exports = fastify\nmodule.exports.errorCodes = errorCodes\nmodule.exports.fastify = fastify\nmodule.exports.default = fastify\n"
        },
        {
          "name": "integration",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 6.67,
          "content": "{\n  \"name\": \"fastify\",\n  \"version\": \"5.2.1\",\n  \"description\": \"Fast and low overhead web framework, for Node.js\",\n  \"main\": \"fastify.js\",\n  \"type\": \"commonjs\",\n  \"types\": \"fastify.d.ts\",\n  \"scripts\": {\n    \"bench\": \"branchcmp -r 2 -g -s \\\"npm run benchmark\\\"\",\n    \"benchmark\": \"concurrently -k -s first \\\"node ./examples/benchmark/simple.js\\\" \\\"autocannon -c 100 -d 30 -p 10 localhost:3000/\\\"\",\n    \"benchmark:parser\": \"concurrently -k -s first \\\"node ./examples/benchmark/parser.js\\\" \\\"autocannon -c 100 -d 30 -p 10 -i ./examples/benchmark/body.json -H \\\"content-type:application/jsoff\\\" -m POST localhost:3000/\\\"\",\n    \"build:validation\": \"node build/build-error-serializer.js && node build/build-validation.js\",\n    \"coverage\": \"c8 --reporter html borp --reporter=@jsumners/line-reporter --coverage --check-coverage --lines 100 \",\n    \"coverage:ci-check-coverage\": \"borp --reporter=@jsumners/line-reporter --coverage --check-coverage --lines 100\",\n    \"lint\": \"npm run lint:eslint\",\n    \"lint:fix\": \"eslint --fix\",\n    \"lint:markdown\": \"markdownlint-cli2\",\n    \"lint:eslint\": \"eslint\",\n    \"prepublishOnly\": \"cross-env PREPUBLISH=true borp --reporter=@jsumners/line-reporter && npm run test:validator:integrity\",\n    \"test\": \"npm run lint && npm run unit && npm run test:typescript\",\n    \"test:ci\": \"npm run unit && npm run test:typescript\",\n    \"test:report\": \"npm run lint && npm run unit:report && npm run test:typescript\",\n    \"test:validator:integrity\": \"npm run build:validation && git diff --quiet --ignore-all-space --ignore-blank-lines --ignore-cr-at-eol lib/error-serializer.js && git diff --quiet --ignore-all-space --ignore-blank-lines --ignore-cr-at-eol lib/configValidator.js\",\n    \"test:typescript\": \"tsc test/types/import.ts --target es2022 --moduleResolution node16 --module node16 --noEmit && tsd\",\n    \"test:watch\": \"npm run unit -- --watch --coverage-report=none --reporter=terse\",\n    \"unit\": \"borp --reporter=@jsumners/line-reporter --coverage --check-coverage\",\n    \"unit:report\": \"c8 --reporter html borp --reporter=@jsumners/line-reporter\",\n    \"citgm\": \"borp --reporter=@jsumners/line-reporter --coverage --check-coverage --concurrency=1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/fastify/fastify.git\"\n  },\n  \"keywords\": [\n    \"web\",\n    \"framework\",\n    \"json\",\n    \"schema\",\n    \"open\",\n    \"api\"\n  ],\n  \"author\": \"Matteo Collina <hello@matteocollina.com>\",\n  \"contributors\": [\n    {\n      \"name\": \"Tomas Della Vedova\",\n      \"url\": \"http://delved.org\",\n      \"author\": true\n    },\n    {\n      \"name\": \"Tommaso Allevi\",\n      \"email\": \"tomallevi@gmail.com\"\n    },\n    {\n      \"name\": \"Ethan Arrowood\",\n      \"url\": \"https://github.com/Ethan-Arrowood\",\n      \"email\": \"ethan.arrowood@gmail.com\"\n    },\n    {\n      \"name\": \"Dustin Deus\",\n      \"url\": \"http://starptech.de\",\n      \"email\": \"deusdustin@gmail.com\"\n    },\n    {\n      \"name\": \"Ayoub El Khattabi\",\n      \"url\": \"https://github.com/AyoubElk\",\n      \"email\": \"elkhattabi.ayoub@gmail.com\"\n    },\n    {\n      \"name\": \"Rafael Gonzaga\",\n      \"email\": \"rafael.nunu@hotmail.com\",\n      \"url\": \"https://github.com/rafaelgss\"\n    },\n    {\n      \"name\": \"Trivikram Kamat\",\n      \"url\": \"http://trivikr.github.io\",\n      \"email\": \"trivikr.dev@gmail.com\"\n    },\n    {\n      \"name\": \"Luciano Mammino\",\n      \"url\": \"https://loige.co\"\n    },\n    {\n      \"name\": \"Cemre Mengu\",\n      \"email\": \"cemremengu@gmail.com\"\n    },\n    {\n      \"name\": \"Evan Shortiss\",\n      \"email\": \"evanshortiss@gmail.com\"\n    },\n    {\n      \"name\": \"Maksim Sinik\",\n      \"url\": \"https://maksim.dev\"\n    },\n    {\n      \"name\": \"Manuel Spigolon\",\n      \"email\": \"behemoth89@gmail.com\"\n    },\n    {\n      \"name\": \"James Sumners\",\n      \"url\": \"https://james.sumners.info\"\n    },\n    {\n      \"name\": \"Denis Fäcke\",\n      \"url\": \"https://github.com/SerayaEryn\"\n    },\n    {\n      \"name\": \"Igor Savin\",\n      \"email\": \"kibertoad@gmail.com\",\n      \"url\": \"https://github.com/kibertoad\"\n    },\n    {\n      \"name\": \"Vincent Le Goff\",\n      \"email\": \"vince.legoff@gmail.com\",\n      \"url\": \"https://github.com/zekth\"\n    },\n    {\n      \"name\": \"Luis Orbaiceta\",\n      \"email\": \"luisorbaiceta@gmail.com\",\n      \"url\": \"https://luisorbaiceta.com\"\n    },\n    {\n      \"name\": \"Carlos Fuentes\",\n      \"email\": \"me@metcoder.dev\",\n      \"url\": \"https://metcoder.dev\"\n    },\n    {\n      \"name\": \"Gürgün Dayıoğlu\",\n      \"email\": \"hey@gurgun.day\",\n      \"url\": \"https://heyhey.to/G\"\n    },\n    {\n      \"name\": \"Aras Abbasi\",\n      \"email\": \"aras.abbasi@gmail.com\"\n    },\n    {\n      \"name\": \"Frazer Smith\",\n      \"email\": \"frazer.dev@icloud.com\",\n      \"url\": \"https://github.com/fdawgs\"\n    },\n    {\n      \"name\": \"KaKa Ng\",\n      \"email\": \"kaka@kakang.dev\",\n      \"url\": \"https://github.com/climba03003\"\n    }\n  ],\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/fastify/fastify/issues\"\n  },\n  \"homepage\": \"https://fastify.dev/\",\n  \"funding\": [\n    {\n      \"type\": \"github\",\n      \"url\": \"https://github.com/sponsors/fastify\"\n    },\n    {\n      \"type\": \"opencollective\",\n      \"url\": \"https://opencollective.com/fastify\"\n    }\n  ],\n  \"devDependencies\": {\n    \"@fastify/pre-commit\": \"^2.1.0\",\n    \"@jsumners/line-reporter\": \"^1.0.1\",\n    \"@sinclair/typebox\": \"^0.34.13\",\n    \"@sinonjs/fake-timers\": \"^11.2.2\",\n    \"@stylistic/eslint-plugin\": \"^2.1.0\",\n    \"@stylistic/eslint-plugin-js\": \"^2.1.0\",\n    \"@types/node\": \"^22.0.0\",\n    \"ajv\": \"^8.12.0\",\n    \"ajv-errors\": \"^3.0.0\",\n    \"ajv-formats\": \"^3.0.1\",\n    \"ajv-i18n\": \"^4.2.0\",\n    \"ajv-merge-patch\": \"^5.0.1\",\n    \"autocannon\": \"^8.0.0\",\n    \"borp\": \"^0.19.0\",\n    \"branch-comparer\": \"^1.1.0\",\n    \"concurrently\": \"^9.1.2\",\n    \"cross-env\": \"^7.0.3\",\n    \"eslint\": \"^9.0.0\",\n    \"fast-json-body\": \"^1.1.0\",\n    \"fastify-plugin\": \"^5.0.0\",\n    \"fluent-json-schema\": \"^5.0.0\",\n    \"h2url\": \"^0.2.0\",\n    \"http-errors\": \"^2.0.0\",\n    \"joi\": \"^17.12.3\",\n    \"json-schema-to-ts\": \"^3.0.1\",\n    \"JSONStream\": \"^1.3.5\",\n    \"markdownlint-cli2\": \"^0.17.1\",\n    \"neostandard\": \"^0.12.0\",\n    \"node-forge\": \"^1.3.1\",\n    \"proxyquire\": \"^2.1.3\",\n    \"simple-get\": \"^4.0.1\",\n    \"split2\": \"^4.2.0\",\n    \"tap\": \"^21.0.0\",\n    \"tsd\": \"^0.31.0\",\n    \"typescript\": \"~5.7.2\",\n    \"undici\": \"^6.13.0\",\n    \"vary\": \"^1.1.2\",\n    \"yup\": \"^1.4.0\"\n  },\n  \"dependencies\": {\n    \"@fastify/ajv-compiler\": \"^4.0.0\",\n    \"@fastify/error\": \"^4.0.0\",\n    \"@fastify/fast-json-stringify-compiler\": \"^5.0.0\",\n    \"@fastify/proxy-addr\": \"^5.0.0\",\n    \"abstract-logging\": \"^2.0.1\",\n    \"avvio\": \"^9.0.0\",\n    \"fast-json-stringify\": \"^6.0.0\",\n    \"find-my-way\": \"^9.0.0\",\n    \"light-my-request\": \"^6.0.0\",\n    \"pino\": \"^9.0.0\",\n    \"process-warning\": \"^4.0.0\",\n    \"rfdc\": \"^1.3.1\",\n    \"secure-json-parse\": \"^3.0.1\",\n    \"semver\": \"^7.6.0\",\n    \"toad-cache\": \"^3.7.0\"\n  },\n  \"tsd\": {\n    \"directory\": \"test/types\"\n  }\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "types",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}