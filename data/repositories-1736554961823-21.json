{
  "metadata": {
    "timestamp": 1736554961823,
    "page": 21,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ohmyzsh/ohmyzsh",
      "stars": 175222,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.19,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\nindent_size = 2\nindent_style = space\n\n[*.py]\nindent_size = 4\n\n[devcontainer.json]\nindent_size = 4\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.11,
          "content": "# custom files\ncustom/\n\n# temp files directories\ncache/\nlog/\n*.swp\n.DS_Store\n\n# editor configs\n.vscode\n.idea\n"
        },
        {
          "name": ".gitpod.Dockerfile",
          "type": "blob",
          "size": 0.13,
          "content": "FROM gitpod/workspace-full\n\nRUN sudo apt-get update && \\\n    sudo apt-get install -y zsh && \\\n    sudo rm -rf /var/lib/apt/lists/*\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.25,
          "content": "image:\n  file: .gitpod.Dockerfile\n\ntasks:\n  - init: |\n      export EDITOR=\"command gp open -w\" VISUAL=\"command gp open -w\"\n      cp -f /workspace/ohmyzsh/templates/zshrc.zsh-template ~/.zshrc\n      ln -sf /workspace/ohmyzsh ~/.oh-my-zsh\n    command: exec zsh\n"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.05,
          "content": "{\n  \"printWidth\": 110,\n  \"proseWrap\": \"always\"\n}\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.29,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at ohmyzsh@planetargon.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 9,
          "content": "# CONTRIBUTING GUIDELINES\n\nOh-My-Zsh is a community-driven project. Contribution is welcome, encouraged, and appreciated.\nIt is also essential for the development of the project.\n\nFirst, please take a moment to review our [code of conduct](CODE_OF_CONDUCT.md).\n\nThese guidelines are an attempt at better addressing the huge amount of pending\nissues and pull requests. Please read them closely.\n\nForemost, be so kind as to [search](#use-the-search-luke). This ensures any contribution\nyou would make is not already covered.\n\n<!-- TOC updateonsave:true depthfrom:2 -->\n\n- [Reporting Issues](#reporting-issues)\n  - [You have a problem](#you-have-a-problem)\n  - [You have a suggestion](#you-have-a-suggestion)\n- [Submitting Pull Requests](#submitting-pull-requests)\n  - [Getting started](#getting-started)\n  - [You have a solution](#you-have-a-solution)\n  - [You have an addition](#you-have-an-addition)\n- [Use the Search, Luke](#use-the-search-luke)\n- [Commit Guidelines](#commit-guidelines)\n  - [Format](#format)\n  - [Style](#style)\n- [Volunteer](#volunteer)\n\n<!-- /TOC -->\n\n## Reporting Issues\n\n### You have a problem\n\nPlease be so kind as to [search](#use-the-search-luke) for any open issue already covering\nyour problem.\n\nIf you find one, comment on it, so we know more people are experiencing it.\n\nIf not, look at the [Troubleshooting](https://github.com/ohmyzsh/ohmyzsh/wiki/Troubleshooting)\npage for instructions on how to gather data to better debug your problem.\n\nThen, you can go ahead and create an issue with as much detail as you can provide.\nIt should include the data gathered as indicated above, along with the following:\n\n1. How to reproduce the problem\n2. What the correct behavior should be\n3. What the actual behavior is\n\nPlease copy to anyone relevant (e.g. plugin maintainers) by mentioning their GitHub handle\n(starting with `@`) in your message.\n\nWe will do our very best to help you.\n\n### You have a suggestion\n\nPlease be so kind as to [search](#use-the-search-luke) for any open issue already covering\nyour suggestion.\n\nIf you find one, comment on it, so we know more people are supporting it.\n\nIf not, you can go ahead and create an issue. Please copy to anyone relevant (e.g. plugin\nmaintainers) by mentioning their GitHub handle (starting with `@`) in your message.\n\n## Submitting Pull Requests\n\n### Getting started\n\nYou should be familiar with the basics of\n[contributing on GitHub](https://help.github.com/articles/using-pull-requests) and have a fork\n[properly set up](https://github.com/ohmyzsh/ohmyzsh/wiki/Contribution-Technical-Practices).\n\nYou MUST always create PRs with _a dedicated branch_ based on the latest upstream tree.\n\nIf you create your own PR, please make sure you do it right. Also be so kind as to reference\nany issue that would be solved in the PR description body,\n[for instance](https://help.github.com/articles/closing-issues-via-commit-messages/)\n_\"Fixes #XXXX\"_ for issue number XXXX.\n\n### You have a solution\n\nPlease be so kind as to [search](#use-the-search-luke) for any open issue already covering\nyour [problem](#you-have-a-problem), and any pending/merged/rejected PR covering your solution.\n\nIf the solution is already reported, try it out and +1 the pull request if the\nsolution works ok. On the other hand, if you think your solution is better, post\nit with reference to the other one so we can have both solutions to compare.\n\nIf not, then go ahead and submit a PR. Please copy to anyone relevant (e.g. plugin\nmaintainers) by mentioning their GitHub handle (starting with `@`) in your message.\n\n### You have an addition\n\nPlease [do not](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes#dont-send-us-your-theme-for-now)\nsend themes for now.\n\nPlease be so kind as to [search](#use-the-search-luke) for any pending, merged or rejected Pull Requests\ncovering or related to what you want to add.\n\nIf you find one, try it out and work with the author on a common solution.\n\nIf not, then go ahead and submit a PR. Please copy to anyone relevant (e.g. plugin\nmaintainers) by mentioning their GitHub handle (starting with `@`) in your message.\n\nFor any extensive change, such as a new plugin, you will have to find testers to +1 your PR.\n\n### New plugin aliases\n\nWe acknowledge that aliases are a core part of Oh My Zsh. There are plugins that have +100 aliases!\n\nThis has become an issue for two opposing reasons:\n\n- Some users want to have their personal aliases in Oh My Zsh.\n- Some users don't want any aliases at all and feel that there are too many.\n\nBecause of this, from now on, we require that new aliases follow these conditions:\n\n1. They will be used by many people, not just a few.\n2. The aliases will be used many times and for common tasks.\n3. Prefer one generic alias over many specific ones.\n4. When justifying the need for an alias, talk about workflows where you'll use it,\n   preferably in combination with other aliases.\n5. If a command with the same name exists, look for a different alias name.\n\nThis list is not exhaustive! Please remember that your alias will be in the machines of many people,\nso it should be justified why they should have it.\n\n----\n\n## Use the Search, Luke\n\n_May the Force (of past experiences) be with you_\n\nGitHub offers [many search features](https://help.github.com/articles/searching-github/)\nto help you check whether a similar contribution to yours already exists. Please search\nbefore making any contribution, it avoids duplicates and eases maintenance. Trust me,\nthat works 90% of the time.\n\nYou can also take a look at the [FAQ](https://github.com/ohmyzsh/ohmyzsh/wiki/FAQ)\nto be sure your contribution has not already come up.\n\nIf all fails, your thing has probably not been reported yet, so you can go ahead\nand [create an issue](#reporting-issues) or [submit a PR](#submitting-pull-requests).\n\n----\n\n## Commit Guidelines\n\nOh My Zsh uses the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/)\nspecification. The automatic changelog tool uses these to automatically generate\na changelog based on the commit messages. Here's a guide to writing a commit message\nto allow this:\n\n### Format\n\n```\ntype(scope)!: subject\n```\n\n- `type`: the type of the commit is one of the following:\n\n  - `feat`: new features.\n  - `fix`: bug fixes.\n  - `docs`: documentation changes.\n  - `refactor`: refactor of a particular code section without introducing\n    new features or bug fixes.\n  - `style`: code style improvements.\n  - `perf`: performance improvements.\n  - `test`: changes to the test suite.\n  - `ci`: changes to the CI system.\n  - `build`: changes to the build system (we don't yet have one so this shouldn't apply).\n  - `chore`: for other changes that don't match previous types. This doesn't appear\n    in the changelog.\n\n- `scope`: section of the codebase that the commit makes changes to. If it makes changes to\n  many sections, or if no section in particular is modified, leave blank without the parentheses.\n  Examples:\n\n  - Commit that changes the `git` plugin:\n  ```\n  feat(git): add alias for `git commit`\n  ```\n\n  - Commit that changes many plugins:\n  ```\n  style: fix inline declaration of arrays\n  ```\n\n  For changes to plugins or themes, the scope should be the plugin or theme name:\n\n  - ✅ `fix(agnoster): commit subject`\n  - ❌ `fix(theme/agnoster): commit subject`\n\n- `!`: this goes after the `scope` (or the `type` if scope is empty), to indicate that the commit\n  introduces breaking changes.\n\n  Optionally, you can specify a message that the changelog tool will display to the user to indicate\n  what's changed and what they can do to deal with it. You can use multiple lines to type this message;\n  the changelog parser will keep reading until the end of the commit message or until it finds an empty\n  line.\n\n  Example (made up):\n\n  ```\n  style(agnoster)!: change dirty git repo glyph\n\n  BREAKING CHANGE: the glyph to indicate when a git repository is dirty has\n  changed from a Powerline character to a standard UTF-8 emoji. You can\n  change it back by setting `ZSH_THEME_DIRTY_GLYPH`.\n\n  Fixes #420\n\n  Co-authored-by: Username <email>\n  ```\n\n- `subject`: a brief description of the changes. This will be displayed in the changelog. If you need\n  to specify other details, you can use the commit body, but it won't be visible.\n\n  Formatting tricks: the commit subject may contain:\n\n  - Links to related issues or PRs by writing `#issue`. This will be highlighted by the changelog tool:\n    ```\n    feat(archlinux): add support for aura AUR helper (#9467)\n    ```\n\n  - Formatted inline code by using backticks: the text between backticks will also be highlighted by\n    the changelog tool:\n    ```\n    feat(shell-proxy): enable unexported `DEFAULT_PROXY` setting (#9774)\n    ```\n\n### Style\n\nTry to keep the first commit line short. It's harder to do using this commit style but try to be\nconcise, and if you need more space, you can use the commit body. Try to make sure that the commit\nsubject is clear and precise enough that users will know what changed by just looking at the changelog.\n\n----\n\n## Volunteer\n\nVery nice!! :)\n\nPlease have a look at the [Volunteer](https://github.com/ohmyzsh/ohmyzsh/wiki/Volunteers)\npage for instructions on where to start and more.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.12,
          "content": "MIT License\n\nCopyright (c) 2009-2022 Robby Russell and contributors (https://github.com/ohmyzsh/ohmyzsh/contributors)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.29,
          "content": "<p align=\"center\"><img src=\"https://ohmyzsh.s3.amazonaws.com/omz-ansi-github.png\" alt=\"Oh My Zsh\"></p>\n\nOh My Zsh is an open source, community-driven framework for managing your [zsh](https://www.zsh.org/)\nconfiguration.\n\nSounds boring. Let's try again.\n\n**Oh My Zsh will not make you a 10x developer...but you may feel like one.**\n\nOnce installed, your terminal shell will become the talk of the town _or your money back!_ With each keystroke\nin your command prompt, you'll take advantage of the hundreds of powerful plugins and beautiful themes.\nStrangers will come up to you in cafés and ask you, _\"that is amazing! are you some sort of genius?\"_\n\nFinally, you'll begin to get the sort of attention that you have always felt you deserved. ...or maybe you'll\nuse the time that you're saving to start flossing more often. 😬\n\nTo learn more, visit [ohmyz.sh](https://ohmyz.sh), follow [@ohmyzsh](https://x.com/ohmyzsh) on X (formerly\nTwitter), and join us on [Discord](https://discord.gg/ohmyzsh).\n\n[![CI](https://github.com/ohmyzsh/ohmyzsh/workflows/CI/badge.svg)](https://github.com/ohmyzsh/ohmyzsh/actions?query=workflow%3ACI)\n[![X (formerly Twitter) Follow](https://img.shields.io/twitter/follow/ohmyzsh?label=%40ohmyzsh&logo=x&style=flat)](https://twitter.com/intent/follow?screen_name=ohmyzsh)\n[![Mastodon Follow](https://img.shields.io/mastodon/follow/111169632522566717?label=%40ohmyzsh&domain=https%3A%2F%2Fmstdn.social&logo=mastodon&style=flat)](https://mstdn.social/@ohmyzsh)\n[![Discord server](https://img.shields.io/discord/642496866407284746)](https://discord.gg/ohmyzsh)\n[![Gitpod ready](https://img.shields.io/badge/Gitpod-ready-blue?logo=gitpod)](https://gitpod.io/#https://github.com/ohmyzsh/ohmyzsh)\n\n<details>\n<summary>Table of Contents</summary>\n\n- [Getting Started](#getting-started)\n  - [Operating System Compatibility](#operating-system-compatibility)\n  - [Prerequisites](#prerequisites)\n  - [Basic Installation](#basic-installation)\n    - [Manual Inspection](#manual-inspection)\n- [Using Oh My Zsh](#using-oh-my-zsh)\n  - [Plugins](#plugins)\n    - [Enabling Plugins](#enabling-plugins)\n    - [Using Plugins](#using-plugins)\n  - [Themes](#themes)\n    - [Selecting A Theme](#selecting-a-theme)\n  - [FAQ](#faq)\n- [Advanced Topics](#advanced-topics)\n  - [Advanced Installation](#advanced-installation)\n    - [Custom Directory](#custom-directory)\n    - [Unattended Install](#unattended-install)\n    - [Installing From A Forked Repository](#installing-from-a-forked-repository)\n    - [Manual Installation](#manual-installation)\n  - [Installation Problems](#installation-problems)\n  - [Custom Plugins And Themes](#custom-plugins-and-themes)\n  - [Enable GNU ls In macOS And freeBSD Systems](#enable-gnu-ls-in-macos-and-freebsd-systems)\n  - [Skip Aliases](#skip-aliases)\n  - [Async git prompt](#async-git-prompt)\n- [Getting Updates](#getting-updates)\n  - [Updates Verbosity](#updates-verbosity)\n  - [Manual Updates](#manual-updates)\n- [Uninstalling Oh My Zsh](#uninstalling-oh-my-zsh)\n- [How Do I Contribute To Oh My Zsh?](#how-do-i-contribute-to-oh-my-zsh)\n  - [Do Not Send Us Themes](#do-not-send-us-themes)\n- [Contributors](#contributors)\n- [Follow Us](#follow-us)\n- [Merchandise](#merchandise)\n- [License](#license)\n- [About Planet Argon](#about-planet-argon)\n\n</details>\n\n## Getting Started\n\n### Operating System Compatibility\n\n| O/S            | Status |\n| :------------- | :----: |\n| Android        |   ✅   |\n| freeBSD        |   ✅   |\n| LCARS          |   🛸   |\n| Linux          |   ✅   |\n| macOS          |   ✅   |\n| OS/2 Warp      |   ❌   |\n| Windows (WSL2) |   ✅   |\n\n### Prerequisites\n\n- [Zsh](https://www.zsh.org) should be installed (v4.3.9 or more recent is fine but we prefer 5.0.8 and\n  newer). If not pre-installed (run `zsh --version` to confirm), check the following wiki instructions here:\n  [Installing ZSH](https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH)\n- `curl` or `wget` should be installed\n- `git` should be installed (recommended v2.4.11 or higher)\n\n### Basic Installation\n\nOh My Zsh is installed by running one of the following commands in your terminal. You can install this via the\ncommand-line with either `curl`, `wget` or another similar tool.\n\n| Method    | Command                                                                                           |\n| :-------- | :------------------------------------------------------------------------------------------------ |\n| **curl**  | `sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"` |\n| **wget**  | `sh -c \"$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"`   |\n| **fetch** | `sh -c \"$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"` |\n\nAlternatively, the installer is also mirrored outside GitHub. Using this URL instead may be required if you're\nin a country like China or India (for certain ISPs), that blocks `raw.githubusercontent.com`:\n\n| Method    | Command                                           |\n| :-------- | :------------------------------------------------ |\n| **curl**  | `sh -c \"$(curl -fsSL https://install.ohmyz.sh/)\"` |\n| **wget**  | `sh -c \"$(wget -O- https://install.ohmyz.sh/)\"`   |\n| **fetch** | `sh -c \"$(fetch -o - https://install.ohmyz.sh/)\"` |\n\n_Note that any previous `.zshrc` will be renamed to `.zshrc.pre-oh-my-zsh`. After installation, you can move\nthe configuration you want to preserve into the new `.zshrc`._\n\n#### Manual Inspection\n\nIt's a good idea to inspect the install script from projects you don't yet know. You can do that by\ndownloading the install script first, looking through it so everything looks normal, then running it:\n\n```sh\nwget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh\nsh install.sh\n```\n\nIf the above URL times out or otherwise fails, you may have to substitute the URL for\n`https://install.ohmyz.sh` to be able to get the script.\n\n## Using Oh My Zsh\n\n### Plugins\n\nOh My Zsh comes with a shitload of plugins for you to take advantage of. You can take a look in the\n[plugins](https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins) directory and/or the\n[wiki](https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins) to see what's currently available.\n\n#### Enabling Plugins\n\nOnce you spot a plugin (or several) that you'd like to use with Oh My Zsh, you'll need to enable them in the\n`.zshrc` file. You'll find the zshrc file in your `$HOME` directory. Open it with your favorite text editor\nand you'll see a spot to list all the plugins you want to load.\n\n```sh\nvi ~/.zshrc\n```\n\nFor example, this might begin to look like this:\n\n```sh\nplugins=(\n  git\n  bundler\n  dotenv\n  macos\n  rake\n  rbenv\n  ruby\n)\n```\n\n_Note that the plugins are separated by whitespace (spaces, tabs, new lines...). **Do not** use commas between\nthem or it will break._\n\n#### Using Plugins\n\nEach built-in plugin includes a **README**, documenting it. This README should show the aliases (if the plugin\nadds any) and extra goodies that are included in that particular plugin.\n\n### Themes\n\nWe'll admit it. Early in the Oh My Zsh world, we may have gotten a bit too theme happy. We have over one\nhundred and fifty themes now bundled. Most of them have\n[screenshots](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes) on the wiki (We are working on updating this!).\nCheck them out!\n\n#### Selecting A Theme\n\n_Robby's theme is the default one. It's not the fanciest one. It's not the simplest one. It's just the right\none (for him)._\n\nOnce you find a theme that you'd like to use, you will need to edit the `~/.zshrc` file. You'll see an\nenvironment variable (all caps) in there that looks like:\n\n```sh\nZSH_THEME=\"robbyrussell\"\n```\n\nTo use a different theme, simply change the value to match the name of your desired theme. For example:\n\n```sh\nZSH_THEME=\"agnoster\" # (this is one of the fancy ones)\n# see https://github.com/ohmyzsh/ohmyzsh/wiki/Themes#agnoster\n```\n\n<!-- prettier-ignore-start -->\n> [!NOTE]\n> You will many times see screenshots for a zsh theme, and try it out, and find that it doesn't look the same for you.\n>\n> This is because many themes require installing a [Powerline Font](https://github.com/powerline/fonts) or a\n> [Nerd Font](https://github.com/ryanoasis/nerd-fonts) in order to render properly. Without them, these themes\n> will render weird prompt symbols. Check out\n> [the FAQ](https://github.com/ohmyzsh/ohmyzsh/wiki/FAQ#i-have-a-weird-character-in-my-prompt) for more\n> information.\n>\n> Also, beware that themes only control what your prompt looks like. This is, the text you see before or after\n> your cursor, where you'll type your commands. Themes don't control things such as the colors of your\n> terminal window (known as _color scheme_) or the font of your terminal. These are settings that you can\n> change in your terminal emulator. For more information, see\n> [what is a zsh theme](https://github.com/ohmyzsh/ohmyzsh/wiki/FAQ#what-is-a-zsh-theme).\n<!-- prettier-ignore-end -->\n\nOpen up a new terminal window and your prompt should look something like this:\n\n![Agnoster theme](https://cloud.githubusercontent.com/assets/2618447/6316862/70f58fb6-ba03-11e4-82c9-c083bf9a6574.png)\n\nIn case you did not find a suitable theme for your needs, please have a look at the wiki for\n[more of them](https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes).\n\nIf you're feeling feisty, you can let the computer select one randomly for you each time you open a new\nterminal window.\n\n```sh\nZSH_THEME=\"random\" # (...please let it be pie... please be some pie..)\n```\n\nAnd if you want to pick random theme from a list of your favorite themes:\n\n```sh\nZSH_THEME_RANDOM_CANDIDATES=(\n  \"robbyrussell\"\n  \"agnoster\"\n)\n```\n\nIf you only know which themes you don't like, you can add them similarly to an ignored list:\n\n```sh\nZSH_THEME_RANDOM_IGNORED=(pygmalion tjkirch_mod)\n```\n\n### FAQ\n\nIf you have some more questions or issues, you might find a solution in our\n[FAQ](https://github.com/ohmyzsh/ohmyzsh/wiki/FAQ).\n\n## Advanced Topics\n\nIf you're the type that likes to get their hands dirty, these sections might resonate.\n\n### Advanced Installation\n\nSome users may want to manually install Oh My Zsh, or change the default path or other settings that the\ninstaller accepts (these settings are also documented at the top of the install script).\n\n#### Custom Directory\n\nThe default location is `~/.oh-my-zsh` (hidden in your home directory, you can access it with\n`cd ~/.oh-my-zsh`)\n\nIf you'd like to change the install directory with the `ZSH` environment variable, either by running\n`export ZSH=/your/path` before installing, or by setting it before the end of the install pipeline like this:\n\n```sh\nZSH=\"$HOME/.dotfiles/oh-my-zsh\" sh install.sh\n```\n\n#### Unattended Install\n\nIf you're running the Oh My Zsh install script as part of an automated install, you can pass the\n`--unattended` flag to the `install.sh` script. This will have the effect of not trying to change the default\nshell, and it also won't run `zsh` when the installation has finished.\n\n```sh\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" \"\" --unattended\n```\n\nIf you're in China, India, or another country that blocks `raw.githubusercontent.com`, you may have to\nsubstitute the URL for `https://install.ohmyz.sh` for it to install.\n\n#### Installing From A Forked Repository\n\nThe install script also accepts these variables to allow the installation of a different repository:\n\n- `REPO` (default: `ohmyzsh/ohmyzsh`): this takes the form of `owner/repository`. If you set this variable,\n  the installer will look for a repository at `https://github.com/{owner}/{repository}`.\n\n- `REMOTE` (default: `https://github.com/${REPO}.git`): this is the full URL of the git repository clone. You\n  can use this setting if you want to install from a fork that is not on GitHub (GitLab, Bitbucket...) or if\n  you want to clone with SSH instead of HTTPS (`git@github.com:user/project.git`).\n\n  _NOTE: it's incompatible with setting the `REPO` variable. This setting will take precedence._\n\n- `BRANCH` (default: `master`): you can use this setting if you want to change the default branch to be\n  checked out when cloning the repository. This might be useful for testing a Pull Request, or if you want to\n  use a branch other than `master`.\n\nFor example:\n\n```sh\nREPO=apjanke/oh-my-zsh BRANCH=edge sh install.sh\n```\n\n#### Manual Installation\n\n##### 1. Clone The Repository <!-- omit in toc -->\n\n```sh\ngit clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh\n```\n\n##### 2. _Optionally_, Backup Your Existing `~/.zshrc` File <!-- omit in toc -->\n\n```sh\ncp ~/.zshrc ~/.zshrc.orig\n```\n\n##### 3. Create A New Zsh Configuration File <!-- omit in toc -->\n\nYou can create a new zsh config file by copying the template that we have included for you.\n\n```sh\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n```\n\n##### 4. Change Your Default Shell <!-- omit in toc -->\n\n```sh\nchsh -s $(which zsh)\n```\n\nYou must log out from your user session and log back in to see this change.\n\n##### 5. Initialize Your New Zsh Configuration <!-- omit in toc -->\n\nOnce you open up a new terminal window, it should load zsh with Oh My Zsh's configuration.\n\n### Installation Problems\n\nIf you have any hiccups installing, here are a few common fixes.\n\n- You _might_ need to modify your `PATH` in `~/.zshrc` if you're not able to find some commands after\n  switching to `oh-my-zsh`.\n- If you installed manually or changed the install location, check the `ZSH` environment variable in\n  `~/.zshrc`.\n\n### Custom Plugins And Themes\n\nIf you want to override any of the default behaviors, just add a new file (ending in `.zsh`) in the `custom/`\ndirectory.\n\nIf you have many functions that go well together, you can put them as a `XYZ.plugin.zsh` file in the\n`custom/plugins/` directory and then enable this plugin.\n\nIf you would like to override the functionality of a plugin distributed with Oh My Zsh, create a plugin of the\nsame name in the `custom/plugins/` directory and it will be loaded instead of the one in `plugins/`.\n\n### Enable GNU ls In macOS And freeBSD Systems\n\n<a name=\"enable-gnu-ls\"></a>\n\nThe default behaviour in Oh My Zsh is to use BSD `ls` in macOS and FreeBSD systems. If GNU `ls` is installed\n(as `gls` command), you can choose to use it instead. To do it, you can use zstyle-based config before\nsourcing `oh-my-zsh.sh`:\n\n```zsh\nzstyle ':omz:lib:theme-and-appearance' gnu-ls yes\n```\n\n_Note: this is not compatible with `DISABLE_LS_COLORS=true`_\n\n### Skip Aliases\n\n<a name=\"remove-directories-aliases\"></a>\n\nIf you want to skip default Oh My Zsh aliases (those defined in `lib/*` files) or plugin aliases, you can use\nthe settings below in your `~/.zshrc` file, **before Oh My Zsh is loaded**. Note that there are many different\nways to skip aliases, depending on your needs.\n\n```sh\n# Skip all aliases, in lib files and enabled plugins\nzstyle ':omz:*' aliases no\n\n# Skip all aliases in lib files\nzstyle ':omz:lib:*' aliases no\n# Skip only aliases defined in the directories.zsh lib file\nzstyle ':omz:lib:directories' aliases no\n\n# Skip all plugin aliases\nzstyle ':omz:plugins:*' aliases no\n# Skip only the aliases from the git plugin\nzstyle ':omz:plugins:git' aliases no\n```\n\nYou can combine these in other ways taking into account that more specific scopes take precedence:\n\n```sh\n# Skip all plugin aliases, except for the git plugin\nzstyle ':omz:plugins:*' aliases no\nzstyle ':omz:plugins:git' aliases yes\n```\n\nA previous version of this feature was using the setting below, which has been removed:\n\n```sh\nzstyle ':omz:directories' aliases no\n```\n\nInstead, you can now use the following:\n\n```sh\nzstyle ':omz:lib:directories' aliases no\n```\n\n#### Notice <!-- omit in toc -->\n\n> This feature is currently in a testing phase and it may be subject to change in the future. It is also not\n> currently compatible with plugin managers such as zpm or zinit, which don't source the init script\n> (`oh-my-zsh.sh`) where this feature is implemented in.\n\n> It is also not currently aware of \"aliases\" that are defined as functions. Example of such are `gccd`,\n> `ggf`, or `ggl` functions from the git plugin.\n\n### Async git prompt\n\nAsync prompt functions are an experimental feature (included on April 3, 2024) that allows Oh My Zsh to render\nprompt information asynchronously. This can improve prompt rendering performance, but it might not work well\nwith some setups. We hope that's not an issue, but if you're seeing problems with this new feature, you can\nturn it off by setting the following in your .zshrc file, before Oh My Zsh is sourced:\n\n```sh\nzstyle ':omz:alpha:lib:git' async-prompt no\n```\n\nIf your problem is that the git prompt just stopped appearing, you can try to force it setting the following\nconfiguration before `oh-my-zsh.sh` is sourced. If it still does not work, please open an issue with your\ncase.\n\n```sh\nzstyle ':omz:alpha:lib:git' async-prompt force\n```\n\n## Getting Updates\n\nBy default, you will be prompted to check for updates every 2 weeks. You can choose other update modes by\nadding a line to your `~/.zshrc` file, **before Oh My Zsh is loaded**:\n\n1. Automatic update without confirmation prompt:\n\n   ```sh\n   zstyle ':omz:update' mode auto\n   ```\n\n2. Just offer a reminder every few days, if there are updates available:\n\n   ```sh\n   zstyle ':omz:update' mode reminder\n   ```\n\n3. To disable automatic updates entirely:\n\n   ```sh\n   zstyle ':omz:update' mode disabled\n   ```\n\nNOTE: you can control how often Oh My Zsh checks for updates with the following setting:\n\n```sh\n# This will check for updates every 7 days\nzstyle ':omz:update' frequency 7\n# This will check for updates every time you open the terminal (not recommended)\nzstyle ':omz:update' frequency 0\n```\n\n### Updates Verbosity\n\nYou can also limit the update verbosity with the following settings:\n\n```sh\nzstyle ':omz:update' verbose default # default update prompt\n\nzstyle ':omz:update' verbose minimal # only few lines\n\nzstyle ':omz:update' verbose silent # only errors\n```\n\n### Manual Updates\n\nIf you'd like to update at any point in time (maybe someone just released a new plugin and you don't want to\nwait a week?) you just need to run:\n\n```sh\nomz update\n```\n\nMagic! 🎉\n\n## Uninstalling Oh My Zsh\n\nOh My Zsh isn't for everyone. We'll miss you, but we want to make this an easy breakup.\n\nIf you want to uninstall `oh-my-zsh`, just run `uninstall_oh_my_zsh` from the command-line. It will remove\nitself and revert your previous `bash` or `zsh` configuration.\n\n## How Do I Contribute To Oh My Zsh?\n\nBefore you participate in our delightful community, please read the [code of conduct](CODE_OF_CONDUCT.md).\n\nI'm far from being a [Zsh](https://www.zsh.org/) expert and suspect there are many ways to improve – if you\nhave ideas on how to make the configuration easier to maintain (and faster), don't hesitate to fork and send\npull requests!\n\nWe also need people to test out pull requests. So take a look through\n[the open issues](https://github.com/ohmyzsh/ohmyzsh/issues) and help where you can.\n\nSee [Contributing](CONTRIBUTING.md) for more details.\n\n### Do Not Send Us Themes\n\nWe have (more than) enough themes for the time being. Please add your theme to the\n[external themes](https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes) wiki page.\n\n## Contributors\n\nOh My Zsh has a vibrant community of happy users and delightful contributors. Without all the time and help\nfrom our contributors, it wouldn't be so awesome.\n\nThank you so much!\n\n<a href=\"https://github.com/ohmyzsh/ohmyzsh/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=ohmyzsh/ohmyzsh\" width=\"100%\"/>\n</a>\n\n## Follow Us\n\nWe're on social media:\n\n- [@ohmyzsh](https://x.com/ohmyzsh) on X (formerly Twitter). You should follow it.\n- [Facebook](https://www.facebook.com/Oh-My-Zsh-296616263819290/) poke us.\n- [Instagram](https://www.instagram.com/_ohmyzsh/) tag us in your post showing Oh My Zsh!\n- [Discord](https://discord.gg/ohmyzsh) to chat with us!\n\n## Merchandise\n\nWe have\n[stickers, shirts, and coffee mugs available](https://shop.planetargon.com/collections/oh-my-zsh?utm_source=github)\nfor you to show off your love of Oh My Zsh. Again, you will become the talk of the town!\n\n## License\n\nOh My Zsh is released under the [MIT license](LICENSE.txt).\n\n## About Planet Argon\n\n![Planet Argon](https://pa-github-assets.s3.amazonaws.com/PARGON_logo_digital_COL-small.jpg)\n\nOh My Zsh was started by the team at [Planet Argon](https://www.planetargon.com/?utm_source=github), a\n[Ruby on Rails development agency](https://www.planetargon.com/services/ruby-on-rails-development?utm_source=github).\nCheck out our [other open source projects](https://www.planetargon.com/open-source?utm_source=github).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.93,
          "content": "# Security Policy\n\n## Supported Versions\n\nAt the moment Oh My Zsh only considers the very latest commit to be supported.\nWe combine that with our fast response to incidents and the automated updates\nto minimize the time between vulnerability publication and patch release.\n\n| Version        | Supported          |\n|:-------------- |:------------------ |\n| master         | :white_check_mark: |\n| other commits  | :x:                |\n\nIn the near future we will introduce versioning, so expect this section to change.\n\n## Reporting a Vulnerability\n\n**Do not submit an issue or pull request**: this might reveal the vulnerability.\n\nInstead, you should use the form to [privately report a vulnerability to us via GitHub](https://github.com/ohmyzsh/ohmyzsh/security/advisories/new)\nor email the maintainers directly at: [**security@ohmyz.sh**](mailto:security@ohmyz.sh).\n\nWe will deal with the vulnerability privately and submit a patch as soon as possible.\n"
        },
        {
          "name": "cache",
          "type": "tree",
          "content": null
        },
        {
          "name": "custom",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "log",
          "type": "tree",
          "content": null
        },
        {
          "name": "oh-my-zsh.sh",
          "type": "blob",
          "size": 7.3,
          "content": "# ANSI formatting function (\\033[<code>m)\n# 0: reset, 1: bold, 4: underline, 22: no bold, 24: no underline, 31: red, 33: yellow\nomz_f() {\n  [ $# -gt 0 ] || return\n  IFS=\";\" printf \"\\033[%sm\" $*\n}\n# If stdout is not a terminal ignore all formatting\n[ -t 1 ] || omz_f() { :; }\n\n# Protect against non-zsh execution of Oh My Zsh (use POSIX syntax here)\n[ -n \"$ZSH_VERSION\" ] || {\n  omz_ptree() {\n    # Get process tree of the current process\n    pid=$$; pids=\"$pid\"\n    while [ ${pid-0} -ne 1 ] && ppid=$(ps -e -o pid,ppid | awk \"\\$1 == $pid { print \\$2 }\"); do\n      pids=\"$pids $pid\"; pid=$ppid\n    done\n\n    # Show process tree\n    case \"$(uname)\" in\n    Linux) ps -o ppid,pid,command -f -p $pids 2>/dev/null ;;\n    Darwin|*) ps -o ppid,pid,command -p $pids 2>/dev/null ;;\n    esac\n\n    # If ps command failed, try Busybox ps\n    [ $? -eq 0 ] || ps -o ppid,pid,comm | awk \"NR == 1 || index(\\\"$pids\\\", \\$2) != 0\"\n  }\n\n  {\n    shell=$(ps -o pid,comm | awk \"\\$1 == $$ { print \\$2 }\")\n    printf \"$(omz_f 1 31)Error:$(omz_f 22) Oh My Zsh can't be loaded from: $(omz_f 1)${shell}$(omz_f 22). \"\n    printf \"You need to run $(omz_f 1)zsh$(omz_f 22) instead.$(omz_f 0)\\n\"\n    printf \"$(omz_f 33)Here's the process tree:$(omz_f 22)\\n\\n\"\n    omz_ptree\n    printf \"$(omz_f 0)\\n\"\n  } >&2\n\n  return 1\n}\n\n# Check if in emulation mode, if so early return\n# https://github.com/ohmyzsh/ohmyzsh/issues/11686\n[[ \"$(emulate)\" = zsh ]] || {\n  printf \"$(omz_f 1 31)Error:$(omz_f 22) Oh My Zsh can't be loaded in \\`$(emulate)\\` emulation mode.$(omz_f 0)\\n\" >&2\n  return 1\n}\n\nunset -f omz_f\n\n# If ZSH is not defined, use the current script's directory.\n[[ -n \"$ZSH\" ]] || export ZSH=\"${${(%):-%x}:a:h}\"\n\n# Set ZSH_CUSTOM to the path where your custom config files\n# and plugins exists, or else we will use the default custom/\n[[ -n \"$ZSH_CUSTOM\" ]] || ZSH_CUSTOM=\"$ZSH/custom\"\n\n# Set ZSH_CACHE_DIR to the path where cache files should be created\n# or else we will use the default cache/\n[[ -n \"$ZSH_CACHE_DIR\" ]] || ZSH_CACHE_DIR=\"$ZSH/cache\"\n\n# Make sure $ZSH_CACHE_DIR is writable, otherwise use a directory in $HOME\nif [[ ! -w \"$ZSH_CACHE_DIR\" ]]; then\n  ZSH_CACHE_DIR=\"${XDG_CACHE_HOME:-$HOME/.cache}/oh-my-zsh\"\nfi\n\n# Create cache and completions dir and add to $fpath\nmkdir -p \"$ZSH_CACHE_DIR/completions\"\n(( ${fpath[(Ie)$ZSH_CACHE_DIR/completions]} )) || fpath=(\"$ZSH_CACHE_DIR/completions\" $fpath)\n\n# Check for updates on initial load...\nsource \"$ZSH/tools/check_for_upgrade.sh\"\n\n# Initializes Oh My Zsh\n\n# add a function path\nfpath=($ZSH/{functions,completions} $ZSH_CUSTOM/{functions,completions} $fpath)\n\n# Load all stock functions (from $fpath files) called below.\nautoload -U compaudit compinit zrecompile\n\nis_plugin() {\n  local base_dir=$1\n  local name=$2\n  builtin test -f $base_dir/plugins/$name/$name.plugin.zsh \\\n    || builtin test -f $base_dir/plugins/$name/_$name\n}\n\n# Add all defined plugins to fpath. This must be done\n# before running compinit.\nfor plugin ($plugins); do\n  if is_plugin \"$ZSH_CUSTOM\" \"$plugin\"; then\n    fpath=(\"$ZSH_CUSTOM/plugins/$plugin\" $fpath)\n  elif is_plugin \"$ZSH\" \"$plugin\"; then\n    fpath=(\"$ZSH/plugins/$plugin\" $fpath)\n  else\n    echo \"[oh-my-zsh] plugin '$plugin' not found\"\n  fi\ndone\n\n# Figure out the SHORT hostname\nif [[ \"$OSTYPE\" = darwin* ]]; then\n  # macOS's $HOST changes with dhcp, etc. Use ComputerName if possible.\n  SHORT_HOST=$(scutil --get ComputerName 2>/dev/null) || SHORT_HOST=\"${HOST/.*/}\"\nelse\n  SHORT_HOST=\"${HOST/.*/}\"\nfi\n\n# Save the location of the current completion dump file.\nif [[ -z \"$ZSH_COMPDUMP\" ]]; then\n  ZSH_COMPDUMP=\"${ZDOTDIR:-$HOME}/.zcompdump-${SHORT_HOST}-${ZSH_VERSION}\"\nfi\n\n# Construct zcompdump OMZ metadata\nzcompdump_revision=\"#omz revision: $(builtin cd -q \"$ZSH\"; git rev-parse HEAD 2>/dev/null)\"\nzcompdump_fpath=\"#omz fpath: $fpath\"\n\n# Delete the zcompdump file if OMZ zcompdump metadata changed\nif ! command grep -q -Fx \"$zcompdump_revision\" \"$ZSH_COMPDUMP\" 2>/dev/null \\\n   || ! command grep -q -Fx \"$zcompdump_fpath\" \"$ZSH_COMPDUMP\" 2>/dev/null; then\n  command rm -f \"$ZSH_COMPDUMP\"\n  zcompdump_refresh=1\nfi\n\nif [[ \"$ZSH_DISABLE_COMPFIX\" != true ]]; then\n  source \"$ZSH/lib/compfix.zsh\"\n  # Load only from secure directories\n  compinit -i -d \"$ZSH_COMPDUMP\"\n  # If completion insecurities exist, warn the user\n  handle_completion_insecurities &|\nelse\n  # If the user wants it, load from all found directories\n  compinit -u -d \"$ZSH_COMPDUMP\"\nfi\n\n# Append zcompdump metadata if missing\nif (( $zcompdump_refresh )) \\\n  || ! command grep -q -Fx \"$zcompdump_revision\" \"$ZSH_COMPDUMP\" 2>/dev/null; then\n  # Use `tee` in case the $ZSH_COMPDUMP filename is invalid, to silence the error\n  # See https://github.com/ohmyzsh/ohmyzsh/commit/dd1a7269#commitcomment-39003489\n  tee -a \"$ZSH_COMPDUMP\" &>/dev/null <<EOF\n\n$zcompdump_revision\n$zcompdump_fpath\nEOF\nfi\nunset zcompdump_revision zcompdump_fpath zcompdump_refresh\n\n# zcompile the completion dump file if the .zwc is older or missing.\nif command mkdir \"${ZSH_COMPDUMP}.lock\" 2>/dev/null; then\n  zrecompile -q -p \"$ZSH_COMPDUMP\"\n  command rm -rf \"$ZSH_COMPDUMP.zwc.old\" \"${ZSH_COMPDUMP}.lock\"\nfi\n\n_omz_source() {\n  local context filepath=\"$1\"\n\n  # Construct zstyle context based on path\n  case \"$filepath\" in\n  lib/*) context=\"lib:${filepath:t:r}\" ;;         # :t = lib_name.zsh, :r = lib_name\n  plugins/*) context=\"plugins:${filepath:h:t}\" ;; # :h = plugins/plugin_name, :t = plugin_name\n  esac\n\n  local disable_aliases=0\n  zstyle -T \":omz:${context}\" aliases || disable_aliases=1\n\n  # Back up alias names prior to sourcing\n  local -A aliases_pre galiases_pre\n  if (( disable_aliases )); then\n    aliases_pre=(\"${(@kv)aliases}\")\n    galiases_pre=(\"${(@kv)galiases}\")\n  fi\n\n  # Source file from $ZSH_CUSTOM if it exists, otherwise from $ZSH\n  if [[ -f \"$ZSH_CUSTOM/$filepath\" ]]; then\n    source \"$ZSH_CUSTOM/$filepath\"\n  elif [[ -f \"$ZSH/$filepath\" ]]; then\n    source \"$ZSH/$filepath\"\n  fi\n\n  # Unset all aliases that don't appear in the backed up list of aliases\n  if (( disable_aliases )); then\n    if (( #aliases_pre )); then\n      aliases=(\"${(@kv)aliases_pre}\")\n    else\n      (( #aliases )) && unalias \"${(@k)aliases}\"\n    fi\n    if (( #galiases_pre )); then\n      galiases=(\"${(@kv)galiases_pre}\")\n    else\n      (( #galiases )) && unalias \"${(@k)galiases}\"\n    fi\n  fi\n}\n\n# Load all of the lib files in ~/oh-my-zsh/lib that end in .zsh\n# TIP: Add files you don't want in git to .gitignore\nfor lib_file (\"$ZSH\"/lib/*.zsh); do\n  _omz_source \"lib/${lib_file:t}\"\ndone\nunset lib_file\n\n# Load all of the plugins that were defined in ~/.zshrc\nfor plugin ($plugins); do\n  _omz_source \"plugins/$plugin/$plugin.plugin.zsh\"\ndone\nunset plugin\n\n# Load all of your custom configurations from custom/\nfor config_file (\"$ZSH_CUSTOM\"/*.zsh(N)); do\n  source \"$config_file\"\ndone\nunset config_file\n\n# Load the theme\nis_theme() {\n  local base_dir=$1\n  local name=$2\n  builtin test -f $base_dir/$name.zsh-theme\n}\n\nif [[ -n \"$ZSH_THEME\" ]]; then\n  if is_theme \"$ZSH_CUSTOM\" \"$ZSH_THEME\"; then\n    source \"$ZSH_CUSTOM/$ZSH_THEME.zsh-theme\"\n  elif is_theme \"$ZSH_CUSTOM/themes\" \"$ZSH_THEME\"; then\n    source \"$ZSH_CUSTOM/themes/$ZSH_THEME.zsh-theme\"\n  elif is_theme \"$ZSH/themes\" \"$ZSH_THEME\"; then\n    source \"$ZSH/themes/$ZSH_THEME.zsh-theme\"\n  else\n    echo \"[oh-my-zsh] theme '$ZSH_THEME' not found\"\n  fi\nfi\n\n# set completion colors to be the same as `ls`, after theme has been loaded\n[[ -z \"$LS_COLORS\" ]] || zstyle ':completion:*' list-colors \"${(s.:.)LS_COLORS}\"\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "themes",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}