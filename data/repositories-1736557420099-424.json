{
  "metadata": {
    "timestamp": 1736557420099,
    "page": 424,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wg/wrk",
      "stars": 38258,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.01,
          "content": "obj/\nwrk\n"
        },
        {
          "name": "CHANGES",
          "type": "blob",
          "size": 0.92,
          "content": "master\n\n * Require OpenSSL 1.1.0+\n\nwrk 4.0.2\n\n * Send hostname using TLS SNI.\n * Add optional WITH_OPENSSL and WITH_LUAJIT to use system libs.\n * Bundle OpenSSL 1.0.2.\n * delay() can return milliseconds to delay sending next request.\n\nwrk 4.0.0\n\n * The wrk global variable is the only global defined by default.\n * wrk.init() calls the global init(), remove calls to wrk.init().\n * Add wrk.lookup(host, port) and wrk.connect(addr) functions.\n * Add setup phase that calls the global setup() for each thread.\n * Allow assignment to thread.addr to specify the server address.\n * Add thread:set(name, value), thread:get(name), and thread:stop().\n * Record latency for every request instead of random samples.\n * Latency and requests in done() are now callable, not indexable.\n * Only record timeouts when a response is actually received.\n * Remove calibration phase and record rate at fixed interval.\n * Improve correction of coordinated omission.\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.89,
          "content": "Overview\n\n  wrk should build on most UNIX-like operating systems and\n  architectures that have GNU make and are supported by LuaJIT and\n  OpenSSL. Some systems may require additional CFLAGS or LDFLAGS,\n  see the top of the Makefile for examples\n\n  In many cases simply running `make` (often `gmake` on *BSD) will\n  do the trick.\n\nDependencies\n\n  wrk requires LuaJIT and OpenSSL and is distributed with appropriate\n  versions that will be unpacked and built as necessary.\n\n  If you are building wrk packages for an OS distribution or otherwise\n  prefer to use system versions of dependencies you may specify their\n  location when invoking make with one or more of:\n\n    WITH_LUAJIT\n    WITH_OPENSSL\n\n  For example to use the system version of both libraries on Linux:\n\n    make WITH_LUAJIT=/usr WITH_OPENSSL=/usr\n\n  Or to use the Homebrew version of OpenSSL on Mac OS X:\n\n    make WITH_OPENSSL=/usr/local/opt/openssl\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.24,
          "content": "\n                          Modified Apache 2.0 License\n                         Version 2.0.1, February 2015\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      (e) If the Derivative Work includes substantial changes to features\n          or functionality of the Work, then you must remove the name of\n          the Work, and any derivation thereof, from all copies that you\n          distribute, whether in Source or Object form, except as required\n          in copyright, patent, trademark, and attribution notices.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.61,
          "content": "CFLAGS  += -std=c99 -Wall -O2 -D_REENTRANT\nLIBS    := -lm -lssl -lcrypto -lpthread\n\nTARGET  := $(shell uname -s | tr '[A-Z]' '[a-z]' 2>/dev/null || echo unknown)\n\nifeq ($(TARGET), sunos)\n\tCFLAGS += -D_PTHREADS -D_POSIX_C_SOURCE=200112L\n\tLIBS   += -lsocket\nelse ifeq ($(TARGET), darwin)\n\texport MACOSX_DEPLOYMENT_TARGET = $(shell sw_vers -productVersion)\nelse ifeq ($(TARGET), linux)\n\tCFLAGS  += -D_POSIX_C_SOURCE=200112L -D_BSD_SOURCE -D_DEFAULT_SOURCE\n\tLIBS    += -ldl\n\tLDFLAGS += -Wl,-E\nelse ifeq ($(TARGET), freebsd)\n\tCFLAGS  += -D_DECLARE_C99_LDBL_MATH\n\tLDFLAGS += -Wl,-E\nendif\n\nSRC  := wrk.c net.c ssl.c aprintf.c stats.c script.c units.c \\\n\t\tae.c zmalloc.c http_parser.c\nBIN  := wrk\nVER  ?= $(shell git describe --tags --always --dirty)\n\nODIR := obj\nOBJ  := $(patsubst %.c,$(ODIR)/%.o,$(SRC)) $(ODIR)/bytecode.o $(ODIR)/version.o\nLIBS := -lluajit-5.1 $(LIBS)\n\nDEPS    :=\nCFLAGS  += -I$(ODIR)/include\nLDFLAGS += -L$(ODIR)/lib\n\nifneq ($(WITH_LUAJIT),)\n\tCFLAGS  += -I$(WITH_LUAJIT)/include\n\tLDFLAGS += -L$(WITH_LUAJIT)/lib\nelse\n\tCFLAGS  += -I$(ODIR)/include/luajit-2.1\n\tDEPS    += $(ODIR)/lib/libluajit-5.1.a\nendif\n\nifneq ($(WITH_OPENSSL),)\n\tCFLAGS  += -I$(WITH_OPENSSL)/include\n\tLDFLAGS += -L$(WITH_OPENSSL)/lib\nelse\n\tDEPS += $(ODIR)/lib/libssl.a\nendif\n\nall: $(BIN)\n\nclean:\n\t$(RM) -rf $(BIN) obj/*\n\n$(BIN): $(OBJ)\n\t@echo LINK $(BIN)\n\t@$(CC) $(LDFLAGS) -o $@ $^ $(LIBS)\n\n$(OBJ): config.h Makefile $(DEPS) | $(ODIR)\n\n$(ODIR):\n\t@mkdir -p $@\n\n$(ODIR)/bytecode.c: src/wrk.lua $(DEPS)\n\t@echo LUAJIT $<\n\t@$(SHELL) -c 'PATH=\"obj/bin:$(PATH)\" luajit -b \"$(CURDIR)/$<\" \"$(CURDIR)/$@\"'\n\n$(ODIR)/version.o:\n\t@echo 'const char *VERSION=\"$(VER)\";' | $(CC) -xc -c -o $@ -\n\n$(ODIR)/%.o : %.c\n\t@echo CC $<\n\t@$(CC) $(CFLAGS) -c -o $@ $<\n\n# Dependencies\n\nLUAJIT  := $(notdir $(patsubst %.zip,%,$(wildcard deps/LuaJIT*.zip)))\nOPENSSL := $(notdir $(patsubst %.tar.gz,%,$(wildcard deps/openssl*.tar.gz)))\n\nOPENSSL_OPTS = no-shared no-psk no-srp no-dtls no-idea --prefix=$(abspath $(ODIR))\n\n$(ODIR)/$(LUAJIT): deps/$(LUAJIT).zip | $(ODIR)\n\techo $(LUAJIT)\n\t@unzip -nd $(ODIR) $<\n\n$(ODIR)/$(OPENSSL): deps/$(OPENSSL).tar.gz | $(ODIR)\n\t@tar -C $(ODIR) -xf $<\n\n$(ODIR)/lib/libluajit-5.1.a: $(ODIR)/$(LUAJIT)\n\t@echo Building LuaJIT...\n\t@$(MAKE) -C $< PREFIX=$(abspath $(ODIR)) BUILDMODE=static install\n\t@cd $(ODIR)/bin && ln -s luajit-2.1.0-beta3 luajit\n\n$(ODIR)/lib/libssl.a: $(ODIR)/$(OPENSSL)\n\t@echo Building OpenSSL...\n\t@$(SHELL) -c \"cd $< && ./config $(OPENSSL_OPTS)\"\n\t@$(MAKE) -C $< depend\n\t@$(MAKE) -C $<\n\t@$(MAKE) -C $< install_sw\n\t@touch $@\n\n# ------------\n\n.PHONY: all clean\n.PHONY: $(ODIR)/version.o\n\n.SUFFIXES:\n.SUFFIXES: .c .o .lua\n\nvpath %.c   src\nvpath %.h   src\nvpath %.lua scripts\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 5.29,
          "content": "=========================================================================\n==  NOTICE file corresponding to section 4(d) of the Apache License,   ==\n==  Version 2.0, in this case for the wrk distribution.                ==\n=========================================================================\n\nwrk\nCopyright 2012 Will Glozer, http://glozer.net\n\n=========================================================================\n==  Redis Event Library Notice                                         ==\n=========================================================================\n\nThis product includes software developed by Salvatore Sanfilippo and\nother contributors to the redis project.\n\nCopyright (c) 2006-2010, Salvatore Sanfilippo <antirez at gmail dot com>\nCopyright (c) 2009-2012, Salvatore Sanfilippo <antirez at gmail dot com>\nCopyright (C) 2009 Harish Mallipeddi - harish.mallipeddi@gmail.com\nCopyright (c) 2012, Joyent, Inc. All rights reserved.\n\nCopyright (c) 2006-2009, Salvatore Sanfilippo\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the *\n      distribution.\n\n    * Neither the name of Redis nor the names of its contributors may be\n      used to endorse or promote products derived from this software\n      without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\nIS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n=========================================================================\n==  HTTP Parser Notice                                                 ==\n=========================================================================\n\nThis product includes software developed by Igor Sysoev, Joyent, Inc.,\nand other Node contributors.\n\nhttp_parser.c is based on src/http/ngx_http_parse.c from NGINX copyright\nIgor Sysoev.\n\nAdditional changes are licensed under the same terms as NGINX and\ncopyright Joyent, Inc. and other Node contributors. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\nUSE OR OTHER DEALINGS IN THE SOFTWARE.\n\n=========================================================================\n==  LuaJIT Notice                                                      ==\n=========================================================================\n\nLuaJIT -- a Just-In-Time Compiler for Lua. http://luajit.org/\n\nCopyright (C) 2005-2013 Mike Pall. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.42,
          "content": "# wrk - a HTTP benchmarking tool\n\n  wrk is a modern HTTP benchmarking tool capable of generating significant\n  load when run on a single multi-core CPU. It combines a multithreaded\n  design with scalable event notification systems such as epoll and kqueue.\n\n  An optional LuaJIT script can perform HTTP request generation, response\n  processing, and custom reporting. Details are available in SCRIPTING and\n  several examples are located in [scripts/](scripts/).\n\n## Basic Usage\n\n    wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html\n\n  This runs a benchmark for 30 seconds, using 12 threads, and keeping\n  400 HTTP connections open.\n\n  Output:\n\n    Running 30s test @ http://127.0.0.1:8080/index.html\n      12 threads and 400 connections\n      Thread Stats   Avg      Stdev     Max   +/- Stdev\n        Latency   635.91us    0.89ms  12.92ms   93.69%\n        Req/Sec    56.20k     8.07k   62.00k    86.54%\n      22464657 requests in 30.00s, 17.76GB read\n    Requests/sec: 748868.53\n    Transfer/sec:    606.33MB\n\n## Command Line Options\n\n    -c, --connections: total number of HTTP connections to keep open with\n                       each thread handling N = connections/threads\n\n    -d, --duration:    duration of the test, e.g. 2s, 2m, 2h\n\n    -t, --threads:     total number of threads to use\n\n    -s, --script:      LuaJIT script, see SCRIPTING\n\n    -H, --header:      HTTP header to add to request, e.g. \"User-Agent: wrk\"\n\n        --latency:     print detailed latency statistics\n\n        --timeout:     record a timeout if a response is not received within\n                       this amount of time.\n\n## Benchmarking Tips\n\n  The machine running wrk must have a sufficient number of ephemeral ports\n  available and closed sockets should be recycled quickly. To handle the\n  initial connection burst the server's listen(2) backlog should be greater\n  than the number of concurrent connections being tested.\n\n  A user script that only changes the HTTP method, path, adds headers or\n  a body, will have no performance impact. Per-request actions, particularly\n  building a new HTTP request, and use of response() will necessarily reduce\n  the amount of load that can be generated.\n\n## Acknowledgements\n\n  wrk contains code from a number of open source projects including the\n  'ae' event loop from redis, the nginx/joyent/node.js 'http-parser',\n  and Mike Pall's LuaJIT. Please consult the NOTICE file for licensing\n  details.\n\n## Cryptography Notice\n\n  This distribution includes cryptographic software. The country in\n  which you currently reside may have restrictions on the import,\n  possession, use, and/or re-export to another country, of encryption\n  software. BEFORE using any encryption software, please check your\n  country's laws, regulations and policies concerning the import,\n  possession, or use, and re-export of encryption software, to see if\n  this is permitted. See <http://www.wassenaar.org/> for more\n  information.\n\n  The U.S. Government Department of Commerce, Bureau of Industry and\n  Security (BIS), has classified this software as Export Commodity\n  Control Number (ECCN) 5D002.C.1, which includes information security\n  software using or performing cryptographic functions with symmetric\n  algorithms. The form and manner of this distribution makes it\n  eligible for export under the License Exception ENC Technology\n  Software Unrestricted (TSU) exception (see the BIS Export\n  Administration Regulations, Section 740.13) for both object code and\n  source code.\n"
        },
        {
          "name": "SCRIPTING",
          "type": "blob",
          "size": 4.06,
          "content": "Overview\n\n  wrk supports executing a LuaJIT script during three distinct phases: setup,\n  running, and done. Each wrk thread has an independent scripting environment\n  and the setup & done phases execute in a separate environment which does\n  not participate in the running phase.\n\n  The public Lua API consists of a global table and a number of global\n  functions:\n\n  wrk = {\n    scheme  = \"http\",\n    host    = \"localhost\",\n    port    = nil,\n    method  = \"GET\",\n    path    = \"/\",\n    headers = {},\n    body    = nil,\n    thread  = <userdata>,\n  }\n\n  function wrk.format(method, path, headers, body)\n\n    wrk.format returns a HTTP request string containing the passed parameters\n    merged with values from the wrk table.\n\n  function wrk.lookup(host, service)\n\n    wrk.lookup returns a table containing all known addresses for the host\n    and service pair. This corresponds to the POSIX getaddrinfo() function.\n\n  function wrk.connect(addr)\n\n    wrk.connect returns true if the address can be connected to, otherwise\n    it returns false. The address must be one returned from wrk.lookup().\n\n  The following globals are optional, and if defined must be functions:\n\n    global setup    -- called during thread setup\n    global init     -- called when the thread is starting\n    global delay    -- called to get the request delay\n    global request  -- called to generate the HTTP request\n    global response -- called with HTTP response data\n    global done     -- called with results of run\n\nSetup\n\n  function setup(thread)\n\n  The setup phase begins after the target IP address has been resolved and all\n  threads have been initialized but not yet started.\n\n  setup() is called once for each thread and receives a userdata object\n  representing the thread.\n\n    thread.addr             - get or set the thread's server address\n    thread:get(name)        - get the value of a global in the thread's env\n    thread:set(name, value) - set the value of a global in the thread's env\n    thread:stop()           - stop the thread\n\n  Only boolean, nil, number, and string values or tables of the same may be\n  transfered via get()/set() and thread:stop() can only be called while the\n  thread is running.\n\nRunning\n\n  function init(args)\n  function delay()\n  function request()\n  function response(status, headers, body)\n\n  The running phase begins with a single call to init(), followed by\n  a call to request() and response() for each request cycle.\n\n  The init() function receives any extra command line arguments for the\n  script which must be separated from wrk arguments with \"--\".\n\n  delay() returns the number of milliseconds to delay sending the next\n  request.\n\n  request() returns a string containing the HTTP request. Building a new\n  request each time is expensive, when testing a high performance server\n  one solution is to pre-generate all requests in init() and do a quick\n  lookup in request().\n\n  response() is called with the HTTP response status, headers, and body.\n  Parsing the headers and body is expensive, so if the response global is\n  nil after the call to init() wrk will ignore the headers and body.\n\nDone\n\n  function done(summary, latency, requests)\n\n  The done() function receives a table containing result data, and two\n  statistics objects representing the per-request latency and per-thread\n  request rate. Duration and latency are microsecond values and rate is\n  measured in requests per second.\n\n  latency.min              -- minimum value seen\n  latency.max              -- maximum value seen\n  latency.mean             -- average value seen\n  latency.stdev            -- standard deviation\n  latency:percentile(99.0) -- 99th percentile value\n  latency(i)               -- raw value and count\n\n  summary = {\n    duration = N,  -- run duration in microseconds\n    requests = N,  -- total completed requests\n    bytes    = N,  -- total bytes received\n    errors   = {\n      connect = N, -- total socket connection errors\n      read    = N, -- total socket read errors\n      write   = N, -- total socket write errors\n      status  = N, -- total HTTP status codes > 399\n      timeout = N  -- total request timeouts\n    }\n  }\n"
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}