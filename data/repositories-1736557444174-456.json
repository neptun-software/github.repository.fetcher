{
  "metadata": {
    "timestamp": 1736557444174,
    "page": 456,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ggerganov/whisper.cpp",
      "stars": 36816,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".devops",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.76,
          "content": "*.o\n*.a\n*.d\n.cache/\n.coreml/\n.test/\n.venv/\n.vs/\n.vscode/\n.DS_Store\n.vimspector.json\n/CMakeSettings.json\n/talk-llama.dSYM/\n\nbuild/\nbuild-*/\n\n# SPM\n.build/\n.swiftpm\n*.metallib\n\nggml-metal-embed.metal\nggml-metal-embed.metal.tmp\n\n/main\n/stream\n/command\n/talk\n/talk-llama\n/bench\n/quantize\n/server\n/lsp\n\narm_neon.h\nsync.sh\nlibwhisper.a\nlibwhisper.so\ncompile_commands.json\n\nexamples/arm_neon.h\nexamples/whisper.objc/whisper.objc.xcodeproj/xcshareddata\nexamples/whisper.objc/whisper.objc.xcodeproj/xcuserdata/\nexamples/whisper.objc/whisper.objc.xcodeproj/project.xcworkspace/xcuserdata\n\nextra/bench-gg.txt\n\nmodels/*.mlmodel\nmodels/*.mlmodelc\nmodels/*.mlpackage\nbindings/java/.gradle/\nbindings/java/.idea/\n.idea/\n\nbenchmark_results.csv\ncmake-build-debug/\n.cxx/\n.gradle/\nlocal.properties\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": null
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 12.52,
          "content": "# date: Tue Apr  9 20:27:03 EEST 2024\n# this file is auto-generated by scripts/gen-authors.sh\n\n0/0 <zero@imaskeleton.me>\n0cc4m <picard12@live.de>\n0xsourcecode <134374803+0xsourcecode@users.noreply.github.com>\nAT <manyoso@users.noreply.github.com>\nAarni Koskela <akx@iki.fi>\nAaron Pham <29749331+aarnphm@users.noreply.github.com>\nAaron Taylor <aaron@exphat.com>\nAbhilash Majumder <30946547+abhilash1910@users.noreply.github.com>\nAbitofevrything <54505189+abitofevrything@users.noreply.github.com>\nAfryMask <AfryMask@163.com>\nAhmad Bilal <ahmad.bilal@empglabs.com>\nAidanBeltonS <87009434+AidanBeltonS@users.noreply.github.com>\nAkash Mahajan <akash7190@gmail.com>\nAkash Mahajan <akashmjn@stanford.edu>\nAl Hoang <3811822-hoanga@users.noreply.gitlab.com>\nAlan <unknown>\nAleksander Andrzejewski <18704749+aleksanderandrzejewski@users.noreply.github.com>\nAlex Azarov <alex@azarov.by>\nAlex Bacart <13940752+alex-bacart@users.noreply.github.com>\nAlex Evgrashin <aevgrashin@yandex.ru>\nAlexandr Graschenkov <alexandr.graschenkov91@gmail.com>\nAlexandru Mariuti <alex@mariuti.com>\nAlexey Kharlamov <alexey@kharlamov.biz>\nAlfredo Montesinos <alfredo.montesinos@g.austincc.edu>\nAli Alameh <ali.alameh@isae.edu.lb>\nAnanta Bastola <anantarajbastola@gmail.com>\nAndreu Huguet <andreuhuguet@gmail.com>\nAndrew Huynh <a5thuynh@gmail.com>\nAndrew S <andrews54757@gmail.com>\nAndy Maloney <asmaloney@gmail.com>\nAnton Kostin <masguit42@users.noreply.github.com>\nArtyom Mezin <psycho.fading@gmail.com>\nAsad Memon <asad.lionpk@gmail.com>\nAshraful Islam <ashraful.meche@gmail.com>\nAsukaMinato <asukaminato@nyan.eu.org>\nAustinMroz <austinmroz@utexas.edu>\nAvik Sengupta <avik@sengupta.net>\nBader-eddine Ouaich <49657842+baderouaich@users.noreply.github.com>\nBaffin Lee <baffinlee@gmail.com>\nBen Nortier <bjnortier@gmail.com>\nBenjamin Heiniger <benjamin.heiniger@bluewin.ch>\nBo-Yi Wu <appleboy.tw@gmail.com>\nBoris Bliznioukov <blib@mail.com>\nBorislav Stanimirov <b.stanimirov@abv.bg>\nBrad Murray <59848399+bradmurray-dt@users.noreply.github.com>\nBrian Murray <brian@bmurray.ca>\nCRD716 <crd716@gmail.com>\nCanis Lupus <Canis-UK@users.noreply.github.com>\nCarolinabanana <140120812+Carolinabanana@users.noreply.github.com>\nChangSeok Oh <shivamidow@users.noreply.github.com>\nChaoqun <27287694+OpenWaygate@users.noreply.github.com>\nChia-Hsiang Cheng <88014292+garychia@users.noreply.github.com>\nChidi Williams <williamschidi1@gmail.com>\nChristian <12550267+iceychris@users.noreply.github.com>\nClifford Heath <clifford.heath@gmail.com>\nColin <github@whoisc.cc>\nDGdev91 <DGdev91@users.noreply.github.com>\nDamian Czaja <trojan295@protonmail.com>\nDaniel Bevenius <daniel.bevenius@gmail.com>\nDavid <dnhkng@gmail.com>\nDavid Thorpe <djt@mutablelogic.com>\nDavidson Francis <davidsondfgl@gmail.com>\nDener Stassun <denerstassun@gmail.com>\nDidzis Gosko <didzis@users.noreply.github.com>\nDigipom <admin@digipom.com>\nDimo <dimo@ieee.org>\nDody Suria Wijaya <dodysw@gmail.com>\nDr. Tom Murphy VII Ph.D <499244+tom7@users.noreply.github.com>\nDuncan McConnell <ddmcconnell4@gmail.com>\nEgor Egorov <me@egorfine.com>\nElkana Bardugo <ttv200@gmail.com>\nEmmanuel Schmidbauer <eschmidbauer@gmail.com>\nEngininja2 <139037756+Engininja2@users.noreply.github.com>\nEric Swanson <eswanson@alloscomp.com>\nEric Tendian <erictendian@gmail.com>\nErik Scholz <Green-Sky@users.noreply.github.com>\nEvan Jones <evan.q.jones@gmail.com>\nEvan Martin <evan.martin@gmail.com>\nEve <139727413+netrunnereve@users.noreply.github.com>\nEvgeny Kuznetsov <evgeny@kuznetsov.md>\nF1L1P <78918286+F1L1Pv2@users.noreply.github.com>\nFangjun Kuang <csukuangfj@gmail.com>\nFelix <stenbackfelix@gmail.com>\nFinn Voorhees <finnvoorhees@gmail.com>\nFlippFuzz <41221030+FlippFuzz@users.noreply.github.com>\nGang Chen <goncha@gmail.com>\nGavin Cai <gavin1818@hotmail.com>\nGeorge Hindle <george@georgehindle.com>\nGeorgi Gerganov <ggerganov@gmail.com>\nGitAritron <103900385+GitAritron@users.noreply.github.com>\nGiviMAD <GiviMAD@users.noreply.github.com>\nGleicon Moraes <gleicon@gmail.com>\nGregor Jasny <gjasny@googlemail.com>\nGuillaume Wenzek <gwenzek@users.noreply.github.com>\nHY. Kelvin Lee <34256578+hykelvinlee42@users.noreply.github.com>\nHalalaluyafail3 <55773281+Halalaluyafail3@users.noreply.github.com>\nHang <bebound@gmail.com>\nHerman Semenov <GermanAizek@yandex.ru>\nHrishikesh Barman <geekodour@users.noreply.github.com>\nIan Bicking <ian@ianbicking.org>\nIan Bull <irbull@eclipsesource.com>\nIkko Ashimine <eltociear@gmail.com>\nInconsolableCellist <23345188+InconsolableCellist@users.noreply.github.com>\nIsmatulla Mansurov <47342870+sapoepsilon@users.noreply.github.com>\nIvan Gorin <ivangorin21@gmail.com>\nJJ <103335846+computerscienceiscool@users.noreply.github.com>\nJack Mousseau <jmousseau@users.noreply.github.com>\nJacobLinCool <jacoblincool@gmail.com>\nJakub Ráček <blizzcz@gmail.com>\nJared Van Bortel <jared@nomic.ai>\nJay Binks <jaybinks@gmail.com>\nJhen-Jie Hong <developer@jhen.me>\nJhen-Jie Hong <iainst0409@gmail.com>\nJidongZhang-THU <1119708529@qq.com>\nJo Liss <joliss42@gmail.com>\nJohan <jr.raffin@gmail.com>\nJohannes Gäßler <johannesg@5d6.de>\nJohn Balis <phobossystems@gmail.com>\nJonathan Soo <jcsoo@agora.com>\nJonno <1160532+razodactyl@users.noreply.github.com>\nJoonas Pihlajamaa <joonas.pihlajamaa@iki.fi>\nJose <34888496+Jerry-Master@users.noreply.github.com>\nJosh Bleecher Snyder <josharian@gmail.com>\nJudd <foldl@users.noreply.github.com>\nJumper775 <78500318+jumpers775@users.noreply.github.com>\nJustine Tunney <jtunney@gmail.com>\nKP Kaiser <kirk@zothcorp.com>\nKamilake <exjang0@gmail.com>\nKartik Saranathan <278928+Kartiku@users.noreply.github.com>\nKasumi <90275229+kasumi-1@users.noreply.github.com>\nKawrakow <48489457+ikawrakow@users.noreply.github.com>\nKevin Brothaler <admin@digipom.com>\nKonstantin Zhuravlyov <konstantin.zhuravlyov@amd.com>\nKreijstal <rainb@tfwno.gf>\nKylin <56434533+KyL0N@users.noreply.github.com>\nLBlue <153975653+lbluep@users.noreply.github.com>\nLarry Battle <larry.battle.tech@gmail.com>\nLaytan Laats <laytanlaats@hotmail.com>\nLeo Moll <leo.moll@yeasoft.com>\nLexevolution <31176843+Lexevolution@users.noreply.github.com>\nLittleLoli <26589867+WhichWho@users.noreply.github.com>\nLucas Zanek <57494138+LucasZNK@users.noreply.github.com>\nLuis Herrera <herrera-luis@users.noreply.github.com>\nLukas Rist <glaslos@gmail.com>\nM. A. Ali <73258591+MightyStud@users.noreply.github.com>\nM. Eren Akbiyik <erenakbiyik@gmail.com>\nMaciek <maciek.mab122@gmail.com>\nMarcin Mielniczuk <marmistrz.dev@zoho.eu>\nMartin Warnaar <martinwarnaar@gmail.com>\nMatheus de Sousa <23645013+keyehzy@users.noreply.github.com>\nMathijs de Bruin <mathijs@mathijsfietst.nl>\nMatija Pevec <mightymatth@users.noreply.github.com>\nMaximiliano Levi <8160966+maxilevi@users.noreply.github.com>\nMeng, Hengyu <hengyu.meng@intel.com>\nMichael Podvitskiy <podvitskiymichael@gmail.com>\nMichael Rienstra <mrienstra@gmail.com>\nMikhail Grigorev <sleuthhound@gmail.com>\nMohammadreza Hendiani <hendiani.mohammadreza@gmail.com>\nMohit Agarwal <mohit@sdf.org>\nMurilo Santana <mvrilo@gmail.com>\nNeil Chudleigh <nchudleigh@users.noreply.github.com>\nNeo Zhang Jianyu <jianyu.zhang@intel.com>\nNeuman Vong <neuman.vong@gmail.com>\nNicholas Albion <nalbion@yahoo.com>\nNiels Mayer <Niels.Mayer@gmail.com>\nOkabintaro <103938900+Okabintaro@users.noreply.github.com>\nOleg Sidorov <me@whitebox.io>\nOleg Sidorov <oleg@sidorov.nl>\nOndrej Kokes <ondrej.kokes@gmail.com>\nOuadie EL FAROUKI <ouadie.elfarouki@codeplay.com>\nPaul Tsochantaris <ptsochantaris@icloud.com>\nPhilipp Zabel <philipp.zabel@gmail.com>\nPhilippe Normand <phil@base-art.net>\nPrzemysław Pawełczyk <przemoc@gmail.com>\nQianhe Chen <54462604+chenqianhe@users.noreply.github.com>\nRadosław Gryta <radek.gryta@gmail.com>\nReinforce-II <fate@eastal.com>\nReinis Muiznieks <muiznieks.reinis@gmail.com>\nRelatedTitle <r3latedtitle@gmail.com>\nRhinoDevel <RhinoDevel@users.noreply.github.com>\nRich Jones <miserlou@gmail.com>\nRobin <robin.xw@hotmail.com>\nRoddur Dasgupta <roddurd@gmail.com>\nRoland Rabien <figbug@gmail.com>\nRotem Dan <rotemdan@gmail.com>\nRyan Hitchman <hitchmanr@gmail.com>\nRyan Metcalfe <107415876+RyanMetcalfeInt8@users.noreply.github.com>\nRyanChang <ftes90015@gmail.com>\nSam <49637763+Onlyartist9@users.noreply.github.com>\nSam Pullara <spullara@gmail.com>\nSanchit Gandhi <93869735+sanchit-gandhi@users.noreply.github.com>\nSergio López <slp@sinrega.org>\nSiddharth Ramakrishnan <srr2141@columbia.edu>\nSimon Moisselin <simon.moisstoll@gmail.com>\nSindre Sorhus <sindresorhus@gmail.com>\nSlava Primenko <primenko.s@gmail.com>\nSyahmi Azhar <prsyahmi@gmail.com>\nSyed Jafri <syedjafri97@gmail.com>\nSơn Phan Trung <phantrungson17@gmail.com>\nTaisei Mima <bhbstar.me@gmail.com>\nTakeshi Inoue <inoue.takeshi@gmail.com>\nTamotsu Takahashi <ttakah+github@gmail.com>\nTaras Glek <taras@thegp.com>\nTauseef Mohiuddin <35351464+tauseefmohammed2@users.noreply.github.com>\nThijs Raymakers <thijs@raymakers.nl>\nThomas Fitzsimmons <fitzsim@fitzsim.org>\nTiago Fassoni <tiagofassoni@users.noreply.github.com>\nTienshiao Ma <tienshiao@tienshiao.org>\nTimothy Cronin <40186632+4imothy@users.noreply.github.com>\nTobrun <tobrun.van.nuland@gmail.com>\nTodd <taf2@users.noreply.github.com>\nTong Li <31761981+litongjava@users.noreply.github.com>\nTopping1 <78745143+Topping1@users.noreply.github.com>\nTravis Cline <travis.cline@gmail.com>\nUEXTM.com <84163508+uextm@users.noreply.github.com>\nVadim Peretokin <vperetokin@hey.com>\nValentin Gosu <1454649+valenting@users.noreply.github.com>\nVulcan <93451215+trholding@users.noreply.github.com>\nWhiteOlivierus <36532695+WhiteOlivierus@users.noreply.github.com>\nXiang (Kevin) Li <kevinli020508@gmail.com>\nXiao-Yong Jin <jinxiaoyong@gmail.com>\nXiaotaoChen <chenxiaotao1234@gmail.com>\nYajing Tang <phillis@google.com>\nYang Shen <aplshenyang@gmail.com>\nYunès <jean.baptiste.yunes@free.fr>\nZaBlazzingZephyrus <119159668+blazingzephyr@users.noreply.github.com>\nZigfrid Zvezdin <ziggerZZ@gmail.com>\nZollner <24618122+Zolliner@users.noreply.github.com>\nai-at-home <149282006+ai-at-home@users.noreply.github.com>\nalonfaraj <alonfaraj@gmail.com>\nandypayne <apayne@gmail.com>\nardfork <134447697+ardfork@users.noreply.github.com>\nautomaticcat <daogiatuank54@gmail.com>\nbe-next <jerome.ramette@gmail.com>\nbert hubert <bert@hubertnet.nl>\nbmwl <brian.marshall@tolko.com>\nbobqianic <129547291+bobqianic@users.noreply.github.com>\nbocytko <bocytko+github@gmail.com>\nboolemancer <48014766+boolemancer@users.noreply.github.com>\nboolemancer <boolemancer@gmail.com>\nbradmit <151883577+bradmit@users.noreply.github.com>\nbrunofaustino <b.fa.amorim@gmail.com>\nbssrdf <merlintiger@hotmail.com>\nbyte-6174 <88070277+byte-6174@users.noreply.github.com>\ncdosoftei <ciprian.dosoftei@gmail.com>\nclach04 <Chris.Clark@actian.com>\ncompilade <113953597+compilade@users.noreply.github.com>\nconradg <conradjgodfrey@gmail.com>\nddpasa <112642920+ddpasa@users.noreply.github.com>\ndenersc <denerstassun@gmail.com>\ndscripka <dscripka@users.noreply.github.com>\nduthils <duthils@duthils.net>\necneladis <ecneladis@users.noreply.github.com>\nfaker <nspyia2002@gmail.com>\nfitzsim <fitzsim@fitzsim.org>\nfraxy-v <65565042+fraxy-v@users.noreply.github.com>\ngenevera (she/her) <genevera@users.noreply.github.com>\ngeniusnut <geniusnut@gmail.com>\ngreeshmay <greeshmay@gmail.com>\nhydai <z54981220@gmail.com>\niamthad <thadeus.j.fleming@gmail.com>\njames wolf <contractorwolf@hotmail.com>\njoecryptotoo <80373433+joecryptotoo@users.noreply.github.com>\njorismertz <35079666+jorismertz@users.noreply.github.com>\njunkfood <69683722+JunkFood02@users.noreply.github.com>\njwijffels <jwijffels@bnosac.be>\nkamranjon <kamranjon@gmail.com>\nkatsu560 <katsu560oo-@docomo.ne.jp>\nkennethge <57784063+kenneth-ge@users.noreply.github.com>\nkeyehzy <msamuel@aluno.puc-rio.br>\nleejet <leejet714@gmail.com>\nlitong <31761981+litongjava@users.noreply.github.com>\nlnyan <lkwq007@gmail.com>\nm.bell <m.bell@techsmith.com>\nmkiol <mkiol@users.noreply.github.com>\nnovag <7754358+novag@users.noreply.github.com>\npajowu <pajowu@pajowu.de>\npolarmoon <90010972+polarmoon@users.noreply.github.com>\nrlapray <lapray.romain@gmail.com>\nsandrohanea <40202887+sandrohanea@users.noreply.github.com>\nsemiformal-net <84111142+semiformal-net@users.noreply.github.com>\nshibukazu <61775791+shibukazu@users.noreply.github.com>\nshikokuchuo <53399081+shikokuchuo@users.noreply.github.com>\nslaren <slarengh@gmail.com>\nslashlib <slashlib@users.noreply.github.com>\nsnadampal <87143774+snadampal@users.noreply.github.com>\nst-gr <38470677+st-gr@users.noreply.github.com>\ntexmex76 <40733439+texmex76@users.noreply.github.com>\nthefinaldegree <thefinaldegree@gmail.com>\ntrixirt <trix@redhat.com>\nulatekh <ulatekh@yahoo.com>\nundef <undefdev@gmail.com>\nvenkr <venkateshrameshkumar+1@gmail.com>\nvicalloy <zbirder@gmail.com>\nxdrudis <xavierdrudis@yahoo.es>\nzhouwg <6889919+zhouwg@users.noreply.github.com>\n布客飞龙 <562826179@qq.com>\nАртём Земляк <azemlyak@smart-consulting.ru>\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 6.47,
          "content": "cmake_minimum_required(VERSION 3.5) # for add_link_options and implicit target directories.\nproject(\"whisper.cpp\" C CXX)\nproject(\"whisper.cpp\" VERSION 1.7.4)\ninclude(CheckIncludeFileCXX)\n\nset(SOVERSION 1)\n\n#set(CMAKE_WARN_DEPRECATED YES)\nset(CMAKE_WARN_UNUSED_CLI YES)\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nif (NOT XCODE AND NOT MSVC AND NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE Release CACHE STRING \"Build type\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\")\nendif()\n\n# Add path to modules\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/\")\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n\nif (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n    set(WHISPER_STANDALONE ON)\n\n    include(git-vars)\n\n    # configure project version\n    configure_file(${CMAKE_SOURCE_DIR}/bindings/javascript/package-tmpl.json ${CMAKE_SOURCE_DIR}/bindings/javascript/package.json @ONLY)\nelse()\n    set(WHISPER_STANDALONE OFF)\nendif()\n\nif (EMSCRIPTEN)\n    set(BUILD_SHARED_LIBS_DEFAULT OFF)\n\n    option(WHISPER_WASM_SINGLE_FILE \"whisper: embed WASM inside the generated whisper.js\" ON)\n\n    # TODO: without these, we get the following error:\n    #       wasm-ld: error: --shared-memory is disallowed by whisper.cpp.o because it was not compiled with 'atomics' or 'bulk-memory' features.\n    set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS}   -pthread -s TOTAL_STACK=5242880\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pthread -s TOTAL_STACK=5242880\")\nelse()\n    if (MINGW)\n        set(BUILD_SHARED_LIBS_DEFAULT OFF)\n    else()\n        set(BUILD_SHARED_LIBS_DEFAULT ON)\n    endif()\nendif()\n\noption(BUILD_SHARED_LIBS \"build shared libraries\" ${BUILD_SHARED_LIBS_DEFAULT})\n\n#\n# option list\n#\n\n# general\noption(WHISPER_CCACHE \"whisper: use ccache if available\" ON)\n\n# debug\noption(WHISPER_ALL_WARNINGS           \"whisper: enable all compiler warnings\"                   ON)\noption(WHISPER_ALL_WARNINGS_3RD_PARTY \"whisper: enable all compiler warnings in 3rd party libs\" OFF)\n\n# build\noption(WHISPER_FATAL_WARNINGS \"whisper: enable -Werror flag\" OFF)\n\n# sanitizers\noption(WHISPER_SANITIZE_THREAD    \"whisper: enable thread sanitizer\"    OFF)\noption(WHISPER_SANITIZE_ADDRESS   \"whisper: enable address sanitizer\"   OFF)\noption(WHISPER_SANITIZE_UNDEFINED \"whisper: enable undefined sanitizer\" OFF)\n\n# extra artifacts\noption(WHISPER_BUILD_TESTS    \"whisper: build tests\"          ${WHISPER_STANDALONE})\noption(WHISPER_BUILD_EXAMPLES \"whisper: build examples\"       ${WHISPER_STANDALONE})\noption(WHISPER_BUILD_SERVER   \"whisper: build server example\" ${WHISPER_STANDALONE})\n\n# 3rd party libs\noption(WHISPER_CURL \"whisper: use libcurl to download model from an URL\" OFF)\noption(WHISPER_SDL2 \"whisper: support for libSDL2\" OFF)\n\nif (CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n    option(WHISPER_FFMPEG \"whisper: support building and linking with ffmpeg libs (avcodec, swresample, ...)\" OFF)\nendif()\n\noption(WHISPER_COREML                \"whisper: enable Core ML framework\"  OFF)\noption(WHISPER_COREML_ALLOW_FALLBACK \"whisper: allow non-CoreML fallback\" OFF)\noption(WHISPER_OPENVINO              \"whisper: support for OpenVINO\"      OFF)\n\n# Required for relocatable CMake package\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/cmake/build-info.cmake)\n\n# override ggml options\nset(GGML_CCACHE             ${WHISPER_CCACHE})\nset(GGML_SANITIZE_THREAD    ${WHISPER_SANITIZE_THREAD})\nset(GGML_SANITIZE_ADDRESS   ${WHISPER_SANITIZE_ADDRESS})\nset(GGML_SANITIZE_UNDEFINED ${WHISPER_SANITIZE_UNDEFINED})\nset(GGML_ALL_WARNINGS       ${WHISPER_ALL_WARNINGS})\nset(GGML_FATAL_WARNINGS     ${WHISPER_FATAL_WARNINGS})\n\n# transition helpers\nfunction (whisper_option_depr TYPE OLD NEW)\n    if (${OLD})\n        message(${TYPE} \"${OLD} is deprecated and will be removed in the future.\\nUse ${NEW} instead\\n\")\n        set(${NEW} ON)\n    endif()\nendfunction()\n\nwhisper_option_depr(FATAL_ERROR WHISPER_CUBLAS              GGML_CUDA)\nwhisper_option_depr(WARNING     WHISPER_CUDA                GGML_CUDA)\nwhisper_option_depr(WARNING     WHISPER_KOMPUTE             GGML_KOMPUTE)\nwhisper_option_depr(WARNING     WHISPER_METAL               GGML_METAL)\nwhisper_option_depr(WARNING     WHISPER_METAL_EMBED_LIBRARY GGML_METAL_EMBED_LIBRARY)\nwhisper_option_depr(WARNING     WHISPER_NATIVE              GGML_NATIVE)\nwhisper_option_depr(WARNING     WHISPER_OPENMP              GGML_OPENMP)\nwhisper_option_depr(WARNING     WHISPER_RPC                 GGML_RPC)\nwhisper_option_depr(WARNING     WHISPER_SYCL                GGML_SYCL)\nwhisper_option_depr(WARNING     WHISPER_SYCL_F16            GGML_SYCL_F16)\n\n#\n# build the library\n#\n\nif (NOT TARGET ggml)\n    add_subdirectory(ggml)\n    # ... otherwise assume ggml is added by a parent CMakeLists.txt\nendif()\nadd_subdirectory(src)\n\n#\n# install\n#\n\ninclude(GNUInstallDirs)\ninclude(CMakePackageConfigHelpers)\n\nset(WHISPER_BUILD_NUMBER        ${BUILD_NUMBER})\nset(WHISPER_BUILD_COMMIT        ${BUILD_COMMIT})\nset(WHISPER_INSTALL_VERSION     ${CMAKE_PROJECT_VERSION})\n\nset(WHISPER_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_INCLUDEDIR} CACHE PATH \"Location of header  files\")\nset(WHISPER_LIB_INSTALL_DIR     ${CMAKE_INSTALL_LIBDIR}     CACHE PATH \"Location of library files\")\nset(WHISPER_BIN_INSTALL_DIR     ${CMAKE_INSTALL_BINDIR}     CACHE PATH \"Location of binary  files\")\n\nget_directory_property(WHISPER_TRANSIENT_DEFINES COMPILE_DEFINITIONS)\n\nset_target_properties(whisper PROPERTIES PUBLIC_HEADER ${CMAKE_CURRENT_SOURCE_DIR}/include/whisper.h)\ninstall(TARGETS whisper LIBRARY PUBLIC_HEADER)\n\nconfigure_package_config_file(\n        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/whisper-config.cmake.in\n        ${CMAKE_CURRENT_BINARY_DIR}/whisper-config.cmake\n    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/whisper\n    PATH_VARS\n    WHISPER_INCLUDE_INSTALL_DIR\n    WHISPER_LIB_INSTALL_DIR\n    WHISPER_BIN_INSTALL_DIR )\n\nwrite_basic_package_version_file(\n    ${CMAKE_CURRENT_BINARY_DIR}/whisper-version.cmake\n    VERSION ${WHISPER_INSTALL_VERSION}\n    COMPATIBILITY SameMajorVersion)\n\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/whisper-config.cmake\n              ${CMAKE_CURRENT_BINARY_DIR}/whisper-version.cmake\n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/whisper)\n\nconfigure_file(cmake/whisper.pc.in\n        \"${CMAKE_CURRENT_BINARY_DIR}/whisper.pc\"\n        @ONLY)\n\ninstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/whisper.pc\"\n        DESTINATION lib/pkgconfig)\n\n#\n# programs, examples and tests\n#\n\nif (WHISPER_BUILD_TESTS AND NOT CMAKE_JS_VERSION)\n    #include(CTest)\n    #add_subdirectory(tests)\nendif ()\n\nif (WHISPER_BUILD_EXAMPLES)\n    add_subdirectory(examples)\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05,
          "content": "MIT License\n\nCopyright (c) 2023-2024 The ggml authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.8,
          "content": "#\n# Audio samples\n#\n\n.PHONY: build\nbuild:\n\tcmake -B build\n\tcmake --build build --config Release\n\n# download a few audio samples into folder \"./samples\":\n.PHONY: samples\nsamples:\n\t@echo \"Downloading samples...\"\n\t@mkdir -p samples\n\t@wget --quiet --show-progress -O samples/gb0.ogg https://upload.wikimedia.org/wikipedia/commons/2/22/George_W._Bush%27s_weekly_radio_address_%28November_1%2C_2008%29.oga\n\t@wget --quiet --show-progress -O samples/gb1.ogg https://upload.wikimedia.org/wikipedia/commons/1/1f/George_W_Bush_Columbia_FINAL.ogg\n\t@wget --quiet --show-progress -O samples/hp0.ogg https://upload.wikimedia.org/wikipedia/en/d/d4/En.henryfphillips.ogg\n\t@wget --quiet --show-progress -O samples/mm1.wav https://cdn.openai.com/whisper/draft-20220913a/micro-machines.wav\n\t@wget --quiet --show-progress -O samples/a13.mp3 https://upload.wikimedia.org/wikipedia/commons/transcoded/6/6f/Apollo13-wehaveaproblem.ogg/Apollo13-wehaveaproblem.ogg.mp3\n\t@wget --quiet --show-progress -O samples/diffusion2023-07-03.flac https://archive.org/download/diffusion2023-07-03/diffusion2023-07-03.flac\n\t@echo \"Converting to 16-bit WAV ...\"\n\t@ffmpeg -loglevel -0 -y -i samples/gb0.ogg -ar 16000 -ac 1 -c:a pcm_s16le samples/gb0.wav\n\t@ffmpeg -loglevel -0 -y -i samples/gb1.ogg -ar 16000 -ac 1 -c:a pcm_s16le samples/gb1.wav\n\t@ffmpeg -loglevel -0 -y -i samples/hp0.ogg -ar 16000 -ac 1 -c:a pcm_s16le samples/hp0.wav\n\t@rm samples/*.ogg\n\t@ffmpeg -loglevel -0 -y -i samples/mm1.wav -ar 16000 -ac 1 -c:a pcm_s16le samples/mm0.wav\n\t@rm samples/mm1.wav\n\t@ffmpeg -loglevel -0 -y -i samples/a13.mp3 -ar 16000 -ac 1 -c:a pcm_s16le -ss 00:00:00 -to 00:00:30 samples/a13.wav\n\t@rm samples/a13.mp3\n\t@ffmpeg -loglevel -0 -y -i samples/diffusion2023-07-03.flac -ar 16000 -ac 1 -c:a pcm_s16le samples/diffusion2023-07-03.wav\n\t@rm samples/diffusion2023-07-03.flac\n\n#\n# Models\n#\n\n# if not already downloaded, the following targets download the specified model and\n# runs it on all samples in the folder \"./samples\":\n\n.PHONY: tiny.en\n.PHONY: tiny\n.PHONY: base.en\n.PHONY: base\n.PHONY: small.en\n.PHONY: small\n.PHONY: medium.en\n.PHONY: medium\n.PHONY: large-v1\n.PHONY: large-v2\n.PHONY: large-v3\n.PHONY: large-v3-turbo\n\ntiny.en tiny base.en base small.en small medium.en medium large-v1 large-v2 large-v3 large-v3-turbo:\n\tbash ./models/download-ggml-model.sh $@\n\tcmake -B build\n\tcmake --build build --config Release\n\t@echo \"\"\n\t@echo \"===============================================\"\n\t@echo \"Running $@ on all samples in ./samples ...\"\n\t@echo \"===============================================\"\n\t@echo \"\"\n\t@for f in samples/*.wav; do \\\n\t\techo \"----------------------------------------------\" ; \\\n\t\techo \"[+] Running $@ on $$f ... (run 'ffplay $$f' to listen)\" ; \\\n\t    echo \"----------------------------------------------\" ; \\\n\t\techo \"\" ; \\\n\t\t./build/bin/whisper-cli -m models/ggml-$@.bin -f $$f ; \\\n\t\techo \"\" ; \\\n\tdone\n"
        },
        {
          "name": "Package.swift",
          "type": "blob",
          "size": 0.37,
          "content": "// swift-tools-version:5.5\n\nimport PackageDescription\n\nlet package = Package(\n    name: \"whisper\",\n    platforms: [\n        .macOS(.v12),\n        .iOS(.v14),\n        .watchOS(.v4),\n        .tvOS(.v14)\n    ],\n    products: [\n        .library(name: \"whisper\", targets: [\"whisper\"]),\n    ],\n    targets: [\n        .systemLibrary(name: \"whisper\", pkgConfig: \"whisper\"),\n    ]\n)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 27.77,
          "content": "# whisper.cpp\n\n![whisper.cpp](https://user-images.githubusercontent.com/1991296/235238348-05d0f6a4-da44-4900-a1de-d0707e75b763.jpeg)\n\n[![Actions Status](https://github.com/ggerganov/whisper.cpp/workflows/CI/badge.svg)](https://github.com/ggerganov/whisper.cpp/actions)\n[![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Conan Center](https://shields.io/conan/v/whisper-cpp)](https://conan.io/center/whisper-cpp)\n[![npm](https://img.shields.io/npm/v/whisper.cpp.svg)](https://www.npmjs.com/package/whisper.cpp/)\n\nStable: [v1.7.4](https://github.com/ggerganov/whisper.cpp/releases/tag/v1.7.4) / [Roadmap | F.A.Q.](https://github.com/ggerganov/whisper.cpp/discussions/126)\n\nHigh-performance inference of [OpenAI's Whisper](https://github.com/openai/whisper) automatic speech recognition (ASR) model:\n\n- Plain C/C++ implementation without dependencies\n- Apple Silicon first-class citizen - optimized via ARM NEON, Accelerate framework, Metal and [Core ML](#core-ml-support)\n- AVX intrinsics support for x86 architectures\n- VSX intrinsics support for POWER architectures\n- Mixed F16 / F32 precision\n- [Integer quantization support](#quantization)\n- Zero memory allocations at runtime\n- [Vulkan support](#vulkan-gpu-support)\n- Support for CPU-only inference\n- [Efficient GPU support for NVIDIA](#nvidia-gpu-support)\n- [OpenVINO Support](#openvino-support)\n- [Ascend NPU Support](#ascend-npu-support)\n- [C-style API](https://github.com/ggerganov/whisper.cpp/blob/master/include/whisper.h)\n\nSupported platforms:\n\n- [x] Mac OS (Intel and Arm)\n- [x] [iOS](examples/whisper.objc)\n- [x] [Android](examples/whisper.android)\n- [x] [Java](bindings/java/README.md)\n- [x] Linux / [FreeBSD](https://github.com/ggerganov/whisper.cpp/issues/56#issuecomment-1350920264)\n- [x] [WebAssembly](examples/whisper.wasm)\n- [x] Windows ([MSVC](https://github.com/ggerganov/whisper.cpp/blob/master/.github/workflows/build.yml#L117-L144) and [MinGW](https://github.com/ggerganov/whisper.cpp/issues/168)]\n- [x] [Raspberry Pi](https://github.com/ggerganov/whisper.cpp/discussions/166)\n- [x] [Docker](https://github.com/ggerganov/whisper.cpp/pkgs/container/whisper.cpp)\n\nThe entire high-level implementation of the model is contained in [whisper.h](include/whisper.h) and [whisper.cpp](src/whisper.cpp).\nThe rest of the code is part of the [`ggml`](https://github.com/ggerganov/ggml) machine learning library.\n\nHaving such a lightweight implementation of the model allows to easily integrate it in different platforms and applications.\nAs an example, here is a video of running the model on an iPhone 13 device - fully offline, on-device: [whisper.objc](examples/whisper.objc)\n\nhttps://user-images.githubusercontent.com/1991296/197385372-962a6dea-bca1-4d50-bf96-1d8c27b98c81.mp4\n\nYou can also easily make your own offline voice assistant application: [command](examples/command)\n\nhttps://user-images.githubusercontent.com/1991296/204038393-2f846eae-c255-4099-a76d-5735c25c49da.mp4\n\nOn Apple Silicon, the inference runs fully on the GPU via Metal:\n\nhttps://github.com/ggerganov/whisper.cpp/assets/1991296/c82e8f86-60dc-49f2-b048-d2fdbd6b5225\n\n## Quick start\n\nFirst clone the repository:\n\n```bash\ngit clone https://github.com/ggerganov/whisper.cpp.git\n```\n\nNavigate into the directory:\n\n```\ncd whisper.cpp\n```\n\nThen, download one of the Whisper [models](models/README.md) converted in [`ggml` format](#ggml-format). For example:\n\n```bash\nsh ./models/download-ggml-model.sh base.en\n```\n\nNow build the [whisper-cli](examples/cli) example and transcribe an audio file like this:\n\n```bash\n# build the project\ncmake -B build\ncmake --build build --config Release\n\n# transcribe an audio file\n./build/bin/whisper-cli -f samples/jfk.wav\n```\n\n---\n\nFor a quick demo, simply run `make base.en`.\n\nThe command downloads the `base.en` model converted to custom `ggml` format and runs the inference on all `.wav` samples in the folder `samples`.\n\nFor detailed usage instructions, run: `./build/bin/whisper-cli -h`\n\nNote that the [whisper-cli](examples/cli) example currently runs only with 16-bit WAV files, so make sure to convert your input before running the tool.\nFor example, you can use `ffmpeg` like this:\n\n```bash\nffmpeg -i input.mp3 -ar 16000 -ac 1 -c:a pcm_s16le output.wav\n```\n\n## More audio samples\n\nIf you want some extra audio samples to play with, simply run:\n\n```\nmake -j samples\n```\n\nThis will download a few more audio files from Wikipedia and convert them to 16-bit WAV format via `ffmpeg`.\n\nYou can download and run the other models as follows:\n\n```\nmake -j tiny.en\nmake -j tiny\nmake -j base.en\nmake -j base\nmake -j small.en\nmake -j small\nmake -j medium.en\nmake -j medium\nmake -j large-v1\nmake -j large-v2\nmake -j large-v3\nmake -j large-v3-turbo\n```\n\n## Memory usage\n\n| Model  | Disk    | Mem     |\n| ------ | ------- | ------- |\n| tiny   | 75 MiB  | ~273 MB |\n| base   | 142 MiB | ~388 MB |\n| small  | 466 MiB | ~852 MB |\n| medium | 1.5 GiB | ~2.1 GB |\n| large  | 2.9 GiB | ~3.9 GB |\n\n## Quantization\n\n`whisper.cpp` supports integer quantization of the Whisper `ggml` models.\nQuantized models require less memory and disk space and depending on the hardware can be processed more efficiently.\n\nHere are the steps for creating and using a quantized model:\n\n```bash\n# quantize a model with Q5_0 method\ncmake -B build\ncmake --build build --config Release\n./build/bin/quantize models/ggml-base.en.bin models/ggml-base.en-q5_0.bin q5_0\n\n# run the examples as usual, specifying the quantized model file\n./build/bin/whisper-cli -m models/ggml-base.en-q5_0.bin ./samples/gb0.wav\n```\n\n## Core ML support\n\nOn Apple Silicon devices, the Encoder inference can be executed on the Apple Neural Engine (ANE) via Core ML. This can result in significant\nspeed-up - more than x3 faster compared with CPU-only execution. Here are the instructions for generating a Core ML model and using it with `whisper.cpp`:\n\n- Install Python dependencies needed for the creation of the Core ML model:\n\n  ```bash\n  pip install ane_transformers\n  pip install openai-whisper\n  pip install coremltools\n  ```\n\n  - To ensure `coremltools` operates correctly, please confirm that [Xcode](https://developer.apple.com/xcode/) is installed and execute `xcode-select --install` to install the command-line tools.\n  - Python 3.10 is recommended.\n  - MacOS Sonoma (version 14) or newer is recommended, as older versions of MacOS might experience issues with transcription hallucination.\n  - [OPTIONAL] It is recommended to utilize a Python version management system, such as [Miniconda](https://docs.conda.io/en/latest/miniconda.html) for this step:\n    - To create an environment, use: `conda create -n py310-whisper python=3.10 -y`\n    - To activate the environment, use: `conda activate py310-whisper`\n\n- Generate a Core ML model. For example, to generate a `base.en` model, use:\n\n  ```bash\n  ./models/generate-coreml-model.sh base.en\n  ```\n\n  This will generate the folder `models/ggml-base.en-encoder.mlmodelc`\n\n- Build `whisper.cpp` with Core ML support:\n\n  ```bash\n  # using CMake\n  cmake -B build -DWHISPER_COREML=1\n  cmake --build build -j --config Release\n  ```\n\n- Run the examples as usual. For example:\n\n  ```text\n  $ ./build/bin/whisper-cli -m models/ggml-base.en.bin -f samples/jfk.wav\n\n  ...\n\n  whisper_init_state: loading Core ML model from 'models/ggml-base.en-encoder.mlmodelc'\n  whisper_init_state: first run on a device may take a while ...\n  whisper_init_state: Core ML model loaded\n\n  system_info: n_threads = 4 / 10 | AVX = 0 | AVX2 = 0 | AVX512 = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 1 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 0 | VSX = 0 | COREML = 1 |\n\n  ...\n  ```\n\n  The first run on a device is slow, since the ANE service compiles the Core ML model to some device-specific format.\n  Next runs are faster.\n\nFor more information about the Core ML implementation please refer to PR [#566](https://github.com/ggerganov/whisper.cpp/pull/566).\n\n## OpenVINO support\n\nOn platforms that support [OpenVINO](https://github.com/openvinotoolkit/openvino), the Encoder inference can be executed\non OpenVINO-supported devices including x86 CPUs and Intel GPUs (integrated & discrete).\n\nThis can result in significant speedup in encoder performance. Here are the instructions for generating the OpenVINO model and using it with `whisper.cpp`:\n\n- First, setup python virtual env. and install python dependencies. Python 3.10 is recommended.\n\n  Windows:\n\n  ```powershell\n  cd models\n  python -m venv openvino_conv_env\n  openvino_conv_env\\Scripts\\activate\n  python -m pip install --upgrade pip\n  pip install -r requirements-openvino.txt\n  ```\n\n  Linux and macOS:\n\n  ```bash\n  cd models\n  python3 -m venv openvino_conv_env\n  source openvino_conv_env/bin/activate\n  python -m pip install --upgrade pip\n  pip install -r requirements-openvino.txt\n  ```\n\n- Generate an OpenVINO encoder model. For example, to generate a `base.en` model, use:\n\n  ```\n  python convert-whisper-to-openvino.py --model base.en\n  ```\n\n  This will produce ggml-base.en-encoder-openvino.xml/.bin IR model files. It's recommended to relocate these to the same folder as `ggml` models, as that\n  is the default location that the OpenVINO extension will search at runtime.\n\n- Build `whisper.cpp` with OpenVINO support:\n\n  Download OpenVINO package from [release page](https://github.com/openvinotoolkit/openvino/releases). The recommended version to use is [2023.0.0](https://github.com/openvinotoolkit/openvino/releases/tag/2023.0.0).\n\n  After downloading & extracting package onto your development system, set up required environment by sourcing setupvars script. For example:\n\n  Linux:\n\n  ```bash\n  source /path/to/l_openvino_toolkit_ubuntu22_2023.0.0.10926.b4452d56304_x86_64/setupvars.sh\n  ```\n\n  Windows (cmd):\n\n  ```powershell\n  C:\\Path\\To\\w_openvino_toolkit_windows_2023.0.0.10926.b4452d56304_x86_64\\setupvars.bat\n  ```\n\n  And then build the project using cmake:\n\n  ```bash\n  cmake -B build -DWHISPER_OPENVINO=1\n  cmake --build build -j --config Release\n  ```\n\n- Run the examples as usual. For example:\n\n  ```text\n  $ ./build/bin/whisper-cli -m models/ggml-base.en.bin -f samples/jfk.wav\n\n  ...\n\n  whisper_ctx_init_openvino_encoder: loading OpenVINO model from 'models/ggml-base.en-encoder-openvino.xml'\n  whisper_ctx_init_openvino_encoder: first run on a device may take a while ...\n  whisper_openvino_init: path_model = models/ggml-base.en-encoder-openvino.xml, device = GPU, cache_dir = models/ggml-base.en-encoder-openvino-cache\n  whisper_ctx_init_openvino_encoder: OpenVINO model loaded\n\n  system_info: n_threads = 4 / 8 | AVX = 1 | AVX2 = 1 | AVX512 = 0 | FMA = 1 | NEON = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | VSX = 0 | COREML = 0 | OPENVINO = 1 |\n\n  ...\n  ```\n\n  The first time run on an OpenVINO device is slow, since the OpenVINO framework will compile the IR (Intermediate Representation) model to a device-specific 'blob'. This device-specific blob will get\n  cached for the next run.\n\nFor more information about the OpenVINO implementation please refer to PR [#1037](https://github.com/ggerganov/whisper.cpp/pull/1037).\n\n## NVIDIA GPU support\n\nWith NVIDIA cards the processing of the models is done efficiently on the GPU via cuBLAS and custom CUDA kernels.\nFirst, make sure you have installed `cuda`: https://developer.nvidia.com/cuda-downloads\n\nNow build `whisper.cpp` with CUDA support:\n\n```\ncmake -B build -DGGML_CUDA=1\ncmake --build build -j --config Release\n```\n\n## Vulkan GPU support\nCross-vendor solution which allows you to accelerate workload on your GPU.\nFirst, make sure your graphics card driver provides support for Vulkan API.\n\nNow build `whisper.cpp` with Vulkan support:\n```\ncmake -B build -DGGML_VULKAN=1\ncmake --build build -j --config Release\n```\n\n## BLAS CPU support via OpenBLAS\n\nEncoder processing can be accelerated on the CPU via OpenBLAS.\nFirst, make sure you have installed `openblas`: https://www.openblas.net/\n\nNow build `whisper.cpp` with OpenBLAS support:\n\n```\ncmake -B build -DGGML_BLAS=1\ncmake --build build -j --config Release\n```\n\n## Ascend NPU support\n\nAscend NPU provides inference acceleration via [`CANN`](https://www.hiascend.com/en/software/cann) and AI cores.\n\nFirst, check if your Ascend NPU device is supported:\n\n**Verified devices**\n| Ascend NPU                    | Status  |\n|:-----------------------------:|:-------:|\n| Atlas 300T A2                 | Support |\n\nThen, make sure you have installed [`CANN toolkit`](https://www.hiascend.com/en/software/cann/community) . The lasted version of CANN is recommanded.\n\nNow build `whisper.cpp` with CANN support:\n\n```\ncmake -B build -DGGML_CANN=1\ncmake --build build -j --config Release\n```\n\nRun the inference examples as usual, for example:\n\n```\n./build/bin/whisper-cli -f samples/jfk.wav -m models/ggml-base.en.bin -t 8\n```\n\n*Notes:*\n\n- If you have trouble with Ascend NPU device, please create a issue with **[CANN]** prefix/tag.\n- If you run successfully with your Ascend NPU device, please help update the table `Verified devices`.\n\n## Docker\n\n### Prerequisites\n\n- Docker must be installed and running on your system.\n- Create a folder to store big models & intermediate files (ex. /whisper/models)\n\n### Images\n\nWe have two Docker images available for this project:\n\n1. `ghcr.io/ggerganov/whisper.cpp:main`: This image includes the main executable file as well as `curl` and `ffmpeg`. (platforms: `linux/amd64`, `linux/arm64`)\n2. `ghcr.io/ggerganov/whisper.cpp:main-cuda`: Same as `main` but compiled with CUDA support. (platforms: `linux/amd64`)\n\n### Usage\n\n```shell\n# download model and persist it in a local folder\ndocker run -it --rm \\\n  -v path/to/models:/models \\\n  whisper.cpp:main \"./models/download-ggml-model.sh base /models\"\n# transcribe an audio file\ndocker run -it --rm \\\n  -v path/to/models:/models \\\n  -v path/to/audios:/audios \\\n  whisper.cpp:main \"./main -m /models/ggml-base.bin -f /audios/jfk.wav\"\n# transcribe an audio file in samples folder\ndocker run -it --rm \\\n  -v path/to/models:/models \\\n  whisper.cpp:main \"./main -m /models/ggml-base.bin -f ./samples/jfk.wav\"\n```\n\n## Installing with Conan\n\nYou can install pre-built binaries for whisper.cpp or build it from source using [Conan](https://conan.io/). Use the following command:\n\n```\nconan install --requires=\"whisper-cpp/[*]\" --build=missing\n```\n\nFor detailed instructions on how to use Conan, please refer to the [Conan documentation](https://docs.conan.io/2/).\n\n## Limitations\n\n- Inference only\n\n## Real-time audio input example\n\nThis is a naive example of performing real-time inference on audio from your microphone.\nThe [stream](examples/stream) tool samples the audio every half a second and runs the transcription continuously.\nMore info is available in [issue #10](https://github.com/ggerganov/whisper.cpp/issues/10).\n\n```bash\ncmake -B build -DWHISPER_SDL2=ON\ncmake --build build --config Release\n./build/bin/whisper-stream -m ./models/ggml-base.en.bin -t 8 --step 500 --length 5000\n```\n\nhttps://user-images.githubusercontent.com/1991296/194935793-76afede7-cfa8-48d8-a80f-28ba83be7d09.mp4\n\n## Confidence color-coding\n\nAdding the `--print-colors` argument will print the transcribed text using an experimental color coding strategy\nto highlight words with high or low confidence:\n\n```bash\n./build/bin/whisper-cli -m models/ggml-base.en.bin -f samples/gb0.wav --print-colors\n```\n\n<img width=\"965\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1991296/197356445-311c8643-9397-4e5e-b46e-0b4b4daa2530.png\">\n\n## Controlling the length of the generated text segments (experimental)\n\nFor example, to limit the line length to a maximum of 16 characters, simply add `-ml 16`:\n\n```text\n$ ./build/bin/whisper-cli -m ./models/ggml-base.en.bin -f ./samples/jfk.wav -ml 16\n\nwhisper_model_load: loading model from './models/ggml-base.en.bin'\n...\nsystem_info: n_threads = 4 / 10 | AVX2 = 0 | AVX512 = 0 | NEON = 1 | FP16_VA = 1 | WASM_SIMD = 0 | BLAS = 1 |\n\nmain: processing './samples/jfk.wav' (176000 samples, 11.0 sec), 4 threads, 1 processors, lang = en, task = transcribe, timestamps = 1 ...\n\n[00:00:00.000 --> 00:00:00.850]   And so my\n[00:00:00.850 --> 00:00:01.590]   fellow\n[00:00:01.590 --> 00:00:04.140]   Americans, ask\n[00:00:04.140 --> 00:00:05.660]   not what your\n[00:00:05.660 --> 00:00:06.840]   country can do\n[00:00:06.840 --> 00:00:08.430]   for you, ask\n[00:00:08.430 --> 00:00:09.440]   what you can do\n[00:00:09.440 --> 00:00:10.020]   for your\n[00:00:10.020 --> 00:00:11.000]   country.\n```\n\n## Word-level timestamp (experimental)\n\nThe `--max-len` argument can be used to obtain word-level timestamps. Simply use `-ml 1`:\n\n```text\n$ ./build/bin/whisper-cli -m ./models/ggml-base.en.bin -f ./samples/jfk.wav -ml 1\n\nwhisper_model_load: loading model from './models/ggml-base.en.bin'\n...\nsystem_info: n_threads = 4 / 10 | AVX2 = 0 | AVX512 = 0 | NEON = 1 | FP16_VA = 1 | WASM_SIMD = 0 | BLAS = 1 |\n\nmain: processing './samples/jfk.wav' (176000 samples, 11.0 sec), 4 threads, 1 processors, lang = en, task = transcribe, timestamps = 1 ...\n\n[00:00:00.000 --> 00:00:00.320]\n[00:00:00.320 --> 00:00:00.370]   And\n[00:00:00.370 --> 00:00:00.690]   so\n[00:00:00.690 --> 00:00:00.850]   my\n[00:00:00.850 --> 00:00:01.590]   fellow\n[00:00:01.590 --> 00:00:02.850]   Americans\n[00:00:02.850 --> 00:00:03.300]  ,\n[00:00:03.300 --> 00:00:04.140]   ask\n[00:00:04.140 --> 00:00:04.990]   not\n[00:00:04.990 --> 00:00:05.410]   what\n[00:00:05.410 --> 00:00:05.660]   your\n[00:00:05.660 --> 00:00:06.260]   country\n[00:00:06.260 --> 00:00:06.600]   can\n[00:00:06.600 --> 00:00:06.840]   do\n[00:00:06.840 --> 00:00:07.010]   for\n[00:00:07.010 --> 00:00:08.170]   you\n[00:00:08.170 --> 00:00:08.190]  ,\n[00:00:08.190 --> 00:00:08.430]   ask\n[00:00:08.430 --> 00:00:08.910]   what\n[00:00:08.910 --> 00:00:09.040]   you\n[00:00:09.040 --> 00:00:09.320]   can\n[00:00:09.320 --> 00:00:09.440]   do\n[00:00:09.440 --> 00:00:09.760]   for\n[00:00:09.760 --> 00:00:10.020]   your\n[00:00:10.020 --> 00:00:10.510]   country\n[00:00:10.510 --> 00:00:11.000]  .\n```\n\n## Speaker segmentation via tinydiarize (experimental)\n\nMore information about this approach is available here: https://github.com/ggerganov/whisper.cpp/pull/1058\n\nSample usage:\n\n```py\n# download a tinydiarize compatible model\n./models/download-ggml-model.sh small.en-tdrz\n\n# run as usual, adding the \"-tdrz\" command-line argument\n./build/bin/whisper-cli -f ./samples/a13.wav -m ./models/ggml-small.en-tdrz.bin -tdrz\n...\nmain: processing './samples/a13.wav' (480000 samples, 30.0 sec), 4 threads, 1 processors, lang = en, task = transcribe, tdrz = 1, timestamps = 1 ...\n...\n[00:00:00.000 --> 00:00:03.800]   Okay Houston, we've had a problem here. [SPEAKER_TURN]\n[00:00:03.800 --> 00:00:06.200]   This is Houston. Say again please. [SPEAKER_TURN]\n[00:00:06.200 --> 00:00:08.260]   Uh Houston we've had a problem.\n[00:00:08.260 --> 00:00:11.320]   We've had a main beam up on a volt. [SPEAKER_TURN]\n[00:00:11.320 --> 00:00:13.820]   Roger main beam interval. [SPEAKER_TURN]\n[00:00:13.820 --> 00:00:15.100]   Uh uh [SPEAKER_TURN]\n[00:00:15.100 --> 00:00:18.020]   So okay stand, by thirteen we're looking at it. [SPEAKER_TURN]\n[00:00:18.020 --> 00:00:25.740]   Okay uh right now uh Houston the uh voltage is uh is looking good um.\n[00:00:27.620 --> 00:00:29.940]   And we had a a pretty large bank or so.\n```\n\n## Karaoke-style movie generation (experimental)\n\nThe [whisper-cli](examples/cli) example provides support for output of karaoke-style movies, where the\ncurrently pronounced word is highlighted. Use the `-wts` argument and run the generated bash script.\nThis requires to have `ffmpeg` installed.\n\nHere are a few _\"typical\"_ examples:\n\n```bash\n./build/bin/whisper-cli -m ./models/ggml-base.en.bin -f ./samples/jfk.wav -owts\nsource ./samples/jfk.wav.wts\nffplay ./samples/jfk.wav.mp4\n```\n\nhttps://user-images.githubusercontent.com/1991296/199337465-dbee4b5e-9aeb-48a3-b1c6-323ac4db5b2c.mp4\n\n---\n\n```bash\n./build/bin/whisper-cli -m ./models/ggml-base.en.bin -f ./samples/mm0.wav -owts\nsource ./samples/mm0.wav.wts\nffplay ./samples/mm0.wav.mp4\n```\n\nhttps://user-images.githubusercontent.com/1991296/199337504-cc8fd233-0cb7-4920-95f9-4227de3570aa.mp4\n\n---\n\n```bash\n./build/bin/whisper-cli -m ./models/ggml-base.en.bin -f ./samples/gb0.wav -owts\nsource ./samples/gb0.wav.wts\nffplay ./samples/gb0.wav.mp4\n```\n\nhttps://user-images.githubusercontent.com/1991296/199337538-b7b0c7a3-2753-4a88-a0cd-f28a317987ba.mp4\n\n---\n\n## Video comparison of different models\n\nUse the [scripts/bench-wts.sh](https://github.com/ggerganov/whisper.cpp/blob/master/scripts/bench-wts.sh) script to generate a video in the following format:\n\n```bash\n./scripts/bench-wts.sh samples/jfk.wav\nffplay ./samples/jfk.wav.all.mp4\n```\n\nhttps://user-images.githubusercontent.com/1991296/223206245-2d36d903-cf8e-4f09-8c3b-eb9f9c39d6fc.mp4\n\n---\n\n## Benchmarks\n\nIn order to have an objective comparison of the performance of the inference across different system configurations,\nuse the [whisper-bench](examples/bench) tool. The tool simply runs the Encoder part of the model and prints how much time it\ntook to execute it. The results are summarized in the following Github issue:\n\n[Benchmark results](https://github.com/ggerganov/whisper.cpp/issues/89)\n\nAdditionally a script to run whisper.cpp with different models and audio files is provided [bench.py](scripts/bench.py).\n\nYou can run it with the following command, by default it will run against any standard model in the models folder.\n\n```bash\npython3 scripts/bench.py -f samples/jfk.wav -t 2,4,8 -p 1,2\n```\n\nIt is written in python with the intention of being easy to modify and extend for your benchmarking use case.\n\nIt outputs a csv file with the results of the benchmarking.\n\n## `ggml` format\n\nThe original models are converted to a custom binary format. This allows to pack everything needed into a single file:\n\n- model parameters\n- mel filters\n- vocabulary\n- weights\n\nYou can download the converted models using the [models/download-ggml-model.sh](models/download-ggml-model.sh) script\nor manually from here:\n\n- https://huggingface.co/ggerganov/whisper.cpp\n- https://ggml.ggerganov.com\n\nFor more details, see the conversion script [models/convert-pt-to-ggml.py](models/convert-pt-to-ggml.py) or [models/README.md](models/README.md).\n\n## [Bindings](https://github.com/ggerganov/whisper.cpp/discussions/categories/bindings)\n\n- [x] Rust: [tazz4843/whisper-rs](https://github.com/tazz4843/whisper-rs) | [#310](https://github.com/ggerganov/whisper.cpp/discussions/310)\n- [x] JavaScript: [bindings/javascript](bindings/javascript) | [#309](https://github.com/ggerganov/whisper.cpp/discussions/309)\n  - React Native (iOS / Android): [whisper.rn](https://github.com/mybigday/whisper.rn)\n- [x] Go: [bindings/go](bindings/go) | [#312](https://github.com/ggerganov/whisper.cpp/discussions/312)\n- [x] Java:\n  - [GiviMAD/whisper-jni](https://github.com/GiviMAD/whisper-jni)\n- [x] Ruby: [bindings/ruby](bindings/ruby) | [#507](https://github.com/ggerganov/whisper.cpp/discussions/507)\n- [x] Objective-C / Swift: [ggerganov/whisper.spm](https://github.com/ggerganov/whisper.spm) | [#313](https://github.com/ggerganov/whisper.cpp/discussions/313)\n  - [exPHAT/SwiftWhisper](https://github.com/exPHAT/SwiftWhisper)\n- [x] .NET: | [#422](https://github.com/ggerganov/whisper.cpp/discussions/422)\n  - [sandrohanea/whisper.net](https://github.com/sandrohanea/whisper.net)\n  - [NickDarvey/whisper](https://github.com/NickDarvey/whisper)\n- [x] Python: | [#9](https://github.com/ggerganov/whisper.cpp/issues/9)\n  - [stlukey/whispercpp.py](https://github.com/stlukey/whispercpp.py) (Cython)\n  - [AIWintermuteAI/whispercpp](https://github.com/AIWintermuteAI/whispercpp) (Updated fork of aarnphm/whispercpp)\n  - [aarnphm/whispercpp](https://github.com/aarnphm/whispercpp) (Pybind11)\n  - [abdeladim-s/pywhispercpp](https://github.com/abdeladim-s/pywhispercpp) (Pybind11)\n- [x] R: [bnosac/audio.whisper](https://github.com/bnosac/audio.whisper)\n- [x] Unity: [macoron/whisper.unity](https://github.com/Macoron/whisper.unity)\n\n## Examples\n\nThere are various examples of using the library for different projects in the [examples](examples) folder.\nSome of the examples are even ported to run in the browser using WebAssembly. Check them out!\n\n| Example                                             | Web                                   | Description                                                                                                                     |\n| --------------------------------------------------- | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------- |\n| [whisper-cli](examples/cli)                         | [whisper.wasm](examples/whisper.wasm) | Tool for translating and transcribing audio using Whisper                                                                       |\n| [whisper-bench](examples/bench)                     | [bench.wasm](examples/bench.wasm)     | Benchmark the performance of Whisper on your machine                                                                            |\n| [whisper-stream](examples/stream)                   | [stream.wasm](examples/stream.wasm)   | Real-time transcription of raw microphone capture                                                                               |\n| [whisper-command](examples/command)                 | [command.wasm](examples/command.wasm) | Basic voice assistant example for receiving voice commands from the mic                                                         |\n| [whisper-server](examples/server)                   |                                       | HTTP transcription server with OAI-like API                                                                                     |\n| [whisper-talk-llama](examples/talk-llama)           |                                       | Talk with a LLaMA bot                                                                                                           |\n| [whisper.objc](examples/whisper.objc)               |                                       | iOS mobile application using whisper.cpp                                                                                        |\n| [whisper.swiftui](examples/whisper.swiftui)         |                                       | SwiftUI iOS / macOS application using whisper.cpp                                                                               |\n| [whisper.android](examples/whisper.android)         |                                       | Android mobile application using whisper.cpp                                                                                    |\n| [whisper.nvim](examples/whisper.nvim)               |                                       | Speech-to-text plugin for Neovim                                                                                                |\n| [generate-karaoke.sh](examples/generate-karaoke.sh) |                                       | Helper script to easily [generate a karaoke video](https://youtu.be/uj7hVta4blM) of raw audio capture                           |\n| [livestream.sh](examples/livestream.sh)             |                                       | [Livestream audio transcription](https://github.com/ggerganov/whisper.cpp/issues/185)                                           |\n| [yt-wsp.sh](examples/yt-wsp.sh)                     |                                       | Download + transcribe and/or translate any VOD [(original)](https://gist.github.com/DaniruKun/96f763ec1a037cc92fe1a059b643b818) |\n| [wchess](examples/wchess)                           | [wchess.wasm](examples/wchess)        | Voice-controlled chess                                                                                                          |\n\n## [Discussions](https://github.com/ggerganov/whisper.cpp/discussions)\n\nIf you have any kind of feedback about this project feel free to use the Discussions section and open a new topic.\nYou can use the [Show and tell](https://github.com/ggerganov/whisper.cpp/discussions/categories/show-and-tell) category\nto share your own projects that use `whisper.cpp`. If you have a question, make sure to check the\n[Frequently asked questions (#126)](https://github.com/ggerganov/whisper.cpp/discussions/126) discussion.\n"
        },
        {
          "name": "README_sycl.md",
          "type": "blob",
          "size": 6.67,
          "content": "# whisper.cpp for SYCL\r\n\r\n[Background](#background)\r\n\r\n[OS](#os)\r\n\r\n[Intel GPU](#intel-gpu)\r\n\r\n[Linux](#linux)\r\n\r\n[Environment Variable](#environment-variable)\r\n\r\n[Known Issue](#known-issue)\r\n\r\n[Todo](#todo)\r\n\r\n## Background\r\n\r\nSYCL is a higher-level programming model to improve programming productivity on various hardware accelerators—such as CPUs, GPUs, and FPGAs. It is a single-source embedded domain-specific language based on pure C++17.\r\n\r\noneAPI is a specification that is open and standards-based, supporting multiple architecture types including but not limited to GPU, CPU, and FPGA. The spec has both direct programming and API-based programming paradigms.\r\n\r\nIntel uses the SYCL as direct programming language to support CPU, GPUs and FPGAs.\r\n\r\nTo avoid  re-inventing the wheel, this code refers other code paths in llama.cpp (like OpenBLAS, cuBLAS, CLBlast). We use a open-source tool [SYCLomatic](https://github.com/oneapi-src/SYCLomatic) (Commercial release [Intel® DPC++ Compatibility Tool](https://www.intel.com/content/www/us/en/developer/tools/oneapi/dpc-compatibility-tool.html)) migrate to SYCL.\r\n\r\nThe whisper.cpp for SYCL is used to support Intel GPUs.\r\n\r\nFor Intel CPU, recommend to use whisper.cpp for X86 (Intel MKL build).\r\n\r\n## OS\r\n\r\n|OS|Status|Verified|\r\n|-|-|-|\r\n|Linux|Support|Ubuntu 22.04|\r\n|Windows|Ongoing| |\r\n\r\n\r\n## Intel GPU\r\n\r\n|Intel GPU| Status | Verified Model|\r\n|-|-|-|\r\n|Intel Data Center Max Series| Support| Max 1550|\r\n|Intel Data Center Flex Series| Support| Flex 170|\r\n|Intel Arc Series| Support| Arc 770|\r\n|Intel built-in Arc GPU| Support| built-in Arc GPU in Meteor Lake|\r\n|Intel iGPU| Support| iGPU in i5-1250P, i7-1165G7|\r\n\r\n\r\n## Linux\r\n\r\n### Setup Environment\r\n\r\n1. Install Intel GPU driver.\r\n\r\na. Please install Intel GPU driver by official guide: [Install GPU Drivers](https://dgpu-docs.intel.com/driver/installation.html).\r\n\r\nNote: for iGPU, please install the client GPU driver.\r\n\r\nb. Add user to group: video, render.\r\n\r\n```\r\nsudo usermod -aG render username\r\nsudo usermod -aG video username\r\n```\r\n\r\nNote: re-login to enable it.\r\n\r\nc. Check\r\n\r\n```\r\nsudo apt install clinfo\r\nsudo clinfo -l\r\n```\r\n\r\nOutput (example):\r\n\r\n```\r\nPlatform #0: Intel(R) OpenCL Graphics\r\n `-- Device #0: Intel(R) Arc(TM) A770 Graphics\r\n\r\n\r\nPlatform #0: Intel(R) OpenCL HD Graphics\r\n `-- Device #0: Intel(R) Iris(R) Xe Graphics [0x9a49]\r\n```\r\n\r\n2. Install Intel® oneAPI Base toolkit.\r\n\r\n\r\na. Please follow the procedure in [Get the Intel® oneAPI Base Toolkit ](https://www.intel.com/content/www/us/en/developer/tools/oneapi/base-toolkit.html).\r\n\r\nRecommend to install to default folder: **/opt/intel/oneapi**.\r\n\r\nFollowing guide use the default folder as example. If you use other folder, please modify the following guide info with your folder.\r\n\r\nb. Check\r\n\r\n```\r\nsource /opt/intel/oneapi/setvars.sh\r\n\r\nsycl-ls\r\n```\r\n\r\nThere should be one or more level-zero devices. Like **[ext_oneapi_level_zero:gpu:0]**.\r\n\r\nOutput (example):\r\n```\r\n[opencl:acc:0] Intel(R) FPGA Emulation Platform for OpenCL(TM), Intel(R) FPGA Emulation Device OpenCL 1.2  [2023.16.10.0.17_160000]\r\n[opencl:cpu:1] Intel(R) OpenCL, 13th Gen Intel(R) Core(TM) i7-13700K OpenCL 3.0 (Build 0) [2023.16.10.0.17_160000]\r\n[opencl:gpu:2] Intel(R) OpenCL Graphics, Intel(R) Arc(TM) A770 Graphics OpenCL 3.0 NEO  [23.30.26918.50]\r\n[ext_oneapi_level_zero:gpu:0] Intel(R) Level-Zero, Intel(R) Arc(TM) A770 Graphics 1.3 [1.3.26918]\r\n\r\n```\r\n\r\n2. Build locally:\r\n\r\n```\r\nmkdir -p build\r\ncd build\r\nsource /opt/intel/oneapi/setvars.sh\r\n\r\n#for FP16\r\n#cmake .. -DWHISPER_SYCL=ON -DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icpx -DWHISPER_SYCL_F16=ON \r\n\r\n#for FP32\r\ncmake .. -DWHISPER_SYCL=ON -DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icpx\r\n\r\n#build example/main only\r\n#cmake --build . --config Release --target main\r\n\r\n#build all binary\r\ncmake --build . --config Release -v\r\n\r\n```\r\n\r\nor\r\n\r\n```\r\n./examples/sycl/build.sh\r\n```\r\n\r\nNote:\r\n\r\n- By default, it will build for all binary files. It will take more time. To reduce the time, we recommend to build for **example/main** only.\r\n\r\n### Run\r\n\r\n1. Put model file to folder **models**\r\n\r\n2. Enable oneAPI running environment\r\n\r\n```\r\nsource /opt/intel/oneapi/setvars.sh\r\n```\r\n\r\n3. List device ID\r\n\r\nRun without parameter:\r\n\r\n```\r\n./build/bin/ls-sycl-device\r\n\r\nor\r\n\r\n./build/bin/main\r\n```\r\n\r\nCheck the ID in startup log, like:\r\n\r\n```\r\nfound 4 SYCL devices:\r\n  Device 0: Intel(R) Arc(TM) A770 Graphics,\tcompute capability 1.3,\r\n    max compute_units 512,\tmax work group size 1024,\tmax sub group size 32,\tglobal mem size 16225243136\r\n  Device 1: Intel(R) FPGA Emulation Device,\tcompute capability 1.2,\r\n    max compute_units 24,\tmax work group size 67108864,\tmax sub group size 64,\tglobal mem size 67065057280\r\n  Device 2: 13th Gen Intel(R) Core(TM) i7-13700K,\tcompute capability 3.0,\r\n    max compute_units 24,\tmax work group size 8192,\tmax sub group size 64,\tglobal mem size 67065057280\r\n  Device 3: Intel(R) Arc(TM) A770 Graphics,\tcompute capability 3.0,\r\n    max compute_units 512,\tmax work group size 1024,\tmax sub group size 32,\tglobal mem size 16225243136\r\n\r\n```\r\n\r\n|Attribute|Note|\r\n|-|-|\r\n|compute capability 1.3|Level-zero running time, recommended |\r\n|compute capability 3.0|OpenCL running time, slower than level-zero in most cases|\r\n\r\n4. Set device ID and execute whisper.cpp\r\n\r\nSet device ID = 0 by **GGML_SYCL_DEVICE=0**\r\n\r\n```\r\nGGML_SYCL_DEVICE=0 ./build/bin/main -m models/ggml-base.en.bin -f samples/jfk.wav\r\n```\r\nor run by script:\r\n\r\n```\r\n./examples/sycl/run_whisper.sh\r\n```\r\n\r\n\r\n\r\n5. Check the device ID in output\r\n\r\nLike:\r\n```\r\nUsing device **0** (Intel(R) Arc(TM) A770 Graphics) as main device\r\n```\r\n\r\n\r\n## Environment Variable\r\n\r\n#### Build\r\n\r\n|Name|Value|Function|\r\n|-|-|-|\r\n|WHISPER_SYCL|ON (mandatory)|Enable build with SYCL code path. <br>For FP32/FP16, WHISPER_SYCL=ON is mandatory.|\r\n|WHISPER_SYCL_F16|ON (optional)|Enable FP16 build with SYCL code path.For FP32, do not set it.|\r\n|CMAKE_C_COMPILER|icx|Use icx compiler for SYCL code path|\r\n|CMAKE_CXX_COMPILER|icpx|use icpx for SYCL code path|\r\n\r\n#### Running\r\n\r\n\r\n|Name|Value|Function|\r\n|-|-|-|\r\n|GGML_SYCL_DEVICE|0 (default) or 1|Set the device id used. Check the device ids by default running output|\r\n|GGML_SYCL_DEBUG|0 (default) or 1|Enable log function by macro: GGML_SYCL_DEBUG|\r\n\r\n## Known Issue\r\n\r\n- Error:  `error while loading shared libraries: libsycl.so.7: cannot open shared object file: No such file or directory`.\r\n\r\n  Miss to enable oneAPI running environment.\r\n\r\n  Install oneAPI base toolkit and enable it by: `source /opt/intel/oneapi/setvars.sh`.\r\n\r\n\r\n- Hang during startup\r\n\r\n  llama.cpp use mmap as default way to read model file and copy to GPU. In some system, memcpy will be abnormal and block.\r\n\r\n  Solution: add **--no-mmap**.\r\n\r\n## Todo\r\n\r\n- Support to build in Windows.\r\n\r\n- Support multiple cards."
        },
        {
          "name": "Sources",
          "type": "tree",
          "content": null
        },
        {
          "name": "bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "ggml",
          "type": "tree",
          "content": null
        },
        {
          "name": "grammars",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "spm-headers",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}