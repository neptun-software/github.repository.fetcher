{
  "metadata": {
    "timestamp": 1736557639916,
    "page": 728,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "standard/standard",
      "stars": 29201,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.14,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.02,
          "content": "node_modules/\ntmp/\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.17,
          "content": ".editorconfig\n.github/\n.npmignore\n.travis.yml\nbadge.png\nbadge.svg\nCONTRIBUTING.md\ndocs/\ndocs/logos/\nSECURITY.md\nsticker.png\nsticker.svg\ntest/\ntmp/\ntools/\n*.code-workspace\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.02,
          "content": "package-lock=false\n"
        },
        {
          "name": ".pre-commit-hooks.yaml",
          "type": "blob",
          "size": 0.12,
          "content": "- id: standard\n  name: standard\n  entry: standard --fix\n  language: node\n  files: \"\\\\.(\\\n    js|jsx\\\n    |mjs|cjs\\\n    )$\"\n"
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 12.29,
          "content": "# Authors\n\n#### Ordered by first contribution.\n\n- Feross Aboukhadijeh ([feross@feross.org](mailto:feross@feross.org))\n- Jonny Buchanan ([jonathan.buchanan@gmail.com](mailto:jonathan.buchanan@gmail.com))\n- Dan Flettre ([flettre@gmail.com](mailto:flettre@gmail.com))\n- Brandon Horst ([brandonhorst@gmail.com](mailto:brandonhorst@gmail.com))\n- Yoshua Wuyts ([yoshuawuyts@gmail.com](mailto:yoshuawuyts@gmail.com))\n- Alexander Gugel ([alexander.gugel@gmail.com](mailto:alexander.gugel@gmail.com))\n- Nate Goldman ([nnmgoldman@gmail.com](mailto:nnmgoldman@gmail.com))\n- Max Ogden ([max@maxogden.com](mailto:max@maxogden.com))\n- Ricardo Barros ([ricardofbarros@hotmail.com](mailto:ricardofbarros@hotmail.com))\n- Yoshua Wuyts ([i@yoshuawuyts.com](mailto:i@yoshuawuyts.com))\n- Shahar Or ([mightyiampresence@gmail.com](mailto:mightyiampresence@gmail.com))\n- Brent Burgoyne ([bburgoyne@instructure.com](mailto:bburgoyne@instructure.com))\n- Santiago Gil ([gil.educaciontdf@gmail.com](mailto:gil.educaciontdf@gmail.com))\n- Vasiliy Loginevskiy ([yeti-or@yandex-team.ru](mailto:yeti-or@yandex-team.ru))\n- Joe Lencioni ([joe.lencioni@brigade.com](mailto:joe.lencioni@brigade.com))\n- Leo Melin ([leo.melin@eee.do](mailto:leo.melin@eee.do))\n- G. Kay Lee ([balancetraveller+github@gmail.com](mailto:balancetraveller+github@gmail.com))\n- Lorenzo Villani ([lorenzo@villani.me](mailto:lorenzo@villani.me))\n- Ahmad Nassri ([ahmad@ahmadnassri.com](mailto:ahmad@ahmadnassri.com))\n- Mathias Buus ([mathiasbuus@gmail.com](mailto:mathiasbuus@gmail.com))\n- Alex Potsides ([alex@achingbrain.net](mailto:alex@achingbrain.net))\n- Dan Lee ([dlee@yammer-inc.com](mailto:dlee@yammer-inc.com))\n- ishamf ([ishamf@users.noreply.github.com](mailto:ishamf@users.noreply.github.com))\n- Eric Zeng ([leizeng@thoughtworks.com](mailto:leizeng@thoughtworks.com))\n- Cesar Andreu ([cesarandreu@gmail.com](mailto:cesarandreu@gmail.com))\n- Daniel Cousens ([dcousens@users.noreply.github.com](mailto:dcousens@users.noreply.github.com))\n- Enikő Nagy ([eenagy@users.noreply.github.com](mailto:eenagy@users.noreply.github.com))\n- Matthieu Prat ([matthieuprat@gmail.com](mailto:matthieuprat@gmail.com))\n- Dany Shaanan ([danyshaanan@gmail.com](mailto:danyshaanan@gmail.com))\n- Thomas Reggi ([socialtr@gmail.com](mailto:socialtr@gmail.com))\n- Stephen Kubovic ([skubovic@gmail.com](mailto:skubovic@gmail.com))\n- David Keijser ([keijser@gmail.com](mailto:keijser@gmail.com))\n- Nick Colley ([nickcolley7@gmail.com](mailto:nickcolley7@gmail.com))\n- Florian Ebeling ([mail@florianebeling.com](mailto:mail@florianebeling.com))\n- Rico Sta. Cruz ([rstacruz@users.noreply.github.com](mailto:rstacruz@users.noreply.github.com))\n- reggi ([thomas@reggi.com](mailto:thomas@reggi.com))\n- Machisté N. Quintana ([mnquintana@users.noreply.github.com](mailto:mnquintana@users.noreply.github.com))\n- Jiri Spac ([capajj@gmail.com](mailto:capajj@gmail.com))\n- Sonny Piers ([sonny@fastmail.net](mailto:sonny@fastmail.net))\n- fscherwi ([fscherwi@users.noreply.github.com](mailto:fscherwi@users.noreply.github.com))\n- Gustav Nikolaj Olsen ([gno@one.com](mailto:gno@one.com))\n- skorlir ([skorlir@gmail.com](mailto:skorlir@gmail.com))\n- JP Richardson ([jprichardson@gmail.com](mailto:jprichardson@gmail.com))\n- chenxsan ([chenxsan@users.noreply.github.com](mailto:chenxsan@users.noreply.github.com))\n- Tara Z. Manicsic ([tara@modulus.io](mailto:tara@modulus.io))\n- Jakub Elżbieciak ([jelz@post.pl](mailto:jelz@post.pl))\n- Dale Jefferson ([dale@dalejefferson.com](mailto:dale@dalejefferson.com))\n- Paul Kernfeld ([paulkernfeld@gmail.com](mailto:paulkernfeld@gmail.com))\n- rajcoss ([nagrajan@ciena.com](mailto:nagrajan@ciena.com))\n- Joe Whitfield-Seed ([joeseed86@gmail.com](mailto:joeseed86@gmail.com))\n- botbotbot ([tkroputa@gmail.com](mailto:tkroputa@gmail.com))\n- Žiga Vidic ([zigomir@gmail.com](mailto:zigomir@gmail.com))\n- Wade Simmons ([wsimmons@gmail.com](mailto:wsimmons@gmail.com))\n- Tushar Mathur ([tusharmath@gmail.com](mailto:tusharmath@gmail.com))\n- Joshua Jabbour ([code@joshuajabbour.com](mailto:code@joshuajabbour.com))\n- Zeke Sikelianos ([zeke@sikelianos.com](mailto:zeke@sikelianos.com))\n- darren higgins ([darrhiggs@users.noreply.github.com](mailto:darrhiggs@users.noreply.github.com))\n- Joris Blaak ([joris@label305.com](mailto:joris@label305.com))\n- CodinCat ([a55951234@gmail.com](mailto:a55951234@gmail.com))\n- Ruben Schmidmeister ([ruben.schmidmeister@icloud.com](mailto:ruben.schmidmeister@icloud.com))\n- Aleksey Bobyr ([alexsey.bobyr@lifestreet.com](mailto:alexsey.bobyr@lifestreet.com))\n- David Moseley ([davidmoseley@gmail.com](mailto:davidmoseley@gmail.com))\n- Timon van Spronsen ([timonvanspronsen@outlook.com](mailto:timonvanspronsen@outlook.com))\n- Richard Littauer ([richard.littauer@gmail.com](mailto:richard.littauer@gmail.com))\n- Morton Fox ([github@qslw.com](mailto:github@qslw.com))\n- Jason Kurian ([JaKXz@users.noreply.github.com](mailto:JaKXz@users.noreply.github.com))\n- Pau Ramon Revilla ([masylum@gmail.com](mailto:masylum@gmail.com))\n- Tim Oxley ([secoif@gmail.com](mailto:secoif@gmail.com))\n- Linus Unnebäck ([linus@folkdatorn.se](mailto:linus@folkdatorn.se))\n- sam ([chenxsan@gmail.com](mailto:chenxsan@gmail.com))\n- Robin Whittleton ([robin.whittleton@digital.cabinet-office.gov.uk](mailto:robin.whittleton@digital.cabinet-office.gov.uk))\n- Alex Moreno ([alexmorenodealmeida@gmail.com](mailto:alexmorenodealmeida@gmail.com))\n- Ekaterina Prigara ([ekaterina@prigara.com](mailto:ekaterina@prigara.com))\n- Erik Müller ([e.mueller@epages.com](mailto:e.mueller@epages.com))\n- Lukas Oppermann ([oppermann.lukas@googlemail.com](mailto:oppermann.lukas@googlemail.com))\n- Joshua P. Colvin ([colvinj@ewashtenaw.org](mailto:colvinj@ewashtenaw.org))\n- David Lavieri ([daviddlavier@gmail.com](mailto:daviddlavier@gmail.com))\n- Yanxi ([blogbbs@gmail.com](mailto:blogbbs@gmail.com))\n- Michael Cavalea ([callmecavs@gmail.com](mailto:callmecavs@gmail.com))\n- Joshua Colvin ([joshua@joshuacolvin.net](mailto:joshua@joshuacolvin.net))\n- despia ([despia@users.noreply.github.com](mailto:despia@users.noreply.github.com))\n- Peter Jenkins ([peterjenkins@users.noreply.github.com](mailto:peterjenkins@users.noreply.github.com))\n- nyuszika7h ([nyuszika7h@openmailbox.org](mailto:nyuszika7h@openmailbox.org))\n- Asoul Yang ([azx754@gmail.com](mailto:azx754@gmail.com))\n- Peter Dave Hello ([hsu@peterdavehello.org](mailto:hsu@peterdavehello.org))\n- Wayou Liu ([liuwayong@gmail.com](mailto:liuwayong@gmail.com))\n- Thomas Watson ([w@tson.dk](mailto:w@tson.dk))\n- Pablo Varela ([pablopunk@users.noreply.github.com](mailto:pablopunk@users.noreply.github.com))\n- xiaoyu2er ([zongyanqi@foxmail.com](mailto:zongyanqi@foxmail.com))\n- devjin0617 ([devjin0617@gmail.com](mailto:devjin0617@gmail.com))\n- ehmicky ([ehmicky@users.noreply.github.com](mailto:ehmicky@users.noreply.github.com))\n- Stanislav Termosa ([termosa.stanislav@gmail.com](mailto:termosa.stanislav@gmail.com))\n- yanxiaodi ([929213769@qq.com](mailto:929213769@qq.com))\n- developerjin ([devjin0617@gmail.com](mailto:devjin0617@gmail.com))\n- Mark Peace ([mark.peace@neotechnology.com](mailto:mark.peace@neotechnology.com))\n- Alexandre Nicastro ([kryndex@gmail.com](mailto:kryndex@gmail.com))\n- Ivan Ying ([yyjazsf@live.cn](mailto:yyjazsf@live.cn))\n- 薛定谔的猫 ([hh_2013@foxmail.com](mailto:hh_2013@foxmail.com))\n- Robin ([almigod0718@gmail.com](mailto:almigod0718@gmail.com))\n- CafeLungo ([CafeLungo@users.noreply.github.com](mailto:CafeLungo@users.noreply.github.com))\n- Antério Vieira ([anteriovieira@gmail.com](mailto:anteriovieira@gmail.com))\n- Bret Comnes ([bcomnes@gmail.com](mailto:bcomnes@gmail.com))\n- Jared Reich ([jaredreich@gmail.com](mailto:jaredreich@gmail.com))\n- Igor Santos ([igorsantos07@gmail.com](mailto:igorsantos07@gmail.com))\n- daper ([david@daper.email](mailto:david@daper.email))\n- Sola ([airsolakey@icloud.com](mailto:airsolakey@icloud.com))\n- Lion Yang ([lion@aosc.xyz](mailto:lion@aosc.xyz))\n- Joseph Frazier ([1212jtraceur@gmail.com](mailto:1212jtraceur@gmail.com))\n- Emanuele ([my.burning@gmail.com](mailto:my.burning@gmail.com))\n- Jakob Krigovsky ([jakob@krigovsky.com](mailto:jakob@krigovsky.com))\n- Joe Boyle ([joe.boyle@jibo.com](mailto:joe.boyle@jibo.com))\n- Adrian Trunzo ([adrian@instoredoes.com](mailto:adrian@instoredoes.com))\n- Pablo Varela ([pablovarela182@gmail.com](mailto:pablovarela182@gmail.com))\n- Luan Vicente ([hi@idlua.me](mailto:hi@idlua.me))\n- Tony Finn ([tony@tonyfinn.com](mailto:tony@tonyfinn.com))\n- tumobi ([tumobi@163.com](mailto:tumobi@163.com))\n- Maarten Ackermans ([maarten.ackermans@gmail.com](mailto:maarten.ackermans@gmail.com))\n- ★★ (ง ツ)ว ★★ ([theaichholzer@gmail.com](mailto:theaichholzer@gmail.com))\n- Fahad Hossain ([fa7ad@users.noreply.github.com](mailto:fa7ad@users.noreply.github.com))\n- kaijun ([cadenho@hotmail.com](mailto:cadenho@hotmail.com))\n- Andre Sattler ([andresattler.webdev@gmail.com](mailto:andresattler.webdev@gmail.com))\n- Lucas Baldassari ([lucasbaldassari@gmail.com](mailto:lucasbaldassari@gmail.com))\n- WangJie ([i@i8e.net](mailto:i@i8e.net))\n- Theophilus Omoregbee ([theo4u@ymail.com](mailto:theo4u@ymail.com))\n- Charlie Gerard ([charlie.a.gerard@gmail.com](mailto:charlie.a.gerard@gmail.com))\n- Christopher J. Brody ([chris.brody@gmail.com](mailto:chris.brody@gmail.com))\n- George Cheng ([Gerhut@GMail.com](mailto:Gerhut@GMail.com))\n- dangen ([23185799+dangen-effy@users.noreply.github.com](mailto:23185799+dangen-effy@users.noreply.github.com))\n- Munieru ([20086673+munierujp@users.noreply.github.com](mailto:20086673+munierujp@users.noreply.github.com))\n- Justin ([jus.russell@gmail.com](mailto:jus.russell@gmail.com))\n- Austin Orth ([aorth@niche.com](mailto:aorth@niche.com))\n- Chris Brody ([chris.brody@gmail.com](mailto:chris.brody@gmail.com))\n- kohashi ([hako584@gmail.com](mailto:hako584@gmail.com))\n- tomastrg ([tomastrg22@gmail.com](mailto:tomastrg22@gmail.com))\n- aaronhong ([aa.hong@gmail.com](mailto:aa.hong@gmail.com))\n- Amabel ([luoweibinb@gmail.com](mailto:luoweibinb@gmail.com))\n- Elad Chen ([eladchen@gmail.com](mailto:eladchen@gmail.com))\n- Dave Carlson ([davecarlson@users.noreply.github.com](mailto:davecarlson@users.noreply.github.com))\n- epixian ([38962121+epixian@users.noreply.github.com](mailto:38962121+epixian@users.noreply.github.com))\n- Yuriy Dybskiy ([yuriy@dybskiy.com](mailto:yuriy@dybskiy.com))\n- MarvinJWendt ([github@marvinjwendt.com](mailto:github@marvinjwendt.com))\n- LitoMore ([litomore@gmail.com](mailto:litomore@gmail.com))\n- Feross ([feross@feross.org](mailto:feross@feross.org))\n- Vincent Weevers ([mail@vincentweevers.nl](mailto:mail@vincentweevers.nl))\n- Shahar Or (mightyiam) ([mightyiampresence@gmail.com](mailto:mightyiampresence@gmail.com))\n- にしくま ([graphic.extra005@gmail.com](mailto:graphic.extra005@gmail.com))\n- Eric Berry ([coderberry@gmail.com](mailto:coderberry@gmail.com))\n- Abdullah Alansari ([ahimta@gmail.com](mailto:ahimta@gmail.com))\n- Adam Jones ([jones_adam@rocketmail.com](mailto:jones_adam@rocketmail.com))\n- poozhu ([poozhu@qq.com](mailto:poozhu@qq.com))\n- Shahar Dawn Or ([mightyiampresence@gmail.com](mailto:mightyiampresence@gmail.com))\n- Joshua Goran ([35858093+joshuagoran@users.noreply.github.com](mailto:35858093+joshuagoran@users.noreply.github.com))\n- HCLonely ([h1606051253@gmail.com](mailto:h1606051253@gmail.com))\n- Italo ([italoaurelior@gmail.com](mailto:italoaurelior@gmail.com))\n- Vrq ([januszveiro@gmail.com](mailto:januszveiro@gmail.com))\n- 王刚 ([wg0121@outlook.com](mailto:wg0121@outlook.com))\n- Javier Mendoza ([37485620+javiermendozain@users.noreply.github.com](mailto:37485620+javiermendozain@users.noreply.github.com))\n- Ciffelia ([mc.prince.0203@gmail.com](mailto:mc.prince.0203@gmail.com))\n- Nacho Caiafa ([nachokai@outlook.com](mailto:nachokai@outlook.com))\n- Tom Clark ([tom@octue.com](mailto:tom@octue.com))\n- Septiana Yoga ([septianayoga30@gmail.com](mailto:septianayoga30@gmail.com))\n- logustra ([logustra@outlook.com](mailto:logustra@outlook.com))\n- Kid ([44045911+kidonng@users.noreply.github.com](mailto:44045911+kidonng@users.noreply.github.com))\n- Aki ([71239005+AkiaCode@users.noreply.github.com](mailto:71239005+AkiaCode@users.noreply.github.com))\n- HonkingGoose ([34918129+HonkingGoose@users.noreply.github.com](mailto:34918129+HonkingGoose@users.noreply.github.com))\n- Alex Grover ([hello@alexgrover.me](mailto:hello@alexgrover.me))\n- Todd Bluhm ([toddbluhm@gmail.com](mailto:toddbluhm@gmail.com))\n- alanclarke ([alan@qubit.com](mailto:alan@qubit.com))\n- Csaba Maulis ([csaba@om4.com.au](mailto:csaba@om4.com.au))\n\n#### Generated by tools/update-authors.sh.\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 73.88,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [17.1.0] - 2023-05-29\n\n- Update [`eslint-config-standard`](https://github.com/standard/eslint-config-standard) from `17.0.0` to `17.1.0`\n\n## [17.0.0] - 2022-04-20\n\nWe're super excited to announce `standard` 17!\n\nThis major release fully focuses on getting in sync with the wider ESLint ecosystem\nand doesn't in itself introduce any new rules or features.\n\nWhen you upgrade, consider running `standard --fix` to automatically format your\ncode to match the current set of rules.\n\nThis is the first release by two of our `standard` co-maintainers @Divlo and @voxpelli. Buy them a cake if you run into them, thanks for getting this release out!\n\n### Major changes\n\n- `eslint-config-node` has been replaced with the up to date fork `eslint-config-n`. If you have used comments like `// eslint-disable-line node/no-deprecated-api` you now have to reference the `n/` rules instead.\n- [`object-shorthand` rule](https://github.com/standard/eslint-config-standard/pull/166) (as warning)\n- Use of ESLint 8, which allows for support for all of the latest syntax that ESLint 8 includes, such as top level `await` #1548 #1775\n- `--verbose` by default\n\n### Changed features\n\n- Update `eslint` from `~7.18.0` to `^8.13.0`\n- Update `eslint-config-standard` from `16.0.3` to `17.0.0` to adapt to ESLint 8\n- Update `eslint-config-standard-jsx` from `10.0.0` to `^11.0.0` to adapt to ESLint 8\n- Update `standard-engine` from `^14` to `^15.0.0` to adapt to ESLint 8, see [its `CHANGELOG`](https://github.com/standard/standard-engine/blob/master/CHANGELOG.md#1500-0-2021-11-30)\n- Move from `eslint-plugin-node@~11.1.0` to `eslint-plugin-n@^15.1.0` to adapt to ESLint 8\n- Update `eslint-plugin-import` from `~2.24.2` to `^2.26.0`\n- Update `eslint-plugin-promise` from `~5.1.0` to `^6.0.0`\n- Update `eslint-plugin-react` from `~7.25.1` to `^7.28.0`\n\n## [17.0.0-2] - 2022-02-03\n\n- Fix: Follow up to the fix of #1548 in `17.0.0-1` #1775\n\n## [17.0.0-1] - 2022-01-31\n\n- Fix: Ensure we support all of the latest syntax that ESLint 8 includes, such as top level `await` #1548\n\n## [17.0.0-0] - 2022-01-31\n\nWe're finally able to offer a pre-release of ESLint 8 based `standard` 17!\n\nThis major release fully focuses on getting in sync with the wider ESLint ecosystem\nand doesn't in itself introduce any new rules or features.\n\nThis pre-release exists to test out the ESLint 8 related changes and discover\npossible backwards incompatible changes that comes with it and mitigate\nunintended such before a stable release.\n\nWhen you upgrade, consider running `standard --fix` to automatically format your\ncode to match the current set of rules.\n\n### Changed features\n\n- Update `eslint` from `~7.18.0` to `^8.8.0`\n- Update `eslint-config-standard` from `16.0.3` to `17.0.0-0` to adapt to ESLint 8\n- Update `eslint-config-standard-jsx` from `10.0.0` to `11.0.0-0` to adapt to ESLint 8\n- Update `standard-engine` from `^14` to `^15.0.0-0` to adapt to ESLint 8, see [its `CHANGELOG`](https://github.com/standard/standard-engine/blob/master/CHANGELOG.md#1500-0-2021-11-30)\n\n## [16.0.4] - 2021-10-03\n\n- Update `eslint` from `~7.13.1` to `~7.18.0`\n- Update `eslint-config-standard` from `16.0.2` to `16.0.3`\n- Update `eslint-plugin-import` from `~2.22.1` to `~2.24.2`\n- Update `eslint-plugin-promise` from `~4.2.1` to `~5.1.0`\n- Update `eslint-plugin-react` from `~7.21.5` to `~7.25.1`\n\n## [16.0.3] - 2020-11-17\n\n- Update `eslint` from `~7.12.1` to `~7.13.0`\n- Relax rule: Enforce default parameters to be last [#1414](https://github.com/standard/standard/issues/1414)\n\n## [16.0.2] - 2020-11-11\n\n- Allow `standard` to run on Node 11, even though it's not officially supported [#1597](https://github.com/standard/standard/pull/1597)\n\n## [16.0.1] - 2020-10-30\n\n- Introduce \"warning\" system for disruptive rules (read more below)\n- Change rule to a \"warning\": Require let or const instead of var ([no-var](https://eslint.org/docs/rules/no-var)) [#633](https://github.com/standard/standard/issues/633)\n\n`standard` treats all rule violations as errors, which means that `standard`\nwill exit with a non-zero (error) exit code.\n\nHowever, we may occasionally release a new major version of `standard`\nwhich changes a rule that affects the majority of `standard` users (for example,\ntransitioning from `var` to `let`/`const`). We do this only when we think the\nadvantage is worth the cost and only when the rule is\n[auto-fixable](https://standardjs.com/#is-there-an-automatic-formatter).\n\nIn these situations, we have a \"transition period\" where the rule change is only\na \"warning\". Warnings don't cause `standard` to return a non-zero (error)\nexit code. However, a warning message will still print to the console. During\nthe transition period, `using standard --fix` will update your code so that it's\nready for the next major version.\n\nThe slow and careful approach is what we strive for with `standard`. We're\ngenerally extremely conservative in enforcing the usage of new language\nfeatures. We want using `standard` to be light and fun and so we're careful\nabout making changes that may get in your way. As always, you can\n[disable a rule](https://standardjs.com/#how-do-i-disable-a-rule) at any time, if necessary.\n\n## [16.0.0] - 2020-10-28\n\nWe're super excited to announce `standard` 16!\n\nAs with every new major release, there are lots of new rules in 16.0.0 designed\nto help catch bugs and make programmer intent more explicit. This release brings\nbetter performance, tons of bug fixes, improved JSX, React ⚛️, and Next.js support!\n\nWhen you upgrade, consider running `standard --fix` to automatically format your\ncode to match the newly added rules.\n\n❤️ If you enjoy StandardJS and want to support future releases, please\n[support Feross](https://github.com/users/feross/sponsorship)!\n\n### New features\n\n- 🏎 Better performance: the filesystem doesn't need to be traversed multiple times! [#1023](https://github.com/standard/standard/issues/1023)\n  - Massive improvements (on the order of minutes!) for projects with huge folders which are are ignored with `.gitignore`\n\n- 🌟 Support the `.gitignore` ignore syntax from the command line [#1117](https://github.com/standard/standard/issues/1117)\n  - In older versions, the command `standard src` would not lint the `src/` folder\n  - Instead, a glob pattern like `standard src/**/*.js` was required\n  - This is now fixed! You can run `standard src` to lint the `src/` folder!\n\n- 🌟 Support relative paths from the command line in more situations (e.g. `standard ../src/*.js`) [#1384](https://github.com/standard/standard/issues/1384)\n\n- 🌟 New `extensions` option for linting additional extensions besides `.js`, `.jsx`, `.mjs`, and `.cjs`\n  - Can be configured with the `--ext` command line flag or in `package.json`:\n  - Example:\n\n    ```bash\n    standard --ext .ts\n    ```\n\n    ```json\n    {\n      \"standard\": {\n        \"extensions\": [\".ts\"]\n      }\n    }\n    ```\n\n- 🌟 New cache directory location, respecting `XDG_CACHE_HOME` preference, with fallback to `~/.cache/standard` [standard-engine/#214](https://github.com/standard/standard-engine/pull/214)\n\n### Changed features\n\n- Update `eslint` from `~7.11.0` to `~7.12.1`\n\n- Update `standard-engine` from `^12` to `^14`\n  - Fix inaccurate `--help` command which indicates that `bundle.js` is automatically ignored when it is not anymore [standard-engine/#224](https://github.com/standard/standard-engine/pull/224)\n  - Remove `deglob` package and use built-in ESLint folder-traversal support\n\n- Paths with square brackets (e.g. `[` and `]`) are no longer skipped [#1333](https://github.com/standard/standard/issues/1333)\n  - This pattern is particularly common in Next.js apps, e.g. `blog/[slug].js`\n  - You may notice new errors in these files since they were not being linted before\n\n- Better mono-repo support: Nested `node_modules/` folders are ignored by default [#1182](https://github.com/standard/standard/issues/1182)\n\n- Remove `eslint-plugin-standard` [#1316](https://github.com/standard/standard/issues/1316)\n  - We migrated the remaining `no-callback-literal` rule into `eslint-plugin-node`\n\n### New rules\n\n_(Estimated % of affected standard users, based on test suite in parens)_\n\n- Require let or const instead of var ([no-var](https://eslint.org/docs/rules/no-var)) [#633](https://github.com/standard/standard/issues/633) [75%] [automatic fixing reduces to 11%]\n- Enforce return statements in `Array` method callbacks ([array-callback-return](https://eslint.org/docs/rules/array-callback-return)) [#859](https://github.com/standard/standard/issues/859) [7%]\n- Disallow empty block statements ([no-empty](https://eslint.org/docs/rules/no-empty)) [#796](https://github.com/standard/standard/issues/796) [2%]\n- Enforce default parameters to be last ([default-param-last](https://eslint.org/docs/rules/default-param-last)) [#1414](https://github.com/standard/standard/issues/1414) [1%]\n- Disallow use of the `RegExp` constructor in favor of regular expression literals ([prefer-regex-literals](https://eslint.org/docs/rules/prefer-regex-literals)) [#1413](https://github.com/standard/standard/issues/1413) [1%]\n- Disallow spaces inside of computed keys of class methods, getters and setters ([computed-property-spacing](https://eslint.org/docs/rules/computed-property-spacing)) [#1416](https://github.com/standard/standard/issues/1416) [0%]\n- Disallow `case NaN`, `switch(NaN)`, `indexOf(NaN)`, and `lastIndexOf(NaN)` ([use-isnan](https://eslint.org/docs/rules/use-isnan)) [#1429](https://github.com/standard/standard/issues/1429) [0%]\n- Disallow assigning to imported bindings ([no-import-assign](https://eslint.org/docs/rules/no-import-assign)) [#1412](https://github.com/standard/standard/issues/1412) [0%]\n- Enforce getter/setter pairs in classes ([accessor-pairs](https://eslint.org/docs/rules/accessor-pairs)) [#1415](https://github.com/standard/standard/issues/1415) [0%]\n- Node: Disallow assignment to `exports` ([node/no-exports-assign](https://github.com/mysticatea/eslint-plugin-node/blob/master/docs/rules/no-exports-assign.md)) [#1400](https://github.com/standard/standard/issues/1400) [0%]\n- React: Prevent usage of the return value of `ReactDOM.render` ([react/no-render-return-value](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-render-return-value.md)) [#1568](https://github.com/standard/standard/issues/1568) [1%]\n- React: Prevent usage of deprecated methods ([react/no-deprecated](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-deprecated.md)) [#1572](https://github.com/standard/standard/issues/1572) [1%]\n- React: Prevent direct mutation of `this.state` ([react/no-direct-mutation-state](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-direct-mutation-state.md)) [#1571](https://github.com/standard/standard/issues/1571) [0%]\n- React: Prevent usage of `findDOMNode` ([react/no-find-dom-node](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-find-dom-node.md)) [#1570](https://github.com/standard/standard/issues/1570) [0%]\n- React: Prevent usage of `isMounted` ([react/no-is-mounted](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-is-mounted.md)) [#1569](https://github.com/standard/standard/issues/1569) [0%]\n- React: Prevent using string refs ([react/no-string-refs](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md)) [#1567](https://github.com/standard/standard/issues/1567) [0%]\n- JSX: Prevent missing parentheses around multiline JSX ([react/jsx-wrap-multilines](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md)) [#710](https://github.com/standard/standard/issues/710) [#1382](https://github.com/standard/standard/issues/1382) (0%)\n- JSX: Check if shorthand fragment syntax requires a key prop ([react/jsx-key](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-key.md)) [#1575](https://github.com/standard/standard/issues/1575) [0%]\n- JSX: Prevent passing of children as props ([react/no-children-prop](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-children-prop.md)) [#1574](https://github.com/standard/standard/issues/1574) [0%]\n- JSX: Prevent using children and dangerouslySetInnerHTML as props at the same time ([react/no-danger-with-children](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-danger-with-children.md)) [#1573](https://github.com/standard/standard/issues/1573) [0%]\n- JSX: Prevent invalid characters from appearing in markup ([react/no-unescaped-entities](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-unescaped-entities.md)) [#1566](https://github.com/standard/standard/issues/1566) [0%]\n- JSX: Enforce JSX value is returned in component render function ([react/require-render-return](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/require-render-return.md)) [#1565](https://github.com/standard/standard/issues/1565) [0%]\n- JSX: Prevent usage of unsafe `target='_blank'` on any component named `Link` ([react/jsx-no-target-blank](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-target-blank.md)) [#1576](https://github.com/standard/standard/issues/1576) [0%]\n\n### Changed rules\n\n- Relax rule: JSX: Consider the global scope when checking for defined Components [#1115](https://github.com/standard/standard/issues/1115)\n- Relax rule: JSX: Remove conflicting indentation rule in `indent` [#1499](https://github.com/standard/standard/issues/1499)\n\n## [15.0.1] - 2020-10-27\n\n- Relax rule: Remove conflicting JSX indenting with `indent` rule [eslint-config-standard/#177](https://github.com/standard/eslint-config-standard/issues/177)\n\n## [15.0.0] - 2020-10-21\n\nWe're super excited to announce `standard` 15!\n\nAs with every new major release, there are lots of new rules in 15.0.0 designed\nto help catch bugs and make programmer intent more explicit. This release brings\nsupport for ES 2021, the latest version of the ECMAScript specification, as well\nas many quality-of-life improvements, including ESLint v7.\n\nWhen you upgrade, consider running `standard --fix` to automatically format your\ncode to match the newly added rules.\n\n❤️ If you enjoy StandardJS and want to support future releases, check out\nFeross's [GitHub Sponsors page](https://github.com/users/feross/sponsorship).\n\n### New features\n\n- Support ES 2021, the latest version of the ECMAScript specification, which includes support for [logical assignment operators](https://github.com/tc39/proposal-logical-assignment) and [numeric separators](https://github.com/tc39/proposal-numeric-separator) [#1551](https://github.com/standard/standard/issues/1551)\n- Support ES 2020 features such as [optional chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining), the [nullish coalescing operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator), `export * as ns from 'source'`, and [`import.meta`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import.meta).\n- Support global variables from ES 2017 (`Atomics`, `SharedArrayBuffer`), ES 2020 (`BigInt`, `BigInt64Array`, `BigUint64Array`, `globalThis`), and ES 2021 (`FinalizationRegistry`, `WeakRef`). [#1436](https://github.com/standard/standard/issues/1436) [#1557](https://github.com/standard/standard/issues/1557) [eslint-config-standard/#156](https://github.com/standard/eslint-config-standard/pull/156)\n- The documentation is now available in Indonesian 🇮🇩! [#1544](https://github.com/standard/standard/pull/1544)\n  - Thanks to [@yoga1234](https://github.com/yoga1234) for the excellent work!\n  - Other community contributed translations exist in Spanish, French, Italian, Japanese, Korean, Portuguese, Simplified Chinese, and Taiwanese Mandarin.\n  - More translations are always welcome!\n\n### Changed features\n\n- BREAKING: Node.js 8 is no longer supported\n  - Node.js 8 is EOL and will no longer be receiving security updates.\n  - To prevent breaking CI for projects which still support Node 8, `standard` silently passes when run by an unsupported version of Node\n- Update `eslint` from `~6.8.0` to `~7.11.0`\n\n### New rules\n\n_(Estimated % of affected standard users, based on test suite in parens)_\n\n- Require indentation for values of ternary expressions ([indent](https://eslint.org/docs/rules/indent)) [#927](https://github.com/standard/standard/issues/927) [4%]\n- Enforce newlines between operands of ternary expressions if the expression spans multiple lines ([multiline-ternary](https://eslint.org/docs/rules/multiline-ternary)) [#1558](https://github.com/standard/standard/issues/1558) [3%]\n- Disallow loops with a body that allows only one iteration ([no-unreachable-loop](https://eslint.org/docs/rules/no-unreachable-loop)) [#1556](https://github.com/standard/standard/issues/1556) [0%]\n- Disallow useless backreferences in regular expressions ([no-useless-backreference](https://eslint.org/docs/rules/no-useless-backreference)) [#1554](https://github.com/standard/standard/issues/1554) [0%]\n- Enforce default clauses in switch statements to be last ([default-case-last](https://eslint.org/docs/rules/default-case-last)) [#1553](https://github.com/standard/standard/issues/1553) [0%]\n- Disallow Number Literals That Lose Precision ([no-loss-of-precision](https://eslint.org/docs/rules/no-loss-of-precision)) [#1552](https://github.com/standard/standard/issues/1552) [0%]\n\n### Changed rules\n\n- Relax rule: Allow function declarations in nested blocks [#1406](https://github.com/standard/standard/issues/1406)\n- Relax rule: Removed redundant `no-negated-in-lhs` rule, already enforced by `no-unsafe-negation` [eslint-config-standard/#160](https://github.com/standard/eslint-config-standard/pull/160)\n\n## [14.3.4] - 2020-05-11\n\n- Relax rule: `no-return-await` [#1442](https://github.com/standard/standard/pull/1442)\n\n## [14.3.3] - 2020-03-15\n\n- Skip running on versions of Node.js older than 8.10.0. [#1496](https://github.com/standard/standard/pull/1496)\n\n## [14.3.2] - 2020-03-14\n\n- Update `eslint` to `~6.8.0`\n\n## [14.3.1] - 2019-09-17\n\n- Skip running on versions of Node.js older than 8.6.0. [#1418](https://github.com/standard/standard/pull/1418)\n\n## [14.3.0] - 2019-09-14\n\n- Update `eslint` to `~6.4.0`\n\n## [14.2.0] - 2019-09-11\n\n- Update `eslint` to `~6.3.0`\n- Update `eslint-plugin-node` to `~10.0.0`\n\n## [14.1.0] - 2019-08-28\n\n- Support ES 2020, the latest version of the ECMAScript specification, which includes support for Dynamic Imports and `BigInt`. [#1378](https://github.com/standard/standard/issues/1378)\n- Security: Upgrade `eslint` to `6.2.2` to fix security issue ([blog post](https://eslint.org/blog/2019/08/eslint-v6.2.1-released)) ([security advisory](https://github.com/mysticatea/eslint-utils/security/advisories/GHSA-3gx7-xhv7-5mx3))\n- Remove [`funding`](https://github.com/feross/funding). See [Recap of the `funding` experiment](https://feross.org/funding-experiment-recap) for thoughts and learnings.\n\nNOTE: If you use `standard` with the `--parser babel-eslint` option, please ensure that you update `babel-eslint` to `10.0.3` or later for compatibility with this version of `standard`.\n\n## [14.0.2] - 2019-08-22\n\n- Relax rule: Don't check indentation on template literal children (work around for ESLint bug) ([indent](https://eslint.org/docs/rules/indent)) [#1385](https://github.com/standard/standard/issues/1385)\n\n## [14.0.1] - 2019-08-22\n\n- Relax rule (temporarily, to workaround a bug): Disallow missing parentheses around multiline JSX ([react/jsx-wrap-multilines](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md)) [#1382](https://github.com/standard/standard/issues/1382)\n\n## [14.0.0] - 2019-08-19\n\nWe're super excited to announce `standard` 14!\n\nAs with every new major release, there are lots of new rules in 14.0.0 designed\nto help catch bugs and make programmer intent more explicit. This release brings\nsupport for ES 2019, the latest version of the ECMAScript specification, as well\nas many quality-of-life improvements for users who use tagged template strings,\nJSX, and `.mjs` files for ES modules.\n\nWhen you upgrade, consider running `standard --fix` to automatically format your\ncode to match the newly added rules.\n\n`standard` keeps growing! The latest stats show that `standard` and\n`eslint-standard-*` shareable configs are depended upon by **318,512 GitHub\nrepositories** and **33,349 public npm packages**. Thanks for spreading the\nword!\n\nWe now have a [Discord server](https://discord.gg/ZegqCBr). Come chat with the\nmaintainers, ask questions, and get help from the community!\n\n❤️ If you enjoy StandardJS and want to support future releases, check out\nFeross's [GitHub Sponsors page](https://github.com/users/feross/sponsorship).\nGitHub is matching donations, so your dollars go twice as far! 🚀\n\n### New features\n\n- Support ES 2019, the latest version of the ECMAScript specification. [eslint-config-standard/e04e06](https://github.com/standard/eslint-config-standard/commit/e04e0615fdea44567bfb2fd1f868e3ab6751bda3)\n- Lint `*.mjs` and `*.cjs` files automatically by default [#1009](https://github.com/standard/standard/issues/1009)\n- Ignore patterns from `.git/info/exclude` in addition to `.gitignore`. [#1277](https://github.com/standard/standard/issues/1277)\n- Added [`funding`](https://github.com/feross/funding), an open source funding experiment.\n\n### Changed features\n\n- Remove `bundle.js` from the default list of ignored files [#743](https://github.com/standard/standard/issues/743)\n\n### New rules\n\n_(Estimated % of affected standard users, based on test suite in parens)_\n\n- Require Dot Notation Whenever Possible ([dot-notation](https://eslint.org/docs/rules/dot-notation)) [#1344](https://github.com/standard/standard/issues/1344) [6%]\n- Require consistent line breaks inside braces ([object-curly-newline](https://eslint.org/docs/rules/object-curly-newline)) [#782](https://github.com/standard/standard/issues/782) [1%]\n- Disallow template literals when placeholders or tagged template features are not used. ([quotes](https://eslint.org/docs/rules/quotes)) [#838](https://github.com/standard/standard/issues/838) [eslint-config-standard/#151](https://github.com/standard/eslint-config-standard/pull/151) [1%]\n- Disallow lexical declarations in case/default clauses ([no-case-declarations](https://eslint.org/docs/rules/no-case-declarations)) [#1211](https://github.com/standard/standard/issues/1211) [eslint-config-standard/#137](https://github.com/standard/eslint-config-standard/pull/137) [1%]\n- Require the first JSX property to be placed on a new line if the JSX tag takes up multiple lines and there are multiple properties ([react/jsx-first-prop-new-line](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-first-prop-new-line.md)) [#696](https://github.com/standard/standard/issues/696) [1%]\n- Require linebreaks in curly braces in JSX attributes and expressions to be consistent ([react/jsx-curly-newline](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-newline.md)) [#1372](https://github.com/standard/standard/issues/1372) [1%]\n- Require JSX attributes and logical expressions to be indented correctly ([react/jsx-indent](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-indent.md)) [#1370](https://github.com/standard/standard/issues/1370) [1%]\n- Require JSX event handler names to follow conventions ([react/jsx-handler-names](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-handler-names.md)) [#1371](https://github.com/standard/standard/issues/1371) [1%]\n- Disallow spaces inside of curly braces in JSX expressions in children ([react/jsx-curly-spacing](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md)) [#1373](https://github.com/standard/standard/issues/1373) [1%]\n- Require JSX closing bracket to be aligned with the opening tag ([react/jsx-closing-bracket-location](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md)) [#1361](https://github.com/standard/standard/issues/1361) [1%]\n- Disallow unnecessary curly braces in JSX props and children ([react/jsx-curly-brace-presence](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-brace-presence.md)) [#1366](https://github.com/standard/standard/issues/1366) [1%]\n- Disallow missing `key` prop in JSX elements that likely require a `key` prop ([react/jsx-key](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-key.md)) [#1369](https://github.com/standard/standard/issues/1369) [1%]\n- Disallow import of modules using absolute paths ([import/no-absolute-path](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-absolute-path.md)) [#861](https://github.com/standard/standard/issues/861) [#1343](https://github.com/standard/standard/issues/1343) [0%]\n- Require no spaces before JSX closing brackets ([react/jsx-tag-spacing](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md)) [#1348](https://github.com/standard/standard/issues/1348) [eslint-config-standard-jsx/38](https://github.com/standard/eslint-config-standard-jsx/pull/38) [0%]\n- Disallow multiple spaces between inline JSX props ([react/jsx-props-no-multi-spaces](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-multi-spaces.md)) [#1363](https://github.com/standard/standard/issues/1363) [0%]\n- Disallow accidental comments in JSX from being inserted as text nodes ([react/jsx-no-comment-textnodes](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-comment-textnodes.md)) [#1368](https://github.com/standard/standard/issues/1368) [0%]\n- Prevent usage of unsafe `target='_blank'` in JSX links ([react/jsx-no-target-blank](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-target-blank.md)) [#1367](https://github.com/standard/standard/issues/1367) [0%]\n- Require shorthand form for JSX fragments ([react/jsx-fragments](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-fragments.md)) [#1364](https://github.com/standard/standard/issues/1364) [0%]\n- Require PascalCase for user-defined JSX components ([react/jsx-pascal-case](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md)) [#1365](https://github.com/standard/standard/issues/1365) [0%]\n- Require JSX closing tag to be aligned with the opening tag ([react/jsx-closing-tag-location](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-tag-location.md)) [#1358](https://github.com/standard/standard/issues/1358) [0%]\n- Disallow missing parentheses around multiline JSX ([react/jsx-wrap-multilines](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md)) [#710](https://github.com/standard/standard/issues/710) [0%]\n- Require pipeline operators to appear at the start of a line ([operator-linebreak](https://eslint.org/docs/rules/operator-linebreak)) [eslint-config-standard/#121](https://github.com/standard/eslint-config-standard/pull/121) [0%]\n- Disallow use of the void operator ([no-void](https://eslint.org/docs/rules/no-void)) [eslint-config-standard/#135](https://github.com/standard/eslint-config-standard/pull/135) [0%]\n\n### Changed rules\n\n- Relax rule: Don't require newlines between _single-line_ member functions or class field declarations ([lines-between-class-members](https://eslint.org/docs/rules/lines-between-class-members)) [#1347](https://github.com/standard/standard/issues/1347)\n- Relax rule: Don't check indentation on template literal children (work around for ESLint bug) ([indent](https://eslint.org/docs/rules/indent)) [#1176](https://github.com/standard/standard/issues/1176)\n- Relax rule: Disallow labels that are variables names (because all labels are already disallowed) ([no-label-var](https://eslint.org/docs/rules/no-label-var)) [eslint-config-standard/#132](https://github.com/standard/eslint-config-standard/pull/132)\n\n## [13.1.0] - 2019-07-20\n\n- Update `eslint` from `~6.0.1` to `~6.1.0`\n\n## [13.0.2] - 2019-07-12\n\n- Fix global installations of `standard` not finding dependencies due to ESLint v6 plugin resolution change [#1327](https://github.com/standard/standard/issues/1327) [#1328](https://github.com/standard/standard/issues/1328) [#1329](https://github.com/standard/standard/issues/1329)\n\n## [13.0.1] - 2019-07-11\n\n### Changed rules\n\n- Relax rule: Only enforce `const` in destructuring when all variables are constant [#1325](https://github.com/standard/standard/issues/1325)\n\n## [13.0.0] - 2019-07-10\n\nWelcome to the latest version of `standard`!\n\nAs with every new major release, there are lots of new rules in 13.0.0 designed\nto help catch bugs and make programmer intent more explicit.\n\n`standard` is more popular than ever – **640,000 downloads per month!** It's\neven more popular – **3,000,000 downloads per month** – if you include the\n[ESLint configuration](https://www.npmjs.com/package/eslint-config-standard)\nthat we also publish (for advanced users).\n\nWhen you upgrade, consider running `standard --fix` to automatically format your code to match the newly added rules.\n\n❤️ If you enjoy StandardJS and want to support future releases, check out Feross's [GitHub Sponsors page](https://github.com/users/feross/sponsorship). GitHub is matching donations, so your dollars go twice as far! 🚀\n\n### New features\n\n- Update `eslint` from `~5.16.0` to `~6.0.1`\n  - BREAKING: Node.js 6 is no longer supported\n    - Node.js 6 is EOL and will no longer be receiving security updates. As a result, the eslint team has decided to drop support for it.\n    - To prevent breaking CI for projects which still support Node 6, `standard` silently passes when run by an unsupported version of Node.\n  - **For `eslint-config-standard` users only:** Plugins are no longer affected by `eslint`'s location\n    - Previously, ESLint loaded plugins relative to the location of the ESLint package itself. As a result, we suggested that users with global ESLint installations should also install plugins globally, and users with local ESLint installations should install plugins locally.\n    - With ESLint v6, plugins should always be installed locally, even if ESLint was installed globally. More precisely, ESLint v6 resolves plugins relative to the end user’s project by default, and always resolves shareable configs and parsers relative to the location of the config file that imports them.\n    - See [migrating to ESLint 6.0.0 for more information](https://eslint.org/docs/user-guide/migrating-to-6.0.0#-plugins-and-shareable-configs-are-no-longer-affected-by-eslints-location).\n- The documentation is now available in Japanese 🇯🇵!\n  - Thanks to [@munierujp](https://github.com/munierujp) for the excellent work!\n  - Other community contributed translations exist in Spanish, French, Italian, Korean, Portuguese, Simplified Chinese, and Taiwanese Mandarin.\n  - More translations are always welcome!\n- Update `eslint-plugin-promise` from `~4.0.0` to `~4.2.1`\n- Update `eslint-plugin-node` from `~7.0.1` to `~9.1.0`\n\n### New rules\n\n_(Estimated % of affected standard users, based on test suite in parens)_\n\n- Disallow spaces inside of array brackets ([array-bracket-spacing](https://eslint.org/docs/rules/array-bracket-spacing)) [#1203](https://github.com/standard/standard/issues/1203) [eslint-config-standard/#131](https://github.com/standard/eslint-config-standard/pull/131) [14%]\n- Require `const` instead of `let` if variable is never reassigned ([prefer-const](https://eslint.org/docs/rules/prefer-const)) [#523](https://github.com/standard/standard/issues/523) [eslint-config-standard/#133](https://github.com/standard/eslint-config-standard/pull/133) [14%]\n- Disallow quotes around object literal property names that are not strictly required ([quote-props](https://eslint.org/docs/rules/quote-props)) [#791](https://github.com/standard/standard/issues/791) [4%]\n- Disallow use of Object.prototypes builtins directly ([no-prototype-builtins](https://eslint.org/docs/rules/no-prototype-builtins)) [#1310](https://github.com/standard/standard/issues/1310) [3%]\n- Require an empty line between class members ([lines-between-class-members](https://eslint.org/docs/rules/lines-between-class-members)) [#438](https://github.com/standard/standard/issues/438) [1%]\n- Disallow using an async function as a Promise executor ([no-async-promise-executor](https://eslint.org/docs/rules/no-async-promise-executor)) [#1309](https://github.com/standard/standard/issues/1309) [1%]\n- Disallow spaces inside of computed properties ([computed-property-spacing](https://eslint.org/docs/rules/computed-property-spacing)) [#1315](https://github.com/standard/standard/issues/1315) [eslint-config-standard/#131](https://github.com/standard/eslint-config-standard/pull/131) [1%]\n- Disallow unnecessary catch clauses ([no-useless-catch](https://eslint.org/docs/rules/no-useless-catch)) [#1312](https://github.com/standard/standard/issues/1312) [0%]\n- Disallow characters which are made with multiple code points in character class syntax ([no-misleading-character-class](https://eslint.org/docs/rules/no-misleading-character-class)) [#1311](https://github.com/standard/standard/issues/1311) [0%]\n\n## [12.0.1] - 2018-08-29\n\n- Since ESLint 5 no longer supports Node 4, `standard` silently passes when run in Node 4, which matches the current behavior for Node 0.10, 0.12, and all other unsupported versions of Node.\n\n## [12.0.0] - 2018-08-28\n\nNew version of ESLint, new version of Standard!\n\nWhen you upgrade, consider running `standard --fix` to automatically format your code to match the newly added rules.\n\n### New features\n\n- Update `eslint` from `~4.19.0` to `~5.4.0`.\n  - Support JSXFragment nodes (e.g. `<></>`)\n  - Lots of minor changes to rules to catch more edge cases!\n- The README is now available in French! (Thanks [@charliegerard](https://github.com/charliegerard)!)\n  - Other community contributed translations exist in Spanish, Italian, Korean, Portuguese, Simplified Chinese, and Taiwanese Mandarin.\n  - More translations are welcome!\n\n### New rules\n\n_(Estimated % of affected standard users, based on test suite in parens)_\n\n- Require spacing inside of braces ([object-curly-spacing](https://eslint.org/docs/rules/object-curly-spacing)) [#609](https://github.com/standard/standard/issues/609) [eslint-config-standard/#35](https://github.com/standard/eslint-config-standard/issues/35) [29%]\n- Disallow APIs that were deprecated in Node 10 ([no-deprecated-api](https://github.com/mysticatea/eslint-plugin-node/blob/master/docs/rules/no-deprecated-api.md)) [#1164](https://github.com/standard/standard/pull/1164) [15%]\n  - e.g. `assert.equal()`, `assert.deepEqual()` and `assert.notEqual()` were deprecated in Node 10.\n- Disallow self assignment of properties ([no-self-assign](https://eslint.org/docs/rules/no-self-assign)) [#1186](https://github.com/standard/standard/issues/1186) [0%]\n- Disallow use of an exported name as the locally imported name of a default export ([import/no-named-as-default](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-named-as-default.md)) [eslint-config-standard/#98](https://github.com/standard/eslint-config-standard/pull/98)\n\n### Changed rules\n\nNone.\n\n## [11.0.0] - 2018-02-18\n\nThis release has no new rules, but it does update to the latest version of `eslint`,\nversion 4, which has some significant changes to existing rules. Most updates make\nthe indentation rules more strict.\n\nThankfully, most users will just need to run `standard --fix` to update code to be\ncompliant.\n\n### New features\n\n- Update `eslint` from ~3.19.0 to ~4.18.0.\n  - The `indent` rule is more strict.\n  - The `padded-blocks` rule is more strict.\n  - The `space-before-function-paren` rule is more strict.\n  - The `no-multi-spaces` rule is more strict.\n  - Minor improvements to:\n    - `no-extra-parens`,\n    - `no-unexpected-multiline`,\n    - `no-regex-spaces`, and\n    - `space-unary-ops`\n\n- Update `eslint-plugin-import` from `~2.2.0` to `~2.8.0`\n  - Updated for eslint 4.0 compatibility.\n  - Various small bug fixes included related to `import/*` rules.\n\n- Update `eslint-plugin-node` from `~4.2.2` to `~6.0.0`\n  - The `no-deprecated-api` rule is updated with Node.js 8 support and improved\n    Node 6 support.\n\n- Upodate `eslint-plugin-promise` from `~3.5.0` to `~3.6.0`.\n\n- Update `eslint-plugin-react` from `~6.10.0` to `~7.6.1`\n  - Fix `jsx-indent` crash\n  - Fix `jsx-indent` indentation calculation with nested JSX.\n  - Fix `jsx-no-undef` will not check the global scope by default.\n  - Fix `jsx-curly-spacing` newline with object literals bug.\n  - Fix `jsx-curly-spacing` schema incompatibility with ESLint 4.2.0.\n  - Fix alignment bug in `jsx-indent`.\n\n### Changed rules\n\n- Relax rule: Don't mark Rails Asset Pipeline comments (comments that start with `//=`)\n  as errors. ([spaced-comment](https://eslint.org/docs/rules/spaced-comment)) [#918](https://github.com/standard/standard/issues/918)\n\n👏 Huge thanks to [@Flet](https://github.com/Flet) for putting together most of this\nrelease!\n\n## [10.0.3] - 2017-08-06\n\n- Internal changes (incremented dependency versions)\n\n## [10.0.2] - 2017-04-14\n\n### Changed rules\n\n- Relax rule: Disallow import of modules using absolute paths ([import/no-absolute-path](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-absolute-path.md)) [#861](https://github.com/standard/standard/issues/861)\n  - This rule was responsible for up to 25% of the running time of `standard`, so we are disabling it until its performance improves.\n\n## [10.0.1] - 2017-04-06\n\n- Internal changes (incremented dependency versions)\n\n## [10.0.0] - 2017-04-04\n\n**`standard` just turned 10.0.0!** 🎉\n\nAs with every new major release, there are lots of new rules in 10.0.0 designed to\nhelp catch bugs and make programmer intent more explicit.\n\n`standard` is more popular than ever – **330,000 downloads per month!** It's even\nmore popular – **670,000 downloads per month** – if you include the\n[shareable ESLint config](https://www.npmjs.com/package/eslint-config-standard)\nthat we also publish.\n\nThe most important change in 10.0.0 is that **using deprecated Node.js APIs is now\nconsidered an error**. It's finally time to update those dusty old APIs!\n\nDeprecated APIs are problematic because they may print warning messages in the\nconsole in recent versions of Node.js. This often confuses users and leads to\nunnecessary support tickets for project maintainers.\n\nSome deprecated APIs are even insecure (or at least prone to incorrect usage) which\ncan have serious security implications. For that reason, `standard` now considers\nusage of `Buffer(num)` to be an error, since this function returns uninitialized\nprogram memory which could contain confidential information like passwords or keys.\n\nInstead of `Buffer(num)`, consider using `Buffer.alloc(num)` or `Buffer.from(obj)`\nwhich make the programmer's intent clearer. These functions exist in all currently\nsupported versions of Node.js, including Node.js 4.x. For more background,\n[see this Node.js issue](https://github.com/nodejs/node/issues/4660).\n\nWe also improved some rules to support common patterns in code bases that use\nReact, JSX, and Flow.\n\nWhen you upgrade, consider running `standard --fix` to automatically fix some of\nthe issues caught by this new version.\n\n### New features\n\n- Update ESLint from 3.15.x to 3.19.x.\n- Node.js API: Add `standard.lintTextSync` method\n\n### New rules\n\n_(Estimated % of affected standard users, based on test suite in parens)_\n\n- Disallow using deprecated Node.js APIs ([node/no-deprecated-api](https://github.com/mysticatea/eslint-plugin-node/blob/master/docs/rules/no-deprecated-api.md)) [#693](https://github.com/standard/standard/issues/693) [13%]\n  - Ensures that code always runs without warnings on the latest versions of Node.js\n  - Ensures that safe Buffer methods (`Buffer.from()`, `Buffer.alloc()`) are used instead of `Buffer()`\n- Enforce callbacks always called with Node.js-style error first ([standard/no-callback-literal](https://github.com/xjamundx/eslint-plugin-standard#rules-explanations)) [#623](https://github.com/standard/standard/issues/623) [3%]\n  - Functions named `callback` or `cb` must be invoked with `null`, `undefined`, or an `Error` as the first argument\n  - Disallows using a string instead of an `Error` object\n  - Disallows confusing callbacks that do not follow the standard Node.js pattern\n- Disallow any imports that come after non-import statements ([import/first](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/first.md)) [#806](https://github.com/standard/standard/issues/806) [1%]\n- Disallow unnecessary return await ([no-return-await](https://eslint.org/docs/rules/no-return-await)) [#695](https://github.com/standard/standard/issues/695) [0%]\n- Disallow comma-dangle in functions ([comma-dangle](https://eslint.org/docs/rules/comma-dangle)) [#787](https://github.com/standard/standard/issues/787) [0%]\n- Disallow repeated exports of names or defaults ([import/export](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/export.md)) [#806](https://github.com/standard/standard/issues/806) [0%]\n- Disallow import of modules using absolute paths ([import/no-absolute-path](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-absolute-path.md)) [#806](https://github.com/standard/standard/issues/806) [0%]\n- Disallow Webpack loader syntax in imports ([import/no-webpack-loader-syntax](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-webpack-loader-syntax.md)) [#806](https://github.com/standard/standard/issues/806) [0%]\n- Disallow comparing against -0 ([no-compare-neg-zero](https://eslint.org/docs/rules/no-compare-neg-zero)) [#812](https://github.com/standard/standard/issues/812) [0%]\n\n### Changed rules\n\n- Relax rule: allow using `...rest` to omit properties from an object ([no-unused-vars](https://eslint.org/docs/rules/no-unused-vars)) [#800](https://github.com/standard/standard/issues/800)\n  - This is a common and useful pattern in React/JSX apps!\n- Relax rule: allow Flow `import type` statements ([import/no-duplicates](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-duplicates.md)) [#599](https://github.com/standard/standard/issues/599)\n  - These are no longer considered to be \"duplicate imports\"\n- Relax rule: Treat `process.exit()` the same as `throw` in code path analysis ([node/process-exit-as-throw](https://github.com/mysticatea/eslint-plugin-node/blob/master/docs/rules/process-exit-as-throw.md)) [#699](https://github.com/standard/standard/issues/699)\n  - Makes certain other rules work better and give fewer false positives\n- Relax rule: allow Unnecessary Labels ([no-extra-label](https://eslint.org/docs/rules/no-extra-label))\n  - Redundant, since \"no-labels\" is already enabled, which is more restrictive\n\n## [9.0.2] - 2017-03-17\n\n### Changed rules\n\n- Relax rule: Allow tagged template string expressions ([no-unused-expressions](https://eslint.org/docs/rules/no-unused-expressions)) [#822](https://github.com/standard/standard/issues/822)\n\n## [9.0.1] - 2017-03-07\n\n### Changed rules\n\n- Relax rule: Allow mixing basic operators without parens ([no-mixed-operators](https://eslint.org/docs/rules/no-mixed-operators)) [#816](https://github.com/standard/standard/issues/816)\n  - Specifically, these operators: `+`, `-`, `*`, `/`, `%`, and `**`\n\n## [9.0.0] - 2017-02-28\n\nIt's time for a new major version of `standard`! As usual, this release contains a\nbunch of awesomeness to help you keep your code in tip-top shape!\n\nWe've added several new rules designed to **catch potential programmer errors**\n(i.e. bugs), as well as rules to make programmer intent **more explicit** in\ncertain circumstances.\n\nThis release continues our trend of tightening up rules so that, wherever possible,\nthere's one \"right\" way to do things. This design goal is intended to reduce the\ntime that teams and maintainers spend giving code review feedback in pull requests.\n\nWhen you upgrade, consider running `standard --fix` to automatically fix some of the\nerrors caught by the new rules in this version.\n\n_Note: If you use the Chai test framework, you will need to make some changes to\nyour tests to improve their robustness. [Read about the changes you need to make](https://github.com/standard/standard/issues/690#issuecomment-278533482)._\n\n### New features\n\n- Update ESLint from 3.10.x to 3.15.x\n- 3 additional rules are now fixable with `standard --fix`\n\n### New rules\n\n_(Estimated % of affected standard users, based on test suite in parens)_\n\n- Disallow mixing different operators without parens ([no-mixed-operators](https://eslint.org/docs/rules/no-mixed-operators)) [#566](https://github.com/standard/standard/issues/566) [5%]\n- Enforce 1 newline at end of file (previously 1 or 2 were ok) ([no-multiple-empty-lines](https://eslint.org/docs/rules/no-multiple-empty-lines)) [#733](https://github.com/standard/standard/issues/733) [3%]\n- Disallow Unused Expressions ([no-unused-expressions](https://eslint.org/docs/rules/no-unused-expressions)) [#690](https://github.com/standard/standard/issues/690) [3%]\n  - Note: this affects users of the Chai test framework. [Read about the changes you need to make](https://github.com/standard/standard/issues/690#issuecomment-278533482).\n- Disallow redundant return statements ([no-useless-return](https://eslint.org/docs/rules/no-useless-return)) [#694](https://github.com/standard/standard/issues/694) [1%]\n- Disallow Incorrect Early Use ([no-use-before-define](https://eslint.org/docs/rules/no-use-before-define)) [#636](https://github.com/standard/standard/issues/636) [0%]\n- Enforce that Promise rejections are passed an Error object as a reason ([prefer-promise-reject-errors](https://eslint.org/docs/rules/prefer-promise-reject-errors)) [#777](https://github.com/standard/standard/issues/777) [0%]\n- Enforce comparing `typeof` expressions against string literals ([valid-typeof](https://eslint.org/docs/rules/valid-typeof)) [#629](https://github.com/standard/standard/issues/629) [0%]\n- Enforce spacing around \\* in generator functions ([generator-star-spacing](https://eslint.org/docs/rules/generator-star-spacing)) [#724](https://github.com/standard/standard/issues/724) [0%]\n- Disallow Unnecessary Labels ([no-extra-label](https://eslint.org/docs/rules/no-extra-label)) [#736](https://github.com/standard/standard/issues/736) [0%]\n- Disallow spacing between template tags and their literals ([template-tag-spacing](https://eslint.org/docs/rules/template-tag-spacing)) [#755](https://github.com/standard/standard/issues/775) [0%]\n- Disallow padding within switch statements and classes ([padded-blocks](https://eslint.org/docs/rules/padded-blocks)) [#610](https://github.com/standard/standard/issues/610) [0%]\n- Enforce that Symbols are passed a description ([symbol-description](https://eslint.org/docs/rules/symbol-description)) [#630](https://github.com/standard/standard/issues/630) [0%]\n\n### Changed rules\n\n- Relax rule: allow TypeScript Triple-Slash Directives ([spaced-comment](https://eslint.org/docs/rules/spaced-comment)) [#660](https://github.com/standard/standard/issues/660)\n- Relax rule: allow Flow Comments ([spaced-comment](https://eslint.org/docs/rules/spaced-comment)) [#661](https://github.com/standard/standard/issues/661)\n\n## [8.6.0] - 2016-11-22\n\n- Update ESLint from 3.8.x to 3.10.x\n- 3 additional rules are now fixable with `standard --fix`\n\n## [8.5.0] - 2016-10-25\n\n- Update ESLint from 3.7.x to 3.8.x\n- 2 additional rules are now fixable with `standard --fix`\n\n## [8.4.0] - 2016-10-10\n\n- Update ESLint from 3.6.x to 3.7.x\n- 5 additional rules are now fixable with `standard --fix`\n- Use more conservative semver ranges [#654](https://github.com/standard/standard/issues/654)\n\n## [8.3.0] - 2016-09-29\n\nThe last release (`8.2.0`) added ES7 support. This release (`8.3.0`) adds ES8\nsupport ...just 3 days later!\n\nThis release should eliminate the need to specify `babel-eslint` as a custom\nparser, since `standard` can now parse ES8 (i.e. ES2017) syntax out of the box.\nThat means `async` and `await` will just work.\n\n- Support ES8 (i.e. ES2017) syntax.\n\n## [8.2.0] - 2016-09-26\n\nFor many users, this release should eliminate the need to specify `babel-eslint` as\na custom parser, since `standard` can now parse ES7 (i.e. ES2016) syntax out of the\nbox.\n\n- Support ES7 (i.e. ES2016) syntax.\n- Update ESLint from 3.5.x to 3.6.x\n- 4 additional rules are now fixable with `standard --fix`\n\n## [8.1.0] - 2016-09-17\n\n- Update ESLint from 3.3.x to 3.5.x\n- Around 10 additional rules are now fixable with `standard --fix`\n\n## [8.0.0] - 2016-08-23\n\nThis release contains a bunch of goodies, including new rules that catch potential\nprogrammer errors (i.e. bugs) and enforce additional code consistency.\n\nHowever, the best feature is surely the new `--fix` command line flag to\nautomatically fix problems. If you ever used\n[`standard-format`](https://www.npmjs.com/package/standard-format)\nand ran into issues with the lack of ES2015+ support, you'll be happy about\n`--fix`.\n\n`standard --fix` is built into `standard` v8.0.0 for maximum convenience, it\nsupports ES2015, and it's lightweight (no additional dependencies since it's part\nof ESLint which powers `standard`). Lots of problems are already fixable, and more\nare getting added with each ESLint release.\n\n`standard` also outputs a message (\"Run `standard --fix` to automatically fix\nsome problems.\") when it detects problems that can be fixed automatically so you\ncan save time!\n\nWith `standard` v8.0.0, we are also dropping support for Node.js versions prior to\nv4. Node.js 0.10 and 0.12 are in maintenance mode and will be unsupported at the\nend of 2016. Node.js 4 is the current LTS version. If you are using an older\nversion of Node.js, we recommend upgrading to at least Node.js 4 as soon as\npossible. If you are unable to upgrade to Node.js 4 or higher, then we recommend\ncontinuing to use `standard` v7.x until you are ready to upgrade Node.js.\n\n**Important:** We will not be updating the `standard` v7.x versions going forward.\nAll bug fixes and enhancements will land in `standard` v8.x.\n\nFull changelog below. Cheers!\n\n### New features\n\n- Upgrade to ESLint v3 (<https://eslint.org/docs/user-guide/migrating-to-3.0.0>) [#565](https://github.com/standard/standard/pull/565)\n  - **BREAKING:** Drop support for node &lt; 4 (this was a decision made by the ESLint team)\n- Expose ESLint's `--fix` command line flag [#540](https://github.com/standard/standard/issues/540) [standard-engine/#107](https://github.com/Flet/standard-engine/issues/107)\n  - Lightweight, no additional dependencies, fixes dozens of rules automatically\n\n### New rules\n\n_(Estimated % of affected standard users, based on test suite in parens)_\n\n- Enforce placing object properties on separate lines ([object-property-newline](https://eslint.org/docs/rules/object-property-newline)) [#524](https://github.com/standard/standard/issues/524) [2%]\n- Require block comments to be balanced ([spaced-comment \"balanced\"](https://eslint.org/docs/rules/spaced-comment)) [#572](https://github.com/standard/standard/issues/572) [2%]\n- Disallow constant expressions in conditions ([no-constant-condition](https://eslint.org/docs/rules/no-constant-condition)) [#563](https://github.com/standard/standard/issues/563) [1%]\n- Disallow renaming import, export, and destructured assignments to the same name ([no-useless-rename](https://eslint.org/docs/rules/no-useless-rename)) [#537](https://github.com/standard/standard/issues/537) [0%]\n- Disallow spacing between rest and spread operators and their expressions ([rest-spread-spacing](https://eslint.org/docs/rules/rest-spread-spacing)) [#567](https://github.com/standard/standard/issues/567) [0%]\n- Disallow the Unicode Byte Order Mark (BOM) ([unicode-bom](https://eslint.org/docs/rules/unicode-bom)) [#538](https://github.com/standard/standard/issues/538) [0%]\n- Disallow assignment to native objects/global variables ([no-global-assign](https://eslint.org/docs/rules/no-global-assign)) [#596](https://github.com/standard/standard/issues/596) [0%]\n- Disallow negating the left operand of relational operators ([no-unsafe-negation](https://eslint.org/docs/rules/no-unsafe-negation)) [#595](https://github.com/standard/standard/issues/595) [0%]\n- Disallow template literal placeholder syntax in regular strings ([no-template-curly-in-string](https://eslint.org/docs/rules/no-template-curly-in-string)) [#594](https://github.com/standard/standard/issues/594) [0%]\n- Disallow tabs in file ([no-tabs](https://eslint.org/docs/rules/no-tabs)) [#593](https://github.com/standard/standard/issues/593) [0%]\n\n### Changed rules\n\n- Relax rule: Allow template literal strings (backtick strings) to avoid escaping [#421](https://github.com/standard/standard/issues/421)\n- Relax rule: Do not enforce spacing around \\* in generator functions ([#564 (comment)](https://github.com/standard/standard/issues/564#issuecomment-234699126))\n  - This is a temporary workaround for `babel` users who use async generator functions.\n\n## [7.1.2] - 2016-06-03\n\n- Fix install errors for some users by updating eslint peer dependency\n\n## [7.1.1] - 2016-05-26\n\n- Add back full node 0.10, 0.12 support\n\n## [7.1.0] - 2016-05-16\n\n- Upgrade eslint to version 2.10.2.\n\n## [7.0.1] - 2016-05-04\n\n- Relax \"no-duplicate-imports\" rule to not include `export` so the following is allowed:\n\n```js\nimport { foo } from 'bar'\nexport * from 'bar'\n```\n\n## [7.0.0] - 2016-05-02\n\n### Changes\n\n- Upgrade eslint to version ~2.9.0\n- Remove \"rules\" configuration option [#367](https://github.com/standard/standard/issues/367) from `package.json` (Reasoning is [here](https://github.com/standard/standard/issues/399#issuecomment-180961891))\n\n### New rules\n\n_Estimated % of affected standard users, based on test suite_\n\n- Require camelCase ([camelcase](https://eslint.org/docs/rules/camelcase)) [4%]\n- Disallow unnecessary escape usage ([no-useless-escape](https://eslint.org/docs/rules/no-useless-escape)) [4% -- but, including many bugs]\n- Disallow duplicate imports ([no-duplicate-imports](https://eslint.org/docs/rules/no-duplicate-imports)) [0%]\n- Disallow unmodified conditions of loops ([no-unmodified-loop-condition](https://eslint.org/docs/2.0.0/rules/no-unmodified-loop-condition)) [0%]\n- Disallow whitespace before properties ([no-whitespace-before-property](https://eslint.org/docs/2.0.0/rules/no-whitespace-before-property)) [0%]\n- Disallow control flow statements in `finally` blocks ([no-unsafe-finally](https://eslint.org/docs/rules/no-unsafe-finally)) [0%]\n- Disallow unnecessary computed property keys on objects ([no-useless-computed-key](https://eslint.org/docs/rules/no-useless-computed-key)) [0%]\n- Validate spacing before closing bracket in JSX ([react/jsx-space-before-closing](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-space-before-closing.md)) [0%]\n\n### Removed rules\n\n- Require parens in arrow function arguments ([arrow-parens](https://eslint.org/docs/rules/arrow-parens))\n\n## [6.0.8] - 2016-03-07\n\n- Pin eslint to version ~2.2.0\n- Update eslint-plugin-react to version 4.0.0\n\n## [6.0.7] - 2016-02-18\n\n- Revert: Use install location of standard as eslint `cwd` (fixes [#429](https://github.com/standard/standard/issues/429))\n\n## [6.0.6] - 2016-02-18\n\n- Use eslint 2.1.0\n- Fix: Use install location of standard as eslint `cwd` (fixes [snazzy/#8](https://github.com/standard/snazzy/issues/8))\n\n## [6.0.5] - 2016-02-12\n\n- Use eslint 2.0.0 stable\n\n## [6.0.4] - 2016-02-07\n\n- Relax rule: Validate closing bracket location in JSX ([jsx-closing-bracket-location](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md))\n\n## [6.0.3] - 2016-02-06\n\n- Fix \"Error: Cannot find module 'eslint-config-standard-jsx'\" with npm 2 (node 0.10, 0.12, 4)\n\n## [6.0.2] - 2016-02-06\n\n- Internal change: Remove .eslintrc file, and use inline config\n\n## [6.0.1] - 2016-02-05\n\n- Internal change: Move .eslintrc file to root folder\n\n## [6.0.0] - 2016-02-05\n\nThe goal of this release is to make `standard` faster to install, and simpler to use.\n\n### Remove `standard-format` ([#340](https://github.com/standard/standard/issues/340)) ([#397](https://github.com/standard/standard/issues/397))\n\n- Eliminates 250 packages, and cuts install time in half!\n- For npm 2, install time goes from 20 secs —> 10 secs.\n- For npm 3, install time goes from 24 secs —> 12 secs.\n- To continue using `standard-format`, just install it separately: `npm install -g standard-format`\n\n### React-specific linting rules are removed ([#351](https://github.com/standard/standard/issues/351)) ([#367](https://github.com/standard/standard/issues/367)) ([eslint-config-standard-react/#13](https://github.com/standard/eslint-config-standard-react/pull/13))\n\n- JSX is still supported, and it continues to be checked for style.\n- There were only a few React-specific rules, but they made it extremely difficult for users of alternatives like `virtual-dom` or `deku`, and unecessarily tied `standard` to a single library.\n- JSX rules come from `eslint-config-standard-jsx`. The `eslint-config-standard-react` dependency was removed.\n\n### New Rules\n\n_The percentage (%) of users that rule changes will effect, based on real-world testing of the top ~400 npm packages is denoted in brackets._\n\n- Disallow `__dirname`/`__filename` string concatenation ([#403](https://github.com/standard/standard/issues/403)) ([no-path-concat](https://eslint.org/docs/2.0.0/rules/no-path-concat)) [5%]\n- Require parens in arrow function arguments ([#309](https://github.com/standard/standard/issues/309)) ([arrow-parens](https://eslint.org/docs/2.0.0/rules/arrow-parens.html)) [5%]\n- Ensure that `new Promise()` is instantiated with the parameter names\n  `resolve`, `reject` ([#282](https://github.com/standard/standard/issues/282)) ([promise/param-names](https://github.com/xjamundx/eslint-plugin-promise#param-names)) [1%]\n- Enforce Usage of Spacing in Template Strings ([template-curly-spacing](https://eslint.org/docs/2.0.0/rules/template-curly-spacing)) [1%]\n- Template strings are only allowed when necessary, i.e. template string features are being used (eslint got stricter: [eslint/eslint#5147](https://github.com/eslint/eslint/issues/5147)) [1%]\n- Better dead code detection after conditional statements (eslint got stricter) [1%]\n- Enforce spaces around `*` in `yield * something` ([#335](https://github.com/standard/standard/issues/335)) ([yield-star-spacing](https://eslint.org/docs/2.0.0/rules/yield-star-spacing)) [0%]\n- Disallow labels on loops/switch statements too (made rule stricter) ([no-labels](https://eslint.org/docs/2.0.0/rules/no-labels.html)) [0%]\n- Disallow unnecessary constructor ([no-useless-constructor](https://eslint.org/docs/2.0.0/rules/no-useless-constructor)) [0%]\n- Disallow empty destructuring patterns ([no-empty-pattern](https://eslint.org/docs/2.0.0/rules/no-empty-pattern)) [0%]\n- Disallow Symbol Constructor ([no-new-symbol](https://eslint.org/docs/2.0.0/rules/no-new-symbol)) [0%]\n- Disallow Self Assignment ([no-self-assign](https://eslint.org/docs/2.0.0/rules/no-self-assign)) [0%]\n\n### Removed Rules\n\n- `parseInt()` radix rule because ES5 fixes this issue ([#384](https://github.com/standard/standard/issues/384)) ([radix](https://eslint.org/docs/2.0.0/rules/radix.html)) [0%]\n\n### Expose eslint configuration via command line options and `package.json`\n\nFor power users, it might be easier to use one of these new hooks instead of forking\n`standard`, though that's still encouraged, too!\n\n- Set eslint \"plugins\" ([#386](https://github.com/standard/standard/issues/386))\n- Set eslint \"rules\" ([#367](https://github.com/standard/standard/issues/367))\n- Set eslint \"env\" ([#371](https://github.com/standard/standard/issues/371))\n\nTo set custom ESLint plugins, rules, or envs, use the command line `--plugin`, `--rules`, and `--env` flags.\n\nIn `package.json`, use the \"standard\" property:\n\n```json\n{\n  \"standard\": {\n    \"plugins\": [ \"my-plugin\" ]\n  }\n}\n```\n\n### Upgrade to ESLint v2\n\n- There may be slight behavior changes to existing rules. When possible, we've noted these in the \"New Rules\" and \"Removed Rules\" section.\n\n### Improve test suite\n\n- Rule changes can be tested against every package on npm. For sanity, this is limited to packages with at least 4 dependents. Around 400 packages.\n\n### Known Issues\n\n- Using prerelease eslint version (2.0.0-rc.0). There may be breaking changes before the stable release.\n- `no-return-assign` behavior changed with arrow functions ([eslint/eslint#5150](https://github.com/eslint/eslint/issues/5150))\n\n### Relevant diffs\n\n- standard ([v5.4.1...v6.0.0](https://github.com/standard/standard/compare/v5.4.1...v6.0.0))\n- eslint-config-standard ([v4.4.0...v5.0.0](https://github.com/standard/eslint-config-standard/compare/v4.4.0...v5.0.0))\n- eslint-config-standard-jsx ([v1.0.0](https://github.com/standard/eslint-config-standard-jsx/commit/47d5e248e2e078eb87619493999e3e74d4b7e70e))\n- standard-engine ([v2.2.4...v3.2.1](https://github.com/Flet/standard-engine/compare/v2.2.4...v3.2.1))\n\n## [5.4.1] - 2015-11-16\n\n[view diff](https://github.com/standard/standard/compare/v5.4.0...v5.4.1)\n\n### Fixed\n\n- Fix for `standard-engine` change. Fix error tagline.\n\n## [5.4.0] - 2015-11-16\n\n[view diff](https://github.com/standard/standard/compare/v5.3.1...v5.4.0)\n\n### Added\n\n- eslint-config-standard-react@1.2.0\n  - Disallow duplicate JSX properties\n\n## [5.3.1] - 2015-09-18\n\n[view diff](https://github.com/standard/standard/compare/v5.3.0...v5.3.1)\n\n### Changed\n\n- eslint-plugin-react@3.4.2\n\n## [5.3.0] - 2015-09-16\n\n[view diff](https://github.com/standard/standard/compare/v5.2.2...v5.3.0)\n\n### Changed\n\n- eslint-config-standard@4.4.0 ([history][eslint-config-standard])\n  - **New rule:** must have space after semicolon in for-loop ([commit](https://github.com/standard/eslint-config-standard/commit/6e5025eef8900f686e19b4a31836743d98323119))\n  - **New rule:** No default assignment with ternary operator ([commit](https://github.com/standard/eslint-config-standard/commit/0903c19ca6a8bc0c8625c41ca844ee69968bf948))\n  - **New rule:** Require spaces before keywords ([commit](https://github.com/standard/eslint-config-standard/commit/656ba93cda9cd4ab38e032649aafb795993d5176))\n- eslint-config-standard-react@1.1.0 ([history][eslint-config-standard-react])\n- eslint-plugin-react@3.4.0 ([history][eslint-plugin-react])\n- eslint-plugin-standard@1.3.1 ([history][eslint-plugin-standard])\n\n## [5.2.2] - 2015-09-08\n\n[view diff](https://github.com/standard/standard/compare/v5.2.1...v5.2.2)\n\n### Fixed\n\n- We have a changelog now, and you're reading it!\n- Minor README update\n- Removed direct dependency on `eslint` (its now moved to [standard-engine](https://github.com/flet/standard-engine))\n\n## [5.2.1] - 2015-09-03\n\n[view diff](https://github.com/standard/standard/compare/v5.2.0...v5.2.1)\n\n### Changed\n\n- eslint-config-standard@4.3.1 ([history][eslint-config-standard])\n  - **Revert rule**: Disallow unncessary concatenation of strings\n\n### Fixed\n\n- eslint-config-standard@4.3.1 ([history][eslint-config-standard])\n  - fix regression with ternary operator handling\n\n## [5.2.0] - 2015-09-03\n\n[view diff](https://github.com/standard/standard/compare/v5.1.1...v5.2.0)\n\n### Added\n\n- eslint-config-standard@4.3.0 ([history][eslint-config-standard])\n  - **New rule:** Disallow unncessary concatenation of strings\n  - **New rule:** Disallow duplicate name in class members\n  - **New rule:** enforce spaces inside of single line blocks\n  - **Re-add rule:** padded-blocks ([Closes #170](https://github.com/standard/standard/issues/170))\n\n### Changed\n\n- Bump `eslint` from 1.1.0 to 1.3.1 ([CHANGELOG][eslint])\n- eslint-plugin-standard@1.3.0 ([history][eslint-plugin-standard])\n  - A small change to make the plugin compatible with browserify which does not affect behavior.\n\n### Fixed\n\n- eslint-plugin-react@3.3.1 ([CHANGELOG][eslint-plugin-react])\n  - Fix object rest/spread handling.\n- Added white background to badge.svg to make it work with dark backgrounds ([Closes #234](https://github.com/standard/standard/issues/234))\n- Minor updates to README.md\n\n## [5.1.1] - 2015-08-28\n\n[view diff](https://github.com/standard/standard/compare/v5.1.0...v5.1.1)\n\n### Fixed\n\n- Update to RULES.md to remove a missing hyperlink\n- Add atom linter information to README.md\n- Fixed duplicated word in the tagline message on the CLI\n- Removed failing repository from tests (yoshuawuyts/initialize)\n\n## [5.1.0] - 2015-08-14\n\n[view diff](https://github.com/standard/standard/compare/v5.0.2...v5.1.0)\n\n### Fixed\n\n- eslint-config-standard@4.1.0 ([history][eslint-config-standard])\n  - Added rest/spread feature to `eslintrc.json` to fix [#226](https://github.com/standard/standard/issues/226) and [eslint-plugin-standard#3](https://github.com/xjamundx/eslint-plugin-standard/issues/3)\n- eslint-plugin-react@3.2.2 ([CHANGELOG][eslint-plugin-react])\n  - Fix crash when propTypes don't have any parent\n  - Fix jsx-no-literals reporting errors outside JSX\n\n### Changed\n\n- Bump eslint from 1.0.0 to 1.2.0 ([CHANGELOG][eslint])\n- Added more test repositories and disabled some that were failing\n- Update bikeshedding link on README.md\n\n## [5.0.2] - 2015-08-06\n\n[view diff](https://github.com/standard/standard/compare/v5.0.1...v5.0.2)\n\n### Changed\n\n- eslint-config-standard-react@1.0.4 ([history][eslint-config-standard-react])\n  - **Disable Rule:** react/wrap-multilines\n- Minor README updates\n\n## [5.0.1] - 2015-08-05\n\n[view diff](https://github.com/standard/standard/compare/v5.0.0...v5.0.1)\n\n## [5.0.0] - 2015-08-03\n\n[view diff](https://github.com/standard/standard/compare/v4.5.4...v5.0.0)\n\neslint v1.0.0 is released! eslint added some new rules that are nice, and lots of existing rules have subtle behavior changes designed to catch more errors.\n\nLet's talk about the next version of standard! We bumped the major version to v5.0.0 to pull in these improvements.\n\n#### New rules:\n- space before/after arrow functions (https://github.com/feross/eslint-config-standard/commit/cf31561306f102b0772de55cd410b20912e733ee)\n- indent switch \"case\" sections (https://github.com/feross/eslint-config-standard/commit/c6b10f68aa31e323933b14e04b50d8c1075ef28c)\n- don't reassign class variable names (https://github.com/feross/eslint-config-standard/commit/96c727fdf917f213e23320cc9971a0e2e5bf2b7b)\n- don't reassign const variables (https://github.com/feross/eslint-config-standard/commit/2dd1a09edcff6656731a394231e93850e55cc39d)\n- don't use .call() or .apply() to invoke a function unless it's necessary (https://github.com/feross/eslint-config-standard/commit/6fba6e34d9281a716bf7ffc9fc5d804f6403f505)\n\n#### Changed rules:\n- use `no-extra-parens` instead of the deprecated `no-wrap-func` rule (https://github.com/feross/eslint-config-standard/commit/fc8a076c156d949b0b6046281f2e5f5c91e7da62)\n- `indent` got stricter and catches errors in object literal indentation. 12/131 repos in the test suite started failing after this rule was improved.\n\n## [4.5.4] - 2015-07-13\n\n[view diff](https://github.com/standard/standard/compare/v4.5.3...v4.5.4)\n\n## [4.5.3] - 2015-07-10\n\n[view diff](https://github.com/standard/standard/compare/v4.5.2...v4.5.3)\n\n## [4.5.2] - 2015-07-02\n\n[view diff](https://github.com/standard/standard/compare/v4.5.1...v4.5.2)\n\n## [4.5.1] - 2015-06-30\n\n[view diff](https://github.com/standard/standard/compare/v4.5.0...v4.5.1)\n\n## [4.5.0] - 2015-06-30\n\n[view diff](https://github.com/standard/standard/compare/v4.4.1...v4.5.0)\n\n## [4.4.1] - 2015-06-29\n\n[view diff](https://github.com/standard/standard/compare/v4.4.0...v4.4.1)\n\n## [4.4.0] - 2015-06-27\n\n[view diff](https://github.com/standard/standard/compare/v4.3.3...v4.4.0)\n\n## [4.3.3] - 2015-06-26\n\n[view diff](https://github.com/standard/standard/compare/v4.3.2...v4.3.3)\n\n## [4.3.2] - 2015-06-23\n\n[view diff](https://github.com/standard/standard/compare/v4.3.1...v4.3.2)\n\n## [4.3.1] - 2015-06-18\n\n[view diff](https://github.com/standard/standard/compare/v4.3.0...v4.3.1)\n\n## [4.3.0] - 2015-06-16\n\n[view diff](https://github.com/standard/standard/compare/v4.2.1...v4.3.0)\n\n## [4.2.1] - 2015-06-12\n\n[view diff](https://github.com/standard/standard/compare/v4.2.0...v4.2.1)\n\n## [4.2.0] - 2015-06-11\n\n[view diff](https://github.com/standard/standard/compare/v4.1.1...v4.2.0)\n\n## [4.1.1] - 2015-06-11\n\n[view diff](https://github.com/standard/standard/compare/v4.1.0...v4.1.1)\n\n## [4.1.0] - 2015-06-10\n\n[view diff](https://github.com/standard/standard/compare/v4.0.1...v4.1.0)\n\n## [4.0.1] - 2015-06-01\n\n[view diff](https://github.com/standard/standard/compare/v4.0.0...v4.0.1)\n\n## 4.0.0 - 2015-05-30\n\n[view diff](https://github.com/standard/standard/compare/v3.9.0...v4.0.0)\n\n[unreleased]: https://github.com/standard/standard/compare/v16.0.3...HEAD\n\n[16.0.3]: https://github.com/standard/standard/compare/v16.0.2...v16.0.3\n\n[16.0.2]: https://github.com/standard/standard/compare/v16.0.1...v16.0.2\n\n[16.0.1]: https://github.com/standard/standard/compare/v16.0.0...v16.0.1\n\n[16.0.0]: https://github.com/standard/standard/compare/v15.0.1...v16.0.0\n\n[15.0.1]: https://github.com/standard/standard/compare/v15.0.0...v15.0.1\n\n[15.0.0]: https://github.com/standard/standard/compare/v14.3.4...v15.0.0\n\n[14.3.4]: https://github.com/standard/standard/compare/v14.3.3...v14.3.4\n\n[14.3.3]: https://github.com/standard/standard/compare/v14.3.2...v14.3.3\n\n[14.3.2]: https://github.com/standard/standard/compare/v14.3.1...v14.3.2\n\n[14.3.1]: https://github.com/standard/standard/compare/v14.3.0...v14.3.1\n\n[14.3.0]: https://github.com/standard/standard/compare/v14.2.0...v14.3.0\n\n[14.2.0]: https://github.com/standard/standard/compare/v14.1.0...v14.2.0\n\n[14.1.0]: https://github.com/standard/standard/compare/v14.0.2...v14.1.0\n\n[14.0.2]: https://github.com/standard/standard/compare/v14.0.1...v14.0.2\n\n[14.0.1]: https://github.com/standard/standard/compare/v14.0.0...v14.0.1\n\n[14.0.0]: https://github.com/standard/standard/compare/v13.1.0...v14.0.0\n\n[13.1.0]: https://github.com/standard/standard/compare/v13.0.2...v13.1.0\n\n[13.0.2]: https://github.com/standard/standard/compare/v13.0.1...v13.0.2\n\n[13.0.1]: https://github.com/standard/standard/compare/v13.0.0...v13.0.1\n\n[13.0.0]: https://github.com/standard/standard/compare/v12.0.1...v13.0.0\n\n[12.0.1]: https://github.com/standard/standard/compare/v12.0.0...v12.0.1\n\n[12.0.0]: https://github.com/standard/standard/compare/v11.0.0...v12.0.0\n\n[11.0.0]: https://github.com/standard/standard/compare/v10.0.3...v11.0.0\n\n[10.0.3]: https://github.com/standard/standard/compare/v10.0.2...v10.0.3\n\n[10.0.2]: https://github.com/standard/standard/compare/v10.0.1...v10.0.2\n\n[10.0.1]: https://github.com/standard/standard/compare/v10.0.0...v10.0.1\n\n[10.0.0]: https://github.com/standard/standard/compare/v9.0.2...v10.0.0\n\n[9.0.2]: https://github.com/standard/standard/compare/v9.0.1...v9.0.2\n\n[9.0.1]: https://github.com/standard/standard/compare/v9.0.0...v9.0.1\n\n[9.0.0]: https://github.com/standard/standard/compare/v8.6.0...v9.0.0\n\n[8.6.0]: https://github.com/standard/standard/compare/v8.5.0...v8.6.0\n\n[8.5.0]: https://github.com/standard/standard/compare/v8.4.0...v8.5.0\n\n[8.4.0]: https://github.com/standard/standard/compare/v8.3.0...v8.4.0\n\n[8.3.0]: https://github.com/standard/standard/compare/v8.2.0...v8.3.0\n\n[8.2.0]: https://github.com/standard/standard/compare/v8.1.0...v8.2.0\n\n[8.1.0]: https://github.com/standard/standard/compare/v8.0.0...v8.1.0\n\n[8.0.0]: https://github.com/standard/standard/compare/v7.1.2...v8.0.0\n\n[7.1.2]: https://github.com/standard/standard/compare/v7.1.1...v7.1.2\n\n[7.1.1]: https://github.com/standard/standard/compare/v7.1.0...v7.1.1\n\n[7.1.0]: https://github.com/standard/standard/compare/v7.0.1...v7.1.0\n\n[7.0.1]: https://github.com/standard/standard/compare/v7.0.0...v7.0.1\n\n[7.0.0]: https://github.com/standard/standard/compare/v6.0.8...v7.0.0\n\n[6.0.8]: https://github.com/standard/standard/compare/v6.0.7...v6.0.8\n\n[6.0.7]: https://github.com/standard/standard/compare/v6.0.6...v6.0.7\n\n[6.0.6]: https://github.com/standard/standard/compare/v6.0.5...v6.0.6\n\n[6.0.5]: https://github.com/standard/standard/compare/v6.0.4...v6.0.5\n\n[6.0.4]: https://github.com/standard/standard/compare/v6.0.3...v6.0.4\n\n[6.0.3]: https://github.com/standard/standard/compare/v6.0.2...v6.0.3\n\n[6.0.2]: https://github.com/standard/standard/compare/v6.0.1...v6.0.2\n\n[6.0.1]: https://github.com/standard/standard/compare/v6.0.0...v6.0.1\n\n[6.0.0]: https://github.com/standard/standard/compare/v5.4.1...v6.0.0\n\n[5.4.1]: https://github.com/standard/standard/compare/v5.4.0...v5.4.1\n\n[5.4.0]: https://github.com/standard/standard/compare/v5.3.1...v5.4.0\n\n[5.3.1]: https://github.com/standard/standard/compare/v5.3.0...v5.3.1\n\n[5.3.0]: https://github.com/standard/standard/compare/v5.2.2...v5.3.0\n\n[5.2.2]: https://github.com/standard/standard/compare/v5.2.1...v5.2.2\n\n[5.2.1]: https://github.com/standard/standard/compare/v5.2.0...v5.2.1\n\n[5.2.0]: https://github.com/standard/standard/compare/v5.1.1...v5.2.0\n\n[5.1.1]: https://github.com/standard/standard/compare/v5.1.0...v5.1.1\n\n[5.1.0]: https://github.com/standard/standard/compare/v5.0.2...v5.1.0\n\n[5.0.2]: https://github.com/standard/standard/compare/v5.0.1...v5.0.2\n\n[5.0.1]: https://github.com/standard/standard/compare/v5.0.0...v5.0.1\n\n[5.0.0]: https://github.com/standard/standard/compare/v4.5.4...v5.0.0\n\n[4.5.4]: https://github.com/standard/standard/compare/v4.5.3...v4.5.4\n\n[4.5.3]: https://github.com/standard/standard/compare/v4.5.2...v4.5.3\n\n[4.5.2]: https://github.com/standard/standard/compare/v4.5.1...v4.5.2\n\n[4.5.1]: https://github.com/standard/standard/compare/v4.5.0...v4.5.1\n\n[4.5.0]: https://github.com/standard/standard/compare/v4.4.1...v4.5.0\n\n[4.4.1]: https://github.com/standard/standard/compare/v4.4.0...v4.4.1\n\n[4.4.0]: https://github.com/standard/standard/compare/v4.3.3...v4.4.0\n\n[4.3.3]: https://github.com/standard/standard/compare/v4.3.2...v4.3.3\n\n[4.3.2]: https://github.com/standard/standard/compare/v4.3.1...v4.3.2\n\n[4.3.1]: https://github.com/standard/standard/compare/v4.3.0...v4.3.1\n\n[4.3.0]: https://github.com/standard/standard/compare/v4.2.1...v4.3.0\n\n[4.2.1]: https://github.com/standard/standard/compare/v4.2.0...v4.2.1\n\n[4.2.0]: https://github.com/standard/standard/compare/v4.1.1...v4.2.0\n\n[4.1.1]: https://github.com/standard/standard/compare/v4.1.0...v4.1.1\n\n[4.1.0]: https://github.com/standard/standard/compare/v4.0.1...v4.1.0\n\n[4.0.1]: https://github.com/standard/standard/compare/v4.0.0...v4.0.1\n\n[eslint]: https://github.com/eslint/eslint/blob/master/CHANGELOG.md\n\n[eslint-config-standard]: https://github.com/standard/eslint-config-standard/commits/master\n\n[eslint-config-standard-react]: https://github.com/standard/eslint-config-standard-react/commits/master\n\n[eslint-plugin-react]: https://github.com/yannickcr/eslint-plugin-react/blob/master/CHANGELOG.md\n\n[eslint-plugin-standard]: https://github.com/xjamundx/eslint-plugin-standard/commits/master\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.06,
          "content": "The MIT License (MIT)\n\nCopyright (c) Feross Aboukhadijeh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 35.9,
          "content": "<h1 align=\"center\">\n  <a href=\"https://standardjs.com\"><img src=\"https://cdn.rawgit.com/standard/standard/master/sticker.svg\" alt=\"Standard - JavaScript Style Guide\" width=\"200\"></a>\n  <br>\n  JavaScript Standard Style\n  <br>\n  <br>\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://discord.gg/ZegqCBr\"><img src=\"https://img.shields.io/discord/612704110008991783?logo=discord&logoColor=white&label=Discord&color=5865F2\" alt=\"discord\"></a>\n  <a href=\"https://github.com/standard/standard/actions/workflows/test-external.yml\"><img src=\"https://github.com/standard/standard/actions/workflows/test-external.yml/badge.svg?branch=master\" alt=\"External tests\"></a>\n  <a href=\"https://github.com/standard/standard/actions/workflows/test-internal.yml\"><img src=\"https://github.com/standard/standard/actions/workflows/test-internal.yml/badge.svg?branch=master\" alt=\"Internal tests\"></a>\n  <a href=\"https://github.com/standard/standard/actions?query=workflow%3A%22Old+test%22\"><img src=\"https://github.com/standard/standard/workflows/Old%20test/badge.svg\" alt=\"status badge old Node test\"></a>\n  <a href=\"https://www.npmjs.com/package/standard\"><img src=\"https://img.shields.io/npm/v/standard.svg\" alt=\"npm version\"></a>\n  <a href=\"https://www.npmjs.com/package/eslint-config-standard\"><img src=\"https://img.shields.io/npm/dm/eslint-config-standard.svg\" alt=\"npm downloads\"></a>\n  <a href=\"https://standardjs.com\"><img src=\"https://img.shields.io/badge/code_style-standard-brightgreen.svg\" alt=\"Standard - JavaScript Style Guide\"></a>\n</p>\n\n<h5 align=\"center\">\n  Sponsored by&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://socket.dev\"><img src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/socket.png\" alt=\"Socket – Supply Chain Dependency Security for JavaScript and npm\" height=50 valign=\"middle\"></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://wormhole.app/?utm_medium=sponsorship&utm_source=standard&utm_campaign=feross\"><img src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/wormhole.png\" alt=\"Wormhole\" height=50 valign=\"middle\"></a>\n</h5>\n\n<p align=\"center\">\n  <a href=\"/docs/README-en.md\">English</a> •\n  <a href=\"/docs/README-esla.md\">Español (Latinoamérica)</a> •\n  <a href=\"/docs/README-fr.md\">Français</a> •\n  <a href=\"/docs/README-id.md\">Bahasa Indonesia</a> •\n  <a href=\"/docs/README-iteu.md\">Italiano (Italian)</a> •\n  <a href=\"/docs/README-ja.md\">日本語 (Japanese)</a> •\n  <a href=\"/docs/README-kokr.md\">한국어 (Korean)</a> •\n  <a href=\"/docs/README-ptbr.md\">Português (Brasil)</a> •\n  <a href=\"/docs/README-zhcn.md\">简体中文 (Simplified Chinese)</a> •\n  <a href=\"/docs/README-zhtw.md\">繁體中文 (Taiwanese Mandarin)</a>\n</p>\n\n## JavaScript style guide, linter, and formatter\n\nThis module saves you (and others!) time in three ways:\n\n- **No configuration.** The easiest way to enforce code quality in your\n  project. No decisions to make. No `.eslintrc` files to manage. It just works.\n- **Automatically format code.** Just run `standard --fix` and say goodbye to\n  messy or inconsistent code.\n- **Catch style issues & programmer errors early.** Save precious code review\n  time by eliminating back-and-forth between reviewer & contributor.\n\nGive it a try by running `npx standard --fix` right now!\n\n## Table of Contents\n\n- Quick start\n  - [Install](#install)\n  - [Usage](#usage)\n  - [What you might do if you're clever](#what-you-might-do-if-youre-clever)\n- FAQ\n  - [Why should I use JavaScript Standard Style?](#why-should-i-use-javascript-standard-style)\n  - [Who uses JavaScript Standard Style?](#who-uses-javascript-standard-style)\n  - [Are there text editor plugins?](#are-there-text-editor-plugins)\n  - [Is there a readme badge?](#is-there-a-readme-badge)\n  - [I disagree with rule X, can you change it?](#i-disagree-with-rule-x-can-you-change-it)\n  - [But this isn't a real web standard!](#but-this-isnt-a-real-web-standard)\n  - [Is there an automatic formatter?](#is-there-an-automatic-formatter)\n  - [How do I ignore files?](#how-do-i-ignore-files)\n  - [How do I disable a rule?](#how-do-i-disable-a-rule)\n  - [I use a library that pollutes the global namespace. How do I prevent \"variable is not defined\" errors?](#i-use-a-library-that-pollutes-the-global-namespace-how-do-i-prevent-variable-is-not-defined-errors)\n  - [How do I use experimental JavaScript (ES Next) features?](#how-do-i-use-experimental-javascript-es-next-features)\n  - [Can I use a JavaScript language variant, like Flow or TypeScript?](#can-i-use-a-javascript-language-variant-like-flow-or-typescript)\n  - [What about Mocha, Jest, Jasmine, QUnit, etc?](#what-about-mocha-jest-jasmine-qunit-etc)\n  - [What about Web Workers and Service Workers?](#what-about-web-workers-and-service-workers)\n  - [What is the difference between warnings and errors?](#what-is-the-difference-between-warnings-and-errors)\n  - [Can I check code inside of Markdown or HTML files?](#can-i-check-code-inside-of-markdown-or-html-files)\n  - [Is there a Git `pre-commit` hook?](#is-there-a-git-pre-commit-hook)\n  - [How do I make the output all colorful and pretty?](#how-do-i-make-the-output-all-colorful-and-pretty)\n  - [Is there a Node.js API?](#is-there-a-nodejs-api)\n  - [How do I contribute to StandardJS?](#how-do-i-contribute-to-standardjs)\n\n## Install\n\nThe easiest way to use JavaScript Standard Style is to install it globally as a\nNode command line program. Run the following command in Terminal:\n\n```bash\n$ npm install standard --global\n```\n\nOr, you can install `standard` locally, for use in a single project:\n\n```bash\n$ npm install standard --save-dev\n```\n\n*Note: To run the preceding commands, [Node.js](http://nodejs.org) and [npm](https://npmjs.com) must be installed.*\n\n## Usage\n\nAfter you've installed `standard`, you should be able to use the `standard` program. The\nsimplest use case would be checking the style of all JavaScript files in the\ncurrent working directory:\n\n```bash\n$ standard\nError: Use JavaScript Standard Style\n  lib/torrent.js:950:11: Expected '===' and instead saw '=='.\n```\n\nIf you've installed `standard` locally, run with `npx` instead:\n\n```bash\n$ npx standard\n```\n\nYou can optionally pass in a directory (or directories) using the glob pattern. Be\nsure to quote paths containing glob patterns so that they are expanded by\n`standard` instead of your shell:\n\n```bash\n$ standard \"src/util/**/*.js\" \"test/**/*.js\"\n```\n\n**Note:** by default `standard` will look for all files matching the patterns:\n`**/*.js`, `**/*.jsx`.\n\n## What you might do if you're clever\n\n1. Add it to `package.json`\n\n   ```json\n   {\n     \"name\": \"my-cool-package\",\n     \"devDependencies\": {\n       \"standard\": \"*\"\n     },\n     \"scripts\": {\n       \"test\": \"standard && node my-tests.js\"\n     }\n   }\n   ```\n\n2. Style is checked automatically when you run `npm test`\n\n   ```bash\n   $ npm test\n   Error: Use JavaScript Standard Style\n     lib/torrent.js:950:11: Expected '===' and instead saw '=='.\n   ```\n\n3. Never give style feedback on a pull request again!\n\n## Why should I use JavaScript Standard Style?\n\nThe beauty of JavaScript Standard Style is that it's simple. No one wants to\nmaintain multiple hundred-line style configuration files for every module/project\nthey work on. Enough of this madness!\n\nThis module saves you (and others!) time in three ways:\n\n- **No configuration.** The easiest way to enforce consistent style in your\n  project. Just drop it in.\n- **Automatically format code.** Just run `standard --fix` and say goodbye to\n  messy or inconsistent code.\n- **Catch style issues & programmer errors early.** Save precious code review\n  time by eliminating back-and-forth between reviewer & contributor.\n\nAdopting `standard` style means ranking the importance of code clarity and\ncommunity conventions higher than personal style. This might not make sense for\n100% of projects and development cultures, however open source can be a hostile\nplace for newbies. Setting up clear, automated contributor expectations makes a\nproject healthier.\n\nFor more info, see the conference talk [\"Write Perfect Code with Standard and\nESLint\"](https://www.youtube.com/watch?v=kuHfMw8j4xk). In this talk, you'll learn\nabout linting, when to use `standard` versus `eslint`, and how `prettier` compares\nto `standard`.\n\n## Who uses JavaScript Standard Style?\n\n[<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/nodejs.png>](https://nodejs.org) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/npm.png>](https://www.npmjs.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/github.png>](https://github.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/wormhole.png>](https://wormhole.app) |\n|---|---|---|---|\n\n[<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/express.png>](http://expressjs.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/electron.png>](http://electron.atom.io) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/nuxtjs.png>](https://nuxtjs.org/) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/elastic.png>](https://www.elastic.co) |\n|---|---|---|---|\n\n| [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/mongodb.jpg>](https://www.mongodb.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/zendesk.png>](https://www.zendesk.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/brave.png>](https://www.brave.com) | [<img width=190 src=https://assets.vercel.com/image/upload/v1621541666/front/assets/logotype-black-on-white.png>](https://vercel.com) |\n|---|---|---|---|\n\n| [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/socket.png>](https://socket.dev) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/nearform.png>](http://www.nearform.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/typeform.png>](https://www.typeform.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/gov-uk.png>](https://gds.blog.gov.uk) |\n|---|---|---|---|\n\n| [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/heroku.png>](https://www.heroku.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/saucelabs.png>](https://saucelabs.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/automattic.png>](https://automattic.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/godaddy.png>](https://www.godaddy.com) |\n|---|---|---|---|\n\n| [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/webtorrent.png>](https://webtorrent.io) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/ipfs.png>](https://ipfs.io) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/dat.png>](https://datproject.org) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/bitcoinjs.png>](https://bitcoinjs.org) |\n|---|---|---|---|\n\n| [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/voltra.png>](https://voltra.co) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/treasuredata.png>](https://www.treasuredata.com) | [<img alt=\"Free MIDIs, MIDI file downloads\" width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/bitmidi.png>](https://bitmidi.com) | [<img width=190 alt=\"College essays, AP notes\" src=https://cdn.rawgit.com/standard/standard/master/docs/logos/studynotes.jpg>](https://www.apstudynotes.org) |\n|---|---|---|---|\n\n| [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/optiopay.png>](https://www.optiopay.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/jaguar-landrover.png>](https://www.jlrtechincubator.com/jlrti/) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/bustle.jpg>](https://www.bustle.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/zentrick.png>](https://www.zentrick.com) |\n|---|---|---|---|\n\n| [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/greenkeeper.png>](https://greenkeeper.io) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/karma.png>](https://karma-runner.github.io) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/taser.png>](https://www.taser.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/neo4j.png>](https://www.neo4j.com) |\n|---|---|---|---|\n\n| [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/rentograph.png>](https://rentograph.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/eaze.png>](https://www.eaze.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/ctrl-alt-deseat.png>](https://www.ctrlaltdeseat.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/clevertech.png>](https://clevertech.biz) |\n|---|---|---|---|\n\n| [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/aragon.png>](https://aragon.org) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/flowsent.png>](https://www.flowsent.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/puma-browser.png>](https://www.pumabrowser.com/) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/webstorm.png>](https://www.jetbrains.com/webstorm/) |\n|---|---|---|---|\n\n| [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/fastify.png>](https://www.fastify.io) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/scuttlebutt.png>](https://www.scuttlebutt.nz) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/solid.png>](https://solid.inrupt.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/grab.png>](https://www.grab.com) |\n|---|---|---|---|\n\n| [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/jublia.png>](https://jublia.com/) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/atom.png>](https://atom.io) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/peek.png>](https://www.peek.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/dotenv.png>](https://www.dotenv.org) |\n|---|---|---|---|\n\n| [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/nodesource.png>](https://nodesource.com) | [<img width=190 src=https://cdn.rawgit.com/standard/standard/master/docs/logos/searchapi.png>](https://www.searchapi.io/) | Your Logo Here |  |\n|---|---|---|---|\n\n\nIn addition to companies, many community members use `standard` on packages that\nare [too numerous](https://raw.githubusercontent.com/standard/standard-packages/master/all.json)\nto list here.\n\n`standard` is also the top-starred linter in GitHub's\n[Clean Code Linter](https://github.com/showcases/clean-code-linters) showcase.\n\n## Are there text editor plugins?\n\nFirst, install `standard`. Then, install the appropriate plugin for your editor:\n\n### Sublime Text\n\nUsing **[Package Control][sublime-1]**, install **[SublimeLinter][sublime-2]** and\n**[SublimeLinter-contrib-standard][sublime-3]**.\n\nFor automatic formatting on save, install **[StandardFormat][sublime-4]**.\n\n[sublime-1]: https://packagecontrol.io/\n[sublime-2]: http://www.sublimelinter.com/en/latest/\n[sublime-3]: https://packagecontrol.io/packages/SublimeLinter-contrib-standard\n[sublime-4]: https://packagecontrol.io/packages/StandardFormat\n\n### Atom\n\nInstall **[linter-js-standard][atom-1]**.\n\nAlternatively, you can install **[linter-js-standard-engine][atom-4]**. Instead of\nbundling a version of `standard` it will automatically use the version installed\nin your current project. It will also work out of the box with other linters based\non **[standard-engine][atom-5]**.\n\nFor automatic formatting, install **[standard-formatter][atom-2]**. For snippets,\ninstall **[standardjs-snippets][atom-3]**.\n\n[atom-1]: https://atom.io/packages/linter-js-standard\n[atom-2]: https://atom.io/packages/standard-formatter\n[atom-3]: https://atom.io/packages/standardjs-snippets\n[atom-4]: https://atom.io/packages/linter-js-standard-engine\n[atom-5]: https://github.com/standard/standard-engine\n\n### Visual Studio Code\n\nInstall **[vscode-standard][vscode-1]**. (Includes support for automatic formatting.)\n\nFor JS snippets, install: **[vscode-standardjs-snippets][vscode-2]**. For React snippets, install **[vscode-react-standard][vscode-3]**.\n\n[vscode-1]: https://marketplace.visualstudio.com/items?itemName=standard.vscode-standard\n[vscode-2]: https://marketplace.visualstudio.com/items?itemName=capaj.vscode-standardjs-snippets\n[vscode-3]: https://marketplace.visualstudio.com/items?itemName=TimonVS.ReactSnippetsStandard\n\n### Vim\n\nInstall **[ale][vim-1]**. And add these lines to your `.vimrc` file.\n\n```vim\nlet g:ale_linters = {\n\\   'javascript': ['standard'],\n\\}\nlet g:ale_fixers = {'javascript': ['standard']}\n```\n\nThis sets standard as your only linter and fixer for javascript files and so prevents conflicts with eslint. For linting and automatic fixing on save, add these lines to `.vimrc`:\n```vim\nlet g:ale_lint_on_save = 1\nlet g:ale_fix_on_save = 1\n```\n\n\nAlternative plugins to consider include [neomake][vim-2] and [syntastic][vim-3], both of which have built-in support for `standard` (though configuration may be necessary).\n\n[vim-1]: https://github.com/w0rp/ale\n[vim-2]: https://github.com/neomake/neomake\n[vim-3]: https://github.com/vim-syntastic/syntastic\n\n### Emacs\n\nInstall **[Flycheck][emacs-1]** and check out the **[manual][emacs-2]** to learn\nhow to enable it in your projects.\n\n[emacs-1]: http://www.flycheck.org\n[emacs-2]: http://www.flycheck.org/en/latest/user/installation.html\n\n### Brackets\n\nSearch the extension registry for **[\"Standard Code Style\"][brackets-1]** and click \"Install\".\n\n[brackets-1]: https://github.com/ishamf/brackets-standard/\n\n### WebStorm (PhpStorm, IntelliJ, RubyMine, JetBrains, etc.)\n\nWebStorm [recently announced native support](https://blog.jetbrains.com/webstorm/2017/01/webstorm-2017-1-eap-171-2272/)\nfor `standard` directly in the IDE.\n\nIf you still prefer to configure `standard` manually, [follow this guide][webstorm-1]. This applies to all JetBrains products, including PhpStorm, IntelliJ, RubyMine, etc.\n\n[webstorm-1]: docs/webstorm.md\n\n## Is there a readme badge?\n\nYes! If you use `standard` in your project, you can include one of these badges in\nyour readme to let people know that your code is using the standard style.\n\n[![JavaScript Style Guide](https://cdn.rawgit.com/standard/standard/master/badge.svg)](https://github.com/standard/standard)\n\n```md\n[![JavaScript Style Guide](https://cdn.rawgit.com/standard/standard/master/badge.svg)](https://github.com/standard/standard)\n```\n\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n\n```md\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n```\n\n## I disagree with rule X, can you change it?\n\nNo. The whole point of `standard` is to save you time by avoiding\n[bikeshedding][bikeshedding] about code style. There are lots of debates online about\ntabs vs. spaces, etc. that will never be resolved. These debates just distract from\ngetting stuff done. At the end of the day you have to 'just pick something', and\nthat's the whole philosophy of `standard` -- its a bunch of sensible 'just pick\nsomething' opinions. Hopefully, users see the value in that over defending their\nown opinions.\n\nThere are a couple of similar packages for anyone who does not want to completely accept `standard`:\n- [semistandard](https://github.com/standard/semistandard) - standard, with semicolons\n- [standardx](https://github.com/standard/standardx) - standard, with custom tweaks\n\nIf you really want to configure hundreds of ESLint rules individually, you can\nalways use `eslint` directly with\n[eslint-config-standard](https://github.com/standard/eslint-config-standard) to\nlayer your changes on top.\n[`standard-eject`](https://github.com/josephfrazier/standard-eject) can help\nyou migrate from `standard` to `eslint` and `eslint-config-standard`.\n\nPro tip: Just use `standard` and move on. There are actual real problems that you\ncould spend your time solving! :P\n\n[bikeshedding]: https://docs.freebsd.org/en/books/faq/#bikeshed-painting\n\n## But this isn't a real web standard!\n\nOf course it's not! The style laid out here is not affiliated with any official web\nstandards groups, which is why this repo is called `standard/standard` and not\n`ECMA/standard`.\n\nThe word \"standard\" has more meanings than just \"web standard\" :-) For example:\n\n- This module helps hold our code to a high *standard of quality*.\n- This module ensures that new contributors follow some basic *style standards*.\n\n## Is there an automatic formatter?\n\nYes! You can use `standard --fix` to fix most issues automatically.\n\n`standard --fix` is built into `standard` for maximum convenience. Most problems\nare fixable, but some errors (like forgetting to handle errors) must be fixed\nmanually.\n\nTo save you time, `standard` outputs the message \"`Run standard --fix to\nautomatically fix some problems`\" when it detects problems that can be fixed\nautomatically.\n\n## How do I ignore files?\n\nCertain paths (`node_modules/`, `coverage/`, `vendor/`, `*.min.js`,\nand files/folders that begin with `.` like `.git/`) are automatically ignored.\n\nPaths in a project's root `.gitignore` file are also automatically ignored.\n\nSometimes you need to ignore additional folders or specific minified files. To do\nthat, add a `standard.ignore` property to `package.json`:\n\n```json\n\"standard\": {\n  \"ignore\": [\n    \"**/out/\",\n    \"/lib/select2/\",\n    \"/lib/ckeditor/\",\n    \"tmp.js\"\n  ]\n}\n```\n\n## How do I disable a rule?\n\nIn rare cases, you'll need to break a rule and hide the error generated by\n`standard`.\n\nJavaScript Standard Style uses [ESLint](http://eslint.org/) under-the-hood and\nyou can hide errors as you normally would if you used ESLint directly.\n\nDisable **all rules** on a specific line:\n\n```js\nfile = 'I know what I am doing' // eslint-disable-line\n```\n\nOr, disable **only** the `\"no-use-before-define\"` rule:\n\n```js\nfile = 'I know what I am doing' // eslint-disable-line no-use-before-define\n```\n\nOr, disable the `\"no-use-before-define\"` rule for **multiple lines**:\n\n```js\n/* eslint-disable no-use-before-define */\nconsole.log('offending code goes here...')\nconsole.log('offending code goes here...')\nconsole.log('offending code goes here...')\n/* eslint-enable no-use-before-define */\n```\n\n## I use a library that pollutes the global namespace. How do I prevent \"variable is not defined\" errors?\n\nSome packages (e.g. `mocha`) put their functions (e.g. `describe`, `it`) on the\nglobal object (poor form!). Since these functions are not defined or `require`'d\nanywhere in your code, `standard` will warn that you're using a variable that is\nnot defined (usually, this rule is really useful for catching typos!). But we want\nto disable it for these global variables.\n\nTo let `standard` (as well as humans reading your code) know that certain variables\nare global in your code, add this to the top of your file:\n\n```js\n/* global myVar1, myVar2 */\n```\n\nIf you have hundreds of files, it may be desirable to avoid adding comments to\nevery file. In this case, run:\n\n```bash\n$ standard --global myVar1 --global myVar2\n```\n\nOr, add this to `package.json`:\n\n```json\n{\n  \"standard\": {\n    \"globals\": [ \"myVar1\", \"myVar2\" ]\n  }\n}\n```\n\n*Note: `global` and `globals` are equivalent.*\n\n## How do I use experimental JavaScript (ES Next) features?\n\n`standard` supports the latest ECMAScript features, ES8 (ES2017), including\nlanguage feature proposals that are in \"Stage 4\" of the proposal process.\n\nTo support experimental language features, `standard` supports specifying a\ncustom JavaScript parser. Before using a custom parser, consider whether the added\ncomplexity is worth it.\n\nTo use a custom parser, first install it from npm:\n\n```bash\nnpm install @babel/eslint-parser --save-dev\n```\n\nThen run:\n\n```bash\n$ standard --parser @babel/eslint-parser\n```\n\nOr, add this to `package.json`:\n\n```json\n{\n  \"standard\": {\n    \"parser\": \"@babel/eslint-parser\"\n  }\n}\n```\n\n## Can I use a JavaScript language variant, like Flow or TypeScript?\n\n`standard` supports the latest ECMAScript features. However, Flow and TypeScript add new\nsyntax to the language, so they are not supported out-of-the-box.\n\nFor TypeScript, an official variant `ts-standard` is supported and maintained that provides a very\nsimilar experience to `standard`.\n\nFor other JavaScript language variants, `standard` supports specifying a custom JavaScript\nparser as well as an ESLint plugin to handle the changed syntax. Before using a JavaScript\nlanguage variant, consider whether the added complexity is worth it.\n\n### TypeScript\n\n[`ts-standard`](https://github.com/standard/ts-standard) is the officially supported variant for\nTypeScript. `ts-standard` supports all the same rules and options as `standard` and includes\nadditional TypeScript specific rules. `ts-standard` will even lint regular `javascript` files\nby setting the configuration in `tsconfig.json`.\n\n```bash\nnpm install ts-standard --save-dev\n```\n\nThen run (where `tsconfig.json` is located in the working directory):\n\n```bash\n$ ts-standard\n```\n\nOr, add this to `package.json`:\n\n```json\n{\n  \"ts-standard\": {\n    \"project\": \"./tsconfig.json\"\n  }\n}\n```\n\n*Note: To include additional files in linting such as test files, create a `tsconfig.eslint.json` file to use instead.*\n\nIf you really want to configure hundreds of ESLint rules individually, you can always use eslint\ndirectly with [`eslint-config-standard-with-typescript`](https://github.com/standard/eslint-config-standard-with-typescript)\nto layer your changes on top.\n\n### Flow\n\nTo use Flow, you need to run `standard` with `@babel/eslint-parser` as the parser and\n`eslint-plugin-flowtype` as a plugin.\n\n```bash\nnpm install @babel/eslint-parser eslint-plugin-flowtype --save-dev\n```\n\nThen run:\n\n```bash\n$ standard --parser @babel/eslint-parser --plugin flowtype\n```\n\nOr, add this to `package.json`:\n\n```json\n{\n  \"standard\": {\n    \"parser\": \"@babel/eslint-parser\",\n    \"plugins\": [ \"flowtype\" ]\n  }\n}\n```\n\n*Note: `plugin` and `plugins` are equivalent.*\n\n## What about Mocha, Jest, Jasmine, QUnit, etc?\n\nTo support mocha in test files, add this to the top of the test files:\n\n```js\n/* eslint-env mocha */\n```\n\nOr, run:\n\n```bash\n$ standard --env mocha\n```\n\nWhere `mocha` can be one of `jest`, `jasmine`, `qunit`, `phantomjs`, and so on. To see a\nfull list, check ESLint's\n[specifying environments](https://eslint.org/docs/latest/use/configure/language-options#specifying-environments)\ndocumentation. For a list of what globals are available for these environments,\ncheck the\n[globals](https://github.com/sindresorhus/globals/blob/master/globals.json) npm\nmodule.\n\n*Note: `env` and `envs` are equivalent.*\n\n## What about Web Workers and Service Workers?\n\nAdd this to the top of web worker files:\n\n```js\n/* eslint-env worker */\n```\n\nThis lets `standard` (as well as humans reading the code) know that `self` is a\nglobal in web worker code.\n\nFor Service workers, add this instead:\n\n```js\n/* eslint-env serviceworker */\n```\n\n## What is the difference between warnings and errors?\n\n`standard` treats all rule violations as errors, which means that `standard`\nwill exit with a non-zero (error) exit code.\n\nHowever, we may occasionally release a new major version of `standard`\nwhich changes a rule that affects the majority of `standard` users (for example,\ntransitioning from `var` to `let`/`const`). We do this only when we think the\nadvantage is worth the cost and only when the rule is\n[auto-fixable](#is-there-an-automatic-formatter).\n\nIn these situations, we have a \"transition period\" where the rule change is only\na \"warning\". Warnings don't cause `standard` to return a non-zero (error)\nexit code. However, a warning message will still print to the console. During\nthe transition period, `using standard --fix` will update your code so that it's\nready for the next major version.\n\nThe slow and careful approach is what we strive for with `standard`. We're\ngenerally extremely conservative in enforcing the usage of new language\nfeatures. We want using `standard` to be light and fun and so we're careful\nabout making changes that may get in your way. As always, you can\n[disable a rule](#how-do-i-disable-a-rule) at any time, if necessary.\n\n## Can I check code inside of Markdown or HTML files?\n\nTo check code inside Markdown files, use [`standard-markdown`](https://www.npmjs.com/package/standard-markdown).\n\nAlternatively, there are ESLint plugins that can check code inside Markdown, HTML,\nand many other types of language files:\n\nTo check code inside Markdown files, use an ESLint plugin:\n\n```bash\n$ npm install eslint-plugin-markdown\n```\n\nThen, to check JS that appears inside code blocks, run:\n\n```bash\n$ standard --plugin markdown '**/*.md'\n```\n\nTo check code inside HTML files, use an ESLint plugin:\n\n```bash\n$ npm install eslint-plugin-html\n```\n\nThen, to check JS that appears inside `<script>` tags, run:\n\n```bash\n$ standard --plugin html '**/*.html'\n```\n\n## Is there a Git `pre-commit` hook?\n\nYes! Hooks are great for ensuring that unstyled code never even makes it into your repo.\nNever give style feedback on a pull request again!\n\nYou even have a choice...\n\n### Install your own hook\n\n```bash\n#!/bin/bash\n\n# Ensure all JavaScript files staged for commit pass standard code style\nfunction xargs-r() {\n  # Portable version of \"xargs -r\". The -r flag is a GNU extension that\n  # prevents xargs from running if there are no input files.\n  if IFS= read -r -d $'\\n' path; then\n    echo \"$path\" | cat - | xargs \"$@\"\n  fi\n}\ngit diff --name-only --cached --relative | grep '\\.jsx\\?$' | sed 's/[^[:alnum:]]/\\\\&/g' | xargs-r -E '' -t standard\nif [[ $? -ne 0 ]]; then\n  echo 'JavaScript Standard Style errors were detected. Aborting commit.'\n  exit 1\nfi\n```\n\n### Use a `pre-commit` hook\n\nThe [pre-commit](https://pre-commit.com/) library allows hooks to be declared within a `.pre-commit-config.yaml` configuration file in the repo, and therefore more easily maintained across a team.\n\nUsers of pre-commit can simply add `standard` to their `.pre-commit-config.yaml` file, which will automatically fix `.js`, `.jsx`, `.mjs` and `.cjs` files:\n```yaml\n  - repo: https://github.com/standard/standard\n    rev: master\n    hooks:\n      - id: standard\n```\n\nAlternatively, for more advanced styling configurations, use `standard` within the [eslint hook](https://github.com/pre-commit/mirrors-eslint):\n```yaml\n  - repo: https://github.com/pre-commit/mirrors-eslint\n    rev: master\n    hooks:\n      - id: eslint\n        files: \\.[jt]sx?$  # *.js, *.jsx, *.ts and *.tsx\n        types: [file]\n        additional_dependencies:\n          - eslint@latest\n          - eslint-config-standard@latest\n          # and whatever other plugins...\n```\n\n## How do I make the output all colorful and pretty?\n\nThe built-in output is simple and straightforward, but if you like shiny things,\ninstall [snazzy](https://www.npmjs.com/package/snazzy):\n\n```bash\n$ npm install snazzy\n```\n\nAnd run:\n\n```bash\n$ standard | snazzy\n```\n\nThere's also [standard-tap](https://www.npmjs.com/package/standard-tap),\n[standard-json](https://www.npmjs.com/package/standard-json),\n[standard-reporter](https://www.npmjs.com/package/standard-reporter), and\n[standard-summary](https://www.npmjs.com/package/standard-summary).\n\n## Is there a Node.js API?\n\nYes!\n\n### `async standard.lintText(text, [opts])`\n\nLint the provided source `text`. An `opts` object may be provided:\n\n```js\n{\n  // unique to lintText\n  filename: '',         // path of file containing the text being linted\n\n  // common to lintText and lintFiles\n  cwd: '',              // current working directory (default: process.cwd())\n  fix: false,           // automatically fix problems\n  extensions: [],       // file extensions to lint (has sane defaults)\n  globals: [],          // custom global variables to declare\n  plugins: [],          // custom eslint plugins\n  envs: [],             // custom eslint environment\n  parser: '',           // custom js parser (e.g. babel-eslint)\n  usePackageJson: true, // use options from nearest package.json?\n  useGitIgnore: true    // use file ignore patterns from .gitignore?\n}\n```\n\nAll options are optional, though some ESLint plugins require the `filename` option.\n\nAdditional options may be loaded from a `package.json` if it's found for the current working directory. See below for further details.\n\nReturns a `Promise` resolving to the `results` or rejected with an `Error`.\n\nThe `results` object will contain the following properties:\n\n```js\nconst results = {\n  results: [\n    {\n      filePath: '',\n      messages: [\n        { ruleId: '', message: '', line: 0, column: 0 }\n      ],\n      errorCount: 0,\n      warningCount: 0,\n      output: '' // fixed source code (only present with {fix: true} option)\n    }\n  ],\n  errorCount: 0,\n  warningCount: 0\n}\n```\n\n### `async standard.lintFiles(files, [opts])`\n\nLint the provided `files` globs. An `opts` object may be provided:\n\n```js\n{\n  // unique to lintFiles\n  ignore: [],           // file globs to ignore (has sane defaults)\n\n  // common to lintText and lintFiles\n  cwd: '',              // current working directory (default: process.cwd())\n  fix: false,           // automatically fix problems\n  extensions: [],       // file extensions to lint (has sane defaults)\n  globals: [],          // custom global variables to declare\n  plugins: [],          // custom eslint plugins\n  envs: [],             // custom eslint environment\n  parser: '',           // custom js parser (e.g. babel-eslint)\n  usePackageJson: true, // use options from nearest package.json?\n  useGitIgnore: true    // use file ignore patterns from .gitignore?\n}\n```\n\nAdditional options may be loaded from a `package.json` if it's found for the current working directory. See below for further details.\n\nBoth `ignore` and `files` patterns are resolved relative to the current working directory.\n\nReturns a `Promise` resolving to the `results` or rejected with an `Error` (same as above).\n\n## How do I contribute to StandardJS?\n\nContributions are welcome! Check out the [issues](https://github.com/standard/standard/issues) or the [PRs](https://github.com/standard/standard/pulls), and make your own if you want something that you don't see there.\n\nWant to chat? [Join contributors on Discord](https://discord.gg/Jxjejujpmc).\n\nHere are some important packages in the `standard` ecosystem:\n\n- **[standard](https://github.com/standard/standard)** - this repo\n  - **[standard-engine](https://github.com/standard/standard-engine)** - cli engine for arbitrary eslint rules\n  - **[eslint-config-standard](https://github.com/standard/eslint-config-standard)** - eslint rules for standard\n  - **[eslint-config-standard-jsx](https://github.com/standard/eslint-config-standard-jsx)** - eslint rules for standard (JSX)\n  - **[eslint](https://github.com/eslint/eslint)** - the linter that powers standard\n- **[snazzy](https://github.com/standard/snazzy)** - pretty terminal output for standard\n- **[standard-www](https://github.com/standard/standard-www)** - code for https://standardjs.com\n- **[semistandard](https://github.com/standard/semistandard)** - standard, with semicolons (if you must)\n- **[standardx](https://github.com/standard/standardx)** - standard, with custom tweaks\n\nThere are also many **[editor plugins](#are-there-text-editor-plugins)**, a list of\n**[npm packages that use `standard`](https://github.com/standard/standard-packages)**,\nand an awesome list of\n**[packages in the `standard` ecosystem](https://github.com/standard/awesome-standard)**.\n\n## Security Policies and Procedures\n\nThe `standard` team and community take all security bugs in `standard` seriously. Please see our [security policies and procedures](https://github.com/standard/.github/blob/master/SECURITY.md) document to learn how to report issues.\n\n## License\n\n[MIT](LICENSE). Copyright (c) [Feross Aboukhadijeh](https://feross.org).\n"
        },
        {
          "name": "RULES.md",
          "type": "blob",
          "size": 33.55,
          "content": "# JavaScript Standard Style\n\n<p align=\"center\">\n  <a href=\"/docs/RULES-en.md\">English</a> •\n  <a href=\"/docs/RULES-esla.md\">Español (Latinoamérica)</a> •\n  <a href=\"/docs/RULES-fr.md\">Français</a> •\n  <a href=\"/docs/RULES-id.md\">Bahasa Indonesia</a> •\n  <a href=\"/docs/RULES-iteu.md\">Italiano (Italian)</a> •\n  <a href=\"/docs/RULES-ja.md\">日本語 (Japanese)</a> •\n  <a href=\"/docs/RULES-kokr.md\">한국어 (Korean)</a> •\n  <a href=\"/docs/RULES-ptbr.md\">Português (Brasil)</a> •\n  <a href=\"/docs/RULES-zhcn.md\">简体中文 (Simplified Chinese)</a> •\n  <a href=\"/docs/RULES-zhtw.md\">繁體中文 (Taiwanese Mandarin)</a>\n</p>\n\n[![js-standard-style](https://cdn.rawgit.com/standard/standard/master/badge.svg)](https://github.com/standard/standard)\n\nThis is a summary of the [standard](https://github.com/standard/standard) JavaScript\nrules.\n\nThe best way to learn about `standard` is to just install it and give it a try on\nyour code.\n\n## Rules\n\n* **Use 2 spaces** for indentation.\n\n  eslint: [`indent`](http://eslint.org/docs/rules/indent)\n\n  ```js\n  function hello (name) {\n    console.log('hi', name)\n  }\n  ```\n\n* **Use single quotes for strings** except to avoid escaping.\n\n  eslint: [`quotes`](http://eslint.org/docs/rules/quotes)\n\n  ```js\n  console.log('hello there')    // ✓ ok\n  console.log(\"hello there\")    // ✗ avoid\n  console.log(`hello there`)    // ✗ avoid\n\n  $(\"<div class='box'>\")        // ✓ ok\n  console.log(`hello ${name}`)  // ✓ ok\n  ```\n\n* **No unused variables.**\n\n  eslint: [`no-unused-vars`](http://eslint.org/docs/rules/no-unused-vars)\n\n  ```js\n  function myFunction () {\n    var result = something()   // ✗ avoid\n  }\n  ```\n\n* **Add a space after keywords.**\n\n  eslint: [`keyword-spacing`](http://eslint.org/docs/rules/keyword-spacing)\n\n  ```js\n  if (condition) { ... }   // ✓ ok\n  if(condition) { ... }    // ✗ avoid\n  ```\n\n* **Add a space before a function declaration's parentheses.**\n\n  eslint: [`space-before-function-paren`](http://eslint.org/docs/rules/space-before-function-paren)\n\n  ```js\n  function name (arg) { ... }   // ✓ ok\n  function name(arg) { ... }    // ✗ avoid\n\n  run(function () { ... })      // ✓ ok\n  run(function() { ... })       // ✗ avoid\n  ```\n\n* **Always use** `===` instead of `==`.<br>\n  Exception: `obj == null` is allowed to check for `null || undefined`.\n\n  eslint: [`eqeqeq`](http://eslint.org/docs/rules/eqeqeq)\n\n  ```js\n  if (name === 'John')   // ✓ ok\n  if (name == 'John')    // ✗ avoid\n  ```\n\n  ```js\n  if (name !== 'John')   // ✓ ok\n  if (name != 'John')    // ✗ avoid\n  ```\n\n* **Infix operators** must be spaced.\n\n  eslint: [`space-infix-ops`](http://eslint.org/docs/rules/space-infix-ops)\n\n  ```js\n  // ✓ ok\n  var x = 2\n  var message = 'hello, ' + name + '!'\n  ```\n\n  ```js\n  // ✗ avoid\n  var x=2\n  var message = 'hello, '+name+'!'\n  ```\n\n* **Commas should have a space** after them.\n\n  eslint: [`comma-spacing`](http://eslint.org/docs/rules/comma-spacing)\n\n  ```js\n  // ✓ ok\n  var list = [1, 2, 3, 4]\n  function greet (name, options) { ... }\n  ```\n\n  ```js\n  // ✗ avoid\n  var list = [1,2,3,4]\n  function greet (name,options) { ... }\n  ```\n\n* **Keep else statements** on the same line as their curly braces.\n\n  eslint: [`brace-style`](http://eslint.org/docs/rules/brace-style)\n\n  ```js\n  // ✓ ok\n  if (condition) {\n    // ...\n  } else {\n    // ...\n  }\n  ```\n\n  ```js\n  // ✗ avoid\n  if (condition) {\n    // ...\n  }\n  else {\n    // ...\n  }\n  ```\n\n* **For multi-line if statements,** use curly braces.\n\n  eslint: [`curly`](http://eslint.org/docs/rules/curly)\n\n  ```js\n  // ✓ ok\n  if (options.quiet !== true) console.log('done')\n  ```\n\n  ```js\n  // ✓ ok\n  if (options.quiet !== true) {\n    console.log('done')\n  }\n  ```\n\n  ```js\n  // ✗ avoid\n  if (options.quiet !== true)\n    console.log('done')\n  ```\n\n* **Always handle the** `err` function parameter.\n\n  eslint: [`handle-callback-err`](http://eslint.org/docs/rules/handle-callback-err)\n  ```js\n  // ✓ ok\n  run(function (err) {\n    if (err) throw err\n    window.alert('done')\n  })\n  ```\n\n  ```js\n  // ✗ avoid\n  run(function (err) {\n    window.alert('done')\n  })\n  ```\n\n* **Declare browser globals** with a `/* global */` comment.<br>\n  Exceptions are: `window`, `document`, and `navigator`.<br>\n  Prevents accidental use of poorly-named browser globals like `open`, `length`,\n  `event`, and `name`.\n\n  ```js\n  /* global alert, prompt */\n\n  alert('hi')\n  prompt('ok?')\n  ```\n\n  Explicitly referencing the function or property on `window` is okay too, though\n  such code will not run in a Worker which uses `self` instead of `window`.\n\n  eslint: [`no-undef`](http://eslint.org/docs/rules/no-undef)\n\n  ```js\n  window.alert('hi')   // ✓ ok\n  ```\n\n* **Multiple blank lines not allowed.**\n\n  eslint: [`no-multiple-empty-lines`](http://eslint.org/docs/rules/no-multiple-empty-lines)\n\n  ```js\n  // ✓ ok\n  var value = 'hello world'\n  console.log(value)\n  ```\n\n  ```js\n  // ✗ avoid\n  var value = 'hello world'\n  // blank line\n  // blank line\n  console.log(value)\n  ```\n\n* **For the ternary operator** in a multi-line setting, place `?` and `:` on their own lines.\n\n  eslint: [`operator-linebreak`](http://eslint.org/docs/rules/operator-linebreak)\n\n  ```js\n  // ✓ ok\n  var location = env.development ? 'localhost' : 'www.api.com'\n\n  // ✓ ok\n  var location = env.development\n    ? 'localhost'\n    : 'www.api.com'\n\n  // ✗ avoid\n  var location = env.development ?\n    'localhost' :\n    'www.api.com'\n  ```\n\n* **For var declarations,** write each declaration in its own statement.\n\n  eslint: [`one-var`](http://eslint.org/docs/rules/one-var)\n\n  ```js\n  // ✓ ok\n  var silent = true\n  var verbose = true\n\n  // ✗ avoid\n  var silent = true, verbose = true\n\n  // ✗ avoid\n  var silent = true,\n      verbose = true\n  ```\n\n* **Wrap conditional assignments** with additional parentheses. This makes it clear that the expression is intentionally an assignment (`=`) rather than a typo for equality (`===`).\n\n  eslint: [`no-cond-assign`](http://eslint.org/docs/rules/no-cond-assign)\n\n  ```js\n  // ✓ ok\n  while ((m = text.match(expr))) {\n    // ...\n  }\n\n  // ✗ avoid\n  while (m = text.match(expr)) {\n    // ...\n  }\n  ```\n\n* **Add spaces inside single line blocks.**\n\n  eslint: [`block-spacing`](http://eslint.org/docs/rules/block-spacing)\n\n  ```js\n    function foo () {return true}    // ✗ avoid\n    function foo () { return true }  // ✓ ok\n  ```\n\n* **Use camelcase when naming variables and functions.**\n\n  eslint: [`camelcase`](http://eslint.org/docs/rules/camelcase)\n\n  ```js\n    function my_function () { }    // ✗ avoid\n    function myFunction () { }     // ✓ ok\n\n    var my_var = 'hello'           // ✗ avoid\n    var myVar = 'hello'            // ✓ ok\n  ```\n\n* **Trailing commas not allowed.**\n\n  eslint: [`comma-dangle`](http://eslint.org/docs/rules/comma-dangle)\n\n  ```js\n    var obj = {\n      message: 'hello',   // ✗ avoid\n    }\n  ```\n\n* **Commas must be placed at the end of the current line.**\n\n  eslint: [`comma-style`](http://eslint.org/docs/rules/comma-style)\n\n  ```js\n    var obj = {\n      foo: 'foo'\n      ,bar: 'bar'   // ✗ avoid\n    }\n\n    var obj = {\n      foo: 'foo',\n      bar: 'bar'   // ✓ ok\n    }\n  ```\n\n* **Dot should be on the same line as property.**\n\n  eslint: [`dot-location`](http://eslint.org/docs/rules/dot-location)\n\n  ```js\n    console.\n      log('hello')  // ✗ avoid\n\n    console\n      .log('hello') // ✓ ok\n  ```\n\n* **Files must end with a newline.**\n\n  eslint: [`eol-last`](http://eslint.org/docs/rules/eol-last)\n\n* **No space between function identifiers and their invocations.**\n\n  eslint: [`func-call-spacing`](http://eslint.org/docs/rules/func-call-spacing)\n\n  ```js\n  console.log ('hello') // ✗ avoid\n  console.log('hello')  // ✓ ok\n  ```\n\n* **Add space between colon and value in key value pairs.**\n\n  eslint: [`key-spacing`](http://eslint.org/docs/rules/key-spacing)\n\n  ```js\n  var obj = { 'key' : 'value' }    // ✗ avoid\n  var obj = { 'key' :'value' }     // ✗ avoid\n  var obj = { 'key':'value' }      // ✗ avoid\n  var obj = { 'key': 'value' }     // ✓ ok\n  ```\n\n* **Constructor names must begin with a capital letter.**\n\n  eslint: [`new-cap`](http://eslint.org/docs/rules/new-cap)\n\n  ```js\n  function animal () {}\n  var dog = new animal()    // ✗ avoid\n\n  function Animal () {}\n  var dog = new Animal()    // ✓ ok\n  ```\n\n* **Constructor with no arguments must be invoked with parentheses.**\n\n  eslint: [`new-parens`](http://eslint.org/docs/rules/new-parens)\n\n  ```js\n  function Animal () {}\n  var dog = new Animal    // ✗ avoid\n  var dog = new Animal()  // ✓ ok\n  ```\n\n* **Objects must contain a getter when a setter is defined.**\n\n  eslint: [`accessor-pairs`](http://eslint.org/docs/rules/accessor-pairs)\n\n  ```js\n  var person = {\n    set name (value) {    // ✗ avoid\n      this._name = value\n    }\n  }\n\n  var person = {\n    set name (value) {\n      this._name = value\n    },\n    get name () {         // ✓ ok\n      return this._name\n    }\n  }\n  ```\n\n* **Constructors of derived classes must call `super`.**\n\n  eslint: [`constructor-super`](http://eslint.org/docs/rules/constructor-super)\n\n  ```js\n  class Dog {\n    constructor () {\n      super()             // ✗ avoid\n      this.legs = 4\n    }\n  }\n\n  class Dog extends Animal {\n    constructor () {      // ✗ avoid\n      this.legs = 4\n    }\n  }\n\n  class Dog extends Animal {\n    constructor () {\n      super()             // ✓ ok\n      this.legs = 4\n    }\n  }\n  ```\n\n* **Use array literals instead of array constructors.**\n\n  eslint: [`no-array-constructor`](http://eslint.org/docs/rules/no-array-constructor)\n\n  ```js\n  var nums = new Array(1, 2, 3)   // ✗ avoid\n  var nums = [1, 2, 3]            // ✓ ok\n  ```\n\n* **Avoid using `arguments.callee` and `arguments.caller`.**\n\n  eslint: [`no-caller`](http://eslint.org/docs/rules/no-caller)\n\n  ```js\n  function foo (n) {\n    if (n <= 0) return\n\n    arguments.callee(n - 1)   // ✗ avoid\n  }\n\n  function foo (n) {\n    if (n <= 0) return\n\n    foo(n - 1)                // ✓ ok\n  }\n  ```\n\n* **Avoid modifying variables of class declarations.**\n\n  eslint: [`no-class-assign`](http://eslint.org/docs/rules/no-class-assign)\n\n  ```js\n  class Dog {}\n  Dog = 'Fido'    // ✗ avoid\n  ```\n\n* **Avoid modifying variables declared using `const`.**\n\n  eslint: [`no-const-assign`](http://eslint.org/docs/rules/no-const-assign)\n\n  ```js\n  const score = 100\n  score = 125       // ✗ avoid\n  ```\n\n* **Avoid using constant expressions in conditions (except loops).**\n\n  eslint: [`no-constant-condition`](http://eslint.org/docs/rules/no-constant-condition)\n\n  ```js\n  if (false) {    // ✗ avoid\n    // ...\n  }\n\n  if (x === 0) {  // ✓ ok\n    // ...\n  }\n\n  while (true) {  // ✓ ok\n    // ...\n  }\n  ```\n\n* **No control characters in regular expressions.**\n\n  eslint: [`no-control-regex`](http://eslint.org/docs/rules/no-control-regex)\n\n  ```js\n  var pattern = /\\x1f/    // ✗ avoid\n  var pattern = /\\x20/    // ✓ ok\n  ```\n\n* **No `debugger` statements.**\n\n  eslint: [`no-debugger`](http://eslint.org/docs/rules/no-debugger)\n\n  ```js\n  function sum (a, b) {\n    debugger      // ✗ avoid\n    return a + b\n  }\n  ```\n\n* **No `delete` operator on variables.**\n\n  eslint: [`no-delete-var`](http://eslint.org/docs/rules/no-delete-var)\n\n  ```js\n  var name\n  delete name     // ✗ avoid\n  ```\n\n* **No duplicate arguments in function definitions.**\n\n  eslint: [`no-dupe-args`](http://eslint.org/docs/rules/no-dupe-args)\n\n  ```js\n  function sum (a, b, a) {  // ✗ avoid\n    // ...\n  }\n\n  function sum (a, b, c) {  // ✓ ok\n    // ...\n  }\n  ```\n\n* **No duplicate name in class members.**\n\n  eslint: [`no-dupe-class-members`](http://eslint.org/docs/rules/no-dupe-class-members)\n\n  ```js\n  class Dog {\n    bark () {}\n    bark () {}    // ✗ avoid\n  }\n  ```\n\n* **No duplicate keys in object literals.**\n\n  eslint: [`no-dupe-keys`](http://eslint.org/docs/rules/no-dupe-keys)\n\n  ```js\n  var user = {\n    name: 'Jane Doe',\n    name: 'John Doe'    // ✗ avoid\n  }\n  ```\n\n* **No duplicate `case` labels in `switch` statements.**\n\n  eslint: [`no-duplicate-case`](http://eslint.org/docs/rules/no-duplicate-case)\n\n  ```js\n  switch (id) {\n    case 1:\n      // ...\n    case 1:     // ✗ avoid\n  }\n  ```\n\n* **Use a single import statement per module.**\n\n  eslint: [`no-duplicate-imports`](http://eslint.org/docs/rules/no-duplicate-imports)\n\n  ```js\n  import { myFunc1 } from 'module'\n  import { myFunc2 } from 'module'          // ✗ avoid\n\n  import { myFunc1, myFunc2 } from 'module' // ✓ ok\n  ```\n\n* **No empty character classes in regular expressions.**\n\n  eslint: [`no-empty-character-class`](http://eslint.org/docs/rules/no-empty-character-class)\n\n  ```js\n  const myRegex = /^abc[]/      // ✗ avoid\n  const myRegex = /^abc[a-z]/   // ✓ ok\n  ```\n\n* **No empty destructuring patterns.**\n\n  eslint: [`no-empty-pattern`](http://eslint.org/docs/rules/no-empty-pattern)\n\n  ```js\n  const { a: {} } = foo         // ✗ avoid\n  const { a: { b } } = foo      // ✓ ok\n  ```\n\n* **No using `eval()`.**\n\n  eslint: [`no-eval`](http://eslint.org/docs/rules/no-eval)\n\n  ```js\n  eval( \"var result = user.\" + propName ) // ✗ avoid\n  var result = user[propName]             // ✓ ok\n  ```\n\n* **No reassigning exceptions in `catch` clauses.**\n\n  eslint: [`no-ex-assign`](http://eslint.org/docs/rules/no-ex-assign)\n\n  ```js\n  try {\n    // ...\n  } catch (e) {\n    e = 'new value'             // ✗ avoid\n  }\n\n  try {\n    // ...\n  } catch (e) {\n    const newVal = 'new value'  // ✓ ok\n  }\n  ```\n\n* **No extending native objects.**\n\n  eslint: [`no-extend-native`](http://eslint.org/docs/rules/no-extend-native)\n\n  ```js\n  Object.prototype.age = 21     // ✗ avoid\n  ```\n\n* **Avoid unnecessary function binding.**\n\n  eslint: [`no-extra-bind`](http://eslint.org/docs/rules/no-extra-bind)\n\n  ```js\n  const name = function () {\n    getName()\n  }.bind(user)    // ✗ avoid\n\n  const name = function () {\n    this.getName()\n  }.bind(user)    // ✓ ok\n  ```\n\n* **Avoid unnecessary boolean casts.**\n\n  eslint: [`no-extra-boolean-cast`](http://eslint.org/docs/rules/no-extra-boolean-cast)\n\n  ```js\n  const result = true\n  if (!!result) {   // ✗ avoid\n    // ...\n  }\n\n  const result = true\n  if (result) {     // ✓ ok\n    // ...\n  }\n  ```\n\n* **No unnecessary parentheses around function expressions.**\n\n  eslint: [`no-extra-parens`](http://eslint.org/docs/rules/no-extra-parens)\n\n  ```js\n  const myFunc = (function () { })   // ✗ avoid\n  const myFunc = function () { }     // ✓ ok\n  ```\n\n* **Use `break` to prevent fallthrough in `switch` cases.**\n\n  eslint: [`no-fallthrough`](http://eslint.org/docs/rules/no-fallthrough)\n\n  ```js\n  switch (filter) {\n    case 1:\n      doSomething()    // ✗ avoid\n    case 2:\n      doSomethingElse()\n  }\n\n  switch (filter) {\n    case 1:\n      doSomething()\n      break           // ✓ ok\n    case 2:\n      doSomethingElse()\n  }\n\n  switch (filter) {\n    case 1:\n      doSomething()\n      // fallthrough  // ✓ ok\n    case 2:\n      doSomethingElse()\n  }\n  ```\n\n* **No floating decimals.**\n\n  eslint: [`no-floating-decimal`](http://eslint.org/docs/rules/no-floating-decimal)\n\n  ```js\n  const discount = .5      // ✗ avoid\n  const discount = 0.5     // ✓ ok\n  ```\n\n* **Avoid reassigning function declarations.**\n\n  eslint: [`no-func-assign`](http://eslint.org/docs/rules/no-func-assign)\n\n  ```js\n  function myFunc () { }\n  myFunc = myOtherFunc    // ✗ avoid\n  ```\n\n* **No reassigning read-only global variables.**\n\n  eslint: [`no-global-assign`](http://eslint.org/docs/rules/no-global-assign)\n\n  ```js\n  window = {}     // ✗ avoid\n  ```\n\n* **No implied `eval()`.**\n\n  eslint: [`no-implied-eval`](http://eslint.org/docs/rules/no-implied-eval)\n\n  ```js\n  setTimeout(\"alert('Hello world')\")                   // ✗ avoid\n  setTimeout(function () { alert('Hello world') })     // ✓ ok\n  ```\n\n* **No function declarations in nested blocks.**\n\n  eslint: [`no-inner-declarations`](http://eslint.org/docs/rules/no-inner-declarations)\n\n  ```js\n  if (authenticated) {\n    function setAuthUser () {}    // ✗ avoid\n  }\n  ```\n\n* **No invalid regular expression strings in  `RegExp` constructors.**\n\n  eslint: [`no-invalid-regexp`](http://eslint.org/docs/rules/no-invalid-regexp)\n\n  ```js\n  RegExp('[a-z')    // ✗ avoid\n  RegExp('[a-z]')   // ✓ ok\n  ```\n\n* **No irregular whitespace.**\n\n  eslint: [`no-irregular-whitespace`](http://eslint.org/docs/rules/no-irregular-whitespace)\n\n  ```js\n  function myFunc () /*<NBSP>*/{}   // ✗ avoid\n  ```\n\n* **No using `__iterator__`.**\n\n  eslint: [`no-iterator`](http://eslint.org/docs/rules/no-iterator)\n\n  ```js\n  Foo.prototype.__iterator__ = function () {}   // ✗ avoid\n  ```\n\n* **No labels that share a name with an in scope variable.**\n\n  eslint: [`no-label-var`](http://eslint.org/docs/rules/no-label-var)\n\n  ```js\n  var score = 100\n  function game () {\n    score: while (true) {      // ✗ avoid\n      score -= 10\n      if (score > 0) continue score\n      break\n    }\n  }\n  ```\n\n* **No label statements.**\n\n  eslint: [`no-labels`](http://eslint.org/docs/rules/no-labels)\n\n  ```js\n  label:\n    while (true) {\n      break label     // ✗ avoid\n    }\n  ```\n\n* **No unnecessary nested blocks.**\n\n  eslint: [`no-lone-blocks`](http://eslint.org/docs/rules/no-lone-blocks)\n\n  ```js\n  function myFunc () {\n    {                   // ✗ avoid\n      myOtherFunc()\n    }\n  }\n\n  function myFunc () {\n    myOtherFunc()       // ✓ ok\n  }\n  ```\n\n* **Avoid mixing spaces and tabs for indentation.**\n\n  eslint: [`no-mixed-spaces-and-tabs`](http://eslint.org/docs/rules/no-mixed-spaces-and-tabs)\n\n* **Do not use multiple spaces except for indentation.**\n\n  eslint: [`no-multi-spaces`](http://eslint.org/docs/rules/no-multi-spaces)\n\n  ```js\n  const id =    1234    // ✗ avoid\n  const id = 1234       // ✓ ok\n  ```\n\n* **No multiline strings.**\n\n  eslint: [`no-multi-str`](http://eslint.org/docs/rules/no-multi-str)\n\n  ```js\n  const message = 'Hello \\\n                   world'     // ✗ avoid\n  ```\n\n* **No `new` without assigning object to a variable.**\n\n  eslint: [`no-new`](http://eslint.org/docs/rules/no-new)\n\n  ```js\n  new Character()                     // ✗ avoid\n  const character = new Character()   // ✓ ok\n  ```\n\n* **No using the `Function` constructor.**\n\n  eslint: [`no-new-func`](http://eslint.org/docs/rules/no-new-func)\n\n  ```js\n  var sum = new Function('a', 'b', 'return a + b')    // ✗ avoid\n  ```\n\n* **No using the `Object` constructor.**\n\n  eslint: [`no-new-object`](http://eslint.org/docs/rules/no-new-object)\n\n  ```js\n  let config = new Object()   // ✗ avoid\n  ```\n\n* **No using `new require`.**\n\n  eslint: [`no-new-require`](http://eslint.org/docs/rules/no-new-require)\n\n  ```js\n  const myModule = new require('my-module')    // ✗ avoid\n  ```\n\n* **No using the `Symbol` constructor.**\n\n  eslint: [`no-new-symbol`](http://eslint.org/docs/rules/no-new-symbol)\n\n  ```js\n  const foo = new Symbol('foo')   // ✗ avoid\n  ```\n\n* **No using primitive wrapper instances.**\n\n  eslint: [`no-new-wrappers`](http://eslint.org/docs/rules/no-new-wrappers)\n\n  ```js\n  const message = new String('hello')   // ✗ avoid\n  ```\n\n* **No calling global object properties as functions.**\n\n  eslint: [`no-obj-calls`](http://eslint.org/docs/rules/no-obj-calls)\n\n  ```js\n  const math = Math()   // ✗ avoid\n  ```\n\n* **No octal literals.**\n\n  eslint: [`no-octal`](http://eslint.org/docs/rules/no-octal)\n\n  ```js\n  const octal = 042         // ✗ avoid\n  const decimal = 34        // ✓ ok\n  const octalString = '042' // ✓ ok\n  ```\n\n* **No octal escape sequences in string literals.**\n\n  eslint: [`no-octal-escape`](http://eslint.org/docs/rules/no-octal-escape)\n\n  ```js\n  const copyright = 'Copyright \\251'  // ✗ avoid\n  ```\n\n* **Avoid string concatenation when using `__dirname` and `__filename`.**\n\n  eslint: [`no-path-concat`](http://eslint.org/docs/rules/no-path-concat)\n\n  ```js\n  const pathToFile = __dirname + '/app.js'            // ✗ avoid\n  const pathToFile = path.join(__dirname, 'app.js')   // ✓ ok\n  ```\n\n* **Avoid using `__proto__`.** Use `getPrototypeOf` instead.\n\n  eslint: [`no-proto`](http://eslint.org/docs/rules/no-proto)\n\n  ```js\n  const foo = obj.__proto__               // ✗ avoid\n  const foo = Object.getPrototypeOf(obj)  // ✓ ok\n  ```\n\n* **No redeclaring variables.**\n\n  eslint: [`no-redeclare`](http://eslint.org/docs/rules/no-redeclare)\n\n  ```js\n  let name = 'John'\n  let name = 'Jane'     // ✗ avoid\n\n  let name = 'John'\n  name = 'Jane'         // ✓ ok\n  ```\n\n* **Avoid multiple spaces in regular expression literals.**\n\n  eslint: [`no-regex-spaces`](http://eslint.org/docs/rules/no-regex-spaces)\n\n  ```js\n  const regexp = /test   value/   // ✗ avoid\n\n  const regexp = /test {3}value/  // ✓ ok\n  const regexp = /test value/     // ✓ ok\n  ```\n\n* **Assignments in return statements must be surrounded by parentheses.**\n\n  eslint: [`no-return-assign`](http://eslint.org/docs/rules/no-return-assign)\n\n  ```js\n  function sum (a, b) {\n    return result = a + b     // ✗ avoid\n  }\n\n  function sum (a, b) {\n    return (result = a + b)   // ✓ ok\n  }\n  ```\n\n* **Avoid assigning a variable to itself**\n\n  eslint: [`no-self-assign`](http://eslint.org/docs/rules/no-self-assign)\n\n  ```js\n  name = name   // ✗ avoid\n  ```\n\n* **Avoid comparing a variable to itself.**\n\n  eslint: [`no-self-compare`](http://eslint.org/docs/rules/no-self-compare)\n\n  ```js\n  if (score === score) {}   // ✗ avoid\n  ```\n\n* **Avoid using the comma operator.**\n\n  eslint: [`no-sequences`](http://eslint.org/docs/rules/no-sequences)\n\n  ```js\n  if (doSomething(), !!test) {}   // ✗ avoid\n  ```\n\n* **Restricted names should not be shadowed.**\n\n  eslint: [`no-shadow-restricted-names`](http://eslint.org/docs/rules/no-shadow-restricted-names)\n\n  ```js\n  let undefined = 'value'     // ✗ avoid\n  ```\n\n* **Sparse arrays are not allowed.**\n\n  eslint: [`no-sparse-arrays`](http://eslint.org/docs/rules/no-sparse-arrays)\n\n  ```js\n  let fruits = ['apple',, 'orange']       // ✗ avoid\n  ```\n\n* **Tabs should not be used**\n\n  eslint: [`no-tabs`](http://eslint.org/docs/rules/no-tabs)\n\n* **Regular strings must not contain template literal placeholders.**\n\n  eslint: [`no-template-curly-in-string`](http://eslint.org/docs/rules/no-template-curly-in-string)\n\n  ```js\n  const message = 'Hello ${name}'   // ✗ avoid\n  const message = `Hello ${name}`   // ✓ ok\n  ```\n\n* **`super()` must be called before using `this`.**\n\n  eslint: [`no-this-before-super`](http://eslint.org/docs/rules/no-this-before-super)\n\n  ```js\n  class Dog extends Animal {\n    constructor () {\n      this.legs = 4     // ✗ avoid\n      super()\n    }\n  }\n  ```\n\n* **Only `throw` an `Error` object.**\n\n  eslint: [`no-throw-literal`](http://eslint.org/docs/rules/no-throw-literal)\n\n  ```js\n  throw 'error'               // ✗ avoid\n  throw new Error('error')    // ✓ ok\n  ```\n\n* **Whitespace not allowed at end of line.**\n\n  eslint: [`no-trailing-spaces`](http://eslint.org/docs/rules/no-trailing-spaces)\n\n* **Initializing to `undefined` is not allowed.**\n\n  eslint: [`no-undef-init`](http://eslint.org/docs/rules/no-undef-init)\n\n  ```js\n  let name = undefined    // ✗ avoid\n\n  let name\n  name = 'value'          // ✓ ok\n  ```\n\n* **No unmodified conditions of loops.**\n\n  eslint: [`no-unmodified-loop-condition`](http://eslint.org/docs/rules/no-unmodified-loop-condition)\n\n  ```js\n  for (let i = 0; i < items.length; j++) {...}    // ✗ avoid\n  for (let i = 0; i < items.length; i++) {...}    // ✓ ok\n  ```\n\n* **No ternary operators when simpler alternatives exist.**\n\n  eslint: [`no-unneeded-ternary`](http://eslint.org/docs/rules/no-unneeded-ternary)\n\n  ```js\n  let score = val ? val : 0     // ✗ avoid\n  let score = val || 0          // ✓ ok\n  ```\n\n* **No unreachable code after `return`, `throw`, `continue`, and `break` statements.**\n\n  eslint: [`no-unreachable`](http://eslint.org/docs/rules/no-unreachable)\n\n  ```js\n  function doSomething () {\n    return true\n    console.log('never called')     // ✗ avoid\n  }\n  ```\n\n* **No flow control statements in `finally` blocks.**\n\n  eslint: [`no-unsafe-finally`](http://eslint.org/docs/rules/no-unsafe-finally)\n\n  ```js\n  try {\n    // ...\n  } catch (e) {\n    // ...\n  } finally {\n    return 42     // ✗ avoid\n  }\n  ```\n\n* **The left operand of relational operators must not be negated.**\n\n  eslint: [`no-unsafe-negation`](http://eslint.org/docs/rules/no-unsafe-negation)\n\n  ```js\n  if (!key in obj) {}       // ✗ avoid\n  if (!(key in obj)) {}     // ✓ ok\n  ```\n\n* **Avoid unnecessary use of `.call()` and `.apply()`.**\n\n  eslint: [`no-useless-call`](http://eslint.org/docs/rules/no-useless-call)\n\n  ```js\n  sum.call(null, 1, 2, 3)   // ✗ avoid\n  ```\n\n* **Avoid using unnecessary computed property keys on objects.**\n\n  eslint: [`no-useless-computed-key`](http://eslint.org/docs/rules/no-useless-computed-key)\n\n  ```js\n  const user = { ['name']: 'John Doe' }   // ✗ avoid\n  const user = { name: 'John Doe' }       // ✓ ok\n  ```\n\n* **No unnecessary constructor.**\n\n  eslint: [`no-useless-constructor`](http://eslint.org/docs/rules/no-useless-constructor)\n\n  ```js\n  class Car {\n    constructor () {      // ✗ avoid\n    }\n  }\n  ```\n\n* **No unnecessary use of escape.**\n\n  eslint: [`no-useless-escape`](http://eslint.org/docs/rules/no-useless-escape)\n\n  ```js\n  let message = 'Hell\\o'  // ✗ avoid\n  ```\n\n* **Renaming import, export, and destructured assignments to the same name is not allowed.**\n\n  eslint: [`no-useless-rename`](http://eslint.org/docs/rules/no-useless-rename)\n\n  ```js\n  import { config as config } from './config'     // ✗ avoid\n  import { config } from './config'               // ✓ ok\n  ```\n\n* **No whitespace before properties.**\n\n  eslint: [`no-whitespace-before-property`](http://eslint.org/docs/rules/no-whitespace-before-property)\n\n  ```js\n  user .name      // ✗ avoid\n  user.name       // ✓ ok\n  ```\n\n* **No using `with` statements.**\n\n  eslint: [`no-with`](http://eslint.org/docs/rules/no-with)\n\n  ```js\n  with (val) {...}    // ✗ avoid\n  ```\n\n* **Maintain consistency of newlines between object properties.**\n\n  eslint: [`object-property-newline`](http://eslint.org/docs/rules/object-property-newline)\n\n  ```js\n  const user = {\n    name: 'Jane Doe', age: 30,\n    username: 'jdoe86'            // ✗ avoid\n  }\n\n  const user = { name: 'Jane Doe', age: 30, username: 'jdoe86' }    // ✓ ok\n\n  const user = {\n    name: 'Jane Doe',\n    age: 30,\n    username: 'jdoe86'\n  }                                                                 // ✓ ok\n  ```\n\n* **No padding within blocks.**\n\n  eslint: [`padded-blocks`](http://eslint.org/docs/rules/padded-blocks)\n\n  ```js\n  if (user) {\n                              // ✗ avoid\n    const name = getName()\n\n  }\n\n  if (user) {\n    const name = getName()    // ✓ ok\n  }\n  ```\n\n* **No whitespace between spread operators and their expressions.**\n\n  eslint: [`rest-spread-spacing`](http://eslint.org/docs/rules/rest-spread-spacing)\n\n  ```js\n  fn(... args)    // ✗ avoid\n  fn(...args)     // ✓ ok\n  ```\n\n* **Semicolons must have a space after and no space before.**\n\n  eslint: [`semi-spacing`](http://eslint.org/docs/rules/semi-spacing)\n\n  ```js\n  for (let i = 0 ;i < items.length ;i++) {...}    // ✗ avoid\n  for (let i = 0; i < items.length; i++) {...}    // ✓ ok\n  ```\n\n* **Must have a space before blocks.**\n\n  eslint: [`space-before-blocks`](http://eslint.org/docs/rules/space-before-blocks)\n\n  ```js\n  if (admin){...}     // ✗ avoid\n  if (admin) {...}    // ✓ ok\n  ```\n\n* **No spaces inside parentheses.**\n\n  eslint: [`space-in-parens`](http://eslint.org/docs/rules/space-in-parens)\n\n  ```js\n  getName( name )     // ✗ avoid\n  getName(name)       // ✓ ok\n  ```\n\n* **Unary operators must have a space after.**\n\n  eslint: [`space-unary-ops`](http://eslint.org/docs/rules/space-unary-ops)\n\n  ```js\n  typeof!admin        // ✗ avoid\n  typeof !admin        // ✓ ok\n  ```\n\n* **Use spaces inside comments.**\n\n  eslint: [`spaced-comment`](http://eslint.org/docs/rules/spaced-comment)\n\n  ```js\n  //comment           // ✗ avoid\n  // comment          // ✓ ok\n\n  /*comment*/         // ✗ avoid\n  /* comment */       // ✓ ok\n  ```\n\n* **No spacing in template strings.**\n\n  eslint: [`template-curly-spacing`](http://eslint.org/docs/rules/template-curly-spacing)\n\n  ```js\n  const message = `Hello, ${ name }`    // ✗ avoid\n  const message = `Hello, ${name}`      // ✓ ok\n  ```\n\n* **Use `isNaN()` when checking for `NaN`.**\n\n  eslint: [`use-isnan`](http://eslint.org/docs/rules/use-isnan)\n\n  ```js\n  if (price === NaN) { }      // ✗ avoid\n  if (isNaN(price)) { }       // ✓ ok\n  ```\n\n* **`typeof` must be compared to a valid string.**\n\n  eslint: [`valid-typeof`](http://eslint.org/docs/rules/valid-typeof)\n\n  ```js\n  typeof name === 'undefimed'     // ✗ avoid\n  typeof name === 'undefined'     // ✓ ok\n  ```\n\n* **Immediately Invoked Function Expressions (IIFEs) must be wrapped.**\n\n  eslint: [`wrap-iife`](http://eslint.org/docs/rules/wrap-iife)\n\n  ```js\n  const getName = function () { }()     // ✗ avoid\n\n  const getName = (function () { }())   // ✓ ok\n  const getName = (function () { })()   // ✓ ok\n  ```\n\n* **The `*` in `yield*`expressions must have a space before and after.**\n\n  eslint: [`yield-star-spacing`](http://eslint.org/docs/rules/yield-star-spacing)\n\n  ```js\n  yield* increment()    // ✗ avoid\n  yield * increment()   // ✓ ok\n  ```\n\n* **Avoid Yoda conditions.**\n\n  eslint: [`yoda`](http://eslint.org/docs/rules/yoda)\n\n  ```js\n  if (42 === age) { }    // ✗ avoid\n  if (age === 42) { }    // ✓ ok\n  ```\n\n## Semicolons\n\n* No semicolons. (see: [1](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding), [2](https://web.archive.org/web/20201206065632/http://inimino.org/~inimino/blog/javascript_semicolons), [3](https://www.youtube.com/watch?v=gsfbh17Ax9I))\n\n  eslint: [`semi`](http://eslint.org/docs/rules/semi)\n\n  ```js\n  window.alert('hi')   // ✓ ok\n  window.alert('hi');  // ✗ avoid\n  ```\n\n* Never start a line with `(`, `[`, `` ` ``, or a handful of other unlikely possibilities.\n\n  This is the only gotcha with omitting semicolons, and `standard` protects you from this potential issue.\n\n  (The full list is: `[`, `(`, `` ` ``, `+`, `*`, `/`, `-`, `,`, `.`, but most of these will never appear at the start of a line in real code.)\n\n  eslint: [`no-unexpected-multiline`](http://eslint.org/docs/rules/no-unexpected-multiline)\n\n  ```js\n  // ✓ ok\n  ;(function () {\n    window.alert('ok')\n  }())\n\n  // ✗ avoid\n  (function () {\n    window.alert('ok')\n  }())\n  ```\n\n  ```js\n  // ✓ ok\n  ;[1, 2, 3].forEach(bar)\n\n  // ✗ avoid\n  [1, 2, 3].forEach(bar)\n  ```\n\n  ```js\n  // ✓ ok\n  ;`hello`.indexOf('o')\n\n  // ✗ avoid\n  `hello`.indexOf('o')\n  ```\n\n  Note: If you're often writing code like this, you may be trying to be too clever.\n\n  Clever short-hands are discouraged, in favor of clear and readable expressions, whenever\n  possible.\n\n  Instead of this:\n\n  ```js\n  ;[1, 2, 3].forEach(bar)\n  ```\n\n  This is strongly preferred:\n\n  ```js\n  var nums = [1, 2, 3]\n  nums.forEach(bar)\n  ```\n\n\n## Helpful reading\n\n- [An Open Letter to JavaScript Leaders Regarding Semicolons][1]\n- [JavaScript Semicolon Insertion – Everything you need to know][2]\n\n##### And a helpful video:\n\n- [Are Semicolons Necessary in JavaScript? - YouTube][3]\n\nAll popular code minifiers in use today use AST-based minification, so they can\nhandle semicolon-less JavaScript with no issues (since semicolons are not required\nin JavaScript).\n\n##### Excerpt from *[\"An Open Letter to JavaScript Leaders Regarding Semicolons\"][1]*:\n\n> [Relying on automatic semicolon insertion] is quite safe, and perfectly valid JS that every browser understands. Closure compiler, yuicompressor, packer, and jsmin all can properly minify it. There is no performance impact anywhere.\n>\n> I am sorry that, instead of educating you, the leaders in this language community have given you lies and fear.  That was shameful. I recommend learning how statements in JS are actually terminated (and in which cases they are not terminated), so that you can write code that you find beautiful.\n>\n> In general, `\\n` ends a statement unless:\n>   1. The statement has an unclosed paren, array literal, or object literal or ends in some\n>      other way that is not a valid way to end a statement. (For instance, ending with `.`\n>      or `,`.)\n>   2. The line is `--` or `++` (in which case it will decrement/increment the next token.)\n>   3. It is a `for()`, `while()`, `do`, `if()`, or `else`, and there is no `{`\n>   4. The next line starts with `[`, `(`, `+`, `*`, `/`, `-`, `,`, `.`, or some other\n>      binary operator that can only be found between two tokens in a single expression.\n>\n> The first is pretty obvious. Even JSLint is ok with `\\n` chars in JSON and parenthesized constructs, and with `var` statements that span multiple lines ending in `,`.\n>\n> The second is super weird. I’ve never seen a case (outside of these sorts of conversations) where you’d want to do write `i\\n++\\nj`, but, point of fact, that’s parsed as `i; ++j`, not `i++; j`.\n>\n> The third is well understood, if generally despised. `if (x)\\ny()` is equivalent to `if (x) { y() }`. The construct doesn’t end until it reaches either a block, or a statement.\n>\n> `;` is a valid JavaScript statement, so `if(x);` is equivalent to `if(x){}` or, “If x, do nothing.” This is more commonly applied to loops where the loop check also is the update function. Unusual, but not unheard of.\n>\n> The fourth is generally the fud-inducing “oh noes, you need semicolons!” case. But, as it turns out, it’s quite easy to *prefix* those lines with semicolons if you don’t mean them to be continuations of the previous line. For example, instead of this:\n>\n> ```js\n> foo();\n> [1,2,3].forEach(bar);\n> ```\n>\n> you could do this:\n>\n> ```js\n> foo()\n> ;[1,2,3].forEach(bar)\n> ```\n>\n> The advantage is that the prefixes are easier to notice, once you are accustomed to never seeing lines starting with `(` or `[` without semis.\n\n[1]: http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding\n[2]: https://web.archive.org/web/20201206065632/http://inimino.org/~inimino/blog/javascript_semicolons\n[3]: https://www.youtube.com/watch?v=gsfbh17Ax9I\n"
        },
        {
          "name": "badge.png",
          "type": "blob",
          "size": 2.52,
          "content": null
        },
        {
          "name": "badge.svg",
          "type": "blob",
          "size": 10.24,
          "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"171\" height=\"56\" viewBox=\"0 0 171 56\"><path d=\"M.5.5h170v55H.5z\" fill=\"#fff\" stroke=\"#000\"/><path d=\"M16.068 34.36c.576 1.056 1.248 1.84 2.016 2.352.768.513 1.552.77 2.352.77 1.28 0 2.248-.394 2.904-1.177.656-.785.984-2.217.984-4.297V11.704h7.056v20.88c0 1.504-.2 2.928-.6 4.27-.4 1.346-1.008 2.515-1.824 3.505-.816.99-1.856 1.77-3.12 2.35-1.265.57-2.76.86-4.488.86-2.4 0-4.41-.47-6.024-1.4-1.617-.93-2.97-2.35-4.056-4.27l4.8-3.56zm24.576-.144c1.12.96 2.36 1.745 3.72 2.353 1.36.6 2.695.91 4.008.91 1.472 0 2.568-.27 3.288-.82.72-.55 1.08-1.28 1.08-2.21 0-.48-.104-.9-.312-1.25-.208-.35-.512-.67-.912-.94-.4-.27-.88-.53-1.44-.77l-1.848-.79-4.08-1.73c-.8-.32-1.576-.74-2.328-1.25-.752-.51-1.424-1.11-2.016-1.8-.593-.69-1.064-1.49-1.416-2.4-.353-.91-.528-1.95-.528-3.1 0-1.28.27-2.49.816-3.63.543-1.14 1.312-2.13 2.304-2.98.992-.85 2.167-1.52 3.528-2 1.36-.48 2.856-.72 4.488-.72 1.824 0 3.624.35 5.4 1.05 1.776.7 3.336 1.72 4.68 3.07l-3.6 4.46c-1.024-.8-2.048-1.42-3.072-1.85-1.025-.43-2.16-.65-3.408-.65-1.216 0-2.184.25-2.904.74-.72.5-1.08 1.19-1.08 2.09 0 .48.12.89.36 1.22.24.34.576.64 1.008.91.432.28.936.53 1.512.77s1.2.51 1.872.79l4.032 1.63c1.92.77 3.432 1.82 4.536 3.17 1.104 1.34 1.656 3.12 1.656 5.33 0 1.31-.264 2.55-.792 3.72-.528 1.17-1.296 2.19-2.304 3.07-1.008.88-2.25 1.58-3.72 2.11-1.473.53-3.137.79-4.992.79-2.048 0-4.088-.37-6.12-1.13-2.032-.75-3.848-1.88-5.448-3.39l4.032-4.85zm34.082-12.14c.49.463 1.05.838 1.68 1.125.63.288 1.26.43 1.89.43.784 0 1.38-.16 1.785-.48.406-.32.61-.75.61-1.28 0-.28-.05-.52-.15-.71-.1-.19-.25-.36-.44-.51-.19-.15-.41-.28-.67-.41-.26-.12-.54-.25-.85-.37l-1.89-.82c-.33-.14-.67-.31-1-.52-.33-.21-.62-.46-.89-.75s-.48-.64-.64-1.03c-.16-.39-.24-.84-.24-1.34 0-.54.12-1.05.35-1.52.23-.47.55-.87.96-1.23.41-.35.9-.62 1.46-.81.57-.2 1.19-.29 1.86-.29.8 0 1.57.16 2.31.47.74.31 1.38.74 1.91 1.27l-1.24 1.55c-.45-.36-.91-.65-1.38-.86-.47-.21-1-.31-1.59-.31-.65 0-1.18.15-1.57.43-.39.29-.59.69-.59 1.19 0 .27.06.5.18.68.12.19.28.36.48.51.2.15.44.28.71.4.27.12.54.24.82.35l1.87.78c.41.17.78.37 1.12.59.34.23.63.49.87.78.24.29.44.64.58 1.02.14.39.21.83.21 1.34 0 .56-.11 1.09-.33 1.58-.22.49-.55.92-.97 1.29-.42.37-.94.67-1.55.88-.61.22-1.3.33-2.07.33-.92 0-1.81-.18-2.67-.53-.86-.35-1.62-.85-2.28-1.49l1.43-1.66zm11.11-4.976h-1.47v-1.806l1.595-.104.3-2.814h2.02v2.814h2.62v1.91h-2.62v4.914c0 1.205.49 1.807 1.45 1.807.19 0 .37-.02.56-.06.19-.04.36-.1.52-.17l.42 1.79c-.28.1-.6.19-.95.27-.35.08-.74.12-1.14.12-.6 0-1.11-.09-1.52-.27-.41-.18-.75-.43-1.01-.76s-.44-.72-.56-1.17c-.12-.45-.18-.96-.18-1.52V17.1zm6.467 5.63c0-1.107.483-1.962 1.45-2.563.967-.6 2.505-1.02 4.62-1.26 0-.266-.036-.52-.105-.767-.07-.245-.18-.462-.326-.65-.146-.188-.336-.337-.566-.442-.23-.104-.522-.156-.872-.156-.52 0-1.02.098-1.5.293-.484.197-.95.435-1.397.715l-.883-1.617c.574-.364 1.215-.68 1.922-.945.707-.265 1.473-.398 2.3-.398 1.302 0 2.268.38 2.897 1.145.63.763.945 1.865.945 3.307V25.5h-1.975l-.188-1.134h-.063c-.46.392-.955.722-1.48.987-.524.266-1.096.398-1.71.398-.91 0-1.65-.27-2.217-.83-.57-.55-.854-1.28-.854-2.19zm2.35-.19c0 .46.138.797.41 1.007.272.21.628.314 1.062.314.42 0 .805-.09 1.154-.29.35-.19.71-.47 1.09-.84v-2.31c-.7.09-1.29.2-1.77.34s-.86.3-1.15.48c-.29.18-.5.38-.62.6-.12.22-.19.46-.19.72zm9.077-7.35h1.995l.168 1.385h.084c.462-.448.962-.833 1.502-1.155.53-.322 1.16-.482 1.88-.482 1.1 0 1.91.354 2.41 1.06.5.706.75 1.72.75 3.035V25.5h-2.42v-6.152c0-.854-.13-1.457-.38-1.807-.25-.35-.67-.52-1.24-.52-.45 0-.85.11-1.19.33-.35.22-.73.54-1.17.96v7.2h-2.42V15.19zm11.13 5.165c0-.84.122-1.597.368-2.27.244-.67.57-1.238.977-1.7.405-.462.87-.82 1.396-1.07.53-.253 1.07-.378 1.63-.378.59 0 1.09.102 1.49.305.41.203.82.48 1.22.828l-.08-1.658v-3.738h2.42V25.5h-1.99l-.17-1.113h-.08c-.37.38-.81.7-1.32.967-.5.266-1.04.398-1.6.398-1.3 0-2.33-.473-3.1-1.418-.77-.944-1.15-2.272-1.15-3.98zm2.5-.02c0 1.12.2 1.97.6 2.55.4.58.976.872 1.73.872.772 0 1.492-.385 2.164-1.155v-4.81c-.364-.32-.718-.545-1.06-.67-.345-.127-.69-.19-1.04-.19-.672 0-1.24.295-1.7.883-.46.587-.69 1.427-.69 2.52zm9.53 2.395c0-1.107.484-1.962 1.45-2.563.966-.602 2.505-1.02 4.62-1.26 0-.266-.035-.52-.105-.767-.07-.247-.18-.462-.326-.65-.15-.19-.34-.337-.57-.442-.23-.104-.52-.156-.87-.156-.52 0-1.02.098-1.51.293-.49.197-.95.435-1.4.715l-.88-1.617c.57-.364 1.21-.68 1.92-.945.71-.265 1.47-.398 2.3-.398 1.3 0 2.27.38 2.9 1.145.63.763.94 1.865.94 3.307V25.5h-1.97l-.19-1.134h-.07c-.47.392-.96.722-1.48.987s-1.1.398-1.72.398c-.91 0-1.65-.27-2.22-.83-.59-.55-.87-1.28-.87-2.19zm2.35-.19c0 .46.137.797.41 1.007.272.21.626.314 1.06.314.42 0 .805-.09 1.155-.29.35-.19.714-.47 1.093-.84v-2.31c-.7.09-1.29.2-1.765.34-.476.14-.858.3-1.145.48-.287.18-.493.38-.62.6-.12.23-.18.46-.18.72zm9.07-7.35h1.995l.168 1.825h.084c.363-.672.805-1.186 1.322-1.543.516-.357 1.05-.535 1.59-.535.49 0 .88.07 1.17.21l-.42 2.1c-.19-.056-.35-.098-.51-.126-.16-.02-.35-.04-.57-.04-.41 0-.84.16-1.28.47-.45.32-.84.87-1.16 1.65v6.3h-2.41V15.19zm7 5.165c0-.84.122-1.597.367-2.27.244-.67.57-1.238.977-1.7.406-.462.87-.82 1.396-1.07.526-.25 1.067-.378 1.627-.378.588 0 1.086.102 1.492.305.4.203.81.48 1.21.828l-.09-1.658v-3.738h2.41V25.5h-2l-.17-1.113h-.09c-.38.38-.82.7-1.33.967-.51.267-1.04.398-1.6.398-1.3 0-2.33-.473-3.1-1.418-.78-.944-1.16-2.272-1.16-3.98zm2.49-.02c0 1.12.2 1.97.6 2.55.398.582.977.872 1.732.872.77 0 1.49-.385 2.162-1.155v-4.81c-.363-.32-.717-.545-1.06-.67-.344-.127-.69-.19-1.04-.19-.672 0-1.238.295-1.7.883-.45.587-.69 1.427-.69 2.52zM73.545 36.71c0-.987.13-1.88.39-2.678s.624-1.48 1.092-2.043c.47-.57 1.032-1 1.69-1.3.66-.3 1.388-.45 2.186-.45.722 0 1.362.15 1.92.45.557.3 1 .65 1.33 1.04l-.533.57c-.33-.38-.722-.69-1.178-.92-.456-.23-.97-.36-1.54-.36-.683 0-1.3.13-1.852.4-.55.26-1.02.64-1.406 1.13-.387.48-.68 1.08-.883 1.77-.2.69-.3 1.48-.3 2.35 0 .87.1 1.66.31 2.36s.5 1.3.88 1.8.84.87 1.38 1.15c.54.27 1.15.4 1.82.4.65 0 1.22-.12 1.72-.38.5-.25.98-.64 1.44-1.16l.53.56c-.48.56-1.02.99-1.61 1.31-.59.32-1.29.47-2.11.47-.77 0-1.48-.15-2.12-.46-.64-.3-1.2-.74-1.66-1.3-.46-.56-.82-1.25-1.07-2.05-.25-.81-.38-1.71-.38-2.71zm10.66 1.75c0-.76.11-1.44.332-2.044.222-.6.52-1.104.893-1.51.373-.406.807-.716 1.3-.932.495-.215 1.015-.322 1.56-.322.545 0 1.066.107 1.567.322.5.216.937.526 1.312.932.37.405.67.91.89 1.51.22.603.33 1.283.33 2.043 0 .76-.11 1.43-.33 2.02-.23.59-.52 1.08-.9 1.49-.38.4-.82.71-1.32.93-.5.21-1.02.32-1.57.32s-1.07-.11-1.56-.32c-.5-.22-.93-.53-1.3-.93-.38-.41-.67-.9-.9-1.49-.23-.59-.33-1.27-.33-2.03zm.873 0c0 .595.083 1.14.247 1.633.164.493.39.92.675 1.273.285.354.624.63 1.016.826.392.196.817.295 1.273.295.45 0 .88-.1 1.28-.295.4-.195.74-.472 1.02-.826s.51-.78.67-1.273c.16-.494.25-1.038.25-1.634 0-.61-.09-1.16-.25-1.66-.17-.5-.39-.92-.68-1.28-.29-.36-.63-.64-1.03-.84-.4-.2-.83-.3-1.28-.3-.46 0-.88.1-1.28.29-.4.19-.73.47-1.02.83-.29.36-.51.79-.68 1.28-.17.49-.25 1.05-.25 1.65zm9.292 0c0-.735.106-1.4.32-1.996.217-.595.51-1.102.885-1.52.375-.418.804-.738 1.292-.96.488-.222 1.004-.332 1.55-.332.556 0 1.04.098 1.452.294.41.196.84.473 1.3.827l-.04-1.673v-3.762h.83V43h-.73l-.08-1.178h-.06c-.37.367-.8.693-1.3.98-.5.287-1.06.426-1.67.426-1.16 0-2.07-.408-2.76-1.225-.68-.817-1.02-1.998-1.02-3.544zm.892 0c0 .607.066 1.158.2 1.652s.325.915.58 1.264c.252.348.565.62.94.816.375.196.8.295 1.28.295.508 0 .992-.13 1.454-.39.463-.26.935-.63 1.416-1.11V35.57c-.48-.43-.934-.733-1.358-.91-.424-.177-.858-.268-1.302-.268-.455 0-.88.104-1.273.313-.394.21-.73.494-1.02.855-.29.36-.51.792-.68 1.292-.16.502-.25 1.037-.25 1.607zm9.438 0c0-.748.11-1.42.333-2.015.22-.596.52-1.1.893-1.51.373-.412.8-.73 1.273-.95.472-.22.96-.333 1.47-.333 1.09 0 1.94.367 2.56 1.102.62.735.93 1.773.93 3.116v.342s-.02.23-.04.342h-6.58c.01.57.1 1.1.26 1.587.16.488.39.91.69 1.26.29.35.65.62 1.07.82.42.2.88.3 1.4.3.49 0 .94-.07 1.34-.22.39-.14.77-.34 1.11-.59l.34.65c-.37.22-.77.42-1.21.61-.44.19-.99.29-1.67.29-.58 0-1.13-.1-1.64-.32-.51-.21-.96-.53-1.34-.94-.38-.41-.68-.91-.9-1.5-.21-.59-.32-1.26-.32-2zm6.67-.552c0-1.178-.24-2.062-.722-2.65-.482-.588-1.134-.884-1.957-.884-.39 0-.76.082-1.12.247-.36.166-.67.4-.96.71-.28.31-.52.68-.7 1.11-.18.44-.3.93-.35 1.48h5.81zm6.75 2.832c.457.52 1 .93 1.635 1.233.633.305 1.31.456 2.033.456.962 0 1.723-.23 2.28-.7.557-.46.835-1.07.835-1.82 0-.4-.06-.72-.18-.99s-.282-.5-.484-.7c-.21-.2-.45-.37-.72-.52-.27-.15-.56-.29-.87-.43l-1.9-.86c-.28-.12-.57-.26-.87-.42-.3-.17-.57-.37-.82-.62s-.45-.54-.62-.88c-.17-.34-.25-.74-.25-1.21 0-.46.09-.87.27-1.25.18-.38.44-.7.76-.97s.71-.49 1.16-.64c.45-.16.93-.23 1.45-.23.76 0 1.43.15 2.02.44.58.3 1.07.65 1.45 1.05l-.49.59c-.37-.39-.8-.71-1.29-.94-.49-.23-1.06-.35-1.69-.35-.84 0-1.51.2-2.02.6-.51.4-.76.95-.76 1.63 0 .37.07.68.21.93.14.26.31.47.53.66.21.18.45.34.7.47.25.13.49.25.72.35l1.9.84c.35.15.69.32 1 .51.32.19.6.41.84.67.24.25.43.55.58.9.14.35.22.76.22 1.24s-.1.93-.29 1.34c-.19.41-.46.77-.81 1.06-.35.3-.77.53-1.26.7-.49.17-1.05.25-1.65.25-.92 0-1.73-.17-2.44-.52s-1.32-.8-1.81-1.36l.56-.61zm10.41-6.138h-1.425v-.646l1.443-.076.114-2.64h.722v2.64h2.642v.722h-2.642v5.947c0 .29.022.55.066.78.045.23.124.43.238.6.113.17.27.3.465.4.197.09.453.14.77.14.178 0 .37-.03.58-.09.21-.06.396-.13.56-.2l.23.68c-.267.1-.533.18-.8.24s-.493.09-.683.09c-.443 0-.81-.07-1.103-.2-.293-.13-.525-.32-.702-.56-.178-.24-.302-.53-.37-.88-.07-.34-.105-.72-.105-1.12V34.6zm4.96 11.733c.127.03.26.047.4.047.57 0 1.045-.228 1.424-.684.38-.456.685-1.033.912-1.73l.248-.797-3.744-9.29h.912l2.205 5.74c.14.38.294.8.465 1.26.17.46.345.89.522 1.29h.076c.14-.4.282-.83.427-1.29.146-.45.282-.87.41-1.25l1.956-5.74h.854l-3.61 10.26c-.126.38-.28.75-.465 1.12-.184.36-.4.69-.646.97-.248.29-.532.51-.855.69-.32.17-.68.26-1.09.26-.34 0-.65-.06-.93-.19l.19-.74c.12.04.23.07.36.1zm9.04-16.995h.836V41.9c0 .2.037.35.113.445.075.095.17.143.28.143h.12c.04 0 .11-.013.22-.038l.15.684c-.09.025-.18.048-.27.066-.09.02-.21.028-.34.028-.75 0-1.12-.48-1.12-1.443V29.34zm3.75 9.12c0-.748.11-1.42.332-2.015.223-.596.52-1.1.894-1.51.374-.412.798-.73 1.272-.95.476-.223.967-.333 1.473-.333 1.09 0 1.95.367 2.57 1.102.62.735.93 1.773.93 3.116v.342s-.01.23-.03.342h-6.57c.01.57.1 1.1.27 1.587.17.488.4.91.7 1.26.3.35.66.62 1.08.82.42.2.89.3 1.41.3.5 0 .94-.07 1.34-.22.4-.14.77-.34 1.11-.59l.35.65c-.36.22-.77.42-1.2.61-.43.19-.99.29-1.66.29-.58 0-1.13-.1-1.64-.32-.51-.21-.96-.53-1.34-.94-.38-.41-.68-.91-.9-1.5-.21-.59-.32-1.26-.32-2zm6.66-.552c0-1.178-.242-2.062-.723-2.65-.48-.59-1.134-.884-1.957-.884-.393 0-.767.082-1.12.247-.353.166-.675.4-.96.71-.285.31-.52.68-.703 1.11-.184.44-.3.93-.352 1.48h5.81z\"/></svg>\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "eslintrc.json",
          "type": "blob",
          "size": 0.04,
          "content": "{\n  \"extends\": [\"standard\", \"standard-jsx\"]\n}\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.21,
          "content": "/*! standard. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nimport { StandardEngine } from 'standard-engine'\nimport options from './lib/options.js'\n\nexport default new StandardEngine(options)\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.07,
          "content": "{\n  \"name\": \"standard\",\n  \"description\": \"JavaScript Standard Style\",\n  \"version\": \"17.1.2\",\n  \"author\": {\n    \"name\": \"Feross Aboukhadijeh\",\n    \"email\": \"feross@feross.org\",\n    \"url\": \"https://feross.org\"\n  },\n  \"bin\": {\n    \"standard\": \"bin/cmd.cjs\"\n  },\n  \"type\": \"module\",\n  \"bugs\": {\n    \"url\": \"https://github.com/standard/standard/issues\"\n  },\n  \"dependencies\": {\n    \"eslint\": \"^8.41.0\",\n    \"eslint-config-standard\": \"17.1.0\",\n    \"eslint-config-standard-jsx\": \"^11.0.0\",\n    \"eslint-plugin-import\": \"^2.27.5\",\n    \"eslint-plugin-n\": \"^15.7.0\",\n    \"eslint-plugin-promise\": \"^6.1.1\",\n    \"eslint-plugin-react\": \"^7.36.1\",\n    \"standard-engine\": \"^15.1.0\",\n    \"version-guard\": \"^1.1.1\"\n  },\n  \"devDependencies\": {\n    \"cross-spawn\": \"^7.0.3\",\n    \"hallmark\": \"^4.2.0\",\n    \"minimist\": \"^1.2.8\",\n    \"run-parallel-limit\": \"^1.1.0\",\n    \"run-series\": \"^1.1.9\",\n    \"simple-get\": \"^4.0.1\",\n    \"tape\": \"^5.6.3\"\n  },\n  \"engines\": {\n    \"node\": \"^12.22.0 || ^14.17.0 || >=16.0.0\"\n  },\n  \"homepage\": \"https://standardjs.com\",\n  \"keywords\": [\n    \"JavaScript Standard Style\",\n    \"check\",\n    \"checker\",\n    \"code\",\n    \"code checker\",\n    \"code linter\",\n    \"code standards\",\n    \"code style\",\n    \"enforce\",\n    \"eslint\",\n    \"hint\",\n    \"jscs\",\n    \"jshint\",\n    \"lint\",\n    \"policy\",\n    \"quality\",\n    \"simple\",\n    \"standard\",\n    \"standard style\",\n    \"style\",\n    \"style checker\",\n    \"style linter\",\n    \"verify\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"index.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/standard/standard.git\"\n  },\n  \"scripts\": {\n    \"test\": \"npm run test-internal && npm run test-external\",\n    \"test-internal\": \"./bin/cmd.cjs --verbose && tape test/*.js\",\n    \"test-external\": \"tape test/external/*.js\",\n    \"update-authors\": \"./tools/update-authors.sh && hallmark --fix AUTHORS.md\"\n  },\n  \"funding\": [\n    {\n      \"type\": \"github\",\n      \"url\": \"https://github.com/sponsors/feross\"\n    },\n    {\n      \"type\": \"patreon\",\n      \"url\": \"https://www.patreon.com/feross\"\n    },\n    {\n      \"type\": \"consulting\",\n      \"url\": \"https://feross.org/support\"\n    }\n  ]\n}\n"
        },
        {
          "name": "sticker.png",
          "type": "blob",
          "size": 8.9,
          "content": null
        },
        {
          "name": "sticker.svg",
          "type": "blob",
          "size": 4.54,
          "content": "<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"><svg width=\"100%\" height=\"100%\" viewBox=\"0 0 755 871\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;\"><g id=\"logo\"><path id=\"template\" d=\"M0,216.435l375.822,-216.435l378.345,216.435l0,437.963l-375.823,216.435l-378.344,-216.435l0,-437.963Z\" style=\"fill:#f3df49;\"/><path d=\"M83.871,382.667c23.45,0 30.625,-11.2 30.625,-24.85c0,-15.75 -13.65,-20.825 -24.5,-23.275c-10.15,-2.275 -14.875,-2.8 -14.875,-7c0,-2.975 2.625,-4.375 8.05,-4.375c5.6,0 10.85,2.625 14.35,5.6l12.6,-13.475c-6.125,-6.3 -14.875,-10.325 -27.125,-10.325c-15.925,0 -28.875,6.825 -28.875,23.625c0,15.575 11.375,21.175 21.525,23.8c12.075,3.15 16.8,3.15 16.8,7.175c0,3.15 -2.45,4.55 -10.15,4.55c-7,0 -13.475,-2.975 -18.55,-7.875l-13.825,12.25c6.475,7.7 16.625,14.175 33.95,14.175Z\" style=\"fill:#2e2e2c;fill-rule:nonzero;\"/><path d=\"M159.471,383.017c10.85,0 17.15,-3.85 20.825,-6.825l-8.925,-16.45c-1.575,1.05 -4.375,3.15 -8.225,3.15c-3.675,0 -6.125,-1.575 -6.125,-9.1l0,-27.65l19.075,0l0,-19.6l-19.075,0l0,-38.85l-23.45,0l0,38.85l-11.025,0l0,19.6l11.025,0l0,26.95c0,22.4 10.85,29.925 25.9,29.925Z\" style=\"fill:#2e2e2c;fill-rule:nonzero;\"/><path d=\"M238.921,336.817l-17.325,0c-18.375,0 -30.45,6.475 -30.45,22.4c0,17.325 12.6,23.45 26.25,23.45c9.975,0 16.45,-3.325 22.05,-11.9l-0.525,10.325l23.45,0l0,-42.35c0,-23.45 -14.525,-33.775 -33.6,-33.775c-17.5,0 -25.375,5.425 -32.375,12.25l13.125,14c3.325,-2.975 8.05,-6.825 16.975,-6.825c7.875,0 12.075,3.85 12.425,12.425ZM238.921,350.817l0,2.975c0,6.3 -4.9,10.5 -14.525,10.5c-6.65,0 -10.15,-2.45 -10.15,-6.65c0,-4.2 2.625,-6.825 8.575,-6.825l16.1,0Z\" style=\"fill:#2e2e2c;fill-rule:nonzero;\"/><path d=\"M280.396,381.092l23.625,0l0,-39.9c0,-9.45 5.6,-14.7 15.05,-14.7c8.4,0 12.425,4.725 12.425,13.125l0,41.475l23.625,0l0,-43.05c0,-21.175 -11.725,-33.075 -28,-33.075c-10.325,0 -19.075,4.9 -23.625,13.825l0.525,-12.25l-23.625,0l0,74.55Z\" style=\"fill:#2e2e2c;fill-rule:nonzero;\"/><path d=\"M404.471,382.667c11.375,0 19.25,-4.55 23.45,-12.425l-0.525,10.85l23.625,0l0,-126.35l-23.625,0l0,62.3c-4.725,-7.35 -11.375,-12.075 -23.275,-12.075c-18.025,0 -33.425,15.75 -33.425,38.675c0,22.925 15.575,39.025 33.775,39.025ZM411.296,362.017c-9.975,0 -16.275,-6.65 -16.275,-18.375c0,-11.025 6.3,-17.85 16.275,-17.85c10.15,0 16.8,6.825 16.8,17.85c0,11.725 -6.65,18.375 -16.8,18.375Z\" style=\"fill:#2e2e2c;fill-rule:nonzero;\"/><path d=\"M513.496,336.817l-17.325,0c-18.375,0 -30.45,6.475 -30.45,22.4c0,17.325 12.6,23.45 26.25,23.45c9.975,0 16.45,-3.325 22.05,-11.9l-0.525,10.325l23.45,0l0,-42.35c0,-23.45 -14.525,-33.775 -33.6,-33.775c-17.5,0 -25.375,5.425 -32.375,12.25l13.125,14c3.325,-2.975 8.05,-6.825 16.975,-6.825c7.875,0 12.075,3.85 12.425,12.425ZM513.496,350.817l0,2.975c0,6.3 -4.9,10.5 -14.525,10.5c-6.65,0 -10.15,-2.45 -10.15,-6.65c0,-4.2 2.625,-6.825 8.575,-6.825l16.1,0Z\" style=\"fill:#2e2e2c;fill-rule:nonzero;\"/><path d=\"M554.971,381.092l23.625,0l0,-33.075c0,-15.925 5.775,-20.825 16.45,-20.825c3.325,0 6.125,0.875 9.1,2.275l7.525,-21.525c-2.975,-1.575 -6.65,-2.975 -11.55,-2.975c-7.7,0 -16.45,2.8 -21.875,15.05l0.35,-13.475l-23.625,0l0,74.55Z\" style=\"fill:#2e2e2c;fill-rule:nonzero;\"/><path d=\"M652.271,382.667c11.375,0 19.25,-4.55 23.45,-12.425l-0.525,10.85l23.625,0l0,-126.35l-23.625,0l0,62.3c-4.725,-7.35 -11.375,-12.075 -23.275,-12.075c-18.025,0 -33.425,15.75 -33.425,38.675c0,22.925 15.575,39.025 33.775,39.025ZM659.096,362.017c-9.975,0 -16.275,-6.65 -16.275,-18.375c0,-11.025 6.3,-17.85 16.275,-17.85c10.15,0 16.8,6.825 16.8,17.85c0,11.725 -6.65,18.375 -16.8,18.375Z\" style=\"fill:#2e2e2c;fill-rule:nonzero;\"/><path d=\"M285.365,658.563c38.75,0 65.312,-20.625 65.312,-65.938l0,-149.375l-43.75,0l0,148.75c0,21.875 -9.062,27.5 -23.437,27.5c-15,0 -21.25,-10.312 -28.125,-22.5l-35.625,21.563c10.312,21.875 30.625,40 65.625,40Z\" style=\"fill:#2e2e2c;fill-rule:nonzero;\"/><path d=\"M454.115,658.563c41.562,0 72.5,-21.563 72.5,-60.938c0,-36.562 -20.938,-52.813 -58.125,-68.75l-10.938,-4.688c-18.75,-8.124 -26.875,-13.437 -26.875,-26.562c0,-10.625 8.125,-18.75 20.938,-18.75c12.5,0 20.625,5.313 28.125,18.75l34.062,-21.875c-14.375,-25.312 -34.375,-35 -62.187,-35c-39.063,0 -64.063,25 -64.063,57.813c0,35.625 20.938,52.5 52.5,65.937l10.938,4.688c20,8.75 31.875,14.062 31.875,29.062c0,12.5 -11.563,21.563 -29.688,21.563c-21.562,0 -33.75,-11.25 -43.125,-26.563l-35.625,20.625c12.813,25.313 39.063,44.688 79.688,44.688Z\" style=\"fill:#2e2e2c;fill-rule:nonzero;\"/></g></svg>"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}