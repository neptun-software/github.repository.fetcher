{
  "metadata": {
    "timestamp": 1736557368325,
    "page": 342,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "TanStack/query",
      "stars": 43301,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.14,
          "content": "root = true\n\n[*]\ncharset = utf-8\nindent_style = space\nindent_size = 2\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.07,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.56,
          "content": "\n# See https://help.github.com/ignore-files/ for more about ignoring files.\n\n# dependencies\nnode_modules\npackage-lock.json\nyarn.lock\n\n# builds\nbuild\ncoverage\ndist\n\n# misc\n.DS_Store\n.env\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n.next\n\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n.history\nsize-plugin.json\nstats-hydration.json\nstats.json\nstats.html\n.vscode/settings.json\n\n*.log\n*.tsbuildinfo\n.angular\n.cache\n.idea\n.nx/cache\n.nx/workspace-data\n.pnpm-store\n.svelte-kit\n.tsup\n.vinxi\ntemp\n\nvite.config.js.timestamp-*\nvite.config.ts.timestamp-*\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.07,
          "content": "link-workspace-packages=true\nprefer-workspace-packages=true\nprovenance=true\n"
        },
        {
          "name": ".nvmrc",
          "type": "blob",
          "size": 0.01,
          "content": "22.12.0\n"
        },
        {
          "name": ".nx",
          "type": "tree",
          "content": null
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.25,
          "content": "**/.next\n**/.nx/cache\n**/.svelte-kit\n**/build\n**/coverage\n**/dist\n**/query-codemods/**/__testfixtures__\npnpm-lock.yaml\npackages/**/tsup.config.bundled*.mjs\n**/tsconfig.vitest-temp.json\n\n# API Extractor report\npackages/angular-query-experimental/etc/*.md\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.46,
          "content": "# Contributing\n\n## Questions\n\nIf you have questions about implementation details, help or support, then please use our dedicated community forum at [GitHub Discussions](https://github.com/TanStack/query/discussions) **PLEASE NOTE:** If you choose to instead open an issue for your question, your issue will be immediately closed and redirected to the forum.\n\n## Reporting Issues\n\nIf you have found what you think is a bug, please [file an issue](https://github.com/TanStack/query/issues/new/choose). **PLEASE NOTE:** Issues that are identified as implementation questions or non-issues will be immediately closed and redirected to [GitHub Discussions](https://github.com/TanStack/query/discussions)\n\n## Suggesting new features\n\nIf you are here to suggest a feature, first create an issue if it does not already exist. From there, we will discuss use-cases for the feature and then finally discuss how it could be implemented.\n\n## Development\n\nIf you have been assigned to fix an issue or develop a new feature, please follow these steps to get started:\n\n- Fork this repository.\n- Install dependencies\n\n  ```bash\n  pnpm install\n  ```\n\n  - We use [pnpm](https://pnpm.io/) v9 for package management (run in case of pnpm-related issues).\n\n    ```bash\n    corepack enable && corepack prepare\n    ```\n\n  - We use [nvm](https://github.com/nvm-sh/nvm) to manage node versions - please make sure to use the version mentioned in `.nvmrc`\n\n    ```bash\n    nvm use\n    ```\n\n- Build all packages.\n\n  ```bash\n  pnpm build:all\n  ```\n\n- Run development server.\n\n  ```bash\n  pnpm run watch\n  ```\n\n- Implement your changes and tests to files in the `src/` directory and corresponding test files.\n- Document your changes in the appropriate doc page.\n- Git stage your required changes and commit (see below commit guidelines).\n- Submit PR for review.\n\n### Running examples\n\n- Make sure you've installed the dependencies in the repo's root directory.\n\n  ```bash\n  pnpm install\n  ```\n\n- If you want to run the example against your local changes, run below in the repo's root directory. Otherwise, it will be run against the latest TanStack Query release.\n\n  ```bash\n  pnpm run watch\n  ```\n\n- Run below in the selected examples' directory.\n\n  ```bash\n  pnpm run dev\n  ```\n\n#### Note on `examples/react-native`\n\nReact Native example requires Expo to work. Please follow the instructions from example's README.md file to learn more.\n\n#### Note on standalone execution\n\nIf you want to run an example without installing dependencies for the whole repo, just follow instructions from the example's README.md file. It will be then run against the latest TanStack Query release.\n\n## Online one-click setup\n\nYou can use Gitpod (An Online Open Source VS Code like IDE which is free for Open Source) for developing online. With a single click it will start a workspace and automatically:\n\n- clone the `TanStack/query` repo.\n- install all the dependencies in `/` and `/docs`.\n- run below in the root(`/`) to Auto-build files.\n\n  ```bash\n  npm start\n  ```\n\n- run below in `/docs`.\n\n  ```bash\n  npm run dev\n  ```\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/TanStack/query)\n\n## Commit message conventions\n\n`TanStack/query` is using [Angular Commit Message Conventions](https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines).\n\nWe have very precise rules over how our git commit messages can be formatted. This leads to **more readable messages** that are easy to follow when looking through the **project history**.\n\n### Commit Message Format\n\nEach commit message consists of a **header**, a **body** and a **footer**. The header has a special\nformat that includes a **type**, a **scope** and a **subject**:\n\n```text\n<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>\n```\n\nThe **header** is mandatory and the **scope** of the header is optional.\n\nAny line of the commit message cannot be longer than 100 characters! This allows the message to be easier to read on GitHub as well as in various git tools.\n\n### Type\n\nMust be one of the following:\n\n- **feat**: A new feature\n- **fix**: A bug fix\n- **docs**: Documentation only changes\n- **style**: Changes that do not affect the meaning of the code (white-space, formatting, missing semicolons, etc.)\n- **refactor**: A code change that neither fixes a bug nor adds a feature\n- **perf**: A code change that improves performance\n- **test**: Adding missing or correcting existing tests\n- **chore**: Changes to the build process or auxiliary tools and libraries such as documentation generation\n\n### Scope\n\nThe scope could be anything specifying place of the commit change. For example `query-core`, `react-query` etc...\n\nYou can use `*` when the change affects more than a single scope.\n\n### Subject\n\nThe subject contains succinct description of the change:\n\n- use the imperative, present tense: \"change\" not \"changed\" nor \"changes\"\n- don't capitalize first letter\n- no dot (.) at the end\n\n### Body\n\nJust as in the **subject**, use the imperative, present tense: \"change\" not \"changed\" nor \"changes\". The body should include the motivation for the change and contrast this with previous behavior.\n\n### Footer\n\nThe footer should contain any information about **Breaking Changes** and is also the place to [reference GitHub issues that this commit closes](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue).\n\n**Breaking Changes** should start with the word `BREAKING CHANGE:` with a space or two newlines. The rest of the commit message is then used for this.\n\n### Example\n\nHere is an example of the release type that will be done based on a commit messages:\n\n| Commit message                                                                                                                                                                                    | Release type               |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------- |\n| fix(pencil): stop graphite breaking when too much pressure applied                                                                                                                                | Patch Release              |\n| feat(pencil): add `graphiteWidth` option                                                                                                                                                          | ~~Minor~~ Feature Release  |\n| perf(pencil): remove `graphiteWidth` option<br/><br/>BREAKING CHANGE: The `graphiteWidth` option has been removed.<br/>The default graphite width of 10mm is always used for performance reasons. | ~~Major~~ Breaking Release |\n\n### Revert\n\nIf the commit reverts a previous commit, it should begin with `revert:`, followed by the header of the reverted commit. In the body it should say: `This reverts commit <hash>.`, where the hash is the SHA of the commit being reverted.\n\n## Pull requests\n\nMaintainers merge pull requests by squashing all commits and editing the commit message if necessary using the GitHub user interface.\n\nUse an appropriate commit type. Be especially careful with breaking changes.\n\n## Releases\n\nFor each new commit added to `main` with `git push` or by merging a pull request or merging from another branch, a GitHub action is triggered and runs the `semantic-release` command to make a release if there are codebase changes since the last release that affect the package functionalities.\n"
        },
        {
          "name": "FUNDING.json",
          "type": "blob",
          "size": 0.1,
          "content": "{\n  \"drips\": {\n    \"ethereum\": {\n      \"ownedBy\": \"0xD5371B61b35E13F2ae354BE95081aD63FB383452\"\n    }\n  }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05,
          "content": "MIT License\n\nCopyright (c) 2021-present Tanner Linsley\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.75,
          "content": "<img referrerpolicy=\"no-referrer-when-downgrade\" src=\"https://static.scarf.sh/a.png?x-pxid=be2d8a11-9712-4c1d-9963-580b2d4fb133\" />\n\n![TanStack Query Header](https://github.com/TanStack/query/raw/main/media/repo-header.png)\n\nHooks for fetching, caching and updating asynchronous data in React, Solid, Svelte and Vue\n\n<a href=\"https://twitter.com/intent/tweet?button_hashtag=TanStack\" target=\"\\_parent\">\n  <img alt=\"#TanStack\" src=\"https://img.shields.io/twitter/url?color=%2308a0e9&label=%23TanStack&style=social&url=https%3A%2F%2Ftwitter.com%2Fintent%2Ftweet%3Fbutton_hashtag%3DTanStack\">\n</a><a href=\"https://discord.com/invite/WrRKjPJ\" target=\"\\_parent\">\n  <img alt=\"\" src=\"https://img.shields.io/badge/Discord-TanStack-%235865F2\" />\n</a><a href=\"https://www.npmjs.com/package/@tanstack/query-core\" target=\"\\_parent\">\n  <img alt=\"\" src=\"https://img.shields.io/npm/dm/@tanstack/query-core.svg\" />\n</a><a href=\"https://bundlejs.com/?q=%40tanstack%2Freact-query&config=%7B%22esbuild%22%3A%7B%22external%22%3A%5B%22react%22%2C%22react-dom%22%5D%7D%7D&badge=\" target=\"\\_parent\">\n  <img alt=\"\" src=\"https://deno.bundlejs.com/?q=@tanstack/react-query&config={%22esbuild%22:{%22external%22:[%22react%22,%22react-dom%22]}}&badge=detailed\" />\n</a><a href=\"#badge\">\n    <img alt=\"semantic-release\" src=\"https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg\">\n  </a><a href=\"https://github.com/TanStack/query/discussions\">\n  <img alt=\"Join the discussion on Github\" src=\"https://img.shields.io/badge/Github%20Discussions%20%26%20Support-Chat%20now!-blue\" />\n</a><a href=\"https://bestofjs.org/projects/tanstack-query\"><img alt=\"Best of JS\" src=\"https://img.shields.io/endpoint?url=https://bestofjs-serverless.now.sh/api/project-badge?fullName=TanStack%2Fquery%26since=daily\" /></a><a href=\"https://github.com/TanStack/query/\" target=\"\\_parent\">\n  <img alt=\"\" src=\"https://img.shields.io/github/stars/TanStack/query.svg?style=social&label=Star\" />\n</a><a href=\"https://twitter.com/tannerlinsley\" target=\"\\_parent\">\n  <img alt=\"\" src=\"https://img.shields.io/twitter/follow/tannerlinsley.svg?style=social&label=Follow\" />\n</a> <a href=\"https://gitpod.io/from-referrer/\">\n  <img src=\"https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod\" alt=\"Gitpod Ready-to-Code\"/>\n</a>\n\nEnjoy this library? Try the entire [TanStack](https://tanstack.com)! [TanStack Table](https://github.com/TanStack/table), [TanStack Router](https://github.com/tanstack/router), [TanStack Virtual](https://github.com/tanstack/virtual), [React Charts](https://github.com/TanStack/react-charts), [React Ranger](https://github.com/TanStack/ranger)\n\n## Visit [tanstack.com/query](https://tanstack.com/query) for docs, guides, API and more!\n\nStill on **React Query v2**? No problem! Check out the v2 docs here: https://github.com/TanStack/query/tree/2.x/docs/src/pages/docs.<br />\nStill on **React Query v3**? No problem! Check out the v3 docs here: https://tanstack.com/query/v3/docs/.<br />\nStill on **React Query v4**? No problem! Check out the v4 docs here: https://tanstack.com/query/v4/docs/.\n\n## Quick Features\n\n- Transport/protocol/backend agnostic data fetching (REST, GraphQL, promises, whatever!)\n- Auto Caching + Refetching (stale-while-revalidate, Window Refocus, Polling/Realtime)\n- Parallel + Dependent Queries\n- Mutations + Reactive Query Refetching\n- Multi-layer Cache + Automatic Garbage Collection\n- Paginated + Cursor-based Queries\n- Load-More + Infinite Scroll Queries w/ Scroll Recovery\n- Request Cancellation\n- [React Suspense](https://react.dev/reference/react/Suspense) + Fetch-As-You-Render Query Prefetching\n- Dedicated Devtools\n\n## Contributing\n\nView the contributing guidelines [here](/CONTRIBUTING.md)\n\n### [Become a Sponsor!](https://github.com/sponsors/tannerlinsley/)\n\n<!-- Use the force, Luke! -->\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 3.49,
          "content": "codecov:\n  max_report_age: off\n\ncoverage:\n  status:\n    project:\n      default:\n        target: auto\n        threshold: 1%\n        base: auto\n\ncomment:\n  layout: 'header, reach, diff, flags, components'\n  behavior: default\n  require_changes: false\n  require_base: false\n  require_head: true\n  hide_project_coverage: false\n\ncomponent_management:\n  individual_components:\n    - component_id: angular-query-devtools-experimental\n      name: '@tanstack/angular-query-devtools-experimental'\n      paths:\n        - packages/angular-query-devtools-experimental/**\n    - component_id: angular-query-experimental\n      name: '@tanstack/angular-query-experimental'\n      paths:\n        - packages/angular-query-experimental/**\n    - component_id: eslint-plugin-query\n      name: '@tanstack/eslint-plugin-query'\n      paths:\n        - packages/eslint-plugin-query/**\n    - component_id: query-async-storage-persister\n      name: '@tanstack/query-async-storage-persister'\n      paths:\n        - packages/query-async-storage-persister/**\n    - component_id: query-broadcast-client-experimental\n      name: '@tanstack/query-broadcast-client-experimental'\n      paths:\n        - packages/query-broadcast-client-experimental/**\n    - component_id: query-codemods\n      name: '@tanstack/query-codemods'\n      paths:\n        - packages/query-codemods/**\n    - component_id: query-core\n      name: '@tanstack/query-core'\n      paths:\n        - packages/query-core/**\n    - component_id: query-devtools\n      name: '@tanstack/query-devtools'\n      paths:\n        - packages/query-devtools/**\n    - component_id: query-persist-client-core\n      name: '@tanstack/query-persist-client-core'\n      paths:\n        - packages/query-persist-client-core/**\n    - component_id: query-sync-storage-persister\n      name: '@tanstack/query-sync-storage-persister'\n      paths:\n        - packages/query-sync-storage-persister/**\n    - component_id: react-query\n      name: '@tanstack/react-query'\n      paths:\n        - packages/react-query/**\n    - component_id: react-query-devtools\n      name: '@tanstack/react-query-devtools'\n      paths:\n        - packages/react-query-devtools/**\n    - component_id: react-query-next-experimental\n      name: '@tanstack/react-query-next-experimental'\n      paths:\n        - packages/react-query-next-experimental/**\n    - component_id: react-query-persist-client\n      name: '@tanstack/react-query-persist-client'\n      paths:\n        - packages/react-query-persist-client/**\n    - component_id: solid-query\n      name: '@tanstack/solid-query'\n      paths:\n        - packages/solid-query/**\n    - component_id: solid-query-devtools\n      name: '@tanstack/solid-query-devtools'\n      paths:\n        - packages/solid-query-devtools/**\n    - component_id: solid-query-persist-client\n      name: '@tanstack/solid-query-persist-client'\n      paths:\n        - packages/solid-query-persist-client/**\n    - component_id: svelte-query\n      name: '@tanstack/svelte-query'\n      paths:\n        - packages/svelte-query/**\n    - component_id: svelte-query-devtools\n      name: '@tanstack/svelte-query-devtools'\n      paths:\n        - packages/svelte-query-devtools/**\n    - component_id: svelte-query-persist-client\n      name: '@tanstack/svelte-query-persist-client'\n      paths:\n        - packages/svelte-query-persist-client/**\n    - component_id: vue-query\n      name: '@tanstack/vue-query'\n      paths:\n        - packages/vue-query/**\n    - component_id: vue-query-devtools\n      name: '@tanstack/vue-query-devtools'\n      paths:\n        - packages/vue-query-devtools/**\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "eslint.config.js",
          "type": "blob",
          "size": 1.72,
          "content": "// @ts-check\n\n// @ts-ignore Needed due to moduleResolution Node vs Bundler\nimport { tanstackConfig } from '@tanstack/config/eslint'\nimport pluginCspell from '@cspell/eslint-plugin'\nimport vitest from '@vitest/eslint-plugin'\n\nexport default [\n  ...tanstackConfig,\n  {\n    name: 'tanstack/temp',\n    plugins: {\n      cspell: pluginCspell,\n    },\n    rules: {\n      'cspell/spellchecker': [\n        'warn',\n        {\n          cspell: {\n            words: [\n              'codemod', // We support our codemod\n              'combinate', // Library name\n              'extralight', // Our public interface\n              'jscodeshift',\n              'Promisable', // Our public interface\n              'retryer', // Our public interface\n              'solidjs', // Our target framework\n              'tabular-nums', // https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-numeric\n              'tanstack', // Our package scope\n              'todos', // Too general word to be caught as error\n              'TSES', // @typescript-eslint package's interface\n              'tsqd', // Our public interface (TanStack Query Devtools shorthand)\n              'tsup', // We use tsup as builder\n              'typecheck', // Field of vite.config.ts\n              'vue-demi', // dependency of @tanstack/vue-query\n            ],\n          },\n        },\n      ],\n      '@typescript-eslint/no-empty-function': 'off',\n      '@typescript-eslint/no-unsafe-function-type': 'off',\n      'no-case-declarations': 'off',\n    },\n  },\n  {\n    files: ['**/*.spec.ts*', '**/*.test.ts*', '**/*.test-d.ts*'],\n    plugins: { vitest },\n    rules: {\n      ...vitest.configs.recommended.rules,\n      'vitest/expect-expect': 'warn',\n    },\n    settings: { vitest: { typecheck: true } },\n  },\n]\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "integrations",
          "type": "tree",
          "content": null
        },
        {
          "name": "knip.json",
          "type": "blob",
          "size": 0.55,
          "content": "{\n  \"$schema\": \"https://unpkg.com/knip@5/schema.json\",\n  \"ignore\": [\".pnpmfile.cjs\", \"scripts/typedoc-remove-prefix.js\"],\n  \"ignoreDependencies\": [\n    \"@types/react\",\n    \"@types/react-dom\",\n    \"react\",\n    \"react-dom\"\n  ],\n  \"ignoreWorkspaces\": [\"examples/**\", \"integrations/**\"],\n  \"workspaces\": {\n    \"packages/query-codemods\": {\n      \"entry\": [\"src/v4/**/*.cjs\", \"src/v5/**/*.cjs\"],\n      \"ignore\": [\"**/__testfixtures__/**\"]\n    },\n    \"packages/vue-query\": {\n      \"ignore\": [\"**/__mocks__/**\"],\n      \"ignoreDependencies\": [\"vue2\", \"vue2.7\"]\n    }\n  }\n}\n"
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "nx.json",
          "type": "blob",
          "size": 1.57,
          "content": "{\n  \"$schema\": \"./node_modules/nx/schemas/nx-schema.json\",\n  \"defaultBase\": \"main\",\n  \"nxCloudAccessToken\": \"ZDdkNDA4MGEtYjNmYi00MWI4LWE1N2QtYTdlNmYxMGJlZWM2fHJlYWQ=\",\n  \"useInferencePlugins\": false,\n  \"parallel\": 5,\n  \"namedInputs\": {\n    \"sharedGlobals\": [\n      \"{workspaceRoot}/.nvmrc\",\n      \"{workspaceRoot}/package.json\",\n      \"{workspaceRoot}/scripts/getTsupConfig.js\",\n      \"{workspaceRoot}/tsconfig.json\"\n    ],\n    \"default\": [\n      \"sharedGlobals\",\n      \"{projectRoot}/**/*\",\n      \"!{projectRoot}/**/*.md\"\n    ],\n    \"production\": [\n      \"default\",\n      \"!{projectRoot}/tests/**/*\",\n      \"!{projectRoot}/eslint.config.js\"\n    ]\n  },\n  \"targetDefaults\": {\n    \"test:knip\": {\n      \"cache\": true,\n      \"inputs\": [\"{workspaceRoot}/**/*\"]\n    },\n    \"test:sherif\": {\n      \"cache\": true,\n      \"inputs\": [\"{workspaceRoot}/**/package.json\"]\n    },\n    \"test:eslint\": {\n      \"cache\": true,\n      \"dependsOn\": [\"^build\"],\n      \"inputs\": [\"default\", \"^production\", \"{workspaceRoot}/eslint.config.js\"]\n    },\n    \"test:lib\": {\n      \"cache\": true,\n      \"dependsOn\": [\"^build\"],\n      \"inputs\": [\"default\", \"^production\"],\n      \"outputs\": [\"{projectRoot}/coverage\"]\n    },\n    \"test:types\": {\n      \"cache\": true,\n      \"dependsOn\": [\"^build\"],\n      \"inputs\": [\"default\", \"^production\"]\n    },\n    \"build\": {\n      \"cache\": true,\n      \"dependsOn\": [\"^build\"],\n      \"inputs\": [\"production\", \"^production\"],\n      \"outputs\": [\"{projectRoot}/build\", \"{projectRoot}/dist\"]\n    },\n    \"test:build\": {\n      \"cache\": true,\n      \"dependsOn\": [\"build\"],\n      \"inputs\": [\"production\"]\n    }\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 3.08,
          "content": "{\n  \"name\": \"root\",\n  \"private\": true,\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/TanStack/query.git\"\n  },\n  \"packageManager\": \"pnpm@9.15.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"clean\": \"pnpm --filter \\\"./packages/**\\\" run clean\",\n    \"preinstall\": \"node -e \\\"if(process.env.CI == 'true') {console.log('Skipping preinstall...')} else {process.exit(1)}\\\" || npx -y only-allow pnpm\",\n    \"test\": \"pnpm run test:ci\",\n    \"test:pr\": \"nx affected --targets=test:sherif,test:knip,test:eslint,test:lib,test:types,test:build,build\",\n    \"test:ci\": \"nx run-many --targets=test:sherif,test:knip,test:eslint,test:lib,test:types,test:build,build\",\n    \"test:eslint\": \"nx affected --target=test:eslint --exclude=examples/**\",\n    \"test:format\": \"pnpm run prettier --check\",\n    \"test:sherif\": \"sherif -i typescript -p \\\"./integrations/*\\\" -p \\\"./examples/*\\\"\",\n    \"test:lib\": \"nx affected --target=test:lib --exclude=examples/**\",\n    \"test:lib:dev\": \"pnpm run test:lib && nx watch --all -- pnpm run test:lib\",\n    \"test:build\": \"nx affected --target=test:build --exclude=examples/**\",\n    \"test:types\": \"nx affected --target=test:types --exclude=examples/**\",\n    \"test:knip\": \"knip\",\n    \"build\": \"nx affected --target=build --exclude=examples/** --exclude=integrations/**\",\n    \"build:all\": \"nx run-many --target=build --exclude=examples/** --exclude=integrations/**\",\n    \"watch\": \"pnpm run build:all && nx watch --all -- pnpm run build:all\",\n    \"dev\": \"pnpm run watch\",\n    \"prettier\": \"prettier --ignore-unknown '**/*'\",\n    \"prettier:write\": \"pnpm run prettier --write\",\n    \"docs:generate\": \"node scripts/generateDocs.js\",\n    \"cipublish\": \"node scripts/publish.js\"\n  },\n  \"nx\": {\n    \"includedScripts\": [\n      \"test:sherif\",\n      \"test:knip\"\n    ]\n  },\n  \"devDependencies\": {\n    \"@arethetypeswrong/cli\": \"^0.15.3\",\n    \"@cspell/eslint-plugin\": \"^8.17.1\",\n    \"@eslint-react/eslint-plugin\": \"^1.19.0\",\n    \"@tanstack/config\": \"^0.14.2\",\n    \"@testing-library/jest-dom\": \"^6.6.3\",\n    \"@types/eslint\": \"^9.6.1\",\n    \"@types/node\": \"^22.9.3\",\n    \"@types/react\": \"^19.0.1\",\n    \"@types/react-dom\": \"^19.0.2\",\n    \"@vitest/coverage-istanbul\": \"^2.0.4\",\n    \"@vitest/eslint-plugin\": \"^1.1.16\",\n    \"cpy-cli\": \"^5.0.0\",\n    \"esbuild-plugin-file-path-extensions\": \"^2.1.2\",\n    \"eslint\": \"^9.15.0\",\n    \"eslint-plugin-react-hooks\": \"^5.1.0\",\n    \"jsdom\": \"^25.0.1\",\n    \"knip\": \"^5.40.0\",\n    \"nx\": \"^20.1.3\",\n    \"prettier\": \"^3.4.2\",\n    \"prettier-plugin-svelte\": \"^3.3.2\",\n    \"publint\": \"^0.2.12\",\n    \"react\": \"^19.0.0\",\n    \"react-dom\": \"^19.0.0\",\n    \"rimraf\": \"^6.0.1\",\n    \"sherif\": \"^1.0.0\",\n    \"tsup\": \"8.0.2\",\n    \"typescript\": \"5.7.2\",\n    \"typescript50\": \"npm:typescript@5.0\",\n    \"typescript51\": \"npm:typescript@5.1\",\n    \"typescript52\": \"npm:typescript@5.2\",\n    \"typescript53\": \"npm:typescript@5.3\",\n    \"typescript54\": \"npm:typescript@5.4\",\n    \"typescript55\": \"npm:typescript@5.5\",\n    \"typescript56\": \"npm:typescript@5.6\",\n    \"vite\": \"^5.3.5\",\n    \"vitest\": \"^2.0.4\"\n  },\n  \"pnpm\": {\n    \"overrides\": {\n      \"@types/react\": \"^19.0.1\",\n      \"@types/react-dom\": \"^19.0.2\",\n      \"eslint\": \"$eslint\"\n    }\n  }\n}\n"
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "pnpm-lock.yaml",
          "type": "blob",
          "size": 1193.23,
          "content": null
        },
        {
          "name": "pnpm-workspace.yaml",
          "type": "blob",
          "size": 0.21,
          "content": "packages:\n  - 'packages/*'\n  - 'integrations/*'\n  - 'examples/angular/*'\n  - 'examples/react/*'\n  - 'examples/solid/*'\n  - 'examples/svelte/*'\n  - 'examples/vue/*'\n  - '!examples/vue/2*'\n  - '!examples/vue/nuxt*'\n"
        },
        {
          "name": "prettier.config.js",
          "type": "blob",
          "size": 0.26,
          "content": "// @ts-check\n\n/** @type {import('prettier').Config} */\nconst config = {\n  semi: false,\n  singleQuote: true,\n  trailingComma: 'all',\n  plugins: ['prettier-plugin-svelte'],\n  overrides: [{ files: '*.svelte', options: { parser: 'svelte' } }],\n}\n\nexport default config\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.75,
          "content": "{\n  \"$schema\": \"https://json.schemastore.org/tsconfig\",\n  \"compilerOptions\": {\n    \"allowJs\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"allowUnreachableCode\": false,\n    \"allowUnusedLabels\": false,\n    \"checkJs\": true,\n    \"declaration\": true,\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"isolatedModules\": true,\n    \"lib\": [\"DOM\", \"DOM.Iterable\", \"ES2022\"],\n    \"module\": \"ES2022\",\n    \"moduleResolution\": \"Node\",\n    \"noEmit\": true,\n    \"noImplicitReturns\": true,\n    \"noUncheckedIndexedAccess\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"resolveJsonModule\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"target\": \"ES2020\"\n  },\n  \"include\": [\"eslint.config.js\", \"prettier.config.js\"]\n}\n"
        }
      ]
    }
  ]
}