{
  "metadata": {
    "timestamp": 1736709648898,
    "page": 1,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjU=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "swiftlang/swift-evolution",
      "stars": 15435,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0625,
          "content": "*.md linguist-detectable=true\n*.md linguist-documentation=false\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.109375,
          "content": "# Temporary files.\n*~\n\n# Xcode user data.\nxcuserdata\n\n# Finder metadata\n.DS_Store\n\n# Built site content.\n/_site\n"
        },
        {
          "name": ".nojekyll",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "404.html",
          "type": "blob",
          "size": 0.2685546875,
          "content": "<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<noscript>\n  <meta http-equiv=\"Refresh\" content=\"0; URL=https://www.swift.org/swift-evolution/\">\n</noscript>\n<script>\n  location.replace('https://www.swift.org/swift-evolution/' + location.hash)\n</script>\n<title>Swift Evolution</title>\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.220703125,
          "content": "# Welcome to the Swift community! \n\nContributions to Swift are welcomed and encouraged! Please see the [Contributing to Swift guide](https://www.swift.org/contributing/) and check out the [structure of the community](https://www.swift.org/community/#community-structure).\n\nTo be a truly great community, Swift needs to welcome developers from all walks of life, with different backgrounds, and with a wide range of experience. A diverse and friendly community will have more great ideas, more unique perspectives, and produce more great code. We will work diligently to make the Swift community welcoming to everyone.\n\nTo give clarity of what is expected of our members, Swift has adopted the code of conduct defined by the Contributor Covenant. This document is used across many open source communities, and we think it articulates our values well. For more, see the [Code of Conduct](https://www.swift.org/code-of-conduct/).\n\n## Contributing to Swift Evolution\n\nThis repository is not your standard codebase. It houses Swift evolution proposals and related process documents, mostly composed of markdown and text files. Pull requests that make minor editorial and administrative changes are always welcome, including fixing typos and grammar mistakes, repairing links, and maintaining document and repository metadata. Other pull requests must follow the [Swift evolution process](process.md):\n\n- New proposals and substantive changes to existing proposals should be [pitched on the evolution forums](https://forums.swift.org/c/evolution/pitches/5) before a PR is opened here.\n- Substantive changes to existing proposals require the permission of the proposal authors.\n- Substantive changes to existing proposals require the approval of the appropriate evolution workgroup if the proposal is in an Active Review, Accepted, or Rejected state.\n- New vision documents and substantive changes to existing vision documents require the approval of the appropriate evolution workgroup.\n- Substantive changes to the evolution process require the approval of the Core Team.\n- Conversations about the substance of a proposal should be held in an appropriate forums thread rather than in PR comments.  This centralizes the discussion and allows more of the community to participate.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.4814453125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n    1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n    2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n    3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n    4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n    5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n    6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n    7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n    8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n    9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n    END OF TERMS AND CONDITIONS\n\n    APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n    Copyright [yyyy] [name of copyright owner]\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n   \n   \n## Runtime Library Exception to the Apache 2.0 License: ##\n\n\n    As an exception, if you use this Software to compile your source code and\n    portions of this Software are embedded into the binary product as a result,\n    you may redistribute such product without providing attribution as would\n    otherwise be required by Sections 4(a), 4(b) and 4(d) of the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.5166015625,
          "content": "# Swift Evolution\n\n<https://www.swift.org/swift-evolution/>\n\nThis repository tracks the ongoing evolution of the Swift programming language, standard library, and package manager.\n\n## Goals and Release Notes\n\n* [Swift project focus areas in 2023](https://forums.swift.org/t/swift-project-focus-areas-in-2023/61522)\n* [On the road to Swift 6](https://forums.swift.org/t/on-the-road-to-swift-6/32862)\n* [CHANGELOG](https://github.com/apple/swift/blob/main/CHANGELOG.md)\n\n| Version   | Announced                                                                | Released                                                     |\n| :-------- | :----------------------------------------------------------------------- | :----------------------------------------------------------- |\n| Swift 6.1 | [2024-10-17](https://forums.swift.org/t/swift-6-1-release-process/75442) |\n| Swift 6.0 | [2024-02-22](https://forums.swift.org/t/swift-6-0-release-process/70220) | [2024-09-17](https://www.swift.org/blog/announcing-swift-6/) |\n| Swift 5.10 | [2023-08-23](https://forums.swift.org/t/swift-5-10-release-process/66911) | [2024-03-05](https://www.swift.org/blog/swift-5.10-released/) |\n| Swift 5.9 | [2023-03-06](https://forums.swift.org/t/swift-5-9-release-process/63557) | [2023-09-18](https://www.swift.org/blog/swift-5.9-released/) |\n| Swift 5.8 | [2022-11-19](https://forums.swift.org/t/swift-5-8-release-process/61540) | [2023-03-30](https://www.swift.org/blog/swift-5.8-released/) |\n| Swift 5.7 | [2022-03-29](https://forums.swift.org/t/swift-5-7-release-process/56316) | [2022-09-12](https://www.swift.org/blog/swift-5.7-released/) |\n| Swift 5.6 | [2021-11-10](https://forums.swift.org/t/swift-5-6-release-process/53412) | [2022-03-14](https://www.swift.org/blog/swift-5.6-released/) |\n| Swift 5.5 | [2021-03-12](https://forums.swift.org/t/swift-5-5-release-process/45644) | [2021-09-20](https://www.swift.org/blog/swift-5.5-released/) |\n| Swift 5.4 | [2020-11-11](https://forums.swift.org/t/swift-5-4-release-process/41936) | [2021-04-26](https://www.swift.org/blog/swift-5.4-released/) |\n| Swift 5.3 | [2020-03-25](https://www.swift.org/blog/5.3-release-process/)            | [2020-09-16](https://www.swift.org/blog/swift-5.3-released/) |\n| Swift 5.2 | [2019-09-24](https://www.swift.org/blog/5.2-release-process/)            | [2020-03-24](https://www.swift.org/blog/swift-5.2-released/) |\n| Swift 5.1 | [2019-02-18](https://www.swift.org/blog/5.1-release-process/)            | [2019-09-20](https://www.swift.org/blog/swift-5.1-released/) |\n| Swift 5.0 | [2018-09-25](https://www.swift.org/blog/5.0-release-process/)            | [2019-03-25](https://www.swift.org/blog/swift-5-released/)   |\n| Swift 4.2 | [2018-02-28](https://www.swift.org/blog/4.2-release-process/)            | [2018-09-17](https://www.swift.org/blog/swift-4.2-released/) |\n| Swift 4.1 | [2017-10-17](https://www.swift.org/blog/swift-4.1-release-process/)      | [2018-03-29](https://www.swift.org/blog/swift-4.1-released/) |\n| Swift 4.0 | [2017-02-16](https://www.swift.org/blog/swift-4.0-release-process/)      | [2017-09-19](https://www.swift.org/blog/swift-4.0-released/) |\n| Swift 3.1 | [2016-12-09](https://www.swift.org/blog/swift-3.1-release-process/)      | [2017-03-27](https://www.swift.org/blog/swift-3.1-released/) |\n| Swift 3.0 | [2016-05-06](https://www.swift.org/blog/swift-3.0-release-process/)      | [2016-09-13](https://www.swift.org/blog/swift-3.0-released/) |\n| Swift 2.2 | [2016-01-05](https://www.swift.org/blog/swift-2.2-release-process/)      | [2016-03-21](https://www.swift.org/blog/swift-2.2-released/) |\n"
        },
        {
          "name": "commonly_proposed.md",
          "type": "blob",
          "size": 9.6162109375,
          "content": "# Commonly Rejected Changes \n\nThis is a list of changes to the Swift language that are frequently proposed but that are unlikely to be accepted.  If you're interested in pursuing something in this space, please familiarize yourself with the discussions that we have already had.  In order to bring one of these topics up, you'll be expected to add new information to the discussion, not just to say, \"I really want this\" or \"this exists in some other language and I liked it there\".\n\nAdditionally, proposals for out-of-scope changes will not be scheduled for review. The [readme file](README.md) identifies a list of priorities for the next major release of Swift, and the [dashboard](https://www.swift.org/swift-evolution/) includes a list of changes that have been rejected after a formal review.\n\nSeveral of the discussions below refer to \"C family\" languages. This is intended to mean the extended family of languages that resemble C at a syntactic level, such as C++, C#, Objective-C, Java, and JavaScript. Swift embraces its C heritage. Where it deviates from other languages in the family, it does so because the feature was thought actively harmful (such as the pre/post-increment `++`) or to reduce needless clutter (such as `;` or parentheses in `if` statements).\n\n## Basic Syntax and Operators\n\n * [Replace `{}` brace syntax with Python-style indentation](https://forums.swift.org/t/brace-syntax/678/3): Surely a polarizing issue, but Swift will not change to use indentation for scoping instead of curly braces.\n\n * [Remove `;` semicolons](https://forums.swift.org/t/proposal-to-remove-semicolons/523/3): Semicolons within a line are an intentional expressivity feature.  Semicolons at the end of the line should be handled by a linter, not by the compiler.\n\n * [Replace logical operators (`&&`, `||`, `!`, etc.) with words like \"and\", \"or\", \"not\"](https://forums.swift.org/t/change-the-name-of-the-boolean-operators/30/2), and [allow non-punctuation operators](https://forums.swift.org/t/allowing-characters-for-use-as-custom-operators/952) and infix functions: The operator and identifier grammars are intentionally partitioned in Swift, which is a key part of how user-defined overloaded operators are supported.  Requiring the compiler to see the \"operator\" declaration to know how to parse a file would break the ability to be able to parse a Swift file without parsing all of its imports.  This has a major negative effect on tooling support. While not needing infix support, `not` would need operator or keyword status to omit the parentheses as `!` can, and `not somePredicate()` visually binds too loosely compared to `!somePredicate()`.\n\n * [Replace `?:` ternary operator](https://forums.swift.org/t/ternary-operator-suggestion/49/148): Definitely magical, but it serves a very important use-case for terse selection of different values.  Proposals for alternatives have been intensely discussed, but none have been \"better enough\" for it to make sense to diverge from the precedent established by the C family of languages.\n\n## Strings, Characters, and Collection Types\n\n * Change `Array<T>` subscript access to return `T?` or `T!` instead of `T`: The current array behavior is [intentional](https://forums.swift.org/t/proposal-add-safe-subquence-access-via-subscript-for-colloctiontype/516/7), as it accurately reflects the fact that out-of-bounds array access is a logic error. Changing the current behavior would slow `Array` accesses to an unacceptable degree. Changing the unlabeled array subscript to return an optional has come up [multiple](https://forums.swift.org/t/proposal-add-safe-subquence-access-via-subscript-for-colloctiontype/516/5) times before and is very unlikely to be accepted.\n\n## Control Flow, Closures, Optional Binding, and Error Handling\n\n * [Replace `continue` keyword with synonyms from other scripting languages (e.g. next, skip, advance, etc)](https://forums.swift.org/t/replace-continue-keyword/764/2): Swift is designed to feel like a member of the C family of languages.  Switching keywords away from C precedent without strong motivation is a non-goal.\n * [Remove support for `default:` in `switch` and just use `case _:`](https://forums.swift.org/t/remove-default-case-in-switch-case/360/4): `default` is widely used, `case _` is too magical, and `default` is widely precedented in many C family languages.\n * [Rename `guard` to `unless`](https://forums.swift.org/t/rename-guard-to-unless/934/7): It is a common request that `guard` be renamed `unless`. People requesting this change argue that `guard` is simply a logically inverted `if` statement, and therefore `unless` is a more obvious keyword. However, such requests stem from a fundamental misunderstanding of the functionality provided by `guard`. Unlike `if`, `guard` *enforces* that the code within its curly braces provides an early exit from the codepath. In other words, a `guard` block **must** `return`, `throw`, `break`, `continue` or call a function that does not return, such as `fatalError()`. This differs from `if` quite significantly, and therefore the parallels assumed between `guard` and `if` are not valid.\n * [Infer `return` for omitted `guard` body](https://forums.swift.org/t/inferred-return-for-guard-statement/12099/11): It has been proposed many times to allow omission of the `guard` body for the sake of brevity. However, a core principle of Swift is to make control flow explicit and visible. For example, the `try` keyword exists solely to indicate to the human reader where thrown errors can happen. Implicit returns would violate this principle, favoring terseness over clarity in a way that isn't typical of Swift. Furthermore, there are many ways of exiting the scope other than `return` (loops may want `break` or `continue`), and not every function has an obvious default value to return.\n * [Change closure literal syntax](https://forums.swift.org/t/streamlining-closures/487/3): Closure syntax in Swift has been carefully debated internally, and aspects of the design have strong motivations.  It is unlikely that we'll find something better, and any proposals to change it should have a very detailed understanding of the Swift grammar.\n * [Use pattern-matching in `if let` instead of optional-unwrapping](https://forums.swift.org/t/obsoleting-if-let/1301/4): We actually tried this and got a lot of negative feedback, for several reasons: (1) Most developers don't think about things in \"pattern matching\" terms, they think about \"destructuring\". (2) The vastly most common use case for `if let` is actually for optional matching, and this change made the common case more awkward. (3) This change increases the learning curve of Swift, changing pattern matching from being a concept that can be learned late to something that must be confronted early. (4) The current design of `if case` unifies \"pattern matching\" around the `case` keyword.  (5) If a developer unfamiliar with `if case` runs into one in some code, they can successfully search for it in a search engine or Stack Overflow.\n * [Remove or deprecate the force-unwrap operator `!`](https://forums.swift.org/t/moving-toward-deprecating-force-unwrap-from-swift/43455/82): Force-unwrap and force-try are legitimately useful parts of the language, and not just for source stability reasons. Therefore, proposals to deprecate or remove the force-unwrap operator (or `try!`), even in a mode enabled via compiler flag, will not be considered by the core team. Whether the Swift compiler should gain a more general \"linting\" capability to guide coding style remains a possible topic of discussion.\n * [Replace the `do`/`try`/`repeat` keywords with C++-style syntax](https://forums.swift.org/t/use-standard-syntax-instead-of-do-and-repeat/791/2): Swift's error handling approach is carefully designed to make it obvious to maintainers of code when a call can \"throw\" an error.  It is intentionally designed to be syntactically similar in some ways, but different in other key ways, to exception handling in other languages.  Its design is a careful balance that favors maintainers of code that uses errors, to make sure someone reading the code understands what can throw.  Before proposing a change to this system, please read the [Error Handling Rationale and Proposal](https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md) in full to understand why the current design is the way it is, and be ready to explain why your changes would be worth unbalancing this design.\n\n## Miscellaneous\n\n * [Use garbage collection (GC) instead of automatic reference counting (ARC)](https://forums.swift.org/t/what-about-garbage-collection/1360): Mark-and-sweep garbage collection is a well-known technique used in many popular and widely used languages (e.g., Java and JavaScript) and it has the advantage of automatically collecting reference cycles that ARC requires the programmer to reason about.  That said, garbage collection has a [large number of disadvantages](https://forums.swift.org/t/what-about-garbage-collection/1360/6) and using it would prevent Swift from successfully targeting a number of systems programming domains.  For example, real-time systems (video or audio processing), deeply embedded controllers, and most kernels find GC to be generally unsuitable.  Further, GC is only efficient when given 3–4× more memory to work with than the process is using at any time, and this tradeoff is not acceptable for Swift.\n * [Disjunctions (logical ORs) in type constraints](https://forums.swift.org/t/returned-for-revision-se-0095-replace-protocol-p1-p2-syntax-with-any-p1-p2/2855): These include anonymous union-like types (e.g. `(Int | String)` for a type that can be inhabited by either an integer or a string). \"[This type of constraint is] something that the type system cannot and should not support.\"\n"
        },
        {
          "name": "process.md",
          "type": "blob",
          "size": 15.5703125,
          "content": "# Swift Evolution Process\n\nSwift is a powerful and intuitive programming language that is designed to make writing and maintaining correct programs easier. Swift is growing and evolving, guided by a community-driven process referred to as the Swift evolution process, maintained by the [Language Steering Group][language-steering-group]. This document outlines the Swift evolution process and how a feature grows from a rough idea into something that can improve the Swift development experience for millions of programmers.\n\n## Scope\n\nThe Swift evolution process covers all design changes, no matter how small, to the Swift language, its standard library, and the core tools necessary to build Swift programs.  This includes additions, removals, and changes to:\n- the features of the Swift language,\n- the public interface of the Swift standard library,\n- the configuration of the Swift compiler, and\n- the core tools of the Swift package ecosystem, including the configuration of the [Swift package manager](https://www.swift.org/package-manager/) and the design of its manifest files.\n\nThe design of other tools, such as IDEs, debuggers, and documentation generators, is not covered by the evolution process.  The Core Team may create workgroups to guide and make recommendations about the development of these tools, but the output of those workgroups is not reviewed.\n\nThe evolution process does not cover experimental features, which can be added, changed, or removed at any time.  Implementors should take steps to prevent the accidental use of experimental features, such as by enabling them only under explicitly experimental options.  Features should not be allowed to remain perpetually experimental; a feature with no clear path for development into an official feature should be removed.\n\nChanges such as bug fixes, optimizations, or diagnostic improvements can be contributed via the normal contribution process; see [Contributing to Swift](https://www.swift.org/contributing/).  Some bug fixes are effectively substantial changes to the design, even if they're just making the implementation match the official documentation; whether such a change requires evolution review is up to the appropriate evolution workgroup.\n\nWhich parts of the Swift project are covered by the evolution process is ultimately up to the judgment of the Core Team.\n\n## Goals\n\nThe Swift evolution process aims to leverage the collective ideas, insights, and experience of the Swift community to improve the Swift development experience. Its two primary goals are:\n\n* Engage the wider Swift community in the ongoing evolution of Swift, and\n* Maintain the vision and conceptual coherence of Swift.\n\nThere is a natural tension between these two goals. Open evolution processes are, by nature, chaotic. Yet, maintaining a coherent vision for something as complicated as a programming language requires some level of coordination. The Swift evolution process aims to strike a balance that best serves the Swift community as a whole.\n\n## Community structure\n\nThe [Core Team](https://www.swift.org/community/#core-team) is responsible for the strategic direction of Swift.  The Core Team creates workgroups focused on specific parts of the project.  When the Core Team gives a workgroup authority over part of the evolution of the project, that workgroup is called an evolution workgroup.  Evolution workgroups manage the evolution process for proposals under their authority, working together with other workgroups as needed.\n\nCurrently, there is only one evolution workgroup:\n\n* The [Language Steering Group][language-steering-group] has authority over the evolution of the Swift language and its standard library.\n\nThe Core Team manages (or delegates) the evolution process for proposals outside these areas.  The Core Team also retains the power to override the evolution decisions of workgroups when necessary.\n\n## Proposals, roadmaps, and visions\n\nThere are three kinds of documents commonly used in the evolution process.\n\n* An evolution *proposal* describes a specific proposed change in detail.  All evolution changes are advanced as proposals which will be discussed in the community and given a formal open review.\n\n* An evolution *roadmap* describes a concrete plan for how a complex change will be broken into separate proposals that can be individually pitched and reviewed.  Considering large changes in small pieces allows the community to provide more focused feedback about each part of the change.  A roadmap makes this organization easier for community members to understand.\n\n  Roadmaps are planning documents that do not need to be reviewed.\n\n* An evolution *vision* describes a high-level design for a broad topic (for example, string processing or concurrency).  A vision creates a baseline of understanding in the community for future conversations on that topic, setting goals and laying out a possible program of work.\n\n  Visions must be approved by the appropriate evolution workgroup.  This approval is an endorsement of the vision's basic ideas, but not of any of its concrete proposals, which must still be separately developed and reviewed.\n\n## Participation\n\nEveryone is welcome to propose, discuss, and review ideas to improve\nthe Swift language and standard library in the\n[Evolution section of the Swift forums](https://forums.swift.org/c/evolution).\nBefore posting a review, please see the section \"What goes into a review?\" below.\n\n## What goes into a review?\n\nThe goal of the review process is to improve the proposal under review\nthrough constructive criticism and, eventually, determine the\ndirection of Swift. When writing your review, here are some questions\nyou might want to answer in your review:\n\n* What is your evaluation of the proposal?\n* Is the problem being addressed significant enough to warrant a change to Swift?\n* Does this proposal fit well with the feel and direction of Swift?\n* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?\n* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?\n\nPlease state explicitly whether you believe that the proposal should be accepted into Swift.\n\n## How to propose a change\n\n1. **Check prior proposals**\n\n   Many ideas come up frequently, and may either be in active discussion on the forums, or may have been discussed already and have joined the [Commonly Rejected Proposals](commonly_proposed.md) list. Please [search the forums](https://forums.swift.org/search) for context before proposing something new.\n\n1. **Consider the goals of the upcoming Swift release**\n\n   Each major Swift release is focused on a [specific set of goals](README.md)\n   described early in the release cycle. When proposing a change to\n   Swift, please consider how your proposal fits in with the larger goals\n   of the upcoming Swift release. Proposals that are clearly out of scope\n   for the upcoming Swift release will not be brought up for review. If you can't resist discussing a proposal that you know is out of scope, please include the tag `[Out of scope]` in the subject.\n\n1. **Socialize the idea**\n\n   Propose a rough sketch of the idea in the [\"pitches\" section of the Swift forums](https://forums.swift.org/c/evolution/pitches), the problems it solves, what the solution looks like, etc., to gauge interest from the community.\n\n1. **Develop the proposal and implementation**\n\n   1. Expand the rough sketch into a formal proposal using the [proposal template](proposal-templates/0000-swift-template.md).\n   1. In the [swift-evolution repository][swift-evolution-repo], open a [draft pull request][draft-pr] that adds your proposal to the [proposals directory](/proposals).\n   1. Announce the pull request on the forums and edit the root post to link out to the pull request.\n   1. Refine the formal proposal in the open as you receive further feedback on the forums or the pull request.\n      A ripe proposal is expected to address commentary from present and past\n      discussions of the idea.\n\n      Meanwhile, start working on an implementation.\n      Prototyping an implementation and its uses *alongside* the formal proposal\n      is important because it helps to determine an adequate scope, ensure\n      technical feasibility, and validate that the proposal lives up to\n      its motivation.\n\n      A pull request with a working implementation is *required* for the\n      proposal to be accepted for review.\n      Proposals that can ship as part of the [Standard Library Preview package][preview-package]\n      should be paired with a pull request against the [swift-evolution-staging repository][swift-evolution-staging].\n      All other proposals should be paired with an implementation pull request\n      against the [main Swift repository](https://github.com/apple/swift).\n\n      The preview package can accept new types, new protocols, and extensions to\n      existing types and protocols that can be implemented without access to\n      standard library internals or other non-public features.\n      For more information about the kinds of changes that can be implemented in\n      the preview package, see [SE-0264](https://github.com/swiftlang/swift-evolution/blob/main/proposals/0264-stdlib-preview-package.md).\n\n1. **Request a review**\n\n   Once you have a working implementation and believe the proposal is sufficiently detailed and clear, mark the draft pull request in the [swift-evolution repository][swift-evolution-repo] as ready for review to indicate to the appropriate evolution workgroup that you would like the proposal to be reviewed.\n\n> [!IMPORTANT]\n> In general, and especially [during the review period](#review-process), be responsive to questions and feedback about the proposal.\n\n[draft-pr]: https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests#draft-pull-requests\n\n## Review process\n\nThe review process for a particular proposal begins when a member of\nthe appropriate evolution workgroup accepts a pull request of a new or updated proposal into\nthe [swift-evolution repository][swift-evolution-repo]. That\nmember becomes the *review manager* for the proposal. The proposal\nis assigned a proposal number (if it is a new proposal), and then enters\nthe review queue. If your proposal's accompanying implementation takes the form of a package, the review manager will merge your pull request into a new branch in the [swift-evolution-staging repository][swift-evolution-staging].\n\nThe review manager will work with the proposal authors to schedule the\nreview. Reviews usually last a single week, but can run longer for\nparticularly large or complex proposals.\n\nWhen the scheduled review period arrives, the review manager will post\nthe proposal to the [\"Proposal reviews\" section of the Swift forums][proposal-reviews]\nwith the proposal title and update the list of active\nreviews. To avoid delays, it is important that the proposal authors be\navailable to answer questions, address feedback, and clarify their\nintent during the review period.\n\nAfter the review has completed, the managing evolution workgroup will make a decision on\nthe proposal. The review manager is responsible for determining\nconsensus among the workgroup members, then reporting their decision\nto the proposal authors and forums. The review manager will\nupdate the proposal's state in the [swift-evolution\nrepository][swift-evolution-repo] to reflect that decision.\n\n## Proposal states\n\n```mermaid\nflowchart LR\n  %% <https://mermaid-js.github.io/>\n\n  %% Nodes:\n  1{{\"Awaiting\\nreview\"}}\n  2{{\"Scheduled\\nfor review\"}}\n  3{\"Active\\nreview\"}\n  4[\"Returned\\nfor revision\"]\n  5([\"Withdrawn\"])\n  6([\"Rejected\"])\n  7_8[\"Accepted\\n(with revisions)\"]\n  9[[\"Previewing\"]]\n  10([\"Implemented\"])\n\n  %% Links:\n  1 ==> 3 ==> 7_8 ==> 10\n  1 -.-> 2 -.-> 3 -.-> 4 -.-> 5 & 1\n  3 -.-> 6\n  7_8 -.-> 9 -.-> 10\n```\n\nA given proposal can be in one of several states:\n\n* **Awaiting review**: The proposal is awaiting review. Once known, the dates\n  for the actual review will be placed in the proposal document. When the review\n  period begins, the review manager will update the state to *Active review*.\n* **Scheduled for review (...)**: The public review of the proposal\n  in the [Swift forums][proposal-reviews]\n  has been scheduled for the specified date range.\n* **Active review (...)**: The proposal is undergoing public review\n  in the [Swift forums][proposal-reviews].\n  The review will continue through the specified date range.\n* **Returned for revision**: The proposal has been returned from review\n  for additional revision to the current draft.\n* **Withdrawn**: The proposal has been withdrawn by the original submitter.\n* **Rejected**: The proposal has been considered and rejected.\n* **Accepted**: The proposal has been accepted and is either awaiting\n  implementation or is actively being implemented.\n* **Accepted with revisions**: The proposal has been accepted,\n  contingent upon the inclusion of one or more revisions.\n* **Previewing**: The proposal has been accepted and is available for preview\n  in the [Standard Library Preview package][preview-package].\n* **Implemented (Swift Next)**:\n  The proposal has been implemented (for the specified version of Swift).\n  If the proposal's implementation spans multiple version numbers,\n  write the version number for which the implementation will be complete.\n\n[swift-evolution-repo]: https://github.com/swiftlang/swift-evolution  \"Swift evolution repository\"\n[swift-evolution-staging]: https://github.com/swiftlang/swift-evolution-staging  \"Swift evolution staging repository\"\n[proposal-reviews]: https://forums.swift.org/c/evolution/proposal-reviews \"'Proposal reviews' category of the Swift forums\"\n[status-page]: https://apple.github.io/swift-evolution/\n[preview-package]: https://github.com/apple/swift-standard-library-preview/\n[language-steering-group]: https://www.swift.org/language-steering-group\n\n## Review announcement\n\nWhen a proposal enters review, a new topic will be posted to the [\"Proposal Reviews\" section of the Swift forums][proposal-reviews]\nusing the following template:\n\n---\n\nHello Swift community,\n\nThe review of \"\\<\\<PROPOSAL NAME>>\" begins now and runs through \\<\\<REVIEW\nEND DATE>>. The proposal is available here:\n\n> https://linkToProposal\n\nReviews are an important part of the Swift evolution process. All review feedback should be either on this forum thread or, if you would like to keep your feedback private, directly to the review manager. When emailing the review manager directly, please keep the proposal link at the top of the message.\n\n##### Trying it out\n\nIf you'd like to try this proposal out, you can [download a toolchain supporting it here]().  You will need to add `-enable-experimental-feature FLAGNAME` to your build flags.  \\<\\<Review managers should revise this section as necessary, or they can delete it if a toolchain is considered unnecessary for this proposal.\\>\\>\n\n##### What goes into a review?\n\nThe goal of the review process is to improve the proposal under review\nthrough constructive criticism and, eventually, determine the direction of\nSwift. When writing your review, here are some questions you might want to\nanswer in your review:\n\n* What is your evaluation of the proposal?\n* Is the problem being addressed significant enough to warrant a\n  change to Swift?\n* Does this proposal fit well with the feel and direction of Swift?\n* If you have used other languages or libraries with a similar\n  feature, how do you feel that this proposal compares to those?\n* How much effort did you put into your review? A glance, a quick\n  reading, or an in-depth study?\n\nMore information about the Swift evolution process is available at\n\n> <https://github.com/swiftlang/swift-evolution/blob/main/process.md>\n\nThank you,\n\n-\\<\\<REVIEW MANAGER NAME>>\n\nReview Manager\n\n---\n"
        },
        {
          "name": "proposal-templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "proposals",
          "type": "tree",
          "content": null
        },
        {
          "name": "releases",
          "type": "tree",
          "content": null
        },
        {
          "name": "visions",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}