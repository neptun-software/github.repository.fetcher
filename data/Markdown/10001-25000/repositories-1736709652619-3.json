{
  "metadata": {
    "timestamp": 1736709652619,
    "page": 3,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjU=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "adambard/learnxinyminutes-docs",
      "stars": 11623,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.05078125,
          "content": "*.md linguist-language=Markdown linguist-detectable\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1826171875,
          "content": "**/*~\n**/*#\n**/#*#\n**/*.swp\n**/*.swo\n**/*.bak\n**/*.log*\n**/*.sublime-workspace\n**/.DS_Store\n**/.DS_Store?\n**/._*\n**/.Spotlight-V100\n**/.Trashes\n**/ehthumbs.db\n**/Thumbs.db\n**/desktop.ini "
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 1.6044921875,
          "content": "Leigh Brenecki <l@leigh.net.au> <adam@brenecki.id.au>\n\nAdam Bard <github@adambard.com> Adam <adam@adambard.com>\nAdam Bard <github@adambard.com> Adam Bard <adam@adambard.com>\n\nven <vendethiel@hotmail.fr> Nami-Doc <vendethiel@hotmail.fr>\n\nAndre Polykanine <ap@oire.me> <andre@oire.org>\nAndre Polykanine <ap@oire.me> <andre.polykanine@internations.org>\n\nDivay Prakash <divayprakash3@gmail.com> <divayprakash@users.noreply.github.com>\nDivay Prakash <divayprakash3@gmail.com> <divayprakash0@gmail.com>\n\nLevi Bostian <levi.bostian@gmail.com> <levi.bostian@banno.com>\n\nPratik Karki <predatoramigo@gmail.com> <prertik@outlook.com>\n\nMarcel Ribeiro-Dantas <ribeirodantasdm@gmail.com> <ribeirodantasdm@gmail.com>\nMarcel Ribeiro-Dantas <ribeirodantasdm@gmail.com> <mribeirodantas@hey.com>\nMarcel Ribeiro-Dantas <ribeirodantasdm@gmail.com> <marcel.ribeiro-dantas@curie.fr>\nMarcel Ribeiro-Dantas <ribeirodantasdm@gmail.com> <mribeirodantas@seqera.io>\nMarcel Ribeiro-Dantas <ribeirodantasdm@gmail.com> <marcel.ribeirodantas@seqera.io>\n\nGeoff Liu <cangming.liu@gmail.com> <g@geoffliu.me>\nGeoff Liu <cangming.liu@gmail.com> <hi@geoffliu.me>\n\nsirkubax <muszynski@so1.net> <jakubxmuszynski@gmail.com>\n\ncaminsha <c.96marco@hotmail.com> <31421093+caminsha@users.noreply.github.com>\n\nSamantha McVey <samantham@posteo.net>\n\nIan Bertolacci <ian.bertolacci@gmail.com> ian.bertolacci <ibertolacci@cray.com>\n\nBoris Verkhovskiy <boris.verk@gmail.com>\n\nLouie Dinh <LouieDinh@gmail.com> lodin <LouieDinh@gmail.com>\n\nMilo Gilad <milogaccnts@gmail.com> Milo Gilad <Myl0g@users.noreply.github.com>\n\nYannick Loriot <yannick.loriot@gmail.com> Yannick <yannick.loriot@gmail.com>\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.623046875,
          "content": "# Contributing\n\nAll contributions are welcome, from the tiniest typo to a brand new article.\nTranslations in all languages are welcome (or, for that matter, original\narticles in any language). Send a pull request or open an issue any time of day\nor night.\n\n**Please prepend the tag `[language/lang-code]` to your issues and pull\nrequests.** For example, `[python/en]` for English Python. This will help\neveryone pick out things they care about.\n\nWe're happy for any contribution in any form, but if you're making more than one\nmajor change (i.e. translations for two different languages) it would be super\ncool of you to make a separate pull request for each one so that someone can\nreview them more effectively and/or individually.\n\n## Style Guidelines\n\n* **Keep lines under 80 chars**\n   * Try to keep line length in code blocks to 80 characters or fewer.\n   * Otherwise, the text will overflow and look odd.\n   * This and other potential pitfalls to format the content consistently are\n     identified by [markdownlint](https://github.com/markdownlint/markdownlint).\n* **Prefer example to exposition**\n   * Try to use as few words as possible.\n   * Code examples are preferred over exposition in all cases.\n* **Eschew surplusage**\n   * We welcome newcomers, but the target audience for this site is programmers\n     with some experience.\n   * Try to avoid explaining basic concepts except for those specific to the\n     language in question.\n   * Keep articles succinct and scannable. We all know how to use Google here.\n* **Use UTF-8**\n\n### Header configuration\n\nThe actual site generates HTML files from these Markdown ones.\nThe markdown files can contain extra metadata before the actual markdown,\ncalled frontmatter.\n\nThe following fields are necessary for English articles about programming\nlanguages:\n\n* `name`: The human-readable name of the programming language\n* `contributors`: A list of [*author*, *URL*] lists to credit, *URL* is optional\n\nOther fields:\n\n* `category`: The category of the article. So far, can be one of *language*,\n  *tool* or *Algorithms & Data Structures*. Defaults to *language* if omitted.\n* `filename`: The filename for this article's code. It will be fetched, mashed\n  together, and made downloadable.\n\nTranslations should also include:\n* `translators`: A list of [*translator*, *URL*] lists to credit, *URL* is optional\n\nNon-English articles inherit frontmatter values from the English article (if it exists)\nbut you can overwrite them.\n\nHere's an example header for Ruby:\n\n```yaml\n---\nname: Ruby\nfilename: learnruby.rb\ncontributors:\n    - [\"Doktor Esperanto\", \"http://example.com/\"]\n    - [\"Someone else\", \"http://someoneelseswebsite.com/\"]\n---\n```\n\n### Syntax highlighter\n\n[Pygments](https://pygments.org/languages/) is used for syntax highlighting.\n\n### Should I add myself as a contributor?\n\nIf you want to add yourself to contributors, keep in mind that contributors get\nequal billing, and the first contributor usually wrote the whole article. Please\nuse your judgment when deciding if your contribution constitutes a substantial\naddition or not.\n\n## Building the site locally\n\nInstall Python. On macOS this can be done with [Homebrew](https://brew.sh/).\n\n```sh\nbrew install python\n```\n\nThen clone two repos, install dependencies and run.\n\n```sh\n# Clone website\ngit clone https://github.com/adambard/learnxinyminutes-site\n# Clone docs (this repo) nested in website\ngit clone https://github.com/<YOUR-USERNAME>/learnxinyminutes-docs ./learnxinyminutes-site/source/docs/\n\n# Install dependencies\ncd learnxinyminutes-site\npip install -r requirements.txt\n\n# Run\npython build.py\ncd build\npython -m http.server\n\n# open http://localhost:8000/ in your browser of choice\n```\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 21.71875,
          "content": "Creative Commons Legal Code\n\nAttribution-ShareAlike 3.0 Unported\n\n    CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE\n    LEGAL SERVICES. DISTRIBUTION OF THIS LICENSE DOES NOT CREATE AN\n    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS\n    INFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES\n    REGARDING THE INFORMATION PROVIDED, AND DISCLAIMS LIABILITY FOR\n    DAMAGES RESULTING FROM ITS USE.\n\nLicense\n\nTHE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS CREATIVE\nCOMMONS PUBLIC LICENSE (\"CCPL\" OR \"LICENSE\"). THE WORK IS PROTECTED BY\nCOPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE WORK OTHER THAN AS\nAUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS PROHIBITED.\n\nBY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND AGREE\nTO BE BOUND BY THE TERMS OF THIS LICENSE. TO THE EXTENT THIS LICENSE MAY\nBE CONSIDERED TO BE A CONTRACT, THE LICENSOR GRANTS YOU THE RIGHTS\nCONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS AND\nCONDITIONS.\n\n1. Definitions\n\n a. \"Adaptation\" means a work based upon the Work, or upon the Work and\n    other pre-existing works, such as a translation, adaptation,\n    derivative work, arrangement of music or other alterations of a\n    literary or artistic work, or phonogram or performance and includes\n    cinematographic adaptations or any other form in which the Work may be\n    recast, transformed, or adapted including in any form recognizably\n    derived from the original, except that a work that constitutes a\n    Collection will not be considered an Adaptation for the purpose of\n    this License. For the avoidance of doubt, where the Work is a musical\n    work, performance or phonogram, the synchronization of the Work in\n    timed-relation with a moving image (\"synching\") will be considered an\n    Adaptation for the purpose of this License.\n b. \"Collection\" means a collection of literary or artistic works, such as\n    encyclopedias and anthologies, or performances, phonograms or\n    broadcasts, or other works or subject matter other than works listed\n    in Section 1(f) below, which, by reason of the selection and\n    arrangement of their contents, constitute intellectual creations, in\n    which the Work is included in its entirety in unmodified form along\n    with one or more other contributions, each constituting separate and\n    independent works in themselves, which together are assembled into a\n    collective whole. A work that constitutes a Collection will not be\n    considered an Adaptation (as defined below) for the purposes of this\n    License.\n c. \"Creative Commons Compatible License\" means a license that is listed\n    at https://creativecommons.org/compatiblelicenses that has been\n    approved by Creative Commons as being essentially equivalent to this\n    License, including, at a minimum, because that license: (i) contains\n    terms that have the same purpose, meaning and effect as the License\n    Elements of this License; and, (ii) explicitly permits the relicensing\n    of adaptations of works made available under that license under this\n    License or a Creative Commons jurisdiction license with the same\n    License Elements as this License.\n d. \"Distribute\" means to make available to the public the original and\n    copies of the Work or Adaptation, as appropriate, through sale or\n    other transfer of ownership.\n e. \"License Elements\" means the following high-level license attributes\n    as selected by Licensor and indicated in the title of this License:\n    Attribution, ShareAlike.\n f. \"Licensor\" means the individual, individuals, entity or entities that\n    offer(s) the Work under the terms of this License.\n g. \"Original Author\" means, in the case of a literary or artistic work,\n    the individual, individuals, entity or entities who created the Work\n    or if no individual or entity can be identified, the publisher; and in\n    addition (i) in the case of a performance the actors, singers,\n    musicians, dancers, and other persons who act, sing, deliver, declaim,\n    play in, interpret or otherwise perform literary or artistic works or\n    expressions of folklore; (ii) in the case of a phonogram the producer\n    being the person or legal entity who first fixes the sounds of a\n    performance or other sounds; and, (iii) in the case of broadcasts, the\n    organization that transmits the broadcast.\n h. \"Work\" means the literary and/or artistic work offered under the terms\n    of this License including without limitation any production in the\n    literary, scientific and artistic domain, whatever may be the mode or\n    form of its expression including digital form, such as a book,\n    pamphlet and other writing; a lecture, address, sermon or other work\n    of the same nature; a dramatic or dramatico-musical work; a\n    choreographic work or entertainment in dumb show; a musical\n    composition with or without words; a cinematographic work to which are\n    assimilated works expressed by a process analogous to cinematography;\n    a work of drawing, painting, architecture, sculpture, engraving or\n    lithography; a photographic work to which are assimilated works\n    expressed by a process analogous to photography; a work of applied\n    art; an illustration, map, plan, sketch or three-dimensional work\n    relative to geography, topography, architecture or science; a\n    performance; a broadcast; a phonogram; a compilation of data to the\n    extent it is protected as a copyrightable work; or a work performed by\n    a variety or circus performer to the extent it is not otherwise\n    considered a literary or artistic work.\n i. \"You\" means an individual or entity exercising rights under this\n    License who has not previously violated the terms of this License with\n    respect to the Work, or who has received express permission from the\n    Licensor to exercise rights under this License despite a previous\n    violation.\n j. \"Publicly Perform\" means to perform public recitations of the Work and\n    to communicate to the public those public recitations, by any means or\n    process, including by wire or wireless means or public digital\n    performances; to make available to the public Works in such a way that\n    members of the public may access these Works from a place and at a\n    place individually chosen by them; to perform the Work to the public\n    by any means or process and the communication to the public of the\n    performances of the Work, including by public digital performance; to\n    broadcast and rebroadcast the Work by any means including signs,\n    sounds or images.\n k. \"Reproduce\" means to make copies of the Work by any means including\n    without limitation by sound or visual recordings and the right of\n    fixation and reproducing fixations of the Work, including storage of a\n    protected performance or phonogram in digital form or other electronic\n    medium.\n\n2. Fair Dealing Rights. Nothing in this License is intended to reduce,\nlimit, or restrict any uses free from copyright or rights arising from\nlimitations or exceptions that are provided for in connection with the\ncopyright protection under copyright law or other applicable laws.\n\n3. License Grant. Subject to the terms and conditions of this License,\nLicensor hereby grants You a worldwide, royalty-free, non-exclusive,\nperpetual (for the duration of the applicable copyright) license to\nexercise the rights in the Work as stated below:\n\n a. to Reproduce the Work, to incorporate the Work into one or more\n    Collections, and to Reproduce the Work as incorporated in the\n    Collections;\n b. to create and Reproduce Adaptations provided that any such Adaptation,\n    including any translation in any medium, takes reasonable steps to\n    clearly label, demarcate or otherwise identify that changes were made\n    to the original Work. For example, a translation could be marked \"The\n    original work was translated from English to Spanish,\" or a\n    modification could indicate \"The original work has been modified.\";\n c. to Distribute and Publicly Perform the Work including as incorporated\n    in Collections; and,\n d. to Distribute and Publicly Perform Adaptations.\n e. For the avoidance of doubt:\n\n     i. Non-waivable Compulsory License Schemes. In those jurisdictions in\n        which the right to collect royalties through any statutory or\n        compulsory licensing scheme cannot be waived, the Licensor\n        reserves the exclusive right to collect such royalties for any\n        exercise by You of the rights granted under this License;\n    ii. Waivable Compulsory License Schemes. In those jurisdictions in\n        which the right to collect royalties through any statutory or\n        compulsory licensing scheme can be waived, the Licensor waives the\n        exclusive right to collect such royalties for any exercise by You\n        of the rights granted under this License; and,\n   iii. Voluntary License Schemes. The Licensor waives the right to\n        collect royalties, whether individually or, in the event that the\n        Licensor is a member of a collecting society that administers\n        voluntary licensing schemes, via that society, from any exercise\n        by You of the rights granted under this License.\n\nThe above rights may be exercised in all media and formats whether now\nknown or hereafter devised. The above rights include the right to make\nsuch modifications as are technically necessary to exercise the rights in\nother media and formats. Subject to Section 8(f), all rights not expressly\ngranted by Licensor are hereby reserved.\n\n4. Restrictions. The license granted in Section 3 above is expressly made\nsubject to and limited by the following restrictions:\n\n a. You may Distribute or Publicly Perform the Work only under the terms\n    of this License. You must include a copy of, or the Uniform Resource\n    Identifier (URI) for, this License with every copy of the Work You\n    Distribute or Publicly Perform. You may not offer or impose any terms\n    on the Work that restrict the terms of this License or the ability of\n    the recipient of the Work to exercise the rights granted to that\n    recipient under the terms of the License. You may not sublicense the\n    Work. You must keep intact all notices that refer to this License and\n    to the disclaimer of warranties with every copy of the Work You\n    Distribute or Publicly Perform. When You Distribute or Publicly\n    Perform the Work, You may not impose any effective technological\n    measures on the Work that restrict the ability of a recipient of the\n    Work from You to exercise the rights granted to that recipient under\n    the terms of the License. This Section 4(a) applies to the Work as\n    incorporated in a Collection, but this does not require the Collection\n    apart from the Work itself to be made subject to the terms of this\n    License. If You create a Collection, upon notice from any Licensor You\n    must, to the extent practicable, remove from the Collection any credit\n    as required by Section 4(c), as requested. If You create an\n    Adaptation, upon notice from any Licensor You must, to the extent\n    practicable, remove from the Adaptation any credit as required by\n    Section 4(c), as requested.\n b. You may Distribute or Publicly Perform an Adaptation only under the\n    terms of: (i) this License; (ii) a later version of this License with\n    the same License Elements as this License; (iii) a Creative Commons\n    jurisdiction license (either this or a later license version) that\n    contains the same License Elements as this License (e.g.,\n    Attribution-ShareAlike 3.0 US)); (iv) a Creative Commons Compatible\n    License. If you license the Adaptation under one of the licenses\n    mentioned in (iv), you must comply with the terms of that license. If\n    you license the Adaptation under the terms of any of the licenses\n    mentioned in (i), (ii) or (iii) (the \"Applicable License\"), you must\n    comply with the terms of the Applicable License generally and the\n    following provisions: (I) You must include a copy of, or the URI for,\n    the Applicable License with every copy of each Adaptation You\n    Distribute or Publicly Perform; (II) You may not offer or impose any\n    terms on the Adaptation that restrict the terms of the Applicable\n    License or the ability of the recipient of the Adaptation to exercise\n    the rights granted to that recipient under the terms of the Applicable\n    License; (III) You must keep intact all notices that refer to the\n    Applicable License and to the disclaimer of warranties with every copy\n    of the Work as included in the Adaptation You Distribute or Publicly\n    Perform; (IV) when You Distribute or Publicly Perform the Adaptation,\n    You may not impose any effective technological measures on the\n    Adaptation that restrict the ability of a recipient of the Adaptation\n    from You to exercise the rights granted to that recipient under the\n    terms of the Applicable License. This Section 4(b) applies to the\n    Adaptation as incorporated in a Collection, but this does not require\n    the Collection apart from the Adaptation itself to be made subject to\n    the terms of the Applicable License.\n c. If You Distribute, or Publicly Perform the Work or any Adaptations or\n    Collections, You must, unless a request has been made pursuant to\n    Section 4(a), keep intact all copyright notices for the Work and\n    provide, reasonable to the medium or means You are utilizing: (i) the\n    name of the Original Author (or pseudonym, if applicable) if supplied,\n    and/or if the Original Author and/or Licensor designate another party\n    or parties (e.g., a sponsor institute, publishing entity, journal) for\n    attribution (\"Attribution Parties\") in Licensor's copyright notice,\n    terms of service or by other reasonable means, the name of such party\n    or parties; (ii) the title of the Work if supplied; (iii) to the\n    extent reasonably practicable, the URI, if any, that Licensor\n    specifies to be associated with the Work, unless such URI does not\n    refer to the copyright notice or licensing information for the Work;\n    and (iv) , consistent with Ssection 3(b), in the case of an\n    Adaptation, a credit identifying the use of the Work in the Adaptation\n    (e.g., \"French translation of the Work by Original Author,\" or\n    \"Screenplay based on original Work by Original Author\"). The credit\n    required by this Section 4(c) may be implemented in any reasonable\n    manner; provided, however, that in the case of a Adaptation or\n    Collection, at a minimum such credit will appear, if a credit for all\n    contributing authors of the Adaptation or Collection appears, then as\n    part of these credits and in a manner at least as prominent as the\n    credits for the other contributing authors. For the avoidance of\n    doubt, You may only use the credit required by this Section for the\n    purpose of attribution in the manner set out above and, by exercising\n    Your rights under this License, You may not implicitly or explicitly\n    assert or imply any connection with, sponsorship or endorsement by the\n    Original Author, Licensor and/or Attribution Parties, as appropriate,\n    of You or Your use of the Work, without the separate, express prior\n    written permission of the Original Author, Licensor and/or Attribution\n    Parties.\n d. Except as otherwise agreed in writing by the Licensor or as may be\n    otherwise permitted by applicable law, if You Reproduce, Distribute or\n    Publicly Perform the Work either by itself or as part of any\n    Adaptations or Collections, You must not distort, mutilate, modify or\n    take other derogatory action in relation to the Work which would be\n    prejudicial to the Original Author's honor or reputation. Licensor\n    agrees that in those jurisdictions (e.g. Japan), in which any exercise\n    of the right granted in Section 3(b) of this License (the right to\n    make Adaptations) would be deemed to be a distortion, mutilation,\n    modification or other derogatory action prejudicial to the Original\n    Author's honor and reputation, the Licensor will waive or not assert,\n    as appropriate, this Section, to the fullest extent permitted by the\n    applicable national law, to enable You to reasonably exercise Your\n    right under Section 3(b) of this License (right to make Adaptations)\n    but not otherwise.\n\n5. Representations, Warranties and Disclaimer\n\nUNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING, LICENSOR\nOFFERS THE WORK AS-IS AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY\nKIND CONCERNING THE WORK, EXPRESS, IMPLIED, STATUTORY OR OTHERWISE,\nINCLUDING, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTIBILITY,\nFITNESS FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR THE ABSENCE OF\nLATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OF ABSENCE OF ERRORS,\nWHETHER OR NOT DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION\nOF IMPLIED WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU.\n\n6. Limitation on Liability. EXCEPT TO THE EXTENT REQUIRED BY APPLICABLE\nLAW, IN NO EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY FOR\nANY SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY DAMAGES\nARISING OUT OF THIS LICENSE OR THE USE OF THE WORK, EVEN IF LICENSOR HAS\nBEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n7. Termination\n\n a. This License and the rights granted hereunder will terminate\n    automatically upon any breach by You of the terms of this License.\n    Individuals or entities who have received Adaptations or Collections\n    from You under this License, however, will not have their licenses\n    terminated provided such individuals or entities remain in full\n    compliance with those licenses. Sections 1, 2, 5, 6, 7, and 8 will\n    survive any termination of this License.\n b. Subject to the above terms and conditions, the license granted here is\n    perpetual (for the duration of the applicable copyright in the Work).\n    Notwithstanding the above, Licensor reserves the right to release the\n    Work under different license terms or to stop distributing the Work at\n    any time; provided, however that any such election will not serve to\n    withdraw this License (or any other license that has been, or is\n    required to be, granted under the terms of this License), and this\n    License will continue in full force and effect unless terminated as\n    stated above.\n\n8. Miscellaneous\n\n a. Each time You Distribute or Publicly Perform the Work or a Collection,\n    the Licensor offers to the recipient a license to the Work on the same\n    terms and conditions as the license granted to You under this License.\n b. Each time You Distribute or Publicly Perform an Adaptation, Licensor\n    offers to the recipient a license to the original Work on the same\n    terms and conditions as the license granted to You under this License.\n c. If any provision of this License is invalid or unenforceable under\n    applicable law, it shall not affect the validity or enforceability of\n    the remainder of the terms of this License, and without further action\n    by the parties to this agreement, such provision shall be reformed to\n    the minimum extent necessary to make such provision valid and\n    enforceable.\n d. No term or provision of this License shall be deemed waived and no\n    breach consented to unless such waiver or consent shall be in writing\n    and signed by the party to be charged with such waiver or consent.\n e. This License constitutes the entire agreement between the parties with\n    respect to the Work licensed here. There are no understandings,\n    agreements or representations with respect to the Work not specified\n    here. Licensor shall not be bound by any additional provisions that\n    may appear in any communication from You. This License may not be\n    modified without the mutual written agreement of the Licensor and You.\n f. The rights granted under, and the subject matter referenced, in this\n    License were drafted utilizing the terminology of the Berne Convention\n    for the Protection of Literary and Artistic Works (as amended on\n    September 28, 1979), the Rome Convention of 1961, the WIPO Copyright\n    Treaty of 1996, the WIPO Performances and Phonograms Treaty of 1996\n    and the Universal Copyright Convention (as revised on July 24, 1971).\n    These rights and subject matter take effect in the relevant\n    jurisdiction in which the License terms are sought to be enforced\n    according to the corresponding provisions of the implementation of\n    those treaty provisions in the applicable national law. If the\n    standard suite of rights granted under applicable copyright law\n    includes additional rights not granted under this License, such\n    additional rights are deemed to be included in the License; this\n    License is not intended to restrict the license of any rights under\n    applicable law.\n\n\nCreative Commons Notice\n\n    Creative Commons is not a party to this License, and makes no warranty\n    whatsoever in connection with the Work. Creative Commons will not be\n    liable to You or any party on any legal theory for any damages\n    whatsoever, including without limitation any general, special,\n    incidental or consequential damages arising in connection to this\n    license. Notwithstanding the foregoing two (2) sentences, if Creative\n    Commons has expressly identified itself as the Licensor hereunder, it\n    shall have all rights and obligations of Licensor.\n\n    Except for the limited purpose of indicating to the public that the\n    Work is licensed under the CCPL, Creative Commons does not authorize\n    the use by either party of the trademark \"Creative Commons\" or any\n    related trademark or logo of Creative Commons without the prior\n    written consent of Creative Commons. Any permitted use will be in\n    compliance with Creative Commons' then-current trademark usage\n    guidelines, as may be published on its website or otherwise made\n    available upon request from time to time. For the avoidance of doubt,\n    this trademark restriction does not form part of the License.\n\n    Creative Commons may be contacted at https://creativecommons.org/.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.78515625,
          "content": "# [Learn X in Y minutes][1]\n\nWhirlwind tours of (several, hopefully many someday) popular and\nought-to-be-more-popular programming languages, presented as valid, commented\ncode and explained as they go.\n\n## We need YOU!...\n\n... to write more inline code tutorials. Just grab an existing file from this\nrepo and copy the formatting (don't worry, it's all very simple). Make a new\nfile, send a pull request, and if it passes muster I'll get it up pronto.\nRemember to fill in the \"contributors\" fields so you get credited properly!\n\n## Contributing\n\nAll contributions are welcome, from the tiniest typo to a brand new article.\nTranslations in all languages are welcome (or, for that matter, original\narticles in any language). Send a pull request or open an issue any time of day\nor night.\n\n**Please prepend the tag `[language/lang-code]` to your issues and pull\nrequests.** For example, `[python/en]` for English Python. This will help\neveryone pick out things they care about.\n\nWe're happy for any contribution in any form, but if you're making more than one\nmajor change (i.e. translations for two different languages) it would be super\ncool of you to make a separate pull request for each one so that someone can\nreview them more effectively and/or individually.\n\nFor a detailed style guide, please review the full [CONTRIBUTING][2] guidelines.\n\n## License\n\nContributors retain copyright to their work, and can request removal at any\ntime. By uploading a doc here, you agree to publish your work under the default\n[Creative Commons Attribution-ShareAlike 3.0 Unported][3] licensing included on\neach doc page.\n\nAnything not covered by the above -- basically, this README -- you can use as\nyou wish, I guess.\n\n\n[1]: https://learnxinyminutes.com\n[2]: /CONTRIBUTING.md\n[3]: http://creativecommons.org/licenses/by-sa/3.0/deed.en_US\n"
        },
        {
          "name": "ada.md",
          "type": "blob",
          "size": 17.62109375,
          "content": "---\nname: Ada\nfilename: learn.ada\ncontributors:\n    - [\"Luke A. Guest\", \"https://github.com/Lucretia\"]\n    - [\"Fernando Oleo Blanco\", \"https://github.com/Irvise\"]\n    - [\"Fabien Chouteau\", \"https://github.com/Fabien-Chouteau\"]\n    - [\"Manuel\", \"https://github.com/mgrojo\"]\n---\n\nAda is a strong statically typed imperative, [object-oriented](https://ada-lang.io/docs/arm/AA-3/AA-3.9), [real-time](https://ada-lang.io/docs/arm/AA-D), [parallel](https://ada-lang.io/docs/arm/AA-9) and [distributed](https://ada-lang.io/docs/arm/AA-9) programming language from the Pascal/Algol family of languages, but nowadays, it only has a passing resemblance to Pascal, with the only remnants left being the ```begin/end``` keyword pair, the ```:=``` assignment symbol, records and ```if/case``` control statement structures.\n\nAda was originally designed to be an [object-based](https://ada-lang.io/docs/arm/AA-3/AA-3.3) language and to replace 100's of languages in use by the US government. This means that all entities are objects, not in the object-oriented sense. The language became [Object-Oriented](https://ada-lang.io/docs/arm/AA-3/AA-3.9) in 1995, and added [interfaces](https://ada-lang.io/docs/arm/AA-3/AA-3.9#Subclause_3.9.4) derived from Java in 2005. [Contract based](https://ada-lang.io/docs/arm/AA-13/AA-13.1#Subclause_13.1.1) programming was introduced with Ada 2012.\n\nAda was designed to be easy to read and learn, even for non-programmers, e.g. management within an organisation, therefore programs written in the language tend to be a bit more verbose.\n\nAda is a modern programming language, and now has a package manager like other modern languages, Alire, see below.\n\n```ada\n--  Comments are written with a double hyphen and exist until the end of\n--  the line.\n\n--  You do not need to call the entry point \"Main\" or \"main,\" you should\n--  name it based on what the program does.\nprocedure Empty is\n   --  This is a declarative part.\nbegin\n   --  Statements go here.\n   null;  --  Do nothing here.\nend Empty;\n\n--  Ada compilers accept compilation units which can be library packages,\n--  tasks, sub-programs, generics, etc.\n\n--  This is where \"context clauses\" go, these can be pragmas or \"with\"\n--  statements. \"with\" is equivalent to \"include\" or \"import\" in other\n--  languages.\nwith Ada.Text_IO;  --  Get access to a library package.\n\nprocedure Hello is\nbegin\n   Ada.Text_IO.Put_Line (\"Hello, world\");\n\n   Ada.Text_IO.Put (\"Hello again, world\");\n   Ada.Text_IO.New_Line;\nend Hello;\n\n\n--  Ada has a real module system. Modules are called packages and are split into\n--  two component parts, the specification and a body.\n--  It is important to introduce packages early, as you will be using them from\n--  the start.\npackage Stuff is\n   --  We could add the following line in order to tell the compiler that this\n   --  package does not have to run any code before the \"main\" procedure starts.\n   --  pragma Preelaborate;\n\n   --  Packages can be nested within the same file or externally.\n   --  Nested packages are accessed via dot notation, e.g. Stuff.Things.My.\n   package Things is\n      My : constant Integer := 100;\n   end Things;\n\n   --  If there are sub-programs declared within the specification, the body\n   --  of the sub-program must be declared within the package body.\n   procedure Do_Something;  --  If a subprogram takes no parameters, empty\n                            --  parentheses are not required, unlike other\n                            --  languages.\n\n   --  We can also make generic sub-programs.\n   generic\n      type Element is (<>);  --  The \"(<>)\" notation specifies that only\n                             --  discrete types can be passed into the generic.\n   procedure Swap (Left, Right : in out Element);\n\n   --  Sometimes we want to hide how a type is defined from the outside world\n   --  so that nobody can mess with it directly. The full type must be defined\n   --  within the private section below.\n   type Blobs is private;\n\n   --  We can also make types \"limited\" by putting this keyword after the \"is\"\n   --  keyword, this means that the user cannot copy objects of that type\n   --  around, like they normally could.\nprivate\n   type Blobs is new Integer range -25 .. 25;\nend Stuff;\n\n\npackage body Stuff is\n   --  Sub-program body.\n   procedure Do_Something is\n      --  We can nest sub-programs too.\n      --  Parameters are defined with the direction of travel, in, in out, out.\n      --  If the direction of travel is not specified, they are in by default.\n      function Times_4 (Value : in Integer) return Integer is\n      begin\n         return Value * 4;\n      end Times_4;\n\n      I : Integer := 4;\n   begin\n      I := Times_4 (I);\n   end Do_Something;\n\n\n   --  Generic procedure body.\n   procedure Swap (Left, Right : in out Element) is\n      Temp : Element := Left;\n   begin\n      Left  := Right;\n      Right := Temp;\n   end Swap;\nbegin\n   --  If we need to initialise something within the package, we can do it\n   --  here.\n   Do_Something;\nend Stuff;\n\n\nwith Ada.Unchecked_Conversion;\nwith Ada.Text_IO;\nwith Stuff;\n\nprocedure LearnAdaInY is\n   --  Indentation is 3 spaces.\n\n   --  The most important feature in Ada is the type. Objects have types and an\n   --  object of one type cannot be assigned to an object of another type.\n\n   --  You can, and should, define your own types for the domain you are\n   --  modelling. But you can use the standard types to start with and then\n   --  replace them later with your own types, this could be called a form of\n   --  gradual typing.\n\n   --  The standard types would only really be a good starting point for binding\n   --  to other languages, like C. Ada is the only language with a standardised\n   --  way to bind with C, Fortran and COBOL! See the links in the References\n   --  section with more information on binding to these languages.\n\n   type Degrees is range 0 .. 360;  --  This is a type. Its underlying\n                                    --  representation is an Integer.\n\n   type Hues is (Red, Green, Blue, Purple, Yellow);  --  So is this. Here, we\n                                                     --  are declaring an\n                                                     --  Enumeration.\n\n   --  This is a modular type. They behave like Integers that automatically\n   --  wrap around. In this specific case, the range would be 0 .. 359.\n   --  If we added 1 to a variable containing the value 359, we would receive\n   --  back 0. They are very useful for arrays.\n   type Degrees_Wrap is mod 360;\n\n   --  You can restrict a type's range using a subtype, this makes them\n   --  compatible with each other, i.e. the subtype can be assigned to an\n   --  object of the type, as can be seen below.\n   subtype Primaries is Hues range Red .. Blue;  --  This is a range.\n\n   --  You can define variables or constants like this:\n   --  Var_Name : Type := Value;\n\n   --  10 is a universal integer. These universal numerics can be used with\n   --  any type which matches the base type.\n   Angle : Degrees := 10;\n   Value : Integer := 20;\n   --  New_Angle : Degrees := Value;  --  Incompatible types won't compile.\n   --  New_Value : Integer := Angle;\n\n   Blue_Hue   :          Primaries := Blue;  --  A variable.\n   Red_Hue    : constant Primaries := Red;   --  A constant.\n   Yellow_Hue : constant Hues      := Yellow;\n   Colour_1   : constant Hues      := Red_Hue;\n   --  Colour_2   : constant Primaries := Yellow_Hue;  --  uncomment to compile.\n\n   --  You can force conversions, but then you are warned by the name of the\n   --  package that you may be doing something unsafe.\n   function Degrees_To_Int is new Ada.Unchecked_Conversion\n     (Source => Degrees,   --  Line continuations are indented by 2 spaces.\n      Target => Integer);\n\n   New_Value_2 : Integer := Degrees_To_Int (Angle);  --  Note, space before (.\n\n   --  GNAT is the GNU Ada Translator (compiler).\n   --  Ada has a style guide and GNAT will warn you to adhere to it, and has\n   --  option to check your style so that you can correct it so that all Ada\n   --  source looks consistent. However, the style can be customized.\n\n   --  Yes, you can even define your own floating and fixed point types, this\n   --  is a very rare and unique ability. \"digits\" refers to the minimum\n   --  digit precision that the type should support. \"delta\" is for fixed\n   --  point types and refers to the smallest change that the type will support.\n   type Real_Angles is digits 3 range 0.0 .. 360.0;\n   type Fixed_Angles is delta 0.01 digits 5 range 0.0 .. 360.0;\n\n   RA : constant Real_Angles  := 36.45;\n   FA : constant Fixed_Angles := 360.0;  --  \".0\" in order to make it a Float.\n\n   --  You can have normal Latin 1 based strings by default.\n   Str  : constant String    := \"This is a constant string\";\n   --  When initialising from a string literal, the compiler knows the bounds,\n   --  so we don't have to define them.\n\n   --  Strings are arrays. Note how parentheses are used to access elements of\n   --  an array? This is mathematical notation and was used because square\n   --  brackets were not available on all keyboards at the time Ada was\n   --  created. Also, because an array can be seen as a function from a\n   --  mathematical perspective, so it made converting between arrays and\n   --  functions easier.\n   Char : constant Character := Str (Str'First);  --  \"'First\" is a type\n                                                  --  attribute.\n\n   --  Ada 2022 includes the use of [] for array initialisation when using\n   --  containers, which were added in Ada 2012.\n\n   --  Arrays are usually always defined as a type.\n   --  They can be any dimension.\n   type My_Array_1 is array (1 .. 4, 3 .. 7, -20 .. 20) of Integer;\n\n   --  Yes, unlike other languages, you can index arrays with other discrete\n   --  types such as enumerations and modular types or arbitrary ranges.\n   type Axes is (X, Y, Z);\n\n   --  You can define the array's range using the 'Range attribute from\n   --  another type.\n   type Vector is array (Axes'Range) of Float;\n\n   V1 : constant Vector := (0.0, 0.0, 1.0);\n\n   --  A record is the same as a structure in C, C++.\n   type Entities is record\n      Name     : String (1 .. 10);  --  Always starts at a positive value,\n                                    --  inclusive range.\n      Position : Vector;\n   end record;\n\n   --  In Ada, array bounds are immutable. You therefore have to provide a\n   --  string literal with a value for every character.\n   E1 : constant Entities := (\"Blob      \", (0.0, 0.0, 0.0));\n\n   --  An alternative is to use an array aggregate and assign a default value\n   --  to every element that wasn't previously assigned in this aggregate.\n   --  \"others\" is used to indicate anything else that has not been\n   --  explicitly initialized.\n   E2 : constant Entities := (('B', 'l', 'o', 'b', others => ' '),\n                              (0.0, 0.0, 0.0));\n\n   --  There are dynamic length strings (see references section) available in\n   --  the standard library.\n\n   --  We can make an object be initialised to its default values with the box\n   --  notation, \"<>\". \"others\" is used to indicate anything else that has not\n   --  been explicitly initialized.\n   Null_Entity : constant Entities := (others => <>);\n\n   --  Object-orientation is accomplished via an extension of record syntax,\n   --  tagged records, see link above in first paragraph.\n\n   --  We can rename objects (aliases) to make readability a bit better.\n   package IO renames Ada.Text_IO;\nbegin\n   --  We can output enumerations as names.\n   IO.Put_Line (\"Blue_Hue   = \" &  --  & is the string concatenation operator.\n                Blue'Image);       --  ' accesses attributes on objects.\n                  --  The Image attribute converts a value to a string.\n                  --  Ada 2022 has extended Image to custom types too.\n                  --  Access this with -gnat2022 compiler flag.\n   IO.Put_Line (\"Yellow_Hue = \" &\n                --  We can use the type's attribute.\n                Primaries'Image (Yellow_Hue));\n\n   --  We can define local variables within a declare block, this can be made\n   --  more readable by giving it a label.\n   Enum_IO : declare\n      package Hue_IO is new IO.Enumeration_IO (Hues);\n\n      --  Using a package makes everything inside that package visible within\n      --  this block, it is good practice to only do this locally and not on\n      --  a whole package within the context clause.\n      use Hue_IO;\n   begin\n      --  We can print out the enumeration values too.\n      Put (Purple); --  Note we don't have to prefix the Put procedure with\n                    --  Hue_IO.\n      IO.New_Line;  --  We still need to prefix with IO here.\n      Put (Red_Hue);\n      IO.New_Line;\n   end Enum_IO;\n\n   --  Loops have a consistent form. \"<form> loop ... end loop\".\n   --  Where \"form\" can be \"while\" or \"for\" or missing as below, if\n   --  you place the \"loop ... end loop;\" construct on their own lines,\n   --  you can comment out or experiment with different loop constructs more\n   --  easily.\n   declare\n      Counter : Positive := Positive'First;  --  This is 1.\n   begin\n      --  We can label loops so we can exit from them more easily if we need to.\n      Infinite :\n      loop\n         IO.Put_Line (\"[Infinite loop] Counter = \" & Counter'Image);\n\n         Counter := Counter + 1;\n\n         --  This next line implements a repeat ... until or do ... while loop construct.\n         --  Comment it out for an infinite loop.\n         exit Infinite when Counter = 5;  --  Equality tests use a single \"=\".\n      end loop Infinite;  --  Useful when implementing state machines.\n   end;\n\n   declare  --  We don't have to have a label.\n      Counter : Positive := Positive'First;  --  This is 1.\n   begin\n      while Counter < 10\n      loop\n         IO.Put_Line (\"Counter = \" & Counter'Image);\n\n         Counter := Counter + 1;  --  There is no explicit inc/decrement.\n\n         --  Ada 2022 introduced @ for LHS, so the above would be written as\n         --  Counter := @ + 1;  --  Try it, -gnat2022.\n      end loop;\n   end;\n\n   declare\n      package Hue_IO is new IO.Enumeration_IO (Hues);\n\n      --  We can have multiple packages on one line, but I tend to use one\n      --  package per line for readability.\n      use IO, Hue_IO;\n   begin\n      Put (\"Hues : \");  --  Note, no prefix.\n\n      --  Because we are using the 'Range attribute, the compiler knows it is\n      --  safe and can omit run-time checks here.\n      for Hue in Hues'Range\n      loop\n         Put (Hue);\n\n         --  Types and objects know about their bounds, their First .. Last\n         --  values. These can be specified as range types.\n         if Hue /= Hues'Last then  --  The /= means \"not equal to\" like the\n                                   --  maths symbol ≠.\n            Put (\", \");\n         end if;\n      end loop;\n\n      IO.New_Line;\n   end;\n\n   --  All objects know their bounds, including strings.\n   declare\n      C : Character := Str (50);  --  Warning caused and exception raised at\n                                  --  runtime.\n      --  The exception raised above can only be handled by an outer scope,\n      --  see wikibook link below.\n   begin\n      null;  --  We will never get to this point because of the above.\n   end;\nexception\n   when Constraint_Error =>\n      IO.Put_Line (\"Caught the exception\");\nend LearnAdaInY;\n```\n\nNow, that's a lot of information for a basic intro to Ada, and I've only touched the surface, there's much more to look at in the references section below. I haven't even touched on dynamic memory allocation which includes [pools](https://ada-lang.io/docs/arm/AA-13/AA-13.11), this is because for the most part, Ada programs don't need it, you can do a lot without it.\n\nAs I stated above, Ada barely looks like Pascal and if you look at the original [Green specification](https://apps.dtic.mil/sti/trecms/pdf/ADB950587.pdf) (Warning: Huge 4575 page scanned PDF - starting on page 460), it looks nothing like it at all (page 505 of that PDF).\n\nThe above source code will compile, but also will give warnings showing the power of the strong static type system.\n\n## Download this source\n\nIf you already have the GNAT toolchain installed, you can cut and paste the above into a new file, e.g. ```learn-ada-in-y.ada``` and then run the following:\n\n```bash\n$ gnatchop learn-ada-in-y.ada # This breaks the program into its specification \".ads\" and body \".adb\".\n$ gnatmake empty.adb # gnatmake takes care of compilation of all units and linking.\n$ gnatmake hello.adb\n$ gnatmake learnadainy.adb\n```\n\nOr, download [Alire](https://alire.ada.dev), copy it to somewhere in your PATH and then do the following:\n\n**N.B.** Alire will automatically install the toolchain for you if you don't have one installed and will ask you to select which you want to use.\n\n```bash\n$ alr search learnadainy\n$ alr get learnadainy\n$ cd learnadainy\n$ alr run empty\n$ alr run hello\n$ alr run learnadainy\n```\n\n## Further Reading\n\n* [Ada Programming Language](https://ada-lang.io)\n* [Ada 2022 Reference Manual](https://ada-lang.io/docs/arm)\n* [Ada Style Guide](https://ada-lang.io/docs/style-guide/Ada_Style_Guide)\n* [Learn more Ada/Spark at AdaCore's site](https://learn.adacore.com)\n\n## References from the source above\n\n1. [wikibook](https://en.wikibooks.org/wiki/Ada_Programming/Exceptions#Exception_handlers)\n2. [C](https://ada-lang.io/docs/arm/AA-B/AA-B.3)\n3. [Fortran](https://ada-lang.io/docs/arm/AA-B/AA-B.5/)\n4. [COBOL](https://ada-lang.io/docs/arm/AA-B/AA-B.4/)\n5. [dynamic length strings](https://ada-lang.io/docs/arm/AA-A/AA-A.4#Subclause_A.4.5)\n\n### Multi-line comments\n\nMulti-line comments are not allowed as they are error prone.\n\n> Such comments would require a closing comment delimiter and this would again raise the dangers associated with the (unintentional) omission of the closing delimiter: entire sections of a program could be ignored by the compiler without the programmer realizing it\n>\n> [Ada 83 Rationale](http://archive.adaic.com/standards/83rat/html/ratl-02-01.html#2.1)\n\n"
        },
        {
          "name": "amd.md",
          "type": "blob",
          "size": 7.3603515625,
          "content": "---\ncategory: tool\nname: AMD\ncontributors:\n    - [\"Frederik Ring\", \"https://github.com/m90\"]\nfilename: learnamd.js\n---\n\n## Getting Started with AMD\n\nThe **Asynchronous Module Definition** API specifies a mechanism for defining\nJavaScript modules such that the module and its dependencies can be asynchronously\nloaded. This is particularly well suited for the browser environment where\nsynchronous loading of modules incurs performance, usability, debugging, and\ncross-domain access problems.\n\n### Basic concept\n\n```javascript\n// The basic AMD API consists of nothing but two methods: `define` and `require`\n// and is all about module definition and consumption:\n// `define(id?, dependencies?, factory)` defines a module\n// `require(dependencies, callback)` imports a set of dependencies and\n// consumes them in the passed callback\n\n// Let's start by using define to define a new named module\n// that has no dependencies. We'll do so by passing a name\n// and a factory function to define:\ndefine('awesomeAMD', function(){\n  var isAMDAwesome = function(){\n    return true;\n  };\n  // The return value of a module's factory function is\n  // what other modules or require calls will receive when\n  // requiring our `awesomeAMD` module.\n  // The exported value can be anything, (constructor) functions,\n  // objects, primitives, even undefined (although that won't help too much).\n  return isAMDAwesome;\n});\n\n// Now, let's define another module that depends upon our `awesomeAMD` module.\n// Notice that there's an additional argument defining our\n// module's dependencies now:\ndefine('loudmouth', ['awesomeAMD'], function(awesomeAMD){\n  // dependencies will be passed to the factory's arguments\n  // in the order they are specified\n  var tellEveryone = function(){\n    if (awesomeAMD()){\n      alert('This is sOoOo rad!');\n    } else {\n      alert('Pretty dull, isn\\'t it?');\n    }\n  };\n  return tellEveryone;\n});\n\n// As we do know how to use define now, let's use `require` to\n// kick off our program. `require`'s signature is `(arrayOfDependencies, callback)`.\nrequire(['loudmouth'], function(loudmouth){\n  loudmouth();\n});\n\n// To make this tutorial run code, let's implement a very basic\n// (non-asynchronous) version of AMD right here on the spot:\nfunction define(name, deps, factory){\n  // notice how modules without dependencies are handled\n  define[name] = require(factory ? deps : [], factory || deps);\n}\n\nfunction require(deps, callback){\n  var args = [];\n  // first let's retrieve all the dependencies needed\n  // by the require call\n  for (var i = 0; i < deps.length; i++){\n    args[i] = define[deps[i]];\n  }\n  // satisfy all the callback's dependencies\n  return callback.apply(null, args);\n}\n// you can see this code in action here: http://jsfiddle.net/qap949pd/\n```\n\n### Real-world usage with require.js\n\nIn contrast to the introductory example, `require.js` (the most popular AMD library) actually implements the **A** in **AMD**, enabling you to load modules and their dependencies asynchronously via XHR:\n\n```javascript\n/* file: app/main.js */\nrequire(['modules/someClass'], function(SomeClass){\n  // the callback is deferred until the dependency is loaded\n  var thing = new SomeClass();\n});\nconsole.log('So here we are, waiting!'); // this will run first\n```\n\nBy convention, you usually store one module in one file. `require.js` can resolve module names based on file paths, so you don't have to name your modules, but can simply reference them using their location. In the example `someClass` is assumed to be in the `modules` folder, relative to your configuration's `baseUrl`:\n\n* app/\n  * main.js\n  * modules/\n    * someClass.js\n    * someHelpers.js\n    * ...\n  * daos/\n    * things.js\n    * ...\n\nThis means we can define `someClass` without specifying a module id:\n\n```javascript\n/* file: app/modules/someClass.js */\ndefine(['daos/things', 'modules/someHelpers'], function(thingsDao, helpers){\n  // module definition, of course, will also happen asynchronously\n  function SomeClass(){\n    this.method = function(){/**/};\n    // ...\n  }\n  return SomeClass;\n});\n```\n\nTo alter the default path mapping behavior use `requirejs.config(configObj)` in your `main.js`:\n\n```javascript\n/* file: main.js */\nrequirejs.config({\n  baseUrl : 'app',\n  paths : {\n    // you can also load modules from other locations\n    jquery : '//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min',\n    coolLibFromBower : '../bower_components/cool-lib/coollib'\n  }\n});\nrequire(['jquery', 'coolLibFromBower', 'modules/someHelpers'], function($, coolLib, helpers){\n  // a `main` file needs to call require at least once,\n  // otherwise no code will ever run\n  coolLib.doFancyStuffWith(helpers.transform($('#foo')));\n});\n```\n\n`require.js`-based apps will usually have a single entry point (`main.js`) that is passed to the `require.js` script tag as a data-attribute. It will be automatically loaded and executed on pageload:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>A hundred script tags? Never again!</title>\n</head>\n<body>\n  <script src=\"require.js\" data-main=\"app/main\"></script>\n</body>\n</html>\n```\n\n### Optimizing a whole project using r.js\n\nMany people prefer using AMD for sane code organization during development, but still want to ship a single script file in production instead of performing hundreds of XHRs on page load.\n\n`require.js` comes with a script called `r.js` (that you will probably run in node.js, although Rhino is supported too) that can analyse your project's dependency graph, and build a single file containing all your modules (properly named), minified and ready for consumption.\n\nInstall it using `npm`:\n\n```shell\n$ npm install requirejs -g\n```\n\nNow you can feed it with a configuration file:\n\n```shell\n$ r.js -o app.build.js\n```\n\nFor our above example the configuration might look like:\n\n```javascript\n/* file : app.build.js */\n({\n  name : 'main', // name of the entry point\n  out : 'main-built.js', // name of the file to write the output to\n  baseUrl : 'app',\n  paths : {\n    // `empty:` tells r.js that this should still be loaded from the CDN, using\n    // the location specified in `main.js`\n    jquery : 'empty:',\n    coolLibFromBower : '../bower_components/cool-lib/coollib'\n  }\n})\n```\n\nTo use the built file in production, simply swap `data-main`:\n\n```html\n<script src=\"require.js\" data-main=\"app/main-built\"></script>\n```\n\nAn incredibly detailed [overview of build options](https://github.com/jrburke/r.js/blob/master/build/example.build.js) is available in the GitHub repo.\n\n### Topics not covered in this tutorial\n* [Loader plugins / transforms](http://requirejs.org/docs/plugins.html)\n* [CommonJS style loading and exporting](http://requirejs.org/docs/commonjs.html)\n* [Advanced configuration](http://requirejs.org/docs/api.html#config)\n* [Shim configuration (loading non-AMD modules)](http://requirejs.org/docs/api.html#config-shim)\n* [CSS loading and optimizing with require.js](http://requirejs.org/docs/optimization.html#onecss)\n* [Using almond.js for builds](https://github.com/jrburke/almond)\n\n### Further reading:\n\n* [Official Spec](https://github.com/amdjs/amdjs-api/wiki/AMD)\n* [Why AMD?](http://requirejs.org/docs/whyamd.html)\n* [Universal Module Definition](https://github.com/umdjs/umd)\n\n### Implementations:\n\n* [require.js](http://requirejs.org)\n* [dojo toolkit](http://dojotoolkit.org/documentation/tutorials/1.9/modules/)\n* [cujo.js](http://cujojs.com/)\n* [curl.js](https://github.com/cujojs/curl)\n* [lsjs](https://github.com/zazl/lsjs)\n* [mmd](https://github.com/alexlawrence/mmd)\n"
        },
        {
          "name": "angularjs.md",
          "type": "blob",
          "size": 21.7568359375,
          "content": "---\ncategory: framework\nname: AngularJS\ncontributors:\n    - [\"Walter Cordero\", \"http://waltercordero.com\"]\nfilename: learnangular.txt\n---\n\n## AngularJS Tutorial.\n\nAngularJS version 1.0 was released in 2012.\nMiško Hevery, a Google employee, started to work with AngularJS in 2009.\nThe idea turned out very well, and the project is now officially supported by Google.\n\nAngularJS is a JavaScript framework. It can be added to an HTML page with a \"script\" tag.\nAngularJS extends HTML attributes with Directives, and binds data to HTML with Expressions.\n\n## What You Should Already Know\n\nBefore you study AngularJS, you should have a basic understanding of:\n\n- HTML\n- CSS\n- JavaScript\n\n```html\n// AngularJS is a JavaScript framework. It is a library written in JavaScript.\n// AngularJS is distributed as a JavaScript file, and can be added to a web page with a script tag:\n// <script src=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\"></script>\n\n///////////////////////////////////\n// AngularJS Extends HTML\n\n//AngularJS extends HTML with ng-directives.\n//The ng-app directive defines an AngularJS application.\n//The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.\n//The ng-bind directive binds application data to the HTML view.\n<!DOCTYPE html>\n<html>\n  <script src=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\"></script>\n  <body>\n    <div ng-app=\"\">\n      <p>Name: <input type=\"text\" ng-model=\"name\"></p>\n      <p ng-bind=\"name\"></p>\n    </div>\n  </body>\n</html>\n\n/*\n  * Example explained:\n  * AngularJS starts automatically when the web page has loaded.\n  * The ng-app directive tells AngularJS that the <div> element is the \"owner\" of an AngularJS application.\n  * The ng-model directive binds the value of the input field to the application variable name.\n  * The ng-bind directive binds the innerHTML of the <p> element to the application variable name.\n*/\n<tag> Here are content to be interpreted </tag>\n\n///////////////////////////////////\n// AngularJS Expressions\n\n// AngularJS expressions are written inside double braces: {{ expression }}.\n// AngularJS expressions binds data to HTML the same way as the ng-bind directive.\n// AngularJS will \"output\" data exactly where the expression is written.\n// AngularJS expressions are much like JavaScript expressions: They can contain literals, operators, and variables.\n// Example {{ 5 + 5 }} or {{ firstName + \" \" + lastName }}\n<!DOCTYPE html>\n<html>\n  <script src=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\"></script>\n  <body>\n    <div ng-app=\"\">\n      <p>My first expression: {{ 5 + 5 }}</p>\n    </div>\n  </body>\n</html>\n\n//If you remove the ng-app directive, HTML will display the expression as it is, without solving it:\n<!DOCTYPE html>\n<html>\n  <script src=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\"></script>\n  <body>\n    <div>\n      <p>My first expression: {{ 5 + 5 }}</p>\n    </div>\n  </body>\n</html>\n\n// AngularJS expressions bind AngularJS data to HTML the same way as the ng-bind directive.\n<!DOCTYPE html>\n<html>\n<script src=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\"></script>\n  <body>\n    <div ng-app=\"\">\n      <p>Name: <input type=\"text\" ng-model=\"name\"></p>\n      <p>{{name}}</p>\n    </div>\n  </body>\n</html>\n\n// AngularJS numbers are like JavaScript numbers:\n<div ng-app=\"\" ng-init=\"quantity=1;cost=5\">\n  <p>Total in dollar: {{ quantity * cost }}</p>\n</div>\n\n//AngularJS strings are like JavaScript strings:\n<div ng-app=\"\" ng-init=\"firstName='John';lastName='Doe'\">\n  <p>The name is <span ng-bind=\"firstName + ' ' + lastName\"></span></p>\n</div>\n\n//AngularJS objects are like JavaScript objects:\n<div ng-app=\"\" ng-init=\"person={firstName:'John',lastName:'Doe'}\">\n  <p>The name is {{ person.lastName }}</p>\n</div>\n\n//AngularJS arrays are like JavaScript arrays:\n<div ng-app=\"\" ng-init=\"points=[1,15,19,2,40]\">\n  <p>The third result is {{ points[2] }}</p>\n</div>\n\n// Like JavaScript expressions, AngularJS expressions can contain literals, operators, and variables.\n// Unlike JavaScript expressions, AngularJS expressions can be written inside HTML.\n// AngularJS expressions do not support conditionals, loops, and exceptions, while JavaScript expressions do.\n// AngularJS expressions support filters, while JavaScript expressions do not.\n\n///////////////////////////////////\n// AngularJS Directives\n\n\n//AngularJS directives are extended HTML attributes with the prefix ng-.\n//The ng-app directive initializes an AngularJS application.\n//The ng-init directive initializes application data.\n//The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.\n<div ng-app=\"\" ng-init=\"firstName='John'\">\n  <p>Name: <input type=\"text\" ng-model=\"firstName\"></p>\n  <p>You wrote: {{ firstName }}</p>\n</div>\n\n//Using ng-init is not very common. You will learn how to initialize data in the chapter about controllers.\n\n//The ng-repeat directive repeats an HTML element:\n<div ng-app=\"\" ng-init=\"names=['Jani','Hege','Kai']\">\n  <ul>\n    <li ng-repeat=\"x in names\">\n      {{ x }}\n    </li>\n  </ul>\n</div>\n\n//The ng-repeat directive used on an array of objects:\n<div ng-app=\"\" ng-init=\"names=[\n{name:'Jani',country:'Norway'},\n{name:'Hege',country:'Sweden'},\n{name:'Kai',country:'Denmark'}]\">\n  <ul>\n    <li ng-repeat=\"x  in names\">\n      {{ x.name + ', ' + x.country }}\n    </li>\n  </ul>\n</div>\n\n// AngularJS is perfect for database CRUD (Create Read Update Delete) applications.\n// Just imagine if these objects were records from a database.\n\n// The ng-app directive defines the root element of an AngularJS application.\n// The ng-app directive will auto-bootstrap (automatically initialize) the application when a web page is loaded.\n// Later you will learn how ng-app can have a value (like ng-app=\"myModule\"), to connect code modules.\n\n// The ng-init directive defines initial values for an AngularJS application.\n// Normally, you will not use ng-init. You will use a controller or module instead.\n// You will learn more about controllers and modules later.\n\n//The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.\n//The ng-model directive can also:\n//Provide type validation for application data (number, email, required).\n//Provide status for application data (invalid, dirty, touched, error).\n//Provide CSS classes for HTML elements.\n//Bind HTML elements to HTML forms.\n\n//The ng-repeat directive clones HTML elements once for each item in a collection (in an array).\n\n///////////////////////////////////\n// AngularJS Controllers\n\n// AngularJS controllers control the data of AngularJS applications.\n// AngularJS controllers are regular JavaScript Objects.\n\n// AngularJS applications are controlled by controllers.\n// The ng-controller directive defines the application controller.\n// A controller is a JavaScript Object, created by a standard JavaScript object constructor.\n\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n\nFirst Name: <input type=\"text\" ng-model=\"firstName\"><br>\nLast Name: <input type=\"text\" ng-model=\"lastName\"><br>\n<br>\nFull Name: {{firstName + \" \" + lastName}}\n\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n    $scope.firstName = \"John\";\n    $scope.lastName = \"Doe\";\n});\n</script>\n\n//Application explained:\n\n//The AngularJS application is defined by  ng-app=\"myApp\". The application runs inside the <div>.\n//The ng-controller=\"myCtrl\" attribute is an AngularJS directive. It defines a controller.\n//The myCtrl function is a JavaScript function.\n//AngularJS will invoke the controller with a $scope object.\n//In AngularJS, $scope is the application object (the owner of application variables and functions).\n//The controller creates two properties (variables) in the scope (firstName and lastName).\n//The ng-model directives bind the input fields to the controller properties (firstName and lastName).\n\n//The example above demonstrated a controller object with two properties: lastName and firstName.\n//A controller can also have methods (variables as functions):\n<div ng-app=\"myApp\" ng-controller=\"personCtrl\">\n\nFirst Name: <input type=\"text\" ng-model=\"firstName\"><br>\nLast Name: <input type=\"text\" ng-model=\"lastName\"><br>\n<br>\nFull Name: {{fullName()}}\n\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('personCtrl', function($scope) {\n    $scope.firstName = \"John\";\n    $scope.lastName = \"Doe\";\n    $scope.fullName = function() {\n        return $scope.firstName + \" \" + $scope.lastName;\n    }\n});\n</script>\n\n//In larger applications, it is common to store controllers in external files.\n//Just copy the code between the <script> </script> tags into an external file named personController.js:\n\n<div ng-app=\"myApp\" ng-controller=\"personCtrl\">\n\nFirst Name: <input type=\"text\" ng-model=\"firstName\"><br>\nLast Name: <input type=\"text\" ng-model=\"lastName\"><br>\n<br>\nFull Name: {{firstName + \" \" + lastName}}\n\n</div>\n\n<script src=\"personController.js\"></script>\n\n// For the next example we will create a new controller file:\nangular.module('myApp', []).controller('namesCtrl', function($scope) {\n    $scope.names = [\n        {name:'Jani',country:'Norway'},\n        {name:'Hege',country:'Sweden'},\n        {name:'Kai',country:'Denmark'}\n    ];\n});\n\n//Save the file as  namesController.js:\n//And then use the controller file in an application:\n\n<div ng-app=\"myApp\" ng-controller=\"namesCtrl\">\n\n<ul>\n  <li ng-repeat=\"x in names\">\n    {{ x.name + ', ' + x.country }}\n  </li>\n</ul>\n\n</div>\n\n<script src=\"namesController.js\"></script>\n\n///////////////////////////////////\n// AngularJS Filters\n\n// Filters can be added to expressions and directives using a pipe character.\n// AngularJS filters can be used to transform data:\n\n- **currency**:  Format a number to a currency format.\n- **filter**:  Select a subset of items from an array.\n- **lowercase**: Format a string to lower case.\n- **orderBy**: Orders an array by an expression.\n- **uppercase**: Format a string to upper case.\n\n//A filter can be added to an expression with a pipe character (|) and a filter.\n//(For the next two examples we will use the person controller from the previous chapter)\n//The uppercase filter format strings to upper case:\n<div ng-app=\"myApp\" ng-controller=\"personCtrl\">\n\n<p>The name is {{ lastName | uppercase }}</p>\n\n</div>\n\n//The lowercase filter format strings to lower case:\n<div ng-app=\"myApp\" ng-controller=\"personCtrl\">\n\n<p>The name is {{ lastName | lowercase }}</p>\n\n</div>\n\n//The currency filter formats a number as currency:\n<div ng-app=\"myApp\" ng-controller=\"costCtrl\">\n\n<input type=\"number\" ng-model=\"quantity\">\n<input type=\"number\" ng-model=\"price\">\n\n<p>Total = {{ (quantity * price) | currency }}</p>\n\n</div> \n\n//A filter can be added to a directive with a pipe character (|) and a filter.\n//The orderBy filter orders an array by an expression:\n<div ng-app=\"myApp\" ng-controller=\"namesCtrl\">\n\n<ul>\n  <li ng-repeat=\"x in names | orderBy:'country'\">\n    {{ x.name + ', ' + x.country }}\n  </li>\n</ul>\n\n<div>\n\n//An input filter can be added to a directive with a pipe character (|) \n//and filter followed by a colon and a model name.\n//The filter selects a subset of an array:\n\n<div ng-app=\"myApp\" ng-controller=\"namesCtrl\">\n\n<p><input type=\"text\" ng-model=\"test\"></p>\n\n<ul>\n  <li ng-repeat=\"x in names | filter:test | orderBy:'country'\">\n    {{ (x.name | uppercase) + ', ' + x.country }}\n  </li>\n</ul>\n\n</div>\n\n///////////////////////////////////\n// AngularJS AJAX - $http\n\n//$http is an AngularJS service for reading data from remote servers.\n\n// The following data can be provided by a web server:\n// http://www.w3schools.com/angular/customers.php\n// **Check the URL to see the data format**\n\n// AngularJS $http is a core service for reading data from web servers.\n// $http.get(url) is the function to use for reading server data.\n<div ng-app=\"myApp\" ng-controller=\"customersCtrl\"> \n\n<ul>\n  <li ng-repeat=\"x in names\">\n    {{ x.Name + ', ' + x.Country }}\n  </li>\n</ul>\n\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('customersCtrl', function($scope, $http) {\n    $http.get(\"http://www.w3schools.com/angular/customers.php\")\n    .success(function(response) {$scope.names = response.records;});\n});\n</script>\n\nApplication explained:\n\n// The AngularJS application is defined by ng-app. The application runs inside a <div>.\n// The ng-controller directive names the controller object.\n// The customersCtrl function is a standard JavaScript object constructor.\n// AngularJS will invoke customersCtrl with a $scope and $http object.\n// $scope is the application object (the owner of application variables and functions).\n// $http is an XMLHttpRequest object for requesting external data.\n// $http.get() reads JSON data from http://www.w3schools.com/angular/customers.php.\n// If success, the controller creates a property (names) in the scope, with JSON data from the server.\n\n\n// Requests for data from a different server (than the requesting page), are called cross-site HTTP requests.\n// Cross-site requests are common on the web. Many pages load CSS, images, and scripts from different servers.\n// In modern browsers, cross-site HTTP requests from scripts are restricted to same site for security reasons.\n// The following line, in our PHP examples, has been added to allow cross-site access.\nheader(\"Access-Control-Allow-Origin: *\");\n\n\n///////////////////////////////////\n// AngularJS Tables\n\n// Displaying tables with angular is very simple:\n<div ng-app=\"myApp\" ng-controller=\"customersCtrl\"> \n\n<table>\n  <tr ng-repeat=\"x in names\">\n    <td>{{ x.Name }}</td>\n    <td>{{ x.Country }}</td>\n  </tr>\n</table>\n\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('customersCtrl', function($scope, $http) {\n    $http.get(\"http://www.w3schools.com/angular/customers.php\")\n    .success(function (response) {$scope.names = response.records;});\n});\n</script>\n\n// To sort the table, add an orderBy filter: \n<table>\n  <tr ng-repeat=\"x in names | orderBy : 'Country'\">\n    <td>{{ x.Name }}</td>\n    <td>{{ x.Country }}</td>\n  </tr>\n</table>\n\n// To display the table index, add a <td> with $index: \n<table>\n  <tr ng-repeat=\"x in names\">\n    <td>{{ $index + 1 }}</td>\n    <td>{{ x.Name }}</td>\n    <td>{{ x.Country }}</td>\n  </tr>\n</table>\n\n// Using $even and $odd\n<table>\n  <tr ng-repeat=\"x in names\">\n    <td ng-if=\"$odd\" style=\"background-color:#f1f1f1\">{{ x.Name }}</td>\n    <td ng-if=\"$even\">{{ x.Name }}</td>\n    <td ng-if=\"$odd\" style=\"background-color:#f1f1f1\">{{ x.Country }}</td>\n    <td ng-if=\"$even\">{{ x.Country }}</td>\n  </tr>\n</table>\n\n///////////////////////////////////\n// AngularJS HTML DOM\n\n//AngularJS has directives for binding application data to the attributes of HTML DOM elements.\n\n// The ng-disabled directive binds AngularJS application data to the disabled attribute of HTML elements.\n\n<div ng-app=\"\" ng-init=\"mySwitch=true\">\n\n<p>\n<button ng-disabled=\"mySwitch\">Click Me!</button>\n</p>\n\n<p>\n<input type=\"checkbox\" ng-model=\"mySwitch\">Button\n</p>\n\n</div>\n\n//Application explained:\n\n// The ng-disabled directive binds the application data mySwitch to the HTML button's disabled attribute.\n// The ng-model directive binds the value of the HTML checkbox element to the value of mySwitch.\n// If the value of mySwitch evaluates to true, the button will be disabled: \n<p>\n<button disabled>Click Me!</button>\n</p>\n\n// If the value of mySwitch evaluates to false, the button will not be disabled: \n<p>\n  <button>Click Me!</button>\n</p>\n\n// The ng-show directive shows or hides an HTML element.\n\n<div ng-app=\"\">\n\n<p ng-show=\"true\">I am visible.</p>\n\n<p ng-show=\"false\">I am not visible.</p>\n\n</div>\n\n// The ng-show directive shows (or hides) an HTML element based on the value of ng-show.\n// You can use any expression that evaluates to true or false:\n<div ng-app=\"\">\n<p ng-show=\"hour > 12\">I am visible.</p>\n</div>\n\n///////////////////////////////////\n// AngularJS Events\n\n// AngularJS has its own HTML events directives.\n\n// The ng-click directive defines an AngularJS click event.\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n\n<button ng-click=\"count = count + 1\">Click me!</button>\n\n<p>{{ count }}</p>\n\n</div>\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n    $scope.count = 0;\n});\n</script>\n\n// The ng-hide directive can be used to set the visibility of a part of an application.\n// The value ng-hide=\"true\" makes an HTML element invisible.\n// The value ng-hide=\"false\" makes the element visible.\n<div ng-app=\"myApp\" ng-controller=\"personCtrl\">\n\n<button ng-click=\"toggle()\">Toggle</button>\n\n<p ng-hide=\"myVar\">\nFirst Name: <input type=\"text\" ng-model=\"firstName\"><br>\nLast Name: <input type=\"text\" ng-model=\"lastName\"><br>\n<br>\nFull Name: {{firstName + \" \" + lastName}}\n</p>\n\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('personCtrl', function($scope) {\n    $scope.firstName = \"John\",\n    $scope.lastName = \"Doe\"\n    $scope.myVar = false;\n    $scope.toggle = function() {\n        $scope.myVar = !$scope.myVar;\n    };\n});\n</script>\n\n//Application explained:\n\n// The first part of the personController is the same as in the chapter about controllers.\n// The application has a default property (a variable): $scope.myVar = false;\n// The ng-hide directive sets the visibility, of a <p> element with two input fields, \n// according to the value (true or false) of myVar.\n// The function toggle() toggles myVar between true and false.\n// The value ng-hide=\"true\" makes the element invisible.\n\n\n// The ng-show directive can also be used to set the visibility of a part of an application.\n// The value ng-show=\"false\" makes an HTML element invisible.\n// The value ng-show=\"true\" makes the element visible.\n// Here is the same example as above, using ng-show instead of ng-hide:\n<div ng-app=\"myApp\" ng-controller=\"personCtrl\">\n\n<button ng-click=\"toggle()\">Toggle</button>\n\n<p ng-show=\"myVar\">\nFirst Name: <input type=\"text\" ng-model=\"firstName\"><br>\nLast Name: <input type=\"text\" ng-model=\"lastName\"><br>\n<br>\nFull Name: {{firstName + \" \" + lastName}}\n</p>\n\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('personCtrl', function($scope) {\n    $scope.firstName = \"John\",\n    $scope.lastName = \"Doe\"\n    $scope.myVar = true;\n    $scope.toggle = function() {\n        $scope.myVar = !$scope.myVar;\n    }\n});\n</script>\n\n///////////////////////////////////\n// AngularJS Modules\n\n// An AngularJS module defines an application.\n// The module is a container for the different parts of an application.\n// The module is a container for the application controllers.\n// Controllers always belong to a module.\n\n// This application (\"myApp\") has one controller (\"myCtrl\"):\n\n<!DOCTYPE html>\n<html>\n<script src=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\"></script>\n<body>\n\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n{{ firstName + \" \" + lastName }}\n</div>\n\n<script>\nvar app = angular.module(\"myApp\", []);\napp.controller(\"myCtrl\", function($scope) {\n    $scope.firstName = \"John\";\n    $scope.lastName = \"Doe\";\n});\n</script>\n\n</body>\n</html>\n\n// It is common in AngularJS applications to put the module and the controllers in JavaScript files.\n// In this example, \"myApp.js\" contains an application module definition, while \"myCtrl.js\" contains the controller:\n\n<!DOCTYPE html>\n<html>\n<script src=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\"></script>\n<body>\n\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n{{ firstName + \" \" + lastName }}\n</div>\n\n<script src=\"myApp.js\"></script>\n<script src=\"myCtrl.js\"></script>\n\n</body>\n</html>\n\n//myApp.js\nvar app = angular.module(\"myApp\", []); \n\n// The [] parameter in the module definition can be used to define dependent modules.\n\n// myCtrl.js\napp.controller(\"myCtrl\", function($scope) {\n    $scope.firstName  = \"John\";\n    $scope.lastName= \"Doe\";\n});\n\n// Global functions should be avoided in JavaScript. They can easily be overwritten \n// or destroyed by other scripts.\n\n// AngularJS modules reduces this problem, by keeping all functions local to the module.\n\n// While it is common in HTML applications to place scripts at the end of the \n// <body> element, it is recommended that you load the AngularJS library either\n// in the <head> or at the start of the <body>.\n\n// This is because calls to angular.module can only be compiled after the library has been loaded.\n\n<!DOCTYPE html>\n<html>\n<body>\n<script src=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\"></script>\n\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n{{ firstName + \" \" + lastName }}\n</div>\n\n<script>\nvar app = angular.module(\"myApp\", []);\napp.controller(\"myCtrl\", function($scope) {\n    $scope.firstName = \"John\";\n    $scope.lastName = \"Doe\";\n});\n</script>\n\n</body>\n</html>\n\n\n///////////////////////////////////\n// AngularJS Applications\n\n// AngularJS modules define AngularJS applications.\n// AngularJS controllers control AngularJS applications.\n// The ng-app directive defines the application, the ng-controller directive defines the controller.\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n  First Name: <input type=\"text\" ng-model=\"firstName\"><br>\n  Last Name: <input type=\"text\" ng-model=\"lastName\"><br>\n  <br>\n  Full Name: {{firstName + \" \" + lastName}}\n</div>\n<script>\n  var app = angular.module('myApp', []);\n  app.controller('myCtrl', function($scope) {\n      $scope.firstName= \"John\";\n      $scope.lastName= \"Doe\";\n  });\n</script>\n\n// AngularJS modules define applications:\nvar app = angular.module('myApp', []);\n\n// AngularJS controllers control applications:\napp.controller('myCtrl', function($scope) {\n    $scope.firstName= \"John\";\n    $scope.lastName= \"Doe\";\n});\n```\n\n## Source & References\n\n**Examples**\n\n- [http://www.w3schools.com/angular/angular_examples.asp](http://www.w3schools.com/angular/angular_examples.asp)\n\n**References**\n\n- [http://www.w3schools.com/angular/angular_ref_directives.asp](http://www.w3schools.com/angular/angular_ref_directives.asp)\n- [http://www.w3schools.com/angular/default.asp](http://www.w3schools.com/angular/default.asp)\n- [https://teamtreehouse.com/library/angular-basics/](https://teamtreehouse.com/library/angular-basics/)\n"
        },
        {
          "name": "ansible.md",
          "type": "blob",
          "size": 21.41796875,
          "content": "---\ncategory: tool\nname: Ansible\ncontributors:\n    - [\"Jakub Muszynski\" , \"http://github.com/sirkubax\"]\n    - [\"Pat Myron\" , \"https://github.com/patmyron\"]\n    - [\"Divay Prakash\", \"https://github.com/divayprakash\"]\nfilename: LearnAnsible.txt\n---\n\n## Introduction\n\n```yaml\n---\n\"{{ Ansible }}\" is an orchestration tool written in Python.\n...\n```\n\nAnsible is (one of many) orchestration tools. It allows you to control your\nenvironment (infrastructure and code) and automate the manual tasks.\n\nAnsible has great integration with multiple operating systems (even Windows)\nand some hardware (switches, Firewalls, etc). It has multiple tools that\nintegrate with the cloud providers. Almost every noteworthy cloud provider is\npresent in the ecosystem (AWS, Azure, Google, DigitalOcean, OVH, etc...).\n\nBut ansible is way more! It provides execution plans, an API, library, and callbacks.\n\n### Main pros and cons\n\n#### Pros\n\n* It is an agent-less tool. In most scenarios, it uses ssh as a transport layer.\nIn some way you can use it as 'bash on steroids'.\n* It is very easy to start. If you are familiar with the concept of ssh - you already\nknow Ansible (ALMOST).\n* It executes 'as is' - other tools (salt, puppet, chef - might execute in\ndifferent scenario than you would expect)\n* Documentation is at the world-class standard!\n* Writing your own modules and extensions is fairly easy.\n* Ansible AWX is the open source version of Ansible Tower we have been waiting\nfor, which provides an excellent UI.\n\n#### Cons\n\n* It is an agent-less tool - every agent consumes up to 16MB ram - in some\nenvironments, it may be noticeable amount.\n* It is agent-less - you have to verify your environment consistency\n'on-demand' - there is no built-in mechanism that would warn you about some\nchange automatically (this can be achieved with reasonable effort)\n* Official GUI - Ansible Tower - is great but expensive.\n* There is no 'small enterprise' payment plan, however Ansible AWX is the free\nopen source version we were all waiting for.\n\n#### Neutral\n\nMigration - Ansible <-> Salt is fairly easy - so if you would need an\nevent-driven agent environment - it would be a good choice to start quick with\nAnsible, and convert to Salt when needed.\n\n#### Some concepts\n\nAnsible uses ssh or paramiko as a transport layer. In a way you can imagine\nthat you are using a ssh with API to perform your action. The simplest way is\nto execute remote command in more controlled way (still using ssh).\nOn the other hand - in advanced scope - you can wrap Ansible (use python Ansible\ncode as a library) with your own Python scripts! It would act a\nbit like Fabric then.\n\n## Example\n\nAn example playbook to install apache and configure log level\n\n```yaml\n---\n- hosts: apache\n\n  vars:\n      apache2_log_level: \"warn\"\n\n  handlers:\n  - name: restart apache\n    service:\n      name: apache2\n      state: restarted\n      enabled: True\n    notify:\n      - Wait for instances to listen on port 80\n    become: True\n\n  - name: reload apache\n    service:\n      name: apache2\n      state: reloaded\n    notify:\n      - Wait for instances to listen on port 80\n    become: True\n\n  - name: Wait for instances to listen on port 80\n    wait_for:\n      state: started\n      host: localhost\n      port: 80\n      timeout: 15\n      delay: 5\n\n  tasks:\n  - name: Update cache\n    apt:\n      update_cache: yes\n      cache_valid_time: 7200\n    become: True\n\n  - name: Install packages\n    apt:\n      name={{ item }}\n    with_items:\n      - apache2\n      - logrotate\n    notify:\n      - restart apache\n    become: True\n\n  - name: Configure apache2 log level\n    lineinfile:\n      dest: /etc/apache2/apache2.conf\n      line: \"LogLevel {{ apache2_log_level }}\"\n      regexp: \"^LogLevel\"\n    notify:\n      - reload apache\n    become: True\n...\n```\n\n## Installation\n\n```bash\n# Universal way\n$ pip install ansible\n\n# Debian, Ubuntu\n$ apt-get install ansible\n```\n\n* [Appendix A - How do I install ansible](#infrastructure-as-a-code)\n* [Additional Reading.](http://docs.ansible.com/ansible/latest/intro_installation.html)\n\n### Your first ansible command (shell execution)\n\n```bash\n# Command pings localhost (defined in default inventory: /etc/ansible/hosts)\n$ ansible -m ping localhost\n# You should see this output\nlocalhost | SUCCESS => {\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\n```\n\n### Shell Commands\n\nThere are few commands you should know about\n\n* `ansible` (to run modules in CLI)\n* `ansible-playbook` (to run playbooks)\n* `ansible-vault` (to manage secrets)\n* `ansible-galaxy` (to install roles from github/galaxy)\n\n### Module\n\nA program (usually python) that executes, does some work and returns proper\nJSON output. This program performs specialized task/action (like manage\ninstances in the cloud, execute shell command). The simplest module is called\n`ping` - it just returns a JSON with `pong` message.\n\nExample of modules:\n\n* Module: `ping` - the simplest module that is useful to verify host connectivity\n* Module: `shell` - a module that executes a shell command on a specified host(s).\n\n\n```bash\n$ ansible -m ping all\n$ ansible -m shell -a 'date; whoami' localhost #hostname_or_a_group_name\n```\n\n* Module: `command` - executes a single command that will not be processed\nthrough the shell, so variables like `$HOME` or operands like ``|` `;`` will not\nwork. The command module is more secure, because it will not be affected by the\nuser’s environment. For more complex commands - use shell module.\n\n```bash\n$ ansible -m command -a 'date; whoami' # FAILURE\n$ ansible -m command -a 'date' all\n$ ansible -m command -a 'whoami' all\n```\n\n* Module: `file` - performs file operations (stat, link, dir, ...)\n* Module: `raw` - executes a low-down and dirty SSH command, not going through\nthe module subsystem (useful to install python2.7)\n\n### Task\n\nExecution of a single Ansible **module** is called a **task**. The simplest\nmodule is called `ping` as you could see above.\n\nAnother example of the module that allows you to execute a command remotely on\nmultiple resources is called `shell`. See above how you were using them already.\n\n### Playbook\n\n**Execution plan** written in a form of script file(s) is called **playbook**.\nPlaybooks consist of multiple elements -\n* a list (or group) of hosts that 'the play' is executed against\n* `task(s)` or `role(s)` that are going to be executed\n* multiple optional settings (like default variables, and way more)\n\nPlaybook script language is YAML. You can think that playbook is very advanced\nCLI script that you are executing.\n\n#### Example of the playbook\n\nThis example-playbook would execute (on all hosts defined in inventory) two tasks:\n* `ping` that would return message *pong*\n* `shell` that execute three commands and return the output to our terminal\n\n```yaml\n- hosts: all\n\n  tasks:\n    - name: \"ping all\"\n      ping:\n\n    - name: \"execute a shell command\"\n      shell: \"date; whoami; df -h;\"\n```\n\nRun the playbook with the command:\n\n```bash\n$ ansible-playbook path/name_of_the_playbook.yml\n```\n\nNote: Example playbook is explained in the next chapter: 'Roles'\n\n### More on ansible concept\n\n### Inventory\n\nAn inventory is a set of objects or hosts, against which we are executing our\nplaybooks or single tasks via shell commands. For these few minutes, let's\nassume that we are using the default ansible inventory (which in Debian based\nsystem is placed in `/etc/ansible/hosts`).\n\n```\nlocalhost\n\n[some_group]\nhostA.mydomain.com\nhostB.localdomain\n1.2.3.4\n\n[a_group_of_a_groups:children]\nsome_group\nsome_other_group\n```\n\n* [Additional Reading.](http://docs.ansible.com/ansible/latest/intro_inventory.html)\n\n### ansible-roles (a 'template-playbooks' with right structure)\n\nYou already know that the tasks (modules) can be run via CLI. You also know the\nplaybooks - the execution plans of multiple tasks (with variables and logic).\n\nA concept called `role` was introduced for parts of the code (playbooks) that\nshould be reusable.\n\n**Role** is a structured way to manage your set of tasks, variables, handlers,\ndefault settings, and way more (meta, files, templates). Roles allow reusing\nthe same parts of code in multiple playbooks (you can parametrize the role\n'further' during its execution). Its a great way to introduce `object oriented`\nmanagement for your applications.\n\nRole can be included in your playbook (executed via your playbook).\n\n\n```yaml\n- hosts: all\n\n  tasks:\n      - name: \"ping all\"\n        ping:\n      - name: \"execute a shell command\"\n        shell: \"date; whoami; df -h;\"\n\n  roles:\n      - some_role\n      - { role: another_role, some_variable: 'learnxiny', tags: ['my_tag'] }\n\n  pre_tasks:\n      - name: some pre-task\n        shell: echo 'this task is the last, but would be executed before roles, and before tasks'\n```\n\n#### For remaining examples we would use additional repository\nThis example installs ansible in `virtualenv` so it is independent from the system.\nYou need to initialize it into your shell-context with the `source environment.sh`\ncommand.\n\nWe are going to use this repository with examples: [https://github.com/sirkubax/ansible-for-learnXinYminutes](https://github.com/sirkubax/ansible-for-learnXinYminutes)\n\n```bash\n$ # The following example contains a shell-prompt to indicate the venv and relative path\n$ git clone git@github.com:sirkubax/ansible-for-learnXinYminutes.git\nuser@host:~/$ cd ansible-for-learnXinYminutes\nuser@host:~/ansible-for-learnXinYminutes$ source environment.sh\n$\n$ # First lets execute the simple_playbook.yml\n(venv) user@host:~/ansible-for-learnXinYminutes$ ansible-playbook playbooks/simple_playbook.yml\n```\n\nRun the playbook with roles example\n\n```bash\n$ source environment.sh\n$ # Now we would run the above playbook with roles\n(venv) user@host:~/ansible-for-learnXinYminutes$ ansible-playbook playbooks/simple_role.yml\n```\n\n#### Role directory structure\n\n```\nroles/\n   some_role/\n     defaults/      # contains default variables\n     files/         # for static files\n     templates/     # for jinja templates\n     tasks/         # tasks\n     handlers/      # handlers\n     vars/          # more variables (higher priority)\n     meta/          # meta - package (role) info\n```\n\n#### Role Handlers\nHandlers are tasks that can be triggered (notified) during execution of a\nplaybook, but they execute at the very end of a playbook. It is the best way to\nrestart a service, check if the application port is active (successful\ndeployment criteria), etc.\n\nGet familiar with how you can use roles in the simple_apache_role example\n\n```\nplaybooks/roles/simple_apache_role/\n├── tasks\n│   └── main.yml\n└── templates\n    └── main.yml\n```\n\n### ansible - variables\n\nAnsible is flexible - it has 21 levels of variable precedence.\n[read more](http://docs.ansible.com/ansible/latest/playbooks_variables.html#variable-precedence-where-should-i-put-a-variable)\nFor now you should know that CLI variables have the top priority.\nYou should also know, that a nice way to pool some data is a **lookup**\n\n### Lookups\nAwesome tool to query data from various sources!!! Awesome!\nquery from:\n* pipe  (load shell command output into variable!)\n* file\n* stream\n* etcd\n* password management tools\n* url\n\n```bash\n# read playbooks/lookup.yml\n# then run\n(venv) user@host:~/ansible-for-learnXinYminutes$ ansible-playbook playbooks/lookup.yml\n```\n\nYou can use them in CLI too\n\n```yaml\nansible -m shell -a 'echo \"{{ my_variable }}\"' -e 'my_variable=\"{{ lookup(\"pipe\", \"date\") }}\"' localhost\nansible -m shell -a 'echo \"{{ my_variable }}\"' -e 'my_variable=\"{{ lookup(\"pipe\", \"hostname\") }}\"' all\n\n# Or use in playbook\n\n(venv) user@host:~/ansible-for-learnXinYminutes$ ansible-playbook playbooks/lookup.yml\n```\n\n### Register and Conditional\n\n#### Register\n\nAnother way to dynamically generate the variable content is the `register` command.\n`Register` is also useful to store an output of a task and use its value\nfor executing further tasks.\n\n```\n(venv) user@host:~/ansible-for-learnXinYminutes$ ansible-playbook playbooks/register_and_when.yml\n```\n\n```yaml\n---\n- hosts: localhost\n  tasks:\n   - name: check the system capacity\n     shell: df -h /\n     register: root_size\n\n   - name: debug root_size\n     debug:\n        msg: \"{{ root_size }}\"\n\n   - name: debug root_size return code\n     debug:\n       msg:  \"{{ root_size.rc }}\"\n\n# when: example\n\n   - name: Print this message when return code of 'check the system capacity' was ok\n     debug:\n       msg:  \"{{ root_size.rc }}\"\n     when: root_size.rc == 0\n...\n```\n\n#### Conditionals - when:\n\nYou can define complex logic with Ansible and Jinja functions. Most common is\nusage of `when:`, with some variable (often dynamically generated in previous\nplaybook steps with `register` or `lookup`)\n\n```yaml\n---\n- hosts: localhost\n  tasks:\n   - name: check the system capacity\n     shell: df -h /\n     when: some_variable in 'a string'\n  roles:\n   - { role: mid_nagios_probe, when: allow_nagios_probes }\n...\n```\n\n### ansible - tags, limit\n\nYou should know about a way to increase efficiency by this simple functionality\n\n#### TAGS\n\nYou can tag a task, role (and its tasks), include, etc, and then run only the\ntagged resources\n\n```\nansible-playbook playbooks/simple_playbook.yml --tags=tagA,tag_other\nansible-playbook playbooks/simple_playbook.yml -t tagA,tag_other\n\nThere are special tags:\n    always\n\n--skip-tags can be used to exclude a block of code\n--list-tags to list available tags\n```\n\n[Read more](http://docs.ansible.com/ansible/latest/playbooks_tags.html)\n\n#### LIMIT\n\nYou can limit an execution of your tasks to defined hosts\n\n```\nansible-playbook playbooks/simple_playbook.yml --limit localhost\n\n--limit my_hostname\n--limit groupname\n--limit some_prefix*\n--limit hostname:group #JM\n```\n\n### Templates\n\nTemplates are a powerful way to deliver some (partially) dynamic content.\nAnsible uses **Jinja2** language to describe the template.\n\n```\nSome static content\n\n{{ a_variable }}\n\n{% for item in loop_items %}\n    this line item is {{ item }}\n{% endfor %}\n```\n\nJinja may have some limitations, but it is a powerful tool that you might like.\n\nPlease examine this simple example that installs apache2 and generates\nindex.html from the template\n\"playbooks/roles/simple_apache_role/templates/index.html\"\n\n```bash\n$ source environment.sh\n$ # Now we would run the above playbook with roles\n(venv) user@host:~/ansible-for-learnXinYminutes$ ansible-playbook playbooks/simple_role.yml --tags apache2\n```\n\n#### Jinja2 CLI\n\nYou can use the jinja in the CLI too\n\n```bash\nansible -m shell -a 'echo {{ my_variable }}' -e 'my_variable=something, playbook_parameter=twentytwo' localhost\n```\n\nIn fact - jinja is used to template parts of the playbooks too\n\n```yaml\n# check part of this playbook: playbooks/roles/sys_debug/tasks/debug_time.yml\n- local_action: shell date +'%F %T'\n  register: ts\n  become: False\n  changed_when: False\n\n- name: Timestamp\n  debug: msg=\"{{ ts.stdout }}\"\n  when: ts is defined and ts.stdout is defined\n  become: False\n```\n\n#### Jinja2 filters\n\nJinja is powerful. It has many built-in useful functions.\n\n```\n# get first item of the list\n{{ some_list | first() }}\n# if variable is undefined - use default value\n{{ some_variable | default('default_value') }}\n```\n\n[Read More](http://docs.ansible.com/ansible/latest/playbooks_filters.html)\n\n### ansible-vault\n\nTo maintain **infrastructure as code** you need to store secrets. Ansible\nprovides a way to encrypt confidential files so you can store them in the\nrepository, yet the files are decrypted on-the-fly during ansible execution.\n\nThe best way to use it is to store the secret in some secure location, and\nconfigure ansible to use them during runtime.\n\n```bash\n# Try (this would fail)\n$ ansible-playbook playbooks/vault_example.yml\n\n$ echo some_very_very_long_secret > ~/.ssh/secure_located_file\n\n# in ansible.cfg set the path to your secret file\n$ vi ansible.cfg\n  ansible_vault_password_file = ~/.ssh/secure_located_file\n\n#or use env\n$ export ANSIBLE_VAULT_PASSWORD_FILE=~/.ssh/secure_located_file\n\n$ ansible-playbook playbooks/vault_example.yml\n\n  # encrypt the file\n$ ansible-vault encrypt path/somefile\n\n  # view the file\n$ ansible-vault view path/somefile\n\n  # check the file content:\n$ cat path/somefile\n\n  # decrypt the file\n$ ansible-vault decrypt path/somefile\n```\n\n### dynamic inventory\n\nYou might like to know, that you can build your inventory dynamically.\n(For Ansible) inventory is just JSON with proper structure - if you can\ndeliver that to ansible - anything is possible.\n\nYou do not need to reinvent the wheel - there are plenty of ready to use\ninventory scripts for the most popular Cloud providers and a lot of in-house\npopular usecases.\n\n[AWS example](http://docs.ansible.com/ansible/latest/intro_dynamic_inventory.html#example-aws-ec2-external-inventory-script)\n\n```bash\n$ etc/inv/ec2.py --refresh\n$ ansible -m ping all -i etc/inv/ec2.py\n```\n\n[Read more](http://docs.ansible.com/ansible/latest/intro_dynamic_inventory.html)\n\n### ansible profiling - callback\n\nPlaybook execution takes some time. It is OK. First make it run, then you may\nlike to speed things up. Since ansible 2.x there is built-in callback for task\nexecution profiling.\n\n```\nvi ansible.cfg\n# set this to:\ncallback_whitelist = profile_tasks\n```\n\n### facts-cache and ansible-cmdb\n\nYou can pull some information about your environment from another host.\nIf the information does not change - you may consider using a facts_cache\nto speed things up.\n\n```\nvi ansible.cfg\n\n# if set to a persistent type (not 'memory', for example 'redis') fact values\n# from previous runs in Ansible will be stored.  This may be useful when\n# wanting to use, for example, IP information from one group of servers\n# without having to talk to them in the same playbook run to get their\n# current IP information.\nfact_caching = jsonfile\nfact_caching_connection = ~/facts_cache\nfact_caching_timeout = 86400\n```\n\nI like to use `jsonfile` as my backend. It allows to use another project\n`ansible-cmdb` [(project on GitHub)](https://github.com/fboender/ansible-cmdb) that generates a HTML page of your inventory\nresources. A nice 'free' addition!\n\n### Debugging ansible [chapter in progress]\n\nWhen your job fails - it is good to be effective with debugging.\n\n1. Increase verbosity by using multiple -v **[ -vvvvv]**\n2. If variable is undefined -\n`grep -R path_of_your_inventory -e missing_variable`\n3. If variable (dictionary or a list) is undefined -\n`grep -R path_of_your_inventory -e missing_variable`\n4. Jinja template debug\n5. Strange behaviour - try to run the code 'at the destination'\n\n### Infrastructure as code\n\nYou already know, that ansible-vault allows you to store your confidential data\nalong with your code. You can go further - and define your\nansible installation and configuration as code.\nSee `environment.sh` to learn how to install the ansible itself inside a\n`virtualenv` that is not attached to your operating system (can be changed by\nnon-privileged user), and as additional benefit - upgrading version of ansible\nis as easy as installing new version in new virtualenv. What is more, you can\nhave multiple versions of Ansible present at the same time.\n\n```bash\n# recreate ansible 2.x venv\n$ rm -rf venv2\n$ source environment2.sh\n\n# execute playbook\n(venv2)$ ansible-playbook playbooks/ansible1.9_playbook.yml # would fail - deprecated syntax\n\n# now lets install ansible 1.9.x next to ansible 2.x\n(venv2)$ deactivate\n$ source environment.1.9.sh\n\n# execute playbook\n(venv1.9)$ ansible-playbook playbooks/ansible1.9_playbook.yml # works!\n\n# please note that you have both venv1.9 and venv2 present - you need to (de)activate one - that is all\n```\n\n#### become-user, become\n\nIn Ansible - to become `sudo` - use the `become` parameter. Use `become_user`\nto specify the username.\n\n```\n- name: Ensure the httpd service is running\n  service:\n    name: httpd\n    state: started\n  become: true\n```\n\nNote: You may like to execute Ansible with `--ask-sudo-pass` or add the user to\nsudoers file in order to allow non-supervised execution if you require 'admin'\nprivileges.\n\n[Read more](http://docs.ansible.com/ansible/latest/become.html)\n\n## Tips and tricks\n\n#### --check -C\n\nAlways make sure that your playbook can execute in 'dry run' mode (--check),\nand its execution is not declaring 'Changed' objects.\n\n#### --diff -D\n\nDiff is useful to see nice detail of the files changed.\nIt compare 'in memory' the files like `diff -BbruN fileA fileB`.\n\n\n#### Execute hosts with 'regex'\n\n```bash\nansible -m ping web*\n```\n\n#### Host groups can be joined, negated, etc\n\n```bash\nansible -m ping web*:!backend:monitoring:&allow_change\n```\n\n#### Tagging\n\nYou should tag some (not all) objects - a task in a playbook, all tasks\nincluded form a role, etc. It allows you to execute the chosen parts of the\nplaybook.\n\n#### no_logs: True\n\nYou may see, that some roles print a lot of output in verbose mode. There is\nalso a debug module. This is the place where credentials may leak. Use `no_log`\nto hide the output.\n\n#### Debug module\n\nallows to print a value to the screen - use it!\n\n#### Register the output of a task\n\nYou can register the output (stdout), rc (return code), stderr of a task with\nthe `register` command.\n\n#### Conditionals: when:\n\n#### Loop: with, with\\_items, with\\_dict, with\\_together\n\n[Read more](http://docs.ansible.com/ansible/latest/playbooks_conditionals.html)\n\n## Additional Resources\n\n* [Servers For Hackers: An Ansible Tutorial](https://serversforhackers.com/c/an-ansible-tutorial)\n* [A system administrator's guide to getting started with Ansible - FAST!](https://www.redhat.com/en/blog/system-administrators-guide-getting-started-ansible-fast)\n* [Ansible Tower](https://www.ansible.com/products/tower) - Ansible Tower provides a web UI, dashboard and rest interface to ansible.\n* [Ansible AWX](https://github.com/ansible/awx) - The Open Source version of Ansible Tower.\n* [Ansible Tutorial for Beginners: Ultimate Playbook & Examples](https://spacelift.io/blog/ansible-tutorial)\n"
        },
        {
          "name": "apl.md",
          "type": "blob",
          "size": 1.9580078125,
          "content": "---\nname: APL\ncontributors:\n    - [\"nooodl\", \"https://github.com/nooodl\"]\nfilename: learnapl.apl\n---\n\n```apl\n⍝ Comments in APL are prefixed by ⍝.\n\n⍝ A list of numbers. (¯ is negative)\n2 3e7 ¯4 50.3\n\n⍝ An expression, showing some functions. In APL, there's\n⍝ no order of operations: everything is parsed right-to-\n⍝ left. This is equal to 5 + (4 × (2 ÷ (5 - 3))) = 9:\n5 + 4 × 2 ÷ 5 - 3        ⍝ 9\n\n⍝ These functions work on lists, too:\n1 2 3 4 × 5              ⍝ 5 10 15 20\n1 2 3 4 × 5 6 7 8        ⍝ 5 12 21 32\n\n⍝ All functions have single-argument and dual-argument\n⍝ meanings. For example, \"×\" applied to two arguments\n⍝ means multiply, but when applied to only a right-hand\n⍝ side, it returns the sign:\n\n× ¯4 ¯2 0 2 4            ⍝ ¯1 ¯1 0 1 1\n\n⍝ Values can be compared using these operators (1 means\n⍝ \"true\", 0 means \"false\"):\n\n10 20 30 = 10 20 99      ⍝ 1 1 0\n\n10 20 30 < 10 20 99      ⍝ 0 0 1\n\n⍝ \"⍳n\" returns a vector containing the first n naturals.\n⍝ Matrices can be constructed using ⍴ (reshape):\n4 3 ⍴ ⍳5                 ⍝ 0 1 2\n                         ⍝ 3 4 0\n                         ⍝ 1 2 3\n                         ⍝ 4 0 1\n\n⍝ Single-argument ⍴ gives you the dimensions back:\n⍴ 4 3 ⍴ ⍳5               ⍝ 4 3\n\n⍝ Values can be stored using ←. Let's calculate the mean\n⍝ value of a vector of numbers:\nA ← 10 60 55 23\n\n⍝ Sum of elements of A (/ is reduce):\n+/A                      ⍝ 148\n\n⍝ Length of A:\n⍴A                       ⍝ 4\n\n⍝ Mean:\n(+/A) ÷ (⍴A)             ⍝ 37\n\n⍝ We can define this as a function using {} and ⍵:\nmean ← {(+/⍵)÷⍴⍵}\nmean A                   ⍝ 37\n```\n\n## Further Reading\n\n- [APL Wiki](https://aplwiki.com/)\n- An older version of APL book by the creator: [Kenneth Iverson - A Programming Language](https://www.softwarepreservation.org/projects/apl/Books/APROGRAMMING%20LANGUAGE/view)\n- Additional Books: [APL Books](https://aplwiki.com/wiki/Books)\n"
        },
        {
          "name": "ar",
          "type": "tree",
          "content": null
        },
        {
          "name": "arturo.md",
          "type": "blob",
          "size": 10.2900390625,
          "content": "---\nname: Arturo\nfilename: learnarturo.art\ncontributors:\n  - [\"Dr.Kameleon\", \"https://github.com/drkameleon\"]\n---\n\n```red\n; this is a comment\n; this is another comment\n\n;---------------------------------\n; VARIABLES & VALUES\n;---------------------------------\n\n; numbers\na1: 2\na2: 3.14\na3: to :complex [1 2.0]     ; 1.0+2.0i\n\n; strings\nc1: \"this is a string\"\nc2: {\n    this is a multiline string\n    that is indentation-agnostic\n}\nc3: {:\n    this is \n        a verbatim\n            multiline string\n                which will remain exactly\n                    as the original\n:}\n\n; characters\nch: `c`\n\n; blocks/arrays\nd: [1 2 3]\n\n; dictionaries\ne: #[\n    name: \"John\"\n    surname: \"Doe\"\n    age: 34\n    likes: [pizza spaghetti]\n]\n\n; yes, functions are values too\nf: function [x][\n    2 * x\n]\n\n; dates\ng: now              ; 2021-05-03T17:10:48+02:00\n\n; booleans\nh1: true\nh2: false\n\n;---------------------------------\n; BASIC OPERATORS\n;---------------------------------\n\n; simple arithmetic\n1 + 1       ; => 2\n8 - 1       ; => 7\n4.2 - 1.1   ; => 3.1\n10 * 2      ; => 20\n35 / 4      ; => 8\n35 // 4     ; => 8.75\n2 ^ 5       ; => 32\n5 % 3       ; => 2\n\n; bitwise operators\nand 3 5     ; => 1\nor 3 5      ; => 7\nxor 3 5     ; => 6\n\n; pre-defined constants\npi          ; => 3.141592653589793\nepsilon     ; => 2.718281828459045\nnull        ; => null\ntrue        ; => true\nfalse       ; => false\n\n;---------------------------------\n; COMPARISON OPERATORS\n;---------------------------------\n\n; equality\n1 = 1       ; => true\n2 = 1       ; => false\n\n; inequality\n1 <> 1      ; => false\n2 <> 1      ; => true\n\n; more comparisons\n1 < 10      ; => true\n1 =< 10     ; => true\n10 =< 10    ; => true\n1 > 10      ; => false\n1 >= 10     ; => false\n11 >= 10    ; => true\n\n;---------------------------------\n; CONDITIONALS\n;---------------------------------\n\n; logical operators\nand? true true      ; => true\nand? true false     ; => false\nor? true false      ; => true\nor? false false     ; => false\n\nand? [1=2][2<3]     ; => false \n                    ; (the second block will not be evaluated)\n\n; simple if statements\nif 2 > 1 [ print \"yes!\"]    ; yes!\nif 3 <> 2 -> print \"true!\"  ; true!\n\n; if/else statements\nif? 2 > 3 -> print \"2 is greater than 3\"\nelse -> print \"2 is not greater than 3\"         ; 2 is not greater than 3\n\n; switch statements\nswitch 2 > 3 -> print \"2 is greater than 3\"\n             -> print \"2 is not greater than 3\" ; 2 is not greater than 3\n\na: (2 > 3)[\"yes\"][\"no\"]         ; a: \"no\"\na: (2 > 3)? -> \"yes\" -> \"no\"    ; a: \"no\" (exactly the same as above)\n\n; case/when statements\ncase [1]\n    when? [>2] -> print \"1 is greater than 2. what?!\"\n    when? [<0] -> print \"1 is less than 0. nope...\"\n    else -> print \"here we are!\"                ; here we are!\n\n;---------------------------------\n; LOOPS\n;---------------------------------\n\n; with `loop`\narr: [1 4 5 3]\nloop arr 'x [\n    print [\"x =\" x]\n]\n; x = 1\n; x = 4\n; x = 5\n; x = 3\n\n; with loop and custom index\nloop.with:'i arr 'x [\n    print [\"item at position\" i \"=>\" x]\n]\n; item at position 0 => 1\n; item at position 1 => 4\n; item at position 2 => 5\n; item at position 3 => 3\n\n; using ranges\nloop 1..3 'x ->         ; since it's a single statement\n    print x             ; there's no need for [block] notation\n                        ; we can wrap it up using the `->` syntactic sugar\n\nloop `a`..`c` 'ch ->\n    print ch\n; a\n; b\n; c\n\n; picking multiple items\nloop 1..10 [x y] ->\n    print [\"x =\" x \", y =\" y]\n; x = 1 , y = 2 \n; x = 3 , y = 4 \n; x = 5 , y = 6 \n; x = 7 , y = 8 \n; x = 9 , y = 10 \n\n; looping through a dictionary\ndict: #[name: \"John\", surname: \"Doe\", age: 34]\nloop dict [key value][\n    print [key \"->\" value]\n]\n; name -> John \n; surname -> Doe \n; age -> 34 \n                    \n; while loops\ni: new 0\nwhile [i<3][\n    print [\"i =\" i]\n    inc 'i\n]\n; i = 0\n; i = 1\n; i = 2\n \n;---------------------------------\n; STRINGS\n;---------------------------------\n\n; case\na: \"tHis Is a stRinG\"\nprint upper a               ; THIS IS A STRING\nprint lower a               ; this is a string\nprint capitalize a          ; tHis Is a stRinG\n\n; concatenation\na: \"Hello \" ++ \"World!\"     ; a: \"Hello World!\"\n\n; strings as an array\nsplit \"hello\"               ; => [h e l l o]\nsplit.words \"hello world\"   ; => [hello world]\n\nprint first \"hello\"         ; h\nprint last \"hello\"          ; o\n\n; conversion\nto :string 123              ; => \"123\"\nto :integer \"123\"           ; => 123\n\n; joining strings together\njoin [\"hello\" \"world\"]              ; => \"helloworld\"\njoin.with:\"-\" [\"hello\" \"world\"]     ; => \"hello-world\"\n\n; string interpolation\nx: 2\nprint ~\"x = |x|\"            ; x = 2\n\n; interpolation with `print`\nprint [\"x =\" x]             ; x = 2\n                            ; (`print` works by calculating the given block\n                            ;  and joining the different values as strings\n                            ;  with a single space between them)\n\n; templates\nprint render.template {\n    <||= switch x=2 [ ||>\n        Yes, x = 2\n    <||][||>\n        No, x is not 2\n    <||]||> \n} ; Yes, x = 2\n\n; matching\nprefix? \"hello\" \"he\"        ; => true\nsuffix? \"hello\" \"he\"        ; => false\n\ncontains? \"hello\" \"ll\"      ; => true\ncontains? \"hello\" \"he\"      ; => true\ncontains? \"hello\" \"x\"       ; => false\n\nin? \"ll\" \"hello\"            ; => true \nin? \"x\" \"hello\"             ; => false\n\n;---------------------------------\n; BLOCKS\n;---------------------------------\n\n; calculate a block\narr: [1 1+1 1+1+1]\n@arr                        ; => [1 2 3]\n\n; execute a block\nsth: [print \"Hello world\"]  ; this is perfectly valid,\n                            ; could contain *anything*\n                            ; and will not be executed...\n\ndo sth                      ; Hello world\n                            ; (...until we tell it to)\n\n; array indexing\narr: [\"zero\" \"one\" \"two\" \"three\"]\nprint first arr             ; zero\nprint arr\\0                 ; zero\nprint last arr              ; three\nprint arr\\3                 ; three\n\nx: 2\nprint get arr x             ; two\nprint arr \\ 2               ; two\n                            ; (using the `\\` infix alias for get -\n                            ;  notice space between the operands! \n                            ;  otherwise, it'll be parsed as a path)\n\n; setting an array element\narr\\0: \"nada\"\nset arr 2 \"dos\"\nprint arr                   ; nada one dos three\n\n; adding elements to an array\narr: new []\n'arr ++ \"one\"\n'arr ++ \"two\"\nprint arr                   ; one two\n\n; remove elements from an array\narr: new [\"one\" \"two\" \"three\" \"four\"]\n'arr -- \"two\"               ; arr: [\"one\" \"three\" \"four\"]\nremove 'arr .index 0        ; arr: [\"three\" \"four\"]\n\n; getting the size of an array\narr: [\"one\" 2 \"three\" 4]\nprint size arr              ; 4\n\n; getting a slice of an array\nprint slice [\"one\" \"two\" \"three\" \"four\"] 0 1        ; one two\n\n; check if array contains a specific element\nprint contains? arr \"one\"   ; true\nprint contains? arr \"five\"  ; false\n\n; sorting array\narr: [1 5 3 2 4]\nsort arr                    ; => [1 2 3 4 5]\nsort.descending arr         ; => [5 4 3 2 1]\n\n; mapping values\nmap 1..10 [x][2*x]          ; => [2 4 6 8 10 12 14 16 18 20]\nmap 1..10 'x -> 2*x         ; same as above\nmap 1..10 => [2*&]          ; same as above\nmap 1..10 => [2*]           ; same as above\n\n; selecting/filtering array values\nselect 1..10 [x][odd? x]    ; => [1 3 5 7 9]\nselect 1..10 => odd?        ; same as above\n\nfilter 1..10 => odd?        ; => [2 4 6 8 10]\n                            ; (now, we leave out all odd numbers - \n                            ;  while select keeps them)\n\n; misc operations\narr: [\"one\" 2 \"three\" 4]\nreverse arr                 ; => [4 \"three\" 2 \"one\"]\nshuffle arr                 ; => [2 4 \"three\" \"one\"]\nunique [1 2 3 2 3 1]        ; => [1 2 3]\npermutate [1 2 3]           ; => [[1 2 3] [1 3 2] [3 1 2] [2 1 3] [2 3 1] [3 2 1]]\ntake 1..10 3                ; => [1 2 3]\nrepeat [1 2] 3              ; => [1 2 1 2 1 2]\n\n;---------------------------------\n; FUNCTIONS\n;---------------------------------\n\n; declaring a function\nf: function [x][ 2*x ]\nf: function [x]-> 2*x       ; same as above\nf: $[x]->2*x                ; same as above (only using the `$` alias \n                            ;  for the `function`... function)\n\n; calling a function\nf 10                        ; => 20\n\n; returning a value\ng: function [x][\n    if x < 2 -> return 0\n\n    res: 0\n    loop 0..x 'z [\n        res: res + z\n    ]\n    return res\n]\n\n;---------------------------------\n; CUSTOM TYPES\n;---------------------------------\n\n; defining a custom type\ndefine :person [                            ; define a new custom type \"Person\"\n    name                                    ; with fields: name, surname, age\n    surname\n    age \n][ \n    ; with custom post-construction initializer\n    init: [\n        this\\name: capitalize this\\name\n    ]\n\n    ; custom print function\n    print: [\n        render \"NAME: |this\\name|, SURNAME: |this\\surname|, AGE: |this\\age|\"\n    ]\n\n    ; custom comparison operator\n    compare: 'age\n]\n\n; create a method for our custom type\nsayHello: function [this][\n    ensure -> is? :person this\n\n    print [\"Hello\" this\\name]\n]\n\n; create new objects of our custom type\na: to :person [\"John\" \"Doe\" 34]                 ; let's create 2 \"Person\"s\nb: to :person [\"jane\" \"Doe\" 33]                 ; and another one\n\n; call pseudo-inner method\nsayHello a                                      ; Hello John                       \nsayHello b                                      ; Hello Jane\n\n; access object fields\nprint [\"The first person's name is:\" a\\name]    ; The first person's name is: John\nprint [\"The second person's name is:\" b\\name]   ; The second person's name is: Jane\n\n; changing object fields\na\\name: \"Bob\"                                   \nsayHello a                                      ; Hello Bob\n\n; verifying object type\nprint type a                                    ; :person\nprint is? :person a                             ; true\n\n; printing objects\nprint a                                         ; NAME: John, SURNAME: Doe, AGE: 34\n\n; sorting user objects (using custom comparator)\nsort @[a b]                                     ; Jane..., John...\nsort.descending @[a b]                          ; John..., Jane...       \n```\n\n## Additional resources\n\n- [Official documentation](https://arturo-lang.io/documentation/) - Arturo official documentation & reference.\n- [Online playground](https://arturo-lang.io/playground/) - Online REPL for the Arturo programming language.\n"
        },
        {
          "name": "asciidoc.md",
          "type": "blob",
          "size": 2.779296875,
          "content": "---\nname: AsciiDoc\ncontributors:\n    - [\"Ryan Mavilia\", \"http://unoriginality.rocks/\"]\n    - [\"Abel Salgado Romero\", \"https://twitter.com/abelsromero\"]\nfilename: asciidoc.adoc\n---\n\nAsciiDoc is a markup language similar to Markdown and it can be used for anything from books to blogs. Created in 2002 by Stuart Rackham the language is simple but it allows for a great amount of customization.\n\nDocument Header\n\nHeaders are optional and can't contain blank lines. It must be offset from content by at least one blank line.\n\nTitle Only\n\n```\n= Document Title\n\nFirst sentence of document.\n```\n\nTitle and Author\n\n```\n= Document Title\nFirst Last <first.last@learnxinyminutes.com>\n\nStart of this document.\n```\n\nMultiple Authors\n\n```\n= Document Title\nJohn Doe <john@go.com>; Jane Doe<jane@yo.com>; Black Beard <beardy@pirate.com>\n\nStart of a doc with multiple authors.\n```\n\nRevision Line (requires an author line)\n\n```\n= Doc Title V1\nPotato Man <chip@crunchy.com>\nv1.0, 2016-01-13\n\nThis article about chips is going to be fun.\n```\n\nParagraphs\n\n```\nYou don't need anything special for paragraphs.\n\nAdd a blank line between paragraphs to separate them.\n\nTo create a line blank add a +\nand you will receive a line break!\n```\n\nFormatting Text\n\n```\n_underscore creates italics_\n*asterisks for bold*\n*_combine for extra fun_*\n`use ticks to signify monospace`\n`*bolded monospace*`\n```\n\nSection Titles\n\n```\n= Level 0 (may only be used in document's header)\n\n== Level 1 <h2>\n\n=== Level 2 <h3>\n\n==== Level 3 <h4>\n\n===== Level 4 <h5>\n```\n\nLists\n\nTo create a bulleted list use asterisks.\n\n```\n* foo\n* bar\n* baz\n```\n\nTo create a numbered list use periods.\n\n```\n. item 1\n. item 2\n. item 3\n```\n\nYou can nest lists by adding extra asterisks or periods up to five times.\n\n```\n* foo 1\n** foo 2\n*** foo 3\n**** foo 4\n***** foo 5\n\n. foo 1\n.. foo 2\n... foo 3\n.... foo 4\n..... foo 5\n```\n\n## Further Reading\n\nThere are two tools to process AsciiDoc documents:\n\n1. [AsciiDoc](http://asciidoc.org/): original Python implementation available in the main Linux distributions. Stable and currently in maintenance mode.\n2. [Asciidoctor](http://asciidoctor.org/): alternative Ruby implementation, usable also from Java and JavaScript. Under active development, it aims to extend the AsciiDoc syntax with new features and output formats.\n\nFollowing links are related to `Asciidoctor` implementation:\n\n* [Markdown - AsciiDoc syntax comparison](http://asciidoctor.org/docs/user-manual/#comparison-by-example): side-by-side comparison of common Markdown and AsciiDoc elements.\n* [Getting started](http://asciidoctor.org/docs/#get-started-with-asciidoctor): installation and quick start guides to render simple documents.\n* [Asciidoctor User Manual](http://asciidoctor.org/docs/user-manual/): complete single-document manual with syntax reference, examples, rendering tools, amongst others.\n"
        },
        {
          "name": "assemblyscript.md",
          "type": "blob",
          "size": 7.041015625,
          "content": "---\nname: AssemblyScript\ncontributors:\n    - [\"Philippe Vlérick\", \"https://github.com/pvlerick\"]\n    - [\"Steve Huguenin-Elie\", \"https://github.com/StEvUgnIn\"]\n    - [\"Sebastian Speitel\", \"https://github.com/SebastianSpeitel\"]\n    - [\"Max Graey\", \"https://github.com/MaxGraey\"]\nfilename: learnassemblyscript.ts\n---\n\n__AssemblyScript__ compiles a variant of __TypeScript__ (basically JavaScript with types) to __WebAssembly__ using __Binaryen__. It generates lean and mean WebAssembly modules while being just an `npm install` away.\n\nThis article will focus only on AssemblyScript extra syntax, as opposed to [TypeScript](../typescript/) and [JavaScript](../javascript/).\n\nTo test AssemblyScript's compiler, head to the\n[Playground](https://www.assemblyscript.org/editor.html#IyFydW50aW1lPXN0dWIKLyoqIENhbGN1bGF0ZXMgdGhlIG4tdGggRmlib25hY2NpIG51bWJlci4gKi8KZXhwb3J0IGZ1bmN0aW9uIGZpYihuOiBpMzIpOiBpMzIgewogIHZhciBhID0gMCwgYiA9IDEKICBpZiAobiA+IDApIHsKICAgIHdoaWxlICgtLW4pIHsKICAgICAgbGV0IHQgPSBhICsgYgogICAgICBhID0gYgogICAgICBiID0gdAogICAgfQogICAgcmV0dXJuIGIKICB9CiAgcmV0dXJuIGEKfQoKIyFodG1sCjx0ZXh0YXJlYSBpZD0ib3V0cHV0IiBzdHlsZT0iaGVpZ2h0OiAxMDAlOyB3aWR0aDogMTAwJSIgcmVhZG9ubHk+PC90ZXh0YXJlYT4KPHNjcmlwdD4KbG9hZGVyLmluc3RhbnRpYXRlKG1vZHVsZV93YXNtLCB7IC8qIGltcG9ydHMgKi8gfSkKICAudGhlbigoeyBleHBvcnRzIH0pID0+IHsKICAgIGNvbnN0IG91dHB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdXRwdXQnKQogICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gMTA7ICsraSkgewogICAgICBvdXRwdXQudmFsdWUgKz0gYGZpYigke2l9KSA9ICR7ZXhwb3J0cy5maWIoaSl9XG5gCiAgICB9CiAgfSkKPC9zY3JpcHQ+Cg==) where you will be able\nto type code, have auto completion and directly see the emitted WebAssembly.\n\n```ts\n// There are many basic types in AssemblyScript,\nlet isDone: boolean = false;\nlet name: string = \"Anders\";\n\n// but integer type come as signed (sized from 8 to 64 bits)\nlet lines8: i8 = 42;\nlet lines16: i16 = 42;\nlet lines32: i32 = 42;\nlet lines64: i64 = 42;\n\n// and unsigned (sized from 8 to 64 bits),\nlet ulines8: u8 = 42;\nlet ulines16: u16 = 42;\nlet ulines32: u32 = 42;\nlet ulines64: u64 = 42;\n\n// and float has two sizes possible (32/64).\nlet rate32: f32 = 1.0\nlet rate64: f64 = 1.0\n\n// But you can omit the type annotation if the variables are derived\n// from explicit literals\nlet _isDone = false;\nlet _lines = 42;\nlet _name = \"Anders\";\n\n// Use const keyword for constants\nconst numLivesForCat = 9;\nnumLivesForCat = 1; // Error\n\n// For collections, there are typed arrays and generic arrays\nlet list1: i8[] = [1, 2, 3];\n// Alternatively, using the generic array type\nlet list2: Array<i8> = [1, 2, 3];\n\n// For enumerations:\nenum Color { Red, Green, Blue };\nlet c: Color = Color.Green;\n\n// Functions imported from JavaScript need to be declared as external\n// @ts-ignore decorator\n@external(\"alert\")\ndeclare function alert(message: string): void;\n\n// and you can also import JS functions in a namespace\ndeclare namespace window {\n  // @ts-ignore decorator\n  @external(\"window\", \"alert\")\n  function alert(message: string): void;\n}\n\n// Lastly, \"void\" is used in the special case of a function returning nothing\nexport function bigHorribleAlert(): void {\n  alert(\"I'm a little annoying box!\"); // calling JS function here\n}\n\n// Functions are first class citizens, support the lambda \"fat arrow\" syntax\n\n// The following are equivalent, the compiler does not offer any type\n// inference for functions yet, and same WebAssembly will be emitted.\nexport function f1 (i: i32): i32 { return i * i; }\n// \"Fat arrow\" syntax\nlet f2 = (i: i32): i32 => { return i * i; }\n// \"Fat arrow\" syntax, braceless means no return keyword needed\nlet f3 = (i: i32): i32 => i * i;\n\n// Classes - members are public by default\nexport class Point {\n  // Properties\n  x: f64;\n\n  // Constructor - the public/private keywords in this context will generate\n  // the boiler plate code for the property and the initialization in the\n  // constructor.\n  // In this example, \"y\" will be defined just like \"x\" is, but with less code\n  // Default values are also supported\n\n  constructor(x: f64, public y: f64 = 0) {\n    this.x = x;\n  }\n\n  // Functions\n  dist(): f64 { return Math.sqrt(this.x * this.x + this.y * this.y); }\n\n  // Static members\n  static origin: Point = new Point(0, 0);\n}\n\n// Classes can be explicitly marked as extending a parent class.\n// Any missing properties will then cause an error at compile-time.\nexport class PointPerson extends Point {\n  constructor(x: f64, y: f64, public name: string) {\n    super(x, y);\n  }\n  move(): void {}\n}\n\nlet p1 = new Point(10, 20);\nlet p2 = new Point(25); //y will be 0\n\n// Inheritance\nexport class Point3D extends Point {\n  constructor(x: f64, y: f64, public z: f64 = 0) {\n    super(x, y); // Explicit call to the super class constructor is mandatory\n  }\n\n  // Overwrite\n  dist(): f64 {\n    let d = super.dist();\n    return Math.sqrt(d * d + this.z * this.z);\n  }\n}\n\n// Namespaces, \".\" can be used as separator for sub namespaces\nexport namespace Geometry {\n  class Square {\n    constructor(public sideLength: f64 = 0) {\n    }\n    area(): f64 {\n      return Math.pow(this.sideLength, 2);\n    }\n  }\n}\n\nlet s1 = new Geometry.Square(5);\n\n// Generics\n// AssemblyScript compiles generics to one concrete method or function per set\n// of unique contextual type arguments, also known as [monomorphisation].\n// Implications are that a module only includes and exports concrete functions\n// for sets of type arguments actually used and that concrete functions can be\n// shortcutted with [static type checks] at compile time, which turned out to\n// be quite useful.\n// Classes\nexport class Tuple<T1, T2> {\n  constructor(public item1: T1, public item2: T2) {\n  }\n}\n\nexport class Pair<T> {\n  item1: T;\n  item2: T;\n}\n\n// And functions\nexport function pairToTuple <T>(p: Pair<T>): Tuple<T, T> {\n  return new Tuple(p.item1, p.item2);\n};\n\nlet tuple = pairToTuple<string>({ item1: \"hello\", item2: \"world\" });\n\n// Including references to a TypeScript-only definition file:\n/// <reference path=\"jquery.d.ts\" />\n\n// Template Strings (strings that use backticks)\n// String Interpolation with Template Strings\nlet name = 'Tyrone';\nlet greeting = `Hi ${name}, how are you?`\n// Multiline Strings with Template Strings\nlet multiline = `This is an example\nof a multiline string`;\n\nlet numbers: Array<i8> = [0, 1, 2, 3, 4];\nlet moreNumbers: Array<i8> = numbers;\nmoreNumbers[5] = 5; // Error, elements are read-only\nmoreNumbers.push(5); // Error, no push method (because it mutates array)\nmoreNumbers.length = 3; // Error, length is read-only\nnumbers = moreNumbers; // Error, mutating methods are missing\n\n// Type inference in Arrays\nlet ints = [0, 1, 2, 3, 4]  // will infer as Array<i32>\nlet floats: f32[] = [0, 1, 2, 3, 4]  // will infer as Array<f32>\nlet doubles = [0.0, 1.0, 2, 3, 4]  // will infer as Array<f64>\nlet bytes1 = [0 as u8, 1, 2, 3, 4]  // will infer as Array<u8>\nlet bytes2 = [0, 1, 2, 3, 4]  as u8[] // will infer as Array<u8>\nlet bytes3: u8[] = [0, 1, 2, 3, 4] // will infer as Array<u8>\n```\n\n## Further Reading\n\n * [AssemblyScript Official website](https://www.assemblyscript.org/)\n * [AssemblyScript source documentation](https://github.com/AssemblyScript/website/tree/main/src)\n * [Source Code on GitHub](https://github.com/AssemblyScript/assemblyscript)\n"
        },
        {
          "name": "asymptotic-notation.md",
          "type": "blob",
          "size": 8.271484375,
          "content": "---\ncategory: Algorithms & Data Structures\nname: Asymptotic Notation\ncontributors:\n    - [\"Jake Prather\", \"http://github.com/JakeHP\"]\n    - [\"Divay Prakash\", \"http://github.com/divayprakash\"]\n---\n\n# Asymptotic Notations\n\n## What are they?\n\nAsymptotic Notations are languages that allow us to analyze an algorithm's \nrunning time by identifying its behavior as the input size for the algorithm \nincreases. This is also known as an algorithm's growth rate. Does the \nalgorithm suddenly become incredibly slow when the input size grows? Does it \nmostly maintain its quick run time as the input size increases? Asymptotic \nNotation gives us the ability to answer these questions.\n\n## Are there alternatives to answering these questions?\n\nOne way would be to count the number of primitive operations at different \ninput sizes. Though this is a valid solution, the amount of work this takes \nfor even simple algorithms does not justify its use.\n\nAnother way is to physically measure the amount of time an algorithm takes to \ncomplete given different input sizes. However, the accuracy and relativity \n(times obtained would only be relative to the machine they were computed on) \nof this method is bound to environmental variables such as computer hardware \nspecifications, processing power, etc.\n\n## Types of Asymptotic Notation\n\nIn the first section of this doc, we described how an Asymptotic Notation \nidentifies the behavior of an algorithm as the input size changes. Let us \nimagine an algorithm as a function f, n as the input size, and f(n) being \nthe running time. So for a given algorithm f, with input size n you get \nsome resultant run time f(n). This results in a graph where the Y-axis is \nthe runtime, the X-axis is the input size, and plot points are the resultants \nof the amount of time for a given input size.\n\nYou can label a function, or algorithm, with an Asymptotic Notation in many \ndifferent ways. Some examples are, you can describe an algorithm by its best \ncase, worst case, or average case. The most common is to analyze an algorithm \nby its worst case. You typically don’t evaluate by best case because those \nconditions aren’t what you’re planning for. An excellent example of this is \nsorting algorithms; particularly, adding elements to a tree structure. The \nbest case for most algorithms could be as low as a single operation. However, \nin most cases, the element you’re adding needs to be sorted appropriately \nthrough the tree, which could mean examining an entire branch. This is \nthe worst case, and this is what we plan for.\n\n### Types of functions, limits, and simplification\n\n```\nLogarithmic Function - log n\nLinear Function - an + b\nQuadratic Function - an^2 + bn + c\nPolynomial Function - an^z + . . . + an^2 + a*n^1 + a*n^0, where z is some \nconstant\nExponential Function - a^n, where a is some constant\n```\n\nThese are some fundamental function growth classifications used in \nvarious notations. The list starts at the slowest growing function \n(logarithmic, fastest execution time) and goes on to the fastest \ngrowing (exponential, slowest execution time). Notice that as ‘n’ \nor the input, increases in each of those functions, the result \nincreases much quicker in quadratic, polynomial, and exponential, \ncompared to logarithmic and linear.\n\nIt is worth noting that for the notations about to be discussed, \nyou should do your best to use the simplest terms. This means to \ndisregard constants, and lower order terms, because as the input \nsize (or n in our f(n) example) increases to infinity (mathematical \nlimits), the lower order terms and constants are of little to no \nimportance. That being said, if you have constants that are 2^9001, \nor some other ridiculous, unimaginable amount, realize that \nsimplifying skew your notation accuracy.\n\nSince we want simplest form, lets modify our table a bit...\n\n```\nLogarithmic - log n\nLinear - n\nQuadratic - n^2\nPolynomial - n^z, where z is some constant\nExponential - a^n, where a is some constant\n```\n\n### Big-O\nBig-O, commonly written as **O**, is an Asymptotic Notation for the worst \ncase, or ceiling of growth for a given function. It provides us with an \n_**asymptotic upper bound**_ for the growth rate of the runtime of an algorithm.\nSay `f(n)` is your algorithm runtime, and `g(n)` is an arbitrary time \ncomplexity you are trying to relate to your algorithm. `f(n)` is O(g(n)), if \nfor some real constants c (c > 0) and n<sub>0</sub>, `f(n)` <= `c g(n)` for every input size \nn (n > n<sub>0</sub>).\n\n*Example 1*\n\n```\nf(n) = 3log n + 100\ng(n) = log n\n```\n\nIs `f(n)` O(g(n))?\nIs `3 log n + 100` O(log n)?\nLet's look to the definition of Big-O.\n\n```\n3log n + 100 <= c * log n\n```\n\nIs there some pair of constants c, n<sub>0</sub> that satisfies this for all n > n<sub>0</sub>?\n\n```\n3log n + 100 <= 150 * log n, n > 2 (undefined at n = 1)\n```\n\nYes! The definition of Big-O has been met therefore `f(n)` is O(g(n)).\n\n*Example 2*\n\n```\nf(n) = 3*n^2\ng(n) = n\n```\n\nIs `f(n)` O(g(n))?\nIs `3 * n^2` O(n)?\nLet's look at the definition of Big-O.\n\n```\n3 * n^2 <= c * n\n```\n\nIs there some pair of constants c, n<sub>0</sub> that satisfies this for all n > n<sub>0</sub>?\nNo, there isn't. `f(n)` is NOT O(g(n)).\n\n### Big-Omega\nBig-Omega, commonly written as **Ω**, is an Asymptotic Notation for the best \ncase, or a floor growth rate for a given function. It provides us with an \n_**asymptotic lower bound**_ for the growth rate of the runtime of an algorithm.\n\n`f(n)` is Ω(g(n)), if for some real constants c (c > 0) and n<sub>0</sub> (n<sub>0</sub> > 0), `f(n)` is >= `c g(n)` \nfor every input size n (n > n<sub>0</sub>).\n\n### Note\n\nThe asymptotic growth rates provided by big-O and big-omega notation may or \nmay not be asymptotically tight. Thus we use small-o and small-omega notation \nto denote bounds that are not asymptotically tight. \n\n### Small-o\nSmall-o, commonly written as **o**, is an Asymptotic Notation to denote the \nupper bound (that is not asymptotically tight) on the growth rate of runtime \nof an algorithm.\n\n`f(n)` is o(g(n)), if for all real constants c (c > 0) and n<sub>0</sub> (n<sub>0</sub> > 0), `f(n)` is < `c g(n)` \nfor every input size n (n > n<sub>0</sub>).\n\nThe definitions of O-notation and o-notation are similar. The main difference \nis that in f(n) = O(g(n)), the bound f(n) <= g(n) holds for _**some**_ \nconstant c > 0, but in f(n) = o(g(n)), the bound f(n) < c g(n) holds for \n_**all**_ constants c > 0.\n\n### Small-omega\nSmall-omega, commonly written as **ω**, is an Asymptotic Notation to denote \nthe lower bound (that is not asymptotically tight) on the growth rate of \nruntime of an algorithm.\n\n`f(n)` is ω(g(n)), if for all real constants c (c > 0) and n<sub>0</sub> (n<sub>0</sub> > 0), `f(n)` is > `c g(n)` \nfor every input size n (n > n<sub>0</sub>).\n\nThe definitions of Ω-notation and ω-notation are similar. The main difference \nis that in f(n) = Ω(g(n)), the bound f(n) >= g(n) holds for _**some**_ \nconstant c > 0, but in f(n) = ω(g(n)), the bound f(n) > c g(n) holds for \n_**all**_ constants c > 0.\n\n### Theta\nTheta, commonly written as **Θ**, is an Asymptotic Notation to denote the \n_**asymptotically tight bound**_ on the growth rate of runtime of an algorithm. \n\n`f(n)` is Θ(g(n)), if for some real constants c1, c2 and n<sub>0</sub> (c1 > 0, c2 > 0, n<sub>0</sub> > 0), \n`c1 g(n)` is < `f(n)` is < `c2 g(n)` for every input size n (n > n<sub>0</sub>).\n\n∴ `f(n)` is Θ(g(n)) implies `f(n)` is O(g(n)) as well as `f(n)` is Ω(g(n)).\n\nFeel free to head over to additional resources for examples on this. Big-O \nis the primary notation use for general algorithm time complexity.\n\n### Endnotes\nIt's hard to keep this kind of topic short, and you should go \nthrough the books and online resources listed. They go into much greater depth \nwith definitions and examples. More where x='Algorithms & Data Structures' is \non its way; we'll have a doc up on analyzing actual code examples soon.\n\n## Books\n\n* [Algorithms](http://www.amazon.com/Algorithms-4th-Robert-Sedgewick/dp/032157351X)\n* [Algorithm Design](http://www.amazon.com/Algorithm-Design-Foundations-Analysis-Internet/dp/0471383651)\n\n## Online Resources\n\n* [MIT](http://web.mit.edu/16.070/www/lecture/big_o.pdf)\n* [KhanAcademy](https://www.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation)\n* [Big-O Cheatsheet](http://bigocheatsheet.com/) - common structures, operations, and algorithms, ranked by complexity.\n"
        },
        {
          "name": "ats.md",
          "type": "blob",
          "size": 19.3076171875,
          "content": "---\nname: ATS\ncontributors:\n  - [\"Mark Barbone\", \"https://github.com/mb64\"]\nfilename: learnats.dats\n---\n\nATS is a low-level functional programming language.  It has a powerful type\nsystem which lets you write programs with the same level of control and\nefficiency as C, but in a memory safe and type safe way.\n\nThe ATS type system supports:\n\n* Full type erasure: ATS compiles to efficient C\n* Dependent types, including [LF](http://twelf.org/wiki/LF) and proving\n  metatheorems\n* Refinement types\n* Linearity for resource tracking\n* An effect system that tracks exceptions, mutation, termination, and other\n  side effects\n\nThis tutorial is not an introduction to functional programming, dependent types,\nor linear types, but rather to how they all fit together in ATS.  That said, ATS\nis a very complex language, and this tutorial doesn't cover it all.  Not only\ndoes ATS's type system boast a wide array of confusing features, its\nidiosyncratic syntax can make even \"simple\" examples hard to understand.  In the\ninterest of keeping it a reasonable length, this document is meant to give a\ntaste of ATS, giving a high-level overview of what's possible and how, rather\nthan attempting to fully explain how everything works.\n\nYou can [try ATS in your browser](http://www.ats-lang.org/SERVER/MYCODE/Patsoptaas_serve.php),\nor install it from [http://www.ats-lang.org/](http://www.ats-lang.org/).\n\n\n```ocaml\n// Include the standard library\n#include \"share/atspre_define.hats\"\n#include \"share/atspre_staload.hats\"\n\n// To compile, either use\n//   $ patscc -DATS_MEMALLOC_LIBC program.dats -o program\n// or install the ats-acc wrapper https://github.com/sparverius/ats-acc and use\n//   $ acc pc program.dats\n\n// C-style line comments\n/* and C-style block comments */\n(* as well as ML-style block comments *)\n\n/*************** Part 1: the ML fragment ****************/\n\nval () = print \"Hello, World!\\n\"\n\n// No currying\nfn add (x: int, y: int) = x + y\n\n// fn vs fun is like the difference between let and let rec in OCaml/F#\nfun fact (n: int): int = if n = 0 then 1 else n * fact (n-1)\n\n// Multi-argument functions need parentheses when you call them; single-argument\n// functions can omit parentheses\nval forty_three = add (fact 4, 19)\n\n// let is like let in SML\nfn sum_and_prod (x: int, y: int): (int, int) =\n  let\n    val sum = x + y\n    val prod = x * y\n  in (sum, prod) end\n\n// 'type' is the type of all heap-allocated, non-linear types\n// Polymorphic parameters go in {} after the function name\nfn id {a:type} (x: a) = x\n\n// ints aren't heap-allocated, so we can't pass them to 'id'\n// val y: int = id 7 // doesn't compile\n\n// 't@ype' is the type of all non-linear potentially unboxed types. It is a\n// supertype of 'type'.\n// Templated parameters go in {} before the function name\nfn {a:t@ype} id2 (x: a) = x\n\nval y: int = id2 7 // works\n\n// can't have polymorphic t@ype parameters\n// fn id3 {a:t@ype} (x: a) = x // doesn't compile\n\n// explicity specifying type parameters:\nfn id4 {a:type} (x: a) = id {a} x // {} for non-template parameters\nfn id5 {a:type} (x: a) = id2<a> x // <> for template parameters\nfn id6 {a:type} (x: a) = id {..} x // {..} to explicitly infer it\n\n// Heap allocated shareable datatypes\n// using datatypes leaks memory\ndatatype These (a:t@ype, b:t@ype) = This of a\n                                  | That of b\n                                  | These of (a, b)\n\n// Pattern matching using 'case'\nfn {a,b: t@ype} from_these (x: a, y: b, these: These(a,b)): (a, b) =\n  case these of\n  | This(x) => (x, y) // Shadowing of variable names is fine; here, x shadows\n                      // the parameter x\n  | That(y) => (x, y)\n  | These(x, y) => (x, y)\n\n// Partial pattern match using 'case-'\n// Will throw an exception if passed This\nfn {a,b:t@ype} unwrap_that (these: These(a,b)): b =\n  case- these of\n  | That(y) => y\n  | These(_, y) => y\n\n\n/*************** Part 2: refinements ****************/\n\n// Parameterize functions by what values they take and return\nfn cool_add {n:int} {m:int} (x: int n, y: int m): int (n+m) = x + y\n\n// list(a, n) is a list of n a's\nfun square_all {n:int} (xs: list(int, n)): list(int, n) =\n  case xs of\n  | list_nil() => list_nil()\n  | list_cons(x, rest) => list_cons(x * x, square_all rest)\n\nfn {a:t@ype} get_first {n:int | n >= 1} (xs: list(a, n)): a =\n  case+ xs of // '+' asks ATS to prove it's total\n  | list_cons(x, _) => x\n\n// Can't run get_first on lists of length 0\n// val x: int = get_first (list_nil()) // doesn't compile\n\n// in the stdlib:\n// sortdef nat = {n:int | n >= 0}\n// sortdef pos = {n:int | n >= 1}\n\nfn {a:t@ype} also_get_first {n:pos} (xs: list(a, n)): a =\n  let\n    val+ list_cons(x, _) = xs // val+ also works\n  in x end\n\n// tail-recursive reverse\nfun {a:t@ype} reverse {n:int} (xs: list(a, n)): list(a, n) =\n  let\n    // local functions can use type variables from their enclosing scope\n    // this one uses both 'a' and 'n'\n    fun rev_helper {i:nat} (xs: list(a, n-i), acc: list(a, i)): list(a, n) =\n      case xs of\n      | list_nil() => acc\n      | list_cons(x, rest) => rev_helper(rest, list_cons(x, acc))\n  in rev_helper(xs, list_nil) end\n\n// ATS has three context-dependent namespaces\n// the two 'int's mean different things in this example, as do the two 'n's\nfn namespace_example {n:int} (n: int n): int n = n\n//                      ^^^                         sort namespace\n//                    ^          ^^^ ^   ^^^ ^      statics namespace\n// ^^^^^^^^^^^^^^^^^          ^                  ^  value namespace\n\n// a termination metric can go in .< >.\n// it must decrease on each recursive call\n// then ATS will prove it doesn't infinitely recurse\nfun terminating_factorial {n:nat} .<n>. (n: int n): int =\n  if n = 0 then 1 else n * terminating_factorial (n-1)\n\n\n/*************** Part 3: the LF fragment ****************/\n\n// ATS supports proving theorems in LF (http://twelf.org/wiki/LF)\n\n// Relations are represented by inductive types\n\n// Proofs that the nth fibonacci number is f\ndataprop Fib(n:int, m:int) =\n  | FibZero(0, 0)\n  | FibOne(1, 1)\n  | {n, f1, f2: int} FibInd(n, f1 + f2) of (Fib(n-1,f1), Fib(n-2,f2))\n\n// Proved-correct fibonacci implementation\n// [A] B is an existential type: \"there exists A such that B\"\n// (proof | value)\nfun fib {n:nat} .<n>. (n: int n): [f:int] (Fib(n,f) | int f) =\n  if n = 0 then (FibZero | 0) else\n  if n = 1 then (FibOne | 1) else\n  let\n    val (proof1 | val1) = fib (n-1)\n    val (proof2 | val2) = fib (n-2)\n  // the existential type is inferred\n  in (FibInd(proof1, proof2) | val1 + val2) end\n\n// Faster proved-correct fibonacci implementation\nfn fib_tail {n:nat} (n: int n): [f:int] (Fib(n,f) | int f) =\n  let\n    fun loop {i:int | i < n} {f1, f2: int} .<n - i>.\n          (p1: Fib(i,f1), p2: Fib(i+1,f2)\n          | i: int i, f1: int f1, f2: int f2, n: int n\n          ): [f:int] (Fib(n,f) | int f) =\n      if i = n - 1\n      then (p2 | f2)\n      else loop (p2, FibInd(p2,p1) | i+1, f2, f1+f2, n)\n  in if n = 0 then (FibZero | 0) else loop (FibZero, FibOne | 0, 0, 1, n) end\n\n// Proof-level lists of ints, of type 'sort'\ndatasort IntList = ILNil of ()\n                 | ILCons of (int, IntList)\n\n// ILAppend(x,y,z) iff x ++ y = z\ndataprop ILAppend(IntList, IntList, IntList) =\n  | {y:IntList} AppendNil(ILNil, y, y)\n  | {a:int} {x,y,z: IntList}\n    AppendCons(ILCons(a,x), y, ILCons(a,z)) of ILAppend(x,y,z)\n\n// prfuns/prfns are compile-time functions acting on proofs\n\n// metatheorem: append is total\nprfun append_total {x,y: IntList} .<x>. (): [z:IntList] ILAppend(x,y,z)\n  = scase x of // scase lets you inspect static arguments (only in prfuns)\n  | ILNil() => AppendNil\n  | ILCons(a,rest) => AppendCons(append_total())\n\n\n/*************** Part 4: views ****************/\n\n// views are like props, but linear; ie they must be consumed exactly once\n// prop is a subtype of view\n\n// 'type @ address' is the most basic view\n\nfn {a:t@ype} read_ptr {l:addr} (pf: a@l | p: ptr l): (a@l | a) =\n  let\n    // !p searches for usable proofs that say something is at that address\n    val x = !p\n  in (pf | x) end\n\n// oops, tried to dereference a potentially invalid pointer\n// fn {a:t@ype} bad {l:addr} (p: ptr l): a = !p // doesn't compile\n\n// oops, dropped the proof (leaked the memory)\n// fn {a:t@ype} bad {l:addr} (pf: a@l | p: ptr l): a = !p // doesn't compile\n\nfn inc_at_ptr {l:addr} (pf: int@l | p: ptr l): (int@l | void) =\n  let\n    // !p := value writes value to the location at p\n    // like !p, it implicitly searches for usable proofs that are in scope\n    val () = !p := !p + 1\n  in (pf | ()) end\n\n// threading proofs through gets annoying\nfn inc_three_times {l:addr} (pf: int@l | p: ptr l): (int@l | void) =\n  let\n    val (pf2 | ()) = inc_at_ptr (pf | p)\n    val (pf3 | ()) = inc_at_ptr (pf2 | p)\n    val (pf4 | ()) = inc_at_ptr (pf3 | p)\n  in (pf4 | ()) end\n\n// so there's special syntactic sugar for when you don't consume a proof\nfn dec_at_ptr {l:addr} (pf: !int@l | p: ptr l): void =\n  !p := !p - 1           // ^ note the exclamation point\n\nfn dec_three_times {l:addr} (pf: !int@l | p: ptr l): void =\n  let\n    val () = dec_at_ptr (pf | p)\n    val () = dec_at_ptr (pf | p)\n    val () = dec_at_ptr (pf | p)\n  in () end\n\n// dataview is like dataprop, but linear\n// A proof that either the address is null, or there is a value there\ndataview MaybeNull(a:t@ype, addr) =\n  | NullPtr(a, null)\n  | {l:addr | l > null} NonNullPtr(a, l) of (a @ l)\n\nfn maybe_inc {l:addr} (pf: !MaybeNull(int, l) | p: ptr l): void =\n  if ptr1_is_null p\n  then ()\n  else let\n    // Deconstruct the proof to access the proof of a @ l\n    prval NonNullPtr(value_exists) = pf\n    val () = !p := !p + 1\n    // Reconstruct it again for the caller\n    prval () = pf := NonNullPtr(value_exists)\n  in () end\n\n// array_v(a,l,n) represents and array of n a's at location l\n// this gets compiled into an efficient for loop, since all proofs are erased\nfn sum_array {l:addr}{n:nat} (pf: !array_v(int,l,n) | p: ptr l, n: int n): int =\n  let\n    fun loop {l:addr}{n:nat} .<n>. (\n      pf: !array_v(int,l,n)\n    | ptr: ptr l,\n      length: int n,\n      acc: int\n    ): int = if length = 0\n      then acc\n      else let\n        prval (head, rest) = array_v_uncons(pf)\n        val result = loop(rest | ptr_add<int>(ptr, 1), length - 1, acc + !ptr)\n        prval () = pf := array_v_cons(head, rest)\n      in result end\n  in loop (pf | p, n, 0) end\n\n// 'var' is used to create stack-allocated (lvalue) variables\nval seven: int = let\n    var res: int = 3\n    // they can be modified\n    val () = res := res + 1\n    // addr@ res is a pointer to it, and view@ res is the associated proof\n    val (pf | ()) = inc_three_times(view@ res | addr@ res)\n    // need to give back the view before the variable goes out of scope\n    prval () = view@ res := pf\n  in res end\n\n// References let you pass lvalues, like in C++\nfn square (x: &int): void =\n  x := x * x // they can be modified\n\nval sixteen: int = let\n    var res: int = 4\n    val () = square res\n  in res end\n\nfn inc_at_ref (x: &int): void =\n  let\n    // like vars, references have views and addresses\n    val (pf | ()) = inc_at_ptr(view@ x | addr@ x)\n    prval () = view@ x := pf\n  in () end\n\n// Like ! for views, & references are only legal as argument types\n// fn bad (x: &int): &int = x // doesn't compile\n\n// this takes a proof int n @ l, but returns a proof int (n+1) @ l\n// since they're different types, we can't use !int @ l like before\nfn refined_inc_at_ptr {n:int}{l:addr} (\n  pf: int n @ l | p: ptr l\n): (int (n+1) @ l | void) =\n  let\n    val () = !p := !p + 1\n  in (pf | ()) end\n\n// special syntactic sugar for returning a proof at a different type\nfn refined_dec_at_ptr {n:int}{l:addr} (\n  pf: !int n @ l >> int (n-1) @ l | p: ptr l\n): void =\n  !p := !p - 1\n\n// legal but very bad code\nprfn swap_proofs {v1,v2:view} (a: !v1 >> v2, b: !v2 >> v1): void =\n  let\n    prval tmp = a\n    prval () = a := b\n    prval () = b := tmp\n  in () end\n\n// also works with references\nfn refined_square {n:int} (x: &int n >> int (n*n)): void =\n  x := x * x\n\nfn replace {a,b:vtype} (dest: &a >> b, src: b): a =\n  let\n    val old = dest\n    val () = dest := src\n  in old end\n\n// values can be uninitialized\nfn {a:vt@ype} write (place: &a? >> a, value: a): void =\n  place := value\n\nval forty: int = let\n    var res: int\n    val () = write (res, 40)\n  in res end\n\n// viewtype: a view and a type\nviewtypedef MaybeNullPtr(a:t@ype) = [l:addr] (MaybeNull(a, l) | ptr l)\n// MaybeNullPtr has type 'viewtype' (aka 'vtype')\n// type is a subtype of vtype and t@ype is a subtype of vt@ype\n\n// The most general identity function:\nfn {a:vt@ype} id7 (x: a) = x\n\n// since they contain views, viewtypes must be used linearly\n// fn {a:vt@ype} duplicate (x: a) = (x, x) // doesn't compile\n// fn {a:vt@ype} ignore (x: a) = () // doesn't compile\n\n// arrayptr(a,l,n) is a convenient built-in viewtype\nfn easier_sum_array {l:addr}{n:nat} (p: !arrayptr(int,l,n), n: int n): int =\n  let\n    fun loop {i:nat | i <= n} (\n      p: !arrayptr(int,l,n), n: int n, i: int i, acc: int\n    ): int =\n      if i = n\n      then acc\n      else loop(p, n, i+1, acc + p[i])\n  in loop(p, n, 0, 0) end\n\n\n/*************** Part 5: dataviewtypes ****************/\n\n// a dataviewtype is a heap-allocated non-shared inductive type\n\n// in the stdlib:\n// dataviewtype list_vt(a:vt@ype, int) =\n//   | list_vt_nil(a, 0)\n//   | {n:nat} list_vt_cons(a, n+1) of (a, list_vt(a, n))\n\nfn {a:vt@ype} length {n:int} (l: !list_vt(a, n)): int n =\n  let                         // ^ since we're not consuming it\n    fun loop {acc:int} (l: !list_vt(a, n-acc), acc: int acc): int n =\n      case l of\n      | list_vt_nil() => acc\n      | list_vt_cons(head, tail) => loop(tail, acc + 1)\n  in loop (l, 0) end\n\n//     vvvvv  not vt@ype, because you can't easily get rid of a vt@ype\nfun {a:t@ype} destroy_list {n:nat} (l: list_vt(a,n)): void =\n  case l of\n  // ~ pattern match consumes and frees that node\n  | ~list_vt_nil() => ()\n  | ~list_vt_cons(_, tail) => destroy_list tail\n\n// unlike a datatype, a dataviewtype can be modified:\nfun {a:vt@ype} push_back {n:nat} (\n  x: a,\n  l: &list_vt(a,n) >> list_vt(a,n+1)\n): void =\n  case l of\n  | ~list_vt_nil() => l := list_vt_cons(x, list_vt_nil)\n  // @ pattern match disassembles/\"unfolds\" the datavtype's view, so you can\n  // modify its components\n  | @list_vt_cons(head, tail) => let\n      val () = push_back (x, tail)\n      // reassemble it with fold@\n      prval () = fold@ l\n    in () end\n\nfun {a:vt@ype} pop_last {n:pos} (l: &list_vt(a,n) >> list_vt(a,n-1)): a =\n  let\n    val+ @list_vt_cons(head, tail) = l\n  in case tail of\n    | list_vt_cons _ => let\n        val res = pop_last tail\n        prval () = fold@ l\n      in res end\n    | ~list_vt_nil() => let\n        val head = head\n        // Deallocate empty datavtype nodes with free@\n        val () = free@{..}{0} l\n        val () = l := list_vt_nil()\n      in head end\n /** Equivalently:\n  * | ~list_vt_nil() => let\n  *     prval () = fold@ l\n  *     val+ ~list_vt_cons(head, ~list_vt_nil()) = l\n  *     val () = l := list_vt_nil()\n  *   in head end\n  */\n  end\n\n// \"holes\" (ie uninitialized memory) can be created with _ on the RHS\n// This function uses destination-passing-style to copy the list in a single\n// tail-recursive pass.\nfn {a:t@ype} copy_list {n:nat} (l: !list_vt(a, n)): list_vt(a, n) =\n  let\n    var res: ptr\n    fun loop {k:nat} (l: !list_vt(a, k), hole: &ptr? >> list_vt(a, k)): void =\n      case l of\n      | list_vt_nil() => hole := list_vt_nil\n      | list_vt_cons(first, rest) => let\n          val () = hole := list_vt_cons{..}{k-1}(first, _)\n          //                                            ^ on RHS: a hole\n          val+list_vt_cons(_, new_hole) = hole\n          //               ^ on LHS: wildcard pattern (not a hole)\n          val () = loop (rest, new_hole)\n          prval () = fold@ hole\n        in () end\n    val () = loop (l, res)\n  in res end\n\n// Reverse a linked-list *in place* -- no allocations or frees\nfn {a:vt@ype} in_place_reverse {n:nat} (l: list_vt(a, n)): list_vt(a, n) =\n  let\n    fun loop {k:nat} (l: list_vt(a, n-k), acc: list_vt(a, k)): list_vt(a, n) =\n      case l of\n      | ~list_vt_nil() => acc\n      | @list_vt_cons(x, tail) => let\n          val rest = replace(tail, acc)\n          // the node 'l' is now part of acc instead of the original list\n          prval () = fold@ l\n        in loop (rest, l) end\n  in loop (l, list_vt_nil) end\n\n\n/*************** Part 6: miscellaneous extras ****************/\n\n// a record\n// Point has type 't@ype'\ntypedef Point = @{ x= int, y= int }\nval origin: Point = @{ x= 0, y= 0 }\n\n// tuples and records are normally unboxed, but there are boxed variants\n// BoxedPoint has type 'type'\ntypedef BoxedPoint = '{ x= int, y= int }\nval boxed_pair: '(int,int) = '(5, 3)\n\n// When passing a pair as the single argument to a function, it needs to be\n// written @(a,b) to avoid ambiguity with multi-argument functions\nval six_plus_seven = let\n    fun sum_of_pair (pair: (int,int)) = pair.0 + pair.1\n  in sum_of_pair @(6, 7) end\n\n// When a constructor has no associated data, such as None(), the parentheses\n// are optional in expressions.  However, they are mandatory in patterns\nfn inc_option (opt: Option int) =\n  case opt of\n  | Some(x) => Some(x+1)\n  | None() => None\n\n// ATS has a simple FFI, since it compiles to C and (mostly) uses the C ABI\n%{\n// Inline C code\nint scanf_wrapper(void *format, void *value) {\n    return scanf((char *) format, (int *) value);\n}\n%}\n// If you wanted to, you could define a custom dataviewtype more accurately\n// describing the result of scanf\nextern fn scanf (format: string, value: &int): int = \"scanf_wrapper\"\n\nfn get_input_number (): Option int =\n  let\n    var x: int = 0\n  in\n    if scanf(\"%d\\n\", x) = 1\n    then Some(x)\n    else None\n  end\n\n// extern is also used for separate declarations and definitions\nextern fn say_hi (): void\n// later on, or in another file:\nimplement say_hi () = print \"hi\\n\"\n\n// if you implement main0, it will run as the main function\n// implmnt is an alias for implement\nimplmnt main0 () = ()\n\n// as well as for axioms:\nextern praxi view_id {a:view} (x: a): a\n// you don't need to actually implement the axioms, but you could\nprimplmnt view_id x = x\n// primplmnt is an alias for primplement\n\n// Some standard aliases are:\n// List0(a) = [n:nat] list(a,n) and List0_vt(a) = [n:nat] list_vt(a,n)\n// t0p = t@ype and vt0p = vt@ype\nfun {a:t0p} append (xs: List0 a, ys: List0 a): List0 a =\n  case xs of\n  | list_nil() => ys\n  | list_cons(x, xs) => list_cons(x, append(xs, ys))\n\n// there are many ways of doing things after one another\nval let_in_example = let\n    val () = print \"thing one\\n\"\n    val () = print \"thing two\\n\"\n  in () end\n\nval parens_example = (print \"thing one\\n\"; print \"thing two\\n\")\n\nval begin_end_example = begin\n    print \"thing one\\n\";\n    print \"thing two\\n\"; // optional trailing semicolon\n  end\n\n// and many ways to use local variables\nfun times_four_let x =\n  let\n    fun times_two (x: int) = x * 2\n  in times_two (times_two x) end\n\nlocal\n  fun times_two (x: int) = x * 2\nin\n  fun times_four_local x = times_two (times_two x)\nend\n\nfun times_four_where x = times_two (times_two x)\n  where {\n    fun times_two (x: int) = x * 2\n  }\n\n//// The last kind of comment in ATS is an end-of-file comment.\n\nAnything between the four slashes and the end of the file is ignored.\n\nHave fun with ATS!\n```\n\n## Learn more\n\nThis isn't all there is to ATS -- notably, some core features like closures and\nthe effect system are left out, as well as other less type-y stuff like modules\nand the build system.  If you'd like to write these sections yourself,\ncontributions would be welcome!\n\nTo learn more about ATS, visit the [ATS website](http://www.ats-lang.org/), in\nparticular the [documentation page](http://www.ats-lang.org/Documents.html).\n\n"
        },
        {
          "name": "awk.md",
          "type": "blob",
          "size": 12.7255859375,
          "content": "---\ncategory: tool\nname: AWK\nfilename: learnawk.awk\ncontributors:\n     - [\"Marshall Mason\", \"http://github.com/marshallmason\"]\n\n---\n\nAWK is a standard tool on every POSIX-compliant UNIX system. It's like\nflex/lex, from the command-line, perfect for text-processing tasks and\nother scripting needs. It has a C-like syntax, but without mandatory\nsemicolons (although, you should use them anyway, because they are required\nwhen you're writing one-liners, something AWK excels at), manual memory\nmanagement, or static typing. It excels at text processing. You can call to\nit from a shell script, or you can use it as a stand-alone scripting language.\n\nWhy use AWK instead of Perl? Readability. AWK is easier to read\nthan Perl. For simple text-processing scripts, particularly ones that read\nfiles line by line and split on delimiters, AWK is probably the right tool for\nthe job.\n\n```awk\n#!/usr/bin/awk -f\n\n# Comments are like this\n\n\n# AWK programs consist of a collection of patterns and actions.\npattern1 { action; } # just like lex\npattern2 { action; }\n\n# There is an implied loop and AWK automatically reads and parses each\n# record of each file supplied. Each record is split by the FS delimiter,\n# which defaults to white-space (multiple spaces,tabs count as one)\n# You can assign FS either on the command line (-F C) or in your BEGIN\n# pattern\n\n# One of the special patterns is BEGIN. The BEGIN pattern is true\n# BEFORE any of the files are read. The END pattern is true after\n# an End-of-file from the last file (or standard-in if no files specified)\n# There is also an output field separator (OFS) that you can assign, which\n# defaults to a single space\n\nBEGIN {\n\n    # BEGIN will run at the beginning of the program. It's where you put all\n    # the preliminary set-up code, before you process any text files. If you\n    # have no text files, then think of BEGIN as the main entry point.\n\n    # Variables are global. Just set them or use them, no need to declare.\n    count = 0;\n\n    # Operators just like in C and friends\n    a = count + 1;\n    b = count - 1;\n    c = count * 1;\n    d = count / 1; # integer division\n    e = count % 1; # modulus\n    f = count ^ 1; # exponentiation\n\n    a += 1;\n    b -= 1;\n    c *= 1;\n    d /= 1;\n    e %= 1;\n    f ^= 1;\n\n    # Incrementing and decrementing by one\n    a++;\n    b--;\n\n    # As a prefix operator, it returns the incremented value\n    ++a;\n    --b;\n\n    # Notice, also, no punctuation such as semicolons to terminate statements\n\n    # Control statements\n    if (count == 0)\n        print \"Starting with count of 0\";\n    else\n        print \"Huh?\";\n\n    # Or you could use the ternary operator\n    print (count == 0) ? \"Starting with count of 0\" : \"Huh?\";\n\n    # Blocks consisting of multiple lines use braces\n    while (a < 10) {\n        print \"String concatenation is done\" \" with a series\" \" of\"\n            \" space-separated strings\";\n        print a;\n\n        a++;\n    }\n\n    for (i = 0; i < 10; i++)\n        print \"Good ol' for loop\";\n\n    # As for comparisons, they're the standards:\n    # a < b   # Less than\n    # a <= b  # Less than or equal\n    # a != b  # Not equal\n    # a == b  # Equal\n    # a > b   # Greater than\n    # a >= b  # Greater than or equal\n\n    # Logical operators as well\n    # a && b  # AND\n    # a || b  # OR\n\n    # In addition, there's the super useful regular expression match\n    if (\"foo\" ~ \"^fo+$\")\n        print \"Fooey!\";\n    if (\"boo\" !~ \"^fo+$\")\n        print \"Boo!\";\n\n    # Arrays\n    arr[0] = \"foo\";\n    arr[1] = \"bar\";\n\n    # You can also initialize an array with the built-in function split()\n\n    n = split(\"foo:bar:baz\", arr, \":\");\n\n    # You also have associative arrays (indeed, they're all associative arrays)\n    assoc[\"foo\"] = \"bar\";\n    assoc[\"bar\"] = \"baz\";\n\n    # And multi-dimensional arrays, with some limitations I won't mention here\n    multidim[0,0] = \"foo\";\n    multidim[0,1] = \"bar\";\n    multidim[1,0] = \"baz\";\n    multidim[1,1] = \"boo\";\n\n    # You can test for array membership\n    if (\"foo\" in assoc)\n        print \"Fooey!\";\n\n    # You can also use the 'in' operator to traverse the keys of an array\n    for (key in assoc)\n        print assoc[key];\n\n    # The command line is in a special array called ARGV\n    for (argnum in ARGV)\n        print ARGV[argnum];\n\n    # You can remove elements of an array\n    # This is particularly useful to prevent AWK from assuming the arguments\n    # are files for it to process\n    delete ARGV[1];\n\n    # The number of command line arguments is in a variable called ARGC\n    print ARGC;\n\n    # AWK has several built-in functions. They fall into three categories. I'll\n    # demonstrate each of them in their own functions, defined later.\n\n    return_value = arithmetic_functions(a, b, c);\n    string_functions();\n    io_functions();\n}\n\n# Here's how you define a function\nfunction arithmetic_functions(a, b, c,     d) {\n\n    # Probably the most annoying part of AWK is that there are no local\n    # variables. Everything is global. For short scripts, this is fine, even\n    # useful, but for longer scripts, this can be a problem.\n\n    # There is a work-around (ahem, hack). Function arguments are local to the\n    # function, and AWK allows you to define more function arguments than it\n    # needs. So just stick local variable in the function declaration, like I\n    # did above. As a convention, stick in some extra whitespace to distinguish\n    # between actual function parameters and local variables. In this example,\n    # a, b, and c are actual parameters, while d is merely a local variable.\n\n    # Now, to demonstrate the arithmetic functions\n\n    # Most AWK implementations have some standard trig functions\n    d = sin(a);\n    d = cos(a);\n    d = atan2(b, a); # arc tangent of b / a\n\n    # And logarithmic stuff\n    d = exp(a);\n    d = log(a);\n\n    # Square root\n    d = sqrt(a);\n\n    # Truncate floating point to integer\n    d = int(5.34); # d => 5\n\n    # Random numbers\n    srand(); # Supply a seed as an argument. By default, it uses the time of day\n    d = rand(); # Random number between 0 and 1.\n\n    # Here's how to return a value\n    return d;\n}\n\nfunction string_functions(    localvar, arr) {\n\n    # AWK, being a string-processing language, has several string-related\n    # functions, many of which rely heavily on regular expressions.\n\n    # Search and replace, first instance (sub) or all instances (gsub)\n    # Both return number of matches replaced\n    localvar = \"fooooobar\";\n    sub(\"fo+\", \"Meet me at the \", localvar); # localvar => \"Meet me at the bar\"\n    gsub(\"e\", \".\", localvar); # localvar => \"M..t m. at th. bar\"\n\n    # Search for a string that matches a regular expression\n    # index() does the same thing, but doesn't allow a regular expression\n    match(localvar, \"t\"); # => 4, since the 't' is the fourth character\n\n    # Split on a delimiter\n    n = split(\"foo-bar-baz\", arr, \"-\");\n    # result: a[1] = \"foo\"; a[2] = \"bar\"; a[3] = \"baz\"; n = 3\n\n    # Other useful stuff\n    sprintf(\"%s %d %d %d\", \"Testing\", 1, 2, 3); # => \"Testing 1 2 3\"\n    substr(\"foobar\", 2, 3); # => \"oob\"\n    substr(\"foobar\", 4); # => \"bar\"\n    length(\"foo\"); # => 3\n    tolower(\"FOO\"); # => \"foo\"\n    toupper(\"foo\"); # => \"FOO\"\n}\n\nfunction io_functions(    localvar) {\n\n    # You've already seen print\n    print \"Hello world\";\n\n    # There's also printf\n    printf(\"%s %d %d %d\\n\", \"Testing\", 1, 2, 3);\n\n    # AWK doesn't have file handles, per se. It will automatically open a file\n    # handle for you when you use something that needs one. The string you used\n    # for this can be treated as a file handle, for purposes of I/O. This makes\n    # it feel sort of like shell scripting, but to get the same output, the\n    # string must match exactly, so use a variable:\n\n    outfile = \"/tmp/foobar.txt\";\n\n    print \"foobar\" > outfile;\n\n    # Now the string outfile is a file handle. You can close it:\n    close(outfile);\n\n    # Here's how you run something in the shell\n    system(\"echo foobar\"); # => prints foobar\n\n    # Reads a line from standard input and stores in localvar\n    getline localvar;\n\n    # Reads a line from a pipe (again, use a string so you close it properly)\n    cmd = \"echo foobar\";\n    cmd | getline localvar; # localvar => \"foobar\"\n    close(cmd);\n\n    # Reads a line from a file and stores in localvar\n    infile = \"/tmp/foobar.txt\";\n    getline localvar < infile;\n    close(infile);\n}\n\n# As I said at the beginning, AWK programs consist of a collection of patterns\n# and actions. You've already seen the BEGIN pattern. Other\n# patterns are used only if you're processing lines from files or standard\n# input.\n#\n# When you pass arguments to AWK, they are treated as file names to process.\n# It will process them all, in order. Think of it like an implicit for loop,\n# iterating over the lines in these files. these patterns and actions are like\n# switch statements inside the loop.\n\n/^fo+bar$/ {\n\n    # This action will execute for every line that matches the regular\n    # expression, /^fo+bar$/, and will be skipped for any line that fails to\n    # match it. Let's just print the line:\n\n    print;\n\n    # Whoa, no argument! That's because print has a default argument: $0.\n    # $0 is the name of the current line being processed. It is created\n    # automatically for you.\n\n    # You can probably guess there are other $ variables. Every line is\n    # implicitly split before every action is called, much like the shell\n    # does. And, like the shell, each field can be access with a dollar sign\n\n    # This will print the second and fourth fields in the line\n    print $2, $4;\n\n    # AWK automatically defines many other variables to help you inspect and\n    # process each line. The most important one is NF\n\n    # Prints the number of fields on this line\n    print NF;\n\n    # Print the last field on this line\n    print $NF;\n}\n\n# Every pattern is actually a true/false test. The regular expression in the\n# last pattern is also a true/false test, but part of it was hidden. If you\n# don't give it a string to test, it will assume $0, the line that it's\n# currently processing. Thus, the complete version of it is this:\n\n$0 ~ /^fo+bar$/ {\n    print \"Equivalent to the last pattern\";\n}\n\na > 0 {\n    # This will execute once for each line, as long as a is positive\n}\n\n# You get the idea. Processing text files, reading in a line at a time, and\n# doing something with it, particularly splitting on a delimiter, is so common\n# in UNIX that AWK is a scripting language that does all of it for you, without\n# you needing to ask. All you have to do is write the patterns and actions\n# based on what you expect of the input, and what you want to do with it.\n\n# Here's a quick example of a simple script, the sort of thing AWK is perfect\n# for. It will read a name from standard input and then will print the average\n# age of everyone with that first name. Let's say you supply as an argument the\n# name of a this data file:\n#\n# Bob Jones 32\n# Jane Doe 22\n# Steve Stevens 83\n# Bob Smith 29\n# Bob Barker 72\n#\n# Here's the script:\n\nBEGIN {\n\n    # First, ask the user for the name\n    print \"What name would you like the average age for?\";\n\n    # Get a line from standard input, not from files on the command line\n    getline name < \"/dev/stdin\";\n}\n\n# Now, match every line whose first field is the given name\n$1 == name {\n\n    # Inside here, we have access to a number of useful variables, already\n    # pre-loaded for us:\n    # $0 is the entire line\n    # $3 is the third field, the age, which is what we're interested in here\n    # NF is the number of fields, which should be 3\n    # NR is the number of records (lines) seen so far\n    # FILENAME is the name of the file being processed\n    # FS is the field separator being used, which is \" \" here\n    # ...etc. There are plenty more, documented in the man page.\n\n    # Keep track of a running total and how many lines matched\n    sum += $3;\n    nlines++;\n}\n\n# Another special pattern is called END. It will run after processing all the\n# text files. Unlike BEGIN, it will only run if you've given it input to\n# process. It will run after all the files have been read and processed\n# according to the rules and actions you've provided. The purpose of it is\n# usually to output some kind of final report, or do something with the\n# aggregate of the data you've accumulated over the course of the script.\n\nEND {\n    if (nlines)\n        print \"The average age for \" name \" is \" sum / nlines;\n}\n```\n\nFurther Reading:\n\n* [Awk tutorial](http://www.grymoire.com/Unix/Awk.html)\n* [Awk man page](https://linux.die.net/man/1/awk)\n* [The GNU Awk User's Guide](https://www.gnu.org/software/gawk/manual/gawk.html)\n  GNU Awk is found on most Linux systems.\n* [AWK one-liner collection](http://tuxgraphics.org/~guido/scripts/awk-one-liner.html)\n* [Awk alpinelinux wiki](https://wiki.alpinelinux.org/wiki/Awk) a technical\n  summary and list of \"gotchas\" (places where different implementations may\n  behave in different or unexpected ways).\n* [basic libraries for awk](https://github.com/dubiousjim/awkenough)\n"
        },
        {
          "name": "ballerina.md",
          "type": "blob",
          "size": 14.03125,
          "content": "---\nname: Ballerina\ncontributors:\n    - [\"Anjana Fernando\", \"https://github.com/lafernando\"]\nfilename: learn_ballerina.bal\n---\n\n[Ballerina](https://ballerina.io/) is a statically-typed programming language for making development for the cloud an enjoyable experience. \n\n```java\n// Single-line comment\n\n// Import modules into the current source file \nimport ballerina/io;\nimport ballerina/time;\nimport ballerina/http;\nimport ballerinax/java.jdbc;\nimport ballerina/lang.'int as ints;\nimport ballerinax/awslambda;\n// Module alias \"af\" used in code in place of the full module name\nimport ballerinax/azure.functions as af;\n\nhttp:Client clientEP = new (\"https://freegeoip.app/\");\njdbc:Client accountsDB = new ({url: \"jdbc:mysql://localhost:3306/AccountsDB\", \n                               username: \"test\", password: \"test\"});\n\n// A service is a first-class concept in Ballerina, and is one of the \n// entrypoints to a Ballerina program. \n// The Ballerina platform also provides support for easy deployment to \n// environments such as Kubernetes (https://ballerina.io/learn/deployment/kubernetes/).\nservice geoservice on new http:Listener(8080) {\n\n    @http:ResourceConfig {\n        path: \"/geoip/{ip}\"\n    }\n    resource function geoip(http:Caller caller, http:Request request,\n                            string ip) returns @tainted error? {\n        http:Response resp = check clientEP->get(\"/json/\" + <@untainted>ip);\n        check caller->respond(<@untainted> check resp.getTextPayload());\n    }\n\n}\n\n// Serverless Function-as-a-Service support with AWS Lambda.\n// The Ballerina compiler automatically generates the final deployment \n// artifact to be deployed.\n@awslambda:Function\npublic function echo(awslambda:Context ctx, json input) returns json {\n    return input;\n}\n\n@awslambda:Function\npublic function notifyS3(awslambda:Context ctx, \n                         awslambda:S3Event event) returns json {\n    return event.Records[0].s3.'object.key;\n}\n\n// Serverless Function-as-a-Service support with Azure Functions.\n// Similar to AWS Lambda, the compiler generates the deployment artifacts.\n@af:Function\npublic function fromQueueToQueue(af:Context ctx, \n        @af:QueueTrigger { queueName: \"queue1\" } string inMsg,\n        @af:QueueOutput { queueName: \"queue2\" } af:StringOutputBinding outMsg) {\n    outMsg.value = inMsg;\n}\n\n// A custom record type\npublic type Person record {\n    string id;              // required field\n    string name;            \n    int age?;               // optional field\n    string country = \"N/A\"; // default value\n};\n\n@af:Function\npublic function fromHttpTriggerCosmosDBInput(\n        @af:HTTPTrigger { route: \"c1/{country}\" } af:HTTPRequest httpReq, \n        @af:CosmosDBInput { connectionStringSetting: \"CosmosDBConnection\", \n        databaseName: \"db1\", collectionName: \"c1\", \n        sqlQuery: \"select * from c1 where c1.country = {country}\" } \n        Person[] dbReq)\n        returns @af:HTTPOutput string|error {\n    return dbReq.toString();\n}\n\npublic function main() returns @tainted error? {\n    int a = 10;               // 64-bit signed integer\n    float b = 1.56;           // 64-bit IEEE 754-2008 binary floating point number\n    string c = \"hello\";       // a unicode string\n    boolean d = true;         // true, false\n    decimal e = 15.335;       // decimal floating point number\n\n    var f = 20;               // type inference with 'var' - 'f' is an int\n    \n    int[] intArray = [1, 2, 3, 4, 5, 6];\n    int x = intArray.shift(); // similar to a dequeue operation\n    x = intArray.pop();       // removes the last element\n    intArray.push(10);        // add to the end\n\n    // Tuples - similar to a fixed length array with a distinct type for each slot\n    [string, int] p1 = [\"Jack\", 1990]; \n    [string, int] p2 = [\"Tom\", 1986];\n    io:println(\"Name: \", p1[0], \" Birth Year: \", p1[1]);\n\n    string name1;\n    int birthYear1;\n    [name1, birthYear1] = p1;     // tuple destructuring\n\n    var [name2, birthYear2] = p2; // declare and assign values in the same statement\n\n    // If statements\n    int ix = 10;\n    if ix < 10 {\n        io:println(\"value is less than 10\");\n    } else if ix == 10 {\n        io:println(\"value equals to 10\");\n    } else {\n        io:println(\"value is greater than 10\");\n    }\n\n    // Loops\n    int count = 10;\n    int i = 0;\n    while i < 10 {\n        io:println(i);\n    }\n    // Loop from 0 to count (inclusive)\n    foreach var j in 0...count {\n        io:println(j);\n    }\n    // Loop from 0 to count (non-inclusive)\n    foreach var j in 0..<count {\n        io:println(j);\n    }\n    // Loop a list\n    foreach var j in intArray {\n        io:println(j);\n    }\n\n    json j1 = { \"name\" : name1, \"birthYear\" : birthYear1, \"zipcode\" : 90210 };\n    io:println(j1.name, \" - \", j1.zipcode);\n    // New fields are added to a JSON value through \"mergeJson\"\n    var j2 = j1.mergeJson({ \"id\" : \"90400593053\"});\n\n    // XML namespace declaration\n    xmlns \"http://example.com/ns1\" as ns1;\n    xmlns \"http://example.com/default\";\n    \n    // XML variable from a literal value\n    xml x1 = xml `<ns1:entry><name>{{name1}}</name><birthYear>{{birthYear1}}</birthYear></ns1:entry>`;\n    io:println(x1);\n    // Access specific elements in the XML value\n    io:println(x1/<name>);\n    // List all child items in the XML value\n    io:println(x1/*);\n\n    // Function invocations\n    x = add(1, 2);\n    io:println(multiply(2, 4));\n    // Invocation providing value for the defaultable parameter\n    io:println(multiply(3, 4, true));\n    // Invocation with values to a rest parameter (multi-valued)\n    io:println(addAll(1, 2, 3));\n    io:println(addAll(1, 2, 3, 4, 5));\n\n    // Function pointers\n    (function (int, int) returns int) op1 = getOperation(\"add\");\n    (function (int, int) returns int) op2 = getOperation(\"mod\");\n    io:println(op1(5, 10));\n    io:println(op2(13, 10));\n\n    // Closures\n    (function (int x) returns int) add5 = getAdder(5);\n    (function (int x) returns int) add10 = getAdder(10);\n    io:println(add5(10));\n    io:println(add10(10));\n\n    int[] numbers = [1, 2, 3, 4, 5, 6, 7, 8];\n    // Functional iteration\n    int[] evenNumbers = numbers.filter(function (int x) returns boolean { return x % 2 == 0; });\n\n    // Union types - \"input\" is of type either string or byte[]\n    string|byte[] uval = \"XXX\";\n\n    // A type test expression (\"uval is string\") can be used to check the \n    // runtime type of a variable.\n    if uval is string {\n        // In the current scope, \"uval\" is a string value\n        string data = \"data:\" + uval;\n    } else {\n        // Since the expression in the \"if\" statement ruled out that it's not a string,\n        // the only type left is \"byte[]\"; so in the current scope, \"uval\" will always\n        // be a \"byte[]\".\n        int inputLength = uval.length();\n    }\n\n    // Error handling\n    string input = io:readln(\"Enter number: \");\n    int|error result = ints:fromString(input);\n    if result is int {\n        io:println(\"Number: \", result);\n    } else {\n        io:println(\"Invalid number: \", input);\n    }\n\n    // A check expression can be used to directly return the error from\n    // the current function if its subexpression evaluated to an error\n    // value in the runtime. \n    int number = check ints:fromString(input); \n\n    // Concurrent execution using workers in a function\n    doWorkers();\n\n    // Asynchronous execution with futures\n    future<int> f10 = start fib(10);\n    var webresult = clientEP->get(\"/\");\n    int fresult = wait f10;\n    if webresult is http:Response {\n        io:println(webresult.getTextPayload());\n        io:println(fresult);\n    }\n\n    // Mapping types\n    map<int> ageMap = {};\n    ageMap[\"Peter\"] = 25;\n    ageMap[\"John\"] = 30;\n\n    int? agePeter = ageMap[\"Peter\"]; // int? is the union type int|() - int or nill\n    if agePeter is int {\n        io:println(\"Peter's age is \", agePeter);\n    } else {\n        io:println(\"Peter's age is not found\");\n    }\n\n    Person person1 = { id: \"p1\", name : \"Anne\", age: 28, country: \"Sri Lanka\" };\n    Scores score1 = { physics : 80, mathematics: 95 };\n    score1[\"chemistry\"] = 75;\n    io:println(score1[\"chemistry\"]);\n\n    Student student1 = { id: \"s1\", name: \"Jack\", age: 25, country: \"Japan\" };\n    student1.college = \"Stanford\";\n    string? jacksCollege = student1?.college; // optional field access\n    if jacksCollege is string {\n        io:println(\"Jack's college is \", jacksCollege);\n    }\n\n    // Due to the structural type system, \"student1\" can be assigned to \"person2\",\n    // since the student1's structure is compatible with person2's,\n    // where we can say, a \"Student\" is a \"Person\" as well. \n    Person person2 = student1;\n\n    map<int> grades = {\"Jack\": 95, \"Anne\": 90, \"John\": 80, \"Bill\": 55};\n    Person px1 = {id: \"px1\", name: \"Jack\", age: 30, country: \"Canada\"};\n    Person px2 = {id: \"px2\", name: \"John\", age: 25};\n    Person px3 = {id: \"px3\", name: \"Anne\", age: 17, country: \"UK\"};\n    Person px4 = {id: \"px4\", name: \"Bill\", age: 15, country: \"USA\"};\n    Person[] persons = [];\n    persons.push(px1);\n    persons.push(px2);\n    persons.push(px3);\n    persons.push(px4);\n\n    // Query expressions used to execute complex queries for list data\n    Result[] results = from var person in persons\n                       let int lgrade = (grades[person.name] ?: 0)\n                       where lgrade > 75 \n                           let string targetCollege = \"Stanford\"\n                           select { \n                               name: person.name, \n                               college: targetCollege, \n                               grade: lgrade \n                           };\n\n    // Compile-time taint checking for handling untrusted data\n    string s1 = \"abc\";\n    mySecureFunction(s1);\n    // Explicitely make \"s2\" a tainted value. External input to a Ballerina\n    // program such as command-line arguments and network input are by-default\n    // marked as tainted data.\n    string s2 = <@tainted> s1;\n    // \"s2x\" is now a tainted value, since its value is derived using a \n    // tainted value (s1).\n    string s2x = s2 + \"abc\";\n    // The following line uncommented will result in a compilation error,\n    // since we are passing a tainted value (s2x) to a function which \n    // exepects an untainted value.\n    // mySecureFunction(s2x);\n\n    // Instantiating objects\n    Employee emp1 = new(\"E0001\", \"Jack Smith\", \"Sales\", 2009);\n    io:println(\"The company service duration of \", emp1.name, \n               \" is \", emp1.serviceDuration());\n\n    // Supported operations can be executed in a transaction by enclosing the actions\n    // in a \"transaction\" block. \n    transaction {\n        // Executes the below database operations in a single local transactions\n        var r1 = accountsDB->update(\"UPDATE Employee SET balance = balance + ? WHERE id = ?\", 5500.0, \"ID001\");\n        var r2 = accountsDB->update(\"UPDATE Employee SET balance = balance + ? WHERE id = ?\", 5500.0, \"ID001\");\n    }\n}\n\n// An object is a behavioural type, which encapsulates both data and functionality.\ntype Employee object {\n    \n    // Private fields are only visible within the object and its methods\n    private string empId;\n    // Public fields can be accessed by anyone\n    public string name;\n    public string department;\n    // The default qualifier is a \"protected\" field, \n    // which are accessible only within the module.\n    int yearJoined;           \n    \n    // The object initialization function; automatically called when an object is instantiated.\n    public function __init(string empId, string name, string department, int yearJoined) {\n        self.empId = empId;\n        self.name = name;\n        self.department = department;\n        self.yearJoined = yearJoined;        \n    }\n\n    // An object method\n    public function serviceDuration() returns int {\n        time:Time ct = time:currentTime();\n        return time:getYear(ct) - self.yearJoined;\n    }\n\n};\n\n// Student is a subtype of Person\ntype Student record {\n    string id;\n    string name;\n    int age;\n    string college?;\n    string country;\n};\n\ntype Scores record {\n    int physics;\n    int mathematics;\n};\n\ntype Result record {\n    string name;\n    string college;\n    int grade;\n};\n\npublic function getOperation(string op) returns (function (int, int) returns int) {\n    if op == \"add\" {\n        return add;\n    } else if op == \"mod\" {\n        return function (int a, int b) returns int { // anonymous function\n            return a % b;\n        };\n    } else {\n        return (x, y) => 0; // single expression anonymous no-op function \n    }\n}\n\n// Two required parameters\npublic function add(int a, int b) returns int {\n    return a + b;\n}\n\n// 'log' is a defaultable parameter\npublic function multiply(int a, int b, boolean log = false) returns int {\n    if log {\n        io:println(\"Multiplying \", a, \" with \", b);\n    }\n    return a * b;\n}\n\n// 'numbers' is a rest parameter - it can have multiple values, \n// similar to an array.\npublic function addAll(int... numbers) returns int {\n    int result = 0;\n    foreach int number in numbers {\n        result += number;\n    }\n    return result;\n}\n\npublic function getAdder(int n) returns (function (int x) returns int) {\n    return function (int x) returns int { // returns closure\n        return x + n;\n    };\n}\n\nfunction fib(int n) returns int {\n    if n <= 2 {\n        return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n\n// The code in worker blocks \"w1\" and \"w2\" are executed concurrency \n// when this function is invoked. The \"wait\" expressions waits for\n// the given workers to finish to retrieve their results.\npublic function doWorkers() {\n    worker w1 returns int {\n        int j = 10;\n        j -> w2;\n        int b;\n        b = <- w2;\n        return b * b;\n    }\n    worker w2 returns int {\n        int a;\n        a = <- w1;\n        a * 2 -> w1;\n        return a + 2;\n    }\n    record {int w1; int w2;} x = wait {w1, w2};\n    io:println(x);\n}\n\n// A function which takes in only an untainted string value.\npublic function mySecureFunction(@untainted string input) {\n    io:println(input);\n}\n```\n\n### Further Reading\n\n* [Ballerina by Example](https://ballerina.io/learn/by-example/)\n* [User Guide](https://ballerina.io/learn/installing-ballerina/)\n* [API Documentation](https://ballerina.io/learn/api-docs/ballerina/)\n* [Language Specification](https://ballerina.io/spec/)\n"
        },
        {
          "name": "bash.md",
          "type": "blob",
          "size": 17.341796875,
          "content": "---\nname: Bash\ncontributors:\n    - [\"Max Yankov\", \"https://github.com/golergka\"]\n    - [\"Darren Lin\", \"https://github.com/CogBear\"]\n    - [\"Alexandre Medeiros\", \"http://alemedeiros.sdf.org\"]\n    - [\"Denis Arh\", \"https://github.com/darh\"]\n    - [\"akirahirose\", \"https://twitter.com/akirahirose\"]\n    - [\"Anton Strömkvist\", \"http://lutic.org/\"]\n    - [\"Rahil Momin\", \"https://github.com/iamrahil\"]\n    - [\"Gregrory Kielian\", \"https://github.com/gskielian\"]\n    - [\"Etan Reisner\", \"https://github.com/deryni\"]\n    - [\"Jonathan Wang\", \"https://github.com/Jonathansw\"]\n    - [\"Leo Rudberg\", \"https://github.com/LOZORD\"]\n    - [\"Betsy Lorton\", \"https://github.com/schbetsy\"]\n    - [\"John Detter\", \"https://github.com/jdetter\"]\n    - [\"Harry Mumford-Turner\", \"https://github.com/harrymt\"]\n    - [\"Martin Nicholson\", \"https://github.com/mn113\"]\n    - [\"Mark Grimwood\", \"https://github.com/MarkGrimwood\"]\n    - [\"Emily Grace Seville\", \"https://github.com/EmilySeville7cfg\"]\nfilename: LearnBash.sh\ntranslators:\n    - [\"Dimitri Kokkonis\", \"https://github.com/kokkonisd\"]\n---\n\nBash is a name of the unix shell, which was also distributed as the shell\nfor the GNU operating system and as the default shell on most Linux distros.\nNearly all examples below can be a part of a shell script\nor executed directly in the shell.\n\n[Read more here.](https://www.gnu.org/software/bash/manual/bashref.html)\n\n```bash\n#!/usr/bin/env bash\n# First line of the script is the shebang which tells the system how to execute\n# the script: https://en.wikipedia.org/wiki/Shebang_(Unix)\n# As you already figured, comments start with #. Shebang is also a comment.\n\n# Simple hello world example:\necho \"Hello world!\" # => Hello world!\n\n# Each command starts on a new line, or after a semicolon:\necho \"This is the first command\"; echo \"This is the second command\"\n# => This is the first command\n# => This is the second command\n\n# Declaring a variable looks like this:\nvariable=\"Some string\"\n\n# But not like this:\nvariable = \"Some string\" # => returns error \"variable: command not found\"\n# Bash will decide that `variable` is a command it must execute and give an error\n# because it can't be found.\n\n# Nor like this:\nvariable= \"Some string\" # => returns error: \"Some string: command not found\"\n# Bash will decide that \"Some string\" is a command it must execute and give an\n# error because it can't be found. In this case the \"variable=\" part is seen\n# as a variable assignment valid only for the scope of the \"Some string\"\n# command.\n\n# Using the variable:\necho \"$variable\" # => Some string\necho '$variable' # => $variable\n# When you use a variable itself — assign it, export it, or else — you write\n# its name without $. If you want to use the variable's value, you should use $.\n# Note that ' (single quote) won't expand variables!\n# You can write variables without surrounding double quotes but it's not\n# recommended due to how Bash handles variables with spaces in them.\n\n# Parameter expansion ${...}:\necho \"${variable}\" # => Some string\n# This is a simple usage of parameter expansion such as two examples above.\n# Parameter expansion gets a value from a variable.\n# It \"expands\" or prints the value.\n# During the expansion time the value or parameter can be modified.\n# Below are other modifications that add onto this expansion.\n\n# String substitution in variables:\necho \"${variable/Some/A}\" # => A string\n# This will substitute the first occurrence of \"Some\" with \"A\".\n\n# Substring from a variable:\nlength=7\necho \"${variable:0:length}\" # => Some st\n# This will return only the first 7 characters of the value\necho \"${variable: -5}\" # => tring\n# This will return the last 5 characters (note the space before -5).\n# The space before minus is mandatory here.\n\n# String length:\necho \"${#variable}\" # => 11\n\n# Indirect expansion:\nother_variable=\"variable\"\necho ${!other_variable} # => Some string\n# This will expand the value of `other_variable`.\n\n# The default value for variable:\necho \"${foo:-\"DefaultValueIfFooIsMissingOrEmpty\"}\"\n# => DefaultValueIfFooIsMissingOrEmpty\n# This works for null (foo=) and empty string (foo=\"\"); zero (foo=0) returns 0.\n# Note that it only returns default value and doesn't change variable value.\n\n# Declare an array with 6 elements:\narray=(one two three four five six)\n# Print the first element:\necho \"${array[0]}\" # => \"one\"\n# Print all elements:\necho \"${array[@]}\" # => \"one two three four five six\"\n# Print the number of elements:\necho \"${#array[@]}\" # => \"6\"\n# Print the number of characters in third element\necho \"${#array[2]}\" # => \"5\"\n# Print 2 elements starting from fourth:\necho \"${array[@]:3:2}\" # => \"four five\"\n# Print all elements each of them on new line.\nfor item in \"${array[@]}\"; do\n    echo \"$item\"\ndone\n\n# Built-in variables:\n# There are some useful built-in variables, like:\necho \"Last program's return value: $?\"\necho \"Script's PID: $$\"\necho \"Number of arguments passed to script: $#\"\necho \"All arguments passed to script: $@\"\necho \"Script's arguments separated into different variables: $1 $2...\"\n\n# Brace Expansion {...}\n# used to generate arbitrary strings:\necho {1..10} # => 1 2 3 4 5 6 7 8 9 10\necho {a..z} # => a b c d e f g h i j k l m n o p q r s t u v w x y z\n# This will output the range from the start value to the end value.\n# Note that you can't use variables here:\nfrom=1\nto=10\necho {$from..$to} # => {$from..$to}\n\n# Now that we know how to echo and use variables,\n# let's learn some of the other basics of Bash!\n\n# Our current directory is available through the command `pwd`.\n# `pwd` stands for \"print working directory\".\n# We can also use the built-in variable `$PWD`.\n# Observe that the following are equivalent:\necho \"I'm in $(pwd)\" # execs `pwd` and interpolates output\necho \"I'm in $PWD\" # interpolates the variable\n\n# If you get too much output in your terminal, or from a script, the command\n# `clear` clears your screen:\nclear\n# Ctrl-L also works for clearing output.\n\n# Reading a value from input:\necho \"What's your name?\"\nread name\n# Note that we didn't need to declare a new variable.\necho \"Hello, $name!\"\n\n# We have the usual if structure.\n# Condition is true if the value of $name is not equal to the current user's login username:\nif [[ \"$name\" != \"$USER\" ]]; then\n    echo \"Your name isn't your username\"\nelse\n    echo \"Your name is your username\"\nfi\n\n# To use && and || with if statements, you need multiple pairs of square brackets:\nread age\nif [[ \"$name\" == \"Steve\" ]] && [[ \"$age\" -eq 15 ]]; then\n    echo \"This will run if $name is Steve AND $age is 15.\"\nfi\n\nif [[ \"$name\" == \"Daniya\" ]] || [[ \"$name\" == \"Zach\" ]]; then\n    echo \"This will run if $name is Daniya OR Zach.\"\nfi\n# There are other comparison operators for numbers listed below:\n# -ne - not equal\n# -lt - less than\n# -gt - greater than\n# -le - less than or equal to\n# -ge - greater than or equal to\n\n# There is also the `=~` operator, which tests a string against the Regex pattern:\nemail=me@example.com\nif [[ \"$email\" =~ [a-z]+@[a-z]{2,}\\.(com|net|org) ]]\nthen\n    echo \"Valid email!\"\nfi\n\n# There is also conditional execution\necho \"Always executed\" || echo \"Only executed if first command fails\"\n# => Always executed\necho \"Always executed\" && echo \"Only executed if first command does NOT fail\"\n# => Always executed\n# => Only executed if first command does NOT fail\n\n# A single ampersand & after a command runs it in the background. A background command's\n# output is printed to the terminal, but it cannot read from the input.\nsleep 30 &\n# List background jobs\njobs # => [1]+  Running                 sleep 30 &\n# Bring the background job to the foreground\nfg\n# Ctrl-C to kill the process, or Ctrl-Z to pause it\n# Resume a background process after it has been paused with Ctrl-Z\nbg\n# Kill job number 2\nkill %2\n# %1, %2, etc. can be used for fg and bg as well\n\n# Redefine command `ping` as alias to send only 5 packets\nalias ping='ping -c 5'\n# Escape the alias and use command with this name instead\n\\ping 192.168.1.1\n# Print all aliases\nalias -p\n\n# Expressions are denoted with the following format:\necho $(( 10 + 5 )) # => 15\n\n# Unlike other programming languages, bash is a shell so it works in the context\n# of a current directory. You can list files and directories in the current\n# directory with the ls command:\nls # Lists the files and subdirectories contained in the current directory\n\n# This command has options that control its execution:\nls -l # Lists every file and directory on a separate line\nls -t # Sorts the directory contents by last-modified date (descending)\nls -R # Recursively `ls` this directory and all of its subdirectories\n\n# Results (stdout) of the previous command can be passed as input (stdin) to the next command\n# using a pipe |. Commands chained in this way are called a \"pipeline\", and are run concurrently.\n# The `grep` command filters the input with provided patterns.\n# That's how we can list .txt files in the current directory:\nls -l | grep \"\\.txt\"\n\n# Use `cat` to print files to stdout:\ncat file.txt\n\n# We can also read the file using `cat`:\nContents=$(cat file.txt)\n# \"\\n\" prints a new line character\n# \"-e\" to interpret the newline escape characters as escape characters\necho -e \"START OF FILE\\n$Contents\\nEND OF FILE\"\n# => START OF FILE\n# => [contents of file.txt]\n# => END OF FILE\n\n# Use `cp` to copy files or directories from one place to another.\n# `cp` creates NEW versions of the sources,\n# so editing the copy won't affect the original (and vice versa).\n# Note that it will overwrite the destination if it already exists.\ncp srcFile.txt clone.txt\ncp -r srcDirectory/ dst/ # recursively copy\n\n# Look into `scp` or `sftp` if you plan on exchanging files between computers.\n# `scp` behaves very similarly to `cp`.\n# `sftp` is more interactive.\n\n# Use `mv` to move files or directories from one place to another.\n# `mv` is similar to `cp`, but it deletes the source.\n# `mv` is also useful for renaming files!\nmv s0urc3.txt dst.txt # sorry, l33t hackers...\n\n# Since bash works in the context of a current directory, you might want to\n# run your command in some other directory. We have cd for changing location:\ncd ~    # change to home directory\ncd      # also goes to home directory\ncd ..   # go up one directory\n        # (^^say, from /home/username/Downloads to /home/username)\ncd /home/username/Documents   # change to specified directory\ncd ~/Documents/..    # now in home directory (if ~/Documents exists)\ncd -    # change to last directory\n# => /home/username/Documents\n\n# Use subshells to work across directories\n(echo \"First, I'm here: $PWD\") && (cd someDir; echo \"Then, I'm here: $PWD\")\npwd # still in first directory\n\n# Use `mkdir` to create new directories.\nmkdir myNewDir\n# The `-p` flag causes new intermediate directories to be created as necessary.\nmkdir -p myNewDir/with/intermediate/directories\n# if the intermediate directories didn't already exist, running the above\n# command without the `-p` flag would return an error\n\n# You can redirect command input and output (stdin, stdout, and stderr)\n# using \"redirection operators\". Unlike a pipe, which passes output to a command,\n# a redirection operator has a command's input come from a file or stream, or\n# sends its output to a file or stream.\n\n# Read from stdin until ^EOF$ and overwrite hello.py with the lines\n# between \"EOF\" (which are called a \"here document\"):\ncat > hello.py << EOF\n#!/usr/bin/env python\nfrom __future__ import print_function\nimport sys\nprint(\"#stdout\", file=sys.stdout)\nprint(\"#stderr\", file=sys.stderr)\nfor line in sys.stdin:\n    print(line, file=sys.stdout)\nEOF\n# Variables will be expanded if the first \"EOF\" is not quoted\n\n# Run the hello.py Python script with various stdin, stdout, and\n# stderr redirections:\npython hello.py < \"input.in\" # pass input.in as input to the script\n\npython hello.py > \"output.out\" # redirect output from the script to output.out\n\npython hello.py 2> \"error.err\" # redirect error output to error.err\n\npython hello.py > \"output-and-error.log\" 2>&1\n# redirect both output and errors to output-and-error.log\n# &1 means file descriptor 1 (stdout), so 2>&1 redirects stderr (2) to the current\n# destination of stdout (1), which has been redirected to output-and-error.log.\n\npython hello.py > /dev/null 2>&1\n# redirect all output and errors to the black hole, /dev/null, i.e., no output\n\n# The output error will overwrite the file if it exists,\n# if you want to append instead, use \">>\":\npython hello.py >> \"output.out\" 2>> \"error.err\"\n\n# Overwrite output.out, append to error.err, and count lines:\ninfo bash 'Basic Shell Features' 'Redirections' > output.out 2>> error.err\nwc -l output.out error.err\n\n# Run a command and print its file descriptor (e.g. /dev/fd/123)\n# see: man fd\necho <(echo \"#helloworld\")\n\n# Overwrite output.out with \"#helloworld\":\ncat > output.out <(echo \"#helloworld\")\necho \"#helloworld\" > output.out\necho \"#helloworld\" | cat > output.out\necho \"#helloworld\" | tee output.out >/dev/null\n\n# Cleanup temporary files verbosely (add '-i' for interactive)\n# WARNING: `rm` commands cannot be undone\nrm -v output.out error.err output-and-error.log\nrm -r tempDir/ # recursively delete\n# You can install the `trash-cli` Python package to have `trash`\n# which puts files in the system trash and doesn't delete them directly\n# see https://pypi.org/project/trash-cli/ if you want to be careful\n\n# Commands can be substituted within other commands using $( ):\n# The following command displays the number of files and directories in the\n# current directory.\necho \"There are $(ls | wc -l) items here.\"\n\n# The same can be done using backticks `` but they can't be nested -\n# the preferred way is to use $( ).\necho \"There are `ls | wc -l` items here.\"\n\n# Bash uses a `case` statement that works similarly to switch in Java and C++:\ncase \"$Variable\" in\n    # List patterns for the conditions you want to meet\n    0) echo \"There is a zero.\";;\n    1) echo \"There is a one.\";;\n    *) echo \"It is not null.\";;  # match everything\nesac\n\n# `for` loops iterate for as many arguments given:\n# The contents of $Variable is printed three times.\nfor Variable in {1..3}\ndo\n    echo \"$Variable\"\ndone\n# => 1\n# => 2\n# => 3\n\n\n# Or write it the \"traditional for loop\" way:\nfor ((a=1; a <= 3; a++))\ndo\n    echo $a\ndone\n# => 1\n# => 2\n# => 3\n\n# They can also be used to act on files..\n# This will run the command `cat` on file1 and file2\nfor Variable in file1 file2\ndo\n    cat \"$Variable\"\ndone\n\n# ..or the output from a command\n# This will `cat` the output from `ls`.\nfor Output in $(ls)\ndo\n    cat \"$Output\"\ndone\n\n# Bash can also accept patterns, like this to `cat`\n# all the Markdown files in current directory\nfor Output in ./*.markdown\ndo\n    cat \"$Output\"\ndone\n\n# while loop:\nwhile [ true ]\ndo\n    echo \"loop body here...\"\n    break\ndone\n# => loop body here...\n\n# You can also define functions\n# Definition:\nfunction foo ()\n{\n    echo \"Arguments work just like script arguments: $@\"\n    echo \"And: $1 $2...\"\n    echo \"This is a function\"\n    returnValue=0    # Variable values can be returned\n    return $returnValue\n}\n# Call the function `foo` with two arguments, arg1 and arg2:\nfoo arg1 arg2\n# => Arguments work just like script arguments: arg1 arg2\n# => And: arg1 arg2...\n# => This is a function\n# Return values can be obtained with $?\nresultValue=$?\n# More than 9 arguments are also possible by using braces, e.g. ${10}, ${11}, ...\n\n# or simply\nbar ()\n{\n    echo \"Another way to declare functions!\"\n    return 0\n}\n# Call the function `bar` with no arguments:\nbar # => Another way to declare functions!\n\n# Calling your function\nfoo \"My name is\" $Name\n\n# There are a lot of useful commands you should learn:\n# prints last 10 lines of file.txt\ntail -n 10 file.txt\n\n# prints first 10 lines of file.txt\nhead -n 10 file.txt\n\n# print file.txt's lines in sorted order\nsort file.txt\n\n# report or omit repeated lines, with -d it reports them\nuniq -d file.txt\n\n# prints only the first column before the ',' character\ncut -d ',' -f 1 file.txt\n\n# replaces every occurrence of 'okay' with 'great' in file.txt\n# (regex compatible)\nsed -i 's/okay/great/g' file.txt\n# be aware that this -i flag means that file.txt will be changed\n# -i or --in-place erase the input file (use --in-place=.backup to keep a back-up)\n\n# print to stdout all lines of file.txt which match some regex\n# The example prints lines which begin with \"foo\" and end in \"bar\"\ngrep \"^foo.*bar$\" file.txt\n\n# pass the option \"-c\" to instead print the number of lines matching the regex\ngrep -c \"^foo.*bar$\" file.txt\n\n# Other useful options are:\ngrep -r \"^foo.*bar$\" someDir/ # recursively `grep`\ngrep -n \"^foo.*bar$\" file.txt # give line numbers\ngrep -rI \"^foo.*bar$\" someDir/ # recursively `grep`, but ignore binary files\n\n# perform the same initial search, but filter out the lines containing \"baz\"\ngrep \"^foo.*bar$\" file.txt | grep -v \"baz\"\n\n# if you literally want to search for the string,\n# and not the regex, use `fgrep` (or `grep -F`)\nfgrep \"foobar\" file.txt\n\n# The `trap` command allows you to execute a command whenever your script\n# receives a signal. Here, `trap` will execute `rm` if it receives any of the\n# three listed signals.\ntrap \"rm $TEMP_FILE; exit\" SIGHUP SIGINT SIGTERM\n\n# `sudo` is used to perform commands as the superuser\n# usually it will ask interactively the password of superuser\nNAME1=$(whoami)\nNAME2=$(sudo whoami)\necho \"Was $NAME1, then became more powerful $NAME2\"\n\n# Read Bash shell built-ins documentation with the bash `help` built-in:\nhelp\nhelp help\nhelp for\nhelp return\nhelp source\nhelp .\n\n# Read Bash manpage documentation with `man`\napropos bash\nman 1 bash\nman bash\n\n# Read info documentation with `info` (`?` for help)\napropos info | grep '^info.*('\nman info\ninfo info\ninfo 5 info\n\n# Read bash info documentation:\ninfo bash\ninfo bash 'Bash Features'\ninfo bash 6\ninfo --apropos bash\n```\n"
        },
        {
          "name": "bc.md",
          "type": "blob",
          "size": 2.4833984375,
          "content": "---\nname: bc\ncontributors:\n    - [\"Btup\"]\nfilename: learnbc.bc\n---\n```bc\n/*This is a multi-\nline comment.*/\n# This is also a (one-line) comment! (in GNU bc).\n\n    /*1. Variables and control structures*/\nnum = 45 /*All variables save only doubles, and you cannot save\n    string constants directly.*/\nnum = 45; /*You can choose to add a semicolon after\n    every statement. This is optional.*/\n/*Blocks are denoted using the {} operators(similar to C):*/\nwhile(num < 50) {\n    num += 1 /*equivalent to num=num+1.\n    a = a op b is equivalent to a op= b.*/\n}\n/*And there are ++(increment) and --(decrement) operators.*/\n/*There are 3 special variables:\nscale: defines the scale of the double numbers.\nibase: defines the base of input.\nobase: defines the base of output.*/\n/*If clauses:*/\nhour = read() /*Input a number*/\n\nif(hour < 12) { /*Operators are exactly like C.*/\n    print \"Good morning\\n\" /*\"print\" outputs strings or variables\n    separated by commas.*/\n} else if(hour == 12) {\n    print \"Hello\\n\"\n    /*Escaping sequences start with a \\ in a string.\n    In order to make the escaping sequences clearer, here\n    is a simplified list of them that will work in bc:\n    \\b: backspace\n    \\c: carriage return\n    \\n: newline\n    \\t: tab\n    \\\\: backslash*/\n} else {\n    print \"Good afternoon\\n\"\n}\n\n/*Like C, only 0 is falsy.*/\nnum = 0\nif(!num) {print \"false\\n\"}\n\n/*Unlike C, bc does not have the ?: operators. For example,\n this block of code will cause an error:\na = (num) ? 1 : 0\nHowever, you can simulate one:*/\na = (num) && (1) || (0) /*&& is and, || is or*/\n\n/*For loops*/\nnum = 0\nfor(i = 1; i <= 100; i++) {/*Similar to the C for loop.*/\n    num += i\n}\n\n    /*2.Functions and Arrays*/\ndefine fac(n) { /*define a function using define.*/\n    if(n == 1 || n == 0) {\n        return 1 /*return a value*/\n    }\n    return n * fac(n - 1) /*recursion is possible*/\n}\n\n/*Closures and anonymous functions are impossible.*/\n\nnum = fac(4) /*24*/\n\n/*This is an example of local variables:*/\ndefine x(n) {\n    auto x\n    x = 1\n    return n + x\n}\nx(3) /*4*/\nprint x /*It turns out that x is not accessible out of the function.*/\n/*Arrays are equivalent to the C array.*/\nfor(i = 0; i <= 3; i++) {\n    a[i] = 1\n}\n/*Access it like this:*/\nprint a[0], \" \", a[1], \" \", a[2], \" \", a[3], \"\\n\"\nquit /*Add this line of code to make sure\nthat your program exits. This line of code is optional.*/\n```\n\nEnjoy this simple calculator! (Or this programming language, to be exact.)\n\nThis whole program is written in GNU bc. To run it, use ```bc learnbc.bc```.\n"
        },
        {
          "name": "be",
          "type": "tree",
          "content": null
        },
        {
          "name": "bf.md",
          "type": "blob",
          "size": 3.6435546875,
          "content": "---\nname: BF\nwhere_x_eq_name: brainfuck\nfilename: bf.bf\ncontributors:\n    - [\"Prajit Ramachandran\", \"http://prajitr.github.io/\"]\n    - [\"Mathias Bynens\", \"http://mathiasbynens.be/\"]\n    - [\"rilysh\", \"https://github.com/rilysh\"]\n---\n\nBrainfuck (not capitalized except at the start of a sentence) is an extremely\nminimal Turing-complete programming language with just 8 commands.\n\nYou can try brainfuck on your browser with [brainfuck-online](https://copy.sh/brainfuck/).\n\n```bf\nAny character not \"><+-.,[]\" (excluding quotation marks) is ignored.\n\nBrainfuck is represented by an array with 30,000 cells initialized to zero\nand a data pointer pointing at the current cell.\n\nThere are eight commands:\n+ : Increments the value at the current cell by one.\n- : Decrements the value at the current cell by one.\n> : Moves the data pointer to the next cell (cell on the right).\n< : Moves the data pointer to the previous cell (cell on the left).\n. : Prints the ASCII value at the current cell (i.e. 65 = 'A').\n, : Reads a single input character into the current cell.\n[ : If the value at the current cell is zero, skips to the corresponding ] .\n    Otherwise, move to the next instruction.\n] : If the value at the current cell is zero, move to the next instruction.\n    Otherwise, move backwards in the instructions to the corresponding [ .\n\n[ and ] form a while loop. Obviously, they must be balanced.\n\nLet's look at some basic brainfuck programs.\n\n++++++ [ > ++++++++++ < - ] > +++++ .\n\nThis program prints out the letter 'A'. First, it increments cell #1 to 6.\nCell #1 will be used for looping. Then, it enters the loop ([) and moves\nto cell #2. It increments cell #2 10 times, moves back to cell #1, and\ndecrements cell #1. This loop happens 6 times (it takes 6 decrements for\ncell #1 to reach 0, at which point it skips to the corresponding ] and\ncontinues on).\n\nAt this point, we're on cell #1, which has a value of 0, while cell #2 has a\nvalue of 60. We move on cell #2, increment 5 times, for a value of 65, and then\nprint cell #2's value. 65 is 'A' in ASCII, so 'A' is printed to the terminal.\n\n\n, [ > + < - ] > .\n\nThis program reads a character from the user input and copies the character into\ncell #1. Then we start a loop. Move to cell #2, increment the value at cell #2,\nmove back to cell #1, and decrement the value at cell #1. This continues on\nuntil cell #1 is 0, and cell #2 holds cell #1's old value. Because we're on\ncell #1 at the end of the loop, move to cell #2, and then print out the value\nin ASCII.\n\nAlso keep in mind that the spaces are purely for readability purposes. You\ncould just as easily write it as:\n\n,[>+<-]>.\n\nTry and figure out what this program does:\n\n,>,< [ > [ >+ >+ << -] >> [- << + >>] <<< -] >>\n\nThis program takes two numbers for input, and multiplies them.\n\nThe gist is it first reads in two inputs. Then it starts the outer loop,\nconditioned on cell #1. Then it moves to cell #2, and starts the inner\nloop conditioned on cell #2, incrementing cell #3. However, there comes a\nproblem: At the end of the inner loop, cell #2 is zero. In that case,\ninner loop won't work anymore since next time. To solve this problem,\nwe also increment cell #4, and then recopy cell #4 into cell #2.\nThen cell #3 is the result.\n```\n\nAnd that's brainfuck. Not that hard, eh? For fun, you can write your own\nbrainfuck programs, or you can write a brainfuck interpreter in another\nlanguage. The interpreter is fairly simple to implement, but if you're a\nmasochist, try writing a brainfuck interpreter… in brainfuck.\n\n## Further Reading\n * [esolang-wiki](https://esolangs.org/wiki/Brainfuck)\n * [learn brainfuck](http://cydathria.com/bf/brainfuck.html)\n * [other resources](http://www.muppetlabs.com/~breadbox/bf/)\n"
        },
        {
          "name": "bg",
          "type": "tree",
          "content": null
        },
        {
          "name": "bqn.md",
          "type": "blob",
          "size": 10.9736328125,
          "content": "---\nname: BQN\nfilename: learnbqn.bqn\ncontributors:\n    - [\"Raghu Ranganathan\", \"https://github.com/razetime\"]\n---\n\nBQN is a modern array language (similar to APL) that aims to eliminate burdensome aspects of the APL tradition.\n\nIt is recommended to try these code examples out in a REPL. The [online REPL](https://mlochbaum.github.io/BQN/try.html) is\nrecommended for quick start, since it comes with keyboard and easy to access help. You can try building\n[CBQN](https://github.com/dzaima/CBQN) for a local install, but it will need keyboard setup.\n\n```bqn\n# This is a comment.\n# The characters ',' and `⋄` are statement separators.\n\n##################\n# Main datatypes #\n##################\n\n# Numbers\n1,2,3,4\n¯1,¯2,¯3  # Negative numbers are written with a high minus\nπ,∞,¯π,¯∞ # Pi and Infinity are defined constants\n1_234_456 # You can add underscores in between numbers\n          # This does not change their value\n1.3E4     # Scientific notation is supported\n\n# Characters\n'a','⥊'\n'\n'         # Yes, you can put *any* character in a character literal\n@         # Null character ('\\0' in C)\n# Arrays\n1‿2‿3       # Stranding, good for simple lists\n⟨1,2,3⟩     # General list notation\n⟨1‿2,2‿3⟩   # Both can be mixed\n[1‿2,2‿3]   # Array notation\n            # An array is multidimensional, as opposed to containing sublists.\n            # It must be rectangular in shape (a grid structure rather than a tree structure)\n[1‿2‿3,4‿5] # This is hence invalid\n            # May be familiar coming from Numpy, MATLAB and similar languages.\n\"asdf\"      # Character array (String)\n\"newline\nseparated\"  # Allows newlines\n\"quo\"\"tes\"  # Escape a double quote by typing it twice\n# Functions\n1{𝕨+𝕩}3       # All functions are infix\n              # 𝕨 is left argument, 𝕩 is right argument\n{-𝕩}5         # 𝕨 can be omitted\n1+3           # Same as the above\n{𝕊𝕩}          # 𝕊 is a recursive call\n              # (this function will loop forever)\n{𝕨 𝕊 𝕩: 𝕨+𝕩}  # Functions can have headers (too many cases to discuss here)\n              # Headers can define arity\n{𝕊 a‿b: a}1‿2 # and also do basic pattern matching\n              # (returns 1)\n\n# Modifiers (higher order functions)\n{𝕗,𝔽,𝕘,𝔾}      # 𝔽 and 𝔾 are the operands as callable functions\n               # 𝕗 and 𝕘 are the operands as values\n{𝔽𝕩}           # 1-modifiers use 𝔽/𝕗 ONLY\n˜,˘,¨,⁼,⌜      # primitive 1-modifiers are superscripts\n{𝕨𝔽𝔾𝕩}         # 2-modifiers MUST use both 𝔽/𝕗 and 𝔾/𝕘 in body or header\n⊸,∘,○,⟜        # primitive 2-modifiers all have circles\n+{⟨𝕗⟩}         # returns ⟨ + ⟩\n1-{𝔽 𝕨 𝔾 𝕩 }×2 # returns ¯2 (operators are *also* infix)\n               # (same as 1 -○× 2)\n\n# Trains (Special form of function composition)\n(+´÷≠) # Average (but how?)\n# The above train is an F G H train, where\n# (F G H) 𝕩 → (F 𝕩) G (H 𝕩)\n# F ← +´, G ← ÷, H ← ≠\n# In explicit form, this is\n{(+´𝕩)÷≠𝕩}\n# The second pattern is (f g) 𝕩 → f g 𝕩.\n# longer trains are complex arrangements of these patterns, involving constants and Nothing (·).\n# Read more about trains at https://mlochbaum.github.io/BQN/doc/train.html\n\n# Evaluation order:\n#  BQN evaluates functions right to left with no precedence rules governing *functions*. Functions are what\n#  one would call operators in a mainstream language.\n1÷2+3       # 1÷(2+3)   = 0.2\n(1÷2)+3     # ((1÷2)+3) = 1.5\n\n# Modifiers:\n#  Modifiers are higher order functions, and bind tighter than functions. Modifiers execute left to right.\n#  Modifiers can take non-function arguments e.g. Constant (`˙`)\n+\n1+˜2+○-∘×3  # 1(+˜)(2((+○-)∘×)3)\n\n# Variables\n#  Since the case of a variable matters to determine what it means, BQN variables are *case insensitive*\n#  The case that a variable is written in can change the way it is interpreted by BQN.\n#  Eg. `F` refers to a value as a callable function, whereas `f` refers to the same variable as just a value.\n#  Variable assignment is done with `←`. Variables have naming conventions based on their value:\nsubject ← 1‿2‿3        # Arrays, single values, namespaces come under this\n                       # name must start with with a lowercase letter\nFunction      ← {𝕨+𝕩}  # Primitive and user defined functions come under this, both monadic and dyadic\n                       # Starts with an uppercase letter\n_1modifier    ← {𝕨𝔽𝕩}  # Starts with an underscore\n_2modifier_   ← {𝔽𝕨𝔾𝕩} # Starts and ends with an underscore\n# Variable modification is done with `↩`. An existing name cannot be reassigned with `←`.\nFunc ↩ {\"Hello\"∾𝕩}\narray_or_atom +↩ 2    # You can use a dyadic function for modification\n                      #≡ 3‿4‿5\narray_or_atom -↩      # Or a monadic function.\n                      #≡ ¯3‿¯4‿¯5\n#  Due to all functions being infix, you can use your own functions for modification as well:\narray_or_atom {2⋆𝕩}↩  #≡ ⟨ 0.125, 0.0625, 0.03125 ⟩\n\n##################\n# BQN Primitives #\n##################\n# All of BQN's base primitives are a single character long. Refer to https://mlochbaum.github.io/BQN/help/index.html for\n# examples.\n# Here we will look at a few primitives from each section. You will want to consult the docs for detailed explanations.\n\n# Primitive Functions\n#  All BQN functions are variadic, and can take one or two arguments. The base functions have both monadic and dyadic overloads.\n#  Usually the two overloads for a function are related.\n\n## Arithmetic Functions\n+, -, ×, ÷ # Add, Subtract, Signum/Multiply, Reciprocal/Divide , '*' does NOT do multiplication\n           # ⌊∘÷ does floor division\n√, ⋆       # Square root/Nth root, e^x/Power\n#   All Arithmetic functions vectorize:\n1 + 2‿3‿4     #≡ 3‿4‿5\n1‿2‿3 + 2‿3‿4 #≡ 3‿5‿7\n#   Character arithmetic(+ and - only):\n\"abc\"+3       #≡ \"def\"\n'a'-'d'       #≡ ¯3\n\n## Logic Functions\n∧, ∨, ¬       # For Booleans, return 1 or 0\n≤, <, >, ≥, = # Vectorizing comparisons\n≡, ≢          # Nonvectorizing comparisons\n\n## Array manipulation Functions\n↕             # Make a range\n∾, ≍, ⋈       # Joining arrays together\na←1‿2‿3,b←4‿5 # Let us take a and b.\na∾b           #≡ 1‿2‿3‿4‿5\na≍b           #  Same as previous, since a and b are not multidimensional\n              #  Adds an extra dimension, similar to a ⋈ for multidimensional arrays.\na⋈b           #≡ ⟨1‿2‿3, 4‿5⟩\n⊑, ⊏          # Indexing\n1⊑1‿2‿3       #≡ 2 (BQN is 0-indexed)\n1‿2⊏1‿2‿3     #≡ 2‿3 (for multiple indices)\n↑, ↓          # Getting a prefix, suffix of an array.\n              # together they can be used for slicing\n⥊             # Reshape/repeat items to create a new array\n\n# Primitive 1-Modifiers\n## Looping combinators\n¨, ˘, ⌜ # Mapping/Zipping\n´, ˝    # Fold from right\n`       # Scan from left\n\n## General combinators\n˜       # duplicate argument/swap args - Very useful!\n˙       # Create constant function\n1 -˜ 2  #≡ 2 - 1\n+˜ 2    #≡ 2 + 2\n\n# Primitive 2-modifiers\n## Control Flow\n◶       # Choose from a list of funcs\n⍟       # Repeat n times\n\n## General Combinators\n⊸, ⟜    # hook, hookf\n∘, ○    # simple function composition\n\n##########\n# Blocks #\n##########\n# Code delimited by {}\n# Lexically scoped\n# For more info: https://mlochbaum.github.io/BQN/doc/block.html\n# Can have headers, which are ways to explicitly define what a block should be.\n# A block without headers is automatically inferred from its special variables (𝕨, 𝕩, ...).\n\n# Function blocks\n# Implicit variables(Capitals are functions):\n#  - 𝕨, 𝕎 left argument\n#  - 𝕩, 𝕏 right argument\n#  - 𝕤, 𝕊 represent the block itself\n#   Optional: one or more headers that trigger based on\n#   - pattern match (':') o\n#   - condition ('?') (similar to if-then-else)\n\n{ # A factorial using headers:\n  𝕊 0: 1;\n  𝕊 𝕩: 𝕩×𝕊 𝕩-1\n}\n{ # Factorial with predicates\n  𝕩<2 ? 1; # Similar to an if-else pattern.\n  𝕩×𝕊 𝕩-1\n}\n\n# Modifier blocks\n# create 1-modifiers and 2-modifiers, which have separate types\n# Implicit variables(Capitals are functions):\n#  - has 𝕨 and 𝕩 if needed\n#  - 𝕗, 𝔽 left operand\n#  - 𝕘, 𝔾 right operand (only in 2-modifiers)\n#  - 𝕣 represents the block itself* (requires underscores as per convention)\n# Same header rules as functions.\n{ 𝕨=0 ? 𝔽 𝕩; 𝔾 𝕩 } # execute 𝔽 or 𝔾 based on whether left argument is 0.\n\n# Namespace blocks\n# Create immutable namespaces with fields\n# Require exports (`⇐`) for accessible fields.\n# Use '.' for field access\nn←{\n  A←+\n  b⇐4\n}\nn.b #≡ 4\nn.a # ERROR\n\n# Immediate Blocks\n#  No arguments taken\n#  Run the code inside and return the last statement\n#  Often responsible for strange errors.\n#  Can be mistaken for other blocks easily\n#  Good for avoiding scoping issues\n{\n  1‿2‿3\n}\n{+} # Trick for returning a function as a value\n####################\n# Basic constructs #\n####################\n# Functional programming\n# `¨` is used for mapping, as discussed before:\n{𝕩∾2}¨1‿2‿3 #≡ ⟨1‿2,2‿2,3‿2⟩\n# ⋈¨ is a plain zip, which produces pairs.\n# `¨` acts as a zipWith when used with two arguments:\n1‿2‿3 {⟨𝕩+2,2⥊𝕨⟩} 4‿5‿6 #≡ ⟨⟨6,1‿1⟩,⟨7,2‿2⟩,⟨8,3‿3⟩⟩\n# `/` is replicate, which serves several purposes *including* filtering.\n# elements in 𝕩 are repeated by the corresponding number in 𝕨.\n1‿2‿3‿0/4‿5‿6‿7 #≡ 4‿5‿5‿6‿6‿6\n# a simple filter idiom is F⊸/:\n{2|𝕩}⊸/67‿42‿83 # keep the odd elements\n                #≡ 67‿83\n\n# Conditionals\n# There are two main ways to define a conditional.\n## Predicate headers\n{\n  𝕩 > 2:  \"greater than 2\";\n  𝕩 < 2: \"lesser than 2\";\n  \"equal to 2\"\n}\n\n## Choose (function-based)\n#  - 2-modifier\n#  - 𝔾: list of functions that serve as bodies\n#  - 𝔽: condition function that specifies which function from 𝔾 to select\n#  The same conditional as above would be:\n{⊑/⟨𝕩>2, 𝕩<2, 𝕩=2⟩}◶⟨\n  {𝕊: \"greater than 2\"}\n  {𝕊: \"lesser than 2\"}\n  {𝕊: \"equal to 2\"}\n⟩\n\n## Some helpers for conditionals\nIf      ← {𝕏⍟𝕎@}´                 # Used as If ⟨Condition, Block⟩\nIfElse  ← {c‿T‿F: c◶F‿T@}         # Used as IfElse ⟨Condition, Block, ElseBlock⟩\n\n# Looping\n# The primary form of unbounded looping is recursion (performed with 𝕊).\n# BQN does not eliminate tail calls, but the while idiom can be used to work around this:\nWhile ← {𝕩{𝔽⍟𝔾∘𝔽_𝕣_𝔾∘𝔽⍟𝔾𝕩}𝕨@}´  # While 1‿{... to run forever\nDoWhile ← {𝕏@ ⋄ While 𝕨‿𝕩}´\n# A For loop can be done with ¨, functions need not be pure.\n```\n\n## Ready for more?\n\n- [Quickstart guide](https://mlochbaum.github.io/BQN/doc/quick.html)\n- [Full length, explained documentation](https://mlochbaum.github.io/BQN/doc/index.html)\n- [Short docs](https://mlochbaum.github.io/BQN/help/index.html)\n- [BQN community!](https://mlochbaum.github.io/BQN/community/index.html)\n"
        },
        {
          "name": "c++.md",
          "type": "blob",
          "size": 36.990234375,
          "content": "---\nname: C++\nfilename: learncpp.cpp\ncontributors:\n    - [\"Steven Basart\", \"https://github.com/xksteven\"]\n    - [\"Matt Kline\", \"https://github.com/mrkline\"]\n    - [\"Geoff Liu\", \"http://geoffliu.me\"]\n    - [\"Connor Waters\", \"https://github.com/connorwaters\"]\n    - [\"Ankush Goyal\", \"https://github.com/ankushg07\"]\n    - [\"Jatin Dhankhar\", \"https://github.com/jatindhankhar\"]\n---\n\nC++ is a systems programming language that,\n[according to its inventor Bjarne Stroustrup](https://channel9.msdn.com/Events/Lang-NEXT/Lang-NEXT-2014/Keynote),\nwas designed to\n\n- be a \"better C\"\n- support data abstraction\n- support object-oriented programming\n- support generic programming\n\nThough its syntax can be more difficult or complex than newer languages,\nit is widely used because it compiles to native instructions that can be\ndirectly run by the processor and offers tight control over hardware (like C)\nwhile offering high-level features such as generics, exceptions, and classes.\nThis combination of speed and functionality makes C++\none of the most widely-used programming languages.\n\n```c++\n//////////////////\n// Comparison to C\n//////////////////\n\n// C++ is almost a superset of C and shares its basic syntax for\n// variable declarations, primitive types, and functions.\n\n// Just like in C, your program's entry point is a function called\n// main with an integer return type.\n// This value serves as the program's exit status.\n// See https://en.wikipedia.org/wiki/Exit_status for more information.\nint main(int argc, char** argv)\n{\n    // Command line arguments are passed in by argc and argv in the same way\n    // they are in C.\n    // argc indicates the number of arguments,\n    // and argv is an array of C-style strings (char*)\n    // representing the arguments.\n    // The first argument is the name by which the program was called.\n    // argc and argv can be omitted if you do not care about arguments,\n    // giving the function signature of int main()\n\n    // An exit status of 0 indicates success.\n    return 0;\n}\n\n// However, C++ varies in some of the following ways:\n\n// In C++, character literals are chars, therefore the size is 1\nsizeof('c') == sizeof(char)\n\n// In C, character literals are ints, therefore the size is 4\nsizeof('c') == sizeof(int)\n\n\n// C++ has strict prototyping\nvoid func(); // function which accepts no arguments\nvoid func(void); // same as earlier\n\n// In C\nvoid func(); // function which may accept any number of arguments with unknown type\nvoid func(void); // function which accepts no arguments\n\n// Use nullptr instead of NULL in C++\nint* ip = nullptr;\n\n// Most C standard headers are available in C++.\n// C headers generally end with .h, while\n// C++ headers are prefixed with \"c\" and have no \".h\" suffix.\n\n// The C++ standard version:\n#include <cstdio>\n\n// The C standard version:\n#include <stdio.h>\n\nint main()\n{\n    printf(\"Hello, world!\\n\");\n    return 0;\n}\n\n///////////////////////\n// Function overloading\n///////////////////////\n\n// C++ supports function overloading\n// provided each function takes different parameters.\n\nvoid print(char const* myString)\n{\n    printf(\"String %s\\n\", myString);\n}\n\nvoid print(int myInt)\n{\n    printf(\"My int is %d\\n\", myInt);\n}\n\nint main()\n{\n    print(\"Hello\"); // Resolves to void print(const char*)\n    print(15); // Resolves to void print(int)\n}\n\n/////////////////////////////\n// Default function arguments\n/////////////////////////////\n\n// You can provide default arguments for a function\n// if they are not provided by the caller.\n\nvoid doSomethingWithInts(int a = 1, int b = 4)\n{\n    // Do something with the ints here\n}\n\nint main()\n{\n    doSomethingWithInts();      // a = 1,  b = 4\n    doSomethingWithInts(20);    // a = 20, b = 4\n    doSomethingWithInts(20, 5); // a = 20, b = 5\n}\n\n// Default arguments must be at the end of the arguments list.\n\nvoid invalidDeclaration(int a = 1, int b) // Error!\n{\n}\n\n\n/////////////\n// Namespaces\n/////////////\n\n// Namespaces provide separate scopes for variable, function,\n// and other declarations.\n// Namespaces can be nested.\n\nnamespace First {\n    namespace Nested {\n        void foo()\n        {\n            printf(\"This is First::Nested::foo\\n\");\n        }\n    } // end namespace Nested\n} // end namespace First\n\nnamespace Second {\n    void foo()\n    {\n        printf(\"This is Second::foo\\n\");\n    }\n    void bar()\n    {\n        printf(\"This is Second::bar\\n\");\n    }\n}\n\nvoid foo()\n{\n    printf(\"This is global foo\\n\");\n}\n\nint main()\n{\n    // Includes all symbols from namespace Second into the current scope. Note\n    // that while bar() works, simply using foo() no longer works, since it is\n    // now ambiguous whether we're calling the foo in namespace Second or the\n    // top level.\n    using namespace Second;\n\n    bar(); // prints \"This is Second::bar\"\n    Second::foo(); // prints \"This is Second::foo\"\n    First::Nested::foo(); // prints \"This is First::Nested::foo\"\n    ::foo(); // prints \"This is global foo\"\n}\n\n///////////////\n// Input/Output\n///////////////\n\n// C++ input and output uses streams\n// cin, cout, and cerr represent stdin, stdout, and stderr.\n// << is the insertion operator and >> is the extraction operator.\n\n#include <iostream> // Include for I/O streams\n\nint main()\n{\n    int myInt;\n\n    // Prints to stdout (or terminal/screen)\n    // std::cout referring the access to the std namespace\n    std::cout << \"Enter your favorite number:\\n\";\n    // Takes in input\n    std::cin >> myInt;\n\n    // cout can also be formatted\n    std::cout << \"Your favorite number is \" << myInt << '\\n';\n    // prints \"Your favorite number is <myInt>\"\n\n    std::cerr << \"Used for error messages\";\n\n    // flush string stream buffer with new line\n    std::cout << \"I flushed it away\" << std::endl;\n}\n\n//////////\n// Strings\n//////////\n\n// Strings in C++ are objects and have many member functions\n#include <string>\n\nstd::string myString = \"Hello\";\nstd::string myOtherString = \" World\";\n\n// + is used for concatenation.\nstd::cout << myString + myOtherString; // \"Hello World\"\n\nstd::cout << myString + \" You\"; // \"Hello You\"\n\n// C++ string length can be found from either string::length() or string::size()\ncout << myString.length() + myOtherString.size(); // Outputs 11 (= 5 + 6).\n\n// C++ strings are mutable.\nmyString.append(\" Dog\");\nstd::cout << myString; // \"Hello Dog\"\n\n// C++ can handle C-style strings with related functions using cstrings\n#include <cstring>\n\nchar myOldString[10] = \"Hello CPP\";\ncout << myOldString;\ncout << \"Length = \" << strlen(myOldString); // Length = 9\n\n/////////////\n// References\n/////////////\n\n// In addition to pointers like the ones in C,\n// C++ has _references_.\n// These are pointer types that cannot be reassigned once set\n// and cannot be null.\n// They also have the same syntax as the variable itself:\n// No * is needed for dereferencing and\n// & (address of) is not used for assignment.\n\nstd::string foo = \"I am foo\";\nstd::string bar = \"I am bar\";\n\nstd::string& fooRef = foo; // This creates a reference to foo.\nfooRef += \". Hi!\"; // Modifies foo through the reference\nstd::cout << fooRef; // Prints \"I am foo. Hi!\"\n\nstd::cout << &fooRef << '\\n'; // Prints the address of foo\n// Doesn't reassign \"fooRef\". This is the same as \"foo = bar\", and\n//   foo == \"I am bar\"\n// after this line.\nfooRef = bar;\nstd::cout << &fooRef << '\\n'; // Still prints the address of foo\nstd::cout << fooRef << '\\n';  // Prints \"I am bar\"\n\n// The address of fooRef remains the same, i.e. it is still referring to foo.\n\n\nconst std::string& barRef = bar; // Create a const reference to bar.\n// Like C, const values (and pointers and references) cannot be modified.\nbarRef += \". Hi!\"; // Error, const references cannot be modified.\n\n// Sidetrack: Before we talk more about references, we must introduce a concept\n// called a temporary object. Suppose we have the following code:\nstd::string tempObjectFun() { ... }\nstd::string retVal = tempObjectFun();\n\n// What happens in the second line is actually:\n//   - a string object is returned from tempObjectFun\n//   - a new string is constructed with the returned object as argument to the\n//     constructor\n//   - the returned object is destroyed\n// The returned object is called a temporary object. Temporary objects are\n// created whenever a function returns an object, and they are destroyed at the\n// end of the evaluation of the enclosing expression (Well, this is what the\n// standard says, but compilers are allowed to change this behavior. Look up\n// \"return value optimization\" if you're into this kind of details). So in this\n// code:\nfoo(bar(tempObjectFun()))\n\n// assuming foo and bar exist, the object returned from tempObjectFun is\n// passed to bar, and it is destroyed before foo is called.\n\n// Now back to references. The exception to the \"at the end of the enclosing\n// expression\" rule is if a temporary object is bound to a const reference, in\n// which case its life gets extended to the current scope:\n\nvoid constReferenceTempObjectFun() {\n    // constRef gets the temporary object, and it is valid until the end of this\n    // function.\n    const std::string& constRef = tempObjectFun();\n    ...\n}\n\n// Another kind of reference introduced in C++11 is specifically for temporary\n// objects. You cannot have a variable of its type, but it takes precedence in\n// overload resolution:\n\nvoid someFun(std::string& s) { ... }  // Regular reference\nvoid someFun(std::string&& s) { ... }  // Reference to temporary object\n\nstd::string foo;\nsomeFun(foo);  // Calls the version with regular reference\nsomeFun(tempObjectFun());  // Calls the version with temporary reference\n\n// For example, you will see these two versions of constructors for\n// std::basic_string:\nstd::basic_string(const basic_string& other);\nstd::basic_string(basic_string&& other);\n\n// Idea being if we are constructing a new string from a temporary object (which\n// is going to be destroyed soon anyway), we can have a more efficient\n// constructor that \"salvages\" parts of that temporary string. You will see this\n// concept referred to as \"move semantics\".\n\n/////////////////////\n// Enums\n/////////////////////\n\n// Enums are a way to assign a value to a constant most commonly used for\n// easier visualization and reading of code\nenum ECarTypes\n{\n    Sedan,\n    Hatchback,\n    SUV,\n    Wagon\n};\n\nECarTypes GetPreferredCarType()\n{\n    return ECarTypes::Hatchback;\n}\n\n// As of C++11 there is an easy way to assign a type to the enum which can be\n// useful in serialization of data and converting enums back-and-forth between\n// the desired type and their respective constants\nenum ECarTypes : uint8_t\n{\n    Sedan, // 0\n    Hatchback, // 1\n    SUV = 254, // 254\n    Hybrid // 255\n};\n\nvoid WriteByteToFile(uint8_t InputValue)\n{\n    // Serialize the InputValue to a file\n}\n\nvoid WritePreferredCarTypeToFile(ECarTypes InputCarType)\n{\n    // The enum is implicitly converted to a uint8_t due to its declared enum type\n    WriteByteToFile(InputCarType);\n}\n\n// On the other hand you may not want enums to be accidentally cast to an integer\n// type or to other enums so it is instead possible to create an enum class which\n// won't be implicitly converted\nenum class ECarTypes : uint8_t\n{\n    Sedan, // 0\n    Hatchback, // 1\n    SUV = 254, // 254\n    Hybrid // 255\n};\n\nvoid WriteByteToFile(uint8_t InputValue)\n{\n    // Serialize the InputValue to a file\n}\n\nvoid WritePreferredCarTypeToFile(ECarTypes InputCarType)\n{\n    // Won't compile even though ECarTypes is a uint8_t due to the enum\n    // being declared as an \"enum class\"!\n    WriteByteToFile(InputCarType);\n}\n\n//////////////////////////////////////////\n// Classes and object-oriented programming\n//////////////////////////////////////////\n\n// First example of classes\n#include <iostream>\n\n// Declare a class.\n// Classes are usually declared in header (.h or .hpp) files.\nclass Dog {\n    // Member variables and functions are private by default.\n    std::string name;\n    int weight;\n\n// All members following this are public\n// until \"private:\" or \"protected:\" is found.\npublic:\n\n    // Default constructor\n    Dog();\n\n    // Member function declarations (implementations to follow)\n    // Note that we use std::string here instead of placing\n    // using namespace std;\n    // above.\n    // Never put a \"using namespace\" statement in a header.\n    void setName(const std::string& dogsName);\n\n    void setWeight(int dogsWeight);\n\n    // Functions that do not modify the state of the object\n    // should be marked as const.\n    // This allows you to call them if given a const reference to the object.\n    // Also note the functions must be explicitly declared as _virtual_\n    // in order to be overridden in derived classes.\n    // Functions are not virtual by default for performance reasons.\n    virtual void print() const;\n\n    // Functions can also be defined inside the class body.\n    // Functions defined as such are automatically inlined.\n    void bark() const { std::cout << name << \" barks!\\n\"; }\n\n    // Along with constructors, C++ provides destructors.\n    // These are called when an object is deleted or falls out of scope.\n    // This enables powerful paradigms such as RAII\n    // (see below)\n    // The destructor should be virtual if a class is to be derived from;\n    // if it is not virtual, then the derived class' destructor will\n    // not be called if the object is destroyed through a base-class reference\n    // or pointer.\n    virtual ~Dog();\n\n}; // A semicolon must follow the class definition.\n\n// Class member functions are usually implemented in .cpp files.\nDog::Dog()\n{\n    std::cout << \"A dog has been constructed\\n\";\n}\n\n// Objects (such as strings) should be passed by reference\n// if you are modifying them or const reference if you are not.\nvoid Dog::setName(const std::string& dogsName)\n{\n    name = dogsName;\n}\n\nvoid Dog::setWeight(int dogsWeight)\n{\n    weight = dogsWeight;\n}\n\n// Notice that \"virtual\" is only needed in the declaration, not the definition.\nvoid Dog::print() const\n{\n    std::cout << \"Dog is \" << name << \" and weighs \" << weight << \"kg\\n\";\n}\n\nDog::~Dog()\n{\n    std::cout << \"Goodbye \" << name << '\\n';\n}\n\nint main() {\n    Dog myDog; // prints \"A dog has been constructed\"\n    myDog.setName(\"Barkley\");\n    myDog.setWeight(10);\n    myDog.print(); // prints \"Dog is Barkley and weighs 10 kg\"\n    return 0;\n} // prints \"Goodbye Barkley\"\n\n// Inheritance:\n\n// This class inherits everything public and protected from the Dog class\n// as well as private but may not directly access private members/methods\n// without a public or protected method for doing so\nclass OwnedDog : public Dog {\n\npublic:\n    void setOwner(const std::string& dogsOwner);\n\n    // Override the behavior of the print function for all OwnedDogs. See\n    // https://en.wikipedia.org/wiki/Polymorphism_(computer_science)#Subtyping\n    // for a more general introduction if you are unfamiliar with\n    // subtype polymorphism.\n    // The override keyword is optional but makes sure you are actually\n    // overriding the method in a base class.\n    void print() const override;\n\nprivate:\n    std::string owner;\n};\n\n// Meanwhile, in the corresponding .cpp file:\n\nvoid OwnedDog::setOwner(const std::string& dogsOwner)\n{\n    owner = dogsOwner;\n}\n\nvoid OwnedDog::print() const\n{\n    Dog::print(); // Call the print function in the base Dog class\n    std::cout << \"Dog is owned by \" << owner << '\\n';\n    // Prints \"Dog is <name> and weights <weight>\"\n    //        \"Dog is owned by <owner>\"\n}\n\n//////////////////////////////////////////\n// Initialization and Operator Overloading\n//////////////////////////////////////////\n\n// In C++ you can overload the behavior of operators such as +, -, *, /, etc.\n// This is done by defining a function which is called\n// whenever the operator is used.\n\n#include <iostream>\nusing namespace std;\n\nclass Point {\npublic:\n    // Member variables can be given default values in this manner.\n    double x = 0;\n    double y = 0;\n\n    // Define a default constructor which does nothing\n    // but initialize the Point to the default value (0, 0)\n    Point() { };\n\n    // The following syntax is known as an initialization list\n    // and is the proper way to initialize class member values\n    Point (double a, double b) :\n        x(a),\n        y(b)\n    { /* Do nothing except initialize the values */ }\n\n    // Overload the + operator.\n    Point operator+(const Point& rhs) const;\n\n    // Overload the += operator\n    Point& operator+=(const Point& rhs);\n\n    // It would also make sense to add the - and -= operators,\n    // but we will skip those for brevity.\n};\n\nPoint Point::operator+(const Point& rhs) const\n{\n    // Create a new point that is the sum of this one and rhs.\n    return Point(x + rhs.x, y + rhs.y);\n}\n\n// It's good practice to return a reference to the leftmost variable of\n// an assignment. `(a += b) == c` will work this way.\nPoint& Point::operator+=(const Point& rhs)\n{\n    x += rhs.x;\n    y += rhs.y;\n\n    // `this` is a pointer to the object, on which a method is called.\n    return *this;\n}\n\nint main () {\n    Point up (0,1);\n    Point right (1,0);\n    // This calls the Point + operator\n    // Point up calls the + (function) with right as its parameter\n    Point result = up + right;\n    // Prints \"Result is upright (1,1)\"\n    std::cout << \"Result is upright (\" << result.x << ',' << result.y << \")\\n\";\n    return 0;\n}\n\n/////////////////////\n// Templates\n/////////////////////\n\n// Templates in C++ are mostly used for generic programming, though they are\n// much more powerful than generic constructs in other languages. They also\n// support explicit and partial specialization and functional-style type\n// classes; in fact, they are a Turing-complete functional language embedded\n// in C++!\n\n// We start with the kind of generic programming you might be familiar with. To\n// define a class or function that takes a type parameter:\ntemplate<class T>\nclass Box {\npublic:\n    // In this class, T can be used as any other type.\n    void insert(const T&) { ... }\n};\n\n// During compilation, the compiler actually generates copies of each template\n// with parameters substituted, so the full definition of the class must be\n// present at each invocation. This is why you will see template classes defined\n// entirely in header files.\n\n// To instantiate a template class on the stack:\nBox<int> intBox;\n\n// and you can use it as you would expect:\nintBox.insert(123);\n\n// You can, of course, nest templates:\nBox<Box<int> > boxOfBox;\nboxOfBox.insert(intBox);\n\n// Until C++11, you had to place a space between the two '>'s, otherwise '>>'\n// would be parsed as the right shift operator.\n\n// You will sometimes see\n//   template<typename T>\n// instead. The 'class' keyword and 'typename' keywords are _mostly_\n// interchangeable in this case. For the full explanation, see\n//   https://en.wikipedia.org/wiki/Typename\n// (yes, that keyword has its own Wikipedia page).\n\n// Similarly, a template function:\ntemplate<class T>\nvoid barkThreeTimes(const T& input)\n{\n    input.bark();\n    input.bark();\n    input.bark();\n}\n\n// Notice that nothing is specified about the type parameters here. The compiler\n// will generate and then type-check every invocation of the template, so the\n// above function works with any type 'T' that has a const 'bark' method!\n\nDog fluffy;\nfluffy.setName(\"Fluffy\")\nbarkThreeTimes(fluffy); // Prints \"Fluffy barks\" three times.\n\n// Template parameters don't have to be classes:\ntemplate<int Y>\nvoid printMessage() {\n    std::cout << \"Learn C++ in \" << Y << \" minutes!\\n\";\n}\n\n// And you can explicitly specialize templates for more efficient code. Of\n// course, most real-world uses of specialization are not as trivial as this.\n// Note that you still need to declare the function (or class) as a template\n// even if you explicitly specified all parameters.\ntemplate<>\nvoid printMessage<10>() {\n    std::cout << \"Learn C++ faster in only 10 minutes!\\n\";\n}\n\nprintMessage<20>();  // Prints \"Learn C++ in 20 minutes!\"\nprintMessage<10>();  // Prints \"Learn C++ faster in only 10 minutes!\"\n\n\n/////////////////////\n// Exception Handling\n/////////////////////\n\n// The standard library provides a few exception types\n// (see https://en.cppreference.com/w/cpp/error/exception)\n// but any type can be thrown as an exception\n#include <exception>\n#include <stdexcept>\n\n// All exceptions thrown inside the _try_ block can be caught by subsequent\n// _catch_ handlers.\ntry {\n    // Do not allocate exceptions on the heap using _new_.\n    throw std::runtime_error(\"A problem occurred\");\n}\n\n// Catch exceptions by const reference if they are objects\ncatch (const std::exception& ex)\n{\n    std::cout << ex.what();\n}\n\n// Catches any exception not caught by previous _catch_ blocks\ncatch (...)\n{\n    std::cout << \"Unknown exception caught\";\n    throw; // Re-throws the exception\n}\n\n///////\n// RAII\n///////\n\n// RAII stands for \"Resource Acquisition Is Initialization\".\n// It is often considered the most powerful paradigm in C++\n// and is the simple concept that a constructor for an object\n// acquires that object's resources and the destructor releases them.\n\n// To understand how this is useful,\n// consider a function that uses a C file handle:\nvoid doSomethingWithAFile(const char* filename)\n{\n    // To begin with, assume nothing can fail.\n\n    FILE* fh = fopen(filename, \"r\"); // Open the file in read mode.\n    if (fh == NULL) {\n        // Handle possible error\n    }\n\n    doSomethingWithTheFile(fh);\n    doSomethingElseWithIt(fh);\n\n    fclose(fh); // Close the file handle.\n}\n\n// Unfortunately, things are quickly complicated by error handling.\n// Suppose fopen can fail, and that doSomethingWithTheFile and\n// doSomethingElseWithIt return error codes if they fail.\n//  (Exceptions are the preferred way of handling failure,\n//   but some programmers, especially those with a C background,\n//   disagree on the utility of exceptions).\n// We now have to check each call for failure and close the file handle\n// if a problem occurred.\nbool doSomethingWithAFile(const char* filename)\n{\n    FILE* fh = fopen(filename, \"r\"); // Open the file in read mode\n    if (fh == nullptr) // The returned pointer is null on failure.\n        return false; // Report that failure to the caller.\n\n    // Assume each function returns false if it failed\n    if (!doSomethingWithTheFile(fh)) {\n        fclose(fh); // Close the file handle so it doesn't leak.\n        return false; // Propagate the error.\n    }\n    if (!doSomethingElseWithIt(fh)) {\n        fclose(fh); // Close the file handle so it doesn't leak.\n        return false; // Propagate the error.\n    }\n\n    fclose(fh); // Close the file handle so it doesn't leak.\n    return true; // Indicate success\n}\n\n// C programmers often clean this up a little bit using goto:\nbool doSomethingWithAFile(const char* filename)\n{\n    FILE* fh = fopen(filename, \"r\");\n    if (fh == nullptr)\n        return false;\n\n    if (!doSomethingWithTheFile(fh))\n        goto failure;\n\n    if (!doSomethingElseWithIt(fh))\n        goto failure;\n\n    fclose(fh); // Close the file\n    return true; // Indicate success\n\nfailure:\n    fclose(fh);\n    return false; // Propagate the error\n}\n\n// If the functions indicate errors using exceptions,\n// things are a little cleaner, but still sub-optimal.\nvoid doSomethingWithAFile(const char* filename)\n{\n    FILE* fh = fopen(filename, \"r\"); // Open the file in shared_ptrread mode\n    if (fh == nullptr)\n        throw std::runtime_error(\"Could not open the file.\");\n\n    try {\n        doSomethingWithTheFile(fh);\n        doSomethingElseWithIt(fh);\n    }\n    catch (...) {\n        fclose(fh); // Be sure to close the file if an error occurs.\n        throw; // Then re-throw the exception.\n    }\n\n    fclose(fh); // Close the file\n    // Everything succeeded\n}\n\n// Compare this to the use of C++'s file stream class (fstream)\n// fstream uses its destructor to close the file.\n// Recall from above that destructors are automatically called\n// whenever an object falls out of scope.\nvoid doSomethingWithAFile(const std::string& filename)\n{\n    // ifstream is short for input file stream\n    std::ifstream fh(filename); // Open the file\n\n    // Do things with the file\n    doSomethingWithTheFile(fh);\n    doSomethingElseWithIt(fh);\n\n} // The file is automatically closed here by the destructor\n\n// This has _massive_ advantages:\n// 1. No matter what happens,\n//    the resource (in this case the file handle) will be cleaned up.\n//    Once you write the destructor correctly,\n//    It is _impossible_ to forget to close the handle and leak the resource.\n// 2. Note that the code is much cleaner.\n//    The destructor handles closing the file behind the scenes\n//    without you having to worry about it.\n// 3. The code is exception safe.\n//    An exception can be thrown anywhere in the function and cleanup\n//    will still occur.\n\n// All idiomatic C++ code uses RAII extensively for all resources.\n// Additional examples include\n// - Memory using unique_ptr and shared_ptr\n// - Containers - the standard library linked list,\n//   vector (i.e. self-resizing array), hash maps, and so on\n//   all automatically destroy their contents when they fall out of scope.\n// - Mutexes using lock_guard and unique_lock\n\n\n/////////////////////\n// Smart Pointer\n/////////////////////\n\n// Generally a smart pointer is a class which wraps a \"raw pointer\" (usage of \"new\"\n// respectively malloc/calloc in C). The goal is to be able to\n// manage the lifetime of the object being pointed to without ever needing to explicitly delete\n// the object. The term itself simply describes a set of pointers with the\n// mentioned abstraction.\n// Smart pointers should be preferred over raw pointers, to prevent\n// risky memory leaks, which happen if you forget to delete an object.\n\n// Usage of a raw pointer:\nDog* ptr = new Dog();\nptr->bark();\ndelete ptr;\n\n// By using a smart pointer, you don't have to worry about the deletion\n// of the object anymore.\n// A smart pointer describes a policy, to count the references to the\n// pointer. The object gets destroyed when the last\n// reference to the object gets destroyed.\n\n// Usage of \"std::shared_ptr\":\nvoid foo()\n{\n    // It's no longer necessary to delete the Dog.\n    std::shared_ptr<Dog> doggo(new Dog());\n    doggo->bark();\n}\n\n// Beware of possible circular references!!!\n// There will be always a reference, so it will be never destroyed!\nstd::shared_ptr<Dog> doggo_one(new Dog());\nstd::shared_ptr<Dog> doggo_two(new Dog());\ndoggo_one = doggo_two; // p1 references p2\ndoggo_two = doggo_one; // p2 references p1\n\n// There are several kinds of smart pointers.\n// The way you have to use them is always the same.\n// This leads us to the question: when should we use each kind of smart pointer?\n// std::unique_ptr - use it when you just want to hold one reference to\n// the object.\n// std::shared_ptr - use it when you want to hold multiple references to the\n// same object and want to make sure that it's deallocated\n// when all references are gone.\n// std::weak_ptr - use it when you want to access\n// the underlying object of a std::shared_ptr without causing that object to stay allocated.\n// Weak pointers are used to prevent circular referencing.\n\n\n/////////////////////\n// Containers\n/////////////////////\n\n// Containers or the Standard Template Library are some predefined templates.\n// They manage the storage space for its elements and provide\n// member functions to access and manipulate them.\n\n// Few containers are as follows:\n\n// Vector (Dynamic array)\n// Allow us to Define the Array or list of objects at run time\n#include <vector>\nstd::string val;\nstd::vector<string> my_vector; // initialize the vector\nstd::cin >> val;\n\nmy_vector.push_back(val); // will push the value of 'val' into vector (\"array\") my_vector\nmy_vector.push_back(val); // will push the value into the vector again (now having two elements)\n\n// To iterate through a vector we have 2 choices:\n// Either classic looping (iterating through the vector from index 0 to its last index):\nfor (int i = 0; i < my_vector.size(); i++) {\n    std::cout << my_vector[i] << '\\n'; // for accessing a vector's element we can use the operator []\n}\n\n// or using an iterator:\nvector<string>::iterator it; // initialize the iterator for vector\nfor (it = my_vector.begin(); it != my_vector.end(); ++it) {\n    std::cout << *it  << '\\n';\n}\n\n// Set\n// Sets are containers that store unique elements following a specific order.\n// Set is a very useful container to store unique values in sorted order\n// without any other functions or code.\n\n#include<set>\nstd::set<int> ST;    // Will initialize the set of int data type\nST.insert(30);  // Will insert the value 30 in set ST\nST.insert(10);  // Will insert the value 10 in set ST\nST.insert(20);  // Will insert the value 20 in set ST\nST.insert(30);  // Will insert the value 30 in set ST\n// Now elements of sets are as follows\n//  10 20 30\n\n// To erase an element\nST.erase(20);  // Will erase element with value 20\n// Set ST: 10 30\n// To iterate through Set we use iterators\nstd::set<int>::iterator it;\nfor (it = ST.begin(); it != ST.end(); it++) {\n    std::cout << *it << '\\n';\n}\n// Output:\n// 10\n// 30\n\n// To clear the complete container we use Container_name.clear()\nST.clear();\nstd::cout << ST.size();  // will print the size of set ST\n// Output: 0\n\n// NOTE: for duplicate elements we can use multiset\n// NOTE: For hash sets, use unordered_set. They are more efficient but\n// do not preserve order. unordered_set is available since C++11\n\n// Map\n// Maps store elements formed by a combination of a key value\n// and a mapped value, following a specific order.\n\n#include<map>\nstd::map<char, int> mymap;  // Will initialize the map with key as char and value as int\n\nmymap.insert(pair<char,int>('A',1));\n// Will insert value 1 for key A\nmymap.insert(pair<char,int>('Z',26));\n// Will insert value 26 for key Z\n\n// To iterate\nstd::map<char,int>::iterator it;\nfor (it = mymap.begin(); it != mymap.end(); ++it)\n    std::cout << it->first << \"->\" << it->second << '\\n';\n// Output:\n// A->1\n// Z->26\n\n// To find the value corresponding to a key\nit = mymap.find('Z');\nstd::cout << it->second;\n\n// Output: 26\n\n// NOTE: For hash maps, use unordered_map. They are more efficient but do\n// not preserve order. unordered_map is available since C++11.\n\n// Containers with object keys of non-primitive values (custom classes) require\n// compare function in the object itself or as a function pointer. Primitives\n// have default comparators, but you can override it.\nclass Foo {\npublic:\n    int j;\n    Foo(int a) : j(a) {}\n};\nstruct compareFunction {\n    bool operator()(const Foo& a, const Foo& b) const {\n        return a.j < b.j;\n    }\n};\n// this isn't allowed (although it can vary depending on compiler)\n// std::map<Foo, int> fooMap;\nstd::map<Foo, int, compareFunction> fooMap;\nfooMap[Foo(1)]  = 1;\nfooMap.find(Foo(1)); //true\n\n\n///////////////////////////////////////\n// Lambda Expressions (C++11 and above)\n///////////////////////////////////////\n\n// lambdas are a convenient way of defining an anonymous function\n// object right at the location where it is invoked or passed as\n// an argument to a function.\n\n// For example, consider sorting a vector of pairs using the second\n// value of the pair\n\nstd::vector<pair<int, int> > tester;\ntester.push_back(make_pair(3, 6));\ntester.push_back(make_pair(1, 9));\ntester.push_back(make_pair(5, 0));\n\n// Pass a lambda expression as third argument to the sort function\n// sort is from the <algorithm> header\n\nstd::sort(tester.begin(), tester.end(), [](const pair<int, int>& lhs, const pair<int, int>& rhs) {\n        return lhs.second < rhs.second;\n    });\n\n// Notice the syntax of the lambda expression,\n// [] in the lambda is used to \"capture\" variables\n// The \"Capture List\" defines what from the outside of the lambda should be available inside the function body and how.\n// It can be either:\n//     1. a value : [x]\n//     2. a reference : [&x]\n//     3. any variable currently in scope by reference [&]\n//     4. same as 3, but by value [=]\n// Example:\n\nstd::vector<int> dog_ids;\n// number_of_dogs = 3;\nfor (int i = 0; i < 3; i++) {\n    dog_ids.push_back(i);\n}\n\nint weight[3] = {30, 50, 10};\n\n// Say you want to sort dog_ids according to the dogs' weights\n// So dog_ids should in the end become: [2, 0, 1]\n\n// Here's where lambda expressions come in handy\n\nsort(dog_ids.begin(), dog_ids.end(), [&weight](const int &lhs, const int &rhs) {\n        return weight[lhs] < weight[rhs];\n    });\n// Note we captured \"weight\" by reference in the above example.\n// More on Lambdas in C++ : https://stackoverflow.com/questions/7627098/what-is-a-lambda-expression-in-c11\n\n///////////////////////////////\n// Range For (C++11 and above)\n///////////////////////////////\n\n// You can use a range for loop to iterate over a container\nint arr[] = {1, 10, 3};\n\nfor (int elem: arr) {\n    cout << elem << endl;\n}\n\n// You can use \"auto\" and not worry about the type of the elements of the container\n// For example:\n\nfor (auto elem: arr) {\n    // Do something with each element of arr\n}\n\n/////////////////////\n// Fun stuff\n/////////////////////\n\n// Aspects of C++ that may be surprising to newcomers (and even some veterans).\n// This section is, unfortunately, wildly incomplete; C++ is one of the easiest\n// languages with which to shoot yourself in the foot.\n\n// You can override private methods!\nclass Foo {\n    virtual void bar();\n};\nclass FooSub : public Foo {\n    virtual void bar();  // Overrides Foo::bar!\n};\n\n\n// 0 == false == NULL (most of the time)!\nbool* pt = new bool;\n*pt = 0; // Sets the value points by 'pt' to false.\npt = 0;  // Sets 'pt' to the null pointer. Both lines compile without warnings.\n\n// nullptr is supposed to fix some of that issue:\nint* pt2 = new int;\n*pt2 = nullptr; // Doesn't compile\npt2 = nullptr;  // Sets pt2 to null.\n\n// There is an exception made for bools.\n// This is to allow you to test for null pointers with if(!ptr),\n// but as a consequence you can assign nullptr to a bool directly!\n*pt = nullptr;  // This still compiles, even though '*pt' is a bool!\n\n\n// '=' != '=' != '='!\n// Calls Foo::Foo(const Foo&) or some variant (see move semantics) copy\n// constructor.\nFoo f2;\nFoo f1 = f2;\n\n// Calls Foo::Foo(const Foo&) or variant, but only copies the 'Foo' part of\n// 'fooSub'. Any extra members of 'fooSub' are discarded. This sometimes\n// horrifying behavior is called \"object slicing.\"\nFooSub fooSub;\nFoo f1 = fooSub;\n\n// Calls Foo::operator=(Foo&) or variant.\nFoo f1;\nf1 = f2;\n\n\n///////////////////////////////////////\n// Tuples (C++11 and above)\n///////////////////////////////////////\n\n#include<tuple>\n\n// Conceptually, Tuples are similar to old data structures (C-like structs)\n// but instead of having named data members,\n// its elements are accessed by their order in the tuple.\n\n// We start with constructing a tuple.\n// Packing values into tuple\nauto first = make_tuple(10, 'A');\nconst int maxN = 1e9;\nconst int maxL = 15;\nauto second = make_tuple(maxN, maxL);\n\n// Printing elements of 'first' tuple\nstd::cout << get<0>(first) << \" \" << get<1>(first) << '\\n'; //prints : 10 A\n\n// Printing elements of 'second' tuple\nstd::cout << get<0>(second) << \" \" << get<1>(second) << '\\n'; // prints: 1000000000 15\n\n// Unpacking tuple into variables\n\nint first_int;\nchar first_char;\ntie(first_int, first_char) = first;\nstd::cout << first_int << \" \" << first_char << '\\n';  // prints : 10 A\n\n// We can also create tuple like this.\n\ntuple<int, char, double> third(11, 'A', 3.14141);\n// tuple_size returns number of elements in a tuple (as a constexpr)\n\nstd::cout << tuple_size<decltype(third)>::value << '\\n'; // prints: 3\n\n// tuple_cat concatenates the elements of all the tuples in the same order.\n\nauto concatenated_tuple = tuple_cat(first, second, third);\n// concatenated_tuple becomes = (10, 'A', 1e9, 15, 11, 'A', 3.14141)\n\nstd::cout << get<0>(concatenated_tuple) << '\\n'; // prints: 10\nstd::cout << get<3>(concatenated_tuple) << '\\n'; // prints: 15\nstd::cout << get<5>(concatenated_tuple) << '\\n'; // prints: 'A'\n\n\n///////////////////////////////////\n// Logical and Bitwise operators\n//////////////////////////////////\n\n// Most of the operators in C++ are same as in other languages\n\n// Logical operators\n\n// C++ uses Short-circuit evaluation for boolean expressions, i.e, the second argument is executed or\n// evaluated only if the first argument does not suffice to determine the value of the expression\n\ntrue && false // Performs **logical and** to yield false\ntrue || false // Performs **logical or** to yield true\n! true        // Performs **logical not** to yield false\n\n// Instead of using symbols equivalent keywords can be used\ntrue and false // Performs **logical and** to yield false\ntrue or false  // Performs **logical or** to yield true\nnot true       // Performs **logical not** to yield false\n\n// Bitwise operators\n\n// **<<** Left Shift Operator\n// << shifts bits to the left\n4 << 1 // Shifts bits of 4 to left by 1 to give 8\n// x << n can be thought as x * 2^n\n\n\n// **>>** Right Shift Operator\n// >> shifts bits to the right\n4 >> 1 // Shifts bits of 4 to right by 1 to give 2\n// x >> n can be thought as x / 2^n\n\n~4    // Performs a bitwise not\n4 | 3 // Performs bitwise or\n4 & 3 // Performs bitwise and\n4 ^ 3 // Performs bitwise xor\n\n// Equivalent keywords are\ncompl 4    // Performs a bitwise not\n4 bitor 3  // Performs bitwise or\n4 bitand 3 // Performs bitwise and\n4 xor 3    // Performs bitwise xor\n```\n\n## Further Reading:\n\n- An up-to-date language reference can be found at [CPP Reference](http://cppreference.com/w/cpp).\n- A tutorial for beginners or experts, covering many modern features and good practices: [LearnCpp.com](https://www.learncpp.com/)\n- A tutorial covering basics of language and setting up coding environment is available at [TheChernoProject - C++](https://www.youtube.com/playlist?list=PLlrATfBNZ98dudnM48yfGUldqGD0S4FFb).\n- Additional resources may be found at [CPlusPlus](http://cplusplus.com).\n"
        },
        {
          "name": "c.md",
          "type": "blob",
          "size": 33.6298828125,
          "content": "---\nname: C\nfilename: learnc.c\ncontributors:\n  - [\"Adam Bard\", \"http://adambard.com/\"]\n  - [\"Árpád Goretity\", \"http://twitter.com/H2CO3_iOS\"]\n  - [\"Jakub Trzebiatowski\", \"http://cbs.stgn.pl\"]\n  - [\"Marco Scannadinari\", \"https://marcoms.github.io\"]\n  - [\"Zachary Ferguson\", \"https://github.io/zfergus2\"]\n  - [\"himanshu\", \"https://github.com/himanshu81494\"]\n  - [\"Joshua Li\", \"https://github.com/JoshuaRLi\"]\n  - [\"Dragos B. Chirila\", \"https://github.com/dchirila\"]\n  - [\"Heitor P. de Bittencourt\", \"https://github.com/heitorPB/\"]\n---\n\nAh, C. Still **the** language of modern high-performance computing.\n\nC is the lowest-level language most programmers will ever use, but\nit more than makes up for it with raw speed. Just be aware of its manual\nmemory management and C will take you as far as you need to go.\n\n```c\n// Single-line comments start with // - only available in C99 and later.\n\n/*\nMulti-line comments look like this. They work in C89 as well.\n*/\n\n/*\nMulti-line comments don't nest /* Be careful */  // comment ends on this line...\n*/ // ...not this one!\n\n// Constants: #define <keyword>\n// Constants are written in all-caps out of convention, not requirement\n#define DAYS_IN_YEAR 365\n\n// Enumeration constants are also ways to declare constants.\n// All statements must end with a semicolon\nenum days {SUN, MON, TUE, WED, THU, FRI, SAT};\n// SUN gets 0, MON gets 1, TUE gets 2, etc.\n\n// Enumeration values can also be specified\nenum days {SUN = 1, MON, TUE, WED = 99, THU, FRI, SAT};\n// MON gets 2 automatically, TUE gets 3, etc.\n// WED get 99, THU gets 100, FRI gets 101, etc.\n\n// Import headers with #include\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\n// File names between <angle brackets> tell the compiler to look in your system\n// libraries for the headers.\n// For your own headers, use double quotes instead of angle brackets, and\n// provide the path:\n#include \"my_header.h\" \t\t// local file\n#include \"../my_lib/my_lib_header.h\" //relative path\n\n// Declare function signatures in advance in a .h file, or at the top of\n// your .c file.\nvoid function_1();\nint function_2(void);\n\n// At a minimum, you must declare a 'function prototype' before its use in any function.\n// Normally, prototypes are placed at the top of a file before any function definition.\nint add_two_ints(int x1, int x2); // function prototype\n// although `int add_two_ints(int, int);` is also valid (no need to name the args),\n// it is recommended to name arguments in the prototype as well for easier inspection\n\n// Function prototypes are not necessary if the function definition comes before\n// any other function that calls that function. However, it's standard practice to\n// always add the function prototype to a header file (*.h) and then #include that\n// file at the top. This prevents any issues where a function might be called\n// before the compiler knows of its existence, while also giving the developer a\n// clean header file to share with the rest of the project.\n\n// Your program's entry point is a function called \"main\". The return type can\n// be anything, however most operating systems expect a return type of `int` for\n// error code processing.\nint main(void) {\n  // your program\n}\n\n// The command line arguments used to run your program are also passed to main\n// argc being the number of arguments - your program's name counts as 1\n// argv is an array of character arrays - containing the arguments themselves\n// argv[0] = name of your program, argv[1] = first argument, etc.\nint main (int argc, char** argv)\n{\n  // print output using printf, for \"print formatted\"\n  // %d is an integer, \\n is a newline\n  printf(\"%d\\n\", 0); // => Prints 0\n\n  // take input using scanf\n  // '&' is used to define the location\n  // where we want to store the input value\n  int input;\n  scanf(\"%d\", &input);\n\n  ///////////////////////////////////////\n  // Types\n  ///////////////////////////////////////\n\n  // Compilers that are not C99-compliant require that variables MUST be\n  // declared at the top of the current block scope.\n  // Compilers that ARE C99-compliant allow declarations near the point where\n  // the value is used.\n  // For the sake of the tutorial, variables are declared dynamically under\n  // C99-compliant standards.\n\n  // ints are usually 4 bytes (use the `sizeof` operator to check)\n  int x_int = 0;\n\n  // shorts are usually 2 bytes (use the `sizeof` operator to check)\n  short x_short = 0;\n\n  // chars are defined as the smallest addressable unit for a processor.\n  // This is usually 1 byte, but for some systems it can be more (ex. for TMS320 from TI it's 2 bytes).\n  char x_char = 0;\n  char y_char = 'y'; // Char literals are quoted with ''\n\n  // longs are often 4 to 8 bytes; long longs are guaranteed to be at least\n  // 8 bytes\n  long x_long = 0;\n  long long x_long_long = 0;\n\n  // floats are usually 32-bit floating point numbers\n  float x_float = 0.0f; // 'f' suffix here denotes floating point literal\n\n  // doubles are usually 64-bit floating-point numbers\n  double x_double = 0.0; // real numbers without any suffix are doubles\n\n  // integer types may be unsigned (greater than or equal to zero)\n  unsigned short ux_short;\n  unsigned int ux_int;\n  unsigned long long ux_long_long;\n\n  // chars inside single quotes are integers in machine's character set.\n  '0'; // => 48 in the ASCII character set.\n  'A'; // => 65 in the ASCII character set.\n\n  // sizeof(T) gives you the size of a variable with type T in bytes\n  // sizeof(obj) yields the size of the expression (variable, literal, etc.).\n  printf(\"%zu\\n\", sizeof(int)); // => 4 (on most machines with 4-byte words)\n\n  // If the argument of the `sizeof` operator is an expression, then its argument\n  // is not evaluated (except VLAs (see below)).\n  // The value it yields in this case is a compile-time constant.\n  int a = 1;\n  // size_t is an unsigned integer type of at least 2 bytes used to represent\n  // the size of an object.\n  size_t size = sizeof(a++); // a++ is not evaluated\n  printf(\"sizeof(a++) = %zu where a = %d\\n\", size, a);\n  // prints \"sizeof(a++) = 4 where a = 1\" (on a 32-bit architecture)\n\n  // Arrays must be initialized with a concrete size.\n  char my_char_array[20]; // This array occupies 1 * 20 = 20 bytes\n  int my_int_array[20]; // This array occupies 4 * 20 = 80 bytes\n  // (assuming 4-byte words)\n\n  // You can initialize an array of twenty ints that all equal 0 thusly:\n  int my_array[20] = {0};\n  // where the \"{0}\" part is called an \"array initializer\".\n  // All elements (if any) past the ones in the initializer are initialized to 0:\n  int my_array[5] = {1, 2};\n  // So my_array now has five elements, all but the first two of which are 0:\n  // [1, 2, 0, 0, 0]\n  // NOTE that you get away without explicitly declaring the size\n  // of the array IF you initialize the array on the same line:\n  int my_array[] = {0};\n  // NOTE that, when not declaring the size, the size of the array is the number\n  // of elements in the initializer. With \"{0}\", my_array is now of size one: [0]\n  // To evaluate the size of the array at run-time, divide its byte size by the\n  // byte size of its element type:\n  size_t my_array_size = sizeof(my_array) / sizeof(my_array[0]);\n  // WARNING You should evaluate the size *before* you begin passing the array\n  // to functions (see later discussion) because arrays get \"downgraded\" to\n  // raw pointers when they are passed to functions (so the statement above\n  // will produce the wrong result inside the function).\n\n  // Indexing an array is like other languages -- or,\n  // rather, other languages are like C\n  my_array[0]; // => 0\n\n  // Arrays are mutable; it's just memory!\n  my_array[1] = 2;\n  printf(\"%d\\n\", my_array[1]); // => 2\n\n  // In C99 (and as an optional feature in C11), variable-length arrays (VLAs)\n  // can be declared as well. The size of such an array need not be a compile\n  // time constant:\n  printf(\"Enter the array size: \"); // ask the user for an array size\n  int array_size;\n  fscanf(stdin, \"%d\", &array_size);\n  int var_length_array[array_size]; // declare the VLA\n  printf(\"sizeof array = %zu\\n\", sizeof var_length_array);\n\n  // Example:\n  // > Enter the array size: 10\n  // > sizeof array = 40\n\n  // Strings are just arrays of chars terminated by a NULL (0x00) byte,\n  // represented in strings as the special character '\\0'.\n  // (We don't have to include the NULL byte in string literals; the compiler\n  //  inserts it at the end of the array for us.)\n  char a_string[20] = \"This is a string\";\n  printf(\"%s\\n\", a_string); // %s formats a string\n\n  printf(\"%d\\n\", a_string[16]); // => 0\n  // i.e., byte #17 is 0 (as are 18, 19, and 20)\n\n  // If we have characters between single quotes, that's a character literal.\n  // It's of type `int`, and *not* `char` (for historical reasons).\n  int cha = 'a'; // fine\n  char chb = 'a'; // fine too (implicit conversion from int to char)\n\n  // Multi-dimensional arrays:\n  int multi_array[2][5] = {\n    {1, 2, 3, 4, 5},\n    {6, 7, 8, 9, 0}\n  };\n  // access elements:\n  int array_int = multi_array[0][2]; // => 3\n\n  ///////////////////////////////////////\n  // Operators\n  ///////////////////////////////////////\n\n  // Shorthands for multiple declarations:\n  int i1 = 1, i2 = 2;\n  float f1 = 1.0, f2 = 2.0;\n\n  int b, c;\n  b = c = 0;\n\n  // Arithmetic is straightforward\n  i1 + i2; // => 3\n  i2 - i1; // => 1\n  i2 * i1; // => 2\n  i1 / i2; // => 0 (0.5, but truncated towards 0)\n\n  // You need to cast at least one integer to float to get a floating-point result\n  (float)i1 / i2; // => 0.5f\n  i1 / (double)i2; // => 0.5 // Same with double\n  f1 / f2; // => 0.5, plus or minus epsilon\n\n  // Floating-point numbers are defined by IEEE 754, thus cannot store perfectly\n  // exact values. For instance, the following does not produce expected results\n  // because 0.1 might actually be 0.099999999999 inside the computer, and 0.3\n  // might be stored as 0.300000000001.\n  (0.1 + 0.1 + 0.1) != 0.3; // => 1 (true)\n  // and it is NOT associative due to reasons mentioned above.\n  1 + (1e123 - 1e123) != (1 + 1e123) - 1e123; // => 1 (true)\n  // this notation is scientific notations for numbers: 1e123 = 1*10^123\n\n  // It is important to note that most all systems have used IEEE 754 to\n  // represent floating points. Even python, used for scientific computing,\n  // eventually calls C which uses IEEE 754. It is mentioned this way not to\n  // indicate that this is a poor implementation, but instead as a warning\n  // that when doing floating point comparisons, a little bit of error (epsilon)\n  // needs to be considered.\n\n  // Modulo is there as well, but be careful if arguments are negative\n  11 % 3;    // => 2 as 11 = 2 + 3*x (x=3)\n  (-11) % 3; // => -2, as one would expect\n  11 % (-3); // => 2 and not -2, and it's quite counter intuitive\n\n  // Comparison operators are probably familiar, but\n  // there is no Boolean type in C. We use ints instead.\n  // (C99 introduced the _Bool type provided in stdbool.h)\n  // 0 is false, anything else is true. (The comparison\n  // operators always yield 0 or 1.)\n  3 == 2; // => 0 (false)\n  3 != 2; // => 1 (true)\n  3 > 2;  // => 1\n  3 < 2;  // => 0\n  2 <= 2; // => 1\n  2 >= 2; // => 1\n\n  // C is not Python - comparisons do NOT chain.\n  // Warning: The line below will compile, but it means `(0 < a) < 2`.\n  // This expression is always true, because (0 < a) could be either 1 or 0.\n  // In this case it's 1, because (0 < 1).\n  int between_0_and_2 = 0 < a < 2;\n  // Instead use:\n  int between_0_and_2 = 0 < a && a < 2;\n\n  // Logic works on ints\n  !3; // => 0 (Logical not)\n  !0; // => 1\n  1 && 1; // => 1 (Logical and)\n  0 && 1; // => 0\n  0 || 1; // => 1 (Logical or)\n  0 || 0; // => 0\n\n  // Conditional ternary expression ( ? : )\n  int e = 5;\n  int f = 10;\n  int z;\n  z = (e > f) ? e : f; // => 10 \"if e > f return e, else return f.\"\n\n  // Increment and decrement operators:\n  int j = 0;\n  int s = j++; // Return j THEN increase j. (s = 0, j = 1)\n  s = ++j; // Increase j THEN return j. (s = 2, j = 2)\n  // same with j-- and --j\n\n  // Bitwise operators!\n  ~0x0F; // => 0xFFFFFFF0 (bitwise negation, \"1's complement\", example result for 32-bit int)\n  0x0F & 0xF0; // => 0x00 (bitwise AND)\n  0x0F | 0xF0; // => 0xFF (bitwise OR)\n  0x04 ^ 0x0F; // => 0x0B (bitwise XOR)\n  0x01 << 1; // => 0x02 (bitwise left shift (by 1))\n  0x02 >> 1; // => 0x01 (bitwise right shift (by 1))\n\n  // Be careful when shifting signed integers - the following are undefined:\n  // - shifting into the sign bit of a signed integer (int a = 1 << 31)\n  // - left-shifting a negative number (int a = -1 << 2)\n  // - shifting by an offset which is >= the width of the type of the LHS:\n  //   int a = 1 << 32; // UB if int is 32 bits wide\n\n  ///////////////////////////////////////\n  // Control Structures\n  ///////////////////////////////////////\n\n  if (0) {\n    printf(\"I am never run\\n\");\n  } else if (0) {\n    printf(\"I am also never run\\n\");\n  } else {\n    printf(\"I print\\n\");\n  }\n\n  // While loops exist\n  int ii = 0;\n  while (ii < 10) { //ANY value less than ten is true.\n    printf(\"%d, \", ii++); // ii++ increments ii AFTER using its current value.\n  } // => prints \"0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \"\n\n  printf(\"\\n\");\n\n  int kk = 0;\n  do {\n    printf(\"%d, \", kk);\n  } while (++kk < 10); // ++kk increments kk BEFORE using its current value.\n  // => prints \"0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \"\n\n  printf(\"\\n\");\n\n  // For loops too\n  int jj;\n  for (jj=0; jj < 10; jj++) {\n    printf(\"%d, \", jj);\n  } // => prints \"0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \"\n\n  printf(\"\\n\");\n\n  // *****NOTES*****:\n  // Loops and Functions MUST have a body. If no body is needed:\n  int i;\n  for (i = 0; i <= 5; i++) {\n    ; // use semicolon to act as the body (null statement)\n  }\n  // Or\n  for (i = 0; i <= 5; i++);\n\n  // branching with multiple choices: switch()\n  switch (a) {\n  case 0: // labels need to be integral *constant* expressions (such as enums)\n    printf(\"Hey, 'a' equals 0!\\n\");\n    break; // if you don't break, control flow falls over labels\n  case 1:\n    printf(\"Huh, 'a' equals 1!\\n\");\n    break;\n    // Be careful - without a \"break\", execution continues until the\n    // next \"break\" is reached.\n  case 3:\n  case 4:\n    printf(\"Look at that.. 'a' is either 3, or 4\\n\");\n    break;\n  default:\n    // if `some_integral_expression` didn't match any of the labels\n    fputs(\"Error!\\n\", stderr);\n    exit(-1);\n    break;\n  }\n  /*\n    Using \"goto\" in C\n  */\n  typedef enum { false, true } bool;\n  // for C don't have bool as data type before C99 :(\n  bool disaster = false;\n  int i, j;\n  for(i=0; i<100; ++i)\n  for(j=0; j<100; ++j)\n  {\n    if((i + j) >= 150)\n        disaster = true;\n    if(disaster)\n        goto error;  // exit both for loops\n  }\n  error: // this is a label that you can \"jump\" to with \"goto error;\"\n  printf(\"Error occurred at i = %d & j = %d.\\n\", i, j);\n  /*\n    https://ideone.com/GuPhd6\n    this will print out \"Error occurred at i = 51 & j = 99.\"\n  */\n  /*\n    it is generally considered bad practice to do so, except if\n    you really know what you are doing. See\n    https://en.wikipedia.org/wiki/Spaghetti_code#Meaning\n  */\n\n  ///////////////////////////////////////\n  // Typecasting\n  ///////////////////////////////////////\n\n  // Every value in C has a type, but you can cast one value into another type\n  // if you want (with some constraints).\n\n  int x_hex = 0x01; // You can assign vars with hex literals\n                    // binary is not in the standard, but allowed by some\n                    // compilers (x_bin = 0b0010010110)\n\n  // Casting between types will attempt to preserve their numeric values\n  printf(\"%d\\n\", x_hex); // => Prints 1\n  printf(\"%d\\n\", (short) x_hex); // => Prints 1\n  printf(\"%d\\n\", (char) x_hex); // => Prints 1\n\n  // If you assign a value greater than a types max val, it will rollover\n  // without warning.\n  printf(\"%d\\n\", (unsigned char) 257); // => 1 (Max char = 255 if char is 8 bits long)\n\n  // For determining the max value of a `char`, a `signed char` and an `unsigned char`,\n  // respectively, use the CHAR_MAX, SCHAR_MAX and UCHAR_MAX macros from <limits.h>\n\n  // Integral types can be cast to floating-point types, and vice-versa.\n  printf(\"%f\\n\", (double) 100); // %f always formats a double...\n  printf(\"%f\\n\", (float)  100); // ...even with a float.\n  printf(\"%d\\n\", (char)100.0);\n\n  ///////////////////////////////////////\n  // Pointers\n  ///////////////////////////////////////\n\n  // A pointer is a variable declared to store a memory address. Its declaration will\n  // also tell you the type of data it points to. You can retrieve the memory address\n  // of your variables, then mess with them.\n\n  int x = 0;\n  printf(\"%p\\n\", (void *)&x); // Use & to retrieve the address of a variable\n  // (%p formats an object pointer of type void *)\n  // => Prints some address in memory;\n\n  // Pointers start with * in their declaration\n  int *px, not_a_pointer; // px is a pointer to an int\n  px = &x; // Stores the address of x in px\n  printf(\"%p\\n\", (void *)px); // => Prints some address in memory\n  printf(\"%zu, %zu\\n\", sizeof(px), sizeof(not_a_pointer));\n  // => Prints \"8, 4\" on a typical 64-bit system\n\n  // To retrieve the value at the address a pointer is pointing to,\n  // put * in front to dereference it.\n  // Note: yes, it may be confusing that '*' is used for _both_ declaring a\n  // pointer and dereferencing it.\n  printf(\"%d\\n\", *px); // => Prints 0, the value of x\n\n  // You can also change the value the pointer is pointing to.\n  // We'll have to wrap the dereference in parenthesis because\n  // ++ has a higher precedence than *.\n  (*px)++; // Increment the value px is pointing to by 1\n  printf(\"%d\\n\", *px); // => Prints 1\n  printf(\"%d\\n\", x); // => Prints 1\n\n  // Arrays are a good way to allocate a contiguous block of memory\n  int x_array[20]; //declares array of size 20 (cannot change size)\n  int xx;\n  for (xx = 0; xx < 20; xx++) {\n    x_array[xx] = 20 - xx;\n  } // Initialize x_array to 20, 19, 18,... 2, 1\n\n  // Declare a pointer of type int and initialize it to point to x_array\n  int* x_ptr = x_array;\n  // x_ptr now points to the first element in the array (the integer 20).\n  // This works because arrays often decay into pointers to their first element.\n  // For example, when an array is passed to a function or is assigned to a pointer,\n  // it decays into (implicitly converted to) a pointer.\n  // Exceptions: when the array is the argument of the `&` (address-of) operator:\n  int arr[10];\n  int (*ptr_to_arr)[10] = &arr; // &arr is NOT of type `int *`!\n  // It's of type \"pointer to array\" (of ten `int`s).\n  // or when the array is a string literal used for initializing a char array:\n  char otherarr[] = \"foobarbazquirk\";\n  // or when it's the argument of the `sizeof` or `alignof` operator:\n  int arraythethird[10];\n  int *ptr = arraythethird; // equivalent with int *ptr = &arr[0];\n  printf(\"%zu, %zu\\n\", sizeof(arraythethird), sizeof(ptr));\n  // probably prints \"40, 4\" or \"40, 8\"\n\n  // Pointers are incremented and decremented based on their type\n  // (this is called pointer arithmetic)\n  printf(\"%d\\n\", *(x_ptr + 1)); // => Prints 19\n  printf(\"%d\\n\", x_array[1]); // => Prints 19\n\n  // You can also dynamically allocate contiguous blocks of memory with the\n  // standard library function malloc, which takes one argument of type size_t\n  // representing the number of bytes to allocate (usually from the heap, although this\n  // may not be true on e.g. embedded systems - the C standard says nothing about it).\n  int *my_ptr = malloc(sizeof(*my_ptr) * 20);\n  for (xx = 0; xx < 20; xx++) {\n    *(my_ptr + xx) = 20 - xx; // my_ptr[xx] = 20-xx\n  } // Initialize memory to 20, 19, 18, 17... 2, 1 (as ints)\n\n  // Be careful passing user-provided values to malloc! If you want\n  // to be safe, you can use calloc instead (which, unlike malloc, also zeros out the memory)\n  int* my_other_ptr = calloc(20, sizeof(int));\n\n  // Note that there is no standard way to get the length of a\n  // dynamically allocated array in C. Because of this, if your arrays are\n  // going to be passed around your program a lot, you need another variable\n  // to keep track of the number of elements (size) of an array. See the\n  // functions section for more info.\n  size_t size = 10;\n  int *my_arr = calloc(size, sizeof(int));\n  // Add an element to the array\n  size++;\n  my_arr = realloc(my_arr, sizeof(int) * size);\n  if (my_arr == NULL) {\n    //Remember to check for realloc failure!\n    return\n  }\n  my_arr[10] = 5;\n\n  // Dereferencing memory that you haven't allocated gives\n  // \"unpredictable results\" - the program is said to invoke \"undefined behavior\"\n  printf(\"%d\\n\", *(my_ptr + 21)); // => Prints who-knows-what? It may even crash.\n\n  // When you're done with a malloc'd block of memory, you need to free it,\n  // or else no one else can use it until your program terminates\n  // (this is called a \"memory leak\"):\n  free(my_ptr);\n\n  // Strings are arrays of char, but they are usually represented as a\n  // pointer-to-char (which is a pointer to the first element of the array).\n  // It's good practice to use `const char *' when referring to a string literal,\n  // since string literals shall not be modified (i.e. \"foo\"[0] = 'a' is ILLEGAL.)\n  const char *my_str = \"This is my very own string literal\";\n  printf(\"%c\\n\", *my_str); // => 'T'\n\n  // This is not the case if the string is an array\n  // (potentially initialized with a string literal)\n  // that resides in writable memory, as in:\n  char foo[] = \"foo\";\n  foo[0] = 'a'; // this is legal, foo now contains \"aoo\"\n\n  function_1();\n} // end main function\n\n///////////////////////////////////////\n// Functions\n///////////////////////////////////////\n\n// Function declaration syntax:\n// <return type> <function name>(<args>)\n\nint add_two_ints(int x1, int x2)\n{\n  return x1 + x2; // Use return to return a value\n}\n\n/*\nFunctions are call by value. When a function is called, the arguments passed to\nthe function are copies of the original arguments (except arrays). Anything you\ndo to the arguments in the function do not change the value of the original\nargument where the function was called.\n\nUse pointers if you need to edit the original argument values (arrays are always\npassed in as pointers).\n\nExample: in-place string reversal\n*/\n\n// A void function returns no value\nvoid str_reverse(char *str_in)\n{\n  char tmp;\n  size_t ii = 0;\n  size_t len = strlen(str_in); // `strlen()` is part of the c standard library\n                               // NOTE: length returned by `strlen` DOESN'T\n                               //       include the terminating NULL byte ('\\0')\n  // in C99 and newer versions, you can directly declare loop control variables\n  // in the loop's parentheses. e.g., `for (size_t ii = 0; ...`\n  for (ii = 0; ii < len / 2; ii++) {\n    tmp = str_in[ii];\n    str_in[ii] = str_in[len - ii - 1]; // ii-th char from end\n    str_in[len - ii - 1] = tmp;\n  }\n}\n//NOTE: string.h header file needs to be included to use strlen()\n\n/*\nchar c[] = \"This is a test.\";\nstr_reverse(c);\nprintf(\"%s\\n\", c); // => \".tset a si sihT\"\n*/\n/*\nas we can return only one variable\nto change values of more than one variables we use call by reference\n*/\nvoid swapTwoNumbers(int *a, int *b)\n{\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n/*\nint first = 10;\nint second = 20;\nprintf(\"first: %d\\nsecond: %d\\n\", first, second);\nswapTwoNumbers(&first, &second);\nprintf(\"first: %d\\nsecond: %d\\n\", first, second);\n// values will be swapped\n*/\n\n// Return multiple values.\n// C does not allow for returning multiple values with the return statement. If\n// you would like to return multiple values, then the caller must pass in the\n// variables where they would like the returned values to go. These variables must\n// be passed in as pointers such that the function can modify them.\nint return_multiple( int *array_of_3, int *ret1, int *ret2, int *ret3)\n{\n    if(array_of_3 == NULL)\n        return 0; //return error code (false)\n\n    //de-reference the pointer so we modify its value\n   *ret1 = array_of_3[0];\n   *ret2 = array_of_3[1];\n   *ret3 = array_of_3[2];\n\n   return 1; //return error code (true)\n}\n\n/*\nWith regards to arrays, they will always be passed to functions\nas pointers. Even if you statically allocate an array like `arr[10]`,\nit still gets passed as a pointer to the first element in any function calls.\nAgain, there is no standard way to get the size of a dynamically allocated\narray in C.\n*/\n// Size must be passed!\n// Otherwise, this function has no way of knowing how big the array is.\nvoid printIntArray(int *arr, size_t size) {\n    int i;\n    for (i = 0; i < size; i++) {\n        printf(\"arr[%d] is: %d\\n\", i, arr[i]);\n    }\n}\n/*\nint my_arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\nint size = 10;\nprintIntArray(my_arr, size);\n// will print \"arr[0] is: 1\" etc\n*/\n\n// if referring to external variables outside function, you should use the extern keyword.\nint i = 0;\nvoid testFunc() {\n  extern int i; //i here is now using external variable i\n}\n\n// make external variables private to source file with static:\nstatic int j = 0; //other files using testFunc2() cannot access variable j\nvoid testFunc2() {\n  extern int j;\n}\n// The static keyword makes a variable inaccessible to code outside the\n// compilation unit. (On almost all systems, a \"compilation unit\" is a .c\n// file.) static can apply both to global (to the compilation unit) variables,\n// functions, and function-local variables. When using static with\n// function-local variables, the variable is effectively global and retains its\n// value across function calls, but is only accessible within the function it\n// is declared in. Additionally, static variables are initialized to 0 if not\n// declared with some other starting value.\n//**You may also declare functions as static to make them private**\n\n///////////////////////////////////////\n// User-defined types and structs\n///////////////////////////////////////\n\n// Typedefs can be used to create type aliases\ntypedef int my_type;\nmy_type my_type_var = 0;\n\n// Structs are just collections of data, the members are allocated sequentially,\n// in the order they are written:\nstruct rectangle {\n  int width;\n  int height;\n};\n\n// It's not generally true that\n// sizeof(struct rectangle) == sizeof(int) + sizeof(int)\n// due to potential padding between the structure members (this is for alignment\n// reasons). [1]\n\nvoid function_1()\n{\n  struct rectangle my_rec = { 1, 2 }; // Fields can be initialized immediately\n\n  // Access struct members with .\n  my_rec.width = 10;\n  my_rec.height = 20;\n\n  // You can declare pointers to structs\n  struct rectangle *my_rec_ptr = &my_rec;\n\n  // Use dereferencing to set struct pointer members...\n  (*my_rec_ptr).width = 30;\n\n  // ... or even better: prefer the -> shorthand for the sake of readability\n  my_rec_ptr->height = 10; // Same as (*my_rec_ptr).height = 10;\n}\n\n// You can apply a typedef to a struct for convenience\ntypedef struct rectangle rect;\n\nint area(rect r)\n{\n  return r.width * r.height;\n}\n\n// Typedefs can also be defined right during struct definition\ntypedef struct {\n  int width;\n  int height;\n} rect;\n// Like before, doing this means one can type\nrect r;\n// instead of having to type\nstruct rectangle r;\n\n// if you have large structs, you can pass them \"by pointer\" to avoid copying\n// the whole struct:\nint areaptr(const rect *r)\n{\n  return r->width * r->height;\n}\n\n///////////////////////////////////////\n// Function pointers\n///////////////////////////////////////\n/*\nAt run time, functions are located at known memory addresses. Function pointers are\nmuch like any other pointer (they just store a memory address), but can be used\nto invoke functions directly, and to pass handlers (or callback functions) around.\nHowever, definition syntax may be initially confusing.\n\nExample: use str_reverse from a pointer\n*/\nvoid str_reverse_through_pointer(char *str_in) {\n  // Define a function pointer variable, named f.\n  void (*f)(char *); // Signature should exactly match the target function.\n  f = &str_reverse; // Assign the address for the actual function (determined at run time)\n  // f = str_reverse; would work as well - functions decay into pointers, similar to arrays\n  (*f)(str_in); // Just calling the function through the pointer\n  // f(str_in); // That's an alternative but equally valid syntax for calling it.\n}\n\n/*\nAs long as function signatures match, you can assign any function to the same pointer.\nFunction pointers are usually typedef'd for simplicity and readability, as follows:\n*/\n\ntypedef void (*my_fnp_type)(char *);\n\n// Then used when declaring the actual pointer variable:\n// ...\n// my_fnp_type f;\n\n\n/////////////////////////////\n// Printing characters with printf()\n/////////////////////////////\n\n//Special characters:\n/*\n'\\a'; // alert (bell) character\n'\\n'; // newline character\n'\\t'; // tab character (left justifies text)\n'\\v'; // vertical tab\n'\\f'; // new page (form feed)\n'\\r'; // carriage return\n'\\b'; // backspace character\n'\\0'; // NULL character. Usually put at end of strings in C.\n//   hello\\n\\0. \\0 used by convention to mark end of string.\n'\\\\'; // backslash\n'\\?'; // question mark\n'\\''; // single quote\n'\\\"'; // double quote\n'\\xhh'; // hexadecimal number. Example: '\\xb' = vertical tab character\n'\\0oo'; // octal number. Example: '\\013' = vertical tab character\n\n//print formatting:\n\"%d\";    // integer\n\"%3d\";   // integer with minimum of length 3 digits (right justifies text)\n\"%s\";    // string\n\"%f\";    // float\n\"%ld\";   // long\n\"%3.2f\"; // minimum 3 digits left and 2 digits right decimal float\n\"%7.4s\"; // (can do with strings too)\n\"%c\";    // char\n\"%p\";    // pointer. NOTE: need to (void *)-cast the pointer, before passing\n         //                it as an argument to `printf`.\n\"%x\";    // hexadecimal\n\"%o\";    // octal\n\"%%\";    // prints %\n*/\n\n///////////////////////////////////////\n// Order of Evaluation\n///////////////////////////////////////\n\n// From top to bottom, top has higher precedence\n//---------------------------------------------------//\n//        Operators                  | Associativity //\n//---------------------------------------------------//\n// () [] -> .                        | left to right //\n// ! ~ ++ -- + = *(type) sizeof      | right to left //\n// * / %                             | left to right //\n// + -                               | left to right //\n// << >>                             | left to right //\n// < <= > >=                         | left to right //\n// == !=                             | left to right //\n// &                                 | left to right //\n// ^                                 | left to right //\n// |                                 | left to right //\n// &&                                | left to right //\n// ||                                | left to right //\n// ?:                                | right to left //\n// = += -= *= /= %= &= ^= |= <<= >>= | right to left //\n// ,                                 | left to right //\n//---------------------------------------------------//\n\n/******************************* Header Files **********************************\n\nHeader files are an important part of C as they allow for the connection of C\nsource files and can simplify code and definitions by separating them into\nseparate files.\n\nHeader files are syntactically similar to C source files but reside in \".h\"\nfiles. They can be included in your C source file by using the precompiler\ncommand #include \"example.h\", given that example.h exists in the same directory\nas the C file.\n*/\n\n/* A safe guard to prevent the header from being defined too many times. This */\n/* happens in the case of circle dependency, the contents of the header is    */\n/* already defined.                                                           */\n#ifndef EXAMPLE_H /* if EXAMPLE_H is not yet defined. */\n#define EXAMPLE_H /* Define the macro EXAMPLE_H. */\n\n/* Other headers can be included in headers and therefore transitively */\n/* included into files that include this header.                       */\n#include <string.h>\n\n/* Like for c source files, macros can be defined in headers */\n/* and used in files that include this header file.          */\n#define EXAMPLE_NAME \"Dennis Ritchie\"\n\n/* Function macros can also be defined.  */\n#define ADD(a, b) ((a) + (b))\n\n/* Notice the parenthesis surrounding the arguments -- this is important to   */\n/* ensure that a and b don't get expanded in an unexpected way (e.g. consider */\n/* MUL(x, y) (x * y); MUL(1 + 2, 3) would expand to (1 + 2 * 3), yielding an  */\n/* incorrect result)                                                          */\n\n/* Structs and typedefs can be used for consistency between files. */\ntypedef struct Node\n{\n    int val;\n    struct Node *next;\n} Node;\n\n/* So can enumerations. */\nenum traffic_light_state {GREEN, YELLOW, RED};\n\n/* Function prototypes can also be defined here for use in multiple files,  */\n/* but it is bad practice to define the function in the header. Definitions */\n/* should instead be put in a C file.                                       */\nNode createLinkedList(int *vals, int len);\n\n/* Beyond the above elements, other definitions should be left to a C source */\n/* file. Excessive includes or definitions should also not be contained in   */\n/* a header file but instead put into separate headers or a C file.          */\n\n#endif /* End of the if precompiler directive. */\n```\n\n## Further Reading\n\nBest to find yourself a copy of [K&R, aka \"The C Programming Language\"](https://en.wikipedia.org/wiki/The_C_Programming_Language). It is _the_ book about C, written by Dennis Ritchie, the creator of C, and Brian Kernighan. Be careful, though - it's ancient and it contains some\ninaccuracies (well, ideas that are not considered good anymore) or now-changed practices.\n\nAnother good resource is [Learn C The Hard Way](http://learncodethehardway.org/c/) (not free).\n\nIf you have a question, read the [compl.lang.c Frequently Asked Questions](http://c-faq.com).\n\nIt's very important to use proper spacing, indentation and to be consistent with your coding style in general.\nReadable code is better than clever code and fast code. For a good, sane coding style to adopt, see the\n[Linux kernel coding style](https://www.kernel.org/doc/Documentation/process/coding-style.rst).\n\n[1] [Why isn't sizeof for a struct equal to the sum of sizeof of each member?](https://stackoverflow.com/questions/119123/why-isnt-sizeof-for-a-struct-equal-to-the-sum-of-sizeof-of-each-member)\n"
        },
        {
          "name": "ca",
          "type": "tree",
          "content": null
        },
        {
          "name": "chapel.md",
          "type": "blob",
          "size": 39.5908203125,
          "content": "---\nname: Chapel\nfilename: learnchapel.chpl\ncontributors:\n    - [\"Ian J. Bertolacci\", \"https://www.cs.arizona.edu/~ianbertolacci/\"]\n    - [\"Ben Harshbarger\", \"https://github.com/benharsh/\"]\n---\n\nYou can read all about Chapel at [Cray's official Chapel website](https://chapel-lang.org).\nIn short, Chapel is an open-source, high-productivity, parallel-programming\nlanguage in development at Cray Inc., and is designed to run on multi-core PCs\nas well as multi-kilocore supercomputers.\n\nMore information and support can be found at the bottom of this document.\n\nYou can refer to the official site for [latest version](https://chapel-lang.org/docs/master/primers/learnChapelInYMinutes.html) of this document.\n\n```chapel\n/*\n   Learn Chapel in Y Minutes\n   \n   This primer will go over basic syntax and concepts in Chapel.\n   Last sync with official page: Sun, 08 Mar 2020 08:05:53 +0000\n*/\n\n// Comments are C-family style\n\n// one line comment\n/*\n    multi-line comment\n*/\n\n/*\nBasic printing\n*/\n\nwrite(\"Hello, \");\nwriteln(\"World!\");\n\n// ``write`` and ``writeln`` can take a list of things to print.\n// Each thing is printed right next to the others, so include your spacing!\nwriteln(\"There are \", 3, \" commas (\\\",\\\") in this line of code\");\n\n// Different output channels:\nuse IO; // Required for accessing the alternative output channels\n\nstdout.writeln(\"This goes to standard output, just like plain writeln() does\");\nstderr.writeln(\"This goes to standard error\");\n\n/*\nVariables\n*/\n\n// Variables don't have to be explicitly typed as long as\n// the compiler can figure out the type that it will hold.\n// 10 is an ``int``, so ``myVar`` is implicitly an ``int``\nvar myVar = 10;\nmyVar = -10;\nvar mySecondVar = myVar;\n// ``var anError;`` would be a compile-time error.\n\n// We can (and should) explicitly type things.\nvar myThirdVar: real;\nvar myFourthVar: real = -1.234;\nmyThirdVar = myFourthVar;\n\n/*\nTypes\n*/\n\n// There are a number of basic types.\nvar myInt: int = -1000; // Signed ints\nvar myUint: uint = 1234; // Unsigned ints\nvar myReal: real = 9.876; // Floating point numbers\nvar myImag: imag = 5.0i; // Imaginary numbers\nvar myCplx: complex = 10 + 9i; // Complex numbers\nmyCplx = myInt + myImag; // Another way to form complex numbers\nvar myBool: bool = false; // Booleans\nvar myStr: string = \"Some string...\"; // Strings\nvar singleQuoteStr = 'Another string...'; // String literal with single quotes\n\n// Some types can have sizes.\nvar my8Int: int(8) = 10; // 8 bit (one byte) sized int;\nvar my64Real: real(64) = 1.516; // 64 bit (8 bytes) sized real\n\n// Typecasting.\nvar intFromReal = myReal : int;\nvar intFromReal2: int = myReal : int;\n\n// Type aliasing.\ntype chroma = int;        // Type of a single hue\ntype RGBColor = 3*chroma; // Type representing a full color\nvar black: RGBColor = (0,0,0);\nvar white: RGBColor = (255, 255, 255);\n\n/*\nConstants and Parameters\n*/\n\n// A ``const`` is a constant, and cannot be changed after set in runtime.\nconst almostPi: real = 22.0/7.0;\n\n// A ``param`` is a constant whose value must be known statically at\n// compile-time.\nparam compileTimeConst: int = 16;\n\n// The ``config`` modifier allows values to be set at the command line.\n// Set with ``--varCmdLineArg=Value`` or ``--varCmdLineArg Value`` at runtime.\nconfig var varCmdLineArg: int = -123;\nconfig const constCmdLineArg: int = 777;\n\n// ``config param`` can be set at compile-time.\n// Set with ``--set paramCmdLineArg=value`` at compile-time.\nconfig param paramCmdLineArg: bool = false;\nwriteln(varCmdLineArg, \", \", constCmdLineArg, \", \", paramCmdLineArg);\n\n/*\nReferences\n*/\n\n// ``ref`` operates much like a reference in C++. In Chapel, a ``ref`` cannot\n// be made to alias a variable other than the variable it is initialized with.\n// Here, ``refToActual`` refers to ``actual``.\nvar actual = 10;\nref refToActual = actual; \nwriteln(actual, \" == \", refToActual); // prints the same value\nactual = -123; // modify actual (which refToActual refers to)\nwriteln(actual, \" == \", refToActual); // prints the same value\nrefToActual = 99999999; // modify what refToActual refers to (which is actual)\nwriteln(actual, \" == \", refToActual); // prints the same value\n\n/*\nOperators\n*/\n\n// Math operators:\nvar a: int, thisInt = 1234, thatInt = 5678;\na = thisInt + thatInt;  // Addition\na = thisInt * thatInt;  // Multiplication\na = thisInt - thatInt;  // Subtraction\na = thisInt / thatInt;  // Division\na = thisInt ** thatInt; // Exponentiation\na = thisInt % thatInt;  // Remainder (modulo)\n\n// Logical operators:\nvar b: bool, thisBool = false, thatBool = true;\nb = thisBool && thatBool; // Logical and\nb = thisBool || thatBool; // Logical or\nb = !thisBool;            // Logical negation\n\n// Relational operators:\nb = thisInt > thatInt;           // Greater-than\nb = thisInt >= thatInt;          // Greater-than-or-equal-to\nb = thisInt < a && a <= thatInt; // Less-than, and, less-than-or-equal-to\nb = thisInt != thatInt;          // Not-equal-to\nb = thisInt == thatInt;          // Equal-to\n\n// Bitwise operators:\na = thisInt << 10;     // Left-bit-shift by 10 bits;\na = thatInt >> 5;      // Right-bit-shift by 5 bits;\na = ~thisInt;          // Bitwise-negation\na = thisInt ^ thatInt; // Bitwise exclusive-or\n\n// Compound assignment operators:\na += thisInt;          // Addition-equals (a = a + thisInt;)\na *= thatInt;          // Times-equals (a = a * thatInt;)\nb &&= thatBool;        // Logical-and-equals (b = b && thatBool;)\na <<= 3;               // Left-bit-shift-equals (a = a << 10;)\n\n// Unlike other C family languages, there are no\n// pre/post-increment/decrement operators, such as:\n//\n// ``++j``, ``--j``, ``j++``, ``j--``\n\n// Swap operator:\nvar old_this = thisInt;\nvar old_that = thatInt;\nthisInt <=> thatInt; // Swap the values of thisInt and thatInt\nwriteln((old_this == thatInt) && (old_that == thisInt));\n\n// Operator overloads can also be defined, as we'll see with procedures.\n\n/*\nTuples\n*/\n\n// Tuples can be of the same type or different types.\nvar sameTup: 2*int = (10, -1);\nvar sameTup2 = (11, -6);\nvar diffTup: (int,real,complex) = (5, 1.928, myCplx);\nvar diffTupe2 = (7, 5.64, 6.0+1.5i);\n\n// Tuples can be accessed using square brackets or parentheses, and are\n// 1-indexed.\nwriteln(\"(\", sameTup[1], \",\", sameTup(2), \")\");\nwriteln(diffTup);\n\n// Tuples can also be written into.\ndiffTup(1) = -1;\n\n// Tuple values can be expanded into their own variables.\nvar (tupInt, tupReal, tupCplx) = diffTup;\nwriteln(diffTup == (tupInt, tupReal, tupCplx));\n\n// They are also useful for writing a list of variables, as is common in debugging.\nwriteln((a,b,thisInt,thatInt,thisBool,thatBool));\n\n/*\nControl Flow\n*/\n\n// ``if`` - ``then`` - ``else`` works just like any other C-family language.\nif 10 < 100 then\n  writeln(\"All is well\");\n\nif -1 < 1 then\n  writeln(\"Continuing to believe reality\");\nelse\n  writeln(\"Send mathematician, something's wrong\");\n\n// You can use parentheses if you prefer.\nif (10 > 100) {\n  writeln(\"Universe broken. Please reboot universe.\");\n}\n\nif a % 2 == 0 {\n  writeln(a, \" is even.\");\n} else {\n  writeln(a, \" is odd.\");\n}\n\nif a % 3 == 0 {\n  writeln(a, \" is even divisible by 3.\");\n} else if a % 3 == 1 {\n  writeln(a, \" is divided by 3 with a remainder of 1.\");\n} else {\n  writeln(b, \" is divided by 3 with a remainder of 2.\");\n}\n\n// Ternary: ``if`` - ``then`` - ``else`` in a statement.\nvar maximum = if thisInt < thatInt then thatInt else thisInt;\n\n// ``select`` statements are much like switch statements in other languages.\n// However, ``select`` statements don't cascade like in C or Java.\nvar inputOption = \"anOption\";\nselect inputOption {\n  when \"anOption\" do writeln(\"Chose 'anOption'\");\n  when \"otherOption\" {\n    writeln(\"Chose 'otherOption'\");\n    writeln(\"Which has a body\");\n  }\n  otherwise {\n    writeln(\"Any other Input\");\n    writeln(\"the otherwise case doesn't need a do if the body is one line\");\n  }\n}\n\n// ``while`` and ``do``-``while`` loops also behave like their C counterparts.\nvar j: int = 1;\nvar jSum: int = 0;\nwhile (j <= 1000) {\n  jSum += j;\n  j += 1;\n}\nwriteln(jSum);\n\ndo {\n  jSum += j;\n  j += 1;\n} while (j <= 10000);\nwriteln(jSum);\n\n// ``for`` loops are much like those in python in that they iterate over a\n// range. Ranges (like the ``1..10`` expression below) are a first-class object\n// in Chapel, and as such can be stored in variables.\nfor i in 1..10 do write(i, \", \");\nwriteln();\n\nvar iSum: int = 0;\nfor i in 1..1000 {\n  iSum += i;\n}\nwriteln(iSum);\n\nfor x in 1..10 {\n  for y in 1..10 {\n    write((x,y), \"\\t\");\n  }\n  writeln();\n}\n\n/*\nRanges and Domains\n*/\n\n// For-loops and arrays both use ranges and domains to define an index set that\n// can be iterated over. Ranges are single dimensional integer indices, while\n// domains can be multi-dimensional and represent indices of different types.\n\n// They are first-class citizen types, and can be assigned into variables.\nvar range1to10: range = 1..10;  // 1, 2, 3, ..., 10\nvar range2to11 = 2..11; // 2, 3, 4, ..., 11\nvar rangeThisToThat: range = thisInt..thatInt; // using variables\nvar rangeEmpty: range = 100..-100; // this is valid but contains no indices\n\n// Ranges can be unbounded.\nvar range1toInf: range(boundedType=BoundedRangeType.boundedLow) = 1.. ; // 1, 2, 3, 4, 5, ...\nvar rangeNegInfTo1 = ..1; // ..., -4, -3, -2, -1, 0, 1\n\n// Ranges can be strided (and reversed) using the ``by`` operator.\nvar range2to10by2: range(stridable=true) = 2..10 by 2; // 2, 4, 6, 8, 10\nvar reverse2to10by2 = 2..10 by -2; // 10, 8, 6, 4, 2\n\nvar trapRange = 10..1 by -1; // Do not be fooled, this is still an empty range\nwriteln(\"Size of range '\", trapRange, \"' = \", trapRange.size);\n\n// Note: ``range(boundedType= ...)`` and ``range(stridable= ...)`` are only\n// necessary if we explicitly type the variable.\n\n// The end point of a range can be computed by specifying the total size\n// of the range using the count (``#``) operator.\nvar rangeCount: range = -5..#12; // range from -5 to 6\n\n// Operators can be mixed.\nvar rangeCountBy: range(stridable=true) = -5..#12 by 2; // -5, -3, -1, 1, 3, 5\nwriteln(rangeCountBy);\n\n// Properties of the range can be queried.\n// In this example, printing the first index, last index, number of indices,\n// stride, and if 2 is include in the range.\nwriteln((rangeCountBy.first, rangeCountBy.last, rangeCountBy.size,\n           rangeCountBy.stride, rangeCountBy.contains(2)));\n\nfor i in rangeCountBy {\n  write(i, if i == rangeCountBy.last then \"\\n\" else \", \");\n}\n\n// Rectangular domains are defined using the same range syntax,\n// but they are required to be bounded (unlike ranges).\nvar domain1to10: domain(1) = {1..10};        // 1D domain from 1..10;\nvar twoDimensions: domain(2) = {-2..2,0..2}; // 2D domain over product of ranges\nvar thirdDim: range = 1..16;\nvar threeDims: domain(3) = {thirdDim, 1..10, 5..10}; // using a range variable\n\n// Domains can also be resized\nvar resizedDom = {1..10};\nwriteln(\"before, resizedDom = \", resizedDom);\nresizedDom = {-10..#10};\nwriteln(\"after, resizedDom = \", resizedDom);\n\n// Indices can be iterated over as tuples.\nfor idx in twoDimensions do\n  write(idx, \", \");\nwriteln();\n\n// These tuples can also be destructured.\nfor (x,y) in twoDimensions {\n  write(\"(\", x, \", \", y, \")\", \", \");\n}\nwriteln();\n\n// Associative domains act like sets.\nvar stringSet: domain(string); // empty set of strings\nstringSet += \"a\";\nstringSet += \"b\";\nstringSet += \"c\";\nstringSet += \"a\"; // Redundant add \"a\"\nstringSet -= \"c\"; // Remove \"c\"\nwriteln(stringSet.sorted());\n\n// Associative domains can also have a literal syntax\nvar intSet = {1, 2, 4, 5, 100};\n\n// Both ranges and domains can be sliced to produce a range or domain with the\n// intersection of indices.\nvar rangeA = 1.. ; // range from 1 to infinity\nvar rangeB =  ..5; // range from negative infinity to 5\nvar rangeC = rangeA[rangeB]; // resulting range is 1..5\nwriteln((rangeA, rangeB, rangeC));\n\nvar domainA = {1..10, 5..20};\nvar domainB = {-5..5, 1..10};\nvar domainC = domainA[domainB];\nwriteln((domainA, domainB, domainC));\n\n/*\nArrays\n*/\n\n// Arrays are similar to those of other languages.\n// Their sizes are defined using domains that represent their indices.\nvar intArray: [1..10] int;\nvar intArray2: [{1..10}] int; // equivalent\n\n// They can be accessed using either brackets or parentheses\nfor i in 1..10 do\n  intArray[i] = -i;\nwriteln(intArray);\n\n// We cannot access ``intArray[0]`` because it exists outside\n// of the index set, ``{1..10}``, we defined it to have.\n// ``intArray[11]`` is illegal for the same reason.\nvar realDomain: domain(2) = {1..5,1..7};\nvar realArray: [realDomain] real;\nvar realArray2: [1..5,1..7] real;   // equivalent\nvar realArray3: [{1..5,1..7}] real; // equivalent\n\nfor i in 1..5 {\n  for j in realDomain.dim(2) {   // Only use the 2nd dimension of the domain\n    realArray[i,j] = -1.61803 * i + 0.5 * j;  // Access using index list\n    var idx: 2*int = (i,j);                   // Note: 'index' is a keyword\n    realArray[idx] = - realArray[(i,j)];      // Index using tuples\n  }\n}\n\n// Arrays have domains as members, and can be iterated over as normal.\nfor idx in realArray.domain {  // Again, idx is a 2*int tuple\n  realArray[idx] = 1 / realArray[idx[1], idx[2]]; // Access by tuple and list\n}\n\nwriteln(realArray);\n\n// The values of an array can also be iterated directly.\nvar rSum: real = 0;\nfor value in realArray {\n  rSum += value; // Read a value\n  value = rSum;  // Write a value\n}\nwriteln(rSum, \"\\n\", realArray);\n\n// Associative arrays (dictionaries) can be created using associative domains.\nvar dictDomain: domain(string) = { \"one\", \"two\", \"three\"};\nvar dict: [dictDomain] int = [\"one\" => 1, \"two\" => 2, \"three\" => 3];\n\nfor key in dictDomain.sorted() do\n  writeln(dict[key]);\n\n// Arrays can be assigned to each other in a few different ways.\n// These arrays will be used in the example.\nvar thisArray : [0..5] int = [0,1,2,3,4,5];\nvar thatArray : [0..5] int;\n\n// First, simply assign one to the other. This copies ``thisArray`` into\n// ``thatArray``, instead of just creating a reference. Therefore, modifying\n// ``thisArray`` does not also modify ``thatArray``.\n\nthatArray = thisArray;\nthatArray[1] = -1;\nwriteln((thisArray, thatArray));\n\n// Assign a slice from one array to a slice (of the same size) in the other.\nthatArray[4..5] = thisArray[1..2];\nwriteln((thisArray, thatArray));\n\n// Operations can also be promoted to work on arrays. 'thisPlusThat' is also\n// an array.\nvar thisPlusThat = thisArray + thatArray;\nwriteln(thisPlusThat);\n\n// Moving on, arrays and loops can also be expressions, where the loop\n// body's expression is the result of each iteration.\nvar arrayFromLoop = for i in 1..10 do i;\nwriteln(arrayFromLoop);\n\n// An expression can result in nothing, such as when filtering with an if-expression.\nvar evensOrFives = for i in 1..10 do if (i % 2 == 0 || i % 5 == 0) then i;\n\nwriteln(arrayFromLoop);\n\n// Array expressions can also be written with a bracket notation.\n// Note: this syntax uses the ``forall`` parallel concept discussed later.\nvar evensOrFivesAgain = [i in 1..10] if (i % 2 == 0 || i % 5 == 0) then i;\n\n// They can also be written over the values of the array.\narrayFromLoop = [value in arrayFromLoop] value + 1;\n\n\n/*\nProcedures\n*/\n\n// Chapel procedures have similar syntax functions in other languages. \nproc fibonacci(n : int) : int {\n  if n <= 1 then return n;\n  return fibonacci(n-1) + fibonacci(n-2);\n}\n\n// Input parameters can be untyped to create a generic procedure.\nproc doublePrint(thing): void {\n  write(thing, \" \", thing, \"\\n\");\n}\n\n// The return type can be inferred, as long as the compiler can figure it out.\nproc addThree(n) {\n  return n + 3;\n}\n\ndoublePrint(addThree(fibonacci(20)));\n\n// It is also possible to take a variable number of parameters.\nproc maxOf(x ...?k) {\n  // x refers to a tuple of one type, with k elements\n  var maximum = x[1];\n  for i in 2..k do maximum = if maximum < x[i] then x[i] else maximum;\n  return maximum;\n}\nwriteln(maxOf(1, -10, 189, -9071982, 5, 17, 20001, 42));\n\n// Procedures can have default parameter values, and\n// the parameters can be named in the call, even out of order.\nproc defaultsProc(x: int, y: real = 1.2634): (int,real) {\n  return (x,y);\n}\n\nwriteln(defaultsProc(10));\nwriteln(defaultsProc(x=11));\nwriteln(defaultsProc(x=12, y=5.432));\nwriteln(defaultsProc(y=9.876, x=13));\n\n// The ``?`` operator is called the query operator, and is used to take\n// undetermined values like tuple or array sizes and generic types.\n// For example, taking arrays as parameters. The query operator is used to\n// determine the domain of ``A``. This is useful for defining the return type,\n// though it's not required.\nproc invertArray(A: [?D] int): [D] int{\n  for a in A do a = -a;\n  return A;\n}\n\nwriteln(invertArray(intArray));\n\n// We can query the type of arguments to generic procedures.\n// Here we define a procedure that takes two arguments of\n// the same type, yet we don't define what that type is.\nproc genericProc(arg1 : ?valueType, arg2 : valueType): void {\n  select(valueType) {\n    when int do writeln(arg1, \" and \", arg2, \" are ints\");\n    when real do writeln(arg1, \" and \", arg2, \" are reals\");\n    otherwise writeln(arg1, \" and \", arg2, \" are somethings!\");\n  }\n}\n\ngenericProc(1, 2);\ngenericProc(1.2, 2.3);\ngenericProc(1.0+2.0i, 3.0+4.0i);\n\n// We can also enforce a form of polymorphism with the ``where`` clause\n// This allows the compiler to decide which function to use.\n// Note: That means that all information needs to be known at compile-time.\n// The param modifier on the arg is used to enforce this constraint.\nproc whereProc(param N : int): void\n where (N > 0) {\n  writeln(\"N is greater than 0\");\n}\n\nproc whereProc(param N : int): void\n where (N < 0) {\n  writeln(\"N is less than 0\");\n}\n\nwhereProc(10);\nwhereProc(-1);\n\n// ``whereProc(0)`` would result in a compiler error because there\n// are no functions that satisfy the ``where`` clause's condition.\n// We could have defined a ``whereProc`` without a ``where`` clause\n// that would then have served as a catch all for all the other cases\n// (of which there is only one).\n\n// ``where`` clauses can also be used to constrain based on argument type.\nproc whereType(x: ?t) where t == int {\n  writeln(\"Inside 'int' version of 'whereType': \", x);\n}\n\nproc whereType(x: ?t) {\n  writeln(\"Inside general version of 'whereType': \", x);\n}\n\nwhereType(42);\nwhereType(\"hello\");\n\n/*\nIntents\n*/\n\n/* Intent modifiers on the arguments convey how those arguments are passed to the procedure.\n\n     * in: copy arg in, but not out\n     * out: copy arg out, but not in\n     * inout: copy arg in, copy arg out\n     * ref: pass arg by reference\n*/\nproc intentsProc(in inarg, out outarg, inout inoutarg, ref refarg) {\n  writeln(\"Inside Before: \", (inarg, outarg, inoutarg, refarg));\n  inarg = inarg + 100;\n  outarg = outarg + 100;\n  inoutarg = inoutarg + 100;\n  refarg = refarg + 100;\n  writeln(\"Inside After: \", (inarg, outarg, inoutarg, refarg));\n}\n\nvar inVar: int = 1;\nvar outVar: int = 2;\nvar inoutVar: int = 3;\nvar refVar: int = 4;\nwriteln(\"Outside Before: \", (inVar, outVar, inoutVar, refVar));\nintentsProc(inVar, outVar, inoutVar, refVar);\nwriteln(\"Outside After: \", (inVar, outVar, inoutVar, refVar));\n\n// Similarly, we can define intents on the return type.\n// ``refElement`` returns a reference to an element of array.\n// This makes more practical sense for class methods where references to\n// elements in a data-structure are returned via a method or iterator.\nproc refElement(array : [?D] ?T, idx) ref : T {\n  return array[idx];\n}\n\nvar myChangingArray : [1..5] int = [1,2,3,4,5];\nwriteln(myChangingArray);\nref refToElem = refElement(myChangingArray, 5); // store reference to element in ref variable\nwriteln(refToElem);\nrefToElem = -2; // modify reference which modifies actual value in array\nwriteln(refToElem);\nwriteln(myChangingArray);\n\n/*\nOperator Definitions\n*/\n\n// Chapel allows for operators to be overloaded.\n// We can define the unary operators:\n// ``+ - ! ~``\n// and the binary operators:\n// ``+ - * / % ** == <= >= < > << >> & | ˆ by``\n// ``+= -= *= /= %= **= &= |= ˆ= <<= >>= <=>``\n\n// Boolean exclusive or operator.\nproc ^(left : bool, right : bool): bool {\n  return (left || right) && !(left && right);\n}\n\nwriteln(true  ^ true);\nwriteln(false ^ true);\nwriteln(true  ^ false);\nwriteln(false ^ false);\n\n// Define a ``*`` operator on any two types that returns a tuple of those types.\nproc *(left : ?ltype, right : ?rtype): (ltype, rtype) {\n  writeln(\"\\tIn our '*' overload!\");\n  return (left, right);\n}\n\nwriteln(1 * \"a\"); // Uses our ``*`` operator.\nwriteln(1 * 2);   // Uses the default ``*`` operator.\n\n//  Note: You could break everything if you get careless with your overloads.\n//  This here will break everything. Don't do it.\n\n/* \n\n      proc +(left: int, right: int): int {\n        return left - right;\n      }\n*/\n\n/*\nIterators\n*/\n\n// Iterators are sisters to the procedure, and almost everything about\n// procedures also applies to iterators. However, instead of returning a single\n// value, iterators may yield multiple values to a loop.\n//\n// This is useful when a complicated set or order of iterations is needed, as\n// it allows the code defining the iterations to be separate from the loop\n// body.\niter oddsThenEvens(N: int): int {\n  for i in 1..N by 2 do\n    yield i; // yield values instead of returning.\n  for i in 2..N by 2 do\n    yield i;\n}\n\nfor i in oddsThenEvens(10) do write(i, \", \");\nwriteln();\n\n// Iterators can also yield conditionally, the result of which can be nothing\niter absolutelyNothing(N): int {\n  for i in 1..N {\n    if N < i { // Always false\n      yield i;     // Yield statement never happens\n    }\n  }\n}\n\nfor i in absolutelyNothing(10) {\n  writeln(\"Woa there! absolutelyNothing yielded \", i);\n}\n\n// We can zipper together two or more iterators (who have the same number\n// of iterations) using ``zip()`` to create a single zipped iterator, where each\n// iteration of the zipped iterator yields a tuple of one value yielded\n// from each iterator.\nfor (positive, negative) in zip(1..5, -5..-1) do\n  writeln((positive, negative));\n\n// Zipper iteration is quite important in the assignment of arrays,\n// slices of arrays, and array/loop expressions.\nvar fromThatArray : [1..#5] int = [1,2,3,4,5];\nvar toThisArray : [100..#5] int;\n\n// Some zipper operations implement other operations.\n// The first statement and the loop are equivalent.\ntoThisArray = fromThatArray;\nfor (i,j) in zip(toThisArray.domain, fromThatArray.domain) {\n  toThisArray[i] = fromThatArray[j];\n}\n\n// These two chunks are also equivalent.\ntoThisArray = [j in -100..#5] j;\nwriteln(toThisArray);\n\nfor (i, j) in zip(toThisArray.domain, -100..#5) {\n  toThisArray[i] = j;\n}\nwriteln(toThisArray);\n\n// This is very important in understanding why this statement exhibits a runtime error.\n\n/* \n      var iterArray : [1..10] int = [i in 1..10] if (i % 2 == 1) then i;\n*/\n\n// Even though the domain of the array and the loop-expression are\n// the same size, the body of the expression can be thought of as an iterator.\n// Because iterators can yield nothing, that iterator yields a different number\n// of things than the domain of the array or loop, which is not allowed.\n\n/*\nClasses\n*/\n// Classes are similar to those in C++ and Java, allocated on the heap.\nclass MyClass {\n\n// Member variables\n  var memberInt : int;\n  var memberBool : bool = true;\n\n// By default, any class that doesn't define an initializer gets a\n// compiler-generated initializer, with one argument per field and\n// the field's initial value as the argument's default value.\n// Alternatively, the user can define initializers manually as shown\n// in the following commented-out routine:\n//\n/*       // proc init(val : real) {\n      //   this.memberInt = ceil(val): int;\n      // }\n*/\n\n// Explicitly defined deinitializer.\n// If we did not write one, we would get the compiler-generated deinitializer,\n// which has an empty body.\n  proc deinit() {\n    writeln(\"MyClass deinitializer called \", (this.memberInt, this.memberBool));\n  }\n\n// Class methods.\n  proc setMemberInt(val: int) {\n    this.memberInt = val;\n  }\n\n  proc setMemberBool(val: bool) {\n    this.memberBool = val;\n  }\n\n  proc getMemberInt(): int{\n    return this.memberInt;\n  }\n\n  proc getMemberBool(): bool {\n    return this.memberBool;\n  }\n} // end MyClass\n\n// Call compiler-generated initializer, using default value for memberBool.\n{\n  var myObject = new owned MyClass(10);\n      myObject = new owned MyClass(memberInt = 10); // Equivalent\n  writeln(myObject.getMemberInt());\n\n  // Same, but provide a memberBool value explicitly.\n  var myDiffObject = new owned MyClass(-1, true);\n      myDiffObject = new owned MyClass(memberInt = -1,\n                                       memberBool = true); // Equivalent\n  writeln(myDiffObject);\n\n  // Similar, but rely on the default value of memberInt, passing in memberBool.\n  var myThirdObject = new owned MyClass(memberBool = true);\n  writeln(myThirdObject);\n\n  // If the user-defined initializer above had been uncommented, we could\n  // make the following calls:\n  //\n  /*         // var myOtherObject = new MyClass(1.95);\n        //     myOtherObject = new MyClass(val = 1.95);\n        // writeln(myOtherObject.getMemberInt());\n  */\n\n  // We can define an operator on our class as well, but\n  // the definition has to be outside the class definition.\n  proc +(A : MyClass, B : MyClass) : owned MyClass {\n    return\n      new owned MyClass(memberInt = A.getMemberInt() + B.getMemberInt(),\n                        memberBool = A.getMemberBool() || B.getMemberBool());\n  }\n\n  var plusObject = myObject + myDiffObject;\n  writeln(plusObject);\n\n  // Destruction of an object: calls the deinit() routine and frees its memory.\n  // ``unmanaged`` variables should have ``delete`` called on them.\n  // ``owned`` variables are destroyed when they go out of scope.\n}\n\n// Classes can inherit from one or more parent classes\nclass MyChildClass : MyClass {\n  var memberComplex: complex;\n}\n\n// Here's an example of generic classes.\nclass GenericClass {\n  type classType;\n  var classDomain: domain(1);\n  var classArray: [classDomain] classType;\n\n// Explicit initializer.\n  proc init(type classType, elements : int) {\n    this.classType = classType;\n    this.classDomain = {1..elements};\n    // all generic and const fields must be initialized in \"phase 1\" prior\n    // to a call to the superclass initializer.\n  }\n\n// Copy-style initializer.\n// Note: We include a type argument whose default is the type of the first\n// argument.  This lets our initializer copy classes of different\n// types and cast on the fly.\n  proc init(other : GenericClass(?),\n            type classType = other.classType) {\n    this.classType = classType;\n    this.classDomain = other.classDomain;\n    this.classArray = for o in other do o: classType;  // copy and cast\n  }\n\n// Define bracket notation on a GenericClass\n// object so it can behave like a normal array\n// i.e. ``objVar[i]`` or ``objVar(i)``\n  proc this(i : int) ref : classType {\n    return this.classArray[i];\n  }\n\n// Define an implicit iterator for the class\n// to yield values from the array to a loop\n// i.e. ``for i in objVar do ...``\n  iter these() ref : classType {\n    for i in this.classDomain do\n      yield this[i];\n  }\n} // end GenericClass\n\n// Allocate an owned instance of our class\nvar realList = new owned GenericClass(real, 10);\n\n// We can assign to the member array of the object using the bracket\n// notation that we defined.\nfor i in realList.classDomain do realList[i] = i + 1.0;\n\n// We can iterate over the values in our list with the iterator\n// we defined.\nfor value in realList do write(value, \", \");\nwriteln();\n\n// Make a copy of realList using the copy initializer.\nvar copyList = new owned GenericClass(realList);\nfor value in copyList do write(value, \", \");\nwriteln();\n\n// Make a copy of realList and change the type, also using the copy initializer.\nvar copyNewTypeList = new owned GenericClass(realList, int);\nfor value in copyNewTypeList do write(value, \", \");\nwriteln();\n\n\n/*\nModules\n*/\n\n// Modules are Chapel's way of managing name spaces.\n// The files containing these modules do not need to be named after the modules\n// (as in Java), but files implicitly name modules.\n// For example, this file implicitly names the ``learnChapelInYMinutes`` module\n\nmodule OurModule {\n\n// We can use modules inside of other modules.\n// Time is one of the standard modules.\n  use Time;\n\n// We'll use this procedure in the parallelism section.\n  proc countdown(seconds: int) {\n    for i in 1..seconds by -1 {\n      writeln(i);\n      sleep(1);\n    }\n  }\n\n// It is possible to create arbitrarily deep module nests.\n// i.e. submodules of OurModule\n  module ChildModule {\n    proc foo() {\n      writeln(\"ChildModule.foo()\");\n    }\n  }\n\n  module SiblingModule {\n    proc foo() {\n      writeln(\"SiblingModule.foo()\");\n    }\n  }\n} // end OurModule\n\n// Using ``OurModule`` also uses all the modules it uses.\n// Since ``OurModule`` uses ``Time``, we also use ``Time``.\nuse OurModule;\n\n// At this point we have not used ``ChildModule`` or ``SiblingModule`` so\n// their symbols (i.e. ``foo``) are not available to us. However, the module\n// names are available, and we can explicitly call ``foo()`` through them.\nSiblingModule.foo();\nOurModule.ChildModule.foo();\n\n// Now we use ``ChildModule``, enabling unqualified calls.\nuse ChildModule;\nfoo();\n\n/*\nParallelism\n*/\n\n// In other languages, parallelism is typically done with\n// complicated libraries and strange class structure hierarchies.\n// Chapel has it baked right into the language.\n\n// We can declare a main procedure, but all the code above main still gets\n// executed.\nproc main() {\n\n// A ``begin`` statement will spin the body of that statement off\n// into one new task.\n// A ``sync`` statement will ensure that the progress of the main\n// task will not progress until the children have synced back up.\n\n  sync {\n    begin { // Start of new task's body\n      var a = 0;\n      for i in 1..1000 do a += 1;\n      writeln(\"Done: \", a);\n    } // End of new tasks body\n    writeln(\"spun off a task!\");\n  }\n  writeln(\"Back together\");\n\n  proc printFibb(n: int) {\n    writeln(\"fibonacci(\",n,\") = \", fibonacci(n));\n  }\n\n// A ``cobegin`` statement will spin each statement of the body into one new\n// task. Notice here that the prints from each statement may happen in any\n// order.\n  cobegin {\n    printFibb(20); // new task\n    printFibb(10); // new task\n    printFibb(5);  // new task\n    {\n      // This is a nested statement body and thus is a single statement\n      // to the parent statement, executed by a single task.\n      writeln(\"this gets\");\n      writeln(\"executed as\");\n      writeln(\"a whole\");\n    }\n  }\n\n// A ``coforall`` loop will create a new task for EACH iteration.\n// Again we see that prints happen in any order.\n// NOTE: ``coforall`` should be used only for creating tasks!\n// Using it to iterating over a structure is very a bad idea!\n  var num_tasks = 10; // Number of tasks we want\n  coforall taskID in 1..num_tasks {\n    writeln(\"Hello from task# \", taskID);\n  }\n\n// ``forall`` loops are another parallel loop, but only create a smaller number\n// of tasks, specifically ``--dataParTasksPerLocale=`` number of tasks.\n  forall i in 1..100 {\n    write(i, \", \");\n  }\n  writeln();\n\n// Here we see that there are sections that are in order, followed by\n// a section that would not follow (e.g. 1, 2, 3, 7, 8, 9, 4, 5, 6,).\n// This is because each task is taking on a chunk of the range 1..10\n// (1..3, 4..6, or 7..9) doing that chunk serially, but each task happens\n// in parallel. Your results may depend on your machine and configuration\n\n// For both the ``forall`` and ``coforall`` loops, the execution of the\n// parent task will not continue until all the children sync up.\n\n// ``forall`` loops are particularly useful for parallel iteration over arrays.\n// Lets run an experiment to see how much faster a parallel loop is\n  use Time; // Import the Time module to use Timer objects\n  var timer: Timer;\n  var myBigArray: [{1..4000,1..4000}] real; // Large array we will write into\n\n// Serial Experiment:\n  timer.start(); // Start timer\n  for (x,y) in myBigArray.domain { // Serial iteration\n    myBigArray[x,y] = (x:real) / (y:real);\n  }\n  timer.stop(); // Stop timer\n  writeln(\"Serial: \", timer.elapsed()); // Print elapsed time\n  timer.clear(); // Clear timer for parallel loop\n\n// Parallel Experiment:\n  timer.start(); // start timer\n  forall (x,y) in myBigArray.domain { // Parallel iteration\n    myBigArray[x,y] = (x:real) / (y:real);\n  }\n  timer.stop(); // Stop timer\n  writeln(\"Parallel: \", timer.elapsed()); // Print elapsed time\n  timer.clear();\n\n// You may have noticed that (depending on how many cores you have)\n// the parallel loop went faster than the serial loop.\n\n// The bracket style loop-expression described\n// much earlier implicitly uses a ``forall`` loop.\n  [val in myBigArray] val = 1 / val; // Parallel operation\n\n// Atomic variables, common to many languages, are ones whose operations\n// occur uninterrupted. Multiple threads can therefore modify atomic\n// variables and can know that their values are safe.\n// Chapel atomic variables can be of type ``bool``, ``int``,\n// ``uint``, and ``real``.\n  var uranium: atomic int;\n  uranium.write(238);      // atomically write a variable\n  writeln(uranium.read()); // atomically read a variable\n\n// Atomic operations are described as functions, so you can define your own.\n  uranium.sub(3); // atomically subtract a variable\n  writeln(uranium.read());\n\n  var replaceWith = 239;\n  var was = uranium.exchange(replaceWith);\n  writeln(\"uranium was \", was, \" but is now \", replaceWith);\n\n  var isEqualTo = 235;\n  if uranium.compareAndSwap(isEqualTo, replaceWith) {\n    writeln(\"uranium was equal to \", isEqualTo,\n             \" so replaced value with \", replaceWith);\n  } else {\n    writeln(\"uranium was not equal to \", isEqualTo,\n             \" so value stays the same...  whatever it was\");\n  }\n\n  sync {\n    begin { // Reader task\n      writeln(\"Reader: waiting for uranium to be \", isEqualTo);\n      uranium.waitFor(isEqualTo);\n      writeln(\"Reader: uranium was set (by someone) to \", isEqualTo);\n    }\n\n    begin { // Writer task\n      writeln(\"Writer: will set uranium to the value \", isEqualTo, \" in...\");\n      countdown(3);\n      uranium.write(isEqualTo);\n    }\n  }\n\n// ``sync`` variables have two states: empty and full.\n// If you read an empty variable or write a full variable, you are waited\n// until the variable is full or empty again.\n  var someSyncVar$: sync int; // varName$ is a convention not a law.\n  sync {\n    begin { // Reader task\n      writeln(\"Reader: waiting to read.\");\n      var read_sync = someSyncVar$;\n      writeln(\"Reader: value is \", read_sync);\n    }\n\n    begin { // Writer task\n      writeln(\"Writer: will write in...\");\n      countdown(3);\n      someSyncVar$ = 123;\n    }\n  }\n\n// ``single`` vars can only be written once. A read on an unwritten ``single``\n// results in a wait, but when the variable has a value it can be read indefinitely.\n  var someSingleVar$: single int; // varName$ is a convention not a law.\n  sync {\n    begin { // Reader task\n      writeln(\"Reader: waiting to read.\");\n      for i in 1..5 {\n        var read_single = someSingleVar$;\n        writeln(\"Reader: iteration \", i,\", and the value is \", read_single);\n      }\n    }\n\n    begin { // Writer task\n      writeln(\"Writer: will write in...\");\n      countdown(3);\n      someSingleVar$ = 5; // first and only write ever.\n    }\n  }\n\n// Here's an example using atomics and a ``sync`` variable to create a\n// count-down mutex (also known as a multiplexer).\n  var count: atomic int; // our counter\n  var lock$: sync bool;   // the mutex lock\n\n  count.write(2);       // Only let two tasks in at a time.\n  lock$.writeXF(true);  // Set lock$ to full (unlocked)\n  // Note: The value doesn't actually matter, just the state\n  // (full:unlocked / empty:locked)\n  // Also, writeXF() fills (F) the sync var regardless of its state (X)\n\n  coforall task in 1..5 { // Generate tasks\n    // Create a barrier\n    do {\n      lock$;                 // Read lock$ (wait)\n    } while (count.read() < 1); // Keep waiting until a spot opens up\n\n    count.sub(1);          // decrement the counter\n    lock$.writeXF(true); // Set lock$ to full (signal)\n\n    // Actual 'work'\n    writeln(\"Task #\", task, \" doing work.\");\n    sleep(2);\n\n    count.add(1);        // Increment the counter\n    lock$.writeXF(true); // Set lock$ to full (signal)\n  }\n\n// We can define the operations ``+ * & | ^ && || min max minloc maxloc``\n// over an entire array using scans and reductions.\n// Reductions apply the operation over the entire array and\n// result in a scalar value.\n  var listOfValues: [1..10] int = [15,57,354,36,45,15,456,8,678,2];\n  var sumOfValues = + reduce listOfValues;\n  var maxValue = max reduce listOfValues; // 'max' give just max value\n\n// ``maxloc`` gives max value and index of the max value.\n// Note: We have to zip the array and domain together with the zip iterator.\n  var (theMaxValue, idxOfMax) = maxloc reduce zip(listOfValues,\n                                                  listOfValues.domain);\n\n  writeln((sumOfValues, maxValue, idxOfMax, listOfValues[idxOfMax]));\n\n// Scans apply the operation incrementally and return an array with the\n// values of the operation at that index as it progressed through the\n// array from ``array.domain.low`` to ``array.domain.high``.\n  var runningSumOfValues = + scan listOfValues;\n  var maxScan = max scan listOfValues;\n  writeln(runningSumOfValues);\n  writeln(maxScan);\n} // end main()\n```\n\n## Who is this tutorial for?\n\nThis tutorial is for people who want to learn the ropes of chapel without\nhaving to hear about what fiber mixture the ropes are, or how they were\nbraided, or how the braid configurations differ between one another. It won't\nteach you how to develop amazingly performant code, and it's not exhaustive.\nRefer to the [language specification](https://chapel-lang.org/docs/latest/language/spec.html) and\nthe [module documentation](https://chapel-lang.org/docs/latest/) for more\ndetails.\n\nOccasionally check back here and on the [Chapel site](https://chapel-lang.org)\nto see if more topics have been added or more tutorials created.\n\n### What this tutorial is lacking:\n\n* Exposition of the [standard modules](https://chapel-lang.org/docs/latest/modules/standard.html)\n* Multiple Locales (distributed memory system)\n* Records\n* Parallel iterators\n\n## Your input, questions, and discoveries are important to the developers!\n\nThe Chapel language is still in active development, so there are\noccasional hiccups with performance and language features. The more information\nyou give the Chapel development team about issues you encounter or features you\nwould like to see, the better the language becomes.\nThere are several ways to interact with the developers:\n\n* [Gitter chat](https://gitter.im/chapel-lang/chapel)\n* [sourceforge email lists](https://sourceforge.net/p/chapel/mailman)\n\nIf you're really interested in the development of the compiler or contributing\nto the project, [check out the master GitHub repository](https://github.com/chapel-lang/chapel).\nIt is under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).\n\n## Installing the Compiler\n\n[The Official Chapel documentation details how to download and compile the Chapel compiler.](https://chapel-lang.org/docs/usingchapel/QUICKSTART.html)\n\nChapel can be built and installed on your average 'nix machine (and cygwin).\n[Download the latest release version](https://github.com/chapel-lang/chapel/releases/)\nand it's as easy as\n\n1. `tar -xvf chapel-<VERSION>.tar.gz`\n2. `cd chapel-<VERSION>`\n3. `source util/setchplenv.bash # or .sh or .csh or .fish`\n4. `make`\n5. `make check # optional`\n\nYou will need to `source util/setchplenv.EXT` from within the Chapel directory\n(`$CHPL_HOME`) every time your terminal starts so it's suggested that you drop\nthat command in a script that will get executed on startup (like .bashrc).\n\nChapel is easily installed on macOS with Homebrew\n\n1. `brew update`\n2. `brew install chapel`\n\n## Compiling Code\n\nBuilds like other compilers:\n\n`chpl myFile.chpl -o myExe`\n\nNotable arguments:\n\n* `--fast`: enables a number of optimizations and disables array bounds\n  checks. Should only enable when application is stable.\n* `--set <Symbol Name>=<Value>`: set config param `<Symbol Name>` to `<Value>`\n  at compile-time.\n* `--main-module <Module Name>`: use the main() procedure found in the module\n  `<Module Name>` as the executable's main.\n* `--module-dir <Directory>`: includes `<Directory>` in the module search path.\n"
        },
        {
          "name": "chicken.md",
          "type": "blob",
          "size": 17.2109375,
          "content": "---\nname: \"CHICKEN\"\nfilename: CHICKEN.scm\ncontributors:\n  - [\"Diwakar Wagle\", \"https://github.com/deewakar\"]\n---\n\n\nCHICKEN is an implementation of Scheme programming language that can\ncompile Scheme programs to C code as well as interpret them. CHICKEN\nsupports R5RS and R7RS (work in progress) standards and many extensions.\n\n\n```scheme\n;; #!/usr/bin/env csi -s\n\n;; Run the CHICKEN REPL in the commandline as follows :\n;; $ csi\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; 0. Syntax\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Single line comments start with a semicolon\n\n#| Block comments\n   can span multiple lines and...\n   #| can be nested\n   |#\n|#\n\n;; S-expression comments are used to comment out expressions\n#; (display \"nothing\")    ; discard this expression \n\n;; CHICKEN has two fundamental pieces of syntax: Atoms and S-expressions\n;; an atom is something that evaluates to itself\n;; all builtin data types viz. numbers, chars, booleans, strings etc. are atoms\n;; Furthermore an atom can be a symbol, an identifier, a keyword, a procedure\n;; or the empty list (also called null)\n'athing              ;; => athing \n'+                   ;; => + \n+                    ;; => <procedure C_plus>\n\n;; S-expressions (short for symbolic expressions) consists of one or more atoms\n(quote +)            ;; => + ; another way of writing '+\n(+ 1 2 3)            ;; => 6 ; this S-expression evaluates to a function call\n'(+ 1 2 3)           ;; => (+ 1 2 3) ; evaluates to a list \n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; 1. Primitive Datatypes and Operators \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Numbers\n99999999999999999999 ;; integers\n#b1010               ;; binary ; => 10\n#o10                 ;; octal  ; => 8\n#x8ded               ;; hexadecimal ; => 36333\n3.14                 ;; real\n6.02e+23\n3/4                  ;; rational\n\n;;Characters and Strings\n#\\A                  ;; A char\n\"Hello, World!\"      ;; strings are fixed-length arrays of characters\n\n;; Booleans\n#t                  ;; true\n#f                  ;; false\n\n;; Function call is written as (f x y z ...)\n;; where f is a function and x,y,z, ... are arguments\n(print \"Hello, World!\")    ;; => Hello, World!\n;; formatted output\n(printf \"Hello, ~a.\\n\" \"World\")  ;; => Hello, World.\n\n;; print commandline arguments\n(map print (command-line-arguments)) \n\n(list 'foo 'bar 'baz)          ;; => (foo bar baz)\n(string-append \"pine\" \"apple\") ;; => \"pineapple\"\n(string-ref \"tapioca\" 3)       ;; => #\\i;; character 'i' is at index 3\n(string->list \"CHICKEN\")       ;; => (#\\C #\\H #\\I #\\C #\\K #\\E #\\N)\n(string-intersperse '(\"1\" \"2\") \":\") ;; => \"1:2\"\n(string-split \"1:2:3\" \":\")     ;; => (\"1\" \"2\" \"3\")\n\n\n;; Predicates are special functions that return boolean values\n(atom? #t)                ;; => #t\n\n(symbol? #t)              ;; => #f\n\n(symbol? '+)              ;; => #t\n\n(procedure? +)            ;; => #t\n\n(pair? '(1 2))            ;; => #t\n\n(pair? '(1 2 . 3))        ;; => #t\n\n(pair? '())               ;; => #f\n\n(list? '())               ;; => #t\n\n\n;; Some arithmetic operations\n\n(+ 1 1)                   ;; => 2\n(- 8 1)                   ;; => 7\n(* 10 2)                  ;; => 20\n(expt 2 3)                ;; => 8\n(remainder 5 2)           ;; => 1\n(/ 35 5)                  ;; => 7\n(/ 1 3)                   ;; => 0.333333333333333\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; 2. Variables\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; You can create variables with define\n;; A variable name can use any character except: ()[]{}\",'`;#\\\n(define myvar 5)\nmyvar        ;; => 5\n\n;; Alias to a procedure\n(define ** expt)\n(** 2 3)     ;; => 8\n\n;; Accessing an undefined variable raises an exception\ns            ;; => Error: unbound variable: s\n\n;; Local binding\n(let ((me \"Bob\"))\n  (print me))     ;; => Bob\n\n(print me)        ;; => Error: unbound variable: me\n\n;; Assign a new value to previously defined variable\n(set! myvar 10) \nmyvar             ;; => 10\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; 3. Collections\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Pairs\n;; 'cons' constructs pairs, \n;; 'car' extracts the first element, 'cdr' extracts the rest of the elements\n(cons 'subject 'verb)       ;; => '(subject . verb)\n(car (cons 'subject 'verb)) ;; => subject\n(cdr (cons 'subject 'verb)) ;; => verb\n\n;; Lists\n;; cons creates a new list if the second item is a list\n(cons 0 '())         ;; => (0)\n(cons 1 (cons 2  (cons 3 '())))    ;; => (1 2 3)\n;; 'list' is a convenience variadic constructor for lists\n(list 1 2 3)    ;; => (1 2 3)\n\n\n;; Use 'append' to append lists together\n(append '(1 2) '(3 4)) ;; => (1 2 3 4)\n\n;; Some basic operations on lists\n(map add1 '(1 2 3))    ;; => (2 3 4)\n(reverse '(1 3 4 7))   ;; => (7 4 3 1)\n(sort '(11 22 33 44) >)   ;; => (44 33 22 11)\n\n(define days '(SUN MON FRI))\n(list-ref days 1)      ;; => MON\n(set! (list-ref days 1) 'TUE)\ndays                   ;; => (SUN TUE FRI)\n\n;; Vectors\n;; Vectors are heterogeneous structures whose elements are indexed by integers\n;; A Vector typically occupies less space than a list of the same length\n;; Random access of an element in a vector is faster than in a list\n#(1 2 3)                     ;; => #(1 2 3) ;; literal syntax\n(vector 'a 'b 'c)            ;; => #(a b c) \n(vector? #(1 2 3))           ;; => #t\n(vector-length #(1 (2) \"a\")) ;; => 3\n(vector-ref #(1 (2) (3 3)) 2);; => (3 3)\n\n(define vec #(1 2 3))\n(vector-set! vec 2 4)\nvec                         ;; => #(1 2 4)\n\n;; Vectors can be created from lists and vice-verca\n(vector->list #(1 2 4))     ;; => '(1 2 4)\n(list->vector '(a b c))     ;; => #(a b c)\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; 4. Functions\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Use 'lambda' to create functions.\n;; A function always returns the value of its last expression\n(lambda () \"Hello World\")   ;; => #<procedure (?)> \n\n;; Use extra parens around function definition to execute \n((lambda () \"Hello World\")) ;; => Hello World ;; argument list is empty\n\n;; A function with an argument\n((lambda (x) (* x x)) 3)           ;; => 9\n;; A function with two arguments\n((lambda (x y) (* x y)) 2 3)       ;; => 6\n\n;; assign a function to a variable\n(define sqr (lambda (x) (* x x)))\nsqr                        ;; => #<procedure (sqr x)>\n(sqr 3)                    ;; => 9\n\n;; We can shorten this using the function definition syntactic sugar\n(define (sqr x) (* x x))\n(sqr 3)                    ;; => 9\n\n;; We can redefine existing procedures\n(foldl cons '() '(1 2 3 4 5)) ;; => (((((() . 1) . 2) . 3) . 4) . 5)\n(define (foldl func accu alist)\n  (if (null? alist)\n    accu\n    (foldl func (func (car alist) accu) (cdr alist))))\n\n(foldl cons '() '(1 2 3 4 5))   ;; => (5 4 3 2 1)\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; 5. Equality\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; For numbers use '='\n(= 3 3.0)                  ;; => #t\n(= 2 1)                    ;; => #f\n\n;; 'eq?' returns #t if two arguments refer to the same object in memory\n;; In other words, it's a simple pointer comparison.\n(eq? '() '())              ;; => #t ;; there's only one empty list in memory\n(eq? (list 3) (list 3))    ;; => #f ;; not the same object\n(eq? 'yes 'yes)            ;; => #t\n(eq? 3 3)                  ;; => #t ;; don't do this even if it works in this case\n(eq? 3 3.0)                ;; => #f ;; it's better to use '=' for number comparisons\n(eq? \"Hello\" \"Hello\")      ;; => #f\n\n;; 'eqv?' is same as 'eq?' all datatypes except numbers and characters\n(eqv? 3 3.0)               ;; => #f\n(eqv? (expt 2 3) (expt 2 3)) ;; => #t\n(eqv? 'yes 'yes)           ;; => #t\n\n;; 'equal?' recursively compares the contents of pairs, vectors, and strings,\n;; applying eqv? on other objects such as numbers and symbols. \n;; A rule of thumb is that objects are generally equal? if they print the same.\n\n(equal? '(1 2 3) '(1 2 3)) ;; => #t\n(equal? #(a b c) #(a b c)) ;; => #t\n(equal? 'a 'a)             ;; => #t\n(equal? \"abc\" \"abc\")       ;; => #t\n\n;; In Summary:\n;; eq? tests if objects are identical\n;; eqv? tests if objects are operationally equivalent\n;; equal? tests if objects have same structure and contents\n\n;; Comparing strings for equality\n(string=? \"Hello\" \"Hello\") ;; => #t\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; 6. Control Flow\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Conditionals\n(if #t                     ;; test expression\n  \"True\"                   ;; then expression\n  \"False\")                 ;; else expression\n                           ;; => \"True\"\n\n(if (> 3 2)\n  \"yes\"\n  \"no\")                    ;; => \"yes\"\n\n;; In conditionals, all values that are not '#f' are treated as true.\n;; 0, '(), #() \"\" , are all true values\n(if 0\n  \"0 is not false\"\n  \"0 is false\")            ;; => \"0 is not false\"\n\n;; 'cond' chains a series of tests and returns as soon as it encounters a true condition\n;; 'cond' can be used to simulate 'if/elseif/else' statements\n(cond ((> 2 2) \"not true so don't return this\")\n      ((< 2 5) \"true, so return this\")\n      (else \"returning default\"))    ;; => \"true, so return this\"\n\n\n;; A case expression is evaluated as follows:\n;; The key is evaluated and compared with each datum in sense of 'eqv?',\n;; The corresponding clause in the matching datum is evaluated and returned as result\n(case (* 2 3)              ;; the key is 6\n  ((2 3 5 7) 'prime)       ;; datum 1\n  ((1 4 6 8) 'composite))  ;; datum 2; matched!\n                           ;; => composite\n\n;; case with else clause\n(case (car '(c d))\n  ((a e i o u) 'vowel)\n  ((w y) 'semivowel)\n  (else 'consonant))       ;; =>  consonant\n\n;; Boolean expressions\n;; 'and' returns the first expression that evaluates to #f\n;; otherwise, it returns the result of the last expression\n(and #t #f (= 2 2.0))                ;; => #f\n(and (< 2 5) (> 2 0) \"0 < 2 < 5\")    ;; => \"0 < 2 < 5\"\n\n;; 'or' returns the first expression that evaluates to #t \n;; otherwise the result of the last expression is returned\n(or #f #t #f)                        ;; => #t\n(or #f #f #f)                        ;; => #f\n\n;; 'when' is like 'if' without the else expression\n(when (positive? 5) \"I'm positive\")  ;; => \"I'm positive\"\n\n;; 'unless' is equivalent to (when (not <test>) <expr>)\n(unless (null? '(1 2 3)) \"not null\") ;; => \"not null\"\n\n\n;; Loops\n;; loops can be created with the help of tail-recursions\n(define (loop count)\n  (unless (= count 0)\n    (print \"hello\") \n    (loop (sub1 count))))\n(loop 4)                             ;; => hello, hello ...\n\n;; Or with a named let\n(let loop ((i 0) (limit 5))\n  (when (< i limit)\n    (printf \"i = ~a\\n\" i)\n    (loop (add1 i) limit)))          ;; => i = 0, i = 1....\n\n;; 'do' is another iteration construct\n;; It initializes a set of variables and updates them in each iteration\n;; A final expression is evaluated after the exit condition is met\n(do ((x 0 (add1 x )))            ;; initialize x = 0 and add 1 in each iteration\n  ((= x 10) (print \"done\"))      ;; exit condition and final expression\n  (print x))                     ;; command to execute in each step\n                                 ;; => 0,1,2,3....9,done\n\n;; Iteration over lists \n(for-each (lambda (a) (print (* a a)))\n          '(3 5 7))                  ;; => 9, 25, 49\n\n;; 'map' is like for-each but returns a list\n(map add1 '(11 22 33))               ;; => (12 23 34)\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; 7. Extensions\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; The CHICKEN core is very minimal, but additional features are provided by library extensions known as Eggs.\n;; You can install Eggs with 'chicken-install <eggname>' command.\n\n;; complex numbers\n3+4i                               ;; => 3+2i\n;; Supports fractions without falling back to inexact flonums\n1/3                                ;; => 1/3\n;; provides support for large integers through bignums\n(expt 9 20)                        ;; => 12157665459056928801 \n;; And other 'extended' functions\n(log 10 (exp 1))                   ;; => 2.30258509299405\n(numerator 2/3)                    ;; => 2\n\n;; 'utf8' provides unicode support\n(import utf8)\n\"\\u03BBx:(\\u03BC\\u0251.\\u0251\\u2192\\u0251).xx\" ;; => \"λx:(μɑ.ɑ→ɑ).xx\"\n\n;; 'posix' provides file I/O and lots of other services for unix-like operating systems\n;; Some of the functions are not available in Windows system,\n;; See http://wiki.call-cc.org/man/5/Module%20(chicken%20file%20posix) for more details\n\n;; Open a file to append, open \"write only\" and create file if it does not exist\n(define outfn (file-open \"chicken-hen.txt\" (+ open/append open/wronly open/creat)))\n;; write some text to the file\n(file-write outfn \"Did chicken came before hen?\") \n;; close the file\n(file-close outfn)\n;; Open the file \"read only\"\n(define infn (file-open \"chicken-hen.txt\" open/rdonly))\n;; read some text from the file\n(file-read infn 30)         ;; => (\"Did chicken came before hen?  \", 28)\n(file-close infn)\n\n;; CHICKEN also supports SRFI (Scheme Requests For Implementation) extensions\n;; See 'http://srfi.schemers.org/srfi-implementers.html\" to see srfi's supported by CHICKEN\n(import srfi-1)                    ;; list library\n(filter odd? '(1 2 3 4 5 6 7))     ;; => (1 3 5 7)\n(count even? '(1 2 3 4 5))         ;; => 2\n(take '(12 24 36 48 60) 3)         ;; => (12 24 36)\n(drop '(12 24 36 48 60) 2)         ;; => (36 48 60)\n(circular-list 'z 'q)              ;; => z q z q ...\n\n(import srfi-13)                   ;; string library\n(string-reverse \"pan\")             ;; => \"nap\"\n(string-index \"Turkey\" #\\k)        ;; => 3\n(string-every char-upper-case? \"CHICKEN\") ;; => #t\n(string-join '(\"foo\" \"bar\" \"baz\") \":\")    ;; => \"foo:bar:baz\"\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; 8. Macros\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; A 'for .. in ..' iteration like python, for lists\n(define-syntax for\n  (syntax-rules (in)\n                ((for elem in alist body ...)\n                 (for-each (lambda (elem) body ...) alist))))\n\n(for x in '(2 4 8 16)\n     (print x))          ;; => 2, 4, 8, 16\n\n(for chr in (string->list \"PENCHANT\")\n     (print chr))        ;; => P, E, N, C, H, A, N, T\n\n;; While loop\n(define-syntax while\n  (syntax-rules ()\n                ((while cond body ...)\n                 (let loop ()\n                   (when cond\n                     body ...\n                     (loop))))))\n\n(let ((str \"PENCHANT\") (i 0))\n  (while (< i (string-length str))     ;; while (condition)\n         (print (string-ref str i))    ;; body \n         (set! i (add1 i))))           \n                                       ;; => P, E, N, C, H, A, N, T\n\n;; Advanced Syntax-Rules Primer -> http://petrofsky.org/src/primer.txt\n;; Macro system in chicken -> http://lists.gnu.org/archive/html/chicken-users/2008-04/msg00013.html\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; 9. Modules\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Also See http://wiki.call-cc.org/man/5/Modules\n\n;; The 'test' module exports a value named 'hello' and a macro named 'greet'\n(module test (hello greet)\n  (import scheme)\n\n  (define-syntax greet\n    (syntax-rules ()\n      ((_ whom) \n       (begin\n         (display \"Hello, \")\n         (display whom)\n         (display \" !\\n\") ) ) ) )\n\n  (define (hello)\n    (greet \"world\") )  )\n\n;; we can define our modules in a separate file (say test.scm) and load them to the interpreter with\n;;         (load \"test.scm\")\n\n;; import the module\n(import test)\n(hello)                ;; => Hello, world !\n(greet \"schemers\")     ;; => Hello, schemers !\n\n;; We can compile the module files in to shared libraries by using following command,\n;;         csc -s test.scm\n;;         (load \"test.so\")\n\n;; Functors\n;; Functors are high level modules that can be parameterized by other modules\n;; Following functor requires another module named 'M' that provides a function called 'multiply'\n;; The functor itself exports a generic function 'square'\n(functor (squaring-functor (M (multiply))) (square)\n         (import scheme M) \n         (define (square x) (multiply x x)))\n\n;; Module 'nums' can be passed as a parameter to 'squaring-functor'\n(module nums (multiply) \n        (import scheme)     ;; predefined modules\n        (define (multiply x y) (* x y))) \n;; the final module can be imported and used in our program\n(module number-squarer = (squaring-functor nums)) \n\n(import number-squarer)\n(square 3)              ;; => 9\n\n;; We can instantiate the functor for other inputs\n;; Here's another example module that can be passed to squaring-functor\n(module stars (multiply)\n        (import chicken scheme)  ;; chicken module for the 'use' keyword\n        (use srfi-1)             ;; we can use external libraries in our module\n        (define (multiply x y)\n          (list-tabulate x (lambda _ (list-tabulate y (lambda _ '*))))))\n(module star-squarer = (squaring-functor stars))\n\n(import star-squarer)\n(square 3)              ;; => ((* * *)(* * *)(* * *))\n```\n\n## Further Reading\n* [CHICKEN User's Manual](https://wiki.call-cc.org/manual).\n* [R5RS standards](http://www.schemers.org/Documents/Standards/R5RS)\n\n\n## Extra Info\n\n* [For programmers of other languages](https://wiki.call-cc.org/chicken-for-programmers-of-other-languages)\n* [Compare CHICKEN syntax with other languages](http://plr.sourceforge.net/cgi-bin/plr/launch.py)\n"
        },
        {
          "name": "citron.md",
          "type": "blob",
          "size": 5.8642578125,
          "content": "---\nname: citron\nfilename: learncitron.ctr\ncontributors:\n    - [\"AnotherTest\", \"\"]\n---\n```ruby\n# Comments start with a '#'\n# All comments encompass a single line\n\n###########################################\n## 1. Primitive Data types and Operators\n###########################################\n\n# You have numbers\n3. # 3\n\n# Numbers are all doubles in interpreted mode\n\n# Mathematical operator precedence is not respected.\n# binary 'operators' are evaluated in ltr order\n1 + 1. # 2\n8 - 4. # 4\n10 + 2 * 3. # 36\n\n# Division is always floating division\n35 / 2 # 17.5.\n\n# Integer division is non-trivial, you may use floor\n(35 / 2) floor # 17.\n\n# Booleans are primitives\nTrue.\nFalse.\n\n# Boolean messages\nTrue not. # False\nFalse not. # True\n1 = 1. # True\n1 !=: 1. # False\n1 < 10. # True\n\n# Here, `not` is a unary message to the object `Boolean`\n# Messages are comparable to instance method calls\n# And they have three different forms:\n#   1. Unary messages: Length > 1, and they take no arguments:\n        False not.\n#   2. Binary Messages: Length = 1, and they take a single argument:\n        False & True.\n#   3. Keyword messages: must have at least one ':', they take as many arguments\n#      as they have `:` s\n        False either: 1 or: 2. # 2\n\n# Strings\n'This is a string'.\n'There are no character types exposed to the user'.\n# \"You cannot use double quotes for strings\" <- Error\n\n# Strins can be summed\n'Hello, ' + 'World!'. # 'Hello, World!'\n\n# Strings allow access to their characters\n'This is a beautiful string' at: 0. # 'T'\n\n###########################################\n## intermission: Basic Assignment\n###########################################\n\n# You may assign values to the current scope:\nvar name is value. # assigns `value` into `name`\n\n# You may also assign values into the current object's namespace\nmy name is value. # assigns `value` into the current object's `name` property\n\n# Please note that these names are checked at compile (read parse if in interpreted mode) time\n# but you may treat them as dynamic assignments anyway\n\n###########################################\n## 2. Lists(Arrays?) and Tuples\n###########################################\n\n# Arrays are allowed to have multiple types\nArray new < 1 ; 2 ; 'string' ; Nil. # Array new < 1 ; 2 ; 'string' ; Nil\n\n# Tuples act like arrays, but are immutable.\n# Any shenanigans degrade them to arrays, however\n[1, 2, 'string']. # [1, 2, 'string']\n\n# They can interoperate with arrays\n[1, 'string'] + (Array new < 'wat'). # Array new < 1 ; 'string' ; 'wat'\n\n# Indexing into them\n[1, 2, 3] at: 1. # 2\n\n# Some array operations\nvar arr is Array new < 1 ; 2 ; 3.\n\narr head. # 1\narr tail. # Array new < 2 ; 3.\narr init. # Array new < 1 ; 2.\narr last. # 3\narr push: 4. # Array new < 1 ; 2 ; 3 ; 4.\narr pop. # 4\narr pop: 1. # 2, `arr` is rebound to Array new < 1 ; 3.\n\n# List comprehensions\n[x * 2 + y,, arr, arr + [4, 5],, x > 1]. # Array ← 7 ; 9 ; 10 ; 11\n# fresh variable names are bound as they are encountered,\n# so `x` is bound to the values in `arr`\n# and `y` is bound to the values in `arr + [4, 5]`\n#\n# The general format is: [expr,, bindings*,, predicates*]\n\n\n####################################\n## 3. Functions\n####################################\n\n# A simple function that takes two variables\nvar add is {:a:b ^a + b.}.\n\n# this function will resolve all its names except the formal arguments\n# in the context it is called in.\n\n# Using the function\nadd applyTo: 3 and: 5. # 8\nadd applyAll: [3, 5]. # 8\n\n# Also a (customizable -- more on this later) pseudo-operator allows for a shorthand\n# of function calls\n# By default it is REF[args]\n\nadd[3, 5]. # 8\n\n# To customize this behaviour, you may simply use a compiler pragma:\n#:callShorthand ()\n\n# And then you may use the specified operator.\n# Note that the allowed 'operator' can only be made of any of these: []{}()\n# And you may mix-and-match (why would anyone do that?)\n\nadd(3, 5). # 8\n\n# You may also use functions as operators in the following way:\n\n3 `add` 5. # 8\n# This call binds as such: add[(3), 5]\n# because the default fixity is left, and the default precedence is 1\n\n# You may change the precedence/fixity of this operator with a pragma\n#:declare infixr 1 add\n\n3 `add` 5. # 8\n# now this binds as such: add[3, (5)].\n\n# There is another form of functions too\n# So far, the functions were resolved in a dynamic fashion\n# But a lexically scoped block is also possible\nvar sillyAdd is {\\:x:y add[x,y].}.\n\n# In these blocks, you are not allowed to declare new variables\n# Except with the use of Object::'letEqual:in:`\n# And the last expression is implicitly returned.\n\n# You may also use a shorthand for lambda expressions\nvar mul is \\:x:y x * y.\n\n# These capture the named bindings that are not present in their\n# formal parameters, and retain them. (by ref)\n\n###########################################\n## 5. Control Flow\n###########################################\n\n# inline conditional-expressions\nvar citron is 1 = 1 either: 'awesome' or: 'awful'. # citron is 'awesome'\n\n# multiple lines is fine too\nvar citron is 1 = 1\n    either: 'awesome'\n    or:     'awful'.\n\n# looping\n10 times: {:x\n    Pen writeln: x.\n}. # 10. -- side effect: 10 lines in stdout, with numbers 0 through 9 in them\n\n# Citron properly supports tail-call recursion in lexically scoped blocks\n# So use those to your heart's desire\n\n# mapping most data structures is as simple as `fmap:`\n[1, 2, 3, 4] fmap: \\:x x + 1. # [2, 3, 4, 5]\n\n# You can use `foldl:accumulator:` to fold a list/tuple\n[1, 2, 3, 4] foldl: (\\:acc:x acc * 2 + x) accumulator: 4. # 90\n\n# That expression is the same as\n(2 * (2 * (2 * (2 * 4 + 1) + 2) + 3) + 4)\n\n###################################\n## 6. IO\n###################################\n\n# IO is quite simple\n# With `Pen` being used for console output\n# and Program::'input' and Program::'waitForInput' being used for console input\n\nPen writeln: 'Hello, ocean!' # prints 'Hello, ocean!\\n' to the terminal\n\nPen writeln: Program waitForInput. # reads a line and prints it back\n```\n"
        },
        {
          "name": "clojure-macros.md",
          "type": "blob",
          "size": 4.2724609375,
          "content": "---\nname: Clojure macros\nfilename: learnclojuremacros.clj\ncontributors:\n    - [\"Adam Bard\", \"http://adambard.com/\"]\n---\n\nAs with all Lisps, Clojure's inherent [homoiconicity](https://en.wikipedia.org/wiki/Homoiconic)\ngives you access to the full extent of the language to write code-generation routines\ncalled \"macros\". Macros provide a powerful way to tailor the language to your needs.\n\nBe careful though. It's considered bad form to write a macro when a function will do.\nUse a macro only when you need control over when or if the arguments to a form will\nbe evaluated.\n\nYou'll want to be familiar with Clojure. Make sure you understand everything in\n[Clojure in Y Minutes](../clojure/).\n\n```clojure\n;; Define a macro using defmacro. Your macro should output a list that can\n;; be evaluated as clojure code.\n;;\n;; This macro is the same as if you wrote (reverse \"Hello World\")\n(defmacro my-first-macro []\n  (list reverse \"Hello World\"))\n\n;; Inspect the result of a macro using macroexpand or macroexpand-1.\n;;\n;; Note that the call must be quoted.\n(macroexpand '(my-first-macro))\n;; -> (#<core$reverse clojure.core$reverse@xxxxxxxx> \"Hello World\")\n\n;; You can eval the result of macroexpand directly:\n(eval (macroexpand '(my-first-macro)))\n; -> (\\d \\l \\o \\r \\W \\space \\o \\l \\l \\e \\H)\n\n;; But you should use this more succinct, function-like syntax:\n(my-first-macro)  ; -> (\\d \\l \\o \\r \\W \\space \\o \\l \\l \\e \\H)\n\n;; You can make things easier on yourself by using the more succinct quote syntax\n;; to create lists in your macros:\n(defmacro my-first-quoted-macro []\n  '(reverse \"Hello World\"))\n\n(macroexpand '(my-first-quoted-macro))\n;; -> (reverse \"Hello World\")\n;; Notice that reverse is no longer function object, but a symbol.\n\n;; Macros can take arguments.\n(defmacro inc2 [arg]\n  (list + 2 arg))\n\n(inc2 2) ; -> 4\n\n;; But, if you try to do this with a quoted list, you'll get an error, because\n;; the argument will be quoted too. To get around this, clojure provides a\n;; way of quoting macros: `. Inside `, you can use ~ to get at the outer scope\n(defmacro inc2-quoted [arg]\n  `(+ 2 ~arg))\n\n(inc2-quoted 2)\n\n;; You can use the usual destructuring args. Expand list variables using ~@\n(defmacro unless [arg & body]\n  `(if (not ~arg)\n     (do ~@body))) ; Remember the do!\n\n(macroexpand '(unless true (reverse \"Hello World\")))\n;; ->\n;; (if (clojure.core/not true) (do (reverse \"Hello World\")))\n\n;; (unless) evaluates and returns its body if the first argument is false.\n;; Otherwise, it returns nil\n\n(unless true \"Hello\") ; -> nil\n(unless false \"Hello\") ; -> \"Hello\"\n\n;; Used without care, macros can do great evil by clobbering your vars\n(defmacro define-x []\n  '(do\n     (def x 2)\n     (list x)))\n\n(def x 4)\n(define-x) ; -> (2)\n(list x) ; -> (2)\n\n;; To avoid this, use gensym to get a unique identifier\n(gensym 'x) ; -> x1281 (or some such thing)\n\n(defmacro define-x-safely []\n  (let [sym (gensym 'x)]\n    `(do\n       (def ~sym 2)\n       (list ~sym))))\n\n(def x 4)\n(define-x-safely) ; -> (2)\n(list x) ; -> (4)\n\n;; You can use # within ` to produce a gensym for each symbol automatically\n(defmacro define-x-hygienically []\n  `(do\n     (def x# 2)\n     (list x#)))\n\n(def x 4)\n(define-x-hygienically) ; -> (2)\n(list x) ; -> (4)\n\n;; It's typical to use helper functions with macros. Let's create a few to\n;; help us support a (dumb) inline arithmetic syntax\n(declare inline-2-helper)\n(defn clean-arg [arg]\n  (if (seq? arg)\n    (inline-2-helper arg)\n    arg))\n\n(defn apply-arg\n  \"Given args [x (+ y)], return (+ x y)\"\n  [val [op arg]]\n  (list op val (clean-arg arg)))\n\n(defn inline-2-helper\n  [[arg1 & ops-and-args]]\n  (let [ops (partition 2 ops-and-args)]\n    (reduce apply-arg (clean-arg arg1) ops)))\n\n;; We can test it immediately, without creating a macro\n(inline-2-helper '(a + (b - 2) - (c * 5))) ; -> (- (+ a (- b 2)) (* c 5))\n\n; However, we'll need to make it a macro if we want it to be run at compile time\n(defmacro inline-2 [form]\n  (inline-2-helper form))\n\n(macroexpand '(inline-2 (1 + (3 / 2) - (1 / 2) + 1)))\n; -> (+ (- (+ 1 (/ 3 2)) (/ 1 2)) 1)\n\n(inline-2 (1 + (3 / 2) - (1 / 2) + 1))\n; -> 3 (actually, 3N, since the number got cast to a rational fraction with /)\n```\n\n### Further Reading\n\n[Writing Macros](http://www.braveclojure.com/writing-macros/)\n\n[Official docs](http://clojure.org/macros)\n\n[When to use macros?](https://lispcast.com/when-to-use-a-macro/)\n"
        },
        {
          "name": "clojure.md",
          "type": "blob",
          "size": 12.05078125,
          "content": "---\nname: Clojure\nfilename: learnclojure.clj\ncontributors:\n    - [\"Adam Bard\", \"http://adambard.com/\"]\n---\n\nClojure is a Lisp family language developed for the Java Virtual Machine. It has\na much stronger emphasis on pure [functional programming](https://en.wikipedia.org/wiki/Functional_programming) than\nCommon Lisp, but includes several [STM](https://en.wikipedia.org/wiki/Software_transactional_memory) utilities to handle\nstate as it comes up.\n\nThis combination allows it to handle concurrent processing very simply,\nand often automatically.\n\n(You need a version of Clojure 1.2 or newer)\n\n\n```clojure\n; Comments start with semicolons.\n\n; Clojure is written in \"forms\", which are just\n; lists of things inside parentheses, separated by whitespace.\n;\n; The clojure reader assumes that the first thing is a\n; function or macro to call, and the rest are arguments.\n\n; The first call in a file should be ns, to set the namespace\n(ns learnclojure)\n\n; More basic examples:\n\n; str will create a string out of all its arguments\n(str \"Hello\" \" \" \"World\") ; => \"Hello World\"\n\n; Math is straightforward\n(+ 1 1) ; => 2\n(- 2 1) ; => 1\n(* 1 2) ; => 2\n(/ 2 1) ; => 2\n\n; Equality is =\n(= 1 1) ; => true\n(= 2 1) ; => false\n\n; You need not for logic, too\n(not true) ; => false\n\n; Nesting forms works as you expect\n(+ 1 (- 3 2)) ; = 1 + (3 - 2) => 2\n\n; Types\n;;;;;;;;;;;;;\n\n; Clojure uses Java's object types for booleans, strings and numbers.\n; Use `class` to inspect them.\n(class 1) ; Integer literals are java.lang.Long by default\n(class 1.); Float literals are java.lang.Double\n(class \"\"); Strings always double-quoted, and are java.lang.String\n(class false) ; Booleans are java.lang.Boolean\n(class nil); The \"null\" value is called nil\n\n; If you want to create a literal list of data, use ' to stop it from\n; being evaluated\n'(+ 1 2) ; => (+ 1 2)\n; (shorthand for (quote (+ 1 2)))\n\n; You can eval a quoted list\n(eval '(+ 1 2)) ; => 3\n\n; Collections & Sequences\n;;;;;;;;;;;;;;;;;;;\n\n; Lists are linked-list data structures, while Vectors are array-backed.\n; Vectors and Lists are java classes too!\n(class [1 2 3]); => clojure.lang.PersistentVector\n(class '(1 2 3)); => clojure.lang.PersistentList\n\n; A list would be written as just (1 2 3), but we have to quote\n; it to stop the reader thinking it's a function.\n; Also, (list 1 2 3) is the same as '(1 2 3)\n\n; \"Collections\" are just groups of data\n; Both lists and vectors are collections:\n(coll? '(1 2 3)) ; => true\n(coll? [1 2 3]) ; => true\n\n; \"Sequences\" (seqs) are abstract descriptions of lists of data.\n; Only lists are seqs.\n(seq? '(1 2 3)) ; => true\n(seq? [1 2 3]) ; => false\n\n; A seq need only provide an entry when it is accessed.\n; So, seqs which can be lazy -- they can define infinite series:\n(range 4) ; => (0 1 2 3)\n(range) ; => (0 1 2 3 4 ...) (an infinite series)\n(take 4 (range)) ;  (0 1 2 3)\n\n; Use cons to add an item to the beginning of a list or vector\n(cons 4 [1 2 3]) ; => (4 1 2 3)\n(cons 4 '(1 2 3)) ; => (4 1 2 3)\n\n; Conj will add an item to a collection in the most efficient way.\n; For lists, they insert at the beginning. For vectors, they insert at the end.\n(conj [1 2 3] 4) ; => [1 2 3 4]\n(conj '(1 2 3) 4) ; => (4 1 2 3)\n\n; Use concat to add lists or vectors together\n(concat [1 2] '(3 4)) ; => (1 2 3 4)\n\n; Use filter, map to interact with collections\n(map inc [1 2 3]) ; => (2 3 4)\n(filter even? [1 2 3]) ; => (2)\n\n; Use reduce to reduce them\n(reduce + [1 2 3 4])\n; = (+ (+ (+ 1 2) 3) 4)\n; => 10\n\n; Reduce can take an initial-value argument too\n(reduce conj [] '(3 2 1))\n; = (conj (conj (conj [] 3) 2) 1)\n; => [3 2 1]\n\n; Functions\n;;;;;;;;;;;;;;;;;;;;;\n\n; Use fn to create new functions. A function always returns\n; its last statement.\n(fn [] \"Hello World\") ; => fn\n\n; (You need extra parens to call it)\n((fn [] \"Hello World\")) ; => \"Hello World\"\n\n; You can create a var using def\n(def x 1)\nx ; => 1\n\n; Assign a function to a var\n(def hello-world (fn [] \"Hello World\"))\n(hello-world) ; => \"Hello World\"\n\n; You can shorten this process by using defn\n(defn hello-world [] \"Hello World\")\n\n; The [] is the list of arguments for the function.\n(defn hello [name]\n  (str \"Hello \" name))\n(hello \"Steve\") ; => \"Hello Steve\"\n\n; You can also use this shorthand to create functions:\n(def hello2 #(str \"Hello \" %1))\n(hello2 \"Julie\") ; => \"Hello Julie\"\n\n; You can have multi-variadic functions, too\n(defn hello3\n  ([] \"Hello World\")\n  ([name] (str \"Hello \" name)))\n(hello3 \"Jake\") ; => \"Hello Jake\"\n(hello3) ; => \"Hello World\"\n\n; Functions can pack extra arguments up in a seq for you\n(defn count-args [& args]\n  (str \"You passed \" (count args) \" args: \" args))\n(count-args 1 2 3) ; => \"You passed 3 args: (1 2 3)\"\n\n; You can mix regular and packed arguments\n(defn hello-count [name & args]\n  (str \"Hello \" name \", you passed \" (count args) \" extra args\"))\n(hello-count \"Finn\" 1 2 3)\n; => \"Hello Finn, you passed 3 extra args\"\n\n\n; Maps\n;;;;;;;;;;\n\n; Hash maps and array maps share an interface. Hash maps have faster lookups\n; but don't retain key order.\n(class {:a 1 :b 2 :c 3}) ; => clojure.lang.PersistentArrayMap\n(class (hash-map :a 1 :b 2 :c 3)) ; => clojure.lang.PersistentHashMap\n\n; Arraymaps will automatically become hashmaps through most operations\n; if they get big enough, so you don't need to worry.\n\n; Maps can use any hashable type as a key, but usually keywords are best\n; Keywords are like strings with some efficiency bonuses\n(class :a) ; => clojure.lang.Keyword\n\n(def stringmap {\"a\" 1, \"b\" 2, \"c\" 3})\nstringmap  ; => {\"a\" 1, \"b\" 2, \"c\" 3}\n\n(def keymap {:a 1, :b 2, :c 3})\nkeymap ; => {:a 1, :c 3, :b 2}\n\n; By the way, commas are always treated as whitespace and do nothing.\n\n; Retrieve a value from a map by calling it as a function\n(stringmap \"a\") ; => 1\n(keymap :a) ; => 1\n\n; Keywords can be used to retrieve their value from a map, too!\n(:b keymap) ; => 2\n\n; Don't try this with strings.\n;(\"a\" stringmap)\n; => Exception: java.lang.String cannot be cast to clojure.lang.IFn\n\n; Retrieving a non-present key returns nil\n(stringmap \"d\") ; => nil\n\n; Use assoc to add new keys to hash-maps\n(def newkeymap (assoc keymap :d 4))\nnewkeymap ; => {:a 1, :b 2, :c 3, :d 4}\n\n; But remember, clojure types are immutable!\nkeymap ; => {:a 1, :b 2, :c 3}\n\n; Use dissoc to remove keys\n(dissoc keymap :a :b) ; => {:c 3}\n\n; Sets\n;;;;;;\n\n(class #{1 2 3}) ; => clojure.lang.PersistentHashSet\n(set [1 2 3 1 2 3 3 2 1 3 2 1]) ; => #{1 2 3}\n\n; Add a member with conj\n(conj #{1 2 3} 4) ; => #{1 2 3 4}\n\n; Remove one with disj\n(disj #{1 2 3} 1) ; => #{2 3}\n\n; Test for existence by using the set as a function:\n(#{1 2 3} 1) ; => 1\n(#{1 2 3} 4) ; => nil\n\n; There are more functions in the clojure.sets namespace.\n\n; Useful forms\n;;;;;;;;;;;;;;;;;\n\n; Logic constructs in clojure are just macros, and look like\n; everything else\n(if false \"a\" \"b\") ; => \"b\"\n(if false \"a\") ; => nil\n\n; Use let to create temporary bindings\n(let [a 1 b 2]\n  (> a b)) ; => false\n\n; Group statements together with do\n(do\n  (print \"Hello\")\n  \"World\") ; => \"World\" (prints \"Hello\")\n\n; Functions have an implicit do\n(defn print-and-say-hello [name]\n  (print \"Saying hello to \" name)\n  (str \"Hello \" name))\n(print-and-say-hello \"Jeff\") ;=> \"Hello Jeff\" (prints \"Saying hello to Jeff\")\n\n; So does let\n(let [name \"Urkel\"]\n  (print \"Saying hello to \" name)\n  (str \"Hello \" name)) ; => \"Hello Urkel\" (prints \"Saying hello to Urkel\")\n\n\n; Use the threading macros (-> and ->>) to express transformations of\n; data more clearly.\n\n; The \"Thread-first\" macro (->) inserts into each form the result of\n; the previous, as the first argument (second item)\n(->  \n   {:a 1 :b 2} \n   (assoc :c 3) ;=> (assoc {:a 1 :b 2} :c 3)\n   (dissoc :b)) ;=> (dissoc (assoc {:a 1 :b 2} :c 3) :b)\n\n; This expression could be written as:\n; (dissoc (assoc {:a 1 :b 2} :c 3) :b)\n; and evaluates to {:a 1 :c 3}\n\n; The double arrow does the same thing, but inserts the result of\n; each line at the *end* of the form. This is useful for collection\n; operations in particular:\n(->>\n   (range 10)\n   (map inc)     ;=> (map inc (range 10)\n   (filter odd?) ;=> (filter odd? (map inc (range 10))\n   (into []))    ;=> (into [] (filter odd? (map inc (range 10)))\n                 ; Result: [1 3 5 7 9]\n\n; When you are in a situation where you want more freedom as where to\n; put the result of previous data transformations in an \n; expression, you can use the as-> macro. With it, you can assign a\n; specific name to transformations' output and use it as a\n; placeholder in your chained expressions:\n\n(as-> [1 2 3] input\n  (map inc input);=> You can use last transform's output at the last position\n  (nth input 2) ;=>  and at the second position, in the same expression\n  (conj [4 5 6] input 8 9 10)) ;=> or in the middle !\n                               ; Result: [4 5 6 4 8 9 10]\n\n\n; Modules\n;;;;;;;;;;;;;;;\n\n; Use \"use\" to get all functions from the module\n(use 'clojure.set)\n\n; Now we can use set operations\n(intersection #{1 2 3} #{2 3 4}) ; => #{2 3}\n(difference #{1 2 3} #{2 3 4}) ; => #{1}\n\n; You can choose a subset of functions to import, too\n(use '[clojure.set :only [intersection]])\n\n; Use require to import a module\n(require 'clojure.string)\n\n; Use / to call functions from a module\n; Here, the module is clojure.string and the function is blank?\n(clojure.string/blank? \"\") ; => true\n\n; You can give a module a shorter name on import\n(require '[clojure.string :as str])\n(str/replace \"This is a test.\" #\"[a-o]\" str/upper-case) ; => \"THIs Is A tEst.\"\n; (#\"\" denotes a regular expression literal)\n\n; You can use require (and use, but don't) from a namespace using :require.\n; You don't need to quote your modules if you do it this way.\n(ns test\n  (:require\n    [clojure.string :as str]\n    [clojure.set :as set]))\n\n; Java\n;;;;;;;;;;;;;;;;;\n\n; Java has a huge and useful standard library, so\n; you'll want to learn how to get at it.\n\n; Use import to load a java module\n(import java.util.Date)\n\n; You can import from an ns too.\n(ns test\n  (:import java.util.Date\n           java.util.Calendar))\n\n; Use the class name with a \".\" at the end to make a new instance\n(Date.) ; <a date object>\n\n; Use . to call methods. Or, use the \".method\" shortcut\n(. (Date.) getTime) ; <a timestamp>\n(.getTime (Date.)) ; exactly the same thing.\n\n; Use / to call static methods\n(System/currentTimeMillis) ; <a timestamp> (system is always present)\n\n; Use doto to make dealing with (mutable) classes more tolerable\n(import java.util.Calendar)\n(doto (Calendar/getInstance)\n  (.set 2000 1 1 0 0 0)\n  .getTime) ; => A Date. set to 2000-01-01 00:00:00\n\n; STM\n;;;;;;;;;;;;;;;;;\n\n; Software Transactional Memory is the mechanism clojure uses to handle\n; persistent state. There are a few constructs in clojure that use this.\n\n; An atom is the simplest. Pass it an initial value\n(def my-atom (atom {}))\n\n; Update an atom with swap!.\n; swap! takes a function and calls it with the current value of the atom\n; as the first argument, and any trailing arguments as the second\n(swap! my-atom assoc :a 1) ; Sets my-atom to the result of (assoc {} :a 1)\n(swap! my-atom assoc :b 2) ; Sets my-atom to the result of (assoc {:a 1} :b 2)\n\n; Use '@' to dereference the atom and get the value\nmy-atom  ;=> Atom<#...> (Returns the Atom object)\n@my-atom ; => {:a 1 :b 2}\n\n; Here's a simple counter using an atom\n(def counter (atom 0))\n(defn inc-counter []\n  (swap! counter inc))\n\n(inc-counter)\n(inc-counter)\n(inc-counter)\n(inc-counter)\n(inc-counter)\n\n@counter ; => 5\n\n; Other STM constructs are refs and agents.\n; Refs: http://clojure.org/refs\n; Agents: http://clojure.org/agents\n```\n\n### Further Reading\n\nThis is far from exhaustive, but hopefully it's enough to get you on your feet.\n\nClojure.org has lots of articles:\n[http://clojure.org/](http://clojure.org/)\n\nClojuredocs.org has documentation with examples for most core functions:\n[http://clojuredocs.org/quickref/Clojure%20Core](http://clojuredocs.org/quickref/Clojure%20Core)\n\n4Clojure is a great way to build your clojure/FP skills:\n[https://4clojure.oxal.org/](https://4clojure.oxal.org/)\n\nClojure-doc.org (yes, really) has a number of getting started articles:\n[http://clojure-doc.org/](http://clojure-doc.org/)\n\nClojure for the Brave and True has a great introduction to Clojure and a free online version:\n[https://www.braveclojure.com/clojure-for-the-brave-and-true/](https://www.braveclojure.com/clojure-for-the-brave-and-true/)\n"
        },
        {
          "name": "cmake.md",
          "type": "blob",
          "size": 5.2021484375,
          "content": "---\ncategory: tool\nname: CMake\ncontributors:\n    - [\"Bruno Alano\", \"https://github.com/brunoalano\"]\nfilename: CMake\n---\n\nCMake is a cross-platform, open-source build system. This tool allows you to test, \ncompile, and create packages of your source code.\n\nThe problem that CMake tries to solve is the problem of Makefiles and \nAutoconfigure on cross-platforms (different make interpreters have different \ncommands) and the ease-of-use on linking 3rd party libraries.\n\nCMake is an extensible, open-source system that manages the build process in \nan operating system and compiler-agnostic manner. Unlike many \ncross-platform systems, CMake is designed to be used in conjunction with the \nnative build environment. Simple configuration files placed in each source \ndirectory (called CMakeLists.txt files) are used to generate standard build \nfiles (e.g., makefiles on Unix and projects/workspaces in Windows MSVC) which \nare used in the usual way.\n\n```cmake\n# In CMake, this is a comment\n\n# To run our code, please perform the following commands:\n#  - mkdir build && cd build\n#  - cmake ..\n#  - make\n# \n# With those steps, we will follow the best practice to compile into a subdir\n# and the second line will request to CMake to generate a new OS-dependent\n# Makefile. Finally, run the native Make command.\n\n#------------------------------------------------------------------------------\n# Basic\n#------------------------------------------------------------------------------\n#\n# The CMake file MUST be named as \"CMakeLists.txt\".\n\n# Setup the minimum version required of CMake to generate the Makefile\ncmake_minimum_required (VERSION 2.8)\n\n# Raises a FATAL_ERROR if version < 2.8\ncmake_minimum_required (VERSION 2.8 FATAL_ERROR)\n\n# We define the name of our project, and this changes some directories\n# naming convention generated by CMake. We can send the LANG of code\n# as the second param\nproject (learncmake C)\n\n# Set the project source dir (just convention)\nset( LEARN_CMAKE_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR} )\nset( LEARN_CMAKE_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR} )\n\n# It's useful to set up the current version of our code in the build system\n# using a `semver` style\nset (LEARN_CMAKE_VERSION_MAJOR 1)\nset (LEARN_CMAKE_VERSION_MINOR 0)\nset (LEARN_CMAKE_VERSION_PATCH 0)\n\n# Send the variables (version number) to the source code header\nconfigure_file (\n  \"${PROJECT_SOURCE_DIR}/TutorialConfig.h.in\"\n  \"${PROJECT_BINARY_DIR}/TutorialConfig.h\"\n)\n\n# Include Directories\n# In GCC, this will invoke the \"-I\" command\ninclude_directories( include )\n\n# Where are the additional libraries installed? Note: provide includes\n# path here, subsequent checks will resolve everything else\nset( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_SOURCE_DIR}/CMake/modules/\" )\n\n# Conditions\nif ( CONDITION )\n  # Output!\n\n  # Incidental information\n  message(STATUS \"My message\")\n\n  # CMake Warning, continue processing\n  message(WARNING \"My message\")\n\n  # CMake Warning (dev), continue processing\n  message(AUTHOR_WARNING \"My message\")\n\n  # CMake Error, continue processing, but skip generation\n  message(SEND_ERROR \"My message\")\n\n  # CMake Error, stop processing and generation\n  message(FATAL_ERROR \"My message\")\nendif()\n\nif( CONDITION )\n\nelseif( CONDITION )\n\nelse( CONDITION )\n\nendif( CONDITION )\n\n# Loops\nforeach(loop_var arg1 arg2 ...)\n  COMMAND1(ARGS ...)\n  COMMAND2(ARGS ...)\n  ...\nendforeach(loop_var)\n\nforeach(loop_var RANGE total)\nforeach(loop_var RANGE start stop [step])\n\nforeach(loop_var IN [LISTS [list1 [...]]]\n                    [ITEMS [item1 [...]]])\n\nwhile(condition)\n  COMMAND1(ARGS ...)\n  COMMAND2(ARGS ...)\n  ...\nendwhile(condition)\n\n\n# Logic Operations\nif(FALSE AND (FALSE OR TRUE))\n  message(\"Don't display!\")\nendif()\n\n# Set a regular, cache, or environment variable to a given value.\n# If the PARENT_SCOPE option is given, the variable will be set in the scope\n# above the current scope.\n# `set(<variable> <value>... [PARENT_SCOPE])`\n\n# How to reference variables inside quoted and unquoted arguments?\n# A variable reference is replaced by either the variable value or by the \n# empty string if the variable is not set.\n${variable_name}\n\n# Lists\n# Setup the list of source files\nset( LEARN_CMAKE_SOURCES \n  src/main.c\n  src/imagem.c\n  src/pather.c\n)\n\n# Calls the compiler\n#\n# ${PROJECT_NAME} refers to Learn_CMake \nadd_executable( ${PROJECT_NAME} ${LEARN_CMAKE_SOURCES} )\n\n# Link the libraries\ntarget_link_libraries( ${PROJECT_NAME} ${LIBS} m )\n\n# Where are the additional libraries installed? Note: provide includes\n# path here, subsequent checks will resolve everything else\nset( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_SOURCE_DIR}/CMake/modules/\" )\n\n# Compiler Condition (gcc ; g++)\nif ( \"${CMAKE_C_COMPILER_ID}\" STREQUAL \"GNU\" )\n  message( STATUS \"Setting the flags for ${CMAKE_C_COMPILER_ID} compiler\" )\n  add_definitions( --std=c99 )\nendif()\n\n# Check for OS\nif( UNIX )\n    set( LEARN_CMAKE_DEFINITIONS\n        \"${LEARN_CMAKE_DEFINITIONS} -Wall -Wextra -Werror -Wno-deprecated-declarations -Wno-unused-parameter -Wno-comment\" )\nendif()\n```\n\n### More Resources\n\n+ [CMake tutorial](https://cmake.org/cmake-tutorial/)\n+ [CMake documentation](https://cmake.org/documentation/)\n+ [Mastering CMake](http://amzn.com/1930934319/)\n+ [An Introduction to Modern CMake](https://cliutils.gitlab.io/modern-cmake/)\n"
        },
        {
          "name": "cobol.md",
          "type": "blob",
          "size": 7.0517578125,
          "content": "---\nname: COBOL\ncontributors:\n    - [\"Hyphz\", \"http://github.com/hyphz/\"]\nfilename: learn.COB\n---\nCOBOL is a business-oriented language revised multiple times since its original design in 1960. It is claimed to still be used in over 80% of \norganizations.\n\n```cobol\n      *COBOL. Coding like it's 1985. \n      *Compiles with GnuCOBOL in OpenCobolIDE 4.7.6.\n       \n      *COBOL has significant differences between legacy (COBOL-85)\n      *and modern (COBOL-2002 and COBOL-2014) versions.\n      *Legacy versions require columns 1-6 to be blank (they are used\n      *to store the index number of the punched card).\n      *A '*' in column 7 means a comment.\n      *In legacy COBOL, a comment can only be a full line.\n      *Modern COBOL doesn't require fixed columns and uses *> for\n      *a comment, which can appear in the middle of a line.\n      *Legacy COBOL also imposes a limit on maximum line length.\n      *Keywords have to be in capitals in legacy COBOL,\n      *but are case insensitive in modern.\n      *Although modern COBOL allows you to use mixed-case characters\n      *it is still common to use all caps when writing COBOL code.\n      *This is what most professional COBOL developers do.\n      *COBOL statements end with a period.\n      \n      *COBOL code is broken up into 4 divisions.\n      *Those divisions, in order, are:\n      *IDENTIFICATION DIVISION.\n      *ENVIRONMENT DIVISION.\n      *DATA DIVISION.\n      *PROCEDURE DIVISION.\n\n      *First, we must give our program an ID.\n      *Identification division can include other values too,\n      *but they are comments only. Program-id is the only one that is mandatory.\n       IDENTIFICATION DIVISION.\n           PROGRAM-ID.    LEARN.\n           AUTHOR.        JOHN DOE.\n           DATE-WRITTEN.  05/02/2020.\n\n      *Let's declare some variables.\n      *We do this in the WORKING-STORAGE section within the DATA DIVISION.\n      *Each data item (aka variable) starts with a level number, \n      *then the name of the item, followed by a picture clause \n      *describing the type of data that the variable will contain.\n      *Almost every COBOL programmer will abbreviate PICTURE as PIC.\n      *A is for alphabetic, X is for alphanumeric, and 9 is for numeric.\n       \n      *example:\n      01  MYNAME PIC xxxxxxxxxx.    *> A 10 character string.\n       \n      *But counting all those x's can lead to errors, \n      *so the above code can, and should\n      *be re-written as:\n      01 MYNAME PIC X(10).\n       \n      *Here are some more examples:\n      01  AGE             PIC      9(3).   *> A number up to 3 digits.\n      01  LAST_NAME       PIC      X(10).  *> A string up to 10 characters.\n       \n      *In COBOL, multiple spaces are the same as a single space, so it is common\n      *to use multiple spaces to line up your code so that it is easier for other\n      *coders to read.\n      01  inyear picture s9(7). *> S makes number signed.\n                                 *> Brackets indicate 7 repeats of 9,\n                                 *> ie a 6 digit number (not an array).\n\n      *Now let's write some code. Here is a simple, Hello World program.\n      IDENTIFICATION DIVISION.\n      PROGRAM-ID. HELLO.\n      DATA DIVISION.\n      WORKING-STORAGE SECTION.\n      01 THE-MESSAGE      PIC X(20).\n      PROCEDURE DIVISION.\n          DISPLAY \"STARTING PROGRAM\".\n          MOVE \"HELLO WORLD\" TO THE-MESSAGE.\n          DISPLAY THE-MESSAGE.\n          STOP RUN.\n      \n      *The above code will output:\n      *STARTING PROGRAM\n      *HELLO WORLD\n      \n\n      \n      ********COBOL can perform math***************\n      ADD 1 TO AGE GIVING NEW-AGE.\n      SUBTRACT 1 FROM COUNT.\n      DIVIDE VAR-1 INTO VAR-2 GIVING VAR-3.\n      COMPUTE TOTAL-COUNT = COUNT1 PLUS COUNT2.\n      \n      \n      *********PERFORM********************\n      *The PERFORM keyword allows you to jump to another specified section of the code,\n      *and then to return to the next executable\n      *statement once the specified section of code is completed. \n      *You must write the full word, PERFORM, you cannot abbreviate it.\n\n      IDENTIFICATION DIVISION.\n      PROGRAM-ID. HELLOCOBOL.\n\n      PROCEDURE DIVISION.\n         FIRST-PARA.\n             DISPLAY 'THIS IS IN FIRST-PARA'.\n         PERFORM THIRD-PARA THRU FOURTH-PARA. *>skip second-para and perform 3rd & 4th\n         *> then after performing third and fourth,\n         *> return here and continue the program until STOP RUN.\n   \n         SECOND-PARA.\n             DISPLAY 'THIS IS IN SECOND-PARA'.\n         STOP RUN.\n   \n         THIRD-PARA.\n             DISPLAY 'THIS IS IN THIRD-PARA'.\n   \n         FOURTH-PARA.\n             DISPLAY 'THIS IS IN FOURTH-PARA'.\n   \n   \n      *When you compile and execute the above program, it produces the following result: \n          THIS IS IN FIRST-PARA\n          THIS IS IN THIRD-PARA\n          THIS IS IN FOURTH-PARA\n          THIS IS IN SECOND-PARA\n          \n          \n      **********Combining variables together using STRING ***********\n      \n      *Now it is time to learn about two related COBOL verbs: string and unstring.\n\n      *The string verb is used to concatenate, or put together, two or more strings.\n      *Unstring is used, not surprisingly, to separate a         \n      *string into two or more smaller strings. \n      *It is important that you remember to use ‘delimited by’ when you\n      *are using string or unstring in your program. \n\n      IDENTIFICATION DIVISION.\n      PROGRAM-ID. LEARNING.\n      ENVIRONMENT DIVISION.\n      DATA DIVISION.\n      WORKING-STORAGE SECTION.\n      01 FULL-NAME PIC X(20).\n      01 FIRST-NAME PIC X(13) VALUE \"BOB GIBBERISH\".\n      01 LAST-NAME PIC X(5) VALUE \"COBB\".\n      PROCEDURE DIVISION.\n          STRING FIRST-NAME DELIMITED BY SPACE\n            \" \"\n            LAST-NAME DELIMITED BY SIZE\n            INTO FULL-NAME\n          END-STRING.\n          DISPLAY \"THE FULL NAME IS: \"FULL-NAME.\n      STOP RUN.\n\n\n      *The above code will output:\n      THE FULL NAME IS: BOB COBB\n\n\n      *Let’s examine it to see why.\n\n      *First, we declared all of our variables, including the one that we are creating\n      *by the string command, in the DATA DIVISION.\n\n      *The action takes place down in the PROCEDURE DIVISION. \n      *We start with the STRING keyword and end with END-STRING. In between we         \n      *list what we want to combine together into the larger, master variable. \n      *Here, we are combining FIRST-NAME, a space, and LAST-NAME. \n\n      *The DELIMITED BY phrase that follows FIRST-NAME and \n      *LAST-NAME tells the program how much of each variable we want to capture. \n      *DELIMITED BY SPACE tells the program to start at the beginning, \n      *and capture the variable until it runs into a space. \n      *DELIMITED BY SIZE tells the program to capture the full size of the variable. \n      *Since we have DELIMITED BY SPACE after FIRST-NAME, the GIBBERISH part is ignored. \n\n      *To make this clearer, change line 10 in the above code to:\n\n      STRING FIRST-NAME DELIMITED BY SIZE\n\n      *and then re-run the program. This time the output is:\n\n      THE FULL NAME IS: BOB GIBBERISH COBB\n```\n\n## Further reading\n\n* [GnuCOBOL](https://sourceforge.net/projects/open-cobol/)\n\n"
        },
        {
          "name": "coffeescript.md",
          "type": "blob",
          "size": 2.8115234375,
          "content": "---\nname: CoffeeScript\ncontributors:\n  - [\"Tenor Biel\", \"http://github.com/L8D\"]\n  - [\"Xavier Yao\", \"http://github.com/xavieryao\"]\nfilename: coffeescript.coffee\n---\n\nCoffeeScript is a little language that compiles one-to-one into the equivalent\nJavaScript, and there is no interpretation at runtime. As one of the successors\nto JavaScript, CoffeeScript tries its best to output readable, pretty-printed\nand smooth-running JavaScript code, which works well in every JavaScript runtime.\nIt also attempts to try and make JavaScript more in line with the trends of many\nmodern languages.\n\nSee also [the CoffeeScript website](http://coffeescript.org/), which has a complete tutorial on CoffeeScript.\n\n```coffeescript\n# Comments are similar to Ruby and Python, using the hash symbol `#`\n\n###\nBlock comments are like these, and they translate directly to '/ *'s and '* /'s\nfor the resulting JavaScript code.\n\nYou should understand most of JavaScript semantics\nbefore continuing.\n###\n\n# Assignment:\nnumber   = 42 #=> var number = 42;\nopposite = true #=> var opposite = true;\n\n# Conditions:\nnumber = -42 if opposite #=> if(opposite) { number = -42; }\n\n# Functions:\nsquare = (x) -> x * x #=> var square = function(x) { return x * x; }\n\nfill = (container, liquid = \"coffee\") ->\n  \"Filling the #{container} with #{liquid}...\"\n#=>var fill;\n#\n#fill = function(container, liquid) {\n#  if (liquid == null) {\n#    liquid = \"coffee\";\n#  }\n#  return \"Filling the \" + container + \" with \" + liquid + \"...\";\n#};\n\n# Ranges:\nlist = [1..5] #=> var list = [1, 2, 3, 4, 5];\n\n# Objects:\nmath =\n  root:   Math.sqrt\n  square: square\n  cube:   (x) -> x * square x\n#=> var math = {\n#    \"root\": Math.sqrt,\n#    \"square\": square,\n#    \"cube\": function(x) { return x * square(x); }\n#   };\n\n# Splats:\nrace = (winner, runners...) ->\n  print winner, runners\n#=>race = function() {\n#    var runners, winner;\n#    winner = arguments[0], runners = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n#    return print(winner, runners);\n#  };\n\n# Existence:\nalert \"I knew it!\" if elvis?\n#=> if(typeof elvis !== \"undefined\" && elvis !== null) { alert(\"I knew it!\"); }\n\n# Array comprehensions:\ncubes = (math.cube num for num in list)\n#=>cubes = (function() {\n#\t  var _i, _len, _results;\n#\t  _results = [];\n# \tfor (_i = 0, _len = list.length; _i < _len; _i++) {\n#\t\t  num = list[_i];\n#\t\t  _results.push(math.cube(num));\n#\t  }\n#\t  return _results;\n# })();\n\nfoods = ['broccoli', 'spinach', 'chocolate']\neat food for food in foods when food isnt 'chocolate'\n#=>foods = ['broccoli', 'spinach', 'chocolate'];\n#\n#for (_k = 0, _len2 = foods.length; _k < _len2; _k++) {\n#  food = foods[_k];\n#  if (food !== 'chocolate') {\n#    eat(food);\n#  }\n#}\n```\n\n## Additional resources\n\n- [Smooth CoffeeScript](http://autotelicum.github.io/Smooth-CoffeeScript/)\n- [CoffeeScript Ristretto](https://leanpub.com/coffeescript-ristretto/read)\n"
        },
        {
          "name": "coldfusion.md",
          "type": "blob",
          "size": 8.890625,
          "content": "---\nname: ColdFusion\nfilename: learncoldfusion.cfm\ncontributors:\n    - [\"Wayne Boka\", \"http://wboka.github.io\"]\n    - [\"Kevin Morris\", \"https://twitter.com/kevinmorris\"]\n---\n\nColdFusion is a scripting language for web development.\n[Read more here.](http://www.adobe.com/products/coldfusion-family.html)\n\n### CFML\n_**C**old**F**usion **M**arkup **L**anguage_  \nColdFusion started as a tag-based language. Almost all functionality is available using tags.\n\n```cfm\n<em>HTML tags have been provided for output readability</em>\n\n<!--- Comments start with \"<!---\" and end with \"--->\" --->\n<!---\n    Comments can\n    also\n    span\n    multiple lines\n--->\n\n<!--- CFML tags have a similar format to HTML tags. --->\n<h1>Simple Variables</h1>\n<!--- Variable Declaration: Variables are loosely typed, similar to JavaScript --->\n<p>Set <b>myVariable</b> to \"myValue\"</p>\n<cfset myVariable = \"myValue\" />\n<p>Set <b>myNumber</b> to 3.14</p>\n<cfset myNumber = 3.14 />\n\n<!--- Displaying simple data --->\n<!--- Use <cfoutput> for simple values such as strings, numbers, and expressions --->\n<p>Display <b>myVariable</b>: <cfoutput>#myVariable#</cfoutput></p><!--- myValue --->\n<p>Display <b>myNumber</b>: <cfoutput>#myNumber#</cfoutput></p><!--- 3.14 --->\n\n<hr />\n\n<h1>Complex Variables</h1>\n<!--- Declaring complex variables --->\n<!--- Declaring an array of 1 dimension: literal or bracket notation --->\n<p>Set <b>myArray1</b> to an array of 1 dimension using literal or bracket notation</p>\n<cfset myArray1 = [] />\n<!--- Declaring an array of 1 dimension: function notation --->\n<p>Set <b>myArray2</b> to an array of 1 dimension using function notation</p>\n<cfset myArray2 = ArrayNew(1) />\n\n<!--- Outputting complex variables --->\n<p>Contents of <b>myArray1</b></p>\n<cfdump var=\"#myArray1#\" /> <!--- An empty array object --->\n<p>Contents of <b>myArray2</b></p>\n<cfdump var=\"#myArray2#\" /> <!--- An empty array object --->\n\n<!--- Operators --->\n<!--- Arithmetic --->\n<h1>Operators</h1>\n<h2>Arithmetic</h2>\n<p>1 + 1 = <cfoutput>#1 + 1#</cfoutput></p>\n<p>10 - 7 = <cfoutput>#10 - 7#<br /></cfoutput></p>\n<p>15 * 10 = <cfoutput>#15 * 10#<br /></cfoutput></p>\n<p>100 / 5 = <cfoutput>#100 / 5#<br /></cfoutput></p>\n<p>120 % 5 = <cfoutput>#120 % 5#<br /></cfoutput></p>\n<p>120 mod 5 = <cfoutput>#120 mod 5#<br /></cfoutput></p>\n\n<hr />\n\n<!--- Comparison --->\n<h2>Comparison</h2>\n<h3>Standard Notation</h3>\n<p>Is 1 eq 1? <cfoutput>#1 eq 1#</cfoutput></p>\n<p>Is 15 neq 1? <cfoutput>#15 neq 1#</cfoutput></p>\n<p>Is 10 gt 8? <cfoutput>#10 gt 8#</cfoutput></p>\n<p>Is 1 lt 2? <cfoutput>#1 lt 2#</cfoutput></p>\n<p>Is 10 gte 5? <cfoutput>#10 gte 5#</cfoutput></p>\n<p>Is 1 lte 5? <cfoutput>#1 lte 5#</cfoutput></p>\n\n<h3>Alternative Notation</h3>\n<p>Is 1 == 1? <cfoutput>#1 eq 1#</cfoutput></p>\n<p>Is 15 != 1? <cfoutput>#15 neq 1#</cfoutput></p>\n<p>Is 10 > 8? <cfoutput>#10 gt 8#</cfoutput></p>\n<p>Is 1 < 2? <cfoutput>#1 lt 2#</cfoutput></p>\n<p>Is 10 >= 5? <cfoutput>#10 gte 5#</cfoutput></p>\n<p>Is 1 <= 5? <cfoutput>#1 lte 5#</cfoutput></p>\n\n<hr />\n\n<!--- Control Structures --->\n<h1>Control Structures</h1>\n\n<cfset myCondition = \"Test\" />\n\n<p>Condition to test for: \"<cfoutput>#myCondition#</cfoutput>\"</p>\n\n<cfif myCondition eq \"Test\">\n    <cfoutput>#myCondition#. We're testing.</cfoutput>\n<cfelseif myCondition eq \"Production\">\n    <cfoutput>#myCondition#. Proceed Carefully!!!</cfoutput>\n<cfelse>\n    myCondition is unknown\n</cfif>\n\n<hr />\n\n<!--- Loops --->\n<h1>Loops</h1>\n<h2>For Loop</h2>\n<cfloop from=\"0\" to=\"10\" index=\"i\">\n\t<p>Index equals <cfoutput>#i#</cfoutput></p>\n</cfloop>\n\n<h2>For Each Loop (Complex Variables)</h2>\n\n<p>Set <b>myArray3</b> to [5, 15, 99, 45, 100]</p>\n\n<cfset myArray3 = [5, 15, 99, 45, 100] />\n\n<cfloop array=\"#myArray3#\" index=\"i\">\n\t<p>Index equals <cfoutput>#i#</cfoutput></p>\n</cfloop>\n\n<p>Set <b>myArray4</b> to [\"Alpha\", \"Bravo\", \"Charlie\", \"Delta\", \"Echo\"]</p>\n\n<cfset myArray4 = [\"Alpha\", \"Bravo\", \"Charlie\", \"Delta\", \"Echo\"] />\n\n<cfloop array=\"#myArray4#\" index=\"s\">\n\t<p>Index equals <cfoutput>#s#</cfoutput></p>\n</cfloop>\n\n<h2>Switch Statement</h2>\n\n<p>Set <b>myArray5</b> to [5, 15, 99, 45, 100]</p>\n\n<cfset myArray5 = [5, 15, 99, 45, 100] />\n\n<cfloop array=\"#myArray5#\" index=\"i\">\n\t<cfswitch expression=\"#i#\">\n\t\t<cfcase value=\"5,15,45\" delimiters=\",\">\n\t\t\t<p><cfoutput>#i#</cfoutput> is a multiple of 5.</p>\n\t\t</cfcase>\n\t\t<cfcase value=\"99\">\n\t\t\t<p><cfoutput>#i#</cfoutput> is ninety-nine.</p>\n\t\t</cfcase>\n\t\t<cfdefaultcase>\n\t\t\t<p><cfoutput>#i#</cfoutput> is not 5, 15, 45, or 99.</p>\n\t\t</cfdefaultcase> \n\t</cfswitch> \n</cfloop>\n\n<hr />\n\n<h1>Converting types</h1>\n\n<style>\n\ttable.table th, table.table td {\n\t\tborder: 1px solid #000000;\n\t\tpadding: 2px;\n\t}\n\t\n\ttable.table th {\n\t\tbackground-color: #CCCCCC;\n\t}\n</style>\n\n<table class=\"table\" cellspacing=\"0\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Value</th>\n\t\t\t<th>As Boolean</th>\n\t\t\t<th>As number</th>\n\t\t\t<th>As date-time</th>\n\t\t\t<th>As string</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>\"Yes\"</th>\n\t\t\t<td>TRUE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Error</td>\n\t\t\t<td>\"Yes\"</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>\"No\"</th>\n\t\t\t<td>FALSE</td>\n\t\t\t<td>0</td>\n\t\t\t<td>Error</td>\n\t\t\t<td>\"No\"</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>TRUE</th>\n\t\t\t<td>TRUE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Error</td>\n\t\t\t<td>\"Yes\"</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>FALSE</th>\n\t\t\t<td>FALSE</td>\n\t\t\t<td>0</td>\n\t\t\t<td>Error</td>\n\t\t\t<td>\"No\"</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>Number</th>\n\t\t\t<td>True if Number is not 0; False otherwise.</td>\n\t\t\t<td>Number</td>\n\t\t\t<td>See &#34;Date-time values&#34; earlier in this chapter.</td>\n\t\t\t<td>String representation of the number (for example, &#34;8&#34;).</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>String</th>\n\t\t\t<td>If \"Yes\", True <br>If \"No\", False <br>If it can be converted to 0, False <br>If it can be converted to any other number, True</td>\n\t\t\t<td>If it represents a number (for example, &#34;1,000&#34; or &#34;12.36E-12&#34;), it is converted to the corresponding number.</td>\n\t\t\t<td>If it represents a date-time (see next column), it is converted to the numeric value of the corresponding date-time object. <br>If it is an ODBC date, time, or timestamp (for example &#34;{ts &#39;2001-06-14 11:30:13&#39;}&#34;, or if it is expressed in a standard U.S. date or time format, including the use of full or abbreviated month names, it is converted to the corresponding date-time value. <br>Days of the week or unusual punctuation result in an error. <br>Dashes, forward-slashes, and spaces are generally allowed.</td>\n\t\t\t<td>String</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>Date</th>\n\t\t\t<td>Error</td>\n\t\t\t<td>The numeric value of the date-time object.</td>\n\t\t\t<td>Date</td>\n\t\t\t<td>An ODBC timestamp.</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<hr />\n\n<h1>Components</h1>\n\n<em>Code for reference (Functions must return something to support IE)</em>\n```\n\n```cfs\n<cfcomponent>\n\t<cfset this.hello = \"Hello\" />\n\t<cfset this.world = \"world\" />\n\n\t<cffunction name=\"sayHello\">\n\t\t<cfreturn this.hello & \", \" & this.world & \"!\" />\n\t</cffunction>\n\t\n\t<cffunction name=\"setHello\">\n\t\t<cfargument name=\"newHello\" type=\"string\" required=\"true\" />\n\t\t\n\t\t<cfset this.hello = arguments.newHello />\n\t\t \n\t\t<cfreturn true />\n\t</cffunction>\n\t\n\t<cffunction name=\"setWorld\">\n\t\t<cfargument name=\"newWorld\" type=\"string\" required=\"true\" />\n\t\t\n\t\t<cfset this.world = arguments.newWorld />\n\t\t \n\t\t<cfreturn true />\n\t</cffunction>\n\t\n\t<cffunction name=\"getHello\">\n\t\t<cfreturn this.hello />\n\t</cffunction>\n\t\n\t<cffunction name=\"getWorld\">\n\t\t<cfreturn this.world />\n\t</cffunction>\n</cfcomponent>\n\n<cfset this.hello = \"Hello\" />\n<cfset this.world = \"world\" />\n\n<cffunction name=\"sayHello\">\n\t<cfreturn this.hello & \", \" & this.world & \"!\" />\n</cffunction>\n\n<cffunction name=\"setHello\">\n\t<cfargument name=\"newHello\" type=\"string\" required=\"true\" />\n\t\n\t<cfset this.hello = arguments.newHello />\n\t \n\t<cfreturn true />\n</cffunction>\n\n<cffunction name=\"setWorld\">\n\t<cfargument name=\"newWorld\" type=\"string\" required=\"true\" />\n\t\n\t<cfset this.world = arguments.newWorld />\n\t \n\t<cfreturn true />\n</cffunction>\n\n<cffunction name=\"getHello\">\n\t<cfreturn this.hello />\n</cffunction>\n\n<cffunction name=\"getWorld\">\n\t<cfreturn this.world />\n</cffunction>\n\n\n<b>sayHello()</b>\n<cfoutput><p>#sayHello()#</p></cfoutput>\n<b>getHello()</b>\n<cfoutput><p>#getHello()#</p></cfoutput>\n<b>getWorld()</b>\n<cfoutput><p>#getWorld()#</p></cfoutput>\n<b>setHello(\"Hola\")</b>\n<cfoutput><p>#setHello(\"Hola\")#</p></cfoutput>\n<b>setWorld(\"mundo\")</b>\n<cfoutput><p>#setWorld(\"mundo\")#</p></cfoutput>\n<b>sayHello()</b>\n<cfoutput><p>#sayHello()#</p></cfoutput>\n<b>getHello()</b>\n<cfoutput><p>#getHello()#</p></cfoutput>\n<b>getWorld()</b>\n<cfoutput><p>#getWorld()#</p></cfoutput>\n```\n\n### CFScript\n_**C**old**F**usion **S**cript_  \nIn recent years, the ColdFusion language has added script syntax to mirror tag functionality. When using an up-to-date CF server, almost all functionality is available using scrypt syntax.\n\n## Further Reading\n\nThe links provided here below are just to get an understanding of the topic, feel free to Google and find specific examples.\n\n1. [Coldfusion Reference From Adobe](https://helpx.adobe.com/coldfusion/cfml-reference/topics.html)\n2. [Open Source Documentation](http://cfdocs.org/)\n"
        },
        {
          "name": "common-lisp.md",
          "type": "blob",
          "size": 19.849609375,
          "content": "---\n\nname: \"Common Lisp\"\nfilename: commonlisp.lisp\ncontributors:\n  - [\"Paul Nathan\", \"https://github.com/pnathan\"]\n  - [\"Rommel Martinez\", \"https://ebzzry.io\"]\n---\n\nCommon Lisp is a general-purpose, multi-paradigm programming language suited for a wide variety of\nindustry applications. It is frequently referred to as a programmable programming language.\n\nThe classic starting point is [Practical Common Lisp](http://www.gigamonkeys.com/book/). Another\npopular and recent book is [Land of Lisp](http://landoflisp.com/). A new book about best practices,\n[Common Lisp Recipes](http://weitz.de/cl-recipes/), was recently published.\n\n\n\n```lisp\n;;;-----------------------------------------------------------------------------\n;;; 0. Syntax\n;;;-----------------------------------------------------------------------------\n\n;;; General form\n\n;;; CL has two fundamental pieces of syntax: ATOM and S-EXPRESSION.\n;;; Typically, grouped S-expressions are called `forms`.\n\n10            ; an atom; it evaluates to itself\n:thing        ; another atom; evaluating to the symbol :thing\nt             ; another atom, denoting true\n(+ 1 2 3 4)   ; an s-expression\n'(4 :foo t)   ; another s-expression\n\n\n;;; Comments\n\n;;; Single-line comments start with a semicolon; use four for file-level\n;;; comments, three for section descriptions, two inside definitions, and one\n;;; for single lines. For example,\n\n;;;; life.lisp\n\n;;; Foo bar baz, because quu quux. Optimized for maximum krakaboom and umph.\n;;; Needed by the function LINULUKO.\n\n(defun meaning (life)\n  \"Return the computed meaning of LIFE\"\n  (let ((meh \"abc\"))\n    ;; Invoke krakaboom\n    (loop :for x :across meh\n       :collect x)))                    ; store values into x, then return it\n\n;;; Block comments, on the other hand, allow for free-form comments. They are\n;;; delimited with #| and |#\n\n#| This is a block comment which\n   can span multiple lines and\n    #|\n       they can be nested!\n    |#\n|#\n\n\n;;; Environment\n\n;;; A variety of implementations exist; most are standards-conformant. SBCL\n;;; is a good starting point. Third party libraries can be easily installed with\n;;; Quicklisp\n\n;;; CL is usually developed with a text editor and a Read Eval Print\n;;; Loop (REPL) running at the same time. The REPL allows for interactive\n;;; exploration of the program while it is running \"live\".\n\n\n;;;-----------------------------------------------------------------------------\n;;; 1. Primitive datatypes and operators\n;;;-----------------------------------------------------------------------------\n\n;;; Symbols\n\n'foo ; => FOO  Notice that the symbol is upper-cased automatically.\n\n;;; INTERN manually creates a symbol from a string.\n\n(intern \"AAAA\")        ; => AAAA\n(intern \"aaa\")         ; => |aaa|\n\n;;; Numbers\n\n9999999999999999999999 ; integers\n#b111                  ; binary => 7\n#o111                  ; octal => 73\n#x111                  ; hexadecimal => 273\n3.14159s0              ; single\n3.14159d0              ; double\n1/2                    ; ratios\n#C(1 2)                ; complex numbers\n\n;;; Function application are written as (f x y z ...) where f is a function and\n;;; x, y, z, ... are the arguments.\n\n(+ 1 2)                ; => 3\n\n;;; If you want to create literal data, use QUOTE to prevent it from being\n;;; evaluated\n\n(quote (+ 1 2))        ; => (+ 1 2)\n(quote a)              ; => A\n\n;;; The shorthand for QUOTE is '\n\n'(+ 1 2)               ; => (+ 1 2)\n'a                     ; => A\n\n;;; Basic arithmetic operations\n\n(+ 1 1)                ; => 2\n(- 8 1)                ; => 7\n(* 10 2)               ; => 20\n(expt 2 3)             ; => 8\n(mod 5 2)              ; => 1\n(/ 35 5)               ; => 7\n(/ 1 3)                ; => 1/3\n(+ #C(1 2) #C(6 -4))   ; => #C(7 -2)\n\n;;; Booleans\n\nt                      ; true; any non-NIL value is true\nnil                    ; false; also, the empty list: ()\n(not nil)              ; => T\n(and 0 t)              ; => T\n(or 0 nil)             ; => 0\n\n;;; Characters\n\n#\\A                    ; => #\\A\n#\\λ                    ; => #\\GREEK_SMALL_LETTER_LAMDA\n#\\u03BB                ; => #\\GREEK_SMALL_LETTER_LAMDA\n\n;;; Strings are fixed-length arrays of characters\n\n\"Hello, world!\"\n\"Benjamin \\\"Bugsy\\\" Siegel\"   ; backslash is an escaping character\n\n;;; Strings can be concatenated\n\n(concatenate 'string \"Hello, \" \"world!\") ; => \"Hello, world!\"\n\n;;; A string can be treated like a sequence of characters\n\n(elt \"Apple\" 0) ; => #\\A\n\n;;; FORMAT is used to create formatted output, which ranges from simple string\n;;; interpolation to loops and conditionals. The first argument to FORMAT\n;;; determines where will the formatted string go. If it is NIL, FORMAT\n;;; simply returns the formatted string as a value; if it is T, FORMAT outputs\n;;; to the standard output, usually the screen, then it returns NIL.\n\n(format nil \"~A, ~A!\" \"Hello\" \"world\")   ; => \"Hello, world!\"\n(format t \"~A, ~A!\" \"Hello\" \"world\")     ; => NIL\n\n\n;;;-----------------------------------------------------------------------------\n;;; 2. Variables\n;;;-----------------------------------------------------------------------------\n\n;;; You can create a global (dynamically scoped) variable using DEFVAR and\n;;; DEFPARAMETER. The variable name can use any character except: ()\",'`;#|\\\n\n;;; The difference between DEFVAR and DEFPARAMETER is that re-evaluating a\n;;; DEFVAR expression doesn't change the value of the variable. DEFPARAMETER,\n;;; on the other hand, does.\n\n;;; By convention, dynamically scoped variables have earmuffs in their name.\n\n(defparameter *some-var* 5)\n*some-var* ; => 5\n\n;;; You can also use unicode characters.\n(defparameter *AΛB* nil)\n\n;;; Accessing a previously unbound variable results in an UNBOUND-VARIABLE\n;;; error, however it is defined behavior. Don't do it.\n\n;;; You can create local bindings with LET. In the following snippet, `me` is\n;;; bound to \"dance with you\" only within the (let ...). LET always returns\n;;; the value of the last `form` in the LET form.\n\n(let ((me \"dance with you\")) me) ; => \"dance with you\"\n\n\n;;;-----------------------------------------------------------------------------;\n;;; 3. Structs and collections\n;;;-----------------------------------------------------------------------------;\n\n\n;;; Structs\n\n(defstruct dog name breed age)\n(defparameter *rover*\n    (make-dog :name \"rover\"\n              :breed \"collie\"\n              :age 5))\n*rover*            ; => #S(DOG :NAME \"rover\" :BREED \"collie\" :AGE 5)\n(dog-p *rover*)    ; => T\n(dog-name *rover*) ; => \"rover\"\n\n;;; DOG-P, MAKE-DOG, and DOG-NAME are all automatically created by DEFSTRUCT\n\n\n;;; Pairs\n\n;;; CONS constructs pairs. CAR and CDR return the head and tail of a CONS-pair.\n\n(cons 'SUBJECT 'VERB)         ; => '(SUBJECT . VERB)\n(car (cons 'SUBJECT 'VERB))   ; => SUBJECT\n(cdr (cons 'SUBJECT 'VERB))   ; => VERB\n\n\n;;; Lists\n\n;;; Lists are linked-list data structures, made of CONS pairs and end with a\n;;; NIL (or '()) to mark the end of the list\n\n(cons 1 (cons 2 (cons 3 nil)))     ; => '(1 2 3)\n\n;;; LIST is a convenience variadic constructor for lists\n\n(list 1 2 3)                       ; => '(1 2 3)\n\n;;; When the first argument to CONS is an atom and the second argument is a\n;;; list, CONS returns a new CONS-pair with the first argument as the first\n;;; item and the second argument as the rest of the CONS-pair\n\n(cons 4 '(1 2 3))                  ; => '(4 1 2 3)\n\n;;; Use APPEND to join lists\n\n(append '(1 2) '(3 4))             ; => '(1 2 3 4)\n\n;;; Or CONCATENATE\n\n(concatenate 'list '(1 2) '(3 4))  ; => '(1 2 3 4)\n\n;;; Lists are a very central type, so there is a wide variety of functionality for\n;;; them, a few examples:\n\n(mapcar #'1+ '(1 2 3))             ; => '(2 3 4)\n(mapcar #'+ '(1 2 3) '(10 20 30))  ; => '(11 22 33)\n(remove-if-not #'evenp '(1 2 3 4)) ; => '(2 4)\n(every #'evenp '(1 2 3 4))         ; => NIL\n(some #'oddp '(1 2 3 4))           ; => T\n(butlast '(subject verb object))   ; => (SUBJECT VERB)\n\n\n;;; Vectors\n\n;;; Vector's literals are fixed-length arrays\n\n#(1 2 3) ; => #(1 2 3)\n\n;;; Use CONCATENATE to add vectors together\n\n(concatenate 'vector #(1 2 3) #(4 5 6)) ; => #(1 2 3 4 5 6)\n\n\n;;; Arrays\n\n;;; Both vectors and strings are special-cases of arrays.\n\n;;; 2D arrays\n\n(make-array (list 2 2))         ; => #2A((0 0) (0 0))\n(make-array '(2 2))             ; => #2A((0 0) (0 0))\n(make-array (list 2 2 2))       ; => #3A(((0 0) (0 0)) ((0 0) (0 0)))\n\n;;; Caution: the default initial values of MAKE-ARRAY are implementation-defined.\n;;; To explicitly specify them:\n\n(make-array '(2) :initial-element 'unset)  ; => #(UNSET UNSET)\n\n;;; To access the element at 1, 1, 1:\n\n(aref (make-array (list 2 2 2)) 1 1 1)     ;  => 0\n;;; This value is implementation-defined:\n;;; NIL on ECL, 0 on SBCL and CCL.\n\n;;; Adjustable vectors\n\n;;; Adjustable vectors have the same printed representation as\n;;; fixed-length vector's literals.\n\n(defparameter *adjvec* (make-array '(3) :initial-contents '(1 2 3)\n                                   :adjustable t :fill-pointer t))\n*adjvec* ; => #(1 2 3)\n\n;;; Adding new elements\n\n(vector-push-extend 4 *adjvec*)   ; => 3\n*adjvec*                          ; => #(1 2 3 4)\n\n\n;;; Sets, naively, are just lists:\n\n(set-difference '(1 2 3 4) '(4 5 6 7))   ; => (3 2 1)\n(intersection '(1 2 3 4) '(4 5 6 7))     ; => 4\n(union '(1 2 3 4) '(4 5 6 7))            ; => (3 2 1 4 5 6 7)\n(adjoin 4 '(1 2 3 4))                    ; => (1 2 3 4)\n\n;;; However, you'll need a better data structure than linked lists when working\n;;; with larger data sets\n\n;;; Dictionaries are implemented as hash tables.\n\n;;; Create a hash table\n\n(defparameter *m* (make-hash-table))\n\n;;; Set value\n\n(setf (gethash 'a *m*) 1)\n\n;;; Retrieve value\n\n(gethash 'a *m*) ; => 1, T\n\n;;; CL expressions have the ability to return multiple values.\n\n(values 1 2) ; => 1, 2\n\n;;; which can be bound with MULTIPLE-VALUE-BIND\n\n(multiple-value-bind (x y)\n    (values 1 2)\n  (list y x))\n\n; => '(2 1)\n\n;;; GETHASH is an example of a function that returns multiple values. The first\n;;; value it return is the value of the key in the hash table; if the key is\n;;; not found it returns NIL.\n\n;;; The second value determines if that key is indeed present in the hash\n;;; table. If a key is not found in the table it returns NIL. This behavior\n;;; allows us to check if the value of a key is actually NIL.\n\n;;; Retrieving a non-present value returns nil\n\n(gethash 'd *m*) ;=> NIL, NIL\n\n;;; You can provide a default value for missing keys\n\n(gethash 'd *m* :not-found) ; => :NOT-FOUND\n\n;;; Let's handle the multiple return values here in code.\n\n(multiple-value-bind (a b)\n    (gethash 'd *m*)\n  (list a b))\n; => (NIL NIL)\n\n(multiple-value-bind (a b)\n    (gethash 'a *m*)\n  (list a b))\n; => (1 T)\n\n\n;;;-----------------------------------------------------------------------------\n;;; 3. Functions\n;;;-----------------------------------------------------------------------------\n\n;;; Use LAMBDA to create anonymous functions. Functions always returns the\n;;; value of the last expression. The exact printable representation of a\n;;; function varies between implementations.\n\n(lambda () \"Hello World\") ; => #<FUNCTION (LAMBDA ()) {1004E7818B}>\n\n;;; Use FUNCALL to call anonymous functions\n\n(funcall (lambda () \"Hello World\"))   ; => \"Hello World\"\n(funcall #'+ 1 2 3)                   ; => 6\n\n;;; A call to FUNCALL is also implied when the lambda expression is the CAR of\n;;; an unquoted list\n\n((lambda () \"Hello World\"))           ; => \"Hello World\"\n((lambda (val) val) \"Hello World\")    ; => \"Hello World\"\n\n;;; FUNCALL is used when the arguments are known beforehand. Otherwise, use APPLY\n\n(apply #'+ '(1 2 3))   ; => 6\n(apply (lambda () \"Hello World\") nil) ; => \"Hello World\"\n\n;;; To name a function, use DEFUN\n\n(defun hello-world () \"Hello World\")\n(hello-world) ; => \"Hello World\"\n\n;;; The () in the definition above is the list of arguments\n\n(defun hello (name) (format nil \"Hello, ~A\" name))\n(hello \"Steve\") ; => \"Hello, Steve\"\n\n;;; Functions can have optional arguments; they default to NIL\n\n(defun hello (name &optional from)\n  (if from\n      (format t \"Hello, ~A, from ~A\" name from)\n      (format t \"Hello, ~A\" name)))\n\n(hello \"Jim\" \"Alpacas\")       ; => Hello, Jim, from Alpacas\n\n;;; The default values can also be specified\n\n(defun hello (name &optional (from \"The world\"))\n   (format nil \"Hello, ~A, from ~A\" name from))\n\n(hello \"Steve\")               ; => Hello, Steve, from The world\n(hello \"Steve\" \"the alpacas\") ; => Hello, Steve, from the alpacas\n\n;;; Functions also have keyword arguments to allow non-positional arguments\n\n(defun generalized-greeter (name &key (from \"the world\") (honorific \"Mx\"))\n  (format t \"Hello, ~A ~A, from ~A\" honorific name from))\n\n(generalized-greeter \"Jim\")\n; => Hello, Mx Jim, from the world\n\n(generalized-greeter \"Jim\" :from \"the alpacas you met last summer\" :honorific \"Mr\")\n; => Hello, Mr Jim, from the alpacas you met last summer\n\n\n;;;-----------------------------------------------------------------------------\n;;; 4. Equality\n;;;-----------------------------------------------------------------------------\n\n;;; CL has a sophisticated equality system. Some are covered here.\n\n;;; For numbers, use `='\n(= 3 3.0)               ; => T\n(= 2 1)                 ; => NIL\n\n;;; For object identity (approximately) use EQL\n(eql 3 3)               ; => T\n(eql 3 3.0)             ; => NIL\n(eql (list 3) (list 3)) ; => NIL\n\n;;; for lists, strings, and bit-vectors use EQUAL\n(equal (list 'a 'b) (list 'a 'b)) ; => T\n(equal (list 'a 'b) (list 'b 'a)) ; => NIL\n\n\n;;;-----------------------------------------------------------------------------\n;;; 5. Control Flow\n;;;-----------------------------------------------------------------------------\n\n;;; Conditionals\n\n(if t                ; test expression\n    \"this is true\"   ; then expression\n    \"this is false\") ; else expression\n; => \"this is true\"\n\n;;; In conditionals, all non-NIL values are treated as true\n\n(member 'Groucho '(Harpo Groucho Zeppo)) ; => '(GROUCHO ZEPPO)\n(if (member 'Groucho '(Harpo Groucho Zeppo))\n    'yep\n    'nope)\n; => 'YEP\n\n;;; COND chains a series of tests to select a result\n(cond ((> 2 2) (error \"wrong!\"))\n      ((< 2 2) (error \"wrong again!\"))\n      (t 'ok)) ; => 'OK\n\n;;; TYPECASE switches on the type of the value\n(typecase 1\n  (string :string)\n  (integer :int))\n; => :int\n\n\n;;; Looping\n\n;;; Recursion\n\n(defun fact (n)\n  (if (< n 2)\n      1\n    (* n (fact(- n 1)))))\n\n(fact 5) ; => 120\n\n;;; Iteration\n\n(defun fact (n)\n  (loop :for result = 1 :then (* result i)\n     :for i :from 2 :to n\n     :finally (return result)))\n\n(fact 5) ; => 120\n\n(loop :for x :across \"abcd\" :collect x)\n; => (#\\a #\\b #\\c #\\d)\n\n(dolist (i '(1 2 3 4))\n  (format t \"~A\" i))\n; => 1234\n\n\n;;;-----------------------------------------------------------------------------\n;;; 6. Mutation\n;;;-----------------------------------------------------------------------------\n\n;;; Use SETF to assign a new value to an existing variable. This was\n;;; demonstrated earlier in the hash table example.\n\n(let ((variable 10))\n    (setf variable 2))\n; => 2\n\n;;; Good Lisp style is to minimize the use of destructive functions and to avoid\n;;; mutation when reasonable.\n\n\n;;;-----------------------------------------------------------------------------\n;;; 7. Classes and objects\n;;;-----------------------------------------------------------------------------\n\n;;; No more animal classes. Let's have Human-Powered Mechanical\n;;; Conveyances.\n\n(defclass human-powered-conveyance ()\n  ((velocity\n    :accessor velocity\n    :initarg :velocity)\n   (average-efficiency\n    :accessor average-efficiency\n   :initarg :average-efficiency))\n  (:documentation \"A human powered conveyance\"))\n\n;;; The arguments to DEFCLASS, in order are:\n;;; 1. class name\n;;; 2. superclass list\n;;; 3. slot list\n;;; 4. optional specifiers\n\n;;; When no superclass list is set, the empty list defaults to the\n;;; standard-object class. This *can* be changed, but not until you\n;;; know what you're doing. Look up the Art of the Metaobject Protocol\n;;; for more information.\n\n(defclass bicycle (human-powered-conveyance)\n  ((wheel-size\n    :accessor wheel-size\n    :initarg :wheel-size\n    :documentation \"Diameter of the wheel.\")\n   (height\n    :accessor height\n    :initarg :height)))\n\n(defclass recumbent (bicycle)\n  ((chain-type\n    :accessor chain-type\n    :initarg :chain-type)))\n\n(defclass unicycle (human-powered-conveyance) nil)\n\n(defclass canoe (human-powered-conveyance)\n  ((number-of-rowers\n    :accessor number-of-rowers\n    :initarg :number-of-rowers)))\n\n;;; Calling DESCRIBE on the HUMAN-POWERED-CONVEYANCE class in the REPL gives:\n\n(describe 'human-powered-conveyance)\n\n; COMMON-LISP-USER::HUMAN-POWERED-CONVEYANCE\n;  [symbol]\n;\n; HUMAN-POWERED-CONVEYANCE names the standard-class #<STANDARD-CLASS\n;                                                    HUMAN-POWERED-CONVEYANCE>:\n;  Documentation:\n;    A human powered conveyance\n;  Direct superclasses: STANDARD-OBJECT\n;  Direct subclasses: UNICYCLE, BICYCLE, CANOE\n;  Not yet finalized.\n;  Direct slots:\n;    VELOCITY\n;      Readers: VELOCITY\n;      Writers: (SETF VELOCITY)\n;    AVERAGE-EFFICIENCY\n;      Readers: AVERAGE-EFFICIENCY\n;      Writers: (SETF AVERAGE-EFFICIENCY)\n\n;;; Note the reflective behavior available. CL was designed to be an\n;;; interactive system\n\n;;; To define a method, let's find out what our circumference of the\n;;; bike wheel turns out to be using the equation: C = d * pi\n\n(defmethod circumference ((object bicycle))\n  (* pi (wheel-size object)))\n\n;;; PI is defined as a built-in in CL\n\n;;; Let's suppose we find out that the efficiency value of the number\n;;; of rowers in a canoe is roughly logarithmic. This should probably be set\n;;; in the constructor/initializer.\n\n;;; To initialize your instance after CL gets done constructing it:\n\n(defmethod initialize-instance :after ((object canoe) &rest args)\n  (setf (average-efficiency object)  (log (1+ (number-of-rowers object)))))\n\n;;; Then to construct an instance and check the average efficiency...\n\n(average-efficiency (make-instance 'canoe :number-of-rowers 15))\n; => 2.7725887\n\n\n;;;-----------------------------------------------------------------------------\n;;; 8. Macros\n;;;-----------------------------------------------------------------------------\n\n;;; Macros let you extend the syntax of the language. CL doesn't come\n;;; with a WHILE loop, however, it's trivial to write one. If we obey our\n;;; assembler instincts, we wind up with:\n\n(defmacro while (condition &body body)\n    \"While `condition` is true, `body` is executed.\n`condition` is tested prior to each execution of `body`\"\n    (let ((block-name (gensym)) (done (gensym)))\n        `(tagbody\n           ,block-name\n           (unless ,condition\n               (go ,done))\n           (progn\n           ,@body)\n           (go ,block-name)\n           ,done)))\n\n;;; Let's look at the high-level version of this:\n\n(defmacro while (condition &body body)\n    \"While `condition` is true, `body` is executed.\n`condition` is tested prior to each execution of `body`\"\n  `(loop while ,condition\n         do\n         (progn\n            ,@body)))\n\n;;; However, with a modern compiler, this is not required; the LOOP form\n;;; compiles equally well and is easier to read.\n\n;;; Note that ``` is used, as well as `,` and `@`. ``` is a quote-type operator\n;;; known as quasiquote; it allows the use of `,` . `,` allows \"unquoting\"\n;;; variables. @ interpolates lists.\n\n;;; GENSYM creates a unique symbol guaranteed to not exist elsewhere in\n;;; the system. This is because macros are expanded at compile time and\n;;; variables declared in the macro can collide with variables used in\n;;; regular code.\n\n;;; See Practical Common Lisp and On Lisp for more information on macros.\n```\n\n\n## Further reading\n\n- [Practical Common Lisp](http://www.gigamonkeys.com/book/)\n- [Common Lisp: A Gentle Introduction to Symbolic Computation](https://www.cs.cmu.edu/~dst/LispBook/book.pdf)\n\n\n## Extra information\n\n- [CLiki](http://www.cliki.net/)\n- [common-lisp.net](https://common-lisp.net/)\n- [Awesome Common Lisp](https://github.com/CodyReichert/awesome-cl)\n- [Lisp Lang](http://lisp-lang.org/)\n\n\n## Credits\n\nLots of thanks to the Scheme people for rolling up a great starting\npoint which could be easily moved to Common Lisp.\n\n- [Paul Khuong](https://github.com/pkhuong) for some great reviewing.\n"
        },
        {
          "name": "compojure.md",
          "type": "blob",
          "size": 6.7548828125,
          "content": "---\ncategory: tool\nname: Compojure\ncontributors:\n    - [\"Adam Bard\", \"http://adambard.com/\"]\nfilename: learncompojure.clj\n---\n\n## Getting Started with Compojure\n\nCompojure is a DSL for *quickly* creating *performant* web applications\nin Clojure with minimal effort:\n\n```clojure\n(ns myapp.core\n  (:require [compojure.core :refer :all]\n            [org.httpkit.server :refer [run-server]])) ; httpkit is a server\n\n(defroutes myapp\n  (GET \"/\" [] \"Hello World\"))\n\n(defn -main []\n  (run-server myapp {:port 5000}))\n```\n\n**Step 1:** Create a project with [Leiningen](http://leiningen.org/):\n\n```\nlein new myapp\n```\n\n**Step 2:** Put the above code in `src/myapp/core.clj`\n\n**Step 3:** Add some dependencies to `project.clj`:\n\n```\n[compojure \"1.1.8\"]\n[http-kit \"2.1.16\"]\n```\n\n**Step 4:** Run:\n\n```\nlein run -m myapp.core\n```\n\nView at: <http://localhost:5000/>\n\nCompojure apps will run on any ring-compatible server, but we recommend\n[http-kit](http://http-kit.org/) for its performance and\n[massive concurrency](http://http-kit.org/600k-concurrent-connection-http-kit.html).\n\n### Routes\n\nIn compojure, each route is an HTTP method paired with a URL-matching pattern,\nan argument list, and a body.\n\n```clojure\n(defroutes myapp\n  (GET \"/\" [] \"Show something\")\n  (POST \"/\" [] \"Create something\")\n  (PUT \"/\" [] \"Replace something\")\n  (PATCH \"/\" [] \"Modify Something\")\n  (DELETE \"/\" [] \"Annihilate something\")\n  (OPTIONS \"/\" [] \"Appease something\")\n  (HEAD \"/\" [] \"Preview something\"))\n```\n\nCompojure route definitions are just functions which\n[accept request maps and return response maps](https://github.com/mmcgrana/ring/blob/master/SPEC):\n\n```clojure\n(myapp {:uri \"/\" :request-method :post})\n; => {:status 200\n;     :headers {\"Content-Type\" \"text/html; charset=utf-8}\n;     :body \"Create Something\"}\n```\n\nThe body may be a function, which must accept the request as a parameter:\n\n```clojure\n(defroutes myapp\n  (GET \"/\" [] (fn [req] \"Do something with req\")))\n```\n\nOr, you can just use the request directly:\n\n```clojure\n(defroutes myapp\n  (GET \"/\" req \"Do something with req\"))\n```\n\nRoute patterns may include named parameters:\n\n```clojure\n(defroutes myapp\n  (GET \"/hello/:name\" [name] (str \"Hello \" name)))\n```\n\nYou can adjust what each parameter matches by supplying a regex:\n\n```clojure\n(defroutes myapp\n  (GET [\"/file/:name.:ext\" :name #\".*\", :ext #\".*\"] [name ext]\n    (str \"File: \" name ext)))\n```\n\n### Middleware\n\nClojure uses [Ring](https://github.com/ring-clojure/ring) for routing.\nHandlers are just functions that accept a request map and return a\nresponse map (Compojure will turn strings into 200 responses for you).\n\nYou can easily write middleware that wraps all or part of your\napplication to modify requests or responses:\n\n```clojure\n(defroutes myapp\n  (GET \"/\" req (str \"Hello World v\" (:app-version req))))\n\n(defn wrap-version [handler]\n  (fn [request]\n    (handler (assoc request :app-version \"1.0.1\"))))\n\n(defn -main []\n  (run-server (wrap-version myapp) {:port 5000}))\n```\n\n[Ring-Defaults](https://github.com/ring-clojure/ring-defaults) provides some handy\nmiddlewares for sites and apis, so add it to your dependencies:\n\n```\n[ring/ring-defaults \"0.1.1\"]\n```\n\nThen, you can import it in your ns:\n\n```\n(ns myapp.core\n  (:require [compojure.core :refer :all]\n            [ring.middleware.defaults :refer :all]\n            [org.httpkit.server :refer [run-server]]))\n```\n\nAnd use `wrap-defaults` to add the `site-defaults` middleware to your\napp:\n\n```\n(defn -main []\n  (run-server (wrap-defaults myapp site-defaults) {:port 5000}))\n```\n\nNow, your handlers may utilize query parameters:\n\n```clojure\n(defroutes myapp\n  (GET \"/posts\" req\n    (let [title (get (:params req) :title)\n          author (get (:params req) :author)]\n      (str \"Title: \" title \", Author: \" author))))\n```\n\nOr, for POST and PUT requests, form parameters as well\n\n```clojure\n(defroutes myapp\n  (POST \"/posts\" req\n    (let [title (get (:params req) :title)\n          author (get (:params req) :author)]\n      (str \"Title: \" title \", Author: \" author))))\n```\n\n\n### Return values\n\nThe return value of a route block determines the response body\npassed on to the HTTP client, or at least the next middleware in the\nring stack. Most commonly, this is a string, as in the above examples.\nBut, you may also return a [response map](https://github.com/mmcgrana/ring/blob/master/SPEC):\n\n```clojure\n(defroutes myapp\n  (GET \"/\" []\n    {:status 200 :body \"Hello World\"})\n  (GET \"/is-403\" []\n    {:status 403 :body \"\"})\n  (GET \"/is-json\" []\n    {:status 200 :headers {\"Content-Type\" \"application/json\"} :body \"{}\"}))\n```\n\n### Static Files\n\nTo serve up static files, use `compojure.route.resources`.\nResources will be served from your project's `resources/` folder.\n\n```clojure\n(require '[compojure.route :as route])\n\n(defroutes myapp\n  (GET \"/\")\n  (route/resources \"/\")) ; Serve static resources at the root path\n\n(myapp {:uri \"/js/script.js\" :request-method :get})\n; => Contents of resources/public/js/script.js\n```\n\n### Views / Templates\n\nTo use templating with Compojure, you'll need a template library. Here are a few:\n\n#### [Stencil](https://github.com/davidsantiago/stencil)\n\n[Stencil](https://github.com/davidsantiago/stencil) is a [Mustache](http://mustache.github.com/) template library:\n\n```clojure\n(require '[stencil.core :refer [render-string]])\n\n(defroutes myapp\n  (GET \"/hello/:name\" [name]\n    (render-string \"Hello {{name}}\" {:name name})))\n```\n\nYou can easily read in templates from your resources directory. Here's a helper function\n\n```clojure\n(require 'clojure.java.io)\n\n(defn read-template [filename]\n  (slurp (clojure.java.io/resource filename)))\n\n(defroutes myapp\n  (GET \"/hello/:name\" [name]\n    (render-string (read-template \"templates/hello.html\") {:name name})))\n```\n\n#### [Selmer](https://github.com/yogthos/Selmer)\n\n[Selmer](https://github.com/yogthos/Selmer) is a Django and Jinja2-inspired templating language:\n\n```clojure\n(require '[selmer.parser :refer [render-file]])\n\n(defroutes myapp\n  (GET \"/hello/:name\" [name]\n    (render-file \"templates/hello.html\" {:name name})))\n```\n\n#### [Hiccup](https://github.com/weavejester/hiccup)\n\n[Hiccup](https://github.com/weavejester/hiccup) is a library for representing HTML as Clojure code\n\n```clojure\n(require '[hiccup.core :as hiccup])\n\n(defroutes myapp\n  (GET \"/hello/:name\" [name]\n    (hiccup/html\n      [:html\n        [:body\n          [:h1 {:class \"title\"}\n            (str \"Hello \" name)]]])))\n```\n\n#### [Markdown](https://github.com/yogthos/markdown-clj)\n\n[Markdown-clj](https://github.com/yogthos/markdown-clj) is a Markdown implementation.\n\n```clojure\n(require '[markdown.core :refer [md-to-html-string]])\n\n(defroutes myapp\n  (GET \"/hello/:name\" [name]\n    (md-to-html-string \"## Hello, world\")))\n```\n\nFurther reading:\n\n* [Official Compojure Documentation](https://github.com/weavejester/compojure/wiki)\n\n* [Clojure for the Brave and True](http://www.braveclojure.com/)\n"
        },
        {
          "name": "coq.md",
          "type": "blob",
          "size": 16.9541015625,
          "content": "---\nname: Coq\nfilename: learncoq.v\ncontributors:\n    - [\"Philip Zucker\", \"http://www.philipzucker.com/\"]\n---\n\nThe Coq system is a proof assistant. It is designed to build and verify mathematical proofs. The Coq system contains the functional programming language Gallina and is capable of proving properties about programs written in this language.\n\nCoq is a dependently typed language. This means that the types of the language may depend on the values of variables. In this respect, it is similar to other related languages such as Agda, Idris, F*, Lean, and others. Via the Curry-Howard correspondence, programs, properties and proofs are formalized in the same language.\n\nCoq is developed in OCaml and shares some syntactic and conceptual similarity with it. Coq is a language containing many fascinating but difficult topics. This tutorial will focus on the programming aspects of Coq, rather than the proving. It may be helpful, but not necessary to learn some OCaml first, especially if you are unfamiliar with functional programming. This tutorial is based upon its OCaml equivalent\n\nThe standard usage model of Coq is to write it with interactive tool assistance, which operates like a high powered REPL. Two common such editors are the CoqIDE and Proof General Emacs mode.\n\nInside Proof General `Ctrl+C Ctrl+<Enter>` will evaluate up to your cursor.\n\n\n```coq\n(*** Comments ***)\n\n(* Comments are enclosed in (* and *). It's fine to nest comments. *)\n\n(* There are no single-line comments. *)\n\n(*** Variables and functions ***)\n\n(* The Coq proof assistant can be controlled and queried by a command\n   language called the vernacular. Vernacular keywords are capitalized and\n   the commands end with a period.  Variable and function declarations are\n   formed with the Definition vernacular. *)\n\nDefinition x := 10.\n\n(* Coq can sometimes infer the types of arguments, but it is common practice\n   to annotate with types. *)\n\nDefinition inc_nat (x : nat) : nat := x + 1.\n\n(* There exists a large number of vernacular commands for querying\n   information.  These can be very useful. *)\n\nCompute (1 + 1). (* 2 : nat *) (* Compute a result. *)\n\nCheck tt. (* tt : unit *) (* Check the type of an expressions *)\n\nAbout plus. (* Prints information about an object *)\n\n(* Print information including the definition *)\nPrint true. (* Inductive bool : Set := true : Bool | false : Bool *)\n\nSearch nat. (* Returns a large list of nat related values *)\nSearch \"_ + _\". (* You can also search on patterns *)\nSearch (?a -> ?a -> bool). (* Patterns can have named parameters  *)\nSearch (?a * ?a).\n\n(* Locate tells you where notation is coming from. Very helpful when you\n   encounter new notation. *)\n\nLocate \"+\".\n\n(* Calling a function with insufficient number of arguments does not cause\n   an error, it produces a new function. *)\nDefinition make_inc x y := x + y. (* make_inc is nat -> nat -> nat *)\nDefinition inc_2 := make_inc 2.   (* inc_2 is nat -> nat *)\nCompute inc_2 3. (* Evaluates to 5 *)\n\n\n(* Definitions can be chained with \"let ... in\" construct.  This is roughly\n   the same to assigning values to multiple variables before using them in\n   expressions in imperative languages. *)\n\nDefinition add_xy : nat := let x := 10 in\n                           let y := 20 in\n                           x + y.\n\n(* Pattern matching is somewhat similar to switch statement in imperative\n   languages, but offers a lot more expressive power. *)\n\nDefinition is_zero (x : nat) :=\n    match x with\n    | 0 => true\n    | _ => false  (* The \"_\" pattern means \"anything else\". *)\n    end.\n\n(* You can define recursive function definition using the Fixpoint\n   vernacular.*)\n\nFixpoint factorial n := match n with\n                        | 0 => 1\n                        | (S n') => n * factorial n'\n                        end.\n\n(* Function application usually doesn't need parentheses around arguments *)\nCompute factorial 5. (* 120 : nat *)\n\n(* ...unless the argument is an expression. *)\nCompute factorial (5-1). (* 24 : nat *)\n\n(* You can define mutually recursive functions using \"with\" *)\nFixpoint is_even (n : nat) : bool := match n with\n  | 0 => true\n  | (S n) => is_odd n\nend with\n  is_odd n := match n with\n  | 0 => false\n  | (S n) => is_even n\n              end.\n\n(* As Coq is a total programming language, it will only accept programs when\n   it can understand they terminate. It can be most easily seen when the\n   recursive call is on a pattern matched out subpiece of the input, as then\n   the input is always decreasing in size. Getting Coq to understand that\n   functions terminate is not always easy. See the references at the end of\n   the article for more on this topic. *)\n\n(* Anonymous functions use the following syntax: *)\n\nDefinition my_square : nat -> nat := fun x => x * x.\n\nDefinition my_id (A : Type) (x : A) : A := x.\nDefinition my_id2 : forall A : Type, A -> A := fun A x => x.\nCompute my_id nat 3. (* 3 : nat *)\n\n(* You can ask Coq to infer terms with an underscore *)\nCompute my_id _ 3.\n\n(* An implicit argument of a function is an argument which can be inferred\n   from contextual knowledge. Parameters enclosed in {} are implicit by\n   default *)\n\nDefinition my_id3 {A : Type} (x : A) : A := x.\nCompute my_id3 3. (* 3 : nat *)\n\n(* Sometimes it may be necessary to turn this off. You can make all\n   arguments explicit again with @ *)\n\nCompute @my_id3 nat 3.\n\n(* Or give arguments by name *)\nCompute my_id3 (A:=nat) 3.\n\n(* Coq has the ability to extract code to OCaml, Haskell, and Scheme *)\nRequire Extraction.\nExtraction Language OCaml.\nExtraction \"factorial.ml\" factorial.\n(* The above produces a file factorial.ml and factorial.mli that holds:\n\ntype nat =\n| O\n| S of nat\n\n(** val add : nat -> nat -> nat **)\n\nlet rec add n m =\n  match n with\n  | O -> m\n  | S p -> S (add p m)\n\n(** val mul : nat -> nat -> nat **)\n\nlet rec mul n m =\n  match n with\n  | O -> O\n  | S p -> add m (mul p m)\n\n(** val factorial : nat -> nat **)\n\nlet rec factorial n = match n with\n| O -> S O\n| S n' -> mul n (factorial n')\n*)\n\n\n(*** Notation ***)\n\n(* Coq has a very powerful Notation system that can be used to write\n   expressions in more natural forms. *)\n\nCompute Nat.add 3 4. (* 7 : nat *)\nCompute 3 + 4. (* 7 : nat *)\n\n(* Notation is a syntactic transformation applied to the text of the program\n   before being evaluated. Notation is organized into notation scopes. Using\n   different notation scopes allows for a weak notion of overloading. *)\n\n(* Imports the Zarith module holding definitions related to the integers Z *)\n\nRequire Import ZArith.\n\n(* Notation scopes can be opened *)\nOpen Scope Z_scope.\n\n(* Now numerals and addition are defined on the integers. *)\nCompute 1 + 7. (* 8 : Z *)\n\n(* Integer equality checking *)\nCompute 1 =? 2. (* false : bool *)\n\n(* Locate is useful for finding the origin and definition of notations *)\nLocate \"_ =? _\". (* Z.eqb x y : Z_scope *)\nClose Scope Z_scope.\n\n(* We're back to nat being the default interpretation of \"+\" *)\nCompute 1 + 7. (* 8 : nat *)\n\n(* Scopes can also be opened inline with the shorthand % *)\nCompute (3 * -7)%Z. (* -21%Z : Z *)\n\n(* Coq declares by default the following interpretation scopes: core_scope,\n   type_scope, function_scope, nat_scope, bool_scope, list_scope, int_scope,\n   uint_scope. You may also want the numerical scopes Z_scope (integers) and\n   Q_scope (fractions) held in the ZArith and QArith module respectively. *)\n\n(* You can print the contents of scopes *)\nPrint Scope nat_scope.\n(*\nScope nat_scope\nDelimiting key is nat\nBound to classes nat Nat.t\n\"x 'mod' y\" := Nat.modulo x y\n\"x ^ y\" := Nat.pow x y\n\"x ?= y\" := Nat.compare x y\n\"x >= y\" := ge x y\n\"x > y\" := gt x y\n\"x =? y\" := Nat.eqb x y\n\"x <? y\" := Nat.ltb x y\n\"x <=? y\" := Nat.leb x y\n\"x <= y <= z\" := and (le x y) (le y z)\n\"x <= y < z\" := and (le x y) (lt y z)\n\"n <= m\" := le n m\n\"x < y <= z\" := and (lt x y) (le y z)\n\"x < y < z\" := and (lt x y) (lt y z)\n\"x < y\" := lt x y\n\"x / y\" := Nat.div x y\n\"x - y\" := Init.Nat.sub x y\n\"x + y\" := Init.Nat.add x y\n\"x * y\" := Init.Nat.mul x y\n*)\n\n(* Coq has exact fractions available as the type Q in the QArith module.\n   Floating point numbers and real numbers are also available but are a more\n   advanced topic, as proving properties about them is rather tricky. *)\n\nRequire Import QArith.\n\nOpen Scope Q_scope.\nCompute 1. (* 1 : Q *)\n\n(* Only 1 and 0 are interpreted as fractions by Q_scope *)\nCompute 2. (* 2 : nat *)\nCompute (2 # 3). (* The fraction 2/3 *)\nCompute (1 # 3) ?= (2 # 6). (* Eq : comparison *)\nClose Scope Q_scope.\n\nCompute ( (2 # 3) / (1 # 5) )%Q. (* 10 # 3 : Q *)\n\n\n(*** Common data structures ***)\n\n(* Many common data types are included in the standard library *)\n\n(* The unit type has exactly one value, tt *)\nCheck tt. (* tt : unit *)\n\n(* The option type is useful for expressing computations that might fail *)\nCompute None. (* None : option ?A *)\nCheck Some 3. (* Some 3 : option nat *)\n\n(* The type sum A B allows for values of either type A or type B *)\nPrint sum.\nCheck inl 3. (* inl 3 : nat + ?B *)\nCheck inr true. (* inr true : ?A + bool *)\nCheck sum bool nat. (* (bool + nat)%type : Set *)\nCheck (bool + nat)%type. (* Notation for sum *)\n\n(* Tuples are (optionally) enclosed in parentheses, items are separated\n   by commas. *)\nCheck (1, true). (* (1, true) : nat * bool *)\nCompute prod nat bool. (* (nat * bool)%type : Set *)\n\nDefinition my_fst {A B : Type} (x : A * B) : A := match x with\n                                                  | (a,b) => a\n                                                  end.\n\n(* A destructuring let is available if a pattern match is irrefutable *)\nDefinition my_fst2 {A B : Type} (x : A * B) : A := let (a,b) := x in\n                                                   a.\n\n(*** Lists ***)\n\n(* Lists are built by using cons and nil or by using notation available in\n   list_scope. *)\nCompute cons 1 (cons 2 (cons 3 nil)). (*  (1 :: 2 :: 3 :: nil)%list : list nat *)\nCompute (1 :: 2 :: 3 :: nil)%list.\n\n(* There is also list notation available in the ListNotations modules *)\nRequire Import List.\nImport ListNotations.\nCompute [1 ; 2 ; 3]. (* [1; 2; 3] : list nat *)\n\n\n(* There is a large number of list manipulation functions available,\n   including:\n\n• length\n• head : first element (with default)\n• tail : all but first element\n• app : appending\n• rev : reverse\n• nth : accessing n-th element (with default)\n• map : applying a function\n• flat_map : applying a function returning lists\n• fold_left : iterator (from head to tail)\n• fold_right : iterator (from tail to head)\n\n *)\n\nDefinition my_list : list nat := [47; 18; 34].\n\nCompute List.length my_list. (* 3 : nat *)\n\n(* All functions in coq must be total, so indexing requires a default value *)\nCompute List.nth 1 my_list 0. (* 18 : nat *)\nCompute List.map (fun x => x * 2) my_list. (* [94; 36; 68] : list nat *)\nCompute List.filter (fun x => Nat.eqb (Nat.modulo x 2) 0) my_list.\n                                               (* [18; 34] : list nat *)\nCompute (my_list ++ my_list)%list. (* [47; 18; 34; 47; 18; 34] : list nat *)\n\n(*** Strings ***)\n\nRequire Import Strings.String.\n\n(* Use double quotes for string literals. *)\nCompute \"hi\"%string.\n\nOpen Scope string_scope.\n\n(* Strings can be concatenated with the \"++\" operator. *)\nCompute String.append \"Hello \" \"World\". (* \"Hello World\" : string *)\nCompute \"Hello \" ++ \"World\". (* \"Hello World\" : string *)\n\n(* Strings can be compared for equality *)\nCompute String.eqb \"Coq is fun!\" \"Coq is fun!\". (* true : bool *)\nCompute \"no\" =? \"way\". (* false : bool *)\n\nClose Scope string_scope.\n\n(*** Other Modules ***)\n\n(* Other Modules in the standard library that may be of interest:\n\n• Logic : Classical logic and dependent equality\n• Arith : Basic Peano arithmetic\n• PArith : Basic positive integer arithmetic\n• NArith : Basic binary natural number arithmetic\n• ZArith : Basic relative integer arithmetic\n\n• Numbers : Various approaches to natural, integer and cyclic numbers\n            (currently axiomatically and on top of 2^31 binary words)\n• Bool : Booleans (basic functions and results)\n\n• Lists : Monomorphic and polymorphic lists (basic functions and results),\n          Streams (infinite sequences defined with co-inductive types)\n• Sets : Sets (classical, constructive, finite, infinite, power set, etc.)\n• FSets : Specification and implementations of finite sets and finite maps\n          (by lists and by AVL trees)\n• Reals : Axiomatization of real numbers (classical, basic functions,\n          integer part, fractional part, limit, derivative, Cauchy series,\n          power series and results,...)\n• Relations : Relations (definitions and basic results)\n• Sorting : Sorted list (basic definitions and heapsort correctness)\n• Strings : 8-bit characters and strings\n• Wellfounded : Well-founded relations (basic results)\n *)\n\n(*** User-defined data types ***)\n\n(* Because Coq is dependently typed, defining type aliases is no different\n   than defining an alias for a value. *)\n\nDefinition my_three : nat := 3.\nDefinition my_nat : Type := nat.\n\n(* More interesting types can be defined using the Inductive vernacular.\n   Simple enumeration can be defined like so *)\n\nInductive ml := OCaml | StandardML | Coq.\nDefinition lang := Coq.  (* Has type \"ml\". *)\n\n(* For more complicated types, you will need to specify the types of the\n   constructors. *)\n\n(* Type constructors don't need to be empty. *)\nInductive my_number := plus_infinity\n                     | nat_value : nat -> my_number.\nCompute nat_value 3. (* nat_value 3 : my_number *)\n\n\n(* Record syntax is sugar for tuple-like types. It defines named accessor\n   functions for the components. Record types are defined with the notation\n   {...} *)\n\nRecord Point2d (A : Set) := mkPoint2d { x2 : A ; y2 : A }.\n(* Record values are constructed with the notation {|...|} *)\nDefinition mypoint : Point2d nat :=  {| x2 := 2 ; y2 := 3 |}.\nCompute x2 nat mypoint. (* 2 : nat *)\nCompute mypoint.(x2 nat). (* 2 : nat *)\n\n(* Types can be parameterized, like in this type for \"list of lists of\n   anything\". 'a can be substituted with any type. *)\n\nDefinition list_of_lists a := list (list a).\nDefinition list_list_nat := list_of_lists nat.\n\n(* Types can also be recursive. Like in this type analogous to\n   built-in list of naturals. *)\n\nInductive my_nat_list :=\n  EmptyList | NatList : nat -> my_nat_list -> my_nat_list.\n\nCompute NatList 1 EmptyList. (*  NatList 1 EmptyList : my_nat_list *)\n\n(** Matching type constructors **)\n\nInductive animal := Dog : string -> animal | Cat : string -> animal.\n\nDefinition say x :=\n    match x with\n    | Dog x => (x ++ \" says woof\")%string\n    | Cat x => (x ++ \" says meow\")%string\n    end.\n\nCompute say (Cat \"Fluffy\"). (* \"Fluffy says meow\". *)\n\n(** Traversing data structures with pattern matching **)\n\n(* Recursive types can be traversed with pattern matching easily.\n   Let's see how we can traverse a data structure of the built-in list type.\n   Even though the built-in cons (\"::\") looks like an infix operator,\n   it's actually a type constructor and can be matched like any other. *)\nFixpoint sum_list l :=\n    match l with\n    | [] => 0\n    | head :: tail => head + (sum_list tail)\n    end.\n\nCompute sum_list [1; 2; 3]. (* Evaluates to 6 *)\n\n\n(*** A Taste of Proving ***)\n\n(* Explaining the proof language is out of scope for this tutorial, but here\n   is a taste to whet your appetite. Check the resources below for more. *)\n\n(* A fascinating feature of dependently type based theorem provers is that\n   the same primitive constructs underly the proof language as the\n   programming features.  For example, we can write and prove the\n   proposition A and B implies A in raw Gallina *)\n\nDefinition my_theorem : forall A B, A /\\ B -> A :=\n  fun A B ab => match ab with\n                  | (conj a b) => a\n                end.\n\n(* Or we can prove it using tactics. Tactics are a macro language to help\n   build proof terms in a more natural style and automate away some\n   drudgery. *)\n\nTheorem my_theorem2 : forall A B, A /\\ B -> A.\nProof.\n  intros A B ab.  destruct ab as [ a b ]. apply a.\nQed.\n\n(* We can easily prove simple polynomial equalities using the\n   automated tactic ring. *)\n\nRequire Import Ring.\nRequire Import Arith.\nTheorem simple_poly : forall (x : nat), (x + 1) * (x + 2) = x * x + 3 * x + 2.\n  Proof. intros. ring. Qed.\n\n(* Here we prove the closed form for the sum of all numbers 1 to n using\n   induction *)\n\nFixpoint sumn (n : nat) : nat :=\n  match n with\n  | 0 => 0\n  | (S n') => n + (sumn n')\n  end.\n\nTheorem sum_formula : forall n, 2 * (sumn n) = (n + 1) * n.\nProof. intros n. induction n.\n       - reflexivity. (* 0 = 0 base case *)\n       - simpl. ring [IHn]. (* induction step *)\nQed.\n```\n\nWith this we have only scratched the surface of Coq. It is a massive\necosystem with many interesting and peculiar topics leading all the way up\nto modern research.\n\n## Further reading\n\n* [The Coq reference manual](https://coq.inria.fr/refman/)\n* [Software Foundations](https://softwarefoundations.cis.upenn.edu/)\n* [Certified Programming with Dependent Types](http://adam.chlipala.net/cpdt/)\n* [Mathematical Components](https://math-comp.github.io/mcb/)\n* [Coq'Art: The Calculus of Inductive Constructions](http://www.cse.chalmers.se/research/group/logic/TypesSS05/resources/coq/CoqArt/)\n* [FRAP](http://adam.chlipala.net/frap/)\n"
        },
        {
          "name": "crystal.md",
          "type": "blob",
          "size": 11.7333984375,
          "content": "---\nname: Crystal\nfilename: learncrystal.cr\ncontributors:\n    - [\"Vitalii Elenhaupt\", \"http://veelenga.com\"]\n    - [\"Arnaud Fernandés\", \"https://github.com/TechMagister/\"]\n    - [\"Valentin Baca\", \"https://github.com/valbaca/\"]\n\n---\n\n```crystal\n# This is a comment\n\n# Everything is an object\nnil.class  #=> Nil\n100.class  #=> Int32\ntrue.class #=> Bool\n\n# Falsey values are: nil, false and null pointers\n!nil   #=> true  : Bool\n!false #=> true  : Bool\n!0     #=> false : Bool\n\n# Integers\n\n1.class #=> Int32\n\n# Five signed integer types\n1_i8.class   #=> Int8\n1_i16.class  #=> Int16\n1_i32.class  #=> Int32\n1_i64.class  #=> Int64\n1_i128.class #=> Int128\n\n# Five unsigned integer types\n1_u8.class   #=> UInt8\n1_u16.class  #=> UInt16\n1_u32.class  #=> UInt32\n1_u64.class  #=> UInt64\n1_u128.class #=> UInt128\n\n2147483648.class          #=> Int64\n9223372036854775808.class #=> UInt64\n\n# Binary numbers\n0b1101 #=> 13 : Int32\n\n# Octal numbers\n0o123 #=> 83 : Int32\n\n# Hexadecimal numbers\n0xFE012D #=> 16646445 : Int32\n0xfe012d #=> 16646445 : Int32\n\n# Floats\n\n1.0.class #=> Float64\n\n# There are two floating point types\n1.0_f32.class #=> Float32\n1_f32.class   #=> Float32\n\n1e10.class    #=> Float64\n1.5e10.class  #=> Float64\n1.5e-7.class  #=> Float64\n\n# Chars use 'a' pair of single quotes\n\n'a'.class #=> Char\n\n# Chars are 32-bit unicode\n'あ' #=> 'あ' : Char\n\n# Unicode codepoint\n'\\u0041' #=> 'A' : Char\n\n# Strings use a \"pair\" of double quotes\n\n\"s\".class #=> String\n\n# Strings are immutable\ns = \"hello, \"  #=> \"hello, \"        : String\ns.object_id    #=> 134667712        : UInt64\ns += \"Crystal\"\ns              #=> \"hello, Crystal\" : String\ns.object_id    #=> 142528472        : UInt64\n\n# Supports interpolation\n\"sum = #{1 + 2}\" #=> \"sum = 3\" : String\n\n# Multiline string\n\"This is\n   multiline string\" #=> \"This is\\n   multiline string\"\n\n\n# String with double quotes\n%(hello \"world\") #=> \"hello \\\"world\\\"\"\n\n# Symbols\n# Immutable, reusable constants represented internally as Int32 integer value.\n# They're often used instead of strings to efficiently convey specific,\n# meaningful values\n\n:symbol.class #=> Symbol\n\nsentence = :question?     # :\"question?\" : Symbol\n\nsentence == :question?    #=> true  : Bool\nsentence == :exclamation! #=> false : Bool\nsentence == \"question?\"   #=> false : Bool\n\n# Arrays\n\n[1, 2, 3].class         #=> Array(Int32)\n[1, \"hello\", 'x'].class #=> Array(Char | Int32 | String)\n\n# Empty arrays should specify a type\n[]               # Syntax error: for empty arrays use '[] of ElementType'\n[] of Int32      #=> [] : Array(Int32)\nArray(Int32).new #=> [] : Array(Int32)\n\n# Arrays can be indexed\narray = [1, 2, 3, 4, 5] #=> [1, 2, 3, 4, 5] : Array(Int32)\narray[0]                #=> 1               : Int32\narray[10]               # raises IndexError\narray[-6]               # raises IndexError\narray[10]?              #=> nil             : (Int32 | Nil)\narray[-6]?              #=> nil             : (Int32 | Nil)\n\n# From the end\narray[-1] #=> 5\n\n# With a start index and size\narray[2, 3] #=> [3, 4, 5]\n\n# Or with range\narray[1..3] #=> [2, 3, 4]\n\n# Add to an array\narray << 6  #=> [1, 2, 3, 4, 5, 6]\n\n# Remove from the end of the array\narray.pop #=> 6\narray     #=> [1, 2, 3, 4, 5]\n\n# Remove from the beginning of the array\narray.shift #=> 1\narray       #=> [2, 3, 4, 5]\n\n# Check if an item exists in an array\narray.includes? 3 #=> true\n\n# Special syntax for an array of string and an array of symbols\n%w(one two three) #=> [\"one\", \"two\", \"three\"] : Array(String)\n%i(one two three) #=> [:one, :two, :three]    : Array(Symbol)\n\n# There is a special array syntax with other types too, as long as\n# they define a .new and a #<< method\nset = Set{1, 2, 3} #=> Set{1, 2, 3}\nset.class          #=> Set(Int32)\n\n# The above is equivalent to\nset = Set(typeof(1, 2, 3)).new #=> Set{} : Set(Int32)\nset << 1                       #=> Set{1} : Set(Int32)\nset << 2                       #=> Set{1, 2} : Set(Int32)\nset << 3                       #=> Set{1, 2, 3} : Set(Int32)\n\n# Hashes\n\n{1 => 2, 3 => 4}.class   #=> Hash(Int32, Int32)\n{1 => 2, 'a' => 3}.class #=> Hash(Char| Int32, Int32)\n\n# Empty hashes must specify a type\n{}                     # Syntax Error: for empty hashes use '{} of KeyType => ValueType'\n{} of Int32 => Int32   # {} : Hash(Int32, Int32)\nHash(Int32, Int32).new # {} : Hash(Int32, Int32)\n\n# Hashes can be quickly looked up by key\nhash = {\"color\" => \"green\", \"number\" => 5}\nhash[\"color\"]        #=> \"green\"\nhash[\"no_such_key\"]  #=> Missing hash key: \"no_such_key\" (KeyError)\nhash[\"no_such_key\"]? #=> nil\n\n# The type of the returned value is based on all key types\nhash[\"number\"] #=> 5 : (Int32 | String)\n\n# Check existence of keys hash\nhash.has_key? \"color\" #=> true\n\n# Special notation for symbol and string keys\n{key1: 'a', key2: 'b'}     # {:key1 => 'a', :key2 => 'b'}\n{\"key1\": 'a', \"key2\": 'b'} # {\"key1\" => 'a', \"key2\" => 'b'}\n\n# Special hash literal syntax with other types too, as long as\n# they define a .new and a #[]= methods\nclass MyType\n  def []=(key, value)\n    puts \"do stuff\"\n  end\nend\n\nMyType{\"foo\" => \"bar\"}\n\n# The above is equivalent to\ntmp = MyType.new\ntmp[\"foo\"] = \"bar\"\ntmp\n\n# Ranges\n\n1..10                  #=> Range(Int32, Int32)\nRange.new(1, 10).class #=> Range(Int32, Int32)\n\n# Can be inclusive or exclusive\n(3..5).to_a  #=> [3, 4, 5]\n(3...5).to_a #=> [3, 4]\n\n# Check whether range includes the given value or not\n(1..8).includes? 2 #=> true\n\n# Tuples are a fixed-size, immutable, stack-allocated sequence of values of\n# possibly different types.\n{1, \"hello\", 'x'}.class #=> Tuple(Int32, String, Char)\n\n# Access tuple's value by its index\ntuple = {:key1, :key2}\ntuple[1] #=> :key2\ntuple[2] #=> Error: index out of bounds for Tuple(Symbol, Symbol) (2 not in -2..1)\n\n# Can be expanded into multiple variables\na, b, c = {:a, 'b', \"c\"}\na #=> :a\nb #=> 'b'\nc #=> \"c\"\n\n# Procs represent a function pointer with an optional context (the closure data)\n# It is typically created with a proc literal\nproc = ->(x : Int32) { x.to_s }\nproc.class # Proc(Int32, String)\n# Or using the new method\nProc(Int32, String).new { |x| x.to_s }\n\n# Invoke proc with call method\nproc.call 10 #=> \"10\"\n\n# Control statements\n\nif true\n  \"if statement\"\nelsif false\n  \"else-if, optional\"\nelse\n  \"else, also optional\"\nend \n\nputs \"if as a suffix\" if true\n\n# If as an expression\na = if 2 > 1\n      3\n    else\n      4\n    end\n\na #=> 3\n\n# Ternary if\na = 1 > 2 ? 3 : 4 #=> 4\n\n# Case statement\ncmd = \"move\"\n\naction = case cmd\n  when \"create\"\n    \"Creating...\"\n  when \"copy\"\n    \"Copying...\"\n  when \"move\"\n    \"Moving...\"\n  when \"delete\"\n    \"Deleting...\"\nend\n\naction #=> \"Moving...\"\n\n# Loops\nindex = 0\nwhile index <= 3\n  puts \"Index: #{index}\"\n  index += 1\nend\n# Index: 0\n# Index: 1\n# Index: 2\n# Index: 3\n\nindex = 0\nuntil index > 3\n  puts \"Index: #{index}\"\n  index += 1\nend\n# Index: 0\n# Index: 1\n# Index: 2\n# Index: 3\n\n# But the preferable way is to use each\n(1..3).each do |index|\n  puts \"Index: #{index}\"\nend\n# Index: 1\n# Index: 2\n# Index: 3\n\n# Variable's type depends on the type of the expression\n# in control statements\nif a < 3\n  a = \"hello\"\nelse\n  a = true\nend\ntypeof(a) #=> (Bool | String)\n\nif a && b\n  # here both a and b are guaranteed not to be Nil\nend\n\nif a.is_a? String\n  a.class #=> String\nend\n\n# Functions\n\ndef double(x)\n  x * 2\nend\n\n# Functions (and all blocks) implicitly return the value of the last statement\ndouble(2) #=> 4\n\n# Parentheses are optional where the call is unambiguous\ndouble 3 #=> 6\n\ndouble double 3 #=> 12\n\ndef sum(x, y)\n  x + y\nend\n\n# Method arguments are separated by a comma\nsum 3, 4 #=> 7\n\nsum sum(3, 4), 5 #=> 12\n\n# yield\n# All methods have an implicit, optional block parameter\n# it can be called with the 'yield' keyword\n\ndef surround\n  puts '{'\n  yield\n  puts '}'\nend\n\nsurround { puts \"hello world\" }\n\n# {\n# hello world\n# }\n\n\n# You can pass a block to a function\n# \"&\" marks a reference to a passed block\ndef guests(&block)\n  block.call \"some_argument\"\nend\n\n# You can pass a list of arguments, which will be converted into an array\n# That's what splat operator (\"*\") is for\ndef guests(*array)\n  array.each { |guest| puts guest }\nend\n\n# If a method returns an array, you can use destructuring assignment\ndef foods\n    [\"pancake\", \"sandwich\", \"quesadilla\"]\nend\nbreakfast, lunch, dinner = foods\nbreakfast #=> \"pancake\"\ndinner    #=> \"quesadilla\"\n\n# By convention, all methods that return booleans end with a question mark\n5.even? # false\n5.odd?  # true\n\n# Also by convention, if a method ends with an exclamation mark, it does \n# something destructive like mutate the receiver.\n# Some methods have a ! version to make a change, and\n# a non-! version to just return a new changed version\nfruits = [\"grapes\", \"apples\", \"bananas\"]\nfruits.sort  #=> [\"apples\", \"bananas\", \"grapes\"]\nfruits       #=> [\"grapes\", \"apples\", \"bananas\"]\nfruits.sort! #=> [\"apples\", \"bananas\", \"grapes\"]\nfruits       #=> [\"apples\", \"bananas\", \"grapes\"]\n\n# However, some mutating methods do not end in !\nfruits.shift #=> \"apples\"\nfruits       #=> [\"bananas\", \"grapes\"]\n\n# Define a class with the class keyword\nclass Human\n\n  # A class variable. It is shared by all instances of this class.\n  @@species = \"H. sapiens\"\n\n  # An instance variable. Type of name is String\n  @name : String\n\n  # Basic initializer\n  # Assign the argument to the \"name\" instance variable for the instance\n  # If no age given, we will fall back to the default in the arguments list.\n  def initialize(@name, @age = 0)\n  end\n\n  # Basic setter method\n  def name=(name)\n    @name = name\n  end\n\n  # Basic getter method\n  def name\n    @name\n  end\n\n  # The above functionality can be encapsulated using the propery method as follows\n  property :name\n\n  # Getter/setter methods can also be created individually like this\n  getter :name\n  setter :name\n\n  # A class method uses self to distinguish from instance methods.\n  # It can only be called on the class, not an instance.\n  def self.say(msg)\n    puts msg\n  end\n\n  def species\n    @@species\n  end\nend\n\n\n# Instantiate a class\njim = Human.new(\"Jim Halpert\")\n\ndwight = Human.new(\"Dwight K. Schrute\")\n\n# Let's call a couple of methods\njim.species #=> \"H. sapiens\"\njim.name #=> \"Jim Halpert\"\njim.name = \"Jim Halpert II\" #=> \"Jim Halpert II\"\njim.name #=> \"Jim Halpert II\"\ndwight.species #=> \"H. sapiens\"\ndwight.name #=> \"Dwight K. Schrute\"\n\n# Call the class method\nHuman.say(\"Hi\") #=> print Hi and returns nil\n\n# Variables that start with @ have instance scope\nclass TestClass\n  @var = \"I'm an instance var\"\nend\n\n# Variables that start with @@ have class scope\nclass TestClass\n  @@var = \"I'm a class var\"\nend\n# Variables that start with a capital letter are constants\nVar = \"I'm a constant\"\nVar = \"can't be updated\" # Error: already initialized constant Var\n\n# Class is also an object in Crystal. So a class can have instance variables.\n# Class variable is shared among the class and all of its descendants.\n\n# base class\nclass Human\n  @@foo = 0\n\n  def self.foo\n    @@foo\n  end\n\n  def self.foo=(value)\n    @@foo = value\n  end\nend\n\n# derived class\nclass Worker < Human\nend\n\nHuman.foo   #=> 0\nWorker.foo  #=> 0\n\nHuman.foo = 2 #=> 2\nWorker.foo    #=> 0\n\nWorker.foo = 3 #=> 3\nHuman.foo   #=> 2\nWorker.foo  #=> 3\n\nmodule ModuleExample\n  def foo\n    \"foo\"\n  end\nend\n\n# Including modules binds their methods to the class instances\n# Extending modules binds their methods to the class itself\n\nclass Person\n  include ModuleExample\nend\n\nclass Book\n  extend ModuleExample\nend\n\nPerson.foo     # => undefined method 'foo' for Person:Class\nPerson.new.foo # => 'foo'\nBook.foo       # => 'foo'\nBook.new.foo   # => undefined method 'foo' for Book\n\n\n# Exception handling\n\n# Define new exception\nclass MyException < Exception\nend\n\n# Define another exception\nclass MyAnotherException < Exception; end\n\nex = begin\n   raise MyException.new\nrescue ex1 : IndexError\n  \"ex1\"\nrescue ex2 : MyException | MyAnotherException\n  \"ex2\"\nrescue ex3 : Exception\n  \"ex3\"\nrescue ex4 # catch any kind of exception\n  \"ex4\"\nend\n\nex #=> \"ex2\"\n```\n\n## Additional resources\n\n- [Official Documentation](https://crystal-lang.org/)\n"
        },
        {
          "name": "cs",
          "type": "tree",
          "content": null
        },
        {
          "name": "csharp.md",
          "type": "blob",
          "size": 47.3388671875,
          "content": "---\nname: C#\ncontributors:\n    - [\"Irfan Charania\", \"https://github.com/irfancharania\"]\n    - [\"Max Yankov\", \"https://github.com/golergka\"]\n    - [\"Melvyn Laïly\", \"http://x2a.yt\"]\n    - [\"Shaun McCarthy\", \"http://www.shaunmccarthy.com\"]\n    - [\"Wouter Van Schandevijl\", \"http://github.com/laoujin\"]\n    - [\"Jo Pearce\", \"http://github.com/jdpearce\"]\n    - [\"Chris Zimmerman\", \"https://github.com/chriszimmerman\"]\n    - [\"Shawn McGuire\", \"https://github.com/bigbash\"]\nfilename: LearnCSharp.cs\n---\n\nC# is an elegant and type-safe object-oriented language that enables developers to build a variety of secure and robust applications that run on the cross-platform .NET framework.\n\n[Read more here.](https://docs.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/)\n\n```c#\n// Single-line comments start with //\n\n/*\nMulti-line comments look like this\n*/\n\n/// <summary>\n/// This is an XML documentation comment which can be used to generate external\n/// documentation or provide context help within an IDE\n/// </summary>\n/// <param name=\"firstParam\">This is some parameter documentation for firstParam</param>\n/// <returns>Information on the returned value of a function</returns>\npublic void MethodOrClassOrOtherWithParsableHelp(string firstParam) { }\n\n// Specify the namespaces this source code will be using\n// The namespaces below are all part of the standard .NET Framework Class Library\nusing System;\nusing System.Collections.Generic;\nusing System.Dynamic;\nusing System.Linq;\nusing System.Net;\nusing System.Threading.Tasks;\nusing System.IO;\n\n// But this one is not:\nusing System.Data.Entity;\n// In order to be able to use it, you need to add a dll reference\n// This can be done with the NuGet package manager: `Install-Package EntityFramework`\n\n// Namespaces define scope to organize code into \"packages\" or \"modules\"\n// Using this code from another source file: using Learning.CSharp;\n\n// You can also do this in C# 10, it is called file-scoped namespaces.\n// namespace Learning.CSharp;\n\nnamespace Learning.CSharp\n{\n    // Each .cs file should at least contain a class with the same name as the file.\n    // You're allowed to do otherwise, but shouldn't for sanity.\n    public class LearnCSharp\n    {\n        // BASIC SYNTAX - skip to INTERESTING FEATURES if you have used Java or C++ before\n        public static void Syntax()\n        {\n            // Use Console.WriteLine to print lines\n            Console.WriteLine(\"Hello World\");\n            Console.WriteLine(\n                \"Integer: \" + 10 +\n                \" Double: \" + 3.14 +\n                \" Boolean: \" + true);\n\n            // To print without a new line, use Console.Write\n            Console.Write(\"Hello \");\n            Console.Write(\"World\");\n\n            ///////////////////////////////////////////////////\n            // Types & Variables\n            //\n            // Declare a variable using <type> <name>\n            ///////////////////////////////////////////////////\n\n            // Sbyte - Signed 8-bit integer\n            // (-128 <= sbyte <= 127)\n            sbyte fooSbyte = 100;\n\n            // Byte - Unsigned 8-bit integer\n            // (0 <= byte <= 255)\n            byte fooByte = 100;\n\n            // Short - 16-bit integer\n            // Signed - (-32,768 <= short <= 32,767)\n            // Unsigned - (0 <= ushort <= 65,535)\n            short fooShort = 10000;\n            ushort fooUshort = 10000;\n\n            // Integer - 32-bit integer\n            int fooInt = 1; // (-2,147,483,648 <= int <= 2,147,483,647)\n            uint fooUint = 1; // (0 <= uint <= 4,294,967,295)\n\n            // Long - 64-bit integer\n            long fooLong = 100000L; // (-9,223,372,036,854,775,808 <= long <= 9,223,372,036,854,775,807)\n            ulong fooUlong = 100000L; // (0 <= ulong <= 18,446,744,073,709,551,615)\n            // Numbers default to being int or uint depending on size.\n            // L is used to denote that this variable value is of type long or ulong\n\n            // Double - Double-precision 64-bit IEEE 754 Floating Point\n            double fooDouble = 123.4; // Precision: 15-16 digits\n\n            // Float - Single-precision 32-bit IEEE 754 Floating Point\n            float fooFloat = 234.5f; // Precision: 7 digits\n            // f is used to denote that this variable value is of type float\n\n            // Decimal - a 128-bits data type, with more precision than other floating-point types,\n            // suited for financial and monetary calculations\n            decimal fooDecimal = 150.3m;\n\n            // Boolean - true & false\n            bool fooBoolean = true; // or false\n\n            // Char - A single 16-bit Unicode character\n            char fooChar = 'A';\n\n            // Strings -- unlike the previous base types which are all value types,\n            // a string is a reference type. That is, you can set it to null\n            string fooString = \"\\\"escape\\\" quotes and add \\n (new lines) and \\t (tabs)\";\n            Console.WriteLine(fooString);\n\n            // You can access each character of the string with an indexer:\n            char charFromString = fooString[1]; // => 'e'\n            // Strings are immutable: you can't do fooString[1] = 'X';\n\n            // Compare strings with current culture, ignoring case\n            string.Compare(fooString, \"x\", StringComparison.CurrentCultureIgnoreCase);\n\n            // Formatting, based on sprintf\n            string fooFs = string.Format(\"Check Check, {0} {1}, {0} {1:0.0}\", 1, 2);\n\n            // Dates & Formatting\n            DateTime fooDate = DateTime.Now;\n            Console.WriteLine(fooDate.ToString(\"hh:mm, dd MMM yyyy\"));\n\n            // Verbatim String\n            // You can use the @ symbol before a string literal to escape all characters in the string\n            string path = \"C:\\\\Users\\\\User\\\\Desktop\";\n            string verbatimPath = @\"C:\\Users\\User\\Desktop\";\n            Console.WriteLine(path == verbatimPath);  // => true\n\n            // You can split a string over two lines with the @ symbol. To escape \" use \"\"\n            string bazString = @\"Here's some stuff\non a new line! \"\"Wow!\"\", the masses cried\";\n\n            // Use const or read-only to make a variable immutable\n            // const values are calculated at compile time\n            const int HoursWorkPerWeek = 9001;\n\n            ///////////////////////////////////////////////////\n            // Data Structures\n            ///////////////////////////////////////////////////\n\n            // Arrays - zero indexed\n            // The array size must be decided upon declaration\n            // The format for declaring an array is\n            // <datatype>[] <var name> = new <datatype>[<array size>];\n            int[] intArray = new int[10];\n\n            // Another way to declare & initialize an array\n            int[] y = { 9000, 1000, 1337 };\n\n            // Indexing an array - Accessing an element\n            Console.WriteLine(\"intArray @ 0: \" + intArray[0]);\n            // Arrays are mutable.\n            intArray[1] = 1;\n\n            // Lists\n            // Lists are used more frequently than arrays as they are more flexible\n            // The format for declaring a list is\n            // List<datatype> <var name> = new List<datatype>();\n            List<int> intList = new List<int>();\n            List<string> stringList = new List<string>();\n            List<int> z = new List<int> { 9000, 1000, 1337 }; // initialize\n            // The <> are for generics - Check out the cool stuff section\n\n            // Lists don't default to a value;\n            // A value must be added before accessing the index\n            intList.Add(1);\n            Console.WriteLine(\"intList at 0: \" + intList[0]);\n\n            // Other data structures to check out:\n            // Stack/Queue\n            // Dictionary (an implementation of a hash map)\n            // HashSet\n            // Read-only Collections\n            // Tuple (.NET 4+)\n\n            ///////////////////////////////////////\n            // Operators\n            ///////////////////////////////////////\n            Console.WriteLine(\"\\n->Operators\");\n\n            int i1 = 1, i2 = 2; // Shorthand for multiple declarations\n\n            // Arithmetic is straightforward\n            Console.WriteLine(i1 + i2 - i1 * 3 / 7); // => 3\n\n            // Modulo\n            Console.WriteLine(\"11%3 = \" + (11 % 3)); // => 2\n\n            // Comparison operators\n            Console.WriteLine(\"3 == 2? \" + (3 == 2)); // => false\n            Console.WriteLine(\"3 != 2? \" + (3 != 2)); // => true\n            Console.WriteLine(\"3 > 2? \" + (3 > 2)); // => true\n            Console.WriteLine(\"3 < 2? \" + (3 < 2)); // => false\n            Console.WriteLine(\"2 <= 2? \" + (2 <= 2)); // => true\n            Console.WriteLine(\"2 >= 2? \" + (2 >= 2)); // => true\n\n            // Bitwise operators!\n            /*\n            ~       Unary bitwise complement\n            <<      Signed left shift\n            >>      Signed right shift\n            &       Bitwise AND\n            ^       Bitwise exclusive OR\n            |       Bitwise inclusive OR\n            */\n\n            // Incrementing\n            int i = 0;\n            Console.WriteLine(\"\\n->Inc/Dec-rement\");\n            Console.WriteLine(i++); //Prints \"0\", i = 1. Post-Increment\n            Console.WriteLine(++i); //Prints \"2\", i = 2. Pre-Increment\n            Console.WriteLine(i--); //Prints \"2\", i = 1. Post-Decrement\n            Console.WriteLine(--i); //Prints \"0\", i = 0. Pre-Decrement\n\n            ///////////////////////////////////////\n            // Control Structures\n            ///////////////////////////////////////\n            Console.WriteLine(\"\\n->Control Structures\");\n\n            // If statements are C-like\n            int j = 10;\n            if (j == 10)\n            {\n                Console.WriteLine(\"I get printed\");\n            }\n            else if (j > 10)\n            {\n                Console.WriteLine(\"I don't\");\n            }\n            else\n            {\n                Console.WriteLine(\"I also don't\");\n            }\n\n            // Ternary operators\n            // A simple if/else can be written as follows\n            // <condition> ? <true> : <false>\n            int toCompare = 17;\n            string isTrue = toCompare == 17 ? \"True\" : \"False\";\n\n            // While loop\n            int fooWhile = 0;\n            while (fooWhile < 100)\n            {\n                // Iterated 100 times, fooWhile 0->99\n                fooWhile++;\n            }\n\n            // Do While Loop\n            int fooDoWhile = 0;\n            do\n            {\n                // Start iteration 100 times, fooDoWhile 0->99\n                if (false)\n                    continue; // skip the current iteration\n\n                fooDoWhile++;\n\n                if (fooDoWhile == 50)\n                    break; // breaks from the loop completely\n\n            } while (fooDoWhile < 100);\n\n            // for loop structure => for(<start_statement>; <conditional>; <step>)\n            for (int fooFor = 0; fooFor < 10; fooFor++)\n            {\n                // Iterated 10 times, fooFor 0->9\n            }\n\n            // For Each Loop\n            // foreach loop structure => foreach(<iteratorType> <iteratorName> in <enumerable>)\n            // The foreach loop loops over any object implementing IEnumerable or IEnumerable<T>\n            // All the collection types (Array, List, Dictionary...) in the .NET framework\n            // implement one or both of these interfaces.\n            // (The ToCharArray() could be removed, because a string also implements IEnumerable)\n            foreach (char character in \"Hello World\".ToCharArray())\n            {\n                // Iterated over all the characters in the string\n            }\n\n            // Switch Case\n            // A switch works with byte, short, char, and int data types.\n            // It also works with enumerated types (discussed in Enum Types),\n            // the String class, and a few special classes that wrap\n            // primitive types: Character, Byte, Short, and Integer.\n            int month = 3;\n            string monthString;\n            switch (month)\n            {\n                case 1:\n                    monthString = \"January\";\n                    break;\n                case 2:\n                    monthString = \"February\";\n                    break;\n                case 3:\n                    monthString = \"March\";\n                    break;\n                // You can assign more than one case to an action\n                // But you can't add an action without a break before another case\n                // (if you want to do this, you would have to explicitly add a goto case x)\n                case 6:\n                case 7:\n                case 8:\n                    monthString = \"Summer time!!\";\n                    break;\n                default:\n                    monthString = \"Some other month\";\n                    break;\n            }\n\n            ///////////////////////////////////////\n            // Converting Data Types And Typecasting\n            ///////////////////////////////////////\n\n            // Converting data\n\n            // Convert String To Integer\n            // this will throw a FormatException on failure\n            int.Parse(\"123\"); // returns an integer version of \"123\"\n\n            // TryParse will default to the type's default value on failure\n            // in this case 0\n            int tryInt;\n            if (int.TryParse(\"123\", out tryInt)) // Function is boolean\n                Console.WriteLine(tryInt);       // 123\n\n            // Convert Integer To String\n            // The Convert class has a number of methods to facilitate conversions\n\n            // String to int\n\n            // Better\n            bool result = int.TryParse(string, out var integer)\n            int.Parse(string);\n\n            // Not recommended\n            Convert.ToString(123);\n\n            // Int to string\n            tryInt.ToString();\n\n            // Casting\n            // Cast decimal 15 to an int\n            // and then implicitly cast to long\n            long x = (int) 15M;\n        }\n\n        ///////////////////////////////////////\n        // CLASSES - see definitions at end of file\n        ///////////////////////////////////////\n        public static void Classes()\n        {\n            // See Declaration of objects at end of file\n\n            // Use new to instantiate a class\n            Bicycle trek = new Bicycle();\n\n            // Call object methods\n            trek.SpeedUp(3); // You should always use setter and getter methods\n            trek.Cadence = 100;\n\n            // ToString is a convention to display the value of this Object.\n            Console.WriteLine(\"trek info: \" + trek.Info());\n\n            // Instantiate a new Penny Farthing\n            PennyFarthing funbike = new PennyFarthing(1, 10);\n            Console.WriteLine(\"funbike info: \" + funbike.Info());\n\n            Console.Read();\n        } // End main method\n\n        // Available in C# 9 and later, this is basically syntactic sugar for a class. Records are immutable*.\n        public record ARecord(string Csharp);\n\n        // CONSOLE ENTRY - A console application must have a main method as an entry point\n        public static void Main(string[] args)\n        {\n            OtherInterestingFeatures();\n        }\n\n        //\n        // INTERESTING FEATURES\n        //\n\n        // DEFAULT METHOD SIGNATURES\n\n        public // Visibility\n        static // Allows for direct call on class without object\n        int // Return Type,\n        MethodSignatures(\n            int maxCount, // First variable, expects an int\n            int count = 0, // will default the value to 0 if not passed in\n            int another = 3,\n            params string[] otherParams // captures all other parameters passed to method\n        )\n        {\n            return -1;\n        }\n\n        // Methods can have the same name, as long as the signature is unique\n        // A method that differs only in return type is not unique\n        public static void MethodSignatures(\n            ref int maxCount, // Pass by reference\n            out int count)\n        {\n            // the argument passed in as 'count' will hold the value of 15 outside of this function\n            count = 15; // out param must be assigned before control leaves the method\n        }\n\n        // GENERICS\n        // The classes for TKey and TValue is specified by the user calling this function.\n        // This method emulates Python's dict.setdefault()\n        public static TValue SetDefault<TKey, TValue>(\n            IDictionary<TKey, TValue> dictionary,\n            TKey key,\n            TValue defaultItem)\n        {\n            TValue result;\n            if (!dictionary.TryGetValue(key, out result))\n                return dictionary[key] = defaultItem;\n            return result;\n        }\n\n        // You can narrow down the objects that are passed in\n        public static void IterateAndPrint<T>(T toPrint) where T: IEnumerable<int>\n        {\n            // We can iterate, since T is a IEnumerable\n            foreach (var item in toPrint)\n                // Item is an int\n                Console.WriteLine(item.ToString());\n        }\n\n        // YIELD\n        // Usage of the \"yield\" keyword indicates that the method it appears in is an Iterator\n        // (this means you can use it in a foreach loop)\n        public static IEnumerable<int> YieldCounter(int limit = 10)\n        {\n            for (var i = 0; i < limit; i++)\n                yield return i;\n        }\n\n        // which you would call like this :\n        public static void PrintYieldCounterToConsole()\n        {\n            foreach (var counter in YieldCounter())\n                Console.WriteLine(counter);\n        }\n\n        // you can use more than one \"yield return\" in a method\n        public static IEnumerable<int> ManyYieldCounter()\n        {\n            yield return 0;\n            yield return 1;\n            yield return 2;\n            yield return 3;\n        }\n\n        // you can also use \"yield break\" to stop the Iterator\n        // this method would only return half of the values from 0 to limit.\n        public static IEnumerable<int> YieldCounterWithBreak(int limit = 10)\n        {\n            for (var i = 0; i < limit; i++)\n            {\n                if (i > limit/2) yield break;\n                yield return i;\n            }\n        }\n\n        public static void OtherInterestingFeatures()\n        {\n            // OPTIONAL PARAMETERS\n            MethodSignatures(3, 1, 3, \"Some\", \"Extra\", \"Strings\");\n            MethodSignatures(3, another: 3); // explicitly set a parameter, skipping optional ones\n\n            // BY REF AND OUT PARAMETERS\n            int maxCount = 0, count; // ref params must have value\n            MethodSignatures(ref maxCount, out count);\n\n            // EXTENSION METHODS\n            int i = 3;\n            i.Print(); // Defined below\n\n            // NULLABLE TYPES - great for database interaction / return values\n            // any value type (i.e. not a class) can be made nullable by suffixing a ?\n            // <type>? <var name> = <value>\n            int? nullable = null; // short hand for Nullable<int>\n            Console.WriteLine(\"Nullable variable: \" + nullable);\n            bool hasValue = nullable.HasValue; // true if not null\n\n            // ?? is syntactic sugar for specifying default value (coalesce)\n            // in case variable is null\n            int notNullable = nullable ?? 0; // 0\n\n            // ?. is an operator for null-propagation - a shorthand way of checking for null\n            nullable?.Print(); // Use the Print() extension method if nullable isn't null\n\n            // IMPLICITLY TYPED VARIABLES - you can let the compiler work out what the type is:\n            var magic = \"magic is a string, at compile time, so you still get type safety\";\n            // magic = 9; will not work as magic is a string, not an int\n\n            // GENERICS\n            //\n            var phonebook = new Dictionary<string, string>() {\n                {\"Sarah\", \"212 555 5555\"} // Add some entries to the phone book\n            };\n\n            // Calling SETDEFAULT defined as a generic above\n            Console.WriteLine(SetDefault<string,string>(phonebook, \"Shaun\", \"No Phone\")); // No Phone\n            // nb, you don't need to specify the TKey and TValue since they can be\n            // derived implicitly\n            Console.WriteLine(SetDefault(phonebook, \"Sarah\", \"No Phone\")); // 212 555 5555\n\n            // LAMBDA EXPRESSIONS - allow you to write code in line\n            Func<int, int> square = (x) => x * x; // Last T item is the return value\n            Console.WriteLine(square(3)); // 9\n\n            // ERROR HANDLING - coping with an uncertain world\n            try\n            {\n                var funBike = PennyFarthing.CreateWithGears(6);\n\n                // will no longer execute because CreateWithGears throws an exception\n                string some = \"\";\n                if (true) some = null;\n                some.ToLower(); // throws a NullReferenceException\n            }\n            catch (NotSupportedException)\n            {\n                Console.WriteLine(\"Not so much fun now!\");\n            }\n            catch (Exception ex) // catch all other exceptions\n            {\n                throw new ApplicationException(\"It hit the fan\", ex);\n                // throw; // A rethrow that preserves the callstack\n            }\n            // catch { } // catch-all without capturing the Exception\n            finally\n            {\n                // executes after try or catch\n            }\n\n            // DISPOSABLE RESOURCES MANAGEMENT - let you handle unmanaged resources easily.\n            // Most of objects that access unmanaged resources (file handle, device contexts, etc.)\n            // implement the IDisposable interface. The using statement takes care of\n            // cleaning those IDisposable objects for you.\n            using (StreamWriter writer = new StreamWriter(\"log.txt\"))\n            {\n                writer.WriteLine(\"Nothing suspicious here\");\n                // At the end of scope, resources will be released.\n                // Even if an exception is thrown.\n            }\n\n            // PARALLEL FRAMEWORK\n            // https://devblogs.microsoft.com/csharpfaq/parallel-programming-in-net-framework-4-getting-started/\n\n            var words = new List<string> {\"dog\", \"cat\", \"horse\", \"pony\"};\n\n            Parallel.ForEach(words,\n                new ParallelOptions() { MaxDegreeOfParallelism = 4 },\n                word =>\n                {\n                    Console.WriteLine(word);\n                }\n            );\n\n            // Running this will produce different outputs\n            // since each thread finishes at different times.\n            // Some example outputs are:\n            // cat dog horse pony\n            // dog horse pony cat\n\n            // DYNAMIC OBJECTS (great for working with other languages)\n            dynamic student = new ExpandoObject();\n            student.FirstName = \"First Name\"; // No need to define class first!\n\n            // You can even add methods (returns a string, and takes in a string)\n            student.Introduce = new Func<string, string>(\n                (introduceTo) => string.Format(\"Hey {0}, this is {1}\", student.FirstName, introduceTo));\n            Console.WriteLine(student.Introduce(\"Beth\"));\n\n            // IQUERYABLE<T> - almost all collections implement this, which gives you a lot of\n            // very useful Map / Filter / Reduce style methods\n            var bikes = new List<Bicycle>();\n            bikes.Sort(); // Sorts the array\n            bikes.Sort((b1, b2) => b1.Wheels.CompareTo(b2.Wheels)); // Sorts based on wheels\n            var result = bikes\n                .Where(b => b.Wheels > 3) // Filters - chainable (returns IQueryable of previous type)\n                .Where(b => b.IsBroken && b.HasTassles)\n                .Select(b => b.ToString()); // Map - we only this selects, so result is a IQueryable<string>\n\n            var sum = bikes.Sum(b => b.Wheels); // Reduce - sums all the wheels in the collection\n\n            // Create a list of IMPLICIT objects based on some parameters of the bike\n            var bikeSummaries = bikes.Select(b=>new { Name = b.Name, IsAwesome = !b.IsBroken && b.HasTassles });\n            // Hard to show here, but you get type ahead completion since the compiler can implicitly work\n            // out the types above!\n            foreach (var bikeSummary in bikeSummaries.Where(b => b.IsAwesome))\n                Console.WriteLine(bikeSummary.Name);\n\n            // ASPARALLEL\n            // And this is where things get wicked - combine linq and parallel operations\n            var threeWheelers = bikes.AsParallel().Where(b => b.Wheels == 3).Select(b => b.Name);\n            // this will happen in parallel! Threads will automagically be spun up and the\n            // results divvied amongst them! Amazing for large datasets when you have lots of\n            // cores\n\n            // LINQ - maps a store to IQueryable<T> objects, with delayed execution\n            // e.g. LinqToSql - maps to a database, LinqToXml maps to an xml document\n            var db = new BikeRepository();\n\n            // execution is delayed, which is great when querying a database\n            var filter = db.Bikes.Where(b => b.HasTassles); // no query run\n            if (42 > 6) // You can keep adding filters, even conditionally - great for \"advanced search\" functionality\n                filter = filter.Where(b => b.IsBroken); // no query run\n\n            var query = filter\n                .OrderBy(b => b.Wheels)\n                .ThenBy(b => b.Name)\n                .Select(b => b.Name); // still no query run\n\n            // Now the query runs, but opens a reader, so only populates as you iterate through\n            foreach (string bike in query)\n                Console.WriteLine(result);\n\n\n\n        }\n\n    } // End LearnCSharp class\n\n    // You can include other classes in a .cs file\n\n    public static class Extensions\n    {\n        // EXTENSION METHODS\n        public static void Print(this object obj)\n        {\n            Console.WriteLine(obj.ToString());\n        }\n    }\n\n\n    // DELEGATES AND EVENTS\n    public class DelegateTest\n    {\n        public static int count = 0;\n        public static int Increment()\n        {\n            // increment count then return it\n            return ++count;\n        }\n\n        // A delegate is a reference to a method.\n        // To reference the Increment method,\n        // first declare a delegate with the same signature,\n        // i.e. takes no arguments and returns an int\n        public delegate int IncrementDelegate();\n\n        // An event can also be used to trigger delegates\n        // Create an event with the delegate type\n        public static event IncrementDelegate MyEvent;\n\n        static void Main(string[] args)\n        {\n            // Refer to the Increment method by instantiating the delegate\n            // and passing the method itself in as an argument\n            IncrementDelegate inc = new IncrementDelegate(Increment);\n            Console.WriteLine(inc());  // => 1\n\n            // Delegates can be composed with the + operator\n            IncrementDelegate composedInc = inc;\n            composedInc += inc;\n            composedInc += inc;\n\n            // composedInc will run Increment 3 times\n            Console.WriteLine(composedInc());  // => 4\n\n\n            // Subscribe to the event with the delegate\n            MyEvent += new IncrementDelegate(Increment);\n            MyEvent += new IncrementDelegate(Increment);\n\n            // Trigger the event\n            // ie. run all delegates subscribed to this event\n            Console.WriteLine(MyEvent());  // => 6\n        }\n    }\n\n\n    // Class Declaration Syntax:\n    // <public/private/protected/internal> class <class name>{\n    //    //data fields, constructors, functions all inside.\n    //    //functions are called as methods in Java.\n    // }\n\n    public class Bicycle\n    {\n        // Bicycle's Fields/Variables\n        public int Cadence // Public: Can be accessed from anywhere\n        {\n            get // get - define a method to retrieve the property\n            {\n                return _cadence;\n            }\n            set // set - define a method to set a property\n            {\n                _cadence = value; // Value is the value passed in to the setter\n            }\n        }\n        private int _cadence;\n\n        protected virtual int Gear // Protected: Accessible from the class and subclasses\n        {\n            get; // creates an auto property so you don't need a member field\n            set;\n        }\n\n        internal int Wheels // Internal: Accessible from within the assembly\n        {\n            get;\n            private set; // You can set modifiers on the get/set methods\n        }\n\n        int _speed; // Everything is private by default: Only accessible from within this class.\n                    // can also use keyword private\n        public string Name { get; set; }\n\n        // Properties also have a special syntax for when you want a readonly property\n        // that simply returns the result of an expression\n        public string LongName => Name + \" \" + _speed + \" speed\";\n\n        // Enum is a value type that consists of a set of named constants\n        // It is really just mapping a name to a value (an int, unless specified otherwise).\n        // The approved types for an enum are byte, sbyte, short, ushort, int, uint, long, or ulong.\n        // An enum can't contain the same value twice.\n        public enum BikeBrand\n        {\n            AIST,\n            BMC,\n            Electra = 42, //you can explicitly set a value to a name\n            Gitane // 43\n        }\n        // We defined this type inside a Bicycle class, so it is a nested type\n        // Code outside of this class should reference this type as Bicycle.BikeBrand\n\n        public BikeBrand Brand; // After declaring an enum type, we can declare the field of this type\n\n        // Decorate an enum with the FlagsAttribute to indicate that multiple values can be switched on\n        // Any class derived from Attribute can be used to decorate types, methods, parameters etc\n        // Bitwise operators & and | can be used to perform and/or operations\n\n        [Flags]\n        public enum BikeAccessories\n        {\n            None = 0,\n            Bell = 1,\n            MudGuards = 2, // need to set the values manually!\n            Racks = 4,\n            Lights = 8,\n            FullPackage = Bell | MudGuards | Racks | Lights\n        }\n\n        // Usage: aBike.Accessories.HasFlag(Bicycle.BikeAccessories.Bell)\n        // Before .NET 4: (aBike.Accessories & Bicycle.BikeAccessories.Bell) == Bicycle.BikeAccessories.Bell\n        public BikeAccessories Accessories { get; set; }\n\n        // Static members belong to the type itself rather than specific object.\n        // You can access them without a reference to any object:\n        // Console.WriteLine(\"Bicycles created: \" + Bicycle.bicyclesCreated);\n        public static int BicyclesCreated { get; set; }\n\n        // readonly values are set at run time\n        // they can only be assigned upon declaration or in a constructor\n        readonly bool _hasCardsInSpokes = false; // read-only private\n\n        // Constructors are a way of creating classes\n        // This is a default constructor\n        public Bicycle()\n        {\n            this.Gear = 1; // you can access members of the object with the keyword this\n            Cadence = 50;  // but you don't always need it\n            _speed = 5;\n            Name = \"Bontrager\";\n            Brand = BikeBrand.AIST;\n            BicyclesCreated++;\n        }\n\n        // This is a specified constructor (it contains arguments)\n        public Bicycle(int startCadence, int startSpeed, int startGear,\n                       string name, bool hasCardsInSpokes, BikeBrand brand)\n            : base() // calls base first\n        {\n            Gear = startGear;\n            Cadence = startCadence;\n            _speed = startSpeed;\n            Name = name;\n            _hasCardsInSpokes = hasCardsInSpokes;\n            Brand = brand;\n        }\n\n        // Constructors can be chained\n        public Bicycle(int startCadence, int startSpeed, BikeBrand brand) :\n            this(startCadence, startSpeed, 0, \"big wheels\", true, brand)\n        {\n        }\n\n        // Function Syntax:\n        // <public/private/protected> <return type> <function name>(<args>)\n\n        // classes can implement getters and setters for their fields\n        // or they can implement properties (this is the preferred way in C#)\n\n        // Method parameters can have default values.\n        // In this case, methods can be called with these parameters omitted\n        public void SpeedUp(int increment = 1)\n        {\n            _speed += increment;\n        }\n\n        public void SlowDown(int decrement = 1)\n        {\n            _speed -= decrement;\n        }\n\n        // properties get/set values\n        // when only data needs to be accessed, consider using properties.\n        // properties may have either get or set, or both\n        private bool _hasTassles; // private variable\n        public bool HasTassles // public accessor\n        {\n            get { return _hasTassles; }\n            set { _hasTassles = value; }\n        }\n\n        // You can also define an automatic property in one line\n        // this syntax will create a backing field automatically.\n        // You can set an access modifier on either the getter or the setter (or both)\n        // to restrict its access:\n        public bool IsBroken { get; private set; }\n\n        // Properties can be auto-implemented\n        public int FrameSize\n        {\n            get;\n            // you are able to specify access modifiers for either get or set\n            // this means only Bicycle class can call set on Framesize\n            private set;\n        }\n\n        // It's also possible to define custom Indexers on objects.\n        // Although this is not entirely useful in this example, you\n        // could do bicycle[0] which returns \"chris\" to get the first passenger or\n        // bicycle[1] = \"lisa\" to set the passenger. (of this apparent quattrocycle)\n        private string[] passengers = { \"chris\", \"phil\", \"darren\", \"regina\" };\n\n        public string this[int i]\n        {\n            get {\n                return passengers[i];\n            }\n\n            set {\n                passengers[i] = value;\n            }\n        }\n\n        // Method to display the attribute values of this Object.\n        public virtual string Info()\n        {\n            return \"Gear: \" + Gear +\n                    \" Cadence: \" + Cadence +\n                    \" Speed: \" + _speed +\n                    \" Name: \" + Name +\n                    \" Cards in Spokes: \" + (_hasCardsInSpokes ? \"yes\" : \"no\") +\n                    \"\\n------------------------------\\n\"\n                    ;\n        }\n\n        // Methods can also be static. It can be useful for helper methods\n        public static bool DidWeCreateEnoughBicycles()\n        {\n            // Within a static method, we only can reference static class members\n            return BicyclesCreated > 9000;\n        } // If your class only needs static members, consider marking the class itself as static.\n\n\n    } // end class Bicycle\n\n    // PennyFarthing is a subclass of Bicycle\n    class PennyFarthing : Bicycle\n    {\n        // (Penny Farthings are those bicycles with the big front wheel.\n        // They have no gears.)\n\n        // calling parent constructor\n        public PennyFarthing(int startCadence, int startSpeed) :\n            base(startCadence, startSpeed, 0, \"PennyFarthing\", true, BikeBrand.Electra)\n        {\n        }\n\n        protected override int Gear\n        {\n            get\n            {\n                return 0;\n            }\n            set\n            {\n                throw new InvalidOperationException(\"You can't change gears on a PennyFarthing\");\n            }\n        }\n\n        public static PennyFarthing CreateWithGears(int gears)\n        {\n            var penny = new PennyFarthing(1, 1);\n            penny.Gear = gears; // Oops, can't do this!\n            return penny;\n        }\n\n        public override string Info()\n        {\n            string result = \"PennyFarthing bicycle \";\n            result += base.ToString(); // Calling the base version of the method\n            return result;\n        }\n    }\n\n    // Interfaces only contain signatures of the members, without the implementation.\n    interface IJumpable\n    {\n        void Jump(int meters); // all interface members are implicitly public\n    }\n\n    interface IBreakable\n    {\n        bool Broken { get; } // interfaces can contain properties as well as methods & events\n    }\n\n    // Classes can inherit only one other class, but can implement any amount of interfaces,\n    // however the base class name must be the first in the list and all interfaces follow\n    class MountainBike : Bicycle, IJumpable, IBreakable\n    {\n        int damage = 0;\n\n        public void Jump(int meters)\n        {\n            damage += meters;\n        }\n\n        public bool Broken\n        {\n            get\n            {\n                return damage > 100;\n            }\n        }\n    }\n\n    /// <summary>\n    /// Used to connect to DB for LinqToSql example.\n    /// EntityFramework Code First is awesome (similar to Ruby's ActiveRecord, but bidirectional)\n    /// https://docs.microsoft.com/ef/ef6/modeling/code-first/workflows/new-database\n    /// </summary>\n    public class BikeRepository : DbContext\n    {\n        public BikeRepository()\n            : base()\n        {\n        }\n\n        public DbSet<Bicycle> Bikes { get; set; }\n    }\n\n    // Classes can be split across multiple .cs files\n    // A1.cs\n    public partial class A\n    {\n        public static void A1()\n        {\n            Console.WriteLine(\"Method A1 in class A\");\n        }\n    }\n\n    // A2.cs\n    public partial class A\n    {\n        public static void A2()\n        {\n            Console.WriteLine(\"Method A2 in class A\");\n        }\n    }\n\n    // Program using the partial class \"A\"\n    public class Program\n    {\n        static void Main()\n        {\n            A.A1();\n            A.A2();\n        }\n    }\n\n    // String interpolation by prefixing the string with $\n    // and wrapping the expression you want to interpolate with { braces }\n    // You can also combine both interpolated and verbatim strings with $@\n    public class Rectangle\n    {\n        public int Length { get; set; }\n        public int Width { get; set; }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Rectangle rect = new Rectangle { Length = 5, Width = 3 };\n            Console.WriteLine($\"The length is {rect.Length} and the width is {rect.Width}\");\n\n            string username = \"User\";\n            Console.WriteLine($@\"C:\\Users\\{username}\\Desktop\");\n        }\n    }\n\n    // New C# 6 features\n    class GlassBall : IJumpable, IBreakable\n    {\n        // Autoproperty initializers\n        public int Damage { get; private set; } = 0;\n\n        // Autoproperty initializers on getter-only properties\n        public string Name { get; } = \"Glass ball\";\n\n        // Getter-only autoproperty that is initialized in constructor\n        public string GenieName { get; }\n\n        public GlassBall(string genieName = null)\n        {\n            GenieName = genieName;\n        }\n\n        public void Jump(int meters)\n        {\n            if (meters < 0)\n                // New nameof() expression; compiler will check that the identifier exists\n                // nameof(x) == \"x\"\n                // Prevents e.g. parameter names changing but not updated in error messages\n                throw new ArgumentException(\"Cannot jump negative amount!\", nameof(meters));\n\n            Damage += meters;\n        }\n\n        // Expression-bodied properties ...\n        public bool Broken\n            => Damage > 100;\n\n        // ... and methods\n        public override string ToString()\n            // Interpolated string\n            => $\"{Name}. Damage taken: {Damage}\";\n\n        public string SummonGenie()\n            // Null-conditional operators\n            // x?.y will return null immediately if x is null; y is not evaluated\n            => GenieName?.ToUpper();\n    }\n\n    static class MagicService\n    {\n        private static bool LogException(Exception ex)\n        {\n            // log exception somewhere\n            return false;\n        }\n\n        public static bool CastSpell(string spell)\n        {\n            try\n            {\n                // Pretend we call API here\n                throw new MagicServiceException(\"Spell failed\", 42);\n\n                // Spell succeeded\n                return true;\n            }\n            // Only catch if Code is 42 i.e. spell failed\n            catch(MagicServiceException ex) when (ex.Code == 42)\n            {\n                // Spell failed\n                return false;\n            }\n            // Other exceptions, or MagicServiceException where Code is not 42\n            catch(Exception ex) when (LogException(ex))\n            {\n                // Execution never reaches this block\n                // The stack is not unwound\n            }\n            return false;\n            // Note that catching a MagicServiceException and rethrowing if Code\n            // is not 42 or 117 is different, as then the final catch-all block\n            // will not catch the rethrown exception\n        }\n    }\n\n    public class MagicServiceException : Exception\n    {\n        public int Code { get; }\n\n        public MagicServiceException(string message, int code) : base(message)\n        {\n            Code = code;\n        }\n    }\n\n    public static class PragmaWarning {\n        // Obsolete attribute\n        [Obsolete(\"Use NewMethod instead\", false)]\n        public static void ObsoleteMethod()\n        {\n            // obsolete code\n        }\n\n        public static void NewMethod()\n        {\n            // new code\n        }\n\n        public static void Main()\n        {\n            ObsoleteMethod(); // CS0618: 'ObsoleteMethod is obsolete: Use NewMethod instead'\n#pragma warning disable CS0618\n            ObsoleteMethod(); // no warning\n#pragma warning restore CS0618\n            ObsoleteMethod(); // CS0618: 'ObsoleteMethod is obsolete: Use NewMethod instead'\n        }\n    }\n} // End Namespace\n\nusing System;\n// C# 6, static using\nusing static System.Math;\n\nnamespace Learning.More.CSharp\n{\n    class StaticUsing\n    {\n        static void Main()\n        {\n            // Without a static using statement..\n            Console.WriteLine(\"The square root of 4 is {}.\", Math.Sqrt(4));\n            // With one\n            Console.WriteLine(\"The square root of 4 is {}.\", Sqrt(4));\n        }\n    }\n}\n\n// New C# 7 Feature\n// Install Microsoft.Net.Compilers Latest from Nuget\n// Install System.ValueTuple Latest from Nuget\nusing System;\nnamespace Csharp7\n{\n    // TUPLES, DECONSTRUCTION AND DISCARDS\n    class TuplesTest\n    {\n        public (string, string) GetName()\n        {\n            // Fields in tuples are by default named Item1, Item2...\n            var names1 = (\"Peter\", \"Parker\");\n            Console.WriteLine(names1.Item2);  // => Parker\n\n            // Fields can instead be explicitly named\n            // Type 1 Declaration\n            (string FirstName, string LastName) names2 = (\"Peter\", \"Parker\");\n\n            // Type 2 Declaration\n            var names3 = (First:\"Peter\", Last:\"Parker\");\n\n            Console.WriteLine(names2.FirstName);  // => Peter\n            Console.WriteLine(names3.Last);  // => Parker\n\n            return names3;\n        }\n\n        public string GetLastName() {\n            var fullName = GetName();\n\n            // Tuples can be deconstructed\n            (string firstName, string lastName) = fullName;\n\n            // Fields in a deconstructed tuple can be discarded by using _\n            var (_, last) = fullName;\n            return last;\n        }\n\n        // Any type can be deconstructed in the same way by\n        // specifying a Deconstruct method\n        public int randomNumber = 4;\n        public int anotherRandomNumber = 10;\n\n        public void Deconstruct(out int randomNumber, out int anotherRandomNumber)\n        {\n            randomNumber = this.randomNumber;\n            anotherRandomNumber = this.anotherRandomNumber;\n        }\n\n        static void Main(string[] args)\n        {\n            var tt = new TuplesTest();\n            (int num1, int num2) = tt;\n            Console.WriteLine($\"num1: {num1}, num2: {num2}\");  // => num1: 4, num2: 10\n\n            Console.WriteLine(tt.GetLastName());\n        }\n    }\n\n    // PATTERN MATCHING\n    class PatternMatchingTest\n    {\n        public static (string, int)? CreateLogMessage(object data)\n        {\n            switch(data)\n            {\n                // Additional filtering using when\n                case System.Net.Http.HttpRequestException h when h.Message.Contains(\"404\"):\n                    return (h.Message, 404);\n                case System.Net.Http.HttpRequestException h when h.Message.Contains(\"400\"):\n                    return (h.Message, 400);\n                case Exception e:\n                    return (e.Message, 500);\n                case string s:\n                    return (s, s.Contains(\"Error\") ? 500 : 200);\n                case null:\n                    return null;\n                default:\n                    return (data.ToString(), 500);\n            }\n        }\n    }\n\n    // REFERENCE LOCALS\n    // Allow you to return a reference to an object instead of just its value\n    class RefLocalsTest\n    {\n        // note ref in return\n        public static ref string FindItem(string[] arr, string el)\n        {\n            for(int i=0; i<arr.Length; i++)\n            {\n                if(arr[i] == el) {\n                    // return the reference\n                    return ref arr[i];\n                }\n            }\n            throw new Exception(\"Item not found\");\n        }\n\n        public static void SomeMethod()\n        {\n            string[] arr = {\"this\", \"is\", \"an\", \"array\"};\n\n            // note refs everywhere\n            ref string item = ref FindItem(arr, \"array\");\n            item = \"apple\";\n            Console.WriteLine(arr[3]);  // => apple\n        }\n    }\n\n    // LOCAL FUNCTIONS\n    class LocalFunctionTest\n    {\n        private static int _id = 0;\n        public int id;\n        public LocalFunctionTest()\n        {\n            id = generateId();\n\n            // This local function can only be accessed in this scope\n            int generateId()\n            {\n                return _id++;\n            }\n        }\n\n        public static void AnotherMethod()\n        {\n            var lf1 = new LocalFunctionTest();\n            var lf2 = new LocalFunctionTest();\n            Console.WriteLine($\"{lf1.id}, {lf2.id}\");  // => 0, 1\n\n            int id = generateId();\n            // error CS0103: The name 'generateId' does not exist in the current context\n        }\n    }\n}\n```\n\n## Topics Not Covered\n\n✨ New, 👍 Old, 🎈 LTS, 🔥 Cross-platform, 🎁 Windows-only\n\n* Attributes\n\n* Asynchronous Programming\n\n* Web Development\n    * ASP.NET Core ✨\n\n* Desktop Development\n    * Windows Presentation Foundation 👍 🎈 🎁\n    * Universal Windows Platform ✨ 🎁\n    * Uno Platform 🔥 ✨\n    * WinForms 👍 🎈 🎁\n    * Avalonia 🔥 ✨\n    * WinUI ✨ 🎁\n\n* Cross-platform Development\n    * Xamarin.Forms 👍\n    * MAUI ✨\n\n## Further Reading\n\n* [C# language reference](https://docs.microsoft.com/dotnet/csharp/language-reference/)\n* [Learn .NET](https://dotnet.microsoft.com/learn)\n* [C# Coding Conventions](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions)\n* [DotNetPerls](http://www.dotnetperls.com)\n* [C# in Depth](http://manning.com/skeet2)\n* [Programming C# 5.0](http://shop.oreilly.com/product/0636920024064.do)\n* [LINQ Pocket Reference](http://shop.oreilly.com/product/9780596519254.do)\n* [Windows Forms Programming in C#](http://www.amazon.com/Windows-Forms-Programming-Chris-Sells/dp/0321116208)\n* [freeCodeCamp - C# Tutorial for Beginners](https://www.youtube.com/watch?v=GhQdlIFylQ8)\n"
        },
        {
          "name": "css.md",
          "type": "blob",
          "size": 11.853515625,
          "content": "---\nname: CSS\ncontributors:\n    - [\"Mohammad Valipour\", \"https://github.com/mvalipour\"]\n    - [\"Marco Scannadinari\", \"https://github.com/marcoms\"]\n    - [\"Geoffrey Liu\", \"https://github.com/g-liu\"]\n    - [\"Connor Shea\", \"https://github.com/connorshea\"]\n    - [\"Deepanshu Utkarsh\", \"https://github.com/duci9y\"]\n    - [\"Brett Taylor\", \"https://github.com/glutnix\"]\n    - [\"Tyler Mumford\", \"https://tylermumford.com\"]\nfilename: learncss.css\n---\n\nWeb pages are built with HTML, which specifies the content of a page.\nCSS (Cascading Style Sheets) is a separate language which specifies\na page's **appearance**.\n\nCSS code is made of static *rules*. Each rule takes one or more *selectors* and\ngives specific *values* to a number of visual *properties*. Those properties are\nthen applied to the page elements indicated by the selectors.\n\nThis guide has been written with CSS 2 in mind, which is extended by the new\nfeatures of CSS 3.\n\n**NOTE:** Because CSS produces visual results, in order to learn it, you need to\ntry everything in a CSS playground like [dabblet](http://dabblet.com/).\nThe main focus of this article is on the syntax and some general tips.\n\n## Syntax\n\n```css\n/* comments appear inside slash-asterisk, just like this line!\n   there are no \"one-line comments\"; this is the only comment style */\n\n/* ####################\n   ## SELECTORS\n   #################### */\n\n/* the selector is used to target an element on a page. */\nselector { property: value; /* more properties...*/ }\n\n/*\nHere is an example element:\n\n<div class='class1 class2' id='anID' attr='value' otherAttr='en-us foo bar' />\n*/\n\n/* You can target it using one of its CSS classes */\n.class1 { }\n\n/* or both classes! */\n.class1.class2 { }\n\n/* or its name */\ndiv { }\n\n/* or its id */\n#anID { }\n\n/* or using the fact that it has an attribute! */\n[attr] { font-size:smaller; }\n\n/* or that the attribute has a specific value */\n[attr='value'] { font-size:smaller; }\n\n/* starts with a value (CSS 3) */\n[attr^='val'] { font-size:smaller; }\n\n/* or ends with a value (CSS 3) */\n[attr$='ue'] { font-size:smaller; }\n\n/* or contains a value (CSS 3) */\n[attr*='foo'] { }\n\n/* or contains a value in a space-separated list */\n[otherAttr~='foo'] { }\n[otherAttr~='bar'] { }\n\n/* or contains a value in a dash-separated list, e.g., \"-\" (U+002D) */\n[otherAttr|='en'] { font-size:smaller; }\n\n\n/* You can combine different selectors to create a more focused selector. Don't\n   put spaces between them. */\ndiv.some-class[attr$='ue'] { }\n\n/* You can select an element which is a child of another element */\ndiv.some-parent > .class-name { }\n\n/* or a descendant of another element. Children are the direct descendants of\n   their parent element, only one level down the tree. Descendants can be any\n   level down the tree. */\ndiv.some-parent .class-name { }\n\n/* Warning: the same selector without a space has another meaning.\n   Can you guess what? */\ndiv.some-parent.class-name { }\n\n/* You may also select an element based on its adjacent sibling */\n.i-am-just-before + .this-element { }\n\n/* or any sibling preceding it */\n.i-am-any-element-before ~ .this-element { }\n\n/* There are some selectors called pseudo classes that can be used to select an\n   element only when it is in a particular state */\n\n/* for example, when a link hasn't been visited */\nselected:link { }\n\n/* or a link has been visited */\nselector:visited { }\n\n/* or an element is in focus */\nselected:focus { }\n\n/* or when the cursor hovers over an element */\nselector:hover { }\n\n/* or when a link is clicked on */\nselector:active { }\n\n/* These pseudo classes regarding links should always be written in the above order or the code might not work as expected */\n\n/* Any element that is the first child of its parent */\nselector:first-child {}\n\n/* any element that is the last child of its parent */\nselector:last-child {}\n\n/* Select the nth child of selector parent (CSS 3) */\nselector:nth-child(n) { }\n\n/* Just like pseudo classes, pseudo elements allow you to style certain parts of\n    a document  */\n\n/* matches a virtual first child of the selected element */\nselector::before {}\n\n/* matches a virtual last child of the selected element */\nselector::after {}\n\n/* At appropriate places, an asterisk may be used as a wildcard to select every\n   element */\n* { } /* all elements */\n.parent * { } /* all descendants */\n.parent > * { } /* all children */\n\n/* Group any number of selectors to define styles that affect all selectors\n   in the group */\nselector1, selector2 { }\n\n/* Select elements that do not have a certain state (CSS 3) */\n/* Here, we select div with no id attribute. */\ndiv:not([id]) {\n   background-color: red;\n}\n\n/* ####################\n   ## PROPERTIES\n   #################### */\n\nselector {\n\n    /* Units of length can be absolute or relative. */\n\n    /* Relative units */\n    width: 50%;       /* percentage of parent element width */\n    font-size: 2em;   /* multiples of element's original font-size */\n    font-size: 2rem;  /* or the root element's font-size */\n    font-size: 2vw;   /* multiples of 1% of the viewport's width (CSS 3) */\n    font-size: 2vh;   /* or its height */\n    font-size: 2vmin; /* whichever of a vh or a vw is smaller */\n    font-size: 2vmax; /* or greater */\n\n    /* Absolute units */\n    width: 200px;     /* pixels */\n    font-size: 20pt;  /* points */\n    width: 5cm;       /* centimeters */\n    min-width: 50mm;  /* millimeters */\n    max-width: 5in;   /* inches */\n\n    /* Colors */\n    color: #F6E;                    /* short hex format */\n    color: #FF66EE;                 /* long hex format */\n    color: tomato;                  /* a named color */\n    color: rgb(255, 255, 255);      /* as rgb values */\n    color: rgb(10%, 20%, 50%);      /* as rgb percentages */\n    color: rgba(255, 0, 0, 0.3);    /* as rgba values (CSS 3) Note: 0 <= a <= 1 */\n    color: transparent;             /* equivalent to setting the alpha to 0 */\n    color: hsl(0, 100%, 50%);       /* as hsl percentages (CSS 3) */\n    color: hsla(0, 100%, 50%, 0.3); /* as hsl percentages with alpha */\n\n    /* Borders */\n    border-width:5px;\n    border-style:solid;\n    border-color:red;      /* similar to how background-color is set */\n    border: 5px solid red; /* this is a short hand approach for the same */\n    border-radius:20px;    /* this is a CSS3 property */\n\n    /* Images as backgrounds of elements */\n    background-image: url(/img-path/img.jpg); /* quotes inside url() optional */\n\n    /* Fonts */\n    font-family: Arial;\n    /* if the font family name has a space, it must be quoted */\n    font-family: \"Courier New\";\n    /* if the first one is not found, the browser uses the next, and so on */\n    font-family: \"Courier New\", Trebuchet, Arial, sans-serif;\n}\n\n/* Custom CSS properties using variables (CSS 3) */\n:root {\n   --main-bg-color: whitesmoke;\n}\nbody {\n   background-color: var(--main-bg-color)\n}\n\n/* Perfom a calculation (CSS 3) */\nbody {\n   width: calc(100vw - 100px)\n}\n\n/* Nest style rule inside another (CSS 3) */\n.main {\n   .bgred { /* same as: .main .bgred { } */\n      background: red;\n   }\n   & .bggreen { /* same as: .main .bggreen { } */\n      background: green;\n   }\n   &.bgblue { /* (without space) same as: .main.bgblue { } */\n      background: blue;\n   }\n}\n\n/* Design responsive layout using flexbox (CSS 3) */\n.container {\n   display: flex;\n   flex-direction: row;      /* in which direction stack the flex items */\n   flex-wrap: wrap;          /* whether or not flex items should wrap */\n   justify-content: center;  /* how to align flex items horizontally */\n   align-items: center;      /* how to align flex items vertically */\n}\n```\n\n## Usage\n\nSave a CSS stylesheet with the extension `.css`.\n\n```html\n<!-- You need to include the css file in your page's <head>. This is the\n     recommended method. Refer to http://stackoverflow.com/questions/8284365 -->\n<link rel='stylesheet' type='text/css' href='path/to/style.css'>\n\n<!-- You can also include some CSS inline in your markup. -->\n<style>\n   a { color: purple; }\n</style>\n\n<!-- Or directly set CSS properties on the element. -->\n<div style=\"border: 1px solid red;\">\n</div>\n```\n\n## Precedence or Cascade\n\nAn element may be targeted by multiple selectors and may have a property set on\nit in more than once. In these cases, one of the rules takes precedence over\nothers. Rules with a more specific selector take precedence over a less specific\none, and a rule occurring later in the stylesheet overwrites a previous one\n(which also means that if two different linked stylesheets contain rules for an\nelement and if the rules are of the same specificity, then order of linking\nwould take precedence and the sheet linked latest would govern styling) .\n\nThis process is called cascading, hence the name Cascading Style Sheets.\n\nGiven the following CSS:\n\n```css\n/* A */\np.class1[attr='value']\n\n/* B */\np.class1 { }\n\n/* C */\np.class2 { }\n\n/* D */\np { }\n\n/* E */\np { property: value !important; }\n```\n\nand the following markup:\n\n```html\n<p style='/*F*/ property:value;' class='class1 class2' attr='value'>\n```\n\nThe precedence of style is as follows. Remember, the precedence is for each\n**property**, not for the entire block.\n\n* `E` has the highest precedence because of the keyword `!important`. It is\nrecommended that you avoid its usage.\n* `F` is next, because it is an inline style.\n* `A` is next, because it is more \"specific\" than anything else. It has 3\n    specifiers: The name of the element `p`, its class `class1`, an attribute\n    `attr='value'`.\n* `C` is next, even though it has the same specificity as `B`.\n    This is because it appears after `B`.\n* `B` is next.\n* `D` is the last one.\n\n## Media Queries\n\nCSS Media Queries are a feature in CSS 3 which allows you to specify when certain CSS rules should be applied, such as when printed, or when on a screen with certain dimensions or pixel density. They do not add to the selector's specificity.\n\n```css\n/* A rule that will be used on all devices */\nh1 {\n  font-size: 2em;\n  color: white;\n  background-color: black;\n}\n\n/* change the h1 to use less ink on a printer */\n@media print {\n  h1 {\n    color: black;\n    background-color: white;\n  }\n}\n\n/* make the font bigger when shown on a screen at least 480px wide */\n@media screen and (min-width: 480px) {\n  h1 {\n    font-size: 3em;\n    font-weight: normal;\n  }\n}\n```\n\nMedia queries can include these features:\n`width`, `height`, `device-width`, `device-height`, `orientation`, `aspect-ratio`, `device-aspect-ratio`, `color`, `color-index`, `monochrome`, `resolution`, `scan`, `grid`. Most of these features can be prefixed with `min-` or `max-`.\n\nThe `resolution` feature is not supported by older devices, instead use `device-pixel-ratio`.\n\nMany smartphones and tablets will attempt to render the page as if it were on a desktop unless you provide a `viewport` meta-tag.\n\n```html\n<head>\n  <meta name=\"viewport\" content=\"width=device-width; initial-scale=1.0\">\n</head>\n```\n\n## Compatibility\n\nMost of the features in CSS 2 (and many in CSS 3) are available across all\nbrowsers and devices. But it's always good practice to check before using\na new feature.\n\n## Resources\n\n* [CanIUse](http://caniuse.com) (Detailed compatibility info)\n* [Dabblet](http://dabblet.com/) (CSS playground)\n* [Mozilla Developer Network's CSS documentation](https://developer.mozilla.org/en-US/docs/Web/CSS) (Tutorials and reference)\n* [Codrops' CSS Reference](http://tympanus.net/codrops/css_reference/) (Reference)\n* [DevTips' CSS Basics](https://www.youtube.com/playlist?list=PLqGj3iMvMa4IOmy04kDxh_hqODMqoeeCy) (Tutorials)\n\n## Further Reading\n\n* [Understanding Style Precedence in CSS: Specificity, Inheritance, and the Cascade](http://www.vanseodesign.com/css/css-specificity-inheritance-cascaade/)\n* [Selecting elements using attributes](https://css-tricks.com/almanac/selectors/a/attribute/)\n* [QuirksMode CSS](http://www.quirksmode.org/css/)\n* [Z-Index - The stacking context](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context)\n* [SASS](http://sass-lang.com/) and [LESS](http://lesscss.org/) for CSS pre-processing\n* [CSS-Tricks](https://css-tricks.com)\n"
        },
        {
          "name": "cue.md",
          "type": "blob",
          "size": 14.0517578125,
          "content": "---\nname: CUE\nfilename: learncue.cue\ncontributors:\n    - [\"Daniel Cox\", \"https://github.com/danielpcox\"]\n    - [\"Coleman McFarland\", \"https://github.com/dontlaugh\"]\n---\n\nCUE is an expressive (but not Turing-complete) JSON superset, exportable to JSON or YAML. It supports optional types and many other conveniences for working with large configuration sets. The unification engine has roots in logic programming, and as such it provides a ready solution to modern configuration management problems.\n\nWhen CUE is exported to JSON, values from every processed file are unified into one giant object. Consider these two files:\n\n```yaml\n//name.cue\nname: \"Daniel\"\n```\n\n```yaml\n//disposition.cue\ndisposition: \"oblivious\"\n```\n\nNow we can unify and export to JSON:\n\n```bash\n% cue export name.cue disposition.cue\n{\n    \"name\": \"Daniel\",\n    \"disposition\": \"oblivious\"\n}\n```\n\nOr YAML:\n\n```bash\n% cue export --out yaml name.cue disposition.cue\nname: Daniel\ndisposition: oblivious\n```\n\nNotice the C-style comments are not in the output. Also notice that the keys in CUE syntax did not require quotes. Some special characters do require quotes:\n\n```yaml\nworks_fine: true\n\"needs-quotes\": true\n```\n\nUnification doesn't just unify across files, it is also a *global merge* of all types and values. The following fails, because the *types* are different.\n\n```yaml\n//string_value.cue\nfoo: \"baz\"\n```\n\n```yaml\n//integer_value.cue\nfoo: 100\n```\n\n```bash\n% cue export string_value.cue integer_value.cue\nfoo: conflicting values \"baz\" and 100 (mismatched types string and int):\n    integer_value.cue:1:6\n    string_value.cue:1:6\n```\n\nBut even if we quote the integer, it still fails, because the *values* conflict and there is no way to unify everything into a top-level object.\n\n```yaml\n//string_value.cue\nfoo: \"baz\"\n```\n\n```yaml\n//integer_value.cue\nfoo: \"100\"  // a string now\n```\n\n```bash\n% cue export string_value.cue integer_value.cue\nfoo: conflicting values \"100\" and \"baz\":\n    integer_value.cue:1:6\n    string_value.cue:1:6\n```\n\nTypes in CUE *are* values; special ones that the unification engine knows have certain behavior relative to other values. During unification it requires that values match the specified types, and when concrete values are required, you will get an error if there's only a type. So this is fine:\n\n```yaml\nstreet: \"1 Infinite Loop\"\nstreet: string\n```\n\nWhile `cue export` produces YAML or JSON, `cue eval` produces CUE. This is useful for converting YAML or JSON to CUE, or for inspecting the unified output in CUE itself. It's fine to be missing concrete values in CUE (though it prefers concrete values when emitting CUE when both are available and match),\n\n```yaml\n//type-only.cue\namount: float\n```\n\n```bash\n% cue eval type-only.cue\namount: float\n```\n\nbut you *need* concrete values if you want to export (or if you tell `eval` to require them with `-c`):\n\n```bash\n% cue export type-only.cue\namount: incomplete value float\n```\n\nGive it a value that unifies with the type, and all is well.\n\n```yaml\n//concrete-value.cue\namount: 3.14\n```\n\n```bash\n% cue export type-only.cue concrete-value.cue\n{\n    \"amount\": 3.14\n}\n```\n\nThe method of unifying concrete values with types that share a common syntax is very powerful, and much more compact than, e.g., JSON Schema. This way, schema, defaults, and data are all expressible in CUE.\n\nDefault values may be supplied with a type using an asterisk:\n\n```yaml\n// default-port.cue\nport: int | *8080\n```\n\n```bash\n% cue eval default-port.cue\nport: 8080\n```\n\nEnum-style options (\"disjunctions\" in CUE) may be specified with an `|` separator:\n\n```yaml\n//severity-enum.cue\nseverity: \"high\" | \"medium\" | \"low\"\nseverity: \"unknown\"\n```\n\n```bash\n% cue eval severity-enum.cue\nseverity: 3 errors in empty disjunction:\nseverity: conflicting values \"high\" and \"unknown\":\n    ./severity-enum.cue:1:11\n    ./severity-enum.cue:1:48\nseverity: conflicting values \"low\" and \"unknown\":\n    ./severity-enum.cue:1:31\n    ./severity-enum.cue:1:48\nseverity: conflicting values \"medium\" and \"unknown\":\n    ./severity-enum.cue:1:20\n    ./severity-enum.cue:1:48\n```\n\nYou can even have disjunctions of structs (not shown, but it works like you'd expect).\n\nCUE has \"definitions\", and you can use them like you would variable declarations in other languages. They are also for defining struct types. You can apply a struct of type definitions to some concrete value(s) with `&`. Also notice you can say \"a list with type #Whatever\" using `[...#Whatever]`.\n\n```yaml\n// definitions.cue\n\n#DashboardPort: 1337\n\nconfigs: {\n    host: \"localhost\"\n    port: #DashboardPort\n}\n\n#Address: {\n    street: string\n    city: string\n    zip?: int  // ? makes zip optional\n}\n\nsome_address: #Address & {\n  street: \"1 Rocket Rd\"\n  city: \"Hawthorne\"\n}\n\nmore_addresses: [...#Address] & [\n  {street: \"1600 Amphitheatre Parkway\", city: \"Mountain View\", zip: \"94043\"},\n  {street: \"1 Hacker Way\", city: \"Menlo Park\"}\n]\n```\n\n```bash\n% cue export --out yaml definitions.cue\nconfigs:\n  host: localhost\n  port: 1337\nsome_address:\n  street: 1 Rocket Rd\n  city: Hawthorne\nmore_addresses:\n  - street: 1600 Amphitheatre Parkway\n    city: Mountain View\n    zip: \"94043\"\n  - street: 1 Hacker Way\n    city: Menlo Park\n```\n\nCUE supports more complex values and validation:\n\n```yaml\n#Country: {\n  name: =~\"^\\\\p{Lu}\" // Must start with an upper-case letter\n  pop: >800 & <9_000_000_000 // More than 800, fewer than 9 billion\n}\n\nvatican_city: #Country & {\n  name: \"Vatican City\"\n  pop: 825\n}\n```\n\nCUE may save you quite a bit of time with all the sugar it provides on top of mere JSON. Here we're defining, \"modifying\", and validating a nested structure in three lines: (Notice the `[]` syntax used around `string` to signal to the engine that `string` is a constraint, not a string in this case.)\n\n```yaml\n//paths.cue\n\n// path-value pairs\nouter: middle1: inner: 3\nouter: middle2: inner: 7\n\n// collection-constraint pair\nouter: [string]: inner: int\n```\n\n```bash\n% cue export paths.cue\n{\n    \"outer\": {\n        \"middle1\": {\n            \"inner\": 3\n        },\n        \"middle2\": {\n            \"inner\": 7\n        }\n    }\n}\n```\n\nIn the same vein, CUE supports \"templates\", which are a bit like functions of a single argument. Here `Name` is bound to each string key immediately under `container` while the struct underneath *that* is evaluated.\n\n```yaml\n//templates.cue\n\ncontainer: [Name=_]: {\n    name:     Name\n    replicas: uint | *1\n    command:  string\n}\n\ncontainer: sidecar: command: \"envoy\"\n\ncontainer: service: {\n    command:  \"fibonacci\"\n    replicas: 2\n}\n```\n\n```bash\n% cue eval templates.cue\ncontainer: {\n    sidecar: {\n        name:     \"sidecar\"\n        replicas: 1\n        command:  \"envoy\"\n    }\n    service: {\n        name:     \"service\"\n        command:  \"fibonacci\"\n        replicas: 2\n    }\n}\n```\n\nAnd while we're talking about references like that, CUE supports scoped references.\n\n```yaml\n//scopes-and-references.cue\nv: \"top-level v\"\nb: v // a reference\na: {\n    b: v // matches the top-level v\n}\n\nlet V = v\na: {\n    v: \"a's inner v\"\n    c: v // matches the inner v\n    d: V // matches the top-level v now shadowed by a.v\n}\nav: a.v // matches a's v\n```\n\n```bash\n% cue eval --out yaml scopes-and-references.cue\n```\n\n```yaml\nv: top-level v\nb: top-level v\na:\n  b: top-level v\n  v: a's inner v\n  c: a's inner v\n  d: top-level v\nav: a's inner v\n```\n\nI changed the order of the keys in the output for clarity. Order doesn't actually matter, and notice that duplicate keys at a given level are *all* unified.\n\nYou can hide fields be prefixing them with `_` (quote the field if you need a `_` prefix in an emitted field)\n\n```yaml\n//hiddens.cue\n\"_foo\": 2\n_foo:   3\nfoo:    4\n_#foo:  5\n#foo : 6\n```\n\n```bash\n% cue eval hiddens.cue\n\"_foo\": 2\nfoo:    4\n#foo:   6\n\n% cue export hiddens.cue\n{\n    \"_foo\": 2,\n    \"foo\": 4\n}\n```\n\nNotice the difference between `eval` and `export` with respect to definitions. If you want to hide a definition in CUE, you can prefix *that* with `_`.\n\nInterpolation of values and fields:\n\n```yaml\n//interpolation.cue\n\n#expense: 90\n#revenue: 100\nmessage: \"Your profit was $\\( #revenue - #expense)\"\n\ncat: {\n    type: \"Cuddly\"\n    \"is\\(type)\":    true\n}\n```\n\n```bash\n% cue export interpolation.cue\n{\n    \"message\": \"Your profit was $10\",\n    \"cat\": {\n        \"type\": \"Cuddly\",\n        \"isCuddly\": true\n    }\n}\n```\n\nOperators, list comprehensions, conditionals, imports...:\n\n```yaml\n//getting-out-of-hand-now.cue\nimport \"strings\"  // we'll come back to this\n\n// operators are nice\ng: 5 / 3         // CUE can do math\nh: 3 * \"blah\"    // and Python-like string repetition\ni: 3 * [1, 2, 3] // with lists too\nj: 8 < 10        // and supports boolean ops\n\n// conditionals are also nice\nprice: number\n// Require a justification if price is too high\nif price > 100 {\n    justification: string\n}\nprice:         200\njustification: \"impulse buy\"\n\n// list comprehensions are powerful and compact\n#items: [ 1, 2, 3, 4, 5, 6, 7, 8, 9]\ncomp: [ for x in #items if x rem 2 == 0 {x*x}]\n\n// and... well you can do this too\n#a: [ \"Apple\", \"Google\", \"SpaceX\"]\nfor k, v in #a {\n    \"\\( strings.ToLower(v) )\": {\n        pos:     k + 1\n        name:    v\n        nameLen: len(v)\n    }\n}\n```\n\n```bash\n% cue export getting-out-of-hand-now.cue\n```\n\n```json\n{\n    \"g\": 1.66666666666666666666667,\n    \"h\": \"blahblahblah\",\n    \"i\": [1, 2, 3, 1, 2, 3, 1, 2, 3],\n    \"j\": true,\n    \"apple\": {\n        \"pos\": 1,\n        \"name\": \"Apple\",\n        \"nameLen\": 5\n    },\n    \"google\": {\n        \"pos\": 2,\n        \"name\": \"Google\",\n        \"nameLen\": 6\n    },\n    \"price\": 200,\n    \"justification\": \"impulse buy\",\n    \"comp\": [\n        4,\n        16,\n        36,\n        64\n    ],\n    \"spacex\": {\n        \"pos\": 3,\n        \"name\": \"SpaceX\",\n        \"nameLen\": 6\n    }\n}\n```\n\nAt this point it's worth mentioning that CUE may not be Turing-complete, but it *is* powerful enough for you to shoot yourself in the foot, so do try to keep it clear. It's easy to go off the deep end and make your config *harder* to work with if you're not careful. Make use of those comments, at least, and/or...\n\nTo that end, CUE supports packages and modules. CUE files are standalone by default, but if you put a package clause at the top, you're saying that file is unifiable with other files \"in\" the same package.\n\n```yaml\n//a.cue\npackage config\n\nfoo: 100\nbar: int\n```\n\n```yaml\n//b.cue\npackage config\n\nbar: 200\n```\n\nIf you create these two files in a new directory and run `cue eval` (no arguments), it will unify them like you'd expect. It searches the current directory for .cue files, and if they all have the same package, they will be unified.\n\nPackages are more clear in the context of \"modules\". Modules are the *largest* unit of organization. Basically every time you have a project that spans multiple files, you should create a module and name it with something that looks like the domain and path of a URL, e.g., `example.com/something`. When you import anything from this module, even from *within* the module, you must do so using the fully-qualified module path which will be prefixed with this module name.\n\nYou can create a new module like so:\n\n```bash\nmkdir mymodule && cd mymodule\ncue mod init example.com/mymodule\n```\n\nThis creates a `cue.mod/` subdirectory within that `mymodule` directory, and `cue.mod/` contains the following file and subdirectories:\n\n- `module.cue`  (which defines your module name, in this case with `module: \"example.com/mymodule\"`)\n- pkg/\n- gen/\n- usr/\n\nFor a different perspective on this and details about what's in there, see [cuelang.org/docs/concepts/packages/](https://cuelang.org/docs/concepts/packages/). For my purposes here, I'll say you don't need to think about the contents of this directory *at all*, except that your module name will be the prefix for all imports within your module.\n\nWhere will your module file hierarchy go? All files and directories for your module are rooted in `mymodule/`, the directory that also contains `cue.mod/`. If you want to import a package, you'll prefix it with `example.com/mymodule`, followed by a relative path rooted in `mymodule/`.\n\nTo make it concrete, consider the following:\n\n```\nmymodule\n├── config\n│   ├── a.cue\n│   └── b.cue\n├── cue.mod\n│   ├── module.cue\n│   ├── pkg\n│   └── usr\n└── main.cue\n```\n\n`cue.mod/` and the files underneath it were created by `cue mod init example.com/mymodule`. I then created the `config/` subdirectory with `a.cue` and `b.cue` inside. Then I created `main.cue` to act as my top-level file to rule them all.\n\nRunning `eval` (no arguments) checks to see if there's only one package in all .cue files in the current directory, and if so, it unifies them and outputs the result. In this case, there's only main.cue with package `main` (nothing special about \"main\" there, it just seemed appropriate), so that's the one.\n\n```bash\n% cue eval\nconfiguredBar: 200\n```\n\nThe contents of `main.cue` is:\n\n```yaml\n//main.cue\n\npackage main\nimport \"example.com/mymodule/config\"\n\nconfiguredBar: config.bar\n```\n\n`config/a.cue` and `config/b.cue` are files from earlier, except now they've both got `package config` at the top:\n\n```yaml\n//a.cue\npackage config\n\nfoo: 100\nbar: int\n```\n\n```yaml\n//b.cue\npackage config\n\nbar: 200\n```\n\nSo there you go. If you want to verify that it's actually unifying both files under `config/`, you can change `bar: int` to `bar: string` in `a.cue` and re-run `cue eval` to get a nice type error:\n\n```\ncue eval                                                                     2022-01-06 17:51:24\nconfiguredBar: conflicting values string and 200 (mismatched types string and int):\n    ./config/a.cue:4:6\n    ./config/b.cue:3:6\n    ./main.cue:5:16\n```\n\nThat's it for now. I understand there are more package management features coming in the future and the design decisions around `cue.mod` are looking ahead to that.\n\nFinally, CUE has built-in modules with powerful functionality. We saw one of these earlier, when we imported \"strings\" and used `strings.ToLower`. Imports without fully-qualified module names are assumed to be built-ins. The full list and documentation for each is here: [pkg.go.dev/cuelang.org/go/pkg](https://pkg.go.dev/cuelang.org/go/pkg)\n\nThis has been a condensation of the official docs and tutorials, so go give the source material some love: [cuelang.org/docs/tutorials/](https://cuelang.org/docs/tutorials/)\n"
        },
        {
          "name": "cypher.md",
          "type": "blob",
          "size": 5.53515625,
          "content": "---\nname: Cypher\nfilename: LearnCypher.cql\ncontributors:\n    - [\"Théo Gauchoux\", \"https://github.com/TheoGauchoux\"]\n---\n\nCypher is Neo4j's query language for easily manipulating graphs.\nIt reuses syntax from SQL and mixes it with kind of an ASCII-art to represent graphs.\nThis tutorial assumes that you already know graph concepts like nodes and relationships.\n\n## Nodes represent a record in a graph\n\n`()` is an empty *node*, to indicate that there is a *node*, but it's not relevant for the query.\n\n`(n)` is a *node* referred by the variable `n`, reusable in the query. It begins with lowercase and uses camelCase.\n\n`(p:Person)` - you can add a *label* to your node, here `Person`. It's like a type/class/category. It begins with uppercase and uses camelCase.\n\n`(p:Person:Manager)` - a node can have many *labels*.\n\n`(p:Person {name : 'Théo Gauchoux', age : 22})` - a node can have some *properties*, here `name` and `age`. It begins with lowercase and uses camelCase.\n\nThe types allowed in properties:\n\n- Numeric\n- Boolean\n- String\n- List of previous primitive types\n\n*Warning: there's no datetime properties in Cypher! You can use a String with a specific pattern or a Numeric from a specific date.*\n\n`p.name` - you can access a property with the dot style.\n\n## Relationships (or Edges) connect two nodes\n\n`[:KNOWS]` is a *relationship* with the *label* `KNOWS`. It's a *label* as the node's label. It uses UPPER\\_SNAKE\\_CASE.\n\n`[k:KNOWS]` - the same *relationship*, referred by the variable `k`, reusable in the query, but it's not necessary.\n\n`[k:KNOWS {since:2017}]` - the same *relationship*, with *properties* (like *node*), here `since`.\n\n`[k:KNOWS*..4]` is structural information to use in a *path* (seen later). Here, `\\*..4` says \"Match the pattern, with the relationship `k` which can be repeated between 1 and 4 times.\n\n## Paths - the way to mix nodes and relationships.\n\n`(a:Person)-[:KNOWS]-(b:Person)` - a path describing that `a` and `b` know each other.\n\n`(a:Person)-[:MANAGES]->(b:Person)` - a path can be directed. This path describes that `a` is the manager of `b`.\n\n`(a:Person)-[:KNOWS]-(b:Person)-[:KNOWS]-(c:Person)` - you can chain multiple relationships. This path describes the friend of a friend.\n\n`(a:Person)-[:MANAGES]->(b:Person)-[:MANAGES]->(c:Person)` - a chain can also be directed. This path describes that `a` is the boss of `b` and the big boss of `c`.\n\nCommonly used patterns (from Neo4j documentation):\n\n```cypher\n// Friend-of-a-friend\n(user)-[:KNOWS]-(friend)-[:KNOWS]-(foaf)\n\n// Shortest path\npath = shortestPath( (user)-[:KNOWS*..5]-(other) )\n\n// Collaborative filtering\n(user)-[:PURCHASED]->(product)<-[:PURCHASED]-()-[:PURCHASED]->(otherProduct)\n\n// Tree navigation\n(root)<-[:PARENT*]-(leaf:Category)-[:ITEM]->(data:Product)\n```\n\n## Create queries\n\nCreate a new node\n\n```cypher\nCREATE (a:Person {name:\"Théo Gauchoux\"})\nRETURN a\n```\n\n*`RETURN` allows to have a result after the query. It can be multiple, as `RETURN a, b`.*\n\nCreate a new relationship (with 2 new nodes)\n\n```cypher\nCREATE (a:Person)-[k:KNOWS]-(b:Person)\nRETURN a,k,b\n```\n\n## Match queries\n\nMatch all nodes\n\n```cypher\nMATCH (n)\nRETURN n\n```\n\nMatch nodes by label\n\n```cypher\nMATCH (a:Person)\nRETURN a\n```\n\nMatch nodes by label and property\n\n```cypher\nMATCH (a:Person {name:\"Théo Gauchoux\"})\nRETURN a\n```\n\nMatch nodes according to relationships (undirected)\n\n```cypher\nMATCH (a)-[:KNOWS]-(b)\nRETURN a,b\n```\n\nMatch nodes according to relationships (directed)\n\n```cypher\nMATCH (a)-[:MANAGES]->(b)\nRETURN a,b\n```\n\nMatch nodes with a `WHERE` clause\n\n```cypher\nMATCH (p:Person {name:\"Théo Gauchoux\"})-[s:LIVES_IN]->(city:City)\nWHERE s.since = 2015\nRETURN p,state\n```\n\nYou can use `MATCH WHERE` clause with `CREATE` clause\n\n```cypher\nMATCH (a), (b)\nWHERE a.name = \"Jacquie\" AND b.name = \"Michel\"\nCREATE (a)-[:KNOWS]-(b)\n```\n\n## Update queries\n\nUpdate a specific property of a node\n\n```cypher\nMATCH (p:Person)\nWHERE p.name = \"Théo Gauchoux\"\nSET p.age = 23\n```\n\nReplace all properties of a node\n\n```cypher\nMATCH (p:Person)\nWHERE p.name = \"Théo Gauchoux\"\nSET p = {name: \"Michel\", age: 23}\n```\n\nAdd new property to a node\n\n```cypher\nMATCH (p:Person)\nWHERE p.name = \"Théo Gauchoux\"\nSET p += {studies: \"IT Engineering\"}\n```\n\nAdd a label to a node\n\n```cypher\nMATCH (p:Person)\nWHERE p.name = \"Théo Gauchoux\"\nSET p:Internship\n```\n\n## Delete queries\n\nDelete a specific node (linked relationships must be deleted before)\n\n```cypher\nMATCH (p:Person)-[relationship]-()\nWHERE p.name = \"Théo Gauchoux\"\nDELETE relationship, p\n```\n\nRemove a property in a specific node\n\n```cypher\nMATCH (p:Person)\nWHERE p.name = \"Théo Gauchoux\"\nREMOVE p.age\n```\n\n*Pay attention to the `REMOVE` keyword, it's not `DELETE`!*\n\nRemove a label from a specific node\n\n```cypher\nMATCH (p:Person)\nWHERE p.name = \"Théo Gauchoux\"\nDELETE p:Person\n```\n\nDelete entire database\n\n```cypher\nMATCH (n)\nOPTIONAL MATCH (n)-[r]-()\nDELETE n, r\n```\n\n*Seriously, it's the `rm -rf /` of Cypher!*\n\n## Other useful clauses\n\n`PROFILE` - before a query, show its execution plan.\n\n`COUNT(e)` - count entities (nodes or relationships) matching `e`.\n\n`LIMIT x` - limit the result to the first `x` results.\n\n## Special hints\n\n- Cypher only has single-line comments, using double-slashes: `// comment`\n- You can execute a Cypher script stored in a .cql file directly in Neo4j (it's an import). However, you can't have multiple statements in this file (separated by `;`).\n- Use the Neo4j shell to write Cypher, it's really awesome.\n- Cypher will be the standard query language for all graph databases (known as [openCypher](https://opencypher.org/)).\n\nRead more [here](https://neo4j.com/developer/cypher-query-language/).\n\n"
        },
        {
          "name": "d.md",
          "type": "blob",
          "size": 6.8134765625,
          "content": "---\nname: D\nfilename: learnd.d\ncontributors:\n    - [\"Nick Papanastasiou\", \"www.nickpapanastasiou.github.io\"]\n---\n\n```d\n// You know what's coming...\nmodule hello;\n\nimport std.stdio;\n\n// args is optional\nvoid main(string[] args) {\n    writeln(\"Hello, World!\");\n}\n```\n\nIf you're like me and spend way too much time on the internet, odds are you've heard\nabout [D](http://dlang.org/). The D programming language is a modern, general-purpose,\nmulti-paradigm language with support for everything from low-level features to\nexpressive high-level abstractions.\n\nD is actively developed by a large group of super-smart people and is spearheaded by\n[Walter Bright](https://en.wikipedia.org/wiki/Walter_Bright) and\n[Andrei Alexandrescu](https://en.wikipedia.org/wiki/Andrei_Alexandrescu).\nWith all that out of the way, let's look at some examples!\n\n```d\nimport std.stdio;\n\nvoid main() {\n\n    // Conditionals and loops work as expected.\n    for(int i = 0; i < 10000; i++) {\n        writeln(i);\n    }\n\n    // 'auto' can be used for inferring types.\n    auto n = 1;\n\n    // Numeric literals can use '_' as a digit separator for clarity.\n    while(n < 10_000) {\n        n += n;\n    }\n\n    do {\n        n -= (n / 2);\n    } while(n > 0);\n\n    // For and while are nice, but in D-land we prefer 'foreach' loops.\n    // The '..' creates a continuous range, including the first value\n    // but excluding the last.\n    foreach(n; 1..1_000_000) {\n        if(n % 2 == 0)\n            writeln(n);\n    }\n\n    // There's also 'foreach_reverse' when you want to loop backwards.\n    foreach_reverse(n; 1..int.max) {\n        if(n % 2 == 1) {\n            writeln(n);\n        } else {\n            writeln(\"No!\");\n        }\n    }\n}\n```\n\nWe can define new types with `struct`, `class`, `union`, and `enum`. Structs and unions\nare passed to functions by value (i.e. copied) and classes are passed by reference. Furthermore,\nwe can use templates to parameterize all of these on both types and values!\n\n```d\n// Here, 'T' is a type parameter. Think '<T>' from C++/C#/Java.\nstruct LinkedList(T) {\n    T data = null;\n\n    // Use '!' to instantiate a parameterized type. Again, think '<T>'.\n    LinkedList!(T)* next;\n}\n\nclass BinTree(T) {\n    T data = null;\n\n    // If there is only one template parameter, we can omit the parentheses.\n    BinTree!T left;\n    BinTree!T right;\n}\n\nenum Day {\n    Sunday,\n    Monday,\n    Tuesday,\n    Wednesday,\n    Thursday,\n    Friday,\n    Saturday,\n}\n\n// Use alias to create abbreviations for types.\nalias IntList = LinkedList!int;\nalias NumTree = BinTree!double;\n\n// We can create function templates as well!\nT max(T)(T a, T b) {\n    if(a < b)\n        return b;\n\n    return a;\n}\n\n// Use the ref keyword to ensure pass by reference. That is, even if 'a' and 'b'\n// are value types, they will always be passed by reference to 'swap()'.\nvoid swap(T)(ref T a, ref T b) {\n    auto temp = a;\n\n    a = b;\n    b = temp;\n}\n\n// With templates, we can also parameterize on values, not just types.\nclass Matrix(uint m, uint n, T = int) {\n    T[m] rows;\n    T[n] columns;\n}\n\nauto mat = new Matrix!(3, 3); // We've defaulted type 'T' to 'int'.\n```\n\nSpeaking of classes, let's talk about properties for a second. A property\nis roughly a function that may act like an lvalue, so we can\nhave the syntax of POD structures (`structure.x = 7`) with the semantics of\ngetter and setter methods (`object.setX(7)`)!\n\n```d\n// Consider a class parameterized on types 'T' & 'U'.\nclass MyClass(T, U) {\n    T _data;\n    U _other;\n}\n\n// And \"getter\" and \"setter\" methods like so:\nclass MyClass(T, U) {\n    T _data;\n    U _other;\n\n    // Constructors are always named 'this'.\n    this(T t, U u) {\n        // This will call the setter methods below.\n        data = t;\n        other = u;\n    }\n\n    // getters\n    @property T data() {\n        return _data;\n    }\n\n    @property U other() {\n        return _other;\n    }\n\n    // setters\n    @property void data(T t) {\n        _data = t;\n    }\n\n    @property void other(U u) {\n        _other = u;\n    }\n}\n\n// And we use them in this manner:\nvoid main() {\n    auto mc = new MyClass!(int, string)(7, \"seven\");\n\n    // Import the 'stdio' module from the standard library for writing to\n    // console (imports can be local to a scope).\n    import std.stdio;\n\n    // Call the getters to fetch the values.\n    writefln(\"Earlier: data = %d, str = %s\", mc.data, mc.other);\n\n    // Call the setters to assign new values.\n    mc.data = 8;\n    mc.other = \"eight\";\n\n    // Call the getters again to fetch the new values.\n    writefln(\"Later: data = %d, str = %s\", mc.data, mc.other);\n}\n```\n\nWith properties, we can add any amount of logic to\nour getter and setter methods, and keep the clean syntax of\naccessing members directly!\n\nOther object-oriented goodies at our disposal\ninclude interfaces, abstract classes,\nand overriding methods. D does inheritance just like Java:\nExtend one class, implement as many interfaces as you please.\n\nWe've seen D's OOP facilities, but let's switch gears. D offers\nfunctional programming with first-class functions, `pure`\nfunctions, and immutable data. In addition, all of your favorite\nfunctional algorithms (map, filter, reduce and friends) can be\nfound in the wonderful `std.algorithm` module!\n\n```d\nimport std.algorithm : map, filter, reduce;\nimport std.range : iota; // builds an end-exclusive range\nimport std.stdio;\n\nvoid main() {\n    // We want to print the sum of a list of squares of even ints\n    // from 1 to 100. Easy!\n\n    // Just pass lambda expressions as template parameters!\n    // You can pass any function you like, but lambdas are convenient here.\n    auto num = iota(1, 101).filter!(x => x % 2 == 0)\n                           .map!(y => y ^^ 2)\n                           .reduce!((a, b) => a + b);\n\n    writeln(num);\n}\n```\n\nNotice how we got to build a nice Haskellian pipeline to compute num?\nThat's thanks to a D innovation know as Uniform Function Call Syntax (UFCS).\nWith UFCS, we can choose whether to write a function call as a method\nor free function call! Walter wrote a nice article on this\n[here.](http://www.drdobbs.com/cpp/uniform-function-call-syntax/232700394)\nIn short, you can call functions whose first parameter\nis of some type A on any expression of type A as a method.\n\nI like parallelism. Anyone else like parallelism? Sure you do. Let's do some!\n\n```d\n// Let's say we want to populate a large array with the square root of all\n// consecutive integers starting from 1 (up until the size of the array), and we\n// want to do this concurrently taking advantage of as many cores as we have\n// available.\n\nimport std.stdio;\nimport std.parallelism : parallel;\nimport std.math : sqrt;\n\nvoid main() {\n    // Create your large array\n    auto arr = new double[1_000_000];\n\n    // Use an index, access every array element by reference (because we're\n    // going to change each element) and just call parallel on the array!\n    foreach(i, ref elem; parallel(arr)) {\n        elem = sqrt(i + 1.0);\n    }\n}\n```\n"
        },
        {
          "name": "dart.md",
          "type": "blob",
          "size": 21.7802734375,
          "content": "---\nname: Dart\nfilename: learndart.dart\ncontributors:\n  - [\"Joao Pedrosa\", \"https://github.com/jpedrosa/\"]\n  - [\"Vince Ramces Oliveros\", \"https://github.com/ram231\"]\n---\n\n**Dart** is a single threaded, general purpose programming language.\nIt borrows a lot from other mainstream languages.\nIt supports Streams, Futures(known as Promises in JavaScript), Generics, First-class functions(closures) and static type checking.\nDart can run in any platform such as Web, CLI, Desktop, Mobile and IoT devices.\n\nDart's most controversial feature is its ~~Optional Typing~~ Static Type safety and [Sound Type checks](https://dart.dev/guides/language/sound-dart).\n\n```dart\nimport \"dart:collection\";\nimport \"dart:math\" as math;\n\n/// Welcome to Learn Dart in 15 minutes. http://dart.dev/\n/// This is an executable tutorial. You can run it with Dart or on\n/// the Try Dart! site if you copy/paste it there. http://dartpad.dev/\n/// You can also run Flutter in DartPad by click the `< > New Pad ` and choose Flutter\n\n\n/// In Dart, Everything is an Object.\n/// Every declaration of an object is an instance of Null and\n/// Null is also an object.\n\n\n/// 3 Types of comments in dart\n// Single line comment\n/**\n* Multi-line comment\n* Can comment several lines\n*/\n/// Code doc comment\n/// It uses markdown syntax to generate code docs when making an API.\n/// Code doc comment is the recommended choice when documenting your APIs, classes and methods.\n\n/// 4 types of variable declaration.\n/// Constants are variables that are immutable cannot be change or altered.\n/// `const` in dart should practice SCREAMING_SNAKE_CASE name declaration.\nconst CONSTANT_VALUE = \"I CANNOT CHANGE\";\nCONSTANT_VALUE = \"DID I?\"; //Error\n/// Final is another variable declaration that cannot be change once it has been instantiated. Commonly used in classes and functions\n/// `final` can be declared in pascalCase.\nfinal finalValue = \"value cannot be changed once instantiated\";\nfinalValue = \"Seems not\"; //Error\n\n/// `var` is another variable declaration that is mutable and can change its value. Dart will infer types and will not change its data type\nvar mutableValue = \"Variable string\";\nmutableValue = \"this is valid\";\nmutableValue = false; // Error.\n\n/// `dynamic` is another variable declaration in which the type is not evaluated by the dart static type checking.\n/// It can change its value and data type.\n/// Some dartisans uses dynamic cautiously as it cannot keep track of its data type. so use it at your own risk\ndynamic dynamicValue = \"I'm a string\";\ndynamicValue = false; // false\n\n\n/// Functions can be declared in a global space\n/// Function declaration and method declaration look the same. Function\n/// declarations can be nested. The declaration takes the form of\n/// name() {} or name() => singleLineExpression;\n/// The fat arrow function declaration can be an implicit or\n/// explicit return for the result of the expression.\n/// Dart will execute a function called `main()` anywhere in the dart project.\n///\nexample1() {\n  nested1() {\n    nested2() => print(\"Example1 nested 1 nested 2\");\n    nested2();\n  }\n\n  nested1();\n}\n\n/// Anonymous functions don't include a name\nexample2() {\n  //// Explicit return type.\n  nested1(void Function() fn) {\n    fn();\n  }\n  nested1(() => print(\"Example2 nested 1\"));\n}\n\n/// When a function parameter is declared, the declaration can include the\n/// number of parameters the function takes by explicitly specifying the names of the\n/// parameters it takes.\nexample3() {\n  planA(fn(String informSomething)) {\n    fn(\"Example3 plan A\");\n  }\n  planB(fn) {\n    // Or don't declare number of parameters.\n    fn(\"Example3 plan B\");\n  }\n\n  planA((s) => print(s));\n  planB((s) => print(s));\n}\n\n/// Functions have closure access to outer variables.\n/// Dart will infer types when the variable has a value of something.\n/// In this example dart knows that this variable is a String.\nvar example4Something = \"Example4 nested 1\";\nexample4() {\n  nested1(fn(informSomething)) {\n    fn(example4Something);\n  }\n\n  nested1((s) => print(s));\n}\n\n/// Class declaration with a sayIt method, which also has closure access\n/// to the outer variable as though it were a function as seen before.\nvar example5method = \"Example5 sayIt\";\n\nclass Example5Class {\n  sayIt() {\n    print(example5method);\n  }\n}\n\nexample5() {\n  /// Create an anonymous instance of the Example5Class and call the sayIt\n  /// method on it.\n  /// the `new` keyword is optional in Dart.\n  new Example5Class().sayIt();\n}\n\n/// Class declaration takes the form of class name { [classBody] }.\n/// Where classBody can include instance methods and variables, but also\n/// class methods and variables.\nclass Example6Class {\n  var instanceVariable = \"Example6 instance variable\";\n  sayIt() {\n    print(instanceVariable);\n  }\n}\n\nexample6() {\n   Example6Class().sayIt();\n}\n\n/// Class methods and variables are declared with \"static\" terms.\nclass Example7Class {\n  static var classVariable = \"Example7 class variable\";\n  static sayItFromClass() {\n    print(classVariable);\n  }\n\n  sayItFromInstance() {\n    print(classVariable);\n  }\n}\n\nexample7() {\n  Example7Class.sayItFromClass();\n  new Example7Class().sayItFromInstance();\n}\n\n/// Dart supports Generics.\n/// Generics refers to the technique of writing the code for a class\n/// without specifying the data type(s) that the class works on.\n/// Source: https://stackoverflow.com/questions/4560890/what-are-generics-in-c\n\n/// Type `T` refers to any type that has been instantiated\n/// you can call whatever you want\n/// Programmers uses the convention in the following\n/// T - Type(used for class and primitype types)\n/// E - Element(used for List, Set, or Iterable)\n/// K,V - Key Value(used for Map)\nclass GenericExample<T>{\n  void printType(){\n    print(\"$T\")\n  }\n  // methods can also have generics\n  genericMethod<M>(){\n    print(\"class:$T, method: $M\");\n  }\n}\n\n\n/// List are similar to arrays but list is a child of Iterable<E>\n/// Therefore Maps, List, LinkedList are all child of Iterable<E> to be able to loop using the keyword `for`\n/// Important things to remember:\n/// () - Iterable<E>\n/// [] - List<E>\n/// {} - Map<K,V>\n\n\n/// List are great, but there's a restriction for what List can be\n/// outside of function/method bodies. List on the outer scope of class\n/// or outside of class have to be constant. Strings and numbers are constant\n/// by default. But arrays and maps are not. They can be made constant by\n/// declaring them \"const\". Kind of similar to JavaScript's Object.freeze()\nconst example8List = [\"Example8 const array\"];\nconst  example8Map = {\"someKey\": \"Example8 const map\"};\n/// Declare List or Maps as Objects.\n List<String> explicitList = new List<String>();\n Map<String,dynamic> explicitMaps = new Map<String,dynamic>();\n\n explicitList.add(\"SomeArray\");\nexample8() {\n  print(example8Map[\"someKey\"]);\n  print(explicitList[0]);\n}\n\n/// Assigning a list from one variable to another will not be the same result.\n/// Because dart is pass-reference-by-value.\n/// So when you assign an existing list to a new variable.\n/// Instead of List, it becomes an Iterable\nvar iterableExplicitList = explicitList;\nprint(iterableExplicitList) // (\"SomeArray\"); \"[]\" becomes \"()\"\nvar newExplicitLists = explicitList.toList() // Converts Iterable<E> to List<E>\n\n/// Loops in Dart take the form of standard for () {} or while () {} loops,\n/// slightly more modern for (.. in ..) {}, or functional callbacks with many\n/// supported features, starting with forEach,map and where.\nvar example9Array = const [\"a\", \"b\"];\nexample9() {\n  for (int i = 0; i < example9Array.length; i++) {\n    print(\"Example9 for loop '${example9Array[i]}'\");\n  }\n  var i = 0;\n  while (i < example9Array.length) {\n    print(\"Example9 while loop '${example9Array[i]}'\");\n    i++;\n  }\n  for (final e in example9Array) {\n    print(\"Example9 for-in loop '${e}'\");\n  }\n\n  example9Array.forEach((e) => print(\"Example9 forEach loop '${e}'\"));\n\n}\n\n/// To loop over the characters of a string or to extract a substring.\nvar example10String = \"ab\";\nexample10() {\n  for (var i = 0; i < example10String.length; i++) {\n    print(\"Example10 String character loop '${example10String[i]}'\");\n  }\n  for (var i = 0; i < example10String.length; i++) {\n    print(\"Example10 substring loop '${example10String.substring(i, i + 1)}'\");\n  }\n}\n\n/// `int`, `double`  and `num` are the three supported number formats.\n/// `num` can be either `int` or `double`.\n/// `int` and `double` are children of type `num`\nexample11() {\n  var i = 1 + 320, d = 3.2 + 0.01;\n  final num myFinalNumDouble = 2.2;\n  final num myFinalNumInt = 2;\n  final int myFinalInt = 1;\n  final double myFinalDouble = 0.1;\n  num myNumDouble = 2.2;\n  num myNumInt = 2;\n  int myInt = 1;\n  double myDouble = 0; // Dart will add decimal prefix, becomes 0.0;\n  myNumDouble = myFinalInt; // valid\n  myNumDouble = myFinalDouble; // valid\n  myNumDouble = myFinalNumInt; // valid\n\n  myNumInt = myFinalInt; // valid\n  myNumInt = myFinalDouble; // valid\n  myNumInt = myFinalNumDouble; // valid\n\n  myInt = myNumDouble; // error\n  myInt = myFinalDouble; // error\n  myInt = myFinalNumInt; // valid\n\n  myDouble = myFinalInt; // error\n  myDouble = myFinalNumInt; // error\n  myDouble = myFinalNumDouble; // valid\n\n  print(\"Example11 int ${i}\");\n  print(\"Example11 double ${d}\");\n\n}\n\n/// DateTime provides date/time arithmetic.\nexample12() {\n  var now = new DateTime.now();\n  print(\"Example12 now '${now}'\");\n  now = now.add(new Duration(days: 1));\n  print(\"Example12 tomorrow '${now}'\");\n}\n\n/// Regular expressions are supported.\nexample13() {\n  var s1 = \"some string\", s2 = \"some\", re = new RegExp(\"^s.+?g\\$\");\n  match(s) {\n    if (re.hasMatch(s)) {\n      print(\"Example13 regexp matches '${s}'\");\n    } else {\n      print(\"Example13 regexp doesn't match '${s}'\");\n    }\n  }\n\n  match(s1);\n  match(s2);\n}\n\n/// Boolean expressions support implicit conversions and dynamic type\nexample14() {\n  var a = true;\n  if (a) {\n    print(\"true, a is $a\");\n  }\n  a = false;\n  if (a) {\n    print(\"true, a is $a\"); \n  } else {\n    print(\"false, a is $a\"); /// runs here\n  }\n\n  /// dynamic typed null can not be convert to bool\n  var b; /// b is dynamic type\n  b = \"abc\";\n  try {\n    if (b) {\n      print(\"true, b is $b\");\n    } else {\n      print(\"false, b is $b\");\n    }\n  } catch (e) {\n    print(\"error, b is $b\"); /// this could be run but got error\n  }\n  b = null; \n  if (b) { /// Failed assertion: boolean expression must not be null)\n    print(\"true, b is $b\");\n  } else {\n    print(\"false, b is $b\"); \n  }\n\n  /// statically typed null can not be convert to bool\n  var c = \"abc\";\n  c = null;\n  /// compilation failed\n  /// if (c) {\n  ///   print(\"true, c is $c\");\n  /// } else {\n  ///   print(\"false, c is $c\");\n  /// }\n}\n\n/// try/catch/finally and throw are used for exception handling.\n/// throw takes any object as parameter;\nexample15() {\n  try {\n    try {\n      throw \"Some unexpected error.\";\n    } catch (e) {\n      print(\"Example15 an exception: '${e}'\");\n      throw e; /// Re-throw\n    }\n  } catch (e) {\n    print(\"Example15 catch exception being re-thrown: '${e}'\");\n  } finally {\n    print(\"Example15 Still run finally\");\n  }\n}\n\n/// To be efficient when creating a long string dynamically, use\n/// StringBuffer. Or you could join a string array.\nexample16() {\n  var sb = new StringBuffer(), a = [\"a\", \"b\", \"c\", \"d\"], e;\n  for (e in a) {\n    sb.write(e);\n  }\n  print(\"Example16 dynamic string created with \"\n      \"StringBuffer '${sb.toString()}'\");\n  print(\"Example16 join string array '${a.join()}'\");\n}\n\n/// Strings can be concatenated by just having string List next to\n/// one another with no further operator needed.\n\nexample17() {\n  print(\"Example17 \"\n      \"concatenate \"\n      \"strings \"\n      \"just like that\");\n}\n\n/// Strings have single-quote or double-quote for delimiters with no\n/// actual difference between the two. The given flexibility can be good\n/// to avoid the need to escape content that matches the delimiter being\n/// used. For example, double-quotes of HTML attributes if the string\n/// contains HTML content.\nexample18() {\n  print('Example18 <a href=\"etc\">'\n      \"Don't can't I'm Etc\"\n      '</a>');\n}\n\n/// Strings with triple single-quotes or triple double-quotes span\n/// multiple lines and include line delimiters.\nexample19() {\n  print('''Example19 <a href=\"etc\">\nExample19 Don't can't I'm Etc\nExample19 </a>''');\n}\n\n/// Strings have the nice interpolation feature with the $ character.\n/// With $ { [expression] }, the return of the expression is interpolated.\n/// $ followed by a variable name interpolates the content of that variable.\n/// $ can be escaped like so \\$ to just add it to the string instead.\nexample20() {\n  var s1 = \"'\\${s}'\", s2 = \"'\\$s'\";\n  print(\"Example20 \\$ interpolation ${s1} or $s2 works.\");\n}\n\n/// Optional types allow for the annotation of APIs and come to the aid of\n/// IDEs so the IDEs can better refactor, auto-complete and check for\n/// errors. So far we haven't declared any types and the programs have\n/// worked just fine. In fact, types are disregarded during runtime.\n/// Types can even be wrong and the program will still be given the\n/// benefit of the doubt and be run as though the types didn't matter.\n/// There's a runtime parameter that checks for type errors which is\n/// the checked mode, which is said to be useful during development time,\n/// but which is also slower because of the extra checking and is thus\n/// avoided during deployment runtime.\nclass Example21 {\n  List<String> _names;\n  Example21() {\n    _names = [\"a\", \"b\"];\n  }\n  List<String> get names => _names;\n  set names(List<String> list) {\n    _names = list;\n  }\n\n  int get length => _names.length;\n  void add(String name) {\n    _names.add(name);\n  }\n}\n\nvoid example21() {\n  Example21 o = new Example21();\n  o.add(\"c\");\n  print(\"Example21 names '${o.names}' and length '${o.length}'\");\n  o.names = [\"d\", \"e\"];\n  print(\"Example21 names '${o.names}' and length '${o.length}'\");\n}\n\n/// Class inheritance takes the form of class name extends AnotherClassName {}.\nclass Example22A {\n  var _name = \"Some Name!\";\n  get name => _name;\n}\n\nclass Example22B extends Example22A {}\n\nexample22() {\n  var o = new Example22B();\n  print(\"Example22 class inheritance '${o.name}'\");\n}\n\n/// Class mixin is also available, and takes the form of\n/// class name extends SomeClass with AnotherClassName {}.\n/// It's necessary to extend some class to be able to mixin another one.\n/// The template class of mixin cannot at the moment have a constructor.\n/// Mixin is mostly used to share methods with distant classes, so the\n/// single inheritance doesn't get in the way of reusable code.\n/// Mixins follow the \"with\" statement during the class declaration.\nclass Example23A {}\n\nclass Example23Utils {\n  addTwo(n1, n2) {\n    return n1 + n2;\n  }\n}\n\nclass Example23B extends Example23A with Example23Utils {\n  addThree(n1, n2, n3) {\n    return addTwo(n1, n2) + n3;\n  }\n}\n\nexample23() {\n  var o = new Example23B(), r1 = o.addThree(1, 2, 3), r2 = o.addTwo(1, 2);\n  print(\"Example23 addThree(1, 2, 3) results in '${r1}'\");\n  print(\"Example23 addTwo(1, 2) results in '${r2}'\");\n}\n\n/// The Class constructor method uses the same name of the class and\n/// takes the form of SomeClass() : super() {}, where the \": super()\"\n/// part is optional and it's used to delegate constant parameters to the\n/// super-parent's constructor.\nclass Example24A {\n  var _value;\n  Example24A({value: \"someValue\"}) {\n    _value = value;\n  }\n  get value => _value;\n}\n\nclass Example24B extends Example24A {\n  Example24B({value: \"someOtherValue\"}) : super(value: value);\n}\n\nexample24() {\n  var o1 = new Example24B(), o2 = new Example24B(value: \"evenMore\");\n  print(\"Example24 calling super during constructor '${o1.value}'\");\n  print(\"Example24 calling super during constructor '${o2.value}'\");\n}\n\n/// There's a shortcut to set constructor parameters in case of simpler classes.\n/// Just use the this.parameterName prefix and it will set the parameter on\n/// an instance variable of same name.\nclass Example25 {\n  var value, anotherValue;\n  Example25({this.value, this.anotherValue});\n}\n\nexample25() {\n  var o = new Example25(value: \"a\", anotherValue: \"b\");\n  print(\"Example25 shortcut for constructor '${o.value}' and \"\n      \"'${o.anotherValue}'\");\n}\n\n/// Named parameters are available when declared between {}.\n/// Parameter order can be optional when declared between {}.\n/// Parameters can be made optional when declared between [].\nexample26() {\n  var _name, _surname, _email;\n  setConfig1({name, surname}) {\n    _name = name;\n    _surname = surname;\n  }\n\n  setConfig2(name, [surname, email]) {\n    _name = name;\n    _surname = surname;\n    _email = email;\n  }\n\n  setConfig1(surname: \"Doe\", name: \"John\");\n  print(\"Example26 name '${_name}', surname '${_surname}', \"\n      \"email '${_email}'\");\n  setConfig2(\"Mary\", \"Jane\");\n  print(\"Example26 name '${_name}', surname '${_surname}', \"\n      \"email '${_email}'\");\n}\n\n/// Variables declared with final can only be set once.\n/// In case of classes, final instance variables can be set via constant\n/// constructor parameter.\nclass Example27 {\n  final color1, color2;\n  /// A little flexibility to set final instance variables with syntax\n  /// that follows the :\n  Example27({this.color1, color2}) : color2 = color2;\n}\n\nexample27() {\n  final color = \"orange\", o = new Example27(color1: \"lilac\", color2: \"white\");\n  print(\"Example27 color is '${color}'\");\n  print(\"Example27 color is '${o.color1}' and '${o.color2}'\");\n}\n\n/// To import a library, use import \"libraryPath\" or if it's a core library,\n/// import \"dart:libraryName\". There's also the \"pub\" package management with\n/// its own convention of import \"package:packageName\".\n/// See import \"dart:collection\"; at the top. Imports must come before\n/// other code declarations. IterableBase comes from dart:collection.\nclass Example28 extends IterableBase {\n  var names;\n  Example28() {\n    names = [\"a\", \"b\"];\n  }\n  get iterator => names.iterator;\n}\n\nexample28() {\n  var o = new Example28();\n  o.forEach((name) => print(\"Example28 '${name}'\"));\n}\n\n/// For control flow we have:\n/// * standard switch with must break statements\n/// * if-else if-else and ternary ..?..:.. operator\n/// * closures and anonymous functions\n/// * break, continue and return statements\nexample29() {\n  var v = true ? 30 : 60;\n  switch (v) {\n    case 30:\n      print(\"Example29 switch statement\");\n      break;\n  }\n  if (v < 30) {\n  } else if (v > 30) {\n  } else {\n    print(\"Example29 if-else statement\");\n  }\n  callItForMe(fn()) {\n    return fn();\n  }\n\n  rand() {\n    v = new DM.Random().nextInt(50);\n    return v;\n  }\n\n  while (true) {\n    print(\"Example29 callItForMe(rand) '${callItForMe(rand)}'\");\n    if (v != 30) {\n      break;\n    } else {\n      continue;\n    }\n    /// Never gets here.\n  }\n}\n\n/// Parse int, convert double to int, or just keep int when dividing numbers\n/// by using the ~/ operation. Let's play a guess game too.\nexample30() {\n  var gn,\n      tooHigh = false,\n      n,\n      n2 = (2.0).toInt(),\n      top = int.parse(\"123\") ~/ n2,\n      bottom = 0;\n  top = top ~/ 6;\n  gn = new DM.Random().nextInt(top + 1); /// +1 because nextInt top is exclusive\n  print(\"Example30 Guess a number between 0 and ${top}\");\n  guessNumber(i) {\n    if (n == gn) {\n      print(\"Example30 Guessed right! The number is ${gn}\");\n    } else {\n      tooHigh = n > gn;\n      print(\"Example30 Number ${n} is too \"\n          \"${tooHigh ? 'high' : 'low'}. Try again\");\n    }\n    return n == gn;\n  }\n\n  n = (top - bottom) ~/ 2;\n  while (!guessNumber(n)) {\n    if (tooHigh) {\n      top = n - 1;\n    } else {\n      bottom = n + 1;\n    }\n    n = bottom + ((top - bottom) ~/ 2);\n  }\n}\n\n/// Optional Positional Parameter:\n/// parameter will be disclosed with square bracket [ ] & square bracketed parameter are optional.\nexample31() {\n    findVolume31(int length, int breath, [int height]) {\n      print('length = $length, breath = $breath, height = $height');\n    }\n\n    findVolume31(10,20,30); //valid\n    findVolume31(10,20); //also valid\n}\n\n/// Optional Named Parameter:\n/// parameter will be disclosed with curly bracket { }\n/// curly bracketed parameter are optional.\n/// have to use parameter name to assign a value which separated with colan :\n/// in curly bracketed parameter order does not matter\n/// these type parameter help us to avoid confusion while passing value for a function which has many parameter.\nexample32() {\n    findVolume32(int length, int breath, {int height}) {\n    print('length = $length, breath = $breath, height = $height');\n    }\n\n    findVolume32(10,20,height:30);//valid & we can see the parameter name is mentioned here.\n    findVolume32(10,20);//also valid\n}\n\n/// Optional Default Parameter:\n/// same like optional named parameter in addition we can assign default value for this parameter.\n/// which means no value is passed this default value will be taken.\nexample33() {\n    findVolume33(int length, int breath, {int height=10}) {\n     print('length = $length, breath = $breath, height = $height');\n    }\n\n    findVolume33(10,20,height:30);//valid\n    findVolume33(10,20);//valid\n}\n\n/// Dart has also added feature such as Null aware operators\nvar isBool = true;\nvar hasString = isBool ?? \"default String\";\n\n/// Programs have only one entry point in the main function.\n/// Nothing is expected to be executed on the outer scope before a program\n/// starts running with what's in its main function.\n/// This helps with faster loading and even lazily loading of just what\n/// the program needs to startup with.\nmain() {\n  print(\"Learn Dart in 15 minutes!\");\n  [\n    example1, example2, example3, example4, example5,\n    example6, example7, example8, example9, example10,\n    example11, example12, example13, example14, example15,\n    example16, example17, example18, example19, example20,\n    example21, example22, example23, example24, example25,\n    example26, example27, example28, example29,\n    example30 // Adding this comment stops the dart formatter from putting all items on a new line\n  ].forEach((ef) => ef());\n}\n```\n\n## Further Reading\n\nDart has a comprehensive web-site. It covers API reference, tutorials, articles and more, including a\nuseful DartPad (a cloud-based Dart coding playground).\n[https://dart.dev/](https://dart.dev)\n[https://dartpad.dev/](https://dartpad.dev)\n"
        },
        {
          "name": "de",
          "type": "tree",
          "content": null
        },
        {
          "name": "dhall.md",
          "type": "blob",
          "size": 11.59375,
          "content": "---\nname: Dhall\nfilename: learndhall.dhall\ncontributors:\n    - [\"Gabriel Gonzalez\", \"http://www.haskellforall.com/\"]\n---\n\nDhall is a programmable configuration language that provides a non-repetitive\nalternative to YAML.\n\nYou can think of Dhall as: JSON + functions + types + imports\n\nNote that while Dhall is programmable, Dhall is not Turing-complete.  Many\nof Dhall's features take advantage of this restriction to provide stronger\nsafety guarantees and more powerful tooling.\n\n```haskell\n-- Single-line comment\n\n{- Multi-line comment\n\n   Unicode is fine 🙂\n\n   This file is a valid Dhall expression that evaluates to a large record\n   collecting the results of each step.\n\n   You can view the results by interpreting the file:\n\n       $ dhall --file learndhall.dhall\n\n   {- Comments can be nested -}\n-}\n\nlet greeting = \"Hello, world!\"\n\nlet fruits = \"🍋🍓🍍🍉🍌\"\n\nlet interpolation = \"Enjoy some delicious fruit: ${fruits}\"\n\nlet multilineText {- Inline comments work, too -} =\n        ''\n        Leading whitespace is stripped from multi-line text literals.\n\n        That means you can freely indent or dedent a text literal without\n        changing the result.\n\n            Relative indentation within the literal is still preserved.\n\n        Other than that, the text literal is preserved verbatim, similar to a\n        \"literal\" YAML multiline string.\n        ''\n\nlet bool = True\n\n-- Type annotations on bindings are optional, but helpful, so we'll use them\nlet annotation : Bool = True\n\nlet renderedBool : Text = if bool then \"True\" else \"False\"\n\n-- Natural numbers are non-negative and are unsigned\nlet naturalNumber : Natural = 42\n\n-- Integers may be negative, but require an explicit sign, even if positive\nlet positiveInteger : Integer = +1\n\nlet negativeInteger : Integer = -12\n\nlet pi : Double = 3.14159265359\n\n{- You can use a wider character range for identifiers (such as quotation\n   marks and whitespace) if you quote them using backticks\n-}\nlet `Avogadro's Number` : Double = 6.0221409e+23\n\nlet origin : { x : Double, y : Double } = { x = 0.0, y = 0.0 }\n\nlet somePrimes : List Natural = [ 2, 3, 5, 7, 11 ]\n\n{- A schema is the same thing as a type\n\n   Types begin with an uppercase letter by convention, but this convention is\n   not enforced\n-}\nlet Profile : Type\n        = { person :\n              { name : Text\n              , age  : Natural\n              }\n          , address :\n              { country : Text\n              , state   : Text\n              , city    : Text\n              }\n          }\n\nlet john : Profile =\n        { person =\n            { name = \"John Doe\"\n            , age  = 67\n            }\n        , address =\n            { country = \"United States\"\n            , state   = \"Pennsylvania\"\n            , city    = \"Philadelphia\"\n            }\n        }\n\nlet philadelphia : Text = john.address.city\n\n{- Enum alternatives also begin with an uppercase letter by convention.  This\n   convention is not enforced\n-}\nlet DNA : Type = < Adenine | Cytosine | Guanine | Thymine >\n\nlet dnaSequence : List DNA = [ DNA.Thymine, DNA.Guanine, DNA.Guanine ]\n\nlet compactDNASequence : List DNA =\n        let a = DNA.Adenine\n        let c = DNA.Cytosine\n        let g = DNA.Guanine\n        let t = DNA.Thymine\n        in  [ c, t, t, a, t, c, g, g, c ]\n\n-- You can transform enums by providing a record with one field per alternative\nlet theLetterG : Text =\n            merge\n            { Adenine  = \"A\"\n            , Cytosine = \"C\"\n            , Guanine  = \"G\"\n            , Thymine  = \"T\"\n            }\n            DNA.Guanine\n\nlet presentOptionalValue : Optional Natural = Some 1\n\nlet absentOptionalValue : Optional Natural = None Natural\n\nlet points : List { x : Double, y : Double } =\n        [ { x = 1.1, y = -4.2 }\n        , { x = 4.4, y = -3.0 }\n        , { x = 8.2, y = -5.5 }\n        ]\n\n{- `Natural -> List Natural` is the type of a function whose input type is a\n   `Natural` and whose output type is a `List Natural`\n\n   All functions in Dhall are anonymous functions (a.k.a. \"lambdas\"),\n   which you can optionally give a name\n\n   For example, the following function is equivalent to this Python code:\n\n       lambda n : [ n, n + 1 ]\n\n   ... and this JavaScript code:\n\n       function (n) { return [ n, n + 1 ]; }\n-}\nlet exampleFunction : Natural -> List Natural =\n        \\(n : Natural) -> [ n, n + 1 ]\n\n-- Dhall also supports Unicode syntax, but this tutorial will stick to ASCII\nlet unicodeFunction : Natural → List Natural =\n        λ(n : Natural) → [ n, n + 1 ]\n\n-- You don't need to parenthesize function arguments\nlet exampleFunctionApplication : List Natural =\n        exampleFunction 2\n\nlet functionOfMultipleArguments : Natural -> Natural -> List Natural =\n        \\(x : Natural) -> \\(y : Natural) -> [ x, y ]\n\nlet functionAppliedToMultipleArguments : List Natural =\n        functionOfMultipleArguments 2 3\n\n{- Same as `exampleFunction` except we gave the function's input type a\n   name: \"n\"\n-}\nlet namedArgumentType : forall (n : Natural) -> List Natural =\n        \\(n : Natural) -> [ n, n + 1 ]\n\n{- If you name a function's input type, you can use that name later within the\n   same type\n\n   This lets you write a function that works for more than one type of input\n   (a.k.a. a \"polymorphic\" function)\n-}\nlet duplicate : forall (a : Type) -> a -> List a =\n        \\(a : Type) -> \\(x : a) -> [ x, x ] \n\nlet duplicatedNumber : List Natural =\n        duplicate Natural 2\n\nlet duplicatedBool : List Bool =\n        duplicate Bool False\n\n{- The language also has some built-in polymorphic functions, such as:\n\n       List/head : forall (a : Type) -> List a -> Optional a\n-}\nlet firstPrime : Optional Natural = List/head Natural somePrimes\n\nlet functionOfARecord : { x : Natural, y : Natural } -> List Natural =\n        \\(args : { x : Natural, y : Natural }) -> [ args.x, args.y ]\n\nlet functionAppliedToARecord : List Natural =\n        functionOfARecord { x = 2, y = 5 }\n\n{- All type conversions are explicit\n\n   `Natural/show` is a built-in function of the following type:\n\n       Natural/show : Natural -> Text\n\n   ... that converts `Natural` numbers to their `Text` representation\n-}\nlet typeConversion : Natural -> Text =\n        \\(age : Natural) -> \"I am ${Natural/show age} years old!\"\n\n-- A \"template\" is the same thing as a function whose output type is `Text`\nlet mitLicense : { year : Natural, copyrightHolder : Text } -> Text =\n        \\(args : { year : Natural, copyrightHolder : Text }) ->\n''\nCopyright ${Natural/show args.year} ${args.copyrightHolder}\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to \nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \nof the Software, and to permit persons to whom the Software is furnished to do \nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \nSOFTWARE.\n''\n\n-- Template instantiation is the same thing as function application\nlet templatedLicense : Text =\n        mitLicense { year = 2019, copyrightHolder = \"Jane Smith\" }\n\n{- You can import expressions by URL\n\n   Also, like Bash, you can import code from your local filesystem (not shown)\n\n   Security-conscious users can pin remotely-imported expressions by adding a\n   semantic integrity check.  The interpreter rejects any attempt to tamper with\n   an expression pinned in this way.  However, behavior-preserving refactors\n   of imported content will not perturb the hash.\n\n   Imported expressions pinned in this way are also locally cached in a\n   content-addressable store (typically underneath `~/.cache/dhall`)\n-}\nlet Natural/sum : List Natural -> Natural =\n      https://prelude.dhall-lang.org/Natural/sum\n      sha256:33f7f4c3aff62e5ecf4848f964363133452d420dcde045784518fb59fa970037\n\nlet twentyEight : Natural = Natural/sum somePrimes\n\n-- A \"package\" is the same thing as a (possibly nested) record that you can import\nlet Prelude = https://prelude.dhall-lang.org/package.dhall\n\nlet false : Bool = Prelude.Bool.not True\n\n-- You can import the raw contents of a file by adding `as Text` to an import\nlet sourceCode : Text = https://prelude.dhall-lang.org/Bool/not as Text\n\n-- You can import environment variables, too:\nlet presentWorkingDirectory = env:PWD as Text\n\n-- You can provide a fallback expression if an import fails\nlet home : Optional Text = Some env:HOME ? None Text\n\n-- Fallback expressions can contain alternative imports of their own\nlet possiblyCustomPrelude =\n        env:DHALL_PRELUDE\n      ? https://prelude.dhall-lang.org/package.dhall\n\n{- Tie everything together by auto-generating configurations for 10 build users\n   using the `generate` function:\n\n       Prelude.List.generate\n           : Natural -> forall (a : Type) -> (Natural -> a) -> List a\n-}\nlet buildUsers =\n        let makeUser = \\(user : Text) ->\n              let home       = \"/home/${user}\"\n              let privateKey = \"${home}/.ssh/id_ed25519\"\n              let publicKey  = \"${privateKey}.pub\"\n              in  { home = home\n                  , privateKey = privateKey\n                  , publicKey = publicKey\n                  }\n\n        let buildUser =\n                \\(index : Natural) -> makeUser \"build${Natural/show index}\"\n\n        let Config =\n              { home : Text\n              , privateKey : Text\n              , publicKey : Text\n              }\n\n        in  Prelude.List.generate 10 Config buildUser\n\n-- Present all of the results in a final record\nin  { greeting = greeting\n    , fruits = fruits\n    , interpolation = interpolation\n    , multilineText = multilineText\n    , bool = bool\n    , annotation = annotation\n    , renderedBool = renderedBool\n    , naturalNumber = naturalNumber\n    , positiveInteger = positiveInteger\n    , negativeInteger = negativeInteger\n    , pi = pi\n    , `Avogadro's Number` = `Avogadro's Number`\n    , origin = origin\n    , somePrimes = somePrimes\n    , john = john\n    , philadelphia = philadelphia\n    , dnaSequence = dnaSequence\n    , compactDNASequence = compactDNASequence\n    , theLetterG = theLetterG\n    , presentOptionalValue = presentOptionalValue\n    , absentOptionalValue = absentOptionalValue\n    , points = points\n    , exampleFunction = exampleFunction\n    , unicodeFunction = unicodeFunction\n    , exampleFunctionApplication = exampleFunctionApplication\n    , functionOfMultipleArguments = functionOfMultipleArguments\n    , functionAppliedToMultipleArguments = functionAppliedToMultipleArguments\n    , namedArgumentType = namedArgumentType\n    , duplicate = duplicate\n    , duplicatedNumber = duplicatedNumber\n    , duplicatedBool = duplicatedBool\n    , firstPrime = firstPrime\n    , functionOfARecord = functionOfARecord\n    , functionAppliedToARecord = functionAppliedToARecord\n    , typeConversion = typeConversion\n    , mitLicense = mitLicense\n    , templatedLicense = templatedLicense\n    , twentyEight = twentyEight\n    , false = false\n    , sourceCode = sourceCode\n    , presentWorkingDirectory = presentWorkingDirectory\n    , home = home\n    , buildUsers = buildUsers\n    }\n```\n\nTo learn more, visit the official website, which also lets you try the\nlanguage live in your browser:\n\n* [https://dhall-lang.org](http://dhall-lang.org/)\n"
        },
        {
          "name": "directx9.md",
          "type": "blob",
          "size": 32.7841796875,
          "content": "---\ncategory: framework\nname: DirectX 9\nfilename: learndirectx9.cpp\ncontributors:\n    - [\"Simon Deitermann\", \"s.f.deitermann@t-online.de\"]\n---\n\n**Microsoft DirectX** is a collection of application programming interfaces (APIs) for handling tasks related to\nmultimedia, especially game programming and video, on Microsoft platforms. Originally, the names of these APIs\nall began with Direct, such as Direct3D, DirectDraw, DirectMusic, DirectPlay, DirectSound, and so forth. [...]\nDirect3D (the 3D graphics API within DirectX) is widely used in the development of video games for Microsoft\nWindows and the Xbox line of consoles.<sup>[1]</sup>\n\nIn this tutorial we will be focusing on DirectX 9, which is not as low-level as it's successors, which are aimed at programmers very familiar with how graphics hardware works. It makes a great starting point for learning Direct3D. In this tutorial I will be using the Win32-API for window handling and the DirectX 2010 SDK.\n\n## Window creation\n\n```cpp\n#include <Windows.h>\n\nbool _running{ false };\n\nLRESULT CALLBACK WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) {\n    // Handle incoming message.\n    switch (msg) {\n        // Set running to false if the user tries to close the window.\n        case WM_DESTROY:\n            _running = false;\n            PostQuitMessage(0);\n            break;\n    }\n    // Return the handled event.\n    return DefWindowProc(hWnd, msg, wParam, lParam);\n}\n\nint WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,\n                   LPSTR lpCmdLine, int nCmdShow) {\n    // Set window properties we want to use.\n    WNDCLASSEX wndEx{ };\n    wndEx.cbSize        = sizeof(WNDCLASSEX);        // structure size\n    wndEx.style         = CS_VREDRAW | CS_HREDRAW;   // class styles\n    wndEx.lpfnWndProc   = WndProc;                   // window procedure\n    wndEx.cbClsExtra    = 0;                         // extra memory (struct)\n    wndEx.cbWndExtra    = 0;                         // extra memory (window)\n    wndEx.hInstance     = hInstance;                 // module instance\n    wndEx.hIcon         = LoadIcon(nullptr, IDI_APPLICATION); // icon\n    wndEx.hCursor       = LoadCursor(nullptr, IDC_ARROW);     // cursor\n    wndEx.hbrBackground = (HBRUSH) COLOR_WINDOW;     // background color\n    wndEx.lpszMenuName  = nullptr;                   // menu name\n    wndEx.lpszClassName = \"DirectXClass\";            // register class name\n    wndEx.hIconSm       = nullptr;                   // small icon (taskbar)\n    // Register created class for window creation.\n    RegisterClassEx(&wndEx);\n    // Create a new window handle.\n    HWND hWnd{ nullptr };\n    // Create a new window handle using the registered class.\n    hWnd = CreateWindow(\"DirectXClass\",      // registered class\n                        \"directx window\",    // window title\n                        WS_OVERLAPPEDWINDOW, // window style\n                        50, 50,              // x, y (position)\n                        1024, 768,           // width, height (size)\n                        nullptr,             // parent window\n                        nullptr,             // menu\n                        hInstance,           // module instance\n                        nullptr);            // struct for infos\n    // Check if a window handle has been created.\n    if (!hWnd)\n        return -1;   \n    // Show and update the new window.\n    ShowWindow(hWnd, nCmdShow);\n    UpdateWindow(hWnd);\n    // Start the game loop and send incoming messages to the window procedure.\n    _running = true;\n    MSG msg{ };\n    while (_running) {\n        while (PeekMessage(&msg, hWnd, 0, 0, PM_REMOVE)) {\n            TranslateMessage(&msg);\n            DispatchMessage(&msg);\n        }\n    }  \n    return 0;\n}\n```\n\nThis should create a window, that can the moved, resized and closed.\n\n## Direct3D initialization\n\n```cpp\n// Includes DirectX 9 structures and functions.\n// Remember to link \"d3d9.lib\" and \"d3dx9.lib\".\n// For \"d3dx9.lib\" the DirectX SDK (June 2010) is needed.\n// Don't forget to set your subsystem to Windows.\n#include <d3d9.h>\n#include <d3dx9.h>\n// Includes the ComPtr, a smart pointer automatically releasing COM objects.\n#include <wrl.h>\nusing namespace Microsoft::WRL;\n// Next we define some Direct3D9 interface structs we need.\nComPtr<IDirect3D9> _d3d{ };\nComPtr<IDirect3DDevice9> _device{ };\n```\n\nWith all interfaces declared we can now initialize Direct3D.\n\n```cpp\nbool InitD3D(HWND hWnd) {\n    // Store the size of the window rectangle.\n    RECT clientRect{ };\n    GetClientRect(hWnd, &clientRect);\n    // Initialize Direct3D\n    _d3d = Direct3DCreate9(D3D_SDK_VERSION);\n    // Get the display mode which format will be the window format.\n    D3DDISPLAYMODE displayMode{ };\n    _d3d->GetAdapterDisplayMode(D3DADAPTER_DEFAULT, // use default graphics card\n                                &displayMode);      // display mode pointer\n    // Next we have to set some presentation parameters.\n    D3DPRESENT_PARAMETERS pp{ };\n    pp.BackBufferWidth = clientRect.right;    // width is window width\n    pp.BackBufferHeight = clientRect.bottom;  // height is window height\n    pp.BackBufferFormat = displayMode.Format; // use adapter format\n    pp.BackBufferCount = 1;                   // 1 back buffer (default)\n    pp.SwapEffect = D3DSWAPEFFECT_DISCARD;    // discard after presentation\n    pp.hDeviceWindow = hWnd;                  // associated window handle\n    pp.Windowed = true;                       // display in window mode\n    pp.Flags = 0;                             // no special flags\n    // Variable to store results of methods to check if everything succeeded.\n    HRESULT result{ };\n    result = _d3d->CreateDevice(D3DADAPTER_DEFAULT, // use default graphics card\n                                D3DDEVTYPE_HAL,     // use hardware acceleration\n                                hWnd,               // the window handle\n                                D3DCREATE_HARDWARE_VERTEXPROCESSING,\n                                    // vertices are processed by the hardware\n                                &pp,       // the present parameters\n                                &_device); // struct to store the device\n    // Return false if the device creation failed.\n    // It is helpful to set breakpoints at the return line.\n    if (FAILED(result))\n        return false;\n    // Create a viewport which hold information about which region to draw to.\n    D3DVIEWPORT9 viewport{ };\n    viewport.X = 0;         // start at top left corner\n    viewport.Y = 0;         // ..\n    viewport.Width = clientRect.right;   // use the entire window\n    viewport.Height = clientRect.bottom; // ..\n    viewport.MinZ = 0.0f;   // minimum view distance\n    viewport.MaxZ = 100.0f; // maximum view distance\n    // Apply the created viewport.\n    result = _device->SetViewport(&viewport);\n    // Always check if something failed.\n    if (FAILED(result))\n        return false;\n    // Everything was successful, return true.\n    return true;\n}\n// ...\n// Back in our WinMain function we call our initialization function.\n// ...\n// Check if Direct3D initialization succeeded, else exit the application.\nif (!InitD3D(hWnd))\n    return -1;\n        \nMSG msg{ };\nwhile (_running) {\n    while (PeekMessage(&msg, hWnd, 0, 0, PM_REMOVE)) {\n        TranslateMessage(&msg);\n        DispatchMessage(&msg);\n    }\n    // Clear to render target to a specified color.\n    _device->Clear(0,               // number of rects to clear\n                   nullptr,         // indicates to clear the entire window\n                   D3DCLEAR_TARGET, // clear all render targets\n                   D3DXCOLOR{ 1.0f, 0.0f, 0.0f, 1.0f }, // color (red)\n                   0.0f,            // depth buffer clear value\n                   0);              // stencil buffer clear value\n    // ...\n    // Drawing operations go here.\n    // ...\n    // Flip the front- and backbuffer.\n    _device->Present(nullptr,  // no source rectangle\n                     nullptr,  // no destination rectangle\n                     nullptr,  // don't change the current window handle\n                     nullptr); // pretty much always nullptr\n}\n// ...\n```\n\nNow the window should be displayed in a bright red color.\n\n## Vertex Buffer\n\nLet's create a vertex buffer to store the vertices for our triangle\n\n```cpp\n// At the top of the file we need to add a include.\n#include <vector>\n// First we declare a new ComPtr holding a vertex buffer.\nComPtr<IDirect3DVertexBuffer9> _vertexBuffer{ };\n// Lets define a function to calculate the byte size of a std::vector\ntemplate <typename T>\nunsigned int GetByteSize(const std::vector<T>& vec) {\n    return sizeof(vec[0]) * vec.size();\n}\n// Define \"flexible vertex format\" describing the content of our vertex struct.\n// Use the defined color as diffuse color.\nconst unsigned long VertexStructFVF = D3DFVF_XYZ | D3DFVF_DIFFUSE;\n// Define a struct representing the vertex data the buffer will hold.\nstruct VStruct {\n    float x, y, z;   // store the 3D position\n    D3DCOLOR color;  // store a color\n};\n// Declare a new function to create a vertex buffer.\nIDirect3DVertexBuffer9* CreateBuffer(const std::vector<VStruct>& vertices) {\n    // Declare the buffer to be returned.\n    IDirect3DVertexBuffer9* buffer{ };\n    HRESULT result{ };\n    result = _device->CreateVertexBuffer(\n                 GetByteSize(vertices), // vector size in bytes\n                 0,                     // data usage\n                 VertexStructFVF,       // FVF of the struct\n                 D3DPOOL_DEFAULT,       // use default pool for the buffer\n                 &buffer,               // receiving buffer\n                 nullptr);              // special shared handle\n    // Check if buffer was created successfully.\n    if (FAILED(result))\n        return nullptr;\n    // Create a data pointer for copying the vertex data\n    void* data{ };\n    // Lock the buffer to get a buffer for data storage.\n    result = buffer->Lock(0,                     // byte offset\n                          GetByteSize(vertices), // size to lock\n                          &data,                 // receiving data pointer\n                          0);                    // special lock flags\n    // Check if buffer was locked successfully.\n    if (FAILED(result))\n        return nullptr;\n    // Copy the vertex data using C standard libraries memcpy.\n    memcpy(data, vertices.data(), GetByteSize(vertices));\n    buffer->Unlock();\n    // Set the FVF Direct3D uses for rendering.\n    _device->SetFVF(VertexStructFVF);\n    // If everything was successful return the filled vertex buffer.\n    return buffer;\n}\n```\n\nIn our **WinMain** we can now call the new function after the Direct3D initialization.\n\n```cpp\n// ...\nif (!InitD3D(hWnd))\n    return -1;\n// Define the vertices we need to draw a triangle.\n// Values are declared in a clockwise direction else Direct3D would cull them.\n// If you want to disable culling just call:\n// _device->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);\nstd::vector<VStruct> vertices {\n    // Bottom left\n    VStruct{ -1.0f, -1.0f, 1.0f, D3DXCOLOR{ 1.0f, 0.0f, 0.0f, 1.0f } },\n    // Top left\n    VStruct{ -1.0f,  1.0f, 1.0f, D3DXCOLOR{ 0.0f, 1.0f, 0.0f, 1.0f } },\n    // Top right\n    VStruct{  1.0f,  1.0f, 1.0f, D3DXCOLOR{ 0.0f, 0.0f, 1.0f, 1.0f } }\n};\n// Try to create the vertex buffer else exit the application.\nif (!(_vertexBuffer = CreateBuffer(vertices)))\n    return -1;\n// ...\n```\n\n## Transformations\n\nBefore we can use the vertex buffer to draw our primitives, we first need to set up the matrices.\n\n```cpp\n// Lets create a new functions for the matrix transformations.\nbool SetupTransform() {\n    // Create a view matrix that transforms world space to\n    // view space.\n    D3DXMATRIX view{ };\n    // Use a left-handed coordinate system.\n    D3DXMatrixLookAtLH(\n        &view,                              // receiving matrix\n        &D3DXVECTOR3{ 0.0f, 0.0f, -20.0f }, // \"camera\" position\n        &D3DXVECTOR3{ 0.0f, 0.0f, 0.0f },   // position where to look at\n        &D3DXVECTOR3{ 0.0f, 1.0f, 0.0f });  // positive y-axis is up\n    HRESULT result{ };\n    result = _device->SetTransform(D3DTS_VIEW, &view); // apply the view matrix\n    if (FAILED(result))\n        return false;\n    // Create a projection matrix that defines the view frustrum.\n    // It transforms the view space to projection space.\n    D3DXMATRIX projection{ };\n    // Create a perspective projection using a left-handed coordinate system.\n    D3DXMatrixPerspectiveFovLH(\n        &projection,         // receiving matrix\n        D3DXToRadian(60.0f), // field of view in radians\n        1024.0f / 768.0f,    // aspect ratio (width / height)\n        0.0f,                // minimum view distance\n        100.0f);             // maximum view distance\n    result = _device->SetTransform(D3DTS_PROJECTION, &projection);\n    if (FAILED(result))\n        return false;\n    // Disable lighting for now so we can see what we want to render.\n    result = _device->SetRenderState(D3DRS_LIGHTING, false);\n    // View and projection matrix are successfully applied, return true.\n    return true;\n}\n// ...\n// Back in the WinMain function we can now call the transformation function.\n// ...\nif (!(_vertexBuffer = CreateVertexBuffer(vertices)))\n    return -1;\n// Call the transformation setup function.\nif (!SetupTransform())\n    return -1;\n// ...\n```\n\n## Rendering\n\nNow that everything is setup we can start drawing our first 2D triangle in 3D space.\n\n```cpp\n// ...\nif (!SetupTransform())\n    return -1;\n// First we have to bind our vertex buffer to the data stream.\nHRESULT result{ };\nresult = _device->SetStreamSource(0,                   // use the default stream\n                                  _vertexBuffer.Get(), // pass the vertex buffer\n                                  0,                   // no offset\n                                  sizeof(VStruct));    // size of vertex struct\nif (FAILED(result))\n    return -1;\n\n// Create a world transformation matrix and set it to an identity matrix.\nD3DXMATRIX world{ };\nD3DXMatrixIdentity(&world);\n// Create a scalation matrix scaling our primitive by 10 in the x,\n// 10 in the y and keeping the z direction.\nD3DXMATRIX scaling{ };\nD3DXMatrixScaling(&scaling, // matrix to scale\n                  10,       // x scaling\n                  10,       // y scaling\n                  1);       // z scaling\n// Create a rotation matrix storing the current rotation of our primitive.\n// We set the current rotation matrix to an identity matrix for now.\nD3DXMATRIX rotation{ };\nD3DXMatrixIdentity(&rotation);\n// Now we multiply the scalation and rotation matrix and store the result\n// in the world matrix.\nD3DXMatrixMultiply(&world,     // destination matrix\n                   &scaling,   // matrix 1\n                   &rotation); // matrix 2\n// Apply the current world matrix.\n_device->SetTransform(D3DTS_WORLD, &world);\n// Disable culling so we can see the back of our primitive when it rotates.\n_device->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);\n// The default cullmode is D3DCULL_CW.\n// After we used our the rotation matrix for multiplication we can set it\n// to rotate a small amount.\n// D3DXToRadian() function converts degree to radians.\nD3DXMatrixRotationY(&rotation,           // matrix to rotate\n                    D3DXToRadian(0.5f)); // rotation angle in radians\n\nMSG msg{ };\n    while (_running) {\n    // ...\n        _device->Clear(0, nullptr, D3DCLEAR_TARGET,\n                       D3DXCOLOR{ 0.0f, 0.0f, 0.0f, 1.0f }, 0.0f, 0);\n        // With everything setup we can call the draw function.\n        _device->BeginScene();\n        _device->DrawPrimitive(D3DPT_TRIANGLELIST, // primitive type\n                               0,                  // start vertex\n                               1);                 // primitive count\n        _device->EndScene();\n    \n        _device->Present(nullptr, nullptr, nullptr, nullptr);\n        // We can keep multiplying the world matrix with our rotation matrix\n        // to add it's rotation to the world matrix.\n        D3DXMatrixMultiply(&world, &world, &rotation);\n        // Update the modified world matrix.\n        _device->SetTransform(D3DTS_WORLD, &world);\n    // ...\n```\n\nYou should now be viewing a 10x10 units colored triangle from 20 units away, rotating around its origin.<br>\nYou can find the complete working code here: [DirectX - 1](https://pastebin.com/YkSF2rkk)\n\n## Indexing\n\nTo make it easier to draw primitives sharing a lot of vertices we can use indexing, so we only have to declare the unique vertices and put the order they are called in another array.\n\n```cpp\n// First we declare a new ComPtr for our index buffer.\nComPtr<IDirect3DIndexBuffer9> _indexBuffer{ };\n// ...\n// Declare a function creating a index buffer from a std::vector\nIDirect3DIndexBuffer9* CreateIBuffer(std::vector<unsigned int>& indices) {\n    IDirect3DIndexBuffer9* buffer{ };\n    HRESULT result{ };\n    result = _device->CreateIndexBuffer(\n                 GetByteSize(indices), // vector size in bytes\n                 0,                    // data usage \n                 D3DFMT_INDEX32,       // format is 32 bit int\n                 D3DPOOL_DEFAULT,      // default pool\n                 &buffer,              // receiving buffer\n                 nullptr);             // special shared handle\n    if (FAILED(result))\n        return nullptr;\n    // Create a data pointer pointing to the buffer data.\n    void* data{ };\n    result = buffer->Lock(0,                    // byte offset\n                          GetByteSize(indices), // byte size\n                          &data,                // receiving data pointer\n                          0);                   // special lock flag\n    if (FAILED(result))\n        return nullptr;\n    // Copy the index data and unlock after copying.\n    memcpy(data, indices.data(), GetByteSize(indices));\n    buffer->Unlock();\n    // Return the filled index buffer.\n    return buffer;\n}\n// ...\n// In our WinMain we can now change the vertex data and create new index data.\n// ...\nstd::vector<VStruct> vertices {\n    VStruct{ -1.0f, -1.0f, 1.0f, D3DXCOLOR{ 1.0f, 0.0f, 0.0f, 1.0f } },\n    VStruct{ -1.0f,  1.0f, 1.0f, D3DXCOLOR{ 0.0f, 1.0f, 0.0f, 1.0f } },\n    VStruct{  1.0f,  1.0f, 1.0f, D3DXCOLOR{ 0.0f, 0.0f, 1.0f, 1.0f } },\n    // Add a vertex for the bottom right.\n    VStruct{  1.0f, -1.0f, 1.0f, D3DXCOLOR{ 1.0f, 1.0f, 0.0f, 1.0f } }\n};\n// Declare the index data, here we build a rectangle from two triangles.\nstd::vector<unsigned int> indices {\n    0, 1, 2, // the first triangle (b,left -> t,left -> t,right)\n    0, 2, 3  // the second triangle (b,left -> t,right -> b,right)\n};\n// ...\n// Now we call the \"CreateIBuffer\" function to create a index buffer.\n// ...\nif (!(_indexBuffer = CreateIBuffer(indices)))\n    return -1;\n// ...\n// After binding the vertex buffer we have to bind the index buffer to\n// use indexed rendering.\nresult = _device->SetStreamSource(0, _vertexBuffer.Get(), 0, sizeof(VStruct));\nif (FAILED(result))\n    return -1;\n// Bind the index data to the default data stream.\nresult = _device->SetIndices(_indexBuffer.Get())\nif (FAILED(result))\n    return -1;\n// ...\n// Now we replace the \"DrawPrimitive\" function with an indexed version.\n_device->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, // primitive type\n                              0,                  // base vertex index\n                              0,                  // minimum index\n                              indices.size(),     // amount of vertices\n                              0,                  // start in index buffer\n                              2);                 // primitive count\n// ...\n```\n\nNow you should see a colored rectangle made up of 2 triangles. If you set the primitive count in the \"DrawIndexedPrimitive\" method to 1 only the first triangle should be rendered and if you set the start of the index buffer to 3 and the primitive count to 1 only the second triangle should be rendered.<br>\nYou can find the complete working code here: [DirectX - 2](https://pastebin.com/yWBPWPRG)\n\n## Vertex declaration\n\nInstead of using the old \"flexible vertex format\" we should use vertex declarations instead, as the FVF declarations get converted to vertex declarations internally anyway.\n\n```cpp\n// First we have to REMOVE the following lines:\nconst unsigned long VertexStructFVF = D3DFVF_XYZ | D3DFVF_DIFFUSE;\n// and\n_device->SetFVF(VertexStructFVF);\n// ...\n// We also have to change the vertex buffer creation FVF-flag.\nresult = _device->CreateVertexBuffer(\n                      GetByteSize(vertices),\n                      0,\n                      0,        // <- 0 indicates we use vertex declarations\n                      D3DPOOL_DEFAULT,\n                      &buffer,\n                      nullptr); \n// Next we have to declare a new ComPtr.\nComPtr<IDirect3DVertexDeclaration9> _vertexDecl{ };\n// ...\nresult = _device->SetIndices(_indexBuffer.Get());\nif (FAILED(result))\n    return -1;\n// Now we have to declare and apply the vertex declaration.\n// Create a vector of vertex elements making up the vertex declaration.\nstd::vector<D3DVERTEXELEMENT9> vertexDeclDesc {\n    { 0,                     // stream index\n      0,                     // byte offset from the struct beginning\n      D3DDECLTYPE_FLOAT3,    // data type (3d float vector)\n      D3DDECLMETHOD_DEFAULT, // tessellator operation\n      D3DDECLUSAGE_POSITION,  // usage of the data\n      0 },                   // index (multiples usage of the same type)\n    { 0,\n      12,                    // byte offset (3 * sizeof(float) bytes)\n      D3DDECLTYPE_D3DCOLOR,\n      D3DDECLMETHOD_DEFAULT,\n      D3DDECLUSAGE_COLOR,\n      0 },\n    D3DDECL_END()            // marks the end of the vertex declaration\n};\n// After having defined the vector we can create a vertex declaration from it.\nresult = _device->CreateVertexDeclaration(\n                      vertexDeclDesc.data(), // the vertex element array\n                      &_vertexDecl);         // receiving pointer\nif (FAILED(result)) \n    return -1;\n// Apply the created vertex declaration.\n_device->SetVertexDeclaration(_vertexDecl.Get());\n// ...\n```\n\n## Shader\n\nThe maximum shader model for Direct3D 9 is shader model 3.0. Even though every modern graphics card should support it, it is best to check for capabilities.\n\n```cpp\n// ...\n_device->SetVertexDeclaration(_vertexDecl.Get());\n// First we have to request the device capabilities.\nD3DCAPS9 deviceCaps{ };\n_device->GetDeviceCaps(&deviceCaps);\n// Now we check if shader model 3.0 is supported for the vertex shader.\nif (deviceCaps.VertexShaderVersion < D3DVS_VERSION(3, 0))\n    return -1;\n// And the same for the pixel shader.\nif (deviceCaps.PixelShaderVersion < D3DPS_VERSION(3, 0))\n    return -1;\n```\n\nNow that we are sure shader model 3.0 is supported let's create the vertex and pixel shader files.\nDirectX 9 introduced the HLSL (**High Level Shading Language**), a C-like shader language, which\nsimplified the shader programming a lot, as you could only write shaders in shader assembly in DirectX 8.\nLet's create a simple vertex- and pixel shader. \n\n**Vertex Shader**\n\n```cpp\n// 3 4x4 float matrices representing the matrices we set in the fixed-function\n// pipeline by using the SetTransform() method.\nfloat4x4 projectionMatrix;\nfloat4x4 viewMatrix;\nfloat4x4 worldMatrix;\n// The input struct to the vertex shader.\n// It holds a 3d float vector for the position and a 4d float vector\n// for the color.\nstruct VS_INPUT {\n    float3 position : POSITION;\n    float4 color : COLOR;\n};\n// The output struct of the vertex shader, that is passed to the pixel shader.\nstruct VS_OUTPUT {\n    float4 position : POSITION;\n    float4 color : COLOR;\n};\n// The main function of the vertex shader returns the output it sends to the\n// pixel shader and receives it's input as a parameter.\nVS_OUTPUT main(VS_INPUT input) {\n    // Declare a empty struct, that the vertex shader returns.\n    VS_OUTPUT output;\n    // Set the output position to the input position and set\n    // the w-component to 1, as the input position is a 3d vector and\n    // the output position a 4d vector.\n    output.position = float4(input.position, 1.0f);\n    // Multiply the output position step by step with the world, view and\n    // projection matrices.\n    output.position = mul(output.position, worldMatrix);\t\n    output.position = mul(output.position, viewMatrix);\n    output.position = mul(output.position, projectionMatrix);\n\t// Pass the input color unchanged to the pixel shader.\n    output.color = input.color;\n    // Return the output struct to the pixel shader.\n    // The position value is automatically used as the vertex position.\n    return output;\n}\n```\n\n**Pixel Shader**\n\n```cpp\n// The pixel shader input struct must be the same as the vertex shader output!\nstruct PS_INPUT {\n    float4 position : POSITION;\n    float4 color : COLOR;\n};\n// The pixel shader simply returns a 4d vector representing the vertex color.\n// It receives it's input as a parameter just like the vertex shader.\n// We have to declare the output semantic as color to it gets interpreted\n// correctly.\nfloat4 main(PS_INPUT input) : COLOR {\n    return input.color;\n}\n```\n\nFor more on semantics: [DirectX - Semantics](https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-semantics#vertex-shader-semantics)\n\nNow we have to do quite some changes to the code.\n\n```cpp\nComPtr<IDirect3DDevice9> _device{ };\nComPtr<IDirect3DVertexBuffer9> _vertexBuffer{ };\nComPtr<IDirect3DIndexBuffer9> _indexBuffer{ };\nComPtr<IDirect3DVertexDeclaration9> _vertexDecl{ };\n// We have to add a ComPtr for the vertex- and pixel shader, aswell as one\n// for the constants (matrices) in our vertex shader.\nComPtr<IDirect3DVertexShader9> _vertexShader{ };\nComPtr<IDirect3DPixelShader9> _pixelShader{ };\nComPtr<ID3DXConstantTable> _vertexTable{ };\n// Declare the world and rotation matrix as global, because we use them in\n// WinMain and SetupTransform now.\nD3DXMATRIX _worldMatrix{ };\nD3DXMATRIX _rotationMatrix{ };\n// ...\nbool SetupTransform() {\n    // Set the world and rotation matrix to an identity matrix.\n    D3DXMatrixIdentity(&_worldMatrix);\n    D3DXMatrixIdentity(&_rotationMatrix);\n\t\n    D3DXMATRIX scaling{ };\n    D3DXMatrixScaling(&scaling, 10, 10, 1);\n    D3DXMatrixMultiply(&_worldMatrix, &scaling, &_rotationMatrix);\n    // After multiplying the scalation and rotation matrix the have to pass\n    // them to the shader, by using a method from the constant table\n    // of the vertex shader.\n    HRESULT result{ };\n    result = _vertexTable->SetMatrix(\n                         _device.Get(),   // direct3d device\n                         \"worldMatrix\",   // matrix name in the shader\n                          &_worldMatrix); // pointer to the matrix\n    if (FAILED(result))\n        return false;\n\n    D3DXMATRIX view{ };\n    D3DXMatrixLookAtLH(&view, &D3DXVECTOR3{ 0.0f, 0.0f, -20.0f },\n           &D3DXVECTOR3{ 0.0f, 0.0f, 0.0f }, &D3DXVECTOR3{ 0.0f, 1.0f, 0.0f });\n    // Do the same for the view matrix.\n    result = _vertexTable->SetMatrix(\n\t                       _device.Get(), // direct 3d device\n\t                       \"viewMatrix\",  // matrix name\n\t                       &view);        // matrix\n    if (FAILED(result))\n        return false;\n\n    D3DXMATRIX projection{ };\n    D3DXMatrixPerspectiveFovLH(&projection, D3DXToRadian(60.0f),\n        1024.0f / 768.0f, 0.0f, 100.0f);\n    // And also for the projection matrix.\n    result = _vertexTable->SetMatrix(\n\t                       _device.Get(),\n\t                       \"projectionMatrix\",\n\t                       &projection);\n    if (FAILED(result))\n        return false;\n\n    D3DXMatrixRotationY(&_rotationMatrix, D3DXToRadian(0.5f));\n    return true;\n}\n// ...\n// Vertex and index buffer creation aswell as initialization stay unchanged.\n// ...\n// After checking that shader model 3.0 is available we have to compile and\n// create the shaders.\n// Declare two temporary buffers storing the compiled shader code.\nID3DXBuffer* vertexShaderBuffer{ };\nID3DXBuffer* pixelShaderBuffer{ };\nresult = D3DXCompileShaderFromFile(\"vertex.hlsl\",  // shader name\n                                   nullptr,        // macro definitions\n                                   nullptr,        // special includes\n                                   \"main\",         // entry point name\n                                   \"vs_3_0\",       // shader model version\n                                   0,              // special flags\n                                   &vertexShaderBuffer, // code buffer\n                                   nullptr,        // error message\n                                   &_vertexTable); // constant table\nif (FAILED(result))\n    return -1;\n// After the vertex shader compile the pixel shader.\nresult = D3DXCompileShaderFromFile(\"pixel.hlsl\",\n                                   nullptr,\n                                   nullptr,\n                                   \"main\",\n                                   \"ps_3_0\", // pixel shader model 3.0\n                                   0,\n                                   &pixelShaderBuffer,\n                                   nullptr,\n                                   nullptr); // no need for a constant table\nif (FAILED(result))\n    return -1;\n// Create the vertex shader from the code buffer.\nresult = _device->CreateVertexShader(\n             (DWORD*)vertexShaderBuffer->GetBufferPointer(), // code buffer\n             &_vertexShader); // vertex shader pointer\nif (FAILED(result))\n    return -1;\n\t\nresult = _device->CreatePixelShader(\n             (DWORD*)pixelShaderBuffer->GetBufferPointer(),\n             &_pixelShader);\nif (FAILED(result))\n    return -1;\n// Release the temporary code buffers after the shaders are created.\nvertexShaderBuffer->Release();\npixelShaderBuffer->Release();\n// Apply the vertex- and pixel shader.\n_device->SetVertexShader(_vertexShader.Get());\n_device->SetPixelShader(_pixelShader.Get());\n// Apply the transform after the shaders have been set.\nif (!SetupTransform())\n    return -1;\n// You can also REMOVE the call so set the lighting render state.\n_device->SetRenderState(D3DRS_LIGHTING, false);\n```\n\nYou can find the complete code here: [DirectX - 3](https://pastebin.com/y4NrvawY)\n\n## Texturing\n\n```cpp\n// First we need to declare a ComPtr for the texture.\nComPtr<IDirect3DTexture9> _texture{ };\n// Then we have to change the vertex struct.\nstruct VStruct {\n    float x, y, z;\n    float u, v;      // Add texture u and v coordinates\n    D3DCOLOR color;\n};\n// In the vertex declaration we have to add the texture coordinates.\n// the top left of the texture is u: 0, v: 0.\nstd::vector<VStruct> vertices {\n    VStruct{ -1.0f, -1.0f, 1.0f, 0.0f, 1.0f, ... }, // bottom left\n    VStruct{ -1.0f,  1.0f, 1.0f, 0.0f, 0.0f, ... }, // top left\n    VStruct{  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, ... }, // top right\n    VStruct{  1.0f, -1.0f, 1.0f, 1.0f, 1.0f, ... }  // bottom right\n};\n// Next is the vertex declaration.\nstd::vector<D3DVERTEXELEMENT9> vertexDecl{\n    {0, 0, D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0},\n    // Add a 2d float vector used for texture coordinates.\n    {0, 12, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 0},\n    // The color offset is not (3 + 2) * sizeof(float) = 20 bytes\n    {0, 20, D3DDECLTYPE_D3DCOLOR, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_COLOR, 0},\n    D3DDECL_END()\n};\n// Now we have to load the texture and pass its to the shader.\n// ...\n_device->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);\n// Create a Direct3D texture from a png file.\nresult = D3DXCreateTextureFromFile(_device.Get(), // direct3d device\n                                   \"texture.png\", // texture path\n                                   &_texture);    // receiving texture pointer\nif (FAILED(result))\n    return -1;\n// Attach the texture to shader stage 0, which is equal to texture register 0\n// in the pixel shader.\n_device->SetTexture(0, _texture.Get());\n```\n\nWith the main code ready we now have to adjust the shaders to these changes.\n\n**Vertex Shader**\n\n```cpp\nfloat4x4 projectionMatrix;\nfloat4x4 viewMatrix;\nfloat4x4 worldMatrix;\n// Add the texture coordinates to the vertex shader in- and output.\nstruct VS_INPUT {\n    float3 position : POSITION;\n    float2 texcoord : TEXCOORD;\n    float4 color : COLOR;\n};\n\nstruct VS_OUTPUT {\n    float4 position : POSITION;\n    float2 texcoord : TEXCOORD;\n    float4 color : COLOR;\n};\n\nVS_OUTPUT main(VS_INPUT input) {\n    VS_OUTPUT output;\n    \n    output.position = float4(input.position, 1.0f);\n    output.position = mul(output.position, worldMatrix);\t\n    output.position = mul(output.position, viewMatrix);\n    output.position = mul(output.position, projectionMatrix);\n\n    output.color = input.color;\n    // Set the texcoord output to the input.\n    output.texcoord = input.texcoord;\n    \n    return output;\n}\n```\n\n**Pixel Shader**\n\n```cpp\n// Create  a sampler called \"sam0\" using sampler register 0, which is equal\n// to the texture stage 0, to which we passed the texture.\nsampler sam0 : register(s0);\n\nstruct PS_INPUT {\n    float4 position : POSITION;\n    float2 texcoord : TEXCOORD;\n    float4 color : COLOR;\n};\n\nfloat4 main(PS_INPUT input) : COLOR{\n    // Do a linear interpolation between the texture color and the input color\n    // using 75% of the input color.\n    // tex2D returns the texture data at the specified texture coordinate.\n    return lerp(tex2D(sam0, input.texcoord), input.color, 0.75f);\n}\n```\n\n## Quotes\n<sup>[1]</sup>[DirectX - Wikipedia](https://en.wikipedia.org/wiki/DirectX)\n"
        },
        {
          "name": "docker.md",
          "type": "blob",
          "size": 14.8486328125,
          "content": "---\ncategory: tool\nname: Docker\nfilename: docker.bat\ncontributors:\n    - [\"Ruslan López\", \"http://javapro.org/\"]\n    - [\"Michael Chen\", \"https://github.com/ML-Chen\"]\n    - [\"Akshita Dixit\", \"https://github.com/akshitadixit\"]\n    - [\"Marcel Ribeiro-Dantas\", \"https://github.com/mribeirodantas\"]\n---\n\nDocker is a tool that helps you build, test, ship and run applications\nseamlessly across various machines. It replicates the environment our software\nneeds on any machine. You can get Docker for your machine from\n[docs.docker.com/get-docker/](https://docs.docker.com/get-docker/)\n\nIt has grown in popularity over the last decade due to being lightweight and\nfast as compared to virtual-machines that are bulky and slow. Unlike VMs, docker\ndoes not need a full blown OS of its own to be loaded to start and does not\ncompete for resources other than what the application it is running will use.\nVMs on the other hand are pretty resource intensive on our processors, disks and\nmemory hence running multiple VMs for various applications becomes a challenge\nin a limited capacity architecture.\n\n<pre>\n┌────────────────────────┐ ┌───────────────────────┐\n│      ┌───────────┐     │ │      ┌───────────┐    │\n│      │   App     │     │ │      │   App     │    │\n│      └───────────┘     │ │      └───────────┘    │\n│  ┌────────┐ ┌────────┐ │ │  ┌────────┐ ┌───────┐ │\n│  │  Libs  │ │  Deps  │ │ │  │  Libs  │ │  Deps │ │\n│  └────────┘ └────────┘ │ │  └────────┘ └───────┘ │\n│  ┌───────────────────┐ │ │  ┌──────────────────┐ │\n│  │      Guest OS     │ │ │  │     Guest OS     │ │\n│  └───────────────────┘ │ │  └──────────────────┘ │\n│           VM1          │ │           VM2         │\n└────────────────────────┘ └───────────────────────┘\n┌──────────────────────────────────────────────────┐\n│                     Hypervisor                   │\n└──────────────────────────────────────────────────┘\n┌──────────────────────────────────────────────────┐\n│                      Host OS                     │\n└──────────────────────────────────────────────────┘\n┌──────────────────────────────────────────────────┐\n│             Hardware Infrastructure              │\n└──────────────────────────────────────────────────┘\n              (VM based architecture)\n\n┌────────────────────────┐ ┌───────────────────────┐\n│      ┌───────────┐     │ │      ┌───────────┐    │\n│      │   App     │     │ │      │   App     │    │\n│      └───────────┘     │ │      └───────────┘    │\n│  ┌────────┐ ┌────────┐ │ │  ┌────────┐ ┌───────┐ │\n│  │  Libs  │ │  Deps  │ │ │  │  Libs  │ │  Deps │ │\n│  └────────┘ └────────┘ │ │  └────────┘ └───────┘ │\n│        Container1      │ │       Container2      │\n└────────────────────────┘ └───────────────────────┘\n┌──────────────────────────────────────────────────┐\n│                       Docker                     │\n└──────────────────────────────────────────────────┘\n┌──────────────────────────────────────────────────┐\n│                        OS                        │\n└──────────────────────────────────────────────────┘\n┌──────────────────────────────────────────────────┐\n│             Hardware Infrastructure              │\n└──────────────────────────────────────────────────┘\n            (Docker based architecture)\n</pre>\n\nCouple of terms we will encounter frequently are Docker Images and Docker\nContainers. Images are packages or templates of containers all stored in a\ncontainer registry such as [Docker Hub](https://hub.docker.com/). Containers\nare standalone, executable instances of these images which include code,\nruntime, system tools, system libraries and settings - everything required to\nget the software up and running. Coming to Docker, it follows a client-server\narchitecture wherein the CLI client communicates with the server component,\nwhich here is, the Docker Engine using RESTful API to issue commands.\n\n## The Docker CLI\n\n```bash\n# after installing Docker from https://docs.docker.com/get-docker/\n# To list available commands, either run `docker` with no parameters or execute\n# `docker help`\n$ docker\n\n>>> docker [OPTIONS] COMMAND [ARG...]\n       docker [ --help | -v | --version ]\n\n    A self-sufficient runtime for containers.\n\n    Options:\n        --config string      Location of client config files (default \"/root/.docker\")\n    -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with \"docker context use\")\n    -D, --debug              Enable debug mode\n        --help               Print usage\n    -H, --host value         Daemon socket(s) to connect to (default [])\n    -l, --log-level string   Set the logging level (\"debug\"|\"info\"|\"warn\"|\"error\"|\"fatal\") (default \"info\")\n        --tls                Use TLS; implied by --tlsverify\n        --tlscacert string   Trust certs signed only by this CA (default \"/root/.docker/ca.pem\")\n        --tlscert string     Path to TLS certificate file (default \"/root/.docker/cert.pem\")\n        --tlskey string      Path to TLS key file (default \"/root/.docker/key.pem\")\n        --tlsverify          Use TLS and verify the remote\n    -v, --version            Print version information and quit\n\n    Commands:\n        attach    Attach to a running container\n        # […]\n\n$ docker run hello-world\n# `docker run <container-name>` is used to run a container, it will pull the\n# images from Docker Hub if they don't already exist in your system. Here the\n# docker client connects to the daemon which in turn pulls the \"hello-world\"\n# image from the Docker Hub. The daemon then builds a new container from the\n# image which runs the executable that produces the output streamed back to the\n# client that we see on our terminals.\n\n$ docker run -d ubuntu sleep 60s\n# The -d (or --detach) flag is when we want to run a container in the background\n# and return back to the terminal. Here we detach an ubuntu container from the\n# terminal, the output should be the id and the command exits. If we check\n# running containers, we should still see ours there:\n# CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES\n# 133261b4894a   ubuntu    \"sleep 60s\"   3 seconds ago   Up 2 seconds             vigorous_gould\n\n$ docker run <container-id> -p 3000:8000\n# The -p (or --publish) flag is used to expose port 8000 inside the container to\n# port 3000 outside the container. This is because the app inside the container\n# runs in isolation, hence the port 8000 where the app runs is private to the\n# container.\n\n$ docker run -i\n# or\n$ docker run -it\n# Docker runs our containers in a non-interactive mode i.e. they do not accept\n# inputs or work dynamically while running. The -i flag keeps input open to the\n# container, and the -t flag creates a pseudo-terminal that the shell can attach\n# to (can be combined as -it)\n\n$ docker ps -a\n# The `docker ps` command only shows running containers by default. To see all\n# containers, use the -a (or --all) flag\n# Running the above command should output something similar in the terminal:\n# CONTAINER ID   IMAGE         COMMAND    CREATED         STATUS                     PORTS     NAMES\n# 82f84bf6912b   hello-world   \"/hello\"   9 minutes ago   Exited (0) 9 minutes ago             eloquent_sammet\n\n\n$ docker stop hello-world\n# or\n$ docker start hello-world\n# The stop command simply stops one or more containers, and the start command\n# starts the container(s) up again! `docker start -a ubuntu` will attach our\n# detached container back to the terminal i.e. runs in the foreground\n\n$ docker create alpine\n# `docker create` creates a new container for us with the image specified (here,\n# alpine), the container does not auto-start unlike `docker run`. This command\n# is used to set up a container configuration and then `docker start` to shoot\n# it up when required. Note that the status is \"Created\":\n# CONTAINER ID   IMAGE         COMMAND       CREATED             STATUS           PORTS     NAMES\n# 4c71c727c73d   alpine        \"/bin/sh\"     29 seconds ago      Created                   naughty_ritchie\n\n$ docker rm 82f84\n# Removes one or more containers using their container ID.\n# P.S.: we can use only the first few characters of the entire ID to identify\n# containers\n\n$ docker images\n# Displays all images and their information, created here means the latest image\n# tag updated on Docker Hub:\n# REPOSITORY    TAG       IMAGE ID       CREATED         SIZE\n# ubuntu        latest    a8780b506fa4   9 days ago      77.8MB\n# alpine        latest    9c6f07244728   3 months ago    5.54MB\n# hello-world   latest    feb5d9fea6a5   13 months ago   13.3kB\n\n$ docker rmi\n# Removes one or more images from your system which do not have their instances\n# (or containers as we know them) running. If the image has an attached\n# container, either delete the container first or use the -f (or --force) flag\n# to forcefully delete both the container and image.\n\n$ docker pull busybox\n# The pull command downloads the specified image on our system from Docker Hub.\n\n$ docker exec -it 7b272 bash\n# This command is used to run a command in the running container's default\n# directory. Here 7b272 was our ubuntu container and the above command would\n# help us interact with the container by opening a bash session.\n\n$ docker logs <container-id>\n# Displays the information logged by the specified container\n# root@7b27222e4bb7:/# whoami\n# root\n# root@7b27222e4bb7:/# pwd\n# /\n# root@7b27222e4bb7:/# ls\n# bin  boot  dev  etc  home  lib  lib32  lib64 libx3 srv  sys  tmp  usr  var\n# root@7b27222e4bb7:/# exit\n# exit\n\n# More commands can be found at https://docs.docker.com/engine/reference/commandline/docker/\n```\n\n## The Dockerfile\nThe Dockerfile is a blueprint of a Docker image. We can mention the artifacts\nfrom our application along with their configurations into this file in the\nspecific syntax to let anyone create a Docker image of our application.\n\n### A few things to keep in mind:\n\n* It is always strictly named `Dockerfile` without any extensions\n* We have to build our custom image on top of some already available Docker base\nimage. (there is an empty image called `scratch` which literally lets you build\nan image from scratch)\n* All capitalised commands are part of the syntax, they are not case-sensitive\nbut used like a convention\n* Below is a sample Dockerfile but you can read in depth from the [official docs](https://docs.docker.com/engine/reference/builder/).\n\n```dockerfile\nFROM <base-image>\n# define base image\n\nENV USERNAME='admin'\\\n    PWD='****'\n# optionally define environmental variables\n\nRUN apt-get update\n# run linux commands inside container env, does not affect host env\n# This executes during the time of image creation\n\nCOPY <src> <target>\n# executes on the host, copies files from src (usually on the host) to target\n# on the container\n\nENTRYPOINT [\"some-script.sh\"]\n# executes an entire script as an entrypoint\n\nCMD [<args>,...]\n# always part of dockerfile, introduces entry point linux command e.g.\n# `CMD node server.js`\n# This executes after image creation only when the container from the image\n# is running.\n```\n\n### Build your images\nUse the `docker build` command after wrapping your application into a Docker\nimage to run ( or build) it.\n\n```bash\n$ docker build <path-to-dockerfile>\n# used to build an image from the specified Dockerfile\n# instead of path we could also specify a URL\n# -t tag is optional and used to name and tag your images for e.g.\n# `$ docker build -t my-image:0.1 ./home/app`\n# rebuild images everytime you make changes in the dockerfile\n```\n\n## Push your image to DockerHub\nIf you want your application's Docker image to be made publicly available for\nany Docker user, you might wanna push it to the [Docker Hub](https://hub.docker.com/) which is a\nregistry of Docker images. Make sure you have an account with a username and\npassword on Docker Hub.\n\nWhen pushing an image to Docker Hub, we must specify our Docker Hub username\nas part of the source image name. We need to create the target image with the\ntag name of username/image-name much like GitHub repositories.\n\n```bash\n$ docker login\n# to login to Docker Hub using your username and password\n\n$ docker tag <src-image>[:<src-tag>] <target-image>[:<target-tag>]\n# this tags a local src-image to a public target-image\n# e.g. `docker tag my-sample-app:1.0.0  akshitadixit/my-sample-app`\n# if tags are not specified, they're defaulted to `latest`\n\n$ docker push <target-image>[:<target-tag>]\n# uploads our image to Docker Hub\n# e.g. `docker push akshitadixit/my-sample-app`\n# this image will be accessible under your profile's repositories as\n# `https://hub.docker.com/r/username/image-name`\n```\n"
        },
        {
          "name": "dynamic-programming.md",
          "type": "blob",
          "size": 4.0634765625,
          "content": "---\ncategory: Algorithms & Data Structures\nname: Dynamic Programming\ncontributors:\n    - [\"Akashdeep Goel\", \"http://github.com/akashdeepgoel\"]\n    - [\"Miltiadis Stouras\", \"https://github.com/mstou\"]\n---\n\n# Dynamic Programming\n\n## Introduction\n\nDynamic Programming is a powerful technique used for solving a particular class of problems as we will see. The idea is very simple, If you have solved a problem with the given input, then save the result for future reference, so as to avoid solving the same problem again.\n\nAlways remember!\n\"Those who can't remember the past are condemned to repeat it\"\n\n## Ways of solving such Problems\n\n1. *Top-Down* : Start solving the given problem by breaking it down. If you see that the problem has been solved already, then just return the saved answer. If it has not been solved, solve it and save the answer. This is usually easy to think of and very intuitive. This is referred to as Memoization.\n\n2. *Bottom-Up* : Analyze the problem and see the order in which the sub-problems are solved and start solving from the trivial subproblem, up towards the given problem. In this process, it is guaranteed that the subproblems are solved before solving the problem. This is referred to as Dynamic Programming.\n\n## Example of Dynamic Programming\n\nThe Longest Increasing Subsequence problem is to find the longest increasing subsequence of a given sequence. Given a sequence `S={ a1, a2, a3, a4, ............., an-1, an }` we have to find a longest subset such that for all `j` and `i`,  `j<i` in the subset `aj<ai`.\nFirst of all we have to find the value of the longest subsequences(LSi) at every index i with last element of sequence being ai. Then largest LSi would be the longest subsequence in the given sequence. To begin LSi is assigned to be one since ai is element of the sequence(Last element). Then for all `j` such that `j<i` and `aj<ai`, we find Largest LSj and add it to LSi. Then algorithm take *O(n2)* time.\n\nPseudo-code for finding the length of the longest increasing subsequence:\nThis algorithms complexity could be reduced by using better data structure rather than array. Storing predecessor array and variable like `largest_sequences_so_far` and its index would save a lot time.\n\nSimilar concept could be applied in finding longest path in Directed acyclic graph.\n\n```python\nfor i=0 to n-1\n    LS[i]=1\n    for j=0 to i-1\n        if (a[i] >  a[j] and LS[i]<LS[j])\n            LS[i] = LS[j]+1\nfor i=0 to n-1\n    if (largest < LS[i])\n```\n\n### Some Famous DP Problems\n\n- [Floyd Warshall Algorithm - Tutorial and C Program source code](http://www.thelearningpoint.net/computer-science/algorithms-all-to-all-shortest-paths-in-graphs---floyd-warshall-algorithm-with-c-program-source-code)\n- [Integer Knapsack Problem - Tutorial and C Program source code](http://www.thelearningpoint.net/computer-science/algorithms-dynamic-programming---the-integer-knapsack-problem)\n- [Longest Common Subsequence - Tutorial and C Program source code](http://www.thelearningpoint.net/computer-science/algorithms-dynamic-programming---longest-common-subsequence)\n\n## Online Resources\n\n* MIT 6.006: [Lessons 19,20,21,22](https://www.youtube.com/playlist?list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb)\n* TopCoder: [Dynamic Programming from Novice to Advanced](https://www.topcoder.com/community/data-science/data-science-tutorials/dynamic-programming-from-novice-to-advanced/)\n* [CodeChef](https://www.codechef.com/wiki/tutorial-dynamic-programming)\n* [InterviewBit](https://www.interviewbit.com/courses/programming/topics/dynamic-programming/)\n* GeeksForGeeks:\n  * [Overlapping Subproblems](https://www.geeksforgeeks.org/dynamic-programming-set-1/)\n  * [Tabulation vs Memoization](https://www.geeksforgeeks.org/tabulation-vs-memoizatation/)\n  * [Optimal Substructure Property](https://www.geeksforgeeks.org/dynamic-programming-set-2-optimal-substructure-property/)\n  * [How to solve a DP problem](https://www.geeksforgeeks.org/solve-dynamic-programming-problem/)\n* [How to write DP solutions](https://www.quora.com/Are-there-any-good-resources-or-tutorials-for-dynamic-programming-DP-besides-the-TopCoder-tutorial/answer/Michal-Danilák)\n"
        },
        {
          "name": "easylang.md",
          "type": "blob",
          "size": 4.0263671875,
          "content": "---\nname: Easylang\ncontributors:\n    - [\"chkas\", \"https://github.com/chkas\"]\nfilename: easylang.el\n---\n\n**Easylang** is a simple programming language with built-in graphical functions and an easy-to-use and offline usable browser IDE. Its simple syntax and semantics make it well suited as a teaching and learning programming language. You can also use it to write graphical applications that you can embed in a web page. \n\n*Easylang* is statically typed and has as data types only strings and numbers (floating point), resizeable arrays of strings and numbers and arrays of arrays.\n\n[The browser IDE](https://easylang.online/ide/) includes various tutorials, including one for beginners.\n\n```\nprint \"Hello world\"\n#\n# number variable (64 bit floating point)\n#\nh = 3.14\nprint h\n#\n# string variable\n#\nstr$ = \"monkey\"\n# strings can grow\nstr$ &= \" circus\" \nprint str$\n#\n# blocks end with 'end' or a dot, a newline has no\n# other meaning than a space\n#\nfor i = 1 to 5\n  sum += i * i\n.\nprint sum\n#\n# functions have value and reference\n# parameters, no return values\n#\nfunc gcd a b . res .\n  # a and b are value parameters\n  # res is a reference parameter\n  while b <> 0\n    # h is a local variable, because \n    # it is first used in the function\n    h = b\n    b = a mod b\n    a = h\n  .\n  res = a\n.\ncall gcd 120 35 r\nprint r\n#\n# strings can be concatenated and numbers are\n# automatically converted to strings\n#\nprint \"1 + 2 = \" & 1 + 2\n#\n# array of numbers\n#\na[] = [ 2.1 3.14 3 ]\n#\n# arrays can grow\na[] &= 4\nprint a[]\n#\n# arrays, strings and numbers are copied by value\n#\nb[] = a[]\na[] &= 4\nprint a[] ; print b[]\n#\n# array swapping ist fast\n#\nswap a[] b[]\nprint a[] ; print b[]\n# \n# array of strings\n#\nfruits$[] = [ \"apple\" \"banana\" \"orange\" ]\n#\n# for-in iterates over the elements of an array\n#\nfor fruit$ in fruits$[]\n  print fruit$\n.\n#\n# strings are also used for single characters\n#\nletters$[] = str_chars \"ping\"\nprint letters$[]\nletters$[1] = \"o\"\nprint str_join letters$[]\n#\n# 2-dimensional arrays are arrays of arrays\n# this defines 3 arrays with length 4\n#\nlen a[][] 3\nfor i range len a[][]\n  len a[i][] 4\n.\na[1][2] = 99\nprint a[][]\n#\n# builtin functions\nif sin 90 = 1\n  print \"angles are in degree\"\n.\nprint pow 2 8\n# seconds since 1970\nprint floor sys_time\n# random numbers\nprint randomf\nprint random 6 + 1\n# \n# hour and minutes\nprint substr time_str sys_time 11 5\n# \nprint str_ord \"A\"\nprint str_chr 65\n# \n# set number format\nnumfmt 0 4\nprint sqrt 2\nprint pi\nprint logn 10\n# \na$[] = str_split \"10,15,22\" \",\"\nprint a$[]\nprint 2 * number a$[0]\nprint len a$[]\nprint len \"Hello\"\n#\n# With 'break n' you can leave nested loops and a function\n#\nnames$[] = [ ]\nfunc name2id name$ . id .\n  for id range len names$[]\n    if names$[id] = name$\n      # leave loop and function\n      break 2\n    .\n  .\n  names$[] &= name$\n.\ncall name2id \"alice\" id ; print id\ncall name2id \"bob\" id ; print id\ncall name2id \"alice\" id ; print i\n#\n# with 'repeat' you can make loops, which you can leave\n# in the loop body using 'until'\n#\nsum = 0\nrepeat\n  s$ = input\n  until s$ = \"\"\n  sum += number s$\n.\nprint \"sum: \" & sum\n#\n# \"input\" reads a string from the \"input_data\" section, \n# if it exists, otherwise via a prompt.\n#\ninput_data\n10\n-2\n6\n```\n\nBuilt-in graphic primitives and event-driven programming\n\n```\n# simple drawing with the mouse\n# \nset_linewidth 4\nset_color 900\n# the colors are coded from 0 to 999, with \n# the left digit specifying the red component,\n# the middle digit the green component and\n# the right digit the blue component. \n# \non mouse_down\n  down = 1\n  move_pen mouse_x mouse_y\n  # moves the drawing pen to the actual mouse position\n  draw_circle 2\n.\non mouse_up\n  down = 0\n.\non mouse_move\n  if down = 1\n    draw_line mouse_x mouse_y\n  .\n.\n```\n\n```\n# an animated pendulum\n#\non animate\n  # The animate event occurs after each screen refresh.\n  #\n  clear_screen\n  move_pen 50 50\n  draw_circle 1\n  x = 50 + 40 * sin ang\n  y = 50 - 40 * cos ang\n  draw_line x y\n  draw_circle 5\n  vel += sin ang / 5\n  ang += vel\n.\nang = 10\n```\n\n* [More about Easylang](https://easylang.online/)\n\n* [Source code](https://github.com/chkas/easylang)\n\n"
        },
        {
          "name": "edn.md",
          "type": "blob",
          "size": 3.16015625,
          "content": "---\nname: EDN\nfilename: learnedn.edn\ncontributors:\n  - [\"Jason Yeo\", \"https://github.com/jsyeo\"]\n  - [\"Jonathan D Johnston\", \"https://github.com/jdjohnston\"]\n---\n\nExtensible Data Notation (EDN) is a format for serializing data.\n\nEDN is a subset of the syntax used by Clojure. Reading data defined by EDN is\nsafer than that defined by the full Clojure syntax, especially from untrusted\nsources. EDN is restricted to data, no code. It is similar in intent to JSON.\nThough it is more commonly used in Clojure, there are implementations of EDN\nfor many other languages.\n\nThe main benefit of EDN over JSON and YAML is that it is extensible. We\nwill see how it is extended later on.\n\n```clojure\n; Comments start with a semicolon.\n; Anything after the semicolon is ignored.\n\n;;;;;;;;;;;;;;;;;;;\n;;; Basic Types ;;;\n;;;;;;;;;;;;;;;;;;;\n\nnil         ; also known in other languages as null\n\n; Booleans\ntrue\nfalse\n\n; Strings are enclosed in double quotes\n\"hungarian breakfast\"\n\"farmer's cheesy omelette\"\n\n; Characters are preceded by backslashes\n\\g \\r \\a \\c \\e\n\n; Keywords start with a colon. They behave like enums. Kind of\n; like symbols in Ruby.\n:eggs\n:cheese\n:olives\n\n; Symbols are used to represent identifiers. \n; You can namespace symbols by using /. Whatever precedes / is\n; the namespace of the symbol.\nspoon\nkitchen/spoon ; not the same as spoon\nkitchen/fork\ngithub/fork   ; you can't eat with this\n\n; Integers and floats\n42\n3.14159\n\n; Lists are sequences of values\n(:bun :beef-patty 9 \"yum!\")\n\n; Vectors allow random access\n[:gelato 1 2 -2]\n\n; Maps are associative data structures that associate the key with its value\n{:eggs        2\n :lemon-juice 3.5\n :butter      1}\n\n; You're not restricted to using keywords as keys\n{[1 2 3 4] \"tell the people what she wore\",\n [5 6 7 8] \"the more you see the more you hate\"}\n\n; You may use commas for readability. They are treated as whitespace.\n\n; Sets are collections that contain unique elements.\n#{:a :b 88 \"huat\"}\n\n;;;;;;;;;;;;;;;;;;;;;;;\n;;; Tagged Elements ;;;\n;;;;;;;;;;;;;;;;;;;;;;;\n\n; EDN can be extended by tagging elements with # symbols.\n\n#MyYelpClone/MenuItem {:name \"eggs-benedict\" :rating 10}\n\n; Let me explain this with a Clojure example. Suppose I want to transform that\n; piece of EDN into a MenuItem record.\n\n(defrecord MenuItem [name rating])\n\n; defrecord defined, among other things, map->MenuItem which will take a map\n; of field names (as keywords) to values and generate a user.MenuItem record\n\n; To transform EDN to Clojure values, I will need to use the built-in EDN\n; reader, clojure.edn/read-string\n\n(clojure.edn/read-string \"{:eggs 2 :butter 1 :flour 5}\")\n; -> {:eggs 2 :butter 1 :flour 5}\n\n; To transform tagged elements, pass to clojure.edn/read-string an option map\n; with a :readers map that maps tag symbols to data-reader functions, like so\n\n(clojure.edn/read-string\n    {:readers {'MyYelpClone/MenuItem map->MenuItem}}\n    \"#MyYelpClone/MenuItem {:name \\\"eggs-benedict\\\" :rating 10}\")\n; -> #user.MenuItem{:name \"eggs-benedict\", :rating 10}\n```\n\n# References\n\n- [EDN spec](https://github.com/edn-format/edn)\n- [Implementations](https://github.com/edn-format/edn/wiki/Implementations)\n- [Tagged Elements](http://www.compoundtheory.com/clojure-edn-walkthrough/)\n"
        },
        {
          "name": "el",
          "type": "tree",
          "content": null
        },
        {
          "name": "elisp.md",
          "type": "blob",
          "size": 10.689453125,
          "content": "---\nname: Emacs Lisp\ncontributors:\n    - [\"Bastien Guerry\", \"https://bzg.fr\"]\n    - [\"Saurabh Sandav\", \"http://github.com/SaurabhSandav\"]\n    - [\"rilysh\", \"https://github.com/rilysh\"]\nfilename: learn-emacs-lisp.el\n---\n\n```elisp\n;; This gives an introduction to Emacs Lisp in 15 minutes (v0.2d)\n;;\n;; First make sure you read this text by Peter Norvig:\n;; http://norvig.com/21-days.html\n;;\n;; Then install latest version of GNU Emacs:\n;;\n;; Debian: apt-get install emacs (or see your distro instructions)\n;; OSX: https://emacsformacosx.com/\n;; Windows: https://ftp.gnu.org/gnu/emacs/windows/\n;;\n;; More general information can be found at:\n;; http://www.gnu.org/software/emacs/#Obtaining\n\n;; Important warning:\n;;\n;; Going through this tutorial won't damage your computer unless\n;; you get so angry that you throw it on the floor.  In that case,\n;; I hereby decline any responsibility.  Have fun!\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;\n;; Fire up Emacs.\n;;\n;; Hit the `q' key to dismiss the welcome message.\n;;\n;; Now look at the gray line at the bottom of the window:\n;;\n;; \"*scratch*\" is the name of the editing space you are now in.\n;; This editing space is called a \"buffer\".\n;;\n;; The scratch buffer is the default buffer when opening Emacs.\n;; You are never editing files: you are editing buffers that you\n;; can save to a file.\n;;\n;; \"Lisp interaction\" refers to a set of commands available here.\n;;\n;; Emacs has a built-in set of commands available in every buffer,\n;; and several subsets of commands available when you activate a\n;; specific mode.  Here we use the `lisp-interaction-mode', which\n;; comes with commands to evaluate and navigate within Elisp code.\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;\n;; Semi-colons start comments anywhere on a line.\n;;\n;; Elisp programs are made of symbolic expressions (\"sexps\"):\n(+ 2 2)\n\n;; This symbolic expression reads as \"Add 2 to 2\".\n\n;; Sexps are enclosed into parentheses, possibly nested:\n(+ 2 (+ 1 1))\n\n;; A symbolic expression contains atoms or other symbolic\n;; expressions.  In the above examples, 1 and 2 are atoms,\n;; (+ 2 (+ 1 1)) and (+ 1 1) are symbolic expressions.\n\n;; From `lisp-interaction-mode' you can evaluate sexps.\n;; Put the cursor right after the closing parenthesis then\n;; hold down the control and hit the j keys (\"C-j\" for short).\n\n(+ 3 (+ 1 2))\n;;           ^ cursor here\n;; `C-j' => 6\n\n;; `C-j' inserts the result of the evaluation in the buffer.\n\n;; `C-xC-e' displays the same result in Emacs bottom line,\n;; called the \"echo area\". We will generally use `C-xC-e',\n;; as we don't want to clutter the buffer with useless text.\n\n;; `setq' stores a value into a variable:\n(setq my-name \"Bastien\")\n;; `C-xC-e' => \"Bastien\" (displayed in the echo area)\n\n;; `insert' will insert \"Hello!\" where the cursor is:\n(insert \"Hello!\")\n;; `C-xC-e' => \"Hello!\"\n\n;; We used `insert' with only one argument \"Hello!\", but\n;; we can pass more arguments -- here we use two:\n\n(insert \"Hello\" \" world!\")\n;; `C-xC-e' => \"Hello world!\"\n\n;; You can use variables instead of strings:\n(insert \"Hello, I am \" my-name)\n;; `C-xC-e' => \"Hello, I am Bastien\"\n\n;; You can combine sexps into functions:\n(defun hello () (insert \"Hello, I am \" my-name))\n;; `C-xC-e' => hello\n\n;; You can evaluate functions:\n(hello)\n;; `C-xC-e' => Hello, I am Bastien\n\n;; The empty parentheses in the function's definition means that\n;; it does not accept arguments.  But always using `my-name' is\n;; boring, let's tell the function to accept one argument (here\n;; the argument is called \"name\"):\n\n(defun hello (name) (insert \"Hello \" name))\n;; `C-xC-e' => hello\n\n;; Now let's call the function with the string \"you\" as the value\n;; for its unique argument:\n(hello \"you\")\n;; `C-xC-e' => \"Hello you\"\n\n;; Yeah!\n\n;; Take a breath.\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;\n;; Now switch to a new buffer named \"*test*\" in another window:\n\n(switch-to-buffer-other-window \"*test*\")\n;; `C-xC-e'\n;; => [screen has two windows and cursor is in the *test* buffer]\n\n;; Mouse over the top window and left-click to go back.  Or you can\n;; use `C-xo' (i.e. hold down control-x and hit o) to go to the other\n;; window interactively.\n\n;; You can combine several sexps with `progn':\n(progn\n  (switch-to-buffer-other-window \"*test*\")\n  (hello \"you\"))\n;; `C-xC-e'\n;; => [The screen has two windows and cursor is in the *test* buffer]\n\n;; Now if you don't mind, I'll stop asking you to hit `C-xC-e': do it\n;; for every sexp that follows.\n\n;; Always go back to the *scratch* buffer with the mouse or `C-xo'.\n\n;; It's often useful to erase the buffer:\n(progn\n  (switch-to-buffer-other-window \"*test*\")\n  (erase-buffer)\n  (hello \"there\"))\n\n;; Or to go back to the other window:\n(progn\n  (switch-to-buffer-other-window \"*test*\")\n  (erase-buffer)\n  (hello \"you\")\n  (other-window 1))\n\n;; You can bind a value to a local variable with `let':\n(let ((local-name \"you\"))\n  (switch-to-buffer-other-window \"*test*\")\n  (erase-buffer)\n  (hello local-name)\n  (other-window 1))\n\n;; No need to use `progn' in that case, since `let' also combines\n;; several sexps.\n\n;; Let's format a string:\n(format \"Hello %s!\\n\" \"visitor\")\n\n;; %s is a place-holder for a string, replaced by \"visitor\".\n;; \\n is the newline character.\n\n;; Let's refine our function by using format:\n(defun hello (name)\n  (insert (format \"Hello %s!\\n\" name)))\n\n(hello \"you\")\n\n;; Let's create another function which uses `let':\n(defun greeting (name)\n  (let ((your-name \"Bastien\"))\n    (insert (format \"Hello %s!\\n\\nI am %s.\"\n                    name       ; the argument of the function\n                    your-name  ; the let-bound variable \"Bastien\"\n                    ))))\n\n;; And evaluate it:\n(greeting \"you\")\n\n;; Some functions are interactive:\n(read-from-minibuffer \"Enter your name: \")\n\n;; Evaluating this function returns what you entered at the prompt.\n\n;; Let's make our `greeting' function prompt for your name:\n(defun greeting (from-name)\n  (let ((your-name (read-from-minibuffer \"Enter your name: \")))\n    (insert (format \"Hello!\\n\\nI am %s and you are %s.\"\n                    from-name ; the argument of the function\n                    your-name ; the let-bound var, entered at prompt\n                    ))))\n\n(greeting \"Bastien\")\n\n;; Let's complete it by displaying the results in the other window:\n(defun greeting (from-name)\n  (let ((your-name (read-from-minibuffer \"Enter your name: \")))\n    (switch-to-buffer-other-window \"*test*\")\n    (erase-buffer)\n    (insert (format \"Hello %s!\\n\\nI am %s.\" your-name from-name))\n    (other-window 1)))\n\n;; Now test it:\n(greeting \"Bastien\")\n\n;; Take a breath.\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;\n;; Let's store a list of names:\n;; If you want to create a literal list of data, use ' to stop it from\n;; being evaluated - literally, \"quote\" the data.\n(setq list-of-names '(\"Sarah\" \"Chloe\" \"Mathilde\"))\n\n;; Get the first element of this list with `car':\n(car list-of-names)\n\n;; Get a list of all but the first element with `cdr':\n(cdr list-of-names)\n\n;; Add an element to the beginning of a list with `push':\n(push \"Stephanie\" list-of-names)\n\n;; NOTE: `car' and `cdr' don't modify the list, but `push' does.\n;; This is an important difference: some functions don't have any\n;; side-effects (like `car') while others have (like `push').\n\n;; Let's call `hello' for each element in `list-of-names':\n(mapcar 'hello list-of-names)\n\n;; Refine `greeting' to say hello to everyone in `list-of-names':\n(defun greeting ()\n    (switch-to-buffer-other-window \"*test*\")\n    (erase-buffer)\n    (mapcar 'hello list-of-names)\n    (other-window 1))\n\n(greeting)\n\n;; Remember the `hello' function we defined above?  It takes one\n;; argument, a name.  `mapcar' calls `hello', successively using each\n;; element of `list-of-names' as the argument for `hello'.\n\n;; Now let's arrange a bit what we have in the displayed buffer:\n\n(defun replace-hello-by-bonjour ()\n    (switch-to-buffer-other-window \"*test*\")\n    (goto-char (point-min))\n    (while (search-forward \"Hello\")\n      (replace-match \"Bonjour\"))\n    (other-window 1))\n\n;; (goto-char (point-min)) goes to the beginning of the buffer.\n;; (search-forward \"Hello\") searches for the string \"Hello\".\n;; (while x y) evaluates the y sexp(s) while x returns something.\n;; If x returns `nil' (nothing), we exit the while loop.\n\n(replace-hello-by-bonjour)\n\n;; You should see all occurrences of \"Hello\" in the *test* buffer\n;; replaced by \"Bonjour\".\n\n;; You should also get an error: \"Search failed: Hello\".\n;;\n;; To avoid this error, you need to tell `search-forward' whether it\n;; should stop searching at some point in the buffer, and whether it\n;; should silently fail when nothing is found:\n\n;; (search-forward \"Hello\" nil t) does the trick:\n\n;; The `nil' argument says: the search is not bound to a position.\n;; The `'t' argument says: silently fail when nothing is found.\n\n;; We use this sexp in the function below, which doesn't throw an error:\n\n(defun hello-to-bonjour ()\n    (switch-to-buffer-other-window \"*test*\")\n    (erase-buffer)\n    ;; Say hello to names in `list-of-names'\n    (mapcar 'hello list-of-names)\n    (goto-char (point-min))\n    ;; Replace \"Hello\" by \"Bonjour\"\n    (while (search-forward \"Hello\" nil t)\n      (replace-match \"Bonjour\"))\n    (other-window 1))\n\n(hello-to-bonjour)\n\n;; Let's boldify the names:\n\n(defun boldify-names ()\n    (switch-to-buffer-other-window \"*test*\")\n    (goto-char (point-min))\n    (while (re-search-forward \"Bonjour \\\\(.+\\\\)!\" nil t)\n      (add-text-properties (match-beginning 1)\n                           (match-end 1)\n                           (list 'face 'bold)))\n    (other-window 1))\n\n;; This functions introduces `re-search-forward': instead of\n;; searching for the string \"Bonjour\", you search for a pattern,\n;; using a \"regular expression\" (abbreviated in the prefix \"re-\").\n\n;; The regular expression is \"Bonjour \\\\(.+\\\\)!\" and it reads:\n;; the string \"Bonjour \", and\n;; a group of            | this is the \\\\( ... \\\\) construct\n;;   any character       | this is the .\n;;   possibly repeated   | this is the +\n;; and the \"!\" string.\n\n;; Ready?  Test it!\n\n(boldify-names)\n\n;; `add-text-properties' adds... text properties, like a face.\n\n;; OK, we are done.  Happy hacking!\n\n;; If you want to know more about a variable or a function:\n;;\n;; C-h v a-variable RET\n;; C-h f a-function RET\n;;\n;; To read the Emacs Lisp manual with Emacs:\n;;\n;; C-h i m elisp RET\n;;\n;; To read an online introduction to Emacs Lisp:\n;; https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html\n```\n\n### Further Reading\n- [GNU Elisp Manual](https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html)\n- [Emacs Wiki](https://www.emacswiki.org/emacs/LearningEmacs)\n- [Emacs Docs](https://emacsdocs.org/docs/elisp/Emacs-Lisp)\n- [Mpre Elisp Docs](https://www.math.utah.edu/docs/info/elisp_22.html)\n"
        },
        {
          "name": "elixir.md",
          "type": "blob",
          "size": 12.2900390625,
          "content": "---\nname: Elixir\ncontributors:\n    - [\"Joao Marques\", \"https://github.com/mrshankly\"]\n    - [\"Dzianis Dashkevich\", \"https://github.com/dskecse\"]\n    - [\"Ryan Plant\", \"https://github.com/ryanplant-au\"]\n    - [\"Ev Bogdanov\", \"https://github.com/evbogdanov\"]\nfilename: learnelixir.ex\n---\n\nElixir is a modern functional language built on top of the Erlang VM.\nIt's fully compatible with Erlang, but features a more standard syntax\nand many more features.\n\n```elixir\n# Single line comments start with a number symbol.\n\n# There's no multi-line comment,\n# but you can stack multiple comments.\n\n# To use the Elixir shell use the `iex` command.\n# Compile your modules with the `elixirc` command.\n\n# Both should be in your path if you installed Elixir correctly.\n\n## ---------------------------\n## -- Basic types\n## ---------------------------\n\n# There are numbers\n3    # integer\n0x1F # integer\n3.0  # float\n\n# Atoms are constants whose values are their own name. They start with `:`.\n:hello # atom\n\n# Tuples that are stored contiguously in memory.\n{1,2,3} # tuple\n\n# We can access a tuple element with the `elem` function:\nelem({1, 2, 3}, 0) #=> 1\n\n# Lists that are implemented as linked lists.\n[1,2,3] # list\n\n# We can access the head and tail of a list as follows:\n[head | tail] = [1,2,3]\nhead #=> 1\ntail #=> [2,3]\n\n# In Elixir, just like in Erlang, the `=` denotes pattern matching and\n# not an assignment.\n#\n# This means that the left-hand side (pattern) is matched against a\n# right-hand side.\n#\n# This is how the above example of accessing the head and tail of a list works.\n\n# A pattern match will error when the sides don't match, in this example\n# the tuples have different sizes.\n# {a, b, c} = {1, 2} #=> ** (MatchError) no match of right hand side value: {1,2}\n\n# There are also binaries\n<<1,2,3>> # binary\n\n# Strings and char lists\n\"hello\" # string\n'hello' # char list\n\n# Multi-line strings\n\"\"\"\nI'm a multi-line\nstring.\n\"\"\"\n#=> \"I'm a multi-line\\nstring.\\n\"\n\n# Strings are all encoded in UTF-8:\n\"héllò\" #=> \"héllò\"\n\n# Strings are really just binaries, and char lists are just lists.\n<<?a, ?b, ?c>> #=> \"abc\"\n[?a, ?b, ?c]   #=> 'abc'\n\n# `?a` in Elixir returns the ASCII integer for the letter `a`\n?a #=> 97\n\n# To concatenate lists use `++`, for binaries use `<>`\n[1,2,3] ++ [4,5]     #=> [1,2,3,4,5]\n'hello ' ++ 'world'  #=> 'hello world'\n\n<<1,2,3>> <> <<4,5>> #=> <<1,2,3,4,5>>\n\"hello \" <> \"world\"  #=> \"hello world\"\n\n# Ranges are represented as `start..end` (both inclusive)\n1..10 #=> 1..10\nlower..upper = 1..10 # Can use pattern matching on ranges as well\n[lower, upper] #=> [1, 10]\n\n# Maps are key-value pairs\ngenders = %{\"david\" => \"male\", \"gillian\" => \"female\"}\ngenders[\"david\"] #=> \"male\"\n\n# Maps with atom keys can be used like this\ngenders = %{david: \"male\", gillian: \"female\"}\ngenders.gillian #=> \"female\"\n\n## ---------------------------\n## -- Operators\n## ---------------------------\n\n# Some math\n1 + 1  #=> 2\n10 - 5 #=> 5\n5 * 2  #=> 10\n10 / 2 #=> 5.0\n\n# In Elixir the operator `/` always returns a float.\n\n# To do integer division use `div`\ndiv(10, 2) #=> 5\n\n# To get the division remainder use `rem`\nrem(10, 3) #=> 1\n\n# There are also boolean operators: `or`, `and` and `not`.\n# These operators expect a boolean as their first argument.\ntrue and true #=> true\nfalse or true #=> true\n# 1 and true\n#=> ** (BadBooleanError) expected a boolean on left-side of \"and\", got: 1\n\n# Elixir also provides `||`, `&&` and `!` which accept arguments of any type.\n# All values except `false` and `nil` will evaluate to true.\n1 || true  #=> 1\nfalse && 1 #=> false\nnil && 20  #=> nil\n!true #=> false\n\n# For comparisons we have: `==`, `!=`, `===`, `!==`, `<=`, `>=`, `<` and `>`\n1 == 1 #=> true\n1 != 1 #=> false\n1 < 2  #=> true\n\n# `===` and `!==` are more strict when comparing integers and floats:\n1 == 1.0  #=> true\n1 === 1.0 #=> false\n\n# Elixir operators are strict in their arguments, with the exception\n# of comparison operators that work across different data types:\n1 < :hello #=> true\n\n# This enables building collections of mixed types:\n[\"string\", 123, :atom]\n\n# While there is an overall order of all data types,\n# to quote Joe Armstrong on this: \"The actual order is not important,\n# but that a total ordering is well defined is important.\"\n\n## ---------------------------\n## -- Control Flow\n## ---------------------------\n\n# `if` expression\nif false do\n  \"This will never be seen\"\nelse\n  \"This will\"\nend\n\n# There's also `unless`\nunless true do\n  \"This will never be seen\"\nelse\n  \"This will\"\nend\n\n# Remember pattern matching? Many control-flow structures in Elixir rely on it.\n\n# `case` allows us to compare a value against many patterns:\ncase {:one, :two} do\n  {:four, :five} ->\n    \"This won't match\"\n  {:one, x} ->\n    \"This will match and bind `x` to `:two` in this clause\"\n  _ ->\n    \"This will match any value\"\nend\n\n# It's common to bind the value to `_` if we don't need it.\n# For example, if only the head of a list matters to us:\n[head | _] = [1,2,3]\nhead #=> 1\n\n# For better readability we can do the following:\n[head | _tail] = [:a, :b, :c]\nhead #=> :a\n\n# `cond` lets us check for many conditions at the same time.\n# Use `cond` instead of nesting many `if` expressions.\ncond do\n  1 + 1 == 3 ->\n    \"I will never be seen\"\n  2 * 5 == 12 ->\n    \"Me neither\"\n  1 + 2 == 3 ->\n    \"But I will\"\nend\n\n# It is common to set the last condition equal to `true`, which will always match.\ncond do\n  1 + 1 == 3 ->\n    \"I will never be seen\"\n  2 * 5 == 12 ->\n    \"Me neither\"\n  true ->\n    \"But I will (this is essentially an else)\"\nend\n\n# `try/catch` is used to catch values that are thrown, it also supports an\n# `after` clause that is invoked whether or not a value is caught.\ntry do\n  throw(:hello)\ncatch\n  message -> \"Got #{message}.\"\nafter\n  IO.puts(\"I'm the after clause.\")\nend\n#=> I'm the after clause\n# \"Got :hello\"\n\n## ---------------------------\n## -- Modules and Functions\n## ---------------------------\n\n# Anonymous functions (notice the dot)\nsquare = fn(x) -> x * x end\nsquare.(5) #=> 25\n\n# They also accept many clauses and guards.\n# Guards let you fine tune pattern matching,\n# they are indicated by the `when` keyword:\nf = fn\n  x, y when x > 0 -> x + y\n  x, y -> x * y\nend\n\nf.(1, 3)  #=> 4\nf.(-1, 3) #=> -3\n\n# Elixir also provides many built-in functions.\n# These are available in the current scope.\nis_number(10)    #=> true\nis_list(\"hello\") #=> false\nelem({1,2,3}, 0) #=> 1\n\n# You can group several functions into a module. Inside a module use `def`\n# to define your functions.\ndefmodule Math do\n  def sum(a, b) do\n    a + b\n  end\n\n  def square(x) do\n    x * x\n  end\nend\n\nMath.sum(1, 2)  #=> 3\nMath.square(3) #=> 9\n\n# To compile our simple Math module save it as `math.ex` and use `elixirc`\n# in your terminal: elixirc math.ex\n\n# Inside a module we can define functions with `def` and private functions with `defp`.\n# A function defined with `def` is available to be invoked from other modules,\n# a private function can only be invoked locally.\ndefmodule PrivateMath do\n  def sum(a, b) do\n    do_sum(a, b)\n  end\n\n  defp do_sum(a, b) do\n    a + b\n  end\nend\n\nPrivateMath.sum(1, 2)    #=> 3\n# PrivateMath.do_sum(1, 2) #=> ** (UndefinedFunctionError)\n\n# Function declarations also support guards and multiple clauses.\n# When a function with multiple clauses is called, the first function\n# that satisfies the clause will be invoked.\n# Example: invoking area({:circle, 3}) will call the second area\n# function defined below, not the first:\ndefmodule Geometry do\n  def area({:rectangle, w, h}) do\n    w * h\n  end\n\n  def area({:circle, r}) when is_number(r) do\n    3.14 * r * r\n  end\nend\n\nGeometry.area({:rectangle, 2, 3}) #=> 6\nGeometry.area({:circle, 3})       #=> 28.25999999999999801048\n# Geometry.area({:circle, \"not_a_number\"})\n#=> ** (FunctionClauseError) no function clause matching in Geometry.area/1\n\n# Due to immutability, recursion is a big part of Elixir\ndefmodule Recursion do\n  def sum_list([head | tail], acc) do\n    sum_list(tail, acc + head)\n  end\n\n  def sum_list([], acc) do\n    acc\n  end\nend\n\nRecursion.sum_list([1,2,3], 0) #=> 6\n\n# Elixir modules support attributes, there are built-in attributes and you\n# may also add custom ones.\ndefmodule MyMod do\n  @moduledoc \"\"\"\n  This is a built-in attribute on an example module.\n  \"\"\"\n\n  @my_data 100 # This is a custom attribute.\n  IO.inspect(@my_data) #=> 100\nend\n\n# The pipe operator |> allows you to pass the output of an expression\n# as the first parameter into a function. \n\nRange.new(1,10)\n|> Enum.map(fn x -> x * x end)\n|> Enum.filter(fn x -> rem(x, 2) == 0 end)\n#=> [4, 16, 36, 64, 100]\n\n## ---------------------------\n## -- Structs and Exceptions\n## ---------------------------\n\n# Structs are extensions on top of maps that bring default values,\n# compile-time guarantees and polymorphism into Elixir.\ndefmodule Person do\n  defstruct name: nil, age: 0, height: 0\nend\n\njoe_info = %Person{ name: \"Joe\", age: 30, height: 180 }\n#=> %Person{age: 30, height: 180, name: \"Joe\"}\n\n# Access the value of name\njoe_info.name #=> \"Joe\"\n\n# Update the value of age\nolder_joe_info = %{ joe_info | age: 31 }\n#=> %Person{age: 31, height: 180, name: \"Joe\"}\n\n# The `try` block with the `rescue` keyword is used to handle exceptions\ntry do\n  raise \"some error\"\nrescue\n  RuntimeError -> \"rescued a runtime error\"\n  _error -> \"this will rescue any error\"\nend\n#=> \"rescued a runtime error\"\n\n# All exceptions have a message\ntry do\n  raise \"some error\"\nrescue\n  x in [RuntimeError] ->\n    x.message\nend\n#=> \"some error\"\n\n## ---------------------------\n## -- Concurrency\n## ---------------------------\n\n# Elixir relies on the actor model for concurrency. All we need to write\n# concurrent programs in Elixir are three primitives: spawning processes,\n# sending messages and receiving messages.\n\n# To start a new process we use the `spawn` function, which takes a function\n# as argument.\nf = fn -> 2 * 2 end #=> #Function<erl_eval.20.80484245>\nspawn(f) #=> #PID<0.40.0>\n\n# `spawn` returns a pid (process identifier), you can use this pid to send\n# messages to the process. To do message passing we use the `send` operator.\n# For all of this to be useful we need to be able to receive messages. This is\n# achieved with the `receive` mechanism:\n\n# The `receive do` block is used to listen for messages and process\n# them when they are received. A `receive do` block will only\n# process one received message. In order to process multiple\n# messages, a function with a `receive do` block must recursively\n# call itself to get into the `receive do` block again.\n\ndefmodule Geometry do\n  def area_loop do\n    receive do\n      {:rectangle, w, h} ->\n        IO.puts(\"Area = #{w * h}\")\n        area_loop()\n      {:circle, r} ->\n        IO.puts(\"Area = #{3.14 * r * r}\")\n        area_loop()\n    end\n  end\nend\n\n# Compile the module and create a process that evaluates `area_loop` in the shell\npid = spawn(fn -> Geometry.area_loop() end) #=> #PID<0.40.0>\n# Alternatively\npid = spawn(Geometry, :area_loop, [])\n\n# Send a message to `pid` that will match a pattern in the receive statement\nsend pid, {:rectangle, 2, 3}\n#=> Area = 6\n#   {:rectangle,2,3}\n\nsend pid, {:circle, 2}\n#=> Area = 12.56000000000000049738\n#   {:circle,2}\n\n# The shell is also a process, you can use `self` to get the current pid\nself() #=> #PID<0.27.0>\n\n## ---------------------------\n## -- Agents\n## ---------------------------\n\n# An agent is a process that keeps track of some changing value\n\n# Create an agent with `Agent.start_link`, passing in a function\n# The initial state of the agent will be whatever that function returns\n{:ok, my_agent} = Agent.start_link(fn -> [\"red\", \"green\"] end)\n\n# `Agent.get` takes an agent name and a `fn` that gets passed the current state\n# Whatever that `fn` returns is what you'll get back\nAgent.get(my_agent, fn colors -> colors end) #=> [\"red\", \"green\"]\n\n# Update the agent's state the same way\nAgent.update(my_agent, fn colors -> [\"blue\" | colors] end)\n```\n\n## References\n\n* [Getting started guide](https://elixir-lang.org/getting-started/introduction.html) from the [Elixir website](https://elixir-lang.org)\n* [Elixir Documentation](https://elixir-lang.org/docs.html)\n* [\"Programming Elixir\"](https://pragprog.com/book/elixir/programming-elixir) by Dave Thomas\n* [Elixir Cheat Sheet](https://media.pragprog.com/titles/elixir/ElixirCheat.pdf)\n* [\"Learn You Some Erlang for Great Good!\"](https://learnyousomeerlang.com/) by Fred Hebert\n* [\"Programming Erlang: Software for a Concurrent World\"](https://pragprog.com/book/jaerlang2/programming-erlang) by Joe Armstrong\n* [Introduction to Elixir](https://learn-elixir.com/)\n"
        },
        {
          "name": "elm.md",
          "type": "blob",
          "size": 12.5966796875,
          "content": "---\nname: Elm\ncontributors:\n    - [\"Max Goldstein\", \"http://maxgoldste.in/\"]\nfilename: learnelm.elm\n---\n\nElm is a functional reactive programming language that compiles to (client-side)\nJavaScript. Elm is statically typed, meaning that the compiler catches most\nerrors immediately and provides a clear and understandable error message. Elm is\ngreat for designing user interfaces and games for the web.\n\n\n```haskell\n-- Single line comments start with two dashes.\n{- Multiline comments can be enclosed in a block like this.\n{- They can be nested. -}\n-}\n\n{-- The Basics --}\n\n-- Arithmetic\n1 + 1 -- 2\n8 - 1 -- 7\n10 * 2 -- 20\n\n-- Every number literal without a decimal point can be either an Int or a Float.\n33 / 2 -- 16.5 with floating point division\n33 // 2 -- 16 with integer division\n\n-- Exponents\n5 ^ 2 -- 25\n\n-- Booleans\nnot True -- False\nnot False -- True\n1 == 1 -- True\n1 /= 1 -- False\n1 < 10 -- True\n\n-- Strings and characters\n\"This is a string because it uses double quotes.\"\n'a' -- characters in single quotes\n\n-- Strings can be appended.\n\"Hello \" ++ \"world!\" -- \"Hello world!\"\n\n{-- Lists, Tuples, and Records --}\n\n-- Every element in a list must have the same type.\n[\"the\", \"quick\", \"brown\", \"fox\"]\n[1, 2, 3, 4, 5]\n-- The second example can also be written with two dots.\nList.range 1 5\n\n-- Append lists just like strings.\nList.range 1 5 ++ List.range 6 10 == List.range 1 10 -- True\n\n-- To add one item, use \"cons\".\n0 :: List.range 1 5 -- [0, 1, 2, 3, 4, 5]\n\n-- The head and tail of a list are returned as a Maybe. Instead of checking\n-- every value to see if it's null, you deal with missing values explicitly.\nList.head (List.range 1 5) -- Just 1\nList.tail (List.range 1 5) -- Just [2, 3, 4, 5]\nList.head [] -- Nothing\n-- List.functionName means the function lives in the List module.\n\n-- Every element in a tuple can be a different type, but a tuple has a\n-- fixed length.\n(\"elm\", 42)\n\n-- Access the elements of a pair with the first and second functions.\n-- (This is a shortcut; we'll come to the \"real way\" in a bit.)\nTuple.first (\"elm\", 42) -- \"elm\"\nTuple.second (\"elm\", 42) -- 42\n\n-- The empty tuple, or \"unit\", is sometimes used as a placeholder.\n-- It is the only value of its type, also called \"Unit\".\n()\n\n-- Records are like tuples but the fields have names. The order of fields\n-- doesn't matter. Notice that record values use equals signs, not colons.\n{ x = 3, y = 7 }\n\n-- Access a field with a dot and the field name.\n{ x = 3, y = 7 }.x -- 3\n\n-- Or with an accessor function, which is a dot and the field name on its own.\n.y { x = 3, y = 7 } -- 7\n\n-- Update the fields of a record. (It must have the fields already.)\n{ person |\n  name = \"George\" }\n\n-- Update multiple fields at once, using the current values.\n{ particle |\n  position = particle.position + particle.velocity,\n  velocity = particle.velocity + particle.acceleration }\n\n{-- Control Flow --}\n\n-- If statements always have an else, and the branches must be the same type.\nif powerLevel > 9000 then\n  \"WHOA!\"\nelse\n  \"meh\"\n\n-- If statements can be chained.\nif n < 0 then\n  \"n is negative\"\nelse if n > 0 then\n  \"n is positive\"\nelse\n  \"n is zero\"\n\n-- Use case statements to pattern match on different possibilities.\ncase aList of\n  [] -> \"matches the empty list\"\n  [x]-> \"matches a list of exactly one item, \" ++ toString x\n  x::xs -> \"matches a list of at least one item whose head is \" ++ toString x\n-- Pattern matches go in order. If we put [x] last, it would never match because\n-- x::xs also matches (xs would be the empty list). Matches do not \"fall through\".\n-- The compiler will alert you to missing or extra cases.\n\n-- Pattern match on a Maybe.\ncase List.head aList of\n  Just x -> \"The head is \" ++ toString x\n  Nothing -> \"The list was empty.\"\n\n{-- Functions --}\n\n-- Elm's syntax for functions is very minimal, relying mostly on whitespace\n-- rather than parentheses and curly brackets. There is no \"return\" keyword.\n\n-- Define a function with its name, arguments, an equals sign, and the body.\nmultiply a b =\n  a * b\n\n-- Apply (call) a function by passing it arguments (no commas necessary).\nmultiply 7 6 -- 42\n\n-- Partially apply a function by passing only some of its arguments.\n-- Then give that function a new name.\ndouble =\n  multiply 2\n\n-- Constants are similar, except there are no arguments.\nanswer =\n  42\n\n-- Pass functions as arguments to other functions.\nList.map double (List.range 1 4) -- [2, 4, 6, 8]\n\n-- Or write an anonymous function.\nList.map (\\a -> a * 2) (List.range 1 4) -- [2, 4, 6, 8]\n\n-- You can pattern match in function definitions when there's only one case.\n-- This function takes one tuple rather than two arguments.\n-- This is the way you'll usually unpack/extract values from tuples.\narea (width, height) =\n  width * height\n\narea (6, 7) -- 42\n\n-- Use curly brackets to pattern match record field names.\n-- Use let to define intermediate values.\nvolume {width, height, depth} =\n  let\n    area = width * height\n  in\n    area * depth\n\nvolume { width = 3, height = 2, depth = 7 } -- 42\n\n-- Functions can be recursive.\nfib n =\n  if n < 2 then\n    1\n  else\n    fib (n - 1) + fib (n - 2)\n\nList.map fib (List.range 0 8) -- [1, 1, 2, 3, 5, 8, 13, 21, 34]\n\n-- Another recursive function (use List.length in real code).\nlistLength aList =\n  case aList of\n    [] -> 0\n    x::xs -> 1 + listLength xs\n\n-- Function calls happen before any infix operator. Parens indicate precedence.\ncos (degrees 30) ^ 2 + sin (degrees 30) ^ 2 -- 1\n-- First degrees is applied to 30, then the result is passed to the trig\n-- functions, which is then squared, and the addition happens last.\n\n{-- Types and Type Annotations --}\n\n-- The compiler will infer the type of every value in your program.\n-- Types are always uppercase. Read x : T as \"x has type T\".\n-- Some common types, which you might see in Elm's REPL.\n5 : Int\n6.7 : Float\n\"hello\" : String\nTrue : Bool\n\n-- Functions have types too. Read -> as \"goes to\". Think of the rightmost type\n-- as the type of the return value, and the others as arguments.\nnot : Bool -> Bool\nround : Float -> Int\n\n-- When you define a value, it's good practice to write its type above it.\n-- The annotation is a form of documentation, which is verified by the compiler.\ndouble : Int -> Int\ndouble x = x * 2\n\n-- Function arguments are passed in parentheses.\n-- Lowercase types are type variables: they can be any type, as long as each\n-- call is consistent.\nList.map : (a -> b) -> List a -> List b\n-- \"List dot map has type a-goes-to-b, goes to list of a, goes to list of b.\"\n\n-- There are three special lowercase types: number, comparable, and appendable.\n-- Numbers allow you to use arithmetic on Ints and Floats.\n-- Comparable allows you to order numbers and strings, like a < b.\n-- Appendable things can be combined with a ++ b.\n\n{-- Type Aliases and Custom Types --}\n\n-- When you write a record or tuple, its type already exists.\n-- (Notice that record types use colon and record values use equals.)\norigin : { x : Float, y : Float, z : Float }\norigin =\n  { x = 0, y = 0, z = 0 }\n\n-- You can give existing types a nice name with a type alias.\ntype alias Point3D =\n  { x : Float, y : Float, z : Float }\n\n-- If you alias a record, you can use the name as a constructor function.\notherOrigin : Point3D\notherOrigin =\n  Point3D 0 0 0\n\n-- But it's still the same type, so you can equate them.\norigin == otherOrigin -- True\n\n-- By contrast, defining a custom type creates a type that didn't exist before.\n-- A custom type is so called because it can be one of many possibilities.\n-- Each of the possibilities is represented as a \"type variant\".\ntype Direction =\n  North | South | East | West\n\n-- Type variants can carry other values of known type. This can work recursively.\ntype IntTree =\n  Leaf | Node Int IntTree IntTree\n-- \"Leaf\" and \"Node\" are the type variants. Everything following a type variant is a type.\n\n-- Type variants can be used as values or functions.\nroot : IntTree\nroot =\n  Node 7 Leaf Leaf\n\n-- Custom types (and type aliases) can use type variables.\ntype Tree a =\n  Leaf | Node a (Tree a) (Tree a)\n-- \"The type tree-of-a is a leaf, or a node of a, tree-of-a, and tree-of-a.\"\n\n-- Pattern match variants in a custom type. The uppercase variants will be matched exactly. The\n-- lowercase variables will match anything. Underscore also matches anything,\n-- but signifies that you aren't using it.\nleftmostElement : Tree a -> Maybe a\nleftmostElement tree =\n  case tree of\n    Leaf -> Nothing\n    Node x Leaf _ -> Just x\n    Node _ subtree _ -> leftmostElement subtree\n\n-- That's pretty much it for the language itself. Now let's see how to organize\n-- and run your code.\n\n{-- Modules and Imports --}\n\n-- The core libraries are organized into modules, as are any third-party\n-- libraries you may use. For large projects, you can define your own modules.\n\n-- Put this at the top of the file. If omitted, you're in Main.\nmodule Name where\n\n-- By default, everything is exported. You can specify exports explicitly.\nmodule Name (MyType, myValue) where\n\n-- One common pattern is to export a custom type but not its type variants. This is known\n-- as an \"opaque type\", and is frequently used in libraries.\n\n-- Import code from other modules to use it in this one.\n-- Places Dict in scope, so you can call Dict.insert.\nimport Dict\n\n-- Imports the Dict module and the Dict type, so your annotations don't have to\n-- say Dict.Dict. You can still use Dict.insert.\nimport Dict exposing (Dict)\n\n-- Rename an import.\nimport Graphics.Collage as C\n\n{-- Ports --}\n\n-- A port indicates that you will be communicating with the outside world.\n-- Ports are only allowed in the Main module.\n\n-- An incoming port is just a type signature.\nport clientID : Int\n\n-- An outgoing port has a definition.\nport clientOrders : List String\nport clientOrders = [\"Books\", \"Groceries\", \"Furniture\"]\n\n-- We won't go into the details, but you set up callbacks in JavaScript to send\n-- on incoming ports and receive on outgoing ports.\n\n{-- Command Line Tools --}\n\n-- Compile a file.\n$ elm make MyFile.elm\n\n-- The first time you do this, Elm will install the core libraries and create\n-- elm-package.json, where information about your project is kept.\n\n-- The reactor is a server that compiles and runs your files.\n-- Click the wrench next to file names to enter the time-travelling debugger!\n$ elm reactor\n\n-- Experiment with simple expressions in a Read-Eval-Print Loop.\n$ elm repl\n\n-- Packages are identified by GitHub username and repo name.\n-- Install a new package, and record it in elm-package.json.\n$ elm package install elm-lang/html\n\n-- See what changed between versions of a package.\n$ elm package diff elm-lang/html 1.1.0 2.0.0\n-- Elm's package manager enforces semantic versioning, so minor version bumps\n-- will never break your build!\n```\n\nThe Elm language is surprisingly small. You can now look through almost any Elm\nsource code and have a rough idea of what is going on. However, the possibilities\nfor error-resistant and easy-to-refactor code are endless!\n\nHere are some useful resources.\n\n* The [Elm website](http://elm-lang.org/). Includes:\n  * Links to the [installers](http://elm-lang.org/install)\n  * [Documentation guides](http://elm-lang.org/docs), including the [syntax reference](http://elm-lang.org/docs/syntax)\n  * Lots of helpful [examples](http://elm-lang.org/examples)\n\n* Documentation for [Elm's core libraries](http://package.elm-lang.org/packages/elm-lang/core/latest/). Take note of:\n  * [Basics](http://package.elm-lang.org/packages/elm-lang/core/latest/Basics), which is imported by default\n  * [Maybe](http://package.elm-lang.org/packages/elm-lang/core/latest/Maybe) and its cousin [Result](http://package.elm-lang.org/packages/elm-lang/core/latest/Result), commonly used for missing values or error handling\n  * Data structures like [List](http://package.elm-lang.org/packages/elm-lang/core/latest/List), [Array](http://package.elm-lang.org/packages/elm-lang/core/latest/Array), [Dict](http://package.elm-lang.org/packages/elm-lang/core/latest/Dict), and [Set](http://package.elm-lang.org/packages/elm-lang/core/latest/Set)\n  * JSON [encoding](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Encode) and [decoding](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode)\n\n* [The Elm Architecture](https://github.com/evancz/elm-architecture-tutorial#the-elm-architecture). An essay by Elm's creator with examples on how to organize code into components.\n\n* The [Elm mailing list](https://groups.google.com/forum/#!forum/elm-discuss). Everyone is friendly and helpful.\n\n* [Scope in Elm](https://github.com/elm-guides/elm-for-js/blob/master/Scope.md#scope-in-elm) and [How to Read a Type Annotation](https://github.com/elm-guides/elm-for-js/blob/master/How%20to%20Read%20a%20Type%20Annotation.md#how-to-read-a-type-annotation). More community guides on the basics of Elm, written for JavaScript developers.\n\nGo out and write some Elm!\n"
        },
        {
          "name": "emacs.md",
          "type": "blob",
          "size": 12.4345703125,
          "content": "---\ncategory: tool\nname: Emacs\nfilename: emacs.txt\ncontributors:\n    - [\"Joseph Riad\", \"https://github.com/Joseph-Riad\"]\n---\n\nEmacs started its life as [\"the extensible, customizable display\neditor\"](https://www.gnu.org/software/emacs/emacs-paper.html) and grew\nover the years into a full-blown ecosystem. Many tasks, usually\nrelegated to a diverse set of tools can be accomplished from within\nEmacs in a consistent, familiar interface. Examples include directory\nmanagement, viewing PDF documents, editing files over SSH, managing git\nrepos,… (the list is quite long). In short, Emacs is yours to make of it\nwhat you will: the spectrum of users varies from those who use it to\nedit text files to extreme purists who use it to virtually replace their\noperating system.\n\nEmacs is extensible via a specialized dialect of Lisp known as Emacs\nLisp (Elisp) which has a lot of macros geared towards editing text and\nmanaging text buffers. Any key (combination) you use in Emacs is bound\nto an Emacs Lisp function and may be remapped to any other function,\nincluding ones you write\nyourself.\n\n# Key Notation\n\n```text\nThe Emacs manual and the community in general uses a convention to refer to different key combinations used within Emacs. Specifically, Emacs has the notion of a \"modifier key\" that is pressed along with another key to modify its action.\n\nAn example of this notation is \"C-c\". In this key combination \"C\" is the modifier and stands for the \"Ctrl\" key and \"c\" is the key whose action is being modified (the literal character \"c\").\n\nThe modifier shorthand:\n\"C-\" --> The \"CTRL\" key\n\"M-\" --> The \"Meta\" key (usually, the \"Alt\" key)\n\"s-\" --> The \"Super\" key (the \"Cmd\" key on Macs and the \"Windows\" key on PCs)\n\nThere are other, less commonly used modifiers that I will not get into here.\n\nThe key combination \"C-x C-s\" means you press \"Ctrl+x\" followed by \"Ctrl+s\"\n\nIn addition to the above modifiers, the special keys \"Esc\", \"Return (Enter)\" and \"Shift\" are denoted by \"ESC\", \"RET\" and \"S\", respectively.\n```\n\n# Basic Emacs Concepts\n\nHere, I discuss some basic Emacs concepts and terminology that may be\nconfusing to newcomers (especially to people used to Vim terminology)\n\n  - A bunch of text that Emacs is editing is known as a **buffer**\n  - A buffer does not necessarily correspond to an actual file on disk.\n    It may be just a bunch of text in memory.\n  - When a buffer corresponds to a file on disk, we say that the buffer\n    is **visiting** that file.\n  - Emacs typically has many buffers open at once.\n  - The display of Emacs may be split into different **windows** (not to\n    be confused with your operating system's windows: the operating\n    system window for Emacs can have multiple Emacs windows inside it).\n  - An operating system window for Emacs is called an Emacs **frame**.\n    Thus, when the Emacs manual talks about opening a new frame, this\n    essentially means opening a new OS *window* containing an(other)\n    instance of Emacs.\n  - The concepts conventionally known as cutting and pasting are\n    referred to as **killing** and **yanking**, respectively in Emacs\n    parlance.\n  - The current position of the cursor is called the **point** in Emacs.\n    Technically, **point** is defined as the position right before the\n    character where the cursor currently is.\n  - Finally, each buffer may have several **modes** associated with it:\n    a **major mode** and possibly several **minor modes**.\n  - The **major mode** defines the main behavior of Emacs in the\n    currently selected buffer. This can be roughly thought of as the\n    file type. For example, if you're editing a Python file, the major\n    mode is (by default) `python-mode` which causes Emacs to highlight\n    Python syntax and automatically indent and outdent your code blocks\n    as syntactically required by your Python code.\n  - **Minor modes** define subtle changes in behavior and several minor\n    modes may be active at once in the same buffer. An example minor\n    mode is `flyspell-mode` which automatically highlights spelling\n    errors in your\nbuffer.\n\n# Navigation Basics\n\n```text\nThe GUI version of Emacs can be navigated with the mouse like you would expect from a conventional GUI text editor.\n\nThe aim here is to focus on navigation solely using the keyboard as this enhances productivity immensely.\n\n\n* Line movement\n\nC-n --> Next line\nC-p --> Previous line\n\n* Character movement\n\nC-f --> Go forward one character\nC-b --> Go backward one character\n\n* Word movement\n\nM-f --> Go forward one word\nM-b --> Go backward one word\n\n* Sentence movement\n\nM-a --> Move to the beginning of the sentence\nM-e --> Move to the end of the sentence\n\n* Beginning and end of line\n\nC-a --> Move to the beginning of the line\nC-e --> Move to the end of the line\n\n* Beginning and end of buffer\n\nM-< (\"Meta+Shift+,\") --> Go to the beginning of the buffer \nM-> (\"Meta+Shift+.\") --> Go to the end of the buffer \n\n* Screen movement\n\nC-v --> Scroll down by one screen-full (the last two lines of the previous screen are kept as overlap for a smoother transition)\nM-v --> Scroll up by one screen-full (same as above but with the first two lines)\n\n* Centering the screen\n\nC-l --> Move current line to the screen's center\n\nThe above key combination actually cycles through different states depending on how many times it's been pressed.\n\nC-l --> Move current line to the screen's center\nC-l C-l --> Move current line to the top of the screen\nC-l C-l C-l --> Restore the position of the current line to where it was before the first C-l was pressed\n\nIf you press \"C-l\" a 4th time, it cycles back to centering the current line.\n\n* Repeating movement commands\n\nMost movement commands take a numerical prefix argument that says \"repeat the following command that many times\".\n\nExample:\n\nC-u 3 C-p  --> Go up 3 lines\nC-u 5 C-f  --> Go forward 5 characters\n\nOne notable exception are the screen scrolling commands:\n\nC-u 3 C-v  --> Scroll downward 3 lines (maintaining the position of the cursor)\n```\n\nBonus: many of the above navigation commands are the default navigation\ncommands in Bash (e.g. pressing \"C-b\" while entering a Bash command\ntakes you back one\ncharacter).\n\n# File editing basics\n\n```text\n* Quitting Emacs [ Now you can't say you don't know how to quit Emacs :-) ]\n\nC-x C-c --> Quit Emacs and get prompted to save any unsaved files (buffers not visiting a file will simply be discarded unless you're running in client-server mode)\n\n* Saving a buffer\n\nC-x C-s --> Save the current buffer. If not visiting a file, it will prompt you for a file name to use to save the buffer.\n\n* Searching within a buffer\n\nC-s --> Search forwards within the buffer. Search is incremental and case-insensitive by default.\n        Press C-s to move to the next match.\n        If you press \"RET\", point is moved to the currently highlighted word and the search ends.\nC-r --> Same as C-s except it searches backward\n\nC-_ or C-/ --> Undo the last action. Keep pressing it to move up the undo tree.\nC-? or M-_ --> Redo the previous change\n\nThe \"undo\" and \"redo\" commands can take prefix numerical arguments to undo or redo that many actions:\n\nC-u 3 C-_ --> Undo the last 3 changes.\n```\n\n# Executing Elisp Functions\n\n```text\nYou can execute any currently loaded Elisp functions (including ones you have written yourself) via \"M-x\"\n\nM-x RET  --> Prompts you for name of function to execute (Tab completion is available).\n\nExample:\n\nM-x RET search-forward-regexp RET --> Prompts you for a regular expression and searches forward in the buffer for it\n```\n\n# Emacs Configuration\n\nEmacs is configured using Elisp. On startup, it looks for a\nconfiguration file either in `~/.emacs` or `~/.emacs.d/init.el` where\n`~` refers to your home directory. If you're on Windows, consult [this\narticle](https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Location-of-init-file.html)\nfor the appropriate location of your configuration file.\n\n# Vim inside Emacs\n\nIf you are considering the transition from Vim to Emacs and you're put\noff by the non-modal nature of Emacs editing, there is an Emacs\nextension known as `evil-mode` which lets you have many Vim concepts\ninside Emacs. Here are some things added to Emacs by `evil-mode`:\n\n  - Modal editing: you get normal, insert, visual and block visual modes\n    like Vim. In addition, you get an \"Emacs\" mode where movement and\n    navigation follow the Emacs bindings.\n  - Same movement keys as Vim in normal mode\n  - Leader key combinations\n  - Pressing \":\" in normal mode allows you to execute commands\n    (including system commands)\n\nIn my own experience, `evil-mode` helps make the transition seamless and\nallows you to blend the arguably more intuitive and ergonomic\nkeybindings of Vim with the unbridled power of Emacs for a truly\nsuperior editing experience.\n\n# Discoverable Help\n\nEmacs features a pretty powerful help system that allows you to discover\nnew functionality all the\ntime.\n\n```text\nObtaining help on specific topics. Tab completion is available for function and variable names.\n\nC-h f RET --> Prompts you for the name of an elisp function and\n              displays help text on it along with a clickable link\n              to its source code.\nC-h v RET --> Same as above with variables  \n\nC-h k RET --> Allows you to enter a key combination and displays the\n              name of the elisp function bound to it.\n\nSearching for help:\n\nC-h a --> Prompts you for a string to search for a command in the\n          help system. Similar to the 'apropos' or 'man -k'\n          commands in Unix systems.\n\nStarting a tutorial:\n\nC-h C-t --> Starts a tutorial designed to familiarize you with\n            basic Emacs functionality.\n```\n\n# Emacs \"Killer Apps\"\n\nAs I hinted above, Emacs functionality goes way beyond being a mere text\neditor. I will list here a couple of Emacs \"apps\" that are fairly\npowerful and popular and may interest you in and of themselves.\n\n## Org\n\nTechnically, `org-mode`, a major mode for buffer editing that provides\norganizational tools. It is very difficult to succinctly describe what\nOrg can do because it's a behemoth of a tool that has many diverse uses\nto different people. I will attempt to describe the main features I use\nbriefly.\n\n  - Divide your file into sections and sub-sections for easy outlining\n    and organizing of concepts.\n  - Different headings in the outline are foldable/expandable so that\n    you can focus on what you need to focus on and eliminate\n    distractions.\n  - You can maintain a TODO list within Org\n  - You can compile TODO lists from many files into an agenda\n  - Track the time you spend on each TODO task\n  - Manage tables in plain text (including spreadsheet-like\n    capabilities)\n  - Using the extension `org-babel`, write and execute code blocks in\n    your file. The results are captured and are re-usable within the\n    file itself. Think Jupyter notebook for any language.\n  - Display inline images and LaTeX formulas as images within your file\n    (makes for a great note-taking system and/or personal wiki)\n  - Export your file into many different formats (LaTeX, PDF, html,…)\n\nOrg mode is a very powerful tool to add to your productivity arsenal\nand, on a personal note, was the reason that caused me to start using\nEmacs after years of using Vim.\n\n## Magit\n\nThis is a frontend to `git` from within Emacs. It features a very\nintuitive and discoverable interface, yet exposes very powerful\nfunctionality that allows you to manage commits at the chunk level,\ninspect diffs, rebase, cherry-pick, … all from within the comfort of\nyour own editor.\n\n# A Word of Advice\n\nIf you are considering using Emacs, a common trap that beginning users\nfall into is to copy someone else's configuration file and use it as is.\nI highly recommend against doing this for several reasons:\n\n  - It will discourage you from learning and finding things out for\n    yourself\n  - Someone else's configuration will probably contain many things\n    relevant to them that you won't need or ever use.\n  - It defeats the purpose of having a customizable text editor that can\n    fit your own needs.\n\nWhat I encourage you to do is to look at other people's configurations\nand seek to understand them and adapt only what makes sense to you. You\ncan find out about new features of Emacs through many YouTube videos,\nscreencasts or blog posts and then learn for yourself how to add them to\nyour configuration and workflow. This way, you grow your configuration\nincrementally while increasing your knowledge of Emacs along the way.\n\n# Additional Resources\n\n  - [The GNU Emacs Manual](https://www.gnu.org/software/emacs/manual/emacs.html)\n  - [Emacs Stack Exchange](https://emacs.stackexchange.com/)\n  - [Emacs Wiki](https://www.emacswiki.org/emacs/EmacsWiki)\n"
        },
        {
          "name": "erlang.md",
          "type": "blob",
          "size": 12.7978515625,
          "content": "---\nname: Erlang\ncontributors:\n    - [\"Giovanni Cappellotto\", \"http://giovanni.curlybrackets.it/\"]\nfilename: learnerlang.erl\n---\n\n```erlang\n% Percent sign starts a one-line comment.\n\n%% Two percent characters shall be used to comment functions.\n\n%%% Three percent characters shall be used to comment modules.\n\n% We use three types of punctuation in Erlang.\n% Commas (`,`) separate arguments in function calls, data constructors, and\n% patterns.\n% Periods (`.`) (followed by whitespace) separate entire functions and\n% expressions in the shell.\n% Semicolons (`;`) separate clauses. We find clauses in several contexts:\n% function definitions and in `case`, `if`, `try..catch`, and `receive`\n% expressions.\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%% 1. Variables and pattern matching.\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% In Erlang new variables are bound with an `=` statement.\nNum = 42.  % All variable names must start with an uppercase letter.\n\n% Erlang has single-assignment variables; if you try to assign a different\n% value to the variable `Num`, you’ll get an error.\nNum = 43. % ** exception error: no match of right hand side value 43\n\n% In most languages, `=` denotes an assignment statement. In Erlang, however,\n% `=` denotes a pattern-matching operation. When an empty variable is used on the\n% left hand side of the `=` operator to is bound (assigned), but when a bound\n% variable is used on the left hand side the following behaviour is observed.\n% `Lhs = Rhs` really means this: evaluate the right side (`Rhs`), and then\n% match the result against the pattern on the left side (`Lhs`).\nNum = 7 * 6.\n\n% Floating-point number.\nPi = 3.14159.\n\n% Atoms are used to represent different non-numerical constant values. Atoms\n% start with lowercase letters, followed by a sequence of alphanumeric\n% characters or the underscore (`_`) or at (`@`) sign.\nHello = hello.\nOtherNode = example@node.\n\n% Atoms with non alphanumeric values can be written by enclosing the atoms\n% with apostrophes.\nAtomWithSpace = 'some atom with space'.\n\n% Tuples are similar to structs in C.\nPoint = {point, 10, 45}.\n\n% If we want to extract some values from a tuple, we use the pattern-matching\n% operator `=`.\n{point, X, Y} = Point.  % X = 10, Y = 45\n\n% We can use `_` as a placeholder for variables that we’re not interested in.\n% The symbol `_` is called an anonymous variable. Unlike regular variables,\n% several occurrences of `_` in the same pattern don’t have to bind to the\n% same value.\nPerson = {person, {name, {first, joe}, {last, armstrong}}, {footsize, 42}}.\n{_, {_, {_, Who}, _}, _} = Person.  % Who = joe\n\n% We create a list by enclosing the list elements in square brackets and\n% separating them with commas.\n% The individual elements of a list can be of any type.\n% The first element of a list is the head of the list. If you imagine removing\n% the head from the list, what’s left is called the tail of the list.\nThingsToBuy = [{apples, 10}, {pears, 6}, {milk, 3}].\n\n% If `T` is a list, then `[H|T]` is also a list, with head `H` and tail `T`.\n% The vertical bar (`|`) separates the head of a list from its tail.\n% `[]` is the empty list.\n% We can extract elements from a list with a pattern-matching operation. If we\n% have a nonempty list `L`, then the expression `[X|Y] = L`, where `X` and `Y`\n% are unbound variables, will extract the head of the list into `X` and the tail\n% of the list into `Y`.\n[FirstThing|OtherThingsToBuy] = ThingsToBuy.\n% FirstThing = {apples, 10}\n% OtherThingsToBuy = [{pears, 6}, {milk, 3}]\n\n% There are no strings in Erlang. Strings are really just lists of integers.\n% Strings are enclosed in double quotation marks (`\"`).\nName = \"Hello\".\n[72, 101, 108, 108, 111] = \"Hello\".\n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%% 2. Sequential programming.\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% Modules are the basic unit of code in Erlang. All the functions we write are\n% stored in modules. Modules are stored in files with `.erl` extensions.\n% Modules must be compiled before the code can be run. A compiled module has the\n% extension `.beam`.\n-module(geometry).\n-export([area/1]). % the list of functions exported from the module.\n\n% The function `area` consists of two clauses. The clauses are separated by a\n% semicolon, and the final clause is terminated by dot-whitespace.\n% Each clause has a head and a body; the head consists of a function name\n% followed by a pattern (in parentheses), and the body consists of a sequence of\n% expressions, which are evaluated if the pattern in the head is successfully\n% matched against the calling arguments. The patterns are matched in the order\n% they appear in the function definition.\narea({rectangle, Width, Ht}) -> Width * Ht;\narea({circle, R})            -> 3.14159 * R * R.\n\n% Compile the code in the file geometry.erl.\nc(geometry).  % {ok,geometry}\n\n% We need to include the module name together with the function name in order to\n% identify exactly which function we want to call.\ngeometry:area({rectangle, 10, 5}).  % 50\ngeometry:area({circle, 1.4}).  % 6.15752\n\n% In Erlang, two functions with the same name and different arity (number of\n% arguments) in the same module represent entirely different functions.\n-module(lib_misc).\n-export([sum/1]). % export function `sum` of arity 1\n                  % accepting one argument: list of integers.\nsum(L) -> sum(L, 0).\nsum([], N)    -> N;\nsum([H|T], N) -> sum(T, H+N).\n\n% Funs are \"anonymous\" functions. They are called this way because they have\n% no name. However, they can be assigned to variables.\nDouble = fun(X) -> 2 * X end. % `Double` points to an anonymous function\n                              % with handle: #Fun<erl_eval.6.17052888>\nDouble(2).  % 4\n\n% Functions accept funs as their arguments and can return funs.\nMult = fun(Times) -> ( fun(X) -> X * Times end ) end.\nTriple = Mult(3).\nTriple(5).  % 15\n\n% List comprehensions are expressions that create lists without having to use\n% funs, maps, or filters.\n% The notation `[F(X) || X <- L]` means \"the list of `F(X)` where `X` is taken\n% from the list `L`.\"\nL = [1,2,3,4,5].\n[2 * X || X <- L].  % [2,4,6,8,10]\n% A list comprehension can have generators and filters, which select subset of\n% the generated values.\nEvenNumbers = [N || N <- [1, 2, 3, 4], N rem 2 == 0]. % [2, 4]\n\n% Guards are constructs that we can use to increase the power of pattern\n% matching. Using guards, we can perform simple tests and comparisons on the\n% variables in a pattern.\n% You can use guards in the heads of function definitions where they are\n% introduced by the `when` keyword, or you can use them at any place in the\n% language where an expression is allowed.\nmax(X, Y) when X > Y -> X;\nmax(X, Y) -> Y.\n\n% A guard is a series of guard expressions, separated by commas (`,`).\n% The guard `GuardExpr1, GuardExpr2, ..., GuardExprN` is true if all the guard\n% expressions `GuardExpr1`, `GuardExpr2`, ..., `GuardExprN` evaluate to `true`.\nis_cat(A) when is_atom(A), A =:= cat -> true;\nis_cat(A) -> false.\nis_dog(A) when is_atom(A), A =:= dog -> true;\nis_dog(A) -> false.\n\n% We won't dwell on the `=:=` operator here; just be aware that it is used to\n% check whether two Erlang expressions have the same value *and* the same type.\n% Contrast this behaviour to that of the `==` operator:\n1 + 2 =:= 3.   % true\n1 + 2 =:= 3.0. % false\n1 + 2 ==  3.0. % true\n\n% A guard sequence is either a single guard or a series of guards, separated\n% by semicolons (`;`). The guard sequence `G1; G2; ...; Gn` is true if at\n% least one of the guards `G1`, `G2`, ..., `Gn` evaluates to `true`.\nis_pet(A) when is_atom(A), (A =:= dog);(A =:= cat) -> true;\nis_pet(A)                                             -> false.\n\n% Warning: not all valid Erlang expressions can be used as guard expressions;\n% in particular, our `is_cat` and `is_dog` functions cannot be used within the\n% guard sequence in `is_pet`'s definition. For a description of the\n% expressions allowed in guard sequences, refer to the specific section\n% in the Erlang reference manual:\n% http://erlang.org/doc/reference_manual/expressions.html#guards\n\n\n% Records provide a method for associating a name with a particular element in a\n% tuple.\n% Record definitions can be included in Erlang source code files or put in files\n% with the extension `.hrl`, which are then included by Erlang source code\n% files.\n-record(todo, {\n  status = reminder,  % Default value\n  who = joe,\n  text\n}).\n\n% We have to read the record definitions into the shell before we can define a\n% record. We use the shell function `rr` (short for read records) to do this.\nrr(\"records.hrl\").  % [todo]\n\n% Creating and updating records:\nX = #todo{}.\n% #todo{status = reminder, who = joe, text = undefined}\nX1 = #todo{status = urgent, text = \"Fix errata in book\"}.\n% #todo{status = urgent, who = joe, text = \"Fix errata in book\"}\nX2 = X1#todo{status = done}.\n% #todo{status = done, who = joe, text = \"Fix errata in book\"}\n\n% `case` expressions.\n% `filter` returns a list of all elements `X` in a list `L` for which `P(X)` is\n% true.\nfilter(P, [H|T]) ->\n  case P(H) of\n    true -> [H|filter(P, T)];\n    false -> filter(P, T)\n  end;\nfilter(P, []) -> [].\nfilter(fun(X) -> X rem 2 == 0 end, [1, 2, 3, 4]). % [2, 4]\n\n% `if` expressions.\nmax(X, Y) ->\n  if\n    X > Y -> X;\n    X < Y -> Y;\n    true -> nil\n  end.\n\n% Warning: at least one of the guards in the `if` expression must evaluate to\n% `true`; otherwise, an exception will be raised.\n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%% 3. Exceptions.\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% Exceptions are raised by the system when internal errors are encountered or\n% explicitly in code by calling `throw(Exception)`, `exit(Exception)`, or\n% `erlang:error(Exception)`.\ngenerate_exception(1) -> a;\ngenerate_exception(2) -> throw(a);\ngenerate_exception(3) -> exit(a);\ngenerate_exception(4) -> {'EXIT', a};\ngenerate_exception(5) -> erlang:error(a).\n\n% Erlang has two methods of catching an exception. One is to enclose the call to\n% the function that raises the exception within a `try...catch` expression.\ncatcher(N) ->\n  try generate_exception(N) of\n    Val -> {N, normal, Val}\n  catch\n    throw:X -> {N, caught, thrown, X};\n    exit:X -> {N, caught, exited, X};\n    error:X -> {N, caught, error, X}\n  end.\n\n% The other is to enclose the call in a `catch` expression. When you catch an\n% exception, it is converted into a tuple that describes the error.\ncatcher(N) -> catch generate_exception(N).\n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%% 4. Concurrency\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% Erlang relies on the actor model for concurrency. All we need to write\n% concurrent programs in Erlang are three primitives: spawning processes,\n% sending messages and receiving messages.\n\n% To start a new process, we use the `spawn` function, which takes a function\n% as argument.\n\nF = fun() -> 2 + 2 end. % #Fun<erl_eval.20.67289768>\nspawn(F). % <0.44.0>\n\n% `spawn` returns a pid (process identifier); you can use this pid to send\n% messages to the process. To do message passing, we use the `!` operator.\n% For all of this to be useful, we need to be able to receive messages. This is\n% achieved with the `receive` mechanism:\n\n-module(calculateGeometry).\n-compile(export_all).\ncalculateArea() ->\n    receive\n      {rectangle, W, H} ->\n        W * H;\n      {circle, R} ->\n        3.14 * R * R;\n      _ ->\n        io:format(\"We can only calculate area of rectangles or circles.\")\n    end.\n\n% Compile the module and create a process that evaluates `calculateArea` in the\n% shell.\nc(calculateGeometry).\nCalculateArea = spawn(calculateGeometry, calculateArea, []).\nCalculateArea ! {circle, 2}. % 12.56000000000000049738\n\n% The shell is also a process; you can use `self` to get the current pid.\nself(). % <0.41.0>\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%% 5. Testing with EUnit\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% Unit tests can be written using EUnits's test generators and assert macros\n-module(fib).\n-export([fib/1]).\n-include_lib(\"eunit/include/eunit.hrl\").\n\nfib(0) -> 1;\nfib(1) -> 1;\nfib(N) when N > 1 -> fib(N-1) + fib(N-2).\n\nfib_test_() ->\n    [?_assert(fib(0) =:= 1),\n     ?_assert(fib(1) =:= 1),\n     ?_assert(fib(2) =:= 2),\n     ?_assert(fib(3) =:= 3),\n     ?_assert(fib(4) =:= 5),\n     ?_assert(fib(5) =:= 8),\n     ?_assertException(error, function_clause, fib(-1)),\n     ?_assert(fib(31) =:= 2178309)\n    ].\n\n% EUnit will automatically export to a test() function to allow running the tests\n% in the erlang shell\nfib:test()\n\n% The popular erlang build tool Rebar is also compatible with EUnit\n% ```\n% rebar eunit\n% ```\n```\n\n## References\n\n* [\"Learn You Some Erlang for great good!\"](http://learnyousomeerlang.com/)\n* [\"Programming Erlang: Software for a Concurrent World\" by Joe Armstrong](http://pragprog.com/book/jaerlang/programming-erlang)\n* [Erlang/OTP Reference Documentation](http://www.erlang.org/doc/)\n* [Erlang - Programming Rules and Conventions](http://www.erlang.se/doc/programming_rules.shtml)\n"
        },
        {
          "name": "es",
          "type": "tree",
          "content": null
        },
        {
          "name": "fa",
          "type": "tree",
          "content": null
        },
        {
          "name": "factor.md",
          "type": "blob",
          "size": 7.638671875,
          "content": "---\nname: Factor\ncontributors:\n    - [\"hyphz\", \"http://github.com/hyphz/\"]\nfilename: learnfactor.factor\n---\n\nFactor is a modern stack-based language, based on Forth, created by Slava Pestov.\n\nCode in this file can be typed into Factor, but not directly imported because the vocabulary and import header would make the beginning thoroughly confusing.\n\n```factor\n! This is a comment\n\n! Like Forth, all programming is done by manipulating the stack.\n! Stating a literal value pushes it onto the stack.\n5 2 3 56 76 23 65    ! No output, but stack is printed out in interactive mode\n\n! Those numbers get added to the stack, from left to right.\n! .s prints out the stack non-destructively.\n.s     ! 5 2 3 56 76 23 65\n\n! Arithmetic works by manipulating data on the stack.\n5 4 +    ! No output\n\n! `.` pops the top result from the stack and prints it.\n.    ! 9\n\n! More examples of arithmetic:\n6 7 * .        ! 42\n1360 23 - .    ! 1337\n12 12 / .      ! 1\n13 2 mod .     ! 1\n\n99 neg .       ! -99\n-99 abs .      ! 99\n52 23 max .    ! 52\n52 23 min .    ! 23\n\n! A number of words are provided to manipulate the stack, collectively known as shuffle words.\n\n3 dup -          ! duplicate the top item (1st now equals 2nd): 3 - 3\n2 5 swap /       ! swap the top with the second element:        5 / 2\n4 0 drop 2 /     ! remove the top item (don't print to screen):  4 / 2\n1 2 3 nip .s     ! remove the second item (similar to drop):    1 3\n1 2 clear .s     ! wipe out the entire stack\n1 2 3 4 over .s  ! duplicate the second item to the top: 1 2 3 4 3\n1 2 3 4 2 pick .s ! duplicate the third item to the top: 1 2 3 4 2 3\n\n! Creating Words\n! The `:` word sets Factor into compile mode until it sees the `;` word.\n: square ( n -- n ) dup * ;    ! No output\n5 square .                     ! 25\n\n! We can view what a word does too.\n! \\ suppresses evaluation of a word and pushes its identifier on the stack instead.\n\\ square see    ! : square ( n -- n ) dup * ;\n\n! After the name of the word to create, the declaration between brackets gives the stack effect.\n! We can use whatever names we like inside the declaration:\n: weirdsquare ( camel -- llama ) dup * ;\n\n! Provided their count matches the word's stack effect:\n: doubledup ( a -- b ) dup dup ; ! Error: Stack effect declaration is wrong\n: doubledup ( a -- a a a ) dup dup ; ! Ok\n: weirddoubledup ( i -- am a fish ) dup dup ; ! Also Ok\n\n! Where Factor differs from Forth is in the use of quotations.\n! A quotation is a block of code that is pushed on the stack as a value.\n! [ starts quotation mode; ] ends it.\n[ 2 + ]       ! Quotation that adds 2 is left on the stack\n4 swap call . ! 6\n\n! And thus, higher order words. TONS of higher order words.\n2 3 [ 2 + ] dip .s      ! Pop top stack value, run quotation, push it back: 4 3\n3 4 [ + ] keep .s       ! Copy top stack value, run quotation, push the copy: 7 4\n1 [ 2 + ] [ 3 + ] bi .s ! Run each quotation on the top value, push both results: 3 4\n4 3 1 [ + ] [ + ] bi .s ! Quotations in a bi can pull values from deeper on the stack: 4 5 ( 1+3 1+4 )\n1 2 [ 2 + ] bi@ .s      ! Run the quotation on first and second values\n2 [ + ] curry           ! Inject the given value at the start of the quotation: [ 2 + ] is left on the stack\n\n! Conditionals\n! Any value is true except the built-in value f.\n! A built-in value t does exist, but its use isn't essential.\n! Conditionals are higher order words as with the combinators above.\n\n5 [ \"Five is true\" . ] when                     ! Five is true\n0 [ \"Zero is true\" . ] when                     ! Zero is true\nf [ \"F is true\" . ] when                        ! No output\nf [ \"F is false\" . ] unless                     ! F is false\n2 [ \"Two is true\" . ] [ \"Two is false\" . ] if   ! Two is true\n\n! By default the conditionals consume the value under test, but starred variants\n! leave it alone if it's true:\n\n5 [ . ] when*      ! 5\nf [ . ] when*      ! No output, empty stack, f is consumed because it's false\n\n\n! Loops\n! You've guessed it.. these are higher order words too.\n\n5 [ . ] each-integer               ! 0 1 2 3 4\n4 3 2 1 0 5 [ + . ] each-integer   ! 0 2 4 6 8\n5 [ \"Hello\" . ] times              ! Hello Hello Hello Hello Hello\n\n! Here's a list:\n{ 2 4 6 8 }                        ! Goes on the stack as one item\n\n! Loop through the list:\n{ 2 4 6 8 } [ 1 + . ] each          ! Prints 3 5 7 9\n{ 2 4 6 8 } [ 1 + ] map             ! Leaves { 3 5 7 9 } on stack\n\n! Loop reducing or building lists:\n{ 1 2 3 4 5 } [ 2 mod 0 = ] filter  ! Keeps only list members for which quotation yields true: { 2 4 }  \n{ 2 4 6 8 } 0 [ + ] reduce .        ! Like \"fold\" in functional languages: prints 20 (0+2+4+6+8)\n{ 2 4 6 8 } 0 [ + ] accumulate . .  ! Like reduce but keeps the intermediate values in a list: prints { 0 2 6 12 } then 20\n1 5 [ 2 * dup ] replicate .         ! Loops the quotation 5 times and collects the results in a list: { 2 4 8 16 32 }\n1 [ dup 100 < ] [ 2 * dup ] produce ! Loops the second quotation until the first returns false and collects the results: { 2 4 8 16 32 64 128 }\n\n! If all else fails, a general purpose while loop:\n1 [ dup 10 < ] [ \"Hello\" . 1 + ] while  ! Prints \"Hello\" 10 times\n                                        ! Yes, it's hard to read\n                                        ! That's what all those variant loops are for\n\n! Variables\n! Usually Factor programs are expected to keep all data on the stack.\n! Using named variables makes refactoring harder (and it's called Factor for a reason)\n! Global variables, if you must:\n\nSYMBOL: name            ! Creates name as an identifying word\n\"Bob\" name set-global   ! No output\nname get-global .       ! \"Bob\"                     \n\n! Named local variables are considered an extension but are available\n! In a quotation..\n[| m n                  ! Quotation captures top two stack values into m and n\n | m n + ]              ! Read them\n\n! Or in a word..\n:: lword ( -- )           ! Note double colon to invoke lexical variable extension\n   2 :> c                 ! Declares immutable variable c to hold 2\n   c . ;                  ! Print it out\n\n! In a word declared this way,  the input side of the stack declaration\n! becomes meaningful and gives the variable names stack values are captured into\n:: double ( a -- result ) a 2 * ;\n\n! Variables are declared mutable by ending their name with a shriek\n:: mword2 ( a! -- x y )   ! Capture top of stack in mutable variable a\n   a                      ! Push a\n   a 2 * a!               ! Multiply a by 2 and store result back in a\n   a ;                    ! Push new value of a\n5 mword2                  ! Stack: 5 10\n\n! Lists and Sequences\n! We saw above how to push a list onto the stack\n\n0 { 1 2 3 4 } nth         ! Access a particular member of a list: 1\n10 { 1 2 3 4 } nth        ! Error: sequence index out of bounds\n1 { 1 2 3 4 } ?nth        ! Same as nth if index is in bounds: 2\n10 { 1 2 3 4 } ?nth       ! No error if out of bounds: f\n\n{ \"at\" \"the\" \"beginning\" } \"Append\" prefix    ! { \"Append\" \"at\" \"the\" \"beginning\" }\n{ \"Append\" \"at\" \"the\" } \"end\" suffix          ! { \"Append\" \"at\" \"the\" \"end\" }\n\"in\" 1 { \"Insert\" \"the\" \"middle\" } insert-nth ! { \"Insert\" \"in\" \"the\" \"middle\" }\n\"Concat\" \"enate\" append                       ! \"Concatenate\" - strings are sequences too\n\"Concatenate\" \"Reverse \" prepend              ! \"Reverse Concatenate\"\n{ \"Concatenate \" \"seq \" \"of \" \"seqs\" } concat ! \"Concatenate seq of seqs\"\n{ \"Connect\" \"subseqs\" \"with\" \"separators\" } \" \" join  ! \"Connect subseqs with separators\"\n\n! And if you want to get meta, quotations are sequences and can be dismantled..\n0 [ 2 + ] nth                              ! 2\n1 [ 2 + ] nth                              ! +\n[ 2 + ] \\ - suffix                         ! Quotation [ 2 + - ]\n```\n\n## Further reading\n\n* [Factor Documentation](http://docs.factorcode.org/content/article-help.home.html)\n"
        },
        {
          "name": "fi",
          "type": "tree",
          "content": null
        },
        {
          "name": "fish.md",
          "type": "blob",
          "size": 9.66015625,
          "content": "---\nname: fish\ncontributors:\n    - [\"MySurmise\", \"https://github.com/MySurmise\"]\n    - [\"Geo Maciolek\", \"https://github.com/GeoffMaciolek\"]\nfilename: learn.fish\n---\n\nFish (**f**riendly **i**nteractive **sh**ell) is the name of an exotic shell. That is a shell with a syntax that is derived from neither the Bourne-Shell nor the C-Shell. \n\nThe advantage of fish is that many features that you want in a modern shell come out-of-the-box, so you don't have to install additional software like zsh and oh-my-zsh.\n\nExamples of these features are autosuggestions, 24-bit colors, Man Page Completions (meaning fish automatically parses your man pages and suggests additional options for your commands) or the ability to make options through a web page (when a GUI is installed).\n\nIt was released in February 2005.\n\n- [Read more](https://fishshell.com/docs/current/language.html)\n- [Installation guide](https://github.com/fish-shell/fish-shell#getting-fish)\n\n\n## Guide\n\nBe sure you have the newest fish shell. This was made with version 3.3.0. To test, type:\n\n```\n> fish -v\n```\n\nTo start the fish shell, type:\n\n```\n> fish\n```\n\nto exit, type:\n\n```\n> exit\n```\n\nor press <kbd>Ctrl + D</kbd>\n\nNow, right out of the gate, there's one annoying thing in fish. It's the welcome message. Who needs that, right? When your shell is started, just type:\n\n```\n> set -U fish_greeting \"\"\n```\n\nIf you want to execute a single command written in bash, without switching to that shell, you can type:\n\n```\n> bash -c 'echo \"fish is better than bash\"'\n```\n\nIn fish, you can use single or double quotes.\nThe escape character is a `\\`\n\nYou can change your configuration of fish either by editing the config file\n\n```\n> vim ~/.config/fish/config.fish\n```\n\nor by opening the aforementioned web settings:\n\n```\n> fish_config\n```\n\nAdding something to your fish PATH Variable is easy:\n\n```\n> fish_add_path ~/cowsay\n```\n\nCan you do that with bash, huh? No, you always have to look it up... It's just that easy!\n\nBut there's more. Most fish-specific commands start, you guessed it, with 'fish'. Just type in `fish` and press <kbd>TAB</kbd>. And there you have one of the many cool features of fish: The autocompletion that **just works.**\nNow you can navigate with <kbd>TAB</kbd>, <kbd>Shift + TAB</kbd> and your Arrow-Keys <kbd>←</kbd><kbd>↑</kbd><kbd>→</kbd><kbd>↓</kbd>.\n\nTo get help, contact your local psychiatrist or type `man`. That will bring up the manual for that command, for example:\n\n```\n> man set\n```\n\nIf you finally tried fish, you can see something other in fish that's really cool. Everything has cool colors, if you type in something wrong, it is red, without even executing, if you put something in quotes, you see where it ends and why that quote doesn't work, because there's another quotation mark in the quote at position 26. \n\nfish has even more cool things, like wildcards.\nFor example, type\n\n```\n> ls *.fish\n```\n\nThat will list all fish files in your current directory.\n\nYou can have multiple wildcards per command or even a recursive wildcard, `**`, which basically means it includes files and directories, that fit.\nFor example the following command would return (in your case):\n\n```\n> ls ~/images/**.jpg\n\n~/images/nudes/pewdiepie.jpg\n~/images/nudes/peppa.jpg\n~/images/screenshots/2020-42-69.jpg\n~/images/omegalul.jpg\n```\n\nOf course, you can also pipe the output of a command to another command\n\n```\n>echo sick egg, nadia. no u do really goofy shit.   | grep [udense]\n```\n\nwrite to a file:\n\n```\n>echo This\\ is\\ text > file.txt\n```\n\n(noticed the escape character?)\nAdd to a file:\n\n```\n>echo This\\ is\\ a\\ line >> file.txt\n>echo This\\ is\\ a\\ second\\ line >> file.txt\n```\n\nFor Autocompletion, just always press <kbd>TAB</kbd>. You will be surprised how many things fish knows.\n\nTo use variables, just type `$VAR`, like in bash.\n\n```\n> echo \"My home is $HOME\"\nMy home is /home/myuser\n```\n\nHere comes a difference between single and double quotes. If you use a variable in single quotes, it will not substitute it.\n\n```\n> echo 'My home is $HOME'\nMy home is $HOME\n```\n\nMore on variables later.\n\nTo execute two commands, separate them with `;`\n\n```\n> echo Lol; echo this is fun\n```\n\nThe status code of the last command is stored in `$status`\n\nYou can use && for two commands that depend on each other.\n\n```\n> set var lol && echo $var\n```\n\nYou can also use `and`  which executes if the previous command was successful, \n`or` which executes if the previous command was not successful, and `not`\nwhich inverts the exit status of a command.\n\nFor example:\n\n```\n> if not echo It's very late I should not waste my time with this  \n      echo Nobody heard you  \n  end\n```\n\n(You can of course do all of that in the shell)\n\n---\nNow let's start with the scripting part of fish.\n\nAs with every shell, you can not only execute commands in the shell, but also as files, saved as a  `.fish` file.\n(You can also execute `.sh` files with fish syntax, but I always use `.fish` for fish-syntax scripts to distinguish them from bash script files)\n\n```fish\n# This is a comment in fish.\n# \n# If you execute a file without specifying an interpreter, \n# meaning the software that runs your script, you need to tell the shell, \n# where that interpreter is. \n# For fish you just add the following comment as the first line in your script:\n\n#!/bin/fish\n\n# When executing via e.g. fish /path/to/script.fish\n# you don't need that, because you specified fish as an interpreter\n\n# Let's start with variables.\n# for use inside a program, you can use the syntax\nset name 'My Variable'\n\n# Use...\nset -x name value\n# to eXport, or\nset -e name\n# to Erase\n\n# a variable set with a space doesn't get sent as two arguments, but as one, as you would expect it. \nset turtlefolder 'Turtle Folder'\nmkdir $turtlefolder\n\n# This will create one folder, as expected, not two, like in bash... \n# Who would even want that? tHiS iS a fEaTurE, nOt a bUg...\n\n# you can even have lists as variables. This actually makes sense, because if you want to have a variable that would create two folders, you just give mkdir a list of your foldernames.\n\n# you can then count the entries in that list with:\ncount $PATH\n\n# Not only is everything awesome, but in fish, everything is also a list. \n# So $PWD for example is a list of length 1. \n# To make a list, just give the set command multiple arguments:\nset list entry1 entry2 entry3\n\n# that way you can also append something to an existing variable:\nset PATH $PATH ~/cowsay/\n\n# But, as previously mentioned, we also have a simpler way to do that specifically in fish.\n# As with every Array/List, you can access it with \n$listvar[2]\n\n# there's also ranges with \n$listvar[1..5]\n\n# and you can use negative numbers like \n$listvar[-1]\n# e.g to access the last element.\n\n# You can also do fancy cartesian products when you combine two list variables:\nset a 1 2 3\nset 1 a b c\necho $a$1\n# Will output : 1a 2a 3a 1b 2b 3b 1c 2c 3c\n\n# Of course, if you separate them, it will see them as two separate arguments and echo them one after the other. THAT is expected behavior @bash.\n\n# There are also other useful things, like command substitutions. For example, when you want to output the returns of two commands in one line. In bash you would do that with\necho \"`ls` is in $PWD\" \n# or \necho \"$(ls) is in $PWD\" \n\n# if you ask me, that's unnecessary. I always type in the wrong apostrophe. Why not just use two parenthesis, like in fish?\necho (ls) is in $PWD\n\n# Yep, that easy. And thanks to fish's highlighting you can instantly see, if you typed it in correctly.\n\n# And, as you would expect, if you ask me, your commands don't work in quotes. I mean why bash? Ok I'll stop now. But in fish, just do:\necho (ls)\" is in $PWD\"\n# or\nset myvar \"The file\"(ls -a)\" is in the directory $PWD\"\n# will make a List with the string and all files. Try it out. Isn't that cool?\n\n# And to separate these variables in separate arguments, just put a space between them:\n\nset myvar \"The files\" (ls -a) \" are in the directory $PWD\"\n\n# There's also if, else if, else\nif grep fish /etc/shells\n    echo Found fish\nelse if grep bash /etc/shells\n    echo Found bash\nelse\n    echo Got nothing\nend\n\n# A little weird is that you compare stuff with one = sign, of course because we don't need it to set variables, but still... and the keyword \"test\":\nif test $var = \"test\"\n    echo yes \nelse \n    echo no\nend\n\n# Of course, there's also switch case with\nswitch $OS\ncase Linux\n    echo \"you're good\"\ncase Windows\n    echo \"install Gentoo\"\ncase Arch\n    echo \"I use arch btw\"\ncase '*'\n    echo \"what OS is $OS, please?\"\nend\n\n\n# functions in fish get their arguments through the $argv variable. The syntax is following:\n\nfunction print\n    echo $argv\nend\n\n# There are also events, like the \"fish_exit\"-event (What may that be, hmm?).\n\n# You can use them by adding them to the function definition:\n\nfunction on_exit --on-event fish_exit\n    echo fish is now exiting\nend\n\n# find events with the command\nfunctions --handlers\n\n\n# You can use the functions command to learn more about, well, functions. \n# For example you can print the source code of every function:\nfunctions cd\nfunctions print\n# or get the names of all functions:\nfunctions\n\n# There's while Loops, of course\nwhile test $var = lol\n    echo lol\nend\n\n# for Loops (with wildcards, they are even cooler):\nfor image in *.jpg\n    echo $image\nend\n\n# there's an equivalent to the range(0, 5) in Python, so you can also do the standard for loops with numbers:\n\nset files (ls)\nfor number in (seq 10)\n    echo \"$files[$number] is file number $number\"\nend\n\n# Cool!\n\n# The bashrc equivalent is not fishrc, but the previously mentioned config.fish file in ~/.config/fish/\n# To add a function to fish, though, you should create a simple .fish file in that directory. Don't just paste that function in the config.fish. That's ugly. \n# If you have more, just add it, but those are the most important basics.\n```\n"
        },
        {
          "name": "forth.md",
          "type": "blob",
          "size": 7.267578125,
          "content": "---\nname: Forth\ncontributors:\n    - [\"Horse M.D.\", \"http://github.com/HorseMD/\"]\nfilename: learnforth.fs\n---\n\nForth was created by Charles H. Moore in the 70s. It is an imperative,\nstack-based language and programming environment, being used in projects\nsuch as Open Firmware. It's also used by NASA.\n\nNote: This article focuses predominantly on the Gforth implementation of\nForth, but most of what is written here should work elsewhere.\n\n```forth\n\\ This is a comment\n( This is also a comment but it's only used when defining words )\n\n\\ --------------------------------- Precursor ----------------------------------\n\n\\ All programming in Forth is done by manipulating the parameter stack (more\n\\ commonly just referred to as \"the stack\").\n5 2 3 56 76 23 65    \\ ok\n\n\\ Those numbers get added to the stack, from left to right.\n.s    \\ <7> 5 2 3 56 76 23 65 ok\n\n\\ In Forth, everything is either a word or a number.\n\n\\ ------------------------------ Basic Arithmetic ------------------------------\n\n\\ Arithmetic (in fact most words requiring data) works by manipulating data on\n\\ the stack.\n5 4 +    \\ ok\n\n\\ `.` pops the top result from the stack:\n.    \\ 9 ok\n\n\\ More examples of arithmetic:\n6 7 * .        \\ 42 ok\n1360 23 - .    \\ 1337 ok\n12 12 / .      \\ 1 ok\n13 2 mod .     \\ 1 ok\n\n99 negate .    \\ -99 ok\n-99 abs .      \\ 99 ok\n52 23 max .    \\ 52 ok\n52 23 min .    \\ 23 ok\n\n\\ ----------------------------- Stack Manipulation -----------------------------\n\n\\ Naturally, as we work with the stack, we'll want some useful methods:\n\n3 dup -          \\ duplicate the top item (1st now equals 2nd): 3 - 3\n2 5 swap /       \\ swap the top with the second element:        5 / 2\n6 4 5 rot .s     \\ rotate the top 3 elements:                   4 5 6\n4 0 drop 2 /     \\ remove the top item (don't print to screen):  4 / 2\n1 2 3 nip .s     \\ remove the second item (similar to drop):    1 3\n\n\\ ---------------------- More Advanced Stack Manipulation ----------------------\n\n1 2 3 4 tuck   \\ duplicate the top item below the second slot:      1 2 4 3 4 ok\n1 2 3 4 over   \\ duplicate the second item to the top:             1 2 3 4 3 ok\n1 2 3 4 2 roll \\ *move* the item at that position to the top:      1 3 4 2 ok\n1 2 3 4 2 pick \\ *duplicate* the item at that position to the top: 1 2 3 4 2 ok\n\n\\ When referring to stack indexes, they are zero-based.\n\n\\ ------------------------------ Creating Words --------------------------------\n\n\\ The `:` word sets Forth into compile mode until it sees the `;` word.\n: square ( n -- n ) dup * ;    \\ ok\n5 square .                     \\ 25 ok\n\n\\ We can view what a word does too:\nsee square     \\ : square dup * ; ok\n\n\\ -------------------------------- Conditionals --------------------------------\n\n\\ -1 == true, 0 == false. However, any non-zero value is usually treated as\n\\ being true:\n42 42 =    \\ -1 ok\n12 53 =    \\ 0 ok\n\n\\ `if` is a compile-only word. `if` <stuff to do> `then` <rest of program>.\n: ?>64 ( n -- n ) dup 64 > if .\" Greater than 64!\" then ; \\ ok\n100 ?>64                                                  \\ Greater than 64! ok\n\n\\ Else:\n: ?>64 ( n -- n ) dup 64 > if .\" Greater than 64!\" else .\" Less than 64!\" then ;\n100 ?>64    \\ Greater than 64! ok\n20 ?>64     \\ Less than 64! ok\n\n\\ ------------------------------------ Loops -----------------------------------\n\n\\ `?do` is also a compile-only word.\n: myloop ( -- ) 5 0 ?do cr .\" Hello!\" loop ; \\ ok\nmyloop\n\\ Hello!\n\\ Hello!\n\\ Hello!\n\\ Hello!\n\\ Hello! ok\n\n\\ `?do` expects two numbers on the stack: the end number (exclusive) and the\n\\ start number (inclusive).\n\n\\ We can get the value of the index as we loop with `i`:\n: one-to-12 ( -- ) 12 0 do i . loop ;     \\ ok\none-to-12                                 \\ 0 1 2 3 4 5 6 7 8 9 10 11 ok\n\n\\ `do` works similarly, except if start and end are exactly the same it will\n\\ loop forever (until arithmetic underflow).\n: loop-forever 1 1 do i square . loop ;     \\ ok\nloop-forever                                \\ 1 4 9 16 25 36 49 64 81 100 ...\n\n\\ Change the \"step\" with `+loop`:\n: threes ( n n -- ) ?do i . 3 +loop ;    \\ ok\n15 0 threes                             \\ 0 3 6 9 12 ok\n\n\\ Indefinite loops with `begin` <stuff to do> <flag> `until`:\n: death ( -- ) begin .\" Are we there yet?\" 0 until ;    \\ ok\n\n\\ ---------------------------- Variables and Memory ----------------------------\n\n\\ Use `variable` to declare `age` to be a variable.\nvariable age    \\ ok\n\n\\ Then we write 21 to age with the word `!`.\n21 age !    \\ ok\n\n\\ Finally we can print our variable using the \"read\" word `@`, which adds the\n\\ value to the stack, or use `?` that reads and prints it in one go.\nage @ .    \\ 21 ok\nage ?      \\ 21 ok\n\n\\ Constants are quite similar, except we don't bother with memory addresses:\n100 constant WATER-BOILING-POINT    \\ ok\nWATER-BOILING-POINT .               \\ 100 ok\n\n\\ ----------------------------------- Arrays -----------------------------------\n\n\\ Creating arrays is similar to variables, except we need to allocate more\n\\ memory to them.\n\n\\ You can use `2 cells allot` to create an array that's 3 cells long:\nvariable mynumbers 2 cells allot    \\ ok\n\n\\ Initialize all the values to 0\nmynumbers 3 cells erase    \\ ok\n\n\\ Alternatively we could use `fill`:\nmynumbers 3 cells 0 fill\n\n\\ or we can just skip all the above and initialize with specific values:\ncreate mynumbers 64 , 9001 , 1337 , \\ ok (the last `,` is important!)\n\n\\ ...which is equivalent to:\n\n\\ Manually writing values to each index:\n64 mynumbers 0 cells + !      \\ ok\n9001 mynumbers 1 cells + !    \\ ok\n1337 mynumbers 2 cells + !    \\ ok\n\n\\ Reading values at certain array indexes:\n0 cells mynumbers + ?    \\ 64 ok\n1 cells mynumbers + ?    \\ 9001 ok\n\n\\ We can simplify it a little by making a helper word for manipulating arrays:\n: of-arr ( n n -- n ) cells + ;    \\ ok\nmynumbers 2 of-arr ?               \\ 1337 ok\n\n\\ Which we can use for writing too:\n20 mynumbers 1 of-arr !    \\ ok\nmynumbers 1 of-arr ?       \\ 20 ok\n\n\\ ------------------------------ The Return Stack ------------------------------\n\n\\ The return stack is used to the hold pointers to things when words are\n\\ executing other words, e.g. loops.\n\n\\ We've already seen one use of it: `i`, which duplicates the top of the return\n\\ stack. `i` is equivalent to `r@`.\n: myloop ( -- ) 5 0 do r@ . loop ;    \\ ok\n\n\\ As well as reading, we can add to the return stack and remove from it:\n5 6 4 >r swap r> .s    \\ 6 5 4 ok\n\n\\ NOTE: Because Forth uses the return stack for word pointers,  `>r` should\n\\ always be followed by `r>`.\n\n\\ ------------------------- Floating Point Operations --------------------------\n\n\\ Most Forths tend to eschew the use of floating point operations.\n8.3e 0.8e f+ f.    \\ 9.1 ok\n\n\\ Usually we simply prepend words with 'f' when dealing with floats:\nvariable myfloatingvar    \\ ok\n4.4e myfloatingvar f!     \\ ok\nmyfloatingvar f@ f.       \\ 4.4 ok\n\n\\ --------------------------------- Final Notes --------------------------------\n\n\\ Typing a non-existent word will empty the stack. However, there's also a word\n\\ specifically for that:\nclearstack\n\n\\ Clear the screen:\npage\n\n\\ Loading Forth files:\n\\ s\" forthfile.fs\" included\n\n\\ You can list every word that's in Forth's dictionary (but it's a huge list!):\n\\ words\n\n\\ Exiting Gforth:\n\\ bye\n```\n\n## Further reading\n\n* [Starting Forth](http://www.forth.com/starting-forth/)\n* [Simple Forth](http://www.murphywong.net/hello/simple.htm)\n* [Thinking Forth](http://thinking-forth.sourceforge.net/)\n"
        },
        {
          "name": "fortran.md",
          "type": "blob",
          "size": 17.0126953125,
          "content": "---\nname: Fortran\ncontributors:\n    - [\"Robert Steed\", \"https://github.com/robochat\"]\nfilename: learnfortran.f90\n---\n\nFortran is one of the oldest computer languages. It was developed in the 1950s\nby IBM for numeric calculations (Fortran is an abbreviation of \"Formula\nTranslation\"). Despite its age, it is still used for high-performance computing\nsuch as weather prediction. However, the language has changed considerably over\nthe years, although mostly maintaining backwards compatibility; well known\nversions are FORTRAN 77, Fortran 90, Fortran 95, Fortran 2003, Fortran 2008,\nFortran 2018 and Fortran 2023.\n\nThis overview will discuss the features of Fortran 2008 since it is the most\nwidely implemented of the more recent specifications and the later versions are\nlargely similar (by comparison FORTRAN 77 is a very different language).\n\n```fortran\n! This is a comment.\n\nprogram example         ! declare a program called example.\n\n    ! Code can only exist inside programs, functions, subroutines or modules.\n    ! Using indentation is not required but it is recommended.\n\n    ! Declaring Variables\n    ! ===================\n\n    ! All declarations must come before statements and expressions.\n\n    implicit none       ! prevents dynamic declaration of variables\n    ! Recommended!\n    ! Implicit none must be redeclared in every function/program/module...\n\n    ! IMPORTANT - Fortran is case insensitive.\n    real z\n    REAL Z2\n\n    real :: v, x        ! WARNING: default initial values are compiler dependent!\n    real :: a = 3, b = 2E12, c = 0.01\n    integer :: i, j, k = 1, m\n    real, parameter :: PI = 3.14159265            ! declare a constant.\n    logical :: y = .TRUE., n = .FALSE.            ! boolean type.\n    complex :: w = (0, 1)                         ! sqrt(-1)\n    character(len=3) :: month                     ! string of 3 characters.\n\n    ! declare an array of 6 reals.\n    real :: array(6)                                    \n    ! another way to declare an array. \n    real, dimension(4) :: arrayb                 \n    ! an array with a custom index -10 to 10 (inclusive)\n    integer :: arrayc(-10:10)                     \n    ! A multidimensional array.\n    real :: array2d(3, 2)                         \n\n    ! The '::' separators are not always necessary but are recommended.\n\n    ! many other variable attributes also exist:\n    real, pointer :: p                            ! declare a pointer.\n\n    integer, parameter :: LP = selected_real_kind(20)\n    real(kind=LP) :: d                            ! long precision variable.\n\n    ! WARNING: initialising variables during declaration causes problems\n    ! in functions since this automatically implies the 'save' attribute\n    ! whereby values are saved between function calls. In general, separate\n    ! declaration and initialisation code except for constants!\n\n    ! Strings\n    ! =======\n\n    character :: a_char = 'i'\n    character(len=6) :: a_str = \"qwerty\"\n    character(len=30) :: str_b\n    character(len=*), parameter :: a_long_str = \"This is a long string.\"\n    !can have automatic counting of length using (len=*) but only for constants.\n\n    str_b = a_str//\" keyboard\"      ! concatenate strings using // operator.\n\n    ! Assignment & Arithmetic\n    ! =======================\n    \n    Z = 1                           ! assign to variable z declared above \n    j = 10 + 2 - 3\n    a = 11.54/(2.3*3.1)\n    b = 2**3                        ! exponentiation\n\n    ! Control Flow Statements & Operators\n    ! ===================================\n\n    ! Single-line if statement\n    if (z == a) b = 4               ! conditions always need parentheses.\n\n    if (z /= a) then                ! z not equal to a\n        ! Other symbolic comparisons are < > <= >= == /=\n        b = 4\n    else if (z .GT. a) then         ! z greater than a\n        ! Text equivalents to symbol operators are .LT. .GT. .LE. .GE. .EQ. .NE.\n        b = 6\n    else if (z < a) then            ! 'then' must be on this line.\n        b = 5                       ! execution block must be on a new line.\n    else\n        b = 10\n    end if                          ! end statement needs the 'if'\n\n    if (.NOT. (x < c .AND. v >= a .OR. z == z)) then    ! boolean operators.\n        inner: if (.TRUE.) then     ! can name if-construct.\n            b = 1\n        end if inner                ! then must name endif statement.\n    endif                           ! 'endif' is equivalent to 'end if'  \n\n    i = 20\n    select case (i)\n    case (0, 1)                     ! cases i == 0 or i == 1\n        j = 0\n    case (2:10)                     ! cases i is 2 to 10 inclusive.\n        j = 1\n    case (11:)                      ! all cases where i>=11\n        j = 2\n    case default\n        j = 3\n    end select\n\n    month = 'jan'\n    ! Condition can be integer, logical or character type.\n    ! Select constructions can also be named.\n    monthly:select case(month)\n    case (\"jan\")\n        j = 0\n    case default\n        j = -1\n    end select monthly\n\n    do i = 2, 10, 2             ! loops from 2 to 10 (inclusive) in steps of 2.\n        innerloop: do j = 1, 3  ! loops can be named too.\n            exit                ! quits the loop.\n        end do innerloop\n        cycle                   ! jump to next loop iteration.\n    end do\n\n    ! Goto statement exists but it is heavily discouraged.\n    goto 10\n    stop 1                      ! stops the program, returns condition code 1.\n10  j = 201                     ! this line is labeled as line 10\n\n    ! Arrays\n    ! ======\n    array = (/1, 2, 3, 4, 5, 6/)\n    array = [1, 2, 3, 4, 5, 6]  ! using Fortran 2003 notation.\n    arrayb = [10.2, 3e3, 0.41, 4e-5]\n    array2d = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [3, 2])\n\n    ! Fortran array indexing starts from 1.\n    ! (by default but can be defined differently for specific arrays).\n    v = array(1)                ! take first element of array.\n    v = array2d(2, 2)\n\n    print *, array(3:5)         ! print all elements from 3rd to 5th (inclusive).\n    print *, array2d(1, :)      ! print first column of 2d array.\n\n    array = array*3 + 2         ! can apply mathematical expressions to arrays.\n    array = array*array         ! array operations occur element-wise.\n    ! array = array*array2d     ! these arrays would not be compatible.\n\n    ! There are many built-in functions that operate on arrays.\n    c = dot_product(array, array)   ! this is the dot product.\n    ! Use matmul() for matrix maths.\n    c = sum(array)\n    c = maxval(array)\n    print *, minloc(array)\n    c = size(array)\n    print *, shape(array)\n    m = count(array > 0)\n\n    ! Loop over an array (could have used Product() function normally).\n    v = 1\n    do i = 1, size(array)\n        v = v*array(i)\n    end do\n\n    ! Conditionally execute element-wise assignments.\n    array = [1, 2, 3, 4, 5, 6]\n    where (array > 3)\n        array = array + 1\n    elsewhere(array == 2)\n        array = 1\n    elsewhere\n        array = 0\n    end where\n\n    ! Implied-DO loops are a compact way to create arrays.\n    array = [(i, i=1, 6)]       ! creates an array of [1,2,3,4,5,6]\n    array = [(i, i=1, 12, 2)]   ! creates an array of [1,3,5,7,9,11]\n    array = [(i**2, i=1, 6)]    ! creates an array of [1,4,9,16,25,36]\n    array = [(4, 5, i=1, 3)]    ! creates an array of [4,5,4,5,4,5]\n\n    ! Input/Output\n    ! ============\n\n    print *, b                  ! print the variable 'b' to the command line\n\n    ! We can format our printed output.\n    print \"(I6)\", 320           ! prints '   320'\n    print \"(I6.4)\", 3           ! prints '  0003'\n    print \"(F6.3)\", 4.32        ! prints ' 4.320'\n\n    ! The letter indicates the expected type and the number afterwards gives\n    ! the number of characters to use for printing the value.\n    ! Letters can be I (integer), F (real), E (engineering format),\n    ! L (logical), A (characters) ...\n    print \"(I3)\", 3200          ! print '***' since the number doesn't fit.\n\n    ! we can have multiple format specifications.\n    print \"(I5,F6.2,E6.2)\", 120, 43.41, 43.41\n    \n    ! 3 repeats of integers (field width = 5).\n    print \"(3I5)\", 10, 20, 30                       \n\n    ! repeated grouping of formats.\n    print \"(2(I5,F6.2))\", 120, 43.42, 340, 65.3     \n\n    ! We can also read input from the terminal.\n    read (*, *) v\n    read (*, \"(2F6.2)\") v, x                        ! read two numbers\n\n    ! To write a file.\n    open (unit=12, file=\"records.txt\", status=\"replace\")\n    ! The file is referred to by a 'unit number', an integer that you pick in\n    ! the range 9:99. Status can be one of {'old','replace','new'}.\n    write (12, \"(F10.2,F10.2,F10.2)\") c, b, a\n    close (12)\n\n    ! To read a file.\n    open (newunit=m, file=\"records.txt\", status=\"old\")\n    ! The file is referred to by a 'new unit number', \n    ! an integer that the compiler picks for you.\n\n    read (unit=m, fmt=\"(3F10.2)\") a, b, c\n    close (m)\n\n    ! There are more features available than discussed here and alternative\n    ! variants due to backwards compatibility with older Fortran versions.\n\n    ! Built-in Functions\n    ! ==================\n\n    ! Fortran has around 200 functions/subroutines intrinsic to the language.\n    ! Examples -\n    call cpu_time(v)        ! sets 'v' to a time in seconds.\n    k = ior(i, j)           ! bitwise OR of 2 integers.\n    v = log10(x)            ! log base 10.\n    i = floor(b)            ! converts b to integer by rounding down.\n    v = aimag(w)            ! imaginary part of a complex number.\n\n    ! Functions & Subroutines\n    ! =======================\n\n    ! A subroutine runs some code on some input values and can cause\n    ! side-effects or modify the input values.\n\n    call routine(a, c, v)   ! subroutine call.\n\n    ! A function takes several input parameters and returns a single value.\n    ! However the input parameters may still be modified and side effects\n    ! executed.\n\n    m = func(3, 2, k)       ! function call.\n\n    ! Function calls can also be evoked within expressions.\n    print *, func2(3, 2, k)\n\n    ! A pure function is a function that doesn't modify its input \n    ! parameters or cause any side-effects.\n    m = func3(3, 2, k)\n\ncontains                    ! Start defining the program's internal procedures:\n\n    ! Fortran has a couple of slightly different ways to define functions.\n\n    integer function func(a, b, c)      ! a function returning an integer value.\n        ! implicit none                 ! - no longer used in subvariable fields\n        integer, intent(in) :: a, b, c  ! type of input parameters\n        ! the return variable defaults to the function name.\n\n        if (a >= 2) then\n            func = a + b + c            \n            return                      ! returns the current value at 'func'\n        end if\n        func = a + c\n\n        ! Don't need a return statement at the end of a function.\n    end function func\n\n    function func2(a, b, c) result(f)   ! return variable declared to be 'f'.\n        integer, intent(in) :: a, b     ! can declare and enforce that variables\n        !are not modified by the function.\n        integer, intent(inout) :: c\n        integer :: f                    \n        ! function return type declared inside the function.\n        integer :: cnt = 0               ! GOTCHA -         \n        ! assigning a value at initalization \n        ! implies that the variable is\n        ! saved between function calls.\n\n        f = a + b - c\n        c = 4                           ! changing value of input variable c.\n        cnt = cnt + 1                   ! count number of function calls.\n\n    end function func2\n\n    pure function func3(a, b, c)        ! a pure function has no side-effects.\n        integer, intent(in) :: a, b, c\n        integer :: func3\n\n        func3 = a*b*c\n\n    end function func3\n    \n    ! a subroutine does not return anything, \n    ! but can change the value of arguments.\n    subroutine routine(d, e, f)\n        real, intent(inout) :: f\n        real, intent(in) :: d, e\n\n        f = 2*d + 3*e + f\n\n    end subroutine routine\n\nend program example                     \n! End of Program Definition -----------------------\n\n! Functions and Subroutines declared externally to the program listing need\n! to be declared to the program using an Interface declaration (even if they\n! are in the same source file!) (see below). It is easier to define them within\n! the 'contains' section of a module or program.\n\nelemental real function func4(a) result(res)\n! An elemental function is a Pure function that takes a scalar input variable\n! but can also be used on an array where it will be separately applied to all\n! of the elements of an array and return a new array.\n    real, intent(in) :: a\n\n    res = a**2 + 1.0\n\nend function func4\n\n! Modules\n! =======\n\n! A module is a useful way to collect related declarations, functions and\n! subroutines together for reusability.\n\nmodule fruit\n\n    real :: apple\n    real :: pear\n    real :: orange\n\nend module fruit\n\nmodule fruity\n    ! Declarations must be in the order: modules, interfaces, variables.\n    ! (can declare modules and interfaces in programs too).\n\n    use fruit, only: apple, pear    ! use apple and pear from fruit module.\n    implicit none                   ! comes after module imports.\n\n    ! By default all module data and functions will be public\n    private                         ! Instead set default to private \n    ! Declare some variables/functions explicitly public.\n    public :: apple, mycar, create_mycar\n    ! Declare some variables/functions private to the module (redundant here).\n    private :: func4\n\n    ! Interfaces\n    ! ==========\n    ! Explicitly declare an external function/procedure within the module\n    ! (better in general to put functions/procedures in the 'contains' section).\n    interface\n        elemental real function func4(a) result(res)\n            real, intent(in) :: a\n        end function func4\n    end interface\n\n    ! Overloaded functions can be defined using named interfaces.\n    interface myabs\n        ! Can use 'module procedure' keyword to include functions already\n        ! defined within the module.\n        module procedure real_abs, complex_abs\n    end interface\n\n    ! Derived Data Types\n    ! ==================\n    ! Can create custom structured data collections.\n    type car\n        character(len=100) :: model\n        real :: weight              ! (kg)\n        real :: dimensions(3)       ! i.e. length-width-height (metres).\n        character :: colour\n    contains\n        procedure :: info           ! bind a procedure to a type.\n    end type car\n\n    type(car) :: mycar              ! declare a variable of your custom type.\n    ! See create_mycar() routine for usage.\n\n    ! Note: There are no executable statements in modules.\n\ncontains\n\n    subroutine create_mycar(mycar)\n        ! Demonstrates usage of a derived data type.\n        type(car), intent(out) :: mycar\n\n        ! Access type elements using '%' operator.\n        mycar%model = \"Ford Prefect\"\n        mycar%colour = 'r'\n        mycar%weight = 1400\n        mycar%dimensions(1) = 5.0   ! default indexing starts from 1!\n        mycar%dimensions(2) = 3.0\n        mycar%dimensions(3) = 1.5\n\n    end subroutine create_mycar\n\n    subroutine info(self)\n        class(car), intent(in) :: self\n        ! 'class' keyword used to bind a procedure to a type here.\n\n        print *, \"Model     : \", self%model\n        print *, \"Colour    : \", self%colour\n        print *, \"Weight    : \", self%weight\n        print *, \"Dimensions: \", self%dimensions\n\n    end subroutine info\n\n    real pure function real_abs(x)\n        real, intent(in) :: x\n\n        if (x < 0) then\n            real_abs = -x\n        else\n            real_abs = x\n        end if\n\n    end function real_abs\n\n    real pure function complex_abs(z)\n        complex, intent(in) :: z\n        ! long lines can be continued using the continuation character '&'\n\n        complex_abs = sqrt(real(z)**2 + &\n                           aimag(z)**2)\n\n    end function complex_abs\n\nend module fruity\n\n! ISO Standard Fortran 2008 introduced the DO CONCURRENT construct to allow you\n! to express loop-level parallelism\n\ninteger :: i\nreal :: array(10)\n\nDO CONCURRENT (i = 1:size(array))\n    array(i) = sqrt(real(i)**i)\nEND DO\n\n\n! Only calls to pure functions are allowed inside the loop and we can declare\n! multiple indices:\n\ninteger :: x, y\nreal :: array(8, 16)\n\ndo concurrent (x = 1:size(array, 1), y = 1:size(array, 2))\n    array(x, y) = real(x)\nend do\n\n! loop indices can also declared inside the contruct:\n\nreal :: array(8, 16)\n\ndo concurrent (integer :: x = 1:size(array, 1), y = 1:size(array, 2))\n    array(x, y) = real(x)\nend do\n```\n\n### More Resources\n\nFor more information on Fortran:\n\n+ [wikipedia](https://en.wikipedia.org/wiki/Fortran)\n+ [Fortran-lang Organization](https://fortran-lang.org/)\n+ [Fortran_95_language_features](https://en.wikipedia.org/wiki/Fortran_95_language_features)\n+ [fortranwiki.org](http://fortranwiki.org)\n+ [www.fortran90.org/](http://www.fortran90.org)\n+ [list of Fortran 95 tutorials](http://www.dmoz.org/Computers/Programming/Languages/Fortran/FAQs%2C_Help%2C_and_Tutorials/Fortran_90_and_95/)\n+ [Fortran wikibook](https://en.wikibooks.org/wiki/Fortran)\n+ [Fortran resources](http://www.fortranplus.co.uk/resources/fortran_resources.pdf)\n+ [Mistakes in Fortran 90 Programs That Might Surprise You](http://www.cs.rpi.edu/~szymansk/OOF90/bugs.html)\n"
        },
        {
          "name": "fr",
          "type": "tree",
          "content": null
        },
        {
          "name": "fsharp.md",
          "type": "blob",
          "size": 21.1943359375,
          "content": "---\nname: F#\ncontributors:\n    - [\"Scott Wlaschin\", \"http://fsharpforfunandprofit.com/\"]\nfilename: learnfsharp.fs\n---\n\nF# is a general purpose functional/OO programming language.  It's free and open source, and runs on Linux, Mac, Windows and more.\n\nIt has a powerful type system that traps many errors at compile time, but it uses type inference so that it reads more like a dynamic language.\n\nThe syntax of F# is different from C-style languages:\n\n* Curly braces are not used to delimit blocks of code. Instead, indentation is used (like Python).\n* Whitespace is used to separate parameters rather than commas.\n\nIf you want to try out the code below, you can go to [https://try.fsharp.org](https://try.fsharp.org) and paste it into an interactive REPL.\n\n```fsharp\n// single line comments use a double slash\n(* multi line comments use (* . . . *) pair\n\n-end of multi line comment- *)\n\n// ================================================\n// Basic Syntax\n// ================================================\n\n// ------ \"Variables\" (but not really) ------\n// The \"let\" keyword defines an (immutable) value\nlet myInt = 5\nlet myFloat = 3.14\nlet myString = \"hello\"           // note that no types needed\n\n// Mutable variables\nlet mutable a=3\na <- 4 // a is now 4.\n\n// Somewhat mutable variables\n// Reference cells are storage locations that enable you to create mutable values with reference semantics.\n// See https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/reference-cells\nlet xRef = ref 10\nprintfn \"%d\" xRef.Value // 10\nxRef.Value <- 11\nprintfn \"%d\" xRef.Value // 11\n\nlet a=[ref 0; ref 1] // somewhat mutable list\na[0].Value <- 2\n\n// ------ Lists ------\nlet twoToFive = [2; 3; 4; 5]     // Square brackets create a list with\n                                 // semicolon delimiters.\nlet oneToFive = 1 :: twoToFive   // :: creates list with new 1st element\n// The result is [1; 2; 3; 4; 5]\nlet zeroToFive = [0; 1] @ twoToFive   // @ concats two lists\n\n// IMPORTANT: commas are never used as delimiters, only semicolons!\n\n// ------ Functions ------\n// The \"let\" keyword also defines a named function.\nlet square x = x * x          // Note that no parens are used.\nsquare 3                      // Now run the function. Again, no parens.\n\nlet add x y = x + y           // don't use add (x,y)! It means something\n                              // completely different.\nadd 2 3                       // Now run the function.\n\n// to define a multiline function, just use indents. No semicolons needed.\nlet evens list =\n   let isEven x = x % 2 = 0   // Define \"isEven\" as a sub function. Note\n                              // that equality operator is single char \"=\".\n   List.filter isEven list    // List.filter is a library function\n                              // with two parameters: a boolean function\n                              // and a list to work on\n\nevens oneToFive               // Now run the function\n\n// You can use parens to clarify precedence. In this example,\n// do \"map\" first, with two args, then do \"sum\" on the result.\n// Without the parens, \"List.map\" would be passed as an arg to List.sum\nlet sumOfSquaresTo100 =\n   List.sum ( List.map square [1..100] )\n\n// You can pipe the output of one operation to the next using \"|>\"\n// Piping data around is very common in F#, similar to UNIX pipes.\n\n// Here is the same sumOfSquares function written using pipes\nlet sumOfSquaresTo100piped =\n   [1..100] |> List.map square |> List.sum  // \"square\" was defined earlier\n\n// you can define lambdas (anonymous functions) using the \"fun\" keyword\nlet sumOfSquaresTo100withFun =\n   [1..100] |> List.map (fun x -> x * x) |> List.sum\n\n// In F# there is no \"return\" keyword. A function always\n// returns the value of the last expression used.\n\n// ------ Pattern Matching ------\n// Match..with.. is a supercharged case/switch statement.\nlet simplePatternMatch =\n   let x = \"a\"\n   match x with\n    | \"a\" -> printfn \"x is a\"\n    | \"b\" -> printfn \"x is b\"\n    | _ -> printfn \"x is something else\"   // underscore matches anything\n\n// F# doesn't allow nulls by default -- you must use an Option type\n// and then pattern match.\n// Some(..) and None are roughly analogous to Nullable wrappers\nlet validValue = Some(99)\nlet invalidValue = None\n\n// In this example, match..with matches the \"Some\" and the \"None\",\n// and also unpacks the value in the \"Some\" at the same time.\nlet optionPatternMatch input =\n   match input with\n    | Some i -> printfn \"input is an int=%d\" i\n    | None -> printfn \"input is missing\"\n\noptionPatternMatch validValue\noptionPatternMatch invalidValue\n\n// ------ Printing ------\n// The printf/printfn functions are similar to the\n// Console.Write/WriteLine functions in C#.\nprintfn \"Printing an int %i, a float %f, a bool %b\" 1 2.0 true\nprintfn \"A string %s, and something generic %A\" \"hello\" [1; 2; 3; 4]\n\n// There are also sprintf/sprintfn functions for formatting data\n// into a string, similar to String.Format in C#.\n\n// ================================================\n// More on functions\n// ================================================\n\n// F# is a true functional language -- functions are first\n// class entities and can be combined easily to make powerful\n// constructs\n\n// Modules are used to group functions together\n// Indentation is needed for each nested module.\nmodule FunctionExamples =\n\n    // define a simple adding function\n    let add x y = x + y\n\n    // basic usage of a function\n    let a = add 1 2\n    printfn \"1 + 2 = %i\" a\n\n    // partial application to \"bake in\" parameters\n    let add42 = add 42\n    let b = add42 1\n    printfn \"42 + 1 = %i\" b\n\n    // composition to combine functions\n    let add1 = add 1\n    let add2 = add 2\n    let add3 = add1 >> add2\n    let c = add3 7\n    printfn \"3 + 7 = %i\" c\n\n    // higher order functions\n    [1..10] |> List.map add3 |> printfn \"new list is %A\"\n\n    // lists of functions, and more\n    let add6 = [add1; add2; add3] |> List.reduce (>>)\n    let d = add6 7\n    printfn \"1 + 2 + 3 + 7 = %i\" d\n\n// ================================================\n// Lists and collection\n// ================================================\n\n// There are three types of ordered collection:\n// * Lists are most basic immutable collection.\n// * Arrays are mutable and more efficient when needed.\n// * Sequences are lazy and infinite (e.g. an enumerator).\n//\n// Other collections include immutable maps and sets\n// plus all the standard .NET collections\n\nmodule ListExamples =\n\n    // lists use square brackets\n    let list1 = [\"a\"; \"b\"]\n    let list2 = \"c\" :: list1    // :: is prepending\n    let list3 = list1 @ list2   // @ is concat\n\n    // list comprehensions (aka generators)\n    let squares = [for i in 1..10 do yield i * i]\n\n    // A prime number generator\n    // - this is using a short notation for the pattern matching syntax\n    // - (p::xs) is 'first :: tail' of the list, could also be written as p :: xs\n    //   this means this matches 'p' (the first item in the list), and xs is the rest of the list\n    //   this is called the 'cons pattern'\n    // - uses 'rec' keyword, which is necessary when using recursion\n    let rec sieve = function\n        | (p::xs) -> p :: sieve [ for x in xs do if x % p > 0 then yield x ]\n        | []      -> []\n    let primes = sieve [2..50]\n    printfn \"%A\" primes\n\n    // pattern matching for lists\n    let listMatcher aList =\n        match aList with\n        | [] -> printfn \"the list is empty\"\n        | [first] -> printfn \"the list has one element %A \" first\n        | [first; second] -> printfn \"list is %A and %A\" first second\n        | first :: _ -> printfn \"the list has more than two elements, first element %A\" first\n\n    listMatcher [1; 2; 3; 4]\n    listMatcher [1; 2]\n    listMatcher [1]\n    listMatcher []\n\n    // recursion using lists\n    let rec sum aList =\n        match aList with\n        | [] -> 0\n        | x::xs -> x + sum xs\n    sum [1..10]\n\n    // -----------------------------------------\n    // Standard library functions\n    // -----------------------------------------\n\n    // map\n    let add3 x = x + 3\n    [1..10] |> List.map add3\n\n    // filter\n    let even x = x % 2 = 0\n    [1..10] |> List.filter even\n\n    // many more -- see documentation\n\nmodule ArrayExamples =\n\n    // arrays use square brackets with bar\n    let array1 = [| \"a\"; \"b\" |]\n    let first = array1.[0]        // indexed access using dot\n\n    // pattern matching for arrays is same as for lists\n    let arrayMatcher aList =\n        match aList with\n        | [| |] -> printfn \"the array is empty\"\n        | [| first |] -> printfn \"the array has one element %A \" first\n        | [| first; second |] -> printfn \"array is %A and %A\" first second\n        | _ -> printfn \"the array has more than two elements\"\n\n    arrayMatcher [| 1; 2; 3; 4 |]\n\n    // Standard library functions just as for List\n\n    [| 1..10 |]\n    |> Array.map (fun i -> i + 3)\n    |> Array.filter (fun i -> i % 2 = 0)\n    |> Array.iter (printfn \"value is %i. \")\n\n\nmodule SequenceExamples =\n\n    // sequences use curly braces\n    let seq1 = seq { yield \"a\"; yield \"b\" }\n\n    // sequences can use yield and\n    // can contain subsequences\n    let strange = seq {\n        // \"yield\" adds one element\n        yield 1; yield 2;\n\n        // \"yield!\" adds a whole subsequence\n        yield! [5..10]\n        yield! seq {\n            for i in 1..10 do\n              if i % 2 = 0 then yield i }}\n    // test\n    strange |> Seq.toList\n\n\n    // Sequences can be created using \"unfold\"\n    // Here's the fibonacci series\n    let fib = Seq.unfold (fun (fst,snd) ->\n        Some(fst + snd, (snd, fst + snd))) (0,1)\n\n    // test\n    let fib10 = fib |> Seq.take 10 |> Seq.toList\n    printf \"first 10 fibs are %A\" fib10\n\n\n// ================================================\n// Data Types\n// ================================================\n\nmodule DataTypeExamples =\n\n    // All data is immutable by default\n\n    // Tuples are quick 'n easy anonymous types\n    // -- Use a comma to create a tuple\n    let twoTuple = 1, 2\n    let threeTuple = \"a\", 2, true\n\n    // Pattern match to unpack\n    let x, y = twoTuple  // sets x = 1, y = 2\n\n    // ------------------------------------\n    // Record types have named fields\n    // ------------------------------------\n\n    // Use \"type\" with curly braces to define a record type\n    type Person = {First:string; Last:string}\n\n    // Use \"let\" with curly braces to create a record\n    let person1 = {First=\"John\"; Last=\"Doe\"}\n\n    // Pattern match to unpack\n    let {First = first} = person1    // sets first=\"John\"\n\n    // ------------------------------------\n    // Union types (aka variants) have a set of choices\n    // Only one case can be valid at a time.\n    // ------------------------------------\n\n    // Use \"type\" with bar/pipe to define a union type\n    type Temp =\n        | DegreesC of float\n        | DegreesF of float\n\n    // Use one of the cases to create one\n    let temp1 = DegreesF 98.6\n    let temp2 = DegreesC 37.0\n\n    // Pattern match on all cases to unpack\n    let printTemp = function\n       | DegreesC t -> printfn \"%f degC\" t\n       | DegreesF t -> printfn \"%f degF\" t\n\n    printTemp temp1\n    printTemp temp2\n\n    // ------------------------------------\n    // Recursive types\n    // ------------------------------------\n\n    // Types can be combined recursively in complex ways\n    // without having to create subclasses\n    type Employee =\n      | Worker of Person\n      | Manager of Employee list\n\n    let jdoe = {First=\"John\"; Last=\"Doe\"}\n    let worker = Worker jdoe\n\n    // ------------------------------------\n    // Modeling with types\n    // ------------------------------------\n\n    // Union types are great for modeling state without using flags\n    type EmailAddress =\n        | ValidEmailAddress of string\n        | InvalidEmailAddress of string\n\n    let trySendEmail email =\n        match email with // use pattern matching\n        | ValidEmailAddress address -> ()   // send\n        | InvalidEmailAddress address -> () // don't send\n\n    // The combination of union types and record types together\n    // provide a great foundation for domain driven design.\n    // You can create hundreds of little types that accurately\n    // reflect the domain.\n\n    type CartItem = { ProductCode: string; Qty: int }\n    type Payment = Payment of float\n    type ActiveCartData = { UnpaidItems: CartItem list }\n    type PaidCartData = { PaidItems: CartItem list; Payment: Payment}\n\n    type ShoppingCart =\n        | EmptyCart  // no data\n        | ActiveCart of ActiveCartData\n        | PaidCart of PaidCartData\n\n    // ------------------------------------\n    // Built in behavior for types\n    // ------------------------------------\n\n    // Core types have useful \"out-of-the-box\" behavior, no coding needed.\n    // * Immutability\n    // * Pretty printing when debugging\n    // * Equality and comparison\n    // * Serialization\n\n    // Pretty printing using %A\n    printfn \"twoTuple=%A,\\nPerson=%A,\\nTemp=%A,\\nEmployee=%A\"\n             twoTuple person1 temp1 worker\n\n    // Equality and comparison built in.\n    // Here's an example with cards.\n    type Suit = Club | Diamond | Spade | Heart\n    type Rank = Two | Three | Four | Five | Six | Seven | Eight\n                | Nine | Ten | Jack | Queen | King | Ace\n\n    let hand = [ Club, Ace; Heart, Three; Heart, Ace;\n                 Spade, Jack; Diamond, Two; Diamond, Ace ]\n\n    // sorting\n    List.sort hand |> printfn \"sorted hand is (low to high) %A\"\n    List.max hand |> printfn \"high card is %A\"\n    List.min hand |> printfn \"low card is %A\"\n\n\n// ================================================\n// Active patterns\n// ================================================\n\nmodule ActivePatternExamples =\n\n    // F# has a special type of pattern matching called \"active patterns\"\n    // where the pattern can be parsed or detected dynamically.\n\n    // \"banana clips\" are the syntax for active patterns\n\n    // You can use \"elif\" instead of \"else if\" in conditional expressions.\n    // They are equivalent in F#\n\n    // for example, define an \"active\" pattern to match character types...\n    let (|Digit|Letter|Whitespace|Other|) ch =\n       if System.Char.IsDigit(ch) then Digit\n       elif System.Char.IsLetter(ch) then Letter\n       elif System.Char.IsWhiteSpace(ch) then Whitespace\n       else Other\n\n    // ... and then use it to make parsing logic much clearer\n    let printChar ch =\n      match ch with\n      | Digit -> printfn \"%c is a Digit\" ch\n      | Letter -> printfn \"%c is a Letter\" ch\n      | Whitespace -> printfn \"%c is a Whitespace\" ch\n      | _ -> printfn \"%c is something else\" ch\n\n    // print a list\n    ['a'; 'b'; '1'; ' '; '-'; 'c'] |> List.iter printChar\n\n    // -----------------------------------\n    // FizzBuzz using active patterns\n    // -----------------------------------\n\n    // You can create partial matching patterns as well\n    // Just use underscore in the definition, and return Some if matched.\n    let (|MultOf3|_|) i = if i % 3 = 0 then Some MultOf3 else None\n    let (|MultOf5|_|) i = if i % 5 = 0 then Some MultOf5 else None\n\n    // the main function\n    let fizzBuzz i =\n      match i with\n      | MultOf3 & MultOf5 -> printf \"FizzBuzz, \"\n      | MultOf3 -> printf \"Fizz, \"\n      | MultOf5 -> printf \"Buzz, \"\n      | _ -> printf \"%i, \" i\n\n    // test\n    [1..20] |> List.iter fizzBuzz\n\n// ================================================\n// Conciseness\n// ================================================\n\nmodule AlgorithmExamples =\n\n    // F# has a high signal/noise ratio, so code reads\n    // almost like the actual algorithm\n\n    // ------ Example: define sumOfSquares function ------\n    let sumOfSquares n =\n       [1..n]              // 1) take all the numbers from 1 to n\n       |> List.map square  // 2) square each one\n       |> List.sum         // 3) sum the results\n\n    // test\n    sumOfSquares 100 |> printfn \"Sum of squares = %A\"\n\n    // ------ Example: define a sort function ------\n    let rec sort list =\n       match list with\n       // If the list is empty\n       | [] ->\n            []                            // return an empty list\n       // If the list is not empty\n       | firstElem::otherElements ->      // take the first element\n            let smallerElements =         // extract the smaller elements\n                otherElements             // from the remaining ones\n                |> List.filter (fun e -> e < firstElem)\n                |> sort                   // and sort them\n            let largerElements =          // extract the larger ones\n                otherElements             // from the remaining ones\n                |> List.filter (fun e -> e >= firstElem)\n                |> sort                   // and sort them\n            // Combine the 3 parts into a new list and return it\n            List.concat [smallerElements; [firstElem]; largerElements]\n\n    // test\n    sort [1; 5; 23; 18; 9; 1; 3] |> printfn \"Sorted = %A\"\n\n// ================================================\n// Asynchronous Code\n// ================================================\n\nmodule AsyncExample =\n\n    // F# has built-in features to help with async code\n    // without encountering the \"pyramid of doom\"\n    //\n    // The following example downloads a set of web pages in parallel.\n\n    open System.Net\n    open System\n    open System.IO\n    open Microsoft.FSharp.Control.CommonExtensions\n\n    // Fetch the contents of a URL asynchronously\n    let fetchUrlAsync url =\n        async {   // \"async\" keyword and curly braces\n                  // creates an \"async\" object\n            let req = WebRequest.Create(Uri(url))\n            use! resp = req.AsyncGetResponse()\n                // use! is async assignment\n            use stream = resp.GetResponseStream()\n                // \"use\" triggers automatic close()\n                // on resource at end of scope\n            use reader = new IO.StreamReader(stream)\n            let html = reader.ReadToEnd()\n            printfn \"finished downloading %s\" url\n            }\n\n    // a list of sites to fetch\n    let sites = [\"http://www.bing.com\";\n                 \"http://www.google.com\";\n                 \"http://www.microsoft.com\";\n                 \"http://www.amazon.com\";\n                 \"http://www.yahoo.com\"]\n\n    // do it\n    sites\n    |> List.map fetchUrlAsync  // make a list of async tasks\n    |> Async.Parallel          // set up the tasks to run in parallel\n    |> Async.RunSynchronously  // start them off\n\n// ================================================\n// .NET compatibility\n// ================================================\n\nmodule NetCompatibilityExamples =\n\n    // F# can do almost everything C# can do, and it integrates\n    // seamlessly with .NET or Mono libraries.\n\n    // ------- work with existing library functions  -------\n\n    let (i1success, i1) = System.Int32.TryParse(\"123\");\n    if i1success then printfn \"parsed as %i\" i1 else printfn \"parse failed\"\n\n    // ------- Implement interfaces on the fly! -------\n\n    // create a new object that implements IDisposable\n    let makeResource name =\n       { new System.IDisposable\n         with member this.Dispose() = printfn \"%s disposed\" name }\n\n    let useAndDisposeResources =\n        use r1 = makeResource \"first resource\"\n        printfn \"using first resource\"\n        for i in [1..3] do\n            let resourceName = sprintf \"\\tinner resource %d\" i\n            use temp = makeResource resourceName\n            printfn \"\\tdo something with %s\" resourceName\n        use r2 = makeResource \"second resource\"\n        printfn \"using second resource\"\n        printfn \"done.\"\n\n    // ------- Object oriented code -------\n\n    // F# is also a fully fledged OO language.\n    // It supports classes, inheritance, virtual methods, etc.\n\n    // interface with generic type\n    type IEnumerator<'a> =\n        abstract member Current : 'a\n        abstract MoveNext : unit -> bool\n\n    // abstract base class with virtual methods\n    [<AbstractClass>]\n    type Shape() =\n        // readonly properties\n        abstract member Width : int with get\n        abstract member Height : int with get\n        // non-virtual method\n        member this.BoundingArea = this.Height * this.Width\n        // virtual method with base implementation\n        abstract member Print : unit -> unit\n        default this.Print () = printfn \"I'm a shape\"\n\n    // concrete class that inherits from base class and overrides\n    type Rectangle(x:int, y:int) =\n        inherit Shape()\n        override this.Width = x\n        override this.Height = y\n        override this.Print ()  = printfn \"I'm a Rectangle\"\n\n    // test\n    let r = Rectangle(2, 3)\n    printfn \"The width is %i\" r.Width\n    printfn \"The area is %i\" r.BoundingArea\n    r.Print()\n\n    // ------- extension methods  -------\n\n    // Just as in C#, F# can extend existing classes with extension methods.\n    type System.String with\n       member this.StartsWithA = this.StartsWith \"A\"\n\n    // test\n    let s = \"Alice\"\n    printfn \"'%s' starts with an 'A' = %A\" s s.StartsWithA\n\n    // ------- events  -------\n\n    type MyButton() =\n        let clickEvent = new Event<_>()\n\n        [<CLIEvent>]\n        member this.OnClick = clickEvent.Publish\n\n        member this.TestEvent(arg) =\n            clickEvent.Trigger(this, arg)\n\n    // test\n    let myButton = new MyButton()\n    myButton.OnClick.Add(fun (sender, arg) ->\n            printfn \"Click event with arg=%O\" arg)\n\n    myButton.TestEvent(\"Hello World!\")\n```\n\n## More Information\n\nFor more demonstrations of F#, go to my [why use F#](http://fsharpforfunandprofit.com/why-use-fsharp/) series.\n\nRead more about F# at [fsharp.org](http://fsharp.org/) and [dotnet's F# page](https://dotnet.microsoft.com/languages/fsharp).\n"
        },
        {
          "name": "gdscript.md",
          "type": "blob",
          "size": 10.0087890625,
          "content": "---\nname: GDScript\ncontributors:\n    - [\"Wichamir\", \"https://github.com/Wichamir/\"]\n    - [\"zacryol\", \"https://github.com/zacryol\"]\nfilename: learngdscript.gd\n---\n\nGDScript is a dynamically and statically typed scripting language\nfor the free and open source game engine Godot. Its syntax is vaguely\nsimilar to Python's. Its main advantages are ease of use and tight\nintegration with the engine. It's a perfect fit for game development.\n\n## Basics\n\n```gdscript\n# Single-line comments are written using hash symbol.\n\"\"\"\n  Multi-line\n  comments\n  are\n  written\n  using\n  triple\n  quoted\n  strings\n\"\"\"\n\n# Doc Comments can add a description to classes and fields\n# which can be viewed in the in-engine docs.\n\n## This class is a demonstration of GDScript\n\n# Script file is a class in itself and you can optionally define a name for it.\nclass_name MyClass\n\n# Inheritance\nextends Node2D\n\n# Member variables\nvar x = 8 # int\nvar y = 1.2 # float\nvar b = true # bool\nvar s = \"Hello World!\" # String\nvar a = [1, false, \"brown fox\"] # Array - similar to list in Python,\n                                # it can hold different types\n                                # of variables at once.\nvar d = {\n  \"key\" : \"value\",\n  42 : true\n} # Dictionary holds key-value pairs.\nvar p_arr = PackedStringArray([\"Hi\", \"there\", \"!\"]) # Packed Arrays can\n                                                    # only hold a certain type.\n\n# Doc comments can apply to properties\n\n## How many times this object has jumped\nvar jump_count = 0\n\n# Built-in vector types:\nvar v2 = Vector2(1, 2)\nvar v3 = Vector3(1, 2, 3)\n\n# Constants\nconst ANSWER_TO_EVERYTHING = 42\nconst BREAKFAST = \"Spam and eggs!\"\n\n# Enums\nenum { ZERO, ONE , TWO, THREE }\nenum NamedEnum { ONE = 1, TWO, THREE }\n\n# Exported variables are visible in the inspector.\n#\n# Either a type hint (explained later) or a default value are needed in order\n# for the editor to know what options to give\n@export var age: int\n@export var height: float\n@export var person_name = \"Bob\"\n# But both is also acceptable\n@export var favorite_color: String = \"Green\"\n@export var favorite_food := \"Pizza\"\n\n# Functions\nfunc foo():\n  pass # pass keyword is a placeholder for future code\n\nfunc add(first, second):\n  return first + second\n\n# Doc Comments on functions\n\n## Increases the Jump Count\nfunc jump():\n  jump_count += 1\n\n# Printing values\nfunc printing():\n  print(\"GDScript \", \"is \", \" awesome.\")\n  prints(\"These\", \"words\", \"are\", \"divided\", \"by\", \"spaces.\")\n  printt(\"These\", \"words\", \"are\", \"divided\", \"by\", \"tabs.\")\n  printraw(\"This gets printed to system console.\")\n\n  # Lambdas\n  var my_lambda = func(): print(\"hello from lambda!\")\n\n  my_lambda.call()\n\n# Math\nfunc doing_math():\n  var first = 8\n  var second = 4\n  print(first + second) # 12\n  print(first - second) # 4\n  print(first * second) # 32\n  print(first / second) # 2\n  print(first % second) # 0\n  # There are also +=, -=, *=, /=, %= etc.,\n  # however no ++ or -- operators.\n  print(pow(first, 2)) # 64\n  print(sqrt(second)) # 2\n  printt(PI, TAU, INF, NAN) # built-in constants\n\n# Control flow\nfunc control_flow():\n  x = 8\n  y = 2 # y was originally a float,\n        # but we can change its type to int\n        # using the power of dynamic typing!\n\n  if x < y:\n    print(\"x is smaller than y\")\n  elif x > y:\n    print(\"x is bigger than y\")\n  else:\n    print(\"x and y are equal\")\n\n  var a = true\n  var b = false\n  var c = false\n  if a and b or not c: # alternatively you can use &&, || and !\n    print(\"This is true!\")\n\n  for i in range(20): # GDScript's range is similar to Python's\n    print(i) # so this will print numbers from 0 to 19\n\n  for i in 20: # unlike Python, you can loop over an int directly\n    print(i) # so this will also print numbers from 0 to 19\n\n  for i in [\"two\", 3, 1.0]: # iterating over an array\n    print(i)\n\n  while x > y:\n    printt(x, y)\n    y += 1\n\n  x = 2\n  y = 10\n  while x < y:\n    x += 1\n    if x == 6:\n      continue # 6 won't get printed because of continue statement\n    prints(\"x is equal to:\", x)\n    if x == 7:\n      break # loop will break on 7, so 8, 9 and 10 won't get printed\n\n  match x:\n    1:\n      print(\"Match is similar to switch.\")\n    2:\n      print(\"However you don't need to put cases before each value.\")\n    3:\n      print(\"Furthermore each case breaks on default.\")\n      break # ERROR! Break statement is unnecessary!\n    4:\n      print(\"If you need fallthrough use continue.\")\n      continue\n    _:\n      print(\"Underscore is a default case.\")\n\n  # ternary operator (one line if-else statement)\n  prints(\"x is\", \"positive\" if x >= 0 else \"negative\")\n\n# Casting\nfunc casting_examples():\n  var i = 42\n  var f = float(42) # cast using variables constructor\n  var b = i as bool # or using \"as\" keyword\n\n# Override functions\n# By a convention built-in overridable functions start with an underscore,\n# but in practice you can override virtually any function.\n\n# _init is called when object gets initialized\n# This is the object's constructor.\nfunc _init():\n  # Initialize object's internal stuff here.\n  pass\n\n# _ready gets called when script's node and\n# its children have entered the scene tree.\nfunc _ready():\n  pass\n\n# _process gets called on every frame.\nfunc _process(delta):\n  # The delta argument passed to this function is a number of seconds,\n  # which passed between the last frame and the current one.\n  print(\"Delta time equals: \", delta)\n\n# _physics_process gets called on every physics frame.\n# That means delta should be constant.\nfunc _physics_process(delta):\n  # Simple movement using vector addition and multiplication.\n  var direction = Vector2(1, 0) # or Vector2.RIGHT\n  var speed = 100.0\n  self.global_position += direction * speed * delta\n  # self refers to current class instance\n\n# When overriding you can call parent's function using the dot operator\n# like here:\nfunc get_children():\n  # Do some additional things here.\n  var r = super() # call parent's implementation\n  return r\n\n# Inner class\nclass InnerClass:\n  extends Object\n\n  func hello():\n    print(\"Hello from inner class!\")\n\nfunc use_inner_class():\n  var ic = InnerClass.new()\n  ic.hello()\n  ic.free() # use free for memory cleanup\n```\n\n## Accessing other nodes in the scene tree\n\n```gdscript\nextends Node2D\n\nvar sprite # This variable will hold the reference.\n\n# You can get references to other nodes in _ready.\nfunc _ready() -> void:\n  # NodePath is useful for accessing nodes.\n  # Create NodePath by passing String to its constructor:\n  var path1 = NodePath(\"path/to/something\")\n  # Or by using NodePath literal:\n  var path2 = ^\"path/to/something\"\n  # NodePath examples:\n  var path3 = ^\"Sprite\" # relative path, immediate child of the current node\n  var path4 = ^\"Timers/Firerate\" # relative path, child of the child\n  var path5 = ^\"..\" # current node's parent\n  var path6 = ^\"../Enemy\" # current node's sibling\n  var path7 = ^\"/root\" # absolute path, equivalent to get_tree().get_root()\n  var path8 = ^\"/root/Main/Player/Sprite\" # absolute path to Player's Sprite\n  var path9 = ^\"Timers/Firerate:wait_time\" # accessing properties\n  var path10 = ^\"Player:position:x\" # accessing subproperties\n\n  # Finally, to get a reference use one of these:\n  sprite = get_node(^\"Sprite\") as Sprite # always cast to the type you expect\n  sprite = get_node(\"Sprite\") as Sprite # here String gets\n                                        # implicitly casted to NodePath\n  sprite = get_node(path3) as Sprite\n  sprite = get_node_or_null(\"Sprite\") as Sprite\n  sprite = $Sprite as Sprite\n\nfunc _process(delta):\n  # Now we can reuse the reference in other places.\n  prints(\"Sprite has global_position of\", sprite.global_position)\n\n# Use @onready annotation to assign a value to\n# a variable just before _ready executes.\n# This is a commonly used syntax sugar.\n@onready var other_sprite = $Sprite as Sprite\n\n# You can export NodePath, so you can assign it within the inspector.\n@export var nodepath = ^\"\"\n@onready var reference = get_node(nodepath) as Node\n\n# Or export Node directly\n@export var other_reference: Node\n```\n\n## Signals\n\nSignal system is Godot's implementation of the observer programming\npattern. Here's an example:\n\n```gdscript\nclass_name Player extends Node2D\n\nvar hp = 10\n\n# Doc comments can go on signals too\n\n## Emitted when the player dies\nsignal died() # define signal\nsignal hurt(hp_old, hp_new) # signals can take arguments\n\nfunc apply_damage(dmg):\n  var hp_old = hp\n  hp -= dmg\n  hurt.emit(hp_old, hp) # emit signal and pass arguments\n  if hp <= 0:\n    died.emit()\n\nfunc _ready():\n  # connect signal \"died\" to function \"_on_death\" defined in self\n  died.connect(_on_death)\n  # Alternate way\n  # needed if the target object is not self\n  # died.connect(Callable(self, &\"_on_death\"))\n\nfunc _on_death():\n  queue_free() # destroy Player on death\n```\n\n## Type hints\n\nGDScript can optionally use static typing, for both code clarity and\nperformance benefits.\n\n```gdscript\nextends Node\n\nvar x: int # define typed variable\nvar y: float = 4.2\nvar z := 1.0 # infer type based on default value using := operator\n\nvar a: Array[int] = [1, 2, 3] # Array can also have its type content specified\n\nenum NamedEnum { ONE = 1, TWO, THREE }\nvar n: NamedEnum = NamedEnum.ONE # Enums can be used as types as well\n\n@onready var node_ref_typed := $Child as Node\n\n@export var speed := 50.0\n\nconst CONSTANT := \"Typed constant.\"\n\nsignal example(arg: int)\n\nfunc _ready() -> void:\n  # function returns nothing\n  x = \"string\" # ERROR! Type can't be changed!\n  a.append(\"q\") # ERROR! Array[int] can't hold strings!\n  return\n\nfunc join(arg1: String, arg2: String) -> String:\n  # function takes two Strings and returns a String\n  return arg1 + arg2\n\nfunc get_child_at(index: int) -> Node:\n  # function takes an int and returns a Node\n  return get_children()[index]\n```\n\n## Further Reading\n\n* [Godot's Website](https://godotengine.org/)\n* [Godot Docs](https://docs.godotengine.org/en/stable/)\n* [Getting started with GDScript](https://docs.godotengine.org/en/stable/getting_started/scripting/gdscript/index.html)\n* [NodePath](https://docs.godotengine.org/en/stable/classes/class_nodepath.html)\n* [Signals](https://docs.godotengine.org/en/stable/getting_started/step_by_step/signals.html)\n* [GDQuest](https://www.gdquest.com/)\n* [GDScript.com](https://gdscript.com/)\n"
        },
        {
          "name": "git.md",
          "type": "blob",
          "size": 16.9658203125,
          "content": "---\ncategory: tool\nname: Git\ncontributors:\n    - [\"Jake Prather\", \"http://github.com/JakeHP\"]\n    - [\"Leo Rudberg\" , \"http://github.com/LOZORD\"]\n    - [\"Betsy Lorton\" , \"http://github.com/schbetsy\"]\n    - [\"Bruno Volcov\", \"http://github.com/volcov\"]\n    - [\"Andrew Taylor\", \"http://github.com/andrewjt71\"]\n    - [\"Jason Stathopulos\", \"http://github.com/SpiritBreaker226\"]\n    - [\"Milo Gilad\", \"http://github.com/Myl0g\"]\nfilename: LearnGit.txt\n---\n\nGit is a distributed version control and source code management system.\n\nIt does this through a series of snapshots of your project, and it works\nwith those snapshots to provide you with functionality to version and\nmanage your source code.\n\n## Versioning Concepts\n\n### What is version control?\n\nVersion control is a system that records changes to a file(s), over time.\n\n### Centralized Versioning vs. Distributed Versioning\n\n* Centralized version control focuses on synchronizing, tracking, and backing\nup files.\n* Distributed version control focuses on sharing changes. Every change has a\nunique id.\n* Distributed systems have no defined structure. You could easily have a SVN\nstyle, centralized system, with git.\n\n[Additional Information](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control)\n\n### Why Use Git?\n\n* Can work offline.\n* Collaborating with others is easy!\n* Branching is easy!\n* Branching is fast!\n* Merging is easy!\n* Git is fast.\n* Git is flexible.\n\n## Git Architecture\n\n### Repository\n\nA set of files, directories, historical records, commits, and heads. Imagine it\nas a source code data structure, with the attribute that each source code\n\"element\" gives you access to its revision history, among other things.\n\nA git repository is comprised of the .git directory & working tree.\n\n### .git Directory (component of repository)\n\nThe .git directory contains all the configurations, logs, branches, HEAD, and\nmore.\n[Detailed List.](https://gitready.com/advanced/2009/03/23/whats-inside-your-git-directory.html)\n\n### Working Tree (component of repository)\n\nThis is basically the directories and files in your repository. It is often\nreferred to as your working directory.\n\n### Index (component of .git dir)\n\nThe Index is the staging area in git. It's basically a layer that separates\nyour working tree from the Git repository. This gives developers more power\nover what gets sent to the Git repository.\n\n### Commit\n\nA git commit is a snapshot of a set of changes, or manipulations to your\nWorking Tree. For example, if you added 5 files, and removed 2 others, these\nchanges will be contained in a commit (or snapshot). This commit can then be\npushed to other repositories, or not!\n\n### Branch\n\nA branch is essentially a pointer to the last commit you made. As you go on\ncommitting, this pointer will automatically update to point to the latest commit.\n\n### Tag\n\nA tag is a mark on specific point in history. Typically people use this\nfunctionality to mark release points (v1.0, and so on).\n\n### HEAD and head (component of .git dir)\n\nHEAD is a pointer that points to the current branch. A repository only has 1\n*active* HEAD.\nhead is a pointer that points to any commit. A repository can have any number\nof heads.\n\n### Stages of Git\n* Modified - Changes have been made to a file but file has not been committed\nto Git Database yet\n* Staged - Marks a modified file to go into your next commit snapshot\n* Committed - Files have been committed to the Git Database\n\n## Commands\n\n### init\n\nCreate an empty Git repository. The Git repository's settings, stored\ninformation, and more is stored in a directory (a folder) named \".git\".\n\n```bash\n$ git init\n```\n\n### config\n\nTo configure settings. Whether it be for the repository, the system itself,\nor global configurations ( global config file is `~/.gitconfig` ).\n\n```bash\n# Set & Print Some Basic Config Variables (Global)\n$ git config --global user.email \"MyEmail@Zoho.com\"\n$ git config --global user.name \"My Name\"\n\n$ git config --global user.email\n$ git config --global user.name\n```\n\n[Learn More About git config.](https://git-scm.com/docs/git-config)\n\n### help\n\nTo give you quick access to an extremely detailed guide of each command. Or to\njust give you a quick reminder of some semantics.\n\n```bash\n# Quickly check available commands\n$ git help\n\n# Check all available commands\n$ git help -a\n\n# Command specific help - user manual\n# git help <command_here>\n$ git help add\n$ git help commit\n$ git help init\n# or git <command_here> --help\n$ git add --help\n$ git commit --help\n$ git init --help\n```\n\n### ignore files\n\nTo intentionally untrack file(s) & folder(s) from git. Typically meant for\nprivate & temp files which would otherwise be shared in the repository.\n\n```bash\n$ echo \"temp/\" >> .gitignore\n$ echo \"private_key\" >> .gitignore\n```\n\n### status\n\nTo show differences between the index file (basically your working copy/repo)\nand the current HEAD commit.\n\n```bash\n# Will display the branch, untracked files, changes and other differences\n$ git status\n\n# To learn other \"tid bits\" about git status\n$ git help status\n```\n\n### add\n\nTo add files to the staging area/index. If you do not `git add` new files to\nthe staging area/index, they will not be included in commits!\n\n```bash\n# add a file in your current working directory\n$ git add HelloWorld.java\n\n# add a file in a nested dir\n$ git add /path/to/file/HelloWorld.c\n\n# Regular Expression support!\n$ git add ./*.java\n\n# You can also add everything in your working directory to the staging area.\n$ git add -A\n```\n\nThis only adds a file to the staging area/index, it doesn't commit it to the\nworking directory/repo.\n\n### branch\n\nManage your branches. You can view, edit, create, delete branches using this\ncommand.\n\n```bash\n# list existing branches & remotes\n$ git branch -a\n\n# create a new branch\n$ git branch myNewBranch\n\n# delete a branch\n$ git branch -d myBranch\n\n# rename a branch\n# git branch -m <oldname> <newname>\n$ git branch -m myBranchName myNewBranchName\n\n# edit a branch's description\n$ git branch myBranchName --edit-description\n```\n\n### tag\n\nManage your tags\n\n```bash\n# List tags\n$ git tag\n\n# Create a annotated tag\n# The -m specifies a tagging message, which is stored with the tag.\n# If you don’t specify a message for an annotated tag,\n# Git launches your editor so you can type it in.\n$ git tag -a v2.0 -m 'my version 2.0'\n\n# Show info about tag\n# That shows the tagger information, the date the commit was tagged,\n# and the annotation message before showing the commit information.\n$ git show v2.0\n\n# Push a single tag to remote\n$ git push origin v2.0\n\n# Push a lot of tags to remote\n$ git push origin --tags\n```\n\n### checkout\n\nUpdates all files in the working tree to match the version in the index, or\nspecified tree.\n\n```bash\n# Checkout a repo - defaults to master branch\n$ git checkout\n\n# Checkout a specified branch\n$ git checkout branchName\n\n# Create a new branch & switch to it\n# equivalent to \"git branch <name>; git checkout <name>\"\n\n$ git checkout -b newBranch\n```\n\n### clone\n\nClones, or copies, an existing repository into a new directory. It also adds\nremote-tracking branches for each branch in the cloned repo, which allows you\nto push to a remote branch.\n\n```bash\n# Clone learnxinyminutes-docs\n$ git clone https://github.com/adambard/learnxinyminutes-docs.git\n\n# shallow clone - faster cloning that pulls only latest snapshot\n$ git clone --depth 1 https://github.com/adambard/learnxinyminutes-docs.git\n\n# clone only a specific branch\n$ git clone -b master-cn https://github.com/adambard/learnxinyminutes-docs.git --single-branch\n```\n\n### commit\n\nStores the current contents of the index in a new \"commit.\" This commit\ncontains the changes made and a message created by the user.\n\n```bash\n# commit with a message\n$ git commit -m \"Added multiplyNumbers() function to HelloWorld.c\"\n\n# signed commit with a message (user.signingkey must have been set\n# with your GPG key e.g. git config --global user.signingkey 5173AAD5)\n$ git commit -S -m \"signed commit message\"\n\n# automatically stage modified or deleted files, except new files, and then commit\n$ git commit -a -m \"Modified foo.php and removed bar.php\"\n\n# change last commit (this deletes previous commit with a fresh commit)\n$ git commit --amend -m \"Correct message\"\n```\n\n### diff\n\nShows differences between a file in the working directory, index and commits.\n\n```bash\n# Show difference between your working dir and the index\n$ git diff\n\n# Show differences between the index and the most recent commit.\n$ git diff --cached\n\n# Show differences between your working dir and the most recent commit\n$ git diff HEAD\n```\n\n### grep\n\nAllows you to quickly search a repository.\n\nOptional Configurations:\n\n```bash\n# Thanks to Travis Jeffery for these\n# Set line numbers to be shown in grep search results\n$ git config --global grep.lineNumber true\n\n# Make search results more readable, including grouping\n$ git config --global alias.g \"grep --break --heading --line-number\"\n```\n\n```bash\n# Search for \"variableName\" in all java files\n$ git grep 'variableName' -- '*.java'\n\n# Search for a line that contains \"arrayListName\" and, \"add\" or \"remove\"\n$ git grep -e 'arrayListName' --and \\( -e add -e remove \\)\n```\n\nGoogle is your friend; for more examples\n[Git Grep Ninja](https://travisjeffery.com/b/2012/02/search-a-git-repo-like-a-ninja)\n\n### log\n\nDisplay commits to the repository.\n\n```bash\n# Show all commits\n$ git log\n\n# Show only commit message & ref\n$ git log --oneline\n\n# Show merge commits only\n$ git log --merges\n\n# Show all commits represented by an ASCII graph\n$ git log --graph\n```\n\n### merge\n\n\"Merge\" in changes from external commits into the current branch.\n\n```bash\n# Merge the specified branch into the current.\n$ git merge branchName\n\n# Always generate a merge commit when merging\n$ git merge --no-ff branchName\n```\n\n### mv\n\nRename or move a file\n\n```bash\n# Renaming a file\n$ git mv HelloWorld.c HelloNewWorld.c\n\n# Moving a file\n$ git mv HelloWorld.c ./new/path/HelloWorld.c\n\n# Force rename or move\n# \"existingFile\" already exists in the directory, will be overwritten\n$ git mv -f myFile existingFile\n```\n\n### pull\n\nPulls from a repository and merges it with another branch.\n\n```bash\n# Update your local repo, by merging in new changes\n# from the remote \"origin\" and \"master\" branch.\n# git pull <remote> <branch>\n$ git pull origin master\n\n# By default, git pull will update your current branch\n# by merging in new changes from its remote-tracking branch\n$ git pull\n\n# Merge in changes from remote branch and rebase\n# branch commits onto your local repo, like: \"git fetch <remote> <branch>, git\n# rebase <remote>/<branch>\"\n$ git pull origin master --rebase\n```\n\n### push\n\nPush and merge changes from a branch to a remote & branch.\n\n```bash\n# Push and merge changes from a local repo to a\n# remote named \"origin\" and \"master\" branch.\n# git push <remote> <branch>\n$ git push origin master\n\n# By default, git push will push and merge changes from\n# the current branch to its remote-tracking branch\n$ git push\n\n# To link up current local branch with a remote branch, add -u flag:\n$ git push -u origin master\n# Now, anytime you want to push from that same local branch, use shortcut:\n$ git push\n```\n\n### stash\n\nStashing takes the dirty state of your working directory and saves it on a\nstack of unfinished changes that you can reapply at any time.\n\nLet's say you've been doing some work in your git repo, but you want to pull\nfrom the remote. Since you have dirty (uncommitted) changes to some files, you\nare not able to run `git pull`. Instead, you can run `git stash` to save your\nchanges onto a stack!\n\n```bash\n$ git stash\nSaved working directory and index state \\\n  \"WIP on master: 049d078 added the index file\"\n  HEAD is now at 049d078 added the index file\n  (To restore them type \"git stash apply\")\n```\n\nNow you can pull!\n\n```bash\ngit pull\n```\n\n`...changes apply...`\n\nNow check that everything is OK\n\n```bash\n$ git status\n# On branch master\nnothing to commit, working directory clean\n```\n\nYou can see what \"hunks\" you've stashed so far using `git stash list`.\nSince the \"hunks\" are stored in a Last-In-First-Out stack, our most recent\nchange will be at top.\n\n```bash\n$ git stash list\nstash@{0}: WIP on master: 049d078 added the index file\nstash@{1}: WIP on master: c264051 Revert \"added file_size\"\nstash@{2}: WIP on master: 21d80a5 added number to log\n```\n\nNow let's apply our dirty changes back by popping them off the stack.\n\n```bash\n$ git stash pop\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add <file>...\" to update what will be committed)\n#\n#      modified:   index.html\n#      modified:   lib/simplegit.rb\n#\n```\n\n`git stash apply` does the same thing\n\nNow you're ready to get back to work on your stuff!\n\n[Additional Reading.](https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning)\n\n### rebase (caution)\n\nTake all changes that were committed on one branch, and replay them onto\nanother branch.\n*Do not rebase commits that you have pushed to a public repo*.\n\n```bash\n# Rebase experimentBranch onto master\n# git rebase <basebranch> <topicbranch>\n$ git rebase master experimentBranch\n```\n\n[Additional Reading.](https://git-scm.com/book/en/v2/Git-Branching-Rebasing)\n\n### reset (caution)\n\nReset the current HEAD to the specified state. This allows you to undo merges,\npulls, commits, adds, and more. It's a great command but also dangerous if you\ndon't know what you are doing.\n\n```bash\n# Reset the staging area, to match the latest commit (leaves dir unchanged)\n$ git reset\n\n# Reset the staging area, to match the latest commit, and overwrite working dir\n$ git reset --hard\n\n# Moves the current branch tip to the specified commit (leaves dir unchanged)\n# all changes still exist in the directory.\n$ git reset 31f2bb1\n\n# Moves the current branch tip backward to the specified commit\n# and makes the working dir match (deletes uncommitted changes and all commits\n# after the specified commit).\n$ git reset --hard 31f2bb1\n```\n\n### reflog (caution)\n\nReflog will list most of the git commands you have done for a given time period,\ndefault 90 days.\n\nThis give you the chance to reverse any git commands that have gone wrong\n(for instance, if a rebase has broken your application).\n\nYou can do this:\n\n1. `git reflog` to list all of the git commands for the rebase\n\n```\n38b323f HEAD@{0}: rebase -i (finish): returning to refs/heads/feature/add_git_reflog\n38b323f HEAD@{1}: rebase -i (pick): Clarify inc/dec operators\n4fff859 HEAD@{2}: rebase -i (pick): Update java.html.markdown\n34ed963 HEAD@{3}: rebase -i (pick): [yaml/en] Add more resources (#1666)\ned8ddf2 HEAD@{4}: rebase -i (pick): pythonstatcomp spanish translation (#1748)\n2e6c386 HEAD@{5}: rebase -i (start): checkout 02fb96d\n```\n\n2. Select where to reset to, in our case its `2e6c386`, or `HEAD@{5}`\n3. 'git reset --hard HEAD@{5}' this will reset your repo to that head\n4. You can start the rebase again or leave it alone.\n\n[Additional Reading.](https://git-scm.com/docs/git-reflog)\n\n### revert\n\nRevert can be used to undo a commit. It should not be confused with reset which\nrestores the state of a project to a previous point. Revert will add a new\ncommit which is the inverse of the specified commit, thus reverting it.\n\n```bash\n# Revert a specified commit\n$ git revert <commit>\n```\n\n### rm\n\nThe opposite of git add, git rm removes files from the current working tree.\n\n```bash\n# remove HelloWorld.c\n$ git rm HelloWorld.c\n\n# Remove a file from a nested dir\n$ git rm /pather/to/the/file/HelloWorld.c\n```\n\n### blame\nExamine specific parts of the code's history and find out who was the last author to modify that line.\n\n```bash\n# find the authors on the latest modified lines\n$ git blame google_python_style.vim\nb88c6a1b (Google Python team  2019-12-30 13:45:23 -0800 12) \" See the License for the specific language governing permissions and\nb88c6a1b (Google Python team  2019-12-30 13:45:23 -0800 13) \" limitations under the License.\nb88c6a1b (Google Python team  2019-12-30 13:45:23 -0800 14) \n222e6da8 (mshields@google.com 2010-11-29 20:32:06 +0000 15) \" Indent Python in the Google way.\n222e6da8 (mshields@google.com 2010-11-29 20:32:06 +0000 16) \n222e6da8 (mshields@google.com 2010-11-29 20:32:06 +0000 17) setlocal indentexpr=GetGooglePythonIndent(v:lnum)\n```\n\n## Further Information\n\n* [Learn Git Branching - the most visual and interactive way to learn Git on the web](https://learngitbranching.js.org/)\n\n* [Udemy Git Tutorial: A Comprehensive Guide](https://blog.udemy.com/git-tutorial-a-comprehensive-guide/)\n\n* [Git Immersion - A Guided tour that walks through the fundamentals of git](https://gitimmersion.com/)\n\n* [git-scm - Video Tutorials](https://git-scm.com/videos)\n\n* [git-scm - Documentation](https://git-scm.com/docs)\n\n* [Atlassian Git - Tutorials & Workflows](https://www.atlassian.com/git/)\n\n* [SalesForce Cheat Sheet](https://res.cloudinary.com/hy4kyit2a/image/upload/SF_git_cheatsheet.pdf)\n\n* [git - the simple guide](https://rogerdudler.github.io/git-guide/index.html)\n\n* [Pro Git](https://git-scm.com/book/en/v2)\n\n* [An introduction to Git and GitHub for Beginners (Tutorial)](https://product.hubspot.com/blog/git-and-github-tutorial-for-beginners)\n\n* [The New Boston tutorial to Git covering basic commands and workflow](https://www.youtube.com/playlist?list=PL6gx4Cwl9DGAKWClAD_iKpNC0bGHxGhcx)\n\n* [Git For Computer Scientists](https://eagain.net/articles/git-for-computer-scientists/)\n"
        },
        {
          "name": "gleam.md",
          "type": "blob",
          "size": 23.6318359375,
          "content": "---\nname: Gleam\ncontributors:\n    - [\"Antonio Ognio\", \"https://github.com/aognio/\"]\nfilename: learngleam.gleam\n---\n\nGleam is a new language for Erlang's BEAM virtual machine that relies on the\npower of a robust type system, the expressiveness of functional programming,\nand the highly concurrent fault-tolerant Erlang runtime using familiar and\nmodern syntax inspired by languages like OCaml, Rust and Elixir.\n\nBeing a pretty modern development, Gleam comes with a compiler, a build tool,\na code formatter, several editor integrations, and a package manager.\n\nBeing part of the larger BEAM ecosystem, the programs created with Gleam can\nalso make use of thousands of published packages written in Erlang or Elixir.\n\nThe design of the language is very concise so it features no null values,\nno exceptions, clear error messages, and a practical type system.\n\nJavaScript is additionally supported as a compile target, so you can run Gleam\ncode in browser or any other JS-enabled runtime. When using this feature,\nTypeScript definitions get created, so you can interact with your Gleam code\nconfidently, even from the outside.\n\n```\n//// This comment with four slashes is a module-level.\n//// This kind of comments are used to describe the whole module.\n\nimport gleam/bool\nimport gleam/io\nimport gleam/int\nimport gleam/float\nimport gleam/list\nimport gleam/iterator\nimport gleam/option.{type Option, None, Some}\nimport gleam/result\nimport gleam/string\nimport gleam/string as text\n\n// A type's name always starts with a capital letter, contrasting to variables\n// and functions, which start with a lowercase letter.\n\n// When the pub keyword is used the type alias is public and can be referred to\n// by other modules.\n\npub type UserId =\n  Int\n\npub fn main() {\n  io.println(\"Hello from learnxinmyminutes.com!\")\n  // io.println(\"This statement got commented out by a two slashes comment.!\")\n\n  // Modules are the units in which all Gleam code gets organized.\n  // In a module you will find a bunch of definitions of types, functions, etc.\n  // that seem to belong together.\n  // For example, the gleam/io module contains a variety of functions for\n  // printing, like println.\n\n  // All gleam code is in some module or other, whose name comes from the name\n  // of the file it's in.\n  // For example, gleam/io is in a file called io.gleam in a directory called\n  // gleam.\n\n  // Gleam has a robust static type system that helps you as you write and edit\n  // code, catching mistakes and showing you where to make changes.\n  // io.println(10)\n  // If you uncomment the previous line you'll get a compile time error reported\n  // as the io.println function only works with strings, not ints.\n\n  // The compile will output an error that looks like this:\n  // error: Type mismatch\n  //  ┌─ /home/contributor/learnxinmyminutes/src/learnxinmyminutes.gleam:21:14\n  //  │\n  // 21 │   io.println(10)\n  //  │              ^^\n  //\n  // Expected type:\n  //\n  //     String\n  //\n  // Found type:\n  //\n  //     Int\n\n  // Working with numbers\n\n  // When running on the Erlang virtual machine ints have no maximum and minimum\n  // size.\n  // When running on JavaScript runtimes ints are represented using JavaScript's\n  // 64 bit floating point numbers.\n\n  // Int arithmetic\n  io.debug(1 + 1)\n  io.debug(5 - 1)\n  io.debug(5 / 2)\n  io.debug(3 * 3)\n  io.debug(5 % 2)\n\n  // Int comparisons\n  io.debug(2 > 1)\n  io.debug(2 < 1)\n  io.debug(2 >= 1)\n  io.debug(2 <= 1)\n\n  // Equality works for any type and is checked structurally, meaning that two\n  // values are equal if they have the same structure rather than if they are at\n  // the same memory location.\n  io.debug(1 == 1)\n  // True\n  io.debug(2 != 2)\n  // False\n\n  // Standard library int functions\n  io.debug(int.min(142, 137))\n  // 137\n  io.debug(int.clamp(-80, min: 0, max: 100))\n  // 0\n  io.debug(int.base_parse(\"10\", 2))\n  // Ok(2)\n\n  // Binary, octal, and hex Int literals\n  io.debug(0b00001111)\n  io.debug(0o17)\n  io.debug(0xF)\n\n  // Use underscores to enhance integer readability\n  io.debug(1_000_000)\n\n  // Gleam's numerical operators are not overloaded, so there are dedicated\n  // operators for working with floats.\n\n  // Float arithmetic\n  io.debug(1.0 +. 1.5)\n  io.debug(5.0 -. 1.5)\n  io.debug(5.0 /. 2.5)\n  io.debug(3.0 *. 3.5)\n\n  // Float comparisons\n  io.debug(2.2 >. 1.3)\n  io.debug(2.2 <. 1.3)\n  io.debug(2.2 >=. 1.3)\n  io.debug(2.2 <=. 1.3)\n\n  // Floats are represented as 64-bit floating point numbers on both the Erlang\n  // and JavaScript runtimes.\n  // The floating point behaviour is native to their respective runtimes, so\n  // their exact behaviour will be slightly different on the two runtimes.\n\n  // Under the JavaScript runtime, exceeding the maximum (or minimum)\n  // representable value for a floating point value will result in Infinity\n  // (or -Infinity). Should you try to divide two infinities you will get NaN\n  // as a result.\n\n  // When running on the BEAM any overflow will raise an error. So there is no\n  // NaN or Infinity float value in the Erlang runtime.\n\n  // Division by zero is not an error\n  io.debug(3.14 /. 0.0)\n  // 0.0\n\n  // Standard library float functions\n  io.debug(float.max(2.0, 9.5))\n  // 9.5\n  io.debug(float.ceiling(5.4))\n  // 6.0\n\n  // Underscores for floats are also supported\n  io.debug(10_000.01)\n\n  // Division by zero will not overflow but is instead defined to be zero.\n\n  // Working with strings\n  io.debug(\"⭐ Gleam ⭐ - 별\")\n  io.debug(\n    \"this\n    is\n    a\n    multi\n    line\n    string\",\n  )\n  io.debug(\"\\u{1F600}\")\n  // Outputs a smiley 😀\n\n  // Double quote can be escaped\n  io.println(\"\\\"X\\\" marks the spot\")\n\n  // String concatenation\n  io.debug(\"One \" <> \"Two\")\n\n  // String functions\n  io.debug(text.reverse(\"1 2 3 4 5\"))\n  io.debug(text.append(\"abc\", \"def\"))\n\n  io.println(text.reverse(\"!desrever tog gnirts sihT\"))\n  // Outputs \"This string got reversed!\"\n\n  // Several escape sequences are supported:\n\n  // \\\" - double quote\n  // \\\\ - backslash\n  // \\f - form feed\n  // \\n - newline\n  // \\r - carriage return\n  // \\t - tab\n\n  // Bool operators\n  // The || and && operators work by short-circuiting\n\n  io.debug(True && False)\n  // False\n\n  io.debug(True && True)\n  // True\n\n  io.debug(False || False)\n  // False\n\n  io.debug(False || True)\n  // True\n\n  // Bool functions\n  io.debug(bool.to_string(True))\n  // \"True\"\n\n  io.debug(bool.to_int(False))\n  // 0\n\n  // Assignments\n  let x = \"Original value\"\n  io.debug(x)\n\n  // Assign `y` to the value of `x`\n  let y = x\n  io.debug(y)\n\n  // Assign `x` to a new value\n  let x = \"New value\"\n  io.debug(x)\n\n  // The `y` still refers to the original value\n  io.debug(y)\n\n  // In Gleam variable and function names are written in snake_case.\n  let answer_to_the_universe = 42\n  io.debug(answer_to_the_universe)\n\n  let and_everything = answer_to_the_universe\n  // Now using a variable produces a warning\n\n  // warning: Unused variable\n  //     ┌─ /home/contributor/learnxinmyminutes/src/learnxinmyminutes.gleam:199:7\n  //     │\n  // 199 │   let and_everything = answer_to_the_universe\n  //     │       ^^^^^^^^^^^^^^ This variable is never used\n  // Hint: You can ignore it with an underscore: `_and_everything`.\n\n  // Type annotations\n\n  let _name: String = \"Gleam\"\n\n  let _is_cool: Bool = True\n\n  let _version: Int = 1\n  // Useful for documentation purposes but they do not change how the compiler\n  // type checks the code beyond making sure the annotation matches the type,\n  // otherwise you get an error.\n\n  // let _has_wrong_type_annotation: Int = True\n\n  //  error: Type mismatch\n  //      ┌─ /home/contributor/learnxinmyminutes/src/learnxinmyminutes.gleam:219:41\n  //      │\n  //  219 │   let _has_wrong_type_annotation: Int = True\n  //      │                                         ^^^^\n  //\n  //  Expected type:\n  //\n  //      Int\n  //\n  //  Found type:\n  //\n  //      Bool\n\n  // Type aliases\n  let one: UserId = 1\n  // Refer to the beginning of the file for the definition of the UserId type\n\n  let two: Int = 2\n\n  // Aliases are just for creating more readable code and more precise\n  // documentation.\n  // Under the hood they are still values of the same type so operations\n  // still work\n  io.debug(one + two)\n  // 3\n\n  // Blocks: scoping and value\n  let radius = {\n    let value = 100.0\n    value\n  }\n  // io.debug(value) // <- This will not compile because \"value\" is out of scope\n\n  let area = 3.14159 *. radius *. radius\n  io.debug(area)\n\n  // Use blocks to group operations instead of parenthesis\n  let n1 = { 3 + 2 } * 5\n  let n2 = 3 + { 2 * 5 }\n  io.debug(n1 != n2)\n  // True\n\n  // Lists\n\n  // Nephews of Scrooge McDuck\n  let nephews = [\"Huey\", \"Dewey\", \"Louie\"]\n  io.debug(nephews)\n  // [\"Huey\", \"Dewey\", \"Louie\"]\n\n  // Immutably prepend so the original list is not changed\n  io.debug([\"Donald\", ..nephews])\n  // [\"Donald\", \"Huey\", \"Dewey\", \"Louie\"]\n\n  // Some standard library functions for lists\n\n  list.each(nephews, io.println)\n  // Huey\n  // Dewey\n  // Louie\n\n  io.debug(list.drop(nephews, 2))\n  // [\"Louie\"]\n\n  more_examples()\n  more_function_examples()\n  generic_typing_examples()\n  beloved_pipelines_demo()\n  labels_in_function_calls()\n  showcase_flow_control()\n  more_on_recursion()\n  more_on_pattern_matching()\n  showcase_types()\n  more_on_types()\n  more_on_callbacks()\n  showcase_externals()\n  showcase_panic()\n}\n\n// The fn keyword is used to define new functions.\nfn multiply(a: Int, b: Int) -> Int {\n  // No explicit return\n  // The last expression gets returned\n  a * b\n}\n\n// The double and multiply functions are defined without the pub keyword.\n// This makes them private functions, they can only be used within this module.\n// If another module attempted to use them it would result in a compiler error.\nfn double(a: Int) -> Int {\n  multiply(a, 2)\n}\n\n// Only public functions are exported and can be called from outside the module.\n\n// Type annotations are optional for function arguments and return values\n// but are considered good practice for clarity and in order to encourage\n// intentional and thoughtful design.\n\npub fn is_leap_year(year: Int) -> Bool {\n  { year % 4 == 0 } && { { year % 100 != 0 } || { year % 400 == 0 } }\n}\n\nfn more_examples() {\n  // Debug also returns a value so its output is the return value of\n  // this function\n  io.debug(double(10))\n  // 20\n  io.debug(is_leap_year(2000))\n  // True\n}\n\n// Gleam supports higher-order functions:\n// They can be assigned to variables, passed as arguments to other functions\n// or even be returned as values from blocks or other functions\nfn call_func_on_int(func: fn(Int) -> Int, value: Int) -> Int {\n  func(value)\n}\n\nfn more_function_examples() -> Int {\n  io.debug(call_func_on_int(double, 2))\n  // 4\n\n  let square = fn(x: Int) -> Int { x * x }\n  io.debug(square(3))\n  // 9\n\n  // Calling an anonymous function immediately after defining it\n  io.debug(fn(x: Int) { x + 1 }(1))\n\n  // Closure example\n  let make_adder = fn(n: Int) -> fn(Int) -> Int {\n    fn(argument: Int) -> Int { argument + n }\n  }\n\n  let adder_of_fives = make_adder(5)\n  io.debug(adder_of_fives(10))\n  // 15\n\n  // Anonymous functions can be used interchangeably with named functions.\n  io.debug(call_func_on_int(fn(x: Int) -> Int { x + 100 }, 900))\n  // 1000\n\n  // Let's create a function decorator\n  let twice = fn(wrapped_func: fn(Int) -> Int) -> fn(Int) -> Int {\n    fn(argument: Int) -> Int { wrapped_func(wrapped_func(argument)) }\n  }\n  let quadruple = twice(double)\n  io.debug(quadruple(1))\n\n  let quadruple_2 = fn(a: Int) -> Int { multiply(4, a) }\n  io.debug(quadruple_2(2))\n  // 8\n\n  // A function capture is a shorthand syntax for creating anonymous functions\n  // that takes one argument and immediately calls another function with that\n  // argument\n  let quadruple_3 = multiply(4, _)\n  io.debug(quadruple_3(4))\n  // 16\n}\n\n// Generic functions are supported using type variables.\nfn generic_twice(func: fn(value) -> value, argument: value) -> value {\n  func(func(argument))\n}\n\n// In generic_twice value was the type variable.\n// In generic_twice_decorator the_type is the type variable.\n// As in any other variable you get to choose the name.\nfn generic_twice_decorator(\n  func: fn(the_type) -> the_type,\n) -> fn(the_type) -> the_type {\n  fn(argument: the_type) -> the_type { func(func(argument)) }\n}\n\nfn generic_typing_examples() {\n  let double_integers = fn(a: Int) -> Int { a * 2 }\n  let double_floats = fn(a: Float) -> Float { a *. 2.0 }\n  io.debug(generic_twice(double_integers, 3))\n  io.debug(generic_twice(double_floats, 3.0))\n\n  let quadruple_integers = generic_twice_decorator(double_integers)\n  let quadruple_floats = generic_twice_decorator(double_floats)\n  io.debug(quadruple_integers(1))\n  // 4\n  io.debug(quadruple_floats(1.0))\n  // 4.0\n}\n\n// Gleam's pipe operator |> takes the result of the expression on its left\n// and passes it as an argument to the function on its right.\nfn beloved_pipelines_demo() {\n  // Let's be honest: you want to use Gleam just for this cool operator, right?\n  [\"hello\", \"world\"]\n  |> list.intersperse(\" \")\n  |> list.append([\"!\"])\n  |> string.concat\n  |> string.capitalise\n  |> io.debug\n\n  // Match cleaner than this right?\n  io.debug(\n    string.capitalise(\n      string.concat(\n        list.append(list.intersperse([\"hello\", \"world\"], \" \"), [\"!\"]),\n      ),\n    ),\n  )\n\n  // Solution to the first problem of Project Euler:\n  // URL: https://projecteuler.net/problem=1\n  // Description: Find the sum of all the multiples of 3 and 5 below 1000.\n  iterator.iterate(1, fn(n) { n + 1 })\n  |> iterator.take(1000 - 1)\n  |> iterator.filter(fn(n) { { n % 3 == 0 } || { n % 5 == 0 } })\n  |> iterator.fold(from: 0, with: fn(acc, element) { element + acc })\n  |> int.to_string\n  |> fn(sum_as_text: String) {\n    \"Solution to Project Euler's problem #1: \" <> sum_as_text\n  }\n  |> io.debug\n  // Solution to Project Euler's problem #1: 233168\n}\n\n// Labels can be added before each argument\nfn call_func_on_int_with_labels(\n  func passed_func: fn(Int) -> Int,\n  value n: Int,\n) -> Int {\n  passed_func(n)\n}\n\n// The label and the argument can have the same name\nfn add_one(number number: Int) -> Int {\n  number + 1\n}\n\nfn add_two_integers(first n: Int, second m: Int) -> Int {\n  n + m\n}\n\nfn labels_in_function_calls() -> Int {\n  // Since we are labelling the arguments we can switch the order\n  // if we want to\n  io.debug(call_func_on_int_with_labels(value: 8, func: double))\n  io.debug(add_one(number: 1))\n  // 2\n  io.debug(string.contains(does: \"theme\", contain: \"the\"))\n  // True\n  // Unlabeled arguments must go first\n  io.debug(add_two_integers(2, second: 2))\n  // 4\n}\n\nfn showcase_flow_control() {\n  // Use case if you want to use pattern-matching in order to\n  // select which code to execute.\n  // Gleam will make sure all possible values are covered\n  // by performing exhaustiveness checks.\n  // Otherwise you get compilation errors.\n  let puppies = [\"Bear\", \"Frisco\", \"Ranger\"]\n  let count = list.length(of: puppies)\n  {\n    \"We have \"\n    <> int.to_string(count)\n    <> \" \"\n    <> // The underscore matches with any other value\n    case count {\n      1 -> \"puppy\"\n      _ -> \"puppies\"\n    }\n  }\n  |> io.debug\n\n  // Gleam allows patterns in case expressions to also assign variables.\n  {\n    \"Puppy count: \"\n    <> case list.length(puppies) {\n      0 -> \"None.\"\n      1 -> \"Just one.\"\n      other -> \"As many as \" <> int.to_string(other) <> \" puppies.\"\n    }\n  }\n  |> io.debug\n\n  // Consider BEAM languages are functional in design and Gleam is no exception\n  // so there are no if, for or while constructs available.\n\n  // Use pattern-matching for conditionals\n  let answer = 42\n  case answer == 42 {\n    True -> {\n      io.debug(\"This is the answer to the universe.\")\n    }\n    False -> {\n      io.debug(\"This is the answer to something else.\")\n    }\n  }\n\n  // Use recursion instead of looping\n  from_one_to_ten(1)\n}\n\n// Recursive function\nfn from_one_to_ten(n: Int) {\n  io.debug(n)\n  case n {\n    10 -> Nil\n    _ -> from_one_to_ten(n + 1)\n  }\n}\n\n// In order to avoid memory exhaustion due to creating excessive\n// stack frames when calling functions recursively, Gleam supports\n// \"tail call optimisation\" which means that the compiler can reuse\n// the stack frame for the current function if a function call is\n// the last thing the function does.\n\npub fn fib(x: Int) -> Int {\n  // The public function calls the private tail recursive function\n  fib_loop(x, 1)\n}\n\nfn fib_loop(x: Int, accumulator: Int) -> Int {\n  case x {\n    1 -> accumulator\n\n    // The last thing this function does is call itself\n    // In the previous lesson the last thing it did was multiply two ints\n    _ -> fib_loop(x - 1, accumulator + x)\n  }\n}\n\n// Gleam supports pattern-matching the first element and the remainder\n// of a list with the [x, ..y] pattern inside a case expression.\nfn reverse_list(the_list: List(value)) -> List(value) {\n  case the_list {\n    [head, ..tail] -> list.concat([reverse_list(tail), [head]])\n    [] -> []\n  }\n}\n\nfn more_on_recursion() {\n  io.debug(fib(10))\n  // 55\n  io.debug(reverse_list([1, 2, 3]))\n}\n\nfn more_on_pattern_matching() {\n  // When pattern-matching on strings the <> operator match on strings\n  // with a specific prefix and assigns the reminder to a variable\n  io.debug(case \"Hello, Lucy\" {\n    \"Hello, \" <> name -> \"Greetings for \" <> name\n    _ -> \"Potentially no greetings\"\n  })\n\n  // Alternative patterns are supported so the same clause is used\n  // for multiple values\n  let month = 2\n  let year = 2024\n  let number_of_days = case month {\n    2 ->\n      case is_leap_year(year) {\n        False -> 28\n        True -> 29\n      }\n    4 | 6 | 9 | 11 -> 30\n    1 | 3 | 5 | 7 | 8 | 10 | 12 -> 31\n    _ -> 0\n  }\n  io.debug(\"Number of days: \" <> int.to_string(number_of_days))\n  // 29\n\n  // Guards in pattern-matching:\n  // When using the if keyword an expression must evaluate to True\n  // for the pattern to match.\n  let list_starts_with = fn(the_list: List(value), the_value: value) -> Bool {\n    case the_list {\n      [head, ..] if head == the_value -> True\n      _ -> False\n    }\n  }\n  io.debug(list_starts_with([10, 20, 30], 10))\n  // True\n}\n\npub type Gender {\n  Male\n  Female\n  Other\n}\n\n// Records:\n// - Support variants\n// - Each variant is similar to a struct with fields\npub type Shape {\n  Rectangle(base: Float, height: Float)\n  Triangle(base: Float, height: Float)\n}\n\n// Records with one variant resemble structs\npub type Point {\n  Point(x: Float, y: Float)\n}\n\nfn showcase_types() {\n  // Tuples:\n  // - Can mix together elements of different types\n  // - Their type is implicit e.g. #{1, \"Hello\"} is of type #{Int, String}\n  // - Their elements can be accessed by numeric indexes\n  let tuple_01 = #(1, \"Ferris\", \"rustacean\", True)\n  let tuple_02 = #(1, \"Lucy\", \"starfish\", True)\n  io.debug(tuple_01)\n  io.debug(tuple_01.0)\n  // 1\n  io.debug(tuple_02.1)\n  // Lucy\n  let #(_, name, species, _) = tuple_01\n  io.debug(name <> \" the \" <> species)\n\n  // Pattern-matching with tuples including variable assignment\n  case tuple_02 {\n    #(_, name, _, True) -> io.debug(name <> \" is a mascot.\")\n    #(_, name, _, False) -> io.debug(name <> \" is not a mascot.\")\n  }\n\n  // Using a custom type with pattern-matching\n  let gender = Other\n  io.debug(case gender {\n    Male -> \"Boy\"\n    Female -> \"Girl\"\n    _ -> \"Undetermined\"\n  })\n\n  // Using records\n  let rectangle_1 = Rectangle(base: 10.0, height: 20.0)\n  io.debug(rectangle_1.height)\n  // 10.3\n\n  let point_1 = Point(x: 3.2, y: 4.3)\n  io.debug(point_1)\n\n  // Updating a record\n  let point_2 = Point(..point_1, y: 5.7)\n  io.debug(point_2)\n\n  // In Gleam, values are not nullable.\n  // Nil is the only value of its type.\n  let some_var = Nil\n  let result = io.println(\"Hello!\")\n  io.debug(some_var == result)\n  // True\n}\n\npub type Mineral {\n  Gold\n  Silver\n  Copper\n}\n\n// Generic custom types with contained types as parameters\npub type Purity(inner_type) {\n  Pure(inner_type)\n  Impure(inner_type)\n}\n\npub type Beverage {\n  Water\n  Juice\n}\n\n// Existing custom types from the gleam/option and gleam/result modules\n// facilitate working with nullable values and handling potential errors\npub type Person {\n  Person(name: String, nickname: Option(String))\n}\n\npub type DiceError {\n  DiceValueOutOfRange\n}\n\nfn checked_dice_value(value: Int) -> Result(Int, DiceError) {\n  case value {\n    1 | 2 | 3 | 4 | 5 | 6 -> Ok(value)\n    _ -> Error(DiceValueOutOfRange)\n  }\n}\n\nfn double_dice_value(value: Int) -> Result(Int, DiceError) {\n  case value {\n    1 | 2 | 3 -> Ok(value * 2)\n    _ -> Error(DiceValueOutOfRange)\n  }\n}\n\nfn more_on_types() {\n  let mineral_sample_01: Purity(Mineral) = Pure(Gold)\n  let mineral_sample_02 = Impure(Silver)\n  io.debug(mineral_sample_01)\n  io.debug(mineral_sample_02)\n\n  // A glass can be empty or not\n  let glass_01: Option(Beverage) = Some(Water)\n  let glass_02 = None\n  io.debug(glass_01)\n  io.debug(glass_02)\n\n  // A person can have a nickname or not\n  let person_01 = Person(name: \"John\", nickname: Some(\"The Ripper\"))\n  let person_02 = Person(name: \"Martin\", nickname: None)\n  io.debug(person_01)\n  io.debug(person_02)\n\n  // Working with functions that return values of type Result\n  let dice_01 = 5\n  case checked_dice_value(dice_01) {\n    Ok(checked_value) ->\n      io.debug(\"The value of \" <> int.to_string(checked_value) <> \" is OK.\")\n    Error(DiceValueOutOfRange) ->\n      io.debug(\"The value of the dice is out of range\")\n  }\n\n  // Let's attempt to double the value if the resulting value is still\n  // a number in any of the sides of the dice.\n  // Otherwise, let's put the max value.\n  2\n  |> checked_dice_value\n  |> result.try(double_dice_value)\n  |> result.unwrap(or: 6)\n  |> io.debug\n}\n\npub fn throw_dice_as_result() {\n  Ok(int.random(6) + 1)\n}\n\npub fn sum_dice_values(a: Int, b: Int) {\n  Ok(a + b)\n}\n\n// Betting on first-class functions and pattern-matching\n// can easily lead to tons of indentation\nfn roll_two_dices_without_use() {\n  result.try(throw_dice_as_result(), fn(first_dice) {\n    result.try(throw_dice_as_result(), fn(second_dice) {\n      result.map(sum_dice_values(first_dice, second_dice), fn(sum) { sum })\n    })\n  })\n}\n\n// The use expression still lets us write code that uses callbacks\n// but cleans up excessive indentation:\n// - A call to higher order function go the right side of the <- operator\n// - The argument names for the callback function go on the left hand side of\n//   the <- operator\n// - All the remaining code in the enclosing {} block becomes the body of the\n//   callback function.\nfn roll_two_dices_with_use() {\n  use first_dice <- result.try(throw_dice_as_result())\n  use second_dice <- result.try(throw_dice_as_result())\n  use sum <- result.map(sum_dice_values(first_dice, second_dice))\n  // This is the remaining code in innermost callback function\n  sum\n}\n\nfn more_on_callbacks() {\n  io.debug(roll_two_dices_without_use())\n  io.debug(roll_two_dices_with_use())\n}\n\npub type DateTime\n\n// External functions must annotate a return type\n@external(erlang, \"calendar\", \"local_time\")\npub fn now() -> DateTime\n\nfn showcase_externals() {\n  io.debug(now())\n  // #(#(2024, 4, 6), #(14, 4, 16))\n}\n\nfn showcase_panic() {\n  // We can deliberately abort execution by using the panic keyword\n  // in order to make our program crash immediately\n  case 3 == 2 {\n    True -> panic as \"The equality operator is broken!\"\n    False -> \"Equality operator works for integers\"\n  }\n  // Calling a function that uses the todo keyword also crashes\n  // homework()\n}\n\npub fn homework() {\n  todo\n}\n```\n\n## Further reading\n\n* [Gleam's official website](https://gleam.run/)\n* [Language tour](https://tour.gleam.run/) - Includes live code editor\n* [Official documentation](https://gleam.run/documentation/)\n* [Gleam's awesome list](https://github.com/gleam-lang/awesome-gleam)\n* [Exercism track for Gleam](https://exercism.org/tracks/gleam)\n\nThe official docs have cheatsheets for people familiar with:\n\n* [Elixir](https://gleam.run/cheatsheets/gleam-for-elixir-users)\n* [Elm](https://gleam.run/cheatsheets/gleam-for-elm-users)\n* [Erlang](https://gleam.run/cheatsheets/gleam-for-erlang-users)\n* [PHP](https://gleam.run/cheatsheets/gleam-for-php-users)\n* [Python](https://gleam.run/cheatsheets/gleam-for-python-users)\n* [Rust](https://gleam.run/cheatsheets/gleam-for-python-users)\n"
        },
        {
          "name": "go.md",
          "type": "blob",
          "size": 19.1318359375,
          "content": "---\nname: Go\nfilename: learngo.go\ncontributors:\n    - [\"Sonia Keys\", \"https://github.com/soniakeys\"]\n    - [\"Christopher Bess\", \"https://github.com/cbess\"]\n    - [\"Jesse Johnson\", \"https://github.com/holocronweaver\"]\n    - [\"Quint Guvernator\", \"https://github.com/qguv\"]\n    - [\"Jose Donizetti\", \"https://github.com/josedonizetti\"]\n    - [\"Alexej Friesen\", \"https://github.com/heyalexej\"]\n    - [\"Clayton Walker\", \"https://github.com/cwalk\"]\n    - [\"Leonid Shevtsov\", \"https://github.com/leonid-shevtsov\"]\n    - [\"Michael Graf\", \"https://github.com/maerf0x0\"]\n    - [\"John Arundel\", \"https://github.com/bitfield\"]\n---\n\nGo was created out of the need to get work done. It's not the latest trend\nin programming language theory, but it is a way to solve real-world\nproblems.\n\nIt draws concepts from imperative languages with static typing.\nIt's fast to compile and fast to execute, it adds easy-to-understand\nconcurrency because multi-core CPUs are now common, and it's used successfully\nin large codebases (~100 million loc at Google, Inc.).\n\nGo comes with a good standard library and a sizeable community.\n\n```go\n// Single line comment\n/* Multi-\n line comment */\n\n /* A build tag is a line comment starting with //go:build\n  and can be executed by go build -tags=\"foo bar\" command.\n  Build tags are placed before the package clause near or at the top of the file\n  followed by a blank line or other line comments. */\n//go:build prod || dev || test\n\n// A package clause starts every source file.\n// main is a special name declaring an executable rather than a library.\npackage main\n\n// Import declaration declares library packages referenced in this file.\nimport (\n\t\"fmt\"              // A package in the Go standard library.\n\t\"io\"               // Implements some I/O utility functions.\n\tm \"math\"           // Math library with local alias m.\n\t\"net/http\"         // Yes, a web server!\n\t_ \"net/http/pprof\" // Profiling library imported only for side effects\n\t\"os\"               // OS functions like working with the file system\n\t\"strconv\"          // String conversions.\n)\n\n// A function definition. Main is special. It is the entry point for the\n// executable program. Love it or hate it, Go uses brace brackets.\nfunc main() {\n\t// Println outputs a line to stdout.\n\t// It comes from the package fmt.\n\tfmt.Println(\"Hello world!\")\n\n\t// Call another function within this package.\n\tbeyondHello()\n}\n\n// Functions have parameters in parentheses.\n// If there are no parameters, empty parentheses are still required.\nfunc beyondHello() {\n\tvar x int // Variable declaration. Variables must be declared before use.\n\tx = 3     // Variable assignment.\n\t// \"Short\" declarations use := to infer the type, declare, and assign.\n\ty := 4\n\tsum, prod := learnMultiple(x, y)        // Function returns two values.\n\tfmt.Println(\"sum:\", sum, \"prod:\", prod) // Simple output.\n\tlearnTypes()                            // < y minutes, learn more!\n}\n\n/* <- multiline comment\nFunctions can have parameters and (multiple!) return values.\nHere `x`, `y` are the arguments and `sum`, `prod` is the signature (what's returned).\nNote that `x` and `sum` receive the type `int`.\n*/\nfunc learnMultiple(x, y int) (sum, prod int) {\n\treturn x + y, x * y // Return two values.\n}\n\n// Some built-in types and literals.\nfunc learnTypes() {\n\t// Short declaration usually gives you what you want.\n\tstr := \"Learn Go!\" // string type.\n\n\ts2 := `A \"raw\" string literal\ncan include line breaks.` // Same string type.\n\n\t// Non-ASCII literal. Go source is UTF-8.\n\tg := 'Σ' // rune type, an alias for int32, holds a unicode code point.\n\n\tf := 3.14159 // float64, an IEEE-754 64-bit floating point number.\n\tc := 3 + 4i  // complex128, represented internally with two float64's.\n\n\t// var syntax with initializers.\n\tvar u uint = 7 // Unsigned, but implementation dependent size as with int.\n\tvar pi float32 = 22. / 7\n\n\t// Conversion syntax with a short declaration.\n\tn := byte('\\n') // byte is an alias for uint8.\n\n\t// Arrays have size fixed at compile time.\n\tvar a4 [4]int                    // An array of 4 ints, initialized to all 0.\n\ta5 := [...]int{3, 1, 5, 10, 100} // An array initialized with a fixed size of five\n\t// elements, with values 3, 1, 5, 10, and 100.\n\n\t// Arrays have value semantics.\n\ta4_cpy := a4                    // a4_cpy is a copy of a4, two separate instances.\n\ta4_cpy[0] = 25                  // Only a4_cpy is changed, a4 stays the same.\n\tfmt.Println(a4_cpy[0] == a4[0]) // false\n\n\t// Slices have dynamic size. Arrays and slices each have advantages\n\t// but use cases for slices are much more common.\n\ts3 := []int{4, 5, 9}    // Compare to a5. No ellipsis here.\n\ts4 := make([]int, 4)    // Allocates slice of 4 ints, initialized to all 0.\n\tvar d2 [][]float64      // Declaration only, nothing allocated here.\n\tbs := []byte(\"a slice\") // Type conversion syntax.\n\n\t// Slices (as well as maps and channels) have reference semantics.\n\ts3_cpy := s3                    // Both variables point to the same instance.\n\ts3_cpy[0] = 0                   // Which means both are updated.\n\tfmt.Println(s3_cpy[0] == s3[0]) // true\n\n\t// Because they are dynamic, slices can be appended to on-demand.\n\t// To append elements to a slice, the built-in append() function is used.\n\t// First argument is a slice to which we are appending. Commonly,\n\t// the slice variable is updated in place, as in example below.\n\ts := []int{1, 2, 3}    // Result is a slice of length 3.\n\ts = append(s, 4, 5, 6) // Added 3 elements. Slice now has length of 6.\n\tfmt.Println(s)         // Updated slice is now [1 2 3 4 5 6]\n\n\t// To append another slice, instead of list of atomic elements we can\n\t// pass a reference to a slice or a slice literal like this, with a\n\t// trailing ellipsis, meaning take a slice and unpack its elements,\n\t// appending them to slice s.\n\ts = append(s, []int{7, 8, 9}...) // Second argument is a slice literal.\n\tfmt.Println(s)                   // Updated slice is now [1 2 3 4 5 6 7 8 9]\n\n\tp, q := learnMemory() // Declares p, q to be type pointer to int.\n\tfmt.Println(*p, *q)   // * follows a pointer. This prints two ints.\n\n\t// Maps are a dynamically growable associative array type, like the\n\t// hash or dictionary types of some other languages.\n\tm := map[string]int{\"three\": 3, \"four\": 4}\n\tm[\"one\"] = 1\n\t// Looking up a missing key returns the zero value,\n\t// which is 0 in this case, since it's a map[string]int\n\tm[\"key not present\"] // 0\n\t// Check if a key is present in the map like this:\n\tif val, ok := m[\"one\"]; ok {\n\t\t// Do something\n\t}\n\n\t// Unused variables are an error in Go.\n\t// The underscore lets you \"use\" a variable but discard its value.\n\t_, _, _, _, _, _, _, _, _, _ = str, s2, g, f, u, pi, n, a5, s4, bs\n\t// Usually you use it to ignore one of the return values of a function\n\t// For example, in a quick and dirty script you might ignore the\n\t// error value returned from os.Create, and expect that the file\n\t// will always be created.\n\tfile, _ := os.Create(\"output.txt\")\n\tfmt.Fprint(file, \"This is how you write to a file, by the way\")\n\tfile.Close()\n\n\t// Output of course counts as using a variable.\n\tfmt.Println(s, c, a4, s3, d2, m)\n\n\tlearnFlowControl() // Back in the flow.\n}\n\n// It is possible, unlike in many other languages for functions in go\n// to have named return values.\n// Assigning a name to the type being returned in the function declaration line\n// allows us to easily return from multiple points in a function as well as to\n// only use the return keyword, without anything further.\nfunc learnNamedReturns(x, y int) (z int) {\n\tz = x * y\n\treturn // z is implicit here, because we named it earlier.\n}\n\n// Go is fully garbage collected. It has pointers but no pointer arithmetic.\n// You can make a mistake with a nil pointer, but not by incrementing a pointer.\n// Unlike in C/Cpp taking and returning an address of a local variable is also safe.\nfunc learnMemory() (p, q *int) {\n\t// Named return values p and q have type pointer to int.\n\tp = new(int) // Built-in function new allocates memory.\n\t// The allocated int slice is initialized to 0, p is no longer nil.\n\ts := make([]int, 20) // Allocate 20 ints as a single block of memory.\n\ts[3] = 7             // Assign one of them.\n\tr := -2              // Declare another local variable.\n\treturn &s[3], &r     // & takes the address of an object.\n}\n\n// Use the aliased math library (see imports, above)\nfunc expensiveComputation() float64 {\n\treturn m.Exp(10)\n}\n\nfunc learnFlowControl() {\n\t// If statements require brace brackets, and do not require parentheses.\n\tif true {\n\t\tfmt.Println(\"told ya\")\n\t}\n\t// Formatting is standardized by the command line command \"go fmt\".\n\tif false {\n\t\t// Pout.\n\t} else {\n\t\t// Gloat.\n\t}\n\t// Use switch in preference to chained if statements.\n\tx := 42.0\n\tswitch x {\n\tcase 0:\n\tcase 1, 2: // Can have multiple matches on one case\n\tcase 42:\n\t\t// Cases don't \"fall through\".\n\t\t/*\n\t\t\tThere is a `fallthrough` keyword however, see:\n\t\t\thttps://go.dev/wiki/Switch#fall-through\n\t\t*/\n\tcase 43:\n\t\t// Unreached.\n\tdefault:\n\t\t// Default case is optional.\n\t}\n\n\t// Type switch allows switching on the type of something instead of value\n\tvar data interface{}\n\tdata = \"\"\n\tswitch c := data.(type) {\n\tcase string:\n\t\tfmt.Println(c, \"is a string\")\n\tcase int64:\n\t\tfmt.Printf(\"%d is an int64\\n\", c)\n\tdefault:\n\t\t// all other cases\n\t}\n\n\t// Like if, for doesn't use parens either.\n\t// Variables declared in for and if are local to their scope.\n\tfor x := 0; x < 3; x++ { // ++ is a statement.\n\t\tfmt.Println(\"iteration\", x)\n\t}\n\t// x == 42 here.\n\n\t// For is the only loop statement in Go, but it has alternate forms.\n\tfor { // Infinite loop.\n\t\tbreak    // Just kidding.\n\t\tcontinue // Unreached.\n\t}\n\n\t// You can use range to iterate over an array, a slice, a string, a map, or a channel.\n\t// range returns one (channel) or two values (array, slice, string and map).\n\tfor key, value := range map[string]int{\"one\": 1, \"two\": 2, \"three\": 3} {\n\t\t// for each pair in the map, print key and value\n\t\tfmt.Printf(\"key=%s, value=%d\\n\", key, value)\n\t}\n\t// If you only need the value, use the underscore as the key\n\tfor _, name := range []string{\"Bob\", \"Bill\", \"Joe\"} {\n\t\tfmt.Printf(\"Hello, %s\\n\", name)\n\t}\n\n\t// As with for, := in an if statement means to declare and assign\n\t// y first, then test y > x.\n\tif y := expensiveComputation(); y > x {\n\t\tx = y\n\t}\n\t// Function literals are closures.\n\txBig := func() bool {\n\t\treturn x > 10000 // References x declared above switch statement.\n\t}\n\tx = 99999\n\tfmt.Println(\"xBig:\", xBig()) // true\n\tx = 1.3e3                    // This makes x == 1300\n\tfmt.Println(\"xBig:\", xBig()) // false now.\n\n\t// What's more is function literals may be defined and called inline,\n\t// acting as an argument to function, as long as:\n\t// a) function literal is called immediately (),\n\t// b) result type matches expected type of argument.\n\tfmt.Println(\"Add + double two numbers: \",\n\t\tfunc(a, b int) int {\n\t\t\treturn (a + b) * 2\n\t\t}(10, 2)) // Called with args 10 and 2\n\t// => Add + double two numbers: 24\n\n\t// When you need it, you'll love it.\n\tgoto love\nlove:\n\n\tlearnFunctionFactory() // func returning func is fun(3)(3)\n\tlearnDefer()      // A quick detour to an important keyword.\n\tlearnInterfaces() // Good stuff coming up!\n}\n\nfunc learnFunctionFactory() {\n\t// Next two are equivalent, with second being more practical\n\tfmt.Println(sentenceFactory(\"summer\")(\"A beautiful\", \"day!\"))\n\n\td := sentenceFactory(\"summer\")\n\tfmt.Println(d(\"A beautiful\", \"day!\"))\n\tfmt.Println(d(\"A lazy\", \"afternoon!\"))\n}\n\n// Decorators are common in other languages. Same can be done in Go\n// with function literals that accept arguments.\nfunc sentenceFactory(mystring string) func(before, after string) string {\n\treturn func(before, after string) string {\n\t\treturn fmt.Sprintf(\"%s %s %s\", before, mystring, after) // new string\n\t}\n}\n\nfunc learnDefer() (ok bool) {\n\t// A defer statement pushes a function call onto a list. The list of saved\n\t// calls is executed AFTER the surrounding function returns.\n\tdefer fmt.Println(\"deferred statements execute in reverse (LIFO) order.\")\n\tdefer fmt.Println(\"\\nThis line is being printed first because\")\n\t// Defer is commonly used to close a file, so the function closing the\n\t// file stays near the function opening the file.\n\treturn true\n}\n\n// Define Stringer as an interface type with one method, String.\ntype Stringer interface {\n\tString() string\n}\n\n// Define pair as a struct with two fields, ints named x and y.\ntype pair struct {\n\tx, y int\n}\n\n// Define a method on type pair. Pair now implements Stringer because Pair has defined all the methods in the interface.\nfunc (p pair) String() string { // p is called the \"receiver\"\n\t// Sprintf is another public function in package fmt.\n\t// Dot syntax references fields of p.\n\treturn fmt.Sprintf(\"(%d, %d)\", p.x, p.y)\n}\n\nfunc learnInterfaces() {\n\t// Brace syntax is a \"struct literal\". It evaluates to an initialized\n\t// struct. The := syntax declares and initializes p to this struct.\n\tp := pair{3, 4}\n\tfmt.Println(p.String()) // Call String method of p, of type pair.\n\tvar i Stringer          // Declare i of interface type Stringer.\n\ti = p                   // Valid because pair implements Stringer\n\t// Call String method of i, of type Stringer. Output same as above.\n\tfmt.Println(i.String())\n\n\t// Functions in the fmt package call the String method to ask an object\n\t// for a printable representation of itself.\n\tfmt.Println(p) // Output same as above. Println calls String method.\n\tfmt.Println(i) // Output same as above.\n\n\tlearnVariadicParams(\"great\", \"learning\", \"here!\")\n}\n\n// Functions can have variadic parameters.\nfunc learnVariadicParams(myStrings ...any) { // any is an alias for interface{}\n\t// Iterate each value of the variadic.\n\t// The underscore here is ignoring the index argument of the array.\n\tfor _, param := range myStrings {\n\t\tfmt.Println(\"param:\", param)\n\t}\n\n\t// Pass variadic value as a variadic parameter.\n\tfmt.Println(\"params:\", fmt.Sprintln(myStrings...))\n\n\tlearnErrorHandling()\n}\n\nfunc learnErrorHandling() {\n\t// \", ok\" idiom used to tell if something worked or not.\n\tm := map[int]string{3: \"three\", 4: \"four\"}\n\tif x, ok := m[1]; !ok { // ok will be false because 1 is not in the map.\n\t\tfmt.Println(\"no one there\")\n\t} else {\n\t\tfmt.Print(x) // x would be the value, if it were in the map.\n\t}\n\t// An error value communicates not just \"ok\" but more about the problem.\n\tif _, err := strconv.Atoi(\"non-int\"); err != nil { // _ discards value\n\t\t// prints 'strconv.ParseInt: parsing \"non-int\": invalid syntax'\n\t\tfmt.Println(err)\n\t}\n\t// We'll revisit interfaces a little later. Meanwhile,\n\tlearnConcurrency()\n}\n\n// c is a channel, a concurrency-safe communication object.\nfunc inc(i int, c chan int) {\n\tc <- i + 1 // <- is the \"send\" operator when a channel appears on the left.\n}\n\n// We'll use inc to increment some numbers concurrently.\nfunc learnConcurrency() {\n\t// Same make function used earlier to make a slice. Make allocates and\n\t// initializes slices, maps, and channels.\n\tc := make(chan int)\n\t// Start three concurrent goroutines. Numbers will be incremented\n\t// concurrently, perhaps in parallel if the machine is capable and\n\t// properly configured. All three send to the same channel.\n\tgo inc(0, c) // go is a statement that starts a new goroutine.\n\tgo inc(10, c)\n\tgo inc(-805, c)\n\t// Read three results from the channel and print them out.\n\t// There is no telling in what order the results will arrive!\n\tfmt.Println(<-c, <-c, <-c) // channel on right, <- is \"receive\" operator.\n\n\tcs := make(chan string)       // Another channel, this one handles strings.\n\tccs := make(chan chan string) // A channel of string channels.\n\tgo func() { c <- 84 }()       // Start a new goroutine just to send a value.\n\tgo func() { cs <- \"wordy\" }() // Again, for cs this time.\n\t// Select has syntax like a switch statement but each case involves\n\t// a channel operation. It selects a case at random out of the cases\n\t// that are ready to communicate.\n\tselect {\n\tcase i := <-c: // The value received can be assigned to a variable,\n\t\tfmt.Printf(\"it's a %T\", i)\n\tcase <-cs: // or the value received can be discarded.\n\t\tfmt.Println(\"it's a string\")\n\tcase <-ccs: // Empty channel, not ready for communication.\n\t\tfmt.Println(\"didn't happen.\")\n\t}\n\t// At this point a value was taken from either c or cs. One of the two\n\t// goroutines started above has completed, the other will remain blocked.\n\n\tlearnWebProgramming() // Go does it. You want to do it too.\n}\n\n// A single function from package http starts a web server.\nfunc learnWebProgramming() {\n\t// First parameter of ListenAndServe is TCP address to listen to.\n\t// Second parameter is an interface, specifically http.Handler.\n\tgo func() {\n\t\terr := http.ListenAndServe(\":8080\", pair{})\n\t\tfmt.Println(err) // don't ignore errors\n\t}()\n\n\trequestServer()\n}\n\n// Make pair an http.Handler by implementing its only method, ServeHTTP.\nfunc (p pair) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\t// Serve data with a method of http.ResponseWriter.\n\tw.Write([]byte(\"You learned Go in Y minutes!\"))\n}\n\nfunc requestServer() {\n\tresp, err := http.Get(\"http://localhost:8080\")\n\tfmt.Println(err)\n\tdefer resp.Body.Close()\n\tbody, err := io.ReadAll(resp.Body)\n\tfmt.Printf(\"\\nWebserver said: `%s`\", string(body))\n}\n```\n\n## Further Reading\n\nThe root of all things Go is the [official Go web site](https://go.dev/).\nThere you can follow the [tutorial](https://go.dev/tour/), play interactively, and read lots.\nAside from a tour, [the docs](https://go.dev/doc/) contain information on\nhow to write clean and effective Go code, package and command docs, and release history.\n\nThe [Go language specification](https://go.dev/ref/spec) itself is highly recommended. It's easy to read\nand amazingly short (as language definitions go these days.)\n\nYou can play around with the code on [Go playground](https://go.dev/play/p/Y96bRpJWzjr).\nTry to change it and run it from your browser!\nNote that you can use [https://go.dev/play/](https://go.dev/play/)\nas a [REPL](https://en.wikipedia.org/wiki/Read-eval-print_loop) to test things and code in your browser, without even installing Go.\n\nOn the reading list for students of Go is the [source code to the standard\nlibrary](https://go.dev/src/). Comprehensively documented, it\ndemonstrates the best of readable and understandable Go, Go style, and Go\nidioms. Or you can click on a function name in [the\ndocumentation](https://pkg.go.dev/std) and the source code comes up!\n\nAnother great resource to learn Go is [Go by example](https://gobyexample.com/).\n\nThere are many excellent conference talks and video tutorials on Go available on YouTube, and here are three playlists of the very best, tailored for beginners, intermediate, and advanced Gophers respectively:\n\n- [Golang University 101](https://www.youtube.com/playlist?list=PLEcwzBXTPUE9V1o8mZdC9tNnRZaTgI-1P) introduces fundamental Go concepts and shows you how to use the Go tools to create and manage Go code\n- [Golang University 201](https://www.youtube.com/playlist?list=PLEcwzBXTPUE_5m_JaMXmGEFgduH8EsuTs) steps it up a notch, explaining important techniques like testing, web services, and APIs\n- [Golang University 301](https://www.youtube.com/playlist?list=PLEcwzBXTPUE8KvXRFmmfPEUmKoy9LfmAf) dives into more advanced topics like the Go scheduler, implementation of maps and channels, and optimisation techniques\n\nGo Mobile adds support for mobile platforms (Android and iOS).\nYou can write all-Go native mobile apps or write a library that contains bindings from a Go package,\nwhich can be invoked via Java (Android) and Objective-C (iOS). Check out the [Go Mobile page](https://go.dev/wiki/Mobile) for more information.\n"
        },
        {
          "name": "golfscript.md",
          "type": "blob",
          "size": 29.8642578125,
          "content": "---\nname: GolfScript\nfilename: golfscript.gs\ncontributors:\n    - [\"Nicholas S Georgescu\", \"http://github.com/ngeorgescu\"]\n---\n\nGolfScript is an esoteric language that was developed in 2007 by Darren\nSmith. It is a scripting language with an interpreter written in Ruby. It lets\nyou write very dense code in very few characters. The main goal of the language\nis, as the name suggests, to solve problems in as few keystrokes as possible.\nThe examples page on the GolfScript website even has an entire Sudoku solver\nwritten in just 77 characters.\n\nIf you get really good at GolfScript you can easily find yourself using it as a\ngo-to language for solving some (even somewhat hard) coding problems. It's never\ngoing to be faster than Ruby, but it can be very fast to write, since a single\ncharacter of GolfScript can replace an entire line of code in some other languages.\n\nGolfScript is based on the use of the stack. This tutorial therefore will\nread as a sequence of stack operations on an actual stack, as opposed to some\nstandalone code and individual results. The stack starts as an empty list, and\neverything either adds to the stack, or it pops some items off, transforms them,\nand puts them back onto the stack.\n\nTo get started running GolfScript, you can get the golfscript.rb file from the\n[GitHub repo](https://github.com/darrenks/golfscript).  Copy it into your `$PATH`,\n(dropping the .rb and chmodding as necessary). You can run GolfScript from either\nthe interactive interpreter (which mirrors the tutorial below). Once you get the hang\nof GolfScript, you can start running from \"stdin\". If you see a script starting with `~`,\nit was probably designed to be dropped in a file and run with `golfscript file.gs`.  You\ncan pipe in or enter in your input at runtime.\n\n```\n> anything undefined technically evaluates to nothing and so is also a comment\n# but commenting it out explicitly anyway is probably a good idea because if\n# you use a reserved keyword or any punctuation you'll run into trouble.\n[]\n> ######################################################################\n#       datatypes\n########################################################################\n> 1 # Here we add 1 to the stack.  Any object entry adds things to the stack\n[1]\n> 'abc' # here we are adding a string. The only difference between single and\n# double quotes is that double lets you escape more things other than \\' and \\n\n# it won't matter for the sake of this tutorial.\n[1 \"abc\"]\n> {+} # the third type of object you can put on the stack is a block\n[1 \"abc\" {+}]\n> ] # this takes everything prior and puts it into an array, the fourth type\n# of object. (besides bug exploits like [2-1?] those are the only four types)\n[[1 \"abc\" {+}]]\n> ; # let's clear the stack by executing the discard function on this array.\n# if you type the characters  ]; it always clears the stack.\n[]\n> 1\"abc\"{+}]; # newlines are whitespaces. Everything we did up to this point\n# can be put into one line and it all works the exact same.\n########################################################################\n#       operators and math\n########################################################################\n[]\n> 1 1 # we add two 1s to the stack.  We could also duplicate the first with .\n[1 1]\n> + # math is done by executing an operation on the top of the stack. This\n# can be a standalone character. The way to read this is that we put a 1 on\n# the stack, another one one the stack, and then executed a + operation which\n# takes the top two elements off of the stack, sums them up, and returns them\n# to the stack.  This is typically referred to as postfix notation.  It can be\n# a bit jarring, but this is the way to think about things.  You're adding to\n# the stack with objects and modifying the top of the stack with operators.\n[2]\n> 8 1- # minus works the same way. N.B. that we still have that 2 on the stack\n# from earlier\n[2 7]\n> 10 2* # multiplication works the same way. The product is added to the stack\n[2 7 20]\n> 35 4/ # all division is integer division\n[2 7 20 8]\n> 35 4%  # modulo operation\n[2 7 20 8 3]\n> 2 3? # exponentiation\n[2 7 20 8 3 8]\n> 8~ # bitwise \"not\" function on signed integers\n[2 7 20 8 3 8 -9]\n> -1~ # this yields 0, which is useful to know for the ? operator\n[2 7 20 8 3 8 -9 0]\n> 5 3| # or: yields 7, since [1 0 1] | [0 1 1] => [1 1 1]\n[2 7 20 8 3 8 -9 0 7]\n> 5 3^ # xor: yields 6, since the parity differs at [1 1 0]\n[2 7 20 8 3 8 -9 0 7 6]\n> 5 3& # and: yields 1, since it's the only bit active in both: [0 0 1]\n[2 7 20 8 3 8 -9 0 7 6 1]\n> ]; ###################################################################\n#       booleans\n########################################################################\n[]\n> 5 3\n[5 3]\n> < #add two numbers to the stack, and then perform a lessthan operation\n# booleans are False if 0, [], {}, '', and true if anything else.\n[0]\n> 5 3> # greater than operation.\n[0 1]\n> 5 3= #single equal is the operator. Again, before the equals is executed,\n# the stack reads [0 1 5 3], and then the equals operator checks the top 2\n# values and yields:\n[0 1 0]\n> ! #not, returns 1 if 0 else 0.\n[0 1 1]\n> ) #increments the last number\n[0 1 2]\n> ( #decrements the last number\n[0 1 1]\n> ]; ###################################################################\n#       stack control\n########################################################################\n[]\n> 1 # put a number on the stack\n[1]\n> . # duplicate the number\n[1 1]\n> ) # increment\n[1 2]\n> \\ # flip the top two items\n[2 1]\n> 1$ # $ copies the nth-to-last item on the stack at the index preceding.\n# Here we get the 1-indexed item.\n[2 1 2]\n> 0$ # to copy the 0-indexed item we use the appropriate index.\n# This is identical to . operation\n[2 1 2 2]\n> ) # increment\n[2 1 2 3]\n> @ # pulls the third item up to the top\n[2 2 3 1]\n> [@] # use this trick to flip the top 3 items and put them into an array\n# if you wrap any operation in brackets it flips the results into an array.\n# even math operations like, [+] and [-]\n[2 [3 1 2]]\n> ]; # also, using at most two strokes you can orient the top three items\n# in any permutation. Below are shown the results on 3,~\n  #      => 0 1 2    (i.e. doing nothing)\n  #   \\  => 0 2 1\n  #   @\\ => 1 0 2\n  #   @  => 1 2 0\n  #   @@ => 2 0 1\n  #   \\@ => 2 1 0\n[]\n> ######################################################################\n#       using arrays\n########################################################################\n[]\n> 2, # comma is the range() function\n[[0 1]]\n> , # and also the length() function\n[2]\n> ;4, # let's get an array of four items together\n[[0 1 2 3]]\n> ) # we can pop off the last value\n[[0 1 2] 3]\n> + # and put it back\n[[0 1 2 3]]\n> ( # we can pop off the first value\n[[1 2 3] 0]\n> \\+ # and put it back\n[[0 1 2 3]]\n> 2- # we can subtract a particular value\n[[0 1 3]]\n> [1 3] # or a list of values\n[[0 1 3] [1 3]]\n> -\n[[0]]\n> ! # boolean operations also work on lists, strings, and blocks. If it's\n# empty it's a 1, otherwise 0. Here, the list has a zero, but it's not zero-\n# length, so the array as a whole is still True... and hence \"not\" is False\n[0]\n> ;4,(+ # let's make a range, pop the first value, and tack it on the end\n[[1 2 3 0]]\n> $ # we can also restore order by sorting the array\n[[0 1 2 3]]\n> 1 >  # we can also use < > and = to get the indeces that match. Note this\n# is not a filter! This is an index match. Filtering items greater than one\n# is done with {1>},\n[[1 2 3]]\n> 2 < # remember it's zero-indexed, so everything in this array is at an index\n# less than 2, the indeces are 0 and 1.\n[[1 2]]\n> 1= # < and > return an array, even if it's one item.  Equals always drops\n# it out of the array\n[2]\n> ;6,2% # the modulo operator works on lists as the step.\n[[0 2 4]]\n> ;4,2,-:a 3,2+:b # booleans also work on lists. lets define two lists\n[[2 3] [0 1 2 2]]\n> | # \"or\" - returns set of items that appear in either list i.e. \"union set\"\n[[2 3 0 1]]\n> ;a b& # returns set of items that appear in 1 AND 2, e.g. \"intersection set\"\n[[2]]\n> ;a b^ # returns the symmetric difference set between two lists,\n[[3 0 1]]\n> ~ # tilde unpacks the items from a list\n[3 0 1]\n> ]; a\n[2 3]\n> 2? # finds the index of an item\n[0]\n> ;3a?\n[1]\n> 4a? # returns -1 if the item doesn't exist. Note: Order of element and array\n# doesn't matter for searching. it can be [item list?] or [list item?].\n[1 -1]\n> ]; # clear\n[]\n> 3,[4]* # join or intersperse: puts items in between the items\n[[0 4 1 4 2]]\n> ; 3,4* # multiplication of lists\n[[0 1 2 0 1 2 0 1 2 0 1 2]]\n> ;[1 2 3 2 3 5][2 3]/ # \"split at\"\n[[[1] [] [5]]]\n> ;[1 2 3 2 3 5][2 3]% # modulo is \"split at... and drop empty\"\n[[[1] [5]]]\n> ];####################################################################\n#       strings\n########################################################################\n# strings work just like arrays\n[]\n> \"use arch, am vegan, drive a stick\" ', '/ # split\n[[\"use arch\" \"am vegan\" \"drive a stick\"]]\n> {'I '\\+', BTW.'+}% # map\n[[\"I use arch, BTW.\" \"I am vegan, BTW.\" \"I drive a stick, BTW.\"]]\n> n* # join.  Note the variable n is defined as a newline char by default\n[\"I use arch, BTW.\\nI am vegan, BTW.\\nI drive a stick, BTW.\"]\n> n/ # to replace, use split, and join with the replacement string.\n[n \"Also, not sure if I mentioned this, but\" n]{+}* # fold sum 3-item array\n* # and use join to get the result\nn+ print # and then pop/print the results prettily\nI use arch, BTW.\nAlso, not sure if I mentioned this, but\nI am vegan, BTW.\nAlso, not sure if I mentioned this, but\nI drive a stick, BTW.\n[]\n> '22222'{+}* # note that if you fold-sum a string not in an array, you'll\n# get the sum of the ascii values. '2' is 50, so five times that is:\n[250]\n> ]; # this actually is a clever trick to get ascii values into an array.\n[]\n> \"aabc\" [{\"\"+~}*] # if you fold over addition and drop it into a string: \n[[97 97 98 99]]\n> {[.]\"\"^}%\"\"+ # which can be returned to a string as such using a \"\"^ map.\n# and an empty string join.\n[\"aabc\"]\n> {32-}% # note that most mapping operations work on the ascii values as\n# you would expect, for instance with the difference between A and a being\n# 32, you can just subtract that from the ascii value to get:\n[\"AABC\"] \n> ]; ###################################################################\n#       blocks\n########################################################################\n[]\n> 3,~ # start with an unpacked array\n[0 1 2]\n> {+-} # brackets define a block which can comprise multiple functions\n[0 1 2 {+-}]\n> ~ # blocks are functions waiting for execution. tilde does a single\n# execution of the block in this case, we added the top two values, 1 and 2,\n# and subtracted from 0\n[-3]\n> ;10,~{+}5* # multiplication works on executing blocks multiple times\n# in this case we added the last 6 values together by running \"add\" 5 times\n[0 1 2 3 39]\n> ];10,4> # we can achieve the same result by just grabbing the last 6 items\n[[4 5 6 7 8 9]]\n> {+}* # and using the \"fold\" function for addition.\n[39]\n> # \"fold\" sequentially applies the operation pairwise from the left\n# and then dumps the results.  Watch what happens when we use the duplicate\n# operator to fold. it's clear what happens when we duplicate and then negate\n# the duplicated item:\n> ;4,{.-1*}*\n[0 1 -1 2 -2 3 -3]\n> ]{3%}, # we can filter a list based on applying the block to each element\n# in this case we get the numbers that do NOT give 0 mod 3\n[[1 -1 2 -2]]\n> ;10,{3%0}, # note that only the last element matters for retaining in the\n# array.  Here we take 0..9, calculate x mod 3, and then return a 0. The\n# intermediate generated values are dumped out sequentially.\n[0 1 2 0 1 2 0 1 2 0 []]\n> ]; # clear\n[]\n> 5,{5*}% # map performs each operation on the array and returns the result\n# to an array\n[[0 5 10 15 20]]\n> {.}% # watch what happens when you map duplicate on each item\n[[0 0 5 5 10 10 15 15 20 20]]\n> ]; ###################################################################\n#       Control Flow!\n########################################################################\n# This is the most important part of scripting. Most languages have\n# two main types of loops, for loops and while loops. Even though golfscript\n# has many possible loops, only a few are generally useful and terse. For loops\n# are implemented using mapping, filtering, folding, and sorting over lists.\n# For instance, we can take the factorial of 6 by:\n6, # get 0..5\n{)}% # increment the list, i.e. \"i++ for i in list\" to get 1..6\n{*}* # fold by multiplication , 9 characters for the operator itself.\n[720]\n> 6),(;{*}* # but can we get shorter? We can save some space by incrementing\n# the 6, dropping the zero, and folding. 8 characters.\n> # we can also use fold to do the same thing with unfold\n1 6        # accumlator and multiplicand, we'll call A and M\n{}{        # while M\n  .        # copy M, so now the stack is A M M\n    @      # bring A to the top, so now M M A\n     *     # apply M to the accumulator, so M A\n       \\(  # flip the order, so it's A M, and M--\n}/;        # \"end\", drop the list of multiplicands\n# this is effectively a while-loop factorial\n[720 720]\n> 1.{6>!}{.@*\\)}/; # we can also do the same thing with M++ while M not > 6\n> 1 6{.@*\\(.}do; # works the same way as the decrementing fold.\n[720 720 720]\n> ]; #obviously a for loop is ideal for factorials, since it naturally lends\n# itself to running over a finite set of items.\n########################################################################\n#       Writing code\n########################################################################\n# Let's go through the process for writing a script. There are some tricks and\n# ways to think about things. Let's take a simple example: a prime sieve.\n# There are a few strategies for sieving. First, there's a strategy that\n# uses two lists, candidates and primes. We pop a value from candidates,\n# remove all the candidates divisible by it, and then add it to the primes.\n# Second, there's just a filtering operation on numbers. I think it's\n# probably shorter to write a program that just checks if a number has no\n# numbers mod zero besides 0, 1, and itself. Slower, but shorter is king.\n# Let's try this second strategy first.\n[]\n> 10 # we're probably going to filter a list using this strategy. It's easiest\n# to start working with one element of the list. So let's take some example\n# where we know the answer that we want to get.\n[10]\n> .,2> # let's duplicate it and take a list of values, and drop the first two\n[10 [2 3 4 5 6 7 8 9]]\n> {1$\\%!}, # duplicate the ten, and scoot it behind the element, and then run\n# 10 element %, and then ! the answer, so we are left with even multiples\n[10 [2 5]]\n> \\; # we want to get rid of the intermediate so it doesn't show up in our\n# solution.\n[[2 5]]\n> 10.,2,-{1$\\%!},\\; # Okay, let's put our little function together on one line\n[[2 5] [2 5]]\n> ;; # now we just filter the list using this strategy. We need to negate the\n# result with ! so when we get a number with a factor, ! evaluates to 0, and\n# the number is filtered out.\n[]\n> 10,{.,2,-{1$\\%!},\\;!}, # let's try filtering on the first 10 numbers\n[[0 1 2 3 5 7]]\n> 2> # now we can just drop 0 and 1.\n[[2 3 5 7]]\n> 4.?,{.,2,-{1$\\%!},\\;!},2> # trick: an easy way to generate large numbers in\n# a few bytes is duplicate and exponentiate. 4.? is 256, and 9.? is 387420489\n[[2 3 5 7] [2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89\n97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193\n197 199 211 223 227 229 233 239 241 251]]\n> ];'4.?,{.,2,-{1$\\%!},\\;!},2>', # how long is our code for p<256 ?\n[25]\n> ; # this is 25 characters. Can we do better?!\n[]\n> []99,2> # let's go with the first strategy.  We'll start with an empty list\n# of primes and a list of candidates\n[[] [2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\n29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54\n55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80\n81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98]]\n> (\\ # pop left and leave left, we're going to copy this value with the filter\n[[] 2 [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\n29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54\n55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80\n81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98]]\n> {1$%}, # filter out anything that is 0 mod by the popped item one back on the\n# stack\n[[] 2 [3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51\n53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97]]\n> @@+ # great, all the 2-divisible values are off the list! now we need to add\n# it to the running list of primes\n[[3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55\n57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97] [2]]\n> \\ # swap back. Now it seems pretty clear when our candidates list is empty\n# we're done. So let's try it with a do loop. Remember we need to duplicate\n# the final value for the pop check. So we add a dot\n[[2] [3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53\n55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97]]\n> {(\\{1$%},@@+\\.}do;\n[[2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97]]\n> ; # ok that worked. So let's start with our initialization as well.\n[]4.?,2>{(\\{1$%},@@+\\.}do; # and let's check our work\n[[2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101\n103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199\n211 223 227 229 233 239 241 251]]\n> ,'[]99,2>{(\\{1$%},@@+\\.}do;', # how long is this?\n[26]\n> ]; # wow this solution is only 26 long, and much more effective. I don't see\n# a way to get any smaller here. I wonder if with unfold we can do better?  The\n# strategy here is to use unfold and then at the end grab the first value from\n# each table.\n[]\n> 99,2> # start with the candidates list\n[[2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\n30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\n56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81\n82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98]]\n> (\\{1$%}, # pop left and filter\n[2 [3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53\n55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97]]\n> (\\{1$%}, # again\n[2 3 [5 7 11 13 17 19 23 25 29 31 35 37 41 43 47 49 53 55 59 61 65 67 71 73 77\n79 83 85 89 91 95 97]]\n89 91 95 97]]\n> {}{(\\{1$%},}/ # ok I think it'll work. let's try to put it into an unfold.\n[2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 [[5 7\n11 13 17 19 23 25 29 31 35 37 41 43 47 49 53 55 59 61 65 67 71 73 77 79 83 85\n89 91 95 97] [7 11 13 17 19 23 29 31 37 41 43 47 49 53 59 61 67 71 73 77 79 83\n89 91 97] [11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97] [13\n17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97] [17 19 23 29 31 37 41\n43 47 53 59 61 67 71 73 79 83 89 97] [19 23 29 31 37 41 43 47 53 59 61 67 71 73\n79 83 89 97] [23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97] [29 31 37 41\n43 47 53 59 61 67 71 73 79 83 89 97] [31 37 41 43 47 53 59 61 67 71 73 79 83 89\n97] [37 41 43 47 53 59 61 67 71 73 79 83 89 97] [41 43 47 53 59 61 67 71 73 79\n83 89 97] [43 47 53 59 61 67 71 73 79 83 89 97] [47 53 59 61 67 71 73 79 83 89\n97] [53 59 61 67 71 73 79 83 89 97] [59 61 67 71 73 79 83 89 97] [61 67 71 73\n79 83 89 97] [67 71 73 79 83 89 97] [71 73 79 83 89 97] [73 79 83 89 97] [79 83\n89 97] [83 89 97] [89 97] [97]]]\n> ;] # drop that list of candidates generated at each step and put the items\n# left behind by the unfold at each step (which is the primes) into a list\n[[2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97]]\n> ]; # clear and let's try with larger numbers\n[]\n> 4.?,2>{}{(\\{1$%},}/;]\n[[2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101\n103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199\n211 223 227 229 233 239 241 251]]\n>;'4.?,2>{}{(\\{1$%},}/;]', # find the length of our solution.\n[21]\n> ]; # only 21 characters for the primes! Let's see if we actually can use this\n# strategy of leaving items behind, now using the do loop to get even shorter!\n> 3.?,2> # candidates\n[[2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26]]\n> (\\{1$%}, # pop and filter\n[2 [3 5 7 9 11 13 15 17 19 21 23 25]]\n> (\\{1$%}, # again!\n[2 3 [5 7 11 13 17 19 23 25]]\n> {(\\{1$%},.}do;] # try in a do loop and drop the empty list of candidates at\n# the end of the do loop.  Don't forget the dot before the closing brace!\n[[2 3 5 7 11 13 17 19 23]]\n> ;4.?,2>{(\\{1$%},.}do;] # check our work\n[[2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101\n103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199\n211 223 227 229 233 239 241 251]]\n> ;'4.?,2>{(\\{1$%},.}do;]',\n[21]\n>]; # Still 21 characters. there's one other thing to try, which is the prime\n# test known as Wilson's theorem. We can try filtering the items down using\n# this test.\n[]\n> '4.?,2>{.,(;{*}*.*\\%},'.~\\, # let's run it and take the length\n[[2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101\n103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199\n211 223 227 229 233 239 241 251] 21]\n> ; # Still 21 characters! I think this number is quite good and it's not\n# obvious how to beat it. The problem with GolfScript is there's always someone\n# out there who thinks of some trick you didn't. For instance, you might think\n# you're doing well with a Collatz seq generator of {(}{.2%{3*)}{2/}if}/ until\n# you find that someone figured out {(}{3*).2%6\\?/}/ which is so much shorter\n# and cleaner - the unfold operation is nearly half the length!\n########################################################################\n#       How to read GolfScript\n########################################################################\n# let's take the gcd from the GolfScript banner. It starts with:\n[]\n> '2706 410'~ # so that's pretty straightforward, that it just evals the list\n# and dumps the results on the stack. It's common to read from stdin which\n# necessitates unpacking with ~\n[2706 410]\n> . # we want to know what that do loop does. the best way to do that is to\n# drop the braces and run the loop one command at a time. We duplicate\n[2706 410 410]\n> @\\ # We rearrange\n[410 2706 410]\n> % # we take the modulo\n[410 246]\n> .@\\% # repeat. Note we don't need to run the final dot before the closing\n# brace since this is just a value that is popped to check the loop condition\n# you can also replicate the loop end with a semicolon to pop it yourself.\n[246 164]\n> .@\\% # again!\n[164 82]\n> .@\\% # and finally we hit zero. The loop would exit and ; would pop the zero,\n# leaving you with the gcd of 82.\n[82 0]\n> ;; 2706 410{1$1$%.}do # Clearly this involves knowing about Euclid's method.\n# you can also try a more obvious method like this one here which shows the\n# numbers in sequence.\n[2706 410 246 164 82 0]\n>]; # so sometimes it pays dividends to know the math and you can write short\n# algorithms that rely on easy tricks that aren't immediately obvious.\n[]\n> # let's try looking at the sudoku solver that is on the examples page. I'll\n# skip the unpack step.\n[2 8 4 3 7 5 1 6 9 0 0 9 2 0 0 0 0 7 0 0 1 0 0 4 0 0 2 0 5 0 0 0 0 8 0 0 0 0 8\n0 0 0 9 0 0 0 0 6 0 0 0 0 4 0 9 0 0 1 0 0 5 0 0 8 0 0 0 0 7 6 0 4 4 2 5 6 8 9 7\n3 1]:a 0?:b # again the grid is put into an array. Now, the next step\n# is to define the \"@\" symbol as the working grid. This is because \"@9\" is\n# interpreted as two symbols, whereas if you used something like \"a\" as the\n# variable \"a9\" is interpreted as a single symbol, and this is not defined,\n# so it will not get run at execution time. You would need a space which is an\n# additional char. On the other hand, redefining built-ins is confusing so I\n# will use \"a\" and \"b\" for the \"@\" and \"^\" definitions respectively. So the\n# grid is \"a\" and the zero-index location of the first zero is \"b\", at index 9.\n[9]\n> ~! # this makes sure that the value is not -1 for find, i.e. -1~ evaluates to\n# 0 so a ! makes it nonzero.  ?~! is a great trick for \"isn't in the list\"\n[0]\n> {@p}* # this prints out the grid the number of times as the previous value,\n# which is how this thing \"finishes\". So if 0 isn't in the grid, it prints.\n> 10, # let's get the digits 0-9. Zero will be eliminated because our original\n# value is zero so when we look in any row or column, zero is guaranteed to be\n# there.\n[[0 1 2 3 4 5 6 7 8 9]]\n> a 9/  # split the original grid row-wise\nb 9/    # get the row of our checked value, in this case the second row\n=       # and we get that row and\n-       # take those numbers off the candidates\n[[1 3 4 5 6 8]]\n> a     # put the grid on the stack\nb 9%    # get the column of the zero\n>       # drop the first x values of the grid\n9%      # take every ninth digit. We now have the column the zero is in\n> -     # pull those items off the candidates list\n[[1 3 5 6]]\n> a 3/  # split the grid into three-long arrays\nb 9%    # get the column of the zero\n3/      # is the column in the left (0), middle (1), or right (2) triad?\n >      # pull that many three-groups off\n3%      # get every third. Now we have 9 groups - the left side of the grid\n3/      # divide those 9 groups it into thirds\nb 27/   # was the zero on top (0), middle (1), or bottom (2) third of the grid?\n=       # since it's the top, grab the top group of triads. You now have the\n        # 1/9th of The sudoku grid where the zero sits\n[[1 3 5 6] [[2 8 4] [0 0 9] [0 0 1]]]\n> {+}*- # flatten those lists and remove those items from the candidates\n# We now have the possible values for the position in question that work given\n# the current state of the grid! if this list is empty then we've hit a\n# contradiction given our previous values.\n[[3 5 6]]\n> 0= # {a b<\\+a 1 b+>+}/ # now we've hit this unfold operation. If you run it\n# you'll find we get the grids back. How does that work?! Let's take the first\n# value in the \"each\" []{}/ operation. This is the best way to figure out what\n# is happening in a mapping situation.\n[3]\n> a     # get the grid\nb<      # get the grid up to the zero\n\\+      # and tack on our value of 3.\n[[2 8 4 3 7 5 1 6 9 3]]\n> a 1b+>+ # and we add on the rest of the grid. Note: we could do 1 char better\n# because 1b+ is equivalent to but, longer than, just b)\n[[2 8 4 3 7 5 1 6 9 3 0 9 2 0 0 0 0 7 0 0 1 0 0 4 0 0 2 0 5 0 0 0 0 8 0 0 0 0 8\n0 0 0 9 0 0 0 0 6 0 0 0 0 4 0 9 0 0 1 0 0 5 0 0 8 0 0 0 0 7 6 0 4 4 2 5 6 8 9 7\n3 1]]\n> 1;; # and the do block runs again no matter what. So it's now clear why this\n# thing exists with an error: if you solve the last digit, then this loop just\n# keeps on rolling! You could add some bytes for some control flow but if it\n# works it works and short is king.\n[]\n\n# Closing Tips for getting to the next level:\n# 0. using lookback might be more effective than swapping around the values.\n#    for instance, 1$1$ and \\.@.@.\\ do the same thing: duplicate last two items\n#    but the former is more obvious and shorter.\n# 1. golfscript can be fun to use for messing around with integer sequences or\n#    do other cool math. So, don't be afraid to define your own functions to\n#    make your life easier, like\n> {$0=}:min; {$-1=}:max; {.,(;{*}*.*\\%}:isprime; {.|}:set; # etc.\n# 2. write pseudocode in another language or port a script over to figure out\n#    what's going on. Especially useful when you combine this strategy with\n#    algebra engines. For instance, you can port the examples-page 1000 digits\n#    of pi to python and get:\n#        import sympy as sp\n#        a, k = sp.var('a'), list(range(20))[1::2]\n#        for _ in range(len(k)-1):\n#            m = k.pop()\n#            l = k.pop()\n#            k.append(((l+1)//2*m)//(l+2)+2*a)\n#        print(str(k[0]))\n#    which gives \"2*a + floor(2*a/3 + floor(4*a/5 + 2*floor(6*a/7 + 3*floor(\n#    8*a/9 + 4*floor(10*a/11 + 5*floor(12*a/13 + 6*floor(14*a/15 + 7*floor(16*\n#    a/17 + 72/17)/15)/13)/11)/9)/7)/5)/3)\"... which makes it much more obvious\n#    what's going on than 10.3??:a;20,-2%{2+.2/@*\\/a 2*+}* especially when\n#    you're new to the language\n# 3. a little math goes a long way. The above prime test uses Wilson's theorem\n#    a comparable program testing for factors {:i,(;{i\\%!},(;!}:isprime is\n#    longer and slower. Also, as discussed above, Collatz is much shorter if\n#    you recognize that you can do (3x+1) and then divide by 6 to the power\n#    ((3x+1) mod 2).  (If x was even, (3x+1) is now odd, so 3x+1 div 6 is x/2.)\n#    avoiding conditionals and redundancy can sometimes require such insight.\n#    And of course, unless you know this continued fraction of pi it's hard to\n#    calculate it in a terse block of code.\n# 4. don't be afraid to define variables and use arrays! particularly if you\n#    have 4 or more items to shuffle.\n# 5. don't be afraid to use [some_long_script] to pack a bunch of items in an\n#    array after the fact, rather than gathering or adding them later or\n#    forcing yourself to use a datastructure that keeps the items in an array\n# 6. sometimes you might get in a jam with - followed by an int that can be\n#    solved with ^ to do a symmetric set difference without adding a space\n# 7. \"#{require 'net/http';Net::HTTP.get_response(URI.parse(address)).body}\"\n#    can get any page source from the internet, substituting 'address' for your\n#    URL. Try it with an OEIS b-file or wordlists, etc. You can also use the\n#    shorter \"#{File.open('filename.txt').read}\" to read in a file. GolfScript\n#    can run \"#{any_ruby_code_here}\" and add the results to the stack.\n# 8. you can set anything to mean anything, which can be useful for golf:\n#       3:^;^2?  => 9 because this set ^ to 3, and 3 2 ? => 9\n#       3:a;a2?  => Warning: pop on empty stack - because a2 doesn't exist\n#       3:a;a 2? => 9 - it works again, but takes an extra character over ^2\n#    usually you will only want to do this once you're trying to squeeze the\n#    last few chars out of your code because it ruins your environment.\n```\n\n* [Run GolfScript online](https://tio.run/#golfscript)\n* [GolfScript's documentation](http://www.golfscript.com/golfscript/builtin.html)\n* [Useful StackExchange thread](https://codegolf.stackexchange.com/questions/5264/tips-for-golfing-in-golfscript)\n* [GolfScript on GitHub](https://github.com/darrenks/golfscript)\n"
        },
        {
          "name": "groovy.md",
          "type": "blob",
          "size": 9.318359375,
          "content": "---\nname: Groovy\ncontributors:\n    - [\"Roberto Pérez Alcolea\", \"http://github.com/rpalcolea\"]\nfilename: learngroovy.groovy\n---\n\n[Groovy](http://www.groovy-lang.org/) is a dynamic language for the Java platform\n\n```groovy\n/*\n  Set yourself up:\n\n  1) Install SDKMAN - http://sdkman.io/\n  2) Install Groovy: sdk install groovy\n  3) Start the groovy console by typing: groovyConsole\n\n*/\n\n//  Single line comments start with two forward slashes\n/*\nMulti line comments look like this.\n*/\n\n// Hello World\nprintln \"Hello world!\"\n\n/*\n  Variables:\n\n  You can assign values to variables for later use\n*/\n\ndef x = 1\nprintln x\n\nx = new java.util.Date()\nprintln x\n\nx = -3.1499392\nprintln x\n\nx = false\nprintln x\n\nx = \"Groovy!\"\nprintln x\n\n/*\n  Collections and maps\n*/\n\n//Creating an empty list\ndef technologies = []\n\n// or create a list with data\ntechnologies = [\"Kotlin\", \"Swift\"]\n\n/*** Adding a elements to the list ***/\n\n// As with Java\ntechnologies.add(\"Grails\")\n\n// Left shift adds, and returns the list\ntechnologies << \"Groovy\"\n\n// Add multiple elements\ntechnologies.addAll([\"Gradle\",\"Griffon\"])\n\n/*** Removing elements from the list ***/\n\n// As with Java\ntechnologies.remove(\"Griffon\")\n\n// Subtraction works also\ntechnologies = technologies - 'Grails'\n\n/*** Iterating Lists ***/\n\n// Iterate over elements of a list\ntechnologies.each { println \"Technology: $it\"}\ntechnologies.eachWithIndex { it, i -> println \"$i: $it\"}\n\n/*** Checking List contents ***/\n\n//Evaluate if a list contains element(s) (boolean)\ncontained = technologies.contains( 'Groovy' )\n\n// Or\ncontained = 'Groovy' in technologies\n\n// Check for multiple contents\ntechnologies.containsAll(['Groovy','Grails'])\n\n/*** Sorting Lists ***/\n\n// Sort a list (mutates original list)\ntechnologies.sort()\n\n// To sort without mutating original, you can do:\nsortedTechnologies = technologies.sort( false )\n\n/*** Manipulating Lists ***/\n\n//Replace all elements in the list\nCollections.replaceAll(technologies, 'Gradle', 'gradle')\n\n//Shuffle a list\nCollections.shuffle(technologies, new Random())\n\n//Clear a list\ntechnologies.clear()\n\n//Creating an empty map\ndef devMap = [:]\n\n//Add values\ndevMap = ['name':'Roberto', 'framework':'Grails', 'language':'Groovy']\ndevMap.put('lastName','Perez')\n\n//Iterate over elements of a map\ndevMap.each { println \"$it.key: $it.value\" }\ndevMap.eachWithIndex { it, i -> println \"$i: $it\"}\n\n//Evaluate if a map contains a key\nassert devMap.containsKey('name')\n\n//Evaluate if a map contains a value\nassert devMap.containsValue('Roberto')\n\n//Get the keys of a map\nprintln devMap.keySet()\n\n//Get the values of a map\nprintln devMap.values()\n\n/*\n  Groovy Beans\n\n  GroovyBeans are JavaBeans but using a much simpler syntax\n\n  When Groovy is compiled to bytecode, the following rules are used.\n\n    * If the name is declared with an access modifier (public, private or\n      protected) then a field is generated.\n\n    * A name declared with no access modifier generates a private field with\n      public getter and setter (i.e. a property).\n\n    * If a property is declared final the private field is created final and no\n      setter is generated.\n\n    * You can declare a property and also declare your own getter or setter.\n\n    * You can declare a property and a field of the same name, the property will\n      use that field then.\n\n    * If you want a private or protected property you have to provide your own\n      getter and setter which must be declared private or protected.\n\n    * If you access a property from within the class the property is defined in\n      at compile time with implicit or explicit this (for example this.foo, or\n      simply foo), Groovy will access the field directly instead of going though\n      the getter and setter.\n\n    * If you access a property that does not exist using the explicit or\n      implicit foo, then Groovy will access the property through the meta class,\n      which may fail at runtime.\n\n*/\n\nclass Foo {\n    // read only property\n    final String name = \"Roberto\"\n\n    // read only property with public getter and protected setter\n    String language\n    protected void setLanguage(String language) { this.language = language }\n\n    // dynamically typed property\n    def lastName\n}\n\n/*\n  Methods with optional parameters\n*/\n\n// A method can have default values for parameters\ndef say(msg = 'Hello', name = 'world') {\n    \"$msg $name!\"\n}\n\n// It can be called in 3 different ways\nassert 'Hello world!' == say()\n// Right most parameter with default value is eliminated first.\nassert 'Hi world!' == say('Hi')\nassert 'learn groovy!' == say('learn', 'groovy')\n\n/*\n  Logical Branching and Looping\n*/\n\n//Groovy supports the usual if - else syntax\ndef x = 3\n\nif(x==1) {\n    println \"One\"\n} else if(x==2) {\n    println \"Two\"\n} else {\n    println \"X greater than Two\"\n}\n\n//Groovy also supports the ternary operator:\ndef y = 10\ndef x = (y > 1) ? \"worked\" : \"failed\"\nassert x == \"worked\"\n\n//Groovy supports 'The Elvis Operator' too!\n//Instead of using the ternary operator:\n\ndisplayName = user.name ? user.name : 'Anonymous'\n\n//We can write it:\ndisplayName = user.name ?: 'Anonymous'\n\n//For loop\n//Iterate over a range\ndef x = 0\nfor (i in 0 .. 30) {\n    x += i\n}\n\n//Iterate over a list\nx = 0\nfor( i in [5,3,2,1] ) {\n    x += i\n}\n\n//Iterate over an array\narray = (0..20).toArray()\nx = 0\nfor (i in array) {\n    x += i\n}\n\n//Iterate over a map\ndef map = ['name':'Roberto', 'framework':'Grails', 'language':'Groovy']\nx = \"\"\nfor ( e in map ) {\n    x += e.value\n    x += \" \"\n}\nassert x.equals(\"Roberto Grails Groovy \")\n\n/*\n  Operators\n\n  Operator Overloading for a list of the common operators that Groovy supports:\n  http://www.groovy-lang.org/operators.html#Operator-Overloading\n\n  Helpful groovy operators\n*/\n//Spread operator:  invoke an action on all items of an aggregate object.\ndef technologies = ['Groovy','Grails','Gradle']\ntechnologies*.toUpperCase() // = to technologies.collect { it?.toUpperCase() }\n\n//Safe navigation operator: used to avoid a NullPointerException.\ndef user = User.get(1)\ndef username = user?.username\n\n\n/*\n  Closures\n  A Groovy Closure is like a \"code block\" or a method pointer. It is a piece of\n  code that is defined and then executed at a later point.\n\n  More info at: http://www.groovy-lang.org/closures.html\n*/\n//Example:\ndef clos = { println \"Hello World!\" }\n\nprintln \"Executing the Closure:\"\nclos()\n\n//Passing parameters to a closure\ndef sum = { a, b -> println a+b }\nsum(2,4)\n\n//Closures may refer to variables not listed in their parameter list.\ndef x = 5\ndef multiplyBy = { num -> num * x }\nprintln multiplyBy(10)\n\n// If you have a Closure that takes a single argument, you may omit the\n// parameter definition of the Closure\ndef clos = { print it }\nclos( \"hi\" )\n\n/*\n  Groovy can memoize closure results\n*/\ndef cl = {a, b ->\n    sleep(3000) // simulate some time consuming processing\n    a + b\n}\n\nmem = cl.memoize()\n\ndef callClosure(a, b) {\n    def start = System.currentTimeMillis()\n    mem(a, b)\n    println \"Inputs(a = $a, b = $b) - took ${System.currentTimeMillis() - start} msecs.\"\n}\n\ncallClosure(1, 2)\ncallClosure(1, 2)\ncallClosure(2, 3)\ncallClosure(2, 3)\ncallClosure(3, 4)\ncallClosure(3, 4)\ncallClosure(1, 2)\ncallClosure(2, 3)\ncallClosure(3, 4)\n\n/*\n  Expando\n\n  The Expando class is a dynamic bean so we can add properties and we can add\n  closures as methods to an instance of this class\n\n  http://mrhaki.blogspot.mx/2009/10/groovy-goodness-expando-as-dynamic-bean.html\n*/\n  def user = new Expando(name:\"Roberto\")\n  assert 'Roberto' == user.name\n\n  user.lastName = 'Pérez'\n  assert 'Pérez' == user.lastName\n\n  user.showInfo = { out ->\n      out << \"Name: $name\"\n      out << \", Last name: $lastName\"\n  }\n\n  def sw = new StringWriter()\n  println user.showInfo(sw)\n\n\n/*\n  Metaprogramming (MOP)\n*/\n\n//Using ExpandoMetaClass to add behaviour\nString.metaClass.testAdd = {\n    println \"we added this\"\n}\n\nString x = \"test\"\nx?.testAdd()\n\n//Intercepting method calls\nclass Test implements GroovyInterceptable {\n    def sum(Integer x, Integer y) { x + y }\n\n    def invokeMethod(String name, args) {\n        System.out.println \"Invoke method $name with args: $args\"\n    }\n}\n\ndef test = new Test()\ntest?.sum(2,3)\ntest?.multiply(2,3)\n\n//Groovy supports propertyMissing for dealing with property resolution attempts.\nclass Foo {\n   def propertyMissing(String name) { name }\n}\ndef f = new Foo()\n\nassertEquals \"boo\", f.boo\n\n/*\n  TypeChecked and CompileStatic\n  Groovy, by nature, is and will always be a dynamic language but it supports\n  typechecked and compilestatic\n\n  More info: http://www.infoq.com/articles/new-groovy-20\n*/\n//TypeChecked\nimport groovy.transform.TypeChecked\n\nvoid testMethod() {}\n\n@TypeChecked\nvoid test() {\n    testMeethod()\n\n    def name = \"Roberto\"\n\n    println naameee\n\n}\n\n//Another example:\nimport groovy.transform.TypeChecked\n\n@TypeChecked\nInteger test() {\n    Integer num = \"1\"\n\n    Integer[] numbers = [1,2,3,4]\n\n    Date date = numbers[1]\n\n    return \"Test\"\n\n}\n\n//CompileStatic example:\nimport groovy.transform.CompileStatic\n\n@CompileStatic\nint sum(int x, int y) {\n    x + y\n}\n\nassert sum(2,5) == 7\n```\n\n## Further resources\n\n[Groovy documentation](http://www.groovy-lang.org/documentation.html)\n\n[Groovy web console](http://groovyconsole.appspot.com/)\n\nJoin a [Groovy user group](http://www.groovy-lang.org/usergroups.html)\n\n## Books\n\n* [Groovy Goodness](https://leanpub.com/groovy-goodness-notebook)\n* [Groovy in Action](http://manning.com/koenig2/)\n* [Programming Groovy 2: Dynamic Productivity for the Java Developer](http://shop.oreilly.com/product/9781937785307.do)\n"
        },
        {
          "name": "hack.md",
          "type": "blob",
          "size": 12.419921875,
          "content": "---\nname: Hack\ncontributors:\n    - [\"Andrew DiMola\", \"https://github.com/AndrewDiMola\"]\n    - [\"Stephen Holdaway\", \"https://github.com/stecman\"]\n    - [\"David Lima\", \"https://github.com/davelima\"]\nfilename: learnhack.hh\n---\n\n[Hack](https://hacklang.org/) lets you write code quickly, while also having safety features built in, like static typechecking.\n\nTo run Hack code, [install HHVM](https://docs.hhvm.com/hhvm/installation/introduction), the open-source virtual machine.\n\n```php\n/* ==================================\n *           READ THE DOCS!\n * ==================================\n */\n\n/* For more information on the Hack language:\n * - About Hack: https://hacklang.org/\n * - Documentation: https://docs.hhvm.com/hack/\n */\n\n/* ==================================\n *           A NOTE ON PHP\n * ==================================\n */\n\n// The Hack language began as a superset of PHP.\n// Since then, the languages have (largely) diverged.\n// You may encounter the .php extension, which is no longer recommended.\n\n/* ==================================\n *              COMMENTS\n * ==================================\n */\n\n// Hack has single-line comments...\n\n/* Multi-line comments...\n *\n */\n\n/**\n * ... and a special syntax for doc comments.\n *\n * Use doc comments to summarize the purpose of a definition, function, class or method.\n */\n\n/* ==================================\n *             NAMESPACES\n * ==================================\n */\n\n// Namespaces contain definitions of classes, interfaces, traits, functions, and constants.\n\nnamespace LearnHackinYMinutes {\n\n  /* ==================================\n   *                TYPES\n   * ==================================\n   */\n\n  function demo_hack_types(): void {\n\n    // Hack has five primitive types: bool, int, float, string, and null.\n    $is_helpful = true; // bool\n    $int_value = 10; // int\n    $precise_value = 2.0; // float\n    $hello_world = \"Hello World!\"; // string\n    $null_string = null; // null\n\n    // Create a `shape` with the shape keyword, with a series of field names and values.\n    $my_point = shape('x' => -3, 'y' => 6, 'visible' => true);\n\n    // Create a `tuple` with the tuple keyword, with a series of two or more types as values.\n    $apple_basket = tuple(\"apples\", 25); // different types are OK\n\n    // Use `arraykey` to represent either an integer or string.\n    $the_answer = 42;\n    $is_answer = process_key($the_answer);\n\n    // Similarly, `num` represents either an int or float.\n    $lucky_number = 7;\n    $lucky_square = calculate_square($lucky_number);\n  }\n\n  function process_key(arraykey $the_answer): bool {\n    if ($the_answer is int) {\n      return true;\n    } else {\n      return false;\n    } // true\n  }\n\n  function calculate_square(num $arg)[]: float {\n    return ((float)$arg * $arg);\n  }\n\n  // Enums are limited to int or string (as an Arraykey), or other enum values.\n  enum Permission: string {\n    Read = 'R';\n    Write = 'W';\n    Execute = 'E';\n    Delete = 'D';\n  }\n\n  // In contrast, an enum class can be of any value type!\n  enum class Random: mixed {\n    int X = 42;\n    string S = 'foo';\n  }\n\n  /* ==================================\n   *            HACK ARRAYS\n   * ==================================\n   */\n\n  // The following line lets us use functions in the `C\\` namespace.\n  use namespace HH\\Lib\\C; // the `C` library operates on containers\n\n  function demo_hack_arrays(): void {\n\n    // vec: ordered\n    $v = vec[1, 2, 3];\n    $letters = vec['a', 'b', 'c'];\n\n    $letters[0]; // returns 'a'\n    $letters[] = 'd'; // appends 'd'\n\n    // `inout` provides pass-by-reference behavior\n    C\\pop_back(inout $letters); // removes 'd'\n    C\\pop_front(inout $letters); // removes 'a'\n\n    // keyset: ordered, without duplicates\n    $k = keyset[1, 2, 3]; // values must be int or string\n    $colors = keyset['red', 'blue', 'green'];\n\n    // keyset keys are identical to their values\n    $colors['blue']; // returns 'blue'.\n\n    $colors[] = 'yellow'; // appends 'yellow'\n    unset($colors['red']); // removes 'red'\n\n    //  dict: ordered, by key-value\n    $d = dict['a' => 1, 'b' => 3]; // keys must be int or string\n    $alphabet = dict['a' => 1, 'b' => 2];\n\n    $alphabet['a']; // indexing at 'a' returns `1`\n    $alphabet['c'] = 3; // adds a new key-value pair of `c => 3`\n\n    unset($alphabet['b']); // removes 'b'\n  }\n\n  /* ==================================\n   *  THE HACK STANDARD LIBRARY (HSL)\n   * ==================================\n   */\n\n  // The Hack Standard Library is a set of functions and classes for the Hack language.\n  // Namespace use declarations are ideally at the top of your file but are placed here for instruction purposes.\n\n  use namespace HH\\Lib\\Str; // The `Str` library operates on strings\n\n  function demo_hack_standard_library(): void {\n\n    $letters = vec['a', 'b', 'c'];\n    $colors = keyset['red', 'blue', 'green'];\n    $alphabet = dict['a' => 1, 'b' => 2];\n\n    C\\contains($letters, 'c'); // checks for a value; returns 'true'\n    C\\contains($colors, 'purple'); // checks for a value; returns 'false'\n    C\\contains_key($alphabet, 'a'); // checks for a key; returns 'true'\n    C\\contains($alphabet, 'd'); // checks for a value; returns 'false'\n\n    Str\\length(\"foo\"); // returns `3`\n    Str\\join(vec['foo', 'bar', 'baz'], '!'); // returns `foo!bar!baz`\n  }\n\n  /* ==================================\n   *           HELLO WORLD!\n   * ==================================\n   */\n\n  use namespace HH\\Lib\\IO; // the `IO` library is a standard API for input / output\n\n  <<__EntryPoint>> // required attribute for the typical entry/main function\n  async function main(): Awaitable<\n    void,\n  > { // does not need to be named 'main' / is an asynchronous function\n    await IO\\request_output()->writeAllAsync(\n      \"Hello World!\\n\",\n    ); // prints 'Hello World'!\n  }\n\n  /* ==================================\n   *             FUNCTIONS\n   * ==================================\n   */\n\n  // Functions are defined globally.\n  // When a function is defined in a class, we refer to the function as a method.\n\n  // Functions have return types (here: `int`) and must return a value of\n  // that type or return no value when a void return type annotation was used.\n\n  function add_one(int $x): int {\n    return $x + 1;\n  }\n\n  // Functions can also have defined, default values.\n  function add_value(int $x, int $y = 1): int {\n    return $x + $y;\n  }\n\n  // Functions can be variadic (unspecified length of arguments).\n  function sum_ints(int $val, int ...$vals): int {\n    $result = $val;\n\n    foreach ($vals as $v) {\n      $result += $v;\n    }\n    return $result;\n  }\n\n  // Functions can also be anonymous (defined with the `==>` arrow).\n  // $f = (int $x): int ==> $x + 1;\n\n  /* ==================================\n   *           PIPE OPERATOR\n   * ==================================\n   */\n\n  // The pipe operator, `|>`, evaluates the result of a left-hand expression\n  // and stores the result in `$$`, the predefined pipe variable.\n\n  use namespace HH\\Lib\\Vec;\n\n  function demo_pipe_operator(): void {\n\n    Vec\\sort(Vec\\map(vec[2, 1, 3], $a ==> $a * $a)); // vec[1,4,9]\n\n    // the same result, but using the pipe operator and pipe variable:\n    $x = vec[2, 1, 3]\n      |> Vec\\map($$, $a ==> $a * $a) // $$ with value vec[2,1,3]\n      |> Vec\\sort($$); // $$ with value vec[4,1,9]\n  }\n\n  /* ==================================\n   *             ATTRIBUTES\n   * ==================================\n   */\n\n  // Hack provides built-in attributes that can change runtime or static type checking behavior.\n  // For example, we used the `__EntryPoint` attribute earlier in the \"Hello World!\" example.\n\n  // As another example, `__Memoize` caches the result of a function.\n  <<__Memoize>>\n  async function do_expensive_task(): Awaitable<string> {\n    $site_contents = await \\HH\\Asio\\curl_exec(\"http://hacklang.org\");\n    return $site_contents;\n  }\n\n  /* ==================================\n   *             CONTEXTS\n   * ==================================\n   */\n\n  // Hack functions are attached to different contexts and capabilities.\n  // A context is a grouping of capabilities; that is, a grouping of permissions.\n\n  // To declare allowed contexts (and capabilities), use the Context List `[]`.\n  // If contexts are not defined, your function includes permissions defined in Hack's `defaults` context.\n\n  // Because the context list is NOT defined, the `defaults` context is implicitly declared.\n  async function implicit_defaults_context(): Awaitable<void> {\n    await IO\\request_output()->writeAllAsync(\n      \"Hello World!\\n\",\n    ); // prints 'Hello World'!\n  }\n\n  // In the function below, the context list is defined to have the `defaults` context.\n  // A function can have multiple contexts [context1, context2, ...].\n  // `defaults` includes most of the capabilities defined by the Hack language.\n  async function explicit_defaults_context()[defaults]: Awaitable<void> {\n    await IO\\request_output()->writeAllAsync(\"Hello World!\\n\");\n  }\n\n  // You can also specify zero contexts to create a pure function (no capabilities).\n  async function empty_context()[]: Awaitable<void> {\n    // The following line is an error, as the function does not have IO capabilities.\n    // await IO\\request_output()->writeAllAsync(\"Hello World!\\n\");\n  }\n\n  /* ==================================\n   *             GENERICS\n   * ==================================\n   */\n\n  // Generics allow classes or methods to be parameterized to any set of types.\n  // That's pretty cool!\n\n  // Hack typically passes by value: use `inout` to pass by reference.\n  function swap<T>(inout T $input1, inout T $input2): void {\n    $temp = $input1;\n    $input1 = $input2;\n    $input2 = $temp;\n  }\n\n  /* ==================================\n   *             CLASSES\n   * ==================================\n   */\n\n  // Classes provide a way to group functionality and state together.\n  // To define a class, use the `class` keyword. To instantiate, use `new`.\n  // Like other languages, you can use `$this` to refer to the current instance.\n\n  class Counter {\n    private int $i = 0;\n\n    public function increment(): void {\n      $this->i += 1;\n    }\n\n    public function get(): int {\n      return $this->i;\n    }\n  }\n\n  // Properties and Methods can be static (not requiring instantiation).\n  class Person {\n    public static function favoriteProgrammingLanguage(): string {\n      return \"Hack\";\n    }\n  }\n\n  function demo_hack_classes(): void {\n    // Use `new` to instantiate a class.\n    $c1 = new Counter();\n\n    // To call a static property or method, use `::`\n    $typical_person = tuple(\"Andrew\", Person::favoriteProgrammingLanguage());\n  }\n\n  // Abstract class can be defined, but not instantiated directly.\n  abstract class Machine {\n    public function openDoors(): void {\n      return;\n    }\n    public function closeDoors(): void {\n      return;\n    }\n  }\n\n  /* ==================================\n   *             INTERFACES\n   * ==================================\n   */\n\n  // A class can implement a set of requirements via an interface.\n  // An interface is a set of method declarations and constants.\n\n  interface Plane {\n    // A constant is a named value. Once defined, the value cannot be changed.\n    const MAX_SPEED = 300;\n    public function fly(): void;\n  }\n\n  /* ==================================\n   *             TRAITS\n   * ==================================\n   */\n\n  // A trait defines properties and method declarations.\n  // Traits are recommended when abstracting code for reuse.\n  // Traits are included in code via the `use` keyword.\n\n  trait Airplane {\n    // Introduce a class or interface requirement with the following syntax:\n    require extends Machine; // abstract class\n    require implements Plane; // interface\n\n    public function takeOff(): void {\n      $this->openDoors();\n      $this->closeDoors();\n      $this->fly();\n    }\n  }\n\n  class Spaceship extends Machine implements Plane {\n    use Airplane;\n\n    public function fly(): void {\n      // fly like the wind\n    }\n  }\n\n  /* ==================================\n   *             KEEP READING!\n   * ==================================\n   */\n\n  /*  This is a simplified guide!\n   *  There's much more to learn, including:\n   * - Asynchronous Operations: https://docs.hhvm.com/hack/asynchronous-operations/introduction\n   * - Reified Generics: https://docs.hhvm.com/hack/reified-generics/reified-generics\n   * - XHP: https://docs.hhvm.com/hack/XHP/setup\n   * - ... and more!\n   */\n}\n```\n\n## More Information\n\nVisit the [Hack language reference](http://docs.hhvm.com/hack/) to learn more about the Hack language.\n\nFor more information on HHVM, including installation instructions, visit the [official HHVM website](http://hhvm.com/).\n"
        },
        {
          "name": "haml.md",
          "type": "blob",
          "size": 5.5869140625,
          "content": "---\nname: Haml\nfilename: learnhaml.haml\ncontributors:\n  - [\"Simon Neveu\", \"https://github.com/sneveu\"]\n  - [\"Vasiliy Petrov\", \"https://github.com/Saugardas\"]\n---\n\nHaml is a markup language predominantly used with Ruby that cleanly and simply describes the HTML of any web document without the use of inline code. It is a popular alternative to using Rails templating language (.erb) and allows you to embed Ruby code into your markup.\n\nIt aims to reduce repetition in your markup by closing tags for you based on the structure of the indents in your code. The result is markup that is well-structured, DRY, logical, and easier to read.\n\nYou can also use Haml on a project independent of Ruby, by installing the Haml gem on your machine and using the command line to convert it to html.\n\n```shell\n$ haml input_file.haml output_file.html\n```\n\n\n```haml\n/ -------------------------------------------\n/ Indenting\n/ -------------------------------------------\n\n/\n  Because of the importance indentation has on how your code is rendered, the\n  indents should be consistent throughout the document. Any differences in\n  indentation will throw an error. It's common-practice to use two spaces,\n  but it's really up to you, as long as they're constant.\n\n\n/ -------------------------------------------\n/ Comments\n/ -------------------------------------------\n\n/ This is what a comment looks like in Haml.\n\n/\n  To write a multi line comment, indent your commented code to be\n  wrapped by the forward slash\n\n-# This is a silent comment, which means it won't be rendered into the doc at all\n\n\n/ -------------------------------------------\n/ Html elements\n/ -------------------------------------------\n\n/ To write your tags, use the percent sign followed by the name of the tag\n%body\n  %header\n    %nav\n\n/ Notice no closing tags. The above code would output\n  <body>\n    <header>\n      <nav></nav>\n    </header>\n  </body>\n\n/\n  The div tag is the default element, so it can be omitted.\n  You can define only class/id using . or #\n  For example\n\n%div.my_class\n  %div#my_id\n\n/ Can be written\n.my_class\n  #my_id\n\n/ To add content to a tag, add the text directly after the declaration\n%h1 Headline copy\n\n/ To write multiline content, nest it instead\n%p\n  This is a lot of content that we could probably split onto two\n  separate lines.\n\n/\n  You can escape html by using the ampersand and equals sign ( &= ). This\n  converts html-sensitive characters (&, /, :) into their html encoded\n  equivalents. For example\n\n%p\n  &= \"Yes & yes\"\n\n/ would output 'Yes &amp; yes'\n\n/ You can unescape html by using the bang and equals sign ( != )\n%p\n  != \"This is how you write a paragraph tag <p></p>\"\n\n/ which would output 'This is how you write a paragraph tag <p></p>'\n\n/ CSS classes can be added to your tags either by chaining .classnames to the tag\n%div.foo.bar\n\n/ or as part of a Ruby hash\n%div{:class => 'foo bar'}\n\n/ Attributes for any tag can be added in the hash\n%a{:href => '#', :class => 'bar', :title => 'Bar'}\n\n/ For boolean attributes assign the value 'true'\n%input{:selected => true}\n\n/ To write data-attributes, use the :data key with its value as another hash\n%div{:data => {:attribute => 'foo'}}\n\n/ For Ruby version 1.9 or higher you can use Ruby's new hash syntax\n%div{ data: { attribute: 'foo' } }\n\n/ Also you can use HTML-style attribute syntax.\n%a(href='#' title='bar')\n\n/ And both syntaxes together\n%a(href='#'){ title: @my_class.title }\n\n\n/ -------------------------------------------\n/ Inserting Ruby\n/ -------------------------------------------\n\n/\n  To output a Ruby value as the contents of a tag, use an equals sign followed\n  by the Ruby code\n\n%h1= book.name\n\n%p\n  = book.author\n  = book.publisher\n\n\n/ To run some Ruby code without rendering it to the html, use a hyphen instead\n- books = ['book 1', 'book 2', 'book 3']\n\n/ Allowing you to do all sorts of awesome, like Ruby blocks\n- books.shuffle.each_with_index do |book, index|\n  %h1= book\n\n  - if book do\n    %p This is a book\n    \n/ Adding ordered / unordered list\n%ul\n  %li\n    =item1\n    =item2\n\n/\n  Again, no need to add the closing tags to the block, even for the Ruby.\n  Indentation will take care of that for you.\n\n/ -------------------------------------------\n/ Inserting Table with bootstrap classes\n/ -------------------------------------------\n\n%table.table.table-hover\n  %thead\n    %tr\n      %th Header 1\n      %th Header 2\n    \n    %tr\n      %td Value1\n      %td value2\n    \n  %tfoot\n    %tr\n      %td\n        Foot value\n\n\n/ -------------------------------------------\n/ Inline Ruby / Ruby interpolation\n/ -------------------------------------------\n\n/ Include a Ruby variable in a line of plain text using #{}\n%p Your highest scoring game is #{best_game}\n\n\n/ -------------------------------------------\n/ Filters\n/ -------------------------------------------\n\n/\n  Filters pass the block to another filtering program and return the result in Haml\n  To use a filter, type a colon and the name of the filter\n\n/ Markdown filter\n:markdown\n  # Header\n\n  Text **inside** the *block*\n\n/ The code above is compiled into\n<h1>Header</h1>\n\n<p>Text <strong>inside</strong> the <em>block</em></p>\n\n/ JavaScript filter\n:javascript\n  console.log('This is inline <script>');\n\n/ is compiled into\n<script>\n  console.log('This is inline <script>');\n</script>\n\n/\n  There are many types of filters (:markdown, :javascript, :coffee, :css, :ruby and so on)\n  Also you can define your own filters using Haml::Filters\n```\n\n## Additional resources\n\n- [What is HAML?](http://haml.info/) - A good introduction that does a much better job of explaining the benefits of using HAML.\n- [Official Docs](http://haml.info/docs/yardoc/file.REFERENCE.html) - If you'd like to go a little deeper.\n"
        },
        {
          "name": "haskell.md",
          "type": "blob",
          "size": 18.5146484375,
          "content": "---\nname: Haskell\nfilename: learnhaskell.hs\ncontributors:\n    - [\"Adit Bhargava\", \"http://adit.io\"]\n    - [\"Stanislav Modrak\", \"https://stanislav.gq\"]\n---\n\nHaskell was designed as a practical, purely functional programming\nlanguage. It's famous for its monads and its type system, but I keep coming back\nto it because of its elegance. Haskell makes coding a real joy for me.\n\n```haskell\n-- Single line comments start with two dashes.\n{- Multiline comments can be enclosed\nin a block like this.\n-}\n\n----------------------------------------------------\n-- 1. Primitive Datatypes and Operators\n----------------------------------------------------\n\n-- You have numbers\n3 -- 3\n\n-- Math is what you would expect\n1 + 1 -- 2\n8 - 1 -- 7\n10 * 2 -- 20\n35 / 5 -- 7.0\n\n-- Division is not integer division by default\n35 / 4 -- 8.75\n\n-- integer division\n35 `div` 4 -- 8\n\n-- Boolean values are primitives\nTrue\nFalse\n\n-- Boolean operations\nnot True -- False\nnot False -- True\nTrue && False -- False\nTrue || False -- True\n1 == 1 -- True\n1 /= 1 -- False\n1 < 10 -- True\n\n-- In the above examples, `not` is a function that takes one value.\n-- Haskell doesn't need parentheses for function calls...all the arguments\n-- are just listed after the function. So the general pattern is:\n-- func arg1 arg2 arg3...\n-- See the section on functions for information on how to write your own.\n\n-- Strings and characters\n\"This is a string.\"\n'a' -- character\n'You cant use single quotes for strings.' -- error!\n\n-- Strings can be concatenated\n\"Hello \" ++ \"world!\" -- \"Hello world!\"\n\n-- A string is a list of characters\n['H', 'e', 'l', 'l', 'o'] -- \"Hello\"\n\n-- Lists can be indexed with the `!!` operator followed by an index\n-- but this is an O(n) operation because lists are linked lists\n\"This is a string\" !! 0 -- 'T'\n\n\n----------------------------------------------------\n-- 2. Lists and Tuples\n----------------------------------------------------\n\n-- Every element in a list must have the same type.\n-- These two lists are equal:\n[1, 2, 3, 4, 5]\n[1..5]\n\n-- Ranges are versatile.\n['A'..'F'] -- \"ABCDEF\"\n\n-- You can create a step in a range.\n[0,2..10] -- [0, 2, 4, 6, 8, 10]\n[5..1] -- [] (Haskell defaults to incrementing)\n[5,4..1] -- [5, 4, 3, 2, 1]\n\n-- indexing into a list\n[1..10] !! 3 -- 4 (zero-based indexing)\n\n-- You can also have infinite lists in Haskell!\n[1..] -- a list of all the natural numbers\n\n-- Infinite lists work because Haskell has \"lazy evaluation\". This means\n-- that Haskell only evaluates things when it needs to. So you can ask for\n-- the 1000th element of your list and Haskell will give it to you:\n\n[1..] !! 999 -- 1000\n\n-- And now Haskell has evaluated elements 1 - 1000 of this list...but the\n-- rest of the elements of this \"infinite\" list don't exist yet! Haskell won't\n-- actually evaluate them until it needs to.\n\n-- joining two lists\n[1..5] ++ [6..10]\n\n-- adding to the head of a list\n0:[1..5] -- [0, 1, 2, 3, 4, 5]\n\n-- more list operations\nhead [1..5] -- 1\ntail [1..5] -- [2, 3, 4, 5]\ninit [1..5] -- [1, 2, 3, 4]\nlast [1..5] -- 5\n\n-- list comprehensions\n[x*2 | x <- [1..5]] -- [2, 4, 6, 8, 10]\n\n-- with a conditional\n[x*2 | x <- [1..5], x*2 > 4] -- [6, 8, 10]\n\n-- Every element in a tuple can be a different type, but a tuple has a\n-- fixed length.\n-- A tuple:\n(\"haskell\", 1)\n\n-- accessing elements of a pair (i.e. a tuple of length 2)\nfst (\"haskell\", 1) -- \"haskell\"\nsnd (\"haskell\", 1) -- 1\n\n-- pair element accessing does not work on n-tuples (i.e. triple, quadruple, etc)\nsnd (\"snd\", \"can't touch this\", \"da na na na\") -- error! see function below\n\n----------------------------------------------------\n-- 3. Functions\n----------------------------------------------------\n-- A simple function that takes two variables\nadd a b = a + b\n\n-- Note that if you are using ghci (the Haskell interpreter)\n-- You'll need to use `let`, i.e.\n-- let add a b = a + b\n\n-- Using the function\nadd 1 2 -- 3\n\n-- You can also put the function name between the two arguments\n-- with backticks:\n1 `add` 2 -- 3\n\n-- You can also define functions that have no letters! This lets\n-- you define your own operators! Here's an operator that does\n-- integer division\n(//) a b = a `div` b\n35 // 4 -- 8\n\n-- Guards: an easy way to do branching in functions\nfib x\n  | x < 2 = 1\n  | otherwise = fib (x - 1) + fib (x - 2)\n\n-- Pattern matching is similar. Here we have given three different\n-- equations that define fib. Haskell will automatically use the first\n-- equation whose left hand side pattern matches the value.\nfib 1 = 1\nfib 2 = 2\nfib x = fib (x - 1) + fib (x - 2)\n\n-- Pattern matching on tuples\nsndOfTriple (_, y, _) = y -- use a wild card (_) to bypass naming unused value\n\n-- Pattern matching on lists. Here `x` is the first element\n-- in the list, and `xs` is the rest of the list. We can write\n-- our own map function:\nmyMap func [] = []\nmyMap func (x:xs) = func x:(myMap func xs)\n\n-- Anonymous functions are created with a backslash followed by\n-- all the arguments.\nmyMap (\\x -> x + 2) [1..5] -- [3, 4, 5, 6, 7]\n\n-- using fold (called `inject` in some languages) with an anonymous\n-- function. foldl1 means fold left, and use the first value in the\n-- list as the initial value for the accumulator.\nfoldl1 (\\acc x -> acc + x) [1..5] -- 15\n\n----------------------------------------------------\n-- 4. More functions\n----------------------------------------------------\n\n-- partial application: if you don't pass in all the arguments to a function,\n-- it gets \"partially applied\". That means it returns a function that takes the\n-- rest of the arguments.\n\nadd a b = a + b\nfoo = add 10 -- foo is now a function that takes a number and adds 10 to it\nfoo 5 -- 15\n\n-- Another way to write the same thing\nfoo = (10+)\nfoo 5 -- 15\n\n-- function composition\n-- the operator `.` chains functions together.\n-- For example, here foo is a function that takes a value. It adds 10 to it,\n-- multiplies the result of that by 4, and then returns the final value.\nfoo = (4*) . (10+)\n\n-- 4*(10+5) = 60\nfoo 5 -- 60\n\n-- fixing precedence\n-- Haskell has an operator called `$`. This operator applies a function\n-- to a given parameter. In contrast to standard function application, which\n-- has highest possible priority of 10 and is left-associative, the `$` operator\n-- has priority of 0 and is right-associative. Such a low priority means that\n-- the expression on its right is applied as a parameter to the function on its left.\n\n-- before\neven (fib 7) -- false\n\n-- equivalently\neven $ fib 7 -- false\n\n-- composing functions\neven . fib $ 7 -- false\n\n\n----------------------------------------------------\n-- 5. Type signatures\n----------------------------------------------------\n\n-- Haskell has a very strong type system, and every valid expression has a type.\n\n-- Some basic types:\n5 :: Integer\n\"hello\" :: String\nTrue :: Bool\n\n-- Functions have types too.\n-- `not` takes a boolean and returns a boolean:\n-- not :: Bool -> Bool\n\n-- Here's a function that takes two arguments:\n-- add :: Integer -> Integer -> Integer\n\n-- When you define a value, it's good practice to write its type above it:\ndouble :: Integer -> Integer\ndouble x = x * 2\n\n----------------------------------------------------\n-- 6. Control Flow and If Expressions\n----------------------------------------------------\n\n-- if-expressions\nhaskell = if 1 == 1 then \"awesome\" else \"awful\" -- haskell = \"awesome\"\n\n-- if-expressions can be on multiple lines too, indentation is important\nhaskell = if 1 == 1\n            then \"awesome\"\n            else \"awful\"\n\n-- case expressions: Here's how you could parse command line arguments\ncase args of\n  \"help\" -> printHelp\n  \"start\" -> startProgram\n  _ -> putStrLn \"bad args\"\n\n-- Haskell doesn't have loops; it uses recursion instead.\n-- map applies a function over every element in a list\n\nmap (*2) [1..5] -- [2, 4, 6, 8, 10]\n\n-- you can make a for function using map\nfor list func = map func list\n\n-- and then use it\nfor [0..5] $ \\i -> show i\n\n-- we could've written that like this too:\nfor [0..5] show\n\n-- filter keeps only the elements in a list that satisfy a condition\nfilter even [1..10] -- [2, 4, 8, 10]\n\n-- You can use foldl or foldr to reduce a list\n-- foldl <fn> <initial value> <list>\nfoldl (\\x y -> 2*x + y) 4 [1,2,3] -- 43\n\n-- This is the same as\n(2 * (2 * (2 * 4 + 1) + 2) + 3)\n\n-- foldl is left-handed, foldr is right-handed\nfoldr (\\x y -> 2*x + y) 4 [1,2,3] -- 16\n\n-- This is now the same as\n(2 * 1 + (2 * 2 + (2 * 3 + 4)))\n\n----------------------------------------------------\n-- 7. Data Types\n----------------------------------------------------\n\n-- A data type is declared with a 'type constructor' on the left\n-- and one or more 'data constructors' on the right, separated by\n-- the pipe | symbol. This is a sum/union type. Each data constructor\n-- is a (possibly nullary) function that creates an object of the type\n-- named by the type constructor.\n\n-- This is essentially an enum\n\ndata Color = Red | Blue | Green\n\n-- Now you can use it in a function:\n\nsay :: Color -> String\nsay Red   = \"You are Red!\"\nsay Blue  = \"You are Blue!\"\nsay Green = \"You are Green!\"\n\n-- Note that the type constructor is used in the type signature\n-- and the data constructors are used in the body of the function\n-- Data constructors are primarily pattern-matched against\n\n-- This next one is a traditional container type holding two fields\n-- In a type declaration, data constructors take types as parameters\n-- Data constructors can have the same name as type constructors\n-- This is common where the type only has a single data constructor\n\ndata Point = Point Float Float\n\n-- This can be used in a function like:\n\ndistance :: Point -> Point -> Float\ndistance (Point x y) (Point x' y') = sqrt $ dx + dy\n    where dx = (x - x') ** 2\n          dy = (y - y') ** 2\n          \n-- Types can have multiple data constructors with arguments, too\n\ndata Name = Mononym String\n          | FirstLastName String String\n          | FullName String String String\n\n-- To make things clearer we can use record syntax\n\ndata Point2D = CartesianPoint2D { x :: Float, y :: Float } \n             | PolarPoint2D { r :: Float, theta :: Float }\n\nmyPoint = CartesianPoint2D { x = 7.0, y = 10.0 }\n\n-- Using record syntax automatically creates accessor functions\n-- (the name of the field)\n\nxOfMyPoint = x myPoint\n\n-- xOfMyPoint is equal to 7.0\n\n-- Record syntax also allows a simple form of update\n\nmyPoint' = myPoint { x = 9.0 }\n\n-- myPoint' is CartesianPoint2D { x = 9.0, y = 10.0 }\n\n-- Even if a type is defined with record syntax, it can be declared like\n-- a simple data constructor. This is fine:\n\nmyPoint'2 = CartesianPoint2D 3.3 4.0\n\n-- It's also useful to pattern match data constructors in `case` expressions\n\ndistanceFromOrigin x = \n    case x of (CartesianPoint2D x y) -> sqrt $ x ** 2 + y ** 2\n              (PolarPoint2D r _) -> r\n\n-- Your data types can have type parameters too:\n\ndata Maybe a = Nothing | Just a\n\n-- These are all of type Maybe\nJust \"hello\"    -- of type `Maybe String`\nJust 1          -- of type `Maybe Int`\nNothing         -- of type `Maybe a` for any `a`\n\n-- For convenience we can also create type synonyms with the 'type' keyword\n\ntype String = [Char]\n\n-- Unlike `data` types, type synonyms need no constructor, and can be used \n-- anywhere a synonymous data type could be used. Say we have the \n-- following type synonyms and items with the following type signatures\n\ntype Weight = Float\ntype Height = Float\ntype Point = (Float, Float)\ngetMyHeightAndWeight :: Person -> (Height, Weight)\nfindCenter :: Circle -> Point\nsomePerson :: Person\nsomeCircle :: Circle\ndistance :: Point -> Point -> Float\n\n-- The following would compile and run without issue, \n-- even though it does not make sense semantically,\n-- because the type synonyms reduce to the same base types\n\ndistance (getMyHeightAndWeight somePerson) (findCenter someCircle)\n\n----------------------------------------------------\n-- 8. Typeclasses\n----------------------------------------------------\n\n-- Typeclasses are one way Haskell does polymorphism\n-- They are similar to interfaces in other languages\n-- A typeclass defines a set of functions that must \n-- work on any type that is in that typeclass.\n\n-- The Eq typeclass is for types whose instances can \n-- be tested for equality with one another.\n\nclass Eq a where  \n    (==) :: a -> a -> Bool  \n    (/=) :: a -> a -> Bool  \n    x == y = not (x /= y)  \n    x /= y = not (x == y)\n    \n-- This defines a typeclass that requires two functions, (==) and (/=)\n-- It also declares that one function can be declared in terms of another\n-- So it is enough that *either* the (==) function or the (/=) is defined\n-- And the other will be 'filled in' based on the typeclass definition\n\n-- To make a type a member of a type class, the instance keyword is used\n\ninstance Eq TrafficLight where  \n    Red == Red = True  \n    Green == Green = True  \n    Yellow == Yellow = True  \n    _ == _ = False \n    \n-- Now we can use (==) and (/=) with TrafficLight objects\n\ncanProceedThrough :: TrafficLight -> Bool\ncanProceedThrough t = t /= Red\n\n-- You can NOT create an instance definition for a type synonym\n\n-- Functions can be written to take typeclasses with type parameters, \n-- rather than types, assuming that the function only relies on \n-- features of the typeclass\n\nisEqual :: (Eq a) => a -> a -> Bool\nisEqual x y = x == y\n\n-- Note that x and y MUST be the same type, as they are both defined\n-- as being of type parameter 'a'.\n-- A typeclass does not state that different types in the typeclass can \n-- be mixed together.\n-- So `isEqual Red 2` is invalid, even though 2 is an Int which is an \n-- instance of Eq, and Red is a TrafficLight which is also an instance of Eq\n\n-- Other common typeclasses are:\n-- Ord for types that can be ordered, allowing you to use >, <=, etc.\n-- Read for types that can be created from a string representation\n-- Show for types that can be converted to a string for display\n-- Num, Real, Integral, Fractional for types that can do math\n-- Enum for types that can be stepped through\n-- Bounded for types with a maximum and minimum\n\n-- Haskell can automatically make types part of Eq, Ord, Read, Show, Enum, \n-- and Bounded with the `deriving` keyword at the end of the type declaration\n\ndata Point = Point Float Float deriving (Eq, Read, Show)\n    \n-- In this case it is NOT necessary to create an 'instance' definition\n\n----------------------------------------------------\n-- 9. Haskell IO\n----------------------------------------------------\n\n-- While IO can't be explained fully without explaining monads,\n-- it is not hard to explain enough to get going.\n\n-- When a Haskell program is executed, `main` is\n-- called. It must return a value of type `IO a` for some type `a`. For example:\n\nmain :: IO ()\nmain = putStrLn $ \"Hello, sky! \" ++ (say Blue)\n-- putStrLn has type String -> IO ()\n\n-- It is easiest to do IO if you can implement your program as\n-- a function from String to String. The function\n--    interact :: (String -> String) -> IO ()\n-- inputs some text, runs a function on it, and prints out the\n-- output.\n\ncountLines :: String -> String\ncountLines = show . length . lines\n\nmain' = interact countLines\n\n-- You can think of a value of type `IO ()` as representing a\n-- sequence of actions for the computer to do, much like a\n-- computer program written in an imperative language. We can use\n-- the `do` notation to chain actions together. For example:\n\nsayHello :: IO ()\nsayHello = do\n   putStrLn \"What is your name?\"\n   name <- getLine -- this gets a line and gives it the name \"name\"\n   putStrLn $ \"Hello, \" ++ name\n\n-- Exercise: write your own version of `interact` that only reads\n--           one line of input.\n\n-- The code in `sayHello` will never be executed, however. The only\n-- action that ever gets executed is the value of `main`.\n-- To run `sayHello` comment out the above definition of `main`\n-- and replace it with:\n--   main = sayHello\n\n-- Let's understand better how the function `getLine` we just\n-- used works. Its type is:\n--    getLine :: IO String\n-- You can think of a value of type `IO a` as representing a\n-- computer program that will generate a value of type `a`\n-- when executed (in addition to anything else it does). We can\n-- name and reuse this value using `<-`. We can also\n-- make our own action of type `IO String`:\n\naction :: IO String\naction = do\n   putStrLn \"This is a line. Duh\"\n   input1 <- getLine\n   input2 <- getLine\n   -- The type of the `do` statement is that of its last line.\n   -- `return` is not a keyword, but merely a function\n   return (input1 ++ \"\\n\" ++ input2) -- return :: String -> IO String\n\n-- We can use this just like we used `getLine`:\n\nmain'' = do\n    putStrLn \"I will echo two lines!\"\n    result <- action\n    putStrLn result\n    putStrLn \"This was all, folks!\"\n\n-- The type `IO` is an example of a \"monad\". The way Haskell uses a monad to\n-- do IO allows it to be a purely functional language. Any function that\n-- interacts with the outside world (i.e. does IO) gets marked as `IO` in its\n-- type signature. This lets us reason about which functions are \"pure\" (don't\n-- interact with the outside world or modify state) and which functions aren't.\n\n-- This is a powerful feature, because it's easy to run pure functions\n-- concurrently; so, concurrency in Haskell is very easy.\n\n\n----------------------------------------------------\n-- 10. The Haskell REPL\n----------------------------------------------------\n\n-- Start the repl by typing `ghci`.\n-- Now you can type in Haskell code. Any new values\n-- need to be created with `let`:\n\nlet foo = 5\n\n-- You can see the type of any value or expression with `:t`:\n\n> :t foo\nfoo :: Integer\n\n-- Operators, such as `+`, `:` and `$`, are functions.\n-- Their type can be inspected by putting the operator in parentheses:\n\n> :t (:)\n(:) :: a -> [a] -> [a]\n\n-- You can get additional information on any `name` using `:i`:\n\n> :i (+)\nclass Num a where\n  (+) :: a -> a -> a\n  ...\n    -- Defined in ‘GHC.Num’\ninfixl 6 +\n\n-- You can also run any action of type `IO ()`\n\n> sayHello\nWhat is your name?\nFriend!\nHello, Friend!\n```\n\nThere's a lot more to Haskell, including typeclasses and monads. These are the\nbig ideas that make Haskell such fun to code in. I'll leave you with one final\nHaskell example: an implementation of a quicksort variant in Haskell:\n\n```haskell\nqsort [] = []\nqsort (p:xs) = qsort lesser ++ [p] ++ qsort greater\n    where lesser  = filter (< p) xs\n          greater = filter (>= p) xs\n```\n\nThere are two popular ways to install Haskell: The traditional [Cabal-based installation](http://www.haskell.org/platform/), and the newer [Stack-based process](https://www.stackage.org/install).\n\nYou can find a much gentler introduction from the excellent\n[Learn you a Haskell](http://learnyouahaskell.com/) (or [up-to-date community version](https://learnyouahaskell.github.io/)),\n[Happy Learn Haskell Tutorial](http://www.happylearnhaskelltutorial.com/) or\n[Real World Haskell](http://book.realworldhaskell.org/).\n"
        },
        {
          "name": "haxe.md",
          "type": "blob",
          "size": 26.9873046875,
          "content": "---\nname: Haxe\nfilename: LearnHaxe3.hx\ncontributors:\n    - [\"Justin Donaldson\", \"https://github.com/jdonaldson/\"]\n    - [\"Dan Korostelev\", \"https://github.com/nadako/\"]\n---\n\n[Haxe](https://haxe.org/) is a general-purpose language that provides platform support for C++, C#,\nSwf/ActionScript, JavaScript, Java, PHP, Python, Lua, HashLink, and Neko bytecode\n(the latter two being also written by the Haxe author). Note that this guide is for\nHaxe version 3.  Some of the guide may be applicable to older versions, but it is\nrecommended to use other references.\n\n```haxe\n/*\n   Welcome to Learn Haxe 3 in 15 minutes.  http://www.haxe.org\n   This is an executable tutorial.  You can compile and run it using the haxe\n   compiler, while in the same directory as LearnHaxe.hx:\n   \n       $ haxe -main LearnHaxe3 --interp\n\n   Look for the slash-star marks surrounding these paragraphs.  We are inside\n   a \"Multiline comment\".  We can leave some notes here that will get ignored\n   by the compiler.\n\n   Multiline comments are also used to generate javadoc-style documentation for\n   haxedoc.  They will be used for haxedoc if they immediately precede a class,\n   class function, or class variable.\n */\n\n// Double slashes like this will give a single-line comment.\n\n/*\n   This is your first actual haxe code coming up, it's declaring an empty\n   package.  A package isn't necessary, but it's useful if you want to create\n   a namespace for your code (e.g. org.yourapp.ClassName).\n\n   Omitting package declaration is the same as declaring an empty package.\n */\npackage; // empty package, no namespace.\n\n/*\n   Packages are directories that contain modules. Each module is a .hx file\n   that contains types defined in a package. Package names (e.g. org.yourapp)\n   must be lower case while module names are capitalized. A module contain one\n   or more types whose names are also capitalized.\n\n   E.g, the class \"org.yourapp.Foo\" should have the folder structure\n   org/module/Foo.hx, as accessible from the compiler's working directory or\n   class path.\n\n   If you import code from other files, it must be declared before the rest of\n   the code.  Haxe provides a lot of common default classes to get you started:\n */\nimport haxe.ds.ArraySort;\n\n// you can import many classes/modules at once with \"*\"\nimport haxe.ds.*;\n\n// you can import static fields\nimport Lambda.array;\n\n// you can also use \"*\" to import all static fields\nimport Math.*;\n\n// You can also import classes in a special way, enabling them to extend the\n// functionality of other classes like a \"mixin\".  More on 'using' later.\nusing StringTools;\n\n// Typedefs are like variables... for types.  They must be declared before any\n// code.  More on this later.\ntypedef FooString = String;\n\n// Typedefs can also reference \"structural\" types, more on that later as well.\ntypedef FooObject = { foo: String };\n\n// Here's the class definition.  It's the main class for the file, since it has\n// the same name (LearnHaxe3).\nclass LearnHaxe3 {\n    /*\n       If you want certain code to run automatically, you need to put it in\n       a static main function, and specify the class in the compiler arguments.\n       In this case, we've specified the \"LearnHaxe3\" class in the compiler\n       arguments above.\n     */\n    static function main() {\n        /*\n           Trace is the default method of printing haxe expressions to the\n           screen.  Different targets will have different methods of\n           accomplishing this.  E.g., java, c++, c#, etc. will print to std\n           out.  JavaScript will print to console.log, and flash will print to\n           an embedded TextField.  All traces come with a default newline.\n           Finally, It's possible to prevent traces from showing by using the\n           \"--no-traces\" argument on the compiler.\n         */\n        trace(\"Hello World, with trace()!\");\n\n        // Trace can handle any type of value or object.  It will try to print\n        // a representation of the expression as best it can.  You can also\n        // concatenate strings with the \"+\" operator:\n        trace(\"Integer: \" + 10 + \" Float: \" + 3.14 + \" Boolean: \" + true);\n\n        // In Haxe, it's required to separate expressions in the same block with\n        // semicolons.  But, you can put two expressions on one line:\n        trace('two expressions..'); trace('one line');\n\n\n        //////////////////////////////////////////////////////////////////\n        // Types & Variables\n        //////////////////////////////////////////////////////////////////\n        trace(\"***Types & Variables***\");\n\n        // You can save values and references to data structures using the\n        // \"var\" keyword:\n        var an_integer:Int = 1;\n        trace(an_integer + \" is the value for an_integer\");\n\n        /*\n           Haxe is statically typed, so \"an_integer\" is declared to have an\n           \"Int\" type, and the rest of the expression assigns the value \"1\" to\n           it.  It's not necessary to declare the type in many cases.  Here,\n           the haxe compiler is inferring that the type of another_integer\n           should be \"Int\".\n         */\n        var another_integer = 2;\n        trace(another_integer + \" is the value for another_integer\");\n\n        // The $type() method prints the type that the compiler assigns:\n        $type(another_integer);\n\n        // You can also represent integers with hexadecimal:\n        var hex_integer = 0xffffff;\n\n        /*\n           Haxe uses platform precision for Int and Float sizes.  It also\n           uses the platform behavior for overflow.\n           (Other numeric types and behavior are possible using special\n           libraries.)\n           \n           In addition to simple values like Integers, Floats, and Booleans,\n           Haxe provides standard library implementations for common data\n           structures like strings, arrays, lists, and maps:\n         */\n\n        // Strings can have double or single quotes.\n        var a_string = \"some\" + 'string';\n        trace(a_string + \" is the value for a_string\");\n\n        // Strings can be \"interpolated\" by inserting variables into specific\n        // positions.  The string must be single quoted, and the variable must\n        // be preceded with \"$\".  Expressions can be enclosed in ${...}.\n        var x = 1;\n        var an_interpolated_string = 'the value of x is $x';\n        var another_interpolated_string = 'the value of x + 1 is ${x + 1}';\n\n        // Strings are immutable, instance methods will return a copy of\n        // parts or all of the string. (See also the StringBuf class).\n        var a_sub_string = a_string.substr(0,4);\n        trace(a_sub_string + \" is the value for a_sub_string\");\n\n        // Regexes are also supported, but there's not enough space here to go\n        // into much detail.\n        var re = ~/foobar/;\n        trace(re.match('foo') + \" is the value for (~/foobar/.match('foo')))\");\n\n        // Arrays are zero-indexed, dynamic, and mutable.  Missing values are\n        // defined as null.\n        var a = new Array<String>(); // an array that contains Strings\n        a[0] = 'foo';\n        trace(a.length + \" is the value for a.length\");\n        a[9] = 'bar';\n        trace(a.length + \" is the value for a.length (after modification)\");\n        trace(a[3] + \" is the value for a[3]\"); //null\n\n        // Arrays are *generic*, so you can indicate which values they contain\n        // with a type parameter:\n        var a2 = new Array<Int>(); // an array of Ints\n        var a3 = new Array<Array<String>>(); // an Array of Arrays (of Strings).\n\n        // Maps are simple key/value data structures.  The key and the value\n        // can be of any type.\n        // Here, the keys are strings, and the values are Ints:\n        var m = new Map<String, Int>();\n        m.set('foo', 4);\n        // You can also use array notation:\n        m['bar'] = 5;\n        trace(m.exists('bar') + \" is the value for m.exists('bar')\");\n        trace(m.get('bar') + \" is the value for m.get('bar')\");\n        trace(m['bar'] + \" is the value for m['bar']\");\n\n        var m2 = ['foo' => 4, 'baz' => 6]; // Alternative map syntax\n        trace(m2 + \" is the value for m2\");\n\n        // Remember, you can use type inference.  The Haxe compiler will\n        // decide the type of the variable the first time you pass an\n        // argument that sets a type parameter.\n        var m3 = new Map();\n        m3.set(6, 'baz'); // m3 is now a Map<Int,String>\n        trace(m3 + \" is the value for m3\");\n\n        // Haxe has some more common datastructures in the haxe.ds module, such\n        // as List, Stack, and BalancedTree.\n\n\n        //////////////////////////////////////////////////////////////////\n        // Operators\n        //////////////////////////////////////////////////////////////////\n        trace(\"***OPERATORS***\");\n\n        // basic arithmetic\n        trace((4 + 3) + \" is the value for (4 + 3)\");\n        trace((5 - 1) + \" is the value for (5 - 1)\");\n        trace((2 * 4) + \" is the value for (2 * 4)\");\n        // Division always produces Floats.\n        trace((8 / 3) + \" is the value for (8 / 3) (a Float)\");\n        trace((12 % 4) + \" is the value for (12 % 4)\");\n\n        // basic comparison\n        trace((3 == 2) + \" is the value for 3 == 2\");\n        trace((3 != 2) + \" is the value for 3 != 2\");\n        trace((3 >  2) + \" is the value for 3 > 2\");\n        trace((3 <  2) + \" is the value for 3 < 2\");\n        trace((3 >= 2) + \" is the value for 3 >= 2\");\n        trace((3 <= 2) + \" is the value for 3 <= 2\");\n\n        // standard bitwise operators\n        /*\n            ~       Unary bitwise complement\n            <<      Signed left shift\n            >>      Signed right shift\n            >>>     Unsigned right shift\n            &       Bitwise AND\n            ^       Bitwise exclusive OR\n            |       Bitwise inclusive OR\n        */\n        \n        var i = 0;\n        trace(\"Pre-/Post- Increments and Decrements\");\n        trace(i++); // i = 1. Post-Increment\n        trace(++i); // i = 2. Pre-Increment\n        trace(i--); // i = 1. Post-Decrement\n        trace(--i); // i = 0. Pre-Decrement\n\n\n        //////////////////////////////////////////////////////////////////\n        // Control Structures\n        //////////////////////////////////////////////////////////////////\n        trace(\"***CONTROL STRUCTURES***\");\n\n        // if statements\n        var j = 10;\n        if (j == 10) {\n            trace(\"this is printed\");\n        } else if (j > 10) {\n            trace(\"not greater than 10, so not printed\");\n        } else {\n            trace(\"also not printed.\");\n        }\n\n        // there is also a \"ternary\" if:\n        (j == 10) ? trace(\"equals 10\") : trace(\"not equals 10\");\n\n        // Finally, there is another form of control structure that operates\n        // at compile time:  conditional compilation.\n#if neko\n        trace('hello from neko');\n#elseif js\n        trace('hello from js');\n#else\n        trace('hello from another platform!');\n#end\n\n        // The compiled code will change depending on the platform target.\n        // Since we're compiling for neko (-x or -neko), we only get the neko\n        // greeting.\n\n\n        trace(\"Looping and Iteration\");\n\n        // while loop\n        var k = 0;\n        while (k < 100) {\n            // trace(counter); // will print out numbers 0-99\n            k++;\n        }\n\n        // do-while loop\n        var l = 0;\n        do {\n            trace(\"do statement always runs at least once\");\n        } while (l > 0);\n\n        // for loop\n        // There is no c-style for loop in Haxe, because they are prone\n        // to error, and not necessary.  Instead, Haxe has a much simpler\n        // and safer version that uses Iterators (more on those later).\n        var m = [1, 2, 3];\n        for (val in m) {\n            trace(val + \" is the value for val in the m array\");\n        }\n\n        // Note that you can iterate on an index using a range\n        // (more on ranges later as well)\n        var n = ['foo', 'bar', 'baz'];\n        for (val in 0...n.length) {\n            trace(val + \" is the value for val (an index for n)\");\n        }\n\n\n        trace(\"Array Comprehensions\");\n\n        // Array comprehensions give you the ability to iterate over arrays\n        // while also creating filters and modifications.\n        var filtered_n = [for (val in n) if (val != \"foo\") val];\n        trace(filtered_n + \" is the value for filtered_n\");\n\n        var modified_n = [for (val in n) val += '!'];\n        trace(modified_n + \" is the value for modified_n\");\n\n        var filtered_and_modified_n\n            = [for (val in n) if (val != \"foo\") val += \"!\"];\n        trace(filtered_and_modified_n\n                + \" is the value for filtered_and_modified_n\");\n\n\n        //////////////////////////////////////////////////////////////////\n        // Switch Statements (Value Type)\n        //////////////////////////////////////////////////////////////////\n        trace(\"***SWITCH STATEMENTS (VALUE TYPES)***\");\n\n        /*\n           Switch statements in Haxe are very powerful.  In addition to working\n           on basic values like strings and ints, they can also work on the\n           generalized algebraic data types in enums (more on enums later).\n           Here are some basic value examples for now:\n         */\n        var my_dog_name = \"fido\";\n        var favorite_thing  = \"\";\n        switch (my_dog_name) {\n            case \"fido\" : favorite_thing = \"bone\";\n            case \"rex\"  : favorite_thing = \"shoe\";\n            case \"spot\" : favorite_thing = \"tennis ball\";\n            default     : favorite_thing = \"some unknown treat\";\n            // same as default:\n            // case _   : favorite_thing = \"some unknown treat\";\n        }\n        // The \"_\" case above is a \"wildcard\" value that will match anything.\n\n        trace(\"My dog's name is \" + my_dog_name\n                + \", and his favorite thing is a: \"\n                + favorite_thing);\n\n\n        //////////////////////////////////////////////////////////////////\n        // Expression Statements\n        //////////////////////////////////////////////////////////////////\n        trace(\"***EXPRESSION STATEMENTS***\");\n\n        // Haxe control statements are very powerful because every statement\n        // is also an expression, consider:\n\n        // if statements\n        var k = if (true) 10 else 20;\n\n        trace(\"k equals \", k); // outputs 10\n\n        var other_favorite_thing = switch (my_dog_name) {\n            case \"fido\" : \"teddy\";\n            case \"rex\"  : \"stick\";\n            case \"spot\" : \"football\";\n            default     : \"some unknown treat\";\n        }\n\n        trace(\"My dog's name is \" + my_dog_name\n                + \", and his other favorite thing is a: \"\n                + other_favorite_thing);\n\n\n        //////////////////////////////////////////////////////////////////\n        // Converting Value Types\n        //////////////////////////////////////////////////////////////////\n        trace(\"***CONVERTING VALUE TYPES***\");\n\n        // You can convert strings to ints fairly easily.\n\n        // string to integer\n        Std.parseInt(\"0\");     // returns 0\n        Std.parseFloat(\"0.4\"); // returns 0.4\n\n        // integer to string\n        Std.string(0); // returns \"0\"\n        // concatenation with strings will auto-convert to string.\n        0 + \"\";    // returns \"0\"\n        true + \"\"; // returns \"true\"\n        // See documentation for parsing in Std for more details.\n\n\n        //////////////////////////////////////////////////////////////////\n        // Dealing with Types\n        //////////////////////////////////////////////////////////////////\n\n        /*\n           As mentioned before, Haxe is a statically typed language.  All in\n           all, static typing is a wonderful thing.  It enables\n           precise autocompletions, and can be used to thoroughly check the\n           correctness of a program.  Plus, the Haxe compiler is super fast.\n\n           *HOWEVER*, there are times when you just wish the compiler would\n           let something slide, and not throw a type error in a given case.\n\n           To do this, Haxe has two separate keywords.  The first is the\n           \"Dynamic\" type:\n         */\n        var dyn: Dynamic = \"any type of variable, such as this string\";\n\n        /*\n           All that you know for certain with a Dynamic variable is that the\n           compiler will no longer worry about what type it is. It is like a\n           wildcard variable:  You can pass it instead of any variable type,\n           and you can assign any variable type you want.\n\n           The other more extreme option is the \"untyped\" keyword:\n         */\n        untyped {\n            var x:Int = 'foo'; // This can't be right!\n            var y:String = 4;  // Madness!\n        }\n\n        /*\n           The untyped keyword operates on entire *blocks* of code, skipping\n           any type checks that might be otherwise required. This keyword should\n           be used very sparingly, such as in limited conditionally-compiled\n           situations where type checking is a hindrance.\n\n           In general, skipping type checks is *not* recommended.  Use the\n           enum, inheritance, or structural type models in order to help ensure\n           the correctness of your program.  Only when you're certain that none\n           of the type models work should you resort to \"Dynamic\" or \"untyped\".\n         */\n\n\n        //////////////////////////////////////////////////////////////////\n        // Basic Object Oriented Programming\n        //////////////////////////////////////////////////////////////////\n        trace(\"***BASIC OBJECT ORIENTED PROGRAMMING***\");\n\n        // Create an instance of FooClass.  The classes for this are at the\n        // end of the file.\n        var foo_instance = new FooClass(3);\n\n        // read the public variable normally\n        trace(foo_instance.public_any\n                + \" is the value for foo_instance.public_any\");\n\n        // we can read this variable\n        trace(foo_instance.public_read\n                + \" is the value for foo_instance.public_read\");\n        // but not write it; this will throw an error if uncommented:\n        // foo_instance.public_read = 4;\n        // trace(foo_instance.public_write); // as will this.\n\n        // Calls the toString method:\n        trace(foo_instance + \" is the value for foo_instance\");\n        // same thing:\n        trace(foo_instance.toString()\n                + \" is the value for foo_instance.toString()\");\n\n        // The foo_instance has the \"FooClass\" type, while acceptBarInstance\n        // has the BarClass type.  However, since FooClass extends BarClass, it\n        // is accepted.\n        BarClass.acceptBarInstance(foo_instance);\n\n        // The classes below have some more advanced examples, the \"example()\"\n        // method will just run them here.\n        SimpleEnumTest.example();\n        ComplexEnumTest.example();\n        TypedefsAndStructuralTypes.example();\n        UsingExample.example();\n    }\n}\n\n// This is the \"child class\" of the main LearnHaxe3 Class.\nclass FooClass extends BarClass implements BarInterface {\n    public var public_any:Int; // public variables are accessible anywhere\n    public var public_read (default, null): Int; // enable only public read\n    public var public_write (null, default): Int; // or only public write\n    // Use this style to enable getters/setters:\n    public var property (get, set): Int;\n\n    // private variables are not available outside the class.\n    // see @:allow for ways around this.\n    var _private:Int; // variables are private if they are not marked public\n\n    // a public constructor\n    public function new(arg:Int) {\n        // call the constructor of the parent object, since we extended BarClass:\n        super();\n\n        this.public_any = 0;\n        this._private = arg;\n    }\n\n    // getter for _private\n    function get_property() : Int {\n        return _private;\n    }\n\n    // setter for _private\n    function set_property(val:Int) : Int {\n        _private = val;\n        return val;\n    }\n\n    // Special function that is called whenever an instance is cast to a string.\n    public function toString() {\n        return _private + \" with toString() method!\";\n    }\n\n    // this class needs to have this function defined, since it implements\n    // the BarInterface interface.\n    public function baseFunction(x: Int) : String {\n        // convert the int to string automatically\n        return x + \" was passed into baseFunction!\";\n    }\n}\n\n// A simple class to extend.\nclass BarClass {\n    var base_variable:Int;\n    public function new() {\n        base_variable = 4;\n    }\n    public static function acceptBarInstance(b:BarClass) {}\n}\n\n// A simple interface to implement\ninterface BarInterface {\n    public function baseFunction(x:Int):String;\n}\n\n\n//////////////////////////////////////////////////////////////////\n// Enums and Switch Statements\n//////////////////////////////////////////////////////////////////\n\n// Enums in Haxe are very powerful.  In their simplest form, enums\n// are a type with a limited number of states:\nenum SimpleEnum {\n    Foo;\n    Bar;\n    Baz;\n}\n\n//   Here's a class that uses it:\nclass SimpleEnumTest {\n    public static function example() {\n        // You can specify the \"full\" name,\n        var e_explicit:SimpleEnum = SimpleEnum.Foo;\n        var e = Foo; // but inference will work as well.\n        switch (e) {\n            case Foo: trace(\"e was Foo\");\n            case Bar: trace(\"e was Bar\");\n            case Baz: trace(\"e was Baz\"); // comment this line to throw an error.\n        }\n\n        /*\n           This doesn't seem so different from simple value switches on strings.\n           However, if we don't include *all* of the states, the compiler will\n           complain.  You can try it by commenting out a line above.\n\n           You can also specify a default for enum switches as well:\n         */\n        switch (e) {\n            case Foo: trace(\"e was Foo again\");\n            default : trace(\"default works here too\");\n        }\n    }\n}\n\n// Enums go much further than simple states, we can also enumerate\n// *constructors*, but we'll need a more complex enum example.\nenum ComplexEnum {\n    IntEnum(i:Int);\n    MultiEnum(i:Int, j:String, k:Float);\n    SimpleEnumEnum(s:SimpleEnum);\n    ComplexEnumEnum(c:ComplexEnum);\n}\n// Note: The enum above can include *other* enums as well, including itself!\n// Note: This is what's called *Algebraic data type* in some other languages.\n\nclass ComplexEnumTest {\n    public static function example() {\n        var e1:ComplexEnum = IntEnum(4); // specifying the enum parameter\n        // Now we can switch on the enum, as well as extract any parameters\n        // it might have had.\n        switch (e1) {\n            case IntEnum(x) : trace('$x was the parameter passed to e1');\n            default: trace(\"Shouldn't be printed\");\n        }\n\n        // another parameter here that is itself an enum... an enum enum?\n        var e2 = SimpleEnumEnum(Foo);\n        switch (e2){\n            case SimpleEnumEnum(s): trace('$s was the parameter passed to e2');\n            default: trace(\"Shouldn't be printed\");\n        }\n\n        // enums all the way down\n        var e3 = ComplexEnumEnum(ComplexEnumEnum(MultiEnum(4, 'hi', 4.3)));\n        switch (e3) {\n            // You can look for certain nested enums by specifying them\n            //  explicitly:\n            case ComplexEnumEnum(ComplexEnumEnum(MultiEnum(i,j,k))) : {\n                trace('$i, $j, and $k were passed into this nested monster');\n            }\n            default: trace(\"Shouldn't be printed\");\n        }\n        // Check out \"generalized algebraic data types\" (GADT) for more details\n        // on why these are so great.\n    }\n}\n\nclass TypedefsAndStructuralTypes {\n    public static function example() {\n        // Here we're going to use typedef types, instead of base types.\n        // At the top we've declared the type \"FooString\" to mean a \"String\" type.\n        var t1:FooString = \"some string\";\n\n        // We can use typedefs for \"structural types\" as well.  These types are\n        // defined by their field structure, not by class inheritance.  Here's\n        // an anonymous object with a String field named \"foo\":\n        var anon_obj = { foo: 'hi' };\n\n        /*\n           The anon_obj variable doesn't have a type declared, and is an\n           anonymous object according to the compiler.  However, remember back at\n           the top where we declared the FooObj typedef?  Since anon_obj matches\n           that structure, we can use it anywhere that a \"FooObject\" type is\n           expected.\n         */\n        var f = function(fo:FooObject) {\n            trace('$fo was passed in to this function');\n        }\n        f(anon_obj); // call the FooObject signature function with anon_obj.\n\n        /*\n           Note that typedefs can have optional fields as well, marked with \"?\"\n\n           typedef OptionalFooObj = {\n                ?optionalString: String,\n                requiredInt: Int\n           }\n\n           Typedefs work well with conditional compilation.  For instance,\n           we could have included this at the top of the file:\n\n#if( js )\n        typedef Surface = js.html.CanvasRenderingContext2D;\n#elseif( nme )\n        typedef Surface = nme.display.Graphics;\n#elseif( !flash9 )\n        typedef Surface = flash8.MovieClip;\n#elseif( java )\n        typedef Surface = java.awt.geom.GeneralPath;\n#end\n\n           That would give us a single \"Surface\" type to work with across\n           all of those platforms.\n         */\n    }\n}\n\nclass UsingExample {\n    public static function example() {\n        /*\n           The \"using\" import keyword is a special type of class import that\n           alters the behavior of any static methods in the class.\n\n           In this file, we've applied \"using\" to \"StringTools\", which contains\n           a number of static methods for dealing with String types.\n         */\n        trace(StringTools.endsWith(\"foobar\", \"bar\") + \" should be true!\");\n\n        /*\n           With a \"using\" import, the first argument type is extended with the\n           method.  What does that mean?  Well, since \"endsWith\" has a first\n           argument type of \"String\", that means all String types now have the\n           \"endsWith\" method:\n         */\n        trace(\"foobar\".endsWith(\"bar\") + \" should be true!\");\n\n        /*\n           This technique enables a good deal of expression for certain types,\n           while limiting the scope of modifications to a single file.\n\n           Note that the String instance is *not* modified in the run time.\n           The newly attached method is not really part of the attached\n           instance, and the compiler still generates code equivalent to a\n           static method.\n         */\n    }\n}\n```\n\nWe're still only scratching the surface here of what Haxe can do.  For a formal\noverview of all Haxe features, see the [manual](https://haxe.org/manual) and\nthe [API docs](https://api.haxe.org/). For a comprehensive directory of available\nthird-party Haxe libraries, see [Haxelib](https://lib.haxe.org/).\n\nFor more advanced topics, consider checking out:\n\n* [Abstract types](https://haxe.org/manual/types-abstract.html)\n* [Macros](https://haxe.org/manual/macro.html)\n* [Compiler Features](https://haxe.org/manual/cr-features.html)\n\n\nFinally, please join us on [the Haxe forum](https://community.haxe.org/),\non IRC [#haxe on\nfreenode](http://webchat.freenode.net/), or on the\n[Haxe Gitter chat](https://gitter.im/HaxeFoundation/haxe).\n"
        },
        {
          "name": "hcl.md",
          "type": "blob",
          "size": 10.7216796875,
          "content": "---\ncategory: tool\nname: HCL\ncontributors:\n    - [\"Romans Malinovskis\" , \"http://github.com/romaninsh\"]\nfilename: terraform.txt\n---\n## Introduction\n\nHCL (Hashicorp Configuration Language) is a high-level configuration language used in tools from\nHashicorp (such as Terraform). HCL/Terraform is widely used in provisioning cloud infastructure and\nconfiguring platforms/services through APIs. This document focuses on HCL 0.13 syntax.\n\nHCL is a declarative language and Terraform will consume all `*.tf` files in the current folder, so code\nplacement and sequence has no significance. Sub-folders can be consumed through modules.\n\nThis guide is focused on HCL specifics, you should already be familiar with what Terraform is.\n\n```terraform\n// Top-level HCL file will interactively ask user values for the variables\n// which do not have a default value\nvariable \"ready\" {\n  description = \"Ready to learn?\"\n  type = bool\n  // default = true\n}\n\n// Module block consults a specified folder for *.tf files, would\n// effectively prefix all resources IDs with \"module.learn-basics.\"\nmodule \"learn-basics\" {\n  source = \"./learn-basics\"\n  ready_to_learn = var.ready\n}\n\noutput \"knowledge\" {\n  value = module.learn-basics.knowledge\n}\n```\n\n## learn-basics\n\n```terraform\n// Variables are not automatically passed into modules\n// and can be typeless.\nvariable \"ready\" {\n}\n\n// It is good practice to define a type though. There are 3 primitive types -\n// 3 collection types and 2 structural types. Structural types define\n// types recursively\nvariable \"structural-types\" {\n  type = object({\n    object: object({\n      can-be-nested: bool\n    }),\n    tuple: tuple([int, string])\n  })\n\n  default = {\n    object = { can-be-nested: true }\n    tuple = [3, \"cm\"]\n  }\n}\n\n// Collection types may specify a type, but can also be \"any\".\nvariable \"list\" {\n  type: list(string)\n  default = [\"red\", \"green\", \"blue\"]\n}\n\nvariable \"map\" {\n  type: map(any)\n  default = {\n    red = \"#FF0000\"\n    \"green\" = \"#00FF00\"\n  }\n}\n\nvariable \"favourites\" {\n  type: set\n  default = [\"red\", \"blue\"]\n}\n\n// When the type is not specified or is a mix of scalars\n// they will be converted to strings.\n\n// Use modern IDEs for type completion features. It does not matter\n// in which file and in which order you define a variable, it becomes\n// accessible from anywhere.\n\n// Default values for variables may not use expressions, but you can\n// use locals for that. You don't specify types for locals. With locals\n// you can create intermediate products from other variables, modules,\n// and functions.\n\nlocals {\n  ready = var.ready ? \"yes\": \"no\"\n\n  yaml = yamldecode(file(\"${path.module}/file-in-current-folder.yaml\"))\n}\n\n// 'locals' blocks can be defined multiple times, but all variables,\n// resources and local names should be unique\n\nlocals {\n  set = toset(var.map)\n}\n\nmodule \"more-resources\" {\n  source = \"../more-learning\"\n  yaml-data = local.yaml\n}\n\n// Modules can declare outputs, that can be optionally referenced\n// (see above), typically outputs appear at the bottom of the file or\n// in \"outputs.tf\".\noutput \"knowledge\" {\n  value = \"types so far, more to come\"\n}\n```\n\nTerraform exists for managing cloud \"resources\". A resource could be anything as long as it\ncan be created and destroyed through an API call. (compute instance, distribution,\nDNS record, S3 bucket, SSL certificate or permission grant). Terraform relies on \"providers\"\nfor implementing specific vendor APIs. For example the \"aws\" provider enables use of resources\nfor managing AWS cloud resources.\n\nWhen `terraform` is invoked (`terraform apply`) it will validate code, create all resources\nin memory, load their existing state from a file (state file), refresh against the current\ncloud APIs and then calculate the differences. Based on the differences, Terraform proposes\na \"plan\" - series of create, modify or delete actions to bring your infrastructrue in\nalignment with an HCL definition.\n\nTerraform will also automatically calculate dependencies between resources and will maintain\nthe correct create / destroy order. Failure during execution allows you to retry the entire\nprocess, which will usually pick off where things finished.\n\n## more-learning\n\nTime to introduce resources.\n\n```terraform\nvariable \"yaml-data\" {\n\n  // config is sourced from a .yaml file, so technically it is a\n  // map(any), but we can narrow down type like this:\n  type = map(string)\n}\n\n// You do not need to explicitly define providers, they all have reasonable\n// defaults with environment variables. Using a resource that relies on a\n// provider will also transparently initialize it (when you invoke terraform init)\nresource \"aws_s3_bucket\" \"bucket\" {\n  bucket = \"abc\"\n}\n\n// You can also create provider aliases\nprovider \"aws\" {\n  alias = \"as-role\"\n  assume_role {\n    role_arn = \"..\"\n  }\n}\n\n// then use them to create resources\nresource \"aws_s3_bucket_object\" \"test-file\" {\n\n  // all resources have attributes that can be referenced. Some of those\n  // will be available right away (like bucket) and others may only\n  // become available after the plan begins executing. The test-file resource\n  // will be created only after aws_s3_bucket.bucket finishes being created\n\n  // depends_on = aws_s3_bucket.bucket\n  bucket = aws_s3_bucket.bucket.bucket\n  key = \"index.html\"\n  content = file(\"${path.module}/index.html\")\n\n  // you can also manually specify provider alias\n  provider = aws.as-role\n}\n\n// Each resource will receive an ID in state, like \"aws_s3_bucket.bucket\".\n// When resources are created inside a module, their state ID is prepended\n// with module.<module-name>\n\nmodule \"learn-each\" {\n  source = \"../learn-each\"\n}\n\n// Nesting modules like this may not be the best practice, and it's only\n// used here for illustration purposes\n```\n\n## learn-each\n\nTerraform offers some great features for creating series of objects:\n\n```terraform\nlocals {\n  list = [\"red\", \"green\", \"blue\"]\n}\nresource \"aws_s3_bucket\" \"badly-coloured-bucket\" {\n  count = count(local.list)\n  bucket_prefix = \"${local.list[count.index]}-\"\n}\n// will create 3 buckets, prefixed with \"red-\", etc. and followed by\n// a unique identifier. Some resources will automatically generate\n// a random name if not specified. The actual name of the resource\n// (or bucket in this example) can be referenced as attributes\n\noutput \"red-bucket-name\" {\n  value = aws_s3_bucket.badly-coloured-bucket[0].bucket\n}\n\n// note that bucket resource ID will be \"aws_s3_bucket.badly-coloured-bucket[0]\"\n// through to 2, because they are list index elements. If you remove \"red\" from\n// the list, however, it will re-create all the buckets as they would now\n// have new IDs. A better way is to use for_each\n\nresource \"aws_s3_bucket\" \"coloured-bucket\" {\n  // for_each only supports maps and sets\n  for_each = toset(local.list)\n  bucket_prefix = \"${each.value}-\"\n}\n\n// the name for this resource would be aws_s3_bucket.coloured-bucket[red]\n\noutput \"red-bucket-name2\" {\n  value = aws_s3_bucket.badly-coloured-bucket[\"red\"].bucket\n}\n\noutput \"all-bucket-names\" {\n\n  // returns a list containing bucket names - using a \"splat expression\"\n  value = aws_s3_bucket.coloured-bucket[*].bucket\n}\n\n// there are other splat expressions:\noutput \"all-bucket-names2\" {\n  value = [for b in aws_s3_bucket.coloured-bucket: b.bucket]\n}\n// can also include a filter\noutput \"filtered-bucket-names\" {\n  value = [for b in aws_s3_bucket.coloured-bucket:\n    b.bucket if length(b.bucket) < 10 ]\n}\n\n// here are some ways to generate maps {red: \"red-123123..\"}\noutput \"bucket-map\" {\n  value = {\n    for b in aws_s3_bucket.coloured-bucket:\n       trimsuffix(b.bucket_prefix, '-')\n         => b.bucket\n   }\n}\n\n// as of Terraform 0.13 it is now also possible to use count/each for modules\n\nvariable \"learn-functions\" {\n  type = bool\n  default = true\n}\n\nmodule \"learn-functions\" {\n  count = var.learn-functions ? 1: 0\n  source = \"../learn-functions\"\n}\n```\n\nThis is now popular syntax that works in Terraform 0.13 that allows including modules conditionally.\n\n## learn-functions\n\nTerraform does not allow you to define your own functions, but there's an extensive list of built-in functions\n\n```terraform\nlocals {\n  list = [\"one\", \"two\", \"three\"]\n\n  upper_list = [for x in local.list : upper(x) ] // \"ONE\", \"TWO\", \"THREE\"\n\n  map = {for x in local.list : x => upper(x) } // \"one\":\"ONE\", \"two\":\"TWO\", \"three\":\"THREE\"\n\n  filtered_list = [for k, v in local.map : substr(v, 0, 2) if k != \"two\" ] // \"ON\", \"TH\"\n\n  prefixed_list = [for v in local.filtered_list : \"pre-${v}\" ] // \"pre-ON\", \"pre-TH\"\n\n  joined_list = join(local.upper_list,local. filtered_list) // \"ONE\", \"TWO\", \"THREE\", \"pre-ON\", \"pre-TH\"\n\n  // Set is very similar to List, but element order is irrelevant\n  joined_set = toset(local.joined_list) // \"ONE\", \"TWO\", \"THREE\", \"pre-ON\", \"pre-TH\"\n\n  map_again = map(slice(local.joined_list, 0, 4)) // \"ONE\":\"TWO\", \"THREE\":\"pre-ON\"\n}\n\n// Usually list manipulation can be useful either for a resource with for_each or\n// to specify a dynamic block for a resource. This creates a bucket with some tags:\n\nresource \"aws_s3_bucket\" \"bucket\" {\n  name = \"test-bucket\"\n  tags = local.map_again\n}\n\n// this is identical to:\n// resource \"aws_s3_bucket\" \"bucket\" {\n//   name = \"test-bucket\"\n//   tags = {\n//     ONE = \"TWO\"\n//     THREE = \"pre-ON\"\n//   }\n// }\n\n// Some resources also contain dynamic blocks. The next example uses a \"data\" block\n// to look up 3 buckets (red, green and blue), then creates a policy that contains\n// read-only access to the red and green buckets and full access to the blue bucket.\n\nlocals {\n  buckets = {\n    red = \"read-only\"\n    green = \"read-only\"\n    blue = \"full\"\n  }\n  // we could load buckets from a file:\n  // bucket = file('bucket.json')\n\n  actions = {\n    \"read-only\" = [\"s3:GetObject\", \"s3:GetObjectVersion\"],\n    \"full\" = [\"s3:GetObject\", \"s3:GetObjectVersion\", \"s3:PutObject\", \"s3:PutObjectVersion\"]\n  }\n  // we will look up actions, so that we don't have to repeat actions\n}\n\n// use a function to convert map keys into set\ndata \"aws_s3_bucket\" \"bucket\" {\n  for_each = toset(keys(local.buckets))\n  bucket = each.value\n}\n\n// create json for our policy\ndata \"aws_iam_policy_document\" \"role_policy\" {\n  statement {\n    effect = \"Allow\"\n    actions = [\n      \"ec2:*\",\n    ]\n    resources = [\"*\"]\n  }\n\n  dynamic \"statement\" {\n    for_each = local.buckets\n    content {\n      effect = \"Allow\"\n      actions = lookup(local.actions, statement.value, null)\n      resources = [data.aws_s3_bucket.bucket[statement.key]]\n    }\n  }\n}\n\n// and this actually creates the AWS policy with permissions to all buckets\nresource \"aws_iam_policy\" \"policy\" {\n  policy = data.aws_iam_policy_document.role_policy.json\n}\n```\n\n## Additional Resources\n\n- [Terraform tips & tricks](https://blog.gruntwork.io/terraform-tips-tricks-loops-if-statements-and-gotchas-f739bbae55f9)\n- [Building Dynamic Outputs with Terraform Expressions and Functions](https://www.thegreatcodeadventure.com/building-dynamic-outputs-with-terraform-for_each-for-and-zipmap/)\n"
        },
        {
          "name": "hdl.md",
          "type": "blob",
          "size": 8.263671875,
          "content": "---\nname: HDL\nfilename: learnhdl.hdl\ncontributors:\n  - [\"Jack Smith\", \"https://github.com/JSmithTech2019\"]\n---\n\nHDL (hardware description language) is a specialized language used to describe the structure/behavior of real world circuits. \n\nIt is used by circuit designers to simulate circuits and logic prior to wiring and fabricating a hardware circuit.\n\nHDL allows circuit designers to simulate circuits at a high level without being connected to specific components.\n\n## Basic building blocks & introduction to the language---\nThis programming language is built by simulating hardware chips and wiring. Normal programming functions are replaced with specialized chips that are added to the current wiring design. Every base chip must be written as it's own file and imported to be used in the current chip, though they may be reused as often as desired.\n\n```verilog\n// Single line comments start with two forward slashes.\n\n/*\n * Multiline comments can be written using '/*' and 'star/'.\n * These are often used as comments.\n *\n * Note that they cannot be nested and will end at the first 'star/'.\n */\n\n////////////////////////////////////////////////////\n// 1. Chips & Components\n////////////////////////////////////////////////////\n/* \n * Unlike other languages HDL creates an individual chip (function) per file\n * These are defined with a name, input arguments, output arguments\n * and finally the parts/logic of that specific chip.\n */\n\n// Note CHIP is capitalized, the chip name does not need to be.\nCHIP Ex {\n    IN  a,  // Single bit (0 or 1) variable.\n        c[16];  // 16 bit variable bus of single bit values.\n\n    OUT out[16],  // 16 bit variable bus output.\n        carry;  // Single bit output variable\n\n    PARTS:\n    // The functional components of the chip.\n}\n\n// Lines are ended with semicolons but can be continued using commas. The\n// whitespace is ignored.\n\n\n\n////////////////////////////////////////////////////\n// 2. Inputs, Outputs, & Variables\n////////////////////////////////////////////////////\n/*\n * Variables and IO are treated as pins/wires and can carry a single bit\n * of data (0 or 1).\n */\n\n// Hardware works on low level 0's and 1's, in order to use a constant\n// high or low we use the terms true and false.\na=false; // This is a 0 value.\nb=true; // This is a 1 value.\n\n// Inputs and outputs can be defined as single bits\nIN a, b; // Creates two single bit inputs\n\n// They can also be defined as busses act as arrays where each\n// index can contain a single bit value.\nOUT c[16]; // Creates a 16 bit output array.\n\n// Bussed values can be accessed using brackets\na[0] // The first indexed value in the bus a.\na[0..3] // The first 4 values in the a bus.\n// Values can also be passed in entirety. For example if the function \n// foo() takes an 8 bit input bus and outputs a 2 bit bus:\nfoo(in=a[0..7], out=c); // C is now a 2 bit internal bus\n\n\n// Note that internally defined busses cannot be subbussed!\n// To access these elements, output or input them separately:\nfoo(in[0]=false, in[1..7]=a[0..6], out[0]=out1, out[1]=out2);\n// out1 and out2 can then be passed into other circuits within the design.\n\n\n\n////////////////////////////////////////////////////\n// Combining Subsystems\n////////////////////////////////////////////////////\n/*\n * HDL relies heavily on using smaller \"building block\" chips to then be\n * added into larger and more complex designs. Creating the smaller components\n * and then adding them to the larger circuit allows for fewer lines of code\n * as well as reduction in total rewriting of code.\n */\n\n// We are writing the function AND that checks if inputs I and K are both one.\n// To implement this chip we will use the built in NAND gate as well as design\n// a custom NOT gate to invert a single input.\n\n// First we construct the Negation (not) chip. We will use the logically\n// complete gate NAND that is built in for this task.\nCHIP Not {\n    IN i; // Not gates only take one single bit input.\n    OUT o; // The negated value of a.\n\n    PARTS:\n    // Add the input to the built in chip, which then sends output to the NOT\n    // output. This effectively negates the given value.\n    Nand(a=i, b=i, out=o);\n}\n\n// By using the built in NAND gate we were able to construct a NOT gate\n// that works like a real world hardware logic chip. Now we must construct\n// the AND gate using these two gate primitives.\n\n// We define a two input, single output AND gate:\nCHIP And {\n    IN i, k; // Two single bit inputs.\n    OUT o; // One single bit output.\n\n    PARTS:\n    // Insert I and K into the nand gate and store the output in an internal\n    // wire called notOut.\n    Nand(a=i,b=k,out=notOut);\n\n    // Use the not gate we constructed to invert notOut and send to the AND\n    // output.\n    Not(in=notOut,out=o);\n}\n\n// Easy! Now we can use Nand, And, and Not gates in higher level circuits.\n// Many of these low level components are built in to HDL but any chip can\n// be written as a submodule and used in larger designs.\n```\n\n## Test Files\nWhen working with the nand2tetris hardware simulator chips written using HDL will\nthen be processed against test and comparison files to test functionality of the\nsimulated chip versus the expected output. To do this a test file will be loaded\ninto the hardware simulator and run against the simulated hardware.\n\n```verilog\n// First the chip the test file is written for is loaded\nload <chip name>.hdl\n\n// We set the output file for the simulated chip output as well as the comparison\n// file that it will be tested against. We also specify what the output is\n// expected to look like. In this case there will be two output columns, each\n// will be buffered by a single space on either side and 4 binary values in\n// the center of each column.\noutput-file <chip name>.out,\ncompare-to <chip name>.cmp,\noutput-list in%B1.4.1 out%B1.4.1;\n\n// Then we set initial values for inputs to the chip. For example\nset enable1 1, // set input enable1 to 1\nset enable2 0, // set input enable2 to 0\n\n// The clock is also controlled in the test file using tick and tock. Tick is a\n// positive pulse and tock takes the clock back to 0. Clock cycles can be run\n// multiple times in a row with no other changes to inputs or outputs.\ntick,\ntock,\n\n// Finally we output the first expected value (from the test file) which is then\n// compared with the first line of real output from our HDL circuit. This output\n// can be viewed in the <chip name>.out file.\noutput;\n\n// An example of <chip name>, a chip that takes in a 4 bit value as input and\n// adds 1 to that value could have the following as test code:\n\n// Set the input value to 0000, clock pulse, compare output from cmp file to actual out.\nset in %B0000,\ntick,\ntock,\noutput;\n\n// Set the input value to 0110, clock pulse, compare output from cmp file to actual out.\nset in %B0110,\ntick,\ntock,\noutput;\n\n// The expected output for case 1 should be 0001 and case 2 expects 0111, lets\n// learn a little more about comparison files before finalizing our lesson.\n```\n\n## Comparison Files\nNow lets take a look at comparison files, the files that hold what the test file\ncompares with the actual output of an HDL chip in the hardware simulator!\n\n```verilog\n// Like the <chip name> example above, the structure of the comparison file\n// would look something like this\n|  in  | out  |\n| 0000 | 0001 |\n| 0110 | 0111 |\n\n// Notice how the input values specified in the test case are equivalent to the\n// `in` column of the comparison file, and that the space buffer is 1 on either side.\n\n// If the output from the HDL code we not this, such as the output below, then the\n// test will fail and the user will know that the simulated chip is not correctly designed.\n|  in  | out  |\n| 0000 | 0001 |\n| 0110 | 0110 | // Error! The chip did not add 1 here, something went wrong.\n```\n\nThis is incredibly useful as it allows designers to simulate chip logic prior to\nfabricating real life hardware and identify problems in their designs. Be warned that\nerrors in the test or comparison files can lead to both false positives and also\nthe more damaging false negatives so ensure that the logic is sound behind the test\ncreation.\n\n\nGood luck and happy coding!\n\n## Resources\n\n* [From Nand To Tetris](https://www.nand2tetris.org)\n\n## Further Reading\n\n* [Hardware Description Language](https://en.wikipedia.org/wiki/Hardware_description_language)\n\n* [HDL Programming Fundamentals](https://www.electronicdesign.com/products/hdl-programming-fundamentals)\n"
        },
        {
          "name": "he",
          "type": "tree",
          "content": null
        },
        {
          "name": "hi",
          "type": "tree",
          "content": null
        },
        {
          "name": "hjson.md",
          "type": "blob",
          "size": 2.50390625,
          "content": "---\nname: Hjson\nfilename: learnhjson.hjson\ncontributors:\n  - [\"MrTeferi\", \"https://github.com/MrTeferi\"]\n---\n\nHjson is an attempt to make [JSON](../json/) more human readable.\n\nHjson is a syntax extension to JSON. \nIt's NOT a proposal to replace JSON or to incorporate it into the JSON spec itself. \nIt's intended to be used like a user interface for humans, \nto read and edit before passing the JSON data to the machine.\n\nLet's take a look at examples to see the key syntax differences!\n\n```\n{\n    # Comments are totally supported!\n    \n    // With forward slashes too!\n    \n    /*\n        Even block style comments, neat!\n    /*\n    \n    # Strings do not require quotes!\n    # Just keep it to a single line\n    human: readable\n    quotes: \"are fine too\"\n    \n    # Notice that commas are also not required!\n    # If using commas, strings DO require quotes!\n    object: {\n        name: Hjson\n        properties: [\n            readable\n            exciting\n            fun\n        ]\n        with_commas: [\n            \"quoted\",\n            \"quoty\",\n            \"quote\"\n        ]\n        details: [\"this\", \"is\", \"fine\", \"too\"]\n    }\n    \n    # Multiline quotes with proper whitespace handling are supported!\n    diary:\n        '''\n        I wish JSON was more human readable.\n        If only there was a JSON for my needs!\n        Oh wait.. there is! It's called Hjson.\n        '''\n    \n    # Backslashes are interpreted as an escape character ONLY in quoted strings\n    slash: This will not have a new line\\n\n    slash-quoted: \"This will definitely have a new line\\n\"\n\n    # Make sure to use quotes when mixing whitespace with important punctuation\n    example1: \"If, you're, going, to, comma in a string, use, quotes!\"\n    example2: \"Also if you want to use {} or [] or any JSON relevant punctuation!\"\n    example3: [because, this, is, totally, BROKEN!]\n    example4: this is technically OK though: {}[],:\n    \n    # Enjoy working with Hjson!\n    party-time: {\n        Hjson-lovers: [\n            me\n            my mom\n            \"my dad\"\n        ]\n        Hjson-power-level: 9000\n        supported: {\n            python: yes\n            java: yes\n            javascript: yes\n            c++: yes\n            Go: yes\n            C#: yes\n            Rust: yes\n        }\n        partial-support: [\"C\", \"Kotlin\", \"Ruby\", \"Rust\"]\n    }\n    \n}\n```\n\n## Further Reading\n\n* [Hjson.github.io](https://hjson.github.io/) Main Hjson site including editor support, how-to, etc.\n* [Hjson Packages](https://github.com/hjson/) Various Hjson packages for different applications.\n"
        },
        {
          "name": "hocon.md",
          "type": "blob",
          "size": 17.3662109375,
          "content": "---\nname: HOCON\nfilename: learnhocon.conf\ncontributors:\n- [TehBrian, 'https://tehbrian.xyz']\n---\n\nHuman-Optimized Configuration Object Notation, or HOCON, is a configuration and\ndata serialization format designed to be easily editable by humans.\n\nIt's a superset of JSON, meaning that any valid JSON is valid HOCON, but it\ndiffers in being less opinionated. With its flexible yet determinable syntax,\nresulting configuration files are often less noisy than with other formats.\n\nAdditionally, its support for comments makes it better-suited for user-facing\nconfiguration than JSON.\n\n```\n// Anything after // or # is a comment. This is a comment.\n# This is also a comment.\n\n##################\n### THE BASICS ###\n##################\n\n# Everything in HOCON is either a key, a value, or a separator.\n# : and = are separators. They separate the key from the value.\nkey: value\nanother_key = another_value\n\n# You can use either separator with or without whitespace on either side.\ncolon1:value\ncolon2: value\ncolon3 : value\nequals1=value\nequals2= value\nequals3 = value\n# As you'll see, HOCON has a very nonrestrictive syntax.\n\n# HOCON isn't opinionated on how keys look.\nTHIS_IS_A_VALID_KEY: value\nthis-is-also-a-valid-key: value\nkeys can have spaces: value\nor even numbers like 12345: value\n\"you can even quote keys if you'd like!\": value\n\n# Keys are case sensitive.\nunique: value 1\nUnIqUe: value 3\nUNIQUE: value 2\n\n# A key, followed by any separator, followed by a value, is called a field.\nthis_entire_line_is: a field\n\n###################\n### VALUE TYPES ###\n###################\n\n# A value can be of type: string, number, object, array, boolean, null.\n# Simple values are values of any type except array and object.\n\n## SIMPLE VALUES ##\n\nquoted_string: \"I like quoting my strings.\"\nunquoted_string: I don't like quoting my strings.\n# Special characters that cannot be used in unquoted strings are:\n# $ \" { } [ ] : = , + # ` ^ ? ! @ * &\n# Unquoted strings do not support any kind of escaping.\n# To use one of those special characters in a string, use a quoted string.\nmultiline_string: \"\"\"This entire thing is a string!\nOne giant, multiline string.\nYou can put 'single' and \"double\" quotes without it being invalid.\"\"\"\n\nnumber: 123\nnegative: -123\nfraction: 3.1415926536\nscientific_notation: 1.2e6 // 1.2 * 10^6\n\nboolean: true # or false\nempty: null\n\n## ARRAYS ##\n\n# Arrays hold lists of values.\n\n# Values in arrays can be separated with commas..\narray: [ 1, 2, 3, 4, 5 ]\nfibonacci: [1,1,2,3,5,8,13]\nmultiples_of_5: [5, 10, 15, 20,] # Notice the trailing comma. That's allowed.\n# or newlines..\nfriends: [\n  \"Brian\"\n  \"Sophie\"\n  \"Maya\"\n  \"Sabina\"\n]\n# or both!\ningredients: [\n  \"Egg\",\n  \"Sugar\",\n  \"Oil\",\n  \"Flour\", # Trailing comma. That's allowed here too.\n]\n# Once again, HOCON has a very liberal syntax. Use whichever style you prefer.\n\nno newline before or after bracket: [\"This\"\n  \"is\"\n  \"an\"\n  \"array!\"]\n\n# Arrays can hold other arrays.\narray in array: [ [1, 2, 3], [\"a\", \"b\", \"c\"] ]\narray in array in array: [ [ [1, 2], [8, 9] ], [ [\"a\", \"b\" ], [\"y\", \"z\"] ] ]\n\n## OBJECTS ##\n\n# Objects hold fields.\n\n# Just like arrays, fields in objects can be separated with commas..\nobject: { key: value, another_key: another_value }\nserver_connection: {ip: \"127.0.0.1\", port: 80}\nfirst: {letter: a, number: 1,} # Trailing comma.\n# or newlines..\npower_grid: {\n  max_capacity: 15000\n  current_power: 1200\n}\n# or both!\nfood_colors: {\n  carrot: orange,\n  pear: green,\n  apple: red,\n  plum: purple,\n  banana: yellow, # Trailing comma. These pesky things show up everywhere!\n}\n\n# Arrays can hold objects.\ncoworkers: [\n  {\n    name: Jeff\n    age: 27\n  },\n  {\n    name: Henry\n    age: 35\n  },\n  {\n    name: Timmy\n    age: 12\n  }\n]\n\n# The field separator may be omitted if the key is followed by {\nno_separator {\n  key: value\n  speed_of_light: very fast\n  ten: 10\n\n  # Objects can hold other objects.\n  another_object {\n    twenty: 20\n    speed_of_sound: also pretty fast\n  }\n}\n\n# In fact, the entirety of any HOCON document is an actually just an object.\n# That object is called the root object. The only difference between it and any\n# other object is that the curly brackets at the top and bottom of the document\n# may be omitted.\n\n# This means that HOCON documents can be formatted in the same way that\n# regular objects can be formatted, including separating fields with commas\n# rather than with newlines.\n\n# Additionally, while the entirety of a HOCON document can be and is usually an\n# object, it can also be an array. If it is an array, the opening and closing\n# brackets at the top and bottom of the document must be explicitly written.\n\n######################\n### DUPLICATE KEYS ###\n######################\n\nis_happy: false\n# If there is a duplicate key, the new value overrides the previous value.\nis_happy: true\nonline_users: [Jacob, Mike]\n# Same with arrays.\nonline_users: [Jacob, Mike, Henry]\n\n# For objects, it's a bit different.\nmy_car: {\n  color: blue\n  speed: 9001\n  passengers: null\n\n  engine: {\n    running: true\n    temperature: 137\n  }\n}\n# If there is a duplicate key and both values are objects,\n# then the objects are merged.\nmy_car: {\n  // These fields are added to the old, previous object.\n  nickname: \"My Favorite Car\"\n  type: 2-door sedan\n\n  // Since the value of this duplicate key is NOT an object,\n  // it simply overrides the previous value.\n  speed: 60\n  // Same with arrays. They override, not merge.\n  passengers: [\"Nate\", \"Ty\"]\n\n  // This object is recursively merged with the other object.\n  engine: {\n    // These two fields are added to the previous object.\n    type: gas\n    oil_level: 10\n    // This field overrides the previous value.\n    temperature: 179\n  }\n}\n\n# Object merging is done two at a time. That is to say, the first two objects\n# merge into one, then that object merges with the next object, and so on.\n\n# Because of this, if you set a field with an object value to a non-object value\n# and then back to an object value, the new object will completely override any\n# previous value.\n\n// Null, a non-object value, overrides the object.\nmy_car: null\n\n// Then, this object overrides null.\nmy_car: {\n  nickname: \"My New Car\"\n  type: 4-door minivan\n  color: gray\n  speed: 90\n  passengers: [\"Ayden\", \"Liz\"]\n}\n\n###########################\n### VALUE CONCATENATION ###\n###########################\n\n## SIMPLE VALUE CONCATENATION ##\n\n# Simple values (all value types except array and object) separated by\n# whitespace are concatenated into a single string. The whitespace between\n# values is preserved.\nnumber_concat: 1 2 3 12.5 -3 2e5 // \"1 2 3 12.5 -3 2e5\"\nboolean_concat: true false true // \"true false true\"\nnull_concat: null null null // \"null null null\"\nmixed_concat: 1 true null // \"1 true null\"\n\n# String value concatenation can appear anywhere that a quoted string can.\nnumber_concat_in_array: [1 2, 3 4, 5 6] // [\"1 2\", \"3 4\", \"5 6\"]\n\n# In fact, unquoted strings are actually just string value concatenations.\nunquoted_string_concat: his name is jeff // \"his name is jeff\"\n\n# Going further, even keys that are unquoted strings are actually just string\n# value concatenations.\nthis is a key: value // the KEY is: \"this is a key\"\n# The following field is identical to the field above.\n\"this is a key\": value\n\n# Quoted strings can also be concatenated.\n# This will be useful later, when we cover substitutions.\nquoted_string_concat: \"her\"\" name\" \"is \"\"jenna\" // \"her name is jenna\"\n# Notice that the whitespace (or lack thereof) between values is preserved.\n\n## ARRAY CONCATENATION ##\n\n# Arrays separated by whitespace are merged into a single array.\narray_concat: [1, 2, 3] [4, 5, 6] // [1, 2, 3, 4, 5, 6]\n\n# Arrays cannot be concatenated with a non-array value.\n//array_concat: true [false] // error!\n//array_concat: 1 [2] // error!\n\n## OBJECT CONCATENATION ##\n\n# Objects separated by whitespace are merged into a single object.\n# The merge functionality is identical to that of duplicate key object merging.\nlamp: {on: true} {color: tan} // {on: true, color: tan}\n\n# Similarly to arrays, objects cannot be concatenated with a non-object value.\n//object_concat: true {on: false} // error!\n//object_concat: 1 {number: 2} // error!\n\n########################\n### PATH EXPRESSIONS ###\n########################\n\n# Path expressions are used to write out a path through the object graph.\n# Think of it as navigating through objects to a specific field.\n# Each object to traverse through is called an element, and each element is\n# separated with a period.\n\ncountry: {\n  city: {\n    neighborhood: {\n      house: {\n        name: \"My House\"\n        address: 123 Example Dr.\n      }\n    }\n  }\n}\n# The path to the address could be written as:\n# country.city.neighborhood.house.address\n# Country, city, neighborhood, house, and address are all elements.\n\n# Path expressions are used in two places: substitutions (which we'll get to\n# in just a moment), and as keys. That's right: keys can be path expressions.\nfoo: {\n  bar: {\n    baz: {\n      number: 12\n    }\n  }\n}\n# Rather than tediously specifying each object, a path expression could be used.\n# The following field represents the same object.\nfoo.bar.baz.number: 12\n\n# Fields and objects specified with path expressions are merged in the same way\n# that any object is usually merged.\nfoo.bar.baz.bool: true\n// the object foo's value is: foo { bar { baz { number: 12, bool: true } } }\n\n#####################\n### SUBSTITUTIONS ###\n#####################\n\n# Substitutions refer to a specific value from some path expression.\n# They're only allowed in values, not in keys or nested in other substitutions.\n\nme: {\n  favorite_animal: parrots\n  favorite_food: cookies\n}\n# There are two syntaxes for substitutions:\n# ${path_expression} and ${?path_expression}.\n# The latter syntax will be covered in a moment.\nmy_fav_animal: ${me.favorite_animal}\nmy_fav_food: ${me.favorite_food}\n\n# Substitutions are not parsed inside quoted strings. To get around this,\n# either use an unquoted string or value concatenation.\nanimal_announcement: My favorite animal is ${my_fav_animal}\n// \"My favorite animal is parrots\"\nfood_announcement: \"My favorite food is \"${my_fav_food}\"!\"\n// \"My favorite food is cookies!\"\n\n# Substitutions are parsed last in the document. Because of this, you can\n# reference a key that hasn't been defined yet.\ncolor_announcement: \"My favorite color is\" ${my_fav_color}\"!\"\n// \"My favorite color is blue!\"\nmy_fav_color: blue\n\n# Another effect of substitutions being parsed last is that substitutions will\n# always use the latest, as in last, value assigned in the entire document.\ncolor: green\ntheir_favorite_color: ${color} // orange\ncolor: orange\n\n# This includes merged objects.\nrandom_object: {\n  number: 12\n}\nthe_number: ${random_object.number} // 15\nrandom_object: {\n  number: 15\n}\n\n###############################\n### UNDEFINED SUBSTITUTIONS ###\n###############################\n\n# A substitution using the ${path_expression} syntax with an undefined path\n# expression, meaning a path expression that does not point to a defined value,\n# is invalid and will therefore generate an error.\n//${does.not.exist} // error!\n\n# However, an undefined substitution using the ${?path_expression} syntax\n# has different behavior depending on what it is the value of.\nrequest: {\n  # If it is the value of a field, then the field won't be created.\n  response: ${?does.not.exist} // this field does not exist\n  type: HTTP\n}\n\nrequest: {\n  # Additionally, if it would have overridden a previous value, then the\n  # previous value remains unchanged.\n  type: ${?does.not.exist} // request.type is still HTTP\n}\n\n# If it is a value in an array, then it is simply not added.\nvalues: [ 172, \"Brian\", ${?does.not.exist}, null, true, ]\n// [ 172, \"Brian\", null, true ]\n\n# If it is part of simple value concatenation, it acts as an empty string.\nfinal_string: \"String One\"${?does.not.exist}\"String Two\"\n// \"String OneString Two\"\n\n# If it is part of array concatenation, it acts as an empty array.\nfinal_array: [ 1, 2, 3 ] ${?does.not.exist} [ 7, 8, 9 ]\n// [ 1, 2, 3, 7, 8, 9 ]\n\n# If it is part of object concatenation, it acts as an empty object.\nfinal_object: { a: 1 } ${?does.not.exist} { c: 3 }\n// { a: 1, c: 3 }\n\n######################################\n### SELF-REFERENTIAL SUBSTITUTIONS ###\n######################################\n\n# Substitutions normally \"look forward\" and use the final value defined in the\n# document. However, in cases when this would create a cycle, the substitution\n# looks only backwards.\n\n# A field that contains a substitution that points to itself or points to\n# other fields that eventually point back to itself is called a\n# self-referential field.\nletters: \"a b c\" // \"a b c\"\nletters: ${letters}\" d\" // \"a b c d\"\nletters: ${letters}\" e\" // \"a b c d e\"\n\nPATH: [/bin] // [/bin]\nPATH: ${PATH} [/usr/bin] // [/bin, /usr/bin]\nPATH: ${PATH} [/usr/local/bin] // [/bin, /usr/bin, /usr/local/bin]\n\nx: \"x\" // \"x\"\ny: ${x}\"y\" // \"xy\"\nx: ${y}\"z\" // \"xyz\"\n\n##########################\n### += FIELD SEPARATOR ###\n##########################\n\n# In addition to : and =, there actually exists another separator: +=\n# A field separated with += implies self-referential array concatenation.\n# Essentially, it appends an element to a previously defined array.\n\na: [1]\nb: [1]\n# These two fields are equivalent.\na += 2 // [1, 2]\nb: ${?b} [2] // [1, 2]\n\nUSERS: [/usr/luke] // [/usr/luke]\nUSERS += /usr/devon // [/usr/luke, /usr/devon]\nUSERS += /usr/michael // [/usr/luke, /usr/devon, /usr/michael]\n\n# Since += only appends elements to a previously existing array, if the previous\n# value was not an array, an error will be generated.\nOTHER_USERS: /usr/luke\n//OTHER_USERS += /usr/devon // error!\n\n# The underlying substitution syntax used is ${?path}, not ${path}.\n# Recall that, using the ${?} syntax, an undefined substitution in array\n# concatenation acts as an empty array. Because of this, it is perfectly\n# acceptable if the field that is being set is initially undefined.\n//z: [] // not necessary\nz += 3 // [3]\nz += 4 // [3, 4]\n\nNEW_USERS += /usr/sandra // [/usr/sandra]\nNEW_USERS += /usr/kennedy // [/usr/sandra, /usr/kennedy]\nNEW_USERS += /usr/robin // [/usr/sandra, /usr/kennedy, /usr/robin]\n\n################\n### INCLUDES ###\n################\n\n# Includes allow you to \"import\" one HOCON document into another.\n\n# An include statement consists of the unquoted string \"include\" followed by\n# whitespace and then a resource name, which is one of the following:\n# - a single quoted string which is heuristically interpreted as a URL,\n#   filename, or a Java classpath resource.\n# - url(), file(), or classpath(), with the parentheses surrounding a quoted\n#   string which is either a URL, filename, or classpath resource respectively.\n# - required(), with the parentheses surrounding one of the above.\ninclude \"https://example.com/config.conf\"\ninclude \"/foo/bar/config.conf\"\ninclude \"config.conf\"\n\ninclude url(\"https://example.com/config.conf\")\ninclude file(\"/foo/bar/config.conf\")\ninclude classpath(\"config.conf\")\n\n# If the included file does not exist, it will be silently ignored and act as if\n# it were an empty object. However, if it is wrapped around required(), then\n# parsing will explicitly error if the file cannot be resolved.\n//include required(\"doesnt_exist.conf\") // error!\n//include required(url(\"https://example.com/doesnt_exist.conf\")) // error!\n//include required(file(\"doesnt_exist.conf\")) // error!\n//include required(classpath(\"doesnt_exist.conf\")) // error!\n\n# The file specified by the include statement is called the included file.\n# The file containing the include statement is called the including file.\n\n# Including a file functions as if you directly replaced the include statement,\n# wherever it may be, with the contents of the included file's root object.\n\n# An included file must have an object as its root value and not an array.\n# If the included file has an array as its root value, then it is invalid and\n# an error will be generated.\n\n# Pretend that the following is in a file called user_config.conf:\nusername: RandomUser1337\nauto_login: true\ncolor_theme: dark\nscreensaver: {\n  image: usr/images/screensaver.jpg\n  turn_on_after: 1m\n}\n\n# Then, we include that file.\ninclude file(\"user_config.conf\")\n\n# We can now reference values from that file!\npath_to_user_screensaver: ${screensaver.image} // \"usr/images/screensaver.jpg\"\ngreeting: \"Welcome, \"${username}\"!\" // \"Welcome, RandomUser1337!\"\n\n# Duplicate keys override as they normally do.\nstatus: \"Auto Login: \"${auto_login} // \"Auto Login: true\"\nauto_login: false\nstatus: \"Auto Login: \"${auto_login} // \"Auto Login: false\"\n\n# Object merging is the same as usual.\nscreensaver: {\n  // This gets added to the screensaver object.\n  enable_during_day: false\n  // This overrides the previous value.\n  turn_on_after: 30s\n}\n\n# Include statements can appear in place of a field. Anywhere that a field\n# could appear, an include statement could appear as well.\n\n# Pretend that the following is in a file called server_settings.conf:\nmax_connections: 10\nurl: example.com\nport: 80\nadmin_page: {\n  username: admin\n  password: pass12345\n}\n\n# Then, we include that file nested inside an object.\nwebsites: {\n  my_epic_website: {\n    include file(\"server_settings.conf\")\n  }\n}\n\n# Now, we can reference the contents of server_settings.conf as if they\n# had been written directly into the object my_epic_website.\nserver_port: ${websites.my_epic_website.port}\n\nthe_password: \"The password is: \"${websites.my_epic_website.admin_page.password}\n// \"The password is: pass12345\"\n\nmax_conn: \"Max Connections: \"${websites.my_epic_website.max_connections}\n// \"Max Connections: 10\"\n```\n\n### More Resources\n\n+ [Official HOCON Specification](https://github.com/lightbend/config/blob/master/HOCON.md)\n+ [HOCON Playground](https://hocon-playground.tehbrian.dev)\n"
        },
        {
          "name": "hq9+.md",
          "type": "blob",
          "size": 1.01171875,
          "content": "---\nname: HQ9+\nfilename: hq9+.txt\ncontributors:\n    - [\"Alexey Nazaroff\", \"https://github.com/rogaven\"]\n---\n\nHQ9+ is a joke programming language created by Cliff Biffle. It has only four commands and it isn't Turing-complete.\n\n```\nThere is only 4 commands, represented by next characters\nH: print \"Hello, world!\"\nQ: print the program's source code (a Quine)\n9: print the lyrics to \"99 Bottles of Beer\"\n+: add one to the accumulator (the value of the accumulator cannot be accessed)\nAny other character is ignored.\n\nOk. Let's write some program:\n  HQ9\n\nResult:\n  Hello world!\n  HQ9\n\nHQ9+ is very simple, but allows you to do some things that are very difficult\nin other languages. For example, here is a program that creates three copies of\nitself on the screen:\n  QQQ\n\nThis produces:\n  QQQ\n  QQQ\n  QQQ\n```\n\nAnd that's all. There are a lot of interpreters for HQ9+. Below you can find one of them\n\n+ [One of online interpreters](https://almnet.de/esolang/hq9plus.php)\n+ [HQ9+ official website](http://cliffle.com/esoterica/hq9plus.html)\n"
        },
        {
          "name": "hre.csv",
          "type": "blob",
          "size": 3.642578125,
          "content": "Ix,Dynasty,Name,Birth,Death,Coronation 1,Coronation 2,Ceased to be Emperor\nN/A,Carolingian,Charles I,2 April 742,28 January 814,25 December 800,N/A,28 January 814\nN/A,Carolingian,Louis I,778,20 June 840,11 September 813,5 October 816,20 June 840\nN/A,Carolingian,Lothair I,795,29 September 855,5 April 823,N/A,29 September 855\nN/A,Carolingian,Louis II,825,12 August 875,15 June 844,18 May 872,12 August 875\nN/A,Carolingian,Charles II,13 June 823,6 October 877,29 December 875,N/A,6 October 877\nN/A,Carolingian,Charles III,13 June 839,13 January 888,12 February 881,N/A,11 November 887\nN/A,Widonid,Guy III,835,12 December 894,21 February 891,N/A,12 December 894\nN/A,Widonid,Lambert I,880,15 October 898,30 April 892,N/A,15 October 898\nN/A,Carolingian,Arnulph,850,8 December 899,22 February 896,N/A,8 December 899\nN/A,Bosonid,Louis III,880,5 June 928,22 February 901,N/A,21 July 905\nN/A,Unruoching,Berengar I,845,7 April 924,December 915,N/A,7 April 924\n1,Ottonian,Otto I,23 November 912,7 May 973,2 February 962,N/A,7 May 973\n2,Ottonian,Otto II,955,7 December 983,25 December 967,N/A,7 December 983\n3,Ottonian,Otto III,980,23 January 1002,21 May 996,N/A,23 January 1002\n4,Ottonian,Henry II,6 May 973,13 July 1024,14 February 1014,N/A,13 July 1024\n5,Salian,Conrad II,990,4 June 1039,26 March 1027,N/A,4 June 1039\n6,Salian,Henry III,29 October 1017,5 October 1056,25 December 1046,N/A,5 October 1056\n7,Salian,Henry IV,11 November 1050,7 August 1106,31 March 1084,N/A,December 1105\n8,Salian,Henry V,8 November 1086,23 May 1125,13 April 1111,N/A,23 May 1125\n9,Supplinburg,Lothair III,9 June 1075,4 December 1137,4 June 1133,N/A,4 December 1137\n10,Staufen,Frederick I,1122,10 June 1190,18 June 1155,N/A,10 June 1190\n11,Staufen,Henry VI,November 1165,28 September 1197,14 April 1191,N/A,28 September 1197\n12,Welf,Otto IV,1175,19 May 1218,4 October 1209,N/A,1215\n13,Staufen,Frederick II,26 December 1194,13 December 1250,22 November 1220,N/A,13 December 1250\n14,Luxembourg,Henry VII,1275,24 August 1313,29 June 1312,N/A,24 August 1313\n15,Wittelsbach,Louis IV,1 April 1282,11 October 1347,17 January 1328,N/A,11 October 1347\n16,Luxembourg,Charles IV,14 May 1316,29 November 1378,5 April 1355,N/A,29 November 1378\n17,Luxembourg,Sigismund,14 February 1368,9 December 1437,31 May 1433,N/A,9 December 1437\n18,Habsburg,Frederick III,21 September 1415,19 August 1493,19 March 1452,N/A,19 August 1493\n19,Habsburg,Maximilian I,22 March 1459,12 January 1519,N/A,N/A,12 January 1519\n20,Habsburg,Charles V,24 February 1500,21 September 1558,February 1530,N/A,16 January 1556\n21,Habsburg,Ferdinand I,10 March 1503,25 July 1564,N/A,N/A,25 July 1564\n22,Habsburg,Maximilian II,31 July 1527,12 October 1576,N/A,N/A,12 October 1576\n23,Habsburg,Rudolph II,18 July 1552,20 January 1612,30 June 1575,N/A,20 January 1612\n24,Habsburg,Matthias,24 February 1557,20 March 1619,23 January 1612,N/A,20 March 1619\n25,Habsburg,Ferdinand II,9 July 1578,15 February 1637,10 March 1619,N/A,15 February 1637\n26,Habsburg,Ferdinand III,13 July 1608,2 April 1657,18 November 1637,N/A,2 April 1657\n27,Habsburg,Leopold I,9 June 1640,5 May 1705,6 March 1657,N/A,5 May 1705\n28,Habsburg,Joseph I,26 July 1678,17 April 1711,1 May 1705,N/A,17 April 1711\n29,Habsburg,Charles VI,1 October 1685,20 October 1740,22 December 1711,N/A,20 October 1740\n30,Wittelsbach,Charles VII,6 August 1697,20 January 1745,12 February 1742,N/A,20 January 1745\n31,Lorraine,Francis I,8 December 1708,18 August 1765,N/A,N/A,18 August 1765\n32,Habsburg-Lorraine,Joseph II,13 March 1741,20 February 1790,19 August 1765,N/A,20 February 1790\n33,Habsburg-Lorraine,Leopold II,5 May 1747,1 March 1792,N/A,N/A,1 March 1792\n34,Habsburg-Lorraine,Francis II,12 February 1768,2 March 1835,4 March 1792,N/A,6 August 1806\n"
        },
        {
          "name": "html.md",
          "type": "blob",
          "size": 4.619140625,
          "content": "---\nname: HTML\nfilename: learnhtml.txt\ncontributors:\n    - [\"Christophe THOMAS\", \"https://github.com/WinChris\"]\ntranslators:\n    - [\"Robert Steed\", \"https://github.com/robochat\"]\n    - [\"Dimitri Kokkonis\", \"https://github.com/kokkonisd\"]\n---\n\nHTML stands for Hypertext Markup Language.\n\nIt is a language which allows us to write pages for the World Wide Web.\nIt is a markup language, it enables us to write webpages using code to indicate\nhow text and data should be displayed.  In fact, HTML files are simple text\nfiles.\n\nWhat is this markup? It is a method of organising the page's data by\nsurrounding it with opening tags and closing tags.  This markup serves to give\nsignificance to the text that it encloses.  Like other computer languages, HTML\nhas many versions. Here we will talk about HTML5.\n\n**NOTE :**  You can test the different tags and elements as you progress through\nthe tutorial on a site like [codepen](http://codepen.io/pen/) in order to see\ntheir effects, understand how they work and familiarise yourself with the\nlanguage.  This article is concerned principally with HTML syntax and some\nuseful tips.\n\n\n```html\n<!-- Comments are enclosed like this line! -->\n\n<!--\n\tComments\n\tcan\n\tspan\n\tmultiple\n\tlines!\n-->\n\n<!-- #################### The Tags #################### -->\n\n<!-- Here is an example HTML file that we are going to analyse. -->\n\n\n<!doctype html>\n\t<html>\n\t\t<head>\n\t\t\t<title>My Site</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<h1>Hello, world!</h1>\n\t\t\t<a href=\"http://codepen.io/anon/pen/xwjLbZ\">\n\t\t\t\tCome look at what this shows\n\t\t\t</a>\n\t\t\t<p>This is a paragraph.</p>\n\t\t\t<p>This is another paragraph.</p>\n\t\t\t<ul>\n\t\t\t\t<li>This is an item in a non-enumerated list (bullet list)</li>\n\t\t\t\t<li>This is another item</li>\n\t\t\t\t<li>And this is the last item on the list</li>\n\t\t\t</ul>\n\t\t</body>\n\t</html>\n\n<!--\n\tAn HTML file always starts by indicating to the browser that the page is HTML.\n-->\n<!doctype html>\n\n<!-- After this, it starts by opening an <html> tag. -->\n<html>\n\n<!-- that will be closed at the end of the file with </html>. -->\n</html>\n\n<!-- Nothing should appear after this final tag. -->\n\n<!-- Inside (between the opening and closing tags <html></html>), we find: -->\n\n<!-- A header defined by <head> (it must be closed with </head>). -->\n<!--\n\tThe header contains some description and additional information which are not\n\tdisplayed; this is metadata.\n-->\n\n<head>\n\t<!--\n\t\tThe tag <title> indicates to the browser the title to show in browser\n\t\twindow's title bar and tab name.\n\t-->\n\t<title>My Site</title>\n</head>\n\n<!-- After the <head> section, we find the tag - <body> -->\n<!-- Until this point, nothing described will show up in the browser window. -->\n<!-- We must fill the body with the content to be displayed. -->\n\n<body>\n\t<!-- The h1 tag creates a title. -->\n\t<h1>Hello, world!</h1>\n\t<!--\n\t\tThere are also subtitles to <h1> from the most important (h2) to the most\n\t\tprecise (h6).\n\t-->\n\n\t<!-- a hyperlink to the url given by the attribute href=\"\" -->\n\t<a href=\"http://codepen.io/anon/pen/xwjLbZ\">\n\t\tCome look at what this shows\n\t</a>\n\n\t<!-- The tag <p> lets us include text in the html page. -->\n\t<p>This is a paragraph.</p>\n\t<p>This is another paragraph.</p>\n\n\t<!-- The tag <ul> creates a bullet list. -->\n\t<!--\n\t\tTo have a numbered list instead we would use <ol> giving 1. for the first\n\t\telement, 2. for the second, etc.\n\t-->\n\t<ul>\n\t\t<li>This is an item in a non-enumerated list (bullet list)</li>\n\t\t<li>This is another item</li>\n\t\t<li>And this is the last item on the list</li>\n\t</ul>\n</body>\n\n<!-- And that's it, creating an HTML file can be simple. -->\n\n<!-- But it is possible to add many additional types of HTML tags. -->\n\n<!-- The <img /> tag is used to insert an image. -->\n<!--\n\tThe source of the image is indicated using the attribute src=\"\"\n\tThe source can be an URL or even path to a file on your computer.\n-->\n<img src=\"http://i.imgur.com/XWG0O.gif\"/>\n\n<!-- It is also possible to create a table. -->\n\n<!-- We open a <table> element. -->\n<table>\n\n\t<!-- <tr> allows us to create a row. -->\n\t<tr>\n\n\t\t<!-- <th> allows us to give a title to a table column. -->\n\t\t<th>First Header</th>\n\t\t<th>Second Header</th>\n\t</tr>\n\n\t<tr>\n\n\t\t<!-- <td> allows us to create a table cell. -->\n\t\t<td>first row, first column</td>\n\t\t<td>first row, second column</td>\n\t</tr>\n\n\t<tr>\n\t\t<td>second row, first column</td>\n\t\t<td>second row, second column</td>\n\t</tr>\n</table>\n```\n\n## Usage\n\nHTML is written in files ending with `.html` or `.htm`. The mime type is\n`text/html`.\n**HTML is NOT a programming language**\n## To Learn More\n\n* [Wikipedia](https://en.wikipedia.org/wiki/HTML)\n* [HTML Tutorial](https://developer.mozilla.org/en-US/docs/Web/HTML)\n* [W3Schools](http://www.w3schools.com/html/html_intro.asp)\n"
        },
        {
          "name": "httpie.md",
          "type": "blob",
          "size": 2.765625,
          "content": "---\ncategory: tool\nname: HTTPie\ncontributors:\n  - [\"Adaías Magdiel\", \"https://github.com/AdaiasMagdiel\"]\nfilename: learn-httpie.sh\n---\n\nHTTPie is a powerful command-line HTTP client designed for easy interaction\nwith HTTP servers. It provides a simple and intuitive interface, making it an\nexcellent tool for developers, testers, and system administrators.\n\n## Basic Usage\n\nHTTPie follows a simple syntax: http [flags] [METHOD] URL [items].\n\n```bash\nhttp GET https://api.example.com/posts\n```\n\nYou can print the request without sending it by using the `--offline` flag.\n\n```bash\nhttp --offline https://api.example.com/posts\n```\n\n### URL shortcuts for `localhost`\n\nHTTPie supports a curl-like shorthand for localhost. For instance, `:3000`\nexpands to `http://localhost:3000`. If the port is omitted, it assumes port 80.\n\n```bash\nhttp :/users    # http://localhost/users\nhttp :5000/rss  # http://localhost:5000/rss\n```\n\n### Optional GET and POST\n\nIf you don't specify the METHOD, the HTTPie will use:\n\n- GET for requests without body\n- POST for requests with body\n\n```bash\nhttp https://api.example.com/tags # GET tags\nhttp https://api.example.com/tags title=\"Tutorial\" slug=\"tutorial\" # POST a new tag\n```\n\n## Querystring Parameters\n\nIf you're manually adding query string parameters in the terminal, try the\n`param==value` syntax. It avoids shell escaping for & separators and\nautomatically URL-escapes special characters in parameter names and values.\nThis differs from parameters in the full URL, which HTTPie doesn't modify.\n\n```bash\nhttp https://api.example.com/search q==httpie per_page==20\n```\n\n## Sending Data\n\nYou can send data in various formats such as JSON, form data, or files.\n\n### JSON Data\n\n```bash\nhttp POST https://api.example.com/posts title=\"Hello\" body=\"World\"\n```\n\n### Form Data\n\n```bash\nhttp -f POST https://api.example.com/submit name=John email=john@example.com\n```\n\n### Files\n\n```bash\nhttp --form POST https://api.example.com/upload file@/path/to/file.txt\n```\n\n## Headers and Authentication\n\nHTTPie allows you to set headers and handle authentication easily.\n\n### Headers\n\n```bash\nhttp GET https://api.example.com/posts Authorization:\"Bearer Token\" User-Agent:\"HTTPie\"\n```\n\n### Basic Authentication\n\n```bash\nhttp -a username:password GET https://api.example.com/protected\n```\n\n### Bearer Authentication\n\n```bash\nhttps -A bearer -a token https://api.example.com/admin\n```\n\n## Response Handling\n\nHTTPie provides various options for handling responses.\n\n```bash\nhttp GET https://api.example.com/data Accept:application/json  # Pretty Print JSON\n\nhttp GET https://api.example.com/image --output image.png      # Save Response to File\n\nhttp --follow GET https://example.com  # Follow Redirects\n```\n\n## Further Reading\n\n- [Official Documentation](https://httpie.io/docs/cli)\n- [GitHub](https://github.com/httpie)\n"
        },
        {
          "name": "hu",
          "type": "tree",
          "content": null
        },
        {
          "name": "hy.md",
          "type": "blob",
          "size": 5.6611328125,
          "content": "---\nname: Hy\nfilename: learnhy.hy\ncontributors:\n    - [\"Abhishek L\", \"http://twitter.com/abhishekl\"]\n    - [\"Zirak\", \"http://zirak.me\"]\n---\n\nHy is a Lisp dialect built on top of Python. This is achieved by\nconverting Hy code to Python's abstract syntax tree (AST). This allows\nHy to call native Python code or Python to call native Hy code as well\n\n```hylang\n; Semicolon comments, like other Lisps\n\n;; S-expression basics\n; Lisp programs are made of symbolic expressions or sexps which\n; resemble\n(some-function args)\n; now the quintessential hello world\n(print \"hello world\")\n\n;; Simple data types\n; All simple data types are the same as their Python counterparts\n42 ; => 42\n3.14 ; => 3.14\nTrue ; => True\n4+10j ; => (4+10j) a complex number\n\n; lets start with some simple arithmetic\n(+ 4 1) ;=> 5\n; the operator is applied to all arguments, like other Lisps\n(+ 4 1 2 3) ;=> 10\n(- 2 1) ;=> 1\n(* 4 2) ;=> 8\n(/ 4 1) ;=> 4\n(% 4 2) ;=> 0 the modulo operator\n; power is represented by the ** operator, like Python\n(** 3 2) ;=> 9\n; nesting forms will do the expected thing\n(+ 2 (* 4 2)) ;=> 10\n; also logical operators and or not and equal to etc. work as expected\n(= 5 4) ;=> False\n(not (= 5 4)) ;=> True\n\n;; Variables\n; variables are set using setv, variable names can use utf-8 except\n; for ()[]{}\",'`;#|\n(setv a 42)\n(setv π 3.14159)\n(def *foo* 42)\n;; Other container data types\n; strings, lists, tuples & dicts\n; these are exactly same as Python's container types\n\"hello world\" ;=> \"hello world\"\n; string operations work similar to Python\n(+ \"hello \" \"world\") ;=> \"hello world\"\n; lists are created using [], indexing starts at 0\n(setv mylist [1 2 3 4])\n; tuples are immutable data structures\n(setv mytuple (, 1 2))\n; dictionaries are key value pairs\n(setv dict1 {\"key1\" 42 \"key2\" 21})\n; :name can be used to define keywords in Hy which can be used for keys\n(setv dict2 {:key1 41 :key2 20})\n; use `get' to get the element at an index/key\n(get mylist 1) ;=> 2\n(get dict1 \"key1\") ;=> 42\n; Alternatively if keywords were used they can be called directly\n(:key1 dict2) ;=> 41\n\n;; Functions and other program constructs\n; functions are defined using defn, the last sexp is returned by default\n(defn greet [name]\n  \"A simple greeting\" ; an optional docstring\n  (print \"hello \" name))\n\n(greet \"bilbo\") ;=> \"hello bilbo\"\n\n; functions can take optional arguments as well as keyword arguments\n(defn foolists [arg1 &optional [arg2 2]]\n  [arg1 arg2])\n\n(foolists 3) ;=> [3 2]\n(foolists 10 3) ;=> [10 3]\n\n; you can use rest arguments and kwargs too:\n(defn something-fancy [wow &rest descriptions &kwargs props]\n  (print \"Look at\" wow)\n  (print \"It's\" descriptions)\n  (print \"And it also has:\" props))\n\n(something-fancy \"My horse\" \"amazing\" :mane \"spectacular\")\n\n; you use apply instead of the splat operators:\n(apply something-fancy [\"My horse\" \"amazing\"] { \"mane\" \"spectacular\" })\n\n; anonymous functions are created using `fn' or `lambda' constructs\n; which are similar to `defn'\n(map (fn [x] (* x x)) [1 2 3 4]) ;=> [1 4 9 16]\n\n;; Sequence operations\n; Hy has some builtin utils for sequence operations etc.\n; retrieve the first element using `first' or `car'\n(setv mylist [1 2 3 4])\n(setv mydict {\"a\" 1 \"b\" 2})\n(first mylist) ;=> 1\n\n; slice lists using cut\n(cut mylist 1 3) ;=> [2 3]\n\n; get elements from a list or dict using `get'\n(get mylist 1) ;=> 2\n(get mydict \"b\") ;=> 2\n; list indexing starts from 0, same as Python\n; assoc can set elements at keys/indexes\n(assoc mylist 2 10) ; makes mylist [1 2 10 4]\n(assoc mydict \"c\" 3) ; makes mydict {\"a\" 1 \"b\" 2 \"c\" 3}\n; there are a whole lot of other core functions which makes working with\n; sequences fun\n\n;; Python interop\n;; import works just like in Python\n(import datetime)\n(import functools [partial reduce]) ; imports partial and reduce from functools\n(import matplotlib.pyplot :as plt) ; imports foo as bar\n; all builtin Python methods etc. are accessible from Hy\n; a.foo(arg) is called as (.foo a arg)\n(.split (.strip \"hello world  \")) ;=> [\"hello\" \"world\"]\n\n; there is a shortcut for executing multiple functions on a value called the\n; \"threading macro\", denoted by an arrow:\n(-> \"hello world  \" (.strip) (.split)) ;=> [\"hello\" \"world]\n; the arrow passes the value along the calls as the first argument, for instance:\n(-> 4 (* 3) (+ 2))\n; is the same as:\n(+ (* 4 3) 2)\n\n; there is also a \"threading tail macro\", which instead passes the value as the\n; second argument. compare:\n(-> 4 (- 2) (+ 1)) ;=> 3\n(+ (- 4 2) 1) ;=> 3\n; to:\n(->> 4 (- 2) (+ 1)) ;=> -1\n(+ 1 (- 2 4)) ;=> -1\n\n;; Conditionals\n; (if condition (body-if-true) (body-if-false)\n(if (= passcode \"moria\")\n  (print \"welcome\")\n  (print \"Speak friend, and Enter!\"))\n\n; nest multiple if else if clauses with cond\n(cond\n  (= someval 42) (print \"Life, universe and everything else!\")\n  (> someval 42) (print \"val too large\")\n  (< someval 42) (print \"val too small\"))\n\n; group statements with do, these are executed sequentially\n; forms like defn have an implicit do\n(do\n  (setv someval 10)\n  (print \"someval is set to \" someval)) ;=> 10\n\n; create lexical bindings with `let', all variables defined thusly\n; have local scope\n(let [nemesis {\"superman\" \"lex luther\"\n                \"sherlock\" \"moriarty\"\n                \"seinfeld\" \"newman\"}]\n  (for [[h v] (.items nemesis)]\n    (print (.format \"{0}'s nemesis was {1}\" h v))))\n\n;; Classes\n; classes are defined in the following way\n(defclass Wizard [object]\n  (defn __init__ [self spell]\n    (setv self.spell spell))\n\n  (defn get-spell [self]\n    self.spell))\n```\n\n### Further Reading\n\nThis tutorial is just a basic introduction to Hy/Lisp/Python.\n\nHy docs are here: [https://hylang.org/hy/doc](https://hylang.org/hy/doc)\n\nHy's GitHub repo: [https://github.com/hylang/hy](https://github.com/hylang/hy)\n\nOn freenode IRC `#hy`, twitter hashtag #hylang\n"
        },
        {
          "name": "id",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "inform7.md",
          "type": "blob",
          "size": 7.7080078125,
          "content": "---\nname: Inform7\ncontributors:\n    - [\"Hyphz\", \"http://github.com/hyphz/\"]\nfilename: LearnInform.Inform\n---\n\nInform 7 is a natural language based language created by Graham Nelson and Emily Short for writing text adventures, but also potentially usable for other text based applications, especially data backed ones.\n\n```inform7\n[This is a comment.]\n\n[Inform 7 is a language designed for building text adventures.\nIt can be used for other purposes too, although the default\nlibrary builds a text adventure. Inform 7 is object oriented.]\n\n[This creates a class by subclassing. \"Value\" is the universal subclass,\nbut \"object\" is the most basic that behaves like an OO object.]\nA datablock is a kind of object.\n\n[Classes can have properties.]\nA datablock can be broken. [This creates a boolean property.]\nA datablock is usually not broken. [This sets its default value.]\nA datablock can be big or small. [This creates an enumerated property.]\nA datablock is usually small. [This sets its default value.]\nA datablock has a number called the sequence number. [This creates a typed property.]\nA datablock has some text called the name. [\"Some text\" means a string.]\nA datablock has a datablock called the chain. [Declared classes become types.]\n\n[This creates a global named instance.]\nBlock1 is a datablock.\nThe sequence number of Block1 is 1.\nThe name of Block1 is \"Block One.\"\n\n[Functions and procedures are defined as \"phrases\".]\nTo do the thing everyone does with their first program:\n\tsay \"Hello World.\". [Full stop indicates the end, indent indicates the scope.]\n\nTo dump (the block - a datablock): [That's how we create a parameter.]\n\tsay the sequence number of the block;\n\tsay the name of the block;\n\tif the block is broken, say \"(Broken)\".\n\nTo toggle (the block - a datablock):\n\tif the block is broken: [Conditional.]\n\t\tnow the block is not broken; [Updating a property.]\n\telse:\n\t\tnow the block is broken.\n\n[Multiple parameters.]\nTo fix (the broken block - a datablock) using (the repair block - a datablock):\n\tif the broken block is not broken, stop; [Comma for a non indented single command.]\n\tif the repair block is broken, stop;\n\tnow the sequence number of the broken block is the sequence number of the repair block;\n\tnow the broken block is not broken.\n\n[Because of its text adventure origins, Inform 7 doesn't generally allow objects\nto be created dynamically, although there's a language extension that enables it.]\nBlock2 is a datablock.\nBlock2 is broken.\nThe sequence number of Block2 is 2.\nThe name of Block2 is \"Block two.\"\n\nTo demonstrate calling a phrase with two parameters:\n\tLet the second block be block2; [Local pointer variable.]\n\tfix the second block using Block1;\n\tsay the sequence number of the second block. [1.]\n\n[Lists.]\nTo show how to use list types:\n\tlet the list be a list of datablocks;\n\tadd Block1 to the list;\n\tadd Block2 to the list;\n\tsay the list; [\"Block1 and Block2\"]\n\t[Membership.]\n\tif Block1 is listed in the list:\n\t\tsay \"Block1 is there.\";\n\t[Loop.]\n\trepeat with the block running through the list:\n\t\tdump the block;  [1 Block One. 1 Block Two.]\n\t\t[Remember block two's sequence number was changed above.]\n\tlet X be entry 2 of the list; [Counting starts at 1.]\n\tdump X; [\"1 Block two.\"]\n\tremove X from the list;\n\tsay the list. [Block1]\n\n[Here's how we define a function and do arithmetic.]\n\nTo decide which number is the sum of all numbers up to (X - a number) (this is summing up):\n\tlet the total so far be a number;\n\trepeat with the current number running from 1 to X:\n\t\tnow the total so far is the total so far + the current number;\n\tdecide on the total so far. [This is the return statement.]\n\n[ We have higher order functions too. ]\n\nTo demonstrate a higher order function:\n\tsay summing up applied to {1, 2, 3, 4}.\n\nTo decide which number is the result of applying (phrase - phrase A -> A) twice to (B - a value of kind A):\n\tlet b1 be phrase applied to B;\n\tlet b2 be phrase applied to b1;\n\tdecide on b2.\n\nTo demonstrate defining a higher order function:\n\tlet X be 5;\n\tsay the result of applying summing up twice to X.\n\n[ Rulebooks allow a number of functions which apply to the same type under different conditions to be stacked. ]\n\nDatablock validation rules is a datablock based rulebook.\n\nA datablock validation rule for a broken datablock: rule fails.\nA datablock validation rule for a datablock (called the block):\n\tdump the block;\n\trule succeeds.\n\nTo demonstrate invoking a rulebook:\n\tfollow datablock validation rules for Block1;\n\tfollow datablock validation rules for Block2.\n\n[ Objects can also have relations, which resemble those in a relational database. ]\nA dog is a kind of thing.\nRover is a dog.\nThe kennel is a container. [This is a built in base class.]\nRover is in the kennel. [This creates an inbuilt relation called \"containment\".]\n\n[We can create relations by declaring their type.]\n\nGuide dog ownership relates one dog to one person. [One-to-one.]\nProperty ownership relates various things to one person. [Many-to-one.]\nFriendship relates various people to various people.  [Many-to-many.]\n\n[To actually use them we must assign verbs or prepositions to them.]\n\nThe verb to own means the property ownership relation.\nThe verb to be the guide dog of means the guide dog ownership relation.\nThe verb to be guided by means the reversed guide dog ownership relation.\nThe verb to be friends with means the friendship relation.\n\nEdward is a person. A person can be blind. Edward is blind.\nEdward is guided by Rover.\nBenny is a person. Edward is friends with Benny.\n\nTo demonstrate looking something up with a relation:\n\trepeat with the dog running through things that are the guide dog of Edward:\n\t\tsay the dog;\n\trepeat with the friend running through things that are friends with Edward:\n\t\tsay the friend.\n\n[We can also define relations that exist procedurally.]\n\nHelpfulness relates a person (called the helper) to a person (called the helpee) when the helpee is blind and the helper is not blind.\nThe verb to be helpful to means the helpfulness relation.\nTo demonstrate using a procedural relation:\n\trepeat with the helper running through people that are helpful to Edward:\n\t\tsay the helper.\n\n\n[ Interface to the text adventure harness to allow the above code to be run. ]\nTutorial room is a room.\n\"A rather strange room full of buttons. Push them to run the exercises, or turn on the robot to run them all.\"\nA button is a kind of thing. A button is fixed in place.\n\nThe red button is a button in tutorial room.\nInstead of pushing the red button, do the thing everyone does with their first program.\nThe green button is a button in tutorial room.\nInstead of pushing the green button, demonstrate calling a phrase with two parameters.\nThe blue button is a button in tutorial room.\nInstead of pushing the blue button, show how to use list types.\nThe cyan button is a button in tutorial room.\nInstead of pushing the cyan button, say the sum of all numbers up to 5.\nThe purple button is a button in tutorial room.\nInstead of pushing the purple button, demonstrate a higher order function.\nThe black button is a button in tutorial room.\nInstead of pushing the black button, demonstrate defining a higher order function.\nThe white button is a button in tutorial room.\nInstead of pushing the white button, demonstrate invoking a rulebook.\nThe puce button is a button in tutorial room.\nInstead of pushing the puce button, demonstrate looking something up with a relation.\nThe orange button is a button in tutorial room.\nInstead of pushing the orange button, demonstrate using a procedural relation.\n\nThe robot is an object in tutorial room.\nInstead of switching on the robot:\n\tsay \"The robot begins to frantically flail its arms about.\";\n\trepeat with button running through buttons in the tutorial room:\n\t\tsay \"The robot randomly hits [the button].\";\n\t\ttry pushing button.\n```\n\n## Ready For More?\n\n* [Inform 7](http://www.inform7.com/)\n"
        },
        {
          "name": "it",
          "type": "tree",
          "content": null
        },
        {
          "name": "ja",
          "type": "tree",
          "content": null
        },
        {
          "name": "janet.md",
          "type": "blob",
          "size": 9.4716796875,
          "content": "---\nname: Janet\nfilename: learnJanet.janet\ncontributors:\n    - [\"John Gabriele\", \"http://www.unexpected-vortices.com/\"]\n---\n\n[Janet](https://janet-lang.org/) is a Lisp-like (Clojure-like),\nlexically-scoped, dynamically-typed, garbage-collected, C-based, high-level\nlanguage. The entire language (core library, interpreter, compiler, assembler,\nPEG) is about 300-500 kB and should run on many constrained systems.\n\nI encourage you to try out the code snippets below in the Janet\nrepl (either by [installing Janet](https://janet-lang.org/docs/index.html),\nor else by using the repl embedded in the Janet homepage).\n\nAs we only have a scant *y* minutes, we'll survey the basics here and\nleave the remaining details for the manual. So please, keep your arms and\nlegs inside the vehicle at all times, and on with the scenic tour!\n\n```janet\n# A comment.\n\n# Some literal values.\ntrue\nfalse\nnil\n\n# Typical style for symbols (identifiers-for / names-of things).\ndo-stuff\npants-on-fire!\nfoo->bar        # Evidently for converting foos to bars.\nfully-charged?\n_               # Usually used as a dummy variable.\n\n# Keywords are like symbols that start with a colon, are treated like\n# constants, and are typically used as map keys or pieces of syntax in\n# macros.\n:a\n:some-val\n\n# Numbers #####################################################################\n5\n1e3    # => 1000\n1_000  # => 1000\n2e-03  # => 0.002\n0xff   # => 255\n\n# You can specify a radix (base) like so:\n16rff   # => 255 (same as 0xff)\n2r1101  # =>  13\n\n# Some numbers in the math library:\nmath/pi  # => 3.14159\nmath/e   # => 2.71828\n\n# Strings #####################################################################\n\"hello\"\n\"hey\\tthere\"  # contains a tab\n\n# For multi-line strings, use one or more backticks. Backslash-escapes not\n# recognized in these (bytes will be parsed literally).\n``a long\nmulti-line\nstring``    # => \"a long\\nmulti-line\\nstring\"\n\n# Strings and data structures in Janet come in two varieties: mutable and\n# immutable. The literal for the mutable variety is written with a `@` in\n# front of it.\n\n# A mutable string (aka \"buffer\").\n@\"this\"\n@`a multi-line\none here`\n\n(string \"con\" \"cat\" \"enate\")   # => \"concatenate\"\n\n# To get a substring:\n(string/slice \"abcdefgh\" 2 5)  # => \"cde\"\n# To find a substring:\n(string/find \"de\" \"abcdefgh\")  # => 3\n\n# See the string library for more (splitting, replacement, etc.)\n\n# Data Structures #############################################################\n# Arrays and Tuples\n# Arrays are mutable, tuples are immutable.\n\n# Arrays (mutable)\n@(4 5 6)\n@[4 5 6]\n\n# Tuples (immutable)\n# Note that an open paren usually indicates a function call, so if you want a\n# literal tuple with parens, you need to \"quote\" it (with a starting single\n# quote mark)...\n'(4 5 6)\n[4 5 6]  # ... or just use square brackets.\n\n# Tables and Structs (associative data structures)\n@{:a 1 :b 2 :c 3}  # table  (mutable)\n{:a 1 :b 2 :c 3}   # struct (immutable)\n\n# To \"pretty-print\" these out, use `pp` instead of `print`.\n# More about how to work with arrays/tuples and tables/structs below.\n\n# Bindings ####################################################################\n# Bind a value to a symbol.\n(def x 4.7)  # Define a constant, `x`.\nx            # => 4.7\n(quote x)    # => x (the symbol x)\n'x           # => x (the symbol x (shorthand))\n(print x)    # prints 4.7\n\n# Since we used `def`, can't change to what `x` refers:\n(set x 5.6)  # Error, `x` is a constant.\n\n(var y 10)\n(set y 12)  # Works, since `y` was defined using `var`.\n\n# Note that bindings are local to the scope they're called in. `let`\n# creates a local scope and makes some bindings all in one shot:\n(let [a 2\n      b 3]\n  (print \"Hello from inside this local scope.\")\n  (* a b))  # => 6\n\n# Destructuring is supported, both for arrays/tuples ...\n(def a [\"foos\" \"bars\" \"moos\"])\n(let [[s1 _ s2] a]\n  (print s1 s2))  # foosmoos\n\n# ... and for tables/structs.\n(def t {:a \"ayy\" :b \"bee\" :c \"sea\"})\n(let [{:a a :b b} t]\n  (print a b))  # ayybee\n\n# You can even destructure right in a `def`:\n(def [aa1 aa2] a)\naa1  # => foos\naa2  # => bars\n\n(def {:c body-of-water :b insect-friend} t)\nbody-of-water  # => sea\ninsect-friend  # => bee\n\n# Note that keywords evaluate to themselves, whereas symbols evaluate\n# to whatever value they're bound to (unless you quote them).\n\n# Operators ###################################################################\n# Janet supports the usual ensemble of operators.\n# +, -, *, /, and so on. Note:\n(/ 5 3)  # =>  1.66667\n(% 5 3)  # =>  2 (remainder)\n(- 5)    # => -5 (or you can just write `-5`)\n\n(++ i)    # increments (modifies `i`)\n(-- i)    # decrements\n(+= i 3)  # add 3 to `i`\n(*= i 3)  # triple `i`\n# ... and so on for the other operations on numbers.\n\n# If you don't want to mutate `i`, use `(inc i)` and `(dec i)`.\n\n# Comparison\n# =  <  >  not=  <=  >=\n(< 2 7 12)  # => true\n\n# Functions ###################################################################\n# Call them:\n(- 5 3)                   # => 2 (Operators and functions work the same way.)\n(math/sin (/ math/pi 2))  # => 1\n(range 5)                 # => @[0 1 2 3 4]\n\n# Create them:\n(defn mult-by-2\n  ``First line of docstring.\n\n  Some more of the docstring.``\n  [x]\n  (print \"Hi.\")\n  (print \"Will compute using: \" x)\n  (* 2 x))\n\n(print (mult-by-2 6))  # => 12 (after printing \"Hi\" and so forth)\n\n# If you have a function named \"main\" in your file, `janet` will automatically\n# call it for you when you run the file.\n\n# Interactively read a function's docs from within the repl:\n(doc mult-by-2)\n\n# Note, functions have to be defined before they can be used in a function,\n# so if you design top-down, you'll need to write your functions from the\n# bottom of the file up.\n\n# You can make anonymous functions as well:\n(fn [x] (+ x x))\n(fn my-func [x] (+ x x))  # This one's less anonymous.\n\n# Use `do` to make some side-effecting calls and then evaluate to\n# the last form in the `do`:\n(def n (do\n         (print \"hi\")\n         (do-some-side-effecting 42)\n         3))\nn  # => 3\n\n# You might say that function bodies provide an \"implicit do\".\n\n# Operations on data structures ###############################################\n# (Making all of these mutable so we can ... mutate them.)\n(def s @\"Hello, World!\")\n(def a @[:a :b :c :d :e])\n(def t @{:a 1 :b 2})\n\n(length s)  # => 13\n(length a)  # =>  5\n(length t)  # =>  2\n\n# Getting values:\n(s 7)       # => 87 (which is the code point for \"W\")\n(a 1)       # => :b\n(t :a)      # => 1\n(keys t)    # => @[:a :b]\n(values t)  # => @[1 2]\n\n# Changing values (for mutable data structures):\n(put s 2 87)   # @\"HeWlo, World!\"\n(put a 2 :x)   # @[:a :b :x :d :e]\n(put t :b 42)  # @{:a 1 :b 42}\n\n# Adding and removing values (again, for mutable data structures):\n(buffer/push-string s \"??\")  # @\"HeWlo, World!??\"\n(array/push a :f)  # @[:a :b :x :d :e :f]\n(array/pop a)      # => :f, and it's also removed from `a`.\n(put t :x 88)      # @{:a 1 :b 42 :x 88}\n\n# See the manual for a wide variety of functions for working with\n# buffers/strings, arrays/tuples, and tables/structs.\n\n# Flow control ################################################################\n(if some-condition\n  42\n  38)\n\n# Only `nil` and `false` are falsey. Everything else is truthy.\n\n(if got-it?\n  71)  # No false-branch value. Returns `nil` if `got-it?` is falsey.\n\n(var i 10)\n(while (pos? i)\n  (print \"... \" i)\n  (-- i))\n# Now `i` is 0.\n\n# `case` compares the dispatch value to each of the options.\n(var x 2)\n(case x\n  1 \"won\"\n  2 \"too\"\n  3 \"tree\"\n  \"unknown\")  # => \"too\"\n\n# `cond` evaluates conditions until it gets a `true`.\n(set x 8)\n(cond\n  (= x 1) \"won\"\n  (= x 2) \"too\"\n  (< x 10) \"tree\"\n  \"oof!\")  # => \"tree\"\n\n(when (avoided-wipeout?)\n  (do-side-effecty-thing 88)\n  (smell-the-roses)\n  (paint-fencepost-error))\n\n# Pattern matching.\n# `match` is like a high-powered switch expression. If you switch on a data\n# structure, it can look inside to try and match on its contents. For example,\n# matching on a table or struct:\n(def t {:a 1 :b 2 :c 3})\n(match t\n  {:yar v} (print \"matches key :yar! \" v)\n  {:moo v} (print \"matches key :moo! \" v)\n  {:c   v} (print \"matches key :c! \"   v)\n  _        (print \"no match\"))             # => prints \"matches key :c! 3\"\n\n# Iterating ###################################################################\n# Iterate over an integer range:\n(for i 0 5\n  (print i))  # prints 0, 1, 2, 3, 4\n\n# There's also the more general `loop`:\n(loop [i :range [0 10] :when (even? i)]\n  (print i))\n\n# Loop over an array/tuple:\n(def words [\"foo\" \"bar\" \"baz\"])\n(each word words\n  (print word))\n\n# Loop over a table/struct:\n(def t {:a 1 :b 2})\n(eachp [k v] t  # Loop over each pair in `t`.\n  (print k \" --> \" v))\n\n# Can also use `eachk` to loop over keys in a table or struct.\n\n# Functional programming ######################################################\n# You'll find many familiar old friends here.\n(filter even?\n        (map (fn [x]\n               (* x x))\n             (range 10)))  # => @[0 4 16 36 64]\n\n(reduce + 0 (range 5))     # => 10\n\n# ...and lots more (see the API docs).\n\n# Errata ######################################################################\n(type a)                # => the type of `a` (as a keyword)\n(describe a)            # => a human-readable description of `a`\n(string/format \"%j\" a)  # => Janet values, nicely-formatted\n```\n\nThis tour didn't cover a number of other features such as modules, fibers,\nPEGs, macros, etc., but should give you a taste of what Janet is like. See\nthe [Janet manual](https://janet-lang.org/docs/index.html) and the [Janet API\ndocs](https://janet-lang.org/api/index.html) for more info.\n\nAlso check out [Janet for Mortals](https://janet.guide/) for an in-depth ebook\non Janet.\n"
        },
        {
          "name": "java.md",
          "type": "blob",
          "size": 40.33984375,
          "content": "---\nname: Java\ncontributors:\n    - [\"Jake Prather\", \"https://github.com/JakeHP\"]\n    - [\"Jakukyo Friel\", \"https://weakish.github.io\"]\n    - [\"Madison Dickson\", \"https://github.com/mix3d\"]\n    - [\"Simon Morgan\", \"https://sjm.io/\"]\n    - [\"Zachary Ferguson\", \"https://github.com/zfergus2\"]\n    - [\"Cameron Schermerhorn\", \"https://github.com/cschermerhorn\"]\n    - [\"Rachel Stiyer\", \"https://github.com/rstiyer\"]\n    - [\"Michael Dähnert\", \"https://github.com/JaXt0r\"]\n    - [\"Rob Rose\", \"https://github.com/RobRoseKnows\"]\n    - [\"Sean Nam\", \"https://github.com/seannam\"]\n    - [\"Shawn M. Hanes\", \"https://github.com/smhanes15\"]\nfilename: LearnJava.java\n---\n\nJava is a general-purpose, concurrent, class-based, object-oriented computer\nprogramming language.\n[Read more here.](https://docs.oracle.com/javase/tutorial/java/)\n\n```java\n// Single-line comments start with //\n\n/*\nMulti-line comments look like this.\n*/\n\n/**\n * JavaDoc comments look like this. Used to describe the Class or various\n * attributes of a Class.\n * Main attributes:\n *\n * @author         Name (and contact information such as email) of author(s).\n * @version     Current version of the program.\n * @since        When this part of the program was first added.\n * @param         For describing the different parameters for a method.\n * @return        For describing what the method returns.\n * @deprecated  For showing the code is outdated or shouldn't be used.\n * @see         Links to another part of documentation.\n*/\n\n// Import ArrayList class inside of the java.util package\nimport java.util.ArrayList;\n// Import all classes inside of java.security package\nimport java.security.*;\n// Java to illustrate calling of static members and methods without calling classname\nimport static java.lang.Math.*;\nimport static java.lang.System.*;\n\npublic class LearnJava {\n\n    // In order to run a java program, it must have a main method as an entry\n    // point.\n    public static void main(String[] args) {\n\n    ///////////////////////////////////////\n    // Input/Output\n    ///////////////////////////////////////\n\n        /*\n        * Output\n        */\n\n        // Use System.out.println() to print lines.\n        System.out.println(\"Hello World!\");\n        System.out.println(\n            \"Integer: \" + 10 +\n            \" Double: \" + 3.14 +\n            \" Boolean: \" + true);\n\n        // To print without a newline, use System.out.print().\n        System.out.print(\"Hello \");\n        System.out.print(\"World\");\n\n        // Use System.out.printf() for easy formatted printing.\n        System.out.printf(\"pi = %.5f\", Math.PI); // => pi = 3.14159\n\n        /*\n         * Input\n         */\n\n        // use Scanner to read input\n        // must import java.util.Scanner;\n        Scanner scanner = new Scanner(System.in);\n\n        // read string input\n        String name = scanner.next();\n\n        // read byte input\n        byte numByte = scanner.nextByte();\n\n        // read int input\n        int numInt = scanner.nextInt();\n\n        // read long input\n        long numLong = scanner.nextLong();\n\n        // read float input\n        float numFloat = scanner.nextFloat();\n\n        // read double input\n        double numDouble = scanner.nextDouble();\n\n        // read boolean input\n        boolean bool = scanner.nextBoolean();\n\n        ///////////////////////////////////////\n        // Variables\n        ///////////////////////////////////////\n\n        /*\n        *  Variable Declaration\n        */\n        // Declare a variable using <type> <name>\n        int fooInt;\n        // Declare multiple variables of the same\n        // type <type> <name1>, <name2>, <name3>\n        int fooInt1, fooInt2, fooInt3;\n\n        /*\n        *  Variable Initialization\n        */\n\n        // Initialize a variable using <type> <name> = <val>\n        int barInt = 1;\n        // Initialize multiple variables of same type with same\n        // value <type> <name1>, <name2>, <name3>\n        // <name1> = <name2> = <name3> = <val>\n        int barInt1, barInt2, barInt3;\n        barInt1 = barInt2 = barInt3 = 1;\n        // Shorthand for multiple declarations\n        int barInt4 = 1, barInt5 = 2; \n\n\n        /*\n        *  Variable types\n        */\n        // Byte - 8-bit signed two's complement integer\n        // (-128 <= byte <= 127)\n        byte fooByte = 100;\n\n        // If you would like to interpret a byte as an unsigned integer\n        // then this simple operation can help\n        int unsignedIntLessThan256 = 0xff & fooByte;\n        // this contrasts a cast which can be negative.\n        int signedInt = (int) fooByte;\n\n        // Short - 16-bit signed two's complement integer\n        // (-32,768 <= short <= 32,767)\n        short fooShort = 10000;\n\n        // Integer - 32-bit signed two's complement integer\n        // (-2,147,483,648 <= int <= 2,147,483,647)\n        int bazInt = 1;\n\n        // Long - 64-bit signed two's complement integer\n        // (-9,223,372,036,854,775,808 <= long <= 9,223,372,036,854,775,807)\n        long fooLong = 100000L;\n        // L is used to denote that this variable value is of type Long;\n        // anything without is treated as integer by default.\n\n        // Note: byte, short, int and long are signed. They can have positive and negative values.\n        // There are no unsigned variants.\n        // char, however, is 16-bit unsigned.\n\n        // Float - Single-precision 32-bit IEEE 754 Floating Point\n        // 2^-149 <= float <= (2-2^-23) * 2^127\n        float fooFloat = 234.5f;\n        // f or F is used to denote that this variable value is of type float;\n        // otherwise it is treated as double.\n\n        // Double - Double-precision 64-bit IEEE 754 Floating Point\n        // 2^-1074 <= x <= (2-2^-52) * 2^1023\n        double fooDouble = 123.4;\n\n        // Boolean - true & false\n        boolean fooBoolean = true;\n        boolean barBoolean = false;\n\n        // Char - A single 16-bit Unicode character\n        char fooChar = 'A';\n\n        // final variables can't be reassigned,\n        final int HOURS_I_WORK_PER_WEEK = 9001;\n        // but they can be initialized later.\n        final double E;\n        E = 2.71828;\n\n        // BigInteger - Immutable arbitrary-precision integers\n        //\n        // BigInteger is a data type that allows programmers to manipulate\n        // integers longer than 64-bits. Integers are stored as an array of\n        // bytes and are manipulated using functions built into BigInteger\n        //\n        // BigInteger can be initialized using an array of bytes or a string.\n        BigInteger fooBigInteger = new BigInteger(fooByteArray);\n\n        // BigDecimal - Immutable, arbitrary-precision signed decimal number\n        //\n        // A BigDecimal takes two parts: an arbitrary precision integer\n        // unscaled value and a 32-bit integer scale\n        //\n        // BigDecimal allows the programmer complete control over decimal\n        // rounding. It is recommended to use BigDecimal with currency values\n        // and where exact decimal precision is required.\n        //\n        // BigDecimal can be initialized with an int, long, double or String\n        // or by initializing the unscaled value (BigInteger) and scale (int).\n        BigDecimal fooBigDecimal = new BigDecimal(fooBigInteger, fooInt);\n\n        // Be wary of the constructor that takes a float or double as\n        // the inaccuracy of the float/double will be copied in BigDecimal.\n        // Prefer the String constructor when you need an exact value.\n        BigDecimal tenCents = new BigDecimal(\"0.1\");\n\n        // Type inference with 'var'\n        var x = 100; // int\n        var y = 1.90; // double\n        var z = 'a'; // char\n        var p = \"tanu\"; // String\n        var q = false; // boolean\n\n        // Strings\n        String fooString = \"My String Is Here!\";\n\n        // Text blocks\n        var textBlock = \"\"\"\n                        This is a <Text Block> in Java \n                        \"\"\";\n\n        // \\n is an escaped character that starts a new line\n        String barString = \"Printing on a new line?\\nNo Problem!\";\n        // \\t is an escaped character that adds a tab character\n        String bazString = \"Do you want to add a tab?\\tNo Problem!\";\n        System.out.println(fooString);\n        System.out.println(barString);\n        System.out.println(bazString);\n\n        // String Building\n        // #1 - with plus operator\n        // That's the basic way to do it (optimized under the hood)\n        String plusConcatenated = \"Strings can \" + \"be concatenated \" + \"via + operator.\";\n        System.out.println(plusConcatenated);\n        // Output: Strings can be concatenated via + operator.\n\n        // #2 - with StringBuilder\n        // This way doesn't create any intermediate strings. It just stores the string pieces, and ties them together\n        // when toString() is called.\n        // Hint: This class is not thread safe. A thread-safe alternative (with some impact on performance) is StringBuffer.\n        StringBuilder builderConcatenated = new StringBuilder();\n        builderConcatenated.append(\"You \");\n        builderConcatenated.append(\"can use \");\n        builderConcatenated.append(\"the StringBuilder class.\");\n        System.out.println(builderConcatenated.toString()); // only now is the string built\n        // Output: You can use the StringBuilder class.\n\n        // StringBuilder is efficient when the fully constructed String is not required until the end of some processing.\n        StringBuilder stringBuilder = new StringBuilder();\n        String inefficientString = \"\";\n        for (int i = 0 ; i < 10; i++) {\n            stringBuilder.append(i).append(\" \");\n            inefficientString += i + \" \";\n        }\n        System.out.println(inefficientString);\n        System.out.println(stringBuilder.toString());\n        // inefficientString requires a lot more work to produce, as it generates a String on every loop iteration.\n        // Simple concatenation with + is compiled to a StringBuilder and toString()\n        // Avoid string concatenation in loops.\n\n        // #3 - with String formatter\n        // Another alternative way to create strings. Fast and readable.\n        String.format(\"%s may prefer %s.\", \"Or you\", \"String.format()\");\n        // Output: Or you may prefer String.format().\n\n        // Arrays\n        // The array size must be decided upon instantiation\n        // The following formats work for declaring an array\n        // <datatype>[] <var name> = new <datatype>[<array size>];\n        // <datatype> <var name>[] = new <datatype>[<array size>];\n        int[] intArray = new int[10];\n        String[] stringArray = new String[1];\n        boolean boolArray[] = new boolean[100];\n\n        // Another way to declare & initialize an array\n        int[] y = {9000, 1000, 1337};\n        String names[] = {\"Bob\", \"John\", \"Fred\", \"Juan Pedro\"};\n        boolean bools[] = {true, false, false};\n\n        // Indexing an array - Accessing an element\n        System.out.println(\"intArray @ 0: \" + intArray[0]);\n\n        // Arrays are zero-indexed and mutable.\n        intArray[1] = 1;\n        System.out.println(\"intArray @ 1: \" + intArray[1]); // => 1\n\n        // Other data types worth checking out\n        // ArrayLists - Like arrays except more functionality is offered, and\n        //              the size is mutable.\n        // LinkedLists - Implementation of doubly-linked list. All of the\n        //               operations perform as could be expected for a\n        //               doubly-linked list.\n        // Maps - A mapping of key Objects to value Objects. Map is\n        //        an interface and therefore cannot be instantiated.\n        //        The type of keys and values contained in a Map must\n        //        be specified upon instantiation of the implementing\n        //        class. Each key may map to only one corresponding value,\n        //        and each key may appear only once (no duplicates).\n        // HashMaps - This class uses a hashtable to implement the Map\n        //            interface. This allows the execution time of basic\n        //            operations, such as get and insert element, to remain\n        //            constant-amortized even for large sets.\n        // TreeMap - A Map that is sorted by its keys. Each modification\n        //           maintains the sorting defined by either a Comparator\n        //           supplied at instantiation, or comparisons of each Object\n        //           if they implement the Comparable interface.\n        //           Failure of keys to implement Comparable combined with failure to\n        //           supply a Comparator will throw ClassCastExceptions.\n        //           Insertion and removal operations take O(log(n)) time\n        //           so avoid using this data structure unless you are taking\n        //           advantage of the sorting.\n\n        ///////////////////////////////////////\n        // Operators\n        ///////////////////////////////////////\n        System.out.println(\"\\n->Operators\");\n\n        int i1 = 1, i2 = 2;\n\n        // Arithmetic is straightforward\n        System.out.println(\"1+2 = \" + (i1 + i2)); // => 3\n        System.out.println(\"2-1 = \" + (i2 - i1)); // => 1\n        System.out.println(\"2*1 = \" + (i2 * i1)); // => 2\n        System.out.println(\"1/2 = \" + (i1 / i2)); // => 0 (int/int returns int)\n        System.out.println(\"1/2.0 = \" + (i1 / (double)i2)); // => 0.5\n\n        // Modulo\n        System.out.println(\"11%3 = \" + (11 % 3)); // => 2\n\n        // Comparison operators\n        System.out.println(\"3 == 2? \" + (3 == 2)); // => false\n        System.out.println(\"3 != 2? \" + (3 != 2)); // => true\n        System.out.println(\"3 > 2? \" + (3 > 2)); // => true\n        System.out.println(\"3 < 2? \" + (3 < 2)); // => false\n        System.out.println(\"2 <= 2? \" + (2 <= 2)); // => true\n        System.out.println(\"2 >= 2? \" + (2 >= 2)); // => true\n\n        // Boolean operators\n        System.out.println(\"3 > 2 && 2 > 3? \" + ((3 > 2) && (2 > 3))); // => false\n        System.out.println(\"3 > 2 || 2 > 3? \" + ((3 > 2) || (2 > 3))); // => true\n        System.out.println(\"!(3 == 2)? \" + (!(3 == 2))); // => true\n\n        // Bitwise operators!\n        /*\n        ~      Unary bitwise complement\n        <<     Signed left shift\n        >>     Signed/Arithmetic right shift\n        >>>    Unsigned/Logical right shift\n        &      Bitwise AND\n        ^      Bitwise exclusive OR\n        |      Bitwise inclusive OR\n        */\n\n        // Increment operators\n        int i = 0;\n        System.out.println(\"\\n->Inc/Dec-rementation\");\n        // The ++ and -- operators increment and decrement by 1 respectively.\n        // If they are placed before the variable, they increment then return;\n        // after the variable they return then increment.\n        System.out.println(i++); // i = 1, prints 0 (post-increment)\n        System.out.println(++i); // i = 2, prints 2 (pre-increment)\n        System.out.println(i--); // i = 1, prints 2 (post-decrement)\n        System.out.println(--i); // i = 0, prints 0 (pre-decrement)\n\n        ///////////////////////////////////////\n        // Control Structures\n        ///////////////////////////////////////\n        System.out.println(\"\\n->Control Structures\");\n\n        // If statements are c-like\n        int j = 10;\n        if (j == 10) {\n            System.out.println(\"I get printed\");\n        } else if (j > 10) {\n            System.out.println(\"I don't\");\n        } else {\n            System.out.println(\"I also don't\");\n        }\n\n        // While loop\n        int fooWhile = 0;\n        while (fooWhile < 100) {\n            System.out.println(fooWhile);\n            // Increment the counter\n            // Iterated 100 times, fooWhile 0,1,2...99\n            fooWhile++;\n        }\n        System.out.println(\"fooWhile Value: \" + fooWhile);\n\n        // Do While Loop\n        int fooDoWhile = 0;\n        do {\n            System.out.println(fooDoWhile);\n            // Increment the counter\n            // Iterated 100 times, fooDoWhile 0->99\n            fooDoWhile++;\n        } while (fooDoWhile < 100);\n        System.out.println(\"fooDoWhile Value: \" + fooDoWhile);\n\n        // For Loop\n        // for loop structure => for(<start_statement>; <conditional>; <step>)\n        for (int fooFor = 0; fooFor < 10; fooFor++) {\n            System.out.println(fooFor);\n            // Iterated 10 times, fooFor 0->9\n        }\n        System.out.println(\"fooFor Value: \" + fooFor);\n\n        // Nested For Loop Exit with Label\n        outer:\n        for (int i = 0; i < 10; i++) {\n          for (int j = 0; j < 10; j++) {\n            if (i == 5 && j ==5) {\n              break outer;\n              // breaks out of outer loop instead of only the inner one\n            }\n          }\n        }\n\n        // For Each Loop\n        // The for loop is also able to iterate over arrays as well as objects\n        // that implement the Iterable interface.\n        int[] fooList = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n        // for each loop structure => for (<object> : <iterable>)\n        // reads as: for each element in the iterable\n        // note: the object type must match the element type of the iterable.\n        for (int bar : fooList) {\n            System.out.println(bar);\n            //Iterates 9 times and prints 1-9 on new lines\n        }\n\n        // Switch Case\n        // A switch works with the byte, short, char, and int data types.\n        // It also works with enumerated types (discussed in Enum Types), the\n        // String class, and a few special classes that wrap primitive types:\n        // Character, Byte, Short, and Integer.\n        // Starting in Java 7 and above, we can also use the String type.\n        // Note: Do remember that, not adding \"break\" at end any particular case ends up in\n        // executing the very next case(given it satisfies the condition provided) as well.\n        int month = 3;\n        String monthString;\n        switch (month) {\n            case 1: monthString = \"January\";\n                    break;\n            case 2: monthString = \"February\";\n                    break;\n            case 3: monthString = \"March\";\n                    break;\n            default: monthString = \"Some other month\";\n                     break;\n        }\n        System.out.println(\"Switch Case Result: \" + monthString);\n\n\n        // Try-with-resources (Java 7+)\n        // Try-catch-finally statements work as expected in Java but in Java 7+\n        // the try-with-resources statement is also available. Try-with-resources\n        // simplifies try-catch-finally statements by closing resources\n        // automatically.\n\n        // In order to use a try-with-resources, include an instance of a class\n        // in the try statement. The class must implement java.lang.AutoCloseable.\n        try (BufferedReader br = new BufferedReader(new FileReader(\"foo.txt\"))) {\n            // You can attempt to do something that could throw an exception.\n            System.out.println(br.readLine());\n            // In Java 7, the resource will always be closed, even if it throws\n            // an Exception.\n        } catch (IOException | SQLException ex) {\n            // Java 7+ Multi catch block handle both exceptions\n        } catch (Exception ex) {\n            //The resource will be closed before the catch statement executes.\n            System.out.println(\"readLine() failed.\");\n        }\n        // No need for a finally statement in this case, the BufferedReader is\n        // already closed. This can be used to avoid certain edge cases where\n        // a finally statement might not be called.\n        // To learn more:\n        // https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\n\n\n        // Conditional Shorthand\n        // You can use the '?' operator for quick assignments or logic forks.\n        // Reads as \"If (statement) is true, use <first value>, otherwise, use\n        // <second value>\"\n        int foo = 5;\n        String bar = (foo < 10) ? \"A\" : \"B\";\n        System.out.println(\"bar : \" + bar); // Prints \"bar : A\", because the\n        // statement is true.\n        // Or simply\n        System.out.println(\"bar : \" + (foo < 10 ? \"A\" : \"B\"));\n\n\n        ////////////////////////////////////////\n        // Converting Data Types\n        ////////////////////////////////////////\n\n        // Converting data\n\n        // Convert String To Integer\n        Integer.parseInt(\"123\");//returns an integer version of \"123\"\n\n        // Convert Integer To String\n        Integer.toString(123);//returns a string version of 123\n\n        // For other conversions check out the following classes:\n        // Double\n        // Long\n        // String\n\n        ///////////////////////////////////////\n        // Classes And Functions\n        ///////////////////////////////////////\n\n        System.out.println(\"\\n->Classes & Functions\");\n\n        // (definition of the Bicycle class follows)\n\n        // Use new to instantiate a class\n        Bicycle trek = new Bicycle();\n\n        // Call object methods\n        trek.speedUp(3); // You should always use setter and getter methods\n        trek.setCadence(100);\n\n        // toString returns this Object's string representation.\n        System.out.println(\"trek info: \" + trek.toString());\n    } // End main method\n\n    private static class TestInitialization {\n        // Double Brace Initialization\n        // Before Java 11, the Java Language had no syntax for how to create\n        // static Collections in an easy way. Usually you end up like this:\n        private static final Set<String> COUNTRIES = new HashSet<String>();\n        static {\n           COUNTRIES.add(\"DENMARK\");\n           COUNTRIES.add(\"SWEDEN\");\n           COUNTRIES.add(\"FINLAND\");\n        }\n\n        // There's a nifty way to achieve the same thing, \n        // by using something that is called Double Brace Initialization.\n        private static final Set<String> COUNTRIES_DOUBLE_BRACE = \n        new HashSet<String>() {{\n            add(\"DENMARK\");\n            add(\"SWEDEN\");\n            add(\"FINLAND\");\n        }}\n\n        // The first brace is creating a new AnonymousInnerClass and the\n        // second one declares an instance initializer block. This block\n        // is called when the anonymous inner class is created.\n        // This does not only work for Collections, it works for all\n        // non-final classes.\n\n\n        // Another option was to initialize the Collection from an array,\n        // using Arrays.asList() method:\n        private static final List<String> COUNTRIES_AS_LIST = \n                        Arrays.asList(\"SWEDEN\", \"DENMARK\", \"NORWAY\");\n        // This has one catch: the list we get is internally backed by the array,\n        // and since arrays can't change their size, the list backed by the array\n        // is not resizeable, which means we can't add new elements to it: \n        public static void main(String[] args) {\n            COUNTRIES.add(\"FINLAND\"); // throws UnsupportedOperationException!\n            // However, we can replace elements by index, just like in array: \n            COUNTRIES.set(1, \"FINLAND\");\n            System.out.println(COUNTRIES); // prints [SWEDEN, FINLAND, NORWAY]\n        }\n        // The resizing problem can be circumvented \n        // by creating another Collection from the List:\n         private static final Set<String> COUNTRIES_SET = \n                new HashSet<>(Arrays.asList(\"SWEDEN\", \"DENMARK\", \"NORWAY\"));\n        // It's perfectly fine to add anything to the Set of COUNTRIES now. \n    } // End TestInitialization class\n\n    private static class TestJava11Initialization {\n        // Since Java 11, there is a convenient option to initialize Collections:\n        // Set.of() and List.of() methods. \n        private static final Set<String> COUNTRIES = \n                Set.of(\"SWEDEN\", \"DENMARK\", \"NORWAY\");\n        // There is a massive catch, though: Lists and Sets initialized like this \n        // 1) are immutable \n        // 2) can't contain null elements (even check for null elements fails)!\n        public static void main(String[] args) {\n            COUNTRIES.add(\"FINLAND\"); // throws UnsupportedOperationException\n            COUNTRIES.remove(\"NORWAY\"); // throws UnsupportedOperationException \n            COUNTRIES.contains(null); // throws NullPointerException\n        }\n        private static final Set<String> COUNTRIES_WITH_NULL = \n                    Set.of(\"SWEDEN\", null, \"NORWAY\"); // throws NullPointerException\n\n    } // End TestJava11Initialization class\n} // End LearnJava class\n\n// You can include other, non-public outer-level classes in a .java file,\n// but it is not good practice. Instead split classes into separate files.\n\n// Class Declaration Syntax:\n// <public/private/protected> class <class name> {\n//    // data fields, constructors, functions all inside.\n//    // functions are called as methods in Java.\n// }\n\nclass Bicycle {\n\n    // Bicycle's Fields/Variables\n    public int cadence; // Public: Can be accessed from anywhere\n    private int speed;  // Private: Only accessible from within the class\n    protected int gear; // Protected: Accessible from the class and subclasses\n    String name; // default: Only accessible from within this package\n    static String className; // Static class variable\n\n    // Static block\n    // Java has no implementation of static constructors, but\n    // has a static block that can be used to initialize class variables\n    // (static variables).\n    // This block will be called when the class is loaded.\n    static {\n        className = \"Bicycle\";\n    }\n\n    // Constructors are a way of creating classes\n    // This is a constructor\n    public Bicycle() {\n        // You can also call another constructor:\n        // this(1, 50, 5, \"Bontrager\");\n        gear = 1;\n        cadence = 50;\n        speed = 5;\n        name = \"Bontrager\";\n    }\n    // This is a constructor that takes arguments\n    public Bicycle(int startCadence, int startSpeed, int startGear,\n        String name) {\n        this.gear = startGear;\n        this.cadence = startCadence;\n        this.speed = startSpeed;\n        this.name = name;\n    }\n\n    // Method Syntax:\n    // <public/private/protected> <return type> <function name>(<args>)\n\n    // Java classes often implement getters and setters for their fields\n\n    // Method declaration syntax:\n    // <access modifier> <return type> <method name>(<args>)\n    public int getCadence() {\n        return cadence;\n    }\n\n    // void methods require no return statement\n    public void setCadence(int newValue) {\n        cadence = newValue;\n    }\n    public void setGear(int newValue) {\n        gear = newValue;\n    }\n    public void speedUp(int increment) {\n        speed += increment;\n    }\n    public void slowDown(int decrement) {\n        speed -= decrement;\n    }\n    public void setName(String newName) {\n        name = newName;\n    }\n    public String getName() {\n        return name;\n    }\n\n    //Method to display the attribute values of this Object.\n    @Override // Inherited from the Object class.\n    public String toString() {\n        return \"gear: \" + gear + \" cadence: \" + cadence + \" speed: \" + speed +\n            \" name: \" + name;\n    }\n} // end class Bicycle\n\n// PennyFarthing is a subclass of Bicycle\nclass PennyFarthing extends Bicycle {\n    // (Penny Farthings are those bicycles with the big front wheel.\n    // They have no gears.)\n\n    public PennyFarthing(int startCadence, int startSpeed) {\n        // Call the parent constructor with super\n        super(startCadence, startSpeed, 0, \"PennyFarthing\");\n    }\n\n    // You should mark a method you're overriding with an @annotation.\n    // To learn more about what annotations are and their purpose check this\n    // out: http://docs.oracle.com/javase/tutorial/java/annotations/\n    @Override\n    public void setGear(int gear) {\n        this.gear = 0;\n    }\n}\n\n// Object casting\n// Since the PennyFarthing class is extending the Bicycle class, we can say\n// a PennyFarthing is a Bicycle and write :\n// Bicycle bicycle = new PennyFarthing();\n// This is called object casting where an object is taken for another one. There\n// are lots of details and deals with some more intermediate concepts here:\n// https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html\n\n// Interfaces\n// Interface declaration syntax\n// <access-level> interface <interface-name> extends <super-interfaces> {\n//     // Constants\n//     // Method declarations\n// }\n\n// Example - Food:\npublic interface Edible {\n    public void eat(); // Any class that implements this interface, must\n                       // implement this method.\n}\n\npublic interface Digestible {\n    public void digest();\n    // Since Java 8, interfaces can have default method.\n    public default void defaultMethod() {\n        System.out.println(\"Hi from default method ...\");\n    }\n}\n\n// We can now create a class that implements both of these interfaces.\npublic class Fruit implements Edible, Digestible {\n    @Override\n    public void eat() {\n        // ...\n    }\n\n    @Override\n    public void digest() {\n        // ...\n    }\n}\n\n// In Java, you can extend only one class, but you can implement many\n// interfaces. For example:\npublic class ExampleClass extends ExampleClassParent implements InterfaceOne,\n    InterfaceTwo {\n    @Override\n    public void InterfaceOneMethod() {\n    }\n\n    @Override\n    public void InterfaceTwoMethod() {\n    }\n\n}\n\n// Abstract Classes\n\n// Abstract Class declaration syntax\n// <access-level> abstract class <abstract-class-name> extends\n// <super-abstract-classes> {\n//     // Constants and variables\n//     // Method declarations\n// }\n\n// Abstract Classes cannot be instantiated.\n// Abstract classes may define abstract methods.\n// Abstract methods have no body and are marked abstract\n// Non-abstract child classes must @Override all abstract methods\n// from their super-classes.\n// Abstract classes can be useful when combining repetitive logic\n// with customised behavior, but as Abstract classes require\n// inheritance, they violate \"Composition over inheritance\"\n// so consider other approaches using composition.\n// https://en.wikipedia.org/wiki/Composition_over_inheritance\n\npublic abstract class Animal\n{\n    private int age;\n\n    public abstract void makeSound();\n\n    // Method can have a body\n    public void eat()\n    {\n        System.out.println(\"I am an animal and I am Eating.\");\n        // Note: We can access private variable here.\n        age = 30;\n    }\n\n    public void printAge()\n    {\n        System.out.println(age);\n    }\n\n    // Abstract classes can have main method.\n    public static void main(String[] args)\n    {\n        System.out.println(\"I am abstract\");\n    }\n}\n\nclass Dog extends Animal\n{\n    // Note still have to override the abstract methods in the\n    // abstract class.\n    @Override\n    public void makeSound()\n    {\n        System.out.println(\"Bark\");\n        // age = 30;    ==> ERROR!    age is private to Animal\n    }\n\n    // NOTE: You will get an error if you used the\n    // @Override annotation here, since java doesn't allow\n    // overriding of static methods.\n    // What is happening here is called METHOD HIDING.\n    // Check out this SO post: http://stackoverflow.com/questions/16313649/\n    public static void main(String[] args)\n    {\n        Dog pluto = new Dog();\n        pluto.makeSound();\n        pluto.eat();\n        pluto.printAge();\n    }\n}\n\n// Final Classes\n\n// Final Class declaration syntax\n// <access-level> final <final-class-name> {\n//     // Constants and variables\n//     // Method declarations\n// }\n\n// Final classes are classes that cannot be inherited from and are therefore a\n// final child. In a way, final classes are the opposite of abstract classes\n// because abstract classes must be extended, but final classes cannot be\n// extended.\npublic final class SaberToothedCat extends Animal\n{\n    // Note still have to override the abstract methods in the\n    // abstract class.\n    @Override\n    public void makeSound()\n    {\n        System.out.println(\"Roar\");\n    }\n}\n\n// Final Methods\npublic abstract class Mammal()\n{\n    // Final Method Syntax:\n    // <access modifier> final <return type> <function name>(<args>)\n\n    // Final methods, like, final classes cannot be overridden by a child\n    // class, and are therefore the final implementation of the method.\n    public final boolean isWarmBlooded()\n    {\n        return true;\n    }\n}\n\n// Java Records are a concise way to define immutable data carrier classes, automatically\n// generating boilerplate code like constructors, equals(), hashCode()and toString().\n// This automatically creates an immutable class Person with fields name and age.\npublic record Person(String name, int age) {}\nPerson p = new Person(\"Alice\", 30);\n\n// Enum Type\n//\n// An enum type is a special data type that enables for a variable to be a set\n// of predefined constants. The variable must be equal to one of the values\n// that have been predefined for it. Because they are constants, the names of\n// an enum type's fields are in uppercase letters. In the Java programming\n// language, you define an enum type by using the enum keyword. For example,\n// you would specify a days-of-the-week enum type as:\npublic enum Day {\n    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,\n    THURSDAY, FRIDAY, SATURDAY\n}\n\n// We can use our enum Day like that:\npublic class EnumTest {\n    // Variable Enum\n    Day day;\n\n    public EnumTest(Day day) {\n        this.day = day;\n    }\n\n    public void tellItLikeItIs() {\n        switch (day) {\n            case MONDAY:\n                System.out.println(\"Mondays are bad.\");\n                break;\n            case FRIDAY:\n                System.out.println(\"Fridays are better.\");\n                break;\n            case SATURDAY:\n            case SUNDAY:\n                System.out.println(\"Weekends are best.\");\n                break;\n            default:\n                System.out.println(\"Midweek days are so-so.\");\n                break;\n        }\n    }\n\n    public static void main(String[] args) {\n        EnumTest firstDay = new EnumTest(Day.MONDAY);\n        firstDay.tellItLikeItIs(); // => Mondays are bad.\n        EnumTest thirdDay = new EnumTest(Day.WEDNESDAY);\n        thirdDay.tellItLikeItIs(); // => Midweek days are so-so.\n    }\n}\n\n// Enum types are much more powerful than we show above.\n// The enum body can include methods and other fields.\n// You can see more at https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html\n\n// Getting Started with Lambda Expressions\n//\n// New to Java version 8 are lambda expressions. Lambdas are more commonly found\n// in functional programming languages, which means they are methods which can\n// be created without belonging to a class, passed around as if it were itself\n// an object, and executed on demand.\n//\n// Final note, lambdas must implement a functional interface. A functional\n// interface is one which has only a single abstract method declared. It can\n// have any number of default methods. Lambda expressions can be used as an\n// instance of that functional interface. Any interface meeting the requirements\n// is treated as a functional interface. You can read more about interfaces\n// above.\n//\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.function.*;\nimport java.security.SecureRandom;\n\npublic class Lambdas {\n    public static void main(String[] args) {\n        // Lambda declaration syntax:\n        // <zero or more parameters> -> <expression body or statement block>\n\n        // We will use this hashmap in our examples below.\n        Map<String, String> planets = new HashMap<>();\n            planets.put(\"Mercury\", \"87.969\");\n            planets.put(\"Venus\", \"224.7\");\n            planets.put(\"Earth\", \"365.2564\");\n            planets.put(\"Mars\", \"687\");\n            planets.put(\"Jupiter\", \"4,332.59\");\n            planets.put(\"Saturn\", \"10,759\");\n            planets.put(\"Uranus\", \"30,688.5\");\n            planets.put(\"Neptune\", \"60,182\");\n\n        // Lambda with zero parameters using the Supplier functional interface\n        // from java.util.function.Supplier. The actual lambda expression is\n        // what comes after numPlanets =.\n        Supplier<String> numPlanets = () -> Integer.toString(planets.size());\n        System.out.format(\"Number of Planets: %s\\n\\n\", numPlanets.get());\n\n        // Lambda with one parameter and using the Consumer functional interface\n        // from java.util.function.Consumer. This is because planets is a Map,\n        // which implements both Collection and Iterable. The forEach used here,\n        // found in Iterable, applies the lambda expression to each member of\n        // the Collection. The default implementation of forEach behaves as if:\n        /*\n            for (T t : this)\n                action.accept(t);\n        */\n\n        // The actual lambda expression is the parameter passed to forEach.\n        planets.keySet().forEach((p) -> System.out.format(\"%s\\n\", p));\n\n        // If you are only passing a single argument, then the above can also be\n        // written as (note absent parentheses around p):\n        planets.keySet().forEach(p -> System.out.format(\"%s\\n\", p));\n\n        // Tracing the above, we see that planets is a HashMap, keySet() returns\n        // a Set of its keys, forEach applies each element as the lambda\n        // expression of: (parameter p) -> System.out.format(\"%s\\n\", p). Each\n        // time, the element is said to be \"consumed\" and the statement(s)\n        // referred to in the lambda body is applied. Remember the lambda body\n        // is what comes after the ->.\n\n        // The above without use of lambdas would look more traditionally like:\n        for (String planet : planets.keySet()) {\n            System.out.format(\"%s\\n\", planet);\n        }\n\n        // This example differs from the above in that a different forEach\n        // implementation is used: the forEach found in the HashMap class\n        // implementing the Map interface. This forEach accepts a BiConsumer,\n        // which generically speaking is a fancy way of saying it handles\n        // the Set of each Key -> Value pairs. This default implementation\n        // behaves as if:\n        /*\n            for (Map.Entry<K, V> entry : map.entrySet())\n                action.accept(entry.getKey(), entry.getValue());\n        */\n\n        // The actual lambda expression is the parameter passed to forEach.\n        String orbits = \"%s orbits the Sun in %s Earth days.\\n\";\n        planets.forEach((K, V) -> System.out.format(orbits, K, V));\n\n        // The above without use of lambdas would look more traditionally like:\n        for (String planet : planets.keySet()) {\n            System.out.format(orbits, planet, planets.get(planet));\n        }\n\n        // Or, if following more closely the specification provided by the\n        // default implementation:\n        for (Map.Entry<String, String> planet : planets.entrySet()) {\n            System.out.format(orbits, planet.getKey(), planet.getValue());\n        }\n\n        // These examples cover only the very basic use of lambdas. It might not\n        // seem like much or even very useful, but remember that a lambda can be\n        // created as an object that can later be passed as parameters to other\n        // methods.\n    }\n}\n```\n\n## Further Reading\n\nThe links provided here below are just to get an understanding of the topic, feel free to Google and find specific examples.\n\n### Official Oracle Guides\n\n* [Java Tutorial Trail from Sun / Oracle](https://docs.oracle.com/javase/tutorial/index.html)\n* [Java Access level modifiers](https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html)\n* [Object-Oriented Programming Concepts](https://docs.oracle.com/javase/tutorial/java/concepts/index.html):\n    * [Inheritance](https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html)\n    * [Polymorphism](https://docs.oracle.com/javase/tutorial/java/IandI/polymorphism.html)\n    * [Abstraction](https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html)\n* [Exceptions](https://docs.oracle.com/javase/tutorial/essential/exceptions/index.html)\n* [Interfaces](https://docs.oracle.com/javase/tutorial/java/IandI/createinterface.html)\n* [Generics](https://docs.oracle.com/javase/tutorial/java/generics/index.html)\n* [Java Code Conventions](https://www.oracle.com/technetwork/java/codeconvtoc-136057.html)\n* New features in Java 8:\n    * [Lambda expressions (functional programming)](https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html)\n    * [Date and time API (java.time package)](http://www.oracle.com/technetwork/articles/java/jf14-date-time-2125367.html)\n\n### Online Practice and Tutorials\n\n* [Codingbat.com](http://codingbat.com/java)\n* [Codewars - Java Katas](https://www.codewars.com/?language=java)\n* [University of Helsinki - Object-Oriented programming with Java](http://moocfi.github.io/courses/2013/programming-part-1/)\n\n### Books\n\n* [Head First Java](http://www.headfirstlabs.com/books/hfjava/)\n* [Thinking in Java](https://www.amazon.com/Thinking-Java-4th-Bruce-Eckel/dp/0131872486/)\n* [Objects First with Java](https://www.amazon.com/Objects-First-Java-Practical-Introduction/dp/0132492660)\n* [Java The Complete Reference](https://www.amazon.com/gp/product/0071606300)\n"
        },
        {
          "name": "javascript.md",
          "type": "blob",
          "size": 21.162109375,
          "content": "---\nname: JavaScript\ncontributors:\n    - [\"Leigh Brenecki\", \"https://leigh.net.au\"]\n    - [\"Ariel Krakowski\", \"http://www.learneroo.com\"]\nfilename: javascript.js\n---\n\nJavaScript was created by Netscape's Brendan Eich in 1995. It was originally\nintended as a simpler scripting language for websites, complementing the use of\nJava for more complex web applications, but its tight integration with Web pages\nand built-in support in browsers has caused it to become far more common than\nJava in web frontends.\n\nJavaScript isn't just limited to web browsers, though: Node.js, a project that\nprovides a standalone runtime for Google Chrome's V8 JavaScript engine, is\nbecoming more and more popular.\n\nJavaScript has a C-like syntax, so if you've used languages like C or Java,\na lot of the basic syntax will already be familiar. Despite this, and despite\nthe similarity in name, JavaScript's object model is significantly different to\nJava's.\n\n```js\n// Single-line comments start with two slashes.\n/* Multiline comments start with slash-star,\n   and end with star-slash */\n\n// Statements can be terminated by ;\ndoStuff();\n\n// ... but they don't have to be, as semicolons are automatically inserted\n// wherever there's a newline, except in certain cases.\ndoStuff()\n\n// Because those cases can cause unexpected results, we'll keep on using\n// semicolons in this guide.\n\n///////////////////////////////////\n// 1. Numbers, Strings and Operators\n\n// JavaScript has one number type (which is a 64-bit IEEE 754 double).\n// Doubles have a 52-bit mantissa, which is enough to store integers\n// up to about 9✕10¹⁵ precisely.\n3; // = 3\n1.5; // = 1.5\n\n// Some basic arithmetic works as you'd expect.\n1 + 1; // = 2\n0.1 + 0.2; // = 0.30000000000000004\n8 - 1; // = 7\n10 * 2; // = 20\n35 / 5; // = 7\n\n// Including uneven division.\n5 / 2; // = 2.5\n\n// And modulo division.\n10 % 2; // = 0\n30 % 4; // = 2\n18.5 % 7; // = 4.5\n\n// Bitwise operations also work; when you perform a bitwise operation your float\n// is converted to a signed int *up to* 32 bits.\n1 << 2; // = 4\n\n// Precedence is enforced with parentheses.\n(1 + 3) * 2; // = 8\n\n// There are three special not-a-real-number values:\nInfinity; // result of e.g. 1/0\n-Infinity; // result of e.g. -1/0\nNaN; // result of e.g. 0/0, stands for 'Not a Number'\n\n// There's also a boolean type.\ntrue;\nfalse;\n\n// Strings are created with ' or \".\n'abc';\n\"Hello, world\";\n\n// Negation uses the ! symbol\n!true; // = false\n!false; // = true\n\n// Equality is ===\n1 === 1; // = true\n2 === 1; // = false\n\n// Inequality is !==\n1 !== 1; // = false\n2 !== 1; // = true\n\n// More comparisons\n1 < 10; // = true\n1 > 10; // = false\n2 <= 2; // = true\n2 >= 2; // = true\n\n// Strings are concatenated with +\n\"Hello \" + \"world!\"; // = \"Hello world!\"\n\n// ... which works with more than just strings\n\"1, 2, \" + 3; // = \"1, 2, 3\"\n\"Hello \" + [\"world\", \"!\"]; // = \"Hello world,!\"\n\n// ...which can result in some weird behaviour...\n13 + !0; // 14\n\"13\" + !0; // '13true'\n\n// and are compared with < and >\n\"a\" < \"b\"; // = true\n\n// Type coercion is performed for comparisons with double equals...\n\"5\" == 5; // = true\nnull == undefined; // = true\n\n// ...unless you use ===\n\"5\" === 5; // = false\nnull === undefined; // = false\n\n// You can access characters in a string with `charAt`\n\"This is a string\".charAt(0);  // = 'T'\n\n// ...or use `substring` to get larger pieces.\n\"Hello world\".substring(0, 5); // = \"Hello\"\n\n// `length` is a property, so don't use ().\n\"Hello\".length; // = 5\n\n// There's also `null` and `undefined`.\nnull;      // used to indicate a deliberate non-value\nundefined; // used to indicate a value is not currently present (although\n           // `undefined` is actually a value itself)\n\n// false, null, undefined, NaN, 0 and \"\" are falsy; everything else is truthy.\n// Note that 0 is falsy and \"0\" is truthy, even though 0 == \"0\".\n\n///////////////////////////////////\n// 2. Variables, Arrays and Objects\n\n// Variables are declared with the `var` keyword. JavaScript is dynamically\n// typed, so you don't need to specify type. Assignment uses a single `=`\n// character.\nvar someVar = 5;\n\n// If you leave the var keyword off, you won't get an error...\nsomeOtherVar = 10;\n\n// ...but your variable will be created in the global scope, not in the scope\n// you defined it in.\n\n// Variables declared without being assigned to are set to undefined.\nvar someThirdVar; // = undefined\n\n// If you want to declare a couple of variables, then you could use a comma\n// separator\nvar someFourthVar = 2, someFifthVar = 4;\n\n// There's shorthand for performing math operations on variables:\nsomeVar += 5; // equivalent to someVar = someVar + 5; someVar is 10 now\nsomeVar *= 10; // now someVar is 100\n\n// and an even-shorter-hand for adding or subtracting 1\nsomeVar++; // now someVar is 101\nsomeVar--; // back to 100\n\n// Arrays are ordered lists of values, of any type.\nvar myArray = [\"Hello\", 45, true];\n\n// Their members can be accessed using the square-brackets subscript syntax.\n// Array indices start at zero.\nmyArray[1]; // = 45\n\n// Arrays are mutable and of variable length.\nmyArray.push(\"World\");\nmyArray.length; // = 4\n\n// Add/Modify at specific index\nmyArray[3] = \"Hello\";\n\n// Add and remove element from front or back end of an array\nmyArray.unshift(3); // Add as the first element\nsomeVar = myArray.shift(); // Remove first element and return it\nmyArray.push(3); // Add as the last element\nsomeVar = myArray.pop(); // Remove last element and return it\n\n// Join all elements of an array with semicolon\nvar myArray0 = [32,false,\"js\",12,56,90];\nmyArray0.join(\";\"); // = \"32;false;js;12;56;90\"\n\n// Get subarray of elements from index 1 (include) to 4 (exclude)\nmyArray0.slice(1,4); // = [false,\"js\",12]\n\n// Remove 4 elements starting from index 2, and insert there strings\n// \"hi\",\"wr\" and \"ld\"; return removed subarray\nmyArray0.splice(2,4,\"hi\",\"wr\",\"ld\"); // = [\"js\",12,56,90]\n// myArray0 === [32,false,\"hi\",\"wr\",\"ld\"]\n\n// JavaScript's objects are equivalent to \"dictionaries\" or \"maps\" in other\n// languages: an unordered collection of key-value pairs.\nvar myObj = {key1: \"Hello\", key2: \"World\"};\n\n// Keys are strings, but quotes aren't required if they're a valid\n// JavaScript identifier. Values can be any type.\nvar myObj = {myKey: \"myValue\", \"my other key\": 4};\n\n// Object attributes can also be accessed using the subscript syntax,\nmyObj[\"my other key\"]; // = 4\n\n// ... or using the dot syntax, provided the key is a valid identifier.\nmyObj.myKey; // = \"myValue\"\n\n// Objects are mutable; values can be changed and new keys added.\nmyObj.myThirdKey = true;\n\n// If you try to access a value that's not yet set, you'll get undefined.\nmyObj.myFourthKey; // = undefined\n\n///////////////////////////////////\n// 3. Logic and Control Structures\n\n// The `if` structure works as you'd expect.\nvar count = 1;\nif (count == 3){\n    // evaluated if count is 3\n} else if (count == 4){\n    // evaluated if count is 4\n} else {\n    // evaluated if it's not either 3 or 4\n}\n\n// As does `while`.\nwhile (true){\n    // An infinite loop!\n}\n\n// Do-while loops are like while loops, except they always run at least once.\nvar input;\ndo {\n    input = getInput();\n} while (!isValid(input));\n\n// The `for` loop is the same as C and Java:\n// initialization; continue condition; iteration.\nfor (var i = 0; i < 5; i++){\n    // will run 5 times\n}\n\n// Breaking out of labeled loops is similar to Java\nouter:\nfor (var i = 0; i < 10; i++) {\n    for (var j = 0; j < 10; j++) {\n        if (i == 5 && j ==5) {\n            break outer;\n            // breaks out of outer loop instead of only the inner one\n        }\n    }\n}\n\n// The for/in statement allows iteration over properties of an object.\nvar description = \"\";\nvar person = {fname:\"Paul\", lname:\"Ken\", age:18};\nfor (var x in person){\n    description += person[x] + \" \";\n} // description = 'Paul Ken 18 '\n\n// The for/of statement allows iteration over iterable objects (including the built-in String, \n// Array, e.g. the Array-like arguments or NodeList objects, TypedArray, Map and Set, \n// and user-defined iterables).\nvar myPets = \"\";\nvar pets = [\"cat\", \"dog\", \"hamster\", \"hedgehog\"];\nfor (var pet of pets){\n    myPets += pet + \" \";\n} // myPets = 'cat dog hamster hedgehog '\n\n// && is logical and, || is logical or\nif (house.size == \"big\" && house.colour == \"blue\"){\n    house.contains = \"bear\";\n}\nif (colour == \"red\" || colour == \"blue\"){\n    // colour is either red or blue\n}\n\n// && and || \"short circuit\", which is useful for setting default values.\nvar name = otherName || \"default\";\n\n// The `switch` statement checks for equality with `===`.\n// Use 'break' after each case\n// or the cases after the correct one will be executed too.\ngrade = 'B';\nswitch (grade) {\n  case 'A':\n    console.log(\"Great job\");\n    break;\n  case 'B':\n    console.log(\"OK job\");\n    break;\n  case 'C':\n    console.log(\"You can do better\");\n    break;\n  default:\n    console.log(\"Oy vey\");\n    break;\n}\n\n\n///////////////////////////////////\n// 4. Functions, Scope and Closures\n\n// JavaScript functions are declared with the `function` keyword.\nfunction myFunction(thing){\n    return thing.toUpperCase();\n}\nmyFunction(\"foo\"); // = \"FOO\"\n\n// Note that the value to be returned must start on the same line as the\n// `return` keyword, otherwise you'll always return `undefined` due to\n// automatic semicolon insertion. Watch out for this when using Allman style.\nfunction myFunction(){\n    return // <- semicolon automatically inserted here\n    {thisIsAn: 'object literal'};\n}\nmyFunction(); // = undefined\n\n// JavaScript functions are first class objects, so they can be reassigned to\n// different variable names and passed to other functions as arguments - for\n// example, when supplying an event handler:\nfunction myFunction(){\n    // this code will be called in 5 seconds' time\n}\nsetTimeout(myFunction, 5000);\n// Note: setTimeout isn't part of the JS language, but is provided by browsers\n// and Node.js.\n\n// Another function provided by browsers is setInterval\nfunction myFunction(){\n    // this code will be called every 5 seconds\n}\nsetInterval(myFunction, 5000);\n\n// Function objects don't even have to be declared with a name - you can write\n// an anonymous function definition directly into the arguments of another.\nsetTimeout(function(){\n    // this code will be called in 5 seconds' time\n}, 5000);\n\n// JavaScript has function scope; functions get their own scope but other blocks\n// do not.\nif (true){\n    var i = 5;\n}\ni; // = 5 - not undefined as you'd expect in a block-scoped language\n\n// This has led to a common pattern of \"immediately-executing anonymous\n// functions\", which prevent temporary variables from leaking into the global\n// scope.\n(function(){\n    var temporary = 5;\n    // We can access the global scope by assigning to the \"global object\", which\n    // in a web browser is always `window`. The global object may have a\n    // different name in non-browser environments such as Node.js.\n    window.permanent = 10;\n})();\ntemporary; // raises ReferenceError\npermanent; // = 10\n\n// One of JavaScript's most powerful features is closures. If a function is\n// defined inside another function, the inner function has access to all the\n// outer function's variables, even after the outer function exits.\nfunction sayHelloInFiveSeconds(name){\n    var prompt = \"Hello, \" + name + \"!\";\n    // Inner functions are put in the local scope by default, as if they were\n    // declared with `var`.\n    function inner(){\n        alert(prompt);\n    }\n    setTimeout(inner, 5000);\n    // setTimeout is asynchronous, so the sayHelloInFiveSeconds function will\n    // exit immediately, and setTimeout will call inner afterwards. However,\n    // because inner is \"closed over\" sayHelloInFiveSeconds, inner still has\n    // access to the `prompt` variable when it is finally called.\n}\nsayHelloInFiveSeconds(\"Adam\"); // will open a popup with \"Hello, Adam!\" in 5s\n\n///////////////////////////////////\n// 5. More about Objects; Constructors and Prototypes\n\n// Objects can contain functions.\nvar myObj = {\n    myFunc: function(){\n        return \"Hello world!\";\n    }\n};\nmyObj.myFunc(); // = \"Hello world!\"\n\n// When functions attached to an object are called, they can access the object\n// they're attached to using the `this` keyword.\nmyObj = {\n    myString: \"Hello world!\",\n    myFunc: function(){\n        return this.myString;\n    }\n};\nmyObj.myFunc(); // = \"Hello world!\"\n\n// What `this` is set to has to do with how the function is called, not where\n// it's defined. So, our function doesn't work if it isn't called in the\n// context of the object.\nvar myFunc = myObj.myFunc;\nmyFunc(); // = undefined\n\n// Inversely, a function can be assigned to the object and gain access to it\n// through `this`, even if it wasn't attached when it was defined.\nvar myOtherFunc = function(){\n    return this.myString.toUpperCase();\n};\nmyObj.myOtherFunc = myOtherFunc;\nmyObj.myOtherFunc(); // = \"HELLO WORLD!\"\n\n// We can also specify a context for a function to execute in when we invoke it\n// using `call` or `apply`.\n\nvar anotherFunc = function(s){\n    return this.myString + s;\n};\nanotherFunc.call(myObj, \" And Hello Moon!\"); // = \"Hello World! And Hello Moon!\"\n\n// The `apply` function is nearly identical, but takes an array for an argument\n// list.\n\nanotherFunc.apply(myObj, [\" And Hello Sun!\"]); // = \"Hello World! And Hello Sun!\"\n\n// This is useful when working with a function that accepts a sequence of\n// arguments and you want to pass an array.\n\nMath.min(42, 6, 27); // = 6\nMath.min([42, 6, 27]); // = NaN (uh-oh!)\nMath.min.apply(Math, [42, 6, 27]); // = 6\n\n// But, `call` and `apply` are only temporary. When we want it to stick, we can\n// use `bind`.\n\nvar boundFunc = anotherFunc.bind(myObj);\nboundFunc(\" And Hello Saturn!\"); // = \"Hello World! And Hello Saturn!\"\n\n// `bind` can also be used to partially apply (curry) a function.\n\nvar product = function(a, b){ return a * b; };\nvar doubler = product.bind(this, 2);\ndoubler(8); // = 16\n\n// When you call a function with the `new` keyword, a new object is created, and\n// made available to the function via the `this` keyword. Functions designed to be\n// called like that are called constructors.\n\nvar MyConstructor = function(){\n    this.myNumber = 5;\n};\nmyNewObj = new MyConstructor(); // = {myNumber: 5}\nmyNewObj.myNumber; // = 5\n\n// Unlike most other popular object-oriented languages, JavaScript has no\n// concept of 'instances' created from 'class' blueprints; instead, JavaScript\n// combines instantiation and inheritance into a single concept: a 'prototype'.\n\n// Every JavaScript object has a 'prototype'. When you go to access a property\n// on an object that doesn't exist on the actual object, the interpreter will\n// look at its prototype.\n\n// Some JS implementations let you access an object's prototype on the magic\n// property `__proto__`. While this is useful for explaining prototypes it's not\n// part of the standard; we'll get to standard ways of using prototypes later.\nvar myObj = {\n    myString: \"Hello world!\"\n};\nvar myPrototype = {\n    meaningOfLife: 42,\n    myFunc: function(){\n        return this.myString.toLowerCase();\n    }\n};\n\nmyObj.__proto__ = myPrototype;\nmyObj.meaningOfLife; // = 42\n\n// This works for functions, too.\nmyObj.myFunc(); // = \"hello world!\"\n\n// Of course, if your property isn't on your prototype, the prototype's\n// prototype is searched, and so on.\nmyPrototype.__proto__ = {\n    myBoolean: true\n};\nmyObj.myBoolean; // = true\n\n// There's no copying involved here; each object stores a reference to its\n// prototype. This means we can alter the prototype and our changes will be\n// reflected everywhere.\nmyPrototype.meaningOfLife = 43;\nmyObj.meaningOfLife; // = 43\n\n// The for/in statement allows iteration over properties of an object,\n// walking up the prototype chain until it sees a null prototype.\nfor (var x in myObj){\n    console.log(myObj[x]);\n}\n///prints:\n// Hello world!\n// 43\n// [Function: myFunc]\n// true\n\n// To only consider properties attached to the object itself\n// and not its prototypes, use the `hasOwnProperty()` check.\nfor (var x in myObj){\n    if (myObj.hasOwnProperty(x)){\n        console.log(myObj[x]);\n    }\n}\n///prints:\n// Hello world!\n\n// We mentioned that `__proto__` was non-standard, and there's no standard way to\n// change the prototype of an existing object. However, there are two ways to\n// create a new object with a given prototype.\n\n// The first is Object.create, which is a recent addition to JS, and therefore\n// not available in all implementations yet.\nvar myObj = Object.create(myPrototype);\nmyObj.meaningOfLife; // = 43\n\n// The second way, which works anywhere, has to do with constructors.\n// Constructors have a property called prototype. This is *not* the prototype of\n// the constructor function itself; instead, it's the prototype that new objects\n// are given when they're created with that constructor and the new keyword.\nMyConstructor.prototype = {\n    myNumber: 5,\n    getMyNumber: function(){\n        return this.myNumber;\n    }\n};\nvar myNewObj2 = new MyConstructor();\nmyNewObj2.getMyNumber(); // = 5\nmyNewObj2.myNumber = 6;\nmyNewObj2.getMyNumber(); // = 6\n\n// Built-in types like strings and numbers also have constructors that create\n// equivalent wrapper objects.\nvar myNumber = 12;\nvar myNumberObj = new Number(12);\nmyNumber == myNumberObj; // = true\n\n// Except, they aren't exactly equivalent.\ntypeof myNumber; // = 'number'\ntypeof myNumberObj; // = 'object'\nmyNumber === myNumberObj; // = false\nif (0){\n    // This code won't execute, because 0 is falsy.\n}\nif (new Number(0)){\n   // This code will execute, because wrapped numbers are objects, and objects\n   // are always truthy.\n}\n\n// However, the wrapper objects and the regular builtins share a prototype, so\n// you can actually add functionality to a string, for instance.\nString.prototype.firstCharacter = function(){\n    return this.charAt(0);\n};\n\"abc\".firstCharacter(); // = \"a\"\n\n// This fact is often used in \"polyfilling\", which is implementing newer\n// features of JavaScript in an older subset of JavaScript, so that they can be\n// used in older environments such as outdated browsers.\n\n// For instance, we mentioned that Object.create isn't yet available in all\n// implementations, but we can still use it with this polyfill:\nif (Object.create === undefined){ // don't overwrite it if it exists\n    Object.create = function(proto){\n        // make a temporary constructor with the right prototype\n        var Constructor = function(){};\n        Constructor.prototype = proto;\n        // then use it to create a new, appropriately-prototyped object\n        return new Constructor();\n    };\n}\n\n// ES6 Additions\n\n// The \"let\" keyword allows you to define variables in a lexical scope, \n// as opposed to a function scope like the var keyword does.\nlet name = \"Billy\";\n\n// Variables defined with let can be reassigned new values.\nname = \"William\";\n\n// The \"const\" keyword allows you to define a variable in a lexical scope\n// like with let, but you cannot reassign the value once one has been assigned.\n\nconst pi = 3.14;\n\npi = 4.13; // You cannot do this.\n\n// There is a new syntax for functions in ES6 known as \"lambda syntax\".\n// This allows functions to be defined in a lexical scope like with variables\n// defined by const and let. \n\nconst isEven = (number) => {\n    return number % 2 === 0;\n};\n\nisEven(7); // false\n\n// The \"equivalent\" of this function in the traditional syntax would look like this:\n\nfunction isEven(number) {\n    return number % 2 === 0;\n};\n\n// I put the word \"equivalent\" in double quotes because a function defined\n// using the lambda syntax cannot be called before the definition.\n// The following is an example of invalid usage:\n\nadd(1, 8);\n\nconst add = (firstNumber, secondNumber) => {\n    return firstNumber + secondNumber;\n};\n```\n\n## Further Reading\n\nThe [Mozilla Developer Network][1] provides excellent documentation for\nJavaScript as it's used in browsers. Plus, it's a wiki, so as you learn more you\ncan help others out by sharing your own knowledge.\n\nMDN's [A re-introduction to JavaScript][2] covers much of the concepts covered\nhere in more detail. This guide has quite deliberately only covered the\nJavaScript language itself; if you want to learn more about how to use\nJavaScript in web pages, start by learning about the [Document Object Model][3].\n\n[JavaScript Garden][5] is an in-depth guide of all the counter-intuitive parts\nof the language.\n\n[JavaScript: The Definitive Guide][6] is a classic guide and reference book.\n\n[Eloquent JavaScript][8] by Marijn Haverbeke is an excellent JS book/ebook with\nattached terminal\n\n[JavaScript: The Right Way][10] is a guide intended to introduce new developers\nto JavaScript and help experienced developers learn more about its best practices.\n\n[javascript.info][11] is a modern JavaScript tutorial covering the basics (core language and working with a browser)\nas well as advanced topics with concise explanations.\n\n\nIn addition to direct contributors to this article, some content is adapted from\nLouie Dinh's Python tutorial on this site, and the [JS Tutorial][7] on the\nMozilla Developer Network.\n\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript\n[2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\n[3]: https://developer.mozilla.org/en-US/docs/Using_the_W3C_DOM_Level_1_Core\n[5]: https://shamansir.github.io/JavaScript-Garden/\n[6]: http://www.amazon.com/gp/product/0596805527/\n[7]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\n[8]: https://www.javascripttutorial.net/\n[8]: http://eloquentjavascript.net/\n[10]: http://jstherightway.org/\n[11]: https://javascript.info/\n"
        },
        {
          "name": "jinja.md",
          "type": "blob",
          "size": 5.34375,
          "content": "---\nname: Jinja\ncontributors:\n  - [\"Adaías Magdiel\", \"https://github.com/AdaiasMagdiel\"]\nfilename: learn-jinja.j2\n---\n\n## Getting Started with Jinja\n\nJinja is a fast, expressive, and extensible templating engine for Python\napplications.\n\nJinja includes a lot of functionalities, such as:\n\n- Template inheritance and inclusion;\n- Defining and importing macros within templates;\n- Security mechanisms to prevent XSS attacks;\n- A sandboxed environment that can safely render untrusted templates;\n- Extensible filters, tests, functions, and even syntax.\n\nA Jinja template is simply a text file. Jinja doesn't require a specific\nextension, but it's common to use `.j2` or `.jinja` to make it easier for\nsome IDEs.\n\nThere are a few kinds of delimiters. The default Jinja delimiters are configured\nas follows:\n\n- `{% ... %}` for Statements\n- `{{ ... }}` for Expressions to print to the template output\n- `{# ... #}` for Comments not included in the template output\n\n```jinja\n{# This is an example of a comment. #}\n\n{#\n  You can use this syntax\n  to write multiline comments\n  as well.\n#}\n```\n\n\n## VARIABLES\n\n```jinja\n{# You have the option to access variables from the context passed to the template #}\n\n{{ foo }}\n\n{# \n  Additionally, you can use a dot (.) to access attributes of a variable or\n  use Python syntax, using []\n#}\n\n{{ foo.bar }}\n{{ foo['bar'] }}\n\n{# Within the template, you can define variables as well #}\n\n{% set name = \"Magdiel\" %}\n{{ name }}\n```\n\n## Loops\n\n```html\n<h1>Members</h1>\n<ul>\n{% for user in users %}\n    <li>{{ user.username }}</li>\n{% endfor %}\n</ul>\n\n\n<div>\n{% for key, value in my_dict.items() %}\n    <p>{{ key }}</p> - <p>{{ value }}</p>\n{% endfor %}\n</div>\n\n\n<div>\n{% for idx, url in enumerate(urls) %}\n    <a href=\"{{ url }}\">Go to url {{ idx + 1 }}</a>\n{% endfor %}\n</div>\n```\n\n## Conditionals\n\nThe if statement in Jinja is similar to the if statement in Python. It is\ncommonly used to check if a variable is defined, not empty, and not false in\nits most basic form.\n\n```html\n{% if users %}\n<ul>\n{% for user in users %}\n    <li>{{ user.username }}</li>\n{% endfor %}\n</ul>\n{% endif %}\n\n\n{# For multiple branches, elif and else can be used like in Python. #}\n\n\n{% if message.status == \"error\" %}\n    <p class=\"text-red-400\">{{ message.content }}</p>\n{% elif message.status == \"success\" %}\n    <p class=\"text-green-400\">{{ message.content }}</p>\n{% else %}\n    <p class=\"text-blue-400\">{{ message.content }}</p>\n{% endif %}\n```\n\n## Template Inheritance\n\nOne of the most powerful features of Jinja is template inheritance. You can\ncreate a base layout with predefined blocks that you can extend in another file\nand override with your own content.\n\n```html\n{# file: base.html.j2 #}\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    {% block head %}\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}{% endblock title %} - Learning Jinja</title>\n    {% endblock head %}\n</head>\n<body>\n    <main>\n        {% block content %}{% endblock %}\n        {# the endblock tag doesn't need the name of the block #}\n    </main>\n</body>\n</html>\n\n\n\n{# file: child.html.j2 #}\n\n{% extends \"base.html.j2\" %}\n\n{% block head %}\n    {{ super() }}\n    <script>\n        console.log(\"There's a console.log here\")\n    </script>\n{% endblock %}\n\n{% block title %}Home{% endblock %}\n\n{% block content %}\n    <h1>Index</h1>\n    <p>Welcome to my home homepage.</p>\n{% endblock %}\n\n\n\n{# RESULT #}\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home - Learning Jinja</title>\n    <script>\n        console.log(\"There's a console.log here\")\n    </script>\n</head>\n<body>\n    <main>\n        <h1>Index</h1>\n        <p>Welcome to my home homepage.</p>\n    </main>\n</body>\n</html>\n```\n\n### Including Content\n\nYou can include content from another template on your current template using\nthe `{% include \"template/path\" %}` tag.\n\n```html\n{# file: footer.html.j2 #}\n\n<footer>\n    <p>&copy; 2024 - John Doe</p>\n</footer>\n\n\n\n{# file: index.html.j2 #}\n...\n<body>\n    <main>\n        <h1>Hi! I'm John Doe!</h1>\n    </main>\n    {% include \"footer.html.j2\" %}\n</body>\n...\n\n\n\n{# RESULT #}\n\n...\n<body>\n    <main>\n        <h1>Hi! I'm John Doe!</h1>\n    </main>\n    <footer>\n        <p>&copy; 2024 - John Doe</p>\n    </footer>\n</body>\n...\n```\n\nVariables passed to the main template can also be used in the include, as the\nincluded template has access to the context of the main template.\n\n```html\n{# file: greetings.html.j2 #}\n\n<p>I'm the {{ name }} and i like to {{ hobby }}.</p>\n\n\n\n{# file: index.html.j2 #}\n\n{% set name = \"Captain Nemo\" %}\n{% set hobby = \"navigate through the depths of the ocean\" %}\n\n<div>\n    {% include \"greetings.html.j2\" %}\n</div>\n\n\n\n{# RESULT #}\n\n<div>\n    <p>I'm the Captain Nemo and i like to navigate through the depths of the ocean.</p>\n</div>\n```\n\n## Macros\n\nMacros are basically like functions in another languages. You can define macros with or without arguments and reuse them in various parts of your template.\n\n```html\n{% macro input(value=\"\", type=\"text\", placeholder=\"\") -%}\n    <input type=\"{{ type }}\" value=\"{{ value }}\" placeholder=\"{{ placeholder }}\">\n{%- endmacro %}\n\n<p>{{ input(placeholder=\"Your username\") }}</p>\n<p>{{ input(type=\"password\") }}</p>\n```\n\n## Official Documentation\n\nTo learn more, access the [official documentation](https://jinja.palletsprojects.com/en/).\n"
        },
        {
          "name": "jq.md",
          "type": "blob",
          "size": 23.5830078125,
          "content": "---\ncategory: tool\nname: jq\ncontributors:\n    - [\"Jack Kuan\", \"https://github.com/kjkuan\"]\nfilename: learnjq.sh\n---\n\n`jq` is a tool for transforming JSON inputs and generating JSON outputs. As a\nprogramming language, jq supports boolean and arithmetic expressions, object\nand array indexing; it has conditionals, functions, and even exception\nhandling... etc.  Knowing jq enables you to easily write small programs that\ncan perform complex queries on JSON documents to find answers, make reports, or\nto produce another JSON document for further processing by other programs.\n\n> **NOTE**: This guide demonstrates the use of jq from the command line,\n> specifically, under an environment running the Bash shell.\n\n```bash\n# When running jq from the command line, jq program code can be specified as the\n# first argument after any options to `jq`. We often quote such jq program with\n# single quotes (`'`) to prevent any special interpretation from the command line\n# shell.\n#\njq -n '# Comments start with # until the end of line.\n       # The -n option sets the input to the value, `null`, and prevents `jq`\n       # from reading inputs from external sources.\n'\n\n# Output:\n# null\n\n\n# By default jq reads from *STDIN* a stream of JSON inputs (values). It\n# processes each input with the jq program (filters) specified at the command\n# line, and prints the outputs of processing each input with the program to\n# *STDOUT*.\n#\necho '\n  \"hello\" 123 [\n    \"one\",\n    \"two\",\n    \"three\"\n  ]\n  { \"name\": \"jq\" }\n' |\n jq '.  # <-- the jq program here is the single dot (.), called the identity\n        # operator, which stands for the current input.\n'\n\n# Output:\n# \"hello\"\n# 123\n# [\n#   \"one\",\n#   \"two\",\n#   \"three\"\n# ]\n# {\n#   \"name\": \"jq\"\n# }\n\n\n# Notice that jq pretty-prints the outputs by default, therefore, piping\n# to `jq` is a simple way to format a response from some REST API endpoint\n# that returns JSON. E.g., `curl -s https://freegeoip.app/json/ | jq`\n\n\n# Instead of processing each JSON input with a jq program, you can also\n# ask jq to slurp them up as an array.\n#\necho '1 \"two\" 3' | jq -s .\n\n# Output:\n# [\n#   1,\n#   \"two\",\n#   3\n# ]\n\n\n# Or, treat each line as a string.\n#\n(echo line 1; echo line 2) | jq -R .\n\n# Output:\n# \"line 1\"\n# \"line 2\"\n\n\n# Or, combine -s and -R to slurp the input lines into a single string.\n#\n(echo line 1; echo line 2) | jq -sR .\n\n# Output:\n# \"line 1\\nline2\\n\"\n\n\n# Inputs can also come from a JSON file specified at the command line:\n#\necho '\"hello\"' > hello.json\njq . hello.json\n\n# Output:\n# \"hello\"\n\n\n# Passing a value into a jq program can be done with the `--arg` option.\n# Below, `val` is the variable name to bind the value, `123`, to.\n# The variable is then referenced as `$val`.\n#\njq -n --arg val 123 '$val'  # $val is the string \"123\" here\n\n# Output:\n# \"123\"\n\n\n# If you need to pass a JSON value, use `--argjson`\n#\njq -n --argjson val 123 '$val'  # $val is a number\n\n# Output:\n# 123\n\n\n# Using `--arg` or `--argjson` is an useful way of building JSON output from\n# existing input.\n#\njq --arg text \"$(date; echo \"Have a nice day!\")\" -n '{ \"today\": $text }'\n\n# Output:\n# {\n#   \"today\": \"Sun Apr 10 09:53:07 PM EDT 2022\\nHave a nice day!\"\n# }\n\n\n# Instead of outputting values as JSON, you can use the `-r` option to print\n# string values unquoted / unescaped. Non-string values are still printed as\n# JSON.\n#\necho '\"hello\" 2 [1, \"two\", null] {}' | jq -r .\n\n# Output:\n# hello\n# 2\n# [\n#   1,\n#   \"two\",\n#   null\n# ]\n# {}\n\n\n# Inside a string in jq, `\\(expr)` can be used to substitute the output of\n# `expr` into the surrounding string context.\n#\njq -rn '\"1 + 2 = \\(1+2)\"'\n\n# Output:\n# 1 + 2 = 3\n\n\n# The `-r` option is most useful for generating text outputs to be processed\n# down in a shell pipeline, especially when combined with an intepolated\n# string that is prefixed the `@sh` prefix operator.\n#\n# The `@sh` operator escapes the outputs of `\\(...)` inside a string with\n# single quotes so that each resulting string of `\\(...)` can be evaluated\n# by the shell as a single word / token / argument without special\n# interpretations.\n#\nenv_vars=$(\n    echo '{\"var1\": \"value one\", \"var2\": \"value\\ntwo\"}' \\\n     |\n    jq -r '\n      \"export \" + @sh \"var1=\\(.var1) var2=\\(.var2)\"\n      #                     ^^^^^^^^      ^^^^^^^^\n      #                  \"'value one'\"  \"'value\\ntwo'\"\n      #\n      # NOTE: The + (plus) operator here concatenates strings.\n    '\n)\necho \"$env_vars\"\neval \"$env_vars\"\ndeclare -p var1 var2\n\n# Output:\n# export var1='value one' var2='value\n# two'\n# declare -- var1=\"value one\"\n# declare -- var2=\"value\n# two\"\n\n# There are other string `@prefix` operators (e.g., @base64, @uri, @csv, ...)\n# that might be useful to you. See `man jq` for details.\n\n\n# The comma (`,`) operator in jq evaluates each operand and generates multiple\n# outputs:\n#\njq -n '\"one\", 2, [\"three\"], {\"four\": 4}'\n\n# Output:\n# \"one\"\n# 2\n# [\n#   \"three\"\n# ]\n# {\n#   \"four\": 4\n# }\n\n\n# Any JSON value is a valid jq expression that evaluates to the JSON value\n# itself.\n#\njq -n '1, \"one\", [1, 2], {\"one\": 1}, null, true, false'\n\n# Output:\n# 1\n# \"one\"\n# [\n#   1,\n#   2\n# ]\n# {\n#   \"one\": 1\n# }\n# null\n# true\n# false\n\n\n# Any jq expression can be used where a JSON value is expected, even as object\n# keys. (though parenthesis might be required for object keys or values)\n#\njq -n '[2*3, 8-1, 16/2], {(\"tw\" + \"o\"): (1 + 1)}'\n\n# Output:\n# [\n#   6,\n#   7,\n#   8\n# ]\n# {\n#   \"two\": 2\n# }\n\n\n# As a shortcut, if a JSON object key looks like a valid identifier (matching\n# the regex `^[a-zA-Z_][a-zA-Z_0-9]*$`), quotes can be omitted.\n#\njq -n '{ key_1: \"value1\" }'\n\n# If a JSON object's key's value is ommited, it is looked up in the current\n# input using the key: (see next example for the meaning of `... | ...`)\n#\njq -n '{c: 3} | {a: 1, \"b\", c}'\n\n# Output:\n# {\n#   \"a\": 1,\n#   \"b\": null,\n#   \"c\": 3\n# }\n\n\n# jq programs are more commonly written as a series of expressions (filters)\n# connected by the pipe (`|`) operator, which makes the output of its left\n# filter the input to its right filter.\n#\njq -n '1 | . + 2 | . + 3'  # first dot is 1; second dot is 3\n\n# Output:\n# 6\n\n# If an expression evaluates to multiple outputs, then jq will iterate through\n# them and propagate each output down the pipeline, and generate multiple\n# outputs in the end.\n#\njq -n '1, 2, 3 | ., 4 | .'\n\n# Output:\n# 1\n# 4\n# 2\n# 4\n# 3\n# 4\n\n# The flows of the data in the last example can be visualized like this:\n# (number prefixed with `*` indicates the current output)\n#\n# *1,  2,  3 | *1,  4 | *1\n#  1,  2,  3 |  1, *4 | *4\n#  1, *2,  3 | *2,  4 | *2\n#  1,  2,  3 |  2, *4 | *4\n#  1,  2, *3 | *3,  4 | *3\n#  1,  2,  3 |  3, *4 | *4\n#\n#\n# To put it another way, the evaluation of the above example is very similar\n# to the following pieces of code in other programming languages:\n#\n# In Python:\n#\n#   for first_dot in 1, 2, 3:\n#       for second_dot in first_dot, 4:\n#           print(second_dot)\n#\n# In Ruby:\n#\n#   [1, 2, 3].each do |dot|\n#     [dot, 4].each { |dot| puts dot }\n#   end\n#\n# In JavaScript:\n#\n#   [1, 2, 3].forEach(dot => {\n#       [dot, 4].forEach(dot => console.log(dot))\n#   })\n#\n\n\n# Below are some examples of array index and object attribute lookups using\n# the `[expr]` operator after an expression. If `expr` is a number then it's\n# an array index lookup; otherwise, it should be a string, in which case it's\n# an object attribute lookup:\n\n# Array index lookup\n#\njq -n '[2, {\"four\": 4}, 6][1 - 1]' # => 2\njq -n '[2, {\"four\": 4}, 6][0]'     # => 2\njq -n '[2, {\"four\": 4}, 6] | .[0]' # => 2\n\n# You can chain the lookups since they are just expressions.\n#\njq -n '[2, {\"four\": 4}, 6][1][\"fo\" + \"ur\"]' # => 4\n\n# For object attributes, you can also use the `.key` shortcut.\n#\njq -n '[2, {\"four\": 4}, 6][1].four'  # => 4\n\n# Use `.\"key\"` if the key is not a valid identifier.\n#\njq -n '[2, {\"f o u r\": 4}, 6][1].\"f o u r\"' # => 4\n\n# Array index lookup returns null if the index is not found.\n#\njq -n '[2, {\"four\": 4}, 6][99]' # => null\n\n# Object attribute lookup returns null if the key is not found.\n#\njq -n '[2, {\"four\": 4}, 6][1].whatever' # => null\n\n# The alternative operator `//` can be used to provide a default\n# value when the result of the left operand is either `null` or `false`.\n#\njq -n '.unknown_key // 7' # => 7\n\n# If the thing before the lookup operator (`[expr]`) is neither an array\n# or an object, then you will get an error:\n#\njq -n '123 | .[0]'     # => jq: error (at <unknown>): Cannot index number with number\njq -n '\"abc\" | .name'  # => jq: error (at <unknown>): Cannot index string with string \"name\"\njq -n '{\"a\": 97} | .[0]'    # => jq: error (at <unknown>): Cannot index object with number\njq -n '[89, 64] | .[\"key\"]' # => jq: error (at <unknown>): Cannot index array with string \"key\"\n\n# You can, however, append a `?` to a lookup to make jq return `empty`\n# instead when such error happens.\n#\njq -n '123 | .[0]?'    # no output since it's empty.\njq -n '\"abc\" | .name?' # no output since it's empty.\n\n# The alternative operator (`//`) also works with `empty`:\n#\njq -n '123 | .[0]? // 99'           # => 99\njq -n '\"abc\" | .name? // \"unknown\"' # => \"unknown\"\n\n# NOTE: `empty` is actually a built-in function in jq.\n# With the nested loop explanation we illustrated earlier before,\n# `empty` is like the `continue` or the `next` keyword that skips\n# the current iteration of the loop in some programming languages.\n\n\n# Strings and arrays can be sliced with the same syntax (`[i:j]`, but no\n# steppings) and semantic as found in the Python programming language:\n#\n#                0   1    2    3    4   5 ... infinite\n#        array = [\"a\", \"b\", \"c\", \"d\"]\n# -infinite ... -4  -3   -2   -1\n#\njq -n '[\"Peter\", \"Jerry\"][1]'            # => \"Jerry\"\njq -n '[\"Peter\", \"Jerry\"][-1]'           # => \"Jerry\"\njq -n '[\"Peter\", \"Jerry\", \"Tom\"][1:]'    # => [\"Jerry\", \"Tom\"]\njq -n '[\"Peter\", \"Jerry\", \"Tom\"][:1+1]'  # => [\"Peter\", \"Jerry\"]\njq -n '[\"Peter\", \"Jerry\", \"Tom\"][1:99]'  # => [\"Jerry\", \"Tom\"]\n\n\n# If the lookup index or key is ommited then jq iterates through\n# the collection, generating one output value from each iteration.\n#\n# These examples produce the same outputs.\n#\necho 1 2 3 | jq .\njq -n '1, 2, 3'\njq -n '[1, 2, 3][]'\njq -n '{a: 1, b: 2, c: 3}[]'\n\n# Output:\n# 1\n# 2\n# 3\n\n\n# You can build an array out of multiple outputs.\n#\njq -n '{values: [{a: 1, b: 2, c: 3}[] | . * 2]}'\n\n# Output:\n# {\n#   \"values\": [\n#     2,\n#     4,\n#     6\n#   ]\n# }\n\n\n# If multiple outputs are not contained, then we'd get multiple outputs\n# in the end.\n#\njq -n '{values: ({a: 1, b: 2, c: 3}[] | . * 2)}'\n\n# Output:\n# {\n#   \"values\": 2\n# }\n# {\n#   \"values\": 4\n# }\n# {\n#   \"values\": 6\n# }\n\n\n# Conditional `if ... then ... else ... end` in jq is an expression, so\n# both the `then` part and the `else` part are required. In jq, only\n# two values, `null` and `false`, are false; all other values are true.\n#\njq -n 'if 1 > 2 | not and 1 <= 2 then \"Makes sense\" else \"WAT?!\" end'\n\n# Output\n# \"Makes sense\"\n\n# Notice that `not` is a built-in function that takes zero arguments,\n# that's why it's used as a filter to negate its input value.\n# We'll talk about functions soon.\n\n# Another example using a conditional:\n#\njq -n '1, 2, 3, 4, 5 | if . % 2 != 0 then . else empty end'\n\n# Output\n# 1\n# 3\n# 5\n\n# The `empty` above is a built-in function that takes 0 arguments and\n# generates no outputs. Let's see more examples of built-in functions.\n\n# The above conditional example can be written using the `select/1` built-in\n# function (`/1` indicates the number of arguments expected by the function).\n#\njq -n '1, 2, 3, 4, 5 | select(. % 2 != 0)'  # NOTE: % gives the remainder.\n\n# Output\n# 1\n# 3\n# 5\n\n\n# Function arguments in jq are passed with call-by-name semantic, which\n# means, an argument is not evaulated at call site, but instead, is\n# treated as a lambda expression with the calling context of the call\n# site as its scope for variable and function references used in the\n# expression.\n#\n# In the above example, the expression `. % 2 != 0` is what's passed to\n# `select/1` as the argument, not `true` or `false`, which is what would\n# have been the case had the (boolean) expression was evaluated before it's\n# passed to the function.\n\n\n# The `range/1`, `range/2`, and `range/3` built-in functions generate\n# integers within a given range.\n#\njq -n '[range(3)]'         # => [0, 1, 2]\njq -n '[range(0; 4)]'      # => [0, 1, 2, 3]\njq -n '[range(2; 10; 2)]'  # => [2, 4, 6, 8]\n\n# Notice that `;` (semicolon) is used to separate function arguments.\n\n\n# The `map/1` function applies a given expression to each element of\n# the current input (array) and outputs a new array.\n#\njq -n '[range(1; 6) | select(. % 2 != 0)] | map(. * 2)'\n\n# Output:\n# [\n#   2,\n#   6,\n#   10\n# ]\n\n# Without using `select/1` and `map/1`, we could have also written the\n# above example like this:\n#\njq -n '[range(1; 6) | if . % 2 != 0 then . else empty end | . * 2]'\n\n\n# `keys/0` returns an array of keys of the current input. For an object,\n# these are the object's attribute names; for an array, these are the\n# array indices.\n#\njq -n '[range(2; 10; 2)] | keys'   # => [0, 1, 2, 3]\njq -n '{a: 1, b: 2, c: 3} | keys'  # => [\"a\", \"b\", \"c\"]\n\n# `values/0` returns an array of values of the current input. For an object,\n# these are the object's attribute values; for an array, these are the\n# elements of the array.\n#\njq -n '[range(2; 10; 2)] | values'   # => [2, 4, 6, 8]\njq -n '{a: 1, b: 2, c: 3} | values'  # => [1, 2, 3]\n\n\n# `to_entries/0` returns an array of key-value objects of the current input\n# object.\n#\njq -n '{a: 1, b: 2, c: 3} | to_entries'\n\n# Output:\n# [\n#   {\n#     \"key\": \"a\",\n#     \"value\": 1\n#   },\n#   {\n#     \"key\": \"b\",\n#     \"value\": 2\n#   },\n#   {\n#     \"key\": \"c\",\n#     \"value\": 3\n#   }\n# ]\n\n\n# Here's how you can turn an object's attribute into environment variables\n# using what we have learned so far.\n#\nenv_vars=$(\n    jq -rn '{var1: \"1 2  3   4\", var2: \"line1\\nline2\\n\"}\n            | to_entries[]\n            | \"export \" + @sh \"\\(.key)=\\(.value)\"\n           '\n)\neval \"$env_vars\"\ndeclare -p var1 var2\n\n# Output:\n# declare -x var1=\"1 2  3   4\"\n# declare -x var2=\"line1\n# line2\n# \"\n\n\n# `from_entries/0` is the opposite of `to_entries/0` in that it takes an\n# an array of key-value objects and turn that into an object with keys\n# and values from the `key` and `value` attributes of the objects.\n#\n# It's useful together with `to_entries/0` when you need to iterate and\n# do something to each attribute of an object.\n#\njq -n '{a: 1, b: 2, c: 3} | to_entries | map(.value *= 2) | from_entries'\n\n# Output:\n# {\n#   \"a\": 2,\n#   \"b\": 4,\n#   \"c\": 6\n# }\n\n\n# The example above can be further shortened with the  `with_entries/1` built-in:\n#\njq -n '{a: 1, b: 2, c: 3} | with_entries(.value *= 2)'\n\n\n# The `group_by/1` generates an array of groups (arrays) from the current\n# input (array). The classification is done by applying the expression argument\n# to each member of the input array.\n#\n# Let's look at a contrived example (Note that `tostring`, `tonumber`,\n# `length` and `max` are all built-in jq functions. Feel free to look\n# them up in the jq manual):\n#\n# Generate some random numbers.\nnumbers=$(echo $RANDOM{,,,,,,,,,,,,,,,,,,,,})\n#\n# Feed the numbers to jq, classifying them into groups and calculating their\n# averages, and finally generate a report.\n#\necho $numbers | jq -rs '  # Slurp the numbers into an array.\n[\n  [ map(tostring)          # Turn it into an array of strings.\n    | group_by(.[0:1])     # Group the numbers by their first digits.\n    | .[]                  # Iterate through the array of arrays (groups).\n    | map(tonumber)        # Turn each group back to an array of numbers.\n  ] # Finally, contain all groups in an array.\n\n  | sort_by([length, max]) # Sort the groups by their sizes.\n    # If two groups have the same size then the one with the largest\n    # number wins (is bigger).\n\n  | to_entries[]           # Enumerate the array, generating key-value objects.\n  |                        # For each object, generate two lines:\n  \"Group \\(.key): \\(.value | sort | join(\" \"))\"   + \"\\n\" +\n  \"Average: \\(      .value | (add / length)  )\"\n\n] # Contain the group+average lines in an array.\n  # Join the array elements by separator lines (dashes) to produce the report.\n| join(\"\\n\" + \"-\"*78 + \"\\n\")\n'\n\n# Output:\n#\n# Group 0: 3267\n# Average: 3267\n# ------------------------------------------------------------------------------\n# Group 1: 7854\n# Average: 7854\n# ------------------------------------------------------------------------------\n# Group 2: 4415 4447\n# Average: 4431\n# ------------------------------------------------------------------------------\n# Group 3: 681 6426\n# Average: 3553.5\n# ------------------------------------------------------------------------------\n# Group 4: 21263 21361 21801 21832 22947 23523 29174\n# Average: 23128.714285714286\n# ------------------------------------------------------------------------------\n# Group 5: 10373 12698 13132 13924 17444 17963 18934 18979\n# Average: 15430.875\n\n\n# The `add/1` built-in \"reduces\" an array of values to a single value.\n# You can think of it as sticking the `+` operator in between each value of\n# the collection. Here are some examples:\n#\njq -n '[1, 2, 3, 4, 5] | add'  # => 15\njq -n '[\"a\", \"b\", \"c\"] | add'  # => \"abc\"\n\n# `+` concatenates arrays\njq -n '[[\"a\"], [\"b\"], [\"c\"]] | add'\n\n# Output:\n# [\n#   \"a\",\n#   \"b\",\n#   \"c\"\n# ]\n\n# `+` merges objects non-recursively.\njq -n '[{a: 1, b: {c: 3}}, {b: 2, c: 4}] | add'\n\n# Output:\n# {\n#   \"a\": 1,\n#   \"b\": 2,\n#   \"c\": 4\n# }\n\n\n# jq provides a special syntax for writing an expression that reduces\n# the outputs generated by a given expresion to a single value.\n# It has this form:\n#\n#   reduce outputs_expr as $var (initial_value; reduction_expr)\n#\n# Examples:\n#\njq -n 'reduce range(1; 6) as $i (0; . + $i)'             # => 15\njq -n 'reduce (1, 2, 3, 4, 5) as $i (0; . + $i)'         # => 15\njq -n '[1, 2, 3, 4, 5] | reduce .[] as $i (0; . + $i)'   # => 15\njq -n '[\"a\", \"b\", \"c\"] | reduce .[] as $i (\"\"; . + $i)'  # => \"abc\"\n\n# Notice the `.` in the `reduction_expr` is the `initial_value` at first,\n# and then it becomes the result of applying the `reduction_expr` as\n# we iterate through the values of `outputs_expr`. The expression:\n#\n#    reduce (1, 2, 3, 4, 5) as $i (0; . + $i)\n#\n# can be thought of as doing:\n#\n#    0 + 1 | . + 2 | . + 3 | . + 4 | . + 5\n#\n\n\n# The `*` operator when used on two objects, merges both recursively.\n# Therefore, to merge JSON objects recursively, you can use `reduce`\n# with the `*` operator. For example:\n#\necho '\n  {\"a\": 1,  \"b\": {\"c\": 3}}\n  {         \"b\": {\"d\": 4}}\n  {\"a\": 99, \"e\": 5       }\n' | jq -s 'reduce .[] as $m ({}; . * $m)'\n\n# Output:\n# {\n#   \"a\": 99,\n#   \"b\": {\n#     \"c\": 3,\n#     \"d\": 4\n#   },\n#   \"e\": 5\n# }\n\n\n# jq has variable assignment in the form of `expr as $var`, which binds\n# the value of `expr` to `$var`, and `$var` is immutable. Further more,\n# `... as ...` doesn't change the input of the next filter; its introduction\n# in a filter pipeline is only for establishing the binding of a value to a\n# variable, and its scope extends to the filters following its definition.\n# (i.e., to look up a variable's definition, scan to the left of the filter\n# chain from the expression using it until you find the definition)\n#\njq -rn '[1, 2, 3, 4, 5]\n        | (.[0] + .[-1])      as $sum     # Always put ( ) around the binding `expr` to avoid surprises.\n        | ($sum * length / 2) as $result  # The current input at this step is still the initial array.\n        | \"The result is: \\($result)\"     # Same.\n'\n\n# Output:\n# The result is: 15\n\n\n# With the `expr as $var` form, if multiple values are generated by `expr`\n# then jq will iterate through them and bind each value to `$var` in turn\n# for the rest of the pipeline.\n#\njq -rn 'range(2; 4) as $i\n        | range(1; 6) as $j\n          | \"\\($i) * \\($j) = \\($i * $j)\"\n'\n\n# Output:\n# 2 * 1 = 2\n# 2 * 2 = 4\n# 2 * 3 = 6\n# 2 * 4 = 8\n# 2 * 5 = 10\n# 3 * 1 = 3\n# 3 * 2 = 6\n# 3 * 3 = 9\n# 3 * 4 = 12\n# 3 * 5 = 15\n\n\n# It's sometimes useful to bind the initial input to a variable at the\n# start of a program, so that you can refer to it later down the pipeline.\n#\njq -rn \"$(cat <<'EOF'\n    {lookup:  {a: 1, b: 2, c: 3},\n     bonuses: {a: 5, b: 2, c: 9}\n    }\n    | . as $doc\n    | .bonuses\n    | to_entries[]\n    | \"\\(.key)'s total is \\($doc.lookup[.key] + .value)\"\nEOF\n)\"\n\n# Output:\n# a's total is 6\n# b's total is 4\n# c's total is 12\n\n\n# jq supports destructing during varible binding. This lets you extract values\n# from an array or an object and bind them to variables.\n#\njq -n '[range(5)] | . as [$first, $second] | $second'\n\n# Output:\n# 1\n\njq -n '{ name: \"Tom\", numbers: [1, 2, 3], age: 32}\n       | . as {\n            name: $who,                  # bind .name to $who\n            $name,                       # shorthand for `name: $name`\n            numbers: [$first, $second],\n         }\n       | $name, $second, $first, $who\n'\n\n# Output:\n# \"Tom\"\n# 2\n# 1\n# \"Tom\"\n\n\n# In jq, values can be assigned to an array index or object key via the\n# assignment operator, `=`. The same current input is given to both sides\n# of the assignment operator, and the assignment itself evaluates to the\n# current input. In other words, the assignment expression is evaluated\n# for its side effect, and doesn't generate a new output.\n#\njq -n '.a = 1 | .b = .a + 1'  # => {\"a\": 1, \"b\": 2}\n\n# Note that input is `null` due to `jq -n`, so `.` is `null` in the first\n# filter, and assiging to a key under `null` turns it into an object with\n# the key. The same input (now an object) then gets piped to the next filter,\n# which then sets the `b` key to the value of the `a` key plus `1`, which is `2`.\n#\n\n# Another example:\n#\njq -n '.a=1, .a.b=2'   # => {\"a\": 1} {\"a\": {\"b\": 2}}\n\n# In the above example, two objects are generated because both assignments\n# received `null` as their inputs, and each operand of the comma operator\n# is evaluated independently. Notice also how you can easily generate\n# nested objects.\n\n\n# In addition to the assignment operator, jq also has operators like:\n# `+=`, `-=`, `*=`, and '/=', ... etc. Basically, `a op= b` is a shorthand\n# for `a = a op b`, and they are handy for updating an object attribute or\n# an item in an array based on its current value. Examples:\n#\njq -n '.a.b.c = 3 | .a.b.c = .a.b.c + 1' # => {\"a\": {\"b\": {\"c\": 4}}}\njq -n '.a.b.c = 3 | .a.b.c += 1'         # => {\"a\": {\"b\": {\"c\": 4}}}\n\n\n# To delete a value, use `del/1`, which takes a path expression that specifies\n# the locations of the things to be deleted. Example:\n#\njq -n '{a: 1, b: {c: 2}, d: [3, 4, 5]} | del(.b.c, .d[1]) | .b.x = 6'\n\n# Output:\n# {\n#   \"a\": 1,\n#   \"b\": {\n#     \"x\": 6\n#   },\n#   \"d\": [\n#     3,\n#     5\n#   ]\n# }\n\n\n# Other than using jq's built-in functions, you can define your own.\n# In fact, many built-in functions are defined using jq (see the link\n# to jq's built-in functions at the end of the doc).\n#\njq -n '\n    def my_select(expr): if expr then . else empty end;\n    def my_map(expr): [.[] | expr];\n    def sum: reduce .[] as $x (0; . + $x);\n    def my_range($from; $to):\n        if $from >= $to then\n            empty\n        else\n            $from, my_range($from + 1; $to)\n        end\n    ;\n    [my_range(1; 6)] | my_map(my_select(. % 2 != 0)) | sum\n'\n\n# Output:\n# 9\n\n# Some notes about function definitons:\n#\n# - Functions are usually defined at the beginning, so that they are available\n#   to the rest of the jq program.\n#\n# - Each function definion should end with a `;` (semicolon).\n#\n# - It's also possible to define a function within another, though it's not shown here.\n#\n# - Function parameters are separated by `;` (semicolor). This is consistent with\n#   passing multiple arguments when calling a function.\n#\n# - A function can call itself; in fact, jq has TCO (Tail Call Optimization).\n#\n# - `def f($a; $b): ...;` is a shorthand for: `def f(a; b): a as $a | b as $b | ...`\n```\n\n## Further Reading\n\n- [jq Manual](https://jqlang.github.io/jq/manual/)\n- [Language Description](https://github.com/jqlang/jq/wiki/jq-Language-Description)\n- [Cookbook](https://github.com/jqlang/jq/wiki/Cookbook)\n- [builtin.jq](https://github.com/jqlang/jq/blob/master/src/builtin.jq)\n"
        },
        {
          "name": "jquery.md",
          "type": "blob",
          "size": 5.19921875,
          "content": "---\ncategory: framework\nname: jQuery\ncontributors:\n    - [\"Sawyer Charles\", \"https://github.com/xssc\"]\n    - [\"Devansh Patil\", \"https://github.com/subtra3t\"]\nfilename: jquery.js\n---\n\njQuery is a JavaScript library that helps you \"do more, write less\". It makes many common JavaScript tasks and makes them easier to write. jQuery is used by many big companies and developers everywhere. It makes AJAX, event handling, document manipulation, and much more, easier and faster.\n\nBecause jQuery is a JavaScript library you should [learn JavaScript first](../javascript/)\n\n**NOTE**: jQuery has fallen out of the limelight in recent years, since you can achieve the same thing with the vanilla DOM (Document Object Model) API. So the only thing it is used for is a couple of handy features, such as the [jQuery date picker](https://api.jqueryui.com/datepicker) (which actually has a standard, unlike the `<input type=\"date\">` HTML element), and the obvious decrease in the code length.\n\n```js\n///////////////////////////////////\n// 1. Selectors\n\n// Selectors in jQuery are used to select an element\nvar page = $(window); // Selects the whole viewport\n\n// Selectors can also be CSS selector\nvar paragraph = $('p'); // Selects all paragraph elements\nvar table1 = $('#table1'); // Selects element with id 'table1'\nvar squares = $('.square'); // Selects all elements with the class 'square'\nvar square_p = $('p.square') // Selects paragraphs with the 'square' class\n\n\n///////////////////////////////////\n// 2. Events and Effects\n// jQuery is very good at handling what happens when an event is triggered\n// A very common event used is the ready event on the document\n// You can use the 'ready' method to wait until the element has finished loading\n$(document).ready(function(){\n  // Code won't execute until the document is loaded\n});\n// You can also use defined functions\nfunction onAction() {\n  // This is executed when the event is triggered\n}\n$('#btn').click(onAction); // Invokes onAction on click\n\n// Some other common events are:\n$('#btn').dblclick(onAction); // Double click\n$('#btn').hover(onAction); // Hovering over\n$('#btn').focus(onAction); // On focus\n$('#btn').blur(onAction); // Losses focus\n$('#btn').submit(onAction); // On submit\n$('#btn').select(onAction); // When an element is selected\n$('#btn').keydown(onAction); // When a key is pushed down\n$('#btn').keyup(onAction); // When a key is released\n$('#btn').keypress(onAction); // When a key is pressed\n$('#btn').mousemove(onAction); // When the mouse is moved\n$('#btn').mouseenter(onAction); // Mouse enters the element\n$('#btn').mouseleave(onAction); // Mouse leaves the element\n\n\n// These can all also trigger the event instead of handling it\n// by simply not giving any parameters\n$('#btn').dblclick(); // Fires double click on the element\n\n// You can handle multiple events while only using the selector once\n$('#btn').on(\n  {dblclick: myFunction1} // Triggered on double click\n  {blur: myFunction1} // Triggered on blur\n);\n\n// You can move and hide elements with some effect methods\n$('.table').hide(); // Hides the element(s)\n\n// Note: calling a function in these methods will still hide the element\n$('.table').hide(function(){\n    // Element hidden then function executed\n});\n\n// You can store selectors in variables\nvar tables = $('.table');\n\n// Some basic document manipulation methods are:\ntables.hide(); // Hides element(s)\ntables.show(); // Shows (un-hides) element(s)\ntables.toggle(); // Changes the hide/show state\ntables.fadeOut(); // Fades out\ntables.fadeIn(); // Fades in\ntables.fadeToggle(); // Fades in or out\ntables.fadeTo(0.5); // Fades to an opacity (between 0 and 1)\ntables.slideUp(); // Slides up\ntables.slideDown(); // Slides down\ntables.slideToggle(); // Slides up or down\n\n// All of the above take a speed (milliseconds) and callback function\ntables.hide(1000, myFunction); // 1 second hide animation then function\n\n// fadeTo has a required opacity as its second parameter\ntables.fadeTo(2000, 0.1, myFunction); // 2 sec. fade to 0.1 opacity then function\n\n// You can get slightly more advanced with the animate method\ntables.animate({margin-top:\"+=50\", height: \"100px\"}, 500, myFunction);\n// The animate method takes an object of css and values to end with,\n// optional options parameter to tune the animation,\n// and of course the callback function\n\n///////////////////////////////////\n// 3. Manipulation\n\n// These are similar to effects but can do more\n$('div').addClass('taming-slim-20'); // Adds class taming-slim-20 to all div\n\n// Common manipulation methods\n$('p').append('Hello world'); // Adds to end of element\n$('p').attr('class'); // Gets attribute\n$('p').attr('class', 'content'); // Sets attribute\n$('p').hasClass('taming-slim-20'); // Returns true if it has the class\n$('p').height(); // Gets height of element or sets height\n\n\n// For many manipulation methods, getting info on an element\n// will ONLY get the first matching element\n$('p').height(); // Gets only the first 'p' tag's height\n\n// You can use each to loop through all the elements\nvar heights = [];\n$('p').each(function() {\n  heights.push($(this).height()); // Adds all 'p' tag heights to array\n});\n```\n\n## Further Reading\n\n* [Codecademy - jQuery](https://www.codecademy.com/learn/learn-jquery) A good introduction to jQuery in a \"learn by doing it\" format.\n"
        },
        {
          "name": "json.md",
          "type": "blob",
          "size": 2.6962890625,
          "content": "---\nname: JSON\nfilename: learnjson.json\ncontributors:\n  - [\"Anna Harren\", \"https://github.com/iirelu\"]\n  - [\"Marco Scannadinari\", \"https://github.com/marcoms\"]\n  - [\"himanshu\", \"https://github.com/himanshu81494\"]\n  - [\"Michael Neth\", \"https://github.com/infernocloud\"]\n  - [\"Athanasios Emmanouilidis\", \"https://github.com/athanasiosem\"]\n---\n\nJSON is an extremely simple data-interchange format. As [json.org](https://json.org) says, it is easy for humans to read and write and for machines to parse and generate.\n\nA piece of JSON can be any value of the types listed later, but in practice almost always represents either:\n\n* A collection of name/value pairs (`{ }`). In various languages, this is realized as an object, record, struct, dictionary, hash table, keyed list, or associative array.\n* An ordered list of values (`[ ]`). In various languages, this is realized as an array, vector, list, or sequence.\n\nJSON in its purest form has no actual comments, but most parsers will accept C-style (`//`, `/* */`) comments. Some parsers also tolerate a trailing comma (i.e. a comma after the last element of an array or the after the last property of an object), but they should be avoided for better compatibility.\n\nFor the purposes of this tutorial, everything is going to be 100% valid JSON. Luckily, it kind of speaks for itself.\n\nSupported data types:\n\n* Strings: `\"hello\"`, `\"\\\"A quote.\\\"\"`, `\"\\u0abe\"`, `\"Newline.\\n\"`\n* Numbers: `23`, `0.11`, `12e10`, `3.141e-10`, `1.23e+4`\n* Objects: `{ \"key\": \"value\" }`\n* Arrays: `[\"Values\"]`\n* Miscellaneous: `true`, `false`, `null`\n\n```json\n{\n  \"key\": \"value\",\n\n  \"keys\": \"must always be enclosed in double quotes\",\n  \"numbers\": 0,\n  \"strings\": \"Hellø, wørld. All unicode is allowed, along with \\\"escaping\\\".\",\n  \"has bools?\": true,\n  \"nothingness\": null,\n\n  \"big number\": 1.2e+100,\n\n  \"objects\": {\n    \"comment\": \"Most of your structure will come from objects.\",\n\n    \"array\": [0, 1, 2, 3, \"Arrays can have anything in them.\", 5],\n\n    \"another object\": {\n      \"comment\": \"These things can be nested, very useful.\"\n    }\n  },\n\n  \"silliness\": [\n    {\n      \"sources of potassium\": [\"bananas\"]\n    },\n    [\n      [1, 0, 0, 0],\n      [0, 1, 0, 0],\n      [0, 0, 1, \"neo\"],\n      [0, 0, 0, 1]\n    ]\n  ],\n\n  \"alternative style\": {\n    \"comment\": \"check this out!\"\n  , \"comma position\": \"doesn't matter, if it's before the next key, it's valid\"\n  , \"another comment\": \"how nice\"\n  },\n\n\n\n  \"whitespace\": \"Does not matter.\",\n\n\n\n  \"that was short\": \"And done. You now know everything JSON has to offer.\"\n}\n```\n\n## Further Reading\n\n* [JSON.org](https://json.org) All of JSON beautifully explained using flowchart-like graphics.\n* [JSON Tutorial](https://www.youtube.com/watch?v=wI1CWzNtE-M) A concise introduction to JSON.\n"
        },
        {
          "name": "jsonnet.md",
          "type": "blob",
          "size": 4.119140625,
          "content": "---\nname: Jsonnet\nfilename: learnjsonnet.jsonnet\ncontributors:\n  - [\"Huan Wang\", \"https://github.com/fredwangwang\"]\n---\n\nJsonnet is a powerful templating language for JSON. Any valid JSON\ndocument is a valid Jsonnet object. For an interactive demo/tutorial,\nclick [here](https://jsonnet.org/learning/tutorial.html)\n\n```jsonnet\n// single line comment\n\n/*\n    multiline comment\n*/\n\n# as well as python style comment\n\n# define a variable.\n# Variables have no effect in the generated JSON without being used.\nlocal num1 = 1;\nlocal num2 = 1 + 1;\nlocal num3 = 5 - 2;\nlocal num4 = 9 % 5;\nlocal num5 = 10 / 2.0;\n# jsonnet is a lazy language, if a variable is not used, it is not evaluated.\nlocal num_runtime_error = 1 / 0;\n\n# fields are valid identifiers without quotes\nlocal obj1 = { a: 'letter a', B: 'letter B' };\n\nlocal arr1 = ['a', 'b', 'c'];\n\n# string literals use \" or '.\nlocal str1 = 'a' + 'B';\n# multiline text literal in between |||\n# Each line must start with a white space.\nlocal str_multiline = |||\n  this is a\n  multiline string\n|||;\n# Python-compatible string formatting is available via %\n# When combined with ||| this can be used for templating text files.\nlocal str_templating = |||\n  %(f1)0.3f\n||| % { f1: 1.2345678 };\nassert str_templating == '1.235\\n';\n\n# if b then e else e. The else branch is optional and defaults to null\nlocal var1 = if 3 < 2 then \"YES\";\nassert var1 == null;\n\nlocal obj2 = {\n  # variable defined inside the object ends with ','\n  local var_in_obj = 0,\n\n  local vowels = ['a', 'e', 'i', 'o', 'u'],\n  local numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n\n  # [num] to look up an array element\n  first_vowel: vowels[0],\n  # can also slice the array like in Python\n  even_numbers: numbers[1::2],\n\n  # python-style list and object comprehensions are also supported\n  double_numbers: [x * 2 for x in numbers],\n  even_numbers_map: {\n      # [ ] syntax in field name is to compute the field name dynamically\n      [x + '_is_even']: true for x in numbers if x % 2 == 0\n  },\n\n  nested: {\n    nested_field1: 'some-value',\n    # self refers to the current object\n    # [\"field-name\"] or .field-name can be used to look up a field\n    nested_field2: self.nested_field1,\n    nested_field3: self.nested_field1,\n    # $ refers to outer-most object\n    nested_field4: $.first_vowel,\n\n    assert self.nested_field1 == self.nested_field2,\n    assert self.nested_field1 == self.nested_field3,\n  },\n\n  special_field: 'EVERYTHING FEELS BAD',\n};\n\nlocal obj3 = {\n  local var_in_obj = 1.234,\n  local var_in_obj2 = { a: { b: 'c' } },\n\n  concat_array: [1, 2, 3] + [4],\n  # strings can be concat with +,\n  # which implicitly converts one operand to string if needed.\n  concat_string: '123' + 4,\n\n  # == tests deep equality\n  equals: { a: { b: 'c', d: {} } } == var_in_obj2,\n\n  special_field: 'this feels good',\n};\n\n# objects can be merged with + where the right-hand side wins field conflicts\nlocal obj4 = obj2 + obj3;\nassert obj4.special_field == 'this feels good';\n\n# define a function\n# functions have positional parameters, named parameters, and default arguments\nlocal my_function(x, y, z=1) = x + y - z;\nlocal num6 = my_function(7, 8, 9);\nlocal num7 = my_function(8, z=10, y=9);\nlocal num8 = my_function(4, 5);\n# inline anonymous function\nlocal num9 = (function(x) x * x)(3);\n\nlocal obj5 = {\n  # define a method\n  # fields defined with :: are hidden, which does not apper in generated JSON\n  # function cannot be serialized so need to be hidden\n  # if the object is used in the generated JSON.\n  is_odd(x):: x % 2 == 1,\n};\nassert obj5 == {};\n\n# a jsonnet document has to evaluate to something\n# be it an object, list, number or just string literal\n\"FIN\"\n```\n\n## Further Reading\nThere are a few but important concepts that are not touched in this example, including:\n\n- Passing variables from command line: [Parameterize Entire Config](https://jsonnet.org/learning/tutorial.html#parameterize-entire-config)\n- Import other jsonnet libraries/files: [Imports](https://jsonnet.org/learning/tutorial.html#imports)\n- In depth example of OOP aspect of Jsonnet: [Object-Orientation](https://jsonnet.org/learning/tutorial.html#Object-Orientation)\n- Useful standard library: [Stdlib](https://jsonnet.org/ref/stdlib.html)\n"
        },
        {
          "name": "julia.md",
          "type": "blob",
          "size": 26.3271484375,
          "content": "---\nname: Julia\ncontributors:\n    - [\"Leah Hanson\", \"http://leahhanson.us\"]\n    - [\"Pranit Bauva\", \"https://github.com/pranitbauva1997\"]\n    - [\"Daniel YC Lin\", \"https://github.com/dlintw\"]\nfilename: learnjulia.jl\n---\n\nJulia is a new homoiconic functional language focused on technical computing.\nWhile having the full power of homoiconic macros, first-class functions,\nand low-level control, Julia is as easy to learn and use as Python.\n\nThis is based on Julia version 1.0.0.\n\n```julia\n# Single line comments start with a hash (pound) symbol.\n#= Multiline comments can be written\n   by putting '#=' before the text  and '=#'\n   after the text. They can also be nested.\n=#\n\n####################################################\n## 1. Primitive Datatypes and Operators\n####################################################\n\n# Everything in Julia is an expression.\n\n# There are several basic types of numbers.\ntypeof(3)       # => Int64\ntypeof(3.2)     # => Float64\ntypeof(2 + 1im) # => Complex{Int64}\ntypeof(2 // 3)  # => Rational{Int64}\n\n# All of the normal infix operators are available.\n1 + 1      # => 2\n8 - 1      # => 7\n10 * 2     # => 20\n35 / 5     # => 7.0\n10 / 2     # => 5.0  # dividing integers always results in a Float64\ndiv(5, 2)  # => 2    # for a truncated result, use div\n5 \\ 35     # => 7.0\n2^2        # => 4    # power, not bitwise xor\n12 % 10    # => 2\n\n# Enforce precedence with parentheses\n(1 + 3) * 2  # => 8\n\n# Julia (unlike Python for instance) has integer under/overflow\n10^19      # => -8446744073709551616\n# use bigint or floating point to avoid this\nbig(10)^19 # => 10000000000000000000\n1e19       # => 1.0e19\n10.0^19    # => 1.0e19\n\n# Bitwise Operators\n~2         # => -3 # bitwise not\n3 & 5      # => 1  # bitwise and\n2 | 4      # => 6  # bitwise or\nxor(2, 4)  # => 6  # bitwise xor\n2 >>> 1    # => 1  # logical shift right\n2 >> 1     # => 1  # arithmetic shift right\n2 << 1     # => 4  # logical/arithmetic shift left\n\n# Use the bitstring function to see the binary representation of a number.\nbitstring(12345)\n# => \"0000000000000000000000000000000000000000000000000011000000111001\"\nbitstring(12345.0)\n# => \"0100000011001000000111001000000000000000000000000000000000000000\"\n\n# Boolean values are primitives\ntrue\nfalse\n\n# Boolean operators\n!true   # => false\n!false  # => true\n1 == 1  # => true\n2 == 1  # => false\n1 != 1  # => false\n2 != 1  # => true\n1 < 10  # => true\n1 > 10  # => false\n2 <= 2  # => true\n2 >= 2  # => true\n# Comparisons can be chained, like in Python but unlike many other languages\n1 < 2 < 3  # => true\n2 < 3 < 2  # => false\n\n# Strings are created with \"\n\"This is a string.\"\n\n# Character literals are written with '\n'a'\n\n# Strings are UTF8 encoded, so strings like \"π\" or \"☃\" are not directly equivalent\n# to an array of single characters.\n# Only if they contain only ASCII characters can they be safely indexed.\nascii(\"This is a string\")[1]    # => 'T'\n# => 'T': ASCII/Unicode U+0054 (category Lu: Letter, uppercase)\n# Beware, Julia indexes everything from 1 (like MATLAB), not 0 (like most languages).\n# Otherwise, iterating over strings is recommended (map, for loops, etc).\n\n# String can be compared lexicographically, in dictionnary order:\n\"good\" > \"bye\"   # => true\n\"good\" == \"good\" # => true\n\"1 + 2 = 3\" == \"1 + 2 = $(1 + 2)\" # => true\n\n# $(..) can be used for string interpolation:\n\"2 + 2 = $(2 + 2)\" # => \"2 + 2 = 4\"\n# You can put any Julia expression inside the parentheses.\n\n# Printing is easy\nprintln(\"I'm Julia. Nice to meet you!\")  # => I'm Julia. Nice to meet you!\n\n# Another way to format strings is the printf macro from the stdlib Printf.\nusing Printf   # this is how you load (or import) a module\n@printf \"%d is less than %f\\n\" 4.5 5.3   # => 5 is less than 5.300000\n\n\n####################################################\n## 2. Variables and Collections\n####################################################\n\n# You don't declare variables before assigning to them.\nsomeVar = 5  # => 5\nsomeVar      # => 5\n\n# Accessing a previously unassigned variable is an error\ntry\n    someOtherVar  # => ERROR: UndefVarError: someOtherVar not defined\ncatch e\n    println(e)\nend\n\n# Variable names start with a letter or underscore.\n# After that, you can use letters, digits, underscores, and exclamation points.\nSomeOtherVar123! = 6  # => 6\n\n# You can also use certain unicode characters\n# here ☃ is a Unicode 'snowman' characters, see http://emojipedia.org/%E2%98%83%EF%B8%8F if it displays wrongly here\n☃ = 8  # => 8\n# These are especially handy for mathematical notation, like the constant π\n2 * π  # => 6.283185307179586\n\n# A note on naming conventions in Julia:\n#\n# * Word separation can be indicated by underscores ('_'), but use of\n#   underscores is discouraged unless the name would be hard to read\n#   otherwise.\n#\n# * Names of Types begin with a capital letter and word separation is shown\n#   with CamelCase instead of underscores.\n#\n# * Names of functions and macros are in lower case, without underscores.\n#\n# * Functions that modify their inputs have names that end in !. These\n#   functions are sometimes called mutating functions or in-place functions.\n\n# Arrays store a sequence of values indexed by integers 1 through n:\na = Int64[] # => 0-element Array{Int64,1}\n\n# 1-dimensional array literals can be written with comma-separated values.\nb = [4, 5, 6] # => 3-element Array{Int64,1}: [4, 5, 6]\nb = [4; 5; 6] # => 3-element Array{Int64,1}: [4, 5, 6]\nb[1]    # => 4\nb[end]  # => 6\n\n# 2-dimensional arrays use space-separated values and semicolon-separated rows.\nmatrix = [1 2; 3 4] # => 2×2 Array{Int64,2}: [1 2; 3 4]\n\n# Arrays of a particular type\nb = Int8[4, 5, 6] # => 3-element Array{Int8,1}: [4, 5, 6]\n\n# Add stuff to the end of a list with push! and append!\n# By convention, the exclamation mark '!' is appended to names of functions\n# that modify their arguments\npush!(a, 1)    # => [1]\npush!(a, 2)    # => [1,2]\npush!(a, 4)    # => [1,2,4]\npush!(a, 3)    # => [1,2,4,3]\nappend!(a, b)  # => [1,2,4,3,4,5,6]\n\n# Remove from the end with pop\npop!(b)  # => 6\nb # => [4,5]\n\n# Let's put it back\npush!(b, 6)  # => [4,5,6]\nb # => [4,5,6]\n\na[1]  # => 1  # remember that Julia indexes from 1, not 0!\n\n# end is a shorthand for the last index. It can be used in any\n# indexing expression\na[end]  # => 6\n\n# we also have popfirst! and pushfirst!\npopfirst!(a)  # => 1 \na # => [2,4,3,4,5,6]\npushfirst!(a, 7)  # => [7,2,4,3,4,5,6]\na # => [7,2,4,3,4,5,6]\n\n# Function names that end in exclamations points indicate that they modify\n# their argument.\narr = [5,4,6]  # => 3-element Array{Int64,1}: [5,4,6]\nsort(arr)      # => [4,5,6]\narr            # => [5,4,6]\nsort!(arr)     # => [4,5,6]\narr            # => [4,5,6]\n\n# Looking out of bounds is a BoundsError\ntry\n    a[0] \n    # => ERROR: BoundsError: attempt to access 7-element Array{Int64,1} at \n    # index [0]\n    # => Stacktrace:\n    # =>  [1] getindex(::Array{Int64,1}, ::Int64) at .\\array.jl:731\n    # =>  [2] top-level scope at none:0\n    # =>  [3] ...\n    # => in expression starting at ...\\LearnJulia.jl:180\n    a[end + 1] \n    # => ERROR: BoundsError: attempt to access 7-element Array{Int64,1} at \n    # index [8]\n    # => Stacktrace:\n    # =>  [1] getindex(::Array{Int64,1}, ::Int64) at .\\array.jl:731\n    # =>  [2] top-level scope at none:0\n    # =>  [3] ...\n    # => in expression starting at ...\\LearnJulia.jl:188\ncatch e\n    println(e)\nend\n\n# Errors list the line and file they came from, even if it's in the standard\n# library. You can look in the folder share/julia inside the julia folder to\n# find these files.\n\n# You can initialize arrays from ranges\na = [1:5;]  # => 5-element Array{Int64,1}: [1,2,3,4,5]\na2 = [1:5]  # => 1-element Array{UnitRange{Int64},1}: [1:5]\n\n# You can look at ranges with slice syntax.\na[1:3]    # => [1, 2, 3]\na[2:end]  # => [2, 3, 4, 5]\n\n# Remove elements from an array by index with splice!\narr = [3,4,5]\nsplice!(arr, 2) # => 4 \narr # => [3,5]\n\n# Concatenate lists with append!\nb = [1,2,3]\nappend!(a, b) # => [1, 2, 3, 4, 5, 1, 2, 3]\na # => [1, 2, 3, 4, 5, 1, 2, 3]\n\n# Check for existence in a list with in\nin(1, a)  # => true\n\n# Examine the length with length\nlength(a)  # => 8\n\n# Tuples are immutable.\ntup = (1, 2, 3)  # => (1,2,3)\ntypeof(tup) # => Tuple{Int64,Int64,Int64}\ntup[1] # => 1\ntry\n    tup[1] = 3  \n    # => ERROR: MethodError: no method matching \n    # setindex!(::Tuple{Int64,Int64,Int64}, ::Int64, ::Int64)\ncatch e\n    println(e)\nend\n\n# Many array functions also work on tuples\nlength(tup) # => 3\ntup[1:2]    # => (1,2)\nin(2, tup)  # => true\n\n# You can unpack tuples into variables\na, b, c = (1, 2, 3)  # => (1,2,3)  \na  # => 1\nb  # => 2\nc  # => 3\n\n# Tuples are created even if you leave out the parentheses\nd, e, f = 4, 5, 6  # => (4,5,6)\nd  # => 4\ne  # => 5\nf  # => 6\n\n# A 1-element tuple is distinct from the value it contains\n(1,) == 1 # => false\n(1) == 1  # => true\n\n# Look how easy it is to swap two values\ne, d = d, e  # => (5,4) \nd  # => 5\ne  # => 4\n\n# Dictionaries store mappings\nemptyDict = Dict()  # => Dict{Any,Any} with 0 entries\n\n# You can create a dictionary using a literal\nfilledDict = Dict(\"one\" => 1, \"two\" => 2, \"three\" => 3)\n# => Dict{String,Int64} with 3 entries:\n# =>  \"two\" => 2, \"one\" => 1, \"three\" => 3\n\n# Look up values with []\nfilledDict[\"one\"]  # => 1\n\n# Get all keys\nkeys(filledDict)\n# => Base.KeySet for a Dict{String,Int64} with 3 entries. Keys:\n# =>  \"two\", \"one\", \"three\"\n# Note - dictionary keys are not sorted or in the order you inserted them.\n\n# Get all values\nvalues(filledDict)\n# => Base.ValueIterator for a Dict{String,Int64} with 3 entries. Values: \n# =>  2, 1, 3\n# Note - Same as above regarding key ordering.\n\n# Check for existence of keys in a dictionary with in, haskey\nin((\"one\" => 1), filledDict)  # => true\nin((\"two\" => 3), filledDict)  # => false\nhaskey(filledDict, \"one\")     # => true\nhaskey(filledDict, 1)         # => false\n\n# Trying to look up a non-existent key will raise an error\ntry\n    filledDict[\"four\"]  # => ERROR: KeyError: key \"four\" not found\ncatch e\n    println(e)\nend\n\n# Use the get method to avoid that error by providing a default value\n# get(dictionary, key, defaultValue)\nget(filledDict, \"one\", 4)   # => 1\nget(filledDict, \"four\", 4)  # => 4\n\n# Use Sets to represent collections of unordered, unique values\nemptySet = Set()  # => Set(Any[])\n# Initialize a set with values\nfilledSet = Set([1, 2, 2, 3, 4])  # => Set([4, 2, 3, 1])\n\n# Add more values to a set\npush!(filledSet, 5)  # => Set([4, 2, 3, 5, 1])\n\n# Check if the values are in the set\nin(2, filledSet)   # => true\nin(10, filledSet)  # => false\n\n# There are functions for set intersection, union, and difference.\notherSet = Set([3, 4, 5, 6])         # => Set([4, 3, 5, 6])\nintersect(filledSet, otherSet)      # => Set([4, 3, 5])\nunion(filledSet, otherSet)          # => Set([4, 2, 3, 5, 6, 1])\nsetdiff(Set([1,2,3,4]), Set([2,3,5])) # => Set([4, 1])\n\n# Assignment with `=` attaches a new label to the same value without copying\na = [1, 2, 3]\nb = a\n# Now `b` and `a` point to the same value, so changing one affects the other:\na[3] = 5\nb[3]  # => 5\n\n# The `copy()` function can create a shallow copy of an array, dictionary,\n# or other container\na = [1, 2, 3]\nc = copy(a)\na[3] = 5\nc[3] # => 3\n\n####################################################\n## 3. Control Flow\n####################################################\n\n# Let's make a variable\nsomeVar = 5\n\n# Here is an if statement. Indentation is not meaningful in Julia.\nif someVar > 10\n    println(\"someVar is totally bigger than 10.\")\nelseif someVar < 10    # This elseif clause is optional.\n    println(\"someVar is smaller than 10.\")\nelse                    # The else clause is optional too.\n    println(\"someVar is indeed 10.\")\nend\n# => prints \"some var is smaller than 10\"\n\n# For loops iterate over iterables.\n# Iterable types include Range, Array, Set, Dict, and AbstractString.\nfor animal = [\"dog\", \"cat\", \"mouse\"]\n    println(\"$animal is a mammal\")\n    # You can use $ to interpolate variables or expression into strings.\n    # In this special case, no need for parenthesis: $animal and $(animal) give the same\nend\n# => dog is a mammal\n# => cat is a mammal\n# => mouse is a mammal\n\n# You can use 'in' instead of '='.\nfor animal in [\"dog\", \"cat\", \"mouse\"]\n    println(\"$animal is a mammal\")\nend\n# => dog is a mammal\n# => cat is a mammal\n# => mouse is a mammal\n\nfor pair in Dict(\"dog\" => \"mammal\", \"cat\" => \"mammal\", \"mouse\" => \"mammal\")\n    from, to = pair\n    println(\"$from is a $to\")\nend\n# => mouse is a mammal\n# => cat is a mammal\n# => dog is a mammal\n\nfor (k, v) in Dict(\"dog\" => \"mammal\", \"cat\" => \"mammal\", \"mouse\" => \"mammal\")\n    println(\"$k is a $v\")\nend\n# => mouse is a mammal\n# => cat is a mammal\n# => dog is a mammal\n\n# While loops loop while a condition is true\nlet x = 0\n    while x < 4\n        println(x)\n        x += 1  # Shorthand for in place increment: x = x + 1\n    end\nend\n# => 0\n# => 1\n# => 2\n# => 3\n\n# Handle exceptions with a try/catch block\ntry\n    error(\"help\")\ncatch e\n    println(\"caught it $e\")\nend\n# => caught it ErrorException(\"help\")\n\n####################################################\n## 4. Functions\n####################################################\n\n# The keyword 'function' creates new functions\n# function name(arglist)\n#   body...\n# end\nfunction add(x, y)\n    println(\"x is $x and y is $y\")\n\n    # Functions return the value of their last statement\n    x + y\nend\n\nadd(5, 6)\n# => x is 5 and y is 6\n# => 11\n\n# Compact assignment of functions\nf_add(x, y) = x + y  # => f_add (generic function with 1 method)\nf_add(3, 4)  # => 7\n\n# Function can also return multiple values as tuple\nfn(x, y) = x + y, x - y # => fn (generic function with 1 method)\nfn(3, 4)  # => (7, -1)\n\n# You can define functions that take a variable number of\n# positional arguments\nfunction varargs(args...)\n    return args\n    # use the keyword return to return anywhere in the function\nend\n# => varargs (generic function with 1 method)\n\nvarargs(1, 2, 3)  # => (1,2,3)\n\n# The ... is called a splat.\n# We just used it in a function definition.\n# It can also be used in a function call,\n# where it will splat an Array or Tuple's contents into the argument list.\nadd([5,6]...)  # this is equivalent to add(5,6)\n\nx = (5, 6)  # => (5,6)\nadd(x...)  # this is equivalent to add(5,6)\n\n\n# You can define functions with optional positional arguments\nfunction defaults(a, b, x=5, y=6)\n    return \"$a $b and $x $y\"\nend\n# => defaults (generic function with 3 methods)\n\ndefaults('h', 'g')  # => \"h g and 5 6\"\ndefaults('h', 'g', 'j')  # => \"h g and j 6\"\ndefaults('h', 'g', 'j', 'k')  # => \"h g and j k\"\ntry\n    defaults('h')  # => ERROR: MethodError: no method matching defaults(::Char)\n    defaults()  # => ERROR: MethodError: no method matching defaults()\ncatch e\n    println(e)\nend\n\n# You can define functions that take keyword arguments\nfunction keyword_args(;k1=4, name2=\"hello\")  # note the ;\n    return Dict(\"k1\" => k1, \"name2\" => name2)\nend\n# => keyword_args (generic function with 1 method)\n\nkeyword_args(name2=\"ness\")  # => [\"name2\"=>\"ness\", \"k1\"=>4]\nkeyword_args(k1=\"mine\")     # => [\"name2\"=>\"hello\", \"k1\"=>\"mine\"]\nkeyword_args()              # => [\"name2\"=>\"hello\", \"k1\"=>4]\n\n# You can combine all kinds of arguments in the same function\nfunction all_the_args(normalArg, optionalPositionalArg=2; keywordArg=\"foo\")\n    println(\"normal arg: $normalArg\")\n    println(\"optional arg: $optionalPositionalArg\")\n    println(\"keyword arg: $keywordArg\")\nend\n# => all_the_args (generic function with 2 methods)\n\nall_the_args(1, 3, keywordArg=4)\n# => normal arg: 1\n# => optional arg: 3\n# => keyword arg: 4\n\n# Julia has first class functions\nfunction create_adder(x)\n    adder = function (y)\n        return x + y\n    end\n    return adder\nend\n# => create_adder (generic function with 1 method)\n\n# This is \"stabby lambda syntax\" for creating anonymous functions\n(x -> x > 2)(3)  # => true\n\n# This function is identical to create_adder implementation above.\nfunction create_adder(x)\n    y -> x + y\nend\n# => create_adder (generic function with 1 method)\n\n# You can also name the internal function, if you want\nfunction create_adder(x)\n    function adder(y)\n        x + y\n    end\n    adder\nend\n# => create_adder (generic function with 1 method)\n\nadd_10 = create_adder(10) # => (::getfield(Main, Symbol(\"#adder#11\")){Int64}) \n                          # (generic function with 1 method)\nadd_10(3) # => 13\n\n\n# There are built-in higher order functions\nmap(add_10, [1,2,3])  # => [11, 12, 13]\nfilter(x -> x > 5, [3, 4, 5, 6, 7])  # => [6, 7]\n\n# We can use list comprehensions\n[add_10(i) for i = [1, 2, 3]]   # => [11, 12, 13]\n[add_10(i) for i in [1, 2, 3]]  # => [11, 12, 13]\n[x for x in [3, 4, 5, 6, 7] if x > 5] # => [6, 7]\n\n####################################################\n## 5. Types\n####################################################\n\n# Julia has a type system.\n# Every value has a type; variables do not have types themselves.\n# You can use the `typeof` function to get the type of a value.\ntypeof(5)  # => Int64\n\n# Types are first-class values\ntypeof(Int64)     # => DataType\ntypeof(DataType)  # => DataType\n# DataType is the type that represents types, including itself.\n\n# Types are used for documentation, optimizations, and dispatch.\n# They are not statically checked.\n\n# Users can define types\n# They are like records or structs in other languages.\n# New types are defined using the `struct` keyword.\n\n# struct Name\n#   field::OptionalType\n#   ...\n# end\nstruct Tiger\n    taillength::Float64\n    coatcolor  # not including a type annotation is the same as `::Any`\nend\n\n# The default constructor's arguments are the properties\n# of the type, in the order they are listed in the definition\ntigger = Tiger(3.5, \"orange\")  # => Tiger(3.5,\"orange\")\n\n# The type doubles as the constructor function for values of that type\nsherekhan = typeof(tigger)(5.6, \"fire\")  # => Tiger(5.6,\"fire\")\n\n# These struct-style types are called concrete types\n# They can be instantiated, but cannot have subtypes.\n# The other kind of types is abstract types.\n\n# abstract Name\nabstract type Cat end  # just a name and point in the type hierarchy\n\n# Abstract types cannot be instantiated, but can have subtypes.\n# For example, Number is an abstract type\nsubtypes(Number)  # => 2-element Array{Any,1}:\n                  # =>  Complex\n                  # =>  Real\nsubtypes(Cat)  # => 0-element Array{Any,1}\n\n# AbstractString, as the name implies, is also an abstract type\nsubtypes(AbstractString)  # => 4-element Array{Any,1}:\n                          # =>  String\n                          # =>  SubString\n                          # =>  SubstitutionString\n                          # =>  Test.GenericString\n\n# Every type has a super type; use the `supertype` function to get it.\ntypeof(5) # => Int64\nsupertype(Int64)    # => Signed\nsupertype(Signed)   # => Integer\nsupertype(Integer)  # => Real\nsupertype(Real)     # => Number\nsupertype(Number)   # => Any\nsupertype(supertype(Signed))  # => Real\nsupertype(Any)      # => Any\n# All of these type, except for Int64, are abstract.\ntypeof(\"fire\")      # => String\nsupertype(String)   # => AbstractString\n# Likewise here with String\nsupertype(SubString)  # => AbstractString\n\n# <: is the subtyping operator\nstruct Lion <: Cat  # Lion is a subtype of Cat\n    maneColor\n    roar::AbstractString\nend\n\n# You can define more constructors for your type\n# Just define a function of the same name as the type\n# and call an existing constructor to get a value of the correct type\nLion(roar::AbstractString) = Lion(\"green\", roar)\n# This is an outer constructor because it's outside the type definition\n\nstruct Panther <: Cat  # Panther is also a subtype of Cat\n    eyeColor\n    Panther() = new(\"green\")\n    # Panthers will only have this constructor, and no default constructor.\nend\n# Using inner constructors, like Panther does, gives you control\n# over how values of the type can be created.\n# When possible, you should use outer constructors rather than inner ones.\n\n####################################################\n## 6. Multiple-Dispatch\n####################################################\n\n# In Julia, all named functions are generic functions\n# This means that they are built up from many small methods\n# Each constructor for Lion is a method of the generic function Lion.\n\n# For a non-constructor example, let's make a function meow:\n\n# Definitions for Lion, Panther, Tiger\nfunction meow(animal::Lion)\n    animal.roar  # access type properties using dot notation\nend\n\nfunction meow(animal::Panther)\n    \"grrr\"\nend\n\nfunction meow(animal::Tiger)\n    \"rawwwr\"\nend\n\n# Testing the meow function\nmeow(tigger)  # => \"rawwwr\"\nmeow(Lion(\"brown\", \"ROAAR\"))  # => \"ROAAR\"\nmeow(Panther()) # => \"grrr\"\n\n# Review the local type hierarchy\nTiger   <: Cat  # => false\nLion    <: Cat  # => true\nPanther <: Cat  # => true\n\n# Defining a function that takes Cats\nfunction pet_cat(cat::Cat)\n    println(\"The cat says $(meow(cat))\")\nend\n# => pet_cat (generic function with 1 method)\n\npet_cat(Lion(\"42\")) # => The cat says 42\ntry\n    pet_cat(tigger) # => ERROR: MethodError: no method matching pet_cat(::Tiger)\ncatch e\n    println(e)\nend\n\n# In OO languages, single dispatch is common;\n# this means that the method is picked based on the type of the first argument.\n# In Julia, all of the argument types contribute to selecting the best method.\n\n# Let's define a function with more arguments, so we can see the difference\nfunction fight(t::Tiger, c::Cat)\n    println(\"The $(t.coatcolor) tiger wins!\")\nend\n# => fight (generic function with 1 method)\n\nfight(tigger, Panther())  # => The orange tiger wins!\nfight(tigger, Lion(\"ROAR\")) # => The orange tiger wins!\n\n# Let's change the behavior when the Cat is specifically a Lion\nfight(t::Tiger, l::Lion) = println(\"The $(l.maneColor)-maned lion wins!\")\n# => fight (generic function with 2 methods)\n\nfight(tigger, Panther())  # => The orange tiger wins!\nfight(tigger, Lion(\"ROAR\")) # => The green-maned lion wins!\n\n# We don't need a Tiger in order to fight\nfight(l::Lion, c::Cat) = println(\"The victorious cat says $(meow(c))\")\n# => fight (generic function with 3 methods)\n\nfight(Lion(\"balooga!\"), Panther())  # => The victorious cat says grrr\ntry\n    fight(Panther(), Lion(\"RAWR\"))  \n    # => ERROR: MethodError: no method matching fight(::Panther, ::Lion)\n    # => Closest candidates are:\n    # =>   fight(::Tiger, ::Lion) at ...\n    # =>   fight(::Tiger, ::Cat) at ...\n    # =>   fight(::Lion, ::Cat) at ...\n    # => ...\ncatch e\n    println(e)\nend\n\n# Also let the cat go first\nfight(c::Cat, l::Lion) = println(\"The cat beats the Lion\")\n# => fight (generic function with 4 methods)\n\n# This warning is because it's unclear which fight will be called in:\ntry\n    fight(Lion(\"RAR\"), Lion(\"brown\", \"rarrr\"))\n    # => ERROR: MethodError: fight(::Lion, ::Lion) is ambiguous. Candidates:\n    # =>   fight(c::Cat, l::Lion) in Main at ...\n    # =>   fight(l::Lion, c::Cat) in Main at ...\n    # => Possible fix, define\n    # =>   fight(::Lion, ::Lion)\n    # => ...\ncatch e\n    println(e)\nend\n# The result may be different in other versions of Julia\n\nfight(l::Lion, l2::Lion) = println(\"The lions come to a tie\") \n# => fight (generic function with 5 methods)\nfight(Lion(\"RAR\"), Lion(\"brown\", \"rarrr\"))  # => The lions come to a tie\n\n\n# Under the hood\n# You can take a look at the llvm  and the assembly code generated.\n\nsquare_area(l) = l * l  # square_area (generic function with 1 method)\n\nsquare_area(5)  # => 25\n\n# What happens when we feed square_area an integer?\ncode_native(square_area, (Int32,), syntax = :intel)\n\t#         .text\n\t# ; Function square_area {\n\t# ; Location: REPL[116]:1       # Prologue\n\t#         push    rbp\n\t#         mov     rbp, rsp\n\t# ; Function *; {\n\t# ; Location: int.jl:54\n\t#         imul    ecx, ecx      # Square l and store the result in ECX\n\t# ;}\n\t#         mov     eax, ecx\n\t#         pop     rbp           # Restore old base pointer\n\t#         ret                   # Result will still be in EAX\n\t#         nop     dword ptr [rax + rax]\n\t# ;}\n\ncode_native(square_area, (Float32,), syntax = :intel)\n    #         .text\n    # ; Function square_area {\n    # ; Location: REPL[116]:1\n    #         push    rbp\n    #         mov     rbp, rsp\n    # ; Function *; {\n    # ; Location: float.jl:398\n    #         vmulss  xmm0, xmm0, xmm0  # Scalar single precision multiply (AVX)\n    # ;}\n    #         pop     rbp\n    #         ret\n    #         nop     word ptr [rax + rax]\n    # ;}\n\ncode_native(square_area, (Float64,), syntax = :intel)\n    #         .text\n    # ; Function square_area {\n    # ; Location: REPL[116]:1\n    #         push    rbp\n    #         mov     rbp, rsp\n    # ; Function *; {\n    # ; Location: float.jl:399\n    #         vmulsd  xmm0, xmm0, xmm0  # Scalar double precision multiply (AVX)\n    # ;}\n    #         pop     rbp\n    #         ret\n    #         nop     word ptr [rax + rax]\n    # ;}\n\n# Note that julia will use floating point instructions if any of the\n# arguments are floats.\n# Let's calculate the area of a circle\ncircle_area(r) = pi * r * r     # circle_area (generic function with 1 method)\ncircle_area(5)  # 78.53981633974483\n\ncode_native(circle_area, (Int32,), syntax = :intel)\n    #         .text\n    # ; Function circle_area {\n    # ; Location: REPL[121]:1\n    #         push    rbp\n    #         mov     rbp, rsp\n    # ; Function *; {\n    # ; Location: operators.jl:502\n    # ; Function *; {\n    # ; Location: promotion.jl:314\n    # ; Function promote; {\n    # ; Location: promotion.jl:284\n    # ; Function _promote; {\n    # ; Location: promotion.jl:261\n    # ; Function convert; {\n    # ; Location: number.jl:7\n    # ; Function Type; {\n    # ; Location: float.jl:60\n    #         vcvtsi2sd       xmm0, xmm0, ecx     # Load integer (r) from memory\n    #         movabs  rax, 497710928              # Load pi\n    # ;}}}}}\n    # ; Function *; {\n    # ; Location: float.jl:399\n    #         vmulsd  xmm1, xmm0, qword ptr [rax] # pi * r\n    #         vmulsd  xmm0, xmm1, xmm0            # (pi * r) * r\n    # ;}}\n    #         pop     rbp\n    #         ret\n    #         nop     dword ptr [rax]\n    # ;}\n\ncode_native(circle_area, (Float64,), syntax = :intel)\n    #         .text\n    # ; Function circle_area {\n    # ; Location: REPL[121]:1\n    #         push    rbp\n    #         mov     rbp, rsp\n    #         movabs  rax, 497711048\n    # ; Function *; {\n    # ; Location: operators.jl:502\n    # ; Function *; {\n    # ; Location: promotion.jl:314\n    # ; Function *; {\n    # ; Location: float.jl:399\n    #         vmulsd  xmm1, xmm0, qword ptr [rax]\n    # ;}}}\n    # ; Function *; {\n    # ; Location: float.jl:399\n    #         vmulsd  xmm0, xmm1, xmm0\n    # ;}\n    #         pop     rbp\n    #         ret\n    #         nop     dword ptr [rax + rax]\n    # ;}\n```\n\n## Further Reading\n\nYou can get a lot more detail from the [Julia Documentation](https://docs.julialang.org/)\n\nThe best place to get help with Julia is the (very friendly) [Discourse forum](https://discourse.julialang.org/).\n"
        },
        {
          "name": "kdb+.md",
          "type": "blob",
          "size": 21.9736328125,
          "content": "---\nname: kdb+\ncontributors:\n    - [\"Matt Doherty\", \"https://github.com/picodoc\"]\n    - [\"Jonny Press\", \"https://github.com/jonnypress\"]\nfilename: learnkdb.q\n---\n\nThe q language and its database component kdb+ were developed by Arthur Whitney\nand released by Kx systems in 2003. q is a descendant of APL and as such is\nvery terse and a little strange looking for anyone from a \"C heritage\" language\nbackground. Its expressiveness and vector oriented nature make it well suited\nto performing complex calculations on large amounts of data (while also\nencouraging some amount of [code golf](https://en.wikipedia.org/wiki/Code_golf)).\nThe fundamental structure in the language is not the object but instead the list,\nand tables are built as collections of lists. This means - unlike most traditional\nRDBMS systems - tables are column oriented.  The language has both an in-memory\nand on-disk database built in, giving a large amount of flexibility. kdb+ is most\nwidely used in the world of finance to store, analyze, process and retrieve large\ntime-series data sets.\n\nThe terms *q* and *kdb+* are usually used interchangeably, as the two are not\nseparable so this distinction is not really useful.\n\nTo learn more about kdb+ you can join the\n[KX Community forums](https://learninghub.kx.com/forums/) or\nthe [TorQ kdb+](https://groups.google.com/forum/#!forum/kdbtorq) group.\n\n```q\n/ Single line comments start with a forward-slash\n/ These can also be used in-line, so long as at least one whitespace character\n/ separates it from text to the left\n/\n  A forward-slash on a line by itself starts a multiline comment\n  and a backward-slash on a line by itself terminates it\n\\\n\n/ Run this file in an empty directory\n\n\n////////////////////////////////////\n// Basic Operators and Datatypes  //\n////////////////////////////////////\n\n/ We have integers, which are 8 byte by default\n3 / => 3\n\n/ And floats, also 8 byte as standard. Trailing f distinguishes from int\n3.0 / => 3f\n\n/ 4 byte numerical types can also be specified with trailing chars\n3i / => 3i\n3.0e / => 3e\n\n/ Math is mostly what you would expect\n1+1 / => 2\n8-1 / => 7\n10*2 / => 20\n/ Except division, which uses percent (%) instead of forward-slash (/)\n35%5 / => 7f  (the result of division is always a float)\n\n/ For integer division we have the keyword div\n4 div 3 / => 1\n\n/ Modulo also uses a keyword, since percent (%) is taken\n4 mod 3 / => 1\n\n/ And exponentiation...\n2 xexp 4 / => 16\n\n/ ...and truncating...\nfloor 3.14159 / => 3\n\n/ ...getting the absolute value...\nabs -3.14159 / => 3.14159\n/ ...and many other things\n/ see http://code.kx.com/q/ref/ for more\n\n/ q has no operator precedence, everything is evaluated right to left\n/ so results like this might take some getting used to\n2*1+1 / => 4 / (no operator precedence tables to remember!)\n\n/ Precedence can be modified with parentheses (restoring the 'normal' result)\n(2*1)+1 / => 3\n\n/ Assignment uses colon (:) instead of equals (=)\n/ No need to declare variables before assignment\na:3\na / => 3\n\n/ Variables can also be assigned in-line\n/ this does not affect the value passed on\nc:3+b:2+a:1 / (data \"flows\" from right to left)\na / => 1\nb / => 3\nc / => 6\n\n/ In-place operations are also as you might expect\na+:2\na / => 3\n\n/ There are no \"true\" or \"false\" keywords in q\n/ boolean values are indicated by the bit value followed by b\n1b / => true value\n0b / => false value\n\n/ Equality comparisons use equals (=) (since we don't need it for assignment)\n1=1 / => 1b\n2=1 / => 0b\n\n/ Inequality uses <>\n1<>1 / => 0b\n2<>1 / => 1b\n\n/ The other comparisons are as you might expect\n1<2 / => 1b\n1>2 / => 0b\n2<=2 / => 1b\n2>=2 / => 1b\n\n/ Comparison is not strict with regard to types...\n42=42.0 / => 1b\n\n/ ...unless we use the match operator (~)\n/ which only returns true if entities are identical\n42~42.0 / => 0b\n\n/ The not operator returns true if the underlying value is zero\nnot 0b / => 1b\nnot 1b / => 0b\nnot 42 / => 0b\nnot 0.0 / => 1b\n\n/ The max operator (|) reduces to logical \"or\" for bools\n42|2.0 / => 42f\n1b|0b / => 1b\n\n/ The min operator (&) reduces to logical \"and\" for bools\n42&2.0 / => 2f\n1b&0b / => 0b\n\n/ q provides two ways to store character data\n/ Chars in q are stored in a single byte and use double-quotes (\")\nch:\"a\"\n/ Strings are simply lists of char (more on lists later)\nstr:\"This is a string\"\n/ Escape characters work as normal\nstr:\"This is a string with \\\"quotes\\\"\"\n\n/ Char data can also be stored as symbols using backtick (`)\nsymbol:`sym\n/ Symbols are NOT LISTS, they are an enumeration\n/ the q process stores internally a vector of strings\n/ symbols are enumerated against this vector\n/ this can be more space and speed efficient as these are constant width\n\n/ The string function converts to strings\nstring `symbol / => \"symbol\"\nstring 1.2345 / => \"1.2345\"\n\n/ q has a time type...\nt:01:00:00.000\n/ date type...\nd:2015.12.25\n/ and a datetime type (among other time types)\ndt:2015.12.25D12:00:00.000000000\n\n/ These support some arithmetic for easy manipulation\ndt + t / => 2015.12.25D13:00:00.000000000\nt - 00:10:00.000 / => 00:50:00.000\n/ and can be decomposed using dot notation\nd.year / => 2015i\nd.mm / => 12i\nd.dd / => 25i\n/ see http://code.kx.com/q4m3/2_Basic_Data_Types_Atoms/#25-temporal-data for more\n\n/ q also has an infinity value so div by zero will not throw an error\n1%0 / => 0w\n-1%0 / => -0w\n\n/ And null types for representing missing values\n0N / => null int\n0n / => null float\n/ see http://code.kx.com/q4m3/2_Basic_Data_Types_Atoms/#27-nulls for more\n\n/ q has standard control structures\n/ if is as you might expect (; separates the condition and instructions)\nif[1=1;a:\"hi\"]\na / => \"hi\"\n/ if-else uses $ (and unlike if, returns a value)\n$[1=0;a:\"hi\";a:\"bye\"] / => \"bye\"\na / => \"bye\"\n/ if-else can be extended to multiple clauses by adding args separated by ;\n$[1=0;a:\"hi\";0=1;a:\"bye\";a:\"hello again\"]\na / => \"hello again\"\n\n\n////////////////////////////////////\n////      Data Structures       ////\n////////////////////////////////////\n\n/ q is not an object oriented language\n/ instead complexity is built through ordered lists\n/ and mapping them into higher order structures: dictionaries and tables\n\n/ Lists (or arrays if you prefer) are simple ordered collections\n/ they are defined using parentheses () and semi-colons (;)\n(1;2;3) / => 1 2 3\n(-10.0;3.14159e;1b;`abc;\"c\")\n/ => -10f\n/ => 3.14159e\n/ => 1b\n/ => `abc\n/ => \"c\"  (mixed type lists are displayed on multiple lines)\n((1;2;3);(4;5;6);(7;8;9))\n/ => 1 2 3\n/ => 4 5 6\n/ => 7 8 9\n\n/ Lists of uniform type can also be defined more concisely\n1 2 3 / => 1 2 3\n`list`of`syms / => `list`of`syms\n`list`of`syms ~ (`list;`of;`syms) / => 1b\n\n/ List length\ncount (1;2;3) / => 3\ncount \"I am a string\" / => 13 (string are lists of char)\n\n/ Empty lists are defined with parentheses\nl:()\ncount l / => 0\n\n/ Simple variables and single item lists are not equivalent\n/ parentheses syntax cannot create a single item list (they indicate precedence)\n(1)~1 / => 1b\n/ single item lists can be created using enlist\nsingleton:enlist 1\n/ or appending to an empty list\nsingleton:(),1\n1~(),1 / => 0b\n\n/ Speaking of appending, comma (,) is used for this, not plus (+)\n1 2 3,4 5 6 / => 1 2 3 4 5 6\n\"hello \",\"there\" / => \"hello there\"\n\n/ Indexing uses square brackets []\nl:1 2 3 4\nl[0] / => 1\nl[1] / => 2\n/ indexing out of bounds returns a null value rather than an error\nl[5] / => 0N\n/ and indexed assignment\nl[0]:5\nl / => 5 2 3 4\n\n/ Lists can also be used for indexing and indexed assignment\nl[1 3] / => 2 4\nl[1 3]: 1 3\nl / => 5 1 3 3\n\n/ Lists can be untyped/mixed type\nl:(1;2;`hi)\n/ but once they are uniformly typed, q will enforce this\nl[2]:3\nl / => 1 2 3\nl[2]:`hi / throws a type error\n/ this makes sense in the context of lists as table columns (more later)\n\n/ For a nested list we can index at depth\nl:((1;2;3);(4;5;6);(7;8;9))\nl[1;1] / => 5\n\n/ We can elide the indexes to return entire rows or columns\nl[;1] / => 2 5 8\nl[1;] / => 4 5 6\n\n/ All the functions mentioned in the previous section work on lists natively\n1+(1;2;3) / => 2 3 4 (single variable and list)\n(1;2;3) - (3;2;1) / => -2 0 2 (list and list)\n\n/ And there are many more that are designed specifically for lists\navg 1 2 3 / => 2f\nsum 1 2 3 / => 6\nsums 1 2 3 / => 1 3 6 (running sum)\nlast 1 2 3 / => 3\n1 rotate 1 2 3 / => 2 3 1\n/ etc.\n/ Using and combining these functions to manipulate lists is where much of the\n/ power and expressiveness of the language comes from\n\n/ Take (#), drop (_) and find (?) are also useful working with lists\nl:1 2 3 4 5 6 7 8 9\nl:1+til 9 / til is a useful shortcut for generating ranges\n/ take the first 5 elements\n5#l / => 1 2 3 4 5\n/ drop the first 5\n5_l / => 6 7 8 9\n/ take the last 5\n-5#l / => 5 6 7 8 9\n/ drop the last 5\n-5_l / => 1 2 3 4\n/ find the first occurrence of 4\nl?4 / => 3\nl[3] / => 4\n\n/ Dictionaries in q are a generalization of lists\n/ they map a list to another list (of equal length)\n/ the bang (!) symbol is used for defining a dictionary\nd:(`a;`b;`c)!(1;2;3)\n/ or more simply with concise list syntax\nd:`a`b`c!1 2 3\n/ the keyword key returns the first list\nkey d / => `a`b`c\n/ and value the second\nvalue d / => 1 2 3\n\n/ Indexing is identical to lists\n/ with the first list as a key instead of the position\nd[`a] / => 1\nd[`b] / => 2\n\n/ As is assignment\nd[`c]:4\nd\n/ => a| 1\n/ => b| 2\n/ => c| 4\n\n/ Arithmetic and comparison work natively, just like lists\ne:(`a;`b;`c)!(2;3;4)\nd+e\n/ => a| 3\n/ => b| 5\n/ => c| 8\nd-2\n/ => a| -1\n/ => b| 0\n/ => c| 2\nd > (1;1;1)\n/ => a| 0\n/ => b| 1\n/ => c| 1\n\n/ And the take, drop and find operators are remarkably similar too\n`a`b#d\n/ => a| 1\n/ => b| 2\n`a`b _ d\n/ => c| 4\nd?2\n/ => `b\n\n/ Tables in q are basically a subset of dictionaries\n/ a table is a dictionary where all values must be lists of the same length\n/ as such tables in q are column oriented (unlike most RDBMS)\n/ the flip keyword is used to convert a dictionary to a table\n/ i.e. flip the indices\nflip `c1`c2`c3!(1 2 3;4 5 6;7 8 9)\n/ => c1 c2 c3\n/ => --------\n/ => 1  4  7\n/ => 2  5  8\n/ => 3  6  9\n/ we can also define tables using this syntax\nt:([]c1:1 2 3;c2:4 5 6;c3:7 8 9)\nt\n/ => c1 c2 c3\n/ => --------\n/ => 1  4  7\n/ => 2  5  8\n/ => 3  6  9\n\n/ Tables can be indexed and manipulated in a similar way to dicts and lists\nt[`c1]\n/ => 1 2 3\n/ table rows are returned as dictionaries\nt[1]\n/ => c1| 2\n/ => c2| 5\n/ => c3| 8\n\n/ meta returns table type information\nmeta t\n/ => c | t f a\n/ => --| -----\n/ => c1| j\n/ => c2| j\n/ => c3| j\n/ now we see why type is enforced in lists (to protect column types)\nt[1;`c1]:3\nt[1;`c1]:3.0 / throws a type error\n\n/ Most traditional databases have primary key columns\n/ in q we have keyed tables, where one table containing key columns\n/ is mapped to another table using bang (!)\nk:([]id:1 2 3)\nk!t\n/ => id| c1 c2 c3\n/ => --| --------\n/ => 1 | 1  4  7\n/ => 2 | 3  5  8\n/ => 3 | 3  6  9\n\n/ We can also use this shortcut for defining keyed tables\nkt:([id:1 2 3]c1:1 2 3;c2:4 5 6;c3:7 8 9)\n\n/ Records can then be retrieved based on this key\nkt[1]\n/ => c1| 1\n/ => c2| 4\n/ => c3| 7\nkt[`id!1]\n/ => c1| 1\n/ => c2| 4\n/ => c3| 7\n\n\n////////////////////////////////////\n////////     Functions      ////////\n////////////////////////////////////\n\n/ In q the function is similar to a mathematical map, mapping inputs to outputs\n/ curly braces {} are used for function definition\n/ and square brackets [] for calling functions (just like list indexing)\n/ a very minimal function\nf:{x+x}\nf[2] / => 4\n\n/ Functions can be anonymous and called at point of definition\n{x+x}[2] / => 4\n\n/ By default the last expression is returned\n/ colon (:) can be used to specify return\n{x+x}[2] / => 4\n{:x+x}[2] / => 4\n/ semi-colon (;) separates expressions\n{r:x+x;:r}[2] / => 4\n\n/ Function arguments can be specified explicitly (separated by ;)\n{[arg1;arg2] arg1+arg2}[1;2] / => 3\n/ or if omitted will default to x, y and z\n{x+y+z}[1;2;3] / => 6\n\n/ Built in functions are no different, and can be called the same way (with [])\n+[1;2] / => 3\n<[1;2] / => 1b\n\n/ Functions are first class in q, so can be returned, stored in lists etc.\n{:{x+y}}[] / => {x+y}\n(1;\"hi\";{x+y})\n/ => 1\n/ => \"hi\"\n/ => {x+y}\n\n/ There is no overloading and no keyword arguments for custom q functions\n/ however using a dictionary as a single argument can overcome this\n/ allows for optional arguments or differing functionality\nd:`arg1`arg2`arg3!(1.0;2;\"my function argument\")\n{x[`arg1]+x[`arg2]}[d] / => 3f\n\n/ Functions in q see the global scope\na:1\n{:a}[] / => 1\n\n/ However local scope obscures this\na:1\n{a:2;:a}[] / => 2\na / => 1\n\n/ Functions cannot see nested scopes (only local and global)\n{local:1;{:local}[]}[] / throws error as local is not defined in inner function\n\n/ A function can have one or more of its arguments fixed (projection)\nf:+[4]\nf[4] / => 8\nf[5] / => 9\nf[6] / => 10\n\n\n////////////////////////////////////\n//////////     q-sql      //////////\n////////////////////////////////////\n\n/ q has its own syntax for manipulating tables, similar to standard SQL\n/ This contains the usual suspects of select, insert, update etc.\n/ and some new functionality not typically available\n/ q-sql has two significant differences (other than syntax) to normal SQL:\n/ - q tables have well defined record orders\n/ - tables are stored as a collection of columns\n/   (so vectorized column operations are fast)\n/ a full description of q-sql is a little beyond the scope of this intro\n/ so we will just cover enough of the basics to get you going\n\n/ First define ourselves a table\nt:([]name:`Arthur`Thomas`Polly;age:35 32 52;height:180 175 160;sex:`m`m`f)\n\n/ equivalent of SELECT * FROM t\nselect from t / (must be lower case, and the wildcard is not necessary)\n/ => name   age height sex\n/ => ---------------------\n/ => Arthur 35  180    m\n/ => Thomas 32  175    m\n/ => Polly  52  160    f\n\n/ Select specific columns\nselect name,age from t\n/ => name   age\n/ => ----------\n/ => Arthur 35\n/ => Thomas 32\n/ => Polly  52\n\n/ And name them (equivalent of using AS in standard SQL)\nselect charactername:name, currentage:age from t\n/ => charactername currentage\n/ => ------------------------\n/ => Arthur        35\n/ => Thomas        32\n/ => Polly         52\n\n/ This SQL syntax is integrated with the q language\n/ so q can be used seamlessly in SQL statements\nselect name, feet:floor height*0.032, inches:12*(height*0.032) mod 1 from t\n/ => name   feet inches\n/ => ------------------\n/ => Arthur 5    9.12\n/ => Thomas 5    7.2\n/ => Polly  5    1.44\n\n/ Including custom functions\nselect name, growth:{[h;a]h%a}[height;age] from t\n/ => name   growth\n/ => ---------------\n/ => Arthur 5.142857\n/ => Thomas 5.46875\n/ => Polly  3.076923\n\n/ The where clause can contain multiple statements separated by commas\nselect from t where age>33,height>175\n/ => name   age height sex\n/ => ---------------------\n/ => Arthur 35  180    m\n\n/ The where statements are executed sequentially (not the same as logical AND)\nselect from t where age<40,height=min height\n/ => name   age height sex\n/ => ---------------------\n/ => Thomas 32  175    m\nselect from t where (age<40)&(height=min height)\n/ => name age height sex\n/ => -------------------\n\n/ The by clause falls between select and from\n/ and is equivalent to SQL's GROUP BY\nselect avg height by sex from t\n/ => sex| height\n/ => ---| ------\n/ => f  | 160\n/ => m  | 177.5\n\n/ If no aggregation function is specified, last is assumed\nselect by sex from t\n/ => sex| name   age height\n/ => ---| -----------------\n/ => f  | Polly  52  160\n/ => m  | Thomas 32  175\n\n/ Update has the same basic form as select\nupdate sex:`male from t where sex=`m\n/ => name   age height sex\n/ => ----------------------\n/ => Arthur 35  180    male\n/ => Thomas 32  175    male\n/ => Polly  52  160    f\n\n/ As does delete\ndelete from t where sex=`m\n/ => name  age height sex\n/ => --------------------\n/ => Polly 52  160    f\n\n/ None of these sql operations are carried out in place\nt\n/ => name   age height sex\n/ => ---------------------\n/ => Arthur 35  180    m\n/ => Thomas 32  175    m\n/ => Polly  52  160    f\n\n/ Insert however is in place, it takes a table name, and new data\n`t insert (`John;25;178;`m) / => ,3\nt\n/ => name   age height sex\n/ => ---------------------\n/ => Arthur 35  180    m\n/ => Thomas 32  175    m\n/ => Polly  52  160    f\n/ => John   25  178    m\n\n/ Upsert is similar (but doesn't have to be in-place)\nt upsert (`Chester;58;179;`m)\n/ => name    age height sex\n/ => ----------------------\n/ => Arthur  35  180    m\n/ => Thomas  32  175    m\n/ => Polly   52  160    f\n/ => John    25  178    m\n/ => Chester 58  179    m\n\n/ it will also upsert dicts or tables\nt upsert `name`age`height`sex!(`Chester;58;179;`m)\nt upsert (`Chester;58;179;`m)\n/ => name    age height sex\n/ => ----------------------\n/ => Arthur  35  180    m\n/ => Thomas  32  175    m\n/ => Polly   52  160    f\n/ => John    25  178    m\n/ => Chester 58  179    m\n\n/ And if our table is keyed\nkt:`name xkey t\n/ upsert will replace records where required\nkt upsert ([]name:`Thomas`Chester;age:33 58;height:175 179;sex:`f`m)\n/ => name   | age height sex\n/ => -------| --------------\n/ => Arthur | 35  180    m\n/ => Thomas | 33  175    f\n/ => Polly  | 52  160    f\n/ => John   | 25  178    m\n/ => Chester| 58  179    m\n\n/ There is no ORDER BY clause in q-sql, instead use xasc/xdesc\n`name xasc t\n/ => name   age height sex\n/ => ---------------------\n/ => Arthur 35  180    m\n/ => John   25  178    m\n/ => Polly  52  160    f\n/ => Thomas 32  175    m\n\n/ Most of the standard SQL joins are present in q-sql, plus a few new friends\n/ see http://code.kx.com/q4m3/9_Queries_q-sql/#99-joins\n/ the two most important (commonly used) are lj and aj\n\n/ lj is basically the same as SQL LEFT JOIN\n/ where the join is carried out on the key columns of the left table\nle:([sex:`m`f]lifeexpectancy:78 85)\nt lj le\n/ => name   age height sex lifeexpectancy\n/ => ------------------------------------\n/ => Arthur 35  180    m   78\n/ => Thomas 32  175    m   78\n/ => Polly  52  160    f   85\n/ => John   25  178    m   78\n\n/ aj is an asof join. This is not a standard SQL join, and can be very powerful\n/ The canonical example of this is joining financial trades and quotes tables\ntrades:([]time:10:01:01 10:01:03 10:01:04;sym:`msft`ibm`ge;qty:100 200 150)\nquotes:([]time:10:01:00 10:01:01 10:01:01 10:01:03;\n          sym:`ibm`msft`msft`ibm; px:100 99 101 98)\naj[`time`sym;trades;quotes]\n/ => time     sym  qty px\n/ => ---------------------\n/ => 10:01:01 msft 100 101\n/ => 10:01:03 ibm  200 98\n/ => 10:01:04 ge   150\n/ for each row in the trade table, the last (prevailing) quote (px) for that sym\n/ is joined on.\n/ see http://code.kx.com/q4m3/9_Queries_q-sql/#998-as-of-joins\n\n////////////////////////////////////\n/////     Extra/Advanced      //////\n////////////////////////////////////\n\n////// Adverbs //////\n/ You may have noticed the total lack of loops to this point\n/ This is not a mistake!\n/ q is a vector language so explicit loops (for, while etc.) are not encouraged\n/ where possible functionality should be vectorized (i.e. operations on lists)\n/ adverbs supplement this, modifying the behaviour of functions\n/ and providing loop type functionality when required\n/ (in q functions are sometimes referred to as verbs, hence adverbs)\n/ the \"each\" adverb modifies a function to treat a list as individual variables\nfirst each (1 2 3;4 5 6;7 8 9)\n/ => 1 4 7\n\n/ each-left (\\:) and each-right (/:) modify a two-argument function\n/ to treat one of the arguments and individual variables instead of a list\n1 2 3 +\\: 11 22 33\n/ => 12 23 34\n/ => 13 24 35\n/ => 14 25 36\n1 2 3 +/: 11 22 33\n/ => 12 13 14\n/ => 23 24 25\n/ => 34 35 36\n\n/ The true alternatives to loops in q are the adverbs scan (\\) and over (/)\n/ their behaviour differs based on the number of arguments the function they\n/ are modifying receives. Here I'll summarise some of the most useful cases\n/ a single argument function modified by scan given 2 args behaves like \"do\"\n{x * 2}\\[5;1] / => 1 2 4 8 16 32 (i.e. multiply by 2, 5 times)\n{x * 2}/[5;1] / => 32 (using over only the final result is shown)\n\n/ If the first argument is a function, we have the equivalent of \"while\"\n{x * 2}\\[{x<100};1] / => 1 2 4 8 16 32 64 128 (iterates until returns 0b)\n{x * 2}/[{x<100};1] / => 128 (again returns only the final result)\n\n/ If the function takes two arguments, and we pass a list, we have \"for\"\n/ where the result of the previous execution is passed back into the next loop\n/ along with the next member of the list\n{x + y}\\[1 2 3 4 5] / => 1 3 6 10 15 (i.e. the running sum)\n{x + y}/[1 2 3 4 5] / => 15 (only the final result)\n\n/ There are other iterators and uses, this is only intended as quick overview\n/ http://code.kx.com/q4m3/6_Functions/#67-iterators\n\n////// Scripts //////\n/ q scripts can be loaded from a q session using the \"\\l\" command\n/ for example \"\\l learnkdb.q\" will load this script\n/ or from the command prompt passing the script as an argument\n/ for example \"q learnkdb.q\"\n\n////// On-disk data //////\n/ Tables can be persisted to disk in several formats\n/ the two most fundamental are serialized and splayed\nt:([]a:1 2 3;b:1 2 3f)\n`:serialized set t / saves the table as a single serialized file\n`:splayed/ set t / saves the table splayed into a directory\n\n/ the dir structure will now look something like:\n/ db/\n/ ├── serialized\n/ └── splayed\n/     ├── a\n/     └── b\n\n/ Loading this directory (as if it was as script, see above)\n/ loads these tables into the q session\n\\l .\n/ the serialized table will be loaded into memory\n/ however the splayed table will only be mapped, not loaded\n/ both tables can be queried using q-sql\nselect from serialized\n/ => a b\n/ => ---\n/ => 1 1\n/ => 2 2\n/ => 3 3\nselect from splayed / (the columns are read from disk on request)\n/ => a b\n/ => ---\n/ => 1 1\n/ => 2 2\n/ => 3 3\n/ see http://code.kx.com/q4m3/14_Introduction_to_Kdb+/ for more\n\n////// Frameworks //////\n/ kdb+ is typically used for data capture and analysis.\n/ This involves using an architecture with multiple processes\n/ working together. kdb+ frameworks are available to streamline the setup\n/ and configuration of this architecture and add additional functionality\n/ such as disaster recovery, logging, access, load balancing etc.\n/ https://github.com/DataIntellectTech/TorQ\n```\n\n## Want to know more?\n\n* [*q for mortals* q language tutorial](http://code.kx.com/q4m3/)\n* [*Introduction to Kdb+* on disk data tutorial](http://code.kx.com/q4m3/14_Introduction_to_Kdb+/)\n* [q language reference](https://code.kx.com/q/ref/)\n* [TorQ production framework](https://github.com/DataIntellectTech/TorQ)\n"
        },
        {
          "name": "ko",
          "type": "tree",
          "content": null
        },
        {
          "name": "kotlin.md",
          "type": "blob",
          "size": 14.5234375,
          "content": "---\nname: Kotlin\ncontributors:\n    - [\"S Webber\", \"https://github.com/s-webber\"]\nfilename: LearnKotlin.kt\n---\n\nKotlin is a statically typed programming language for the JVM, Android and the\nbrowser. It is 100% interoperable with Java.\n[Read more here.](https://kotlinlang.org/)\n\n```kotlin\n// Single-line comments start with //\n/*\nMulti-line comments look like this.\n*/\n\n// The \"package\" keyword works in the same way as in Java.\npackage com.learnxinyminutes.kotlin\n\n/*\nThe entry point to a Kotlin program is a function named \"main\".\nThe function is passed an array containing any command-line arguments.\nSince Kotlin 1.3 the \"main\" function can also be defined without\nany parameters.\n*/\nfun main(args: Array<String>) {\n    /*\n    Declaring variables is done using either \"var\" or \"val\".\n    \"val\" declarations cannot be reassigned, whereas \"vars\" can.\n    */\n    val fooVal = 10 // we cannot later reassign fooVal to something else\n    var fooVar = 10\n    fooVar = 20 // fooVar can be reassigned\n\n    /*\n    In most cases, Kotlin can determine what the type of a variable is,\n    so we don't have to explicitly specify it every time.\n    We can explicitly declare the type of a variable like so:\n    */\n    val foo: Int = 7\n\n    /*\n    Strings can be represented in a similar way as in Java.\n    Escaping is done with a backslash.\n    */\n    val fooString = \"My String Is Here!\"\n    val barString = \"Printing on a new line?\\nNo Problem!\"\n    val bazString = \"Do you want to add a tab?\\tNo Problem!\"\n    println(fooString)\n    println(barString)\n    println(bazString)\n\n    /*\n    A raw string is delimited by a triple quote (\"\"\").\n    Raw strings can contain newlines and any other characters.\n    */\n    val fooRawString = \"\"\"\nfun helloWorld(val name : String) {\n   println(\"Hello, world!\")\n}\n\"\"\"\n    println(fooRawString)\n\n    /*\n    Strings can contain template expressions.\n    A template expression starts with a dollar sign ($).\n    */\n    val fooTemplateString = \"$fooString has ${fooString.length} characters\"\n    println(fooTemplateString) // => My String Is Here! has 18 characters\n\n    /*\n    For a variable to hold null it must be explicitly specified as nullable.\n    A variable can be specified as nullable by appending a ? to its type.\n    We can access a nullable variable by using the ?. operator.\n    We can use the ?: operator to specify an alternative value to use\n    if a variable is null.\n    */\n    var fooNullable: String? = \"abc\"\n    println(fooNullable?.length) // => 3\n    println(fooNullable?.length ?: -1) // => 3\n    fooNullable = null\n    println(fooNullable?.length) // => null\n    println(fooNullable?.length ?: -1) // => -1\n\n    /*\n    Functions can be declared using the \"fun\" keyword.\n    Function arguments are specified in brackets after the function name.\n    Function arguments can optionally have a default value.\n    The function return type, if required, is specified after the arguments.\n    */\n    fun hello(name: String = \"world\"): String {\n        return \"Hello, $name!\"\n    }\n    println(hello(\"foo\")) // => Hello, foo!\n    println(hello(name = \"bar\")) // => Hello, bar!\n    println(hello()) // => Hello, world!\n\n    /*\n    A function parameter may be marked with the \"vararg\" keyword\n    to allow a variable number of arguments to be passed to the function.\n    */\n    fun varargExample(vararg names: Int) {\n        println(\"Argument has ${names.size} elements\")\n    }\n    varargExample() // => Argument has 0 elements\n    varargExample(1) // => Argument has 1 elements\n    varargExample(1, 2, 3) // => Argument has 3 elements\n\n    /*\n    When a function consists of a single expression then the curly brackets can\n    be omitted. The body is specified after the = symbol.\n    */\n    fun odd(x: Int): Boolean = x % 2 == 1\n    println(odd(6)) // => false\n    println(odd(7)) // => true\n\n    // If the return type can be inferred then we don't need to specify it.\n    fun even(x: Int) = x % 2 == 0\n    println(even(6)) // => true\n    println(even(7)) // => false\n\n    /*\n    You can also use lambda functions, with the '->' operator seperating\n    the parameters from the function body.\n    */\n    val fooLambda: (Int) -> Int = {n -> n + 1}\n    println(fooLambda(1)) // => 2\n\n    // Functions can take functions as arguments and return functions.\n    fun not(f: (Int) -> Boolean): (Int) -> Boolean {\n        return {n -> !f.invoke(n)}\n    }\n    // Named functions can be specified as arguments using the :: operator.\n    val notOdd = not(::odd)\n    val notEven = not(::even)\n    /*\n    Lambda expressions can be specified as arguments.\n    If it's the only argument parentheses can be omitted.\n    */\n    val notZero = not {n -> n == 0}\n    /*\n    If a lambda has only one parameter\n    then its declaration can be omitted (along with the ->).\n    The name of the single parameter will be \"it\".\n    */\n    val notPositive = not {it > 0}\n    for (i in 0..4) {\n        println(\"${notOdd(i)} ${notEven(i)} ${notZero(i)} ${notPositive(i)}\")\n    }\n\n    // The \"class\" keyword is used to declare classes.\n    class ExampleClass(val x: Int) {\n        fun memberFunction(y: Int): Int {\n            return x + y\n        }\n\n        infix fun infixMemberFunction(y: Int): Int {\n            return x * y\n        }\n    }\n    /*\n    To create a new instance we call the constructor.\n    Note that Kotlin does not have a \"new\" keyword.\n    */\n    val fooExampleClass = ExampleClass(7)\n    // Member functions can be called using dot notation.\n    println(fooExampleClass.memberFunction(4)) // => 11\n    /*\n    If a function has been marked with the \"infix\" keyword then it can be\n    called using infix notation.\n    */\n    println(fooExampleClass infixMemberFunction 4) // => 28\n\n    /*\n    Data classes are a concise way to create classes that just hold data.\n    The \"hashCode\"/\"equals\" and \"toString\" methods are automatically generated.\n    */\n    data class DataClassExample (val x: Int, val y: Int, val z: Int)\n    val fooData = DataClassExample(1, 2, 4)\n    println(fooData) // => DataClassExample(x=1, y=2, z=4)\n\n    // Data classes have a \"copy\" function.\n    val fooCopy = fooData.copy(y = 100)\n    println(fooCopy) // => DataClassExample(x=1, y=100, z=4)\n\n    // Objects can be destructured into multiple variables.\n    val (a, b, c) = fooCopy\n    println(\"$a $b $c\") // => 1 100 4\n\n    // destructuring in \"for\" loop\n    for ((a, b, c) in listOf(fooData)) {\n        println(\"$a $b $c\") // => 1 2 4\n    }\n\n    val mapData = mapOf(\"a\" to 1, \"b\" to 2)\n    // Map.Entry is destructurable as well\n    for ((key, value) in mapData) {\n        println(\"$key -> $value\")\n    }\n\n    // The \"with\" function is similar to the JavaScript \"with\" statement.\n    data class MutableDataClassExample (var x: Int, var y: Int, var z: Int)\n    val fooMutableData = MutableDataClassExample(7, 4, 9)\n    with (fooMutableData) {\n        x -= 2\n        y += 2\n        z--\n    }\n    println(fooMutableData) // => MutableDataClassExample(x=5, y=6, z=8)\n\n    /*\n    We can create a list using the \"listOf\" function.\n    The list will be immutable - elements cannot be added or removed.\n    */\n    val fooList = listOf(\"a\", \"b\", \"c\")\n    println(fooList.size) // => 3\n    println(fooList.first()) // => a\n    println(fooList.last()) // => c\n    // Elements of a list can be accessed by their index.\n    println(fooList[1]) // => b\n\n    // A mutable list can be created using the \"mutableListOf\" function.\n    val fooMutableList = mutableListOf(\"a\", \"b\", \"c\")\n    fooMutableList.add(\"d\")\n    println(fooMutableList.last()) // => d\n    println(fooMutableList.size) // => 4\n\n    // We can create a set using the \"setOf\" function.\n    val fooSet = setOf(\"a\", \"b\", \"c\")\n    println(fooSet.contains(\"a\")) // => true\n    println(fooSet.contains(\"z\")) // => false\n\n    // We can create a map using the \"mapOf\" function.\n    val fooMap = mapOf(\"a\" to 8, \"b\" to 7, \"c\" to 9)\n    // Map values can be accessed by their key.\n    println(fooMap[\"a\"]) // => 8\n\n    /*\n    Sequences represent lazily-evaluated collections.\n    We can create a sequence using the \"generateSequence\" function.\n    */\n    val fooSequence = generateSequence(1, { it + 1 })\n    val x = fooSequence.take(10).toList()\n    println(x) // => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    // An example of using a sequence to generate Fibonacci numbers:\n    fun fibonacciSequence(): Sequence<Long> {\n        var a = 0L\n        var b = 1L\n\n        fun next(): Long {\n            val result = a + b\n            a = b\n            b = result\n            return a\n        }\n\n        return generateSequence(::next)\n    }\n    val y = fibonacciSequence().take(10).toList()\n    println(y) // => [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\n    // Kotlin provides higher-order functions for working with collections.\n    val z = (1..9).map {it * 3}\n                  .filter {it < 20}\n                  .groupBy {it % 2 == 0}\n                  .mapKeys {if (it.key) \"even\" else \"odd\"}\n    println(z) // => {odd=[3, 9, 15], even=[6, 12, 18]}\n\n    // A \"for\" loop can be used with anything that provides an iterator.\n    for (c in \"hello\") {\n        println(c)\n    }\n\n    // \"while\" loops work in the same way as other languages.\n    var ctr = 0\n    while (ctr < 5) {\n        println(ctr)\n        ctr++\n    }\n    do {\n        println(ctr)\n        ctr++\n    } while (ctr < 10)\n\n    /*\n    \"if\" can be used as an expression that returns a value.\n    For this reason the ternary ?: operator is not needed in Kotlin.\n    */\n    val num = 5\n    val message = if (num % 2 == 0) \"even\" else \"odd\"\n    println(\"$num is $message\") // => 5 is odd\n\n    // \"when\" can be used as an alternative to \"if-else if\" chains.\n    val i = 10\n    when {\n        i < 7 -> println(\"first block\")\n        fooString.startsWith(\"hello\") -> println(\"second block\")\n        else -> println(\"else block\")\n    }\n\n    // \"when\" can be used with an argument.\n    when (i) {\n        0, 21 -> println(\"0 or 21\")\n        in 1..20 -> println(\"in the range 1 to 20\")\n        else -> println(\"none of the above\")\n    }\n\n    // \"when\" can be used as an expression that returns a value.\n    var result = when (i) {\n        0, 21 -> \"0 or 21\"\n        in 1..20 -> \"in the range 1 to 20\"\n        else -> \"none of the above\"\n    }\n    println(result)\n\n    /*\n    We can check if an object is of a particular type by using the \"is\" operator.\n    If an object passes a type check then it can be used as that type without\n    explicitly casting it.\n    */\n    fun smartCastExample(x: Any) : Boolean {\n        if (x is Boolean) {\n            // x is automatically cast to Boolean\n            return x\n        } else if (x is Int) {\n            // x is automatically cast to Int\n            return x > 0\n        } else if (x is String) {\n            // x is automatically cast to String\n            return x.isNotEmpty()\n        } else {\n            return false\n        }\n    }\n    println(smartCastExample(\"Hello, world!\")) // => true\n    println(smartCastExample(\"\")) // => false\n    println(smartCastExample(5)) // => true\n    println(smartCastExample(0)) // => false\n    println(smartCastExample(true)) // => true\n\n    // Smartcast also works with when block\n    fun smartCastWhenExample(x: Any) = when (x) {\n        is Boolean -> x\n        is Int -> x > 0\n        is String -> x.isNotEmpty()\n        else -> false\n    }\n\n    /*\n    Extensions are a way to add new functionality to a class.\n    This is similar to C# extension methods.\n    */\n    fun String.remove(c: Char): String {\n        return this.filter {it != c}\n    }\n    println(\"Hello, world!\".remove('l')) // => Heo, word!\n}\n\n// Enum classes are similar to Java enum types.\nenum class EnumExample {\n    A, B, C // Enum constants are separated with commas.\n}\nfun printEnum() = println(EnumExample.A) // => A\n\n// Since each enum is an instance of the enum class, they can be initialized as:\nenum class EnumExample(val value: Int) {\n    A(value = 1),\n    B(value = 2),\n    C(value = 3)\n}\nfun printProperty() = println(EnumExample.A.value) // => 1\n\n// Every enum has properties to obtain its name and ordinal(position) in the enum class declaration:\nfun printName() = println(EnumExample.A.name) // => A\nfun printPosition() = println(EnumExample.A.ordinal) // => 0\n\n/*\nThe \"object\" keyword can be used to create singleton objects.\nWe cannot instantiate it but we can refer to its unique instance by its name.\nThis is similar to Scala singleton objects.\n*/\nobject ObjectExample {\n    fun hello(): String {\n        return \"hello\"\n    }\n\n    override fun toString(): String {\n        return \"Hello, it's me, ${ObjectExample::class.simpleName}\"\n    }\n}\n\n\nfun useSingletonObject() {\n    println(ObjectExample.hello()) // => hello\n    // In Kotlin, \"Any\" is the root of the class hierarchy, just like \"Object\" is in Java\n    val someRef: Any = ObjectExample\n    println(someRef) // => Hello, it's me, ObjectExample\n}\n\n\n/* The not-null assertion operator (!!) converts any value to a non-null type and\nthrows an exception if the value is null.\n*/\nvar b: String? = \"abc\"\nval l = b!!.length\n\ndata class Counter(var value: Int) {\n    // overload Counter += Int\n    operator fun plusAssign(increment: Int) {\n        this.value += increment\n    }\n\n    // overload Counter++ and ++Counter\n    operator fun inc() = Counter(value + 1)\n\n    // overload Counter + Counter\n    operator fun plus(other: Counter) = Counter(this.value + other.value)\n\n    // overload Counter * Counter\n    operator fun times(other: Counter) = Counter(this.value * other.value)\n\n    // overload Counter * Int\n    operator fun times(value: Int) = Counter(this.value * value)\n\n    // overload Counter in Counter\n    operator fun contains(other: Counter) = other.value == this.value\n\n    // overload Counter[Int] = Int\n    operator fun set(index: Int, value: Int) {\n        this.value = index + value\n    }\n\n    // overload Counter instance invocation\n    operator fun invoke() = println(\"The value of the counter is $value\")\n\n}\n/* You can also overload operators through extension methods */\n// overload -Counter\noperator fun Counter.unaryMinus() = Counter(-this.value)\n\nfun operatorOverloadingDemo() {\n    var counter1 = Counter(0)\n    var counter2 = Counter(5)\n    counter1 += 7\n    println(counter1) // => Counter(value=7)\n    println(counter1 + counter2) // => Counter(value=12)\n    println(counter1 * counter2) // => Counter(value=35)\n    println(counter2 * 2) // => Counter(value=10)\n    println(counter1 in Counter(5)) // => false\n    println(counter1 in Counter(7)) // => true\n    counter1[26] = 10\n    println(counter1) // => Counter(value=36)\n    counter1() // => The value of the counter is 36\n    println(-counter2) // => Counter(value=-5)\n}\n```\n\n### Further Reading\n\n* [Kotlin tutorials](https://kotlinlang.org/docs/tutorials/)\n* [Try Kotlin in your browser](https://play.kotlinlang.org/)\n* [A list of Kotlin resources](http://kotlin.link/)\n"
        },
        {
          "name": "lambda-calculus.md",
          "type": "blob",
          "size": 5.814453125,
          "content": "---\ncategory: Algorithms & Data Structures\nname: Lambda Calculus\ncontributors:\n    - [\"Max Sun\", \"http://github.com/maxsun\"]\n    - [\"Yan Hui Hang\", \"http://github.com/yanhh0\"]\n---\n\n# Lambda Calculus\n\nLambda calculus (λ-calculus), originally created by \n[Alonzo Church](https://en.wikipedia.org/wiki/Alonzo_Church),\nis the world's smallest programming language.\nDespite not having numbers, strings, booleans, or any non-function datatype,\nlambda calculus can be used to represent any Turing Machine!\n\nLambda calculus is composed of 3 elements: **variables**, **functions**, and\n**applications**.\n\n\n| Name        | Syntax                             | Example   | Explanation                                   |\n|-------------|------------------------------------|-----------|-----------------------------------------------|\n| Variable    | `<name>`                           | `x`       | a variable named \"x\"                          |\n| Function    | `λ<parameters>.<body>`             | `λx.x`    | a function with parameter \"x\" and body \"x\"    |\n| Application | `<function><variable or function>` | `(λx.x)a` | calling the function \"λx.x\" with argument \"a\" |\n\nThe most basic function is the identity function: `λx.x` which is equivalent to\n`f(x) = x`. The first \"x\" is the function's argument, and the second is the\nbody of the function.\n\n## Free vs. Bound Variables:\n\n- In the function `λx.x`, \"x\" is called a bound variable because it is both in\nthe body of the function and a parameter.\n- In `λx.y`, \"y\" is called a free variable because it is never declared before hand.\n\n## Evaluation:\n\nEvaluation is done via \n[β-Reduction](https://en.wikipedia.org/wiki/Lambda_calculus#Beta_reduction),\nwhich is essentially lexically-scoped substitution.\n\nWhen evaluating the\nexpression `(λx.x)a`, we replace all occurrences of \"x\" in the function's body\nwith \"a\".\n\n- `(λx.x)a` evaluates to: `a`\n- `(λx.y)a` evaluates to: `y`\n\nYou can even create higher-order functions:\n\n- `(λx.(λy.x))a` evaluates to: `λy.a`\n\nAlthough lambda calculus traditionally supports only single parameter \nfunctions, we can create multi-parameter functions using a technique called \n[currying](https://en.wikipedia.org/wiki/Currying).\n\n- `(λx.λy.λz.xyz)` is equivalent to `f(x, y, z) = ((x y) z)`\n\nSometimes `λxy.<body>` is used interchangeably with: `λx.λy.<body>`\n\n----\n\nIt's important to recognize that traditional **lambda calculus doesn't have\nnumbers, characters, or any non-function datatype!**\n\n## Boolean Logic:\n\nThere is no \"True\" or \"False\" in lambda calculus. There isn't even a 1 or 0.\n\nInstead:\n\n`T` is represented by: `λx.λy.x`\n\n`F` is represented by: `λx.λy.y`\n\nFirst, we can define an \"if\" function `λbtf` that\nreturns `t` if `b` is True and `f` if `b` is False\n\n`IF` is equivalent to: `λb.λt.λf.b t f`\n\nUsing `IF`, we can define the basic boolean logic operators:\n\n`a AND b` is equivalent to: `λab.IF a b F`\n\n`a OR b` is equivalent to: `λab.IF a T b`\n\n`NOT a` is equivalent to: `λa.IF a F T`\n\n*Note: `IF a b c` is essentially saying: `IF((a b) c)`*\n\n## Numbers:\n\nAlthough there are no numbers in lambda calculus, we can encode numbers using\n[Church numerals](https://en.wikipedia.org/wiki/Church_encoding).\n\nFor any number n: <code>n = λf.f<sup>n</sup></code> so:\n\n`0 = λf.λx.x`\n\n`1 = λf.λx.f x`\n\n`2 = λf.λx.f(f x)`\n\n`3 = λf.λx.f(f(f x))`\n\nTo increment a Church numeral,\nwe use the successor function `S(n) = n + 1` which is:\n\n`S = λn.λf.λx.f((n f) x)`\n\nUsing successor, we can define add:\n\n`ADD = λab.(a S)b`\n\n**Challenge:** try defining your own multiplication function!\n\n## Get even smaller: SKI, SK and Iota\n\n### SKI Combinator Calculus\n\nLet S, K, I be the following functions:\n\n`I x = x`\n\n`K x y =  x`\n\n`S x y z = x z (y z)`\n\nWe can convert an expression in the lambda calculus to an expression\nin the SKI combinator calculus:\n\n1. `λx.x = I`\n2. `λx.c = Kc` provided that `x` does not occur free in `c`\n3. `λx.(y z) = S (λx.y) (λx.z)`\n\nTake the church number 2 for example:\n\n`2 = λf.λx.f(f x)`\n\nFor the inner part `λx.f(f x)`:\n\n```\n  λx.f(f x)\n= S (λx.f) (λx.(f x))          (case 3)\n= S (K f)  (S (λx.f) (λx.x))   (case 2, 3)\n= S (K f)  (S (K f) I)         (case 2, 1)\n```\n\nSo:\n\n```\n  2\n= λf.λx.f(f x)\n= λf.(S (K f) (S (K f) I))\n= λf.((S (K f)) (S (K f) I))\n= S (λf.(S (K f))) (λf.(S (K f) I)) (case 3)\n```\n\nFor the first argument `λf.(S (K f))`:\n\n```\n  λf.(S (K f))\n= S (λf.S) (λf.(K f))       (case 3)\n= S (K S) (S (λf.K) (λf.f)) (case 2, 3)\n= S (K S) (S (K K) I)       (case 2, 3)\n```\n\nFor the second argument `λf.(S (K f) I)`:\n\n```\n  λf.(S (K f) I)\n= λf.((S (K f)) I)\n= S (λf.(S (K f))) (λf.I)             (case 3)\n= S (S (λf.S) (λf.(K f))) (K I)       (case 2, 3)\n= S (S (K S) (S (λf.K) (λf.f))) (K I) (case 1, 3)\n= S (S (K S) (S (K K) I)) (K I)       (case 1, 2)\n```\n\nMerging them up:\n\n```\n  2\n= S (λf.(S (K f))) (λf.(S (K f) I))\n= S (S (K S) (S (K K) I)) (S (S (K S) (S (K K) I)) (K I))\n```\n\nExpanding this, we would end up with the same expression for the\nchurch number 2 again.\n\n### SK Combinator Calculus\n\nThe SKI combinator calculus can still be reduced further. We can\nremove the I combinator by noting that `I = SKK`. We can substitute\nall `I`'s with `SKK`.\n\n### Iota Combinator\n\nThe SK combinator calculus is still not minimal. Defining:\n\n```\nι = λf.((f S) K)\n```\n\nWe have:\n\n```\nI = ιι\nK = ι(ιI) = ι(ι(ιι))\nS = ι(K) = ι(ι(ι(ιι)))\n```\n\n## For more advanced reading:\n\n1. [A Tutorial Introduction to the Lambda Calculus](http://www.inf.fu-berlin.de/lehre/WS03/alpi/lambda.pdf)\n2. [Cornell CS 312 Recitation 26: The Lambda Calculus](http://www.cs.cornell.edu/courses/cs3110/2008fa/recitations/rec26.html)\n3. [Wikipedia - Lambda Calculus](https://en.wikipedia.org/wiki/Lambda_calculus)\n4. [Wikipedia - SKI combinator calculus](https://en.wikipedia.org/wiki/SKI_combinator_calculus)\n5. [Wikipedia - Iota and Jot](https://en.wikipedia.org/wiki/Iota_and_Jot)\n"
        },
        {
          "name": "latex.md",
          "type": "blob",
          "size": 12.333984375,
          "content": "---\nname: LaTeX\ncontributors:\n    - [\"Chaitanya Krishna Ande\", \"http://icymist.github.io\"]\n    - [\"Colton Kohnke\", \"https://github.com/voltnor\"]\n    - [\"Sricharan Chiruvolu\", \"http://sricharan.xyz\"]\n    - [\"Ramanan Balakrishnan\", \"https://github.com/ramananbalakrishnan\"]\n    - [\"Svetlana Golubeva\", \"https://attillax.github.io/\"]\n    - [\"Oliver Kopp\", \"http://orcid.org/0000-0001-6962-4290\"]\nfilename: learn-latex.tex\n---\n\n```tex\n% All comment lines start with %\n% There are no multi-line comments\n\n% LaTeX is NOT a \"What You See Is What You Get\" word processing software like\n% MS Word, or OpenOffice Writer\n\n% Every LaTeX command starts with a backslash (\\)\n\n% LaTeX documents start with a defining the type of document it's compiling\n% Other document types include book, report, presentations, etc.\n% The options for the document appear in the [] brackets. In this case\n% it specifies we want to use 12pt font.\n\\documentclass[12pt]{article}\n\n% Next we define the packages the document uses.\n% If you want to include graphics, colored text, or\n% source code from another language file into your document,\n% you need to enhance the capabilities of LaTeX. This is done by adding packages.\n% I'm going to include the float and caption packages for figures\n% and hyperref package for hyperlinks\n\\usepackage{caption}\n\\usepackage{float}\n\\usepackage{hyperref}\n\n% We can define some other document properties too!\n\\author{Chaitanya Krishna Ande, Colton Kohnke, Sricharan Chiruvolu \\& \\\\\nSvetlana Golubeva}\n\\date{\\today}\n\\title{Learn \\LaTeX{} in Y Minutes!}\n\n% Now we're ready to begin the document\n% Everything before this line is called \"The Preamble\"\n\\begin{document}\n% if we set the author, date, title fields, we can have LaTeX\n% create a title page for us.\n\\maketitle\n\n% If we have sections, we can create table of contents. We have to compile our\n% document twice to make it appear in right order.\n% It is a good practice to separate the table of contents form the body of the\n% document. To do so we use \\newpage command\n\\newpage\n\\tableofcontents\n\n\\newpage\n\n% Most research papers have abstract, you can use the predefined commands for this.\n% This should appear in its logical order, therefore, after the top matter,\n% but before the main sections of the body.\n% This command is available in the document classes article and report.\n\\begin{abstract}\n \\LaTeX{} documentation written as \\LaTeX! How novel and totally not\n my idea!\n\\end{abstract}\n\n% Section commands are intuitive.\n% All the titles of the sections are added automatically to the table of contents.\n\\section{Introduction}\nHello, my name is Colton and together we're going to explore \\LaTeX!\n\n\\section{Another section}\nThis is the text for another section. I think it needs a subsection.\n\n\\subsection{This is a subsection} % Subsections are also intuitive.\nI think we need another one.\n\n\\subsubsection{Pythagoras}\nMuch better now.\n\\label{subsec:pythagoras}\n\n% By using the asterisk we can suppress LaTeX's inbuilt numbering.\n% This works for other LaTeX commands as well.\n\\section*{This is an unnumbered section}\nHowever not all sections have to be numbered!\n\n\\section{Some Text notes}\n%\\section{Spacing} % Need to add more information about space intervals\n\\LaTeX{} is generally pretty good about placing text where it should\ngo. If\na line \\\\ needs \\\\ to \\\\ break \\\\ you add \\textbackslash\\textbackslash{}\nto the source code.\n\nSeparate paragraphs by empty lines.\n\nYou need to add a tilde after abbreviations (if not followed by a comma) for a\nnon-breaking space, because otherwise the spacing after the dot is too large:\nE.g., i.e., etc.~are such abbreviations.\n\n\\section{Lists}\nLists are one of the easiest things to create in \\LaTeX! I need to go shopping\ntomorrow, so let's make a grocery list.\n\\begin{enumerate} % This creates an \"enumerate\" environment.\n  % \\item tells the enumerate to increment\n  \\item Salad.\n  \\item 27 watermelon.\n  \\item A single jackrabbit.\n  % we can even override the item number by using []\n  \\item[how many?] Medium sized squirt guns.\n\n  Not a list item, but still part of the enumerate.\n\n\\end{enumerate} % All environments must have an end.\n\n\\section{Math}\n\nOne of the primary uses for \\LaTeX{} is to produce academic articles\nor technical papers. Usually in the realm of math and science. As such,\nwe need to be able to add special symbols to our paper!\n\nMath has many symbols, far beyond what you can find on a keyboard;\nSet and relation symbols, arrows, operators, and Greek letters to name a few.\n\nSets and relations play a vital role in many mathematical research papers.\nHere's how you state all x that belong to X, $\\forall x \\in X$.\n% Notice how I needed to add $ signs before and after the symbols. This is\n% because when writing, we are in text-mode.\n% However, the math symbols only exist in math-mode.\n% We can enter math-mode from text mode with the $ signs.\n% The opposite also holds true. Variable can also be rendered in math-mode.\n% We can also enter math mode with \\[\\]\n\n\\[a^2 + b^2 = c^2 \\]\n\nMy favorite Greek letter is $\\xi$. I also like $\\beta$, $\\gamma$ and $\\sigma$.\nI haven't found a Greek letter yet that \\LaTeX{} doesn't know\nabout!\n\nOperators are essential parts of a mathematical document:\ntrigonometric functions ($\\sin$, $\\cos$, $\\tan$),\nlogarithms and exponentials ($\\log$, $\\exp$),\nlimits ($\\lim$), etc.~have pre-defined LaTeX commands.\nLet's write an equation to see how it's done:\n$\\cos(2\\theta) = \\cos^{2}(\\theta) - \\sin^{2}(\\theta)$\n\nFractions (Numerator-denominators) can be written in these forms:\n\n% 10 / 7\n$$ ^{10}/_{7} $$\n\n% Relatively complex fractions can be written as\n% \\frac{numerator}{denominator}\n$$ \\frac{n!}{k!(n - k)!} $$\n\nWe can also insert equations in an ``equation environment''.\n\n% Display math with the equation 'environment'\n\\begin{equation} % enters math-mode\n    c^2 = a^2 + b^2.\n    \\label{eq:pythagoras} % for referencing\n\\end{equation} % all \\begin statements must have an end statement\n\nWe can then reference our new equation!\nEqn.~\\ref{eq:pythagoras} is also known as the Pythagoras Theorem which is also\nthe subject of Sec.~\\ref{subsec:pythagoras}. A lot of things can be labeled:\nfigures, equations, sections, etc.\n\nSummations and Integrals are written with sum and int commands:\n\n% Some LaTeX compilers will complain if there are blank lines\n% In an equation environment.\n\\begin{equation}\n  \\sum_{i=0}^{5} f_{i}\n\\end{equation}\n\\begin{equation}\n  \\int_{0}^{\\infty} \\mathrm{e}^{-x} \\mathrm{d}x\n\\end{equation}\n\n\\section{Figures}\n\nLet's insert a figure. Figure placement can get a little tricky.\nBasic options are [t] for top, [b] for bottom, [h] for here (approximately).\nI definitely have to lookup the placement options each time.\n% See https://en.wikibooks.org/wiki/LaTeX/Floats,_Figures_and_Captions for more details\n\n\\begin{figure}[H] % H here denoted the placement option.\n    \\centering % centers the figure on the page\n    % Inserts a figure scaled to 0.8 the width of the page.\n    %\\includegraphics[width=0.8\\linewidth]{right-triangle.png}\n    % Commented out for compilation purposes. Please use your imagination.\n    \\caption{Right triangle with sides $a$, $b$, $c$}\n    \\label{fig:right-triangle}\n\\end{figure}\n\n\\subsection{Table}\nWe can also insert Tables in the same way as figures.\n\n\\begin{table}[H]\n  \\caption{Caption for the Table.}\n  % the {} arguments below describe how each row of the table is drawn.\n  % The basics are simple: one letter for each column, to control alignment:\n  % basic options are: c, l, r and p for centered, left, right and paragraph\n  % optionally, you can add a | for a vertical line\n  % See https://en.wikibooks.org/wiki/LaTeX/Tables for more details\n  \\begin{tabular}{c|cc}  % here it means \"centered | vertical line, centered centered\"\n    Number &  First Name & Last Name \\\\ % Column rows are separated by &\n    \\hline % a horizontal line\n    1 & Biggus & Dickus \\\\\n    2 & Monty & Python\n  \\end{tabular}\n  % it will approximately be displayed like this\n  % Number | First Name     Last Name\n  % -------|---------------------------  % because of \\hline\n  %   1    |   Biggus        Dickus\n  %   2    |   Monty         Python\n\\end{table}\n\n\\section{Getting \\LaTeX{} to not compile something (i.e.~Source Code)}\nLet's say we want to include some code into our \\LaTeX{} document,\nwe would then need \\LaTeX{} to not try and interpret that text and\ninstead just print it to the document. We do this with a verbatim\nenvironment.\n\n% There are other packages that exist (i.e. minty, lstlisting, etc.)\n% but verbatim is the bare-bones basic one.\n\\begin{verbatim}\n  print(\"Hello World!\")\n  a%b; % look! We can use % signs in verbatim.\n  random = 4; #decided by fair random dice roll, https://www.xkcd.com/221/\n  See https://www.explainxkcd.com/wiki/index.php/221:_Random_Number\n\\end{verbatim}\n\n\\section{Compiling}\n\nBy now you're probably wondering how to compile this fabulous document\nand look at the glorious glory that is a \\LaTeX{} pdf.\n(Yes, this document actually does compile).\n\nGetting to the final document using \\LaTeX{} consists of the following\nsteps:\n  \\begin{enumerate}\n    \\item Write the document in plain text (the ``source code'').\n    \\item Compile source code to produce a pdf.\n     The compilation step looks like this (in Linux): \\\\\n     \\begin{verbatim}\n        > pdflatex learn-latex.tex\n     \\end{verbatim}\n  \\end{enumerate}\n\nA number of \\LaTeX{} editors combine both Step 1 and Step 2 in the\nsame piece of software. So, you get to see Step 1, but not Step 2 completely.\nStep 2 is still happening behind the scenes\\footnote{In cases, where you use\nreferences (like Eqn.~\\ref{eq:pythagoras}), you may need to run Step 2\nmultiple times, to generate an intermediary *.aux file.}.\n% Also, this is how you add footnotes to your document!\n% with a simple \\footnote{...} command. They are numbered ¹, ², ... by default.\n\nYou write all your formatting information in plain text in Step 1.\nThe compilation part in Step 2 takes care of producing the document in the\nformat you defined in Step 1.\n\n\\section{Hyperlinks}\nWe can also insert hyperlinks in our document. To do so we need to include the\npackage hyperref into preamble with the command:\n\\begin{verbatim}\n    \\usepackage{hyperref}\n\\end{verbatim}\n\nThere exists two main types of links: visible URL \\\\\n\\url{https://learnxinyminutes.com/latex/}, or\n\\href{https://learnxinyminutes.com/latex/}{shadowed by text}\n% You can not add extra-spaces or special symbols into shadowing text since it\n% will cause mistakes during the compilation\n\nThis package also produces list of thumbnails in the output PDF document and\nactive links in the table of contents.\n\n\\section{Writing in ASCII or other encodings}\n\nBy default, historically LaTeX accepts inputs which are pure ASCII (128),\nbut not extended ASCII, meaning without accents (à, è etc.) and non-Latin symbols.\n\nIt is easy to insert accents and basic Latin symbols, with backslash shortcuts\nLike \\,c, \\'e, \\`A, \\ae and \\oe etc.  % for ç, é, À, etc\n% See https://en.wikibooks.org/wiki/LaTeX/Special_Characters#Escaped_codes for more\n\nTo write directly in UTF-8, when compiling with pdflatex, use\n\\begin{verbatim}\n    \\usepackage[utf8]{inputenc}\n\\end{verbatim}\nThe selected font has to support the glyphs used for your document, you have to add\n\\begin{verbatim}\n    \\usepackage[T1]{fontenc}\n\\end{verbatim}\n\nSince LuaTeX and XeLaTeX were designed with built-in support for UTF-8, making\nlife easier for writing in non-Latin alphabets.\n\n\\section{End}\n\nThat's all for now!\n\n% Most often, you would want to have a references section in your document.\n% The easiest way to set this up would be by using the bibliography section\n\\begin{thebibliography}{1}\n  % similar to other lists, the \\bibitem command can be used to list items\n  % each entry can then be cited directly in the body of the text\n  \\bibitem{latexwiki} The amazing \\LaTeX{} wikibook: \\emph{https://en.wikibooks.org/wiki/LaTeX}\n  \\bibitem{latextutorial} An actual tutorial: \\emph{http://www.latex-tutorial.com}\n\\end{thebibliography}\n\n% end the document\n\\end{document}\n```\n\n## More on LaTeX\n\n* The amazing LaTeX Wikibook: [https://en.wikibooks.org/wiki/LaTeX](https://en.wikibooks.org/wiki/LaTeX)\n* An actual tutorial: [http://www.latex-tutorial.com/](http://www.latex-tutorial.com/)\n* A quick guide for learning LaTeX: [Learn LaTeX in 30 minutes](https://www.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes)\n* An interactive platform to learn LaTeX (installationfree) [learnlatex.org/](https://www.learnlatex.org/)\n* Stack Exchange's question and answer site about TeX, LaTeX, ConTeXt, etc. [tex.stackexchange.com](https://tex.stackexchange.com/)\n"
        },
        {
          "name": "lbstanza.md",
          "type": "blob",
          "size": 8.2822265625,
          "content": "---\nname: LB Stanza\nfilename: learn-stanza.stanza\ncontributors: \n  - [\"Mike Hilgendorf\", \"https://github.com/m-hilgendorf\"]\n---\n\nLB Stanza (or Stanza for short) is a new optionally-typed general purpose programming language from the University of California, Berkeley. Stanza was designed to help programmers tackle the complexity of architecting large programs and significantly increase the productivity of application programmers across the entire software development life cycle.\n\n\n```\n; this is a comment \n;<A>\nThis is a block comment \n    ;<B> \n        block comments can be nested with optional tags. \n    ;<B>\n;<A>\ndefpackage learn-stanza-in-y: \n  import core \n  import collections \n\n;==============================================================================\n; The basics, things you'd find in most programming languages\n;==============================================================================\n\n\n; Variables can be mutable (var) or immutable (val)\nval immutable = \"this string can't be changed\"\nvar mutable = \"this one can be\" \nmutable = \"like this\"\n\n; The basic data types (annotations are optional) \nval an-int: Int = 12345\nval a-long: Long = 12345L\nval a-float: Float = 1.2345f\nval a-double: Double = 3.14159\nval a-string: String = \"this is a string\"\nval a-multiline-string = \\<tag>\n    this is a \"raw\" string literal \n\\<tag>\n\n; Print a formatted string with println and \"...\" % [...]\nprintln(\"this is a formatted string %_ %_\" % [mutable, immutable])\n\n; Stanza is optionally typed, and has a ? (any) type. \nvar anything:? = 0\nanything = 3.14159\nanything = \"a string\"\n\n; Stanza has basic collections like Tuples, Arrays, Vectors and HashTables\nval tuple: Tuple<?> = [mutable, immutable]\n\nval array = Array<?>(3)\narray[0] = \"string\"\narray[1] = 1\narray[2] = 1.23455\n; array[3] = \"out-of-bounds\" ; arrays are bounds-checked \n\nval vector = Vector<?>()\nvector[0] = \"string\"\nvector[1] = 1\nvector[2] = 3.14159\n\nval hash-table = HashTable<String, ?>()\nhash-table[\"0\"] = 0\nhash-table[\"1\"] = 1 \nhash-table[\"2\"] = 1 \n\n\n;==============================================================================\n; Functions\n;==============================================================================\n; Functions are declared with the `defn` keyword \ndefn my-function (arg:?) : ; note the space between identifier and arg list\n  println(\"called my-function with %_\" % [arg])\n\nmy-function(\"arg\")  ; note the lack of a space to call the function\n\n; Functions can be declared inside another function and capture variables from\n; the surrounding environment.\ndefn outer (arg): \n  defn inner (): \n    println(\"outer had arg: %_\" % [arg])\n  inner()\n\nouter(\"something\")\n\n; functions are \"first-class\" in stanza, meaning you can assign variables \n; to functions and pass functions as arguments to other functions. \nval a-function = outer \ndefn do-n-times (arg, func, n:Int): \n  for i in 0 to n do : \n    func(arg)\ndo-n-times(\"argument\", a-function, 3)\n\n; sometimes you want to define a function inline, or use an anonymous function.\n; for this you can use the syntax: \n;   fn (args): \n;       ... \ndo-n-times(\"hello\", fn (arg): println(arg), 2)\n\n; there is a shorthand for writing anonymous functions\ndo-n-times(\"hello\", { println(_) }, 2)\n\n; the short hand works for multiple arguments as well. \nval multi-lambda = { println(_ + 2 * _) }\nmulti-lambda(1, 2)\n\n;==============================================================================\n; User defined types\n;==============================================================================\n; Structs are declared with the `defstruct` keyword\ndefstruct MyStruct: \n  field\n\n; constructors are derived automatically\nval my-struct = MyStruct(\"field:value\")\n\n; fields are accessed using function-call syntax\nprintln(field(my-struct))\n\n; Stanza supports subtyping with a \"multimethod\" system based on method \n; overloading.\ndeftype MyType\ndefmulti a-method (m:MyType)\n\ndefstruct Foo <: MyType\ndefstruct Bar <: MyType\ndefmethod a-method (a-foo: Foo):\n  println(\"called a-method on a Foo\")\n\ndefmethod a-method (a-foo: Bar):\n  println(\"called a-method on a Bar\")\n\n;==============================================================================\n; The Type System\n;==============================================================================\n; True and Falseare types with a single value. \nval a-true: True = true \nval a-false: False = false \n\n; You can declare a union type, or a value that is one of a set of types \nval a-boolean: True|False = true \nval another-boolean: True|False = false \n\n; You can pattern match on types \nmatch(a-boolean):\n  (t:True): println(\"is true\")\n  (f:False): println(\"is false\")\n\n; You can match against a single possible type\nmatch(a-boolean:True):\n  println(\"is still true\")\nelse: \n  println(\"is not true\")\n\n; You can compose program logic around the type of a variable\nif anything is Float :\n  println(\"anything is a float\")\nelse if anything is-not String : \n  println(\"anything is not an int\")\nelse : \n  println(\"I don't know what anything is\")\n\n;==============================================================================\n; Control Flow \n;==============================================================================\n; stanza has the standard basic control flow \nval condition = [false, false]\nif condition[0] : \n  ; do something \n  false \nelse if condition[1] : \n  ; do another thing\n  false \nelse :\n  ; whatever else\n  false\n\n; there is also a switch statement, which can be used to pattern match\n; on values (as opposed to types)\nswitch(anything):\n  \"this\": false \n  \"that\": false \n  \"the-other-thing\": false \n  else: false \n\n; for and while loops are supported\nwhile condition[0]: \n  println(\"do stuff\")\n\nfor i in 0 to 10 do:  \n  vector[i] = i\n\n; stanza also supports named labels which can function as break or return \n; statements\ndefn another-fn (): \n  label<False> return:\n    label<False> break:\n      while true: \n        if condition[0] is False: \n            break(false) \n    return(false)\n\n; For a comprehensive guide on Stanza's advanced control flow, check out \n; this page: http://lbstanza.org/chapter9.html from Stanza-by-Example\n\n;==============================================================================\n; Sequences \n;==============================================================================\n; for \"loops\" are sugar for a more powerful syntax. \nval xs = [1, 2, 3] \nval ys = ['a', 'b', 'c']\nval zs = [\"foo\", \"bar\", \"baz\"]\n\nfor (x in xs, y in ys, z in zs) do : \n  println(\"x:%_, y:%_, z:%_\" % [x, y, z])\n\n\n;xs, ys, and zs are all \"Seqable\" meaning they are Seq types (sequences). \n; the `do` identifier is a special function that just applies the body of\n; the for loop to each element of the sequence.\n; \n; A common sequence task is concatenating sequences. This is accomplished \n; using the `seq-cat` function. This is analogous to \"flattening\" iterateors\nval concat = to-tuple $ \n  for sequence in [xs, ys, zs] seq-cat: \n    sequence\n\n; we can also use a variation to interleave the elements of multiple sequences\nval interleaved = to-tuple $ \n  for (x in xs, y in ys, z in zs) seq-cat : \n    [x, y, z]\n\nprintln(\"[%,] [%,]\" % [concat, interleaved])\n\n; Another common task is mapping a sequence to another, for example multiplying\n; all the elements of a list of numbers by a constant. To do this we use `seq`. \nvar numbers = [1.0, 2.0, 3.0, 4.0] \nnumbers = to-tuple $ \n  for n in numbers seq : \n    2.0 * n \nprintln(\"%,\" % [numbers])\n\nif find({_ == 2.0}, numbers) is-not False : \n  println(\"found it!\")\n\n; or maybe we just want to know if there's something in a sequence \nvar is-there = \n  for n in numbers any? :\n    n == 2.0 \n\n; since this is \"syntactic sugar\" we can write it explicitly using an \n; anonymous function\nis-there = any?({_ == 2.0}, numbers)\n\n; a detailed reference of the sequence library and various adaptors can \n; be found here: http://lbstanza.org/reference.html#anchor439\n\n\n=========================================================================\n; Documentation \n;=========================================================================\n;\n; Top level statements can be prefixed with the \"doc\" field which takes \n; a string value and is used to autogenerate documentation for the package. \ndoc: \\<doc>\n    # Document Strings \n\n    ```\n    val you-can = \"include code snippets, too\" \n    ```\n\n    To render documentation as markdown (compatible with mdbook)\n\n    ```bash \n    stanza doc source.stanza -o docs \n    ```\n\\<doc>\ndefn docfn () : false \n```\n"
        },
        {
          "name": "ldpl.md",
          "type": "blob",
          "size": 5.4033203125,
          "content": "---\nname: LDPL\nfilename: learnLDPL.ldpl\ncontributors:\n    - [\"Martín del Río\", \"https://github.com/lartu\"]\n    - [\"John Paul Wohlscheid\", \"https://github.com/JohnBlood\"]\n---\n\n**LDPL** is a powerful, C++ transpiled, open-source programming language designed\nfrom the ground up to be excessively expressive, readable, fast and easy to learn.\nIt mimics plain English, in the likeness of older programming languages like COBOL,\nwith the desire that it can be understood by anybody. It's very portable and runs on a\nplethora of different architectures and operating systems and it even supports UTF-8\nout of the box.\n\n[Read more here.](https://github.com/lartu/ldpl)\n\n```coffeescript\n# This is a single line comment in LDPL.\n# LDPL doesn't have multi-line comments.\n\n# LDPL is a case-insensitive language: dIsPlaY and DISPLAY are the same\n# statement, and foo and FOO name the same variable.\n\n# An LDPL source file is divided in two sections, the DATA section and\n# the PROCEDURE section.\n\nDATA:\n# Within the DATA section, variables are declared.\n\nmyNumber is number          # Defines a real number.\nmyString is text            # Defines a string.\nmyList is number list       # Defines a list of numbers.\nmyMap  is number map        # Defines a map of numbers.\n\n# LDPL understands four data types: two scalar types (NUMBER, TEXT)\n# and two container types (LISTs and MAPs).\n# LISTs can be TEXT LISTs or NUMBER LISTs, while MAPs can be\n# TEXT MAPs and NUMBER MAPs. You can also chain many containers\n# to create larger data types:\ntextListList is text list list\nmyMulticontainer is number list list map \n# Defines a map of lists of lists of numbers.\n\nPROCEDURE:\n# Within the PROCEDURE section, your code is written.\n\nstore -19.2 in myNumber         # Use the STORE statement to assign values\nstore \"Hi there\" in myString    # to variables.\npush 890 to myList # Use PUSH - TO to append values to lists.\npush 100 to myList\npush 500 to myList\nstore 45 in myMap:\"someIndex\" # Use the : operator to index containers.\n\npush list to textListList # Push an empty list into a list of lists.\npush \"LDPL is nice!\" to textListList:0 #Push text to the pushed list.\n\ndisplay \"Hello World!\" # Use the DISPLAY statement to print values.\n# The display statement can receive multiple values separated by spaces.\ndisplay crlf \"How are you today?\" myNumber myString crlf\n# CRLF is the standard line break value in LDPL.\ndisplay textListList:0:0 \" Isn't it?\" crlf\n\n# IF statements in LDPL are extremely verbose:\nif myNumber is equal to -19.2 and myList:0 is less than 900 then\n    display \"Yes!\" crlf\nelse if myMap:\"someIndex\" is not equal to 45 then\n    display \"This is an else if!\" crlf\nelse\n    display \"Else!\" crlf\nend if\n# Valid LDPL comparison operators are\n# - IS EQUAL TO\n# - IS NOT EQUAL TO\n# - IS LESS THAN\n# - IS GREATER THAN\n# - IS LESS THAN OR EQUAL TO\n# - IS GREATER THAN OR EQUAL TO\nif \"Hi there!\" is not equal to \"Bye bye!\" then\n    display \"Yep, those weren't equal.\" crlf\nend if\n# LDPL normally doesn't understand inline expressions, so you\n# cannot do stuff like:\n# if myNumber - 9 * 2 is equal to 10 then\n# LDPL will set your computer on fire and burst your screen if you do so.\n\n# WHILE loops follow the same rules\nstore 0 in myNumber\nwhile myNumber is less than 10 do\n    display \"Loop number \" myNumber \"...\" crlf\n    in myNumber solve myNumber + 1 # You can do math like this.\nrepeat\n# You can use 'break' and 'continue' inside loops just like any other language.\n\n# LDPL also has FOR loops and FOR EACH loops\nfor myNumber from 0 to 100 step 2 do\n    display myNumber crlf\nrepeat\n\nfor each myNumber in myList do\n    display myNumber\nrepeat\n\ndisplay \"Enter your name: \"\naccept myString # Use ACCEPT to let the user input values.\ndisplay \"Hi there, \" myString crlf\ndisplay \"How old are you?: \"\naccept myNumber\nif myNumber is greater than 200 then\n    display \"Woah, you are so old!\" crlf\nend if\n\nwait 1000 milliseconds # Pause the program for a whole second.\n\n# Let's do some math\nstore 1.2 in myNumber\nin myNumber solve myNumber * (10 / 7.2) # Operators are separated by spaces.\nfloor myNumber\ndisplay myNumber crlf\nget random in myNumber # get a random number between 0 and 1 \n                       # and store it in myNumber\n\n# Functions in LDPL are called sub-procedures. Sub-procedures, like source\n# files, are divided in sections. The sections found in sub-procedures are\n# the PARAMETERS section, the LOCAL DATA section and the PROCEDURE section.\n# All sections except the PROCEDURE section can be skipped if they aren't\n# used. If no PARAMETERS nor LOCAL DATA sections are used, the PROCEDURE\n# keyword may be omitted.\nsub myFunction\n    parameters:\n        a is number # LDPL is pass by reference\n        b is number\n        result is number # Thus you can return values through a parameter.\n    local data:\n        c is number\n    procedure:\n        get random in c\n        in result solve a + b * c\nend sub\n\nsub sayHello\n    display \"Hi there!\" crlf\n    return\n    display \"This won't be displayed :(\"\nend sub\n\ncall myFunction with 1 2 myNumber\ndisplay myNumber crlf\ncall sayHello\ncall sayBye # sub-procedures may be called before they are declared\n\nsub sayBye\n    display \"Bye!\"\nend sub\n\n# One of the greatest features of LDPL is the ability to create your\n# own statements.\n\ncreate statement \"say hi\" executing sayHello\nsay hi\n\ncreate statement \"random add $ and $ in $\" executing myFunction\nrandom add 1 and 2 in myNumber\ndisplay myNumber crlf\n\nexit\n```\n\n## Further Reading\n\n * [LDPL Docs](https://docs.ldpl-lang.org)\n"
        },
        {
          "name": "lean4.md",
          "type": "blob",
          "size": 13.876953125,
          "content": "---\nname: \"Lean 4\"\nfilename: learnlean4.lean\ncontributors:\n    - [\"Balagopal Komarath\", \"https://bkomarath.rbgo.in/\"]\n    - [\"Ferinko\", \"https://github.com/Ferinko\"]\n---\n\n[Lean 4](https://lean-lang.org/) is a dependently typed functional programming\nlanguage and an interactive theorem prover.\n\n```lean4\n/-\nAn enumerated data type.\n-/\ninductive Grade where\n  | A : Grade\n  | B : Grade\n  | F : Grade\nderiving Repr\n\n/-\nFunctions.\n-/\ndef grade (m : Nat) : Grade :=\n  if 80 <= m then Grade.A\n  else if 60 <= m then Grade.B\n  else Grade.F\n\ndef highMarks := 80 + 9\ndef lowMarks  := 25 + 25\n#eval grade highMarks\n#eval grade lowMarks\n\n#check (0 : Nat)\n/- #check (0 : Grade) -/ /- This is an error. -/\n\n/-\nTypes themselves are values.\n-/\n#check (Nat : Type)\n\n/-\nMathematical propositions are values in Lean. `Prop` is the type of\npropositions.\n\nHere are some simple propositions.\n-/\n\n#check 0 = 1\n#check 1 = 1\n#check 2^9 - 2^8 = 2^8\n\n/-\nNotice Lean displays `0 = 1 : Prop` to say:\n\n  The statement \"0 = 1\" is a proposition.\n\nWe want to distinguish true propositions and false propositions. We do this via\nproofs.\n\nEach proposition is a type. `0 = 1` is a type, `1 = 1` is another type.\n\nA proposition is true iff there is a value of that type.\n\nHow do we construct a value of type `1 = 1`? We use a constructor that is\ndefined for that type.\n\n  `Eq.refl a` constructs a value of type `a = a`. (reflexivity)\n\nUsing this we can prove `1 = 1` as follows.\n-/\n\ntheorem one_eq_one : 1 = 1 := Eq.refl 1\n\n/-\nBut there is no way to prove (construct a value of type) `0 = 1`.\n\nThe following will fail. As will `Eq.refl 1`\n-/\n\n/- theorem zero_eq_one : 0 = 1 := Eq.refl 0 -/\n\n/-\nLet us prove an inequality involving variables.\n\nThe `calc` primitive allows us to prove equalities using stepwise\ncalculations. Each step has to be justified by a proof.\n-/\ntheorem plus_squared (a b : Nat) : (a+b)^2 = a^2 + 2*a*b + b^2 :=\n  calc\n    (a+b)^2 = (a+b)*(a+b)             := Nat.pow_two _\n    _       = (a+b)*a + (a+b)*b       := Nat.mul_add _ _ _\n    _       = a*a + b*a + (a*b + b*b) := by repeat rw [Nat.add_mul]\n    _       = a*a + b*a + a*b + b*b   := by rw [← Nat.add_assoc]\n    _       = a*a + a*b + a*b + b*b   := by rw [Nat.mul_comm b _]\n    _       = a^2 + a*b + a*b + b*b   := by rw [← Nat.pow_two _]\n    _       = a^2 + a*b + a*b + b^2   := by rw [← Nat.pow_two _]\n    _       = a^2 + (a*b + a*b) + b^2 := by rw [Nat.add_assoc (a^_)]\n    _       = a^2 + 2*(a*b) + b^2     := by rw [← Nat.two_mul _]\n    _       = a^2 + 2*a*b + b^2       := by rw [Nat.mul_assoc _ _ _]\n/-\nUnderscores can be used when there is no ambiguity in what is to be matched.\n\nFor example, in the first step, we want to apply `Nat.pow_two (a+b)`. But,\n`(a+b)` is the only pattern here to apply `Nat.pow_two`. So we can omit it.\n-/\n\n/-\nLet us now prove more \"realistic\" theorems. Those involving logical connectives.\n\nFirst, we define even and odd numbers.\n-/\ndef Even (n : Nat) := ∃ k, n = 2*k\ndef Odd  (n : Nat) := ∃ k, n = 2*k + 1\n\n/-\nTo prove an existential, we can provide specific values if we know them.\n-/\ntheorem zero_even : Even 0 :=\n  have h : 0 = 2 * 0 := Eq.symm (Nat.mul_zero 2)\n  Exists.intro 0 h\n/-\n`Exists.intro v h` proves `∃ x, p x` by substituting `x` by `v` and using the\nproof `h` for `p v`.\n-/\n\n/-\nNow, we will see how to use hypothesis that are existentials to prove\nconclusions that are existentials.\n\nThe curly braces around parameters `n` and `m` indicate that they are\nimplicit. Here, Lean will infer them from `hn` and `hm`.\n-/\ntheorem even_mul_even_is_even' {n m : Nat} (hn : Even n) (hm : Even m) : Even (n*m) :=\n  Exists.elim hn (fun k1 hk1 =>\n    Exists.elim hm (fun k2 hk2 =>\n      Exists.intro (k1 * ( 2 * k2)) (\n        calc\n          n*m = (2 * k1) * (2 * k2) := by rw [hk1, hk2]\n          _   = 2 * (k1 * (2 * k2)) := by rw [Nat.mul_assoc]\n      )\n    )\n  )\n\n/-\nMost proofs are written using *tactics*. These are commands to Lean that guide\nit to construct proofs by itself.\n\nThe same theorem, proved using tactics.\n-/\ntheorem even_mul_even_is_even {n m : Nat} (hn : Even n) (hm : Even m) : Even (n*m) := by\n  have ⟨k1, hk1⟩ := hn\n  have ⟨k2, hk2⟩ := hm\n  apply Exists.intro $ k1 * (2 * k2)\n  calc\n    n*m = (2 * k1) * (2 * k2) := by rw [hk1, hk2]\n    _   = 2 * (k1 * (2 * k2)) := by rw [Nat.mul_assoc]\n\n/-\nLet us work with implications.\n-/\ntheorem succ_of_even_is_odd' {n : Nat} : Even n → Odd (n+1) :=\n  fun hn =>\n    have ⟨k, hk⟩ := hn\n    Exists.intro k (\n      calc\n        n + 1 = 2 * k + 1 := by rw [hk]\n    )\n/-\nTo prove an implication `p → q`, you have to write a function that takes a proof\nof `p` and construct a proof of `q`.\n\nHere, `pn` is proof of `Even n := ∃ k, n = 2 *k`. Eliminating the existential\ngets us `k` and a proof `hk` of `n = 2 * k`.\n\nNow, we have to introduce the existential `∃ k, n + 1 = 2 * k + 1`. This `k` is\nthe same as `k` for `n`. And, the equation is proved by a simple calculation\nthat substitutes `2 * k` for `n`, which is allowed by `hk`.\n-/\n\n/-\nSame theorem, now using tactics.\n-/\ntheorem succ_of_even_is_odd {n : Nat} : Even n → Odd (n+1) := by\n  intro hn\n  have ⟨k, hk⟩ :=  hn\n  apply Exists.intro k\n  rw [hk]\n\n/-\nThe following theorem can be proved similarly.\n\nWe will use this theorem later.\n\nA `sorry` proves any theorem. It should not be used in real proofs.\n-/\ntheorem succ_of_odd_is_even {n : Nat} : Odd n → Even (n+1) := sorry\n\n/-\nWe can use theorems by applying them.\n-/\nexample : Odd 1 := by\n  apply succ_of_even_is_odd\n  exact zero_even\n/-\nThe two new tactics are:\n\n  - `apply p` where `p` is an implication `q → r` and `r` is the goal rewrites\n  the goal to `q`. More generally, `apply t` will unify the current goal with\n  the conclusion of `t` and generate goals for each hypothesis of `t`.\n  - `exact h` solves the goal by stating that the goal is the same as `h`.\n-/\n\n/-\nLet us see examples of disjunctions.\n-/\nexample : Even 0 ∨ Odd 0 := Or.inl zero_even\nexample : Even 0 ∨ Odd 1 := Or.inl zero_even\nexample : Odd 1 ∨ Even 0 := Or.inr zero_even\n/-\nHere, we always know from `p ∨ q` which of `p` and/or `q` is correct. So we can\nintroduce a proof of the correct side.\n-/\n\n/-\nLet us see a more \"standard\" disjunction.\n\nHere, from the hypothesis that `n : Nat`, we cannot determine whether `n` is\neven or odd. So we cannot construct `Or` directly.\n\nBut, for any specific `n`, we will know which one to construct.\n\nThis is exactly what induction allows us to do. We introduce the `induction`\ntactic.\n\nThe inductive hypothesis is a disjunction. When disjunctions appear at the\nhypothesis, we use *proof by exhaustive cases*. This is done using the `cases`\ntactic.\n-/\ntheorem even_or_odd {n : Nat} : Even n ∨ Odd n := by\n  induction n\n  case zero => left ; exact zero_even\n  case succ n ihn =>\n    cases ihn with\n    | inl h => right ; apply (succ_of_even_is_odd h)\n    | inr h => left  ; apply (succ_of_odd_is_even h)\n/-\n`induction` is not just for natural numbers. It is for any type, since all types\nin Lean are inductive.\n-/\n\n/-\nWe now state Collatz conjecture. The proof is left as an exercise to the reader.\n-/\ndef collatz_next (n : Nat) : Nat :=\n  if n % 2 = 0 then n / 2 else 3 * n + 1\n\ndef iter (k : Nat) (f : Nat → Nat) :=\n  match k with\n  | Nat.zero => fun x => x\n  | Nat.succ k' => fun x => f (iter k' f x)\n\ntheorem collatz : ∀ n, n > 0 → ∃ k, iter k collatz_next n = 1 := sorry\n\n/-\nNow, some \"corner cases\" in logic.\n-/\n\n/-\nThe proposition `True` is something that can be trivially proved.\n\n`True.intro` is a constructor for proving `True`. Notice that it needs no\ninputs.\n-/\ntheorem obvious : True := True.intro\n\n/-\nOn the other hand, there is no constructor for `False`.\n\nWe have to use `sorry`.\n-/\ntheorem impossible : False := sorry\n\n/-\nAny `False` in the hypothesis allows us to conclude anything.\n\nWritten in term style, we use the eliminator `False.elim`. It takes a proof of\n`False`, here `h`, and concludes whatever is the goal.\n-/\ntheorem nonsense (h : False) : 0 = 1 := False.elim h\n\n/-\nThe `contradiction` tactic uses any `False` in the hypothesis to conclude the\ngoal.\n-/\ntheorem more_nonsense (h : False) : 1 = 2 := by contradiction\n\n/-\nTo illustrate constructive vs classical logic, we now prove the contrapositive\ntheorem.\n\nThe forward direction does not require classical logic.\n-/\ntheorem contrapositive_forward' (p q : Prop) : (p → q) → (¬q → ¬p) :=\n  fun pq => fun hqf => fun hp => hqf (pq hp)\n/-\nUse the definition `¬q := q → False`. Notice that we have to construct `p →\nFalse` given `p → q` and `q → False`. This is just function composition.\n-/\n\n/-\nThe above proof, using tactics.\n-/\ntheorem contrapositive_forward (p q : Prop) : (p → q) → (¬q → ¬p) := by\n  intro hpq\n  intro\n  intro hp\n  specialize hpq hp\n  contradiction\n\n/-\nThe reverse requires classical logic.\n\nHere, we are required to construct a `q` given values of following types:\n\n  - `(q → False) → (p → False)`.\n  - `p`.\n\nThis is impossible without using the law of excluded middle.\n-/\ntheorem contrapositive_reverse' (p q : Prop) : (¬q → ¬p) → (p → q) :=\n  fun hnqnp =>\n  Classical.byCases\n    (fun hq  => fun  _ => hq)\n    (fun hnq => fun hp => absurd hp (hnqnp hnq))\n/-\nLaw of excluded middle tells us that we will have a `q` or a `q → False`. In the\nfirst case, it is trivial to construct a `q`, we already have it. In the second\ncase, we give the `q → False` to obtain a `p → False`.  Then, we use the fact\n(in constructive logic) that given `p` and `p → False`, we can construct\n`False`. Once, we have `False`, we can construct anything, and specifically `q`.\n-/\n\n/-\nSame proof, using tactics.\n-/\ntheorem contrapositive_reverse (p q : Prop) : (¬q → ¬p) → (p → q) := by\n  intro hnqnp\n  intro hp\n  have emq := Classical.em q\n  cases emq\n  case inl _ => assumption\n  case inr h => specialize hnqnp h ; contradiction\n\n/-\nTo illustrate how we can define an work with axiomatic systems. Here is a\ndefinition of Groups and some proofs directly translated from \"Topics in\nAlgebra\" by Herstein, Second edition.\n-/\n\n/-\nA `section` introduces a namespace.\n-/\nsection GroupTheory\n/-\nTo define abstract objects like groups, we may use `class`.\n-/\nclass Group (G : Type u) where\n  op : G → G → G\n  assoc : ∀ a b c : G, op (op a b) c = op a (op b c)\n  e : G\n  identity: ∀ a : G, op a e = a ∧ op e a = a\n  inverse: ∀ a : G, ∃ b : G, op a b = e ∧ op b a = e\n\n/-\nLet us introduce some notation to make this convenient.\n-/\nopen Group\ninfixl:70 \" * \" => op\n\n/-\n`G` will always stand for a group and variables `a b c` will be elements of that\ngroup in this `section`.\n-/\nvariable [Group G] {a b c : G}\n\ndef is_identity (e' : G) := ∀ a : G, (a * e' = a ∧ e' * a = a)\n\n/-\nWe prove that the identity element is unique.\n-/\ntheorem identity_element_unique : ∀ e' : G, is_identity e' → e' = e := by\n  intro e'\n  intro h\n  specialize h e\n  have ⟨h1, _⟩ := h\n  have h' := identity e'\n  have ⟨_, h2⟩ := h'\n  exact Eq.trans (Eq.symm h2) h1\n/-\nNote that we used the `identity` axiom.\n-/\n\n/-\nLeft cancellation. We have to use both `identity` and `inverse` axioms from\n`Group`.\n-/\ntheorem left_cancellation : ∀ x y : G, a * x = a * y → x = y := by\n  have h1 := inverse a\n  have ⟨ai, a_inv⟩ := h1\n  have ⟨_, h2⟩ := a_inv\n  intro x y\n  intro h3\n  calc\n    x = (e : G) * x  := Eq.symm (identity x).right\n    _ = ai * a * x   := by rw [h2]\n    _ = ai * (a * x) := by rw [assoc]\n    _ = ai * (a * y) := by rw [h3]\n    _ = ai * a * y   := by rw [← assoc]\n    _ = (e : G) * y  := by rw [h2]\n    _ = y            := (identity y).right\n\nend GroupTheory /- Variables `G`, `a`, `b`, `c` are now not in scope. -/\n\n/-\nLet us see a mutually recursive definition.\n\nThe game of Nim with two heaps.\n-/\nabbrev between (lower what upper : Nat) : Prop := lower ≤ what ∧ what ≤ upper\n\nmutual\n  def Alice : Nat → Nat → Prop\n    | n1, n2 =>\n      ∃ k, (between 1 k n1 ∧ (between 1 k n1 → Bob (n1-k) n2))\n         ∨ (between 1 k n2 ∧ (between 1 k n2 → Bob n1 (n2-k)))\n\n  def Bob : Nat → Nat → Prop\n    | n1, n2 =>\n      ∀ k, (between 1 k n1 → Alice (n1-k) n2)\n         ∧ (between 1 k n2 → Alice n1 (n2-k))\nend\n\nexample : Bob 0 0 := by\n  intro k\n  induction k\n  case zero =>\n    constructor\n    intro ; contradiction\n    intro ; contradiction\n  case succ =>\n    constructor\n    intro a ; have := a.right ; contradiction\n    intro a ; have := a.right ; contradiction\n\n/-\nWe have to convince Lean of termination when a function is defined using just a\n`def`. Here's a simple primality checking algorithm that tests all candidate\ndivisors.\n-/\ndef prime' (n : Nat) : Bool :=\n  if h : n < 2 then\n    false\n  else\n    @go 2 n (by omega)\nwhere\n  go (d : Nat) (n : Nat) {_ : n ≥ d} : Bool :=\n    if h : n = d then /- `h` needed for `omega` below. -/\n      true\n    else if n % d = 0 then\n      false\n    else\n      @go (Nat.succ d) n (by omega)\n  termination_by (n - d)\n/-\nWe have to specify that the recursive function `go` terminates because `n-k`\ndecreases in each recursive call. This needs the hypothesis `n > k` at the\nrecursive call site. But the function itself can only assume that `n ≥ k`. We\nlabel the test `n ≤ k` by `h` so that the falsification of this proposition can\nbe used by `omega` later to conclude that `n > k`.\n\nThe tactic `omega` can solve simple equalities and inequalities.\n-/\n/-\nYou can also instruct Lean to not check for totality by prefixing `partial` to\n`def`.\n-/\n\n/-\nOr, we can rewrite the function to test the divisors from largest to\nsmallest. In this case, Lean easily verifies that the function is total.\n-/\ndef prime (n : Nat) : Bool :=\n  if n < 2 then\n    true\n  else\n    go (n-1) n\nwhere\n  go d n :=\n    if d < 2 then\n      true\n    else if n % d = 0 then\n      false\n    else\n      go (d-1) n\n/-\nNow, to Lean, it is obvious that `go` will terminate because `d` decreases in\neach recursive call.\n-/\n#eval prime 57\n#eval prime 97\n```\n\nFor further learning, see:\n\n* [Functional Programming in Lean](https://lean-lang.org/functional_programming_in_lean/)\n* [Theorem Proving in Lean 4](https://lean-lang.org/theorem_proving_in_lean4/)\n* [Lean 4 Manual](https://lean-lang.org/lean4/doc/)\n"
        },
        {
          "name": "less.md",
          "type": "blob",
          "size": 7.1552734375,
          "content": "---\nname: Less\nfilename: learnless.less\ncontributors:\n  - [\"Saravanan Ganesh\", \"http://srrvnn.me\"]\n---\n\nLess is a CSS pre-processor, that adds features such as variables, nesting, mixins and more.\nLess (and other preprocessors, such as [Sass](http://sass-lang.com/)) help developers to write maintainable and DRY (Don't Repeat Yourself) code.\n\n```less\n//Single line comments are removed when Less is compiled to CSS.\n\n/*Multi line comments are preserved. */\n\n\n\n/* Variables\n==============================*/\n\n\n/* You can store a CSS value (such as a color) in a variable.\n   Use the '@' symbol to create a variable. */\n\n@primary-color: #a3a4ff;\n@secondary-color: #51527f;\n@body-font: 'Roboto', sans-serif;\n\n/* You can use the variables throughout your stylesheet.\n   Now if you want to change a color, you only have to make the change once.*/\n\nbody {\n\tbackground-color: @primary-color;\n\tcolor: @secondary-color;\n\tfont-family: @body-font;\n}\n\n/* This would compile to: */\n\nbody {\n\tbackground-color: #a3a4ff;\n\tcolor: #51527F;\n\tfont-family: 'Roboto', sans-serif;\n}\n\n\n/* This is much more maintainable than having to change the color\n   each time it appears throughout your stylesheet. */\n\n\n\n/* Mixins\n==============================*/\n\n\n/* If you find you are writing the same code for more than one\n   element, you might want to reuse that easily.*/\n\n.center {\n\tdisplay: block;\n\tmargin-left: auto;\n\tmargin-right: auto;\n\tleft: 0;\n\tright: 0;\n}\n\n/* You can use the mixin by simply adding the selector as a style */\n\ndiv {\n\t.center;\n\tbackground-color: @primary-color;\n}\n\n/* Which would compile to: */\n\n.center {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  left: 0;\n  right: 0;\n}\ndiv {\n\tdisplay: block;\n\tmargin-left: auto;\n\tmargin-right: auto;\n\tleft: 0;\n\tright: 0;\n\tbackground-color: #a3a4ff;\n}\n\n/* You can omit the mixin code from being compiled by adding parenthesis\n   after the selector */\n\n.center() {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  left: 0;\n  right: 0;\n}\n\ndiv {\n  .center;\n  background-color: @primary-color;\n}\n\n/* Which would compile to: */\ndiv {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  left: 0;\n  right: 0;\n  background-color: #a3a4ff;\n}\n\n\n\n/* Nesting\n==============================*/\n\n\n/* Less allows you to nest selectors within selectors */\n\nul {\n\tlist-style-type: none;\n\tmargin-top: 2em;\n\n\tli {\n\t\tbackground-color: #f00;\n\t}\n}\n\n/* '&' will be replaced by the parent selector. */\n/* You can also nest pseudo-classes. */\n/* Keep in mind that over-nesting will make your code less maintainable.\n   Best practices recommend going no more than 3 levels deep when nesting.\n   For example: */\n\nul {\n\tlist-style-type: none;\n\tmargin-top: 2em;\n\n\tli {\n\t\tbackground-color: red;\n\n\t\t&:hover {\n\t\t  background-color: blue;\n\t\t}\n\n\t\ta {\n\t\t  color: white;\n\t\t}\n\t}\n}\n\n/* Compiles to: */\n\nul {\n  list-style-type: none;\n  margin-top: 2em;\n}\n\nul li {\n  background-color: red;\n}\n\nul li:hover {\n  background-color: blue;\n}\n\nul li a {\n  color: white;\n}\n\n\n\n/* Functions\n==============================*/\n\n\n/* Less provides functions that can be used to accomplish a variety of\n   tasks. Consider the following: */\n\n/* Functions can be invoked by using their name and passing in the\n   required arguments. */\n\nbody {\n  width: round(10.25px);\n}\n\n.header {\n\tbackground-color: lighten(#000, 0.5);\n}\n\n.footer {\n  background-color: fadeout(#000, 0.25)\n}\n\n/* Compiles to: */\n\nbody {\n  width: 10px;\n}\n\n.header {\n  background-color: #010101;\n}\n\n.footer {\n  background-color: rgba(0, 0, 0, 0.75);\n}\n\n/* You may also define your own functions. Functions are very similar to\n   mixins. When trying to choose between a function or a mixin, remember\n   that mixins are best for generating CSS while functions are better for\n   logic that might be used throughout your Less code. The examples in\n   the 'Math Operators' section are ideal candidates for becoming a reusable\n   function. */\n\n/* This function calculates the average of two numbers: */\n\n.average(@x, @y) {\n  @average-result: ((@x + @y) / 2);\n}\n\ndiv {\n  .average(16px, 50px); // \"call\" the mixin\n  padding: @average-result;    // use its \"return\" value\n}\n\n/* Compiles to: */\n\ndiv {\n  padding: 33px;\n}\n\n\n\n/*Extend (Inheritance)\n==============================*/\n\n\n/*Extend is a way to share the properties of one selector with another. */\n\n.display {\n  height: 50px;\n}\n\n.display-success {\n  &:extend(.display);\n\tborder-color: #22df56;\n}\n\n/* Compiles to: */\n.display,\n.display-success {\n  height: 50px;\n}\n.display-success {\n  border-color: #22df56;\n}\n\n/* Extending a CSS statement is preferable to creating a mixin\n   because of the way it groups together the classes that all share\n   the same base styling. If this was done with a mixin, the properties\n   would be duplicated for each statement that\n   called the mixin. While it won't affect your workflow, it will\n   add unnecessary bloat to the files created by the Less compiler. */\n\n\n\n/*Partials and Imports\n==============================*/\n\n\n/* Less allows you to create partial files. This can help keep your Less\n   code modularized. Partial files conventionally begin with an '_',\n   e.g. _reset.less. and are imported into a main less file that gets\n   compiled into CSS */\n\n/* Consider the following CSS which we'll put in a file called _reset.less */\n\nhtml,\nbody,\nul,\nol {\n  margin: 0;\n  padding: 0;\n}\n\n/* Less offers @import which can be used to import partials into a file.\n   This differs from the traditional CSS @import statement which makes\n   another HTTP request to fetch the imported file. Less takes the\n   imported file and combines it with the compiled code. */\n\n@import 'reset';\n\nbody {\n  font-size: 16px;\n  font-family: Helvetica, Arial, Sans-serif;\n}\n\n/* Compiles to: */\n\nhtml, body, ul, ol {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-size: 16px;\n  font-family: Helvetica, Arial, Sans-serif;\n}\n\n\n\n/* Math Operations\n==============================*/\n\n\n/* Less provides the following operators: +, -, *, /, and %. These can\n   be useful for calculating values directly in your Less files instead\n   of using values that you've already calculated by hand. Below is an example\n   of a setting up a simple two column design. */\n\n@content-area: 960px;\n@main-content: 600px;\n@sidebar-content: 300px;\n\n@main-size: @main-content / @content-area * 100%;\n@sidebar-size: @sidebar-content / @content-area * 100%;\n@gutter: 100% - (@main-size + @sidebar-size);\n\nbody {\n  width: 100%;\n}\n\n.main-content {\n  width: @main-size;\n}\n\n.sidebar {\n  width: @sidebar-size;\n}\n\n.gutter {\n  width: @gutter;\n}\n\n/* Compiles to: */\n\nbody {\n  width: 100%;\n}\n\n.main-content {\n  width: 62.5%;\n}\n\n.sidebar {\n  width: 31.25%;\n}\n\n.gutter {\n  width: 6.25%;\n}\n```\n\n## Practice Less\n\nIf you want to play with Less in your browser, check out:\n* [Codepen](http://codepen.io/)\n* [LESS2CSS](http://lesscss.org/less-preview/)\n\n## Compatibility\n\nLess can be used in any project as long as you have a program to compile it into CSS. You'll want to verify that the CSS you're using is compatible with your target browsers.\n\n[QuirksMode CSS](http://www.quirksmode.org/css/) and [CanIUse](http://caniuse.com) are great resources for checking compatibility.\n\n## Further reading\n* [Official Documentation](http://lesscss.org/features/)\n* [Less CSS - Beginner's Guide](http://www.hongkiat.com/blog/less-basic/)\n"
        },
        {
          "name": "lfe.md",
          "type": "blob",
          "size": 11.931640625,
          "content": "---\nname: \"Lisp Flavoured Erlang (LFE)\"\nfilename: lispflavourederlang.lfe\ncontributors:\n  - [\"Pratik Karki\", \"https://github.com/prertik\"]\n---\n\nLisp Flavoured Erlang (LFE) is a functional, concurrent, general-purpose programming\nlanguage and Lisp dialect (Lisp-2) built on top of Core Erlang and the Erlang Virtual Machine (BEAM).\n\nLFE can be obtained from [LFE](https://github.com/rvirding/lfe).\nThe classic starting point is the [LFE docs](http://docs.lfe.io).\n\n```lisp\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; 0. Syntax\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;;; General form.\n\n;; Lisp is comprised of two syntaxes, the ATOM and the S-expression.\n;; `forms` are known as grouped S-expressions.\n\n8  ; an atom; it evaluates to itself\n\n:ERLANG ;Atom; evaluates to the symbol :ERLANG.\n\nt  ; another atom which denotes true.\n\n(* 2 21) ; an S- expression\n\n'(8 :foo t)  ;another one\n\n\n;;; Comments\n\n;; Single line comments start with a semicolon; use two for normal\n;; comments, three for section comments, and four fo file-level\n;; comments.\n\n;; Block Comment\n\n   #| comment text |#\n\n;;; Environment\n\n;; LFE is the de-facto standard.\n\n;; Libraries can be used directly from the Erlang ecosystem. Rebar3 is the build tool.\n\n;; LFE is usually developed with a text editor(preferably Emacs) and a REPL\n;; (Read Evaluate Print Loop) running at the same time. The REPL\n;; allows for interactive exploration of the program as it is \"live\"\n;; in the system.\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; 1. Literals and Special Syntactic Rules\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;;; Integers\n\n1234 -123           ; Regular decimal notation\n#b0 #b10101         ; Binary notation\n#0 #10101           ; Binary notation (alternative form)\n#o377 #o-111        ; Octal notation\n#d123456789 #d+123  ; Explicitly decimal notation\n#xc0ffe 0x-01       ; Hexadecimal notation\n#2r1010 #8r377      ;Notation with explicit base (up to 36)\n#\\a #$ #\\ä #\\🐭     ;Character notation (the value is the Unicode code point of the character)\n#\\x1f42d;           ;Character notation with the value in hexadecimal\n\n;;; Floating point numbers\n1.0 +2.0 -1.5 1.0e10 1.111e-10\n\n;;; Strings\n\n\"any text between double quotes where \\\" and other special characters like \\n can be escaped\".\n; List String\n\"Cat: \\x1f639;\" ; writing unicode in string for regular font ending with semicolon.\n\n#\"This is a binary string \\n with some \\\"escaped\\\" and quoted (\\x1f639;) characters\"\n; Binary strings are just strings but function different in the VM.\n; Other ways of writing it are:  #B(\"a\"), #\"a\", and #B(97).\n\n\n;;; Character escaping\n\n\\b  ; => Backspace\n\\t  ; => Tab\n\\n  ; => Newline\n\\v  ; => Vertical tab\n\\f  ; => Form Feed\n\\r  ; => Carriage Return\n\\e  ; => Escape\n\\s  ; => Space\n\\d  ; => Delete\n\n;;; Binaries\n;; It is used to create binaries with any contents.\n#B((#\"a\" binary) (#\"b\" binary))                 ; #\"ab\" (Evaluated form)\n\n;;; Lists are: () or (foo bar baz)\n\n;;; Tuples are written in: #(value1 value2 ...). Empty tuple #() is also valid.\n\n;;; Maps are written as: #M(key1 value1 key2 value2 ...). Empty map #M() is also valid.\n\n;;; Symbols: Things that cannot be parsed. Eg: foo, Foo, foo-bar, :foo\n| foo | ; explicit construction of symbol by wrapping vertical bars.\n\n;;; Evaluation\n\n;; #.(... some expression ...). E.g. '#.(+ 1 1) will evaluate the (+ 1 1) while it            ;; reads the expression and then be effectively '2.\n\n;; List comprehension in LFE REPL\n\nlfe> (list-comp\n          ((<- x '(0 1 2 3)))\n          (trunc (math:pow 3 x)))\n       (1 3 9 27)\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 2. Core forms\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; These forms are the same as those found in Common Lisp and Scheme.\n\n(quote e)\n(cons head tail)\n(car e)\n(cdr e)\n(list e ... )\n(tuple e ... )\n(binary seg ... )\n(map key val ...), (map-get m k), (map-set m k v ...), (map-update m k v ...)\n\n(lambda (arg ...) ...)\n  (match-lambda\n    ((arg ... ) {{(when e ...)}} ...) ; Matches clauses\n    ... )\n(let ((pat {{(when e ...)}} e)\n      ...)\n  ... )\n(let-function ((name lambda|match-lambda) ; Only define local\n               ... )                      ; functions\n  ... )\n(letrec-function ((name lambda|match-lambda) ; Only define local\n                  ... )                      ; functions\n  ... )\n(let-macro ((name lambda-match-lambda) ; Only define local\n            ...)                       ; macros\n  ...)\n(progn ... )\n(if test true-expr {{false-expr}})\n(case e\n  (pat {{(when e ...)}} ...)\n   ... ))\n(receive\n  (pat {{(when e ...)}} ... )\n  ...\n  (after timeout ... ))\n(catch ... )\n(try\n  e\n  {{(case ((pat {{(when e ...)}} ... )\n          ... ))}}\n  {{(catch\n     ; Next must be tuple of length 3!\n     (((tuple type value ignore) {{(when e ...)}}\n      ... )\n     ... )}}\n  {{(after ... )}})\n\n(funcall func arg ... )\n(call mod func arg ... ) - Call to Erlang Mod:Func(Arg, ... )\n(define-module name declaration ... )\n(extend-module declaration ... ) - Define/extend module and declarations.\n(define-function name lambda|match-lambda)\n(define-macro name lambda|match-lambda) - Define functions/macros at top-level.\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 3. Macros\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Macros are part of the language and allow you to create abstractions\n;; on top of the core language and standard library that move you closer\n;; toward being able to directly express the things you want to express.\n\n;; Top-level function\n\n(defun name (arg ...) ...)\n\n;; Adding comments in functions\n\n(defun name\n  \"Toplevel function with pattern-matching arguments\"\n  ((argpat ...) ...)\n  ...)\n\n;; Top-level macro\n\n(defmacro name (arg ...) ...)\n(defmacro name arg ...)\n\n;; Top-level macro with pattern matching arguments\n\n(defmacro name\n  ((argpat ...) ...)\n  ...)\n\n;; Top-level macro using Scheme inspired syntax-rules format\n\n(defsyntax name\n  (pat exp)\n  ...)\n\n;;; Local macros in macro or syntax-rule format\n\n(macrolet ((name (arg ... ) ... )\n            ... )\n    ... )\n\n(syntaxlet ((name (pat exp) ...)\n             ...)\n ...)\n\n;; Like CLISP\n\n(prog1 ...)\n(prog2 ...)\n\n;; Erlang LFE module\n\n(defmodule name ...)\n\n;; Erlang LFE record\n\n(defrecord name ...)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 4. Patterns and Guards\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Using patterns in LFE compared to that of Erlang\n\n;; Erlang                     ;; LFE\n;; {ok, X}                       (tuple 'ok x)\n;; error                         'error\n;; {yes, [X|Xs]}                 (tuple 'yes (cons x xs))\n;; <<34,F/float>>                (binary 34 (f float))\n;; [P|Ps]=All                    (= (cons p ps) all)\n\n  _    ; => is don't care while pattern matching\n\n  (= pattern1 pattern2)     ; => easier, better version of pattern matching\n\n;; Guards\n\n;; Whenever pattern occurs (let, case, receive, lc, etc) it can be followed by an optional\n;; guard which has the form (when test ...).\n\n(progn gtest ...)             ;; => Sequence of guard tests\n(if gexpr gexpr gexpr)\n(type-test e)\n(guard-bif ...)               ;; => Guard BIFs, arithmetic, boolean and comparison operators\n\n;;; REPL\n\nlfe>(set (tuple len status msg) #(8 ok \"Trillian\"))\n    #(8 ok \"Trillian\")\nlfe>msg\n    \"Trillian\"\n\n;;; Program illustrating use of Guards\n\n(defun right-number?\n        ((x) (when (orelse (== x 42) (== x 276709)))\n          'true)\n        ((_) 'false))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 5. Functions\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; A simple function using if.\n\n(defun max (x y)\n  \"The max function.\"\n  (if (>= x y) x y))\n\n;; Same function using more clause\n\n(defun max\n  \"The max function.\"\n  ((x y) (when (>= x y)) x)\n  ((x y) y))\n\n;; Same function using similar style but using local functions defined by flet or fletrec\n\n(defun foo (x y)\n  \"The max function.\"\n  (flet ((m (a b) \"Local comment.\"\n            (if (>= a b) a b)))\n    (m x y)))\n\n;; LFE being Lisp-2 has separate namespaces for variables and functions\n;; Both variables and function/macros are lexically scoped.\n;; Variables are bound by lambda, match-lambda and let.\n;; Functions are bound by top-level defun, flet and fletrec.\n;; Macros are bound by top-level defmacro/defsyntax and by macrolet/syntaxlet.\n\n;; (funcall func arg ...) like CL to call lambdas/match-lambdas\n;; (funs) bound to variables are used.\n\n;; separate bindings and special for apply.\napply _F (...),\napply _F/3 ( a1, a2, a3 )\n\n;; Cons'ing in function heads\n(defun sum (l) (sum l 0))\n  (defun sum\n    (('() total) total)\n    (((cons h t) total) (sum t (+ h total))))\n\n;; ``cons`` literal instead of constructor form\n      (defun sum (l) (sum l 0))\n      (defun sum\n        (('() total) total)\n        ((`(,h . ,t) total) (sum t (+ h total))))\n\n;; Matching records in function heads\n\n(defun handle_info\n  (('ping (= (match-state remote-pid 'undefined) state))\n    (gen_server:cast (self) 'ping)\n    `#(noreply ,state))\n  (('ping state)\n   `#(noreply ,state)))\n\n;; Receiving Messages\n      (defun universal-server ()\n        (receive\n          ((tuple 'become func)\n           (funcall func))))\n\n;; another way for receiving messages\n\n (defun universal-server ()\n        (receive\n          (`#(become ,func)\n            (funcall func))))\n\n;; Composing a complete function for specific tasks\n\n(defun compose (f g)\n  (lambda (x)\n   (funcall f\n     (funcall g x))))\n\n(defun check ()\n  (let* ((sin-asin (compose #'sin/1 #'asin/1))\n         (expected (sin (asin 0.5)))\n         (compose-result (funcall sin-asin 0.5)))\n    (io:format \"Expected answer: ~p~n\" (list expected))\n    (io:format \"Answer with compose: ~p~n\" (list compose-result))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 6. Concurrency\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Message passing as done by Erlang's light-weight \"processes\".\n\n(defmodule messenger-back\n (export (print-result 0) (send-message 2)))\n\n(defun print-result ()\n  (receive\n    ((tuple pid msg)\n      (io:format \"Received message: '~s'~n\" (list msg))\n      (io:format \"Sending message to process ~p ...~n\" (list pid))\n      (! pid (tuple msg))\n      (print-result))))\n\n(defun send-message (calling-pid msg)\n  (let ((spawned-pid (spawn 'messenger-back 'print-result ())))\n    (! spawned-pid (tuple calling-pid msg))))\n\n;; Multiple simultaneous HTTP Requests:\n\n(defun parse-args (flag)\n  \"Given one or more command-line arguments, extract the passed values.\n\n  For example, if the following was passed via the command line:\n\n    $ erl -my-flag my-value-1 -my-flag my-value-2\n\n  One could then extract it in an LFE program by calling this function:\n\n    (let ((args (parse-args 'my-flag)))\n      ...\n      )\n  In this example, the value assigned to the arg variable would be a list\n  containing the values my-value-1 and my-value-2.\"\n  (let ((`#(ok ,data) (init:get_argument flag)))\n    (lists:merge data)))\n\n(defun get-pages ()\n  \"With no argument, assume 'url parameter was passed via command line.\"\n  (let ((urls (parse-args 'url)))\n    (get-pages urls)))\n\n(defun get-pages (urls)\n  \"Start inets and make (potentially many) HTTP requests.\"\n  (inets:start)\n  (plists:map\n    (lambda (x)\n      (get-page x)) urls))\n\n(defun get-page (url)\n  \"Make a single HTTP request.\"\n  (let* ((method 'get)\n         (headers '())\n         (request-data `#(,url ,headers))\n         (http-options ())\n         (request-options '(#(sync false))))\n    (httpc:request method request-data http-options request-options)\n    (receive\n      (`#(http #(,request-id #(error ,reason)))\n       (io:format \"Error: ~p~n\" `(,reason)))\n      (`#(http #(,request-id ,result))\n       (io:format \"Result: ~p~n\" `(,result))))))\n```\n\n## Further Reading\n\n* [LFE DOCS](http://docs.lfe.io)\n* [LFE GitBook](https://lfe.gitbooks.io/reference-guide/index.html)\n* [LFE Wiki](https://en.wikipedia.org/wiki/LFE_(programming_language))\n\n## Extra Info\n\n* [LFE PDF](http://www.erlang-factory.com/upload/presentations/61/Robertvirding-LispFlavouredErlang.pdf)\n* [LFE mail](https://groups.google.com/d/msg/lisp-flavoured-erlang/XA5HeLbQQDk/TUHabZCHXB0J)\n"
        },
        {
          "name": "linker.md",
          "type": "blob",
          "size": 6.5859375,
          "content": "---\ncategory: tool\nname: Linker script\ncontributors:\n    - [\"Alexander Kovalchuk\", \"https://github.com/Zamuhrishka\"]\ntranslators:\n    - [\"Anuj Shah\", \"https://github.com/ShahAnuj2610\"]\nfilename: learn.ld\n---\n\n**Position counter** - the linker has a special variable\n\"`.`\" (dot) always contains the current output position.\n\n`ADDR (section)` - returns the absolute address of the specified section. However\nthis section must be defined before using the ADDR function.\n\n`ALIGN (exp)` - returns the value of the position counter aligned to the border\nfollowing the exp expression.\n\n`SIZEOF (section)` - returns the size of the section in bytes.\n\n`FILL (param)` - defines the fill pattern for the current section. All\nother unspecified regions within the section are filled with the value indicated\nin function argument.\n\n`KEEP (param)` - used to mark param as fatal.\n\n`ENTRY (func)` - defines the function that will be the entry point\ninto the program.\n\n```bash\n# Determine the entry point to the program\nENTRY(Reset_Handler)\n\n# Define a variable that contains the address of the top of the stack\n_estack = 0x20020000;\n# Define a variable that contains a heap size value\n_Min_Heap_Size = 0x200;\n# Define a variable that contains the value of the stack size\n_Min_Stack_Size = 0x400;\n\n# Description of the memory card available for this processor\n# MEMORY\n# {\n#   MEMORY_DOMAIN_NAME (access rights) : ORIGIN = START_ADDRESS, LENGTH = SIZE\n# }\n# In our example, the controller contains three memory areas:\n# RAM - starts with the address 0x20000000 and takes 128 KB;\n# CCMRAM - starts with the address 0x10000000 and occupies 64 KB;\n# FLASH - starts with the address 0x8000000; takes 1024 Kb;\n# Moreover, RAM memory access for reading, writing and execution.\n# CCMRAM memory is read-write only.\n# FLASH memory is available for reading and execution.\nMEMORY\n{\n    RAM    (xrw) : ORIGIN = 0x20000000,  LENGTH = 128K\n    CCMRAM (rw)  : ORIGIN = 0x10000000,  LENGTH = 64K\n    FLASH  (rx)  : ORIGIN = 0x8000000,   LENGTH = 1024K\n}\n\n# We describe output sections\nSECTIONS\n{\n  # The first section contains a table of interrupt vectors\n  .isr_vector :\n  {\n    # Align the current position to the border of 4 bytes.\n    . = ALIGN(4);\n\n    # There is an option --gc-sections, which allows you to collect garbage from unused\n    # input sections. And if there are sections that the garbage collector should not touch,\n    # you need to specify them as an argument to the KEEP () function (analogue of the keyword\n    # volatile).\n    # The entry (* (. Isr_vector)) means the .isr_vector sections in all object files. Because\n    # appeal to the section in general terms looks like this: (FILE_NAME (SECTION_NAME))\n    KEEP(*(.isr_vector))\n\n    # Align the current position to the border of 4 bytes.\n    . = ALIGN(4);\n\n    # The expression \"> MEMORY AREA\" indicates which area of memory will be placed\n    # this section. In our section, the .isr_vector section will be located in FLASH memory.\n  } >FLASH\n\n# TOTAL: The .isr_vector section that contains the table of interrupt vectors is aligned\n# on the border of 4 bytes, marked as inaccessible to the garbage collector and placed at the beginning\n# FLASH microcontroller memory.\n\n  # The second section contains the program code.\n  .text :\n  {\n    # Align the current position to the border of 4 bytes.\n    . = ALIGN(4);\n\n    # We indicate that in this section the .text areas of all\n    # object files\n    *(.text)\n    *(.text*)\n\n    # Protect the .init and .fini sections from the garbage collector\n    KEEP (*(.init))\n    KEEP (*(.fini))\n\n    # Align the current position to the border of 4 bytes.\n    . = ALIGN(4);\n\n    # The variable _etext is defined, which stores the address of the end of the .text section and which\n    # may be available in the source code of the program through the announcement\n    # volaile unsigned int extern _etext;\n    _etext = .;\n  } >FLASH\n\n# TOTAL: The .text section that contains the program code is aligned on the border of 4 bytes,\n# includes: all sections with program code in all object files and protected\n# from the garbage collector of the .init and .fini sections in all object files, located in FLASH\n# microcontroller memory immediately after the table of vectors.\n# The text, .init, and .fini sections. are located in memory in the order in which they\n# declared in the script.\n\n  # The third section contains constant data.\n  .rodata :\n  {\n    # Align the current position to the border of 4 bytes.\n    . = ALIGN(4);\n\n    # We indicate that in this section areas .rodata will be stored\n    # object files\n    *(.rodata)\n    *(.rodata*)\n\n    # Align the current position to the border of 4 bytes.\n    . = ALIGN(4);\n  } >FLASH\n\n  # Save the absolute address of the .data section in the _sidata variable\n  _sidata = LOADADDR(.data);\n\n  # The fourth section contains initialized variables.\n  .data :\n  {\n    # Align the current position to the border of 4 bytes.\n    . = ALIGN(4);\n\n    # Save the address of the current position (beginning of the section) in the variable _sdata\n    _sdata = .;\n\n    # We indicate that in this section the .data areas of all\n    # object files\n    *(.data)\n    *(.data*)\n\n    # Align the current position to the border of 4 bytes.\n    . = ALIGN(4);\n\n    # Save the address of the current position (end of section) in the variable _sdata\n    _edata = .;\n\n    # AT function indicates that this sector is stored in one memory area\n    # (in our case, FLASH), and it will be executed from another area of memory (in our case, RAM).\n    # There are two types of addresses:\n    # * VMA (Virtual memory address) - this is the run-time address at which the compiler expects\n    # see data.\n    # * LMA (Load memory address) is the address at which the linker stores data.\n\n    #Startup must code to copy the .data section from the LMA addresses to the VMA addresses.\n\n  } >RAM AT> FLASH\n\n  # The fifth section contains zero-initialized variables.\n  .bss :\n  {\n    # Save the address of the current position (beginning of the section) in the variable _sbss and __bss_start__\n    _sbss = .;\n    __bss_start__ = _sbss;\n\n    # We indicate that in this section the .bss areas of all\n    # object files\n    *(.bss)\n    *(.bss*)\n\n    # Align the current position to the border of 4 bytes.\n    . = ALIGN(4);\n\n    # Save the address of the current position (beginning of the section) in the variable _ebss and __bss_end__\n    _ebss = .;\n    __bss_end__ = _ebss;\n  } >RAM\n\n  # The sixth section contains a bunch and a stack. It is located at the very end of RAM.\n  ._user_heap_stack :\n  {\n    . = ALIGN(4);\n    PROVIDE ( end = . );\n    PROVIDE ( _end = . );\n    . = . + _Min_Heap_Size;\n    . = . + _Min_Stack_Size;\n    . = ALIGN(4);\n  } >RAM\n}\n```\n"
        },
        {
          "name": "lint",
          "type": "tree",
          "content": null
        },
        {
          "name": "livescript.md",
          "type": "blob",
          "size": 10.2607421875,
          "content": "---\nname: LiveScript\nfilename: learnLivescript.ls\ncontributors:\n    - [\"Christina Whyte\", \"http://github.com/kurisuwhyte/\"]\n---\n\nLiveScript is a functional compile-to-JavaScript language which shares\nmost of the underlying semantics with its host language. Nice additions\ncome with currying, function composition, pattern matching and lots of\nother goodies heavily borrowed from languages like Haskell, F# and\nScala.\n\nLiveScript is a fork of [Coco](https://github.com/satyr/coco), which is\nitself a fork of [CoffeeScript](https://coffeescript.org/).\n\n```livescript\n# Just like its CoffeeScript cousin, LiveScript uses number symbols for\n# single-line comments.\n\n/*\n Multi-line comments are written C-style. Use them if you want comments\n to be preserved in the JavaScript output.\n */\n\n# As far as syntax goes, LiveScript uses indentation to delimit blocks,\n# rather than curly braces, and whitespace to apply functions, rather\n# than parenthesis.\n\n\n########################################################################\n## 1. Basic values\n########################################################################\n\n# Lack of value is defined by the keyword `void` instead of `undefined`\nvoid            # same as `undefined` but safer (can't be overridden)\n\n# No valid value is represented by Null.\nnull\n\n\n# The most basic actual value is the logical type:\ntrue\nfalse\n\n# And it has a plethora of aliases that mean the same thing:\non; off\nyes; no\n\n\n# Then you get numbers. These are double-precision floats like in JS.\n10\n0.4     # Note that the leading `0` is required\n\n# For readability, you may use underscores and letter suffixes in a\n# number, and these will be ignored by the compiler.\n12_344km\n\n\n# Strings are immutable sequences of characters, like in JS:\n\"Christina\"             # apostrophes are okay too!\n\"\"\"Multi-line\n   strings\n   are\n   okay\n   too.\"\"\"\n\n# Sometimes you want to encode a keyword, the backslash notation makes\n# this easy:\n\\keyword                # => 'keyword'\n\n\n# Arrays are ordered collections of values.\nfruits =\n  * \\apple\n  * \\orange\n  * \\pear\n\n# They can be expressed more concisely with square brackets:\nfruits = [ \\apple, \\orange, \\pear ]\n\n# You also get a convenient way to create a list of strings, using\n# white space to delimit the items.\nfruits = <[ apple orange pear ]>\n\n# You can retrieve an item by their 0-based index:\nfruits[0]       # => \"apple\"\n\n# Objects are a collection of unordered key/value pairs, and a few other\n# things (more on that later).\nperson =\n  name: \"Christina\"\n  likes:\n    * \"kittens\"\n    * \"and other cute stuff\"\n\n# Again, you can express them concisely with curly brackets:\nperson = {name: \"Christina\", likes: [\"kittens\", \"and other cute stuff\"]}\n\n# You can retrieve an item by their key:\nperson.name     # => \"Christina\"\nperson[\"name\"]  # => \"Christina\"\n\n\n# Regular expressions use the same syntax as JavaScript:\ntrailing-space = /\\s$/          # dashed-words become dashedWords\n\n# Except you can do multi-line expressions too!\n# (comments and whitespace just gets ignored)\nfunRE = //\n        function\\s+(.+)         # name\n        \\s* \\((.*)\\) \\s*        # arguments\n        { (.*) }                # body\n        //\n\n\n########################################################################\n## 2. Basic operations\n########################################################################\n\n# Arithmetic operators are the same as JavaScript's:\n1 + 2   # => 3\n2 - 1   # => 1\n2 * 3   # => 6\n4 / 2   # => 2\n3 % 2   # => 1\n\n\n# Comparisons are mostly the same too, except that `==` is the same as\n# JS's `===`, where JS's `==` in LiveScript is `~=`, and `===` enables\n# object and array comparisons, and also stricter comparisons:\n2 == 2          # => true\n2 == \"2\"        # => false\n2 ~= \"2\"        # => true\n2 === \"2\"       # => false\n\n[1,2,3] == [1,2,3]        # => false\n[1,2,3] === [1,2,3]       # => true\n\n+0 == -0     # => true\n+0 === -0    # => false\n\n# Other relational operators include <, <=, > and >=\n\n# Logical values can be combined through the logical operators `or`,\n# `and` and `not`\ntrue and false  # => false\nfalse or true   # => true\nnot false       # => true\n\n\n# Collections also get some nice additional operators\n[1, 2] ++ [3, 4]                # => [1, 2, 3, 4]\n'a' in <[ a b c ]>              # => true\n'name' of { name: 'Chris' }     # => true\n\n\n########################################################################\n## 3. Functions\n########################################################################\n\n# Since LiveScript is functional, you'd expect functions to get a nice\n# treatment. In LiveScript it's even more apparent that functions are\n# first class:\nadd = (left, right) -> left + right\nadd 1, 2        # => 3\n\n# Functions which take no arguments are called with a bang!\ntwo = -> 2\ntwo!\n\n# LiveScript uses function scope, just like JavaScript, and has proper\n# closures too. Unlike JavaScript, the `=` works as a declaration\n# operator, and will always declare the variable on the left hand side.\n\n# The `:=` operator is available to *reuse* a name from the parent\n# scope.\n\n\n# You can destructure arguments of a function to quickly get to\n# interesting values inside a complex data structure:\ntail = ([head, ...rest]) -> rest\ntail [1, 2, 3]  # => [2, 3]\n\n# You can also transform the arguments using binary or unary\n# operators. Default arguments are also possible.\nfoo = (a = 1, b = 2) -> a + b\nfoo!    # => 3\n\n# You could use it to clone a particular argument to avoid side-effects,\n# for example:\ncopy = (^^target, source) ->\n  for k,v of source => target[k] = v\n  target\na = { a: 1 }\ncopy a, { b: 2 }        # => { a: 1, b: 2 }\na                       # => { a: 1 }\n\n\n# A function may be curried by using a long arrow rather than a short\n# one:\nadd = (left, right) --> left + right\nadd1 = add 1\nadd1 2          # => 3\n\n# Functions get an implicit `it` argument, even if you don't declare\n# any.\nidentity = -> it\nidentity 1      # => 1\n\n# Operators are not functions in LiveScript, but you can easily turn\n# them into one! Enter the operator sectioning:\ndivide-by-two = (/ 2)\n[2, 4, 8, 16].map(divide-by-two) .reduce (+)\n\n\n# Not only of function application lives LiveScript, as in any good\n# functional language you get facilities for composing them:\ndouble-minus-one = (- 1) . (* 2)\n\n# Other than the usual `f . g` mathematical formulae, you get the `>>`\n# and `<<` operators, that describe how the flow of values through the\n# functions.\ndouble-minus-one = (* 2) >> (- 1)\ndouble-minus-one = (- 1) << (* 2)\n\n\n# And talking about flow of value, LiveScript gets the `|>` and `<|`\n# operators that apply a value to a function:\nmap = (f, xs) --> xs.map f\n[1 2 3] |> map (* 2)            # => [2 4 6]\n\n# You can also choose where you want the value to be placed, just mark\n# the place with an underscore (_):\nreduce = (f, xs, initial) --> xs.reduce f, initial\n[1 2 3] |> reduce (+), _, 0     # => 6\n\n\n# The underscore is also used in regular partial application, which you\n# can use for any function:\ndiv = (left, right) -> left / right\ndiv-by-two = div _, 2\ndiv-by-two 4      # => 2\n\n\n# Last, but not least, LiveScript has back-calls, which might help\n# with some callback-based code (though you should try more functional\n# approaches, like Promises):\nreadFile = (name, f) -> f name\na <- readFile 'foo'\nb <- readFile 'bar'\nconsole.log a + b\n\n# Same as:\nreadFile 'foo', (a) -> readFile 'bar', (b) -> console.log a + b\n\n\n########################################################################\n## 4. Patterns, guards and control-flow\n########################################################################\n\n# You can branch computations with the `if...else` expression:\nx = if n > 0 then \\positive else \\negative\n\n# Instead of `then`, you can use `=>`\nx = if n > 0 => \\positive\n    else        \\negative\n\n# Complex conditions are better-off expressed with the `switch`\n# expression, though:\ny = {}\nx = switch\n  | (typeof y) is \\number => \\number\n  | (typeof y) is \\string => \\string\n  | 'length' of y         => \\array\n  | otherwise             => \\object      # `otherwise` and `_` always matches.\n\n# Function bodies, declarations and assignments get a free `switch`, so\n# you don't need to type it again:\ntake = (n, [x, ...xs]) -->\n                        | n == 0 => []\n                        | _      => [x] ++ take (n - 1), xs\n\n\n########################################################################\n## 5. Comprehensions\n########################################################################\n\n# While the functional helpers for dealing with lists and objects are\n# right there in the JavaScript's standard library (and complemented on\n# the prelude-ls, which is a \"standard library\" for LiveScript),\n# comprehensions will usually allow you to do this stuff faster and with\n# a nice syntax:\noneToTwenty = [1 to 20]\nevens       = [x for x in oneToTwenty when x % 2 == 0]\n\n# `when` and `unless` can be used as filters in the comprehension.\n\n# Object comprehension works in the same way, except that it gives you\n# back an object rather than an Array:\ncopy = { [k, v] for k, v of source }\n\n\n########################################################################\n## 4. OOP\n########################################################################\n\n# While LiveScript is a functional language in most aspects, it also has\n# some niceties for imperative and object oriented programming. One of\n# them is class syntax and some class sugar inherited from CoffeeScript:\nclass Animal\n  (@name, kind) ->\n    @kind = kind\n  action: (what) -> \"*#{@name} (a #{@kind}) #{what}*\"\n\nclass Cat extends Animal\n  (@name) -> super @name, 'cat'\n  purr: -> @action 'purrs'\n\nkitten = new Cat 'Mei'\nkitten.purr!      # => \"*Mei (a cat) purrs*\"\n\n# Besides the classical single-inheritance pattern, you can also provide\n# as many mixins as you would like for a class. Mixins are just plain\n# objects:\nHuggable =\n  hug: -> @action 'is hugged'\n\nclass SnugglyCat extends Cat implements Huggable\n\nkitten = new SnugglyCat 'Purr'\nkitten.hug!     # => \"*Mei (a cat) is hugged*\"\n```\n\n## Further reading\n\nThere's just so much more to LiveScript, but this should be enough to\nget you started writing little functional things in it. The\n[official website](http://livescript.net/) has a lot of information on the\nlanguage, and a nice online compiler for you to try stuff out!\n\nYou may also want to grab yourself some\n[prelude.ls](http://gkz.github.io/prelude-ls/), and check out the `#livescript`\nchannel on the Freenode network.\n"
        },
        {
          "name": "logtalk.md",
          "type": "blob",
          "size": 15.9345703125,
          "content": "---\nname: Logtalk\nfilename: learnlogtalk.lgt\ncontributors:\n    - [\"Paulo Moura\", \"http://github.com/pmoura\"]\n---\n\nLogtalk is an object-oriented logic programming language that extends and leverages Prolog with modern code encapsulation and code reuse mechanisms without compromising its declarative programming features. Logtalk is implemented in highly portable code and can use most modern and standards compliant Prolog implementations as a back-end compiler.\n\nTo keep its size reasonable, this tutorial necessarily assumes that the reader have a working knowledge of Prolog and is biased towards describing Logtalk object-oriented features.\n\n# Syntax\n\nLogtalk uses standard Prolog syntax with the addition of a few operators and directives for a smooth learning curve and wide portability. One important consequence is that Prolog code can be easily encapsulated in objects with little or no changes. Moreover, Logtalk can transparently interpret most Prolog modules as Logtalk objects.\n\nThe main operators are:\n\n* `::/2` - sending a message to an object\n* `::/1` - sending a message to _self_ (i.e. to the object that received the message being processed)\n* `^^/1` - _super_ call (of an inherited or imported predicate)\n\nSome of the most important entity and predicate directives will be introduced in the next sections.\n\n# Entities and roles\n\nLogtalk provides _objects_, _protocols_, and _categories_ as first-class entities. Relations between entities define _patterns of code reuse_ and the _roles_ played by the entities. For example, when an object _instantiates_ another object, the first object plays the role of an instance and the second object plays the role of a class. An _extends_ relation between two objects implies that both objects play the role of prototypes, with one of them extending the other, its parent prototype.\n\n# Defining an object\n\nAn object encapsulates predicate declarations and definitions. Objects can be created dynamically but are usually static and defined in source files. A single source file can contain any number of entity definitions. A simple object, defining a list member public predicate:\n\n```logtalk\n:- object(list).\n\n\t:- public(member/2).\n\tmember(Head, [Head| _]).\n\tmember(Head, [_| Tail]) :-\n\t\tmember(Head, Tail).\n\n:- end_object.\n```\n\n# Compiling and loading source files\n\nAssuming that the code above for the `list` object is saved in a `list.lgt` file, it can be compiled and loaded using the `logtalk_load/1` built-in predicate or its abbreviation, `{}/1`, with the file path as argument (the extension can be omitted):\n\n```logtalk\n?- {list}.\nyes\n```\n\nIn general, entities may have dependencies on entities defined in other source files (e.g. library entities). To load a file and all its dependencies, the advised solution is to define a \n_loader_ file that loads all the necessary files for an application. A loader file is simply a source file, typically named `loader.lgt`, that makes calls to the `logtalk_load/1-2`\nbuilt-in predicates, usually from an `initialization/1` directive for portability and\nstandards compliance. Loader files are provided for all libraries, tools, and examples.\n\n# Sending a message to an object\n\nThe `::/2` infix operator is used to send a message to an object. As in Prolog, we can backtrack for alternative solutions:\n\n```logtalk\n?- list::member(X, [1,2,3]).\nX = 1 ;\nX = 2 ;\nX = 3\nyes\n```\n\nEncapsulation is enforced. A predicate can be declared _public_, _protected_, or _private_. It can also be _local_ when there is no scope directive for it. For example:\n\n```logtalk\n:- object(scopes).\n\n\t:- private(bar/0).\n\tbar.\n\n\tlocal.\n\n:- end_object.\n```\n\nAssuming the object is saved in a `scopes.lgt` file:\n\n```logtalk\n?- {scopes}.\nyes\n\n?- catch(scopes::bar, Error, true).\nError = error(\n\tpermission_error(access, private_predicate, bar/0),\n\tlogtalk(scopes::bar, user)\n)\nyes\n\n?- catch(scopes::local, Error, true).\nError = error(\n\texistence_error(predicate_declaration, local/0),\n\tlogtalk(scopes::local, user)\n)\nyes\n```\n\nWhen the predicate in a message is unknown for the object (the role it plays determines the lookup procedures), we also get an error. For example:\n\n```logtalk\n?- catch(scopes::unknown, Error, true).\nError = error(\n\texistence_error(predicate_declaration, unknown/0),\n\tlogtalk(scopes::unknown, user)\n)\nyes\n```\n\nA subtle point is that predicate scope directives specify predicate _calling_ semantics, not _definition_ semantics. For example, if an object playing the role of a class declares a predicate private, the predicate can be defined in subclasses and instances *but* can only be called in its instances _from_ the class.\n\n# Defining and implementing a protocol\n\nProtocols contain predicate declarations that can be implemented by any number of objects and categories:\n\n```logtalk\n:- protocol(listp).\n\n\t:- public(member/2).\n\n:- end_protocol.\n\n:- object(list,\n\timplements(listp)).\n\n\tmember(Head, [Head| _]).\n\tmember(Head, [_| Tail]) :-\n\t\tmember(Head, Tail).\n\n:- end_object.\n```\n\nThe scope of the protocol predicates can be restricted using protected or private implementation. For example:\n\n```logtalk\n:- object(stack,\n\timplements(private::listp)).\n\n:- end_object.\n```\n\nIn fact, all entity relations (in an entity opening directive) can be qualified as public (the default), protected, or private.\n\n# Prototypes\n\nAn object without an _instantiation_ or _specialization_ relation with another object plays the role of a prototype. A prototype can _extend_ another object, its parent prototype.\n\n```logtalk\n% clyde, our prototypical elephant\n:- object(clyde).\n\n\t:- public(color/1).\n\tcolor(grey).\n\n\t:- public(number_of_legs/1).\n\tnumber_of_legs(4).\n\n:- end_object.\n\n% fred, another elephant, is like clyde, except that he's white\n:- object(fred,\n\textends(clyde)).\n\n\tcolor(white).\n\n:- end_object.\n```\n\nWhen answering a message sent to an object playing the role of a prototype, we validate the message and look for an answer first in the prototype itself and, if not found, we delegate to the prototype parents if any:\n\n```logtalk\n?- fred::number_of_legs(N).\nN = 4\nyes\n\n?- fred::color(C).\nC = white\nyes\n```\n\nA message is valid if the corresponding predicate is declared (and the sender is within scope) but it will fail, rather then throwing an error, if the predicate is not defined. This is called the _closed-world assumption_. For example, consider the following object, saved in a `foo.lgt` file:\n\n```logtalk\n:- object(foo).\n\n\t:- public(bar/0).\n\n:- end_object.\n```\n\nLoading the file and trying to call the `bar/0` predicate fails as expected. Note that this is different from calling an _unknown_ predicate, which results in an error:\n\n```logtalk\n?- {foo}.\nyes\n\n?- foo::bar.\nno\n\n?- catch(foo::baz, Error, true).\nError = error(\n\texistence_error(predicate_declaration, baz/0),\n\tlogtalk(foo::baz, user)\n)\nyes\n```\n\n# Classes and instances\n\nIn order to define objects playing the role of classes and/or instances, an object must have at least an instantiation or a specialization relation with another object. Objects playing the role of meta-classes can be used when we need to see a class also as an instance. We use the following example to also illustrate how to dynamically create new objects at runtime:\n\n```logtalk\n% a simple, generic, metaclass defining a new/2 predicate for its instances\n:- object(metaclass,\n\tinstantiates(metaclass)).\n\n\t:- public(new/2).\n\tnew(Instance, Clauses) :-\n\t\tself(Class),\n\t\tcreate_object(Instance, [instantiates(Class)], [], Clauses).\n\n:- end_object.\n\n% a simple class defining age/1 and name/1 predicate for its instances\n:- object(person,\n\tinstantiates(metaclass)).\n\n\t:- public([\n\t\tage/1, name/1\n\t]).\n\n\t% a default value for age/1\n\tage(42).\n\n:- end_object.\n\n% a static instance of the class person\n:- object(john,\n\tinstantiates(person)).\n\n\tname(john).\n\tage(12).\n\n:- end_object.\n```\n\nWhen answering a message sent to an object playing the role of an instance, we validate the message by starting in its class and going up to its class superclasses if necessary. Assuming that the message is valid, then we look for an answer starting in the instance itself:\n\n```logtalk\n?- person::new(Instance, [name(paulo)]).\nInstance = o1\nyes\n\n?- o1::name(Name).\nName = paulo\nyes\n\n?- o1::age(Age).\nAge = 42\nyes\n\n?- john::age(Age).\nAge = 12\nyes\n```\n\n# Categories\n\nA category is a fine grained unit of code reuse, used to encapsulate a _cohesive_ set of predicate declarations and definitions, implementing a _single_ functionality, that can be imported into any object. A category can thus be seen as the dual concept of a protocol. In the following example, we define categories representing car engines and then import them into car objects:\n\n```logtalk\n% a protocol describing engine characteristics\n:- protocol(carenginep).\n\n\t:- public([\n\t\treference/1,\n\t\tcapacity/1,\n\t\tcylinders/1,\n\t\thorsepower_rpm/2,\n\t\tbore_stroke/2,\n\t\tfuel/1\n\t]).\n\n:- end_protocol.\n\n% a typical engine defined as a category\n:- category(classic,\n\timplements(carenginep)).\n\n\treference('M180.940').\n\tcapacity(2195).\n\tcylinders(6).\n\thorsepower_rpm(94, 4800).\n\tbore_stroke(80, 72.8).\n\tfuel(gasoline).\n\n:- end_category.\n\n% a souped up version of the previous engine\n:- category(sport,\n\textends(classic)).\n\n\treference('M180.941').\n\thorsepower_rpm(HP, RPM) :-\n\t\t^^horsepower_rpm(ClassicHP, ClassicRPM),\t% \"super\" call\n\t\tHP is truncate(ClassicHP*1.23),\n\t\tRPM is truncate(ClassicRPM*0.762).\n\n:- end_category.\n\n% with engines (and other components), we may start \"assembling\" some cars\n:- object(sedan,\n\timports(classic)).\n\n:- end_object.\n\n:- object(coupe,\n\timports(sport)).\n\n:- end_object.\n```\n\nCategories are independently compiled and thus allow importing objects to be updated by simple updating the imported categories without requiring object recompilation. Categories also provide _runtime transparency_. I.e. the category protocol adds to the protocol of the objects importing the category:\n\n```logtalk\n?- sedan::current_predicate(Predicate).\nPredicate = reference/1 ;\nPredicate = capacity/1 ;\nPredicate = cylinders/1 ;\nPredicate = horsepower_rpm/2 ;\nPredicate = bore_stroke/2 ;\nPredicate = fuel/1\nyes\n```\n\n# Hot patching\n\nCategories can be also be used for hot-patching objects. A category can add new predicates to an object and/or replace object predicate definitions. For example, consider the following object:\n\n```logtalk\n:- object(buggy).\n\n\t:- public(p/0).\n\tp :- write(foo).\n\n:- end_object.\n```\n\nAssume that the object prints the wrong string when sent the message `p/0`:\n\n```logtalk\n?- {buggy}.\nyes\n\n?- buggy::p.\nfoo\nyes\n```\n\nIf the object source code is not available and we need to fix an application running the object code, we can simply define a category that fixes the buggy predicate:\n\n```logtalk\n:- category(patch,\n\tcomplements(buggy)).\n\n\t% fixed p/0 def\n\tp :- write(bar).\n\n:- end_category.\n```\n\nAfter compiling and loading the category into the running application we will now get:\n\n```logtalk\n?- set_logtalk_flag(complements, allow).\nyes\n\n?- {patch}.\nyes\n\n?- buggy::p.\nbar\nyes\n```\n\nAs hot-patching forcefully breaks encapsulation, the `complements` compiler flag can be set (globally or on a per-object basis) to allow, restrict, or prevent it.\n\n# Parametric objects and categories\n\nObjects and categories can be parameterized by using as identifier a compound term instead of an atom. Object and category parameters are _logical variables_ shared with all encapsulated predicates. An example with geometric circles:\n\n```logtalk\n:- object(circle(_Radius, _Color)).\n\n\t:- public([\n\t\tarea/1, perimeter/1\n\t]).\n\n\tarea(Area) :-\n\t\tparameter(1, Radius),\n\t\tArea is pi*Radius*Radius.\n\n\tperimeter(Perimeter) :-\n\t\tparameter(1, Radius),\n\t\tPerimeter is 2*pi*Radius.\n\n:- end_object.\n```\n\nParametric objects are used just as any other object, usually providing values for the parameters when sending a message:\n\n```logtalk\n?- circle(1.23, blue)::area(Area).\nArea = 4.75291\nyes\n```\n\nParametric objects also provide a simple way of associating a set of predicates with a plain Prolog predicate. Prolog facts can be interpreted as _parametric object proxies_ when they have the same functor and arity as the identifiers of parametric objects. Handy syntax is provided to for working with proxies. For example, assuming the following clauses for a `circle/2` predicate:\n\n```logtalk\ncircle(1.23, blue).\ncircle(3.71, yellow).\ncircle(0.39, green).\ncircle(5.74, black).\ncircle(8.32, cyan).\n```\n\nWith these clauses loaded, we can easily compute for example a list with the areas of all the circles:\n\n```logtalk\n?- findall(Area, {circle(_, _)}::area(Area), Areas).\nAreas = [4.75291, 43.2412, 0.477836, 103.508, 217.468]\nyes\n```\n\nThe `{Goal}::Message` construct proves `Goal`, possibly instantiating any variables in it, and sends `Message` to the resulting term.\n\n# Events and monitors\n\nLogtalk supports _event-driven programming_ by allowing defining events and monitors for those events. An event is simply the sending of a message to an object. Interpreting message sending as an atomic activity, a _before_ event and an _after_ event are recognized. Event monitors define event handler predicates, `before/3` and `after/3`, and can query, register, and delete a system-wide event registry that associates events with monitors. For example, a simple tracer for any message being sent using the `::/2` control construct can be defined as:\n\n```logtalk\n:- object(tracer,\n\timplements(monitoring)).    % built-in protocol for event handlers\n\n\t:- initialization(define_events(_, _, _, _, tracer)).\n\n\tbefore(Object, Message, Sender) :-\n\t\twrite('call: '), writeq(Object), write(' <-- '), writeq(Message),\n\t\twrite(' from '), writeq(Sender), nl.\n\n\tafter(Object, Message, Sender) :-\n\t\twrite('exit: '), writeq(Object), write(' <-- '), writeq(Message),\n\t\twrite(' from '), writeq(Sender), nl.\n\n:- end_object.\n```\n\nAssuming that the `tracer` object and the `list` object defined earlier are compiled and loaded, we can observe the event handlers in action by sending a message:\n\n```logtalk\n?- set_logtalk_flag(events, allow).\nyes\n\n?- list::member(X, [1,2,3]).\n\ncall: list <-- member(X, [1,2,3]) from user\nexit: list <-- member(1, [1,2,3]) from user\nX = 1 ;\nexit: list <-- member(2, [1,2,3]) from user\nX = 2 ;\nexit: list <-- member(3, [1,2,3]) from user\nX = 3\nyes\n```\n\nEvents can be set and deleted dynamically at runtime by calling the `define_events/5` and `abolish_events/5` built-in predicates.\n\nEvent-driven programming can be seen as a form of _computational reflection_. But note that events are only generated when using the `::/2` message-sending control construct.\n\n# Lambda expressions\n\nLogtalk supports lambda expressions. Lambda parameters are represented using a list with the `(>>)/2` infix operator connecting them to the lambda. Some simple examples using library `meta`:\n\n```logtalk\n?- {meta(loader)}.\nyes\n\n?- meta::map([X,Y]>>(Y is 2*X), [1,2,3], Ys).\nYs = [2,4,6]\nyes\n```\n\nCurrying is also supported:\n\n```logtalk\n?- meta::map([X]>>([Y]>>(Y is 2*X)), [1,2,3], Ys).\nYs = [2,4,6]\nyes\n```\n\nLambda free variables can be expressed using the extended syntax `{Free1, ...}/[Parameter1, ...]>>Lambda`.\n\n# Macros\n\nTerms and goals in source files can be _expanded_ at compile time by specifying a _hook object_ that defines term-expansion and goal-expansion rules. For example, consider the following simple object, saved in a `source.lgt` file:\n\n```logtalk\n:- object(source).\n\n\t:- public(bar/1).\n\tbar(X) :- foo(X).\n\n\tfoo(a). foo(b). foo(c).\n\n:- end_object.\n```\n\nAssume the following hook object, saved in a `my_macros.lgt` file, that expands clauses and calls to the `foo/1` local predicate:\n\n```logtalk\n:- object(my_macros,\n\timplements(expanding)).    % built-in protocol for expanding predicates\n\n\tterm_expansion(foo(Char), baz(Code)) :-\n\t\tchar_code(Char, Code). % standard built-in predicate\n\n\tgoal_expansion(foo(X), baz(X)).\n\n:- end_object.\n```\n\nAfter loading the macros file, we can then expand our source file with it using the `hook` compiler flag:\n\n```logtalk\n?- logtalk_load(my_macros), logtalk_load(source, [hook(my_macros)]).\nyes\n\n?- source::bar(X).\nX = 97 ;\nX = 98 ;\nX = 99\ntrue\n```\n\nThe Logtalk library provides support for combining hook objects using different workflows (for example, defining a pipeline of expansions).\n\n# Further information\n\nVisit the [Logtalk website](http://logtalk.org) for more information.\n"
        },
        {
          "name": "lolcode.md",
          "type": "blob",
          "size": 5.1220703125,
          "content": "---\nname: LOLCODE\nfilename: learnLOLCODE.lol\ncontributors:\n    - [\"abactel\", \"https://github.com/abactel\"]\n---\n\nLOLCODE is an esoteric programming language designed to resemble the speech of [lolcats](https://upload.wikimedia.org/wikipedia/commons/a/ab/Lolcat_in_folder.jpg?1493656347257).\n\n```\nBTW This is an inline comment\nBTW All code must begin with `HAI <language version>` and end with `KTHXBYE`\n\nHAI 1.3\nCAN HAS STDIO? BTW Importing standard headers\n\nOBTW\n     ==========================================================================\n     ================================= BASICS =================================\n     ==========================================================================\nTLDR\n\nBTW Displaying text:\nVISIBLE \"HELLO WORLD\"\n\nBTW Declaring variables:\nI HAS A MESSAGE ITZ \"CATZ ARE GOOD\"\nVISIBLE MESSAGE\n\nOBTW\n    (This is a codeblock.) Variables are dynamically typed so you don't need to\n    declare their type. A variable's type matches its content. These are the\n    types:\nTLDR\n\nI HAS A STRING  ITZ \"DOGZ ARE GOOOD\" BTW type is YARN\nI HAS A INTEGER ITZ 42               BTW type is NUMBR\nI HAS A FLOAT   ITZ 3.1415           BTW type is NUMBAR\nI HAS A BOOLEAN ITZ WIN              BTW type is TROOF\nI HAS A UNTYPED                      BTW type is NOOB\n\nBTW Accepting user input:\nI HAS A AGE\nGIMMEH AGE\nBTW The variable is stored as a YARN. To convert it into NUMBR:\nAGE IS NOW A NUMBR\n\nOBTW\n     ==========================================================================\n     ================================== MATH ==================================\n     ==========================================================================\nTLDR\n\nBTW LOLCODE uses polish notation style math.\n\nBTW Basic mathematical notation:\n\nSUM OF 21 AN 33         BTW 21 + 33\nDIFF OF 90 AN 10        BTW 90 - 10\nPRODUKT OF 12 AN 13     BTW 12 * 13\nQUOSHUNT OF 32 AN 43    BTW 32 / 43\nMOD OF 43 AN 64         BTW 43 modulo 64\nBIGGR OF 23 AN 53       BTW max(23, 53)\nSMALLR OF 53 AN 45      BTW min(53, 45)\n\nBTW Binary notation:\n\nBOTH OF WIN AN WIN           BTW and: WIN if x=WIN, y=WIN\nEITHER OF FAIL AN WIN        BTW or: FAIL if x=FAIL, y=FAIL\nWON OF WIN AN FAIL           BTW xor: FAIL if x=y\nNOT FAIL                     BTW unary negation: WIN if x=FAIL\nALL OF WIN AN WIN MKAY   BTW infinite arity AND\nANY OF WIN AN FAIL MKAY  BTW infinite arity OR\n\nBTW Comparison:\n\nBOTH SAEM \"CAT\" AN \"DOG\"             BTW WIN if x == y\nDIFFRINT 732 AN 184                  BTW WIN if x != y\nBOTH SAEM 12 AN BIGGR OF 12 AN 4     BTW x >= y\nBOTH SAEM 43 AN SMALLR OF 43 AN 56   BTW x <= y\nDIFFRINT 64 AN SMALLR OF 64 AN 2     BTW x > y\nDIFFRINT 75 AN BIGGR OF 75 AN 643    BTW x < y\n\nOBTW\n     ==========================================================================\n     ============================== FLOW CONTROL ==============================\n     ==========================================================================\nTLDR\n\nBTW If/then statement:\nI HAS A ANIMAL\nGIMMEH ANIMAL\nBOTH SAEM ANIMAL AN \"CAT\", O RLY?\n    YA RLY\n        VISIBLE \"YOU HAV A CAT\"\n    MEBBE BOTH SAEM ANIMAL AN \"MAUS\"\n        VISIBLE \"NOM NOM NOM. I EATED IT.\"\n    NO WAI\n        VISIBLE \"AHHH IS A WOOF WOOF\"\nOIC\n\nBTW Case statement:\nI HAS A COLOR\nGIMMEH COLOR\nCOLOR, WTF?\n    OMG \"R\"\n        VISIBLE \"RED FISH\"\n        GTFO\n    OMG \"Y\"\n        VISIBLE \"YELLOW FISH\"\n        BTW Since there is no `GTFO` the next statements will also be tested\n    OMG \"G\"\n    OMG \"B\"\n        VISIBLE \"FISH HAS A FLAVOR\"\n        GTFO\n    OMGWTF\n        VISIBLE \"FISH IS TRANSPARENT OHNO WAT\"\nOIC\n\nBTW For loop:\nI HAS A TEMPERATURE\nGIMMEH TEMPERATURE\nTEMPERATURE IS NOW A NUMBR\nIM IN YR LOOP UPPIN YR ITERATOR TIL BOTH SAEM ITERATOR AN TEMPERATURE\n    VISIBLE ITERATOR\nIM OUTTA YR LOOP\n\nBTW While loop:\nIM IN YR LOOP NERFIN YR ITERATOR WILE DIFFRINT ITERATOR AN -10\n    VISIBLE ITERATOR\nIM OUTTA YR LOOP\n\nOBTW\n     =========================================================================\n     ================================ Strings ================================\n     =========================================================================\nTLDR\n\nBTW Linebreaks:\nVISIBLE \"FIRST LINE :) SECOND LINE\"\n\nBTW Tabs:\nVISIBLE \":>SPACES ARE SUPERIOR\"\n\nBTW Bell (goes beep):\nVISIBLE \"NXT CUSTOMER PLS :o\"\n\nBTW Literal double quote:\nVISIBLE \"HE SAID :\"I LIKE CAKE:\"\"\n\nBTW Literal colon:\nVISIBLE \"WHERE I LIVE:: CYBERSPACE\"\n\nOBTW\n     =========================================================================\n     =============================== FUNCTIONS ===============================\n     =========================================================================\nTLDR\n\nBTW Declaring a new function:\nHOW IZ I SELECTMOVE YR MOVE BTW `MOVE` is an argument\n    BOTH SAEM MOVE AN \"ROCK\", O RLY?\n        YA RLY\n            VISIBLE \"YOU HAV A ROCK\"\n        NO WAI\n            VISIBLE \"OH NO IS A SNIP-SNIP\"\n    OIC\n    GTFO BTW This returns NOOB\nIF U SAY SO\n\nBTW Declaring a function and returning a value:\nHOW IZ I IZYELLOW\n    FOUND YR \"YELLOW\"\nIF U SAY SO\n\nBTW Calling a function:\nI IZ IZYELLOW MKAY\n\nKTHXBYE\n```\n\n## Further reading:\n\n- [LCI compiler](https://github.com/justinmeza/lci)\n- [Official spec](https://github.com/justinmeza/lolcode-spec/blob/master/v1.2/lolcode-spec-v1.2.md)\n"
        },
        {
          "name": "lt",
          "type": "tree",
          "content": null
        },
        {
          "name": "lua.md",
          "type": "blob",
          "size": 12.3408203125,
          "content": "---\nname: Lua\ncontributors:\n    - [\"Tyler Neylon\", \"http://tylerneylon.com/\"]\nfilename: learnlua.lua\n---\n\n```lua\n-- Two dashes start a one-line comment.\n\n--[[\n     Adding two ['s and ]'s makes it a\n     multi-line comment.\n--]]\n\n----------------------------------------------------\n-- 1. Variables and flow control.\n----------------------------------------------------\n\nnum = 42  -- Numbers can be integer or floating point.\n\ns = 'walternate'  -- Immutable strings like Python.\nt = \"double-quotes are also fine\"\nu = [[ Double brackets\n       start and end\n       multi-line strings.]]\nt = nil  -- Undefines t; Lua has garbage collection.\n\n-- Blocks are denoted with keywords like do/end:\nwhile num < 50 do\n  num = num + 1  -- No ++ or += type operators.\nend\n\n-- If clauses:\nif num > 40 then\n  print('over 40')\nelseif s ~= 'walternate' then  -- ~= is not equals.\n  -- Equality check is == like Python; ok for strs.\n  io.write('not over 40\\n')  -- Defaults to stdout.\nelse\n  -- Variables are global by default.\n  thisIsGlobal = 5  -- Camel case is common.\n\n  -- How to make a variable local:\n  local line = io.read()  -- Reads next stdin line.\n\n  -- String concatenation uses the .. operator:\n  print('Winter is coming, ' .. line)\nend\n\n-- Undefined variables return nil.\n-- This is not an error:\nfoo = anUnknownVariable  -- Now foo = nil.\n\naBoolValue = false\n\n-- Only nil and false are falsy; 0 and '' are true!\nif not aBoolValue then print('it was false') end\n\n-- 'or' and 'and' are short-circuited.\n-- This is similar to the a?b:c operator in C/js:\nans = aBoolValue and 'yes' or 'no'  --> 'no'\n\nkarlSum = 0\nfor i = 1, 100 do  -- The range includes both ends.\n  karlSum = karlSum + i\nend\n\n-- Use \"100, 1, -1\" as the range to count down:\nfredSum = 0\nfor j = 100, 1, -1 do fredSum = fredSum + j end\n\n-- In general, the range is begin, end[, step].\n\n-- Another loop construct:\nrepeat\n  print('the way of the future')\n  num = num - 1\nuntil num == 0\n\n\n----------------------------------------------------\n-- 2. Functions.\n----------------------------------------------------\n\nfunction fib(n)\n  if n < 2 then return 1 end\n  return fib(n - 2) + fib(n - 1)\nend\n\n-- Closures and anonymous functions are ok:\nfunction adder(x)\n  -- The returned function is created when adder is\n  -- called, and remembers the value of x:\n  return function (y) return x + y end\nend\na1 = adder(9)\na2 = adder(36)\nprint(a1(16))  --> 25\nprint(a2(64))  --> 100\n\n-- Returns, func calls, and assignments all work\n-- with lists that may be mismatched in length.\n-- Unmatched receivers are nil;\n-- unmatched senders are discarded.\n\nx, y, z = 1, 2, 3, 4\n-- Now x = 1, y = 2, z = 3, and 4 is thrown away.\n\nfunction bar(a, b, c)\n  print(a, b, c)\n  return 4, 8, 15, 16, 23, 42\nend\n\nx, y = bar('zaphod')  --> prints \"zaphod  nil nil\"\n-- Now x = 4, y = 8, values 15...42 are discarded.\n\n-- Functions are first-class, may be local/global.\n-- These are the same:\nfunction f(x) return x * x end\nf = function (x) return x * x end\n\n-- And so are these:\nlocal function g(x) return math.sin(x) end\nlocal g; g  = function (x) return math.sin(x) end\n-- the 'local g' decl makes g-self-references ok.\n\n-- Trig funcs work in radians, by the way.\n\n-- Calls with one string param don't need parens:\nprint 'hello'  -- Works fine.\n\n\n----------------------------------------------------\n-- 3. Tables.\n----------------------------------------------------\n\n-- Tables = Lua's only compound data structure;\n--          they are associative arrays.\n-- Similar to php arrays or js objects, they are\n-- hash-lookup dicts that can also be used as lists.\n\n-- Using tables as dictionaries / maps:\n\n-- Dict literals have string keys by default:\nt = {key1 = 'value1', key2 = false}\n\n-- String keys can use js-like dot notation:\nprint(t.key1)  -- Prints 'value1'.\nt.newKey = {}  -- Adds a new key/value pair.\nt.key2 = nil   -- Removes key2 from the table.\n\n-- Literal notation for any (non-nil) value as key:\nu = {['@!#'] = 'qbert', [{}] = 1729, [6.28] = 'tau'}\nprint(u[6.28])  -- prints \"tau\"\n\n-- Key matching is basically by value for numbers\n-- and strings, but by identity for tables.\na = u['@!#']  -- Now a = 'qbert'.\nb = u[{}]     -- We might expect 1729, but it's nil:\n-- b = nil since the lookup fails. It fails\n-- because the key we used is not the same object\n-- as the one used to store the original value. So\n-- strings & numbers are more portable keys.\n\n-- A one-table-param function call needs no parens:\nfunction h(x) print(x.key1) end\nh{key1 = 'Sonmi~451'}  -- Prints 'Sonmi~451'.\n\nfor key, val in pairs(u) do  -- Table iteration.\n  print(key, val)\nend\n\n-- _G is a special table of all globals.\nprint(_G['_G'] == _G)  -- Prints 'true'.\n\n-- Using tables as lists / arrays:\n\n-- List literals implicitly set up int keys:\nv = {'value1', 'value2', 1.21, 'gigawatts'}\nfor i = 1, #v do  -- #v is the size of v for lists.\n  print(v[i])  -- Indices start at 1 !! SO CRAZY!\nend\n-- A 'list' is not a real type. v is just a table\n-- with consecutive integer keys, treated as a list.\n\n----------------------------------------------------\n-- 3.1 Metatables and metamethods.\n----------------------------------------------------\n\n-- A table can have a metatable that gives the table\n-- operator-overloadish behavior. Later we'll see\n-- how metatables support js-prototype behavior.\n\nf1 = {a = 1, b = 2}  -- Represents the fraction a/b.\nf2 = {a = 2, b = 3}\n\n-- This would fail:\n-- s = f1 + f2\n\nmetafraction = {}\nfunction metafraction.__add(f1, f2)\n  sum = {}\n  sum.b = f1.b * f2.b\n  sum.a = f1.a * f2.b + f2.a * f1.b\n  return sum\nend\n\nsetmetatable(f1, metafraction)\nsetmetatable(f2, metafraction)\n\ns = f1 + f2  -- call __add(f1, f2) on f1's metatable\n\n-- f1, f2 have no key for their metatable, unlike\n-- prototypes in js, so you must retrieve it as in\n-- getmetatable(f1). The metatable is a normal table\n-- with keys that Lua knows about, like __add.\n\n-- But the next line fails since s has no metatable:\n-- t = s + s\n-- Class-like patterns given below would fix this.\n\n-- An __index on a metatable overloads dot lookups:\ndefaultFavs = {animal = 'gru', food = 'donuts'}\nmyFavs = {food = 'pizza'}\nsetmetatable(myFavs, {__index = defaultFavs})\neatenBy = myFavs.animal  -- works! thanks, metatable\n\n-- Direct table lookups that fail will retry using\n-- the metatable's __index value, and this recurses.\n\n-- An __index value can also be a function(tbl, key)\n-- for more customized lookups.\n\n-- Values of __index,add, .. are called metamethods.\n-- Full list. Here a is a table with the metamethod.\n\n-- __add(a, b)                     for a + b\n-- __sub(a, b)                     for a - b\n-- __mul(a, b)                     for a * b\n-- __div(a, b)                     for a / b\n-- __mod(a, b)                     for a % b\n-- __pow(a, b)                     for a ^ b\n-- __unm(a)                        for -a\n-- __concat(a, b)                  for a .. b\n-- __len(a)                        for #a\n-- __eq(a, b)                      for a == b\n-- __lt(a, b)                      for a < b\n-- __le(a, b)                      for a <= b\n-- __index(a, b)  <fn or a table>  for a.b\n-- __newindex(a, b, c)             for a.b = c\n-- __call(a, ...)                  for a(...)\n\n----------------------------------------------------\n-- 3.2 Class-like tables and inheritance.\n----------------------------------------------------\n\n-- Classes aren't built in; there are different ways\n-- to make them using tables and metatables.\n\n-- Explanation for this example is below it.\n\nDog = {}                                   -- 1.\n\nfunction Dog:new()                         -- 2.\n  newObj = {sound = 'woof'}                -- 3.\n  self.__index = self                      -- 4.\n  return setmetatable(newObj, self)        -- 5.\nend\n\nfunction Dog:makeSound()                   -- 6.\n  print('I say ' .. self.sound)\nend\n\nmrDog = Dog:new()                          -- 7.\nmrDog:makeSound()  -- 'I say woof'         -- 8.\n\n-- 1. Dog acts like a class; it's really a table.\n-- 2. function tablename:fn(...) is the same as\n--    function tablename.fn(self, ...)\n--    The : just adds a first arg called self.\n--    Read 7 & 8 below for how self gets its value.\n-- 3. newObj will be an instance of class Dog.\n-- 4. self = the class being instantiated. Often\n--    self = Dog, but inheritance can change it.\n--    newObj gets self's functions when we set both\n--    newObj's metatable and self's __index to self.\n-- 5. Reminder: setmetatable returns its first arg.\n-- 6. The : works as in 2, but this time we expect\n--    self to be an instance instead of a class.\n-- 7. Same as Dog.new(Dog), so self = Dog in new().\n-- 8. Same as mrDog.makeSound(mrDog); self = mrDog.\n\n----------------------------------------------------\n\n-- Inheritance example:\n\nLoudDog = Dog:new()                           -- 1.\n\nfunction LoudDog:makeSound()\n  s = self.sound .. ' '                       -- 2.\n  print(s .. s .. s)\nend\n\nseymour = LoudDog:new()                       -- 3.\nseymour:makeSound()  -- 'woof woof woof'      -- 4.\n\n-- 1. LoudDog gets Dog's methods and variables.\n-- 2. self has a 'sound' key from new(), see 3.\n-- 3. Same as LoudDog.new(LoudDog), and converted to\n--    Dog.new(LoudDog) as LoudDog has no 'new' key,\n--    but does have __index = Dog on its metatable.\n--    Result: seymour's metatable is LoudDog, and\n--    LoudDog.__index = LoudDog. So seymour.key will\n--    = seymour.key, LoudDog.key, Dog.key, whichever\n--    table is the first with the given key.\n-- 4. The 'makeSound' key is found in LoudDog; this\n--    is the same as LoudDog.makeSound(seymour).\n\n-- If needed, a subclass's new() is like the base's:\nfunction LoudDog:new()\n  newObj = {}\n  -- set up newObj\n  self.__index = self\n  return setmetatable(newObj, self)\nend\n\n----------------------------------------------------\n-- 4. Modules.\n----------------------------------------------------\n\n\n--[[ I'm commenting out this section so the rest of\n--   this script remains runnable.\n```\n\n```lua\n-- Suppose the file mod.lua looks like this:\nlocal M = {}\n\nlocal function sayMyName()\n  print('Hrunkner')\nend\n\nfunction M.sayHello()\n  print('Why hello there')\n  sayMyName()\nend\n\nreturn M\n\n-- Another file can use mod.lua's functionality:\nlocal mod = require('mod')  -- Run the file mod.lua.\n\n-- require is the standard way to include modules.\n-- require acts like:     (if not cached; see below)\nlocal mod = (function ()\n  <contents of mod.lua>\nend)()\n-- It's like mod.lua is a function body, so that\n-- locals inside mod.lua are invisible outside it.\n\n-- This works because mod here = M in mod.lua:\nmod.sayHello() -- Prints: Why hello there Hrunkner\n\n-- This is wrong; sayMyName only exists in mod.lua:\nmod.sayMyName()  -- error\n\n-- require's return values are cached so a file is\n-- run at most once, even when require'd many times.\n\n-- Suppose mod2.lua contains \"print('Hi!')\".\nlocal a = require('mod2')  -- Prints Hi!\nlocal b = require('mod2')  -- Doesn't print; a=b.\n\n-- dofile is like require without caching:\ndofile('mod2.lua')  --> Hi!\ndofile('mod2.lua')  --> Hi! (runs it again)\n\n-- loadfile loads a lua file but doesn't run it yet.\nf = loadfile('mod2.lua')  -- Call f() to run it.\n\n-- load is loadfile for strings.\n-- (loadstring is deprecated, use load instead)\ng = load('print(343)')  -- Returns a function.\ng()  -- Prints out 343; nothing printed before now.\n\n--]]\n```\n\n## Community\n\nIf you need support join the official Lua [mailing list](https://www.lua.org/lua-l.html), [IRC channel](http://lua-users.org/wiki/IrcChannel), or [forum](https://luaforum.com).\n\n## References\n\nI was excited to learn Lua so I could make games\nwith the [LÖVE game engine](http://love2d.org/). That's the why.\n\nI started with [BlackBulletIV's Lua for programmers](https://ebens.me/posts/lua-for-programmers-part-1/).\nNext I read the official [Programming in Lua](http://www.lua.org/pil/contents.html) book.\nThat's the how.\n\nIt might be helpful to check out the [Lua short reference](http://lua-users.org/wiki/LuaShortReference) on lua-users.org.\n\nThe main topics not covered are standard libraries:\n\n* [`string` library](http://lua-users.org/wiki/StringLibraryTutorial)\n* [`table` library](http://lua-users.org/wiki/TableLibraryTutorial)\n* [`math` library](http://lua-users.org/wiki/MathLibraryTutorial)\n* [`io` library](http://lua-users.org/wiki/IoLibraryTutorial)\n* [`os` library](http://lua-users.org/wiki/OsLibraryTutorial)\n\nBy the way, the entire file is valid Lua; save it\nas learn.lua and run it with \"`lua learn.lua`\" !\n\nThis was first written for tylerneylon.com, and is\nalso available as a [GitHub gist](https://gist.github.com/tylerneylon/5853042). Have fun with Lua!\n"
        },
        {
          "name": "m.md",
          "type": "blob",
          "size": 13.9091796875,
          "content": "---\nname: M (MUMPS)\ncontributors:\n    - [\"Fred Turkington\", \"http://z3ugma.github.io\"]\nfilename: LEARNM.m\n---\n\nM, or MUMPS (Massachusetts General Hospital Utility Multi-Programming System) is\na procedural language with a built-in NoSQL database. Or, it’s a database with\nan integrated language optimized for accessing and manipulating that database.\nA key feature of M is that accessing local variables in memory and persistent\nstorage use the same basic syntax, so there's no separate query\nlanguage to remember. This makes it fast to program with, especially for\nbeginners. M's syntax was designed to be concise in an era where\ncomputer memory was expensive and limited. This concise style means that a lot\nmore fits on one screen without scrolling.\n\nThe M database is a hierarchical key-value store designed for high-throughput\ntransaction processing. The database is organized into tree structures called\n\"globals\", (for global variables) which are sparse data structures with parallels\nto modern formats like JSON.\n\nOriginally designed in 1966 for the healthcare applications, M continues to be\nused widely by healthcare systems and financial institutions for high-throughput\nreal-time applications.\n\n### Example\n\nHere's an example M program using expanded syntax to calculate the Fibonacci series:\n\n```\nfib ; compute the first few Fibonacci terms\n    new i,a,b,sum\n    set (a,b)=1 ; Initial conditions\n    for i=1:1 do  quit:sum>1000\n    . set sum=a+b\n    . write !,sum\n    . set a=b,b=sum\n```\n\n### Comments\nComments in M need at least one space before the comment marker of semicolon.\nComments that start with at least two semicolons (;;) are guaranteed to be accessible\nwithin a running program.\n\n```\n ;   Comments start with a semicolon (;)\n```\n\n### Data Types\n\nM has one data type (String) and three interpretations of that string.:\n\n```\n;   Strings - Characters enclosed in double quotes.\n;       \"\" is the null string. Use \"\" within a string for \"\n;       Examples: \"hello\", \"Scrooge said, \"\"Bah, Humbug!\"\"\"\n;\n;   Numbers - no commas, leading and trailing 0 removed.\n;       Scientific notation with 'E'.  (not 'e')\n;       Numbers with at least with IEEE 754 double-precision values (guaranteed 15 digits of precision)\n;       Examples: 20 (stored as 20) , 1e3 (stored as 1000), 0500.20 (stored as 500.2),\n;                 the US National Debt AT sometime on 12-OCT-2020 retrieved from http://www.usdebt.org is 27041423576201.15)\n;                     (required to be stored as at least 27041422576201.10 but most implementations store as 27041432576201.15)\n;\n;   Truthvalues - String interpreted as 0  is used for false and any string interpreted as non-zero (such as 1) for true.\n```\n\n### Commands\n\nCommands are case insensitive, and have full form, and a shortened abbreviation, often the first letter. Commands have zero or more arguments,depending on the command. This page includes programs written in this terse syntax. M is whitespace-aware. Spaces are treated as a delimiter between commands and arguments. Each command is separated from its arguments by 1 space. Commands with zero arguments are followed by 2 spaces. (technically these are called argumentless commands)\n\n#### Common Commands from all National and International Standards of M\n\n#### Write (abbreviated as W)\n\nPrint data to the current device.\n\n```\nWRITE !,\"hello world\"\n```\n\nOutput Formatting characters:\n\n The ! character is syntax for a new line.\n The # character is syntax for a new page.\n The sequence of the ? character and then a numeric expression is syntax for output of spaces until the number'th colum is printed.\n\nMultiple statements can be provided as additional arguments before the space separators to the next command:\n\n```\nw !,\"foo bar\",\" \",\"baz\"\n```\n\n#### Read (abbreviated as R)\n\nRetrieve input from the user\n\n```\nREAD var\nr !,\"Wherefore art thou Romeo? \",why\n```\n\nAs with all M commands, multiple arguments can be passed to a read command. Constants like quoted strings, numbers, and formatting characters are output directly. Values for both global variables and local variables are retrieved from the user. The terminal waits for the user to enter the first variable before displaying the second prompt.\n\n```\nr !,\"Better one, or two? \",lorem,\" Better two, or three? \",ipsum\n```\n\n#### Set (abbreviated as S)\n\nAssign a value to a variable\n\n```\nSET name=\"Benjamin Franklin\"\ns centi=0.01,micro=10E-6\nw !,centi,!,micro\n\n;.01\n;.00001\n```\n\n#### Kill (abbreviated as K)\n\nRemove a variable from memory or remove a database entry from disk.\nA database node (global variable) is killed depending on the variable name being prefixed by the caret character (^).\nIf it is not, then the local variable is removed from memory.\nIf KILLed, automatic garbage collection occurs.\n\n```\nKILL centi\nk micro\n```\n\n### Globals and Arrays\n\nIn addition to local variables, M has persistent, shared variables that are the built-in database of M.  They are stored to disk and called _globals_. Global names must start with a __caret__ (__^__).\n\nAny variable (local or global) can be an array with the assignment of a _subscript_. Arrays are sparse and do not have a predefined size. Only if data is stored will a value use memory. Arrays should be visualized like trees, where subscripts are branches and assigned values are leaves. Not all nodes in an array need to have a value.\n\n```\ns ^cars=20\ns ^cars(\"Tesla\",1,\"Name\")=\"Model 3\"\ns ^cars(\"Tesla\",2,\"Name\")=\"Model X\"\ns ^cars(\"Tesla\",2,\"Doors\")=5\n\nw !,^cars\n; 20\nw !,^cars(\"Tesla\")\n; null value - there's no value assigned to this node but it has children\nw !,^cars(\"Tesla\",1,\"Name\")\n; Model 3\n```\n\nThe index values of Arrays are automatically sorted in order. There is a catchphrase of \"MUMPS means never having to say you are sorting\". Take advantage of the built-in sorting by setting your value of interest as the last child subscript of an array rather than its value, and then storing an empty string for that node.\n\n```\n; A log of temperatures by date and time\ns ^TEMPS(\"11/12\",\"0600\",32)=\"\"\ns ^TEMPS(\"11/12\",\"1030\",48)=\"\"\ns ^TEMPS(\"11/12\",\"1400\",49)=\"\"\ns ^TEMPS(\"11/12\",\"1700\",43)=\"\"\n```\n\n### Operators\n\n```\n; Assignment:       =\n; Unary:            +   Convert a string value into a numeric value.\n; Arthmetic:\n;                   +   addition\n;                   -   subtraction\n;                   *   multiplication\n;                   /   floating-point division\n;                   \\   integer division\n;                   #   modulo\n;                   **  exponentiation\n; Logical:\n;                   &   and\n;                   !   or\n;                   '   not\n; Comparison:\n;                   =   equal\n;                   '=  not equal\n;                   >   greater than\n;                   <   less than\n;                   '>  not greater / less than or equal to\n;                   '<  not less / greater than or equal to\n; String operators:\n;                   _   concatenate\n;                   [   contains ­          a contains b\n;                   ]]  sorts after  ­      a comes after b\n;                   '[  does not contain\n;                   ']] does not sort after\n```\n\n#### Order of operations\n\nOperations in M are _strictly_ evaluated left to right. No operator has precedence over any other.\nFor example, there is NO order of operations where multiply is evaluated before addition.\nTo change this order, just use parentheses to group expressions to be evaluated first.\n\n```\nw 5+3*20\n;160\n;You probably wanted 65\nwrite 5+(3*20)\n```\n\n### Flow Control, Blocks, & Code Structure\n\nA single M file is called a _routine_. Within a given routine, you can break your code up into smaller chunks with _tags_. The tag starts in column 1 and the commands pertaining to that tag are indented.\n\nA tag can accept parameters and return a value, this is a function. A function is called with '$$':\n\n```\n; Execute the 'tag' function, which has two parameters, and write the result.\nw !,$$tag^routine(a,b)\n```\n\nM has an execution stack. When all levels of the stack have returned, the program ends. Levels are added to the stack with _do_ commands and removed with _quit_ commands.\n\n#### Do (abbreviated as D)\n\nWith an argument: execute a block of code & add a level to the stack.\n\n```\nd ^routine    ;run a routine from the beginning.\n;             ;routines are identified by a caret.\nd tag         ;run a tag in the current routine\nd tag^routine ;run a tag in different routine\n```\n\nArgumentless do: used to create blocks of code. The block is indented with a period for each level of the block:\n\n```\nset a=1\nif a=1 do\n. write !,a\n. read b\n. if b > 10 d\n. . w !, b\nw \"hello\"\n```\n\n#### Quit (abbreviated as Q)\nStop executing this block and return to the previous stack level.\nQuit can return a value, following the comamnd with a single space.\nQuit can stop a loop. remember to follow with two spaces.\nQuit outside a loop will return from the current subroutine followed by two spaces or a linefeed\n\n#### New (abbreviated as N)\nHide with a cleared value a given variable's value _for just this stack level_. Useful for preventing side effects.\n\nPutting all this together, we can create a full example of an M routine:\n\n```\n; RECTANGLE - a routine to deal with rectangle math\n    q ; quit if a specific tag is not called\n\nmain\n    n length,width ; New length and width so any previous value doesn't persist\n    w !,\"Welcome to RECTANGLE. Enter the dimensions of your rectangle.\"\n    r !,\"Length? \",length,!,\"Width? \",width\n    d area(length,width)            ;Do/Call subroutine using a tag\n    s per=$$perimeter(length,width)      ;Get the value of a function\n    w !,\"Perimeter: \",per\n    quit\n\narea(length,width)  ; This is a tag that accepts parameters.\n                    ; It's not a function since it quits with no value.\n    w !, \"Area: \",length*width\n    q  ; Quit: return to the previous level of the stack.\n\nperimeter(length,width)\n    q 2*(length+width) ; Returns a value using Quit ; this is a function\n```\n\n\n\n### Conditionals, Looping and $Order()\n\nF(or) loops can follow a few different patterns:\n\n```jinja\n;Finite loop with counter\n;f var=start:increment:stop\n\nf i=0:5:25 w i,\" \"\n;0 5 10 15 20 25\n\n; Infinite loop with counter\n; The counter will keep incrementing forever. Use a conditional with Quit to get out of the loop.\n;f var=start:increment\n\nf j=1:1 w j,\" \" i j>1E3 q\n; Print 1-1000 separated by a space\n\n;Argumentless for - infinite loop. Use a conditional with Quit.\n;   Also read as \"forever\" - f or for followed by two spaces.\ns var=\"\"\nf  s var=var_\"%\" w !,var i var=\"%%%%%%%%%%\" q\n; %\n; %%\n; %%%\n; %%%%\n; %%%%%\n; %%%%%%\n; %%%%%%%\n; %%%%%%%%\n; %%%%%%%%%\n; %%%%%%%%%%\n```\n\n#### I(f), E(lse), Postconditionals\n\nM has an if/else construct for conditional evaluation, but any command can be conditionally executed without an extra if statement using a _postconditional_. This is a condition that occurs immediately after the command, separated with a colon (:).\n\n```jinja\n; Conditional using traditional if/else\nr \"Enter a number: \",num\ni num>100 w !,\"huge\"\ne i num>10 w !,\"big\"\ne w !,\"small\"\n\n; Postconditionals are especially useful in a for loop.\n; This is the dominant for loop construct:\n;   a 'for' statement\n;   that tests for a 'quit' condition with a postconditional\n;   then 'do'es an indented block for each iteration\n\ns var=\"\"\nf  s var=var_\"%\" q:var=\"%%%%%%%%%%\" d  ;Read as \"Quit if var equals \"%%%%%%%%%%\"\n. w !,var\n\n;Bonus points - the $L(ength) built-in function makes this even terser\n\ns var=\"\"\nf  s var=var_\"%\" q:$L(var)>10  d  ;\n. w !,var\n```\n\n#### Array Looping - $Order\nAs we saw in the previous example, M has built-in functions called with a single $, compared to user-defined functions called with $$. These functions have shortened abbreviations, like commands.\nOne of the most useful is __$Order()__ / $O(). When given an array subscript, $O returns the next subscript in that array. When it reaches the last subscript, it returns \"\".\n\n```jinja\n;Let's call back to our ^TEMPS global from earlier:\n; A log of temperatures by date and time\ns ^TEMPS(\"11/12\",\"0600\",32)=\"\"\ns ^TEMPS(\"11/12\",\"0600\",48)=\"\"\ns ^TEMPS(\"11/12\",\"1400\",49)=\"\"\ns ^TEMPS(\"11/12\",\"1700\",43)=\"\"\n; Some more\ns ^TEMPS(\"11/16\",\"0300\",27)=\"\"\ns ^TEMPS(\"11/16\",\"1130\",32)=\"\"\ns ^TEMPS(\"11/16\",\"1300\",47)=\"\"\n\n;Here's a loop to print out all the dates we have temperatures for:\nn date,time ; Initialize these variables with \"\"\n\n; This line reads: forever; set date as the next date in ^TEMPS.\n; If date was set to \"\", it means we're at the end, so quit.\n; Do the block below\nf  s date=$ORDER(^TEMPS(date)) q:date=\"\" d\n. w !,date\n\n; Add in times too:\nf  s date=$ORDER(^TEMPS(date)) q:date=\"\"  d\n. w !,\"Date: \",date\n. f  s time=$O(^TEMPS(date,time)) q:time=\"\"  d\n. . w !,\"Time: \",time\n\n; Build an index that sorts first by temperature -\n; what dates and times had a given temperature?\nn date,time,temp\nf  s date=$ORDER(^TEMPS(date)) q:date=\"\"  d\n. f  s time=$O(^TEMPS(date,time)) q:time=\"\"  d\n. . f  s temp=$O(^TEMPS(date,time,temp)) q:temp=\"\"  d\n. . . s ^TEMPINDEX(temp,date,time)=\"\"\n\n;This will produce a global like\n^TEMPINDEX(27,\"11/16\",\"0300\")\n^TEMPINDEX(32,\"11/12\",\"0600\")\n^TEMPINDEX(32,\"11/16\",\"1130\")\n```\n\n## Further Reading\n\nThere's lots more to learn about M. A great short tutorial comes from the University of Northern Iowa and  Professor Kevin O'Kane's [Introduction to the MUMPS Language][1] presentation.  More about M using VistA is at\n\nIntersystems has some products which are a super-set of the M programming language.\n\n* [Iris Description Page][5]\n* [Cache Description Page][6]\n\nTo install an M interpreter / database on your computer, try a [YottaDB Docker image][2].\n\nYottaDB and its precursor, GT.M, have thorough documentation on all the language features including database transactions, locking, and replication:\n\n* [YottaDB Programmer's Guide][3]\n* [GT.M Programmer's Guide][4]\n\n[1]: https://www.cs.uni.edu/~okane/source/MUMPS-MDH/MumpsTutorial.pdf\n[2]: https://yottadb.com/product/get-started/\n[3]: https://docs.yottadb.com/ProgrammersGuide/langfeat.html\n[4]: http://tinco.pair.com/bhaskar/gtm/doc/books/pg/UNIX_manual/index.html\n[5]: https://www.intersystems.com/products/intersystems-iris/\n[6]: https://en.wikipedia.org/wiki/InterSystems_Caché\n"
        },
        {
          "name": "make.md",
          "type": "blob",
          "size": 7.4326171875,
          "content": "---\ncategory: tool\nname: Make\ncontributors:\n    - [\"Robert Steed\", \"https://github.com/robochat\"]\n    - [\"Stephan Fuhrmann\", \"https://github.com/sfuhrm\"]\nfilename: Makefile\n---\n\nA Makefile defines a graph of rules for creating a target (or targets).\nIts purpose is to do the minimum amount of work needed to update a\ntarget to the most recent version of the source. Famously written over a\nweekend by Stuart Feldman in 1976, it is still widely used (particularly\non Unix and Linux) despite many competitors and criticisms.\n\nThere are many varieties of make in existence, however this article\nassumes that we are using GNU make which is the standard on Linux.\n\n```make\n# Comments can be written like this.\n\n# File should be named Makefile and then can be run as `make <target>`.\n# Otherwise we use `make -f \"filename\" <target>`.\n\n# Warning - only use TABS to indent in Makefiles, never spaces!\n\n#-----------------------------------------------------------------------\n# Basics\n#-----------------------------------------------------------------------\n\n# Rules are of the format\n# target: <prerequisite>\n# where prerequisites are optional.\n\n# A rule - this rule will only run if file0.txt doesn't exist.\nfile0.txt:\n\techo \"foo\" > file0.txt\n\t# Even comments in these 'recipe' sections get passed to the shell.\n\t# Try `make file0.txt` or simply `make` - first rule is the default.\n\n# This rule will only run if file0.txt is newer than file1.txt.\nfile1.txt: file0.txt\n\tcat file0.txt > file1.txt\n\t# use the same quoting rules as in the shell.\n\t@cat file0.txt >> file1.txt\n\t# @ stops the command from being echoed to stdout.\n\t-@echo 'hello'\n\t# - means that make will keep going in the case of an error.\n\t# Try `make file1.txt` on the commandline.\n\n# A rule can have multiple targets and multiple prerequisites\nfile2.txt file3.txt: file0.txt file1.txt\n\ttouch file2.txt\n\ttouch file3.txt\n\n# Make will complain about multiple recipes for the same rule. Empty\n# recipes don't count though and can be used to add new dependencies.\n\n#-----------------------------------------------------------------------\n# Phony Targets\n#-----------------------------------------------------------------------\n\n# A phony target. Any target that isn't a file.\n# It will never be up to date so make will always try to run it.\nall: maker process\n\n# We can declare things out of order.\nmaker:\n\ttouch ex0.txt ex1.txt\n\n# Can avoid phony rules breaking when a real file has the same name by\n.PHONY: all maker process\n# This is a special target. There are several others.\n\n# A rule with a dependency on a phony target will always run\nex0.txt ex1.txt: maker\n\n# Common phony targets are: all make clean install ...\n\n#-----------------------------------------------------------------------\n# Automatic Variables & Wildcards\n#-----------------------------------------------------------------------\n\nprocess: file*.txt\t#using a wildcard to match filenames\n\t@echo $^\t# $^ is a variable containing the list of prerequisites\n\t@echo $@\t# prints the target name\n\t#(for multiple target rules, $@ is whichever caused the rule to run)\n\t@echo $<\t# the first prerequisite listed\n\t@echo $?\t# only the dependencies that are out of date\n\t@echo $+\t# all dependencies including duplicates (unlike normal)\n\t#@echo $|\t# all of the 'order only' prerequisites\n\n# Even if we split up the rule dependency definitions, $^ will find them\nprocess: ex1.txt file0.txt\n# ex1.txt will be found but file0.txt will be deduplicated.\n\n#-----------------------------------------------------------------------\n# Patterns\n#-----------------------------------------------------------------------\n\n# Can teach make how to convert certain files into other files.\n\n%.png: %.svg\n\tinkscape --export-png $^\n\n# Pattern rules will only do anything if make decides to create the\n# target.\n\n# Directory paths are normally ignored when matching pattern rules. But\n# make will try to use the most appropriate rule available.\nsmall/%.png: %.svg\n\tinkscape --export-png --export-dpi 30 $^\n\n# make will use the last version for a pattern rule that it finds.\n%.png: %.svg\n\t@echo this rule is chosen\n\n# However make will use the first pattern rule that can make the target\n%.png: %.ps\n\t@echo this rule is not chosen if *.svg and *.ps are both present\n\n# make already has some pattern rules built-in. For instance, it knows\n# how to turn *.c files into *.o files.\n\n# Older makefiles might use suffix rules instead of pattern rules\n.png.ps:\n\t@echo this rule is similar to a pattern rule.\n\n# Tell make about the suffix rule\n.SUFFIXES: .png\n\n#-----------------------------------------------------------------------\n# Variables\n#-----------------------------------------------------------------------\n# aka. macros\n\n# Variables are basically all string types\n\nname = Ted\nname2=\"Sarah\"\n\necho:\n\t@echo $(name)\n\t@echo ${name2}\n\t@echo $name    # This won't work, treated as $(n)ame.\n\t@echo $(name3) # Unknown variables are treated as empty strings.\n\n# There are 4 places to set variables.\n# In order of priority from highest to lowest:\n# 1: commandline arguments\n# 2: Makefile\n# 3: shell environment variables - make imports these automatically.\n# 4: make has some predefined variables\n\nname4 ?= Jean\n# Only set the variable if environment variable is not already defined.\n\noverride name5 = David\n# Stops commandline arguments from changing this variable.\n\nname4 +=grey\n# Append values to variable (includes a space).\n\n# Pattern-specific variable values (GNU extension).\necho: name2 = Sara # True within the matching rule\n\t# and also within its remade recursive dependencies\n\t# (except it can break when your graph gets too complicated!)\n\n# Some variables defined automatically by make.\necho_inbuilt:\n\techo $(CC)\n\techo ${CXX}\n\techo $(FC)\n\techo ${CFLAGS}\n\techo $(CPPFLAGS)\n\techo ${CXXFLAGS}\n\techo $(LDFLAGS)\n\techo ${LDLIBS}\n\n#-----------------------------------------------------------------------\n# Variables 2\n#-----------------------------------------------------------------------\n\n# The first type of variables are evaluated each time they are used.\n# This can be expensive, so a second type of variable exists which is\n# only evaluated once. (This is a GNU make extension)\n\nvar := hello\nvar2 ::= $(var) hello\n#:= and ::= are equivalent.\n\n# These variables are evaluated procedurally (in the order that they\n# appear), thus breaking with the rest of the language !\n\n# This doesn't work\nvar3 ::= $(var4) and good luck\nvar4 ::= good night\n\n#-----------------------------------------------------------------------\n# Functions\n#-----------------------------------------------------------------------\n\n# make has lots of functions available.\n\nsourcefiles = $(wildcard *.c */*.c)\nobjectfiles = $(patsubst %.c,%.o,$(sourcefiles))\n\n# Format is $(func arg0,arg1,arg2...)\n\n# Some examples\nls:\t* src/*\n\t@echo $(filter %.txt, $^)\n\t@echo $(notdir $^)\n\t@echo $(join $(dir $^),$(notdir $^))\n\n#-----------------------------------------------------------------------\n# Directives\n#-----------------------------------------------------------------------\n\n# Include other makefiles, useful for platform specific code\ninclude foo.mk\n\nsport = tennis\n# Conditional compilation\nreport:\nifeq ($(sport),tennis)\n\t@echo 'game, set, match'\nelse\n\t@echo \"They think it's all over; it is now\"\nendif\n\n# There are also ifneq, ifdef, ifndef\n\nfoo = true\n\nifdef $(foo)\nbar = 'hello'\nendif\n```\n\n### More Resources\n\n- [GNU Make documentation](https://www.gnu.org/software/make/manual/make.html)\n- [Software Carpentry tutorial](https://swcarpentry.github.io/make-novice/)\n- [Makefile Tutorial By Example](https://makefiletutorial.com/#makefile-cookbook)\n"
        },
        {
          "name": "markdown.md",
          "type": "blob",
          "size": 8.1611328125,
          "content": "---\nname: Markdown\ncontributors:\n    - [\"Dan Turkel\", \"http://danturkel.com/\"]\n    - [\"Jacob Ward\", \"http://github.com/JacobCWard/\"]\n    - [\"Tomáš Hartman\", \"https://github.com/tomas-hartman\"]\nfilename: markdown.md\n---\n\n\nMarkdown was created by John Gruber in 2004. It's meant to be an easy to read\nand write syntax which converts easily to HTML (and now many other formats as\nwell).\n\nMarkdown also varies in implementation from one parser to a next. This\nguide will attempt to clarify when features are universal or when they are\nspecific to a certain parser.\n\n## HTML Elements\n\nMarkdown is a superset of HTML, so any HTML file is valid Markdown.\n\n```md\n<!--This means we can use HTML elements in Markdown, such as the comment\nelement, and they won't be affected by a markdown parser. However, if you\ncreate an HTML element in your markdown file, you cannot use markdown syntax\nwithin that element's contents.-->\n```\n\n## Headings\n\nYou can create HTML elements `<h1>` through `<h6>` easily by prepending the\ntext you want to be in that element by a number of hashes (#).\n\n```md\n# This is an <h1>\n## This is an <h2>\n### This is an <h3>\n#### This is an <h4>\n##### This is an <h5>\n###### This is an <h6>\n```\n\nMarkdown also provides us with two alternative ways of indicating h1 and h2.\n\n```md\nThis is an h1\n=============\n\nThis is an h2\n-------------\n```\n\n## Simple text styles\n\nText can be easily styled as italic or bold using markdown.\n\n```md\n*This text is in italics.*\n_And so is this text._\n\n**This text is in bold.**\n__And so is this text.__\n\n***This text is in both.***\n**_As is this!_**\n*__And this!__*\n```\n\nIn GitHub Flavored Markdown, which is used to render markdown files on\nGitHub, we also have strikethrough:\n\n```md\n~~This text is rendered with strikethrough.~~\n```\n\n## Paragraphs\n\nParagraphs are a one or multiple adjacent lines of text separated by one or\nmultiple blank lines.\n\n```md\nThis is a paragraph. I'm typing in a paragraph isn't this fun?\n\nNow I'm in paragraph 2.\nI'm still in paragraph 2 too!\n\n\nI'm in paragraph three!\n```\n\nShould you ever want to insert an HTML `<br />` tag, you can end a paragraph\nwith two or more spaces and then begin a new paragraph.\n\n```md\nI end with two spaces (highlight me to see them).\n\nThere's a <br /> above me!\n```\n\nBlock quotes are easy and done with the > character.\n\n```md\n> This is a block quote. You can either\n> manually wrap your lines and put a `>` before every line or you can let your lines get really long and wrap on their own.\n> It doesn't make a difference so long as they start with a `>`.\n\n> You can also use more than one level\n>> of indentation?\n> How neat is that?\n\n```\n\n## Lists\n\nUnordered lists can be made using asterisks, pluses, or hyphens.\n\n```md\n* Item\n* Item\n* Another item\n\nor\n\n+ Item\n+ Item\n+ One more item\n\nor\n\n- Item\n- Item\n- One last item\n```\n\nOrdered lists are done with a number followed by a period.\n\n```md\n1. Item one\n2. Item two\n3. Item three\n```\n\nYou don't even have to label the items correctly and Markdown will still\nrender the numbers in order, but this may not be a good idea.\n\n```md\n1. Item one\n1. Item two\n1. Item three\n```\n\n(This renders the same as the example above.)\n\nYou can also use sublists.\n\n```md\n1. Item one\n2. Item two\n3. Item three\n    * Sub-item\n    * Sub-item\n4. Item four\n```\n\nThere are even task lists. This creates HTML checkboxes.\n\n```md\nBoxes below without the 'x' are unchecked HTML checkboxes.\n- [ ] First task to complete.\n- [ ] Second task that needs done\nThis checkbox below will be a checked HTML checkbox.\n- [x] This task has been completed\n```\n\n## Code blocks\n\nYou can indicate a code block (which uses the `<code>` element) by indenting\na line with four spaces or a tab.\n\n```md\n    This is code\n    So is this\n```\n\nYou can also re-tab (or add an additional four spaces) for indentation\ninside your code.\n\n```md\n    my_array.each do |item|\n      puts item\n    end\n```\n\nInline code can be created using the backtick character `` ` ``.\n\n```md\nJohn didn't even know what the `go_to()` function did!\n```\n\nIn GitHub Flavored Markdown, you can use a special syntax for code.\n\n````md\n```ruby\ndef foobar\n  puts \"Hello world!\"\nend\n```\n````\n\nThe above text doesn't require indenting, plus GitHub will use syntax\nhighlighting of the language you specify after the opening <code>```</code>.\n\n## Horizontal rule\n\nHorizontal rules (`<hr/>`) are easily added with three or more asterisks or\nhyphens, with or without spaces.\n\n```md\n***\n---\n- - -\n****************\n```\n\n## Links\n\nOne of the best things about markdown is how easy it is to make links. Put\nthe text to display in hard brackets [] followed by the url in parentheses ()\n\n```md\n[Click me!](http://test.com/)\n```\n\nYou can also add a link title using quotes inside the parentheses.\n\n```md\n[Click me!](http://test.com/ \"Link to Test.com\")\n```\n\nRelative paths work too.\n\n```md\n[Go to music](/music/).\n```\n\nMarkdown also supports reference style links.\n\n```md\n[Click this link][link1] for more info about it!\n[Also check out this link][foobar] if you want to.\n\n[link1]: http://test.com/ \"Cool!\"\n[foobar]: http://foobar.biz/ \"Alright!\"\n```\n\nThe title can also be in single quotes or in parentheses, or omitted\nentirely. The references can be anywhere in your document and the reference IDs\ncan be anything so long as they are unique.\n\nThere is also \"implicit naming\" which lets you use the link text as the id.\n\n```md\n[This][] is a link.\n\n[This]: http://thisisalink.com/\n```\n\nBut it's not that commonly used.\n\n### Table of contents\n\nSome Markdown flavors even make use of the combination of lists, links and\nheadings in order to create tables of contents. In this case, heading titles in\nlowercase are prepended with hash (`#`) and are used as link ids. Should the\nheading have multiple words, they will be connected with a hyphen (`-`), that\nalso replaces some special characters. (Some other special characters are\nomitted though.)\n\n```md\n- [Heading](#heading)\n- [Another heading](#another-heading)\n- [Chapter](#chapter)\n  - [Subchapter <h3 />](#subchapter-h3-)\n```\n\nNonetheless, this is a feature that might not be working in all Markdown\nimplementations the same way.\n\n## Images\n\nImages are done the same way as links but with an exclamation point in front!\n\n```md\n![This is the alt-attribute for my image](http://imgur.com/myimage.jpg \"An optional title\")\n```\n\nAnd reference style works as expected.\n\n```md\n![This is the alt-attribute.][myimage]\n\n[myimage]: relative/urls/cool/image.jpg \"if you need a title, it's here\"\n```\n\n## Miscellany\n\n### Auto-links\n\n```md\n<http://testwebsite.com/> is equivalent to\n[http://testwebsite.com/](http://testwebsite.com/)\n```\n\n### Auto-links for emails\n\n```md\n<foo@bar.com>\n```\n\n### Escaping characters\n\n```md\nI want to type *this text surrounded by asterisks* but I don't want it to be\nin italics, so I do this: \\*this text surrounded by asterisks\\*.\n```\n\n### Keyboard keys\n\nIn GitHub Flavored Markdown, you can use a `<kbd>` tag to represent keyboard\nkeys.\n\n```md\nYour computer crashed? Try sending a\n<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd>\n```\n\n### Tables\n\nTables are only available in GitHub Flavored Markdown and are slightly\ncumbersome, but if you really want it:\n\n```md\n| Col1         | Col2     | Col3          |\n| :----------- | :------: | ------------: |\n| Left-aligned | Centered | Right-aligned |\n| blah         | blah     | blah          |\n```\n\nor, for the same results\n\n```md\nCol 1 | Col2 | Col3\n:-- | :-: | --:\nUgh this is so ugly | make it | stop\n```\n\n## Markdownlint\n\nIn order to simplify work with Markdown and to unify its coding style,\n`Markdownlint` has been created. Available as a\n[separate tool](https://github.com/markdownlint/markdownlint)\nas well as a plugin for some IDEs, it can be used to ensure validity and\nreadability of Markdown.\n\n---\n\n## Further reading\n\nFor more info, check out John Gruber's official post of syntax [here](http://daringfireball.net/projects/markdown/syntax) and Adam Pritchard's great cheatsheet [here](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet).\n\nIf you want to learn more on some major Markdown flavors' features, see:\n\n- [GitHub Flavored Markdown](https://docs.github.com/en/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)\n- [GitLab Flavored Markdown](https://docs.gitlab.com/ee/user/markdown.html)\n"
        },
        {
          "name": "matlab.md",
          "type": "blob",
          "size": 17.029296875,
          "content": "---\nname: MATLAB\nfilename: learnmatlab.m\ncontributors:\n    - [\"mendozao\", \"http://github.com/mendozao\"]\n    - [\"jamesscottbrown\", \"http://jamesscottbrown.com\"]\n    - [\"Colton Kohnke\", \"http://github.com/voltnor\"]\n    - [\"Claudson Martins\", \"http://github.com/claudsonm\"]\n---\n\nMATLAB stands for MATrix LABoratory. It is a powerful numerical computing language commonly used in engineering and mathematics.\n\n```matlab\n%% Code sections start with two percent signs. Section titles go on the same line.\n% Comments start with a percent sign.\n\n%{\nMulti line comments look\nsomething\nlike\nthis\n%}\n\n% Two percent signs denote the start of a new code section\n% Individual code sections can be run by moving the cursor to the section followed by\n% either clicking the \"Run Section\" button\n% or     using Ctrl+Shift+Enter (Windows) or Cmd+Shift+Return (macOS)\n\n%% This is the start of a code section\n%  One way of using sections is to separate expensive but unchanging start-up code like loading data\nload myFile.mat y\n\n%% This is another code section\n%  This section can be edited and run repeatedly on its own, and is helpful for exploratory programming and demos\nA = A * 2;\nplot(A);\n\n%% Code sections are also known as code cells or cell mode (not to be confused with cell arrays)\n\n\n% commands can span multiple lines, using '...':\n a = 1 + 2 + ...\n + 4\n\n% commands can be passed to the operating system\n!ping google.com\n\nwho          % Displays all variables in memory\nwhos         % Displays all variables in memory, with their types\nclear        % Erases all your variables from memory\nclear('A')   % Erases a particular variable\nopenvar('A') % Open variable in variable editor\n\nclc    % Erases the writing on your Command Window\ndiary  % Toggle writing Command Window text to file\nctrl-c % Abort current computation\n\nedit('myfunction.m') % Open function/script in editor\ntype('myfunction.m') % Print the source of function/script to Command Window\n\nprofile on     % turns on the code profiler\nprofile off    % turns off the code profiler\nprofile viewer % Open profiler\n\nhelp command         % Displays documentation for command in Command Window\ndoc command          % Displays documentation for command in Help Window\nlookfor command      % Searches for command in the first commented line of all functions\nlookfor command -all % searches for command in all functions\n\n\n% Output formatting\nformat short    % 4 decimals in a floating number\nformat long     % 15 decimals\nformat bank     % only two digits after decimal point - for financial calculations\nfprintf('text') % print \"text\" to the screen\ndisp('text')    % print \"text\" to the screen\n\n% Variables & Expressions\nmyVariable = 4  % Notice Workspace pane shows newly created variable\nmyVariable = 4; % Semi colon suppresses output to the Command Window\n4 + 6           % ans = 10\n8 * myVariable  % ans = 32\n2 ^ 3           % ans = 8\na = 2; b = 3;\nc = exp(a)*sin(pi/2) % c = 7.3891\n\n% Calling functions can be done in either of two ways:\n% Standard function syntax:\nload('myFile.mat', 'y') % arguments within parentheses, separated by commas\n% Command syntax:\nload myFile.mat y       % no parentheses, and spaces instead of commas\n% Note the lack of quote marks in command form: inputs are always passed as\n% literal text - cannot pass variable values. Also, can't receive output:\n[V,D] = eig(A);  % this has no equivalent in command form\n[~,D] = eig(A);  % if you only want D and not V\n\n\n\n% Logicals\n1 > 5 % ans = 0\n10 >= 10 % ans = 1\n3 ~= 4 % Not equal to -> ans = 1\n3 == 3 % equal to -> ans = 1\n3 > 1 && 4 > 1 % AND -> ans = 1\n3 > 1 || 4 > 1 % OR -> ans = 1\n~1 % NOT -> ans = 0\n\n% Logicals can be applied to matrices:\nA > 5\n% for each element, if condition is true, that element is 1 in returned matrix\nA( A > 5 )\n% returns a vector containing the elements in A for which condition is true\n\n% Strings\na = 'MyString'\nlength(a) % ans = 8\na(2) % ans = y\n[a,a] % ans = MyStringMyString\n\n\n% Cells\na = {'one', 'two', 'three'}\na(1) % ans = 'one' - returns a cell\nchar(a(1)) % ans = one - returns a string\n\n% Structures\nA.b = {'one','two'};\nA.c = [1 2];\nA.d.e = false;\n\n% Vectors\nx = [4 32 53 7 1]\nx(2) % ans = 32, indices in MATLAB start 1, not 0\nx(2:3) % ans = 32 53\nx(2:end) % ans = 32 53 7 1\n\nx = [4; 32; 53; 7; 1] % Column vector\n\nx = [1:10] % x = 1 2 3 4 5 6 7 8 9 10\nx = [1:2:10] % Increment by 2, i.e. x = 1 3 5 7 9\n\n% Matrices\nA = [1 2 3; 4 5 6; 7 8 9]\n% Rows are separated by a semicolon; elements are separated with space or comma\n% A =\n\n%     1     2     3\n%     4     5     6\n%     7     8     9\n\nA(2,3) % ans = 6, A(row, column)\nA(6) % ans = 8\n% (implicitly concatenates columns into vector, then indexes into that)\n\n\nA(2,3) = 42 % Update row 2 col 3 with 42\n% A =\n\n%     1     2     3\n%     4     5     42\n%     7     8     9\n\nA(2:3,2:3) % Creates a new matrix from the old one\n%ans =\n\n%     5     42\n%     8     9\n\nA(:,1) % All rows in column 1\n%ans =\n\n%     1\n%     4\n%     7\n\nA(1,:) % All columns in row 1\n%ans =\n\n%     1     2     3\n\n[A ; A] % Concatenation of matrices (vertically)\n%ans =\n\n%     1     2     3\n%     4     5    42\n%     7     8     9\n%     1     2     3\n%     4     5    42\n%     7     8     9\n\n% this is the same as\nvertcat(A,A);\n\n\n[A , A] % Concatenation of matrices (horizontally)\n\n%ans =\n\n%     1     2     3     1     2     3\n%     4     5    42     4     5    42\n%     7     8     9     7     8     9\n\n% this is the same as\nhorzcat(A,A);\n\n\nA(:, [3 1 2]) % Rearrange the columns of original matrix\n%ans =\n\n%     3     1     2\n%    42     4     5\n%     9     7     8\n\nsize(A) % ans = 3 3\n\nA(1, :) =[] % Delete the first row of the matrix\nA(:, 1) =[] % Delete the first column of the matrix\n\ntranspose(A) % Transpose the matrix, which is the same as:\nA.' % Concise version of transpose (without taking complex conjugate)\nctranspose(A) % Hermitian transpose the matrix, which is the same as:\nA'  % Concise version of complex transpose\n    % (the transpose, followed by taking complex conjugate of each element)\n\n\n\n\n\n% Element by Element Arithmetic vs. Matrix Arithmetic\n% On their own, the arithmetic operators act on whole matrices. When preceded\n% by a period, they act on each element instead. For example:\nA * B % Matrix multiplication\nA .* B % Multiply each element in A by its corresponding element in B\n\n% There are several pairs of functions, where one acts on each element, and\n% the other (whose name ends in m) acts on the whole matrix.\nexp(A) % exponentiate each element\nexpm(A) % calculate the matrix exponential\nsqrt(A) % take the square root of each element\nsqrtm(A) %  find the matrix whose square is A\n\n\n% Plotting\nx = 0:.10:2*pi; % Creates a vector that starts at 0 and ends at 2*pi with increments of .1\ny = sin(x);\nplot(x,y)\nxlabel('x axis')\nylabel('y axis')\ntitle('Plot of y = sin(x)')\naxis([0 2*pi -1 1]) % x range from 0 to 2*pi, y range from -1 to 1\n\nplot(x,y1,'-',x,y2,'--',x,y3,':') % For multiple functions on one plot\nlegend('Line 1 label', 'Line 2 label') % Label curves with a legend\n\n% Alternative method to plot multiple functions in one plot.\n% while 'hold' is on, commands add to existing graph rather than replacing it\nplot(x, y)\nhold on\nplot(x, z)\nhold off\n\nloglog(x, y) % A log-log plot\nsemilogx(x, y) % A plot with logarithmic x-axis\nsemilogy(x, y) % A plot with logarithmic y-axis\n\nfplot (@(x) x^2, [2,5]) % plot the function x^2 from x=2 to x=5\n\ngrid on % Show grid; turn off with 'grid off'\naxis square % Makes the current axes region square\naxis equal % Set aspect ratio so data units are the same in every direction\n\nscatter(x, y); % Scatter-plot\nhist(x); % Histogram\nstem(x); % Plot values as stems, useful for displaying discrete data\nbar(x); % Plot bar graph\n\nz = sin(x);\nplot3(x,y,z); % 3D line plot\n\npcolor(A) % Heat-map of matrix: plot as grid of rectangles, coloured by value\ncontour(A) % Contour plot of matrix\nmesh(A) % Plot as a mesh surface\n\nh = figure % Create new figure object, with handle h\nfigure(h) % Makes the figure corresponding to handle h the current figure\nclose(h) % close figure with handle h\nclose all % close all open figure windows\nclose % close current figure window\n\nshg % bring an existing graphics window forward, or create new one if needed\nclf clear % clear current figure window, and reset most figure properties\n\n% Properties can be set and changed through a figure handle.\n% You can save a handle to a figure when you create it.\n% The function get returns a handle to the current figure\nh = plot(x, y); % you can save a handle to a figure when you create it\nset(h, 'Color', 'r')\n% 'y' yellow; 'm' magenta, 'c' cyan, 'r' red, 'g' green, 'b' blue, 'w' white, 'k' black\nset(h, 'LineStyle', '--')\n % '--' is solid line, '---' dashed, ':' dotted, '-.' dash-dot, 'none' is no line\nget(h, 'LineStyle')\n\n\n% The function gca returns a handle to the axes for the current figure\nset(gca, 'XDir', 'reverse'); % reverse the direction of the x-axis\n\n% To create a figure that contains several axes in tiled positions, use subplot\nsubplot(2,3,1); % select the first position in a 2-by-3 grid of subplots\nplot(x1); title('First Plot') % plot something in this position\nsubplot(2,3,2); % select second position in the grid\nplot(x2); title('Second Plot') % plot something there\n\n\n% To use functions or scripts, they must be on your path or current directory\npath % display current path\naddpath /path/to/dir % add to path\nrmpath /path/to/dir % remove from path\ncd /path/to/move/into % change directory\n\n\n% Variables can be saved to .mat files\nsave('myFileName.mat') % Save the variables in your Workspace\nload('myFileName.mat') % Load saved variables into Workspace\n\n% M-file Scripts\n% A script file is an external file that contains a sequence of statements.\n% They let you avoid repeatedly typing the same code in the Command Window\n% Have .m extensions\n\n% M-file Functions\n% Like scripts, and have the same .m extension\n% But can accept input arguments and return an output\n% Also, they have their own workspace (ie. different variable scope).\n% Function name should match file name (so save this example as double_input.m).\n% 'help double_input.m' returns the comments under line beginning function\nfunction output = double_input(x)\n  %double_input(x) returns twice the value of x\n  output = 2*x;\nend\ndouble_input(6) % ans = 12\n\n\n% You can also have subfunctions and nested functions.\n% Subfunctions are in the same file as the primary function, and can only be\n% called by functions in the file. Nested functions are defined within another\n% functions, and have access to both its workspace and their own workspace.\n\n% If you want to create a function without creating a new file you can use an\n% anonymous function. Useful when quickly defining a function to pass to\n% another function (eg. plot with fplot, evaluate an indefinite integral\n% with quad, find roots with fzero, or find minimum with fminsearch).\n% Example that returns the square of its input, assigned to the handle sqr:\nsqr = @(x) x.^2;\nsqr(10) % ans = 100\ndoc function_handle % find out more\n\n% User input\na = input('Enter the value: ')\n\n% Stops execution of file and gives control to the keyboard: user can examine\n% or change variables. Type 'return' to continue execution, or 'dbquit' to exit\nkeyboard\n\n% Reading in data (also xlsread/importdata/imread for excel/CSV/image files)\nfopen(filename)\n\n% Output\ndisp(a) % Print out the value of variable a\ndisp('Hello World') % Print out a string\nfprintf % Print to Command Window with more control\n\n% Conditional statements (the parentheses are optional, but good style)\nif (a > 23)\n  disp('Greater than 23')\nelseif (a == 23)\n  disp('a is 23')\nelse\n  disp('neither condition met')\nend\n\n% Looping\n% NB. looping over elements of a vector/matrix is slow!\n% Where possible, use functions that act on whole vector/matrix at once\nfor k = 1:5\n  disp(k)\nend\n\nk = 0;\nwhile (k < 5)\n  k = k + 1;\nend\n\n% Timing code execution: 'toc' prints the time since 'tic' was called\ntic\nA = rand(1000);\nA*A*A*A*A*A*A;\ntoc\n\n% Connecting to a MySQL Database\ndbname = 'database_name';\nusername = 'root';\npassword = 'root';\ndriver = 'com.mysql.jdbc.Driver';\ndburl = ['jdbc:mysql://localhost:8889/' dbname];\njavaclasspath('mysql-connector-java-5.1.xx-bin.jar'); %xx depends on version, download available at http://dev.mysql.com/downloads/connector/j/\nconn = database(dbname, username, password, driver, dburl);\nsql = ['SELECT * from table_name where id = 22'] % Example sql statement\na = fetch(conn, sql) %a will contain your data\n\n\n% Common math functions\nsin(x)\ncos(x)\ntan(x)\nasin(x)\nacos(x)\natan(x)\nexp(x)\nsqrt(x)\nlog(x)\nlog10(x)\nabs(x) %If x is complex, returns magnitude\nmin(x)\nmax(x)\nceil(x)\nfloor(x)\nround(x)\nrem(x)\nrand % Uniformly distributed pseudorandom numbers\nrandi % Uniformly distributed pseudorandom integers\nrandn % Normally distributed pseudorandom numbers\n\n%Complex math operations\nabs(x)   % Magnitude of complex variable x\nphase(x) % Phase (or angle) of complex variable x\nreal(x)  % Returns the real part of x (i.e returns a if x = a +jb)\nimag(x)  % Returns the imaginary part of x (i.e returns b if x = a+jb)\nconj(x)  % Returns the complex conjugate\n\n\n% Common constants\npi\nNaN\ninf\n\n% Solving matrix equations (if no solution, returns a least squares solution)\n% The \\ and / operators are equivalent to the functions mldivide and mrdivide\nx=A\\b % Solves Ax=b. Faster and more numerically accurate than using inv(A)*b.\nx=b/A % Solves xA=b\n\ninv(A) % calculate the inverse matrix\npinv(A) % calculate the pseudo-inverse\n\n% Common matrix functions\nzeros(m,n) % m x n matrix of 0's\nones(m,n) % m x n matrix of 1's\ndiag(A) % Extracts the diagonal elements of a matrix A\ndiag(x) % Construct a matrix with diagonal elements listed in x, and zeroes elsewhere\neye(m,n) % Identity matrix\nlinspace(x1, x2, n) % Return n equally spaced points, with min x1 and max x2\ninv(A) % Inverse of matrix A\ndet(A) % Determinant of A\neig(A) % Eigenvalues and eigenvectors of A\ntrace(A) % Trace of matrix - equivalent to sum(diag(A))\nisempty(A) % Tests if array is empty\nall(A) % Tests if all elements are nonzero or true\nany(A) % Tests if any elements are nonzero or true\nisequal(A, B) % Tests equality of two arrays\nnumel(A) % Number of elements in matrix\ntriu(x) % Returns the upper triangular part of x\ntril(x) % Returns the lower triangular part of x\ncross(A,B) %  Returns the cross product of the vectors A and B\ndot(A,B) % Returns scalar product of two vectors (must have the same length)\ntranspose(A) % Returns the transpose of A\nfliplr(A) % Flip matrix left to right\nflipud(A) % Flip matrix up to down\n\n% Matrix Factorisations\n[L, U, P] = lu(A) % LU decomposition: PA = LU,L is lower triangular, U is upper triangular, P is permutation matrix\n[P, D] = eig(A) % eigen-decomposition: AP = PD, P's columns are eigenvectors and D's diagonals are eigenvalues\n[U,S,V] = svd(X) % SVD: XV = US, U and V are unitary matrices, S has non-negative diagonal elements in decreasing order\n\n% Common vector functions\nmax     % largest component\nmin     % smallest component\nlength  % length of a vector\nsort    % sort in ascending order\nsum     % sum of elements\nprod    % product of elements\nmode    % modal value\nmedian  % median value\nmean    % mean value\nstd     % standard deviation\nperms(x) % list all permutations of elements of x\nfind(x) % Finds all non-zero elements of x and returns their indexes, can use comparison operators,\n        % i.e. find( x == 3 ) returns indexes of elements that are equal to 3\n        % i.e. find( x >= 3 ) returns indexes of elements greater than or equal to 3\n\n\n% Classes\n% MATLAB can support object-oriented programming.\n% Classes must be put in a file of the class name with a .m extension.\n% To begin, we create a simple class to store GPS waypoints.\n% Begin WaypointClass.m\nclassdef WaypointClass % The class name.\n  properties % The properties of the class behave like Structures\n    latitude\n    longitude\n  end\n  methods\n    % This method that has the same name of the class is the constructor.\n    function obj = WaypointClass(lat, lon)\n      obj.latitude = lat;\n      obj.longitude = lon;\n    end\n\n    % Other functions that use the Waypoint object\n    function r = multiplyLatBy(obj, n)\n      r = n*[obj.latitude];\n    end\n\n    % If we want to add two Waypoint objects together without calling\n    % a special function we can overload MATLAB's arithmetic like so:\n    function r = plus(o1,o2)\n      r = WaypointClass([o1.latitude] +[o2.latitude], ...\n                        [o1.longitude]+[o2.longitude]);\n    end\n  end\nend\n% End WaypointClass.m\n\n% We can create an object of the class using the constructor\na = WaypointClass(45.0, 45.0)\n\n% Class properties behave exactly like MATLAB Structures.\na.latitude = 70.0\na.longitude = 25.0\n\n% Methods can be called in the same way as functions\nans = multiplyLatBy(a,3)\n\n% The method can also be called using dot notation. In this case, the object\n% does not need to be passed to the method.\nans = a.multiplyLatBy(1/3)\n\n% MATLAB functions can be overloaded to handle objects.\n% In the method above, we have overloaded how MATLAB handles\n% the addition of two Waypoint objects.\nb = WaypointClass(15.0, 32.0)\nc = a + b\n```\n\n## More on MATLAB\n\n* [The official website](http://www.mathworks.com/products/matlab/)\n* [The official MATLAB Answers forum](http://www.mathworks.com/matlabcentral/answers/)\n* [Loren on the Art of MATLAB](http://blogs.mathworks.com/loren/)\n* [Cleve's Corner](http://blogs.mathworks.com/cleve/)\n"
        },
        {
          "name": "mercurial.md",
          "type": "blob",
          "size": 9.62109375,
          "content": "---\ncategory: tool\nname: Mercurial\ncontributors:\n  - [\"Will L. Fife\", \"http://github.com/sarlalian\"]\nfilename: LearnMercurial.txt\n---\n\nMercurial is a free, distributed source control management tool. It offers\nyou the power to efficiently handle projects of any size while using an\nintuitive interface. It is easy to use and hard to break, making it ideal for\nanyone working with versioned files.\n\n## Versioning Concepts\n\n### What is version control?\n\nVersion control is a system that keeps track fo changes to a set of file(s)\nand/or directorie(s) over time.\n\n### Why use Mercurial?\n\n* Distributed Architecture - Traditionally version control systems such as CVS\nand Subversion are a client server architecture with a central server to\nstore the revision history of a project. Mercurial however is a truly\ndistributed architecture, giving each developer a full local copy of the\nentire development history. It works independently of a central server.\n* Fast - Traditionally version control systems such as CVS and Subversion are a\nclient server architecture with a central server to store the revision history\nof a project. Mercurial however is a truly distributed architecture, giving\neach developer a full local copy of the entire development history. It works\nindependently of a central server.\n* Platform Independent - Mercurial was written to be highly platform\nindependent. Much of Mercurial is written in Python, with small performance\ncritical parts written in portable C. Binary releases are available for all\nmajor platforms.\n* Extensible - The functionality of Mercurial can be increased with extensions,\neither by activating the official ones which are shipped with Mercurial or\ndownloading some [from the wiki](https://www.mercurial-scm.org/wiki/UsingExtensions) or by [writing your own](https://www.mercurial-scm.org/wiki/WritingExtensions). Extensions are written in\nPython and can change the workings of the basic commands, add new commands and\naccess all the core functions of Mercurial.\n* Easy to use - The Mercurial command set is consistent with what subversion\nusers would expect, so they are likely to feel right at home. Most dangerous\nactions are part of extensions that need to be enabled to be used.\n* Open Source - Mercurial is free software licensed under the terms of the [GNU\nGeneral Public License Version 2](http://www.gnu.org/licenses/gpl-2.0.txt) or\nany later version.\n\n## Terminology\n\n| Term | Definition |\n| ------------- | ---------------------------------- |\n| Repository | A repository is a collection of revisions |\n| hgrc | A configuration file which stores the defaults for a repository. |\n| revision | A committed changeset: has a REV number |\n| changeset | Set of changes saved as diffs |\n| diff | Changes between file(s) |\n| tag | A named named revision |\n| parent(s) | Immediate ancestor(s) of a revision |\n| branch | A child of a revision |\n| head | A head is a changeset with no child changesets |\n| merge | The process of merging two HEADS |\n| tip | The latest revision in any branch |\n| patch | All of the diffs between two revisions |\n| bundle | Patch with permis­sions and rename support |\n\n## Commands\n\n### init\n\nCreate a new repository in the given directory, the settings and stored\ninformation are in a directory named `.hg`.\n\n```bash\n$ hg init\n```\n\n### help\n\nWill give you access to a very detailed description of each command.\n\n```bash \n# Quickly check what commands are available\n$ hg help\n\n# Get help on a specific command\n# hg help <command>\n$ hg help add\n$ hg help commit\n$ hg help init\n```\n\n### status\n\nShow the differences between what is on disk and what is committed to the current\nbranch or tag.\n\n```bash\n# Will display the status of files\n$ hg status\n\n# Get help on the status subcommand\n$ hg help status\n```\n\n### add\n\nWill add the specified files to the repository on the next commit.\n\n```bash\n# Add a file in the current directory\n$ hg add filename.rb\n\n# Add a file in a sub directory\n$ hg add foo/bar/filename.rb\n\n# Add files by pattern\n$ hg add *.rb\n```\n\n### branch\n\nSet or show the current branch name.\n\n*Branch names are permanent and global. Use 'hg bookmark' to create a\nlight-weight bookmark instead. See 'hg help glossary' for more information\nabout named branches and bookmarks.*\n\n```bash\n# With no argument it shows the current branch name\n$ hg branch\n\n# With a name argument it will change the current branch.\n$ hg branch new_branch\nmarked working directory as branch new_branch\n(branches are permanent and global, did you want a bookmark?)\n```\n\n### tag\n\nAdd one or more tags for the current or given revision.\n\nTags are used to name particular revisions of the repository and are very\nuseful to compare different revisions, to go back to significant earlier\nversions or to mark branch points as releases, etc. Changing an existing tag\nis normally disallowed; use -f/--force to override.\n\n```bash\n# List tags\n$ hg tags\ntip                                2:efc8222cd1fb\nv1.0                               0:37e9b57123b3\n\n# Create a new tag on the current revision\n$ hg tag v1.1\n\n# Create a tag on a specific revision\n$ hg tag -r efc8222cd1fb v1.1.1\n```\n\n### clone\n\nCreate a copy of an existing repository in a new directory.\n\nIf no destination directory name is specified, it defaults to the basename of\nthe source.\n\n```bash\n# Clone a remote repo to a local directory\n$ hg clone https://some-mercurial-server.example.com/reponame\n\n# Clone a local repo to a remote server\n$ hg clone . ssh://username@some-mercurial-server.example.com/newrepo\n\n# Clone a local repo to a local repo\n$ hg clone . /tmp/some_backup_dir\n```\n\n### commit / ci\n\nCommit changes to the given files into the repository. \n\n```bash\n# Commit with a message\n$ hg commit -m 'This is a commit message'\n\n# Commit all added / removed files in the current tree\n$ hg commit -A 'Adding and removing all existing files in the tree'\n\n# amend the parent of the working directory with a new commit that contains the\n# changes in the parent in addition to those currently reported by 'hg status',\n$ hg commit --amend -m \"Correct message\"\n```\n\n### diff\n\nShow differences between revisions for the specified files using the unified\ndiff format.\n\n```bash\n# Show the diff between the current directory and a previous revision\n$ hg diff -r 10\n\n# Show the diff between two previous revisions\n$ hg diff -r 30 -r 20\n```\n\n### grep\n\nSearch revision history for a pattern in specified files.\n\n```bash\n# Search files for a specific phrase\n$ hg grep \"TODO:\"\n```\n\n### log / history\n\nShow revision history of entire repository or files. If no revision range is\nspecified, the default is \"tip:0\" unless --follow is set, in which case the\nworking directory parent is used as the starting revision.\n\n```bash\n# Show the history of the entire repository\n$ hg log\n\n# Show the history of a single file\n$ hg log myfile.rb\n\n# Show the revision changes as an ASCII art DAG with the most recent changeset\n# at the top.\n$ hg log -G\n```\n\n### merge\n\nMerge another revision into working directory.\n\n```bash\n# Merge changesets to local repository\n$ hg merge\n\n# Merge from a named branch or revision into the current local branch\n$ hg merge branchname_or_revision\n\n# After successful merge, commit the changes\nhg commit\n```\n\n### move / mv / rename\n\nRename files; equivalent of copy + remove. Mark dest as copies of sources;\nmark sources for deletion. If dest is a directory, copies are put in that\ndirectory. If dest is a file, there can only be one source.\n\n```bash\n# Rename a single file\n$ hg mv foo.txt bar.txt\n\n# Rename a directory\n$ hg mv some_directory new_directory\n```\n\n### pull\n\nPull changes from a remote repository to a local one.\n\n```bash\n# List remote paths\n$ hg paths\nremote1 = http://path/to/remote1\nremote2 = http://path/to/remote2\n\n# Pull from remote 1\n$ hg pull remote1\n\n# Pull from remote 2\n$ hg pull remote2\n```\n\n### push\n\nPush changesets from the local repository to the specified destination.\n\n```bash\n# List remote paths\n$ hg paths\nremote1 = http://path/to/remote1\nremote2 = http://path/to/remote2\n\n# Pull from remote 1\n$ hg push remote1\n\n# Pull from remote 2\n$ hg push remote2\n```\n\n### rebase\n\nMove changeset (and descendants) to a different branch.\n\nRebase uses repeated merging to graft changesets from one part of history\n(the source) onto another (the destination). This can be useful for\nlinearizing *local* changes relative to a master development tree.\n\n* Draft the commits back to the source revision.\n* -s is the source, ie. what you are rebasing.\n* -d is the destination, which is where you are sending it.\n\n```bash\n# Put the commits into draft status\n# This will draft all subsequent commits on the relevant branch\n$ hg phase --draft --force -r 1206\n\n# Rebase from from revision 102 over revision 208\n$ hg rebase -s 102 -d 208\n```\n\n### revert\n\nRestore files to their checkout state. With no revision specified, revert the\nspecified files or directories to the contents they had in the parent of the\nworking directory. This restores the contents of files to an unmodified state\nand unschedules adds, removes, copies, and renames. If the working directory\nhas two parents, you must explicitly specify a revision.\n\n```bash\n# Reset a specific file to its checked out state\n$ hg revert oops_i_did_it_again.txt\n\n# Revert a specific file to its checked out state without leaving a .orig file\n# around\n$ hg revert -C oops_i_did_it_again.txt\n\n# Revert all changes\n$ hg revert -a\n```\n\n### rm / remove\n\nRemove the specified files on the next commit.\n\n```bash\n# Remove a specific file\n$ hg remove go_away.txt\n\n# Remove a group of files by pattern\n$ hg remove *.txt\n```\n\n## Further information\n\n* [Learning Mercurial in Workflows](https://www.mercurial-scm.org/guide)\n* [Mercurial Quick Start](https://www.mercurial-scm.org/wiki/QuickStart)\n* [Mercurial: The Definitive Guide by Bryan O'Sullivan](http://hgbook.red-bean.com/)\n"
        },
        {
          "name": "mercury.md",
          "type": "blob",
          "size": 9.1572265625,
          "content": "---\nname: Mercury\ncontributors:\n    - [\"Julian Fondren\", \"https://mercury-in.space/\"]\n---\n\nMercury is a strict, pure functional/logic programming language, with\ninfluences from Prolog, ML, and Haskell.\n\n```prolog\n% Percent sign starts a one-line comment.\n\n    % foo(Bar, Baz)\n    %\n    % Documentation comments are indented before what they describe.\n:- pred foo(bar::in, baz::out) is det.\n\n% All toplevel syntax elements end with a '.' -- a full stop.\n\n% Mercury terminology comes from predicate logic. Very roughly:\n\n% | Mercury               | C                            |\n% |                       |                              |\n% | Goal                  | statement                    |\n% | expression            | expression                   |\n% | predicate rule        | void function                |\n% | function rule         | function                     |\n% | head (of a rule)      | function name and parameters |\n% | body (of a rule)      | function body                |\n% | fact                  | (rule without a body)        |\n% | pred/func declaration | function signature           |\n% | A, B  (conjunction)   | A && B                       |\n% | A ; B (disjunction)   | if (A) {} else if (B) {}     |\n\n% some facts:\nman(socrates).  % \"it is a fact that Socrates is a man\"\nman(plato).\nman(aristotle).\n\n% a rule:\nmortal(X) :- man(X).  % \"It is a rule that X is a mortal if X is a man.\"\n%            ^^^^^^-- the body of the rule\n%         ^^-- an arrow <--, pointing to the head from the body\n%^^^^^^^^-- the head of the rule\n% this is also a single clause that defines the rule.\n\n% that X is capitalized is how you know it's a variable.\n% that socrates is uncapitalized is how you know it's a term.\n\n% it's an error for 'socrates' to be undefined. It must have a type:\n\n% declarations begin with ':-'\n:- type people\n    --->    socrates\n    ;       plato\n    ;       aristotle\n    ;       hermes.\n    %<--first tab stop (using 4-space tabs)\n            %<--third tab stop (first after --->)\n\n:- pred man(people).  % rules and facts also require types\n\n% a rule's modes tell you how it can be used.\n:- mode man(in) is semidet.  % man(plato) succeeds. man(hermes) fails.\n:- mode man(out) is multi.   % man(X) binds X to one of socrates ; plato ; aristotle\n\n% a semidet predicate is like a test. It doesn't return a value, but\n% it can succeed or fail, triggering backtracking or the other side of\n% a disjunction or conditional.\n\n% 'is semidet' provides the determinism of a mode. Other determinisms:\n% | Can fail? | 0 solutions | 1       | more than 1 |\n% |           |             |         |             |\n% | no        | erroneous   | det     | multi       |\n% | yes       | failure     | semidet | nondet      |\n\n:- pred mortal(people::in) is semidet.  % type/mode in one declaration\n\n% this rule's body consists of two conjunctions: A, B, C\n% this rule is true if A, B, and C are all true.\n% if age(P) returns 16, it fails.\n% if alive(P) fails, it fails.\n:- type voter(people::in) is semidet.\nvoter(P) :-\n    alive(P),\n    registered(P, locale(P)),\n    age(P) >= 18.  % age/1 is a function; int.>= is a function used as an operator\n\n% \"a P is a voter if it is alive, is registered in P's locale, and if\n% P's age is 18 or older.\"\n\n% the >= used here is provided by the 'int' module, which isn't\n% imported by default. Mercury has a very small 'Prelude' (the\n% 'builtin' module). You even need to import the 'list' module if\n% you're going to use list literals.\n```\n\nComplete runnable example. File in 'types.m'; compile with 'mmc --make types'.\n\n```prolog\n:- module types.\n:- interface.\n:- import_module io.  % required for io.io types in...\n% main/2 is usually 'det'. threading and exceptions require 'cc_multi'\n:- pred main(io::di, io::uo) is cc_multi.  % program entry point\n:- implementation.\n:- import_module int, float, string, list, bool, map, exception.\n\n% enum.\n:- type days\n    --->    sunday\n    ;       monday\n    ;       tuesday\n    ;       wednesday\n    ;       thursday\n    ;       friday\n    ;       saturday.\n\n% discriminated union, like datatype in ML.\n:- type payment_method\n    --->    cash(int)\n    ;       credit_card(\n                name :: string,         % named fields\n                cc_number :: string,\n                cvv :: int,\n                expiration :: string\n            )\n    ;       crypto(coin_type, wallet, amount).\n\n:- type coin_type\n    --->    etherium\n    ;       monero.  % \"other coins are available\"\n\n% type aliases.\n:- type wallet == string.\n:- type amount == int.\n\n% !IO is the pair of io.io arguments\n% pass it to anything doing I/O, in order to perform I/O.\n% many otherwise-impure functions can 'attach to the I/O state' by taking !IO\nmain(!IO) :-\n    Ints = [\n        3,\n        1 + 1,\n        8 - 1,\n        10 * 2,\n        35 / 5,\n        5 / 2,      % truncating division\n        int.div(5, 2),  % floored division\n        div(5, 2),  % (module is unambiguous due to types)\n        5 `div` 2,  % (any binary function can be an operator with ``)\n        7 `mod` 3,  % modulo of floored division\n        7 `rem` 3,  % remainder of truncating division\n        2 `pow` 4,  % 2 to the 4th power\n        (1 + 3) * 2,    % parens have their usual meaning\n\n        2 >> 3,     % bitwise right shift\n        128 << 3,   % bitwise left shift\n        \\ 0,        % bitwise complement\n        5 /\\ 1,     % bitwise and\n        5 \\/ 1,     % bitwise or\n        5 `xor` 3,  % bitwise xor\n\n        max_int,\n        min_int,\n\n        5 `min` 3,  % ( if 5 > 3 then 3 else 5 )\n        5 `max` 3\n    ],\n    Bools = [\n        yes,\n        no\n        % bools are much less important in Mercury because control flow goes by\n        % semidet goals instead of boolean expressions.\n    ],\n    Strings = [\n        \"this is a string\",\n        \"strings can have \"\" embedded doublequotes via doubling\",\n        \"strings support \\u4F60\\u597D the usual escapes\\n\",\n        % no implicit concatenation of strings: \"concat:\" \"together\"\n        \"but you can \" ++ \" use the string.++ operator\",\n\n        % second param is a list(string.poly_type)\n        % s/1 is a function that takes a string and returns a poly_type\n        % i/1 takes an int. f/1 takes a float. c/1 takes a char.\n        string.format(\"Hello, %d'th %s\\n\", [i(45), s(\"World\")])\n    ],\n\n    % start with purely functional types like 'map' and 'list'!\n    % arrays and hash tables are available too, but using them\n    % requires knowing a lot more about Mercury\n    get_map1(Map1),\n    get_map2(Map2),\n\n    % list.foldl has *many* variations\n    % this one calls io.print_line(X, !IO) for each X of the list\n    foldl(io.print_line, Ints, !IO),\n    foldl(io.print_line, Bools, !IO),\n    foldl(io.print_line, Strings, !IO),\n    io.print_line(Map1, !IO),\n    % ( if Cond then ThenGoal else ElseGoal )\n    % I/O not allowed in Cond: I/O isn't allowed to fail!\n    ( if Map2^elem(42) = Elem then\n        io.print_line(Elem, !IO)\n    else % always required\n        true  % do nothing, successfully (vs. 'fail')\n    ),\n\n    % exception handling:\n    ( try [io(!IO)] ( % io/1 param required or no I/O allowed here\n        io.print_line(received(cash(1234)), !IO),\n        io.print_line(received(crypto(monero, \"invalid\", 123)), !IO)\n    ) then\n        io.write_string(\"all payments accepted\\n\", !IO) % never reached\n    catch \"monero not yet supported\" -> % extremely specific catch!\n        io.write_string(\"monero payment failed\\n\", !IO)\n    ).\n\n:- pred get_map1(map(string, int)::out) is det.\nget_map1(!:Map) :-  % !:Map in the head is the final (free, unbound) Map\n    !:Map = init,   % !:Map in the body is the next Map\n    det_insert(\"hello\", 1, !Map),  % pair of Map vars\n    det_insert(\"world\", 2, !Map),\n\n    % debug print of current (bound) Map\n    % other [Params] can make it optional per runtime or compiletime flags\n    trace [io(!IO)] (io.print_line(!.Map, !IO)),\n\n    det_insert_from_corresponding_lists(K, V, !Map),\n    % this code is reordered so that K and V and defined prior to their use\n    K = [\"more\", \"words\", \"here\"],\n    V = [3, 4, 5].\n\n:- pred get_map2(map(int, bool)::out) is det.\nget_map2(Map) :-\n    det_insert(42, yes, map.init, Map).\n\n:- func received(payment_method) = string.\nreceived(cash(N)) = string.format(\"received %d dollars\", [i(N)]).\nreceived(credit_card(_, _, _, _)) = \"received credit card\".  % _ is throwaway\nreceived(crypto(Type, _Wallet, Amount)) = S :-  % _Wallet is named throwaway\n    ( % case/switch structure\n        Type = etherium,\n        S = string.format(\"receiving %d ETH\", [i(Amount)])\n    ;\n        Type = monero,\n        throw(\"monero not yet supported\")  % exception with string as payload\n    ).\n```\n\n## That was quick! Want more?\n\n### More Tutorials\n\n* [Mercury Tutorial](https://mercurylang.org/documentation/papers/book.pdf) (pdf link) - a more traditional tutorial with a more relaxed pace\n* [Mercury Crash Course](https://mercury-in.space/crash.html) - a dense example-driven tutorial with Q&A format\n* [GitHub Wiki Tutorial](https://github.com/Mercury-Language/mercury/wiki/Tutorial)\n* [Getting Started with Mercury](https://bluishcoder.co.nz/2019/06/23/getting-started-with-mercury.html) - installation and your first steps\n  \n### Documentation\n\n* Language manual, user's guide, and library reference are all at\n  [mercurylang.org](https://mercurylang.org/documentation/documentation.html)\n"
        },
        {
          "name": "messagepack.md",
          "type": "blob",
          "size": 4.41015625,
          "content": "---\ncategory: framework\nname: MessagePack\nfilename: learnmessagepack.mpac\ncontributors:\n  - [\"Gabriel Chuan\", \"https://github.com/gczh\"]\n---\n\nMessagePack is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. The benefits over other formats is that it's faster and smaller. \n\nIn MessagePack, small integers are encoded into a single byte, and typical short strings require only one extra byte in addition to the strings themselves. This makes MessagePack useful for efficient transmission over wire.\n\n```\n# 0. Understanding The Structure ====\n\nJSON, 40 Bytes UTF-8\n\t\n----------------------------------------------\n| {\"name\":\"John Doe\",\"age\":12}\t\t         |\n----------------------------------------------\n|  {\"         | 7B 22                        |\n|    name     | 6E 61 6D 65                  |\n|  \":\"        | 22 3A 22                     |\n|    John Doe | 4A 6F 68 6E 20 44 6F 65      |\n|  \",\"        | 22 2C 22                     |\n|    age      | 61 67 65                     |\n|  \":         | 22 3A 20                     |\n|    12       | 31 32                        |\n|  }          | 7D                           |\n----------------------------------------------\n\n\nMessagePack, 27 Bytes UTF-8\n\t\n----------------------------------------------\n| ‚¤name¨John Doe£age.12                     |\n----------------------------------------------\n|  ‚¤         | 82 84                        |\n|    name     | 6E 61 6D 65                  |\n|  ¨          | A8                           |\n|    John Doe | 4A 6F 68 6E 20 44 6F 65      |\n|  £          | A3                           |\n|    age      | 61 67 65                     |\n|  .          | 0C                           |\n|    12       | 31 32                        |\n----------------------------------------------\n\n# 1. JAVA ====\n\n\"\"\" Installing with Maven\n\"\"\"\n\n<dependencies>\n  ...\n  <dependency>\n    <groupId>org.msgpack</groupId>\n    <artifactId>msgpack</artifactId>\n    <version>${msgpack.version}</version>\n  </dependency>\n  ...\n</dependencies>\n\n\n\"\"\" Simple Serialization/Deserialization\n\"\"\"\n\n// Create serialize objects.\nList<String> src = new ArrayList<String>();\nsrc.add(\"msgpack\");\nsrc.add(\"kumofs\");\n\nMessagePack msgpack = new MessagePack();\n// Serialize\nbyte[] raw = msgpack.write(src);\n\n// Deserialize directly using a template\nList<String> dst1 = msgpack.read(raw, Templates.tList(Templates.TString));\nSystem.out.println(dst1.get(0));\nSystem.out.println(dst1.get(1));\n\n// Or, Deserialze to Value then convert type.\nValue dynamic = msgpack.read(raw);\nList<String> dst2 = new Converter(dynamic)\n    .read(Templates.tList(Templates.TString));\nSystem.out.println(dst2.get(0));\nSystem.out.println(dst2.get(1));\n\n\n# 2. RUBY ====\n\n\"\"\" Installing the Gem\n\"\"\"\n\ngem install msgpack\n\n\"\"\" Streaming API\n\"\"\"\n\n# serialize a 2-element array [e1, e2]\npk = MessagePack::Packer.new(io)\npk.write_array_header(2).write(e1).write(e2).flush\n\n# deserialize objects from an IO\nu = MessagePack::Unpacker.new(io)\nu.each { |obj| ... }\n\n# event-driven deserialization\ndef on_read(data)\n  @u ||= MessagePack::Unpacker.new\n  @u.feed_each(data) { |obj| ... }\nend\n\n# 3. NODE.JS ====\n\n\"\"\" Installing with NPM\n\"\"\"\n\nnpm install msgpack5 --save\n\n\"\"\" Using in Node\n\"\"\"\n\nvar msgpack = require('msgpack5')() // namespace our extensions\n  , a       = new MyType(2, 'a')\n  , encode  = msgpack.encode\n  , decode  = msgpack.decode\n\nmsgpack.register(0x42, MyType, mytipeEncode, mytipeDecode)\n\nconsole.log(encode({ 'hello': 'world' }).toString('hex'))\n// 81a568656c6c6fa5776f726c64\nconsole.log(decode(encode({ 'hello': 'world' })))\n// { hello: 'world' }\nconsole.log(encode(a).toString('hex'))\n// d5426161\nconsole.log(decode(encode(a)) instanceof MyType)\n// true\nconsole.log(decode(encode(a)))\n// { value: 'a', size: 2 }\n\nfunction MyType(size, value) {\n  this.value = value\n  this.size  = size\n}\n\nfunction mytipeEncode(obj) {\n  var buf = new Buffer(obj.size)\n  buf.fill(obj.value)\n  return buf\n}\n\nfunction mytipeDecode(data) {\n  var result = new MyType(data.length, data.toString('utf8', 0, 1))\n    , i\n\n  for (i = 0; i < data.length; i++) {\n    if (data.readUInt8(0) != data.readUInt8(i)) {\n      throw new Error('should all be the same')\n    }\n  }\n\n  return result\n}\n```\n\n\n# References\n\n- [MessagePack](http://msgpack.org/index.html)\n- [MsgPack vs. JSON: Cut your client-server exchange traffic by 50% with one line of code](http://indiegamr.com/cut-your-data-exchange-traffic-by-up-to-50-with-one-line-of-code-msgpack-vs-json/)\n"
        },
        {
          "name": "miniscript.md",
          "type": "blob",
          "size": 15.2119140625,
          "content": "---\nname: MiniScript\ncontributors:\n    - [\"Joe Strout\", \"https://github.com/JoeStrout\"]\nfilename: miniscript.ms\n---\n\n**MiniScript** is a simple scripting language designed to be easily embedded in games and other software. It can also be used on the command line, or as a cross-platform game development environment via [Soda](https://github.com/JoeStrout/soda) or [Mini Micro](https://miniscript.org/MiniMicro).\n\nAn easy way to get started with MiniScript is on the [Try-It! page](https://miniscript.org/tryit/), which runs MiniScript code on the server. Note however that the code on this page is limited to 2000 characters. (The tutorial scripts below are broken up into blocks 2048 characters or less so they will run on the Try-It! page.)\n\nOnce you are ready to go beyond the Try-It! page, your next stop should probably be to download [Mini Micro](https://miniscript.org/MiniMicro), a free virtual computer that uses MiniScript both on the command line and in programs. In that environment, enter **edit** at the prompt to edit code, then click the Run button in the editor to run it.\n\n```\nprint \"Hello world\"\n\n// MiniScript is very syntax-light. Notice that no parentheses are\n// needed on the print statement above. Comments begin with //, and\n// extend to the end of the line. MiniScript is case-sensitive.\n\n// CONTROL FLOW\n// Use if blocks to do different things depending on some condition.\n// Include zero or more else if blocks, and one optional else block.\nif 2+2 == 4 then\n   print \"math works!\"\nelse if pi > 3 then\n   print \"pi is tasty\"\nelse if \"a\" < \"b\" then\n   print \"I can sort\"\nelse\n   print \"last chance\"\nend if\n\n// LOOPING\n// MiniScript has only two loop constructs: while loops and for loops.\n// Use a while block to loop as long as a condition is true.\ns = \"Spam\"\nwhile s.len < 50\n    s = s + \", spam\"\nend while\nprint s + \" and spam!\"\n\n// A for loop can loop over any list, including ones easily created\n// with the range function.\nfor i in range(10, 1)\n    print i + \"...\"\nend for\nprint \"Liftoff!\"\n\n// Two additional keywords are useful inside loops. The break statement\n// jumps out of the nearest while or for loop. The continue statement\n// jumps to the top of the loop, skipping the rest of the current iteration.\nfor i in range(1,100)\n    if i % 3 == 0 then continue  // skip multiples of 3\n    if i^2 > 200 then break  // stop when i^2 is over 200\n    print i + \" squared is \" + i^2\nend for\n```\n\n### Numbers\n\n```\n// All numbers are stored in full-precision format. Numbers also\n// represent true (1) and false (0), and there are built-in keywords\n// (true and false) for those.\na = 7\nb = 3\nultimateAnswer = 42\npi = 3.14159\nn = true\nm = false\nprint ultimateAnswer + \", \" + pi + \", \" + n + \", \" + m\n\n// Numbers support the following operators:\nprint \"Basic math:\"\nprint a + b     // addition\nprint a - b     // subtraction\nprint a * b     // multiplication\nprint a / b     // division\nprint a % b     // modulo (remainder)\nprint a ^ b     // power\n\nprint \"Logic:\"\nprint n and m   // logical \"and\"\nprint n or m    // logical \"or\"\nprint not n     // logical negation\n\nprint \"Comparisons:\"\nprint a == b    // equality test (note == rather than = here!)\nprint a != b    // inequality\nprint a > b     // greater than\nprint a >= b    // greater than or equal\nprint a < b     // less than\nprint a <= b    // less than or equal\n```\n\n### Strings\n\n```\n// Text is stored in strings of Unicode characters. Write strings\n// by surrounding them with quotes. If you need to include a\n// quotation mark in a string, type it twice.\nprint \"Hello, \"\"Bob\"\".\"\na = \"Hello\"\nb = \"Spam\"\n\n// Strings support the following operators:\nprint \"String \"\"math\"\":\"\nprint a + b     // string concatenation\nprint b - \"m\"   // string subtraction (chop)\nprint b * 4     // string replication\nprint a / 2     // string division\n\nprint \"Comparisons:\"\nprint a == b    // equality test (note == rather than = here!)\nprint a != b    // inequality\nprint a > b     // greater than\nprint a >= b    // greater than or equal\nprint a < b     // less than\nprint a <= b    // less than or equal\n\n// Indexing and slicing in a string is done with an index (or two)\n// in square brackets. Use a 0-based index to count from the front,\n// or a negative index to count from the end. Get a slice (substring)\n// with two indices, separated by a colon. Either one may be omitted\n// to extend the slice to the beginning or end of the string.\nprint \"Indexing and slicing:\"\nprint a[0]      // get a character, starting with 0 (\"H\")\nprint a[1]      // get second character (\"e\")\nprint a[-1]     // negative numbers count from the end (\"o\")\nprint a[1:4]    // get slice from 1 up to (but not including) 4 (\"ell\")\nprint a[1:-1]   // same as above, but using a negative index\nprint a[1:]     // get slice from 1 to the end (\"ello\")\nprint a[:2]     // get slice from beginning up to 2 (\"He\")\n\n// Note that strings in MiniScript are immutable. You can't reach\n// into a string and change what characters it contains (but you can\n// always create a new string with different characters).\n```\n\n### Lists\n\n```\n// A list is an ordered sequence of values of any type. You can\n// iterate over a list with a for loop, or iterate over the indexes\n// using .indexes.\nx = [\"alpha\", \"beta\", \"gamma\", \"delta\"]\nfor item in x\n    print item\nend for\nfor i in x.indexes\n    print \"x[\" + i + \"] is \" + x[i]\nend for\n\n// Indexing and slicing in a list is exactly like a string: use a\n// 0-based index to count from the front, or a negative number to\n// count from the end. Get a slice (subset) of a list with two\n// indices, separated by a colon. Either one may be omitted\n// to extend the slice to the beginning or end of the list.\nprint x[0]      // alpha\nprint x[-1]     // delta\nprint x[1:3]    // [beta, gamma]\nprint x[2:]     // [gamma, delta]\nprint x[:-1]    // [alpha, beta, gamma]\n\n// Lists support the following operators:\ny = [\"a\", \"be\", \"ce\", \"de\"]\nprint \"List \"\"math\"\":\"\nprint x + y     // list concatenation\nprint y * 3     // list replication\nprint x / 2     // list division\n\nprint \"Comparisons:\"\nprint x == y    // equality test (note == rather than = here!)\nprint x != y    // inequality\n```\n\n### Maps\n\n```\n// A map is a set of values associated with unique keys. Maps\n// are an extremely powerful and versatile data type, used to\n// represent data records, objects, sparse arrays, and much more.\n// Create a map with curly braces; get or set a single value\n// with square brackets. Keys and values may be any type.\n// (\"Key\" and \"index\" mean the same thing in the context of a map.)\nm = {1:\"one\", 2:\"two\"}\nprint m[1]      // one\nm[2] = \"dos\"    // change the value associated with index 2\nprint m[2]      // dos\n\n// In the special case where the key (index) is a string that\n// would be a valid variable name, there is an alternate to the\n// square-bracket syntax called dot syntax. Just put the key,\n// without quotes, after the map and a dot (period).\nm.pi = 3.14     // equivalent to: m[\"pi\"] = 3.14\nprint m[\"pi\"]   // 3.14\nm[\"e\"] = 2.72   // equivalent to: m.e = 2.72\nprint m.e       // 2.72\n\n// Maps support only the + operator, which combines all the key/value\n// pairs from two maps into one.\nm1 = {1:\"one\", 2:\"two\"}\nm2 = {2:\"dos\", 3:\"tres\"}\nprint m1 + m2   // map concatenation\n\n// You can iterate over the key/value pairs in a map with a for loop.\n// On each iteration, the variable will be itself a little map with\n// \"key\" and \"value\" indexes.\nfor kv in m1+m2\n    print kv.key + \" -> \" + kv.value\nend for\n\n// Note that the order of key/value pairs in a map is undefined.\n// You should never rely on them appearing in a particular order\n// when you print or iterate over a map.\n```\n\n### Functions\n\n```\n// Create a function in miniscript with a function...end function\n// block. In most cases you will assign the result to a variable\n// so you can call it later. If a function needs to return a\n// a result, do that with the return keyword.\nrollDie = function\n    return ceil(rnd * 6)  // return a random number from 1-6\nend function\nprint rollDie\nprint rollDie\n\n// If it needs parameters, put them after function keyword inside\n// parentheses. Parameters may have default values.\nroll = function(numberOfDice, sides=6)\n    sum = 0\n    for i in range(1, numberOfDice)\n        sum = sum + ceil(rnd * sides)\n    end for\n    return sum\nend function\nprint roll(2)     // roll two 6-sided dice\nprint roll(2,20)  // roll two 20-sided dice\n\n// Variables are always local by default in MiniScript. The\n// variables i and sum in the function above are not accessible\n// outside the function, and disappear as soon as the function\n// returns. (We'll talk more about variable scope later.)\n\n// Parentheses are needed only if (1) you're passing arguments\n// (parameter values) to the function, and (2) you're using the\n// result as part of some larger statement. Notice how the first\n// example above, rollDie did not need any parentheses because we\n// weren't passing any arguments. Here's an example of a function\n// that, like the built-in print function, is used as a statement\n// by itself, and so does not need parentheses.\ndoRoll = function(numberOfDice, sides=6)\n    print \"Rolling \" + numberOfDice + \"d\" + sides + \"...\"\n    sum = 0\n    for i in range(1, numberOfDice)\n        roll = ceil(rnd * sides)\n        print \"You rolled a \" + roll + \".\"\n        sum = sum + roll\n    end for\n    print \"Your total is: \" + sum\nend function\ndoRoll 3         // roll 3d6 -- note no parentheses needed\ndoRoll 3, 8      // same here, but rolling 3d6\n\n// If you ever need to refer to a function without invoking it,\n// you can do so with the @ operator.\nf = @doRoll      // makes f refer to the same function as doRoll\nf 2,4            // rolls 2d4\n```\n\n### Classes and Objects\n\n```\n// MiniScript uses prototype-based inheritance. A class or object\n// is just a map with a special __isa entry that points to the\n// parent class. This is set automatically when you use the new\n// operator.\nShape = {}            // make a base class\nShape.sides = 0       // give it 0 sides by default\n\nSquare = new Shape    // make a subclass of Shape called Square\nSquare.sides = 4      // override the number of sides\n\nx = new Square        // create an instance of the Square class\nprint x.sides         // 4, because x is a Square and Square.sides is 4\n\n// A method is just a function stored in a class (map). These\n// are inherited through the __isa chain, just like other values.\n// Within a method, the keyword self refers to the object on which\n// the method was invoked (using dot syntax). This is how you\n// refer to data or methods on the object.\nShape.describe = function\n    print\n    print \"This is a \" + self.sides + \"-sided shape.\"\nend function\nx.describe            // This is a 4-sided shape.\n\n// Methods may be overridden (again just like values). In a\n// subclass/instance method, you may use super to invoke the next\n// version of the method up the inheritance chain, while still\n// keeping self bound to the object this method was called on.\nSquare.describe = function\n    super.describe    // first, do the standard description\n    print \"It looks very squarish.\"  // then add this\nend function\nx.describe\n```\n\n### More on Variable Scope\n\n```\n// Variables assignments in MiniScript always create or update\n// a local variable, i.e., one that exists only within the function\n// containing the assignment, unless dot syntax is used to specify\n// some other scope.\nx = 42      // here's a global variable called x\nf = function\n    x = 1234   // make a local variable, also called x\n    print \"Inside the function, x is now \" + x\nend function\nf\nprint \"Outside the function, x is \" + x\n\n// In the example above, the assignment to x inside the function\n// has no effect on the global value of x, even though they happen\n// to have the same name. (This is a Good Thing because it helps\n// you avoid unintended side-effects in your code.)  Global variables\n// are generally discouraged, but if you must update one inside\n// a function, you can use a \"globals.\" prefix to do so.\nf = function\n    print \"Using the globals prefix...\"\n    globals.x = 1234   // update the global variable x\n    print \"Inside the function, x is now \" + x\nend function\nf\nprint \"Outside the function, x is \" + x\n\n// This is very similar to the \"self.\" prefix used with\n// class methods; in both cases, you are giving a more specific\n// scope to a variable (which is really just specifying a map\n// to index into with dot syntax).\n\n// However there is an important difference: when READING (not\n// assigning to) a variable, if the variable name is not found\n// among the local variables, MiniScript will automatically look\n// for a global variable of that name. Thus no \"globals.\" prefix\n// is needed when reading a variable, but only when assigning it.\ncount = 0\naddToCount = function(amount=1)\n    globals.count = count + amount\nend function\naddToCount\naddToCount\nprint \"count is now: \" + count\n\n// In the addToCount function above, note how we need the globals\n// prefix on the left-hand side of the assignment, since otherwise\n// it would create a local variable. But we don't need it on the\n// right-hand side, where we are merely reading the global value.\n```\n\n### Handy Intrinsic Methods\n\n```\n// Intrinsic methods are ones that are built into MiniScript or its\n// environment. Particular MiniScript environments (e.g. Mini Micro,\n// Soda, command-line MiniScript, some game using MiniScript as an\n// embedded language, etc.) will probably add additional intrinsics.\n// But there is a core of about 50 intrinsics that should always be\n// available.\n\n// Here's a quick demo of some of the most commonly used ones.\nprint abs(-42)         // absolute value\nprint pi               // get value of pi (yep, this is built in!)\nprint cos(pi)          // cosine\nprint sqrt(100)        // square root\nprint round(pi, 2)     // round (to 2 decimal places)\nprint char(65)         // get Unicode character 65\n\nprint\ns = \"Hello world!\"\nprint s.upper          // convert to upper case\nprint s.len            // get length (number of characters)\nprint s.replace(\"Hello\", \"Heya\")  // string substitution\nprint s.split(\" \")     // split on spaces to make a list\nprint s.remove(\"l\")    // remove first occurrence of \"l\"\n\nprint\na = range(2,15,3)      // make a list: 2 through 10, in steps of 3\nprint \"a: \" + a\nprint \"a.len:\" + a.len // get length (number of values)\nprint \"a.sum:\" + a.sum // get sum of adding all values together\nprint a.pop            // pop off the last value\nprint a.pull           // pull off the first value\nprint \"popped and pulled: \" + a\na.push 99              // push a new item onto the end\na.insert 0, 101        // insert a new item at index 0\nprint \"after push and insert: \" + a\na.remove 2             // remove index 2 from the list\nprint \"after remove 2: \" + a\ns = a.join(\"#\")        // make a string by joining values with #\nprint s\n\nprint\nm = {\"one\": \"uno\", \"two\": \"dos\", \"three\": \"tres\"}\nprint m.hasIndex(\"one\") // check whether a key exists\nprint m.indexes         // get all the indexes\nprint m.values          // get all the values\nm.remove \"two\"          // remove an index (and its value)\nprint m\n```\n\n## Further Reading\n\n* [MiniScript.org website](https://miniscript.org/) — center of the MiniScript universe\n* [MiniScript Quick Reference](https://miniscript.org/files/MiniScript-QuickRef.pdf) — this tutorial, in one page\n* [MiniScript User's Manual](https://miniscript.org/files/MiniScript-Manual.pdf) — more in-depth documentation\n* [MiniScript Wiki](https://miniscript.org/wiki/) — community-driven documentation\n"
        },
        {
          "name": "mips.md",
          "type": "blob",
          "size": 15.3623046875,
          "content": "---\nname: \"MIPS Assembly\"\nfilename: MIPS.asm\ncontributors:\n  - [\"Stanley Lim\", \"https://github.com/Spiderpig86\"]\n---\n\nThe MIPS (Microprocessor without Interlocked Pipeline Stages) Assembly language\nis designed to work with the MIPS microprocessor paradigm designed by J. L. \nHennessy in 1981. These RISC processors are used in embedded systems such as \ngateways and routers.\n\n[Read More](https://en.wikipedia.org/wiki/MIPS_architecture)\n\n```asm\n# Comments are denoted with a '#'\n\n# Everything that occurs after a '#' will be ignored by the assembler's lexer.\n\n# Programs typically contain a .data and .text sections\n\n.data # Section where data is stored in memory (allocated in RAM), similar to\n      # variables in higher-level languages\n\n  # Declarations follow a ( label: .type value(s) ) form of declaration\n  hello_world: .asciiz \"Hello World\\n\"      # Declare a null terminated string\n  num1: .word 42                            # Integers are referred to as words\n                                            # (32-bit value)\n\n  arr1: .word 1, 2, 3, 4, 5                 # Array of words\n  arr2: .byte 'a', 'b'                      # Array of chars (1 byte each)\n  buffer: .space 60                         # Allocates space in the RAM \n                                            # (not cleared to 0)\n\n  # Datatype sizes\n  _byte: .byte 'a'                          # 1 byte\n  _halfword: .half 53                       # 2 bytes\n  _word: .word 3                            # 4 bytes\n  _float: .float 3.14                       # 4 bytes\n  _double: .double 7.0                      # 8 bytes\n\n  .align 2                                  # Memory alignment of data, where\n                                            # number indicates byte alignment\n                                            # in powers of 2. (.align 2\n                                            # represents word alignment since\n                                            # 2^2 = 4 bytes)\n\n.text                                       # Section that contains \n                                            # instructions and program logic\n.globl _main                                # Declares an instruction label as\n                                            # global, making it accessible to\n                                            # other files\n\n  _main:                                    # MIPS programs execute \n                                            # instructions sequentially, where \n                                            # the code under this label will be\n                                            # executed first\n\n    # Let's print \"hello world\"\n    la $a0, hello_world                     # Load address of string stored\n                                            # in memory\n    li $v0, 4                               # Load the syscall value (number\n                                            # indicating which syscall to make)\n    syscall                                 # Perform the specified syscall\n                                            # with the given argument ($a0)\n\n    # Registers (used to hold data during program execution)\n    # $t0 - $t9                             # Temporary registers used for \n                                            # intermediate calculations inside \n                                            # subroutines (not saved across \n                                            # function calls)\n\n    # $s0 - $s7                             # Saved registers where values are \n                                            # saved across subroutine calls. \n                                            # Typically saved in stack\n\n    # $a0 - $a3                             # Argument registers for passing in \n                                            # arguments for subroutines\n    # $v0 - $v1                             # Return registers for returning \n                                            # values to caller function\n\n    # Types of load/store instructions\n    la $t0, label                           # Copy the address of a value in\n                                            # memory specified by the label\n                                            # into register $t0\n    lw $t0, label                           # Copy a word value from memory\n    lw $t1, 4($s0)                          # Copy a word value from an address\n                                            # stored in a register with an\n                                            # offset of 4 bytes (addr + 4)\n    lb $t2, label                           # Copy a byte value to the \n                                            # lower order portion of \n                                            # the register $t2\n    lb $t2, 0($s0)                          # Copy a byte value from the source\n                                            # address in $s0 with offset 0\n    # Same idea with 'lh' for halfwords\n\n    sw $t0, label                           # Store word value into\n                                            # memory address mapped by label\n    sw $t0, 8($s0)                          # Store word value into address \n                                            # specified in $s0 and offset of\n                                            # 8 bytes\n    # Same idea using 'sb' and 'sh' for bytes and halfwords. 'sa' does not exist\n\n### Math ###\n  _math:\n    # Remember to load your values into a register\n    lw $t0, num                             # From the data section\n    li $t0, 5                               # Or from an immediate (constant)\n    li $t1, 6\n    add $t2, $t0, $t1                       # $t2 = $t0 + $t1\n    sub $t2, $t0, $t1                       # $t2 = $t0 - $t1\n    mul $t2, $t0, $t1                       # $t2 = $t0 * $t1\n    div $t2, $t0, $t1                       # $t2 = $t0 / $t1 (Might not be \n                                            # supported in some versions of MARS)\n    div $t0, $t1                            # Performs $t0 / $t1. Get the \n                                            # quotient using 'mflo' and \n                                            # remainder using 'mfhi'\n\n    # Bitwise Shifting\n    sll $t0, $t0, 2                         # Bitwise shift to the left with \n                                            # immediate (constant value) of 2\n    sllv $t0, $t1, $t2                      # Shift left by a variable amount\n                                            # in register\n    srl $t0, $t0, 5                         # Bitwise shift to the right (does \n                                            # not sign preserve, sign-extends \n                                            # with 0)\n    srlv $t0, $t1, $t2                      # Shift right by a variable amount \n                                            # in a register\n    sra $t0, $t0, 7                         # Bitwise arithmetic shift to  \n                                            # the right (preserves sign)\n    srav $t0, $t1, $t2                      # Shift right by a variable amount \n                                            # in a register\n\n    # Bitwise operators\n    and $t0, $t1, $t2                       # Bitwise AND\n    andi $t0, $t1, 0xFFF                    # Bitwise AND with immediate\n    or $t0, $t1, $t2                        # Bitwise OR\n    ori $t0, $t1, 0xFFF                     # Bitwise OR with immediate\n    xor $t0, $t1, $t2                       # Bitwise XOR\n    xori $t0, $t1, 0xFFF                    # Bitwise XOR with immediate\n    nor $t0, $t1, $t2                       # Bitwise NOR\n\n## BRANCHING ##\n  _branching:\n    # The basic format of these branching instructions typically follow <instr>\n    # <reg1> <reg2> <label> where label is the label we want to jump to if the\n    # given conditional evaluates to true\n    # Sometimes it is easier to write the conditional logic backward, as seen\n    # in the simple if statement example below\n\n    beq $t0, $t1, reg_eq                    # Will branch to reg_eq if\n                                            # $t0 == $t1, otherwise\n                                            # execute the next line\n    bne $t0, $t1, reg_neq                   # Branches when $t0 != $t1\n    b branch_target                         # Unconditional branch, will \n                                            # always execute\n    beqz $t0, req_eq_zero                   # Branches when $t0 == 0\n    bnez $t0, req_neq_zero                  # Branches when $t0 != 0\n    bgt $t0, $t1, t0_gt_t1                  # Branches when $t0 > $t1\n    bge $t0, $t1, t0_gte_t1                 # Branches when $t0 >= $t1\n    bgtz $t0, t0_gt0                        # Branches when $t0 > 0\n    blt $t0, $t1, t0_gt_t1                  # Branches when $t0 < $t1\n    ble $t0, $t1, t0_gte_t1                 # Branches when $t0 <= $t1\n    bltz $t0, t0_lt0                        # Branches when $t0 < 0\n    slt $s0, $t0, $t1                       # \"Set on Less Than\"\n                                            # when $t0 < $t1 with result in $s0 \n                                            # (1 for true)\n\n    # Simple if statement\n    # if (i == j)\n    #     f = g + h;\n    #  f = f - i;\n\n    # Let $s0 = f, $s1 = g, $s2 = h, $s3 = i, $s4 = j\n    bne $s3, $s4, L1 # if (i !=j)\n    add $s0, $s1, $s2 # f = g + h\n\n    L1:\n      sub $s0, $s0, $s3 # f = f - i\n    \n    # Below is an example of finding the max of 3 numbers\n    # A direct translation in Java from MIPS logic:\n    # if (a > b)\n    #   if (a > c)\n    #     max = a;\n    #   else\n    #     max = c;\n    # else\n    #   if (b > c)\n    #     max = b;\n    #   else\n    #     max = c;\n\n    # Let $s0 = a, $s1 = b, $s2 = c, $v0 = return register\n    ble $s0, $s1, a_LTE_b                   # if(a <= b) branch(a_LTE_b)\n    ble $s0, $s2, max_C                     # if(a > b && a <=c) branch(max_C)\n    move $v0, $s0                           # else [a > b && a > c] max = a\n    j done                                  # Jump to the end of the program\n\n    a_LTE_b:                                # Label for when a <= b\n      ble $s1, $s2, max_C                   # if(a <= b && b <= c) branch(max_C)\n      move $v0, $s1                         # if(a <= b && b > c) max = b\n      j done                                # Jump to done\n\n    max_C:\n      move $v0, $s2                         # max = c\n\n    done:                                   # End of program\n\n## LOOPS ##\n  _loops:\n    # The basic structure of loops is having an exit condition and a jump \n    # instruction to continue its execution\n    li $t0, 0\n    while:\n      bgt $t0, 9, end_while                 # While $t0 is less than 10, \n                                            # keep iterating\n      #actual loop content would go here\n      addi $t0, $t0, 1                      # Increment the value\n      j while                               # Jump back to the beginning of \n                                            # the loop\n    end_while:\n\n    # 2D Matrix Traversal\n    # Assume that $a0 stores the address of an integer matrix which is 3 x 3\n    li $t0, 0                               # Counter for i\n    li $t1, 0                               # Counter for j\n    matrix_row:\n      bgt $t0, 3, matrix_row_end\n\n      matrix_col:\n        bgt $t1, 3, matrix_col_end\n\n        # Do stuff\n\n        addi $t1, $t1, 1                  # Increment the col counter\n      matrix_col_end:\n\n      # Do stuff\n\n      addi $t0, $t0, 1\n    matrix_row_end:\n\n## FUNCTIONS ##\n  _functions:\n    # Functions are callable procedures that can accept arguments and return \n    # values all denoted with labels, like above\n\n    main:                                 # Programs begin with main func\n      jal return_1                        # jal will store the current PC in $ra\n                                          # and then jump to return_1\n\n      # What if we want to pass in args?\n      # First we must pass in our parameters to the argument registers\n      li $a0, 1\n      li $a1, 2\n      jal sum                             # Now we can call the function\n\n      # How about recursion?\n      # This is a bit more work since we need to make sure we save and restore\n      # the previous PC in $ra since jal will automatically overwrite \n      # on each call\n      li $a0, 3\n      jal fact\n\n      li $v0, 10\n      syscall\n    \n    # This function returns 1\n    return_1:\n      li $v0, 1                           # Load val in return register $v0\n      jr $ra                              # Jump back to old PC to continue exec\n\n\n    # Function with 2 args\n    sum:\n      add $v0, $a0, $a1\n      jr $ra                              # Return\n\n    # Recursive function to find factorial\n    fact:\n      addi $sp, $sp, -8                   # Allocate space in stack\n      sw $s0, ($sp)                       # Store reg that holds current num\n      sw $ra, 4($sp)                      # Store previous PC\n\n      li $v0, 1                           # Init return value\n      beq $a0, 0, fact_done               # Finish if param is 0\n\n      # Otherwise, continue recursion\n      move $s0, $a0                       # Copy $a0 to $s0\n      sub $a0, $a0, 1\n      jal fact\n\n      mul $v0, $s0, $v0                   # Multiplication is done\n\n      fact_done:\n        lw $s0, ($sp)\n        lw $ra, 4($sp)                     # Restore the PC\n        addi $sp, $sp, 8\n\n        jr $ra\n\n## MACROS ##\n  _macros:\n    # Macros are extremely useful for substituting repeated code blocks with a\n    # single label for better readability\n    # These are in no means substitutes for functions\n    # These must be declared before it is used\n\n    # Macro for printing newlines (since these can be very repetitive)\n    .macro println()\n      la $a0, newline                     # New line string stored here\n      li $v0, 4\n      syscall\n    .end_macro\n\n    println()                             # Assembler will copy that block of\n                                          # code here before running\n\n    # Parameters can be passed in through macros.\n    # These are denoted by a '%' sign with any name you choose\n    .macro print_int(%num)\n      li $v0, 1\n      lw $a0, %num\n      syscall\n    .end_macro\n    \n    li $t0, 1\n    print_int($t0)\n    \n    # We can also pass in immediates for macros\n    .macro immediates(%a, %b)\n      add $t0, %a, %b\n    .end_macro\n\n    immediates(3, 5)\n\n    # Along with passing in labels\n    .macro print(%string)\n      la $a0, %string\n      li $v0, 4\n      syscall\n    .end_macro\n\n    print(hello_world)\n\n## ARRAYS ##\n.data\n  list: .word 3, 0, 1, 2, 6                 # This is an array of words\n  char_arr: .asciiz \"hello\"                 # This is a char array\n  buffer: .space 128                        # Allocates a block in memory, does\n                                            # not automatically clear\n                                            # These blocks of memory are aligned\n                                            # next to each other\n\n.text\n  la $s0, list                              # Load address of list\n  li $t0, 0                                 # Counter\n  li $t1, 5                                 # Length of the list\n\n  loop:\n    bge $t0, $t1, end_loop\n\n    lw $a0, ($s0)\n    li $v0, 1\n    syscall                                 # Print the number\n\n    addi $s0, $s0, 4                        # Size of a word is 4 bytes\n    addi $t0, $t0, 1                        # Increment\n    j loop\n  end_loop:\n\n## INCLUDE ##\n# You do this to import external files into your program (behind the scenes, \n# it really just takes whatever code that is in that file and places it where\n# the include statement is)\n.include \"somefile.asm\"\n```\n"
        },
        {
          "name": "mongodb.md",
          "type": "blob",
          "size": 13.369140625,
          "content": "---\nname: MongoDB \nfilename: mongo.js \ncontributors:\n  - [\"Raj Piskala\", \"https://www.rajpiskala.ml/\"]\n---\n\nMongoDB is a NoSQL document database for high volume data storage.\n\nMongoDB uses collections and documents for its storage. Each document consists\nof key-value pairs using JSON-like syntax, similar to a dictionary or JavaScript\nobject.\n\nLikewise, as MongoDB is a NoSQL database, it uses its own query language, Mongo\nQuery Language (MQL) which uses JSON for querying.\n\n## Getting Started\n\n### Installation\n\nMongoDB can either be installed locally following the instructions\n[here](https://docs.mongodb.com/manual/installation/) or you can create a\nremotely-hosted free 512 MB cluster\n[here](https://www.mongodb.com/cloud/atlas/register). Links to videos with\ninstructions on setup are at the bottom.\n\nThis tutorial assumes that you have the MongoDB Shell from\n[here](https://www.mongodb.com/try/download/shell). You can also download the\ngraphical tool, MongoDB Compass, down below from the same link.\n\n### Components\n\nAfter installing MongoDB, you will notice there are multiple command line tools.\nThe three most important of which are:\n\n- `mongod` - The database server which is responsible for managing data and\n  handling queries\n- `mongos` - The sharding router, which is needed if data will be distributed\n  across multiple machines\n- `mongo` - The database shell (using JavaScript) through which we can configure\n  our database\n\nUsually we start the `mongod` process and then use a separate terminal with\n`mongo` to access and modify our collections.\n\n### JSON & BSON\n\nWhile queries in MongoDB are made using a JSON-like\\* format, MongoDB stores its\ndocuments internally in the Binary JSON (BSON format). BSON is not human\nreadable like JSON as it's a binary encoding. However, this allows for end users\nto have access to more types than regular JSON, such as an integer or float\ntype. Many other types, such as regular expressions, dates, or raw binary are\nsupported too.\n\n[Here](https://docs.mongodb.com/manual/reference/bson-types/) is the full list\nof all types that are supported.\n\n- We refer JSON-like to mean JSON but with these extended types. For example,\n  you can make queries directly with a regular expression or timestamp in\n  MongoDB and you can receive data that has those types too.\n\n```js\n/////////////////////////////////////////////////////////\n/////////////////// Getting Started /////////////////////\n/////////////////////////////////////////////////////////\n\n// Start up the mongo database server\n// NOTE - You will need to do this in a separate terminal as the process will \n// take over the terminal. You may want to use the --fork option\nmongod // --fork\n\n// Connecting to a remote Mongo server\n// mongo \"mongodb+srv://host.ip.address/admin\" --username your-username\n\n// Mongoshell has a proper JavaScript interpreter built in\n3 + 2 // 5\n\n// Show available databases\n// MongoDB comes with the following databases built-in: admin, config, local\nshow dbs\n\n// Switch to a new database (pre-existing or about to exist)\n// NOTE: There is no \"create\" command for a database in MongoDB. \n// The database is created upon data being inserted into a collection\nuse employees\n\n// Create a new collection\n// NOTE: Inserting a document will implicitly create a collection anyways,\n// so this is not required\ndb.createCollection('engineers')\ndb.createCollection('doctors')\n\n// See what collections exist under employees\nshow collections\n\n/////////////////////////////////////////////////////////\n// Basic Create/Read/Update/Delete (CRUD) Operations: ///\n/////////////////////////////////////////////////////////\n\n/////////////// Insert (Create) /////////////////////////\n\n// Insert one employee into the database\n// Each insertion returns acknowledged true or false\n// Every document has a unique _id value assigned to it automatically\ndb.engineers.insertOne({ name: \"Jane Doe\", age: 21, gender: 'Female' })\n\n// Insert a list of employees into the `engineers` collection\n// Can insert as an array of objects\ndb.engineers.insert([\n  { name: \"Foo Bar\", age: 25, gender: 'Male' },\n  { name: \"Baz Qux\", age: 27, gender: 'Other' },\n])\n\n// MongoDB does not enforce a schema or structure for objects\n// Insert an empty object into the `engineers` collection\ndb.engineers.insertOne({})\n\n// Fields are optional and do not have to match rest of documents\ndb.engineers.insertOne({ name: \"Your Name\", gender: \"Male\" })\n\n// Types can vary and are preserved on insertion\n// This can require additional validation in some languages to prevent problems\ndb.engineers.insert({ name: ['Foo', 'Bar'], age: 3.14, gender: true })\n\n// Objects or arrays can be nested inside a document\ndb.engineers.insertOne({\n  name: \"Your Name\",\n  gender: \"Female\",\n  skilledIn: [\n    \"MongoDB\",\n    \"NoSQL\",\n  ],\n  \"date-of-birth\": {\n    \"date\": 1993-07-20T09:44:18.674Z,\n    \"age\": 26\n  },\n})\n\n// We can override the _id field\n// Works fine\ndb.engineers.insertOne({\n  _id: 1,\n  name: \"An Engineer\",\n  age: 25,\n  gender: \"Female\",\n})\n\n// Be careful, as _id must ALWAYS be unique for the collection otherwise \n// the insertion will fail\n// Fails with a WriteError indicating _id is a duplicate value\ndb.engineers.insertOne({\n  _id: 1,\n  name: \"Another Engineer\",\n  age: 25,\n  gender: \"Male\",\n})\n\n// Works fine as this is a different collection\ndb.doctors.insertOne({\n  _id: 1,\n  name: \"Some Doctor\",\n  age: 26,\n  gender: \"Other\",\n})\n\n/////////////////// Find (Read) ////////////////////////\n// Queries are in the form of db.collectionName.find(<filter>)\n// Where <filter> is an object\n\n// Show everything in our database so far, limited to a \n// maximum of 20 documents at a time\n// Press i to iterate this cursor to the next 20 documents\ndb.engineers.find({})\n\n// We can pretty print the result of any find() query\ndb.engineers.find({}).pretty()\n\n// MongoDB queries take in a JS object and search for documents with matching \n// key-value pairs\n// Returns the first document matching query\n// NOTE: Order of insertion is not preserved in the database, output can vary\ndb.engineers.findOne({ name: 'Foo Bar' })\n\n// Returns all documents with the matching key-value properties as a cursor \n// (which can be converted to an array)\ndb.engineers.find({ age: 25 })\n\n// Type matters when it comes to queries\n// Returns nothing as all ages above are integer type\ndb.engineers.find({ age: '25' })\n\n// find() supports nested objects and arrays just like create()\ndb.engineers.find({\n  name: \"Your Name\",\n  gender: \"Female\",\n  skilledIn: [\n    \"MongoDB\",\n    \"NoSQL\",\n  ],\n  \"date-of-birth\": {\n    \"date\": 1993-07-20T09:44:18.674Z,\n    \"age\": 26\n  },\n})\n\n///////////////////////// Update ////////////////////////\n// Queries are in the form of db.collectionName.update(<filter>, <update>)\n// NOTE: <update> will always use the $set operator.\n// Several operators are covered later on in the tutorial.\n\n// We can update a single object\ndb.engineers.updateOne({ name: 'Foo Bar' }, { $set: { name: 'John Doe', age: 100 }})\n\n// Or update many objects at the same time\ndb.engineers.update({ age: 25 }, { $set: { age: 26 }})\n\n// We can use { upsert: true } if we would like it to insert if the document doesn't already exist,\n// or to update if it does\n// Returns matched, upserted, modified count\ndb.engineers.update({ name: 'Foo Baz' },\n  { $set:\n    {\n      age: 26,\n      gender: 'Other'\n    }\n  },\n  { upsert: true }\n)\n\n/////////////////////// Delete /////////////////////////\n// Queries are in the form of db.collectionName.delete(<filter>)\n\n// Delete first document matching query, always returns deletedCount\ndb.engineers.deleteOne({ name: 'Foo Baz' })\n\n// Delete many documents at once\ndb.engineers.deleteMany({ gender: 'Male' })\n\n// NOTE: There are two methods db.collection.removeOne(<filter>) and \n// db.collection.removeMany(<filter>) that also delete objects but have a\n// slightly different return value.\n// They are not included here as they have been deprecated in the NodeJS driver.\n\n/////////////////////////////////////////////////////////\n//////////////////// Operators //////////////////////////\n/////////////////////////////////////////////////////////\n\n// Operators in MongoDB have a $ prefix. For this tutorial, we are only looking \n// at comparison and logical operators, but there are many other types of\n// operators\n\n//////////////// Comparison Operators ///////////////////\n\n// Find all greater than or greater than equal to some condition\ndb.engineers.find({ age: { $gt: 25 }})\ndb.engineers.find({ age: { $gte: 25 }})\n\n// Find all less than or less than equal to some condition\ndb.engineers.find({ age: { $lt: 25 }})\ndb.engineers.find({ age: { $lte: 25 }})\n\n// Find all equal or not equal to\n// Note: the $eq operator is added implicitly in most queries\ndb.engineers.find({ age: { $eq: 25 }})\ndb.engineers.find({ age: { $ne: 25 }})\n\n// Find all that match any element in the array, or not in the array\ndb.engineers.find({ age: { $in: [ 20, 23, 24, 25 ]}})\ndb.engineers.find({ age: { $nin: [ 20, 23, 24, 25 ]}})\n\n//////////////// Logical Operators ///////////////////\n\n// Join two query clauses together\n// NOTE: MongoDB does this implicitly for most queries\ndb.engineers.find({ $and: [\n  gender: 'Female',\n  age: {\n    $gte: 18\n  }\n]})\n\n// Match either query condition\ndb.engineers.find({ $or: [\n  gender: 'Female',\n  age: {\n    $gte: 18\n  }\n]})\n\n// Negates the query\ndb.engineers.find({ $not: {\n  gender: 'Female'\n}})\n\n// Must match none of the query conditions\ndb.engineers.find({ $nor [\n  gender: 'Female',\n  age: {\n    $gte: 18\n  }\n]})\n\n/////////////////////////////////////////////////////////\n//////////////// Database Operations: ///////////////////\n/////////////////////////////////////////////////////////\n\n// Delete (drop) the employees database\n// THIS WILL DELETE ALL DOCUMENTS IN THE DATABASE!\ndb.dropDatabase()\n\n// Create a new database with some data\nuse example\ndb.test.insertOne({ name: \"Testing data, please ignore!\", type: \"Test\" })\n\n// Quit Mongo shell\nexit\n\n// Import/export database as BSON:\n\n// Mongodump to export data as BSON for all databases\n// Exported data is found in under \"MongoDB Database Tools/bin/dump\"\n// NOTE: If the command is not found, navigate to \"MongoDB Database Tools/bin\" \n// and use the executable from there mongodump\n\n// Mongorestore to restore data from BSON\nmongorestore dump\n\n// Import/export database as JSON:\n// Mongoexport to export data as JSON for all databases\nmongoexport --collection=example\n\n// Mongoimport to export data as JSON for all databases\nmongoimport  --collection=example\n```\n\n## Further Reading\n\n### Setup Videos\n\n- [Install MongoDB - Windows 10](https://www.youtube.com/watch?v=85A6m1soKww)\n- [Install MongoDB - Mac](https://www.youtube.com/watch?v=DX15WbKidXY)\n- [Install MongoDB - Linux\n  (Ubuntu)](https://www.youtube.com/watch?v=wD_2pojFWoE)\n\n### Input Validation\n\nFrom the examples above, if input validation or structure is a concern, I would\ntake a look at the following ORMs:\n\n- [Mongoose (Node.js)](https://mongoosejs.com/docs/) - Input validation through\n  schemas that support types, required values, minimum and maximum values.\n- [MongoEngine (Python)](http://mongoengine.org/) - Similar to Mongoose, but I\n  found it somewhat limited in my experience\n- [MongoKit (Python)](https://github.com/namlook/mongokit) - Another great\n  alternative to MongoEngine that I find easier to use than MongoEngine\n\nFor statically strongly typed languages (e.g. Java, C++, Rust), input validation\nusually doesn't require a library as they define types and structure at compile\ntime.\n\n### Resources\n\nIf you have the time to spare, I would strongly recommend the courses on\n[MongoDB University](https://university.mongodb.com/). They're by MongoDB\nthemselves and go into much more detail while still being concise. They're a mix\nof videos and quiz questions and this was how I gained my knowledge of MongoDB.\n\nI would recommend the following video series for learning MongoDB:\n\n- [MongoDB Crash Course - Traversy\n  Media](https://www.youtube.com/watch?v=-56x56UppqQ)\n- [MongoDB Tutorial for Beginners -\n  Amigoscode](https://www.youtube.com/watch?v=Www6cTUymCY)\n\nLanguage-specific ones that I used before:\n\n- [Build A REST API With Node.js, Express, & MongoDB - Web Dev\n  Simplified](https://www.youtube.com/watch?v=fgTGADljAeg)\n- [MongoDB with Python Crash Course - Tutorial for Beginners -\n  FreeCodeCamp](https://www.youtube.com/watch?v=E-1xI85Zog8)\n- [How to Use MongoDB with Java - Random\n  Coder](https://www.youtube.com/watch?v=reYPUvu2Giw)\n- [An Introduction to Using MongoDB with Rust -\n  MongoDB](https://www.youtube.com/watch?v=qFlftfLGwPM)\n\nMost of the information above was cross-referenced with the [MongoDB\ndocs](https://www.mongodb.com/). Here are the docs for each section:\n\n- [MongoDB Types](https://docs.mongodb.com/manual/reference/bson-types/) - List\n  of all types that MongoDB supports natively\n- [MongoDB Operators](https://docs.mongodb.com/manual/reference/operator/) -\n  List of operators MongoDB supports natively\n- [MongoDB CRUD](https://docs.mongodb.com/manual/reference/command/nav-crud/) -\n  Commands for create, read, update, delete\n\nIf you've been enjoying MongoDB so far and want to explore intermediate\nfeatures, I would look at\n[aggregation](https://docs.mongodb.com/manual/reference/command/nav-aggregation/),\n[indexing](https://docs.mongodb.com/manual/indexes/), and\n[sharding](https://docs.mongodb.com/manual/sharding/).\n\n- Aggregation - useful for creating advanced queries to be executed by the\n  database\n- Indexing allows for caching, which allows for much faster execution of queries\n- Sharding allows for horizontal data scaling and distribution between multiple\n  machines.\n"
        },
        {
          "name": "moonscript.md",
          "type": "blob",
          "size": 15.8583984375,
          "content": "---\nname: MoonScript\ncontributors:\n  - [\"RyanSquared\", \"https://ryansquared.github.io/\"]\n  - [\"Job van der Zwan\", \"https://github.com/JobLeonard\"]\nfilename: moonscript.moon\n---\n\nMoonScript is a dynamic scripting language that compiles into Lua. It gives\nyou the power of one of the fastest scripting languages combined with a\nrich set of features.\n\nSee [the MoonScript website](https://moonscript.org/) to see official guides on installation for all platforms.\n\n```moon\n-- Two dashes start a comment. Comments can go until the end of the line.\n-- MoonScript transpiled to Lua does not keep comments.\n\n-- As a note, MoonScript does not use 'do', 'then', or 'end' like Lua would and\n-- instead uses an indented syntax, much like Python.\n\n--------------------------------------------------\n-- 1. Assignment\n--------------------------------------------------\n\nhello = \"world\"\na, b, c = 1, 2, 3\nhello = 123 -- Overwrites `hello` from above.\n\nx = 0\nx += 10 -- x = x + 10\n\ns = \"hello \"\ns ..= \"world\" -- s = s .. \"world\"\n\nb = false\nb and= true or false -- b = b and (true or false)\n\n--------------------------------------------------\n-- 2. Literals and Operators\n--------------------------------------------------\n\n-- Literals work almost exactly as they would in Lua. Strings can be broken in\n-- the middle of a line without requiring a \\.\n\nsome_string = \"exa\nmple\" -- local some_string = \"exa\\nmple\"\n\n-- Strings can also have interpolated values, or values that are evaluated and\n-- then placed inside of a string.\n\nsome_string = \"This is an #{some_string}\" -- Becomes 'This is an exa\\nmple'\n\n--------------------------------------------------\n-- 2.1. Function Literals\n--------------------------------------------------\n\n-- Functions are written using arrows:\n\nmy_function = -> -- compiles to `function() end`\nmy_function() -- calls an empty function\n\n-- Functions can be called without using parenthesis. Parentheses may still be\n-- used to have priority over other functions.\n\nfunc_a = -> print \"Hello World!\"\nfunc_b = ->\n\tvalue = 100\n\tprint \"The value: #{value}\"\n\n-- If a function needs no parameters, it can be called with either `()` or `!`.\n\nfunc_a!\nfunc_b()\n\n-- Functions can use arguments by preceding the arrow with a list of argument\n-- names bound by parentheses.\n\nsum = (x, y)-> x + y -- The last expression is returned from the function.\nprint sum(5, 10)\n\n-- Lua has an idiom of sending the first argument to a function as the object,\n-- like a 'self' object. Using a fat arrow (=>) instead of a skinny arrow (->)\n-- automatically creates a `self` variable. `@x` is a shorthand for `self.x`.\n\nfunc = (num)=> @value + num\n\n-- Default arguments can also be used with function literals:\n\na_function = (name = \"something\", height=100)->\n\tprint \"Hello, I am #{name}.\\nMy height is #{height}.\"\n\n-- Because default arguments are calculated in the body of the function when\n-- transpiled to Lua, you can reference previous arguments.\n\nsome_args = (x = 100, y = x + 1000)-> print(x + y)\n\n--------------------------------------------------\n-- Considerations\n--------------------------------------------------\n\n-- The minus sign plays two roles, a unary negation operator and a binary\n-- subtraction operator. It is recommended to always use spaces between binary\n-- operators to avoid the possible collision.\n\na = x - 10 --  a = x - 10\nb = x-10 -- b = x - 10\nc = x -y -- c = x(-y)\nd = x- z -- d = x - z\n\n-- When there is no space between a variable and string literal, the function\n-- call takes priority over following expressions:\n\nx = func\"hello\" + 100 -- func(\"hello\") + 100\ny = func \"hello\" + 100 -- func(\"hello\" + 100)\n\n-- Arguments to a function can span across multiple lines as long as the\n-- arguments are indented. The indentation can be nested as well.\n\nmy_func 5, -- called as my_func(5, 8, another_func(6, 7, 9, 1, 2), 5, 4)\n\t8, another_func 6, 7, -- called as\n\t\t9, 1, 2,\t\t  -- another_func(6, 7, 9, 1, 2)\n\t5, 4\n\n-- If a function is used at the start of a block, the indentation can be\n-- different than the level of indentation used in a block:\n\nif func 1, 2, 3, -- called as func(1, 2, 3, \"hello\", \"world\")\n\t\t\"hello\",\n\t\t\"world\"\n\tprint \"hello\"\n\n--------------------------------------------------\n-- 3. Tables\n--------------------------------------------------\n\n-- Tables are defined by curly braces, like Lua:\n\nsome_values = {1, 2, 3, 4}\n\n-- Tables can use newlines instead of commas.\n\nsome_other_values = {\n\t5, 6\n\t7, 8\n}\n\n-- Assignment is done with `:` instead of `=`:\n\nprofile = {\n\tname: \"Bill\"\n\tage: 200\n\t\"favorite food\": \"rice\"\n}\n\n-- Curly braces can be left off for `key: value` tables.\n\ny = type: \"dog\", legs: 4, tails: 1\n\nprofile =\n\theight: \"4 feet\",\n\tshoe_size: 13,\n\tfavorite_foods: -- nested table\n\t\tfoo: \"ice cream\", \n\t\tbar: \"donuts\"\n\nmy_function dance: \"Tango\", partner: \"none\" -- :( forever alone\n\n-- Tables constructed from variables can use the same name as the variables\n-- by using `:` as a prefix operator.\n\nhair = \"golden\"\nheight = 200\nperson = {:hair, :height}\n\n-- Like in Lua, keys can be non-string or non-numeric values by using `[]`.\n\nt =\n\t[1 + 2]: \"hello\"\n\t\"hello world\": true -- Can use string literals without `[]`.\n\n--------------------------------------------------\n-- 3.1. Table Comprehensions\n--------------------------------------------------\n\n-- List Comprehensions\n\n-- Creates a copy of a list but with all items doubled. Using a star before a\n-- variable name or table can be used to iterate through the table's values.\n\nitems = {1, 2, 3, 4}\ndoubled = [item * 2 for item in *items]\n-- Uses `when` to determine if a value should be included.\n\nslice = [item for item in *items when item > 1 and item < 3]\n\n-- `for` clauses inside of list comprehensions can be chained.\n\nx_coords = {4, 5, 6, 7}\ny_coords = {9, 2, 3}\n\npoints = [{x,y} for x in *x_coords for y in *y_coords]\n\n-- Numeric for loops can also be used in comprehensions:\n\nevens = [i for i=1, 100 when i % 2 == 0]\n\n-- Table Comprehensions are very similar but use `{` and `}` and take two\n-- values for each iteration.\n\nthing = color: \"red\", name: \"thing\", width: 123\nthing_copy = {k, v for k, v in pairs thing}\n\n-- Tables can be \"flattened\" from key-value pairs in an array by using `unpack`\n-- to return both values, using the first as the key and the second as the\n-- value.\n\ntuples = {{\"hello\", \"world\"}, {\"foo\", \"bar\"}}\ntable = {unpack tuple for tuple in *tuples}\n\n-- Slicing can be done to iterate over only a certain section of an array. It\n-- uses the `*` notation for iterating but appends `[start, end, step]`.\n\n-- The next example also shows that this syntax can be used in a `for` loop as\n-- well as any comprehensions.\n\nfor item in *points[1, 10, 2]\n\tprint unpack item\n\n-- Any undesired values can be left off. The second comma is not required if\n-- the step is not included.\n\nwords = {\"these\", \"are\", \"some\", \"words\"}\nfor word in *words[,3] \n\tprint word\n\n--------------------------------------------------\n-- 4. Control Structures\n--------------------------------------------------\n\nhave_coins = false\nif have_coins\n\tprint \"Got coins\"\nelse\n\tprint \"No coins\"\n\n-- Use `then` for single-line `if`\nif have_coins then \"Got coins\" else \"No coins\"\n\n-- `unless` is the opposite of `if`\nunless os.date(\"%A\") == \"Monday\"\n\tprint \"It is not Monday!\"\n\n-- `if` and `unless` can be used as expressions\nis_tall = (name)-> if name == \"Rob\" then true else false\nmessage = \"I am #{if is_tall \"Rob\" then \"very tall\" else \"not so tall\"}\"\nprint message -- \"I am very tall\"\n\n-- `if`, `elseif`, and `unless` can evaluate assignment as well as expressions.\nif x = possibly_nil! -- sets `x` to `possibly_nil()` and evaluates `x`\n\tprint x\n\n-- Conditionals can be used after a statement as well as before. This is\n-- called a \"line decorator\".\n\nis_monday = os.date(\"%A\") == \"Monday\"\nprint(\"It IS Monday!\") if isMonday\nprint(\"It is not Monday..\") unless isMonday\n--print(\"It IS Monday!\" if isMonday) -- Not a statement, does not work\n\n--------------------------------------------------\n-- 4.1 Loops\n--------------------------------------------------\n\nfor i = 1, 10\n\tprint i\n\nfor i = 10, 1, -1 do print i -- Use `do` for single-line loops.\n\ni = 0\nwhile i < 10\n\tcontinue if i % 2 == 0 -- Continue statement; skip the rest of the loop.\n\tprint i\n\n-- Loops can be used as a line decorator, just like conditionals\nprint \"item: #{item}\" for item in *items\n\n-- Using loops as an expression generates an array table. The last statement\n-- in the block is coerced into an expression and added to the table.\nmy_numbers = for i = 1, 6 do i -- {1, 2, 3, 4, 5, 6}\n\n-- use `continue` to filter out values\nodds = for i in *my_numbers\n\tcontinue if i % 2 == 0 -- acts opposite to `when` in comprehensions!\n\ti -- Only added to return table if odd\n\n-- A `for` loop returns `nil` when it is the last statement of a function\n-- Use an explicit `return` to generate a table.\nprint_squared = (t) -> for x in *t do x*x -- returns `nil`\nsquared = (t) -> return for x in *t do x*x -- returns new table of squares\n\n-- The following does the same as `(t) -> [i for i in *t when i % 2 == 0]`\n-- But list comprehension generates better code and is more readable!\n\nfilter_odds = (t) -> \n\treturn for x in *t\n\t\tif x % 2 == 0 then x else continue\nevens = filter_odds(my_numbers) -- {2, 4, 6}\n\n--------------------------------------------------\n-- 4.2 Switch Statements\n--------------------------------------------------\n\n-- Switch statements are a shorthand way of writing multiple `if` statements\n-- checking against the same value. The value is only evaluated once.\n\nname = \"Dan\"\n\nswitch name\n\twhen \"Dave\"\n\t\tprint \"You are Dave.\"\n\twhen \"Dan\"\n\t\tprint \"You are not Dave, but Dan.\"\n\telse\n\t\tprint \"You are neither Dave nor Dan.\"\n\n-- Switches can also be used as expressions, as well as compare multiple\n-- values. The values can be on the same line as the `when` clause if they\n-- are only one expression.\n\nb = 4\nnext_even = switch b\n\twhen 1 then 2\n\twhen 2, 3 then 4\n\twhen 4, 5 then 6\n\telse error \"I can't count that high! D:\"\n\n--------------------------------------------------\n-- 5. Object Oriented Programming\n--------------------------------------------------\n\n-- Classes are created using the `class` keyword followed by an identifier,\n-- typically written using CamelCase. Values specific to a class can use @ as\n-- the identifier instead of `self.value`.\n\nclass Inventory\n\tnew: => @items = {}\n\tadd_item: (name)=> -- note the use of fat arrow for classes!\n\t\t@items[name] = 0 unless @items[name]\n\t\t@items[name] += 1\n\n-- The `new` function inside of a class is special because it is called when\n-- an instance of the class is created.\n\n-- Creating an instance of the class is as simple as calling the class as a\n-- function. Calling functions inside of the class uses \\ to separate the\n-- instance from the function it is calling.\n\ninv = Inventory!\ninv\\add_item \"t-shirt\"\ninv\\add_item \"pants\"\n\n-- Values defined in the class - not the new() function - will be shared across\n-- all instances of the class.\n\nclass Person\n\tclothes: {}\n\tgive_item: (name)=>\n\t\ttable.insert @clothes name\n\na = Person!\nb = Person!\n\na\\give_item \"pants\"\nb\\give_item \"shirt\"\n\n-- prints out both \"pants\" and \"shirt\"\n\nprint item for item in *a.clothes\n\n-- Class instances have a value `.__class` that are equal to the class object\n-- that created the instance.\n\nassert(b.__class == Person)\n\n-- Variables declared in class body the using the `=` operator are locals,\n-- so these \"private\" variables are only accessible within the current scope.\n\nclass SomeClass\n\tx = 0\n\treveal: ->\n\t\tx += 1\n\t\tprint x\n\na = SomeClass!\nb = SomeClass!\nprint a.x -- nil\na.reveal! -- 1\nb.reveal! -- 2\n\n--------------------------------------------------\n-- 5.1 Inheritance\n--------------------------------------------------\n\n-- The `extends` keyword can be used to inherit properties and methods from\n-- another class.\n\nclass Backpack extends Inventory\n\tsize: 10\n\tadd_item: (name)=>\n\t\terror \"backpack is full\" if #@items > @size\n\t\tsuper name -- calls Inventory.add_item with `name`.\n\n-- Because a `new` method was not added, the `new` method from `Inventory` will\n-- be used instead. If we did want to use a constructor while still using the\n-- constructor from `Inventory`, we could use the magical `super` function\n-- during `new()`.\n\n-- When a class extends another, it calls the method `__inherited` on the \n-- parent class (if it exists). It is always called with the parent and the\n-- child object.\n\nclass ParentClass\n\t@__inherited: (child)=>\n\t\tprint \"#{@__name} was inherited by #{child.__name}\"\n\ta_method: (a, b) => print a .. ' ' .. b\n\n-- Will print 'ParentClass was inherited by MyClass'\n\nclass MyClass extends ParentClass\n\ta_method: =>\n\t\tsuper \"hello world\", \"from MyClass!\" \n\t\tassert super == ParentClass\n\n--------------------------------------------------\n-- 6. Scope\n--------------------------------------------------\n\n-- All values are local by default. The `export` keyword can be used to\n-- declare the variable as a global value.\n\nexport var_1, var_2\nvar_1, var_3 = \"hello\", \"world\" -- var_3 is local, var_1 is not.\n\nexport this_is_global_assignment = \"Hi!\"\n\n-- Classes can also be prefixed with `export` to make them global classes.\n-- Alternatively, all CamelCase variables can be exported automatically using\n-- `export ^`, and all values can be exported using `export *`.\n\n-- `do` lets you manually create a scope, for when you need local variables.\n\ndo\n\tx = 5\nprint x -- nil\n\n-- Here we use `do` as an expression to create a closure.\n\ncounter = do \n\ti = 0\n\t->\n\t\ti += 1\n\t\treturn i\n\nprint counter!  -- 1\nprint counter!  -- 2\n\n-- The `local` keyword can be used to define variables\n-- before they are assigned.\n\nlocal var_4\nif something\n\tvar_4 = 1\nprint var_4 -- works because `var_4` was set in this scope, not the `if` scope.\n\n-- The `local` keyword can also be used to shadow an existing variable.\n\nx = 10\nif false\n\tlocal x\n\tx = 12\nprint x -- 10\n\n-- Use `local *` to forward-declare all variables. \n-- Alternatively, use `local ^` to forward-declare all CamelCase values.\n\nlocal *\n\nfirst = ->\n\tsecond!\n\nsecond = ->\n\tprint data\n\ndata = {}\n\n--------------------------------------------------\n-- 6.1 Import\n--------------------------------------------------\n\n-- Values from a table can be brought to the current scope using the `import`\n-- and `from` keyword. Names in the `import` list can be preceded by `\\` if\n-- they are a module function.\n\nimport insert from table -- local insert = table.insert\nimport \\add from state: 100, add: (value)=> @state + value\nprint add 22\n\n-- Like tables, commas can be excluded from `import` lists to allow for longer\n-- lists of imported items.\n\nimport\n\tasdf, gh, jkl\n\tantidisestablishmentarianism\n\tfrom {}\n\n--------------------------------------------------\n-- 6.2 With\n--------------------------------------------------\n\n-- The `with` statement can be used to quickly call and assign values in an\n-- instance of a class or object.\n\nfile = with File \"lmsi15m.moon\" -- `file` is the value of `set_encoding()`.\n\t\\set_encoding \"utf8\"\n\ncreate_person = (name, relatives)->\n\twith Person!\n\t\t.name = name\n\t\t\\add_relative relative for relative in *relatives\nme = create_person \"Ryan\", {\"sister\", \"sister\", \"brother\", \"dad\", \"mother\"}\n\nwith str = \"Hello\" -- assignment as expression! :D\n\tprint \"original: #{str}\"\n\tprint \"upper: #{\\upper!}\"\n\n--------------------------------------------------\n-- 6.3 Destructuring\n--------------------------------------------------\n\n-- Destructuring can take arrays, tables, and nested tables and convert them\n-- into local variables.\n\nobj2 =\n\tnumbers: {1, 2, 3, 4}\n\tproperties:\n\t\tcolor: \"green\"\n\t\theight: 13.5\n\n{numbers: {first, second}, properties: {:color}} = obj2\n\nprint first, second, color -- 1 2 green\n\n-- `first` and `second` return [1] and [2] because they are as an array, but\n-- `:color` is like `color: color` so it sets itself to the `color` value.\n\n-- Destructuring can be used in place of `import`.\n\n{:max, :min, random: rand} = math -- rename math.random to rand\n\n-- Destructuring can be done anywhere assignment can be done.\n\nfor {left, right} in *{{\"hello\", \"world\"}, {\"egg\", \"head\"}}\n\tprint left, right\n```\n\n## Additional Resources\n\n- [Language Guide](https://moonscript.org/reference/)\n- [Online Compiler](https://moonscript.org/compiler/)\n"
        },
        {
          "name": "ms",
          "type": "tree",
          "content": null
        },
        {
          "name": "nim.md",
          "type": "blob",
          "size": 7.681640625,
          "content": "---\nname: Nim\nfilename: learnNim.nim\ncontributors:\n    - [\"Jason J. Ayala P.\", \"http://JasonAyala.com\"]\n    - [\"Dennis Felsing\", \"https://dennis.felsing.org\"]\n---\n\nNim (formerly Nimrod) is a statically typed, imperative programming language\nthat gives the programmer power without compromises on runtime efficiency.\n\nNim is efficient, expressive, and elegant.\n\n```nim\n# Single-line comments start with a #\n\n#[\n  This is a multiline comment.\n  In Nim, multiline comments can be nested, beginning with #[\n  ... and ending with ]#\n]#\n\ndiscard \"\"\"\nThis can also work as a multiline comment.\nOr for unparsable, broken code\n\"\"\"\n\nvar                     # Declare (and assign) variables,\n  letter: char = 'n'    # with or without type annotations\n  lang = \"N\" & \"im\"\n  nLength: int = len(lang)\n  boat: float\n  truth: bool = false\n\nlet            # Use let to declare and bind variables *once*.\n  legs = 400   # legs is immutable.\n  arms = 2_000 # _ are ignored and are useful for long numbers.\n  aboutPi = 3.15\n\nconst            # Constants are computed at compile time. This provides\n  debug = true   # performance and is useful in compile time expressions.\n  compileBadCode = false\n\nwhen compileBadCode:            # `when` is a compile time `if`\n  legs = legs + 1               # This error will never be compiled.\n  const input = readline(stdin) # Const values must be known at compile time.\n\ndiscard 1 > 2 # Note: The compiler will complain if the result of an expression\n              # is unused. `discard` bypasses this.\n\n\n#\n# Data Structures\n#\n\n# Tuples\n\nvar\n  child: tuple[name: string, age: int]   # Tuples have *both* field names\n  today: tuple[sun: string, temp: float] # *and* order.\n\nchild = (name: \"Rudiger\", age: 2) # Assign all at once with literal ()\ntoday.sun = \"Overcast\"            # or individual fields.\ntoday[1] = 70.1                   # or by index.\n\nlet impostor = (\"Rudiger\", 2) # Two tuples are the same as long as they have\nassert child == impostor      # the same type and the same contents\n\n# Sequences\n\nvar\n  drinks: seq[string]\n\ndrinks = @[\"Water\", \"Juice\", \"Chocolate\"] # @[V1,..,Vn] is the sequence literal\n\ndrinks.add(\"Milk\")\n\nif \"Milk\" in drinks:\n  echo \"We have Milk and \", drinks.len - 1, \" other drinks\"\n\nlet myDrink = drinks[2]\n\n#\n# Defining Types\n#\n\n# Defining your own types puts the compiler to work for you. It's what makes\n# static typing powerful and useful.\n\ntype\n  Name = string # A type alias gives you a new type that is interchangeable\n  Age = int     # with the old type but is more descriptive.\n  Person = tuple[name: Name, age: Age] # Define data structures too.\n  AnotherSyntax = tuple\n    fieldOne: string\n    secondField: int\n\nvar\n  john: Person = (name: \"John B.\", age: 17)\n  newage: int = 18 # It would be better to use Age than int\n\njohn.age = newage # But still works because int and Age are synonyms\n\ntype\n  Cash = distinct int    # `distinct` makes a new type incompatible with its\n  Desc = distinct string # base type.\n\nvar\n  money: Cash = 100.Cash # `.Cash` converts the int to our type\n  description: Desc  = \"Interesting\".Desc\n\nwhen compileBadCode:\n  john.age  = money        # Error! age is of type int and money is Cash\n  john.name = description  # Compiler says: \"No way!\"\n\n#\n# More Types and Data Structures\n#\n\n# Objects are similar to tuples, but they *require* names of the fields\n\ntype\n  Room = ref object # reference to an object, useful for big objects or\n    windows: int    # objects inside objects\n    doors: int = 1  # Change the default value of a field (since Nim 2.0)\n  House = object\n    address: string  \n    rooms: seq[Room]\n\nvar\n  defaultHouse = House() # initialize with default values\n  defaultRoom = new Room() # create new instance of ref object\n  sesameHouse = House(address: \"123 Sesame St.\", rooms: @[defaultRoom])\n\n# Enumerations allow a type to have one of a limited number of values\n\ntype\n  Color = enum cRed, cBlue, cGreen\n  Direction = enum # Alternative formatting\n    dNorth\n    dWest\n    dEast\n    dSouth\nvar\n  orient = dNorth # `orient` is of type Direction, with the value `dNorth`\n  pixel = cGreen # `pixel` is of type Color, with the value `cGreen`\n\ndiscard dNorth > dEast # Enums are usually an \"ordinal\" type\n\n# Subranges specify a limited valid range\n\ntype\n  DieFaces = range[1..20] # Only an int from 1 to 20 is a valid value\nvar\n  my_roll: DieFaces = 13\n\nwhen compileBadCode:\n  my_roll = 23 # Error!\n\n# Arrays\n\ntype\n  RollCounter = array[DieFaces, int]  # Arrays are fixed length and\n  DirNames = array[Direction, string] # indexed by any ordinal type.\n  Truths = array[42..44, bool]\nvar\n  counter: RollCounter\n  directions: DirNames\n  possible: Truths\n\npossible = [false, false, false] # Literal arrays are created with [V1,..,Vn]\npossible[42] = true\n\ndirections[dNorth] = \"Ahh. The Great White North!\"\ndirections[dWest] = \"No, don't go there.\"\n\nmy_roll = 13\ncounter[my_roll] += 1\ncounter[my_roll] += 1\n\nvar anotherArray = [\"Default index\", \"starts at\", \"0\"]\n\n# More data structures are available, including tables, sets, lists, queues,\n# and crit bit trees.\n# http://nim-lang.org/docs/lib.html#collections-and-algorithms\n\n#\n# IO and Control Flow\n#\n\n# `case`, `readLine()`\n\necho \"Read any good books lately?\"\ncase readLine(stdin)\nof \"no\", \"No\":\n  echo \"Go to your local library.\"\nof \"yes\", \"Yes\":\n  echo \"Carry on, then.\"\nelse:\n  echo \"That's great; I assume.\"\n\n# `while`, `if`, `continue`, `break`\n\nimport strutils as str # http://nim-lang.org/docs/strutils.html\necho \"I'm thinking of a number between 41 and 43. Guess which!\"\nlet number: int = 42\nvar\n  raw_guess: string\n  guess: int # Variables in Nim are always initialized with a zero value\nwhile guess != number:\n  raw_guess = readLine(stdin)\n  if raw_guess == \"\": continue # Skip this iteration\n  guess = str.parseInt(raw_guess)\n  if guess == 1001:\n    echo(\"AAAAAAGGG!\")\n    break\n  elif guess > number:\n    echo(\"Nope. Too high.\")\n  elif guess < number:\n    echo(guess, \" is too low\")\n  else:\n    echo(\"Yeeeeeehaw!\")\n\n#\n# Iteration\n#\n\nfor i, elem in [\"Yes\", \"No\", \"Maybe so\"]: # Or just `for elem in`\n  echo(elem, \" is at index: \", i)\n\nfor k, v in items(@[(person: \"You\", power: 100), (person: \"Me\", power: 9000)]):\n  echo v\n\nlet myString = \"\"\"\nan <example>\n`string` to\nplay with\n\"\"\" # Multiline raw string\n\nfor line in splitLines(myString):\n  echo(line)\n\nfor i, c in myString:       # Index and letter. Or `for j in` for just letter\n  if i mod 2 == 0: continue # Compact `if` form\n  elif c == 'X': break\n  else: echo(c)\n\n#\n# Procedures\n#\n\ntype Answer = enum aYes, aNo\n\nproc ask(question: string): Answer =\n  echo(question, \" (y/n)\")\n  while true:\n    case readLine(stdin)\n    of \"y\", \"Y\", \"yes\", \"Yes\":\n      return Answer.aYes  # Enums can be qualified\n    of \"n\", \"N\", \"no\", \"No\":\n      return Answer.aNo\n    else: echo(\"Please be clear: yes or no\")\n\nproc addSugar(amount: int = 2) = # Default amount is 2, returns nothing\n  assert(amount > 0 and amount < 9000, \"Crazy Sugar\")\n  for a in 1..amount:\n    echo(a, \" sugar...\")\n\ncase ask(\"Would you like sugar in your tea?\")\nof aYes:\n  addSugar(3)\nof aNo:\n  echo \"Oh do take a little!\"\n  addSugar()\n# No need for an `else` here. Only `yes` and `no` are possible.\n\n#\n# FFI\n#\n\n# Because Nim compiles to C, FFI is easy:\n\nproc strcmp(a, b: cstring): cint {.importc: \"strcmp\", nodecl.}\n\nlet cmp = strcmp(\"C?\", \"Easy!\")\n```\n\nAdditionally, Nim separates itself from its peers with metaprogramming,\nperformance, and compile-time features.\n\n## Further Reading\n\n* [Home Page](http://nim-lang.org)\n* [Download](http://nim-lang.org/download.html)\n* [Community](http://nim-lang.org/community.html)\n* [FAQ](http://nim-lang.org/question.html)\n* [Documentation](http://nim-lang.org/documentation.html)\n* [Manual](http://nim-lang.org/docs/manual.html)\n* [Standard Library](http://nim-lang.org/docs/lib.html)\n* [Rosetta Code](http://rosettacode.org/wiki/Category:Nim)\n"
        },
        {
          "name": "nix.md",
          "type": "blob",
          "size": 9.2275390625,
          "content": "---\nname: Nix\nfilename: learn.nix\ncontributors:\n    - [\"Chris Martin\", \"http://chris-martin.org/\"]\n    - [\"Rommel Martinez\", \"https://ebzzry.io\"]\n    - [\"Javier Candeira\", \"https://candeira.com/\"]\n---\n\nNix is a simple functional language developed for the\n[Nix package manager](https://nixos.org/nix/) and\n[NixOS](https://nixos.org/).\n\nYou can evaluate Nix expressions using\n[nix-instantiate](https://nixos.org/nix/manual/#sec-nix-instantiate)\nor [`nix repl`](https://nixos.org/nix/manual/#ssec-relnotes-2.0).\n\n```nix\nwith builtins; [\n\n  #  Comments\n  #=========================================\n\n  # Inline comments look like this.\n\n  /* Multi-line comments\n     look like this. */\n\n\n  #  Booleans\n  #=========================================\n\n  (true && false)               # And\n  #=> false\n\n  (true || false)               # Or\n  #=> true\n\n  (if 3 < 4 then \"a\" else \"b\")  # Conditional\n  #=> \"a\"\n\n\n  #  Integers and Floats\n  #=========================================\n\n  # There are two numeric types: integers and floats\n\n  1 0 42 (-3)       # Some integers\n\n  123.43 .27e13     # A couple of floats\n\n  # Operations will preserve numeric type\n\n  (4 + 6 + 12 - 2)  # Addition\n  #=> 20\n  (4 - 2.5)\n  #=> 1.5\n\n  (7 / 2)           # Division\n  #=> 3\n  (7 / 2.0)\n  #=> 3.5\n\n\n  #  Strings\n  #=========================================\n\n  \"Strings literals are in double quotes.\"\n\n  \"\n    String literals can span\n    multiple lines.\n  \"\n\n  ''\n    This is called an \"indented string\" literal.\n    It intelligently strips leading whitespace.\n  ''\n\n  ''\n    a\n      b\n  ''\n  #=> \"a\\n  b\"\n\n  (\"ab\" + \"cd\")   # String concatenation\n  #=> \"abcd\"\n\n  # Antiquotation lets you embed values into strings.\n  (\"Your home directory is ${getEnv \"HOME\"}\")\n  #=> \"Your home directory is /home/alice\"\n\n\n  #  Paths\n  #=========================================\n\n  # Nix has a primitive data type for paths.\n  /tmp/tutorials/learn.nix\n\n  # A relative path is resolved to an absolute path at parse\n  # time, relative to the file in which it occurs.\n  tutorials/learn.nix\n  #=> /the-base-path/tutorials/learn.nix\n\n  # A path must contain at least one slash, so a relative\n  # path for a file in the same directory needs a ./ prefix,\n  ./learn.nix\n  #=> /the-base-path/learn.nix\n\n  # The / operator must be surrounded by whitespace if\n  # you want it to signify division.\n\n  7/2        # This is a path literal\n  (7 / 2)    # This is integer division\n\n\n  #  Imports\n  #=========================================\n\n  # A nix file contains a single top-level expression with no free\n  # variables. An import expression evaluates to the value of the\n  # file that it imports.\n  (import /tmp/foo.nix)\n\n  # Imports can also be specified by strings.\n  (import \"/tmp/foo.nix\")\n\n  # Import paths must be absolute. Path literals\n  # are automatically resolved, so this is fine.\n  (import ./foo.nix)\n\n  # But this does not happen with strings.\n  (import \"./foo.nix\")\n  #=> error: string ‘foo.nix’ doesn't represent an absolute path\n\n\n  #  Let\n  #=========================================\n\n  # `let` blocks allow us to bind values to variables.\n  (let x = \"a\"; in\n    x + x + x)\n  #=> \"aaa\"\n\n  # Bindings can refer to each other, and their order does not matter.\n  (let y = x + \"b\";\n       x = \"a\"; in\n    y + \"c\")\n  #=> \"abc\"\n\n  # Inner bindings shadow outer bindings.\n  (let a = 1; in\n    let a = 2; in\n      a)\n  #=> 2\n\n\n  #  Functions\n  #=========================================\n\n  (n: n + 1)      # Function that adds 1\n\n  ((n: n + 1) 5)  # That same function, applied to 5\n  #=> 6\n\n  # There is no syntax for named functions, but they\n  # can be bound by `let` blocks like any other value.\n  (let succ = (n: n + 1); in succ 5)\n  #=> 6\n\n  # A function has exactly one argument.\n  # Multiple arguments can be achieved with currying.\n  ((x: y: x + \"-\" + y) \"a\" \"b\")\n  #=> \"a-b\"\n\n  # We can also have named function arguments,\n  # which we'll get to later after we introduce sets.\n\n\n  #  Lists\n  #=========================================\n\n  # Lists are denoted by square brackets.\n\n  (length [1 2 3 \"x\"])\n  #=> 4\n\n  ([1 2 3] ++ [4 5])\n  #=> [1 2 3 4 5]\n\n  (concatLists [[1 2] [3 4] [5]])\n  #=> [1 2 3 4 5]\n\n  (head [1 2 3])\n  #=> 1\n  (tail [1 2 3])\n  #=> [2 3]\n\n  (elemAt [\"a\" \"b\" \"c\" \"d\"] 2)\n  #=> \"c\"\n\n  (elem 2 [1 2 3])\n  #=> true\n  (elem 5 [1 2 3])\n  #=> false\n\n  (filter (n: n < 3) [1 2 3 4])\n  #=> [ 1 2 ]\n\n\n  #  Sets\n  #=========================================\n\n  # A \"set\" is an unordered mapping with string keys.\n  { foo = [1 2]; bar = \"x\"; }\n\n  # The . operator pulls a value out of a set.\n  { a = 1; b = 2; }.a\n  #=> 1\n\n  # The ? operator tests whether a key is present in a set.\n  ({ a = 1; b = 2; } ? a)\n  #=> true\n  ({ a = 1; b = 2; } ? c)\n  #=> false\n\n  # The // operator merges two sets.\n  ({ a = 1; } // { b = 2; })\n  #=> { a = 1; b = 2; }\n\n  # Values on the right override values on the left.\n  ({ a = 1; b = 2; } // { a = 3; c = 4; })\n  #=> { a = 3; b = 2; c = 4; }\n\n  # The rec keyword denotes a \"recursive set\",\n  # in which attributes can refer to each other.\n  (let a = 1; in     { a = 2; b = a; }.b)\n  #=> 1\n  (let a = 1; in rec { a = 2; b = a; }.b)\n  #=> 2\n\n  # Nested sets can be defined in a piecewise fashion.\n  {\n    a.b   = 1;\n    a.c.d = 2;\n    a.c.e = 3;\n  }.a.c\n  #=> { d = 2; e = 3; }\n\n  # Sets are immutable, so you can't redefine an attribute:\n  {\n    a = { b = 1; };\n    a.b = 2;\n  }\n  #=> attribute 'a.b' at (string):3:5 already defined at (string):2:11\n\n  # However, an attribute's set members can also be defined piecewise\n  # way even if the attribute itself has been directly assigned.\n  {\n    a = { b = 1; };\n    a.c = 2;\n  }\n  #=> { a = { b = 1; c = 2; }; }\n\n\n  #  With\n  #=========================================\n\n  # The body of a `with` block is evaluated with\n  # a set's mappings bound to variables.\n  (with { a = 1; b = 2; };\n    a + b)\n  # => 3\n\n  # Inner bindings shadow outer bindings.\n  (with { a = 1; b = 2; };\n    (with { a = 5; };\n      a + b))\n  #=> 7\n\n  # This first line of tutorial starts with \"with builtins;\"\n  # because builtins is a set that contains all of the built-in\n  # functions (length, head, tail, filter, etc.). This saves\n  # us from having to write, for example, \"builtins.length\"\n  # instead of just \"length\".\n\n\n  #  Set patterns\n  #=========================================\n\n  # Sets are useful when we need to pass multiple values\n  # to a function.\n  (args: args.x + \"-\" + args.y) { x = \"a\"; y = \"b\"; }\n  #=> \"a-b\"\n\n  # This can be written more clearly using set patterns.\n  ({x, y}: x + \"-\" + y) { x = \"a\"; y = \"b\"; }\n  #=> \"a-b\"\n\n  # By default, the pattern fails on sets containing extra keys.\n  ({x, y}: x + \"-\" + y) { x = \"a\"; y = \"b\"; z = \"c\"; }\n  #=> error: anonymous function called with unexpected argument ‘z’\n\n  # Adding \", ...\" allows ignoring extra keys.\n  ({x, y, ...}: x + \"-\" + y) { x = \"a\"; y = \"b\"; z = \"c\"; }\n  #=> \"a-b\"\n\n  # The entire set can be bound to a variable using `@`\n  (args@{x, y}: args.x + \"-\" + args.y) { x = \"a\"; y = \"b\"; }\n  #=> \"a-b\"\n\n  #  Errors\n  #=========================================\n\n  # `throw` causes evaluation to abort with an error message.\n  (2 + (throw \"foo\"))\n  #=> error: foo\n\n  # `tryEval` catches thrown errors.\n  (tryEval 42)\n  #=> { success = true; value = 42; }\n  (tryEval (2 + (throw \"foo\")))\n  #=> { success = false; value = false; }\n\n  # `abort` is like throw, but it's fatal; it cannot be caught.\n  (tryEval (abort \"foo\"))\n  #=> error: evaluation aborted with the following error message: ‘foo’\n\n  # `assert` evaluates to the given value if true;\n  # otherwise it throws a catchable exception.\n  (assert 1 < 2; 42)\n  #=> 42\n  (assert 1 > 2; 42)\n  #=> error: assertion failed at (string):1:1\n  (tryEval (assert 1 > 2; 42))\n  #=> { success = false; value = false; }\n\n\n  #  Impurity\n  #=========================================\n\n  # Because repeatability of builds is critical to the Nix package\n  # manager, functional purity is emphasized in the Nix language\n  # used to describe Nix packages. But there are a few impurities.\n\n  # You can refer to environment variables.\n  (getEnv \"HOME\")\n  #=> \"/home/alice\"\n\n  # The trace function is used for debugging. It prints the first\n  # argument to stderr and evaluates to the second argument.\n  (trace 1 2)\n  #=> trace: 1\n  #=> 2\n\n  # You can write files into the Nix store. Although impure, this is\n  # fairly safe because the file name is derived from the hash of\n  # its contents. You can read files from anywhere. In this example,\n  # we write a file into the store, and then read it back out.\n  (let filename = toFile \"foo.txt\" \"hello!\"; in\n    [filename (readFile filename)])\n  #=> [ \"/nix/store/ayh05aay2anx135prqp0cy34h891247x-foo.txt\" \"hello!\" ]\n\n  # We can also download files into the Nix store.\n  (fetchurl \"https://example.com/package-1.2.3.tgz\")\n  #=> \"/nix/store/2drvlh8r57f19s9il42zg89rdr33m2rm-package-1.2.3.tgz\"\n\n]\n```\n\n### Further Reading\n\n* [Nix Manual - Nix expression language](https://nixos.org/nix/manual/#ch-expression-language)\n* [James Fisher - Nix by example - Part 1: The Nix expression language](https://medium.com/@MrJamesFisher/nix-by-example-a0063a1a4c55)\n* [Susan Potter - Nix Cookbook - Nix By Example](https://ops.functionalalgebra.com/nix-by-example/)\n* [Zero to Nix - Nix Tutorial](https://zero-to-nix.com/)\n* [Rommel Martinez - A Gentle Introduction to the Nix Family](https://web.archive.org/web/20210121042658/https://ebzzry.io/en/nix/#nix)\n"
        },
        {
          "name": "nl",
          "type": "tree",
          "content": null
        },
        {
          "name": "nmap.md",
          "type": "blob",
          "size": 5.974609375,
          "content": "---\nname: Nmap\ncategory: tool\ncontributors:\n    - [\"Sebastian Oberdorfer\", \"https://github.com/SOberdorfer\"]\n---\n\n### Learn Nmap in Y Minutes\n\nSo, you’re connected to a network and want to know what else is connected to it.\nMaybe you’re trying to find that mystery device eating up bandwidth or check\nif there are services running you didn’t know about, or you just want to verify\nwhat ports are exposed on your machine?\n\nMeet your swiss-army network knife named **Nmap**!\n\n---\n\n### Introduction\n\n**Nmap 101**  \nNmap is an open-source network scanning tool built by Gordon Lyon. Designed to\nhelp you find devices, open ports and services across your network.\nIt’s a swiss-army knife for network admins, security folks, dev's and anyone\ncurious about what’s living on their network.\n\n**When to Use It**\n\n- **Finding Devices**: What’s connected, and what’s running?\n- **Network Troubleshooting**: Resolve DNS or connection issues.\n- **Vulnerability Detection**: Spotting potentially risky services.\n- **Network Security**: Evaluate exposed ports.\n\n**When *Not* to Use It**\n\n- **Public Networks**: Scanning Starbucks WiFi might land you in hot tea.\n- **Corporate Networks**: Scanning your corporate network without permission, is\n  potentially not allowed.\n- **Global Web**: In some cases scanning across the web can be illegal.\n\nCertain scans are intrusive and can trigger security alarms, so stick to **only\n**\nscanning networks or systems where you have permission. Unauthorized scanning\ncan be considered illegal under cybersecurity laws in many regions, and\ncompanies\nmight view it as a hacking attempt.\n\nUse Nmap extensively and wisely.\n\n---\n\n### Installation\n\nInstallation is straightforward, thoroughly explained on [nmap.org - install](https://nmap.org/book/install.html)\n\n---\n\n### The Basics\n\nThese are low-key scans that safe to use since they don’t do deep probing.\n\n- **Ping Scan**:  \n  A low-impact scan just to check if devices are online. Typically fine on\n  trusted networks.\n    - Scan a single device\n      ```bash\n       nmap -sn 192.168.1.1\n      ```\n    - Scan a range of devices\n      ```bash\n      nmap -sn 192.168.1.1-100\n      ```\n    - Scan a CIDR range of devices\n      ```bash\n      nmap -sn 192.168.1.0/24   # Range 192.168.1.0 to 192.168.1.255\n      nmap -sn 192.168.0.0/16   # Range 192.168.0.0 to 192.168.255.255\n      nmap -sn 192.0.0.0/8      # Range 192.0.0.0 to 192.255.255.255\n      ```\n\n- **Fast Scan**:  \n  Quickly checks the 100 most common ports. Great for a quick peek without\n  probing all 65,535 ports.\n  ```bash\n  nmap -F 192.168.1.1\n  ```\n\n- **Operating System Detection**:  \n  OS detection requires some extra probing, which might be detectable by\n  Intrusion Detection Systems (IDS).\n  ```bash\n  nmap -O 192.168.1.1\n  ```\n\n- **Output to File**  \n  Specific scanning and saving the output to a file, enables you to scan more\n  thorough without overloading your network.\n    - Plain text\n      ```bash\n      nmap -oN output.txt 192.168.1.1 \n      ```\n    - XML, handy for using elsewhere\n      ```bash\n      nmap -oX output.xml 192.168.1.1\n      ```\n\n---\n\n### Moving Up: More Insightful Scans\n\nThese scans dig a bit deeper, so they may trigger alarms on security systems.\nUse these only on networks where you have explicit permission to scan.\n\n- **Service Version Detection**:  \n  Tries to identify versions of services on open ports. Useful but more\n  invasive.\n  ```bash\n  nmap -sV 192.168.1.1\n  ```\n\n- **Aggressive Scan**:  \n  The aggressive scan mode (`-A`) combines multiple checks, like OS detection,\n  version detection and traceroute. This is likely to be flagged on\n  any network and can be considered illegal on networks you don’t own.\n  ```bash\n  nmap -A 192.168.1.1\n  ```\n\n- **Scanning Specific Ports**:  \n  Narrowing scans to specific ports is generally fine.\n    - Scan a specific port\n      ```bash\n      nmap -p 80 192.168.1.1\n      ```\n    - Scan a range of ports\n      ```bash\n      nmap -p 1-100 192.168.1.1\n      ```\n\n---\n\n### Advanced Scans: When You’re the Power User\n\nSo, you’re getting into the advanced stuff—maybe testing your own firewall or\nfinding rogue services.\nThe following scans are loud and intrusive that definitely trigger security\ndefenses.\n\n- **Scripted Scans (NSE)**  \n  Nmap’s script engine is like a toolbox of plugins. Need to check for a\n  specific vulnerability? There’s likely an NSE script for it.\n  ```bash\n  nmap --script=http-vuln-cve2021-12345 192.168.1.1\n  ```\n\n- **Aggressive and fastest Scans**:\n  `-T5` turns up to knob to 11. `-A` scans all ports.\n  Use it sparse and only if you really need full visibility.\n  ```bash\n  nmap -T5 -A 192.168.1.1\n  ```\n\n- **TCP and UDP Combined Scans**:  \n  Combining TCP and UDP scans (`-sS` for SYN scans and `-sU` for UDP) gives\n  complete coverage but increases the scan’s footprint, making it detectable.\n  ```bash\n  nmap -sS -sU 192.168.1.1\n  ```\n\n- **Spoofing and Decoy Scans**:  \n  Using decoys (`-D`) or spoofed IP addresses to hide your real IP can be seen\n  as deceptive. These scans are easily flagged by IDS and could lead to legal\n  repercussions if you’re not authorized.\n  ```bash\n  # 10 random IP decoys\n  nmap -D RND:10 192.168.1.1 \n  ```\n\n---\n\n### Practical Tips and Tricks\n\n**Timing Templates**  \nNmap has timing options from `-T0` (paranoid) to `-T5` (insane). Stick with\n`-T2` or `-T3` for a good balance between speed and not making too much noise.\nMore\non [nmap - timing-templates](https://nmap.org/book/performance-timing-templates.html)\n\n**Check Out Nmap’s Scripts**  \nNSE scripts make Nmap super versatile. From DNS enumeration to vulnerability\nchecks, there’s probably a script for whatever you need.\nMore on [nmap - Nmap Scripting Engine](https://nmap.org/book/man-nse.html)\n\n**Use aggressive scans and decoys only on networks you own** or with formal\nauthorization, such as during a penetration test with client permission. If\nyou’re running scans at work, talk to the network admins first.\n\n**Know When to Stop**  \nOnce you’ve got the info you need, wrap it up. It’s easy to get scan-happy.\n\n---\n\nHappy scanning!\n"
        },
        {
          "name": "no",
          "type": "tree",
          "content": null
        },
        {
          "name": "objective-c.md",
          "type": "blob",
          "size": 31.3828125,
          "content": "---\nname: Objective-C\ncontributors:\n    - [\"Eugene Yagrushkin\", \"www.about.me/yagrushkin\"]\n    - [\"Yannick Loriot\", \"https://github.com/YannickL\"]\n    - [\"Levi Bostian\", \"https://github.com/levibostian\"]\n    - [\"Clayton Walker\", \"https://github.com/cwalk\"]\n    - [\"Fernando Valverde\", \"http://visualcosita.xyz\"]\nfilename: LearnObjectiveC.m\n---\n\nObjective-C is the main programming language used by Apple for the macOS and iOS operating systems and their respective frameworks, Cocoa and Cocoa Touch.\nIt is a general-purpose, object-oriented programming language that adds Smalltalk-style messaging to the C programming language.\n\n```objective-c\n// Single-line comments start with //\n\n/*\nMulti-line comments look like this\n*/\n\n// XCode supports pragma mark directive that improve jump bar readability\n#pragma mark Navigation Functions // New tag on jump bar named 'Navigation Functions'\n#pragma mark - Navigation Functions // Same tag, now with a separator\n\n// Imports the Foundation headers with #import\n// Use <> to import global files (in general frameworks)\n// Use \"\" to import local files (from project)\n#import <Foundation/Foundation.h>\n#import \"MyClass.h\"\n\n// If you enable modules for iOS >= 7.0 or OS X >= 10.9 projects in\n// Xcode 5 you can import frameworks like that:\n@import Foundation;\n\n// Your program's entry point is a function called\n// main with an integer return type\nint main (int argc, const char * argv[])\n{\n    // Create an autorelease pool to manage the memory into the program\n    NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n    // If using automatic reference counting (ARC), use @autoreleasepool instead:\n    @autoreleasepool {\n\n    // Use NSLog to print lines to the console\n    NSLog(@\"Hello World!\"); // Print the string \"Hello World!\"\n\n    ///////////////////////////////////////\n    // Types & Variables\n    ///////////////////////////////////////\n\n    // Primitive declarations\n    int myPrimitive1  = 1;\n    long myPrimitive2 = 234554664565;\n\n    // Object declarations\n    // Put the * in front of the variable names for strongly-typed object declarations\n    MyClass *myObject1 = nil;  // Strong typing\n    id       myObject2 = nil;  // Weak typing\n    // %@ is an object\n    // 'description' is a convention to display the value of the Objects\n    NSLog(@\"%@ and %@\", myObject1, [myObject2 description]); // prints => \"(null) and (null)\"\n\n    // String\n    NSString *worldString = @\"World\";\n    NSLog(@\"Hello %@!\", worldString); // prints => \"Hello World!\"\n    // NSMutableString is a mutable version of the NSString object\n    NSMutableString *mutableString = [NSMutableString stringWithString:@\"Hello\"];\n    [mutableString appendString:@\" World!\"];\n    NSLog(@\"%@\", mutableString); // prints => \"Hello World!\"\n\n    // Character literals\n    NSNumber *theLetterZNumber = @'Z';\n    char theLetterZ            = [theLetterZNumber charValue]; // or 'Z'\n    NSLog(@\"%c\", theLetterZ);\n\n    // Integral literals\n    NSNumber *fortyTwoNumber = @42;\n    int fortyTwo             = [fortyTwoNumber intValue]; // or 42\n    NSLog(@\"%i\", fortyTwo);\n\n    NSNumber *fortyTwoUnsignedNumber = @42U;\n    unsigned int fortyTwoUnsigned    = [fortyTwoUnsignedNumber unsignedIntValue]; // or 42\n    NSLog(@\"%u\", fortyTwoUnsigned);\n\n    NSNumber *fortyTwoShortNumber = [NSNumber numberWithShort:42];\n    short fortyTwoShort           = [fortyTwoShortNumber shortValue]; // or 42\n    NSLog(@\"%hi\", fortyTwoShort);\n\n    NSNumber *fortyOneShortNumber   = [NSNumber numberWithShort:41];\n    unsigned short fortyOneUnsigned = [fortyOneShortNumber unsignedShortValue]; // or 41\n    NSLog(@\"%u\", fortyOneUnsigned);\n\n    NSNumber *fortyTwoLongNumber = @42L;\n    long fortyTwoLong            = [fortyTwoLongNumber longValue]; // or 42\n    NSLog(@\"%li\", fortyTwoLong);\n\n    NSNumber *fiftyThreeLongNumber   = @53L;\n    unsigned long fiftyThreeUnsigned = [fiftyThreeLongNumber unsignedLongValue]; // or 53\n    NSLog(@\"%lu\", fiftyThreeUnsigned);\n\n    // Floating point literals\n    NSNumber *piFloatNumber = @3.141592654F;\n    float piFloat           = [piFloatNumber floatValue]; // or 3.141592654f\n    NSLog(@\"%f\", piFloat); // prints => 3.141592654\n    NSLog(@\"%5.2f\", piFloat); // prints => \" 3.14\"\n\n    NSNumber *piDoubleNumber = @3.1415926535;\n    double piDouble          = [piDoubleNumber doubleValue]; // or 3.1415926535\n    NSLog(@\"%f\", piDouble);\n    NSLog(@\"%4.2f\", piDouble); // prints => \"3.14\"\n\n    // NSDecimalNumber is a fixed-point class that's more precise than float or double\n    NSDecimalNumber *oneDecNum = [NSDecimalNumber decimalNumberWithString:@\"10.99\"];\n    NSDecimalNumber *twoDecNum = [NSDecimalNumber decimalNumberWithString:@\"5.002\"];\n    // NSDecimalNumber isn't able to use standard +, -, *, / operators so it provides its own:\n    [oneDecNum decimalNumberByAdding:twoDecNum];\n    [oneDecNum decimalNumberBySubtracting:twoDecNum];\n    [oneDecNum decimalNumberByMultiplyingBy:twoDecNum];\n    [oneDecNum decimalNumberByDividingBy:twoDecNum];\n    NSLog(@\"%@\", oneDecNum); // prints => 10.99 as NSDecimalNumber is immutable\n\n    // BOOL literals\n    NSNumber *yesNumber = @YES;\n    NSNumber *noNumber  = @NO;\n    // or\n    BOOL yesBool = YES;\n    BOOL noBool  = NO;\n    NSLog(@\"%i\", yesBool); // prints => 1\n\n    // Array object\n    // May contain different data types, but must be an Objective-C object\n    NSArray *anArray      = @[@1, @2, @3, @4];\n    NSNumber *thirdNumber = anArray[2];\n    NSLog(@\"Third number = %@\", thirdNumber); // prints => \"Third number = 3\"\n    // Since Xcode 7, NSArray objects can be typed (Generics)\n    NSArray<NSString *> *stringArray = @[@\"hello\", @\"world\"];\n    // NSMutableArray is a mutable version of NSArray, allowing you to change\n    // the items in the array and to extend or shrink the array object.\n    // Convenient, but not as efficient as NSArray.\n    NSMutableArray *mutableArray = [NSMutableArray arrayWithCapacity:2];\n    [mutableArray addObject:@\"Hello\"];\n    [mutableArray addObject:@\"World\"];\n    [mutableArray removeObjectAtIndex:0];\n    NSLog(@\"%@\", [mutableArray objectAtIndex:0]); // prints => \"World\"\n\n    // Dictionary object\n    NSDictionary *aDictionary = @{ @\"key1\" : @\"value1\", @\"key2\" : @\"value2\" };\n    NSObject *valueObject     = aDictionary[@\"A Key\"];\n    NSLog(@\"Object = %@\", valueObject); // prints => \"Object = (null)\"\n    // Since Xcode 7, NSDictionary objects can be typed (Generics)\n    NSDictionary<NSString *, NSNumber *> *numberDictionary = @{@\"a\": @1, @\"b\": @2};\n    // NSMutableDictionary also available as a mutable dictionary object\n    NSMutableDictionary *mutableDictionary = [NSMutableDictionary dictionaryWithCapacity:2];\n    [mutableDictionary setObject:@\"value1\" forKey:@\"key1\"];\n    [mutableDictionary setObject:@\"value2\" forKey:@\"key2\"];\n    [mutableDictionary removeObjectForKey:@\"key1\"];\n\n    // Change types from Mutable To Immutable\n    //In general [object mutableCopy] will make the object mutable whereas [object copy] will make the object immutable\n    NSMutableDictionary *aMutableDictionary = [aDictionary mutableCopy];\n    NSDictionary *mutableDictionaryChanged = [mutableDictionary copy];\n\n\n    // Set object\n    NSSet *set = [NSSet setWithObjects:@\"Hello\", @\"Hello\", @\"World\", nil];\n    NSLog(@\"%@\", set); // prints => {(Hello, World)} (may be in different order)\n    // Since Xcode 7, NSSet objects can be typed (Generics)\n    NSSet<NSString *> *stringSet = [NSSet setWithObjects:@\"hello\", @\"world\", nil];\n    // NSMutableSet also available as a mutable set object\n    NSMutableSet *mutableSet = [NSMutableSet setWithCapacity:2];\n    [mutableSet addObject:@\"Hello\"];\n    [mutableSet addObject:@\"Hello\"];\n    NSLog(@\"%@\", mutableSet); // prints => {(Hello)}\n\n    ///////////////////////////////////////\n    // Operators\n    ///////////////////////////////////////\n\n    // The operators works like in the C language\n    // For example:\n    2 + 5; // => 7\n    4.2f + 5.1f; // => 9.3f\n    3 == 2; // => 0 (NO)\n    3 != 2; // => 1 (YES)\n    1 && 1; // => 1 (Logical and)\n    0 || 1; // => 1 (Logical or)\n    ~0x0F; // => 0xF0 (bitwise negation)\n    0x0F & 0xF0; // => 0x00 (bitwise AND)\n    0x01 << 1; // => 0x02 (bitwise left shift (by 1))\n\n    ///////////////////////////////////////\n    // Control Structures\n    ///////////////////////////////////////\n\n    // If-Else statement\n    if (NO)\n    {\n        NSLog(@\"I am never run\");\n    } else if (0)\n    {\n        NSLog(@\"I am also never run\");\n    } else\n    {\n        NSLog(@\"I print\");\n    }\n\n    // Switch statement\n    switch (2)\n    {\n        case 0:\n        {\n            NSLog(@\"I am never run\");\n        } break;\n        case 1:\n        {\n            NSLog(@\"I am also never run\");\n        } break;\n        default:\n        {\n            NSLog(@\"I print\");\n        } break;\n    }\n\n    // While loops statements\n    int ii = 0;\n    while (ii < 4)\n    {\n        NSLog(@\"%d,\", ii++); // ii++ increments ii in-place, after using its value\n    } // prints => \"0,\"\n      //           \"1,\"\n      //           \"2,\"\n      //           \"3,\"\n\n    // For loops statements\n    int jj;\n    for (jj=0; jj < 4; jj++)\n    {\n        NSLog(@\"%d,\", jj);\n    } // prints => \"0,\"\n      //           \"1,\"\n      //           \"2,\"\n      //           \"3,\"\n\n    // Foreach statements\n    NSArray *values = @[@0, @1, @2, @3];\n    for (NSNumber *value in values)\n    {\n        NSLog(@\"%@,\", value);\n    } // prints => \"0,\"\n      //           \"1,\"\n      //           \"2,\"\n      //           \"3,\"\n\n    // Object for loop statement. Can be used with any Objective-C object type\n    for (id item in values) {\n        NSLog(@\"%@,\", item);\n    } // prints => \"0,\"\n      //           \"1,\"\n      //           \"2,\"\n      //           \"3,\"\n\n    // Try-Catch-Finally statements\n    @try\n    {\n        // Your statements here\n        @throw [NSException exceptionWithName:@\"FileNotFoundException\"\n                            reason:@\"File Not Found on System\" userInfo:nil];\n    } @catch (NSException * e) // use: @catch (id exceptionName) to catch all objects.\n    {\n        NSLog(@\"Exception: %@\", e);\n    } @finally\n    {\n        NSLog(@\"Finally. Time to clean up.\");\n    } // prints => \"Exception: File Not Found on System\"\n      //           \"Finally. Time to clean up.\"\n\n    // NSError objects are useful for function arguments to populate on user mistakes.\n    NSError *error = [NSError errorWithDomain:@\"Invalid email.\" code:4 userInfo:nil];\n\n    ///////////////////////////////////////\n    // Objects\n    ///////////////////////////////////////\n\n    // Create an object instance by allocating memory and initializing it\n    // An object is not fully functional until both steps have been completed\n    MyClass *myObject = [[MyClass alloc] init];\n\n    // The Objective-C model of object-oriented programming is based on message\n    // passing to object instances\n    // In Objective-C one does not simply call a method; one sends a message\n    [myObject instanceMethodWithParameter:@\"Steve Jobs\"];\n\n    // Clean up the memory you used into your program\n    [pool drain];\n\n    // End of @autoreleasepool\n    }\n\n    // End the program\n    return 0;\n}\n\n///////////////////////////////////////\n// Classes And Functions\n///////////////////////////////////////\n\n// Declare your class in a header file (MyClass.h):\n// Class declaration syntax:\n// @interface ClassName : ParentClassName <ImplementedProtocols>\n// {\n//    type name; <= variable declarations;\n// }\n// @property type name; <= property declarations\n// -/+ (type) Method declarations; <= Method declarations\n// @end\n@interface MyClass : NSObject <MyProtocol> // NSObject is Objective-C's base object class.\n{\n    // Instance variable declarations (can exist in either interface or implementation file)\n    int count; // Protected access by default.\n    @private id data; // Private access (More convenient to declare in implementation file)\n    NSString *name;\n}\n// Convenient notation for public access variables to auto generate a setter method\n// By default, setter method name is 'set' followed by @property variable name\n@property int propInt; // Setter method name = 'setPropInt'\n@property (copy) id copyId; // (copy) => Copy the object during assignment\n// (readonly) => Cannot set value outside @interface\n@property (readonly) NSString *roString; // Use @synthesize in @implementation to create accessor\n// You can customize the getter and setter names instead of using default 'set' name:\n@property (getter=lengthGet, setter=lengthSet:) int length;\n\n// Methods\n+/- (return type)methodSignature:(Parameter Type *)parameterName;\n\n// + for class methods:\n+ (NSString *)classMethod;\n+ (MyClass *)myClassFromHeight:(NSNumber *)defaultHeight;\n\n// - for instance methods:\n- (NSString *)instanceMethodWithParameter:(NSString *)string;\n- (NSNumber *)methodAParameterAsString:(NSString*)string andAParameterAsNumber:(NSNumber *)number;\n\n// Constructor methods with arguments:\n- (id)initWithDistance:(int)defaultDistance;\n// Objective-C method names are very descriptive. Always name methods according to their arguments\n\n@end // States the end of the interface\n\n\n// To access public variables from the implementation file, @property generates a setter method\n// automatically. Method name is 'set' followed by @property variable name:\nMyClass *myClass = [[MyClass alloc] init]; // create MyClass object instance\n[myClass setCount:10];\nNSLog(@\"%d\", [myClass count]); // prints => 10\n// Or using the custom getter and setter method defined in @interface:\n[myClass lengthSet:32];\nNSLog(@\"%i\", [myClass lengthGet]); // prints => 32\n// For convenience, you may use dot notation to set and access object instance variables:\nmyClass.count = 45;\nNSLog(@\"%i\", myClass.count); // prints => 45\n\n// Call class methods:\nNSString *classMethodString = [MyClass classMethod];\nMyClass *classFromName = [MyClass myClassFromName:@\"Hello\"];\n\n// Call instance methods:\nMyClass *myClass = [[MyClass alloc] init]; // Create MyClass object instance\nNSString *stringFromInstanceMethod = [myClass instanceMethodWithParameter:@\"Hello\"];\n\n// Selectors\n// Way to dynamically represent methods. Used to call methods of a class, pass methods\n// through functions to tell other classes they should call it, and to save methods\n// as a variable\n// SEL is the data type. @selector() returns a selector from method name provided\n// methodAParameterAsString:andAParameterAsNumber: is method name for method in MyClass\nSEL selectorVar = @selector(methodAParameterAsString:andAParameterAsNumber:);\nif ([myClass respondsToSelector:selectorVar]) { // Checks if class contains method\n    // Must put all method arguments into one object to send to performSelector function\n    NSArray *arguments = [NSArray arrayWithObjects:@\"Hello\", @4, nil];\n    [myClass performSelector:selectorVar withObject:arguments]; // Calls the method\n} else {\n    // NSStringFromSelector() returns a NSString of the method name of a given selector\n    NSLog(@\"MyClass does not have method: %@\", NSStringFromSelector(selectedVar));\n}\n\n// Implement the methods in an implementation (MyClass.m) file:\n@implementation MyClass {\n    long distance; // Private access instance variable\n    NSNumber *height;\n}\n\n// To access a public variable from the interface file, use '_' followed by variable name:\n_count = 5; // References \"int count\" from MyClass interface\n// Access variables defined in implementation file:\ndistance = 18; // References \"long distance\" from MyClass implementation\n// To use @property variable in implementation, use @synthesize to create accessor variable:\n@synthesize roString = _roString; // _roString available now in @implementation\n\n// Called before calling any class methods or instantiating any objects\n+ (void)initialize\n{\n    if (self == [MyClass class]) {\n        distance = 0;\n    }\n}\n\n// Counterpart to initialize method. Called when an object's reference count is zero\n- (void)dealloc\n{\n    [height release]; // If not using ARC, make sure to release class variable objects\n    [super dealloc];  // and call parent class dealloc\n}\n\n// Constructors are a way of creating instances of a class\n// This is a default constructor which is called when the object is initialized.\n- (id)init\n{\n    if ((self = [super init])) // 'super' used to access methods from parent class\n    {\n        self.count = 1; // 'self' used for object to call itself\n    }\n    return self;\n}\n// Can create constructors that contain arguments:\n- (id)initWithDistance:(int)defaultDistance\n{\n    distance = defaultDistance;\n    return self;\n}\n\n+ (NSString *)classMethod\n{\n    return @\"Some string\";\n}\n\n+ (MyClass *)myClassFromHeight:(NSNumber *)defaultHeight\n{\n    height = defaultHeight;\n    return [[self alloc] init];\n}\n\n- (NSString *)instanceMethodWithParameter:(NSString *)string\n{\n    return @\"New string\";\n}\n\n- (NSNumber *)methodAParameterAsString:(NSString*)string andAParameterAsNumber:(NSNumber *)number\n{\n    return @42;\n}\n\n// Objective-C does not have private method declarations, but you can simulate them.\n// To simulate a private method, create the method in the @implementation but not in the @interface.\n- (NSNumber *)secretPrivateMethod {\n    return @72;\n}\n[self secretPrivateMethod]; // Calls private method\n\n// Methods declared into MyProtocol\n- (void)myProtocolMethod\n{\n    // statements\n}\n\n@end // States the end of the implementation\n\n///////////////////////////////////////\n// Categories\n///////////////////////////////////////\n// A category is a group of methods designed to extend a class. They allow you to add new methods\n// to an existing class for organizational purposes. This is not to be mistaken with subclasses.\n// Subclasses are meant to CHANGE functionality of an object while categories instead ADD\n// functionality to an object.\n// Categories allow you to:\n// -- Add methods to an existing class for organizational purposes.\n// -- Allow you to extend Objective-C object classes (ex: NSString) to add your own methods.\n// -- Add ability to create protected and private methods to classes.\n// NOTE: Do not override methods of the base class in a category even though you have the ability\n// to. Overriding methods may cause compiler errors later between different categories and it\n// ruins the purpose of categories to only ADD functionality. Subclass instead to override methods.\n\n// Here is a simple Car base class.\n@interface Car : NSObject\n\n@property NSString *make;\n@property NSString *color;\n\n- (void)turnOn;\n- (void)accelerate;\n\n@end\n\n// And the simple Car base class implementation:\n#import \"Car.h\"\n\n@implementation Car\n\n@synthesize make = _make;\n@synthesize color = _color;\n\n- (void)turnOn {\n    NSLog(@\"Car is on.\");\n}\n- (void)accelerate {\n    NSLog(@\"Accelerating.\");\n}\n\n@end\n\n// Now, if we wanted to create a Truck object, we would instead create a subclass of Car as it would\n// be changing the functionality of the Car to behave like a truck. But lets say we want to just add\n// functionality to this existing Car. A good example would be to clean the car. So we would create\n// a category to add these cleaning methods:\n// @interface filename: Car+Clean.h (BaseClassName+CategoryName.h)\n#import \"Car.h\" // Make sure to import base class to extend.\n\n@interface Car (Clean) // The category name is inside () following the name of the base class.\n\n- (void)washWindows; // Names of the new methods we are adding to our Car object.\n- (void)wax;\n\n@end\n\n// @implementation filename: Car+Clean.m (BaseClassName+CategoryName.m)\n#import \"Car+Clean.h\" // Import the Clean category's @interface file.\n\n@implementation Car (Clean)\n\n- (void)washWindows {\n    NSLog(@\"Windows washed.\");\n}\n- (void)wax {\n    NSLog(@\"Waxed.\");\n}\n\n@end\n\n// Any Car object instance has the ability to use a category. All they need to do is import it:\n#import \"Car+Clean.h\" // Import as many different categories as you want to use.\n#import \"Car.h\" // Also need to import base class to use it's original functionality.\n\nint main (int argc, const char * argv[]) {\n    @autoreleasepool {\n        Car *mustang = [[Car alloc] init];\n        mustang.color = @\"Red\";\n        mustang.make = @\"Ford\";\n\n        [mustang turnOn]; // Use methods from base Car class.\n        [mustang washWindows]; // Use methods from Car's Clean category.\n    }\n    return 0;\n}\n\n// Objective-C does not have protected method declarations but you can simulate them.\n// Create a category containing all of the protected methods, then import it ONLY into the\n// @implementation file of a class belonging to the Car class:\n@interface Car (Protected) // Naming category 'Protected' to remember methods are protected.\n\n- (void)lockCar; // Methods listed here may only be created by Car objects.\n\n@end\n//To use protected methods, import the category, then implement the methods:\n#import \"Car+Protected.h\" // Remember, import in the @implementation file only.\n\n@implementation Car\n\n- (void)lockCar {\n    NSLog(@\"Car locked.\"); // Instances of Car can't use lockCar because it's not in the @interface.\n}\n\n@end\n\n///////////////////////////////////////\n// Extensions\n///////////////////////////////////////\n// Extensions allow you to override public access property attributes and methods of an @interface.\n// @interface filename: Shape.h\n@interface Shape : NSObject // Base Shape class extension overrides below.\n\n@property (readonly) NSNumber *numOfSides;\n\n- (int)getNumOfSides;\n\n@end\n// You can override numOfSides variable or getNumOfSides method to edit them with an extension:\n// @implementation filename: Shape.m\n#import \"Shape.h\"\n// Extensions live in the same file as the class @implementation.\n@interface Shape () // () after base class name declares an extension.\n\n@property (copy) NSNumber *numOfSides; // Make numOfSides copy instead of readonly.\n-(NSNumber)getNumOfSides; // Make getNumOfSides return a NSNumber instead of an int.\n-(void)privateMethod; // You can also create new private methods inside of extensions.\n\n@end\n// The main @implementation:\n@implementation Shape\n\n@synthesize numOfSides = _numOfSides;\n\n-(NSNumber)getNumOfSides { // All statements inside of extension must be in the @implementation.\n    return _numOfSides;\n}\n-(void)privateMethod {\n    NSLog(@\"Private method created by extension. Shape instances cannot call me.\");\n}\n\n@end\n\n// Starting in Xcode 7.0, you can create Generic classes,\n// allowing you to provide greater type safety and clarity\n// without writing excessive boilerplate.\n@interface Result<__covariant A> : NSObject\n\n- (void)handleSuccess:(void(^)(A))success\n              failure:(void(^)(NSError *))failure;\n\n@property (nonatomic) A object;\n\n@end\n\n// we can now declare instances of this class like\nResult<NSNumber *> *result;\nResult<NSArray *> *result;\n\n// Each of these cases would be equivalent to rewriting Result's interface\n// and substituting the appropriate type for A\n@interface Result : NSObject\n- (void)handleSuccess:(void(^)(NSArray *))success\n              failure:(void(^)(NSError *))failure;\n@property (nonatomic) NSArray * object;\n@end\n\n@interface Result : NSObject\n- (void)handleSuccess:(void(^)(NSNumber *))success\n              failure:(void(^)(NSError *))failure;\n@property (nonatomic) NSNumber * object;\n@end\n\n// It should be obvious, however, that writing one\n//  Class to solve a problem is always preferable to writing two\n\n// Note that Clang will not accept generic types in @implementations,\n// so your @implemnation of Result would have to look like this:\n\n@implementation Result\n\n- (void)handleSuccess:(void (^)(id))success\n              failure:(void (^)(NSError *))failure {\n  // Do something\n}\n\n@end\n\n\n///////////////////////////////////////\n// Protocols\n///////////////////////////////////////\n// A protocol declares methods that can be implemented by any class.\n// Protocols are not classes themselves. They simply define an interface\n// that other objects are responsible for implementing.\n// @protocol filename: \"CarUtilities.h\"\n@protocol CarUtilities <NSObject> // <NSObject> => Name of another protocol this protocol includes.\n    @property BOOL engineOn; // Adopting class must @synthesize all defined @properties and\n    - (void)turnOnEngine; // all defined methods.\n@end\n// Below is an example class implementing the protocol.\n#import \"CarUtilities.h\" // Import the @protocol file.\n\n@interface Car : NSObject <CarUtilities> // Name of protocol goes inside <>\n    // You don't need the @property or method names here for CarUtilities. Only @implementation does.\n- (void)turnOnEngineWithUtilities:(id <CarUtilities>)car; // You can use protocols as data too.\n@end\n// The @implementation needs to implement the @properties and methods for the protocol.\n@implementation Car : NSObject <CarUtilities>\n\n@synthesize engineOn = _engineOn; // Create a @synthesize statement for the engineOn @property.\n\n- (void)turnOnEngine { // Implement turnOnEngine however you would like. Protocols do not define\n    _engineOn = YES; // how you implement a method, it just requires that you do implement it.\n}\n// You may use a protocol as data as you know what methods and variables it has implemented.\n- (void)turnOnEngineWithCarUtilities:(id <CarUtilities>)objectOfSomeKind {\n    [objectOfSomeKind engineOn]; // You have access to object variables\n    [objectOfSomeKind turnOnEngine]; // and the methods inside.\n    [objectOfSomeKind engineOn]; // May or may not be YES. Class implements it however it wants.\n}\n\n@end\n// Instances of Car now have access to the protocol.\nCar *carInstance = [[Car alloc] init];\n[carInstance setEngineOn:NO];\n[carInstance turnOnEngine];\nif ([carInstance engineOn]) {\n    NSLog(@\"Car engine is on.\"); // prints => \"Car engine is on.\"\n}\n// Make sure to check if an object of type 'id' implements a protocol before calling protocol methods:\nif ([myClass conformsToProtocol:@protocol(CarUtilities)]) {\n    NSLog(@\"This does not run as the MyClass class does not implement the CarUtilities protocol.\");\n} else if ([carInstance conformsToProtocol:@protocol(CarUtilities)]) {\n    NSLog(@\"This does run as the Car class implements the CarUtilities protocol.\");\n}\n// Categories may implement protocols as well: @interface Car (CarCategory) <CarUtilities>\n// You may implement many protocols: @interface Car : NSObject <CarUtilities, CarCleaning>\n// NOTE: If two or more protocols rely on each other, make sure to forward-declare them:\n#import \"Brother.h\"\n\n@protocol Brother; // Forward-declare statement. Without it, compiler will throw error.\n\n@protocol Sister <NSObject>\n\n- (void)beNiceToBrother:(id <Brother>)brother;\n\n@end\n\n// See the problem is that Sister relies on Brother, and Brother relies on Sister.\n#import \"Sister.h\"\n\n@protocol Sister; // These lines stop the recursion, resolving the issue.\n\n@protocol Brother <NSObject>\n\n- (void)beNiceToSister:(id <Sister>)sister;\n\n@end\n\n\n///////////////////////////////////////\n// Blocks\n///////////////////////////////////////\n// Blocks are statements of code, just like a function, that are able to be used as data.\n// Below is a simple block with an integer argument that returns the argument plus 4.\n^(int n) {\n    return n + 4;\n}\nint (^addUp)(int n); // Declare a variable to store a block.\nvoid (^noParameterBlockVar)(void); // Example variable declaration of block with no arguments.\n// Blocks have access to variables in the same scope. But the variables are readonly and the\n// value passed to the block is the value of the variable when the block is created.\nint outsideVar = 17; // If we edit outsideVar after declaring addUp, outsideVar is STILL 17.\n__block long mutableVar = 3; // __block makes variables writable to blocks, unlike outsideVar.\naddUp = ^(int n) { // Remove (int n) to have a block that doesn't take in any parameters.\n    NSLog(@\"You may have as many lines in a block as you would like.\");\n    NSSet *blockSet; // Also, you can declare local variables.\n    mutableVar = 32; // Assigning new value to __block variable.\n    return n + outsideVar; // Return statements are optional.\n}\nint addUp = addUp(10 + 16); // Calls block code with arguments.\n// Blocks are often used as arguments to functions to be called later, or for callbacks.\n@implementation BlockExample : NSObject\n\n - (void)runBlock:(void (^)(NSString))block {\n    NSLog(@\"Block argument returns nothing and takes in a NSString object.\");\n    block(@\"Argument given to block to execute.\"); // Calling block.\n }\n\n @end\n\n\n///////////////////////////////////////\n// Memory Management\n///////////////////////////////////////\n/*\nFor each object used in an application, memory must be allocated for that object. When the application\nis done using that object, memory must be deallocated to ensure application efficiency.\nObjective-C does not use garbage collection and instead uses reference counting. As long as\nthere is at least one reference to an object (also called \"owning\" an object), then the object\nwill be available to use (known as \"ownership\").\n\nWhen an instance owns an object, its reference counter is increments by one. When the\nobject is released, the reference counter decrements by one. When reference count is zero,\nthe object is removed from memory.\n\nWith all object interactions, follow the pattern of:\n(1) create the object, (2) use the object, (3) then free the object from memory.\n*/\n\nMyClass *classVar = [MyClass alloc]; // 'alloc' sets classVar's reference count to one. Returns pointer to object\n[classVar release]; // Decrements classVar's reference count\n// 'retain' claims ownership of existing object instance and increments reference count. Returns pointer to object\nMyClass *newVar = [classVar retain]; // If classVar is released, object is still in memory because newVar is owner\n[classVar autorelease]; // Removes ownership of object at end of @autoreleasepool block. Returns pointer to object\n\n// @property can use 'retain' and 'assign' as well for small convenient definitions\n@property (retain) MyClass *instance; // Release old value and retain a new one (strong reference)\n@property (assign) NSSet *set; // Pointer to new value without retaining/releasing old (weak reference)\n\n// Automatic Reference Counting (ARC)\n// Because memory management can be a pain, Xcode 4.2 and iOS 4 introduced Automatic Reference Counting (ARC).\n// ARC is a compiler feature that inserts retain, release, and autorelease automatically for you, so when using ARC,\n// you must not use retain, release, or autorelease\nMyClass *arcMyClass = [[MyClass alloc] init];\n// ... code using arcMyClass\n// Without ARC, you will need to call: [arcMyClass release] after you're done using arcMyClass. But with ARC,\n// there is no need. It will insert this release statement for you\n\n// As for the 'assign' and 'retain' @property attributes, with ARC you use 'weak' and 'strong'\n@property (weak) MyClass *weakVar; // 'weak' does not take ownership of object. If original instance's reference count\n// is set to zero, weakVar will automatically receive value of nil to avoid application crashing\n@property (strong) MyClass *strongVar; // 'strong' takes ownership of object. Ensures object will stay in memory to use\n\n// For regular variables (not @property declared variables), use the following:\n__strong NSString *strongString; // Default. Variable is retained in memory until it leaves it's scope\n__weak NSSet *weakSet; // Weak reference to existing object. When existing object is released, weakSet is set to nil\n__unsafe_unretained NSArray *unsafeArray; // Like __weak, but unsafeArray not set to nil when existing object is released\n```\n\n## Further Reading\n\n[Wikipedia Objective-C](http://en.wikipedia.org/wiki/Objective-C)\n\n[Programming with Objective-C. Apple PDF book](https://developer.apple.com/library/ios/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/ProgrammingWithObjectiveC.pdf)\n\n[Programming with Objective-C for iOS](https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/ObjectiveC.html)\n\n[Programming with Objective-C for Mac OSX](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html)\n\n[iOS For High School Students: Getting Started](http://www.raywenderlich.com/5600/ios-for-high-school-students-getting-started)\n"
        },
        {
          "name": "ocaml.md",
          "type": "blob",
          "size": 15.607421875,
          "content": "---\nname: OCaml\nfilename: learnocaml.ml\ncontributors:\n    - [\"Daniil Baturin\", \"http://baturin.org/\"]\n    - [\"Stanislav Modrak\", \"https://stanislav.gq/\"]\n    - [\"Luke Tong\", \"https://lukert.me/\"]\n---\nOCaml is a strictly evaluated functional language with some imperative\nfeatures.\n\nAlong with Standard ML and its dialects it belongs to ML language family.\nF# is also heavily influenced by OCaml.\n\nJust like Standard ML, OCaml features both an interpreter, that can be\nused interactively, and a compiler.\nThe interpreter binary is normally called `ocaml` and the compiler is `ocamlopt`.\nThere is also a bytecode compiler, `ocamlc`, but there are few reasons to use it.\n\nIt also includes a package manager, `opam`, and a build system, `dune`.\n\nIt is strongly and statically typed, but instead of using manually written\ntype annotations, it infers types of expressions using the\n[Hindley-Milner](https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system)\nalgorithm.\nIt makes type annotations unnecessary in most cases, but can be a major\nsource of confusion for beginners.\n\nWhen you are in the top level loop, OCaml will print the inferred type\nafter you enter an expression\n\n```\n# let inc x = x\t+ 1 ;;\nval inc : int -> int = <fun>\n# let a = 99 ;;\nval a : int = 99\n```\n\nFor a source file you can use the `ocamlc -i /path/to/file.ml` command\nto print all names and type signatures\n\n```\n$ cat sigtest.ml\nlet inc x = x + 1\nlet add x y = x + y\n\nlet a = 1\n\n$ ocamlc -i ./sigtest.ml\nval inc : int -> int\nval add : int -> int -> int\nval a : int\n```\n\nNote that type signatures of functions of multiple arguments are\nwritten in [curried](https://en.wikipedia.org/wiki/Currying) form.\nA function that takes multiple arguments can be\nrepresented as a composition of functions that take only one argument.\nThe `f(x,y) = x + y` function from the example above applied to\narguments 2 and 3 is equivalent to the `f0(y) = 2 + y` function applied to 3.\nHence the `int -> int -> int` signature.\n\n```ocaml\n(*** Comments ***)\n\n(* Comments are enclosed in (* and *). It's fine to nest comments. *)\n\n(* There are no single-line comments. *)\n\n\n(*** Variables and functions ***)\n\n(* Expressions can be separated by a double semicolon \";;\".\n   In many cases it's redundant, but in this tutorial we use it after\n   every expression for easy pasting into the interpreter shell.\n   Unnecessary use of expression separators in source code files\n   is often considered to be a bad style. *)\n\n(* Variable and function declarations use the \"let\" keyword. *)\n(* Variables are immutable by default in OCaml *)\nlet x = 10 ;;\n\n(* OCaml allows single quote characters in identifiers.\n   Single quote doesn't have a special meaning in this case, it's often used\n   in cases when in other languages one would use names like \"foo_tmp\". *)\nlet foo = 1 ;;\nlet foo' = foo * 2 ;;\n\n(* Since OCaml compiler infers types automatically, you normally don't need to\n   specify argument types explicitly. However, you can do it if\n   you want or need to. *)\nlet inc_int (x: int) : int = x + 1 ;;\n\n(* One of the cases when explicit type annotations may be needed is\n   resolving ambiguity between two record types that have fields with\n   the same name. The alternative is to encapsulate those types in\n   modules, but both topics are a bit out of scope of this\n   tutorial. *)\n\n(* You need to mark recursive function definitions as such with \"rec\" keyword. *)\nlet rec factorial n =\n    if n = 0 then 1\n    else n * factorial (n-1)\n;;\n\n(* Function application usually doesn't need parentheses around arguments *)\nlet fact_5 = factorial 5 ;;\n\n(* ...unless the argument is an expression. *)\nlet fact_4 = factorial (5-1) ;;\nlet sqr2 = sqr (-2) ;;\n\n(* Every function must have at least one argument.\n   Since some functions naturally don't take any arguments, there's\n   \"unit\" type for it that has the only one value written as \"()\" *)\nlet print_hello () = print_endline \"hello world\" ;;\n\n(* Note that you must specify \"()\" as the argument when calling it. *)\nprint_hello () ;;\n\n(* Calling a function with an insufficient number of arguments\n   does not cause an error, it produces a new function. *)\nlet make_inc x y = x + y ;; (* make_inc is int -> int -> int *)\nlet inc_2 = make_inc 2 ;;   (* inc_2 is int -> int *)\ninc_2 3 ;; (* Evaluates to 5 *)\n\n(* You can use multiple expressions in the function body.\n   The last expression becomes the return value. All other\n   expressions must be of the \"unit\" type.\n   This is useful when writing in imperative style, the simplest\n   form of which is inserting a debug print. *)\nlet print_and_return x =\n    print_endline (string_of_int x);\n    x\n;;\n\n(* Since OCaml is a functional language, it lacks \"procedures\".\n   Every function must return something. So functions that do not\n   really return anything and are called solely for their side\n   effects, like print_endline, return a value of \"unit\" type. *)\n\n\n(* Definitions can be chained with the \"let ... in\" construct.\n   This is roughly the same as assigning values to multiple\n   variables before using them in expressions in imperative\n   languages. *)\nlet x = 10 in\nlet y = 20 in\nx + y ;;\n\n(* Alternatively you can use the \"let ... and ... in\" construct.\n   This is especially useful for mutually recursive functions,\n   with ordinary \"let ... in\" the compiler will complain about\n   unbound values. *)\nlet rec\n  is_even = function\n  | 0 -> true\n  | n -> is_odd (n-1)\nand\n  is_odd = function\n  | 0 -> false\n  | n -> is_even (n-1)\n;;\n\n(* Anonymous functions use the following syntax: *)\nlet my_lambda = fun x -> x * x ;;\n\n(*** Operators ***)\n\n(* There is little distinction between operators and functions.\n   Every operator can be called as a function. *)\n\n(+) 3 4  (* Same as 3 + 4 *)\n\n(* There's a number of built-in operators. One unusual feature is\n   that OCaml doesn't just refrain from any implicit conversions\n   between integers and floats, it also uses different operators\n   for floats. *)\n12 + 3 ;; (* Integer addition. *)\n12.0 +. 3.0 ;; (* Floating point addition. *)\n\n12 / 3 ;; (* Integer division. *)\n12.0 /. 3.0 ;; (* Floating point division. *)\n5 mod 2 ;; (* Remainder. *)\n\n(* Unary minus is a notable exception, it's polymorphic.\n   However, it also has \"pure\" integer and float forms. *)\n- 3 ;; (* Polymorphic, integer *)\n- 4.5 ;; (* Polymorphic, float *)\n~- 3 (* Integer only *)\n~- 3.4 (* Type error *)\n~-. 3.4 (* Float only *)\n\n(* You can define your own operators or redefine existing ones.\n   Unlike Standard ML or Haskell, only certain symbols can be\n   used for operator names and the operator's first symbol determines\n   its associativity and precedence rules. *)\nlet (+) a b = a - b ;; (* Surprise maintenance programmers. *)\n\n(* More useful: a reciprocal operator for floats.\n   Unary operators must start with \"~\". *)\nlet (~/) x = 1.0 /. x ;;\n~/4.0 (* = 0.25 *)\n\n\n(*** Built-in data structures ***)\n\n(* Lists are enclosed in square brackets, items are separated by\n   semicolons. *)\nlet my_list = [1; 2; 3] ;; (* Has type \"int list\". *)\n\n(* Tuples are (optionally) enclosed in parentheses, items are separated\n   by commas. *)\nlet first_tuple = 3, 4 ;; (* Has type \"int * int\". *)\nlet second_tuple = (4, 5) ;;\n\n(* Corollary: if you try to separate list items by commas, you get a list\n   with a tuple inside, probably not what you want. *)\nlet bad_list = [1, 2] ;; (* Becomes [(1, 2)] *)\n\n(* You can access individual list items with the List.nth function. *)\nList.nth my_list 1 ;;\n\n(* There are higher-order functions for lists such as map and filter. *)\nList.map (fun x -> x * 2) [1; 2; 3] ;;\nList.filter (fun x -> x mod 2 = 0) [1; 2; 3; 4] ;;\n\n(* You can add an item to the beginning of a list with the \"::\" constructor\n   often referred to as \"cons\". *)\n1 :: [2; 3] ;; (* Gives [1; 2; 3] *)\n\n(* Remember that the cons :: constructor can only cons a single item to the front\n   of a list. To combine two lists use the append @ operator *)\n[1; 2] @ [3; 4] ;; (* Gives [1; 2; 3; 4] *)\n\n(* Arrays are enclosed in [| |] *)\nlet my_array = [| 1; 2; 3 |] ;;\n\n(* You can access array items like this: *)\nmy_array.(0) ;;\n\n\n(*** Strings and characters ***)\n\n(* Use double quotes for string literals. *)\nlet my_str = \"Hello world\" ;;\n\n(* Use single quotes for character literals. *)\nlet my_char = 'a' ;;\n\n(* Single and double quotes are not interchangeable. *)\nlet bad_str = 'syntax error' ;; (* Syntax error. *)\n\n(* This will give you a single character string, not a character. *)\nlet single_char_str = \"w\" ;;\n\n(* Strings can be concatenated with the \"^\" operator. *)\nlet some_str = \"hello\" ^ \"world\" ;;\n\n(* Strings are not arrays of characters.\n   You can't mix characters and strings in expressions.\n   You can convert a character to a string with \"String.make 1 my_char\".\n   There are more convenient functions for this purpose in additional\n   libraries such as Core.Std that may not be installed and/or loaded\n   by default. *)\nlet ocaml = (String.make 1 'O') ^ \"Caml\" ;;\n\n(* There is a printf function. *)\nPrintf.printf \"%d %s\" 99 \"bottles of beer\" ;;\n\n(* There's also unformatted read and write functions. *)\nprint_string \"hello world\\n\" ;;\nprint_endline \"hello world\" ;;\nlet line = read_line () ;;\n\n\n(*** User-defined data types ***)\n\n(* You can define types with the \"type some_type =\" construct. Like in this\n   useless type alias: *)\ntype my_int = int ;;\n\n(* More interesting types include so called type constructors.\n   Constructors must start with a capital letter. *)\ntype ml = OCaml | StandardML ;;\nlet lang = OCaml ;;  (* Has type \"ml\". *)\n\n(* Type constructors don't need to be empty. *)\ntype my_number = PlusInfinity | MinusInfinity | Real of float ;;\nlet r0 = Real (-3.4) ;; (* Has type \"my_number\". *)\n\n(* Can be used to implement polymorphic arithmetics. *)\ntype number = Int of int | Float of float ;;\n\n(* Point on a plane, essentially a type-constrained tuple *)\ntype point2d = Point of float * float ;;\nlet my_point = Point (2.0, 3.0) ;;\n\n(* Types can be parameterized, like in this type for \"list of lists\n   of anything\". 'a can be substituted with any type. *)\ntype 'a list_of_lists = 'a list list ;;\ntype int_list_list = int list_of_lists ;;\n\n(* These features allow for useful optional types *)\ntype 'a option = Some of 'a | None ;;\nlet x = Some x ;;\nlet y = None ;;\n\n(* Types can also be recursive. Like in this type analogous to\n   a built-in list of integers. *)\ntype my_int_list = EmptyList | IntList of int * my_int_list ;;\nlet l = IntList (1, EmptyList) ;;\n\n(* or Trees *)\ntype 'a tree =\n   | Empty\n   | Node of 'a tree * 'a * 'a tree\n\nlet example_tree: int tree =\n   Node (\n      Node (Empty, 7, Empty),\n      5,\n      Node (Empty, 9, Empty)\n   )\n(*\n   5\n  / \\\n 7   9\n*)\n\n(*** Records ***)\n\n(* A collection of values with named fields *)\n\ntype animal = \n   {\n      name: string;\n      color: string;\n      legs: int;\n   }\n;;\n\nlet cow = \n   {  name: \"cow\";\n      color: \"black and white\";\n      legs: 4; \n   }\n;;\nval cow : animal\n\ncow.name ;;\n- : string = \"cow\"\n\n(*** Pattern matching ***)\n\n(* Pattern matching is somewhat similar to the switch statement in imperative\n   languages, but offers a lot more expressive power.\n\n   Even though it may look complicated, it really boils down to matching\n   an argument against an exact value, a predicate, or a type constructor.\n   The type system is what makes it so powerful. *)\n\n(** Matching exact values.  **)\n\nlet is_zero x =\n    match x with\n    | 0 -> true\n    | _ -> false  (* The \"_\" means \"anything else\". *)\n;;\n\n(* Alternatively, you can use the \"function\" keyword. *)\nlet is_one = function\n| 1 -> true\n| _ -> false\n;;\n\n(* Matching predicates, aka \"guarded pattern matching\". *)\nlet abs x =\n    match x with\n    | x when x < 0 -> -x\n    | _ -> x\n;;\n\nabs 5 ;; (* 5 *)\nabs (-5) (* 5 again *)\n\n(** Matching type constructors **)\n\ntype animal = Dog of string | Cat of string ;;\n\nlet say x =\n    match x with\n    | Dog x -> x ^ \" says woof\"\n    | Cat x -> x ^ \" says meow\"\n;;\n\nsay (Cat \"Fluffy\") ;; (* \"Fluffy says meow\". *)\n\n(* However, pattern matching must be exhaustive *)\ntype color = Red | Blue | Green ;;\nlet what_color x = \n   match x with \n   | Red -> \"color is red\"\n   | Blue -> \"color is blue\"\n   (* Won't compile! You have to add a _ case or a Green case \n      to ensure all possibilities are accounted for *)\n;;\n(* Also, the match statement checks each case in order.\n   So, if a _ case appears first, none of the \n   following cases will be reached! *)\n\n(** Traversing data structures with pattern matching **)\n\n(* Recursive types can be traversed with pattern matching easily.\n   Let's see how we can traverse a data structure of the built-in list type.\n   Even though the built-in cons (\"::\") looks like an infix operator,\n   it's actually a type constructor and can be matched like any other. *)\nlet rec sum_list l =\n    match l with\n    | [] -> 0\n    | head :: tail -> head + (sum_list tail)\n;;\n\nsum_list [1; 2; 3] ;; (* Evaluates to 6 *)\n\n(* Built-in syntax for cons obscures the structure a bit, so we'll make\n   our own list for demonstration. *)\n\ntype int_list = Nil | Cons of int * int_list ;;\nlet rec sum_int_list l =\n  match l with\n      | Nil -> 0\n      | Cons (head, tail) -> head + (sum_int_list tail)\n;;\n\nlet t = Cons (1, Cons (2, Cons (3, Nil))) ;;\nsum_int_list t ;;\n\n(* Heres a function to tell if a list is sorted *)\nlet rec is_sorted l = \n   match l with \n   | x :: y :: tail -> x <= y && is_sorted (y :: tail)\n   | _ -> true\n;;\n\nis_sorted [1; 2; 3] ;; (* True *)\n(* OCaml's powerful type inference guesses that l is of type int list\n   since the <= operator is used on elements of l *)\n\n(* And another to reverse a list *)\nlet rec rev (l: 'a list) : 'a list = \n  match l with \n  | [] -> []\n  | x::tl -> (rev tl) @ [x]\n;;\n\nrev [1; 2; 3] ;; (* Gives [3; 2; 1] *)\n(* This function works on lists of any element type *)\n\n(*** Higher Order Functions ***)\n\n(* Functions are first class in OCaml *)\n\nlet rec transform (f: 'a -> 'b) (l: 'a list) : 'b list =\n  match l with\n  | [] -> []\n  | head :: tail -> (f head) :: transform f tail\n;;\n\ntransform (fun x -> x + 1) [1; 2; 3] ;; (* Gives [2; 3; 4] *)\n\n(** Lets combine everything we learned! **)\nlet rec filter (pred: 'a -> bool) (l: 'a list) : 'a list =\n  begin match l with\n  | [] -> []\n  | x :: xs ->\n     let rest = filter pred xs in\n     if pred x then x :: rest else rest\n  end\n;;\n\nfilter (fun x -> x < 4) [3; 1; 4; 1; 5] ;; (* Gives [3; 1; 1]) *)\n\n(*** Mutability ***)\n\n(* Records and variables are immutable: you cannot change where a variable points to *)\n\n(* However, you can create mutable polymorphic fields *)\ntype counter = { mutable num : int } ;;\n\nlet c = { num: 0 } ;;\nc.num ;; (* Gives 0 *)\nc.num <- 1 ;; (* <- operator can set mutable record fields *)\nc.num ;; (* Gives 1 *)\n\n(* OCaml's standard library provides a ref type to make single field mutability easier *)\ntype 'a ref = { mutable contents : 'a } ;;\nlet counter = ref 0 ;;\n!counter ;; (* ! operator returns x.contents *)\ncounter := !counter + 1 ;; (* := can be used to set contents *)\n```\n\n## Further reading\n\n* Visit the official website to get the compiler and read the docs: [http://ocaml.org/](http://ocaml.org/)\n* Quick tutorial on OCaml: [https://ocaml.org/docs/up-and-running](https://ocaml.org/docs/up-and-running)\n* Complete online OCaml v5 playground: [https://ocaml.org/play](https://ocaml.org/play)\n* An up-to-date (2022) book (with free online version) \"Real World OCaml\": [https://www.cambridge.org/core/books/real-world-ocaml-functional-programming-for-the-masses/052E4BCCB09D56A0FE875DD81B1ED571](https://www.cambridge.org/core/books/real-world-ocaml-functional-programming-for-the-masses/052E4BCCB09D56A0FE875DD81B1ED571)\n* Online interactive textbook \"OCaml Programming: Correct + Efficient + Beautiful\" from Cornell University: [https://cs3110.github.io/textbook/cover.html](https://cs3110.github.io/textbook/cover.html)\n* Try interactive tutorials and a web-based interpreter by OCaml Pro: [http://try.ocamlpro.com/](http://try.ocamlpro.com/)\n"
        },
        {
          "name": "opencv.md",
          "type": "blob",
          "size": 5.765625,
          "content": "---\ncategory: framework\nname: OpenCV\nfilename: learnopencv.py\ncontributors:\n    - [\"Yogesh Ojha\", \"http://github.com/yogeshojha\"]\n---\n### OpenCV\n\nOpenCV (Open Source Computer Vision) is a library of programming functions mainly aimed at real-time computer vision.\nOriginally developed by Intel, it was later supported by Willow Garage then Itseez (which was later acquired by Intel).\nOpenCV currently supports wide variety of languages like, C++, Python, Java, etc.\n\n#### Installation\nPlease refer to these articles for installation of OpenCV on your computer.\n\n* Windows Installation Instructions: [https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_setup/py_setup_in_windows/py_setup_in_windows.html#install-opencv-python-in-windows](https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_setup/py_setup_in_windows/py_setup_in_windows.html#install-opencv-python-in-windows)\n* Mac Installation Instructions (High Sierra): [https://medium.com/@nuwanprabhath/installing-opencv-in-macos-high-sierra-for-python-3-89c79f0a246a](https://medium.com/@nuwanprabhath/installing-opencv-in-macos-high-sierra-for-python-3-89c79f0a246a)\n* Linux Installation Instructions (Ubuntu 18.04): [https://www.pyimagesearch.com/2018/05/28/ubuntu-18-04-how-to-install-opencv](https://www.pyimagesearch.com/2018/05/28/ubuntu-18-04-how-to-install-opencv)\n\n### Here we will be focusing on Python implementation of OpenCV\n\n```python\n# Reading image in OpenCV\nimport cv2\nimg = cv2.imread('cat.jpg')\n\n# Displaying the image\n# imshow() function is used to display the image\ncv2.imshow('Image', img)\n# Your first argument is the title of the window and second parameter is image\n# If you are getting an error, Object Type None, your image path may be wrong. Please recheck the path to the image\ncv2.waitKey(0)\n# waitKey() is a keyboard binding function and takes an argument in milliseconds. For GUI events you MUST use waitKey() function.\n\n# Writing an image\ncv2.imwrite('catgray.png', img)\n# The first argument is the file name and second is the image\n\n# Convert image to grayscale\ngray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n# Capturing Video from Webcam\ncap = cv2.VideoCapture(0)\n# 0 is your camera, if you have multiple cameras, you need to enter their id\nwhile True:\n    # Capturing frame-by-frame\n    _, frame = cap.read()\n    cv2.imshow('Frame', frame)\n    # When user presses q -> quit\n    if cv2.waitKey(1) & 0xFF == ord('q'):\n        break\n# Camera must be released\ncap.release()\n\n# Playing Video from file\ncap = cv2.VideoCapture('movie.mp4')\nwhile cap.isOpened():\n    _, frame = cap.read()\n    # Play the video in grayscale\n    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n    cv2.imshow('frame', gray)\n    if cv2.waitKey(1) & 0xFF == ord('q'):\n        break\ncap.release()\n\n# Drawing The Line in OpenCV\n# cv2.line(img, (x,y), (x1,y1), (color->r,g,b->0 to 255), thickness)\ncv2.line(img, (0, 0), (511, 511), (255, 0, 0), 5)\n\n# Drawing Rectangle\n# cv2.rectangle(img, (x,y), (x1,y1), (color->r,g,b->0 to 255), thickness)\n# thickness = -1 used for filling the rectangle\ncv2.rectangle(img, (384, 0), (510, 128), (0, 255, 0), 3)\n\n# Drawing Circle\n# cv2.circle(img, (xCenter,yCenter), radius, (color->r,g,b->0 to 255), thickness)\ncv2.circle(img, (200, 90), 100, (0, 0, 255), -1)\n\n# Drawing Ellipse\ncv2.ellipse(img, (256, 256), (100, 50), 0, 0, 180, 255, -1)\n\n# Adding Text On Images\ncv2.putText(img, \"Hello World!!!\", (x, y), cv2.FONT_HERSHEY_SIMPLEX, 2, 255)\n\n# Blending Images\nimg1 = cv2.imread('cat.png')\nimg2 = cv2.imread('openCV.jpg')\ndst = cv2.addWeighted(img1, 0.5, img2, 0.5, 0)\n\n# Thresholding image\n# Binary Thresholding\n_, thresImg = cv2.threshold(img, 127, 255, cv2.THRESH_BINARY)\n# Adaptive Thresholding\nadapThres = cv2.adaptiveThreshold(img, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)\n\n# Blur Image\n# Gaussian Blur\nblur = cv2.GaussianBlur(img, (5, 5), 0)\n# Median Blur\nmedianBlur = cv2.medianBlur(img, 5)\n\n# Canny Edge Detection\nimg = cv2.imread('cat.jpg', 0)\nedges = cv2.Canny(img, 100, 200)\n\n# Face Detection using Haar Cascades\n# Download Haar Cascades from https://github.com/opencv/opencv/blob/master/data/haarcascades/\nimport cv2\nimport numpy as np\n\nface_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\neye_cascade = cv2.CascadeClassifier('haarcascade_eye.xml')\n\nimg = cv2.imread('human.jpg')\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\nfaces = face_cascade.detectMultiScale(gray, 1.3, 5)\nfor x, y, w, h in faces:\n    # Draw a rectangle around detected face\n    cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)\n    roi_gray = gray[y : y + h, x : x + w]\n    roi_color = img[y : y + h, x : x + w]\n    eyes = eye_cascade.detectMultiScale(roi_gray)\n    for ex, ey, ew, eh in eyes:\n        # Draw a rectangle around detected eyes\n        cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (0, 255, 0), 2)\n\ncv2.imshow('img', img)\ncv2.waitKey(0)\n\ncv2.destroyAllWindows()\n# destroyAllWindows() destroys all windows.\n# If you wish to destroy specific window pass the exact name of window you created.\n```\n\n### Further Reading:\n\n* Download Cascade from [https://github.com/opencv/opencv/blob/master/data/haarcascades](https://github.com/opencv/opencv/blob/master/data/haarcascades)\n* OpenCV drawing Functions [https://docs.opencv.org/2.4/modules/core/doc/drawing_functions.html](https://docs.opencv.org/2.4/modules/core/doc/drawing_functions.html)\n* An up-to-date language reference can be found at [https://opencv.org](https://opencv.org)\n* Additional resources may be found at [https://en.wikipedia.org/wiki/OpenCV](https://en.wikipedia.org/wiki/OpenCV)\n* Good OpenCV Tutorials\n    * [https://realpython.com/python-opencv-color-spaces](https://realpython.com/python-opencv-color-spaces)\n    * [https://pyimagesearch.com](https://pyimagesearch.com)\n    * [https://www.learnopencv.com](https://www.learnopencv.com)\n"
        },
        {
          "name": "opengl.md",
          "type": "blob",
          "size": 25.1064453125,
          "content": "---\ncategory: framework\nname: OpenGL\nfilename: learnopengl.cpp\ncontributors:\n    - [\"Simon Deitermann\", \"s.f.deitermann@t-online.de\"]\n---\n\n**Open Graphics Library** (**OpenGL**) is a cross-language cross-platform application programming interface\n(API) for rendering 2D computer graphics and 3D vector graphics.<sup>[1]</sup> In this tutorial we will be\nfocusing on modern OpenGL from 3.3 and above, ignoring \"immediate-mode\", Displaylists and\nVBO's without use of Shaders.\nI will be using C++ with SFML for window, image and context creation aswell as GLEW\nfor modern OpenGL extensions, though there are many other librarys available.\n\n```cpp\n// Creating an SFML window and OpenGL basic setup.\n#include <GL/glew.h>\n#include <GL/gl.h>\n#include <SFML/Graphics.h>\n#include <iostream>\n\nint main() {\n    // First we tell SFML how to setup our OpenGL context.\n    sf::ContextSettings context{ 24,   // depth buffer bits\n                                  8,   // stencil buffer bits\n                                  4,   // MSAA samples\n                                  3,   // major opengl version\n                                  3 }; // minor opengl version\n    // Now we create the window, enable VSync\n    // and set the window active for OpenGL.\n    sf::Window window{ sf::VideoMode{ 1024, 768 },\n                       \"opengl window\",\n                       sf::Style::Default,\n\t\t       context };\n    window.setVerticalSyncEnabled(true);\n    window.setActive(true);\n    // After that we initialise GLEW and check if an error occurred.\n    GLenum error;\n    glewExperimental = GL_TRUE;\n    if ((err = glewInit()) != GLEW_OK)\n        std::cout << glewGetErrorString(err) << std::endl;\n    // Here we set the color glClear will clear the buffers with.\n    glClearColor(0.0f,    // red\n                 0.0f,    // green\n                 0.0f,    // blue\n                 1.0f);   // alpha\n    // Now we can start the event loop, poll for events and draw objects.\n    sf::Event event{ };\n    while (window.isOpen()) {\n        while (window.pollEvent(event)) {\n            if (event.type == sf::Event::Closed)\n                window.close;\n        }\n        // Tell OpenGL to clear the color buffer\n        // and the depth buffer, this will clear our window.\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n        // Flip front- and backbuffer.\n        window.display();\n    }\n    return 0;\n}\n```\n\n## Loading Shaders\n\nAfter creating a window and our event loop we should create a function,\nthat sets up our shader program.\n\n```cpp\nGLuint createShaderProgram(const std::string& vertexShaderPath,\n                           const std::string& fragmentShaderPath) {\n    // Load the vertex shader source.\n    std::stringstream ss{ };\n    std::string vertexShaderSource{ };\n    std::string fragmentShaderSource{ };\n    std::ifstream file{ vertexShaderPath };\n    if (file.is_open()) {\n        ss << file.rdbuf();\n        vertexShaderSource = ss.str();\n        file.close();\n    }\n    // Clear the stringstream and load the fragment shader source.\n    ss.str(std::string{ });\n    file.open(fragmentShaderPath);\n    if (file.is_open()) {\n        ss << file.rdbuf();\n        fragmentShaderSource = ss.str();\n        file.close();\n    }\n    // Create the program.\n    GLuint program = glCreateProgram();\n    // Create the shaders.\n    GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);\n    GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);\n    // Now we can load the shader source into the shader objects and compile them.\n    // Because glShaderSource() wants a const char* const*,\n    // we must first create a const char* and then pass the reference.\n    const char* cVertexSource = vertexShaderSource.c_str();\n    glShaderSource(vertexShader,     // shader\n                   1,                // number of strings\n                   &cVertexSource,   // strings\n                   nullptr);         // length of strings (nullptr for 1)\n    glCompileShader(vertexShader);\n    // Now we have to do the same for the fragment shader.\n    const char* cFragmentSource = fragmentShaderSource.c_str();\n    glShaderSource(fragmentShader, 1, &cFragmentSource, nullptr);\n    glCompileShader(fragmentShader);\n    // After attaching the source and compiling the shaders,\n    // we attach them to the program;\n    glAttachShader(program, vertexShader);\n    glAttachShader(program, fragmentShader);\n    glLinkProgram(program);\n    // After linking the shaders we should detach and delete\n    // them to prevent memory leak.\n    glDetachShader(program, vertexShader);\n    glDetachShader(program, fragmentShader);\n    glDeleteShader(vertexShader);\n    glDeleteShader(fragmentShader);\n    // With everything done we can return the completed program.\n    return program;\n}\n```\n\nIf you want to check the compilation log you can add the following between <code>glCompileShader()</code> and <code>glAttachShader()</code>.\n\n```cpp\nGLint logSize = 0;\nstd::vector<GLchar> logText{ };\nglGetShaderiv(vertexShader,         // shader\n              GL_INFO_LOG_LENGTH,   // requested parameter\n              &logSize);            // return object\nif (logSize > 0) {\n    logText.resize(logSize);\n    glGetShaderInfoLog(vertexShader,      // shader\n                       logSize,           // buffer length\n                       &logSize,          // returned length\n                       logText.data());   // buffer\n    std::cout << logText.data() << std::endl;\n}\n```\n\nThe same is possible after <code>glLinkProgram()</code>, just replace <code>glGetShaderiv()</code> with <code>glGetProgramiv()</code>\nand <code>glGetShaderInfoLog()</code> with <code>glGetProgramInfoLog()</code>.\n\n```cpp\n// Now we can create a shader program with a vertex and a fragment shader.\n// ...\nglClearColor(0.0f, 0.0f, 0.0f, 1.0f);\n\nGLuint program = createShaderProgram(\"vertex.glsl\", \"fragment.glsl\");\n\nsf::Event event{ };\n// ...\n// We also have to delete the program at the end of the application.\n// ...\n    }\n    glDeleteProgram(program);\t\n    return 0;\n}\n// ...\n```\n\nOf course we have to create the vertex and fragment shader before we can load them,\nso lets create two basic shaders.\n\n**Vertex Shader**\n\n```glsl\n// Declare which version of GLSL we use.\n// Here we declare, that we want to use the OpenGL 3.3 version of GLSL.\n#version 330 core\n// At attribute location 0 we want an input variable of type vec3,\n// that contains the position of the vertex.\n// Setting the location is optional, if you don't set it you can ask for the\n// location with glGetAttribLocation().\nlayout(location = 0) in vec3 position;\n// Every shader starts in it's main function.\nvoid main() {\n    // gl_Position is a predefined variable that holds\n    // the final vertex position.\n    // It consists of a x, y, z and w coordinate.\n    gl_Position = vec4(position, 1.0);\n}\n```\n\n**Fragment Shader**\n\n```glsl\n#version 330 core\n// The fragment shader does not have a predefined variable for\n// the vertex color, so we have to define a output vec4,\n// that holds the final vertex color.\nout vec4 outColor;\n\nvoid main() {\n    // We simply set the output color to red.\n    // The parameters are red, green, blue and alpha.\n    outColor = vec4(1.0, 0.0, 0.0, 1.0);\n}\n```\n\n## VAO and VBO\nNow we need to define some vertex position we can pass to our shaders. Lets define a simple 2D quad.\n\n```cpp\n// The vertex data is defined in a counter-clockwise way,\n// as this is the default front face.\nstd::vector<float> vertexData {\n    -0.5f,  0.5f, 0.0f,\n    -0.5f, -0.5f, 0.0f,\n     0.5f, -0.5f, 0.0f,\n     0.5f,  0.5f, 0.0f\n};\n// If you want to use a clockwise definition, you can simply call\nglFrontFace(GL_CW);\n// Next we need to define a Vertex Array Object (VAO).\n// The VAO stores the current state while its active.\nGLuint vao = 0;\nglGenVertexArrays(1, &vao);\nglBindVertexArray(vao);\n// With the VAO active we can now create a Vertex Buffer Object (VBO).\n// The VBO stores our vertex data.\nGLuint vbo = 0;\nglGenBuffers(1, &vbo);\nglBindBuffer(GL_ARRAY_BUFFER, vbo);\n// For reading and copying there are also GL_*_READ and GL_*_COPY,\n// if your data changes more often use GL_DYNAMIC_* or GL_STREAM_*.\nglBufferData(GL_ARRAY_BUFFER,     // target buffer\n             sizeof(vertexData[0]) * vertexData.size(),   // size\n             vertexData.data(),   // data\n             GL_STATIC_DRAW);     // usage\n// After filling the VBO link it to the location 0 in our vertex shader,\n// which holds the vertex position.\n// ...\n// To ask for the attribute location, if you haven't set it:\nGLint posLocation = glGetAttribLocation(program, \"position\");\n// ..\nglEnableVertexAttribArray(0);\nglVertexAttribPointer(0, 3,       // location and size\n                      GL_FLOAT,   // type of data\n                      GL_FALSE,   // normalized (always false for floats)\n                      0,          // stride (interleaved arrays)\n                      nullptr);   // offset (interleaved arrays)\n// Everything should now be saved in our VAO and we can unbind it and the VBO.\nglBindVertexArray(0);\nglBindBuffer(GL_ARRAY_BUFFER, 0);\n// Now we can draw the vertex data in our render loop.\n// ...\nglClear(GL_COLOR_BUFFER_BIT);\n// Tell OpenGL we want to use our shader program.\nglUseProgram(program);\n// Binding the VAO loads the data we need.\nglBindVertexArray(vao);\n// We want to draw a quad starting at index 0 of the VBO using 4 indices.\nglDrawArrays(GL_QUADS, 0, 4);\nglBindVertexArray(0);\nwindow.display();\n// ...\n// Ofcource we have to delete the allocated memory for the VAO and VBO at\n// the end of our application.\n// ...\nglDeleteBuffers(1, &vbo);\nglDeleteVertexArrays(1, &vao);\nglDeleteProgram(program);\nreturn 0;\n// ...\n```\n\nYou can find the current code here: [OpenGL - 1](https://pastebin.com/W8jdmVHD).\n\n## More VBO's and Color\nLet's create another VBO for some colors.\n\n```cpp\nstd::vector<float> colorData {\n    1.0f, 0.0f, 0.0f,\n    0.0f, 1.0f, 0.0f,\n    0.0f, 0.0f, 1.0f,\n    1.0f, 1.0f, 0.0f\n};\n```\n\nNext we can simply change some previous parameters to create a second VBO for our colors.\n\n```cpp\n// ...\nGLuint vbo[2];\nglGenBuffers(2, vbo);\nglBindBuffer(GL_ARRAY_BUFFER, vbo[0]);\n// ...\nglDeleteBuffers(2, vbo);\n/ ...\n// With these changes made we now have to load our color data into the new VBO\n// ...\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, nullptr);\n\nglBindBuffer(GL_ARRAY_BUFFER, vbo[1]);\nglBufferData(GL_ARRAY_BUFFER, sizeof(colorData[0]) * colorData.size(),\n             colorData.data(), GL_STATIC_DRAW);\nglEnableVertexAttribArray(1);\nglVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, nullptr);\n\nglBindVertexArray(0);  \n// ...\n```\n\nNext we have to change our vertex shader to pass the color data to the fragment shader.<br>\n**Vertex Shader**\n\n```glsl\n#version 330 core\n\nlayout(location = 0) in vec3 position;\n// The new location has to differ from any other input variable.\n// It is the same index we need to pass to\n// glEnableVertexAttribArray() and glVertexAttribPointer().\nlayout(location = 1) in vec3 color;\n\nout vec3 fColor;\n\nvoid main() {\n    fColor = color;\n    gl_Position = vec4(position, 1.0);\n}\n```\n\n**Fragment Shader**\n\n```glsl\n#version 330 core\n\nin vec3 fColor;\n\nout vec4 outColor;\n\nvoid main() {\n    outColor = vec4(fColor, 1.0);\n}\n```\n\nWe define a new input variable ```color``` which represents our color data, this data\nis passed on to ```fColor```, which is an output variable of our vertex shader and\nbecomes an input variable for our fragment shader.\nIt is important that variables passed between shaders have the exact same name\nand type.\n\n## Handling VBO's\n\n```cpp\n// If you want to completely clear and refill a VBO use glBufferData(),\n// just like we did before.\n// ...\n// There are two mains ways to update a subset of a VBO's data.\n// To update a VBO with existing data\nstd::vector<float> newSubData {\n\t-0.25f, 0.5f, 0.0f\n};\nglBindBuffer(GL_ARRAY_BUFFER, vbo[0]);\nglBufferSubData(GL_ARRAY_BUFFER,      // target buffer\n                0,                    // offset\n                sizeof(newSubData[0]) * newSubData.size(),   // size\n                newSubData.data());   // data\n// This would update the first three values in our vbo[0] buffer.\n// If you want to update starting at a specific location just set the second\n// parameter to that value and multiply by the types size.\n// ...\n// If you are streaming data, for example from a file,\n// it is faster to directly pass the data to the buffer.\n// Other access values are GL_READ_ONLY and GL_READ_WRITE.\nglBindBuffer(GL_ARRAY_BUFFER, vbo[0]);\n// You can static_cast<float*>() the void* to be more safe.\nvoid* Ptr = glMapBuffer(GL_ARRAY_BUFFER,   // buffer to map\n                        GL_WRITE_ONLY);    // access to buffer\nmemcpy(Ptr, newSubData.data(), sizeof(newSubData[0]) * newSubData.size());\n// To copy to a specific location add a destination offset to memcpy().\nglUnmapBuffer(GL_ARRAY_BUFFER);\n// ...\n// There is also a way to copy data from one buffer to another,\n// If we have two VBO's vbo[0] and vbo[1], we can copy like so\n// You can also read from GL_ARRAY_BUFFER.\nglBindBuffer(GL_COPY_READ_BUFFER, vbo[0]);\n// GL_COPY_READ_BUFFER and GL_COPY_WRITE_BUFFER are specifically for\n// copying buffer data.\nglBindBuffer(GL_COPY_WRITE_BUFFER, vbo[1]);\nglCopyBufferSubData(GL_COPY_READ_BUFFER,    // read buffer\n                    GL_COPY_WRITE_BUFFER,   // write buffer\n                    0, 0,                   // read and write offset\n                    sizeof(vbo[0]) * 3);    // copy size\n// This will copy the first three elements from vbo[0] to vbo[1].\n```\n\n## Uniforms\n\n**Fragment Shader**\n\n```glsl\n// Uniforms are variables like in and out, however,\n// we can change them easily by passing new values with glUniform().\n// Lets define a time variable in our fragment shader.\n#version 330 core\n// Unlike a in/out variable we can use a uniform in every shader,\n// without the need to pass it to the next one, they are global.\n// Don't use locations already used for attributes!\n// Uniform layout locations require OpenGL 4.3!\nlayout(location = 10) uniform float time;\n\nin vec3 fColor;\n\nout vec4 outColor;\n\nvoid main() {\n    // Create a sine wave from 0 to 1 based on the time passed to the shader.\n    float factor = (sin(time * 2) + 1) / 2;\n    outColor = vec4(fColor.r * factor, fColor.g * factor, fColor.b * factor, 1.0);\n}\n```\n\nBack to our source code.\n\n```cpp\n// If we haven't set the layout location, we can ask for it.\nGLint timeLocation = glGetUniformLocation(program, \"time\");\n// ...\n// Also we should define a Timer counting the current time.\nsf::Clock clock{ };\n// In out render loop we can now update the uniform every frame.\n    // ...\n    window.display();\n    glUniform1f(10,   // location\n                clock.getElapsedTime().asSeconds());   // data\n}\n// ...\n```\n\nWith the time getting updated every frame the quad should now be changing from\nfully colored to pitch black.\nThere are different types of glUniform() you can find simple documentation here:\n[glUniform - OpenGL Refpage](https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glUniform.xhtml)\n\n## Indexing and IBO's\n\nElement Array Buffers or more commonly Index Buffer Objects (IBO) allow us to use the\nsame vertex data again which makes drawing a lot easier and faster. here's an example:\n\n```cpp\n// Lets create a quad from two rectangles.\n// We can simply use the old vertex data from before.\n// First, we have to create the IBO.\n// The index is referring to the first declaration in the VBO.\nstd::vector<unsigned int> iboData {\n    0, 1, 2,\n    0, 2, 3\n};\n// That's it, as you can see we could reuse 0 - the top left\n// and 2 - the bottom right.\n// Now that we have our data, we have to fill it into a buffer.\n// Note that this has to happen between the two glBindVertexArray() calls,\n// so it gets saved into the VAO.\nGLuint ibo = 0;\nglGenBufferrs(1, &ibo);\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(iboData[0]) * iboData.size(),\n             iboData.data(), GL_STATIC_DRAW);\n// Next in our render loop, we replace glDrawArrays() with:\nglDrawElements(GL_TRIANGLES, iboData.size(), GL_UNSIGNED_INT, nullptr);\n// Remember to delete the allocated memory for the IBO.\n```\n\nYou can find the current code here: [OpenGL - 2](https://pastebin.com/R3Z9ACDE).\n\n## Textures\n\nTo load out texture we first need a library that loads the data, for simplicity I will be\nusing SFML, however there are a lot of librarys for loading image data.\n\n```cpp\n// Lets save we have a texture called \"my_tex.tga\", we can load it with:\nsf::Image image;\nimage.loadFromFile(\"my_tex.tga\");\n// We have to flip the texture around the y-Axis, because OpenGL's texture\n// origin is the bottom left corner, not the top left.\nimage.flipVertically();\n// After loading it we have to create a OpenGL texture.\nGLuint texture = 0;\nglGenTextures(1, &texture);\nglBindTexture(GL_TEXTURE_2D, texture);\n// Specify what happens when the coordinates are out of range.\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n// Specify the filtering if the object is very large.\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n// Load the image data to the texture.\nglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, image.getSize().x, image.getSize().y,\n             0, GL_RGBA, GL_UNSIGNED_BYTE, image.getPixelsPtr());\n// Unbind the texture to prevent modifications.\nglBindTexture(GL_TEXTURE_2D, 0);\n// Delete the texture at the end of the application.\n// ...\nglDeleteTextures(1, &texture);\n```\n\nOf course there are more texture formats than only 2D textures,\nYou can find further information on parameters here:\n[glBindTexture - OpenGL Refpage](https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBindTexture.xhtml)<br>\n[glTexImage2D - OpenGL Refpage](https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glTexImage2D.xhtml)<br>\n[glTexParameter - OpenGL Refpage](https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glTexParameter.xhtml)<br>\n\n```cpp\n// With the texture created, we now have to specify the UV,\n// or in OpenGL terms ST coordinates.\nstd::vector<float> texCoords {\n    // The texture coordinates have to match the triangles/quad\n    // definition.\n    0.0f, 1.0f,\t   // start at top-left\n    0.0f, 0.0f,\t   // go round counter-clockwise\n    1.0f, 0.0f,\n    1.0f, 1.0f     // end at top-right\n};\n// Now we increase the VBO's size again just like we did for the colors.\n// ...\nGLuint vbo[3];\nglGenBuffers(3, vbo);\n// ...\nglDeleteBuffers(3, vbo);\n// ...\n// Load the texture coordinates into the new buffer.\nglBindBuffer(GL_ARRAY_BUFFER, vbo[2]);\nglBufferData(GL_ARRAY_BUFFER, sizeof(texCoords[0]) * texCoords.size(),\n             texCoords.data(), GL_STATIC_DRAW);\nglEnableVertexAttribArray(2);\nglVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 0, nullptr);\n// Because the VAO does not store the texture we have to bind it before drawing.\n// ...\nglBindVertexArray(vao);\nglBindTexture(GL_TEXTURE_2D, texture);\nglDrawElements(GL_TRIANGLES, iboData.size(), GL_UNSIGNED_INT, nullptr);\n// ...\n```\n\nChange the shaders to pass the data to the fragment shader.<br>\n\n**Vertex Shader**\n\n```glsl\n#version 330 core\n\nlayout(location = 0) in vec3 position;\nlayout(location = 1) in vec3 color;\nlayout(location = 2) in vec2 texCoords;\n\nout vec3 fColor;\nout vec2 fTexCoords;\n\nvoid main() {\n    fColor = color;\n    fTexCoords = texCoords;\n    gl_Position = vec4(position, 1.0);\n}\n```\n\n**Fragment Shader**\n\n```glsl\n#version 330 core\n// sampler2D represents our 2D texture.\nuniform sampler2D tex;\nuniform float time;\n\nin vec3 fColor;\nin vec2 fTexCoords;\n\nout vec4 outColor;\n\nvoid main() {\n    // texture() loads the current texture data at the specified texture coords,\n    // then we can simply multiply them by our color.\n    outColor = texture(tex, fTexCoords) * vec4(fColor, 1.0);\n}\n```\n\nYou can find the current code here: [OpenGL - 3](https://pastebin.com/u3bcwM6q)\n\n## Matrix Transformation\n\n**Vertex Shader**\n\n```glsl\n#version 330 core\n\nlayout(location = 0) in vec3 position;\nlayout(location = 1) in vec3 color;\nlayout(location = 2) in vec2 texCoords;\n// Create 2 4x4 matricies, 1 for the projection matrix\n// and 1 for the model matrix.\n// Because we draw in a static scene, we don't need a view matrix.\nuniform mat4 projection;\nuniform mat4 model;\n\nout vec3 fColor;\nout vec2 fTexCoords;\n\nvoid main() {\n    fColor = color;\n    fTexCoords = texCoords;\n    // Multiplay the position by the model matrix and then by the\n    // projection matrix.\n    // Beware order of multiplication for matricies!\n    gl_Position = projection * model * vec4(position, 1.0);\n}\n```\n\nIn our source we now need to change the vertex data, create a model- and a projection matrix.\n\n```cpp\n// The new vertex data, counter-clockwise declaration.\nstd::vector<float> vertexData {  \n    0.0f, 1.0f, 0.0f,   // top left\n    0.0f, 0.0f, 0.0f,   // bottom left\n    1.0f, 0.0f, 0.0f,   // bottom right\n    1.0f, 1.0f, 0.0f    // top right\n};\n// Request the location of our matricies.\nGLint projectionLocation = glGetUniformLocation(program, \"projection\");\nGLint modelLocation = glGetUniformLocation(program, \"model\");\n// Declaring the matricies.\n// Orthogonal matrix for a 1024x768 window.\nstd::vector<float> projection {  \n    0.001953f,       0.0f,  0.0f, 0.0f,\n         0.0f, -0.002604f,  0.0f, 0.0f,\n         0.0f,       0.0f, -1.0f, 0.0f,\n        -1.0f,       1.0f,  0.0f, 1.0f\n};\n// Model matrix translating to x 50, y 50\n// and scaling to x 200, y 200.\nstd::vector<float> model {  \n    200.0f,   0.0f, 0.0f, 0.0f,\n      0.0f, 200.0f, 0.0f, 0.0f,\n      0.0f,   0.0f, 1.0f, 0.0f,\n     50.0f,  50.0f, 0.0f, 1.0f\n};\n// Now we can send our calculated matricies to the program.\nglUseProgram(program);\nglUniformMatrix4fv(projectionLocation,   // location\n                   1,                    // count\n                   GL_FALSE,             // transpose the matrix\n                   projection.data());   // data\nglUniformMatrix4fv(modelLocation, 1, GL_FALSE, model.data());\nglUseProgram(0);\n// The glUniform*() calls have to be done, while the program is bound.\n```\n\nThe application should now display the texture at the defined position and size.<br>\nYou can find the current code here: [OpenGL - 4](https://pastebin.com/9ahpFLkY)\n\n```cpp\n// There are many math librarys for OpenGL, which create\n// matricies and vectors, the most used in C++ is glm (OpenGL Mathematics).\n// Its a header only library.\n// The same code using glm would look like:\nglm::mat4 projection{ glm::ortho(0.0f, 1024.0f, 768.0f, 0.0f) };\nglUniformMatrix4fv(projectionLocation, 1, GL_FALSE,\n                   glm::value_ptr(projection));\n// Initialise the model matrix to the identity matrix, otherwise every\n// multiplication would be 0.\nglm::mat4 model{ 1.0f };\nmodel = glm::translate(model, glm::vec3{ 50.0f, 50.0f, 0.0f });\nmodel = glm::scale(model, glm::vec3{ 200.0f, 200.0f, 0.0f });\nglUniformMatrix4fv(modelLocation, 1, GL_FALSE,\n                   glm::value_ptr(model));\n```\n\n## Geometry Shader\n\nGeometry shaders were introduced in OpenGL 3.2, they can produce vertices\nthat are send to the rasterizer. They can also change the primitive type e.g.\nthey can take a point as an input and output other primitives.\nGeometry shaders are inbetween the vertex and the fragment shader.\n\n**Vertex Shader**\n\n```glsl\n#version 330 core\n\nlayout(location = 0) in vec3 position;\nlayout(location = 1) in vec3 color;\n// Create an output interface block passed to the next shader stage.\n// Interface blocks can be used to structure data passed between shaders.\nout VS_OUT {\n    vec3 color;\n} vs_out;\n\nvoid main() {\n    vs_out.color = color\n    gl_Position = vec4(position, 1.0);\n}\n```\n\n**Geometry Shader**\n\n```glsl\n#version 330 core\n// The geometry shader takes in points.\nlayout(points) in;\n// It outputs a triangle every 3 vertices emitted.\nlayout(triangle_strip, max_vertices = 3) out;\n// VS_OUT becomes an input variable in the geometry shader.\n// Every input to the geometry shader in treated as an array.\nin VS_OUT {\n    vec3 color;\n} gs_in[];\n// Output color for the fragment shader.\n// You can also simply define color as 'out vec3 color',\n// If you don't want to use interface blocks.\nout GS_OUT {\n    vec3 color;\n} gs_out;\n\nvoid main() {\n    // Each emit calls the fragment shader, so we set a color for each vertex.\n    gs_out.color = mix(gs_in[0].color, vec3(1.0, 0.0, 0.0), 0.5);\n    // Move 0.5 units to the left and emit the new vertex.\n    // gl_in[] is the current vertex from the vertex shader, here we only\n    // use 0, because we are receiving points.\n    gl_Position = gl_in[0].gl_Position + vec4(-0.5, 0.0, 0.0, 0.0);\n    EmitVertex();\n    gs_out.color = mix(gs_in[0].color, vec3(0.0, 1.0, 0.0), 0.5);\n    // Move 0.5 units to the right and emit the new vertex.\n    gl_Position = gl_in[0].gl_Position + vec4(0.5, 0.0, 0.0, 0.0);\n    EmitVertex();\n    gs_out.color = mix(gs_in[0].color, vec3(0.0, 0.0, 1.0), 0.5);\n    // Move 0.5 units up and emit the new vertex.\n    gl_Position = gl_in[0].gl_Position + vec4(0.0, 0.75, 0.0, 0.0);\n    EmitVertex();\n    EndPrimitive();\n}\n```\n\n**Fragment Shader**\n\n```glsl\nin GS_OUT {\n    vec3 color;\n} fs_in;\n\nout vec4 outColor;\n\nvoid main() {\n    outColor = vec4(fs_in.color, 1.0);\n}\n```\n\nIf you now store a single point with a single color in a VBO and draw them,\nyou should see a triangle, with your color mixed half way between\nred, green and blue on each vertex.\n\n\n## Quotes\n<sup>[1]</sup>[OpenGL - Wikipedia](https://en.wikipedia.org/wiki/OpenGL)\n\n## Books\n\n- OpenGL Superbible - Fifth Edition (covering OpenGL 3.3)\n- OpenGL Programming Guide - Eighth Edition (covering OpenGL 4.3)\n"
        },
        {
          "name": "openmp.md",
          "type": "blob",
          "size": 9.0634765625,
          "content": "---\ncategory: tool\nname: OpenMP\nfilename: learnopenMP.cpp\ncontributors:\n    - [\"Cillian Smith\", \"https://github.com/smithc36-tcd\"]\n---\n\n**OpenMP** is a library used for parallel programming on shared-memory machines.\nOpenMP allows you to use simple high-level constructs for parallelism,\nwhile hiding the details, keeping it easy to use and quick to write.\nOpenMP is supported by C, C++, and Fortran.\n\n## Structure\n\nGenerally an OpenMP program will use the following structure.\n\n- **Master**: Start a Master thread, which will be used to set up the environment and\ninitialize variables\n\n- **Slave**: Slave threads are created for sections of code which are marked by a special\ndirective, these are the threads which will run the parallel sections.\n\nEach thread will have its own ID which can be obtained using the function\n`omp_get_thread_num()`, but more on that later.\n\n```\n          __________ Slave\n         /__________ Slave\n        /\nMaster ------------- Master\n        \\___________ Slave\n         \\__________ Slave\n\n```\n\n## Compiling and running OpenMP\n\nA simple \"hello world\" program can be parallelized using the `#pragma omp parallel` directive\n\n```cpp\n#include <stdio.h>\n\nint main() {\n    #pragma omp parallel\n    {\n        printf(\"Hello, World!\\n\");\n    }\n    return 0;\n}\n```\n\nCompile it like this\n\n```bash\n# The OpenMP flat depends on the compiler\n# intel : -openmp\n# gcc : -fopenmp\n# pgcc : -mp\ngcc -fopenmp hello.c -o Hello\n```\n\nRunning it should output\n\n```\nHello, World!\n...\nHello, World!\n```\n\nThe exact number of \"`Hello, Worlds`\" depends on the number of cores of your machine,\nfor example I got 12 my laptop.\n\n## Threads and processes\n\nYou can change the default number of threads using `export OMP_NUM_THREADS=8`\n\nHere are some useful library functions in the `omp.h` library\n\n```cpp\n// Check the number of threads\nprintf(\"Max Threads: %d\\n\", omp_get_max_threads());\nprintf(\"Current number of threads: %d\\n\", omp_get_num_threads());\nprintf(\"Current Thread ID: %d\\n\", omp_get_thread_num());\n\n// Modify the number of threads\nomp_set_num_threads(int);\n\n// Check if we are in a parallel region\nomp_in_parallel();\n\n// Dynamically vary the number of threads\nomp_set_dynamic(int);\nomp_get_dynamic();\n\n// Check the number of processors\nprintf(\"Number of processors: %d\\n\", omp_num_procs());\n```\n\n## Private and shared variables\n\n```cpp\n// Variables in parallel sections can be either private or shared.\n\n/* Private variables are private to each thread, as each thread has its own\n* private copy. These variables are not initialized or maintained outside\n* the thread.\n*/\n#pragma omp parallel private(x, y)\n\n/* Shared variables are visible and accessible by all threads. By default,\n* all variables in the work sharing region are shared except the loop\n* iteration counter.\n*\n* Shared variables should be used with care as they can cause race conditions.\n*/\n#pragma omp parallel shared(a, b, c)\n\n// They can be declared together as follows\n#pragma omp parallel private(x, y) shared(a,b,c)\n```\n\n## Synchronization\n\nOpenMP provides a number of directives to control the synchronization of threads\n\n```cpp\n#pragma omp parallel {\n\n    /* `critical`: the enclosed code block will be executed by only one thread\n     * at a time, and not simultaneously executed by multiple threads. It is\n     * often used to protect shared data from race conditions.\n     */\n    #pragma omp critical\n    data += data + computed;\n\n\n    /* `single`: used when a block of code needs to be run by only a single\n     * thread in a parallel section. Good for managing control variables.\n     */\n    #pragma omp single\n    printf(\"Current number of threads: %d\\n\", omp_get_num_threads());\n\n    /*  `atomic`: Ensures that a specific memory location is updated atomically\n     *  to avoid race conditions.  */\n    #pragma omp atomic\n    counter += 1;\n\n\n    /* `ordered`: the structured block is executed in the order in which\n     * iterations would be executed in a sequential loop     */\n    #pragma omp for ordered\n    for (int i = 0; i < N; ++i) {\n        #pragma omp ordered\n        process(data[i]);\n    }\n\n\n    /* `barrier`: Forces all threads to wait until all threads reach this point\n     * before proceeding.  */\n    #pragma omp barrier\n\n    /* `nowait`: Allows threads to proceed with their next task without waiting\n     * for other threads to complete the current one. */\n    #pragma omp for nowait\n    for (int i = 0; i < N; ++i) {\n        process(data[i]);\n    }\n\n    /* `reduction` : Combines the results of each thread's computation into a\n     * single result.  */\n    #pragma omp parallel for reduction(+:sum)\n    for (int i = 0; i < N; ++i) {\n        sum += a[i] * b[i];\n    }\n\n}\n```\n\nExample of the use of `barrier`\n\n```c\n#include <omp.h>\n#include <stdio.h>\n\nint main() {\n\n  // Current number of active threads\n  printf(\"Num of threads is %d\\n\", omp_get_num_threads());\n\n#pragma omp parallel\n  {\n      // Current thread ID\n      printf(\"Thread ID: %d\\n\", omp_get_thread_num());\n\n#pragma omp barrier <--- Wait here until other threads have returned\n      if(omp_get_thread_num() == 0)\n      {\n          printf(\"\\nNumber of active threads: %d\\n\", omp_get_num_threads());\n      }\n  }\n  return 0;\n}\n```\n\n## Parallelizing Loops\n\nIt is simple to parallelise loops using OpenMP. Using a work-sharing directive we can do the following\n\n```c\n#pragma omp parallel\n{\n    #pragma omp for\n    // for loop to be parallelized\n    for() ...\n}\n```\n\nA loop must be easily parallelisable for OpenMP to unroll and facilitate the assignment amoungst threads.\nIf there are any data dependancies between one iteration to the next, OpenMP can't parallelise it.\n\n## Speed Comparison\n\nThe following is a C++ program which compares parallelised code with serial code\n\n```cpp\n\n#include <iostream>\n#include <vector>\n#include <ctime>\n#include <chrono>\n#include <omp.h>\n\nint main() {\n    const int num_elements = 100000000;\n\n    std::vector<double> a(num_elements, 1.0);\n    std::vector<double> b(num_elements, 2.0);\n    std::vector<double> c(num_elements, 0.0);\n\n    // Serial version\n    auto start_time = std::chrono::high_resolution_clock::now();\n    for (int i = 0; i < num_elements; i++) {\n        c[i] = a[i] * b[i];\n    }\n    auto end_time = std::chrono::high_resolution_clock::now();\n    auto duration_serial = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time).count();\n\n    // Parallel version with OpenMP\n    start_time = std::chrono::high_resolution_clock::now();\n    #pragma omp parallel for\n    for (int i = 0; i < num_elements; i++) {\n        c[i] = a[i] * b[i];\n    }\n    end_time = std::chrono::high_resolution_clock::now();\n    auto duration_parallel = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time).count();\n\n    std::cout << \"Serial execution time: \" << duration_serial << \" ms\" << std::endl;\n    std::cout << \"Parallel execution time: \" << duration_parallel << \" ms\" << std::endl;\n    std::cout << \"Speedup: \" << static_cast<double>(duration_serial) / duration_parallel << std::endl;\n\n    return 0;\n}\n```\n\nThis results in\n\n```\nSerial execution time: 488 ms\nParallel execution time: 148 ms\nSpeedup: 3.2973\n```\n\nIt should be noted that this example is fairly contrived and the actual speedup\ndepends on implementation and it should also be noted that serial code may run\nfaster than parallel code due to cache preformace.\n\n## Example\n\nThe following example uses OpenMP to calculate the Mandlebrot set\n\n```cpp\n#include <iostream>\n#include <fstream>\n#include <complex>\n#include <vector>\n#include <omp.h>\n\nconst int width = 2000;\nconst int height = 2000;\nconst int max_iterations = 1000;\n\nint mandelbrot(const std::complex<double> &c) {\n    std::complex<double> z = c;\n    int n = 0;\n    while (abs(z) <= 2 && n < max_iterations) {\n        z = z * z + c;\n        n++;\n    }\n    return n;\n}\n\nint main() {\n    std::vector<std::vector<int>> values(height, std::vector<int>(width));\n\n    // Calculate the Mandelbrot set using OpenMP\n    #pragma omp parallel for schedule(dynamic)\n    for (int y = 0; y < height; y++) {\n        for (int x = 0; x < width; x++) {\n            double real = (x - width / 2.0) * 4.0 / width;\n            double imag = (y - height / 2.0) * 4.0 / height;\n            std::complex<double> c(real, imag);\n\n            values[y][x] = mandelbrot(c);\n        }\n    }\n\n    // Prepare the output image\n    std::ofstream image(\"mandelbrot_set.ppm\");\n    image << \"P3\\n\" << width << \" \" << height << \" 255\\n\";\n\n    // Write the output image in serial\n    for (int y = 0; y < height; y++) {\n        for (int x = 0; x < width; x++) {\n            int value = values[y][x];\n            int r = (value % 8) * 32;\n            int g = (value % 16) * 16;\n            int b = (value % 32) * 8;\n\n            image << r << \" \" << g << \" \" << b << \" \";\n        }\n        image << \"\\n\";\n    }\n\n    image.close();\n    std::cout << \"Mandelbrot set image generated as mandelbrot_set.ppm.\" << std::endl;\n\n    return 0;\n}\n```\n\n## Resources\n\n- [Intro to parallel programming](https://tildesites.bowdoin.edu/~ltoma/teaching/cs3225-GIS/fall17/Lectures/openmp.html)\n- [Tutorials currated by OpenMP](https://www.openmp.org/resources/tutorials-articles/)\n- [OpenMP cheatsheet](https://www.openmp.org/wp-content/uploads/OpenMPRefCard-5-2-web.pdf)\n"
        },
        {
          "name": "openscad.md",
          "type": "blob",
          "size": 2.77734375,
          "content": "---\nname: OpenSCAD\nfilename: learnopenscad.scad\ncontributors:\n    - [\"Tom Preston\", \"https://github.com/tompreston/\"]\n---\n\nDraw 3D models with code using [OpenSCAD](https://openscad.org/).\n\n```openscad\n// Comments look like this\n\n// 3D Primitives\ncube(10);\ncube([5, 10, 20]);\nsphere(10);\n\n// Transformations\ntranslate([20, 0, 0]) cube(10);\nrotate([0, 20, 30]) cube(10);\n\ntranslate([20, 0, 0]) rotate([0, 20, 30]) cube(10);\nrotate([0, 20, 30]) translate([20, 0, 0]) cube(10);\n\n// Modifiers\n//\n//     * disable\n//     ! show only\n//     # highlight / debug\n//     % transparent / background\n//\n// For example, show only the rotated cube at the origin, before we translate it.\ntranslate([20, 0, 0]) !rotate([0, 20, 30]) cube(10);\n\n// Formatting\n// The following models are the same. The official docs prefer the second.\nrotate([0, 20, 30]) translate([20, 0, 0]) cube(10);\n\nrotate([0, 20, 30])\n    translate([20, 0, 0])\n    cube(10);\n\nrotate([0, 20, 30]) {\n    translate([20, 0, 0]) {\n        cube(10);\n    }\n}\n\n// Loops\nnum_cubes = 5;\nr = 20;\ncube_len = 5;\n\nfor (i = [0:num_cubes]) {\n    echo(str(\"Plot cube \", i));\n    rotate([0, i * 360 / num_cubes, 0])\n        translate([r, 0, 0])\n        cube(cube_len, center=true);\n}\n\n// Boolean operations\n//\n//            union() - the sum of both shapes\n//       difference() - the first shape, minus the second shape\n//     intersection() - only parts of both shapes which intersect\n//\ncube_l = 20;\ncube_w = 10;\ncube_h = 10;\n\nhole_pos_l = 10;\nhole_pos_h = 5;\nhole_r = 3;\n\ndifference() {\n    cube([cube_l, cube_w, cube_h]);\n    translate([hole_pos_l, 0, hole_pos_h])\n        rotate([-90, 0, 0])\n        cylinder(cube_w, r=hole_r);\n}\n\n// Functions calculate values\nfunction inch2mm(i) = i * 25.4;\n\ncube(inch2mm(2));\n\n// Modules create objects you want to use later\nmodule house(roof=\"flat\", paint=[1,0,0]) {\n    color(paint)\n    if (roof==\"flat\") {\n        translate([0,-1,0]) cube();\n    } else if (roof==\"pitched\") {\n        rotate([90,0,0])\n            linear_extrude(height=1)\n            polygon(points=[[0,0],[0,1],[0.5,1.5],[1,1],[1,0]]);\n    }\n    else if (roof==\"domical\") {\n        translate([0,-1,0]) {\n            translate([0.5,0.5,1])\n                sphere(r=0.5,$fn=20);\n            cube();\n        }\n    }\n}\n\nhouse(\"pitched\");\ntranslate([2, 0, 0]) house(\"domical\");\n\n// Import modules and function from other files\ninclude <filename> // Import the content of the file as if they were written in this file\nuse <filename>     // Import modules and functions, but do not execute any commands\n```\n\n## Further Reading\n\n* Official docs [openscad.org/documentation.html](https://openscad.org/documentation.html)\n* Cheat sheet [openscad.org/cheatsheet/index.html](https://openscad.org/cheatsheet/index.html)\n* Vim bindings [github.com/sirtaj/vim-openscad](https://github.com/sirtaj/vim-openscad)\n"
        },
        {
          "name": "osl.md",
          "type": "blob",
          "size": 24.1787109375,
          "content": "---\nname: OSL\nfilename: learnosl.osl\ncontributors:\n  - [\"Preetham Pemmasani\", \"https://github.com/Preetham-ai\"]\n---\n\nOSL (Open Shading Language) is a programming language designed by Sony for Arnold Renderer used for creating shaders.\n\n[Read more here.](https://raw.githubusercontent.com/imageworks/OpenShadingLanguage/master/src/doc/osl-languagespec.pdf)\n\n```c\n// Single-line comments start with //\n\n/* Multi line comments are preserved. */\n\n// Statements can be terminated by ;\ndivide(1,2);\n\n///////////////\n// 1. Basics //\n///////////////\n\n// Declating variables\ncolor Blue; // Initializing a variable\nint _num = 3;\nfloat Num = 3.00;\nfloat c[3] = {0.1, 0.2, 3.14}; // Array\n\n// Math works as you would expect\n3 + 1;   // 4\n74 - 3;   // 71\n20 * 2; // 40\n75/3;  // 25.0\n\n// And modulo division only works with integers\n10 % 2; // 0\n31 % 4; // 1\n\n// Bitwise operations only works with integers\n- 0 // 1 (Unary Negation)\n~ 00100011 // 11011100 (bitwise Compliment)\n1 << 2; // 4 (shift Left)\n12 >> 1; // 3 (shift Right)\n1 & 0; // 0 (bitwise AND)\n1 | 0; // 1 (bitwise OR)\n1 ^ 1; // 0 (bitwise XOR)\n\n// We also have booleans\ntrue;\nfalse;\n\n// Booleans can't be compared to integers\ntrue == 1 // Error\nfalse == 0 // Error\n\n// Negation uses the ! symbol\n!0; // 1\n!1; // 0\n!2; // 0\n//... and so on\n\n// Relation Operators are defined like:\n0 == 0 // true (equal to)\n0 != 1 // true (not equal to)\n5 < 3 // false (less then)\n3 <= 3 // true (less than or equal to)\n69 > 69 // false (greater than)\n99 >= 52 // true (greater than or equal)\n\n\n// Functions are same as C and C++\nfloat sum(float a, float b){\n\treturn a+b;\n}\n\nint subtract(int a, int b){\n\treturn a-b;\n}\n\nsum(2,3); // 5\n\n////////////////\n// 2. Shaders //\n////////////////\n\n// Shaders explain the custom behavior of materials and light\n// Shader's syntax is similar to the main function in C\n// The inputs and the outputs should be initialized to default types\nshader multiply(float a = 0.0,\n\t\t\t\tfloat b = 0.0, \n\t\t\t\toutput float c = 0.0){\n    c = a*b;\n}\n\n// Double brackets[[ ]] is used to classify metadata of a shader\nsurface plastic\n\t[[ string help = \"Realistic wood shader\" ]]\n(\n\tcolor Plastic = color (0.7, 0.5, 0.3) [[ string help = \"Base color\" ]],\n\tfloat Reflectivity = 0.5 [[ float min = 0, float max = 1 ]],\n){...}\n\n///////////////////////////////////////\n// Metadata Types\n///////////////////////////////////////\n\n[[ string label = \"IOR\" ]] // Display-name in UI of the parameter\n[[ string help = \"Change Refractive Index\" ]] // Info about the parameter\n[[ string help = \"widget\" // Gives widgets to input the parameter\n\tstring widget = \"number\" ]] // input float or int\n\tstring widget = \"string\" ]] // String input\n\tstring widget = \"boolean\" ]] // yes/no (or) 1/0\n\tstring widget = \"popup\", options = \"smooth|rough\" ]] // Drop-down list\n\t// enum Drop-down list can also be made\n\tstring widget = \"mapper\", options = \"smooth:0|rough:1\" ]]\n\tstring widget = \"filename\" ]] // Input files externally\n\tstring widget = \"null\" ]] // null input\n\n[[ float min = 0.0 ]] // Minimum value of parameter\n[[ float max = 0.5 ]] // Maximum value of parameter\n[[ int slider = 3.0   // Adds a slider as an input\n\tint slidermin = -1]] // minimum value of the slider\n\tint slidermax = 3]] // maximum value of the slider\n\tint slidercenter = 2]] // origin value of the slider\n\n[[ float sensitivity = 0.5 ]] // step size for incrementing the parameter\n[[ string URL = www.example.com/ ]] // URL of shader's documentation \n\n\t\n\n// There are different types of shaders\n\n/* Surface shaders determine the basic material properties of a surface and\nhow it reacts to light */\n// Light shaders are a type of SURFACE shaders used for emissive objects.\n// Displacement shaders alter the geometry using position and normals.\n// Volume shaders adds a medium like air/smoke/dust into the scene.\n\nvolume multiply(float a = 0.0, float b = 0.0, output float c = 0.0){\n    c = 2*a+b; \n}\n\n////////////////////////////////////////\n// 3. Data Types and Global Variables //\n////////////////////////////////////////\n\n// Data Types\n\n// 1. The void type indicates a function that doesn't return any value\n\n// 2. int (Integer)\n\tint x = -12; // Minimum size of 32-bits\n\tint new2 = 0x01cf; // Hexadecimal can also be specified\n\n\t///////////////////////////////////////\n\t// Order of Evaluation\n\t///////////////////////////////////////\n\n\t// From top to bottom, top has higher precedence\n\t//--------------------------//\n\t//        Operators         //\n\t//--------------------------//\n\t// int++, int--             //\n\t// ++ int --int - ~ !       //\n\t// * / %                    //\n\t// + -                      //\n\t// << >>                    //\n\t// < <= > >=                //\n\t// == !=                    //\n\t// &                        //\n\t// ^                        //\n\t// |                        //\n\t// &&                       //\n\t// ||                       //\n\t// ?:                       //\n\t// = += -= *= /=            //\n\t//--------------------------//\n\n// 3. float (Floating-point number)\n\tfloat A = 2.3; // minimum  IEEE 32-bit float\n\tfloat Z = -4.1e2; // Z = -4.1 * 10^2\n\n\t// Order of evaluation is similar to int.\n\t// Operations like ( ~ ! % << >> ^ | & && || ) aren't available in float\n\n// 4. string\n\t// The syntax is similar to C\n\tstring new = \"Hello World\";\n\t// some Special characters:\n\t/*\n\t'\\\"'; // double quote\n\t'\\n'; // newline character\n\t'\\t'; // tab character (left justifies text)\n\t'\\v'; // vertical tab\n\t'\\\\'; // back slash\n\t'\\r'; // carriage return\n\t'\\b'; // backspace character\n\t*/\n\n\t// Strings are concatenated with whitespace\n\t\"Hello \" \"world!\"; // \"Hello world!\"\n\t// concat function can also be used\n\tstring concat (\"Hello \",\"World!\"); // \"Hello world!\"\n\n\t// printf function is same as C\n\tint i = 18;\n\tprintf(\"I am %d years old\",i); // I am 18 years old\n\n\t// String functions can alse be used\n\tint strlen (string s); // gives the length of the string\n\tint len = strlen(\"Hello, World!\"); // len = 13\n\n\t// startswith returns 1 if string starts with prefix, else returns 0\n\tint starts = startswith(\"The quick brown fox\", \"The\"); // starts = 1\n\n\t// endswith returns 1 if string starts with suffix, else returns 0\n\tint ends = endswith(\"The quick brown fox\", \"fox\"); // ends will be 1\n\n// 5. color (Red, Green, Blue)\n\tcolor p = color(0,1,2); // black\n\tcolor q = color(1); // white ( same as color(1,1,1) )\n\tcolor r = color(\"rgb\", 0.23, 0.1, 0.8); // explicitly specify in RGB\n\tcolor s = color(\"hsv\", 0.23, 0.1, 0.8); // specify in HSV\n\t// HSV stands for (Hue, Saturation, Luminance)\n\t// HSL stands for (Hue, Saturation, Lightness)\n\t// YIQ, XYZ and xyY formats can also be used\n\t// We can also access the indivudual values of (R,G,B)\n\tfloat Red = p[0]; // 0 (access the red component)\n\tfloat Green = p[1]; // 1 (access the green component)\n\tfloat Blue = p[2]; // 2 (access the blue component)\n\n\t// They can also be accessed like this\n\tfloat Red = p.r; // 0 (access the red component)  \n\tfloat Green = p.g; // 1 (access the green component) \n\tfloat Blue = p.b; // 2 (access the blue component)\n\n\t// Math operators work like this with decreasing precedence\n\tcolor C = (3,2,3) * (1,0,0); // (3, 0, 0)\n\tcolor D = (1,1,1) * 255; // (255, 255, 255)\n\tcolor E = (25,5,125) / 5; // (5, 1, 25)\n\tcolor F = (30,40,50) / (3,4,5); // (10, 10, 10)\n\tcolor A = (1,2,3) + (1,0,0); // (2, 2, 3)\n\tcolor B = (1,2,3) - (1,0,0); // (0, 2, 3)\n\t// Operators like ( - == != ) are also used\n\n\t// Color Functions\n\tcolor blackbody (1500) // Gives color based on temperature (in Kelvin)\n\tfloat luminance (0.5, 0.3, 0.8) // 0.37 gives luminance cd/m^2\n\t// Luminance is calculated by 0.2126R+0.7152G+0.0722B\n\tcolor wavelength color (700) // (1, 0, 0) Gives color based on wavelength\n\tcolor transformc (\"hsl\", \"rgb\") // converts one system to another\n\n// 6. point (x,y,z) is position of a point in the 3D space\n// 7. vector (x,y,z) has length and direction but no position\n// 8. normal (x,y,z) is a special vector perpendicular to a surface\n\t// These Operators are the same as color and have the same precedence\n\tL = point(0.5, 0.6, 0.7);\n\tM = vector(30, 100, 70);\n\tN = normal(0, 0, 1);\n\n\t// These 3 types can be assigned to a coordinate system\n\tL = point(\"object\", 0.5, 0.6, 0.7); // relative to local space\n\tM = vector(\"common\", 30, 100, 70); // relative to world space\n\t// There's also (\"shader\", \"world\", \"camera\", \"screen\", \"raster\", \"NDC\")\n\n\tfloat x = L[0]; // 0.5 (access the x-component)  \n\tfloat y = L[1]; // 0.6 (access the y-component)  \n\tfloat z = L[2]; // 0.7 (access the z-component)\n\n\t// They can also be accessed like this\n\tfloat x = M.x; // 30 (access the x-component)\n\tfloat y = M.y; // 100 (access the y-component)\n\tfloat z = M.z; // 70 (access the z-component)\n\n\tfloat a = dot ((1,2,3), (1,2,3)); // 14 (Dot Product)\n\tvector b = cross ((1,2,3), (1,2,3)); // (0,0,0) (Cross Product)\n\tfloat l = length(L); // 1.085 (length of vector)\n\tvector normalize (vector L); // (0.460, 0.552, 0.644) Normalizes the vector\n\n\tpoint p0 = point(1, 2, 3);\n\tpoint p1 = point(4, 5, 6);\n\tpoint Q = point(0, 0, 0);\n\n\t// Finding distance between two points\n\tfloat len = distance(point(1, 2, 3), point(4, 5, 6)); // 5.196\n\t// Perpendicular distance from Q to line joining P0 and P1\n\tfloat distance (point P0, point P1, point Q); // 2.45\n\n\n// 9. matrix\n\t// Used for transforming vectors between different coordinate systems.\n\t// They are usually 4x4 (or) 16 floats\n\tmatrix zero = 0; // makes a 4x4 zero matrix\n\t/* 0.0, 0.0, 0.0, 0.0,\n       0.0, 0.0, 0.0, 0.0,\n       0.0, 0.0, 0.0, 0.0,\n       0.0, 0.0, 0.0, 0.0 */\n\t\n\tmatrix ident = 1; // makes a 4x4 identity matrix\n\t/* 1.0, 0.0, 0.0, 0.0,\n\t   0.0, 1.0, 0.0, 0.0,\n\t   0.0, 0.0, 1.0, 0.0,\n\t   0.0, 0.0, 0.0, 1.0 */\n\t\t\n\tmatrix m = 7; // Maked a 4x4 scalar matrix with scaling factor of 7\n\t/* 7.0, 0.0, 0.0, 0.0,\n\t   0.0, 7.0, 0.0, 0.0,\n\t   0.0, 0.0, 7.0, 0.0,\n\t   0.0, 0.0, 0.0, 7.0 */\n\t\n\tfloat x = m[1][1]; // 7\n\t\n\t// matrices can be constructed using floats in row-major order\n\t// matrices are usually 4x4 with 16 elements\n\tmatrix myMatrix = matrix(1.0, 0.0, 0.0, 0.0,    // Row 1\n                             0.0, 2.0, 0.0, 0.0,    // Row 2\n                             0.0, 0.0, 3.0, 0.0,    // Row 3\n                             0.0, 0.0, 0.0, 4.0);\t// Row 4\n\n\t// matrix transformations are easy to implement\n\tmatrix a = matrix (\"shader\", 1); // converted shader to common\n\tmatrix m = matrix (\"object\", \"world\"); // converted object to world\n\n\t// Operations that can be used with decreasing precedence are:\n\t// ( - * / == !=)\n\n\tfloat determinant (matrix M) // 24 (returns the determinant of the matrix)\n\tfloat transpose (matrix M) // returns the transpose of the matrix\n\t/* 1.0, 0.0, 0.0, 0.0,\n       0.0, 2.0, 0.0, 0.0,\n       0.0, 0.0, 3.0, 0.0,\n       0.0, 0.0, 0.0, 4.0 */\n\n// 10. array \n\t// Arrays in OSL are similar to C\n\tfloat a[5]; // initialize array a with size 5\n\tint b[3] = {90,80,70}; // declare array with size 3\n\tint len = arraylength(b); // 3\n\tint f = b[1]; // 80\n\tfloat anotherarray[3] = b; // arrays can be copied if same type\n\n// 11. struct (Structures)\n\t// Structures in OSL are similar to C and C++.\n\tstruct RGBA { // Defining a structure\n\t\tcolor rgb;\n\t\tfloat alpha;\n\t};\n\n\t\n\tRGBA col; // Declaring a structure\n\tRGBA b = { color(0.1, 0.2, 0.3), 1 }; // Can also be declared like this\n\n\tr.rgb = color (1, 0, 0); // Assign to one field\n\tcolor c = r.rgb; // Read from a structure field\n\n// 12. closure\n\t// Closure is used to store data that aren't considered when it executes.\n\t// It cannot be manipulated or read.\n\t// A null closure can always be assigned.\n\t// OSL currently only supports color as their closure.\n\n\t// A few examples of closures are:\n\n\t// Diffuse BSDF closures:\n\tclosure color oren_nayar_diffuse_bsdf(normal N, color alb, float roughness)\n\tclosure color burley_diffuse_bsdf(normal N, color alb, float roughness);\n\n\t// Dielectric BSDF closure:\n\tclosure color dielectric_bsdf(normal N, vector U, color reflection_tint,\n\t    color transmission_tint, float roughness_x, float roughness_y,\n\t    float ior, string distribution);\n\n\t// Conductor BSDF closure:\n\tclosure color conductor_bsdf(normal N, vector U, float roughness_x,\n\t    float roughness_y, color ior, color extinction, string distribution);\n\n\t// Generalized Schlick BSDF closure:\n\tclosure color generalized_schlick_bsdf(normal N, vector U,\n\t    color reflection_tint, color transmission_tint,\n\t    float roughness_x, float roughness_y, color f0, color f90,\n\t    float exponent, string distribution);\n\n\t// Translucent BSDF closure:\n\tclosure color translucent_bsdf(normal N, color albedo);\n\n\t// Transparent BSDF closure:\n\tclosure color transparent_bsdf();\n\n\t// Subsurface BSSRDF closure:\n\tclosure color subsurface_bssrdf();\n\n\t// Sheen BSDF closure:\n\tclosure color sheen_bsdf(normal N, color albedo, float roughness);\n\n\t// Anisotropic VDF closure: (Volumetric)\n\tclosure color anisotropic_vdf(color albedo, color extinction,\n\t    float anisotropy);\n\n\t// Medium VDF closure: (Volumetric)\n\tclosure color medium_vdf(color albedo, float transmission_depth,\n\t    color transmission_color, float anisotropy, float ior, int priority);\n\n\tclosure color uniform edf(color emittance); // Emission closure\n\tclosure color holdout(); // Holdout Hides objects beneath it\n\n\t// BSDFs can be layered using this closure\n\tclosure color layer (closure color top, closure color base);\n\n\n\n// Global Variables\n// Contains info that the renderer knows\n// These variables need not be declared\n\npoint P // Position of the point you are shading\nvector I // Incident ray direction from viewing position to shading position\nnormal N // Normal of the surface at P\nnormal Ng // Normal of the surface at P irrespective of bump mapping\nfloat u // UV 2D x - parametric coordinate of geometry\nfloat v // UV 2D y - parametric coordinate of geometry\nvector dPdu // change of P with respect to u tangent to the surface\nvector dPdv // change of P with respect to v tangent to the surface\nfloat time // Current time\nfloat dtime // Time covered\nvector dPdtime // change of P with respect to time\n\n/////////////////////\n// 4. Control flow //\n/////////////////////\n\n// Conditionals in OSL are just like in C or C++.\n\n// If/Else\nif (5>2){\n\tint x = s;\n\tint l = x;\n}\nelse{\n\tint x = s + l; \n}\n\n// 'while' loop\nint i = 0;\nwhile (i < 5) {\n    i += 1;\n    printf(\"Current value of i: %d\\n\", i);\n}\n\n// 'do-while' loop is where test happens after the body of the loop\nint i = 0;\ndo {\n    printf(\"Current value of i: %d\\n\", i);\n    i += 1;\n} while (i < 5);\n\n// 'for' loop\nfor (int i = 0; i < 5; i += 1) {\n    printf(\"Current value of i: %d\\n\", i);\n}\n\n/////////////////////\n// 5. Functions //\n/////////////////////\n\n// Math Constants\n\tM_PI // π\n\tM_PI_35 // π/35\n\tm_E // e\n\tM_LN2 // ln 2\n\tM_SQRT2 // √2\n\tM_SQRT1_2 // √(1/2)\n\n// Geometry Functions\n\tvector N = vector(0.1, 1, 0.2); // Normal vector\n\tvector I = vector(-0.5, 0.2, 0.8); // Incident vector\n\n\t// Faceforward tells the direction of vector\n\tvector facing_dir = faceforward(N, I); // facing_dir = (-0.5, 0.2, 0.8)\n\n\t// faceforward with three arguments\n\tvector ref = vector(0.3, -0.7, 0.6); // Reference normal\n\tfacing_dir = faceforward(N, I, ref); // facing_dir = (0.5, -0.2, -0.8)\n\n\t// reflect gives the reflected vector along normal\n\tvector refl = reflect(I, N); // refl = (-0.7, -0.4, 1.4)\\\n\n\t// refract gives the refracted vector along normal\n\tfloat ior = 1.5; // Index of refraction\n\tvector refr = refract(I, N, ior); // refr = (-0.25861, 0.32814, 0.96143)\n\n\t/* Fresnel computes the Reflection (R) and Transmission (T) vectors, along\n\twith the scaling factors for reflected (Kr) and transmitted (Kt) light. */\n\tfloat Kr, Kt;\n\tvector R, T;\n\tfresnel(I, N, ior, Kr, Kt, R, T);\n/* Kr = 0.03958, Kt = 0.96042\n\tR = (-0.19278, -0.07711, 0.33854)\n\tT = (-0.25861, 0.32814, 0.96143) */\n\n\t// Rotating a point along a given axis\n\tpoint Q = point(1, 0, 0);\n\tfloat angle = radians(90); // 90 degrees\n\tvector axis = vector(0, 0, 1);\n\tpoint rotated_point = rotate(Q, angle, axis);\n\t// rotated_point = point(0, 1, 0)\n\n\t// Rotating a point along a line made by 2 points\n\tpoint P0 = point(0, 0, 0);\n\tpoint P1 = point(1, 1, 0);\n\tangle = radians(45); // 45 degrees\n\tQ = point(1, 0, 0);\n\trotated_point = rotate(Q, angle, P0, P1);\n\t// rotated_point = point(0.707107, 0.707107, 0)\n\n\t// Calculating normal of surface at point p\n\tpoint p1 = point(1, 0, 0); // Point on the sphere of radius 1\n\tvector normal1 = calculatenormal(p1);\n\t// normal1 = vector(1, 0, 0)\n\n\t// Transforming units is easy\n\tfloat transformu (\"cm\", float x) // converts to cm\n\tfloat transformu (\"cm\", \"m\", float y) // converts cm to m\n\n// Displacement Functions\n\tvoid displace (float 5); // Displace by 5 amp units\n\tvoid bump (float 10); // Bump by 10 amp units\n\n\n// Noise Generation\n\n\ttype noise (type noise (string noisetype, float u, float v, ...)); // noise\n\ttype noise (string noisetype, point p,...); // point instead of coordinates\n\t/* some noises are (\"perlin\", \"snoise\", \"uperlin\", \"noise\", \"cell\", \"hash\"\n\t\"simplex\", \"usimplex\", \"gabor\", etc) */\n\t\n\t// Noise Names\n\n\t// 1. Perlin Noise (perlin, snoise):\n\t// Creates smooth, swirling noise often used for textures.\n\t// Range: [-1, 1] (signed)\n\tcolor cloud_texture = noise(\"perlin\", P);\n\n\t// 2. Simplex Noise (simplex, usimplex):\n\t// Similar to Perlin noise but faster.\n\t// Range: [-1, 1] (signed) for simplex, [0, 1] (unsigned) for usimplex\n\tfloat bump_amount = 0.2 * noise(\"simplex\", P * 5.0);\n\n\t// 3. UPerlin Noise (uperlin, noise):\n\t// Similar to peril\n\t// Range: [0, 1] (unsigned)\n\tcolor new_texture = noise(\"uperlin\", P);\n\t\n\t// 4. Cell Noise (cell):\n\t// Creates a blocky, cellular and constant values within each unit block\n\t// Range: [0, 1] (unsigned)\n\tcolor new_texture = noise(\"cell\", P);\n\n\t// 5. Hash Noise (hash):\n\t// Generates random, uncorrelated values at each point.\n\t// Range: [0, 1] (unsigned)\n\tcolor new_texture = noise(\"hash\", P);\n\n\t// Gabor Noise (gabor) \n\t// Gabor Noise is advanced version of Perin noies and gives more control\n\t// Range: [-1, 1] (signed)\n\t// Gabor Noise Parameters\n\n\t// Anisotropic (default: 0)\n\t// Controls anisotropy:\n\t// 0: Isotropic (equal frequency in all directions)\n\t// 1: Anisotropic with user-defined direction vector (defaults to (1,0,0))\n\t/* 2: Hybrid mode,anisotropic along direction vector but radially isotropic\n\tperpendicularly. */\n\n\t// Direction (default: (1,0,0))\n\t// Specifies the direction of anisotropy (used only if anisotropic is 1).\n\n\t// bandwidth (default: 1.0)\n\t// Controls the frequency range of the noise.\n\n\t// impulses (default: 16)\n\t// Controls the number of impulses used per cell, affecting detail level.\n\n\t// do_filter (default: 1)\n\t// Enables/disables antialiasing (filtering).\n\n\tresult = noise(\n        \"gabor\",\n        P,\n        \"anisotropic\", anisotropic,\n        \"direction\", direction,\n        \"bandwidth\", bandwidth,\n        \"impulses\", impulses,\n        \"do_filter\", do_filter\n    );\n\n\t// Specific noises can also be used instead of passing them as types\n\t// pnoise is periodic noise\n\tfloat n1 = pnoise(\"perlin\", 0.5, 1.0);\n\t// 2D periodic noise with Gabor type\n\tfloat n2 = pnoise(\"gabor\", 0.2, 0.3, 2.0, 3.0);\n\t// 2D non-periodic simplex noise\n\tfloat n3 = snoise(0.1, 0.7);\n\t// 2D periodic simplex noise\n\ttype psnoise (float u, float v, float uperiod, float vperiod);\n\tfloat n4 = psnoise(0.4, 0.6, 0.5, 0.25);\n\t// 2D cellular noise\n\tfloat n5 = cellnoise(0.2, 0.8);\n\t// 2D hash noise\n\tint n6 = hash(0.7, 0.3);\n\n// Step Function\n\t// Step Functions are used to compare input and threshold\n\n\t// The type may be of float, color, point, vector, or normal.\n\ttype step (type edge, type x); // Returns 1 if x ≥ edge, else 0\n\tcolor checker = step(0.5, P);  // P is a point on the surface\n\t/* Pixels with P values below 0.5 will be black, those above or equal will\n\tbe white */\n\tfloat visibility = step(10, distance(P, light_position));\n\t// Light is fully visible within 10 units, completely invisible beyond\n\n\ttype linearstep (type edge0, type edge1, type x); /* Linearstep Returns 0\n\tif x ≤ edge0, and 1 if x ≥ edge1, with linear interpolation */\n\tcolor gradient = linearstep(0, 1, P);\n\t// P is a point on the surface between 0 and 1\n\t// Color will graduate smoothly from black to white as P moves from 0 to 1\n\tfloat fade = linearstep(0.85, 1, N.z);  // N.z is the z-component\n\t// Object edges with normals close to vertical (N.z near 1) will fade out\n\t\n\ttype smoothstep (type edge0, type edge1, type x); /* smoothstep Returns 0\n\tif x ≤ edge0, and 1 if x ≥ edge1, with Hermite interpolation */\n\tfloat soft_mask = smoothstep(0.2, 0.8, noise(P));  /* noise(P) is a noisy\n\tvalue between 0 and 1. soft_mask will vary smoothly between 0 and 1 based\n\ton noise(P), with a smoother curve than linearstep */\n\n// Splines\n\t// Splines are smooth curves based on a set of control points\n\n\t/* The type of interpolation ranges from \"catmull-rom\", \"bezier\",\n\t\"bspline\", \"hermite\", \"linear\", or \"constant\" */\n\n\t// Spline with knot vector\n\tfloat[] knots = {0, 0, 0, 0.25, 0.5, 0.75, 1, 1, 1};\n\tpoint[] controls = {point(0),point(1, 2, 1),point(2, 1, 2),point(3, 3, 1)};\n\tspline curve1 = spline(\"bezier\", 0.5, len(knots), controls);\n\t// curve1 is a Bezier spline evaluated at u = 0.5\n\n\t// Spline with control points\n\tspline curve2 = spline(\"catmull-rom\", 0.25, point(0, 0, 0), point(1, 2, 1),\n\t                       point(2, 1, 2), point(3, 3, 1));\n\t// curve2 is a Catmull-Rom spline evaluated at u = 0.25\n\n\t// Constant spline with a single float value\n\tfloat value = 10;\n\tu = 0.1;\n\tspline curve5 = spline(\"constant\", u, value);\n\t// curve5 is a constant spline with value 10 evaluated at u = 0.1\n\n\t// Hermite spline with point and vector controls\n\tpoint q0 = point(0, 0, 0), q1 = point(3, 3, 3);\n\tvector t0 = vector(1, 0, 0), t1 = vector(-1, 1, 1);\n\tu = 0.75;\n\tspline curve3 = spline(\"hermite\", u, q0, t0, q1, t1);\n\t// curve3 is a Hermite spline evaluated at u = 0.75\n\n\t// Linear spline with float controls\n\tfloat f0 = 0, f1 = 1, f2 = 2, f3 = 3;\n\tu = 0.4;\n\tspline curve4 = spline(\"linear\", u, f0, f1, f2, f3);\n\t// curve4 is a linear spline evaluated at u = 0.4\n\t\n\t// InverseSplines also exist\n\t\n\t// Inverse spline with control values\n\tfloat y0 = 0, y1 = 1, y2 = 2, y3 = 3;\n\tfloat v = 1.5;\n\tfloat u1 = splineinverse(\"linear\", v, y0, y1, y2, y3);\n\t// u1 = 0.5 (linear interpolation between y1 and y2)\n\n\t// Inverse spline with knot vector\n\tfloat[] knots = {0, 0, 0, 0.25, 0.5, 0.75, 1, 1, 1};\n\tfloat[] values = {0, 1, 4, 9};\n\tv = 6;\n\tfloat u2 = splineinverse(\"bezier\", v, len(knots), values);\n\t// u2 = 0.75 (Bezier spline inverse evaluated at v = 6)\n\n\t// Inverse spline with constant value\n\tv = 10;\n\tfloat u3 = splineinverse(\"constant\", v, 10);\n\t// u3 = 0 (since the constant spline always returns 10)\n\n\t// Inverse spline with periodic values\n\tfloat y4 = 0, y5 = 1, y6 = 0;\n\tv = 0.5;\n\tfloat u4 = splineinverse(\"periodic\", v, y4, y5, y6);\n\t// u4 = 0.75 (periodic spline inverse evaluated at v = 0.5)\n\n\n\n// Calculus Operators\n\t// Partial derivative of f with respect to x, y and z using Dx, Dy, Dz\n\tfloat a = 3.14;\n\tfloat dx = Dx(a); // partial derivative of a with respect to x\n\n\tpoint p = point(1.0, 2.0, 3.0);\n\tvector dp_dx = Dx(p); // partial derivative of p with respect to x\n\n\tvector dv_dy = Dy(N); // partial derivative of normal with respect to y\n\n\tcolor c = color(0.5, 0.2, 0.8);\n\tcolor dc_dz = Dz(c); // partial derivative of c with respect to z\n\t\n\n\tfloat area (point p) // gives the surface area at the position p \n\n\tfloat filterwidth (float x) // gives the changes of x in adjacent samples\n\n// Texture Functions\n\t// lookup for a texture at coordinates (x,y)\n\tcolor col1 = texture(\"texture.png\", 0.5, 0.2);\n\t// Lookup color at (0.5, 0.2) in texture.png\n\n\t// 3D lookup for a texture at coordinates (x,y)\n\tcolor col3 = texture3d(\"texture3d.vdb\", point(0.25, 0.5, 0.75));\n\n\t// parameters are (\"blur\",\"width\",\"wrap\",\"fill\",\"alpha\",\"interp\", ...)\n\tcolor col2 = texture(\"texture.png\",1.0,0.75,\"blur\",0.1,\"wrap\", \"periodic\");\n\t// Lookup color at (1.0, 0.75) with blur 0.1 and periodic wrap mode\n\t\n// Light Functions\n\n\tfloat surfacearea (); // Returns the surface area of area light covers\n\tint backfacing (); // Outputs 1 if the normals are backfaced, else 0\n\tint raytype (string name); // returns 1 if the ray is a particular raytype\n\n\t// Tracing a ray from a position in a direction\n\tpoint pos = point(0, 0, 0); // Starting position of the ray\n\tvector dir = vector(0, 0, 1); // Direction of the ray\n\tint hit = trace(pos, dir); // returns 1 if it hits, else 0\n```\n\n### Further reading\n\n* [Blender Docs for OSL](https://docs.blender.org/manual/en/latest/render/shader_nodes/osl.html)\n* [C4D Docs for OSL](https://docs.otoy.com/cinema4d//OpenShadingLanguageOSL.html)\n* Open Shading Language on [GitHub](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage)\n* [Official OSL Documentation](https://open-shading-language.readthedocs.io/en/main/)\n"
        },
        {
          "name": "p5.md",
          "type": "blob",
          "size": 5.0771484375,
          "content": "---\ncategory: framework\nname: p5.js\ncontributors:\n    - ['Amey Bhavsar', 'https://github.com/ameybhavsar24']\n    - ['Claudio Busatto', 'https://github.com/cjcbusatto']\nfilename: p5.js\n---\n\np5.js is a JavaScript library that starts with the original goal of [Processing](https://processing.org), to make coding accessible for artists, designers, educators, and beginners, and reinterprets this for today's web.\nSince p5 is a JavaScript library, you should learn [JavaScript](../javascript/) first.\n\nTo run p5.js code, you can go to [the online editor](https://editor.p5js.org/).\n\n```js\n///////////////////////////////////\n// p5.js has two important functions to work with.\n\nfunction setup() {\n  // the setup function gets executed just once when the window is loaded\n}\nfunction draw() {\n  // the draw function gets called every single frame\n  // if the framerate is set to 30, it would get called 30 times every second\n}\n\n// the following code explains all features\n\nfunction setup() {\n  createCanvas(640, 480); // creates a new canvas element with 640px as width as 480px as height\n  background(128); // sets the background color to rgb(128, 128, 128)\n  // background('#aaf') // you can use hex codes and color names too\n}\n\nfunction draw() {\n  background('#f2f2fc'); // usually, you call `background` in draw to clear the screen\n  // creates an ellipse at 10px from the top and 10px from the left, with width and height 37\n  ellipse(10, 10, 37, 37);\n  // remember in p5.js the origin is at the top-left corner of the canvas\n\n  if (mouseIsPressed) {\n    // mouseIsPressed is a boolean variable that is true when the mouse is down, and false otherwise\n\n    fill(0); // fill sets the fill color, which will stay until it is changed\n  } else {\n    fill(255, 255, 255, 240); // fill(a, b, c, d) sets the fill color to rgba(a, b, c, d)\n  }\n\n  ellipse(mouseX, mouseY, 80, 80);\n  // mouseX and mouseY are the x and y position of the mouse, respectively\n  // the above code creates and ellipse under the mouse, and fills it with white or black\n\n\n  // some other 2d primitives (shapes) you can draw:\n  rect(9, 3, 23, 26); // x, y, width, height\n  noFill(); // sets the fill color to transparent\n  triangle(100, 400, 130, 200, 200, 300); // x1, y1, x2, y2, x3, y3\n  point(100, 300); // create a point at x, y\n  // there are more, but they are more complex.\n}\n\n/** Bouncing balls animation\n * You can copy-paste this code into the online editor at\n * https://editor.p5js.org/\n */\nclass Ball {\n  constructor(x, y, xvel, yvel, radius, col) {\n    this.position = createVector(x, y); // create a p5.Vector object which stores the x and y\n    this.velocity = createVector(xvel, yvel); // make a p5.Vector storing the velocity\n    this.radius = radius;\n    this.col = col; // p5 already uses the word color, so we use col instead\n  }\n\n  update() {\n    this.position.add(this.velocity); // you can add vectors with p5.Vector.add(p5.Vector)\n    if (this.position.x + this.radius > width) {\n      // flip the direction the ball is going in if it touches the edge\n      this.velocity.x *= -1;\n    }\n    if (this.position.x - this.radius < 0) {\n      this.velocity.x *= -1;\n    }\n    if (this.position.y + this.radius > height) {\n      this.velocity.y *= -1;\n    }\n    if (this.position.y - this.radius < 0) {\n      this.velocity.y *= -1;\n    }\n  }\n\n  render() {\n    // you can figure out what this does by now\n    fill(this.col);\n    ellipse(this.position.x, this.position.y, this.radius);\n  }\n}\n\nlet numBalls = 23;\nlet balls = [];\n\nfunction setup() {\n  createCanvas(400, 400); // width, height\n  for (let i = 0; i < numBalls; i++) {\n    let r = random(255); // random number between 0 and 255\n    let g = random(255);\n    let b = random(255);\n\n    balls.push(\n      new Ball(\n        random(30, width), // x position\n        random(height), // y position\n        random(-4, 4), // x velocity\n        random(-4, 4), // y velocity\n        random(4, 10), // radius\n        color(r, g, b) // fill color for the ball\n      )\n    );\n  }\n}\n\nfunction draw() {\n  background(255);\n  for (let ball of balls) {\n    ball.update();\n    ball.render();\n  }\n}\n\n// So far, we have only seen the default rendering mode.\n// This time, we will use the 'webgl' renderer\n\nfunction setup() {\n  createCanvas(400, 400, WEBGL); // width, height, rendering mode\n}\n\nfunction draw() {\n  background(0);\n\n  stroke('#000');\n  fill('#aaf');\n\n  // rotate around the x, y, and z axes by the frame count divided by 50\n  rotateX(frameCount / 50);\n  rotateY(frameCount / 50);\n  rotateZ(frameCount / 50);\n  // frameCount is a p5.js variable that stores the amount of frames that have passed\n \n  box(50, 50, 50); // width, height, depth\n}\n```\n\n## Further Reading\n\n- [p5.js | get started](http://p5js.org/get-started/) The official documentation\n- [Code! Programming for Beginners with p5.js - YouTube](https://www.youtube.com/watch?v=yPWkPOfnGsw&vl=en) Introduction and Coding challenges using Processing and p5.js by Coding Train\n- [The Coding Train](https://codingtra.in/) A website with sketches made in p5 and processing\n\n## Source\n\n- [p5's source code](https://github.com/processing/p5.js)\n- [p5.sound.js source](https://github.com/processing/p5.js-sound)\n"
        },
        {
          "name": "paren.md",
          "type": "blob",
          "size": 5.283203125,
          "content": "---\n\nname: Paren\nfilename: learnparen.paren\ncontributors:\n  - [\"KIM Taegyoon\", \"https://github.com/kimtg\"]\n  - [\"Claudson Martins\", \"https://github.com/claudsonm\"]\n---\n\n[Paren](https://bitbucket.org/ktg/paren) is a dialect of Lisp. It is designed to be an embedded language.\n\nSome examples are from [Racket](../racket/).\n\n```scheme\n;;; Comments\n# comments\n\n;; Single line comments start with a semicolon or a sharp sign\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 1. Primitive Datatypes and Operators\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;;; Numbers\n123 ; int\n3.14 ; double\n6.02e+23 ; double\n(int 3.14) ; => 3 : int\n(double 123) ; => 123 : double\n\n;; Function application is written (f x y z ...)\n;; where f is a function and x, y, z, ... are operands\n;; If you want to create a literal list of data, use (quote) to stop it from\n;; being evaluated\n(quote (+ 1 2)) ; => (+ 1 2)\n;; Now, some arithmetic operations\n(+ 1 1)  ; => 2\n(- 8 1)  ; => 7\n(* 10 2) ; => 20\n(^ 2 3) ; => 8\n(/ 5 2) ; => 2\n(% 5 2) ; => 1\n(/ 5.0 2) ; => 2.5\n\n;;; Booleans\ntrue ; for true\nfalse ; for false\n(! true) ; => false\n(&& true false (prn \"doesn't get here\")) ; => false\n(|| false true (prn \"doesn't get here\")) ; => true\n\n;;; Characters are ints.\n(char-at \"A\" 0) ; => 65\n(chr 65) ; => \"A\"\n\n;;; Strings are fixed-length array of characters.\n\"Hello, world!\"\n\"Benjamin \\\"Bugsy\\\" Siegel\"   ; backslash is an escaping character\n\"Foo\\tbar\\r\\n\" ; includes C escapes: \\t \\r \\n\n\n;; Strings can be added too!\n(strcat \"Hello \" \"world!\") ; => \"Hello world!\"\n\n;; A string can be treated like a list of characters\n(char-at \"Apple\" 0) ; => 65\n\n;; Printing is pretty easy\n(pr \"I'm\" \"Paren. \") (prn \"Nice to meet you!\")\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 2. Variables\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; You can create or set a variable using (set)\n;; a variable name can use any character except: ();#\"\n(set some-var 5) ; => 5\nsome-var ; => 5\n\n;; Accessing a previously unassigned variable is an exception\n; x ; => Unknown variable: x : nil\n\n;; Local binding: Use lambda calculus! 'a' and 'b' are bound to '1' and '2' only within the (fn ...)\n((fn (a b) (+ a b)) 1 2) ; => 3\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 3. Collections\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;;; Lists\n\n;; Lists are vector-like data structures. (Random access is O(1).)\n(cons 1 (cons 2 (cons 3 (list)))) ; => (1 2 3)\n;; 'list' is a convenience variadic constructor for lists\n(list 1 2 3) ; => (1 2 3)\n;; and a quote can also be used for a literal list value\n(quote (+ 1 2)) ; => (+ 1 2)\n\n;; Can still use 'cons' to add an item to the beginning of a list\n(cons 0 (list 1 2 3)) ; => (0 1 2 3)\n\n;; Lists are a very basic type, so there is a *lot* of functionality for\n;; them, a few examples:\n(map inc (list 1 2 3))          ; => (2 3 4)\n(filter (fn (x) (== 0 (% x 2))) (list 1 2 3 4))    ; => (2 4)\n(length (list 1 2 3 4))     ; => 4\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 3. Functions\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Use 'fn' to create functions.\n;; A function always returns the value of its last expression\n(fn () \"Hello World\") ; => (fn () Hello World) : fn\n\n;; Use parentheses to call all functions, including a lambda expression\n((fn () \"Hello World\")) ; => \"Hello World\"\n\n;; Assign a function to a var\n(set hello-world (fn () \"Hello World\"))\n(hello-world) ; => \"Hello World\"\n\n;; You can shorten this using the function definition syntactic sugar:\n(defn hello-world2 () \"Hello World\")\n\n;; The () in the above is the list of arguments for the function\n(set hello\n  (fn (name)\n    (strcat \"Hello \" name)))\n(hello \"Steve\") ; => \"Hello Steve\"\n\n;; ... or equivalently, using a sugared definition:\n(defn hello2 (name)\n  (strcat \"Hello \" name))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 4. Equality\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; for numbers use '=='\n(== 3 3.0) ; => true\n(== 2 1) ; => false\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 5. Control Flow\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;;; Conditionals\n\n(if true               ; test expression\n    \"this is true\"   ; then expression\n    \"this is false\") ; else expression\n; => \"this is true\"\n\n;;; Loops\n\n;; for loop is for number\n;; (for SYMBOL START END STEP EXPR ..)\n(for i 0 10 2 (pr i \"\")) ; => prints 0 2 4 6 8 10\n(for i 0.0 10 2.5 (pr i \"\")) ; => prints 0 2.5 5 7.5 10\n\n;; while loop\n((fn (i)\n  (while (< i 10)\n    (pr i)\n    (++ i))) 0) ; => prints 0123456789\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 6. Mutation\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Use 'set' to assign a new value to a variable or a place\n(set n 5) ; => 5\n(set n (inc n)) ; => 6\nn ; => 6\n(set a (list 1 2)) ; => (1 2)\n(set (nth 0 a) 3) ; => 3\na ; => (3 2)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 7. Macros\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Macros let you extend the syntax of the language.\n;; Paren macros are easy.\n;; In fact, (defn) is a macro.\n(defmacro setfn (name ...) (set name (fn ...)))\n(defmacro defn (name ...) (def name (fn ...)))\n\n;; Let's add an infix notation\n(defmacro infix (a op ...) (op a ...))\n(infix 1 + 2 (infix 3 * 4)) ; => 15\n\n;; Macros are not hygienic, you can clobber existing variables!\n;; They are code transformations.\n```\n"
        },
        {
          "name": "pascal.md",
          "type": "blob",
          "size": 6.6015625,
          "content": "---\nname: Pascal\nfilename: learnpascal.pas\ncontributors:\n    - [\"Ganesha Danu\", \"http://github.com/blinfoldking\"]\n    - [\"Keith Miyake\", \"https://github.com/kaymmm\"]\n---\n\n\n>Pascal is an imperative and procedural programming language, which Niklaus Wirth designed in 1968–69 and published in 1970, as a small, efficient language intended to encourage good programming practices using structured programming and data structuring. It is named in honor of the French mathematician, philosopher and physicist Blaise Pascal. \nsource : [wikipedia](https://en.wikipedia.org/wiki/Pascal_(programming_language))\n\n\n\nTo compile and run a pascal program you could use a free pascal compiler. [Download Here](https://www.freepascal.org/)\n\n```pascal\n//Anatomy of a Pascal Program\n//this is a comment\n{\n    this is a \n    multiline comment\n}\n\n//name of the program\nprogram learn_pascal; //<-- don't forget a semicolon\n\nconst\n    {\n        this is where you should declare constant values\n    }\ntype\n    {\n        this is where you should declare custom\n        data-types\n    }\nvar\n    {\n        this is where you should declare a variable\n    }\n\n//main program area\nbegin\n    {\n        area to declare your instruction\n    }\nend. // End of a main program area should require a \".\" symbol\n```\n\n```pascal\n//When declaring variables\n//you can do this\nvar a:integer;\nvar b:integer;\n//or this\nvar \n    a : integer;\n    b : integer;\n//or this\nvar a,b : integer;\n```\n\n```pascal\nprogram Learn_More;\n//Let's learn about data types and their operations\n\nconst\n    PI = 3.141592654;\n    GNU = 'GNU''s Not Unix';\n        // constants are conventionally named using CAPS\n        // their values are fixed and cannot be changed during runtime\n        // holds any standard data type (integer, real, boolean, char, string)\n\ntype\n    ch_array : array [0..255] of char;\n        // arrays are new 'types' specifying the length and data type\n        // this defines a new data type that contains 255 characters\n        // (this is functionally equivalent to a string[256] variable)\n    md_array : array of array of integer;\n        // nested arrays are equivalent to multidimensional arrays\n        // can define zero (0) length arrays that are dynamically sized\n        // this is a 2-dimensional array of integers\n\n//Declaring variables\nvar\n    int, c, d  : integer;\n           // three variables that contain integer numbers\n           // integers are 16-bits and limited to the range [-32,768..32,767]\n    r    : real;\n           // a variable that contains a real number data types\n           // reals can range between [3.4E-38..3.4E38]\n    bool : boolean;\n           // a variable that contains a Boolean(True/False) value\n    ch   : char;\n           // a variable that contains a character value\n           // char variables are stored as 8-bit data types so no UTF\n    str  : string;\n           // a non-standard variable that contains a string value\n           // strings are an extension included in most Pascal compilers\n           // they are stored as an array of char with default length of 255.\n    s    : string[50];\n           // a string with maximum length of 50 chars.\n           // you can specify the length of the string to minimize memory usage\n    my_str: ch_array;\n           // you can declare variables of custom types\n    my_2d : md_array;\n           // dynamically sized arrays need to be sized before they can be used.\n\n    // additional integer data types\n    b    : byte;     // range [0..255]\n    shi  : shortint; // range [-128..127]\n    smi  : smallint; // range [-32,768..32,767] (standard Integer)\n    w    : word;     // range [0..65,535]\n    li   : longint;  // range [-2,147,483,648..2,147,483,647]\n    lw   : longword; // range [0..4,294,967,295]\n    c    : cardinal; // longword\n    i64  : int64;    // range [-9223372036854775808..9223372036854775807]\n    qw   : qword;    // range [0..18,446,744,073,709,551,615]\n\n    // additional real types\n    rr   : real;     // range depends on platform (i.e., 8-bit, 16-bit, etc.)\n    rs   : single;   // range [1.5E-45..3.4E38]\n    rd   : double;   // range [5.0E-324 .. 1.7E308]\n    re   : extended; // range [1.9E-4932..1.1E4932]\n    rc   : comp;     // range [-2E64+1 .. 2E63-1]\n\nBegin\n    int := 1;// how to assign a value to a variable\n    r   := 3.14;\n    ch  := 'a';\n    str := 'apple';\n    bool := true;\n    //pascal is not a case-sensitive language\n    //arithmetic operation\n    int := 1 + 1; // int = 2 overwriting the previous assignment\n    int := int + 1; // int = 2 + 1 = 3;\n    int := 4 div 2; //int = 2 division operation where result will be floored\n    int := 3 div 2; //int = 1\n    int := 1 div 2; //int = 0\n\n    bool := true or false; // bool = true\n    bool := false and true; // bool = false\n    bool := true xor true; // bool = false\n\n    r := 3 / 2; // a division operator for real\n    r := int; // can assign an integer to a real variable but not the reverse\n\n    c := str[1]; // assign the first letter of str to c\n    str := 'hello' + 'world'; //combining strings\n\n    my_str[0] := 'a'; // array assignment needs an index\n\n    setlength(my_2d,10,10); // initialize dynamically sized arrays: 10×10 array\n    for c := 0 to 9 do // arrays begin at 0 and end at length-1\n        for d := 0 to 9 do // for loop counters need to be declared variables\n        my_2d[c,d] := c * d;\n          // address multidimensional arrays with a single set of brackets\n\nEnd.\n```\n\n```pascal\nprogram Functional_Programming;\n\nVar\n    i, dummy : integer;\n\nfunction factorial_recursion(const a: integer) : integer;\n{ recursively calculates the factorial of integer parameter a }\n\n// Declare local variables within the function\n// e.g.:\n// Var\n//    local_a : integer;\n\nBegin\n    If a >= 1 Then\n    // return values from functions by assigning a value to the function name\n        factorial_recursion := a * factorial_recursion(a-1)\n    Else\n        factorial_recursion := 1;\nEnd; // terminate a function using a semicolon after the End statement.\n\nprocedure get_integer(var i : integer; dummy : integer);\n{ get user input and store it in the integer parameter i.\n  parameters prefaced with 'var' are variable, meaning their value can change\n  outside of the parameter. Value parameters (without 'var') like 'dummy' are\n  static and changes made within the scope of the function/procedure do not\n  affect the variable passed as a parameter }\n\nBegin\n    write('Enter an integer: ');\n    readln(i);\n    dummy := 4; // dummy will not change value outside of the procedure\nEnd;\n\nBegin // main program block\n    dummy := 3;\n    get_integer(i, dummy);\n    writeln(i, '! = ', factorial_recursion(i));\n    // outputs i!\n    writeln('dummy = ', dummy); // always outputs '3' since dummy is unchanged.\nEnd.\n```\n\n"
        },
        {
          "name": "pcre.md",
          "type": "blob",
          "size": 3.2978515625,
          "content": "---\nname: PCRE\nfilename: pcre.txt\ncontributors:\n    - [\"Sachin Divekar\", \"http://github.com/ssd532\"]\n\n---\n\nA regular expression (regex or regexp for short) is a special text string for describing a search pattern. e.g. to extract the protocol from a url string we can say `/^[a-z]+:/` and it will match `http:` from `http://github.com/`.\n\nPCRE (Perl Compatible Regular Expressions) is a C library implementing regex. It was written in 1997 when Perl was the de-facto choice for complex text processing tasks. The syntax for patterns used in PCRE closely resembles Perl. PCRE syntax is being used in many big projects including PHP, Apache, R to name a few.\n\n\nThere are two different sets of metacharacters:\n\n* Those that are recognized anywhere in the pattern except within square brackets\n\n```\n  \\      general escape character with several uses\n  ^      assert start of string (or line, in multiline mode)\n  $      assert end of string (or line, in multiline mode)\n  .      match any character except newline (by default)\n  [      start character class definition\n  |      start of alternative branch\n  (      start subpattern\n  )      end subpattern\n  ?      extends the meaning of (\n         also 0 or 1 quantifier\n         also quantifier minimizer\n  *      0 or more quantifier\n  +      1 or more quantifier\n         also \"possessive quantifier\"\n  {      start min/max quantifier\n```\n\n* Those that are recognized within square brackets. Outside square brackets. They are also called as character classes.\n\n```\n  \\      general escape character\n  ^      negate the class, but only if the first character\n  -      indicates character range\n  [      POSIX character class (only if followed by POSIX syntax)\n  ]      terminates the character class\n```\n\nPCRE provides some generic character types, also called as character classes.\n\n```\n  \\d     any decimal digit\n  \\D     any character that is not a decimal digit\n  \\h     any horizontal white space character\n  \\H     any character that is not a horizontal white space character\n  \\s     any white space character\n  \\S     any character that is not a white space character\n  \\v     any vertical white space character\n  \\V     any character that is not a vertical white space character\n  \\w     any \"word\" character\n  \\W     any \"non-word\" character\n```\n\n## Examples\n\nWe will test our examples on the following string:\n\n```\n66.249.64.13 - - [18/Sep/2004:11:07:48 +1000] \"GET /robots.txt HTTP/1.0\" 200 468 \"-\" \"Googlebot/2.1\"\n```\n\n It is a standard Apache access log.\n\n| Regex | Result          | Comment |\n| :---- | :-------------- | :------ |\n| `GET`   | GET | GET matches the characters GET literally (case sensitive) |\n| `\\d+.\\d+.\\d+.\\d+` | 66.249.64.13 | `\\d+` match a digit [0-9] one or more times defined by `+` quantifier, `\\.` matches `.` literally |\n| `(\\d+\\.){3}\\d+` | 66.249.64.13 | `(\\d+\\.){3}` is trying to match group (`\\d+\\.`) exactly three times. |\n| `\\[.+\\]` | [18/Sep/2004:11:07:48 +1000] | `.+` matches any character (except newline), `.` is any character |\n| `^\\S+` | 66.249.64.13 | `^` means start of the line, `\\S+` matches any number of non-space characters |\n| `\\+[0-9]+` | +1000 | `\\+` matches the character `+` literally. `[0-9]` character class means single number. Same can be achieved using `\\+\\d+` |\n\n## Further Reading\n[Regex101](https://regex101.com/) - Regular Expression tester and debugger\n"
        },
        {
          "name": "perl.md",
          "type": "blob",
          "size": 8.8369140625,
          "content": "---\nname: Perl\nfilename: learnperl.pl\ncontributors:\n    - [\"Korjavin Ivan\", \"http://github.com/korjavin\"]\n    - [\"Dan Book\", \"http://github.com/Grinnz\"]\n---\n\nPerl is a highly capable, feature-rich programming language with over 25 years of development.\n\nPerl runs on over 100 platforms from portables to mainframes and is suitable for both rapid prototyping and large scale development projects.\n\n```perl\n# Single line comments start with a number sign.\n\n#### Strict and warnings\n\nuse strict;\nuse warnings;\n\n# All perl scripts and modules should include these lines. Strict causes\n# compilation to fail in cases like misspelled variable names, and\n# warnings will print warning messages in case of common pitfalls like\n# concatenating to an undefined value.\n\n#### Perl variable types\n\n#  Variables begin with a sigil, which is a symbol showing the type.\n#  A valid variable name starts with a letter or underscore,\n#  followed by any number of letters, numbers, or underscores.\n\n### Perl has three main variable types: $scalar, @array, and %hash.\n\n## Scalars\n#  A scalar represents a single value:\nmy $animal = \"camel\";\nmy $answer = 42;\nmy $display = \"You have $answer ${animal}s.\\n\";\n\n# Scalar values can be strings, integers or floating point numbers, and\n# Perl will automatically convert between them as required.\n\n# Strings in single quotes are literal strings. Strings in double quotes\n# will interpolate variables and escape codes like \"\\n\" for newline.\n\n## Arrays\n#  An array represents a list of values:\nmy @animals = (\"camel\", \"llama\", \"owl\");\nmy @numbers = (23, 42, 69);\nmy @mixed   = (\"camel\", 42, 1.23);\n\n# Array elements are accessed using square brackets, with a $ to\n# indicate one value will be returned.\nmy $second = $animals[1];\n\n# The size of an array is retrieved by accessing the array in a scalar\n# context, such as assigning it to a scalar variable or using the\n# \"scalar\" operator.\n\nmy $num_animals = @animals;\nprint \"Number of numbers: \", scalar(@numbers), \"\\n\";\n\n# Arrays can also be interpolated into double-quoted strings, and the\n# elements are separated by a space character by default.\n\nprint \"We have these numbers: @numbers\\n\";\n\n# Be careful when using double quotes for strings containing symbols\n# such as email addresses, as it will be interpreted as a variable.\n\nmy @example = ('secret', 'array');\nmy $oops_email = \"foo@example.com\"; # 'foosecret array.com'\nmy $ok_email = 'foo@example.com';\n\n## Hashes\n#   A hash represents a set of key/value pairs:\n\nmy %fruit_color = (\"apple\", \"red\", \"banana\", \"yellow\");\n\n#  You can use whitespace and the \"=>\" operator to lay them out more\n#  nicely:\n\nmy %fruit_color = (\n  apple  => \"red\",\n  banana => \"yellow\",\n);\n\n# Hash elements are accessed using curly braces, again with the $ sigil.\nmy $color = $fruit_color{apple};\n\n# All of the keys or values that exist in a hash can be accessed using\n# the \"keys\" and \"values\" functions.\nmy @fruits = keys %fruit_color;\nmy @colors = values %fruit_color;\n\n# Scalars, arrays and hashes are documented more fully in perldata.\n# (perldoc perldata).\n\n#### References\n\n# More complex data types can be constructed using references, which\n# allow you to build arrays and hashes within arrays and hashes.\n\nmy $array_ref = \\@array;\nmy $hash_ref = \\%hash;\nmy @array_of_arrays = (\\@array1, \\@array2, \\@array3);\n\n# You can also create anonymous arrays or hashes, returning a reference:\n\nmy $fruits = [\"apple\", \"banana\"];\nmy $colors = {apple => \"red\", banana => \"yellow\"};\n\n# References can be dereferenced by prefixing the appropriate sigil.\n\nmy @fruits_array = @$fruits;\nmy %colors_hash = %$colors;\n\n# As a shortcut, the arrow operator can be used to dereference and\n# access a single value.\n\nmy $first = $array_ref->[0];\nmy $value = $hash_ref->{banana};\n\n# See perlreftut and perlref for more in-depth documentation on\n# references.\n\n#### Conditional and looping constructs\n\n# Perl has most of the usual conditional and looping constructs.\n\nif ($var) {\n  ...\n} elsif ($var eq 'bar') {\n  ...\n} else {\n  ...\n}\n\nunless (condition) {\n  ...\n}\n# This is provided as a more readable version of \"if (!condition)\"\n\n# the Perlish post-condition way\nprint \"Yow!\" if $zippy;\nprint \"We have no bananas\" unless $bananas;\n\n#  while\nwhile (condition) {\n  ...\n}\n\nmy $max = 5;\n# for loops and iteration\nfor my $i (0 .. $max) {\n  print \"index is $i\";\n}\n\nfor my $element (@elements) {\n  print $element;\n}\n\nmap {print} @elements;\n\n# implicitly\n\nfor (@elements) {\n  print;\n}\n\n# iterating through a hash (for and foreach are equivalent)\n\nforeach my $key (keys %hash) {\n  print $key, ': ', $hash{$key}, \"\\n\";\n}\n\n# the Perlish post-condition way again\nprint for @elements;\n\n# iterating through the keys and values of a referenced hash\nprint $hash_ref->{$_} for keys %$hash_ref;\n\n#### Regular expressions\n\n# Perl's regular expression support is both broad and deep, and is the\n# subject of lengthy documentation in perlrequick, perlretut, and\n# elsewhere. However, in short:\n\n# Simple matching\nif (/foo/)       { ... }  # true if $_ contains \"foo\"\nif ($x =~ /foo/) { ... }  # true if $x contains \"foo\"\n\n# Simple substitution\n\n$x =~ s/foo/bar/;         # replaces foo with bar in $x\n$x =~ s/foo/bar/g;        # replaces ALL INSTANCES of foo with bar in $x\n\n\n#### Files and I/O\n\n# You can open a file for input or output using the \"open()\" function.\n\n# For reading:\nopen(my $in,  \"<\",  \"input.txt\")  or die \"Can't open input.txt: $!\";\n# For writing (clears file if it exists):\nopen(my $out, \">\",  \"output.txt\") or die \"Can't open output.txt: $!\";\n# For writing (appends to end of file):\nopen(my $log, \">>\", \"my.log\")     or die \"Can't open my.log: $!\";\n\n# You can read from an open filehandle using the \"<>\" operator.  In\n# scalar context it reads a single line from the filehandle, and in list\n# context it reads the whole file in, assigning each line to an element\n# of the list:\n\nmy $line  = <$in>;\nmy @lines = <$in>;\n\n# You can iterate through the lines in a file one at a time with a while loop:\n\nwhile (my $line = <$in>) {\n  print \"Found apples\\n\" if $line =~ m/apples/;\n}\n\n# You can write to an open filehandle using the standard \"print\"\n# function.\n\nprint $out @lines;\nprint $log $msg, \"\\n\";\n\n#### Writing subroutines\n\n# Writing subroutines is easy:\n\nsub logger {\n  my $logmessage = shift;\n\n  open my $logfile, \">>\", \"my.log\" or die \"Could not open my.log: $!\";\n\n  print $logfile $logmessage;\n}\n\n# Now we can use the subroutine just as any other built-in function:\n\nlogger(\"We have a logger subroutine!\");\n\n#### Modules\n\n# A module is a set of Perl code, usually subroutines, which can be used\n# in other Perl code. It is usually stored in a file with the extension\n# .pm so that Perl can find it.\n\npackage MyModule;\nuse strict;\nuse warnings;\n\nsub trim {\n  my $string = shift;\n  $string =~ s/^\\s+//;\n  $string =~ s/\\s+$//;\n  return $string;\n}\n\n1;\n\n# From elsewhere:\n\nuse MyModule;\nMyModule::trim($string);\n\n# The Exporter module can help with making subroutines exportable, so\n# they can be used like this:\n\nuse MyModule 'trim';\ntrim($string);\n\n# Many Perl modules can be downloaded from CPAN (http://www.cpan.org/)\n# and provide a range of features to help you avoid reinventing the\n# wheel.  A number of popular modules like Exporter are included with\n# the Perl distribution itself. See perlmod for more details on modules\n# in Perl.\n\n#### Objects\n\n# Objects in Perl are just references that know which class (package)\n# they belong to, so that methods (subroutines) called on it can be\n# found there. The bless function is used in constructors (usually new)\n# to set this up. However, you never need to call it yourself if you use\n# a module like Moose or Moo (see below).\n\npackage MyCounter;\nuse strict;\nuse warnings;\n\nsub new {\n  my $class = shift;\n  my $self = {count => 0};\n  return bless $self, $class;\n}\n\nsub count {\n  my $self = shift;\n  return $self->{count};\n}\n\nsub increment {\n  my $self = shift;\n  $self->{count}++;\n}\n\n1;\n\n# Methods can be called on a class or object instance with the arrow\n# operator.\n\nuse MyCounter;\nmy $counter = MyCounter->new;\nprint $counter->count, \"\\n\"; # 0\n$counter->increment;\nprint $counter->count, \"\\n\"; # 1\n\n# The modules Moose and Moo from CPAN can help you set up your object\n# classes. They provide a constructor and simple syntax for declaring\n# attributes. This class can be used equivalently to the one above.\n\npackage MyCounter;\nuse Moo; # imports strict and warnings\n\nhas 'count' => (is => 'rwp', default => 0, init_arg => undef);\n\nsub increment {\n  my $self = shift;\n  $self->_set_count($self->count + 1);\n}\n\n1;\n\n# Object-oriented programming is covered more thoroughly in perlootut,\n# and its low-level implementation in Perl is covered in perlobj.\n```\n\n#### FAQ\n\nperlfaq contains questions and answers related to many common tasks, and often provides suggestions for good CPAN modules to use.\n\n#### Further Reading\n\n - [perl-tutorial](http://perl-tutorial.org/)\n - [Learn at www.perl.com](http://www.perl.org/learn.html)\n - [perldoc](http://perldoc.perl.org/)\n - and perl built-in : `perldoc perlintro`\n"
        },
        {
          "name": "pets.csv",
          "type": "blob",
          "size": 0.08203125,
          "content": "name,age,weight,species\n\"fluffy\",3,14,\"cat\"\n\"vesuvius\",6,23,\"fish\"\n\"rex\",5,34,\"dog\"\n"
        },
        {
          "name": "phel.md",
          "type": "blob",
          "size": 8.7314453125,
          "content": "---\nname: Phel\nfilename: learnphel.phel\ncontributors:\n    - [\"Chemaclass\", \"https://github.com/Chemaclass\"]\n---\n\n[Phel](https://phel-lang.org/) is a functional programming language that compiles to PHP.\nIt is a dialect of Lisp inspired by Clojure and Janet.\n\n## Features\n- Built on PHP's ecosystem\n- Good error reporting\n- Persistent Datastructures (Lists, Vectors, Maps and Sets)\n- Macros\n- Recursive functions\n- Powerful but simple Syntax\n- REPL\n\n```newlisp\n# Comments begin with a # character and continue until the end of the line. There are no multi-line comments.\n\n# Phel is written in \"forms\", which are just\n# lists of things inside parentheses, separated by whitespace.\n\n# The first call in a file should be ns, to set the namespace\n(ns learn-phel)\n\n# More basic examples:\n\n# str will create a string out of all its arguments\n(str \"Hello\" \" \" \"World\") #=> \"Hello World\"\n\n# Math is straightforward\n(+ 1 1) #=> 2\n(- 2 1) #=> 1\n(* 1 2) #=> 2\n(/ 2 1) #=> 2\n\n# Equality is =\n(= 1 1) #=> true\n(= 2 1) #=> false\n\n# You need not for logic, too\n(not true) #=> false\n\n# Nesting forms works as you expect\n(+ 1 (- 3 2)) # = 1 + (3 - 2) => 2\n\n# Phel inherits PHP under the hood, so it can use native PHP (functions and classes) without \n# any additional cost by using the `php/` prefix to all PHP native functions.\n\n# Types\n#############\n\n# Booleans are similar as the native PHP ones\n\nnil\ntrue\nfalse \n\n# Symbols are used to name functions and variables in Phel\n# For example: symbol, snake_case_symbol, my-module/my-function\n\n# Keywords are like symbols that begin with a colon character. However, they are used as constants rather than a name for something.\n\n:keyword\n:0x0x0x\n::\n\n# Numbers in Phel are equivalent to numbers in PHP\n\n1337 # integer\n+1337 # positive integer\n-1337 # negative integer\n\n1.234 # float\n+1.234 # positive float\n-1.234 # negative float\n1.2e3 # float\n7E-10 # float\n\n# Strings are surrounded by double quotes. They almost work the same as PHP double quoted strings.\n# A string can be written in multiple lines. The line break character is then ignored by the reader.\n\n\"hello world\"\n\n\"this is\\na\\nstring\"\n\n\"this\nis\na\nstring.\"\n\n\"use backslack to escape \\\" string\"\n\n\"the dollar must not be escaped: $ or $abc just works\"\n\n\n# Collections & Sequences\n#############\n\n# Lists are linked-list data structures, while vectors are array-backed\n(type '(1 2 3)) #=> :list\n(type [1 2 3])  #=> :vector\n\n# A list would be written as just (1 2 3), but we have to quote\n# it to stop the reader thinking it's a function.\n# Also, (list 1 2 3) is the same as '(1 2 3)\n\n# You can produce a (non-lazy) sequence between a range. \n(range 1 10 2) #=> (range from to step)\n(take 4 (range 10))\n\n# Use cons to add an item to the beginning of a list\n(cons 4 '(1 2 3)) #=> (4 1 2 3)\n\n# Use push to add, and put to replace an item in a vector \n(push [1 2 3] 4)  #=> (1 2 3 4)\n(put [1 2 3] 1 4) #=> (1 4 3)\n\n# Use concat to add lists or vectors together\n(concat [1 2] '(3 4)) #=> [1 2 3 4]\n\n# Use filter, map to interact with collections\n(map inc [1 2 3])      #=> [2 3 4]\n(filter even? [1 2 3]) #=> [2]\n\n# Use reduce to reduce them. The initial-value is mandatory\n(reduce + 0 [1 2 3 4])\n#=> (+ (+ (+ 1 2) 3) 4)\n#=> 10\n\n(reduce push [] '(3 2 1))\n#=> (push (push (push [] 3) 2) 1)\n#=> [3 2 1]\n\n# Functions\n#############\n\n# Use fn to create new functions\n# A function always returns its last statement\n(fn [] \"Hello World\") #=> <function>\n\n# You need extra parens to call it\n((fn [] \"Hello World\")) #=> \"Hello World\"\n\n# You can bind a value to a symbol using def for definition\n(def x 1)\nx #=> 1\n\n# Variables provide a way to manage mutable state\n(def foo (var 10)) # Define a variable with value 10\n\n# Assign a function to a definition\n(def hello-world (fn [] \"Hello World\"))\n(hello-world) #=> \"Hello World\"\n\n# You can shorten this process by using defn\n(defn hello-world [] \"Hello World\")\n\n# The [] is the list of arguments for the function\n(defn hello [name]\n  (str \"Hello \" name))\n(hello \"Jens\") #=> \"Hello Jens\"\n\n# You can also use this shorthand to create functions\n(def hello2 |(str \"Hello \" $1))\n(hello2 \"Anna\") #=> \"Hello Anna\"\n\n# Functions can pack extra arguments up in a seq for you\n(defn count-args [& args]\n  (str \"You passed \" (count args) \" args: \" args))\n(count-args 1 2 3) #=> \"You passed 3 args: @[1 2 3]\"\n\n# You can mix regular and packed arguments\n(defn hello-count [name & args]\n  (str \"Hello \" name \", you passed \" (count args) \" extra args\"))\n(hello-count \"Jesus\" 1 2) #=> \"Hello Jesus, you passed 2 extra args\"\n\n\n# Maps\n#############\n\n# Hash maps have faster lookups but don't retain key order\n(type {:a 1 :b 2 :c 3})          #=> :hash-map\n(type (hash-map :a 1 :b 2 :c 3)) #=> :hash-map\n\n# Maps can use any hashable type as a key, but usually keywords are best\n# Keywords are like strings with some efficiency bonuses and they start with `:`\n(type :a) #=> :keyword\n\n(def stringmap {\"a\" 1 \"b\" 2 \"c\" 3})\nstringmap  #=> {\"a\" 1 \"b\" 2 \"c\" 3}\n\n(def keymap {:a 1 :b 2 :c 3})\nkeymap  #=> {:a 1 :c 3 :b 2}\n\n# Retrieve a value from a map by calling it as a function\n(stringmap \"a\") #=> 1\n(keymap :a)     #=> 1\n\n# Keywords can be used to retrieve their value from a map, too!\n(:b keymap) #=> 2\n\n# Don't try this with strings\n# (\"a\" stringmap)\n# ...Exception: Call to undefined function a()\n\n# Retrieving a non-present key returns nil\n(stringmap \"d\") #=> nil\n\n# Use put to add new keys to hash-maps\n(def newkeymap (put keymap :d 4))\nnewkeymap #=> {:a 1 :b 2 :c 3 :d 4}\n\n# But remember, phel types are immutable!\nkeymap #=> {:a 1 :b 2 :c 3}\n\n# Use unset to remove keys\n(unset keymap :a) #=> {:b 2 :c 3}\n\n# Sets\n#############\n\n# A Set contains unique values in random order\n\n(type (set 1 2 3)) #=> :set\n(set 1 2 3 1 2 3 3 2 1 3 2 1) #=> (set 1 2 3)\n\n# Add a member with push\n(push (set 1 2 3) 4) #=> (set 1 2 3 4)\n\n# Remove one with unset\n(unset (set 1 2 3) 1) #=> (set 2 3)\n\n# Test for existence by using the set as a function\n((set 1 2 3) 1) #=> 1\n((set 1 2 3) 4) #=> nil\n\n# There are more functions like: count, union, intersection, difference, etc\n\n\n# Useful forms\n#############\n\n# `If` conditionals in phel are special forms\n(if false \"a\" \"b\") #=> \"b\"\n(if false \"a\") #=> nil\n\n# Use let to create temporary bindings\n(let [a 1 b 2]\n  (> a b)) #=> false\n\n# Group statements together with do\n(do\n  (print \"Hello\")\n  \"World\") #=> \"World\" (prints \"Hello\")\n\n# Functions have an implicit do\n(defn print-and-say-hello [name]\n  (print \"Saying hello to \" name)\n  (str \"Hello \" name))\n(print-and-say-hello \"Jeff\") #=> \"Hello Jeff\" (prints \"Saying hello to Jeff\")\n\n# So does let\n(let [name \"Urkel\"]\n  (print \"Saying hello to \" name)\n  (str \"Hello \" name)) #=> \"Hello Urkel\" (prints \"Saying hello to Urkel\")\n\n# Use the threading macros (-> and ->>) to express transformations of\n# data more clearly.\n\n# The \"Thread-first\" macro (->) inserts into each form the result of\n# the previous, as the first argument (second item)\n(->\n   {:a 1 :b 2}\n   (put :c 3)  #=> (put {:a 1 :b 2} :c 3)\n   (unset :b)) #=> (unset (put {:a 1 :b 2} :c 3) :b)\n\n\n# The double arrow does the same thing, but inserts the result of\n# each line at the *end* of the form. This is useful for collection\n# operations in particular:\n(->>\n   (range 10)\n   (map inc)      #=> (map inc (range 10))\n   (filter odd?)) #=> (filter odd? (map inc (range 10)))\n                  # Result: [1 3 5 7 9]\n\n\n# When you are in a situation where you want more freedom as where to\n# put the result of previous data transformations in an\n# expression, you can use the as-> macro. With it, you can assign a\n# specific name to transformations' output and use it as a\n# placeholder in your chained expressions:\n\n(as-> [1 2 3] input\n  (map inc input)     #=> You can use last transform's output at the last position\n  (get input 2)       #=> and at the second position, in the same expression\n  (push [4 5 6] input 8 9 10)) #=> or in the middle !\n                               # Result: [4 5 6 4 8 9 10]\n\n# PHP\n#################\n\n# PHP has a huge and useful standard library, and you're able to use\n# all native functions with the prefix `php/`.\n(php/+ 1 2 3)\n\n# With :use you can use different namespaces. Similar as `use` in PHP\n(ns my\\module\n  (:use \\DateTimeImmutable))\n\n# You can import functions from other phel files with :require\n(ns my\\module\n  (:require phel\\test :refer [deftest is]))\n\n# Use the class name with a \"php/new\" to make a new instance\n(php/new \\DateTime) # <a date-time object>\n\n# Use php/-> to call methods of an object\n(def d (php/new \\DateTime))\n(php/-> d (getTimestamp)) # <a timestamp>\n\n# you can do it in one line too\n(php/-> (php/new \\DateTime) (getTimestamp))\n\n# Use php/:: to call static methods\n(php/:: \\DateTimeImmutable ATOM) # <a timestamp>\n```\n\n### Further Reading\n\nThis is far from exhaustive, but hopefully it's enough to get you on your feet.\n\nRead the full documentation in the website: [https://phel-lang.org/](https://phel-lang.org/documentation/getting-started/)\n"
        },
        {
          "name": "phix.md",
          "type": "blob",
          "size": 12.1318359375,
          "content": "---\nname: Phix\ncontributors:\n    - [\"pxtom\", \"https://gitgub.com/pxtom\"]\nfilename: learnphix.exw\n---\n\n```\n            -- single line comment\n\n            // single line comment\n\n            /* multi-\n                     line comment */\n\n// Start programming immediately\n\n    -- write using UTF8; save as: hello.ex\n    -- use ? for output\n\n        ? \"😍 hello , 😎 world!\"\n        ? sqrt(2+2)\n\n// Interpret your program\n                            /*\n       p hello               */\n\n// Compile your program\n                            /*\n       p -c hello            */\n\n// Coding mistakes receive gentle help messages\n                                                          /*\n    string line\n    line = 5\n           ^ type error (storing atom in string)           */\n\n// Every literal value, constant, and variable is an ''object''\n\n    -- a literal object\n        ? \"hello\"\n        ? PI\n        ? { \"hello\", PI }\n\n    -- a named variable object\n        object X\n        X = \"hello\"\n        X = PI\n        X = { \"hello\", PI }\n\n    -- a named constant object\n        constant myPI = 22/7\n\n//  Everything is an ''object'', just two fundemental kinds\n                                                                /*\n            ┌────────────────────▄\n          ┌─┤   object           █─┐\n          │ └─▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█ │\n          │                        │\n       \"atom\"                   \"container\"                     */\n\n       number  x = 3.14159      sequence  s   = { \"hello\", PI }\n       integer y = 3            string    txt = \"hello\"\n\n            -- simplify,\n            -- and use only two primitives\n            number x1=3.14156, y1=3\n            sequence s1={\"hello\",PI}, txt1=\"hello\"\n\n                -- simplify even more,\n                -- and use just one primitive\n                object x2=3.14156, y2=3, s2={\"hello\",PI}, txt2=\"hello\"\n\n// Elegant data-type design\n\n    -- invent your own \"type\"\n    -- organize with \"struct\" or \"class\"\n                                                                /*\n    ╔═══════════════════════════════╗\n    ║   ┌─────────────────────────┐ ║\n    ║   │      ┌───────────▄      │ ║\n    ║   │    ┌─┤ object    █─┐    │ ║\n    ║   │    │ └─▄▄▄▄▄▄▄▄▄▄█ │    │ ║\n    ║   │    │               │    │ ║\n    ║   │  number        sequence │ ║\n    ║   │    │               │    │ ║\n    ║   │  integer        string  │ ║\n    ║   └──────── type ───────────┘ ║\n    ║                               ║\n    ╚════════ struct                ║\n              class ════════════════╝\n                                                                */\n\n// Syntax is consistant: \"keyword...end keyword\"\n\n    -- no invisible syntax or extra rules needed.\n\n    // loop\n    -- while ... end while\n\n        integer index = 1\n        while index <= 5 do\n            ? index\n            index += 1\n        end while\n\n    // loop\n    -- for ... end for\n\n        for i=5 to 1 by -1 do\n            ? i\n        end for\n\n    //  conditional\n    --  if ... end if\n\n        number p = 4\n        if p < 1 then\n            ? \"p is a small number\"\n        elsif p > 10 then\n            ? \"p is a large number\"\n        else\n            ? \"p is inbetween\"\n        end if\n\n    // conditional\n    -- switch ... end switch\n\n        object ch = prompt_string(\"enter one character: \" )\n        switch ch\n            case \"a\": ? \"ch is a\"\n            case \"b\": ? \"ch is b\"\n            case \"c\": ? \"ch is c\"\n            default:  ? \"ch is something else\"\n        end switch\n\n// Operators are always consistant; never overloaded.\n\n    -- the + operator ''always adds''\n        ? 2+7      --> 9\n        ? 'A' + 32 --> 97\n\n    -- the & operator ''always concatenates''\n        ? 2 & 7                --> {2,7}\n        ? \"cat\" & \" \" & \"dog\"  --> \"cat dog\"\n        ? {1,2,3} & \"fish\"     --> {1,2,3} & \"fish\"\n        pp( {1,2,3} & \"fish\" ) --> {1,2,3,102'f',105'i',115's',104'h'}\n\n// Use ''sq_'' functions to span entire containers.\n\n        ? sq_add( {1,2,3}, 10 )     --> {11,12,13}\n        ? sq_sqrt( {4,9,16} )       --> {2,3,4}\n\n// Functions must return a value\n\n        function add2( number x, number y )\n            number sum = x + y\n            return sum\n        end function\n        ? add2( 4, 9 )\n\n// Procedures do not return a value\n\n        procedure sum_all( sequence lst )\n            number sum = 0\n            for i=1 to length(lst) do\n                sum += lst[i]\n            end for\n            ? sum\n        end procedure\n        sum_all( {1,3,9,11} )\n\n// Recursion and mutal recursion are permitted\n\n        function factorial(number n)\n            if n == 0 then\n                return 1\n            end if\n            if n<0 then\n                return \"error, no negative numbers for factorials\"\n            end if\n            return n * factorial(n - 1)\n        end function\n        ? factorial(5)\n\n// User defined data-types\n\n        -- defined like a function: type ... end type\n        -- they are fully programmable; add your own features\n\n        type positive( number x )\n            if not integer(x) then\n                ? \"use integers for factorials\"\n                return False\n            end if\n            if x < 0 then\n                ? \"error, no negative numbers for factorials\"\n                return False\n            end if\n            return True\n        end type\n\n     -- use them to declare variables and parameters\n\n        function factorial2( positive n )\n            if n == 0 then return 1 end if\n            return n * factorial2(n-1)\n        end function\n        ? factorial(5)\n\n    -- to catch errors, and recover, use: try ... end try\n\n       try\n          ? factorial2( -5 )\n       catch e\n          ? \"that was a mistake\"\n       end try\n\n// Sequences are versatile\n\n    -- multiple assignment\n            number a, b, c\n            {a,b,c} = { -100, -200/-2, -300*3 }\n            ? a      --> -100\n            ? b      -->  100\n            ? c      --> -900\n\n    -- swapping values\n                ? a       --> -100\n                ? c       --> -900\n            {a,c} = {c,a}\n                ? a       --> -900\n                ? c       --> -100\n\n\n// Symmetrical one-based indexing does it all\n\n    -- both sequence and string are mutable and work alike\n\n    --              1   2   3   4   5    -- index head to tail\n             s = { 10, 20, 30, 40, 50 }\n    --             -5  -4  -3  -2  -1    -- index tail to head\n\n        // one item\n            ? s[ 2]\n            ? s[-4]\n                        -- output for both is:\n            ----->  20\n\n        // slice with one item\n            ? s[ 2.. 2]\n            ? s[-4..-4]\n                        -- output for both is:\n            -----> {20}\n\n        // inclusive slice\n            ? s[ 2.. 4]\n            ? s[-4..-2]\n                        -- output for both is:\n            -----> {20,30,40}\n\n        // empty sequence\n            ? s[3 .. 2]\n            ? s[-3..-4]\n                        -- output for both is:\n            -----> {}\n\n        // insert\n            s[3..2] = {99}\n            ? s\n            -----> {10,20,99,30,40,50}\n\n        // prepend and append\n            s = { 10,20,30,40,50 }\n\n            s[  1..0] = {0}             -- prepend\n            s[$+1..$] = {6}             -- append\n\n            ? s\n            -----> {0,10,20,99,30,40,50,6}\n\n            s[0..-1] = {9999}           -- append\n\n            ? s\n            -----> {0,10,20,99,30,40,50,6,9999}\n\n        // delete\n            s = { 10,20,30,40,50 }\n\n            s[2..2] = {}        -- item deleted\n            ? s\n            -----> {10,30,40,50}\n\n            s[2..3] = {}        -- slice deleted\n            ? s\n            -----> {10,50}\n\n// Learn and reuse; you keep what you learn.\n\n            s = { 1,3,5,7 }\n            txt = \"jello\"\n\n        -- \"find\" locates one item in either a sequence or a string\n        ? find( 3, s ) --> 2\n        ? find( 'e', txt ) --> 2\n\n        -- \"match\" locates a slice in either a sequence or a string\n        ? match( {5,7}, s ) -- > 3\n        ? match( \"ll\", txt ) --> 3\n\n// Look back at the examples, Phix is generic!\n\n// Batteries are installed\n\n        ? sort( {2, 54,6,4, 0} )\n        ? upper( \"cat\" )\n        ? log( 10.4 )\n        ? trunc(1.4)         --  1\n        ? floor(1.4)         --  1\n        ? trunc(-1.4)        -- -1\n        ? floor(-1.4)        -- -2\n\n// Batteries are included\n\n        include builtins/regex.e\n\n        string str = \"say hello and smile\"\n        str = gsub( `s...e`, str, \"😍\" )\n        ? str   --> \"say hello and 😍\"\n\n// Yes, sequences are \"powerful\"\n\n        function odd(integer a) return remainder(a,2)=1 end function\n        function even(integer a) return remainder(a,2)=0 end function\n\n        ? tagset(10)                 --> {1,2,3,4,5,6,7,8,9,10}\n        ? filter(tagset(10),odd)     --> {1,3,5,7,9}\n        ? filter(tagset(10),even)    --> {2,4,6,8,10}\n\n// A ''struct'' provides named fields, type-checking, and dot notation\n\n        struct point\n            number x = 0\n            number y = 0\n        end struct\n\n        procedure show( point q )\n            printf(1, \"(%g,%g)\", { q.x, q.y } )\n        end procedure\n\n        point  p1 = new()\n        show(p1)\n            --> (0,0)\n\n        p1.x = 3\n        p1.y = 5\n        show( p1 )\n            --> (3,5)\n\n// A ''class'' adds methods and scope control\n\n        class pair\n            public number x = 0\n            public number y = 0\n\n            procedure show( )\n                printf(1, \"(%g,%g)\", { this.x, this.y } )\n            end procedure\n        end class\n\n        pair  p2 = new()\n        p2.show()\n            --> (0,0)\n\n        p2.x = 3\n        p2.y = 5\n        p2.show()\n            --> (3,5)\n\n// Inherit and compose\n\n        class Pair -- any 2 objects\n            public sequence xy\n            public integer x,y\n                 function get_x()\n                  return xy[1]\n                 end function\n\n                 function get_y()\n                  return xy[2]\n                 end function\n        end class\n\n        type pos_seq(sequence x)\n            return min(x) >= 0\n        end type\n\n        class Point extends Pair\n            public pos_seq loc -- any two numbers >= 0\n\n                procedure set_loc(object x)\n                    this.xy = {x[1],x[2]}\n                end procedure\n        end class\n\n        class Rectangle extends Point\n            public Point tlc,brc --top_left, bottom_right corners;\n            public sequence size\n\n                  function get_size()\n                    this.size = {brc.x-tlc.x , brc.y-tlc.y}\n                    return this.size\n                  end function\n        end class\n\n        Point p1a = new() p1a.loc = {50,10}\n        Point p2a = new() p2a.loc = {300,200}\n\n        Rectangle r = new()\n                  r.tlc = p1a\n                  r.brc = p2a\n        ? r          -- {\"struct\",\"Rectangle\",4,1}\n        ? r.tlc      -- {\"struct\",\"Point\",3,3}\n\n        ? r.size       --> {250,190}\n        ? r.get_size() --> {250,190}\n```\n\nPhix does not (although most can be emulated) directly support\noperator|builtin|function overloading, lambda expressions, closures,\ncurrying, eval, partial function application, function composition,\nfunction prototyping, monads, generators, anonymous recursion,\nthe Y combinator, aspect oriented programming, interfaces, delegates,\nfirst class environments, implicit type conversion\n(of the destructive kind), interactive programming, inverted syntax,\nlist comprehensions, metaprogramming, pointers\n(other than to raw allocated memory), topic variables,\nenforced singletons, safe mode, s-expressions,\nor formal proof construction.\n\nThe author wryly comments:\n\n''That should both scare off and attract the right people''.\n\n\n## References\n\n* [http://phix.x10.mx](http://phix.x10.mx)\n* [Source code](https://github.com/petelomax/Phix)\n* [Forum](https://openeuphoria.org/forum/index.wc)\n* [Rosetta Code](https://rosettacode.org/wiki/Category:Phix)\n"
        },
        {
          "name": "php-composer.md",
          "type": "blob",
          "size": 5.5029296875,
          "content": "---\ncategory: tool\nname: Composer\ncontributors:\n    - [\"Brett Taylor\", \"https://github.com/glutnix\"]\nfilename: LearnComposer.sh\n---\n\n[Composer](https://getcomposer.org/) is a tool for dependency management in PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.\n\n# Installing\n\n```sh\n# Installs the composer.phar binary into the current directory\ncurl -sS https://getcomposer.org/installer | php\n# If you use this approach, you will need to invoke composer like this:\nphp composer.phar about\n\n# Installs the binary into ~/bin/composer\n# Note: make sure ~/bin is in your shell's PATH environment variable\ncurl -sS https://getcomposer.org/installer | php -- --install-dir=~/bin --filename=composer\n```\n\nWindows users should follow the [Windows installation instructions](https://getcomposer.org/doc/00-intro.md#installation-windows)\n\n## Confirming installation\n\n```sh\n# Check version and list options\ncomposer\n\n# Get more help for options\ncomposer help require\n\n# Check if Composer is able to do the things it needs, and if it's up to date\ncomposer diagnose\ncomposer diag # shorthand\n\n# Updates the Composer binary to the latest version\ncomposer self-update\ncomposer self # shorthand\n```\n\n# Usage\n\nComposer stores your project dependencies in `composer.json`. You can edit this file, but it is best to let Composer manage it for you.\n\n```sh\n# Create a new project in the current folder\ncomposer init\n# runs an interactive questionnaire asking you for details about your project.  Leaving them blank is fine unless you are making other projects dependent on this one.\n\n# If a composer.json file already exists, download the dependencies\ncomposer install\n\n# To download the just the production dependencies, i.e. excluding development dependencies\ncomposer install --no-dev\n\n# Add a production dependency to this project\ncomposer require guzzlehttp/guzzle\n# will figure out what the latest version of guzzlehttp/guzzle is, download it, and add the new dependency to composer.json's require field.\n\ncomposer require guzzlehttp/guzzle:6.0.*\n# will download the latest version matching the pattern (eg. 6.0.2) and add the dependency to composer.json's require field\n\ncomposer require --dev phpunit/phpunit:~4.5.0\n# will require as a development dependency. Will use the latest version >=4.5.0 and < 4.6.0\n\ncomposer require-dev phpunit/phpunit:^4.5.0\n# will require as a development dependency. Will use the latest version >=4.5.0 and < 5.0\n\n# For more information on Composer version matching, see [Composer's documentation on Versions](https://getcomposer.org/doc/articles/versions.md) for more details\n\n# To see what packages are available to install and currently installed\ncomposer show\n\n# To see what packages are currently installed\ncomposer show --installed\n\n# To find a package with 'mailgun' in its name or description\ncomposer search mailgun\n```\n\n[Packagist.org](https://packagist.org/) is the main repository for Composer packages. Search there for existing third-party packages.\n\n## `composer.json` vs `composer.lock`\n\nThe `composer.json` file stores your project's floating version preferences for each dependency, along with other information.\n\nThe `composer.lock` file stores exactly which version it has downloaded for each dependency. Never edit this file.\n\nIf you include the `composer.lock` file in your git repository, every developer will install the currently used version of the dependency. Even when a new version of a dependency is released, Composer will continue to download the version recorded in the lock file.\n\n```sh\n# If you want to update all the dependencies to their newest version still matching your version preferences\ncomposer update\n\n# If you want the new version of a particular dependency:\ncomposer update phpunit/phpunit\n\n# If you wish to migrate a package to a newer version preference, you may need to remove the older package and its dependencies first.\ncomposer remove --dev phpunit/phpunit\ncomposer require --dev phpunit/phpunit:^5.0\n```\n\n## Autoloader\n\nComposer creates an autoloader class you can require from your application. You can make instances of classes via their namespace.\n\n```php\nrequire __DIR__ . '/vendor/autoload.php';\n\n$mailgun = new Mailgun\\Mailgun(\"key\");\n```\n\n### PSR-4 Autoloader\n\nYou can add your own namespaces to the autoloader.\n\nIn `composer.json`, add a 'autoload' field:\n\n```json\n{\n  \"autoload\": {\n    \"psr-4\": {\"Acme\\\\\": \"src/\"}\n  }\n}\n```\n\nThis will tell the autoloader to look for anything in the `\\Acme\\` namespace within the `src` folder.\n\nYou can also [use PSR-0, a Classmap or just a list of files to include](https://getcomposer.org/doc/04-schema.md#autoload). There is also the `autoload-dev` field for development-only namespaces.\n\nWhen adding or modifying the autoload key, you will need to rebuild the autoloader:\n\n```sh\ncomposer dump-autoload\ncomposer dump # shorthand\n\n# Optimizes PSR0 and PSR4 packages to be loaded with classmaps too. Slow to run, but improves performance on production.\ncomposer dump-autoload --optimize --no-dev\n```\n\n# Composer's Cache\n\n```sh\n# Composer will retain downloaded packages to use in the future. Clear it with:\ncomposer clear-cache\n```\n\n# Troubleshooting\n\n```sh\ncomposer diagnose\ncomposer self-update\ncomposer clear-cache\n```\n\n## Topics not (yet) covered in this tutorial\n\n* Creating and distributing your own packages on Packagist.org or elsewhere\n* Pre- and post- script hooks: run tasks when certain composer events take place\n\n### References\n\n* [Composer - Dependency Manager for PHP](https://getcomposer.org/)\n* [Packagist.org](https://packagist.org/)\n"
        },
        {
          "name": "php.md",
          "type": "blob",
          "size": 20.513671875,
          "content": "---\nname: PHP\ncontributors:\n    - [\"Malcolm Fell\", \"http://emarref.net/\"]\n    - [\"Trismegiste\", \"https://github.com/Trismegiste\"]\nfilename: learnphp.php\n---\n\nThis document describes PHP 5+.\n\n```php\n<?php // PHP code must be enclosed with <?php tags\n\n// If your php file only contains PHP code, it is best practice\n// to omit the php closing tag to prevent accidental output.\n\n// Two forward slashes start a one-line comment.\n\n# So will a hash (aka pound symbol) but // is more common\n\n/*\n     Surrounding text in slash-asterisk and asterisk-slash\n     makes it a multi-line comment.\n*/\n\n// Use \"echo\" or \"print\" to print output\nprint('Hello '); // Prints \"Hello \" with no line break\n\n// () are optional for print and echo\necho \"World\\n\"; // Prints \"World\" with a line break\n// (all statements must end with a semicolon)\n\n// Anything outside <?php tags is echoed automatically\n?>\nHello World Again!\n<?php\n// That is because historically PHP started as a Template engine\n\n\n/************************************\n * Types & Variables\n */\n\n// Variables begin with the $ symbol.\n// A valid variable name starts with a letter or an underscore,\n// followed by any number of letters, numbers, or underscores.\n\n// You don't have to (and cannot) declare variables.\n// Once you assign a value, PHP will create the variable with the right type.\n\n// Boolean values are case-insensitive\n$boolean = true;  // or TRUE or True\n$boolean = FALSE; // or false or False\n\n// Integers\n$int1 = 12;   // => 12\n$int2 = -12;  // => -12\n$int3 = 012;  // => 10 (a leading 0 denotes an octal number)\n$int4 = 0x0F; // => 15 (a leading 0x denotes a hex literal)\n// Binary integer literals are available since PHP 5.4.0.\n$int5 = 0b11111111; // 255 (a leading 0b denotes a binary number)\n\n// Floats (aka doubles)\n$float = 1.234;\n$float = 1.2e3;\n$float = 7E-10;\n\n// Delete variable\nunset($int1);\n\n// Arithmetic\n$sum        = 1 + 1; // 2\n$difference = 2 - 1; // 1\n$product    = 2 * 2; // 4\n$quotient   = 2 / 1; // 2\n\n// Shorthand arithmetic\n$number = 0;\n$number += 1;      // Increment $number by 1\necho $number++;    // Prints 1 (increments after evaluation)\necho ++$number;    // Prints 3 (increments before evaluation)\n$number /= $float; // Divide and assign the quotient to $number\n\n// Strings should be enclosed in single quotes;\n$sgl_quotes = '$String'; // => '$String'\n\n// Avoid using double quotes except to embed other variables\n$dbl_quotes = \"This is a $sgl_quotes.\"; // => 'This is a $String.'\n\n// Special characters are only escaped in double quotes\n$escaped   = \"This contains a \\t tab character.\";\n$unescaped = 'This just contains a slash and a t: \\t';\n\n// Enclose a variable in curly braces if needed\n$number = 23;\n$apples = \"I have {$number} apples to eat.\";   // => I have 23 apples to eat.\n$oranges = \"I have ${number} oranges to eat.\"; // => I have 23 oranges to eat.\n$money = \"I have $${number} in the bank.\";     // => I have $23 in the bank.\n\n// Since PHP 5.3, nowdocs can be used for uninterpolated multi-liners\n$nowdoc = <<<'END'\nMulti line\nstring\nEND;\n\n// Heredocs will do string interpolation\n$heredoc = <<<END\nMulti line\n$sgl_quotes\nEND;\n\n// String concatenation is done with .\necho 'This string ' . 'is concatenated';  // Returns 'This string is concatenated'\n\n// Strings can be passed in as parameters to echo\necho 'Multiple', 'Parameters', 'Valid';  // Returns 'MultipleParametersValid'\n\n\n/********************************\n * Constants\n */\n\n// A constant is defined by using define()\n// and can never be changed during runtime!\n\n// a valid constant name starts with a letter or underscore,\n// followed by any number of letters, numbers, or underscores.\ndefine(\"FOO\", \"something\");\n\n// access to a constant is possible by calling the chosen name without a $\necho FOO; // Returns 'something'\necho 'This outputs ' . FOO;  // Returns 'This outputs something'\n\n\n\n/********************************\n * Arrays\n */\n\n// All arrays in PHP are associative arrays (hashmaps in some languages)\n\n// Works with all PHP versions\n$associative = array('One' => 1, 'Two' => 2, 'Three' => 3);\n\n// PHP 5.4 introduced a new syntax\n$associative = ['One' => 1, 'Two' => 2, 'Three' => 3];\n\necho $associative['One']; // prints 1\n\n// Add an element to an associative array\n$associative['Four'] = 4;\n\n// List literals implicitly assign integer keys\n$array = ['One', 'Two', 'Three'];\necho $array[0]; // => \"One\"\n\n// Add an element to the end of an array\n$array[] = 'Four';\n// or\narray_push($array, 'Five');\n\n// Remove element from array\nunset($array[3]);\n\n/********************************\n * Output\n */\n\necho('Hello World!');\n// Prints Hello World! to stdout.\n// Stdout is the web page if running in a browser.\n\nprint('Hello World!'); // The same as echo\n\n// echo and print are language constructs too, so you can drop the parentheses\necho 'Hello World!';\nprint 'Hello World!';\n\n$paragraph = 'paragraph';\n\necho 100;        // Echo scalar variables directly\necho $paragraph; // or variables\n\n// If short open tags are configured, or your PHP version is\n// 5.4.0 or greater, you can use the short echo syntax\n?>\n<p><?= $paragraph ?></p>\n<?php\n\n$x = 1;\n$y = 2;\n$x = $y; // $x now contains the same value as $y\n$z = &$y;\n// $z now contains a reference to $y. Changing the value of\n// $z will change the value of $y also, and vice-versa.\n// $x will remain unchanged as the original value of $y\n\necho $x; // => 2\necho $z; // => 2\n$y = 0;\necho $x; // => 2\necho $z; // => 0\n\n// Dumps type and value of variable to stdout\nvar_dump($z); // prints int(0)\n\n// Prints variable to stdout in human-readable format\nprint_r($array); // prints: Array ( [0] => One [1] => Two [2] => Three )\n\n/********************************\n * Logic\n */\n$a = 0;\n$b = '0';\n$c = '1';\n$d = '1';\n\n// assert throws a warning if its argument is not true\n\n// These comparisons will always be true, even if the types aren't the same.\nassert($a == $b); // equality\nassert($c != $a); // inequality\nassert($c <> $a); // alternative inequality\nassert($a < $c);\nassert($c > $b);\nassert($a <= $b);\nassert($c >= $d);\n\n// The following will only be true if the values match and are the same type.\nassert($c === $d);\nassert($a !== $d);\nassert(1 === '1');\nassert(1 !== '1');\n\n// 'Spaceship' operator (since PHP 7)\n// Returns 0 if values on either side are equal\n// Returns 1 if value on the left is greater\n// Returns -1 if the value on the right is greater\n\n$a = 100;\n$b = 1000;\n\necho $a <=> $a; // 0 since they are equal\necho $a <=> $b; // -1 since $a < $b\necho $b <=> $a; // 1 since $b > $a\n\n// Variables can be converted between types, depending on their usage.\n\n$integer = 1;\necho $integer + $integer; // => 2\n\n$string = '1';\necho $string + $string; // => 2 (strings are coerced to integers)\n\n$string = 'one';\necho $string + $string; // => 0\n// Outputs 0 because the + operator cannot cast the string 'one' to a number\n\n// Type casting can be used to treat a variable as another type\n\n$boolean = (boolean) 1; // => true\n\n$zero = 0;\n$boolean = (boolean) $zero; // => false\n\n// There are also dedicated functions for casting most types\n$integer = 5;\n$string = strval($integer);\n\n$var = null; // Null value\n\n\n/********************************\n * Control Structures\n */\n\nif (true) {\n    print 'I get printed';\n}\n\nif (false) {\n    print 'I don\\'t';\n} else {\n    print 'I get printed';\n}\n\nif (false) {\n    print 'Does not get printed';\n} elseif (true) {\n    print 'Does';\n}\n\n// ternary operator\nprint (false ? 'Does not get printed' : 'Does');\n\n// ternary shortcut operator since PHP 5.3\n// equivalent of \"$x ? $x : 'Does'\"\n$x = false;\nprint($x ?: 'Does');\n\n// null coalesce operator since php 7\n$a = null;\n$b = 'Does print';\necho $a ?? 'a is not set'; // prints 'a is not set'\necho $b ?? 'b is not set'; // prints 'Does print'\n\n\n$x = 0;\nif ($x === '0') {\n    print 'Does not print';\n} elseif ($x == '1') {\n    print 'Does not print';\n} else {\n    print 'Does print';\n}\n\n\n\n// This alternative syntax is useful for templates:\n?>\n\n<?php if ($x): ?>\nThis is displayed if the test is truthy.\n<?php else: ?>\nThis is displayed otherwise.\n<?php endif; ?>\n\n<?php\n\n// Use switch to save some logic.\nswitch ($x) {\n    case '0':\n        print 'Switch does type coercion';\n        break; // You must include a break, or you will fall through\n               // to cases 'two' and 'three'\n    case 'two':\n    case 'three':\n        // Do something if $variable is either 'two' or 'three'\n        break;\n    default:\n        // Do something by default\n}\n\n// While, do...while and for loops are probably familiar\n$i = 0;\nwhile ($i < 5) {\n    echo $i++;\n} // Prints \"01234\"\n\necho \"\\n\";\n\n$i = 0;\ndo {\n    echo $i++;\n} while ($i < 5); // Prints \"01234\"\n\necho \"\\n\";\n\nfor ($x = 0; $x < 10; $x++) {\n    echo $x;\n} // Prints \"0123456789\"\n\necho \"\\n\";\n\n$wheels = ['bicycle' => 2, 'car' => 4];\n\n// Foreach loops can iterate over arrays\nforeach ($wheels as $wheel_count) {\n    echo $wheel_count;\n} // Prints \"24\"\n\necho \"\\n\";\n\n// You can iterate over the keys as well as the values\nforeach ($wheels as $vehicle => $wheel_count) {\n    echo \"A $vehicle has $wheel_count wheels\";\n}\n\necho \"\\n\";\n\n$i = 0;\nwhile ($i < 5) {\n    if ($i === 3) {\n        break; // Exit out of the while loop\n    }\n    echo $i++;\n} // Prints \"012\"\n\nfor ($i = 0; $i < 5; $i++) {\n    if ($i === 3) {\n        continue; // Skip this iteration of the loop\n    }\n    echo $i;\n} // Prints \"0124\"\n\n\n/********************************\n * Functions\n */\n\n// Define a function with \"function\":\nfunction my_function () {\n    return 'Hello';\n}\n\necho my_function(); // => \"Hello\"\n\n// A valid function name starts with a letter or underscore, followed by any\n// number of letters, numbers, or underscores.\n\nfunction add ($x, $y = 1) { // $y is optional and defaults to 1\n    $result = $x + $y;\n    return $result;\n}\n\necho add(4); // => 5\necho add(4, 2); // => 6\n\n// $result is not accessible outside the function\n// print $result; // Gives a warning.\n\n// Since PHP 5.3 you can declare anonymous functions;\n$inc = function ($x) {\n    return $x + 1;\n};\n\necho $inc(2); // => 3\n\nfunction foo ($x, $y, $z) {\n    echo \"$x - $y - $z\";\n}\n\n// Functions can return functions\nfunction bar ($x, $y) {\n    // Use 'use' to bring in outside variables\n    return function ($z) use ($x, $y) {\n        foo($x, $y, $z);\n    };\n}\n\n$bar = bar('A', 'B');\n$bar('C'); // Prints \"A - B - C\"\n\n// You can call named functions using strings\n$function_name = 'add';\necho $function_name(1, 2); // => 3\n// Useful for programmatically determining which function to run.\n// Or, use call_user_func(callable $callback [, $parameter [, ... ]]);\n\n\n// You can get all the parameters passed to a function\nfunction parameters() {\n    $numargs = func_num_args();\n    if ($numargs > 0) {\n        echo func_get_arg(0) . ' | ';\n    }\n    $args_array = func_get_args();\n    foreach ($args_array as $key => $arg) {\n        echo $key . ' - ' . $arg . ' | ';\n    }\n}\n\nparameters('Hello', 'World'); // Hello | 0 - Hello | 1 - World |\n\n// Since PHP 5.6 you can get a variable number of arguments\nfunction variable($word, ...$list) {\n\techo $word . \" || \";\n\tforeach ($list as $item) {\n\t\techo $item . ' | ';\n\t}\n}\n\nvariable(\"Separate\", \"Hello\", \"World\"); // Separate || Hello | World |\n\n/********************************\n * Includes\n */\n\n<?php\n// PHP within included files must also begin with a PHP open tag.\n\ninclude 'my-file.php';\n// The code in my-file.php is now available in the current scope.\n// If the file cannot be included (e.g. file not found), a warning is emitted.\n\ninclude_once 'my-file.php';\n// If the code in my-file.php has been included elsewhere, it will\n// not be included again. This prevents multiple class declaration errors\n\nrequire 'my-file.php';\nrequire_once 'my-file.php';\n// Same as include(), except require() will cause a fatal error if the\n// file cannot be included.\n\n// Contents of my-include.php:\n<?php\n\nreturn 'Anything you like.';\n// End file\n\n// Includes and requires may also return a value.\n$value = include 'my-include.php';\n\n// Files are included based on the file path given or, if none is given,\n// the include_path configuration directive. If the file isn't found in\n// the include_path, include will finally check in the calling script's\n// own directory and the current working directory before failing.\n/* */\n\n/********************************\n * Classes\n */\n\n// Classes are defined with the class keyword\n\nclass MyClass\n{\n    const MY_CONST      = 'value'; // A constant\n\n    static $staticVar   = 'static';\n\n    // Static variables and their visibility\n    public static $publicStaticVar = 'publicStatic';\n    // Accessible within the class only\n    private static $privateStaticVar = 'privateStatic';\n    // Accessible from the class and subclasses\n    protected static $protectedStaticVar = 'protectedStatic';\n\n    // Properties must declare their visibility\n    public $property    = 'public';\n    public $instanceProp;\n    protected $prot = 'protected'; // Accessible from the class and subclasses\n    private $priv   = 'private';   // Accessible within the class only\n\n    // Create a constructor with __construct\n    public function __construct($instanceProp)\n    {\n        // Access instance variables with $this\n        $this->instanceProp = $instanceProp;\n    }\n\n    // Methods are declared as functions inside a class\n    public function myMethod()\n    {\n        print 'MyClass';\n    }\n\n    // final keyword would make a function unoverridable\n    final function youCannotOverrideMe()\n    {\n    }\n\n    // Magic Methods\n\n    // what to do if Object is treated as a String\n    public function __toString()\n    {\n        return $property;\n    }\n\n    // opposite to __construct()\n    // called when object is no longer referenced\n    public function __destruct()\n    {\n        print \"Destroying\";\n    }\n\n/*\n * Declaring class properties or methods as static makes them accessible without\n * needing an instantiation of the class. A property declared as static can not\n * be accessed with an instantiated class object (though a static method can).\n */\n\n    public static function myStaticMethod()\n    {\n        print 'I am static';\n    }\n}\n\n// Class constants can always be accessed statically\necho MyClass::MY_CONST;    // Outputs 'value';\n\necho MyClass::$staticVar;  // Outputs 'static';\nMyClass::myStaticMethod(); // Outputs 'I am static';\n\n// Instantiate classes using new\n$my_class = new MyClass('An instance property');\n// The parentheses are optional if not passing in an argument.\n\n// Access class members using ->\necho $my_class->property;     // => \"public\"\necho $my_class->instanceProp; // => \"An instance property\"\n$my_class->myMethod();        // => \"MyClass\"\n\n// Nullsafe operators since PHP 8\n// You can use this when you're unsure if the abstraction of $my_class contains has a property/method\n// it can be used in conjunction with the nullish coalesce operator to ensure proper value\necho $my_class->invalid_property // An error is thrown\necho $my_class?->invalid_property // => NULL\necho $my_class?->invalid_property ?? \"public\" // => \"public\"\n\n// Extend classes using \"extends\"\nclass MyOtherClass extends MyClass\n{\n    function printProtectedProperty()\n    {\n        echo $this->prot;\n    }\n\n    // Override a method\n    function myMethod()\n    {\n        parent::myMethod();\n        print ' > MyOtherClass';\n    }\n}\n\n$my_other_class = new MyOtherClass('Instance prop');\n$my_other_class->printProtectedProperty(); // => Prints \"protected\"\n$my_other_class->myMethod();               // Prints \"MyClass > MyOtherClass\"\n\nfinal class YouCannotExtendMe\n{\n}\n\n// You can use \"magic methods\" to create getters and setters\nclass MyMapClass\n{\n    private $property;\n\n    public function __get($key)\n    {\n        return $this->$key;\n    }\n\n    public function __set($key, $value)\n    {\n        $this->$key = $value;\n    }\n}\n\n$x = new MyMapClass();\necho $x->property; // Will use the __get() method\n$x->property = 'Something'; // Will use the __set() method\n\n// Classes can be abstract (using the abstract keyword) or\n// implement interfaces (using the implements keyword).\n// An interface is declared with the interface keyword.\n\ninterface InterfaceOne\n{\n    public function doSomething();\n}\n\ninterface InterfaceTwo\n{\n    public function doSomethingElse();\n}\n\n// interfaces can be extended\ninterface InterfaceThree extends InterfaceTwo\n{\n    public function doAnotherContract();\n}\n\nabstract class MyAbstractClass implements InterfaceOne\n{\n    public $x = 'doSomething';\n}\n\nclass MyConcreteClass extends MyAbstractClass implements InterfaceTwo\n{\n    public function doSomething()\n    {\n        echo $x;\n    }\n\n    public function doSomethingElse()\n    {\n        echo 'doSomethingElse';\n    }\n}\n\n\n// Classes can implement more than one interface\nclass SomeOtherClass implements InterfaceOne, InterfaceTwo\n{\n    public function doSomething()\n    {\n        echo 'doSomething';\n    }\n\n    public function doSomethingElse()\n    {\n        echo 'doSomethingElse';\n    }\n}\n\n\n/********************************\n * Traits\n */\n\n// Traits are available from PHP 5.4.0 and are declared using \"trait\"\n\ntrait MyTrait\n{\n    public function myTraitMethod()\n    {\n        print 'I have MyTrait';\n    }\n}\n\nclass MyTraitfulClass\n{\n    use MyTrait;\n}\n\n$cls = new MyTraitfulClass();\n$cls->myTraitMethod(); // Prints \"I have MyTrait\"\n\n\n/********************************\n * Namespaces\n */\n\n// This section is separate, because a namespace declaration\n// must be the first statement in a file. Let's pretend that is not the case\n\n<?php\n\n// By default, classes exist in the global namespace, and can\n// be explicitly called with a backslash.\n\n$cls = new \\MyClass();\n\n\n\n// Set the namespace for a file\nnamespace My\\Namespace;\n\nclass MyClass\n{\n}\n\n// (from another file)\n$cls = new My\\Namespace\\MyClass;\n\n//Or from within another namespace.\nnamespace My\\Other\\Namespace;\n\nuse My\\Namespace\\MyClass;\n\n$cls = new MyClass();\n\n// Or you can alias the namespace;\n\nnamespace My\\Other\\Namespace;\n\nuse My\\Namespace as SomeOtherNamespace;\n\n$cls = new SomeOtherNamespace\\MyClass();\n\n\n/**********************\n* Late Static Binding\n*\n*/\n\nclass ParentClass\n{\n    public static function who()\n    {\n        echo \"I'm a \" . __CLASS__ . \"\\n\";\n    }\n\n    public static function test()\n    {\n        // self references the class the method is defined within\n        self::who();\n        // static references the class the method was invoked on\n        static::who();\n    }\n}\n\nParentClass::test();\n/*\nI'm a ParentClass\nI'm a ParentClass\n*/\n\nclass ChildClass extends ParentClass\n{\n    public static function who()\n    {\n        echo \"But I'm \" . __CLASS__ . \"\\n\";\n    }\n}\n\nChildClass::test();\n/*\nI'm a ParentClass\nBut I'm ChildClass\n*/\n\n/**********************\n*  Magic constants\n*\n*/\n\n// Get current class name. Must be used inside a class declaration.\necho \"Current class name is \" . __CLASS__;\n\n// Get full path directory of a file\necho \"Current directory is \" . __DIR__;\n\n    // Typical usage\n    require __DIR__ . '/vendor/autoload.php';\n\n// Get full path of a file\necho \"Current file path is \" . __FILE__;\n\n// Get current function name\necho \"Current function name is \" . __FUNCTION__;\n\n// Get current line number\necho \"Current line number is \" . __LINE__;\n\n// Get the name of the current method. Only returns a value when used inside a trait or object declaration.\necho \"Current method is \" . __METHOD__;\n\n// Get the name of the current namespace\necho \"Current namespace is \" . __NAMESPACE__;\n\n// Get the name of the current trait. Only returns a value when used inside a trait or object declaration.\necho \"Current trait is \" . __TRAIT__;\n\n/**********************\n*  Error Handling\n*\n*/\n\n// Simple error handling can be done with try catch block\n\ntry {\n    // Do something\n} catch (Exception $e) {\n    // Handle exception\n}\n\n// When using try catch blocks in a namespaced environment it is important to\n// escape to the global namespace, because Exceptions are classes, and the\n// Exception class exists in the global namespace. This can be done using a\n// leading backslash to catch the Exception.\n\ntry {\n    // Do something\n} catch (\\Exception $e) {\n    // Handle exception\n}\n\n// Custom exceptions\n\nclass MyException extends Exception {}\n\ntry {\n\n    $condition = true;\n\n    if ($condition) {\n        throw new MyException('Something just happened');\n    }\n\n} catch (MyException $e) {\n    // Handle my exception\n}\n```\n\n## More Information\n\nVisit the [official PHP documentation](http://www.php.net/manual/) for reference\nand community input.\n\nIf you're interested in up-to-date best practices, visit\n[PHP The Right Way](http://www.phptherightway.com/).\n\nA tutorial covering basics of language, setting up coding environment and making\nfew practical projects at [Codecourse - PHP Basics](https://www.youtube.com/playlist?list=PLfdtiltiRHWHjTPiFDRdTOPtSyYfz3iLW).\n\nIf you're coming from a language with good package management, check out\n[Composer](http://getcomposer.org/).\n\nFor common standards, visit the PHP Framework Interoperability Group's\n[PSR standards](https://github.com/php-fig/fig-standards).\n"
        },
        {
          "name": "pl",
          "type": "tree",
          "content": null
        },
        {
          "name": "powershell.md",
          "type": "blob",
          "size": 23.94921875,
          "content": "---\nname: PowerShell\ncontributors:\n    - [\"Wouter Van Schandevijl\", \"https://github.com/laoujin\"]\n    - [\"Andrew Ryan Davis\", \"https://github.com/AndrewDavis1191\"]\nfilename: LearnPowershell.ps1\n---\n\nPowerShell is the Windows scripting language and configuration management\nframework from Microsoft built on the .NET Framework. Windows 7 and up ship\nwith PowerShell.  \nNearly all examples below can be a part of a shell script or executed directly\nin the shell.\n\nA key difference with Bash is that it is mostly objects that you manipulate\nrather than plain text. After years of evolving, it resembles Python a bit.\n\n[Read more here.](https://docs.microsoft.com/powershell/scripting/overview)\n\nPowershell as a Language:\n\n```powershell\n# Single line comments start with a number symbol.\n\n<#\n  Multi-line comments\n  like so\n#>\n\n\n####################################################\n## 1. Primitive Datatypes and Operators\n####################################################\n\n# Numbers\n3 # => 3\n\n# Math\n1 + 1   # => 2\n8 - 1   # => 7\n10 * 2  # => 20\n35 / 5  # => 7.0\n\n# Powershell uses banker's rounding,\n# meaning [int]1.5 would round to 2 but so would [int]2.5\n# Division always returns a float. \n# You must cast result to [int] to round.\n[int]5 / [int]3       # => 1.66666666666667\n[int]-5 / [int]3      # => -1.66666666666667\n5.0 / 3.0   # => 1.66666666666667\n-5.0 / 3.0  # => -1.66666666666667\n[int]$result = 5 / 3 \n$result # => 2\n\n# Modulo operation\n7 % 3  # => 1\n\n# Exponentiation requires longform or the built-in [Math] class.\n[Math]::Pow(2,3)  # => 8\n\n# Enforce order of operations with parentheses.\n1 + 3 * 2  # => 7\n(1 + 3) * 2  # => 8\n\n# Boolean values are primitives (Note: the $)\n$True  # => True\n$False  # => False\n\n# negate with !\n!$True   # => False\n!$False  # => True\n\n# Boolean Operators\n# Note \"-and\" and \"-or\" usage\n$True -and $False  # => False\n$False -or $True   # => True\n\n# True and False are actually 1 and 0 but only support limited arithmetic.\n# However, casting the bool to int resolves this.\n$True + $True # => 2\n$True * 8    # => '[System.Boolean] * [System.Int32]' is undefined\n[int]$True * 8 # => 8\n$False - 5   # => -5\n\n# Comparison operators look at the numerical value of True and False.\n0 -eq $False  # => True\n1 -eq $True   # => True\n2 -eq $True   # => False\n-5 -ne $False # => True\n\n# Using boolean logical operators on ints casts to booleans for evaluation.\n# but their non-cast value is returned\n# Don't mix up with bool(ints) and bitwise -band/-bor\n[bool](0)     # => False\n[bool](4)     # => True\n[bool](-6)    # => True\n0 -band 2     # => 0\n-5 -bor 0     # => -5\n\n# Equality is -eq (equals)\n1 -eq 1  # => True\n2 -eq 1  # => False\n\n# Inequality is -ne (notequals)\n1 -ne 1  # => False\n2 -ne 1  # => True\n\n# More comparisons\n1 -lt 10  # => True\n1 -gt 10  # => False\n2 -le 2  # => True\n2 -ge 2  # => True\n\n# Seeing whether a value is in a range\n1 -lt 2 -and 2 -lt 3  # => True\n2 -lt 3 -and 3 -lt 2  # => False\n\n# (-is vs. -eq) -is checks if two objects are the same type.\n# -eq checks if the objects have the same values, but sometimes doesn't work\n# as expected.\n# Note: we called '[Math]' from .NET previously without the preceeding\n# namespaces. We can do the same with [Collections.ArrayList] if preferred.\n[System.Collections.ArrayList]$a = @()  # Point a at a new list\n$a = (1,2,3,4)\n$b = $a                                 # => Point b at what a is pointing to\n$b -is $a.GetType()                     # => True, a and b equal same type\n$b -eq $a                               # => None! See below\n[System.Collections.Hashtable]$b = @{}  # => Point b at a new hash table\n$b = @{'one' = 1 \n       'two' = 2}\n$b -is $a.GetType()                     # => False, a and b types not equal\n\n# Strings are created with \" or ' but \" is required for string interpolation\n\"This is a string.\"\n'This is also a string.'\n\n# Strings can be added too! But try not to do this.\n\"Hello \" + \"world!\"  # => \"Hello world!\"\n\n# A string can be treated like a list of characters\n\"Hello world!\"[0]  # => 'H'\n\n# You can find the length of a string\n(\"This is a string\").Length  # => 16\n\n# You can also format using f-strings or formatted string literals.\n$name = \"Steve\"\n$age = 22\n\"He said his name is $name.\" \n# => \"He said his name is Steve\"\n\"{0} said he is {1} years old.\" -f $name, $age \n# => \"Steve said he is 22 years old\"\n\"$name's name is $($name.Length) characters long.\" \n# => \"Steve's name is 5 characters long.\"\n\n# Strings can be compared with -eq, but are case insensitive. We can\n# force with -ceq or -ieq.\n\"ab\" -eq \"ab\"  # => True\n\"ab\" -eq \"AB\"  # => True!\n\"ab\" -ceq \"AB\"  # => False\n\"ab\" -ieq \"AB\"  # => True\n\n# Escape Characters in Powershell\n# Many languages use the '\\', but Windows uses this character for \n# file paths. Powershell thus uses '`' to escape characters\n# Take caution when working with files, as '`' is a\n# valid character in NTFS filenames.\n\"Showing`nEscape Chars\" # => new line between Showing and Escape\n\"Making`tTables`tWith`tTabs\" # => Format things with tabs\n\n# Negate pound sign to prevent comment\n# Note that the function of '#' is removed, but '#' is still present\n`#Get-Process # => Fail: not a recognized cmdlet\n\n# $null is not an object\n$null  # => None\n\n# $null, 0, and empty strings and arrays all evaluate to False.\n# All other values are True\nfunction Test-Value ($value) {\n  if ($value) {\n    Write-Output 'True'\n  }\n  else {\n    Write-Output 'False'\n  }\n}\n\nTest-Value ($null) # => False\nTest-Value (0)     # => False\nTest-Value (\"\")    # => False\nTest-Value []      # => True \n# *[] calls .NET class; creates '[]' string when passed to function\nTest-Value ({})    # => True\nTest-Value @()     # => False\n\n\n####################################################\n## 2. Variables and Collections\n####################################################\n\n# Powershell uses the \"Write-Output\" function to print\nWrite-Output \"I'm Posh. Nice to meet you!\"  # => I'm Posh. Nice to meet you!\n\n# Simple way to get input data from console\n$userInput = Read-Host \"Enter some data: \" # Returns the data as a string\n\n# There are no declarations, only assignments.\n# Convention is to use camelCase or PascalCase, whatever your team uses.\n$someVariable = 5\n$someVariable  # => 5\n\n# Accessing a previously unassigned variable does not throw exception.\n# The value is $null by default\n\n# Ternary Operators exist in Powershell 7 and up\n0 ? 'yes' : 'no'  # => no\n\n\n# The default array object in Powershell is an fixed length array.\n$defaultArray = \"thing\",\"thing2\",\"thing3\"\n# you can add objects with '+=', but cannot remove objects.\n$defaultArray.Add(\"thing4\") # => Exception \"Collection was of a fixed size.\"\n# To have a more workable array, you'll want the .NET [ArrayList] class\n# It is also worth noting that ArrayLists are significantly faster\n\n# ArrayLists store sequences\n[System.Collections.ArrayList]$array = @()\n# You can start with a prefilled ArrayList\n[System.Collections.ArrayList]$otherArray = @(5, 6, 7, 8)\n\n# Add to the end of a list with 'Add' (Note: produces output, append to $null)\n$array.Add(1) > $null    # $array is now [1]\n$array.Add(2) > $null    # $array is now [1, 2]\n$array.Add(4) > $null    # $array is now [1, 2, 4]\n$array.Add(3) > $null    # $array is now [1, 2, 4, 3]\n# Remove from end with index of count of objects-1; array index starts at 0\n$array.RemoveAt($array.Count-1) # => 3 and array is now [1, 2, 4]\n# Let's put it back\n$array.Add(3) > $null   # array is now [1, 2, 4, 3] again.\n\n# Access a list like you would any array\n$array[0]   # => 1\n# Look at the last element\n$array[-1]  # => 3\n# Looking out of bounds returns nothing\n$array[4]  # blank line returned\n\n# Remove elements from a array\n$array.Remove($array[3])  # $array is now [1, 2, 4]\n\n# Insert at index an element \n$array.Insert(2, 3)  # $array is now [1, 2, 3, 4]\n\n# Get the index of the first item found matching the argument\n$array.IndexOf(2)  # => 1\n$array.IndexOf(6)  # Returns -1 as \"outside array\" \n\n# You can add arrays\n# Note: values for $array and for $otherArray are not modified.\n$array + $otherArray  # => [1, 2, 3, 4, 5, 6, 7, 8]\n\n# Concatenate arrays with \"AddRange()\"\n$array.AddRange($otherArray)  # Now $array is [1, 2, 3, 4, 5, 6, 7, 8]\n\n# Check for existence in a array with \"in\"\n1 -in $array  # => True\n\n# Examine length with \"Count\" (Note: \"Length\" on arrayList = each items length)\n$array.Count  # => 8\n\n# You can look at ranges with slice syntax.\n$array[1,3,5]     # Return selected index  => [2, 4, 6]\n$array[1..3]      # Return from index 1 to 3 => [2, 3, 4]\n$array[-3..-1]    # Return from last 3 to last 1 => [6, 7, 8]\n$array[-1..-3]    # Return from last 1 to last 3 => [8, 7, 6]\n$array[2..-1]     # Return from index 2 to last (NOT as most expect) => [3, 2, 1, 8]\n$array[0,2+4..6]  # Return multiple ranges with the + => [1, 3, 5, 6, 7]\n\n# -eq doesn't compare array but extract the matching elements\n$array = 1,2,3,1,1\n$array -eq 1          # => 1,1,1\n($array -eq 1).Count  # => 3\n\n# Tuples are like arrays but are immutable.\n# To use Tuples in powershell, you must use the .NET tuple class.\n$tuple = [System.Tuple]::Create(1, 2, 3)\n$tuple.Item(0)      # => 1\n$tuple.Item(0) = 3  # Raises a TypeError\n\n# You can do some of the array methods on tuples, but they are limited.\n$tuple.Length       # => 3\n$tuple + (4, 5, 6)  # => Exception\n$tuple[0..2]        # => $null (in powershell 5)    => [1, 2, 3] (in powershell 7)\n2 -in $tuple        # => False\n\n\n# Hashtables store mappings from keys to values, similar to (but distinct from) Dictionaries.\n# Hashtables do not hold entry order as arrays do. \n$emptyHash = @{}\n# Here is a prefilled hashtable\n$filledHash = @{\"one\"= 1 \n                \"two\"= 2 \n                \"three\"= 3}\n\n# Look up values with []\n$filledHash[\"one\"]  # => 1\n\n# Get all keys as an iterable with \".Keys\".\n$filledHash.Keys  # => [\"one\", \"two\", \"three\"]\n\n# Get all values as an iterable with \".Values\".\n$filledHash.Values  # => [1, 2, 3]\n\n# Check for existence of keys or values in a hash with \"-in\"\n\"one\" -in $filledHash.Keys  # => True\n1 -in $filledHash.Values    # => False (in powershell 5)    => True (in powershell 7)\n\n# Looking up a non-existing key returns $null\n$filledHash[\"four\"]  # $null\n\n# Adding to a hashtable\n$filledHash.Add(\"five\",5)  # $filledHash[\"five\"] is set to 5\n$filledHash.Add(\"five\",6)  # exception \"Item with key \"five\" has already been added\"\n$filledHash[\"four\"] = 4    # $filledHash[\"four\"] is set to 4, running again does nothing\n\n# Remove keys from a hashtable\n$filledHash.Remove(\"one\") # Removes the key \"one\" from filled hashtable\n\n\n####################################################\n## 3. Control Flow and Iterables\n####################################################\n\n# Let's just make a variable\n$someVar = 5\n\n# Here is an if statement.\n# This prints \"$someVar is smaller than 10\"\nif ($someVar -gt 10) {\n    Write-Output \"$someVar is bigger than 10.\"\n}\nelseif ($someVar -lt 10) {    # This elseif clause is optional.\n    Write-Output \"$someVar is smaller than 10.\"\n}\nelse {                        # This is optional too.\n    Write-Output \"$someVar is indeed 10.\"\n}\n\n\n<#\nForeach loops iterate over arrays\nprints:\n    dog is a mammal\n    cat is a mammal\n    mouse is a mammal\n#>\nforeach ($animal in (\"dog\", \"cat\", \"mouse\")) {\n    # You can use -f to interpolate formatted strings\n    \"{0} is a mammal\" -f $animal\n}\n\n<#\nFor loops iterate over arrays and you can specify indices\nprints:\n   0 a\n   1 b\n   2 c\n   3 d\n   4 e\n   5 f\n   6 g\n   7 h\n#>\n$letters = ('a','b','c','d','e','f','g','h')\nfor($i=0; $i -le $letters.Count-1; $i++){\n    Write-Host $i, $letters[$i]\n}\n\n<#\nWhile loops go until a condition is no longer met.\nprints:\n    0\n    1\n    2\n    3\n#>\n$x = 0\nwhile ($x -lt 4) {\n    Write-Output $x\n    $x += 1  # Shorthand for x = x + 1\n}\n\n# Switch statements are more powerful compared to most languages\n$val = \"20\"\nswitch($val) {\n  { $_ -eq 42 }           { \"The answer equals 42\"; break }\n  '20'                    { \"Exactly 20\"; break }\n  { $_ -like 's*' }       { \"Case insensitive\"; break }\n  { $_ -clike 's*'}       { \"clike, ceq, cne for case sensitive\"; break }\n  { $_ -notmatch '^.*$'}  { \"Regex matching. cnotmatch, cnotlike, ...\"; break }\n  default                 { \"Others\" }\n}\n\n# Handle exceptions with a try/catch block\ntry {\n    # Use \"throw\" to raise an error\n    throw \"This is an error\"\n}\ncatch {\n    Write-Output $Error.ExceptionMessage\n}\nfinally {\n    Write-Output \"We can clean up resources here\"\n}\n\n\n# Writing to a file\n$contents = @{\"aa\"= 12 \n             \"bb\"= 21}\n$contents | Export-CSV \"$env:HOMEDRIVE\\file.csv\" # writes to a file\n\n$contents = \"test string here\"\n$contents | Out-File \"$env:HOMEDRIVE\\file.txt\" # writes to another file\n\n# Read file contents and convert to json\nGet-Content \"$env:HOMEDRIVE\\file.csv\" | ConvertTo-Json\n\n\n####################################################\n## 4. Functions\n####################################################\n\n# Use \"function\" to create new functions\n# Keep the Verb-Noun naming convention for functions\nfunction Add-Numbers {\n $args[0] + $args[1]\n}\n\nAdd-Numbers 1 2 # => 3\n\n# Calling functions with parameters\nfunction Add-ParamNumbers {\n param( [int]$firstNumber, [int]$secondNumber )\n $firstNumber + $secondNumber\n}\n\nAdd-ParamNumbers -FirstNumber 1 -SecondNumber 2 # => 3 \n\n# Functions with named parameters, parameter attributes, parsable documentation\n<#\n.SYNOPSIS\nSetup a new website\n.DESCRIPTION\nCreates everything your new website needs for much win\n.PARAMETER siteName\nThe name for the new website\n.EXAMPLE\nNew-Website -Name FancySite -Po 5000\nNew-Website SiteWithDefaultPort\nNew-Website siteName 2000 # ERROR! Port argument could not be validated\n('name1','name2') | New-Website -Verbose\n#>\nfunction New-Website() {\n    [CmdletBinding()]\n    param (\n        [Parameter(ValueFromPipeline=$true, Mandatory=$true)]\n        [Alias('name')]\n        [string]$siteName,\n        [ValidateSet(3000,5000,8000)]\n        [int]$port = 3000\n    )\n    BEGIN { Write-Output 'Creating new website(s)' }\n    PROCESS { Write-Output \"name: $siteName, port: $port\" }\n    END { Write-Output 'Website(s) created' }\n}\n\n\n####################################################\n## 5. Modules\n####################################################\n\n# You can import modules and install modules\n# The Install-Module is similar to pip or npm, pulls from Powershell Gallery\nInstall-Module dbaTools\nImport-Module dbaTools\n\n$query = \"SELECT * FROM dbo.sometable\"\n$queryParams = @{\n    SqlInstance = 'testInstance'\n    Database    = 'testDatabase'\n    Query       = $query\n}\nInvoke-DbaQuery @queryParams\n\n# You can get specific functions from a module\nImport-Module -Function Invoke-DbaQuery\n\n\n# Powershell modules are just ordinary Posh files. You\n# can write your own, and import them. The name of the\n# module is the same as the name of the file.\n\n# You can find out which functions and attributes\n# are defined in a module.\nGet-Command -module dbaTools\nGet-Help dbaTools -Full\n\n\n####################################################\n## 6. Classes\n####################################################\n\n# We use the \"class\" statement to create a class\nclass Instrument {\n    [string]$Type\n    [string]$Family\n}\n\n$instrument = [Instrument]::new()\n$instrument.Type = \"String Instrument\"\n$instrument.Family = \"Plucked String\"\n\n$instrument\n\n<# Output:\nType              Family        \n----              ------        \nString Instrument Plucked String\n#>\n\n\n####################################################\n## 6.1 Inheritance\n####################################################\n\n# Inheritance allows new child classes to be defined that inherit \n# methods and variables from their parent class.\n\nclass Guitar : Instrument\n{\n    [string]$Brand\n    [string]$SubType\n    [string]$ModelType\n    [string]$ModelNumber\n}\n\n$myGuitar = [Guitar]::new()\n$myGuitar.Brand       = \"Taylor\"\n$myGuitar.SubType     = \"Acoustic\"\n$myGuitar.ModelType   = \"Presentation\"\n$myGuitar.ModelNumber = \"PS14ce Blackwood\"\n\n$myGuitar.GetType()\n\n<#\nIsPublic IsSerial Name                                     BaseType                                               \n-------- -------- ----                                     --------                                               \nTrue     False    Guitar                                   Instrument  \n#>\n\n\n####################################################\n## 7. Advanced\n####################################################\n\n# The powershell pipeline allows things like High-Order Functions.\n\n# Group-Object is a handy cmdlet that does incredible things.\n# It works much like a GROUP BY in SQL.\n\n<#\n The following will get all the running processes,\n group them by Name,\n and tell us how many instances of each process we have running.\n Tip: Chrome and svcHost are usually big numbers in this regard.\n#>\nGet-Process | Foreach-Object ProcessName | Group-Object\n\n# Useful pipeline examples are iteration and filtering.\n1..10 | ForEach-Object { \"Loop number $PSITEM\" }\n1..10 | Where-Object { $PSITEM -gt 5 } | ConvertTo-Json\n\n# A notable pitfall of the pipeline is its performance when\n# compared with other options.\n# Additionally, raw bytes are not passed through the pipeline,\n# so passing an image causes some issues.\n# See more on that in the link at the bottom.\n\n<#\n Asynchronous functions exist in the form of jobs.\n Typically a procedural language,\n Powershell can operate non-blocking functions when invoked as Jobs.\n#>\n\n# This function is known to be non-optimized, and therefore slow.\n$installedApps = Get-CimInstance -ClassName Win32_Product\n\n# If we had a script, it would hang at this func for a period of time.\n$scriptBlock = {Get-CimInstance -ClassName Win32_Product}\nStart-Job -ScriptBlock $scriptBlock\n\n# This will start a background job that runs the command.\n# You can then obtain the status of jobs and their returned results.\n$allJobs = Get-Job\n$jobResponse = Get-Job | Receive-Job\n\n\n# Math is built in to powershell and has many functions.\n$r=2\n$pi=[math]::pi\n$r2=[math]::pow( $r, 2 )\n$area = $pi*$r2\n$area\n\n# To see all possibilities, check the members.\n[System.Math] | Get-Member -Static -MemberType All\n\n\n<#\n This is a silly one:\n You may one day be asked to create a func that could take $start and $end\n and reverse anything in an array within the given range\n based on an arbitrary array without mutating the original array.\n Let's see one way to do that and introduce another data structure.\n#>\n\n$targetArray = 'a','b','c','d','e','f','g','h','i','j','k','l','m'\n\nfunction Format-Range ($start, $end, $array) {\n    [System.Collections.ArrayList]$firstSectionArray = @()\n    [System.Collections.ArrayList]$secondSectionArray = @()\n    [System.Collections.Stack]$stack = @()\n    for ($index = 0; $index -lt $array.Count; $index++) {\n        if ($index -lt $start) {\n            $firstSectionArray.Add($array[$index]) > $null\n        }\n        elseif ($index -ge $start -and $index -le $end) {\n            $stack.Push($array[$index])\n        }\n        else {\n            $secondSectionArray.Add($array[$index]) > $null\n        }\n    }\n    $finalArray = $firstSectionArray + $stack.ToArray() + $secondSectionArray\n    return $finalArray\n}\n\nFormat-Range 2 6 $targetArray \n# => 'a','b','g','f','e','d','c','h','i','j','k','l','m'\n\n# The previous method works, but uses extra memory by allocating new arrays.\n# It's also kind of lengthy.\n# Let's see how we can do this without allocating a new array.\n# This is slightly faster as well.\n\nfunction Format-Range ($start, $end) {\n  while ($start -lt $end)\n  {\n      $temp = $targetArray[$start]\n      $targetArray[$start] = $targetArray[$end]\n      $targetArray[$end] = $temp\n      $start++\n      $end--\n  }\n  return $targetArray\n}\n\nFormat-Range 2 6 # => 'a','b','g','f','e','d','c','h','i','j','k','l','m'\n```\n\nPowershell as a Tool:\n\nGetting Help:\n\n```powershell\n# Find commands\nGet-Command about_* # alias: gcm\nGet-Command -Verb Add\nGet-Alias ps\nGet-Alias -Definition Get-Process\n\nGet-Help ps | less # alias: help\nps | Get-Member # alias: gm\n\nShow-Command Get-WinEvent # Display GUI to fill in the parameters\n\nUpdate-Help # Run as admin\n```\n\nIf you are uncertain about your environment:\n\n```powershell\nGet-ExecutionPolicy -List\nSet-ExecutionPolicy AllSigned\n# Execution policies include:\n# - Restricted: Scripts won't run.\n# - RemoteSigned: Downloaded scripts run only if signed by a trusted publisher. \n# - AllSigned: Scripts need to be signed by a trusted publisher.\n# - Unrestricted: Run all scripts.\nhelp about_Execution_Policies # for more info\n\n# Current PowerShell version:\n$PSVersionTable\n```\n\n```powershell\n# Calling external commands, executables, \n# and functions with the call operator.\n# Exe paths with arguments passed or containing spaces can create issues.\nC:\\Program Files\\dotnet\\dotnet.exe\n# The term 'C:\\Program' is not recognized as a name of a cmdlet,\n# function, script file, or executable program.\n# Check the spelling of the name, or if a path was included, \n# verify that the path is correct and try again\n\n\"C:\\Program Files\\dotnet\\dotnet.exe\"\nC:\\Program Files\\dotnet\\dotnet.exe    # returns string rather than execute\n\n&\"C:\\Program Files\\dotnet\\dotnet.exe --help\"   # fail\n&\"C:\\Program Files\\dotnet\\dotnet.exe\" --help   # success\n# Alternatively, you can use dot-sourcing here\n.\"C:\\Program Files\\dotnet\\dotnet.exe\" --help   # success\n\n# the call operator (&) is similar to Invoke-Expression, \n# but IEX runs in current scope.\n# One usage of '&' would be to invoke a scriptblock inside of your script.\n# Notice the variables are scoped\n$i = 2\n$scriptBlock = { $i=5; Write-Output $i }\n& $scriptBlock # => 5\n$i # => 2\n\ninvoke-expression ' $i=5; Write-Output $i ' # => 5\n$i # => 5\n\n# Alternatively, to preserve changes to public variables\n# you can use \"Dot-Sourcing\". This will run in the current scope.\n$x=1\n&{$x=2};$x # => 1\n\n.{$x=2};$x # => 2\n\n\n# Remoting into computers is easy.\nEnter-PSSession -ComputerName RemoteComputer\n\n# Once remoted in, you can run commands as if you're local.\nRemoteComputer\\PS> Get-Process powershell\n\n<#\nHandles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName                                             \n-------  ------    -----      -----     ------     --  -- -----------                                             \n   1096      44   156324     179068      29.92  11772   1 powershell                                              \n    545      25    49512      49852             25348   0 powershell \n#>\nRemoteComputer\\PS> Exit-PSSession\n\n<#\n Powershell is an incredible tool for Windows management and Automation.\n Let's take the following scenario:\n You have 10 servers.\n You need to check whether a service is running on all of them.\n You can RDP and log in, or PSSession to all of them, but why?\n Check out the following\n#>\n\n$serverList = @(\n    'server1',\n    'server2',\n    'server3',\n    'server4',\n    'server5',\n    'server6',\n    'server7',\n    'server8',\n    'server9',\n    'server10'\n)\n\n[scriptblock]$script = {\n    Get-Service -DisplayName 'Task Scheduler'\n}\n\nforeach ($server in $serverList) {\n    $cmdSplat = @{\n        ComputerName  = $server\n        JobName       = 'checkService'\n        ScriptBlock   = $script\n        AsJob         = $true\n        ErrorAction   = 'SilentlyContinue'\n    }\n    Invoke-Command @cmdSplat | Out-Null\n}\n\n<#\n Here we've invoked jobs across many servers.\n We can now Receive-Job and see if they're all running.\n Now scale this up 100x as many servers :)\n#>\n```\n\nInteresting Projects  \n\n* [Channel9](https://channel9.msdn.com/Search?term=powershell%20pipeline#ch9Search&lang-en=en) PowerShell tutorials\n* [KevinMarquette's Powershell Blog](https://powershellexplained.com/) Excellent blog that goes into great detail on Powershell\n* [PSGet](https://github.com/psget/psget) NuGet for PowerShell\n* [PSReadLine](https://github.com/lzybkr/PSReadLine/) A bash inspired readline implementation for PowerShell (So good that it now ships with Windows10 by default!)\n* [Posh-Git](https://github.com/dahlbyk/posh-git/) Fancy Git Prompt (Recommended!)\n* [Oh-My-Posh](https://github.com/JanDeDobbeleer/oh-my-posh) Shell customization similar to the popular Oh-My-Zsh on Mac\n* [PSake](https://github.com/psake/psake) Build automation tool\n* [Pester](https://github.com/pester/Pester) BDD Testing Framework\n* [ZLocation](https://github.com/vors/ZLocation) Powershell `cd` that reads your mind\n* [PowerShell Community Extensions](https://github.com/Pscx/Pscx)\n* [More on the Powershell Pipeline Issue](https://github.com/PowerShell/PowerShell/issues/1908)\n"
        },
        {
          "name": "processing.md",
          "type": "blob",
          "size": 15.3173828125,
          "content": "---\nname: Processing\nfilename: learnprocessing.pde\ncontributors:\n    - [\"Phone Than Ko\", \"http://github.com/phonethantko\"]\n    - [\"Divay Prakash\", \"https://github.com/divayprakash\"]\n---\n\n## Introduction\n\nProcessing is a programming language for creation of digital arts and\nmultimedia content, allowing non-programmers to learn fundamentals of computer\nprogramming in a visual context.\n\nWhile the language is based on Java language, its syntax has been largely\ninfluenced by both Java and JavaScript syntaxes. [See more here](https://processing.org/reference/)\n\nThe language is statically typed, and also comes with its official IDE to\ncompile and run the scripts.\n\n```\n/* ---------\n   Comments\n   ---------\n*/\n\n// Single-line comment starts with //\n\n/*\n   Since Processing is based on Java,\n   the syntax for its comments are the same as Java (as you may have noticed above)!\n   Multi-line comments are wrapped as seen here.\n*/\n\n/* ---------------------------------------\n   Writing and Running Processing Programs\n   ---------------------------------------\n*/\n\n// In Processing, the program entry point is a function named setup() with a\n// void return type.\n// Note! The syntax looks strikingly similar to that of C++.\nvoid setup() {\n  // This prints out the classic output \"Hello World!\" to the console when run.\n  println(\"Hello World!\"); // Another language with a semi-column trap, aint it?\n}\n\n// Normally, we put all the static codes inside the setup() method as the name\n// suggest since it only runs once.\n// It can range from setting the background colours, setting the canvas size.\nbackground(color); // setting the background colour\nsize(width,height,[renderer]); // setting the canvas size with optional\n// parameter defining renderer\n// You will see more of them throughout this document.\n\n// If you want to run the codes indefinitely, it has to be placed in draw()\n// method.\n// draw() must exist if you want the code to run continuously and obviously,\n// there can only be one draw() method.\nint i = 0;\nvoid draw() {\n  // This block of code loops forever until stopped\n  print(i);\n  i++; // Increment Operator!\n}\n\n// Now that we know how to write the working script and how to run it,\n// we will proceed to explore what data types and collections are supported in\n// Processing.\n\n/* ------------------------\n   Datatypes & collections\n   ------------------------\n*/\n\n// According to Processing References, Processing supports 8 primitive\n// datatypes as follows.\n\nboolean booleanValue = true; // Boolean\nbyte byteValueOfA = 23; // Byte\nchar charValueOfA = 'A'; // Char\ncolor colourValueOfWhiteM = color(255, 255, 255); // Colour (Specified using\n// color() method)\ncolor colourValueOfWhiteH = #FFFFFF; // Colour (Specified using hash value)\nint intValue = 5; // Integer (Number without decimals)\nlong longValue = 2147483648L; // \"L\" is added to number to mark it as a long\nfloat floatValue = 1.12345; // Float (32-bit floating-point numbers)\ndouble doubleValue = 1.12345D; // Double (64-bit floating-point numbers)\n\n// NOTE!\n// Although datatypes \"long\" and \"double\" work in the language,\n// processing functions do not use these datatypes, therefore\n// they need to be converted into \"int\" and \"float\" datatypes respectively,\n// using (int) and (float) syntax before passing into a function.\n\n// There is a whole bunch of default composite datatypes available for use in\n// Processing.\n// Primarily, I will brief through the most commonly used ones to save time.\n\n// String\n// While char datatype uses '', String datatype uses \"\" - double quotes.\nString sampleString = \"Hello, Processing!\";\n// String can be constructed from an array of char datatypes as well. We will\n// discuss array very soon.\nchar source = {'H', 'E', 'L', 'L', 'O'};\nString stringFromSource = new String(source); // HELLO\n// As in Java, strings can be concatenated using the \"+\" operator.\nprint(\"Hello \" + \"World!\"); // Hello World!\n\n// Array\n// Arrays in Processing can hold any datatypes including Objects themselves.\n// Since arrays are similar to objects, they must be created with the keyword\n// \"new\".\nint[] intArray = new int[5];\nint[] intArrayWithValues = {1, 2, 3}; // You can also populate with data.\n\n// ArrayList\n// Functions are similar to those of array; arraylists can hold any datatypes.\n// The only difference is arraylists resize dynamically, as it is a form of\n// resizable-array implementation of the Java \"List\" interface.\nArrayList<Integer> intArrayList = new ArrayList<Integer>();\n\n// Object\n// Since it is based on Java, Processing supports object-oriented programming.\n// That means you can basically define any datatypes of your own and manipulate\n// them to your needs.\n// Of course, a class has to be defined before for the object you want.\n// Format --> ClassName InstanceName\nSomeRandomClass myObject // then instantiate later\n//or\nSomeRandomClass myObjectInstantiated = new SomeRandomClass();\n\n// Processing comes up with more collections (eg. - Dictionaries and Lists) by\n// default, for the simplicity sake, I will leave them out of discussion here.\n\n/* ------------\n   Maths\n   ------------\n*/\n\n// Arithmetic\n1 + 1 // 2\n2 - 1 // 1\n2 * 3 // 6\n3 / 2 // 1\n3.0 / 2 // 1.5\n3.0 % 2 // 1.0\n\n// Processing also comes with a set of functions that simplify mathematical\n// operations.\nfloat f = sq(3); // f = 9.0\nfloat p = pow(3, 3); // p = 27.0\nint a = abs(-13); // a = 13\nint r1 = round(3.1); // r1 = 3\nint r2 = round(3.7); // r2 = 4\nfloat sr = sqrt(25); // sr = 5.0\n\n// Vectors\n// Processing provides an easy way to implement vectors in its environment\n// using PVector class. It can describe a two or three dimensional vector and\n// comes with a set of methods which are useful for matrices operations.\n// You can find more information on PVector class and its functions here.\n// (https://processing.org/reference/PVector.html)\n\n// Trigonometry\n// Processing also supports trigonometric operations by supplying a set of\n// functions. sin(), cos(), tan(), asin(), acos(), atan() and also degrees()\n// and radians() for convenient conversion.\n// However, those functions take angle in radians as the parameter so it has\n// to be converted beforehand.\nfloat one = sin(PI/2); // one = 1.0\n// As you may have noticed, there exists a set of constants for trigonometric\n// uses;\n// PI, HALF_PI, QUARTER_PI and so on...\n\n/* -------------\n   Control Flow\n   -------------\n*/\n\n// Conditional Statements\n// If Statements - The same syntax as if statements in Java.\nif (author.getAppearance().equals(\"hot\")) {\n  print(\"Narcissism at its best!\");\n} else {\n  // You can check for other conditions here.\n  print(\"Something is really wrong here!\");\n}\n// A shortcut for if-else statements can also be used.\nint i = 3;\nString value = (i > 5) ? \"Big\" : \"Small\"; // \"Small\"\n\n// Switch-case structure can be used to check multiple conditions concisely.\n// It is important to use the break statement. If the `break`-statement does \n// not exist the program executes all the following cases after a case was true.\nint value = 2;\nswitch(value) {\n  case 0:\n    print(\"Nought!\"); // This does not get executed.\n    break; // Jumps to the next statement\n  case 1:\n    print(\"Getting there...\"); // This again does not get executed.\n    break;\n  case 2:\n    print(\"Bravo!\"); // This line gets executed.\n    break;\n  default:\n    print(\"Not found!\"); // This line gets executed if our value was some other value.\n    break;\n}\n\n// Iterative statements\n// For Statements - Again, the same syntax as in Java\nfor(int i = 0; i < 5; i++){\n  print(i); // prints from 0 to 4\n}\n\n// While Statements - Again, nothing new if you are familiar with Java syntax.\nint j = 3;\nwhile(j > 0) {\n  print(j);\n  j--; // This is important to prevent from the code running indefinitely.\n}\n\n// loop()| noLoop() | redraw() | exit()\n// These are more of Processing-specific functions to configure program flow.\nloop(); // allows the draw() method to run forever while\nnoLoop(); // only allows it to run once.\nredraw(); // runs the draw() method once more.\nexit(); // This stops the program. It is useful for programs with draw()\n// running continuously.\n```\n\n## Drawing with Processing\n\nSince you will have understood the basics of the language by now, we will now\nlook into the best part of Processing - DRAWING.\n\n```\n/* ------\n   Shapes\n   ------\n*/\n\n// 2D Shapes\n\n// Point\npoint(x, y); // In 2D space\npoint(x, y, z); // In 3D space\n// Draws a point in the coordinate space.\n\n// Line\nline(x1, y1, x2, y2); // In 2D space\nline(x1, y1, z1, x2, y2, z2); // In 3D space\n// Draws a line connecting two points defined by (x1, y1) and (x2, y2).\n\n// Triangle\ntriangle(x1, y1, x2, y2, x3, y3);\n// Draws a triangle connecting three points defined by coordinate parameters.\n\n// Rectangle\nrect(a, b, c, d, [r]); // With optional parameter defining the radius of all corners\nrect(a, b, c, d, [tl, tr, br, bl]); // With optional set of parameters defining\n// radius of each corner\n// Draws a rectangle with {a, b} as a top left coordinate and c and d as width\n// and height respectively.\n\n// Quad\nquad(x, y, x2, y2, x3, y3, x4, y4);\n// Draws a quadrilateral with parameters defining coordinates of each corner\n// point.\n\n// Ellipse\nellipse(x, y, width, height);\n// Draws an eclipse at point {x, y} with width and height specified.\n\n// Arc\narc(x, y, width, height, start, stop, [mode]);\n// While the first four parameters are self-explanatory,\n// start and end defined the angles the arc starts and ends (in radians).\n// Optional parameter [mode] defines the filling;\n// PIE gives pie-like outline, CHORD gives the chord-like outline and OPEN is\n// CHORD without strokes\n\n// Curves\n// Processing provides two implementation of curves; using curve() and bezier().\n// Since I plan to keep this simple I wont be discussing any further details.\n// However, if you want to implement it in your sketch, here are the references:\n// (https://processing.org/reference/curve_.html)\n// (https://processing.org/reference/bezier_.html)\n\n// 3D Shapes\n\n// 3D space can be configured by setting \"P3D\" to the renderer parameter in\n// size() method.\nsize(width, height, P3D);\n// In 3D space, you will have to translate to the particular coordinate to\n// render the 3D shapes.\n\n// Box\nbox(size);  // Cube with same length defined by size\nbox(w, h, d); // Box with width, height and depth separately defined\n\n// Sphere\nsphere(radius); // Its size is defined using the radius parameter\n// Mechanism behind rendering spheres is implemented by tessellating triangles.\n// That said, how much detail being rendered is controlled by function\n// sphereDetail(res)\n// More information here: (https://processing.org/reference/sphereDetail_.html)\n\n// Irregular Shapes\n// What if you wanted to draw something thats not made available by Processing\n// functions?\n// You can use beginShape(), endShape(), vertex(x,y) to define shapes by\n// specifying each point. More information here:\n// (https://processing.org/reference/beginShape_.html)\n// You can also use custom made shapes using PShape class:\n// (https://processing.org/reference/PShape.html)\n\n/* ---------------\n   Transformations\n   ---------------\n*/\n\n// Transformations are particularly useful to keep track of the coordinate\n// space and the vertices of the shapes you have drawn. Particularly;\n// matrix stack methods; pushMatrix(), popMatrix() and translate(x,y)\npushMatrix(); // Saves the current coordinate system to the stack\n// ... apply all the transformations here ...\npopMatrix(); // Restores the saved coordinate system\n// Using them, the coordinate system can be preserved and visualized without\n// causing any conflicts.\n\n// Translate\ntranslate(x, y); // Translates to point{x, y} i.e. - setting origin to that point\ntranslate(x, y, z); // 3D counterpart of the function\n\n// Rotate\nrotate(angle); // Rotate the amount specified by the angle parameter\n// It has 3 3D counterparts to perform rotation, each for every dimension,\n// namely: rotateX(angle), rotateY(angle), rotateZ(angle)\n\n// Scale\nscale(s); // Scale the coordinate system by either expanding or contracting it.\n\n/* --------------------\n   Styling and Textures\n   --------------------\n*/\n\n// Colours\n// As I have discussed earlier, the background colour can be configured using\n// background() function. You can define a color object beforehand and then\n// pass it to the function as an argument.\ncolor c = color(255, 255, 255); // WHITE!\n// By default, Processing uses RGB colour scheme but it can be configured to\n// HSB using colorMode(). Read more here:\n// (https://processing.org/reference/colorMode_.html)\nbackground(c); // By now, the background colour should be white.\n// You can use fill() function to select the colour for filling the shapes.\n// It has to be configured before you start drawing shapes so the colours gets\n// applied.\nfill(color(0, 0, 0));\n// If you just want to colour the outlines of the shapes then you can use\n// stroke() function.\nstroke(255, 255, 0, 200); // stroke colour set to yellow with transparency\n// set to a lower value.\n\n// Images\n// Processing can render images and use them in several ways. Mostly stored as\n// PImage datatype.\nfilter(shader); // Processing supports several filter functions for image manipulation.\ntexture(image); // PImage can be passed into arguments for texture-mapping the shapes.\n```\n\nIf you want to take things further, there are more things Processing is powered\nfor. Rendering models, shaders and whatnot. There's too much to cover in a\nshort documentation, so I will leave them out here. Should you be interested,\nplease check out the references.\n\n```\n// Before we move on, I will touch a little bit more on how to import libraries\n// so you can extend Processing functionality to another horizon.\n\n/* -------\n   Imports\n   -------\n*/\n\n// The power of Processing can be further visualized when we import libraries\n// and packages into our sketches.\n// Import statement can be written as below at the top of the source code.\nimport processing.something.*;\n```\n\n## DTC?\n\nDown To Code? Let's get our hands dirty!\n\nLet us see an example from openprocessing to visualize how much Processing is\ncapable of within few lines of code.\n\nCopy the code below into your Processing IDE and see the magic.\n\n```\n// Disclaimer: I did not write this program since I currently am occupied with\n// internship and this sketch is adapted from openprocessing since it shows\n// something cool with simple codes.\n// Retrieved from: (https://www.openprocessing.org/sketch/559769)\n\nfloat theta;\nfloat a;\nfloat col;\nfloat num;\n\nvoid setup() {\n  size(600,600);\n}\n\nvoid draw() {\n  background(#F2F2F2);\n  translate(width/2, height/2);\n  theta = map(sin(millis()/1000.0), -1, 1, 0, PI/6);\n\n  float num=6;\n  for (int i=0; i<num; i++) {\n    a =350;\n    rotate(TWO_PI/num);\n    branch(a);\n  }\n\n}\n\nvoid branch(float len) {\n  col=map(len, 0, 90, 150, 255);\n  fill(col, 0, 74);\n  stroke (col, 0, 74);\n  line(0, 0, 0, -len);\n  ellipse(0, -len, 3, 3);\n  len *= 0.7;\n\n  if (len>30) {\n    pushMatrix();\n    translate(0, -30);\n    rotate(theta);\n    branch(len);\n    popMatrix();\n\n    pushMatrix();\n    translate(0, -30);\n    rotate(-theta);\n    branch(len);\n    popMatrix();\n\n  }\n}\n```\n\nProcessing is easy to learn and is particularly useful to create multimedia\ncontents (even in 3D) without having to type a lot of codes. It is so simple\nthat you can read through the code and get a rough idea of the program flow.\n\nHowever, that does not apply when you introduce external libraries, packages\nand even your own classes. (Trust me! Processing projects can get real humongous...)\n\n## Some useful resources\n\n - [Processing Website](http://processing.org)\n - [Processing Sketches](http://openprocessing.org)\n"
        },
        {
          "name": "prolog.md",
          "type": "blob",
          "size": 14.724609375,
          "content": "---\nname: Prolog\nfilename: learnprolog.pl\ncontributors:\n    - [\"hyphz\", \"http://github.com/hyphz/\"]\n---\n\nProlog is a logic programming language first specified in 1972, and refined into multiple modern implementations.\n\n```\n% This is a comment.\n\n% Prolog treats code entered in interactive mode differently\n% to code entered in a file and loaded (\"consulted\").\n% This code must be loaded from a file to work as intended.\n% Lines that begin with ?- can be typed in interactive mode.\n% A bunch of errors and warnings will trigger when you load this file\n% due to the examples which are supposed to fail - they can be safely\n% ignored.\n\n% Output is based on SWI-prolog 7.2.3. Different Prologs may behave\n% differently.\n\n% Prolog is based on the ideal of logic programming.\n% A subprogram (called a predicate) represents a state of the world.\n% A command (called a goal) tells Prolog to make that state of the world\n%   come true, if possible.\n\n% As an example, here is a definition of the simplest kind of predicate:\n% a fact.\n\nmagicNumber(7).\nmagicNumber(9).\nmagicNumber(42).\n\n% This introduces magicNumber as a predicate and says that it is true\n% with parameter 7, 9, or 42, but no other parameter. Note that\n% predicate names must start with lower case letters. We can now use\n% interactive mode to ask if it is true for different values:\n\n?- magicNumber(7).                   % True\n?- magicNumber(8).                   % False\n?- magicNumber(9).                   % True\n\n% Some older Prologs may display \"Yes\" and \"No\" instead of True and\n% False.\n\n% What makes Prolog unusual is that we can also tell Prolog to _make_\n% magicNumber true, by passing it an undefined variable. Any name\n% starting with a capital letter is a variable in Prolog.\n\n?- magicNumber(Presto).              % Presto = 7 ;\n                                     % Presto = 9 ;\n                                     % Presto = 42.\n\n% Prolog makes magicNumber true by assigning one of the valid numbers to\n% the undefined variable Presto. By default it assigns the first one, 7.\n% By pressing ; in interactive mode you can reject that solution and\n% force it to assign the next one, 9. Pressing ; again forces it to try\n% the last one, 42, after which it no longer accepts input because this\n% is the last solution. You can accept an earlier solution by pressing .\n% instead of ;.\n\n% This is Prolog's central operation: unification. Unification is\n% essentially a combination of assignment and equality! It works as\n% follows:\n%  If both sides are bound (ie, defined), check equality.\n%  If one side is free (ie, undefined), assign to match the other side.\n%  If both sides are free, the assignment is remembered. With some luck,\n%    one of the two sides will eventually be bound, but this isn't\n%    necessary.\n%\n% The = sign in Prolog represents unification, so:\n\n?- 2 = 3.                            % False - equality test\n?- X = 3.                            % X = 3 - assignment\n?- X = 2, X = Y.                     % X = Y = 2 - two assignments\n                                     % Note Y is assigned too, even though it is\n                                     % on the right hand side, because it is free\n?- X = 3, X = 2.                     % False\n                                     % First acts as assignment and binds X=3\n                                     % Second acts as equality because X is bound\n                                     % Since 3 does not equal 2, gives False\n                                     % Thus in Prolog variables are immutable\n?- X = 3+2.                          % X = 3+2 - unification can't do arithmetic\n?- X is 3+2.                         % X = 5 - \"is\" does arithmetic.\n?- 5 = X+2.                          % This is why = can't do arithmetic -\n                                     % because Prolog can't solve equations\n?- 5 is X+2.                         % Error. Unlike =, the right hand side of IS\n                                     % must always be bound, thus guaranteeing\n                                     % no attempt to solve an equation.\n?- X = Y, X = 2, Z is Y + 3.         % X = Y, Y = 2, Z = 5.\n                                     % X = Y are both free, so Prolog remembers\n                                     % it. Therefore assigning X will also\n                                     % assign Y.\n\n% Any unification, and thus any predicate in Prolog, can either:\n% Succeed (return True) without changing anything,\n%   because an equality-style unification was true\n% Succeed (return True) and bind one or more variables in the process,\n%   because an assignment-style unification was made true\n% or Fail (return False)\n%   because an equality-style unification was false\n% (Failure can never bind variables)\n\n% The ideal of being able to give any predicate as a goal and have it\n% made true is not always possible, but can be worked toward. For\n% example, Prolog has a built in predicate plus which represents\n% arithmetic addition but can reverse simple additions.\n\n?- plus(1, 2, 3).                    % True\n?- plus(1, 2, X).                    % X = 3 because 1+2 = X.\n?- plus(1, X, 3).                    % X = 2 because 1+X = 3.\n?- plus(X, 2, 3).                    % X = 1 because X+2 = 3.\n?- plus(X, 5, Y).                    % Error - although this could be solved,\n                                     % the number of solutions is infinite,\n                                     % which most predicates try to avoid.\n\n% When a predicate such as magicNumber can give several solutions, the\n% overall compound goal including it may have several solutions too.\n\n?- magicNumber(X), plus(X,Y,100).    % X = 7, Y = 93 ;\n                                     % X = 9, Y = 91 ;\n                                     % X = 42, Y = 58 .\n% Note: on this occasion it works to pass two variables to plus because\n% only Y is free (X is bound by magicNumber).\n\n% However, if one of the goals is fully bound and thus acts as a test,\n% then solutions which fail the test are rejected.\n?- magicNumber(X), X > 40.           % X = 42\n?- magicNumber(X), X > 100.          % False\n\n% To see how Prolog actually handles this, let's introduce the print\n% predicate. Print always succeeds, never binds any variables, and\n% prints out its parameter as a side effect.\n\n?- print(\"Hello\").                   % \"Hello\" true.\n?- X = 2, print(X).                  % 2 true.\n?- X = 2, print(X), X = 3.           % 2 false - print happens immediately when\n                                     % it is encountered, even though the overall\n                                     % compound goal fails (because 2 != 3,\n                                     % see the example above).\n\n% By using Print we can see what actually happens when we give a\n% compound goal including a test that sometimes fails.\n?- magicNumber(X), print(X), X > 40. % 7 9 42 X = 42 .\n\n% MagicNumber(X) unifies X with its first possibility, 7.\n% Print(X) prints out 7.\n% X > 40 tests if 7 > 40. It is not, so it fails.\n% However, Prolog remembers that magicNumber(X) offered multiple\n% solutions. So it _backtracks_ to that point in the code to try\n% the next solution, X = 9.\n% Having backtracked it must work through the compound goal\n% again from that point including the Print(X). So Print(X) prints out\n% 9.\n% X > 40 tests if 9 > 40 and fails again.\n% Prolog remembers that magicNumber(X) still has solutions and\n% backtracks. Now X = 42.\n% It works through the Print(X) again and prints 42.\n% X > 40 tests if 42 > 40 and succeeds so the result bound to X\n% The same backtracking process is used when you reject a result at\n% the interactive prompt by pressing ;, for example:\n\n?- magicNumber(X), print(X), X > 8.  % 7 9 X = 9 ;\n                                     % 42 X = 42.\n\n% As you saw above we can define our own simple predicates as facts.\n% More complex predicates are defined as rules, like this:\n\nnearby(X,Y) :- X = Y.\nnearby(X,Y) :- Y is X+1.\nnearby(X,Y) :- Y is X-1.\n\n% nearby(X,Y) is true if Y is X plus or minus 1.\n% However this predicate could be improved. Here's why:\n\n?- nearby(2,3).                      % True ; False.\n% Because we have three possible definitions, Prolog sees this as 3\n% possibilities. X = Y fails, so Y is X+1 is then tried and succeeds,\n% giving the True answer. But Prolog still remembers there are more\n% possibilities for nearby() (in Prolog terminology, \"it has a\n% choice point\") even though \"Y is X-1\" is doomed to fail, and gives us\n% the option of rejecting the True answer, which doesn't make a whole\n% lot of sense.\n\n?- nearby(4, X).                     % X = 4 ;\n                                     % X = 5 ;\n                                     % X = 3. Great, this works\n?- nearby(X, 4).                     % X = 4 ;\n                                     % error\n% After rejecting X = 4 prolog backtracks and tries \"Y is X+1\" which is\n% \"4 is X+1\" after substitution of parameters. But as we know from above\n% \"is\" requires its argument to be fully instantiated and it is not, so\n% an error occurs.\n\n% One way to solve the first problem is to use a construct called the\n% cut, !, which does nothing but which cannot be backtracked past.\n\nnearbychk(X,Y) :- X = Y, !.\nnearbychk(X,Y) :- Y is X+1, !.\nnearbychk(X,Y) :- Y is X-1.\n\n% This solves the first problem:\n?- nearbychk(2,3).                   % True.\n\n% But unfortunately it has consequences:\n?- nearbychk(2,X).                   % X = 2.\n% Because Prolog cannot backtrack past the cut after X = Y, it cannot\n% try the possibilities \"Y is X+1\" and \"Y is X-1\", so it only generates\n% one solution when there should be 3.\n% However if our only interest is in checking if numbers are nearby,\n% this may be all we need, thus the name nearbychk.\n% This structure is used in Prolog itself from time to time (for example\n% in list membership).\n\n% To solve the second problem we can use built-in predicates in Prolog\n% to verify if a parameter is bound or free and adjust our calculations\n% appropriately.\nnearby2(X,Y) :- nonvar(X), X = Y.\nnearby2(X,Y) :- nonvar(X), Y is X+1.\nnearby2(X,Y) :- nonvar(X), Y is X-1.\nnearby2(X,Y) :- var(X), nonvar(Y), nearby2(Y,X).\n\n% We can combine this with a cut in the case where both variables are\n% bound, to solve both problems.\nnearby3(X,Y) :- nonvar(X), nonvar(Y), nearby2(X,Y), !.\nnearby3(X,Y) :- nearby2(X,Y).\n\n% However when writing a predicate it is not normally necessary to go to\n% these lengths to perfectly support every possible parameter\n% combination. It suffices to support parameter combinations we need to\n% use in the program. It is a good idea to document which combinations\n% are supported. In regular Prolog this is informally in structured\n% comments, but in some Prolog variants like Visual Prolog and Mercury\n% this is mandatory and checked by the compiler.\n\n% Here is the structured comment declaration for nearby3:\n\n%!    nearby3(+X:Int, +Y:Int) is semideterministic.\n%!    nearby3(+X:Int, -Y:Int) is multi.\n%!    nearby3(-X:Int, +Y:Int) is multi.\n\n% For each variable we list a type. The + or - before the variable name\n% indicates if the parameter is bound (+) or free (-). The word after\n% \"is\" describes the behaviour of the predicate:\n%   semideterministic - can succeed once or fail\n%     ( Two specific numbers are either nearby or not )\n%   multi - can succeed multiple times but cannot fail\n%     ( One number surely has at least 3 nearby numbers )\n%  Other possibilities are:\n%    det - always succeeds exactly once (eg, print)\n%    nondet - can succeed multiple times or fail.\n% In Prolog these are just structured comments and strictly informal but\n% extremely useful.\n\n% An unusual feature of Prolog is its support for atoms. Atoms are\n% essentially members of an enumerated type that are created on demand\n% whenever an unquoted non variable value is used. For example:\ncharacter(batman).            % Creates atom value batman\ncharacter(robin).             % Creates atom value robin\ncharacter(joker).             % Creates atom value joker\ncharacter(darthVader).        % Creates atom value darthVader\n?- batman = batman.           % True - Once created value is reused\n?- batman = batMan.           % False - atoms are case sensitive\n?- batman = darthVader.       % False - atoms are distinct\n\n% Atoms are popular in examples but were created on the assumption that\n% Prolog would be used interactively by end users - they are less\n% useful for modern applications and some Prolog variants abolish them\n% completely. However they can be very useful internally.\n\n% Loops in Prolog are classically written using recursion.\n% Note that below, writeln is used instead of print because print is\n% intended for debugging.\n\n%!    countTo(+X:Int) is deterministic.\n%!    countUpTo(+Value:Int, +Limit:Int) is deterministic.\ncountTo(X) :- countUpTo(1,X).\ncountUpTo(Value, Limit) :- Value = Limit, writeln(Value), !.\ncountUpTo(Value, Limit) :- Value \\= Limit, writeln(Value),\n    NextValue is Value+1,\n    countUpTo(NextValue, Limit).\n\n?- countTo(10).                      % Outputs 1 to 10\n\n% Note the use of multiple declarations in countUpTo to create an\n% IF test. If Value = Limit fails the second declaration is run.\n% There is also a more elegant syntax.\n\n%!    countUpTo2(+Value:Int, +Limit:Int) is deterministic.\ncountUpTo2(Value, Limit) :- writeln(Value),\n    Value = Limit -> true ; (\n        NextValue is Value+1,\n        countUpTo2(NextValue, Limit)).\n\n?- countUpTo2(1,10).                 % Outputs 1 to 10\n\n% If a predicate returns multiple times it is often useful to loop\n% through all the values it returns. Older Prologs used a hideous syntax\n% called a \"failure-driven loop\" to do this, but newer ones use a higher\n% order function.\n\n%!    countTo2(+X:Int) is deterministic.\ncountTo2(X) :- forall(between(1,X,Y),writeln(Y)).\n\n?- countTo2(10).                     % Outputs 1 to 10\n\n% Lists are given in square brackets. Use memberchk to check membership.\n% A group is safe if it doesn't include Joker or does include Batman.\n\n%!     safe(Group:list(atom)) is deterministic.\nsafe(Group) :- memberchk(joker, Group) -> memberchk(batman, Group) ; true.\n\n?- safe([robin]).                    % True\n?- safe([joker]).                    % False\n?- safe([joker, batman]).            % True\n\n% The member predicate works like memberchk if both arguments are bound,\n% but can accept free variables and thus can be used to loop through\n% lists.\n\n?- member(X, [1,2,3]).               % X = 1 ; X = 2 ; X = 3 .\n?- forall(member(X,[1,2,3]),\n       (Y is X+1, writeln(Y))).      % 2 3 4\n\n% The maplist function can be used to generate lists based on other\n% lists. Note that the output list is a free variable, causing an\n% undefined value to be passed to plus, which is then bound by\n% unification. Also notice the use of currying on the plus predicate -\n% it's a 3 argument predicate, but we specify only the first, because\n% the second and third are filled in by maplist.\n\n?- maplist(plus(1), [2,3,4], Output).   % Output = [3, 4, 5].\n```\n\n## Further reading\n\n* [SWI-Prolog](http://www.swi-prolog.org/)\n"
        },
        {
          "name": "protocol-buffer-3.md",
          "type": "blob",
          "size": 7.40234375,
          "content": "---\ncategory: tool\nname: Protocol Buffers\nfilename: protocol-buffers.proto\ncontributors:\n    - [\"Shankar Shastri\", \"https://github.com/shankarshastri\"]\n---\n\nProtocol buffers are Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data – think XML, but smaller, faster, and simpler.\nYou define how you want your data to be structured once, then you can use special generated source code to easily write and read your structured data to and from a variety of data streams and using a variety of languages.\nProtocol Buffers are Schema Of Messages. They are language agnostic.\nThey can be converted to binary and converted back to message formats using the code generated by the protoc compiler for various languages.\n\n```protobuf\n/*\n* Language Syntax\n*/\n\n/*\n* Specifying Syntax Of Protocol Buffer Version\n* Specifying Which Protocol Buffer Version To Use\n* It can be usually proto3 or proto2\n*/\nsyntax = \"proto3\";\n\n/*\n* Declaring Message In Protocol Buffer:\n* As you can see, each field in the message definition has a unique number.\n* These field numbers are used to identify your fields in the message binary format,\n* and should not be changed once your message type is in use.\n* Note that field numbers in the range 1 through 15 take one byte to encode, including the field number and the field's type (you can find out more about this in Protocol Buffer Encoding).\n* Field numbers in the range 16 through 2047 take two bytes. So you should reserve the numbers 1 through 15 for very frequently occurring message elements.\n* Remember to leave some room for frequently occurring elements that might be added in the future.\n* The smallest field number you can specify is 1, and the largest is 2^29 - 1, or 536,870,911.\n* You also cannot use the numbers 19000 through 19999 (FieldDescriptor::kFirstReservedNumber through FieldDescriptor::kLastReservedNumber),\n* as they are reserved for the Protocol Buffers implementation - the protocol buffer compiler will complain if you use one of these reserved numbers in your .proto.\n* Similarly, you cannot use any previously reserved field numbers.\n*\n*/\n\n/*\nSyntax For Declaring Message:\n    message ${MessageName} {\n        ${Scalar Value Type} ${FieldName1} = ${Tag Number1};\n                .\n                .\n                .\n        ${Scalar Value Type} ${FieldNameN} = ${Tag NumberN};\n    }\n\nDefault Values Will be applied any case if the message doesn't contain a existing field defined\nin the message definition\n*/\n\nmessage MessageTypes {\n    /*\n    * Scalar Value Types\n    */\n    string stringType = 1; // A string must always contain UTF-8 encoded or 7-bit ASCII text. Default value = \"\"\n\n    // Number Types, Default Value = 0\n    int32 int32Type = 2; // Uses Variable Length Encoding. Inefficient For Negative Numbers, Instead Use sint32.\n    int64 int64Type = 3; // Uses Variable Length Encoding. Inefficient For Negative Numbers, Instead Use sint64.\n    uint32 uInt32Type = 4; // Uses Variable Length Encoding\n    uint64 uInt64Type = 5; // Uses Variable Length Encoding\n    sint32 sInt32Type = 6; // Uses Variable Length Encoding. They are efficient in encoding for negative numbers.\n                           // Use this instead of int32 for negative numbers\n    sint64 sInt64Type = 7; // Uses Variable Length Encoding. They are efficient in encoding for negative numbers.\n    // Use this instead of int64 for negative numbers.\n\n    fixed32 fixed32Type = 8; // Always four bytes. More efficient than uint32 if values are often greater than 2^28.\n    fixed64 fixed64Type = 9; // Always eight bytes. More efficient than uint64 if values are often greater than 2^56\n\n    sfixed32 sfixed32Type = 10; // Always four bytes.\n    sfixed64 sfixed64Type = 11; // Always Eight bytes.\n\n    bool boolType = 12; // Boolean Type. Default Value = false\n\n    bytes bytesType = 13; // May contain any arbitrary sequence of bytes. Default Value = Empty Bytes\n\n    double doubleType = 14;\n    float floatType = 15;\n\n    enum Week {\n        UNDEFINED = 0; // Tag 0 is always used as default in case of enum\n        SUNDAY = 1;\n        MONDAY = 2;\n        TUESDAY = 3;\n        WEDNESDAY = 4;\n        THURSDAY = 5;\n        FRIDAY = 6;\n        SATURDAY = 7;\n    }\n    Week wkDayType = 16;\n\n    /*\n    * Defining Collection Of Scalar Value Type\n    * Syntax: repeated ${ScalarType} ${name} = TagValue\n    */\n    repeated string listOfString = 17; // List[String]\n}\n\n/*\n* Defining Defined Message Types In Other Message Definition\n*/\nmessage Person {\n    string fname = 1;\n    string sname = 2;\n}\n\nmessage City {\n    Person p = 1;\n}\n\n/*\n* Nested Message Definitions\n*/\n\nmessage NestedMessages {\n    message FirstLevelNestedMessage {\n        string firstString = 1;\n        message SecondLevelNestedMessage {\n            string secondString = 2;\n        }\n    }\n    FirstLevelNestedMessage msg = 1;\n    FirstLevelNestedMessage.SecondLevelNestedMessage msg2 = 2;\n}\n\n/*\n* Importing Message From A File\n*/\n\n// one.proto\n// message One {\n//     string oneMsg = 1;\n// }\n\n// two.proto\n//  import \"myproject/one.proto\"\n//  message Two {\n//       string twoMsg = 2;\n//  }\n\n\n/*\n* Advanced Topics\n*/\n\n/*\n* Handling Message Type Changes:\n* Never Change/Use The TagNumber Of A Message Field Which Was Removed\n* We should use reserved in case of message definition update.\n* (https://developers.google.com/protocol-buffers/docs/proto3#updating)\n*/\n\n/*\n* Reserved Fields\n* It's used in case if we need to add/remove new fields into message.\n* Using Reserved Backward and Forward Compatibility Of Messages can be achieved\n*/\n\n\nmessage ReservedMessage {\n    reserved 0, 1, 2, 3 to 10; // Set Of Tag Numbers Which Can't be reused.\n    reserved \"firstMsg\", \"secondMsg\", \"thirdMsg\"; // Set Of Labels Which Can't Be reused.\n}\n\n/*\n* Any\n* The Any message type lets you use messages as embedded types without having their .proto definition.\n* An Any contains an arbitrary serialized message as bytes,\n* along with a URL that acts as a globally unique identifier for and resolves to that message's type.\n* For Any to work we need to import it as shown below.\n*/\n/*\n    import \"google/protobuf/any.proto\";\n    message AnySampleMessage {\n        repeated google.protobuf.Any.details = 1;\n    }\n\n*/\n\n\n/*\n*  OneOf\n* There are cases, wherein only one field at-most might be present as part of the message.\n* Note: OneOf messages can't be repeated.\n*/\n\nmessage OneOfMessage {\n    oneof msg {\n        string fname = 1;\n        string sname = 2;\n    };\n}\n\n/*\n* Maps\n* Map fields cannot be repeated.\n* Ordering Of A Map Is Not Guaranteed.\n*/\n\nmessage MessageWithMaps {\n    map<string, string> mapOfMessages = 1;\n}\n\n\n/*\n* Packages\n* Used for preventing name clashes between protocol message types\n* Syntax:\n    package ${packageName};\n\n    To Access the package;\n    ${packageName}.${messageName} = ${tagNumber};\n*/\n\n/*\n* Services\n* Message Types Defined For Using In RPC system.\n*  When protoc compiler generates for various languages it generates stub methods for the services.\n*/\n\nmessage SearchRequest {\n    string queryString = 1;\n}\n\nmessage SearchResponse {\n    string queryResponse = 1;\n}\nservice SearchService {\n    rpc Search (SearchRequest) returns (SearchResponse);\n}\n```\n\n## Generating Classes In Various Languages For Protocol Buffers\n\n```shell\nprotoc --proto_path=IMPORT_PATH --cpp_out=DST_DIR --java_out=DST_DIR --python_out=DST_DIR --go_out=DST_DIR --ruby_out=DST_DIR --objc_out=DST_DIR --csharp_out=DST_DIR path/to/file.proto\n```\n\n## References\n\n[Google Protocol Buffers](https://developers.google.com/protocol-buffers/)\n"
        },
        {
          "name": "pt-br",
          "type": "tree",
          "content": null
        },
        {
          "name": "pt-pt",
          "type": "tree",
          "content": null
        },
        {
          "name": "pug.md",
          "type": "blob",
          "size": 3.5927734375,
          "content": "---\nname: Pug\ncontributors:\n  - [\"Michael Warner\", \"https://github.com/MichaelJGW\"]\nfilename: index.pug\n---\n\nPug is a language that compiles to HTML. It has a cleaner syntax\nwith additional features like if statements and loops. It can also be used\nas a server-side templating language for server languages like Node.js.\n\n```pug\n//- Single Line Comment\n\n//- Multi Line\n    Comment\n\n//- ---TAGS---\n//- Basic\ndiv\n//- <div></div>\nh1\n//- <h1></h1>\nmy-customTag\n//- <my-customTag></my-customTag>\n\n//- Sibling\ndiv\ndiv\n//- <div></div>\n    <div></div>\n\n//- Child\ndiv\n  div\n//- <div>\n      <div></div>\n    </div>\n\n//- Text\nh1 Hello there\n//- <h1>Hello there</h1>\n\n//- Multi Line Text\ndiv.\n  Hello\n  There\n//- <div>\n      Hello\n      There\n    </div>\n\n//- ---ATTRIBUTES---\ndiv(class=\"my-class\" id=\"my-id\" my-custom-attrs=\"data\" enabled)\n//- <div class=\"my-class\" id=\"my-id\" my-custom-attrs=\"data\" enabled></div>\n\n//- Short Hand\nspan.my-class\n//- <span class=\"my-class\"></span>\n.my-class\n//- <div class=\"my-class\"></div>\ndiv#my-id\n//- <div id=\"my-id\"></div>\ndiv#my-id.my-class\n//- <div class=\"my-class\" id=\"my-id\"></div>\n\n\n//- ---JS---\n- const lang = \"pug\";\n\n//- Multi Line JS\n-\n  const lang = \"pug\";\n  const awesome = true;\n\n//- JS Classes\n- const myClass = ['class1', 'class2', 'class3']\ndiv(class=myClass)\n//- <div class=\"class1 class2 class3\"></div>\n\n//- JS Styles\n- const myStyles = {'color':'white', 'background-color':'blue'}\ndiv(style=myStyles)\n//- <div style=\"color:white;background-color:blue;\"></div>\n\n//- JS Attributes\n- const myAttributes = {\"src\": \"photo.png\", \"alt\": \"My Photo\"}\nimg&attributes(myAttributes)\n//- <img src=\"photo.png\" alt=\"My Photo\">\n- let disabled = false\ninput(type=\"text\" disabled=disabled)\n//- <input type=\"text\">\n- disabled = true\ninput(type=\"text\" disabled=disabled)\n//- <input type=\"text\" disabled>\n\n//- JS Templating\n- const name = \"Bob\";\nh1 Hi #{name}\nh1= name\n//- <h1>Hi Bob</h1>\n//- <h1>Bob</h1>\n\n//- ---LOOPS---\n\n//- 'each' and 'for' do the same thing we will use 'each' only.\n\neach value, i in [1,2,3]\n  p=value\n//-\n  <p>1</p>\n  <p>2</p>\n  <p>3</p>\n\neach value, index in [1,2,3]\n  p=value + '-' + index\n//-\n  <p>1-0</p>\n  <p>2-1</p>\n  <p>3-2</p>\n\neach value in []\n  p=value\n//-\n\neach value in []\n  p=value\nelse\n  p No Values are here\n\n//- <p>No Values are here</p>\n\n//- ---CONDITIONALS---\n\n- const number = 5\nif number < 5\n  p number is less then 5\nelse if number > 5\n  p number is greater then 5\nelse\n  p number is 5\n//- <p>number is 5</p>\n\n- const orderStatus = \"Pending\";\ncase orderStatus\n  when \"Pending\"\n    p.warn Your order is pending\n  when \"Completed\"\n    p.success Order is Completed.\n  when -1\n    p.error Error Occurred\n  default\n    p No Order Record Found\n//- <p class=\"warn\">Your order is pending</p>\n\n//- --INCLUDE--\n//- File path -> \"includes/nav.pug\"\nh1 Company Name\nnav\n  a(href=\"index.html\") Home\n  a(href=\"about.html\") About Us\n\n//- File path -> \"index.pug\"\nhtml\n  body\n    include includes/nav.pug\n//-\n  <html>\n    <body>\n      <h1>Company Name</h1>\n      <nav><a href=\"index.html\">Home</a><a href=\"about.html\">About Us</a></nav>\n    </body>\n  </html>\n\n//- Importing JS and CSS\nscript\n  include scripts/index.js\nstyle\n  include styles/theme.css\n\n//- ---MIXIN---\nmixin basic\n  div Hello\n+basic\n//- <div>Hello</div>\n\nmixin comment(name, comment)\n  div\n    span.comment-name= name\n    div.comment-text= comment\n+comment(\"Bob\", \"This is Awesome\")\n//-\n  <div>\n    <span class=\"comment-name\">Bob</span>\n    <div class=\"comment-text\">This is Awesome</div>\n  </div>\n```\n\n### Additional Resources\n\n- [The site](https://pugjs.org/)\n- [The docs](https://pugjs.org/api/getting-started.html)\n- [GitHub repo](https://github.com/pugjs/pug)\n"
        },
        {
          "name": "purescript.md",
          "type": "blob",
          "size": 5.54296875,
          "content": "---\nname: PureScript\nfilename: purescript.purs\ncontributors:\n    - [\"Fredrik Dyrkell\", \"http://www.lexicallyscoped.com\"]\n    - [\"Thimoteus\", \"https://github.com/Thimoteus\"]\n---\n\nPureScript is a small strongly, statically typed language compiling to JavaScript.\n\n* Learn more at [https://www.purescript.org/](https://www.purescript.org/)\n* Documentation: [https://pursuit.purescript.org/](https://pursuit.purescript.org/)\n* Book: Purescript by Example, [https://book.purescript.org/](https://book.purescript.org/)\n\nAll the noncommented lines of code can be run in the PSCi REPL, though some\nwill require \"paste\" mode (`:paste` followed by multiple lines, terminated by\n^D).\n\n```haskell\n--\n-- 1. Primitive datatypes that corresponds to their JavaScript\n-- equivalents at runtime.\n\nimport Prelude\n-- Numbers\n1.0 + 7.2*5.5 :: Number -- 40.6\n-- Ints\n1 + 2*5 :: Int -- 11\n-- Types are inferred, so the following works fine\n9.0/2.5 + 4.4 -- 8.0\n-- But Ints and Numbers don't mix, so the following won't\n5/2 + 2.5 -- Expression 2.5 does not have type Int\n-- Hexadecimal literals\n0xff + 1 -- 256\n-- Unary negation\n6 * -3 -- -18\n6 * negate 3 -- -18\n-- Modulus, from purescript-math (Math)\n3.0 % 2.0 -- 1.0\n4.0 % 2.0 -- 0.0\n-- Inspect the type of an expression in psci\n:t 9.5/2.5 + 4.4 -- Number\n\n-- Booleans\ntrue :: Boolean -- true\nfalse :: Boolean -- false\n-- Negation\nnot true -- false\n23 == 23 -- true\n1 /= 4 -- true\n1 >= 4 -- false\n-- Comparisons < <= > >=\n-- are defined in terms of compare\ncompare 1 2 -- LT\ncompare 2 2 -- EQ\ncompare 3 2 -- GT\n-- Conjunction and Disjunction\ntrue && (9 >= 19 || 1 < 2) -- true\n\n-- Strings\n\"Hello\" :: String -- \"Hello\"\n-- Multiline string without newlines, to run in PSCi use \"paste\" mode.\n\"Hello\\\n\\orld\" -- \"Helloworld\"\n-- Multiline string with newlines\n\"\"\"Hello\nworld\"\"\" -- \"Hello\\nworld\"\n-- Concatenate\n\"such \" <> \"amaze\" -- \"such amaze\"\n\n--\n-- 2. Arrays are JavaScript arrays, but must be homogeneous\n\n[1,1,2,3,5,8] :: Array Int -- [1,1,2,3,5,8]\n[1.2,2.0,3.14] :: Array Number -- [1.2,2.0,3.14]\n[true, true, false] :: Array Boolean -- [true,true,false]\n-- [1,2, true, \"false\"] won't work\n-- `Cannot unify Int with Boolean`\n\n-- Requires purescript-arrays (Data.Array)\n-- Cons (prepend)\n1 : [2,4,3] -- [1,2,4,3]\n\n-- and purescript-maybe (Data.Maybe)\n-- Safe access return Maybe a\nhead [1,2,3] -- (Just 1)\ntail [3,2,1] -- (Just [2,1])\ninit [1,2,3] -- (Just [1,2])\nlast [3,2,1] -- (Just 1)\n-- Array access - indexing\n[3,4,5,6,7] !! 2 -- (Just 5)\n-- Range\n1..5 -- [1,2,3,4,5]\nlength [2,2,2] -- 3\ndrop 3 [5,4,3,2,1] -- [2,1]\ntake 3 [5,4,3,2,1] -- [5,4,3]\nappend [1,2,3] [4,5,6] -- [1,2,3,4,5,6]\n\n--\n-- 3. Records are JavaScript objects, with zero or more fields, which\n-- can have different types.\nbook = {title: \"Foucault's pendulum\", author: \"Umberto Eco\"}\n-- Access properties\nbook.title -- \"Foucault's pendulum\"\n\ngetTitle b = b.title\n-- Works on all records with a title (but doesn't require any other field)\ngetTitle book -- \"Foucault's pendulum\"\ngetTitle {title: \"Weekend in Monaco\", artist: \"The Rippingtons\"} -- \"Weekend in Monaco\"\n-- Can use underscores as shorthand\n_.title book -- \"Foucault's pendulum\"\n-- Update a record\nchangeTitle b t = b {title = t}\ngetTitle (changeTitle book \"Ill nome della rosa\") -- \"Ill nome della rosa\"\n\n--\n-- 4. Functions\n-- In PSCi's paste mode\nsumOfSquares :: Int -> Int -> Int\nsumOfSquares x y = x*x + y*y\nsumOfSquares 3 4 -- 25\n\nmyMod x y = x % y\nmyMod 3.0 2.0 -- 1.0\n-- Infix application of function\n3 `mod` 2 -- 1\n\n-- function application has higher precedence than all other\n-- operators\nsumOfSquares 3 4 * sumOfSquares 4 5 -- 1025\n\n-- Conditional\nabs' n = if n>=0 then n else -n\nabs' (-3) -- 3\n\n-- Guarded equations\n-- In PSCi's paste mode\nabs'' n | n >= 0    = n\n        | otherwise = -n\n\n-- Pattern matching\n\n-- Note the type signature, input is a list of numbers. The pattern matching\n-- destructures and binds the list into parts.\n-- Requires purescript-lists (Data.List) and purescript-maybe (Data.Maybe)\nfirst :: forall a. List a -> Maybe a\nfirst (x : _) = Just x\nfirst Nil = Nothing\nfirst (fromFoldable [3,4,5]) -- (Just 3)\n\nsecond :: forall a. List a -> Maybe a\nsecond Nil = Nothing\nsecond (_ : Nil) = Nothing\nsecond (_ : (y : _)) = Just y\nsecond (fromFoldable [3,4,5]) -- (Just 4)\n\n-- Complementing patterns to match\n-- Good ol' Fibonacci\nfib 1 = 1\nfib 2 = 2\nfib x = fib (x-1) + fib (x-2)\nfib 10 -- 89\n\n-- Use underscore to match any, where you don't care about the binding name\nisZero 0 = true\nisZero _ = false\nisZero 9 -- false\n\n-- Pattern matching on records\necoTitle {author: \"Umberto Eco\", title: t} = Just t\necoTitle _ = Nothing\n\necoTitle {title: \"Foucault's pendulum\", author: \"Umberto Eco\"} -- (Just \"Foucault's pendulum\")\necoTitle {title: \"The Quantum Thief\", author: \"Hannu Rajaniemi\"} -- Nothing\n-- ecoTitle requires both field to type check:\necoTitle {title: \"The Quantum Thief\"} -- Object lacks required property \"author\"\n\n-- Lambda expressions\n(\\x -> x*x) 3 -- 9\n(\\x y -> x*x + y*y) 4 5 -- 41\nsqr = \\x -> x*x\n\n-- Currying\nmyAdd x y = x + y -- is equivalent with\nmyAdd' = \\x -> \\y -> x + y\nadd3 = myAdd 3\n:t add3 -- Int -> Int\n\n-- Forward and backward function composition\n-- drop 3 followed by taking 5\n(drop 3 >>> take 5) (1..20) -- [4,5,6,7,8]\n-- take 5 followed by dropping 3\n(drop 3 <<< take 5) (1..20) -- [4,5]\n\n-- Operations using higher order functions\neven x = x `mod` 2 == 0\nfilter even (1..10) -- [2,4,6,8,10]\nmap (\\x -> x + 11) (1..5) -- [12,13,14,15,16]\n\n-- Requires purescript-foldable-traversable (Data.Foldable)\n\nfoldr (+) 0 (1..10) -- 55\nsum (1..10) -- 55\nproduct (1..10) -- 3628800\n\n-- Testing with predicate\nany even [1,2,3] -- true\nall even [1,2,3] -- false\n```\n"
        },
        {
          "name": "pyqt.md",
          "type": "blob",
          "size": 2.41796875,
          "content": "---\ncategory: framework\nname: PyQt\nfilename: learnpyqt.py\ncontributors:\n    - [\"Nathan Hughes\", \"https://github.com/sirsharpest\"]\n---\n\n**Qt** is a widely-known framework for developing cross-platform software that can be run on various software and hardware platforms with little or no change in the code, while having the power and speed of native applications. Though **Qt** was originally written in *C++*.\n\n\nThis is an adaption on the C++ intro to QT by [Aleksey Kholovchuk](https://github.com/vortexxx192\n), some of the code examples should result in the same functionality\nthis version just having been done using pyqt!\n\n```python\nimport sys\nfrom PyQt4 import QtGui\n\ndef window():\n\t# Create an application object\n    app = QtGui.QApplication(sys.argv)\n\t# Create a widget where our label will be placed in\n    w = QtGui.QWidget()\n\t# Add a label to the widget\n    b = QtGui.QLabel(w)\n\t# Set some text for the label\n    b.setText(\"Hello World!\")\n\t# Give some size and placement information\n    w.setGeometry(100, 100, 200, 50)\n    b.move(50, 20)\n\t# Give our window a nice title\n    w.setWindowTitle(\"PyQt\")\n\t# Have everything display\n    w.show()\n\t# Execute what we have asked for, once all setup\n    sys.exit(app.exec_())\n\nif __name__ == '__main__':\n    window()\n```\n\nIn order to get some of the more advanced features in **pyqt** we need to start looking at building additional elements.\nHere we show how to introduce a dialog popup box, useful for asking the user to confirm a decision or to provide information.\n\n```python\nimport sys\nfrom PyQt4.QtGui import *\nfrom PyQt4.QtCore import *\n\n\ndef window():\n    app = QApplication(sys.argv)\n    w = QWidget()\n    # Create a button and attach to widget w\n    b = QPushButton(w)\n    b.setText(\"Press me\")\n    b.move(50, 50)\n    # Tell b to call this function when clicked\n    # notice the lack of \"()\" on the function call\n    b.clicked.connect(showdialog)\n    w.setWindowTitle(\"PyQt Dialog\")\n    w.show()\n    sys.exit(app.exec_())\n\n# This function should create a dialog window with a button\n# that waits to be clicked and then exits the program\ndef showdialog():\n    d = QDialog()\n    b1 = QPushButton(\"ok\", d)\n    b1.move(50, 50)\n    d.setWindowTitle(\"Dialog\")\n    # This modality tells the popup to block the parent whilst it's active\n    d.setWindowModality(Qt.ApplicationModal)\n    # On click I'd like the entire process to end\n    b1.clicked.connect(sys.exit)\n    d.exec_()\n\nif __name__ == '__main__':\n    window()\n```\n"
        },
        {
          "name": "python.md",
          "type": "blob",
          "size": 34.6005859375,
          "content": "---\nname: Python\ncontributors:\n    - [\"Louie Dinh\", \"http://pythonpracticeprojects.com\"]\n    - [\"Steven Basart\", \"http://github.com/xksteven\"]\n    - [\"Andre Polykanine\", \"https://github.com/Oire\"]\n    - [\"Zachary Ferguson\", \"http://github.com/zfergus2\"]\n    - [\"evuez\", \"http://github.com/evuez\"]\n    - [\"Rommel Martinez\", \"https://ebzzry.io\"]\n    - [\"Roberto Fernandez Diaz\", \"https://github.com/robertofd1995\"]\n    - [\"caminsha\", \"https://github.com/caminsha\"]\n    - [\"Stanislav Modrak\", \"https://stanislav.gq\"]\n    - [\"John Paul Wohlscheid\", \"https://gitpi.us\"]\nfilename: learnpython.py\n---\n\nPython was created by Guido van Rossum in the early 90s. It is now one of the\nmost popular languages in existence. I fell in love with Python for its\nsyntactic clarity. It's basically executable pseudocode.\n\n```python\n# Single line comments start with a number symbol.\n\n\"\"\" Multiline strings can be written\n    using three \"s, and are often used\n    as documentation.\n\"\"\"\n\n####################################################\n## 1. Primitive Datatypes and Operators\n####################################################\n\n# You have numbers\n3  # => 3\n\n# Math is what you would expect\n1 + 1   # => 2\n8 - 1   # => 7\n10 * 2  # => 20\n35 / 5  # => 7.0\n\n# Floor division rounds towards negative infinity\n5 // 3       # => 1\n-5 // 3      # => -2\n5.0 // 3.0   # => 1.0  # works on floats too\n-5.0 // 3.0  # => -2.0\n\n# The result of division is always a float\n10.0 / 3  # => 3.3333333333333335\n\n# Modulo operation\n7 % 3   # => 1\n# i % j have the same sign as j, unlike C\n-7 % 3  # => 2\n\n# Exponentiation (x**y, x to the yth power)\n2**3  # => 8\n\n# Enforce precedence with parentheses\n1 + 3 * 2    # => 7\n(1 + 3) * 2  # => 8\n\n# Boolean values are primitives (Note: the capitalization)\nTrue   # => True\nFalse  # => False\n\n# negate with not\nnot True   # => False\nnot False  # => True\n\n# Boolean Operators\n# Note \"and\" and \"or\" are case-sensitive\nTrue and False  # => False\nFalse or True   # => True\n\n# True and False are actually 1 and 0 but with different keywords\nTrue + True  # => 2\nTrue * 8     # => 8\nFalse - 5    # => -5\n\n# Comparison operators look at the numerical value of True and False\n0 == False   # => True\n2 > True     # => True\n2 == True    # => False\n-5 != False  # => True\n\n# None, 0, and empty strings/lists/dicts/tuples/sets all evaluate to False.\n# All other values are True\nbool(0)      # => False\nbool(\"\")     # => False\nbool([])     # => False\nbool({})     # => False\nbool(())     # => False\nbool(set())  # => False\nbool(4)      # => True\nbool(-6)     # => True\n\n# Using boolean logical operators on ints casts them to booleans for evaluation,\n# but their non-cast value is returned. Don't mix up with bool(ints) and bitwise\n# and/or (&,|)\nbool(0)   # => False\nbool(2)   # => True\n0 and 2   # => 0\nbool(-5)  # => True\nbool(2)   # => True\n-5 or 0   # => -5\n\n# Equality is ==\n1 == 1  # => True\n2 == 1  # => False\n\n# Inequality is !=\n1 != 1  # => False\n2 != 1  # => True\n\n# More comparisons\n1 < 10  # => True\n1 > 10  # => False\n2 <= 2  # => True\n2 >= 2  # => True\n\n# Seeing whether a value is in a range\n1 < 2 and 2 < 3  # => True\n2 < 3 and 3 < 2  # => False\n# Chaining makes this look nicer\n1 < 2 < 3  # => True\n2 < 3 < 2  # => False\n\n# (is vs. ==) is checks if two variables refer to the same object, but == checks\n# if the objects pointed to have the same values.\na = [1, 2, 3, 4]  # Point a at a new list, [1, 2, 3, 4]\nb = a             # Point b at what a is pointing to\nb is a            # => True, a and b refer to the same object\nb == a            # => True, a's and b's objects are equal\nb = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]\nb is a            # => False, a and b do not refer to the same object\nb == a            # => True, a's and b's objects are equal\n\n# Strings are created with \" or '\n\"This is a string.\"\n'This is also a string.'\n\n# Strings can be added too\n\"Hello \" + \"world!\"  # => \"Hello world!\"\n# String literals (but not variables) can be concatenated without using '+'\n\"Hello \" \"world!\"    # => \"Hello world!\"\n\n# A string can be treated like a list of characters\n\"Hello world!\"[0]  # => 'H'\n\n# You can find the length of a string\nlen(\"This is a string\")  # => 16\n\n# Since Python 3.6, you can use f-strings or formatted string literals.\nname = \"Reiko\"\nf\"She said her name is {name}.\"  # => \"She said her name is Reiko\"\n# Any valid Python expression inside these braces is returned to the string.\nf\"{name} is {len(name)} characters long.\"  # => \"Reiko is 5 characters long.\"\n\n# None is an object\nNone  # => None\n\n# Don't use the equality \"==\" symbol to compare objects to None\n# Use \"is\" instead. This checks for equality of object identity.\n\"etc\" is None  # => False\nNone is None   # => True\n\n####################################################\n## 2. Variables and Collections\n####################################################\n\n# Python has a print function\nprint(\"I'm Python. Nice to meet you!\")  # => I'm Python. Nice to meet you!\n\n# By default the print function also prints out a newline at the end.\n# Use the optional argument end to change the end string.\nprint(\"Hello, World\", end=\"!\")  # => Hello, World!\n\n# Simple way to get input data from console\ninput_string_var = input(\"Enter some data: \")  # Returns the data as a string\n\n# There are no declarations, only assignments.\n# Convention in naming variables is snake_case style\nsome_var = 5\nsome_var  # => 5\n\n# Accessing a previously unassigned variable is an exception.\n# See Control Flow to learn more about exception handling.\nsome_unknown_var  # Raises a NameError\n\n# if can be used as an expression\n# Equivalent of C's '?:' ternary operator\n\"yay!\" if 0 > 1 else \"nay!\"  # => \"nay!\"\n\n# Lists store sequences\nli = []\n# You can start with a prefilled list\nother_li = [4, 5, 6]\n\n# Add stuff to the end of a list with append\nli.append(1)    # li is now [1]\nli.append(2)    # li is now [1, 2]\nli.append(4)    # li is now [1, 2, 4]\nli.append(3)    # li is now [1, 2, 4, 3]\n# Remove from the end with pop\nli.pop()        # => 3 and li is now [1, 2, 4]\n# Let's put it back\nli.append(3)    # li is now [1, 2, 4, 3] again.\n\n# Access a list like you would any array\nli[0]   # => 1\n# Look at the last element\nli[-1]  # => 3\n\n# Looking out of bounds is an IndexError\nli[4]  # Raises an IndexError\n\n# You can look at ranges with slice syntax.\n# The start index is included, the end index is not\n# (It's a closed/open range for you mathy types.)\nli[1:3]   # Return list from index 1 to 3 => [2, 4]\nli[2:]    # Return list starting from index 2 => [4, 3]\nli[:3]    # Return list from beginning until index 3  => [1, 2, 4]\nli[::2]   # Return list selecting elements with a step size of 2 => [1, 4]\nli[::-1]  # Return list in reverse order => [3, 4, 2, 1]\n# Use any combination of these to make advanced slices\n# li[start:end:step]\n\n# Make a one layer deep copy using slices\nli2 = li[:]  # => li2 = [1, 2, 4, 3] but (li2 is li) will result in false.\n\n# Remove arbitrary elements from a list with \"del\"\ndel li[2]  # li is now [1, 2, 3]\n\n# Remove first occurrence of a value\nli.remove(2)  # li is now [1, 3]\nli.remove(2)  # Raises a ValueError as 2 is not in the list\n\n# Insert an element at a specific index\nli.insert(1, 2)  # li is now [1, 2, 3] again\n\n# Get the index of the first item found matching the argument\nli.index(2)  # => 1\nli.index(4)  # Raises a ValueError as 4 is not in the list\n\n# You can add lists\n# Note: values for li and for other_li are not modified.\nli + other_li  # => [1, 2, 3, 4, 5, 6]\n\n# Concatenate lists with \"extend()\"\nli.extend(other_li)  # Now li is [1, 2, 3, 4, 5, 6]\n\n# Check for existence in a list with \"in\"\n1 in li  # => True\n\n# Examine the length with \"len()\"\nlen(li)  # => 6\n\n\n# Tuples are like lists but are immutable.\ntup = (1, 2, 3)\ntup[0]      # => 1\ntup[0] = 3  # Raises a TypeError\n\n# Note that a tuple of length one has to have a comma after the last element but\n# tuples of other lengths, even zero, do not.\ntype((1))   # => <class 'int'>\ntype((1,))  # => <class 'tuple'>\ntype(())    # => <class 'tuple'>\n\n# You can do most of the list operations on tuples too\nlen(tup)         # => 3\ntup + (4, 5, 6)  # => (1, 2, 3, 4, 5, 6)\ntup[:2]          # => (1, 2)\n2 in tup         # => True\n\n# You can unpack tuples (or lists) into variables\na, b, c = (1, 2, 3)  # a is now 1, b is now 2 and c is now 3\n# You can also do extended unpacking\na, *b, c = (1, 2, 3, 4)  # a is now 1, b is now [2, 3] and c is now 4\n# Tuples are created by default if you leave out the parentheses\nd, e, f = 4, 5, 6  # tuple 4, 5, 6 is unpacked into variables d, e and f\n# respectively such that d = 4, e = 5 and f = 6\n# Now look how easy it is to swap two values\ne, d = d, e  # d is now 5 and e is now 4\n\n\n# Dictionaries store mappings from keys to values\nempty_dict = {}\n# Here is a prefilled dictionary\nfilled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\n\n# Note keys for dictionaries have to be immutable types. This is to ensure that\n# the key can be converted to a constant hash value for quick look-ups.\n# Immutable types include ints, floats, strings, tuples.\ninvalid_dict = {[1,2,3]: \"123\"}  # => Yield a TypeError: unhashable type: 'list'\nvalid_dict = {(1,2,3):[1,2,3]}   # Values can be of any type, however.\n\n# Look up values with []\nfilled_dict[\"one\"]  # => 1\n\n# Get all keys as an iterable with \"keys()\". We need to wrap the call in list()\n# to turn it into a list. We'll talk about those later.  Note - for Python\n# versions <3.7, dictionary key ordering is not guaranteed. Your results might\n# not match the example below exactly. However, as of Python 3.7, dictionary\n# items maintain the order at which they are inserted into the dictionary.\nlist(filled_dict.keys())  # => [\"three\", \"two\", \"one\"] in Python <3.7\nlist(filled_dict.keys())  # => [\"one\", \"two\", \"three\"] in Python 3.7+\n\n\n# Get all values as an iterable with \"values()\". Once again we need to wrap it\n# in list() to get it out of the iterable. Note - Same as above regarding key\n# ordering.\nlist(filled_dict.values())  # => [3, 2, 1]  in Python <3.7\nlist(filled_dict.values())  # => [1, 2, 3] in Python 3.7+\n\n# Check for existence of keys in a dictionary with \"in\"\n\"one\" in filled_dict  # => True\n1 in filled_dict      # => False\n\n# Looking up a non-existing key is a KeyError\nfilled_dict[\"four\"]  # KeyError\n\n# Use \"get()\" method to avoid the KeyError\nfilled_dict.get(\"one\")      # => 1\nfilled_dict.get(\"four\")     # => None\n# The get method supports a default argument when the value is missing\nfilled_dict.get(\"one\", 4)   # => 1\nfilled_dict.get(\"four\", 4)  # => 4\n\n# \"setdefault()\" inserts into a dictionary only if the given key isn't present\nfilled_dict.setdefault(\"five\", 5)  # filled_dict[\"five\"] is set to 5\nfilled_dict.setdefault(\"five\", 6)  # filled_dict[\"five\"] is still 5\n\n# Adding to a dictionary\nfilled_dict.update({\"four\":4})  # => {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4}\nfilled_dict[\"four\"] = 4         # another way to add to dict\n\n# Remove keys from a dictionary with del\ndel filled_dict[\"one\"]  # Removes the key \"one\" from filled dict\n\n# From Python 3.5 you can also use the additional unpacking options\n{\"a\": 1, **{\"b\": 2}}  # => {'a': 1, 'b': 2}\n{\"a\": 1, **{\"a\": 2}}  # => {'a': 2}\n\n\n# Sets store ... well sets\nempty_set = set()\n# Initialize a set with a bunch of values.\nsome_set = {1, 1, 2, 2, 3, 4}  # some_set is now {1, 2, 3, 4}\n\n# Similar to keys of a dictionary, elements of a set have to be immutable.\ninvalid_set = {[1], 1}  # => Raises a TypeError: unhashable type: 'list'\nvalid_set = {(1,), 1}\n\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n\n# Do set union with |\nfilled_set | other_set  # => {1, 2, 3, 4, 5, 6}\n\n# Do set difference with -\n{1, 2, 3, 4} - {2, 3, 5}  # => {1, 4}\n\n# Do set symmetric difference with ^\n{1, 2, 3, 4} ^ {2, 3, 5}  # => {1, 4, 5}\n\n# Check if set on the left is a superset of set on the right\n{1, 2} >= {1, 2, 3}  # => False\n\n# Check if set on the left is a subset of set on the right\n{1, 2} <= {1, 2, 3}  # => True\n\n# Check for existence in a set with in\n2 in filled_set   # => True\n10 in filled_set  # => False\n\n# Make a one layer deep copy\nfilled_set = some_set.copy()  # filled_set is {1, 2, 3, 4, 5}\nfilled_set is some_set        # => False\n\n\n####################################################\n## 3. Control Flow and Iterables\n####################################################\n\n# Let's just make a variable\nsome_var = 5\n\n# Here is an if statement. Indentation is significant in Python!\n# Convention is to use four spaces, not tabs.\n# This prints \"some_var is smaller than 10\"\nif some_var > 10:\n    print(\"some_var is totally bigger than 10.\")\nelif some_var < 10:    # This elif clause is optional.\n    print(\"some_var is smaller than 10.\")\nelse:                  # This is optional too.\n    print(\"some_var is indeed 10.\")\n\n\n\"\"\"\nFor loops iterate over lists\nprints:\n    dog is a mammal\n    cat is a mammal\n    mouse is a mammal\n\"\"\"\nfor animal in [\"dog\", \"cat\", \"mouse\"]:\n    # You can use format() to interpolate formatted strings\n    print(\"{} is a mammal\".format(animal))\n\n\"\"\"\n\"range(number)\" returns an iterable of numbers\nfrom zero up to (but excluding) the given number\nprints:\n    0\n    1\n    2\n    3\n\"\"\"\nfor i in range(4):\n    print(i)\n\n\"\"\"\n\"range(lower, upper)\" returns an iterable of numbers\nfrom the lower number to the upper number\nprints:\n    4\n    5\n    6\n    7\n\"\"\"\nfor i in range(4, 8):\n    print(i)\n\n\"\"\"\n\"range(lower, upper, step)\" returns an iterable of numbers\nfrom the lower number to the upper number, while incrementing\nby step. If step is not indicated, the default value is 1.\nprints:\n    4\n    6\n\"\"\"\nfor i in range(4, 8, 2):\n    print(i)\n\n\"\"\"\nLoop over a list to retrieve both the index and the value of each list item:\n    0 dog\n    1 cat\n    2 mouse\n\"\"\"\nanimals = [\"dog\", \"cat\", \"mouse\"]\nfor i, value in enumerate(animals):\n    print(i, value)\n\n\"\"\"\nWhile loops go until a condition is no longer met.\nprints:\n    0\n    1\n    2\n    3\n\"\"\"\nx = 0\nwhile x < 4:\n    print(x)\n    x += 1  # Shorthand for x = x + 1\n\n# Handle exceptions with a try/except block\ntry:\n    # Use \"raise\" to raise an error\n    raise IndexError(\"This is an index error\")\nexcept IndexError as e:\n    pass                 # Refrain from this, provide a recovery (next example).\nexcept (TypeError, NameError):\n    pass                 # Multiple exceptions can be processed jointly.\nelse:                    # Optional clause to the try/except block. Must follow\n                         # all except blocks.\n    print(\"All good!\")   # Runs only if the code in try raises no exceptions\nfinally:                 # Execute under all circumstances\n    print(\"We can clean up resources here\")\n\n# Instead of try/finally to cleanup resources you can use a with statement\nwith open(\"myfile.txt\") as f:\n    for line in f:\n        print(line)\n\n# Writing to a file\ncontents = {\"aa\": 12, \"bb\": 21}\nwith open(\"myfile1.txt\", \"w\") as file:\n    file.write(str(contents))        # writes a string to a file\n\nimport json\nwith open(\"myfile2.txt\", \"w\") as file:\n    file.write(json.dumps(contents))  # writes an object to a file\n\n# Reading from a file\nwith open(\"myfile1.txt\") as file:\n    contents = file.read()           # reads a string from a file\nprint(contents)\n# print: {\"aa\": 12, \"bb\": 21}\n\nwith open(\"myfile2.txt\", \"r\") as file:\n    contents = json.load(file)       # reads a json object from a file\nprint(contents)\n# print: {\"aa\": 12, \"bb\": 21}\n\n\n# Python offers a fundamental abstraction called the Iterable.\n# An iterable is an object that can be treated as a sequence.\n# The object returned by the range function, is an iterable.\n\nfilled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\nour_iterable = filled_dict.keys()\nprint(our_iterable)  # => dict_keys(['one', 'two', 'three']). This is an object\n                     # that implements our Iterable interface.\n\n# We can loop over it.\nfor i in our_iterable:\n    print(i)  # Prints one, two, three\n\n# However we cannot address elements by index.\nour_iterable[1]  # Raises a TypeError\n\n# An iterable is an object that knows how to create an iterator.\nour_iterator = iter(our_iterable)\n\n# Our iterator is an object that can remember the state as we traverse through\n# it. We get the next object with \"next()\".\nnext(our_iterator)  # => \"one\"\n\n# It maintains state as we iterate.\nnext(our_iterator)  # => \"two\"\nnext(our_iterator)  # => \"three\"\n\n# After the iterator has returned all of its data, it raises a\n# StopIteration exception\nnext(our_iterator)  # Raises StopIteration\n\n# We can also loop over it, in fact, \"for\" does this implicitly!\nour_iterator = iter(our_iterable)\nfor i in our_iterator:\n    print(i)  # Prints one, two, three\n\n# You can grab all the elements of an iterable or iterator by call of list().\nlist(our_iterable)  # => Returns [\"one\", \"two\", \"three\"]\nlist(our_iterator)  # => Returns [] because state is saved\n\n\n####################################################\n## 4. Functions\n####################################################\n\n# Use \"def\" to create new functions\ndef add(x, y):\n    print(\"x is {} and y is {}\".format(x, y))\n    return x + y  # Return values with a return statement\n\n# Calling functions with parameters\nadd(5, 6)  # => prints out \"x is 5 and y is 6\" and returns 11\n\n# Another way to call functions is with keyword arguments\nadd(y=6, x=5)  # Keyword arguments can arrive in any order.\n\n# You can define functions that take a variable number of\n# positional arguments\ndef varargs(*args):\n    return args\n\nvarargs(1, 2, 3)  # => (1, 2, 3)\n\n# You can define functions that take a variable number of\n# keyword arguments, as well\ndef keyword_args(**kwargs):\n    return kwargs\n\n# Let's call it to see what happens\nkeyword_args(big=\"foot\", loch=\"ness\")  # => {\"big\": \"foot\", \"loch\": \"ness\"}\n\n\n# You can do both at once, if you like\ndef all_the_args(*args, **kwargs):\n    print(args)\n    print(kwargs)\n\"\"\"\nall_the_args(1, 2, a=3, b=4) prints:\n    (1, 2)\n    {\"a\": 3, \"b\": 4}\n\"\"\"\n\n# When calling functions, you can do the opposite of args/kwargs!\n# Use * to expand args (tuples) and use ** to expand kwargs (dictionaries).\nargs = (1, 2, 3, 4)\nkwargs = {\"a\": 3, \"b\": 4}\nall_the_args(*args)            # equivalent: all_the_args(1, 2, 3, 4)\nall_the_args(**kwargs)         # equivalent: all_the_args(a=3, b=4)\nall_the_args(*args, **kwargs)  # equivalent: all_the_args(1, 2, 3, 4, a=3, b=4)\n\n# Returning multiple values (with tuple assignments)\ndef swap(x, y):\n    return y, x  # Return multiple values as a tuple without the parenthesis.\n                 # (Note: parenthesis have been excluded but can be included)\n\nx = 1\ny = 2\nx, y = swap(x, y)     # => x = 2, y = 1\n# (x, y) = swap(x,y)  # Again the use of parenthesis is optional.\n\n# global scope\nx = 5\n\ndef set_x(num):\n    # local scope begins here\n    # local var x not the same as global var x\n    x = num    # => 43\n    print(x)   # => 43\n\ndef set_global_x(num):\n    # global indicates that particular var lives in the global scope\n    global x\n    print(x)   # => 5\n    x = num    # global var x is now set to 6\n    print(x)   # => 6\n\nset_x(43)\nset_global_x(6)\n\"\"\"\nprints:\n    43\n    5\n    6\n\"\"\"\n\n\n# Python has first class functions\ndef create_adder(x):\n    def adder(y):\n        return x + y\n    return adder\n\nadd_10 = create_adder(10)\nadd_10(3)   # => 13\n\n# Closures in nested functions:\n# We can use the nonlocal keyword to work with variables in nested scope which shouldn't be declared in the inner functions.\ndef create_avg():\n    total = 0\n    count = 0\n    def avg(n):\n        nonlocal total, count\n        total += n\n        count += 1\n        return total/count\n    return avg\navg = create_avg()\navg(3)  # => 3.0\navg(5)  # (3+5)/2 => 4.0\navg(7)  # (8+7)/3 => 5.0\n\n# There are also anonymous functions\n(lambda x: x > 2)(3)                  # => True\n(lambda x, y: x ** 2 + y ** 2)(2, 1)  # => 5\n\n# There are built-in higher order functions\nlist(map(add_10, [1, 2, 3]))          # => [11, 12, 13]\nlist(map(max, [1, 2, 3], [4, 2, 1]))  # => [4, 2, 3]\n\nlist(filter(lambda x: x > 5, [3, 4, 5, 6, 7]))  # => [6, 7]\n\n# We can use list comprehensions for nice maps and filters\n# List comprehension stores the output as a list (which itself may be nested).\n[add_10(i) for i in [1, 2, 3]]         # => [11, 12, 13]\n[x for x in [3, 4, 5, 6, 7] if x > 5]  # => [6, 7]\n\n# You can construct set and dict comprehensions as well.\n{x for x in \"abcddeef\" if x not in \"abc\"}  # => {'d', 'e', 'f'}\n{x: x**2 for x in range(5)}  # => {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n\n\n####################################################\n## 5. Modules\n####################################################\n\n# You can import modules\nimport math\nprint(math.sqrt(16))  # => 4.0\n\n# You can get specific functions from a module\nfrom math import ceil, floor\nprint(ceil(3.7))   # => 4\nprint(floor(3.7))  # => 3\n\n# You can import all functions from a module.\n# Warning: this is not recommended\nfrom math import *\n\n# You can shorten module names\nimport math as m\nmath.sqrt(16) == m.sqrt(16)  # => True\n\n# Python modules are just ordinary Python files. You\n# can write your own, and import them. The name of the\n# module is the same as the name of the file.\n\n# You can find out which functions and attributes\n# are defined in a module.\nimport math\ndir(math)\n\n# If you have a Python script named math.py in the same\n# folder as your current script, the file math.py will\n# be loaded instead of the built-in Python module.\n# This happens because the local folder has priority\n# over Python's built-in libraries.\n\n\n####################################################\n## 6. Classes\n####################################################\n\n# We use the \"class\" statement to create a class\nclass Human:\n\n    # A class attribute. It is shared by all instances of this class\n    species = \"H. sapiens\"\n\n    # Basic initializer, this is called when this class is instantiated.\n    # Note that the double leading and trailing underscores denote objects\n    # or attributes that are used by Python but that live in user-controlled\n    # namespaces. Methods(or objects or attributes) like: __init__, __str__,\n    # __repr__ etc. are called special methods (or sometimes called dunder\n    # methods). You should not invent such names on your own.\n    def __init__(self, name):\n        # Assign the argument to the instance's name attribute\n        self.name = name\n\n        # Initialize property\n        self._age = 0   # the leading underscore indicates the \"age\" property is\n                        # intended to be used internally\n                        # do not rely on this to be enforced: it's a hint to other devs\n\n    # An instance method. All methods take \"self\" as the first argument\n    def say(self, msg):\n        print(\"{name}: {message}\".format(name=self.name, message=msg))\n\n    # Another instance method\n    def sing(self):\n        return \"yo... yo... microphone check... one two... one two...\"\n\n    # A class method is shared among all instances\n    # They are called with the calling class as the first argument\n    @classmethod\n    def get_species(cls):\n        return cls.species\n\n    # A static method is called without a class or instance reference\n    @staticmethod\n    def grunt():\n        return \"*grunt*\"\n\n    # A property is just like a getter.\n    # It turns the method age() into a read-only attribute of the same name.\n    # There's no need to write trivial getters and setters in Python, though.\n    @property\n    def age(self):\n        return self._age\n\n    # This allows the property to be set\n    @age.setter\n    def age(self, age):\n        self._age = age\n\n    # This allows the property to be deleted\n    @age.deleter\n    def age(self):\n        del self._age\n\n\n# When a Python interpreter reads a source file it executes all its code.\n# This __name__ check makes sure this code block is only executed when this\n# module is the main program.\nif __name__ == \"__main__\":\n    # Instantiate a class\n    i = Human(name=\"Ian\")\n    i.say(\"hi\")                     # \"Ian: hi\"\n    j = Human(\"Joel\")\n    j.say(\"hello\")                  # \"Joel: hello\"\n    # i and j are instances of type Human; i.e., they are Human objects.\n\n    # Call our class method\n    i.say(i.get_species())          # \"Ian: H. sapiens\"\n    # Change the shared attribute\n    Human.species = \"H. neanderthalensis\"\n    i.say(i.get_species())          # => \"Ian: H. neanderthalensis\"\n    j.say(j.get_species())          # => \"Joel: H. neanderthalensis\"\n\n    # Call the static method\n    print(Human.grunt())            # => \"*grunt*\"\n\n    # Static methods can be called by instances too\n    print(i.grunt())                # => \"*grunt*\"\n\n    # Update the property for this instance\n    i.age = 42\n    # Get the property\n    i.say(i.age)                    # => \"Ian: 42\"\n    j.say(j.age)                    # => \"Joel: 0\"\n    # Delete the property\n    del i.age\n    # i.age                         # => this would raise an AttributeError\n\n\n####################################################\n## 6.1 Inheritance\n####################################################\n\n# Inheritance allows new child classes to be defined that inherit methods and\n# variables from their parent class.\n\n# Using the Human class defined above as the base or parent class, we can\n# define a child class, Superhero, which inherits variables like \"species\",\n# \"name\", and \"age\", as well as methods, like \"sing\" and \"grunt\"\n# from the Human class, but can also have its own unique properties.\n\n# To take advantage of modularization by file you could place the classes above\n# in their own files, say, human.py\n\n# To import functions from other files use the following format\n# from \"filename-without-extension\" import \"function-or-class\"\n\nfrom human import Human\n\n\n# Specify the parent class(es) as parameters to the class definition\nclass Superhero(Human):\n\n    # If the child class should inherit all of the parent's definitions without\n    # any modifications, you can just use the \"pass\" keyword (and nothing else)\n    # but in this case it is commented out to allow for a unique child class:\n    # pass\n\n    # Child classes can override their parents' attributes\n    species = \"Superhuman\"\n\n    # Children automatically inherit their parent class's constructor including\n    # its arguments, but can also define additional arguments or definitions\n    # and override its methods such as the class constructor.\n    # This constructor inherits the \"name\" argument from the \"Human\" class and\n    # adds the \"superpower\" and \"movie\" arguments:\n    def __init__(self, name, movie=False,\n                 superpowers=[\"super strength\", \"bulletproofing\"]):\n\n        # add additional class attributes:\n        self.fictional = True\n        self.movie = movie\n        # be aware of mutable default values, since defaults are shared\n        self.superpowers = superpowers\n\n        # The \"super\" function lets you access the parent class's methods\n        # that are overridden by the child, in this case, the __init__ method.\n        # This calls the parent class constructor:\n        super().__init__(name)\n\n    # override the sing method\n    def sing(self):\n        return \"Dun, dun, DUN!\"\n\n    # add an additional instance method\n    def boast(self):\n        for power in self.superpowers:\n            print(\"I wield the power of {pow}!\".format(pow=power))\n\n\nif __name__ == \"__main__\":\n    sup = Superhero(name=\"Tick\")\n\n    # Instance type checks\n    if isinstance(sup, Human):\n        print(\"I am human\")\n    if type(sup) is Superhero:\n        print(\"I am a superhero\")\n\n    # Get the \"Method Resolution Order\" used by both getattr() and super()\n    # (the order in which classes are searched for an attribute or method)\n    # This attribute is dynamic and can be updated\n    print(Superhero.__mro__)    # => (<class '__main__.Superhero'>,\n                                # => <class 'human.Human'>, <class 'object'>)\n\n    # Calls parent method but uses its own class attribute\n    print(sup.get_species())    # => Superhuman\n\n    # Calls overridden method\n    print(sup.sing())           # => Dun, dun, DUN!\n\n    # Calls method from Human\n    sup.say(\"Spoon\")            # => Tick: Spoon\n\n    # Call method that exists only in Superhero\n    sup.boast()                 # => I wield the power of super strength!\n                                # => I wield the power of bulletproofing!\n\n    # Inherited class attribute\n    sup.age = 31\n    print(sup.age)              # => 31\n\n    # Attribute that only exists within Superhero\n    print(\"Am I Oscar eligible? \" + str(sup.movie))\n\n####################################################\n## 6.2 Multiple Inheritance\n####################################################\n\n\n# Another class definition\n# bat.py\nclass Bat:\n\n    species = \"Baty\"\n\n    def __init__(self, can_fly=True):\n        self.fly = can_fly\n\n    # This class also has a say method\n    def say(self, msg):\n        msg = \"... ... ...\"\n        return msg\n\n    # And its own method as well\n    def sonar(self):\n        return \"))) ... (((\"\n\n\nif __name__ == \"__main__\":\n    b = Bat()\n    print(b.say(\"hello\"))\n    print(b.fly)\n\n\n# And yet another class definition that inherits from Superhero and Bat\n# superhero.py\nfrom superhero import Superhero\nfrom bat import Bat\n\n# Define Batman as a child that inherits from both Superhero and Bat\nclass Batman(Superhero, Bat):\n\n    def __init__(self, *args, **kwargs):\n        # Typically to inherit attributes you have to call super:\n        # super(Batman, self).__init__(*args, **kwargs)\n        # However we are dealing with multiple inheritance here, and super()\n        # only works with the next base class in the MRO list.\n        # So instead we explicitly call __init__ for all ancestors.\n        # The use of *args and **kwargs allows for a clean way to pass\n        # arguments, with each parent \"peeling a layer of the onion\".\n        Superhero.__init__(self, \"anonymous\", movie=True,\n                           superpowers=[\"Wealthy\"], *args, **kwargs)\n        Bat.__init__(self, *args, can_fly=False, **kwargs)\n        # override the value for the name attribute\n        self.name = \"Sad Affleck\"\n\n    def sing(self):\n        return \"nan nan nan nan nan batman!\"\n\n\nif __name__ == \"__main__\":\n    sup = Batman()\n\n    # The Method Resolution Order\n    print(Batman.__mro__)     # => (<class '__main__.Batman'>,\n                              # => <class 'superhero.Superhero'>,\n                              # => <class 'human.Human'>,\n                              # => <class 'bat.Bat'>, <class 'object'>)\n\n    # Calls parent method but uses its own class attribute\n    print(sup.get_species())  # => Superhuman\n\n    # Calls overridden method\n    print(sup.sing())         # => nan nan nan nan nan batman!\n\n    # Calls method from Human, because inheritance order matters\n    sup.say(\"I agree\")        # => Sad Affleck: I agree\n\n    # Call method that exists only in 2nd ancestor\n    print(sup.sonar())        # => ))) ... (((\n\n    # Inherited class attribute\n    sup.age = 100\n    print(sup.age)            # => 100\n\n    # Inherited attribute from 2nd ancestor whose default value was overridden.\n    print(\"Can I fly? \" + str(sup.fly))  # => Can I fly? False\n\n\n####################################################\n## 7. Advanced\n####################################################\n\n# Generators help you make lazy code.\ndef double_numbers(iterable):\n    for i in iterable:\n        yield i + i\n\n# Generators are memory-efficient because they only load the data needed to\n# process the next value in the iterable. This allows them to perform\n# operations on otherwise prohibitively large value ranges.\n# NOTE: `range` replaces `xrange` in Python 3.\nfor i in double_numbers(range(1, 900000000)):  # `range` is a generator.\n    print(i)\n    if i >= 30:\n        break\n\n# Just as you can create a list comprehension, you can create generator\n# comprehensions as well.\nvalues = (-x for x in [1,2,3,4,5])\nfor x in values:\n    print(x)  # prints -1 -2 -3 -4 -5 to console/terminal\n\n# You can also cast a generator comprehension directly to a list.\nvalues = (-x for x in [1,2,3,4,5])\ngen_to_list = list(values)\nprint(gen_to_list)  # => [-1, -2, -3, -4, -5]\n\n\n# Decorators are a form of syntactic sugar.\n# They make code easier to read while accomplishing clunky syntax.\n\n# Wrappers are one type of decorator.\n# They're really useful for adding logging to existing functions without needing to modify them.\n\ndef log_function(func):\n    def wrapper(*args, **kwargs):\n        print(\"Entering function\", func.__name__)\n        result = func(*args, **kwargs)\n        print(\"Exiting function\", func.__name__)\n        return result\n    return wrapper\n\n@log_function               # equivalent:\ndef my_function(x,y):       # def my_function(x,y):\n    return x+y              #   return x+y\n                            # my_function = log_function(my_function)\n# The decorator @log_function tells us as we begin reading the function definition\n# for my_function that this function will be wrapped with log_function.\n# When function definitions are long, it can be hard to parse the non-decorated\n# assignment at the end of the definition.\n\nmy_function(1,2)  # => \"Entering function my_function\"\n                  # => \"3\"\n                  # => \"Exiting function my_function\"\n\n# But there's a problem.\n# What happens if we try to get some information about my_function?\n\nprint(my_function.__name__)  # => 'wrapper'\nprint(my_function.__code__.co_argcount)  # => 0. The argcount is 0 because both arguments in wrapper()'s signature are optional.\n\n# Because our decorator is equivalent to my_function = log_function(my_function)\n# we've replaced information about my_function with information from wrapper\n\n# Fix this using functools\n\nfrom functools import wraps\n\ndef log_function(func):\n    @wraps(func)  # this ensures docstring, function name, arguments list, etc. are all copied\n                  # to the wrapped function - instead of being replaced with wrapper's info\n    def wrapper(*args, **kwargs):\n        print(\"Entering function\", func.__name__)\n        result = func(*args, **kwargs)\n        print(\"Exiting function\", func.__name__)\n        return result\n    return wrapper\n\n@log_function\ndef my_function(x,y):\n    return x+y\n\nmy_function(1,2)  # => \"Entering function my_function\"\n                  # => \"3\"\n                  # => \"Exiting function my_function\"\n\nprint(my_function.__name__)  # => 'my_function'\nprint(my_function.__code__.co_argcount)  # => 2\n```\n\n### Free Online\n\n* [Automate the Boring Stuff with Python](https://automatetheboringstuff.com)\n* [The Official Docs](https://docs.python.org/3/)\n* [Hitchhiker's Guide to Python](https://docs.python-guide.org/)\n* [Python Course](https://www.python-course.eu)\n* [First Steps With Python](https://realpython.com/learn/python-first-steps/)\n* [A curated list of awesome Python frameworks, libraries and software](https://github.com/vinta/awesome-python)\n* [Official Style Guide for Python](https://peps.python.org/pep-0008/)\n* [Python 3 Computer Science Circles](https://cscircles.cemc.uwaterloo.ca/)\n* [Dive Into Python 3](https://www.diveintopython3.net/)\n* [Python Tutorial for Intermediates](https://pythonbasics.org/)\n* [Build a Desktop App with Python](https://pythonpyqt.com/)\n"
        },
        {
          "name": "pythonlegacy.md",
          "type": "blob",
          "size": 23.3349609375,
          "content": "---\nname: Python 2 (legacy)\ncontributors:\n    - [\"Louie Dinh\", \"http://ldinh.ca\"]\n    - [\"Amin Bandali\", \"https://aminb.org\"]\n    - [\"Andre Polykanine\", \"https://github.com/Oire\"]\n    - [\"evuez\", \"http://github.com/evuez\"]\n    - [\"asyne\", \"https://github.com/justblah\"]\n    - [\"habi\", \"http://github.com/habi\"]\n    - [\"Rommel Martinez\", \"https://ebzzry.io\"]\nfilename: learnpythonlegacy.py\n---\n\nPython was created by Guido Van Rossum in the early 90s. It is now one of the\nmost popular languages in existence. I fell in love with Python for its\nsyntactic clarity. It's basically executable pseudocode.\n\nNote: This article applies to Python 2.7 specifically, but should be applicable\nto Python 2.x. Python 2.7 is reaching end of life and will stop being\nmaintained in 2020, it is though recommended to start learning Python with\nPython 3. For Python 3.x, take a look at the [Python 3 tutorial](../python/).\n\nIt is also possible to write Python code which is compatible with Python 2.7\nand 3.x at the same time, using Python [`__future__` imports](https://docs.python.org/2/library/__future__.html). `__future__` imports\nallow you to write Python 3 code that will run on Python 2, so check out the\nPython 3 tutorial.\n\n```python\n# Single line comments start with a number symbol.\n\n\"\"\" Multiline strings can be written\n    using three \"s, and are often used\n    as comments\n\"\"\"\n\n####################################################\n# 1. Primitive Datatypes and Operators\n####################################################\n\n# You have numbers\n3  # => 3\n\n# Math is what you would expect\n1 + 1  # => 2\n8 - 1  # => 7\n10 * 2  # => 20\n35 / 5  # => 7\n\n# Division is a bit tricky. It is integer division and floors the results\n# automatically.\n5 / 2  # => 2\n\n# To fix division we need to learn about floats.\n2.0  # This is a float\n11.0 / 4.0  # => 2.75 ahhh...much better\n\n# Result of integer division truncated down both for positive and negative.\n5 // 3  # => 1\n5.0 // 3.0  # => 1.0 # works on floats too\n-5 // 3  # => -2\n-5.0 // 3.0  # => -2.0\n\n# Note that we can also import division module(Section 6 Modules)\n# to carry out normal division with just one '/'.\nfrom __future__ import division\n\n11 / 4  # => 2.75  ...normal division\n11 // 4  # => 2 ...floored division\n\n# Modulo operation\n7 % 3  # => 1\n\n# Exponentiation (x to the yth power)\n2 ** 4  # => 16\n\n# Enforce precedence with parentheses\n(1 + 3) * 2  # => 8\n\n# Boolean Operators\n# Note \"and\" and \"or\" are case-sensitive\nTrue and False  # => False\nFalse or True  # => True\n\n# Note using Bool operators with ints\n0 and 2  # => 0\n-5 or 0  # => -5\n0 == False  # => True\n2 == True  # => False\n1 == True  # => True\n\n# negate with not\nnot True  # => False\nnot False  # => True\n\n# Equality is ==\n1 == 1  # => True\n2 == 1  # => False\n\n# Inequality is !=\n1 != 1  # => False\n2 != 1  # => True\n\n# More comparisons\n1 < 10  # => True\n1 > 10  # => False\n2 <= 2  # => True\n2 >= 2  # => True\n\n# Comparisons can be chained!\n1 < 2 < 3  # => True\n2 < 3 < 2  # => False\n\n# Strings are created with \" or '\n\"This is a string.\"\n'This is also a string.'\n\n# Strings can be added too!\n\"Hello \" + \"world!\"  # => \"Hello world!\"\n# Strings can be added without using '+'\n\"Hello \" \"world!\"  # => \"Hello world!\"\n\n# ... or multiplied\n\"Hello\" * 3  # => \"HelloHelloHello\"\n\n# A string can be treated like a list of characters\n\"This is a string\"[0]  # => 'T'\n\n# You can find the length of a string\nlen(\"This is a string\")  # => 16\n\n# String formatting with %\n# Even though the % string operator will be deprecated on Python 3.1 and removed\n# later at some time, it may still be good to know how it works.\nx = 'apple'\ny = 'lemon'\nz = \"The items in the basket are %s and %s\" % (x, y)\n\n# A newer way to format strings is the format method.\n# This method is the preferred way\n\"{} is a {}\".format(\"This\", \"placeholder\")\n\"{0} can be {1}\".format(\"strings\", \"formatted\")\n# You can use keywords if you don't want to count.\n\"{name} wants to eat {food}\".format(name=\"Bob\", food=\"lasagna\")\n\n# None is an object\nNone  # => None\n\n# Don't use the equality \"==\" symbol to compare objects to None\n# Use \"is\" instead\n\"etc\" is None  # => False\nNone is None  # => True\n\n# The 'is' operator tests for object identity. This isn't\n# very useful when dealing with primitive values, but is\n# very useful when dealing with objects.\n\n# Any object can be used in a Boolean context.\n# The following values are considered falsey:\n#    - None\n#    - zero of any numeric type (e.g., 0, 0L, 0.0, 0j)\n#    - empty sequences (e.g., '', (), [])\n#    - empty containers (e.g., {}, set())\n#    - instances of user-defined classes meeting certain conditions\n#      see: https://docs.python.org/2/reference/datamodel.html#object.__nonzero__\n#\n# All other values are truthy (using the bool() function on them returns True).\nbool(0)  # => False\nbool(\"\")  # => False\n\n\n####################################################\n# 2. Variables and Collections\n####################################################\n\n# Python has a print statement\nprint \"I'm Python. Nice to meet you!\"  # => I'm Python. Nice to meet you!\n\n# Simple way to get input data from console\ninput_string_var = raw_input(\n    \"Enter some data: \")  # Returns the data as a string\ninput_var = input(\"Enter some data: \")  # Evaluates the data as python code\n# Warning: Caution is recommended for input() method usage\n# Note: In python 3, input() is deprecated and raw_input() is renamed to input()\n\n# No need to declare variables before assigning to them.\nsome_var = 5  # Convention is to use lower_case_with_underscores\nsome_var  # => 5\n\n# Accessing a previously unassigned variable is an exception.\n# See Control Flow to learn more about exception handling.\nsome_other_var  # Raises a name error\n\n# if can be used as an expression\n# Equivalent of C's '?:' ternary operator\n\"yahoo!\" if 3 > 2 else 2  # => \"yahoo!\"\n\n# Lists store sequences\nli = []\n# You can start with a prefilled list\nother_li = [4, 5, 6]\n\n# Add stuff to the end of a list with append\nli.append(1)  # li is now [1]\nli.append(2)  # li is now [1, 2]\nli.append(4)  # li is now [1, 2, 4]\nli.append(3)  # li is now [1, 2, 4, 3]\n# Remove from the end with pop\nli.pop()  # => 3 and li is now [1, 2, 4]\n# Let's put it back\nli.append(3)  # li is now [1, 2, 4, 3] again.\n\n# Access a list like you would any array\nli[0]  # => 1\n# Assign new values to indexes that have already been initialized with =\nli[0] = 42\nli[0]  # => 42\nli[0] = 1  # Note: setting it back to the original value\n# Look at the last element\nli[-1]  # => 3\n\n# Looking out of bounds is an IndexError\nli[4]  # Raises an IndexError\n\n# You can look at ranges with slice syntax.\n# (It's a closed/open range for you mathy types.)\nli[1:3]  # => [2, 4]\n# Omit the beginning\nli[2:]  # => [4, 3]\n# Omit the end\nli[:3]  # => [1, 2, 4]\n# Select every second entry\nli[::2]  # =>[1, 4]\n# Reverse a copy of the list\nli[::-1]  # => [3, 4, 2, 1]\n# Use any combination of these to make advanced slices\n# li[start:end:step]\n\n# Remove arbitrary elements from a list with \"del\"\ndel li[2]  # li is now [1, 2, 3]\n\n# You can add lists\nli + other_li  # => [1, 2, 3, 4, 5, 6]\n# Note: values for li and for other_li are not modified.\n\n# Concatenate lists with \"extend()\"\nli.extend(other_li)  # Now li is [1, 2, 3, 4, 5, 6]\n\n# Remove first occurrence of a value\nli.remove(2)  # li is now [1, 3, 4, 5, 6]\nli.remove(2)  # Raises a ValueError as 2 is not in the list\n\n# Insert an element at a specific index\nli.insert(1, 2)  # li is now [1, 2, 3, 4, 5, 6] again\n\n# Get the index of the first item found\nli.index(2)  # => 1\nli.index(7)  # Raises a ValueError as 7 is not in the list\n\n# Check for existence in a list with \"in\"\n1 in li  # => True\n\n# Examine the length with \"len()\"\nlen(li)  # => 6\n\n# Tuples are like lists but are immutable.\ntup = (1, 2, 3)\ntup[0]  # => 1\ntup[0] = 3  # Raises a TypeError\n\n# You can do all those list thingies on tuples too\nlen(tup)  # => 3\ntup + (4, 5, 6)  # => (1, 2, 3, 4, 5, 6)\ntup[:2]  # => (1, 2)\n2 in tup  # => True\n\n# You can unpack tuples (or lists) into variables\na, b, c = (1, 2, 3)  # a is now 1, b is now 2 and c is now 3\nd, e, f = 4, 5, 6  # you can leave out the parentheses\n# Tuples are created by default if you leave out the parentheses\ng = 4, 5, 6  # => (4, 5, 6)\n# Now look how easy it is to swap two values\ne, d = d, e  # d is now 5 and e is now 4\n\n# Dictionaries store mappings\nempty_dict = {}\n# Here is a prefilled dictionary\nfilled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\n\n# Look up values with []\nfilled_dict[\"one\"]  # => 1\n\n# Get all keys as a list with \"keys()\"\nfilled_dict.keys()  # => [\"three\", \"two\", \"one\"]\n# Note - Dictionary key ordering is not guaranteed.\n# Your results might not match this exactly.\n\n# Get all values as a list with \"values()\"\nfilled_dict.values()  # => [3, 2, 1]\n# Note - Same as above regarding key ordering.\n\n# Get all key-value pairs as a list of tuples with \"items()\"\nfilled_dict.items()  # => [(\"one\", 1), (\"two\", 2), (\"three\", 3)]\n\n# Check for existence of keys in a dictionary with \"in\"\n\"one\" in filled_dict  # => True\n1 in filled_dict  # => False\n\n# Looking up a non-existing key is a KeyError\nfilled_dict[\"four\"]  # KeyError\n\n# Use \"get()\" method to avoid the KeyError\nfilled_dict.get(\"one\")  # => 1\nfilled_dict.get(\"four\")  # => None\n# The get method supports a default argument when the value is missing\nfilled_dict.get(\"one\", 4)  # => 1\nfilled_dict.get(\"four\", 4)  # => 4\n# note that filled_dict.get(\"four\") is still => None\n# (get doesn't set the value in the dictionary)\n\n# set the value of a key with a syntax similar to lists\nfilled_dict[\"four\"] = 4  # now, filled_dict[\"four\"] => 4\n\n# \"setdefault()\" inserts into a dictionary only if the given key isn't present\nfilled_dict.setdefault(\"five\", 5)  # filled_dict[\"five\"] is set to 5\nfilled_dict.setdefault(\"five\", 6)  # filled_dict[\"five\"] is still 5\n\n# You can declare sets (which are like unordered lists that cannot contain\n# duplicate values) using the set object.\nempty_set = set()\n# Initialize a \"set()\" with a bunch of values\nsome_set = set([1, 2, 2, 3, 4])  # some_set is now set([1, 2, 3, 4])\n\n# order is not guaranteed, even though it may sometimes look sorted\nanother_set = set([4, 3, 2, 2, 1])  # another_set is now set([1, 2, 3, 4])\n\n# Since Python 2.7, {} can be used to declare a set\nfilled_set = {1, 2, 2, 3, 4}  # => {1, 2, 3, 4}\n\n# Add more items to a set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n\n# Do set union with |\nfilled_set | other_set  # => {1, 2, 3, 4, 5, 6}\n\n# Do set difference with -\n{1, 2, 3, 4} - {2, 3, 5}  # => {1, 4}\n\n# Do set symmetric difference with ^\n{1, 2, 3, 4} ^ {2, 3, 5}  # => {1, 4, 5}\n\n# Check if set on the left is a superset of set on the right\n{1, 2} >= {1, 2, 3}  # => False\n\n# Check if set on the left is a subset of set on the right\n{1, 2} <= {1, 2, 3}  # => True\n\n# Check for existence in a set with in\n2 in filled_set  # => True\n10 in filled_set  # => False\n10 not in filled_set # => True\n\n# Check data type of variable\ntype(li)   # => list\ntype(filled_dict)   # => dict\ntype(5)   # => int\n\n\n####################################################\n#  3. Control Flow\n####################################################\n\n# Let's just make a variable\nsome_var = 5\n\n# Here is an if statement. Indentation is significant in python!\n# prints \"some_var is smaller than 10\"\nif some_var > 10:\n    print \"some_var is totally bigger than 10.\"\nelif some_var < 10:  # This elif clause is optional.\n    print \"some_var is smaller than 10.\"\nelse:  # This is optional too.\n    print \"some_var is indeed 10.\"\n\n\"\"\"\nFor loops iterate over lists\nprints:\n    dog is a mammal\n    cat is a mammal\n    mouse is a mammal\n\"\"\"\nfor animal in [\"dog\", \"cat\", \"mouse\"]:\n    # You can use {0} to interpolate formatted strings. (See above.)\n    print \"{0} is a mammal\".format(animal)\n\n\"\"\"\n\"range(number)\" returns a list of numbers\nfrom zero to the given number\nprints:\n    0\n    1\n    2\n    3\n\"\"\"\nfor i in range(4):\n    print i\n\n\"\"\"\n\"range(lower, upper)\" returns a list of numbers\nfrom the lower number to the upper number\nprints:\n    4\n    5\n    6\n    7\n\"\"\"\nfor i in range(4, 8):\n    print i\n\n\"\"\"\nWhile loops go until a condition is no longer met.\nprints:\n    0\n    1\n    2\n    3\n\"\"\"\nx = 0\nwhile x < 4:\n    print x\n    x += 1  # Shorthand for x = x + 1\n\n# Handle exceptions with a try/except block\n\n# Works on Python 2.6 and up:\ntry:\n    # Use \"raise\" to raise an error\n    raise IndexError(\"This is an index error\")\nexcept IndexError as e:\n    pass  # Pass is just a no-op. Usually you would do recovery here.\nexcept (TypeError, NameError):\n    pass  # Multiple exceptions can be handled together, if required.\nelse:  # Optional clause to the try/except block. Must follow all except blocks\n    print \"All good!\"  # Runs only if the code in try raises no exceptions\nfinally:  # Execute under all circumstances\n    print \"We can clean up resources here\"\n\n# Instead of try/finally to cleanup resources you can use a with statement\nwith open(\"myfile.txt\") as f:\n    for line in f:\n        print line\n\n\n####################################################\n# 4. Functions\n####################################################\n\n# Use \"def\" to create new functions\ndef add(x, y):\n    print \"x is {0} and y is {1}\".format(x, y)\n    return x + y  # Return values with a return statement\n\n\n# Calling functions with parameters\nadd(5, 6)  # => prints out \"x is 5 and y is 6\" and returns 11\n\n# Another way to call functions is with keyword arguments\nadd(y=6, x=5)  # Keyword arguments can arrive in any order.\n\n\n# You can define functions that take a variable number of\n# positional args, which will be interpreted as a tuple by using *\ndef varargs(*args):\n    return args\n\n\nvarargs(1, 2, 3)  # => (1, 2, 3)\n\n\n# You can define functions that take a variable number of\n# keyword args, as well, which will be interpreted as a dict by using **\ndef keyword_args(**kwargs):\n    return kwargs\n\n\n# Let's call it to see what happens\nkeyword_args(big=\"foot\", loch=\"ness\")  # => {\"big\": \"foot\", \"loch\": \"ness\"}\n\n\n# You can do both at once, if you like\ndef all_the_args(*args, **kwargs):\n    print args\n    print kwargs\n\n\n\"\"\"\nall_the_args(1, 2, a=3, b=4) prints:\n    (1, 2)\n    {\"a\": 3, \"b\": 4}\n\"\"\"\n\n# When calling functions, you can do the opposite of args/kwargs!\n# Use * to expand positional args and use ** to expand keyword args.\nargs = (1, 2, 3, 4)\nkwargs = {\"a\": 3, \"b\": 4}\nall_the_args(*args)  # equivalent to all_the_args(1, 2, 3, 4)\nall_the_args(**kwargs)  # equivalent to all_the_args(a=3, b=4)\nall_the_args(*args, **kwargs)  # equivalent to all_the_args(1, 2, 3, 4, a=3, b=4)\n\n\n# you can pass args and kwargs along to other functions that take args/kwargs\n# by expanding them with * and ** respectively\ndef pass_all_the_args(*args, **kwargs):\n    all_the_args(*args, **kwargs)\n    print varargs(*args)\n    print keyword_args(**kwargs)\n\n\n# Function Scope\nx = 5\n\n\ndef set_x(num):\n    # Local var x not the same as global variable x\n    x = num  # => 43\n    print x  # => 43\n\n\ndef set_global_x(num):\n    global x\n    print x  # => 5\n    x = num  # global var x is now set to 6\n    print x  # => 6\n\n\nset_x(43)\nset_global_x(6)\n\n\n# Python has first class functions\ndef create_adder(x):\n    def adder(y):\n        return x + y\n\n    return adder\n\n\nadd_10 = create_adder(10)\nadd_10(3)  # => 13\n\n# There are also anonymous functions\n(lambda x: x > 2)(3)  # => True\n(lambda x, y: x ** 2 + y ** 2)(2, 1)  # => 5\n\n# There are built-in higher order functions\nmap(add_10, [1, 2, 3])  # => [11, 12, 13]\nmap(max, [1, 2, 3], [4, 2, 1])  # => [4, 2, 3]\n\nfilter(lambda x: x > 5, [3, 4, 5, 6, 7])  # => [6, 7]\n\n# We can use list comprehensions for nice maps and filters\n[add_10(i) for i in [1, 2, 3]]  # => [11, 12, 13]\n[x for x in [3, 4, 5, 6, 7] if x > 5]  # => [6, 7]\n\n# You can construct set and dict comprehensions as well.\n{x for x in 'abcddeef' if x in 'abc'}  # => {'a', 'b', 'c'}\n{x: x ** 2 for x in range(5)}  # => {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n\n\n####################################################\n# 5. Classes\n####################################################\n\n# We subclass from object to get a class.\nclass Human(object):\n    # A class attribute. It is shared by all instances of this class\n    species = \"H. sapiens\"\n\n    # Basic initializer, this is called when this class is instantiated.\n    # Note that the double leading and trailing underscores denote objects\n    # or attributes that are used by python but that live in user-controlled\n    # namespaces. You should not invent such names on your own.\n    def __init__(self, name):\n        # Assign the argument to the instance's name attribute\n        self.name = name\n\n        # Initialize property\n        self.age = 0\n\n    # An instance method. All methods take \"self\" as the first argument\n    def say(self, msg):\n        return \"{0}: {1}\".format(self.name, msg)\n\n    # A class method is shared among all instances\n    # They are called with the calling class as the first argument\n    @classmethod\n    def get_species(cls):\n        return cls.species\n\n    # A static method is called without a class or instance reference\n    @staticmethod\n    def grunt():\n        return \"*grunt*\"\n\n    # A property is just like a getter.\n    # It turns the method age() into an read-only attribute\n    # of the same name.\n    @property\n    def age(self):\n        return self._age\n\n    # This allows the property to be set\n    @age.setter\n    def age(self, age):\n        self._age = age\n\n    # This allows the property to be deleted\n    @age.deleter\n    def age(self):\n        del self._age\n\n\n# Instantiate a class\ni = Human(name=\"Ian\")\nprint i.say(\"hi\")  # prints out \"Ian: hi\"\n\nj = Human(\"Joel\")\nprint j.say(\"hello\")  # prints out \"Joel: hello\"\n\n# Call our class method\ni.get_species()  # => \"H. sapiens\"\n\n# Change the shared attribute\nHuman.species = \"H. neanderthalensis\"\ni.get_species()  # => \"H. neanderthalensis\"\nj.get_species()  # => \"H. neanderthalensis\"\n\n# Call the static method\nHuman.grunt()  # => \"*grunt*\"\n\n# Update the property\ni.age = 42\n\n# Get the property\ni.age  # => 42\n\n# Delete the property\ndel i.age\ni.age  # => raises an AttributeError\n\n####################################################\n# 6. Modules\n####################################################\n\n# You can import modules\nimport math\n\nprint math.sqrt(16)  # => 4.0\n\n# You can get specific functions from a module\nfrom math import ceil, floor\n\nprint ceil(3.7)  # => 4.0\nprint floor(3.7)  # => 3.0\n\n# You can import all functions from a module.\n# Warning: this is not recommended\nfrom math import *\n\n# You can shorten module names\nimport math as m\n\nmath.sqrt(16) == m.sqrt(16)  # => True\n# you can also test that the functions are equivalent\nfrom math import sqrt\n\nmath.sqrt == m.sqrt == sqrt  # => True\n\n# Python modules are just ordinary python files. You\n# can write your own, and import them. The name of the\n# module is the same as the name of the file.\n\n# You can find out which functions and attributes\n# defines a module.\nimport math\n\ndir(math)\n\n\n# If you have a Python script named math.py in the same\n# folder as your current script, the file math.py will\n# be loaded instead of the built-in Python module.\n# This happens because the local folder has priority\n# over Python's built-in libraries.\n\n\n####################################################\n# 7. Advanced\n####################################################\n\n# Generators\n# A generator \"generates\" values as they are requested instead of storing\n# everything up front\n\n# The following method (*NOT* a generator) will double all values and store it\n# in `double_arr`. For large size of iterables, that might get huge!\ndef double_numbers(iterable):\n    double_arr = []\n    for i in iterable:\n        double_arr.append(i + i)\n    return double_arr\n\n\n# Running the following would mean we'll double all values first and return all\n# of them back to be checked by our condition\nfor value in double_numbers(range(1000000)):  # `test_non_generator`\n    print value\n    if value > 5:\n        break\n\n\n# We could instead use a generator to \"generate\" the doubled value as the item\n# is being requested\ndef double_numbers_generator(iterable):\n    for i in iterable:\n        yield i + i\n\n\n# Running the same code as before, but with a generator, now allows us to iterate\n# over the values and doubling them one by one as they are being consumed by\n# our logic. Hence as soon as we see a value > 5, we break out of the\n# loop and don't need to double most of the values sent in (MUCH FASTER!)\nfor value in double_numbers_generator(xrange(1000000)):  # `test_generator`\n    print value\n    if value > 5:\n        break\n\n# BTW: did you notice the use of `range` in `test_non_generator` and `xrange` in `test_generator`?\n# Just as `double_numbers_generator` is the generator version of `double_numbers`\n# We have `xrange` as the generator version of `range`\n# `range` would return back and array with 1000000 values for us to use\n# `xrange` would generate 1000000 values for us as we request / iterate over those items\n\n# Just as you can create a list comprehension, you can create generator\n# comprehensions as well.\nvalues = (-x for x in [1, 2, 3, 4, 5])\nfor x in values:\n    print(x)  # prints -1 -2 -3 -4 -5 to console/terminal\n\n# You can also cast a generator comprehension directly to a list.\nvalues = (-x for x in [1, 2, 3, 4, 5])\ngen_to_list = list(values)\nprint(gen_to_list)  # => [-1, -2, -3, -4, -5]\n\n# Decorators\n# A decorator is a higher order function, which accepts and returns a function.\n# Simple usage example – add_apples decorator will add 'Apple' element into\n# fruits list returned by get_fruits target function.\ndef add_apples(func):\n    def get_fruits():\n        fruits = func()\n        fruits.append('Apple')\n        return fruits\n    return get_fruits\n\n@add_apples\ndef get_fruits():\n    return ['Banana', 'Mango', 'Orange']\n\n# Prints out the list of fruits with 'Apple' element in it:\n# Banana, Mango, Orange, Apple\nprint ', '.join(get_fruits())\n\n# in this example beg wraps say\n# Beg will call say. If say_please is True then it will change the returned\n# message\nfrom functools import wraps\n\n\ndef beg(target_function):\n    @wraps(target_function)\n    def wrapper(*args, **kwargs):\n        msg, say_please = target_function(*args, **kwargs)\n        if say_please:\n            return \"{} {}\".format(msg, \"Please! I am poor :(\")\n        return msg\n\n    return wrapper\n\n\n@beg\ndef say(say_please=False):\n    msg = \"Can you buy me a beer?\"\n    return msg, say_please\n\n\nprint say()  # Can you buy me a beer?\nprint say(say_please=True)  # Can you buy me a beer? Please! I am poor :(\n```\n\n## Ready For More?\n\n### Free Online\n\n* [Automate the Boring Stuff with Python](https://automatetheboringstuff.com)\n* [Learn Python The Hard Way](http://learnpythonthehardway.org/book/)\n* [Dive Into Python](http://www.diveintopython.net/)\n* [The Official Docs](http://docs.python.org/2/)\n* [Hitchhiker's Guide to Python](http://docs.python-guide.org/en/latest/)\n* [Python Module of the Week](http://pymotw.com/2/)\n* [A Crash Course in Python for Scientists](http://nbviewer.ipython.org/5920182)\n* [First Steps With Python](https://realpython.com/learn/python-first-steps/)\n* [LearnPython](http://www.learnpython.org/)\n* [Fullstack Python](https://www.fullstackpython.com/)\n\n### Dead Tree\n\n* [Programming Python](http://www.amazon.com/gp/product/0596158106/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=0596158106&linkCode=as2&tag=homebits04-20)\n* [Dive Into Python](http://www.amazon.com/gp/product/1441413022/ref=as_li_tf_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1441413022&linkCode=as2&tag=homebits04-20)\n* [Python Essential Reference](http://www.amazon.com/gp/product/0672329786/ref=as_li_tf_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=0672329786&linkCode=as2&tag=homebits04-20)\n"
        },
        {
          "name": "pythonstatcomp.md",
          "type": "blob",
          "size": 7.91796875,
          "content": "---\ncategory: framework\nname: Statistical computing with Python\ncontributors:\n    - [\"e99n09\", \"https://github.com/e99n09\"]\nfilename: pythonstatcomp.py\n---\n\nThis is a tutorial on how to do some typical statistical programming tasks using Python. It's intended for people basically familiar with Python and experienced at statistical programming in a language like R, Stata, SAS, SPSS, or MATLAB.\n\n```python\n# 0. Getting set up ====\n\n\"\"\" To get started, pip install the following: jupyter, numpy, scipy, pandas,\n    matplotlib, seaborn, requests.\n        Make sure to do this tutorial in a Jupyter notebook so that you get\n    the inline plots and easy documentation lookup. The shell command to open\n    one is simply `jupyter notebook`, then click New -> Python.\n\"\"\"\n\n# 1. Data acquisition ====\n\n\"\"\" One reason people choose Python over R is that they intend to interact a lot\n    with the web, either by scraping pages directly or requesting data through\n    an API. You can do those things in R, but in the context of a project\n    already using Python, there's a benefit to sticking with one language.\n\"\"\"\n\nimport requests  # for HTTP requests (web scraping, APIs)\nimport os\n\n# web scraping\nr = requests.get(\"https://github.com/adambard/learnxinyminutes-docs\")\nr.status_code  # if 200, request was successful\nr.text  # raw page source\nprint(r.text)  # prettily formatted\n# save the page source in a file:\nos.getcwd()  # check what's the working directory\nwith open(\"learnxinyminutes.html\", \"wb\") as f:\n    f.write(r.text.encode(\"UTF-8\"))\n\n# downloading a csv\nfp = \"https://raw.githubusercontent.com/adambard/learnxinyminutes-docs/master/\"\nfn = \"pets.csv\"\nr = requests.get(fp + fn)\nprint(r.text)\nwith open(fn, \"wb\") as f:\n    f.write(r.text.encode(\"UTF-8\"))\n\n\"\"\" for more on the requests module, including APIs, see\n    http://docs.python-requests.org/en/latest/user/quickstart/\n\"\"\"\n\n# 2. Reading a CSV file ====\n\n\"\"\" Wes McKinney's pandas package gives you 'DataFrame' objects in Python. If\n    you've used R, you will be familiar with the idea of the \"data.frame\" already.\n\"\"\"\n\nimport pandas as pd\nimport numpy as np\nimport scipy as sp\npets = pd.read_csv(fn)\npets\n#        name  age  weight species\n# 0    fluffy    3      14     cat\n# 1  vesuvius    6      23    fish\n# 2       rex    5      34     dog\n\n\"\"\" R users: note that Python, like most C-influenced programming languages, starts\n    indexing from 0. R starts indexing at 1 due to Fortran influence.\n\"\"\"\n\n# two different ways to print out a column\npets.age\npets[\"age\"]\n\npets.head(2)  # prints first 2 rows\npets.tail(1)  # prints last row\n\npets.name[1]  # 'vesuvius'\npets.species[0]  # 'cat'\npets[\"weight\"][2]  # 34\n\n# in R, you would expect to get 3 rows doing this, but here you get 2:\npets.age[0:2]\n# 0    3\n# 1    6\n\nsum(pets.age) * 2  # 28\nmax(pets.weight) - min(pets.weight)  # 20\n\n\"\"\" If you are doing some serious linear algebra and number-crunching, you may\n    just want arrays, not DataFrames. DataFrames are ideal for combining columns\n    of different types.\n\"\"\"\n\n# 3. Charts ====\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# To do data visualization in Python, use matplotlib\n\nplt.hist(pets.age);\n\nplt.boxplot(pets.weight);\n\nplt.scatter(pets.age, pets.weight)\nplt.xlabel(\"age\")\nplt.ylabel(\"weight\");\n\n# seaborn sits atop matplotlib and makes plots prettier\n\nimport seaborn as sns\n\nplt.scatter(pets.age, pets.weight)\nplt.xlabel(\"age\")\nplt.ylabel(\"weight\");\n\n# there are also some seaborn-specific plotting functions\n# notice how seaborn automatically labels the x-axis on this barplot\nsns.barplot(pets[\"age\"])\n\n# R veterans can still use ggplot\nfrom ggplot import *\nggplot(aes(x=\"age\",y=\"weight\"), data=pets) + geom_point() + labs(title=\"pets\")\n# source: https://pypi.python.org/pypi/ggplot\n\n# there's even a d3.js port: https://github.com/mikedewar/d3py\n\n# 4. Simple data cleaning and exploratory analysis ====\n\n\"\"\" Here's a more complicated example that demonstrates a basic data\n    cleaning workflow leading to the creation of some exploratory plots\n    and the running of a linear regression.\n        The data set was transcribed from Wikipedia by hand. It contains\n    all the Holy Roman Emperors and the important milestones in their lives\n    (birth, death, coronation, etc.).\n        The goal of the analysis will be to explore whether a relationship\n    exists between emperor birth year and emperor lifespan.\n    data source: https://en.wikipedia.org/wiki/Holy_Roman_Emperor\n\"\"\"\n\n# load some data on Holy Roman Emperors\nurl = \"https://raw.githubusercontent.com/adambard/learnxinyminutes-docs/master/hre.csv\"\nr = requests.get(url)\nfp = \"hre.csv\"\nwith open(fp, \"wb\") as f:\n    f.write(r.text.encode(\"UTF-8\"))\n\nhre = pd.read_csv(fp)\n\nhre.head()\n\"\"\"\n   Ix      Dynasty        Name        Birth             Death\n0 NaN  Carolingian   Charles I  2 April 742    28 January 814\n1 NaN  Carolingian     Louis I          778       20 June 840\n2 NaN  Carolingian   Lothair I          795  29 September 855\n3 NaN  Carolingian    Louis II          825     12 August 875\n4 NaN  Carolingian  Charles II  13 June 823     6 October 877\n\n       Coronation 1   Coronation 2 Ceased to be Emperor\n0   25 December 800            NaN       28 January 814\n1  11 September 813  5 October 816          20 June 840\n2       5 April 823            NaN     29 September 855\n3        Easter 850     18 May 872        12 August 875\n4   29 December 875            NaN        6 October 877\n\"\"\"\n\n# clean the Birth and Death columns\n\nimport re  # module for regular expressions\n\nrx = re.compile(r'\\d+$')  # match trailing digits\n\n\"\"\" This function applies the regular expression to an input column (here Birth,\n    Death), flattens the resulting list, converts it to a Series object, and\n    finally converts the type of the Series object from string to integer. For\n    more information into what different parts of the code do, see:\n      - https://docs.python.org/2/howto/regex.html\n      - http://stackoverflow.com/questions/11860476/how-to-unlist-a-python-list\n      - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.html\n\"\"\"\n\nfrom functools import reduce\n\ndef extractYear(v):\n    return(pd.Series(reduce(lambda x, y: x + y, map(rx.findall, v), [])).astype(int))\n\nhre[\"BirthY\"] = extractYear(hre.Birth)\nhre[\"DeathY\"] = extractYear(hre.Death)\n\n# make a column telling estimated age\nhre[\"EstAge\"] = hre.DeathY.astype(int) - hre.BirthY.astype(int)\n\n# simple scatterplot, no trend line, color represents dynasty\nsns.lmplot(\"BirthY\", \"EstAge\", data=hre, hue=\"Dynasty\", fit_reg=False)\n\n# use scipy to run a linear regression\nfrom scipy import stats\n(slope, intercept, rval, pval, stderr) = stats.linregress(hre.BirthY, hre.EstAge)\n# code source: http://wiki.scipy.org/Cookbook/LinearRegression\n\n# check the slope\nslope  # 0.0057672618839073328\n\n# check the R^2 value:\nrval**2  # 0.020363950027333586\n\n# check the p-value\npval  # 0.34971812581498452\n\n# use seaborn to make a scatterplot and plot the linear regression trend line\nsns.lmplot(\"BirthY\", \"EstAge\", data=hre)\n\n\"\"\" For more information on seaborn, see\n      - http://web.stanford.edu/~mwaskom/software/seaborn/\n      - https://github.com/mwaskom/seaborn\n    For more information on SciPy, see\n      - http://wiki.scipy.org/SciPy\n      - http://wiki.scipy.org/Cookbook/\n    To see a version of the Holy Roman Emperors analysis using R, see\n      - http://github.com/e99n09/R-notes/blob/master/holy_roman_emperors_dates.R\n\"\"\"\n```\n\nIf you want to learn more, get _Python for Data Analysis_ by Wes McKinney. It's a superb resource and I used it as a reference when writing this tutorial.\n\nYou can also find plenty of interactive IPython tutorials on subjects specific to your interests, like Cam Davidson-Pilon's [Probabilistic Programming and Bayesian Methods for Hackers](http://camdavidsonpilon.github.io/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/).\n\nSome more modules to research:\n\n   - text analysis and natural language processing: [nltk](http://www.nltk.org)\n   - social network analysis: [igraph](http://igraph.org/python/)\n"
        },
        {
          "name": "qml.md",
          "type": "blob",
          "size": 11.236328125,
          "content": "---\nname: QML\ncontributors:\n    - [\"Furkan Uzumcu\", \"https://zmc.space/\"]\nfilename: learnqml.qml\n---\n\n```qml\n// This is a completely valid QML file that you can run using `qmlscene` if you copy the contents\n// into a *.qml file.\n// Comments start with double forward slashes.\n/* Or you\n   can have\n   multi line\n   comments\n */\n\n// Import statement syntax is\n// import ${MODULE_NAME} [${VERSION_NUMBER}] [as ${QUALIFIER}]\nimport QtQuick 2.15\nimport QtQuick.Window 2.15\nimport QtQuick.Controls 2.15 as QQC\nimport QtQuick.Layouts 1.15\nimport Qt.labs.platform 1.1\n\n// Each QML document can contain only one top level type\nWindow {\n    // Each object has a special and optional `id` attribute that can be used to refer to the\n    // declared objects. An `id` has to be unique in the same document.\n    id: root\n    width: 400\n    height: 600\n    title: \"Learn QML in Y Minutes\"\n\n    Item {\n        // Every object that can be declared inherits from QObject and contains at\n        // least one property, which is `objectName`. All the other properties are\n        // added by extending `QObject` type. This is an `Item` type and it contains\n        // the additional `width` and `height` properties and more.\n        objectName: \"My Item\"\n        // `id`s in the same document can be used anywhere in the same file.\n        // You cannot access an `id` from a different file.\n        width: root.width\n    }\n\n    // Signals are used to communicate that a certain event happened.\n    // Some types have built-in signals\n    Timer {\n        id: timer\n        interval: 500\n        onTriggered: {\n            console.log(\"Timer triggered!\")\n        }\n    }\n\n    QtObject {\n        id: objSignals\n        // You can also declare your own signals.\n        signal clicked()\n        // Signals can also have arguments.\n        signal mousePositionChanged(int x, int y)\n        // The way to react to a signal emission is by adding signal handlers to\n        // the immediate object that the signal belongs to.\n        onClicked: () => {\n            // Do stuff here.\n            console.log(\"objSignals.clicked() signal is emitted.\")\n        }\n        // Signal handlers must explicitly declare the arguments.\n        onMousePositionChanged: (x, y) => {\n            // Do stuff here.\n            console.log(\"objSignals.mousePositionChanged() signal is emitted. x=\", x, \"y=\", y)\n        }\n    }\n\n    // If you want to declare signal handlers for other objects, you can use\n    // `Connections`.\n    Connections {\n        target: objSignals\n\n        // You can then declare functions with the same name as the signal\n        // handler.\n        function onClicked() {\n            console.log(\"objSignals.clicked() signal is handled from Connections.\")\n        }\n    }\n\n    Item {\n        visible: false\n\n        // An object can support having child objects. You can add child objects\n        // by declaring types as follows:\n        Rectangle {\n            width: 16\n            height: 16\n            color: \"red\"\n        }\n    }\n\n    Item {\n        id: objProperties\n        // You can also declare your own properties.\n        // Syntax for declaring is\n        // [default] [required] [readonly] property ${TYPE} ${NAME}\n        property color nextColor\n        // Read only properties have to be initialized when declared.\n        readonly property color defaultColor: \"red\"\n        // Required properties have to be initialized where the reusable type is\n        // used.\n        required property color initialColor\n\n        // NOTE: Although the initial assignment can be done in the same file,\n        // it is not often the use case.\n        initialColor: \"green\"\n\n        // Properties are type safe and a property can only be assigned a value\n        // that matches the property type.\n        // property int volume: \"four\" // ERROR!\n\n        Item {\n            // You can create alias properties that hold a reference to another\n            // property.\n\n            property alias parentNextColor: objProperties.nextColor\n\n            // Assignments to alias properties alter the property that it holds\n            // a reference to.\n            parentNextColor: \"blue\" // Changes objProperties.nextColor\n            // Since `parentNextColor` is an alias to `nextColor`, any changes\n            // to `nextColor` will also be reflected to `parentNextColor`.\n        }\n    }\n\n    Item {\n        // Property assignment values can either be static or binding\n        // expressions.\n        // Static value\n        property int radius: 32\n        // Binding expressions describe a property's relationship to other\n        // properties. When the value of `radius` changes, the expression here\n        // will be re-evaluated.\n        property int diameter: radius * 2\n\n        onDiameterChanged: {\n            console.log(\"onDiameterChanged:\", diameter)\n        }\n    }\n\n    ListView {\n        // Attached properties and signal handlers provide a way to extend an\n        // existing object and provide more information that is otherwise not\n        // immediately available.\n        width: 100\n        height: 30\n        model: 3\n        delegate: Rectangle {\n            // ListView provides an attached property for its children that can\n            // be used to access more information.\n            color: ListView.isCurrentItem ? \"green\" : \"red\"\n        }\n        // Attached types can also have signal handlers.\n        // `Component` is attached to every type that's available in QML.\n        Component.onCompleted: {\n            console.log(\"This signal handler is called after object is created.\")\n        }\n    }\n\n    Rectangle {\n        // Since this rectangle is not created by the ListView, the attached\n        // type is not available.\n        color: ListView.isCurrentItem ? \"green\" : \"red\"\n    }\n\n    QtObject {\n        id: calculator\n\n        // Objects can also declare methods. Function declarations can annotate\n        // the arguments, or have no arguments at all.\n        function add(a: int, b: int): int {\n            // Semicolon at the end of a line is optional.\n            return a + b\n        }\n\n        function multiply(a: real, b: real): real {\n            return a * b;\n        }\n    }\n\n    MouseArea {\n        anchors.fill: parent\n        onClicked: (mouse) => {\n            console.log(\"2 + 2 =\", calculator.add(2, 2))\n        }\n    }\n\n    Item {\n        width: 100\n        // Methods can also be used as binding expressions. When `width`\n        // changes, the binding expression will evaluate and call `multiply`.\n        height: calculator.multiply(width, 0.5)\n        opacity: calculateOpacity()\n\n        function calculateOpacity() {\n            // If the function declaration contains references to other\n            // properties, changes to those properties also trigger a binding\n            // evaluation.\n            return height < 50 ? 0.5 : 1\n        }\n    }\n\n    // Each QML file that starts with an upper case name declares a re-usable\n    // component, e.g \"RedRectangle.qml\".\n    // In addition, reusable components can be declared in-line.\n    component RedRectangle: Rectangle {\n        color: \"red\"\n    }\n\n    // This inline component can then be used in the same file, or in other\n    // files by prefixing the type name with the file name that it belongs to.\n    //\n    // ${FILE_NAME}.RedRectangle { }\n    // or\n    RedRectangle {\n    }\n\n    // QML also supports enumeration declarations.\n    component MyText: Text {\n        enum TextType {\n            Normal,\n            Heading\n        }\n\n        // Enum types are assigned to integer properties.\n        property int textType: MyText.TextType.Normal\n\n        font.bold: textType == MyText.TextType.Heading\n        font.pixelSize: textType == MyText.TextType.Heading ? 24 : 12\n    }\n\n    // ----- Interactive Area\n\n    QQC.ScrollView {\n        anchors.fill: parent\n        contentWidth: container.implicitWidth\n        contentHeight: container.implicitHeight\n\n        Column {\n            id: container\n            spacing: 6\n\n            Row {\n                spacing: 2\n\n                QQC.Label {\n                    width: 200\n                    anchors.verticalCenter: parent.verticalCenter\n                    text: \"Click to start the timer.\\nCheck the logs!\"\n                    wrapMode: QQC.Label.WordWrap\n                }\n\n                QQC.Button {\n                    text: timer.running ? \"Timer Running\" : \"Start Timer\"\n                    onClicked: {\n                        timer.start()\n                    }\n                }\n            }\n\n            Row {\n                spacing: 2\n\n                QQC.Label {\n                    width: 200\n                    anchors.verticalCenter: parent.verticalCenter\n                    text: \"Click to emit objSignals.clicked() signal\"\n                    wrapMode: QQC.Label.WordWrap\n                }\n\n                QQC.Button {\n                    property int emissionCount: 0\n\n                    text: \"Emitted \" + emissionCount + \" times.\"\n                    onClicked: {\n                        objSignals.clicked()\n                        emissionCount++\n                    }\n                }\n            }\n\n            Row {\n                spacing: 2\n\n                QQC.Label {\n                    width: 200\n                    anchors.verticalCenter: parent.verticalCenter\n                    text: \"Click to emit objSignals.mousePositionChanged() signal\"\n                    wrapMode: QQC.Label.WordWrap\n                }\n\n                QQC.Button {\n                    property int emissionCount: 0\n\n                    text: \"Emitted \" + emissionCount + \" times.\"\n                    onClicked: {\n                        objSignals.mousePositionChanged(32, 32)\n                        emissionCount++\n                    }\n                }\n            }\n\n            Rectangle {\n                width: 200\n                height: 80\n                color: objProperties.nextColor\n\n                QQC.Label {\n                    width: 200\n                    anchors.verticalCenter: parent.verticalCenter\n                    text: \"Click to change nextColor property.\"\n                    wrapMode: QQC.Label.WordWrap\n                }\n\n                TapHandler {\n                    onTapped: {\n                        colorDialog.open()\n                    }\n                }\n\n                ColorDialog {\n                    id: colorDialog\n                    currentColor: objProperties.initialColor\n                    onColorChanged: {\n                        objProperties.nextColor = color\n\n                    }\n                }\n            }\n\n            Row {\n                spacing: 2\n\n                Rectangle {\n                    width: 200\n                    height: 80\n                    color: \"red\"\n                    radius: radiusSlider.value\n\n                    QQC.Label {\n                        width: parent.width\n                        anchors.centerIn: parent\n                        text: \"Use slider to change radius\"\n                        wrapMode: QQC.Label.WordWrap\n                        horizontalAlignment: Qt.AlignHCenter\n                    }\n                }\n\n                QQC.Slider {\n                    id: radiusSlider\n                    width: 100\n                    anchors.verticalCenter: parent.verticalCenter\n                    from: 0\n                    to: 80\n                }\n            }\n        }\n    }\n}\n```\n"
        },
        {
          "name": "qsharp.md",
          "type": "blob",
          "size": 7.2890625,
          "content": "---\nname: Q#\ncontributors:\n    - [\"Vincent van Wingerden\", \"https://github.com/vivanwin\"]\n    - [\"Mariia Mykhailova\", \"https://github.com/tcNickolas\"]\n    - [\"Andrew Ryan Davis\", \"https://github.com/AndrewDavis1191\"]\n    - [\"Alex Hansen\", \"https://github.com/sezna\"]\nfilename: LearnQSharp.qs\n---\n\nQ# is a high-level domain-specific language which enables developers to write quantum algorithms. Q# programs can be executed on a quantum simulator running on a classical computer and (in future) on quantum computers.\n\n```c#\n// Single-line comments start with //\n\n\n/////////////////////////////////////\n// 1. Quantum data types and operators\n\n// The most important part of quantum programs is qubits.\n// In Q# type Qubit represents the qubits which can be used.\n// This will allocate an array of two new qubits as the variable qs.\noperation QuantumDataTypes() : Unit {\n    use qs = Qubit[2];\n\n    // The qubits have internal state that you cannot access to read or modify directly.\n    // You can inspect the current state of your quantum program\n    // if you're running it on a classical simulator.\n    // Note that this will not work on actual quantum hardware!\n    Std.Diagnostics.DumpMachine();\n\n    // If you want to change the state of a qubit\n    // you have to do this by applying quantum gates to the qubit.\n    H(qs[0]);   // This changes the state of the first qubit\n    // from |0⟩ (the initial state of allocated qubits)\n    // to (|0⟩ + |1⟩) / sqrt(2).\n    // qs[1] = |1⟩; - this does NOT work, you have to manipulate a qubit by using gates.\n\n    // You can apply multi-qubit gates to several qubits.\n    CNOT(qs[0], qs[1]);\n\n    // You can also apply a controlled version of a gate:\n    // a gate that is applied if all control qubits are in |1⟩ state.\n    // The first argument is an array of control qubits,\n    // the second argument is the target qubit.\n    Controlled Y([qs[0]], qs[1]);\n\n    // If you want to apply an anti-controlled gate\n    // (a gate that is applied if all control qubits are in |0⟩ state),\n    // you can use a library function.\n    ApplyControlledOnInt(0, X, [qs[0]], qs[1]);\n\n    // To read the information from the quantum system, you use measurements.\n    // Measurements return a value of Result data type: Zero or One.\n    // You can print measurement results as a classical value.\n    Message($\"Measured {M(qs[0])}, {M(qs[1])}\");\n}\n\n\n/////////////////////////////////////\n// 2. Classical data types and operators\n\nfunction ClassicalDataTypes() : Unit {\n    // Numbers in Q# can be stored in Int, BigInt or Double.\n    let i = 1;            // This defines an Int variable i equal to 1\n    let bi = 1L;          // This defines a BigInt variable bi equal to 1\n    let d = 1.0;          // This defines a Double variable d equal to 1\n\n    // Arithmetic is done as expected, as long as the types are the same\n    let n = 2 * 10;                // = 20\n    // Q# does not have implicit type cast,\n    // so to perform arithmetic on values of different types,\n    // you need to cast type explicitly\n    let nd = Std.Convert.IntAsDouble(2) * 1.0; // = 20.0\n\n    // Boolean type is called Bool\n    let trueBool = true;\n    let falseBool = false;\n\n    // Logic operators work as expected\n    let andBool = true and false;\n    let orBool = true or false;\n    let notBool = not false;\n\n    // Strings\n    let str = \"Hello World!\";\n\n    // Equality is ==\n    let x = 10 == 15; // is false\n\n    // Range is a sequence of integers and can be defined like: start..step..stop\n    let xi = 1..2..7; // Gives the sequence 1,3,5,7\n\n    // Assigning new value to a variable:\n    // by default all Q# variables are immutable;\n    // if the variable was defined using let, you cannot reassign its value.\n\n    // When you want to make a variable mutable, you have to declare it as such,\n    // and use the set word to update value\n    mutable xii = true;\n    set xii = false;\n\n    // You can create an array for any data type like this\n    let xiii = [0.0, size = 10];\n\n    // Getting an element from an array\n    let xiv = xiii[8];\n\n    // Assigning a new value to an array element\n    mutable xv = [0.0, size = 10];\n    set xv w/= 5 <- 1.0;\n}\n\n\n/////////////////////////////////////\n// 3. Control flow\n\noperation ControlFlow() : Unit {\n    let a = 1;\n    // If expressions support a true branch, elif, and else.\n    if (a == 1) {\n        // ...\n    } elif (a == 2) {\n        // ...\n    } else {\n        // ...\n    }\n    use qubits = Qubit[2];\n\n    // For loops can be used to iterate over an array\n    for qubit in qubits {\n        X(qubit);\n    }\n\n    // Regular for loops can be used to iterate over a range of numbers\n    for index in 0..Length(qubits) - 1 {\n        X(qubits[index]);\n    }\n\n    // While loops are restricted for use in classical context only\n    mutable index = 0;\n    while (index < 10) {\n        set index += 1;\n    }\n\n    let success_criteria = true;\n    // Quantum equivalent of a while loop is a repeat-until-success loop.\n    // Because of the probabilistic nature of quantum computing sometimes\n    // you want to repeat a certain sequence of operations\n    // until a specific condition is achieved; you can use this loop to express this.\n    repeat {\n        // Your operation here\n    } until (success_criteria) // This could be a measurement to check if the state is reached\n    fixup {\n        // Resetting to the initial conditions, if required\n    }\n}\n\n/////////////////////////////////////\n// 4. Putting it all together\n\n// Q# code is written in operations and functions\noperation ApplyXGate(source : Qubit) : Unit {\n    X(source);\n}\n\n// If the operation implements a unitary transformation, you can define\n// adjoint and controlled variants of it.\n// The easiest way to do that is to add \"is Adj + Ctl\" after Unit.\n// This will tell the compiler to generate the variants automatically.\noperation ApplyXGateCA(source : Qubit) : Unit is Adj + Ctl {\n    X(source);\n}\n\n// Now you can call Adjoint ApplyXGateCA and Controlled ApplyXGateCA.\n\n\n// To run Q# code, you can put @EntryPoint() before the operation you want to run first\noperation XGateDemo() : Unit {\n    use q = Qubit();\n    ApplyXGate(q);\n}\n\n// Here is a simple example: a quantum random number generator.\n// We will generate a classical array of random bits using quantum code.\n// Callables (functions or operations) named `Main` are used as entry points.\noperation Main() : Unit {\n    mutable bits = [0, size = 5];                // Array we'll use to store bits\n    use q  = Qubit();\n    {\n        // Allocate a qubit\n        for i in 0..4 {\n            // Generate each bit independently\n            H(q);                             // Hadamard gate sets equal superposition\n            let result = M(q);                // Measure qubit gets 0|1 with 50/50 prob\n            let bit = result == Zero ? 0 | 1; // Convert measurement result to integer\n            set bits w/= i <- bit;            // Write generated bit to an array\n        }\n    }\n    Message($\"{bits}\");                       // Print the result\n}\n```\n\n\n## Further Reading\n\nThe Quantum Katas ([repo](https://github.com/microsoft/qsharp/tree/main/katas) [hosted tutorials](https://quantum.microsoft.com/en-us/tools/quantum-katas) offer great self-paced tutorials and programming exercises to learn quantum computing and Q#. \n\n[Q# Documentation](https://docs.microsoft.com/quantum/) is official Q# documentation, including language reference and user guides.\n"
        },
        {
          "name": "qt.md",
          "type": "blob",
          "size": 4.2880859375,
          "content": "---\ncategory: framework\nname: Qt\nfilename: learnqt.cpp\ncontributors:\n    - [\"Aleksey Kholovchuk\", \"https://github.com/vortexxx192\"]\n---\n\n**Qt** is a widely-known framework for developing cross-platform software that can be run on various software and hardware platforms with little or no change in the code, while having the power and speed of native applications. Though **Qt** was originally written in *C++*, there are its ports to other languages: *[PyQt](../pyqt/)*, *QtRuby*, *PHP-Qt*, etc.\n\n**Qt** is great for creating applications with graphical user interface (GUI). This tutorial is how to do it in *C++*.\n\n```c++\n/*\n * Let's start classically\n */\n\n// all headers from Qt framework start with capital letter 'Q'\n#include <QApplication>\n#include <QLineEdit>\n\nint main(int argc, char *argv[]) {\n\t // create an object to manage application-wide resources\n    QApplication app(argc, argv);\n\n    // create line edit widget and show it on screen\n    QLineEdit lineEdit(\"Hello world!\");\n    lineEdit.show();\n\n    // start the application's event loop\n    return app.exec();\n}\n```\n\nGUI-related part of **Qt** is all about *widgets* and *connections* between them.\n\n[READ MORE ABOUT WIDGETS](http://doc.qt.io/qt-5/qtwidgets-index.html)\n\n```c++\n/*\n * Let's create a label and a button.\n * A label should appear when a button is pressed.\n * \n * Qt code is speaking for itself.\n */\n \n#include <QApplication>\n#include <QDialog>\n#include <QVBoxLayout>\n#include <QPushButton>\n#include <QLabel>\n\nint main(int argc, char *argv[]) {\n    QApplication app(argc, argv);\n\n    QDialog dialogWindow;\n    dialogWindow.show();\n    \n    // add vertical layout \n    QVBoxLayout layout;\n    dialogWindow.setLayout(&layout);  \n\n    QLabel textLabel(\"Thanks for pressing that button\");\n    layout.addWidget(&textLabel);\n    textLabel.hide();\n\n    QPushButton button(\"Press me\");\n    layout.addWidget(&button);\n    \n    // show hidden label when the button is pressed\n    QObject::connect(&button, &QPushButton::pressed,\n                     &textLabel, &QLabel::show);\n\n    return app.exec();\n}\n```\n\nNotice that *QObject::connect* part. This method is used to connect *SIGNALS* of one objects to *SLOTS* of another.\n\n**Signals** are being emitted when certain things happen with objects, like *pressed* signal is emitted when user presses on QPushButton object.\n\n**Slots** are *actions* that might be performed in response to received signals.\n\n[READ MORE ABOUT SLOTS AND SIGNALS](http://doc.qt.io/qt-5/signalsandslots.html)\n\n\nNext, let's learn that we can not only use standard widgets but also extend their behaviour using inheritance. Let's create a button and count how many times it was pressed. For this purpose we define our own class *CounterLabel*.  It must be declared in separate file because of specific Qt architecture.\n\n```c++\n// counterlabel.hpp\n\n#ifndef COUNTERLABEL\n#define COUNTERLABEL\n\n#include <QLabel>\n\nclass CounterLabel : public QLabel {\n    Q_OBJECT  // Qt-defined macros that must be present in every custom widget\n\npublic:\n    CounterLabel() : counter(0) {\n        setText(\"Counter has not been increased yet\");  // method of QLabel\n    }\n\npublic slots:\n    // action that will be called in response to button press\n    void increaseCounter() {\n        setText(QString(\"Counter value: %1\").arg(QString::number(++counter)));\n    }\n\nprivate:\n    int counter;\n};\n\n#endif // COUNTERLABEL\n```\n\n```c++\n// main.cpp\n// Almost the same as in previous example\n\n#include <QApplication>\n#include <QDialog>\n#include <QVBoxLayout>\n#include <QPushButton>\n#include <QString>\n#include \"counterlabel.hpp\"\n\nint main(int argc, char *argv[]) {\n    QApplication app(argc, argv);\n\n    QDialog dialogWindow;\n    dialogWindow.show();\n\n    QVBoxLayout layout;\n    dialogWindow.setLayout(&layout);\n\n    CounterLabel counterLabel;\n    layout.addWidget(&counterLabel);\n\n    QPushButton button(\"Push me once more\");\n    layout.addWidget(&button);\n    QObject::connect(&button, &QPushButton::pressed,\n                     &counterLabel, &CounterLabel::increaseCounter);\n\n    return app.exec();\n}\n```\n\nThat's it! Of course, Qt framework is much much larger than the part that was covered in this tutorial, so be ready to read and practice.\n\n## Further reading\n\n- [Qt 4.8 tutorials](http://doc.qt.io/qt-4.8/tutorials.html)\n- [Qt 5 tutorials](http://doc.qt.io/qt-5/qtexamplesandtutorials.html)\n\nGood luck and have fun!\n"
        },
        {
          "name": "r.md",
          "type": "blob",
          "size": 24.115234375,
          "content": "---\nname: R\ncontributors:\n    - [\"e99n09\", \"http://github.com/e99n09\"]\n    - [\"isomorphismes\", \"http://twitter.com/isomorphisms\"]\n    - [\"kalinn\", \"http://github.com/kalinn\"]\n    - [\"mribeirodantas\", \"http://github.com/mribeirodantas\"]\nfilename: learnr.r\n---\n\nR is a statistical computing language. It has lots of libraries for uploading and cleaning data sets, running statistical procedures, and making graphs. You can also run `R` commands within a LaTeX document.\n\n```r\n# Comments start with hash signs, also known as number symbols (#).\n\n# You can't make multi-line comments,\n# but you can stack multiple comments like so.\n\n# in Windows you can use CTRL-ENTER to execute a line.\n# on Mac it is COMMAND-ENTER\n\n\n\n#############################################################################\n# Stuff you can do without understanding anything about programming\n#############################################################################\n\n# In this section, we show off some of the cool stuff you can do in\n# R without understanding anything about programming. Do not worry\n# about understanding everything the code does. Just enjoy!\n\ndata()          # browse pre-loaded data sets\ndata(rivers)    # get this one: \"Lengths of Major North American Rivers\"\nls()            # notice that \"rivers\" now appears in the workspace\nhead(rivers)    # peek at the data set\n# 735 320 325 392 524 450\n\nlength(rivers)  # how many rivers were measured?\n# 141\nsummary(rivers) # what are some summary statistics?\n#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\n#  135.0   310.0   425.0   591.2   680.0  3710.0\n\n# make a stem-and-leaf plot (a histogram-like data visualization)\nstem(rivers)\n\n#  The decimal point is 2 digit(s) to the right of the |\n#\n#   0 | 4\n#   2 | 011223334555566667778888899900001111223333344455555666688888999\n#   4 | 111222333445566779001233344567\n#   6 | 000112233578012234468\n#   8 | 045790018\n#  10 | 04507\n#  12 | 1471\n#  14 | 56\n#  16 | 7\n#  18 | 9\n#  20 |\n#  22 | 25\n#  24 | 3\n#  26 |\n#  28 |\n#  30 |\n#  32 |\n#  34 |\n#  36 | 1\n\nstem(log(rivers)) # Notice that the data are neither normal nor log-normal!\n# Take that, Bell curve fundamentalists.\n\n#  The decimal point is 1 digit(s) to the left of the |\n#\n#  48 | 1\n#  50 |\n#  52 | 15578\n#  54 | 44571222466689\n#  56 | 023334677000124455789\n#  58 | 00122366666999933445777\n#  60 | 122445567800133459\n#  62 | 112666799035\n#  64 | 00011334581257889\n#  66 | 003683579\n#  68 | 0019156\n#  70 | 079357\n#  72 | 89\n#  74 | 84\n#  76 | 56\n#  78 | 4\n#  80 |\n#  82 | 2\n\n# make a histogram:\nhist(rivers, col = \"#333333\", border = \"white\", breaks = 25)\nhist(log(rivers), col = \"#333333\", border = \"white\", breaks = 25)\n# play around with these parameters, you'll do more plotting later\n\n# Here's another neat data set that comes pre-loaded. R has tons of these.\ndata(discoveries)\nplot(discoveries, col = \"#333333\", lwd = 3, xlab = \"Year\",\n     main=\"Number of important discoveries per year\")\nplot(discoveries, col = \"#333333\", lwd = 3, type = \"h\", xlab = \"Year\",\n     main=\"Number of important discoveries per year\")\n\n# Rather than leaving the default ordering (by year),\n# we could also sort to see what's typical:\nsort(discoveries)\n#  [1]  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2\n# [26]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  3  3  3\n# [51]  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  4  4  4  4  4  4  4\n# [76]  4  4  4  4  5  5  5  5  5  5  5  6  6  6  6  6  6  7  7  7  7  8  9 10 12\n\nstem(discoveries, scale = 2)\n#\n#  The decimal point is at the |\n#\n#   0 | 000000000\n#   1 | 000000000000\n#   2 | 00000000000000000000000000\n#   3 | 00000000000000000000\n#   4 | 000000000000\n#   5 | 0000000\n#   6 | 000000\n#   7 | 0000\n#   8 | 0\n#   9 | 0\n#  10 | 0\n#  11 |\n#  12 | 0\n\nmax(discoveries)\n# 12\nsummary(discoveries)\n#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\n#    0.0     2.0     3.0     3.1     4.0    12.0\n\n# Roll a die a few times\nround(runif(7, min = .5, max = 6.5))\n# 1 4 6 1 4 6 4\n# Your numbers will differ from mine unless we set the same random.seed(31337)\n\n# Draw from a standard Gaussian 9 times\nrnorm(9)\n# [1]  0.07528471  1.03499859  1.34809556 -0.82356087  0.61638975 -1.88757271\n# [7] -0.59975593  0.57629164  1.08455362\n\n\n\n##################################################\n# Data types and basic arithmetic\n##################################################\n\n# Now for the programming-oriented part of the tutorial.\n# In this section you will meet the important data types of R:\n# integers, numerics, characters, logicals, and factors.\n# There are others, but these are the bare minimum you need to\n# get started.\n\n# INTEGERS\n# Long-storage integers are written with L\n5L          # 5\nclass(5L)   # \"integer\"\n# (Try ?class for more information on the class() function.)\n# In R, every single value, like 5L, is considered a vector of length 1\nlength(5L)  # 1\n# You can have an integer vector with length > 1 too:\nc(4L, 5L, 8L, 3L)          # 4 5 8 3\nlength(c(4L, 5L, 8L, 3L))  # 4\nclass(c(4L, 5L, 8L, 3L))   # \"integer\"\n\n# NUMERICS\n# A \"numeric\" is a double-precision floating-point number\n5           # 5\nclass(5)    # \"numeric\"\n# Again, everything in R is a vector;\n# you can make a numeric vector with more than one element\nc(3, 3, 3, 2, 2, 1) # 3 3 3 2 2 1\n# You can use scientific notation too\n5e4         # 50000\n6.02e23     # Avogadro's number\n1.6e-35     # Planck length\n# You can also have infinitely large or small numbers\nclass(Inf)  # \"numeric\"\nclass(-Inf) # \"numeric\"\n# You might use \"Inf\", for example, in integrate(dnorm, 3, Inf);\n# this obviates Z-score tables.\n\n# BASIC ARITHMETIC\n# You can do arithmetic with numbers\n# Doing arithmetic on a mix of integers and numerics gives you another numeric\n10L + 66L   # 76    # integer plus integer gives integer\n53.2 - 4    # 49.2  # numeric minus numeric gives numeric\n2.0 * 2L    # 4     # numeric times integer gives numeric\n3L / 4      # 0.75  # integer over numeric gives numeric\n3 %% 2      # 1     # the remainder of two numerics is another numeric\n# Illegal arithmetic yields you a \"not-a-number\":\n0 / 0       # NaN\nclass(NaN)  # \"numeric\"\n# You can do arithmetic on two vectors with length greater than 1,\n# so long as the larger vector's length is an integer multiple of the smaller\nc(1, 2, 3) + c(1, 2, 3)     # 2 4 6\n# Since a single number is a vector of length one, scalars are applied \n# elementwise to vectors\n(4 * c(1, 2, 3) - 2) / 2    # 1 3 5\n# Except for scalars, use caution when performing arithmetic on vectors with \n# different lengths. Although it can be done, \nc(1, 2, 3, 1, 2, 3) * c(1, 2)               # 1 4 3 2 2 6\n# Matching lengths is better practice and easier to read most times\nc(1, 2, 3, 1, 2, 3) * c(1, 2, 1, 2, 1, 2)   # 1 4 3 2 2 6\n\n# CHARACTERS\n# There's no difference between strings and characters in R\n\"Horatio\"           # \"Horatio\"\nclass(\"Horatio\")    # \"character\"\nclass(\"H\")          # \"character\"\n# Those were both character vectors of length 1\n# Here is a longer one:\nc(\"alef\", \"bet\", \"gimmel\", \"dalet\", \"he\")\n# => \"alef\"   \"bet\"    \"gimmel\" \"dalet\"  \"he\"\nlength(c(\"Call\",\"me\",\"Ishmael\")) # 3\n# You can do regex operations on character vectors:\nsubstr(\"Fortuna multis dat nimis, nulli satis.\", 9, 15)  # \"multis \"\ngsub('u', 'ø', \"Fortuna multis dat nimis, nulli satis.\") # \"Fortøna møltis dat nimis, nølli satis.\"\n# R has several built-in character vectors:\nletters\n# =>\n#  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n# [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\nmonth.abb # \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\n# LOGICALS\n# In R, a \"logical\" is a boolean\n                \nclass(TRUE)     # \"logical\"\nclass(FALSE)    # \"logical\"\n# Their behavior is normal\nTRUE == TRUE    # TRUE\nTRUE == FALSE   # FALSE\nFALSE != FALSE  # FALSE\nFALSE != TRUE   # TRUE\n# Missing data (NA) is logical, too\nclass(NA)       # \"logical\"\n# Use | and & for logic operations.\n# OR\nTRUE | FALSE    # TRUE\n# AND\nTRUE & FALSE    # FALSE\n# Applying | and & to vectors returns elementwise logic operations\nc(TRUE, FALSE, FALSE) | c(FALSE, TRUE, FALSE)   # TRUE TRUE FALSE\nc(TRUE, FALSE, TRUE) & c(FALSE, TRUE, TRUE)     # FALSE FALSE TRUE\n# You can test if x is TRUE\nisTRUE(TRUE)    # TRUE\n# Here we get a logical vector with many elements:\nc(\"Z\", \"o\", \"r\", \"r\", \"o\") == \"Zorro\"   # FALSE FALSE FALSE FALSE FALSE\nc(\"Z\", \"o\", \"r\", \"r\", \"o\") == \"Z\"       # TRUE FALSE FALSE FALSE FALSE\n\n# FACTORS\n# The factor class is for categorical data\n# Factors can be ordered (like grade levels) or unordered (like colors)\nfactor(c(\"blue\", \"blue\", \"green\", NA, \"blue\"))\n#  blue blue green   <NA>   blue\n# Levels: blue green\n# The \"levels\" are the values the categorical data can take\n# Note that missing data does not enter the levels\nlevels(factor(c(\"green\", \"green\", \"blue\", NA, \"blue\"))) # \"blue\" \"green\"\n# If a factor vector has length 1, its levels will have length 1, too\nlength(factor(\"green\"))         # 1\nlength(levels(factor(\"green\"))) # 1\n# Factors are commonly seen in data frames, a data structure we will cover later\ndata(infert)             # \"Infertility after Spontaneous and Induced Abortion\"\nlevels(infert$education) # \"0-5yrs\"  \"6-11yrs\" \"12+ yrs\"\n\n# NULL\n# \"NULL\" is a weird one; use it to \"blank out\" a vector\nclass(NULL) # NULL\nparakeet = c(\"beak\", \"feathers\", \"wings\", \"eyes\")\nparakeet # \"beak\"     \"feathers\" \"wings\"    \"eyes\"\nparakeet <- NULL\nparakeet # NULL\n\n# TYPE COERCION\n# Type-coercion is when you force a value to take on a different type\nas.character(c(6, 8))   # \"6\" \"8\"\nas.logical(c(1,0,1,1))  # TRUE FALSE  TRUE  TRUE\n# If you put elements of different types into a vector, weird coercions happen:\nc(TRUE, 4)          # 1 4\nc(\"dog\", TRUE, 4)   # \"dog\"  \"TRUE\" \"4\"\nas.numeric(\"Bilbo\")\n# =>\n# [1] NA\n# Warning message:\n# NAs introduced by coercion\n\n# Also note: those were just the basic data types\n# There are many more data types, such as for dates, time series, etc.\n\n\n\n##################################################\n# Variables, loops, if/else\n##################################################\n\n# A variable is like a box you store a value in for later use.\n# We call this \"assigning\" the value to the variable.\n# Having variables lets us write loops, functions, and if/else statements\n\n# VARIABLES\n# Lots of way to assign stuff:\nx = 5       # this is possible\ny <- \"1\"    # this is preferred traditionally\nTRUE -> z   # this works but is weird\n# Refer to the Internet for the behaviors and preferences about them.\n\n# LOOPS\n# We've got for loops\nfor (i in 1:4) {\n\tprint(i)\n}\n# We've got while loops\na <- 10\nwhile (a > 4) {\n\tcat(a, \"...\", sep = \"\")\n\ta <- a - 1\n}\n# Keep in mind that for and while loops run slowly in R\n# Operations on entire vectors (i.e. a whole row, a whole column)\n# or apply()-type functions (we'll discuss later) are preferred\n\n# IF/ELSE\n# Again, pretty standard\nif (4 > 3) {\n\tprint(\"4 is greater than 3\")\n} else {\n\tprint(\"4 is not greater than 3\")\n}\n# =>\n# [1] \"4 is greater than 3\"\n\n# FUNCTIONS\n# Defined like so:\njiggle <- function(x) {\n\tx = x + rnorm(1, sd=.1) # add in a bit of (controlled) noise\n\treturn(x)\n}\n# Called like any other R function:\njiggle(5)   # 5±ε. After set.seed(2716057), jiggle(5)==5.005043\n\n\n\n###########################################################################\n# Data structures: Vectors, matrices, data frames, and arrays\n###########################################################################\n\n# ONE-DIMENSIONAL\n\n# Let's start from the very beginning, and with something you already know: vectors.\nvec <- c(8, 9, 10, 11)\nvec     #  8  9 10 11\n# We ask for specific elements by subsetting with square brackets\n# (Note that R starts counting from 1)\nvec[1]          # 8\nletters[18]     # \"r\"\nLETTERS[13]     # \"M\"\nmonth.name[9]   # \"September\"\nc(6, 8, 7, 5, 3, 0, 9)[3] # 7\n# We can also search for the indices of specific components,\nwhich(vec %% 2 == 0) # 1 3\n# grab just the first or last few entries in the vector,\nhead(vec, 1)    # 8\ntail(vec, 2)    # 10 11\n# or figure out if a certain value is in the vector\nany(vec == 10)  # TRUE\n# If an index \"goes over\" you'll get NA:\nvec[6]      # NA\n# You can find the length of your vector with length()\nlength(vec) # 4\n# You can perform operations on entire vectors or subsets of vectors\nvec * 4             # 32 36 40 44\nvec[2:3] * 5        # 45 50\nany(vec[2:3] == 8)  # FALSE\n# and R has many built-in functions to summarize vectors\nmean(vec)   # 9.5\nvar(vec)    # 1.666667\nsd(vec)     # 1.290994\nmax(vec)    # 11\nmin(vec)    # 8\nsum(vec)    # 38\n# Some more nice built-ins:\n5:15        # 5  6  7  8  9 10 11 12 13 14 15\nseq(from = 0, to = 31337, by = 1337)\n# =>\n#  [1]     0  1337  2674  4011  5348  6685  8022  9359 10696 12033 13370 14707\n# [13] 16044 17381 18718 20055 21392 22729 24066 25403 26740 28077 29414 30751\n\n# TWO-DIMENSIONAL (ALL ONE CLASS)\n\n# You can make a matrix out of entries all of the same type like so:\nmat <- matrix(nrow = 3, ncol = 2, c(1, 2, 3, 4, 5, 6))\nmat\n# =>\n#      [,1] [,2]\n# [1,]    1    4\n# [2,]    2    5\n# [3,]    3    6\n# Unlike a vector, the class of a matrix is \"matrix\", no matter what's in it\nclass(mat)      # \"matrix\" \"array\"\n# Ask for the first row\nmat[1, ]        # 1 4\n# Perform operation on the first column\n3 * mat[, 1]    # 3 6 9\n# Ask for a specific cell\nmat[3, 2]       # 6\n\n# Transpose the whole matrix\nt(mat)\n# =>\n#      [,1] [,2] [,3]\n# [1,]    1    2    3\n# [2,]    4    5    6\n\n# Matrix multiplication\nmat %*% t(mat)\n# =>\n#      [,1] [,2] [,3]\n# [1,]   17   22   27\n# [2,]   22   29   36\n# [3,]   27   36   45\n\n# cbind() sticks vectors together column-wise to make a matrix\nmat2 <- cbind(1:4, c(\"dog\", \"cat\", \"bird\", \"dog\"))\nmat2\n# =>\n#      [,1] [,2]\n# [1,] \"1\"  \"dog\"\n# [2,] \"2\"  \"cat\"\n# [3,] \"3\"  \"bird\"\n# [4,] \"4\"  \"dog\"\nclass(mat2) # matrix\n# Again, note what happened!\n# Because matrices must contain entries all of the same class,\n# everything got converted to the character class\nc(class(mat2[, 1]), class(mat2[, 2]))\n\n# rbind() sticks vectors together row-wise to make a matrix\nmat3 <- rbind(c(1, 2, 4, 5), c(6, 7, 0, 4))\nmat3\n# =>\n#      [,1] [,2] [,3] [,4]\n# [1,]    1    2    4    5\n# [2,]    6    7    0    4\n# Ah, everything of the same class. No coercions. Much better.\n\n# TWO-DIMENSIONAL (DIFFERENT CLASSES)\n\n# For columns of different types, use a data frame\n# This data structure is so useful for statistical programming,\n# a version of it was added to Python in the package \"pandas\".\n\nstudents <- data.frame(c(\"Cedric\", \"Fred\", \"George\", \"Cho\", \"Draco\", \"Ginny\"),\n                       c(       3,      2,        2,     1,       0,      -1),\n                       c(     \"H\",    \"G\",      \"G\",   \"R\",     \"S\",     \"G\"))\nnames(students) <- c(\"name\", \"year\", \"house\") # name the columns\nclass(students) # \"data.frame\"\nstudents\n# =>\n#     name year house\n# 1 Cedric    3     H\n# 2   Fred    2     G\n# 3 George    2     G\n# 4    Cho    1     R\n# 5  Draco    0     S\n# 6  Ginny   -1     G\nclass(students$year)    # \"numeric\"\nclass(students[,3])     # \"factor\"\n# find the dimensions\nnrow(students)  # 6\nncol(students)  # 3\ndim(students)   # 6 3\n# The data.frame() function used to convert character vectors to factor\n# vectors by default; This has changed in R 4.0.0. If your R version is\n# older, turn this off by setting stringsAsFactors = FALSE when you\n# create the data.frame\n?data.frame\n\n# There are many twisty ways to subset data frames, all subtly unalike\nstudents$year       # 3  2  2  1  0 -1\nstudents[, 2]       # 3  2  2  1  0 -1\nstudents[, \"year\"]  # 3  2  2  1  0 -1\n\n# An augmented version of the data.frame structure is the data.table\n# If you're working with huge or panel data, or need to merge a few data\n# sets, data.table can be a good choice. Here's a whirlwind tour:\ninstall.packages(\"data.table\") # download the package from CRAN\nrequire(data.table) # load it\nstudents <- as.data.table(students)\nstudents # note the slightly different print-out\n# =>\n#      name year house\n# 1: Cedric    3     H\n# 2:   Fred    2     G\n# 3: George    2     G\n# 4:    Cho    1     R\n# 5:  Draco    0     S\n# 6:  Ginny   -1     G\nstudents[name == \"Ginny\"] # get rows with name == \"Ginny\"\n# =>\n#     name year house\n# 1: Ginny   -1     G\nstudents[year == 2] # get rows with year == 2\n# =>\n#      name year house\n# 1:   Fred    2     G\n# 2: George    2     G\n# data.table makes merging two data sets easy\n# let's make another data.table to merge with students\nfounders <- data.table(house   = c(\"G\"     , \"H\"    , \"R\"     , \"S\"),\n                       founder = c(\"Godric\", \"Helga\", \"Rowena\", \"Salazar\"))\nfounders\n# =>\n#    house founder\n# 1:     G  Godric\n# 2:     H   Helga\n# 3:     R  Rowena\n# 4:     S Salazar\nsetkey(students, house)\nsetkey(founders, house)\nstudents <- founders[students] # merge the two data sets by matching \"house\"\nsetnames(students, c(\"house\", \"houseFounderName\", \"studentName\", \"year\"))\nstudents[, order(c(\"name\", \"year\", \"house\", \"houseFounderName\")), with = F]\n# =>\n#    studentName year house houseFounderName\n# 1:        Fred    2     G           Godric\n# 2:      George    2     G           Godric\n# 3:       Ginny   -1     G           Godric\n# 4:      Cedric    3     H            Helga\n# 5:         Cho    1     R           Rowena\n# 6:       Draco    0     S          Salazar\n\n# data.table makes summary tables easy\nstudents[, sum(year), by = house]\n# =>\n#    house V1\n# 1:     G  3\n# 2:     H  3\n# 3:     R  1\n# 4:     S  0\n\n# To drop a column from a data.frame or data.table,\n# assign it the NULL value\nstudents$houseFounderName <- NULL\nstudents\n# =>\n#    studentName year house\n# 1:        Fred    2     G\n# 2:      George    2     G\n# 3:       Ginny   -1     G\n# 4:      Cedric    3     H\n# 5:         Cho    1     R\n# 6:       Draco    0     S\n\n# Drop a row by subsetting\n# Using data.table:\nstudents[studentName != \"Draco\"]\n# =>\n#    house studentName year\n# 1:     G        Fred    2\n# 2:     G      George    2\n# 3:     G       Ginny   -1\n# 4:     H      Cedric    3\n# 5:     R         Cho    1\n# Using data.frame:\nstudents <- as.data.frame(students)\nstudents[students$house != \"G\", ]\n# =>\n#   house houseFounderName studentName year\n# 4     H            Helga      Cedric    3\n# 5     R           Rowena         Cho    1\n# 6     S          Salazar       Draco    0\n\n# MULTI-DIMENSIONAL (ALL ELEMENTS OF ONE TYPE)\n\n# Arrays creates n-dimensional tables\n# All elements must be of the same type\n# You can make a two-dimensional table (sort of like a matrix)\narray(c(c(1, 2, 4, 5), c(8, 9, 3, 6)), dim = c(2, 4))\n# =>\n#      [,1] [,2] [,3] [,4]\n# [1,]    1    4    8    3\n# [2,]    2    5    9    6\n# You can use array to make three-dimensional matrices too\narray(c(c(c(2, 300, 4), c(8, 9, 0)), c(c(5, 60, 0), c(66, 7, 847))), dim = c(3, 2, 2))\n# =>\n# , , 1\n#\n#      [,1] [,2]\n# [1,]    2    8\n# [2,]  300    9\n# [3,]    4    0\n#\n# , , 2\n#\n#      [,1] [,2]\n# [1,]    5   66\n# [2,]   60    7\n# [3,]    0  847\n\n# LISTS (MULTI-DIMENSIONAL, POSSIBLY RAGGED, OF DIFFERENT TYPES)\n\n# Finally, R has lists (of vectors)\nlist1 <- list(time = 1:40)\nlist1$price = c(rnorm(40, .5*list1$time, 4)) # random\nlist1\n# You can get items in the list like so\nlist1$time # one way\nlist1[[\"time\"]] # another way\nlist1[[1]] # yet another way\n# =>\n#  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\n# [34] 34 35 36 37 38 39 40\n# You can subset list items like any other vector\nlist1$price[4]\n\n# Lists are not the most efficient data structure to work with in R;\n# unless you have a very good reason, you should stick to data.frames\n# Lists are often returned by functions that perform linear regressions\n\n##################################################\n# The apply() family of functions\n##################################################\n\n# Remember mat?\nmat\n# =>\n#      [,1] [,2]\n# [1,]    1    4\n# [2,]    2    5\n# [3,]    3    6\n# Use apply(X, MARGIN, FUN) to apply function FUN to a matrix X\n# over rows (MAR = 1) or columns (MAR = 2)\n# That is, R does FUN to each row (or column) of X, much faster than a\n# for or while loop would do\napply(mat, MAR = 2, jiggle)\n# =>\n#      [,1] [,2]\n# [1,]    3   15\n# [2,]    7   19\n# [3,]   11   23\n# Other functions: ?lapply, ?sapply\n\n# Don't feel too intimidated; everyone agrees they are rather confusing\n\n# The plyr package aims to replace (and improve upon!) the *apply() family.\ninstall.packages(\"plyr\")\nrequire(plyr)\n?plyr\n\n\n\n#########################\n# Loading data\n#########################\n\n# \"pets.csv\" is a file on the internet\n# (but it could just as easily be a file on your own computer)\nrequire(RCurl)\npets <- read.csv(textConnection(getURL(\"https://learnxinyminutes.com/pets.csv\")))\npets\nhead(pets, 2) # first two rows\ntail(pets, 1) # last row\n\n# To save a data frame or matrix as a .csv file\nwrite.csv(pets, \"pets2.csv\") # to make a new .csv file\n# set working directory with setwd(), look it up with getwd()\n\n# Try ?read.csv and ?write.csv for more information\n\n\n\n#########################\n# Statistical Analysis\n#########################\n\n# Linear regression!\nlinearModel <- lm(price ~ time, data = list1)\nlinearModel # outputs result of regression\n# =>\n# Call:\n# lm(formula = price ~ time, data = list1)\n# \n# Coefficients:\n# (Intercept)         time  \n#      0.1453       0.4943  \nsummary(linearModel) # more verbose output from the regression\n# =>\n# Call:\n# lm(formula = price ~ time, data = list1)\n#\n# Residuals:\n#     Min      1Q  Median      3Q     Max \n# -8.3134 -3.0131 -0.3606  2.8016 10.3992 \n#\n# Coefficients:\n#             Estimate Std. Error t value Pr(>|t|)    \n# (Intercept)  0.14527    1.50084   0.097    0.923    \n# time         0.49435    0.06379   7.749 2.44e-09 ***\n# ---\n# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n#\n# Residual standard error: 4.657 on 38 degrees of freedom\n# Multiple R-squared:  0.6124,\tAdjusted R-squared:  0.6022 \n# F-statistic: 60.05 on 1 and 38 DF,  p-value: 2.44e-09\ncoef(linearModel) # extract estimated parameters\n# =>\n# (Intercept)        time \n#   0.1452662   0.4943490 \nsummary(linearModel)$coefficients # another way to extract results\n# =>\n#              Estimate Std. Error    t value     Pr(>|t|)\n# (Intercept) 0.1452662 1.50084246 0.09678975 9.234021e-01\n# time        0.4943490 0.06379348 7.74920901 2.440008e-09\nsummary(linearModel)$coefficients[, 4] # the p-values \n# =>\n#  (Intercept)         time \n# 9.234021e-01 2.440008e-09 \n\n# GENERAL LINEAR MODELS\n# Logistic regression\nset.seed(1)\nlist1$success = rbinom(length(list1$time), 1, .5) # random binary\nglModel <- glm(success  ~ time, data = list1, family=binomial(link=\"logit\"))\nglModel # outputs result of logistic regression\n# =>\n# Call:  glm(formula = success ~ time, \n#\tfamily = binomial(link = \"logit\"), data = list1)\n#\n# Coefficients:\n# (Intercept)         time  \n#     0.17018     -0.01321  \n# \n# Degrees of Freedom: 39 Total (i.e. Null);  38 Residual\n# Null Deviance:\t    55.35 \n# Residual Deviance: 55.12 \t AIC: 59.12\nsummary(glModel) # more verbose output from the regression\n# =>\n# Call:\n# glm(\n#\tformula = success ~ time,\n#\tfamily = binomial(link = \"logit\"),\n#\tdata = list1)\n\n# Deviance Residuals: \n#    Min      1Q  Median      3Q     Max  \n# -1.245  -1.118  -1.035   1.202   1.327  \n# \n# Coefficients:\n#             Estimate Std. Error z value Pr(>|z|)\n# (Intercept)  0.17018    0.64621   0.263    0.792\n# time        -0.01321    0.02757  -0.479    0.632\n# \n# (Dispersion parameter for binomial family taken to be 1)\n#\n#     Null deviance: 55.352  on 39  degrees of freedom\n# Residual deviance: 55.121  on 38  degrees of freedom\n# AIC: 59.121\n# \n# Number of Fisher Scoring iterations: 3\n\n\n#########################\n# Plots\n#########################\n\n# BUILT-IN PLOTTING FUNCTIONS\n# Scatterplots!\nplot(list1$time, list1$price, main = \"fake data\")\n# Plot regression line on existing plot\nabline(linearModel, col = \"red\")\n# Get a variety of nice diagnostics\nplot(linearModel)\n# Histograms!\nhist(rpois(n = 10000, lambda = 5), col = \"thistle\")\n# Barplots!\nbarplot(c(1, 4, 5, 1, 2), names.arg = c(\"red\", \"blue\", \"purple\", \"green\", \"yellow\"))\n\n# GGPLOT2\n# But these are not even the prettiest of R's plots\n# Try the ggplot2 package for more and better graphics\ninstall.packages(\"ggplot2\")\nrequire(ggplot2)\n?ggplot2\npp <- ggplot(students, aes(x = house))\npp + geom_bar()\nll <- as.data.table(list1)\npp <- ggplot(ll, aes(x = time, price))\npp + geom_point()\n# ggplot2 has excellent documentation (available http://docs.ggplot2.org/current/)\n```\n\n## How do I get R?\n\n* Get R and the R GUI from [http://www.r-project.org/](http://www.r-project.org/)\n* [RStudio](http://www.rstudio.com/ide/) is another GUI\n"
        },
        {
          "name": "racket.md",
          "type": "blob",
          "size": 21.05859375,
          "content": "---\n\nname: Racket\nfilename: learnracket.rkt\ncontributors:\n  - [\"th3rac25\", \"https://github.com/voila\"]\n  - [\"Eli Barzilay\", \"https://github.com/elibarzilay\"]\n  - [\"Gustavo Schmidt\", \"https://github.com/gustavoschmidt\"]\n  - [\"Duong H. Nguyen\", \"https://github.com/cmpitg\"]\n  - [\"Keyan Zhang\", \"https://github.com/keyanzhang\"]\n---\n\nRacket is a general purpose, multi-paradigm programming language in the Lisp/Scheme family.\n\nFeedback is appreciated! You can reach me at [@th3rac25](http://twitter.com/th3rac25) or th3rac25 [at] [google's email service]\n\n\n```racket\n#lang racket ; defines the language we are using\n\n;;; Comments\n\n;; Single line comments start with a semicolon\n\n#| Block comments\n   can span multiple lines and...\n    #|\n       they can be nested!\n    |#\n|#\n\n;; S-expression comments discard the following expression,\n;; useful to comment expressions when debugging\n#; (this expression is discarded)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 1. Primitive Datatypes and Operators\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;;; Numbers\n9999999999999999999999 ; integers\n#b111                  ; binary => 7\n#o111                  ; octal => 73\n#x111                  ; hexadecimal => 273\n3.14                   ; reals\n6.02e+23\n1/2                    ; rationals\n1+2i                   ; complex numbers\n\n;; Function application is written (f x y z ...)\n;; where f is a function and x, y, z, ... are operands\n;; If you want to create a literal list of data, use ' to stop it from\n;; being evaluated\n'(+ 1 2) ; => (+ 1 2)\n;; Now, some arithmetic operations\n(+ 1 1)  ; => 2\n(- 8 1)  ; => 7\n(* 10 2) ; => 20\n(expt 2 3) ; => 8\n(quotient 5 2) ; => 2\n(remainder 5 2) ; => 1\n(/ 35 5) ; => 7\n(/ 1 3) ; => 1/3\n(exact->inexact 1/3) ; => 0.3333333333333333\n(+ 1+2i  2-3i) ; => 3-1i\n\n;;; Booleans\n#t ; for true\n#f ; for false -- any value other than #f is true\n(not #t) ; => #f\n(and 0 #f (error \"doesn't get here\")) ; => #f\n(or #f 0 (error \"doesn't get here\"))  ; => 0\n\n;;; Characters\n#\\A ; => #\\A\n#\\λ ; => #\\λ\n#\\u03BB ; => #\\λ\n\n;;; Strings are fixed-length array of characters.\n\"Hello, world!\"\n\"Benjamin \\\"Bugsy\\\" Siegel\"   ; backslash is an escaping character\n\"Foo\\tbar\\41\\x21\\u0021\\a\\r\\n\" ; includes C escapes, Unicode\n\"λx:(μα.α→α).xx\"              ; can include Unicode characters\n\n;; Strings can be added too!\n(string-append \"Hello \" \"world!\") ; => \"Hello world!\"\n\n;; A string can be treated like a list of characters\n(string-ref \"Apple\" 0) ; => #\\A\n\n;; format can be used to format strings:\n(format \"~a can be ~a\" \"strings\" \"formatted\")\n\n;; Printing is pretty easy\n(printf \"I'm Racket. Nice to meet you!\\n\")\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 2. Variables\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; You can create a variable using define\n;; a variable name can use any character except: ()[]{}\",'`;#|\\\n(define some-var 5)\nsome-var ; => 5\n\n;; You can also use unicode characters\n(define ⊆ subset?)\n(⊆ (set 3 2) (set 1 2 3)) ; => #t\n\n;; Accessing a previously unassigned variable is an exception\n; x ; => x: undefined ...\n\n;; Local binding: `me' is bound to \"Bob\" only within the (let ...)\n(let ([me \"Bob\"])\n  \"Alice\"\n  me) ; => \"Bob\"\n\n;; let* is like let, but allows you to use previous bindings in creating later bindings\n(let* ([x 1]\n       [y (+ x 1)])\n  (* x y))\n\n;; finally, letrec allows you to define recursive and mutually recursive functions\n(letrec ([is-even? (lambda (n)\n                     (or (zero? n)\n                         (is-odd? (sub1 n))))]\n         [is-odd? (lambda (n)\n                    (and (not (zero? n))\n                         (is-even? (sub1 n))))])\n  (is-odd? 11))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 3. Structs and Collections\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Structs\n; By default, structs are immutable\n(struct dog (name breed age))\n(define my-pet\n  (dog \"lassie\" \"collie\" 5))\nmy-pet ; => #<dog>\n; returns whether the variable was constructed with the dog constructor\n(dog? my-pet) ; => #t\n; accesses the name field of the variable constructed with the dog constructor\n(dog-name my-pet) ; => \"lassie\"\n\n; You can explicitly declare a struct to be mutable with the #:mutable option\n(struct rgba-color (red green blue alpha) #:mutable)\n(define burgundy\n   (rgba-color 144 0 32 1.0))\n(set-rgba-color-green! burgundy 10)\n(rgba-color-green burgundy) ; => 10\n\n;;; Pairs (immutable)\n;; `cons' constructs pairs, `car' and `cdr' extract the first\n;; and second elements\n(cons 1 2) ; => '(1 . 2)\n(car (cons 1 2)) ; => 1\n(cdr (cons 1 2)) ; => 2\n\n;;; Lists\n\n;; Lists are linked-list data structures, made of `cons' pairs and end\n;; with a `null' (or '()) to mark the end of the list\n(cons 1 (cons 2 (cons 3 null))) ; => '(1 2 3)\n;; `list' is a convenience variadic constructor for lists\n(list 1 2 3) ; => '(1 2 3)\n;; a quote can also be used for a literal list value\n'(1 2 3) ; => '(1 2 3)\n;; a quasiquote (represented by the backtick character) with commas \n;; can be used to evaluate functions\n`(1 ,(+ 1 1) 3) ; => '(1 2 3)\n\n;; With lists, car/cdr work slightly differently\n(car '(1 2 3)) ; => 1\n(cdr '(1 2 3)) ; => '(2 3)\n\n;; Racket also has predefined functions on top of car and cdr, to extract parts of a list\n(cadr (list 1 2 3)) ; => 2\n(car (cdr (list 1 2 3))) ; => 2\n\n(cddr (list 1 2 3)) ; => '(3)\n(cdr (cdr (list 1 2 3))) ; => '(3)\n\n(caddr (list 1 2 3)) ; => 3\n(car (cdr (cdr (list 1 2 3)))) ; => 3\n\n;; Can still use `cons' to add an item to the beginning of a list\n(cons 4 '(1 2 3)) ; => '(4 1 2 3)\n\n;; Use `append' to add lists together\n(append '(1 2) '(3 4)) ; => '(1 2 3 4)\n\n;; Lists are a very basic type, so there is a *lot* of functionality for\n;; them, a few examples:\n(map add1 '(1 2 3))          ; => '(2 3 4)\n(map + '(1 2 3) '(10 20 30)) ; => '(11 22 33)\n(filter even? '(1 2 3 4))    ; => '(2 4)\n(count even? '(1 2 3 4))     ; => 2\n(take '(1 2 3 4) 2)          ; => '(1 2)\n(drop '(1 2 3 4) 2)          ; => '(3 4)\n\n;;; Vectors\n\n;; Vectors are fixed-length arrays\n#(1 2 3) ; => '#(1 2 3)\n\n;; Use `vector-append' to add vectors together\n(vector-append #(1 2 3) #(4 5 6)) ; => #(1 2 3 4 5 6)\n\n;;; Sets\n\n;; Create a set from a list\n(list->set '(1 2 3 1 2 3 3 2 1 3 2 1)) ; => (set 1 2 3)\n\n;; Add a member with `set-add'\n;; (Functional: returns the extended set rather than mutate the input)\n(set-add (set 1 2 3) 4) ; => (set 1 2 3 4)\n\n;; Remove one with `set-remove'\n(set-remove (set 1 2 3) 1) ; => (set 2 3)\n\n;; Test for existence with `set-member?'\n(set-member? (set 1 2 3) 1) ; => #t\n(set-member? (set 1 2 3) 4) ; => #f\n\n;;; Hashes\n\n;; Create an immutable hash table (mutable example below)\n(define m (hash 'a 1 'b 2 'c 3))\n\n;; Retrieve a value\n(hash-ref m 'a) ; => 1\n\n;; Retrieving a non-present value is an exception\n; (hash-ref m 'd) => no value found\n\n;; You can provide a default value for missing keys\n(hash-ref m 'd 0) ; => 0\n\n;; Use `hash-set' to extend an immutable hash table\n;; (Returns the extended hash instead of mutating it)\n(define m2 (hash-set m 'd 4))\nm2 ; => '#hash((b . 2) (a . 1) (d . 4) (c . 3))\n\n;; Remember, these hashes are immutable!\nm ; => '#hash((b . 2) (a . 1) (c . 3))  <-- no `d'\n\n;; Use `hash-remove' to remove keys (functional too)\n(hash-remove m 'a) ; => '#hash((b . 2) (c . 3))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 4. Functions\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Use `lambda' to create functions.\n;; A function always returns the value of its last expression\n(lambda () \"Hello World\") ; => #<procedure>\n;; Can also use a unicode `λ'\n(λ () \"Hello World\")     ; => same function\n\n;; Use parens to call all functions, including a lambda expression\n((lambda () \"Hello World\")) ; => \"Hello World\"\n((λ () \"Hello World\"))      ; => \"Hello World\"\n\n;; Assign a function to a var\n(define hello-world (lambda () \"Hello World\"))\n(hello-world) ; => \"Hello World\"\n\n;; You can shorten this using the function definition syntactic sugar:\n(define (hello-world2) \"Hello World\")\n\n;; The () in the above is the list of arguments for the function\n(define hello\n  (lambda (name)\n    (string-append \"Hello \" name)))\n(hello \"Steve\") ; => \"Hello Steve\"\n;; ... or equivalently, using a sugared definition:\n(define (hello2 name)\n  (string-append \"Hello \" name))\n\n;; You can have multi-variadic functions too, using `case-lambda'\n(define hello3\n  (case-lambda\n    [() \"Hello World\"]\n    [(name) (string-append \"Hello \" name)]))\n(hello3 \"Jake\") ; => \"Hello Jake\"\n(hello3) ; => \"Hello World\"\n;; ... or specify optional arguments with a default value expression\n(define (hello4 [name \"World\"])\n  (string-append \"Hello \" name))\n\n;; Functions can pack extra arguments up in a list\n(define (count-args . args)\n  (format \"You passed ~a args: ~a\" (length args) args))\n(count-args 1 2 3) ; => \"You passed 3 args: (1 2 3)\"\n;; ... or with the unsugared `lambda' form:\n(define count-args2\n  (lambda args\n    (format \"You passed ~a args: ~a\" (length args) args)))\n\n;; You can mix regular and packed arguments\n(define (hello-count name . args)\n  (format \"Hello ~a, you passed ~a extra args\" name (length args)))\n(hello-count \"Finn\" 1 2 3)\n; => \"Hello Finn, you passed 3 extra args\"\n;; ... unsugared:\n(define hello-count2\n  (lambda (name . args)\n    (format \"Hello ~a, you passed ~a extra args\" name (length args))))\n\n;; And with keywords\n(define (hello-k #:name [name \"World\"] #:greeting [g \"Hello\"] . args)\n  (format \"~a ~a, ~a extra args\" g name (length args)))\n(hello-k)                 ; => \"Hello World, 0 extra args\"\n(hello-k 1 2 3)           ; => \"Hello World, 3 extra args\"\n(hello-k #:greeting \"Hi\") ; => \"Hi World, 0 extra args\"\n(hello-k #:name \"Finn\" #:greeting \"Hey\") ; => \"Hey Finn, 0 extra args\"\n(hello-k 1 2 3 #:greeting \"Hi\" #:name \"Finn\" 4 5 6)\n                                         ; => \"Hi Finn, 6 extra args\"\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 5. Equality\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; for numbers use `='\n(= 3 3.0) ; => #t\n(= 2 1)   ; => #f\n\n;; `eq?' returns #t if 2 arguments refer to the same object (in memory),\n;; #f otherwise.\n;; In other words, it's a simple pointer comparison.\n(eq? '() '()) ; => #t, since there exists only one empty list in memory\n(let ([x '()] [y '()])\n  (eq? x y))  ; => #t, same as above\n\n(eq? (list 3) (list 3)) ; => #f\n(let ([x (list 3)] [y (list 3)])\n  (eq? x y))            ; => #f — not the same list in memory!\n\n(let* ([x (list 3)] [y x])\n  (eq? x y)) ; => #t, since x and y now point to the same stuff\n\n(eq? 'yes 'yes) ; => #t\n(eq? 'yes 'no)  ; => #f\n\n(eq? 3 3)   ; => #t — be careful here\n            ; It’s better to use `=' for number comparisons.\n(eq? 3 3.0) ; => #f\n\n(eq? (expt 2 100) (expt 2 100))               ; => #f\n(eq? (integer->char 955) (integer->char 955)) ; => #f\n\n(eq? (string-append \"foo\" \"bar\") (string-append \"foo\" \"bar\")) ; => #f\n\n;; `eqv?' supports the comparison of number and character datatypes.\n;; for other datatypes, `eqv?' and `eq?' return the same result.\n(eqv? 3 3.0)                                   ; => #f\n(eqv? (expt 2 100) (expt 2 100))               ; => #t\n(eqv? (integer->char 955) (integer->char 955)) ; => #t\n\n(eqv? (string-append \"foo\" \"bar\") (string-append \"foo\" \"bar\"))   ; => #f\n\n;; `equal?' supports the comparison of the following datatypes:\n;; strings, byte strings, pairs, mutable pairs, vectors, boxes,\n;; hash tables, and inspectable structures.\n;; for other datatypes, `equal?' and `eqv?' return the same result.\n(equal? 3 3.0)                                                   ; => #f\n(equal? (string-append \"foo\" \"bar\") (string-append \"foo\" \"bar\")) ; => #t\n(equal? (list 3) (list 3))                                       ; => #t\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 6. Control Flow\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;;; Conditionals\n\n(if #t               ; test expression\n    \"this is true\"   ; then expression\n    \"this is false\") ; else expression\n; => \"this is true\"\n\n;; In conditionals, all non-#f values are treated as true\n(member 'Groucho '(Harpo Groucho Zeppo)) ; => '(Groucho Zeppo)\n(if (member 'Groucho '(Harpo Groucho Zeppo))\n    'yep\n    'nope)\n; => 'yep\n\n;; `cond' chains a series of tests to select a result\n(cond [(> 2 2) (error \"wrong!\")]\n      [(< 2 2) (error \"wrong again!\")]\n      [else 'ok]) ; => 'ok\n\n;;; Pattern Matching\n\n(define (fizzbuzz? n)\n  (match (list (remainder n 3) (remainder n 5))\n    [(list 0 0) 'fizzbuzz]\n    [(list 0 _) 'fizz]\n    [(list _ 0) 'buzz]\n    [_          #f]))\n\n(fizzbuzz? 15) ; => 'fizzbuzz\n(fizzbuzz? 37) ; => #f\n\n;;; Loops\n\n;; Looping can be done through (tail-) recursion\n(define (loop i)\n  (when (< i 10)\n    (printf \"i=~a\\n\" i)\n    (loop (add1 i))))\n(loop 5) ; => i=5, i=6, ...\n\n;; Similarly, with a named let\n(let loop ([i 0])\n  (when (< i 10)\n    (printf \"i=~a\\n\" i)\n    (loop (add1 i)))) ; => i=0, i=1, ...\n\n;; See below how to add a new `loop' form, but Racket already has a very\n;; flexible `for' form for loops:\n(for ([i 10])\n  (printf \"i=~a\\n\" i)) ; => i=0, i=1, ...\n(for ([i (in-range 5 10)])\n  (printf \"i=~a\\n\" i)) ; => i=5, i=6, ...\n\n;;; Iteration Over Other Sequences\n;; `for' allows iteration over many other kinds of sequences:\n;; lists, vectors, strings, sets, hash tables, etc...\n\n(for ([i (in-list '(l i s t))])\n  (displayln i))\n\n(for ([i (in-vector #(v e c t o r))])\n  (displayln i))\n\n(for ([i (in-string \"string\")])\n  (displayln i))\n\n(for ([i (in-set (set 'x 'y 'z))])\n  (displayln i))\n\n(for ([(k v) (in-hash (hash 'a 1 'b 2 'c 3))])\n  (printf \"key:~a value:~a\\n\" k v))\n\n;;; More Complex Iterations\n\n;; Parallel scan of multiple sequences (stops on shortest)\n(for ([i 10] [j '(x y z)]) \n  (printf \"~a:~a\\n\" i j))\n; => 0:x 1:y 2:z\n\n;; Nested loops\n(for* ([i 2] [j '(x y z)]) \n  (printf \"~a:~a\\n\" i j))\n; => 0:x, 0:y, 0:z, 1:x, 1:y, 1:z\n\n;; Conditions\n(for ([i 1000]\n      #:when (> i 5)\n      #:unless (odd? i)\n      #:break (> i 10))\n  (printf \"i=~a\\n\" i))\n; => i=6, i=8, i=10\n\n;;; Comprehensions\n;; Very similar to `for' loops -- just collect the results\n\n(for/list ([i '(1 2 3)])\n  (add1 i)) ; => '(2 3 4)\n\n(for/list ([i '(1 2 3)] #:when (even? i))\n  i) ; => '(2)\n\n(for/list ([i 10] [j '(x y z)])\n  (list i j)) ; => '((0 x) (1 y) (2 z))\n\n(for/list ([i 1000] #:when (> i 5) #:unless (odd? i) #:break (> i 10))\n  i) ; => '(6 8 10)\n\n(for/hash ([i '(1 2 3)])\n  (values i (number->string i)))\n; => '#hash((1 . \"1\") (2 . \"2\") (3 . \"3\"))\n\n;; There are many kinds of other built-in ways to collect loop values:\n(for/sum ([i 10]) (* i i)) ; => 285\n(for/product ([i (in-range 1 11)]) (* i i)) ; => 13168189440000\n(for/and ([i 10] [j (in-range 10 20)]) (< i j)) ; => #t\n(for/or ([i 10] [j (in-range 0 20 2)]) (= i j)) ; => #t\n;; And to use any arbitrary combination, use `for/fold'\n(for/fold ([sum 0]) ([i '(1 2 3 4)]) (+ sum i)) ; => 10\n;; (This can often replace common imperative loops)\n\n;;; Exceptions\n\n;; To catch exceptions, use the `with-handlers' form\n(with-handlers ([exn:fail? (lambda (exn) 999)])\n  (+ 1 \"2\")) ; => 999\n(with-handlers ([exn:break? (lambda (exn) \"no time\")])\n  (sleep 3)\n  \"phew\") ; => \"phew\", but if you break it => \"no time\"\n\n;; Use `raise' to throw exceptions or any other value\n(with-handlers ([number?    ; catch numeric values raised\n                 identity]) ; return them as plain values\n  (+ 1 (raise 2))) ; => 2\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 7. Mutation\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Use `set!' to assign a new value to an existing variable\n(define n 5)\n(set! n (add1 n))\nn ; => 6\n\n;; Use boxes for explicitly mutable values (similar to pointers or\n;; references in other languages)\n(define n* (box 5))\n(set-box! n* (add1 (unbox n*)))\n(unbox n*) ; => 6\n\n;; Many Racket datatypes are immutable (pairs, lists, etc), some come in\n;; both mutable and immutable flavors (strings, vectors, hash tables,\n;; etc...)\n\n;; Use `vector' or `make-vector' to create mutable vectors\n(define vec (vector 2 2 3 4))\n(define wall (make-vector 100 'bottle-of-beer))\n;; Use vector-set! to update a slot\n(vector-set! vec 0 1)\n(vector-set! wall 99 'down)\nvec ; => #(1 2 3 4)\n\n;; Create an empty mutable hash table and manipulate it\n(define m3 (make-hash))\n(hash-set! m3 'a 1)\n(hash-set! m3 'b 2)\n(hash-set! m3 'c 3)\n(hash-ref m3 'a)   ; => 1\n(hash-ref m3 'd 0) ; => 0\n(hash-remove! m3 'a)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 8. Modules\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Modules let you organize code into multiple files and reusable\n;; libraries; here we use sub-modules, nested in the whole module that\n;; this text makes (starting from the \"#lang\" line)\n\n(module cake racket/base ; define a `cake' module based on racket/base\n\n  (provide print-cake) ; function exported by the module\n\n  (define (print-cake n)\n    (show \"   ~a   \" n #\\.)\n    (show \" .-~a-. \" n #\\|)\n    (show \" | ~a | \" n #\\space)\n    (show \"---~a---\" n #\\-))\n\n  (define (show fmt n ch) ; internal function\n    (printf fmt (make-string n ch))\n    (newline)))\n\n;; Use `require' to get all `provide'd names from a module\n(require 'cake) ; the ' is for a local submodule\n(print-cake 3)\n; (show \"~a\" 1 #\\A) ; => error, `show' was not exported\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 9. Classes and Objects\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Create a class fish% (-% is idiomatic for class bindings)\n(define fish%\n  (class object%\n    (init size) ; initialization argument\n    (super-new) ; superclass initialization\n    ;; Field\n    (define current-size size)\n    ;; Public methods\n    (define/public (get-size)\n      current-size)\n    (define/public (grow amt)\n      (set! current-size (+ amt current-size)))\n    (define/public (eat other-fish)\n      (grow (send other-fish get-size)))))\n\n;; Create an instance of fish%\n(define charlie\n  (new fish% [size 10]))\n\n;; Use `send' to call an object's methods\n(send charlie get-size) ; => 10\n(send charlie grow 6)\n(send charlie get-size) ; => 16\n\n;; `fish%' is a plain \"first class\" value, which can get us mixins\n(define (add-color c%)\n  (class c%\n    (init color)\n    (super-new)\n    (define my-color color)\n    (define/public (get-color) my-color)))\n(define colored-fish% (add-color fish%))\n(define charlie2 (new colored-fish% [size 10] [color 'red]))\n(send charlie2 get-color)\n;; or, with no names:\n(send (new (add-color fish%) [size 10] [color 'red]) get-color)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 10. Macros\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Macros let you extend the syntax of the language\n\n;; Let's add a while loop\n(define-syntax-rule (while condition body ...)\n  (let loop ()\n    (when condition\n      body ...\n      (loop))))\n\n(let ([i 0])\n  (while (< i  10)\n    (displayln i)\n    (set! i (add1 i))))\n\n;; Macros are hygienic, you cannot clobber existing variables!\n(define-syntax-rule (swap! x y) ; -! is idiomatic for mutation\n  (let ([tmp x])\n    (set! x y)\n    (set! y tmp)))\n\n(define tmp 2)\n(define other 3)\n(swap! tmp other)\n(printf \"tmp = ~a; other = ~a\\n\" tmp other)\n;; The variable `tmp` is renamed to `tmp_1`\n;; in order to avoid name conflict\n;; (let ([tmp_1 tmp])\n;;   (set! tmp other)\n;;   (set! other tmp_1))\n\n;; But they are still code transformations, for example:\n(define-syntax-rule (bad-while condition body ...)\n  (when condition\n    body ...\n    (bad-while condition body ...)))\n;; this macro is broken: it generates infinite code, if you try to use\n;; it, the compiler will get in an infinite loop\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 11. Contracts\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Contracts impose constraints on values exported from modules\n\n(module bank-account racket\n  (provide (contract-out\n            [deposit (-> positive? any)] ; amounts are always positive\n            [balance (-> positive?)]))\n\n  (define amount 0)\n  (define (deposit a) (set! amount (+ amount a)))\n  (define (balance) amount))\n\n(require 'bank-account)\n(deposit 5)\n\n(balance) ; => 5\n\n;; Clients that attempt to deposit a non-positive amount are blamed\n;; (deposit -5) ; => deposit: contract violation\n;; expected: positive?\n;; given: -5\n;; more details....\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 12. Input & output\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Racket has this concept of \"port\", which is very similar to file\n;; descriptors in other languages\n\n;; Open \"/tmp/tmp.txt\" and write \"Hello World\"\n;; This would trigger an error if the file's already existed\n(define out-port (open-output-file \"/tmp/tmp.txt\"))\n(displayln \"Hello World\" out-port)\n(close-output-port out-port)\n\n;; Append to \"/tmp/tmp.txt\"\n(define out-port (open-output-file \"/tmp/tmp.txt\"\n                                   #:exists 'append))\n(displayln \"Hola mundo\" out-port)\n(close-output-port out-port)\n\n;; Read from the file again\n(define in-port (open-input-file \"/tmp/tmp.txt\"))\n(displayln (read-line in-port))\n; => \"Hello World\"\n(displayln (read-line in-port))\n; => \"Hola mundo\"\n(close-input-port in-port)\n\n;; Alternatively, with call-with-output-file you don't need to explicitly\n;; close the file\n(call-with-output-file \"/tmp/tmp.txt\"\n  #:exists 'update ; Rewrite the content\n  (λ (out-port)\n    (displayln \"World Hello!\" out-port)))\n\n;; And call-with-input-file does the same thing for input\n(call-with-input-file \"/tmp/tmp.txt\"\n  (λ (in-port)\n    (displayln (read-line in-port))))\n```\n\n## Further Reading\n\nStill up for more? Try [Getting Started with Racket](http://docs.racket-lang.org/getting-started/)\n"
        },
        {
          "name": "raku-pod.md",
          "type": "blob",
          "size": 15.2265625,
          "content": "---\nname: Pod\ncontributors:\n    - [\"Luis F. Uceta\", \"https://uzluisf.gitlab.io/\"]\nfilename: learnpod.pod6\n---\n\nPod is an easy-to-use and purely descriptive mark-up language,\nwith no presentational components. Besides its use for documenting\nRaku programs and modules, Pod can be utilized to write language\ndocumentation, blogs, and other types of document composition as well.\n\nPod documents can be easily converted to HTML and many other formats\n(e.g., Markdown, Latex, plain text, etc.) by using the corresponding\nvariant of the `Pod::To` modules (e.g. `Pod::To::HTML` for HTML conversion).\n\n- [General Info](#general-info)\n- [Pod Basics](#pod-basics)\n\t- [Basic Text Formatting](#basic-text-formatting)\n\t- [Headings](#headings)\n\t- [Ordinary Paragraphs](#ordinary-paragraphs)\n\t- [Lists](#lists)\n\t- [Code Blocks](#code-blocks)\n\t- [Comments](#comments)\n\t- [Links](#links)\n\t- [Tables](#tables)\n- [Block Structures](#block-structures)\n\t- [Abbreviated Blocks](#abbreviated-blocks)\n\t- [Delimited Blocks](#delimited-blocks)\n\t- [Paragraph Blocks](#paragraph-blocks)\n- [Configuration Data](#configuration-data)\n\t- [Standard Configuration Options](#standard-configuration-options)\n\t- [Block Pre-configuration](#block-pre-configuration)\n- [Semantic Blocks](#semantic-blocks)\n- [Miscellaneous](#miscellaneous)\n\t- [Notes](#notes)\n\t- [Keyboard Input](#keyboard-input)\n\t- [Terminal Output](#terminal-output)\n\t- [Unicode](#unicode)\n- [Rendering Pod](#rendering-pod)\n- [Accessing Pod](#accessing-pod)\n\n## General Info\n\nEvery Pod document has to begin with `=begin pod` and end with `=end pod`.\nEverything between these two delimiters will be processed and used to\ngenerate documentation.\n\n```\n=begin pod\n\nA very simple Raku Pod document. All the other directives go here!\n\n=end pod\n```\n\nPod documents usually coexist with Raku code. If by themselves,\nPod files often have the `.pod6` suffix. Moving forward, it's assumed that\nthe constructs being discussed are surrounded by the `=begin pod ... =end pod`\ndirectives.\n\n## Pod Basics\n\n### Basic Text Formatting\n\nText can be easily styled as bold, italic, underlined or verbatim (for code\nformatting) using the following formatting codes: `B<>`, `I<>`, `U<>`\nand `C<>`.\n\n```\nB<This text is in Bold.>\n\nI<This text is in Italics.>\n\nU<This text is Underlined.>\n\nThe function C<sub sum { $^x + $^y}> is treated as verbatim.\n```\n\nThere are more formatting codes (e.g., `L<>`, `T<>`, etc.) but they'll be\ndiscussed later throughout the document. You'll recognize them because they're\njust a single capital letter followed immediately by a set of single or double\nangle brackets. The Unicode variant («») of the angle brackets can also be\nused.\n\n### Headings\n\nHeadings are created by using the `=headN` directive where `N` is the\nheading level.\n\n```\n=head1 This is level 1\n=head2 This is level 2\n=head3 This is level 3\n=head4 This is level 4\n=head5 This is level 5\n=head6 This is level 6\n```\n\n### Ordinary Paragraphs\n\nOrdinary paragraphs consist of one or more adjacent lines of text, each of\nwhich starts with a non-whitespace character. Any paragraph is terminated\nby the first blank line or block directive.\n\n```\n=head1 First level heading block\n\n=head2 Paragraph 1\n\nThis is an ordinary paragraph. Its text will be squeezed and\nshort lines filled. It is terminated by the first blank line.\n\n=head2 Paragraph 2\n\nThis is another ordinary paragraph albeit shorter.\n```\n\nAlternatively, the `=para` directive can be used to explicitly mark adjacent\nlines of text as a paragraph.\n\n```\n=head1 First level heading block\n\n=head2 Paragraph 1\n\n=para\nThis is an ordinary paragraph. Its text will be squeezed and\nshort lines filled. It is terminated by the first blank line.\n\n=head2 Paragraph 2\n\n=para\nThis is another ordinary paragraph albeit shorter.\n```\n\n### Lists\n\nUnordered lists can be created using the `=item` directive.\n\n```\n=item Item\n=item Item\n=item Another item\n```\n\nSublists are achieved with items at each level specified using the `=item1`,\n`=item2`, `=item3`, `...`, `=itemN` etc. directives. The `=item` directive\ndefaults to `=item1`.\n\n```\n=item1 Item one\n=item1 Item two\n=item1 Item three\n    =item2 Sub-item\n    =item2 Sub-item\n=item1 Item four\n```\n\nDefinition lists that define terms or commands use the `=defn` directive.\nThis is equivalent to the `<dl>` element in HTML.\n\n```\n=defn Beast of Bodmin\nA large feline inhabiting Bodmin Moor.\n\n=defn Morgawr\nA sea serpent.\n\n=defn Owlman\nA giant owl-like creature.\n```\n\n### Code Blocks\n\nA code block is created (which uses the HTML `<code>` element) by starting each\nline with one or more whitespace characters.\n\n```\n    #`( this is comment )\n    my $sum = -> $x, $y { $x + $y }\n    say $sum(12, 5);\n```\n\nAs shown in the [Basic Text Formatting](#basic-text-formatting) section,\ninline code can be created using the `C<>` code.\n\n```\nIn Raku, there are several functions/methods to output text. Some of them\nare C<print>, C<put> and C<say>.\n```\n\n### Comments\n\nAlthough Pod blocks are ignored by the Rakudo Raku compiler, everything\nidentified as a Pod block will be read and interpreted by Pod renderers. In\norder to prevent Pod blocks from being rendered by any renderer, use the\n`=comment` directive.\n\n```\n=comment Add more here about the algorithm.\n\n=comment Pod comments are great for documenting the documentation.\n```\n\nTo create inline comments, use the `Z<>` code.\n\n```\nPod is awesome Z<Of course it is!>. And Raku too!\n```\n\nGiven that the Raku interpreter never executes embedded Pod blocks,\ncomment blocks can also be used as an alternative form of nestable block\ncomments.\n\n### Links\n\nCreating links in Pod is quite easy and is done by enclosing them in\na `L<>` code. The general format is `L<Label|Url>` with `Label`\nbeing optional.\n\n```\nRaku homepage is L<https://raku.org>.\nL<Click me!|http://link.org/>.\n```\n\nRelative paths work too.\n\n```\nL<Go to music|/music/>.\n```\n\nLinking to a section in the same document works as well.\n\n```\nL<Link to Headings|#Headings>\n```\n\n### Tables\n\nThe Pod specifications are not completely handled properly yet and this\nincludes the handling of table. For simplicity's sake, only one way of\nconstructing tables is shown here. To learn about good practices and see\nexamples of both good and bad tables, please visit\n<https://docs.raku.org/language/tables>.\n\n```\n=begin table\nOption      | Description     \n============|================  \ndata        | path to data files.\nengine      | engine to be used for processing templates.\next         | extension to be used for dest files.\n=end table\n```\n\n## Block Structures\n\nAs mentioned earlier, Pod documents are specified using directives, which are\nused to delimit blocks of textual content and declare optional\n[configuration information](#configuration-data). Every directive starts with\nan equals sign (`=`) in the first column. The content of a document is\nspecified within one or more blocks. Every Pod block may be declared in any of\nthree equivalent forms: delimited style, paragraph style, or abbreviated style.\n\nUp to this point, we have only used the abbreviated style for the block\ntypes (e.g., `=head1`, `=para`, `=comment`, `=item`, etc).\n\n### Abbreviated Blocks\n\nAbbreviated blocks are introduced by an `=` sign in the first column, which\nis followed immediately by the `typename` of the block and then the content.\nThe rest of the line is treated as block data, rather than as configuration.\nThe content terminates at the next Pod directive or the first blank line\n(which is not part of the block data). The general syntax is\n\n```\n=BLOCK_TYPE  BLOCK_DATA\n```\n\nFor example:\n\n```\n=head1 Top level heading\n```\n\n### Delimited Blocks\n\nDelimited blocks are bounded by `=begin` and `=end` markers, both of which are\nfollowed by a valid Pod identifier, which is the `typename` of the block.\nThe general syntax is\n\n```\n=begin BLOCK_TYPE\nBLOCK_DATA\n=end BLOCK_TYPE\n```\n\nFor example:\n\n```\n=begin head1\nTop level heading\n=end head1\n```\n\nThis type of blocks is useful for creating headings, list items, code blocks,\netc. with multiple paragraphs. For example,\n\n* a multiline item of a list\n\n```\n=begin item\nThis is a paragraph in list item.\n\nThis is another paragraph in the same list item.\n=end item\n```\n\n* a code block\n\n```\n=begin code\n#`(\nA non-efficient recursive implementation of a power function using multi subs.\n)\n\nmulti pow( Real $base, 0 ) { 1 }\n\nmulti pow( Real $base, Int $exp where * ≥ 0) {\n\t$base * pow($base, $exp - 1)\n}\n\nmulti pow( Real $base ) {\n     pow($base, 2)\n}\n\nsay pow(3, 0);   #=> 1\nsay pow(4.2, 2); #=> 17.64\nsay pow(6);      #=> 36\n=end code\n```\n\n### Paragraph Blocks\n\nParagraph blocks are introduced by a `=for` marker and terminated by\nthe next Pod directive or the first blank line (which is not considered to\nbe part of the block's contents). The `=for` marker is followed by the\n`typename` of the block. The general syntax is\n\n```\n=for BLOCK_TYPE\nBLOCK DATA\n```\n\nFor example:\n\n```\n=for head1\nTop level heading\n```\n\n## Configuration Data\n\nExcept for abbreviated blocks, both delimited blocks and paragraph\nblocks can be supplied with configuration information about their\ncontents right after the `typename` of the block. Thus the following\nare more general syntaxes for these blocks:\n\n* Delimited blocks\n\n```\n=begin BLOCK_TYPE OPTIONAL_CONFIG_INFO\n=                 ADDITIONAL_CONFIG_INFO\nBLOCK_DATA\n=end BLOCK_TYPE\n```\n\n* Paragraph blocks\n\n```\n=for BLOCK_TYPE OPTIONAL_CONFIG_INFO\n=               ADDITIONAL_CONFIG_INFO\nBLOCK DATA\n```\n\nThe configuration information is provided in a format akin to the\n[\"colon pair\"](https://docs.raku.org/language/glossary#index-entry-Colon_Pair)\nsyntax in Raku. The following table is a simplified version of the\ndifferent ways in which configuration info can be supplied. Please go to\n<https://docs.raku.org/language/pod#Configuration_information> for a more\nthorough treatment of the subject.\n\n| Value     | Specify with...             | Example                        |\n| :-------- | :------                     | :------                        |\n| List      | :key($elem1, $elem2, ...)   | :tags('Pod', 'Raku')          |\n| Hash      | :key{$key1 => $value1, ...} | :feeds{url => 'raku.org'}     |\n| Boolean   | :key/:key(True)             | :skip-test(True)               |\n| Boolean   | :!key/:key(False)           | :!skip-test                    |\n| String    | :key('string')              | :nonexec-reason('SyntaxError') |\n| Int       | :key(2)                     | :post-number(6)                |\n\n\n### Standard Configuration Options\n\nPod provides a small number of standard configuration options that can\nbe applied uniformly to built-in block types. Some of them are:\n\n* `:numbered`\n\nThis option specifies that the block is to be numbered. The most common\nuse of this option is to create numbered headings and ordered lists, but it\ncan be applied to any block.\n\nFor example:\n\n```\n=for head1 :numbered\nThe Problem\n=for head1 :numbered\nThe Solution\n=for head2 :numbered\nAnalysis\n=for head3 :numbered\nOverview\n```\n\n* `:allow`\n\nThe value of the `:allow` option must be a list of the (single-letter) names\nof one or more formatting codes. Those codes will then remain active inside\nthe code block. The option is most often used on `=code` blocks to allow\nmark-up within those otherwise verbatim blocks, though it can be used in any\nblock that contains verbatim text.\n\nGiven the following snippet:\n\n```\n=begin code :allow('B', 'I')\nB<sub> greet( $name ) {\n    B<say> \"Hello, $nameI<!>\";\n}\n=end code\n```\n\nwe get the following output:\n\n<pre><strong>sub</strong> greet( $name ) {\n    <strong>say</strong> &quot;Hello, $name<em>!</em>&quot;;\n}\n</pre>\n\nThis is highly dependent on the format output. For example, while this works\nwhen Pod is converted to HTML, it might not be preserved when converted\nto Markdown.\n\n### Block Pre-configuration\n\nThe `=config` directive allows you to prespecify standard configuration\ninformation that is applied to every block of a particular type.\nThe general syntax for configuration directives is:\n\n```\n=config BLOCK_TYPE  CONFIG OPTIONS\n=                  ADDITIONAL_CONFIG_INFO\n```\n\nFor example, to specify that every heading level 1 be numbered, bold\nand underlined, you preconfigure the `=head1` as follows:\n\n```\n=config head1 :formatted('B', 'U') :numbered\n```\n\n## Semantic Blocks\n\nAll uppercase block typenames are reserved for specifying standard\ndocumentation, publishing, source components, or meta-information.\nSome of them are:\n\n```\n=NAME\n=AUTHOR\n=VERSION\n=CREATED\n=SYNOPSIS\n=DESCRIPTION\n=USAGE\n```\n\nMost of these blocks would typically be used in their full\ndelimited forms. For example,\n\n```\n=NAME B<Doc::Magic>\n\n=begin DESCRIPTION\nThis module helps you generate documentation automagically.\nNot source code needed! Most of it is outsourced from a black hole.\n=end DESCRIPTION\n\n=begin SYNOPSIS\n=begin code\n\tuse Doc::Magic;\n\n \tmy Doc::Magic $doc .= new();\n\n    my $result = $doc.create-documentation($fh);\n=end code\n=end SYNOPSIS\n\n=AUTHOR Authorius Docus\n=VERSION 42\n```\n\n## Miscellaneous\n\n### Notes\n\nNotes are rendered as footnotes and created by enclosing a note in a\n`N<>` code.\n\n```\nIn addition, the language is also multi-paradigmatic N<According to Wikipedia,\nthis means that it supports procedural, object-oriented, and functional\nprogramming.>\n```\n\n### Keyboard Input\n\nTo flag text as keyboard input enclose it in a `K<>` code.\n\n```\nEnter your name K<John Doe>\n```\n\n### Terminal Output\n\nTo flag text as terminal output enclose it in `T<>` code.\n\n```\nHello, T<John Doe>\n```\n\n### Unicode\n\nTo include Unicode code points or HTML5 character references in\na Pod document, enclose them in a `E<>` code.\n\nFor example:\n\n```\nRaku makes considerable use of the E<171> and E<187> characters.\nRaku makes considerable use of the E<laquo> and E<raquo> characters.\n```\n\nis rendered as:\n\nRaku makes considerable use of the « and » characters.\nRaku makes considerable use of the « and » characters.\n\n## Rendering Pod\n\nTo generate any output (i.e., Markdown, HTML, Text, etc.), you need to\nhave the Rakudo Raku compiler installed. In addition, you must install\na module (e.g., `Pod::To::Markdown`, `Pod::To::HTML`, `Pod::To::Text`, etc.)\nthat generates your desired output from Pod.\n\nFor instructions about installing Rakudo for running raku programs,\n[look here](https://raku.org/downloads/).\n\nRun the following command to generate a certain output:\n\n```\nraku --doc=TARGET input.pod6 > output.html\n```\n\nwith `TARGET` being `Markdown`, `HTML`, `Text`, etc. Thus to generate\nMarkdown from Pod, run this:\n\n```\nraku --doc=Markdown input.pod6 > output.html\n```\n\n## Accessing Pod\n\nIn order to access Pod documentation from within a Raku program,\nit is required to use the special `=` twigil (e.g., `$=pod`, `$=SYNOPSIS`,etc).\n\nThe `$=` construct provides the introspection over the Pod structure,\nproducing a `Pod::Block` tree root from which it is possible to access\nthe whole structure of the Pod document.\n\nIf we place the following piece of Raku code and the Pod documentation\nin the section [Semantic blocks](#semantic-blocks) in the same file:\n\n```\nmy %used-directives;\nfor $=pod -> $pod-item {\n    for $pod-item.contents -> $pod-block {\n        next unless $pod-block ~~ Pod::Block::Named;\n        %used-directives{$pod-block.name} = True;\n    }\n}\n\nsay %used-directives.keys.join(\"\\n\");\n```\n\nwe get the following output:\n\n```\nSYNOPSIS\nNAME\nVERSION\nAUTHOR\nDESCRIPTION\n```\n\n## Additional Information\n\n* <https://docs.raku.org/language/pod> for the Pod documentation.\n* <https://docs.raku.org/language/tables> for advices about Pod tables.\n* <https://design.raku.org/S26.html> for the Pod specification.\n"
        },
        {
          "name": "raku.md",
          "type": "blob",
          "size": 83.755859375,
          "content": "---\nname: Raku\nfilename: learnraku.raku\ncontributors:\n    - [\"vendethiel\", \"http://github.com/vendethiel\"]\n    - [\"Samantha McVey\", \"https://cry.nu\"]\n---\n\nRaku (formerly Perl 6) is a highly capable, feature-rich programming language\nmade for at least the next hundred years.\n\nThe primary Raku compiler is called [Rakudo](http://rakudo.org), which runs on\nthe JVM and the [MoarVM](http://moarvm.com).\n\nMeta-note:\n\n* Although the pound sign (`#`) is used for sentences and notes, Pod-styled\n  comments (more below about them) are used whenever it's convenient.\n* `# OUTPUT:` is used to represent the output of a command to any standard\n   stream. If the output has a newline, it's represented by the `␤` symbol.\n   The output is always enclosed by angle brackets (`«` and `»`).\n* `#=>` represents the value of an expression, return value of a sub, etc.\n   In some cases, the value is accompanied by a comment.\n* Backticks are used to distinguish and highlight the language constructs\n  from the text.\n\n```perl6\n####################################################\n# 0. Comments\n####################################################\n\n# Single line comments start with a pound sign.\n\n#`( Multiline comments use #` and a quoting construct.\n  (), [], {}, 「」, etc, will work.\n)\n\n=for comment\nUse the same syntax for multiline comments to embed comments.\nfor #`(each element in) @array {\n    put #`(or print element) $_ #`(with newline);\n}\n\n# You can also use Pod-styled comments. For example:\n\n=comment This is a comment that extends until an empty\nnewline is found.\n\n=comment\nThe comment doesn't need to start in the same line as the directive.\n\n=begin comment\nThis comment is multiline.\n\nEmpty newlines can exist here too!\n=end comment\n\n####################################################\n# 1. Variables\n####################################################\n\n# In Raku, you declare a lexical variable using the `my` keyword:\nmy $variable;\n\n# Raku has 3 basic types of variables: scalars, arrays, and hashes.\n\n#\n# 1.1 Scalars\n#\n\n# Scalars represent a single value. They start with the `$` sigil:\nmy $str = 'String';\n\n# Double quotes allow for interpolation (which we'll see later):\nmy $str2 = \"$str\";\n\n# Variable names can contain but not end with simple quotes and dashes,\n# and can contain (and end with) underscores:\nmy $person's-belongings = 'towel'; # this works!\n\nmy $bool = True;             # `True` and `False` are Raku's boolean values.\nmy $inverse = !$bool;        # Invert a bool with the prefix `!` operator.\nmy $forced-bool = so $str;   # And you can use the prefix `so` operator\n$forced-bool = ?$str;        # to turn its operand into a Bool. Or use `?`.\n\n#\n# 1.2 Arrays and Lists\n#\n\n# Arrays represent multiple values. An array variable starts with the `@`\n# sigil. Unlike lists, from which arrays inherit, arrays are mutable.\n\nmy @array = 'a', 'b', 'c';\n# equivalent to:\nmy @letters = <a b c>;\n# In the previous statement, we use the quote-words (`<>`) term for array\n# of words, delimited by space. Similar to perl's qw, or Ruby's %w.\n\n@array = 1, 2, 4;\n\n# Array indices start at 0. Here the third element is being accessed.\nsay @array[2]; # OUTPUT: «4␤»\n\nsay \"Interpolate an array using []: @array[]\";\n# OUTPUT: «Interpolate an array using []: 1 2 3␤»\n\n@array[0]    = -1;     # Assigning a new value to an array index\n@array[0, 1] = 5, 6;   # Assigning multiple values\n\nmy @keys = 0, 2;\n@array[@keys] = @letters; # Assignment using an array containing index values\nsay @array;               # OUTPUT: «a 6 b␤»\n\n#\n# 1.3 Hashes, or key-value Pairs.\n#\n\n# Hashes are pairs of keys and values. You can construct a `Pair` object\n# using the syntax `key => value`. Hash tables are very fast for lookup,\n# and are stored unordered. Keep in mind that keys get \"flattened\" in hash\n# context, and any duplicated keys are deduplicated.\nmy %hash = 'a' => 1, 'b' => 2;\n\n# Keys get auto-quoted when the fat comma (`=>`) is used. Trailing commas are\n# okay.\n%hash = a => 1, b => 2, ;\n\n# Even though hashes are internally stored differently than arrays,\n# Raku allows you to easily create a hash from an even numbered array:\n%hash = <key1 value1 key2 value2>;          # Or:\n%hash = \"key1\", \"value1\", \"key2\", \"value2\";\n\n%hash = key1 => 'value1', key2 => 'value2'; # same result as above\n\n# You can also use the \"colon pair\" syntax. This syntax is especially\n# handy for named parameters that you'll see later.\n%hash = :n(2),    # equivalent to `n => 2`\n        :is-even, # equivalent to `:is-even(True)` or `is-even => True`\n        :!is-odd, # equivalent to `:is-odd(False)` or `is-odd => False`\n;\n# The `:` (as in `:is-even`) and `:!` (as `:!is-odd`) constructs are known\n# as the `True` and `False` shortcuts respectively.\n\n# As demonstrated in the example below, you can use {} to get the value from a key.\n# If it's a string without spaces, you can actually use the quote-words operator\n# (`<>`). Since Raku doesn't have barewords, as Perl does, `{key1}` doesn't work\n# though.\nsay %hash{'n'};     # OUTPUT: «2␤», gets value associated to key 'n'\nsay %hash<is-even>; # OUTPUT: «True␤», gets value associated to key 'is-even'\n\n####################################################\n# 2. Subroutines\n####################################################\n\n# Subroutines, or functions as most other languages call them, are\n# created with the `sub` keyword.\nsub say-hello { say \"Hello, world\" }\n\n# You can provide (typed) arguments. If specified, the type will be checked\n# at compile-time if possible, otherwise at runtime.\nsub say-hello-to( Str $name ) {\n    say \"Hello, $name !\";\n}\n\n# A sub returns the last value of the block. Similarly, the semicolon in\n# the last expression can be omitted.\nsub return-value { 5 }\nsay return-value;      # OUTPUT: «5␤»\n\nsub return-empty { }\nsay return-empty;      # OUTPUT: «Nil␤»\n\n# Some control flow structures produce a value, for instance `if`:\nsub return-if {\n\tif True { \"Truthy\" }\n}\nsay return-if;         # OUTPUT: «Truthy␤»\n\n# Some don't, like `for`:\nsub return-for {\n    for 1, 2, 3 { 'Hi' }\n}\nsay return-for;        # OUTPUT: «Nil␤»\n\n# Positional arguments are required by default. To make them optional, use\n# the `?` after the parameters' names.\n\n# In the following example, the sub `with-optional` returns `(Any)` (Perl's\n# null-like value) if no argument is passed. Otherwise, it returns its argument.\nsub with-optional( $arg? ) {\n    $arg;\n}\nwith-optional;     # returns Any\nwith-optional();   # returns Any\nwith-optional(1);  # returns 1\n\n# You can also give provide a default value when they're not passed. Doing\n# this make said parameter optional. Required parameters must come before\n# optional ones.\n\n# In the sub `greeting`, the parameter `$type` is optional.\nsub greeting( $name, $type = \"Hello\" ) {\n  say \"$type, $name!\";\n}\n\ngreeting(\"Althea\");                 # OUTPUT: «Hello, Althea!␤»\ngreeting(\"Arthur\", \"Good morning\"); # OUTPUT: «Good morning, Arthur!␤»\n\n# You can also, by using a syntax akin to the one of hashes (yay unified syntax!),\n# declared named parameters and thus pass named arguments to a subroutine.\n# By default, named parameter are optional and will default to `Any`.\nsub with-named( $normal-arg, :$named ) {\n\tsay $normal-arg + $named;\n}\nwith-named(1, named => 6); # OUTPUT: «7␤»\n\n# There's one gotcha to be aware of, here: If you quote your key, Raku\n# won't be able to see it at compile time, and you'll have a single `Pair`\n# object as a positional parameter, which means the function subroutine\n# `with-named(1, 'named' => 6);` fails.\nwith-named(2, :named(5));  # OUTPUT: «7␤»\n\n# Similar to positional parameters, you can provide your named arguments with\n# default values.\nsub named-def( :$def = 5 ) {\n    say $def;\n}\nnamed-def;            # OUTPUT: «5»\nnamed-def(def => 15); # OUTPUT: «15»\n\n# In order to make a named parameter mandatory, you can append `!` to the\n# parameter. This is the inverse of `?`, which makes a required parameter\n# optional.\n\nsub with-mandatory-named( :$str! )  {\n    say \"$str!\";\n}\nwith-mandatory-named(str => \"My String\"); # OUTPUT: «My String!␤»\n# with-mandatory-named;   # runtime error: \"Required named parameter not passed\"\n# with-mandatory-named(3);# runtime error: \"Too many positional parameters passed\"\n\n# If a sub takes a named boolean argument, you can use the same \"short boolean\"\n# hash syntax we discussed earlier.\nsub takes-a-bool( $name, :$bool ) {\n    say \"$name takes $bool\";\n}\ntakes-a-bool('config', :bool);  # OUTPUT: «config takes True␤»\ntakes-a-bool('config', :!bool); # OUTPUT: «config takes False␤»\n\n# Since parenthesis can be omitted when calling a subroutine, you need to use\n# `&` in order to distinguish between a call to a sub with no arguments and\n# the code object.\n\n# For instance, in this example we must use `&` to store the sub `say-hello`\n# (i.e., the sub's code object) in a variable, not a subroutine call.\nmy &s = &say-hello;\nmy &other-s = sub { say \"Anonymous function!\" }\n\n# A sub can have a \"slurpy\" parameter, or what one'd call a\n# \"doesn't-matter-how-many\" parameter. This is Raku's way of supporting variadic\n# functions. For this, you must use `*@` (slurpy) which will \"take everything\n# else\". You can have as many parameters *before* a slurpy one, but not *after*.\nsub as-many($head, *@rest) {\n    @rest.join(' / ') ~ \" !\";\n}\nsay as-many('Happy', 'Happy', 'Birthday');          # OUTPUT: «Happy / Birthday !␤»\nsay as-many('Happy', ['Happy', 'Birthday'], 'Day'); # OUTPUT: «Happy / Birthday / Day !␤»\n\n# Note that the splat (the *) did not consume the parameter before it.\n\n# There are other two variations of slurpy parameters in Raku. The previous one\n# (namely, `*@`), known as flattened slurpy, flattens passed arguments. The other\n# two are `**@` and `+@` known as unflattened slurpy and \"single argument rule\"\n# slurpy respectively. The unflattened slurpy doesn't flatten its listy\n# arguments (or Iterable ones).\nsub b(**@arr) { @arr.perl.say };\nb(['a', 'b', 'c']);             # OUTPUT: «[[\"a\", \"b\", \"c\"],]»\nb(1, $('d', 'e', 'f'), [2, 3]); # OUTPUT: «[1, (\"d\", \"e\", \"f\"), [2, 3]]»\nb(1, [1, 2], ([3, 4], 5));      # OUTPUT: «[1, [1, 2], ([3, 4], 5)]␤»\n\n# On the other hand, the \"single argument rule\" slurpy follows the \"single argument\n# rule\" which dictates how to handle the slurpy argument based upon context and\n# roughly states that if only a single argument is passed and that argument is\n# Iterable, that argument is used to fill the slurpy parameter array. In any\n# other case, `+@` works like `**@`.\nsub c(+@arr) { @arr.perl.say };\nc(['a', 'b', 'c']);             # OUTPUT: «[\"a\", \"b\", \"c\"]␤»\nc(1, $('d', 'e', 'f'), [2, 3]); # OUTPUT: «[1, (\"d\", \"e\", \"f\"), [2, 3]]␤»\nc(1, [1, 2], ([3, 4], 5));      # OUTPUT: «[1, [1, 2], ([3, 4], 5)]␤»\n\n# You can call a function with an array using the \"argument list flattening\"\n# operator `|` (it's not actually the only role of this operator,\n# but it's one of them).\nsub concat3($a, $b, $c) {\n    say \"$a, $b, $c\";\n}\nconcat3(|@array); # OUTPUT: «a, b, c␤»\n                  # `@array` got \"flattened\" as a part of the argument list\n\n####################################################\n# 3. Containers\n####################################################\n\n# In Raku, values are actually stored in \"containers\". The assignment\n# operator asks the container on the left to store the value on its right.\n# When passed around, containers are marked as immutable which means that,\n# in a function, you'll get an error if you try to mutate one of your\n# arguments. If you really need to, you can ask for a mutable container by\n# using the `is rw` trait.\nsub mutate( $n is rw ) {\n    $n++; # postfix ++ operator increments its argument but returns its old value\n}\nmy $m = 42;\nmutate $m; #=> 42, the value is incremented but the old value is returned\nsay $m;    # OUTPUT: «43␤»\n\n# This works because we are passing the container $m to the `mutate` sub.\n# If we try to just pass a number instead of passing a variable, it won't work\n# because there is no container being passed and integers are immutable by\n# themselves:\n\n# mutate 42; # Parameter '$n' expected a writable container, but got Int value\n\n# Similar error would be obtained, if a bound variable is passed to\n# to the subroutine. In Raku, you bind a value to a variable using the binding\n# operator `:=`.\nmy $v := 50; # binding 50 to the variable $v\n# mutate $v;   # Parameter '$n' expected a writable container, but got Int value\n\n# If what you want is a copy instead, use the `is copy` trait which will\n# cause the argument to be copied and allow you to modify the argument\n# inside the routine without modifying the passed argument.\n\n# A sub itself returns a container, which means it can be marked as `rw`.\n# Alternatively, you can explicitly mark the returned container as mutable\n# by using `return-rw` instead of `return`.\nmy $x = 42;\nmy $y = 45;\nsub x-store is rw { $x }\nsub y-store       { return-rw $y }\n\n# In this case, the parentheses are mandatory or else Raku thinks that\n# `x-store` and `y-store` are identifiers.\nx-store() = 52;\ny-store() *= 2;\n\nsay $x; # OUTPUT: «52␤»\nsay $y; # OUTPUT: «90␤»\n\n####################################################\n# 4.Control Flow Structures\n####################################################\n\n#\n# 4.1 if/if-else/if-elsif-else/unless\n#\n\n# Before talking about `if`, we need to know which values are \"truthy\"\n# (represent `True`), and which are \"falsey\" (represent `False`). Only these\n# values are falsey: 0, (), {}, \"\", Nil, a type (like `Str`, `Int`, etc.) and\n# of course, `False` itself. Any other value is truthy.\nmy $number = 5;\nif $number < 5 {\n    say \"Number is less than 5\"\n}\nelsif $number == 5 {\n    say \"Number is equal to 5\"\n}\nelse {\n    say \"Number is greater than 5\"\n}\n\nunless False {\n    say \"It's not false!\";\n}\n\n# `unless` is the equivalent of `if not (X)` which inverts the sense of a\n# conditional statement. However, you cannot use `else` or `elsif` with it.\n\n# As you can see, you don't need parentheses around conditions. However, you\n# do need the curly braces around the \"body\" block. For example,\n# `if (True) say 'It's true';` doesn't work.\n\n# You can also use their statement modifier (postfix) versions:\nsay \"Quite truthy\" if True;      # OUTPUT: «Quite truthy␤»\nsay \"Quite falsey\" unless False; # OUTPUT: «Quite falsey␤»\n\n# The ternary operator (`??..!!`) is structured as follows `condition ??\n# expression1 !! expression2` and it returns expression1 if the condition is\n# true. Otherwise, it returns expression2.\nmy $age = 30;\nsay $age > 18 ?? \"You are an adult\" !! \"You are under 18\";\n# OUTPUT: «You are an adult␤»\n\n#\n# 4.2 with/with-else/with-orwith-else/without\n#\n\n# The `with` statement is like `if`, but it tests for definedness rather than\n# truth, and it topicalizes on the condition, much like `given` which will\n# be discussed later.\nmy $s = \"raku\";\nwith   $s.index(\"r\") { say \"Found a at $_\"      }\norwith $s.index(\"k\") { say \"Found c at $_\"      }\nelse                 { say \"Didn't find r or k\" }\n\n# Similar to `unless` that checks un-truthiness, you can use `without` to\n# check for undefined-ness.\nmy $input01;\nwithout $input01 {\n    say \"No input given.\"\n}\n# OUTPUT: «No input given.␤»\n\n# There are also statement modifier versions for both `with` and `without`.\nmy $input02 = 'Hello';\nsay $input02 with $input02;               # OUTPUT: «Hello␤»\nsay \"No input given.\" without $input02;\n\n#\n# 4.3 given/when, or Raku's switch construct\n#\n\n=begin comment\n`given...when` looks like other languages' `switch`, but is much more\npowerful thanks to smart matching and Raku's \"topic variable\", `$_`.\n\nThe topic variable `$_ `contains the default argument of a block, a loop's\ncurrent iteration (unless explicitly named), etc.\n\n`given` simply puts its argument into `$_` (like a block would do),\n and `when` compares it using the \"smart matching\" (`~~`) operator.\n\nSince other Raku constructs use this variable (as said before, like `for`,\nblocks, `with` statement etc), this means the powerful `when` is not only\napplicable along with a `given`, but instead anywhere a `$_` exists.\n\n=end comment\n\ngiven \"foo bar\" {\n    say $_;            # OUTPUT: «foo bar␤»\n\n    # Don't worry about smart matching yet. Just know `when` uses it. This is\n    # equivalent to `if $_ ~~ /foo/`.\n    when /foo/ {\n        say \"Yay !\";\n    }\n\n    # smart matching anything with `True` is `True`, i.e. (`$a ~~ True`)\n    # so you can also put \"normal\" conditionals. For example, this `when` is\n    # equivalent to this `if`: `if $_ ~~ ($_.chars > 50) {...}`\n    # which means: `if $_.chars > 50 {...}`\n    when $_.chars > 50 {\n        say \"Quite a long string !\";\n    }\n\n    # same as `when *` (using the Whatever Star)\n    default {\n        say \"Something else\"\n    }\n}\n\n#\n# 4.4 Looping constructs\n#\n\n# The `loop` construct is an infinite loop if you don't pass it arguments, but\n# can also be a C-style `for` loop:\nloop {\n    say \"This is an infinite loop !\";\n    last;\n}\n# In the previous example, `last` breaks out of the loop very much\n# like the `break` keyword in other languages.\n\n# The `next` keyword skips to the next iteration, like `continue` in other\n# languages. Note that you can also use postfix conditionals, loops, etc.\nloop (my $i = 0; $i < 5; $i++) {\n    next if $i == 3;\n    say \"This is a C-style for loop!\";\n}\n\n# The `for` constructs iterates over a list of elements.\nmy @odd-array = 1, 3, 5, 7, 9;\n\n# Accessing the array's elements with the topic variable $_.\nfor @odd-array {\n    say \"I've got $_ !\";\n}\n\n# Accessing the array's elements with a \"pointy block\", `->`.\n# Here each element is read-only.\nfor @odd-array -> $variable {\n    say \"I've got $variable !\";\n}\n\n# Accessing the array's elements with a \"doubly pointy block\", `<->`.\n# Here each element is read-write so mutating `$variable` mutates\n# that element in the array.\nfor @odd-array <-> $variable {\n    say \"I've got $variable !\";\n}\n\n# As we saw with `given`, a `for` loop's default \"current iteration\" variable\n# is `$_`. That means you can use `when` in a `for`loop just like you were\n# able to in a `given`.\nfor @odd-array {\n    say \"I've got $_\";\n\n    # This is also allowed. A dot call with no \"topic\" (receiver) is sent to\n    # `$_` (topic variable) by default.\n    .say;\n\n    # This is equivalent to the above statement.\n    $_.say;\n}\n\nfor @odd-array {\n    # You can...\n    next if $_ == 3; # Skip to the next iteration (`continue` in C-like lang.)\n    redo if $_ == 4; # Re-do iteration, keeping the same topic variable (`$_`)\n    last if $_ == 5; # Or break out of loop (like `break` in C-like lang.)\n}\n\n# The \"pointy block\" syntax isn't specific to the `for` loop. It's just a way\n# to express a block in Raku.\nsub long-computation { \"Finding factors of large primes\" }\nif long-computation() -> $result {\n    say \"The result is $result.\";\n}\n\n####################################################\n# 5. Operators\n####################################################\n\n=begin comment\nSince Perl languages are very much operator-based languages, Raku\noperators are actually just funny-looking subroutines, in syntactic\ncategories, like infix:<+> (addition) or prefix:<!> (bool not).\n\nThe categories are:\n    - \"prefix\": before (like `!` in `!True`).\n    - \"postfix\": after (like `++` in `$a++`).\n    - \"infix\": in between (like `*` in `4 * 3`).\n    - \"circumfix\": around (like `[`-`]` in `[1, 2]`).\n    - \"post-circumfix\": around, after another term (like `{`-`}` in\n                   `%hash{'key'}`)\n\nThe associativity and precedence list are explained below.\n\nAlright, you're set to go!\n\n=end comment\n\n#\n# 5.1 Equality Checking\n#\n\n# `==` is numeric comparison\nsay 3 == 4; # OUTPUT: «False␤»\nsay 3 != 4; # OUTPUT: «True␤»\n\n# `eq` is string comparison\nsay 'a' eq 'b';  # OUTPUT: «False␤»\nsay 'a' ne 'b';  # OUTPUT: «True␤», not equal\nsay 'a' !eq 'b'; # OUTPUT: «True␤», same as above\n\n# `eqv` is canonical equivalence (or \"deep equality\")\nsay (1, 2) eqv (1, 3); # OUTPUT: «False␤»\nsay (1, 2) eqv (1, 2); # OUTPUT: «True␤»\nsay Int === Int;       # OUTPUT: «True␤»\n\n# `~~` is the smart match operator which aliases the left hand side to $_ and\n# then evaluates the right hand side.\n# Here are some common comparison semantics:\n\n# String or numeric equality\nsay 'Foo' ~~ 'Foo'; # OUTPUT: «True␤», if strings are equal.\nsay 12.5 ~~ 12.50;  # OUTPUT: «True␤», if numbers are equal.\n\n# Regex - For matching a regular expression against the left side.\n# Returns a `Match` object, which evaluates as True if regexp matches.\nmy $obj = 'abc' ~~ /a/;\nsay $obj;       # OUTPUT: «｢a｣␤»\nsay $obj.WHAT;  # OUTPUT: «(Match)␤»\n\n# Hashes\nsay 'key' ~~ %hash; # OUTPUT: «True␤», if key exists in hash.\n\n# Type - Checks if left side \"is of type\" (can check superclasses and roles).\nsay 1 ~~ Int;       # OUTPUT: «True␤»\n\n# Smart-matching against a boolean always returns that boolean (and will warn).\nsay 1 ~~ True;        # OUTPUT: «True␤», smartmatch against True always matches\nsay False.so ~~ True; # OUTPUT: «True␤», use .so for truthiness\n\n# General syntax is `$arg ~~ &bool-returning-function;`. For a complete list\n# of combinations, refer to the table at:\n# https://docs.raku.org/language/operators#index-entry-smartmatch_operator\n\n# Of course, you also use `<`, `<=`, `>`, `>=` for numeric comparison.\n# Their string equivalent are also available: `lt`, `le`, `gt`, `ge`.\nsay 3 > 4;       # OUTPUT: «False␤»\nsay 3 >= 4;      # OUTPUT: «False␤»\nsay 3 < 4;       # OUTPUT: «True␤»\nsay 3 <= 4;      # OUTPUT: «True␤»\nsay 'a' gt 'b';  # OUTPUT: «False␤»\nsay 'a' ge 'b';  # OUTPUT: «False␤»\nsay 'a' lt 'b';  # OUTPUT: «True␤»\nsay 'a' le 'b';  # OUTPUT: «True␤»\n\n#\n# 5.2 Range constructor\n#\n\nsay 3 .. 7;          # OUTPUT: «3..7␤»,   both included.\nsay 3 ..^ 7;         # OUTPUT: «3..^7␤»,  exclude right endpoint.\nsay 3 ^.. 7;         # OUTPUT: «3^..7␤»,  exclude left endpoint.\nsay 3 ^..^ 7;        # OUTPUT: «3^..^7␤», exclude both endpoints.\n\n# The range 3 ^.. 7 is similar like 4 .. 7 when we only consider integers.\n# But when we consider decimals:\n\nsay 3.5 ~~ 4 .. 7;\t # OUTPUT: «False␤»\nsay 3.5 ~~ 3 ^.. 7;\t # OUTPUT: «True␤»,\n\n# This is because the range `3 ^.. 7` only excludes anything strictly\n# equal to 3. Hence, it contains decimals greater than 3. This could\n# mathematically be described as 3.5 ∈ (3,7] or in set notation,\n# 3.5 ∈ { x | 3 < x ≤ 7 }.\n\nsay 3 ^.. 7 ~~ 4 .. 7; # OUTPUT: «False␤»\n\n# This also works as a shortcut for `0..^N`:\nsay ^10;             # OUTPUT: «^10␤», which means 0..^10\n\n# This also allows us to demonstrate that Raku has lazy/infinite arrays,\n# using the Whatever Star:\nmy @natural = 1..*; # 1 to Infinite! Equivalent to `1..Inf`.\n\n# You can pass ranges as subscripts and it'll return an array of results.\nsay @natural[^10]; # OUTPUT: «1 2 3 4 5 6 7 8 9 10␤», doesn't run out of memory!\n\n# NOTE: when reading an infinite list, Raku will \"reify\" the elements\n# it needs, then keep them in memory. They won't be calculated more than once.\n# It also will never calculate more elements than that are needed.\n\n# An array subscript can also be a closure. It'll be called with the array's\n# length as the argument. The following two examples are equivalent:\nsay join(' ', @array[15..*]);            # OUTPUT: «15 16 17 18 19␤»\nsay join(' ', @array[-> $n { 15..$n }]); # OUTPUT: «15 16 17 18 19␤»\n\n# NOTE: if you try to do either of those with an infinite array, you'll\n# trigger an infinite loop (your program won't finish).\n\n# You can use that in most places you'd expect, even when assigning to an array:\nmy @numbers = ^20;\n\n# Here the numbers increase by 6, like an arithmetic sequence; more on the\n# sequence (`...`) operator later.\nmy @seq =  3, 9 ... * > 95;  # 3 9 15 21 27 [...] 81 87 93 99;\n\n# In this example, even though the sequence is infinite, only the 15\n# needed values will be calculated.\n@numbers[5..*] = 3, 9 ... *;\nsay @numbers; # OUTPUT: «0 1 2 3 4 3 9 15 21 [...] 81 87␤», only 20 values\n\n#\n# 5.3 and (&&), or (||)\n#\n\n# Here `and` calls `.Bool` on both 3 and 4 and gets `True` so it returns\n# 4 since both are `True`.\nsay (3 and 4);     # OUTPUT: «4␤», which is truthy.\nsay (3 and 0);     # OUTPUT: «0␤»\nsay (0 and 4);     # OUTPUT: «0␤»\n\n# Here `or` calls `.Bool` on `0` and `False` which are both `False`\n# so it returns `False` since both are `False`.\nsay (0 or False); # OUTPUT: «False␤».\n\n# Both `and` and `or` have tighter versions which also shortcut circuits.\n# They're `&&` and `||` respectively.\n\n# `&&` returns the first operand that evaluates to `False`. Otherwise,\n# it returns the last operand.\nmy ($a, $b, $c, $d, $e) = 1, 0, False, True, 'pi';\nsay $a && $b && $c; # OUTPUT: «0␤», the first falsey value\nsay $a && $b && $c; # OUTPUT: «False␤», the first falsey value\nsay $a && $d && $e; # OUTPUT: «pi␤», last operand since everything before is truthy\n\n# `||` returns the first argument that evaluates to `True`.\nsay $b || $a || $d; # OUTPUT: «1␤»\nsay $e || $d || $a; # OUTPUT: «pi␤»\n\n# And because you're going to want them, you also have compound assignment\n# operators:\n$a *= 2;        # multiply and assignment. Equivalent to $a = $a * 2;\n$b %%= 5;       # divisible by and assignment. Equivalent to $b = $b %% 2;\n$c div= 3;      # return divisor and assignment. Equivalent to $c = $c div 3;\n$d mod= 4;      # return remainder and assignment. Equivalent to $d = $d mod 4;\n@array .= sort; # calls the `sort` method and assigns the result back\n\n####################################################\n# 6. More on subs!\n####################################################\n\n# As we said before, Raku has *really* powerful subs. We're going\n# to see a few more key concepts that make them better than in any\n# other language :-).\n\n#\n# 6.1 Unpacking!\n#\n\n# Unpacking is the ability to \"extract\" arrays and keys\n# (AKA \"destructuring\"). It'll work in `my`s and in parameter lists.\nmy ($f, $g) = 1, 2;\nsay $f;                  # OUTPUT: «1␤»\nmy ($, $, $h) = 1, 2, 3; # keep the non-interesting values anonymous (`$`)\nsay $h;                  # OUTPUT: «3␤»\n\nmy ($head, *@tail) = 1, 2, 3; # Yes, it's the same as with \"slurpy subs\"\nmy (*@small) = 1;\n\nsub unpack_array( @array [$fst, $snd] ) {\n  say \"My first is $fst, my second is $snd! All in all, I'm @array[].\";\n  # (^ remember the `[]` to interpolate the array)\n}\nunpack_array(@tail);\n# OUTPUT: «My first is 2, my second is 3! All in all, I'm 2 3.␤»\n\n# If you're not using the array itself, you can also keep it anonymous,\n# much like a scalar:\nsub first-of-array( @ [$fst] ) { $fst }\nfirst-of-array(@small); #=> 1\n\n# However calling `first-of-array(@tail);` will throw an error (\"Too many\n# positional parameters passed\"), which means the `@tail` has too many\n# elements.\n\n# You can also use a slurpy parameter. You could keep `*@rest` anonymous\n# Here, `@rest` is `(3,)`, since `$fst` holds the `2`. This results\n# since the length (.elems) of `@rest` is 1.\nsub slurp-in-array(@ [$fst, *@rest]) {\n    say $fst + @rest.elems;\n}\nslurp-in-array(@tail); # OUTPUT: «3␤»\n\n# You could even extract on a slurpy (but it's pretty useless ;-).)\nsub fst(*@ [$fst]) { # or simply: `sub fst($fst) { ... }`\n    say $fst;\n}\nfst(1);    # OUTPUT: «1␤»\n\n# Calling `fst(1, 2);` will throw an error (\"Too many positional parameters\n# passed\") though. After all, the `fst` sub declares only a single positional\n# parameter.\n\n# You can also destructure hashes (and classes, which you'll learn about later).\n# The syntax is basically the same as\n# `%hash-name (:key($variable-to-store-value-in))`.\n# The hash can stay anonymous if you only need the values you extracted.\n\n# In order to call the function, you must supply a hash wither created with\n# curly braces or with `%()` (recommended). Alternatively, you can pass\n# a variable that contains a hash.\n\nsub key-of( % (:value($val), :qua($qua)) ) {\n \tsay \"Got value $val, $qua time\" ~~\n        $qua == 1 ?? '' !! 's';\n}\n\nmy %foo-once = %(value => 'foo', qua => 1);\nkey-of({value => 'foo', qua => 2});  # OUTPUT: «Got val foo, 2 times.␤»\nkey-of(%(value => 'foo', qua => 0)); # OUTPUT: «Got val foo, 0 times.␤»\nkey-of(%foo-once);                   # OUTPUT: «Got val foo, 1 time.␤»\n\n# The last expression of a sub is returned automatically (though you may\n# indicate explicitly by using the `return` keyword, of course):\nsub next-index( $n ) {\n \t$n + 1;\n}\nmy $new-n = next-index(3); # $new-n is now 4\n\n# This is true for everything, except for the looping constructs (due to\n# performance reasons): there's no reason to build a list if we're just going to\n# discard all the results. If you still want to build one, you can use the\n# `do` statement prefix or the `gather` prefix, which we'll see later:\n\nsub list-of( $n ) {\n \tdo for ^$n { $_ }\n}\nmy @list3 = list-of(3); #=> (0, 1, 2)\n\n#\n# 6.2 Lambdas (or anonymous subroutines)\n#\n\n# You can create a lambda by using a pointy block (`-> {}`), a\n# block (`{}`) or creating a `sub` without a name.\n\nmy &lambda1 = -> $argument {\n\t\"The argument passed to this lambda is $argument\"\n}\n\nmy &lambda2 = {\n\t\"The argument passed to this lambda is $_\"\n}\n\nmy &lambda3 = sub ($argument) {\n\t\"The argument passed to this lambda is $argument\"\n}\n\n# Both pointy blocks and blocks are pretty much the same thing, except that\n# the former can take arguments, and that the latter can be mistaken as\n# a hash by the parser. That being said, blocks can declare what's known\n# as placeholders parameters through the twigils `$^` (for positional\n# parameters) and `$:` (for named parameters). More on them later on.\n\nmy &mult = { $^numbers * $:times }\nsay mult 4, :times(6); #=> «24␤»\n\n# Both pointy blocks and blocks are quite versatile when working with functions\n# that accepts other functions such as `map`, `grep`, etc. For example,\n# we add 3 to each value of an array using the `map` function with a lambda:\nmy @nums = 1..4;\nmy @res1 = map -> $v { $v + 3 }, @nums; # pointy block, explicit parameter\nmy @res2 = map { $_ + 3 },       @nums; # block using an implicit parameter\nmy @res3 = map { $^val + 3 },    @nums; # block with placeholder parameter\n\n# A sub (`sub {}`) has different semantics than a block (`{}` or `-> {}`):\n# A block doesn't have a \"function context\" (though it can have arguments),\n# which means that if you return from it, you're going to return from the\n# parent function.\n\n# Compare:\nsub is-in( @array, $elem ) {\n   say map({ return True if $_ == $elem }, @array);\n   say 'Hi';\n}\n\n# with:\nsub truthy-array( @array ) {\n    say map sub ($i) { $i ?? return True !! return False }, @array;\n    say 'Hi';\n}\n\n# In the `is-in` sub, the block will `return` out of the `is-in` sub once the\n# condition evaluates to `True`, the loop won't be run anymore and the\n# following statement won't be executed. The last statement is only executed\n# if the block never returns.\n\n# On the contrary, the `truthy-array` sub will produce an array of `True` and\n# `False`, which will printed, and always execute the last execute statement.\n# Thus, the `return` only returns from the anonymous `sub`\n\n# The `anon` declarator can be used to create an anonymous sub from a\n# regular subroutine. The regular sub knows its name but its symbol is\n# prevented from getting installed in the lexical scope, the method table\n# and everywhere else.\nmy $anon-sum = anon sub summation(*@a) { [+] @a }\nsay $anon-sum.name;     # OUTPUT: «summation␤»\nsay $anon-sum(2, 3, 5); # OUTPUT: «10␤»\n#say summation;         # Error: Undeclared routine: ...\n\n# You can also use the Whatever Star to create an anonymous subroutine.\n# (it'll stop at the furthest operator in the current expression).\n# The following is the same as `{$_ + 3 }`, `-> { $a + 3 }`,\n# `sub ($a) { $a + 3 }`, or even `{$^a + 3}` (more on this later).\nmy @arrayplus3v0 = map * + 3, @nums;\n\n# The following is the same as `-> $a, $b { $a + $b + 3 }`,\n# `sub ($a, $b) { $a + $b + 3 }`, or `{ $^a + $^b + 3 }` (more on this later).\nmy @arrayplus3v1 = map * + * + 3, @nums;\n\nsay (*/2)(4); # OUTPUT: «2␤», immediately execute the Whatever function created.\nsay ((*+3)/5)(5); # OUTPUT: «1.6␤», it works even in parens!\n\n# But if you need to have more than one argument (`$_`) in a block (without\n# wanting to resort to `-> {}`), you can also either `$^` and `$:` which\n# declared placeholder parameters or self-declared positional/named parameters.\nsay map { $^a + $^b + 3 }, @nums;\n\n# which is equivalent to the following which uses a `sub`:\nmap sub ($a, $b) { $a + $b + 3 }, @nums;\n\n# Placeholder parameters are sorted lexicographically so the following two\n# statements are equivalent:\nsay sort           { $^b <=> $^a }, @nums;\nsay sort -> $a, $b { $b  <=> $a  }, @nums;\n\n#\n# 6.3 Multiple Dispatch\n#\n\n# Raku can decide which variant of a `sub` to call based on the type of the\n# arguments, or on arbitrary preconditions, like with a type or `where`:\n\n# with types:\nmulti sub sayit( Int $n ) { # note the `multi` keyword here\n    say \"Number: $n\";\n}\nmulti sayit( Str $s ) {     # a multi is a `sub` by default\n    say \"String: $s\";\n}\nsayit \"foo\"; # OUTPUT: «String: foo␤»\nsayit 25;    # OUTPUT: «Number: 25␤»\nsayit True;  # fails at *compile time* with \"calling 'sayit' will never\n             # work with arguments of types ...\"\n\n# with arbitrary preconditions (remember subsets?):\nmulti is-big(Int $n where * > 50) { \"Yes!\" }    # using a closure\nmulti is-big(Int $n where {$_ > 50}) { \"Yes!\" } # similar to above\nmulti is-big(Int $ where 10..50)  { \"Quite.\" }  # Using smart-matching\nmulti is-big(Int $) { \"No\" }\n\nsubset Even of Int where * %% 2;\nmulti odd-or-even(Even) { \"Even\" } # Using the type. We don't name the argument.\nmulti odd-or-even($) { \"Odd\" }     # \"everything else\" hence the $ variable\n\n# You can even dispatch based on the presence of positional and named arguments:\nmulti with-or-without-you($with) {\n    say \"I wish I could but I can't\";\n}\nmulti with-or-without-you(:$with) {\n    say \"I can live! Actually, I can't.\";\n}\nmulti with-or-without-you {\n    say \"Definitely can't live.\";\n}\n\n# This is very, very useful for many purposes, like `MAIN` subs (covered\n# later), and even the language itself uses it in several places.\n\n# For example, the `is` trait is actually a `multi sub` named `trait_mod:<is>`,\n# and it works off that. Thus, `is rw`, is simply a dispatch to a function with\n# this signature `sub trait_mod:<is>(Routine $r, :$rw!) {}`\n\n####################################################\n# 7. About types...\n####################################################\n\n# Raku is gradually typed. This means you can specify the type of your\n# variables/arguments/return types, or you can omit the type annotations in\n# in which case they'll default to `Any`. Obviously you get access to a few\n# base types, like `Int` and `Str`. The constructs for declaring types are\n# `subset`, `class`, `role`, etc. which you'll see later.\n\n# For now, let us examine `subset` which is a \"sub-type\" with additional\n# checks. For example, \"a very big integer is an `Int` that's greater than 500\".\n# You can specify the type you're subtyping (by default, `Any`), and add\n# additional checks with the `where` clause.\nsubset VeryBigInteger of Int where * > 500;\n\n# Or the set of the whole numbers:\nsubset WholeNumber of Int where * >= 0;\nmy WholeNumber $whole-six    = 6;  # OK\n#my WholeNumber $nonwhole-one = -1; # Error: type check failed...\n\n# Or the set of Positive Even Numbers whose Mod 5 is 1. Notice we're\n# using the previously defined WholeNumber subset.\nsubset PENFO of WholeNumber where { $_ %% 2 and $_ mod 5 == 1 };\nmy PENFO $yes-penfo = 36;  # OK\n#my PENFO $no-penfo  = 2;  # Error: type check failed...\n\n####################################################\n# 8. Scoping\n####################################################\n\n# In Raku, unlike many scripting languages, (such as Python, Ruby, PHP),\n# you must declare your variables before using them. The `my` declarator\n# we've used so far uses \"lexical scoping\". There are a few other declarators,\n# (`our`, `state`, ..., ) which we'll see later. This is called\n# \"lexical scoping\", where in inner blocks, you can access variables from\n# outer blocks.\n\nmy $file_scoped = 'Foo';\nsub outer {\n    my $outer_scoped = 'Bar';\n    sub inner {\n        say \"$file_scoped $outer_scoped\";\n    }\n    &inner; # return the function\n}\nouter()();  # OUTPUT: «Foo Bar␤»\n\n# As you can see, `$file_scoped` and `$outer_scoped` were captured.\n# But if we were to try and use `$outer_scoped` outside the `outer` sub,\n# the variable would be undefined (and you'd get a compile time error).\n\n####################################################\n# 9. Twigils\n####################################################\n\n# There are many special `twigils` (composed sigils) in Raku. Twigils\n# define a variable's scope.\n# The `*` and `?` twigils work on standard variables:\n#     * for dynamic variables\n#     ? for compile-time variables\n#\n# The `!` and the `.` twigils are used with Raku's objects:\n#     ! for attributes (instance attribute)\n#     . for methods (not really a variable)\n\n#\n# `*` twigil: Dynamic Scope\n#\n\n# These variables use the `*` twigil to mark dynamically-scoped variables.\n# Dynamically-scoped variables are looked up through the caller, not through\n# the outer scope.\n\nmy $*dyn_scoped_1 = 1;\nmy $*dyn_scoped_2 = 10;\n\nsub say_dyn {\n    say \"$*dyn_scoped_1 $*dyn_scoped_2\";\n}\n\nsub call_say_dyn {\n    # Defines $*dyn_scoped_1 only for this sub.\n    my $*dyn_scoped_1 = 25;\n\n    # Will change the value of the file scoped variable.\n    $*dyn_scoped_2 = 100;\n\n    # $*dyn_scoped 1 and 2 will be looked for in the call.\n    say_dyn();  # OUTPUT: «25 100␤»\n\n    # The call to `say_dyn` uses the value of $*dyn_scoped_1 from inside\n    # this sub's lexical scope even though the blocks aren't nested (they're\n    # call-nested).\n}\nsay_dyn();      # OUTPUT: «1 10␤»\n\n# Uses $*dyn_scoped_1 as defined in `call_say_dyn` even though we are calling it\n# from outside.\ncall_say_dyn(); # OUTPUT: «25 100␤»\n\n# We changed the value of $*dyn_scoped_2 in `call_say_dyn` so now its\n# value has changed.\nsay_dyn();      # OUTPUT: «1 100␤»\n\n# TODO: Add information about remaining twigils\n\n####################################################\n# 10. Object Model\n####################################################\n\n# To call a method on an object, add a dot followed by the method name:\n# `$object.method`\n\n# Classes are declared with the `class` keyword. Attributes are declared\n# with the `has` keyword, and methods declared with the `method` keyword.\n\n# Every attribute that is private uses the `!` twigil. For example: `$!attr`.\n# Immutable public attributes use the `.` twigil which creates a read-only\n# method named after the attribute. In fact, declaring an attribute with `.`\n# is equivalent to declaring the same attribute with `!` and then creating\n# a read-only method with the attribute's name. However, this is done for us\n# by Raku automatically. The easiest way to remember the `$.` twigil is\n# by comparing it to how methods are called.\n\n# Raku's object model (\"SixModel\") is very flexible, and allows you to\n# dynamically add methods, change semantics, etc... Unfortunately, these will\n# not all be covered here, and you should refer to:\n# https://docs.raku.org/language/objects.html.\n\nclass Human {\n    has Str $.name;           # `$.name` is immutable but with an accessor method.\n    has Str $.bcountry;       # Use `$!bcountry` to modify it inside the class.\n\thas Str $.ccountry is rw; # This attribute can be modified from outside.\n\thas Int $!age = 0;        # A private attribute with default value.\n\n\tmethod birthday {\n\t\t$!age += 1; # Add a year to human's age\n\t}\n\n\tmethod get-age {\n\t\treturn $!age;\n\t}\n\n\t# This method is private to the class. Note the `!` before the\n\t# method's name.\n\tmethod !do-decoration {\n    \treturn \"$!name born in $!bcountry and now lives in $!ccountry.\"\n  \t}\n\n  \t# This method is public, just like `birthday` and `get-age`.\n  \tmethod get-info {\n        # Invoking a method on `self` inside the class.\n        # Use `self!priv-method` for private method.\n  \t\tsay self!do-decoration;\n\n  \t\t# Use `self.public-method` for public method.\n  \t\tsay \"Age: \", self.get-age;\n  \t}\n};\n\n# Create a new instance of Human class.\n# NOTE: Only attributes declared with the `.` twigil can be set via the\n# default constructor (more later on). This constructor only accepts named\n# arguments.\nmy $person1 = Human.new(\n\tname     => \"Jord\",\n\tbcountry => \"Togo\",\n\tccountry => \"Togo\"\n);\n\n# Make human 10 years old.\n$person1.birthday for 1..10;\n\nsay $person1.name;     # OUTPUT: «Jord␤»\nsay $person1.bcountry; # OUTPUT: «Togo␤»\nsay $person1.ccountry; # OUTPUT: «Togo␤»\nsay $person1.get-age;  # OUTPUT: «10␤»\n\n# This fails, because the `has $.bcountry`is immutable. Jord can't change\n# his birthplace.\n# $person1.bcountry = \"Mali\";\n\n# This works because the `$.ccountry` is mutable (`is rw`). Now Jord's\n# current country is France.\n$person1.ccountry = \"France\";\n\n# Calling methods on the instance objects.\n$person1.birthday;      #=> 1\n$person1.get-info;      #=> Jord born in Togo and now lives in France. Age: 10\n# $person1.do-decoration; # This fails since the method `do-decoration` is private.\n\n#\n# 10.1 Object Inheritance\n#\n\n# Raku also has inheritance (along with multiple inheritance). While\n# methods are inherited, submethods are not. Submethods are useful for\n# object construction and destruction tasks, such as `BUILD`, or methods that\n# must be overridden by subtypes. We will learn about `BUILD` later on.\n\nclass Parent {\n  \thas $.age;\n \thas $.name;\n\n  \t# This submethod won't be inherited by the Child class.\n  \tsubmethod favorite-color {\n    \tsay \"My favorite color is Blue\";\n  \t}\n\n  \t# This method is inherited\n  \tmethod talk { say \"Hi, my name is $!name\" }\n}\n\n# Inheritance uses the `is` keyword\nclass Child is Parent {\n  \tmethod talk { say \"Goo goo ga ga\" }\n  \t# This shadows Parent's `talk` method.\n  \t# This child hasn't learned to speak yet!\n}\n\nmy Parent $Richard .= new(age => 40, name => 'Richard');\n$Richard.favorite-color;  # OUTPUT: «My favorite color is Blue␤»\n$Richard.talk;            # OUTPUT: «Hi, my name is Richard␤»\n# $Richard is able to access the submethod and he knows how to say his name.\n\nmy Child $Madison .= new(age => 1, name => 'Madison');\n$Madison.talk;            # OUTPUT: «Goo goo ga ga␤», due to the overridden method.\n# $Madison.favorite-color # does not work since it is not inherited.\n\n# When you use `my T $var`, `$var` starts off with `T` itself in it, so you can\n# call `new` on it. (`.=` is just the dot-call and the assignment operator).\n# Thus, `$a .= b` is the same as `$a = $a.b`. Also note that `BUILD` (the method\n# called inside `new`) will set parent's properties too, so you can pass `val =>\n# 5`.\n\n#\n# 10.2 Roles, or Mixins\n#\n\n# Roles are supported too (which are called Mixins in other languages)\nrole PrintableVal {\n  \thas $!counter = 0;\n  \tmethod print {\n    \tsay $.val;\n  \t}\n}\n\n# you \"apply\" a role (or mixin) with the `does` keyword:\nclass Item does PrintableVal {\n  \thas $.val;\n\n    =begin comment\n    When `does`-ed, a `role` literally \"mixes in\" the class:\n    the methods and attributes are put together, which means a class\n    can access the private attributes/methods of its roles (but\n    not the inverse!):\n    =end comment\n  \tmethod access {\n  \t\tsay $!counter++;\n  \t}\n\n    =begin comment\n    However, this: method print {} is ONLY valid when `print` isn't a `multi`\n    with the same dispatch. This means a parent class can shadow a child class's\n    `multi print() {}`, but it's an error if a role does)\n\n    NOTE: You can use a role as a class (with `is ROLE`). In this case,\n    methods will be shadowed, since the compiler will consider `ROLE`\n    to be a class.\n    =end comment\n}\n\n####################################################\n# 11. Exceptions\n####################################################\n\n# Exceptions are built on top of classes, in the package `X` (like `X::IO`).\n# In Raku, exceptions are automatically 'thrown':\n\n# open 'foo';   # OUTPUT: «Failed to open file foo: no such file or directory␤»\n\n# It will also print out what line the error was thrown at\n# and other error info.\n\n# You can throw an exception using `die`. Here it's been commented out to\n# avoid stopping the program's execution:\n# die 'Error!'; # OUTPUT: «Error!␤»\n\n# Or more explicitly (commented out too):\n# X::AdHoc.new(payload => 'Error!').throw; # OUTPUT: «Error!␤»\n\n# In Raku, `orelse` is similar to the `or` operator, except it only matches\n# undefined variables instead of anything evaluating as `False`.\n# Undefined values include: `Nil`, `Mu` and `Failure` as well as `Int`, `Str`\n# and other types that have not been initialized to any value yet.\n# You can check if something is defined or not using the defined method:\nmy $uninitialized;\nsay $uninitialized.defined; # OUTPUT: «False␤»\n\n# When using `orelse` it will disarm the exception and alias $_ to that\n# failure. This will prevent it to being automatically handled and printing\n# lots of scary error messages to the screen. We can use the `exception`\n# method on the `$_` variable to access the exception\nopen 'foo' orelse say \"Something happened {.exception}\";\n\n# This also works:\nopen 'foo' orelse say \"Something happened $_\";\n# OUTPUT: «Something happened Failed to open file foo: no such file or directory␤»\n\n# Both of those above work but in case we get an object from the left side\n# that is not a failure we will probably get a warning. We see below how we\n# can use try` and `CATCH` to be more specific with the exceptions we catch.\n\n#\n# 11.1 Using `try` and `CATCH`\n#\n\n# By using `try` and `CATCH` you can contain and handle exceptions without\n# disrupting the rest of the program. The `try` block will set the last\n# exception to the special variable `$!` (known as the error variable).\n# NOTE: This has no relation to $!variables seen inside class definitions.\n\ntry open 'foo';\nsay \"Well, I tried! $!\" if defined $!;\n# OUTPUT: «Well, I tried! Failed to open file foo: no such file or directory␤»\n\n# Now, what if we want more control over handling the exception?\n# Unlike many other languages, in Raku, you put the `CATCH` block *within*\n# the block to `try`. Similar to how the `$_` variable was set when we\n# 'disarmed' the exception with `orelse`, we also use `$_` in the CATCH block.\n# NOTE: The `$!` variable is only set *after* the `try` block has caught an\n# exception. By default, a `try` block has a `CATCH` block of its own that\n# catches any exception (`CATCH { default {} }`).\n\ntry {\n    my $a = (0 %% 0);\n    CATCH {\n        default { say \"Something happened: $_\" }\n    }\n}\n# OUTPUT: «Something happened: Attempt to divide by zero using infix:<%%>␤»\n\n# You can redefine it using `when`s (and `default`) to handle the exceptions\n# you want to catch explicitly:\n\ntry {\n  open 'foo';\n    CATCH {\n        # In the `CATCH` block, the exception is set to the $_ variable.\n        when X::AdHoc {\n            say \"Error: $_\"\n        }\n        when X::Numeric::DivideByZero {\n            say \"Error: $_\";\n        }\n\n        =begin comment\n        Any other exceptions will be re-raised, since we don't have a `default`.\n        Basically, if a `when` matches (or there's a `default`), the\n\t    exception is marked as \"handled\" so as to prevent its re-throw\n        from the `CATCH` block. You still can re-throw the exception\n        (see below) by hand.\n        =end comment\n        default {\n            say \"Any other error: $_\"\n        }\n  }\n}\n# OUTPUT: «Failed to open file /dir/foo: no such file or directory␤»\n\n# There are also some subtleties to exceptions. Some Raku subs return a\n# `Failure`, which is a wrapper around an `Exception` object which is\n# \"unthrown\". They're not thrown until you try to use the variables containing\n# them unless you call `.Bool`/`.defined` on them - then they're handled.\n# (the `.handled` method is `rw`, so you can mark it as `False` back yourself)\n# You can throw a `Failure` using `fail`. Note that if the pragma `use fatal`\n# is on, `fail` will throw an exception (like `die`).\n\nmy $value = 0/0; # We're not trying to access the value, so no problem.\ntry {\n    say 'Value: ', $value; # Trying to use the value\n    CATCH {\n        default {\n            say \"It threw because we tried to get the fail's value!\"\n        }\n  }\n}\n\n# There is also another kind of exception: Control exceptions. Those are \"good\"\n# exceptions, which happen when you change your program's flow, using operators\n# like `return`, `next` or `last`. You can \"catch\" those with `CONTROL` (not 100%\n# working in Rakudo yet).\n\n####################################################\n# 12. Packages\n####################################################\n\n# Packages are a way to reuse code. Packages are like \"namespaces\", and any\n# element of the six model (`module`, `role`, `class`, `grammar`, `subset` and\n# `enum`) are actually packages. (Packages are the lowest common denominator)\n# Packages are important - especially as Perl is well-known for CPAN,\n# the Comprehensive Perl Archive Network.\n\n# You can use a module (bring its declarations into scope) with `use`:\nuse JSON::Tiny; # if you installed Rakudo* or Panda, you'll have this module\nsay from-json('[1]').perl; # OUTPUT: «[1]␤»\n\n# You should not declare packages using the `package` keyword (unlike Perl).\n# Instead, use `class Package::Name::Here;` to declare a class, or if you only\n# want to export variables/subs, you can use `module` instead.\n\n# If `Hello` doesn't exist yet, it'll just be a \"stub\", that can be redeclared\n# as something else later.\nmodule Hello::World { # bracketed form\n    # declarations here\n}\n\n# The file-scoped form which extends until the end of the file. For\n# instance, `unit module Parse::Text;` will extend until of the file.\n\n# A grammar is a package, which you could `use`. You will learn more about\n# grammars in the regex section.\ngrammar Parse::Text::Grammar {\n}\n\n# As said before, any part of the six model is also a package.\n# Since `JSON::Tiny` uses its own `JSON::Tiny::Actions` class, you can use it:\nmy $actions = JSON::Tiny::Actions.new;\n\n# We'll see how to export variables and subs in the next part.\n\n####################################################\n# 13. Declarators\n####################################################\n\n# In Raku, you get different behaviors based on how you declare a variable.\n# You've already seen `my` and `has`, we'll now explore the others.\n\n# `our` - these declarations happen at `INIT` time -- (see \"Phasers\" below).\n# It's like `my`, but it also creates a package variable. All packagish\n# things such as `class`, `role`, etc. are `our` by default.\n\nmodule Var::Increment {\n    # NOTE: `our`-declared variables cannot be typed.\n    our $our-var = 1;\n    my $my-var = 22;\n\n    our sub Inc {\n        our sub available { # If you try to make inner `sub`s `our`...\n                            # ... Better know what you're doing (Don't !).\n            say \"Don't do that. Seriously. You'll get burned.\";\n        }\n\n        my sub unavailable { # `sub`s are `my`-declared by default\n            say \"Can't access me from outside, I'm 'my'!\";\n        }\n        say ++$our-var; # Increment the package variable and output its value\n  }\n\n}\n\nsay $Var::Increment::our-var; # OUTPUT: «1␤», this works!\nsay $Var::Increment::my-var;  # OUTPUT: «(Any)␤», this will not work!\n\nsay Var::Increment::Inc;  # OUTPUT: «2␤»\nsay Var::Increment::Inc;  # OUTPUT: «3␤», notice how the value of $our-var was retained.\n\n# Var::Increment::unavailable;  # OUTPUT: «Could not find symbol '&unavailable'␤»\n\n# `constant` - these declarations happen at `BEGIN` time. You can use\n# the `constant` keyword to declare a compile-time variable/symbol:\nconstant Pi = 3.14;\nconstant $var = 1;\n\n# And if you're wondering, yes, it can also contain infinite lists.\nconstant why-not = 5, 15 ... *;\nsay why-not[^5]; # OUTPUT: «5 15 25 35 45␤»\n\n# `state` - these declarations happen at run time, but only once. State\n# variables are only initialized one time. In other languages such as C\n# they exist as `static` variables.\nsub fixed-rand {\n    state $val = rand;\n    say $val;\n}\nfixed-rand for ^10; # will print the same number 10 times\n\n# Note, however, that they exist separately in different enclosing contexts.\n# If you declare a function with a `state` within a loop, it'll re-create the\n# variable for each iteration of the loop. See:\nfor ^5 -> $a {\n    sub foo {\n        # This will be a different value for every value of `$a`\n        state $val = rand;\n    }\n    for ^5 -> $b {\n        # This will print the same value 5 times, but only 5. Next iteration\n        # will re-run `rand`.\n        say foo;\n    }\n}\n\n####################################################\n# 14. Phasers\n####################################################\n\n# Phasers in Raku are blocks that happen at determined points of time in\n# your program. They are called phasers because they mark a change in the\n# phase of a program.  For example, when the program is compiled, a for loop\n# runs, you leave a block, or an exception gets thrown (The `CATCH` block is\n# actually a phaser!). Some of them can be used for their return values,\n# some of them can't (those that can have a \"[*]\" in the beginning of their\n# explanation text). Let's have a look!\n\n#\n# 14.1 Compile-time phasers\n#\nBEGIN { say \"[*] Runs at compile time, as soon as possible, only once\" }\nCHECK { say \"[*] Runs at compile time, as late as possible, only once\" }\n\n#\n# 14.2 Run-time phasers\n#\nINIT { say \"[*] Runs at run time, as soon as possible, only once\" }\nEND  { say \"Runs at run time, as late as possible, only once\" }\n\n#\n# 14.3 Block phasers\n#\nENTER { say \"[*] Runs every time you enter a block, repeats on loop blocks\" }\nLEAVE {\n    say \"Runs every time you leave a block, even when an exception\n    happened. Repeats on loop blocks.\"\n}\n\nPRE {\n    say \"Asserts a precondition at every block entry,\n        before ENTER (especially useful for loops)\";\n    say \"If this block doesn't return a truthy value,\n        an exception of type X::Phaser::PrePost is thrown.\";\n}\n\n# Example (commented out):\nfor 0..2 {\n    # PRE { $_ > 1 } # OUTPUT: «Precondition '{ $_ > 1 }' failed\n}\n\nPOST {\n    say \"Asserts a postcondition at every block exit,\n        after LEAVE (especially useful for loops)\";\n    say \"If this block doesn't return a truthy value,\n        an exception of type X::Phaser::PrePost is thrown, like PRE.\";\n}\n\n# Example (commented out):\nfor 0..2 {\n    # POST { $_ < 1 } # OUTPUT: «Postcondition '{ $_ < 1 }' failed\n}\n\n#\n# 14.4 Block/exceptions phasers\n#\n{\n    KEEP { say \"Runs when you exit a block successfully\n                (without throwing an exception)\" }\n    UNDO { say \"Runs when you exit a block unsuccessfully\n                (by throwing an exception)\" }\n}\n\n#\n# 14.5 Loop phasers\n#\nfor ^5 {\n  FIRST { say \"[*] The first time the loop is run, before ENTER\" }\n  NEXT  { say \"At loop continuation time, before LEAVE\" }\n  LAST  { say \"At loop termination time, after LEAVE\" }\n}\n\n#\n# 14.6 Role/class phasers\n#\nCOMPOSE {\n    say \"When a role is composed into a class. /!\\ NOT YET IMPLEMENTED\"\n}\n\n# They allow for cute tricks or clever code...:\nsay \"This code took \" ~ (time - CHECK time) ~ \"s to compile\";\n\n# ... or clever organization:\nclass DB {\n    method start-transaction { say \"Starting transaction!\" }\n    method commit            { say \"Committing transaction...\" }\n    method rollback          { say \"Something went wrong. Rolling back!\" }\n}\n\nsub do-db-stuff {\n    my DB $db .= new;\n  \t$db.start-transaction; # start a new transaction\n  \tKEEP $db.commit;       # commit the transaction if all went well\n  \tUNDO $db.rollback;     # or rollback if all hell broke loose\n}\n\ndo-db-stuff();\n\n####################################################\n# 15. Statement prefixes\n####################################################\n\n# Those act a bit like phasers: they affect the behavior of the following\n# code. Though, they run in-line with the executable code, so they're in\n# lowercase. (`try` and `start` are theoretically in that list, but explained\n# elsewhere) NOTE: all of these (except start) don't need explicit curly\n# braces `{` and `}`.\n\n#\n# 15.1 `do` - It runs a block or a statement as a term.\n#\n\n# Normally you cannot use a statement as a value (or \"term\"). `do` helps\n# us do it. With `do`, an `if`, for example, becomes a term returning a value.\n=for comment :reason<this fails since `if` is a statement>\nmy $value = if True { 1 }\n\n# this works!\nmy $get-five = do if True { 5 }\n\n#\n# 15.1 `once` - makes sure a piece of code only runs once.\n#\nfor ^5 {\n\tonce say 1\n};\n# OUTPUT: «1␤», only prints ... once\n\n# Similar to `state`, they're cloned per-scope.\nfor ^5 {\n\tsub { once say 1 }()\n};\n# OUTPUT: «1 1 1 1 1␤», prints once per lexical scope.\n\n#\n# 15.2 `gather` - co-routine thread.\n#\n\n# The `gather` constructs allows us to `take` several values from an array/list,\n# much like `do`.\nsay gather for ^5 {\n    take $_ * 3 - 1;\n    take $_ * 3 + 1;\n}\n# OUTPUT: «-1 1 2 4 5 7 8 10 11 13␤»\n\nsay join ',', gather if False {\n    take 1;\n    take 2;\n    take 3;\n}\n# Doesn't print anything.\n\n#\n# 15.3 `eager` - evaluates a statement eagerly (forces eager context).\n\n# Don't try this at home. This will probably hang for a while (and might crash)\n# so commented out.\n# eager 1..*;\n\n# But consider, this version which doesn't print anything\nconstant thricev0 = gather for ^3 { say take $_ };\n# to:\nconstant thricev1 = eager gather for ^3 { say take $_ }; # OUTPUT: «0 1 2␤»\n\n####################################################\n# 16. Iterables\n####################################################\n\n# Iterables are objects that can be iterated over for things such as\n# the `for` construct.\n\n#\n# 16.1 `flat` - flattens iterables.\n#\nsay (1, 10, (20, 10) );      # OUTPUT: «(1 10 (20 10))␤»,  notice how nested\n                             # lists are preserved\nsay (1, 10, (20, 10) ).flat; # OUTPUT: «(1 10 20 10)␤», now the iterable is flat\n\n#\n# 16.2 `lazy` - defers actual evaluation until value is fetched by forcing lazy context.\n#\nmy @lazy-array = (1..100).lazy;\nsay @lazy-array.is-lazy; # OUTPUT: «True␤», check for laziness with the `is-lazy` method.\n\nsay @lazy-array;         # OUTPUT: «[...]␤», List has not been iterated on!\n\n# This works and will only do as much work as is needed.\nfor @lazy-array { .print };\n\n# (**TODO** explain that gather/take and map are all lazy)\n\n#\n# 16.3 `sink` - an `eager` that discards the results by forcing sink context.\n#\nconstant nilthingie = sink for ^3 { .say } #=> 0 1 2\nsay nilthingie.perl;                       # OUTPUT: «Nil␤»\n\n#\n# 16.4 `quietly` - suppresses warnings in blocks.\n#\nquietly { warn 'This is a warning!' }; # No output\n\n####################################################\n# 17. More operators thingies!\n####################################################\n\n# Everybody loves operators! Let's get more of them.\n\n# The precedence list can be found here:\n# https://docs.raku.org/language/operators#Operator_Precedence\n# But first, we need a little explanation about associativity:\n\n#\n# 17.1 Binary operators\n#\n\nmy ($p, $q, $r) = (1, 2, 3);\n\n# Given some binary operator § (not a Raku-supported operator), then:\n\n# $p § $q § $r; # with a left-associative  §, this is ($p § $q) § $r\n# $p § $q § $r; # with a right-associative §, this is $p § ($q § $r)\n# $p § $q § $r; # with a non-associative   §, this is illegal\n# $p § $q § $r; # with a chain-associative §, this is ($p § $q) and ($q § $r)§\n# $p § $q § $r; # with a list-associative  §, this is `infix:<>`\n\n#\n# 17.2 Unary operators\n#\n\n# Given some unary operator § (not a Raku-supported operator), then:\n# §$p§ # with left-associative  §, this is (§$p)§\n# §$p§ # with right-associative §, this is §($p§)\n# §$p§ # with non-associative   §, this is illegal\n\n#\n# 17.3 Create your own operators!\n#\n\n# Okay, you've been reading all of that, so you might want to try something\n# more exciting?! I'll tell you a little secret (or not-so-secret):\n# In Raku, all operators are actually just funny-looking subroutines.\n\n# You can declare an operator just like you declare a sub. In the following\n# example, `prefix` refers to the operator categories (prefix, infix, postfix,\n# circumfix, and post-circumfix).\nsub prefix:<win>( $winner ) {\n\tsay \"$winner Won!\";\n}\nwin \"The King\"; # OUTPUT: «The King Won!␤»\n\n# you can still call the sub with its \"full name\":\nsay prefix:<!>(True);      # OUTPUT: «False␤»\nprefix:<win>(\"The Queen\"); # OUTPUT: «The Queen Won!␤»\n\nsub postfix:<!>( Int $n ) {\n    [*] 2..$n; # using the reduce meta-operator... See below ;-)!\n}\nsay 5!; # OUTPUT: «120␤»\n\n# Postfix operators ('after') have to come *directly* after the term.\n# No whitespace. You can use parentheses to disambiguate, i.e. `(5!)!`\n\nsub infix:<times>( Int $n, Block $r ) { # infix ('between')\n    for ^$n {\n        # You need the explicit parentheses to call the function in `$r`,\n        # else you'd be referring at the code object itself, like with `&r`.\n        $r();\n    }\n}\n3 times -> { say \"hello\" }; # OUTPUT: «hello␤hello␤hello␤»\n\n# It's recommended to put spaces around your infix operator calls.\n\n# For circumfix and post-circumfix ones\nmulti circumfix:<[ ]>( Int $n ) {\n    $n ** $n\n}\nsay [5]; # OUTPUT: «3125␤»\n\n# Circumfix means 'around'. Again, no whitespace.\n\nmulti postcircumfix:<{ }>( Str $s, Int $idx ) {\n    $s.substr($idx, 1);\n}\nsay \"abc\"{1}; # OUTPUT: «b␤», after the term `\"abc\"`, and around the index (1)\n\n# Post-circumfix is 'after a term, around something'\n\n# This really means a lot -- because everything in Raku uses this.\n# For example, to delete a key from a hash, you use the `:delete` adverb\n# (a simple named argument underneath). For instance, the following statements\n# are equivalent.\nmy %person-stans =\n    'Giorno Giovanna'  => 'Gold Experience',\n    'Bruno Bucciarati' => 'Sticky Fingers';\nmy $key = 'Bruno Bucciarati';\n%person-stans{$key}:delete;\npostcircumfix:<{ }>( %person-stans, 'Giorno Giovanna', :delete );\n# (you can call operators like this)\n\n# It's *all* using the same building blocks! Syntactic categories\n# (prefix infix ...), named arguments (adverbs), ..., etc. used to build\n# the language - are available to you. Obviously, you're advised against\n# making an operator out of *everything* -- with great power comes great\n# responsibility.\n\n#\n# 17.4 Meta operators!\n#\n\n# Oh boy, get ready!. Get ready, because we're delving deep into the rabbit's\n# hole, and you probably won't want to go back to other languages after\n# reading this. (I'm guessing you don't want to go back at this point but\n# let's continue, for the journey is long and enjoyable!).\n\n# Meta-operators, as their name suggests, are *composed* operators. Basically,\n# they're operators that act on another operators.\n\n# The reduce meta-operator is a prefix meta-operator that takes a binary\n# function and one or many lists. If it doesn't get passed any argument,\n# it either returns a \"default value\" for this operator (a meaningless value)\n# or `Any` if there's none (examples below). Otherwise, it pops an element\n# from the list(s) one at a time, and applies the binary function to the last\n# result (or the first element of a list) and the popped element.\n\n# To sum a list, you could use the reduce meta-operator with `+`, i.e.:\nsay [+] 1, 2, 3; # OUTPUT: «6␤», equivalent to (1+2)+3.\n\n# To multiply a list\nsay [*] 1..5; # OUTPUT: «120␤», equivalent to ((((1*2)*3)*4)*5).\n\n# You can reduce with any operator, not just with mathematical ones.\n# For example, you could reduce with `//` to get first defined element\n# of a list:\nsay [//] Nil, Any, False, 1, 5;  # OUTPUT: «False␤»\n                                 # (Falsey, but still defined)\n# Or with relational operators, i.e., `>` to check elements of a list\n# are ordered accordingly:\nsay [>] 234, 156, 6, 3, -20; # OUTPUT: «True␤»\n\n# Default value examples:\nsay [*] (); # OUTPUT: «1␤», empty product\nsay [+] (); # OUTPUT: «0␤», empty sum\nsay [//];   # OUTPUT: «(Any)␤»\n            # There's no \"default value\" for `//`.\n\n# You can also use it with a function you made up,\n# You can also surround  using double brackets:\nsub add($a, $b) { $a + $b }\nsay [[&add]] 1, 2, 3; # OUTPUT: «6␤»\n\n# The zip meta-operator is an infix meta-operator that also can be used as a\n# \"normal\" operator. It takes an optional binary function (by default, it\n# just creates a pair), and will pop one value off of each array and call\n# its binary function on these until it runs out of elements. It returns an\n# array with all of these new elements.\nsay (1, 2) Z (3, 4); # OUTPUT: «((1, 3), (2, 4))␤»\nsay 1..3 Z+ 4..6;    # OUTPUT: «(5, 7, 9)␤»\n\n# Since `Z` is list-associative (see the list above), you can use it on more\n# than one list.\n(True, False) Z|| (False, False) Z|| (False, False); # (True, False)\n\n# And, as it turns out, you can also use the reduce meta-operator with it:\n[Z||] (True, False), (False, False), (False, False); # (True, False)\n\n# And to end the operator list:\n\n# The sequence operator (`...`) is one of Raku's most powerful features:\n# It's composed by the list (which might include a closure) you want Raku to\n# deduce from on the left and a value (or either a predicate or a Whatever Star\n# for a lazy infinite list) on the right that states when to stop.\n\n# Basic arithmetic sequence\nmy @listv0 = 1, 2, 3...10;\n\n# This dies because Raku can't figure out the end\n# my @list = 1, 3, 6...10;\n\n# As with ranges, you can exclude the last element (the iteration ends when\n# the predicate matches).\nmy @listv1 = 1, 2, 3...^10;\n\n# You can use a predicate (with the Whatever Star).\nmy @listv2 = 1, 3, 9...* > 30;\n\n# Equivalent to the example above but using a block here.\nmy @listv3 = 1, 3, 9 ... { $_ > 30 };\n\n# Lazy infinite list of fibonacci sequence, computed using a closure!\nmy @fibv0 = 1, 1, *+* ... *;\n\n# Equivalent to the above example but using a pointy block.\nmy @fibv1 = 1, 1, -> $a, $b { $a + $b } ... *;\n\n# Equivalent to the above example but using a block with placeholder parameters.\nmy @fibv2 = 1, 1, { $^a + $^b } ... *;\n\n# In the examples with explicit parameters (i.e., $a and $b), $a and $b\n# will always take the previous values, meaning that for the Fibonacci sequence,\n# they'll start with $a = 1 and $b = 1 (values we set by hand), then $a = 1\n# and $b = 2 (result from previous $a + $b), and so on.\n\n# In the example we use a range as an index to access the sequence. However,\n# it's worth noting that for ranges, once reified, elements aren't re-calculated.\n# That's why, for instance, `@primes[^100]` will take a long time the first\n# time you print it but then it will be instantaneous.\nsay @fibv0[^10]; # OUTPUT: «1 1 2 3 5 8 13 21 34 55␤»\n\n####################################################\n# 18. Regular Expressions\n####################################################\n\n# I'm sure a lot of you have been waiting for this one. Well, now that you know\n# a good deal of Raku already, we can get started. First off, you'll have to\n# forget about \"PCRE regexps\" (perl-compatible regexps).\n\n# IMPORTANT: Don't skip them because you know PCRE. They're different. Some\n# things are the same (like `?`, `+`, and `*`), but sometimes the semantics\n# change (`|`). Make sure you read carefully, because you might trip over a\n# new behavior.\n\n# Raku has many features related to RegExps. After all, Rakudo parses itself.\n# We're first going to look at the syntax itself, then talk about grammars\n# (PEG-like), differences between `token`, `regex` and `rule` declarators,\n# and some more. Side note: you still have access to PCRE regexps using the\n# `:P5` modifier which we won't be discussing this in this tutorial, though.\n\n# In essence, Raku natively implements PEG (\"Parsing Expression Grammars\").\n# The pecking order for ambiguous parses is determined by a multi-level\n# tie-breaking test:\n#  - Longest token matching: `foo\\s+` beats `foo` (by 2 or more positions)\n#  - Longest literal prefix: `food\\w*` beats `foo\\w*` (by 1)\n#  - Declaration from most-derived to less derived grammars\n#    (grammars are actually classes)\n#  - Earliest declaration wins\nsay so 'a' ~~ /a/;   # OUTPUT: «True␤»\nsay so 'a' ~~ / a /; # OUTPUT: «True␤», more readable with some spaces!\n\n# In all our examples, we're going to use the smart-matching operator against\n# a regexp. We're converting the result using `so` to a Boolean value because,\n# in fact, it's returning a `Match` object. They know how to respond to list\n# indexing, hash indexing, and return the matched string. The results of the\n# match are available in the `$/` variable (implicitly lexically-scoped). You\n# can also use the capture variables which start at 0: `$0`, `$1', `$2`...\n\n# You can also note that `~~` does not perform start/end checking, meaning\n# the regexp can be matched with just one character of the string. We'll\n# explain later how you can do it.\n\n# In Raku, you can have any alphanumeric as a literal, everything else has\n# to be escaped by using a backslash or quotes.\nsay so 'a|b' ~~ / a '|' b /; # OUTPUT: «True␤», it wouldn't mean the same\n                             # thing if `|` wasn't escaped.\nsay so 'a|b' ~~ / a \\| b /;  # OUTPUT: «True␤», another way to escape it.\n\n# The whitespace in a regex is actually not significant, unless you use the\n# `:s` (`:sigspace`, significant space) adverb.\nsay so 'a b c' ~~ / a  b  c /; #=> `False`, space is not significant here!\nsay so 'a b c' ~~ /:s a b c /; #=> `True`, we added the modifier `:s` here.\n\n# If we use only one space between strings in a regex, Raku will warn us\n# about space being not signicant in the regex:\nsay so 'a b c' ~~ / a b c /;   # OUTPUT: «False␤»\nsay so 'a b c' ~~ / a  b  c /; # OUTPUT: «False»\n\n# NOTE: Please use quotes or `:s` (`:sigspace`) modifier (or, to suppress this\n# warning, omit the space, or otherwise change the spacing). To fix this and make\n# the spaces less ambiguous, either use at least two spaces between strings\n# or use the `:s` adverb.\n\n# As we saw before, we can embed the `:s` inside the slash delimiters, but we\n# can also put it outside of them if we specify `m` for 'match':\nsay so 'a b c' ~~ m:s/a  b  c/; # OUTPUT: «True␤»\n\n# By using `m` to specify 'match', we can also use other delimiters:\nsay so 'abc' ~~ m{a  b  c};     # OUTPUT: «True␤»\nsay so 'abc' ~~ m[a  b  c];     # OUTPUT: «True␤»\n\n# `m/.../` is equivalent to `/.../`:\nsay 'raku' ~~ m/raku/; # OUTPUT: «True␤»\nsay 'raku' ~~ /raku/;  # OUTPUT: «True␤»\n\n# Use the `:i` adverb to specify case insensitivity:\nsay so 'ABC' ~~ m:i{a  b  c};   # OUTPUT: «True␤»\n\n# However, whitespace is important as for how modifiers are applied\n# (which you'll see just below) ...\n\n#\n# 18.1 Quantifiers - `?`, `+`, `*` and `**`.\n#\n\n# `?` - zero or one match\nsay so 'ac' ~~ / a  b  c /;   # OUTPUT: «False␤»\nsay so 'ac' ~~ / a  b?  c /;  # OUTPUT: «True␤», the \"b\" matched 0 times.\nsay so 'abc' ~~ / a  b?  c /; # OUTPUT: «True␤», the \"b\" matched 1 time.\n\n# ... As you read before, whitespace is important because it determines which\n# part of the regex is the target of the modifier:\nsay so 'def' ~~ / a  b  c? /; # OUTPUT: «False␤», only the \"c\" is optional\nsay so 'def' ~~ / a  b?  c /; # OUTPUT: «False␤», whitespace is not significant\nsay so 'def' ~~ / 'abc'? /;   # OUTPUT: «True␤»,  the whole \"abc\" group is optional\n\n# Here (and below) the quantifier applies only to the \"b\"\n\n# `+` - one or more matches\nsay so 'ac' ~~ / a  b+  c /;     # OUTPUT: «False␤», `+` wants at least one 'b'\nsay so 'abc' ~~ / a  b+  c /;    # OUTPUT: «True␤», one is enough\nsay so 'abbbbc' ~~ / a  b+  c /; # OUTPUT: «True␤», matched 4 \"b\"s\n\n# `*` - zero or more matches\nsay so 'ac' ~~ / a  b*  c /;     # OUTPUT: «True␤», they're all optional\nsay so 'abc' ~~ / a  b*  c /;    # OUTPUT: «True␤»\nsay so 'abbbbc' ~~ / a  b*  c /; # OUTPUT: «True␤»\nsay so 'aec' ~~ / a  b*  c /;    # OUTPUT: «False␤», \"b\"(s) are optional, not replaceable.\n\n# `**` - (Unbound) Quantifier\n# If you squint hard enough, you might understand why exponentiation is used\n# for quantity.\nsay so 'abc' ~~ / a  b**1  c /;         # OUTPUT: «True␤», exactly one time\nsay so 'abc' ~~ / a  b**1..3  c /;      # OUTPUT: «True␤», one to three times\nsay so 'abbbc' ~~ / a  b**1..3  c /;    # OUTPUT: «True␤»\nsay so 'abbbbbbc' ~~ / a  b**1..3  c /; # OUTPUT: «Fals␤», too much\nsay so 'abbbbbbc' ~~ / a  b**3..*  c /; # OUTPUT: «True␤», infinite ranges are ok\n\n#\n# 18.2 `<[]>` - Character classes\n#\n\n# Character classes are the equivalent of PCRE's `[]` classes, but they use a\n# more raku-ish syntax:\nsay 'fooa' ~~ / f <[ o a ]>+ /;  # OUTPUT: «fooa␤»\n\n# You can use ranges (`..`):\nsay 'aeiou' ~~ / a <[ e..w ]> /; # OUTPUT: «ae␤»\n\n# Just like in normal regexes, if you want to use a special character, escape\n# it (the last one is escaping a space which would be equivalent to using\n# ' '):\nsay 'he-he !' ~~ / 'he-' <[ a..z \\! \\  ]> + /; # OUTPUT: «he-he !␤»\n\n# You'll get a warning if you put duplicate names (which has the nice effect\n# of catching the raw quoting):\n'he he' ~~ / <[ h e ' ' ]> /;\n# Warns \"Repeated character (') unexpectedly found in character class\"\n\n# You can also negate character classes... (`<-[]>` equivalent to `[^]` in PCRE)\nsay so 'foo' ~~ / <-[ f o ]> + /; # OUTPUT: «False␤»\n\n# ... and compose them:\n# any letter except \"f\" and \"o\"\nsay so 'foo' ~~ / <[ a..z ] - [ f o ]> + /;   # OUTPUT: «False␤»\n\n# no letter except \"f\" and \"o\"\nsay so 'foo' ~~ / <-[ a..z ] + [ f o ]> + /;  # OUTPUT: «True␤»\n\n# the + doesn't replace the left part\nsay so 'foo!' ~~ / <-[ a..z ] + [ f o ]> + /; # OUTPUT: «True␤»\n\n#\n# 18.3 Grouping and capturing\n#\n\n# Group: you can group parts of your regexp with `[]`. Unlike PCRE's `(?:)`,\n# these groups are *not* captured.\nsay so 'abc' ~~ / a [ b ] c /;  # OUTPUT: «True␤», the grouping does nothing\nsay so 'foo012012bar' ~~ / foo [ '01' <[0..9]> ] + bar /; # OUTPUT: «True␤»\n\n# The previous line returns `True`. The regex matches \"012\" one or more time\n# (achieved by the the `+` applied to the group).\n\n# But this does not go far enough, because we can't actually get back what\n# we matched.\n\n# Capture: The results of a regexp can be *captured* by using parentheses.\nsay so 'fooABCABCbar' ~~ / foo ( 'A' <[A..Z]> 'C' ) + bar /; # OUTPUT: «True␤»\n# (using `so` here, see `$/` below)\n\n# So, starting with the grouping explanations. As we said before, our `Match`\n# object is stored inside the `$/` variable:\nsay $/;    # Will either print the matched object or `Nil` if nothing matched.\n\n# As we also said before, it has array indexing:\nsay $/[0]; # OUTPUT: «｢ABC｣ ｢ABC｣␤»,\n\n# The corner brackets (｢..｣) represent (and are) `Match` objects. In the\n# previous example, we have an array of them.\n\nsay $0;    # The same as above.\n\n# Our capture is `$0` because it's the first and only one capture in the\n# regexp. You might be wondering why it's an array, and the answer is simple:\n# Some captures (indexed using `$0`, `$/[0]` or a named one) will be an array\n# if and only if they can have more than one element. Thus any capture with\n# `*`, `+` and `**` (whatever the operands), but not with `?`.\n# Let's use examples to see that:\n\n# NOTE: We quoted A B C to demonstrate that the whitespace between them isn't\n# significant. If we want the whitespace to *be* significant there, we can use the\n# `:sigspace` modifier.\nsay so 'fooABCbar' ~~ / foo ( \"A\" \"B\" \"C\" )? bar /; # OUTPUT: «True␤»\nsay $/[0];   # OUTPUT: «｢ABC｣␤»\nsay $0.WHAT; # OUTPUT: «(Match)␤»\n             # There can't be more than one, so it's only a single match object.\n\nsay so 'foobar' ~~ / foo ( \"A\" \"B\" \"C\" )? bar /;    # OUTPUT: «True␤»\nsay $0.WHAT; # OUTPUT: «(Any)␤», this capture did not match, so it's empty.\n\nsay so 'foobar' ~~ / foo ( \"A\" \"B\" \"C\" ) ** 0..1 bar /; #=> OUTPUT: «True␤»\nsay $0.WHAT; # OUTPUT: «(Array)␤», A specific quantifier will always capture\n             # an Array, be a range or a specific value (even 1).\n\n# The captures are indexed per nesting. This means a group in a group will be\n# nested under its parent group: `$/[0][0]`, for this code:\n'hello-~-world' ~~ / ( 'hello' ( <[ \\- \\~ ]> + ) ) 'world' /;\nsay $/[0].Str;    # OUTPUT: «hello~␤»\nsay $/[0][0].Str; # OUTPUT: «~␤»\n\n# This stems from a very simple fact: `$/` does not contain strings, integers\n# or arrays, it only contains `Match` objects. These contain the `.list`, `.hash`\n# and `.Str` methods but you can also just use `match<key>` for hash access\n# and `match[idx]` for array access.\n\n# In the following example, we can see `$_` is a list of `Match` objects.\n# Each of them contain a wealth of information: where the match started/ended,\n# the \"ast\" (see actions later), etc. You'll see named capture below with\n# grammars.\nsay $/[0].list.perl; # OUTPUT: «(Match.new(...),).list␤»\n\n# Alternation - the `or` of regexes\n# WARNING: They are DIFFERENT from PCRE regexps.\nsay so 'abc' ~~ / a [ b | y ] c /; # OUTPUT: «True␤», Either \"b\" or \"y\".\nsay so 'ayc' ~~ / a [ b | y ] c /; # OUTPUT: «True␤», Obviously enough...\n\n# The difference between this `|` and the one you're used to is\n# LTM (\"Longest Token Matching\") strategy. This means that the engine will\n# always try to match as much as possible in the string.\nsay 'foo' ~~ / fo | foo /; # OUTPUT: «foo», instead of `fo`, because it's longer.\n\n# To decide which part is the \"longest\", it first splits the regex in two parts:\n#\n#     * The \"declarative prefix\" (the part that can be statically analyzed)\n#     which includes alternations (`|`), conjunctions (`&`), sub-rule calls (not\n#     yet introduced), literals, characters classes and quantifiers.\n#\n#     * The \"procedural part\" includes everything else: back-references,\n#     code assertions, and other things that can't traditionally be represented\n#     by normal regexps.\n\n# Then, all the alternatives are tried at once, and the longest wins.\n\n# Examples:\n# DECLARATIVE | PROCEDURAL\n/ 'foo' \\d+     [ <subrule1> || <subrule2> ] /;\n\n# DECLARATIVE (nested groups are not a problem)\n/ \\s* [ \\w & b ] [ c | d ] /;\n\n# However, closures and recursion (of named regexes) are procedural.\n# There are also more complicated rules, like specificity (literals win\n# over character classes).\n\n# NOTE: The alternation in which all the branches are tried in order\n# until the first one matches still exists, but is now spelled `||`.\nsay 'foo' ~~ / fo || foo /; # OUTPUT: «fo␤», in this case.\n\n####################################################\n# 19. Extra: the MAIN subroutine\n####################################################\n\n# The `MAIN` subroutine is called when you run a Raku file directly. It's\n# very powerful, because Raku actually parses the arguments and pass them\n# as such to the sub. It also handles named argument (`--foo`) and will even\n# go as far as to autogenerate a `--help` flag.\n\nsub MAIN($name) {\n    say \"Hello, $name!\";\n}\n# Supposing the code above is in file named cli.raku, then running in the command\n# line (e.g., $ raku cli.raku) produces:\n# Usage:\n# cli.raku <name>\n\n# And since MAIN is a regular Raku sub, you can have multi-dispatch:\n# (using a `Bool` for the named argument so that we can do `--replace`\n# instead of `--replace=1`. The presence of `--replace` indicates truthness\n# while its absence falseness). For example:\n\n    # convert to IO object to check the file exists\n    =begin comment\n    subset File of Str where *.IO.d;\n\n    multi MAIN('add', $key, $value, Bool :$replace) { ... }\n    multi MAIN('remove', $key) { ... }\n    multi MAIN('import', File, Str :$as) { ... } # omitting parameter name\n    =end comment\n\n# Thus $ raku cli.raku produces:\n# Usage:\n#   cli.raku [--replace] add <key> <value>\n#   cli.raku remove <key>\n#   cli.raku [--as=<Str>] import <File>\n\n# As you can see, this is *very* powerful. It even went as far as to show inline\n# the constants (the type is only displayed if the argument is `$`/is named).\n\n####################################################\n# 20. APPENDIX A:\n####################################################\n\n# It's assumed by now you know the Raku basics. This section is just here to\n# list some common operations, but which are not in the \"main part\" of the\n# tutorial to avoid bloating it up.\n\n#\n# 20.1 Operators\n#\n\n# Sort comparison - they return one value of the `Order` enum: `Less`, `Same`\n# and `More` (which numerify to -1, 0 or +1 respectively).\nsay 1 <=> 4;     # OUTPUT: «More␤»,   sort comparison for numerics\nsay 'a' leg 'b'; # OUTPUT: «Lessre␤», sort comparison for string\nsay 1 eqv 1;     # OUTPUT: «Truere␤», sort comparison using eqv semantics\nsay 1 eqv 1.0;   # OUTPUT: «False␤»\n\n# Generic ordering\nsay 3 before 4;    # OUTPUT: «True␤»\nsay 'b' after 'a'; # OUTPUT: «True␤»\n\n# Short-circuit default operator - similar to `or` and `||`, but instead\n# returns the first *defined* value:\nsay Any // Nil // 0 // 5;        # OUTPUT: «0␤»\n\n# Short-circuit exclusive or (XOR) - returns `True` if one (and only one) of\n# its arguments is true\nsay True ^^ False;               # OUTPUT: «True␤»\n\n# Flip flops. These operators (`ff` and `fff`, equivalent to P5's `..`\n# and `...`) are operators that take two predicates to test: They are `False`\n# until their left side returns `True`, then are `True` until their right\n# side returns `True`. Similar to ranges, you can exclude the iteration when\n# it become `True`/`False` by using `^` on either side. Let's start with an\n# example :\n\nfor <well met young hero we shall meet later> {\n    # by default, `ff`/`fff` smart-match (`~~`) against `$_`:\n    if 'met' ^ff 'meet' { # Won't enter the if for \"met\"\n        .say              # (explained in details below).\n    }\n\n    if rand == 0 ff rand == 1 { # compare variables other than `$_`\n        say \"This ... probably will never run ...\";\n    }\n}\n\n# This will print \"young hero we shall meet\" (excluding \"met\"): the flip-flop\n# will start returning `True` when it first encounters \"met\" (but will still\n# return `False` for \"met\" itself, due to the leading `^` on `ff`), until it\n# sees \"meet\", which is when it'll start returning `False`.\n\n# The difference between `ff` (awk-style) and `fff` (sed-style) is that `ff`\n# will test its right side right when its left side changes to `True`, and can\n# get back to `False` right away (*except* it'll be `True` for the iteration\n# that matched) while `fff` will wait for the next iteration to try its right\n# side, once its left side changed:\n\n# The output is due to the right-hand-side being tested directly (and returning\n# `True`). \"B\"s are printed since it matched that time (it just went back to\n# `False` right away).\n.say if 'B' ff 'B' for <A B C B A>; # OUTPUT: «B B␤»,\n\n# In this case the right-hand-side wasn't tested until `$_` became \"C\"\n# (and thus did not match instantly).\n.say if 'B' fff 'B' for <A B C B A>; #=> «B C B␤»,\n\n# A flip-flop can change state as many times as needed:\nfor <test start print it stop not printing start print again stop not anymore> {\n    # exclude both \"start\" and \"stop\",\n    .say if $_ eq 'start' ^ff^ $_ eq 'stop'; # OUTPUT: «print it print again␤»\n}\n\n# You might also use a Whatever Star, which is equivalent to `True` for the\n# left side or `False` for the right, as shown in this example.\n# NOTE: the parenthesis are superfluous here (sometimes called \"superstitious\n# parentheses\"). Once the flip-flop reaches a number greater than 50, it'll\n# never go back to `False`.\nfor (1, 3, 60, 3, 40, 60) {\n    .say if $_ > 50 ff *;  # OUTPUT: «60␤3␤40␤60␤»\n}\n\n# You can also use this property to create an `if` that'll not go through the\n# first time. In this case, the flip-flop is `True` and never goes back to\n# `False`, but the `^` makes it *not run* on the first iteration\nfor <a b c> { .say if * ^ff *; }  # OUTPUT: «b␤c␤»\n\n# The `===` operator, which uses `.WHICH` on the objects to be compared, is\n# the value identity operator whereas the `=:=` operator, which uses `VAR()` on\n# the objects to compare them, is the container identity operator.\n```\n\nIf you want to go further and learn more about Raku, you can:\n\n- Read the [Raku Docs](https://docs.raku.org/). This is a great\nresource on Raku. If you are looking for something, use the search bar.\nThis will give you a dropdown menu of all the pages referencing your search\nterm (Much better than using Google to find Raku documents!).\n\n- Read the [Raku Advent Calendar](https://rakuadventcalendar.wordpress.com/). This\nis a great source of Raku snippets and explanations. If the docs don't\ndescribe something well enough, you may find more detailed information here.\nThis information may be a bit older but there are many great examples and\nexplanations.\n\n- Come along on `#raku` at [`irc.libera.chat`](https://web.libera.chat/?channel=#raku). The folks here are\nalways helpful.\n\n- Check the [source of Raku's functions and\nclasses](https://github.com/rakudo/rakudo/tree/master/src/core.c). Rakudo is\nmainly written in Raku (with a lot of NQP, \"Not Quite Perl\", a Raku subset\neasier to implement and optimize).\n\n- Read [the language design documents](https://design.raku.org/). They explain\nRaku from an implementor point-of-view, but it's still very interesting.\n"
        },
        {
          "name": "raylib.md",
          "type": "blob",
          "size": 4.2138671875,
          "content": "---\ncategory: framework\nname: raylib\nfilename: learnraylib.c\ncontributors:\n    - [\"Nikolas Wipper\", \"https://notnik.cc\"]\n---\n\n**raylib** is a cross-platform easy-to-use graphics library, built around\nOpenGL 1.1, 2.1, 3.3 and OpenGL ES 2.0. Even though it is written in C\nit has bindings to over 50 different languages. This tutorial will use C,\nmore specifically C99.\n\n```c\n#include <raylib.h>\n\nint main(void)\n{\n    const int screenWidth = 800;\n    const int screenHeight = 450;\n\n    // Before initialising raylib we can set configuration flags\n    SetConfigFlags(FLAG_MSAA_4X_HINT | FLAG_VSYNC_HINT);\n\n    // raylib doesn't require us to store any instance structures\n    // At the moment raylib can handle only one window at a time\n    InitWindow(screenWidth, screenHeight, \"MyWindow\");\n\n    // Set our game to run at 60 frames-per-second\n    SetTargetFPS(60);\n\n    // Set a key that closes the window\n    // Could be 0 for no key\n    SetExitKey(KEY_DELETE);\n\n    // raylib defines two types of cameras: Camera3D and Camera2D\n    // Camera is a typedef for Camera3D\n    Camera camera = {\n            .position   = {0.0f, 0.0f, 0.0f},\n            .target     = {0.0f, 0.0f, 1.0f},\n            .up         = {0.0f, 1.0f, 0.0f},\n            .fovy       = 70.0f,\n            .projection = CAMERA_PERSPECTIVE\n    };\n\n    // raylib supports loading of models, animations, images and sounds\n    // from various different file formats\n    Model myModel = LoadModel(\"my_model.obj\");\n    Font someFont = LoadFont(\"some_font.ttf\");\n\n    // Creates a 100x100 render texture\n    RenderTexture renderTexture = LoadRenderTexture(100, 100);\n\n    // WindowShouldClose checks if the user is closing the window\n    // This might happen using a shortcut, window controls\n    // or the key we set earlier\n    while (!WindowShouldClose())\n    {\n\n        // BeginDrawing needs to be called before any draw call\n        BeginDrawing();\n        {\n\n            // Sets the background to a certain color\n            ClearBackground(BLACK);\n\n            if (IsKeyDown(KEY_SPACE))\n                DrawCircle(400, 400, 30, GREEN);\n\n            // Simple draw text\n            DrawText(\"Congrats! You created your first window!\",\n                     190, // x\n                     200, // y\n                     20,  // font size\n                     LIGHTGRAY\n            );\n\n            // For most functions there are several versions\n            // These are usually postfixed with Ex, Pro, V\n            // or sometimes Rec, Wires (only for 3D), Lines (only for 2D)\n            DrawTextEx(someFont,\n                       \"Text in another font\",\n                       (Vector2) {10, 10},\n                       20, // font size\n                       2,  // spacing\n                       LIGHTGRAY);\n\n            // Required for drawing 3D, has 2D equivalent\n            BeginMode3D(camera);\n            {\n\n                DrawCube((Vector3) {0.0f, 0.0f, 3.0f},\n                         1.0f, 1.0f, 1.0f, RED);\n\n                // White tint when drawing will keep the original color\n                DrawModel(myModel, (Vector3) {0.0f, 0.0f, 3.0f},\n                          1.0f, //Scale\n                          WHITE);\n\n            }\n            // End 3D mode so we can draw normally again\n            EndMode3D();\n\n            // Start drawing onto render texture\n            BeginTextureMode(renderTexture);\n            {\n\n                // It behaves the same as if we just called `BeginDrawing()`\n\n                ClearBackground(RAYWHITE);\n\n                BeginMode3D(camera);\n                {\n\n                    DrawGrid(10, // Slices\n                             1.0f // Spacing\n                    );\n\n                }\n                EndMode3D();\n\n            }\n            EndTextureMode();\n\n            // render textures have a Texture2D field\n            DrawTexture(renderTexture.texture, 40, 378, BLUE);\n\n        }\n        EndDrawing();\n    }\n\n    // Unloading loaded objects\n    UnloadFont(someFont);\n    UnloadModel(myModel);\n\n    // Close window and OpenGL context\n    CloseWindow();\n\n    return 0;\n}\n```\n\n## Further reading\nraylib has some [great examples](https://www.raylib.com/examples.html)\nIf you don't like C check out the [raylib bindings](https://github.com/raysan5/raylib/blob/master/BINDINGS.md)\n"
        },
        {
          "name": "rdf.md",
          "type": "blob",
          "size": 6.328125,
          "content": "---\nname: RDF\nfilename: learnrdf.ttl\ncontributors:\n- [\"Bob DuCharme\", \"http://bobdc.com/\"]\n---\n\nRDF (Resource Description Framework) is a [W3C\nstandard](https://www.w3.org/TR/2014/REC-rdf11-concepts-20140225/) data\nmodel. The W3C has standardized several RDF syntaxes; examples below use the\nmost popular one, [Turtle](https://www.w3.org/TR/turtle/).\n\nOne nice advantage of Turtle files is that if you concatenate any two\nsyntactically valid Turtle files, you will have another syntactically valid\nTurtle file. This is one of many things about RDF that ease data integration.\n\nThe W3C standard query language for RDF datasets is\n[SPARQL](https://www.w3.org/TR/sparql11-query/).\n\nRDF expresses all facts as three-part {subject, predicate, object} statements\nknown as triples. Because the same entity can be the subject of some triples\nand the object of others, a set of triples can represent a graph data\nstructure. A large-scale storage system for triples is called a triplestore,\nand falls into the graph database category of NoSQL databases.\n\nRDF subjects and predicates must be URIs (Uniform Resource Identifiers), which\nusually look like URLs but function as identifiers, not locators. The use of\nURIs provides context for resource identifiers to make them unambiguous—for\nexample, to tell a book title from a job title.\n\n```\n# The hash symbol is the comment delimiter. \n\n# Turtle triple statements end with periods like natural language sentences.\n\n# These two triples tell us that the mythical Example Company's\n# employee 134 has a hire date of 2022-11-12 and a family name of Smith:\n\n<http://example.com/emp134> <http://example.com/hireDate> \"2022-11-12\" .\n<http://example.com/emp134> <http://example.com/familyName> \"Smith\" .\n\n# Declaring prefixes to stand in for namespaces reduces verbosity. These\n# declarations typically go at the beginning of the file, but the only\n# requirement is that they come before the first use of the prefix they declare.\n\n@prefix ex: <http://example.com/> .\nex:emp134 ex:hireDate \"2022-11-12\" .\nex:emp134 ex:familyName \"Smith\" .\n\n# A semicolon means that the next triple uses the same subject as the last\n# one. This is handy for listing data about a single resource. The following\n# example means the same thing as the previous one.\n\n@prefix ex: <http://example.com/> .\nex:emp134 ex:hireDate \"2022-11-12\" ;\n          ex:familyName \"Smith\" .\n\n# A comma means that the next triple has the same subject and predicate as\n# the previous one.\n\nex:emp134 ex:nickname \"Smithy\", \"Skipper\", \"Big J\". \n\n# Three single or double quote marks at the beginning and end of a value let\n# you define a  multi-line string value.\n\nex:emp134 ex:description \"\"\"\nSkipper joined the company in November. \n\nHe always has a joke for everyone.\"\"\" . \n\n# Using URIs from existing standard vocabulary namespaces eases both data\n# integration and interoperability with the large amount of RDF that already\n# exists. Mixing and matching of standard and local custom namespaces is\n# common.\n\n@prefix vcard: <http://www.w3.org/2006/vcard/ns#> .\nex:emp134 ex:hireDate \"2022-11-12\" ;\n          vcard:family-name \"Smith\" .\n\n# Related RDF standards provide vocabularies that are popular for basic\n# facts. The rdfs:label predicate from the RDF Schema standard is a common \n# way to indicate a human-readable name.\n\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\nex:hireDate rdfs:label \"hire date\" . \n\n# String object values can include language codes, making\n# multi-lingual representation of entities easier for applications\n# reading the data (for example, when generating a user interface).\n\nex:hireDate rdfs:label \"hire date\"@en, \"date d'embauche\"@fr  . \n\n# Representing a triple's object with a URI (or prefixed name) is not required\n# but lets you connect up triples into a graph.\n\nex:emp134 vcard:family-name \"Smith\" .\nex:emp113 vcard:family-name \"Jones\" ;\n          ex:reportsTo ex:emp134 . \n\n# Objects can be datatypes from the XML Schema part 2 standard or your own\n# custom datatypes.\n\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\nex:emp134 vcard:family-name \"Smith\"^^xsd:string ;  # default data type\n          ex:hireDate \"2022-11-12\"^^xsd:date ;\n          ex:rating \"3.5\"^^ex:someCustomType . \n\n# The use of schemas with RDF is optional. Schemas may describe all or a\n# subset of a dataset. They use a vocabulary described by the W3C RDF Schema\n# (RDFS) standard, usually with a prefix of rdfs.\n\n# These schemas are descriptive, to ease the accommodation of new\n# datasets, not proscriptive rules about how new data should be \n# created. The following declares a class. (Note that RDFS is itself \n# expressed in triples.)\n\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> . \nex:Person rdf:type rdfs:Class .\n\n# The following triple means the same as the preceding one but \n# uses a Turtle shortcut for terseness and more readability.\n\nex:Person a rdfs:Class .\n\n# That last triple declares that ex:Person is an instance of a class, and the\n# following declares that employee 113 is an instance of the class Employee.\n\nex:emp113 a ex:Employee . \n\n# The first triple below is actually unnecessary because a typical\n# RDFS processor will infer from the second one that ex:Employee is a\n# class. (Only a subset of RDF parsers perform RDFS inferencing.)\n\nex:Employee a rdfs:Class .\nex:Employee rdfs:subClassOf ex:Person .\n\n# An RDF parser that reads the last four triples shown and understands\n# RDFS will infer that ex:emp113 is an instance of ex:Person, because\n# it's an instance of ex:Employee, a subclass of ex:Person.\n\n# RDFS lets you declare properties and associate them with classes. \n# Properties are first class resources and don't \"belong\" to classes \n# in the object-oriented sense. rdfs:domain means \"the following object \n# class uses the property named by this triple's subject\". rdfs:range \n# means \"the property named by this triple's subject will have a value of \n# the following class or type\". \n\nex:birthday rdf:type rdf:Property ; \n            rdfs:domain ex:Person ;\n            rdfs:range xsd:date .\n```\n\n## Further Reading\n\n* [RDF Primer — Turtle version](https://www.w3.org/2007/02/turtle/primer/) from the W3C\n* [What is RDF?](https://www.bobdc.com/blog/whatisrdf/) on bobdc.com\n* [What is RDFS?](https://www.bobdc.com/blog/whatisrdfs/) on bobdc.com \n* [Introduction to RDF and SPARQL](https://data.europa.eu/sites/default/files/d2.1.2_training_module_1.3_introduction_to_rdf_sparql_en_edp.pdf) at data.europa.eu\n\n"
        },
        {
          "name": "reason.md",
          "type": "blob",
          "size": 15.552734375,
          "content": "---\nname: Reason\nfilename: reason.re\ncontributors:\n  - [\"Seth Corker\", \"https://sethcorker.com\"]\n---\n\nReason is a syntax over OCaml that is easier to get started for programmers who are familiar with C-style syntax like JavaScript. BuckleScript is part of the toolchain which compiles Reason to JavaScript so you can write statically typed code for anywhere that JavaScript runs.\n\n```reason\n/* Comments start with slash-star, and end with star-slash */\n\n/*----------------------------------------------\n * Variable and function declaration\n *----------------------------------------------\n * Variables and functions use the let keyword and end with a semi-colon\n * `let` bindings are immutable\n */\n\nlet x = 5;\n/* - Notice we didn't add a type, Reason will infer x is an int */\n\n/* A function like this, take two arguments and add them together */\nlet add = (a, b) => a + b;\n/* - This doesn't need a type annotation either! */\n\n/*----------------------------------------------\n * Type annotation\n *----------------------------------------------\n * Types don't need to be explicitly annotated in most cases but when you need\n * to, you can add the type after the name\n */\n\n/* A type can be explicitly written like so */\nlet x: int = 5;\n\n/* The add function from before could be explicitly annotated too */\nlet add2 = (a: int, b: int): int => a + b;\n\n/* A type can be aliased using the type keyword */\ntype companyId = int;\nlet myId: companyId = 101;\n\n/* Mutation is not encouraged in Reason but it's there if you need it\n   If you need to mutate a let binding, the value must be wrapped in a `ref()`*/\nlet myMutableNumber = ref(120);\n\n/* To access the value (and not the ref container), use `^` */\nlet copyOfMyMutableNumber = myMutableNumber^;\n\n/* To assign a new value, use the `:=` operator */\nmyMutableNumber := 240;\n\n/*----------------------------------------------\n * Basic types and operators\n *----------------------------------------------\n */\n\n/* > String */\n\n/* Use double quotes for strings */\nlet greeting = \"Hello world!\";\n\n/* A string can span multiple lines */\nlet aLongerGreeting = \"Look at me,\nI'm a multi-line string\n\";\n\n/* A quoted string can be used for string interpolation and special chars\n   Use the `js` annotation for unicode */\nlet world = {js|🌍|js};\n\n/* The `j` annotation is used for string interpolation */\nlet helloWorld = {j|hello, $world|j};\n\n/* Concatenate strings with ++ */\nlet name = \"John \" ++ \"Wayne\";\nlet emailSubject = \"Hi \" ++ name ++ \", you're a valued customer\";\n\n/* > Char */\n\n/* Use a single character for the char type */\nlet lastLetter = 'z';\n/* - Char doesn't support Unicode or UTF-8 */\n\n/* > Boolean */\n\n/* A boolean can be either true or false */\nlet isLearning = true;\n\ntrue && false;  /* - : bool = false;  Logical and */\ntrue || true;   /* - : bool = true;   Logical or  */\n!true;          /* - : bool = false;  Logical not */\n\n/* Greater than `>`, or greater than or equal to `>=` */\n'a' > 'b'; /* - bool : false */\n\n/* Less than `<`, or less than or equal to `<=` */\n1 < 5; /* - : bool = true */\n\n/* Structural equal */\n\"hello\" == \"hello\"; /* - : bool = true */\n\n/* Referential equal */\n\"hello\" === \"hello\"; /* - : bool = false */\n/* - This is false because they are two different \"hello\" string literals */\n\n/* Structural unequal */\nlastLetter != 'a'; /* -: bool = true */\n\n/* Referential unequal */\nlastLetter !== lastLetter; /* - : bool = false */\n\n/* > Integer */\n/* Perform math operations on integers */\n\n1 + 1;          /* - : int = 2  */\n25 - 11;        /* - : int = 11 */\n5 * 2 * 3;      /* - : int = 30 */\n8 / 2;          /* - : int = 4  */\n\n/* > Float */\n/* Operators on floats have a dot after them */\n\n1.1 +. 1.5;     /* - : float = 2.6  */\n18.0 -. 24.5;   /* - : float = -6.5 */\n2.5 *. 2.0;     /* - : float = 5.   */\n16.0 /. 4.0;    /* - : float = 4.   */\n\n/* > Tuple\n * Tuples have the following attributes\n  - immutable\n  - ordered\n  - fix-sized at creation time\n  - heterogeneous (can contain different types of values)\n A tuple is 2 or more values */\n\nlet teamMember = (\"John\", 25);\n\n/* Type annotation matches the values */\nlet position2d: (float, float) = (9.0, 12.0);\n\n/* Pattern matching is a great tool to retrieve just the values you care about\n   If we only want the y value, let's use `_` to ignore the value */\nlet (_, y) = position2d;\ny +. 1.0; /* - : float = 13. */\n\n/* > Record */\n\n/* A record has to have an explicit type */\ntype trainJourney = {\n  destination: string,\n  capacity: int,\n  averageSpeed: float,\n};\n\n/* Once the type is declared, Reason can infer it whenever it comes up */\nlet firstTrip = {destination: \"London\", capacity: 45, averageSpeed: 120.0};\n\n/* Access a property using dot notation */\nlet maxPassengers = firstTrip.capacity;\n\n/* If you define the record type in a different file, you have to reference the\n   filename, if trainJourney was in a file called Trips.re */\nlet secondTrip: Trips.trainJourney = {\n  destination: \"Paris\",\n  capacity: 50,\n  averageSpeed: 150.0,\n};\n\n/* Records are immutable by default */\n/* But the contents of a record can be copied using the spread operator */\nlet newTrip = {...secondTrip, averageSpeed: 120.0};\n\n/* A record property can be mutated explicitly with the `mutable` keyword */\ntype breakfastCereal = {\n  name: string,\n  mutable amount: int,\n};\n\nlet tastyMuesli = {name: \"Tasty Muesli TM\", amount: 500};\n\ntastyMuesli.amount = 200;\n/* - tastyMuesli now has an amount of 200 */\n\n/* Punning is used to avoid redundant typing */\nlet name = \"Just As Good Muesli\";\nlet justAsGoodMuesli = {name, amount: 500};\n/* - justAsGoodMuesli.name is now \"Just As Good Muesli\", it's equivalent\n   to { name: name, amount: 500 } */\n\n/* > Variant\n   Mutually exclusive states can be expressed with variants */\n\ntype authType =\n  | GitHub\n  | Facebook\n  | Google\n  | Password;\n/* - The constructors must be capitalized like so */\n/* - Like records, variants should be named if declared in a different file */\n\nlet userPreferredAuth = GitHub;\n\n/* Variants work great with a switch statement */\nlet loginMessage =\n  switch (userPreferredAuth) {\n  | GitHub => \"Login with GitHub credentials.\"\n  | Facebook => \"Login with your Facebook account.\"\n  | Google => \"Login with your Google account\"\n  | Password => \"Login with email and password.\"\n  };\n\n/* > Option\n   An option can be None or Some('a) where 'a is the type */\n\nlet userId = Some(23);\n\n/* A switch handles the two cases */\nlet alertMessage =\n  switch (userId) {\n  | Some(id) => \"Welcome, your ID is\" ++ string_of_int(id)\n  | None => \"You don't have an account!\"\n  };\n/* - Missing a case, `None` or `Some`, would cause an error */\n\n/* > List\n  * Lists have the following attributes\n   - immutable\n   - ordered\n   - fast at prepending items\n   - fast at splitting\n\n  * Lists in Reason are linked lists\n */\n\n/* A list is declared with square brackets */\nlet userIds = [1, 4, 8];\n\n/* The type can be explicitly set with list('a) where 'a is the type */\ntype idList = list(int);\ntype attendanceList = list(string);\n\n/* Lists are immutable */\n/* But the contents of a list can be copied using the spread operator */\nlet newUserIds = [101, 102, ...userIds];\n\n/* > Array\n * Arrays have the following attributes\n  - mutable\n  - fast at random access & updates */\n\n/* An array is declared with `[|` and ends with `|]` */\nlet languages = [|\"Reason\", \"JavaScript\", \"OCaml\"|];\n\n/*----------------------------------------------\n * Function\n *----------------------------------------------\n */\n\n/* Reason functions use the arrow syntax, the expression is returned */\nlet signUpToNewsletter = email => \"Thanks for signing up \" ++ email;\n\n/* Call a function like this */\nsignUpToNewsletter(\"hello@reason.org\");\n\n/* For longer functions, use a block */\nlet getEmailPrefs = email => {\n  let message = \"Update settings for \" ++ email;\n  let prefs = [\"Weekly News\", \"Daily Notifications\"];\n\n  (message, prefs);\n};\n/* - the final tuple is implicitly returned */\n\n/* > Labeled Arguments */\n\n/* Arguments can be labeled with the ~ symbol */\nlet moveTo = (~x, ~y) => {/* Move to x,y */};\n\nmoveTo(~x=7.0, ~y=3.5);\n\n/* Labeled arguments can also have a name used within the function */\nlet getMessage = (~message as msg) => \"==\" ++ msg ++ \"==\";\n\ngetMessage(~message=\"You have a message!\");\n/* - The caller specifies ~message but internally the function can make use */\n\n/* The following function also has explicit types declared */\nlet showDialog = (~message: string): unit => {\n  () /* Show the dialog */;\n};\n/* - The return type is `unit`, this is a special type that is equivalent to\n   specifying that this function doesn't return a value\n   the `unit` type can also be represented as `()` */\n\n/* > Currying\n   Functions can be curried and are partially called, allowing for easy reuse */\n\nlet div = (denom, numr) => numr / denom;\nlet divBySix = div(6);\nlet divByTwo = div(2);\n\ndiv(3, 24);     /* - : int = 8  */\ndivBySix(128);  /* - : int = 21 */\ndivByTwo(10);   /* - : int = 5  */\n\n/* > Optional Labeled Arguments */\n\n/* Use `=?` syntax for optional labeled arguments */\nlet greetPerson = (~name, ~greeting=?, ()) => {\n  switch (greeting) {\n  | Some(greet) => greet ++ \" \" ++ name\n  | None => \"Hi \" ++ name\n  };\n};\n/* - The third argument, `unit` or `()` is required because if we omitted it,\n   the function would be curried so greetPerson(~name=\"Kate\") would create\n   a partial function, to fix this we add `unit` when we declare and call it */\n\n/* Call greetPerson without the optional labeled argument */\ngreetPerson(~name=\"Kate\", ());\n\n/* Call greetPerson with all arguments */\ngreetPerson(~name=\"Marco\", ~greeting=\"How are you today,\");\n\n/* > Pipe */\n/* Functions can be called with the pipeline operator */\n\n/* Use `->` to pass in the first argument (pipe-first) */\n3->div(24);     /* - : int = 8 */\n/* - This is equivalent to div(3, 24); */\n\n36->divBySix;   /* - : int = 6 */\n/* - This is equivalent to divBySix(36); */\n\n/* Use `|>` to pass in the last argument (pipe-last) */\n24 |> div(3);   /* - : int = 8 */\n/* - This is equivalent to div(3, 24); */\n\n36 |> divBySix; /* - : int = 6 */\n/* - This is equivalent to divBySix(36); */\n\n/* Pipes make it easier to chain code together */\nlet addOne = a => a + 1;\nlet divByTwo = a => a / 2;\nlet multByThree = a => a * 3;\n\nlet pipedValue = 3->addOne->divByTwo->multByThree; /* - : int = 6 */\n\n/*----------------------------------------------\n * Control Flow & Pattern Matching\n *----------------------------------------------\n */\n\n/* > If-else */\n/* In Reason, `If` is an expression when evaluate will return the result */\n\n/* greeting will be \"Good morning!\" */\nlet greeting = if (true) {\"Good morning!\"} else {\"Hello!\"};\n\n/* Without an else branch the expression will return `unit` or `()` */\nif (false) {\n  showDialog(~message=\"Are you sure you want to leave?\");\n};\n/* - Because the result will be of type `unit`, both return types should be of\n   the same type if you want to assign the result. */\n\n/* > Destructuring */\n/* Extract properties from data structures easily */\n\nlet aTuple = (\"Teacher\", 101);\n\n/* We can extract the values of a tuple */\nlet (name, classNum) = aTuple;\n\n/* The properties of a record can be extracted too */\ntype person = {\n  firstName: string,\n  age: int,\n};\nlet bjorn = {firstName: \"Bjorn\", age: 28};\n\n/* The variable names have to match with the record property names */\nlet {firstName, age} = bjorn;\n\n/* But we can rename them like so */\nlet {firstName: bName, age: bAge} = bjorn;\n\nlet {firstName: cName, age: _} = bjorn;\n\n/* > Switch\n   Pattern matching with switches is an important tool in Reason\n   It can be used in combination with destructuring for an expressive and\n   concise tool */\n\n/* Lets take a simple list */\nlet firstNames = [\"James\", \"Jean\", \"Geoff\"];\n\n/* We can pattern match on the names for each case we want to handle */\nswitch (firstNames) {\n| [] => \"No names\"\n| [first] => \"Only \" ++ first\n| [first, second] => \"A couple of names \" ++ first ++ \",\" ++ second\n| [first, second, third] =>\n  \"Three names, \" ++ first ++ \", \" ++ second ++ \", \" ++ third\n| _ => \"Lots of names\"\n};\n/* - The `_` is a catch all at the end, it signifies that we don't care what\n   the value is so it will match every other case */\n\n/* > When clause */\n\nlet isJohn = a => a == \"John\";\nlet maybeName = Some(\"John\");\n\n/* When can add more complex logic to a simple switch */\nlet aGreeting =\n  switch (maybeName) {\n  | Some(name) when isJohn(name) => \"Hi John! How's it going?\"\n  | Some(name) => \"Hi \" ++ name ++ \", welcome.\"\n  | None => \"No one to greet.\"\n  };\n\n/* > Exception */\n\n/* Define a custom exception */\nexception Under_Age;\n\n/* Raise an exception within a function */\nlet driveToTown = (driver: person) =>\n  if (driver.age >= 15) {\n    \"We're in town\";\n  } else {\n    raise(Under_Age);\n  };\n\nlet evan = {firstName: \"Evan\", age: 14};\n\n/* Pattern match on the exception Under_Age */\nswitch (driveToTown(evan)) {\n| status => print_endline(status)\n| exception Under_Age =>\n  print_endline(evan.firstName ++ \" is too young to drive!\")\n};\n\n/* Alternatively, a try block can be used */\n/* - With Reason exceptions can be avoided with optionals and are seldom used */\nlet messageToEvan =\n  try (driveToTown(evan)) {\n  | Under_Age => evan.firstName ++ \" is too young to drive!\"\n  };\n\n/*----------------------------------------------\n * Object\n *----------------------------------------------\n * Objects are similar to Record types but aren't as rigid\n * An object resembles a class\n */\n\n/* An object may be typed like a record but contains a dot */\ntype surfaceComputer = {\n  .\n  color: string,\n  capacity: int,\n};\n/* - A single dot signifies a closed object, an object that uses this type\n   must have the exact shape */\n\nlet surfaceBook: surfaceComputer = {pub color = \"blue\"; pub capacity = 512};\n\n/* But an object doesn't require a type */\nlet house = {\n  /* A private property */\n  val temp = ref(18.0);\n  /* Public properties */\n  pub temperature = temp;\n  /* A private method only accessible from within house */\n  pri setThermostat = v => temp := v;\n  /* A public method that calls the private setThermostat method */\n  pub arriveHome = () => this#setThermostat(22.0)\n};\n\nhouse#temperature; /* - : float = 18. */\nhouse#arriveHome();\nhouse#temperature; /* - : float = 22. */\n\n/*----------------------------------------------\n * Module\n *----------------------------------------------\n * Modules are used to organize your code and provide namespacing.\n * Each file is a module by default\n */\n\n/* Create a module */\nmodule Staff = {\n  type role =\n    | Delivery\n    | Sales\n    | Other;\n  type member = {\n    name: string,\n    role,\n  };\n\n  let getRoleDirectionMessage = staff =>\n    switch (staff.role) {\n    | Delivery => \"Deliver it like you mean it!\"\n    | Sales => \"Sell it like only you can!\"\n    | Other => \"You're an important part of the team!\"\n    };\n};\n\n/* A module can be accessed with dot notation */\nlet newEmployee: Staff.member = {name: \"Laura\", role: Staff.Delivery};\n\n/* Using the module name can be tiresome so the module's contents can be opened\n   into the current scope with `open` */\nopen Staff;\n\nlet otherNewEmployee: member = {name: \"Fred\", role: Other};\n\n/* A module can be extended using the `include` keyword, include copies\n   the contents of the module into the scope of the new module */\nmodule SpecializedStaff = {\n  include Staff;\n\n  /* `member` is included so there's no need to reference it explicitly */\n  let ceo: member = {name: \"Reggie\", role: Other};\n\n  let getMeetingTime = staff =>\n    switch (staff) {\n    | Other => 11_15 /* - : int = 1115; Underscores are for formatting only  */\n    | _ => 9_30\n    };\n};\n```\n\n## Further Reading\n\n- [Official Reason Docs](https://reasonml.github.io/docs/en/what-and-why)\n- [Official BuckleScript Docs](https://bucklescript.github.io/docs/en/what-why)\n- [Try Reason](https://reasonml.github.io/en/try)\n- [Get Started with Reason by Nik Graf](https://egghead.io/courses/get-started-with-reason)\n"
        },
        {
          "name": "red.md",
          "type": "blob",
          "size": 7.3994140625,
          "content": "---\nname: Red\nfilename: learnred.red\ncontributors:\n    - [\"Arnold van Hofwegen\", \"https://github.com/iArnold\"]\n---\n\n\nRed was created out of the need to get work done, and the tool the author wanted to use, the language of REBOL, had a couple of drawbacks.\nIt was not Open Sourced at that time and it is an interpreted language, what means that it is on average slow compared to a compiled language.\n\nRed, together with its C-level dialect Red/System, provides a language that covers the entire programming space you ever need to program something in.\nRed is a language heavily based on the language of REBOL. Where Red itself reproduces the flexibility of the REBOL language, the underlying language Red will be built upon,\nRed/System, covers the more basic needs of programming like C can, being closer to the metal.\n\nRed will be the world's first Full Stack Programming Language. This means that it will be an effective tool to do (almost) any programming task on every level\nfrom the metal to the meta without the aid of other stack tools.\nFurthermore Red will be able to cross-compile Red source code without using any GCC like toolchain\nfrom any platform to any other platform. And it will do this all from a binary executable that is supposed to stay under 1 MB.\n\nReady to learn your first Red?\n\n```\nAll text before the header will be treated as comment, as long as you avoid\nusing the word \"red\" starting with a capital \"R\" in this pre-header text.\nThis is a temporary shortcoming of the used lexer but most of the time you\nstart your script or program with the header itself.\n\nThe header of a red script is the capitalized word \"red\" followed by a\nwhitespace character followed by a block of square brackets []. The block of\nbrackets can be filled with useful information about this script or program:\nthe author's name, the filename, the version, the license, a summary of what\nthe program does or any other files it needs. The red/System header is just\nlike the red header, only saying \"red/System\" and not \"red\".\n```\n\n```red\nRed []\n\n;this is a commented line\n\nprint \"Hello Red World\"    ; this is another comment\n\ncomment {\n    This is a multiline comment.\n    You just saw the Red version of the \"Hello World\" program.\n}\n\n; Your program's entry point is the first executable code that is found\n; no need to restrict this to a 'main' function.\n\n; Valid variable names start with a letter and can contain numbers,\n; variables containing only capital A through F and numbers and ending with 'h'\n; are forbidden, because that is how hexadecimal numbers are expressed in Red\n; and Red/System.\n\n; assign a value to a variable using a colon \":\"\nmy-name: \"Red\"\nreason-for-using-the-colon: {Assigning values using the colon makes\n the equality sign \"=\" exclusively usable for comparisons purposes,\n exactly what \"=\" was intended for in the first place!\n Remember this y = x + 1 and x = 1 => y = 2 stuff from school?\n}\nis-this-name-valid?: true\n\n; print output using print, or prin for printing without a newline or linefeed\n; at the end of the printed text.\n\nprin \" My name is \" print my-name\nMy name is Red\n\nprint [\"My name is \" my-name lf]\nMy name is Red\n\n; If you haven't already noticed: statements do NOT end with a semicolon ;-)\n\n;\n; Datatypes\n;\n; If you know Rebol, you probably have noticed it has lots of datatypes. Red\n; does not have yet all those types, but as Red want to be close to Rebol it\n; will have a lot of datatypes.\n; You can recognize types by the exclamation sign at the end. But beware\n; names ending with an exclamation sign are allowed.\n; Some of the available types are integer! string! block!\n\n; Declaring variables before using them?\n; Red knows by itself what variable is best to use for the data you want to\n; use it for.\n; A variable declaration is not always necessary.\n; It is considered good coding practise to declare your variables,\n; but it is not forced upon you by Red.\n; You can declare a variable and specify its type. a variable's type\n; determines its size in bytes.\n\n; Variables of integer! type are usually 4 bytes or 32 bits\nmy-integer: 0\n; Red's integers are signed. No support for unsigned atm but that will come.\n\n; To find out the type of variable use type?\ntype? my-integer\ninteger!\n\n; A variable can be initialized using another variable that gets initialized\n; at the same time. Initialize here refers to both declaring a variable and\n; assigning a value to it.\ni2: 1 + i1: 1\n\n; Arithmetic is straightforward\ni1 + i2 ; result 3\ni2 - i1 ; result 1\ni2 * i1 ; result 2\ni1 / i2 ; result 0 (0.5, but truncated towards 0)\n\n; Comparison operators are probably familiar, and unlike in other languages\n; you only need a single '=' sign for comparison. Inequality is '<>' like in Pascal.\n; There is a boolean like type in Red. It has values true and false, but also\n; the values on/off or yes/no can be used\n\n3 = 2 ; result false\n3 <> 2 ; result true\n3 > 2 ; result true\n3 < 2 ; result false\n2 <= 2 ; result true\n2 >= 2 ; result true\n\n;\n; Control Structures\n;\n; if\n; Evaluate a block of code if a given condition is true. IF returns\n; the resulting value of the block or 'none' if the condition was false.\nif a < 0 [print \"a is negative\"]\n\n; either\n; Evaluate a block of code if a given condition is true, else evaluate an\n; alternative block of code. If the last expressions in both blocks have the\n; same type, EITHER can be used inside an expression.\neither a > 0 [\n   msg: \"positive\"\n][\n   either a = 0 [\n       msg: \"zero\"\n   ][\n       msg: \"negative\"\n   ]\n]\n\nprint [\"a is \" msg lf]\n\n; There is an alternative way to write this\n; (Which is allowed because all code paths return a value of the same type):\n\nmsg: either a > 0 [\n   \"positive\"\n][\n   either a = 0 [\n       \"zero\"\n   ][\n       \"negative\"\n   ]\n]\nprint [\"a is \" msg lf]\n\n; until\n; Loop over a block of code until the condition at end of block, is met.\n; UNTIL always returns the 'true' value from the final evaluation of the last expression.\nc: 5\nuntil [\n   prin \"o\"\n   c: c - 1\n   c = 0    ; the condition to end the until loop\n]\n;   will output:\nooooo\n; Note that the loop will always be evaluated at least once, even if the\n; condition is not met from the beginning.\n\n; while\n; While a given condition is met, evaluate a block of code.\n; WHILE does not return any value, so it cannot be used in an expression.\nc: 5\nwhile [c > 0][\n   prin \"o\"\n   c: c - 1\n]\n; will output:\nooooo\n\n;\n; Functions\n;\n; function example\ntwice: function [a [integer!] /one return: [integer!]][\n        c: 2\n        a: a * c\n        either one [a + 1][a]\n]\nb: 3\nprint twice b   ; will output 6.\n\n; Import external files with #include and filenames start with a % sign\n#include %includefile.red\n; Now the functions in the included file can be used too.\n```\n\n## Further Reading\n\nThe main source for information about Red is the [Red language homepage](http://www.red-lang.org).\n\nThe source can be found on [GitHub](https://github.com/red/red).\n\nThe Red/System language specification can be found [here](http://static.red-lang.org/red-system-specs-light.html).\n\nTo learn more about Rebol and Red join the [chat on Gitter](https://gitter.im/red/red). And if that is not working for you drop a mail to us on the [Red mailing list](mailto: red-langNO_SPAM@googlegroups.com) (remove NO_SPAM).\n\nBrowse or ask questions on [Stack Overflow](https://stackoverflow.com/questions/tagged/red).\n\nMaybe you want to try Red right away? That is possible on the [try Rebol and Red site](http://tryrebol.esperconsultancy.nl).\n\nYou can also learn Red by learning some [Rebol](http://www.rebol.com/docs.html).\n"
        },
        {
          "name": "rescript.md",
          "type": "blob",
          "size": 15.1865234375,
          "content": "---\nname: ReScript\nfilename: rescript.res\ncontributors:\n  - [\"Seth Corker\", \"https://sethcorker.com\"]\n  - [\"Danny Yang\", \"https://yangdanny97.github.io\"]\n---\n\nReScript is a robustly typed language that compiles to efficient and human-readable JavaScript. It comes with a lightning fast compiler toolchain that scales to any codebase size. ReScript is descended from OCaml and Reason, with nice features like type inference and pattern matching, along with beginner-friendly syntax and a focus on the JavaScript ecosystem.\n\n```javascript\n/* Comments start with slash-star, and end with star-slash */\n// Single line comments start with double slash\n\n/*----------------------------------------------\n * Variable and function declaration\n *----------------------------------------------\n * Variables and functions use the let keyword and end with a semi-colon\n * `let` bindings are immutable\n */\n\nlet x = 5\n/* - Notice we didn't add a type, ReScript will infer x is an int */\n\n/* A function like this, take two arguments and add them together */\nlet add = (a, b) => a + b\n/* - This doesn't need a type annotation either! */\n\n/*----------------------------------------------\n * Type annotation\n *----------------------------------------------\n * Types don't need to be explicitly annotated in most cases but when you need\n * to, you can add the type after the name\n */\n\n/* A type can be explicitly written like so */\nlet x: int = 5\n\n/* The add function from before could be explicitly annotated too */\nlet add2 = (a: int, b: int): int => a + b\n\n/* A type can be aliased using the type keyword */\ntype companyId = int\nlet myId: companyId = 101\n\n/* Mutation is not encouraged in ReScript but it's there if you need it\n   If you need to mutate a let binding, the value must be wrapped in a `ref()`*/\nlet myMutableNumber = ref(120)\n\n/* To access the value (and not the ref container), use `.contents` */\nlet copyOfMyMutableNumber = myMutableNumber.contents\n\n/* To assign a new value, use the `:=` operator */\nmyMutableNumber := 240\n\n/*----------------------------------------------\n * Basic types and operators\n *----------------------------------------------\n */\n\n/* > String */\n\n/* Use double quotes for strings */\nlet greeting = \"Hello world!\"\n\n/* A string can span multiple lines */\nlet aLongerGreeting = \"Look at me,\nI'm a multi-line string\n\"\n\n/* Use ` for unicode */\nlet world = `🌍`\n\n/* The ` annotation is also used for string interpolation */\nlet helloWorld = `hello, ${world}`\n/* Bindings must be converted to strings */\nlet age = 10\nlet ageMsg = `I am ${Int.toString(age)} years old`\n\n\n/* Concatenate strings with ++ */\nlet name = \"John \" ++ \"Wayne\"\nlet emailSubject = \"Hi \" ++ name ++ \", you're a valued customer\"\n\n/* > Char */\n\n/* Use a single character for the char type */\nlet lastLetter = 'z'\n/* - Char doesn't support Unicode or UTF-8 */\n\n/* > Boolean */\n\n/* A boolean can be either true or false */\nlet isLearning = true\n\ntrue && false  /* - : bool = false  Logical and */\ntrue || true   /* - : bool = true   Logical or  */\n!true          /* - : bool = false  Logical not */\n\n/* Greater than `>`, or greater than or equal to `>=` */\n'a' > 'b' /* - bool : false */\n\n/* Less than `<`, or less than or equal to `<=` */\n1 < 5 /* - : bool = true */\n\n/* Structural equal */\n\"hello\" == \"hello\" /* - : bool = true */\n\n/* Referential equal */\n\"hello\" === \"hello\" /* - : bool = false */\n/* - This is false because they are two different \"hello\" string literals */\n\n/* Structural unequal */\nlastLetter != 'a' /* -: bool = true */\n\n/* Referential unequal */\nlastLetter !== lastLetter /* - : bool = false */\n\n/* > Integer */\n/* Perform math operations on integers */\n\n1 + 1          /* - : int = 2  */\n25 - 11        /* - : int = 11 */\n5 * 2 * 3      /* - : int = 30 */\n8 / 2          /* - : int = 4  */\n\n/* > Float */\n/* Operators on floats have a dot after them */\n\n1.1 +. 1.5     /* - : float = 2.6  */\n18.0 -. 24.5   /* - : float = -6.5 */\n2.5 *. 2.0     /* - : float = 5.   */\n16.0 /. 4.0    /* - : float = 4.   */\n\n/* > Tuple\n * Tuples have the following attributes\n  - immutable\n  - ordered\n  - fix-sized at creation time\n  - heterogeneous (can contain different types of values)\n A tuple is 2 or more values */\n\nlet teamMember = (\"John\", 25)\n\n/* Type annotation matches the values */\nlet position2d: (float, float) = (9.0, 12.0)\n\n/* Pattern matching is a great tool to retrieve just the values you care about\n   If we only want the y value, let's use `_` to ignore the value */\nlet (_, y) = position2d\ny +. 1.0 /* - : float = 13. */\n\n/* > Record */\n\n/* A record has to have an explicit type */\ntype trainJourney = {\n  destination: string,\n  capacity: int,\n  averageSpeed: float,\n}\n\n/* Once the type is declared, ReScript can infer it whenever it comes up */\nlet firstTrip = {destination: \"London\", capacity: 45, averageSpeed: 120.0}\n\n/* Access a property using dot notation */\nlet maxPassengers = firstTrip.capacity\n\n/* If you define the record type in a different file, you have to reference the\n   filename, if trainJourney was in a file called Trips.res */\nlet secondTrip: Trips.trainJourney = {\n  destination: \"Paris\",\n  capacity: 50,\n  averageSpeed: 150.0,\n}\n\n/* Records are immutable by default */\n/* But the contents of a record can be copied using the spread operator */\nlet newTrip = {...secondTrip, averageSpeed: 120.0}\n\n/* A record property can be mutated explicitly with the `mutable` keyword */\ntype breakfastCereal = {\n  name: string,\n  mutable amount: int,\n}\n\nlet tastyMuesli = {name: \"Tasty Muesli TM\", amount: 500}\n\ntastyMuesli.amount = 200\n/* - tastyMuesli now has an amount of 200 */\n\n/* Punning is used to avoid redundant typing */\nlet name = \"Just As Good Muesli\"\nlet justAsGoodMuesli = {name, amount: 500}\n/* - justAsGoodMuesli.name is now \"Just As Good Muesli\", it's equivalent\n   to { name: name, amount: 500 } */\n\n/* > Variant\n   Mutually exclusive states can be expressed with variants */\n\ntype authType =\n  | GitHub\n  | Facebook\n  | Google\n  | Password\n/* - The constructors must be capitalized like so */\n/* - Like records, variants should be named if declared in a different file */\n\nlet userPreferredAuth = GitHub\n\n/* Variants work great with a switch statement */\nlet loginMessage =\n  switch (userPreferredAuth) {\n  | GitHub => \"Login with GitHub credentials.\"\n  | Facebook => \"Login with your Facebook account.\"\n  | Google => \"Login with your Google account\"\n  | Password => \"Login with email and password.\"\n  }\n\n/* > Option\n   An option can be None or Some('a) where 'a is the type */\n\nlet userId = Some(23)\n\n/* A switch handles the two cases */\nlet alertMessage =\n  switch (userId) {\n  | Some(id) => \"Welcome, your ID is\" ++ string_of_int(id)\n  | None => \"You don't have an account!\"\n  }\n/* - Missing a case, `None` or `Some`, would cause an error */\n\n/* > List\n  * Lists have the following attributes\n   - immutable\n   - ordered\n   - fast at prepending items\n   - fast at splitting\n\n  * Lists in ReScript are linked lists\n */\n\n/* A list is declared with the `list` keyword and initialized with values wrapped in curly braces */\nlet userIds = list{1, 4, 8}\n\n/* The type can be explicitly set with list<'a> where 'a is the type */\ntype idList = list<int>\ntype attendanceList = list<string>\n\n/* Lists are immutable */\n/* But you can create a new list with additional prepended elements by using the spread operator on an existing list */\nlet newUserIds = list{101, 102, ...userIds}\n\n/* > Array\n * Arrays have the following attributes\n  - mutable\n  - fast at random access & updates */\n\n/* An array is declared with `[` and ends with `]` */\nlet languages = [\"ReScript\", \"JavaScript\", \"OCaml\"]\n\n/*----------------------------------------------\n * Function\n *----------------------------------------------\n */\n\n/* ReScript functions use the arrow syntax, the expression is returned */\nlet signUpToNewsletter = email => \"Thanks for signing up \" ++ email\n\n/* Call a function like this */\nsignUpToNewsletter(\"hello@ReScript.org\")\n\n/* For longer functions, use a block */\nlet getEmailPrefs = email => {\n  let message = \"Update settings for \" ++ email\n  let prefs = [\"Weekly News\", \"Daily Notifications\"]\n\n  (message, prefs)\n}\n/* - the final tuple is implicitly returned */\n\n/* > Labeled Arguments */\n\n/* Arguments can be labeled with the ~ symbol */\nlet moveTo = (~x, ~y) => {\n  /* Move to x,y */\n  ()\n}\n\nmoveTo(~x=7.0, ~y=3.5)\n\n/* Labeled arguments can also have a name used within the function */\nlet getMessage = (~message as msg) => \"==\" ++ msg ++ \"==\"\n\ngetMessage(~message=\"You have a message!\")\n/* - The caller specifies ~message but internally the function can make use */\n\n/* The following function also has explicit types declared */\nlet showDialog = (~message: string): unit => {\n  () /* Show the dialog */\n}\n/* - The return type is `unit`, this is a special type that is equivalent to\n   specifying that this function doesn't return a value\n   the `unit` type can also be represented as `()` */\n\n/* > Currying\n   Functions can be curried and are partially called, allowing for easy reuse \n   The remaining arguments are represented with ... */\n\nlet div = (denom, numr) => numr / denom\nlet divBySix = div(6, ...)\nlet divByTwo = div(2, ...)\n\ndiv(3, 24)     /* - : int = 8  */\ndivBySix(128)  /* - : int = 21 */\ndivByTwo(10)   /* - : int = 5  */\n\n/* > Optional Labeled Arguments */\n\n/* Use `=?` syntax for optional labeled arguments */\nlet greetPerson = (~name, ~greeting=?) => {\n  switch (greeting) {\n  | Some(greet) => greet ++ \" \" ++ name\n  | None => \"Hi \" ++ name\n  }\n}\n/* - The third argument, `unit` or `()` is required because if we omitted it,\n   the function would be curried so greetPerson(~name=\"Kate\") would create\n   a partial function, to fix this we add `unit` when we declare and call it */\n\n/* Call greetPerson without the optional labeled argument */\ngreetPerson(~name=\"Kate\")\n\n/* Call greetPerson with all arguments */\ngreetPerson(~name=\"Marco\", ~greeting=\"How are you today,\")\n\n/* > Pipe */\n/* Functions can be called with the pipeline operator */\n\n/* Use `->` to pass in the first argument (pipe-first) */\n3->div(24)     /* - : int = 8 */\n/* - This is equivalent to div(3, 24) */\n\n36->divBySix   /* - : int = 6 */\n/* - This is equivalent to divBySix(36) */\n\n/* Pipes make it easier to chain code together */\nlet addOne = a => a + 1\nlet divByTwo = a => a / 2\nlet multByThree = a => a * 3\n\nlet pipedValue = 3->addOne->divByTwo->multByThree /* - : int = 6 */\n\n/*----------------------------------------------\n * Control Flow & Pattern Matching\n *----------------------------------------------\n */\n\n/* > If-else */\n/* In ReScript, `If` is an expression when evaluate will return the result */\n\n/* greeting will be \"Good morning!\" */\nlet greeting = if (true) {\"Good morning!\"} else {\"Hello!\"}\n\n/* Without an else branch the expression will return `unit` or `()` */\nif (false) {\n  showDialog(~message=\"Are you sure you want to leave?\")\n}\n/* - Because the result will be of type `unit`, both return types should be of\n   the same type if you want to assign the result. */\n\n/* > Destructuring */\n/* Extract properties from data structures easily */\n\nlet aTuple = (\"Teacher\", 101)\n\n/* We can extract the values of a tuple */\nlet (name, classNum) = aTuple\n\n/* The properties of a record can be extracted too */\ntype person = {\n  firstName: string,\n  age: int,\n}\nlet bjorn = {firstName: \"Bjorn\", age: 28}\n\n/* The variable names have to match with the record property names */\nlet {firstName, age} = bjorn\n\n/* But we can rename them like so */\nlet {firstName: bName, age: bAge} = bjorn\n\nlet {firstName: cName, age: _} = bjorn\n\n/* > Switch\n   Pattern matching with switches is an important tool in ReScript\n   It can be used in combination with destructuring for an expressive and\n   concise tool */\n\n/* Lets take a simple list */\nlet firstNames = [\"James\", \"Jean\", \"Geoff\"]\n\n/* We can pattern match on the names for each case we want to handle */\nswitch (firstNames) {\n| [] => \"No names\"\n| [first] => \"Only \" ++ first\n| [first, second] => \"A couple of names \" ++ first ++ \",\" ++ second\n| [first, second, third] =>\n  \"Three names, \" ++ first ++ \", \" ++ second ++ \", \" ++ third\n| _ => \"Lots of names\"\n}\n/* - The `_` is a catch all at the end, it signifies that we don't care what\n   the value is so it will match every other case */\n\n/* > When clause */\n\nlet isJohn = a => a == \"John\"\nlet maybeName = Some(\"John\")\n\n/* When can add more complex logic to a simple switch */\nlet aGreeting =\n  switch (maybeName) {\n  | Some(name) when isJohn(name) => \"Hi John! How's it going?\"\n  | Some(name) => \"Hi \" ++ name ++ \", welcome.\"\n  | None => \"No one to greet.\"\n  }\n\n/* > Exception */\n\n/* Define a custom exception */\nexception Under_Age\n\n/* Raise an exception within a function */\nlet driveToTown = (driver: person) =>\n  if (driver.age >= 15) {\n    \"We're in town\"\n  } else {\n    raise(Under_Age)\n  }\n\nlet evan = {firstName: \"Evan\", age: 14}\n\n/* Pattern match on the exception Under_Age */\nswitch (driveToTown(evan)) {\n| status => print_endline(status)\n| exception Under_Age =>\n  print_endline(evan.firstName ++ \" is too young to drive!\")\n}\n\n/* Alternatively, a try block can be used */\n/* - With ReScript exceptions can be avoided with optionals and are seldom used */\nlet messageToEvan =\n  try {\n    driveToTown(evan)\n  } catch {\n  | Under_Age => evan.firstName ++ \" is too young to drive!\"\n  }\n\n/*----------------------------------------------\n * Object\n *----------------------------------------------\n * Objects are similar to Record types, but are less rigid\n */\n\n/* An object may be typed like a record but the property names are quoted */\ntype surfaceComputer = {\n  \"color\": string,\n  \"capacity\": int,\n}\nlet surfaceBook: surfaceComputer = { \"color\": \"blue\", \"capacity\": 512 }\n\n/* Objects don't require types */\nlet hamster = { \"color\": \"brown\", \"age\": 2 }\n\n/* Object typing is structural, so you can have functions that accept any object with the required fields */\nlet getAge = animal => animal[\"age\"]\ngetAge(hamster)\ngetAge({ \"name\": \"Fido\", \"color\": \"silver\", \"age\": 3 })\ngetAge({ \"age\": 5 })\n\n/*----------------------------------------------\n * Module\n *----------------------------------------------\n * Modules are used to organize your code and provide namespacing.\n * Each file is a module by default\n */\n\n/* Create a module */\nmodule Staff = {\n  type role =\n    | Delivery\n    | Sales\n    | Other\n  type member = {\n    name: string,\n    role,\n  }\n\n  let getRoleDirectionMessage = staff =>\n    switch (staff.role) {\n    | Delivery => \"Deliver it like you mean it!\"\n    | Sales => \"Sell it like only you can!\"\n    | Other => \"You're an important part of the team!\"\n    }\n}\n\n/* A module can be accessed with dot notation */\nlet newEmployee: Staff.member = {name: \"Laura\", role: Staff.Delivery}\n\n/* Using the module name can be tiresome so the module's contents can be opened\n   into the current scope with `open` */\nopen Staff\n\nlet otherNewEmployee: member = {name: \"Fred\", role: Other}\n\n/* A module can be extended using the `include` keyword, include copies\n   the contents of the module into the scope of the new module */\nmodule SpecializedStaff = {\n  include Staff\n\n  /* `member` is included so there's no need to reference it explicitly */\n  let ceo: member = {name: \"Reggie\", role: Other}\n\n  let getMeetingTime = staff =>\n    switch (staff) {\n    | Other => 11_15 /* - : int = 1115 Underscores are for formatting only  */\n    | _ => 9_30\n    }\n}\n```\n\n## Further Reading\n\n- [Official ReScript Docs](https://rescript-lang.org/)\n- [Try ReScript - Online Playground](https://rescript-lang.org/try)\n"
        },
        {
          "name": "ro",
          "type": "tree",
          "content": null
        },
        {
          "name": "rst.md",
          "type": "blob",
          "size": 3.0234375,
          "content": "---\nname: reStructuredText (RST)\ncontributors:\n    - [\"DamienVGN\", \"https://github.com/martin-damien\"]\n    - [\"Andre Polykanine\", \"https://github.com/Oire\"]\nfilename: restructuredtext.rst\n---\n\nRST, Restructured Text, is a file format created by the Python community to write documentation. It is part of [Docutils](https://docutils.sourceforge.io/rst.html).\n\nRST is a markup language like HTML but is much more lightweight and easier to read.\n\n\n## Installation\n\nTo use Restructured Text, you will have to install [Python](http://www.python.org) and the `docutils` package.\n\n`docutils` can be installed using the commandline:\n\n```bash\n$ easy_install docutils\n```\n\nIf your system has `pip`, you can use it too:\n\n```bash\n$ pip install docutils\n```\n\n\n## File syntax\n\nA simple example of the file syntax:\n\n```rst\n.. Lines starting with two dots are special commands. But if no command can be found, the line is considered as a comment.\n\n=========================================================\nMain titles are written using equals signs over and under\n=========================================================\n\nNote that each character, including spaces, needs an equals sign above and below.\n\nTitles also use equals signs but are only underneath\n====================================================\n\nSubtitles with dashes\n---------------------\n\nYou can put text in *italic* or in **bold**, you can \"mark\" text as code with double backquote ``print()``.\n\nSpecial characters can be escaped using a backslash, e.g. \\\\ or \\*.\n\nLists are similar to Markdown, but a little more involved.\n\nRemember to line up list symbols (like - or \\*) with the left edge of the previous text block, and remember to use blank lines to separate new lists from parent lists:    \n\n- First item\n- Second item\n\n  - Sub item\n    \n- Third item\n\nor\n\n* First item\n* Second item\n    \n  * Sub item\n\n* Third item\n\nTables are really easy to write:\n\n=========== ========\nCountry     Capital\n=========== ========\nFrance      Paris\nJapan       Tokyo\n=========== ========\n\nMore complex tables can be done easily (merged columns and/or rows) but I suggest you to read the complete doc for this. :)\n\nThere are multiple ways to make links:\n\n- By adding an underscore after a word : GitHub_ and by adding the target URL after the text (this way has the advantage of not inserting unnecessary URLs in the visible text).\n- By typing a full comprehensible URL : https://github.com/ (will be automatically converted to a link).\n- By making a more Markdown-like link: `GitHub <https://github.com/>`_ .\n\n.. _GitHub: https://github.com/\n```\n\n\n## How to Use It\n\nRST comes with docutils where you have `rst2html`, for example:\n\n```bash\n$ rst2html myfile.rst output.html\n```\n\n*Note : On some systems the command could be rst2html.py*\n\nBut there are more complex applications that use the RST format:\n\n- [Pelican](http://blog.getpelican.com/), a static site generator\n- [Sphinx](http://sphinx-doc.org/), a documentation generator\n- and many others\n\n\n## Readings\n\n- [Official quick reference](http://docutils.sourceforge.net/docs/user/rst/quickref.html)\n"
        },
        {
          "name": "ru",
          "type": "tree",
          "content": null
        },
        {
          "name": "ruby-ecosystem.md",
          "type": "blob",
          "size": 5.9130859375,
          "content": "---\ncategory: tool\nname: Ruby ecosystem\ncontributors:\n    - [\"Jon Smock\", \"http://github.com/jonsmock\"]\n    - [\"Rafal Chmiel\", \"http://github.com/rafalchmiel\"]\n\n---\n\nPeople using Ruby generally have a way to install different Ruby versions,\nmanage their packages (or gems), and manage their gem dependencies.\n\n## Ruby Versions\n\nRuby was created by Yukihiro \"Matz\" Matsumoto, who remains somewhat of a\n[BDFL](https://en.wikipedia.org/wiki/Benevolent_Dictator_for_Life), although\nthat is changing recently. As a result, the reference implementation of Ruby is\ncalled MRI (Matz' Reference Implementation), and when you hear a Ruby version,\nit is referring to the release version of MRI.\n\nNew major versions of Ruby are traditionally released on Christmas Day. The current major version (25 December 2017) is 2.5. The most popular stable versions are 2.4.4 and 2.3.7 (both released 28 March 2018).\n\n## Ruby Managers\n\nSome platforms have Ruby pre-installed or available as a package. Most rubyists\ndo not use these, or if they do, they only use them to bootstrap another Ruby\ninstaller or implementation. Instead rubyists tend to install a Ruby manager to\ninstall and switch between many versions of Ruby and their projects' Ruby\nenvironments.\n\nThe following are the popular Ruby environment managers:\n\n* [RVM](https://rvm.io/) - Installs and switches between rubies. RVM also has\n  the concept of gemsets to isolate projects' environments completely.\n* [ruby-build](https://github.com/sstephenson/ruby-build) - Only installs\n  rubies. Use this for finer control over your rubies' installations.\n* [rbenv](https://github.com/sstephenson/rbenv) - Only switches between rubies.\n  Used with ruby-build.  Use this for finer control over how rubies load.\n* [chruby](https://github.com/postmodern/chruby) - Only switches between rubies.\n  Similar in spirit to rbenv. Unopinionated about how rubies are installed.\n\n## Ruby Implementations\n\nThe Ruby ecosystem enjoys many different implementations of Ruby, each with\nunique strengths and states of compatibility. To be clear, the different\nimplementations are written in different languages, but *they are all Ruby*.\nEach implementation has special hooks and extra features, but they all run\nnormal Ruby files well. For instance, JRuby is written in Java, but you do\nnot need to know Java to use it.\n\nVery mature/compatible:\n\n* [MRI](https://github.com/ruby/ruby) - Written in C, this is the reference implementation of Ruby. By\n  definition it is 100% compatible (with itself). All other rubies\nmaintain compatibility with MRI (see [Ruby Spec](#ruby-spec) below).\n* [JRuby](http://jruby.org/) - Written in Java and Ruby, this robust implementation is quite fast.\n  Most importantly, JRuby's strength is JVM/Java interop, leveraging existing\nJVM tools, projects, and languages.\n* [Rubinius](http://rubini.us/) - Written primarily in Ruby itself with a C++ bytecode VM. Also\n  mature and fast. Because it is implemented in Ruby itself, it exposes many VM\nfeatures into rubyland.\n\nMedium mature/compatible:\n\n* [Maglev](http://maglev.github.io/) - Built on top of Gemstone, a Smalltalk VM. Smalltalk has some\n  impressive tooling, and this project tries to bring that into Ruby\ndevelopment.\n* [RubyMotion](http://www.rubymotion.com/) - Brings Ruby to iOS development.\n\nLess mature/compatible:\n\n* [Topaz](http://topazruby.com/) - Written in RPython (using the PyPy toolchain), Topaz is fairly young\n  and not yet compatible. It shows promise to be a high-performance Ruby\nimplementation.\n* [IronRuby](http://ironruby.net/) - Written in C# targeting the .NET platform, work on IronRuby seems\n  to have stopped since Microsoft pulled their support.\n\nRuby implementations may have their own release version numbers, but they always\ntarget a specific version of MRI for compatibility. Many implementations have\nthe ability to enter different modes (for example, 1.8 or 1.9 mode) to specify\nwhich MRI version to target.\n\n## Ruby Spec\n\nMost Ruby implementations rely heavily on [Ruby Spec](https://github.com/ruby/spec). Ruby\nhas no official specification, so the community has written executable specs in\nRuby to test their implementations' compatibility with MRI.\n\n## RubyGems\n\n[RubyGems](http://rubygems.org/) is a community-run package manager for Ruby.\nRubyGems ships with Ruby, so there is no need to download it separately.\n\nRuby packages are called \"gems,\" and they can be hosted by the community at\nRubyGems.org. Each gem contains its source code and some metadata, including\nthings like version, dependencies, author(s), and license(s).\n\n## Bundler\n\n[Bundler](http://bundler.io/) is a gem dependency resolver. It uses a project's\nGemfile to find dependencies, and then fetches those dependencies' dependencies\nrecursively. It does this until all dependencies are resolved and downloaded, or\nit will stop if a conflict has been found.\n\nBundler will raise an error if it finds conflicting dependencies. For example,\nif gem A requires version 3 or greater of gem Z, but gem B requires version 2,\nBundler will notify you of the conflict. This becomes extremely helpful as many\ngems refer to other gems (which refer to other gems), which can form a large\ndependency graph to resolve.\n\n# Testing\n\nTesting is a large part of Ruby culture. Ruby comes with its own Unit-style\ntesting framework called minitest (Or TestUnit for Ruby version 1.8.x). There\nare many testing libraries with different goals.\n\n* [TestUnit](http://ruby-doc.org/stdlib-1.8.7/libdoc/test/unit/rdoc/Test/Unit.html) - Ruby 1.8's built-in \"Unit-style\" testing framework\n* [minitest](http://ruby-doc.org/stdlib-2.0.0/libdoc/minitest/rdoc/MiniTest.html) - Ruby 1.9/2.0's built-in testing framework\n* [RSpec](http://rspec.info/) - A testing framework that focuses on expressivity\n* [Cucumber](http://cukes.info/) - A BDD testing framework that parses Gherkin formatted tests\n\n## Be Nice\n\nThe Ruby community takes pride in being an open, diverse, welcoming community.\nMatz himself is extremely friendly, and the generosity of rubyists on the whole\nis amazing.\n"
        },
        {
          "name": "ruby.md",
          "type": "blob",
          "size": 16.4794921875,
          "content": "---\nname: Ruby\nfilename: learnruby.rb\ncontributors:\n  - [\"David Underwood\", \"http://theflyingdeveloper.com\"]\n  - [\"Joel Walden\", \"http://joelwalden.net\"]\n  - [\"Luke Holder\", \"http://twitter.com/lukeholder\"]\n  - [\"Tristan Hume\", \"http://thume.ca/\"]\n  - [\"Nick LaMuro\", \"https://github.com/NickLaMuro\"]\n  - [\"Marcos Brizeno\", \"http://www.about.me/marcosbrizeno\"]\n  - [\"Ariel Krakowski\", \"http://www.learneroo.com\"]\n  - [\"Dzianis Dashkevich\", \"https://github.com/dskecse\"]\n  - [\"Levi Bostian\", \"https://github.com/levibostian\"]\n  - [\"Rahil Momin\", \"https://github.com/iamrahil\"]\n  - [\"Gabriel Halley\", \"https://github.com/ghalley\"]\n  - [\"Persa Zula\", \"http://persazula.com\"]\n  - [\"Jake Faris\", \"https://github.com/farisj\"]\n  - [\"Corey Ward\", \"https://github.com/coreyward\"]\n  - [\"Jannik Siebert\", \"https://github.com/janniks\"]\n  - [\"Keith Miyake\", \"https://github.com/kaymmm\"]\n---\n\n```ruby\n# This is a comment\n\n=begin\nThis is a multi-line comment.\nThe beginning line must start with \"=begin\"\nand the ending line must start with \"=end\".\n\nYou can do this, or start each line in\na multi-line comment with the # character.\n=end\n\n# In Ruby, (almost) everything is an object.\n# This includes numbers...\n3.class #=> Integer\n\n# ...and strings...\n\"Hello\".class #=> String\n\n# ...and even methods!\n\"Hello\".method(:class).class #=> Method\n\n# Some basic arithmetic\n1 + 1 #=> 2\n8 - 1 #=> 7\n10 * 2 #=> 20\n35 / 5 #=> 7\n2 ** 5 #=> 32\n5 % 3 #=> 2\n\n# Bitwise operators\n3 & 5 #=> 1\n3 | 5 #=> 7\n3 ^ 5 #=> 6\n\n# Arithmetic is just syntactic sugar\n# for calling a method on an object\n1.+(3) #=> 4\n10.* 5 #=> 50\n100.methods.include?(:/) #=> true\n\n# Special values are objects\nnil # equivalent to null in other languages\ntrue # truth\nfalse # falsehood\n\nnil.class #=> NilClass\ntrue.class #=> TrueClass\nfalse.class #=> FalseClass\n\n# Equality\n1 == 1 #=> true\n2 == 1 #=> false\n\n# Inequality\n1 != 1 #=> false\n2 != 1 #=> true\n\n# Apart from false itself, nil is the only other 'falsey' value\n\n!!nil   #=> false\n!!false #=> false\n!!0     #=> true\n!!\"\"    #=> true\n\n# More comparisons\n1 < 10 #=> true\n1 > 10 #=> false\n2 <= 2 #=> true\n2 >= 2 #=> true\n\n# Combined comparison operator (returns `1` when the first argument is greater,\n# `-1` when the second argument is greater, and `0` otherwise)\n1 <=> 10 #=> -1 (1 < 10)\n10 <=> 1 #=> 1 (10 > 1)\n1 <=> 1 #=> 0 (1 == 1)\n\n# Logical operators\ntrue && false #=> false\ntrue || false #=> true\n\n# There are alternate versions of the logical operators with much lower\n# precedence. These are meant to be used as flow-control constructs to chain\n# statements together until one of them returns true or false.\n\n# `do_something_else` only called if `do_something` succeeds.\ndo_something() and do_something_else()\n# `log_error` only called if `do_something` fails.\ndo_something() or log_error()\n\n# String interpolation\n\nplaceholder = 'use string interpolation'\n\"I can #{placeholder} when using double quoted strings\"\n#=> \"I can use string interpolation when using double quoted strings\"\n\n# You can combine strings using `+`, but not with other types\n'hello ' + 'world'  #=> \"hello world\"\n'hello ' + 3 #=> TypeError: can't convert Fixnum into String\n'hello ' + 3.to_s #=> \"hello 3\"\n\"hello #{3}\" #=> \"hello 3\"\n\n# ...or combine strings and operators\n'hello ' * 3 #=> \"hello hello hello \"\n\n# ...or append to string\n'hello' << ' world' #=> \"hello world\"\n\n# You can print to the output with a newline at the end\nputs \"I'm printing!\"\n#=> I'm printing!\n#=> nil\n\n# ...or print to the output without a newline\nprint \"I'm printing!\"\n#=> \"I'm printing!\" => nil\n\n# Variables\nx = 25 #=> 25\nx #=> 25\n\n# Note that assignment returns the value assigned.\n# This means you can do multiple assignment.\n\nx = y = 10 #=> 10\nx #=> 10\ny #=> 10\n\n# By convention, use snake_case for variable names.\nsnake_case = true\n\n# Use descriptive variable names\npath_to_project_root = '/good/name/'\nm = '/bad/name/'\n\n# Symbols are immutable, reusable constants represented internally by an\n# integer value. They're often used instead of strings to efficiently convey\n# specific, meaningful values.\n\n:pending.class #=> Symbol\n\nstatus = :pending\n\nstatus == :pending #=> true\n\nstatus == 'pending' #=> false\n\nstatus == :approved #=> false\n\n# Strings can be converted into symbols and vice versa.\nstatus.to_s #=> \"pending\"\n\"argon\".to_sym #=> :argon\n\n# Arrays\n\n# This is an array.\narray = [1, 2, 3, 4, 5] #=> [1, 2, 3, 4, 5]\n\n# Arrays can contain different types of items.\n[1, 'hello', false] #=> [1, \"hello\", false]\n\n# You might prefer %w instead of quotes\n%w[foo bar baz] #=> [\"foo\", \"bar\", \"baz\"]\n\n# Arrays can be indexed.\n# From the front...\narray[0] #=> 1\narray.first #=> 1\narray[12] #=> nil\n\n# ...or from the back...\narray[-1] #=> 5\narray.last #=> 5\n\n# ...or with a start index and length...\narray[2, 3] #=> [3, 4, 5]\n\n# ...or with a range...\narray[1..3] #=> [2, 3, 4]\n\n# You can reverse an Array.\n# Return a new array with reversed values\n[1,2,3].reverse #=> [3,2,1]\n# Reverse an array in place to update variable with reversed values\na = [1,2,3]\na.reverse! #=> a==[3,2,1] because of the bang ('!') call to reverse\n\n# Like arithmetic, [var] access is just syntactic sugar\n# for calling a method '[]' on an object.\narray.[] 0 #=> 1\narray.[] 12 #=> nil\n\n# You can add to an array...\narray << 6 #=> [1, 2, 3, 4, 5, 6]\n# Or like this\narray.push(6) #=> [1, 2, 3, 4, 5, 6]\n\n# ...and check if an item exists in an array\narray.include?(1) #=> true\n\n# Hashes are Ruby's primary dictionary with key/value pairs.\n# Hashes are denoted with curly braces.\nhash = { 'color' => 'green', 'number' => 5 }\n\nhash.keys #=> ['color', 'number']\n\n# Hashes can be quickly looked up by key.\nhash['color'] #=> \"green\"\nhash['number'] #=> 5\n\n# Asking a hash for a key that doesn't exist returns nil.\nhash['nothing here'] #=> nil\n\n# When using symbols for keys in a hash, you can use an alternate syntax.\n\nhash = { :defcon => 3, :action => true }\nhash.keys #=> [:defcon, :action]\n\nhash = { defcon: 3, action: true }\nhash.keys #=> [:defcon, :action]\n\n# Check existence of keys and values in hash\nhash.key?(:defcon) #=> true\nhash.value?(3) #=> true\n\n# Tip: Both Arrays and Hashes are Enumerable!\n# They share a lot of useful methods such as each, map, count, and more.\n\n# Control structures\n\n# Conditionals\nif true\n  'if statement'\nelsif false\n  'else if, optional'\nelse\n  'else, also optional'\nend\n\n# If a condition controls invocation of a single statement rather than a block\n# of code you can use postfix-if notation\nwarnings = ['Patronimic is missing', 'Address too short']\nputs(\"Some warnings occurred:\\n\" + warnings.join(\"\\n\"))  if !warnings.empty?\n\n# Rephrase condition if `unless` sounds better than `if`\nputs(\"Some warnings occurred:\\n\" + warnings.join(\"\\n\"))  unless warnings.empty?\n\n# Loops\n# In Ruby, traditional `for` loops aren't very common. Instead, these\n# basic loops are implemented using enumerable, which hinges on `each`.\n(1..5).each do |counter|\n  puts \"iteration #{counter}\"\nend\n\n# Which is roughly equivalent to the following, which is unusual to see in Ruby.\nfor counter in 1..5\n  puts \"iteration #{counter}\"\nend\n\n# The `do |variable| ... end` construct above is called a 'block'. Blocks are\n# similar to lambdas, anonymous functions or closures in other programming\n# languages. They can be passed around as objects, called, or attached as\n# methods.\n#\n# The 'each' method of a range runs the block once for each element of the range.\n# The block is passed a counter as a parameter.\n\n# You can also surround blocks in curly brackets.\n(1..5).each { |counter| puts \"iteration #{counter}\" }\n\n# The contents of data structures can also be iterated using each.\narray.each do |element|\n  puts \"#{element} is part of the array\"\nend\nhash.each do |key, value|\n  puts \"#{key} is #{value}\"\nend\n\n# If you still need an index you can use 'each_with_index' and define an index\n# variable.\narray.each_with_index do |element, index|\n  puts \"#{element} is number #{index} in the array\"\nend\n\ncounter = 1\nwhile counter <= 5 do\n  puts \"iteration #{counter}\"\n  counter += 1\nend\n#=> iteration 1\n#=> iteration 2\n#=> iteration 3\n#=> iteration 4\n#=> iteration 5\n\n# There are a bunch of other helpful looping functions in Ruby.\n# For example: 'map', 'reduce', 'inject', the list goes on.\n# Map, for instance, takes the array it's looping over, does something\n# to it as defined in your block, and returns an entirely new array.\narray = [1,2,3,4,5]\ndoubled = array.map do |element|\n  element * 2\nend\nputs doubled\n#=> [2,4,6,8,10]\nputs array\n#=> [1,2,3,4,5]\n\n# another useful syntax is .map(&:method)\na = [\"FOO\", \"BAR\", \"BAZ\"]\na.map { |s| s.downcase } #=> [\"foo\", \"bar\", \"baz\"]\na.map(&:downcase) #=> [\"foo\", \"bar\", \"baz\"]\n\n# Case construct\ngrade = 'B'\n\ncase grade\nwhen 'A'\n  puts 'Way to go kiddo'\nwhen 'B'\n  puts 'Better luck next time'\nwhen 'C'\n  puts 'You can do better'\nwhen 'D'\n  puts 'Scraping through'\nwhen 'F'\n  puts 'You failed!'\nelse\n  puts 'Alternative grading system, eh?'\nend\n#=> \"Better luck next time\"\n\n# Cases can also use ranges\ngrade = 82\ncase grade\nwhen 90..100\n  puts 'Hooray!'\nwhen 80...90\n  puts 'OK job'\nelse\n  puts 'You failed!'\nend\n#=> \"OK job\"\n\n# Exception handling\nbegin\n  # Code here that might raise an exception\n  raise NoMemoryError, 'You ran out of memory.'\nrescue NoMemoryError => exception_variable\n  puts 'NoMemoryError was raised', exception_variable\nrescue RuntimeError => other_exception_variable\n  puts 'RuntimeError was raised now'\nelse\n  puts 'This runs if no exceptions were thrown at all'\nensure\n  puts 'This code always runs no matter what'\nend\n\n# Methods\n\ndef double(x)\n  x * 2\nend\n\n# Methods (and blocks) implicitly return the value of the last statement.\ndouble(2) #=> 4\n\n# Parentheses are optional where the interpretation is unambiguous.\ndouble 3 #=> 6\n\ndouble double 3 #=> 12\n\ndef sum(x, y)\n  x + y\nend\n\n# Method arguments are separated by a comma.\nsum 3, 4 #=> 7\n\nsum sum(3, 4), 5 #=> 12\n\n# yield\n# All methods have an implicit, optional block parameter.\n# It can be called with the 'yield' keyword.\ndef surround\n  puts '{'\n  yield\n  puts '}'\nend\n\nsurround { puts 'hello world' }\n\n#=> {\n#=> hello world\n#=> }\n\n# Blocks can be converted into a 'proc' object, which wraps the block and allows\n# it to be passed to another method, bound to a different scope, or manipulated\n# otherwise. This is most common in method parameter lists, where you frequently\n# see a trailing '&block' parameter that will accept the block, if one is given,\n# and convert it to a 'Proc'. The naming here is convention; it would work just\n# as well with '&pineapple'.\ndef guests(&block)\n  block.class #=> Proc\n  block.call(4)\nend\n\n# The 'call' method on the Proc is similar to calling 'yield' when a block is\n# present. The arguments passed to 'call' will be forwarded to the block as\n# arguments.\n\nguests { |n| \"You have #{n} guests.\" }\n# => \"You have 4 guests.\"\n\n# You can pass a list of arguments, which will be converted into an array.\n# That's what splat operator (\"*\") is for.\ndef guests(*array)\n  array.each { |guest| puts guest }\nend\n\n# There is also the shorthand block syntax. It's most useful when you need\n# to call a simple method on all array items.\nupcased = ['Watch', 'these', 'words', 'get', 'upcased'].map(&:upcase)\nputs upcased\n#=> [\"WATCH\", \"THESE\", \"WORDS\", \"GET\", \"UPCASED\"]\n\nsum = [1, 2, 3, 4, 5].reduce(&:+)\nputs sum\n#=> 15\n\n# Destructuring\n\n# Ruby will automatically destructure arrays on assignment to multiple variables.\na, b, c = [1, 2, 3]\na #=> 1\nb #=> 2\nc #=> 3\n\n# In some cases, you will want to use the splat operator: `*` to prompt destructuring\n# of an array into a list.\nranked_competitors = [\"John\", \"Sally\", \"Dingus\", \"Moe\", \"Marcy\"]\n\ndef best(first, second, third)\n  puts \"Winners are #{first}, #{second}, and #{third}.\"\nend\n\nbest *ranked_competitors.first(3) #=> Winners are John, Sally, and Dingus.\n\n# The splat operator can also be used in parameters.\ndef best(first, second, third, *others)\n  puts \"Winners are #{first}, #{second}, and #{third}.\"\n  puts \"There were #{others.count} other participants.\"\nend\n\nbest *ranked_competitors\n#=> Winners are John, Sally, and Dingus.\n#=> There were 2 other participants.\n\n# By convention, all methods that return booleans end with a question mark.\n5.even? #=> false\n5.odd? #=> true\n\n# By convention, if a method name ends with an exclamation mark, it does\n# something destructive like mutate the receiver. Many methods have a ! version\n# to make a change, and a non-! version to just return a new changed version.\ncompany_name = \"Dunder Mifflin\"\ncompany_name.upcase #=> \"DUNDER MIFFLIN\"\ncompany_name #=> \"Dunder Mifflin\"\n# We're mutating company_name this time.\ncompany_name.upcase! #=> \"DUNDER MIFFLIN\"\ncompany_name #=> \"DUNDER MIFFLIN\"\n\n# Classes\n\n# You can define a class with the 'class' keyword.\nclass Human\n\n  # A class variable. It is shared by all instances of this class.\n  @@species = 'H. sapiens'\n\n  # Basic initializer\n  def initialize(name, age = 0)\n    # Assign the argument to the 'name' instance variable for the instance.\n    @name = name\n    # If no age given, we will fall back to the default in the arguments list.\n    @age = age\n  end\n\n  # Basic setter method\n  def name=(name)\n    @name = name\n  end\n\n  # Basic getter method\n  def name\n    @name\n  end\n\n  # The above functionality can be encapsulated using the attr_accessor method\n  # as follows.\n  attr_accessor :name\n\n  # Getter/setter methods can also be created individually like this.\n  attr_reader :name\n  attr_writer :name\n\n  # A class method uses self to distinguish from instance methods.\n  # It can only be called on the class, not an instance.\n  def self.say(msg)\n    puts msg\n  end\n\n  def species\n    @@species\n  end\nend\n\n# Instantiating of a class\njim = Human.new('Jim Halpert')\ndwight = Human.new('Dwight K. Schrute')\n\n# You can call the methods of the generated object.\njim.species #=> \"H. sapiens\"\njim.name #=> \"Jim Halpert\"\njim.name = \"Jim Halpert II\" #=> \"Jim Halpert II\"\njim.name #=> \"Jim Halpert II\"\ndwight.species #=> \"H. sapiens\"\ndwight.name #=> \"Dwight K. Schrute\"\n\n# Calling of a class method\nHuman.say('Hi') #=> \"Hi\"\n\n# Variable's scopes are defined by the way we name them.\n# Variables that start with $ have global scope.\n$var = \"I'm a global var\"\ndefined? $var #=> \"global-variable\"\n\n# Variables that start with @ have instance scope.\n@var = \"I'm an instance var\"\ndefined? @var #=> \"instance-variable\"\n\n# Variables that start with @@ have class scope.\n@@var = \"I'm a class var\"\ndefined? @@var #=> \"class variable\"\n\n# Variables that start with a capital letter are constants.\nVar = \"I'm a constant\"\ndefined? Var #=> \"constant\"\n\n# Class is also an object in ruby. So a class can have instance variables.\n# A class variable is shared among the class and all of its descendants.\n\n# Base class\nclass Human\n  @@foo = 0\n\n  def self.foo\n    @@foo\n  end\n\n  def self.foo=(value)\n    @@foo = value\n  end\nend\n\n# Derived class\nclass Worker < Human\nend\n\nHuman.foo #=> 0\nWorker.foo #=> 0\n\nHuman.foo = 2\nWorker.foo #=> 2\n\n# A class instance variable is not shared by the class's descendants.\nclass Human\n  @bar = 0\n\n  def self.bar\n    @bar\n  end\n\n  def self.bar=(value)\n    @bar = value\n  end\nend\n\nclass Doctor < Human\nend\n\nHuman.bar #=> 0\nDoctor.bar #=> nil\n\nmodule ModuleExample\n  def foo\n    'foo'\n  end\nend\n\n# Including modules binds their methods to the class instances.\n# Extending modules binds their methods to the class itself.\nclass Person\n  include ModuleExample\nend\n\nclass Book\n  extend ModuleExample\nend\n\nPerson.foo     #=> NoMethodError: undefined method `foo' for Person:Class\nPerson.new.foo #=> \"foo\"\nBook.foo       #=> \"foo\"\nBook.new.foo   #=> NoMethodError: undefined method `foo'\n\n# Callbacks are executed when including and extending a module\nmodule ConcernExample\n  def self.included(base)\n    base.extend(ClassMethods)\n    base.send(:include, InstanceMethods)\n  end\n\n  module ClassMethods\n    def bar\n      'bar'\n    end\n  end\n\n  module InstanceMethods\n    def qux\n      'qux'\n    end\n  end\nend\n\nclass Something\n  include ConcernExample\nend\n\nSomething.bar     #=> \"bar\"\nSomething.qux     #=> NoMethodError: undefined method `qux'\nSomething.new.bar #=> NoMethodError: undefined method `bar'\nSomething.new.qux #=> \"qux\"\n```\n\n## Additional resources\n\n- [An Interactive Tutorial for Ruby](https://rubymonk.com/) - Learn Ruby through a series of interactive tutorials.\n- [Official Documentation](http://ruby-doc.org/core)\n- [Ruby from other languages](https://www.ruby-lang.org/en/documentation/ruby-from-other-languages/)\n- [Programming Ruby](http://www.amazon.com/Programming-Ruby-1-9-2-0-Programmers/dp/1937785491/) - An older [free edition](http://ruby-doc.com/docs/ProgrammingRuby/) is available online.\n- [Ruby Style Guide](https://github.com/bbatsov/ruby-style-guide) - A community-driven Ruby coding style guide.\n- [Try Ruby](https://try.ruby-lang.org/) - Learn the basic of Ruby programming language, interactive in the browser.\n"
        },
        {
          "name": "rust.md",
          "type": "blob",
          "size": 10.5302734375,
          "content": "---\nname: Rust\ncontributors:\n    - [\"P1start\", \"http://p1start.github.io/\"]\nfilename: learnrust.rs\n---\n\nRust is a programming language developed by Mozilla Research.\nRust combines low-level control over performance with high-level convenience and\nsafety guarantees.\n\nIt achieves these goals without requiring a garbage collector or runtime, making\nit possible to use Rust libraries as a \"drop-in replacement\" for C.\n\nRust’s first release, 0.1, occurred in January 2012, and for 3 years development\nmoved so quickly that until recently the use of stable releases was discouraged\nand instead the general advice was to use nightly builds.\n\nOn May 15th 2015, Rust 1.0 was released with a complete guarantee of backward\ncompatibility. Improvements to compile times and other aspects of the compiler are\ncurrently available in the nightly builds. Rust has adopted a train-based release\nmodel with regular releases every six weeks. Rust 1.1 beta was made available at\nthe same time of the release of Rust 1.0.\n\nAlthough Rust is a relatively low-level language, it has some functional\nconcepts that are generally found in higher-level languages. This makes\nRust not only fast, but also easy and efficient to code in.\n\n```rust\n// This is a comment. Line comments look like this...\n// and extend multiple lines like this.\n\n/* Block comments\n  /* can be nested. */ */\n\n/// Documentation comments look like this and support markdown notation.\n/// # Examples\n///\n/// ```\n/// let five = 5\n/// ```\n\n///////////////\n// 1. Basics //\n///////////////\n\n#[allow(dead_code)]\n// Functions\n// `i32` is the type for 32-bit signed integers\nfn add2(x: i32, y: i32) -> i32 {\n    // Implicit return (no semicolon)\n    x + y\n}\n\n#[allow(unused_variables)]\n#[allow(unused_assignments)]\n#[allow(dead_code)]\n// Main function\nfn main() {\n    // Numbers //\n\n    // Immutable bindings\n    let x: i32 = 1;\n\n    // Integer/float suffixes\n    let y: i32 = 13i32;\n    let f: f64 = 1.3f64;\n\n    // Type inference\n    // Most of the time, the Rust compiler can infer what type a variable is, so\n    // you don’t have to write an explicit type annotation.\n    // Throughout this tutorial, types are explicitly annotated in many places,\n    // but only for demonstrative purposes. Type inference can handle this for\n    // you most of the time.\n    let implicit_x = 1;\n    let implicit_f = 1.3;\n\n    // Arithmetic\n    let sum = x + y + 13;\n\n    // Mutable variable\n    let mut mutable = 1;\n    mutable = 4;\n    mutable += 2;\n\n    // Strings //\n\n    // String literals\n    let x: &str = \"hello world!\";\n\n    // Printing\n    println!(\"{} {}\", f, x); // 1.3 hello world!\n\n    // A `String` – a heap-allocated string\n    // Stored as a `Vec<u8>` and always holds a valid UTF-8 sequence, \n    // which is not null terminated.\n    let s: String = \"hello world\".to_string();\n\n    // A string slice – an immutable view into another string\n    // This is basically an immutable pointer and length of a string – it\n    // doesn’t actually contain the contents of a string, just a pointer to\n    // the beginning and a length of a string buffer,\n    // statically allocated or contained in another object (in this case, `s`).\n    // The string slice is like a view `&[u8]` into `Vec<T>`.\n    let s_slice: &str = &s;\n\n    println!(\"{} {}\", s, s_slice); // hello world hello world\n\n    // Vectors/arrays //\n\n    // A fixed-size array\n    let four_ints: [i32; 4] = [1, 2, 3, 4];\n\n    // A dynamic array (vector)\n    let mut vector: Vec<i32> = vec![1, 2, 3, 4];\n    vector.push(5);\n\n    // A slice – an immutable view into a vector or array\n    // This is much like a string slice, but for vectors\n    let slice: &[i32] = &vector;\n\n    // Use `{:?}` to print something debug-style\n    println!(\"{:?} {:?}\", vector, slice); // [1, 2, 3, 4, 5] [1, 2, 3, 4, 5]\n\n    // Tuples //\n\n    // A tuple is a fixed-size set of values of possibly different types\n    let x: (i32, &str, f64) = (1, \"hello\", 3.4);\n\n    // Destructuring `let`\n    let (a, b, c) = x;\n    println!(\"{} {} {}\", a, b, c); // 1 hello 3.4\n\n    // Indexing\n    println!(\"{}\", x.1); // hello\n\n    //////////////\n    // 2. Types //\n    //////////////\n\n    // Struct\n    struct Point {\n        x: i32,\n        y: i32,\n    }\n\n    let origin: Point = Point { x: 0, y: 0 };\n\n    // A struct with unnamed fields, called a ‘tuple struct’\n    struct Point2(i32, i32);\n\n    let origin2 = Point2(0, 0);\n\n    // Basic C-like enum\n    enum Direction {\n        Left,\n        Right,\n        Up,\n        Down,\n    }\n\n    let up = Direction::Up;\n\n    // Enum with fields\n    // If you want to make something optional, the standard\n    // library has `Option`\n    enum OptionalI32 {\n        AnI32(i32),\n        Nothing,\n    }\n\n    let two: OptionalI32 = OptionalI32::AnI32(2);\n    let nothing = OptionalI32::Nothing;\n\n    // Generics //\n\n    struct Foo<T> { bar: T }\n\n    // This is defined in the standard library as `Option`\n    // `Option` is used in place of where a null pointer\n    // would normally be used.\n    enum Optional<T> {\n        SomeVal(T),\n        NoVal,\n    }\n\n    // Methods //\n\n    impl<T> Foo<T> {\n        // Methods take an explicit `self` parameter\n        fn bar(&self) -> &T { // self is borrowed\n            &self.bar\n        }\n        fn bar_mut(&mut self) -> &mut T { // self is mutably borrowed\n            &mut self.bar\n        }\n        fn into_bar(self) -> T { // here self is consumed\n            self.bar\n        }\n    }\n\n    let a_foo = Foo { bar: 1 };\n    println!(\"{}\", a_foo.bar()); // 1\n\n    // Traits (known as interfaces or typeclasses in other languages) //\n\n    trait Frobnicate<T> {\n        fn frobnicate(self) -> Option<T>;\n    }\n\n    impl<T> Frobnicate<T> for Foo<T> {\n        fn frobnicate(self) -> Option<T> {\n            Some(self.bar)\n        }\n    }\n\n    let another_foo = Foo { bar: 1 };\n    println!(\"{:?}\", another_foo.frobnicate()); // Some(1)\n\n    // Function pointer types // \n\n    fn fibonacci(n: u32) -> u32 {\n        match n {\n            0 => 1,\n            1 => 1,\n            _ => fibonacci(n - 1) + fibonacci(n - 2),\n        }\n    }\n\n    type FunctionPointer = fn(u32) -> u32;\n\n    let fib : FunctionPointer = fibonacci;\n    println!(\"Fib: {}\", fib(4)); // 5\n\n    /////////////////////////\n    // 3. Pattern matching //\n    /////////////////////////\n\n    let foo = OptionalI32::AnI32(1);\n    match foo {\n        OptionalI32::AnI32(n) => println!(\"it’s an i32: {}\", n),\n        OptionalI32::Nothing  => println!(\"it’s nothing!\"),\n    }\n\n    // Advanced pattern matching\n    struct FooBar { x: i32, y: OptionalI32 }\n    let bar = FooBar { x: 15, y: OptionalI32::AnI32(32) };\n\n    match bar {\n        FooBar { x: 0, y: OptionalI32::AnI32(0) } =>\n            println!(\"The numbers are zero!\"),\n        FooBar { x: n, y: OptionalI32::AnI32(m) } if n == m =>\n            println!(\"The numbers are the same\"),\n        FooBar { x: n, y: OptionalI32::AnI32(m) } =>\n            println!(\"Different numbers: {} {}\", n, m),\n        FooBar { x: _, y: OptionalI32::Nothing } =>\n            println!(\"The second number is Nothing!\"),\n    }\n\n    /////////////////////\n    // 4. Control flow //\n    /////////////////////\n\n    // `for` loops/iteration\n    let array = [1, 2, 3];\n    for i in array {\n        println!(\"{}\", i);\n    }\n\n    // Ranges\n    for i in 0u32..10 {\n        print!(\"{} \", i);\n    }\n    println!(\"\");\n    // prints `0 1 2 3 4 5 6 7 8 9 `\n\n    // `if`\n    if 1 == 1 {\n        println!(\"Maths is working!\");\n    } else {\n        println!(\"Oh no...\");\n    }\n\n    // `if` as expression\n    let value = if true {\n        \"good\"\n    } else {\n        \"bad\"\n    };\n\n    // `while` loop\n    while 1 == 1 {\n        println!(\"The universe is operating normally.\");\n        // break statement gets out of the while loop.\n        //  It avoids useless iterations.\n        break\n    }\n\n    // Infinite loop\n    loop {\n        println!(\"Hello!\");\n        // break statement gets out of the loop\n        break\n    }\n\n    /////////////////////////////////\n    // 5. Memory safety & pointers //\n    /////////////////////////////////\n\n    // Owned pointer – only one thing can ‘own’ this pointer at a time\n    // This means that when the `Box` leaves its scope, it will be automatically deallocated safely.\n    let mut mine: Box<i32> = Box::new(3);\n    *mine = 5; // dereference\n    // Here, `now_its_mine` takes ownership of `mine`. In other words, `mine` is moved.\n    let mut now_its_mine = mine;\n    *now_its_mine += 2;\n\n    println!(\"{}\", now_its_mine); // 7\n    // println!(\"{}\", mine); // this would not compile because `now_its_mine` now owns the pointer\n\n    // Reference – an immutable pointer that refers to other data\n    // When a reference is taken to a value, we say that the value has been ‘borrowed’.\n    // While a value is borrowed immutably, it cannot be mutated or moved.\n    // A borrow is active until the last use of the borrowing variable.\n    let mut var = 4;\n    var = 3;\n    let ref_var: &i32 = &var;\n\n    println!(\"{}\", var); // Unlike `mine`, `var` can still be used\n    println!(\"{}\", *ref_var);\n    // var = 5; // this would not compile because `var` is borrowed\n    // *ref_var = 6; // this would not either, because `ref_var` is an immutable reference\n    ref_var; // no-op, but counts as a use and keeps the borrow active\n    var = 2; // ref_var is no longer used after the line above, so the borrow has ended\n\n    // Mutable reference\n    // While a value is mutably borrowed, it cannot be accessed at all.\n    let mut var2 = 4;\n    let ref_var2: &mut i32 = &mut var2;\n    *ref_var2 += 2;         // '*' is used to point to the mutably borrowed var2\n\n    println!(\"{}\", *ref_var2); // 6 , // var2 would not compile.\n    // ref_var2 is of type &mut i32, so stores a reference to an i32, not the value.\n    // var2 = 2; // this would not compile because `var2` is borrowed.\n    ref_var2; // no-op, but counts as a use and keeps the borrow active until here\n}\n```\n\n## Further reading\n\nFor a deeper-yet-still-fast explanation into Rust and its symbols/keywords, the\n[half-hour to learn Rust](https://fasterthanli.me/articles/a-half-hour-to-learn-rust)\narticle by Fasterthanlime explains (almost) everything in a clear and concise way!\n\nThere’s a lot more to Rust—this is just the basics of Rust so you can understand\nthe most important things. To learn more about Rust, read [The Rust Programming\nLanguage](http://doc.rust-lang.org/book/index.html) and check out the\n[/r/rust](http://reddit.com/r/rust) subreddit. The folks on the #rust channel on\nirc.mozilla.org are also always keen to help newcomers.\n\nYou can also try out features of Rust with an online compiler at the official\n[Rust Playground](https://play.rust-lang.org) or on the main\n[Rust website](http://rust-lang.org).\n"
        },
        {
          "name": "sass.md",
          "type": "blob",
          "size": 11.404296875,
          "content": "---\nname: Sass\nfilename: learnsass.scss\ncontributors:\n  - [\"Laura Kyle\", \"https://github.com/LauraNK\"]\n  - [\"Sean Corrales\", \"https://github.com/droidenator\"]\n  - [\"Kyle Mendes\", \"https://github.com/pink401k\"]\n  - [\"Keith Miyake\", \"https://github.com/kaymmm\"]\n---\n\nSass is a CSS extension language that adds features such as variables, nesting, mixins and more.\nSass (and other preprocessors, such as [Less](http://lesscss.org/)) help developers write maintainable and DRY (Don't Repeat Yourself) code.\n\nSass has two different syntax options to choose from. SCSS, which has the same syntax as CSS but with the added features of Sass. Or Sass (the original syntax), which uses indentation rather than curly braces and semicolons.\nThis tutorial is written using SCSS.\n\nIf you're already familiar with CSS3, you'll be able to pick up Sass relatively quickly. It does not provide any new styling properties but rather the tools to write your CSS more efficiently and make maintenance much easier.\n\n```scss\n//Single line comments are removed when Sass is compiled to CSS.\n\n/* Multi line comments are preserved. */\n\n\n\n/* Variables\n============================== */\n\n\n\n/* You can store a CSS value (such as a color) in a variable.\nUse the '$' symbol to create a variable. */\n\n$primary-color: #A3A4FF;\n$secondary-color: #51527F;\n$body-font: 'Roboto', sans-serif;\n\n/* You can use the variables throughout your stylesheet.\nNow if you want to change a color, you only have to make the change once. */\n\nbody {\n\tbackground-color: $primary-color;\n\tcolor: $secondary-color;\n\tfont-family: $body-font;\n}\n\n/* This would compile to: */\nbody {\n\tbackground-color: #A3A4FF;\n\tcolor: #51527F;\n\tfont-family: 'Roboto', sans-serif;\n}\n\n/* This is much more maintainable than having to change the color\neach time it appears throughout your stylesheet. */\n\n\n\n/* Control Directives\n============================== */\n\n/* Sass lets you use @if, @else, @for, @while, and @each to control the\n   compilation of your code to CSS. */\n\n/* @if/@else blocks behave exactly as you might expect */\n\n$debug: true !default;\n\n@mixin debugmode {\n\t@if $debug {\n\t\t@debug \"Debug mode enabled\";\n\n\t\tdisplay: inline-block;\n\t}\n\t@else {\n\t\tdisplay: none;\n\t}\n}\n\n.info {\n\t@include debugmode;\n}\n\n/* If $debug is set to true, .info is displayed; if it's set to false then\n.info is not displayed.\n\nNote: @debug will output debugging information to the command line.\nUseful for checking variables while debugging your SCSS. */\n\n.info {\n\tdisplay: inline-block;\n}\n\n/* @for is a control loop that iterates through a range of values.\nParticularly useful for setting styles on a collection of items.\nThere are two forms, \"through\" and \"to\". The former includes the last value,\nthe latter stops at the last value. */\n\n@for $c from 1 to 4 {\n\tdiv:nth-of-type(#{$c}) {\n\t\tleft: ($c - 1) * 900 / 3;\n\t}\n}\n\n@for $c from 1 through 3 {\n\t.myclass-#{$c} {\n\t\tcolor: rgb($c * 255 / 3, $c * 255 / 3, $c * 255 / 3);\n\t}\n}\n\n/* Will compile to: */\n\ndiv:nth-of-type(1) {\n\tleft: 0;\n}\n\ndiv:nth-of-type(2) {\n\tleft: 300;\n}\n\ndiv:nth-of-type(3) {\n\tleft: 600;\n}\n\n.myclass-1 {\n\tcolor: #555555;\n}\n\n.myclass-2 {\n\tcolor: #aaaaaa;\n}\n\n.myclass-3 {\n\tcolor: white;\n// SASS automatically converts #FFFFFF to white\n}\n\n/* @while is very straightforward: */\n\n$columns: 4;\n$column-width: 80px;\n\n@while $columns > 0 {\n\t.col-#{$columns} {\n\t\twidth: $column-width;\n\t\tleft: $column-width * ($columns - 1);\n\t}\n\n\t$columns: $columns - 1;\n}\n\n/* Will output the following CSS: */\n\n.col-4 {\n\twidth: 80px;\n\tleft: 240px;\n}\n\n.col-3 {\n\twidth: 80px;\n\tleft: 160px;\n}\n\n.col-2 {\n\twidth: 80px;\n\tleft: 80px;\n}\n\n.col-1 {\n\twidth: 80px;\n\tleft: 0px;\n}\n\n/* @each functions like @for, except using a list instead of ordinal values\nNote: you specify lists just like other variables, with spaces as\ndelimiters. */\n\n$social-links: facebook twitter linkedin reddit;\n\n.social-links {\n\t@each $sm in $social-links {\n\t\t.icon-#{$sm} {\n\t\t\tbackground-image: url(\"images/#{$sm}.png\");\n\t\t}\n\t}\n}\n\n/* Which will output: */\n\n.social-links .icon-facebook {\n\tbackground-image: url(\"images/facebook.png\");\n}\n\n.social-links .icon-twitter {\n\tbackground-image: url(\"images/twitter.png\");\n}\n\n.social-links .icon-linkedin {\n\tbackground-image: url(\"images/linkedin.png\");\n}\n\n.social-links .icon-reddit {\n\tbackground-image: url(\"images/reddit.png\");\n}\n\n\n/* Mixins\n==============================*/\n\n/* If you find you are writing the same code for more than one\nelement, you might want to store that code in a mixin.\n\nUse the '@mixin' directive, plus a name for your mixin. */\n\n@mixin center {\n\tdisplay: block;\n\tmargin-left: auto;\n\tmargin-right: auto;\n\tleft: 0;\n\tright: 0;\n}\n\n/* You can use the mixin with '@include' and the mixin name. */\n\ndiv {\n\t@include center;\n\tbackground-color: $primary-color;\n}\n\n/* Which would compile to: */\ndiv {\n\tdisplay: block;\n\tmargin-left: auto;\n\tmargin-right: auto;\n\tleft: 0;\n\tright: 0;\n\tbackground-color: #A3A4FF;\n}\n\n/* You can use mixins to create a shorthand property. */\n\n@mixin size($width, $height) {\n\twidth: $width;\n\theight: $height;\n}\n\n/* Which you can invoke by passing width and height arguments. */\n\n.rectangle {\n\t@include size(100px, 60px);\n}\n\n.square {\n\t@include size(40px, 40px);\n}\n\n/* Compiles to: */\n.rectangle {\n  width: 100px;\n  height: 60px;\n}\n\n.square {\n  width: 40px;\n  height: 40px;\n}\n\n\n\n/* Functions\n============================== */\n\n\n\n/* Sass provides functions that can be used to accomplish a variety of\n   tasks. Consider the following */\n\n/* Functions can be invoked by using their name and passing in the\n   required arguments */\nbody {\n  width: round(10.25px);\n}\n\n.footer {\n  background-color: fade_out(#000000, 0.25);\n}\n\n/* Compiles to: */\n\nbody {\n  width: 10px;\n}\n\n.footer {\n  background-color: rgba(0, 0, 0, 0.75);\n}\n\n/* You may also define your own functions. Functions are very similar to\n   mixins. When trying to choose between a function or a mixin, remember\n   that mixins are best for generating CSS while functions are better for\n   logic that might be used throughout your Sass code. The examples in\n   the 'Math Operators' section are ideal candidates for becoming a reusable\n   function. */\n\n/* This function will take a target size and the parent size and calculate\n   and return the percentage */\n\n@function calculate-percentage($target-size, $parent-size) {\n  @return $target-size / $parent-size * 100%;\n}\n\n$main-content: calculate-percentage(600px, 960px);\n\n.main-content {\n  width: $main-content;\n}\n\n.sidebar {\n  width: calculate-percentage(300px, 960px);\n}\n\n/* Compiles to: */\n\n.main-content {\n  width: 62.5%;\n}\n\n.sidebar {\n  width: 31.25%;\n}\n\n\n\n/* Extend (Inheritance)\n============================== */\n\n\n\n/* Extend is a way to share the properties of one selector with another. */\n\n.display {\n\t@include size(5em, 5em);\n\tborder: 5px solid $secondary-color;\n}\n\n.display-success {\n\t@extend .display;\n\tborder-color: #22df56;\n}\n\n/* Compiles to: */\n.display, .display-success {\n  width: 5em;\n  height: 5em;\n  border: 5px solid #51527F;\n}\n\n.display-success {\n  border-color: #22df56;\n}\n\n/* Extending a CSS statement is preferable to creating a mixin\n   because of the way Sass groups together the classes that all share\n   the same base styling. If this was done with a mixin, the width,\n   height, and border would be duplicated for each statement that\n   called the mixin. While it won't affect your workflow, it will\n   add unnecessary bloat to the files created by the Sass compiler. */\n\n\n\n/* Nesting\n============================== */\n\n\n\n/* Sass allows you to nest selectors within selectors */\n\nul {\n\tlist-style-type: none;\n\tmargin-top: 2em;\n\n\tli {\n\t\tbackground-color: #FF0000;\n\t}\n}\n\n/* '&' will be replaced by the parent selector. */\n/* You can also nest pseudo-classes. */\n/* Keep in mind that over-nesting will make your code less maintainable.\nBest practices recommend going no more than 3 levels deep when nesting.\nFor example: */\n\nul {\n\tlist-style-type: none;\n\tmargin-top: 2em;\n\n\tli {\n\t\tbackground-color: red;\n\n\t\t&:hover {\n\t\t  background-color: blue;\n\t\t}\n\n\t\ta {\n\t\t  color: white;\n\t\t}\n\t}\n}\n\n/* Compiles to: */\n\nul {\n  list-style-type: none;\n  margin-top: 2em;\n}\n\nul li {\n  background-color: red;\n}\n\nul li:hover {\n  background-color: blue;\n}\n\nul li a {\n  color: white;\n}\n\n\n\n/* Partials and Imports\n============================== */\n\n\n\n/* Sass allows you to create partial files. This can help keep your Sass\n   code modularized. Partial files should begin with an '_', e.g. _reset.css.\n   Partials are not generated into CSS. */\n\n/* Consider the following CSS which we'll put in a file called _reset.css */\n\nhtml,\nbody,\nul,\nol {\n  margin: 0;\n  padding: 0;\n}\n\n/* Sass offers @import which can be used to import partials into a file.\n   This differs from the traditional CSS @import statement which makes\n   another HTTP request to fetch the imported file. Sass takes the\n   imported file and combines it with the compiled code. */\n\n@import 'reset';\n\nbody {\n  font-size: 16px;\n  font-family: Helvetica, Arial, Sans-serif;\n}\n\n/* Compiles to: */\n\nhtml, body, ul, ol {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-size: 16px;\n  font-family: Helvetica, Arial, Sans-serif;\n}\n\n\n\n/* Placeholder Selectors\n============================== */\n\n\n\n/* Placeholders are useful when creating a CSS statement to extend. If you\n   wanted to create a CSS statement that was exclusively used with @extend,\n   you can do so using a placeholder. Placeholders begin with a '%' instead\n   of '.' or '#'. Placeholders will not appear in the compiled CSS. */\n\n%content-window {\n  font-size: 14px;\n  padding: 10px;\n  color: #000;\n  border-radius: 4px;\n}\n\n.message-window {\n  @extend %content-window;\n  background-color: #0000ff;\n}\n\n/* Compiles to: */\n\n.message-window {\n  font-size: 14px;\n  padding: 10px;\n  color: #000;\n  border-radius: 4px;\n}\n\n.message-window {\n  background-color: #0000ff;\n}\n\n\n\n/* Math Operations\n============================== */\n\n\n\n/* Sass provides the following operators: +, -, *, /, and %. These can\n   be useful for calculating values directly in your Sass files instead\n   of using values that you've already calculated by hand. Below is an example\n   of a setting up a simple two column design. */\n\n$content-area: 960px;\n$main-content: 600px;\n$sidebar-content: 300px;\n\n$main-size: $main-content / $content-area * 100%;\n$sidebar-size: $sidebar-content / $content-area * 100%;\n$gutter: 100% - ($main-size + $sidebar-size);\n\nbody {\n  width: 100%;\n}\n\n.main-content {\n  width: $main-size;\n}\n\n.sidebar {\n  width: $sidebar-size;\n}\n\n.gutter {\n  width: $gutter;\n}\n\n/* Compiles to: */\n\nbody {\n  width: 100%;\n}\n\n.main-content {\n  width: 62.5%;\n}\n\n.sidebar {\n  width: 31.25%;\n}\n\n.gutter {\n  width: 6.25%;\n}\n```\n\n## SASS or Sass?\nHave you ever wondered whether Sass is an acronym or not? You probably haven't, but I'll tell you anyway. The name of the language is a word, \"Sass\", and not an acronym.\nBecause people were constantly writing it as \"SASS\", the creator of the language jokingly called it \"Syntactically Awesome StyleSheets\".\n\n\n## Practice Sass\nIf you want to play with Sass in your browser, check out [SassMeister](http://sassmeister.com/).\nYou can use either syntax, just go into the settings and select either Sass or SCSS.\n\n\n## Compatibility\nSass can be used in any project as long as you have a program to compile it into CSS. You'll want to verify that the CSS you're using is compatible with your target browsers.\n\n[QuirksMode CSS](http://www.quirksmode.org/css/) and [CanIUse](http://caniuse.com) are great resources for checking compatibility.\n\n\n## Further reading\n* [Official Documentation](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)\n* [The Sass Way](http://thesassway.com/) provides tutorials (beginner-advanced) and articles.\n"
        },
        {
          "name": "scala.md",
          "type": "blob",
          "size": 23.3486328125,
          "content": "---\nname: Scala\nfilename: learnscala.scala\ncontributors:\n    - [\"George Petrov\", \"http://github.com/petrovg\"]\n    - [\"Dominic Bou-Samra\", \"http://dbousamra.github.com\"]\n    - [\"Geoff Liu\", \"http://geoffliu.me\"]\n    - [\"Ha-Duong Nguyen\", \"http://reference-error.org\"]\n---\n\nScala - the scalable language\n\n```scala\n/////////////////////////////////////////////////\n// 0. Basics\n/////////////////////////////////////////////////\n/*\n  Setup Scala:\n\n  1) Download Scala - http://www.scala-lang.org/downloads\n  2) Unzip/untar to your favorite location and put the bin subdir in your `PATH` environment variable\n*/\n\n/*\n  Try the REPL\n\n  Scala has a tool called the REPL (Read-Eval-Print Loop) that is analogous to\n  commandline interpreters in many other languages. You may type any Scala\n  expression, and the result will be evaluated and printed.  \n\n  The REPL is a very handy tool to test and verify code.  Use it as you read\n  this tutorial to quickly explore concepts on your own.\n*/\n\n// Start a Scala REPL by running `scala`. You should see the prompt:\n$ scala\nscala>\n\n// By default each expression you type is saved as a new numbered value\nscala> 2 + 2\nres0: Int = 4\n\n// Default values can be reused.  Note the value type displayed in the result..\nscala> res0 + 2\nres1: Int = 6\n\n// Scala is a strongly typed language. You can use the REPL to check the type\n// without evaluating an expression.\nscala> :type (true, 2.0)\n(Boolean, Double)\n\n// REPL sessions can be saved\nscala> :save /sites/repl-test.scala\n\n// Files can be loaded into the REPL\nscala> :load /sites/repl-test.scala\nLoading /sites/repl-test.scala...\nres2: Int = 4\nres3: Int = 6\n\n// You can search your recent history\nscala> :h?\n1 2 + 2\n2 res0 + 2\n3 :save /sites/repl-test.scala\n4 :load /sites/repl-test.scala\n5 :h?\n\n// Now that you know how to play, let's learn a little scala...\n\n/////////////////////////////////////////////////\n// 1. Basics\n/////////////////////////////////////////////////\n\n// Single-line comments start with two forward slashes\n\n/*\n  Multi-line comments, as you can already see from above, look like this.\n*/\n\n// Printing, and forcing a new line on the next print\nprintln(\"Hello world!\")\nprintln(10)\n// Hello world!\n// 10\n\n// Printing, without forcing a new line on next print\nprint(\"Hello world\")\nprint(10)\n// Hello world10\n\n// Declaring values is done using either var or val.\n// val declarations are immutable, whereas vars are mutable. Immutability is\n// a good thing.\nval x = 10 // x is now 10\nx = 20     // error: reassignment to val\nvar y = 10\ny = 20     // y is now 20\n\n/*\n  Scala is a statically typed language, yet note that in the above declarations,\n  we did not specify a type. This is due to a language feature called type\n  inference. In most cases, Scala compiler can guess what the type of a variable\n  is, so you don't have to type it every time. We can explicitly declare the\n  type of a variable like so:\n*/\nval z: Int = 10\nval a: Double = 1.0\n\n// Notice automatic conversion from Int to Double, result is 10.0, not 10\nval b: Double = 10\n\n// Boolean values\ntrue\nfalse\n\n// Boolean operations\n!true         // false\n!false        // true\ntrue == false // false\n10 > 5        // true\n\n// Math is as per usual\n1 + 1   // 2\n2 - 1   // 1\n5 * 3   // 15\n6 / 2   // 3\n6 / 4   // 1\n6.0 / 4 // 1.5\n6 / 4.0 // 1.5\n\n\n// Evaluating an expression in the REPL gives you the type and value of the result\n\n1 + 7\n\n/* The above line results in:\n\n  scala> 1 + 7\n  res29: Int = 8\n\n  This means the result of evaluating 1 + 7 is an object of type Int with a\n  value of 8\n\n  Note that \"res29\" is a sequentially generated variable name to store the\n  results of the expressions you typed, your output may differ.\n*/\n\n\"Scala strings are surrounded by double quotes\"\n'a' // A Scala Char\n// 'Single quote strings don't exist' <= This causes an error\n\n// Strings have the usual Java methods defined on them\n\"hello world\".length\n\"hello world\".substring(2, 6)\n\"hello world\".replace(\"C\", \"3\")\n\n// They also have some extra Scala methods. See also: scala.collection.immutable.StringOps\n\"hello world\".take(5)\n\"hello world\".drop(5)\n\n// String interpolation: notice the prefix \"s\"\nval n = 45\ns\"We have $n apples\" // => \"We have 45 apples\"\n\n// Expressions inside interpolated strings are also possible\nval a = Array(11, 9, 6)\ns\"My second daughter is ${a(0) - a(2)} years old.\"    // => \"My second daughter is 5 years old.\"\ns\"We have double the amount of ${n / 2.0} in apples.\" // => \"We have double the amount of 22.5 in apples.\"\ns\"Power of 2: ${math.pow(2, 2)}\"                      // => \"Power of 2: 4\"\n\n// Formatting with interpolated strings with the prefix \"f\"\nf\"Power of 5: ${math.pow(5, 2)}%1.0f\"         // \"Power of 5: 25\"\nf\"Square root of 122: ${math.sqrt(122)}%1.4f\" // \"Square root of 122: 11.0454\"\n\n// Raw strings, ignoring special characters.\nraw\"New line feed: \\n. Carriage return: \\r.\" // => \"New line feed: \\n. Carriage return: \\r.\"\n\n// Some characters need to be \"escaped\", e.g. a double quote inside a string:\n\"They stood outside the \\\"Rose and Crown\\\"\" // => \"They stood outside the \"Rose and Crown\"\"\n\n// Triple double-quotes let strings span multiple rows and contain quotes\nval html = \"\"\"<form id=\"daform\">\n                <p>Press belo', Joe</p>\n                <input type=\"submit\">\n              </form>\"\"\"\n\n\n/////////////////////////////////////////////////\n// 2. Functions\n/////////////////////////////////////////////////\n\n// Functions are defined like so:\n//\n//   def functionName(args...): ReturnType = { body... }\n//\n// If you come from more traditional languages, notice the omission of the\n// return keyword. In Scala, the last expression in the function block is the\n// return value.\ndef sumOfSquares(x: Int, y: Int): Int = {\n  val x2 = x * x\n  val y2 = y * y\n  x2 + y2\n}\n\n// The { } can be omitted if the function body is a single expression:\ndef sumOfSquaresShort(x: Int, y: Int): Int = x * x + y * y\n\n// Syntax for calling functions is familiar:\nsumOfSquares(3, 4)  // => 25\n\n// You can use parameters names to specify them in different order\ndef subtract(x: Int, y: Int): Int = x - y\n\nsubtract(10, 3)     // => 7\nsubtract(y=10, x=3) // => -7\n\n// In most cases (with recursive functions the most notable exception), function\n// return type can be omitted, and the same type inference we saw with variables\n// will work with function return values:\ndef sq(x: Int) = x * x  // Compiler can guess return type is Int\n\n// Functions can have default parameters:\ndef addWithDefault(x: Int, y: Int = 5) = x + y\naddWithDefault(1, 2) // => 3\naddWithDefault(1)    // => 6\n\n\n// Anonymous functions look like this:\n(x: Int) => x * x\n\n// Unlike defs, even the input type of anonymous functions can be omitted if the\n// context makes it clear. Notice the type \"Int => Int\" which means a function\n// that takes Int and returns Int.\nval sq: Int => Int = x => x * x\n\n// Anonymous functions can be called as usual:\nsq(10)   // => 100\n\n// If each argument in your anonymous function is\n// used only once, Scala gives you an even shorter way to define them. These\n// anonymous functions turn out to be extremely common, as will be obvious in\n// the data structure section.\nval addOne: Int => Int = _ + 1\nval weirdSum: (Int, Int) => Int = (_ * 2 + _ * 3)\n\naddOne(5)      // => 6\nweirdSum(2, 4) // => 16\n\n\n// The return keyword exists in Scala, but it only returns from the inner-most\n// def that surrounds it.\n// WARNING: Using return in Scala is error-prone and should be avoided.\n// It has no effect on anonymous functions. For example here you may expect foo(7) should return 17 but it returns 7:\ndef foo(x: Int): Int = {\n  val anonFunc: Int => Int = { z =>\n    if (z > 5)\n      return z // This line makes z the return value of foo!\n    else\n      z + 2    // This line is the return value of anonFunc\n  }\n  anonFunc(x) + 10  // This line is the return value of foo\n}\n\nfoo(7) // => 7\n\n/////////////////////////////////////////////////\n// 3. Flow Control\n/////////////////////////////////////////////////\n\n1 to 5\nval r = 1 to 5\nr.foreach(println)\n\nr foreach println\n// NB: Scala is quite lenient when it comes to dots and brackets - study the\n// rules separately. This helps write DSLs and APIs that read like English\n\n// Why doesn't `println` need any parameters here?\n// Stay tuned for first-class functions in the Functional Programming section below!\n(5 to 1 by -1) foreach (println)\n\n// A while loop\nvar i = 0\nwhile (i < 10) { println(\"i \" + i); i += 1 }\n\nwhile (i < 10) { println(\"i \" + i); i += 1 }   // Yes, again. What happened? Why?\n\ni    // Show the value of i. Note that while is a loop in the classical sense -\n     // it executes sequentially while changing the loop variable. while is very\n     // fast, but using the combinators and comprehensions above is easier\n     // to understand and parallelize\n\n// A do-while loop\ni = 0\ndo {\n  println(\"i is still less than 10\")\n  i += 1\n} while (i < 10)\n\n// Recursion is the idiomatic way of repeating an action in Scala (as in most\n// other functional languages).\n// Recursive functions need an explicit return type, the compiler can't infer it.\n// Here it's Unit, which is analogous to a `void` return type in Java\ndef showNumbersInRange(a: Int, b: Int): Unit = {\n  print(a)\n  if (a < b)\n    showNumbersInRange(a + 1, b)\n}\nshowNumbersInRange(1, 14)\n\n\n// Conditionals\n\nval x = 10\n\nif (x == 1) println(\"yeah\")\nif (x == 10) println(\"yeah\")\nif (x == 11) println(\"yeah\")\nif (x == 11) println(\"yeah\") else println(\"nay\")\n\nprintln(if (x == 10) \"yeah\" else \"nope\")\nval text = if (x == 10) \"yeah\" else \"nope\"\n\n\n/////////////////////////////////////////////////\n// 4. Data Structures\n/////////////////////////////////////////////////\n\nval a = Array(1, 2, 3, 5, 8, 13)\na(0)     // Int = 1\na(3)     // Int = 5\na(21)    // Throws an exception\n\nval m = Map(\"fork\" -> \"tenedor\", \"spoon\" -> \"cuchara\", \"knife\" -> \"cuchillo\")\nm(\"fork\")         // java.lang.String = tenedor\nm(\"spoon\")        // java.lang.String = cuchara\nm(\"bottle\")       // Throws an exception\n\nval safeM = m.withDefaultValue(\"no lo se\")\nsafeM(\"bottle\")   // java.lang.String = no lo se\n\nval s = Set(1, 3, 7)\ns(0)      // Boolean = false\ns(1)      // Boolean = true\n\n/* Look up the documentation of map here -\n * https://www.scala-lang.org/api/current/scala/collection/immutable/Map.html\n * and make sure you can read it\n */\n\n\n// Tuples\n\n(1, 2)\n\n(4, 3, 2)\n\n(1, 2, \"three\")\n\n(a, 2, \"three\")\n\n// Why have this?\nval divideInts = (x: Int, y: Int) => (x / y, x % y)\n\n// The function divideInts gives you the result and the remainder\ndivideInts(10, 3)    // (Int, Int) = (3,1)\n\n// To access the elements of a tuple, use _._n where n is the 1-based index of\n// the element\nval d = divideInts(10, 3)    // (Int, Int) = (3,1)\n\nd._1    // Int = 3\nd._2    // Int = 1\n\n// Alternatively you can do multiple-variable assignment to tuple, which is more\n// convenient and readable in many cases\nval (div, mod) = divideInts(10, 3)\n\ndiv     // Int = 3\nmod     // Int = 1\n\n\n/////////////////////////////////////////////////\n// 5. Object Oriented Programming\n/////////////////////////////////////////////////\n\n/*\n  Aside: Everything we've done so far in this tutorial has been simple\n  expressions (values, functions, etc). These expressions are fine to type into\n  the command-line interpreter for quick tests, but they cannot exist by\n  themselves in a Scala file. For example, you cannot have just \"val x = 5\" in\n  a Scala file. Instead, the only top-level constructs allowed in Scala are:\n\n  - objects\n  - classes\n  - case classes\n  - traits\n\n  And now we will explain what these are.\n*/\n\n// classes are similar to classes in other languages. Constructor arguments are\n// declared after the class name, and initialization is done in the class body.\nclass Dog(br: String) {\n  // Constructor code here\n  var breed: String = br\n\n  // Define a method called bark, returning a String\n  def bark = \"Woof, woof!\"\n\n  // Values and methods are assumed public. \"protected\" and \"private\" keywords\n  // are also available.\n  private def sleep(hours: Int) =\n    println(s\"I'm sleeping for $hours hours\")\n\n  // Abstract methods are simply methods with no body. If we uncomment the\n  // def line below, class Dog would need to be declared abstract like so:\n  //   abstract class Dog(...) { ... }\n  // def chaseAfter(what: String): String\n}\n\nval mydog = new Dog(\"greyhound\")\nprintln(mydog.breed) // => \"greyhound\"\nprintln(mydog.bark)  // => \"Woof, woof!\"\n\n\n// The \"object\" keyword creates a type AND a singleton instance of it. It is\n// common for Scala classes to have a \"companion object\", where the per-instance\n// behavior is captured in the classes themselves, but behavior related to all\n// instance of that class go in objects. The difference is similar to class\n// methods vs static methods in other languages. Note that objects and classes\n// can have the same name.\nobject Dog {\n  def allKnownBreeds = List(\"pitbull\", \"shepherd\", \"retriever\")\n  def createDog(breed: String) = new Dog(breed)\n}\n\n\n// Case classes are classes that have extra functionality built in. A common\n// question for Scala beginners is when to use classes and when to use case\n// classes. The line is quite fuzzy, but in general, classes tend to focus on\n// encapsulation, polymorphism, and behavior. The values in these classes tend\n// to be private, and only methods are exposed. The primary purpose of case\n// classes is to hold immutable data. They often have few methods, and the\n// methods rarely have side-effects.\ncase class Person(name: String, phoneNumber: String)\n\n// Create a new instance. Note cases classes don't need \"new\"\nval george = Person(\"George\", \"1234\")\nval kate = Person(\"Kate\", \"4567\")\n\n// With case classes, you get a few perks for free, like getters:\ngeorge.phoneNumber  // => \"1234\"\n\n// Per field equality (no need to override .equals)\nPerson(\"George\", \"1234\") == Person(\"Kate\", \"1236\")  // => false\n\n// Easy way to copy\n// otherGeorge == Person(\"George\", \"9876\")\nval otherGeorge = george.copy(phoneNumber = \"9876\")\n\n// And many others. Case classes also get pattern matching for free, see below.\n\n// Traits\n// Similar to Java interfaces, traits define an object type and method\n// signatures. Scala allows partial implementation of those methods.\n// Constructor parameters are not allowed. Traits can inherit from other\n// traits or classes without parameters.\n\ntrait Dog {\n\tdef breed: String\n\tdef color: String\n\tdef bark: Boolean = true\n\tdef bite: Boolean\n}\nclass SaintBernard extends Dog {\n\tval breed = \"Saint Bernard\"\n\tval color = \"brown\"\n\tdef bite = false\n}  \n\nscala> val b = new SaintBernard\nres0: SaintBernard = SaintBernard@3e57cd70  \nscala> b.breed  \nres1: String = Saint Bernard  \nscala> b.bark  \nres2: Boolean = true  \nscala> b.bite  \nres3: Boolean = false  \n\n// A trait can also be used as Mixin. The class \"extends\" the first trait,\n// but the keyword \"with\" can add additional traits.\n\ntrait Bark {\n\tdef bark: String = \"Woof\"\n}\ntrait Dog {\n\tdef breed: String\n\tdef color: String\n}\nclass SaintBernard extends Dog with Bark {\n\tval breed = \"Saint Bernard\"\n\tval color = \"brown\"\n}\n\nscala> val b = new SaintBernard\nb: SaintBernard = SaintBernard@7b69c6ba\nscala> b.bark\nres0: String = Woof\n\n\n/////////////////////////////////////////////////\n// 6. Pattern Matching\n/////////////////////////////////////////////////\n\n// Pattern matching is a powerful and commonly used feature in Scala. Here's how\n// you pattern match a case class. NB: Unlike other languages, Scala cases do\n// not need breaks, fall-through does not happen.\n\ndef matchPerson(person: Person): String = person match {\n  // Then you specify the patterns:\n  case Person(\"George\", number) => \"We found George! His number is \" + number\n  case Person(\"Kate\", number)   => \"We found Kate! Her number is \" + number\n  case Person(name, number)     => \"We matched someone : \" + name + \", phone : \" + number\n}\n\n// Regular expressions are also built in.\n// Create a regex with the `r` method on a string:\nval email = \"(.*)@(.*)\".r\n\n// Pattern matching might look familiar to the switch statements in the C family\n// of languages, but this is much more powerful. In Scala, you can match much\n// more:\ndef matchEverything(obj: Any): String = obj match {\n  // You can match values:\n  case \"Hello world\" => \"Got the string Hello world\"\n\n  // You can match by type:\n  case x: Double => \"Got a Double: \" + x\n\n  // You can specify conditions:\n  case x: Int if x > 10000 => \"Got a pretty big number!\"\n\n  // You can match case classes as before:\n  case Person(name, number) => s\"Got contact info for $name!\"\n\n  // You can match regular expressions:\n  case email(name, domain) => s\"Got email address $name@$domain\"\n\n  // You can match tuples:\n  case (a: Int, b: Double, c: String) => s\"Got a tuple: $a, $b, $c\"\n\n  // You can match data structures:\n  case List(1, b, c) => s\"Got a list with three elements and starts with 1: 1, $b, $c\"\n\n  // You can nest patterns:\n  case List(List((1, 2, \"YAY\"))) => \"Got a list of list of tuple\"\n\n  // Match any case (default) if all previous haven't matched\n  case _ => \"Got unknown object\"\n}\n\n// In fact, you can pattern match any object with an \"unapply\" method. This\n// feature is so powerful that Scala lets you define whole functions as\n// patterns:\nval patternFunc: Person => String = {\n  case Person(\"George\", number) => s\"George's number: $number\"\n  case Person(name, number) => s\"Random person's number: $number\"\n}\n\n\n/////////////////////////////////////////////////\n// 7. Functional Programming\n/////////////////////////////////////////////////\n\n// Scala allows methods and functions to return, or take as parameters, other\n// functions or methods.\n\nval add10: Int => Int = _ + 10 // A function taking an Int and returning an Int\nList(1, 2, 3) map add10 // List(11, 12, 13) - add10 is applied to each element\n\n// Anonymous functions can be used instead of named functions:\nList(1, 2, 3) map (x => x + 10)\n\n// And the underscore symbol, can be used if there is just one argument to the\n// anonymous function. It gets bound as the variable\nList(1, 2, 3) map (_ + 10)\n\n// If the anonymous block AND the function you are applying both take one\n// argument, you can even omit the underscore\nList(\"Dom\", \"Bob\", \"Natalia\") foreach println\n\n\n// Combinators\n// Using `s` from above:\n// val s = Set(1, 3, 7)\n\ns.map(sq)\n\nval sSquared = s.map(sq)\n\nsSquared.filter(_ < 10)\n\nsSquared.reduce (_+_)\n\n// The filter function takes a predicate (a function from A -> Boolean) and\n// selects all elements which satisfy the predicate\nList(1, 2, 3) filter (_ > 2) // List(3)\ncase class Person(name: String, age: Int)\nList(\n  Person(name = \"Dom\", age = 23),\n  Person(name = \"Bob\", age = 30)\n).filter(_.age > 25) // List(Person(\"Bob\", 30))\n\n\n// Certain collections (such as List) in Scala have a `foreach` method,\n// which takes as an argument a type returning Unit - that is, a void method\nval aListOfNumbers = List(1, 2, 3, 4, 10, 20, 100)\naListOfNumbers foreach (x => println(x))\naListOfNumbers foreach println\n\n// For comprehensions\n\nfor { n <- s } yield sq(n)\n\nval nSquared2 = for { n <- s } yield sq(n)\n\nfor { n <- nSquared2 if n < 10 } yield n\n\nfor { n <- s; nSquared = n * n if nSquared < 10} yield nSquared\n\n/* NB Those were not for loops. The semantics of a for loop is 'repeat', whereas\n   a for-comprehension defines a relationship between two sets of data. */\n\n\n/////////////////////////////////////////////////\n// 8. Implicits\n/////////////////////////////////////////////////\n\n/* WARNING WARNING: Implicits are a set of powerful features of Scala, and\n * therefore it is easy to abuse them. Beginners to Scala should resist the\n * temptation to use them until they understand not only how they work, but also\n * best practices around them. We only include this section in the tutorial\n * because they are so commonplace in Scala libraries that it is impossible to\n * do anything meaningful without using a library that has implicits. This is\n * meant for you to understand and work with implicits, not declare your own.\n */\n\n// Any value (vals, functions, objects, etc) can be declared to be implicit by\n// using the, you guessed it, \"implicit\" keyword. Note we are using the Dog\n// class from section 5 in these examples.\nimplicit val myImplicitInt = 100\nimplicit def myImplicitFunction(breed: String) = new Dog(\"Golden \" + breed)\n\n// By itself, implicit keyword doesn't change the behavior of the value, so\n// above values can be used as usual.\nmyImplicitInt + 2                   // => 102\nmyImplicitFunction(\"Pitbull\").breed // => \"Golden Pitbull\"\n\n// The difference is that these values are now eligible to be used when another\n// piece of code \"needs\" an implicit value. One such situation is implicit\n// function arguments:\ndef sendGreetings(toWhom: String)(implicit howMany: Int) =\n  s\"Hello $toWhom, $howMany blessings to you and yours!\"\n\n// If we supply a value for \"howMany\", the function behaves as usual\nsendGreetings(\"John\")(1000)  // => \"Hello John, 1000 blessings to you and yours!\"\n\n// But if we omit the implicit parameter, an implicit value of the same type is\n// used, in this case, \"myImplicitInt\":\nsendGreetings(\"Jane\")  // => \"Hello Jane, 100 blessings to you and yours!\"\n\n// Implicit function parameters enable us to simulate type classes in other\n// functional languages. It is so often used that it gets its own shorthand. The\n// following two lines mean the same thing:\n// def foo[T](implicit c: C[T]) = ...\n// def foo[T : C] = ...\n\n\n// Another situation in which the compiler looks for an implicit is if you have\n//   obj.method(...)\n// but \"obj\" doesn't have \"method\" as a method. In this case, if there is an\n// implicit conversion of type A => B, where A is the type of obj, and B has a\n// method called \"method\", that conversion is applied. So having\n// myImplicitFunction above in scope, we can say:\n\"Retriever\".breed // => \"Golden Retriever\"\n\"Sheperd\".bark    // => \"Woof, woof!\"\n\n// Here the String is first converted to Dog using our function above, and then\n// the appropriate method is called. This is an extremely powerful feature, but\n// again, it is not to be used lightly. In fact, when you defined the implicit\n// function above, your compiler should have given you a warning, that you\n// shouldn't do this unless you really know what you're doing.\n\n\n/////////////////////////////////////////////////\n// 9. Misc\n/////////////////////////////////////////////////\n\n// Importing things\nimport scala.collection.immutable.List\n\n// Import all \"sub packages\"\nimport scala.collection.immutable._\n\n// Import multiple classes in one statement\nimport scala.collection.immutable.{List, Map}\n\n// Rename an import using '=>'\nimport scala.collection.immutable.{List => ImmutableList}\n\n// Import all classes, except some. The following excludes Map and Set:\nimport scala.collection.immutable.{Map => _, Set => _, _}\n\n// Java classes can also be imported. Scala syntax can be used\nimport java.swing.{JFrame, JWindow}\n\n// Your program's entry point is defined in a scala file using an object, with a\n// single method, main:\nobject Application {\n  def main(args: Array[String]): Unit = {\n    // stuff goes here.\n  }\n}\n\n// Files can contain multiple classes and objects. Compile with scalac\n\n\n\n\n// Input and output\n\n// To read a file line by line\nimport scala.io.Source\nfor(line <- Source.fromFile(\"myfile.txt\").getLines())\n  println(line)\n\n// To write a file use Java's PrintWriter\nval writer = new PrintWriter(\"myfile.txt\")\nwriter.write(\"Writing line for line\" + util.Properties.lineSeparator)\nwriter.write(\"Another line here\" + util.Properties.lineSeparator)\nwriter.close()\n```\n\n## Further resources\n\n* [Scala for the impatient](http://horstmann.com/scala/)\n* [Twitter Scala school](http://twitter.github.io/scala_school/)\n* [The scala documentation](http://docs.scala-lang.org/)\n* [Try Scala in your browser](http://scalatutorials.com/tour/)\n* Join the [Scala user group](https://groups.google.com/forum/#!forum/scala-user)\n"
        },
        {
          "name": "sed.md",
          "type": "blob",
          "size": 7.80859375,
          "content": "---\ncategory: tool\nname: sed\nfilename: learnsed.sed\ncontributors:\n     - [\"Diomidis Spinellis\", \"https://www.spinellis.gr\"]\n\n---\n\n__Sed__ is a standard tool on every POSIX-compliant UNIX system.\nIt's like an editor, such as Vim, Visual Studio Code, Atom, or Sublime.\nHowever, rather than typing the commands interactively, you\nprovide them on the command line or in a file.\n\n_Sed_'s advantages over an interactive editor is that it can be easily\nused to automate text processing tasks, and that it can process\nefficiently huge (terabyte-sized) files.\nIt can perform more complex tasks than _grep_ and for many text\nprocessing tasks its commands are much shorter than what you would\nwrite in _awk_, _Perl_, or _Python_.\n\n_Sed_ works by reading a line of text (by default from its standard\ninput, unless some files are specified as arguments), processing\nit with the specified commands, and then outputting the result\non its standard output.\nYou can suppress the default output by specifying the `-n` command-line\nargument.\n\n```sed\n#!/usr/bin/sed -f\n# Files that begin with the above line and are given execute permission\n# can be run as regular scripts.\n\n# Comments are like this.\n\n# Commands consist of a single letter and many can be preceded\n# by a specification of the lines to which they apply.\n\n# Delete the input's third line.\n3d\n\n# The same command specified the command line as an argument to sed:\n# sed 3d\n\n# For many commands the specification can consist of two addresses,\n# which select an inclusive range.\n# Addresses can be specified numerically ($ is the last line) or through\n# regular expressions delimited by /.\n\n# Delete lines 1-10\n1,10d\n\n# Lines can also be specified as regular expressions, delimited by /.\n\n# Delete empty lines.\n/^$/d\n\n# Delete blocks starting with SPOILER-BEGIN and ending with SPOILER-END.\n/SPOILER-BEGIN/,/SPOILER-END/d\n\n# A command without an address is applied to all lines.\n\n# List lines in in a visually unambiguous form (e.g. tab appears as \\t).\nl\n\n# A command prefixed by ! will apply to non-matching lines.\n# Keep only lines starting with a #.\n/^#/!d\n\n# Below are examples of the most often-used commands.\n\n# Substitute the first occurence in a line of John with Mary.\ns/John/Mary/\n\n# Remove all underscore characters (global substitution).\ns/_//g\n\n# Remove all HTML tags.\ns/<[^>]*>//g\n\n# In the replacement string & is the regular expression matched.\n\n# Put each line inside double quotes.\ns/.*/\"&\"/\n\n# In the matched regular expression \\(pattern\\) is used to store\n# a pattern into a buffer.\n# In the replacement string \\1 refers to the first pattern, \\2 to the second\n# and so on. \\u converts the following character to uppercase \\l to lowercase.\n\n# Convert snake_case_identifiers into camelCaseIdentifiers.\ns/_\\(.\\)/\\u\\1/g\n\n\n# The p (print) command is typically used together with the -n\n# command-line option, which disables the print by default functionality.\n# Output all lines between ``` and ```.\n/```/,/```/p\n\n\n# The y command maps characters from one set to another.\n# Swap decimal and thousand separators (1,234,343.55 becomes 1.234.343,55).\ny/.,/,./\n\n# Quit after printing the line starting with END.\n/^END/q\n\n# You can stop reading here, and still get 80% of sed's benefits.\n# Below are examples of how you can specify multiple sed commands.\n\n# You can apply multiple commands by separating them with a newline or\n# a semicolon.\n\n# Delete the first and the last line.\n1d\n$d\n\n# Delete the first and the last line.\n1d;$d\n\n\n# You can group commands in { } blocks.\n\n# Convert first line to uppercase and print it.\n1 {\n  s/./\\u&/g\n  p\n}\n\n# Convert first line to uppercase and print it (less readable one-liner).\n1{s/./\\u&/g;p;}\n\n\n# You can also stop reading here, if you're not interested in creating\n# sed script files.\n\n# Below are more advanced commands.  You typically put these in a file\n# rather than specify them on a command line.  If you have to use\n# many of these commands in a script, consider using a general purpose\n# scripting language, such as Python or Perl.\n\n# Append a line containing \"profile();\" after each line ending with \";\".\n/;$/a\\\nprofile();\n\n# Insert a line containing \"profile();\" before each line ending with \";\".\n/;$/i\\\nprofile();\n\n# Change each line text inside REDACTED blocks into [REDACTED].\n/REDACTED-BEGIN/,/REDACTED-END/c\\\n[REDACTED]\n\n# Replace the tag \"<ourstyle>\" by reading and outputting the file style.css.\n/<ourstyle>/ {\n  r style.css\n  d\n}\n\n# Change each line inside REDACTED blocks into [REDACTED].\n# Also write (append) a copy of the redacted text in the file redacted.txt.\n/REDACTED-BEGIN/,/REDACTED-END/ {\n  w redacted.txt\n  c\\\n  [REDACTED]\n}\n\n# All operations described so far operate on a buffer called \"pattern space\".\n# In addition, sed offers another buffer called \"hold space\".\n# The following commands operate on the two, and can be used to keep\n# state or combine multiple lines.\n\n# Replace the contents of the pattern space with the contents of\n# the hold space.\ng\n\n# Append a newline character followed by the contents of the hold\n# space to the pattern space.\nG\n\n# Replace the contents of the hold space with the contents of the\n# pattern space.\nh\n\n# Append a newline character followed by the contents of the\n# pattern space to the hold space.\nH\n\n# Delete the initial segment of the pattern space through the first\n# newline character and start the next cycle.\nD\n\n# Replace the contents of the pattern space with the contents of\n# the hold space.\ng\n\n# Append a newline character followed by the contents of the hold\n# space to the pattern space.\nG\n\n# Replace the contents of the hold space with the contents of the\n# pattern space.\nh\n\n# Append a newline character followed by the contents of the\n# pattern space to the hold space.\nH\n\n# Write the pattern space to the standard output if the default\n# output has not been suppressed, and replace the pattern space\n# with the next line of input.\nn\n\n# Append the next line of input to the pattern space, using an\n# embedded newline character to separate the appended material from\n# the original contents.  Note that the current line number\n# changes.\nN\n\n# Write the pattern space, up to the first newline character to the\n# standard output.\nP\n\n# Swap the contents of the pattern and hold spaces.\nx\n\n# Here is a complete example of some of the buffer commands.\n# Move the file's first line to its end.\n1 {\n  h\n  d\n}\n\n$ {\n  p\n  x\n}\n\n\n# Three sed commands influence a script's control flow\n\n# Name this script position \"my_label\", to which the \"b\" and\n# \"t\" commands may branch.\n:my_label\n\n# Continue executing commands from the position of my_label.\nb my_label\n\n# Branch to the end of the script.\nb\n\n# Branch to my_label if any substitutions have been made since the most\n# recent reading of an input line or execution of a \"t\" (test) function.\nt my_label\n\n# Here is a complete example of branching:\n# Join lines that end with a backslash into a single space-separated one.\n\n# Name this position \"loop\"\n: loop\n# On lines ending with a backslash\n/\\\\$/ {\n  # Read the next line and append it to the pattern space\n  N\n  # Substitute backslash newline with a space\n  s/\\\\\\n/ /\n  # Branch to the top for testing this line's ending\n  b loop\n}\n```\n\nFurther Reading:\n\n* [The Open Group: sed - stream editor](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/sed.html)\n  The POSIX standard regarding sed.\n  Follow this for maximum portability.\n* [FreeBSD sed -- stream editor](https://www.freebsd.org/cgi/man.cgi?query=sed&sektion=&n=1)\n  The BSD manual page.\n  This version of sed runs on BSD systems and macOS.\n* [Project GNU: sed, a stream editor](https://www.gnu.org/software/sed/manual/sed.html)\n  The GNU manual page. GNU sed is found on most Linux systems.\n* [Lee E. McMahon: SED -- A Non-interactive Text Editor](https://wolfram.schneider.org/bsd/7thEdManVol2/sed/sed.pdf)\n  The original sed documentation\n* [A collection of sed resources](http://sed.sourceforge.net/)\n* [The sed FAQ](http://sed.sourceforge.net/sedfaq.html)\n"
        },
        {
          "name": "self.md",
          "type": "blob",
          "size": 4.1357421875,
          "content": "---\nname: Self\ncontributors:\n    - [\"Russell Allen\", \"http://github.com/russellallen\"]\nfilename: learnself.self\n---\n\nSelf is a fast prototype based OO language which runs in its own JIT vm. Most development is done through interacting with live objects through a visual development environment called *morphic* with integrated browsers and debugger.\n\nEverything in Self is an object. All computation is done by sending messages to objects. Objects in Self can be understood as sets of key-value slots.\n\n# Constructing objects\n\nThe inbuild Self parser can construct objects, including method objects.\n\n```\n\"This is a comment\"\n\n\"A string:\"\n'This is a string with \\'escaped\\' characters.\\n'\n\n\"A 30 bit integer\"\n23\n\n\"A 30 bit float\"\n3.2\n\n\"-20\"\n-14r16\n\n\"An object which only understands one message, 'x' which returns 20\"\n(|\n  x = 20.\n|)\n\n\"An object which also understands 'x:' which sets the x slot\"\n(|\n  x <- 20.\n|)\n\n\"An object which understands the method 'doubleX' which\ndoubles the value of x and then returns the object\"\n(|\n  x <- 20.\n  doubleX = (x: x * 2. self)\n|)\n\n\"An object which understands all the messages\nthat 'traits point' understands\". The parser\nlooks up 'traits point' by sending the messages\n'traits' then 'point' to a known object called\nthe 'lobby'. It looks up the 'true' object by\nalso sending the message 'true' to the lobby.\"\n(|     parent* = traits point.\n       x = 7.\n       y <- 5.\n       isNice = true.\n|)\n```\n\n# Sending messages to objects\n\nMessages can either be unary, binary or keyword. Precedence is in that order. Unlike Smalltalk, the precedence of binary messages must be specified, and all keywords after the first must start with a capital letter. Messages are separated from their destination by whitespace.\n\n```\n\"unary message, sends 'printLine' to the object '23'\nwhich prints the string '23' to stdout and returns the receiving object (ie 23)\"\n23 printLine\n\n\"sends the message '+' with '7' to '23', then the message '*' with '8' to the result\"\n(23 + 7) * 8\n\n\"sends 'power:' to '2' with '8' returns 256\"\n2 power: 8\n\n\"sends 'keyOf:IfAbsent:' to 'hello' with arguments 'e' and '-1'.\nReturns 1, the index of 'e' in 'hello'.\"\n'hello' keyOf: 'e' IfAbsent: -1\n```\n\n# Blocks\n\nSelf defines flow control like Smalltalk and Ruby by way of blocks. Blocks are delayed computations of the form:\n\n```\n[|:x. localVar| x doSomething with: localVar]\n```\n\nExamples of the use of a block:\n\n```\n\"returns 'HELLO'\"\n'hello' copyMutable mapBy: [|:c| c capitalize]\n\n\"returns 'Nah'\"\n'hello' size > 5 ifTrue: ['Yay'] False: ['Nah']\n\n\"returns 'HaLLO'\"\n'hello' copyMutable mapBy: [|:c|\n   c = 'e' ifTrue: [c capitalize]\n            False: ['a']]\n```\n\nMultiple expressions are separated by a period. ^ returns immediately.\n\n```\n\"returns An 'E'! How icky!\"\n'hello' copyMutable mapBy: [|:c. tmp <- ''|\n   tmp: c capitalize.\n   tmp = 'E' ifTrue: [^ 'An \\'E\\'! How icky!'].\n   c capitalize\n   ]\n```\n\nBlocks are performed by sending them the message 'value' and inherit (delegate to) their contexts:\n\n```\n\"returns 0\"\n[|x|\n    x: 15.\n    \"Repeatedly sends 'value' to the first block while the result of sending 'value' to the\n     second block is the 'true' object\"\n    [x > 0] whileTrue: [x: x - 1].\n    x\n] value\n```\n\n# Methods\n\nMethods are like blocks but they are not within a context but instead are stored as values of slots. Unlike Smalltalk, methods by default return their final value not 'self'.\n\n```\n\"Here is an object with one assignable slot 'x' and a method 'reduceXTo: y'.\nSending the message 'reduceXTo: 10' to this object will put\nthe object '10' in the 'x' slot and return the original object\"\n(|\n    x <- 50.\n    reduceXTo: y = (\n        [x > y] whileTrue: [x: x - 1].\n        self)\n|)\n.\n```\n\n# Prototypes\n\nSelf has no classes. The way to get an object is to find a prototype and copy it.\n\n```\n| d |\nd: dictionary copy.\nd at: 'hello' Put: 23 + 8.\nd at: 'goodbye' Put: 'No!.\n\"Prints No!\"\n( d at: 'goodbye' IfAbsent: 'Yes! ) printLine.\n\"Prints 31\"\n( d at: 'hello' IfAbsent: -1 ) printLine.\n```\n\n# Further information\n\nThe [Self handbook](http://handbook.selflanguage.org) has much more information, and nothing beats hand-on experience with Self by downloading it from the [homepage](http://www.selflanguage.org).\n"
        },
        {
          "name": "set-theory.md",
          "type": "blob",
          "size": 4.8681640625,
          "content": "---\ncategory: Algorithms & Data Structures\nname: Set theory\ncontributors:\n    - [\"Andrew Ryan Davis\", \"https://github.com/AndrewDavis1191\"]\n---\n\nSet theory is a branch of mathematics that studies sets, their operations, and their properties.\n\n* A set is a collection of disjoint items.\n\n## Basic symbols\n\n### Operators\n* the union operator, `∪`, pronounced \"cup\", means \"or\";\n* the intersection operator, `∩`, pronounced \"cap\", means \"and\";\n* the exclusion operator, `\\`, means \"without\";\n* the complement operator, `'`, means \"the inverse of\";\n* the cross operator, `×`, means \"the Cartesian product of\".\n\n### Qualifiers \n* the colon, `:`, or the vertical bar `|` qualifiers are interchangeable and mean \"such that\";\n* the membership qualifier, `∈`, means \"belongs to\";\n* the subset qualifier, `⊆`, means \"is a subset of\";\n* the proper subset qualifier, `⊂`, means \"is a subset of but is not equal to\".\n\n### Canonical sets\n* `∅`, the empty set, i.e. the set containing no items;\n* `ℕ`, the set of all natural numbers;\n* `ℤ`, the set of all integers;\n* `ℚ`, the set of all rational numbers;\n* `ℝ`, the set of all real numbers.\n\nThere are a few caveats to mention regarding the canonical sets:\n1. Even though the empty set contains no items, the empty set is a subset of itself (and indeed every other set);\n2. Mathematicians generally do not universally agree on whether zero is a natural number, and textbooks will typically explicitly state whether or not the author considers zero to be a natural number.\n\n\n### Cardinality\n\nThe cardinality, or size, of a set is determined by the number of items in the set. The cardinality operator is given by a double pipe, `|...|`.\n\nFor example, if `S = { 1, 2, 4 }`, then `|S| = 3`.\n\n### The Empty Set\n* The empty set can be constructed in set builder notation using impossible conditions, e.g. `∅ = { x : x ≠ x }`, or `∅ = { x : x ∈ N, x < 0 }`;\n* the empty set is always unique (i.e. there is one and only one empty set);\n* the empty set is a subset of all sets;\n* the cardinality of the empty set is 0, i.e. `|∅| = 0`.\n\n## Representing sets\n\n### Literal Sets\n\nA set can be constructed literally by supplying a complete list of objects contained in the set. For example, `S = { a, b, c, d }`.\n\nLong lists may be shortened with ellipses as long as the context is clear. For example, `E = { 2, 4, 6, 8, ... }` is clearly the set of all even numbers, containing an infinite number of objects, even though we've only explicitly written four of them.\n\n### Set Builder\n\nSet builder notation is a more descriptive way of constructing a set. It relies on a _subject_ and a _predicate_ such that `S = { subject : predicate }`. For example,\n\n```\nA = { x : x is a vowel } = { a, e, i, o, u }\nB = { x : x ∈ N, x < 10 } = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\nC = { x : x = 2k, k ∈ N } = { 0, 2, 4, 6, 8, ... }\n```\n\nSometimes the predicate may \"leak\" into the subject, e.g.\n\n```\nD = { 2x : x ∈ N } = { 0, 2, 4, 6, 8, ... }\n```\n\n## Relations\n\n### Membership\n\n* If the value `a` is contained in the set `A`, then we say `a` belongs to `A` and represent this symbolically as `a ∈ A`.\n* If the value `a` is not contained in the set `A`, then we say `a` does not belong to `A` and represent this symbolically as `a ∉ A`.\n\n### Equality\n\n* If two sets contain the same items then we say the sets are equal, e.g. `A = B`.\n* Order does not matter when determining set equality, e.g. `{ 1, 2, 3, 4 } = { 2, 3, 1, 4 }`.\n* Sets are disjoint, meaning elements cannot be repeated, e.g. `{ 1, 2, 2, 3, 4, 3, 4, 2 } = { 1, 2, 3, 4 }`.\n* Two sets `A` and `B` are equal if and only if `A ⊆ B` and `B ⊆ A`.\n\n## Special Sets\n\n### The Power Set\n* Let `A` be any set. The set that contains all possible subsets of `A` is called a \"power set\" and is written as `P(A)`. If the set `A` contains `n` elements, then `P(A)` contains `2^n` elements.\n\n```\nP(A) = { x : x ⊆ A }\n```\n\n## Set operations among two sets\n### Union\nGiven two sets `A` and `B`, the union of the two sets are the items that appear in either `A` or `B`, written as `A ∪ B`.\n\n```\nA ∪ B = { x : x ∈ A ∪ x ∈ B }\n```\n\n### Intersection\nGiven two sets `A` and `B`, the intersection of the two sets are the items that appear in both `A` and `B`, written as `A ∩ B`.\n\n```\nA ∩ B = { x : x ∈ A, x ∈ B }\n```\n\n### Difference\nGiven two sets `A` and `B`, the set difference of `A` with `B` is every item in `A` that does not belong to `B`.\n\n```\nA \\ B = { x : x ∈ A, x ∉ B }\n```\n\n### Symmetrical difference\nGiven two sets `A` and `B`, the symmetrical difference is all items among `A` and `B` that doesn't appear in their intersections.\n\n```\nA △ B = { x : ((x ∈ A) ∩ (x ∉ B)) ∪ ((x ∈ B) ∩ (x ∉ A)) }\n\nA △ B = (A \\ B) ∪ (B \\ A)\n```\n\n### Cartesian product\nGiven two sets `A` and `B`, the cartesian product between `A` and `B` consists of a set containing all combinations of items of `A` and `B`.\n\n```\nA × B = { (x, y) | x ∈ A, y ∈ B }\n```\n"
        },
        {
          "name": "shutit.md",
          "type": "blob",
          "size": 8.625,
          "content": "---\ncategory: framework\nname: ShutIt\ncontributors:\n    - [\"Ian Miell\", \"http://ian.meirionconsulting.tk\"]\nfilename: learnshutit.py\n---\n\n## ShutIt\n\nShutIt is an shell automation framework designed to be easy to use.\n\nIt is a wrapper around a Python-based expect clone (pexpect).\n\nYou can look at it as 'expect without the pain'.\n\nIt is available as a pip install.\n\n## Hello World\n\nStarting with the simplest example. Create a file called example.py:\n\n```python\nimport shutit\nsession = shutit.create_session('bash')\nsession.send('echo Hello World', echo=True)\n```\n\nRunning this with:\n\n```bash\npython example.py\n```\n\noutputs:\n\n```bash\n$ python example.py\necho \"Hello World\"\necho \"Hello World\"\nHello World\nIans-MacBook-Air.local:ORIGIN_ENV:RhuebR2T#\n```\n\nThe first argument to 'send' is the command you want to run. The 'echo'\nargument outputs the terminal interactions. By default ShutIt is silent.\n\n'send' takes care of all the messing around with prompts and 'expects' that\nyou might be familiar with from expect.\n\n\n## Log Into a Server\n\nLet's say you want to log into a server and run a command. Change example.py\nto:\n\n```python\nimport shutit\nsession = shutit.create_session('bash')\nsession.login('ssh you@example.com', user='you', password='mypassword')\nsession.send('hostname', echo=True)\nsession.logout()\n```\n\nwhich will log you into your server (if you replace with your details) and\noutput the hostname.\n\n```\n$ python example.py\nhostname\nhostname\nexample.com\nexample.com:cgoIsdVv:heDa77HB#\n```\n\nObviously that's insecure! Instead you can run:\n\n```python\nimport shutit\nsession = shutit.create_session('bash')\npassword = session.get_input('', ispass=True)\nsession.login('ssh you@example.com', user='you', password=password)\nsession.send('hostname', echo=True)\nsession.logout()\n```\n\nwhich forces you to input the password:\n\n```\n$ python example.py\nInput Secret:\nhostname\nhostname\nexample.com\nexample.com:cgoIsdVv:heDa77HB#\n```\n\nAgain, the 'login' method handles the changing prompt from a login. You give\nShutIt the login command, the user you expect to log in as, and a password\n(if needed), and ShutIt takes care of the rest.\n\n'logout' handles the ending of a 'login', handling any changes to the prompt\nfor you.\n\n## Log Into Multiple Servers\n\nLet's say you have a server farm of two servers, and want to log onto both.\nJust create two sessions and run similar login and send commands:\n\n```python\nimport shutit\nsession1 = shutit.create_session('bash')\nsession2 = shutit.create_session('bash')\npassword1 = session1.get_input('Password for server1', ispass=True)\npassword2 = session2.get_input('Password for server2', ispass=True)\nsession1.login('ssh you@one.example.com', user='you', password=password1)\nsession2.login('ssh you@two.example.com', user='you', password=password2)\nsession1.send('hostname', echo=True)\nsession2.send('hostname', echo=True)\nsession1.logout()\nsession2.logout()\n```\n\nwould output:\n\n```bash\n$ python example.py\nPassword for server1\nInput Secret:\n\nPassword for server2\nInput Secret:\nhostname\nhostname\none.example.com\none.example.com:Fnh2pyFj:qkrsmUNs# hostname\nhostname\ntwo.example.com\ntwo.example.com:Gl2lldEo:D3FavQjA#\n```\n\n## Example: Monitor Multiple Servers\n\nWe can turn the above into a simple monitoring tool by adding some logic to\nexamine the output of a command:\n\n```python\nimport shutit\ncapacity_command=\"\"\"df / | awk '{print $5}' | tail -1 | sed s/[^0-9]//\"\"\"\nsession1 = shutit.create_session('bash')\nsession2 = shutit.create_session('bash')\npassword1 = session.get_input('Password for server1', ispass=True)\npassword2 = session.get_input('Password for server2', ispass=True)\nsession1.login('ssh you@one.example.com', user='you', password=password1)\nsession2.login('ssh you@two.example.com', user='you', password=password2)\ncapacity = session1.send_and_get_output(capacity_command)\nif int(capacity) < 10:\n\tprint('RUNNING OUT OF SPACE ON server1!')\ncapacity = session2.send_and_get_output(capacity_command)\nif int(capacity) < 10:\n\tprint('RUNNING OUT OF SPACE ON server2!')\nsession1.logout()\nsession2.logout()\n```\n\nHere you use the 'send\\_and\\_get\\_output' method to retrieve the output of the\ncapacity command (df).\n\nThere are much more elegant ways to do the above (e.g. have a dictionary of the\nservers to iterate over), but it's up to you how clever you need the Python to\nbe.\n\n\n## More Intricate IO - Expecting\n\nLet's say you have an interaction with an interactive command line application\nyou want to automate. Here we will use telnet as a trivial example:\n\n```python\nimport shutit\nsession = shutit.create_session('bash')\nsession.send('telnet', expect='elnet>', echo=True)\nsession.send('open google.com 80', expect='scape character', echo=True)\nsession.send('GET /', echo=True, check_exit=False)\nsession.logout()\n```\n\nNote the 'expect' argument. You only need to give a subset of telnet's\nprompt to match and continue.\n\nNote also the 'check\\_exit' argument in the above, which is new. We'll come back\nto that. The output of the above is:\n\n```bash\n$ python example.py\ntelnet\ntelnet> open google.com 80\nTrying 216.58.214.14...\nConnected to google.com.\nEscape character is '^]'.\nGET /\nHTTP/1.0 302 Found\nCache-Control: private\nContent-Type: text/html; charset=UTF-8\nReferrer-Policy: no-referrer\nLocation: http://www.google.co.uk/?gfe_rd=cr&ei=huczWcj3GfTW8gfq0paQDA\nContent-Length: 261\nDate: Sun, 04 Jun 2017 10:57:10 GMT\n\n<HTML><HEAD><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\n<TITLE>302 Moved</TITLE></HEAD><BODY>\n<H1>302 Moved</H1>\nThe document has moved\n<A HREF=\"http://www.google.co.uk/?gfe_rd=cr&amp;ei=huczWcj3GfTW8gfq0paQDA\">\nhere\n</A>.\n</BODY></HTML>\nConnection closed by foreign host.\n```\n\nNow back to 'check\\_exit=False'. Since the telnet command returns a failure exit\ncode (1) and we don't want the script to fail, you set 'check\\_exit=False' to\nlet ShutIt know you don't care about the exit code.\n\nIf you didn't pass that argument in, ShutIt gives you an interactive terminal\nif there is a terminal to communicate with. This is called a 'pause point'.\n\n\n## Pause Points\n\nYou can trigger a 'pause point' at any point by calling\n\n```python\n[...]\nsession.pause_point('This is a pause point')\n[...]\n```\n\nwithin your script, and then continue with the script by hitting CTRL and ']'\nat the same time. This is great for debugging: add a pause point, have a look\naround, then continue. Try this:\n\n```python\nimport shutit\nsession = shutit.create_session('bash')\nsession.pause_point('Have a look around!')\nsession.send('echo \"Did you enjoy your pause point?\"', echo=True)\n```\n\nwith output like this:\n\n```bash\n$ python example.py\nHave a look around!\n\nIans-Air.home:ORIGIN_ENV:I00LA1Mq#  bash\nimiell@Ians-Air:/space/git/shutit  ⑂ master +    \nCTRL-] caught, continuing with run...\n2017-06-05 15:12:33,577 INFO: Sending:  exit\n2017-06-05 15:12:33,633 INFO: Output (squashed):  exitexitIans-Air.home:ORIGIN_ENV:I00LA1Mq#  [...]\necho \"Did you enjoy your pause point?\"\necho \"Did you enjoy your pause point?\"\nDid you enjoy your pause point?\nIans-Air.home:ORIGIN_ENV:I00LA1Mq#\n```\n\n\n## More Intricate IO - Backgrounding\n\nReturning to our 'monitoring multiple servers' example, let's imagine we\nhave a long-running task that we want to run on each server. By default, ShutIt\nworks serially which would take a long time. But we can run tasks in the\nbackground to speed things up.\n\nHere you can try an example with the trivial command: 'sleep 60'.\n\n\n```python\nimport shutit\nimport time\nlong_command=\"\"\"sleep 60\"\"\"\nsession1 = shutit.create_session('bash')\nsession2 = shutit.create_session('bash')\npassword1 = session1.get_input('Password for server1', ispass=True)\npassword2 = session2.get_input('Password for server2', ispass=True)\nsession1.login('ssh you@one.example.com', user='you', password=password1)\nsession2.login('ssh you@two.example.com', user='you', password=password2)\nstart = time.time()\nsession1.send(long_command, background=True)\nsession2.send(long_command, background=True)\nprint('That took: ' + str(time.time() - start) + ' seconds to fire')\nsession1.wait()\nsession2.wait()\nprint('That took: ' + str(time.time() - start) + ' seconds to complete')\n```\n\nMy laptop says it took 0.5 seconds to run fire those two commands, and then just\nover a minute to complete (using the 'wait' method).\n\nAgain, this is trivial, but imagine you have hundreds of servers to manage like\nthis and you can see the power it can bring in a few lines of code and one\nPython import.\n\n\n## Learn More\n\nThere's a lot more that can be done with ShutIt.\n\nTo learn more, see:\n\n[ShutIt](https://ianmiell.github.io/shutit/)\n[GitHub](https://github.com/ianmiell/shutit/blob/master/README.md)\n\nIt's a broader automation framework, and the above is its 'standalone mode'.\n\nFeedback, feature requests, 'how do I?'s highly appreciated! Reach me at\n[@ianmiell](https://twitter.com/ianmiell)\n"
        },
        {
          "name": "sing.md",
          "type": "blob",
          "size": 12.4033203125,
          "content": "---\nname: Sing\nfilename: learnsing.sing\ncontributors:\n    - [\"Maurizio De Girolami\", \"https://github.com/mdegirolami\"]\n---\n\nThe purpose of sing is to provide a simple, safe, fast language that \ncan be a good replacement for c++ for high performance applications.\n\nSing is an easy choice because it compiles to human-quality readable c++.\n\nBecause of that, if you work for a while with Sing and, at any time, you discover you don't like Sing anymore, you lose nothing of your work\nbecause you are left with nice and clean c++ code. \n\nIn some way you can also think Sing as a tool to write c++ in a way that enforces some best practices.\n\n```go\n/* Multi- line comment. \n    /* It can be nested */ \n    Use it to remark-out part of the code.\n    It leaves no trace in the intermediate c++ code. \n    (sing translates into nice human readable c++)\n*/\n\n// Single line comment, can be placed only before a statement or declaration...\n// ...or at the right of the first line of a statement or declaration.\n// single line comments are kept into c++.\n//\n// here we declare if we need to use public declarations from other files. \n// (in this case from files 'sio', 'sys')\nrequires \"sio\";\nrequires \"sys\";\n\n//\n// A sing function declaration.\n// All the declarations can be made public with the 'public' keyword.\n// All the declarations start with a keyword specifying the type of declaration\n// (in this case fn for function) then follows the name, the arguments and the\n// return type.\n//\n// Each argument starts with a direction qualifyer (in, out, io) which tells if\n// the argument is an input, an output or both...\n// ...then follows the argument name and the type.\npublic fn singmain(in argv [*]string) i32\n{\n    // print is from the sio file and sends a string to the console\n    sio.print(\"Hello World\\n\");\n\n    // type conversions are allowed in the form of <newtype>(expression).\n    sio.print(string(sum(5, 10)) + \"\\n\");\n\n    // For clarity you can specify after an argument its name separated by ':'.\n    var result i32;\n    recursive_power(10:base, 3:exponent, result);\n\n    // referred here to avoid a 'not used' error.\n    learnTypes();\n\n    // functions can only return a single value of some basic type.\n    return(0);\n}\n\n// You can have as many arguments as you want, comma separated. \n// You can also omit the 'in' direction qualifyer (it is the default).\nfn sum(arg1 i32, arg2 i32) i32\n{\n    // as 'fn' declares a function, 'let' declares a constant.\n    // With constants, if you place an initializer, you can omit the type.\n    let the_sum = arg1 + arg2;\n\n    return(the_sum);\n}\n\n// Arguments are passed by reference, which means that in the function body you\n// use the argument names to refer to the passed variables.\n// Example: all the functions in the recursion stack access the same 'result'\n// variable, supplied by the singmain function. \nfn recursive_power(base i32, exponent i32, out result i32) void\n{\n    if (exponent == 0) {\n        result = 1;\n    } else {\n        recursive_power(base, exponent - 1, result);\n        result *= base;\n    }\n}\n\n//**********************************************************\n//\n// TYPES\n//\n//**********************************************************\nfn learnTypes() void\n{\n    // the var keyword declares mutable variables \n    // in this case an UTF-8 encoded string\n    var my_name string;\n\n    // ints of 8..64 bits size\n    var int0 i8; \n    var int1 i16; \n    var int2 i32; \n    var int3 i64; \n\n    // uints\n    var uint0 u8;\n    var uint1 u16;\n    var uint2 u32;\n    var uint3 u64;\n\n    // floats\n    var float0 f32;\n    var float1 f64;\n\n    // complex\n    var cmplx0 c64;\n    var cmplx1 c128;\n\n    cmplx0 = 0;\n    cmplx1 = 0;\n\n    // and of course...\n    var bool0 bool;\n\n    // type inference: by default constants are i32, f32, c64\n    let an_int32 = 15;\n    let a_float32 = 15.0;\n    let a_complex = 15.0 + 3i;\n    let a_string = \"Hello !\";\n    let a_bool = false;\n\n    // To create constant of different types use a conversion-like syntax:\n    // NOTE: this is NOT a conversion. Just a type specification\n    let a_float64 = f64(5.6);\n\n    // in a type definition [] reads as \"array of\"\n    // in the example []i32 => array of i32.\n    var intarray []i32 = {1, 2, 3};\n\n    // You can specify a length, else the length is given by the initializer\n    // the last initializer is replicated on the extra items\n    var sizedarray [10]i32 = {1, 2, 3};\n\n    // Specify * as the size to get a dynamic array (can change its length)\n    var dyna_array [*]i32;\n\n    // you can append items to a vector invoking a method-like function on it.\n    dyna_array.push_back(an_int32);\n\n    // getting the size of the array. sys.validate() is like assert in c\n    sys.validate(dyna_array.size() == 1); \n\n    // a map that associates a number to a string. \n    // \"map(x)...\" reads \"map with key of type x and value of type...\" \n    var a_map map(string)i32;\n\n    a_map.insert(\"one\", 1);\n    a_map.insert(\"two\", 2);\n    a_map.insert(\"three\", 3);\n    let key = \"two\";\n\n    // note: the second argument of get_safe is the value to be returned \n    // when the key is not found.\n    sio.print(\"\\nAnd the value is...: \" + string(a_map.get_safe(key, -1)));\n\n    // string concatenation\n    my_name = \"a\" + \"b\";\n}\n\n// an enum type can only have a value from a discrete set. \n// can't be converted to/from int !\nenum Stages {first, second, last}\n\n// you can refer to enum values (to assign/compare them)\n// specifying both the typename and tagname separated with the '.' operator\nvar current_stage = Stages.first;\n\n\n//**********************************************************\n//\n// POINTERS\n//\n//**********************************************************\n\n// This is a factory for a dynamic vector.\n// In a type declaration '*' reads 'pointer to..'\n// so the return type is 'pointer to a vector of i32'\nfn vectorFactory(first i32, last i32) *[*]i32\n{\n    var buffer [*]i32;\n\n    // fill\n    for (value in first : last) {\n        buffer.push_back(value);\n    }\n\n    // The & operator returns the address of the buffer.\n    // You can only use & on local variables\n    // As you use & on a variable, that variable is allocated on the HEAP.\n    return(&buffer);\n}\n\nfn usePointers() void\n{\n    var bufferptr = vectorFactory(0, 100);\n\n    // you don't need to use the factory pattern to use pointers.\n    var another_buffer [*]i32;\n    var another_bufferptr = &another_buffer;\n\n    // you can dereference a pointer with the * operator\n    // sys.validate is an assertion (causes a signal if the argument is false)\n    sys.validate((*bufferptr)[0] == 0);\n\n    /* \n    // as all the pointers to a variable exit their scope the variable is\n    // no more accessible and is deleted (freed)\n    */\n}\n\n//**********************************************************\n//\n// CLASSES\n//\n//**********************************************************\n\n// This is a Class. The member variables can be directly initialized here\nclass AClass {\npublic:\n    var public_var = 100;       // same as any other variable declaration  \n    fn is_ready() bool;         // same as any other function declaration \n    fn mut finalize() void;     // destructor (called on object deletion)\nprivate:\n    var private_var string; \n\n    // Changes the member variables and must be marked as 'mut' (mutable)\n    fn mut private_fun(errmsg string) void;    \n}\n\n// How to declare a member function\nfn AClass.is_ready() bool\n{\n    // inside a member function, members can be accessed through the \n    // 'this' keyword and the field selector '.'\n    return(this.public_var > 10);\n}\n\nfn AClass.private_fun(errmsg string) void\n{\n    this.private_var = errmsg;\n}\n\n// using a class\nfn useAClass() void\n{\n    // in this way you create a variable of type AClass.\n    var instance AClass;\n\n    // then you can access its members through the '.' operator.\n    if (instance.is_ready()) {\n        instance.public_var = 0;\n    }\n}\n\n//**********************************************************\n//\n// INTERFACES\n//\n//**********************************************************\n\n// You can use polymorphism in sing defining an interface...\ninterface ExampleInterface {\n    fn mut eraseAll() void;\n    fn identify_myself() void;\n} \n\n// and then creating classes which implement the interface\n// NOTE: you don't need (and cannot) re-declare the interface functions\nclass Implementer1 : ExampleInterface {\nprivate:\n    var to_be_erased i32 = 3;\npublic:    \n    var only_on_impl1 = 0;\n}\n\nclass Implementer2 : ExampleInterface {\nprivate:\n    var to_be_erased f32 = 3;\n}\n\nfn Implementer1.eraseAll() void\n{\n    this.to_be_erased = 0;\n}\n\nfn Implementer1.identify_myself() void\n{\n    sio.print(\"\\nI'm the terrible int eraser !!\\n\");\n}\n\nfn Implementer2.eraseAll() void\n{\n    this.to_be_erased = 0;\n}\n\nfn Implementer2.identify_myself() void\n{\n    sio.print(\"\\nI'm the terrible float eraser !!\\n\");\n}\n\nfn interface_casting() i32\n{\n    // upcasting is automatic (es: *Implementer1 to *ExampleInterface)\n    var concrete Implementer1;\n    var if_ptr *ExampleInterface = &concrete; \n\n    // you can access interface members with (guess what ?) '.'\n    if_ptr.identify_myself();\n\n    // downcasting requires a special construct \n    // (see also below the conditional structures)\n    typeswitch(ref = if_ptr) {  \n        case *Implementer1: return(ref.only_on_impl1);\n        case *Implementer2: {}\n        default: return(0);\n    }\n\n    return(1);\n}\n\n// All the loop types\nfn loops() void\n{\n    // while: the condition must be strictly of boolean type\n    var idx = 0;\n    while (idx < 10) {\n        ++idx;\n    }\n\n    // for in an integer range. The last value is excluded\n    // 'it' is local to the loop and must not be previously declared\n    for (it in 0 : 10) {\n    }\n\n    // reverse direction\n    for (it in 10 : 0) {\n    }\n\n    // configurable step. The loop stops when it's >= the final value\n    for (it in 0 : 100 step 3) {\n    }\n\n    // with an auxiliary counter. \n    // The counter start always at 0 and increments by one at each iteration\n    for (counter, it in 3450 : 100 step -22) {\n    } \n\n    // value assumes in turn all the values from array\n    var array [*]i32 = {0, 10, 100, 1000};\n    for (value in array) {\n    }\n\n    // as before with auxiliary counter\n    for (counter, value in array) {\n    }\n}\n\n// All the conditional structures\ninterface intface {}\nclass c0_test : intface {public: fn c0stuff() void;}\nclass delegating : intface {}\n\nfn conditionals(in object intface, in objptr *intface) void\n{\n    let condition1 = true;\n    let condition2 = true;\n    let condition3 = true;\n    var value = 30;\n\n    // condition1 must be a boolean.\n    if (condition1) {\n        ++value;    // conditioned statement\n    } \n\n    // you can chain conditions with else if\n    if (condition1) {\n        ++value;\n    } else if (condition2) {\n        --value;\n    } \n\n    // a final else runs if any other condition is false\n    if (condition1) {\n        ++value;\n    } else if (condition2) {\n        --value;\n    } else {\n        value = 0;\n    }\n\n    // based on the switch value selects a case statement\n    switch (value) {\n        case 0: sio.print(\"value is zero\"); // a single statement !\n        case 1: {}                          // do nothing\n        case 2:                             // falls through\n        case 3: sio.print(\"value is more than one\");\n        case 4: {                           // a block is a single statement !\n            value = 0;\n            sio.print(\"how big !!\");\n        }\n        default: return;                    // if no one else matches\n    }\n\n    // similar to a switch but selects a case based on argument type.\n    // - object must be a function argument of type interface.\n    // - the case types must be classes implementing the object interface.\n    // - in each case statement, ref assumes the class type of that case.\n    typeswitch(ref = object) {\n        case c0_test: ref.c0stuff();\n        case delegating: {}\n        default: return;\n    }\n\n    // - object must be an interface pointer.\n    // - the case types must be pointers to classes implementing the objptr interface.\n    // - in each case statement, ref assumes the class pointer type of that case.\n    typeswitch(ref = objptr) {\n        case *c0_test: {\n            ref.c0stuff();\n            return;\n        }\n        case *delegating: {}\n        default: sio.print(\"unknown pointer type !!\");\n    } \n}\n```\n\n## Further Reading\n\n[official Sing web site](https://mdegirolami.wixsite.com/singlang).\n\nIf you want to play with sing you are recommended to download the vscode plugin. Please\nfollow the instructions at [Getting Started](https://mdegirolami.wixsite.com/singlang/copy-of-interfacing-sing-and-c-2)\n"
        },
        {
          "name": "sk",
          "type": "tree",
          "content": null
        },
        {
          "name": "sl",
          "type": "tree",
          "content": null
        },
        {
          "name": "smallbasic.md",
          "type": "blob",
          "size": 3.3720703125,
          "content": "---\nname: SmallBASIC\nfilename: learnsmallbasic.bas\ncontributors:\n    - [\"Chris Warren-Smith\", \"http://smallbasic.sourceforge.net\"]\n---\n\n## About\n\nSmallBASIC is a fast and easy to learn BASIC language interpreter ideal for everyday calculations, scripts and prototypes. SmallBASIC includes trigonometric, matrices and algebra functions, a built in IDE, a powerful string library, system, sound, and graphic commands along with structured programming syntax.\n\n## Development\n\nSmallBASIC was originally developed by Nicholas Christopoulos in late 1999 for the Palm Pilot. Project development has been continued by Chris Warren-Smith since around 2005.\n\nVersions of SmallBASIC have been made for a number of early hand held devices including Franklin eBookman and the Nokia 770. Also various desktop versions have been released based on a variety of GUI tool-kits, some of which have become defunct. The current supported platforms are Linux and Windows based on SDL2 and Android based on NDK. A desktop command line version is also available, although not typically released in binary form.\n\nIn around 2008 a large corporation released a BASIC like programming environment with a similar sounding name. SmallBASIC is not related to this other project.\n\n```\nREM This is a comment\n' and this is also a comment\n\nREM print text\nprint \"hello\"\n? \"? is short for PRINT\"\n\nREM Control structures\nFOR index = 0 TO 10 STEP 2\n  ? \"This is line number \"; index\nNEXT\nJ=0\nREPEAT\n J++\nUNTIL J=10\nWHILE J>0\n J--\nWEND\n\nREM Select case statement\nSelect Case \"Cool\"\n Case \"null\", 1,2,3,4,5,6,7,8,\"Cool\",\"blah\"\n Case \"Not cool\"\n   PRINT \"Epic fail\"\n Case Else\n   PRINT \"Fail\"\nEnd Select\n\nREM catching errors with TRY/CATCH\nTry\n  fn = Freefile\n  Open filename For Input As #fn\nCatch err\n  Print \"failed to open\"\nEnd Try\n\nREM User defined subs and functions\nfunc add2(x,y)\n  ' variables may be declared as local within the scope of a SUB or FUNC\n  local K\n  k = \"k will cease to exist when this FUNC returns\"\n  add2=x+y\nend\nPrint add2(5,5)\nsub print_it(it)\n  print it\nend\nprint_it \"IT....\"\n\nREM Display lines and pixels\nAt 0,ymax/2+txth(\"Q\")\nColor 1: ? \"sin(x)\":\nColor 8: ? \"cos(x)\":\nColor 12: ? \"tan(x)\"\nLine 0,ymax/2,xmax,ymax/2\nFor i=0 to xmax\n  Pset i,ymax/2-sin(i*2*pi/ymax)*ymax/4 color 1\n  Pset i,ymax/2-cos(i*2*pi/ymax)*ymax/4 color 8\n  Pset i,ymax/2-tan(i*2*pi/ymax)*ymax/4 color 12\nNext\nshowpage\n\nREM SmallBASIC is great for experimenting with fractals and other interesting effects\nDelay 3000\nRandomize\nff = 440.03\nFor j = 0 to 20\n  r = rnd * 1000 % 255\n  b = rnd * 1000 % 255\n  g = rnd * 1000 % 255\n  c = rgb(r,b,g)\n  ff += 9.444\n  for i=0 to 25000\n    f += ff\n    x = min(xmax, -x + cos(f*i))\n    y = min(ymax, -y + sin(f*i))\n    pset x, y color c\n    if (i%1000==0) then\n      showpage\n    fi\n  next\nNext j\n\nREM For computer historians, SmallBASIC can run programs\nREM found in early computer books and magazines, for example:\n10 LET A=9\n20 LET B=7\n30 PRINT A*B\n40 PRINT A/B\n\nREM SmallBASIC also has support for a few modern concepts such as JSON\naa = array(\"{\\\"cat\\\":{\\\"name\\\":\\\"harry\\\"},\\\"pet\\\":\\\"true\\\"}\")\nIf (ismap(aa) == false) Then\n  throw \"not an map\"\nEnd If\nPrint aa\n\nPAUSE\n```\n\n## Articles\n\n* [Getting started](http://smallbasic.sourceforge.net/?q=node/1573)\n* [Welcome to SmallBASIC](http://smallbasic.sourceforge.net/?q=node/838)\n\n## GitHub\n\n* [Source code](https://github.com/smallbasic/SmallBASIC)\n* [Reference snapshot](http://smallbasic.github.io/)\n\n"
        },
        {
          "name": "smalltalk.md",
          "type": "blob",
          "size": 54.7265625,
          "content": "---\nname: Smalltalk\nfilename: smalltalk.st\ncontributors:\n    - [\"Jigyasa Grover\", \"https://jigyasa-grover.github.io\"]\n    - [\"tim Rowledge\", \"tim@rowledge.org\"]\n---\n\n- Smalltalk is a fully object-oriented, dynamically typed, reflective programming language with no 'non-object' types.\n- Smalltalk was created as the language to underpin the \"new world\" of computing exemplified by \"human–computer symbiosis.\"\n- It was designed and created in part for educational use, more so for constructionist learning, at the Learning Research Group (LRG) of Xerox PARC by Alan Kay, Dan Ingalls, Adele Goldberg, Ted Kaehler, Scott Wallace, and others during the 1970s.\n\n## The Basics\n\n### Everything is an object\nYes, everything. Integers are instances of one of the numeric classes. Classes are instances of the class Metaclass and are just as manipulable as any other object. All classes are part of a single class tree; no disjoint class trees. Stack frames are objects and can be manipulated, which is how the debugger works. There are no pointers into memory locations that you can dereference and mess with.\n\n### Functions are not called; messages are sent to objects\n- Work is done by sending messages to objects, which decide how to respond to that message and run a method as a result, which eventually returns some object to the original message sending code.\n- The system knows the class of the object receiving a message and looks up the message in that class's list of methods. If it is not found, the lookup continues in the super class until either it is found or the root of the classes is reached and there is still no relevant method. \n- If a suitable method is found the code is run, and the same process keeps on going with all the methods sent by that method and so on forever.\n- If no suitable method is found an exception is raised, which typically results in a user interface notifier to tell the user that the message was not understood. It is entirely possible to catch the exception and do something to fix the problem, which might range from 'ignore it' to 'load some new packages for this class and try again'.\n- A method (more strictly an instance of the class CompiledMethod) is a chunk of Smalltalk code that has been compiled into bytecodes. Executing methods start at the beginning and return to the sender when a return is encountered (we use ^ to signify 'return the following object') or the end of the code is reached, in which case the current object running the code is returned.\n\n### Simple syntax\nSmalltalk has a simple syntax with very few rules. \nThe most basic operation is to send a message to an object\n`anObject aMessage`\n\nThere are three sorts of messages\n\n- unary - a single symbol that may be several words conjoined in what we call camelcase form, with no arguments. For example 'size', 'reverseBytes', 'convertToLargerFormatPixels'\n- binary - a small set of symbols of the sort often used for arithmetic operations in most languages, requiring a single argument. For example '+', '//', '@'. We do not use traditional arithmetic precedence, something to keep an eye on.\n- keyword - the general form where multiple arguments can be passed. As with the unary form we use camelcase to join words together but arguments are inserted in the midst of the message with colons used to separate them lexically. For example 'setTemperature:', 'at:put:', 'drawFrom:to:lineWidth:fillColor:'\n\n#### An example\n`result := myObject doSomethingWith: thatObject`\nWe are sending the message 'doSomethingWith:' to myObject. This happens to be a message that has a single argument but that's not important yet.\n'myObject' is a 'MyExampleClass' instance so the system looks at the list of messages understood by MyExampleClass\n\n- beClever\n- doWeirdThing:\n- doSomethingWith\n\nIn searching we see what initially looks like a match - but no, it lacks the final colon. So we find the super class of MyExampleClass - BigExampleClass. Which has a list of known messages of its own\n\n- beClever\n- doSomethingWith:\n- buildCastleInAir\n- annoyUserByDoing:\n\nWe find a proper exact match and start to execute the code:\n\n```smalltalk\ndoSomethingWith: argumentObject\n    self size > 4 ifTrue: [^argumentObject sizeRelatingTo: self].\n```   \n\nEverything here except the `^` involves sending more messages. Event the `ifTrue:` that you might think is a language control structure is just Smalltalk code.\n\nWe start by sending `size` to `self`. `self` is the object currently running the code - so in this case it is the myObject we started with. `size` is a very common message that we might anticipate tells us something about how big an object is; you could look it up with the Smalltalk tools very simply. The result we get is then sent the message `>` with the plain old integer 4 (which is an object too; no strange primitive types to pollute the system here) and nobody should be surprised the `>` is a comparison that answers true or false. That boolean (which is actually a Boolean object in Smalltalk) is sent the message `ifTrue:` with the block of code between the `[]` as its argument; obviously a true boolean might be expected to run that block of code and a false to ignore it. \n\nIf the block is run then we do some more message sending to the argument object and noting the `^` we return the answer back to our starting point and it gets assigned to `result`. If the block is ignored we seem to run out of code and so `self` is returned and assigned to `result`.\n\n## Smalltalk quick reference cheat-sheet\nTaken from [Smalltalk Cheatsheet](http://www.angelfire.com/tx4/cus/notes/smalltalk.html)\n\n#### Allowable characters:\n- a-z\n- A-Z\n- 0-9\n- .+/\\*~<>@%|&?\n- blank, tab, cr, ff, lf\n\n#### Variables:\n- variable names must be declared before use but are untyped\n- shared vars (globals, class vars) conventionally begin with uppercase (except the reserved names shown below)\n- local vars (instance vars, temporaries, method & block arguments) conventionally begin with lowercase\n- reserved names: `nil`, `true`, `false`, `self`, `super`, and `thisContext`\n\n#### Variable scope:\n- Global: defined in a Dictionary named 'Smalltalk' and accessible by all objects in system\n- Special: (reserved) `Smalltalk`, `super`, `self`, `true`, `false`, & `nil`\n- Method Temporary: local to a method\n- Block Temporary: local to a block\n- Pool: variables in a Dictionary object, possibly shared with classes not directly related by inheritance\n- Method Parameters: automatic method temp vars that name the incoming parameters. Cannot be assigned to \n- Block Parameters: automatic block temp vars that name the incoming parameters. Cannot be assigned to\n- Class: shared with all instances of a class & its subclasses\n- Class Instance: unique to each instance of a class. Too commonly confused with class variables\n- Instance Variables: unique to each instance of a class\n\n`\"Comments are enclosed in quotes and may be arbitrary length\"`\n\n`\"Period (.) is the statement separator. Not required on last line of a method\"`\n\n#### Transcript:\n```smalltalk\nTranscript clear.                        \"clear to transcript window\"\nTranscript show: 'Hello World'.          \"output string in transcript window\"\nTranscript nextPutAll: 'Hello World'.    \"output string in transcript window\"\nTranscript nextPut: $A.                  \"output character in transcript window\"\nTranscript space.                        \"output space character in transcript window\"\nTranscript tab.                          \"output tab character in transcript window\"\nTranscript cr.                           \"carriage return / linefeed\"\n'Hello' printOn: Transcript.             \"append print string into the window\"\n'Hello' storeOn: Transcript.             \"append store string into the window\"\nTranscript endEntry.                     \"flush the output buffer\"\n```\n\n#### Assignment:\n```smalltalk\n| x y |\nx _ 4.                            \"assignment (Squeak) <-\"\nx := 5.                           \"assignment\"\nx := y := z := 6.                 \"compound assignment\"\nx := (y := 6) + 1.\nx := Object new.                  \"bind to allocated instance of a class\"\n```\n\n#### Constants:\n```smalltalk\n| b |\nb := true.                \"true constant\"\nb := false.               \"false constant\"\nx := nil.                 \"nil object constant\"\nx := 1.                   \"integer constants\"\nx := 3.14.                \"float constants\"\nx := 2e-2.                \"fractional constants\"\nx := 16r0F.               \"hex constant\".\nx := -1.                  \"negative constants\"\nx := 'Hello'.             \"string constant\"\nx := 'I''m here'.         \"single quote escape\"\nx := $A.                  \"character constant\"\nx := $ .                  \"character constant (space)\"\nx := #aSymbol.            \"symbol constants\"\nx := #(3 2 1).            \"array constants\"\nx := #('abc' 2 $a).       \"mixing of types allowed\"\n```\n\n#### Booleans:\n```smalltalk\n| b x y |\nx := 1. y := 2.\nb := (x = y).                         \"equals\"\nb := (x ~= y).                         \"not equals\"\nb := (x == y).                         \"identical\"\nb := (x ~~ y).                         \"not identical\"\nb := (x > y).                          \"greater than\"\nb := (x < y).                          \"less than\"\nb := (x >= y).                         \"greater than or equal\"\nb := (x <= y).                         \"less than or equal\"\nb := b not.                            \"boolean not\"\nb := (x < 5) & (y > 1).                \"boolean and\"\nb := (x < 5) | (y > 1).                \"boolean or\"\nb := (x < 5) and: [y > 1].             \"boolean and (short-circuit)\"\nb := (x < 5) or: [y > 1].              \"boolean or (short-circuit)\"\nb := (x < 5) eqv: (y > 1).             \"test if both true or both false\"\nb := (x < 5) xor: (y > 1).             \"test if one true and other false\"\nb := 5 between: 3 and: 12.             \"between (inclusive)\"\nb := 123 isKindOf: Number.             \"test if object is class or subclass of\"\nb := 123 isMemberOf: SmallInteger.     \"test if object is type of class\"\nb := 123 respondsTo: #sqrt.             \"test if object responds to message\"\nb := x isNil.                          \"test if object is nil\"\nb := x isZero.                         \"test if number is zero\"\nb := x positive.                       \"test if number is positive\"\nb := x strictlyPositive.               \"test if number is greater than zero\"\nb := x negative.                       \"test if number is negative\"\nb := x even.                           \"test if number is even\"\nb := x odd.                            \"test if number is odd\"\nb := x isLiteral.                      \"test if literal constant\"\nb := x isInteger.                      \"test if object is integer\"\nb := x isFloat.                        \"test if object is float\"\nb := x isNumber.                       \"test if object is number\"\nb := $A isUppercase.                   \"test if upper case character\"\nb := $A isLowercase.                   \"test if lower case character\"\n```\n\n#### Arithmetic expressions:\n```smalltalk\n| x |\nx := 6 + 3.                             \"addition\"\nx := 6 - 3.                             \"subtraction\"\nx := 6 * 3.                             \"multiplication\"\nx := 1 + 2 * 3.                         \"evaluation always left to right (1 + 2) * 3\"\nx := 5 / 3.                             \"division with fractional result\"\nx := 5.0 / 3.0.                         \"division with float result\"\nx := 5.0 // 3.0.                        \"integer divide\"\nx := 5.0 \\\\ 3.0.                        \"integer remainder\"\nx := -5.                                \"unary minus\"\nx := 5 sign.                            \"numeric sign (1, -1 or 0)\"\nx := 5 negated.                         \"negate receiver\"\nx := 1.2 integerPart.                   \"integer part of number (1.0)\"\nx := 1.2 fractionPart.                  \"fractional part of number (0.2)\"\nx := 5 reciprocal.                      \"reciprocal function\"\nx := 6 * 3.1.                           \"auto convert to float\"\nx := 5 squared.                         \"square function\"\nx := 25 sqrt.                           \"square root\"\nx := 5 raisedTo: 2.                     \"power function\"\nx := 5 raisedToInteger: 2.              \"power function with integer\"\nx := 5 exp.                             \"exponential\"\nx := -5 abs.                            \"absolute value\"\nx := 3.99 rounded.                      \"round\"\nx := 3.99 truncated.                    \"truncate\"\nx := 3.99 roundTo: 1.                   \"round to specified decimal places\"\nx := 3.99 truncateTo: 1.                \"truncate to specified decimal places\"\nx := 3.99 floor.                        \"truncate\"\nx := 3.99 ceiling.                      \"round up\"\nx := 5 factorial.                       \"factorial\"\nx := -5 quo: 3.                         \"integer divide rounded toward zero\"\nx := -5 rem: 3.                         \"integer remainder rounded toward zero\"\nx := 28 gcd: 12.                        \"greatest common denominator\"\nx := 28 lcm: 12.                        \"least common multiple\"\nx := 100 ln.                            \"natural logarithm\"\nx := 100 log.                           \"base 10 logarithm\"\nx := 100 log: 10.                       \"floor of the log\"\nx := 180 degreesToRadians.              \"convert degrees to radians\"\nx := 3.14 radiansToDegrees.             \"convert radians to degrees\"\nx := 0.7 sin.                           \"sine\"\nx := 0.7 cos.                           \"cosine\"\nx := 0.7 tan.                           \"tangent\"\nx := 0.7 arcSin.                        \"arcsine\"\nx := 0.7 arcCos.                        \"arccosine\"\nx := 0.7 arcTan.                        \"arctangent\"\nx := 10 max: 20.                        \"get maximum of two numbers\"\nx := 10 min: 20.                        \"get minimum of two numbers\"\nx := Float pi.                          \"pi\"\nx := Float e.                           \"exp constant\"\nx := Float infinity.                    \"infinity\"\nx := Float nan.                         \"not-a-number\"\nx := Random new next; yourself. x next. \"random number stream (0.0 to 1.0)\"\nx := 100 atRandom.                      \"quick random number\"\n```\n\n#### Bitwise Manipulation:\n```smalltalk\n| b x |\nx := 16rFF bitAnd: 16r0F.           \"and bits\"\nx := 16rF0 bitOr: 16r0F.            \"or bits\"\nx := 16rFF bitXor: 16r0F.           \"xor bits\"\nx := 16rFF bitInvert.               \"invert bits\"\nx := 16r0F bitShift: 4.             \"left shift\"\nx := 16rF0 bitShift: -4.            \"right shift\"\n\"x := 16r80 bitAt: 7.\"              \"bit at position (0|1) [!Squeak]\"\nx := 16r80 highbit.                 \"position of highest bit set\"\nb := 16rFF allMask: 16r0F.          \"test if all bits set in mask set in receiver\"\nb := 16rFF anyMask: 16r0F.          \"test if any bits set in mask set in receiver\"\nb := 16rFF noMask: 16r0F.           \"test if all bits set in mask clear in receiver\"\n```\n\n#### Conversion:\n```smalltalk\n| x |\nx := 3.99 asInteger.               \"convert number to integer (truncates in Squeak)\"\nx := 3.99 asFraction.              \"convert number to fraction\"\nx := 3 asFloat.                    \"convert number to float\"\nx := 65 asCharacter.               \"convert integer to character\"\nx := $A asciiValue.                \"convert character to integer\"\nx := 3.99 printString.             \"convert object to string via printOn:\"\nx := 3.99 storeString.             \"convert object to string via storeOn:\"\nx := 15 radix: 16.                 \"convert to string in given base\"\nx := 15 printStringBase: 16.\nx := 15 storeStringBase: 16.\n```\n\n#### Blocks:\n- blocks are objects and may be assigned to a variable\n- value is last expression evaluated unless explicit return\n- blocks may be nested\n- specification [ arguments | | localvars | expressions ]\n- Squeak does not currently support localvars in blocks\n- max of three arguments allowed\n- `^`expression terminates block & method (exits all nested blocks)\n- blocks intended for long term storage should not contain `^`\n\n```smalltalk\n| x y z |\nx := [ y := 1. z := 2. ]. x value.                          \"simple block usage\"\nx := [ :argOne :argTwo |   argOne, ' and ' , argTwo.].      \"set up block with argument passing\"\nTranscript show: (x value: 'First' value: 'Second'); cr.    \"use block with argument passing\"\n\n\"x := [ | z | z := 1.]. *** localvars not available in squeak blocks\"\n```\n\n#### Method calls:\n- unary methods are messages with no arguments\n- binary methods\n- keyword methods are messages with selectors including colons standard categories/protocols:\n- initialize-release    (methods called for new instance)\n- accessing             (get/set methods)\n- testing               (boolean tests - is)\n- comparing             (boolean tests with parameter\n- displaying            (gui related methods)\n- printing              (methods for printing)\n- updating              (receive notification of changes)\n- private               (methods private to class)\n- instance-creation     (class methods for creating instance)\n\n```smalltalk\n| x |\nx := 2 sqrt.                                  \"unary message\"\nx := 2 raisedTo: 10.                          \"keyword message\"\nx := 194 * 9.                                 \"binary message\"\nTranscript show: (194 * 9) printString; cr.   \"combination (chaining)\"\nx := 2 perform: #sqrt.                        \"indirect method invocation\"\nTranscript                                    \"Cascading - send multiple messages to receiver\"\n   show: 'hello ';\n   show: 'world';\n   cr.\nx := 3 + 2; * 100.                            \"result=300. Sends message to same receiver (3)\"\n```\n\n#### Conditional Statements:\n```smalltalk\n| x |\nx > 10 ifTrue: [Transcript show: 'ifTrue'; cr].     \"if then\"\nx > 10 ifFalse: [Transcript show: 'ifFalse'; cr].   \"if else\"\n\n\"if then else\"\nx > 10                                                      \n   ifTrue: [Transcript show: 'ifTrue'; cr]\n   ifFalse: [Transcript show: 'ifFalse'; cr].\n\n\"if else then\"\nx > 10                                                      \n   ifFalse: [Transcript show: 'ifFalse'; cr]\n   ifTrue: [Transcript show: 'ifTrue'; cr].\nTranscript\n   show:\n      (x > 10\n         ifTrue: ['ifTrue']\n         ifFalse: ['ifFalse']);\n   cr.\n\n\"nested if then else\"\nTranscript                                                  \n   show:\n      (x > 10\n         ifTrue: [x > 5\n            ifTrue: ['A']\n            ifFalse: ['B']]\n         ifFalse: ['C']);\n   cr.\n\n\"switch functionality\"\nswitch := Dictionary new.     \nswitch at: $A put: [Transcript show: 'Case A'; cr].\nswitch at: $B put: [Transcript show: 'Case B'; cr].\nswitch at: $C put: [Transcript show: 'Case C'; cr].\nresult := (switch at: $B) value.\n```\n\n#### Iteration statements:\n```smalltalk\n| x y |\nx := 4. y := 1.\n[x > 0] whileTrue: [x := x - 1. y := y * 2].     \"while true loop\"\n[x >= 4] whileFalse: [x := x + 1. y := y * 2].   \"while false loop\"\nx timesRepeat: [y := y * 2].                     \"times repeat loop (i := 1 to x)\"\n1 to: x do: [:a | y := y * 2].                   \"for loop\"\n1 to: x by: 2 do: [:a | y := y / 2].             \"for loop with specified increment\"\n#(5 4 3) do: [:a | x := x + a].                  \"iterate over array elements\"\n```\n\n#### Character:\n```smalltalk\n| x y |\nx := $A.                         \"character assignment\"\ny := x isLowercase.              \"test if lower case\"\ny := x isUppercase.              \"test if upper case\"\ny := x isLetter.                 \"test if letter\"\ny := x isDigit.                  \"test if digit\"\ny := x isAlphaNumeric.           \"test if alphanumeric\"\ny := x isSeparator.              \"test if separator char\"\ny := x isVowel.                  \"test if vowel\"\ny := x digitValue.               \"convert to numeric digit value\"\ny := x asLowercase.              \"convert to lower case\"\ny := x asUppercase.              \"convert to upper case\"\ny := x asciiValue.               \"convert to numeric ascii value\"\ny := x asString.                 \"convert to string\"\nb := $A <= $B.                   \"comparison\"\ny := $A max: $B.\n```\n\n#### Symbol:\n```smalltalk\n| b x y |\nx := #Hello.                                      \"symbol assignment\"\ny := #Symbol, #Concatenation.                     \"symbol concatenation (result is string)\"\nb := x isEmpty.                                   \"test if symbol is empty\"\ny := x size.                                      \"string size\"\ny := x at: 2.                                     \"char at location\"\ny := x copyFrom: 2 to: 4.                         \"substring\"\ny := x indexOf: $e ifAbsent: [0].                 \"first position of character within string\"\nx do: [:a | Transcript show: a printString; cr].  \"iterate over the string\"\nb := x conform: [:a | (a >= $a) & (a <= $z)].     \"test if all elements meet condition\"\ny := x select: [:a | a > $a].                     \"return all elements that meet condition\"\ny := x asString.                                  \"convert symbol to string\"\ny := x asText.                                    \"convert symbol to text\"\ny := x asArray.                                   \"convert symbol to array\"\ny := x asOrderedCollection.                       \"convert symbol to ordered collection\"\ny := x asSortedCollection.                        \"convert symbol to sorted collection\"\ny := x asBag.                                     \"convert symbol to bag collection\"\ny := x asSet.                                     \"convert symbol to set collection\"\n```\n\n#### String:\n```smalltalk\n| b x y |\nx := 'This is a string'.                           \"string assignment\"\nx := 'String', 'Concatenation'.                    \"string concatenation\"\nb := x isEmpty.                                    \"test if string is empty\"\ny := x size.                                       \"string size\"\ny := x at: 2.                                      \"char at location\"\ny := x copyFrom: 2 to: 4.                          \"substring\"\ny := x indexOf: $a ifAbsent: [0].                  \"first position of character within string\"\nx := String new: 4.                                \"allocate string object\"\nx                                                  \"set string elements\"\n   at: 1 put: $a;\n   at: 2 put: $b;\n   at: 3 put: $c;\n   at: 4 put: $e.\nx := String with: $a with: $b with: $c with: $d.  \"set up to 4 elements at a time\"\nx do: [:a | Transcript show: a printString; cr].  \"iterate over the string\"\nb := x conform: [:a | (a >= $a) & (a <= $z)].     \"test if all elements meet condition\"\ny := x select: [:a | a > $a].                     \"return all elements that meet condition\"\ny := x asSymbol.                                  \"convert string to symbol\"\ny := x asArray.                                   \"convert string to array\"\nx := 'ABCD' asByteArray.                          \"convert string to byte array\"\ny := x asOrderedCollection.                       \"convert string to ordered collection\"\ny := x asSortedCollection.                        \"convert string to sorted collection\"\ny := x asBag.                                     \"convert string to bag collection\"\ny := x asSet.                                     \"convert string to set collection\"\ny := x shuffled.                                  \"randomly shuffle string\"\n```\n\n#### Array:\nFixed length collection\n- ByteArray:     Array limited to byte elements (0-255)\n- WordArray:     Array limited to word elements (0-2^32)\n\n```smalltalk\n| b x y z sum max |\nx := #(4 3 2 1).                                 \"constant array\"\nz := #(1 2 3 'hi').                              \"mixed type array\"\nx := Array with: 5 with: 4 with: 3 with: 2.      \"create array with up to 4 elements\"\nx := Array new: 4.                               \"allocate an array with specified size\"\nx                                                \"set array elements\"\n   at: 1 put: 5;\n   at: 2 put: 4;\n   at: 3 put: 3;\n   at: 4 put: 2.\nb := x isEmpty.                                  \"test if array is empty\"\ny := x size.                                     \"array size\"\ny := x at: 4.                                    \"get array element at index\"\nb := x includes: 3.                              \"test if element is in array\"\ny := x copyFrom: 2 to: 4.                        \"subarray\"\ny := x indexOf: 3 ifAbsent: [0].                 \"first position of element within array\"\ny := x occurrencesOf: 3.                         \"number of times object in collection\"\nx do: [:a | Transcript show: a printString; cr]. \"iterate over the array\"\nb := x conform: [:a | (a >= 1) & (a <= 4)].      \"test if all elements meet condition\"\ny := x select: [:a | a > 2].                     \"return collection of elements that pass test\"\ny := x reject: [:a | a < 2].                     \"return collection of elements that fail test\"\ny := x collect: [:a | a + a].                    \"transform each element for new collection\"\ny := x detect: [:a | a > 3] ifNone: [].          \"find position of first element that passes test\"\nsum := 0. x do: [:a | sum := sum + a]. sum.      \"sum array elements\"\nsum := 0. 1 to: (x size) \n            do: [:a | sum := sum + (x at: a)].   \"sum array elements\"\nsum := x inject: 0 into: [:a :c | a + c].        \"sum array elements\"\nmax := x inject: 0 into: [:a :c | (a > c)        \"find max element in array\"\n   ifTrue: [a]\n   ifFalse: [c]].\ny := x shuffled.                                 \"randomly shuffle collection\"\ny := x asArray.                                  \"convert to array\"\n\"y := x asByteArray.\"                            \"note: this instruction not available on Squeak\"\ny := x asWordArray.                              \"convert to word array\"\ny := x asOrderedCollection.                      \"convert to ordered collection\"\ny := x asSortedCollection.                       \"convert to sorted collection\"\ny := x asBag.                                    \"convert to bag collection\"\ny := x asSet.                                    \"convert to set collection\"\n```\n\n#### OrderedCollection:\nacts like an expandable array\n\n```smalltalk\n| b x y sum max |\nx := OrderedCollection \n     with: 4 with: 3 with: 2 with: 1.            \"create collection with up to 4 elements\"\nx := OrderedCollection new.                      \"allocate collection\"\nx add: 3; add: 2; add: 1; add: 4; yourself.      \"add element to collection\"\ny := x addFirst: 5.                              \"add element at beginning of collection\"\ny := x removeFirst.                              \"remove first element in collection\"\ny := x addLast: 6.                               \"add element at end of collection\"\ny := x removeLast.                               \"remove last element in collection\"\ny := x addAll: #(7 8 9).                         \"add multiple elements to collection\"\ny := x removeAll: #(7 8 9).                      \"remove multiple elements from collection\"\nx at: 2 put: 3.                                  \"set element at index\"\ny := x remove: 5 ifAbsent: [].                   \"remove element from collection\"\nb := x isEmpty.                                  \"test if empty\"\ny := x size.                                     \"number of elements\"\ny := x at: 2.                                    \"retrieve element at index\"\ny := x first.                                    \"retrieve first element in collection\"\ny := x last.                                     \"retrieve last element in collection\"\nb := x includes: 5.                              \"test if element is in collection\"\ny := x copyFrom: 2 to: 3.                        \"subcollection\"\ny := x indexOf: 3 ifAbsent: [0].                 \"first position of element within collection\"\ny := x occurrencesOf: 3.                         \"number of times object in collection\"\nx do: [:a | Transcript show: a printString; cr]. \"iterate over the collection\"\nb := x conform: [:a | (a >= 1) & (a <= 4)].      \"test if all elements meet condition\"\ny := x select: [:a | a > 2].                     \"return collection of elements that pass test\"\ny := x reject: [:a | a < 2].                     \"return collection of elements that fail test\"\ny := x collect: [:a | a + a].                    \"transform each element for new collection\"\ny := x detect: [:a | a > 3] ifNone: [].          \"find position of first element that passes test\"\nsum := 0. x do: [:a | sum := sum + a]. sum.      \"sum elements\"\nsum := 0. 1 to: (x size) \n            do: [:a | sum := sum + (x at: a)].   \"sum elements\"\nsum := x inject: 0 into: [:a :c | a + c].        \"sum elements\"\nmax := x inject: 0 into: [:a :c | (a > c)        \"find max element in collection\"\n   ifTrue: [a]\n   ifFalse: [c]].\ny := x shuffled.                                 \"randomly shuffle collection\"\ny := x asArray.                                  \"convert to array\"\ny := x asOrderedCollection.                      \"convert to ordered collection\"\ny := x asSortedCollection.                       \"convert to sorted collection\"\ny := x asBag.                                    \"convert to bag collection\"\ny := x asSet.                                    \"convert to set collection\"\n```\n\n#### SortedCollection:\nlike OrderedCollection except order of elements determined by sorting criteria\n\n```smalltalk\n| b x y sum max |\nx := SortedCollection \n     with: 4 with: 3 with: 2 with: 1.              \"create collection with up to 4 elements\"\nx := SortedCollection new.                         \"allocate collection\"\nx := SortedCollection sortBlock: [:a :c | a > c].  \"set sort criteria\"\nx add: 3; add: 2; add: 1; add: 4; yourself.        \"add element to collection\"\ny := x addFirst: 5.                                \"add element at beginning of collection\"\ny := x removeFirst.                                \"remove first element in collection\"\ny := x addLast: 6.                                 \"add element at end of collection\"\ny := x removeLast.                                 \"remove last element in collection\"\ny := x addAll: #(7 8 9).                           \"add multiple elements to collection\"\ny := x removeAll: #(7 8 9).                        \"remove multiple elements from collection\"\ny := x remove: 5 ifAbsent: [].                     \"remove element from collection\"\nb := x isEmpty.                                    \"test if empty\"\ny := x size.                                       \"number of elements\"\ny := x at: 2.                                      \"retrieve element at index\"\ny := x first.                                      \"retrieve first element in collection\"\ny := x last.                                       \"retrieve last element in collection\"\nb := x includes: 4.                                \"test if element is in collection\"\ny := x copyFrom: 2 to: 3.                          \"subcollection\"\ny := x indexOf: 3 ifAbsent: [0].                   \"first position of element within collection\"\ny := x occurrencesOf: 3.                           \"number of times object in collection\"\nx do: [:a | Transcript show: a printString; cr].   \"iterate over the collection\"\nb := x conform: [:a | (a >= 1) & (a <= 4)].        \"test if all elements meet condition\"\ny := x select: [:a | a > 2].                       \"return collection of elements that pass test\"\ny := x reject: [:a | a < 2].                       \"return collection of elements that fail test\"\ny := x collect: [:a | a + a].                      \"transform each element for new collection\"\ny := x detect: [:a | a > 3] ifNone: [].            \"find position of first element that passes test\"\nsum := 0. x do: [:a | sum := sum + a]. sum.        \"sum elements\"\nsum := 0. 1 to: (x size) \n            do: [:a | sum := sum + (x at: a)].     \"sum elements\"\nsum := x inject: 0 into: [:a :c | a + c].          \"sum elements\"\nmax := x inject: 0 into: [:a :c | (a > c)          \"find max element in collection\"\n   ifTrue: [a]\n   ifFalse: [c]].\ny := x asArray.                                     \"convert to array\"\ny := x asOrderedCollection.                         \"convert to ordered collection\"\ny := x asSortedCollection.                          \"convert to sorted collection\"\ny := x asBag.                                       \"convert to bag collection\"\ny := x asSet.                                       \"convert to set collection\"\n```\n\n#### Bag:\nlike OrderedCollection except elements are in no particular order\n\n```smalltalk\n| b x y sum max |\nx := Bag with: 4 with: 3 with: 2 with: 1.        \"create collection with up to 4 elements\"\nx := Bag new.                                    \"allocate collection\"\nx add: 4; add: 3; add: 1; add: 2; yourself.      \"add element to collection\"\nx add: 3 withOccurrences: 2.                     \"add multiple copies to collection\"\ny := x addAll: #(7 8 9).                         \"add multiple elements to collection\"\ny := x removeAll: #(7 8 9).                      \"remove multiple elements from collection\"\ny := x remove: 4 ifAbsent: [].                   \"remove element from collection\"\nb := x isEmpty.                                  \"test if empty\"\ny := x size.                                     \"number of elements\"\nb := x includes: 3.                              \"test if element is in collection\"\ny := x occurrencesOf: 3.                         \"number of times object in collection\"\nx do: [:a | Transcript show: a printString; cr]. \"iterate over the collection\"\nb := x conform: [:a | (a >= 1) & (a <= 4)].      \"test if all elements meet condition\"\ny := x select: [:a | a > 2].                     \"return collection of elements that pass test\"\ny := x reject: [:a | a < 2].                     \"return collection of elements that fail test\"\ny := x collect: [:a | a + a].                    \"transform each element for new collection\"\ny := x detect: [:a | a > 3] ifNone: [].          \"find position of first element that passes test\"\nsum := 0. x do: [:a | sum := sum + a]. sum.      \"sum elements\"\nsum := x inject: 0 into: [:a :c | a + c].        \"sum elements\"\nmax := x inject: 0 into: [:a :c | (a > c)        \"find max element in collection\"\n   ifTrue: [a]\n   ifFalse: [c]].\ny := x asOrderedCollection.                       \"convert to ordered collection\"\ny := x asSortedCollection.                        \"convert to sorted collection\"\ny := x asBag.                                     \"convert to bag collection\"\ny := x asSet.                                     \"convert to set collection\"\n```\n\n#### Set:\nlike Bag except duplicates not allowed\n\n#### IdentitySet:\nuses identity test (== rather than =)\n\n```smalltalk\n| b x y sum max |\nx := Set with: 4 with: 3 with: 2 with: 1.        \"create collection with up to 4 elements\"\nx := Set new.                                    \"allocate collection\"\nx add: 4; add: 3; add: 1; add: 2; yourself.      \"add element to collection\"\ny := x addAll: #(7 8 9).                         \"add multiple elements to collection\"\ny := x removeAll: #(7 8 9).                      \"remove multiple elements from collection\"\ny := x remove: 4 ifAbsent: [].                   \"remove element from collection\"\nb := x isEmpty.                                  \"test if empty\"\ny := x size.                                     \"number of elements\"\nx includes: 4.                                   \"test if element is in collection\"\nx do: [:a | Transcript show: a printString; cr]. \"iterate over the collection\"\nb := x conform: [:a | (a >= 1) & (a <= 4)].      \"test if all elements meet condition\"\ny := x select: [:a | a > 2].                     \"return collection of elements that pass test\"\ny := x reject: [:a | a < 2].                     \"return collection of elements that fail test\"\ny := x collect: [:a | a + a].                    \"transform each element for new collection\"\ny := x detect: [:a | a > 3] ifNone: [].          \"find position of first element that passes test\"\nsum := 0. x do: [:a | sum := sum + a]. sum.      \"sum elements\"\nsum := x inject: 0 into: [:a :c | a + c].        \"sum elements\"\nmax := x inject: 0 into: [:a :c | (a > c)        \"find max element in collection\"\n   ifTrue: [a]\n   ifFalse: [c]].\ny := x asArray.                                  \"convert to array\"\ny := x asOrderedCollection.                      \"convert to ordered collection\"\ny := x asSortedCollection.                       \"convert to sorted collection\"\ny := x asBag.                                    \"convert to bag collection\"\ny := x asSet.                                    \"convert to set collection\"\n```\n\n#### Interval:\n```smalltalk\n| b x y sum max |\nx := Interval from: 5 to: 10.                     \"create interval object\"\nx := 5 to: 10.\nx := Interval from: 5 to: 10 by: 2.               \"create interval object with specified increment\"\nx := 5 to: 10 by: 2.\nb := x isEmpty.                                   \"test if empty\"\ny := x size.                                      \"number of elements\"\nx includes: 9.                                    \"test if element is in collection\"\nx do: [:k | Transcript show: k printString; cr].  \"iterate over interval\"\nb := x conform: [:a | (a >= 1) & (a <= 4)].       \"test if all elements meet condition\"\ny := x select: [:a | a > 7].                      \"return collection of elements that pass test\"\ny := x reject: [:a | a < 2].                      \"return collection of elements that fail test\"\ny := x collect: [:a | a + a].                     \"transform each element for new collection\"\ny := x detect: [:a | a > 3] ifNone: [].           \"find position of first element that passes test\"\nsum := 0. x do: [:a | sum := sum + a]. sum.       \"sum elements\"\nsum := 0. 1 to: (x size) \n            do: [:a | sum := sum + (x at: a)].    \"sum elements\"\nsum := x inject: 0 into: [:a :c | a + c].         \"sum elements\"\nmax := x inject: 0 into: [:a :c | (a > c)         \"find max element in collection\"\n   ifTrue: [a]\n   ifFalse: [c]].\ny := x asArray.                                   \"convert to array\"\ny := x asOrderedCollection.                       \"convert to ordered collection\"\ny := x asSortedCollection.                        \"convert to sorted collection\"\ny := x asBag.                                     \"convert to bag collection\"\ny := x asSet.                                     \"convert to set collection\"\n```\n\n#### Associations:\n```smalltalk\n| x y |\nx := #myVar->'hello'.\ny := x key.\ny := x value.\n```\n\n#### Dictionary:\n#### IdentityDictionary:\nuses identity test (== rather than =)\n\n```smalltalk\n| b x y |\nx := Dictionary new.                   \"allocate collection\"\nx add: #a->4; \n  add: #b->3; \n  add: #c->1; \n  add: #d->2; yourself.                \"add element to collection\"\nx at: #e put: 3.                       \"set element at index\"\nb := x isEmpty.                        \"test if empty\"\ny := x size.                           \"number of elements\"\ny := x at: #a ifAbsent: [].            \"retrieve element at index\"\ny := x keyAtValue: 3 ifAbsent: [].     \"retrieve key for given value with error block\"\ny := x removeKey: #e ifAbsent: [].     \"remove element from collection\"\nb := x includes: 3.                    \"test if element is in values collection\"\nb := x includesKey: #a.                \"test if element is in keys collection\"\ny := x occurrencesOf: 3.               \"number of times object in collection\"\ny := x keys.                           \"set of keys\"\ny := x values.                         \"bag of values\"\nx do: [:a | Transcript show: a printString; cr].            \"iterate over the values collection\"\nx keysDo: [:a | Transcript show: a printString; cr].        \"iterate over the keys collection\"\nx associationsDo: [:a | Transcript show: a printString; cr].\"iterate over the associations\"\nx keysAndValuesDo: [:aKey :aValue | Transcript              \"iterate over keys and values\"\n   show: aKey printString; space;\n   show: aValue printString; cr].\nb := x conform: [:a | (a >= 1) & (a <= 4)].      \"test if all elements meet condition\"\ny := x select: [:a | a > 2].                     \"return collection of elements that pass test\"\ny := x reject: [:a | a < 2].                     \"return collection of elements that fail test\"\ny := x collect: [:a | a + a].                    \"transform each element for new collection\"\ny := x detect: [:a | a > 3] ifNone: [].          \"find position of first element that passes test\"\nsum := 0. x do: [:a | sum := sum + a]. sum.      \"sum elements\"\nsum := x inject: 0 into: [:a :c | a + c].        \"sum elements\"\nmax := x inject: 0 into: [:a :c | (a > c)        \"find max element in collection\"\n   ifTrue: [a]\n   ifFalse: [c]].\ny := x asArray.                                   \"convert to array\"\ny := x asOrderedCollection.                       \"convert to ordered collection\"\ny := x asSortedCollection.                        \"convert to sorted collection\"\ny := x asBag.                                     \"convert to bag collection\"\ny := x asSet.                                     \"convert to set collection\"\n\nSmalltalk at: #CMRGlobal put: 'CMR entry'.        \"put global in Smalltalk Dictionary\"\nx := Smalltalk at: #CMRGlobal.                    \"read global from Smalltalk Dictionary\"\nTranscript show: (CMRGlobal printString).         \"entries are directly accessible by name\"\nSmalltalk keys do: [ :k |                         \"print out all classes\"\n   ((Smalltalk at: k) isKindOf: Class)\n      ifFalse: [Transcript show: k printString; cr]].\nSmalltalk at: #CMRDictionary put: (Dictionary new). \"set up user defined dictionary\"\nCMRDictionary at: #MyVar1 put: 'hello1'.            \"put entry in dictionary\"\nCMRDictionary add: #MyVar2->'hello2'.               \"add entry to dictionary use key->value combo\"\nCMRDictionary size.                                 \"dictionary size\"\nCMRDictionary keys do: [ :k |                       \"print out keys in dictionary\"\n   Transcript show: k printString; cr].\nCMRDictionary values do: [ :k |                     \"print out values in dictionary\"\n   Transcript show: k printString; cr].\nCMRDictionary keysAndValuesDo: [:aKey :aValue |     \"print out keys and values\"\n   Transcript\n      show: aKey printString;\n      space;\n      show: aValue printString;\n      cr].\nCMRDictionary associationsDo: [:aKeyValue |           \"another iterator for printing key values\"\n   Transcript show: aKeyValue printString; cr].\nSmalltalk removeKey: #CMRGlobal ifAbsent: [].         \"remove entry from Smalltalk dictionary\"\nSmalltalk removeKey: #CMRDictionary ifAbsent: [].     \"remove user dictionary from Smalltalk dictionary\"\n```\n\n#### Internal Stream:\n```smalltalk\n| b x ios |\nios := ReadStream on: 'Hello read stream'.\nios := ReadStream on: 'Hello read stream' from: 1 to: 5.\n[(x := ios nextLine) notNil] whileTrue: [Transcript show: x; cr].\nios position: 3.\nios position.\nx := ios next.\nx := ios peek.\nx := ios contents.\nb := ios atEnd.\n\nios := ReadWriteStream on: 'Hello read stream'.\nios := ReadWriteStream on: 'Hello read stream' from: 1 to: 5.\nios := ReadWriteStream with: 'Hello read stream'.\nios := ReadWriteStream with: 'Hello read stream' from: 1 to: 10.\nios position: 0.\n[(x := ios nextLine) notNil] whileTrue: [Transcript show: x; cr].\nios position: 6.\nios position.\nios nextPutAll: 'Chris'.\nx := ios next.\nx := ios peek.\nx := ios contents.\nb := ios atEnd.\n```\n\n#### FileStream:\n```smalltalk\n| b x ios |\nios := FileStream newFileNamed: 'ios.txt'.\nios nextPut: $H; cr.\nios nextPutAll: 'Hello File'; cr.\n'Hello File' printOn: ios.\n'Hello File' storeOn: ios.\nios close.\n\nios := FileStream oldFileNamed: 'ios.txt'.\n[(x := ios nextLine) notNil] whileTrue: [Transcript show: x; cr].\nios position: 3.\nx := ios position.\nx := ios next.\nx := ios peek.\nb := ios atEnd.\nios close.\n```\n\n#### Date:\n```smalltalk\n| x y |\nx := Date today.                                \"create date for today\"\nx := Date dateAndTimeNow.                       \"create date from current time/date\"\nx := Date readFromString: '01/02/1999'.         \"create date from formatted string\"\nx := Date newDay: 12 month: #July year: 1999    \"create date from parts\"\nx := Date fromDays: 36000.                      \"create date from elapsed days since 1/1/1901\"\ny := Date dayOfWeek: #Monday.                   \"day of week as int (1-7)\"\ny := Date indexOfMonth: #January.               \"month of year as int (1-12)\"\ny := Date daysInMonth: 2 forYear: 1996.         \"day of month as int (1-31)\"\ny := Date daysInYear: 1996.                     \"days in year (365|366)\"\ny := Date nameOfDay: 1                          \"weekday name (#Monday,...)\"\ny := Date nameOfMonth: 1.                       \"month name (#January,...)\"\ny := Date leapYear: 1996.                       \"1 if leap year; 0 if not leap year\"\ny := x weekday.                                 \"day of week (#Monday,...)\"\ny := x previous: #Monday.                       \"date for previous day of week\"\ny := x dayOfMonth.                              \"day of month (1-31)\"\ny := x day.                                     \"day of year (1-366)\"\ny := x firstDayOfMonth.                         \"day of year for first day of month\"\ny := x monthName.                               \"month of year (#January,...)\"\ny := x monthIndex.                              \"month of year (1-12)\"\ny := x daysInMonth.                             \"days in month (1-31)\"\ny := x year.                                    \"year (19xx)\"\ny := x daysInYear.                              \"days in year (365|366)\"\ny := x daysLeftInYear.                          \"days left in year (364|365)\"\ny := x asSeconds.                               \"seconds elapsed since 1/1/1901\"\ny := x addDays: 10.                             \"add days to date object\"\ny := x subtractDays: 10.                        \"subtract days to date object\"\ny := x subtractDate: (Date today).              \"subtract date (result in days)\"\ny := x printFormat: #(2 1 3 $/ 1 1).            \"print formatted date\"\nb := (x <= Date today).                         \"comparison\"\n```\n\n#### Time:\n```smalltalk\n| x y |\nx := Time now.                                      \"create time from current time\"\nx := Time dateAndTimeNow.                           \"create time from current time/date\"\nx := Time readFromString: '3:47:26 pm'.             \"create time from formatted string\"\nx := Time fromSeconds: (60 * 60 * 4).               \"create time from elapsed time from midnight\"\ny := Time millisecondClockValue.                    \"milliseconds since midnight\"\ny := Time totalSeconds.                             \"total seconds since 1/1/1901\"\ny := x seconds.                                     \"seconds past minute (0-59)\"\ny := x minutes.                                     \"minutes past hour (0-59)\"\ny := x hours.                                       \"hours past midnight (0-23)\"\ny := x addTime: (Time now).                         \"add time to time object\"\ny := x subtractTime: (Time now).                    \"subtract time to time object\"\ny := x asSeconds.                                   \"convert time to seconds\"\nx := Time millisecondsToRun: [                      \"timing facility\"\n   1 to: 1000 do: [:index | y := 3.14 * index]].\nb := (x <= Time now).                               \"comparison\"\n```\n\n#### Point:\n```smalltalk\n| x y |\nx := 200@100.                            \"obtain a new point\"\ny := x x.                                \"x coordinate\"\ny := x y.                                \"y coordinate\"\nx := 200@100 negated.                    \"negates x and y\"\nx := (-200@-100) abs.                    \"absolute value of x and y\"\nx := (200.5@100.5) rounded.              \"round x and y\"\nx := (200.5@100.5) truncated.            \"truncate x and y\"\nx := 200@100 + 100.                      \"add scale to both x and y\"\nx := 200@100 - 100.                      \"subtract scale from both x and y\"\nx := 200@100 * 2.                        \"multiply x and y by scale\"\nx := 200@100 / 2.                        \"divide x and y by scale\"\nx := 200@100 // 2.                       \"divide x and y by scale\"\nx := 200@100 \\\\ 3.                       \"remainder of x and y by scale\"\nx := 200@100 + 50@25.                    \"add points\"\nx := 200@100 - 50@25.                    \"subtract points\"\nx := 200@100 * 3@4.                      \"multiply points\"\nx := 200@100 // 3@4.                     \"divide points\"\nx := 200@100 max: 50@200.                \"max x and y\"\nx := 200@100 min: 50@200.                \"min x and y\"\nx := 20@5 dotProduct: 10@2.              \"sum of product (x1*x2 + y1*y2)\"\n```\n\n#### Rectangle:\n```smalltalk\nRectangle fromUser.\n```\n\n#### Pen:\n```smalltalk\n| myPen |\nDisplay restoreAfter: [\n   Display fillWhite.\n\nmyPen := Pen new.                            \"get graphic pen\"\nmyPen squareNib: 1.\nmyPen color: (Color blue).                   \"set pen color\"\nmyPen home.                                  \"position pen at center of display\"\nmyPen up.                                    \"makes nib unable to draw\"\nmyPen down.                                  \"enable the nib to draw\"\nmyPen north.                                 \"points direction towards top\"\nmyPen turn: -180.                            \"add specified degrees to direction\"\nmyPen direction.                             \"get current angle of pen\"\nmyPen go: 50.                                \"move pen specified number of pixels\"\nmyPen location.                              \"get the pen position\"\nmyPen goto: 200@200.                         \"move to specified point\"\nmyPen place: 250@250.                        \"move to specified point without drawing\"\nmyPen print: 'Hello World' \n      withFont: (TextStyle default fontAt: 1).\nDisplay extent.                              \"get display width@height\"\nDisplay width.                               \"get display width\"\nDisplay height.                              \"get display height\"\n\n].\n```\n\n#### Dynamic Message Calling/Compiling:\n```smalltalk\n| receiver message result argument keyword1 keyword2 argument1 argument2 |\n\n\"unary message\"\nreceiver := 5.\nmessage := 'factorial' asSymbol.\nresult := receiver perform: message.\nresult := Compiler evaluate: ((receiver storeString), ' ', message).\nresult := (Message new setSelector: message arguments: #()) sentTo: receiver.\n\n\"binary message\"\nreceiver := 1.\nmessage := '+' asSymbol.\nargument := 2.\nresult := receiver perform: message withArguments: (Array with: argument).\nresult := Compiler evaluate: ((receiver storeString), ' ', message, ' ', (argument storeString)).\nresult := (Message new setSelector: message arguments: (Array with: argument)) sentTo: receiver.\n\n\"keyword messages\"\nreceiver := 12.\nkeyword1 := 'between:' asSymbol.\nkeyword2 := 'and:' asSymbol.\nargument1 := 10.\nargument2 := 20.\n\nresult := receiver\n   perform: (keyword1, keyword2) asSymbol\n   withArguments: (Array with: argument1 with: argument2).\n   \nresult := Compiler evaluate:\n   ((receiver storeString), ' ', keyword1, (argument1 storeString) , ' ', keyword2, (argument2 storeString)).\n   \nresult := (Message\n   new\n      setSelector: (keyword1, keyword2) asSymbol\n      arguments: (Array with: argument1 with: argument2))\n   sentTo: receiver.\n```\n\n#### Class/Meta-Class:\n```smalltalk\n| b x |\nx := String name.                     \"class name\"\nx := String category.                 \"organization category\"\nx := String comment.                  \"class comment\"\nx := String kindOfSubclass.           \"subclass type - subclass: variableSubclass, etc\"\nx := String definition.               \"class definition\"\nx := String instVarNames.             \"immediate instance variable names\"\nx := String allInstVarNames.          \"accumulated instance variable names\"\nx := String classVarNames.            \"immediate class variable names\"\nx := String allClassVarNames.         \"accumulated class variable names\"\nx := String sharedPools.              \"immediate dictionaries used as shared pools\"\nx := String allSharedPools.           \"accumulated dictionaries used as shared pools\"\nx := String selectors.                \"message selectors for class\"\nx := String sourceCodeAt: #size.      \"source code for specified method\"\nx := String allInstances.             \"collection of all instances of class\"\nx := String superclass.               \"immediate superclass\"\nx := String allSuperclasses.          \"accumulated superclasses\"\nx := String withAllSuperclasses.      \"receiver class and accumulated superclasses\"\nx := String subclasses.               \"immediate subclasses\"\nx := String allSubclasses.            \"accumulated subclasses\"\nx := String withAllSubclasses.        \"receiver class and accumulated subclasses\"\nb := String instSize.                 \"number of named instance variables\"\nb := String isFixed.                  \"true if no indexed instance variables\"\nb := String isVariable.               \"true if has indexed instance variables\"\nb := String isPointers.               \"true if index instance vars contain objects\"\nb := String isBits.                   \"true if index instance vars contain bytes/words\"\nb := String isBytes.                  \"true if index instance vars contain bytes\"\nb := String isWords.                  \"true if index instance vars contain words\"\nObject withAllSubclasses size.        \"get total number of class entries\"\n```\n\n#### Debugging:\n```smalltalk\n| a b x |\nx yourself.                             \"returns receiver\"\nString browse.                          \"browse specified class\"\nx inspect.                              \"open object inspector window\"\nx confirm: 'Is this correct?'.\nx halt.                                 \"breakpoint to open debugger window\"\nx halt: 'Halt message'.\nx notify: 'Notify text'.\nx error: 'Error string'.                \"open up error window with title\"\nx doesNotUnderstand: #cmrMessage.       \"flag message is not handled\"\nx shouldNotImplement.                   \"flag message should not be implemented\"\nx subclassResponsibility.               \"flag message as abstract\"\nx errorImproperStore.                   \"flag an improper store into indexable object\"\nx errorNonIntegerIndex.                 \"flag only integers should be used as index\"\nx errorSubscriptBounds.                 \"flag subscript out of bounds\"\nx primitiveFailed.                      \"system primitive failed\"\n\na := 'A1'. b := 'B2'. a become: b.      \"switch two objects\"\nTranscript show: a, b; cr.\n```\n\n#### Miscellaneous\n```smalltalk\n| x |\nx := 1.2 hash.                                  \"hash value for object\"\ny := x copy.                                    \"copy object\"\ny := x shallowCopy.                             \"copy object (not overridden)\"\ny := x deepCopy.                                \"copy object and instance vars\"\ny := x veryDeepCopy.                            \"complete tree copy using a dictionary\"\n\"Smalltalk condenseChanges.\"                    \"compress the change file\"\nx := FillInTheBlank request: 'Prompt Me'.       \"prompt user for input\"\nUtilities openCommandKeyHelp\n```\n\n## Ready For More?\n\n### Online Smalltalk systems\nMost Smalltalks are either free as in OSS or have a free downloadable version with some payment required for commercial usage.\n* [Squeak](https://www.squeak.org)\n* [Pharo](http://pharo.org)\n* [Smalltalk/X](https://www.exept.de/en/smalltalk-x.html)\n* [Gemstone](http://gemtalksystems.com/)\n* [VA Smalltalk](http://www.instantiations.com/products/vasmalltalk/)\n* [VisualWorks Smalltalk](http://www.cincomsmalltalk.com/)\n\n### Online Smalltalk books and articles\n* [Smalltalk Programming Resources](http://www.whoishostingthis.com/resources/smalltalk/)\n* [Smalltalk Cheatsheet](http://www.angelfire.com/tx4/cus/notes/smalltalk.html)\n* [Smalltalk-72 Manual](http://www.bitsavers.org/pdf/xerox/parc/techReports/Smalltalk-72_Instruction_Manual_Mar76.pdf)\n* [GNU Smalltalk User's Guide](https://www.gnu.org/software/smalltalk/manual/html_node/Tutorial.html)\n\n#### Historical Documentation(s)\n* [BYTE: A Special issue on Smalltalk](https://archive.org/details/byte-magazine-1981-08)\n* [Smalltalk-72 Manual](http://www.bitsavers.org/pdf/xerox/parc/techReports/Smalltalk-72_Instruction_Manual_Mar76.pdf)\n* [Smalltalk, Objects, and Design](https://books.google.co.in/books?id=W8_Une9cbbgC&printsec=frontcover&dq=smalltalk&hl=en&sa=X&ved=0CCIQ6AEwAWoVChMIw63Vo6CpyAIV0HGOCh3S2Alf#v=onepage&q=smalltalk&f=false)\n* [Smalltalk: An Introduction to Application Development Using VisualWorks](https://books.google.co.in/books?id=zalQAAAAMAAJ&q=smalltalk&dq=smalltalk&hl=en&sa=X&ved=0CCgQ6AEwAmoVChMIw63Vo6CpyAIV0HGOCh3S2Alf/)\n"
        },
        {
          "name": "solidity.md",
          "type": "blob",
          "size": 32.9189453125,
          "content": "---\nname: Solidity\nfilename: learnSolidity.sol\ncontributors:\n  - [\"Nemil Dalal\", \"https://www.nemil.com\"]\n  - [\"Joseph Chow\", \"\"]\n  - [\"Bhoomtawath Plinsut\", \"https://github.com/varshard\"]\n  - [\"Shooter\", \"https://github.com/liushooter\"]\n  - [\"Patrick Collins\", \"https://gist.github.com/PatrickAlphaC\"]\n---\n\nSolidity lets you program on [Ethereum](https://www.ethereum.org/), a\nblockchain-based virtual machine that allows the creation and\nexecution of smart contracts, without requiring centralized or trusted parties.\n\nSolidity is a statically typed, contract programming language that has\nsimilarities to JavaScript and C. Like objects in OOP, each contract contains\nstate variables, functions, and common data types. Contract-specific features\ninclude modifier (guard) clauses, event notifiers for listeners, and custom\nglobal variables.\n\nSome Ethereum contract examples include crowdfunding, voting, [decentralized finance](https://defipulse.com/), and blind auctions.\n\nThere is a high risk and high cost of errors in Solidity code, so you must be very careful to test\nand slowly rollout. WITH THE RAPID CHANGES IN ETHEREUM, THIS DOCUMENT IS UNLIKELY TO STAY UP TO\nDATE, SO YOU SHOULD FOLLOW THE SOLIDITY CHAT ROOM AND ETHEREUM BLOG FOR THE LATEST. ALL CODE HERE IS\nPROVIDED AS IS, WITH SUBSTANTIAL RISK OF ERRORS OR DEPRECATED CODE PATTERNS.\n\nUnlike other code, you may also need to add in design patterns like pausing, deprecation, and\nthrottling usage to reduce risk. This document primarily discusses syntax, and so excludes many\npopular design patterns.\n\nAs Solidity and Ethereum are under active development, experimental or beta\nfeatures are typically marked, and subject to change. Pull requests welcome.\n\n# Working with Remix and Metamask\n\nOne of the easiest ways to build, deploy, and test solidity code is by using the:\n\n1. [Remix Web IDE](https://remix.ethereum.org/) \n2. [Metamask wallet](https://metamask.io/).\n\nTo get started, [download the Metamask Browser Extension](https://metamask.io/). \n\nOnce installed, we will be working with Remix. The below code will be pre-loaded, but before we head over there, let's look at a few tips to get started with remix. Load it all by [hitting this link](https://remix.ethereum.org/#version=soljson-v0.6.6+commit.6c089d02.js&optimize=false&evmVersion=null&gist=f490c0d51141dd0515244db40bbd0c17&runs=200).\n\n1. Choose the Solidity compiler\n\n![Solidity-in-remix](/images/solidity/remix-solidity.png)\n\n2. Open the file loaded by that link\n\n![Solidity-choose-file](/images/solidity/remix-choose-file.png)\n\n3. Compile the file\n\n![Solidity-compile](/images/solidity/remix-compile.png)\n\n4. Deploy \n\n![Solidity-deploy](/images/solidity/remix-deploy.png)\n\n5. Play with contracts\n\n![Solidity-deploy](/images/solidity/remix-interact.png)\n\nYou've deployed your first contract! Congrats!\n\nYou can test out and play with the functions defined. Check out the comments to learn about what each does. \n\n\n## Working on a testnet\n\nDeploying and testing on a testnet is the most accurate way to test your smart contracts in solidity. \nTo do this let's first get some testnet ETH from the Kovan testnet. \n\n[Pop into this Gitter Channel](https://gitter.im/kovan-testnet/faucet) and drop your metamask address in.\n\nIn your metamask, you'll want to change to the `Kovan` testnet. \n\n![Solidity-in-remix](/images/solidity/metamask-kovan.png)\n\nYou'll be given some free test Ethereum. Ethereum is needed to deploy smart contracts when working with a testnet. \n\nIn the previous example, we didn't use a testnet, we deployed to a fake virtual environment. \nWhen working with a testnet, we can actually see and interact with our contracts in a persistent manner. \n\nTo deploy to a testnet, on the `#4 Deploy` step, change your `environment` to `injected web3`.\nThis will use whatever network is currently selected in your metamask as the network to deploy to. \n\n![Solidity-in-remix](/images/solidity/remix-testnet.png)\n\nFor now, please continue to use the `JavaScript VM` unless instructed otherwise. When you deploy to a testnet, metamask will pop up to ask you to \"confirm\" the transaction. Hit yes, and after a delay, you'll get the same contract interface at the bottom of your screen. \n\n\n```solidity\n// First, a simple Bank contract\n// Allows deposits, withdrawals, and balance checks\n\n// simple_bank.sol (note .sol extension)\n/* **** START EXAMPLE **** */\n\n// Declare the source file compiler version\npragma solidity ^0.6.6;\n\n// Start with Natspec comment (the three slashes)\n// used for documentation - and as descriptive data for UI elements/actions\n\n/// @title SimpleBank\n/// @author nemild\n\n/* 'contract' has similarities to 'class' in other languages (class variables,\ninheritance, etc.) */\ncontract SimpleBank { // CapWords\n    // Declare state variables outside function, persist through life of contract\n\n    // dictionary that maps addresses to balances\n    // always be careful about overflow attacks with numbers\n    mapping (address => uint) private balances;\n\n    // \"private\" means that other contracts can't directly query balances\n    // but data is still viewable to other parties on blockchain\n\n    address public owner;\n    // 'public' makes externally readable (not writeable) by users or contracts\n\n    // Events - publicize actions to external listeners\n    event LogDepositMade(address accountAddress, uint amount);\n\n    // Constructor, can receive one or many variables here; only one allowed\n    constructor() public {\n        // msg provides details about the message that's sent to the contract\n        // msg.sender is contract caller (address of contract creator)\n        owner = msg.sender;\n    }\n\n    /// @notice Deposit ether into bank\n    /// @return The balance of the user after the deposit is made\n    function deposit() public payable returns (uint) {\n        // Use 'require' to test user inputs, 'assert' for internal invariants\n        // Here we are making sure that there isn't an overflow issue\n        require((balances[msg.sender] + msg.value) >= balances[msg.sender]);\n\n        balances[msg.sender] += msg.value;\n        // no \"this.\" or \"self.\" required with state variable\n        // all values set to data type's initial value by default\n\n        emit LogDepositMade(msg.sender, msg.value); // fire event\n\n        return balances[msg.sender];\n    }\n\n    /// @notice Withdraw ether from bank\n    /// @dev This does not return any excess ether sent to it\n    /// @param withdrawAmount amount you want to withdraw\n    /// @return remainingBal\n    function withdraw(uint withdrawAmount) public returns (uint remainingBal) {\n        require(withdrawAmount <= balances[msg.sender]);\n\n        // Note the way we deduct the balance right away, before sending\n        // Every .transfer/.send from this contract can call an external function\n        // This may allow the caller to request an amount greater\n        // than their balance using a recursive call\n        // Aim to commit state before calling external functions, including .transfer/.send\n        balances[msg.sender] -= withdrawAmount;\n\n        // this automatically throws on a failure, which means the updated balance is reverted\n        msg.sender.transfer(withdrawAmount);\n\n        return balances[msg.sender];\n    }\n\n    /// @notice Get balance\n    /// @return The balance of the user\n    // 'view' (ex: constant) prevents function from editing state variables;\n    // allows function to run locally/off blockchain\n    function balance() view public returns (uint) {\n        return balances[msg.sender];\n    }\n}\n// ** END EXAMPLE **\n\n\n// Now, the basics of Solidity\n\n// 1. DATA TYPES AND ASSOCIATED METHODS\n// uint used for currency amount (there are no doubles\n//  or floats) and for dates (in unix time)\nuint x;\n\n// int of 256 bits, cannot be changed after instantiation\nint constant a = 8;\nint256 constant a = 8; // same effect as line above, here the 256 is explicit\nuint constant VERSION_ID = 0x123A1; // A hex constant\n// with 'constant', compiler replaces each occurrence with actual value\n\n// All state variables (those outside a function)\n// are by default 'internal' and accessible inside contract\n// and in all contracts that inherit ONLY\n// Need to explicitly set to 'public' to allow external contracts to access\nint256 public a = 8;\n\n// For int and uint, can explicitly set space in steps of 8 up to 256\n// e.g., int8, int16, int24\nuint8 b;\nint64 c;\nuint248 e;\n\n// Be careful that you don't overflow, and protect against attacks that do\n// For example, for an addition, you'd do:\nuint256 c = a + b;\nassert(c >= a); // assert tests for internal invariants; require is used for user inputs\n// For more examples of common arithmetic issues, see Zeppelin's SafeMath library\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n\n\n// No random functions built in, you can get a pseduo-random number by hashing the current blockhash, or get a truly random number using something like Chainlink VRF. \n// https://docs.chain.link/docs/get-a-random-number\n\n// Type casting\nint x = int(b);\n\nbool b = true; // or do 'var b = true;' for inferred typing\n\n// Addresses - holds 20 byte/160 bit Ethereum addresses\n// No arithmetic allowed\naddress public owner;\n\n// Types of accounts:\n// Contract account: address set on create (func of creator address, num transactions sent)\n// External Account: (person/external entity): address created from public key\n\n// Add 'public' field to indicate publicly/externally accessible\n// a getter is automatically created, but NOT a setter\n\n// All addresses can be sent ether\nowner.transfer(SOME_BALANCE); // fails and reverts on failure\n\n// Can also do a lower level .send call, which returns a false if it failed\nif (owner.send) {} // REMEMBER: wrap send in 'if', as contract addresses have\n// functions executed on send and these can fail\n// Also, make sure to deduct balances BEFORE attempting a send, as there is a risk of a recursive\n// call that can drain the contract\n\n// Can check balance\nowner.balance; // the balance of the owner (user or contract)\n\n\n// Bytes available from 1 to 32\nbyte a; // byte is same as bytes1\nbytes2 b;\nbytes32 c;\n\n// Dynamically sized bytes\nbytes m; // A special array, same as byte[] array (but packed tightly)\n// More expensive than byte1-byte32, so use those when possible\n\n// same as bytes, but does not allow length or index access (for now)\nstring n = \"hello\"; // stored in UTF8, note double quotes, not single\n// string utility functions to be added in future\n// prefer bytes32/bytes, as UTF8 uses more storage\n\n// Type inference\n// var does inferred typing based on first assignment,\n// can't be used in functions parameters\nvar a = true;\n// use carefully, inference may provide wrong type\n// e.g., an int8, when a counter needs to be int16\n\n// var can be used to assign function to variable\nfunction a(uint x) returns (uint) {\n    return x * 2;\n}\nvar f = a;\nf(22); // call\n\n// by default, all values are set to 0 on instantiation\n\n// Delete can be called on most types\n// (does NOT destroy value, but sets value to 0, the initial value)\ndelete x;\n\n\n// Destructuring/Tuples\n(x, y) = (2, 7); // assign/swap multiple values\n\n\n// 2. DATA STRUCTURES\n// Arrays\nbytes32[5] nicknames; // static array\nbytes32[] names; // dynamic array\nuint newLength = names.push(\"John\"); // adding returns new length of the array\n// Length\nnames.length; // get length\nnames.length = 1; // lengths can be set (for dynamic arrays in storage only)\n\n// multidimensional array\nuint[][5] x; // arr with 5 dynamic array elements (opp order of most languages)\n\n// Dictionaries (any type to any other type)\nmapping (string => uint) public balances;\nbalances[\"charles\"] = 1;\n// balances[\"ada\"] result is 0, all non-set key values return zeroes\n// 'public' allows following from another contract\ncontractName.balances(\"charles\"); // returns 1\n// 'public' created a getter (but not setter) like the following:\nfunction balances(string _account) returns (uint balance) {\n    return balances[_account];\n}\n\n// Nested mappings\nmapping (address => mapping (address => uint)) public custodians;\n\n// To delete\ndelete balances[\"John\"];\ndelete balances; // sets all elements to 0\n\n// Unlike other languages, CANNOT iterate through all elements in\n// mapping, without knowing source keys - can build data structure\n// on top to do this\n\n// Structs\nstruct Bank {\n    address owner;\n    uint balance;\n}\nBank b = Bank({\n    owner: msg.sender,\n    balance: 5\n});\n// or\nBank c = Bank(msg.sender, 5);\n\nc.balance = 5; // set to new value\ndelete b;\n// sets to initial value, set all variables in struct to 0, except mappings\n\n// Enums\nenum State { Created, Locked, Inactive }; // often used for state machine\nState public state; // Declare variable from enum\nstate = State.Created;\n// enums can be explicitly converted to ints\nuint createdState = uint(State.Created); //  0\n\n// Data locations: Memory vs. storage vs. calldata - all complex types (arrays,\n// structs) have a data location\n// 'memory' does not persist, 'storage' does\n// Default is 'storage' for local and state variables; 'memory' for func params\n// stack holds small local variables\n\n// for most types, can explicitly set which data location to use\n\n\n// 3. Simple operators\n// Comparisons, bit operators and arithmetic operators are provided\n// exponentiation: **\n// exclusive or: ^\n// bitwise negation: ~\n\n\n// 4. Global Variables of note\n// ** this **\nthis; // address of contract\n// often used at end of contract life to transfer remaining balance to party\nthis.balance;\nthis.someFunction(); // calls func externally via call, not via internal jump\n\n// ** msg - Current message received by the contract ** **\nmsg.sender; // address of sender\nmsg.value; // amount of ether provided to this contract in wei, the function should be marked \"payable\"\nmsg.data; // bytes, complete call data\nmsg.gas; // remaining gas\n\n// ** tx - This transaction **\ntx.origin; // address of sender of the transaction\ntx.gasprice; // gas price of the transaction\n\n// ** block - Information about current block **\nnow; // current time (approximately), alias for block.timestamp (uses Unix time)\n// Note that this can be manipulated by miners, so use carefully\n\nblock.number; // current block number\nblock.difficulty; // current block difficulty\nblock.blockhash(1); // returns bytes32, only works for most recent 256 blocks\nblock.gasLimit();\n\n// ** storage - Persistent storage hash **\nstorage['abc'] = 'def'; // maps 256 bit words to 256 bit words\n\n\n// 5. FUNCTIONS AND MORE\n// A. Functions\n// Simple function\nfunction increment(uint x) returns (uint) {\n    x += 1;\n    return x;\n}\n\n// Functions can return many arguments,\n// and by specifying returned arguments name explicit return is not needed\nfunction increment(uint x, uint y) returns (uint x, uint y) {\n    x += 1;\n    y += 1;\n}\n// Call previous function\nuint (a,b) = increment(1,1);\n\n// 'view' (alias for 'constant')\n// indicates that function does not/cannot change persistent vars\n// View function execute locally, not on blockchain\n// Noted: constant keyword will soon be deprecated.\nuint y = 1;\n\nfunction increment(uint x) view returns (uint x) {\n    x += 1;\n    y += 1; // this line would fail\n    // y is a state variable, and can't be changed in a view function\n}\n\n// 'pure' is more strict than 'view' or 'constant', and does not\n// even allow reading of state vars\n// The exact rules are more complicated, so see more about\n// view/pure:\n// http://solidity.readthedocs.io/en/develop/contracts.html#view-functions\n\n// 'Function Visibility specifiers'\n// These can be placed where 'view' is, including:\n// public - visible externally and internally (default for function)\n// external - only visible externally (including a call made with this.)\n// private - only visible in the current contract\n// internal - only visible in current contract, and those deriving from it\n\n// Generally, a good idea to mark each function explicitly\n\n// Functions hoisted - and can assign a function to a variable\nfunction a() {\n    var z = b;\n    z();\n}\n\nfunction b() {\n\n}\n\n// All functions that receive ether must be marked 'payable'\nfunction depositEther() public payable {\n    balances[msg.sender] += msg.value;\n}\n\n\n// Prefer loops to recursion (max call stack depth is 1024)\n// Also, don't setup loops that you haven't bounded,\n// as this can hit the gas limit\n\n// B. Events\n// Events are notify external parties; easy to search and\n// access events from outside blockchain (with lightweight clients)\n// typically declare after contract parameters\n\n// Typically, capitalized - and add Log in front to be explicit and prevent confusion\n// with a function call\n\n// Declare\nevent LogSent(address indexed from, address indexed to, uint amount); // note capital first letter\n\n// Call\nLogSent(from, to, amount);\n\n/**\n\nFor an external party (a contract or external entity), to watch using\nthe Web3 JavaScript library:\n\n// The following is JavaScript code, not Solidity code\nCoin.LogSent().watch({}, '', function(error, result) {\n    if (!error) {\n        console.log(\"Coin transfer: \" + result.args.amount +\n            \" coins were sent from \" + result.args.from +\n            \" to \" + result.args.to + \".\");\n        console.log(\"Balances now:\\n\" +\n            \"Sender: \" + Coin.balances.call(result.args.from) +\n            \"Receiver: \" + Coin.balances.call(result.args.to));\n    }\n}\n**/\n\n// Common paradigm for one contract to depend on another (e.g., a\n// contract that depends on current exchange rate provided by another)\n\n// C. Modifiers\n// Modifiers validate inputs to functions such as minimal balance or user auth;\n// similar to guard clause in other languages\n\n// '_' (underscore) often included as last line in body, and indicates\n// function being called should be placed there\nmodifier onlyAfter(uint _time) { require (now >= _time); _; }\nmodifier onlyOwner { require(msg.sender == owner); _; }\n// commonly used with state machines\nmodifier onlyIfStateA (State currState) { require(currState == State.A); _; }\n\n// Append right after function declaration\nfunction changeOwner(newOwner)\nonlyAfter(someTime)\nonlyOwner()\nonlyIfState(State.A)\n{\n    owner = newOwner;\n}\n\n// underscore can be included before end of body,\n// but explicitly returning will skip, so use carefully\nmodifier checkValue(uint amount) {\n    _;\n    if (msg.value > amount) {\n        uint amountToRefund = amount - msg.value;\n        msg.sender.transfer(amountToRefund);\n    }\n}\n\n\n// 6. BRANCHING AND LOOPS\n\n// All basic logic blocks work - including if/else, for, while, break, continue\n// return - but no switch\n\n// Syntax same as JavaScript, but no type conversion from non-boolean\n// to boolean (comparison operators must be used to get the boolean val)\n\n// For loops that are determined by user behavior, be careful - as contracts have a maximal\n// amount of gas for a block of code - and will fail if that is exceeded\n// For example:\nfor(uint x = 0; x < refundAddressList.length; x++) {\n    refundAddressList[x].transfer(SOME_AMOUNT);\n}\n\n// Two errors above:\n// 1. A failure on transfer stops the loop from completing, tying up money\n// 2. This loop could be arbitrarily long (based on the amount of users who need refunds), and\n// therefore may always fail as it exceeds the max gas for a block\n// Instead, you should let people withdraw individually from their subaccount, and mark withdrawn\n// e.g., favor pull payments over push payments\n\n\n// 7. OBJECTS/CONTRACTS\n\n// A. Calling external contract\ncontract InfoFeed {\n    function info() payable returns (uint ret)  { return 42; }\n}\n\ncontract Consumer {\n    InfoFeed feed; // points to contract on blockchain\n\n    // Set feed to existing contract instance\n    function setFeed(address addr) {\n        // automatically cast, be careful; constructor is not called\n        feed = InfoFeed(addr);\n    }\n\n    // Set feed to new instance of contract\n    function createNewFeed() {\n        feed = new InfoFeed(); // new instance created; constructor called\n    }\n\n    function callFeed() {\n        // final parentheses call contract, can optionally add\n        // custom ether value or gas\n        feed.info.value(10).gas(800)();\n    }\n}\n\n// B. Inheritance\n\n// Order matters, last inherited contract (i.e., 'def') can override parts of\n// previously inherited contracts\ncontract MyContract is abc, def(\"a custom argument to def\") {\n\n// Override function\n    function z() {\n        if (msg.sender == owner) {\n            def.z(); // call overridden function from def\n            super.z(); // call immediate parent overridden function\n        }\n    }\n}\n\n// abstract function\nfunction someAbstractFunction(uint x);\n// cannot be compiled, so used in base/abstract contracts\n// that are then implemented\n\n// C. Import\n\nimport \"filename\";\nimport \"github.com/ethereum/dapp-bin/library/iterable_mapping.sol\";\n\n\n// 8. OTHER KEYWORDS\n\n// A. Selfdestruct\n// selfdestruct current contract, sending funds to address (often creator)\nselfdestruct(SOME_ADDRESS);\n\n// removes storage/code from current/future blocks\n// helps thin clients, but previous data persists in blockchain\n\n// Common pattern, lets owner end the contract and receive remaining funds\nfunction remove() {\n    if(msg.sender == creator) { // Only let the contract creator do this\n        selfdestruct(creator); // Makes contract inactive, returns funds\n    }\n}\n\n// May want to deactivate contract manually, rather than selfdestruct\n// (ether sent to selfdestructed contract is lost)\n\n\n// 9. CONTRACT DESIGN NOTES\n\n// A. Obfuscation\n// All variables are publicly viewable on blockchain, so anything\n// that is private needs to be obfuscated (e.g., hashed w/secret)\n\n// Steps: 1. Commit to something, 2. Reveal commitment\nkeccak256(\"some_bid_amount\", \"some secret\"); // commit\n\n// call contract's reveal function in the future\n// showing bid plus secret that hashes to SHA3\nreveal(100, \"mySecret\");\n\n// B. Storage optimization\n// Writing to blockchain can be expensive, as data stored forever; encourages\n// smart ways to use memory (eventually, compilation will be better, but for now\n// benefits to planning data structures - and storing min amount in blockchain)\n\n// Cost can often be high for items like multidimensional arrays\n// (cost is for storing data - not declaring unfilled variables)\n\n// C. Data access in blockchain\n// Cannot restrict human or computer from reading contents of\n// transaction or transaction's state\n\n// While 'private' prevents other *contracts* from reading data\n// directly - any other party can still read data in blockchain\n\n// All data to start of time is stored in blockchain, so\n// anyone can observe all previous data and changes\n\n// D. Oracles and External Data\n// Oracles are ways to interact with your smart contracts outside the blockchain. \n// They are used to get data from the real world, send post requests, to the real world\n// or vise versa.\n\n// Time-based implementations of contracts are also done through oracles, as \n// contracts need to be directly called and can not \"subscribe\" to a time. \n// Due to smart contracts being decentralized, you also want to get your data\n// in a decentralized manner, otherwise you run into the centralized risk that \n// smart contract design matter prevents. \n\n// The easiest way to get and use pre-boxed decentralized data is with Chainlink Data Feeds\n// https://docs.chain.link/docs/get-the-latest-price\n// We can reference on-chain reference points that have already been aggregated by \n// multiple sources and delivered on-chain, and we can use it as a \"data bank\" \n// of sources. \n\n// You can see other examples making API calls here:\n// https://docs.chain.link/docs/make-a-http-get-request\n\n// And you can of course build your own oracle network, just be sure to know \n// how centralized vs decentralized your application is. \n\n// Setting up oracle networks yourself\n\n// E. Cron Job\n// Contracts must be manually called to handle time-based scheduling; can create external\n// code to regularly ping, or provide incentives (ether) for others to\n//\n\n// F. Observer Pattern\n// An Observer Pattern lets you register as a subscriber and\n// register a function which is called by the oracle (note, the oracle pays\n// for this action to be run)\n// Some similarities to subscription in Pub/sub\n\n// This is an abstract contract, both client and server classes import\n// the client should implement\ncontract SomeOracleCallback {\n    function oracleCallback(int _value, uint _time, bytes32 info) external;\n}\n\ncontract SomeOracle {\n    SomeOracleCallback[] callbacks; // array of all subscribers\n\n    // Register subscriber\n    function addSubscriber(SomeOracleCallback a) {\n        callbacks.push(a);\n    }\n\n    function notify(value, time, info) private {\n        for(uint i = 0;i < callbacks.length; i++) {\n            // all called subscribers must implement the oracleCallback\n            callbacks[i].oracleCallback(value, time, info);\n        }\n    }\n\n    function doSomething() public {\n        // Code to do something\n\n        // Notify all subscribers\n        notify(_value, _time, _info);\n    }\n}\n\n// Now, your client contract can addSubscriber by importing SomeOracleCallback\n// and registering with Some Oracle\n\n// G. State machines\n// see example below for State enum and inState modifier\n```\n\nWork with the full example below using the [`JavaScript VM` in remix here.](https://remix.ethereum.org/#version=soljson-v0.6.6+commit.6c089d02.js&optimize=false&evmVersion=null&gist=3d12cd503dcedfcdd715ef61f786be0b&runs=200)\n\n```solidity\n// *** EXAMPLE: A crowdfunding example (broadly similar to Kickstarter) ***\n// ** START EXAMPLE **\n\n// CrowdFunder.sol\npragma solidity ^0.6.6;\n\n/// @title CrowdFunder\n/// @author nemild\ncontract CrowdFunder {\n    // Variables set on create by creator\n    address public creator;\n    address payable public fundRecipient; // creator may be different than recipient, and must be payable\n    uint public minimumToRaise; // required to tip, else everyone gets refund\n    string campaignUrl;\n    byte version = \"1\";\n\n    // Data structures\n    enum State {\n        Fundraising,\n        ExpiredRefund,\n        Successful\n    }\n    struct Contribution {\n        uint amount;\n        address payable contributor;\n    }\n\n    // State variables\n    State public state = State.Fundraising; // initialize on create\n    uint public totalRaised;\n    uint public raiseBy;\n    uint public completeAt;\n    Contribution[] contributions;\n\n    event LogFundingReceived(address addr, uint amount, uint currentTotal);\n    event LogWinnerPaid(address winnerAddress);\n\n    modifier inState(State _state) {\n        require(state == _state);\n        _;\n    }\n\n    modifier isCreator() {\n        require(msg.sender == creator);\n        _;\n    }\n\n    // Wait 24 weeks after final contract state before allowing contract destruction\n    modifier atEndOfLifecycle() {\n    require(((state == State.ExpiredRefund || state == State.Successful) &&\n        completeAt + 24 weeks < now));\n        _;\n    }\n\n    function crowdFund(\n        uint timeInHoursForFundraising,\n        string memory _campaignUrl,\n        address payable _fundRecipient,\n        uint _minimumToRaise)\n        public\n    {\n        creator = msg.sender;\n        fundRecipient = _fundRecipient;\n        campaignUrl = _campaignUrl;\n        minimumToRaise = _minimumToRaise;\n        raiseBy = now + (timeInHoursForFundraising * 1 hours);\n    }\n\n    function contribute()\n    public\n    payable\n    inState(State.Fundraising)\n    returns(uint256 id)\n    {\n        contributions.push(\n            Contribution({\n                amount: msg.value,\n                contributor: msg.sender\n            }) // use array, so can iterate\n        );\n        totalRaised += msg.value;\n\n        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\n\n        checkIfFundingCompleteOrExpired();\n        return contributions.length - 1; // return id\n    }\n\n    function checkIfFundingCompleteOrExpired()\n    public\n    {\n        if (totalRaised > minimumToRaise) {\n            state = State.Successful;\n            payOut();\n\n            // could incentivize sender who initiated state change here\n        } else if ( now > raiseBy )  {\n            state = State.ExpiredRefund; // backers can now collect refunds by calling getRefund(id)\n        }\n        completeAt = now;\n    }\n\n    function payOut()\n    public\n    inState(State.Successful)\n    {\n        fundRecipient.transfer(address(this).balance);\n        LogWinnerPaid(fundRecipient);\n    }\n\n    function getRefund(uint256 id)\n    inState(State.ExpiredRefund)\n    public\n    returns(bool)\n    {\n        require(contributions.length > id && id >= 0 && contributions[id].amount != 0 );\n\n        uint256 amountToRefund = contributions[id].amount;\n        contributions[id].amount = 0;\n\n        contributions[id].contributor.transfer(amountToRefund);\n\n        return true;\n    }\n\n    function removeContract()\n    public\n    isCreator()\n    atEndOfLifecycle()\n    {\n        selfdestruct(msg.sender);\n        // creator gets all money that hasn't be claimed\n    }\n}\n// ** END EXAMPLE **\n```\n\nSome more functions. \n\n```solidity\n// 10. OTHER NATIVE FUNCTIONS\n\n// Currency units\n// Currency is defined using wei, smallest unit of Ether\nuint minAmount = 1 wei;\nuint a = 1 finney; // 1 ether == 1000 finney\n// Other units, see: http://ether.fund/tool/converter\n\n// Time units\n1 == 1 second\n1 minutes == 60 seconds\n\n// Can multiply a variable times unit, as units are not stored in a variable\nuint x = 5;\n(x * 1 days); // 5 days\n\n// Careful about leap seconds/years with equality statements for time\n// (instead, prefer greater than/less than)\n\n// Cryptography\n// All strings passed are concatenated before hash action\nsha3(\"ab\", \"cd\");\nripemd160(\"abc\");\nsha256(\"def\");\n\n// 11. SECURITY\n\n// Bugs can be disastrous in Ethereum contracts - and even popular patterns in Solidity,\n// may be found to be antipatterns\n\n// See security links at the end of this doc\n\n// 12. LOW LEVEL FUNCTIONS\n// call - low level, not often used, does not provide type safety\nsuccessBoolean = someContractAddress.call('function_name', 'arg1', 'arg2');\n\n// callcode - Code at target address executed in *context* of calling contract\n// provides library functionality\nsomeContractAddress.callcode('function_name');\n\n\n// 13. STYLE NOTES\n// Based on Python's PEP8 style guide\n// Full Style guide: http://solidity.readthedocs.io/en/develop/style-guide.html\n\n// Quick summary:\n// 4 spaces for indentation\n// Two lines separate contract declarations (and other top level declarations)\n// Avoid extraneous spaces in parentheses\n// Can omit curly braces for one line statement (if, for, etc)\n// else should be placed on own line\n\n\n// 14. NATSPEC COMMENTS\n// used for documentation, commenting, and external UIs\n\n// Contract natspec - always above contract definition\n/// @title Contract title\n/// @author Author name\n\n// Function natspec\n/// @notice information about what function does; shown when function to execute\n/// @dev Function documentation for developer\n\n// Function parameter/return value natspec\n/// @param someParam Some description of what the param does\n/// @return Description of the return value\n```\n\n## Additional resources\n- [Solidity Docs](https://solidity.readthedocs.org/en/latest/)\n- [Chainlink Beginner Tutorials](https://docs.chain.link/docs/beginners-tutorial)\n- [Smart Contract Best Practices](https://github.com/ConsenSys/smart-contract-best-practices)\n- [Superblocks Lab - Browser based IDE for Solidity](https://lab.superblocks.com/)\n- [EthFiddle - The JsFiddle for Solidity](https://ethfiddle.com/)\n- [Browser-based Solidity Editor](https://remix.ethereum.org/)\n- [Gitter Solidity Chat room](https://gitter.im/ethereum/solidity)\n- [Modular design strategies for Ethereum Contracts](https://docs.erisindustries.com/tutorials/solidity/)\n- [Chainlink Documentation](https://docs.chain.link/docs/getting-started)\n\n## Smart Contract Development Frameworks\n- [Hardhat](https://hardhat.org/)\n- [Brownie](https://github.com/eth-brownie/brownie)\n- [Truffle](https://www.trufflesuite.com/)\n\n## Important libraries\n- [Zeppelin](https://github.com/OpenZeppelin/openzeppelin-contracts): Libraries that provide common contract patterns (crowdfuding, safemath, etc)\n- [Chainlink](https://github.com/smartcontractkit/chainlink): Code that allows you to interact with external data\n\n## Sample contracts\n- [Dapp Bin](https://github.com/ethereum/dapp-bin)\n- [Defi Example](https://github.com/PatrickAlphaC/chainlink_defi)\n- [Solidity Baby Step Contracts](https://github.com/fivedogit/solidity-baby-steps/tree/master/contracts)\n- [ConsenSys Contracts](https://github.com/ConsenSys/dapp-store-contracts)\n- [State of Dapps](http://dapps.ethercasts.com/)\n\n## Security\n- [Thinking About Smart Contract Security](https://blog.ethereum.org/2016/06/19/thinking-smart-contract-security/)\n- [Smart Contract Security](https://blog.ethereum.org/2016/06/10/smart-contract-security/)\n- [Hacking Distributed Blog](http://hackingdistributed.com/)\n\n## Style\n- [Solidity Style Guide](http://solidity.readthedocs.io/en/latest/style-guide.html): Ethereum's style guide is heavily derived from Python's [PEP 8](https://www.python.org/dev/peps/pep-0008/) style guide.\n\n## Editors\n- [Remix](https://remix.ethereum.org/)\n- [Emacs Solidity Mode](https://github.com/ethereum/emacs-solidity)\n- [Vim Solidity](https://github.com/tomlion/vim-solidity)\n- Editor Snippets ([Ultisnips format](https://gist.github.com/nemild/98343ce6b16b747788bc))\n\n## Future To Dos\n- New keywords: protected, inheritable\n- List of common design patterns (throttling, RNG, version upgrade)\n- Common security anti patterns\n\nFeel free to send a pull request with any edits - or email nemild -/at-/ gmail\n"
        },
        {
          "name": "sorbet.md",
          "type": "blob",
          "size": 27.4267578125,
          "content": "---\nname: Sorbet\nfilename: learnsorbet.rb\ncontributors:\n  - [\"Jeremy Kaplan\", \"https://jdkaplan.dev\"]\n---\n\nSorbet is a type checker for Ruby. It adds syntax for method signatures that\nenable both static and runtime type checking.\n\nThe easiest way to see it in action is in the playground at\n[sorbet.run](https://sorbet.run).\n\nTry copying in one of the sections below! Each top-level `class` or `module`\nis independent from the others.\n\n```ruby\n# Every file should have a \"typed sigil\" that tells Sorbet how strict to be\n# during static type checking.\n#\n# Strictness levels (lax to strict):\n#\n# ignore: Sorbet won't even read the file. This means its contents are not\n# visible during type checking. Avoid this.\n#\n# false: Sorbet will only report errors related to constant resolution. This is\n# the default if no sigil is included.\n#\n# true: Sorbet will report all static type errors. This is the sweet spot of\n# safety for effort.\n#\n# strict: Sorbet will require that all methods, constants, and instance\n# variables have static types.\n#\n# strong: Sorbet will no longer allow anything to be T.untyped, even\n# explicitly. Almost nothing satisfies this.\n\n# typed: true\n\n# Include the runtime type-checking library. This lets you write inline sigs\n# and have them checked at runtime (instead of running Sorbet as RBI-only).\n# These runtime checks happen even for files with `ignore` or `false` sigils.\nrequire 'sorbet-runtime'\n\nclass BasicSigs\n  # Bring in the type definition helpers. You'll almost always need this.\n  extend T::Sig\n\n  # Sigs are defined with `sig` and a block. Define the return value type with\n  # `returns`.\n  #\n  # This method returns a value whose class is `String`. These are the most\n  # common types, and Sorbet calls them \"class types\".\n  sig { returns(String) }\n  def greet\n    'Hello, World!'\n  end\n\n  # Define parameter value types with `params`.\n  sig { params(n: Integer).returns(String) }\n  def greet_repeat(n)\n    (1..n).map { greet }.join(\"\\n\")\n  end\n\n  # Define keyword parameters the same way.\n  sig { params(n: Integer, sep: String).returns(String) }\n  def greet_repeat_2(n, sep: \"\\n\")\n    (1..n).map { greet }.join(sep)\n  end\n\n  # Notice that positional/keyword and required/optional make no difference\n  # here. They're all defined the same way in `params`.\n\n  # For lots of parameters, it's nicer to use do..end and a multiline block\n  # instead of curly braces.\n  sig do\n    params(\n      str: String,\n      num: Integer,\n      sym: Symbol,\n    ).returns(String)\n  end\n  def uhh(str:, num:, sym:)\n    'What would you even do with these?'\n  end\n\n  # For a method whose return value is useless, use `void`.\n  sig { params(name: String).void }\n  def say_hello(name)\n    puts \"Hello, #{name}!\"\n  end\n\n  # Splats! Also known as \"rest parameters\", \"*args\", \"**kwargs\", and others.\n  #\n  # Type the value that a _member_ of `args` or `kwargs` will have, not `args`\n  # or `kwargs` itself.\n  sig { params(args: Integer, kwargs: String).void }\n  def no_op(*args, **kwargs)\n    if kwargs[:op] == 'minus'\n      args.each { |i| puts(i - 1) }\n    else\n      args.each { |i| puts(i + 1) }\n    end\n  end\n\n  # Most initializers should be `void`.\n  sig { params(name: String).void }\n  def initialize(name:)\n    # Instance variables must have annotated types to participate in static\n    # type checking.\n\n    # The value in `T.let` is checked statically and at runtime.\n    @upname = T.let(name.upcase, String)\n\n    # Sorbet can infer this one!\n    @name = name\n  end\n\n  # Constants also need annotated types.\n  SORBET = T.let('A delicious frozen treat', String)\n\n  # Class variables too.\n  @@the_answer = T.let(42, Integer)\n\n  # Sorbet knows about the `attr_*` family.\n  sig { returns(String) }\n  attr_reader :upname\n\n  sig { params(write_only: Integer).returns(Integer) }\n  attr_writer :write_only\n\n  # You say the reader part and Sorbet will say the writer part.\n  sig { returns(String) }\n  attr_accessor :name\nend\n\nmodule Debugging\n  extend T::Sig\n\n  # Sometimes it's helpful to know what type Sorbet has inferred for an\n  # expression. Use `T.reveal_type` to make type-checking show a special error\n  # with that information.\n  #\n  # This is most useful if you have Sorbet integrated into your editor so you\n  # can see the result as soon as you save the file.\n\n  sig { params(obj: Object).returns(String) }\n  def debug(obj)\n    T.reveal_type(obj) # Revealed type: Object\n    repr = obj.inspect\n\n    # Remember that Ruby methods can be called without arguments, so you can\n    # save a couple characters!\n    T.reveal_type repr # Revealed type: String\n\n    \"DEBUG: \" + repr\n  end\nend\n\nmodule StandardLibrary\n  extend T::Sig\n  # Sorbet provides some helpers for typing the Ruby standard library.\n\n  # Use T::Boolean to catch both `true` and `false`.\n  #\n  # For the curious, this is equivalent to\n  #\n  #     T.type_alias { T.any(TrueClass, FalseClass) }\n  #\n  sig { params(str: String).returns(T::Boolean) }\n  def confirmed?(str)\n    str == 'yes'\n  end\n\n  # Remember that the value `nil` is an instance of NilClass.\n  sig { params(val: NilClass).void }\n  def only_nil(val:); end\n\n  # To avoid modifying standard library classes, Sorbet provides wrappers to\n  # support common generics.\n  #\n  # Here's the full list:\n  # * T::Array\n  # * T::Enumerable\n  # * T::Enumerator\n  # * T::Hash\n  # * T::Range\n  # * T::Set\n  sig { params(config: T::Hash[Symbol, String]).returns(T::Array[String]) }\n  def merge_values(config)\n    keyset = [:old_key, :new_key]\n    config.each_pair.flat_map do |key, value|\n      keyset.include?(key) ? value : 'sensible default'\n    end\n  end\n\n  # Sometimes (usually dependency injection), a method will accept a reference\n  # to a class rather than an instance of the class. Use `T.class_of(Dep)` to\n  # accept the `Dep` class itself (or something that inherits from it).\n  class Dep; end\n\n  sig { params(dep: T.class_of(Dep)).returns(Dep) }\n  def dependency_injection(dep:)\n    dep.new\n  end\n\n  # Blocks, procs, and lambdas, oh my! All of these are typed with `T.proc`.\n  #\n  # Limitations:\n  # 1. All parameters are assumed to be required positional parameters.\n  # 2. The only runtime check is that the value is a `Proc`. The argument types\n  #    are only checked statically.\n  sig do\n    params(\n      data: T::Array[String],\n      blk: T.proc.params(val: String).returns(Integer),\n    ).returns(Integer)\n  end\n  def count(data, &blk)\n    data.sum(&blk)\n  end\n\n  sig { returns(Integer) }\n  def count_usage\n    count([\"one\", \"two\", \"three\"]) { |word| word.length + 1 }\n  end\n\n  # If the method takes an implicit block, Sorbet will infer `T.untyped` for\n  # it. Use the explicit block syntax if the types are important.\n  sig { params(str: String).returns(T.untyped) }\n  def implicit_block(str)\n    yield(str)\n  end\n\n  # If you're writing a DSL and will execute the block in a different context,\n  # use `bind`.\n  sig { params(num: Integer, blk: T.proc.bind(Integer).void).void }\n  def number_fun(num, &blk)\n    num.instance_eval(&blk)\n  end\n\n  sig { params(num: Integer).void }\n  def number_fun_usage(num)\n    number_fun(10) { puts digits.join }\n  end\n\n  # If the block doesn't take any parameters, don't include `params`.\n  sig { params(blk: T.proc.returns(Integer)).returns(Integer) }\n  def doubled_block(&blk)\n    2 * blk.call\n  end\nend\n\nmodule Combinators\n  extend T::Sig\n  # These methods let you define new types from existing types.\n\n  # Use `T.any` when you have a value that can be one of many types. These are\n  # sometimes known as \"union types\" or \"sum types\".\n  sig { params(num: T.any(Integer, Float)).returns(Rational) }\n  def hundreds(num)\n    num.rationalize\n  end\n\n  # `T.nilable(Type)` is a convenient alias for `T.any(Type, NilClass)`.\n  sig { params(val: T.nilable(String)).returns(Integer) }\n  def strlen(val)\n    val.nil? ? -1 : val.length\n  end\n\n  # Use `T.all` when you have a value that must satisfy multiple types. These\n  # are sometimes known as \"intersection types\". They're most useful for\n  # interfaces (described later), but can also describe helper modules.\n\n  module Reversible\n    extend T::Sig\n    sig { void }\n    def reverse\n      # Pretend this is actually implemented\n    end\n  end\n\n  module Sortable\n    extend T::Sig\n    sig { void }\n    def sort\n      # Pretend this is actually implemented\n    end\n  end\n\n  class List\n    include Reversible\n    include Sortable\n  end\n\n  sig { params(list: T.all(Reversible, Sortable)).void }\n  def rev_sort(list)\n    # reverse from Reversible\n    list.reverse\n    # sort from Sortable\n    list.sort\n  end\n\n  def rev_sort_usage\n    rev_sort(List.new)\n  end\n\n  # Sometimes, actually spelling out the type every time becomes more confusing\n  # than helpful. Use type aliases to make them easier to work with.\n  JSONLiteral = T.type_alias { T.any(Float, String, T::Boolean, NilClass) }\n\n  sig { params(val: JSONLiteral).returns(String) }\n  def stringify(val)\n    val.to_s\n  end\nend\n\nmodule DataClasses\n  extend T::Sig\n  # Use `T::Struct` to create a new class with type-checked fields. It combines\n  # the best parts of the standard Struct and OpenStruct, and then adds static\n  # typing on top.\n  #\n  # Types constructed this way are sometimes known as \"product types\".\n\n  class Matcher < T::Struct\n    # Use `prop` to define a field with both a reader and writer.\n    prop :count, Integer\n    # Use `const` to only define the reader and skip the writer.\n    const :pattern, Regexp\n    # You can still set a default value with `default`.\n    const :message, String, default: 'Found one!'\n\n    # This is otherwise a normal class, so you can still define methods.\n\n    # You'll still need to bring `sig` in if you want to use it though.\n    extend T::Sig\n\n    sig { void }\n    def reset\n      self.count = 0\n    end\n  end\n\n  sig { params(text: String, matchers: T::Array[Matcher]).void }\n  def awk(text, matchers)\n    matchers.each(&:reset)\n    text.lines.each do |line|\n      matchers.each do |matcher|\n        if matcher.pattern =~ line\n          Kernel.puts matcher.message\n          matcher.count += 1\n        end\n      end\n    end\n  end\n\n  # Gotchas and limitations\n\n  # 1. `const` fields are not truly immutable. They don't have a writer method,\n  #    but may be changed in other ways.\n  class ChangeMe < T::Struct\n    const :list, T::Array[Integer]\n  end\n\n  sig { params(change_me: ChangeMe).returns(T::Boolean) }\n  def whoops!(change_me)\n    change_me = ChangeMe.new(list: [1, 2, 3, 4])\n    change_me.list.reverse!\n    change_me.list == [4, 3, 2, 1]\n  end\n\n  # 2. `T::Struct` inherits its equality method from `BasicObject`, which uses\n  #    identity equality (also known as \"reference equality\").\n  class Coordinate < T::Struct\n    const :row, Integer\n    const :col, Integer\n  end\n\n  sig { returns(T::Boolean) }\n  def never_equal!\n    p1 = Coordinate.new(row: 1, col: 2)\n    p2 = Coordinate.new(row: 1, col: 2)\n    p1 != p2\n  end\n\n  # Define your own `#==` method to check the fields, if that's what you want.\n  class Position < T::Struct\n    extend T::Sig\n\n    const :x, Integer\n    const :y, Integer\n\n    sig { params(other: Object).returns(T::Boolean) }\n    def ==(other)\n      # There's a real implementation here:\n      # https://github.com/tricycle/sorbet-struct-comparable\n      true\n    end\n  end\n\n  # Use `T::Enum` to define a fixed set of values that are easy to reference.\n  # This is especially useful when you don't care what the values _are_ as much\n  # as you care that the set of possibilities is closed and static.\n  class Crayon < T::Enum\n    extend T::Sig\n\n    # Initialize members with `enums`.\n    enums do\n      # Define each member with `new`. Each of these is an instance of the\n      # `Crayon` class.\n      Red = new\n      Orange = new\n      Yellow = new\n      Green = new\n      Blue = new\n      Violet = new\n      Brown = new\n      Black = new\n      # The default value of the enum is its name in all-lowercase. To change\n      # that, pass a value to `new`.\n      Gray90 = new('light-gray')\n    end\n\n    sig { returns(String) }\n    def to_hex\n      case self\n      when Red   then '#ff0000'\n      when Green then '#00ff00'\n      # ...\n      else            '#ffffff'\n      end\n    end\n  end\n\n  sig { params(crayon: Crayon, path: T::Array[Position]).void }\n  def draw(crayon:, path:)\n    path.each do |pos|\n      Kernel.puts \"(#{pos.x}, #{pos.y}) = \" + crayon.to_hex\n    end\n  end\n\n  # To get all the values in the enum, use `.values`. For convenience there's\n  # already a `#serialize` to get the enum string value.\n\n  sig { returns(T::Array[String]) }\n  def crayon_names\n    Crayon.values.map(&:serialize)\n  end\n\n  # Use the \"deserialize\" family to go from string to enum value.\n\n  sig { params(name: String).returns(T.nilable(Crayon)) }\n  def crayon_from_name(name)\n    if Crayon.has_serialized?(name)\n      # If the value is not found, this will raise a `KeyError`.\n      Crayon.deserialize(name)\n    end\n\n    # If the value is not found, this will return `nil`.\n    Crayon.try_deserialize(name)\n  end\nend\n\nmodule FlowSensitivity\n  extend T::Sig\n  # Sorbet understands Ruby's control flow constructs and uses that information\n  # to get more accurate types when your code branches.\n\n  # You'll see this most often when doing nil checks.\n  sig { params(name: T.nilable(String)).returns(String) }\n  def greet_loudly(name)\n    if name.nil?\n      'HELLO, YOU!'\n    else\n      # Sorbet knows that `name` must be a String here, so it's safe to call\n      # `#upcase`.\n      \"HELLO, #{name.upcase}!\"\n    end\n  end\n\n  # The nils are a special case of refining `T.any`.\n  sig { params(id: T.any(Integer, T::Array[Integer])).returns(T::Array[String]) }\n  def database_lookup(id)\n    if id.is_a?(Integer)\n      # `ids` must be an Integer here.\n      [id.to_s]\n    else\n      # `ids` must be a T::Array[Integer] here.\n      id.map(&:to_s)\n    end\n  end\n\n  # Sorbet recognizes these methods that narrow type definitions:\n  # * is_a?\n  # * kind_of?\n  # * nil?\n  # * Class#===\n  # * Class#<\n  # * block_given?\n  #\n  # Because they're so common, it also recognizes these Rails extensions:\n  # * blank?\n  # * present?\n  #\n  # Be careful to maintain Sorbet assumptions if you redefine these methods!\n\n  # Have you ever written this line of code?\n  #\n  #     raise StandardError, \"Can't happen\"\n  #\n  # Sorbet can help you prove that statically (this is known as\n  # \"exhaustiveness\") with `T.absurd`.  It's extra cool when combined with\n  # `T::Enum`!\n\n  class Size < T::Enum\n    extend T::Sig\n\n    enums do\n      Byte = new('B')\n      Kibibyte = new('KiB')\n      Mebibyte = new('MiB')\n      # \"640K ought to be enough for anybody\"\n    end\n\n    sig { returns(Integer) }\n    def bytes\n      case self\n        when Byte     then 1 <<  0\n        when Kibibyte then 1 << 10\n        when Mebibyte then 1 << 20\n        else\n          # Sorbet knows you've checked all the cases, so there's no possible\n          # value that `self` could have here.\n          #\n          # But if you _do_ get here somehow, this will raise at runtime.\n          T.absurd(self)\n\n          # If you're missing a case, Sorbet can even tell you which one it is!\n      end\n    end\n  end\n\n  # We're gonna need `puts` and `raise` for this next part.\n  include Kernel\n\n  # Sorbet knows that no code can execute after a `raise` statement because it\n  # \"never returns\".\n  sig { params(num: T.nilable(Integer)).returns(Integer) }\n  def decrement(num)\n    raise ArgumentError, '¯\\_(ツ)_/¯' unless num\n\n    num - 1\n  end\n\n  class CustomError < StandardError; end\n\n  # You can annotate your own error-raising methods with `T.noreturn`.\n  sig { params(message: String).returns(T.noreturn) }\n  def oh_no(message = 'A bad thing happened')\n    puts message\n    raise CustomError, message\n  end\n\n  # Infinite loops also don't return.\n  sig { returns(T.noreturn) }\n  def loading\n    loop do\n      %q(-\\|/).each_char do |c|\n        print \"\\r#{c} reticulating splines...\"\n        sleep 1\n      end\n    end\n  end\n\n  # You may run into a situation where Sorbet \"loses\" your type refinement.\n  # Remember that almost everything you do in Ruby is a method call that could\n  # return a different value next time you call it. Sorbet doesn't assume that\n  # any methods are pure (even those from `attr_reader` and `attr_accessor`).\n  sig { returns(T.nilable(Integer)) }\n  def answer\n    rand > 0.5 ? 42 : nil\n  end\n\n  sig { void }\n  def bad_typecheck\n    if answer.nil?\n      0\n    else\n      # But answer might return `nil` if we call it again!\n      answer + 1\n      # ^ Method + does not exist on NilClass component of T.nilable(Integer)\n    end\n  end\n\n  sig { void }\n  def good_typecheck\n    ans = answer\n    if ans.nil?\n      0\n    else\n      # This time, Sorbet knows that `ans` is non-nil.\n      ans + 1\n    end\n  end\nend\n\nmodule InheritancePatterns\n  extend T::Sig\n\n  # If you have a method that always returns the type of its receiver, use\n  # `T.self_type`. This is common in fluent interfaces and DSLs.\n  #\n  # Warning: This feature is still experimental!\n  class Logging\n    extend T::Sig\n\n    sig { returns(T.self_type) }\n    def log\n      pp self\n      self\n    end\n  end\n\n  class Data < Logging\n    extend T::Sig\n\n    sig { params(x: Integer, y: String).void }\n    def initialize(x: 0, y: '')\n      @x = x\n      @y = y\n    end\n\n    # You don't _have_ to use `T.self_type` if there's only one relevant class.\n    sig { params(x: Integer).returns(Data) }\n    def setX(x)\n      @x = x\n      self\n    end\n\n    sig { params(y: String).returns(Data) }\n    def setY(y)\n      @y = y\n      self\n    end\n  end\n\n  # Ta-da!\n  sig { params(data: Data).void }\n  def chaining(data)\n    data.setX(1).log.setY('a')\n  end\n\n  # If it's a class method (a.k.a. singleton method), use `T.attached_class`.\n  #\n  # No warning here. This one is stable!\n  class Box\n    extend T::Sig\n\n    sig { params(contents: String, weight: Integer).void }\n    def initialize(contents, weight)\n      @contents = contents\n      @weight = weight\n    end\n\n    sig { params(contents: String).returns(T.attached_class) }\n    def self.pack(contents)\n      new(contents, contents.chars.uniq.length)\n    end\n  end\n\n  class CompanionCube < Box\n    extend T::Sig\n\n    sig { returns(String) }\n    def pick_up\n      \"♥#{@contents}🤍\"\n    end\n  end\n\n  sig { returns(String) }\n  def befriend\n    CompanionCube.pack('').pick_up\n  end\n\n  # Sorbet has support for abstract classes and interfaces. It can check that\n  # all the concrete classes and implementations actually define the required\n  # methods with compatible signatures.\n\n  # Here's an abstract class:\n\n  class WorkflowStep\n    extend T::Sig\n\n    # Bring in the inheritance helpers.\n    extend T::Helpers\n\n    # Mark this class as abstract. This means it cannot be instantiated with\n    # `.new`, but it can still be subclassed.\n    abstract!\n\n    sig { params(args: T::Array[String]).void }\n    def run(args)\n      pre_hook\n      execute(args)\n      post_hook\n    end\n\n    # This is an abstract method, which means it _must_ be implemented by\n    # subclasses. Add a signature with `abstract` to an empty method to tell\n    # Sorbet about it.\n    #\n    # If this implementation of the method actually gets called at runtime, it\n    # will raise `NotImplementedError`.\n    sig { abstract.params(args: T::Array[String]).void }\n    def execute(args); end\n\n    # The following non-abstract methods _can_ be implemented by subclasses,\n    # but they're optional.\n\n    sig { void }\n    def pre_hook; end\n\n    sig { void }\n    def post_hook; end\n  end\n\n  class Configure < WorkflowStep\n    extend T::Sig\n\n    sig { void }\n    def pre_hook\n      puts 'Configuring...'\n    end\n\n    # To implement an abstract method, mark the signature with `override`.\n    sig { override.params(args: T::Array[String]).void }\n    def execute(args)\n      # ...\n    end\n  end\n\n  # And here's an interface:\n\n  module Queue\n    extend T::Sig\n\n    # Bring in the inheritance helpers.\n    extend T::Helpers\n\n    # Mark this module as an interface. This adds the following restrictions:\n    # 1. All of its methods must be abstract.\n    # 2. It cannot have any private or protected methods.\n    interface!\n\n    sig { abstract.params(num: Integer).void }\n    def push(num); end\n\n    sig { abstract.returns(T.nilable(Integer)) }\n    def pop; end\n  end\n\n  class PriorityQueue\n    extend T::Sig\n\n    # Include the interface to tell Sorbet that this class implements it.\n    # Sorbet doesn't support implicitly implemented interfaces (also known as\n    # \"duck typing\").\n    include Queue\n\n    sig { void }\n    def initialize\n      @items = T.let([], T::Array[Integer])\n    end\n\n    # Implement the Queue interface's abstract methods. Remember to use\n    # `override`!\n\n    sig { override.params(num: Integer).void }\n    def push(num)\n      @items << num\n      @items.sort!\n    end\n\n    sig { override.returns(T.nilable(Integer)) }\n    def pop\n      @items.shift\n    end\n  end\n\n  # If you use the `included` hook to get class methods from your modules,\n  # you'll have to use `mixes_in_class_methods` to get them to type-check.\n\n  module Mixin\n    extend T::Helpers\n    interface!\n\n    module ClassMethods\n      extend T::Sig\n\n      sig { void }\n      def whisk\n        'fskfskfsk'\n      end\n    end\n\n    mixes_in_class_methods(ClassMethods)\n  end\n\n  class EggBeater\n    include Mixin\n  end\n\n  EggBeater.whisk # Meringue!\nend\n\nmodule EscapeHatches\n  extend T::Sig\n\n  # Ruby is a very dynamic language, and sometimes Sorbet can't infer the\n  # properties you already know to be true. Although there are ways to rewrite\n  # your code so Sorbet can prove safety, you can also choose to \"break out\" of\n  # Sorbet using these \"escape hatches\".\n\n  # Once you start using `T.nilable`, Sorbet will start telling you _all_ the\n  # places you're not handling nils. Sometimes, you know a value can't be nil,\n  # but it's not practical to fix the sigs so Sorbet can prove it. In that\n  # case, you can use `T.must`.\n  sig { params(maybe_str: T.nilable(String)).returns(String) }\n  def no_nils_here(maybe_str)\n    # If maybe_str _is_ actually nil, this will error at runtime.\n    str = T.must(maybe_str)\n    str.downcase\n  end\n\n  # More generally, if you know that a value must be a specific type, you can\n  # use `T.cast`.\n  sig do\n    params(\n      str_or_ary: T.any(String, T::Array[String]),\n      idx_or_range: T.any(Integer, T::Range[Integer]),\n    ).returns(T::Array[String])\n  end\n  def slice2(str_or_ary, idx_or_range)\n    # Let's say that, for some reason, we want individual characters from\n    # strings or sub-arrays from arrays. The other options are not allowed.\n    if str_or_ary.is_a?(String)\n      # Here, we know that `idx_or_range` must be a single index. If it's not,\n      # this will error at runtime.\n      idx = T.cast(idx_or_range, Integer)\n      [str_or_ary.chars.fetch(idx)]\n    else\n      # Here, we know that `idx_or_range` must be a range. If it's not, this\n      # will error at runtime.\n      range = T.cast(idx_or_range, T::Range[Integer])\n      str_or_ary.slice(range) || []\n    end\n  end\n\n  # If you know that a method exists, but Sorbet doesn't, you can use\n  # `T.unsafe` so Sorbet will let you call it. Although we tend to think of\n  # this as being an \"unsafe method call\", `T.unsafe` is called on the receiver\n  # rather than the whole expression.\n  sig { params(count: Integer).returns(Date) }\n  def the_future(count)\n    # Let's say you've defined some extra date helpers that Sorbet can't find.\n    # So `2.decades` is effectively `(2*10).years` from ActiveSupport.\n    Date.today + T.unsafe(count).decades\n  end\n\n  # If this is a method on the implicit `self`, you'll have to make that\n  # explicit to use `T.unsafe`.\n  sig { params(count: Integer).returns(Date) }\n  def the_past(count)\n    # Let's say that metaprogramming defines a `now` helper method for\n    # `Time.new`. Using it would normally look like this:\n    #\n    #     now - 1234\n    #\n    T.unsafe(self).now - 1234\n  end\n\n  # There's a special type in Sorbet called `T.untyped`. For any value of this\n  # type, Sorbet will allow it to be used for any method argument and receive\n  # any method call.\n\n  sig { params(num: Integer, anything: T.untyped).returns(T.untyped) }\n  def nothing_to_see_here(num, anything)\n    anything.digits # Is it an Integer...\n    anything.upcase # ... or a String?\n\n    # Sorbet will not be able to infer anything about this return value because\n    # it's untyped.\n    BasicObject.new\n  end\n\n  def see_here\n    # It's actually nil!  This will crash at runtime, but Sorbet allows it.\n    nothing_to_see_here(1, nil)\n  end\n\n  # For a method without a sig, Sorbet infers the type of each argument and the\n  # return value to be `T.untyped`.\nend\n\n# The following types are not officially documented but are still useful. They\n# may be experimental, deprecated, or not supported.\n\nmodule ValueSet\n  extend T::Sig\n\n  # A common pattern in Ruby is to have a method accept one value from a set of\n  # options. Especially when starting out with Sorbet, it may not be practical\n  # to refactor the code to use `T::Enum`. In this case, you can use `T.enum`.\n  #\n  # Note: Sorbet can't check this statically because it doesn't track the\n  # values themselves.\n  sig do\n    params(\n      data: T::Array[Numeric],\n      shape: T.enum([:circle, :square, :triangle])\n    ).void\n  end\n  def plot_points(data, shape: :circle)\n    data.each_with_index do |y, x|\n      Kernel.puts \"#{x}: #{y}\"\n    end\n  end\nend\n\nmodule Generics\n  extend T::Sig\n\n  # Generics are useful when you have a class whose method types change based\n  # on the data it contains or a method whose method type changes based on what\n  # its arguments are.\n\n  # A generic method uses `type_parameters` to declare type variables and\n  # `T.type_parameter` to refer back to them.\n  sig do\n    type_parameters(:element)\n      .params(\n        element: T.type_parameter(:element),\n        count: Integer,\n      ).returns(T::Array[T.type_parameter(:element)])\n  end\n  def repeat_value(element, count)\n    count.times.each_with_object([]) do |elt, ary|\n      ary << elt\n    end\n  end\n\n  sig do\n    type_parameters(:element)\n      .params(\n        count: Integer,\n        block: T.proc.returns(T.type_parameter(:element)),\n      ).returns(T::Array[T.type_parameter(:element)])\n  end\n  def repeat_cached(count, &block)\n    elt = block.call\n    ary = []\n    count.times do\n      ary << elt\n    end\n    ary\n  end\n\n  # A generic class uses `T::Generic.type_member` to define type variables that\n  # can be like regular type names.\n  class BidirectionalHash\n    extend T::Sig\n    extend T::Generic\n\n    Left = type_member\n    Right = type_member\n\n    sig { void }\n    def initialize\n      @left_hash = T.let({}, T::Hash[Left, Right])\n      @right_hash = T.let({}, T::Hash[Right, Left])\n    end\n\n    # Implement just enough to make the methods below work.\n\n    sig { params(lkey: Left).returns(T::Boolean) }\n    def lhas?(lkey)\n      @left_hash.has_key?(lkey)\n    end\n\n    sig { params(rkey: Right).returns(T.nilable(Left)) }\n    def rget(rkey)\n      @right_hash[rkey]\n    end\n  end\n\n  # To specialize a generic type, use brackets.\n  sig do\n    params(\n      options: BidirectionalHash[Symbol, Integer],\n      choice: T.any(Symbol, Integer),\n    ).returns(T.nilable(String))\n  end\n  def lookup(options, choice)\n    case choice\n    when Symbol\n      options.lhas?(choice) ? choice.to_s : nil\n    when Integer\n      options.rget(choice).to_s\n    else\n      T.absurd(choice)\n    end\n  end\n\n  # To specialize through inheritance, re-declare the `type_member` with\n  # `fixed`.\n  class Options < BidirectionalHash\n    Left = type_member(fixed: Symbol)\n    Right = type_member(fixed: Integer)\n  end\n\n  sig do\n    params(\n      options: Options,\n      choice: T.any(Symbol, Integer),\n    ).returns(T.nilable(String))\n  end\n  def lookup2(options, choice)\n    lookup(options, choice)\n  end\n\n  # There are other variance annotations you can add to `type_member`, but\n  # they're rarely used.\nend\n```\n\n## Additional resources\n\n- [Official Documentation](https://sorbet.org/docs/overview)\n- [sorbet.run](https://sorbet.run) - Playground\n"
        },
        {
          "name": "sql.md",
          "type": "blob",
          "size": 6.8828125,
          "content": "---\nname: SQL\nfilename: learnsql.sql\ncontributors:\n  - [\"Bob DuCharme\", \"http://bobdc.com/\"]\n  - [\"Th3G33k\", \"https://github.com/Th3G33k\"]\n\n---\n\nStructured Query Language (SQL) is an [ISO/IEC 9075](https://www.iso.org/standard/63555.html) standard language for creating and working with databases stored in a set of tables. Implementations usually add their own extensions to the language; [Comparison of different SQL implementations](http://troels.arvin.dk/db/rdbms/) is a good reference on product differences.\n\nImplementations typically provide a command line prompt where you can enter the commands shown here interactively, and they also offer a way to execute a series of these commands stored in a script file.  (Showing that you’re done with the interactive prompt is a good example of something that isn’t standardized--most SQL implementations support the keywords QUIT, EXIT, or both.)\n\nSeveral of these sample commands assume that the [MySQL employee sample database](https://dev.mysql.com/doc/employee/en/) available on [GitHub](https://github.com/datacharmer/test_db) has already been loaded. The GitHub files are scripts of commands, similar to the relevant commands below, that create and populate tables of data about a fictional company’s employees. The syntax for running these scripts will depend on the SQL implementation you are using. A utility that you run from the operating system prompt is typical.\n\n\n```sql\n-- Comments start with two hyphens. End each command with a semicolon.\n\n/*\nMulti-line comments\n*/\n\n-- SQL is not case-sensitive about keywords. The sample commands here\n-- follow the convention of spelling them in upper-case because it makes\n-- it easier to distinguish them from database, table, and column names.\n\n-- Create and delete a database. Database and table names are case-sensitive.\nCREATE DATABASE someDatabase;\nDROP DATABASE someDatabase;\n\n-- List available databases.\nSHOW DATABASES;\n\n-- Use a particular existing database.\nUSE employees;\n\n-- Select all rows and columns from the current database's departments table.\n-- Default activity is for the interpreter to scroll the results on your screen.\nSELECT * FROM departments;\n\n-- Retrieve all rows from the departments table,\n-- but only the dept_no and dept_name columns.\n-- Splitting up commands across lines is OK.\nSELECT dept_no,\n       dept_name FROM departments;\n\n-- Retrieve all departments columns, but just 5 rows.\nSELECT * FROM departments LIMIT 5;\n\n-- Retrieve dept_name column values from the departments\n-- table where the dept_name value has the substring 'en'.\nSELECT dept_name FROM departments WHERE dept_name LIKE '%en%';\n\n-- Retrieve all columns from the departments table where the dept_name\n-- column starts with an 'S' and has exactly 4 characters after it.\nSELECT * FROM departments WHERE dept_name LIKE 'S____';\n\n-- Select title values from the titles table but don't show duplicates.\nSELECT DISTINCT title FROM titles;\n\n-- Same as above, but sorted (case-sensitive) by the title values.\n-- The order can be specified by adding ASC (ascending) or DESC (descending).\n-- If omitted, it will sort in ascending order by default.\nSELECT DISTINCT title FROM titles ORDER BY title ASC;\n\n-- Use the comparison operators (=, >, <, >=, <=, <>) and\n-- the conditional keywords (AND, OR) to refine your queries.\nSELECT * FROM departments WHERE dept_no = 'd001' OR dept_no = 'd002';\n\n-- Same as above.\nSELECT * FROM departments WHERE dept_no IN ('d001', 'd002');\n\n-- Opposite of the above.\nSELECT * FROM departments WHERE dept_no NOT IN ('d001', 'd002');\n\n-- Select in a given range.\nSELECT * from departments WHERE dept_no BETWEEN 'd001' AND 'd002';\n\n-- Show the number of rows in the departments table.\nSELECT COUNT(*) FROM departments;\n\n-- Show the number of rows in the departments table that\n-- have 'en' as a substring of the dept_name value.\nSELECT COUNT(*) FROM departments WHERE dept_name LIKE '%en%';\n\n-- Aggregate functions can be used, with GROUP BY, to compute a value\n-- from a set of values. Most commonly used functions are:\n-- MIN(), MAX(), COUNT(), SUM(), AVG().\n-- Use HAVING to filter rows by aggregated values.\n\n-- Retrieve the total number of employees, by department number,\n-- with the condition of having more than 100 employees.\nSELECT dept_no, COUNT(dept_no) FROM dept_emp GROUP BY dept_no\nHAVING COUNT(dept_no) > 100;\n\n-- Aliases, using the optional keyword AS, can be used for column/table names.\nSELECT COUNT(A.*) AS total_employees, COUNT(B.*) total_departments\nFROM employees AS A, departments B;\n\n-- Common date format is \"yyyy-mm-dd\".\n-- However, it can vary according to the implementation, the operating system, and the session's locale.\nSELECT * FROM dept_manager WHERE from_date >= '1990-01-01';\n\n-- A JOIN of information from multiple tables: the titles table shows\n-- who had what job titles, by their employee numbers, from what\n-- date to what date. Retrieve this information, but instead of the\n-- employee number, use the employee number as a cross-reference to\n-- the employees table to get each employee's first and last name\n-- instead. (And only get 10 rows.)\n\nSELECT employees.first_name, employees.last_name,\n       titles.title, titles.from_date, titles.to_date\nFROM titles INNER JOIN employees ON\n       employees.emp_no = titles.emp_no LIMIT 10;\n\n-- Combine the result of multiple SELECT.\n-- UNION selects distinct rows, UNION ALL selects all rows.\nSELECT * FROM departments WHERE dept_no = 'd001'\nUNION\nSELECT * FROM departments WHERE dept_no = 'd002';\n\n-- SQL syntax order is:\n-- SELECT _ FROM _ JOIN _ ON _ WHERE _ GROUP BY _ HAVING _ ORDER BY _ UNION\n\n-- List all the tables in all the databases. Implementations typically provide\n-- their own shortcut command to do this with the database currently in use.\nSELECT * FROM INFORMATION_SCHEMA.TABLES\nWHERE TABLE_TYPE='BASE TABLE';\n\n-- Create a table called tablename1, with the two columns shown, for\n-- the database currently in use. Lots of other options are available\n-- for how you specify the columns, such as their datatypes.\nCREATE TABLE tablename1 (fname VARCHAR(20), lname VARCHAR(20));\n\n-- Insert a row of data into the table tablename1. This assumes that the\n-- table has been defined to accept these values as appropriate for it.\nINSERT INTO tablename1 VALUES('Richard','Mutt');\n\n-- In tablename1, change the fname value to 'John'\n-- for all rows that have an lname value of 'Mutt'.\nUPDATE tablename1 SET fname='John' WHERE lname='Mutt';\n\n-- Delete rows from the tablename1 table\n-- where the lname value begins with 'M'.\nDELETE FROM tablename1 WHERE lname LIKE 'M%';\n\n-- Delete all rows from the tablename1 table, leaving the empty table.\nDELETE FROM tablename1;\n\n-- Remove the entire tablename1 table.\nDROP TABLE tablename1;\n```\n\n## Further Reading\n\n* [Codecademy - SQL](https://www.codecademy.com/learn/learn-sql) A good introduction to SQL in a \"learn by doing it\" format.\n* [Database System Concepts](https://www.db-book.com) book's Chapter 3 - Introduction to SQL has an in depth explanation of SQL concepts.\n"
        },
        {
          "name": "standard-ml.md",
          "type": "blob",
          "size": 19.3505859375,
          "content": "---\nname: \"Standard ML\"\nfilename: standardml.sml\ncontributors:\n    - [\"Simon Shine\", \"https://simonshine.dk/\"]\n    - [\"David Pedersen\", \"https://github.com/davidpdrsn\"]\n    - [\"James Baker\", \"http://www.jbaker.io/\"]\n    - [\"Leo Zovic\", \"http://langnostic.inaimathi.ca/\"]\n    - [\"Chris Wilson\", \"http://sencjw.com/\"]\n---\n\nStandard ML is a functional programming language with type inference and some\nside-effects.  Some of the hard parts of learning Standard ML are: Recursion,\npattern matching, type inference (guessing the right types but never allowing\nimplicit type conversion). Standard ML is distinguished from Haskell by including\nreferences, allowing variables to be updated.\n\n```ocaml\n(* Comments in Standard ML begin with (* and end with *).  Comments can be\n   nested which means that all (* tags must end with a *) tag.  This comment,\n   for example, contains two nested comments. *)\n\n(* A Standard ML program consists of declarations, e.g. value declarations: *)\nval rent = 1200\nval phone_no = 5551337\nval pi = 3.14159\nval negative_number = ~15  (* Yeah, unary minus uses the 'tilde' symbol *)\n\n(* Optionally, you can explicitly declare types. This is not necessary as\n   ML will automatically figure out the types of your values. *)\nval diameter = 7926 : int\nval e = 2.718 : real\nval name = \"Bobby\" : string\n\n(* And just as importantly, functions: *)\nfun is_large(x : int) = if x > 37 then true else false\n\n(* Floating-point numbers are called \"reals\". *)\nval tau = 2.0 * pi         (* You can multiply two reals *)\nval twice_rent = 2 * rent  (* You can multiply two ints *)\n(* val meh = 1.25 * 10 *)  (* But you can't multiply an int and a real *)\nval yeh = 1.25 * (Real.fromInt 10) (* ...unless you explicitly convert\n                                      one or the other *)\n\n(* +, - and * are overloaded so they work for both int and real. *)\n(* The same cannot be said for division which has separate operators: *)\nval real_division = 14.0 / 4.0  (* gives 3.5 *)\nval int_division  = 14 div 4    (* gives 3, rounding down *)\nval int_remainder = 14 mod 4    (* gives 2, since 3*4 = 12 *)\n\n(* ~ is actually sometimes a function (e.g. when put in front of variables) *)\nval negative_rent = ~(rent)  (* Would also have worked if rent were a \"real\" *)\n\n(* There are also booleans and boolean operators *)\nval got_milk = true\nval got_bread = false\nval has_breakfast = got_milk andalso got_bread  (* 'andalso' is the operator *)\nval has_something = got_milk orelse got_bread   (* 'orelse' is the operator *)\nval is_sad = not(has_something)                 (* not is a function *)\n\n(* Many values can be compared using equality operators: = and <> *)\nval pays_same_rent = (rent = 1300)  (* false *)\nval is_wrong_phone_no = (phone_no <> 5551337)  (* false *)\n\n(* The operator <> is what most other languages call !=. *)\n(* 'andalso' and 'orelse' are called && and || in many other languages. *)\n\n(* Actually, most of the parentheses above are unnecessary.  Here are some\n   different ways to say some of the things mentioned above: *)\nfun is_large x = x > 37  (* The parens above were necessary because of ': int' *)\nval is_sad = not has_something\nval pays_same_rent = rent = 1300  (* Looks confusing, but works *)\nval is_wrong_phone_no = phone_no <> 5551337\nval negative_rent = ~rent  (* ~ rent (notice the space) would also work *)\n\n(* Parentheses are mostly necessary when grouping things: *)\nval some_answer = is_large (5 + 5)      (* Without parens, this would break! *)\n(* val some_answer = is_large 5 + 5 *)  (* Read as: (is_large 5) + 5. Bad! *)\n\n\n(* Besides booleans, ints and reals, Standard ML also has chars and strings: *)\nval foo = \"Hello, World!\\n\"  (* The \\n is the escape sequence for linebreaks *)\nval one_letter = #\"a\"        (* That funky syntax is just one character, a *)\n\nval combined = \"Hello \" ^ \"there, \" ^ \"fellow!\\n\"  (* Concatenate strings *)\n\nval _ = print foo       (* You can print things. We are not interested in the *)\nval _ = print combined  (* result of this computation, so we throw it away. *)\n(* val _ = print one_letter *)  (* Only strings can be printed this way *)\n\n\nval bar = [ #\"H\", #\"e\", #\"l\", #\"l\", #\"o\" ]  (* SML also has lists! *)\n(* val _ = print bar *)  (* Lists are unfortunately not the same as strings *)\n\n(* Fortunately they can be converted.  String is a library and implode and size\n   are functions available in that library that take strings as argument. *)\nval bob = String.implode bar          (* gives \"Hello\" *)\nval bob_char_count = String.size bob  (* gives 5 *)\nval _ = print (bob ^ \"\\n\")            (* For good measure, add a linebreak *)\n\n(* You can have lists of any kind *)\nval numbers = [1, 3, 3, 7, 229, 230, 248]  (* : int list *)\nval names = [ \"Fred\", \"Jane\", \"Alice\" ]    (* : string list *)\n\n(* Even lists of lists of things *)\nval groups = [ [ \"Alice\", \"Bob\" ],\n               [ \"Huey\", \"Dewey\", \"Louie\" ],\n               [ \"Bonnie\", \"Clyde\" ] ]     (* : string list list *)\n\nval number_count = List.length numbers     (* gives 7 *)\n\n(* You can put single values in front of lists of the same kind using\n   the :: operator, called \"the cons operator\" (known from Lisp). *)\nval more_numbers = 13 :: numbers  (* gives [13, 1, 3, 3, 7, ...] *)\nval more_groups  = [\"Batman\",\"Superman\"] :: groups\n\n(* Lists of the same kind can be appended using the @ (\"append\") operator *)\nval guest_list = [ \"Mom\", \"Dad\" ] @ [ \"Aunt\", \"Uncle\" ]\n\n(* This could have been done with the \"cons\" operator.  It is tricky because the\n   left-hand-side must be an element whereas the right-hand-side must be a list\n   of those elements. *)\nval guest_list = \"Mom\" :: \"Dad\" :: [ \"Aunt\", \"Uncle\" ]\nval guest_list = \"Mom\" :: (\"Dad\" :: (\"Aunt\" :: (\"Uncle\" :: [])))\n\n(* If you have many lists of the same kind, you can concatenate them all *)\nval everyone = List.concat groups  (* [ \"Alice\", \"Bob\", \"Huey\", ... ] *)\n\n(* A list can contain any (finite) number of values *)\nval lots = [ 5, 5, 5, 6, 4, 5, 6, 5, 4, 5, 7, 3 ]  (* still just an int list *)\n\n(* Lists can only contain one kind of thing... *)\n(* val bad_list = [ 1, \"Hello\", 3.14159 ] : ??? list *)\n\n\n(* Tuples, on the other hand, can contain a fixed number of different things *)\nval person1 = (\"Simon\", 28, 3.14159)  (* : string * int * real *)\n\n(* You can even have tuples inside lists and lists inside tuples *)\nval likes = [ (\"Alice\", \"ice cream\"),\n              (\"Bob\",   \"hot dogs\"),\n              (\"Bob\",   \"Alice\") ]     (* : (string * string) list *)\n\nval mixup = [ (\"Alice\", 39),\n              (\"Bob\",   37),\n              (\"Eve\",   41) ]  (* : (string * int) list *)\n\nval good_bad_stuff =\n  ([\"ice cream\", \"hot dogs\", \"chocolate\"],\n   [\"liver\", \"paying the rent\" ])           (* : string list * string list *)\n\n\n(* Records are tuples with named slots *)\n\nval rgb = { r=0.23, g=0.56, b=0.91 } (* : {b:real, g:real, r:real} *)\n\n(* You don't need to declare their slots ahead of time. Records with\n   different slot names are considered different types, even if their\n   slot value types match up. For instance... *)\n\nval Hsl = { H=310.3, s=0.51, l=0.23 } (* : {H:real, l:real, s:real} *)\nval Hsv = { H=310.3, s=0.51, v=0.23 } (* : {H:real, s:real, v:real} *)\n\n(* ...trying to evaluate `Hsv = Hsl` or `rgb = Hsl` would give a type\n   error. While they're all three-slot records composed only of `real`s,\n   they each have different names for at least some slots. *)\n\n(* You can use hash notation to get values out of tuples. *)\n\nval H = #H Hsv (* : real *)\nval s = #s Hsl (* : real *)\n\n(* Functions! *)\nfun add_them (a, b) = a + b    (* A simple function that adds two numbers *)\nval test_it = add_them (3, 4)  (* gives 7 *)\n\n(* Larger functions are usually broken into several lines for readability *)\nfun thermometer temp =\n    if temp < 37\n    then \"Cold\"\n    else if temp > 37\n         then \"Warm\"\n         else \"Normal\"\n\nval test_thermo = thermometer 40  (* gives \"Warm\" *)\n\n(* if-sentences are actually expressions and not statements/declarations.\n   A function body can only contain one expression.  There are some tricks\n   for making a function do more than just one thing, though. *)\n\n(* A function can call itself as part of its result (recursion!) *)\nfun fibonacci n =\n    if n = 0 then 0 else                   (* Base case *)\n    if n = 1 then 1 else                   (* Base case *)\n    fibonacci (n - 1) + fibonacci (n - 2)  (* Recursive case *)\n\n(* Sometimes recursion is best understood by evaluating a function by hand:\n\n fibonacci 4\n   ~> fibonacci (4 - 1) + fibonacci (4 - 2)\n   ~> fibonacci 3 + fibonacci 2\n   ~> (fibonacci (3 - 1) + fibonacci (3 - 2)) + fibonacci 2\n   ~> (fibonacci 2 + fibonacci 1) + fibonacci 2\n   ~> ((fibonacci (2 - 1) + fibonacci (2 - 2)) + fibonacci 1) + fibonacci 2\n   ~> ((fibonacci 1 + fibonacci 0) + fibonacci 1) + fibonacci 2\n   ~> ((1 + fibonacci 0) + fibonacci 1) + fibonacci 2\n   ~> ((1 + 0) + fibonacci 1) + fibonacci 2\n   ~> (1 + fibonacci 1) + fibonacci 2\n   ~> (1 + 1) + fibonacci 2\n   ~> 2 + fibonacci 2\n   ~> 2 + (fibonacci (2 - 1) + fibonacci (2 - 2))\n   ~> 2 + (fibonacci (2 - 1) + fibonacci (2 - 2))\n   ~> 2 + (fibonacci 1 + fibonacci 0)\n   ~> 2 + (1 + fibonacci 0)\n   ~> 2 + (1 + 0)\n   ~> 2 + 1\n   ~> 3  which is the 4th Fibonacci number, according to this definition\n\n *)\n\n(* A function cannot change the variables it can refer to.  It can only\n   temporarily shadow them with new variables that have the same names.  In this\n   sense, variables are really constants and only behave like variables when\n   dealing with recursion.  For this reason, variables are also called value\n   bindings. An example of this: *)\n\nval x = 42\nfun answer(question) =\n    if question = \"What is the meaning of life, the universe and everything?\"\n    then x\n    else raise Fail \"I'm an exception. Also, I don't know what the answer is.\"\nval x = 43\nval hmm = answer \"What is the meaning of life, the universe and everything?\"\n(* Now, hmm has the value 42.  This is because the function answer refers to\n   the copy of x that was visible before its own function definition. *)\n\n\n(* Functions can take several arguments by taking one tuples as argument: *)\nfun solve2 (a : real, b : real, c : real) =\n    ((~b + Math.sqrt(b * b - 4.0 * a * c)) / (2.0 * a),\n     (~b - Math.sqrt(b * b - 4.0 * a * c)) / (2.0 * a))\n\n(* Sometimes, the same computation is carried out several times. It makes sense\n   to save and re-use the result the first time. We can use \"let-bindings\": *)\nfun solve2 (a : real, b : real, c : real) =\n    let val discr  = b * b - 4.0 * a * c\n        val sqr = Math.sqrt discr\n        val denom = 2.0 * a\n    in ((~b + sqr) / denom,\n        (~b - sqr) / denom)\n    end\n\n\n(* Pattern matching is a funky part of functional programming.  It is an\n   alternative to if-sentences.  The fibonacci function can be rewritten: *)\nfun fibonacci 0 = 0  (* Base case *)\n  | fibonacci 1 = 1  (* Base case *)\n  | fibonacci n = fibonacci (n - 1) + fibonacci (n - 2)  (* Recursive case *)\n\n(* Pattern matching is also possible on composite types like tuples, lists and\n   records. Writing \"fun solve2 (a, b, c) = ...\" is in fact a pattern match on\n   the one three-tuple solve2 takes as argument. Similarly, but less intuitively,\n   you can match on a list consisting of elements in it (from the beginning of\n   the list only). *)\nfun first_elem (x::xs) = x\nfun second_elem (x::y::xs) = y\nfun evenly_positioned_elems (odd::even::xs) = even::evenly_positioned_elems xs\n  | evenly_positioned_elems [odd] = []  (* Base case: throw away *)\n  | evenly_positioned_elems []    = []  (* Base case *)\n  \n(* The case expression can also be used to pattern match and return a value *)\ndatatype temp =\n      C of real\n    | F of real\n    \n(*  Declaring a new C temp value...\n    val t: temp = C 45.0  *)\n\nfun temp_to_f t =\n    case t of\n      C x => x * (9.0 / 5.0) + 32.0\n    | F x => x\n\n(* When matching on records, you must use their slot names, and you must bind\n   every slot in a record. The order of the slots doesn't matter though. *)\n\nfun rgbToTup {r, g, b} = (r, g, b)    (* fn : {b:'a, g:'b, r:'c} -> 'c * 'b * 'a *)\nfun mixRgbToTup {g, b, r} = (r, g, b) (* fn : {b:'a, g:'b, r:'c} -> 'c * 'b * 'a *)\n\n(* If called with {r=0.1, g=0.2, b=0.3}, either of the above functions\n   would return (0.1, 0.2, 0.3). But it would be a type error to call them\n   with {r=0.1, g=0.2, b=0.3, a=0.4} *)\n\n(* Higher order functions: Functions can take other functions as arguments.\n   Functions are just other kinds of values, and functions don't need names\n   to exist.  Functions without names are called \"anonymous functions\" or\n   lambda expressions or closures (since they also have a lexical scope). *)\nval is_large = (fn x => x > 37)\nval add_them = fn (a,b) => a + b\nval thermometer =\n    fn temp => if temp < 37\n               then \"Cold\"\n               else if temp > 37\n                    then \"Warm\"\n                    else \"Normal\"\n\n(* The following uses an anonymous function directly and gives \"ColdWarm\" *)\nval some_result = (fn x => thermometer (x - 5) ^ thermometer (x + 5)) 37\n\n(* Here is a higher-order function that works on lists (a list combinator) *)\n(* map f l\n       applies f to each element of l from left to right, \n       returning the list of results. *)\nval readings = [ 34, 39, 37, 38, 35, 36, 37, 37, 37 ]  (* first an int list *)\nval opinions = List.map thermometer readings (* gives [ \"Cold\", \"Warm\", ... ] *)\n\n(* And here is another one for filtering lists *)\nval warm_readings = List.filter is_large readings  (* gives [39, 38] *)\n\n(* You can create your own higher-order functions, too.  Functions can also take\n   several arguments by \"currying\" them. Syntax-wise this means adding spaces\n   between function arguments instead of commas and surrounding parentheses. *)\nfun map f [] = []\n  | map f (x::xs) = f(x) :: map f xs\n\n(* map has type ('a -> 'b) -> 'a list -> 'b list and is called polymorphic. *)\n(* 'a is called a type variable. *)\n\n\n(* We can declare functions as infix *)\nval plus = add_them   (* plus is now equal to the same function as add_them *)\ninfix plus            (* plus is now an infix operator *)\nval seven = 2 plus 5  (* seven is now bound to 7 *)\n\n(* Functions can also be made infix before they are declared *)\ninfix minus\nfun x minus y = x - y (* It becomes a little hard to see what's the argument *)\nval four = 8 minus 4  (* four is now bound to 4 *)\n\n(* An infix function/operator can be made prefix with 'op' *)\nval n = op + (5, 5)   (* n is now 10 *)\n\n(* 'op' is useful when combined with high order functions because they expect\n   functions and not operators as arguments. Most operators are really just\n   infix functions. *)\n(* foldl f init [x1, x2, ..., xn]\n       returns\n       f(xn, ...f(x2, f(x1, init))...)\n       or init if the list is empty. *)\nval sum_of_numbers = foldl op+ 0 [1, 2, 3, 4, 5]\n\n\n(* Datatypes are useful for creating both simple and complex structures *)\ndatatype color = Red | Green | Blue\n\n(* Here is a function that takes one of these as argument *)\nfun say(col) =\n    if col = Red then \"You are red!\" else\n    if col = Green then \"You are green!\" else\n    if col = Blue then \"You are blue!\" else\n    raise Fail \"Unknown color\"\n\nval _ = print (say(Red) ^ \"\\n\")\n\n(* Datatypes are very often used in combination with pattern matching *)\nfun say Red   = \"You are red!\"\n  | say Green = \"You are green!\"\n  | say Blue  = \"You are blue!\"\n\n(* We did not include the match arm `say _ = raise Fail \"Unknown color\"`\nbecause after specifying all three colors, the pattern is exhaustive\nand redundancy is not permitted in pattern matching *)\n\n\n(* Here is a binary tree datatype *)\ndatatype 'a btree = Leaf of 'a\n                  | Node of 'a btree * 'a * 'a btree (* three-arg constructor *)\n\n(* Here is a binary tree *)\nval myTree = Node (Leaf 9, 8, Node (Leaf 3, 5, Leaf 7))\n\n(* Drawing it, it might look something like...\n\n           8\n          / \\\n leaf -> 9   5\n            / \\\n   leaf -> 3   7 <- leaf\n *)\n\n(* This function counts the sum of all the elements in a tree *)\nfun count (Leaf n) = n\n  | count (Node (leftTree, n, rightTree)) = count leftTree + n + count rightTree\n\nval myTreeCount = count myTree  (* myTreeCount is now bound to 32 *)\n\n\n(* Exceptions! *)\n(* Exceptions can be raised/thrown using the reserved word 'raise' *)\nfun calculate_interest(n) = if n < 0.0\n                            then raise Domain\n                            else n * 1.04\n\n(* Exceptions can be caught using \"handle\" *)\nval balance = calculate_interest ~180.0\n              handle Domain => ~180.0    (* balance now has the value ~180.0 *)\n\n(* Some exceptions carry extra information with them *)\n(* Here are some examples of built-in exceptions *)\nfun failing_function []    = raise Empty  (* used for empty lists *)\n  | failing_function [x]   = raise Fail \"This list is too short!\"\n  | failing_function [x,y] = raise Overflow  (* used for arithmetic *)\n  | failing_function xs    = raise Fail \"This list is too long!\"\n\n(* We can pattern match in 'handle' to make sure\n   a specific exception was raised, or grab the message *)\nval err_msg = failing_function [1,2] handle Fail _ => \"Fail was raised\"\n                                          | Domain => \"Domain was raised\"\n                                          | Empty  => \"Empty was raised\"\n                                          | _      => \"Unknown exception\"\n\n(* err_msg now has the value \"Unknown exception\" because Overflow isn't\n   listed as one of the patterns -- thus, the catch-all pattern _ is used. *)\n\n(* We can define our own exceptions like this *)\nexception MyException\nexception MyExceptionWithMessage of string\nexception SyntaxError of string * (int * int)\n\n(* File I/O! *)\n(* Write a nice poem to a file *)\nfun writePoem(filename) =\n    let val file = TextIO.openOut(filename)\n        val _ = TextIO.output(file, \"Roses are red,\\nViolets are blue.\\n\")\n        val _ = TextIO.output(file, \"I have a gun.\\nGet in the van.\\n\")\n    in TextIO.closeOut(file)\n    end\n\n(* Read a nice poem from a file into a list of strings *)\nfun readPoem(filename) =\n    let val file = TextIO.openIn filename\n        val poem = TextIO.inputAll file\n        val _ = TextIO.closeIn file\n    in String.tokens (fn c => c = #\"\\n\") poem\n    end\n\nval _ = writePoem \"roses.txt\"\nval test_poem = readPoem \"roses.txt\"  (* gives [ \"Roses are red,\",\n                                                 \"Violets are blue.\",\n                                                 \"I have a gun.\",\n                                                 \"Get in the van.\" ] *)\n\n(* We can create references to data which can be updated *)\nval counter = ref 0 (* Produce a reference with the ref function *)\n\n(* Assign to a reference with the assignment operator *)\nfun set_five reference = reference := 5\n\n(* Read a reference with the dereference operator *)\nfun equals_five reference = !reference = 5\n\n(* We can use while loops for when recursion is messy *)\nfun decrement_to_zero r = if !r < 0\n                          then r := 0\n                          else while !r >= 0 do r := !r - 1\n\n(* This returns the unit value (in practical terms, nothing, a 0-tuple) *)\n\n(* To allow returning a value, we can use the semicolon to sequence evaluations *)\nfun decrement_ret x y = (x := !x - 1; y)\n```\n\n## Further learning\n\n* Install an interactive compiler (REPL), for example\n  [Poly/ML](http://www.polyml.org/),\n  [Moscow ML](http://mosml.org),\n  [SML/NJ](http://smlnj.org/).\n* Follow the Coursera course [Programming Languages](https://www.coursera.org/course/proglang).\n* Read *[ML for the Working Programmer](https://www.cl.cam.ac.uk/~lp15/MLbook/pub-details.html)* by Larry C. Paulson.\n* Use [StackOverflow's sml tag](http://stackoverflow.com/questions/tagged/sml).\n* Solve exercises on [Exercism.io's Standard ML track](https://exercism.io/tracks/sml).\n"
        },
        {
          "name": "stylus.md",
          "type": "blob",
          "size": 4.287109375,
          "content": "---\nname: Stylus\nfilename: learnStylus.styl\ncontributors:\n  - [\"Salomão Neto\", \"https://github.com/salomaosnff\"]\n  - [\"Isaac Henrique\", \"https://github.com/Isaachi1\"]\ntranslators:\n  - [\"Divay Prakash\", \"https://github.com/divayprakash\"]\n---\n\nStylus is a dynamic stylesheet preprocessor language that is compiled into CSS. It aims to add functionality to CSS without breaking compatibility across web browsers.\nIt does this using variables, nesting, mixins, functions and more.\n\nStylus syntax is very flexible. You can use standard CSS syntax and leave the semicolon (;), colon (:) and even the ({) and (}) optional, making your code even more readable.\n\nStylus does not provide new style options, but gives functionality that lets you make your CSS much more dynamic.\n\n```scss\n/* Code style\n==============================*/\n\n/* Keys, semicolon, and colon are optional in Stylus. */\n\nbody {\n  background: #000;\n}\n\nbody {\n  background: #000\n}\n\nbody {\n  background #000\n}\n\nbody\n  background #000\n\nbody\n  background: #000;\n\nbody\n  background: #000\n\n// Single-line comments are removed when Stylus is compiled into CSS.\n\n/* Multi-line comments are preserved. */\n\n\n/* Selectors\n==============================*/\n\n/* Selecting elements within another element */\nbody {\n  background: #000000;\n  h1 {\n    color: #FF0000;\n  }\n}\n\n/* Or if you prefer... */\nbody\n  background #000000\n  h1\n    color #FF0000\n\n\n/* Getting parent element reference\n==============================*/\na {\n  color: #0088dd;\n  &:hover {\n    color: #DD8800;\n  }\n}\n\n\n/* Variables\n==============================*/\n\n\n/*\n  You can store a CSS value (such as the color) of a variable.\n  Although it is optional, it is recommended to add $ before a variable name\n  so you can distinguish a variable from another CSS value.\n*/\n\n$primary-color = #A3A4FF\n$secondary-color = #51527F\n$body-font = 'Roboto', sans-serif\n\n/* You can use variables throughout your style sheet.\nNow, if you want to change the color, you only have to make the change once. */\n\nbody\n  background-color $primary-color\n  color $secondary-color\n  font-family $body-font\n\n/* After compilation: */\nbody {\n  background-color: #A3A4FF;\n  color: #51527F;\n  font-family: 'Roboto', sans-serif;\n}\n\n/ *\nThis is much easier to maintain than having to change color\neach time it appears throughout your style sheet.\n* /\n\n\n/* Mixins\n==============================*/\n\n/* If you find that you are writing the same code for more than one\nelement, you may want to store that code in a mixin.\n\ncenter()\n  display block\n  margin-left auto\n  margin-right auto\n  left 0\n  right 0\n\n/* Using the mixin */\nbody {\n  center()\n  background-color: $primary-color\n}\n\n/* After compilation: */\ndiv {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  left: 0;\n  right: 0;\n  background-color: #A3A4FF;\n}\n\n/* You can use mixins to create a shorthand property. */\n\nsize($width, $height)\n  width $width\n  height $height\n\n.rectangle\n  size(100px, 60px)\n\n.square\n  size(40px, 40px)\n\n/* You can use a mixin as a CSS property. */\ncircle($ratio)\n  width $ratio * 2\n  height $ratio * 2\n  border-radius $ratio\n\n.ball\n  circle 25px\n\n\n/* Interpolation\n==============================*/\n\nvendor(prop, args)\n  -webkit-{prop} args\n  -moz-{prop} args\n  {prop} args\n\nborder-radius()\n  vendor('border-radius', arguments)\n\nbox-shadow()\n  vendor('box-shadow', arguments)\n\nbutton\n  border-radius 1px 2px / 3px 4px\n\n\n/* Functions\n==============================*/\n\n/* Functions in Stylus allow you to perform a variety of tasks, such as recalling some data. */\n\nbody {\n  background darken(#0088DD, 50%) // Dim color #0088DD by 50%\n}\n\n/* Creating your own function */\nadd(a, b)\n  a + b\n\nbody\n  padding add(10px, 5)\n\n\n/* Conditions\n==============================*/\ncompare(a, b)\n  if a > b\n    bigger\n  else if a < b\n    smaller\n  else\n    equal\n\ncompare(5, 2)   // => bigger\ncompare(1, 5)   // => smaller\ncompare(10, 10) // => equal\n\n\n/* Iterations\n==============================*/\n\n/*\nRepeat loop syntax for:\nfor <val-name> [, <key-name>] in <expression>\n*/\n\nfor $item in (1..2) /* Repeat block 12 times */\n  .col-{$item}\n    width ($item / 12) * 100% /* Calculate row by column number */\n```\n\nNow that you know a little about this powerful CSS preprocessor, you're ready to create more dynamic style sheets. To learn more, visit the official stylus documentation at [stylus-lang.com](https://stylus-lang.com).\n"
        },
        {
          "name": "sv",
          "type": "tree",
          "content": null
        },
        {
          "name": "swift.md",
          "type": "blob",
          "size": 31.26171875,
          "content": "---\nname: Swift\ncontributors:\n  - [\"Grant Timmerman\", \"http://github.com/grant\"]\n  - [\"Christopher Bess\", \"http://github.com/cbess\"]\n  - [\"Joey Huang\", \"http://github.com/kamidox\"]\n  - [\"Anthony Nguyen\", \"http://github.com/anthonyn60\"]\n  - [\"Clayton Walker\", \"https://github.com/cwalk\"]\n  - [\"Fernando Valverde\", \"http://visualcosita.xyz\"]\n  - [\"Alexey Nazaroff\", \"https://github.com/rogaven\"]\n  - [\"@Samasaur1\", \"https://github.com/Samasaur1\"]\nfilename: learnswift.swift\n---\n\nSwift is a programming language for iOS and macOS development created by Apple. Designed to coexist with Objective-C and to be more resilient against erroneous code, Swift was introduced in 2014 at Apple's developer conference WWDC. It is built with the LLVM compiler included in Xcode 6+.\n\nThe official _[Swift Programming Language](https://itunes.apple.com/us/book/swift-programming-language/id881256329)_ book from Apple is now available via Apple Books. It goes into much more detail than this guide, and if you have the time and patience to read it, it's recommended. Some of these examples are from that book.\n\nAnother great reference is _About Swift_ on Swift's [website](https://docs.swift.org/swift-book/).\n\n```swift\n// import a module\nimport Foundation\n\n// Single-line comments are prefixed with //\n// Multi-line comments start with /* and end with */\n/* Nested multiline comments\n /* ARE */\n allowed\n */\n\n// Xcode supports landmarks to annotate your code and lists them in the jump bar\n// MARK: Section mark\n// MARK: - Section mark with a separator line\n// TODO: Do something soon\n// FIXME: Fix this code\n\n//MARK: Hello, World\n// From Swift 3 on, to print, just use the `print` method.\n// It automatically appends a new line.\nprint(\"Hello, world\")\n\n//\n// MARK: - Variables\n//\n\n\n//Use `let` to declare a constant and `var` to declare a variable.\nlet theAnswer = 42\nvar theQuestion = \"What is the Answer?\"\ntheQuestion = \"How many roads must a man walk down?\"\ntheQuestion = \"What is six by nine?\"\n// Atttempting to reassign a constant throws a compile-time error\n//theAnswer = 54\n\n// Both variables and constants can be declared before they are given a value,\n//   but must be given a value before they are used\nlet someConstant: Int\nvar someVariable: String\n// These lines will throw errors:\n//print(someConstant)\n//print(someVariable)\nsomeConstant = 0\nsomeVariable = \"0\"\n// These lines are now valid:\nprint(someConstant)\nprint(someVariable)\n\n// As you can see above, variable types are automatically inferred.\n//   To explicitly declare the type, write it after the variable name,\n//   separated by a colon.\nlet aString: String = \"A string\"\nlet aDouble: Double = 0\n\n// Values are never implicitly converted to another type.\n// Explicitly make instances of the desired type.\nlet stringWithDouble = aString + String(aDouble)\nlet intFromDouble = Int(aDouble)\n\n// For strings, use string interpolation\nlet descriptionString = \"The value of aDouble is \\(aDouble)\"\n// You can put any expression inside string interpolation.\nlet equation = \"Six by nine is \\(6 * 9), not 42!\"\n// To avoid escaping double quotes and backslashes, change the string delimiter\nlet explanationString = #\"The string I used was \"The value of aDouble is \\(aDouble)\" and the result was \\#(descriptionString)\"#\n// You can put as many number signs as you want before the opening quote,\n//   just match them at the ending quote. They also change the escape character\n//   to a backslash followed by the same number of number signs.\n\nlet multiLineString = \"\"\"\n    This is a multi-line string.\n    It's called that because it takes up multiple lines (wow!)\n        Any indentation beyond the closing quotation marks is kept, the rest is discarded.\n    You can include \" or \"\" in multi-line strings because the delimiter is three \"s.\n    \"\"\"\n\n// Arrays\nlet shoppingList = [\"catfish\", \"water\", \"tulips\",] //commas are allowed after the last element\nlet secondElement = shoppingList[1] // Arrays are 0-indexed\n\n// Arrays declared with let are immutable; the following line throws a compile-time error\n//shoppingList[2] = \"mango\"\n\n// Arrays are structs (more on that later), so this creates a copy instead of referencing the same object\nvar mutableShoppingList = shoppingList\nmutableShoppingList[2] = \"mango\"\n\n// == is equality\nshoppingList == mutableShoppingList // false\n\n// Dictionaries declared with let are also immutable\nvar occupations = [\n    \"Malcolm\": \"Captain\",\n    \"Kaylee\": \"Mechanic\"\n]\noccupations[\"Jayne\"] = \"Public Relations\"\n// Dictionaries are also structs, so this also creates a copy\nlet immutableOccupations = occupations\n\nimmutableOccupations == occupations // true\n\n// Arrays and dictionaries both automatically grow as you add elements\nmutableShoppingList.append(\"blue paint\")\noccupations[\"Tim\"] = \"CEO\"\n\n// They can both be set to empty\nmutableShoppingList = []\noccupations = [:]\n\nlet emptyArray = [String]()\nlet emptyArray2 = Array<String>() // same as above\n// [T] is shorthand for Array<T>\nlet emptyArray3: [String] = [] // Declaring the type explicitly allows you to set it to an empty array\nlet emptyArray4: Array<String> = [] // same as above\n\n// [Key: Value] is shorthand for Dictionary<Key, Value>\nlet emptyDictionary = [String: Double]()\nlet emptyDictionary2 = Dictionary<String, Double>() // same as above\nvar emptyMutableDictionary: [String: Double] = [:]\nvar explicitEmptyMutableDictionary: Dictionary<String, Double> = [:] // same as above\n\n// MARK: Other variables\nlet øπΩ = \"value\" // unicode variable names\nlet 🤯 = \"wow\" // emoji variable names\n\n// Keywords can be used as variable names\n// These are contextual keywords that wouldn't be used now, so are allowed\nlet convenience = \"keyword\"\nlet weak = \"another keyword\"\nlet override = \"another keyword\"\n\n// Using backticks allows keywords to be used as variable names even if they wouldn't be allowed normally\nlet `class` = \"keyword\"\n\n// MARK: - Optionals\n\n/*\n Optionals are a Swift language feature that either contains a value,\n or contains nil (no value) to indicate that a value is missing.\n Nil is roughly equivalent to `null` in other languages.\n A question mark (?) after the type marks the value as optional of that type.\n\n If a type is not optional, it is guaranteed to have a value.\n\n Because Swift requires every property to have a type, even nil must be\n explicitly stored as an Optional value.\n\n Optional<T> is an enum, with the cases .none (nil) and .some(T) (the value)\n */\n\nvar someOptionalString: String? = \"optional\" // Can be nil\n// T? is shorthand for Optional<T> — ? is a postfix operator (syntax candy)\nlet someOptionalString2: Optional<String> = nil\nlet someOptionalString3 = String?.some(\"optional\") // same as the first one\nlet someOptionalString4 = String?.none //nil\n\n/*\n To access the value of an optional that has a value, use the postfix\n operator !, which force-unwraps it. Force-unwrapping is like saying, \"I\n know that this optional definitely has a value, please give it to me.\"\n\n Trying to use ! to access a non-existent optional value triggers a\n runtime error. Always make sure that an optional contains a non-nil\n value before using ! to force-unwrap its value.\n */\n\nif someOptionalString != nil {\n    // I am not nil\n    if someOptionalString!.hasPrefix(\"opt\") {\n        print(\"has the prefix\")\n    }\n}\n\n// Swift supports \"optional chaining,\" which means that you can call functions\n//   or get properties of optional values and they are optionals of the appropriate type.\n// You can even do this multiple times, hence the name \"chaining.\"\n\nlet empty = someOptionalString?.isEmpty // Bool?\n\n// if-let structure -\n// if-let is a special structure in Swift that allows you to check\n//   if an Optional rhs holds a value, and if it does unwrap\n//   and assign it to the lhs.\nif let someNonOptionalStringConstant = someOptionalString {\n    // has `Some` value, non-nil\n    // someOptionalStringConstant is of type String, not type String?\n    if !someNonOptionalStringConstant.hasPrefix(\"ok\") {\n        // does not have the prefix\n    }\n}\n\n//if-var is allowed too!\nif var someNonOptionalString = someOptionalString {\n    someNonOptionalString = \"Non optional AND mutable\"\n    print(someNonOptionalString)\n}\n\n// You can bind multiple optional values in one if-let statement.\n//   If any of the bound values are nil, the if statement does not execute.\nif let first = someOptionalString, let second = someOptionalString2,\n    let third = someOptionalString3, let fourth = someOptionalString4 {\n    print(\"\\(first), \\(second), \\(third), and \\(fourth) are all not nil\")\n}\n\n//if-let supports \",\" (comma) clauses, which can be used to\n//   enforce conditions on newly-bound optional values.\n// Both the assignment and the \",\" clause must pass.\nlet someNumber: Int? = 7\nif let num = someNumber, num > 3 {\n    print(\"num is not nil and is greater than 3\")\n}\n\n// Implicitly unwrapped optional — An optional value that doesn't need to be unwrapped\nlet unwrappedString: String! = \"Value is expected.\"\n\n// Here's the difference:\nlet forcedString = someOptionalString! // requires an exclamation mark\nlet implicitString = unwrappedString // doesn't require an exclamation mark\n\n/*\n You can think of an implicitly unwrapped optional as giving permission\n for the optional to be unwrapped automatically whenever it's used.\n Rather than placing an exclamation mark after the optional's name each time you use it,\n you place an exclamation mark after the optional's type when you declare it.\n */\n\n// Otherwise, you can treat an implicitly unwrapped optional the same way the you treat a normal optional\n//   (i.e., if-let, != nil, etc.)\n\n// Pre-Swift 5, T! was shorthand for ImplicitlyUnwrappedOptional<T>\n// Swift 5 and later, using ImplicitlyUnwrappedOptional throws a compile-time error.\n//var unwrappedString2: ImplicitlyUnwrappedOptional<String> = \"Value is expected.\" //error\n\n// The nil-coalescing operator ?? unwraps an optional if it contains a non-nil value, or returns a default value.\nsomeOptionalString = nil\nlet someString = someOptionalString ?? \"abc\"\nprint(someString) // abc\n// a ?? b is shorthand for a != nil ? a! : b\n\n// MARK: - Control Flow\n\nlet condition = true\nif condition { print(\"condition is true\") } // can't omit the braces\n\nif theAnswer > 50 {\n    print(\"theAnswer > 50\")\n} else if condition {\n    print(\"condition is true\")\n} else {\n    print(\"Neither are true\")\n}\n\n// The condition in an `if` statement must be a `Bool`, so the following code is an error, not an implicit comparison to zero\n//if 5 {\n//    print(\"5 is not zero\")\n//}\n\n// Switch\n// Must be exhaustive\n// Does not implicitly fall through, use the fallthrough keyword\n// Very powerful, think `if` statements with syntax candy\n// They support String, object instances, and primitives (Int, Double, etc)\nlet vegetable = \"red pepper\"\nlet vegetableComment: String\nswitch vegetable {\ncase \"celery\":\n    vegetableComment = \"Add some raisins and make ants on a log.\"\ncase \"cucumber\", \"watercress\": // match multiple values\n    vegetableComment = \"That would make a good tea sandwich.\"\ncase let localScopeValue where localScopeValue.hasSuffix(\"pepper\"):\n    vegetableComment = \"Is it a spicy \\(localScopeValue)?\"\ndefault: // required (in order to cover all possible input)\n    vegetableComment = \"Everything tastes good in soup.\"\n}\nprint(vegetableComment)\n\n// You use the `for-in` loop to iterate over a sequence, such as an array, dictionary, range, etc.\nfor element in shoppingList {\n    print(element) // shoppingList is of type `[String]`, so element is of type `String`\n}\n//Iterating through a dictionary does not guarantee any specific order\nfor (person, job) in immutableOccupations {\n    print(\"\\(person)'s job is \\(job)\")\n}\nfor i in 1...5 {\n    print(i, terminator: \" \") // Prints \"1 2 3 4 5\"\n}\nfor i in 0..<5 {\n    print(i, terminator: \" \") // Prints \"0 1 2 3 4\"\n}\n//for index in range can replace a C-style for loop:\n//    for (int i = 0; i < 10; i++) {\n//        //code\n//    }\n//becomes:\n//    for i in 0..<10 {\n//        //code\n//    }\n//To step by more than one, use the stride(from:to:by:) or stride(from:through:by) functions\n//`for i in stride(from: 0, to: 10, by: 2)` is the same as `for (int i = 0; i < 10; i += 2)`\n//`for i in stride(from: 0, through: 10, by: 2)` is the same as `for (int i = 0; i <= 10; i += 2)\n\n// while loops are just like most languages\nvar i = 0\nwhile i < 5 {\n    i += Bool.random() ? 1 : 0\n    print(i)\n}\n\n// This is like a do-while loop in other languages — the body of the loop executes a minimum of once\nrepeat {\n    i -= 1\n    i += Int.random(in: 0...3)\n} while i < 5\n\n// The continue statement continues executing a loop at the next iteration\n// The break statement ends a loop immediately\n\n// MARK: - Functions\n\n// Functions are a first-class type, meaning they can be nested in functions and can be passed around.\n\n// Function with Swift header docs (format as Swift-modified Markdown syntax)\n\n/// A greet operation.\n///\n/// - Parameters:\n///   - name: A name.\n///   - day: A day.\n/// - Returns: A string containing the name and day value.\nfunc greet(name: String, day: String) -> String {\n    return \"Hello \\(name), today is \\(day).\"\n}\ngreet(name: \"Bob\", day: \"Tuesday\")\n\n// Ideally, function names and parameter labels combine to make function calls similar to sentences.\nfunc sayHello(to name: String, onDay day: String) -> String {\n    return \"Hello \\(name), the day is \\(day)\"\n}\nsayHello(to: \"John\", onDay: \"Sunday\")\n\n//Functions that don't return anything can omit the return arrow; they don't need to say that they return Void (although they can).\nfunc helloWorld() {\n    print(\"Hello, World!\")\n}\n\n// Argument labels can be blank\nfunc say(_ message: String) {\n    print(#\"I say \"\\#(message)\"\"#)\n}\nsay(\"Hello\")\n\n// Default parameters can be omitted when calling the function.\nfunc printParameters(requiredParameter r: Int, optionalParameter o: Int = 10) {\n    print(\"The required parameter was \\(r) and the optional parameter was \\(o)\")\n}\nprintParameters(requiredParameter: 3)\nprintParameters(requiredParameter: 3, optionalParameter: 6)\n\n// Variadic args — only one set per function.\nfunc setup(numbers: Int...) {\n    // it's an array\n    let _ = numbers[0]\n    let _ = numbers.count\n}\n\n// pass by ref\nfunc swapTwoInts(a: inout Int, b: inout Int) {\n    let tempA = a\n    a = b\n    b = tempA\n}\nvar someIntA = 7\nvar someIntB = 3\nswapTwoInts(a: &someIntA, b: &someIntB) //must be called with an & before the variable name.\nprint(someIntB) // 7\n\ntype(of: greet) // (String, String) -> String\ntype(of: helloWorld) // () -> Void\n\n// Passing and returning functions\nfunc makeIncrementer() -> ((Int) -> Int) {\n    func addOne(number: Int) -> Int {\n        return 1 + number\n    }\n    return addOne\n}\nvar increment = makeIncrementer()\nincrement(7)\n\nfunc performFunction(_ function: (String, String) -> String, on string1: String, and string2: String) {\n    let result = function(string1, string2)\n    print(\"The result of calling the function on \\(string1) and \\(string2) was \\(result)\")\n}\n\n// Function that returns multiple items in a tuple\nfunc getGasPrices() -> (Double, Double, Double) {\n    return (3.59, 3.69, 3.79)\n}\nlet pricesTuple = getGasPrices()\nlet price = pricesTuple.2 // 3.79\n// Ignore Tuple (or other) values by using _ (underscore)\nlet (_, price1, _) = pricesTuple // price1 == 3.69\nprint(price1 == pricesTuple.1) // true\nprint(\"Gas price: \\(price)\")\n\n// Labeled/named tuple params\nfunc getGasPrices2() -> (lowestPrice: Double, highestPrice: Double, midPrice: Double) {\n    return (1.77, 37.70, 7.37)\n}\nlet pricesTuple2 = getGasPrices2()\nlet price2 = pricesTuple2.lowestPrice\nlet (_, price3, _) = pricesTuple2\nprint(pricesTuple2.highestPrice == pricesTuple2.1) // true\nprint(\"Highest gas price: \\(pricesTuple2.highestPrice)\")\n\n// guard statements\nfunc testGuard() {\n    // guards provide early exits or breaks, placing the error handler code near the conditions.\n    // it places variables it declares in the same scope as the guard statement.\n    // They make it easier to avoid the \"pyramid of doom\"\n    guard let aNumber = Optional<Int>(7) else {\n        return // guard statements MUST exit the scope that they are in.\n        // They generally use `return` or `throw`.\n    }\n\n    print(\"number is \\(aNumber)\")\n}\ntestGuard()\n\n// Note that the print function is declared like so:\n//     func print(_ input: Any..., separator: String = \" \", terminator: String = \"\\n\")\n// To print without a newline:\nprint(\"No newline\", terminator: \"\")\nprint(\"!\")\n\n// MARK: - Closures\n\nvar numbers = [1, 2, 6]\n\n// Functions are special case closures ({})\n\n// Closure example.\n// `->` separates the arguments and return type\n// `in` separates the closure header from the closure body\nnumbers.map({\n    (number: Int) -> Int in\n    let result = 3 * number\n    return result\n})\n\n// When the type is known, like above, we can do this\nnumbers = numbers.map({ number in 3 * number })\n// Or even this\n//numbers = numbers.map({ $0 * 3 })\n\nprint(numbers) // [3, 6, 18]\n\n// Trailing closure\nnumbers = numbers.sorted { $0 > $1 }\n\nprint(numbers) // [18, 6, 3]\n\n// MARK: - Enums\n\n// Enums can optionally be of a specific type or on their own.\n// They can contain methods like classes.\n\nenum Suit {\n    case spades, hearts, diamonds, clubs\n    var icon: Character {\n        switch self {\n        case .spades:\n            return \"♤\"\n        case .hearts:\n            return \"♡\"\n        case .diamonds:\n            return \"♢\"\n        case .clubs:\n            return \"♧\"\n        }\n    }\n}\n\n// Enum values allow short hand syntax, no need to type the enum type\n// when the variable is explicitly declared\nvar suitValue: Suit = .hearts\n\n// Conforming to the CaseIterable protocol automatically synthesizes the allCases property,\n//   which contains all the values. It works on enums without associated values or @available attributes.\nenum Rank: CaseIterable {\n    case ace\n    case two, three, four, five, six, seven, eight, nine, ten\n    case jack, queen, king\n    var icon: String {\n        switch self {\n        case .ace:\n            return \"A\"\n        case .two:\n            return \"2\"\n        case .three:\n            return \"3\"\n        case .four:\n            return \"4\"\n        case .five:\n            return \"5\"\n        case .six:\n            return \"6\"\n        case .seven:\n            return \"7\"\n        case .eight:\n            return \"8\"\n        case .nine:\n            return \"9\"\n        case .ten:\n            return \"10\"\n        case .jack:\n            return \"J\"\n        case .queen:\n            return \"Q\"\n        case .king:\n            return \"K\"\n        }\n    }\n}\n\nfor suit in [Suit.clubs, .diamonds, .hearts, .spades] {\n    for rank in Rank.allCases {\n        print(\"\\(rank.icon)\\(suit.icon)\")\n    }\n}\n\n// String enums can have direct raw value assignments\n// or their raw values will be derived from the Enum field\nenum BookName: String {\n    case john\n    case luke = \"Luke\"\n}\nprint(\"Name: \\(BookName.john.rawValue)\")\n\n// Enum with associated Values\nenum Furniture {\n    // Associate with Int\n    case desk(height: Int)\n    // Associate with String and Int\n    case chair(String, Int)\n\n    func description() -> String {\n        //either placement of let is acceptable\n        switch self {\n        case .desk(let height):\n            return \"Desk with \\(height) cm\"\n        case let .chair(brand, height):\n            return \"Chair of \\(brand) with \\(height) cm\"\n        }\n    }\n}\n\nvar desk: Furniture = .desk(height: 80)\nprint(desk.description())     // \"Desk with 80 cm\"\nvar chair = Furniture.chair(\"Foo\", 40)\nprint(chair.description())    // \"Chair of Foo with 40 cm\"\n\n// MARK: - Structures & Classes\n\n/*\n Structures and classes in Swift have many things in common. Both can:\n - Define properties to store values\n - Define methods to provide functionality\n - Define subscripts to provide access to their values using subscript syntax\n - Define initializers to set up their initial state\n - Be extended to expand their functionality beyond a default implementation\n - Conform to protocols to provide standard functionality of a certain kind\n\n Classes have additional capabilities that structures don't have:\n - Inheritance enables one class to inherit the characteristics of another.\n - Type casting enables you to check and interpret the type of a class instance at runtime.\n - Deinitializers enable an instance of a class to free up any resources it has assigned.\n - Reference counting allows more than one reference to a class instance.\n\n Unless you need to use a class for one of these reasons, use a struct.\n\n Structures are value types, while classes are reference types.\n */\n\n// MARK: Structures\n\nstruct NamesTable {\n    let names: [String]\n\n    // Custom subscript\n    subscript(index: Int) -> String {\n        return names[index]\n    }\n}\n\n// Structures have an auto-generated (implicit) designated \"memberwise\" initializer\nlet namesTable = NamesTable(names: [\"Me\", \"Them\"])\nlet name = namesTable[1]\nprint(\"Name is \\(name)\") // Name is Them\n\n// MARK: Classes\n\nclass Shape {\n    func getArea() -> Int {\n        return 0\n    }\n}\n\nclass Rect: Shape {\n    var sideLength: Int = 1\n\n    // Custom getter and setter property\n    var perimeter: Int {\n        get {\n            return 4 * sideLength\n        }\n        set {\n            // `newValue` is an implicit variable available to setters\n            sideLength = newValue / 4\n        }\n    }\n\n    // Computed properties must be declared as `var`, you know, cause' they can change\n    var smallestSideLength: Int {\n        return self.sideLength - 1\n    }\n\n    // Lazily load a property\n    // subShape remains nil (uninitialized) until getter called\n    lazy var subShape = Rect(sideLength: 4)\n\n    // If you don't need a custom getter and setter,\n    // but still want to run code before and after getting or setting\n    // a property, you can use `willSet` and `didSet`\n    var identifier: String = \"defaultID\" {\n        // the `someIdentifier` arg will be the variable name for the new value\n        willSet(someIdentifier) {\n            print(someIdentifier)\n        }\n    }\n\n    init(sideLength: Int) {\n        self.sideLength = sideLength\n        // always super.init last when init custom properties\n        super.init()\n    }\n\n    func shrink() {\n        if sideLength > 0 {\n            sideLength -= 1\n        }\n    }\n\n    override func getArea() -> Int {\n        return sideLength * sideLength\n    }\n}\n\n// A simple class `Square` extends `Rect`\nclass Square: Rect {\n    // Use a convenience initializer to make calling a designated initializer faster and more \"convenient\".\n    // Convenience initializers call other initializers in the same class and pass default values to one or more of their parameters.\n    // Convenience initializers can have parameters as well, which are useful to customize the called initializer parameters or choose a proper initializer based on the value passed.\n    convenience init() {\n        self.init(sideLength: 5)\n    }\n}\n\nvar mySquare = Square()\nprint(mySquare.getArea()) // 25\nmySquare.shrink()\nprint(mySquare.sideLength) // 4\n\n// cast instance\nlet aShape = mySquare as Shape\n\n// downcast instance: \n// Because downcasting can fail, the result can be an optional (as?) or an implicitly unwrpped optional (as!).  \nlet anOptionalSquare = aShape as? Square // This will return nil if aShape is not a Square\nlet aSquare = aShape as! Square // This will throw a runtime error if aShape is not a Square\n\n// compare instances, not the same as == which compares objects (equal to)\nif mySquare === mySquare {\n    print(\"Yep, it's mySquare\")\n}\n\n// Optional init\nclass Circle: Shape {\n    var radius: Int\n    override func getArea() -> Int {\n        return 3 * radius * radius\n    }\n\n    // Place a question mark postfix after `init` is an optional init\n    // which can return nil\n    init?(radius: Int) {\n        self.radius = radius\n        super.init()\n\n        if radius <= 0 {\n            return nil\n        }\n    }\n}\n\nvar myCircle = Circle(radius: 1)\nprint(myCircle?.getArea())    // Optional(3)\nprint(myCircle!.getArea())    // 3\nvar myEmptyCircle = Circle(radius: -1)\nprint(myEmptyCircle?.getArea())    // \"nil\"\nif let circle = myEmptyCircle {\n    // will not execute since myEmptyCircle is nil\n    print(\"circle is not nil\")\n}\n\n// MARK: - Protocols\n\n// protocols are also known as interfaces in some other languages\n\n// `protocol`s can require that conforming types have specific\n// instance properties, instance methods, type methods,\n// operators, and subscripts.\n\nprotocol ShapeGenerator {\n    var enabled: Bool { get set }\n    func buildShape() -> Shape\n}\n\n// MARK: - Other\n\n// MARK: Typealiases\n\n// Typealiases allow one type (or composition of types) to be referred to by another name\ntypealias Integer = Int\nlet myInteger: Integer = 0\n\n// MARK: = Operator\n\n// Assignment does not return a value. This means it can't be used in conditional statements,\n//   and the following statement is also illegal\n//    let multipleAssignment = theQuestion = \"No questions asked\"\n//But you can do this:\nlet multipleAssignment = \"No questions asked\", secondConstant = \"No answers given\"\n\n// MARK: Ranges\n\n// The ..< and ... operators create ranges.\n\n// ... is inclusive on both ends (a \"closed range\") — mathematically, [0, 10]\nlet _0to10 = 0...10\n// ..< is inclusive on the left, exclusive on the right (a \"range\") — mathematically, [0, 10)\nlet singleDigitNumbers = 0..<10\n// You can omit one end (a \"PartialRangeFrom\") — mathematically, [0, ∞)\nlet toInfinityAndBeyond = 0...\n// Or the other end (a \"PartialRangeTo\") — mathematically, (-∞, 0)\nlet negativeInfinityToZero = ..<0\n// (a \"PartialRangeThrough\") — mathematically, (-∞, 0]\nlet negativeInfinityThroughZero = ...0\n\n// MARK: Wildcard operator\n\n// In Swift, _ (underscore) is the wildcard operator, which allows values to be ignored\n\n// It allows functions to be declared without argument labels:\nfunc function(_ labelLessParameter: Int, label labeledParameter: Int, labelAndParameterName: Int) {\n    print(labelLessParameter, labeledParameter, labelAndParameterName)\n}\nfunction(0, label: 0, labelAndParameterName: 0)\n\n// You can ignore the return values of functions\nfunc printAndReturn(_ str: String) -> String {\n    print(str)\n    return str\n}\nlet _ = printAndReturn(\"Some String\")\n\n// You can ignore part of a tuple and keep part of it\nfunc returnsTuple() -> (Int, Int) {\n    return (1, 2)\n}\nlet (_, two) = returnsTuple()\n\n// You can ignore closure parameters\nlet closure: (Int, Int) -> String = { someInt, _ in\n    return \"\\(someInt)\"\n}\nclosure(1, 2) // returns 1\n\n// You can ignore the value in a for loop\nfor _ in 0..<10 {\n    // Code to execute 10 times\n}\n\n// MARK: Access Control\n\n/*\n Swift has five levels of access control:\n - Open: Accessible *and subclassible* in any module that imports it.\n - Public: Accessible in any module that imports it, subclassible in the module it is declared in.\n - Internal: Accessible and subclassible in the module it is declared in.\n - Fileprivate: Accessible and subclassible in the file it is declared in.\n - Private: Accessible and subclassible in the enclosing declaration (think inner classes/structs/enums)\n\n See more here: https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html\n */\n\n// MARK: Preventing Overrides\n\n// You can add keyword `final` before a class or instance method, or a property to prevent it from being overridden\nclass Shape {\n    final var finalInteger = 10\n}\n\n// Prevent a class from being subclassed\nfinal class ViewManager {\n}\n\n// MARK: Conditional Compilation, Compile-Time Diagnostics, & Availability Conditions\n\n// Conditional Compilation\n#if false\nprint(\"This code will not be compiled\")\n#else\nprint(\"This code will be compiled\")\n#endif\n/*\n Options are:\n os()                   macOS, iOS, watchOS, tvOS, Linux\n arch()                 i386, x86_64, arm, arm64\n swift()                >= or < followed by a version number\n compiler()             >= or < followed by a version number\n canImport()            A module name\n targetEnvironment()    simulator\n */\n#if swift(<3)\nprintln()\n#endif\n\n// Compile-Time Diagnostics\n// You can use #warning(message) and #error(message) to have the compiler emit warnings and/or errors\n#warning(\"This will be a compile-time warning\")\n//  #error(\"This would be a compile-time error\")\n\n//Availability Conditions\nif #available(iOSMac 10.15, *) {\n    // macOS 10.15 is available, you can use it here\n} else {\n    // macOS 10.15 is not available, use alternate APIs\n}\n\n// MARK: Any and AnyObject\n\n// Swift has support for storing a value of any type.\n// For that purpose there are two keywords: `Any` and `AnyObject`\n// `AnyObject` == `id` from Objective-C\n// `Any` works with any values (class, Int, struct, etc.)\nvar anyVar: Any = 7\nanyVar = \"Changed value to a string, not good practice, but possible.\"\nlet anyObjectVar: AnyObject = Int(1) as NSNumber\n\n// MARK: Extensions\n\n// Extensions allow you to add extra functionality to an already-declared type, even one that you don't have the source code for.\n\n// Square now \"conforms\" to the `CustomStringConvertible` protocol\nextension Square: CustomStringConvertible {\n    var description: String {\n        return \"Area: \\(self.getArea()) - ID: \\(self.identifier)\"\n    }\n}\n\nprint(\"Square: \\(mySquare)\")\n\n// You can also extend built-in types\nextension Int {\n    var doubled: Int {\n        return self * 2\n    }\n\n    func multipliedBy(num: Int) -> Int {\n        return num * self\n    }\n\n    mutating func multiplyBy(num: Int) {\n        self *= num\n    }\n}\n\nprint(7.doubled) // 14\nprint(7.doubled.multipliedBy(num: 3)) // 42\n\n// MARK: Generics\n\n// Generics: Similar to Java and C#. Use the `where` keyword to specify the\n//   requirements of the generics.\n\nfunc findIndex<T: Equatable>(array: [T], valueToFind: T) -> Int? {\n    for (index, value) in array.enumerated() {\n        if value == valueToFind {\n            return index\n        }\n    }\n    return nil\n}\nfindIndex(array: [1, 2, 3, 4], valueToFind: 3) // Optional(2)\n\n// You can extend types with generics as well\nextension Array where Array.Element == Int {\n    var sum: Int {\n        var total = 0\n        for el in self {\n            total += el\n        }\n        return total\n    }\n}\n\n// MARK: Operators\n\n// Custom operators can start with the characters:\n//      / = - + * % < > ! & | ^ . ~\n// or\n// Unicode math, symbol, arrow, dingbat, and line/box drawing characters.\nprefix operator !!!\n\n// A prefix operator that triples the side length when used\nprefix func !!! (shape: inout Square) -> Square {\n    shape.sideLength *= 3\n    return shape\n}\n\n// current value\nprint(mySquare.sideLength) // 4\n\n// change side length using custom !!! operator, increases size by 3\n!!!mySquare\nprint(mySquare.sideLength) // 12\n\n// Operators can also be generics\ninfix operator <->\nfunc <-><T: Equatable> (a: inout T, b: inout T) {\n    let c = a\n    a = b\n    b = c\n}\n\nvar foo: Float = 10\nvar bar: Float = 20\n\nfoo <-> bar\nprint(\"foo is \\(foo), bar is \\(bar)\") // \"foo is 20.0, bar is 10.0\"\n\n// MARK: - Error Handling\n\n// The `Error` protocol is used when throwing errors to catch\nenum MyError: Error {\n    case badValue(msg: String)\n    case reallyBadValue(msg: String)\n}\n\n// functions marked with `throws` must be called using `try`\nfunc fakeFetch(value: Int) throws -> String {\n    guard 7 == value else {\n        throw MyError.reallyBadValue(msg: \"Some really bad value\")\n    }\n\n    return \"test\"\n}\n\nfunc testTryStuff() {\n    // assumes there will be no error thrown, otherwise a runtime exception is raised\n    let _ = try! fakeFetch(value: 7)\n\n    // if an error is thrown, then it proceeds, but if the value is nil\n    // it also wraps every return value in an optional, even if its already optional\n    let _ = try? fakeFetch(value: 7)\n\n    do {\n        // normal try operation that provides error handling via `catch` block\n        try fakeFetch(value: 1)\n    } catch MyError.badValue(let msg) {\n        print(\"Error message: \\(msg)\")\n    } catch {\n        // must be exhaustive\n    }\n}\ntestTryStuff()\n```\n"
        },
        {
          "name": "ta",
          "type": "tree",
          "content": null
        },
        {
          "name": "tailspin.md",
          "type": "blob",
          "size": 12.341796875,
          "content": "---\nname: Tailspin\nfilename: learntailspin.tt\ncontributors:\n    - [\"Torbjörn Gannholm\", \"https://github.com/tobega/\"]\n\n---\n\n**Tailspin** works with streams of values in pipelines. You may often feel\nthat your program is the machine and that the input data is the program.\n\nWhile Tailspin is unlikely to become mainstream, or even production-ready,\nit will change the way you think about programming in a good way.\n\n```c\n// Comment to end of line\n\n// Process data in a pipeline with steps separated by ->\n// String literals are delimited by single quotes\n// A bang (!) indicates a sink, or end of the pipe\n// OUT is the standard output object, ::write is the message to write output\n'Hello, World!' -> !OUT::write\n\n// Output a newline by just entering it in the string (multiline strings)\n'\n' -> !OUT::write\n// Or output the decimal unicode value for newline (10) between $# and ;\n'$#10;' -> !OUT::write\n\n// Define an immutable named value. Value syntax is very literal.\ndef names: ['Adam', 'George', 'Jenny', 'Lucy'];\n\n// Stream the list to process each name. Note the use of $ to get the value.\n// The current value in the pipeline is always just $\n// String interpolation starts with a $ and ends with ;\n$names... -> 'Hello $;!\n' -> !OUT::write\n\n// You can also stream in the interpolation and nest interpolations\n// Note the list indexing with parentheses and the slice extraction\n// Note the use of ~ to signify an exclusive bound to the range\n// Outputs 'Hello Adam, George, Jenny and Lucy!'\n'Hello $names(first);$names(first~..~last)... -> ', $;'; and $names(last);!\n' -> !OUT::write\n\n// Conditionally say different things to different people\n// Matchers (conditional expressions) are delimited by angle brackets\n// A set of matchers, evaluated top down, must be in templates (a function)\n// Here it is an inline templates delimited by \\( to \\)\n// Note the doubled '' and $$ to get a literal ' and $\n$names... -> \\(\n  when <='Adam'> do 'What''s up $;?' !\n  when <='George'> do 'George, where are the $$10 you owe me?' !\n  otherwise 'Hello $;!' !\n\\) -> '$;$#10;' -> !OUT::write\n\n// You can also define templates (functions)\n// A lone ! emits the value into the calling pipeline without returning control\n// The # sends the value to be matched by the matchers \n// Note that templates always take one input value and emit 0 or more outputs\ntemplates collatz-sequence\n  when <..0> do 'The start seed must be a positive integer' !\n  when <=1> do $!\n// The ?( to ) allows matching a computed value. Can be concatenated as \"and\"\n  when <?($ mod 2 <=1>)> do\n    $ !\n    3 * $ + 1 -> #\n  otherwise\n    $ !\n    $ ~/ 2 -> #\nend collatz-sequence\n\n// Collatz sequence from random start on one line separated by spaces\n1000 -> SYS::randomInt -> $ + 1 -> collatz-sequence -> '$; ' -> !OUT::write\n'\n' -> !OUT::write\n\n// Collatz sequence formatted ten per line by an indexed list template\n// Note the square brackets creates a list of the enclosed pipeline results\n// The \\[i]( to \\) defines a templates to apply to each value of a list,\n// the i (or whatever identifier you choose) holds the index\n[1000 -> SYS::randomInt -> $ + 1 -> collatz-sequence]\n-> \\[i](\n  when <=1|?($i mod 10 <=0>)> do '$;$#10;' !\n  otherwise '$; ' !\n\\)... -> !OUT::write\n\n// A range can have an optional stride\ndef odd-numbers: [1..100:2];\n\n// Use mutable state locally. One variable per templates, always called @\ntemplates product\n  @: $(first);\n  $(first~..last)... -> @: $@ * $;\n  $@ !\nend product\n\n$odd-numbers(6..8) -> product -> !OUT::write\n'\n' -> !OUT::write\n\n// Use processor objects to hold mutable state.\n// Note that the outer @ must be referred to by name in inner contexts\n// A sink templates gives no output and is called prefixed by !\n// A source templates takes no input and is called prefixed by $\nprocessor Product\n  @: 1;\n  sink accumulate\n    @Product: $@Product * $;\n  end accumulate\n  source result\n    $@Product !\n  end result\nend Product\n\n// The processor is a constructor templates. This one called with $ (no input)\ndef multiplier: $Product;\n\n// Call object templates by sending messages with ::\n1..7 -> !multiplier::accumulate\n-1 -> !multiplier::accumulate\n$multiplier::result -> 'The product is $;\n' -> !OUT::write\n\n// Syntax sugar for a processor implementing the collector interface\n1..7 -> ..=Product -> 'The collected product is $;$#10;' -> !OUT::write\n\n// Symbol sets (essentially enums) can be defined for finite sets of values\ndata colour #{green, red, blue, yellow}\n\n// Use processor typestates to model state cleanly.\n// The last named mutable state value set determines the typestate\nprocessor Lamp\n  def colours: $;\n  @Off: 0;\n  state Off\n    source switchOn\n      @On: $@Off mod $colours::length + 1;\n      'Shining a $colours($@On); light$#10;' !\n    end switchOn\n  end Off\n  state On\n    source turnOff\n      @Off: $@On;\n      'Lamp is off$#10;' !\n    end turnOff\n  end On\nend Lamp\n\ndef myLamp: [colour#green, colour#blue] -> Lamp;\n\n$myLamp::switchOn -> !OUT::write // Shining a green light\n$myLamp::turnOff -> !OUT::write  // Lamp is off\n$myLamp::switchOn -> !OUT::write // Shining a blue light\n$myLamp::turnOff -> !OUT::write  // Lamp is off\n$myLamp::switchOn -> !OUT::write // Shining a green light\n\n// Use regular expressions to test strings\n['banana', 'apple', 'pear', 'cherry']... -> \\(\n  when <'.*a.*'> do '$; contains an ''a''' !\n  otherwise '$; has no ''a''' !\n\\) -> '$;\n' -> !OUT::write\n\n// Use composers with regular expressions and defined rules to parse strings\ncomposer parse-stock-line\n  {inventory-id: <INT> (<WS>), name: <'\\w+'> (<WS>), currency: <'.{3}'>,\n    unit-price: <INT> (<WS>?) <parts>?}\n  rule parts: associated-parts: [<part>+]\n  rule part: <'[A-Z]\\d+'> (<=','>?)\nend parse-stock-line\n\n'705 gizmo EUR5 A67,G456,B32' -> parse-stock-line -> !OUT::write\n// {associated-parts: [A67, G456, B32], currency: EUR,\n//     inventory-id: 705, name: gizmo, unit-price: 5}\n'\n' -> !OUT::write\n\n// Stream a string to split it into glyphs.\n// A list can be indexed/sliced by an array of indexes\n// Outputs ['h','e','l','l','o'], indexing arrays/lists starts at 1\n['abcdefghijklmnopqrstuvwxyz'...] -> $([8,5,12,12,15]) -> !OUT::write\n'\n' -> !OUT::write\n\n// We have used only raw strings above.\n// Strings can have different types as determined by a tag.\n// Comparing different types is an error, unless a wider type bound is set\n// Type bound is given in ´´ and '' means any string value, tagged or raw\ntemplates get-string-type\n  when <´''´ '.*'> do '$; is a raw string' !\n  when <´''´ id´'\\d+'> do '$; is a numeric id string' !\n  when <´''´ =id´'foo'> do 'id foo found' !\n  when <´''´ id´'.*'> do '$; is an id' !\n  when <´''´ name´'.+'> do '$; is a name' !\n  otherwise '$; is not a name or id, nor a raw string' !\nend get-string-type\n\n[name´'Anna', 'foo', id´'789', city´'London', id´'xzgh', id´'foo']...\n-> get-string-type -> '$;\n' -> !OUT::write\n\n// Numbers can be raw, tagged or have a unit of measure\n// Type .. is any numeric value, tagged, measure or raw\ntemplates get-number-type\n  when <´..´ =inventory-id´86> do 'inventory-id 86 found' !\n  when <´..´ inventory-id´100..> do '$; is an inventory-id >= 100' !\n  when <´..´ inventory-id´0..|..inventory-id´0> do '$; is an inventory-id' !\n  when <´..´ 0\"m\"..> do '$; is an m-measure >= 0\"m\"' !\n  when <´..´ ..0|0..> do '$; is a raw number' !\n  otherwise '$; is not a positive m-measure nor an inventory-id, nor raw' !\nend get-number-type\n\n[inventory-id´86, inventory-id´6, 78\"m\", 5\"s\", 99, inventory-id´654]...\n-> get-number-type -> '$;\n' -> !OUT::write\n\n// Measures can be used in arithmetic, \"1\" is the scalar unit\n// When mixing measures you have to cast to the result measure\n4\"m\" + 6\"m\" * 3\"1\" -> ($ ~/ 2\"s\")\"m/s\" -> '$;\n' -> !OUT::write\n\n// Tagged identifiers must be made into raw numbers when used in arithmetic\n// Then you can cast the result back to a tagged identifier if you like\ninventory-id´300 -> inventory-id´($::raw + 1) -> get-number-type -> '$;\n' -> !OUT::write\n\n// Fields get auto-typed, tagging raw strings or numbers by default\n// You cannot assign the wrong type to a field\ndef item: { inventory-id: 23, name: 'thingy', length: 12\"m\" };\n\n'Field inventory-id $item.inventory-id -> get-number-type;\n' -> !OUT::write\n'Field name $item.name -> get-string-type;\n' -> !OUT::write\n'Field length $item.length -> get-number-type;\n' -> !OUT::write\n\n// You can define types and use as type-tests. This also defines a field.\n// It would be an error to assign a non-standard plate to a standard-plate field\ndata standard-plate <'[A-Z]{3}[0-9]{3}'>\n\n[['Audi', 'XYZ345'], ['BMW', 'I O U']]... -> \\(\n  when <?($(2) <standard-plate>)> do {make: $(1), standard-plate: $(2)}!\n  otherwise {make: $(1), vanity-plate: $(2)}!\n\\) -> '$;\n' -> !OUT::write\n\n// You can define union types\ndata age <\"years\"|\"months\">\n\n[ {name: 'Cesar', age: 20\"years\"},\n  {name: 'Francesca', age: 19\"years\"},\n  {name: 'Bobby', age: 11\"months\"}]...\n-> \\(\n// Conditional tests on structures look a lot like literals, with field tests\n  when <{age: <13\"years\"..19\"years\">}> do '$.name; is a teenager'!\n  when <{age: <\"months\">}> do '$.name; is a baby'!\n// You don't need to handle all cases, 'Cesar' will just be ignored\n\\) -> '$;\n' -> !OUT::write\n\n// Array/list indexes start at 1 by default, but you can choose\n// Slices return whatever overlaps with the actual array\n[1..5] -> $(-2..2) -> '$;\n' -> !OUT::write // Outputs [1,2]\n0:[1..5] -> $(-2..2) -> '$;\n' -> !OUT::write // Outputs [1,2,3]\n-2:[1..5] -> $(-2..2) -> '$;\n' -> !OUT::write // Outputs [1,2,3,4,5]\n\n// Arrays can have indexes of measures or tagged identifiers\ndef game-map: 0\"y\":[\n  1..5 -> 0\"x\":[\n    1..5 -> level´1:[\n      1..3 -> {\n        level: $,\n        terrain-id: 6 -> SYS::randomInt,\n        altitude: (10 -> SYS::randomInt)\"m\"\n      }\n    ]\n  ]\n];\n\n// Projections (indexing) can span several dimensions\n$game-map(3\"y\"; 1\"x\"..3\"x\"; level´1; altitude:) -> '$;\n' -> !OUT::write // Gives a list of three altitude values\n\n// Flatten and do a grouping projection to get stats\n// Count and Max are built-in collector processors\n[$game-map... ... ...] -> $(collect {\n      occurences: Count,\n      highest-on-level: Max&{by: :(altitude:), select: :(level:)}\n    } by $({terrain-id:}))\n-> !OUT::write\n'\n' -> !OUT::write\n\n// Relations are sets of structures/records.\n// Here we get all unique {level:, terrain-id:, altitude:} combinations\ndef location-types: {|$game-map... ... ...|};\n\n// Projections can re-map structures. Note § is the relative accessor\n$location-types({terrain-id:, foo: §.level::raw * §.altitude})\n-> '$;\n' -> !OUT::write\n\n// Relational algebra operators can be used on relations\n($location-types join {| {altitude: 3\"m\"} |})\n-> !OUT::write\n'\n' -> !OUT::write\n\n// Define your own operators for binary operations\noperator (left dot right)\n  $left -> \\[i]($ * $right($i)!\\)... -> ..=Sum&{of: :()} !\nend dot\n\n([1,2,3] dot [2,5,8]) -> 'dot product: $;\n' -> !OUT::write\n\n// Supply parameters to vary templates behaviour\ntemplates die-rolls&{sides:}\n  1..$ -> $sides::raw -> SYS::randomInt -> $ + 1 !\nend die-rolls\n\n[5 -> die-rolls&{sides:4}] -> '$;\n' -> !OUT::write\n\n// Pass templates as parameters, maybe with some parameters pre-filled\nsource damage-roll&{first:, second:, third:}\n  (1 -> first) + (1 -> second) + (1 -> third) !\nend damage-roll\n\n$damage-roll&{first: die-rolls&{sides:4},\n  second: die-rolls&{sides:6}, third: die-rolls&{sides:20}}\n-> 'Damage done is $;\n' -> !OUT::write\n\n// Write tests inline. Run by --test flag on command line\n// Note the ~ in the matcher means \"not\",\n// and the array content matcher matches elements < 1 and > 4\ntest 'die-rolls'\n  assert [100 -> die-rolls&{sides: 4}] <~[<..~1|4~..>]> 'all rolls 1..4'\nend 'die-rolls'\n\n// Provide modified modules to tests (aka test doubles or mocks)\n// IN is the standard input object and ::lines gets all lines\nsource read-numbers\n  $IN::lines -> #\n  when <'\\d+'> do $!\nend read-numbers\n\ntest 'read numbers from input'\n  use shadowed core-system/\n    processor MockIn\n      source lines\n        [\n          '12a',\n          '65',\n          'abc'\n        ]... !\n      end lines\n    end MockIn\n    def IN: $MockIn;\n  end core-system/\n  assert $read-numbers <=65> 'Only 65 is read'\nend 'read numbers from input'\n\n// You can work with byte arrays\ncomposer hexToBytes\n  <HEX>\nend hexToBytes\n\n'1a5c678d' -> hexToBytes -> ($ and [x 07 x]) -> $(last-1..last) -> '$;\n' -> !OUT::write // Outputs 0005\n```\n\n## Further Reading\n\n- [Main Tailspin site](https://github.com/tobega/tailspin-v0/)\n- [Tailspin language reference](https://github.com/tobega/tailspin-v0/blob/master/TailspinReference.md)\n"
        },
        {
          "name": "tcl.md",
          "type": "blob",
          "size": 16.7451171875,
          "content": "---\nname: Tcl\ncontributors:\n    - [\"Poor Yorick\", \"https://pooryorick.com/\"]\nfilename: learntcl.tcl\n---\n\nTcl was created by [John Ousterhout](https://wiki.tcl-lang.org/page/John+Ousterhout) as a\nreusable scripting language for circuit design tools that he authored.  In 1997 he\nwas awarded the [ACM Software System\nAward](https://en.wikipedia.org/wiki/ACM_Software_System_Award) for Tcl.   Tcl\ncan be used both as an embeddable scripting language and as a general\nprogramming language.  It can also be used as a portable C library, even in\ncases where no scripting capability is needed, as it provides data structures\nsuch as dynamic strings, lists, and hash tables.  The C library also provides\nportable functionality for loading dynamic libraries, string formatting and\ncode conversion, filesystem operations, network operations, and more.  Various\nfeatures of Tcl stand out:\n\n* Convenient cross-platform networking API\n\n* Fully virtualized filesystem\n\n* Stackable I/O channels\n\n* Asynchronous to the core\n\n* Full coroutines\n\n* A threading model recognized as robust and easy to use\n\n\nTcl has much in common with Lisp, but instead of lists, Tcl uses strings as the\ncurrency of the language.  All values are strings.  A list is a string with a\ndefined format, and the body of a procedure (a script) is also a string rather\nthan a block.  To achieve performance, Tcl internally caches structured\nrepresentations of these values.  list routines, for example, operate on\nthe internal cached representation, and Tcl takes care of updating the string\nrepresentation if it is ever actually needed in the script.  The copy-on-write\ndesign of Tcl allows script authors to pass around large data values without\nactually incurring additional memory overhead.  Procedures are automatically\nbyte-compiled unless they use the more dynamic routines such as \"uplevel\",\n\"upvar\", and \"trace\".\n\nTcl is a pleasure to program in.  It will appeal to hacker types who find Lisp,\nForth, or Smalltalk interesting, as well as to engineers and scientists who\njust want to get down to business with a tool that bends to their will.  Its\ndiscipline of exposing all programmatic functionality as routines, including\nthings like looping and mathematical operations that are usually baked into the\nsyntax of other languages, allows it to fade into the background of whatever\ndomain-specific functionality a project needs. Its syntax, which is even\nlighter than that of Lisp, just gets out of the way.\n\n\n\n```tcl\n#! /bin/env tclsh\n\n###############################################################################\n## 1. Guidelines\n###############################################################################\n\n# Tcl is not Sh or C!  This needs to be said because standard shell quoting\n# habits almost work in Tcl and it is common for people to pick up Tcl and try\n# to get by with syntax they know from another language.  It works at first,\n# but soon leads to frustration when scripts become more complex.\n\n# Braces are a quoting mechanism, not syntax for the construction of code\n# blocks or lists. Tcl doesn't have either of those things.  Braces are used to\n# escape special characters, which makes them well-suited for quoting procedure\n# bodies and strings that should be interpreted as lists.\n\n\n###############################################################################\n## 2. Syntax\n###############################################################################\n\n# A script is made up of commands delimited by newlines or semicolons.  Each\n# command is a call to a routine.  The first word is the name of a routine to\n# call, and subsequent words are arguments to the routine.  Words are delimited\n# by whitespace.  Since each argument is a word in the command it is already a\n# string, and may be unquoted:\nset part1 Sal\nset part2 ut; set part3 ations\n\n\n# a dollar sign introduces variable substitution:\nset greeting $part1$part2$part3\n\n\n# When \"set\" is given only the name of a variable, it returns the\n# value of that variable:\nset part3 ;# Returns the value of the variable.\n\n\n# Left and right brackets embed a script to be evaluated for a result to\n# substitute into the word:\nset greeting $part1$part2[set part3]\n\n\n# An embedded script may be composed of multiple commands, the last of which provides\n# the result for the substitution:\nset greeting $greeting[\n    incr i\n    incr i\n    incr i\n]\nputs $greeting ;# The output is \"Salutations3\"\n\n# Every word in a command is a string, including the name of the routine, so\n# substitutions can be used on it as well. Given this variable\n# assignment,\nset action pu\n\n# , the following three commands are equivalent:\nputs $greeting\n${action}ts $greeting \n[set action]ts $greeting\n\n\n# backslash suppresses the special meaning of characters:\nset amount \\$16.42\n\n\n# backslash adds special meaning to certain characters:\nputs lots\\nof\\n\\n\\n\\n\\n\\nnewlines\n\n\n# A word enclosed in braces is not subject to any special interpretation or\n# substitutions, except that a backslash before a brace is not counted when\n# looking for the closing brace:\nset somevar {\n    This is a literal $ sign, and this \\} escaped\n    brace remains uninterpreted\n}\n\n\n# In a word enclosed in double quotes, whitespace characters lose their special\n# meaning:\nset name Neo\nset greeting \"Hello, $name\"\n\n\n# A variable name can be any string:\nset {first name} New\n\n\n# The braced form of variable substitution handles more complex variable names:\nset greeting \"Hello, ${first name}\"\n\n\n# \"set\" can always be used instead of variable substitution, and can handle all\n# variable names:\nset greeting \"Hello, [set {first name}]\"\n\n\n# To unpack a list into the command, use the expansion operator, \"{*}\".  These\n# two commands are equivalent:\nset name Neo\nset {*}{name Neo}\n\n\n# An array is a special variable that is a container for other variables.\nset person(name) Neo\nset person(destiny) {The One}\nset greeting \"Hello, $person(name)\"\n\n\n# \"variable\" can be used to declare or set variables. In contrast with \"set\",\n# which uses both the global namespace and the current namespace to resolve a\n# variable name, \"variable\" uses only the current namespace:\nvariable name New\n\n\n# \"namespace eval\" creates a new namespace if it doesn't exist.  A namespace\n# can contain both routines and variables:\nnamespace eval people {\n    namespace eval person1 {\n        variable name Neo\n    }\n}\n\n\n# Use two or more colons to delimit namespace components in variable names:\nnamespace eval people {\n    set greeting \"Hello $person1::name\"\n}\n\n# Two or more colons also delimit namespace components in routine names:\nproc people::person1::speak {} {\n    puts {I am The One.}\n}\n\n# Fully-qualified names begin with two colons:\nset greeting \"Hello $::people::person1::name\"\n\n\n\n###############################################################################\n## 3. No More Syntax\n###############################################################################\n\n# All other functionality is implemented via routines.  From this point on,\n# there is no new syntax.  Everything else there is to learn about\n# Tcl is about the behaviour of individual routines and what meaning they\n# assign to their arguments.\n\n\n\n###############################################################################\n## 4. Variables and Namespaces\n###############################################################################\n\n# Each variable and routine is associated with some namespace.\n\n# To end up with an interpreter that can do nothing, delete the global\n# namespace.  It's not very useful to do such a thing, but it illustrates the\n# nature of Tcl.  The name of the global namespace is actually the empty\n# string, but the only way to represent it is as a fully-qualified name. To\n# try it out call this routine:\nproc delete_global_namespace {} {\n    namespace delete ::\n}\n\n# Because \"set\" always keeps its eye on both the global namespace and the\n# current namespace, it's safer to use \"variable\" to declare a variable or\n# assign a value to a variable.  If a variable called \"name\" already exists in\n# the global namespace, using \"set\" here will assign a value to the global\n# variable instead of to a variable in the current namespace, whereas\n# \"variable\" operates only on the current namespace.\nnamespace eval people {\n    namespace eval person1 {\n        variable name Neo\n    }\n}\n\n# Once a variable is declared in a namespace, [set] sees it instead of seeing\n# an identically-named variable in the global namespace:\nnamespace eval people {\n    namespace eval person1 {\n        variable name\n        set name Neo\n    }\n}\n\n# But if \"set\" has to create a new variable, it always does it relative to the\n# current namespace:\nunset name\nnamespace eval people {\n    namespace eval person1 {\n        set name neo\n    }\n\n}\nset people::person1::name\n\n\n# An absolute name always begins with the name of the global namespace (the\n# empty string), followed by two colons:\nset ::people::person1::name Neo\n\n\n# Within a procedure, the \"variable\" links a variable in the current namespace\n# into the local scope:\nnamespace eval people::person1 {\n    proc fly {} {\n        variable name\n        puts \"$name is flying!\"\n    }\n}\n\n\n\n\n###############################################################################\n## 5. Built-in Routines\n###############################################################################\n\n# Math can be done with the \"expr\":\nset a 3\nset b 4\nset c [expr {$a + $b}]\n\n# Since \"expr\" performs variable substitution on its own, brace the expression\n# to prevent Tcl from performing variable substitution first.  See\n# \"https://wiki.tcl-lang.org/page/Brace+your+expr-essions\" for details.\n\n\n# \"expr\" understands variable and script substitution:\nset c [expr {$a + [set b]}]\n\n\n# \"expr\" provides a set of mathematical functions:\nset c [expr {pow($a,$b)}]\n\n\n# Mathematical operators are available as routines in the ::tcl::mathop\n# namespace:\n::tcl::mathop::+ 5 3\n\n# Routines can be imported from other namespaces:\nnamespace import ::tcl::mathop::+\nset result [+ 5 3]\n\n\n# Non-numeric values must be quoted, and operators like \"eq\" can be used to\n# constrain the operation to string comparison:\nset name Neo\nexpr {{Bob} eq $name}\n\n# The general operators fall back to string comparison if numeric\n# operation isn't feasible:\nexpr {{Bob} == $name}\n\n\n# \"proc\" creates new routines:\nproc greet name {\n    return \"Hello, $name!\"\n}\n\n#multiple parameters can be specified:\nproc greet {greeting name} {\n    return \"$greeting, $name!\"\n}\n\n\n# As noted earlier, braces do not construct a code block.  Every value, even\n# the third argument to \"proc\", is a string.  The previous command\n# can be rewritten using no braces:\nproc greet greeting\\ name return\\ \\\"\\$greeting,\\ \\$name!\\\"\n# \"\n\n\n\n# When the last parameter is the literal value \"args\", all extra arguments\n# passed to the routine are collected into a list and assigned to \"args\":\nproc fold {cmd first args} {\n    foreach arg $args {\n        set first [$cmd $first $arg]\n    }\n    return $first\n}\nfold ::tcl::mathop::* 5 3 3 ;# ->  45\n\n\n# Conditional execution is implemented as a routine:\nif {3 > 4} {\n    puts {This will never happen}\n} elseif {4 > 4} {\n    puts {This will also never happen}\n} else {\n    puts {This will always happen}\n}\n\n\n# Loops are implemented as routines.  The first and third arguments to \n# \"for\" are treated as scripts, while the second argument is treated as\n# an expression:\nset res 0\nfor {set i 0} {$i < 10} {incr i} {\n    set res [expr {$res + $i}]\n}\nunset res\n\n\n# The first argument to \"while\" is also treated as an expression:\nset i 0\nwhile {$i < 10} {\n    incr i 2\n}\n\n\n# A list is a string, and items in the list are delimited by whitespace:\nset amounts 10\\ 33\\ 18\nset amount [lindex $amounts 1]\n\n# Whitespace in a list item must be quoted:\nset inventory {\"item 1\" item\\ 2 {item 3}}\n\n\n# It's generally a better idea to use list routines when modifying lists:\nlappend inventory {item 1} {item 2} {item 3}\n\n\n# Braces and backslash can be used to format more complex values in a list.  A\n# list looks exactly like a script, except that the newline character and the\n# semicolon character lose their special meanings, and there is no script or\n# variable substitution.  This feature makes Tcl homoiconic.  There are three\n# items in the following list:\nset values {\n\n    one\\ two\n\n    {three four}\n\n    five\\{six\n\n}\n\n\n# Since, like all values, a list is a string, string operations could be\n# performed on it, at the risk of corrupting the formatting of the list:\nset values {one two three four}\nset values [string map {two \\{} $values] ;# $values is no-longer a \\\n    properly-formatted list\n\n\n# The sure-fire way to get a properly-formatted list is to use \"list\" routines:\nset values [list one \\{ three four]\nlappend values { } ;# add a single space as an item in the list\n\n\n# Use \"eval\" to evaluate a value as a script:\neval {\n    set name Neo\n    set greeting \"Hello, $name\"\n}\n\n\n# A list can always be passed to \"eval\" as a script composed of a single\n# command:\neval {set name Neo}\neval [list set greeting \"Hello, $name\"]\n\n\n# Therefore, when using \"eval\", use \"list\" to build up the desired command:\nset command {set name}\nlappend command {Archibald Sorbisol}\neval $command\n\n\n# A common mistake is not to use list functions when building up a command:\nset command {set name}\nappend command { Archibald Sorbisol}\ntry {\n    eval $command ;# The error here is that there are too many arguments \\\n        to \"set\" in {set name Archibald Sorbisol}\n} on error {result eoptions} {\n    puts [list {received an error} $result]\n}\n\n# This mistake can easily occur with \"subst\":\n\nset replacement {Archibald Sorbisol}\nset command {set name $replacement}\nset command [subst $command] \ntry {\n    eval $command ;# The same error as before:  too many arguments to \"set\" in \\\n        {set name Archibald Sorbisol}\n} trap {TCL WRONGARGS} {result options} {\n    puts [list {received another error} $result]\n}\n\n\n# \"list\" correctly formats a value for substitution:\nset replacement [list {Archibald Sorbisol}]\nset command {set name $replacement}\nset command [subst $command]\neval $command\n\n\n# \"list\" is commonly used to format values for substitution into scripts: There\n# are several examples of this, below.\n\n\n# \"apply\" evaluates a two-item list as a routine:\nset cmd {{greeting name} {\n    return \"$greeting, $name!\"\n}}\napply $cmd Whaddup Neo\n\n# A third item can be used to specify the namespace to apply the routine in:\nset cmd [list {greeting name} {\n    return \"$greeting, $name!\"\n} [namespace current]]\napply $cmd Whaddup Neo\n\n\n# \"uplevel\" evaluates a script at some higher level in the call stack:\nproc greet {} {\n    uplevel {puts \"$greeting, $name\"}\n}\n\nproc set_double {varname value} {\n    if {[string is double $value]} {\n        uplevel [list variable $varname $value]\n    } else {\n        error [list {not a double} $value]\n    }\n}\n\n\n# \"upvar\" links a variable at the current level in the call stack to a variable\n# at some higher level:\nproc set_double {varname value} {\n    if {[string is double $value]} {\n        upvar 1 $varname var\n        set var $value\n    } else {\n        error [list {not a double} $value]\n    }\n}\n\n\n# Get rid of the built-in \"while\" routine, and use \"proc\" to define a new one:\nrename ::while {}\n# handling is left as an exercise:\nproc while {condition script} {\n    if {[uplevel 1 [list expr $condition]]} {\n        uplevel 1 $script\n        tailcall [namespace which while] $condition $script\n    }\n}\n\n\n# \"coroutine\" creates a new call stack, a new routine to enter that call stack,\n# and then calls that routine.  \"yield\" suspends evaluation in that stack and\n# returns control to the calling stack:\nproc countdown count {\n    # send something back to the creator of the coroutine, effectively pausing\n    # this call stack for the time being.\n    yield [info coroutine]\n\n    while {$count > 1} {\n        yield [incr count -1]\n    }\n    return 0\n}\ncoroutine countdown1 countdown 3\ncoroutine countdown2 countdown 5\nputs [countdown1] ;# -> 2 \nputs [countdown2] ;# -> 4 \nputs [countdown1] ;# -> 1 \nputs [countdown1] ;# -> 0 \ncatch {\n    puts [countdown1] ;# -> invalid command name \"countdown1\"\n} cres copts \nputs $cres\nputs [countdown2] ;# -> 3 \n\n\n# Coroutine stacks can yield control to each other:\n\nproc pass {whom args} {\n    return [yieldto $whom {*}$args]\n}\n\ncoroutine a apply {{} {\n        yield\n        set result [pass b {please pass the salt}]\n        puts [list got the $result]\n        set result [pass b {please pass the pepper}]\n        puts [list got the $result]\n}}\n\ncoroutine b apply {{} {\n    set request [yield]\n    while 1 {\n        set response [pass c $request]\n        puts [list [info coroutine] is now yielding]\n        set request [pass a $response]\n    }\n}}\n\ncoroutine c apply {{} {\n    set request [yield]\n    while 1 {\n        if {[string match *salt* $request]} {\n            set request [pass b salt]\n        } else {\n            set request [pass b huh?]\n        }\n    }\n}}\n\n# get things moving\na\n```\n\n## Reference\n\n[Official Tcl Documentation](https://www.tcl-lang.org)\n\n[Tcl Wiki](https://wiki.tcl-lang.org)\n\n[Tcl Subreddit](http://www.reddit.com/r/Tcl)\n"
        },
        {
          "name": "tcsh.md",
          "type": "blob",
          "size": 25.9130859375,
          "content": "---\nname: tcsh\nfilename: LearnTCSH.csh\ncontributors:\n       - [\"Nicholas Christopoulos\", \"https://github.com/nereusx\"]\n---\n\ntcsh (\"tee-see-shell\") is a Unix shell based on and compatible with the C shell (csh).\nIt is essentially the C shell with programmable command-line completion, command-line editing,\nand a few other features.\nIt is the native root shell for BSD-based systems such as FreeBSD.\n\nAlmost all Linux distros and BSD today use tcsh instead of the original csh. In\nmost cases csh is a symbolic link that points to tcsh.\nThis is because tcsh is backward compatible with csh, and the last\nis not maintained anymore.\n\n- [TCSH Home](http://www.tcsh.org/)\n- [TCSH Wikipedia](https://en.wikipedia.org/wiki/Tcsh)\n- [TCSH manual page](http://www.tcsh.org/tcsh.html/top.html)\n- [“An Introduction to the C shell”, William Joy](https://docs.freebsd.org/44doc/usd/04.csh/paper.html)\n- [TCSH Bug reports and/or features requests](https://bugs.gw.com/)\n\nSome more files:\n[tcsh help command (for 132x35 terminal size)](https://github.com/nereusx/dotfiles/blob/master/csh-help),\n[my ~/.tcshrc](https://github.com/nereusx/dotfiles/blob/master/.tcshrc)\n\n```tcsh\n#!/bin/tcsh\n# The first line of the script is a shebang which tells the system how to execute\n# the script: http://en.wikipedia.org/wiki/Shebang_(Unix)\n# TCSH emulates the shebang on systems that don't understand it.\n\n# In most cases you'll use `#!/bin/tcsh -f`, because `-f` option does not load\n# any resource or start-up files, or perform any command hashing, and thus\n# starts faster.\n\n# --- the echo command --------------------------------------------------------\n# The `echo` writes each word to the shell's standard output, separated by\n# spaces and terminated with a newline. The echo_style shell variable may be\n# set to emulate (or not) the flags and escape sequences.\n\n# Display the value of echo_style\necho $echo_style\n\n# Enable `echo` to support backslashed characters and `-n` option (no new line)\n# This is the default for tcsh, but your distro may change it. Slackware has\n# done so.\nset echo_style = both\n\n# Prints \"Hello world\"\necho Hello world\necho \"Hello world\"\necho 'Hello world'\necho `echo Hello world`\n\n# This prints \"twonlines\" in one line\necho two\\nlines\n\n# Prints the two lines\necho \"two\\nlines\"\necho 'two\\nlines'\n\n# --- Basic Syntax ------------------------------------------------------------\n\n# A special character (including a blank or tab) may be prevented from having\n# its special meaning by preceding it with a backslash `\\`.\n# This will display the last history commands\necho !!\n# This will not\necho \\!\\!\n\n# Single quotes prevent expanding special characters too, but some\n# characters like `!` and backslash have higher priority\n# `$` (variable value) will not expand\necho '$1 tip'\n# `!` (history) will expand\necho '!!'\n\n# Strings enclosed by back-quotes will be executed and replaced by the result.\necho `ls`\n\n# Semi-colon separate commands\necho 'first line'; echo 'second line'\n\n# There is also conditional execution\necho \"Always executed\" || echo \"Only executed if the first command fails\"\necho \"Always executed\" && echo \"Only executed if the first command does NOT fail\"\n\n# Parenthesised commands are always executed in a subshell,\n\n# example: creates a project and then informs you that it finished while\n# it does the installation.\nmake && ( espeak \"BOSS, compilation finished\"; make install )\n\n# prints the home directory but leaves you where you were\n(cd; pwd); pwd\n\n# Read tcsh man-page documentation\nman tcsh\n\n# --- Variables ---------------------------------------------------------------\n# The shell maintains a list of variables, each of which has as value a list of\n# zero or more words. The values of shell variables can be displayed and\n# changed with the `set` and `unset` commands.\n# The system maintains its own list of \"environment\" variables.\n# These can be displayed and changed with `printenv`, `setenv`, and `unsetenv`.\n# The syntax of `setenv` is similar to POSIX sh.\n\n# Assign a value or nothing will create a variable\n# Assign nothing\nset var\n# Assign a numeric value\n# the '@' denotes the expression is arithmetic; it works similar to 'set' but\n# the right value can be a numeric expression.\n@ var = 1 + 2\n# Assign a string value\nset var = \"Hello, I am the contents of 'var' variable\"\n# Assign the output of a program\nset var = `ls`\n\n# Remove a variable\nunset var\n# Prints 1 (true) if the variable `var` exists otherwise prints 0 (false)\necho $?var\n# Print all variables and their values\nset\n\n# Prints the contents of 'var'\necho $var;\necho \"$var\";\n# Prints the string `$var`\necho \\$var\necho '$var'\n# Braces can be used to separate variables from the rest when it is needed\nset num = 12; echo \"There ${num}th element\"\n\n# Prints the number of characters of the value: 6\nset var = '123456'; echo $%var\n\n### LISTs\n# Assign a list of values\nset var = ( one two three four five )\n# Print all the elements: one two three four five\necho $var\necho $var[*]\n# Print the count of elements: 5\necho $#var\n# Print the indexed element; This prints the second element: two\necho $var[2]\n# Print range of elements; prints 2nd up to 3rd: two, three\necho $var[2-3]\n# Prints all elements starting from the 3rd: three four five\necho $var[3-]\n# Prints print all up to 3rd element: one two three\necho $var[-3]\n\n### Special Variables\n# $argv         list of command-line arguments\n# $argv[0]      this file-name (the file of the script file)\n# $# $0, $n, $* are the same as $#argv, $argv[0], $argv[n], $argv[*]\n# $status, $?   the exit code of the last command that executed\n# $_            the previous command line\n# $!            the PID of the last background process started by this shell\n# $$            script's PID\n\n# $path, $PATH  the list of directories that will search for an executable to run\n# $home, $HOME  user's home directory, also the `~` can be used instead\n# $uid          user's login ID\n# $user         user's login name\n# $gid          the user's group ID\n# $group        the user's group-name\n# $cwd, $PWD    the Current/Print Working Directory\n# $owd          the previous working directory\n# $tcsh         tcsh version\n# $tty          the current tty; ttyN for Linux console, pts/N for terminal\n#               emulators under X\n# $term         the terminal type\n# $verbose      if set, causes the words of each command to be printed.\n#               can be set by the `-v` command line option too.\n# $loginsh      if set, it is a login shell\n\n# TIP: $?0 is always false in interactive shells\n# TIP: $?prompt is always false in non-interactive shells\n# TIP: if `$?tcsh` is unset; you run the original `csh` or something else;\n#      try `echo $shell`\n# TIP: `$verbose` is useful for debugging scripts\n# NOTE: `$PWD` and `$PATH` are synchronised with `$cwd` and `$pwd` automatically.\n\n# --- Variable modifiers ------------------------------------------------------\n# Syntax: ${var}:m[:mN]\n# Where <m> is:\n# h : the directory  t : the filename  r : remove extension   e : the extension\n# u : uppercase the first lowercase letter\n# l : lowercase the first uppercase letter\n# p : print but do not execute it (hist)\n# q : quote the substituted words, preventing further substitutions\n# x : like q, but break into words at white spaces\n# g : apply the following modifier once to each word\n# a  : apply the following modifier as many times as possible to single word\n# s/l/r/ : search for `l` and replace with `r`, not regex; the `&` in the `r` is\n# replaced by `l`\n# & : Repeat the previous substitution\n\n# start with this file\nset f = ~/Documents/Alpha/beta.txt\n# prints ~/Documents/Alpha/beta\necho $f:r\n# prints ~/Documents/Alpha\necho $f:h\n# prints beta.txt\necho $f:t\n# prints txt\necho $f:e\n# prints beta\necho $f:t:r\n# prints Beta\necho $f:t:r:u\n# prints Biota\necho $f:t:r:u:s/eta/iota/\n\n# --- Redirection -------------------------------------------------------------\n\n# Create file.txt and write the standard output to it\necho 'this string' > file.txt\n# Create file.txt and write the standard output and standard error to it\necho 'this string' >& file.txt\n# Append the standard output to file.txt\necho 'this string' >> file.txt\n# Append the standard output and standard error to file.txt\necho 'this string' >>& file.txt\n# Redirect the standard input from file.txt\ncat < file.txt\n# Input from keyboard; this stores the input line to variable `x`\nset x = $<\n# Document here;\ncat << LABEL\n...text here...\nLABEL\n\n# TIP: this is how to get standard error separated:\n(grep 'AGP' /usr/src/linux/Documentation/* > output-file.txt) >& error-file.txt\n\n# example: read a name from standard input and display a greetings message\necho -n \"Enter your name: \"\nset name = $<\necho \"Greetings $name\"\n\n# --- Expressions ------------------------------------------------------------\n\n# Operators:\n# ==  equal         !=  not equal    !  not\n#  >  greater than   <  less than   >=  greater or equal  <= less or equal\n# &&  logical AND   ||  logical OR\n\nif ( $name != $user ) then\n    echo \"Your name isn't your username\"\nelse\n    echo \"Your name is your username\"\nendif\n\n# single-line form\nif ( $name != $user ) echo \"Your name isn't your username\"\n\n# NOTE: if $name is empty, tcsh sees the above condition as:\n# if ( != $user ) ...\n# which is invalid syntax\n# The \"safe\" way to use potentially empty variables in tcsh is:\n# if ( \"$name\" != $user ) ...\n# which, when $name is empty, is seen by tcsh as:\n# if ( \"\" != $user ) ...\n# which works as expected\n\n# There is also conditional execution\necho \"Always executed\" || echo \"Only executed if the first command fails\"\necho \"Always executed\" && echo \"Only executed if the first command does NOT fail\"\n\n# To use && and || with if statements, you don't need multiple pairs of\n# square brackets:\nif ( \"$name\" == \"Steve\" && \"$age\" == 15 ) then\n    echo \"This will run if $name is Steve AND $age is 15.\"\nendif\n\nif ( \"$name\" == \"Daniya\" || \"$name\" == \"Zach\" ) then\n    echo \"This will run if $name is Daniya OR Zach.\"\nendif\n\n# String matching operators ( `=~` and `!~` )\n# The ‘==’ ‘!=’ ‘=~’ and ‘!~’ operators compare their arguments as strings;\n# all others operate on numbers. The operators ‘=~’ and ‘!~’ are like ‘!=’\n# and ‘==’ except that the right hand side is a glob-pattern against which\n# the left-hand operand is matched.\n\nif ( $user =~ ni[ck]* ) echo \"Greetings Mr. Nicholas.\"\nif ( $user !~ ni[ck]* ) echo \"Hey, get out of Nicholas' PC.\"\n\n# Arithmetic expressions are denoted with the following format:\n@ result = 10 + 5\necho $result\n\n# Arithmetic Operators\n# +, -, *, /, %\n#\n# Arithmetic Operators which must be parenthesized\n# !, ~, |, &, ^, ~, <<, >>,\n# Compare and logical operators\n#\n# All operators are the same as in C.\n\n# It is non so well documented that numeric expressions require spaces\n# in-between; Also, `@` has its own parser, it seems that it works well when\n# the expression is parenthesized, otherwise the primary parser seems to be\n# active. Parentheses require spaces around, this is documented.\n\n# wrong\n@ x = $y+1\n@ x = 0644 & 022;      echo $x\n@ x = (0644 & 022) +1; echo $x\n@ x = (0644 & 022)+ 1; echo $x\n@ x = ( ~077 );        echo $x\n\n# correct\n@ x = $y + 1\n@ x = ( 0644 & 022 ) + 1; echo $x\n@ x = ( ~ 077 );          echo $x\n@ x = ( ~ 077 | 022 );    echo $x\n@ x = ( ! 0 );            echo $x\n\n# C's operators ++ and -- are supported if there is not assignment\n@ result ++\n\n# No shell was created to do mathematics;\n# Except for the basic operations, use an external command with backslashes.\n#\n# I suggest the calc as the best option.\n# (http://www.isthe.com/chongo/tech/comp/calc/)\n#\n# The standard Unix's bc as the second option\n# (https://www.gnu.org/software/bc/manual/html_mono/bc.html)\n#\n# The standard Unix's AWK as the third option\n# (https://www.gnu.org/software/gawk/manual/gawk.html)\n\n# You can also use `Perl`, `PHP`, `python`, or even several BASICs, but prefer\n# the above utilities for faster load-and-run results.\n\n# real example: (that I answer in StackExchange)\n# REQ: x := 1001b OR 0110b\n\n# in `tcsh` expression (by using octal)\n@ x = ( 011 | 06 ); echo $x\n\n# the same by using `calc` (and using binary as the original req)\nset x = `calc '0b1001 | 0b110'`; echo $x\n\n# --- File Inquiry Operators --------------------------------------------------\n# NOTE: The built-in `filetest` command does the same thing.\n\n#### Boolean operators\n# -r  read access    -w  write access    -x  execute access    -e  existence\n# -f  plain file     -d  directory       -l  symbolic link     -p  named pipe\n# -S  socket file\n# -o  ownership      -z  zero size       -s  non-zero size\n# -u  SUID is set    -g  SGID is set     -k  sticky is set\n# -b  block device   -c  char device\n# -t  file (digit) is an open file descriptor for a terminal device\n\n# If the file `README` exists, display a message\nif ( -e README ) echo \"I have already README file\"\n\n# If the `less` program is installed, use it instead of `more`\nif ( -e `where less` ) then\n    alias more 'less'\nendif\n\n#### Non-boolean operators\n# -Z  returns the file size in bytes\n# -M  returns the modification time (mtime)    -M: returns mtime string\n# -A  returns the last access time (atime)     -A: returns atime string\n# -U  returns the owner's user ID              -U: returns the owner's user name\n# -G  returns the owner's group ID             -G: returns the owner's group name\n# -P  returns the permissions as octal number  -Pmode returns perm. AND mode\n\n# this will display the date as a Unix-time integer: 1498511486\nfiletest -M README.md\n\n# This will display \"Tue Jun 27 00:11:26 2017\"\nfiletest -M: README.md\n\n# --- Basic Commands ----------------------------------------------------------\n\n# Navigate through the filesystem with `chdir` (cd)\ncd path # change working directory\ncd      # change to the home directory\ncd -    # change to the previous directory\ncd ..   # go up one directory\n\n# Examples:\ncd ~/Downloads # go to my `Downloads` directory\n\n# Use `mkdir` to create new directories.\nmkdir newdir\n# The `-p` flag causes new intermediate directories to be created as necessary.\nmkdir -p ~/.backup/saves\n\n# which & where\n# find if csh points to tcsh\nls -lha `which csh`\n# find if csh is installed on more than one directory\nwhere csh\n\n# --- Pipe-lines --------------------------------------------------------------\n# A pipeline is a sequence of processes chained together by their standard\n# streams, so that the output of each process (stdout) feeds directly as input\n# (stdin) to the next one. These `pipes` are created with the `|` special\n# character and it is one of the most powerful characteristics of Unix.\n\n# example:\nls -l | grep key | less\n# \"ls -l\" produces a process, the output (stdout) of which is piped to the\n# input (stdin) of the process for \"grep key\"; and likewise for the process\n# for \"less\".\n\n# the `ls`, the `grep`, and the `less` are Unix programs and they have their\n# own man-page. The `pipe` mechanism is part of the kernel but the syntax\n# and the control is the shell's job, the tcsh in our case.\n\n# NOTE: Windows has the `pipe` mechanism too, but it is buggy and I signed it\n# for all versions until Windows XP SP3 API32 which was the last one that I\n# worked on. Microsoft denied it, but it is a well-known bug since it is a\n# common method for inter-process communication. For small I/O it will work well.\n# tcsh, along with grep, GCC, and Perl is one of the first Unix programs that\n# ported to DOS (with EMX DOS extender) and later to Windows (1998).\n\n# example: this will convert tcsh to PostScript and will show it with Okular\nzcat /usr/man/man1/tcsh.1.gz | groff -Tps -man | okular -\n\n# a better version\nzcat `locate -b -n 1 '\\tcsh.1.gz'` | groff -Tps -man | okular -\n\n# even better\nset page = tcsh; set loc = (locate -b -n 1 \"\\\\\\\\\"${page}\".1.gz\");\n zcat `eval $loc` | groff -Tps -man | okular -\n\n# the same, modified to create man page pdf\nset page = tcsh; set loc = (locate -b -n 1 \"\\\\\\\\\"${page}\".1.gz\");\n zcat `eval $loc` | groff -Tps -man | ps2pdf - ${page}.pdf\n\n# the same, but now shows the ${page}.pdf too\nset page = tcsh; set loc = (locate -b -n 1 \"\\\\\\\\\"${page}\".1.gz\");\n zcat `eval $loc` | groff -Tps -man | ps2pdf - ${page}.pdf && okular tcsh.pdf\n\n# NOTE: `okular` is the default application of the KDE environment and it shows\n# postcript and pdf files. You can replace it with your lovely PDF viewer.\n# `zcat`, `locate`, `groff`, are common programs in all Unixes. The `ps2pdf`\n# program is part of the `ghostscript` package that is widely used.\n\n# --- Control Flow ------------------------------------------------------------\n\n#### IF-THEN-ELSE-ENDIF\n# Syntax:\n# if ( expr ) then\n#    ...\n# [else if ( expr2 ) then\n#    ...]\n# [else\n#    ...]\n# endif\n#\n# If the specified `expr` is true then the commands to the first else are\n# executed; otherwise if `expr2` is true then the commands to the second else\n# are executed, etc.\n# Any number of else-if pairs are possible; only one endif is needed.\n#\n# Single-line form:\n#\n# if ( expr ) command\n#\n# If `expr` evaluates to true, then the command is executed.\n# `command` must be a simple command, not an alias, a pipeline, a command list\n#, or a parenthesized command list. With a few words, avoid using it.\n#\n# BUG: Input/output redirection occurs even if expr is false and the command\n# is thus not executed.\n#\n\n# check if we are in a non-interactive shell and quit if true\nif ( $?USER == 0 || $?prompt == 0 ) exit\n\n# check if we are a login shell\nif ( $?loginsh ) then\n    # check if you are on linux console (not X's terminal)\n    if ( $tty =~ tty* ) then\n        # enable keypad application keys (man console_codes)\n        echo '\\033='\n    endif\nendif\n\n#### SWITCH-ENDSW\n# Syntax:\n# switch ( expr )\n# case pattern:\n#     ...\n#     [breaksw]\n# [default:\n#     ...]\n# endsw\n#\n# tcsh uses a case statement that works similarly to switch in C.\n# Each case label is successively matched, against the specified string which\n# is first command and filename expanded. The file metacharacters `*`, `?`\n# and `[...]` may be used in the case labels. If none of the labels match the\n# execution begins after the default label if it's defined.\n# The command `breaksw` causes execution to continue after the endsw. Otherwise,\n# control may fall through case labels and default labels as in C.\n\nswitch ( $var )\ncase *.[1-9]:\ncase *.[1-9].gz:\n    echo \"$var is a man-page.\"\n    breaksw\ncase *gz:\n    echo \"$var is gzipped\"\n    breaksw\ndefault:\n    file $var\nendsw\n\n#### FOREACH-END\n# Syntax:\n# foreach name ( wordlist )\n#    ...\n#   [break | continue]\n# end\n#\n# Successively sets the variable `name` to each member of `wordlist` and\n# executes the sequence of commands between this command and the matching\n# `end` keyword. The `continue` keyword jumps to the next element back to\n# top, and the `break` keyword terminates the loop.\n#\n# BUG: `foreach` doesn't ignore here documents when looking for its end.\n\n# example: counting 1 to 10\nforeach i ( `seq 1 10` )\n    echo $i\nend\n\n# example: type all files in the list\nforeach f ( a.txt b.txt c.txt )\n    cat $f\nend\n\n# example: convert wma to ogg\nforeach f ( *.wma )\n    ffmpeg -i \"$f\" \"$f:r\".ogg\nend\n\n#### WHILE-END\n# while ( expr )\n#     ...\n#     [break | continue]\n# end\n#\n# Executes the commands between the `while` and the matching `end` while `expr`\n# evaluates non-zero. `break` and `continue` may be used to terminate or\n# continue the loop prematurely.\n\n# count from 1 to 10\nset num = 1\nwhile ( $num <= 10 )\n    echo $num\n    @ num ++\nend\n\n# print all directories of CWD\nset lst = ( * )\nwhile ( $#lst )\n    if ( -d $lst[1] ) echo $lst[1] is directory\n    shift lst\nend\n\n# separate command-line arguments to options or parameters\nset options\nset params\nset lst = ( $* )\nwhile ( $#lst )\n    if ( \"$lst[1]\" =~ '-*' ) then\n        set options = ( $options $lst[1] )\n    else\n        set params = ( $params $lst[1] )\n    endif\n    shift lst\nend\necho 'options =' $options\necho 'parameters =' $params\n\n#### REPEAT\n# Syntax: repeat count command\n#\n# The specified command, which is subject to the same restrictions as the\n# command in the one line `if` statement above, is executed count times.\n# I/O redirections occur exactly once, even if `count` is 0.\n#\n# TIP: in most cases prefer `while`\n\nrepeat 3 echo \"ding dong\"\n\n# --- Functions ---------------------------------------------------------------\n# tcsh has no functions but its expression syntax is advanced enough to use\n# `alias` as functions. Another method is recursion\n\n# Alias argument selectors; the ability to define an alias to take arguments\n# supplied to it and apply them to the commands that it refers to.\n# Tcsh is the only shell that provides this feature.\n#\n# \\!#   argument selector for all arguments, including the alias/command\n#       itself; arguments need not be supplied.\n# \\!*   argument selector for all arguments, excluding the alias/command;\n#       arguments need not be supplied.\n# \\!$   argument selector for the last argument; argument need not be supplied,\n#       but if none is supplied, the alias name is considered to be the\n#       last argument.\n# \\!^   argument selector for first argument; argument MUST be supplied.\n# \\!:n  argument selector for the nth argument; argument MUST be supplied;\n#       n=0 refers to the alias/command name.\n# \\!:m-n   argument selector for the arguments from the mth to the nth;\n#       arguments MUST be supplied.\n# \\!:n-$   argument selector for the arguments from the nth to the last;\n#       at least argument n MUST be supplied.\n\n# Alias the cd command so that when you change directories, the contents\n# are immediately displayed.\nalias cd 'cd \\!* && ls'\n\n# --- Recursion method --- begin ---\n#!/bin/tcsh -f\nset todo = option1\nif ( $#argv > 0 ) then\n    set todo = $argv[1]\nendif\n\nswitch ( $todo )\ncase option1:\n#    ...\n    $0 results\n    breaksw\ncase option2:\n#    ...\n    $0 results\n    breaksw\ncase results:\n    echo \"print the results here\"\n#    ...\n    breaksw\ndefault:\n    echo \"Unknown option: $todo\"\n#    exit 0\nendsw\n# --- Recursion method --- end ---\n\n# --- examples ----------------------------------------------------------------\n\n# this script prints available power-states if no argument is set;\n# otherwise it sets the state of the $argv[1]\n# --- power-state script --- begin --------------------------------------------\n#!/bin/tcsh -f\n# get parameter (\"help\" for none)\nset todo = help\nif ( $#argv > 0 ) then\n    set todo = $argv[1]\nendif\n# available options\nset opts = `cat /sys/power/state`\n# is known?\nforeach o ( $opts )\n    if ( $todo == $o ) then\n        # found; execute it\n        echo -n $todo > /sys/power/state\n        break\n    endif\nend\n# print help and exit\necho \"usage: $0 [option]\"\necho \"available options on kernel: $opts\"\n# --- power-state script --- end ----------------------------------------------\n\n# Guess the secret number game\n# --- secretnum.csh --- begin -------------------------------------------------\n#!/bin/tcsh -f\nset secret=`shuf -i1-100 -n1`\necho \"I have a secret number from 1 up to 100\"\nwhile ( 1 )\n    echo -n \"Guess: \"\n    set guess = $<\n    if ( $secret == $guess ) then\n        echo \"You found it\"\n        exit 1\n    else\n        if ( $secret > $guess ) then\n            echo \"its greater\"\n        else if ( $secret < $guess ) then\n                echo \"its lesser\"\n            endif\n        endif\n    endif\nend\n# --- secretnum.csh --- end ---------------------------------------------------\n\n# -----------------------------------------------------------------------------\n# Appendices\n\n#### About [T]CSH:\n# * CSH is notorious for its bugs;\n# * It is also famous for its advanced interactive mode.\n# * TCSH is famous for having the most advanced completion subsystem.\n# * TCSH is famous for having the most advanced aliases subsystem; aliases\n#   can take parameters and often be used as functions!\n# * TCSH is well known and preferred by people (me too) because of better\n#   syntax. All shells are using Thomson's syntax with the exception of\n#   [t]csh, fish, and plan9's shells (rc, ex).\n# * It is smaller and consumes far less memory than bash, zsh, and even mksh!\n#   (memusage reports)\n# * TCSH still has bugs; fewer, but it does; if you write readable clean code\n#   you'll find none; well almost none... This has to do with the implementation\n#   of csh; that doesn't mean the other shells have a good implementation.\n# * no well-known shell is capable of regular programming; if your script\n#   is getting big, use a programming language, like Python, PHP, or Perl (good\n#   scripting languages).\n#\n# Advice:\n# 1. Do not use redirection in single-line IFs (it is well documented bug)\n#    In most cases avoid using single-line IFs.\n# 2. Do not mess up with other shells' code, c-shell is not compatible with\n#    other shells and has different abilities and priorities.\n# 3. Use spaces as you'll use them to write readable code in any language.\n#    A bug of csh was `set x=1` and `set x = 1` worked, but `set x =1` did not!\n# 4. It is well documented that numeric expressions require spaces in between;\n#    also parenthesize all bit-wise and unary operators.\n# 5. Do not write a huge weird expression with several quotes, backslashes, etc\n#    It is bad practice for generic programming, it is dangerous in any shell.\n# 6. Help tcsh, report the bug here <https://bugs.gw.com/>\n# 7. Read the man page, `tcsh` has a huge number of options and variables.\n#\n#    I suggest the following options enabled by default\n#    --------------------------------------------------\n# Even in non-interactive shells\n#    set echo_style=both\n#    set backslash_quote\n#    set parseoctal\n#    unset noclobber\n#\n# Whatever...\n#    set inputmode=insert\n#    set autolist\n#    set listjobs\n#    set padhour\n#    set color\n#    set colorcat\n#    set nobeep\n#    set cdtohome\n#\n#    set histdup\n#    set histlit\n#    set nohistclop\n#\n#    unset compat_expr\n#    unset noglob\n#    unset autologout\n#    unset time\n#    unset tperiod\n#\n# NOTE: If the `backslash_quote` is set, it may create compatibility issues\n# with other tcsh scripts that were written without it.\n#\n# NOTE: The same for `parseoctal`, but it is better to fix the problematic\n# scripts.\n#\n# NOTE: **for beginners only**\n# This enables automatic rescanning of `path` directories if needed. (like bash)\n#    set autorehash\n\n#### common aliases\n#    alias hist  'history 20'\n#    alias ll    'ls --color -lha'\n#    alias today \"date '+%d%h%y'\n#    alias ff    'find . -name '\n\n#### a nice prompt\n#    set prompt = \"%B%{\\033[35m%}%t %{\\033[32m%}%n@%m%b %C4 %# \"\n```\n"
        },
        {
          "name": "texinfo.md",
          "type": "blob",
          "size": 4.9609375,
          "content": "---\nname: Texinfo\ncontributors:\n    - [\"Julien Lepiller\", \"https://github.com/roptat\"]\nfilename: learntexinfo.texi\n---\n\nTexinfo is a documentation format you can use to create various types of\ndocuments from the same source.  Its main usage is to create documentation\nmanuals and info pages for GNU projects.\n\nTexinfo is a markup language that contains text and *@-commands* that specify\nwhat the generator should do.\n\n## Initial File\n\nA simple example of a simple manual:\n\n```\n\\input texinfo\n@setfilename simple-document.info\n@documentencoding UTF-8\n@settitle simple-document\n@c This is a comment\n@c Replace simple-document above (twice) with the actual document title\n\n@c Automake will take care of version.texi\n@include version.texi\n\n@copying\nCopyright @copyright{} YEAR MY NAME\n\n@c GFDL is common for GNU projects\n@quotation\nPermission is granted to copy, distribute and/or modify this document\nunder the terms of the GNU Free Documentation License, Version 1.3 or\nany later version published by the Free Software Foundation; with no\nInvariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A\ncopy of the license is included in the section entitled ``GNU Free\nDocumentation License''.\n@end quotation\n@end copying\n\n@titlepage\n@end titlepage\n\n@c Now starts the actual content\n@contents\n\n@c The first node must always be Top\n@node Top\n@c And we give it a title\n@top simple-document\n\nThis document quickly describes Texinfo features.\n\n@c This is the ToC:\n@menu\n* Introduction::           A short summary of the chapter\n\n@detailmenu\n--- The Detailed Node Listing ---\n\nIntroduction\n\n* Formatting::             How to format text nicely\n* Links::                  Linking to other resources, pages, or manuals\n\n@end detailmenu\n@end menu\n\n@node Introduction\n@chapter Introduction\n\nEach node must have the same name as the menu item that was defined in the ToC.\n\n@node Formatting\n@section Formatting\n@c Add something to the content index, so people can get here when searching\n@c for something else\n@cindex bold text\n@cindex titles\n\nSimilar to chapters, sections must have the same name and appear in the same order.\n\n@subsection This is a subsection title\n@subsubsection This is a sub-subsection title\n\nEach block of text is a paragraph. You can use multiple lines for the paragraph\nlike so, only empty lines separate paragraphs.\n\nCommon formatting include @emph{emphasis}, @code{inline code}. Specific type of\ntext can be marked as well: @file{file.txt}, @option{--learn-fast},\n@command{ls} or @var{variable}. You can escape the command character like\nso: @@, and a newline with a single @@ at the end of the line.\n\nYou can add different types of blocks:\n\n@example\nHere is an example\n@end example\n\n@lisp\n'(this is lisp code)\n@end lisp\n\n@itemize\n@item An element in an unordered list\n@item A second element in the same list\n@end itemize\n\n@enumerate\n@item This list is similar\n@item But ordered\n@end enumerate\n\n@quotation\nA quotation block, by someone famous maybe\n@end quotation\n\n@table @asis\n@item element title\nelement description\n\n@item second element title\nsecond element description. Note that the description part can span multiple\nparagraphs, contain other blocks etc. This is usually used as a definition\nlist.\n\n@code{@@asis} wraps the element title, and tells Texinfo to use them as-is.\n@end table\n\n@table @code\n@item do-x\nThis item title is now wrapped in a code block, as in @code{@@code{do-x}}\n@end table\n\n@c content index can appear at any place in the document, not necessarily after\n@c titles.\n@cindex function definition\n@deffn {Kind of Function} function_name @var{arg1} @var{arg2} @\n  @var{arg3} @var{arg4} [@var{optional5}]\nThis text describes the function. Note how we could use multiple lines for the\nfunction synopsis by escaping the line with a single @@.\n\nThis again can contain multiple paragraphs or blocks.\n@end deffn\n\n@node Links\n@section Links\n\nThere are various types of links you can use. A simple link to a URL with\n@uref{https://github.com} and optionally with it a title:\n@uref{https://github.com, GitHub}. An email address @email{me@@me.me}.\nA node in this document, @xref{Introduction}. Always use the exact node name\nfor that one. @code{xref} will include the text ``see'' before the link. To\ninsert something different, use @pxref{Introduction} (``See'') or\n@xref{Introduction} (nothing is inserted). With an additional argument, you\ncan change the text of the link, @xref{Introduction, this introduction}.\n\nIt is possible to link to external manuals with these commands by adding\nmore arguments, as in @code{@@xref{Node name,,, manual-name, link text}},\n@xref{Overview,,, texinfo, Texinfo's manual} for the complete reference\non Texinfo!\n\n@bye\n```\n\n## How to Use It\n\nWith `automake`, all you need to do is to give it the path to your manual\nin `Makefile.am`:\n\n```\ninfo_TEXINFOS= doc/simple-manual.texi\n```\n\nThen, get your info manual with `make doc/simple-manual.info` or in other formats,\ne.g. HTML with `make doc/simple-manual.html`.\n\n## Readings\n\n- [Official manual](https://www.gnu.org/software/texinfo/manual/texinfo/html_node/)\n"
        },
        {
          "name": "textile.md",
          "type": "blob",
          "size": 11.5517578125,
          "content": "---\nname: Textile\ncontributors:\n    - [\"Keith Miyake\", \"https://github.com/kaymmm\"]\nfilename: learn-textile.textile\n---\n\n\nTextile is a lightweight markup language that uses a text formatting syntax to\nconvert plain text into structured HTML markup. The syntax is a shorthand\nversion of HTML that is designed to be easy to read and write. Textile is used\nfor writing articles, forum posts, readme documentation, and any other type of\nwritten content published online.\n\n- [Comments](#comments)\n- [Paragraphs](#paragraphs)\n- [Headings](#headings)\n- [Simple Text Styles](#simple-text-styles)\n- [Lists](#lists)\n- [Code blocks](#code-blocks)\n- [Horizontal rule](#horizontal-rule)\n- [Links](#links)\n- [Images](#images)\n- [Footnotes and Endnotes](#footnotes-and-endnotes)\n- [Tables](#tables)\n- [Character Conversions](#character-conversions)\n- [CSS](#css)\n- [Spans and Divs](#spans-and-divs)\n- [Additional Info](#additional-info)\n\n## Comments\n\n```\n###. Comments begin with three (3) '#' signs followed by a full-stop period '.'.\nComments can span multiple lines until a blank line is reached.\n\n###..\nMulti-line comments (including blank lines) are indicated by three (3) '#'\nsigns followed by two (2) full-stop periods '..'.\n\nThis line is also part of the above comment.\n\nThe comment continues until the next block element is reached\n\np. This line is not commented\n\n<!-- HTML comments are also…\n\nrespected -->\n```\n\n## Paragraphs\n\n```\n###. Paragraphs are a one or multiple adjacent lines of text separated by one or\nmultiple blank lines. They can also be indicated explicitly with a 'p. '\n\nThis is a paragraph. I'm typing in a paragraph isn't this fun?\n\nNow I'm in paragraph 2.\nI'm still in paragraph 2 too!\nLine breaks without blank spaces are equivalent to a <br /> in XHTML.\n\np. I'm an explicitly defined paragraph\n\n Lines starting with a blank space are not wrapped in <p>..</p> tags.\n\n###. Paragraphs (and all block elements) can be aligned using shorthand:\n\np<. Left aligned paragraph (default).\n\np>. Right aligned paragraph.\n\np=. Centered paragraph.\n\np<>. Justified paragraph.\n\nh3>. Right aligned <h3>\n\n\n###. Paragraphs can be indented using a parentheses for each em\nIndentation utilizes padding-[left/right] css styles.\n\np(. Left indent 1em.\n\np((. Left indent 2em.\n\np))). Right indent 3em.\n\nh2). This is equivalent to <h2 style=\"padding-right: 1em;\">..</h2>\n\n\n###. Block quotes use the tag 'bq.'\n\nbq. This is a block quote.\n\nbq.:http://someurl.com You can include a citation URL immediately after the '.'\n\nbq.. Multi-line blockquotes containing\n\nblank lines are indicated using two periods\n\np. Multi-line blockquotes continue until a new block element is reached.\n\nbq. You can add a footer to a blockquote using html:\n<footer>citation text</footer>\n\n\n###. Preformatted text blocks:\n\npre. This text is preformatted.  <= those two spaces will carry through.\n\npre.. This is a multi-line preformatted…\n\n…text block that includes blank lines\n\np. End a multi-line preformatted text block with a new block element.\n```\n\n## Headings\n\nYou can create HTML elements `<h1>` through `<h6>` easily by prepending the\ntext you want to be in that element by 'h#.' where # is the level 1-6.\nA blank line is required after headings.\n\n\n```\nh1. This is an <h1>\n\nh2. This is an <h2>\n\nh3. This is an <h3>\n\nh4. This is an <h4>\n\nh5. This is an <h5>\n\nh6. This is an <h6>\n```\n\n\n## Simple text styles\n\n```\n###. Bold and strong text are indicated using asterisks:\n\n*This is strong text*\n**This is bold text**\nThis is [*B*]old text within a word.\n\n*Strong* and **Bold** usually display the same in browsers\nbut they use different HTML markup, thus the distinction.\n\n###. Italics and emphasized text are indicated using underscores.\n\n_This is Emphasized text_\n__This is Italics text__\nThis is It[_al_]ics within a word.\n\n_Emphasized_ and __Italics__ text typically display the same in browsers,\nbut again, they use different HTML markup and thus the distinction.\n\n###. Superscripts and Subscripts use carats and tildes:\n\nSuperscripts are 2 ^and^ to none, but subscripts are CO ~2~ L too.\nNote the spaces around the superscripts and subscripts.\n\nTo avoid the spaces, add square brackets around them:\n2[^and^] and CO[~2~]L\n\n###. Insertions and deletions are indicated using -/+ symbols:\nThis is -deleted- text and this is +inserted+ text.\n\n###. Citations are indicated using double '?':\n\n??This is a cool citation??\n```\n\n## Lists\n\n```\n###. Unordered lists can be made using asterisks '*' to indicate levels:\n\n* Item\n** Sub-Item\n* Another item\n** Another sub-item\n** Yet another sub-item\n*** Three levels deep\n\n###. Ordered lists are done with a pound sign '#':\n\n# Item one\n# Item two\n## Item two-a\n## Item two-b\n# Item three\n** Mixed unordered list within ordered list\n\n###. Ordered lists can start above 1 and can continue after another block:\n\n#5 Item 5\n# Item 6\n\nadditional paragraph\n\n#_ Item 7 continued from above\n# Item 8\n\n###. Definition lists are indicated with a dash and assignment:\n\n- First item := first item definition\n- Second := second def.\n- Multi-line :=\nMulti-line\ndefinition =:\n```\n\n## Code blocks\n\n```\nCode blocks use the 'bc.' shorthand:\n\nbc. This is code\n    So is this\n\nThis is outside of the code block\n\nbc.. This is a multi-line code block\n\nBlank lines are included in the multi-line code block\n\np. End a multi-line code block with any block element\n\np. Indicate @inline code@ using the '@' symbol.\n```\n\n## Horizontal rule\n\nHorizontal rules (`<hr/>`) are easily added with two hyphens\n\n```\n--\n```\n\n## Links\n\n```\n###. Link text is in quotes, followed by a colon and the URL:\n\n\"Link text\":http://linkurl.com/ plain text.\n\n\"Titles go in parentheses at the end of the link text\"(mytitle):http://url.com\n###. produces <a href... title=\"mytitle\">...</a>\n\n###. Use square brackets when the link text or URL might be ambiguous:\n[\"Textile on Wikipedia\":http://en.wikipedia.org/wiki/Textile_(markup_language)]\n\n###. Named links are useful if the same URL is referenced multiple times.\nMultiple \"references\":txstyle to the \"txstyle\":txstyle website.\n\n[txstyle]https://txstyle.org/\n```\n\n## Images\n\n```\n###. Images can be included by surrounding its URL with exclamation marks (!)\nAlt text is included in parenthesis after the URL, and they can be linked too:\n\n!http://imageurl.com!\n\n!http://imageurl.com(image alt-text)!\n\n!http://imageurl.com(alt-text)!:http://image-link-url.com\n```\n\n## Footnotes and Endnotes\n\n```\nA footnote is indicated with the reference id in square brackets.[1]\n\nfn1. Footnote text with a \"link\":http://link.com.\n\nA footnote without a link.[2!]\n\nfn2. The corresponding unlinked footnote.\n\nA footnote with a backlink from the footnote back to the text.[3]\n\nfn3^. This footnote links back to the in-text citation.\n\n\nEndnotes are automatically numbered[#first] and are indicated using square[#second]\nbrackets and a key value[#first]. They can also be unlinked[#unlinkednote!]\n\n###. Give the endnotes text:\n\nnote#first. This is the first endnote text.\n\nnote#second. This is the second text.\n\nnote#unlinkednote. This one isn't linked from the text.\n\n### Use the notelist block to place the list of notes in the text:\nThis list will start with #1. Can also use alpha or Greeks.\nnotelist:1. ###. start at 1 (then 2, 3, 4...)\nnotelist:c. ###. start at c (then d, e, f...)\nnotelist:α. ###. start at α (then β, γ, δ...)\n\n###. The notelist syntax is as follows:\n\nnotelist.    Notes with backlinks to every citation made to them.\nnotelist+.   Notes with backlinks to every citation made to them,\n               followed by the unreferenced notes.\nnotelist^.   Notes with one backlink to the first citation made to each note.\nnotelist^+.  Notes with one backlink to the first citation made to each note,\n               followed by unreferenced notes.\nnotelist!.   Notes with no backlinks to the citations.\nnotelist!+.  Notes with no backlinks to the citations, followed by \n               unreferenced notes.\n```\n\n## Tables\n\n\n```\n###. Tables are simple to define using the pipe '|' symbol\n\n| A | simple | table | row |\n| And | another | table | row |\n| With an | | empty | cell |\n\n###. Headers are preceded by '|_.'\n|_. First Header |_. Second Header |\n| Content Cell | Content Cell |\n\n###. The <thead> tag is added when |^. above and |-. below the heading are used.\n\n|^.\n|_. First Header |_. Second Header |\n|-.\n| Content Cell | Content Cell |\n| Content Cell | Content Cell |\n\n###. The <tfoot> tag is added when |~. above and |-. below the footer are used.\n\n|~.\n|\\2=. A footer, centered & across two columns |\n|-.\n| Content Cell | Content Cell |\n| Content Cell | Content Cell |\n\n###. Attributes are be applied either to individual cells, rows, or to\nthe entire table. Cell attributes are placed within each cell:\n\n|a|{color:red}. styled|cell|\n\n###. Row attributes are placed at the beginning of a row,\nfollowed by a dot and a space:\n\n(rowclass). |a|classy|row|\n\n###. Table attributes are specified by placing the special 'table.' block\nmodifier immediately before the table:\n\ntable(tableclass).\n|a|classy|table|\n|a|classy|table|\n\n###. Spanning rows and columns:\nA backslash \\ is used for a column span:\n\n|\\2. spans two cols |\n| col 1 | col 2 |\n\n###. A forward slash / is used for a row span:\n\n|/3. spans 3 rows | row a |\n| row b |\n| row c |\n\n###. Vertical alignments within a table cell:\n\n|^. top alignment|\n|-. middle alignment|\n|~. bottom alignment|\n\n###. Horizontal alignments within a table cell\n\n|:\\1. |400|\n|=. center alignment |\n| no alignment |\n|>. right alignment |\n```\n\nor, for the same results\n\n```\nCol 1 | Col2 | Col3\n:-- | :-: | --:\nUgh this is so ugly | make it | stop\n```\n\n\n## Character Conversions\n\n### Registered, Trademark, Copyright Symbols\n\n```\nRegisteredTrademark(r), Trademark(tm), Copyright (c)\n```\n\n### Acronyms\n\n```\n###. Acronym definitions can be provided in parentheses:\n\nEPA(Environmental Protection Agency) and CDC(Center for Disease Control)\n```\n\n### Angle Brackets and Ampersand\n\n```\n### Angled brackets < and > and ampersands & are automatically escaped:\n< => &lt;\n> => &gt;\n& => &amp;\n```\n\n### Ellipses\n\n```\np. Three consecutive periods are translated into ellipses...automatically\n```\n\n### Em and En dashes\n\n```\n###. En dashes (short) is a hyphen surrounded by spaces:\n\nThis line uses an en dash to separate Oct - Nov 2018.\n\n###. Em dashes (long) are two hyphens with or without spaces:\n\nThis is an em dash--used to separate clauses.\nBut we can also use it with spaces -- which is a less-used convention.\nThat last hyphen between 'less' and 'used' is not converted between words.\n```\n\n## Fractions and other Math Symbols\n\n```\nOne quarter: (1/4) => ¼\nOne half: (1/2) => ½\nThree quarters: (3/4) => ¾\nDegree: (o) => °\nPlus/minus: (+/-) => ±\n```\n\n### Multiplication/Dimension\n\n```\np. Numbers separated by the letter 'x' translate to the multiplication\nor dimension symbol '×':\n3 x 5 => 3 × 5\n```\n\n### Quotes and Apostrophes\n\n```\n###. Straight quotes and apostrophes are automatically converted to\ntheir curly equivalents:\n\n\"these\", 'these', and this'n are converted to their HTML entity equivalents.\nLeave them straight using '==' around the text: ==\"straight quotes\"==.\n```\n\n## CSS\n\n```\np{color:blue}. CSS Styles are enclosed in curly braces '{}'\np(my-class). Classes are enclosed in parenthesis\np(#my-id). IDs are enclosed in parentheses and prefaced with a pound '#'.\n```\n\n## Spans and Divs\n\n```\n%spans% are enclosed in percent symbols\ndiv. Divs are indicated by the 'div.' shorthand\n```\n\n---\n\n## For More Info\n\n* TxStyle Textile Documentation: [https://txstyle.org/](https://txstyle.org/)\n* promptworks Textile Reference Manual: [https://www.promptworks.com/textile](https://www.promptworks.com/textile)\n* Redmine Textile Formatting: [http://www.redmine.org/projects/redmine/wiki/RedmineTextFormattingTextile](http://www.redmine.org/projects/redmine/wiki/RedmineTextFormattingTextile)\n"
        },
        {
          "name": "th",
          "type": "tree",
          "content": null
        },
        {
          "name": "tmux.md",
          "type": "blob",
          "size": 6.7783203125,
          "content": "---\ncategory: tool\nname: tmux\ncontributors:\n    - [\"mdln\", \"https://github.com/mdln\"]\nfilename: LearnTmux.txt\n---\n\n\n[tmux](http://tmux.github.io)\nis a terminal multiplexer: it enables a number of terminals\nto be created, accessed, and controlled from a single screen. tmux\nmay be detached from a screen and continue running in the background\nthen later reattached.\n\n\n```\n  tmux [command]     # Run a command\n                     # 'tmux' with no commands will create a new session\n\n    new              # Create a new session\n     -s \"Session\"    # Create named session\n     -n \"Window\"     # Create named Window\n     -c \"/dir\"       # Start in target directory\n\n    attach           # Attach last/available session\n     -t \"#\"          # Attach target session\n     -d              # Detach the session from other instances\n\n    ls               # List open sessions\n     -a              # List all open sessions\n\n    lsw              # List windows\n     -a              # List all windows\n     -s              # List all windows in session\n\n    lsp              # List panes\n     -a              # List all panes\n     -s              # List all panes in session\n     -t              # List all panes in target\n\n    kill-window      # Kill current window\n     -t \"#\"          # Kill target window\n     -a              # Kill all windows\n     -a -t \"#\"       # Kill all windows but the target\n\n    kill-session     # Kill current session\n     -t \"#\"          # Kill target session\n     -a              # Kill all sessions\n     -a -t \"#\"       # Kill all sessions but the target\n```\n\n\n### Key Bindings\n\nThe method of controlling an attached tmux session is via key\ncombinations called 'Prefix' keys.\n\n```\n----------------------------------------------------------------------\n  (C-b) = Ctrl + b    # 'Prefix' combination required to use keybinds\n\n  (M-1) = Meta + 1 -or- Alt + 1\n----------------------------------------------------------------------\n\n  ?                  # List all key bindings\n  :                  # Enter the tmux command prompt\n  r                  # Force redraw of the attached client\n  c                  # Create a new window\n\n  !                  # Break the current pane out of the window.\n  %                  # Split the current pane into two, left and right\n  \"                  # Split the current pane into two, top and bottom\n\n  n                  # Change to the next window\n  p                  # Change to the previous window\n  {                  # Swap the current pane with the previous pane\n  }                  # Swap the current pane with the next pane\n  [                  # Enter Copy Mode to copy text or view history.\n\n  s                  # Select a new session for the attached client\n                     interactively\n  w                  # Choose the current window interactively\n  0 to 9             # Select windows 0 to 9\n\n  d                  # Detach the current client\n  D                  # Choose a client to detach\n\n  &                  # Kill the current window\n  x                  # Kill the current pane\n\n  Up, Down           # Change to the pane above, below, left, or right\n  Left, Right\n\n  M-1 to M-5         # Arrange panes:\n                       # 1) even-horizontal\n                       # 2) even-vertical\n                       # 3) main-horizontal\n                       # 4) main-vertical\n                       # 5) tiled\n\n  C-Up, C-Down       # Resize the current pane in steps of one cell\n  C-Left, C-Right\n\n  M-Up, M-Down       # Resize the current pane in steps of five cells\n  M-Left, M-Right\n```\n\n\n### Configuring ~/.tmux.conf\n\ntmux.conf can be used to set options automatically on start up, much\nlike how .vimrc or init.el are used.\n\n```\n# Example tmux.conf\n# 2015.12\n\n\n### General\n###########################################################################\n\n# Scrollback/History limit\nset -g history-limit 2048\n\n# Index Start\nset -g base-index 1\n\n# Mouse\nset-option -g -q mouse on\n\n# Force reload of config file\nunbind r\nbind r source-file ~/.tmux.conf\n\n\n### Keybinds\n###########################################################################\n\n# Unbind C-b as the default prefix\nunbind C-b\n\n# Set new default prefix\nset-option -g prefix `\n\n# Return to previous window when prefix is pressed twice\nbind C-a last-window\nbind ` last-window\n\n# Allow swapping C-a and ` using F11/F12\nbind F11 set-option -g prefix C-a\nbind F12 set-option -g prefix `\n\n# Keybind preference\nsetw -g mode-keys vi\nset-option -g status-keys vi\n\n# Moving between panes with vim movement keys\nbind h select-pane -L\nbind j select-pane -D\nbind k select-pane -U\nbind l select-pane -R\n\n# Window Cycle/Swap\nbind e previous-window\nbind f next-window\nbind E swap-window -t -1\nbind F swap-window -t +1\n\n# Easy split pane commands\nbind = split-window -h\nbind - split-window -v\nunbind '\"'\nunbind %\n\n# Activate inner-most session (when nesting tmux) to send commands\nbind a send-prefix\n\n\n### Theme\n###########################################################################\n\n# Statusbar Color Palette\nset-option -g status-justify left\nset-option -g status-bg black\nset-option -g status-fg white\nset-option -g status-left-length 40\nset-option -g status-right-length 80\n\n# Pane Border Color Palette\nset-option -g pane-active-border-fg green\nset-option -g pane-active-border-bg black\nset-option -g pane-border-fg white\nset-option -g pane-border-bg black\n\n# Message Color Palette\nset-option -g message-fg black\nset-option -g message-bg green\n\n# Window Status Color Palette\nsetw -g window-status-bg black\nsetw -g window-status-current-fg green\nsetw -g window-status-bell-attr default\nsetw -g window-status-bell-fg red\nsetw -g window-status-activity-attr default\nsetw -g window-status-activity-fg yellow\n\n\n### UI\n###########################################################################\n\n# Notification\nsetw -g monitor-activity on\nset -g visual-activity on\nset-option -g bell-action any\nset-option -g visual-bell off\n\n# Automatically set window titles\nset-option -g set-titles on\nset-option -g set-titles-string '#H:#S.#I.#P #W #T' # window number,program name,active (or not)\n\n# Statusbar Adjustments\nset -g status-left \"#[fg=red] #H#[fg=green]:#[fg=white]#S#[fg=green] |#[default]\"\n\n# Show performance counters in statusbar\n# Requires https://github.com/thewtex/tmux-mem-cpu-load/\nset -g status-interval 4\nset -g status-right \"#[fg=green] | #[fg=white]#(tmux-mem-cpu-load)#[fg=green] | #[fg=cyan]%H:%M #[default]\"\n```\n\n\n### References\n\n[Tmux | Home](http://tmux.github.io)\n\n[Tmux Manual page](http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man1/tmux.1?query=tmux)\n\n[Gentoo Wiki](http://wiki.gentoo.org/wiki/Tmux)\n\n[Archlinux Wiki](https://wiki.archlinux.org/index.php/Tmux)\n\n[Display CPU/MEM % in statusbar](https://stackoverflow.com/questions/11558907/is-there-a-better-way-to-display-cpu-usage-in-tmux)\n\n[tmuxinator - Manage complex tmux sessions](https://github.com/tmuxinator/tmuxinator)\n"
        },
        {
          "name": "toml.md",
          "type": "blob",
          "size": 7.3701171875,
          "content": "---\nname: TOML\nfilename: learntoml.toml\ncontributors:\n  - [\"Alois de Gouvello\", \"https://github.com/aloisdg\"]\n---\n\nTOML stands for Tom's Obvious, Minimal Language. It is a data serialisation language designed to be a minimal configuration file format that's easy to read due to obvious semantics.\n\nIt is an alternative to YAML and JSON. It aims to be more human friendly than JSON and simpler that YAML. TOML is designed to map unambiguously to a hash table. TOML should be easy to parse into data structures in a wide variety of languages.\n\nThis document follows [TOML v1.0.0](https://toml.io/en/v1.0.0). Future [changes](https://github.com/toml-lang/toml/blob/main/CHANGELOG.md) are expected to be minor and backwards-compatible.\n\n```toml\n# Comments in TOML look like this.\n\n################\n# SCALAR TYPES #\n################\n\n# Our root object (which continues for the entire document) will be a map,\n# which is equivalent to a dictionary, hash or object in other languages.\n\n# The key, equals sign, and value must be on the same line\n# (though some values can be broken over multiple lines).\nkey = \"value\"\nstring = \"hello\"\nnumber = 42\nfloat = 3.14\nboolean = true\ndateTime = 1979-05-27T07:32:00-08:00\nscientificNotation = 1e+12\n\"key can be quoted\" = true # Both \" and ' are fine\n\"unquoted key may contain\" = \"letters, numbers, underscores, and dashes\"\nother_kêys = \"are permitted by spec but most implementations don't actually permit them\"\n\n# A bare key must be non-empty, but an empty quoted key is allowed\n\"\" = \"blank\"     # VALID but discouraged\n'' = 'blank'     # VALID but discouraged\n\n##########\n# String #\n##########\n\n# All strings must contain only valid UTF-8 characters.\n# We can escape characters and some of them have a compact escape sequence.\n# For example, \\t add a tabulation. Refers to the spec to get all of them.\nbasicString = \"are surrounded by quotation marks. \\\"I'm quotable\\\". Name\\tJos\"\n\nmultiLineString = \"\"\"\nare surrounded by three quotation marks\non each side and allow newlines.\"\"\"\n\nliteralString = 'are surrounded by single quotes. Escaping are not allowed.'\n\nmultiLineLiteralString = '''\nare surrounded by three single quotes on each side\nand allow newlines. Still no escaping.\nThe first newline is trimmed in raw strings.\n   All other whitespace\n   is preserved. #! are preserved?\n'''\n\n# For binary data it is recommended that you use Base64, another ASCII or UTF8\n# encoding. The handling of that encoding will be application specific.\n\n###########\n# Integer #\n###########\n\n## Integers can start with a +, a - or nothing.\n## Leading zeros are not allowed.\n## Hex, octal, and binary forms are allowed.\n## Values that cannot be expressed as a series of digits are not allowed.\nint1 = +42\nint2 = 0\nint3 = -21\nint4 = 0xdeadbeef\nint5 = 0o755\nint6 = 0b11011100\nintegerRange = 64\n\n## You can use underscores to enhance readability. Each\n## underscore must be surrounded by at least one digit.\nint4 = 5_349_221\nint5 = 1_2_3_4_5     # VALID but discouraged\n\n#########\n# Float #\n#########\n\n# Floats are an integer followed by a fractional and/or an exponent part.\nflt1 = 3.1415\nflt2 = -5e6\nflt3 = 6.626E-34\n\n###########\n# Boolean #\n###########\n\nbool1 = true\nbool2 = false\nboolMustBeLowercase = true\n\n############\n# Datetime #\n############\n\ndate1 = 1979-05-27T07:32:00Z # UTC time, following RFC 3339/ISO 8601 spec\ndate2 = 1979-05-26T15:32:00+08:00 # with RFC 3339/ISO 8601 offset\ndate3 = 1979-05-27T07:32:00 # without offset\ndate4 = 1979-05-27 # without offset or time\n\n####################\n# COLLECTION TYPES #\n####################\n\n#########\n# Array #\n#########\n\narray1 = [ 1, 2, 3 ]\narray2 = [ \"Commas\", \"are\", \"delimiters\" ]\narray3 = [ \"Don't mix\", \"different\", \"types\" ]\narray4 = [ [ 1.2, 2.4 ], [\"all\", 'strings', \"\"\"are the same\"\"\", '''type'''] ]\narray5 = [\n  \"Whitespace\", \"is\", \"ignored\"\n]\n\n#########\n# Table #\n#########\n\n# Tables (or hash tables or dictionaries) are collections of key/value\n# pairs. They appear in square brackets on a line by themselves.\n# Empty tables are allowed and simply have no key/value pairs within them.\n[table]\n\n# Under that, and until the next table or EOF are the key/values of that table.\n# Key/value pairs within tables are not guaranteed to be in any specific order.\n[table-1]\nkey1 = \"some string\"\nkey2 = 123\n\n[table-2]\nkey1 = \"another string\"\nkey2 = 456\n\n# Dots are prohibited in bare keys because dots are used to signify nested tables.\n# Naming rules for each dot separated part are the same as for keys.\n[dog.\"tater.man\"]\ntype = \"pug\"\n\n# In JSON land, that would give you the following structure:\n# { \"dog\": { \"tater.man\": { \"type\": \"pug\" } } }\n\n# Whitespace around dot-separated parts is ignored, however, best practice is to\n# not use any extraneous whitespace.\n[a.b.c]            # this is best practice\n[ d.e.f ]          # same as [d.e.f]\n[ j . \"ʞ\" . 'l' ]  # same as [j.\"ʞ\".'l']\n\n# You don't need to specify all the super-tables if you don't want to. TOML knows\n# how to do it for you.\n# [x] you\n# [x.y] don't\n# [x.y.z] need these\n[x.y.z.w] # for this to work\n\n# As long as a super-table hasn't been directly defined and hasn't defined a\n# specific key, you may still write to it.\n[a.b]\nc = 1\n\n[a]\nd = 2\n\n# Will generate the following in JSON:\n# { \"a\": {\"b\": {\"c\": 1}, \"d\": 2 } }\n\n# You cannot define any key or table more than once. Doing so is invalid.\n\n# DO NOT DO THIS\n[a]\nb = 1\n\n[a]\nc = 2\n\n# DO NOT DO THIS EITHER\n[a]\nb = 1\n\n[a.b]\nc = 2\n\n# All table names must be non-empty.\n[]     # INVALID\n[a.]   # INVALID\n[a..b] # INVALID\n[.b]   # INVALID\n[.]    # INVALID\n\n################\n# Inline table #\n################\n\ninlineTables = { areEnclosedWith = \"{ and }\", a = { b = { c = { d = 1 } } } }\npoint = { x = 1, y = 2 }\nusingMultiple = {\n  lines = \"discouraged!\",\n  instead = \"use normal TOML tables\",\n}\n\n###################\n# Array of Tables #\n###################\n\n# An array of tables can be expressed by using a table name in double brackets.\n# Each table with the same double bracketed name will be an item in the array.\n# The tables are inserted in the order encountered.\n\n[[products]]\nname = \"array of table\"\nsku = 738594937\nemptyTableAreAllowed = true\n\n[[products]]\n\n[[products]]\nname = \"Nail\"\nsku = 284758393\ncolor = \"gray\"\n```\n\nThe equivalent in JSON would be:\n\n```json\n{ \n  \"products\": [\n    {\n      \"name\": \"array of table\",\n      \"sku\": 7385594937,\n      \"emptyTableAreAllowed\": true\n    },\n    {},\n    {\n      \"name\": \"Nail\",\n      \"sku\": 284758393,\n      \"color\": \"gray\"\n    }\n  ]\n}\n```\n\n```toml\n# You can create nested arrays of tables as well. Each double-bracketed\n# sub-table will belong to the nearest table element above it.\n\n[[fruit]]\n  name = \"apple\" # I am a property in fruit table/map\n\n  [fruit.geometry]\n    shape = \"round\"\n    note = \"I am a property in geometry table/map\"\n\n  [[fruit.color]]\n    name = \"red\"\n    note = \"I am an array item in apple fruit's table/map\"\n\n  [[fruit.color]]\n    name = \"green\"\n    note = \"I am in the same array as red\"\n\n[[fruit]]\n  name = \"banana\"\n\n  [[fruit.color]]\n    name = \"yellow\"\n    note = \"I am an array item in banana fruit's table/map\"\n```\n\nThe equivalent in JSON would be:\n\n```\n{\n  \"fruit\": [\n    {\n      \"name\": \"apple\",\n      \"geometry\": { \"shape\": \"round\", \"note\": \"...\"},\n      \"color\": [\n        { \"name\": \"red\", \"note\": \"...\" },\n        { \"name\": \"green\", \"note\": \"...\" }\n      ]\n    },\n    {\n      \"name\": \"banana\",\n      \"color\": [\n        { \"name\": \"yellow\", \"note\": \"...\" }\n      ]\n    }\n  ]\n}\n```\n\n### More Resources\n\n+ [TOML official repository](https://github.com/toml-lang/toml)\n"
        },
        {
          "name": "tr",
          "type": "tree",
          "content": null
        },
        {
          "name": "typescript.md",
          "type": "blob",
          "size": 8.4140625,
          "content": "---\nname: TypeScript\ncontributors:\n    - [\"Philippe Vlérick\", \"https://github.com/pvlerick\"]\n    - [\"Kiwimoe\", \"https://github.com/kiwimoe\"]\nfilename: learntypescript.ts\n---\n\nTypeScript is a language that aims at easing development of large scale\napplications written in JavaScript.  TypeScript adds common concepts such as\nclasses, modules, interfaces, generics and (optional) static typing to\nJavaScript.  It is a superset of JavaScript: all JavaScript code is valid\nTypeScript code so it can be added seamlessly to any project. The TypeScript\ncompiler emits JavaScript.\n\nThis article will focus only on TypeScript extra syntax, as opposed to\n[JavaScript](../javascript/).\n\nTo test TypeScript's compiler, head to the\n[Playground](https://www.typescriptlang.org/play) where you will be able\nto type code, have auto completion and directly see the emitted JavaScript.\n\n```ts\n// There are 3 basic types in TypeScript\nlet isDone: boolean = false;\nlet lines: number = 42;\nlet name: string = \"Anders\";\n\n// But you can omit the type annotation if the variables are derived\n// from explicit literals\nlet isDone = false;\nlet lines = 42;\nlet name = \"Anders\";\n\n// When it's impossible to know, there is the \"Any\" type\nlet notSure: any = 4;\nnotSure = \"maybe a string instead\";\nnotSure = false; // okay, definitely a boolean\n\n// Use const keyword for constants\nconst numLivesForCat = 9;\nnumLivesForCat = 1; // Error\n\n// For collections, there are typed arrays and generic arrays\nlet list: number[] = [1, 2, 3];\n// Alternatively, using the generic array type\nlet list: Array<number> = [1, 2, 3];\n\n// For enumerations:\nenum Color { Red, Green, Blue };\nlet c: Color = Color.Green;\nconsole.log(Color[c]); // \"Green\"\n\n// Lastly, \"void\" is used in the special case of a function returning nothing\nfunction bigHorribleAlert(): void {\n  alert(\"I'm a little annoying box!\");\n}\n\n// Functions are first class citizens, support the lambda \"fat arrow\" syntax and\n// use type inference\n\n// The following are equivalent, the same signature will be inferred by the\n// compiler, and same JavaScript will be emitted\nlet f1 = function (i: number): number { return i * i; }\n// Return type inferred\nlet f2 = function (i: number) { return i * i; }\n// \"Fat arrow\" syntax\nlet f3 = (i: number): number => { return i * i; }\n// \"Fat arrow\" syntax with return type inferred\nlet f4 = (i: number) => { return i * i; }\n// \"Fat arrow\" syntax with return type inferred, braceless means no return\n// keyword needed\nlet f5 = (i: number) => i * i;\n\n// Functions can accept more than one type\nfunction f6(i: string | number): void {\n  console.log(\"The value was \" + i);\n}\n\n// Interfaces are structural, anything that has the properties is compliant with\n// the interface\ninterface Person {\n  name: string;\n  // Optional properties, marked with a \"?\"\n  age?: number;\n  // And of course functions\n  move(): void;\n}\n\n// Object that implements the \"Person\" interface\n// Can be treated as a Person since it has the name and move properties\nlet p: Person = { name: \"Bobby\", move: () => { } };\n// Objects that have the optional property:\nlet validPerson: Person = { name: \"Bobby\", age: 42, move: () => { } };\n// Is not a person because age is not a number\nlet invalidPerson: Person = { name: \"Bobby\", age: true };\n\n// Interfaces can also describe a function type\ninterface SearchFunc {\n  (source: string, subString: string): boolean;\n}\n// Only the parameters' types are important, names are not important.\nlet mySearch: SearchFunc;\nmySearch = function (src: string, sub: string) {\n  return src.search(sub) != -1;\n}\n\n// Classes - members are public by default\nclass Point {\n  // Properties\n  x: number;\n\n  // Constructor - the public/private keywords in this context will generate\n  // the boiler plate code for the property and the initialization in the\n  // constructor.\n  // In this example, \"y\" will be defined just like \"x\" is, but with less code\n  // Default values are also supported\n\n  constructor(x: number, public y: number = 0) {\n    this.x = x;\n  }\n\n  // Functions\n  dist(): number { return Math.sqrt(this.x * this.x + this.y * this.y); }\n\n  // Static members\n  static origin = new Point(0, 0);\n}\n\n// Classes can be explicitly marked as implementing an interface.\n// Any missing properties will then cause an error at compile-time.\nclass PointPerson implements Person {\n    name: string\n    move() {}\n}\n\nlet p1 = new Point(10, 20);\nlet p2 = new Point(25); //y will be 0\n\n// Inheritance\nclass Point3D extends Point {\n  constructor(x: number, y: number, public z: number = 0) {\n    super(x, y); // Explicit call to the super class constructor is mandatory\n  }\n\n  // Overwrite\n  dist(): number {\n    let d = super.dist();\n    return Math.sqrt(d * d + this.z * this.z);\n  }\n}\n\n// Modules, \".\" can be used as separator for sub modules\nmodule Geometry {\n  export class Square {\n    constructor(public sideLength: number = 0) {\n    }\n    area() {\n      return Math.pow(this.sideLength, 2);\n    }\n  }\n}\n\nlet s1 = new Geometry.Square(5);\n\n// Local alias for referencing a module\nimport G = Geometry;\n\nlet s2 = new G.Square(10);\n\n// Generics\n// Classes\nclass Tuple<T1, T2> {\n  constructor(public item1: T1, public item2: T2) {\n  }\n}\n\n// Interfaces\ninterface Pair<T> {\n  item1: T;\n  item2: T;\n}\n\n// And functions\nlet pairToTuple = function <T>(p: Pair<T>) {\n  return new Tuple(p.item1, p.item2);\n};\n\nlet tuple = pairToTuple({ item1: \"hello\", item2: \"world\" });\n\n// Including references to a definition file:\n/// <reference path=\"jquery.d.ts\" />\n\n// Template Strings (strings that use backticks)\n// String Interpolation with Template Strings\nlet name = 'Tyrone';\nlet greeting = `Hi ${name}, how are you?`\n// Multiline Strings with Template Strings\nlet multiline = `This is an example\nof a multiline string`;\n\n// READONLY: New Feature in TypeScript 3.1\ninterface Person {\n  readonly name: string;\n  readonly age: number;\n}\n\nvar p1: Person = { name: \"Tyrone\", age: 42 };\np1.age = 25; // Error, p1.age is read-only\n\nvar p2 = { name: \"John\", age: 60 };\nvar p3: Person = p2; // Ok, read-only alias for p2\np3.age = 35; // Error, p3.age is read-only\np2.age = 45; // Ok, but also changes p3.age because of aliasing\n\nclass Car {\n  readonly make: string;\n  readonly model: string;\n  readonly year = 2018;\n\n  constructor() {\n    this.make = \"Unknown Make\"; // Assignment permitted in constructor\n    this.model = \"Unknown Model\"; // Assignment permitted in constructor\n  }\n}\n\nlet numbers: Array<number> = [0, 1, 2, 3, 4];\nlet moreNumbers: ReadonlyArray<number> = numbers;\nmoreNumbers[5] = 5; // Error, elements are read-only\nmoreNumbers.push(5); // Error, no push method (because it mutates array)\nmoreNumbers.length = 3; // Error, length is read-only\nnumbers = moreNumbers; // Error, mutating methods are missing\n\n// Tagged Union Types for modelling state that can be in one of many shapes\ntype State =\n  | { type: \"loading\" }\n  | { type: \"success\", value: number }\n  | { type: \"error\", message: string };\n\ndeclare const state: State;\nif (state.type === \"success\") {\n  console.log(state.value);\n} else if (state.type === \"error\") {\n  console.error(state.message);\n}\n\n// Template Literal Types\n// Use to create complex string types\ntype OrderSize = \"regular\" | \"large\";\ntype OrderItem = \"Espresso\" | \"Cappuccino\";\ntype Order = `A ${OrderSize} ${OrderItem}`;\n\nlet order1: Order = \"A regular Cappuccino\";\nlet order2: Order = \"A large Espresso\";\nlet order3: Order = \"A small Espresso\"; // Error\n\n// Iterators and Generators\n\n// for..of statement\n// iterate over the list of values on the object being iterated\nlet arrayOfAnyType = [1, \"string\", false];\nfor (const val of arrayOfAnyType) {\n    console.log(val); // 1, \"string\", false\n}\n\nlet list = [4, 5, 6];\nfor (const i of list) {\n   console.log(i); // 4, 5, 6\n}\n\n// for..in statement\n// iterate over the list of keys on the object being iterated\nfor (const i in list) {\n   console.log(i); // \"0\", \"1\", \"2\"\n}\n\n// Type Assertion\n\nlet foo = {} // Creating foo as an empty object\nfoo.bar = 123 // Error: property 'bar' does not exist on `{}`\nfoo.baz = 'hello world' // Error: property 'baz' does not exist on `{}`\n\n// Because the inferred type of foo is `{}` (an object with 0 properties), you\n// are not allowed to add bar and baz to it. However with type assertion,\n// the following will pass:\n\ninterface Foo {\n  bar: number;\n  baz: string;\n}\n\nlet foo = {} as Foo; // Type assertion here\nfoo.bar = 123;\nfoo.baz = 'hello world'\n```\n\n## Further Reading\n\n* [Official TypeScript website](https://www.typescriptlang.org/)\n* [Source code on GitHub](https://github.com/microsoft/TypeScript)\n* [Learn TypeScript](https://learntypescript.dev/)\n"
        },
        {
          "name": "uk",
          "type": "tree",
          "content": null
        },
        {
          "name": "uxntal.md",
          "type": "blob",
          "size": 4.0029296875,
          "content": "---\nname: Uxntal\ncontributors:\n    - [\"Devine Lu Linvega\", \"https://wiki.xxiivv.com\"]\nfilename: learnuxn.tal\n---\n\nUxntal is a stack-machine assembly language targeting the [Uxn virtual machine](https://wiki.xxiivv.com/site/uxn.html).\n\nStack machine programming might look at bit odd, as it uses a postfix notation, \nwhich means that operators are always found at the end of an operation. For \ninstance, one would write 3 4 + instead of 3 + 4. \n\nThe expression written (5 + 10) * 3 in conventional notation would be \nwritten 10 5 + 3 * in reverse Polish notation.\n\n```forth\n( This is a comment )\n\n( All programming in Unxtal is done by manipulating the stack )\n\n#12 ( push a byte )\n#3456 ( push a short )\n\n( Uxn has 32 opcodes, each opcode has 3 possible modes )\n\nPOP ( pop a byte )\nPOP2 ( pop a short )\n\n( The modes are:\n\t[2] The short mode consumes two bytes from the stack.\n\t[k] The keep mode does not consume items from the stack.\n\t[r] The return mode makes the operator operate on the return-stack. )\n\n#12 #34 ADD ( 46 )\n#12 #34 ADDk ( 12  34  46 )\n\n( The modes can be combined )\n\n#1234 #5678 ADD2k ( 12  34  56  78  68  ac )\n\n( The arithmetic/bitwise opcodes are:\n\tADD SUB MUL DIV\n\tAND ORA EOR SFT )\n\n( New opcodes can be created using macros )\n\n%MOD2 { DIV2k MUL2 SUB2 }\n\n#1234 #0421 MOD2 ( 01  b0 )\n\n( ---------------------------------------------------------------------------- )\n\n( A short is simply two bytes, each byte can be manipulated )\n\n#1234 SWP ( 34  12 )\n#1234 #5678 SWP2 ( 56  78  12  34 )\n#1234 #5678 SWP ( 12  34  78  56 )\n\n( Individual bytes of a short can be removed from the stack )\n\n#1234 POP ( 12 )\n#1234 NIP ( 34 )\n\n( The stack opcodes are:\n\tPOP DUP NIP SWP OVR ROT )\n\n( ---------------------------------------------------------------------------- )\n\n( To compare values on the stack with each other )\n\n#12 #34 EQU ( 00 )\n#12 #12 EQU ( 01 )\n\n( Logic opcodes will put a flag with a value of either 00 or 01 )\n\n#12 #34 LTH \n#78 #56 GTH \n\t#0101 EQU2 ( 01 )\n\n( The logic opcodes are:\n\tEQU NEQ GTH LTH )\n\n( ---------------------------------------------------------------------------- )\n\n( Uxn's accessible memory is as follows: \n\t256 bytes of working stack \n\t256 bytes of return stack\n\t65536 bytes of memory\n\t256 bytes of IO memory )\n\n( The addressable memory is between 0000-ffff )\n\n#12 #0200 STA ( stored 12 at 0200 in memory )\n#3456 #0201 STA2 ( stored 3456 at 0201 in memory )\n#0200 LDA2 ( 12  34 )\n\n( The zero-page can be addressed with a single byte )\n\n#1234 #80 STZ2 ( stored 12 at 0080, and 34 at 0081 )\n#80 LDZ2 ( 12  34 )\n\n( Devices are ways for Uxn to communicate with the outside world\n\tThere is a maximum of 16 devices connected to Uxn at once\n\tDevice bytes are called ports, the Console device uses the 10-1f ports\n\tThe console's port 18 is called /write )\n\n%EMIT { #18 DEO }\n\n#31 EMIT ( print \"1\" to console )\n\n( A label is equal to a position in the program )\n@parent ( defines a label \"parent\" )\n\t&child ( defines a sublabel \"parent/child\" )\n\n( Label positions can be pushed on stack )\n;parent ( push the absolute position, 2 bytes )\n,parent ( push the relative position, 1 byte )\n.parent ( push the zero-page position, 1 byte )\n\n( The memory opcodes are:\n\tLDZ STZ LDR STR\n\tLDA STA DEI DEO )\n\n( ---------------------------------------------------------------------------- )\n\n( Logic allows to create conditionals )\n\n#12 #34 NEQ ,skip JCN\n\t#31 EMIT\n\t@skip\n\n( Logic also allows to create for-loops )\n\n#3a #30\n@loop\n\tDUP EMIT ( print \"123456789\" to console )\n\tINC GTHk ,loop JCN\nPOP2\n\n( Logic also allows to create while-loops )\n\n;word\n@while\n\tLDAk EMIT\n\tINC2 LDAk ,while JCN\nPOP2\nBRK\n\n@word \"vermillion $1\n\n( Subroutines can be jumped to with JSR, and returned from with JMP2r )\n\n;word ,print-word JSR\nBRK\n\n@print-word ( word* -- )\n\t@while\n\t\tLDAk EMIT\n\t\tINC2 LDAk ,while JCN\n\tPOP2\nJMP2r\n\n@word \"cerulean\n\n( The jump opcodes are: \n\tJMP JCN JSR )\n```\n\n## Ready For More?\n\n* [Uxntal Lessons](https://compudanzas.net/uxn_tutorial.html)\n* [Uxntal Assembly](https://wiki.xxiivv.com/site/uxntal.html)\n* [Uxntal Resources](https://github.com/hundredrabbits/awesome-uxn)\n"
        },
        {
          "name": "v.md",
          "type": "blob",
          "size": 5.06640625,
          "content": "---\nname: V\nfilename: vlang.v\ncontributors:\n    - [\"Maou Shimazu\", \"https://github.com/Maou-Shimazu\"]\n---\n\nV is a statically typed compiled programming language \ndesigned for building maintainable software.\n\nIt's similar to Go and its design has also been influenced by \nOberon, Rust, Swift, Kotlin, and Python.\n\nThe language promotes writing \nsimple and clear code with minimal abstraction.\n\nDespite being simple, V gives the developer a lot of power. \nAnything you can do in other languages, you can do in V.\n\n```v\n// Single Line Comment.\n/*\n    Multi Line Comment\n*/\n\nstruct User { // Cannot be defined in main, explained later.\n\tage  int\n\tname string\n\tpos int = -1 // custom default value\n}\n// struct method\nfn (u User) can_register() bool {\n\treturn u.age > 16\n}\n\nstruct Parser {\n\ttoken Token\n}\n\n// c like enums\nenum Token {\n\tplus\n\tminus\n\tdiv\n\tmult\n}\n\n// 1. functions\n// language does not use semi colons\nfn add(x int, y int) int {\n\treturn x + y \n}\n// can return multiple values\nfn foo() (int, int) {\n\treturn 2, 3\n}\n\n// function visibility \npub fn public_function() { // pub can only be used from a named module.\n}\n\nfn private_function() {\n}\n\n\n\n// Main function\nfn main() {\n\t// Anonymous functions can be declared inside other functions:\n\tdouble_fn := fn (n int) int {\n\t\treturn n + n\n\t}\n\t// 2. Variables: they are immutable by default\n\t// implicitly typed\n\tx := 1\n\t// x = 2 // error\n\tmut y := 2\n\ty = 4\n\tname := \"John\"\n\tlarge_number := i64(9999999999999)\n    println(\"$x, $y, $name, $large_number\") // 1, 4, John, 9999999999999\n\n\t// unpacking values from functions.\n\ta, b := foo()\n\tprintln(\"$a, $b\") // 2, 3\n\tc, _ := foo() // ignore values using `_`\n\tprintln(\"$c\") // 2\n\n\t// Numbers\n\tu := u16(12)\n\tv := 13 + u    // v is of type `u16`\n\tr := f32(45.6)\n\tq := r + 3.14  // x is of type `f32`\n\ts := 75        // a is of type `int` \n\tl := 14.7      // b is of type `f64` \n\te := u + s     // c is of type `int`\n\td := l + r     // d is of type `f64`\n\n\t// Strings\n\tmut bob := 'Bob'\n\tassert bob[0] == u8(66) // indexing gives a byte, u8(66) == `B`\n\tassert bob[1..3] == 'ob'  // slicing gives a string 'ob'\n\tbobby := bob + 'by' // + is used to concatenate strings\n\tprintln(bobby) // \"Bobby\"\n\tbob += \"by2\" // += is used to append to strings\n\tprintln(bob) // \"Bobby2\"\n\n\t//String values are immutable. You cannot mutate elements:\n\t//mut s := 'hello 🌎'\n\t//s[0] = `H` // not allowed\n\n\t//For raw strings, prepend r. Escape handling is not done for raw strings:\n\trstring := r'hello\\nworld' // the `\\n` will be preserved as two characters\n\tprintln(rstring) // \"hello\\nworld\"\n\n\t// string interpolation\n\tprintln('Hello, $bob!') // Hello, Bob!\n\tprintln('Bob length + 10: ${bob.len + 10}!') // Bob length + 10: 13!\n\n\t// 3. Arrays\n\tmut numbers := [1, 2, 3]\n\tprintln(numbers) // `[1, 2, 3]`\n\tnumbers << 4 // append elements with <<\n\tprintln(numbers[3]) // `4`\n\tnumbers[1] = 5\n\tprintln(numbers) // `[1, 5, 3]`\n\t// numbers << \"John\" // error: `numbers` is an array of numbers\n\tnumbers = [] // array is now empty\n\tarr := []int{len: 5, init: -1}\n\t// `arr == [-1, -1, -1, -1, -1]`, arr.cap == 5\n\n\tnumber_slices := [0, 10, 20, 30, 40]\n\tprintln(number_slices[1..4]) // [10, 20, 30]\n\tprintln(number_slices[..4]) // [0, 10, 20, 30]\n\tprintln(number_slices[1..]) // [10, 20, 30, 40]\n\n\t// 4. structs and enums\n\t// struct User {\n\t// \tage  int\n\t// \tname string\n\t//  pos int = -1 // custom default value\n\t// }\n\tmut users := User{21, 'Bob', 0}\n\tprintln(users.age) // 21\n\t\n\t// enum Token {\n\t// \tplus\n\t// \tminus\n\t// \tdiv\n\t// \tmult\n\t// }\n\n\t// struct Parser {\n\t// \ttoken Token\n\t// }\n\tparser := Parser{}\n\tif parser.token == .plus || parser.token == .minus \n\t|| parser.token == .div || parser.token == .mult {\n\t\t// ...\n\t}\n\n\n\t// 5. Maps\n\tnumber_map := {\n\t\t'one': 1\n\t\t'two': 2\n\t}\n\tprintln(number_map) // {'one': 1, 'two': 2}\n\tprintln(number_map[\"one\"]) // 1\n\tmut m := map[string]int{} // a map with `string` keys and `int` values\n\tm['one'] = 1\n\tm['two'] = 2\n\tprintln(m['one']) // \"1\"\n\tprintln(m['bad_key']) // \"0\"\n\tm.delete('two')\n\n\t// 6. Conditionals\n\ta_number := 10\n\tb_number := 20\n\tif a_number < b {\n\t\tprintln('$a_number < $b_number')\n\t} else if a_number > b {\n\t\tprintln('$a_number > $b_number')\n\t} else {\n\t\tprintln('$a_number == $b_number')\n\t}\n\tnum := 777\n\teven_odd := if num % 2 == 0 { 'even' } else { 'odd' }\n\tprintln(even_odd)\n\n\tmatch even_odd {\n\t\t'even' { println('even') }\n\t\t'odd' { println('odd') }\n\t\telse { println('unknown') }\n\t} \n\n\t// 7. Loops\n\tloops := [1, 2, 3, 4, 5]\n\tfor lp in loops {\n\t\tprintln(lp)\n\t}\n\tloop_names := ['Sam', 'Peter']\n\tfor i, lname in loop_names {\n\t\tprintln('$i) $lname')\n\t\t// Output: 0) Sam\n\t\t//         1) Peter\n\t}\n\t// You can also use break and continue followed by a \n\t// label name to refer to an outer for loop:\n\touter: for i := 4; true; i++ {\n\t\tprintln(i)\n\t\tfor {\n\t\t\tif i < 7 {\n\t\t\t\tcontinue outer\n\t\t\t} else {\n\t\t\t\tbreak outer\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n## Further reading\n\nThere are more complex concepts to be learnt in V which are available at the\nofficial [V documentation](https://github.com/vlang/v/blob/master/doc/docs.md).\n\nYou can also find more information about the V language at the [official website](https://vlang.io/)\nor check it out at the [v playground](https://v-wasm.vercel.app/).\n"
        },
        {
          "name": "vala.md",
          "type": "blob",
          "size": 13.4072265625,
          "content": "---\nname: Vala\ncontributors:\n    - [\"Milo Gilad\", \"https://github.com/Myl0g\"]\nfilename: LearnVala.vala\n---\n\nIn GNOME's own words, \"Vala is a programming language that aims to bring modern programming language features to GNOME developers without imposing any additional runtime requirements and without using a different ABI compared to applications and libraries written in C.\"\n\nVala has aspects of Java and C#, so it'll be natural to those who know either.\n\n[Read more here.](https://wiki.gnome.org/Projects/Vala)\n\n```vala\n// Single line comment\n\n/* Multiline\nComment */\n\n/**\n* Documentation comment\n*/\n\n/* Data Types */\n\nchar character = 'a'\nunichar unicode_character = 'u' // 32-bit unicode character\n\nint i = 2; // ints can also have guaranteed sizes (e.g. int64, uint64)\nuint j = -6; // Won't compile; unsigned ints can only be positive\n\nlong k;\n\nshort l;\nushort m;\n\nstring text = \"Hello,\"; // Note that the == operator will check string content\n\nstring verbatim = \"\"\"This is a verbatim (a.k.a. raw) string. Special characters\n(e.g. \\n and \"\") are not interpreted. They may also be multiple lines long.\"\"\";\n\n// String Templates allow for easy string formatting\nstring string_template = @\"$text world\"; // \"$text\" evaluates to \"Hello,\"\n\nint test = 5;\nint test2 = 10;\nstring template2 = @\"$(test * test2) is a number.\"; // Expression evaluation\n\nstring template_slice = string_template[7:12]; // => \"world\"\n\n// Most data types have methods for parsing.\n\nbool parse_bool = bool.parse(\"false\"); // => false\nint parse_int = int.parse(\"-52\"); // => -52\nstring parse_string = parse_int.to_string(); // => \"-52\"\n\n/* Basic I/O */\n\nstdout.printf(parse_string); // Prints to console\nstring input = stdin.read_line(); // Gets input from console\n\nstderr.printf(\"Error message\"); // Error printing\n\n/* Arrays */\n\nint[] int_array = new int[10]; // Array of ints with 10 slots\nint better_int_array[10]; // Above expression, shortened\nint_array.length; // => 10;\n\nint[] int_array2 = {5, 10, 15, 20}; // Can be created on-the-fly\n\nint[] array_slice = int_array2[1:3]; // Slice (copy of data)\nunowned int[] array_slice_ref = int_array2[1:3]; // Reference to data\n\n// Multi-dimensional Arrays (defined with a number of commas in the brackets)\n\nint[,] multi_array = new int[6,4]; // 6 is the number of arrays, 4 is their size\nint[,] multi_array2 = {{7, 4, 6, 4},\n                       {3, 2, 4, 6},\n                       {5, 9, 5, 1}}; // new int[3,4]\nmulti_array2[2,3] = 12; // 2 is the array, 3 is the index in the array\nint first_d = multi_array2.length[0] // => 3\nint second_d = multi_array2.length[1] // => 4\n\n// Stacked arrays (e.g. int[][]) where array lengths vary are not supported.\n\n// Multi-dimensional arrays cannot be sliced, nor can they be converted to one-\n// dimensional.\n\nint[] add_to_array = {};\nadd_to_array += 12; // Arrays can be dynamically added to\n\nadd_to_array.resize(20); // Array now has 20 slots\n\nuint8[] chars = \"test message\".data;\nchars.move(5, 0, 7);\nstdout.printf((string) chars); // Casts the array to a string and prints it\n\n/* Control Flow */\n\nint a = 1;\nint b = 2;\nint[] foreach_demo = {2, 4, 6, 8};\n\nwhile (b > a) { // While loop; checks if expression is true before executing\n  b--;\n}\n\ndo {\n  b--;\n}\nwhile (b > a); // Do While loop; executes the code in \"do\" before while (b > a)\n\nfor (a = 0; a < 10; a++) { stdout.printf(\"%d\\n\", a); } // for loop\n\nforeach (int foreach_demo_var in foreach_demo) {\n  stdout.printf(\"%d\\n\", foreach_demo_var);\n} // foreach works on any iterable collection\n\nif (a == 0) {\n  stdout.printf(\"%d\\n\", a);\n} else if (a > 1) {\n  stdout.printf(\"%d\\n\", a);\n} else {\n  stdout.printf(\"A is less than 0\");\n} // if-then-else\n\nswitch (a) {\n  case 1:\n    stdout.printf(\"A is 1\\n\");\n    break;\n  case 5:\n  case 10:\n    stdout.printf(\"A is 5 or 10\\n\");\n    break;\n  default:\n    stdout.printf(\"???\\n\")\n    break;\n} // switch statement\n\n/* Type Casting and Inference */\n\nint cast_to_float = 10;\nfloat casted_float = (float) cast_to_float; // static casting; no runtime checks\n\n// For runtime checks, use dynamic casting.\n// Dynamically casted objects must be the following:\n// - Object's class is the same class as the desired type\n// - Object's class is a subclass of the desired type\n// - Desired class is an interface implemented by the object's class\n\nfloat dyna_casted_float = cast_to_float as float // Won't compile\n\nvar inferred_string = \"hello\"; // Type inference\n\n/* Methods (a.k.a. functions) */\n\nint method_demo(string arg1, Object arg2) { // Returns int and takes args\n    return 1;\n}\n\n// Vala methods cannot be overloaded.\n\nvoid some_method(string text) { }\nvoid some_method(int number) { }  // Won't compile\n\n// To achieve similar functionality, use default argument values.\n\nvoid some_better_method(string text, int number = 0) { }\n\nsome_better_method(\"text\");\nsome_better_method(\"text\", 12);\n\n// varargs (variable-length argument lists) are also supported.\n\nvoid method_with_varargs(int arg1, ...) {\n    var varargs_list = va_list(); // gets the varargs list\n\n    string arg_string = varargs_list.arg(); // gets arguments, one after another\n    int int_vararg = varargs_list.arg();\n\n    stdout.printf(\"%s, %d\\n\", arg_string, int_vararg)\n}\n\nstring? ok_to_be_null(int? test_int) { } // \"?\" denotes possible null value\n\n// Delegates\n\ndelegate void DelegateDemo(char char_a);\n\nvoid delegate_match(char char_a) { // Matches DelegateDemo's signature\n  stdout.printf(\"%d\\n\");\n}\n\nvoid call_delegate(DelegateDemo d, char char_b) { // Takes a delegate arg\n  d(char_b) // calls delegate\n}\n\nvoid final_delegate_demo() {\n  call_delegate(delegate_match); // Passes matching method as argument\n}\n\n// Lambdas (a.k.a. Anonymous Methods) are defined with \"=>\"\n\n(a) => { stdout.printf(\"%d\\n\", a); } // Prints \"a\"\n\n/* Namespaces */\n\nnamespace NamespaceDemo {\n  // Allows you to organize variable names\n  int namespace_int = 12;\n}\nnamespace_int += 5; // Won't compile\n\nusing NamespaceDemo;\nnamespace_int += 5; // Valid\n\n/* Structs and Enums */\n\nstruct Closet {\n  public uint shirts; // Default access modifier is private\n  public uint jackets;\n}\n\nCloset struct_init_1 = Closet(); // or Closet struct_init_1 = {};\nCloset struct_init_2 = {15, 3};\nvar struct_init_3 = Closet() { // Type inference also works\n  shirts = 15;\n  jackets = 3;\n}\n\nenum HouseSize { // An example of an enum\n  SMALL,\n  MODERATE,\n  BIG\n}\n\n/* Classes and Object-Oriented Programming */\n\nclass Message : GLib.Object { // Class Message extends GLib's Object\n  private string sender; // a private field\n  public string text {get; set;} // a public property (more on that later)\n  protected bool is_digital = true; // protected (this class and subclasses)\n  internal bool sent = false; // internal (classes in same package)\n\n  public void send(string sender) { // public method\n    this.sender = sender;\n    sent = true;\n  }\n\n  public Message() { // Constructor\n    // ...\n  }\n\n}\n\n// Since method overloading isn't possible, you can't overload constructors.\n// However, you can use named constructors to achieve the same functionality.\n\npublic class Calculator : GLib.Object {\n\n    public Calculator() {\n    }\n\n    public Calculator.with_name(string name) {\n    }\n\n    public Calculator.model(string model_id, string name = \"\") {\n      this.with_name(@\"$model_id $name\"); // Chained constructors with \"this\"\n    }\n    ~Calculator() { } // Only needed if you're using manual memory management\n}\n\nvar calc1 = new Calculator.with_name(\"Temp\");\nvar calc2 = new Calculator.model(\"TI-84\");\n\n// Signals (a.k.a. events or event listeners) are a way to execute multiple\n// methods with the same signature at the same time.\n\npublic class SignalDemo : GLib.Object {\n  public signal void sig_demo(int sig_demo_int); // Must be public\n\n  public static int main(string[] args) {\n    // main method; program does not compile without it\n\n    var sig_demo_class = new SignalDemo(); // New instance of class\n\n    sig_demo_class.sig_demo.connect((ob, sig_int) => { // Lambda used as handler\n        stdout.printf(\"%d\\n\", sig_int); // \"ob\" is object on which it is emitted\n      });\n\n    sig_demo_class.sig_demo(27); // Signal is emitted\n\n    return 0;\n  }\n}\n\n// You may use the connect() method and attach as many handlers as you'd like.\n// They'll all run at around the same time when the signal is emitted.\n\n// Properties (getters and setters)\n\nclass Animal : GLib.Object {\n  private int _legs; // prefixed with underscore to prevent name clashes\n\n  public int legs {\n    get { return _legs; }\n    set { _legs = value; }\n  }\n\n  public int eyes { get; set; default = 5; } // Shorter way\n  public int kingdom { get; private set; default = \"Animalia\"} // Read-only\n\n  public static void main(string args[]) {\n    rabbit = new Animal();\n\n    // All GLib.Objects have a signal \"notify\" emitted when a property changes.\n\n    // If you specify a specific property, replace all underscores with dashes\n    // to conform to the GObject naming convention.\n\n    rabbit.notify[\"eyes\"].connect((s, p) => { // Remove the [\"eyes\"] for all\n      stdout.printf(\"Property '%s' has changed!\\n\", p.name);\n    });\n\n    rabbit.legs = 2;\n    rabbit.legs += 2;\n    rabbit.eyes = 2;\n\n  }\n}\n\n// Inheritance: Vala classes may inherit 1 class. Inheritance is not implicit.\n\nclass SuperDemo : GLib.Object {\n  public int data1;\n  protected int data2;\n  internal int data3;\n  private int data4;\n\n  public static void test_method {  } // Statics can be called w/out an object\n}\nclass SubDemo : SuperDemo {\n  public static void main(string args[]) {\n    stdout.printf((string) data1); // Will compile\n    stdout.printf((string) data2); // Protected can be accessed by subclasses\n    stdout.printf((string) data3); // Internal is accessible to package\n    stdout.printf((string) data4); // Won't compile\n  }\n}\n\n// Abstract Classes and Methods\n\npublic abstract class OperatingSystem : GLib.Object {\n  public void turn_on() {\n    stdout.printf(\"Booted successfully.\\n\");\n  }\n  public abstract void use_computer();\n}\n\npublic class Linux : OperatingSystem {\n  public override void use_computer() { // Abstract methods must be overridden\n    stdout.printf(\"Beep boop\\n\");\n  }\n}\n\n// Add default behavior to an abstract method by making it \"virtual\".\n\npublic abstract class HardDrive : GLib.Object {\n  public virtual void die() {\n    stdout.printf(\"CLICK-CLICK-CLICK\\n\");\n  }\n}\npublic class MyHD : HardDrive {\n  public override void die() {\n    return;\n  }\n}\n\n// Interfaces: classes can implement any number of these.\n\ninterface Laptop { // May only contain abstracts or virtuals\n  public abstract void turn_on();\n  public abstract void turn_off();\n\n  public abstract int cores; // Won't compile; fields cannot be abstract\n  public abstract int cores {get; set;} // Will compile\n\n  public virtual void keyboard() { // Virtuals are allowed (unlike Java/C#)\n    stdout.printf(\"Clickity-clack\\n\");\n  }\n}\n\n// The ability to use virtuals in Vala means that multiple inheritance is\n// possible (albeit somewhat confined)\n\n// Interfaces cannot implement interfaces, but they may specify that certain\n// interfaces or classes must be also implemented (pre-requisites).\n\npublic interface CellPhone : Collection, GLib.Object {}\n\n// You can get the type info of a class at runtime dynamically.\n\nbool type_info = object is TypeName; // uses \"is\" to get a bool\n\nType type_info2 = object.get_type();\nvar type_name = type_info2.name();\n\nType type_info3 = typeof(Linux);\nLinux type_demo = (Linux) Object.new(type_info3);\n\n// Generics\n\nclass Computer<OperatingSystem> : GLib.Object {\n  private OperatingSystem os;\n\n  public void install_os(OperatingSystem os) {\n    this.os = os;\n  }\n  public OperatingSystem retrieve_os() {\n    return this.os;\n  }\n}\n\nvar new_computer = new Computer<Linux>();\n\n/* Other Features */\n\n// Assertions: crash if a statement is not true (at runtime)\n\nbool is_true = true;\nassert(is_true);\n\n// Contract Programming\n\nint contract_demo(int arg1, int arg2) {\n  requires(arg1 > 0 && arg1 < 10) // Notice the lack of semicolon\n  requires(arg2 >= 12)\n  ensures(result >= 0)\n}\n\n// Error Handling\n\nvoid error_demo(int int_ex) throws GError {\n  if (int_ex != 1) {\n    throw new GError(\"TEST MESSAGE\");\n  }\n}\nvoid error_demo2() {\n  try {\n    error_demo(0);\n  } catch (GError ge) {\n    stdout.printf(\"%s\\n\", ge.message);\n  }\n}\n\n// Main Loop\n\nvoid main() {\n\n  var main_loop = new MainLoop();\n  var time = new TimeoutSource(2000);\n\n  time.set_callback(() => { // Executes the following lambda after 2000ms\n      stdout.printf(\"2000ms have passed\\n\");\n      main_loop.quit();\n      return false;\n  });\n\n  time.attach(main_loop.get_context());\n\n  loop.run();\n}\n\n// Pointers (manual memory management)\n\nObject* pointer_obj = new Object(); // Creates Object instance and gives pointer\n\npointer_obj->some_method(); // Executes some_method\npointer_obj->some_data; // Returns some_data\n\ndelete pointer_obj;\n\nint more = 57;\nint* more_pointer = &more; // & = address-of\nint indirection_demo = more_pointer*; // indirection\n\n// Profiles: affect which Vala features are available and which libraries the\n// C-code will use.\n// - gobject (default)\n// posix\n// dova\n// Use \"--profile=whatever\" when compiling.\n```\n\n* More [Vala documentation](https://valadoc.org/).\n* [Alternate construction syntax](https://wiki.gnome.org/Projects/Vala/Tutorial#GObject-Style_Construction) similar to GObject\n* More on [contract programming](http://en.wikipedia.org/wiki/Contract_programming)\n* [Collections library](https://wiki.gnome.org/Projects/Vala/Tutorial#Collections)\n* [Multithreading](https://wiki.gnome.org/Projects/Vala/Tutorial#Multi-Threading)\n* Read about [building GUIs with GTK+ and Vala](http://archive.is/7C7bw).\n* [D-Bus integration](https://wiki.gnome.org/Projects/Vala/Tutorial#D-Bus_Integration)\n"
        },
        {
          "name": "vi",
          "type": "tree",
          "content": null
        },
        {
          "name": "vim.md",
          "type": "blob",
          "size": 9.9951171875,
          "content": "---\ncategory: tool\nname: Vim\ncontributors:\n    - [\"RadhikaG\", \"https://github.com/RadhikaG\"]\n    - [\"kaymmm\", \"https://github.com/kaymmm\"]\nfilename: LearnVim.txt\n---\n\n[Vim](http://www.vim.org)\n(Vi IMproved) is a clone of the popular vi editor for Unix. It is a text\neditor designed for speed and increased productivity, and is ubiquitous in most\nunix-based systems. It has numerous keybindings for speedy navigation to\nspecific points in the file, and for fast editing.\n\n`vimtutor` is a an excellent application that teaches you how to use `Vim`. It comes with the vim package during installation. You should be able to just run \"vimtutor\" on the command line to open this tutor. It will guide you through all the major features in `vim`.\n\n## Basics of navigating Vim\n\n```\n    vim <filename>    # Open <filename> in vim\n    :help <topic>     # Open up built-in help docs about <topic> if any exists\n    :q                # Quit vim\n    :w                # Save current file\n    :wq               # Save file and quit vim\n    ZZ                # Save file and quit vim\n    :q!               # Quit vim without saving file\n                      # ! *forces* :q to execute, hence quitting vim without saving\n    ZQ                # Quit vim without saving file\n    :x                # Save file(only when the file is modified) and quit vim\n\n    u                 # Undo\n    CTRL+R            # Redo\n\n    h                 # Move left one character\n    j                 # Move down one line\n    k                 # Move up one line\n    l                 # Move right one character\n\n    Ctrl+B            # Move back one full screen\n    Ctrl+F            # Move forward one full screen\n    Ctrl+D            # Move forward 1/2 a screen\n    Ctrl+U            # Move back 1/2 a screen\n\n    # Moving within the line\n\n    0                 # Move to beginning of line\n    $                 # Move to end of line\n    ^                 # Move to first non-blank character in line\n\n    # Searching in the text\n\n    /word             # Highlights all occurrences of word after cursor\n    ?word             # Highlights all occurrences of word before cursor\n    n                 # Moves cursor to next occurrence of word after search\n    N                 # Moves cursor to previous occurrence of word\n\n    :%s/foo/bar/g     # Change 'foo' to 'bar' on every line in the file\n    :s/foo/bar/g      # Change 'foo' to 'bar' on the current line\n    :%s/\\n/\\r/g       # Replace new line characters with new line characters\n    :'<,'>s/foo/bar/g # Change 'foo' to 'bar on every line in the current visual selection\n\n    # Jumping to characters\n\n    f<character>      # Jump forward and land on <character>\n    t<character>      # Jump forward and land right before <character>\n\n    # For example,\n    f<                # Jump forward and land on <\n    t<                # Jump forward and land right before <\n\n    # Moving by word\n\n    w                 # Move forward by one word\n    b                 # Move back by one word\n    e                 # Move to end of current word\n\n    # Other characters for moving around\n\n    gg                # Go to the top of the file\n    G                 # Go to the bottom of the file\n    :NUM              # Go to line number NUM (NUM is any number)\n    H                 # Move to the top of the screen\n    M                 # Move to the middle of the screen\n    L                 # Move to the bottom of the screen\n```\n\n## Help docs\n\nVim has built in help documentation that can accessed with `:help <topic>`.\nFor example `:help navigation` will pull up documentation about how to navigate\nyour workspace!\n\n`:help` can also be used without an option. This will bring up a default help dialog\nthat aims to make getting started with vim more approachable!\n\n## Modes\n\nVim is based on the concept on **modes**.\n\n- Normal Mode - vim starts up in this mode, used to navigate and write commands\n- Insert Mode - used to make changes in your file\n- Visual Mode - used to highlight text and do operations to them\n- Ex Mode     - used to drop down to the bottom with the ':' prompt to enter commands\n\n```\n    i                 # Puts vim into insert mode, before the cursor position\n    a                 # Puts vim into insert mode, after the cursor position\n    v                 # Puts vim into visual mode\n    :                 # Puts vim into ex mode\n    <esc>             # 'Escapes' from whichever mode you're in, into Normal mode\n\n    # Copying and pasting text\n                      # Operations use the vim register by default\n                      # Think of it as vim's private clipboard\n\n                      # Yank ~ copy text into vim register\n    y                 # Yank whatever is selected\n    yy                # Yank the current line\n\n                      # Delete ~ yank text and delete from file\n    d                 # Delete whatever is selected\n    dd                # Delete the current line\n\n    p                 # Paste text in vim register after the current cursor position\n    P                 # Paste text in vim register before the current cursor position\n\n    x                 # Delete character under current cursor position\n```\n\n## The 'Grammar' of vim\n\nVim can be thought of as a set of commands in a\n'Verb-Modifier-Noun' format, where:\n\n- Verb     - your action\n- Modifier - how you're doing your action\n- Noun     - the object on which your action acts on\n\nA few important examples of 'Verbs', 'Modifiers', and 'Nouns':\n\n```\n    # 'Verbs'\n\n    d                 # Delete\n    c                 # Change\n    y                 # Yank (copy)\n    v                 # Visually select\n\n    # 'Modifiers'\n\n    i                 # Inside\n    a                 # Around\n    NUM               # Number (NUM is any number)\n    f                 # Searches for something and lands on it\n    t                 # Searches for something and stops before it\n    /                 # Finds a string from cursor onwards\n    ?                 # Finds a string before cursor\n\n    # 'Nouns'\n\n    w                 # Word\n    s                 # Sentence\n    p                 # Paragraph\n    b                 # Block\n\n    # Sample 'sentences' or commands\n\n    d2w               # Delete 2 words\n    cis               # Change inside sentence\n    yip               # Yank inside paragraph (copy the para you're in)\n    ct<               # Change to open bracket\n                      # Change the text from where you are to the next open bracket\n    d$                # Delete till end of line\n```\n\n## Some shortcuts and tricks\n\n```\n    >                 # Indent selection by one block\n    <                 # Dedent selection by one block\n    :earlier 15m      # Reverts the document back to how it was 15 minutes ago\n    :later 15m        # Reverse above command\n    ddp               # Swap position of consecutive lines, dd then p\n    .                 # Repeat previous action\n    :w !sudo tee %    # Save the current file as root\n    :set syntax=c     # Set syntax highlighting to 'c'\n    :sort             # Sort all lines\n    :sort!            # Sort all lines in reverse\n    :sort u           # Sort all lines and remove duplicates\n    ~                 # Toggle letter case of selected text\n    u                 # Selected text to lower case\n    U                 # Selected text to upper case\n    J                 # Join the current line with the next line\n\n    # Fold text\n    zf                # Create fold from selected text\n    zd                # Delete fold on the current line\n    zD                # Recursively delete nested or visually selected folds\n    zE                # Eliminate all folds in the window\n    zo                # Open current fold\n    zO                # Recursively open nested or visually selected folds\n    zc                # Close current fold\n    zC                # Recursively close nested or visually selected folds\n    zR                # Open all folds\n    zM                # Close all folds\n    za                # Toggle open/close current fold\n    zA                # Recursively toggle open/close nested fold\n    [z                # Move to the start of the current fold\n    ]z                # Move to the end of the current fold\n    zj                # Move to the start of the next fold\n    zk                # Move to the end of the previous fold\n```\n\n## Macros\n\nMacros are basically recordable actions.\nWhen you start recording a macro, it records **every** action and command\nyou use, until you stop recording. On invoking a macro, it applies the exact\nsame sequence of actions and commands again on the text selection.\n\n```\n    qa                # Start recording a macro named 'a'\n    q                 # Stop recording\n    @a                # Play back the macro\n```\n\n### Configuring ~/.vimrc\n\nThe .vimrc file can be used to configure Vim on startup.\n\nHere's a sample ~/.vimrc file:\n\n```vim\n\" Example ~/.vimrc\n\" 2015.10\n\n\" Required for vim to be iMproved\nset nocompatible\n\n\" Determines filetype from name to allow intelligent auto-indenting, etc.\nfiletype indent plugin on\n\n\" Enable syntax highlighting\nsyntax on\n\n\" Better command-line completion\nset wildmenu\n\n\" Use case insensitive search except when using capital letters\nset ignorecase\nset smartcase\n\n\" When opening a new line and no file-specific indenting is enabled,\n\" keep same indent as the line you're currently on\nset autoindent\n\n\" Display line numbers on the left\nset number\n\n\" Indentation options, change according to personal preference\n\n\" Number of visual spaces per TAB\nset tabstop=4\n\n\" Number of spaces in TAB when editing\nset softtabstop=4\n\n\" Number of spaces indented when reindent operations (>> and <<) are used\nset shiftwidth=4\n\n\" Convert TABs to spaces\nset expandtab\n\n\" Enable intelligent tabbing and spacing for indentation and alignment\nset smarttab\n```\n\n### References\n\n[Vim | Home](http://www.vim.org/index.php)\n\n`$ vimtutor`\n\n[A vim Tutorial and Primer](https://danielmiessler.com/study/vim/)\n\n[What are the dark corners of Vim your mom never told you about? (Stack Overflow thread)](http://stackoverflow.com/questions/726894/what-are-the-dark-corners-of-vim-your-mom-never-told-you-about)\n\n[Arch Linux Wiki](https://wiki.archlinux.org/index.php/Vim)\n"
        },
        {
          "name": "vimscript.md",
          "type": "blob",
          "size": 21.953125,
          "content": "---\nname: Vimscript\nfilename: learnvimscript.vim\ncontributors:\n    - [\"HiPhish\", \"http://hiphish.github.io/\"]\n---\n\n```vim\n\" ##############\n\"  Introduction\n\" ##############\n\"\n\" Vim script (also called VimL) is the subset of Vim's ex-commands which\n\" supplies a number of features one would expect from a scripting language,\n\" such as values, variables, functions or loops. Always keep in the back of\n\" your mind that a Vim script file is just a sequence of ex-commands. It is\n\" very common for a script to mix programming-language features and raw\n\" ex-commands.\n\"\n\" You can run Vim script directly by entering the commands in command-line mode\n\" (press `:` to enter command-line mode), or you can write them to a file\n\" (without the leading `:`) and source it in a running Vim instance (`:source\n\" path/to/file`). Some files are sourced automatically as part of your\n\" configuration (see |startup|). This guide assumes that you are familiar\n\" with ex-commands and will only cover the scripting. Help topics to the\n\" relevant manual sections are included.\n\"\n\" See |usr_41.txt| for the official introduction to Vim script. A comment is\n\" anything following an unmatched `\"` until the end of the line, and `|`\n\" separates instructions (what `;` does in most other languages). References to\n\" the manual as surrounded with `|`, such as |help.txt|.\n\n\" This is a comment\n\n\" The vertical line '|' (pipe) separates commands\necho 'Hello' | echo 'world!'\n\n\" Putting a comment after a command usually works\npwd                   \" Displays the current working directory\n\n\" Except for some commands it does not; use the command delimiter before the\n\" comment (echo assumes that the quotation mark begins a string)\necho 'Hello world!'  | \" Displays a message\n\n\" Line breaks can be escaped by placing a backslash as the first non-whitespace\n\" character on the *following* line. Only works in script files, not on the\n\" command line\necho \" Hello\n    \\ world \"\n\necho [1,\n    \\ 2]\n\necho {\n    \\ 'a': 1,\n    \\ 'b': 2\n\\}\n\n\n\" #######\n\"  Types\n\" #######\n\"\n\" For an overview of types see |E712|. For an overview of operators see\n\" |expression-syntax|\n\n\" Numbers (|expr-number|)\n\" #######\n\necho  123         | \" Decimal\necho  0b1111011   | \" Binary\necho  0173        | \" Octal\necho  0x7B        | \" Hexadecimal\necho  123.0       | \" Floating-point\necho  1.23e2      | \" Floating-point (scientific notation)\n\n\" Note that an *integer* number with a leading `0` is in octal notation. The\n\" usual arithmetic operations are supported.\n\necho  1 + 2       | \" Addition\necho  1 - 2       | \" Subtraction\necho  - 1         | \" Negation (unary minus)\necho  + 1         | \" Unary plus (does nothing really, but still legal)\necho  1 * 2       | \" Multiplication\necho  1 / 2       | \" Division\necho  1 % 2       | \" Modulo (remainder)\n\n\" Booleans (|Boolean|)\n\" ########\n\"\n\" The number 0 is false, every other number is true. Strings are implicitly\n\" converted to numbers (see below). There are two pre-defined semantic\n\" constants.\n\necho  v:true      | \" Evaluates to 1 or the string 'v:true'\necho  v:false     | \" Evaluates to 0 or the string 'v:false'\n\n\" Boolean values can result from comparison of two objects.\n\necho  x == y             | \" Equality by value\necho  x != y             | \" Inequality\necho  x >  y             | \" Greater than\necho  x >= y             | \" Greater than or equal\necho  x <  y             | \" Smaller than\necho  x <= y             | \" Smaller than or equal\necho  x is y             | \" Instance identity (lists and dictionaries)\necho  x isnot y          | \" Instance non-identity (lists and dictionaries)\n\n\" Strings are compared based on their alphanumerical ordering\n\" echo 'a' < 'b'. Case sensitivity depends on the setting of 'ignorecase'\n\"\n\" Explicit case-sensitivity is specified by appending '#' (match case) or '?'\n\" (ignore case) to the operator. Prefer explicitly case sensitivity when writing\n\" portable scripts.\n\necho  'a' <  'B'         | \" True or false depending on 'ignorecase'\necho  'a' <? 'B'         | \" True\necho  'a' <# 'B'         | \" False\n\n\" Regular expression matching\necho  \"hi\" =~  \"hello\"    | \" Regular expression match, uses 'ignorecase'\necho  \"hi\" =~# \"hello\"    | \" Regular expression match, case sensitive\necho  \"hi\" =~? \"hello\"    | \" Regular expression match, case insensitive\necho  \"hi\" !~  \"hello\"    | \" Regular expression unmatch, use 'ignorecase'\necho  \"hi\" !~# \"hello\"    | \" Regular expression unmatch, case sensitive\necho  \"hi\" !~? \"hello\"    | \" Regular expression unmatch, case insensitive\n\n\" Boolean operations are possible.\n\necho  v:true && v:false       | \" Logical AND\necho  v:true || v:false       | \" Logical OR\necho  ! v:true                | \" Logical NOT\necho  v:true ? 'yes' : 'no'   | \" Ternary operator\n\n\n\" Strings (|String|)\n\" #######\n\"\n\" An ordered zero-indexed sequence of bytes. The encoding of text into bytes\n\" depends on the option |'encoding'|.\n\n\" Literal constructors\necho  \"Hello world\\n\"   | \" The last two characters stand for newline\necho  'Hello world\\n'   | \" The last two characters are literal\necho  'Let''s go!'      | \" Two single quotes become one quote character\n\n\" Single-quote strings take all characters are literal, except two single\n\" quotes, which are taken to be a single quote in the string itself. See\n\" |expr-quote| for all possible escape sequences.\n\n\" String concatenation\n\" The .. operator is preferred, but only supported in since Vim 8.1.1114\necho  'Hello ' .  'world'  | \" String concatenation\necho  'Hello ' .. 'world'  | \" String concatenation (new variant)\n\n\" String indexing\necho  'Hello'[0]           | \" First byte\necho  'Hello'[1]           | \" Second byte\necho  'Hellö'[4]           | \" Returns a byte, not the character 'ö'\n\n\" Substrings (second index is inclusive)\necho  'Hello'[:]           | \" Copy of entire string\necho  'Hello'[1:3]         | \" Substring, second to fourth byte\necho  'Hello'[1:-2]        | \" Substring until second to last byte\necho  'Hello'[1:]          | \" Substring with starting index\necho  'Hello'[:2]          | \" Substring with ending index\necho  'Hello'[-2:]         | \" Substring relative to end of string\n\n\" A negative index is relative to the end of the string. See\n\" |string-functions| for all string-related functions.\n\n\" Lists (|List|)\n\" #####\n\"\n\" An ordered zero-indexed heterogeneous sequence of arbitrary Vim script\n\" objects.\n\n\" Literal constructor\necho  []                   | \" Empty list\necho  [1, 2, 'Hello']      | \" List with elements\necho  [1, 2, 'Hello', ]    | \" Trailing comma permitted\necho  [[1, 2], 'Hello']    | \" Lists can be nested arbitrarily\n\n\" List concatenation\necho  [1, 2] + [3, 4]      | \" Creates a new list\n\n\" List indexing, negative is relative to end of list (|list-index|)\necho  [1, 2, 3, 4][2]      | \" Third element\necho  [1, 2, 3, 4][-1]     | \" Last element\n\n\" List slicing (|sublist|)\necho  [1, 2, 3, 4][:]      | \" Shallow copy of entire list\necho  [1, 2, 3, 4][:2]     | \" Sublist until third item (inclusive)\necho  [1, 2, 3, 4][2:]     | \" Sublist from third item (inclusive)\necho  [1, 2, 3, 4][:-2]    | \" Sublist until second-to-last item (inclusive)\n\n\" All slicing operations create new lists. To modify a list in-place use list\n\" functions (|list-functions|) or assign directly to an item (see below about\n\" variables).\n\n\n\" Dictionaries (|Dictionary|)\n\" ############\n\"\n\" An unordered sequence of key-value pairs, keys are always strings (numbers\n\" are implicitly converted to strings).\n\n\" Dictionary literal\necho  {}                       | \" Empty dictionary\necho  {'a': 1, 'b': 2}         | \" Dictionary literal\necho  {'a': 1, 'b': 2, }       | \" Trailing comma permitted\necho  {'x': {'a': 1, 'b': 2}}  | \" Nested dictionary\n\n\" Indexing a dictionary\necho  {'a': 1, 'b': 2}['a']    | \" Literal index\necho  {'a': 1, 'b': 2}.a       | \" Syntactic sugar for simple keys\n\n\" See |dict-functions| for dictionary manipulation functions.\n\n\n\" Funcref (|Funcref|)\n\" #######\n\"\n\" Reference to a function, uses the function name as a string for construction.\n\" When stored in a variable the name of the variable has the same restrictions\n\" as a function name (see below).\n\necho  function('type')                   | \" Reference to function type()\n\" Note that `funcref('type')` will throw an error because the argument must be\n\" a user-defined function; see further below for defining your own functions.\necho  funcref('type')                    | \" Reference by identity, not name\n\" A lambda (|lambda|) is an anonymous function; it can only contain one\n\" expression in its body, which is also its implicit return value.\necho  {x -> x * x}                       | \" Anonymous function\necho  function('substitute', ['hello'])  | \" Partial function\n\n\n\" Regular expression (|regular-expression|)\n\" ##################\n\"\n\" A regular expression pattern is generally a string, but in some cases you can\n\" also use a regular expression between a pair of delimiters (usually `/`, but\n\" you can choose anything).\n\n\" Substitute 'hello' for 'Hello'\nsubstitute/hello/Hello/\n\n\n\" ###########################\n\"  Implicit type conversions\n\" ###########################\n\"\n\" Strings are converted to numbers, and numbers to strings when necessary. A\n\" number becomes its decimal notation as a string. A string becomes its\n\" numerical value if it can be parsed to a number, otherwise it becomes zero.\n\necho  \"1\" + 1         | \" Number\necho  \"1\" .. 1        | \" String\necho  \"0xA\" + 1       | \" Number\n\n\" Strings are treated like numbers when used as booleans\necho \"true\" ? 1 : 0   | \" This string is parsed to 0, which is false\n\n\" ###########\n\"  Variables\n\" ###########\n\"\n\" Variables are bound within a scope; if no scope is provided a default is\n\" chosen by Vim. Use `:let` and `:const` to bind a value and `:unlet` to unbind\n\" it.\n\nlet b:my_var = 1        | \" Local to current buffer\nlet w:my_var = 1        | \" Local to current window\nlet t:my_var = 1        | \" Local to current tab page\nlet g:my_var = 1        | \" Global variable\nlet l:my_var = 1        | \" Local to current function (see functions below)\nlet s:my_var = 1        | \" Local to current script file\nlet a:my_arg = 1        | \" Function argument (see functions below)\n\n\" The Vim scope is read-only\necho  v:true            | \" Special built-in Vim variables (|v:var|)\n\n\" Access special Vim memory like variables\nlet @a = 'Hello'        | \" Register\nlet $PATH=''            | \" Environment variable\nlet &textwidth = 79     | \" Option\nlet &l:textwidth = 79   | \" Local option\nlet &g:textwidth = 79   | \" Global option\n\n\" Access scopes as dictionaries (can be modified like all dictionaries)\n\" See the |dict-functions|, especially |get()|, for access and manipulation\necho  b:                | \" All buffer variables\necho  w:                | \" All window variables\necho  t:                | \" All tab page variables\necho  g:                | \" All global variables\necho  l:                | \" All local variables\necho  s:                | \" All script variables\necho  a:                | \" All function arguments\necho  v:                | \" All Vim variables\n\n\" Constant variables\nconst x = 10            | \" See |:const|, |:lockvar|\n\n\" Function reference variables have the same restrictions as function names\nlet IsString = {x -> type(x) == type('')}    | \" Global: capital letter\nlet s:isNumber = {x -> type(x) == type(0)}   | \" Local: any name allowed\n\n\" When omitted the scope `g:` is implied, except in functions, there `l:` is\n\" implied.\n\n\n\" Multiple value binding (list unpacking)\n\" #######################################\n\"\n\" Assign values of list to multiple variables (number of items must match)\nlet [x, y] = [1, 2]\n\n\" Assign the remainder to a rest variable (note the semicolon)\nlet [mother, father; children] = ['Alice', 'Bob', 'Carol', 'Dennis', 'Emily']\n\n\n\" ##############\n\"  Flow control\n\" ##############\n\n\" Conditional (|:if|, |:elseif|, |:else|, |:endif|)\n\" ###########\n\"\n\" Conditions are set between `if` and `endif`. They can be nested.\n\nlet condition = v:true\n\nif condition\n    echo 'First condition'\nelseif another_condition\n    echo 'Second condition'\nelse\n    echo 'Fail'\nendif\n\n\" Loops (|:for|, |:endfor|, |:while|, |:endwhile|, |:break|, |:continue|)\n\" #####\n\"\n\" Two types of loops: `:for` and `:while`. Use `:continue` to skip to the next\n\" iteration, `:break` to break out of the loop.\n\n\" For-loop (|:for|, |:endfor|)\n\" ========\n\"\n\" For-loops iterate over lists and nothing else. If you want to iterate over\n\" another sequence you need to use a function which will create a list.\n\n\" Iterate over a list\nfor person in ['Alice', 'Bob', 'Carol', 'Dennis', 'Emily']\n    echo 'Hello ' .. person\nendfor\n\n\" Iterate over a nested list by unpacking it\nfor [x, y] in [[1, 0], [0, 1], [-1, 0], [0, -1]]\n    echo 'Position: x ='  .. x .. ', y = ' .. y\nendfor\n\n\" Iterate over a range of numbers\nfor i in range(10, 0, -1)  \" Count down from 10\n    echo 'T minus'  .. i\nendfor\n\n\" Iterate over the keys of a dictionary\nfor symbol in keys({'π': 3.14, 'e': 2.71})\n    echo 'The constant ' .. symbol .. ' is a transcendent number'\nendfor\n\n\" Iterate over the values of a dictionary\nfor value in values({'π': 3.14, 'e': 2.71})\n    echo 'The value ' .. value .. ' approximates a transcendent number'\nendfor\n\n\" Iterate over the keys and values of a dictionary\nfor [symbol, value] in items({'π': 3.14, 'e': 2.71})\n    echo 'The number ' .. symbol .. ' is approximately ' .. value\nendfor\n\n\" While-loops (|:while|, |:endwhile|)\n\nlet there_yet = v:true\nwhile !there_yet\n    echo 'Are we there yet?'\nendwhile\n\n\n\" Exception handling (|exception-handling|)\n\" ##################\n\"\n\" Throw new exceptions as strings, catch them by pattern-matching a regular\n\" expression against the string\n\n\" Throw new exception\nthrow \"Wrong arguments\"\n\n\" Guard against an exception (the second catch matches any exception)\ntry\n    source path/to/file\ncatch /Cannot open/\n    echo 'Looks like that file does not exist'\ncatch /.*/\n    echo 'Something went wrong, but I do not know what'\nfinally\n    echo 'I am done trying'\nendtry\n\n\n\" ##########\n\"  Functions\n\" ##########\n\n\" Defining functions (|:function|, |:endfunction|)\n\" ##################\n\n\" Unscoped function names have to start with a capital letter\nfunction! AddNumbersLoudly(x, y)\n    \" Use a: scope to access arguments\n    echo 'Adding'  .. a:x ..  'and'  .. a:y   | \" A side effect\n    return a:x + a:y                          | \" A return value\nendfunction\n\n\" Scoped function names may start with a lower-case letter\nfunction! s:addNumbersLoudly(x, y)\n    echo 'Adding'  .. a:x ..  'and'  .. a:y\n    return a:x + a:y\nendfunction\n\n\" Without the exclamation mark it would be an error to re-define a function,\n\" with the exclamation mark the new definition can replace the old one. Since\n\" Vim script files can be reloaded several times over the course of a session\n\" it is best to use the exclamation mark unless you really know what you are\n\" doing.\n\n\" Function definitions can have special qualifiers following the argument list.\n\n\" Range functions define two implicit arguments, which will be set to the range\n\" of the ex-command\nfunction! FirstAndLastLine() range\n    echo [a:firstline, a:lastline]\nendfunction\n\n\" Prints the first and last line that match a pattern (|cmdline-ranges|)\n/^#!/,/!#$/call FirstAndLastLine()\n\n\" Aborting functions, abort once error occurs (|:func-abort|)\nfunction! SourceMyFile() abort\n    source my-file.vim        | \" Try sourcing non-existing file\n    echo 'This will never be printed'\nendfunction\n\n\" Closures, functions carrying values from outer scope (|:func-closure|)\nfunction! MakeAdder(x)\n    function! Adder(n) closure\n        return a:n + a:x\n    endfunction\n    return funcref('Adder')\nendfunction\nlet AddFive = MakeAdder(5)\necho AddFive(3)               | \" Prints 8\n\n\" Dictionary functions, poor man's OOP methods (|Dictionary-function|)\nfunction! Mylen() dict\n    return len(self.data)     | \" Implicit variable self\nendfunction\nlet mydict = {'data': [0, 1, 2, 3], 'len': function(\"Mylen\")}\necho mydict.len()\n\n\" Alternatively, more concise\nlet mydict = {'data': [0, 1, 2, 3]}\nfunction! mydict.len()\n    return len(self.data)\nendfunction\n\n\" Calling functions (|:call|)\n\" #################\n\n\" Call a function for its return value, and possibly for its side effects\nlet animals = keys({'cow': 'moo', 'dog': 'woof', 'cat': 'meow'})\n\n\" Call a function for its side effects only, ignore potential return value\ncall sign_undefine()\n\n\" The call() function calls a function reference and passes parameters as a\n\" list, and returns the function's result.\necho  call(function('get'), [{'a': 1, 'b': 2}, 'c', 3])   | \" Prints 3\n\n\" Recall that Vim script is embedded within the ex-commands, that is why we\n\" cannot just call a function directly, we have to use the `:call` ex-command.\n\n\" Function namespaces (|write-library-script|, |autoload|)\n\" ###################\n\n\" Must be defined in autoload/foo/bar.vim\n\" Namspaced function names do not have to start with a capital letter\nfunction! foo#bar#log(value)\n    echomsg value\nendfunction\n\ncall foo#bar#log('Hello')\n\n\n\" #############################\n\"  Frequently used ex-commands\n\" #############################\n\n\n\" Sourcing runtime files (|'runtimepath'|)\n\" ######################\n\n\" Source first match among runtime paths\nruntime plugin/my-plugin.vim\n\n\n\" Defining new ex-commands (|40.2|, |:command|)\n\" ########################\n\n\" First argument here is the name of the command, rest is the command body\ncommand! SwapAdjacentLines normal! ddp\n\n\" The exclamation mark works the same as with `:function`. User-defined\n\" commands must start with a capital letter. The `:command` command can take a\n\" number of attributes (some of which have their own parameters with `=`), such\n\" as `-nargs`, all of them start with a dash to set them apart from the command\n\" name.\n\ncommand! -nargs=1 Error echoerr <args>\n\n\n\" Defining auto-commands (|40.3|, |autocmd|, |autocommand-events|)\n\" ######################\n\n\" The arguments are \"events\", \"patterns\", rest is \"commands\"\nautocmd BufWritePost $MYVIMRC source $MYVIMRC\n\n\" Events and patterns are separated by commas with no space between. See\n\" |autocmd-events| for standard events, |User| for custom events. Everything\n\" else are the ex-commands which will be executed.\n\n\" Auto groups\n\" ===========\n\"\n\" When a file is sourced multiple times the auto-commands are defined anew,\n\" without deleting the old ones, causing auto-commands to pile up over time.\n\" Use auto-groups and the following ritual to guard against this.\n\naugroup auto-source   | \" The name of the group is arbitrary\n    autocmd!          | \" Deletes all auto-commands in the current group\n    autocmd BufWritePost $MYVIMRC source $MYVIMRC\naugroup END           | \" Switch back to default auto-group\n\n\" It is also possible to assign a group directly. This is useful if the\n\" definition of the group is in one script and the definition of the\n\" auto-command is in another script.\n\n\" In one file\naugroup auto-source\n    autocmd!\naugroup END\n\n\" In another file\nautocmd auto-source BufWritePost $MYVIMRC source $MYVIMRC\n\n\" Executing (run-time macros of sorts)\n\" ####################################\n\n\" Sometimes we need to construct an ex-command where part of the command is not\n\" known until runtime.\n\nlet line = 3                | \" Line number determined at runtime\nexecute line .. 'delete'    | \" Delete a line\n\n\" Executing normal-mode commands\n\" ##############################\n\"\n\" Use `:normal` to play back a sequence of normal mode commands from the\n\" command-line. Add an exclamation mark to ignore user mappings.\n\nnormal! ggddGp             | \" Transplant first line to end of buffer\n\n\" Window commands can be used with :normal, or with :wincmd if :normal would\n\" not work\nwincmd L                   | \" Move current window all the way to the right\n\n\n\" ###########################\n\"  Frequently used functions\n\" ###########################\n\n\" Feature check\necho  has('nvim')                  | \" Running Neovim\necho  has('python3')               | \" Support for Python 3 plugins\necho  has('unix')                  | \" Running on a Unix system\necho  has('win32')                 | \" Running on a Windows system\n\n\n\" Test if something exists\necho  exists('&mouse')             | \" Option (exists only)\necho  exists('+mouse')             | \" Option (exists and works)\necho  exists('$HOSTNAME')          | \" Environment variable\necho  exists('*strftime')          | \" Built-in function\necho  exists('**s:MyFunc')         | \" User-defined function\necho  exists('bufcount')           | \" Variable (scope optional)\necho  exists('my_dict[\"foo\"]')     | \" Variable (dictionary entry)\necho  exists('my_dict[\"foo\"]')     | \" Variable (dictionary entry)\necho  exists(':Make')              | \" Command\necho  exists(\"#CursorHold\")        | \" Auto-command defined for event\necho  exists(\"#BufReadPre#*.gz\")   | \" Event and pattern\necho  exists(\"#filetypeindent\")    | \" Auto-command group\necho  exists(\"##ColorScheme\")      | \" Auto-command supported for event\n\n\" Various dynamic values (see |expand()|)\necho  expand('%')                  | \" Current file name\necho  expand('<cword>')            | \" Current word under cursor\necho  expand('%:p')                | \" Modifier are possible\n\n\" Type tests\n\" There are unique constants defined for the following types. Older versions\n\" of Vim lack the type variables, see the reference \" documentation for a\n\" workaround\necho  type(my_var) == v:t_number      | \" Number\necho  type(my_var) == v:t_string      | \" String\necho  type(my_var) == v:t_func        | \" Funcref\necho  type(my_var) == v:t_list        | \" List\necho  type(my_var) == v:t_dict        | \" Dictionary\necho  type(my_var) == v:t_float       | \" Float\necho  type(my_var) == v:t_bool        | \" Explicit Boolean\n\" For the null object should compare it against itself\necho  my_var is v:null\n\n\" Format strings\necho  printf('%d in hexadecimal is %X', 123, 123)\n\n\n\" #####################\n\"  Tricks of the trade\n\" #####################\n\n\" Source guard\n\" ############\n\n\" Prevent a file from being sourced multiple times; users can set the variable\n\" in their configuration to prevent the plugin from loading at all.\nif exists('g:loaded_my_plugin')\n    finish\nendif\nlet g:loaded_my_plugin = v:true\n\n\" Default values\n\" ##############\n\n\" Get a default value: if the user defines a variable use it, otherwise use a\n\" hard-coded default. Uses the fact that a scope is also a dictionary.\nlet s:greeting = get(g:, 'my_plugin_greeting', 'Hello')\n```\n"
        },
        {
          "name": "visualbasic.md",
          "type": "blob",
          "size": 11.2109375,
          "content": "---\nname: Visual Basic\ncontributors:\n    - [\"Brian Martin\", \"http://brianmartin.biz\"]\nfilename: learnvisualbasic.vb\n---\n\n```vbnet\nModule Module1\n\n    Sub Main()\n        'A Quick Overview of Visual Basic Console Applications before we dive\n        'in to the deep end.\n        'Apostrophe starts comments.\n        'To Navigate this tutorial within the Visual Basic Compiler, I've put\n        'together a navigation system.\n        'This navigation system is explained however as we go deeper into this\n        'tutorial, you'll understand what it all means.\n        Console.Title = (\"Learn X in Y Minutes\")\n        Console.WriteLine(\"NAVIGATION\") 'Display\n        Console.WriteLine(\"\")\n        Console.ForegroundColor = ConsoleColor.Green\n        Console.WriteLine(\"1. Hello World Output\")\n        Console.WriteLine(\"2. Hello World Input\")\n        Console.WriteLine(\"3. Calculating Whole Numbers\")\n        Console.WriteLine(\"4. Calculating Decimal Numbers\")\n        Console.WriteLine(\"5. Working Calculator\")\n        Console.WriteLine(\"6. Using Do While Loops\")\n        Console.WriteLine(\"7. Using For While Loops\")\n        Console.WriteLine(\"8. Conditional Statements\")\n        Console.WriteLine(\"9. Select A Drink\")\n        Console.WriteLine(\"50. About\")\n        Console.WriteLine(\"Please Choose A Number From The Above List\")\n        Dim selection As String = Console.ReadLine\n        'The \"Case\" in the Select statement is optional.\n        'For example, \"Select selection\" instead of \"Select Case selection\"\n        'will also work.\n        Select Case selection\n            Case \"1\" 'HelloWorld Output\n                Console.Clear() 'Clears the application and opens the private sub\n                HelloWorldOutput() 'Name Private Sub, Opens Private Sub\n            Case \"2\" 'Hello Input\n                Console.Clear()\n                HelloWorldInput()\n            Case \"3\" 'Calculating Whole Numbers\n                Console.Clear()\n                CalculatingWholeNumbers()\n            Case \"4\" 'Calculating Decimal Numbers\n                Console.Clear()\n                CalculatingDecimalNumbers()\n            Case \"5\" 'Working Calculator\n                Console.Clear()\n                WorkingCalculator()\n            Case \"6\" 'Using Do While Loops\n                Console.Clear()\n                UsingDoWhileLoops()\n            Case \"7\" 'Using For While Loops\n                Console.Clear()\n                UsingForLoops()\n            Case \"8\" 'Conditional Statements\n                Console.Clear()\n                ConditionalStatement()\n            Case \"9\" 'If/Else Statement\n                Console.Clear()\n                IfElseStatement() 'Select a drink\n            Case \"50\" 'About msg box\n                Console.Clear()\n                Console.Title = (\"Learn X in Y Minutes :: About\")\n                MsgBox(\"This tutorial is by Brian Martin (@BrianMartinn\")\n                Console.Clear()\n                Main()\n                Console.ReadLine()\n\n        End Select\n    End Sub\n\n    'One - I'm using numbers to help with the above navigation when I come back\n    'later to build it.\n\n    'We use private subs to separate different sections of the program.\n    Private Sub HelloWorldOutput()\n        'Title of Console Application\n        Console.Title = \"Hello World Output | Learn X in Y Minutes\"\n        'Use Console.Write(\"\") or Console.WriteLine(\"\") to print outputs.\n        'Followed by Console.Read() alternatively Console.Readline()\n        'Console.ReadLine() prints the output to the console.\n        Console.WriteLine(\"Hello World\")\n        Console.ReadLine()\n    End Sub\n\n    'Two\n    Private Sub HelloWorldInput()\n        Console.Title = \"Hello World YourName | Learn X in Y Minutes\"\n        'Variables\n        'Data entered by a user needs to be stored.\n        'Variables also start with a Dim and end with an As VariableType.\n\n        'In this tutorial, we want to know what your name, and make the program\n        'respond to what is said.\n        Dim username As String\n        'We use string as string is a text based variable.\n        Console.WriteLine(\"Hello, What is your name? \") 'Ask the user their name.\n        username = Console.ReadLine() 'Stores the users name.\n        Console.WriteLine(\"Hello \" + username) 'Output is Hello 'Their name'\n        Console.ReadLine() 'Pauses the execution for user to read \n       \n        'The above will ask you a question followed by printing your answer.\n        'Other variables include Integer and we use Integer for whole numbers.\n    End Sub\n\n    'Three\n    Private Sub CalculatingWholeNumbers()\n        Console.Title = \"Calculating Whole Numbers | Learn X in Y Minutes\"\n        Console.Write(\"First number: \") 'Enter a whole number, 1, 2, 50, 104, etc\n        Dim a As Integer = Console.ReadLine()\n        Console.Write(\"Second number: \") 'Enter second whole number.\n        Dim b As Integer = Console.ReadLine()\n        Dim c As Integer = a + b\n        Console.WriteLine(c)\n        Console.ReadLine()\n        'The above is a simple calculator\n    End Sub\n\n    'Four\n    Private Sub CalculatingDecimalNumbers()\n        Console.Title = \"Calculating with Double | Learn X in Y Minutes\"\n        'Of course we would like to be able to add up decimals.\n        'Therefore we could change the above from Integer to Double.\n\n        'Enter a floating-point number, 1.2, 2.4, 50.1, 104.9, etc\n        Console.Write(\"First number: \")\n        Dim a As Double = Console.ReadLine\n        Console.Write(\"Second number: \") 'Enter second floating-point number.\n        Dim b As Double = Console.ReadLine\n        Dim c As Double = a + b\n        Console.WriteLine(c)\n        Console.ReadLine()\n        'Therefore the above program can add up 1.1 - 2.2\n    End Sub\n\n    'Five\n    Private Sub WorkingCalculator()\n        Console.Title = \"The Working Calculator | Learn X in Y Minutes\"\n        'However if you'd like the calculator to subtract, divide, multiple and\n        'add up.\n        'Copy and paste the above again.\n        Console.Write(\"First number: \")\n        Dim a As Double = Console.ReadLine\n        Console.Write(\"Second number: \") 'Enter second floating-point number.\n        Dim b As Double = Console.ReadLine\n        Dim c As Double = a + b\n        Dim d As Double = a * b\n        Dim e As Double = a - b\n        Dim f As Double = a / b\n\n        'By adding the below lines we are able to calculate the subtract,\n        'multiply as well as divide the a and b values\n        Console.Write(a.ToString() + \" + \" + b.ToString())\n        'We want to pad the answers to the left by 3 spaces.\n        Console.WriteLine(\" = \" + c.ToString.PadLeft(3))\n        Console.Write(a.ToString() + \" * \" + b.ToString())\n        Console.WriteLine(\" = \" + d.ToString.PadLeft(3))\n        Console.Write(a.ToString() + \" - \" + b.ToString())\n        Console.WriteLine(\" = \" + e.ToString.PadLeft(3))\n        Console.Write(a.ToString() + \" / \" + b.ToString())\n        Console.WriteLine(\" = \" + f.ToString.PadLeft(3))\n        Console.ReadLine()\n\n    End Sub\n\n    'Six\n    Private Sub UsingDoWhileLoops()\n        'Just as the previous private sub\n        'This Time We Ask If The User Wishes To Continue (Yes or No?)\n        'We're using Do While Loop as we're unsure if the user wants to use the\n        'program more than once.\n        Console.Title = \"UsingDoWhileLoops | Learn X in Y Minutes\"\n        Dim answer As String 'We use the variable \"String\" as the answer is text\n        Do 'We start the program with\n            Console.Write(\"First number: \")\n            Dim a As Double = Console.ReadLine\n            Console.Write(\"Second number: \")\n            Dim b As Double = Console.ReadLine\n            Dim c As Double = a + b\n            Dim d As Double = a * b\n            Dim e As Double = a - b\n            Dim f As Double = a / b\n\n            Console.Write(a.ToString() + \" + \" + b.ToString())\n            Console.WriteLine(\" = \" + c.ToString.PadLeft(3))\n            Console.Write(a.ToString() + \" * \" + b.ToString())\n            Console.WriteLine(\" = \" + d.ToString.PadLeft(3))\n            Console.Write(a.ToString() + \" - \" + b.ToString())\n            Console.WriteLine(\" = \" + e.ToString.PadLeft(3))\n            Console.Write(a.ToString() + \" / \" + b.ToString())\n            Console.WriteLine(\" = \" + f.ToString.PadLeft(3))\n            Console.ReadLine()\n            'Ask the question, does the user wish to continue? Unfortunately it\n            'is case sensitive.\n            Console.Write(\"Would you like to continue? (yes / no) \")\n            'The program grabs the variable and prints and starts again.\n            answer = Console.ReadLine\n            'The command for the variable to work would be in this case \"yes\"\n        Loop While answer = \"yes\"\n\n    End Sub\n\n    'Seven\n    Private Sub UsingForLoops()\n        'Sometimes the program only needs to run once.\n        'In this program we'll be counting down from 10.\n\n        Console.Title = \"Using For Loops | Learn X in Y Minutes\"\n        'Declare Variable and what number it should count down in Step -1,\n        'Step -2, Step -3, etc.\n        For i As Integer = 10 To 0 Step -1\n            Console.WriteLine(i.ToString) 'Print the value of the counter\n        Next i 'Calculate new value\n        Console.WriteLine(\"Start\") 'Lets start the program baby!!\n        Console.ReadLine() 'POW!! - Perhaps I got a little excited then :)\n    End Sub\n\n    'Eight\n    Private Sub ConditionalStatement()\n        Console.Title = \"Conditional Statements | Learn X in Y Minutes\"\n        Dim userName As String\n        Console.WriteLine(\"Hello, What is your name? \") 'Ask the user their name.\n        userName = Console.ReadLine() 'Stores the users name.\n        If userName = \"Adam\" Then\n            Console.WriteLine(\"Hello Adam\")\n            Console.WriteLine(\"Thanks for creating this useful site\")\n            Console.ReadLine()\n        Else\n            Console.WriteLine(\"Hello \" + userName)\n            Console.WriteLine(\"Have you checked out www.learnxinyminutes.com\")\n            Console.ReadLine() 'Ends and prints the above statement.\n        End If\n    End Sub\n\n    'Nine\n    Private Sub IfElseStatement()\n        Console.Title = \"If / Else Statement | Learn X in Y Minutes\"\n        'Sometimes it is important to consider more than two alternatives.\n        'Sometimes there are a good few others.\n        'When this is the case, more than one if statement would be required.\n        'An if statement is great for vending machines. Where the user enters a code.\n        'A1, A2, A3, etc to select an item.\n        'All choices can be combined into a single if block.\n\n        Dim selection As String 'Declare a variable for selection\n        Console.WriteLine(\"Please select a product form our lovely vending machine.\")\n        Console.WriteLine(\"A1. for 7Up\")\n        Console.WriteLine(\"A2. for Fanta\")\n        Console.WriteLine(\"A3. for Dr. Pepper\")\n        Console.WriteLine(\"A4. for Diet Coke\")\n\n        selection = Console.ReadLine() 'Store a selection from the user\n        If selection = \"A1\" Then\n            Console.WriteLine(\"7up\")\n        ElseIf selection = \"A2\" Then\n            Console.WriteLine(\"fanta\")\n        ElseIf selection = \"A3\" Then\n            Console.WriteLine(\"dr. pepper\")\n        ElseIf selection = \"A4\" Then\n            Console.WriteLine(\"diet coke\")\n        Else\n            Console.WriteLine(\"Sorry, I don't have any \" + selection)\n        End If\n        Console.ReadLine()\n\n    End Sub\n\nEnd Module\n```\n"
        },
        {
          "name": "wasm.md",
          "type": "blob",
          "size": 9.60546875,
          "content": "---\nname: WebAssembly\nfilename: learn-wasm.wast\ncontributors:\n    - [\"Dean Shaff\", \"http://dean-shaff.github.io\"]\n---\n\n```wast\n;; learn-wasm.wast\n\n(module\n  ;; In WebAssembly, everything is included in a module. Moreover, everything\n  ;; can be expressed as an s-expression. Alternatively, there is the\n  ;; \"stack machine\" syntax, but that is not compatible with Binaryen\n  ;; intermediate representation (IR) syntax.\n\n  ;; The Binaryen IR format is *mostly* compatible with WebAssembly text format.\n  ;; There are some small differences:\n  ;; local_set -> local.set\n  ;; local_get -> local.get\n\n  ;; We have to enclose code in functions\n\n  ;; Data Types\n  (func $data_types\n    ;; WebAssembly has only four types:\n    ;; i32 - 32 bit integer\n    ;; i64 - 64 bit integer (not supported in JavaScript)\n    ;; f32 - 32 bit floating point\n    ;; f64 - 64 bit floating point\n\n    ;; We can declare local variables with the \"local\" keyword\n    ;; We have to declare all variables before we start doing anything\n    ;; inside the function\n\n    (local $int_32 i32)\n    (local $int_64 i64)\n    (local $float_32 f32)\n    (local $float_64 f64)\n\n    ;; These values remain uninitialized.\n    ;; To set them to a value, we can use <type>.const:\n\n    (local.set $int_32 (i32.const 16))\n    (local.set $int_64 (i64.const 128))\n    (local.set $float_32 (f32.const 3.14))\n    (local.set $float_64 (f64.const 1.28))\n  )\n\n  ;; Basic operations\n  (func $basic_operations\n\n    ;; In WebAssembly, everything is an s-expression, including\n    ;; doing math, or getting the value of some variable\n\n    (local $add_result i32)\n    (local $mult_result f64)\n\n    (local.set $add_result (i32.add (i32.const 2) (i32.const 4)))\n    ;; the value of add_result is now 6!\n\n    ;; We have to use the right data type for each operation:\n    ;; (local.set $mult_result (f32.mul (f32.const 2.0) (f32.const 4.0))) ;; WRONG! mult_result is f64!\n    (local.set $mult_result (f64.mul (f64.const 2.0) (f64.const 4.0)))\n\n    ;; WebAssembly has some builtin operations, like basic math and bitshifting.\n    ;; Notably, it does not have built in trigonometric functions.\n    ;; In order to get access to these functions, we have to either\n    ;; - implement them ourselves (not recommended)\n    ;; - import them from elsewhere (later on)\n  )\n\n  ;; Functions\n  ;; We specify arguments with the `param` keyword, and specify return values\n  ;; with the `result` keyword\n  ;; The current value on the stack is the return value of a function\n\n  ;; We can call other functions we've defined with the `call` keyword\n\n  (func $get_16 (result i32)\n    (i32.const 16)\n  )\n\n  (func $add (param $param0 i32) (param $param1 i32) (result i32)\n    (i32.add\n      (local.get $param0)\n      (local.get $param1)\n    )\n  )\n\n  (func $double_16 (result i32)\n    (i32.mul\n      (i32.const 2)\n      (call $get_16))\n  )\n\n  ;; Up until now, we haven't be able to print anything out, nor do we have\n  ;; access to higher level math functions (pow, exp, or trig functions).\n  ;; Moreover, we haven't been able to use any of the WASM functions in JavaScript!\n  ;; The way we get those functions into WebAssembly\n  ;; looks different whether we're in a Node.js or browser environment.\n\n  ;; If we're in Node.js we have to do two steps. First we have to convert the\n  ;; WASM text representation into actual webassembly. If we're using Binyaren,\n  ;; we can do that with a command like the following:\n\n  ;; wasm-as learn-wasm.wast -o learn-wasm.wasm\n\n  ;; We can apply Binaryen optimizations to that file with a command like the\n  ;; following:\n\n  ;; wasm-opt learn-wasm.wasm -o learn-wasm.opt.wasm -O3 --rse\n\n  ;; With our compiled WebAssembly, we can now load it into Node.js:\n  ;; const fs = require('fs')\n  ;; const instantiate = async function (inFilePath, _importObject) {\n  ;;  var importObject = {\n  ;;     console: {\n  ;;       log: (x) => console.log(x),\n  ;;     },\n  ;;     math: {\n  ;;       cos: (x) => Math.cos(x),\n  ;;     }\n  ;;   }\n  ;;  importObject = Object.assign(importObject, _importObject)\n  ;;\n  ;;  var buffer = fs.readFileSync(inFilePath)\n  ;;  var module = await WebAssembly.compile(buffer)\n  ;;  var instance = await WebAssembly.instantiate(module, importObject)\n  ;;  return instance.exports\n  ;; }\n  ;;\n  ;; const main = function () {\n  ;;   var wasmExports = await instantiate('learn-wasm.wasm')\n  ;;   wasmExports.print_args(1, 0)\n  ;; }\n\n  ;; The following snippet gets the functions from the importObject we defined\n  ;; in the JavaScript instantiate async function, and then exports a function\n  ;; \"print_args\" that we can call from Node.js\n\n  (import \"console\" \"log\" (func $print_i32 (param i32)))\n  (import \"math\" \"cos\" (func $cos (param f64) (result f64)))\n\n  (func $print_args (param $arg0 i32) (param $arg1 i32)\n    (call $print_i32 (local.get $arg0))\n    (call $print_i32 (local.get $arg1))\n  )\n  (export \"print_args\" (func $print_args))\n\n  ;; Loading in data from WebAssembly memory.\n  ;; Say that we want to apply the cosine function to a JavaScript array.\n  ;; We need to be able to access the allocated array, and iterate through it.\n  ;; This example will modify the input array inplace.\n  ;; f64.load and f64.store expect the location of a number in memory *in bytes*.\n  ;; If we want to access the 3rd element of an array, we have to pass something\n  ;; like (i32.mul (i32.const 8) (i32.const 2)) to the f64.store function.\n\n  ;; In JavaScript, we would call `apply_cos64` as follows\n  ;; (using the instantiate function from earlier):\n  ;;\n  ;; const main = function () {\n  ;;   var wasm = await instantiate('learn-wasm.wasm')\n  ;;   var n = 100\n  ;;   const memory = new Float64Array(wasm.memory.buffer, 0, n)\n  ;;   for (var i=0; i<n; i++) {\n  ;;     memory[i] = i;\n  ;;   }\n  ;;   wasm.apply_cos64(n)\n  ;; }\n  ;;\n  ;; This function will not work if we allocate a Float32Array on the JavaScript\n  ;; side.\n\n  (memory (export \"memory\") 100)\n\n  (func $apply_cos64 (param $array_length i32)\n    ;; declare the loop counter\n    (local $idx i32)\n    ;; declare the counter that will allow us to access memory\n    (local $idx_bytes i32)\n    ;; constant expressing the number of bytes in a f64 number.\n    (local $bytes_per_double i32)\n\n    ;; declare a variable for storing the value loaded from memory\n    (local $temp_f64 f64)\n\n    (local.set $idx (i32.const 0))\n    (local.set $idx_bytes (i32.const 0)) ;; not entirely necessary\n    (local.set $bytes_per_double (i32.const 8))\n\n    (block\n      (loop\n        ;; this sets idx_bytes to bytes offset of the value we're interested in.\n        (local.set $idx_bytes (i32.mul (local.get $idx) (local.get $bytes_per_double)))\n\n        ;; get the value of the array from memory:\n        (local.set $temp_f64 (f64.load (local.get $idx_bytes)))\n\n        ;; now apply the cosine function:\n        (local.set $temp_64 (call $cos (local.get $temp_64)))\n\n        ;; now store the result at the same location in memory:\n        (f64.store\n          (local.get $idx_bytes)\n          (local.get $temp_64))\n\n        ;; do it all in one step instead\n        (f64.store\n          (local.get $idx_bytes)\n          (call $cos\n            (f64.load\n              (local.get $idx_bytes))))\n\n        ;; increment the loop counter\n        (local.set $idx (i32.add (local.get $idx) (i32.const 1)))\n\n        ;; stop the loop if the loop counter is equal the array length\n        (br_if 1 (i32.eq (local.get $idx) (local.get $array_length)))\n        (br 0)\n      )\n    )\n  )\n  (export \"apply_cos64\" (func $apply_cos64))\n\n  ;; Wasm is a stack-based language, but for returning values more complicated\n  ;; than an int/float, a separate memory stack has to be manually managed. One\n  ;; approach is to use a mutable global to store the stack_ptr. We give\n  ;; ourselves 1MiB of memstack and grow it downwards.\n  ;;\n  ;; Below is a demonstration of how this C code **might** be written by hand\n  ;;\n  ;;   typedef struct {\n  ;;       int a;\n  ;;       int b;\n  ;;   } sum_struct_t;\n  ;;\n  ;;   sum_struct_t sum_struct_create(int a, int b) {\n  ;;     return (sum_struct_t){a, b};\n  ;;   }\n  ;;\n  ;;   int sum_local() {\n  ;;     sum_struct_t s = sum_struct_create(40, 2);\n  ;;     return s.a + s.b;\n  ;;   }\n\n  ;; Unlike C, we must manage our own memory stack. We reserve 1MiB\n  (global $memstack_ptr (mut i32) (i32.const 65536))\n\n  ;; Structs can only be returned by reference\n  (func $sum_struct_create \n        (param $sum_struct_ptr i32) \n        (param $var$a i32) \n        (param $var$b i32)\n    ;; c// sum_struct_ptr->a = a;\n    (i32.store\n      (get_local $sum_struct_ptr)\n      (get_local $var$a)\n    )\n\n    ;; c// sum_struct_ptr->b = b;\n    (i32.store offset=4\n      (get_local $sum_struct_ptr)\n      (get_local $var$b)\n    )\n  )\n\n  (func $sum_local (result i32)\n    (local $var$sum_struct$a i32)\n    (local $var$sum_struct$b i32)\n    (local $local_memstack_ptr i32)\n\n    ;; reserve memstack space\n    (i32.sub\n      (get_global $memstack_ptr)\n      (i32.const 8)\n    )\n    tee_local $local_memstack_ptr ;; tee both stores and returns given value\n    set_global $memstack_ptr\n\n    ;; call the function, storing the result in the memstack\n    (call $sum_struct_create\n      ((;$sum_struct_ptr=;) get_local $local_memstack_ptr)\n      ((;$var$a=;) i32.const 40)\n      ((;$var$b=;) i32.const 2)\n    )\n\n    ;; retrieve values from struct\n    (set_local $var$sum_struct$a\n      (i32.load offset=0 (get_local $local_memstack_ptr))\n    )\n    (set_local $var$sum_struct$b\n      (i32.load offset=4 (get_local $local_memstack_ptr))\n    )\n\n    ;; unreserve memstack space\n    (set_global $memstack_ptr\n        (i32.add\n          (get_local $local_memstack_ptr)\n          (i32.const 8)\n        )\n    )\n\n    (i32.add\n      (get_local $var$sum_struct$a)\n      (get_local $var$sum_struct$b)\n    )\n  )\n  (export \"sum_local\" (func $sum_local))\n)\n```\n"
        },
        {
          "name": "wikitext.md",
          "type": "blob",
          "size": 10.7666015625,
          "content": "---\nname: Wikitext\ncontributors:\n    - [\"Yuxi Liu\", \"https://github.com/yuxiliu1995/\"]\nfilename: wikitext.md\n---\n\nA wiki is an online collaboratively edited hypertext publication, the most famous of which is Wikipedia. Wikitext is the markup language used by wikis. Its syntax is similar to a mix of Markdown and HTML.\n\n## Syntax\n\n`<!--- comments are hidden when reading, but visible when editing --->`\n\n| wikitext | equivalent Markdown | effect |\n| ---- | ---- | ---- |\n| `''italics''` | `*italics*` | *italics* |\n| `'''bold'''` | `**bold**` | **bold** |\n| `'''''both'''''` | `***both***` | ***both*** |\n| `<u>underlined</u>` | `<u>underlined</u>` | <u>underlined</u> |\n| `<nowiki>do not render</nowiki>` | N/A | `do not render` |\n| `<code>inline code snippet</code>` | \\`inline code snippet\\` | `inline code snippet` |\n| `----` | `----` | horizontal linebreak |\n| `<s>strikethrough</s>` | `~~strikethrough~~` | ~~strikethrough~~ |\n\nSection headings are bracketed by `=`. They go from `= One equal sign =` to `====== Six equal signs ======`. They are equivalent to Markdown's hashtag headings, from `# One hashtag` to `###### Six hashtags`. Why six in both? I believe it's because HTML has six levels of headings, from `<h1>` to `<h6>`.\n\nNote that the `= One equal sign =` heading actually corresponds to the title of the page, and so cannot actually be used within a page. Consequently, the least number of equal signs is `== Two equal signs ==`.\n\nSubscripts and superscripts can be written as `x<sub>1</sub>` and `x<sup>1</sup>`. Alternatively they can be written by the `<math>` tag (see below). `<small>Small</small>` and `<big>big</big>` texts are rarely used.\n\n```wikitext\nColons allow indentation\n   :Each colon creates an indentation three characters wide.\n      ::and they can be nested.\n```\n\n`*` Unnumbered lists start with `*`, and numbered lists start with `#`. <br>\n&emsp; `**` Lists can be nested <br>\n&emsp; &emsp; `***` for arbitrarily many levels.\n\nThe syntax for tables is [very complicated](https://en.wikipedia.org/wiki/Help:Table). The simplest of the [simple tables](https://en.wikipedia.org/wiki/Help:Basic_table_markup) is as follows:\n\n```wikitext\n{| class=\"wikitable\"\n|+\n! column title A\n! column title B\n|-\n| cell A1\n| cell B1\n|-\n| cell A2\n| cell B2\n|-\n| ...\n| ...\n|}\n```\n\nwhich renders to\n\n| **column title A** | **column title B** |\n|---|---|\n| cell A1 | cell B1 |\n| cell A2 | cell B2 |\n\nBe warned that the newlines in a wikitext table are meaningful. Deleting a single newline above would completely change the shape of the rendered table.\n\nYou can insert images, audios, videos, or other forms of media by `[[File:Image.png|thumb|right|Image caption]]`. All media files must be hosted on [Wikimedia Commons](https://commons.wikimedia.org/wiki/Main_Page).\n\nYou can insert quotations either by HTML-like tag\n\n```wikitext\n<blockquote>\n<p>Quotation text.</p>\n<p>Name, source, reference</p>\n</blockquote>\n```\n\nor [template](#templates)\n\n```wikitext\n{{Quote|text=Quotation text.|title=Title|author=Author|source=Location in the publication}}\n```\n\nA \"[non-breaking space](https://en.wikipedia.org/wiki/Non-breaking_space)\" is a whitespace that should not be separated by linebreaks, such as the whitespace in \"400 km/h\". This is written as `400&amp;nbsp;km/h`.\n\nExtra whitespaces can be specified by `pad` tag. For example, `{{pad|4.0em}}` is a white space with length 4.0 [em-dashes](https://en.wikipedia.org/wiki/Dash#Em_dash).\n\nLonger code blocks can be done by\n\n```wikitext\n<syntaxhighlight lang=\"cpp\">\n#include <iostream>\nint m2 (int ax, char *p_ax) {\n  std::cout <<\"Hello World!\";\n  return 0;\n}</syntaxhighlight>\n```\n\nwhich renders to\n\n```cpp\n#include <iostream>\nint m2 (int ax, char *p_ax) {\n  std::cout <<\"Hello World!\";\n  return 0;\n}\n```\n\n## Linking\n\nBasic `[[linking]]` is done by double brackets.\n\nThe `|` symbol allows displaying a `[[Actual page title|different text]]`.\n\nThe `#` symbol allows linking to sections within a text, like `[[Frog#Locomotion]]` or `[[Frog#Locomotion|locomotion in frogs]]`.\n\nIf a word is interrupted by a link, it is \"blended\" into the link. For example, `[[copy edit]]ors` renders to [copy editors](https://en.wikipedia.org/wiki/copy_edit).\n\nTo suppress this behavior, use `<nowiki>`. For example, `[[micro-]]<nowiki />second` renders to [micro-](https://en.wikipedia.org/wiki/micro-)second.\n\nThere are three kinds of external linking. The third kind is preferred:\n\n| wikitext | renders to |\n|----|----|\n| `https://www.wikipedia.org` | [https://www.wikipedia.org](https://www.wikipedia.org) |\n| `[https://www.wikipedia.org]` | [[1]](https://www.wikipedia.org) |\n| `[https://www.wikipedia.org Wikipedia]` | [Wikipedia](https://www.wikipedia.org) |\n\n## Templates\n\nTemplates are macros for wikitext, and they look like `{{template name|attribute=value|...}}`. There are thousands of templates, but only a few are in common use.\n\nThe most (in)famous one is the \\[citation needed\\]`{{cn}}` template. Note that `{{cn}}` is synonymous with `{{citation needed}}`, as one template can have many names.\n\n`{{reflist}}` is usually put at the ends of pages, to generate a list of references used in the page.\n\nAn `infobox` template is, as it says, a template for a box containing information. Usually, each page contains at most two infoboxes, one on top and one on bottom. For particularly detailed pages, there can be more than two.\n\nThe infobox on the top is usually used to compactly display tabular information. They are common for biographies, geographical locations, and such. For example, the top infobox for [Euler](https://en.wikipedia.org/wiki/Leonhard_Euler) is:\n\n```wikitext\n{{Infobox scientist\n| name              = Leonhard Euler\n| image             = Leonhard Euler.jpg\n| caption           = Portrait by [[Jakob Emanuel Handmann]], 1753\n| birth_date        = {{birth date|df=y|1707|4|15}}\n| birth_place       = [[Basel]], [[Swiss&nbsp;Confederacy]]\n| death_date        = {{nowrap|{{death date and age|df=y|1783|9|18|1707|4|15}}}} {{awrap|{{bracket|[[Adoption of the Gregorian calendar#Adoption in Eastern Europe|OS]]: 7 September 1783}}}}\n...\n}}\n```\n\nThe infobox at the bottom is usually used to display a curated table of related links. For example, the bottom infobox for [Euler–Lagrange equation](https://en.wikipedia.org/wiki/Euler%E2%80%93Lagrange_equation) is just `{{Leonhard Euler}}`, which displays a box containing links to many of the things named after Euler.\n\n`~~~~` is used to sign on talk pages, and expands to something like `Username (talk) 10:50, 12 June 2023 (UTC)`.\n\n### Mathematics\n\n`<math>` tag renders $\\LaTeX$ inline like `$`, while `<math display=block>` renders it on a separate line like `$$`.\n\n`<math>E = mc^2</math>` renders to $E = mc^2$.\n\n`<math display=block></math>` renders to $$E = mc^2$$.\n\nOne can also include math using [HTML renders](https://en.wikipedia.org/wiki/Wikipedia:Manual_of_Style/Mathematics#Using_HTML) or even by [plain Unicode](https://en.wikipedia.org/wiki/Mathematical_operators_and_symbols_in_Unicode). These are less flexible but more compatible with older browsers. Further, parts of Wikipedia syntax themselves are incompatible with `<math>`, such as in section titles or some templates, forcing the use of HTML or Unicode in such cases.\n\nTheorems and proofs can be boxed and named:\n\n```wikitext\n{{Math theorem\n|name=Pythagorean theorem\n|note=Pythagoras, 500s BC\n|math_statement=Let <math>a, b, c</math> be the three side lengths of a right triangle, then\n<math display=block>a^2 + b^2 = c^2</math>\n}}\n\n{{Math proof\n|title=Proof by similar triangles\n|proof=Drop a perpendicular from point C to side AB. Now argue by proportionality. <math>\\blacksquare</math>\n}}\n```\n\n## References\n\nReferences are the backbone of Wikipedia `{{citation needed}}`. There are in general two ways to do citations.\n\n| type | inline citation | expanded citation |\n| ---- | ---- | ---- |\n| purpose | Support specific claims. | Provide general reference work for the entire page. |\n| location | Immediately after the supported claim. | In the `== References ==` section. |\n| appearance | analytic continuation of of _f_.<sup>[\\[6\\]](#6)</sup> | Abramowitz, Milton; Stegun, Irene A., eds. (1972). [\"Chapter 6\"](http://www.math.sfu.ca/~cbm/aands/page_253.htm)... |\n| syntax | `<ref>{{cite book\\|...}}</ref>` | `{{cite book\\|...}}` |\n\nAs expanded citations are just inline citations without the `<ref>` tag, we will describe just inline citations.\n\nThe most basic form is a plaintext citation, like `<ref>Author, Title, date, [url](https://example.com/), etc</ref>`.\n\nOne should generally use a templated citation, like `<ref>{{cite web|url=https://example.com/|title=Example|date=2001|access-date=2023}}</ref>`. There are three forms of citation templates: [`cite web`](https://en.wikipedia.org/wiki/Template:Cite_web), [`cite journal`](https://en.wikipedia.org/wiki/Template:Cite_journal), [`cite book`](https://en.wikipedia.org/wiki/Template:Cite_book).\n\nA citation can be named as `<ref name=\"X\">...</ref>`. It can then be invoked as `<ref name=\"X\" />`. The instance `<ref name=\"X\">...</ref>` can go before or after `<ref name=\"X\" />`. Any ordering would render to the same page.\n\n## Typical Wikipedia page\n\n```wikitext\n{{Short description|One sentence summary of page}}\n\n{{Infox box at the top\n|infobox_data_1=...\n|...\n}}\n\n[[File:Image of X.png|thumb|right|Image caption]]\n\nThe concept '''X''' is usually bolded. Now define the concept X. For non-specialist pages, this section should be written in plain language, with jargons defined in-line. Some [[link]]s would help.\n\n\n== Introduction ==\n\nHere one usually sets up the notation, overviews the history, and such. Details follow in the next sections.\n\nFootnotes are numbered separately from inline references.{{NoteTag|note=Footnote text.}}\n\n== Relation to Y ==\n{{Main|Y}}\n{{See also|Another page}}\n\nSomething about the relation between X and Y.\n\n== See also ==\n* [[Very relevant link]]\n* [[Less relevant link]]\n\n== External links ==\n* [https://example.com/ External link one]: Summary of what is in the external link.\n\n== Footnotes ==\n\n<references group=\"note\" />{{Notelist}}\n\n== References ==\n<!-- generates list of references from inline reference tags, with columns with a minimum width of 30 em-dashes. -->\n{{Reflist|30em}}\n\n<!-- extra, non-inlined references below -->\n{{Refbegin|30em}}\n* {{cite book|title=Book Title|date=2001|chapter=Chapter 1|...}}\n* ...\n\n== Further reading ==\n* ...\n* ...\n\n{{Infox box at the bottom}}\n\n[[Category:First category that the article belongs to]]\n[[Category:First category that the article belongs to]]\n[[Category:There is no limit to the number of categories allowed]]\n```\n\n## Further reading\n\n* [Wikipedia's manual of style](https://en.wikipedia.org/wiki/Wikipedia:Manual_of_Style)\n* [Wikitext cheatsheet](https://en.wikipedia.org/wiki/Help:Cheatsheet)\n* [Wikitext, full reference](https://en.wikipedia.org/wiki/Help:Wikitext).\n* [Tables, full reference](https://en.wikipedia.org/wiki/Help:Table#Simple_straightforward_tables)\n"
        },
        {
          "name": "wolfram.md",
          "type": "blob",
          "size": 6.4814453125,
          "content": "---\nname: Wolfram\ncontributors:\n    - [\"hyphz\", \"http://github.com/hyphz/\"]\nfilename: learnwolfram.nb\n---\n\nThe Wolfram Language is the underlying language originally used in Mathematica,\nbut now available for use in multiple contexts.\n\nWolfram Language has several interfaces:\n\n* The command line kernel interface on Raspberry Pi (just called _The Wolfram Language_)\n    which runs interactively and can't produce graphical input.\n* _Mathematica_ which is a rich text/maths editor with interactive Wolfram built in:\n    Pressing <kbd>shift</kbd> + <kbd>Return</kbd> on a \"code cell\"\n    creates an output cell with the result, which is not dynamic.\n* _Wolfram Workbench_ which is Eclipse interfaced to the Wolfram Language backend.\n\nThe code in this example can be typed in to any interface and edited with Wolfram Workbench.\nLoading directly into Mathematica may be awkward because the file contains no cell formatting information\n(which would make the file a huge mess to read as text) - it can be viewed/edited but may require some setting up.\n\n```mathematica\n(* This is a comment *)\n\n(* In Mathematica instead of using these comments you can create a text cell\n   and annotate your code with nicely typeset text and images *)\n\n(* Typing an expression returns the result *)\n2*2              (* 4 *)\n5+8              (* 13 *)\n\n(* Function Call *)\n(* Note, function names (and everything else) are case sensitive *)\nSin[Pi/2]        (* 1 *)\n\n(* Alternate Syntaxes for Function Call with one parameter *)\nSin@(Pi/2)       (* 1 *)\n(Pi/2) // Sin    (* 1 *)\n\n(* Every syntax in WL has some equivalent as a function call *)\nTimes[2, 2]      (* 4 *)\nPlus[5, 8]       (* 13 *)\n\n(* Using a variable for the first time defines it and makes it global *)\nx = 5            (* 5 *)\nx == 5           (* True, C-style assignment and equality testing *)\nx                (* 5 *)\nx = x + 5        (* 10 *)\nx                (* 10 *)\nSet[x, 20]       (* I wasn't kidding when I said EVERYTHING has a function equivalent *)\nx                (* 20 *)\n\n(* Because WL is based on a computer algebra system, *)\n(* using undefined variables is fine, they just obstruct evaluation *)\ncow + 5          (* 5 + cow, cow is undefined so can't evaluate further *)\ncow + 5 + 10     (* 15 + cow, it'll evaluate what it can *)\n%                (* 15 + cow, % fetches the last return *)\n% - cow          (* 15, undefined variable cow cancelled out *)\nmoo = cow + 5    (* Beware, moo now holds an expression, not a number! *)\n\n(* Defining a function *)\nDouble[x_] := x * 2    (* Note := to prevent immediate evaluation of the RHS\n                          And _ after x to indicate no pattern matching constraints *)\nDouble[10]             (* 20 *)\nDouble[Sin[Pi/2]]      (* 2 *)\nDouble @ Sin @ (Pi/2)  (* 2, @-syntax avoids queues of close brackets *)\n(Pi/2) // Sin // Double(* 2, //-syntax lists functions in execution order *)\n\n(* For imperative-style programming use ; to separate statements *)\n(* Discards any output from LHS and runs RHS *)\nMyFirst[] := (Print@\"Hello\"; Print@\"World\")  (* Note outer parens are critical\n                                                ;'s precedence is lower than := *)\nMyFirst[]                                    (* Hello World *)\n\n(* C-Style For Loop *)\nPrintTo[x_] := For[y=0, y<x, y++, (Print[y])]  (* Start, test, incr, body *)\nPrintTo[5]                                     (* 0 1 2 3 4 *)\n\n(* While Loop *)\nx = 0; While[x < 2, (Print@x; x++)]     (* While loop with test and body *)\n\n(* If and conditionals *)\nx = 8; If[x==8, Print@\"Yes\", Print@\"No\"]   (* Condition, true case, else case *)\nSwitch[x, 2, Print@\"Two\", 8, Print@\"Yes\"]  (* Value match style switch *)\nWhich[x==2, Print@\"No\", x==8, Print@\"Yes\"] (* Elif style switch *)\n\n(* Variables other than parameters are global by default, even inside functions *)\ny = 10             (* 10, global variable y *)\nPrintTo[5]         (* 0 1 2 3 4 *)\ny                  (* 5, global y clobbered by loop counter inside PrintTo *)\nx = 20             (* 20, global variable x *)\nPrintTo[5]         (* 0 1 2 3 4 *)\nx                  (* 20, x in PrintTo is a parameter and automatically local *)\n\n(* Local variables are declared using the Module metafunction *)\n(* Version with local variable *)\nBetterPrintTo[x_] := Module[{y}, (For[y=0, y<x, y++, (Print@y)])]\ny = 20             (* Global variable y *)\nBetterPrintTo[5]   (* 0 1 2 3 4 *)\ny                  (* 20, that's better *)\n\n(* Module actually lets us declare any scope we like *)\nModule[{count}, count=0;        (* Declare scope of this variable count *)\n  (IncCount[] := ++count);      (* These functions are inside that scope *)\n  (DecCount[] := --count)]\ncount              (* count - global variable count is not defined *)\nIncCount[]         (* 1, using the count variable inside the scope *)\nIncCount[]         (* 2, incCount updates it *)\nDecCount[]         (* 1, so does decCount *)\ncount              (* count - still no global variable by that name *)\n\n(* Lists *)\nmyList = {1, 2, 3, 4}     (* {1, 2, 3, 4} *)\nmyList[[1]]               (* 1 - note list indexes start at 1, not 0 *)\nMap[Double, myList]       (* {2, 4, 6, 8} - functional style list map function *)\nDouble /@ myList          (* {2, 4, 6, 8} - Abbreviated syntax for above *)\nScan[Print, myList]       (* 1 2 3 4 - imperative style loop over list *)\nFold[Plus, 0, myList]     (* 10 (0+1+2+3+4) *)\nFoldList[Plus, 0, myList] (* {0, 1, 3, 6, 10} - fold storing intermediate results *)\nAppend[myList, 5]         (* {1, 2, 3, 4, 5} - note myList is not updated *)\nPrepend[myList, 5]        (* {5, 1, 2, 3, 4} - add \"myList = \" if you want it to be *)\nJoin[myList, {3, 4}]      (* {1, 2, 3, 4, 3, 4} *)\nmyList[[2]] = 5          (* {1, 5, 3, 4} - this does update myList *)\n\n(* Associations, aka Dictionaries/Hashes *)\nmyHash = <|\"Green\" -> 2, \"Red\" -> 1|>   (* Create an association *)\nmyHash[[\"Green\"]]                       (* 2, use it *)\nmyHash[[\"Green\"]] := 5                  (* 5, update it *)\nmyHash[[\"Puce\"]] := 3.5                 (* 3.5, extend it *)\nKeyDropFrom[myHash, \"Green\"]            (* Wipes out key Green *)\nKeys[myHash]                            (* {Red, Puce} *)\nValues[myHash]                          (* {1, 3.5} *)\n\n(* And you can't do any demo of Wolfram without showing this off *)\nManipulate[y^2, {y, 0, 20}] (* Return a reactive user interface that displays y^2\n                               and allows y to be adjusted between 0-20 with a slider.\n                               Only works on graphical frontends *)\n```\n\n## Further reading\n\n* [Wolfram Language Documentation Center](http://reference.wolfram.com/language/)\n"
        },
        {
          "name": "xml.md",
          "type": "blob",
          "size": 5.966796875,
          "content": "---\nname: XML\nfilename: learnxml.xml\ncontributors:\n  - [\"João Farias\", \"https://github.com/JoaoGFarias\"]\n  - [\"Rachel Stiyer\", \"https://github.com/rstiyer\"]\n  - [\"Deepanshu Utkarsh\", \"https://github.com/duci9y\"]\n---\n\nXML is a markup language designed to store and transport data. It is supposed to be both human readable and machine readable.\n\nUnlike HTML, XML does not specify how to display or to format data, it just carries it.\n\nDistinctions are made between the **content** and the **markup**. In short, content could be anything, markup is defined.\n\n## Some definitions and introductions\n\nXML Documents are basically made up of *elements* which can have *attributes* describing them and may contain some textual content or more elements as its children. All XML documents must have a root element, which is the ancestor of all the other elements in the document.\n\nXML Parsers are designed to be very strict, and will stop parsing malformed documents. Therefore it must be ensured that all XML documents follow the [XML Syntax Rules](http://www.w3schools.com/xml/xml_syntax.asp).\n\n```xml\n<!-- This is a comment. It must not contain two consecutive hyphens (-). -->\n<!-- Comments can span\n  multiple lines -->\n\n<!-- Elements -->\n<!-- An element is a basic XML component. There are two types, empty: -->\n<element1 attribute=\"value\" /> <!-- Empty elements do not hold any content -->\n<!-- and non-empty: -->\n<element2 attribute=\"value\">Content</element2>\n<!-- Element names may only contain alphabets and numbers. -->\n\n<empty /> <!-- An element either consists an empty element tag… -->\n<!-- …which does not hold any content and is pure markup. -->\n\n<notempty> <!-- Or, it consists of a start tag… -->\n  <!-- …some content… -->\n</notempty> <!-- and an end tag. -->\n\n<!-- Element names are case sensitive. -->\n<element />\n<!-- is not the same as -->\n<eLEMENT />\n\n<!-- Attributes -->\n<!-- An attribute is a key-value pair and exists within an element. -->\n<element attribute=\"value\" another=\"anotherValue\" many=\"space-separated list\" />\n<!-- An attribute may appear only once in an element. It holds just one value.\n  Common workarounds to this involve the use of space-separated lists. -->\n\n<!-- Nesting elements -->\n<!-- An element's content may include other elements: -->\n<parent>\n  <child>Text</child>\n  <emptysibling />\n</parent>\n<!-- Standard tree nomenclature is followed. Each element being called a node.\n  An ancestor a level up is the parent, descendants a level down are children.\n  Elements within the same parent element are siblings. -->\n\n<!-- XML preserves whitespace. -->\n<child>\n  Text\n</child>\n<!-- is not the same as -->\n<child>Text</child>\n```\n\n## An XML document\n\nThis is what makes XML versatile. It is human readable too. The following document tells us that it defines a bookstore which sells three books, one of which is Learning XML by Erik T. Ray. All this without having used an XML Parser yet.\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- This is called an XML prolog. Optional, but recommended. -->\n<bookstore>\n  <book category=\"COOKING\">\n    <title lang=\"en\">Everyday Italian</title>\n    <author>Giada De Laurentiis</author>\n    <year>2005</year>\n    <price>30.00</price>\n  </book>\n  <book category=\"CHILDREN\">\n    <title lang=\"en\">Harry Potter</title>\n    <author>J K. Rowling</author>\n    <year>2005</year>\n    <price>29.99</price>\n  </book>\n  <book category=\"WEB\">\n    <title lang=\"en\">Learning XML</title>\n    <author>Erik T. Ray</author>\n    <year>2003</year>\n    <price>39.95</price>\n  </book>\n</bookstore>\n```\n\n## Well-formedness and Validation\n\nA XML document is *well-formed* if it is syntactically correct. However, it is possible to add more constraints to the document, using Document Type Definitions (DTDs). A document whose elements are attributes are declared in a DTD and which follows the grammar specified in that DTD is called *valid* with respect to that DTD, in addition to being well-formed.\n\nDeclaring a DTD externally:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE bookstore SYSTEM \"Bookstore.dtd\">\n<!-- Declares that bookstore is our root element and 'Bookstore.dtd' is the path\n  to our DTD file. -->\n<bookstore>\n  <book category=\"COOKING\">\n    <title lang=\"en\">Everyday Italian</title>\n    <author>Giada De Laurentiis</author>\n    <year>2005</year>\n    <price>30.00</price>\n  </book>\n</bookstore>\n```\n\nThe DTD file (Bookstore.dtd):\n\n```\n<!ELEMENT bookstore (book+)>\n<!-- The bookstore element may contain one or more child book elements. -->\n<!ELEMENT book (title, price)>\n<!-- Each book must have a title and a price as its children. -->\n<!ATTLIST book category CDATA \"Literature\">\n<!-- A book should have a category attribute. If it doesn't, its default value\n  will be 'Literature'. -->\n<!ELEMENT title (#PCDATA)>\n<!-- The element title must only contain parsed character data. That is, it may\n  only contain text which is read by the parser and must not contain children.\n  Compare with CDATA, or character data. -->\n<!ELEMENT price (#PCDATA)>\n```\n\nThe DTD could be declared inside the XML file itself:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!DOCTYPE bookstore [\n<!ELEMENT bookstore (book+)>\n<!ELEMENT book (title, price)>\n<!ATTLIST book category CDATA \"Literature\">\n<!ELEMENT title (#PCDATA)>\n<!ELEMENT price (#PCDATA)>\n]>\n\n<bookstore>\n  <book category=\"COOKING\">\n    <title>Everyday Italian</title>\n    <price>30.00</price>\n  </book>\n</bookstore>\n```\n\n## DTD Compatibility and XML Schema Definitions\n\nSupport for DTDs is ubiquitous because they are so old. Unfortunately, modern XML features like namespaces are not supported by DTDs. XML Schema Definitions (XSDs) are meant to replace DTDs for defining XML document grammar. \n\n## Resources\n\n* [Validate your XML](http://www.xmlvalidation.com)\n\n## Further Reading\n\n* [XML Schema Definitions Tutorial](https://www.w3schools.com/xml/schema_intro.asp)\n* [DTD Tutorial](http://www.w3schools.com/xml/xml_dtd_intro.asp)\n* [XML Tutorial](http://www.w3schools.com/xml/default.asp)\n* [Using XPath queries to parse XML](http://www.w3schools.com/xml/xml_xpath.asp)\n"
        },
        {
          "name": "yaml.md",
          "type": "blob",
          "size": 7.583984375,
          "content": "---\nname: YAML\nfilename: learnyaml.yaml\ncontributors:\n\n- [Leigh Brenecki, 'https://leigh.net.au']\n- [Suhas SG, 'https://github.com/jargnar']\n\n---\n\nYAML is a data serialisation language designed to be directly writable and\nreadable by humans.\n\nIt's a strict superset of JSON, with the addition of syntactically\nsignificant newlines and indentation, like Python. Unlike Python, however,\nYAML doesn't allow literal tab characters for indentation.\n\n```yaml\n---  # document start\n\n# Comments in YAML look like this.\n# YAML supports single-line comments.\n\n################\n# SCALAR TYPES #\n################\n\n# Our root object (which continues for the entire document) will be a map,\n# which is equivalent to a dictionary, hash or object in other languages.\nkey: value\nanother_key: Another value goes here.\na_number_value: 100\nscientific_notation: 1e+12\nhex_notation: 0x123  # evaluates to 291\noctal_notation: 0123 # evaluates to 83\n\n# The number 1 will be interpreted as a number, not a boolean. \n# If you want it to be interpreted as a boolean, use true.\nboolean: true\nnull_value: null\nanother_null_value: ~\nkey with spaces: value\n\n# Yes and No (doesn't matter the case) will be evaluated to boolean \n# true and false values respectively.\n# To use the actual value use single or double quotes.\nno: no            # evaluates to \"no\": false\nyes: No           # evaluates to \"yes\": false\nnot_enclosed: yes # evaluates to \"not_enclosed\": true\nenclosed: \"yes\"   # evaluates to \"enclosed\": yes\n\n# Notice that strings don't need to be quoted. However, they can be.\nhowever: 'A string, enclosed in quotes.'\n'Keys can be quoted too.': \"Useful if you want to put a ':' in your key.\"\nsingle quotes: 'have ''one'' escape pattern'\ndouble quotes: \"have many: \\\", \\0, \\t, \\u263A, \\x0d\\x0a == \\r\\n, and more.\"\n# UTF-8/16/32 characters need to be encoded\nSuperscript two: \\u00B2\n\n# Special characters must be enclosed in single or double quotes\nspecial_characters: \"[ John ] & { Jane } - <Doe>\"\n\n# Multiple-line strings can be written either as a 'literal block' (using |), \n# or a 'folded block' (using '>').\n# Literal block turn every newline within the string into a literal newline (\\n).\n# Folded block removes newlines within the string.\nliteral_block: |\n  This entire block of text will be the value of the 'literal_block' key,\n  with line breaks being preserved.\n\n  The literal continues until de-dented, and the leading indentation is\n  stripped.\n\n      Any lines that are 'more-indented' keep the rest of their indentation -\n      these lines will be indented by 4 spaces.\nfolded_style: >\n  This entire block of text will be the value of 'folded_style', but this\n  time, all newlines will be replaced with a single space.\n\n  Blank lines, like above, are converted to a newline character.\n\n      'More-indented' lines keep their newlines, too -\n      this text will appear over two lines.\n\n# |- and >- removes the trailing blank lines (also called literal/block \"strip\")\nliteral_strip: |-\n  This entire block of text will be the value of the 'literal_strip' key,\n  with trailing blank line being stripped.\nblock_strip: >-\n  This entire block of text will be the value of 'block_strip', but this\n  time, all newlines will be replaced with a single space and \n  trailing blank line being stripped.\n\n# |+ and >+ keeps trailing blank lines (also called literal/block \"keep\")\nliteral_keep: |+\n  This entire block of text will be the value of the 'literal_keep' key,\n  with trailing blank line being kept.\n\nblock_keep: >+\n  This entire block of text will be the value of 'block_keep', but this\n  time, all newlines will be replaced with a single space and \n  trailing blank line being kept.\n\n####################\n# COLLECTION TYPES #\n####################\n\n# Nesting uses indentation. 2 space indent is preferred (but not required).\na_nested_map:\n  key: value\n  another_key: Another Value\n  another_nested_map:\n    hello: hello\n\n# Maps don't have to have string keys.\n0.25: a float key\n\n# Keys can also be complex, like multi-line objects\n# We use ? followed by a space to indicate the start of a complex key.\n? |\n  This is a key\n  that has multiple lines\n: and this is its value\n\n# YAML also allows mapping between sequences with the complex key syntax\n# Some language parsers might complain\n# An example\n? - Manchester United\n  - Real Madrid\n: [ 2001-01-01, 2002-02-02 ]\n\n# Sequences (equivalent to lists or arrays) look like this\n# (note that the '-' counts as indentation):\na_sequence:\n  - Item 1\n  - Item 2\n  - 0.5  # sequences can contain disparate types.\n  - Item 4\n  - key: value\n    another_key: another_value\n  - - This is a sequence\n    - inside another sequence\n  - - - Nested sequence indicators\n      - can be collapsed\n\n# Since YAML is a superset of JSON, you can also write JSON-style maps and\n# sequences:\njson_map: { \"key\": \"value\" }\njson_seq: [ 3, 2, 1, \"takeoff\" ]\nand quotes are optional: { key: [ 3, 2, 1, takeoff ] }\n\n#######################\n# EXTRA YAML FEATURES #\n#######################\n\n# YAML also has a handy feature called 'anchors', which let you easily duplicate\n# content across your document.\n# Anchors identified by & character which define the value.\n# Aliases identified by * character which acts as \"see above\" command.\n# Both of these keys will have the same value:\nanchored_content: &anchor_name This string will appear as the value of two keys.\nother_anchor: *anchor_name\n\n# Anchors can be used to duplicate/inherit properties\nbase: &base\n  name: Everyone has same name\n\n# The expression << is called 'Merge Key Language-Independent Type'. It is used to\n# indicate that all the keys of one or more specified maps should be inserted\n# into the current map.\n# NOTE: If key already exists alias will not be merged\nfoo:\n  <<: *base # doesn't merge the anchor\n  age: 10\n  name: John\nbar:\n  <<: *base # base anchor will be merged\n  age: 20\n\n# foo name won't be changed and it will be: John. On the other hand, bar's name will be changed to the base one: Everyone has same name\n\n# YAML also has tags, which you can use to explicitly declare types.\n# Syntax: !![typeName] [value]\nexplicit_boolean: !!bool true\nexplicit_integer: !!int 42\nexplicit_float: !!float -42.24\nexplicit_string: !!str 0.5\nexplicit_datetime: !!timestamp 2022-11-17 12:34:56.78 +9\nexplicit_null: !!null null\n\n# Some parsers implement language specific tags, like this one for Python's\n# complex number type.\npython_complex_number: !!python/complex 1+2j\n\n# We can also use yaml complex keys with language specific tags\n? !!python/tuple [ 5, 7 ]\n: Fifty Seven\n# Would be {(5, 7): 'Fifty Seven'} in Python\n\n####################\n# EXTRA YAML TYPES #\n####################\n\n# Strings and numbers aren't the only scalars that YAML can understand.\n# ISO-formatted date and datetime literals are also parsed.\ndatetime_canonical: 2001-12-15T02:59:43.1Z\ndatetime_space_separated_with_time_zone: 2001-12-14 21:59:43.10 -5\ndate_implicit: 2002-12-14\ndate_explicit: !!timestamp 2002-12-14\n\n# The !!binary tag indicates that a string is actually a base64-encoded\n# representation of a binary blob.\ngif_file: !!binary |\n  R0lGODlhDAAMAIQAAP//9/X17unp5WZmZgAAAOfn515eXvPz7Y6OjuDg4J+fn5\n  OTk6enp56enmlpaWNjY6Ojo4SEhP/++f/++f/++f/++f/++f/++f/++f/++f/+\n  +f/++f/++f/++f/++f/++SH+Dk1hZGUgd2l0aCBHSU1QACwAAAAADAAMAAAFLC\n  AgjoEwnuNAFOhpEMTRiggcz4BNJHrv/zCFcLiwMWYNG84BwwEeECcgggoBADs=\n\n# YAML also has a set type, which looks like this:\nset:\n  ? item1\n  ? item2\n  ? item3\nor: { item1, item2, item3 }\n\n# Sets are just maps with null values; the above is equivalent to:\nset2:\n  item1: null\n  item2: null\n  item3: null\n\n...  # document end\n```\n\n### More Resources\n\n+ [YAML official website](https://yaml.org/)\n+ [Online YAML Validator](http://www.yamllint.com/)\n+ [JSON ⇆ YAML](https://www.json2yaml.com/)\n"
        },
        {
          "name": "zfs.md",
          "type": "blob",
          "size": 15.66015625,
          "content": "---\ncategory: tool\nname: ZFS\ncontributors:\n    - [\"sarlalian\", \"http://github.com/sarlalian\"]\n    - [\"81reap\", \"https://github.com/81reap\"]\n    - [\"A1EF\", \"https://github.com/A1EF\"]\nfilename: LearnZfs.txt\n---\n\n[ZFS](http://open-zfs.org/wiki/Main_Page)\nis a rethinking of the storage stack, combining traditional file systems as well as volume\nmanagers into one cohesive tool.  ZFS has some specific terminology that sets it apart from\nmore traditional storage systems, however it has a great set of features with a focus on\nusability for systems administrators.\n\n## ZFS Concepts\n\n### Virtual Devices\n\nA VDEV (Virtual Device) in ZFS is analogous to a RAID device and similarly offers different\nbenefits in terms of redundancy and performance. In general VDEV's offer better reliability\nand safety than a RAID card. It is discouraged to use a RAID setup with ZFS, as ZFS expects\nto directly manage the underlying disks.\n\n| VDEV Type | Similar RAID | Notes |\n|-----------|----------------|---------------------------------------|\n| Mirror | RAID 1 | Supports n-way mirroring for redundancy. |\n| raidz1 | RAID 5 | Single disk parity, offering fault tolerance of one disk failure. |\n| raidz2 | RAID 6 | Two-disk parity, can tolerate two disk failures. |\n| raidz3 | - | Three-disk parity, can tolerate three disk failures. |\n| Disk | - | Represents a single physical disk in a VDEV. |\n| File | - | File-based VDEV, not recommended for production as it adds complexity and reduces reliability. |\n\nData in a ZFS storage pool is striped across all VDEVs. Adding more VDEVs, Logs, or Caches\ncan increase IOPS (Input/Output Operations Per Second), enhancing performance. It's crucial\nto balance VDEVs for optimal performance and redundancy.\n\n### Storage Pools\n\nZFS uses Storage Pools as an abstraction over the lower level storage provider (VDEV), allow\nyou to separate the user visible file system from the physical layout.\n\n### ZFS Dataset\n\nZFS datasets are analogous to traditional filesystems but with many more features.  They\nprovide many of ZFS's advantages.  Datasets support [Copy on Write](https://en.wikipedia.org/wiki/Copy-on-write)\nsnapshots, quota's, compression and de-duplication.\n\n### Limits\n\nOne directory may contain up to 2^48 files, up to 16 exabytes each.  A single storage pool\ncan contain up to 256 zettabytes (2^78) of space, and can be striped across 2^64 devices.  A\nsingle host can have 2^64 storage pools.  The limits are huge.\n\n## Commands\n\n### Storage Pools\n\nActions:\n\n* List\n* Status\n* Destroy\n* Get/Set properties\n\nList zpools\n\n```bash\n# Create a raidz zpool\n$ zpool create zroot raidz1 gpt/zfs0 gpt/zfs1 gpt/zfs2\n\n# List ZPools\n$ zpool list\nNAME    SIZE  ALLOC   FREE  EXPANDSZ   FRAG    CAP  DEDUP  HEALTH  ALTROOT\nzroot   141G   106G  35.2G         -    43%    75%  1.00x  ONLINE  -\n\n# List detailed information about a specific zpool\n$ zpool list -v zroot\nNAME                                     SIZE  ALLOC   FREE  EXPANDSZ   FRAG    CAP  DEDUP HEALTH  ALTROOT\nzroot                                    141G   106G  35.2G         -    43%    75%  1.00x ONLINE  -\n  gptid/c92a5ccf-a5bb-11e4-a77d-001b2172c655   141G   106G  35.2G         -    43%    75%\n```\n\nStatus of zpools\n\n```bash\n# Get status information about zpools\n$ zpool status\n  pool: zroot\n state: ONLINE\n  scan: scrub repaired 0 in 2h51m with 0 errors on Thu Oct  1 07:08:31 2015\nconfig:\n\n        NAME                                          STATE     READ WRITE CKSUM\n        zroot                                         ONLINE       0     0     0\n          gptid/c92a5ccf-a5bb-11e4-a77d-001b2172c655  ONLINE       0     0     0\n\nerrors: No known data errors\n\n# Scrubbing a zpool to correct any errors\n$ zpool scrub zroot\n$ zpool status -v zroot\n  pool: zroot\n state: ONLINE\n  scan: scrub in progress since Thu Oct 15 16:59:14 2015\n        39.1M scanned out of 106G at 1.45M/s, 20h47m to go\n        0 repaired, 0.04% done\nconfig:\n\n        NAME                                          STATE     READ WRITE CKSUM\n        zroot                                         ONLINE       0     0     0\n          gptid/c92a5ccf-a5bb-11e4-a77d-001b2172c655  ONLINE       0     0     0\n\nerrors: No known data errors\n```\n\nProperties of zpools\n\n```bash\n# Getting properties from the pool properties can be user set or system provided.\n$ zpool get all zroot\nNAME   PROPERTY                       VALUE                          SOURCE\nzroot  size                           141G                           -\nzroot  capacity                       75%                            -\nzroot  altroot                        -                              default\nzroot  health                         ONLINE                         -\n...\n\n# Setting a zpool property\n$ zpool set comment=\"Storage of mah stuff\" zroot\n$ zpool get comment\nNAME   PROPERTY  VALUE                 SOURCE\ntank   comment   -                     default\nzroot  comment   Storage of mah stuff  local\n```\n\nRemove zpool\n\n```bash\n$ zpool destroy test\n```\n\n### Datasets\n\nActions:\n\n* Create\n* List\n* Rename\n* Delete\n* Get/Set properties\n\nCreate datasets\n\n```bash\n# Create dataset\n$ zfs create zroot/root/data\n$ mount | grep data\nzroot/root/data on /data (zfs, local, nfsv4acls)\n\n# Create child dataset\n$ zfs create zroot/root/data/stuff\n$ mount | grep data\nzroot/root/data on /data (zfs, local, nfsv4acls)\nzroot/root/data/stuff on /data/stuff (zfs, local, nfsv4acls)\n\n\n# Create Volume\n$ zfs create -V zroot/win_vm\n$ zfs list zroot/win_vm\nNAME                 USED  AVAIL  REFER  MOUNTPOINT\nzroot/win_vm         4.13G  17.9G    64K  -\n```\n\nList datasets\n\n```bash\n# List all datasets\n$ zfs list\nNAME                                                                       USED  AVAIL  REFER  MOUNTPOINT\nzroot                                                                      106G  30.8G   144K  none\nzroot/ROOT                                                                18.5G  30.8G   144K  none\nzroot/ROOT/10.1                                                              8K  30.8G  9.63G  /\nzroot/ROOT/default                                                        18.5G  30.8G  11.2G  /\nzroot/backup                                                              5.23G  30.8G   144K  none\nzroot/home                                                                 288K  30.8G   144K  none\n...\n\n# List a specific dataset\n$ zfs list zroot/home\nNAME         USED  AVAIL  REFER  MOUNTPOINT\nzroot/home   288K  30.8G   144K  none\n\n# List snapshots\n$ zfs list -t snapshot\nzroot@daily-2015-10-15                                                                  0      -   144K  -\nzroot/ROOT@daily-2015-10-15                                                             0      -   144K  -\nzroot/ROOT/default@daily-2015-10-15                                                     0      -  24.2G  -\nzroot/tmp@daily-2015-10-15                                                           124K      -   708M  -\nzroot/usr@daily-2015-10-15                                                              0      -   144K  -\nzroot/home@daily-2015-10-15                                                             0      -  11.9G  -\nzroot/var@daily-2015-10-15                                                           704K      -  1.42G  -\nzroot/var/log@daily-2015-10-15                                                       192K      -   828K  -\nzroot/var/tmp@daily-2015-10-15                                                          0      -   152K  -\n```\n\nRename datasets\n\n```bash\n$ zfs rename zroot/root/home zroot/root/old_home\n$ zfs rename zroot/root/new_home zroot/root/home\n```\n\nDelete dataset\n\n```bash\n# Datasets cannot be deleted if they have any snapshots\n$ zfs destroy zroot/root/home\n```\n\nGet / set properties of a dataset\n\n```bash\n# Get all properties\n$ zfs get all zroot/usr/home\nNAME            PROPERTY              VALUE                  SOURCE\nzroot/home      type                  filesystem             -\nzroot/home      creation              Mon Oct 20 14:44 2014  -\nzroot/home      used                  11.9G                  -\nzroot/home      available             94.1G                  -\nzroot/home      referenced            11.9G                  -\nzroot/home      mounted               yes                    -\n...\n\n# Get property from dataset\n$ zfs get compression zroot/usr/home\nNAME            PROPERTY     VALUE     SOURCE\nzroot/home      compression  off       default\n\n# Set property on dataset\n$ zfs set compression=lz4 zroot/lamb\n\n# Get a set of properties from all datasets\n$ zfs list -o name,quota,reservation\nNAME                                                               QUOTA  RESERV\nzroot                                                               none    none\nzroot/ROOT                                                          none    none\nzroot/ROOT/default                                                  none    none\nzroot/tmp                                                           none    none\nzroot/usr                                                           none    none\nzroot/home                                                          none    none\nzroot/var                                                           none    none\n...\n```\n\n### Write Log Pool\n\nThe ZFS Intent Log (ZIL) is a write log designed to speed up synchronous writes. This is\ntypically a faster drive or drive partition than the larger storage pools.\n\n```bash\n# Add a log pool\n$ zpool add mypool/lamb log /dev/sdX\n\n# Check the configuration\n$ zpool status mypool/lamb\n```\n\n### Read Cache Pool\n\nThe Level 2 Adaptive Replacement Cache (L2ARC) extends the primary ARC (in-RAM cache) and is\nused for read caching. This is typically a faster drive or drive partition than the larger\nstorage pools.\n\n```bash\n# Add a cache pool\n$ zpool add mypool/lamb cache /dev/sdY\n\n# Check the configuration\n$ zpool status mypool/lamb\n```\n\n### Data Compression\n\nData compression reduces the amount of space data occupies on disk in exchange for some extra\nCPU usage. When enabled, it can enhance performance by reducing the amount of disk I/O. It\nespecially beneficial on systems with more CPU resources than disk bandwidth.\n\n```bash\n# Get compression options\n$ zfs get -help\n...\ncompression     NO       YES   on | off | lzjb | gzip | gzip-[1-9] | zle | lz4 | zstd | zstd-[1-19] | zstd-fast | zstd-fast-[1-10,20,30,40,50,60,70,80,90,100,500,1000]\n...\n\n# Set compression\n$ zfs set compression=on mypool/lamb\n\n# Check the configuration\n$ zpool get compression mypool/lamb\n```\n\n### Encryption at Rest\n\nEncryption allows data to be encrypted on the device at the cost of extra CPU cycles. This\nproperty can only be set when a dataset is being created.\n\n```bash\n# Enable encryption on the pool\n$ zpool set feature@encryption=enabled black_hole\n\n# Create an encrypted dataset with a prompt\n$ zfs create -o encryption=on -o keyformat=passphrase black_hole/enc\n\n# Check the configuration\n$ zfs get encryption black_hole/enc\n```\n\nIt should be noted that there are parts of the system where the data is not encrypted. See\nthe table below for a breakdown.\n\n| Component | Encrypted | Notes |\n|----------------------|-------------------------------------------|------------------------------------------------------|\n| Main Data Storage | Yes | Data in datasets/volumes is encrypted. |\n| ZFS Intent Log (ZIL) | Yes | Synchronous write requests are encrypted. |\n| L2ARC (Cache) | Yes | Cached data is stored in an encrypted form. |\n| RAM (ARC) | No | Data in the primary ARC, in RAM, is not encrypted. |\n| Swap Area | Conditional | Encrypted if the ZFS swap dataset is encrypted. |\n| ZFS Metadata | Yes | Metadata is encrypted for encrypted datasets. |\n| Snapshot Data | Yes | Snapshots of encrypted datasets are also encrypted. |\n| ZFS Send/Receive | Conditional | Encrypted during send/receive if datasets are encrypted and `-w` flag is used. |\n\n### Snapshots\n\nZFS snapshots are one of the things about zfs that are a really big deal\n\n* The space they take up is equal to the difference in data between the filesystem and its snapshot\n* Creation time is only seconds\n* Recovery is as fast as you can write data.\n* They are easy to automate.\n\nActions:\n\n* Create\n* Delete\n* Rename\n* Access snapshots\n* Send / Receive\n* Clone\n\nCreate snapshots\n\n```bash\n# Create a snapshot of a single dataset\nzfs snapshot zroot/home/sarlalian@now\n\n# Create a snapshot of a dataset and its children\n$ zfs snapshot -r zroot/home@now\n$ zfs list -t snapshot\nNAME                       USED  AVAIL  REFER  MOUNTPOINT\nzroot/home@now                 0      -    26K  -\nzroot/home/sarlalian@now       0      -   259M  -\nzroot/home/alice@now           0      -   156M  -\nzroot/home/bob@now             0      -   156M  -\n...\n```\n\nDestroy snapshots\n\n```bash\n# How to destroy a snapshot\n$ zfs destroy zroot/home/sarlalian@now\n\n# Delete a snapshot on a parent dataset and its children\n$ zfs destroy -r zroot/home/sarlalian@now\n```\n\nRenaming Snapshots\n\n```bash\n# Rename a snapshot\n$ zfs rename zroot/home/sarlalian@now zroot/home/sarlalian@today\n$ zfs rename zroot/home/sarlalian@now today\n\n$ zfs rename -r zroot/home@now @yesterday\n```\n\nAccessing snapshots\n\n```bash\n# CD into a snapshot directory\n$ cd /home/.zfs/snapshot/\n```\n\nSending and Receiving\n\n```bash\n# Backup a snapshot to a file\n$ zfs send zroot/home/sarlalian@now | gzip > backup_file.gz\n\n# Send a snapshot to another dataset\n$ zfs send zroot/home/sarlalian@now | zfs recv backups/home/sarlalian\n\n# Send a snapshot to a remote host\n$ zfs send zroot/home/sarlalian@now | ssh root@backup_server 'zfs recv zroot/home/sarlalian'\n\n# Send full dataset with snapshots to new host\n$ zfs send -v -R zroot/home@now | ssh root@backup_server 'zfs recv zroot/home'\n```\n\nCloning Snapshots\n\n```bash\n# Clone a snapshot\n$ zfs clone zroot/home/sarlalian@now zroot/home/sarlalian_new\n\n# Promoting the clone so it is no longer dependent on the snapshot\n$ zfs promote zroot/home/sarlalian_new\n```\n\n### Putting it all together\n\nThis following a script utilizing FreeBSD, jails and ZFS to automate\nprovisioning a clean copy of a MySQL staging database from a live replication\nslave.\n\n```bash\n#!/bin/sh\n\necho \"==== Stopping the staging database server ====\"\njail -r staging\n\necho \"==== Cleaning up existing staging server and snapshot ====\"\nzfs destroy -r zroot/jails/staging\nzfs destroy zroot/jails/slave@staging\n\necho \"==== Quiescing the slave database ====\"\necho \"FLUSH TABLES WITH READ LOCK;\" | /usr/local/bin/mysql -u root -pmyrootpassword -h slave\n\necho \"==== Snapshotting the slave db filesystem as zroot/jails/slave@staging ====\"\nzfs snapshot zroot/jails/slave@staging\n\necho \"==== Starting the slave database server ====\"\njail -c slave\n\necho \"==== Cloning the slave snapshot to the staging server ====\"\nzfs clone zroot/jails/slave@staging zroot/jails/staging\n\necho \"==== Installing the staging mysql config ====\"\nmv /jails/staging/usr/local/etc/my.cnf /jails/staging/usr/local/etc/my.cnf.slave\ncp /jails/staging/usr/local/etc/my.cnf.staging /jails/staging/usr/local/etc/my.cnf\n\necho \"==== Setting up the staging rc.conf file ====\"\nmv /jails/staging/etc/rc.conf.local /jails/staging/etc/rc.conf.slave\nmv /jails/staging/etc/rc.conf.staging /jails/staging/etc/rc.conf.local\n\necho \"==== Starting the staging db server ====\"\njail -c staging\n\necho \"==== Makes the staging database not pull from the master ====\"\necho \"STOP SLAVE;\" | /usr/local/bin/mysql -u root -pmyrootpassword -h staging\necho \"RESET SLAVE;\" | /usr/local/bin/mysql -u root -pmyrootpassword -h staging\n```\n\n### Additional Reading\n\n* [BSDNow's Crash Course on ZFS](http://www.bsdnow.tv/tutorials/zfs)\n* [FreeBSD Handbook on ZFS](https://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/zfs.html)\n* [BSDNow's Crash Course on ZFS](http://www.bsdnow.tv/tutorials/zfs)\n* [Oracle's Tuning Guide](http://www.oracle.com/technetwork/articles/servers-storage-admin/sto-recommended-zfs-settings-1951715.html)\n* [OpenZFS Tuning Guide](http://open-zfs.org/wiki/Performance_tuning)\n* [FreeBSD ZFS Tuning Guide](https://wiki.freebsd.org/ZFSTuningGuide)\n"
        },
        {
          "name": "zh-cn",
          "type": "tree",
          "content": null
        },
        {
          "name": "zh-tw",
          "type": "tree",
          "content": null
        },
        {
          "name": "zig.md",
          "type": "blob",
          "size": 28.96484375,
          "content": "---\nname: Zig\nfilename: learnzig.zig\ncontributors:\n    - [\"Philippe Pittoli\", \"https://karchnu.fr/\"]\n---\n\n[Zig][ziglang] aims to be a replacement for the C programming language.\n\n**WARNING**: this document expects you to understand a few basic concepts in computer\nscience, such as pointers, stack and heap memory, etc. Prior knowledge of C is\nrecommended.\n\n## Quick overview: Zig compared to C\n\n- Syntax is mostly the same, with some improvements (less ambiguity).\n- Zig introduces namespaces.\n- `try` and `catch` mechanism, which is both convenient, efficient and optional.\n- Most of the C undefined behaviors (UBs) are fixed.\n- Compared to C, raw pointers are safer to use and less likely to be needed.\n  - The type system distinguishes between a pointer to a single value, or multiple values, etc.\n  - Slices are preferred, which is a structure with a pointer and a runtime known size, which characterizes most uses of pointers in the first place.\n- Some arbitrary language limitations are removed. For example, enumerations, structures and unions can have functions.\n- Simple access to SIMD operations (basic maths on vectors).\n- Zig provides both low-level features of C and the one provided through compiler extensions.\n  For example: packed structures.\n- An extensive standard library, including data structures and algorithms.\n- Cross-compilation capability is provided by default, without any dependency.\n  Different libc are provided to ease the process.\n  Cross-compilation works from, and to, any operating system and architecture.\n\n## Zig language\n\n```zig\n//! Top-level documentation.\n\n/// Documentation comment.\n\n// Simple comment.\n```\n\n### Hello world.\n\n```zig\n// Import standard library, reachable through the \"std\" constant.\nconst std = @import(\"std\");\n\n// \"info\" now refers to the \"std.log.info\" function.\nconst info = std.log.info;\n\n// Usual hello world.\n// syntax: [pub] fn <function-name>(<arguments>) <return-type> { <body> }\npub fn main() void {\n    // Contrary to C functions, Zig functions have a fixed number of arguments.\n    // In C: \"printf\" takes any number of arguments.\n    // In Zig: std.log.info takes a format and a list of elements to print.\n    info(\"hello world\", .{});  // .{} is an empty anonymous tuple.\n}\n```\n\n### Booleans, integers and float.\n\n```zig\n// Booleans.\n// Keywords are preferred to operators for boolean operations.\nprint(\"{}\\n{}\\n{}\\n\", .{\n    true and false,\n    true or false,\n    !true,\n});\n\n// Integers.\nconst one_plus_one: i32 = 1 + 1;\nprint(\"1 + 1 = {}\\n\", .{one_plus_one}); // 2\n\n// Floats.\nconst seven_div_three: f32 = 7.0 / 3.0;\nprint(\"7.0 / 3.0 = {}\\n\", .{seven_div_three}); // 2.33333325e+00\n\n// Integers have arbitrary value lengths.\nvar myvar: u10 = 5; // 10-bit unsigned integer\n// Useful for example to read network packets, or complex binary formats.\n\n// Number representation is greatly improved compared to C.\nconst one_billion = 1_000_000_000;         // Decimal.\nconst binary_mask = 0b1_1111_1111;         // Binary. Ex: network mask.\nconst permissions = 0o7_5_5;               // Octal.  Ex: Unix permissions.\nconst big_address = 0xFF80_0000_0000_0000; // Hexa.   Ex: IPv6 address.\n\n\n// Overflow operators: tell the compiler when it's okay to overflow.\nvar i: u8 = 0;  // \"i\" is an unsigned 8-bit integer\ni  -= 1;        // runtime overflow error (unsigned value always are positive)\ni -%= 1;        // okay (wrapping operator), i == 255\n\n// Saturation operators: values will stick to their lower and upper bounds.\nvar i: u8 = 200;   // \"i\" is an unsigned 8-bit integer (values: from 0 to 255)\ni  +| 100 == 255   // u8: won't go higher than 255\ni  -| 300 == 0     // unsigned, won't go lower than 0\ni  *| 2   == 255   // u8: won't go higher than 255\ni <<| 8   == 255   // u8: won't go higher than 255\n```\n\n### Arrays.\n\n```zig\n// An array is a well-defined structure with a length attribute (len).\n\n// 5-byte array with undefined content (stack garbage).\nvar array1: [5]u8 = undefined;\n\n// 5-byte array with defined content.\nvar array2 = [_]u8{ 1, 2, 3, 4, 5 };\n// [_] means the compiler knows the length at compile-time.\n\n// 1000-byte array with defined content (0).\nvar array3 = [_]u8{0} ** 1000;\n\n// Another 1000-byte array with defined content.\n// The content is provided by the \"foo\" function, called at compile-time and\n// allows complex initializations.\nvar array4 = [_]u8{foo()} ** 1000;\n\n// In any case, array.len gives the length of the array,\n// array1.len and array2.len produce 5, array3.len and array4.len produce 1000.\n\n\n// Modifying and accessing arrays content.\n\n// Array of 10 32-bit undefined integers.\nvar some_integers: [10]i32 = undefined;\n\nsome_integers[0] = 30; // first element of the array is now 30\n\nvar x = some_integers[0]; // \"x\" now equals to 30, its type is inferred.\nvar y = some_integers[1]; // Second element of the array isn't defined.\n                          // \"y\" got a stack garbage value (no runtime error).\n\n// Array of 10 32-bit undefined integers.\nvar some_integers: [10]i32 = undefined;\n\nvar z = some_integers[20]; // index > array size, compilation error.\n\n// At runtime, we loop over the elements of \"some_integers\" with an index.\n// Index i = 20, then we try:\ntry some_integers[i]; // Runtime error 'index out of bounds'.\n                      // \"try\" keyword is necessary when accessing an array with\n                      // an index, since there is a potential runtime error.\n                      // More on that later.\n```\n\n### Multidimensional arrays.\n\n```zig\nconst mat4x4 = [4][4]f32{\n    [_]f32{ 1.0, 0.0, 0.0, 0.0 },\n    [_]f32{ 0.0, 1.0, 0.0, 1.0 },\n    [_]f32{ 0.0, 0.0, 1.0, 0.0 },\n    [_]f32{ 0.0, 0.0, 0.0, 1.0 },\n};\n\n// Access the 2D array then the inner array through indexes.\ntry expect(mat4x4[1][1] == 1.0);\n\n// Here we iterate with for loops.\nfor (mat4x4) |row, row_index| {\n    for (row) |cell, column_index| {\n        // ...\n    }\n}\n```\n\n### Strings.\n\n```zig\n// Simple string constant.\nconst greetings = \"hello\";\n// ... which is equivalent to:\nconst greetings: *const [5:0]u8 = \"hello\";\n// In words: \"greetings\" is a constant value, a pointer on a constant array of 5\n// elements (8-bit unsigned integers), with an extra '0' at the end.\n// The extra \"0\" is called a \"sentinel value\".\n\nprint(\"string: {s}\\n\", .{greetings});\n\n// This represents rather faithfully C strings. Although, Zig strings are\n// structures, no need for \"strlen\" to compute their size.\n// greetings.len == 5\n```\n\n### Slices.\n\n```zig\n// A slice is a pointer and a size, an array without compile-time known size.\n// Slices have runtime out-of-band verifications.\n\nconst array = [_]u8{1,2,3,4,5};     // [_] = array with compile-time known size.\nconst slice = array[0..array.len];  // \"slice\" represents the whole array.\n                                    // slice[10] gives a runtime error.\n```\n\n### Pointers.\n\n```zig\n// Pointer on a value can be created with \"&\".\nconst x: i32 = 1;\nconst pointer: *i32 = &x;  // \"pointer\" is a pointer on the i32 var \"x\".\nprint(\"1 = {}, {}\\n\", .{x, pointer});\n\n// Pointer values are accessed and modified with \".*\".\nif (pointer.* == 1) {\n    print(\"x value == {}\\n\", .{pointer.*});\n}\n\n// \".?\" is a shortcut for \"orelse unreachable\".\nconst foo = pointer.?; // Get the pointed value, otherwise crash.\n```\n\n### Optional values (?\\<type\\>).\n\n```zig\n// An optional is a value than can be of any type or null.\n\n// Example: \"optional_value\" can either be \"null\" or an unsigned 32-bit integer.\nvar optional_value: ?u32 = null; // optional_value == null\noptional_value = 42;             // optional_value != null\n\n// \"some_function\" returns ?u32\nvar x = some_function();\nif (x) |value| {\n    // In case \"some_function\" returned a value.\n    // Do something with 'value'.\n}\n```\n\n### Errors.\n\n```zig\n// Zig provides an unified way to express errors.\n\n// Errors are defined in error enumerations, example:\nconst Error = error {\n    WatchingAnyNetflixTVShow,\n    BeOnTwitter,\n};\n\n// Normal enumerations are expressed the same way, but with \"enum\" keyword.\nconst SuccessStory = enum {\n    DoingSport,\n    ReadABook,\n};\n\n\n// Error union (!).\n// Either the value \"mylife\" is an an error or a normal value.\nvar mylife: Error!SuccessStory = Error.BeOnTwitter;\n// mylife is an error. Sad.\n\nmylife = SuccessStory.ReadABook;\n// Now mylife is an enum.\n\n\n// Zig ships with many pre-defined errors. Example:\nconst value: anyerror!u32 = error.Broken;\n\n\n// Handling errors.\n\n// Some error examples.\nconst Error = error {\n    UnExpected,\n    Authentication,\n};\n\n// \"some_function\" can either return an \"Error\" or an integer.\nfn some_function() Error!u8 {\n    return Error.UnExpected; // It returns an error.\n}\n\n// Errors can be \"catch\" without intermediate variable.\nvar value = some_function() catch |err| switch(err) {\n    Error.UnExpected     => return err,   // Returns the error.\n    Error.Authentication => unreachable,  // Not expected. Crashes the program.\n    else                 => unreachable,\n};\n\n// An error can be \"catch\" without giving it a name.\nconst unwrapped = some_function() catch 1234; // \"unwrapped\" = 1234\n\n// \"try\" is a very handy shortcut for \"catch |err| return err\".\nvar value = try some_function();\n// If \"some_function\" fails, the current function stops and returns the error.\n// \"value\" can only have a valid value, the error already is handled with \"try\".\n```\n\n### Control flow.\n\n```zig\n// Conditional branching.\n\nif (condition) {\n    ...\n}\nelse {\n    ...\n}\n\n// Ternary.\nvar value = if (condition) x else y;\n\n// Shortcut for \"if (x) x else 0\"\nvar value = x orelse 0;\n\n// If \"a\" is an optional, which may contain a value.\nif (a) |value| {\n    print(\"value: {}\\n\", .{value});\n}\nelse {\n    print(\"'a' is null\\n\", .{});\n}\n\n// Get a pointer on the value (if it exists).\nif (a) |*value| { value.* += 1; }\n\n\n// Loops.\n\n// Syntax examples:\n//   while (condition) statement\n//   while (condition) : (end-of-iteration-statement) statement\n//\n//   for (iterable) statement\n//   for (iterable) |capture| statement\n//   for (iterable) statement else statement\n\n// Note: loops work the same way over arrays or slices.\n\n// Simple \"while\" loop.\nwhile (i < 10) { i += 1; }\n\n// While loop with a \"continue expression\"\n// (expression executed as the last expression of the loop).\nwhile (i < 10) : (i += 1) { ... }\n// Same, with a more complex continue expression (block of code).\nwhile (i * j < 2000) : ({ i *= 2; j *= 3; }) { ... }\n\n// To iterate over a portion of a slice, reslice.\nfor (items[0..1]) |value| { sum += value; }\n\n// Loop over every item of an array (or slice).\nfor (items) |value| { sum += value; }\n\n// Iterate and get pointers on values instead of copies.\nfor (items) |*value| { value.* += 1; }\n\n// Iterate with an index.\nfor (items) |value, i| { print(\"val[{}] = {}\\n\", .{i, value}); }\n\n// Iterate with pointer and index.\nfor (items) |*value, i| { print(\"val[{}] = {}\\n\", .{i, value}); value.* += 1; }\n\n\n// Break and continue are supported.\nfor (items) |value| {\n    if (value == 0)  { continue; }\n    if (value >= 10) { break;    }\n    // ...\n}\n\n// For loops can also be used as expressions.\n// Similar to while loops, when you break from a for loop,\n// the else branch is not evaluated.\nvar sum: i32 = 0;\n// The \"for\" loop has to provide a value, which will be the \"else\" value.\nconst result = for (items) |value| {\n    if (value != null) {\n        sum += value.?; // \"result\" will be the last \"sum\" value.\n    }\n} else 0;                  // Last value.\n```\n\n### Labels.\n\n```zig\n// Labels are a way to name an instruction, a location in the code.\n// Labels can be used to \"continue\" or \"break\" in a nested loop.\nouter: for ([_]i32{ 1, 2, 3, 4, 5, 6, 7, 8 }) |_| {\n    for ([_]i32{ 1, 2, 3, 4, 5 }) |_| {\n        count += 1;\n        continue :outer; // \"continue\" for the first loop.\n    }\n} // count = 8\nouter: for ([_]i32{ 1, 2, 3, 4, 5, 6, 7, 8 }) |_| {\n    for ([_]i32{ 1, 2, 3, 4, 5 }) |_| {\n        count += 1;\n        break :outer; // \"break\" for the first loop.\n    }\n} // count = 1\n\n\n// Labels can also be used to return a value from a block.\nvar y: i32 = 5;\nconst x = blk: {\n    y += 1;\n    break :blk y; // Now \"x\" equals 6.\n};\n// Relevant in cases like \"for else\" expression (explained in the following).\n\n// For loops can be used as expressions.\n// When you break from a for loop, the else branch is not evaluated.\n// WARNING: counter-intuitive.\n//      The \"for\" loop will run, then the \"else\" block will run.\n//      The \"else\" keyword has to be followed by the value to give to \"result\".\n//      See later for another form.\nvar sum: u8 = 0;\nconst result = for (items) |value| {\n    sum += value;\n} else 8; // result = 8\n\n// In this case, the \"else\" keyword is followed by a value, too.\n// However, the syntax is different: it is labeled.\n// Instead of a value, there is a label followed by a block of code, which\n// allows to do stuff before returning the value (see the \"break\" invocation).\nconst result = for (items) |value| { // First: loop.\n    sum += value;\n} else blk: {                        // Second: \"else\" block.\n    std.log.info(\"executed AFTER the loop!\", .{});\n    break :blk sum; // The \"sum\" value will replace the label \"blk\".\n};\n```\n\n### Switch.\n\n```zig\n// As a switch in C, but slightly more advanced.\n// Syntax:\n//   switch (value) {\n//       pattern => expression,\n//       pattern => expression,\n//       else    => expression\n//   };\n\n// A switch only checking for simple values.\nvar x = switch(value) {\n    Error.UnExpected     => return err,\n    Error.Authentication => unreachable,\n    else                 => unreachable,\n};\n\n// A slightly more advanced switch, accepting a range of values:\nconst foo: i32 = 0;\nconst bar = switch (foo) {\n    0                        => \"zero\",\n    1...std.math.maxInt(i32) => \"positive\",\n    else                     => \"negative\",\n};\n```\n\n### Structures.\n\n```zig\n// Structure containing a single value.\nconst Full = struct {\n    number: u16,\n};\n\n// Packed structure, with guaranteed in-memory layout.\nconst Divided = packed struct {\n    half1: u8,\n    quarter3: u4,\n    quarter4: u4,\n};\n\n// Point is a constant representing a structure containing two u32, \"x\" and \"y\".\n// \"x\" has a default value, which wasn't possible in C.\nconst Point = struct {\n    x: u32 = 1, // default value\n    y: u32,\n};\n\n// Variable \"p\" is a new Point, with x = 1 (default value) and y = 2.\nvar p = Point{ .y = 2 };\n\n// Fields are accessed as usual with the dot notation: variable.field.\nprint(\"p.x: {}\\n\", .{p.x}); // 1\nprint(\"p.y: {}\\n\", .{p.y}); // 2\n\n\n// A structure can also contain public constants and functions.\nconst Point = struct {\n    pub const some_constant = 30;\n\n    x: u32,\n    y: u32,\n\n    // This function \"init\" creates a Point and returns it.\n    pub fn init() Point {\n        return Point{ .x = 0, .y = 0 };\n    }\n};\n\n\n// How to access a structure public constant.\n// The value isn't accessed from an \"instance\" of the structure, but from the\n// constant representing the structure definition (Point).\nprint(\"constant: {}\\n\", .{Point.some_constant});\n\n// Having an \"init\" function is rather idiomatic in the standard library.\n// More on that later.\nvar p = Point.init();\nprint(\"p.x: {}\\n\", .{p.x}); // p.x = 0\nprint(\"p.y: {}\\n\", .{p.y}); // p.y = 0\n\n\n// Structures often have functions to modify their state, similar to\n// object-oriented programming.\nconst Point = struct {\n    const Self = @This(); // Refers to its own type (later called \"Point\").\n\n    x: u32,\n    y: u32,\n\n    // Take a look at the signature. First argument is of type *Self: \"self\" is\n    // a pointer on the instance of the structure.\n    // This allows the same \"dot\" notation as in OOP, like \"instance.set(x,y)\".\n    // See the following example.\n    pub fn set(self: *Self, x: u32, y: u32) void {\n        self.x = x;\n        self.y = y;\n    }\n\n    // Again, look at the signature. First argument is of type Self (not *Self),\n    // this isn't a pointer. In this case, \"self\" refers to the instance of the\n    // structure, but can't be modified.\n    pub fn getx(self: Self) u32 {\n        return self.x;\n    }\n\n    // PS: two previous functions may be somewhat useless.\n    //     Attributes can be changed directly, no need for accessor functions.\n    //     It was just an example.\n};\n\n// Let's use the previous structure.\nvar p = Point{ .x = 0, .y = 0 }; // \"p\" variable is a Point.\n\np.set(10, 30); // x and y attributes of \"p\" are modified via the \"set\" function.\nprint(\"p.x: {}\\n\", .{p.x}); // 10\nprint(\"p.y: {}\\n\", .{p.y}); // 30\n\n// In C:\n//   1. We would have written something like: point_set(p, 10, 30).\n//   2. Since all functions are in the same namespace, it would have been\n//      very cumbersome to create functions with different names for different\n//      structures. Many long names, painful to read.\n//\n// In Zig, structures provide namespaces for their own functions.\n// Different structures can have the same names for their functions,\n// which brings clarity.\n```\n\n### Tuples.\n\n```zig\n// A tuple is a list of elements, possibly of different types.\n\nconst foo = .{ \"hello\", true, 42 };\n// foo.len == 3\n```\n\n### Enumerations.\n\n```zig\nconst Type = enum { ok, not_ok };\n\nconst CardinalDirections = enum { North, South, East, West };\nconst direction: CardinalDirections = .North;\nconst x = switch (direction) {\n    // shorthand for CardinalDirections.North\n    .North => true,\n    else => false\n};\n\n// Switch statements need exhaustiveness.\n// WARNING: won't compile. East and West are missing.\nconst x = switch (direction) {\n    .North => true,\n    .South => true,\n};\n\n// This compiles without errors, since it exhaustively lists all possible values\nconst x = switch (direction) {\n    .North => true,\n    .South => true,\n    .East,          // Its value is the same as the following pattern: false.\n    .West => false,\n};\n\n\n// Enumerations are like structures: they can have functions.\n```\n\n### Unions.\n\n```zig\nconst Bar = union {\n    boolean: bool,\n    int: i16,\n    float: f32,\n};\n\n// Both syntaxes are equivalent.\nconst foo = Bar{ .int = 42 };\nconst foo: Bar = .{ .int = 42 };\n\n// Unions, like enumerations and structures, can have functions.\n```\n\n### Tagged unions.\n\n```zig\n// Unions can be declared with an enum tag type, allowing them to be used in\n// switch expressions.\n\nconst MaybeEnum = enum {\n    success,\n    failure,\n};\n\nconst Maybe = union(MaybeEnum) {\n    success: u8,\n    failure: []const u8,\n};\n\n// First value: success!\nconst yay = Maybe{ .success = 42 };\nswitch (yay) {\n    .success => |value|     std.log.info(\"success: {}\", .{value}),\n    .failure => |err_msg|   std.log.info(\"failure: {}\", .{err_msg}),\n}\n\n// Second value: failure! :(\nconst nay = Maybe{ .failure = \"I was too lazy\" };\nswitch (nay) {\n    .success => |value|     std.log.info(\"success: {}\", .{value}),\n    .failure => |err_msg|   std.log.info(\"failure: {}\", .{err_msg}),\n}\n```\n\n### Defer and errdefer.\n\n```zig\n// Make sure that an action (single instruction or block of code) is executed\n// before the end of the scope (function, block of code).\n// Even on error, that action will be executed.\n// Useful for memory allocations, and resource management in general.\n\npub fn main() void {\n    // Should be executed at the end of the function.\n    defer print(\"third!\\n\", .{});\n\n    {\n        // Last element of its scope: will be executed right away.\n        defer print(\"first!\\n\", .{});\n    }\n\n    print(\"second!\\n\", .{});\n}\n\nfn hello_world() void {\n    defer print(\"end of function\\n\", .{}); // after \"hello world!\"\n\n    print(\"hello world!\\n\", .{});\n}\n\n// errdefer executes the instruction (or block of code) only on error.\nfn second_hello_world() !void {\n    errdefer print(\"2. something went wrong!\\n\", .{}); // if \"foo\" fails.\n    defer    print(\"1. second hello world\\n\", .{});    // executed after \"foo\"\n\n    try foo();\n}\n// Defer statements can be seen as stacked: first one is executed last.\n```\n\n### Memory allocators.\nMemory isn't managed directly in the standard library, instead an \"allocator\" is asked every time an operation on memory is required.\nThus, the standard library lets developers handle memory as they need, through structures called \"allocators\", handling all memory operations.\n\n**NOTE**: the choice of the allocator isn't in the scope of this document.\nA whole book could be written about it.\nHowever, here are some examples, to get an idea of what you can expect:\n\n- `page_allocator`.\n  Allocate a whole page of memory each time we ask for some memory.\n  Very simple, very dumb, very wasteful.\n- `GeneralPurposeAllocator`.\n  Get some memory first and manage some buckets of memory in order to\n  reduce the number of allocations.\n  A bit complex. Can be combined with other allocators.\n  Can detect leaks and provide useful information to find them.\n- `FixedBufferAllocator`.\n  Use a fixed buffer to get its memory, don't ask memory to the kernel.\n  Very simple, limited and wasteful (can't deallocate), but very fast.\n- `ArenaAllocator`.\n  Allow to free all allocated memory at once.\n  To use in combinations with another allocator.\n  Very simple way of avoiding leaks.\n\nA first example.\n\n```zig\n// \"!void\" means the function doesn't return any value except for errors.\n// In this case we try to allocate memory, and this may fail.\nfn foo() !void {\n    // In this example we use a page allocator.\n    var allocator = std.heap.page_allocator;\n\n    // \"list\" is an ArrayList of 8-bit unsigned integers.\n    // An ArrayList is a contiguous, growable list of elements in memory.\n    var list = try ArrayList(u8).initAllocated(allocator);\n    defer list.deinit(); // Free the memory at the end of the scope. Can't leak.\n    // \"defer\" allows to express memory release right after its allocation,\n    // regardless of the complexity of the function (loops, conditions, etc.).\n\n    list.add(5); // Some memory is allocated here, with the provided allocator.\n\n    for (list.items) |item| {\n        std.debug.print(\"item: {}\\n\", .{item});\n    }\n}\n```\n\n### Memory allocation combined with error management and defer.\n\n```zig\nfn some_memory_allocation_example() !void {\n    // Memory allocation may fail, so we \"try\" to allocate the memory and\n    // in case there is an error, the current function returns it.\n    var buf = try page_allocator.alloc(u8, 10);\n    // Defer memory release right after the allocation.\n    // Will happen even if an error occurs.\n    defer page_allocator.free(buf);\n\n    // Second allocation.\n    // In case of a failure, the first allocation is correctly released.\n    var buf2 = try page_allocator.alloc(u8, 10);\n    defer page_allocator.free(buf2);\n\n    // In case of failure, both previous allocations are correctly deallocated.\n    try foo();\n    try bar();\n\n    // ...\n}\n```\n\n### Memory allocators: a taste of the standard library.\n\n```zig\n// Allocators: 4 main functions to know\n//   single_value = create (type)\n//   destroy (single_value)\n//   slice = alloc (type, size)\n//   free (slice)\n\n// Page Allocator\nfn page_allocator_fn() !void {\n    var slice = try std.heap.page_allocator.alloc(u8, 3);\n    defer std.heap.page_allocator.free(slice);\n\n    // playing_with_a_slice(slice);\n}\n\n// GeneralPurposeAllocator\nfn general_purpose_allocator_fn() !void {\n    // GeneralPurposeAllocator has to be configured.\n    // In this case, we want to track down memory leaks.\n    const config = .{.safety = true};\n    var gpa = std.heap.GeneralPurposeAllocator(config){};\n    defer _ = gpa.deinit();\n\n    const allocator = gpa.allocator();\n\n    var slice = try allocator.alloc(u8, 3);\n    defer allocator.free(slice);\n\n    // playing_with_a_slice(slice);\n}\n\n// FixedBufferAllocator\nfn fixed_buffer_allocator_fn() !void {\n    var buffer = [_]u8{0} ** 1000; // array of 1000 u8, all initialized at zero.\n    var fba  = std.heap.FixedBufferAllocator.init(buffer[0..]);\n    // Side note: buffer[0..] is a way to create a slice from an array.\n    //            Since the function takes a slice and not an array, this makes\n    //            the type system happy.\n\n    var allocator = fba.allocator();\n\n    var slice = try allocator.alloc(u8, 3);\n    // No need for \"free\", memory cannot be freed with a fixed buffer allocator.\n    // defer allocator.free(slice);\n\n    // playing_with_a_slice(slice);\n}\n\n// ArenaAllocator\nfn arena_allocator_fn() !void {\n    // Reminder: arena doesn't allocate memory, it uses an inner allocator.\n    // In this case, we combine the arena allocator with the page allocator.\n    var arena = std.heap.arena_allocator.init(std.heap.page_allocator);\n    defer arena.deinit(); // end of function = all allocations are freed.\n\n    var allocator = arena.allocator();\n\n    const slice = try allocator.alloc(u8, 3);\n    // No need for \"free\", memory will be freed anyway.\n\n    // playing_with_a_slice(slice);\n}\n\n\n// Combining the general purpose and arena allocators. Both are very useful,\n// and their combinations should be in everyone's favorite cookbook.\nfn gpa_arena_allocator_fn() !void {\n    const config = .{.safety = true};\n    var gpa = std.heap.GeneralPurposeAllocator(config){};\n    defer _ = gpa.deinit();\n\n    const gpa_allocator = gpa.allocator();\n\n    var arena = arena_allocator.init(gpa_allocator);\n    defer arena.deinit();\n\n    const allocator = arena.allocator();\n\n    var slice = try allocator.alloc(u8, 3);\n    defer allocator.free(slice);\n\n    // playing_with_a_slice(slice);\n}\n```\n\n### Comptime.\n\n```zig\n// Comptime is a way to avoid the pre-processor.\n// The idea is simple: run code at compilation.\n\ninline fn max(comptime T: type, a: T, b: T) T {\n    return if (a > b) a else b;\n}\n\nvar res = max(u64, 1, 2);\nvar res = max(f32, 10.50, 32.19);\n\n\n// Comptime: creating generic structures.\n\nfn List(comptime T: type) type {\n    return struct {\n        items: []T,\n\n        fn init()   ... { ... }\n        fn deinit() ... { ... }\n        fn do()     ... { ... }\n    };\n}\n\nconst MyList = List(u8);\n\n\n// use\nvar list = MyList{\n    .items = ... // memory allocation\n};\n\nlist.items[0] = 10;\n```\n\n### Conditional compilation.\n\n```zig\nconst available_os = enum { OpenBSD, Linux };\nconst myos = available_os.OpenBSD;\n\n\n// The following switch is based on a constant value.\n// This means that the only possible outcome is known at compile-time.\n// Thus, there is no need to build the rest of the possibilities.\n// Similar to the \"#ifdef\" in C, but without requiring a pre-processor.\nconst string = switch (myos) {\n   .OpenBSD => \"OpenBSD is awesome!\",\n   .Linux => \"Linux rocks!\",\n};\n\n// Also works in this case.\nconst myprint = switch(myos) {\n    .OpenBSD => std.debug.print,\n    .Linux => std.log.info,\n}\n```\n\n### Testing our functions.\n\n```zig\nconst std = @import(\"std\");\nconst expect = std.testing.expect;\n\n// Function to test.\npub fn some_function() bool {\n    return true;\n}\n\n// This \"test\" block can be run with \"zig test\".\n// It will test the function at compile-time.\ntest \"returns true\" {\n    expect(false == some_function());\n}\n```\n\n### Compiler built-ins.\n\nThe compiler has special functions called \"built-ins\", starting with an \"@\".\nThere are more than a hundred built-ins, allowing very low-level stuff:\n\n- compile-time errors, logging, verifications\n- type coercion and conversion, even in an unsafe way\n- alignment management\n- memory tricks (such as getting the byte offset of a field in a struct)\n- calling functions at compile-time\n- including C headers to transparently call C functions\n- atomic operations\n- embed files into the executable (@embedFile)\n- frame manipulations (for async functions, for example)\n- etc.\n\nExample: enums aren't integers, they have to be converted with a built-in.\n\n```zig\nconst Value = enum { zero, stuff, blah };\nif (@enumToInt(Value.zero)  == 0) { ... }\nif (@enumToInt(Value.stuff) == 1) { ... }\nif (@enumToInt(Value.blah)  == 2) { ... }\n```\n\n### A few \"not yourself in the foot\" measures in the Zig language.\n\n- Namespaces: name conflicts are easily avoided.\n  In practice, that means a unified API between different structures (data types).\n- Enumerations aren't integers. Comparing an enumeration to an integer requires a conversion.\n- Explicit casts, coercion exists but is limited.\n  Types are slightly more enforced than in C, just a taste:\n    Pointers aren't integers, explicit conversion is necessary.\n    You won't lose precision by accident, implicit coercions are only authorized in cases where no precision can be lost.\n    Unions cannot be reinterpreted (in a union with an integer and a float, one cannot take a value for another by accident).\n    Etc.\n- Removing most of the C undefined behaviors (UBs), and when the compiler encounters one, it stops.\n- Slice and Array structures are preferred to pointers.\n  Types enforced by the compiler are less prone to errors than pointer manipulations.\n- Numerical overflows produce an error, unless explicitly accepted using wrapping operators.\n- `try` and `catch` mechanism.\n  It's both handy, trivially implemented (simple error enumeration), and it takes almost no space nor computation time.\n- Unused variables are considered to be errors by the compiler.\n- Many pointer types exist in order to represent what is pointed to.\n  Example: is this a single value or an array, is the length known, etc.\n- Structures need a value for their attributes, and it is still possible to give an undefined value (stack garbage), but at least it is explicitly undefined.\n\n## Further Reading\n\nFor a start, some concepts are presented on [zig.guide][zigguide].\n\nThe [official website][zigdoc] provides the reference documentation of the language. The standard library [has its own documentation][zigstd].\n\n[ziglang]: https://ziglang.org\n[zigguide]: https://zig.guide/\n[zigdoc]: https://ziglang.org/documentation/\n[zigstd]: https://ziglang.org/documentation/master/std/\n"
        }
      ]
    }
  ]
}