{
  "metadata": {
    "timestamp": 1736709646980,
    "page": 3,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjU=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-lang/rfcs",
      "stars": 6017,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0244140625,
          "content": "*.md linguist-detectable\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.013671875,
          "content": "*~\nbook/\nsrc/\n"
        },
        {
          "name": "0000-template.md",
          "type": "blob",
          "size": 5.2314453125,
          "content": "- Feature Name: (fill me in with a unique ident, `my_awesome_feature`)\n- Start Date: (fill me in with today's date, YYYY-MM-DD)\n- RFC PR: [rust-lang/rfcs#0000](https://github.com/rust-lang/rfcs/pull/0000)\n- Rust Issue: [rust-lang/rust#0000](https://github.com/rust-lang/rust/issues/0000)\n\n# Summary\n[summary]: #summary\n\nOne paragraph explanation of the feature.\n\n# Motivation\n[motivation]: #motivation\n\nWhy are we doing this? What use cases does it support? What is the expected outcome?\n\n# Guide-level explanation\n[guide-level-explanation]: #guide-level-explanation\n\nExplain the proposal as if it was already included in the language and you were teaching it to another Rust programmer. That generally means:\n\n- Introducing new named concepts.\n- Explaining the feature largely in terms of examples.\n- Explaining how Rust programmers should *think* about the feature, and how it should impact the way they use Rust. It should explain the impact as concretely as possible.\n- If applicable, provide sample error messages, deprecation warnings, or migration guidance.\n- If applicable, describe the differences between teaching this to existing Rust programmers and new Rust programmers.\n- Discuss how this impacts the ability to read, understand, and maintain Rust code. Code is read and modified far more often than written; will the proposed feature make code easier to maintain?\n\nFor implementation-oriented RFCs (e.g. for compiler internals), this section should focus on how compiler contributors should think about the change, and give examples of its concrete impact. For policy RFCs, this section should provide an example-driven introduction to the policy, and explain its impact in concrete terms.\n\n# Reference-level explanation\n[reference-level-explanation]: #reference-level-explanation\n\nThis is the technical portion of the RFC. Explain the design in sufficient detail that:\n\n- Its interaction with other features is clear.\n- It is reasonably clear how the feature would be implemented.\n- Corner cases are dissected by example.\n\nThe section should return to the examples given in the previous section, and explain more fully how the detailed proposal makes those examples work.\n\n# Drawbacks\n[drawbacks]: #drawbacks\n\nWhy should we *not* do this?\n\n# Rationale and alternatives\n[rationale-and-alternatives]: #rationale-and-alternatives\n\n- Why is this design the best in the space of possible designs?\n- What other designs have been considered and what is the rationale for not choosing them?\n- What is the impact of not doing this?\n- If this is a language proposal, could this be done in a library or macro instead? Does the proposed change make Rust code easier or harder to read, understand, and maintain?\n\n# Prior art\n[prior-art]: #prior-art\n\nDiscuss prior art, both the good and the bad, in relation to this proposal.\nA few examples of what this can include are:\n\n- For language, library, cargo, tools, and compiler proposals: Does this feature exist in other programming languages and what experience have their community had?\n- For community proposals: Is this done by some other community and what were their experiences with it?\n- For other teams: What lessons can we learn from what other communities have done here?\n- Papers: Are there any published papers or great posts that discuss this? If you have some relevant papers to refer to, this can serve as a more detailed theoretical background.\n\nThis section is intended to encourage you as an author to think about the lessons from other languages, provide readers of your RFC with a fuller picture.\nIf there is no prior art, that is fine - your ideas are interesting to us whether they are brand new or if it is an adaptation from other languages.\n\nNote that while precedent set by other languages is some motivation, it does not on its own motivate an RFC.\nPlease also take into consideration that rust sometimes intentionally diverges from common language features.\n\n# Unresolved questions\n[unresolved-questions]: #unresolved-questions\n\n- What parts of the design do you expect to resolve through the RFC process before this gets merged?\n- What parts of the design do you expect to resolve through the implementation of this feature before stabilization?\n- What related issues do you consider out of scope for this RFC that could be addressed in the future independently of the solution that comes out of this RFC?\n\n# Future possibilities\n[future-possibilities]: #future-possibilities\n\nThink about what the natural extension and evolution of your proposal would\nbe and how it would affect the language and project as a whole in a holistic\nway. Try to use this section as a tool to more fully consider all possible\ninteractions with the project and language in your proposal.\nAlso consider how this all fits into the roadmap for the project\nand of the relevant sub-team.\n\nThis is also a good place to \"dump ideas\", if they are out of scope for the\nRFC you are writing but otherwise related.\n\nIf you have tried and cannot think of any future possibilities,\nyou may simply state that you cannot think of anything.\n\nNote that having something written down in the future-possibilities section\nis not a reason to accept the current or a future RFC; such notes should be\nin the section on motivation or rationale in this or subsequent RFCs.\nThe section merely provides additional information.\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 0.9990234375,
          "content": "Permission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.421875,
          "content": "# Rust RFCs - [RFC Book](https://rust-lang.github.io/rfcs/) - [Active RFC List](https://rfcbot.rs/)\n\n[Rust RFCs]: #rust-rfcs\n\nThe \"RFC\" (request for comments) process is intended to provide a consistent\nand controlled path for changes to Rust (such as new features) so that all\nstakeholders can be confident about the direction of the project.\n\nMany changes, including bug fixes and documentation improvements can be\nimplemented and reviewed via the normal GitHub pull request workflow.\n\nSome changes though are \"substantial\", and we ask that these be put through a\nbit of a design process and produce a consensus among the Rust community and\nthe [sub-team]s.\n\n## Table of Contents\n[Table of Contents]: #table-of-contents\n\n  - [Opening](#rust-rfcs)\n  - [Table of Contents]\n  - [When you need to follow this process]\n  - [Sub-team specific guidelines]\n  - [Before creating an RFC]\n  - [What the process is]\n  - [The RFC life-cycle]\n  - [Reviewing RFCs]\n  - [Implementing an RFC]\n  - [RFC Postponement]\n  - [Help this is all too informal!]\n  - [License]\n  - [Contributions]\n\n\n## When you need to follow this process\n[When you need to follow this process]: #when-you-need-to-follow-this-process\n\nYou need to follow this process if you intend to make \"substantial\" changes to\nRust, Cargo, Crates.io, or the RFC process itself. What constitutes a\n\"substantial\" change is evolving based on community norms and varies depending\non what part of the ecosystem you are proposing to change, but may include the\nfollowing.\n\n  - Any semantic or syntactic change to the language that is not a bugfix.\n  - Removing language features, including those that are feature-gated.\n  - Changes to the interface between the compiler and libraries, including lang\n    items and intrinsics.\n  - Additions to `std`.\n\nSome changes do not require an RFC:\n\n  - Rephrasing, reorganizing, refactoring, or otherwise \"changing shape does\n    not change meaning\".\n  - Additions that strictly improve objective, numerical quality criteria\n    (warning removal, speedup, better platform coverage, more parallelism, trap\n    more errors, etc.)\n  - Additions only likely to be _noticed by_ other developers-of-rust,\n    invisible to users-of-rust.\n\nIf you submit a pull request to implement a new feature without going through\nthe RFC process, it may be closed with a polite request to submit an RFC first.\n\n\n### Sub-team specific guidelines\n[Sub-team specific guidelines]: #sub-team-specific-guidelines\n\nFor more details on when an RFC is required for the following areas, please see\nthe Rust community's [sub-team] specific guidelines for:\n\n  - [language changes](lang_changes.md),\n  - [library changes](libs_changes.md),\n  - [compiler changes](compiler_changes.md).\n\n\n## Before creating an RFC\n[Before creating an RFC]: #before-creating-an-rfc\n\nA hastily-proposed RFC can hurt its chances of acceptance. Low quality\nproposals, proposals for previously-rejected features, or those that don't fit\ninto the near-term roadmap, may be quickly rejected, which can be demotivating\nfor the unprepared contributor. Laying some groundwork ahead of the RFC can\nmake the process smoother.\n\nAlthough there is no single way to prepare for submitting an RFC, it is\ngenerally a good idea to pursue feedback from other project developers\nbeforehand, to ascertain that the RFC may be desirable; having a consistent\nimpact on the project requires concerted effort toward consensus-building.\n\nThe most common preparations for writing and submitting an RFC include talking\nthe idea over on our [official Zulip server], discussing the topic on our\n[developer discussion forum], and occasionally posting \"pre-RFCs\" on the\ndeveloper forum. You may file issues on this repo for discussion, but these are\nnot actively looked at by the teams.\n\nAs a rule of thumb, receiving encouraging feedback from long-standing project\ndevelopers, and particularly members of the relevant [sub-team] is a good\nindication that the RFC is worth pursuing.\n\n\n## What the process is\n[What the process is]: #what-the-process-is\n\nIn short, to get a major feature added to Rust, one must first get the RFC\nmerged into the RFC repository as a markdown file. At that point the RFC is\n\"active\" and may be implemented with the goal of eventual inclusion into Rust.\n\n  - Fork the RFC repo [RFC repository]\n  - Copy `0000-template.md` to `text/0000-my-feature.md` (where \"my-feature\" is\n    descriptive). Don't assign an RFC number yet; This is going to be the PR\n    number and we'll rename the file accordingly if the RFC is accepted.\n  - Fill in the RFC. Put care into the details: RFCs that do not present\n    convincing motivation, demonstrate lack of understanding of the design's\n    impact, or are disingenuous about the drawbacks or alternatives tend to\n    be poorly-received.\n  - Submit a pull request. As a pull request the RFC will receive design\n    feedback from the larger community, and the author should be prepared to\n    revise it in response.\n  - Now that your RFC has an open pull request, use the issue number of the PR\n    to rename the file: update your `0000-` prefix to that number. Also\n    update the \"RFC PR\" link at the top of the file.\n  - Each pull request will be labeled with the most relevant [sub-team], which\n    will lead to its being triaged by that team in a future meeting and assigned\n    to a member of the subteam.\n  - Build consensus and integrate feedback. RFCs that have broad support are\n    much more likely to make progress than those that don't receive any\n    comments. Feel free to reach out to the RFC assignee in particular to get\n    help identifying stakeholders and obstacles.\n  - The sub-team will discuss the RFC pull request, as much as possible in the\n    comment thread of the pull request itself. Offline discussion will be\n    summarized on the pull request comment thread.\n  - RFCs rarely go through this process unchanged, especially as alternatives\n    and drawbacks are shown. You can make edits, big and small, to the RFC to\n    clarify or change the design, but make changes as new commits to the pull\n    request, and leave a comment on the pull request explaining your changes.\n    Specifically, do not squash or rebase commits after they are visible on the\n    pull request.\n  - At some point, a member of the subteam will propose a \"motion for final\n    comment period\" (FCP), along with a *disposition* for the RFC (merge, close,\n    or postpone).\n    - This step is taken when enough of the tradeoffs have been discussed that\n      the subteam is in a position to make a decision. That does not require\n      consensus amongst all participants in the RFC thread (which is usually\n      impossible). However, the argument supporting the disposition on the RFC\n      needs to have already been clearly articulated, and there should not be a\n      strong consensus *against* that position outside of the subteam. Subteam\n      members use their best judgment in taking this step, and the FCP itself\n      ensures there is ample time and notification for stakeholders to push\n      back if it is made prematurely.\n    - For RFCs with lengthy discussion, the motion to FCP is usually preceded by\n      a *summary comment* trying to lay out the current state of the discussion\n      and major tradeoffs/points of disagreement.\n    - Before actually entering FCP, *all* members of the subteam must sign off;\n      this is often the point at which many subteam members first review the\n      RFC in full depth.\n  - The FCP lasts ten calendar days, so that it is open for at least 5 business\n    days. It is also advertised widely,\n    e.g. in [This Week in Rust](https://this-week-in-rust.org/). This way all\n    stakeholders have a chance to lodge any final objections before a decision\n    is reached.\n  - In most cases, the FCP period is quiet, and the RFC is either merged or\n    closed. However, sometimes substantial new arguments or ideas are raised,\n    the FCP is canceled, and the RFC goes back into development mode.\n\n## The RFC life-cycle\n[The RFC life-cycle]: #the-rfc-life-cycle\n\nOnce an RFC becomes \"active\" then authors may implement it and submit the\nfeature as a pull request to the Rust repo. Being \"active\" is not a rubber\nstamp, and in particular still does not mean the feature will ultimately be\nmerged; it does mean that in principle all the major stakeholders have agreed\nto the feature and are amenable to merging it.\n\nFurthermore, the fact that a given RFC has been accepted and is \"active\"\nimplies nothing about what priority is assigned to its implementation, nor does\nit imply anything about whether a Rust developer has been assigned the task of\nimplementing the feature. While it is not *necessary* that the author of the\nRFC also write the implementation, it is by far the most effective way to see\nan RFC through to completion: authors should not expect that other project\ndevelopers will take on responsibility for implementing their accepted feature.\n\nModifications to \"active\" RFCs can be done in follow-up pull requests. We\nstrive to write each RFC in a manner that it will reflect the final design of\nthe feature; but the nature of the process means that we cannot expect every\nmerged RFC to actually reflect what the end result will be at the time of the\nnext major release.\n\nIn general, once accepted, RFCs should not be substantially changed. Only very\nminor changes should be submitted as amendments. More substantial changes\nshould be new RFCs, with a note added to the original RFC. Exactly what counts\nas a \"very minor change\" is up to the sub-team to decide; check\n[Sub-team specific guidelines] for more details.\n\n\n## Reviewing RFCs\n[Reviewing RFCs]: #reviewing-rfcs\n\nWhile the RFC pull request is up, the sub-team may schedule meetings with the\nauthor and/or relevant stakeholders to discuss the issues in greater detail,\nand in some cases the topic may be discussed at a sub-team meeting. In either\ncase a summary from the meeting will be posted back to the RFC pull request.\n\nA sub-team makes final decisions about RFCs after the benefits and drawbacks\nare well understood. These decisions can be made at any time, but the sub-team\nwill regularly issue decisions. When a decision is made, the RFC pull request\nwill either be merged or closed. In either case, if the reasoning is not clear\nfrom the discussion in thread, the sub-team will add a comment describing the\nrationale for the decision.\n\n\n## Implementing an RFC\n[Implementing an RFC]: #implementing-an-rfc\n\nSome accepted RFCs represent vital features that need to be implemented right\naway. Other accepted RFCs can represent features that can wait until some\narbitrary developer feels like doing the work. Every accepted RFC has an\nassociated issue tracking its implementation in the Rust repository; thus that\nassociated issue can be assigned a priority via the triage process that the\nteam uses for all issues in the Rust repository.\n\nThe author of an RFC is not obligated to implement it. Of course, the RFC\nauthor (like any other developer) is welcome to post an implementation for\nreview after the RFC has been accepted.\n\nIf you are interested in working on the implementation for an \"active\" RFC, but\ncannot determine if someone else is already working on it, feel free to ask\n(e.g. by leaving a comment on the associated issue).\n\n\n## RFC Postponement\n[RFC Postponement]: #rfc-postponement\n\nSome RFC pull requests are tagged with the \"postponed\" label when they are\nclosed (as part of the rejection process). An RFC closed with \"postponed\" is\nmarked as such because we want neither to think about evaluating the proposal\nnor about implementing the described feature until some time in the future, and\nwe believe that we can afford to wait until then to do so. Historically,\n\"postponed\" was used to postpone features until after 1.0. Postponed pull\nrequests may be re-opened when the time is right. We don't have any formal\nprocess for that, you should ask members of the relevant sub-team.\n\nUsually an RFC pull request marked as \"postponed\" has already passed an\ninformal first round of evaluation, namely the round of \"do we think we would\never possibly consider making this change, as outlined in the RFC pull request,\nor some semi-obvious variation of it.\" (When the answer to the latter question\nis \"no\", then the appropriate response is to close the RFC, not postpone it.)\n\n\n### Help this is all too informal!\n[Help this is all too informal!]: #help-this-is-all-too-informal\n\nThe process is intended to be as lightweight as reasonable for the present\ncircumstances. As usual, we are trying to let the process be driven by\nconsensus and community norms, not impose more structure than necessary.\n\n\n## License\n[License]: #license\n\nThis repository is currently in the process of being licensed under either of:\n\n* Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or https://www.apache.org/licenses/LICENSE-2.0)\n* MIT license ([LICENSE-MIT](LICENSE-MIT) or https://opensource.org/licenses/MIT)\n\nat your option. Some parts of the repository are already licensed according to those terms. For more see [RFC 2044](https://github.com/rust-lang/rfcs/pull/2044) and its [tracking issue](https://github.com/rust-lang/rust/issues/43461).\n\n\n### Contributions\n[Contributions]: #contributions\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n\n[official Zulip server]: https://rust-lang.zulipchat.com/\n[developer discussion forum]: https://internals.rust-lang.org/\n[RFC repository]: https://github.com/rust-lang/rfcs\n[sub-team]: https://www.rust-lang.org/team.html\n"
        },
        {
          "name": "book.toml",
          "type": "blob",
          "size": 0.25390625,
          "content": "[book]\ntitle = \"The Rust RFC Book\"\n\n[output.html]\ncurly-quotes = true\nno-section-label = true\ngit-repository-url = \"https://github.com/rust-lang/rfcs\"\nsite-url = \"/rfcs/\"\n\n[output.html.search]\nheading-split-level = 0\n\n[output.html.playground]\nrunnable = false\n"
        },
        {
          "name": "compiler_changes.md",
          "type": "blob",
          "size": 2.22265625,
          "content": "# RFC policy - the compiler\n\nCompiler RFCs will be managed by the compiler sub-team, and tagged `T-compiler`.\nThe compiler sub-team will do an initial triage of new PRs within a week of\nsubmission. The result of triage will either be that the PR is assigned to a\nmember of the sub-team for shepherding, the PR is closed because the sub-team\nbelieve it should be done without an RFC, or closed because the sub-team feel it\nshould clearly not be done and further discussion is not necessary. We'll follow\nthe standard procedure for shepherding, final comment period, etc.\n\nMost compiler decisions that go beyond the scope of a simple PR are done using [MCP]s,\nnot RFCs. It is therefore likely that you should file an MCP instead of an RFC for your problem.\n\n## Changes which need an RFC\n\n* Significant user-facing changes to the compiler with a complex design space,\n  especially if they involve other teams as well (for example, [path sanitization]).\n* Any other change which causes significant backwards incompatible changes to stable\n  behaviour of the compiler, language, or libraries\n\n## Changes which don't need an RFC\n\n* Bug fixes, improved error messages, etc.\n* Minor refactoring/tidying up\n* Large internal refactorings or redesigns of the compiler (needs an [MCP])\n* Implementing language features which have an accepted RFC.\n* New lints (these fall under the lang team). Lints are best first tried out in clippy\n  and then uplifted later.\n* Changing the API presented to syntax extensions or other compiler plugins in\n  non-trivial ways\n* Adding, removing, or changing a stable compiler flag\n  (needs an FCP somewhere, like on an [MCP] or just on a PR)\n* Adding unstable API for tools (note that all compiler API is currently unstable)\n* Adding, removing, or changing an unstable compiler flag (if the compiler flag\n  is widely used there should be at least some discussion on discuss, or an RFC\n  in some cases)\n\nIf in doubt it is probably best to just announce the change you want to make to\nthe compiler subteam on [Zulip], and see if anyone feels it needs an RFC.\n\n[MCP]: https://github.com/rust-lang/compiler-team/issues\n[path sanitization]: https://github.com/rust-lang/rfcs/pull/3127\n[Zulip]: https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler\n\n"
        },
        {
          "name": "generate-book.py",
          "type": "blob",
          "size": 2.2080078125,
          "content": "#!/usr/bin/env python3\n\n\"\"\"\nThis auto-generates the mdBook SUMMARY.md file based on the layout on the filesystem.\n\nThis generates the `src` directory based on the contents of the `text` directory.\n\nMost RFCs should be kept to a single chapter. However, in some rare cases it\nmay be necessary to spread across multiple pages. In that case, place them in\na subdirectory with the same name as the RFC. For example:\n\n    0123-my-awesome-feature.md\n    0123-my-awesome-feature/extra-material.md\n\nIt is recommended that if you have static content like images that you use a similar layout:\n\n    0123-my-awesome-feature.md\n    0123-my-awesome-feature/diagram.svg\n\nThe chapters are presented in sorted-order.\n\"\"\"\n\nimport os\nimport shutil\nimport subprocess\n\ndef main():\n    if os.path.exists('src'):\n        # Clear out src to remove stale links in case you switch branches.\n        shutil.rmtree('src')\n    os.mkdir('src')\n\n    for path in os.listdir('text'):\n        symlink(f'../text/{path}', f'src/{path}')\n    symlink(f'../compiler_changes.md', f'src/compiler_changes.md')\n    symlink(f'../lang_changes.md', f'src/lang_changes.md')\n    symlink(f'../libs_changes.md', f'src/libs_changes.md')\n    symlink('../README.md', 'src/introduction.md')\n\n    with open('src/SUMMARY.md', 'w') as summary:\n        summary.write('[Introduction](introduction.md)\\n\\n')\n        summary.write('- [Guidelines for compiler changes](compiler_changes.md)\\n')\n        summary.write('- [Guidelines for language changes](lang_changes.md)\\n')\n        summary.write('- [Guidelines for library changes](libs_changes.md)\\n')\n        collect(summary, 'text', 0)\n\n    subprocess.call(['mdbook', 'build'])\n\ndef collect(summary, path, depth):\n    entries = [e for e in os.scandir(path) if e.name.endswith('.md')]\n    entries.sort(key=lambda e: e.name)\n    for entry in entries:\n        indent = '    '*depth\n        name = entry.name[:-3]\n        link_path = entry.path[5:]\n        summary.write(f'{indent}- [{name}]({link_path})\\n')\n        maybe_subdir = os.path.join(path, name)\n        if os.path.isdir(maybe_subdir):\n            collect(summary, maybe_subdir, depth+1)\n\ndef symlink(src, dst):\n    if not os.path.exists(dst):\n        os.symlink(src, dst)\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "lang_changes.md",
          "type": "blob",
          "size": 1.9775390625,
          "content": "# RFC policy - language design\n\nPretty much every change to the language needs an RFC. Note that new\nlints (or major changes to an existing lint) are considered changes to\nthe language.\n\nLanguage RFCs are managed by the language sub-team, and tagged `T-lang`. The\nlanguage sub-team will do an initial triage of new PRs within a week of\nsubmission. The result of triage will either be that the PR is assigned to a\nmember of the sub-team for shepherding, the PR is closed as postponed because\nthe subteam believe it might be a good idea, but is not currently aligned with\nRust's priorities, or the PR is closed because the sub-team feel it should\nclearly not be done and further discussion is not necessary. In the latter two\ncases, the sub-team will give a detailed explanation. We'll follow the standard\nprocedure for shepherding, final comment period, etc.\n\n\n## Amendments\n\nSometimes in the implementation of an RFC, changes are required. In general\nthese don't require an RFC as long as they are very minor and in the spirit of\nthe accepted RFC (essentially bug fixes). In this case implementers should\nsubmit an RFC PR which amends the accepted RFC with the new details. Although\nthe RFC repository is not intended as a reference manual, it is preferred that\nRFCs do reflect what was actually implemented. Amendment RFCs will go through\nthe same process as regular RFCs, but should be less controversial and thus\nshould move more quickly.\n\nWhen a change is more dramatic, it is better to create a new RFC. The RFC should\nbe standalone and reference the original, rather than modifying the existing\nRFC. You should add a comment to the original RFC with referencing the new RFC\nas part of the PR.\n\nObviously there is some scope for judgment here. As a guideline, if a change\naffects more than one part of the RFC (i.e., is a non-local change), affects the\napplicability of the RFC to its motivating use cases, or there are multiple\npossible new solutions, then the feature is probably not 'minor' and should get\na new RFC.\n"
        },
        {
          "name": "libs_changes.md",
          "type": "blob",
          "size": 5.5478515625,
          "content": "# RFC guidelines - libraries sub-team\n\n# Motivation\n\n* RFCs are heavyweight:\n    * RFCs generally take at minimum 2 weeks from posting to land. In\n      practice it can be more on the order of months for particularly\n      controversial changes.\n    * RFCs are a lot of effort to write; especially for non-native speakers or\n      for members of the community whose strengths are more technical than literary.\n    * RFCs may involve pre-RFCs and several rewrites to accommodate feedback.\n    * RFCs require a dedicated shepherd to herd the community and author towards\n      consensus.\n    * RFCs require review from a majority of the subteam, as well as an official\n      vote.\n    * RFCs can't be downgraded based on their complexity. Full process always applies.\n      Easy RFCs may certainly land faster, though.\n    * RFCs can be very abstract and hard to grok the consequences of (no implementation).\n\n* PRs are low *overhead* but potentially expensive nonetheless:\n    * Easy PRs can get insta-merged by any rust-lang contributor.\n    * Harder PRs can be easily escalated. You can ping subject-matter experts for second\n      opinions. Ping the whole team!\n    * Easier to grok the full consequences. Lots of tests and Crater to save the day.\n    * PRs can be accepted optimistically with bors, buildbot, and the trains to guard\n      us from major mistakes making it into stable. The size of the nightly community\n      at this point in time can still mean major community breakage regardless of trains,\n      however.\n    * HOWEVER: Big PRs can be a lot of work to make only to have that work rejected for\n      details that could have been hashed out first.\n\n* RFCs are *only* meaningful if a significant and diverse portion of the\ncommunity actively   participates in them. The official teams are not\nsufficiently diverse to establish   meaningful community consensus by agreeing\namongst themselves.\n\n* If there are *tons* of RFCs -- especially trivial ones -- people are less\nlikely to engage with them. Official team members are super busy. Domain experts\nand industry professionals are super busy *and* have no responsibility to engage\nin RFCs. Since these are *exactly* the most important people to get involved in\nthe RFC process, it is important that we be maximally friendly towards their\nneeds.\n\n\n# Is an RFC required?\n\nThe overarching philosophy is: *do whatever is easiest*. If an RFC\nwould be less work than an implementation, that's a good sign that an RFC is\nnecessary. That said, if you anticipate controversy, you might want to short-circuit\nstraight to an RFC. For instance new APIs almost certainly merit an RFC. Especially\nas `std` has become more conservative in favour of the much more agile cargoverse.\n\n* **Submit a PR** if the change is a:\n    * Bugfix\n    * Docfix\n    * Obvious API hole patch, such as adding an API from one type to a symmetric type.\n      e.g. `Vec<T> -> Box<[T]>` clearly motivates adding `String -> Box<str>`\n    * Minor tweak to an unstable API (renaming, generalizing)\n    * Implementing an \"obvious\" trait like Clone/Debug/etc\n* **Submit an RFC** if the change is a:\n    * New API\n    * Semantic Change to a stable API\n    * Generalization of a stable API (e.g. how we added Pattern or Borrow)\n    * Deprecation of a stable API\n    * Nontrivial trait impl (because all trait impls are insta-stable)\n* **Do the easier thing** if uncertain. (choosing a path is not final)\n\n\n# Non-RFC process\n\n* A (non-RFC) PR is likely to be **closed** if clearly not acceptable:\n    * Disproportionate breaking change (small inference breakage may be acceptable)\n    * Unsound\n    * Doesn't fit our general design philosophy around the problem\n    * Better as a crate\n    * Too marginal for std\n    * Significant implementation problems\n\n* A PR may also be closed because an RFC is appropriate.\n\n* A (non-RFC) PR  may be **merged as unstable**. In this case, the feature\nshould have a fresh feature gate and an associated tracking issue for\nstabilisation. Note that trait impls and docs are insta-stable and thus have no\ntracking issue. This may imply requiring a higher level of scrutiny for such\nchanges.\n\nHowever, an accepted RFC is not a rubber-stamp for merging an implementation PR.\nNor must an implementation PR perfectly match the RFC text. Implementation details\nmay merit deviations, though obviously they should be justified. The RFC may be\namended if deviations are substantial, but are not generally necessary. RFCs should\nfavour immutability. The RFC + Issue + PR should form a total explanation of the\ncurrent implementation.\n\n* Once something has been merged as unstable, a shepherd should be assigned\n  to promote and obtain feedback on the design.\n\n* Every time a release cycle ends, the libs teams assesses the current unstable\n  APIs and selects some number of them for potential stabilization during the\n  next cycle. These are announced for FCP at the beginning of the cycle, and\n  (possibly) stabilized just before the beta is cut.\n\n* After the final comment period, an API should ideally take one of two paths:\n  * **Stabilize** if the change is desired, and consensus is reached\n  * **Deprecate** is the change is undesired, and consensus is reached\n  * **Extend the FCP** is the change cannot meet consensus\n    * If consensus *still* can't be reached, consider requiring a new RFC or\n      just deprecating as \"too controversial for std\".\n\n* If any problems are found with a newly stabilized API during its beta period,\n  *strongly* favour reverting stability in order to prevent stabilizing a bad\n  API. Due to the speed of the trains, this is not a serious delay (~2-3 months\n  if it's not a major problem).\n\n\n"
        },
        {
          "name": "text",
          "type": "tree",
          "content": null
        },
        {
          "name": "triagebot.toml",
          "type": "blob",
          "size": 1.1533203125,
          "content": "[relabel]\nallow-unauthenticated = [\n    \"A-*\",\n    \"T-*\",\n    \"not-rfc\",\n]\n\n[rendered-link]\ntrigger-files = [\"text/\"]\n\n[notify-zulip.\"T-cargo\"]\nzulip_stream = 246057 # t-cargo\ntopic = \"RFC #{number} - {title}\"\nmessage_on_add = \"A new T-cargo RFC has been opened: https://github.com/rust-lang/rfcs/pull/{number}\"\n\n[notify-zulip.\"T-crates-io\"]\nzulip_stream = 318791 # t-crates-io\ntopic = \"RFC #{number} - {title}\"\nmessage_on_add = \"A new T-crates-io RFC has been opened: https://github.com/rust-lang/rfcs/pull/{number}\"\n\n[notify-zulip.\"I-types-nominated\"]\nzulip_stream = 326866 # #T-types/nominated\ntopic = \"RFC #{number}: {title}\"\nmessage_on_add = \"\"\"\\\n@*T-types* RFC [{number}](https://github.com/rust-lang/rfcs/pull/{number}) \"{title}\" has been nominated for team discussion.\n\"\"\"\nmessage_on_remove = \"RFC [{number}](https://github.com/rust-lang/rfcs/pull/{number})'s nomination has been removed. Thanks all for participating!\"\nmessage_on_close = \"RFC [{number}](https://github.com/rust-lang/rfcs/pull/{number}) has been closed. Thanks for participating!\"\nmessage_on_reopen = \"RFC [{number}](https://github.com/rust-lang/rfcs/pull/{number}) has been reopened. Pinging @*T-types*.\"\n"
        }
      ]
    }
  ]
}