{
  "metadata": {
    "timestamp": 1736709640821,
    "page": 11,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lightning/bolts",
      "stars": 2126,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".aspell.en.pws",
          "type": "blob",
          "size": 3.7275390625,
          "content": "personal_ws-1.1 en 264\nbitfields\nchecksums\ntimestamps\ntlv\ntlvs\nsubtype\nTLV\npy\nvsprintf\nglibc\nJSON\nFreenode\nnacks\nsecp\nsig\nunguessable\nlibsecp\nTCP\nDER\nmicropayments\nnhops\nretransmitted\ndev\ntradeoff\nkiloweight\nmixHeader\nuint\nhopsData\nbitfield\nB'th\ndecrypting\nrhokey\nrhoKey\nbuf\nmillisatoshis\nyToX\nfunder's\nIRATEMONK\nwpkh\nnextHmac\nbasepoint\nstreamKey\nlocalpubkey\npaymentPath\nSPV\nHopData\nCSV\nxFFFFFFFFFF\nplaintext\nEQUALVERIFY\nAEAD\nsecretkey\nTripleDH\naddr\nCHECKMULTISIG\ndecryptWithAD\nroutable\nepk\nscriptpubkey\nmukey\nmuKey\nsharedSecretSize\nDUP\nsharedSecrets\nxFFFFFFFFFFFF\ncryptographic\ngenerateSharedSecret\ninstantiations\ndeterministically\ndeduplication\nFIPS\nresponder\nUTF\nblockchain\nBlockstream\nnSequence\ndecrypt\nflen\nincrementing\nfeerate\naffine\nCHECKSEQUENCEVERIFY\nnonces\niff\nserializeCompressed\nprepended\nroasbeef\nmultisig\nnodepk\nremotesig\nhopBlindingFactors\nECDH\naddrlen\nassocData\nActOne\nammag\ncomputeBlindingFactor\nwsh\nmultiScalarMult\nonionpacket\nOnionPacket\nikm\nfillerSize\ntxinput\ninit\nreconnection\nmilli\nrevocationsig\nNOTIF\ngenerateHeaderPadding\nIPv\nipv\nsatoshi\ndelayedsig\nhopDataSize\nI'th\nsegwit\nRBF\naccepter\naccepter's\nsubtype\nredeemScript\nscriptSig\nutxo\nscriptPubKey\nscriptPubKeys\nscriptlen\nsats\nhtlc\nhtlcs\nChaCha\nlen\nciphertext\nendian\nC'mon\nNewOnionPacket\nkeypair\npreimage\nMiTM\nmempool\ncltv\nlocalfeatures\niteratively\nPrivateKey\nbr\nmillisatoshi\ntrustless\nee\neg\nhopSize\nretransmit\nretransmittal\ndeobfuscating\nonchain\nBADONION\nrightShift\nprotocolName\nhopEphemeralPubKeys\ntxid\nFn\nPublicKey\nencryptWithAD\nliveness\nie\nshakin\ntxin\nglobalfeatures\ncalcMac\nprivkey\noverpayment\nhopSharedSecrets\nTimeLocked\ntimelocked\nlc\nbtcec\nlocalsig\nresponder's\nripemd\nmd\nENDIF\nblockchains\ncleartext\nstreamBytes\nWISTFULTOLL\nlocktime\nxFFF\nlocalprivkey\ndeserialized\npubkey\nPubKey\nok\nRetransmissions\nnumHops\nfailuremsg\nfundee\nbyteslen\nshortid\nse\nrk\nmicropayment\nrn\ntestbit\nunparsable\nsk\nRoutingInfo\nfunder\nCounterintuitively\ndecrypts\nsn\ngenerateFiller\nunrevoked\nss\nthat'd\nack\ndeobfuscated\ngflen\nsatoshis\ninstantiation\nHeaderMAC\nblindGroupElement\ntx\npubkeys\nCHECKLOCKTIMEVERIFY\nCLTV\nCLTVs\ngenerateCipherStream\nXK\nlflen\ndeobfuscates\ngenerateKey\nalice\nrevocationprivkey\nPKH\nremotepubkey\nHKDF\nooo\nrepo\nnum\nnumStreamBytes\ntxout\nHTLCs\nHTLC's\nretransmission\ndecrypted\nsessionKey\nsessionkey\nroutingInfoSize\nhostname\nrgb\nciphertexts\nwscript\nCHECKSIG\npre\nnumMaxHops\nHMACs\nhmac\nBIP\nhmacSize\nratelimit\ntalkin\nrevocationpubkey\nmsat\nfunc\nunencrypted\ncoinbase\npriv\nsha\nTODO\nChaChaPoly\ndelayedpubkey\nDiffie\nIETF\nxFFFFFFFFFFF\nFIXME\nEphemeralKey\nbitcoin\nBitcoin\nsmartphone\nother's\nremote's\nmulti\nbitcoin's\nIP\naa\ndf\nversa\ntimestamp\nmetadata\nBitcoin's\nVersioning\nchecksum\nexpiries\nbech\nBech\nnano\npico\nmainnet\ntestnet\nicecream\nextractable\nde\nanonymize\nPunycode\nrck\nsck\nzeroconf\nswiss\nlollypop\nUTC\ninline\nfundee's\nBOLTs\nDNS\nsubdomain\nsubdomains\nwildcard\ntuple\ntuples\nresolvers\nhostnames\nprepending\nA\nAAAA\nSRV\nTTL\nURI\ncli\npaymentkey\nhtlcpubkey\nremotehtlcsig\nlocalhtlcsig\nbasepoints\nBitcoins\nbitcoins\ndeobfuscate\nofferer\nofferer's\nincentivize\nredemptions\nvbytes\nBTC\nUSD\nXSS\nSQL\nDOM\nJavascript\njavascript\nImplementers\nsanitization\nek\nreblind\nephemeralKey\nephemeralPrivKey\nephemeralPubKey\necdhResult\nscalarMult\nblindingFactor\nMul\nunlinkable\nregtest\nratelimiting\nzlib\nZLIB\nAPIs\nduplicative\nCRC\nDoS\nECDSA\nTLV\ntlv\nnamespace\nverifier\nverifiers\nEOF\nmonotonicity\noptimizations\nstructs\nCompactSize\nencodings\nremotekey\nbigsize\nBigSize\nnamespaces\ntlvs\nfips\nrfc\nmultipath\nmpp\ntlvs\nsnprintf\nGitHub\nIRC\nbitmasks\nCSPRNG\nlexicographically\nMINIMALIF\nSIGHASH\nsighash\nANYONECANPAY\ncpfp\nutxo\ntxes\ncsv\nCHECKSIGVERIFY\nIFDUP\nsats\nanysegwit\nquiesce\nquiescing\nSomeThing\nonionmsg\nunrequested\nMerkle\nwhitespace\nTLVs\nLnLeaf\nLnNonce\nLnBranch\npayinfo\ngriefing\nunspendable\npkh\nkB\nunblind\nunblinded\nworkflow\nPUSHDATA\nprev\nvout\nrbf\nstandardness\nperkw\nprevtx\nints\nreplaceability\ndisincentivize\nUTXOs\n"
        },
        {
          "name": ".copy-edit-stylesheet-checklist.md",
          "type": "blob",
          "size": 2.7177734375,
          "content": "# Basic checklist/stylesheet used for copy editing BOLTs\n\nContributions should comply with this checklist/stylesheet to maintain correct, clear, consistent, and concise BOLTS. \n\n  - spelling\n    - run `tools/spellcheck.sh --check [0-9][0-9]-*.md`\n      - update `.aspell.en.pws` with any missing words\n    - typos\n  - sentence structure\n    - sentence fragments\n    - run-on sentences\n    - dangling, misplaced modifiers\n    - consistent paragraph tense (e.g. past, present, future)\n    - passive voice (e.g. avoid 'we')\n      - use 'local/remote' terminology rather than 'us/them' or 'we/they'\n      - exception: `Introduction` section\n  - capitalization\n    - table of contents\n    - headers\n    - capitalize list items containing complete sentences\n    - commonly forgotten: 'Lightning', 'ID'\n    - distinguish between network and currency unit\n      - e.g. \"The Bitcoin network transfers bitcoins.\"\n  - punctuation\n    - correct comma, colon, semi-colon, em-dash placement\n    - for conjoined items, use comma before conjunction\n      - e.g. 'this, that, and the other'\n    - appropriate use of parenthesis\n    - only use periods after list items if they contain complete sentences\n      - exceptions: `Requirements` lists\n  - abbreviations\n    - e.g., i.e., etc., a.k.a.\n  - formatting\n    - single spaces between sentences\n    - consistent use of _emphasis_, **strong**, `code`, CAPS, 'quotes'\n    - single line separators between paragraphs and page elements\n    - ensure correct header weights\n  - numbers and calculations\n    - spell out small (<10) amounts\n    - type digits and enumerations\n      - e.g. 'two 2-byte blocks set to 0s', 'one 4-byte block set to 1s', 'the other one is equal to 1'\n      - exceptions, e.g. 'non-zero', '1 byte in length'\n    - data measurements\n      - type digits for quantities of information, use hyphen when unit is an adjective\n        - e.g. 'a 32-bit block is 32 bits in length'\n    - for typed calculations\n      - space both sides of operators (except '^' and negative numbers)\n        - e.g. 5 - 3^2 * 4 = -31\n    - for calculation descriptions\n      - write out operators\n        - e.g. 1 less than 3 equals 2\n  - list structure\n    - 2 spaces before item\n    - indent 2 spaces\n    - `Requirements` sections\n      - colon after conditions\n      - comma before sub-items\n      - period at branch ends\n      - example:\n      ```\n      A sending node:\n          - MAY do this.\n          - if this, AND this:\n            - SHOULD do this.\n          - otherwise:\n            - MUST do this,\n              - but MUST NOT...in this case.\n      ```\n  - links\n    - broken links\n    - link text\n    - correct anchors/urls\n  - references\n    - format e.g. <sup>[1](#reference-1)</sup>\n  - tags\n    - consistent usage, e.g. [TODO:], [FIXME:]\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0244140625,
          "content": "*.md linguist-detectable\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2392578125,
          "content": "language: python\naddons:\n  apt:\n    packages:\n    - aspell-en\n\npython:\n  - \"3.4\"\n  - \"3.5\"\n  - \"3.6\"\nscript:\n  - (set -e; for i in 0?-*.md; do echo \"Extracting $i\"; python3 tools/extract-formats.py $i; done)\n  - tools/spellcheck.sh --check *.md\n"
        },
        {
          "name": "00-introduction.md",
          "type": "blob",
          "size": 17.8056640625,
          "content": "# BOLT #0: Introduction and Index\n\nWelcome, friend! These Basis of Lightning Technology (BOLT) documents\ndescribe a layer-2 protocol for off-chain bitcoin transfer by mutual\ncooperation, relying on on-chain transactions for enforcement if\nnecessary.\n\nSome requirements are subtle; we have tried to highlight motivations\nand reasoning behind the results you see here. I'm sure we've fallen\nshort; if you find any part confusing or wrong, please contact us and\nhelp us improve.\n\nThis is version 0.\n\n1. [BOLT #1](01-messaging.md): Base Protocol\n2. [BOLT #2](02-peer-protocol.md): Peer Protocol for Channel Management\n3. [BOLT #3](03-transactions.md): Bitcoin Transaction and Script Formats\n4. [BOLT #4](04-onion-routing.md): Onion Routing Protocol\n5. [BOLT #5](05-onchain.md): Recommendations for On-chain Transaction Handling\n7. [BOLT #7](07-routing-gossip.md): P2P Node and Channel Discovery\n8. [BOLT #8](08-transport.md): Encrypted and Authenticated Transport\n9. [BOLT #9](09-features.md): Assigned Feature Flags\n10. [BOLT #10](10-dns-bootstrap.md): DNS Bootstrap and Assisted Node Location\n11. [BOLT #11](11-payment-encoding.md): Invoice Protocol for Lightning Payments\n\n## The Spark: A Short Introduction to Lightning\n\nLightning is a protocol for making fast payments with Bitcoin using a\nnetwork of channels.\n\n### Channels\n\nLightning works by establishing *channels*: two participants create a\nLightning payment channel that contains some amount of bitcoin (e.g.,\n0.1 bitcoin) that they've locked up on the Bitcoin network. It is\nspendable only with both their signatures.\n\nInitially they each hold a bitcoin transaction that sends all the\nbitcoin (e.g. 0.1 bitcoin) back to one party.  They can later sign a new bitcoin\ntransaction that splits these funds differently, e.g. 0.09 bitcoin to one\nparty, 0.01 bitcoin to the other, and invalidate the previous bitcoin\ntransaction so it won't be spent.\n\nSee [BOLT #2: Channel Establishment](02-peer-protocol.md#channel-establishment) for more on\nchannel establishment and [BOLT #3: Funding Transaction Output](03-transactions.md#funding-transaction-output) for the format of the bitcoin transaction that creates the channel.  See [BOLT #5: Recommendations for On-chain Transaction Handling](05-onchain.md) for the requirements when participants disagree or fail, and the cross-signed bitcoin transaction must be spent.\n\n### Conditional Payments\n\nA Lightning channel only allows payment between two participants, but channels can be connected together to form a network that allows payments between all members of the network. This requires the technology of a conditional payment, which can be added to a channel,\ne.g. \"you get 0.01 bitcoin if you reveal the secret within 6 hours\".\nOnce the recipient presents the secret, that bitcoin transaction is\nreplaced with one lacking the conditional payment and adding the funds\nto that recipient's output.\n\nSee [BOLT #2: Adding an HTLC](02-peer-protocol.md#adding-an-htlc-update_add_htlc) for the commands a participant uses to add a conditional payment, and [BOLT #3: Commitment Transaction](03-transactions.md#commitment-transaction) for the\ncomplete format of the bitcoin transaction.\n\n### Forwarding\n\nSuch a conditional payment can be safely forwarded to another\nparticipant with a lower time limit, e.g. \"you get 0.01 bitcoin if you reveal the secret\nwithin 5 hours\".  This allows channels to be chained into a network\nwithout trusting the intermediaries.\n\nSee [BOLT #2: Forwarding HTLCs](02-peer-protocol.md#forwarding-htlcs) for details on forwarding payments, [BOLT #4: Packet Structure](04-onion-routing.md#packet-structure) for how payment instructions are transported.\n\n### Network Topology\n\nTo make a payment, a participant needs to know what channels it can\nsend through.  Participants tell each other about channel and node\ncreation, and updates.\n\nSee [BOLT #7: P2P Node and Channel Discovery](07-routing-gossip.md)\nfor details on the communication protocol, and [BOLT #10: DNS\nBootstrap and Assisted Node Location](10-dns-bootstrap.md) for initial\nnetwork bootstrap.\n\n### Payment Invoicing\n\nA participant receives invoices that tell them what payments to make.\n\nSee [BOLT #11: Invoice Protocol for Lightning Payments](11-payment-encoding.md) for the protocol describing the destination and purpose of a payment such that the payer can later prove successful payment.\n\n\n## Glossary and Terminology Guide\n\n* #### *Announcement*:\n   * A gossip message sent between *[peers](#peers)* intended to aid the discovery of a *[channel](#channel)* or a *[node](#node)*.\n\n* #### `chain_hash`:\n   * The uniquely identifying hash of the target blockchain (usually the genesis hash).\n     This allows *[nodes](#node)* to create and reference *channels* on\n     several blockchains. Nodes are to ignore any messages that reference a\n     `chain_hash` that are unknown to them. Unlike `bitcoin-cli`, the hash is\n     not reversed but is used directly.\n\n     For the main chain Bitcoin blockchain, the `chain_hash` value MUST be\n     (encoded in hex):\n     `6fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d6190000000000`.\n\n* #### *Channel*:\n   * A fast, off-chain method of mutual exchange between two *[peers](#peers)*.\n   To transact funds, peers exchange signatures to create an updated *[commitment transaction](#commitment-transaction)*.\n   * _See closure methods: [mutual close](#mutual-close), [revoked transaction close](#revoked-transaction-close), [unilateral close](#unilateral-close)_\n   * _See related: [route](#route)_\n\n* #### *Closing transaction*:\n   * A transaction generated as part of a *[mutual close](#mutual-close)*. A closing transaction is similar to a _commitment transaction_, but with no pending payments.\n   * _See related: [commitment transaction](#commitment-transaction), [funding transaction](#funding-transaction), [penalty transaction](#penalty-transaction)_\n\n* #### *Commitment number*:\n   * A 48-bit incrementing counter for each *[commitment transaction](#commitment-transaction)*; counters\n    are independent for each *peer* in the *channel* and start at 0.\n   * _See container: [commitment transaction](#commitment-transaction)_\n   * _See related: [closing transaction](#closing-transaction), [funding transaction](#funding-transaction), [penalty transaction](#penalty-transaction)_\n\n* #### *Commitment revocation private key*:\n   * Every *[commitment transaction](#commitment-transaction)* has a unique commitment revocation private-key\n    value that allows the other *peer* to spend all outputs\n    immediately: revealing this key is how old commitment\n    transactions are revoked. To support revocation, each output of the\n    commitment transaction refers to the commitment revocation public key.\n   * _See container: [commitment transaction](#commitment-transaction)_\n   * _See originator: [per-commitment secret](#per-commitment-secret)_\n\n* #### *Commitment transaction*:\n   * A transaction that spends the *[funding transaction](#funding-transaction)*.\n   Each *peer* holds the other peer's signature for this transaction, so that each\n   always has a commitment transaction that it can spend. After a new\n   commitment transaction is negotiated, the old one is *revoked*.\n   * _See parts: [commitment number](#commitment-number), [commitment revocation private key](#commitment-revocation-private-key), [HTLC](#HTLC-Hashed-Time-Locked-Contract), [per-commitment secret](#per-commitment-secret), [outpoint](#outpoint)_\n   * _See related: [closing transaction](#closing-transaction), [funding transaction](#funding-transaction), [penalty transaction](#penalty-transaction)_\n   * _See types: [revoked commitment transaction](#revoked-commitment-transaction)_\n\n* #### *Fail the channel*:\n  * This is a forced close of the channel. Very early on (before\n  opening), this may not require any action but forgetting the\n  existence of the channel.  Usually it requires signing and\n  broadcasting the latest commitment transaction, although during\n  mutual close it can also be performed by signing and broadcasting a\n  mutual close transaction.  See [BOLT #5](05-onchain.md#failing-a-channel).\n\n* #### *Close the connection*:\n  * This means closing communication with the peer (such as closing\n  the TCP socket).  It does not imply closing any channels with the\n  peer, but does cause the discarding of uncommitted state for\n  connections with channels: see [BOLT #2](02-peer-protocol.md#message-retransmission).\n\n* #### *Final node*:\n   * The final recipient of a packet that is routing a payment from an *[origin node](#origin-node)* through some number of *[hops](#hop)*. It is also the final *[receiving peer](#receiving-peer)* in a chain.\n   * _See category: [node](#node)_\n   * _See related: [origin node](#origin-node), [processing node](#processing-node)_\n\n* #### *Funding transaction*:\n   * An irreversible on-chain transaction that pays to both *[peers](#peers)* on a *[channel](#channel)*.\n   It can only be spent by mutual consent.\n   * _See related: [closing transaction](#closing-transaction), [commitment transaction](#commitment-transaction), [penalty transaction](#penalty-transaction)_\n\n* #### *Hop*:\n   * A *[node](#node)*. Generally, an intermediate node lying between an *[origin node](#origin-node)* and a *[final node](#final-node)*.\n   * _See category: [node](#node)_\n\n* #### *HTLC*: Hashed Time Locked Contract.\n   * A conditional payment between two *[peers](#peers)*: the recipient can spend\n    the payment by presenting its signature and a *payment preimage*,\n    otherwise the payer can cancel the contract by spending it after\n    a given time. These are implemented as outputs from the\n    *[commitment transaction](#commitment-transaction)*.\n   * _See container: [commitment transaction](#commitment-transaction)_\n   * _See parts: [Payment hash](#Payment-hash), [Payment preimage](#Payment-preimage)_\n\n* #### *Invoice*: A request for funds on the Lightning Network, possibly\n    including payment type, payment amount, expiry, and other\n    information. This is how payments are made on the Lightning\n    Network, rather than using Bitcoin-style addresses.\n\n* #### *It's ok to be odd*:\n   * A rule applied to some numeric fields that indicates either optional or\n     compulsory support for features. Even numbers indicate that both endpoints\n     MUST support the feature in question, while odd numbers indicate\n     that the feature MAY be disregarded by the other endpoint.\n\n* #### *MSAT*:\n   * A millisatoshi, often used as a field name.\n\n* #### *Mutual close*:\n   * A cooperative close of a *[channel](#channel)*, accomplished by broadcasting an unconditional\n    spend of the *[funding transaction](#funding-transaction)* with an output to each *peer*\n    (unless one output is too small, and thus is not included).\n   * _See related: [revoked transaction close](#revoked-transaction-close), [unilateral close](#unilateral-close)_\n\n* #### *Node*:\n   * A computer or other device that is part of the Lightning network.\n   * _See related: [peers](#peers)_\n   * _See types: [final node](#final-node), [hop](#hop), [origin node](#origin-node), [processing node](#processing-node), [receiving node](#receiving-node), [sending node](#sending-node)_\n\n* #### *Origin node*:\n   * The *[node](#node)* that originates a packet that will route a payment through some number of [hops](#hop) to a *[final node](#final-node)*. It is also the first [sending peer](#sending-peer) in a chain.\n   * _See category: [node](#node)_\n   * _See related: [final node](#final-node), [processing node](#processing-node)_\n\n* #### *Outpoint*:\n  * A transaction hash and output index that uniquely identify an unspent transaction output. Needed to compose a new transaction, as an input.\n  * _See related: [funding transaction](#funding-transaction), [commitment transaction](#commitment-transaction)_\n\n* #### *Payment hash*:\n   * The *[HTLC](#HTLC-Hashed-Time-Locked-Contract)* contains the payment hash, which is the hash of the\n    *[payment preimage](#Payment-preimage)*.\n   * _See container: [HTLC](#HTLC-Hashed-Time-Locked-Contract)_\n   * _See originator: [Payment preimage](#Payment-preimage)_\n\n* #### *Payment preimage*:\n   * Proof that payment has been received, held by\n    the final recipient, who is the only person who knows this\n    secret. The final recipient releases the preimage in order to\n    release funds. The payment preimage is hashed as the *[payment hash](#Payment-hash)*\n    in the *[HTLC](#HTLC-Hashed-Time-Locked-Contract)*.\n   * _See container: [HTLC](#HTLC-Hashed-Time-Locked-Contract)_\n   * _See derivation: [payment hash](#Payment-hash)_\n\n* #### *Peers*:\n   * Two *[nodes](#node)* that are in communication with each other.\n      * Two peers may gossip with each other prior to setting up a channel.\n      * Two peers may establish a *[channel](#channel)* through which they transact.\n   * _See related: [node](#node)_\n\n* #### *Penalty transaction*:\n   * A transaction that spends all outputs of a *[revoked commitment\n    transaction](#revoked-commitment-transaction)*, using the *commitment revocation private key*. A *[peer](#peers)* uses this\n    if the other peer tries to \"cheat\" by broadcasting a *[revoked commitment\n    transaction](#revoked-commitment-transaction)*.\n   * _See related: [closing transaction](#closing-transaction), [commitment transaction](#commitment-transaction), [funding transaction](#funding-transaction)_\n\n* #### *Per-commitment secret*:\n   * Every *[commitment transaction](#commitment-transaction)* derives its keys from a per-commitment secret,\n     which is generated such that the series of per-commitment secrets\n     for all previous commitments can be stored compactly.\n   * _See container: [commitment transaction](#commitment-transaction)_\n   * _See derivation: [commitment revocation private key](#commitment-revocation-private-key)_\n\n* #### *Processing node*:\n   * A *[node](#node)* that is processing a packet that originated with an *[origin node](#origin-node)* and that is being sent toward a *[final node](#final-node)* in order to route a payment. It acts as a *[receiving peer](#receiving-peer)* to receive the message, then a [sending peer](#sending-peer) to send on the packet.\n   * _See category: [node](#node)_\n   * _See related: [final node](#final-node), [origin node](#origin-node)_\n\n* #### *Receiving node*:\n   * A *[node](#node)* that is receiving a message.\n   * _See category: [node](#node)_\n   * _See related: [sending node](#sending-node)_\n\n* #### *Receiving peer*:\n   * A *[node](#node)* that is receiving a message from a directly connected *peer*.\n   * _See category: [peer](#Peers)_\n   * _See related: [sending peer](#sending-peer)_\n\n* #### *Revoked commitment transaction*:\n   * An old *[commitment transaction](#commitment-transaction)* that has been revoked because a new commitment transaction has been negotiated.\n   * _See category: [commitment transaction](#commitment-transaction)_\n\n* #### *Revoked transaction close*:\n   * An invalid close of a *[channel](#channel)*, accomplished by broadcasting a *revoked\n    commitment transaction*. Since the other *peer* knows the\n    *commitment revocation secret key*, it can create a *[penalty transaction](#penalty-transaction)*.\n   * _See related: [mutual close](#mutual-close), [unilateral close](#unilateral-close)_\n\n* #### *Route*: \n  * A path across the Lightning Network that enables a payment\n    from an *origin node* to a *[final node](#final-node)* across one or more\n    *[hops](#hop)*.\n  * _See related: [channel](#channel)_\n\n* #### *Sending node*:\n   * A *[node](#node)* that is sending a message.\n   * _See category: [node](#node)_\n   * _See related: [receiving node](#receiving-node)_\n\n* #### *Sending peer*:\n   * A *[node](#node)* that is sending a message to a directly connected *peer*.\n   * _See category: [peer](#Peers)_\n   * _See related: [receiving peer](#receiving-peer)_.\n\n* #### *Unilateral close*:\n   * An uncooperative close of a *[channel](#channel)*, accomplished by broadcasting a\n    *[commitment transaction](#commitment-transaction)*. This transaction is larger (i.e. less\n    efficient) than a *[closing transaction](#closing-transaction)*, and the *[peer](#peers)* whose\n    commitment is broadcast cannot access its own outputs for some\n    previously-negotiated duration.\n   * _See related: [mutual close](#mutual-close), [revoked transaction close](#revoked-transaction-close)_\n\n## Theme Song\n\n      Why this network could be democratic...\n      Numismatic...\n      Cryptographic!\n      Why it could be released Lightning!\n      (Release Lightning!)\n\n\n      We'll have some timelocked contracts with hashed pubkeys, oh yeah.\n      (Keep talking, whoa keep talkin')\n      We'll segregate the witness for trustless starts, oh yeah.\n      (I'll get the money, I've got to get the money)\n      With dynamic onion routes, they'll be shakin' in their boots;\n      You know that's just the truth, we'll be scaling through the roof.\n      Release Lightning!\n      (Go, go, go, go; go, go, go, go, go, go)\n\n\n      [Chorus:]\n      Oh released Lightning, it's better than a debit card..\n      (Release Lightning, go release Lightning!)\n      With released Lightning, micropayments just ain't hard...\n      (Release Lightning, go release Lightning!)\n      Then kaboom: we'll hit the moon -- release Lightning!\n      (Go, go, go, go; go, go, go, go, go, go)\n\n \n      We'll have QR codes, and smartphone apps, oh yeah.\n      (Ooo ooo ooo ooo ooo ooo ooo)\n      P2P messaging, and passive incomes, oh yeah.\n      (Ooo ooo ooo ooo ooo ooo ooo)\n      Outsourced closure watch, gives me feelings in my crotch.\n      You'll know it's not a brag when the repo gets a tag:\n      Released Lightning.\n\n\n      [Chorus]\n      [Instrumental, ~1m10s]\n      [Chorus]\n      (Lightning! Lightning! Lightning! Lightning!\n       Lightning! Lightning! Lightning! Lightning!)\n\n\n      C'mon guys, let's get to work!\n\n\n   -- Anthony Towns <aj@erisian.com.au>\n\n## Authors\n\n[ FIXME: Insert Author List ]\n\n![Creative Commons License](https://i.creativecommons.org/l/by/4.0/88x31.png \"License CC-BY\")\n<br>\nThis work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).\n"
        },
        {
          "name": "01-messaging.md",
          "type": "blob",
          "size": 39.828125,
          "content": "# BOLT #1: Base Protocol\n\n## Overview\n\nThis protocol assumes an underlying authenticated and ordered transport mechanism that takes care of framing individual messages.\n[BOLT #8](08-transport.md) specifies the canonical transport layer used in Lightning, though it can be replaced by any transport that fulfills the above guarantees.\n\nThe default TCP port depends on the network used. The most common networks are:\n\n- Bitcoin mainnet with port number 9735 or the corresponding hexadecimal `0x2607`;\n- Bitcoin testnet with port number 19735 (`0x4D17`);\n- Bitcoin signet with port number 39735 (`0x9B37`).\n\nThe Unicode code point for LIGHTNING <sup>[1](#reference-1)</sup>, and the port convention try to follow the Bitcoin Core convention.\n\nAll data fields are unsigned big-endian unless otherwise specified.\n\n## Table of Contents\n\n  * [Connection Handling and Multiplexing](#connection-handling-and-multiplexing)\n  * [Lightning Message Format](#lightning-message-format)\n  * [Type-Length-Value Format](#type-length-value-format)\n  * [Fundamental Types](#fundamental-types)\n  * [Setup Messages](#setup-messages)\n    * [The `init` Message](#the-init-message)\n    * [The `error` and `warning` Messages](#the-error-and-warning-messages)\n  * [Control Messages](#control-messages)\n    * [The `ping` and `pong` Messages](#the-ping-and-pong-messages)\n  * [Appendix A: BigSize Test Vectors](#appendix-a-bigsize-test-vectors)\n  * [Appendix B: Type-Length-Value Test Vectors](#appendix-b-type-length-value-test-vectors)\n  * [Appendix C: Message Extension](#appendix-c-message-extension)\n  * [Appendix D: Signed Integers Test Vectors](#appendix-d-signed-integers-test-vectors)\n  * [Acknowledgments](#acknowledgments)\n  * [References](#references)\n  * [Authors](#authors)\n\n## Connection Handling and Multiplexing\n\nImplementations MUST use a single connection per peer; channel messages (which include a channel ID) are multiplexed over this single connection.\n\n## Lightning Message Format\n\nAfter decryption, all Lightning messages are of the form:\n\n1. `type`: a 2-byte big-endian field indicating the type of message\n2. `payload`: a variable-length payload that comprises the remainder of\n   the message and that conforms to a format matching the `type`\n3. `extension`: an optional [TLV stream](#type-length-value-format)\n\nThe `type` field indicates how to interpret the `payload` field.\nThe format for each individual type is defined by a specification in this repository.\nThe type follows the _it's ok to be odd_ rule, so nodes MAY send _odd_-numbered types without ascertaining that the recipient understands it.\n\nThe messages are grouped logically into five groups, ordered by the most significant bit that is set:\n\n  - Setup & Control (types `0`-`31`): messages related to connection setup, control, supported features, and error reporting (described below)\n  - Channel (types `32`-`127`): messages used to setup and tear down micropayment channels (described in [BOLT #2](02-peer-protocol.md))\n  - Commitment (types `128`-`255`): messages related to updating the current commitment transaction, which includes adding, revoking, and settling HTLCs as well as updating fees and exchanging signatures (described in [BOLT #2](02-peer-protocol.md))\n  - Routing (types `256`-`511`): messages containing node and channel announcements, as well as any active route exploration (described in [BOLT #7](07-routing-gossip.md))\n  - Custom (types `32768`-`65535`): experimental and application-specific messages\n\nThe size of the message is required by the transport layer to fit into a 2-byte unsigned int; therefore, the maximum possible size is 65535 bytes.\n\nA sending node:\n  - MUST NOT send an evenly-typed message not listed here without prior negotiation.\n  - MUST NOT send evenly-typed TLV records in the `extension` without prior negotiation.\n  - that negotiates an option in this specification:\n    - MUST include all the fields annotated with that option.\n  - When defining custom messages:\n    - SHOULD pick a random `type` to avoid collision with other custom types.\n    - SHOULD pick a `type` that doesn't conflict with other experiments listed in [this issue](https://github.com/lightningnetwork/lightning-rfc/issues/716).\n    - SHOULD pick an odd `type` identifiers when regular nodes should ignore the\n      additional data.\n    - SHOULD pick an even `type` identifiers when regular nodes should reject\n      the message and close the connection.\n\nA receiving node:\n  - upon receiving a message of _odd_, unknown type:\n    - MUST ignore the received message.\n  - upon receiving a message of _even_, unknown type:\n    - MUST close the connection.\n    - MAY fail the channels.\n  - upon receiving a known message with insufficient length for the contents:\n    - MUST close the connection.\n    - MAY fail the channels.\n  - upon receiving a message with an `extension`:\n    - MAY ignore the `extension`.\n    - Otherwise, if the `extension` is invalid:\n      - MUST close the connection.\n      - MAY fail the channels.\n\n### Rationale\n\nBy default `SHA2` and Bitcoin public keys are both encoded as\nbig endian, thus it would be unusual to use a different endian for\nother fields.\n\nLength is limited to 65535 bytes by the cryptographic wrapping, and\nmessages in the protocol are never more than that length anyway.\n\nThe _it's ok to be odd_ rule allows for future optional extensions\nwithout negotiation or special coding in clients. The _extension_ field\nsimilarly allows for future expansion by letting senders include additional\nTLV data. Note that an _extension_ field can only be added when the message\n`payload` doesn't already fill the 65535 bytes maximum length.\n\nImplementations may prefer to have message data aligned on an 8-byte\nboundary (the largest natural alignment requirement of any type here);\nhowever, adding a 6-byte padding after the type field was considered\nwasteful: alignment may be achieved by decrypting the message into\na buffer with 6-bytes of pre-padding.\n\n## Type-Length-Value Format\n\nThroughout the protocol, a TLV (Type-Length-Value) format is used to allow for\nthe backwards-compatible addition of new fields to existing message types.\n\nA `tlv_record` represents a single field, encoded in the form:\n\n* [`bigsize`: `type`]\n* [`bigsize`: `length`]\n* [`length`: `value`]\n\nA `tlv_stream` is a series of (possibly zero) `tlv_record`s, represented as the\nconcatenation of the encoded `tlv_record`s. When used to extend existing\nmessages, a `tlv_stream` is typically placed after all currently defined fields.\n\nThe `type` is encoded using the BigSize format. It functions as a\nmessage-specific, 64-bit identifier for the `tlv_record` determining how the\ncontents of `value` should be decoded. `type` identifiers below 2^16 are\nreserved for use in this specification. `type` identifiers greater than or equal\nto 2^16 are available for custom records. Any record not defined in this\nspecification is considered a custom record. This includes experimental and\napplication-specific messages.\n\nThe `length` is encoded using the BigSize format signaling the size of\n`value` in bytes.\n\nThe `value` depends entirely on the `type`, and should be encoded or decoded\naccording to the message-specific format determined by `type`.\n\n### Requirements\n\nThe sending node:\n - MUST order `tlv_record`s in a `tlv_stream` by strictly-increasing `type`,\n   hence MUST not produce more than a single TLV record with the same `type`\n - MUST minimally encode `type` and `length`.\n - When defining custom record `type` identifiers:\n   - SHOULD pick random `type` identifiers to avoid collision with other\n     custom types.\n   - SHOULD pick odd `type` identifiers when regular nodes should ignore the\n     additional data.\n   - SHOULD pick even `type` identifiers when regular nodes should reject the\n     full tlv stream containing the custom record.\n - SHOULD NOT use redundant, variable-length encodings in a `tlv_record`.\n\nThe receiving node:\n - if zero bytes remain before parsing a `type`:\n   - MUST stop parsing the `tlv_stream`.\n - if a `type` or `length` is not minimally encoded:\n   - MUST fail to parse the `tlv_stream`.\n - if decoded `type`s are not strictly-increasing (including situations when\n   two or more occurrences of the same `type` are met):\n   - MUST fail to parse the `tlv_stream`.\n - if `length` exceeds the number of bytes remaining in the message:\n   - MUST fail to parse the `tlv_stream`.\n - if `type` is known:\n   - MUST decode the next `length` bytes using the known encoding for `type`.\n   - if `length` is not exactly equal to that required for the known encoding for `type`:\n     - MUST fail to parse the `tlv_stream`.\n   - if variable-length fields within the known encoding for `type` are not minimal:\n     - MUST fail to parse the `tlv_stream`.\n - otherwise, if `type` is unknown:\n   - if `type` is even:\n     - MUST fail to parse the `tlv_stream`.\n   - otherwise, if `type` is odd:\n     - MUST discard the next `length` bytes.\n\n### Rationale\n\nThe primary advantage in using TLV is that a reader is able to ignore new fields\nthat it does not understand, since each field carries the exact size of the\nencoded element. Without TLV, even if a node does not wish to use a particular\nfield, the node is forced to add parsing logic for that field in order to\ndetermine the offset of any fields that follow.\n\nThe strict monotonicity constraint ensures that all `type`s are unique and can\nappear at most once. Fields that map to complex objects, e.g. vectors, maps, or\nstructs, should do so by defining the encoding such that the object is\nserialized within a single `tlv_record`. The uniqueness constraint, among other\nthings, enables the following optimizations:\n - canonical ordering is defined independent of the encoded `value`s.\n - canonical ordering can be known at compile-time, rather than being determined\n   dynamically at the time of encoding.\n - verifying canonical ordering requires less state and is less-expensive.\n - variable-size fields can reserve their expected size up front, rather than\n   appending elements sequentially and incurring double-and-copy overhead.\n\nThe use of a bigsize for `type` and `length` permits a space savings for small\n`type`s or short `value`s. This potentially leaves more space for application\ndata over the wire or in an onion payload.\n\nAll `type`s must appear in increasing order to create a canonical encoding of\nthe underlying `tlv_record`s. This is crucial when computing signatures over a\n`tlv_stream`, as it ensures verifiers will be able to recompute the same message\ndigest as the signer. Note that the canonical ordering over the set of fields\ncan be enforced even if the verifier does not understand what the fields\ncontain.\n\nWriters should avoid using redundant, variable-length encodings in a\n`tlv_record` since this results in encoding the length twice and complicates\ncomputing the outer length. As an example, when writing a variable length byte\narray, the `value` should contain only the raw bytes and forgo an additional\ninternal length since the `tlv_record` already carries the number of bytes that\nfollow. On the other hand, if a `tlv_record` contains multiple, variable-length\nelements then this would not be considered redundant, and is needed to allow the\nreceiver to parse individual elements from `value`.\n\n## Fundamental Types\n\nVarious fundamental types are referred to in the message specifications:\n\n* `byte`: an 8-bit byte\n* `s8`: an 8-bit signed integer\n* `u16`: a 2 byte unsigned integer\n* `s16`: a 2 byte signed integer\n* `u32`: a 4 byte unsigned integer\n* `s32`: a 4 byte signed integer\n* `u64`: an 8 byte unsigned integer\n* `s64`: an 8 byte signed integer\n\nSigned integers use standard big-endian two's complement representation\n(see test vectors [below](#appendix-d-signed-integers-test-vectors)).\n\nFor the final value in TLV records, truncated integers may be used. Leading zeros in\ntruncated integers MUST be omitted:\n\n* `tu16`: a 0 to 2 byte truncated unsigned integer\n* `tu32`: a 0 to 4 byte truncated unsigned integer\n* `tu64`: a 0 to 8 byte truncated unsigned integer\n\nWhen used to encode amounts, the previous fields MUST comply with the upper\nbound of 21 million BTC:\n\n* satoshi amounts MUST be at most `0x000775f05a074000`\n* milli-satoshi amounts MUST be at most `0x1d24b2dfac520000`\n\nThe following convenience types are also defined:\n\n* `chain_hash`: a 32-byte chain identifier (see [BOLT #0](00-introduction.md#glossary-and-terminology-guide))\n* `channel_id`: a 32-byte channel_id (see [BOLT #2](02-peer-protocol.md#definition-of-channel-id))\n* `sha256`: a 32-byte SHA2-256 hash\n* `signature`: a 64-byte bitcoin Elliptic Curve signature\n* `bip340sig`: a 64-byte bitcoin Elliptic Curve Schnorr signature as per [BIP-340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki)\n* `point`: a 33-byte Elliptic Curve point (compressed encoding as per [SEC 1 standard](http://www.secg.org/sec1-v2.pdf#subsubsection.2.3.3))\n* `short_channel_id`: an 8 byte value identifying a channel (see [BOLT #7](07-routing-gossip.md#definition-of-short-channel-id))\n* `sciddir_or_pubkey`: either 9 or 33 bytes referencing or identifying a node, respectively\n    * if the first byte is 0 or 1, then an 8-byte `short_channel_id` follows for a total of 9 bytes\n        * 0 for the first byte indicates this refers to `node_id_1` in the `channel_announcement` for `short_channel_id`\n        * 1 for the first byte indicates this refers to `node_id_2` in the `channel_announcement` for `short_channel_id`\n          (see [BOLT #7](07-routing-gossip.md#the-channel_announcement-message)\n    * if the first byte is 2 or 3, then the value is a 33-byte `point`\n* `bigsize`: a variable-length, unsigned integer similar to Bitcoin's CompactSize encoding, but big-endian.  Described in [BigSize](#appendix-a-bigsize-test-vectors).\n* `utf8`: a byte as part of a UTF-8 string.  A writer MUST ensure an array of these is a valid UTF-8 string, a reader MAY reject any messages containing an array of these which is not a valid UTF-8 string.\n\n## Setup Messages\n\n### The `init` Message\n\nOnce authentication is complete, the first message reveals the features supported or required by this node, even if this is a reconnection.\n\n[BOLT #9](09-features.md) specifies lists of features. Each feature is generally represented by 2 bits. The least-significant bit is numbered 0, which is _even_, and the next most significant bit is numbered 1, which is _odd_.  For historical reasons, features are divided into global and local feature bitmasks.\n\nA feature is *offered* if a peer set it in the `init` message for the current connection (as either even or odd).  A feature is *negotiated* if either both peers offered it, or the local node offered it as even: it can assume the peer supports it, as it did not disconnect as it would be required to do.\n\nThe `features` field MUST be padded to bytes with 0s.\n\n1. type: 16 (`init`)\n2. data:\n   * [`u16`:`gflen`]\n   * [`gflen*byte`:`globalfeatures`]\n   * [`u16`:`flen`]\n   * [`flen*byte`:`features`]\n   * [`init_tlvs`:`tlvs`]\n\n1. `tlv_stream`: `init_tlvs`\n2. types:\n    1. type: 1 (`networks`)\n    2. data:\n        * [`...*chain_hash`:`chains`]\n    1. type: 3 (`remote_addr`)\n    2. data:\n        * [`...*byte`:`data`]\n\nThe optional `networks` indicates the chains the node is interested in.\nThe optional `remote_addr` can be used to circumvent NAT issues.\n\n#### Requirements\n\nThe sending node:\n  - MUST send `init` as the first Lightning message for any connection.\n  - MUST set feature bits as defined in [BOLT #9](09-features.md).\n  - MUST set any undefined feature bits to 0.\n  - SHOULD NOT set features greater than 13 in `globalfeatures`.\n  - SHOULD use the minimum length required to represent the `features` field.\n  - SHOULD set `networks` to all chains it will gossip or open channels for.\n  - SHOULD set `remote_addr` to reflect the remote IP address (and port) of an\n    incoming connection, if the node is the receiver and the connection was done\n    via IP.\n  - if it sets `remote_addr`:\n    - MUST set it to a valid `address descriptor` (1 byte type and data) as described in [BOLT 7](07-routing-gossip.md#the-node_announcement-message).\n    - SHOULD NOT set private addresses as `remote_addr`.\n\nThe receiving node:\n  - MUST wait to receive `init` before sending any other messages.\n  - MUST combine (bitwise OR) the two feature bitmaps into one logical `features` map.\n  - MUST respond to known feature bits as specified in [BOLT #9](09-features.md).\n  - upon receiving unknown _odd_ feature bits that are non-zero:\n    - MUST ignore the bit.\n  - upon receiving unknown _even_ feature bits that are non-zero:\n    - MUST close the connection.\n  - upon receiving `networks` containing no common chains\n    - MAY close the connection.\n  - if the feature vector does not set all known, transitive dependencies:\n    - MUST close the connection.\n  - MAY use the `remote_addr` to update its `node_announcement`\n\n#### Rationale\n\nThere used to be two feature bitfields here, but for backwards compatibility they're now\ncombined into one.\n\nThis semantic allows both future incompatible changes and future backward compatible changes. Bits should generally be assigned in pairs, in order that optional features may later become compulsory.\n\nNodes wait for receipt of the other's features to simplify error\ndiagnosis when features are incompatible.\n\nSince all networks share the same port, but most implementations only\nsupport a single network, the `networks` fields avoids nodes\nerroneously believing they will receive updates about their preferred\nnetwork, or that they can open channels.\n\n### The `error` and `warning` Messages\n\nFor simplicity of diagnosis, it's often useful to tell a peer that something is incorrect.\n\n1. type: 17 (`error`)\n2. data:\n   * [`channel_id`:`channel_id`]\n   * [`u16`:`len`]\n   * [`len*byte`:`data`]\n\n1. type: 1 (`warning`)\n2. data:\n   * [`channel_id`:`channel_id`]\n   * [`u16`:`len`]\n   * [`len*byte`:`data`]\n\n#### Requirements\n\nThe channel is referred to by `channel_id`, unless `channel_id` is 0 (i.e. all bytes are 0), in which case it refers to all channels.\n\nThe funding node using channel establishment v1 (`open_channel`):\n  - for all error messages sent before (and including) the `funding_created` message:\n    - MUST use `temporary_channel_id` in lieu of `channel_id`.\n\nThe fundee node using channel establishment v1 (`accept_channel`):\n  - for all error messages sent before (and not including) the `funding_signed` message:\n    - MUST use `temporary_channel_id` in lieu of `channel_id`.\n\nThe opener node using channel establishment v2 (`open_channel2`):\n  - for all error messages sent before the `accept_channel2` message is received:\n    - MUST use `temporary_channel_id` in lieu of `channel_id`.\n\nThe accepter node using channel establishment v2 (`open_channel2`):\n  - for all error messages sent before (and including) the `accept_channel2` message:\n    - MUST use `temporary_channel_id` in lieu of `channel_id`.\n\nA sending node:\n  - SHOULD send `error` for protocol violations or internal errors that make channels unusable or that make further communication unusable.\n  - SHOULD send `error` with the unknown `channel_id` in reply to messages of type `32`-`255` related to unknown channels.\n  - when sending `error`:\n    - MUST fail the channel(s) referred to by the error message.\n    - MAY set `channel_id` to all zero to indicate all channels.\n  - when sending `warning`:\n    - MAY set `channel_id` to all zero if the warning is not related to a specific channel.\n  - MAY send an empty `data` field.\n  - when failure was caused by an invalid signature check:\n    - SHOULD include the raw, hex-encoded transaction in reply to a `funding_created`, `funding_signed`, `closing_signed`, or `commitment_signed` message.\n\nThe receiving node:\n  - upon receiving `error`:\n    - if `channel_id` is all zero:\n      - MUST fail all channels with the sending node.\n    - otherwise:\n      - MUST fail the channel referred to by `channel_id`, if that channel is with the sending node.\n  - upon receiving `warning`:\n    - SHOULD log the message for later diagnosis.\n    - MAY attempt `shutdown` if permitted at this point.\n  - if no existing channel is referred to by `channel_id`:\n    - MUST ignore the message.\n  - if `data` is not composed solely of printable ASCII characters (For reference: the printable character set includes byte values 32 through 126, inclusive):\n    - SHOULD NOT print out `data` verbatim.\n\n#### Rationale\n\nThere are unrecoverable errors that require an abort of conversations;\nif the connection is simply dropped, then the peer may retry the\nconnection. It's also useful to describe protocol violations for\ndiagnosis, as this indicates that one peer has a bug.\n\nOn the other hand, overuse of error messages has lead to\nimplementations ignoring them (to avoid an otherwise expensive channel\nbreak), so the \"warning\" message was added to allow some degree of\nretry or recovery for spurious errors.\n\nIt may be wise not to distinguish errors in production settings, lest\nit leak information — hence, the optional `data` field.\n\n## Control Messages\n\n### The `ping` and `pong` Messages\n\nIn order to allow for the existence of long-lived TCP connections, at\ntimes it may be required that both ends keep alive the TCP connection at the\napplication level. Such messages also allow obfuscation of traffic patterns.\n\n1. type: 18 (`ping`)\n2. data:\n    * [`u16`:`num_pong_bytes`]\n    * [`u16`:`byteslen`]\n    * [`byteslen*byte`:`ignored`]\n\nThe `pong` message is to be sent whenever a `ping` message is received. It\nserves as a reply and also serves to keep the connection alive, while\nexplicitly notifying the other end that the receiver is still active. Within\nthe received `ping` message, the sender will specify the number of bytes to be\nincluded within the data payload of the `pong` message.\n\n1. type: 19 (`pong`)\n2. data:\n    * [`u16`:`byteslen`]\n    * [`byteslen*byte`:`ignored`]\n\n#### Requirements\n\nA node sending a `ping` message:\n  - SHOULD set `ignored` to 0s.\n  - MUST NOT set `ignored` to sensitive data such as secrets or portions of initialized\nmemory.\n  - if it doesn't receive a corresponding `pong`:\n    - MAY close the network connection,\n      - and MUST NOT fail the channels in this case.\n\nA node sending a `pong` message:\n  - SHOULD set `ignored` to 0s.\n  - MUST NOT set `ignored` to sensitive data such as secrets or portions of initialized\n memory.\n\nA node receiving a `ping` message:\n  - if `num_pong_bytes` is less than 65532:\n    - MUST respond by sending a `pong` message, with `byteslen` equal to `num_pong_bytes`.\n  - otherwise (`num_pong_bytes` is **not** less than 65532):\n    - MUST ignore the `ping`.\n\nA node receiving a `pong` message:\n  - if `byteslen` does not correspond to any `ping`'s `num_pong_bytes` value it has sent:\n    - MAY close the connection.\n\n### Rationale\n\nThe largest possible message is 65535 bytes; thus, the maximum sensible `byteslen`\nis 65531 — in order to account for the type field (`pong`) and the `byteslen` itself. This allows\na convenient cutoff for `num_pong_bytes` to indicate that no reply should be sent.\n\nConnections between nodes within the network may be long lived, as payment\nchannels have an indefinite lifetime. However, it's likely that\nno new data will be\nexchanged for a\nsignificant portion of a connection's lifetime. Also, on several platforms it's possible that Lightning\nclients will be put to sleep without prior warning. Hence, a\ndistinct `ping` message is used, in order to probe for the liveness of the connection on\nthe other side, as well as to keep the established connection active.\n\nAdditionally, the ability for a sender to request that the receiver send a\nresponse with a particular number of bytes enables nodes on the network to\ncreate _synthetic_ traffic. Such traffic can be used to partially defend\nagainst packet and timing analysis — as nodes can fake the traffic patterns of\ntypical exchanges without applying any true updates to their respective\nchannels.\n\nWhen combined with the onion routing protocol defined in\n[BOLT #4](04-onion-routing.md),\ncareful statistically driven synthetic traffic can serve to further bolster the\nprivacy of participants within the network.\n\nLimited precautions are recommended against `ping` flooding, however some\nlatitude is given because of network delays. Note that there are other methods\nof incoming traffic flooding (e.g. sending _odd_ unknown message types, or padding\nevery message maximally).\n\nFinally, the usage of periodic `ping` messages serves to promote frequent key\nrotations as specified within [BOLT #8](08-transport.md).\n\n## Appendix A: BigSize Test Vectors\n\nThe following test vectors can be used to assert the correctness of a BigSize\nimplementation used in the TLV format. The format is identical to the\nCompactSize encoding used in bitcoin, but replaces the little-endian encoding of\nmulti-byte values with big-endian.\n\nValues encoded with BigSize will produce an encoding of either 1, 3, 5, or 9\nbytes depending on the size of the integer. The encoding is a piece-wise\nfunction that takes a `uint64` value `x` and produces:\n```\n        uint8(x)                if x < 0xfd\n        0xfd + be16(uint16(x))  if x < 0x10000\n        0xfe + be32(uint32(x))  if x < 0x100000000\n        0xff + be64(x)          otherwise.\n```\n\nHere `+` denotes concatenation and `be16`, `be32`, and `be64` produce a\nbig-endian encoding of the input for 16, 32, and 64-bit integers, respectively.\n\nA value is said to be _minimally encoded_ if it could not be encoded using\nfewer bytes. For example, a BigSize encoding that occupies 5 bytes\nbut whose value is less than 0x10000 is not minimally encoded. All values\ndecoded with BigSize should be checked to ensure they are minimally encoded.\n\n### BigSize Decoding Tests\n\nThe following is an example of how to execute the BigSize decoding tests.\n```golang\nfunc testReadBigSize(t *testing.T, test bigSizeTest) {\n        var buf [8]byte \n        r := bytes.NewReader(test.Bytes)\n        val, err := tlv.ReadBigSize(r, &buf)\n        if err != nil && err.Error() != test.ExpErr {\n                t.Fatalf(\"expected decoding error: %v, got: %v\",\n                        test.ExpErr, err)\n        }\n\n        // If we expected a decoding error, there's no point checking the value.\n        if test.ExpErr != \"\" {\n                return\n        }\n\n        if val != test.Value {\n                t.Fatalf(\"expected value: %d, got %d\", test.Value, val)\n        }\n}\n```\n\nA correct implementation should pass against these test vectors:\n```json\n[\n    {\n        \"name\": \"zero\",\n        \"value\": 0,\n        \"bytes\": \"00\"\n    },\n    {\n        \"name\": \"one byte high\",\n        \"value\": 252,\n        \"bytes\": \"fc\"\n    },\n    {\n        \"name\": \"two byte low\",\n        \"value\": 253,\n        \"bytes\": \"fd00fd\"\n    },\n    {\n        \"name\": \"two byte high\",\n        \"value\": 65535,\n        \"bytes\": \"fdffff\"\n    },\n    {\n        \"name\": \"four byte low\",\n        \"value\": 65536,\n        \"bytes\": \"fe00010000\"\n    },\n    {\n        \"name\": \"four byte high\",\n        \"value\": 4294967295,\n        \"bytes\": \"feffffffff\"\n    },\n    {\n        \"name\": \"eight byte low\",\n        \"value\": 4294967296,\n        \"bytes\": \"ff0000000100000000\"\n    },\n    {\n        \"name\": \"eight byte high\",\n        \"value\": 18446744073709551615,\n        \"bytes\": \"ffffffffffffffffff\"\n    },\n    {\n        \"name\": \"two byte not canonical\",\n        \"value\": 0,\n        \"bytes\": \"fd00fc\",\n        \"exp_error\": \"decoded bigsize is not canonical\"\n    },\n    {\n        \"name\": \"four byte not canonical\",\n        \"value\": 0,\n        \"bytes\": \"fe0000ffff\",\n        \"exp_error\": \"decoded bigsize is not canonical\"\n    },\n    {\n        \"name\": \"eight byte not canonical\",\n        \"value\": 0,\n        \"bytes\": \"ff00000000ffffffff\",\n        \"exp_error\": \"decoded bigsize is not canonical\"\n    },\n    {\n        \"name\": \"two byte short read\",\n        \"value\": 0,\n        \"bytes\": \"fd00\",\n        \"exp_error\": \"unexpected EOF\"\n    },\n    {\n        \"name\": \"four byte short read\",\n        \"value\": 0,\n        \"bytes\": \"feffff\",\n        \"exp_error\": \"unexpected EOF\"\n    },\n    {\n        \"name\": \"eight byte short read\",\n        \"value\": 0,\n        \"bytes\": \"ffffffffff\",\n        \"exp_error\": \"unexpected EOF\"\n    },\n    {\n        \"name\": \"one byte no read\",\n        \"value\": 0,\n        \"bytes\": \"\",\n        \"exp_error\": \"EOF\"\n    },\n    {\n        \"name\": \"two byte no read\",\n        \"value\": 0,\n        \"bytes\": \"fd\",\n        \"exp_error\": \"unexpected EOF\"\n    },\n    {\n        \"name\": \"four byte no read\",\n        \"value\": 0,\n        \"bytes\": \"fe\",\n        \"exp_error\": \"unexpected EOF\"\n    },\n    {\n        \"name\": \"eight byte no read\",\n        \"value\": 0,\n        \"bytes\": \"ff\",\n        \"exp_error\": \"unexpected EOF\"\n    }\n]\n```\n\n### BigSize Encoding Tests\n\nThe following is an example of how to execute the BigSize encoding tests.\n```golang\nfunc testWriteBigSize(t *testing.T, test bigSizeTest) {\n        var (\n                w   bytes.Buffer\n                buf [8]byte\n        )\n        err := tlv.WriteBigSize(&w, test.Value, &buf)\n        if err != nil {\n                t.Fatalf(\"unable to encode %d as bigsize: %v\",\n                        test.Value, err)\n        }\n\n        if bytes.Compare(w.Bytes(), test.Bytes) != 0 {\n                t.Fatalf(\"expected bytes: %v, got %v\",\n                        test.Bytes, w.Bytes())\n        }\n}\n```\n\nA correct implementation should pass against the following test vectors:\n```json\n[\n    {\n        \"name\": \"zero\",\n        \"value\": 0,\n        \"bytes\": \"00\"\n    },\n    {\n        \"name\": \"one byte high\",\n        \"value\": 252,\n        \"bytes\": \"fc\"\n    },\n    {\n        \"name\": \"two byte low\",\n        \"value\": 253,\n        \"bytes\": \"fd00fd\"\n    },\n    {\n        \"name\": \"two byte high\",\n        \"value\": 65535,\n        \"bytes\": \"fdffff\"\n    },\n    {\n        \"name\": \"four byte low\",\n        \"value\": 65536,\n        \"bytes\": \"fe00010000\"\n    },\n    {\n        \"name\": \"four byte high\",\n        \"value\": 4294967295,\n        \"bytes\": \"feffffffff\"\n    },\n    {\n        \"name\": \"eight byte low\",\n        \"value\": 4294967296,\n        \"bytes\": \"ff0000000100000000\"\n    },\n    {\n        \"name\": \"eight byte high\",\n        \"value\": 18446744073709551615,\n        \"bytes\": \"ffffffffffffffffff\"\n    }\n]\n```\n\n## Appendix B: Type-Length-Value Test Vectors\n\nThe following tests assume that two separate TLV namespaces exist: n1 and n2.\n\nThe n1 namespace supports the following TLV types:\n\n1. `tlv_stream`: `n1`\n2. types:\n   1. type: 1 (`tlv1`)\n   2. data:\n     * [`tu64`:`amount_msat`]\n   1. type: 2 (`tlv2`)\n   2. data:\n     * [`short_channel_id`:`scid`]\n   1. type: 3 (`tlv3`)\n   2. data:\n     * [`point`:`node_id`]\n     * [`u64`:`amount_msat_1`]\n     * [`u64`:`amount_msat_2`]\n   1. type: 254 (`tlv4`)\n   2. data:\n     * [`u16`:`cltv_delta`]\n\nThe n2 namespace supports the following TLV types:\n\n1. `tlv_stream`: `n2`\n2. types:\n   1. type: 0 (`tlv1`)\n   2. data:\n     * [`tu64`:`amount_msat`]\n   1. type: 11 (`tlv2`)\n   2. data:\n     * [`tu32`:`cltv_expiry`]\n\n### TLV Decoding Failures\n\nThe following TLV streams in any namespace should trigger a decoding failure:\n\n1. Invalid stream: 0xfd\n2. Reason: type truncated\n\n1. Invalid stream: 0xfd01\n2. Reason: type truncated\n\n1. Invalid stream: 0xfd0001 00\n2. Reason: not minimally encoded type\n\n1. Invalid stream: 0xfd0101\n2. Reason: missing length\n\n1. Invalid stream: 0x0f fd\n2. Reason: (length truncated)\n\n1. Invalid stream: 0x0f fd26\n2. Reason: (length truncated)\n\n1. Invalid stream: 0x0f fd2602\n2. Reason: missing value\n\n1. Invalid stream: 0x0f fd0001 00\n2. Reason: not minimally encoded length\n\n1. Invalid stream: 0x0f fd0201 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n2. Reason: value truncated\n\nThe following TLV streams in either namespace should trigger a\ndecoding failure:\n\n1. Invalid stream: 0x12 00\n2. Reason: unknown even type.\n\n1. Invalid stream: 0xfd0102 00\n2. Reason: unknown even type.\n\n1. Invalid stream: 0xfe01000002 00\n2. Reason: unknown even type.\n\n1. Invalid stream: 0xff0100000000000002 00\n2. Reason: unknown even type.\n\nThe following TLV streams in namespace `n1` should trigger a decoding\nfailure:\n\n1. Invalid stream: 0x01 09 ffffffffffffffffff\n2. Reason: greater than encoding length for `n1`s `tlv1`.\n\n1. Invalid stream: 0x01 01 00\n2. Reason: encoding for `n1`s `tlv1`s `amount_msat` is not minimal\n\n1. Invalid stream: 0x01 02 0001\n2. Reason: encoding for `n1`s `tlv1`s `amount_msat` is not minimal\n\n1. Invalid stream: 0x01 03 000100\n2. Reason: encoding for `n1`s `tlv1`s `amount_msat` is not minimal\n\n1. Invalid stream: 0x01 04 00010000\n2. Reason: encoding for `n1`s `tlv1`s `amount_msat` is not minimal\n\n1. Invalid stream: 0x01 05 0001000000\n2. Reason: encoding for `n1`s `tlv1`s `amount_msat` is not minimal\n\n1. Invalid stream: 0x01 06 000100000000\n2. Reason: encoding for `n1`s `tlv1`s `amount_msat` is not minimal\n\n1. Invalid stream: 0x01 07 00010000000000\n2. Reason: encoding for `n1`s `tlv1`s `amount_msat` is not minimal\n\n1. Invalid stream: 0x01 08 0001000000000000\n2. Reason: encoding for `n1`s `tlv1`s `amount_msat` is not minimal\n\n1. Invalid stream: 0x02 07 01010101010101\n2. Reason: less than encoding length for `n1`s `tlv2`.\n\n1. Invalid stream: 0x02 09 010101010101010101\n2. Reason: greater than encoding length for `n1`s `tlv2`.\n\n1. Invalid stream: 0x03 21 023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb\n2. Reason: less than encoding length for `n1`s `tlv3`.\n\n1. Invalid stream: 0x03 29 023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb0000000000000001\n2. Reason: less than encoding length for `n1`s `tlv3`.\n\n1. Invalid stream: 0x03 30 023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb000000000000000100000000000001\n2. Reason: less than encoding length for `n1`s `tlv3`.\n\n1. Invalid stream: 0x03 31 043da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb00000000000000010000000000000002\n2. Reason: `n1`s `node_id` is not a valid point.\n\n1. Invalid stream: 0x03 32 023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb0000000000000001000000000000000001\n2. Reason: greater than encoding length for `n1`s `tlv3`.\n\n1. Invalid stream: 0xfd00fe 00\n2. Reason: less than encoding length for `n1`s `tlv4`.\n\n1. Invalid stream: 0xfd00fe 01 01\n2. Reason: less than encoding length for `n1`s `tlv4`.\n\n1. Invalid stream: 0xfd00fe 03 010101\n2. Reason: greater than encoding length for `n1`s `tlv4`.\n\n1. Invalid stream: 0x00 00\n2. Reason: unknown even field for `n1`s namespace.\n\n### TLV Decoding Successes\n\nThe following TLV streams in either namespace should correctly decode,\nand be ignored:\n\n1. Valid stream: 0x\n2. Explanation: empty message\n\n1. Valid stream: 0x21 00\n2. Explanation: Unknown odd type.\n\n1. Valid stream: 0xfd0201 00\n2. Explanation: Unknown odd type.\n\n1. Valid stream: 0xfd00fd 00\n2. Explanation: Unknown odd type.\n\n1. Valid stream: 0xfd00ff 00\n2. Explanation: Unknown odd type.\n\n1. Valid stream: 0xfe02000001 00\n2. Explanation: Unknown odd type.\n\n1. Valid stream: 0xff0200000000000001 00\n2. Explanation: Unknown odd type.\n\nThe following TLV streams in `n1` namespace should correctly decode,\nwith the values given here:\n\n1. Valid stream: 0x01 00\n2. Values: `tlv1` `amount_msat`=0\n\n1. Valid stream: 0x01 01 01\n2. Values: `tlv1` `amount_msat`=1\n\n1. Valid stream: 0x01 02 0100\n2. Values: `tlv1` `amount_msat`=256\n\n1. Valid stream: 0x01 03 010000\n2. Values: `tlv1` `amount_msat`=65536\n\n1. Valid stream: 0x01 04 01000000\n2. Values: `tlv1` `amount_msat`=16777216\n\n1. Valid stream: 0x01 05 0100000000\n2. Values: `tlv1` `amount_msat`=4294967296\n\n1. Valid stream: 0x01 06 010000000000\n2. Values: `tlv1` `amount_msat`=1099511627776\n\n1. Valid stream: 0x01 07 01000000000000\n2. Values: `tlv1` `amount_msat`=281474976710656\n\n1. Valid stream: 0x01 08 0100000000000000\n2. Values: `tlv1` `amount_msat`=72057594037927936\n\n1. Valid stream: 0x02 08 0000000000000226\n2. Values: `tlv2` `scid`=0x0x550\n\n1. Valid stream: 0x03 31 023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb00000000000000010000000000000002\n2. Values: `tlv3` `node_id`=023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb `amount_msat_1`=1 `amount_msat_2`=2\n\n1. Valid stream: 0xfd00fe 02 0226\n2. Values: `tlv4` `cltv_delta`=550\n\n### TLV Stream Decoding Failure\n\nAny appending of an invalid stream to a valid stream should trigger\na decoding failure.\n\nAny appending of a higher-numbered valid stream to a lower-numbered\nvalid stream should not trigger a decoding failure.\n\nIn addition, the following TLV streams in namespace `n1` should\ntrigger a decoding failure:\n\n1. Invalid stream: 0x02 08 0000000000000226 01 01 2a\n2. Reason: valid TLV records but invalid ordering\n\n1. Invalid stream: 0x02 08 0000000000000231 02 08 0000000000000451\n2. Reason: duplicate TLV type\n\n1. Invalid stream: 0x1f 00 0f 01 2a\n2. Reason: valid (ignored) TLV records but invalid ordering\n\n1. Invalid stream: 0x1f 00 1f 01 2a\n2. Reason: duplicate TLV type (ignored)\n\nThe following TLV stream in namespace `n2` should trigger a decoding\nfailure:\n\n1. Invalid stream: 0xffffffffffffffffff 00 00 00\n2. Reason: valid TLV records but invalid ordering\n\n## Appendix C: Message Extension\n\nThis section contains examples of valid and invalid extensions on the `init`\nmessage. The base `init` message (without extensions) for these examples is\n`0x001000000000` (all features turned off).\n\nThe following `init` messages are valid:\n\n- `0x001000000000`: no extension provided\n- `0x001000000000c9012acb0104`: the extension contains two unknown _odd_ TLV records (with types `0xc9` and `0xcb`)\n\nThe following `init` messages are invalid:\n\n- `0x00100000000001`: the extension is present but truncated\n- `0x001000000000ca012a`: the extension contains unknown _even_ TLV records (assuming that TLV type `0xca` is unknown)\n- `0x001000000000c90101c90102`: the extension TLV stream is invalid (duplicate TLV record type `0xc9`)\n\nNote that when messages are signed, the _extension_ is part of the signed bytes.\nNodes should store the _extension_ bytes even if they don't understand them to\nbe able to correctly verify signatures.\n\n## Appendix D: Signed Integers Test Vectors\n\nThe following test vector show how signed integers (`s8`, `s16`, `s32`\nand `s64`) are encoded using big-endian two's complement.\n\n```json\n[\n    {\n        \"value\": 0,\n        \"bytes\": \"00\"\n    },\n    {\n        \"value\": 42,\n        \"bytes\": \"2a\"\n    },\n    {\n        \"value\": -42,\n        \"bytes\": \"d6\"\n    },\n    {\n        \"value\": 127,\n        \"bytes\": \"7f\"\n    },\n    {\n        \"value\": -128,\n        \"bytes\": \"80\"\n    },\n    {\n        \"value\": 128,\n        \"bytes\": \"0080\"\n    },\n    {\n        \"value\": -129,\n        \"bytes\": \"ff7f\"\n    },\n    {\n        \"value\": 15000,\n        \"bytes\": \"3a98\"\n    },\n    {\n        \"value\": -15000,\n        \"bytes\": \"c568\"\n    },\n    {\n        \"value\": 32767,\n        \"bytes\": \"7fff\"\n    },\n    {\n        \"value\": -32768,\n        \"bytes\": \"8000\"\n    },\n    {\n        \"value\": 32768,\n        \"bytes\": \"00008000\"\n    },\n    {\n        \"value\": -32769,\n        \"bytes\": \"ffff7fff\"\n    },\n    {\n        \"value\": 21000000,\n        \"bytes\": \"01406f40\"\n    },\n    {\n        \"value\": -21000000,\n        \"bytes\": \"febf90c0\"\n    },\n    {\n        \"value\": 2147483647,\n        \"bytes\": \"7fffffff\"\n    },\n    {\n        \"value\": -2147483648,\n        \"bytes\": \"80000000\"\n    },\n    {\n        \"value\": 2147483648,\n        \"bytes\": \"0000000080000000\"\n    },\n    {\n        \"value\": -2147483649,\n        \"bytes\": \"ffffffff7fffffff\"\n    },\n    {\n        \"value\": 500000000000,\n        \"bytes\": \"000000746a528800\"\n    },\n    {\n        \"value\": -500000000000,\n        \"bytes\": \"ffffff8b95ad7800\"\n    },\n    {\n        \"value\": 9223372036854775807,\n        \"bytes\": \"7fffffffffffffff\"\n    },\n    {\n        \"value\": -9223372036854775808,\n        \"bytes\": \"8000000000000000\"\n    }\n]\n```\n\n## Acknowledgments\n\n[ TODO: (roasbeef); fin ]\n\n## References\n\n1. <a id=\"reference-1\">http://www.unicode.org/charts/PDF/U2600.pdf</a>\n\n## Authors\n\n[ FIXME: Insert Author List ]\n\n![Creative Commons License](https://i.creativecommons.org/l/by/4.0/88x31.png \"License CC-BY\")\n<br>\nThis work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).\n"
        },
        {
          "name": "02-peer-protocol.md",
          "type": "blob",
          "size": 117.931640625,
          "content": "# BOLT #2: Peer Protocol for Channel Management\n\nThe peer channel protocol has three phases: establishment, normal\noperation, and closing.\n\n# Table of Contents\n\n  * [Channel](#channel)\n    * [Definition of `channel_id`](#definition-of-channel_id)\n    * [Interactive Transaction Construction](#interactive-transaction-construction)\n      * [Set-Up and Vocabulary](#set-up-and-vocabulary)\n      * [Fee Responsibility](#fee-responsibility)\n      * [Overview](#overview)\n      * [The `tx_add_input` Message](#the-tx_add_input-message)\n      * [The `tx_add_output` Message](#the-tx_add_output-message)\n      * [The `tx_remove_input` and `tx_remove_output` Messages](#the-tx_remove_input-and-tx_remove_output-messages)\n      * [The `tx_complete` Message](#the-tx_complete-message)\n      * [The `tx_signatures` Message](#the-tx_signatures-message)\n      * [The `tx_init_rbf` Message](#the-tx_init_rbf-message)\n      * [The `tx_ack_rbf` Message](#the-tx_ack_rbf-message)\n      * [The `tx_abort` Message](#the-tx_abort-message)\n    * [Channel Establishment v1](#channel-establishment-v1)\n      * [The `open_channel` Message](#the-open_channel-message)\n      * [The `accept_channel` Message](#the-accept_channel-message)\n      * [The `funding_created` Message](#the-funding_created-message)\n      * [The `funding_signed` Message](#the-funding_signed-message)\n      * [The `channel_ready` Message](#the-channel_ready-message)\n    * [Channel Establishment v2](#channel-establishment-v2)\n      * [The `open_channel2` Message](#the-open_channel2-message)\n      * [The `accept_channel2` Message](#the-accept_channel2-message)\n      * [Funding Composition](#funding-composition)\n      * [The `commitment_signed` Message](#the-commitment_signed-message)\n      * [Sharing funding signatures: `tx_signatures`](#sharing-funding-signatures-tx_signatures)\n      * [Fee bumping: `tx_init_rbf` and `tx_ack_rbf`](#fee-bumping-tx_init_rbf-and-tx_ack_rbf)\n    * [Channel Quiescence](#channel-quiescence)\n    * [Channel Close](#channel-close)\n      * [Closing Initiation: `shutdown`](#closing-initiation-shutdown)\n      * [Closing Negotiation: `closing_signed`](#closing-negotiation-closing_signed)\n    * [Normal Operation](#normal-operation)\n      * [Forwarding HTLCs](#forwarding-htlcs)\n      * [`cltv_expiry_delta` Selection](#cltv_expiry_delta-selection)\n      * [Adding an HTLC: `update_add_htlc`](#adding-an-htlc-update_add_htlc)\n      * [Removing an HTLC: `update_fulfill_htlc`, `update_fail_htlc`, and `update_fail_malformed_htlc`](#removing-an-htlc-update_fulfill_htlc-update_fail_htlc-and-update_fail_malformed_htlc)\n      * [Committing Updates So Far: `commitment_signed`](#committing-updates-so-far-commitment_signed)\n      * [Completing the Transition to the Updated State: `revoke_and_ack`](#completing-the-transition-to-the-updated-state-revoke_and_ack)\n      * [Updating Fees: `update_fee`](#updating-fees-update_fee)\n    * [Message Retransmission: `channel_reestablish` message](#message-retransmission)\n  * [Authors](#authors)\n\n# Channel\n\n## Definition of `channel_id`\n\nSome messages use a `channel_id` to identify the channel. It's\nderived from the funding transaction by combining the `funding_txid`\nand the `funding_output_index`, using big-endian exclusive-OR\n(i.e. `funding_output_index` alters the last 2 bytes).\n\nPrior to channel establishment, a `temporary_channel_id` is used,\nwhich is a random nonce.\n\nNote that as duplicate `temporary_channel_id`s may exist from different\npeers, APIs which reference channels by their channel id before the funding\ntransaction is created are inherently unsafe. The only protocol-provided\nidentifier for a channel before funding_created has been exchanged is the\n(source_node_id, destination_node_id, temporary_channel_id) tuple. Note that\nany such APIs which reference channels by their channel id before the funding\ntransaction is confirmed are also not persistent - until you know the script\npubkey corresponding to the funding output nothing prevents duplicative channel\nids.\n\n### `channel_id`, v2\n\nFor channels established using the v2 protocol, the `channel_id` is the\n`SHA256(lesser-revocation-basepoint || greater-revocation-basepoint)`,\nwhere the lesser and greater is based off the order of the basepoint.\n\nWhen sending `open_channel2`, the peer's revocation basepoint is unknown.\nA `temporary_channel_id` must be computed by using a zeroed out basepoint\nfor the non-initiator.\n\nWhen sending `accept_channel2`, the `temporary_channel_id` from `open_channel2`\nmust be used, to allow the initiator to match the response to its request.\n\n#### Rationale\n\nThe revocation basepoints must be remembered by both peers for correct\noperation anyway. They're known after the first exchange of messages,\nobviating the need for a `temporary_channel_id` in subsequent messages.\nBy mixing information from both sides, they avoid `channel_id` collisions,\nand they remove the dependency on the funding txid.\n\n## Interactive Transaction Construction\n\nInteractive transaction construction allows two peers to collaboratively\nbuild a transaction for broadcast.  This protocol is the foundation\nfor dual-funded channels establishment (v2).\n\n### Set-Up and Vocabulary\n\nThere are two parties to a transaction construction: an *initiator*\nand a *non-initiator*.\nThe *initiator* is the peer which initiates the protocol, e.g.\nfor channel establishment v2 the *initiator* would be the peer which\nsends `open_channel2`.\n\nThe protocol makes the following assumptions:\n\n- The `feerate` for the transaction is known.\n- The `dust_limit` for the transaction is known.\n- The `nLocktime` for the transaction is known.\n- The `nVersion` for the transaction is known.\n\n### Fee Responsibility\n\nThe *initiator* is responsible for paying the fees for the following fields,\nto be referred to as the `common fields`.\n\n  - version\n  - segwit marker + flag\n  - input count\n  - output count\n  - locktime\n\nThe rest of the transaction bytes' fees are the responsibility of\nthe peer who contributed that input or output via `tx_add_input` or\n`tx_add_output`, at the agreed upon `feerate`.\n\n### Overview\n\nThe *initiator* initiates the interactive transaction construction\nprotocol with `tx_add_input`. The *non-initiator* responds with any\nof `tx_add_input`, `tx_add_output`, `tx_remove_input`, `tx_remove_output`, or\n`tx_complete`. The protocol continues with the synchronous exchange\nof interactive transaction protocol messages until both nodes have sent\nand received a consecutive `tx_complete`. This is a turn-based protocol.\n\nOnce peers have exchanged consecutive `tx_complete`s, the\ninteractive transaction construction protocol is considered concluded.\nBoth peers should construct the transaction and fail the negotiation\nif an error is discovered.\n\nThis protocol is expressly designed to allow for parallel, multi-party\nsessions to collectively construct a single transaction. This preserves\nthe ability to open multiple channels in a single transaction. While\n`serial_id`s are generally chosen randomly, to maintain consistent transaction\nordering across all peer sessions, it is simplest to reuse received\n`serial_id`s when forwarding them to other peers, inverting the bottom bit as\nnecessary to satisfy the parity requirement.\n\nHere are a few example exchanges.\n\n#### *initiator* only\n\nA, the *initiator*, has two inputs and an output (the funding output).\nB, the *non-initiator* has nothing to contribute.\n\n        +-------+                       +-------+\n        |       |--(1)- tx_add_input -->|       |\n        |       |<-(2)- tx_complete ----|       |\n        |       |--(3)- tx_add_input -->|       |\n        |   A   |<-(4)- tx_complete ----|   B   |\n        |       |--(5)- tx_add_output ->|       |\n        |       |<-(6)- tx_complete ----|       |\n        |       |--(7)- tx_complete --->|       |\n        +-------+                       +-------+\n\n#### *initiator* and *non-initiator*\n\nA, the *initiator*, contributes 2 inputs and an output that they\nthen remove.  B, the *non-initiator*, contributes 1 input and an output,\nbut waits until A adds a second input before contributing.\n\nNote that if A does not send a second input, the negotiation will end without\nB's contributions.\n\n        +-------+                         +-------+\n        |       |--(1)- tx_add_input ---->|       |\n        |       |<-(2)- tx_complete ------|       |\n        |       |--(3)- tx_add_output --->|       |\n        |       |<-(4)- tx_complete ------|       |\n        |       |--(5)- tx_add_input ---->|       |\n        |   A   |<-(6)- tx_add_input -----|   B   |\n        |       |--(7)- tx_remove_output >|       |\n        |       |<-(8)- tx_add_output ----|       |\n        |       |--(9)- tx_complete ----->|       |\n        |       |<-(10) tx_complete ------|       |\n        +-------+                         +-------+\n\n### The `tx_add_input` Message\n\nThis message contains a transaction input.\n\n1. type: 66 (`tx_add_input`)\n2. data:\n    * [`channel_id`:`channel_id`]\n    * [`u64`:`serial_id`]\n    * [`u16`:`prevtx_len`]\n    * [`prevtx_len*byte`:`prevtx`]\n    * [`u32`:`prevtx_vout`]\n    * [`u32`:`sequence`]\n\n#### Requirements\n\nThe sending node:\n  - MUST add all sent inputs to the transaction\n  - MUST use a unique `serial_id` for each input currently added to the\n    transaction\n  - MUST set `sequence` to be less than or equal to 4294967293 (`0xFFFFFFFD`)\n  - MUST NOT re-transmit inputs it has received from the peer\n  - if is the *initiator*:\n    - MUST send even `serial_id`s\n  - if is the *non-initiator*:\n    - MUST send odd `serial_id`s\n\nThe receiving node:\n  - MUST add all received inputs to the transaction\n  - MUST fail the negotiation if:\n    - `sequence` is set to `0xFFFFFFFE` or `0xFFFFFFFF`\n    - the `prevtx` and `prevtx_vout` are identical to a previously added\n      (and not removed) input's\n    - `prevtx` is not a valid transaction\n    - `prevtx_vout` is greater or equal to the number of outputs on `prevtx`\n    - the `scriptPubKey` of the `prevtx_vout` output of `prevtx` is not exactly a 1-byte push opcode (for the numeric values `0` to `16`) followed by a data push between 2 and 40 bytes\n    - the `serial_id` is already included in the transaction\n    - the `serial_id` has the wrong parity\n    - if has received 4096 `tx_add_input` messages during this negotiation\n\n#### Rationale\n\nEach node must know the set of the transaction inputs. The *non-initiator*\nMAY omit this message.\n\n`serial_id` is a randomly chosen number which uniquely identifies this input.\nInputs in the constructed transaction MUST be sorted by `serial_id`.\n\n`prevtx` is the serialized transaction that contains the output\nthis input spends. Used to verify that the input is non-malleable.\n\n`prevtx_vout` is the index of the output being spent.\n\n`sequence` is the sequence number of this input: it must signal\nreplaceability, and the same value should be used across implementations\nto avoid on-chain fingerprinting.\n\n#### Liquidity griefing\n\nWhen sending `tx_add_input`, senders have no guarantee that the remote node\nwill complete the protocol in a timely manner. Malicious remote nodes could\ndelay messages or stop responding, which can result in a partially created\ntransaction that cannot be broadcast by the honest node. If the honest node\nis locking the corresponding UTXO exclusively for this remote node, this can\nbe exploited to lock up the honest node's liquidity.\n\nIt is thus recommended that implementations keep UTXOs unlocked and actively\nreuse them in concurrent sessions, which guarantees that transactions created\nwith honest nodes double-spend pending transactions with malicious nodes at\nno additional cost for the honest node.\n\nUnfortunately, this will also create conflicts between concurrent sessions\nwith honest nodes. This is a reasonable trade-off though because:\n\n* on-chain funding attempts are relatively infrequent operations\n* honest nodes should complete the protocol quickly, reducing the risk of\n  conflicts\n* failed attempts can simply be retried at no cost\n\n### The `tx_add_output` Message\n\nThis message adds a transaction output.\n\n1. type: 67 (`tx_add_output`)\n2. data:\n    * [`channel_id`:`channel_id`]\n    * [`u64`:`serial_id`]\n    * [`u64`:`sats`]\n    * [`u16`:`scriptlen`]\n    * [`scriptlen*byte`:`script`]\n\n#### Requirements\n\nEither node:\n  - MAY omit this message\n\nThe sending node:\n  - MUST add all sent outputs to the transaction\n  - if is the *initiator*:\n    - MUST send even `serial_id`s\n  - if is the *non-initiator*:\n    - MUST send odd `serial_id`s\n\nThe receiving node:\n  - MUST add all received outputs to the transaction\n  - MUST accept P2WSH, P2WPKH, P2TR `script`s\n  - MAY fail the negotiation if `script` is non-standard\n  - MUST fail the negotiation if:\n    - the `serial_id` is already included in the transaction\n    - the `serial_id` has the wrong parity\n    - it has received 4096 `tx_add_output` messages during this negotiation\n    - the `sats` amount is less than the `dust_limit`\n    - the `sats` amount is greater than 2,100,000,000,000,000 (`MAX_MONEY`)\n\n#### Rationale\n\nEach node must know the set of the transaction outputs.\n\n`serial_id` is a randomly chosen number which uniquely identifies this output.\nOutputs in the constructed transaction MUST be sorted by `serial_id`.\n\n`sats` is the satoshi value of the output.\n\n`script` is the scriptPubKey for the output (with its length omitted).\n`script`s are not required to follow standardness rules: non-standard\nscripts such as `OP_RETURN` may be accepted, but the corresponding\ntransaction may fail to relay across the network.\n\n### The `tx_remove_input` and `tx_remove_output` Messages\n\nThis message removes an input from the transaction.\n\n1. type: 68 (`tx_remove_input`)\n2. data:\n    * [`channel_id`:`channel_id`]\n    * [`u64`:`serial_id`]\n\nThis message removes an output from the transaction.\n\n1. type: 69 (`tx_remove_output`)\n2. data:\n    * [`channel_id`:`channel_id`]\n    * [`u64`:`serial_id`]\n\n#### Requirements\n\nThe sending node:\n  - MUST NOT send a `tx_remove` with a `serial_id` it did not add\n    to the transaction or has already been removed\n\nThe receiving node:\n  - MUST remove the indicated input or output from the transaction\n  - MUST fail the negotiation if:\n    - the input or output identified by the `serial_id` was not added by the\n      sender\n    - the `serial_id` does not correspond to a currently added input (or output)\n\n### The `tx_complete` Message\n\nThis message signals the conclusion of a peer's transaction\ncontributions.\n\n1. type: 70 (`tx_complete`)\n2. data:\n    * [`channel_id`:`channel_id`]\n\n#### Requirements\n\nThe nodes:\n  - MUST send this message in succession to conclude this protocol\n\nThe receiving node:\n  - MUST use the negotiated inputs and outputs to construct a transaction\n  - MUST fail the negotiation if:\n    - the peer's total input satoshis is less than their outputs. One MUST\n      account for the peer's portion of the funding output when verifying\n      compliance with this requirement.\n    - the peer's paid feerate does not meet or exceed the agreed `feerate`\n      (based on the `minimum fee`).\n    - if is the *non-initiator*:\n      - the *initiator*'s fees do not cover the `common` fields\n    - there are more than 252 inputs\n    - there are more than 252 outputs\n    - the estimated weight of the tx is greater than 400,000 (`MAX_STANDARD_TX_WEIGHT`)\n\n#### Rationale\n\nTo signal the conclusion of exchange of transaction inputs and outputs.\n\nUpon successful exchange of `tx_complete` messages, both nodes\nshould construct the transaction and proceed to the next portion of the\nprotocol. For channel establishment v2, exchanging commitment transactions.\n\nFor the `minimum fee` calculation see [BOLT #3](03-transactions.md#calculating-fees-for-collaborative-transaction-construction).\n\nThe maximum inputs and outputs are capped at 252. This effectively fixes\nthe byte size of the input and output counts on the transaction to one (1).\n\n### The `tx_signatures` Message\n\n1. type: 71 (`tx_signatures`)\n2. data:\n    * [`channel_id`:`channel_id`]\n    * [`sha256`:`txid`]\n    * [`u16`:`num_witnesses`]\n    * [`num_witnesses*witness`:`witnesses`]\n\n1. subtype: `witness`\n2. data:\n    * [`u16`:`len`]\n    * [`len*byte`:`witness_data`]\n\n#### Requirements\n\nThe sending node:\n  - if it has the lowest total satoshis contributed, as defined by total\n    `tx_add_input` values, or both peers have contributed equal amounts\n    but it has the lowest `node_id` (sorted lexicographically):\n    - MUST transmit their `tx_signatures` first\n  - MUST order the `witnesses` by the `serial_id` of the input they\n    correspond to\n  - `num_witnesses`s MUST equal the number of inputs they added\n  - MUST use the `SIGHASH_ALL` (0x01) flag on each signature\n\nThe receiving node:\n  - MUST fail the negotiation if:\n    - the message contains an empty `witness`\n    - the number of `witnesses` does not equal the number of inputs\n      added by the sending node\n    - the `txid` does not match the txid of the transaction\n    - the `witnesses` are non-standard\n    - a signature uses a flag that is not `SIGHASH_ALL` (0x01)\n  - SHOULD apply the `witnesses` to the transaction and broadcast it\n  - MUST reply with their `tx_signatures` if not already transmitted\n\n#### Rationale\n\nA strict ordering is used to decide which peer sends `tx_signatures` first.\nThis prevents deadlocks where each peer is waiting for the other peer to\nsend `tx_signatures`, and enables multiparty tx collaboration.\n\nThe `witness_data` is encoded as per bitcoin's wire protocol (a CompactSize number\nof elements, with each element a CompactSize length and that many bytes following).\n\nWhile the `minimum fee` is calculated and verified at `tx_complete` conclusion,\nit is possible for the fee for the exchanged witness data to be underpaid.\nIt is the responsibility of the sending peer to correctly account for the\nrequired fee.\n\n### The `tx_init_rbf` Message\n\nThis message initiates a replacement of the transaction after it's been\ncompleted.\n\n1. type: 72 (`tx_init_rbf`)\n2. data:\n   * [`channel_id`:`channel_id`]\n   * [`u32`:`locktime`]\n   * [`u32`:`feerate`]\n   * [`tx_init_rbf_tlvs`:`tlvs`]\n\n1. `tlv_stream`: `tx_init_rbf_tlvs`\n2. types:\n    1. type: 0 (`funding_output_contribution`)\n    2. data:\n        * [`s64`:`satoshis`]\n   1. type: 2 (`require_confirmed_inputs`)\n\n#### Requirements\n\nThe sender:\n  - MUST set `feerate` greater than or equal to 25/24 times the `feerate`\n    of the previously constructed transaction, rounded down.\n  - If it contributes to the transaction's funding output:\n    - MUST set `funding_output_contribution`\n  - If it requires the receiving node to only use confirmed inputs:\n    - MUST set `require_confirmed_inputs`\n\nThe recipient:\n  - MUST respond either with `tx_abort` or with `tx_ack_rbf`\n  - MUST respond with `tx_abort` if:\n    - the `feerate` is not greater than or equal to 25/24 times `feerate`\n      of the last successfully constructed transaction\n  - MAY send `tx_abort` for any reason\n  - MUST fail the negotiation if:\n    - `require_confirmed_inputs` is set but it cannot provide confirmed inputs\n\n#### Rationale\n\n`feerate` is the feerate this transaction will pay. It must be at least\n1/24 greater than the last used `feerate`, rounded down to the nearest\nsatoshi to ensure there is progress.\n\nE.g. if the last `feerate` was 520, the next sent `feerate` must be 541\n(520 * 25 / 24 = 541.667, rounded down to 541).\n\nIf the previous transaction confirms in the middle of an RBF attempt,\nthe attempt MUST be abandoned.\n\n`funding_output_contribution` is the amount of satoshis that this peer\nwill contribute to the funding output of the transaction, when there is\nsuch an output. Note that it may be different from the contribution\nmade in the previously completed transaction. If omitted, the sender is\nnot contributing to the funding output.\n\n### The `tx_ack_rbf` Message\n\n1. type: 73 (`tx_ack_rbf`)\n2. data:\n   * [`channel_id`:`channel_id`]\n   * [`tx_ack_rbf_tlvs`:`tlvs`]\n\n\n1. `tlv_stream`: `tx_ack_rbf_tlvs`\n2. types:\n    1. type: 0 (`funding_output_contribution`)\n    2. data:\n        * [`s64`:`satoshis`]\n   1. type: 2 (`require_confirmed_inputs`)\n\n#### Requirements\n\nThe sender:\n  - If it contributes to the transaction's funding output:\n    - MUST set `funding_output_contribution`\n  - If it requires the receiving node to only use confirmed inputs:\n    - MUST set `require_confirmed_inputs`\n\nThe recipient:\n  - MUST respond with `tx_abort` or with a `tx_add_input` message,\n    restarting the interactive tx collaboration protocol.\n  - MUST fail the negotiation if:\n    - `require_confirmed_inputs` is set but it cannot provide confirmed inputs\n\n#### Rationale\n\n`funding_output_contribution` is the amount of satoshis that this peer\nwill contribute to the funding output of the transaction, when there is\nsuch an output. Note that it may be different from the contribution\nmade in the previously completed transaction. If omitted, the sender is\nnot contributing to the funding output.\n\nIt's recommended that a peer, rather than fail the RBF negotiation due to\na large feerate change, instead stop contributing to the funding output,\nand decline to participate further in the transaction (by not contributing,\nthey may obtain incoming liquidity at no cost).\n\n### The `tx_abort` Message\n\n1. type: 74 (`tx_abort`)\n2. data:\n   * [`channel_id`:`channel_id`]\n   * [`u16`:`len`]\n   * [`len*byte`:`data`]\n\n#### Requirements\n\nA sending node:\n  - MUST NOT have already transmitted `tx_signatures`\n  - SHOULD forget the current negotiation and reset their state.\n  - MAY send an empty `data` field.\n  - when failure was caused by an invalid signature check:\n    - SHOULD include the raw, hex-encoded transaction in reply to a\n      `tx_signatures` or `commitment_signed` message.\n\nA receiving node:\n  - if they have already sent `tx_signatures` to the peer:\n    - MUST NOT forget the channel until any inputs to the negotiated tx\n      have been spent.\n  - if they have not sent `tx_signatures`:\n    - SHOULD forget the current negotiation and reset their state.\n  - if they have not sent `tx_abort`:\n    - MUST echo back `tx_abort`\n  - if `data` is not composed solely of printable ASCII characters (For\n    reference: the printable character set includes byte values 32 through\n    126, inclusive):\n    - SHOULD NOT print out `data` verbatim.\n\n#### Rationale\n\nA receiving node, if they've already sent their `tx_signatures` has no guarantee\nthat the transaction won't be signed and published by their peer. They must remember\nthe transaction and channel (if appropriate) until the transaction is no longer\neligible to be spent (i.e. any input has been spent in a different transaction).\n\nThe `tx_abort` message allows for the cancellation of an in progress negotiation,\nand a return to the initial starting state. It is distinct from the `error`\nmessage, which triggers a channel close.\n\nEchoing back `tx_abort` allows the peer to ack that they've seen the abort message,\npermitting the originating peer to terminate the in-flight process without\nworrying about stale messages.\n\n## Channel Establishment v1\n\nAfter authenticating and initializing a connection ([BOLT #8](08-transport.md)\nand [BOLT #1](01-messaging.md#the-init-message), respectively), channel establishment may begin.\n\nThere are two pathways for establishing a channel, a legacy version presented here,\nand a second version ([below](#channel-establishment-v2)). Which channel\nestablishment protocols are available for use is negotiated in the `init` message.\n\nThis consists of the funding node (funder) sending an `open_channel` message,\nfollowed by the responding node (fundee) sending `accept_channel`. With the\nchannel parameters locked in, the funder is able to create the funding\ntransaction and both versions of the commitment transaction, as described in\n[BOLT #3](03-transactions.md#bolt-3-bitcoin-transaction-and-script-formats).\nThe funder then sends the outpoint of the funding output with the `funding_created`\nmessage, along with the signature for the fundee's version of the commitment\ntransaction. Once the fundee learns the funding outpoint, it's able to\ngenerate the signature for the funder's version of the commitment transaction and send it\nover using the `funding_signed` message.\n\nOnce the channel funder receives the `funding_signed` message, it\nmust broadcast the funding transaction to the Bitcoin network. After\nthe `funding_signed` message is sent/received, both sides should wait\nfor the funding transaction to enter the blockchain and reach the\nspecified depth (number of confirmations). After both sides have sent\nthe `channel_ready` message, the channel is established and can begin\nnormal operation. The `channel_ready` message includes information\nthat will be used to construct channel authentication proofs.\n\n\n        +-------+                              +-------+\n        |       |--(1)---  open_channel  ----->|       |\n        |       |<-(2)--  accept_channel  -----|       |\n        |       |                              |       |\n        |   A   |--(3)--  funding_created  --->|   B   |\n        |       |<-(4)--  funding_signed  -----|       |\n        |       |                              |       |\n        |       |--(5)---  channel_ready  ---->|       |\n        |       |<-(6)---  channel_ready  -----|       |\n        +-------+                              +-------+\n\n        - where node A is 'funder' and node B is 'fundee'\n\nIf this fails at any stage, or if one node decides the channel terms\noffered by the other node are not suitable, the channel establishment\nfails.\n\nNote that multiple channels can operate in parallel, as all channel\nmessages are identified by either a `temporary_channel_id` (before the\nfunding transaction is created) or a `channel_id` (derived from the\nfunding transaction).\n\n### The `open_channel` Message\n\nThis message contains information about a node and indicates its\ndesire to set up a new channel. This is the first step toward creating\nthe funding transaction and both versions of the commitment transaction.\n\n1. type: 32 (`open_channel`)\n2. data:\n   * [`chain_hash`:`chain_hash`]\n   * [`32*byte`:`temporary_channel_id`]\n   * [`u64`:`funding_satoshis`]\n   * [`u64`:`push_msat`]\n   * [`u64`:`dust_limit_satoshis`]\n   * [`u64`:`max_htlc_value_in_flight_msat`]\n   * [`u64`:`channel_reserve_satoshis`]\n   * [`u64`:`htlc_minimum_msat`]\n   * [`u32`:`feerate_per_kw`]\n   * [`u16`:`to_self_delay`]\n   * [`u16`:`max_accepted_htlcs`]\n   * [`point`:`funding_pubkey`]\n   * [`point`:`revocation_basepoint`]\n   * [`point`:`payment_basepoint`]\n   * [`point`:`delayed_payment_basepoint`]\n   * [`point`:`htlc_basepoint`]\n   * [`point`:`first_per_commitment_point`]\n   * [`byte`:`channel_flags`]\n   * [`open_channel_tlvs`:`tlvs`]\n\n1. `tlv_stream`: `open_channel_tlvs`\n2. types:\n    1. type: 0 (`upfront_shutdown_script`)\n    2. data:\n        * [`...*byte`:`shutdown_scriptpubkey`]\n    1. type: 1 (`channel_type`)\n    2. data:\n        * [`...*byte`:`type`]\n\nThe `chain_hash` value denotes the exact blockchain that the opened channel will\nreside within. This is usually the genesis hash of the respective blockchain.\nThe existence of the `chain_hash` allows nodes to open channels\nacross many distinct blockchains as well as have channels within multiple\nblockchains opened to the same peer (if it supports the target chains).\n\nThe `temporary_channel_id` is used to identify this channel on a per-peer basis until the\nfunding transaction is established, at which point it is replaced\nby the `channel_id`, which is derived from the funding transaction.\n\n`funding_satoshis` is the amount the sender is putting into the\nchannel. `push_msat` is an amount of initial funds that the sender is\nunconditionally giving to the receiver. `dust_limit_satoshis` is the\nthreshold below which outputs should not be generated for this node's\ncommitment or HTLC transactions (i.e. HTLCs below this amount plus\nHTLC transaction fees are not enforceable on-chain). This reflects the\nreality that tiny outputs are not considered standard transactions and\nwill not propagate through the Bitcoin network. `channel_reserve_satoshis`\nis the minimum amount that the other node is to keep as a direct\npayment. `htlc_minimum_msat` indicates the smallest value HTLC this\nnode will accept.\n\n`max_htlc_value_in_flight_msat` is a cap on total value of outstanding\nHTLCs offered by the remote node, which allows the local node to limit its\nexposure to HTLCs; similarly, `max_accepted_htlcs` limits the number of\noutstanding HTLCs the remote node can offer.\n\n`feerate_per_kw` indicates the initial fee rate in satoshi per 1000-weight\n(i.e. 1/4 the more normally-used 'satoshi per 1000 vbytes') that this\nside will pay for commitment and HTLC transactions, as described in\n[BOLT #3](03-transactions.md#fee-calculation) (this can be adjusted\nlater with an `update_fee` message).\n\n`to_self_delay` is the number of blocks that the other node's to-self\noutputs must be delayed, using `OP_CHECKSEQUENCEVERIFY` delays; this\nis how long it will have to wait in case of breakdown before redeeming\nits own funds.\n\n`funding_pubkey` is the public key in the 2-of-2 multisig script of\nthe funding transaction output.\n\nThe various `_basepoint` fields are used to derive unique\nkeys as described in [BOLT #3](03-transactions.md#key-derivation) for each commitment\ntransaction. Varying these keys ensures that the transaction ID of\neach commitment transaction is unpredictable to an external observer,\neven if one commitment transaction is seen; this property is very\nuseful for preserving privacy when outsourcing penalty transactions to\nthird parties.\n\n`first_per_commitment_point` is the per-commitment point to be used\nfor the first commitment transaction,\n\nOnly the least-significant bit of `channel_flags` is currently\ndefined: `announce_channel`. This indicates whether the initiator of\nthe funding flow wishes to advertise this channel publicly to the\nnetwork, as detailed within [BOLT #7](07-routing-gossip.md#bolt-7-p2p-node-and-channel-discovery).\n\nThe `shutdown_scriptpubkey` allows the sending node to commit to where\nfunds will go on mutual close, which the remote node should enforce\neven if a node is compromised later.\n\nThe `option_support_large_channel` is a feature used to let everyone \nknow this node will accept `funding_satoshis` greater than or equal to 2^24.\nSince it's broadcast in the `node_announcement` message other nodes can use it to identify peers \nwilling to accept large channel even before exchanging the `init` message with them. \n\n#### Defined Channel Types\n\nChannel types are an explicit enumeration: for convenience of future\ndefinitions they reuse even feature bits, but they are not an\narbitrary combination (they represent the persistent features which\naffect the channel operation).\n\nThe currently defined basic types are:\n  - `option_static_remotekey` (bit 12)\n  - `option_anchors` and `option_static_remotekey` (bits 22 and 12)\n\nEach basic type has the following variations allowed:\n  - `option_scid_alias` (bit 46)\n  - `option_zeroconf` (bit 50)\n\n#### Requirements\n\nThe sending node:\n  - MUST ensure the `chain_hash` value identifies the chain it wishes to open the channel within.\n  - MUST ensure `temporary_channel_id` is unique from any other channel ID with the same peer.\n  - if both nodes advertised `option_support_large_channel`:\n    - MAY set `funding_satoshis` greater than or equal to 2^24 satoshi.\n  - otherwise:\n    - MUST set `funding_satoshis` to less than 2^24 satoshi.\n  - MUST set `push_msat` to equal or less than 1000 * `funding_satoshis`.\n  - MUST set `funding_pubkey`, `revocation_basepoint`, `htlc_basepoint`, `payment_basepoint`, and `delayed_payment_basepoint` to valid secp256k1 pubkeys in compressed format.\n  - MUST set `first_per_commitment_point` to the per-commitment point to be used for the initial commitment transaction, derived as specified in [BOLT #3](03-transactions.md#per-commitment-secret-requirements).\n  - MUST set `channel_reserve_satoshis` greater than or equal to `dust_limit_satoshis`.\n  - MUST set undefined bits in `channel_flags` to 0.\n  - if both nodes advertised the `option_upfront_shutdown_script` feature:\n    - MUST include `upfront_shutdown_script` with either a valid `shutdown_scriptpubkey` as required by `shutdown` `scriptpubkey`, or a zero-length `shutdown_scriptpubkey` (ie. `0x0000`).\n  - otherwise:\n    - MAY include `upfront_shutdown_script`.\n  - if it includes `open_channel_tlvs`:\n    - MUST include `upfront_shutdown_script`.\n  - if `option_channel_type` is negotiated:\n    - MUST set `channel_type`\n  - if it includes `channel_type`:\n    - MUST set it to a defined type representing the type it wants.\n    - MUST use the smallest bitmap possible to represent the channel type.\n    - SHOULD NOT set it to a type containing a feature which was not negotiated.\n    - if `announce_channel` is `true` (not `0`):\n      - MUST NOT send `channel_type` with the `option_scid_alias` bit set.\n\nThe sending node SHOULD:\n  - set `to_self_delay` sufficient to ensure the sender can irreversibly spend a commitment transaction output, in case of misbehavior by the receiver.\n  - set `feerate_per_kw` to at least the rate it estimates would cause the transaction to be immediately included in a block.\n  - set `dust_limit_satoshis` to a sufficient value to allow commitment transactions to propagate through the Bitcoin network.\n  - set `htlc_minimum_msat` to the minimum value HTLC it's willing to accept from this peer.\n\nThe receiving node MUST:\n  - ignore undefined bits in `channel_flags`.\n  - if the connection has been re-established after receiving a previous\n `open_channel`, BUT before receiving a `funding_created` message:\n    - accept a new `open_channel` message.\n    - discard the previous `open_channel` message.\n  - if `option_dual_fund` has been negotiated:\n    - fail the channel.\n\nThe receiving node MAY fail the channel if:\n  - `option_channel_type` was negotiated but the message doesn't include a `channel_type`\n  - `announce_channel` is `false` (`0`), yet it wishes to publicly announce the channel.\n  - `funding_satoshis` is too small.\n  - it considers `htlc_minimum_msat` too large.\n  - it considers `max_htlc_value_in_flight_msat` too small.\n  - it considers `channel_reserve_satoshis` too large.\n  - it considers `max_accepted_htlcs` too small.\n  - it considers `dust_limit_satoshis` too large.\n\nThe receiving node MUST fail the channel if:\n  - the `chain_hash` value is set to a hash of a chain that is unknown to the receiver.\n  - `push_msat` is greater than `funding_satoshis` * 1000.\n  - `to_self_delay` is unreasonably large.\n  - `max_accepted_htlcs` is greater than 483.\n  - it considers `feerate_per_kw` too small for timely processing or unreasonably large.\n  - `funding_pubkey`, `revocation_basepoint`, `htlc_basepoint`, `payment_basepoint`, or `delayed_payment_basepoint`\nare not valid secp256k1 pubkeys in compressed format.\n  - `dust_limit_satoshis` is greater than `channel_reserve_satoshis`.\n  - `dust_limit_satoshis` is smaller than `354 satoshis` (see [BOLT 3](03-transactions.md#dust-limits)).\n  - the funder's amount for the initial commitment transaction is not sufficient for full [fee payment](03-transactions.md#fee-payment).\n  - both `to_local` and `to_remote` amounts for the initial commitment transaction are less than or equal to `channel_reserve_satoshis` (see [BOLT 3](03-transactions.md#commitment-transaction-outputs)).\n  - `funding_satoshis` is greater than or equal to 2^24 and the receiver does not support `option_support_large_channel`. \n  - It supports `channel_type` and `channel_type` was set:\n    - if `type` is not suitable.\n    - if `type` includes `option_zeroconf` and it does not trust the sender to open an unconfirmed channel.\n\nThe receiving node MUST NOT:\n  - consider funds received, using `push_msat`, to be received until the funding transaction has reached sufficient depth.\n\n#### Rationale\n\nThe requirement for `funding_satoshis` to be less than 2^24 satoshi was a temporary self-imposed limit while implementations were not yet considered stable, it can be lifted by advertising `option_support_large_channel`.\n\nThe *channel reserve* is specified by the peer's `channel_reserve_satoshis`: 1% of the channel total is suggested. Each side of a channel maintains this reserve so it always has something to lose if it were to try to broadcast an old, revoked commitment transaction. Initially, this reserve may not be met, as only one side has funds; but the protocol ensures that there is always progress toward meeting this reserve, and once met, it is maintained.\n\nThe sender can unconditionally give initial funds to the receiver using a non-zero `push_msat`, but even in this case we ensure that the funder has sufficient remaining funds to pay fees and that one side has some amount it can spend (which also implies there is at least one non-dust output). Note that, like any other on-chain transaction, this payment is not certain until the funding transaction has been confirmed sufficiently (with a danger of double-spend until this occurs) and may require a separate method to prove payment via on-chain confirmation.\n\nThe `feerate_per_kw` is generally only of concern to the sender (who pays the fees), but there is also the fee rate paid by HTLC transactions; thus, unreasonably large fee rates can also penalize the recipient.\n\nSeparating the `htlc_basepoint` from the `payment_basepoint` improves security: a node needs the secret associated with the `htlc_basepoint` to produce HTLC signatures for the protocol, but the secret for the `payment_basepoint` can be in cold storage.\n\nThe requirement that `channel_reserve_satoshis` is not considered dust\naccording to `dust_limit_satoshis` eliminates cases where all outputs\nwould be eliminated as dust.  The similar requirements in\n`accept_channel` ensure that both sides' `channel_reserve_satoshis`\nare above both `dust_limit_satoshis`.\n\nThe receiver should not accept large `dust_limit_satoshis`, as this could be\nused in griefing attacks, where the peer publishes its commitment with a lot\nof dust htlcs, which effectively become miner fees.\n\nDetails for how to handle a channel failure can be found in [BOLT 5:Failing a Channel](05-onchain.md#failing-a-channel).\n\n### The `accept_channel` Message\n\nThis message contains information about a node and indicates its\nacceptance of the new channel. This is the second step toward creating the\nfunding transaction and both versions of the commitment transaction.\n\n1. type: 33 (`accept_channel`)\n2. data:\n   * [`32*byte`:`temporary_channel_id`]\n   * [`u64`:`dust_limit_satoshis`]\n   * [`u64`:`max_htlc_value_in_flight_msat`]\n   * [`u64`:`channel_reserve_satoshis`]\n   * [`u64`:`htlc_minimum_msat`]\n   * [`u32`:`minimum_depth`]\n   * [`u16`:`to_self_delay`]\n   * [`u16`:`max_accepted_htlcs`]\n   * [`point`:`funding_pubkey`]\n   * [`point`:`revocation_basepoint`]\n   * [`point`:`payment_basepoint`]\n   * [`point`:`delayed_payment_basepoint`]\n   * [`point`:`htlc_basepoint`]\n   * [`point`:`first_per_commitment_point`]\n   * [`accept_channel_tlvs`:`tlvs`]\n\n1. `tlv_stream`: `accept_channel_tlvs`\n2. types:\n    1. type: 0 (`upfront_shutdown_script`)\n    2. data:\n        * [`...*byte`:`shutdown_scriptpubkey`]\n    1. type: 1 (`channel_type`)\n    2. data:\n        * [`...*byte`:`type`]\n\n#### Requirements\n\nThe `temporary_channel_id` MUST be the same as the `temporary_channel_id` in\nthe `open_channel` message.\n\nThe sender:\n  - if `channel_type` includes `option_zeroconf`:\n    - MUST set `minimum_depth` to zero.\n  - otherwise:\n    - SHOULD set `minimum_depth` to a number of blocks it considers reasonable to avoid double-spending of the funding transaction.\n  - MUST set `channel_reserve_satoshis` greater than or equal to `dust_limit_satoshis` from the `open_channel` message.\n  - MUST set `dust_limit_satoshis` less than or equal to `channel_reserve_satoshis` from the `open_channel` message.\n  - if `option_channel_type` was negotiated:\n    - MUST set `channel_type` to the `channel_type` from `open_channel`\n\nThe receiver:\n  - if `minimum_depth` is unreasonably large:\n    - MAY fail the channel.\n  - if `channel_reserve_satoshis` is less than `dust_limit_satoshis` within the `open_channel` message:\n    - MUST fail the channel.\n  - if `channel_reserve_satoshis` from the `open_channel` message is less than `dust_limit_satoshis`:\n    - MUST fail the channel.\n  - if `channel_type` is set, and `channel_type` was set in `open_channel`, and they are not equal types:\n    - MUST fail the channel.\n  - if `option_channel_type` was negotiated but the message doesn't include a `channel_type`:\n    - MAY fail the channel.\n\nOther fields have the same requirements as their counterparts in `open_channel`.\n\n### The `funding_created` Message\n\nThis message describes the outpoint which the funder has created for\nthe initial commitment transactions. After receiving the peer's\nsignature, via `funding_signed`, it will broadcast the funding transaction.\n\n1. type: 34 (`funding_created`)\n2. data:\n    * [`32*byte`:`temporary_channel_id`]\n    * [`sha256`:`funding_txid`]\n    * [`u16`:`funding_output_index`]\n    * [`signature`:`signature`]\n\n#### Requirements\n\nThe sender MUST set:\n  - `temporary_channel_id` the same as the `temporary_channel_id` in the `open_channel` message.\n  - `funding_txid` to the transaction ID of a non-malleable transaction,\n    - and MUST NOT broadcast this transaction.\n  - `funding_output_index` to the output number of that transaction that corresponds the funding transaction output, as defined in [BOLT #3](03-transactions.md#funding-transaction-output).\n  - `signature` to the valid signature using its `funding_pubkey` for the initial commitment transaction, as defined in [BOLT #3](03-transactions.md#commitment-transaction).\n\nThe sender:\n  - when creating the funding transaction:\n    - SHOULD use only BIP141 (Segregated Witness) inputs.\n    - SHOULD ensure the funding transaction confirms in the next 2016 blocks.\n\nThe recipient:\n  - if `signature` is incorrect OR non-compliant with LOW-S-standard rule<sup>[LOWS](https://github.com/bitcoin/bitcoin/pull/6769)</sup>:\n    - MUST send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n\n#### Rationale\n\nThe `funding_output_index` can only be 2 bytes, since that's how it's packed into the `channel_id` and used throughout the gossip protocol. The limit of 65535 outputs should not be overly burdensome.\n\nA transaction with all Segregated Witness inputs is not malleable, hence the funding transaction recommendation.\n\nThe funder may use CPFP on a change output to ensure that the funding transaction confirms before 2016 blocks,\notherwise the fundee may forget that channel.\n\n### The `funding_signed` Message\n\nThis message gives the funder the signature it needs for the first\ncommitment transaction, so it can broadcast the transaction knowing that funds\ncan be redeemed, if need be.\n\nThis message introduces the `channel_id` to identify the channel. It's derived from the funding transaction by combining the `funding_txid` and the `funding_output_index`, using big-endian exclusive-OR (i.e. `funding_output_index` alters the last 2 bytes).\n\n1. type: 35 (`funding_signed`)\n2. data:\n    * [`channel_id`:`channel_id`]\n    * [`signature`:`signature`]\n\n#### Requirements\n\nBoth peers:\n  - if `channel_type` was present in both `open_channel` and `accept_channel`:\n    - This is the `channel_type` (they must be equal, required above)\n  - otherwise:\n    - if `option_anchors` was negotiated:\n      - the `channel_type` is `option_anchors` and `option_static_remotekey` (bits 22 and 12)\n    - otherwise:\n      - the `channel_type` is `option_static_remotekey` (bit 12)\n  - MUST use that `channel_type` for all commitment transactions.\n\nThe sender MUST set:\n  - `channel_id` by exclusive-OR of the `funding_txid` and the `funding_output_index` from the `funding_created` message.\n  - `signature` to the valid signature, using its `funding_pubkey` for the initial commitment transaction, as defined in [BOLT #3](03-transactions.md#commitment-transaction).\n\nThe recipient:\n  - if `signature` is incorrect OR non-compliant with LOW-S-standard rule<sup>[LOWS](https://github.com/bitcoin/bitcoin/pull/6769)</sup>:\n    - MUST send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n  - MUST NOT broadcast the funding transaction before receipt of a valid `funding_signed`.\n  - on receipt of a valid `funding_signed`:\n    - SHOULD broadcast the funding transaction.\n\n#### Rationale\n\nWe decide on `option_static_remotekey` or `option_anchors` at this point\nwhen we first have to generate the commitment transaction. The feature\nbits that were communicated in the `init` message exchange for the current\nconnection determine the channel commitment format for the total lifetime\nof the channel. Even if a later reconnection does not negotiate this\nparameter, this channel will continue to use `option_static_remotekey` or\n`option_anchors`; we don't support \"downgrading\".\n\n`option_anchors` is considered superior to `option_static_remotekey`,\nand the superior one is favored if more than one is negotiated.\n\n### The `channel_ready` Message\n\nThis message (which used to be called `funding_locked`) indicates that the funding transaction has sufficient confirms for channel use. Once both nodes have sent this, the channel enters normal operating mode.\n\nNote that the opener is free to send this message at any time (since it presumably trusts itself), but the\naccepter would usually wait until the funding has reached the `minimum_depth` asked for in `accept_channel`.\n\n1. type: 36 (`channel_ready`)\n2. data:\n    * [`channel_id`:`channel_id`]\n    * [`point`:`second_per_commitment_point`]\n    * [`channel_ready_tlvs`:`tlvs`]\n\n1. `tlv_stream`: `channel_ready_tlvs`\n2. types:\n    1. type: 1 (`short_channel_id`)\n    2. data:\n        * [`short_channel_id`:`alias`]\n\n#### Requirements\n\nThe sender:\n  - MUST NOT send `channel_ready` unless outpoint of given by `funding_txid` and\n   `funding_output_index` in the `funding_created` message pays exactly `funding_satoshis` to the scriptpubkey specified in [BOLT #3](03-transactions.md#funding-transaction-output).\n  - if it is not the node opening the channel:\n    - SHOULD wait until the funding transaction has reached `minimum_depth` before\n      sending this message.\n  - MUST set `second_per_commitment_point` to the per-commitment point to be used\n  for commitment transaction #1, derived as specified in\n  [BOLT #3](03-transactions.md#per-commitment-secret-requirements).\n  - if `option_scid_alias` was negotiated:\n    - MUST set `short_channel_id` `alias`.\n  - otherwise:\n    - MAY set `short_channel_id` `alias`.\n  - if it sets `alias`:\n    - if the `announce_channel` bit was set in `open_channel`:\n      - SHOULD initially set `alias` to value not related to the real `short_channel_id`.\n    - otherwise:\n      - MUST set `alias` to a value not related to the real `short_channel_id`.\n    - MUST NOT send the same `alias` for multiple peers or use an alias which\n      collides with a `short_channel_id`  of a channel on the same node.\n    - MUST always recognize the `alias` as a `short_channel_id` for incoming HTLCs to this channel.\n    - if `channel_type` has `option_scid_alias` set:\n      - MUST NOT allow incoming HTLCs to this channel using the real `short_channel_id`\n    - MAY send multiple `channel_ready` messages to the same peer with different `alias` values.\n  - otherwise:\n    - MUST wait until the funding transaction has reached `minimum_depth` before sending this message.\n\n\nThe sender:\n\nA non-funding node (fundee):\n  - SHOULD forget the channel if it does not see the correct funding\n    transaction after a timeout of 2016 blocks.\n\nThe receiver:\n  - MAY use any of the `alias` it received, in BOLT 11 `r` fields.\n  - if `channel_type` has `option_scid_alias` set:\n    - MUST NOT use the real `short_channel_id` in BOLT 11 `r` fields.\n\nFrom the point of waiting for `channel_ready` onward, either node MAY\nsend an `error` and fail the channel if it does not receive a required response from the\nother node after a reasonable timeout.\n\n#### Rationale\n\nThe non-funder can simply forget the channel ever existed, since no\nfunds are at risk. If the fundee were to remember the channel forever, this\nwould create a Denial of Service risk; therefore, forgetting it is recommended\n(even if the promise of `push_msat` is significant).\n\nIf the fundee forgets the channel before it was confirmed, the funder will need\nto broadcast the commitment transaction to get his funds back and open a new\nchannel. To avoid this, the funder should ensure the funding transaction\nconfirms in the next 2016 blocks.\n\nThe `alias` here is required for two distinct use cases. The first one is\nfor routing payments through channels that are not confirmed yet (since\nthe real `short_channel_id` is unknown until confirmation). The second one\nis to provide one or more aliases to use for private channels (even once\na real `short_channel_id` is available).\n\nWhile a node can send multiple `alias`, it must remember all of the\nones it has sent so it can use them should they be requested by\nincoming HTLCs.  The recipient only need remember one, for use in\n`r` route hints in BOLT 11 invoices.\n\nIf an RBF negotiation is in progress when a `channel_ready` message is\nexchanged, the negotiation must be abandoned.\n\n## Channel Establishment v2\n\nThis is a revision of the channel establishment protocol.\nIt changes the previous protocol to allow the `accept_channel2` peer\n(the *accepter*/*non-initiator*) to contribute inputs to the funding\ntransaction, via the interactive transaction construction protocol.\n\n        +-------+                              +-------+\n        |       |--(1)--- open_channel2  ----->|       |\n        |       |<-(2)--- accept_channel2 -----|       |\n        |       |                              |       |\n    --->|       |      <tx collaboration>      |       |\n    |   |       |                              |       |\n    |   |       |--(3)--  commitment_signed -->|       |\n    |   |       |<-(4)--  commitment_signed ---|       |\n    |   |   A   |                              |   B   |\n    |   |       |<-(5)--  tx_signatures -------|       |\n    |   |       |--(6)--  tx_signatures ------>|       |\n    |   |       |                              |       |\n    |   |       |--(a)--- tx_init_rbf -------->|       |\n    ----|       |<-(b)--- tx_ack_rbf ----------|       |\n        |       |                              |       |\n        |       |    <tx rbf collaboration>    |       |\n        |       |                              |       |\n        |       |--(c)--  commitment_signed -->|       |\n        |       |<-(d)--  commitment_signed ---|       |\n        |       |                              |       |\n        |       |<-(e)--  tx_signatures -------|       |\n        |       |--(f)--  tx_signatures ------>|       |\n        |       |                              |       |\n        |       |--(7)--- channel_ready  ----->|       |\n        |       |<-(8)--- channel_ready  ------|       |\n        +-------+                              +-------+\n\n        - where node A is *opener*/*initiator* and node B is\n          *accepter*/*non-initiator*\n\n### The `open_channel2` Message\n\nThis message initiates the v2 channel establishment workflow.\n\n1. type: 64 (`open_channel2`)\n2. data:\n   * [`chain_hash`:`chain_hash`]\n   * [`channel_id`:`temporary_channel_id`]\n   * [`u32`:`funding_feerate_perkw`]\n   * [`u32`:`commitment_feerate_perkw`]\n   * [`u64`:`funding_satoshis`]\n   * [`u64`:`dust_limit_satoshis`]\n   * [`u64`:`max_htlc_value_in_flight_msat`]\n   * [`u64`:`htlc_minimum_msat`]\n   * [`u16`:`to_self_delay`]\n   * [`u16`:`max_accepted_htlcs`]\n   * [`u32`:`locktime`]\n   * [`point`:`funding_pubkey`]\n   * [`point`:`revocation_basepoint`]\n   * [`point`:`payment_basepoint`]\n   * [`point`:`delayed_payment_basepoint`]\n   * [`point`:`htlc_basepoint`]\n   * [`point`:`first_per_commitment_point`]\n   * [`point`:`second_per_commitment_point`]\n   * [`byte`:`channel_flags`]\n   * [`opening_tlvs`:`tlvs`]\n\n1. `tlv_stream`: `opening_tlvs`\n2. types:\n   1. type: 0 (`upfront_shutdown_script`)\n   2. data:\n       * [`...*byte`:`shutdown_scriptpubkey`]\n   1. type: 1 (`channel_type`)\n   2. data:\n        * [`...*byte`:`type`]\n   1. type: 2 (`require_confirmed_inputs`)\n\nRationale and Requirements are the same as for [`open_channel`](#the-open_channel-message),\nwith the following additions.\n\n#### Requirements\n\nIf nodes have negotiated `option_dual_fund`:\n  - the opening node:\n    - MUST NOT send `open_channel`\n\nThe sending node:\n  - MUST set `funding_feerate_perkw` to the feerate for this transaction\n  - If it requires the receiving node to only use confirmed inputs:\n    - MUST set `require_confirmed_inputs`\n\nThe receiving node:\n  - MAY fail the negotiation if:\n    - the `locktime` is unacceptable\n    - the `funding_feerate_perkw` is unacceptable\n  - MUST fail the negotiation if:\n    - `require_confirmed_inputs` is set but it cannot provide confirmed inputs\n\n#### Rationale\n\n`temporary_channel_id` MUST be derived using a zeroed out basepoint for the\npeer's revocation basepoint. This allows the peer to return channel-assignable\nerrors before the *accepter*'s revocation basepoint is known.\n\n`funding_feerate_perkw` indicates the fee rate that the opening node will\npay for the funding transaction in satoshi per 1000-weight, as described\nin [BOLT-3, Appendix F](03-transactions.md#appendix-f-dual-funded-transaction-test-vectors).\n\n`locktime` is the locktime for the funding transaction.\n\nThe receiving node, if the `locktime` or `funding_feerate_perkw` is considered\nout of an acceptable range, may fail the negotiation. However, it is\nrecommended that the *accepter* permits the channel open to proceed\nwithout their participation in the channel's funding.\n\nNote that `open_channel`'s `channel_reserve_satoshi` has been omitted.\nInstead, the channel reserve is fixed at 1% of the total channel balance\n(`open_channel2`.`funding_satoshis` + `accept_channel2`.`funding_satoshis`)\nrounded down to the nearest whole satoshi or the `dust_limit_satoshis`,\nwhichever is greater.\n\nNote that `push_msat` has been omitted.\n\n`second_per_commitment_point` is now sent here (as well as in `channel_ready`)\nas a convenience for implementations.\n\nThe sending node may require the other participant to only use confirmed inputs.\nThis ensures that the sending node doesn't end up paying the fees of a low\nfeerate unconfirmed ancestor of one of the other participant's inputs.\n\n### The `accept_channel2` Message\n\nThis message contains information about a node and indicates its\nacceptance of the new channel.\n\n1. type: 65 (`accept_channel2`)\n2. data:\n    * [`channel_id`:`temporary_channel_id`]\n    * [`u64`:`funding_satoshis`]\n    * [`u64`:`dust_limit_satoshis`]\n    * [`u64`:`max_htlc_value_in_flight_msat`]\n    * [`u64`:`htlc_minimum_msat`]\n    * [`u32`:`minimum_depth`]\n    * [`u16`:`to_self_delay`]\n    * [`u16`:`max_accepted_htlcs`]\n    * [`point`:`funding_pubkey`]\n    * [`point`:`revocation_basepoint`]\n    * [`point`:`payment_basepoint`]\n    * [`point`:`delayed_payment_basepoint`]\n    * [`point`:`htlc_basepoint`]\n    * [`point`:`first_per_commitment_point`]\n    * [`point`:`second_per_commitment_point`]\n    * [`accept_tlvs`:`tlvs`]\n\n1. `tlv_stream`: `accept_tlvs`\n2. types:\n   1. type: 0 (`upfront_shutdown_script`)\n   2. data:\n       * [`...*byte`:`shutdown_scriptpubkey`]\n   1. type: 1 (`channel_type`)\n   2. data:\n        * [`...*byte`:`type`]\n   1. type: 2 (`require_confirmed_inputs`)\n\nRationale and Requirements are the same as listed above,\nfor [`accept_channel`](#the-accept_channel-message) with the following\nadditions.\n\n#### Requirements\n\nThe accepting node:\n  - MUST use the `temporary_channel_id` of the `open_channel2` message\n  - MAY respond with a `funding_satoshis` value of zero.\n  - If it requires the opening node to only use confirmed inputs:\n    - MUST set `require_confirmed_inputs`\n\nThe receiving node:\n  - MUST fail the negotiation if:\n    - `require_confirmed_inputs` is set but it cannot provide confirmed inputs\n\n#### Rationale\n\nThe `funding_satoshis` is the amount of bitcoin in satoshis\nthe *accepter* will be contributing to the channel's funding transaction.\n\nNote that `accept_channel`'s `channel_reserve_satoshi` has been omitted.\nInstead, the channel reserve is fixed at 1% of the total channel balance\n(`open_channel2`.`funding_satoshis` + `accept_channel2`.`funding_satoshis`)\nrounded down to the nearest whole satoshi or the `dust_limit_satoshis`,\nwhichever is greater.\n\n### Funding Composition\n\nFunding composition for channel establishment v2 makes use of the\n[Interactive Transaction Construction](#interactive-transaction-construction)\nprotocol, with the following additional caveats.\n\n#### The `tx_add_input` Message\n\n##### Requirements\n\nThe sending node:\n  - if the receiver set `require_confirmed_inputs` in `open_channel2`,\n    `accept_channel2`, `tx_init_rbf` or `tx_ack_rbf`:\n    - MUST NOT send a `tx_add_input` that contains an unconfirmed input\n\n#### The `tx_add_output` Message\n\n##### Requirements\n\nThe sending node:\n  - if is the *opener*:\n    - MUST send at least one `tx_add_output`,  which contains the\n      channel's funding output\n\n##### Rationale\n\nThe channel funding output must be added by the *opener*, who pays its fees.\n\n#### The `tx_complete` Message\n\nUpon receipt of consecutive `tx_complete`s, the receiving node:\n  - if is the *accepter*:\n    - MUST fail the negotiation if:\n      - no funding output was received\n      - the value of the funding output is not equal to the sum of\n        `open_channel2`.`funding_satoshis` and `accept_channel2`.\n        `funding_satoshis`\n      - the value of the funding output is less than the `dust_limit`\n  - if this is an RBF attempt:\n    - MUST fail the negotiation if:\n      - the transaction's total fees is less than the last\n        successfully negotiated transaction's fees\n      - the transaction does not share at least one input with\n        each previous funding transaction\n  - if it has sent `require_confirmed_inputs` in `open_channel2`,\n    `accept_channel2`, `tx_init_rbf` or `tx_ack_rbf`:\n    - MUST fail the negotiation if:\n      - one of the inputs added by the other peer is unconfirmed\n\n### The `commitment_signed` Message\n\nThis message is exchanged by both peers. It contains the signatures for\nthe first commitment transaction.\n\nRationale and Requirements are the same as listed below,\nfor [`commitment_signed`](#committing-updates-so-far-commitment_signed) with the following additions.\n\n#### Requirements\n\nThe sending node:\n  - MUST send zero HTLCs.\n  - MUST remember the details of this funding transaction.\n\nThe receiving node:\n  - if the message has one or more HTLCs:\n    - MUST fail the negotiation\n  - if it has not already transmitted its `commitment_signed`:\n    - MUST send `commitment_signed`\n  - Otherwise:\n    - MUST send `tx_signatures` if it should sign first, as specified\n      in the [`tx_signatures` requirements](#the-tx_signatures-message)\n\n#### Rationale\n\nThe first commitment transaction has no HTLCs.\n\nOnce peers are ready to exchange commitment signatures, they must remember\nthe details of the funding transaction to allow resuming the signatures\nexchange if a disconnection happens.\n\n### Sharing funding signatures: `tx_signatures`\n\nAfter a valid `commitment_signed` has been received\nfrom the peer and a `commitment_signed` has been sent, a peer:\n  - MUST transmit `tx_signatures` with their signatures for the funding\n    transaction, following the order specified in the\n    [`tx_signatures` requirements](#the-tx_signatures-message)\n\n#### Requirements\n\nThe sending node:\n  - MUST verify it has received a valid commitment signature from its peer\n  - MUST remember the details of this funding transaction\n  - if it has NOT received a valid `commitment_signed` message:\n    - MUST NOT send a `tx_signatures` message\n\nThe receiving node:\n  - if has already sent or received a `channel_ready` message for this\n    channel:\n    - MUST ignore this message\n  - if the `witness` weight lowers the effective `feerate`\n    below the *opener*'s feerate for the funding transaction and the effective\n    `feerate` is determined by the receiving node to be insufficient for\n    getting the transaction confirmed in a timely manner:\n    - SHOULD broadcast their commitment transaction, closing the channel\n    - SHOULD double-spend their channel inputs when there is a productive\n      opportunity to do so; effectively canceling this channel open\n  - SHOULD apply `witnesses` to the funding transaction and broadcast it\n\n#### Rationale\n\nA peer sends their `tx_signatures` after receiving a valid `commitment_signed`\nmessage, following the order specified in the [`tx_signatures` section](#the-tx_signatures-message).\n\nIn the case where a peer provides valid witness data that causes their paid\nfeerate to fall beneath the `open_channel2.funding_feerate_perkw`, the channel\nshould be considered failed and the channel should be double-spent when\nthere is a productive opportunity to do so. This should disincentivize\npeers from underpaying fees.\n\n### Fee bumping: `tx_init_rbf` and `tx_ack_rbf`\n\nAfter the funding transaction has been broadcast, it can be replaced by\na transaction paying more fees to make the channel confirm faster.\n\n#### Requirements\n\nThe sender of `tx_init_rbf`:\n  - MUST be the *initiator*\n  - MUST NOT have sent or received a `channel_ready` message.\n\nThe recipient:\n  - MUST fail the negotiation if they have already sent or received\n    `channel_ready`\n  - MAY fail the negotiation for any reason\n\n#### Rationale\n\nIf a valid `channel_ready` message is received in the middle of an\nRBF attempt, the attempt MUST be abandoned.\n\nPeers can use different values in `tx_init_rbf.funding_output_contribution`\nand `tx_ack_rbf.funding_output_contribution` from the amounts transmitted\nin `open_channel2` and `accept_channel2`: they are allowed to change how\nmuch they wish to commit to the funding output.\n\nIt's recommended that a peer, rather than fail the RBF negotiation due to\na large feerate change, instead sets their `sats` to zero, and decline to\nparticipate further in the channel funding: by not contributing, they\nmay obtain incoming liquidity at no cost.\n\n## Channel Quiescence\n\nVarious fundamental changes, in particular protocol upgrades, are\neasiest on channels where both commitment transactions match, and no\npending updates are in flight.  We define a protocol to quiesce the\nchannel by indicating that \"SomeThing Fundamental is Underway\".\n\n### `stfu`\n\n1. type: 2 (`stfu`)\n2. data:\n    * [`channel_id`:`channel_id`]\n    * [`u8`:`initiator`]\n\n### Requirements\n\nThe sender of `stfu`:\n  - MUST NOT send `stfu` unless `option_quiesce` is negotiated.\n  - MUST NOT send `stfu` if any of the sender's htlc additions, htlc removals\n    or fee updates are pending for either peer.\n  - MUST NOT send `stfu` twice.\n  - if it is replying to an `stfu`:\n    - MUST set `initiator` to 0\n  - otherwise:\n    - MUST set `initiator` to 1\n  - MUST set `channel_id` to the id of the channel to quiesce.\n  - MUST now consider the channel to be quiescing.\n  - MUST NOT send an update message after `stfu`.\n\nThe receiver of `stfu`:\n  - if it has sent `stfu` then:\n    - MUST now consider the channel to be quiescent\n  - otherwise:\n    - SHOULD NOT send any more update messages.\n    - MUST reply with `stfu` once it can do so.\n\nBoth nodes:\n  - MUST disconnect after 60 seconds of quiescence if the HTLCs are pending.\n\nUpon disconnection:\n  - the channel is no longer considered quiescent.\n\nDependent Protocols:\n  - MUST specify all states that terminate quiescence.\n    - NOTE: this prevents batching executions of protocols that depend on\n      quiescence.\n\n### Rationale\n\nThe normal use would be to cease sending updates, then wait for all\nthe current updates to be acknowledged by both peers, then start\nquiescence.  For some protocols, choosing the initiator matters,\nso this flag is sent.\n\nIf both sides send `stfu` simultaneously, they will both set\n`initiator` to `1`, in which case the \"initiator\" is arbitrarily\nconsidered to be the channel funder (the sender of `open_channel`).\nThe quiescence effect is exactly the same as if one had replied to the\nother.\n\nDependent protocols have to specify termination conditions to prevent the need\nfor disconnection to resume channel traffic. An explicit resume message was\n[considered but rejected](https://github.com/rustyrussell/lightning-rfc/pull/14)\nsince it introduces a number of edge cases that make bilateral consensus of\nchannel state significantly more complex to maintain. This introduces the\nderivative property that it is impossible to batch multiple downstream protocols\nin the same quiescence session.\n\n## Channel Close\n\nNodes can negotiate a mutual close of the connection, which unlike a\nunilateral close, allows them to access their funds immediately and\ncan be negotiated with lower fees.\n\nClosing happens in two stages:\n1. one side indicates it wants to clear the channel (and thus will accept no new HTLCs)\n2. once all HTLCs are resolved, the final channel close negotiation begins.\n\n        +-------+                              +-------+\n        |       |--(1)-----  shutdown  ------->|       |\n        |       |<-(2)-----  shutdown  --------|       |\n        |       |                              |       |\n        |       | <complete all pending HTLCs> |       |\n        |   A   |                 ...          |   B   |\n        |       |                              |       |\n        |       |--(3)-- closing_signed  F1--->|       |\n        |       |<-(4)-- closing_signed  F2----|       |\n        |       |              ...             |       |\n        |       |--(?)-- closing_signed  Fn--->|       |\n        |       |<-(?)-- closing_signed  Fn----|       |\n        +-------+                              +-------+\n\n### Closing Initiation: `shutdown`\n\nEither node (or both) can send a `shutdown` message to initiate closing,\nalong with the `scriptpubkey` it wants to be paid to.\n\n1. type: 38 (`shutdown`)\n2. data:\n   * [`channel_id`:`channel_id`]\n   * [`u16`:`len`]\n   * [`len*byte`:`scriptpubkey`]\n\n#### Requirements\n\nA sending node:\n  - if it hasn't sent a `funding_created` (if it is a funder) or a `funding_signed` (if it is a fundee):\n    - MUST NOT send a `shutdown`\n  - MAY send a `shutdown` before a `channel_ready`, i.e. before the funding transaction has reached `minimum_depth`.\n  - if there are updates pending on the receiving node's commitment transaction:\n    - MUST NOT send a `shutdown`.\n  - MUST NOT send multiple `shutdown` messages.\n  - MUST NOT send an `update_add_htlc` after a `shutdown`.\n  - if no HTLCs remain in either commitment transaction (including dust HTLCs)\n    and neither side has a pending `revoke_and_ack` to send:\n    - MUST NOT send any `update` message after that point.\n  - SHOULD fail to route any HTLC added after it has sent `shutdown`.\n  - if it sent a non-zero-length `shutdown_scriptpubkey` in `open_channel` or `accept_channel`:\n    - MUST send the same value in `scriptpubkey`.\n  - MUST set `scriptpubkey` in one of the following forms:\n\n    1. `OP_0` `20` 20-bytes (version 0 pay to witness pubkey hash), OR\n    2. `OP_0` `32` 32-bytes (version 0 pay to witness script hash), OR\n    3. if (and only if) `option_shutdown_anysegwit` is negotiated:\n      * `OP_1` through `OP_16` inclusive, followed by a single push of 2 to 40 bytes\n        (witness program versions 1 through 16)\n\nA receiving node:\n  - if it hasn't received a `funding_signed` (if it is a funder) or a `funding_created` (if it is a fundee):\n    - SHOULD send an `error` and fail the channel.\n  - if the `scriptpubkey` is not in one of the above forms:\n    - SHOULD send a `warning`.\n  - if it hasn't sent a `channel_ready` yet:\n    - MAY reply to a `shutdown` message with a `shutdown`\n  - once there are no outstanding updates on the peer, UNLESS it has already sent a `shutdown`:\n    - MUST reply to a `shutdown` message with a `shutdown`\n  - if both nodes advertised the `option_upfront_shutdown_script` feature, and the receiving node received a non-zero-length `shutdown_scriptpubkey` in `open_channel` or `accept_channel`, and that `shutdown_scriptpubkey` is not equal to `scriptpubkey`:\n    - MAY send a `warning`.\n    - MUST fail the connection.\n\n#### Rationale\n\nIf channel state is always \"clean\" (no pending changes) when a\nshutdown starts, the question of how to behave if it wasn't is avoided:\nthe sender always sends a `commitment_signed` first.\n\nAs shutdown implies a desire to terminate, it implies that no new\nHTLCs will be added or accepted.  Once any HTLCs are cleared, there are no commitments\nfor which a revocation is owed, and all updates are included on both commitment\ntransactions, the peer may immediately begin closing negotiation, so we ban further\nupdates to the commitment transaction (in particular, `update_fee` would be\npossible otherwise). However, while there are HTLCs on the commitment transaction,\nthe initiator may find it desirable to increase the feerate as there may be pending\nHTLCs on the commitment which could timeout.\n\nThe `scriptpubkey` forms include only standard segwit forms accepted by\nthe Bitcoin network, which ensures the resulting transaction will\npropagate to miners. However old nodes may send non-segwit scripts, which\nmay be accepted for backwards-compatibility (with a caveat to force-close\nif this output doesn't meet dust relay requirements).\n\nThe `option_upfront_shutdown_script` feature means that the node\nwanted to pre-commit to `shutdown_scriptpubkey` in case it was\ncompromised somehow.  This is a weak commitment (a malevolent\nimplementation tends to ignore specifications like this one!), but it\nprovides an incremental improvement in security by requiring the cooperation\nof the receiving node to change the `scriptpubkey`.\n\nThe `shutdown` response requirement implies that the node sends `commitment_signed` to commit any outstanding changes before replying; however, it could theoretically reconnect instead, which would simply erase all outstanding uncommitted changes.\n\n### Closing Negotiation: `closing_signed`\n\nOnce shutdown is complete, the channel is empty of HTLCs, there are no commitments\nfor which a revocation is owed, and all updates are included on both commitments,\nthe final current commitment transactions will have no HTLCs, and closing fee\nnegotiation begins.  The funder chooses a fee it thinks is fair, and\nsigns the closing transaction with the `scriptpubkey` fields from the\n`shutdown` messages (along with its chosen fee) and sends the signature;\nthe other node then replies similarly, using a fee it thinks is fair.  This\nexchange continues until both agree on the same fee or when one side fails\nthe channel.\n\nIn the modern method, the funder sends its permissible fee range, and the\nnon-funder has to pick a fee in this range. If the non-funder chooses the same\nvalue, negotiation is complete after two messages, otherwise the funder will\nreply with the same value (completing after three messages).\n\n1. type: 39 (`closing_signed`)\n2. data:\n   * [`channel_id`:`channel_id`]\n   * [`u64`:`fee_satoshis`]\n   * [`signature`:`signature`]\n   * [`closing_signed_tlvs`:`tlvs`]\n\n1. `tlv_stream`: `closing_signed_tlvs`\n2. types:\n    1. type: 1 (`fee_range`)\n    2. data:\n        * [`u64`:`min_fee_satoshis`]\n        * [`u64`:`max_fee_satoshis`]\n\n#### Requirements\n\nThe funding node:\n  - after `shutdown` has been received, AND no HTLCs remain in either commitment transaction:\n    - SHOULD send a `closing_signed` message.\n\nThe sending node:\n  - SHOULD set the initial `fee_satoshis` according to its estimate of cost of\n  inclusion in a block.\n  - SHOULD set `fee_range` according to the minimum and maximum fees it is\n  prepared to pay for a close transaction.\n  - if it doesn't receive a `closing_signed` response after a reasonable amount of time:\n    - MUST fail the channel\n  - if it is not the funder:\n    - SHOULD set `max_fee_satoshis` to at least the `max_fee_satoshis` received\n    - SHOULD set `min_fee_satoshis` to a fairly low value\n  - MUST set `signature` to the Bitcoin signature of the close transaction,\n  as specified in [BOLT #3](03-transactions.md#closing-transaction).\n\nThe receiving node:\n  - if the `signature` is not valid for either variant of closing transaction\n  specified in [BOLT #3](03-transactions.md#closing-transaction) OR non-compliant with LOW-S-standard rule<sup>[LOWS](https://github.com/bitcoin/bitcoin/pull/6769)</sup>:\n    - MUST send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n  - if `fee_satoshis` is equal to its previously sent `fee_satoshis`:\n    - SHOULD sign and broadcast the final closing transaction.\n    - MAY close the connection.\n  - if `fee_satoshis` matches its previously sent `fee_range`:\n    - SHOULD use `fee_satoshis` to sign and broadcast the final closing transaction\n    - SHOULD reply with a `closing_signed` with the same `fee_satoshis` value if it is different from its previously sent `fee_satoshis`\n    - MAY close the connection.\n  - if the message contains a `fee_range`:\n    - if there is no overlap between that and its own `fee_range`:\n      - SHOULD send a warning\n      - MUST fail the channel if it doesn't receive a satisfying `fee_range` after a reasonable amount of time\n    - otherwise:\n      - if it is the funder:\n        - if `fee_satoshis` is not in the overlap between the sent and received `fee_range`:\n          - MUST fail the channel\n        - otherwise:\n          - MUST reply with the same `fee_satoshis`.\n      - otherwise (it is not the funder):\n        - if it has already sent a `closing_signed`:\n          - if `fee_satoshis` is not the same as the value it sent:\n            - MUST fail the channel\n        - otherwise:\n          - MUST propose a `fee_satoshis` in the overlap between received and (about-to-be) sent `fee_range`.\n  - otherwise, if `fee_satoshis` is not strictly between its last-sent `fee_satoshis`\n  and its previously-received `fee_satoshis`, UNLESS it has since reconnected:\n    - SHOULD send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n  - otherwise, if the receiver agrees with the fee:\n    - SHOULD reply with a `closing_signed` with the same `fee_satoshis` value.\n  - otherwise:\n    - MUST propose a value \"strictly between\" the received `fee_satoshis`\n    and its previously-sent `fee_satoshis`.\n\nThe receiving node:\n  - if one of the outputs in the closing transaction is below the dust limit for its `scriptpubkey` (see [BOLT 3](03-transactions.md#dust-limits)):\n    - MUST fail the channel\n\n#### Rationale\n\nWhen `fee_range` is not provided, the \"strictly between\" requirement ensures\nthat forward progress is made, even if only by a single satoshi at a time.\nTo avoid keeping state and to handle the corner case, where fees have shifted\nbetween disconnection and reconnection, negotiation restarts on reconnection.\n\nNote there is limited risk if the closing transaction is\ndelayed, but it will be broadcast very soon; so there is usually no\nreason to pay a premium for rapid processing.\n\nNote that the non-funder is not paying the fee, so there is no reason for it\nto have a maximum feerate. It may want a minimum feerate, however, to ensure\nthat the transaction propagates. It can always use CPFP later to speed up\nconfirmation if necessary, so that minimum should be low.\n\nIt may happen that the closing transaction doesn't meet bitcoin's default relay\npolicies (e.g. when using a non-segwit shutdown script for an output below 546\nsatoshis, which is possible if `dust_limit_satoshis` is below 546 satoshis).\nNo funds are at risk when that happens, but the channel must be force-closed as\nthe closing transaction will likely never reach miners.\n\n## Normal Operation\n\nOnce both nodes have exchanged `channel_ready` (and optionally [`announcement_signatures`](07-routing-gossip.md#the-announcement_signatures-message)), the channel can be used to make payments via Hashed Time Locked Contracts.\n\nChanges are sent in batches: one or more `update_` messages are sent before a\n`commitment_signed` message, as in the following diagram:\n\n        +-------+                               +-------+\n        |       |--(1)---- update_add_htlc ---->|       |\n        |       |--(2)---- update_add_htlc ---->|       |\n        |       |<-(3)---- update_add_htlc -----|       |\n        |       |                               |       |\n        |       |--(4)--- commitment_signed --->|       |\n        |   A   |<-(5)---- revoke_and_ack ------|   B   |\n        |       |                               |       |\n        |       |<-(6)--- commitment_signed ----|       |\n        |       |--(7)---- revoke_and_ack ----->|       |\n        |       |                               |       |\n        |       |--(8)--- commitment_signed --->|       |\n        |       |<-(9)---- revoke_and_ack ------|       |\n        +-------+                               +-------+\n\nCounter-intuitively, these updates apply to the *other node's*\ncommitment transaction; the node only adds those updates to its own\ncommitment transaction when the remote node acknowledges it has\napplied them via `revoke_and_ack`.\n\nThus each update traverses through the following states:\n\n1. pending on the receiver\n2. in the receiver's latest commitment transaction\n3. ... and the receiver's previous commitment transaction has been revoked,\n   and the update is pending on the sender\n4. ... and in the sender's latest commitment transaction\n5. ... and the sender's previous commitment transaction has been revoked\n\n\nAs the two nodes' updates are independent, the two commitment\ntransactions may be out of sync indefinitely. This is not concerning:\nwhat matters is whether both sides have irrevocably committed to a\nparticular update or not (the final state, above).\n\n### Forwarding HTLCs\n\nIn general, a node offers HTLCs for two reasons: to initiate a payment of its own,\nor to forward another node's payment. In the forwarding case, care must\nbe taken to ensure the *outgoing* HTLC cannot be redeemed unless the *incoming*\nHTLC can be redeemed. The following requirements ensure this is always true.\n\nThe respective **addition/removal** of an HTLC is considered *irrevocably committed* when:\n\n1. The commitment transaction **with/without** it is committed to by both nodes, and any\nprevious commitment transaction **without/with** it has been revoked, OR\n2. The commitment transaction **with/without** it has been irreversibly committed to\nthe blockchain.\n\n#### Requirements\n\nA node:\n  - until an incoming HTLC has been irrevocably committed:\n    - MUST NOT offer the corresponding outgoing HTLC (`update_add_htlc`) in response to that incoming HTLC.\n  - until the removal of an outgoing HTLC is irrevocably committed, OR until the outgoing on-chain HTLC output has been spent via the HTLC-timeout transaction (with sufficient depth):\n    - MUST NOT fail the incoming HTLC (`update_fail_htlc`) that corresponds\nto that outgoing HTLC.\n  - once the `cltv_expiry` of an incoming HTLC has been reached, OR if `cltv_expiry` minus `current_height` is less than `cltv_expiry_delta` for the corresponding outgoing HTLC:\n    - MUST fail that incoming HTLC (`update_fail_htlc`).\n  - if an incoming HTLC's `cltv_expiry` is unreasonably far in the future:\n    - SHOULD fail that incoming HTLC (`update_fail_htlc`).\n  - upon receiving an `update_fulfill_htlc` for an outgoing HTLC, OR upon discovering the `payment_preimage` from an on-chain HTLC spend:\n    - MUST fulfill the incoming HTLC that corresponds to that outgoing HTLC.\n\n#### Rationale\n\nIn general, one side of the exchange needs to be dealt with before the other.\nFulfilling an HTLC is different: knowledge of the preimage is, by definition,\nirrevocable and the incoming HTLC should be fulfilled as soon as possible to\nreduce latency.\n\nAn HTLC with an unreasonably long expiry is a denial-of-service vector and\ntherefore is not allowed. Note that the exact value of \"unreasonable\" is currently unclear\nand may depend on network topology.\n\n### `cltv_expiry_delta` Selection\n\nOnce an HTLC has timed out, it can either be fulfilled or timed-out;\ncare must be taken around this transition, both for offered and received HTLCs.\n\nConsider the following scenario, where A sends an HTLC to B, who\nforwards to C, who delivers the goods as soon as the payment is\nreceived.\n\n1. C needs to be sure that the HTLC from B cannot time out, even if B becomes\n   unresponsive; i.e. C can fulfill the incoming HTLC on-chain before B can\n   time it out on-chain.\n\n2. B needs to be sure that if C fulfills the HTLC from B, it can fulfill the\n   incoming HTLC from A; i.e. B can get the preimage from C and fulfill the incoming\n   HTLC on-chain before A can time it out on-chain.\n\nThe critical settings here are the `cltv_expiry_delta` in\n[BOLT #7](07-routing-gossip.md#the-channel_update-message) and the\nrelated `min_final_cltv_expiry_delta` in [BOLT #11](11-payment-encoding.md#tagged-fields).\n`cltv_expiry_delta` is the minimum difference in HTLC CLTV timeouts, in\nthe forwarding case (B). `min_final_cltv_expiry_delta` is the minimum difference\nbetween HTLC CLTV timeout and the current block height, for the\nterminal case (C).\n\nNote that a node is at risk if it accepts an HTLC in one channel and\noffers an HTLC in another channel with too small of a difference between\nthe CLTV timeouts.  For this reason, the `cltv_expiry_delta` for the\n*outgoing* channel is used as the delta across a node.\n\nThe worst-case number of blocks between outgoing and\nincoming HTLC resolution can be derived, given a few assumptions:\n\n* a worst-case reorganization depth `R` blocks\n* a grace-period `G` blocks after HTLC timeout before giving up on\n  an unresponsive peer and dropping to chain\n* a number of blocks `S` between transaction broadcast and the\n  transaction being included in a block\n\nThe worst case is for a forwarding node (B) that takes the longest\npossible time to spot the outgoing HTLC fulfillment and also takes\nthe longest possible time to redeem it on-chain:\n\n1. The B->C HTLC times out at block `N`, and B waits `G` blocks until\n   it gives up waiting for C. B or C commits to the blockchain,\n   and B spends HTLC, which takes `S` blocks to be included.\n2. Bad case: C wins the race (just) and fulfills the HTLC, B only sees\n   that transaction when it sees block `N+G+S+1`.\n3. Worst case: There's reorganization `R` deep in which C wins and\n   fulfills. B only sees transaction at `N+G+S+R`.\n4. B now needs to fulfill the incoming A->B HTLC, but A is unresponsive: B waits `G` more\n   blocks before giving up waiting for A. A or B commits to the blockchain.\n5. Bad case: B sees A's commitment transaction in block `N+G+S+R+G+1` and has\n   to spend the HTLC output, which takes `S` blocks to be mined.\n6. Worst case: there's another reorganization `R` deep which A uses to\n   spend the commitment transaction, so B sees A's commitment\n   transaction in block `N+G+S+R+G+R` and has to spend the HTLC output, which\n   takes `S` blocks to be mined.\n7. B's HTLC spend needs to be at least `R` deep before it times out,\n   otherwise another reorganization could allow A to timeout the\n   transaction.\n\nThus, the worst case is `3R+2G+2S`, assuming `R` is at least 1. Note that the\nchances of three reorganizations in which the other node wins all of them is\nlow for `R` of 2 or more. Since high fees are used (and HTLC spends can use\nalmost arbitrary fees), `S` should be small during normal operation; although,\ngiven that block times are irregular, empty blocks still occur, fees may vary\ngreatly, and the fees cannot be bumped on HTLC transactions, `S=12` should be\nconsidered a minimum. `S` is also the parameter that may vary the most under\nattack, so a higher value may be desirable when non-negligible amounts are at\nrisk. The grace period `G` can be low (1 or 2), as nodes are required to timeout\nor fulfill as soon as possible; but if `G` is too low it increases the risk of\nunnecessary channel closure due to networking delays.\n\nThere are four values that need be derived:\n\n1. the `cltv_expiry_delta` for channels, `3R+2G+2S`: if in doubt, a\n   `cltv_expiry_delta` of at least 34 is reasonable (R=2, G=2, S=12).\n\n2. the deadline for offered HTLCs: the deadline after which the channel has to\n   be failed and timed out on-chain. This is `G` blocks after the HTLC's\n   `cltv_expiry`: 1 or 2 blocks is reasonable.\n\n3. the deadline for received HTLCs this node has fulfilled: the deadline after\n   which the channel has to be failed and the HTLC fulfilled on-chain before\n   its `cltv_expiry`. See steps 4-7 above, which imply a deadline of `2R+G+S`\n   blocks before `cltv_expiry`: 18 blocks is reasonable.\n\n4. the minimum `cltv_expiry` accepted for terminal payments: the\n   worst case for the terminal node C is `2R+G+S` blocks (as, again, steps\n   1-3 above don't apply). The default in [BOLT #11](11-payment-encoding.md) is\n   18, which matches this calculation.\n\n#### Requirements\n\nAn offering node:\n  - MUST estimate a timeout deadline for each HTLC it offers.\n  - MUST NOT offer an HTLC with a timeout deadline before its `cltv_expiry`.\n  - if an HTLC which it offered is in either node's current\n  commitment transaction, AND is past this timeout deadline:\n    - SHOULD send an `error` to the receiving peer (if connected).\n    - MUST fail the channel.\n\nA fulfilling node:\n  - for each HTLC it is attempting to fulfill:\n    - MUST estimate a fulfillment deadline.\n  - MUST fail (and not forward) an HTLC whose fulfillment deadline is already past.\n  - if an HTLC it has fulfilled is in either node's current commitment\n  transaction, AND is past this fulfillment deadline:\n    - SHOULD send an `error` to the offering peer (if connected).\n    - MUST fail the channel.\n\n### Bounding exposure to trimmed in-flight HTLCs: `max_dust_htlc_exposure_msat`\n\nWhen an HTLC in a channel is below the \"trimmed\" threshold in [BOLT3 #3](03-transactions.md),\nthe HTLC cannot be claimed on-chain, instead being turned into additional miner\nfees if either party unilaterally closes the channel. Because the threshold is\nper-HTLC, the total exposure to such HTLCs may be substantial if there are many\ndust HTLCs committed when the channel is force-closed.\n\nThis can be exploited in griefing attacks or even in miner-extractable-value attacks,\nif the malicious entity wins <sup>[mining capabilities](https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-May/002714.html)</sup>.\n\nThe total exposure is given by the following back-of-the-envelope computation:\n\n\tremote `max_accepted_htlcs` * (`HTLC-success-kiloweight` * `feerate_per_kw` + remote `dust_limit_satoshis`)\n\t\t+ local `max_accepted_htlcs` * (`HTLC-timeout-kiloweight` * `feerate_per_kw` + remote `dust_limit_satoshis`)\n\nTo mitigate this scenario, a `max_dust_htlc_exposure_msat` threshold can be\napplied when sending, forwarding and receiving HTLCs.\n\nA node:\n  - when receiving an HTLC:\n    - if the HTLC's `amount_msat` is smaller than the remote `dust_limit_satoshis` plus the HTLC-timeout fee at `feerate_per_kw`:\n      - if the `amount_msat` plus the dust balance of the remote transaction is greater than `max_dust_htlc_exposure_msat`:\n        - SHOULD fail this HTLC once it's committed\n        - SHOULD NOT reveal a preimage for this HTLC\n    - if the HTLC's `amount_msat` is smaller than the local `dust_limit_satoshis` plus the HTLC-success fee at `feerate_per_kw`:\n      - if the `amount_msat` plus the dust balance of the local transaction is greater than `max_dust_htlc_exposure_msat`:\n        - SHOULD fail this HTLC once it's committed\n        - SHOULD NOT reveal a preimage for this HTLC\n  - when offering an HTLC:\n    - if the HTLC's `amount_msat` is smaller than the remote `dust_limit_satoshis` plus the HTLC-success fee at `feerate_per_kw`:\n      - if the `amount_msat` plus the dust balance of the remote transaction is greater than `max_dust_htlc_exposure_msat`:\n        - SHOULD NOT send this HTLC\n        - SHOULD fail the corresponding incoming HTLC (if any)\n    - if the HTLC's `amount_msat` is inferior to the holder's `dust_limit_satoshis` plus the HTLC-timeout fee at the `feerate_per_kw`:\n      - if the `amount_msat` plus the dust balance of the local transaction is greater than `max_dust_htlc_exposure_msat`:\n        - SHOULD NOT send this HTLC\n        - SHOULD fail the corresponding incoming HTLC (if any)\n\nThe `max_dust_htlc_exposure_msat` is an upper bound on the trimmed balance from\ndust exposure. The exact value used is a matter of node policy.\n\nFor channels that don't use `option_anchors`, an increase of\nthe `feerate_per_kw` may trim multiple htlcs from commitment transactions,\nwhich could create a large increase in dust exposure.\n\n### Adding an HTLC: `update_add_htlc`\n\nEither node can send `update_add_htlc` to offer an HTLC to the other,\nwhich is redeemable in return for a payment preimage. Amounts are in\nmillisatoshi, though on-chain enforcement is only possible for whole\nsatoshi amounts greater than the dust limit (in commitment transactions these are rounded down as\nspecified in [BOLT #3](03-transactions.md)).\n\nThe format of the `onion_routing_packet` portion, which indicates where the payment\nis destined, is described in [BOLT #4](04-onion-routing.md).\n\n1. type: 128 (`update_add_htlc`)\n2. data:\n   * [`channel_id`:`channel_id`]\n   * [`u64`:`id`]\n   * [`u64`:`amount_msat`]\n   * [`sha256`:`payment_hash`]\n   * [`u32`:`cltv_expiry`]\n   * [`1366*byte`:`onion_routing_packet`]\n\n1. `tlv_stream`: `update_add_htlc_tlvs`\n2. types:\n    1. type: 0 (`blinded_path`)\n    2. data:\n        * [`point`:`path_key`]\n\n#### Requirements\n\nA sending node:\n  - if it is _responsible_ for paying the Bitcoin fee:\n    - MUST NOT offer `amount_msat` if, after adding that HTLC to its commitment\n    transaction, it cannot pay the fee for either the local or remote commitment\n    transaction at the current `feerate_per_kw` while maintaining its channel\n    reserve (see [Updating Fees](#updating-fees-update_fee)).\n    - if `option_anchors` applies to this commitment transaction and the sending\n    node is the funder:\n      - MUST be able to additionally pay for `to_local_anchor` and \n      `to_remote_anchor` above its reserve.\n    - SHOULD NOT offer `amount_msat` if, after adding that HTLC to its commitment\n    transaction, its remaining balance doesn't allow it to pay the commitment\n    transaction fee when receiving or sending a future additional non-dust HTLC\n    while maintaining its channel reserve. It is recommended that this \"fee spike\n    buffer\" can handle twice the current `feerate_per_kw` to ensure predictability\n    between implementations.\n  - if it is _not responsible_ for paying the Bitcoin fee:\n    - SHOULD NOT offer `amount_msat` if, once the remote node adds that HTLC to\n    its commitment transaction, it cannot pay the fee for the updated local or\n    remote transaction at the current `feerate_per_kw` while maintaining its\n    channel reserve.\n  - MUST offer `amount_msat` greater than 0.\n  - MUST NOT offer `amount_msat` below the receiving node's `htlc_minimum_msat`\n  - MUST set `cltv_expiry` less than 500000000.\n  - if result would be offering more than the remote's\n  `max_accepted_htlcs` HTLCs, in the remote commitment transaction:\n    - MUST NOT add an HTLC.\n  - if the total value of offered HTLCs would exceed the remote's\n`max_htlc_value_in_flight_msat`:\n    - MUST NOT add an HTLC.\n  - for the first HTLC it offers:\n    - MUST set `id` to 0.\n  - MUST increase the value of `id` by 1 for each successive offer.\n  - if it is relaying a payment inside a blinded route:\n    - MUST set `path_key` (see [Route Blinding](04-onion-routing.md#route-blinding))\n\n`id` MUST NOT be reset to 0 after the update is complete (i.e. after `revoke_and_ack` has\nbeen received). It MUST continue incrementing instead.\n\nA receiving node:\n  - receiving an `amount_msat` equal to 0, OR less than its own `htlc_minimum_msat`:\n    - SHOULD send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n  - receiving an `amount_msat` that the sending node cannot afford at the current `feerate_per_kw` (while maintaining its channel reserve and any `to_local_anchor` and `to_remote_anchor` costs):\n    - SHOULD send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n  - if a sending node adds more than receiver `max_accepted_htlcs` HTLCs to\n    its local commitment transaction, OR adds more than receiver `max_htlc_value_in_flight_msat` worth of offered HTLCs to its local commitment transaction:\n    - SHOULD send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n  - if sending node sets `cltv_expiry` to greater or equal to 500000000:\n    - SHOULD send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n  - MUST allow multiple HTLCs with the same `payment_hash`.\n  - if the sender did not previously acknowledge the commitment of that HTLC:\n    - MUST ignore a repeated `id` value after a reconnection.\n  - if other `id` violations occur:\n    - MAY send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n  - MUST decrypt `onion_routing_packet` as described in [Onion Decryption](04-onion-routing.md#onion-decryption) to extract a `payload`.\n    - MUST use `path_key` (if specified).\n    - MUST use `payment_hash` as `associated_data`.\n  - If decryption fails, the result is not a valid `payload` TLV, or it contains unknown even types:\n    - MUST respond with an error as detailed in [Failure Messages](04-onion-routing.md#failure-messages)\n  - Otherwise:\n    - MUST follow the requirements for the reader of `payload` in [Payload Format](04-onion-routing.md#payload-format)\n\nThe `onion_routing_packet` contains an obfuscated list of hops and instructions for each hop along the path.\nIt commits to the HTLC by setting the `payment_hash` as associated data, i.e. includes the `payment_hash` in the computation of HMACs.\nThis prevents replay attacks that would reuse a previous `onion_routing_packet` with a different `payment_hash`.\n\n#### Rationale\n\nInvalid amounts are a clear protocol violation and indicate a breakdown.\n\nIf a node did not accept multiple HTLCs with the same payment hash, an\nattacker could probe to see if a node had an existing HTLC. This\nrequirement, to deal with duplicates, leads to the use of a separate\nidentifier; it's assumed a 64-bit counter never wraps.\n\nRetransmissions of unacknowledged updates are explicitly allowed for\nreconnection purposes; allowing them at other times simplifies the\nrecipient code (though strict checking may help debugging).\n\n`max_accepted_htlcs` is limited to 483 to ensure that, even if both\nsides send the maximum number of HTLCs, the `commitment_signed` message will\nstill be under the maximum message size. It also ensures that\na single penalty transaction can spend the entire commitment transaction,\nas calculated in [BOLT #5](05-onchain.md#penalty-transaction-weight-calculation).\n\n`cltv_expiry` values equal to or greater than 500000000 would indicate a time in\nseconds, and the protocol only supports an expiry in blocks.\n\nThe node _responsible_ for paying the Bitcoin fee should maintain a \"fee\nspike buffer\" on top of its reserve to accommodate a future fee increase.\nWithout this buffer, the node _responsible_ for paying the Bitcoin fee may\nreach a state where it is unable to send or receive any non-dust HTLC while\nmaintaining its channel reserve (because of the increased weight of the\ncommitment transaction), resulting in a degraded channel. See [#728](https://github.com/lightningnetwork/lightning-rfc/issues/728)\nfor more details.\n\n### Removing an HTLC: `update_fulfill_htlc`, `update_fail_htlc`, and `update_fail_malformed_htlc`\n\nFor simplicity, a node can only remove HTLCs added by the other node.\nThere are four reasons for removing an HTLC: the payment preimage is supplied,\nit has timed out, it has failed to route, or it is malformed.\n\nTo supply the preimage:\n\n1. type: 130 (`update_fulfill_htlc`)\n2. data:\n   * [`channel_id`:`channel_id`]\n   * [`u64`:`id`]\n   * [`32*byte`:`payment_preimage`]\n\nFor a timed out or route-failed HTLC:\n\n1. type: 131 (`update_fail_htlc`)\n2. data:\n   * [`channel_id`:`channel_id`]\n   * [`u64`:`id`]\n   * [`u16`:`len`]\n   * [`len*byte`:`reason`]\n\nThe `reason` field is an opaque encrypted blob for the benefit of the\noriginal HTLC initiator, as defined in [BOLT #4](04-onion-routing.md);\nhowever, there's a special malformed failure variant for the case where\nthe peer couldn't parse it: in this case the current node instead takes action, encrypting\nit into a `update_fail_htlc` for relaying.\n\nFor an unparsable HTLC:\n\n1. type: 135 (`update_fail_malformed_htlc`)\n2. data:\n   * [`channel_id`:`channel_id`]\n   * [`u64`:`id`]\n   * [`sha256`:`sha256_of_onion`]\n   * [`u16`:`failure_code`]\n\n#### Requirements\n\nA node:\n  - SHOULD remove an HTLC as soon as it can.\n  - SHOULD fail an HTLC which has timed out.\n  - until the corresponding HTLC is irrevocably committed in both sides'\n  commitment transactions:\n    - MUST NOT send an `update_fulfill_htlc`, `update_fail_htlc`, or\n`update_fail_malformed_htlc`.\n  - When failing an incoming HTLC:\n    - If `current_path_key` is set in the onion payload and it is not the\n      final node:\n      - MUST send an `update_fail_htlc` error using the `invalid_onion_blinding`\n        failure code for any local or downstream errors.\n      - SHOULD use the `sha256_of_onion` of the onion it received.\n      - MAY use an all zero `sha256_of_onion`.\n      - SHOULD add a random delay before sending `update_fail_htlc`.\n    - If `path_key` is set in the incoming `update_add_htlc`:\n      - MUST send an `update_fail_malformed_htlc` error using the\n        `invalid_onion_blinding` failure code for any local or downstream errors.\n      - SHOULD use the `sha256_of_onion` of the onion it received.\n      - MAY use an all zero `sha256_of_onion`.\n\nA receiving node:\n  - if the `id` does not correspond to an HTLC in its current commitment transaction:\n    - MUST send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n  - if the `payment_preimage` value in `update_fulfill_htlc`\n  doesn't SHA256 hash to the corresponding HTLC `payment_hash`:\n    - MUST send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n  - if the `BADONION` bit in `failure_code` is not set for\n  `update_fail_malformed_htlc`:\n    - MUST send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n  - if the `sha256_of_onion` in `update_fail_malformed_htlc` doesn't match the\n  onion it sent and is not all zero:\n    - MAY retry or choose an alternate error response.\n  - otherwise, a receiving node which has an outgoing HTLC canceled by `update_fail_malformed_htlc`:\n    - MUST return an error in the `update_fail_htlc` sent to the link which\n      originally sent the HTLC, using the `failure_code` given and setting the\n      data to `sha256_of_onion`.\n\n#### Rationale\n\nA node that doesn't time out HTLCs risks channel failure (see\n[`cltv_expiry_delta` Selection](#cltv_expiry_delta-selection)).\n\nA node that sends `update_fulfill_htlc`, before the sender, is also\ncommitted to the HTLC and risks losing funds.\n\nIf the onion is malformed, the upstream node won't be able to extract\nthe shared key to generate a response — hence the special failure message, which\nmakes this node do it.\n\nThe node can check that the SHA256 that the upstream is complaining about\ndoes match the onion it sent, which may allow it to detect random bit\nerrors. However, without re-checking the actual encrypted packet sent,\nit won't know whether the error was its own or the remote's; so\nsuch detection is left as an option.\n\nNodes inside a blinded route must use `invalid_onion_blinding` to avoid\nleaking information to senders trying to probe the blinded route.\n\n### Committing Updates So Far: `commitment_signed`\n\nWhen a node has changes for the remote commitment, it can apply them,\nsign the resulting transaction (as defined in [BOLT #3](03-transactions.md)), and send a\n`commitment_signed` message.\n\n1. type: 132 (`commitment_signed`)\n2. data:\n   * [`channel_id`:`channel_id`]\n   * [`signature`:`signature`]\n   * [`u16`:`num_htlcs`]\n   * [`num_htlcs*signature`:`htlc_signature`]\n\n#### Requirements\n\nA sending node:\n  - MUST NOT send a `commitment_signed` message that does not include any\nupdates.\n  - MAY send a `commitment_signed` message that only\nalters the fee.\n  - MAY send a `commitment_signed` message that doesn't\nchange the commitment transaction aside from the new revocation number\n(due to dust, identical HTLC replacement, or insignificant or multiple\nfee changes).\n  - MUST include one `htlc_signature` for every HTLC transaction corresponding\n    to the ordering of the commitment transaction (see [BOLT #3](03-transactions.md#transaction-input-and-output-ordering)).\n  - if it has not recently received a message from the remote node:\n      - SHOULD use `ping` and await the reply `pong` before sending `commitment_signed`.\n\nA receiving node:\n  - once all pending updates are applied:\n    - if `signature` is not valid for its local commitment transaction OR non-compliant with LOW-S-standard rule <sup>[LOWS](https://github.com/bitcoin/bitcoin/pull/6769)</sup>:\n      - MUST send a `warning` and close the connection, or send an\n        `error` and fail the channel.\n    - if `num_htlcs` is not equal to the number of HTLC outputs in the local\n    commitment transaction:\n      - MUST send a `warning` and close the connection, or send an\n        `error` and fail the channel.\n  - if any `htlc_signature` is not valid for the corresponding HTLC transaction OR non-compliant with LOW-S-standard rule <sup>[LOWS](https://github.com/bitcoin/bitcoin/pull/6769)</sup>:\n    - MUST send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n  - MUST respond with a `revoke_and_ack` message.\n\n#### Rationale\n\nThere's little point offering spam updates: it implies a bug.\n\nThe `num_htlcs` field is redundant, but makes the packet length check fully self-contained.\n\nThe recommendation to require recent messages recognizes the reality\nthat networks are unreliable: nodes might not realize their peers are\noffline until after sending `commitment_signed`.  Once\n`commitment_signed` is sent, the sender considers itself bound to\nthose HTLCs, and cannot fail the related incoming HTLCs until the\noutput HTLCs are fully resolved.\n\nNote that the `htlc_signature` implicitly enforces the time-lock mechanism in\nthe case of offered HTLCs being timed out or received HTLCs being spent. This\nis done to reduce fees by creating smaller scripts compared to explicitly\nstating time-locks on HTLC outputs.\n\nThe `option_anchors` allows HTLC transactions to \"bring their own fees\" by\nattaching other inputs and outputs, hence the modified signature flags.\n\n### Completing the Transition to the Updated State: `revoke_and_ack`\n\nOnce the recipient of `commitment_signed` checks the signature and knows\nit has a valid new commitment transaction, it replies with the commitment\npreimage for the previous commitment transaction in a `revoke_and_ack`\nmessage.\n\nThis message also implicitly serves as an acknowledgment of receipt\nof the `commitment_signed`, so this is a logical time for the `commitment_signed` sender\nto apply (to its own commitment) any pending updates it sent before\nthat `commitment_signed`.\n\nThe description of key derivation is in [BOLT #3](03-transactions.md#key-derivation).\n\n1. type: 133 (`revoke_and_ack`)\n2. data:\n   * [`channel_id`:`channel_id`]\n   * [`32*byte`:`per_commitment_secret`]\n   * [`point`:`next_per_commitment_point`]\n\n#### Requirements\n\nA sending node:\n  - MUST set `per_commitment_secret` to the secret used to generate keys for\n  the previous commitment transaction.\n  - MUST set `next_per_commitment_point` to the values for its next commitment\n  transaction.\n\nA receiving node:\n  - if `per_commitment_secret` is not a valid secret key or does not generate the previous `per_commitment_point`:\n    - MUST send an `error` and fail the channel.\n  - if the `per_commitment_secret` was not generated by the protocol in [BOLT #3](03-transactions.md#per-commitment-secret-requirements):\n    - MAY send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n\nA node:\n  - MUST NOT broadcast old (revoked) commitment transactions,\n    - Note: doing so will allow the other node to seize all channel funds.\n  - SHOULD NOT sign commitment transactions, unless it's about to broadcast\n  them (due to a failed connection),\n    - Note: this is to reduce the above risk.\n\n### Updating Fees: `update_fee`\n\nAn `update_fee` message is sent by the node which is paying the\nBitcoin fee. Like any update, it's first committed to the receiver's\ncommitment transaction and then (once acknowledged) committed to the\nsender's. Unlike an HTLC, `update_fee` is never closed but simply\nreplaced.\n\nThere is a possibility of a race, as the recipient can add new HTLCs\nbefore it receives the `update_fee`. Under this circumstance, the sender may\nnot be able to afford the fee on its own commitment transaction, once the `update_fee`\nis finally acknowledged by the recipient. In this case, the fee will be less\nthan the fee rate, as described in [BOLT #3](03-transactions.md#fee-payment).\n\nThe exact calculation used for deriving the fee from the fee rate is\ngiven in [BOLT #3](03-transactions.md#fee-calculation).\n\n1. type: 134 (`update_fee`)\n2. data:\n   * [`channel_id`:`channel_id`]\n   * [`u32`:`feerate_per_kw`]\n\n#### Requirements\n\nThe node _responsible_ for paying the Bitcoin fee:\n  - SHOULD send `update_fee` to ensure the current fee rate is sufficient (by a\n      significant margin) for timely processing of the commitment transaction.\n\nThe node _not responsible_ for paying the Bitcoin fee:\n  - MUST NOT send `update_fee`.\n\nA sending node:\n  - if `option_anchors` was not negotiated:\n    - if the `update_fee` increases `feerate_per_kw`:\n      - if the dust balance of the remote transaction at the updated `feerate_per_kw` is greater than `max_dust_htlc_exposure_msat`:\n        - MAY NOT send `update_fee`\n        - MAY fail the channel\n      - if the dust balance of the local transaction at the updated `feerate_per_kw` is greater than `max_dust_htlc_exposure_msat`:\n        - MAY NOT send `update_fee`\n        - MAY fail the channel\n\nA receiving node:\n  - if the `update_fee` is too low for timely processing, OR is unreasonably large:\n    - MUST send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n  - if the sender is not responsible for paying the Bitcoin fee:\n    - MUST send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n  - if the sender cannot afford the new fee rate on the receiving node's\n  current commitment transaction:\n    - SHOULD send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n      - but MAY delay this check until the `update_fee` is committed.\n    - if `option_anchors` was not negotiated:\n      - if the `update_fee` increases `feerate_per_kw`:\n        - if the dust balance of the remote transaction at the updated `feerate_per_kw` is greater then `max_dust_htlc_exposure_msat`:\n          - MAY fail the channel\n      - if the dust balance of the local transaction at the updated `feerate_per_kw` is greater than `max_dust_htlc_exposure_msat`:\n          - MAY fail the channel\n\n#### Rationale\n\nBitcoin fees are required for unilateral closes to be effective.\nWith `option_anchors`, `feerate_per_kw` is not as critical anymore to guarantee\nconfirmation as it was in the legacy commitment format, but it still needs to\nbe enough to be able to enter the mempool (satisfy min relay fee and mempool\nmin fee).\n\nFor the legacy commitment format, there is no general method for the\nbroadcasting node to use child-pays-for-parent to increase its effective fee.\n\nGiven the variance in fees, and the fact that the transaction may be\nspent in the future, it's a good idea for the fee payer to keep a good\nmargin (say 5x the expected fee requirement) for legacy commitment txes; but, due to differing methods of\nfee estimation, an exact value is not specified.\n\nSince the fees are currently one-sided (the party which requested the\nchannel creation always pays the fees for the commitment transaction),\nit's simplest to only allow it to set fee levels; however, as the same\nfee rate applies to HTLC transactions, the receiving node must also\ncare about the reasonableness of the fee.\n\nIf on-chain fees increase while commitments contain many HTLCs that will\nbe trimmed at the updated feerate, this could overflow the configured\n`max_dust_htlc_exposure_msat`. Whether to close the channel preemptively\nor not is left as a matter of node policy.\n\n## Message Retransmission\n\nBecause communication transports are unreliable, and may need to be\nre-established from time to time, the design of the transport has been\nexplicitly separated from the protocol.\n\nNonetheless, it's assumed our transport is ordered and reliable.\nReconnection introduces doubt as to what has been received, so there are\nexplicit acknowledgments at that point.\n\nThis is fairly straightforward in the case of channel establishment\nand close, where messages have an explicit order, but during normal\noperation, acknowledgments of updates are delayed until the\n`commitment_signed` / `revoke_and_ack` exchange; so it cannot be assumed\nthat the updates have been received. This also means that the receiving\nnode only needs to store updates upon receipt of `commitment_signed`.\n\nNote that messages described in [BOLT #7](07-routing-gossip.md) are\nindependent of particular channels; their transmission requirements\nare covered there, and besides being transmitted after `init` (as all\nmessages are), they are independent of requirements here.\n\n1. type: 136 (`channel_reestablish`)\n2. data:\n   * [`channel_id`:`channel_id`]\n   * [`u64`:`next_commitment_number`]\n   * [`u64`:`next_revocation_number`]\n   * [`32*byte`:`your_last_per_commitment_secret`]\n   * [`point`:`my_current_per_commitment_point`]\n\n1. `tlv_stream`: `channel_reestablish_tlvs`\n2. types:\n    1. type: 0 (`next_funding`)\n    2. data:\n        * [`sha256`:`next_funding_txid`]\n\n`next_commitment_number`: A commitment number is a 48-bit\nincrementing counter for each commitment transaction; counters\nare independent for each peer in the channel and start at 0.\nThey're only explicitly relayed to the other node in the case of\nre-establishment, otherwise they are implicit.\n\n### Requirements\n\nA funding node:\n  - upon disconnection:\n    - if it has broadcast the funding transaction:\n      - MUST remember the channel for reconnection.\n    - otherwise:\n      - SHOULD NOT remember the channel for reconnection.\n\nA non-funding node:\n  - upon disconnection:\n    - if it has sent the `funding_signed` message:\n      - MUST remember the channel for reconnection.\n    - otherwise:\n      - SHOULD NOT remember the channel for reconnection.\n\nA node:\n  - MUST handle continuation of a previous channel on a new encrypted transport.\n  - upon disconnection:\n    - MUST reverse any uncommitted updates sent by the other side (i.e. all\n    messages beginning with `update_` for which no `commitment_signed` has\n    been received).\n      - Note: a node MAY have already used the `payment_preimage` value from\n    the `update_fulfill_htlc`, so the effects of `update_fulfill_htlc` are not\n    completely reversed.\n  - upon reconnection:\n    - if a channel is in an error state:\n      - SHOULD retransmit the error packet and ignore any other packets for\n      that channel.\n    - otherwise:\n      - MUST transmit `channel_reestablish` for each channel.\n      - MUST wait to receive the other node's `channel_reestablish`\n        message before sending any other messages for that channel.\n\nThe sending node:\n  - MUST set `next_commitment_number` to the commitment number of the\n  next `commitment_signed` it expects to receive.\n  - MUST set `next_revocation_number` to the commitment number of the\n  next `revoke_and_ack` message it expects to receive.\n  - MUST set `my_current_per_commitment_point` to a valid point.\n  - if `next_revocation_number` equals 0:\n    - MUST set `your_last_per_commitment_secret` to all zeroes\n  - otherwise:\n    - MUST set `your_last_per_commitment_secret` to the last `per_commitment_secret` it received\n  - if it has sent `commitment_signed` for an interactive transaction construction but\n    it has not received `tx_signatures`:\n    - MUST set `next_funding_txid` to the txid of that interactive transaction.\n  - otherwise:\n    - MUST NOT set `next_funding_txid`.\n\nA node:\n  - if `next_commitment_number` is 1 in both the `channel_reestablish` it\n  sent and received:\n    - MUST retransmit `channel_ready`.\n  - otherwise:\n    - MUST NOT retransmit `channel_ready`, but MAY send `channel_ready` with\n      a different `short_channel_id` `alias` field.\n  - upon reconnection:\n    - MUST ignore any redundant `channel_ready` it receives.\n  - if `next_commitment_number` is equal to the commitment number of\n  the last `commitment_signed` message the receiving node has sent:\n    - MUST reuse the same commitment number for its next `commitment_signed`.\n  - otherwise:\n    - if `next_commitment_number` is not 1 greater than the\n  commitment number of the last `commitment_signed` message the receiving\n  node has sent:\n      - SHOULD send an `error` and fail the channel.\n    - if it has not sent `commitment_signed`, AND `next_commitment_number`\n    is not equal to 1:\n      - SHOULD send an `error` and fail the channel.\n  - if `next_revocation_number` is equal to the commitment number of\n  the last `revoke_and_ack` the receiving node sent, AND the receiving node\n  hasn't already received a `closing_signed`:\n    - MUST re-send the `revoke_and_ack`.\n    - if it has previously sent a `commitment_signed` that needs to be\n    retransmitted:\n      - MUST retransmit `revoke_and_ack` and `commitment_signed` in the same\n      relative order as initially transmitted.\n  - otherwise:\n    - if `next_revocation_number` is not equal to 1 greater than the\n    commitment number of the last `revoke_and_ack` the receiving node has sent:\n      - SHOULD send an `error` and fail the channel.\n    - if it has not sent `revoke_and_ack`, AND `next_revocation_number`\n    is not equal to 0:\n      - SHOULD send an `error` and fail the channel.\n\n A receiving node:\n  - MUST ignore `my_current_per_commitment_point`, but MAY require it to be a valid point.\n  - if `next_revocation_number` is greater than expected above, AND\n    `your_last_per_commitment_secret` is correct for that\n    `next_revocation_number` minus 1:\n    - MUST NOT broadcast its commitment transaction.\n    - SHOULD send an `error` to request the peer to fail the channel.\n  - otherwise:\n    - if `your_last_per_commitment_secret` does not match the expected values:\n      - SHOULD send an `error` and fail the channel.\n\nA receiving node:\n  - if `next_funding_txid` is set:\n    - if `next_funding_txid` matches the latest interactive funding transaction:\n      - if it has not received `tx_signatures` for that funding transaction:\n        - MUST retransmit its `commitment_signed` for that funding transaction.\n        - if it has already received `commitment_signed` and it should sign first,\n          as specified in the [`tx_signatures` requirements](#the-tx_signatures-message):\n          - MUST send its `tx_signatures` for that funding transaction.\n      - if it has already received `tx_signatures` for that funding transaction:\n        - MUST send its `tx_signatures` for that funding transaction.\n    - otherwise:\n      - MUST send `tx_abort` to let the sending node know that they can forget\n        this funding transaction.\n\nA node:\n  - MUST NOT assume that previously-transmitted messages were lost,\n    - if it has sent a previous `commitment_signed` message:\n      - MUST handle the case where the corresponding commitment transaction is\n      broadcast at any time by the other side,\n        - Note: this is particularly important if the node does not simply\n        retransmit the exact `update_` messages as previously sent.\n  - upon reconnection:\n    - if it has sent a previous `shutdown`:\n      - MUST retransmit `shutdown`.\n\n### Rationale\n\nThe requirements above ensure that the opening phase is nearly\natomic: if it doesn't complete, it starts again. The only exception\nis if the `funding_signed` message is sent but not received. In\nthis case, the funder will forget the channel, and presumably open\na new one upon reconnection; meanwhile, the other node will eventually forget\nthe original channel, due to never receiving `channel_ready` or seeing\nthe funding transaction on-chain.\n\nThere's no acknowledgment for `error`, so if a reconnect occurs it's\npolite to retransmit before disconnecting again; however, it's not a MUST,\nbecause there are also occasions where a node can simply forget the\nchannel altogether.\n\n`closing_signed` also has no acknowledgment so must be retransmitted\nupon reconnection (though negotiation restarts on reconnection, so it needs\nnot be an exact retransmission).\nThe only acknowledgment for `shutdown` is `closing_signed`, so one or the other\nneeds to be retransmitted.\n\nThe handling of updates is similarly atomic: if the commit is not\nacknowledged (or wasn't sent) the updates are re-sent. However, it's not\ninsisted they be identical: they could be in a different order,\ninvolve different fees, or even be missing HTLCs which are now too old\nto be added. Requiring they be identical would effectively mean a\nwrite to disk by the sender upon each transmission, whereas the scheme\nhere encourages a single persistent write to disk for each\n`commitment_signed` sent or received. But if you need to retransmit both a\n`commitment_signed` and a `revoke_and_ack`, the relative order of these two\nmust be preserved, otherwise it will lead to a channel closure.\n\nA re-transmittal of `revoke_and_ack` should never be asked for after a\n`closing_signed` has been received, since that would imply a shutdown has been\ncompleted — which can only occur after the `revoke_and_ack` has been received\nby the remote node.\n\nNote that the `next_commitment_number` starts at 1, since\ncommitment number 0 is created during opening.\n`next_revocation_number` will be 0 until the\n`commitment_signed` for commitment number 1 is send and then\nthe revocation for commitment number 0 is received.\n\n`channel_ready` is implicitly acknowledged by the start of normal\noperation, which is known to have begun after a `commitment_signed` has been\nreceived — hence, the test for a `next_commitment_number` greater\nthan 1.\n\nA previous draft insisted that the funder \"MUST remember ...if it has\nbroadcast the funding transaction, otherwise it MUST NOT\": this was in\nfact an impossible requirement. A node must either firstly commit to\ndisk and secondly broadcast the transaction or vice versa. The new\nlanguage reflects this reality: it's surely better to remember a\nchannel which hasn't been broadcast than to forget one which has!\nSimilarly, for the fundee's `funding_signed` message: it's better to\nremember a channel that never opens (and times out) than to let the\nfunder open it while the fundee has forgotten it.\n\nA node, which has somehow fallen\nbehind (e.g. has been restored from old backup), can detect that it has fallen\nbehind. A fallen-behind node must know it cannot broadcast its current\ncommitment transaction — which would lead to total loss of funds — as the\nremote node can prove it knows the revocation preimage. The `error` returned by\nthe fallen-behind node should make the other node drop its current commitment\ntransaction to the chain. The other node should wait for that `error` to give\nthe fallen-behind node an opportunity to fix its state first (e.g by restarting\nwith a different backup).\n\n`next_funding_txid` allows peers to finalize the signing steps of an\ninteractive transaction construction, or safely abort that transaction\nif it was not signed by one of the peers, who has thus already removed\nit from its state.\n\n# Authors\n\n[ FIXME: Insert Author List ]\n\n![Creative Commons License](https://i.creativecommons.org/l/by/4.0/88x31.png \"License CC-BY\")\n<br>\nThis work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).\n"
        },
        {
          "name": "03-transactions.md",
          "type": "blob",
          "size": 183.5439453125,
          "content": "# BOLT #3: Bitcoin Transaction and Script Formats\n\nThis details the exact format of on-chain transactions, which both sides need to agree on to ensure signatures are valid. This consists of the funding transaction output script, the commitment transactions, and the HTLC transactions.\n\n# Table of Contents\n\n  * [Transactions](#transactions)\n    * [Transaction Output Ordering](#transaction-output-ordering)\n    * [Use of Segwit](#use-of-segwit)\n    * [Funding Transaction Output](#funding-transaction-output)\n    * [Commitment Transaction](#commitment-transaction)\n        * [Commitment Transaction Outputs](#commitment-transaction-outputs)\n          * [`to_local` Output](#to_local-output)\n          * [`to_remote` Output](#to_remote-output)\n          * [`to_local_anchor` and `to_remote_anchor`](#to_local_anchor-and-to_remote_anchor-output-option_anchors)\n          * [Offered HTLC Outputs](#offered-htlc-outputs)\n          * [Received HTLC Outputs](#received-htlc-outputs)\n        * [Trimmed Outputs](#trimmed-outputs)\n    * [HTLC-timeout and HTLC-success Transactions](#htlc-timeout-and-htlc-success-transactions)\n\t* [Closing Transaction](#closing-transaction)\n    * [Fees](#fees)\n        * [Fee Calculation](#fee-calculation)\n        * [Fee Payment](#fee-payment)\n        * [Calculating Fees for Collaborative Transactions](#calculating-fees-for-collaborative-transactions)\n    * [Dust Limits](#dust-limits)\n    * [Commitment Transaction Construction](#commitment-transaction-construction)\n  * [Keys](#keys)\n    * [Key Derivation](#key-derivation)\n        * [`localpubkey`, `remotepubkey`, `local_htlcpubkey`, `remote_htlcpubkey`, `local_delayedpubkey`, and `remote_delayedpubkey` Derivation](#localpubkey-remotepubkey-local_htlcpubkey-remote_htlcpubkey-local_delayedpubkey-and-remote_delayedpubkey-derivation)\n        * [`revocationpubkey` Derivation](#revocationpubkey-derivation)\n        * [Per-commitment Secret Requirements](#per-commitment-secret-requirements)\n    * [Efficient Per-commitment Secret Storage](#efficient-per-commitment-secret-storage)\n  * [Appendix A: Expected Weights](#appendix-a-expected-weights)\n      * [Expected Weight of the Funding Transaction (v2 Channel Establishment)](#expected-weight-of-the-funding-transaction-v2-channel-establishment)\n      * [Expected Weight of the Commitment Transaction](#expected-weight-of-the-commitment-transaction)\n      * [Expected Weight of HTLC-timeout and HTLC-success Transactions](#expected-weight-of-htlc-timeout-and-htlc-success-transactions)\n  * [Appendix B: Funding Transaction Test Vectors](#appendix-b-funding-transaction-test-vectors)\n  * [Appendix C: Commitment and HTLC Transaction Test Vectors](#appendix-c-commitment-and-htlc-transaction-test-vectors)\n  * [Appendix D: Per-commitment Secret Generation Test Vectors](#appendix-d-per-commitment-secret-generation-test-vectors)\n    * [Generation Tests](#generation-tests)\n    * [Storage Tests](#storage-tests)\n  * [Appendix E: Key Derivation Test Vectors](#appendix-e-key-derivation-test-vectors)\n  * [Appendix F: Commitment and HTLC Transaction Test Vectors (anchors)](#appendix-f-commitment-and-htlc-transaction-test-vectors-anchors)\n  * [Appendix G: Dual Funded Transaction Test Vectors](#appendix-g-dual-funded-transaction-test-vectors)\n  * [References](#references)\n  * [Authors](#authors)\n\n# Transactions\n\n## Transaction Output Ordering\n\nOutputs in transactions are always sorted according to:\n * first according to their value, smallest first (in whole satoshis, note that for HTLC outputs, the millisatoshi part must be ignored)\n * followed by `scriptpubkey`, comparing the common-length prefix lexicographically as if by `memcmp`, then selecting the shorter script (if they differ in length),\n * finally, for HTLC outputs, in increasing `cltv_expiry` order.\n\n## Rationale\n\nTwo offered HTLCs which have the same `amount` (rounded from `amount_msat`) and\n`payment_hash` will have identical outputs, even if their `cltv_expiry`\ndiffers.  This only matters because the same ordering is used to send\n`htlc_signatures` and the HTLC transactions themselves are different, thus the\ntwo peers must agree on the canonical ordering for this case.\n\n## Use of Segwit\n\nMost transaction outputs used here are pay-to-witness-script-hash<sup>[BIP141](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program)</sup> (P2WSH) outputs: the Segwit version of P2SH. To spend such outputs, the last item on the witness stack must be the actual script that was used to generate the P2WSH output that is being spent. This last item has been omitted for brevity in the rest of this document.\n\nA `<>` designates an empty vector as required for compliance with MINIMALIF-standard rule.<sup>[MINIMALIF](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/013014.html)</sup>\n\n## Funding Transaction Output\n\n* The funding output script is a P2WSH to:\n\n`2 <pubkey1> <pubkey2> 2 OP_CHECKMULTISIG`\n\n* Where `pubkey1` is the lexicographically lesser of the two `funding_pubkey` in compressed format, and where `pubkey2` is the lexicographically greater of the two.\n\n## Commitment Transaction\n\n* version: 2\n* locktime: upper 8 bits are 0x20, lower 24 bits are the lower 24 bits of the obscured commitment number\n* txin count: 1\n   * `txin[0]` outpoint: `txid` and `output_index` from `funding_created` message\n   * `txin[0]` sequence: upper 8 bits are 0x80, lower 24 bits are upper 24 bits of the obscured commitment number\n   * `txin[0]` script bytes: 0\n   * `txin[0]` witness: `0 <signature_for_pubkey1> <signature_for_pubkey2>`\n\nThe 48-bit commitment number is obscured by `XOR` with the lower 48 bits of:\n\n    SHA256(payment_basepoint from open_channel || payment_basepoint from accept_channel)\n\nThis obscures the number of commitments made on the channel in the\ncase of unilateral close, yet still provides a useful index for both\nnodes (who know the `payment_basepoint`s) to quickly find a revoked\ncommitment transaction.\n\n### Commitment Transaction Outputs\n\nTo allow an opportunity for penalty transactions, in case of a revoked commitment transaction, all outputs that return funds to the owner of the commitment transaction (a.k.a. the \"local node\") must be delayed for `to_self_delay` blocks. For HTLCs this delay is done in a second-stage HTLC transaction (HTLC-success for HTLCs accepted by the local node, HTLC-timeout for HTLCs offered by the local node).\n\nThe reason for the separate transaction stage for HTLC outputs is so that HTLCs can timeout or be fulfilled even though they are within the `to_self_delay` delay.\nOtherwise, the required minimum timeout on HTLCs is lengthened by this delay, causing longer timeouts for HTLCs traversing the network.\n\nThe amounts for each output MUST be rounded down to whole satoshis. If this amount, minus the fees for the HTLC transaction, is less than the `dust_limit_satoshis` set by the owner of the commitment transaction, the output MUST NOT be produced (thus the funds add to fees).\n\n#### `to_local` Output\n\nThis output sends funds back to the owner of this commitment transaction and thus must be timelocked using `OP_CHECKSEQUENCEVERIFY`. It can be claimed, without delay, by the other party if they know the revocation private key. The output is a version-0 P2WSH, with a witness script:\n\n    OP_IF\n        # Penalty transaction\n        <revocationpubkey>\n    OP_ELSE\n        `to_self_delay`\n        OP_CHECKSEQUENCEVERIFY\n        OP_DROP\n        <local_delayedpubkey>\n    OP_ENDIF\n    OP_CHECKSIG\n\nThe output is spent by an input with `nSequence` field set to `to_self_delay` (which can only be valid after that duration has passed) and witness:\n\n    <local_delayedsig> <>\n\nIf a revoked commitment transaction is published, the other party can spend this output immediately with the following witness:\n\n    <revocation_sig> 1\n\n#### `to_remote` Output\n\nIf `option_anchors` applies to the commitment transaction, the `to_remote` output is encumbered by a one block csv lock.\n\n    <remotepubkey> OP_CHECKSIGVERIFY 1 OP_CHECKSEQUENCEVERIFY\n\nThe output is spent by an input with `nSequence` field set to `1` and witness:\n\n    <remote_sig>\n\nOtherwise, this output is a simple P2WPKH to `remotepubkey`. Note: the remote's commitment transaction uses your `localpubkey` for their\n`to_remote` output to yourself.\n\n#### `to_local_anchor` and `to_remote_anchor` Output (option_anchors)\n\nThis output can be spent by the local and remote nodes respectively to provide incentive to mine the transaction, using child-pays-for-parent. Both\nanchor outputs are always added, except for the case where there are no htlcs and one of the parties has a commitment output that is below the dust limit. \nIn that case only an anchor is added for the commitment output that does materialize. This typically happens if the initiator closes right after opening\n(no `to_remote` output).\n\n    <local_funding_pubkey/remote_funding_pubkey> OP_CHECKSIG OP_IFDUP\n    OP_NOTIF\n        OP_16 OP_CHECKSEQUENCEVERIFY\n    OP_ENDIF\n\nEach party has its own anchor output that locks to their funding key. This is to prevent a malicious peer from attaching child transactions with a low fee\ndensity to an anchor and thereby blocking the victim from getting the commit tx confirmed in time. This defense is supported by a change in Bitcoin core 0.19:\nhttps://github.com/bitcoin/bitcoin/pull/15681. This is also the reason that every non-anchor output on the commit tx is CSV locked.\n\nTo prevent utxo set pollution, any anchor that remains unspent can be spent by anyone after the commitment tx confirms. This is also the reason to lock\nthe anchor outputs to the funding key. Third parties can observe this key and reconstruct the spend script, even if none of the commitment outputs would\nbe spent. This does assume that at some point the fee market goes down to a level where sweeping the anchors is economical.\n\nThe amount of the output is fixed at 330 sats, the default dust limit for P2WSH.\n\nSpending of the output requires the following witness:\n\n    <local_sig/remote_sig>\n\nAfter 16 blocks, anyone can sweep the anchor with witness:\n\n    <>\n\n#### Offered HTLC Outputs\n\nThis output sends funds to either an HTLC-timeout transaction after the HTLC-timeout or to the remote node using the payment preimage or the revocation key. The output is a P2WSH, with a witness script (no option_anchors):\n\n    # To remote node with revocation key\n    OP_DUP OP_HASH160 <RIPEMD160(SHA256(revocationpubkey))> OP_EQUAL\n    OP_IF\n        OP_CHECKSIG\n    OP_ELSE\n        <remote_htlcpubkey> OP_SWAP OP_SIZE 32 OP_EQUAL\n        OP_NOTIF\n            # To local node via HTLC-timeout transaction (timelocked).\n            OP_DROP 2 OP_SWAP <local_htlcpubkey> 2 OP_CHECKMULTISIG\n        OP_ELSE\n            # To remote node with preimage.\n            OP_HASH160 <RIPEMD160(payment_hash)> OP_EQUALVERIFY\n            OP_CHECKSIG\n        OP_ENDIF\n    OP_ENDIF\n\nOr, with `option_anchors`:\n\n    # To remote node with revocation key\n    OP_DUP OP_HASH160 <RIPEMD160(SHA256(revocationpubkey))> OP_EQUAL\n    OP_IF\n        OP_CHECKSIG\n    OP_ELSE\n        <remote_htlcpubkey> OP_SWAP OP_SIZE 32 OP_EQUAL\n        OP_NOTIF\n            # To local node via HTLC-timeout transaction (timelocked).\n            OP_DROP 2 OP_SWAP <local_htlcpubkey> 2 OP_CHECKMULTISIG\n        OP_ELSE\n            # To remote node with preimage.\n            OP_HASH160 <RIPEMD160(payment_hash)> OP_EQUALVERIFY\n            OP_CHECKSIG\n        OP_ENDIF\n        1 OP_CHECKSEQUENCEVERIFY OP_DROP\n    OP_ENDIF\n\nThe remote node can redeem the HTLC with the witness:\n\n    <remotehtlcsig> <payment_preimage>\n\nNote that if `option_anchors` applies, the nSequence field of\nthe spending input must be `1`.\n\nIf a revoked commitment transaction is published, the remote node can spend this output immediately with the following witness:\n\n    <revocation_sig> <revocationpubkey>\n\nThe sending node can use the HTLC-timeout transaction to timeout the HTLC once the HTLC is expired, as shown below. This is the only way that the local node can timeout the HTLC, and this branch requires `<remotehtlcsig>`, which ensures that the local node cannot prematurely timeout the HTLC since the HTLC-timeout transaction has `cltv_expiry` as its specified `locktime`. The local node must also wait `to_self_delay` before accessing these funds, allowing for the remote node to claim these funds if the transaction has been revoked.\n\n#### Received HTLC Outputs\n\nThis output sends funds to either the remote node after the HTLC-timeout or using the revocation key, or to an HTLC-success transaction with a successful payment preimage. The output is a P2WSH, with a witness script (no `option_anchors`):\n\n    # To remote node with revocation key\n    OP_DUP OP_HASH160 <RIPEMD160(SHA256(revocationpubkey))> OP_EQUAL\n    OP_IF\n        OP_CHECKSIG\n    OP_ELSE\n        <remote_htlcpubkey> OP_SWAP OP_SIZE 32 OP_EQUAL\n        OP_IF\n            # To local node via HTLC-success transaction.\n            OP_HASH160 <RIPEMD160(payment_hash)> OP_EQUALVERIFY\n            2 OP_SWAP <local_htlcpubkey> 2 OP_CHECKMULTISIG\n        OP_ELSE\n            # To remote node after timeout.\n            OP_DROP <cltv_expiry> OP_CHECKLOCKTIMEVERIFY OP_DROP\n            OP_CHECKSIG\n        OP_ENDIF\n    OP_ENDIF\n\nOr, with `option_anchors`:\n\n    # To remote node with revocation key\n    OP_DUP OP_HASH160 <RIPEMD160(SHA256(revocationpubkey))> OP_EQUAL\n    OP_IF\n        OP_CHECKSIG\n    OP_ELSE\n        <remote_htlcpubkey> OP_SWAP OP_SIZE 32 OP_EQUAL\n        OP_IF\n            # To local node via HTLC-success transaction.\n            OP_HASH160 <RIPEMD160(payment_hash)> OP_EQUALVERIFY\n            2 OP_SWAP <local_htlcpubkey> 2 OP_CHECKMULTISIG\n        OP_ELSE\n            # To remote node after timeout.\n            OP_DROP <cltv_expiry> OP_CHECKLOCKTIMEVERIFY OP_DROP\n            OP_CHECKSIG\n        OP_ENDIF\n        1 OP_CHECKSEQUENCEVERIFY OP_DROP\n    OP_ENDIF\n\nTo timeout the HTLC, the remote node spends it with the witness:\n\n    <remotehtlcsig> <>\n\nNote that if `option_anchors` applies, the nSequence field of\nthe spending input must be `1`.\n\nIf a revoked commitment transaction is published, the remote node can spend this output immediately with the following witness:\n\n    <revocation_sig> <revocationpubkey>\n\nTo redeem the HTLC, the HTLC-success transaction is used as detailed below. This is the only way that the local node can spend the HTLC, since this branch requires `<remotehtlcsig>`, which ensures that the local node must wait `to_self_delay` before accessing these funds allowing for the remote node to claim these funds if the transaction has been revoked.\n\n### Trimmed Outputs\n\nEach peer specifies a `dust_limit_satoshis` below which outputs should\nnot be produced; these outputs that are not produced are termed \"trimmed\". A trimmed output is\nconsidered too small to be worth creating and is instead added\nto the commitment transaction fee. For HTLCs, it needs to be taken into\naccount that the second-stage HTLC transaction may also be below the\nlimit.\n\n#### Requirements\n\nThe base fee and anchor output values:\n  - before the commitment transaction outputs are determined:\n    - MUST be subtracted from the `to_local` or `to_remote`\n    outputs, as specified in [Fee Calculation](#fee-calculation).\n\nThe commitment transaction:\n  - if the amount of the commitment transaction `to_local` output would be\nless than `dust_limit_satoshis` set by the transaction owner:\n    - MUST NOT contain that output.\n  - otherwise:\n    - MUST be generated as specified in [`to_local` Output](#to_local-output).\n  - if the amount of the commitment transaction `to_remote` output would be\nless than `dust_limit_satoshis` set by the transaction owner:\n    - MUST NOT contain that output.\n  - otherwise:\n    - MUST be generated as specified in [`to_remote` Output](#to_remote-output).\n  - for every offered HTLC:\n    - if the HTLC amount minus the HTLC-timeout fee would be less than\n    `dust_limit_satoshis` set by the transaction owner:\n      - MUST NOT contain that output.\n    - otherwise:\n      - MUST be generated as specified in\n      [Offered HTLC Outputs](#offered-htlc-outputs).\n  - for every received HTLC:\n    - if the HTLC amount minus the HTLC-success fee would be less than\n    `dust_limit_satoshis` set by the transaction owner:\n      - MUST NOT contain that output.\n    - otherwise:\n      - MUST be generated as specified in\n      [Received HTLC Outputs](#received-htlc-outputs).\n\n## HTLC-Timeout and HTLC-Success Transactions\n\nThese HTLC transactions are almost identical, except the HTLC-timeout transaction is timelocked. Both HTLC-timeout/HTLC-success transactions can be spent by a valid penalty transaction.\n\n* version: 2\n* locktime: `0` for HTLC-success, `cltv_expiry` for HTLC-timeout\n* txin count: 1\n   * `txin[0]` outpoint: `txid` of the commitment transaction and `output_index` of the matching HTLC output for the HTLC transaction\n   * `txin[0]` sequence: `0` (set to `1` for `option_anchors`)\n   * `txin[0]` script bytes: `0`\n   * `txin[0]` witness stack: `0 <remotehtlcsig> <localhtlcsig>  <payment_preimage>` for HTLC-success, `0 <remotehtlcsig> <localhtlcsig> <>` for HTLC-timeout\n* txout count: 1\n   * `txout[0]` amount: the HTLC `amount_msat` divided by 1000 (rounding down) minus fees in satoshis (see [Fee Calculation](#fee-calculation))\n   * `txout[0]` script: version-0 P2WSH with witness script as shown below\n* if `option_anchors` applies to this commitment transaction, `SIGHASH_SINGLE|SIGHASH_ANYONECANPAY` is used as described in [BOLT #5](05-onchain.md#generation-of-htlc-transactions).\n\nThe witness script for the output is:\n\n    OP_IF\n        # Penalty transaction\n        <revocationpubkey>\n    OP_ELSE\n        `to_self_delay`\n        OP_CHECKSEQUENCEVERIFY\n        OP_DROP\n        <local_delayedpubkey>\n    OP_ENDIF\n    OP_CHECKSIG\n\nTo spend this via penalty, the remote node uses a witness stack `<revocationsig> 1`, and to collect the output, the local node uses an input with nSequence `to_self_delay` and a witness stack `<local_delayedsig> 0`.\n\n## Closing Transaction\n\nNote that there are two possible variants for each node.\n\n* version: 2\n* locktime: 0\n* txin count: 1\n   * `txin[0]` outpoint: `txid` and `output_index` from `funding_created` message\n   * `txin[0]` sequence: 0xFFFFFFFF\n   * `txin[0]` script bytes: 0\n   * `txin[0]` witness: `0 <signature_for_pubkey1> <signature_for_pubkey2>`\n* txout count: 1 or 2\n   * `txout` amount: final balance to be paid to one node (minus `fee_satoshis` from `closing_signed`, if this peer funded the channel)\n   * `txout` script: as specified in that node's `scriptpubkey` in its `shutdown` message\n\n### Requirements\n\nEach node offering a signature:\n  - MUST round each output down to whole satoshis.\n  - MUST subtract the fee given by `fee_satoshis` from the output to the funder.\n  - MUST remove any output below its own `dust_limit_satoshis`.\n  - MAY eliminate its own output.\n\n### Rationale\n\nThere is a possibility of irreparable differences on closing if one\nnode considers the other's output too small to allow propagation on\nthe Bitcoin network (a.k.a. \"dust\"), and that other node instead\nconsiders that output too valuable to discard. This is why each\nside uses its own `dust_limit_satoshis`, and the result can be a\nsignature validation failure, if they disagree on what the closing\ntransaction should look like.\n\nHowever, if one side chooses to eliminate its own output, there's no\nreason for the other side to fail the closing protocol; so this is\nexplicitly allowed. The signature indicates which variant\nhas been used.\n\nThere will be at least one output, if the funding amount is greater\nthan twice `dust_limit_satoshis`.\n\n## Fees\n\n### Fee Calculation\n\nThe fee calculation for both commitment transactions and HTLC\ntransactions is based on the current `feerate_per_kw` and the\n*expected weight* of the transaction.\n\nThe actual and expected weights vary for several reasons:\n\n* Bitcoin uses DER-encoded signatures, which vary in size.\n* Bitcoin also uses variable-length integers, so a large number of outputs will take 3 bytes to encode rather than 1.\n* The `to_remote` output may be below the dust limit.\n* The `to_local` output may be below the dust limit once fees are extracted.\n\nThus, a simplified formula for *expected weight* is used, which assumes:\n\n* Signatures are 73 bytes long (the maximum length).\n* There are a small number of outputs (thus 1 byte to count them).\n* There are always both a `to_local` output and a `to_remote` output.\n* (if `option_anchors`) there are always both a `to_local_anchor` and `to_remote_anchor` output.\n\nThis yields the following *expected weights* (details of the computation in [Appendix A](#appendix-a-expected-weights)):\n\n    Commitment weight (no option_anchors):   724 + 172 * num-untrimmed-htlc-outputs\n    Commitment weight (option_anchors):     1124 + 172 * num-untrimmed-htlc-outputs\n    HTLC-timeout weight (no option_anchors): 663\n    HTLC-timeout weight (option_anchors): 666\n    HTLC-success weight (no option_anchors): 703\n    HTLC-success weight (option_anchors): 706\n\nNote the reference to the \"base fee\" for a commitment transaction in the requirements below, which is what the funder pays. The actual fee may be higher than the amount calculated here, due to rounding and trimmed outputs.\n\n#### Requirements\n\nThe fee for an HTLC-timeout transaction:\n  - If `option_anchors` applies:\n    1. MUST be 0.\n  - Otherwise, MUST be calculated to match:\n    1. Multiply `feerate_per_kw` by 663 and divide by 1000 (rounding down).\n\nThe fee for an HTLC-success transaction:\n  - If `option_anchors` applies:\n    1. MUST be 0.\n  - Otherwise, MUST be calculated to match:\n    1. Multiply `feerate_per_kw` by 703 and divide by 1000 (rounding down).\n\nThe base fee for a commitment transaction:\n  - MUST be calculated to match:\n    1. Start with `weight` = 724 (1124 if `option_anchors` applies).\n    2. For each committed HTLC, if that output is not trimmed as specified in\n    [Trimmed Outputs](#trimmed-outputs), add 172 to `weight`.\n    3. Multiply `feerate_per_kw` by `weight`, divide by 1000 (rounding down).\n\n#### Example\n\nFor example, suppose there is a `feerate_per_kw` of 5000, a `dust_limit_satoshis` of 546 satoshis, and a commitment transaction with:\n* two offered HTLCs of 5000000 and 1000000 millisatoshis (5000 and 1000 satoshis)\n* two received HTLCs of 7000000 and 800000 millisatoshis (7000 and 800 satoshis)\n\nThe HTLC-timeout transaction `weight` is 663, and thus the fee is 3315 satoshis.\nThe HTLC-success transaction `weight` is 703, and thus the fee is 3515 satoshis\n\nThe commitment transaction `weight` is calculated as follows:\n\n* `weight` starts at 724.\n\n* The offered HTLC of 5000 satoshis is above 546 + 3315 and results in:\n  * an output of 5000 satoshi in the commitment transaction\n  * an HTLC-timeout transaction of 5000 - 3315 satoshis that spends this output\n  * `weight` increases to 896\n\n* The offered HTLC of 1000 satoshis is below 546 + 3315 so it is trimmed.\n\n* The received HTLC of 7000 satoshis is above 546 + 3515 and results in:\n  * an output of 7000 satoshi in the commitment transaction\n  * an HTLC-success transaction of 7000 - 3515 satoshis that spends this output\n  * `weight` increases to 1068\n\n* The received HTLC of 800 satoshis is below 546 + 3515 so it is trimmed.\n\nThe base commitment transaction fee is 5340 satoshi; the actual\nfee (which adds the 1000 and 800 satoshi HTLCs that would make dust\noutputs) is 7140 satoshi. The final fee may be even higher if the\n`to_local` or `to_remote` outputs fall below `dust_limit_satoshis`.\n\n### Fee Payment\n\nBase commitment transaction fees and amounts for `to_local_anchor` and `to_remote_anchor` outputs are extracted from the funder's amount;\nRestrictions to the commitment tx output for the funder in relation to the\nchannel reserve apply as described in [BOLT #2](02-peer-protocol.md).\n\nNote that after the fee amount is subtracted from the to-funder output,\nthat output may be below `dust_limit_satoshis`, and thus will also\ncontribute to fees.\n\nA node:\n  - if the resulting fee rate is too low:\n    - MAY send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n\n### Calculating Fees for Collaborative Transactions\n\nFor transactions constructed using the [interactive protocol](02-peer-protocol.md#interactive-transaction-construction),\nfees are paid by each party to the transaction, at a `feerate` determined during the\ninitiation, with the initiator covering the fees for the common transaction fields.\n\n## Dust Limits\n\nThe `dust_limit_satoshis` parameter is used to configure the threshold below\nwhich nodes will not produce on-chain transaction outputs.\n\nThere is no consensus rule in Bitcoin that makes outputs below dust thresholds\ninvalid or unspendable, but policy rules in popular implementations will prevent\nrelaying transactions that contain such outputs.\n\nBitcoin Core defines the following dust thresholds:\n\n- pay to pubkey hash (p2pkh): 546 satoshis\n- pay to script hash (p2sh): 540 satoshis\n- pay to witness pubkey hash (p2wpkh): 294 satoshis\n- pay to witness script hash (p2wsh): 330 satoshis\n- unknown segwit versions: 354 satoshis\n\nThe rationale of this calculation (implemented [here](https://github.com/bitcoin/bitcoin/blob/2aff9a36c352640a263e8b5de469710f7e80eb54/src/policy/policy.cpp#L28))\nis explained in the following sections.\n\nIn all these sections, the calculations are done with a feerate of 3000 sat/kB\nas per Bitcoin Core's implementation.\n\n### Pay to pubkey hash (p2pkh)\n\nA p2pkh output is 34 bytes:\n\n- 8 bytes for the output amount\n- 1 byte for the script length\n- 25 bytes for the script (`OP_DUP` `OP_HASH160` `20` 20-bytes `OP_EQUALVERIFY` `OP_CHECKSIG`)\n\nA p2pkh input is at least 148 bytes:\n\n- 36 bytes for the previous output (32 bytes hash + 4 bytes index)\n- 4 bytes for the sequence\n- 1 byte for the script sig length\n- 107 bytes for the script sig:\n  - 1 byte for the items count\n  - 1 byte for the signature length\n  - 71 bytes for the signature\n  - 1 byte for the public key length\n  - 33 bytes for the public key\n\nThe p2pkh dust threshold is then `(34 + 148) * 3000 / 1000 = 546 satoshis`\n\n### Pay to script hash (p2sh)\n\nA p2sh output is 32 bytes:\n\n- 8 bytes for the output amount\n- 1 byte for the script length\n- 23 bytes for the script (`OP_HASH160` `20` 20-bytes `OP_EQUAL`)\n\nA p2sh input doesn't have a fixed size, since it depends on the underlying\nscript, so we use 148 bytes as a lower bound.\n\nThe p2sh dust threshold is then `(32 + 148) * 3000 / 1000 = 540 satoshis`\n\n### Pay to witness pubkey hash (p2wpkh)\n\nA p2wpkh output is 31 bytes:\n\n- 8 bytes for the output amount\n- 1 byte for the script length\n- 22 bytes for the script (`OP_0` `20` 20-bytes)\n\nA p2wpkh input is at least 67 bytes (depending on the signature length):\n\n- 36 bytes for the previous output (32 bytes hash + 4 bytes index)\n- 4 bytes for the sequence\n- 1 byte for the script sig length\n- 26 bytes for the witness (rounded down from 26.75, with the 75% segwit discount applied):\n  - 1 byte for the items count\n  - 1 byte for the signature length\n  - 71 bytes for the signature\n  - 1 byte for the public key length\n  - 33 bytes for the public key\n\nThe p2wpkh dust threshold is then `(31 + 67) * 3000 / 1000 = 294 satoshis`\n\n### Pay to witness script hash (p2wsh)\n\nA p2wsh output is 43 bytes:\n\n- 8 bytes for the output amount\n- 1 byte for the script length\n- 34 bytes for the script (`OP_0` `32` 32-bytes)\n\nA p2wsh input doesn't have a fixed size, since it depends on the underlying\nscript, so we use 67 bytes as a lower bound.\n\nThe p2wsh dust threshold is then `(43 + 67) * 3000 / 1000 = 330 satoshis`\n\n### Unknown segwit versions\n\nUnknown segwit outputs are at most 51 bytes:\n\n- 8 bytes for the output amount\n- 1 byte for the script length\n- 42 bytes for the script (`OP_1` through `OP_16` inclusive, followed by a single push of 2 to 40 bytes)\n\nThe input doesn't have a fixed size, since it depends on the underlying\nscript, so we use 67 bytes as a lower bound.\n\nThe unknown segwit version dust threshold is then `(51 + 67) * 3000 / 1000 = 354 satoshis`\n\n## Commitment Transaction Construction\n\nThis section ties the previous sections together to detail the\nalgorithm for constructing the commitment transaction for one peer:\ngiven that peer's `dust_limit_satoshis`, the current `feerate_per_kw`,\nthe amounts due to each peer (`to_local` and `to_remote`), and all\ncommitted HTLCs:\n\n1. Initialize the commitment transaction input and locktime, as specified\n   in [Commitment Transaction](#commitment-transaction).\n1. Calculate which committed HTLCs need to be trimmed (see [Trimmed Outputs](#trimmed-outputs)).\n2. Calculate the base [commitment transaction fee](#fee-calculation).\n3. Subtract this base fee from the funder (either `to_local` or `to_remote`).\nIf `option_anchors` applies to the commitment transaction,\nalso subtract two times the fixed anchor size of 330 sats from the funder\n(either `to_local` or `to_remote`).\n4. For every offered HTLC, if it is not trimmed, add an\n   [offered HTLC output](#offered-htlc-outputs).\n5. For every received HTLC, if it is not trimmed, add an\n   [received HTLC output](#received-htlc-outputs).\n6. If the `to_local` amount is greater or equal to `dust_limit_satoshis`,\n   add a [`to_local` output](#to_local-output).\n7. If the `to_remote` amount is greater or equal to `dust_limit_satoshis`,\n   add a [`to_remote` output](#to_remote-output).\n8. If `option_anchors` applies to the commitment transaction:\n   * if `to_local` exists or there are untrimmed HTLCs, add a [`to_local_anchor` output](#to_local_anchor-and-to_remote_anchor-output-option_anchors)\n   * if `to_remote` exists or there are untrimmed HTLCs, add a [`to_remote_anchor` output](#to_local_anchor-and-to_remote_anchor-output-option_anchors)\n9. Sort the outputs into [BIP 69+CLTV order](#transaction-output-ordering).\n\n# Keys\n\n## Key Derivation\n\nEach commitment transaction uses a unique `localpubkey`.\nThe HTLC-success and HTLC-timeout transactions use `local_delayedpubkey` and `revocationpubkey`.\nThese are changed for every transaction based on the `per_commitment_point`.\n\nThe reason for key change is so that trustless watching for revoked\ntransactions can be outsourced. Such a _watcher_ should not be able to\ndetermine the contents of a commitment transaction — even if the _watcher_ knows\nwhich transaction ID to watch for and can make a reasonable guess\nas to which HTLCs and balances may be included. Nonetheless, to\navoid storage of every commitment transaction, a _watcher_ can be given the\n`per_commitment_secret` values (which can be stored compactly) and the\n`revocation_basepoint` and `delayed_payment_basepoint` used to regenerate\nthe scripts required for the penalty transaction; thus, a _watcher_ need only be\ngiven (and store) the signatures for each penalty input.\n\nChanging the `localpubkey` every time ensures that commitment\ntransaction ID cannot be guessed except in the trivial case where there is no\n`to_local` output, as every commitment transaction uses an ID\nin its output script. Splitting the `local_delayedpubkey`, which is required for\nthe penalty transaction, allows it to be shared with the _watcher_ without\nrevealing `localpubkey`; even if both peers use the same _watcher_, nothing is revealed.\n\nFinally, even in the case of normal unilateral close, the HTLC-success\nand/or HTLC-timeout transactions do not reveal anything to the\n_watcher_, as it does not know the corresponding `per_commitment_secret` and\ncannot relate the `local_delayedpubkey` or `revocationpubkey` with their bases.\n\nFor efficiency, keys are generated from a series of per-commitment secrets\nthat are generated from a single seed, which allows the receiver to compactly\nstore them (see [below](#efficient-per-commitment-secret-storage)).\n\n### `localpubkey`, `local_htlcpubkey`, `remote_htlcpubkey`, `local_delayedpubkey`, and `remote_delayedpubkey` Derivation\n\nThese pubkeys are simply generated by addition from their base points:\n\n\tpubkey = basepoint + SHA256(per_commitment_point || basepoint) * G\n\n- The `localpubkey` uses the local node's `payment_basepoint`;\n- The `local_htlcpubkey` uses the local node's `htlc_basepoint`;\n- The `remote_htlcpubkey` uses the remote node's `htlc_basepoint`;\n- The `local_delayedpubkey` uses the local node's `delayed_payment_basepoint`;\n- The `remote_delayedpubkey` uses the remote node's `delayed_payment_basepoint`.\n\nThe corresponding private keys can be similarly derived, if the basepoint\nsecrets are known (i.e. the private keys corresponding to `localpubkey`, `local_htlcpubkey`, and `local_delayedpubkey` only):\n\n    privkey = basepoint_secret + SHA256(per_commitment_point || basepoint)\n\n### `remotepubkey` Derivation\n\nThe `remotepubkey` is simply the remote node's `payment_basepoint`.\n\nThis means that a node can spend a commitment\ntransaction even if it has lost data and doesn't know the\ncorresponding `per_commitment_point`.  A watchtower could correlate\ntransactions given to it which only have a `to_remote` output if it\nsees one of them onchain, but such transactions do not need any\nenforcement and should not be handed to a watchtower.\n\n### `revocationpubkey` Derivation\n\nThe `revocationpubkey` is a blinded key: when the local node wishes to create a new\ncommitment for the remote node, it uses its own `revocation_basepoint` and the remote\nnode's `per_commitment_point` to derive a new `revocationpubkey` for the\ncommitment. After the remote node reveals the\n`per_commitment_secret` used (thereby revoking that commitment), the local node\ncan then derive the `revocationprivkey`, as it now knows the two secrets\nnecessary to derive the key (`revocation_basepoint_secret` and\n`per_commitment_secret`).\n\nThe `per_commitment_point` is generated using elliptic-curve multiplication:\n\n\tper_commitment_point = per_commitment_secret * G\n\nAnd this is used to derive the revocation pubkey from the remote node's\n`revocation_basepoint`:\n\n\trevocationpubkey = revocation_basepoint * SHA256(revocation_basepoint || per_commitment_point) + per_commitment_point * SHA256(per_commitment_point || revocation_basepoint)\n\nThis construction ensures that neither the node providing the\nbasepoint nor the node providing the `per_commitment_point` can know the\nprivate key without the other node's secret.\n\nThe corresponding private key can be derived once the `per_commitment_secret`\nis known:\n\n    revocationprivkey = revocation_basepoint_secret * SHA256(revocation_basepoint || per_commitment_point) + per_commitment_secret * SHA256(per_commitment_point || revocation_basepoint)\n\n### Per-commitment Secret Requirements\n\nA node:\n  - MUST select an unguessable 256-bit seed for each connection,\n  - MUST NOT reveal the seed.\n\nUp to (2^48 - 1) per-commitment secrets can be generated.\n\nThe first secret used:\n  - MUST be index 281474976710655,\n    - and from there, the index is decremented.\n\nThe I'th secret P:\n  - MUST match the output of this algorithm:\n```\ngenerate_from_seed(seed, I):\n    P = seed\n    for B in 47 down to 0:\n        if B set in I:\n            flip(B) in P\n            P = SHA256(P)\n    return P\n```\n\nWhere \"flip(B)\" alternates the (B mod 8) bit of the (B div 8)\nbyte of the value.  So, \"flip(0) in e3b0...\" is \"e2b0...\", and\n\"flip(10) in \"e3b0...\" is \"e3b4...\".\n\nThe receiving node:\n  - MAY store all previous per-commitment secrets.\n  - MAY calculate them from a compact representation, as described below.\n\n## Efficient Per-commitment Secret Storage\n\nThe receiver of a series of secrets can store them compactly in an\narray of 49 (value,index) pairs. Because, for a given secret on a\n2^X boundary, all secrets up to the next 2^X boundary can be derived;\nand secrets are always received in descending order starting at\n`0xFFFFFFFFFFFF`.\n\nIn binary, it's helpful to think of any index in terms of a *prefix*,\nfollowed by some trailing 0s. You can derive the secret for any\nindex that matches this *prefix*.\n\nFor example, secret `0xFFFFFFFFFFF0` allows the secrets to be derived for\n`0xFFFFFFFFFFF1` through `0xFFFFFFFFFFFF`, inclusive; and secret `0xFFFFFFFFFF08`\nallows the secrets to be derived for `0xFFFFFFFFFF09` through `0xFFFFFFFFFF0F`,\ninclusive.\n\nThis is done using a slight generalization of `generate_from_seed` above:\n\n    # Return I'th secret given base secret whose index has bits..47 the same.\n    derive_secret(base, bits, I):\n        P = base\n        for B in bits - 1 down to 0:\n            if B set in I:\n                flip(B) in P\n                P = SHA256(P)\n        return P\n\nOnly one secret for each unique prefix need be saved; in effect, the number of\ntrailing 0s is counted, and this determines where in the storage array the\nsecret is stored:\n\n    # a.k.a. count trailing 0s\n    where_to_put_secret(I):\n        for B in 0 to 47:\n            if testbit(I) in B == 1:\n                return B\n        # I = 0, this is the seed.\n        return 48\n\nA double-check, that all previous secrets derive correctly, is needed;\nif this check fails, the secrets were not generated from the same seed:\n\n    insert_secret(secret, I):\n        B = where_to_put_secret(I)\n\n        # This tracks the index of the secret in each bucket across the traversal.\n        for b in 0 to B:\n            if derive_secret(secret, B, known[b].index) != known[b].secret:\n                error The secret for I is incorrect\n                return\n\n        # Assuming this automatically extends known[] as required.\n        known[B].index = I\n        known[B].secret = secret\n\nFinally, if an unknown secret at index `I` needs be derived, it must be\ndiscovered which known secret can be used to derive it. The simplest\nmethod is iterating over all the known secrets, and testing if each\ncan be used to derive the unknown secret:\n\n    derive_old_secret(I):\n        for b in 0 to len(secrets):\n            # Mask off the non-zero prefix of the index.\n            MASK = ~((1 << b) - 1)\n            if (I & MASK) == secrets[b].index:\n                return derive_secret(known, i, I)\n        error Index 'I' hasn't been received yet.\n\nThis looks complicated, but remember that the index in entry `b` has\n`b` trailing 0s; the mask and compare simply checks if the index\nat each bucket is a prefix of the desired index.\n\n# Appendix A: Expected Weights\n\n## Expected Weight of the Funding Transaction (v2 Channel Establishment)\n\nThe *expected weight* of a funding transaction is calculated as follows:\n\n      inputs: 41 bytes\n        - previous_out_point: 36 bytes\n          - hash: 32 bytes\n          - index: 4 bytes\n        - var_int: 1 byte\n        - script_sig: 0 bytes\n        - witness <---- Cost for \"witness\" data calculated separately.\n        - sequence: 4 bytes\n\n      non_funding_outputs: 9 bytes + `scriptlen`\n        - value: 8 bytes\n        - var_int: 1 byte <---- assuming a standard output script\n        - script: `scriptlen`\n\n      funding_output: 43 bytes\n        - value: 8 bytes\n        - var_int: 1 byte\n        - script: 34 bytes\n          - OP_0: 1 byte\n          - PUSHDATA(32-byte-hash): 33 bytes\n\nMultiplying non-witness data by 4 results in a weight of:\n\n      // transaction_fields = 10 (version, input count, output count, locktime)\n      // segwit_fields = 2 (marker + flag)\n      // funding_transaction = 43 + num_inputs * 41 + num_outputs * 9 + sum(scriptlen)\n      funding_transaction_weight = 4 * (funding_transaction + transaction_fields) + segwit_fields\n\n      witness_weight = sum(witness_len)\n\n      overall_weight = funding_transaction_weight + witness_weight\n\n\n## Expected Weight of the Commitment Transaction\n\nThe *expected weight* of a commitment transaction is calculated as follows:\n\n\tp2wsh: 34 bytes\n\t\t- OP_0: 1 byte\n\t\t- OP_DATA: 1 byte (witness_script_SHA256 length)\n\t\t- witness_script_SHA256: 32 bytes\n\n\tp2wpkh: 22 bytes\n\t\t- OP_0: 1 byte\n\t\t- OP_DATA: 1 byte (public_key_HASH160 length)\n\t\t- public_key_HASH160: 20 bytes\n\n\tmulti_sig: 71 bytes\n\t\t- OP_2: 1 byte\n\t\t- OP_DATA: 1 byte (pub_key_alice length)\n\t\t- pub_key_alice: 33 bytes\n\t\t- OP_DATA: 1 byte (pub_key_bob length)\n\t\t- pub_key_bob: 33 bytes\n\t\t- OP_2: 1 byte\n\t\t- OP_CHECKMULTISIG: 1 byte\n\n\twitness: 222 bytes\n\t\t- number_of_witness_elements: 1 byte\n\t\t- nil_length: 1 byte\n\t\t- sig_alice_length: 1 byte\n\t\t- sig_alice: 73 bytes\n\t\t- sig_bob_length: 1 byte\n\t\t- sig_bob: 73 bytes\n\t\t- witness_script_length: 1 byte\n\t\t- witness_script (multi_sig)\n\n\tfunding_input: 41 bytes\n\t\t- previous_out_point: 36 bytes\n\t\t\t- hash: 32 bytes\n\t\t\t- index: 4 bytes\n\t\t- var_int: 1 byte (script_sig length)\n\t\t- script_sig: 0 bytes\n\t\t- witness <----\t\"witness\" is used instead of \"script_sig\" for\n\t \t\t\ttransaction validation; however, \"witness\" is stored\n\t \t\t\tseparately, and the cost for its size is smaller. So,\n\t \t\t    the calculation of ordinary data is separated\n\t \t\t\tfrom the witness data.\n\t\t- sequence: 4 bytes\n\n\toutput_paying_to_local: 43 bytes\n\t\t- value: 8 bytes\n\t\t- var_int: 1 byte (pk_script length)\n\t\t- pk_script (p2wsh): 34 bytes\n\n\toutput_paying_to_remote (no option_anchors): 31 bytes\n\t\t- value: 8 bytes\n\t\t- var_int: 1 byte (pk_script length)\n\t\t- pk_script (p2wpkh): 22 bytes\n\n\toutput_paying_to_remote (option_anchors): 43 bytes\n\t\t- value: 8 bytes\n\t\t- var_int: 1 byte (pk_script length)\n\t\t- pk_script (p2wsh): 34 bytes\n\n\toutput_anchor (option_anchors): 43 bytes\n\t\t- value: 8 bytes\n\t\t- var_int: 1 byte (pk_script length)\n\t\t- pk_script (p2wsh): 34 bytes\n\n    htlc_output: 43 bytes\n\t\t- value: 8 bytes\n\t\t- var_int: 1 byte (pk_script length)\n\t\t- pk_script (p2wsh): 34 bytes\n\n\t witness_header: 2 bytes\n\t\t- flag: 1 byte\n\t\t- marker: 1 byte\n\n\t commitment_transaction (no option_anchors): 125 + 43 * num-htlc-outputs bytes\n\t\t- version: 4 bytes\n\t\t- witness_header <---- part of the witness data\n\t\t- count_tx_in: 1 byte\n\t\t- tx_in: 41 bytes\n\t\t\tfunding_input\n\t\t- count_tx_out: 1 byte\n\t\t- tx_out: 74 + 43 * num-htlc-outputs bytes\n\t\t\toutput_paying_to_remote,\n\t\t\toutput_paying_to_local,\n\t\t\t....htlc_output's...\n\t\t- lock_time: 4 bytes\n\n\t commitment_transaction (option_anchors): 225 + 43 * num-htlc-outputs bytes\n\t\t- version: 4 bytes\n\t\t- witness_header <---- part of the witness data\n\t\t- count_tx_in: 1 byte\n\t\t- tx_in: 41 bytes\n\t\t\tfunding_input\n\t\t- count_tx_out: 3 byte\n\t\t- tx_out: 172 + 43 * num-htlc-outputs bytes\n\t\t\toutput_paying_to_remote,\n\t\t\toutput_paying_to_local,\n\t\t\toutput_anchor,\n\t\t\toutput_anchor,\n\t\t\t....htlc_output's...\n\t\t- lock_time: 4 bytes\n\nMultiplying non-witness data by 4 results in a weight of:\n\n\t// 500 + 172 * num-htlc-outputs weight (no option_anchors)\n\t// 900 + 172 * num-htlc-outputs weight (option_anchors)\n\tcommitment_transaction_weight = 4 * commitment_transaction\n\n\t// 224 weight\n\twitness_weight = witness_header + witness\n\n\toverall_weight (no option_anchors) = 500 + 172 * num-htlc-outputs + 224 weight\n\toverall_weight (option_anchors) = 900 + 172 * num-htlc-outputs + 224 weight\n\n## Expected Weight of HTLC-timeout and HTLC-success Transactions\n\nThe *expected weight* of an HTLC transaction is calculated as follows:\n\n    accepted_htlc_script: 140 bytes (143 bytes with option_anchors)\n        - OP_DUP: 1 byte\n        - OP_HASH160: 1 byte\n        - OP_DATA: 1 byte (RIPEMD160(SHA256(revocationpubkey)) length)\n        - RIPEMD160(SHA256(revocationpubkey)): 20 bytes\n        - OP_EQUAL: 1 byte\n        - OP_IF: 1 byte\n        - OP_CHECKSIG: 1 byte\n        - OP_ELSE: 1 byte\n        - OP_DATA: 1 byte (remotepubkey length)\n        - remotepubkey: 33 bytes\n        - OP_SWAP: 1 byte\n        - OP_SIZE: 1 byte\n        - OP_DATA: 1 byte (32 length)\n        - 32: 1 byte\n        - OP_EQUAL: 1 byte\n        - OP_IF: 1 byte\n        - OP_HASH160: 1 byte\n\t\t- OP_DATA: 1 byte (RIPEMD160(payment_hash) length)\n\t\t- RIPEMD160(payment_hash): 20 bytes\n        - OP_EQUALVERIFY: 1 byte\n        - 2: 1 byte\n        - OP_SWAP: 1 byte\n\t\t- OP_DATA: 1 byte (localpubkey length)\n\t\t- localpubkey: 33 bytes\n        - 2: 1 byte\n        - OP_CHECKMULTISIG: 1 byte\n        - OP_ELSE: 1 byte\n        - OP_DROP: 1 byte\n\t\t- OP_DATA: 1 byte (cltv_expiry length)\n\t\t- cltv_expiry: 4 bytes\n        - OP_CHECKLOCKTIMEVERIFY: 1 byte\n        - OP_DROP: 1 byte\n        - OP_CHECKSIG: 1 byte\n        - OP_ENDIF: 1 byte\n        - OP_1: 1 byte (option_anchors)\n        - OP_CHECKSEQUENCEVERIFY: 1 byte (option_anchors)\n        - OP_DROP: 1 byte (option_anchors)\n        - OP_ENDIF: 1 byte\n\n    offered_htlc_script: 133 bytes (136 bytes with option_anchors)\n        - OP_DUP: 1 byte\n        - OP_HASH160: 1 byte\n        - OP_DATA: 1 byte (RIPEMD160(SHA256(revocationpubkey)) length)\n        - RIPEMD160(SHA256(revocationpubkey)): 20 bytes\n        - OP_EQUAL: 1 byte\n        - OP_IF: 1 byte\n        - OP_CHECKSIG: 1 byte\n        - OP_ELSE: 1 byte\n\t\t- OP_DATA: 1 byte (remotepubkey length)\n\t\t- remotepubkey: 33 bytes\n\t\t- OP_SWAP: 1 byte\n\t\t- OP_SIZE: 1 byte\n\t\t- OP_DATA: 1 byte (32 length)\n\t\t- 32: 1 byte\n\t\t- OP_EQUAL: 1 byte\n\t\t- OP_NOTIF: 1 byte\n\t\t- OP_DROP: 1 byte\n\t\t- 2: 1 byte\n\t\t- OP_SWAP: 1 byte\n\t\t- OP_DATA: 1 byte (localpubkey length)\n\t\t- localpubkey: 33 bytes\n\t\t- 2: 1 byte\n\t\t- OP_CHECKMULTISIG: 1 byte\n\t\t- OP_ELSE: 1 byte\n\t\t- OP_HASH160: 1 byte\n\t\t- OP_DATA: 1 byte (RIPEMD160(payment_hash) length)\n\t\t- RIPEMD160(payment_hash): 20 bytes\n\t\t- OP_EQUALVERIFY: 1 byte\n\t\t- OP_CHECKSIG: 1 byte\n\t\t- OP_ENDIF: 1 byte\n        - OP_1: 1 byte (option_anchors)\n        - OP_CHECKSEQUENCEVERIFY: 1 byte (option_anchors)\n        - OP_DROP: 1 byte (option_anchors)\n        - OP_ENDIF: 1 byte\n\n    timeout_witness: 285 bytes (288 bytes with option_anchors)\n\t\t- number_of_witness_elements: 1 byte\n\t\t- nil_length: 1 byte\n\t\t- sig_alice_length: 1 byte\n\t\t- sig_alice: 73 bytes\n\t\t- sig_bob_length: 1 byte\n\t\t- sig_bob: 73 bytes\n\t\t- nil_length: 1 byte\n\t\t- witness_script_length: 1 byte\n\t\t- witness_script (offered_htlc_script)\n\n    success_witness: 324 bytes (327 bytes with option_anchors)\n\t\t- number_of_witness_elements: 1 byte\n\t\t- nil_length: 1 byte\n\t\t- sig_alice_length: 1 byte\n\t\t- sig_alice: 73 bytes\n\t\t- sig_bob_length: 1 byte\n\t\t- sig_bob: 73 bytes\n\t\t- preimage_length: 1 byte\n\t\t- preimage: 32 bytes\n\t\t- witness_script_length: 1 byte\n\t\t- witness_script (accepted_htlc_script)\n\n    commitment_input: 41 bytes\n\t\t- previous_out_point: 36 bytes\n\t\t\t- hash: 32 bytes\n\t\t\t- index: 4 bytes\n\t\t- var_int: 1 byte (script_sig length)\n\t\t- script_sig: 0 bytes\n\t\t- witness (success_witness or timeout_witness)\n\t\t- sequence: 4 bytes\n\n    htlc_output: 43 bytes\n\t\t- value: 8 bytes\n\t\t- var_int: 1 byte (pk_script length)\n\t\t- pk_script (p2wsh): 34 bytes\n\n\thtlc_transaction:\n\t\t- version: 4 bytes\n\t\t- witness_header <---- part of the witness data\n\t\t- count_tx_in: 1 byte\n\t\t- tx_in: 41 bytes\n\t\t\tcommitment_input\n\t\t- count_tx_out: 1 byte\n\t\t- tx_out: 43\n\t\t\thtlc_output\n\t\t- lock_time: 4 bytes\n\nMultiplying non-witness data by 4 results in a weight of 376. Adding\nthe witness data for each case (285 or 288 + 2 for HTLC-timeout, 324 or 327 + 2 for\nHTLC-success) results in weights of:\n\n\t663 (HTLC-timeout) (666 with option_anchors))\n\t703 (HTLC-success) (706 with option_anchors))\n                - (really 702 and 705, but we use these numbers for historical reasons)\n\n# Appendix B: Funding Transaction Test Vectors\n\nIn the following:\n - It's assumed that *local* is the funder.\n - Private keys are displayed as 32 bytes plus a trailing 1 (Bitcoin's convention for \"compressed\" private keys, i.e. keys for which the public key is compressed).\n - Transaction signatures are all deterministic, using RFC6979 (using HMAC-SHA256). A valid signature MUST sign all inputs and outputs of the relevant transaction (i.e. MUST be created with a `SIGHASH_ALL` [signature hash](https://bitcoin.org/en/glossary/signature-hash)), unless explicitly stated otherwise. Note that clients MUST send the signature in compact encoding and not in Bitcoin-script format, thus the signature hash byte is not transmitted.\n\nThe input for the funding transaction was created using a test chain\nwith the following first two blocks; the second block contains a spendable\ncoinbase (note that such a P2PKH input is inadvisable, as detailed in [BOLT #2](02-peer-protocol.md#the-funding_created-message), but provides the simplest example):\n\n    Block 0 (genesis): 0100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4adae5494dffff7f20020000000101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000\n    Block 1: 0000002006226e46111a0b59caaf126043eb5bbf28c34f3a5e332a1fc7b2b73cf188910fadbb20ea41a8423ea937e76e8151636bf6093b70eaff942930d20576600521fdc30f9858ffff7f20000000000101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff03510101ffffffff0100f2052a010000001976a9143ca33c2e4446f4a305f23c80df8ad1afdcf652f988ac00000000\n    Block 1 coinbase transaction: 01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff03510101ffffffff0100f2052a010000001976a9143ca33c2e4446f4a305f23c80df8ad1afdcf652f988ac00000000\n    Block 1 coinbase privkey: 6bd078650fcee8444e4e09825227b801a1ca928debb750eb36e6d56124bb20e801\n    # privkey in base58: cRCH7YNcarfvaiY1GWUKQrRGmoezvfAiqHtdRvxe16shzbd7LDMz\n    # pubkey in base68: mm3aPLSv9fBrbS68JzurAMp4xGoddJ6pSf\n\nThe funding transaction is paid to the following pubkeys:\n\n    local_funding_pubkey: 023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb\n    remote_funding_pubkey: 030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c1\n    # funding witness script = 5221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae\n\nThe funding transaction has a single input and a change output (order\ndetermined by BIP69 in this case):\n\n    input txid: fd2105607605d2302994ffea703b09f66b6351816ee737a93e42a841ea20bbad\n    input index: 0\n    input satoshis: 5000000000\n    funding satoshis: 10000000\n    # funding witness script = 5221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae\n    # feerate_per_kw: 15000\n    change satoshis: 4989986080\n    funding output: 0\n\nThe resulting funding transaction is:\n\n    funding tx: 0200000001adbb20ea41a8423ea937e76e8151636bf6093b70eaff942930d20576600521fd000000006b48304502210090587b6201e166ad6af0227d3036a9454223d49a1f11839c1a362184340ef0240220577f7cd5cca78719405cbf1de7414ac027f0239ef6e214c90fcaab0454d84b3b012103535b32d5eb0a6ed0982a0479bbadc9868d9836f6ba94dd5a63be16d875069184ffffffff028096980000000000220020c015c4a6be010e21657068fc2e6a9d02b27ebe4d490a25846f7237f104d1a3cd20256d29010000001600143ca33c2e4446f4a305f23c80df8ad1afdcf652f900000000\n    # txid: 8984484a580b825b9972d7adb15050b3ab624ccd731946b3eeddb92f4e7ef6be\n\n# Appendix C: Commitment and HTLC Transaction Test Vectors\n\nIn the following:\n - *local* transactions are considered, which implies that all payments to *local* are delayed.\n - It's assumed that *local* is the opener.\n - Private keys are displayed as 32 bytes plus a trailing 1 (Bitcoin's convention for \"compressed\" private keys, i.e. keys for which the public key is compressed).\n - Transaction signatures are all deterministic, using RFC6979 (using HMAC-SHA256).\n\nTo start, common basic parameters for each test vector are defined: the\nHTLCs are not used for the first \"simple commitment tx with no HTLCs\" test,\nand HTLCs 5 and 6 are only used in the \"same amount and preimage\" test.\n\n    funding_tx_id: 8984484a580b825b9972d7adb15050b3ab624ccd731946b3eeddb92f4e7ef6be\n    funding_output_index: 0\n    funding_amount_satoshi: 10000000\n    commitment_number: 42\n    local_delay: 144\n    local_dust_limit_satoshi: 546\n    htlc 0 direction: remote->local\n    htlc 0 amount_msat: 1000000\n    htlc 0 expiry: 500\n    htlc 0 payment_preimage: 0000000000000000000000000000000000000000000000000000000000000000\n    htlc 1 direction: remote->local\n    htlc 1 amount_msat: 2000000\n    htlc 1 expiry: 501\n    htlc 1 payment_preimage: 0101010101010101010101010101010101010101010101010101010101010101\n    htlc 2 direction: local->remote\n    htlc 2 amount_msat: 2000000\n    htlc 2 expiry: 502\n    htlc 2 payment_preimage: 0202020202020202020202020202020202020202020202020202020202020202\n    htlc 3 direction: local->remote\n    htlc 3 amount_msat: 3000000\n    htlc 3 expiry: 503\n    htlc 3 payment_preimage: 0303030303030303030303030303030303030303030303030303030303030303\n    htlc 4 direction: remote->local\n    htlc 4 amount_msat: 4000000\n    htlc 4 expiry: 504\n    htlc 4 payment_preimage: 0404040404040404040404040404040404040404040404040404040404040404\n    htlc 5 direction: local->remote\n    htlc 5 amount_msat: 5000000\n    htlc 5 expiry: 506\n    htlc 5 payment_preimage: 0505050505050505050505050505050505050505050505050505050505050505\n    htlc 6 direction: local->remote\n    htlc 6 amount_msat: 5000001\n    htlc 6 expiry: 505\n    htlc 6 payment_preimage: 0505050505050505050505050505050505050505050505050505050505050505\n\n<!-- The test vector values are derived, as per Key Derivation, though it's not\n     required for this test. They're included here for completeness and\n\t in case someone wants to reproduce the test vectors themselves:\n\nINTERNAL: remote_funding_privkey: 1552dfba4f6cf29a62a0af13c8d6981d36d0ef8d61ba10fb0fe90da7634d7e1301\nINTERNAL: local_payment_basepoint_secret: 111111111111111111111111111111111111111111111111111111111111111101\nINTERNAL: remote_revocation_basepoint_secret: 222222222222222222222222222222222222222222222222222222222222222201\nINTERNAL: local_delayed_payment_basepoint_secret: 333333333333333333333333333333333333333333333333333333333333333301\nINTERNAL: remote_payment_basepoint_secret: 444444444444444444444444444444444444444444444444444444444444444401\nx_local_per_commitment_secret: 1f1e1d1c1b1a191817161514131211100f0e0d0c0b0a0908070605040302010001\n# From remote_revocation_basepoint_secret\nINTERNAL: remote_revocation_basepoint: 02466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f27\n# From local_delayed_payment_basepoint_secret\nINTERNAL: local_delayed_payment_basepoint: 023c72addb4fdf09af94f0c94d7fe92a386a7e70cf8a1d85916386bb2535c7b1b1\nINTERNAL: local_per_commitment_point: 025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486\nINTERNAL: remote_privkey: 8deba327a7cc6d638ab0eb025770400a6184afcba6713c210d8d10e199ff2fda01\n# From local_delayed_payment_basepoint_secret, local_per_commitment_point and local_delayed_payment_basepoint\nINTERNAL: local_delayed_privkey: adf3464ce9c2f230fd2582fda4c6965e4993ca5524e8c9580e3df0cf226981ad01\n-->\n\nHere are the points used to derive the obscuring factor for the commitment number:\n\n    local_payment_basepoint: 034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa\n    remote_payment_basepoint: 032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991\n    # obscured commitment number = 0x2bb038521914 ^ 42\n\nWe use the same values for the HTLC basepoints:\n\n    local_htlc_basepoint: 034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa\n    remote_htlc_basepoint: 032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991\n\nAnd, here are the keys needed to create the transactions:\n\n    local_funding_privkey: 30ff4956bbdd3222d44cc5e8a1261dab1e07957bdac5ae88fe3261ef321f374901\n    local_funding_pubkey: 023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb\n    remote_funding_pubkey: 030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c1\n    local_privkey: bb13b121cdc357cd2e608b0aea294afca36e2b34cf958e2e6451a2f27469449101\n    local_htlcpubkey: 030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e7\n    remote_htlcpubkey: 0394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b\n    local_delayedpubkey: 03fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c\n    local_revocation_pubkey: 0212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b19\n    # funding wscript = 5221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae\n\nAnd, here are the test vectors themselves:\n\n    name: simple commitment tx with no HTLCs\n    to_local_msat: 7000000000\n    to_remote_msat: 3000000000\n    local_feerate_per_kw: 15000\n    # base commitment transaction fee = 10860\n    # actual commitment transaction fee = 10860\n    # to_local amount 6989140 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n    # to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\n    remote_signature = 3045022100c3127b33dcc741dd6b05b1e63cbd1a9a7d816f37af9b6756fa2376b056f032370220408b96279808fe57eb7e463710804cdf4f108388bc5cf722d8c848d2c7f9f3b0\n    # local_signature = 30440220616210b2cc4d3afb601013c373bbd8aac54febd9f15400379a8cb65ce7deca60022034236c010991beb7ff770510561ae8dc885b8d38d1947248c38f2ae055647142\n    output commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8002c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e48454a56a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004730440220616210b2cc4d3afb601013c373bbd8aac54febd9f15400379a8cb65ce7deca60022034236c010991beb7ff770510561ae8dc885b8d38d1947248c38f2ae05564714201483045022100c3127b33dcc741dd6b05b1e63cbd1a9a7d816f37af9b6756fa2376b056f032370220408b96279808fe57eb7e463710804cdf4f108388bc5cf722d8c848d2c7f9f3b001475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\n    num_htlcs: 0\n\n    name: commitment tx with all five HTLCs untrimmed (minimum feerate)\n    to_local_msat: 6988000000\n    to_remote_msat: 3000000000\n    local_feerate_per_kw: 0\n    # base commitment transaction fee = 0\n    # actual commitment transaction fee = 0\n    # HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n    # HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n    # HTLC #0 received amount 1000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac6868\n    # HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n    # HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n    # to_local amount 6988000 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n    # to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\n    remote_signature = 3044022009b048187705a8cbc9ad73adbe5af148c3d012e1f067961486c822c7af08158c022006d66f3704cfab3eb2dc49dae24e4aa22a6910fc9b424007583204e3621af2e5\n    # local_signature = 304402206fc2d1f10ea59951eefac0b4b7c396a3c3d87b71ff0b019796ef4535beaf36f902201765b0181e514d04f4c8ad75659d7037be26cdb3f8bb6f78fe61decef484c3ea\n    output commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8007e80300000000000022002052bfef0479d7b293c27e0f1eb294bea154c63a3294ef092c19af51409bce0e2ad007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484e0a06a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402206fc2d1f10ea59951eefac0b4b7c396a3c3d87b71ff0b019796ef4535beaf36f902201765b0181e514d04f4c8ad75659d7037be26cdb3f8bb6f78fe61decef484c3ea01473044022009b048187705a8cbc9ad73adbe5af148c3d012e1f067961486c822c7af08158c022006d66f3704cfab3eb2dc49dae24e4aa22a6910fc9b424007583204e3621af2e501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\n    num_htlcs: 5\n    # signature for output #0 (htlc-success for htlc #0)\n    remote_htlc_signature = 3045022100d9e29616b8f3959f1d3d7f7ce893ffedcdc407717d0de8e37d808c91d3a7c50d022078c3033f6d00095c8720a4bc943c1b45727818c082e4e3ddbc6d3116435b624b\n    # local_htlc_signature = 30440220636de5682ef0c5b61f124ec74e8aa2461a69777521d6998295dcea36bc3338110220165285594b23c50b28b82df200234566628a27bcd17f7f14404bd865354eb3ce\n    htlc_success_tx (htlc #0): 02000000000101ab84ff284f162cfbfef241f853b47d4368d171f9e2a1445160cd591c4c7d882b00000000000000000001e8030000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100d9e29616b8f3959f1d3d7f7ce893ffedcdc407717d0de8e37d808c91d3a7c50d022078c3033f6d00095c8720a4bc943c1b45727818c082e4e3ddbc6d3116435b624b014730440220636de5682ef0c5b61f124ec74e8aa2461a69777521d6998295dcea36bc3338110220165285594b23c50b28b82df200234566628a27bcd17f7f14404bd865354eb3ce012000000000000000000000000000000000000000000000000000000000000000008a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac686800000000\n    # signature for output #1 (htlc-timeout for htlc #2)\n    remote_htlc_signature = 30440220649fe8b20e67e46cbb0d09b4acea87dbec001b39b08dee7bdd0b1f03922a8640022037c462dff79df501cecfdb12ea7f4de91f99230bb544726f6e04527b1f896004\n    # local_htlc_signature = 3045022100803159dee7935dba4a1d36a61055ce8fd62caa528573cc221ae288515405a252022029c59e7cffce374fe860100a4a63787e105c3cf5156d40b12dd53ff55ac8cf3f\n    htlc_timeout_tx (htlc #2): 02000000000101ab84ff284f162cfbfef241f853b47d4368d171f9e2a1445160cd591c4c7d882b01000000000000000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220649fe8b20e67e46cbb0d09b4acea87dbec001b39b08dee7bdd0b1f03922a8640022037c462dff79df501cecfdb12ea7f4de91f99230bb544726f6e04527b1f89600401483045022100803159dee7935dba4a1d36a61055ce8fd62caa528573cc221ae288515405a252022029c59e7cffce374fe860100a4a63787e105c3cf5156d40b12dd53ff55ac8cf3f01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n    # signature for output #2 (htlc-success for htlc #1)\n    remote_htlc_signature = 30440220770fc321e97a19f38985f2e7732dd9fe08d16a2efa4bcbc0429400a447faf49102204d40b417f3113e1b0944ae0986f517564ab4acd3d190503faf97a6e420d43352\n    # local_htlc_signature = 3045022100a437cc2ce77400ecde441b3398fea3c3ad8bdad8132be818227fe3c5b8345989022069d45e7fa0ae551ec37240845e2c561ceb2567eacf3076a6a43a502d05865faa\n    htlc_success_tx (htlc #1): 02000000000101ab84ff284f162cfbfef241f853b47d4368d171f9e2a1445160cd591c4c7d882b02000000000000000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220770fc321e97a19f38985f2e7732dd9fe08d16a2efa4bcbc0429400a447faf49102204d40b417f3113e1b0944ae0986f517564ab4acd3d190503faf97a6e420d4335201483045022100a437cc2ce77400ecde441b3398fea3c3ad8bdad8132be818227fe3c5b8345989022069d45e7fa0ae551ec37240845e2c561ceb2567eacf3076a6a43a502d05865faa012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n    # signature for output #3 (htlc-timeout for htlc #3)\n    remote_htlc_signature = 304402207bcbf4f60a9829b05d2dbab84ed593e0291836be715dc7db6b72a64caf646af802201e489a5a84f7c5cc130398b841d138d031a5137ac8f4c49c770a4959dc3c1363\n    # local_htlc_signature = 304402203121d9b9c055f354304b016a36662ee99e1110d9501cb271b087ddb6f382c2c80220549882f3f3b78d9c492de47543cb9a697cecc493174726146536c5954dac7487\n    htlc_timeout_tx (htlc #3): 02000000000101ab84ff284f162cfbfef241f853b47d4368d171f9e2a1445160cd591c4c7d882b03000000000000000001b80b0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402207bcbf4f60a9829b05d2dbab84ed593e0291836be715dc7db6b72a64caf646af802201e489a5a84f7c5cc130398b841d138d031a5137ac8f4c49c770a4959dc3c13630147304402203121d9b9c055f354304b016a36662ee99e1110d9501cb271b087ddb6f382c2c80220549882f3f3b78d9c492de47543cb9a697cecc493174726146536c5954dac748701008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n    # signature for output #4 (htlc-success for htlc #4)\n    remote_htlc_signature = 3044022076dca5cb81ba7e466e349b7128cdba216d4d01659e29b96025b9524aaf0d1899022060de85697b88b21c749702b7d2cfa7dfeaa1f472c8f1d7d9c23f2bf968464b87\n    # local_htlc_signature = 3045022100d9080f103cc92bac15ec42464a95f070c7fb6925014e673ee2ea1374d36a7f7502200c65294d22eb20d48564954d5afe04a385551919d8b2ddb4ae2459daaeee1d95\n    htlc_success_tx (htlc #4): 02000000000101ab84ff284f162cfbfef241f853b47d4368d171f9e2a1445160cd591c4c7d882b04000000000000000001a00f0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022076dca5cb81ba7e466e349b7128cdba216d4d01659e29b96025b9524aaf0d1899022060de85697b88b21c749702b7d2cfa7dfeaa1f472c8f1d7d9c23f2bf968464b8701483045022100d9080f103cc92bac15ec42464a95f070c7fb6925014e673ee2ea1374d36a7f7502200c65294d22eb20d48564954d5afe04a385551919d8b2ddb4ae2459daaeee1d95012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\n    name: commitment tx with seven outputs untrimmed (maximum feerate)\n    to_local_msat: 6988000000\n    to_remote_msat: 3000000000\n    local_feerate_per_kw: 647\n    # base commitment transaction fee = 1024\n    # actual commitment transaction fee = 1024\n    # HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n    # HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n    # HTLC #0 received amount 1000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac6868\n    # HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n    # HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n    # to_local amount 6986976 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n    # to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\n    remote_signature = 3045022100a135f9e8a5ed25f7277446c67956b00ce6f610ead2bdec2c2f686155b7814772022059f1f6e1a8b336a68efcc1af3fe4d422d4827332b5b067501b099c47b7b5b5ee\n    # local_signature = 30450221009ec15c687898bb4da8b3a833e5ab8bfc51ec6e9202aaa8e66611edfd4a85ed1102203d7183e45078b9735c93450bc3415d3e5a8c576141a711ec6ddcb4a893926bb7\n    output commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8007e80300000000000022002052bfef0479d7b293c27e0f1eb294bea154c63a3294ef092c19af51409bce0e2ad007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484e09c6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004830450221009ec15c687898bb4da8b3a833e5ab8bfc51ec6e9202aaa8e66611edfd4a85ed1102203d7183e45078b9735c93450bc3415d3e5a8c576141a711ec6ddcb4a893926bb701483045022100a135f9e8a5ed25f7277446c67956b00ce6f610ead2bdec2c2f686155b7814772022059f1f6e1a8b336a68efcc1af3fe4d422d4827332b5b067501b099c47b7b5b5ee01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\n    num_htlcs: 5\n    # signature for output #0 (htlc-success for htlc #0)\n    remote_htlc_signature = 30450221008437627f9ad84ac67052e2a414a4367b8556fd1f94d8b02590f89f50525cd33502205b9c21ff6e7fc864f2352746ad8ba59182510819acb644e25b8a12fc37bbf24f\n    # local_htlc_signature = 30440220344b0deb055230d01703e6c7acd45853c4af2328b49b5d8af4f88a060733406602202ea64f2a43d5751edfe75503cbc35a62e3141b5ed032fa03360faf4ca66f670b\n    htlc_success_tx (htlc #0): 020000000001012cfb3e4788c206881d38f2996b6cb2109b5935acb527d14bdaa7b908afa9b2fe0000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221008437627f9ad84ac67052e2a414a4367b8556fd1f94d8b02590f89f50525cd33502205b9c21ff6e7fc864f2352746ad8ba59182510819acb644e25b8a12fc37bbf24f014730440220344b0deb055230d01703e6c7acd45853c4af2328b49b5d8af4f88a060733406602202ea64f2a43d5751edfe75503cbc35a62e3141b5ed032fa03360faf4ca66f670b012000000000000000000000000000000000000000000000000000000000000000008a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac686800000000\n    # signature for output #1 (htlc-timeout for htlc #2)\n    remote_htlc_signature = 304402205a67f92bf6845cf2892b48d874ac1daf88a36495cf8a06f93d83180d930a6f75022031da1621d95c3f335cc06a3056cf960199dae600b7cf89088f65fc53cdbef28c\n    # local_htlc_signature = 30450221009e5e3822b0185c6799a95288c597b671d6cc69ab80f43740f00c6c3d0752bdda02206da947a74bd98f3175324dc56fdba86cc783703a120a6f0297537e60632f4c7f\n    htlc_timeout_tx (htlc #2): 020000000001012cfb3e4788c206881d38f2996b6cb2109b5935acb527d14bdaa7b908afa9b2fe0100000000000000000124060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402205a67f92bf6845cf2892b48d874ac1daf88a36495cf8a06f93d83180d930a6f75022031da1621d95c3f335cc06a3056cf960199dae600b7cf89088f65fc53cdbef28c014830450221009e5e3822b0185c6799a95288c597b671d6cc69ab80f43740f00c6c3d0752bdda02206da947a74bd98f3175324dc56fdba86cc783703a120a6f0297537e60632f4c7f01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n    # signature for output #2 (htlc-success for htlc #1)\n    remote_htlc_signature = 30440220437e21766054a3eef7f65690c5bcfa9920babbc5af92b819f772f6ea96df6c7402207173622024bd97328cfb26c6665e25c2f5d67c319443ccdc60c903217005d8c8\n    # local_htlc_signature = 3045022100fcfc47e36b712624677626cef3dc1d67f6583bd46926a6398fe6b00b0c9a37760220525788257b187fc775c6370d04eadf34d06f3650a63f8df851cee0ecb47a1673\n    htlc_success_tx (htlc #1): 020000000001012cfb3e4788c206881d38f2996b6cb2109b5935acb527d14bdaa7b908afa9b2fe020000000000000000010a060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220437e21766054a3eef7f65690c5bcfa9920babbc5af92b819f772f6ea96df6c7402207173622024bd97328cfb26c6665e25c2f5d67c319443ccdc60c903217005d8c801483045022100fcfc47e36b712624677626cef3dc1d67f6583bd46926a6398fe6b00b0c9a37760220525788257b187fc775c6370d04eadf34d06f3650a63f8df851cee0ecb47a1673012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n    # signature for output #3 (htlc-timeout for htlc #3)\n    remote_htlc_signature = 304402207436e10737e4df499fc051686d3e11a5bb2310e4d1f1e691d287cef66514791202207cb58e71a6b7a42dd001b7e3ae672ea4f71ea3e1cd412b742e9124abb0739c64\n    # local_htlc_signature = 3045022100e78211b8409afb7255ffe37337da87f38646f1faebbdd61bc1920d69e3ead67a02201a626305adfcd16bfb7e9340928d9b6305464eab4aa4c4a3af6646e9b9f69dee\n    htlc_timeout_tx (htlc #3): 020000000001012cfb3e4788c206881d38f2996b6cb2109b5935acb527d14bdaa7b908afa9b2fe030000000000000000010c0a0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402207436e10737e4df499fc051686d3e11a5bb2310e4d1f1e691d287cef66514791202207cb58e71a6b7a42dd001b7e3ae672ea4f71ea3e1cd412b742e9124abb0739c6401483045022100e78211b8409afb7255ffe37337da87f38646f1faebbdd61bc1920d69e3ead67a02201a626305adfcd16bfb7e9340928d9b6305464eab4aa4c4a3af6646e9b9f69dee01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n    # signature for output #4 (htlc-success for htlc #4)\n    remote_htlc_signature = 30450221009acd6a827a76bfee50806178dfe0495cd4e1d9c58279c194c7b01520fe68cb8d022024d439047c368883e570997a7d40f0b430cb5a742f507965e7d3063ae3feccca\n    # local_htlc_signature = 3044022048762cf546bbfe474f1536365ea7c416e3c0389d60558bc9412cb148fb6ab68202207215d7083b75c96ff9d2b08c59c34e287b66820f530b486a9aa4cdd9c347d5b9\n    htlc_success_tx (htlc #4): 020000000001012cfb3e4788c206881d38f2996b6cb2109b5935acb527d14bdaa7b908afa9b2fe04000000000000000001da0d0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221009acd6a827a76bfee50806178dfe0495cd4e1d9c58279c194c7b01520fe68cb8d022024d439047c368883e570997a7d40f0b430cb5a742f507965e7d3063ae3feccca01473044022048762cf546bbfe474f1536365ea7c416e3c0389d60558bc9412cb148fb6ab68202207215d7083b75c96ff9d2b08c59c34e287b66820f530b486a9aa4cdd9c347d5b9012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\n    name: commitment tx with six outputs untrimmed (minimum feerate)\n    to_local_msat: 6988000000\n    to_remote_msat: 3000000000\n    local_feerate_per_kw: 648\n    # base commitment transaction fee = 914\n    # actual commitment transaction fee = 1914\n    # HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n    # HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n    # HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n    # HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n    # to_local amount 6987086 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n    # to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\n    remote_signature = 304402203948f900a5506b8de36a4d8502f94f21dd84fd9c2314ab427d52feaa7a0a19f2022059b6a37a4adaa2c5419dc8aea63c6e2a2ec4c4bde46207f6dc1fcd22152fc6e5\n    # local_signature = 3045022100b15f72908ba3382a34ca5b32519240a22300cc6015b6f9418635fb41f3d01d8802207adb331b9ed1575383dca0f2355e86c173802feecf8298fbea53b9d4610583e9\n    output commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8006d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e4844e9d6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100b15f72908ba3382a34ca5b32519240a22300cc6015b6f9418635fb41f3d01d8802207adb331b9ed1575383dca0f2355e86c173802feecf8298fbea53b9d4610583e90147304402203948f900a5506b8de36a4d8502f94f21dd84fd9c2314ab427d52feaa7a0a19f2022059b6a37a4adaa2c5419dc8aea63c6e2a2ec4c4bde46207f6dc1fcd22152fc6e501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\n    num_htlcs: 4\n    # signature for output #0 (htlc-timeout for htlc #2)\n    remote_htlc_signature = 3045022100a031202f3be94678f0e998622ee95ebb6ada8da1e9a5110228b5e04a747351e4022010ca6a21e18314ed53cfaae3b1f51998552a61a468e596368829a50ce40110e0\n    # local_htlc_signature = 304502210097e1873b57267730154595187a34949d3744f52933070c74757005e61ce2112e02204ecfba2aa42d4f14bdf8bad4206bb97217b702e6c433e0e1b0ce6587e6d46ec6\n    htlc_timeout_tx (htlc #2): 020000000001010f44041fdfba175987cf4e6135ba2a154e3b7fb96483dc0ed5efc0678e5b6bf10000000000000000000123060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100a031202f3be94678f0e998622ee95ebb6ada8da1e9a5110228b5e04a747351e4022010ca6a21e18314ed53cfaae3b1f51998552a61a468e596368829a50ce40110e00148304502210097e1873b57267730154595187a34949d3744f52933070c74757005e61ce2112e02204ecfba2aa42d4f14bdf8bad4206bb97217b702e6c433e0e1b0ce6587e6d46ec601008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n    # signature for output #1 (htlc-success for htlc #1)\n    remote_htlc_signature = 304402202361012a634aee7835c5ecdd6413dcffa8f404b7e77364c792cff984e4ee71e90220715c5e90baa08daa45a7439b1ee4fa4843ed77b19c058240b69406606d384124\n    # local_htlc_signature = 3044022019de73b00f1d818fb388e83b2c8c31f6bce35ac624e215bc12f88f9dc33edf48022006ff814bb9f700ee6abc3294e146fac3efd4f13f0005236b41c0a946ee00c9ae\n    htlc_success_tx (htlc #1): 020000000001010f44041fdfba175987cf4e6135ba2a154e3b7fb96483dc0ed5efc0678e5b6bf10100000000000000000109060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402202361012a634aee7835c5ecdd6413dcffa8f404b7e77364c792cff984e4ee71e90220715c5e90baa08daa45a7439b1ee4fa4843ed77b19c058240b69406606d38412401473044022019de73b00f1d818fb388e83b2c8c31f6bce35ac624e215bc12f88f9dc33edf48022006ff814bb9f700ee6abc3294e146fac3efd4f13f0005236b41c0a946ee00c9ae012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n    # signature for output #2 (htlc-timeout for htlc #3)\n    remote_htlc_signature = 304402207e8e82cd71ed4febeb593732c260456836e97d81896153ecd2b3cf320ca6861702202dd4a30f68f98ced7cc56a36369ac1fdd978248c5ff4ed204fc00cc625532989\n    # local_htlc_signature = 3045022100bd0be6100c4fd8f102ec220e1b053e4c4e2ecca25615490150007b40d314dc3902201a1e0ea266965b43164d9e6576f58fa6726d42883dd1c3996d2925c2e2260796\n    htlc_timeout_tx (htlc #3): 020000000001010f44041fdfba175987cf4e6135ba2a154e3b7fb96483dc0ed5efc0678e5b6bf1020000000000000000010b0a0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402207e8e82cd71ed4febeb593732c260456836e97d81896153ecd2b3cf320ca6861702202dd4a30f68f98ced7cc56a36369ac1fdd978248c5ff4ed204fc00cc62553298901483045022100bd0be6100c4fd8f102ec220e1b053e4c4e2ecca25615490150007b40d314dc3902201a1e0ea266965b43164d9e6576f58fa6726d42883dd1c3996d2925c2e226079601008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n    # signature for output #3 (htlc-success for htlc #4)\n    remote_htlc_signature = 3044022024cd52e4198c8ae0e414a86d86b5a65ea7450f2eb4e783096736d93395eca5ce022078f0094745b45be4d4b2b04dd5978c9e66ba49109e5704403e84aaf5f387d6be\n    # local_htlc_signature = 3045022100bbfb9d0a946d420807c86e985d636cceb16e71c3694ed186316251a00cbd807202207773223f9a337e145f64673825be9b30d07ef1542c82188b264bedcf7cda78c6\n    htlc_success_tx (htlc #4): 020000000001010f44041fdfba175987cf4e6135ba2a154e3b7fb96483dc0ed5efc0678e5b6bf103000000000000000001d90d0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022024cd52e4198c8ae0e414a86d86b5a65ea7450f2eb4e783096736d93395eca5ce022078f0094745b45be4d4b2b04dd5978c9e66ba49109e5704403e84aaf5f387d6be01483045022100bbfb9d0a946d420807c86e985d636cceb16e71c3694ed186316251a00cbd807202207773223f9a337e145f64673825be9b30d07ef1542c82188b264bedcf7cda78c6012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\n    name: commitment tx with six outputs untrimmed (maximum feerate)\n    to_local_msat: 6988000000\n    to_remote_msat: 3000000000\n    local_feerate_per_kw: 2069\n    # base commitment transaction fee = 2921\n    # actual commitment transaction fee = 3921\n    # HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n    # HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n    # HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n    # HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n    # to_local amount 6985079 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n    # to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\n    remote_signature = 304502210090b96a2498ce0c0f2fadbec2aab278fed54c1a7838df793ec4d2c78d96ec096202204fdd439c50f90d483baa7b68feeef4bd33bc277695405447bcd0bfb2ca34d7bc\n    # local_signature = 3045022100ad9a9bbbb75d506ca3b716b336ee3cf975dd7834fcf129d7dd188146eb58a8b4022061a759ee417339f7fe2ea1e8deb83abb6a74db31a09b7648a932a639cda23e33\n    output commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8006d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2db80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e48477956a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100ad9a9bbbb75d506ca3b716b336ee3cf975dd7834fcf129d7dd188146eb58a8b4022061a759ee417339f7fe2ea1e8deb83abb6a74db31a09b7648a932a639cda23e330148304502210090b96a2498ce0c0f2fadbec2aab278fed54c1a7838df793ec4d2c78d96ec096202204fdd439c50f90d483baa7b68feeef4bd33bc277695405447bcd0bfb2ca34d7bc01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\n    num_htlcs: 4\n    # signature for output #0 (htlc-timeout for htlc #2)\n    remote_htlc_signature = 3045022100f33513ee38abf1c582876f921f8fddc06acff48e04515532a32d3938de938ffd02203aa308a2c1863b7d6fdf53159a1465bf2e115c13152546cc5d74483ceaa7f699\n    # local_htlc_signature = 3045022100a637902a5d4c9ba9e7c472a225337d5aac9e2e3f6744f76e237132e7619ba0400220035c60d784a031c0d9f6df66b7eab8726a5c25397399ee4aa960842059eb3f9d\n    htlc_timeout_tx (htlc #2): 02000000000101adbe717a63fb658add30ada1e6e12ed257637581898abe475c11d7bbcd65bd4d0000000000000000000175020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100f33513ee38abf1c582876f921f8fddc06acff48e04515532a32d3938de938ffd02203aa308a2c1863b7d6fdf53159a1465bf2e115c13152546cc5d74483ceaa7f69901483045022100a637902a5d4c9ba9e7c472a225337d5aac9e2e3f6744f76e237132e7619ba0400220035c60d784a031c0d9f6df66b7eab8726a5c25397399ee4aa960842059eb3f9d01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n    # signature for output #1 (htlc-success for htlc #1)\n    remote_htlc_signature = 3045022100ce07682cf4b90093c22dc2d9ab2a77ad6803526b655ef857221cc96af5c9e0bf02200f501cee22e7a268af40b555d15a8237c9f36ad67ef1841daf9f6a0267b1e6df\n    # local_htlc_signature = 3045022100e57e46234f8782d3ff7aa593b4f7446fb5316c842e693dc63ee324fd49f6a1c302204a2f7b44c48bd26e1554422afae13153eb94b29d3687b733d18930615fb2db61\n    htlc_success_tx (htlc #1): 02000000000101adbe717a63fb658add30ada1e6e12ed257637581898abe475c11d7bbcd65bd4d0100000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100ce07682cf4b90093c22dc2d9ab2a77ad6803526b655ef857221cc96af5c9e0bf02200f501cee22e7a268af40b555d15a8237c9f36ad67ef1841daf9f6a0267b1e6df01483045022100e57e46234f8782d3ff7aa593b4f7446fb5316c842e693dc63ee324fd49f6a1c302204a2f7b44c48bd26e1554422afae13153eb94b29d3687b733d18930615fb2db61012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n    # signature for output #2 (htlc-timeout for htlc #3)\n    remote_htlc_signature = 3045022100e3e35492e55f82ec0bc2f317ffd7a486d1f7024330fe9743c3559fc39f32ef0c02203d1d4db651fc388a91d5ad8ecdd8e83673063bc8eefe27cfd8c189090e3a23e0\n    # local_htlc_signature = 3044022068613fb1b98eb3aec7f44c5b115b12343c2f066c4277c82b5f873dfe68f37f50022028109b4650f3f528ca4bfe9a467aff2e3e43893b61b5159157119d5d95cf1c18\n    htlc_timeout_tx (htlc #3): 02000000000101adbe717a63fb658add30ada1e6e12ed257637581898abe475c11d7bbcd65bd4d020000000000000000015d060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e3e35492e55f82ec0bc2f317ffd7a486d1f7024330fe9743c3559fc39f32ef0c02203d1d4db651fc388a91d5ad8ecdd8e83673063bc8eefe27cfd8c189090e3a23e001473044022068613fb1b98eb3aec7f44c5b115b12343c2f066c4277c82b5f873dfe68f37f50022028109b4650f3f528ca4bfe9a467aff2e3e43893b61b5159157119d5d95cf1c1801008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n    # signature for output #3 (htlc-success for htlc #4)\n    remote_htlc_signature = 304402207475aeb0212ef9bf5130b60937817ad88c9a87976988ef1f323f026148cc4a850220739fea17ad3257dcad72e509c73eebe86bee30b178467b9fdab213d631b109df\n    # local_htlc_signature = 3045022100d315522e09e7d53d2a659a79cb67fef56d6c4bddf3f46df6772d0d20a7beb7c8022070bcc17e288607b6a72be0bd83368bb6d53488db266c1cdb4d72214e4f02ac33\n    htlc_success_tx (htlc #4): 02000000000101adbe717a63fb658add30ada1e6e12ed257637581898abe475c11d7bbcd65bd4d03000000000000000001f2090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402207475aeb0212ef9bf5130b60937817ad88c9a87976988ef1f323f026148cc4a850220739fea17ad3257dcad72e509c73eebe86bee30b178467b9fdab213d631b109df01483045022100d315522e09e7d53d2a659a79cb67fef56d6c4bddf3f46df6772d0d20a7beb7c8022070bcc17e288607b6a72be0bd83368bb6d53488db266c1cdb4d72214e4f02ac33012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\n    name: commitment tx with five outputs untrimmed (minimum feerate)\n    to_local_msat: 6988000000\n    to_remote_msat: 3000000000\n    local_feerate_per_kw: 2070\n    # base commitment transaction fee = 2566\n    # actual commitment transaction fee = 5566\n    # HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n    # HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n    # HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n    # to_local amount 6985434 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n    # to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\n    remote_signature = 304402204ca1ba260dee913d318271d86e10ca0f5883026fb5653155cff600fb40895223022037b145204b7054a40e08bb1fefbd826f827b40838d3e501423bcc57924bcb50c\n    # local_signature = 3044022001014419b5ba00e083ac4e0a85f19afc848aacac2d483b4b525d15e2ae5adbfe022015ebddad6ee1e72b47cb09f3e78459da5be01ccccd95dceca0e056a00cc773c1\n    output commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8005d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484da966a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400473044022001014419b5ba00e083ac4e0a85f19afc848aacac2d483b4b525d15e2ae5adbfe022015ebddad6ee1e72b47cb09f3e78459da5be01ccccd95dceca0e056a00cc773c10147304402204ca1ba260dee913d318271d86e10ca0f5883026fb5653155cff600fb40895223022037b145204b7054a40e08bb1fefbd826f827b40838d3e501423bcc57924bcb50c01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\n    num_htlcs: 3\n    # signature for output #0 (htlc-timeout for htlc #2)\n    remote_htlc_signature = 304402205f6b6d12d8d2529fb24f4445630566cf4abbd0f9330ab6c2bdb94222d6a2a0c502202f556258ae6f05b193749e4c541dfcc13b525a5422f6291f073f15617ba8579b\n    # local_htlc_signature = 30440220150b11069454da70caf2492ded9e0065c9a57f25ac2a4c52657b1d15b6c6ed85022068a38833b603c8892717206383611bad210f1cbb4b1f87ea29c6c65b9e1cb3e5\n    htlc_timeout_tx (htlc #2): 02000000000101403ad7602b43293497a3a2235a12ecefda4f3a1f1d06e49b1786d945685de1ff0000000000000000000174020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402205f6b6d12d8d2529fb24f4445630566cf4abbd0f9330ab6c2bdb94222d6a2a0c502202f556258ae6f05b193749e4c541dfcc13b525a5422f6291f073f15617ba8579b014730440220150b11069454da70caf2492ded9e0065c9a57f25ac2a4c52657b1d15b6c6ed85022068a38833b603c8892717206383611bad210f1cbb4b1f87ea29c6c65b9e1cb3e501008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n    # signature for output #1 (htlc-timeout for htlc #3)\n    remote_htlc_signature = 3045022100f960dfb1c9aee7ce1437efa65b523e399383e8149790e05d8fed27ff6e42fe0002202fe8613e062ffe0b0c518cc4101fba1c6de70f64a5bcc7ae663f2efae43b8546\n    # local_htlc_signature = 30450221009a6ed18e6873bc3644332a6ee21c152a5b102821865350df7a8c74451a51f9f2022050d801fb4895d7d7fbf452824c0168347f5c0cbe821cf6a97a63af5b8b2563c6\n    htlc_timeout_tx (htlc #3): 02000000000101403ad7602b43293497a3a2235a12ecefda4f3a1f1d06e49b1786d945685de1ff010000000000000000015c060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100f960dfb1c9aee7ce1437efa65b523e399383e8149790e05d8fed27ff6e42fe0002202fe8613e062ffe0b0c518cc4101fba1c6de70f64a5bcc7ae663f2efae43b8546014830450221009a6ed18e6873bc3644332a6ee21c152a5b102821865350df7a8c74451a51f9f2022050d801fb4895d7d7fbf452824c0168347f5c0cbe821cf6a97a63af5b8b2563c601008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n    # signature for output #2 (htlc-success for htlc #4)\n    remote_htlc_signature = 3045022100ae5fc7717ae684bc1fcf9020854e5dbe9842c9e7472879ac06ff95ac2bb10e4e022057728ada4c00083a3e65493fb5d50a232165948a1a0f530ef63185c2c8c56504\n    # local_htlc_signature = 30440220408ad3009827a8fccf774cb285587686bfb2ed041f89a89453c311ce9c8ee0f902203c7392d9f8306d3a46522a66bd2723a7eb2628cb2d9b34d4c104f1766bf37502\n    htlc_success_tx (htlc #4): 02000000000101403ad7602b43293497a3a2235a12ecefda4f3a1f1d06e49b1786d945685de1ff02000000000000000001f1090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100ae5fc7717ae684bc1fcf9020854e5dbe9842c9e7472879ac06ff95ac2bb10e4e022057728ada4c00083a3e65493fb5d50a232165948a1a0f530ef63185c2c8c56504014730440220408ad3009827a8fccf774cb285587686bfb2ed041f89a89453c311ce9c8ee0f902203c7392d9f8306d3a46522a66bd2723a7eb2628cb2d9b34d4c104f1766bf37502012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\n    name: commitment tx with five outputs untrimmed (maximum feerate)\n    to_local_msat: 6988000000\n    to_remote_msat: 3000000000\n    local_feerate_per_kw: 2194\n    # base commitment transaction fee = 2720\n    # actual commitment transaction fee = 5720\n    # HTLC #2 offered amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868\n    # HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n    # HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n    # to_local amount 6985280 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n    # to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\n    remote_signature = 304402204bb3d6e279d71d9da414c82de42f1f954267c762b2e2eb8b76bc3be4ea07d4b0022014febc009c5edc8c3fc5d94015de163200f780046f1c293bfed8568f08b70fb3\n    # local_signature = 3044022072c2e2b1c899b2242656a537dde2892fa3801be0d6df0a87836c550137acde8302201654aa1974d37a829083c3ba15088689f30b56d6a4f6cb14c7bad0ee3116d398\n    output commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8005d007000000000000220020403d394747cae42e98ff01734ad5c08f82ba123d3d9a620abda88989651e2ab5b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e48440966a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400473044022072c2e2b1c899b2242656a537dde2892fa3801be0d6df0a87836c550137acde8302201654aa1974d37a829083c3ba15088689f30b56d6a4f6cb14c7bad0ee3116d3980147304402204bb3d6e279d71d9da414c82de42f1f954267c762b2e2eb8b76bc3be4ea07d4b0022014febc009c5edc8c3fc5d94015de163200f780046f1c293bfed8568f08b70fb301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\n    num_htlcs: 3\n    # signature for output #0 (htlc-timeout for htlc #2)\n    remote_htlc_signature = 3045022100939726680351a7856c1bc386d4a1f422c7d29bd7b56afc139570f508474e6c40022023175a799ccf44c017fbaadb924c40b2a12115a5b7d0dfd3228df803a2de8450\n    # local_htlc_signature = 304502210099c98c2edeeee6ec0fb5f3bea8b79bb016a2717afa9b5072370f34382de281d302206f5e2980a995e045cf90a547f0752a7ee99d48547bc135258fe7bc07e0154301\n    htlc_timeout_tx (htlc #2): 02000000000101153cd825fdb3aa624bfe513e8031d5d08c5e582fb3d1d1fe8faf27d3eed410cd0000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100939726680351a7856c1bc386d4a1f422c7d29bd7b56afc139570f508474e6c40022023175a799ccf44c017fbaadb924c40b2a12115a5b7d0dfd3228df803a2de84500148304502210099c98c2edeeee6ec0fb5f3bea8b79bb016a2717afa9b5072370f34382de281d302206f5e2980a995e045cf90a547f0752a7ee99d48547bc135258fe7bc07e015430101008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868f6010000\n    # signature for output #1 (htlc-timeout for htlc #3)\n    remote_htlc_signature = 3044022021bb883bf324553d085ba2e821cad80c28ef8b303dbead8f98e548783c02d1600220638f9ef2a9bba25869afc923f4b5dc38be3bb459f9efa5d869392d5f7779a4a0\n    # local_htlc_signature = 3045022100fd85bd7697b89c08ec12acc8ba89b23090637d83abd26ca37e01ae93e67c367302202b551fe69386116c47f984aab9c8dfd25d864dcde5d3389cfbef2447a85c4b77\n    htlc_timeout_tx (htlc #3): 02000000000101153cd825fdb3aa624bfe513e8031d5d08c5e582fb3d1d1fe8faf27d3eed410cd010000000000000000010a060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022021bb883bf324553d085ba2e821cad80c28ef8b303dbead8f98e548783c02d1600220638f9ef2a9bba25869afc923f4b5dc38be3bb459f9efa5d869392d5f7779a4a001483045022100fd85bd7697b89c08ec12acc8ba89b23090637d83abd26ca37e01ae93e67c367302202b551fe69386116c47f984aab9c8dfd25d864dcde5d3389cfbef2447a85c4b7701008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n    # signature for output #2 (htlc-success for htlc #4)\n    remote_htlc_signature = 3045022100c9e6f0454aa598b905a35e641a70cc9f67b5f38cc4b00843a041238c4a9f1c4a0220260a2822a62da97e44583e837245995ca2e36781769c52f19e498efbdcca262b\n    # local_htlc_signature = 30450221008a9f2ea24cd455c2b64c1472a5fa83865b0a5f49a62b661801e884cf2849af8302204d44180e50bf6adfcf1c1e581d75af91aba4e28681ce4a5ee5f3cbf65eca10f3\n    htlc_success_tx (htlc #4): 02000000000101153cd825fdb3aa624bfe513e8031d5d08c5e582fb3d1d1fe8faf27d3eed410cd020000000000000000019a090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100c9e6f0454aa598b905a35e641a70cc9f67b5f38cc4b00843a041238c4a9f1c4a0220260a2822a62da97e44583e837245995ca2e36781769c52f19e498efbdcca262b014830450221008a9f2ea24cd455c2b64c1472a5fa83865b0a5f49a62b661801e884cf2849af8302204d44180e50bf6adfcf1c1e581d75af91aba4e28681ce4a5ee5f3cbf65eca10f3012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\n    name: commitment tx with four outputs untrimmed (minimum feerate)\n    to_local_msat: 6988000000\n    to_remote_msat: 3000000000\n    local_feerate_per_kw: 2195\n    # base commitment transaction fee = 2344\n    # actual commitment transaction fee = 7344\n    # HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n    # HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n    # to_local amount 6985656 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n    # to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\n    remote_signature = 304402201a8c1b1f9671cd9e46c7323a104d7047cc48d3ee80d40d4512e0c72b8dc65666022066d7f9a2ce18c9eb22d2739ffcce05721c767f9b607622a31b6ea5793ddce403\n    # local_signature = 3044022044d592025b610c0d678f65032e87035cdfe89d1598c522cc32524ae8172417c30220749fef9d5b2ae8cdd91ece442ba8809bc891efedae2291e578475f97715d1767\n    output commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8004b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484b8976a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400473044022044d592025b610c0d678f65032e87035cdfe89d1598c522cc32524ae8172417c30220749fef9d5b2ae8cdd91ece442ba8809bc891efedae2291e578475f97715d17670147304402201a8c1b1f9671cd9e46c7323a104d7047cc48d3ee80d40d4512e0c72b8dc65666022066d7f9a2ce18c9eb22d2739ffcce05721c767f9b607622a31b6ea5793ddce40301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\n    num_htlcs: 2\n    # signature for output #0 (htlc-timeout for htlc #3)\n    remote_htlc_signature = 3045022100e57b845066a06ee7c2cbfc29eabffe52daa9bf6f6de760066d04df9f9b250e0002202ffb197f0e6e0a77a75a9aff27014bd3de83b7f748d7efef986abe655e1dd50e\n    # local_htlc_signature = 3045022100ecc8c6529d0b2316d046f0f0757c1e1c25a636db168ec4f3aa1b9278df685dc0022067ae6b65e936f1337091f7b18a15935b608c5f2cdddb2f892ed0babfdd376d76\n    htlc_timeout_tx (htlc #3): 020000000001018130a10f09b13677ba2885a8bca32860f3a952e5912b829a473639b5a2c07b900000000000000000000109060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e57b845066a06ee7c2cbfc29eabffe52daa9bf6f6de760066d04df9f9b250e0002202ffb197f0e6e0a77a75a9aff27014bd3de83b7f748d7efef986abe655e1dd50e01483045022100ecc8c6529d0b2316d046f0f0757c1e1c25a636db168ec4f3aa1b9278df685dc0022067ae6b65e936f1337091f7b18a15935b608c5f2cdddb2f892ed0babfdd376d7601008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n    # signature for output #1 (htlc-success for htlc #4)\n    remote_htlc_signature = 3045022100d193b7ecccad8057571620a0b1ffa6c48e9483311723b59cf536043b20bc51550220546d4bd37b3b101ecda14f6c907af46ec391abce1cd9c7ce22b1a62b534f2f2a\n    # local_htlc_signature = 3044022014d66f11f9cacf923807eba49542076c5fe5cccf252fb08fe98c78ef3ca6ab5402201b290dbe043cc512d9d78de074a5a129b8759bc6a6c546b190d120b690bd6e82\n    htlc_success_tx (htlc #4): 020000000001018130a10f09b13677ba2885a8bca32860f3a952e5912b829a473639b5a2c07b900100000000000000000199090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100d193b7ecccad8057571620a0b1ffa6c48e9483311723b59cf536043b20bc51550220546d4bd37b3b101ecda14f6c907af46ec391abce1cd9c7ce22b1a62b534f2f2a01473044022014d66f11f9cacf923807eba49542076c5fe5cccf252fb08fe98c78ef3ca6ab5402201b290dbe043cc512d9d78de074a5a129b8759bc6a6c546b190d120b690bd6e82012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\n    name: commitment tx with four outputs untrimmed (maximum feerate)\n    to_local_msat: 6988000000\n    to_remote_msat: 3000000000\n    local_feerate_per_kw: 3702\n    # base commitment transaction fee = 3953\n    # actual commitment transaction fee = 8953\n    # HTLC #3 offered amount 3000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868\n    # HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n    # to_local amount 6984047 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n    # to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\n    remote_signature = 304502210092a587aeb777f869e7ff0d7898ea619ee26a3dacd1f3672b945eea600be431100220077ee9eae3528d15251f2a52b607b189820e57a6ccfac8d1af502b132ee40169\n    # local_signature = 3045022100e5efb73c32d32da2d79702299b6317de6fb24a60476e3855926d78484dd1b3c802203557cb66a42c944ef06e00bcc4da35a5bcb2f185aab0f8e403e519e1d66aaf75\n    output commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8004b80b000000000000220020c20b5d1f8584fd90443e7b7b720136174fa4b9333c261d04dbbd012635c0f419a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e4846f916a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100e5efb73c32d32da2d79702299b6317de6fb24a60476e3855926d78484dd1b3c802203557cb66a42c944ef06e00bcc4da35a5bcb2f185aab0f8e403e519e1d66aaf750148304502210092a587aeb777f869e7ff0d7898ea619ee26a3dacd1f3672b945eea600be431100220077ee9eae3528d15251f2a52b607b189820e57a6ccfac8d1af502b132ee4016901475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\n    num_htlcs: 2\n    # signature for output #0 (htlc-timeout for htlc #3)\n    remote_htlc_signature = 304402206fa54c11f98c3bae1e93df43fc7affeb05b476bf8060c03e29c377c69bc08e8b0220672701cce50d5c379ff45a5d2cfe48ac44973adb066ac32608e21221d869bb89\n    # local_htlc_signature = 304402206e36c683ebf2cb16bcef3d5439cf8b53cd97280a365ed8acd7abb85a8ba5f21c02206e8621edfc2a5766cbc96eb67fd501127ff163eb6b85518a39f7d4974aef126f\n    htlc_timeout_tx (htlc #3): 020000000001018db483bff65c70ee71d8282aeec5a880e2e2b39e45772bda5460403095c62e3f0000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402206fa54c11f98c3bae1e93df43fc7affeb05b476bf8060c03e29c377c69bc08e8b0220672701cce50d5c379ff45a5d2cfe48ac44973adb066ac32608e21221d869bb890147304402206e36c683ebf2cb16bcef3d5439cf8b53cd97280a365ed8acd7abb85a8ba5f21c02206e8621edfc2a5766cbc96eb67fd501127ff163eb6b85518a39f7d4974aef126f01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868f7010000\n    # signature for output #1 (htlc-success for htlc #4)\n    remote_htlc_signature = 3044022057649739b0eb74d541ead0dfdb3d4b2c15aa192720031044c3434c67812e5ca902201e5ede42d960ae551707f4a6b34b09393cf4dee2418507daa022e3550dbb5817\n    # local_htlc_signature = 304402207faad26678c8850e01b4a0696d60841f7305e1832b786110ee9075cb92ed14a30220516ef8ee5dfa80824ea28cbcec0dd95f8b847146257c16960db98507db15ffdc\n    htlc_success_tx (htlc #4): 020000000001018db483bff65c70ee71d8282aeec5a880e2e2b39e45772bda5460403095c62e3f0100000000000000000176050000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022057649739b0eb74d541ead0dfdb3d4b2c15aa192720031044c3434c67812e5ca902201e5ede42d960ae551707f4a6b34b09393cf4dee2418507daa022e3550dbb58170147304402207faad26678c8850e01b4a0696d60841f7305e1832b786110ee9075cb92ed14a30220516ef8ee5dfa80824ea28cbcec0dd95f8b847146257c16960db98507db15ffdc012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\n    name: commitment tx with three outputs untrimmed (minimum feerate)\n    to_local_msat: 6988000000\n    to_remote_msat: 3000000000\n    local_feerate_per_kw: 3703\n    # base commitment transaction fee = 3317\n    # actual commitment transaction fee = 11317\n    # HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n    # to_local amount 6984683 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n    # to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\n    remote_signature = 3045022100b495d239772a237ff2cf354b1b11be152fd852704cb184e7356d13f2fb1e5e430220723db5cdb9cbd6ead7bfd3deb419cf41053a932418cbb22a67b581f40bc1f13e\n    # local_signature = 304402201b736d1773a124c745586217a75bed5f66c05716fbe8c7db4fdb3c3069741cdd02205083f39c321c1bcadfc8d97e3c791a66273d936abac0c6a2fde2ed46019508e1\n    output commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8003a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484eb936a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402201b736d1773a124c745586217a75bed5f66c05716fbe8c7db4fdb3c3069741cdd02205083f39c321c1bcadfc8d97e3c791a66273d936abac0c6a2fde2ed46019508e101483045022100b495d239772a237ff2cf354b1b11be152fd852704cb184e7356d13f2fb1e5e430220723db5cdb9cbd6ead7bfd3deb419cf41053a932418cbb22a67b581f40bc1f13e01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\n    num_htlcs: 1\n    # signature for output #0 (htlc-success for htlc #4)\n    remote_htlc_signature = 3045022100c34c61735f93f2e324cc873c3b248111ccf8f6db15d5969583757010d4ad2b4602207867bb919b2ddd6387873e425345c9b7fd18d1d66aba41f3607bc2896ef3c30a\n    # local_htlc_signature = 3045022100988c143e2110067117d2321bdd4bd16ca1734c98b29290d129384af0962b634e02206c1b02478878c5f547018b833986578f90c3e9be669fe5788ad0072a55acbb05\n    htlc_success_tx (htlc #4): 0200000000010120060e4a29579d429f0f27c17ee5f1ee282f20d706d6f90b63d35946d8f3029a0000000000000000000175050000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100c34c61735f93f2e324cc873c3b248111ccf8f6db15d5969583757010d4ad2b4602207867bb919b2ddd6387873e425345c9b7fd18d1d66aba41f3607bc2896ef3c30a01483045022100988c143e2110067117d2321bdd4bd16ca1734c98b29290d129384af0962b634e02206c1b02478878c5f547018b833986578f90c3e9be669fe5788ad0072a55acbb05012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\n    name: commitment tx with three outputs untrimmed (maximum feerate)\n    to_local_msat: 6988000000\n    to_remote_msat: 3000000000\n    local_feerate_per_kw: 4914\n    # base commitment transaction fee = 4402\n    # actual commitment transaction fee = 12402\n    # HTLC #4 received amount 4000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868\n    # to_local amount 6983598 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n    # to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\n    remote_signature = 3045022100b4b16d5f8cc9fc4c1aff48831e832a0d8990e133978a66e302c133550954a44d022073573ce127e2200d316f6b612803a5c0c97b8d20e1e44dbe2ac0dd2fb8c95244\n    # local_signature = 3045022100d72638bc6308b88bb6d45861aae83e5b9ff6e10986546e13bce769c70036e2620220320be7c6d66d22f30b9fcd52af66531505b1310ca3b848c19285b38d8a1a8c19\n    output commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8003a00f0000000000002200208c48d15160397c9731df9bc3b236656efb6665fbfe92b4a6878e88a499f741c4c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484ae8f6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100d72638bc6308b88bb6d45861aae83e5b9ff6e10986546e13bce769c70036e2620220320be7c6d66d22f30b9fcd52af66531505b1310ca3b848c19285b38d8a1a8c1901483045022100b4b16d5f8cc9fc4c1aff48831e832a0d8990e133978a66e302c133550954a44d022073573ce127e2200d316f6b612803a5c0c97b8d20e1e44dbe2ac0dd2fb8c9524401475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\n    num_htlcs: 1\n    # signature for output #0 (htlc-success for htlc #4)\n    remote_htlc_signature = 3045022100f43591c156038ba217756006bb3c55f7d113a325cdd7d9303c82115372858d68022016355b5aadf222bc8d12e426c75f4a03423917b2443a103eb2a498a3a2234374\n    # local_htlc_signature = 30440220585dee80fafa264beac535c3c0bb5838ac348b156fdc982f86adc08dfc9bfd250220130abb82f9f295cc9ef423dcfef772fde2acd85d9df48cc538981d26a10a9c10\n    htlc_success_tx (htlc #4): 02000000000101a9172908eace869cc35128c31fc2ab502f72e4dff31aab23e0244c4b04b11ab00000000000000000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100f43591c156038ba217756006bb3c55f7d113a325cdd7d9303c82115372858d68022016355b5aadf222bc8d12e426c75f4a03423917b2443a103eb2a498a3a2234374014730440220585dee80fafa264beac535c3c0bb5838ac348b156fdc982f86adc08dfc9bfd250220130abb82f9f295cc9ef423dcfef772fde2acd85d9df48cc538981d26a10a9c10012004040404040404040404040404040404040404040404040404040404040404048a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac686800000000\n\n    name: commitment tx with two outputs untrimmed (minimum feerate)\n    to_local_msat: 6988000000\n    to_remote_msat: 3000000000\n    local_feerate_per_kw: 4915\n    # base commitment transaction fee = 3558\n    # actual commitment transaction fee = 15558\n    # to_local amount 6984442 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n    # to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\n    remote_signature = 304402203a286936e74870ca1459c700c71202af0381910a6bfab687ef494ef1bc3e02c902202506c362d0e3bee15e802aa729bf378e051644648253513f1c085b264cc2a720\n    # local_signature = 30450221008a953551f4d67cb4df3037207fc082ddaf6be84d417b0bd14c80aab66f1b01a402207508796dc75034b2dee876fe01dc05a08b019f3e5d689ac8842ade2f1befccf5\n    output commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8002c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484fa926a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004830450221008a953551f4d67cb4df3037207fc082ddaf6be84d417b0bd14c80aab66f1b01a402207508796dc75034b2dee876fe01dc05a08b019f3e5d689ac8842ade2f1befccf50147304402203a286936e74870ca1459c700c71202af0381910a6bfab687ef494ef1bc3e02c902202506c362d0e3bee15e802aa729bf378e051644648253513f1c085b264cc2a72001475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\n    num_htlcs: 0\n\n    name: commitment tx with two outputs untrimmed (maximum feerate)\n    to_local_msat: 6988000000\n    to_remote_msat: 3000000000\n    local_feerate_per_kw: 9651180\n    # base commitment transaction fee = 6987454\n    # actual commitment transaction fee = 6999454\n    # to_local amount 546 wscript 63210212a140cd0c6539d07cd08dfe09984dec3251ea808b892efeac3ede9402bf2b1967029000b2752103fd5960528dc152014952efdb702a88f71e3c1653b2314431701ec77e57fde83c68ac\n    # to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\n    remote_signature = 304402200a8544eba1d216f5c5e530597665fa9bec56943c0f66d98fc3d028df52d84f7002201e45fa5c6bc3a506cc2553e7d1c0043a9811313fc39c954692c0d47cfce2bbd3\n    # local_signature = 3045022100e11b638c05c650c2f63a421d36ef8756c5ce82f2184278643520311cdf50aa200220259565fb9c8e4a87ccaf17f27a3b9ca4f20625754a0920d9c6c239d8156a11de\n    output commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b800222020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80ec0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e4840400483045022100e11b638c05c650c2f63a421d36ef8756c5ce82f2184278643520311cdf50aa200220259565fb9c8e4a87ccaf17f27a3b9ca4f20625754a0920d9c6c239d8156a11de0147304402200a8544eba1d216f5c5e530597665fa9bec56943c0f66d98fc3d028df52d84f7002201e45fa5c6bc3a506cc2553e7d1c0043a9811313fc39c954692c0d47cfce2bbd301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\n    num_htlcs: 0\n\n    name: commitment tx with one output untrimmed (minimum feerate)\n    to_local_msat: 6988000000\n    to_remote_msat: 3000000000\n    local_feerate_per_kw: 9651181\n    # base commitment transaction fee = 6987455\n    # actual commitment transaction fee = 7000000\n    # to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\n    remote_signature = 304402202ade0142008309eb376736575ad58d03e5b115499709c6db0b46e36ff394b492022037b63d78d66404d6504d4c4ac13be346f3d1802928a6d3ad95a6a944227161a2\n    # local_signature = 304402207e8d51e0c570a5868a78414f4e0cbfaed1106b171b9581542c30718ee4eb95ba02203af84194c97adf98898c9afe2f2ed4a7f8dba05a2dfab28ac9d9c604aa49a379\n    output commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8001c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484040047304402207e8d51e0c570a5868a78414f4e0cbfaed1106b171b9581542c30718ee4eb95ba02203af84194c97adf98898c9afe2f2ed4a7f8dba05a2dfab28ac9d9c604aa49a3790147304402202ade0142008309eb376736575ad58d03e5b115499709c6db0b46e36ff394b492022037b63d78d66404d6504d4c4ac13be346f3d1802928a6d3ad95a6a944227161a201475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\n    num_htlcs: 0\n\n    name: commitment tx with fee greater than funder amount\n    to_local_msat: 6988000000\n    to_remote_msat: 3000000000\n    local_feerate_per_kw: 9651936\n    # base commitment transaction fee = 6988001\n    # actual commitment transaction fee = 7000000\n    # to_remote amount 3000000 P2WPKH(032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991)\n    remote_signature = 304402202ade0142008309eb376736575ad58d03e5b115499709c6db0b46e36ff394b492022037b63d78d66404d6504d4c4ac13be346f3d1802928a6d3ad95a6a944227161a2\n    # local_signature = 304402207e8d51e0c570a5868a78414f4e0cbfaed1106b171b9581542c30718ee4eb95ba02203af84194c97adf98898c9afe2f2ed4a7f8dba05a2dfab28ac9d9c604aa49a379\n    output commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8001c0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484040047304402207e8d51e0c570a5868a78414f4e0cbfaed1106b171b9581542c30718ee4eb95ba02203af84194c97adf98898c9afe2f2ed4a7f8dba05a2dfab28ac9d9c604aa49a3790147304402202ade0142008309eb376736575ad58d03e5b115499709c6db0b46e36ff394b492022037b63d78d66404d6504d4c4ac13be346f3d1802928a6d3ad95a6a944227161a201475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\n    num_htlcs: 0\n\n    name: commitment tx with 3 htlc outputs, 2 offered having the same amount and preimage\n    to_local_msat: 6987999999\n    to_remote_msat: 3000000000\n    local_feerate_per_kw: 253\n    # HTLC #1 received amount 2000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868\n    # HTLC #5 offered amount 5000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868\n    # HTLC #6 offered amount 5000 wscript 76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868\n    # HTLC #5 and 6 have CLTV 506 and 505, respectively, and preimage 0505050505050505050505050505050505050505050505050505050505050505\n    remote_signature = 304402207d0870964530f97b62497b11153c551dca0a1e226815ef0a336651158da0f82402200f5378beee0e77759147b8a0a284decd11bfd2bc55c8fafa41c134fe996d43c8\n    # local_signature = 304402200d10bf5bc5397fc59d7188ae438d80c77575595a2d488e41bd6363a810cc8d72022012b57e714fbbfdf7a28c47d5b370cb8ac37c8545f596216e5b21e9b236ef457c\n    output commit_tx: 02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b8005d007000000000000220020748eba944fedc8827f6b06bc44678f93c0f9e6078b35c6331ed31e75f8ce0c2d8813000000000000220020305c12e1a0bc21e283c131cea1c66d68857d28b7b2fce0a6fbc40c164852121b8813000000000000220020305c12e1a0bc21e283c131cea1c66d68857d28b7b2fce0a6fbc40c164852121bc0c62d0000000000160014cc1b07838e387deacd0e5232e1e8b49f4c29e484a69f6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402200d10bf5bc5397fc59d7188ae438d80c77575595a2d488e41bd6363a810cc8d72022012b57e714fbbfdf7a28c47d5b370cb8ac37c8545f596216e5b21e9b236ef457c0147304402207d0870964530f97b62497b11153c551dca0a1e226815ef0a336651158da0f82402200f5378beee0e77759147b8a0a284decd11bfd2bc55c8fafa41c134fe996d43c801475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\n    num_htlcs: 3\n    # signature for output #0 (htlc-success for htlc #1)\n    remote_htlc_signature = 3045022100b470fe12e5b7fea9eccb8cbff1972cea4f96758041898982a02bcc7f9d56d50b0220338a75b2afaab4ec00cdd2d9273c68c7581ff5a28bcbb40c4d138b81f1d45ce5\n    # local_htlc_signature = 3044022017b90c65207522a907fb6a137f9dd528b3389465a8ae72308d9e1d564f512cf402204fc917b4f0e88604a3e994f85bfae7c7c1f9d9e9f78e8cd112e0889720d9405b\n    htlc_success_tx (htlc #1): 020000000001014bdccf28653066a2c554cafeffdfe1e678e64a69b056684deb0c4fba909423ec000000000000000000011f070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100b470fe12e5b7fea9eccb8cbff1972cea4f96758041898982a02bcc7f9d56d50b0220338a75b2afaab4ec00cdd2d9273c68c7581ff5a28bcbb40c4d138b81f1d45ce501473044022017b90c65207522a907fb6a137f9dd528b3389465a8ae72308d9e1d564f512cf402204fc917b4f0e88604a3e994f85bfae7c7c1f9d9e9f78e8cd112e0889720d9405b012001010101010101010101010101010101010101010101010101010101010101018a76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac686800000000\n    # signature for output #1 (htlc-timeout for htlc #6)\n    remote_htlc_signature = 3045022100b575379f6d8743cb0087648f81cfd82d17a97fbf8f67e058c65ce8b9d25df9500220554a210d65b02d9f36c6adf0f639430ca8293196ba5089bf67cc3a9813b7b00a\n    # local_htlc_signature = 3045022100ee2e16b90930a479b13f8823a7f14b600198c838161160b9436ed086d3fc57e002202a66fa2324f342a17129949c640bfe934cbc73a869ba7c06aa25c5a3d0bfb53d\n    htlc_timeout_tx (htlc #6): 020000000001014bdccf28653066a2c554cafeffdfe1e678e64a69b056684deb0c4fba909423ec01000000000000000001e1120000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100b575379f6d8743cb0087648f81cfd82d17a97fbf8f67e058c65ce8b9d25df9500220554a210d65b02d9f36c6adf0f639430ca8293196ba5089bf67cc3a9813b7b00a01483045022100ee2e16b90930a479b13f8823a7f14b600198c838161160b9436ed086d3fc57e002202a66fa2324f342a17129949c640bfe934cbc73a869ba7c06aa25c5a3d0bfb53d01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868f9010000\n    # signature for output #2 (htlc-timeout for htlc #5)\n    remote_htlc_signature = 30440220471c9f3ad92e49b13b7b8059f43ecf8f7887b0dccbb9fdb54bfe23d62a8ae332022024bd22fae0740e86a44228c35330da9526fd7306dffb2b9dc362d5e78abef7cc\n    # local_htlc_signature = 304402207157f452f2506d73c315192311893800cfb3cc235cc1185b1cfcc136b55230db022014be242dbc6c5da141fec4034e7f387f74d6ff1899453d72ba957467540e1ecb\n    htlc_timeout_tx (htlc #5): 020000000001014bdccf28653066a2c554cafeffdfe1e678e64a69b056684deb0c4fba909423ec02000000000000000001e1120000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220471c9f3ad92e49b13b7b8059f43ecf8f7887b0dccbb9fdb54bfe23d62a8ae332022024bd22fae0740e86a44228c35330da9526fd7306dffb2b9dc362d5e78abef7cc0147304402207157f452f2506d73c315192311893800cfb3cc235cc1185b1cfcc136b55230db022014be242dbc6c5da141fec4034e7f387f74d6ff1899453d72ba957467540e1ecb01008576a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6868fa010000\n\n# Appendix D: Per-commitment Secret Generation Test Vectors\n\nThese test the generation algorithm that all nodes use.\n\n## Generation Tests\n\n    name: generate_from_seed 0 final node\n\tseed: 0x0000000000000000000000000000000000000000000000000000000000000000\n\tI: 281474976710655\n\toutput: 0x02a40c85b6f28da08dfdbe0926c53fab2de6d28c10301f8f7c4073d5e42e3148\n\n\tname: generate_from_seed FF final node\n\tseed: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n\tI: 281474976710655\n\toutput: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\n\n\tname: generate_from_seed FF alternate bits 1\n\tseed: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n\tI: 0xaaaaaaaaaaa\n\toutput: 0x56f4008fb007ca9acf0e15b054d5c9fd12ee06cea347914ddbaed70d1c13a528\n\n\tname: generate_from_seed FF alternate bits 2\n\tseed: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n\tI: 0x555555555555\n\toutput: 0x9015daaeb06dba4ccc05b91b2f73bd54405f2be9f217fbacd3c5ac2e62327d31\n\n\tname: generate_from_seed 01 last nontrivial node\n\tseed: 0x0101010101010101010101010101010101010101010101010101010101010101\n\tI: 1\n\toutput: 0x915c75942a26bb3a433a8ce2cb0427c29ec6c1775cfc78328b57f6ba7bfeaa9c\n\n## Storage Tests\n\nThese test the optional compact storage system. In many cases, an\nincorrect entry cannot be determined until its parent is revealed: an entry is\nspecifically corrupted, along with all its children.\n\nFor\nthese tests a seed of `0xFFF...FF` is used, and incorrect entries are\nseeded with `0x000...00`.\n\n    name: insert_secret correct sequence\n\tI: 281474976710655\n\tsecret: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\n\toutput: OK\n\tI: 281474976710654\n\tsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\n\toutput: OK\n\tI: 281474976710653\n\tsecret: 0x2273e227a5b7449b6e70f1fb4652864038b1cbf9cd7c043a7d6456b7fc275ad8\n\toutput: OK\n\tI: 281474976710652\n\tsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\n\toutput: OK\n\tI: 281474976710651\n\tsecret: 0xc65716add7aa98ba7acb236352d665cab17345fe45b55fb879ff80e6bd0c41dd\n\toutput: OK\n\tI: 281474976710650\n\tsecret: 0x969660042a28f32d9be17344e09374b379962d03db1574df5a8a5a47e19ce3f2\n\toutput: OK\n\tI: 281474976710649\n\tsecret: 0xa5a64476122ca0925fb344bdc1854c1c0a59fc614298e50a33e331980a220f32\n\toutput: OK\n\tI: 281474976710648\n\tsecret: 0x05cde6323d949933f7f7b78776bcc1ea6d9b31447732e3802e1f7ac44b650e17\n\toutput: OK\n\n    name: insert_secret #1 incorrect\n\tI: 281474976710655\n\tsecret: 0x02a40c85b6f28da08dfdbe0926c53fab2de6d28c10301f8f7c4073d5e42e3148\n\toutput: OK\n\tI: 281474976710654\n\tsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\n\toutput: ERROR\n\n    name: insert_secret #2 incorrect (#1 derived from incorrect)\n\tI: 281474976710655\n\tsecret: 0x02a40c85b6f28da08dfdbe0926c53fab2de6d28c10301f8f7c4073d5e42e3148\n\toutput: OK\n\tI: 281474976710654\n\tsecret: 0xdddc3a8d14fddf2b68fa8c7fbad2748274937479dd0f8930d5ebb4ab6bd866a3\n\toutput: OK\n\tI: 281474976710653\n\tsecret: 0x2273e227a5b7449b6e70f1fb4652864038b1cbf9cd7c043a7d6456b7fc275ad8\n\toutput: OK\n\tI: 281474976710652\n\tsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\n\toutput: ERROR\n\n    name: insert_secret #3 incorrect\n\tI: 281474976710655\n\tsecret: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\n\toutput: OK\n\tI: 281474976710654\n\tsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\n\toutput: OK\n\tI: 281474976710653\n\tsecret: 0xc51a18b13e8527e579ec56365482c62f180b7d5760b46e9477dae59e87ed423a\n\toutput: OK\n\tI: 281474976710652\n\tsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\n\toutput: ERROR\n\n    name: insert_secret #4 incorrect (1,2,3 derived from incorrect)\n\tI: 281474976710655\n\tsecret: 0x02a40c85b6f28da08dfdbe0926c53fab2de6d28c10301f8f7c4073d5e42e3148\n\toutput: OK\n\tI: 281474976710654\n\tsecret: 0xdddc3a8d14fddf2b68fa8c7fbad2748274937479dd0f8930d5ebb4ab6bd866a3\n\toutput: OK\n\tI: 281474976710653\n\tsecret: 0xc51a18b13e8527e579ec56365482c62f180b7d5760b46e9477dae59e87ed423a\n\toutput: OK\n\tI: 281474976710652\n\tsecret: 0xba65d7b0ef55a3ba300d4e87af29868f394f8f138d78a7011669c79b37b936f4\n\toutput: OK\n\tI: 281474976710651\n\tsecret: 0xc65716add7aa98ba7acb236352d665cab17345fe45b55fb879ff80e6bd0c41dd\n\toutput: OK\n\tI: 281474976710650\n\tsecret: 0x969660042a28f32d9be17344e09374b379962d03db1574df5a8a5a47e19ce3f2\n\toutput: OK\n\tI: 281474976710649\n\tsecret: 0xa5a64476122ca0925fb344bdc1854c1c0a59fc614298e50a33e331980a220f32\n\toutput: OK\n\tI: 281474976710648\n\tsecret: 0x05cde6323d949933f7f7b78776bcc1ea6d9b31447732e3802e1f7ac44b650e17\n\toutput: ERROR\n\n    name: insert_secret #5 incorrect\n\tI: 281474976710655\n\tsecret: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\n\toutput: OK\n\tI: 281474976710654\n\tsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\n\toutput: OK\n\tI: 281474976710653\n\tsecret: 0x2273e227a5b7449b6e70f1fb4652864038b1cbf9cd7c043a7d6456b7fc275ad8\n\toutput: OK\n\tI: 281474976710652\n\tsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\n\toutput: OK\n\tI: 281474976710651\n\tsecret: 0x631373ad5f9ef654bb3dade742d09504c567edd24320d2fcd68e3cc47e2ff6a6\n\toutput: OK\n\tI: 281474976710650\n\tsecret: 0x969660042a28f32d9be17344e09374b379962d03db1574df5a8a5a47e19ce3f2\n\toutput: ERROR\n\n    name: insert_secret #6 incorrect (5 derived from incorrect)\n\tI: 281474976710655\n\tsecret: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\n\toutput: OK\n\tI: 281474976710654\n\tsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\n\toutput: OK\n\tI: 281474976710653\n\tsecret: 0x2273e227a5b7449b6e70f1fb4652864038b1cbf9cd7c043a7d6456b7fc275ad8\n\toutput: OK\n\tI: 281474976710652\n\tsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\n\toutput: OK\n\tI: 281474976710651\n\tsecret: 0x631373ad5f9ef654bb3dade742d09504c567edd24320d2fcd68e3cc47e2ff6a6\n\toutput: OK\n\tI: 281474976710650\n\tsecret: 0xb7e76a83668bde38b373970155c868a653304308f9896692f904a23731224bb1\n\toutput: OK\n\tI: 281474976710649\n\tsecret: 0xa5a64476122ca0925fb344bdc1854c1c0a59fc614298e50a33e331980a220f32\n\toutput: OK\n\tI: 281474976710648\n\tsecret: 0x05cde6323d949933f7f7b78776bcc1ea6d9b31447732e3802e1f7ac44b650e17\n\toutput: ERROR\n\n    name: insert_secret #7 incorrect\n\tI: 281474976710655\n\tsecret: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\n\toutput: OK\n\tI: 281474976710654\n\tsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\n\toutput: OK\n\tI: 281474976710653\n\tsecret: 0x2273e227a5b7449b6e70f1fb4652864038b1cbf9cd7c043a7d6456b7fc275ad8\n\toutput: OK\n\tI: 281474976710652\n\tsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\n\toutput: OK\n\tI: 281474976710651\n\tsecret: 0xc65716add7aa98ba7acb236352d665cab17345fe45b55fb879ff80e6bd0c41dd\n\toutput: OK\n\tI: 281474976710650\n\tsecret: 0x969660042a28f32d9be17344e09374b379962d03db1574df5a8a5a47e19ce3f2\n\toutput: OK\n\tI: 281474976710649\n\tsecret: 0xe7971de736e01da8ed58b94c2fc216cb1dca9e326f3a96e7194fe8ea8af6c0a3\n\toutput: OK\n\tI: 281474976710648\n\tsecret: 0x05cde6323d949933f7f7b78776bcc1ea6d9b31447732e3802e1f7ac44b650e17\n\toutput: ERROR\n\n    name: insert_secret #8 incorrect\n\tI: 281474976710655\n\tsecret: 0x7cc854b54e3e0dcdb010d7a3fee464a9687be6e8db3be6854c475621e007a5dc\n\toutput: OK\n\tI: 281474976710654\n\tsecret: 0xc7518c8ae4660ed02894df8976fa1a3659c1a8b4b5bec0c4b872abeba4cb8964\n\toutput: OK\n\tI: 281474976710653\n\tsecret: 0x2273e227a5b7449b6e70f1fb4652864038b1cbf9cd7c043a7d6456b7fc275ad8\n\toutput: OK\n\tI: 281474976710652\n\tsecret: 0x27cddaa5624534cb6cb9d7da077cf2b22ab21e9b506fd4998a51d54502e99116\n\toutput: OK\n\tI: 281474976710651\n\tsecret: 0xc65716add7aa98ba7acb236352d665cab17345fe45b55fb879ff80e6bd0c41dd\n\toutput: OK\n\tI: 281474976710650\n\tsecret: 0x969660042a28f32d9be17344e09374b379962d03db1574df5a8a5a47e19ce3f2\n\toutput: OK\n\tI: 281474976710649\n\tsecret: 0xa5a64476122ca0925fb344bdc1854c1c0a59fc614298e50a33e331980a220f32\n\toutput: OK\n\tI: 281474976710648\n\tsecret: 0xa7efbc61aac46d34f77778bac22c8a20c6a46ca460addc49009bda875ec88fa4\n\toutput: ERROR\n\n# Appendix E: Key Derivation Test Vectors\n\nThese test the derivation for `localpubkey`, `remotepubkey`, `local_htlcpubkey`, `remote_htlcpubkey`, `local_delayedpubkey`, and\n`remote_delayedpubkey` (which use the same formula), as well as the `revocationpubkey`.\n\nAll of them use the following secrets (and thus the derived points):\n\n    base_secret: 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\n    per_commitment_secret: 0x1f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403020100\n    base_point: 0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2\n    per_commitment_point: 0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486\n\n    name: derivation of pubkey from basepoint and per_commitment_point\n    # SHA256(per_commitment_point || basepoint)\n    # => SHA256(0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486 || 0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2)\n    # = 0xcbcdd70fcfad15ea8e9e5c5a12365cf00912504f08ce01593689dd426bca9ff0\n    # + basepoint (0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2)\n    # = 0x0235f2dbfaa89b57ec7b055afe29849ef7ddfeb1cefdb9ebdc43f5494984db29e5\n    localpubkey: 0x0235f2dbfaa89b57ec7b055afe29849ef7ddfeb1cefdb9ebdc43f5494984db29e5\n\n    name: derivation of private key from basepoint secret and per_commitment_secret\n    # SHA256(per_commitment_point || basepoint)\n    # => SHA256(0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486 || 0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2)\n    # = 0xcbcdd70fcfad15ea8e9e5c5a12365cf00912504f08ce01593689dd426bca9ff0\n    # + basepoint_secret (0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f)\n    # = 0xcbced912d3b21bf196a766651e436aff192362621ce317704ea2f75d87e7be0f\n    localprivkey: 0xcbced912d3b21bf196a766651e436aff192362621ce317704ea2f75d87e7be0f\n\n    name: derivation of revocation pubkey from basepoint and per_commitment_point\n    # SHA256(revocation_basepoint || per_commitment_point)\n    # => SHA256(0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2 || 0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486)\n    # = 0xefbf7ba5a074276701798376950a64a90f698997cce0dff4d24a6d2785d20963\n    # x revocation_basepoint = 0x02c00c4aadc536290422a807250824a8d87f19d18da9d610d45621df22510db8ce\n    # SHA256(per_commitment_point || revocation_basepoint)\n    # => SHA256(0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486 || 0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2)\n    # = 0xcbcdd70fcfad15ea8e9e5c5a12365cf00912504f08ce01593689dd426bca9ff0\n    # x per_commitment_point = 0x0325ee7d3323ce52c4b33d4e0a73ab637711057dd8866e3b51202a04112f054c43\n    # 0x02c00c4aadc536290422a807250824a8d87f19d18da9d610d45621df22510db8ce + 0x0325ee7d3323ce52c4b33d4e0a73ab637711057dd8866e3b51202a04112f054c43 => 0x02916e326636d19c33f13e8c0c3a03dd157f332f3e99c317c141dd865eb01f8ff0\n    revocationpubkey: 0x02916e326636d19c33f13e8c0c3a03dd157f332f3e99c317c141dd865eb01f8ff0\n\n    name: derivation of revocation secret from basepoint_secret and per_commitment_secret\n    # SHA256(revocation_basepoint || per_commitment_point)\n    # => SHA256(0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2 || 0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486)\n    # = 0xefbf7ba5a074276701798376950a64a90f698997cce0dff4d24a6d2785d20963\n    # * revocation_basepoint_secret (0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f)# = 0x44bfd55f845f885b8e60b2dca4b30272d5343be048d79ce87879d9863dedc842\n    # SHA256(per_commitment_point || revocation_basepoint)\n    # => SHA256(0x025f7117a78150fe2ef97db7cfc83bd57b2e2c0d0dd25eaf467a4a1c2a45ce1486 || 0x036d6caac248af96f6afa7f904f550253a0f3ef3f5aa2fe6838a95b216691468e2)\n    # = 0xcbcdd70fcfad15ea8e9e5c5a12365cf00912504f08ce01593689dd426bca9ff0\n    # * per_commitment_secret (0x1f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403020100)# = 0x8be02a96a97b9a3c1c9f59ebb718401128b72ec009d85ee1656319b52319b8ce\n    # => 0xd09ffff62ddb2297ab000cc85bcb4283fdeb6aa052affbc9dddcf33b61078110\n    revocationprivkey: 0xd09ffff62ddb2297ab000cc85bcb4283fdeb6aa052affbc9dddcf33b61078110\n\n# Appendix F: Commitment and HTLC Transaction Test Vectors (anchors)\n\nThe anchor test vectors are based on the test cases as defined in appendix C.\nNote that in appendix C, `to_local_msat` and `to_remote_msat` are balances\nbefore subtraction of:\n* Commit fee (funder only)\n* Anchor outputs (funder only)\n* In-flight htlcs\n\n```yaml\n[\n    {\n        \"Name\": \"simple commitment tx with no HTLCs\",\n        \"LocalBalance\": 7000000000,\n        \"RemoteBalance\": 3000000000,\n        \"DustLimitSatoshis\": 546,\n        \"FeePerKw\": 15000,\n        \"UseTestHtlcs\": false,\n        \"HtlcDescs\": [],\n        \"ExpectedCommitmentTxHex\": \"02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80044a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a508b6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004830450221008266ac6db5ea71aac3c95d97b0e172ff596844851a3216eb88382a8dddfd33d2022050e240974cfd5d708708b4365574517c18e7ae535ef732a3484d43d0d82be9f701483045022100f89034eba16b2be0e5581f750a0a6309192b75cce0f202f0ee2b4ec0cc394850022076c65dc507fe42276152b7a3d90e961e678adbe966e916ecfe85e64d430e75f301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\",\n        \"RemoteSigHex\": \"3045022100f89034eba16b2be0e5581f750a0a6309192b75cce0f202f0ee2b4ec0cc394850022076c65dc507fe42276152b7a3d90e961e678adbe966e916ecfe85e64d430e75f3\"\n    },\n    {\n        \"Name\": \"simple commitment tx with no HTLCs and single anchor\",\n        \"LocalBalance\": 10000000000,\n        \"RemoteBalance\": 0,\n        \"DustLimitSatoshis\": 546,\n        \"FeePerKw\": 15000,\n        \"UseTestHtlcs\": false,\n        \"HtlcDescs\": [],\n        \"ExpectedCommitmentTxHex\": \"02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80024a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f10529800000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400473044022007cf6b405e9c9b4f527b0ecad9d8bb661fabb8b12abf7d1c0b3ad1855db3ed490220616d5c1eeadccc63bd775a131149455d62d95a42c2a1b01cc7821fc42dce7778014730440220655bf909fb6fa81d086f1336ac72c97906dce29d1b166e305c99152d810e26e1022051f577faa46412c46707aaac46b65d50053550a66334e00a44af2706f27a865801475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\",\n        \"RemoteSigHex\": \"30440220655bf909fb6fa81d086f1336ac72c97906dce29d1b166e305c99152d810e26e1022051f577faa46412c46707aaac46b65d50053550a66334e00a44af2706f27a8658\"\n    },\n    {\n        \"Name\": \"commitment tx with seven outputs untrimmed\",\n        \"LocalBalance\": 6988000000,\n        \"RemoteBalance\": 3000000000,\n        \"DustLimitSatoshis\": 546,\n        \"FeePerKw\": 644,\n        \"UseTestHtlcs\": true,\n        \"HtlcDescs\": [\n            {\n                \"RemoteSigHex\": \"30440220746dc89a593e1b50915db63359b50c3c404f8324f78075c87708c866ccefda2502202a11062012dc8607b17e8c46ea4eefdfcc6b89a35440de99432ba12788d7bb17\",\n                \"ResolutionTxHex\": \"02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a02000000000100000001e8030000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220746dc89a593e1b50915db63359b50c3c404f8324f78075c87708c866ccefda2502202a11062012dc8607b17e8c46ea4eefdfcc6b89a35440de99432ba12788d7bb1783473044022036f77f88b49bd03dc16d3a015efcc7acffc2a93b213324035d77a716f79013ff02203c218eb882a40402a8bb05dbb751a442345a4e56307be76b214b6d4db9ed3c92012000000000000000000000000000000000000000000000000000000000000000008d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac6851b2756800000000\"\n            },\n            {\n                \"RemoteSigHex\": \"3045022100a847bc3b8cf2441013725ae32dc589c419835d069afd6d7f3d9834d8be7cea6e02204ce9d35ec7f0788da80e4d62e810c4ccd13617e58fa10832e38fb7ae87bdf338\",\n                \"ResolutionTxHex\": \"02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a03000000000100000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100a847bc3b8cf2441013725ae32dc589c419835d069afd6d7f3d9834d8be7cea6e02204ce9d35ec7f0788da80e4d62e810c4ccd13617e58fa10832e38fb7ae87bdf33883473044022026739b1adbfa34c485bf0e5a19e0cf7532f64545bcc5c95b95643ccc2d351e1902201743bb1b34f00e031cc15f6eff0f8ab764508d2681ff965ba62e76e540bca1e801008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000\"\n            },\n            {\n                \"RemoteSigHex\": \"3044022035977f2aa6d6ae12f1dae3366440faa17558e9c88c3188bfc8df7e276c6c65410220659f1f9070c725d9d46e43b99a36fc6d711d36069704add2d57fc1fa2818cf12\",\n                \"ResolutionTxHex\": \"02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a04000000000100000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022035977f2aa6d6ae12f1dae3366440faa17558e9c88c3188bfc8df7e276c6c65410220659f1f9070c725d9d46e43b99a36fc6d711d36069704add2d57fc1fa2818cf12834730440220191ba44e57b1601a59d99f85971d4801b286d428de275487c87ceeb8df1a4811022002215875d92833df0c9615c9096cf97152f87139ed9f82718bbb5b8b3d312524012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000\"\n            },\n            {\n                \"RemoteSigHex\": \"3044022002f3ff9a31270092c214d3d5b8b4f826599404bba64b87f7536ef6324d41551b022079dc4cb25f7ecd84b49f5cce03eae7e2655b59f39d543765daef0d4f11c93fa2\",\n                \"ResolutionTxHex\": \"02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a05000000000100000001b80b0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022002f3ff9a31270092c214d3d5b8b4f826599404bba64b87f7536ef6324d41551b022079dc4cb25f7ecd84b49f5cce03eae7e2655b59f39d543765daef0d4f11c93fa283483045022100f03047e38bc0aae2d80d53424b8c1d1b8139120e2bf09ad31a2803978745e6e102205b74c0eef0b472710b98c77e619ee9d0cc47a9dd786f4f214a564f44d79f9b9a01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000\"\n            },\n            {\n                \"RemoteSigHex\": \"30440220547937564288f64fb3e3c945a1348b912471f0c1c4cc7dc8ceca15a4cbd299b6022053c4f8e30832b13dfbe31e4091e313428625e0b5ac61eecba93f8f11c1e26225\",\n                \"ResolutionTxHex\": \"02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a06000000000100000001a00f0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220547937564288f64fb3e3c945a1348b912471f0c1c4cc7dc8ceca15a4cbd299b6022053c4f8e30832b13dfbe31e4091e313428625e0b5ac61eecba93f8f11c1e2622583473044022022604660234aef9bd21284598ec50f070ac82a3a0152e0af5e98a02cd6e8976f022042b0b9112ee00806b856dff6de52a82c98b036a4fe14bb5fd2926725e2fc8191012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000\"\n            }\n        ],\n        \"ExpectedCommitmentTxHex\": \"02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80094a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994e80300000000000022002010f88bf09e56f14fb4543fd26e47b0db50ea5de9cf3fc46434792471082621aed0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837ead007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5eb80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a4f996a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100ef82a405364bfc4007e63a7cc82925a513d79065bdbc216d60b6a4223a323f8a02200716730b8561f3c6d362eaf47f202e99fb30d0557b61b92b5f9134f8e2de368101483045022100e0106830467a558c07544a3de7715610c1147062e7d091deeebe8b5c661cda9402202ad049c1a6d04834317a78483f723c205c9f638d17222aafc620800cc1b6ae3501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\",\n        \"RemoteSigHex\": \"3045022100e0106830467a558c07544a3de7715610c1147062e7d091deeebe8b5c661cda9402202ad049c1a6d04834317a78483f723c205c9f638d17222aafc620800cc1b6ae35\"\n    },\n    {\n        \"Name\": \"commitment tx with six outputs untrimmed (minimum dust limit)\",\n        \"LocalBalance\": 6988000000,\n        \"RemoteBalance\": 3000000000,\n        \"DustLimitSatoshis\": 1001,\n        \"FeePerKw\": 645,\n        \"UseTestHtlcs\": true,\n        \"HtlcDescs\": [\n            {\n                \"RemoteSigHex\": \"3045022100e04d160a326432659fe9fb127304c1d348dfeaba840081bdc57d8efd902a48d8022008a824e7cf5492b97e4d9e03c06a09f822775a44f6b5b2533a2088904abfc282\",\n                \"ResolutionTxHex\": \"02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b285348561320002000000000100000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e04d160a326432659fe9fb127304c1d348dfeaba840081bdc57d8efd902a48d8022008a824e7cf5492b97e4d9e03c06a09f822775a44f6b5b2533a2088904abfc28283483045022100b7c49846466b13b190ff739bbe3005c105482fc55539e55b1c561f76b6982b6c02200e5c35808619cf543c8405cff9fedd25f333a4a2f6f6d5e8af8150090c40ef0901008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000\"\n            },\n            {\n                \"RemoteSigHex\": \"3045022100fbdc3c367ce3bf30796025cc590ee1f2ce0e72ae1ac19f5986d6d0a4fc76211f02207e45ae9267e8e820d188569604f71d1abd11bd385d58853dd7dc034cdb3e9a6e\",\n                \"ResolutionTxHex\": \"02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b285348561320003000000000100000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100fbdc3c367ce3bf30796025cc590ee1f2ce0e72ae1ac19f5986d6d0a4fc76211f02207e45ae9267e8e820d188569604f71d1abd11bd385d58853dd7dc034cdb3e9a6e83483045022100d29330f24db213b262068706099b39c15fa7e070c3fcdf8836c09723fc4d365602203ce57d01e9f28601e461a0b5c4a50119b270bde8b70148d133a6849c70b115ac012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000\"\n            },\n            {\n                \"RemoteSigHex\": \"3044022066c5ef625cee3ddd2bc7b6bfb354b5834cf1cc6d52dd972fb41b7b225437ae4a022066cb85647df65c6b87a54e416dcdcca778a776c36a9643d2b5dc793c9b29f4c1\",\n                \"ResolutionTxHex\": \"02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b285348561320004000000000100000001b80b0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022066c5ef625cee3ddd2bc7b6bfb354b5834cf1cc6d52dd972fb41b7b225437ae4a022066cb85647df65c6b87a54e416dcdcca778a776c36a9643d2b5dc793c9b29f4c18347304402202d4ce515cd9000ec37575972d70b8d24f73909fb7012e8ebd8c2066ef6fe187902202830b53e64ea565fecd0f398100691da6bb2a5cf9bb0d1926f1d71d05828a11e01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000\"\n            },\n            {\n                \"RemoteSigHex\": \"3044022022c7e11595c53ee89a57ca76baf0aed730da035952d6ab3fe6459f5eff3b337a022075e10cc5f5fd724a35ce4087a5d03cd616698626c69814032132b50bb97dc615\",\n                \"ResolutionTxHex\": \"02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b285348561320005000000000100000001a00f0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022022c7e11595c53ee89a57ca76baf0aed730da035952d6ab3fe6459f5eff3b337a022075e10cc5f5fd724a35ce4087a5d03cd616698626c69814032132b50bb97dc61583483045022100b20cd63e0587d1711beaebda4730775c4ac8b8b2ec78fe18a0c44c3f168c25230220079abb7fc4924e2fca5950842e5b9e416735585026914570078c4ef62f286226012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000\"\n            }\n        ],\n        \"ExpectedCommitmentTxHex\": \"02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80084a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837ead007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5eb80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994abc996a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100d57697c707b6f6d053febf24b98e8989f186eea42e37e9e91663ec2c70bb8f70022079b0715a472118f262f43016a674f59c015d9cafccec885968e76d9d9c5d005101473044022025d97466c8049e955a5afce28e322f4b34d2561118e52332fb400f9b908cc0a402205dc6fba3a0d67ee142c428c535580cd1f2ff42e2f89b47e0c8a01847caffc31201475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\",\n        \"RemoteSigHex\": \"3044022025d97466c8049e955a5afce28e322f4b34d2561118e52332fb400f9b908cc0a402205dc6fba3a0d67ee142c428c535580cd1f2ff42e2f89b47e0c8a01847caffc312\"\n    },\n    {\n        \"Name\": \"commitment tx with four outputs untrimmed (minimum dust limit)\",\n        \"LocalBalance\": 6988000000,\n        \"RemoteBalance\": 3000000000,\n        \"DustLimitSatoshis\": 2001,\n        \"FeePerKw\": 2185,\n        \"UseTestHtlcs\": true,\n        \"HtlcDescs\": [\n            {\n                \"RemoteSigHex\": \"304402206870514a72ad6e723ff7f1e0370d7a33c1cd2a0b9272674143ebaf6a1d02dee102205bd953c34faf5e7322e9a1c0103581cb090280fda4f1039ee8552668afa90ebb\",\n                \"ResolutionTxHex\": \"02000000000101ac13a7715f80b8e52dda43c6929cade5521bdced3a405da02b443f1ffb1e33cc02000000000100000001b80b0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402206870514a72ad6e723ff7f1e0370d7a33c1cd2a0b9272674143ebaf6a1d02dee102205bd953c34faf5e7322e9a1c0103581cb090280fda4f1039ee8552668afa90ebb834730440220669de9ca7910eff65a7773ebd14a9fc371fe88cde5b8e2a81609d85c87ac939b02201ac29472fa4067322e92d75b624942d60be5050139b20bb363db75be79eb946f01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000\"\n            },\n            {\n                \"RemoteSigHex\": \"3045022100949e8dd938da56445b1cdfdebe1b7efea086edd05d89910d205a1e2e033ce47102202cbd68b5262ab144d9ec12653f87dfb0bb6bd05d1f58ae1e523f028eaefd7271\",\n                \"ResolutionTxHex\": \"02000000000101ac13a7715f80b8e52dda43c6929cade5521bdced3a405da02b443f1ffb1e33cc03000000000100000001a00f0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100949e8dd938da56445b1cdfdebe1b7efea086edd05d89910d205a1e2e033ce47102202cbd68b5262ab144d9ec12653f87dfb0bb6bd05d1f58ae1e523f028eaefd727183483045022100e3104ed8b239f8019e5f0a1a73d7782a94a8c36e7984f476c3a0b3cb0e62e27902207e3d52884600985f8a2098e53a5c30dd6a5e857733acfaa07ab2162421ed2688012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000\"\n            }\n        ],\n        \"ExpectedCommitmentTxHex\": \"02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80064a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994b80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994ac5916a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100cd8479cfe1edb1e5a1d487391e0451a469c7171e51e680183f19eb4321f20e9b02204eab7d5a6384b1b08e03baa6e4d9748dfd2b5ab2bae7e39604a0d0055bbffdd501473044022040f63a16148cf35c8d3d41827f5ae7f7c3746885bb64d4d1b895892a83812b3e02202fcf95c2bf02c466163b3fa3ced6a24926fbb4035095a96842ef516e86ba54c001475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\",\n        \"RemoteSigHex\": \"3044022040f63a16148cf35c8d3d41827f5ae7f7c3746885bb64d4d1b895892a83812b3e02202fcf95c2bf02c466163b3fa3ced6a24926fbb4035095a96842ef516e86ba54c0\"\n    },\n    {\n        \"Name\": \"commitment tx with three outputs untrimmed (minimum dust limit)\",\n        \"LocalBalance\": 6988000000,\n        \"RemoteBalance\": 3000000000,\n        \"DustLimitSatoshis\": 3001,\n        \"FeePerKw\": 3687,\n        \"UseTestHtlcs\": true,\n        \"HtlcDescs\": [\n            {\n                \"RemoteSigHex\": \"3044022017b558a3cf5f0cb94269e2e927b29ed22bd2416abb8a7ce6de4d1256f359b93602202e9ca2b1a23ea3e69f433c704e327739e219804b8c188b1d52f74fd5a9de954c\",\n                \"ResolutionTxHex\": \"02000000000101542562b326c08e3a076d9cfca2be175041366591da334d8d513ff1686fd95a6002000000000100000001a00f0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022017b558a3cf5f0cb94269e2e927b29ed22bd2416abb8a7ce6de4d1256f359b93602202e9ca2b1a23ea3e69f433c704e327739e219804b8c188b1d52f74fd5a9de954c83483045022100af7a8b7c7ff2080c68995254cb66d64d9954edcc5baac3bb4f27ed2d29aaa6120220421c27da7a60574a9263f271e0f3bd34594ec6011095190022b3b54596ea03de012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000\"\n            }\n        ],\n        \"ExpectedCommitmentTxHex\": \"02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80054a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994aa28b6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100c970799bcb33f43179eb43b3378a0a61991cf2923f69b36ef12548c3df0e6d500220413dc27d2e39ee583093adfcb7799be680141738babb31cc7b0669a777a31f5d01483045022100ad6c71569856b2d7ff42e838b4abe74a713426b37f22fa667a195a4c88908c6902202b37272b02a42dc6d9f4f82cab3eaf84ac882d9ed762859e1e75455c2c22837701475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\",\n        \"RemoteSigHex\": \"3045022100ad6c71569856b2d7ff42e838b4abe74a713426b37f22fa667a195a4c88908c6902202b37272b02a42dc6d9f4f82cab3eaf84ac882d9ed762859e1e75455c2c228377\"\n    },\n    {\n        \"Name\": \"commitment tx with two outputs untrimmed (minimum dust limit)\",\n        \"LocalBalance\": 6988000000,\n        \"RemoteBalance\": 3000000000,\n        \"DustLimitSatoshis\": 4001,\n        \"FeePerKw\": 4894,\n        \"UseTestHtlcs\": true,\n        \"HtlcDescs\": [],\n        \"ExpectedCommitmentTxHex\": \"02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80044a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994ad0886a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004830450221009f16ac85d232e4eddb3fcd750a68ebf0b58e3356eaada45d3513ede7e817bf4c02207c2b043b4e5f971261975406cb955219fa56bffe5d834a833694b5abc1ce4cfd01483045022100e784a66b1588575801e237d35e510fd92a81ae3a4a2a1b90c031ad803d07b3f3022021bc5f16501f167607d63b681442da193eb0a76b4b7fd25c2ed4f8b28fd35b9501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\",\n        \"RemoteSigHex\": \"3045022100e784a66b1588575801e237d35e510fd92a81ae3a4a2a1b90c031ad803d07b3f3022021bc5f16501f167607d63b681442da193eb0a76b4b7fd25c2ed4f8b28fd35b95\"\n    },\n    {\n        \"Name\": \"commitment tx with one output untrimmed (minimum dust limit)\",\n        \"LocalBalance\": 6988000000,\n        \"RemoteBalance\": 3000000000,\n        \"DustLimitSatoshis\": 4001,\n        \"FeePerKw\": 6216010,\n        \"UseTestHtlcs\": true,\n        \"HtlcDescs\": [],\n        \"ExpectedCommitmentTxHex\": \"02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80024a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a04004830450221009ad80792e3038fe6968d12ff23e6888a565c3ddd065037f357445f01675d63f3022018384915e5f1f4ae157e15debf4f49b61c8d9d2b073c7d6f97c4a68caa3ed4c1014830450221008fd5dbff02e4b59020d4cd23a3c30d3e287065fda75a0a09b402980adf68ccda022001e0b8b620cd915ddff11f1de32addf23d81d51b90e6841b2cb8dcaf3faa5ecf01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\",\n        \"RemoteSigHex\": \"30450221008fd5dbff02e4b59020d4cd23a3c30d3e287065fda75a0a09b402980adf68ccda022001e0b8b620cd915ddff11f1de32addf23d81d51b90e6841b2cb8dcaf3faa5ecf\"\n    },\n    {\n        \"Name\": \"commitment tx with 3 htlc outputs, 2 offered having the same amount and preimage\",\n        \"LocalBalance\": 6987999999,\n        \"RemoteBalance\": 3000000000,\n        \"DustLimitSatoshis\": 546,\n        \"FeePerKw\": 253,\n        \"UseTestHtlcs\": true,\n        \"HtlcDescs\": [\n            {\n                \"RemoteSigHex\": \"30440220078fe5343dab88c348a3a8a9c1a9293259dbf35507ae971702cc39dd623ea9af022011ed0c0f35243cd0bb4d9ca3c772379b2b5f4af93140e9fdc5600dfec1cdb0c2\",\n                \"ResolutionTxHex\": \"020000000001013d060d0305c9616eaabc21d41fae85bcb5477b5d7f1c92aa429cf15339bbe1c402000000000100000001d0070000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220078fe5343dab88c348a3a8a9c1a9293259dbf35507ae971702cc39dd623ea9af022011ed0c0f35243cd0bb4d9ca3c772379b2b5f4af93140e9fdc5600dfec1cdb0c28347304402205df665e2908c7690d2d33eb70e6e119958c28febe141a94ed0dd9a55ce7c8cfc0220364d02663a5d019af35c5cd5fda9465d985d85bbd12db207738d61163449a424012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000\"\n            },\n            {\n                \"RemoteSigHex\": \"304402202df6bf0f98a42cfd0172a16bded7d1b16c14f5f42ba23f5c54648c14b647531302200fe1508626817f23925bb56951d5e4b2654c751743ab6db48a6cce7dda17c01c\",\n                \"ResolutionTxHex\": \"020000000001013d060d0305c9616eaabc21d41fae85bcb5477b5d7f1c92aa429cf15339bbe1c40300000000010000000188130000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402202df6bf0f98a42cfd0172a16bded7d1b16c14f5f42ba23f5c54648c14b647531302200fe1508626817f23925bb56951d5e4b2654c751743ab6db48a6cce7dda17c01c8347304402203f99ec05cdd89558a23683b471c1dcce8f6a92295f1fff3b0b5d21be4d4f97ea022019d29070690fc2c126fe27cc4ab2f503f289d362721b2efa7418e7fddb939a5b01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6851b27568f9010000\"\n            },\n            {\n                \"RemoteSigHex\": \"3045022100bd206b420c495f3aa714d3ea4766cbe95441deacb5d2f737f1913349aee7c2ae02200249d2c950dd3b15326bf378ae5d2b871d33d6737f5d70735f3de8383140f2a1\",\n                \"ResolutionTxHex\": \"020000000001013d060d0305c9616eaabc21d41fae85bcb5477b5d7f1c92aa429cf15339bbe1c40400000000010000000188130000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100bd206b420c495f3aa714d3ea4766cbe95441deacb5d2f737f1913349aee7c2ae02200249d2c950dd3b15326bf378ae5d2b871d33d6737f5d70735f3de8383140f2a183483045022100f2cd35e385b9b7e15b92a5d78d120b6b2c5af4e974bc01e884c5facb3bb5966c0220706e0506477ce809a40022d6de8e041e9ef13136c45abee9c36f58a01fdb188b01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9142002cc93ebefbb1b73f0af055dcc27a0b504ad7688ac6851b27568fa010000\"\n            }\n        ],\n        \"ExpectedCommitmentTxHex\": \"02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80074a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5e881300000000000022002018e40f9072c44350f134bdc887bab4d9bdfc8aa468a25616c80e21757ba5dac7881300000000000022002018e40f9072c44350f134bdc887bab4d9bdfc8aa468a25616c80e21757ba5dac7c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994aad9c6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100b4014970d9d7962853f3f85196144671d7d5d87426250f0a5fdaf9a55292e92502205360910c9abb397467e19dbd63d081deb4a3240903114c98cec0a23591b79b7601473044022027b38dfb654c34032ffb70bb43022981652fce923cbbe3cbe7394e2ade8b34230220584195b78da6e25c2e8da6b4308d9db25b65b64975db9266163ef592abb7c72501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220\",\n        \"RemoteSigHex\": \"3044022027b38dfb654c34032ffb70bb43022981652fce923cbbe3cbe7394e2ade8b34230220584195b78da6e25c2e8da6b4308d9db25b65b64975db9266163ef592abb7c725\"\n    }\n]\n```\n\n# Appendix G: Dual Funded Transaction Test Vectors\n\n## Funding Transaction Construction\n### Preliminaries:\n\n```\nGenesis block 0:\n0100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4adae5494dffff7f20020000000101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000\n\nBlock 1:0000002006226e46111a0b59caaf126043eb5bbf28c34f3a5e332a1fc7b2b73cf188910ff86fd1d0db3ac5a72df968622f31e6b5e6566a09e29206d7c7a55df90e181de8be86815cffff7f200000000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff03510101ffffffff0200f2052a0100000017a914113ca7e584fe1575b6fc39abae991529f66eda58870000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000\nCoinbase address pubkey: 2MtpN8zCxTp8AWSg7VBjBX7vU6x73bVCKP8\nCoinbase address privkey: cPxFtfE1w3ptFnsZvvFeWji21kTArYa9GXwMkYsoQHdaJKrjUTek\n\nParent transaction (spends coinbase of block 1):\n02000000000101f86fd1d0db3ac5a72df968622f31e6b5e6566a09e29206d7c7a55df90e181de800000000171600141fb9623ffd0d422eacc450fd1e967efc477b83ccffffffff0580b2e60e00000000220020fd89acf65485df89797d9ba7ba7a33624ac4452f00db08107f34257d33e5b94680b2e60e0000000017a9146a235d064786b49e7043e4a042d4cc429f7eb6948780b2e60e00000000160014fbb4db9d85fba5e301f4399e3038928e44e37d3280b2e60e0000000017a9147ecd1b519326bc13b0ec716e469b58ed02b112a087f0006bee0000000017a914f856a70093da3a5b5c4302ade033d4c2171705d387024730440220696f6cee2929f1feb3fd6adf024ca0f9aa2f4920ed6d35fb9ec5b78c8408475302201641afae11242160101c6f9932aeb4fcd1f13a9c6df5d1386def000ea259a35001210381d7d5b1bc0d7600565d827242576d9cb793bfe0754334af82289ee8b65d137600000000\n```\n\n### Funding transaction (spends parent's outputs):\n\nLocktime: 120\nFeerate: 253 sat/kiloweight\nOpener's `funding_satoshi`: 2 0000 0000 sat\nAccepter's `funding_satoshi`: 2 0000 0000 sat\n\nInputs:\n```\n4303ca8ff10c6c345b9299672a66f111c5b81ae027cc5b0d4d39d09c66b032b9 0\n\twitness_data:\n\t  preimage: 20 68656c6c6f2074686572652c2074686973206973206120626974636f6e212121\n\t  witness_script: 27 82012088a820add57dfe5277079d069ca4ad4893c96de91f88ffb981fdc6a2a34d5336c66aff87\n\tscriptPubKey: 0020fd89acf65485df89797d9ba7ba7a33624ac4452f00db08107f34257d33e5b946\n\taddress: bcrt1qlky6eaj5sh0cj7tanwnm573nvf9vg3f0qrdssyrlxsjh6vl9h9rql40v2g\n\n4303ca8ff10c6c345b9299672a66f111c5b81ae027cc5b0d4d39d09c66b032b9 2\n\tpubkey: 034695f5b7864c580bf11f9f8cb1a94eb336f2ce9ef872d2ae1a90ee276c772484\n\tprivkey: cUM8Dr33wK4uFmw3Tz8sbQ7BiBNgX5BthRurU7RkgXVvNUPcWrJf\n\twitness_program: fbb4db9d85fba5e301f4399e3038928e44e37d32\n\tscriptPubKey: 0014fbb4db9d85fba5e301f4399e3038928e44e37d32\n\taddress: bcrt1qlw6dh8v9lwj7xq058x0rqwyj3ezwxlfjxsy7er\n\n```\n\n### Expected Opener's `tx_add_input` (input 0 above):\n```\n  num_inputs: 1\n  tx_add_input:[\n    {\n      channel_id: \"xxx\",\n      serial_id: 20,\n      prevtx_len: 353,\n      prevtx: \"02000000000101f86fd1d0db3ac5a72df968622f31e6b5e6566a09e29206d7c7a55df90e181de800000000171600141fb9623ffd0d422eacc450fd1e967efc477b83ccffffffff0580b2e60e00000000220020fd89acf65485df89797d9ba7ba7a33624ac4452f00db08107f34257d33e5b94680b2e60e0000000017a9146a235d064786b49e7043e4a042d4cc429f7eb6948780b2e60e00000000160014fbb4db9d85fba5e301f4399e3038928e44e37d3280b2e60e0000000017a9147ecd1b519326bc13b0ec716e469b58ed02b112a087f0006bee0000000017a914f856a70093da3a5b5c4302ade033d4c2171705d387024730440220696f6cee2929f1feb3fd6adf024ca0f9aa2f4920ed6d35fb9ec5b78c8408475302201641afae11242160101c6f9932aeb4fcd1f13a9c6df5d1386def000ea259a35001210381d7d5b1bc0d7600565d827242576d9cb793bfe0754334af82289ee8b65d137600000000\",\n      prev_vout: 0,\n      sequence: 4294967293\n    }\n  ]\n```\n\n### Expected Accepter's `tx_add_input` (input 2 above):\n```\n  num_inputs: 1\n  tx_add_input:[\n    {\n      channel_id: \"xxx\",\n      serial_id: 11,\n      prevtx_len: 353,\n      prevtx: \"02000000000101f86fd1d0db3ac5a72df968622f31e6b5e6566a09e29206d7c7a55df90e181de800000000171600141fb9623ffd0d422eacc450fd1e967efc477b83ccffffffff0580b2e60e00000000220020fd89acf65485df89797d9ba7ba7a33624ac4452f00db08107f34257d33e5b94680b2e60e0000000017a9146a235d064786b49e7043e4a042d4cc429f7eb6948780b2e60e00000000160014fbb4db9d85fba5e301f4399e3038928e44e37d3280b2e60e0000000017a9147ecd1b519326bc13b0ec716e469b58ed02b112a087f0006bee0000000017a914f856a70093da3a5b5c4302ade033d4c2171705d387024730440220696f6cee2929f1feb3fd6adf024ca0f9aa2f4920ed6d35fb9ec5b78c8408475302201641afae11242160101c6f9932aeb4fcd1f13a9c6df5d1386def000ea259a35001210381d7d5b1bc0d7600565d827242576d9cb793bfe0754334af82289ee8b65d137600000000\",\n      prev_vout: 2,\n      sequence: 4294967293\n    }\n  ]\n```\n\n### Outputs: (scriptPubKeys)\n```\n# opener's change address\npubkey: 0206e626a4c6d4392d4030bc78bd93f728d1ba61214a77c63adc17d71e32ded3df\n# privkey: cSpC1KYEV1vsUFBwTdcuRkncbwfipY1m5zuQ9CjgAYwiVvbQ4fc1\nscriptPubKey: 00141ca1cca8855bad6bc1ea5436edd8cff10b7e448b\naddress: bcrt1qrjsue2y9twkkhs022smwmkx07y9hu3ytshgjmj\n\n# accepter's change address\npubkey: 028f3978c211f4c0bf4d20674f345ae14e08871b25b2c957b4bdbd42e9726278fc\nprivkey: cQ1HXnbAE4wGhuB2b9rJEydV5ayeEmMqxf1dvHPZmyMTPkwvZJyg\nscriptPubKey: 001444cb0c39f93ecc372b5851725bd29d865d333b10\naddress: bcrt1qgn9scw0e8mxrw26c29e9h55asewnxwcsdxdp50\n\n# the 2-of-2s\npubkey1: 0292edb5f7bbf9e900f7e024be1c1339c6d149c11930e613af3a983d2565f4e41e\npubkey2: 02e16172a41e928cbd78f761bd1c657c4afc7495a1244f7f30166b654fbf7661e3\nscript_def: multi(2,0292edb5f7bbf9e900f7e024be1c1339c6d149c11930e613af3a983d2565f4e41e,02e16172a41e928cbd78f761bd1c657c4afc7495a1244f7f30166b654fbf7661e3)\nscript: 52210292edb5f7bbf9e900f7e024be1c1339c6d149c11930e613af3a983d2565f4e41e2102e16172a41e928cbd78f761bd1c657c4afc7495a1244f7f30166b654fbf7661e352ae\nscriptPubKey: 0020297b92c238163e820b82486084634b4846b86a3c658d87b9384192e6bea98ec5\naddress: bcrt1q99ae9s3czclgyzuzfpsggc6tfprts63uvkxc0wfcgxfwd04f3mzs3asq6l\n```\n\n### Expected Opener's `tx_add_output`:\n\n```\n  num_outputs: 2\n  tx_add_output[\n    {\n      channel_id:\"xxx\",\n      serial_id: 30,\n      sats: 49999845,\n      scriptlen: 22,\n      script: \"1600141ca1cca8855bad6bc1ea5436edd8cff10b7e448b\"\n    },{\n      channel_id: \"xxx\",\n      serial_id: 44,\n      sats: 400000000,\n      scriptlen: 34,\n      script: \"220020297b92c238163e820b82486084634b4846b86a3c658d87b9384192e6bea98ec5\"\n    }\n  ]\n```\n\n### Expected Accepter's `tx_add_output`:\n\n```\n  num_outputs: 1\n  tx_add_output[\n    {\n      channel_id: xxx,\n      serial_id: 33,\n      sats: 49999900,\n      scriptlen: 22,\n      script: 16001444cb0c39f93ecc372b5851725bd29d865d333b10\n    }\n  ]\n```\n\n### Expected Fee Calculation:\n\nOpener's fees and change:\n```\n    initiator_weight = (input_count, output_count, version, locktime) * 4\n                     + segwit_fields (marker + flag)\n                     + inputs (txid, vout, scriptSig, sequence) * number initiator inputs * 4\n                     + funding_output * 4\n                     + change_output * 4\n                     + max(number initiator inputs\n\t\t\t       * minimum witness weight,\n\t\t\t   actual witness weight of all inputs)\n\n    initiator_weight = (1 + 1 + 4 + 4) * 4\n                     + 2\n                     + (32 + 4 + 1 + 4) * 1 * 4\n                     + 43 * 4\n                     + 31 * 4\n                     + max(1 * 107, 71)\n\n    initiator_weight = 609\n\n    initiator_fees = initiator_weight * feerate\n    initiator_fees = 609 * 253 / 1000\n    initiator_fees = 155 sats\n\n    change = total_funding\n           - funding_sats\n           - fees\n\n    change = 2 5000 0000\n           - 2 0000 0000\n           -         155\n\n    change =   4999 9845\n\n    as hex: e5effa0200000000\n```\n\n### Accepter's fees and change:\n```\n    contributor_weight = inputs(txid, vout, scriptSig, sequence)\n\t\t\t  * number contributor inputs * 4\n                       + change_output * 4\n\t\t       + max(number contributor inputs\n\t\t\t         * minimum witness weight,\n\t\t\t     actual witness weight of all inputs)\n\n    contributor_weight = (32 + 4 + 1 + 4) * 1 *  4\n                       + 31 * 4\n                       + max(1 * 107, 99)\n\n    contributor_weight = 395\n\n    contributor_fees = contributor_weight * feerate\n    contributor_fees = 398 * 253 / 1000\n    contributor_fees = 100 sats\n\n    change = total_funding\n           - funding_sats\n           - fees\n\n    change = 2 5000 0000\n           - 2 0000 0000\n           -         100\n\n    change =   4999 9900\n\n    as hex: 1cf0fa0200000000\n```\n\n### Unsigned Funding Transaction:\n\n```\n0200000002b932b0669cd0394d0d5bcc27e01ab8c511f1662a6799925b346c0cf18fca03430200000000fdffffffb932b0669cd0394d0d5bcc27e01ab8c511f1662a6799925b346c0cf18fca03430000000000fdffffff03e5effa02000000001600141ca1cca8855bad6bc1ea5436edd8cff10b7e448b1cf0fa020000000016001444cb0c39f93ecc372b5851725bd29d865d333b100084d71700000000220020297b92c238163e820b82486084634b4846b86a3c658d87b9384192e6bea98ec578000000\n```\n\n### Expected Opener's `tx_signatures`:\n\n```\n  tx_signatures{\n      channel_id: xxx,\n      txid: \"5ca4e657c1aa9d069ea4a5d712045d233a7d7c52738cb02993637289e6386057\",\n      num_witnesses: 1,\n      witness[{\n        len: 74,\n        witness_data: \"022068656c6c6f2074686572652c2074686973206973206120626974636f6e2121212782012088a820add57dfe5277079d069ca4ad4893c96de91f88ffb981fdc6a2a34d5336c66aff87\"\n      }]\n  }\n```\n\n### Expected Accepter's `tx_signatures`:\n\n```\n  tx_signatures{\n      channel_id: xxx,\n      txid: \"5ca4e657c1aa9d069ea4a5d712045d233a7d7c52738cb02993637289e6386057\",\n      num_witnesses: 1,\n      witness[{\n        len: 107,\n        witness_data: \"0247304402207de9ba56bb9f641372e805782575ee840a899e61021c8b1572b3ec1d5b5950e9022069e9ba998915dae193d3c25cb89b5e64370e6a3a7755e7f31cf6d7cbc2a49f6d0121034695f5b7864c580bf11f9f8cb1a94eb336f2ce9ef872d2ae1a90ee276c772484\"\n      }]\n  }\n```\n\n#### Signed Funding Transaction:\n\nNote locktime is set to 120.\n\n```\n02000000000102b932b0669cd0394d0d5bcc27e01ab8c511f1662a6799925b346c0cf18fca03430200000000fdffffffb932b0669cd0394d0d5bcc27e01ab8c511f1662a6799925b346c0cf18fca03430000000000fdffffff03e5effa02000000001600141ca1cca8855bad6bc1ea5436edd8cff10b7e448b1cf0fa020000000016001444cb0c39f93ecc372b5851725bd29d865d333b100084d71700000000220020297b92c238163e820b82486084634b4846b86a3c658d87b9384192e6bea98ec50247304402207de9ba56bb9f641372e805782575ee840a899e61021c8b1572b3ec1d5b5950e9022069e9ba998915dae193d3c25cb89b5e64370e6a3a7755e7f31cf6d7cbc2a49f6d0121034695f5b7864c580bf11f9f8cb1a94eb336f2ce9ef872d2ae1a90ee276c772484022068656c6c6f2074686572652c2074686973206973206120626974636f6e2121212782012088a820add57dfe5277079d069ca4ad4893c96de91f88ffb981fdc6a2a34d5336c66aff8778000000\n```\n\n# References\n\n# Authors\n\n[ FIXME: ]\n\n![Creative Commons License](https://i.creativecommons.org/l/by/4.0/88x31.png \"License CC-BY\")\n<br>\nThis work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).\n"
        },
        {
          "name": "04-onion-routing.md",
          "type": "blob",
          "size": 105.2890625,
          "content": "# BOLT #4: Onion Routing Protocol\n\n## Overview\n\nThis document describes the construction of an onion routed packet that is\nused to route a payment from an _origin node_ to a _final node_. The packet\nis routed through a number of intermediate nodes, called _hops_.\n\nThe routing schema is based on the [Sphinx][sphinx] construction and is\nextended with a per-hop payload.\n\nIntermediate nodes forwarding the message can verify the integrity of\nthe packet and can learn which node they should forward the\npacket to. They cannot learn which other nodes, besides their\npredecessor or successor, are part of the packet's route; nor can they learn\nthe length of the route or their position within it. The packet is\nobfuscated at each hop, to ensure that a network-level attacker cannot\nassociate packets belonging to the same route (i.e. packets belonging\nto the same route do not share any correlating information). Notice that this\ndoes not preclude the possibility of packet association by an attacker\nvia traffic analysis.\n\nThe route is constructed by the origin node, which knows the public\nkeys of each intermediate node and of the final node. Knowing each node's public key\nallows the origin node to create a shared secret (using ECDH) for each\nintermediate node and for the final node. The shared secret is then\nused to generate a _pseudo-random stream_ of bytes (which is used to obfuscate\nthe packet) and a number of _keys_ (which are used to encrypt the payload and\ncompute the HMACs). The HMACs are then in turn used to ensure the integrity of\nthe packet at each hop.\n\nEach hop along the route only sees an ephemeral key for the origin node, in\norder to hide the sender's identity. The ephemeral key is blinded by each\nintermediate hop before forwarding to the next, making the onions unlinkable\nalong the route.\n\nThis specification describes _version 0_ of the packet format and routing\nmechanism.\n\nA node:\n  - upon receiving a higher version packet than it implements:\n    - MUST report a route failure to the origin node.\n    - MUST discard the packet.\n\n# Table of Contents\n\n  * [Conventions](#conventions)\n  * [Key Generation](#key-generation)\n  * [Pseudo Random Byte Stream](#pseudo-random-byte-stream)\n  * [Packet Structure](#packet-structure)\n    * [Payload Format](#payload-format)\n    * [Basic Multi-Part Payments](#basic-multi-part-payments)\n  * [Route Blinding](#route-blinding)\n    * [Inside encrypted_recipient_data: encrypted_data_tlv](Inside-encrypted_recipient_data-encrypted_data_tlv)\n  * [Accepting and Forwarding a Payment](#accepting-and-forwarding-a-payment)\n    * [Payload for the Last Node](#payload-for-the-last-node)\n    * [Non-strict Forwarding](#non-strict-forwarding)\n  * [Shared Secret](#shared-secret)\n  * [Blinding Ephemeral Onion Keys](#blinding-ephemeral-onion-keys)\n  * [Packet Construction](#packet-construction)\n  * [Onion Decryption](#onion-decryption)\n  * [Filler Generation](#filler-generation)\n  * [Returning Errors](#returning-errors)\n    * [Failure Messages](#failure-messages)\n    * [Receiving Failure Codes](#receiving-failure-codes)\n  * [`max_htlc_cltv` Selection](#max-htlc-cltv-selection)\n  * [Onion Messages](#onion-messages)\n  * [Test Vector](#test-vector)\n    * [Returning Errors](#returning-errors)\n  * [References](#references)\n  * [Authors](#authors)\n\n# Conventions\n\nThere are a number of conventions adhered to throughout this document:\n\n - HMAC: the integrity verification of the packet is based on Keyed-Hash\n   Message Authentication Code, as defined by the [FIPS 198\n   Standard][fips198]/[RFC 2104][RFC2104], and using a `SHA256` hashing\n   algorithm.\n - Elliptic curve: for all computations involving elliptic curves, the Bitcoin\n   curve is used, as specified in [`secp256k1`][sec2]\n - Pseudo-random stream: [`ChaCha20`][rfc8439] is used to generate a\n   pseudo-random byte stream. For its generation, a fixed 96-bit null-nonce\n   (`0x000000000000000000000000`) is used, along with a key derived from a shared\n   secret and with a `0x00`-byte stream of the desired output size as the\n   message.\n - The terms _origin node_ and _final node_ refer to the initial packet sender\n   and the final packet recipient, respectively.\n - The terms _hop_ and _node_ are sometimes used interchangeably, but a _hop_\n   usually refers to an intermediate node in the route rather than an end node.\n        _origin node_ --> _hop_ --> ... --> _hop_ --> _final node_\n - The term _processing node_ refers to the specific node along the route that is\n   currently processing the forwarded packet.\n - The term _peers_ refers only to hops that are direct neighbors (in the\n   overlay network): more specifically, _sending peers_ forward packets\n   to _receiving peers_.\n - Each hop in the route has a variable length `hop_payload`.\n    - The variable length `hop_payload` is prefixed with a `bigsize` encoding\n      the length in bytes, excluding the prefix and the trailing HMAC.\n\n# Key Generation\n\nA number of encryption and verification keys are derived from the shared secret:\n\n - _rho_: used as key when generating the pseudo-random byte stream that is used\n   to obfuscate the per-hop information\n - _mu_: used during the HMAC generation\n - _um_: used during error reporting\n - _pad_: use to generate random filler bytes for the starting mix-header\n   packet\n\nThe key generation function takes a key-type (_rho_=`0x72686F`, _mu_=`0x6d75`, \n_um_=`0x756d`, or _pad_=`0x706164`) and a 32-byte secret as inputs and returns\na 32-byte key.\n\nKeys are generated by computing an HMAC (with `SHA256` as hashing algorithm)\nusing the appropriate key-type (i.e. _rho_, _mu_, _um_, or _pad_) as HMAC-key\nand the 32-byte shared secret as the message. The resulting HMAC is then\nreturned as the key.\n\nNotice that the key-type does not include a C-style `0x00`-termination-byte,\ne.g. the length of the _rho_ key-type is 3 bytes, not 4.\n\n# Pseudo Random Byte Stream\n\nThe pseudo-random byte stream is used to obfuscate the packet at each hop of the\npath, so that each hop may only recover the address and HMAC of the next hop.\nThe pseudo-random byte stream is generated by encrypting (using `ChaCha20`) a\n`0x00`-byte stream, of the required length, which is initialized with a key\nderived from the shared secret and a 96-bit zero-nonce (`0x000000000000000000000000`).\n\nThe use of a fixed nonce is safe, since the keys are never reused.\n\n# Packet Structure\n\nThe packet consists of four sections:\n\n - a `version` byte\n - a 33-byte compressed `secp256k1` `public_key`, used during the shared secret\n   generation\n - a 1300-byte `hop_payloads` consisting of multiple, variable length,\n   `hop_payload` payloads\n - a 32-byte `hmac`, used to verify the packet's integrity\n\nThe network format of the packet consists of the individual sections\nserialized into one contiguous byte-stream and then transferred to the packet\nrecipient. Due to the fixed size of the packet, it need not be prefixed by its\nlength when transferred over a connection.\n\nThe overall structure of the packet is as follows:\n\n1. type: `onion_packet`\n2. data:\n   * [`byte`:`version`]\n   * [`point`:`public_key`]\n   * [`1300*byte`:`hop_payloads`]\n   * [`32*byte`:`hmac`]\n\nFor this specification (_version 0_), `version` has a constant value of `0x00`.\n\nThe `hop_payloads` field is a structure that holds obfuscated routing information, and associated HMAC.\nIt is 1300 bytes long and has the following structure:\n\n1. type: `hop_payloads`\n2. data:\n   * [`bigsize`:`length`]\n   * [`length*byte`:`payload`]\n   * [`32*byte`:`hmac`]\n   * ...\n   * `filler`\n\nWhere, the `length`, `payload`, and `hmac` are repeated for each hop;\nand where, `filler` consists of obfuscated, deterministically-generated padding, as detailed in [Filler Generation](#filler-generation).\nAdditionally, `hop_payloads` is incrementally obfuscated at each hop.\n\nUsing the `payload` field, the origin node is able to specify the path and structure of the HTLCs forwarded at each hop.\nAs the `payload` is protected under the packet-wide HMAC, the information it contains is fully authenticated with each pair-wise relationship between the HTLC sender (origin node) and each hop in the path.\n\nUsing this end-to-end authentication, each hop is able to cross-check the HTLC\nparameters with the `payload`'s specified values and to ensure that the\nsending peer hasn't forwarded an ill-crafted HTLC.\n\nSince no `payload` TLV value can ever be shorter than 2 bytes, `length` values of 0 and 1 are reserved.  (`0` indicated a legacy format no longer supported, and `1` is reserved for future use).\n\n### `payload` format\n\nThis is formatted according to the Type-Length-Value format defined in [BOLT #1](01-messaging.md#type-length-value-format).\n\n1. `tlv_stream`: `payload`\n2. types:\n    1. type: 2 (`amt_to_forward`)\n    2. data:\n        * [`tu64`:`amt_to_forward`]\n    1. type: 4 (`outgoing_cltv_value`)\n    2. data:\n        * [`tu32`:`outgoing_cltv_value`]\n    1. type: 6 (`short_channel_id`)\n    2. data:\n        * [`short_channel_id`:`short_channel_id`]\n    1. type: 8 (`payment_data`)\n    2. data:\n        * [`32*byte`:`payment_secret`]\n        * [`tu64`:`total_msat`]\n    1. type: 10 (`encrypted_recipient_data`)\n    2. data:\n        * [`...*byte`:`encrypted_recipient_data`]\n    1. type: 12 (`current_path_key`)\n    2. data:\n        * [`point`:`path_key`]\n    1. type: 16 (`payment_metadata`)\n    2. data:\n        * [`...*byte`:`payment_metadata`]\n    1. type: 18 (`total_amount_msat`)\n    2. data:\n        * [`tu64`:`total_msat`]\n\n`short_channel_id` is the ID of the outgoing channel used to route the\nmessage; the receiving peer should operate the other end of this channel.\n\n`amt_to_forward` is the amount, in millisatoshis, to forward to the\nnext receiving peer specified within the routing information, or for\nthe final destination.\n\nFor non-final nodes, this includes the origin node's computed _fee_ for the\nreceiving peer, calculated according to the receiving peer's advertised fee\nschema (as described in [BOLT #7](07-routing-gossip.md#htlc-fees)).\n\n`outgoing_cltv_value` is the CLTV value that the _outgoing_ HTLC\ncarrying the packet should have.  Inclusion of this field allows a hop\nto both authenticate the information specified by the origin node, and\nthe parameters of the HTLC forwarded, and ensure the origin node is\nusing the current `cltv_expiry_delta` value.\n\nIf the values don't correspond, this indicates that either a\nforwarding node has tampered with the intended HTLC values or that the\norigin node has an obsolete `cltv_expiry_delta` value.\n\nThe requirements ensure consistency in responding to an unexpected\n`outgoing_cltv_value`, whether it is the final node or not, to avoid\nleaking its position in the route.\n\n### Requirements\n\nThe creator of `encrypted_recipient_data` (usually, the recipient of payment):\n\n  - MUST create `encrypted_data_tlv` for each node in the blinded route (including itself).\n  - MUST include `encrypted_data_tlv.payment_relay` for each non-final node.\n  - MUST include exactly one of `encrypted_data_tlv.short_channel_id` or `encrypted_data_tlv.next_node_id` for each non-final node.\n  - MUST set `encrypted_data_tlv.payment_constraints` for each non-final node and MAY set it for the final node:\n    - `max_cltv_expiry` to the largest block height at which the route is allowed to be used, starting\n       from the final node's chosen `max_cltv_expiry` height at which the route should expire, adding \n       the final node's `min_final_cltv_expiry_delta` and then adding \n       `encrypted_data_tlv.payment_relay.cltv_expiry_delta` at each hop.\n    - `htlc_minimum_msat` to the largest minimum HTLC value the nodes will allow.\n  - If it sets `encrypted_data_tlv.allowed_features`:\n    - MUST set it to an empty array.\n  - MUST compute the total fees and CLTV delta of the route as follows and communicate them to the sender:\n    - `total_fee_base_msat(n+1) = (fee_base_msat(n+1) * 1000000 + total_fee_base_msat(n) * (1000000 + fee_proportional_millionths(n+1)) + 1000000 - 1) / 1000000`\n    - `total_fee_proportional_millionths(n+1) = ((total_fee_proportional_millionths(n) + fee_proportional_millionths(n+1)) * 1000000 + total_fee_proportional_millionths(n) * fee_proportional_millionths(n+1) + 1000000 - 1) / 1000000`\n    - `total_cltv_delta = cltv_delta(0) + cltv_delta(1) + ... + cltv_delta(n) + min_final_cltv_expiry_delta`\n  - MUST create the `encrypted_recipient_data` from the `encrypted_data_tlv` as required in [Route Blinding](#route-blinding).\n\nThe writer of the TLV `payload`:\n\n  - For every node inside a blinded route:\n    - MUST include the `encrypted_recipient_data` provided by the recipient\n    - For the first node in the blinded route:\n      - MUST include the `path_key` provided by the recipient in `current_path_key`\n    - If it is the final node:\n      - MUST include `amt_to_forward`, `outgoing_cltv_value` and `total_amount_msat`.\n      - The value set for `outgoing_cltv_value`: \n        - MUST use the current block height as a baseline value. \n        - if a [random offset](07-routing-gossip.md#recommendations-for-routing) was added to improve privacy:\n          - SHOULD add the offset to the baseline value.\n    - MUST NOT include any other tlv field.\n  - For every node outside of a blinded route:\n    - MUST include `amt_to_forward` and `outgoing_cltv_value`.\n    - For every non-final node:\n      - MUST include `short_channel_id`\n      - MUST NOT include `payment_data`\n    - For the final node:\n      - MUST NOT include `short_channel_id`\n      - if the recipient provided `payment_secret`:\n        - MUST include `payment_data`\n        - MUST set `payment_secret` to the one provided\n        - MUST set `total_msat` to the total amount it will send\n      - if the recipient provided `payment_metadata`:\n        - MUST include `payment_metadata` with every HTLC\n        - MUST not apply any limits to the size of `payment_metadata` except the limits implied by the fixed onion size\n\nThe reader:\n\n  - If `encrypted_recipient_data` is present:\n    - If `path_key` is set in the incoming `update_add_htlc`:\n      - MUST return an error if `current_path_key` is present.\n      - MUST use that `path_key` as `path_key` for decryption.\n    - Otherwise:\n      - MUST return an error if `current_path_key` is not present.\n      - MUST use that `current_path_key` as the `path_key` for decryption.\n      - SHOULD add a random delay before returning errors.\n    - MUST return an error if `encrypted_recipient_data` does not decrypt using the\n      `path_key` as described in [Route Blinding](#route-blinding).\n    - If `payment_constraints` is present:\n      - MUST return an error if:\n        - the expiry is greater than `encrypted_recipient_data.payment_constraints.max_cltv_expiry`.\n        - the amount is below `encrypted_recipient_data.payment_constraints.htlc_minimum_msat`.\n    - If `allowed_features` is missing:\n      - MUST process the message as if it were present and contained an empty array.\n    - MUST return an error if:\n      - `encrypted_recipient_data.allowed_features.features` contains an unknown feature bit (even if it is odd).\n      - `encrypted_recipient_data` contains both `short_channel_id` and `next_node_id`.\n      - the payment uses a feature not included in `encrypted_recipient_data.allowed_features.features`.\n    - If it is not the final node:\n      - MUST return an error if the payload contains other tlv fields than `encrypted_recipient_data` and `current_path_key`.\n      - MUST return an error if `encrypted_recipient_data` does not contain either `short_channel_id` or `next_node_id`.\n      - MUST return an error if `encrypted_recipient_data` does not contain `payment_relay`.\n      - MUST use values from `encrypted_recipient_data.payment_relay` to calculate `amt_to_forward` and `outgoing_cltv_value` as follows:\n        - `amt_to_forward = ((amount_msat - fee_base_msat) * 1000000 + 1000000 + fee_proportional_millionths - 1) / (1000000 + fee_proportional_millionths)`\n        - `outgoing_cltv_value = cltv_expiry - payment_relay.cltv_expiry_delta`\n    - If it is the final node:\n      - MUST return an error if the payload contains other tlv fields than `encrypted_recipient_data`, `current_path_key`, `amt_to_forward`, `outgoing_cltv_value` and `total_amount_msat`.\n      - MUST return an error if `amt_to_forward`, `outgoing_cltv_value` or `total_amount_msat` are not present.\n      - MUST return an error if `amt_to_forward` is below what it expects for the payment.\n      - MUST return an error if incoming `cltv_expiry` < `outgoing_cltv_value`.\n      - MUST return an error if incoming `cltv_expiry` < `current_block_height` + `min_final_cltv_expiry_delta`.\n  - Otherwise (it is not part of a blinded route):\n    - MUST return an error if `path_key` is set in the incoming `update_add_htlc` or `current_path_key` is present.\n    - MUST return an error if `amt_to_forward` or `outgoing_cltv_value` are not present.\n    - if it is not the final node:\n      - MUST return an error if:\n        - `short_channel_id` is not present,\n        - it cannot forward the HTLC to the peer indicated by the channel `short_channel_id`.\n        - incoming `amount_msat` - `fee` < `amt_to_forward` (where `fee` is the advertised fee as described in [BOLT #7](07-routing-gossip.md#htlc-fees))\n        - `cltv_expiry` - `cltv_expiry_delta` < `outgoing_cltv_value`\n  - If it is the final node:\n    - MUST treat `total_msat` as if it were equal to `amt_to_forward` if it is not present.\n    - MUST return an error if:\n      - incoming `amount_msat` < `amt_to_forward`.\n      - incoming `cltv_expiry` < `outgoing_cltv_value`.\n      - incoming `cltv_expiry` < `current_block_height` + `min_final_cltv_expiry_delta`.\n\nAdditional requirements are specified [here](#basic-multi-part-payments) for\nmulti-part payments, and [here](#route-blinding) for blinded payments.\n\n### Basic Multi-Part Payments\n\nAn HTLC may be part of a larger \"multi-part\" payment: such\n\"base\" atomic multipath payments will use the same `payment_hash` for\nall paths.\n\nNote that `amt_to_forward` is the amount for this HTLC only: a\n`total_msat` field containing a greater value is a promise by the\nultimate sender that the rest of the payment will follow in succeeding\nHTLCs; we call these outstanding HTLCs which have the same preimage,\nan \"HTLC set\".\n\nNote that there are two distinct tlv fields that can be used to transmit\n`total_msat`. The last one, `total_amount_msat`, was introduced with\nblinded paths for which the `payment_secret` doesn't make sense.\n\n`payment_metadata` is to be included in every payment part, so that\ninvalid payment details can be detected as early as possible.\n\n#### Requirements\n\nThe writer:\n  - if the invoice offers the `basic_mpp` feature:\n    - MAY send more than one HTLC to pay the invoice.\n    - MUST use the same `payment_hash` on all HTLCs in the set.\n    - SHOULD send all payments at approximately the same time.\n    - SHOULD try to use diverse paths to the recipient for each HTLC.\n    - SHOULD retry and/or re-divide HTLCs which fail.\n    - if the invoice specifies an `amount`:\n       - MUST set `total_msat` to at least that `amount`, and less\n         than or equal to twice `amount`.\n    - otherwise:\n      - MUST set `total_msat` to the amount it wishes to pay.\n    - MUST ensure that the total `amt_to_forward` of the HTLC set which arrives\n      at the payee is equal to or greater than `total_msat`.\n    - MUST NOT send another HTLC if the total `amt_to_forward` of the HTLC set\n      is already greater or equal to `total_msat`.\n    - MUST include `payment_secret`.\n  - otherwise:\n    - MUST set `total_msat` equal to `amt_to_forward`.\n\nThe final node:\n  - MUST fail the HTLC if dictated by Requirements under [Failure Messages](#failure-messages)\n    - Note: \"amount paid\" specified there is the `total_msat` field.\n  - if it does not support `basic_mpp`:\n    - MUST fail the HTLC if `total_msat` is not exactly equal to `amt_to_forward`.\n  - otherwise, if it supports `basic_mpp`:\n    - MUST add it to the HTLC set corresponding to that `payment_hash`.\n    - SHOULD fail the entire HTLC set if `total_msat` is not the same for\n      all HTLCs in the set.\n    - if the total `amt_to_forward` of this HTLC set is equal to or greater\n      than `total_msat`:\n      - SHOULD fulfill all HTLCs in the HTLC set\n    - otherwise, if the total `amt_to_forward` of this HTLC set is less than\n      `total_msat`:\n      - MUST NOT fulfill any HTLCs in the HTLC set\n      - MUST fail all HTLCs in the HTLC set after some reasonable timeout.\n        - SHOULD wait for at least 60 seconds after the initial HTLC.\n        - SHOULD use `mpp_timeout` for the failure message.\n      - MUST require `payment_secret` for all HTLCs in the set.\n    - if it fulfills any HTLCs in the HTLC set:\n       - MUST fulfill the entire HTLC set.\n\n#### Rationale\n\nIf `basic_mpp` is present it causes a delay to allow other partial\npayments to combine.  The total amount must be sufficient for the\ndesired payment, just as it must be for single payments.  But this must\nbe reasonably bounded to avoid a denial-of-service.\n\nBecause invoices do not necessarily specify an amount, and because\npayers can add noise to the final amount, the total amount must be\nsent explicitly.  The requirements allow exceeding this slightly, as\nit simplifies adding noise to the amount when splitting, as well as\nscenarios in which the senders are genuinely independent (friends\nsplitting a bill, for example).\n\nBecause a node may need to pay more than its desired amount (due to the\n`htlc_minimum_msat` value of channels in the desired path), nodes are allowed\nto pay more than the `total_msat` they specified. Otherwise, nodes would be\nconstrained in which paths they can take when retrying payments along specific\npaths. However, no individual HTLC may be for less than the difference between\nthe total paid and `total_msat`.\n\nThe restriction on sending an HTLC once the set is over the agreed total prevents the preimage being released before all\nthe partial payments have arrived: that would allow any intermediate\nnode to immediately claim any outstanding partial payments.\n\nAn implementation may choose not to fulfill an HTLC set which\notherwise meets the amount criterion (eg. some other failure, or\ninvoice timeout), however if it were to fulfill only some of them,\nintermediary nodes could simply claim the remaining ones.\n\n## Route Blinding\n\n1. subtype: `blinded_path`\n2. data:\n   * [`sciddir_or_pubkey`:`first_node_id`]\n   * [`point`:`first_path_key`]\n   * [`byte`:`num_hops`]\n   * [`num_hops*blinded_path_hop`:`path`]\n\n1. subtype: `blinded_path_hop`\n2. data:\n    * [`point`:`blinded_node_id`]\n    * [`u16`:`enclen`]\n    * [`enclen*byte`:`encrypted_recipient_data`]\n\nA blinded path consists of:\n1. an initial introduction point (`first_node_id`)\n2. an initial key to share a secret with the first node_id (`first_path_key`)\n3. a series of tweaked node ids (`path.blinded_node_id`)\n4. a series of binary blobs encrypted to the nodes (`path.encrypted_recipient_data`)\n   to tell them the next hop.\n\nFor example, Dave wants Alice to reach him via public node Bob then\nCarol.  He creates a chain of public keys (\"path_keys\") for Bob, Carol\nand finally himself, so he can share a secret with each of them.  These\nkeys are a simple chain, so each node can derive the next `path_key` without\nhaving to be told explicitly.\n\nFrom these shared secrets, Dave creates and encrypts three `encrypted_data_tlv`s:\n1. encrypted_data_bob: For Bob to tell him to forward to Carol\n2. encrypted_data_carol: For Carol to tell her to forward to him\n3. encrypted_data_dave: For himself to indicate the path was used, and any metadata he wants.\n\nTo mask the node ids, he also derives three blinding factors from the\nshared secrets, which turn Bob into Bob', Carol into Carol' and Dave\ninto Dave'.\n\nSo this is the `blinded_path` he hands to Alice.\n\n1. `first_node_id`: Bob\n2. `first_path_key`: the first path key for Bob \n3. `path`: [Bob', encrypted_data_bob], [Carol', encrypted_data_carol], [Dave', encrypted_data_dave]\n\nThere are two different ways for Alice to construct an onion which gets to Bob (since he's probably not a direct peer of hers) which are described in the requirements below.\n\nBut after Bob the path is always the same: he will send Carol the `path_key` he derived, along with the onion.  She will use the `path_key` to derive the tweak for the onion (which Alice encrypted for Carol' not Carol) so she can decrypt it, and also to derive the key to decrypt `encrypted_data_tlv` which will tell her to forward to Dave (and possibly additional restrictions Dave specified).\n\n### Requirements\n\nNote that the creator of the blinded path (i.e. the recipient) is creating it for the sender to use to create an onion, and for the intermediate nodes to read the instructions, hence there are two reader sections here.\n\nThe writer of a `blinded_path`:\n\n- MUST create a viable path to itself ($`N_r`$) i.e. $`N_0 \\rightarrow N_1 \\rightarrow ... \\rightarrow N_r`$.\n- MUST set `first_node_id` to $`N_0`$\n- MUST create a series of ECDH shared secrets for each node in the route using the following algorithm:\n  - $`e_0 \\leftarrow \\{0;1\\}^{256}`$ ($`e_0`$ SHOULD be obtained via CSPRNG)\n  - $`E_0 = e_0 \\cdot G`$\n  - For every node in the route:\n    - let $`N_i = k_i * G`$ be the `node_id` ($`k_i`$ is $`N_i`$'s private key)\n    - $`ss_i = SHA256(e_i * N_i) = SHA256(k_i * E_i)`$ (ECDH shared secret known only by $`N_r`$ and $`N_i`$)\n    - $`rho_i = HMAC256(\\text{\"rho\"}, ss_i)`$ (key used to encrypt `encrypted_recipient_data` for $`N_i`$ by $`N_r`$)\n    - $`e_{i+1} = SHA256(E_i || ss_i) * e_i`$ (ephemeral private path key, only known by $`N_r`$)\n    - $`E_{i+1} = SHA256(E_i || ss_i) * E_i`$ (`path_key`. NB: $`N_i`$ MUST NOT learn $`e_i`$)\n- MUST set `first_path_key` to $`E_0`$\n- MUST create a series of blinded node IDs $`B_i`$ for each node using the following algorithm:\n  - $`B_i = HMAC256(\\text{\"blinded\\_node\\_id\"}, ss_i) * N_i`$ (blinded `node_id` for $`N_i`$, private key known only by $`N_i`$)\n  - MUST set `blinded_node_id` for each `blinded_path_hop` in `path` to $`B_i`$\n- MAY replace $`E_{i+1}`$ with a different value, but if it does:\n  - MUST set `encrypted_data_tlv[i].next_path_key_override` to $`E_{i+1}`$\n- MAY store private data in `encrypted_data_tlv[r].path_id` to verify that the route is used in the right context and was created by them\n- SHOULD add padding data to ensure all `encrypted_data_tlv[i]` have the same length\n- MUST encrypt each `encrypted_data_tlv[i]` with ChaCha20-Poly1305 using the corresponding $`rho_i`$ key and an all-zero nonce to produce `encrypted_recipient_data[i]`\n- MAY add additional \"dummy\" hops at the end of the path (which it will ignore on receipt) to obscure the path length.\n\nThe reader of the `blinded_path`:\n- MUST prepend its own onion payloads to reach the `first_node_id`\n- MUST include the corresponding `encrypted_recipient_data` in each onion payload within `path`\n- For the first entry in `path`:\n  - if it is sending a payment:\n    - SHOULD create an unblinded onion payment to `first_node_id`, and include `first_path_key` as `current_path_key`.\n  - otherwise:\n    - MUST encrypt the first blinded path onion to the first `blinded_node_id`.\n    - MUST set `next_path_key_override` in the prior onion payload to `first_path_key`.\n- For each successive entry in `path`:\n  - MUST encrypt the onion to the corresponding `blinded_node_id`.\n\nThe reader of the `encrypted_recipient_data`:\n\n- MUST compute:\n  - $`ss_i = SHA256(k_i * E_i)`$ (standard ECDH)\n  - $`b_i = HMAC256(\\text{\"blinded\\_node\\_id\"}, ss_i) * k_i`$\n  - $`rho_i = HMAC256(\\text{\"rho\"}, ss_i)`$\n- MUST decrypt the `encrypted_recipient_data` field using $`rho_i`$ as a key using ChaCha20-Poly1305 and an all-zero nonce key.\n- If the `encrypted_recipient_data` field is missing, cannot be decrypted into an `encrypted_data_tlv` or contains unknown even fields:\n  - MUST return an error\n- If the `encrypted_data_tlv` contains a `next_path_key_override`:\n  - MUST use it as the next `path_key`.\n- Otherwise:\n  - MUST use $`E_{i+1} = SHA256(E_i || ss_i) * E_i`$ as the next `path_key`\n- MUST forward the onion and include the next `path_key` in the lightning\n  message for the next node\n- If it is the final recipient:\n  - MUST ignore the message if the `path_id` does not match the blinded route it\n    created for this purpose\n\n### Rationale\n\nRoute blinding is a lightweight technique to provide recipient anonymity.\nIt's more flexible than rendezvous routing because it simply replaces the public\nkeys of the nodes in the route with random public keys while letting senders\nchoose what data they put in the onion for each hop. Blinded routes are also\nreusable in some cases (e.g. onion messages).\n\nEach node in the blinded route needs to receive $`E_i`$ to be able to decrypt\nthe onion and the `encrypted_recipient_data` payload.\n\nWhen concatenating two blinded routes generated by different nodes, the\nlast node of the first route needs to know the first `path_key` of the\nsecond route: the `next_path_key_override` field must be used to transmit this\ninformation.  In theory this method could be used for payments (not just\nonion messages), but we recommend using an unblinded path to reach the \n`first_node_id` and using `current_path_key` there: this means that the\nnode can tell it is being used as an introductory point, but also does\nnot require blinded path support on the nodes to reach that point, and\ngives meaningful errors on the unblinded part of the payment.\n\nThe final recipient must verify that the blinded route is used in the right\ncontext (e.g. for a specific payment) and was created by them. Otherwise a\nmalicious sender could create different blinded routes to all the nodes that\nthey suspect could be the real recipient and try them until one accepts the\nmessage. The recipient can protect against that by storing $`E_r`$ and the\ncontext (e.g. a `payment_hash`), and verifying that they match when receiving\nthe onion. Otherwise, to avoid additional storage cost, it can put some private\ncontext information in the `path_id` field (e.g. the `payment_preimage`) and\nverify that when receiving the onion. Note that it's important to use private\ninformation in that case, that senders cannot have access to.\n\nWhenever the introduction point receives a failure from the blinded route, it\nshould add a random delay before forwarding the error. Failures are likely to\nbe probing attempts and message timing may help the attacker infer its distance\nto the final recipient.\n\nThe `padding` field can be used to ensure that all `encrypted_recipient_data` have the\nsame length. It's particularly useful when adding dummy hops at the end of a\nblinded route, to prevent the sender from figuring out which node is the final\nrecipient.\n\nWhen route blinding is used for payments, the recipient specifies the fees and\nexpiry that blinded nodes should apply to the payment instead of letting the\nsender configure them. The recipient also adds additional constraints to the\npayments that can go through that route to protect against probing attacks that\nwould let malicious nodes unblind the identity of the blinded nodes. It should\nset `payment_constraints.max_cltv_expiry` to restrict the lifetime of a blinded\nroute and reduce the risk that an intermediate node updates its fees and rejects\npayments (which could be used to unblind nodes inside the route).\n\n### Inside `encrypted_recipient_data`: `encrypted_data_tlv`\n\nThe `encrypted_recipient_data` is a TLV stream, encrypted for a given blinded node, that\nmay contain the following TLV fields:\n\n1. `tlv_stream`: `encrypted_data_tlv`\n2. types:\n    1. type: 1 (`padding`)\n    2. data:\n        * [`...*byte`:`padding`]\n    1. type: 2 (`short_channel_id`)\n    2. data:\n        * [`short_channel_id`:`short_channel_id`]\n    1. type: 4 (`next_node_id`)\n    2. data:\n        * [`point`:`node_id`]\n    1. type: 6 (`path_id`)\n    2. data:\n        * [`...*byte`:`data`]\n    1. type: 8 (`next_path_key_override`)\n    2. data:\n        * [`point`:`path_key`]\n    1. type: 10 (`payment_relay`)\n    2. data:\n        * [`u16`:`cltv_expiry_delta`]\n        * [`u32`:`fee_proportional_millionths`]\n        * [`tu32`:`fee_base_msat`]\n    1. type: 12 (`payment_constraints`)\n    2. data:\n        * [`u32`:`max_cltv_expiry`]\n        * [`tu64`:`htlc_minimum_msat`]\n    1. type: 14 (`allowed_features`)\n    2. data:\n        * [`...*byte`:`features`]\n\n#### Rationale\n\nEncrypted recipient data is created by the final recipient to give to the\nsender, containing instructions for the node on how to handle the message (it can also be created by the sender themselves: the node forwarding cannot tell).  It's used\nin both payment onions and onion messages onions.  See [Route Blinding](#route-blinding).\n\n\n# Accepting and Forwarding a Payment\n\nOnce a node has decoded the payload it either accepts the payment locally, or forwards it to the peer indicated as the next hop in the payload.\n\n## Non-strict Forwarding\n\nA node MAY forward an HTLC along an outgoing channel other than the one\nspecified by `short_channel_id`, so long as the receiver has the same node\npublic key intended by `short_channel_id`. Thus, if `short_channel_id` connects\nnodes A and B, the HTLC can be forwarded across any channel connecting A and B.\nFailure to adhere will result in the receiver being unable to decrypt the next\nhop in the onion packet.\n\n### Rationale\n\nIn the event that two peers have multiple channels, the downstream node will be\nable to decrypt the next hop payload regardless of which channel the packet is\nsent across.\n\nNodes implementing non-strict forwarding are able to make real-time assessments\nof channel bandwidths with a particular peer, and use the channel that is\nlocally-optimal.\n\nFor example, if the channel specified by `short_channel_id` connecting A and B\ndoes not have enough bandwidth at forwarding time, then A is able use a\ndifferent channel that does. This can reduce payment latency by preventing the\nHTLC from failing due to bandwidth constraints across `short_channel_id`, only\nto have the sender attempt the same route differing only in the channel between\nA and B.\n\nNon-strict forwarding allows nodes to make use of private channels connecting\nthem to the receiving node, even if the channel is not known in the public\nchannel graph.\n\n### Recommendation\n\nImplementations using non-strict forwarding should consider applying the same\nfee schedule to all channels with the same peer, as senders are likely to select\nthe channel which results in the lowest overall cost. Having distinct policies\nmay result in the forwarding node accepting fees based on the most optimal fee\nschedule for the sender, even though they are providing aggregate bandwidth\nacross all channels with the same peer.\n\nAlternatively, implementations may choose to apply non-strict forwarding only to\nlike-policy channels to ensure their expected fee revenue does not deviate by\nusing an alternate channel.\n\n## Payload for the Last Node\n\nWhen building the route, the origin node MUST use a payload for\nthe final node with the following values:\n\n* `payment_secret`: set to the payment secret specified by the recipient (e.g.\n  `payment_secret` from a [BOLT #11](11-payment-encoding.md) payment invoice)\n* `outgoing_cltv_value`: set to the final expiry specified by the recipient (e.g.\n  `min_final_cltv_expiry_delta` from a [BOLT #11](11-payment-encoding.md) payment invoice)\n* `amt_to_forward`: set to the final amount specified by the recipient (e.g. `amount`\n  from a [BOLT #11](11-payment-encoding.md) payment invoice)\n\nThis allows the final node to check these values and return errors if needed,\nbut it also eliminates the possibility of probing attacks by the second-to-last\nnode. Such attacks could, otherwise, attempt to discover if the receiving peer is the\nlast one by re-sending HTLCs with different amounts/expiries.\nThe final node will extract its onion payload from the HTLC it has received and\ncompare its values against those of the HTLC. See the\n[Returning Errors](#returning-errors) section below for more details.\n\nIf not for the above, since it need not forward payments, the final node could\nsimply discard its payload.\n\n# Shared Secret\n\nThe origin node establishes a shared secret with each hop along the route using\nElliptic-curve Diffie-Hellman between the sender's ephemeral key at that hop and\nthe hop's node ID key. The resulting curve point is serialized to the\ncompressed format and hashed using `SHA256`. The hash output is used\nas the 32-byte shared secret.\n\nElliptic-curve Diffie-Hellman (ECDH) is an operation on an EC private key and\nan EC public key that outputs a curve point. For this protocol, the ECDH\nvariant implemented in `libsecp256k1` is used, which is defined over the\n`secp256k1` elliptic curve. During packet construction, the sender uses the\nephemeral private key and the hop's public key as inputs to ECDH, whereas\nduring packet forwarding, the hop uses the ephemeral public key and its own\nnode ID private key. Because of the properties of ECDH, they will both derive\nthe same value.\n\n# Blinding Ephemeral Onion Keys\n\nIn order to ensure multiple hops along the route cannot be linked by the\nephemeral public keys they see, the key is blinded at each hop. The blinding is\ndone in a deterministic way that allows the sender to compute the\ncorresponding blinded private keys during packet construction.\n\nThe blinding of an EC public key is a single scalar multiplication of\nthe EC point representing the public key with a 32-byte blinding factor. Due to\nthe commutative property of scalar multiplication, the blinded private key is\nthe multiplicative product of the input's corresponding private key with the\nsame blinding factor.\n\nThe blinding factor itself is computed as a function of the ephemeral public key\nand the 32-byte shared secret. Concretely, it is the `SHA256` hash value of the\nconcatenation of the public key serialized in its compressed format and the\nshared secret.\n\n# Packet Construction\n\nIn the following example, it's assumed that a _sending node_ (origin node),\n`n_0`, wants to route a packet to a _receiving node_ (final node), `n_r`.\nFirst, the sender computes a route `{n_0, n_1, ..., n_{r-1}, n_r}`, where `n_0`\nis the sender itself and `n_r` is the final recipient. All nodes `n_i` and\n`n_{i+1}` MUST be peers in the overlay network route. The sender then gathers the\npublic keys for `n_1` to `n_r` and generates a random 32-byte `sessionkey`.\nOptionally, the sender may pass in _associated data_, i.e. data that the\npacket commits to but that is not included in the packet itself. Associated\ndata will be included in the HMACs and must match the associated data provided\nduring integrity verification at each hop.\n\nTo construct the onion, the sender initializes the ephemeral private key for the\nfirst hop `ek_1` to the `sessionkey` and derives from it the corresponding\nephemeral public key `epk_1` by multiplying with the `secp256k1` base point. For\neach of the `k` hops along the route, the sender then iteratively computes the\nshared secret `ss_k` and ephemeral key for the next hop `ek_{k+1}` as follows:\n\n - The sender executes ECDH with the hop's public key and the ephemeral private\n key to obtain a curve point, which is hashed using `SHA256` to produce the\n shared secret `ss_k`.\n - The blinding factor is the `SHA256` hash of the concatenation between the\n ephemeral public key `epk_k` and the shared secret `ss_k`.\n - The ephemeral private key for the next hop `ek_{k+1}` is computed by\n multiplying the current ephemeral private key `ek_k` by the blinding factor.\n - The ephemeral public key for the next hop `epk_{k+1}` is derived from the\n ephemeral private key `ek_{k+1}` by multiplying with the base point.\n\nOnce the sender has all the required information above, it can construct the\npacket. Constructing a packet routed over `r` hops requires `r` 32-byte\nephemeral public keys, `r` 32-byte shared secrets, `r` 32-byte blinding factors,\nand `r` variable length `hop_payload` payloads.\nThe construction returns a single 1366-byte packet along with the first receiving peer's address.\n\nThe packet construction is performed in the reverse order of the route, i.e.\nthe last hop's operations are applied first.\n\nThe packet is initialized with 1300 _random_ bytes derived from a CSPRNG\n(ChaCha20). The _pad_ key referenced above is used to extract additional random\nbytes from a ChaCha20 stream, using it as a CSPRNG for this purpose.  Once the\n`paddingKey` has been obtained, ChaCha20 is used with an all zero nonce, to\ngenerate 1300 random bytes. Those random bytes are then used as the starting\nstate of the mix-header to be created.\n\nA filler is generated (see [Filler Generation](#filler-generation)) using the\nshared secret.\n\nFor each hop in the route, in reverse order, the sender applies the\nfollowing operations:\n\n - The _rho_-key and _mu_-key are generated using the hop's shared secret.\n - `shift_size` is defined as the length of the `hop_payload` plus the bigsize encoding of the length and the length of that HMAC. Thus if the payload length is `l` then the `shift_size` is `1 + l + 32` for `l < 253`, otherwise `3 + l + 32` due to the bigsize encoding of `l`.\n - The `hop_payload` field is right-shifted by `shift_size` bytes, discarding the last `shift_size`\n bytes that exceed its 1300-byte size.\n - The bigsize-serialized length, serialized `hop_payload` and `hmac` are copied into the following `shift_size` bytes.\n - The _rho_-key is used to generate 1300 bytes of pseudo-random byte stream\n which is then applied, with `XOR`, to the `hop_payloads` field.\n - If this is the last hop, i.e. the first iteration, then the tail of the\n `hop_payloads` field is overwritten with the routing information `filler`.\n - The next HMAC is computed (with the _mu_-key as HMAC-key) over the\n concatenated `hop_payloads` and associated data.\n\nThe resulting final HMAC value is the HMAC that will be used by the first\nreceiving peer in the route.\n\nThe packet generation returns a serialized packet that contains the `version`\nbyte, the ephemeral pubkey for the first hop, the HMAC for the first hop, and\nthe obfuscated `hop_payloads`.\n\nThe following Go code is an example implementation of the packet construction:\n\n```Go\nfunc NewOnionPacket(paymentPath []*btcec.PublicKey, sessionKey *btcec.PrivateKey,\n\thopsData []HopData, assocData []byte) (*OnionPacket, error) {\n\n\tnumHops := len(paymentPath)\n\thopSharedSecrets := make([][sha256.Size]byte, numHops)\n\n\t// Initialize ephemeral key for the first hop to the session key.\n\tvar ephemeralKey big.Int\n\tephemeralKey.Set(sessionKey.D)\n\n\tfor i := 0; i < numHops; i++ {\n\t\t// Perform ECDH and hash the result.\n\t\tecdhResult := scalarMult(paymentPath[i], ephemeralKey)\n\t\thopSharedSecrets[i] = sha256.Sum256(ecdhResult.SerializeCompressed())\n\n\t\t// Derive ephemeral public key from private key.\n\t\tephemeralPrivKey := btcec.PrivKeyFromBytes(btcec.S256(), ephemeralKey.Bytes())\n\t\tephemeralPubKey := ephemeralPrivKey.PubKey()\n\n\t\t// Compute blinding factor.\n\t\tsha := sha256.New()\n\t\tsha.Write(ephemeralPubKey.SerializeCompressed())\n\t\tsha.Write(hopSharedSecrets[i])\n\n\t\tvar blindingFactor big.Int\n\t\tblindingFactor.SetBytes(sha.Sum(nil))\n\n\t\t// Blind ephemeral key for next hop.\n\t\tephemeralKey.Mul(&ephemeralKey, &blindingFactor)\n\t\tephemeralKey.Mod(&ephemeralKey, btcec.S256().Params().N)\n\t}\n\n\t// Generate the padding, called \"filler strings\" in the paper.\n\tfiller := generateHeaderPadding(\"rho\", numHops, hopDataSize, hopSharedSecrets)\n\n\t// Allocate and initialize fields to zero-filled slices\n\tvar mixHeader [routingInfoSize]byte\n\tvar nextHmac [hmacSize]byte\n        \n        // Our starting packet needs to be filled out with random bytes, we\n        // generate some deterministically using the session private key.\n        paddingKey := generateKey(\"pad\", sessionKey.Serialize()\n        paddingBytes := generateCipherStream(paddingKey, routingInfoSize)\n        copy(mixHeader[:], paddingBytes)\n\n\t// Compute the routing information for each hop along with a\n\t// MAC of the routing information using the shared key for that hop.\n\tfor i := numHops - 1; i >= 0; i-- {\n\t\trhoKey := generateKey(\"rho\", hopSharedSecrets[i])\n\t\tmuKey := generateKey(\"mu\", hopSharedSecrets[i])\n\n\t\thopsData[i].HMAC = nextHmac\n\n\t\t// Shift and obfuscate routing information\n\t\tstreamBytes := generateCipherStream(rhoKey, numStreamBytes)\n\n\t\trightShift(mixHeader[:], hopDataSize)\n\t\tbuf := &bytes.Buffer{}\n\t\thopsData[i].Encode(buf)\n\t\tcopy(mixHeader[:], buf.Bytes())\n\t\txor(mixHeader[:], mixHeader[:], streamBytes[:routingInfoSize])\n\n\t\t// These need to be overwritten, so every node generates a correct padding\n\t\tif i == numHops-1 {\n\t\t\tcopy(mixHeader[len(mixHeader)-len(filler):], filler)\n\t\t}\n\n\t\tpacket := append(mixHeader[:], assocData...)\n\t\tnextHmac = calcMac(muKey, packet)\n\t}\n\n\tpacket := &OnionPacket{\n\t\tVersion:      0x00,\n\t\tEphemeralKey: sessionKey.PubKey(),\n\t\tRoutingInfo:  mixHeader,\n\t\tHeaderMAC:    nextHmac,\n\t}\n\treturn packet, nil\n}\n```\n\n# Onion Decryption\n\nThere are two kinds of `onion_packet` we use:\n\n1. `onion_routing_packet` in `update_add_htlc` for payments, which contains a `payload` TLV (see [Adding an HTLC](02-peer-protocol.md#adding-an-htlc-update_add_htlc))\n2. `onion_message_packet` in `onion_message` for messages, which contains an `onionmsg_tlv` TLV (see [Onion Messages](#onion-messages))\n\nThose sections specify the `associated_data` to use, the `path_key` (if any), the extracted payload format and handling (including how to determine the next peer, if any), and how to handle errors.  The processing itself is identical.\n\n## Requirements\n\nA reader:\n  - if `version` is not 0:\n    - MUST abort processing the packet and fail.\n  - if `public_key` is not a valid pubkey:\n    - MUST abort processing the packet and fail.\n  - if the onion is for a payment:\n    - if `hmac` has previously been received:\n      - if the preimage is known:\n        - MAY immediately redeem the HTLC using the preimage.\n      - otherwise:\n        - MUST abort processing the packet and fail.\n  - if `path_key` is specified:\n    - Calculate the `blinding_ss` as ECDH(`path_key`, `node_privkey`).\n    - Either:\n      - Tweak `public_key` by multiplying by $`HMAC256(\\text{\"blinded\\_node\\_id\"}, blinding\\_ss)`$.\n    - or (equivalently):\n      - Tweak its own `node_privkey` below by multiplying by $`HMAC256(\\text{\"blinded\\_node\\_id\"}, blinding\\_ss)`$.\n  - Derive the shared secret `ss` as ECDH(`public_key`, `node_privkey`) (see [Shared Secret](#shared-secret)).\n  - Derive `mu` as $`HMAC256(\\text{\"mu\"}, ss)`$ (see [Key Generation](#key-generation)).\n  - Derive the HMAC as $`HMAC256(mu, hop\\_payloads || associated\\_data)`$.\n  - MUST use a constant time comparison of the computed HMAC and `hmac`.\n  - If the computed HMAC and `hmac` differ:\n    - MUST abort processing the packet and fail.\n  - Derive `rho` as $`HMAC256(\\text{\"rho\"}, ss)`$ (see [Key Generation](#key-generation)).\n  - Derive `bytestream` of twice the length of `hop_payloads` using `rho` (see [Pseudo Random Byte Stream](pseudo-random-byte-stream)).\n  - Set `unwrapped_payloads` to the XOR of `hop_payloads` and `bytestream`.\n  - Remove a `bigsize` from the front of `unwrapped_payloads` as `payload_length`.  If that is malformed:\n    - MUST abort processing the packet and fail.\n  - If the `payload_length` is less than two:\n    - MUST abort processing the packet and fail.\n  - If there are fewer than `payload_length` bytes remaining in `unwrapped_payloads`:\n    - MUST abort processing the packet and fail.\n  - Remove `payload_length` bytes from the front of `unwrapped_payloads`, as the current `payload`.\n  - If there are fewer than 32 bytes remaining in `unwrapped_payloads`:\n    - MUST abort processing the packet and fail.\n  - Remove 32 bytes as `next_hmac` from the front of `unwrapped_payloads`.\n  - If `unwrapped_payloads` is smaller than `hop_payloads`:\n    - MUST abort processing the packet and fail.\n  - If `next_hmac` is not all-zero (not the final node):\n    - Derive `blinding_tweak` as $`SHA256(public\\_key || ss)`$ (see [Blinding Ephemeral Onion Keys](#blinding-ephemeral-onion-keys)).\n    - SHOULD forward an onion to the next peer with:\n      - `version` set to 0.\n      - `public_key` set to the incoming `public_key` multiplied by `blinding_tweak`.\n      - `hop_payloads` set to the `unwrapped_payloads`, truncated to the incoming `hop_payloads` size.\n      - `hmac` set to `next_hmac`.\n    - If it cannot forward:\n      - MUST fail.\n  - Otherwise (all-zero `next_hmac`):\n    - This is the final destination of the onion.\n\n## Rationale\n\nIn the case where blinded paths are used, the sender did not actually encrypt this onion for our `node_id`, but for a tweaked version: we can derive the tweak used from `path_key` which is given alongside the onion.  Then we either tweak our node private key the same way to decrypt the onion, or tweak to the onion ephemeral key which is mathematically equivalent.\n\n# Filler Generation\n\nUpon receiving a packet, the processing node extracts the information destined\nfor it from the route information and the per-hop payload.\nThe extraction is done by deobfuscating and left-shifting the field.\nThis would make the field shorter at each hop, allowing an attacker to deduce the\nroute length. For this reason, the field is pre-padded before forwarding.\nSince the padding is part of the HMAC, the origin node will have to pre-generate an\nidentical padding (to that which each hop will generate) in order to compute the\nHMACs correctly for each hop.\nThe filler is also used to pad the field-length, in the case that the selected\nroute is shorter than 1300 bytes.\n\nBefore deobfuscating the `hop_payloads`, the processing node pads it with 1300\n`0x00`-bytes, such that the total length is `2*1300`.\nIt then generates the pseudo-random byte stream, of matching length, and applies\nit with `XOR` to the `hop_payloads`.\nThis deobfuscates the information destined for it, while simultaneously\nobfuscating the added `0x00`-bytes at the end.\n\nIn order to compute the correct HMAC, the origin node has to pre-generate the\n`hop_payloads` for each hop, including the incrementally obfuscated padding added\nby each hop. This incrementally obfuscated padding is referred to as the\n`filler`.\n\nThe following example code shows how the filler is generated in Go:\n\n```Go\nfunc generateFiller(key string, numHops int, hopSize int, sharedSecrets [][sharedSecretSize]byte) []byte {\n\tfillerSize := uint((numMaxHops + 1) * hopSize)\n\tfiller := make([]byte, fillerSize)\n\n\t// The last hop does not obfuscate, it's not forwarding anymore.\n\tfor i := 0; i < numHops-1; i++ {\n\n\t\t// Left-shift the field\n\t\tcopy(filler[:], filler[hopSize:])\n\n\t\t// Zero-fill the last hop\n\t\tcopy(filler[len(filler)-hopSize:], bytes.Repeat([]byte{0x00}, hopSize))\n\n\t\t// Generate pseudo-random byte stream\n\t\tstreamKey := generateKey(key, sharedSecrets[i])\n\t\tstreamBytes := generateCipherStream(streamKey, fillerSize)\n\n\t\t// Obfuscate\n\t\txor(filler, filler, streamBytes)\n\t}\n\n\t// Cut filler down to the correct length (numHops+1)*hopSize\n\t// bytes will be prepended by the packet generation.\n\treturn filler[(numMaxHops-numHops+2)*hopSize:]\n}\n```\n\nNote that this example implementation is for demonstration purposes only; the\n`filler` can be generated much more efficiently.\nThe last hop need not obfuscate the `filler`, since it won't forward the packet\nany further and thus need not extract an HMAC either.\n\n# Returning Errors\n\nThe onion routing protocol includes a simple mechanism for returning encrypted\nerror messages to the origin node.\nThe returned error messages may be failures reported by any hop, including the\nfinal node.\nThe format of the forward packet is not usable for the return path, since no hop\nbesides the origin has access to the information required for its generation.\nNote that these error messages are not reliable, as they are not placed on-chain\ndue to the possibility of hop failure.\n\nIntermediate hops store the shared secret from the forward path and reuse it to\nobfuscate any corresponding return packet during each hop.\nIn addition, each node locally stores data regarding its own sending peer in the\nroute, so it knows where to return-forward any eventual return packets.\nThe node generating the error message (_erring node_) builds a return packet\nconsisting of the following fields:\n\n1. data:\n   * [`32*byte`:`hmac`]\n   * [`u16`:`failure_len`]\n   * [`failure_len*byte`:`failuremsg`]\n   * [`u16`:`pad_len`]\n   * [`pad_len*byte`:`pad`]\n\nWhere `hmac` is an HMAC authenticating the remainder of the packet, with a key\ngenerated using the above process, with key type `um`, `failuremsg` as defined\nbelow, and `pad` as the extra bytes used to conceal length.\n\nThe erring node then generates a new key, using the key type `ammag`.\nThis key is then used to generate a pseudo-random stream, which is in turn\napplied to the packet using `XOR`.\n\nThe obfuscation step is repeated by every hop along the return path.\nUpon receiving a return packet, each hop generates its `ammag`, generates the\npseudo-random byte stream, and applies the result to the return packet before\nreturn-forwarding it.\n\nThe origin node is able to detect that it's the intended final recipient of the\nreturn message, because of course, it was the originator of the corresponding\nforward packet.\nWhen an origin node receives an error message matching a transfer it initiated\n(i.e. it cannot return-forward the error any further) it generates the `ammag`\nand `um` keys for each hop in the route.\nIt then iteratively decrypts the error message, using each hop's `ammag`\nkey, and computes the HMAC, using each hop's `um` key.\nThe origin node can detect the sender of the error message by matching the\n`hmac` field with the computed HMAC.\n\nThe association between the forward and return packets is handled outside of\nthis onion routing protocol, e.g. via association with an HTLC in a payment\nchannel.\n\nError handling for HTLCs with `path_key` is particularly fraught,\nsince differences in implementations (or versions) may be leveraged to\nde-anonymize elements of the blinded path. Thus the decision turn every\nerror into `invalid_onion_blinding` which will be converted to a normal\nonion error by the introduction point.\n\n### Requirements\n\nThe _erring node_:\n  - MUST set `pad` such that the `failure_len` plus `pad_len` is at least 256.\n  - SHOULD set `pad` such that the `failure_len` plus `pad_len` is equal to\n    256. Deviating from this may cause older nodes to be unable to parse the\n    return message.\n\nThe _origin node_:\n  - once the return message has been decrypted:\n    - SHOULD store a copy of the message.\n    - SHOULD continue decrypting, until the loop has been repeated 27 times\n    (maximum route length of tlv payload type).\n    - SHOULD use constant `ammag` and `um` keys to obfuscate the route length.\n\n### Rationale\n\nThe requirements for the _origin node_ should help hide the payment sender.\nBy continuing decrypting 27 times (dummy decryption cycles after the error is found)\nthe erroring node cannot learn its relative position in the route by performing\na timing analysis if the sender were to retry the same route multiple times.\n\n## Failure Messages\n\nThe failure message encapsulated in `failuremsg` has an identical format as\na normal message: a 2-byte type `failure_code` followed by data applicable\nto that type. The message data is followed by an optional\n[TLV stream](01-messaging.md#type-length-value-format).\n\nBelow is a list of the currently supported `failure_code`\nvalues, followed by their use case requirements.\n\nNotice that the `failure_code`s are not of the same type as other message types,\ndefined in other BOLTs, as they are not sent directly on the transport layer\nbut are instead wrapped inside return packets.\nThe numeric values for the `failure_code` may therefore reuse values, that are\nalso assigned to other message types, without any danger of causing collisions.\n\nThe top byte of `failure_code` can be read as a set of flags:\n* 0x8000 (BADONION): unparsable onion encrypted by sending peer\n* 0x4000 (PERM): permanent failure (otherwise transient)\n* 0x2000 (NODE): node failure (otherwise channel)\n* 0x1000 (UPDATE): channel forwarding parameter was violated\n\nThe following `failure_code`s are defined:\n\n1. type: NODE|2 (`temporary_node_failure`)\n\nGeneral temporary failure of the processing node.\n\n1. type: PERM|NODE|2 (`permanent_node_failure`)\n\nGeneral permanent failure of the processing node.\n\n1. type: PERM|NODE|3 (`required_node_feature_missing`)\n\nThe processing node has a required feature which was not in this onion.\n\n1. type: BADONION|PERM|4 (`invalid_onion_version`)\n2. data:\n   * [`sha256`:`sha256_of_onion`]\n\nThe `version` byte was not understood by the processing node.\n\n1. type: BADONION|PERM|5 (`invalid_onion_hmac`)\n2. data:\n   * [`sha256`:`sha256_of_onion`]\n\nThe HMAC of the onion was incorrect when it reached the processing node.\n\n1. type: BADONION|PERM|6 (`invalid_onion_key`)\n2. data:\n   * [`sha256`:`sha256_of_onion`]\n\nThe ephemeral key was unparsable by the processing node.\n\n1. type: UPDATE|7 (`temporary_channel_failure`)\n2. data:\n   * [`u16`:`len`]\n   * [`len*byte`:`channel_update`]\n\nThe channel from the processing node was unable to handle this HTLC,\nbut may be able to handle it, or others, later.\n\n1. type: PERM|8 (`permanent_channel_failure`)\n\nThe channel from the processing node is unable to handle any HTLCs.\n\n1. type: PERM|9 (`required_channel_feature_missing`)\n\nThe channel from the processing node requires features not present in\nthe onion.\n\n1. type: PERM|10 (`unknown_next_peer`)\n\nThe onion specified a `short_channel_id` which doesn't match any\nleading from the processing node.\n\n1. type: UPDATE|11 (`amount_below_minimum`)\n2. data:\n   * [`u64`:`htlc_msat`]\n   * [`u16`:`len`]\n   * [`len*byte`:`channel_update`]\n\nThe HTLC amount was below the `htlc_minimum_msat` of the channel from\nthe processing node.\n\n1. type: UPDATE|12 (`fee_insufficient`)\n2. data:\n   * [`u64`:`htlc_msat`]\n   * [`u16`:`len`]\n   * [`len*byte`:`channel_update`]\n\nThe fee amount was below that required by the channel from the\nprocessing node.\n\n1. type: UPDATE|13 (`incorrect_cltv_expiry`)\n2. data:\n   * [`u32`:`cltv_expiry`]\n   * [`u16`:`len`]\n   * [`len*byte`:`channel_update`]\n\nThe `cltv_expiry` does not comply with the `cltv_expiry_delta` required by\nthe channel from the processing node: it does not satisfy the following\nrequirement:\n\n        cltv_expiry - cltv_expiry_delta >= outgoing_cltv_value\n\n1. type: UPDATE|14 (`expiry_too_soon`)\n2. data:\n   * [`u16`:`len`]\n   * [`len*byte`:`channel_update`]\n\nThe CLTV expiry is too close to the current block height for safe\nhandling by the processing node.\n\n1. type: PERM|15 (`incorrect_or_unknown_payment_details`)\n2. data:\n   * [`u64`:`htlc_msat`]\n   * [`u32`:`height`]\n\nThe `payment_hash` is unknown to the final node, the `payment_secret` doesn't\nmatch the `payment_hash`, the amount for that `payment_hash` is too low,\nthe CLTV expiry of the htlc is too close to the current block height for safe\nhandling or `payment_metadata` isn't present while it should be.\n\nThe `htlc_msat` parameter is superfluous, but left in for backwards\ncompatibility. The value of `htlc_msat` is required to be at least the value\nspecified in the final hop onion payload. It therefore does not have any\nsubstantial informative value to the sender (though may indicate the\npenultimate node took a lower fee than expected). A penultimate hop sending an\namount or an expiry that is too low for the htlc is handled through\n`final_incorrect_cltv_expiry` and `final_incorrect_htlc_amount`.\n\nThe `height` parameter is set by the final node to the best known block height\nat the time of receiving the htlc. This can be used by the sender to distinguish\nbetween sending a payment with the wrong final CLTV expiry and an intermediate\nhop delaying the payment so that the receiver's invoice CLTV delta requirement\nis no longer met.\n\nNote: Originally PERM|16 (`incorrect_payment_amount`) and 17\n(`final_expiry_too_soon`) were used to differentiate incorrect htlc parameters\nfrom unknown payment hash. Sadly, sending this response allows for probing\nattacks whereby a node which receives an HTLC for forwarding can check guesses\nas to its final destination by sending payments with the same hash but much\nlower values or expiry heights to potential destinations and check the response.\nCare must be taken by implementations to differentiate the previously\nnon-permanent case for `final_expiry_too_soon` (17) from the other, permanent\nfailures now represented by `incorrect_or_unknown_payment_details` (PERM|15).\n\n1. type: 18 (`final_incorrect_cltv_expiry`)\n2. data:\n   * [`u32`:`cltv_expiry`]\n\nThe CLTV expiry in the HTLC is less than the value in the onion.\n\n1. type: 19 (`final_incorrect_htlc_amount`)\n2. data:\n   * [`u64`:`incoming_htlc_amt`]\n\nThe amount in the HTLC is less than the value in the onion.\n\n1. type: UPDATE|20 (`channel_disabled`)\n2. data:\n   * [`u16`:`disabled_flags`]\n   * [`u16`:`len`]\n   * [`len*byte`:`channel_update`]\n\nThe channel from the processing node has been disabled.\nNo flags for `disabled_flags` are currently defined, thus it is currently\nalways two zero bytes.\n\n1. type: 21 (`expiry_too_far`)\n\nThe CLTV expiry in the HTLC is too far in the future.\n\n1. type: PERM|22 (`invalid_onion_payload`)\n2. data:\n   * [`bigsize`:`type`]\n   * [`u16`:`offset`]\n\nThe decrypted onion per-hop payload was not understood by the processing node\nor is incomplete. If the failure can be narrowed down to a specific tlv type in\nthe payload, the erring node may include that `type` and its byte `offset` in\nthe decrypted byte stream.\n\n1. type: 23 (`mpp_timeout`)\n\nThe complete amount of the multi-part payment was not received within a\nreasonable time.\n\n1. type: BADONION|PERM|24 (`invalid_onion_blinding`)\n2. data:\n   * [`sha256`:`sha256_of_onion`]\n\nAn error occurred within the blinded path.\n\n### Requirements\n\nAn _erring node_:\n  - if `path_key` is set in the incoming `update_add_htlc`:\n    - MUST return an `invalid_onion_blinding` error.\n  - if `current_path_key` is set in the onion payload and it is not the\n    final node:\n    - MUST return an `invalid_onion_blinding` error.\n  - otherwise:\n    - MUST select one of the above error codes when creating an error message.\n    - MUST include the appropriate data for that particular error type.\n    - if there is more than one error:\n      - SHOULD select the first error it encounters from the list above.\n\nAn _erring node_ MAY:\n  - if the per-hop payload in the onion is invalid (e.g. it is not a valid tlv stream)\n  or is missing required information (e.g. the amount was not specified):\n    - return an `invalid_onion_payload` error.\n  - if an otherwise unspecified transient error occurs for the entire node:\n    - return a `temporary_node_failure` error.\n  - if an otherwise unspecified permanent error occurs for the entire node:\n    - return a `permanent_node_failure` error.\n  - if a node has requirements advertised in its `node_announcement` `features`,\n  which were NOT included in the onion:\n    - return a `required_node_feature_missing` error.\n\nA _forwarding node_ MUST:\n  - if `path_key` is set in the incoming `update_add_htlc`:\n    - return an `invalid_onion_blinding` error.\n  - if `current_path_key` is set in the onion payload and it is not the\n    final node:\n    - return an `invalid_onion_blinding` error.\n  - otherwise:\n    - select one of the above error codes when creating an error message.\n\nA _forwarding node_ MAY, but a _final node_ MUST NOT:\n  - if the onion `version` byte is unknown:\n    - return an `invalid_onion_version` error.\n  - if the onion HMAC is incorrect:\n    - return an `invalid_onion_hmac` error.\n  - if the ephemeral key in the onion is unparsable:\n    - return an `invalid_onion_key` error.\n  - if during forwarding to its receiving peer, an otherwise unspecified,\n  transient error occurs in the outgoing channel (e.g. channel capacity reached,\n  too many in-flight HTLCs, etc.):\n    - return a `temporary_channel_failure` error.\n  - if an otherwise unspecified, permanent error occurs during forwarding to its\n  receiving peer (e.g. channel recently closed):\n    - return a `permanent_channel_failure` error.\n  - if the outgoing channel has requirements advertised in its\n  `channel_announcement`'s `features`, which were NOT included in the onion:\n    - return a `required_channel_feature_missing` error.\n  - if the receiving peer specified by the onion is NOT known:\n    - return an `unknown_next_peer` error.\n  - if the HTLC amount is less than the currently specified minimum amount:\n    - report the amount of the outgoing HTLC and the current channel setting for\n    the outgoing channel.\n    - return an `amount_below_minimum` error.\n  - if the HTLC does NOT pay a sufficient fee:\n    - report the amount of the incoming HTLC and the current channel setting for\n    the outgoing channel.\n    - return a `fee_insufficient` error.\n -  if the incoming `cltv_expiry` minus the `outgoing_cltv_value` is below the\n    `cltv_expiry_delta` for the outgoing channel:\n    - report the `cltv_expiry` of the outgoing HTLC and the current channel setting for the outgoing\n    channel.\n    - return an `incorrect_cltv_expiry` error.\n  - if the `cltv_expiry` is unreasonably near the present:\n    - report the current channel setting for the outgoing channel.\n    - return an `expiry_too_soon` error.\n  - if the `cltv_expiry` is more than `max_htlc_cltv` in the future:\n    - return an `expiry_too_far` error.\n  - if the channel is disabled:\n    - report the current channel setting for the outgoing channel.\n    - return a `channel_disabled` error.\n\nAn _intermediate hop_ MUST NOT, but the _final node_:\n  - if the payment hash has already been paid:\n    - MAY treat the payment hash as unknown.\n    - MAY succeed in accepting the HTLC.\n  - if the `payment_secret` doesn't match the expected value for that `payment_hash`,\n    or the `payment_secret` is required and is not present:\n    - MUST fail the HTLC.\n    - MUST return an `incorrect_or_unknown_payment_details` error.\n  - if the amount paid is less than the amount expected:\n    - MUST fail the HTLC.\n    - MUST return an `incorrect_or_unknown_payment_details` error.\n  - if the payment hash is unknown:\n    - MUST fail the HTLC.\n    - MUST return an `incorrect_or_unknown_payment_details` error.\n  - if the amount paid is more than twice the amount expected:\n    - SHOULD fail the HTLC.\n    - SHOULD return an `incorrect_or_unknown_payment_details` error.\n      - Note: this allows the origin node to reduce information leakage by\n      altering the amount while not allowing for accidental gross overpayment.\n  - if the `cltv_expiry` value is unreasonably near the present:\n    - MUST fail the HTLC.\n    - MUST return an `incorrect_or_unknown_payment_details` error.\n  - if the `cltv_expiry` from the final node's HTLC is below `outgoing_cltv_value`:\n    - MUST return `final_incorrect_cltv_expiry` error.\n  - if `amount_msat` from the final node's HTLC is below `amt_to_forward`:\n    - MUST return a `final_incorrect_htlc_amount` error.\n  - if it returns a `channel_update`:\n    - MUST set `short_channel_id` to the `short_channel_id` used by the incoming onion.\n\n### Rationale\n\nIn the case of multiple short_channel_id aliases, the `channel_update`\n`short_channel_id` should refer to the one the original sender is\nexpecting, to both avoid confusion and to avoid leaking information\nabout other aliases (or the real location of the channel UTXO).\n\nThe `channel_update` field used to be mandatory in messages whose `failure_code`\nincludes the `UPDATE` flag. However, because nodes applying an update contained\nin the onion to their gossip data is a massive fingerprinting vulnerability,\nthe `channel_update` field is no longer mandatory and nodes are expected to\ntransition away from including it. Nodes which do not provide a\n`channel_update` are expected to set the `channel_update` `len` field to zero.\n\nSome nodes may still use the `channel_update` for retries of the same payment,\nhowever.\n\n## Receiving Failure Codes\n\n### Requirements\n\nThe _origin node_:\n  - MUST ignore any extra bytes in `failuremsg`.\n  - if the _final node_ is returning the error:\n    - if the PERM bit is set:\n      - SHOULD fail the payment.\n    - otherwise:\n      - if the error code is understood and valid:\n        - MAY retry the payment. In particular, `final_expiry_too_soon` can\n        occur if the block height has changed since sending, and in this case\n        `temporary_node_failure` could resolve within a few seconds.\n  - otherwise, an _intermediate hop_ is returning the error:\n    - if the NODE bit is set:\n      - SHOULD remove all channels connected with the erring node from\n      consideration.\n    - if the PERM bit is NOT set:\n      - SHOULD restore the channels as it receives new `channel_update`s from\n        its peers.\n    - otherwise:\n      - if UPDATE is set, AND the `channel_update` is valid and more recent\n        than the `channel_update` used to send the payment:\n        - MAY consider the `channel_update` when calculating routes to retry\n          the payment which failed\n      - MUST NOT expose the `channel_update` to third-parties in any other\n        context, including applying the `channel_update` to the local network\n        graph, send the `channel_update` to peers as gossip, etc.\n    - SHOULD then retry routing and sending the payment.\n  - MAY use the data specified in the various failure types for debugging\n  purposes.\n\n# Onion Messages\n\nOnion messages allow peers to use existing connections to query for\ninvoices (see [BOLT 12](12-offer-encoding.md)).  Like gossip messages,\nthey are not associated with a particular local channel.  Like HTLCs,\nthey use [onion messages](#onion-messages) protocol for\nend-to-end encryption.\n\nOnion messages use the same form as HTLC `onion_packet`, with a\nslightly more flexible format: instead of 1300 byte payloads, the\npayload length is implied by the total length (minus 66 bytes for the\nheader and trailing bytes).  The `onionmsg_payloads` themselves are the same\nas the `hop_payloads` format, except there is no \"legacy\" length: a 0\n`length` would mean an empty `onionmsg_payload`.\n\nOnion messages are unreliable: in particular, they are designed to\nbe cheap to process and require no storage to forward.  As a result,\nthere is no error returned from intermediary nodes.\n\nFor consistency, all onion messages use [Route Blinding](#route-blinding).\n\n## The `onion_message` Message\n\n1. type: 513 (`onion_message`) (`option_onion_messages`)\n2. data:\n    * [`point`:`path_key`]\n    * [`u16`:`len`]\n    * [`len*byte`:`onion_message_packet`]\n\n1. type: `onion_message_packet`\n2. data:\n   * [`byte`:`version`]\n   * [`point`:`public_key`]\n   * [`...*byte`:`onionmsg_payloads`]\n   * [`32*byte`:`hmac`]\n\n1. type: `onionmsg_payloads`\n2. data:\n   * [`bigsize`:`length`]\n   * [`length*u8`:`onionmsg_tlv`]\n   * [`32*byte`:`hmac`]\n   * ...\n   * `filler`\n\nThe `onionmsg_tlv` itself is a TLV: an intermediate node expects an\n`encrypted_recipient_data` which it can decrypt into an `encrypted_data_tlv`\nusing the `path_key` which it is handed along with the onion message.\n\nField numbers 64 and above are reserved for payloads for the final\nhop, though these are not explicitly refused by non-final hops (unless\neven, of course!).\n\n1. `tlv_stream`: `onionmsg_tlv`\n2. types:\n    1. type: 2 (`reply_path`)\n    2. data:\n        * [`blinded_path`:`path`]\n    1. type: 4 (`encrypted_recipient_data`)\n    2. data:\n        * [`...*byte`:`encrypted_recipient_data`]\n    1. type: 64 (`invoice_request`)\n    2. data:\n        * [`tlv_invoice_request`:`invreq`]\n    1. type: 66 (`invoice`)\n    2. data:\n        * [`tlv_invoice`:`inv`]\n    1. type: 68 (`invoice_error`)\n    2. data:\n        * [`tlv_invoice_error`:`inverr`]\n\n#### Requirements\n\nThe creator of `encrypted_recipient_data` (usually, the recipient of the onion):\n\n  - MUST create the `encrypted_recipient_data` from the `encrypted_data_tlv` as required in [Route Blinding](#route-blinding).\n  - MUST NOT include `payment_relay` or `payment_constraints` in any `encrypted_data_tlv`\n  - MUST include either `next_node_id` or `short_channel_id` in the `encrypted_data_tlv` for each non-final node.\n  - MUST create the `encrypted_recipient_data` from the `encrypted_data_tlv` as required in [Route Blinding](#route-blinding).\n\nThe writer:\n\n- MUST set the `onion_message_packet` `version` to 0.\n- MUST construct the `onion_message_packet` `onionmsg_payloads` as detailed above using Sphinx.\n- MUST NOT use any `associated_data` in the Sphinx construction.\n- SHOULD set `onion_message_packet` `len` to 1366 or 32834.\n- SHOULD retry via a different path if it expects a response and doesn't receive one after a reasonable period.\n- For the non-final nodes' `onionmsg_tlv`:\n  - MUST NOT set fields other than `encrypted_recipient_data`.\n- For the final node's `onionmsg_tlv`:\n  - if the final node is permitted to reply:\n    - MUST set `reply_path` `path_key` to the initial path key for the `first_node_id`\n    - MUST set `reply_path` `first_node_id` to the unblinded node id of the first node in the reply path.\n    - For every `reply_path` `path`:\n      - MUST set `blinded_node_id` to the blinded node id to encrypt the onion hop for.\n      - MUST set `encrypted_recipient_data` to a valid encrypted `encrypted_data_tlv` stream which meets the requirements of the `onionmsg_tlv` when used by the recipient.\n      - MAY use `path_id` to contain a secret so it can recognize use of this `reply_path`.\n  - otherwise:\n    - MUST NOT set `reply_path`.\n\n\nThe reader:\n\n- SHOULD accept onion messages from peers without an established channel.\n- MAY rate-limit messages by dropping them.\n- MUST decrypt `onion_message_packet` using an empty `associated_data`, and `path_key`, as described in [Onion Decryption](04-onion-routing.md#onion-decryption) to extract an `onionmsg_tlv`.\n- If decryption fails, the result is not a valid `onionmsg_tlv`, or it contains unknown even types:\n  - MUST ignore the message.\n- if `encrypted_data_tlv` contains `allowed_features`:\n  - MUST ignore the message if:\n    - `encrypted_data_tlv.allowed_features.features` contains an unknown feature bit (even if it is odd).\n    - the message uses a feature not included in `encrypted_data_tlv.allowed_features.features`.\n- if it is not the final node according to the onion encryption:\n  - if the `onionmsg_tlv` contains other tlv fields than `encrypted_recipient_data`:\n    - MUST ignore the message.\n  - if the `encrypted_data_tlv` contains `path_id`:\n    - MUST ignore the message.\n  - otherwise:\n    - if `next_node_id` is present:\n      - the *next peer* is the peer with that node id.\n    - otherwise, if `short_channel_id` is present and corresponds to an announced short_channel_id or a local alias for a channel:\n      - the *next peer* is the peer at the other end of that channel.\n    - otherwise:\n      - MUST ignore the message.\n    - SHOULD forward the message using `onion_message` to the *next peer*.\n    - if it forwards the message:\n      - MUST set `path_key` in the forwarded `onion_message` to the next `path_key` as calculated in [Route Blinding](#route-blinding).\n- otherwise (it is the final node):\n  - if `path_id` is set and corresponds to a path the reader has previously published in a `reply_path`:\n    - if the onion message is not a reply to that previous onion:\n      - MUST ignore the onion message\n  - otherwise (unknown or unset `path_id`):\n    - if the onion message is a reply to an onion message which contained a `path_id`:\n      - MUST respond (or not respond) exactly as if it did not send the initial onion message.\n  - if the `onionmsg_tlv` contains more than one payload field:\n    - MUST ignore the message.\n  - if it wants to send a reply:\n    - MUST create an onion message using `reply_path`.\n    - MUST send the reply via `onion_message` to the node indicated by\n      the `first_node_id`, using `reply_path` `path_key` to send\n      along `reply_path` `path`.\n\n\n#### Rationale\n\nCare must be taken that replies are only accepted using the exact\nreply_path given, otherwise probing is possible.  That means checking\nboth ways: non-replies don't use the reply path, and replies always\nuse the reply path.\n\nThe requirement to discard messages with `onionmsg_tlv` fields which\nare not strictly required ensures consistency between current and\nfuture implementations.  Even odd fields can be a problem since they\nare parsed (and thus may be rejected!) by nodes which understand them,\nand ignored by those which don't.\n\nAll onion messages are blinded, even though this overhead is not\nalways necessary (33 bytes here, the 16-byte MAC for each encrypted_data_tlv in\nthe onion).  This blinding allows nodes to use a path provided by\nothers without knowing its contents.  Using it universally simplifies\nimplementations a little, and makes it more difficult to distinguish\nonion messages.\n\n`len` allows larger messages to be sent than the standard 1300 bytes\nallowed for an HTLC onion, but this should be used sparingly as it\nreduces the anonymity set, hence the recommendation that it either looks\nlike an HTLC onion, or if larger, be a fixed size.\n\nOnion messages don't explicitly require a channel, but for\nspam-reduction a node may choose to ratelimit such peers, especially\nmessages it is asked to forward.\n\n## `max_htlc_cltv` Selection\n\nThis `max_htlc_cltv` value is defined as 2016 blocks, based on historical value\ndeployed by Lightning implementations.\n\n# Test Vector\n\n## Returning Errors\n\nThe test vectors use the following parameters:\n\n\tpubkey[0] = 0x02eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619\n\tpubkey[1] = 0x0324653eac434488002cc06bbfb7f10fe18991e35f9fe4302dbea6d2353dc0ab1c\n\tpubkey[2] = 0x027f31ebc5462c1fdce1b737ecff52d37d75dea43ce11c74d25aa297165faa2007\n\tpubkey[3] = 0x032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991\n\tpubkey[4] = 0x02edabbd16b41c8371b92ef2f04c1185b4f03b6dcd52ba9b78d9d7c89c8f221145\n\n\tnhops = 5\n\tsessionkey = 0x4141414141414141414141414141414141414141414141414141414141414141\n\n\tfailure_source  = node 4\n\tfailure_message = `incorrect_or_unknown_payment_details`\n      htlc_msat = 100\n      height    = 800000\n      tlv data\n        type  = 34001\n        value = [128, 128, ..., 128] (300 bytes)\n\nThe following is an in-depth trace of an example of error message creation:\n\n\t# creating error message\n\tencoded_failure_message = 400f0000000000000064000c3500fd84d1fd012ccn\tshared_secret = b5756b9b542727dbafc6765a49488b023a725d631af688fc031217e90770c328\n\tpayload = 0140400f0000000000000064000c3500fd84d1fd012ccn\tum_key = 4da7f2923edce6c2d85987d1d9fa6d88023e6c3a9c3d20f07d3b10b61a78d646\n\traw_error_packet = fda7e11974f78ca6cc456f2d17ae54463664696e93842548245dd2a2c513a6260140400f0000000000000064000c3500fd84d1fd012ccn\t# forwarding error packet\n\tshared_secret = b5756b9b542727dbafc6765a49488b023a725d631af688fc031217e90770c328\n\tammag_key = 2f36bb8822e1f0d04c27b7d8bb7d7dd586e032a3218b8d414afbba6f169a4d68\n\tstream = e9c975b07c9a374ba64fd9be3aae955e917d34d1fa33f2e90f53bbf4394713c6a8c9b16ab5f12fd45edd73c1b0c8b33002df376801ff58aaa94000bf8a86f92620f343baef38a580102395ae3abf9128d1047a0736ff9b83d456740ebbb4aeb3aa9737f18fb4afb4aa074fb26c4d702f42968888550a3bded8c05247e045b866baef0499f079fdaeef6538f31d44deafffdfd3afa2fb4ca9082b8f1c465371a9894dd8c243fb4847e004f5256b3e90e2edde4c9fb3082ddfe4d1e734cacd96ef0706bf63c9984e22dc98851bcccd1c3494351feb458c9c6af41c0044bea3c47552b1d992ae542b17a2d0bba1a096c78d169034ecb55b6e3a7263c26017f033031228833c1daefc0dedb8cf7c3e37c9c37ebfe42f3225c326e8bcfd338804c145b16e34e4f5984bc119af09d471a61f39e9e389c4120cadabc5d9b7b1355a8ccef050ca8ad72f642fc26919927b347808bade4b1c321b08bc363f20745ba2f97f0ced2996a232f55ba28fe7dfa70a9ab0433a085388f25cce8d53de6a2fbd7546377d6ede9027ad173ba1f95767461a3689ef405ab608a21086165c64b02c1782b04a6dba2361a7784603069124e12f2f6dcb1ec7612a4fbf94c0e14631a2bef6190c3d5f35e0c4b32aa85201f449d830fd8f782ec758b0910428e3ec3ca1dba3b6c7d89f69e1ee1b9df3dfbbf6d361e1463886b38d52e8f43b73a3bd48c6f36f5897f514b93364a31d49d1d506340b1315883d425cb36f4ea553430d538fd6f3596d4afc518db2f317dd051abc0d4bfb0a7870c3db70f19fe78d6604bbf088fcb4613f54e67b038277fedcd9680eb97bdffc3be1ab2cbcbafd625b8a7ac34d8c190f98d3064ecd3b95b8895157c6a37f31ef4de094b2cb9dbf8ff1f419ba0ecacb1bb13df0253b826bec2ccca1e745dd3b3e7cc6277ce284d649e7b8285727735ff4ef6cca6c18e2714f4e2a1ac67b25213d3bb49763b3b94e7ebf72507b71fb2fe0329666477ee7cb7ebd6b88ad5add8b217188b1ca0fa13de1ec09cc674346875105be6e0e0d6c8928eb0df23c39a639e04e4aedf535c4e093f08b2c905a14f25c0c0fe47a5a1535ab9eae0d9d67bdd79de13a08d59ee05385c7ea4af1ad3248e61dd22f8990e9e99897d653dd7b1b1433a6d464ea9f74e377f2d8ce99ba7dbc753297644234d25ecb5bd528e2e2082824681299ac30c05354baaa9c3967d86d7c07736f87fc0f63e5036d47235d7ae12178ced3ae36ee5919c093a02579e4fc9edad2c446c656c790704bfc8e2c491a42500aa1d75c8d4921ce29b753f883e17c79b09ea324f1f32ddf1f3284cd70e847b09d90f6718c42e5c94484cc9cbb0df659d255630a3f5a27e7d5dd14fa6b974d1719aa98f01a20fb4b7b1c77b42d57fab3c724339d459ee4a1c6b5d3bd4e08624c786a257872acc9ad3ff62222f2265a658d9f2a007229a5293b67ec91c84c4b4407c228434bad8a815ca9b256c776bd2c9f\n\terror packet for node 4: 146e94a9086dbbed6a0ab6932d00c118a7195dbf69b7d7a12b0e6956fc54b5e0a989f165b5f12fd45edd73a5b0c48630ff5be69500d3d82a29c0803f0a0679a6a073c33a6fb8250090a3152eba3f11a85184fa87b67f1b0354d6f48e3b342e332a17b7710f342f342a87cf32eccdf0afc2160808d58abb5e5840d2c760c538e63a6f841970f97d2e6fe5b8739dc45e2f7f5f532f227bcc2988ab0f9cc6d3f12909cd5842c37bc8c7608475a5ebbe10626d5ecc1f3388ad5f645167b44a4d166f87863fe34918cea25c18059b4c4d9cb414b59f6bc50c1cea749c80c43e2344f5d23159122ed4ab9722503b212016470d9610b46c35dbeebaf2e342e09770b38392a803bc9d2e7c8d6d384ffcbeb74943fe3f64afb2a543a6683c7db3088441c531eeb4647518cb41992f8954f1269fb969630944928c2d2b45593731b5da0c4e70d04a0a57afe4af42e99912fbb4f8883a5ecb9cb29b883cb6bfa0f4db2279ff8c6d2b56a232f55ba28fe7dfa70a9ab0433a085388f25cce8d53de6a2fbd7546377d6ede9027ad173ba1f95767461a3689ef405ab608a21086165c64b02c1782b04a6dba2361a7784603069124e12f2f6dcb1ec7612a4fbf94c0e14631a2bef6190c3d5f35e0c4b32aa85201f449d830fd8f782ec758b0910428e3ec3ca1dba3b6c7d89f69e1ee1b9df3dfbbf6d361e1463886b38d52e8f43b73a3bd48c6f36f5897f514b93364a31d49d1d506340b1315883d425cb36f4ea553430d538fd6f3596d4afc518db2f317dd051abc0d4bfb0a7870c3db70f19fe78d6604bbf088fcb4613f54e67b038277fedcd9680eb97bdffc3be1ab2cbcbafd625b8a7ac34d8c190f98d3064ecd3b95b8895157c6a37f31ef4de094b2cb9dbf8ff1f419ba0ecacb1bb13df0253b826bec2ccca1e745dd3b3e7cc6277ce284d649e7b8285727735ff4ef6cca6c18e2714f4e2a1ac67b25213d3bb49763b3b94e7ebf72507b71fb2fe0329666477ee7cb7ebd6b88ad5add8b217188b1ca0fa13de1ec09cc674346875105be6e0e0d6c8928eb0df23c39a639e04e4aedf535c4e093f08b2c905a14f25c0c0fe47a5a1535ab9eae0d9d67bdd79de13a08d59ee05385c7ea4af1ad3248e61dd22f8990e9e99897d653dd7b1b1433a6d464ea9f74e377f2d8ce99ba7dbc753297644234d25ecb5bd528e2e2082824681299ac30c05354baaa9c3967d86d7c07736f87fc0f63e5036d47235d7ae12178ced3ae36ee5919c093a02579e4fc9edad2c446c656c790704bfc8e2c491a42500aa1d75c8d4921ce29b753f883e17c79b09ea324f1f32ddf1f3284cd70e847b09d90f6718c42e5c94484cc9cbb0df659d255630a3f5a27e7d5dd14fa6b974d1719aa98f01a20fb4b7b1c77b42d57fab3c724339d459ee4a1c6b5d3bd4e08624c786a257872acc9ad3ff62222f2265a658d9f2a007229a5293b67ec91c84c4b4407c228434bad8a815ca9b256c776bd2c9f\n\t# forwarding error packet\n\tshared_secret = 21e13c2d7cfe7e18836df50872466117a295783ab8aab0e7ecc8c725503ad02d\n\tammag_key = cd9ac0e09064f039fa43a31dea05f5fe5f6443d40a98be4071af4a9d704be5ad\n\tstream = 617ca1e4624bc3f04fece3aa5a2b615110f421ec62408d16c48ea6c1b7c33fe7084a2bd9d4652fc5068e5052bf6d0acae2176018a3d8c75f37842712913900263cff92f39f3c18aa1f4b20a93e70fc429af7b2b1967ca81a761d40582daf0eb49cef66e3d6fbca0218d3022d32e994b41c884a27c28685ef1eb14603ea80a204b2f2f474b6ad5e71c6389843e3611ebeafc62390b717ca53b3670a33c517ef28a659c251d648bf4c966a4ef187113ec9848bf110816061ca4f2f68e76ceb88bd6208376460b916fb2ddeb77a65e8f88b2e71a2cbf4ea4958041d71c17d05680c051c3676fb0dc8108e5d78fb1e2c44d79a202e9d14071d536371ad47c39a05159e8d6c41d17a1e858faaaf572623aa23a38ffc73a4114cb1ab1cd7f906c6bd4e21b29694f9830d12e8ad4b1ac320b3d5bfb4e534f02cefe9a983d66939581412acb1927eb93e8ed73145cddf24266bdcc95923ecb38c8c9c5f4465335b0f18bf9f2d03fa02d57f258db27983d94378bc796cbe7737180dd7e39a36e461ebcb7ec82b6dcdf9d3f209381f7b3a23e798c4f92e13b4bb972ee977e24f4b83bb59b577c210e1a612c2b035c8271d9bc1fb915776ac6560315b124465866830473aa238c35089cf2adb9c6e9f05ab113c1d0a4a18ba0cb9951b928c0358186532c36d4c3daa65657be141cc22e326f88e445e898893fd5f0a7dd231ee5bc972077b1e12a8e382b75d4b557e895a2adc757f2e451e33e0ae3fb54566ee09155da6ada818aa4a4a2546832a8ba22f0ef9ec6a1c78e03a7c29cb126bcaf81aea61cd8b07ab9f4e5e0ad0d9a3a0c66d2d0a00cc05884d183a68e816e76b75842d55895f5b91c5c1b9f7052763aae8a647aa0799214275b6e781f0816fc9ffb802a0101eb5a2de6b3375d3e3478f892b2de7f1900d8ca9bf188fcba89fc49d03c38fa2587a8ae119abfb295b15fa11cb188796bedc4fdfceef296e44fbfa7e84569cc6346389a421782e40a298e1e2b6f9cae3103c3f39d24541e4ab7b61dafe1a5f2fe936a59d87cccdaf7c226acc451ceec3e81bc4828b4925feeae3526d5e2bf93bd5f4fdc0e069010aea1ae7e0d480d438918598896b776bf08fea124f91b3a13414b56934857707902612fc97b0e5d02cbe6e5901ad304c7e8656390efccf3a1b22e18a2935181b78d5d2c89540ede8b0e6194d0d3945780bf577f622cb12deedbf8210eb1450c298b9ee19f3c7082aabc2bdbd3384f3539dc3766978567135549df0d48287735854a6098fa40a9e48eaa27e0d159beb65dd871e4c0b3fffa65f0375f0d3253f582193135ece60d5b9d8ba6739d87964e992cbec674b728d9eaaed595462c41d15fb497d4baa062368005d13fc99e1402563117a6c140c10363b05196a4cbb6b84ae807d62c748485c15e3316841e4a98c3aac81e3bc996b4baca77eac8cdbe99cc7c5ebeb85c907cefb4abe15cbe87fdc5dc2326019196235ac205934fcf8e3\n\terror packet for node 3: 7512354d6a26781d25e65539772ba049b7ed7c530bf75ab7ef80cf974b978a07a1c3dabc61940011585323f70fa98cfa1d4c868da30b1f751e44a72d9b3f79809c8c51c9f0843daa8fe83587844fedeacb7348362003b31922cbb4d6169b2087b6f8d192d9cfe5363254cd1fde24641bde9e422f170c3eb146f194c48a459ae2889d706dc654235fa9dd20307ea54091d09970bf956c067a3bcc05af03c41e01af949a131533778bf6ee3b546caf2eabe9d53d0fb2e8cc952b7e0f5326a69ed2e58e088729a1d85971c6b2e129a5643f3ac43da031e655b27081f10543262cf9d72d6f64d5d96387ac0d43da3e3a03da0c309af121dcf3e99192efa754eab6960c256ffd4c546208e292e0ab9894e3605db098dc16b40f17c320aa4a0e42fc8b105c22f08c9bc6537182c24e32062c6cd6d7ec7062a0c2c2ecdae1588c82185cdc61d874ee916a7873ac54cddf929354f307e870011704a0e9fbc5c7802d6140134028aca0e78a7e2f3d9e5c7e49e20c3a56b624bfea51196ec9e88e4e56be38ff56031369f45f1e03be826d44a182f270c153ee0d9f8cf9f1f4132f33974e37c7887d5b857365c873cb218cbf20d4be3abdb2a2011b14add0a5672e01e5845421cf6dd6faca1f2f443757aae575c53ab797c2227ecdab03882bbbf4599318cefafa72fa0c9a0f5a51d13c9d0e5d25bfcfb0154ed25895260a9df8743ac188714a3f16960e6e2ff663c08bffda41743d50960ea2f28cda0bc3bd4a180e297b5b41c700b674cb31d99c7f2a1445e121e772984abff2bbe3f42d757ceeda3d03fb1ffe710aecabda21d738b1f4620e757e57b123dbc3c4aa5d9617dfa72f4a12d788ca596af14bea583f502f16fdc13a5e739afb0715424af2767049f6b9aa107f69c5da0e85f6d8c5e46507e14616d5d0b797c3dea8b74a1b12d4e47ba7f57f09d515f6c7314543f78b5e85329d50c5f96ee2f55bbe0df742b4003b24ccbd4598a64413ee4807dc7f2a9c0b92424e4ae1b418a3cdf02ea4da5c3b12139348aa7022cc8272a3a1714ee3e4ae111cffd1bdfd62c503c80bdf27b2feaea0d5ab8fe00f9cec66e570b00fd24b4a2ed9a5f6384f148a4d6325110a41ca5659ebc5b98721d298a52819b6fb150f273383f1c5754d320be428941922da790e17f482989c365c078f7f3ae100965e1b38c052041165295157e1a7c5b7a57671b842d4d85a7d971323ad1f45e17a16c4656d889fc75c12fc3d8033f598306196e29571e414281c5da19c12605f48347ad5b4648e371757cbe1c40adb93052af1d6110cfbf611af5c8fc682b7e2ade3bfca8b5c7717d19fc9f97964ba6025aebbc91a6671e259949dcf40984342118de1f6b514a7786bd4f6598ffbe1604cef476b2a4cb1343db608aca09d1d38fc23e98ee9c65e7f6023a8d1e61fd4f34f753454bd8e858c8ad6be6403edc599c220e03ca917db765980ac781e758179cd93983e9c1e769e4241d47c\n\t# forwarding error packet\n\tshared_secret = 3a6b412548762f0dbccce5c7ae7bb8147d1caf9b5471c34120b30bc9c04891cc\n\tammag_key = 1bf08df8628d452141d56adfd1b25c1530d7921c23cecfc749ac03a9b694b0d3\n\tstream = 6149f48b5a7e8f3d6f5d870b7a698e204cf64452aab4484ff1dee671fe63fd4b5f1b78ee2047dfa61e3d576b149bedaf83058f85f06a3172a3223ad6c4732d96b32955da7d2feb4140e58d86fc0f2eb5d9d1878e6f8a7f65ab9212030e8e915573ebbd7f35e1a430890be7e67c3fb4bbf2def662fa625421e7b411c29ebe81ec67b77355596b05cc155755664e59c16e21410aabe53e80404a615f44ebb31b365ca77a6e91241667b26c6cad24fb2324cf64e8b9dd6e2ce65f1f098cfd1ef41ba2d4c7def0ff165a0e7c84e7597c40e3dffe97d417c144545a0e38ee33ebaae12cc0c14650e453d46bfc48c0514f354773435ee89b7b2810606eb73262c77a1d67f3633705178d79a1078c3a01b5fadc9651feb63603d19decd3a00c1f69af2dab2595931ca50d8280758b1cc91ba2dc43dbbc3d91bf25c08b46c2ecef7a32cec64d4b61ee3a629ef563afe058b71e71bcb69033948bc8728c5ebe65ec596e4f305b9fc159d53f723dfc95b57f3d51717f1c89af97a6d587e89e62efcc92198a1b2bd66e2d875505ea4046c04389f8cb0ee98f0af03af2652e2f3d9a9c48430f2891a4d9b16e7d18099e4a3dd334c24aba1e2450792c2f22092c170da549d43a440021e699bd6c20d8bbf1961100a01ebcce06a4609f5ad93066287acf68294cfa9ea7cea03a508983b134a9f0118b16409a61c06aaa95897d2067cb7cd59123f3e2ccf0e16091571d616c44818f118bb7835a679f5c0eea8cf1bd5479882b2c2a341ec26dbe5da87b3d37d66b1fbd176f71ab203a3b6eaf7f214d579e7d0e4a3e59089ebd26ba04a62403ae7a793516ec16d971d51c5c0107a917d1a70221e6de16edca7cb057c7d06902b5191f298aa4d478a0c3a6260c257eae504ebbf2b591688e6f3f77af770b6f566ae9868d2f26c12574d3bf9323af59f0fe0072ff94ae597c2aa6fbcbf0831989e02f9d3d1b9fd6dd97f509185d9ecbf272e38bd621ee94b97af8e1cd43853a8f6aa6e8372585c71bf88246d064ade524e1e0bd8496b620c4c2d3ae06b6b064c97536aaf8d515046229f72bee8aa398cd0cc21afd5449595016bef4c77cb1e2e9d31fe1ca3ffde06515e6a4331ccc84edf702e5777b10fc844faf17601a4be3235931f6feca4582a8d247c1d6e4773f8fb6de320cf902bbb1767192782dc550d8e266e727a2aa2a414b816d1826ea46af71701537193c22bbcc0123d7ff5a23b0aa8d7967f36fef27b14fe1866ff3ab215eb29e07af49e19174887d71da7e7fe1b7aa1b3c805c063e0fafedf125fa6c57e38cce33a3f7bb35fd8a9f0950de3c22e49743c05f40bc55f960b8a8b5e2fde4bb229f125538438de418cb318d13968532499118cb7dcaaf8b6d635ac4001273bdafd12c8ea0702fb2f0dac81dbaaf68c1c32266382b293fa3951cb952ed5c1bdc41750cdbc0bd62c51bb685616874e251f031a929c06faef5bfcb0857f815ae20620b823f0abecfb5\n\terror packet for node 2: 145bc1c63058f7204abbd2320d422e69fb1b3801a14312f81e5e29e6b5f4774cfed8a25241d3dfb7466e749c1b3261559e49090853612e07bd669dfb5f4c54162fa504138dabd6ebcf0db8017840c35f12a2cfb84f89cc7c8959a6d51815b1d2c5136cedec2e4106bb5f2af9a21bd0a02c40b44ded6e6a90a145850614fb1b0eef2a03389f3f2693bc8a755630fc81fff1d87a147052863a71ad5aebe8770537f333e07d841761ec448257f948540d8f26b1d5b66f86e073746106dfdbb86ac9475acf59d95ece037fba360670d924dce53aaa74262711e62a8fc9eb70cd8618fbedae22853d3053c7f10b1a6f75369d7f73c419baa7dbf9f1fc5895362dcc8b6bd60cca4943ef7143956c91992119bccbe1666a20b7de8a2ff30a46112b53a6bb79b763903ecbd1f1f74952fb1d8eb0950c504df31fe702679c23b463f82a921a2c931500ab08e686cffb2d87258d254fb17843959cccd265a57ba26c740f0f231bb76df932b50c12c10be90174b37d454a3f8b284c849e86578a6182c4a7b2e47dd57d44730a1be9fec4ad07287a397e28dce4fda57e9cdfdb2eb5afdf0d38ef19d982341d18d07a556bb16c1416f480a396f278373b8fd9897023a4ac506e65cf4c306377730f9c8ca63cf47565240b59c4861e52f1dab84d938e96fb31820064d534aca05fd3d2600834fe4caea98f2a748eb8f200af77bd9fbf46141952b9ddda66ef0ebea17ea1e7bb5bce65b6e71554c56dd0d4e14f4cf74c77a150776bf31e7419756c71e7421dc22efe9cf01de9e19fc8808d5b525431b944400db121a77994518d6025711cb25a18774068bba7faaa16d8f65c91bec8768848333156dcb4a08dfbbd9fef392da3e4de13d4d74e83a7d6e46cfe530ee7a6f711e2caf8ad5461ba8177b2ef0a518baf9058ff9156e6aa7b08d938bd8d1485a787809d7b4c8aed97be880708470cd2b2cdf8e2f13428cc4b04ef1f2acbc9562f3693b948d0aa94b0e6113cafa684f8e4a67dc431dfb835726874bef1de36f273f52ee694ec46b0700f77f8538067642a552968e866a72a3f2031ad116663ac17b172b446c5bc705b84777363a9a3fdc6443c07b2f4ef58858122168d4ebbaee920cefc312e1cea870ed6e15eec046ab2073bbf08b0a3366f55cfc6ad4681a12ab0946534e7b6f90ea8992d530ec3daa6b523b3cf03101c60cadd914f30dec932c1ef4341b5a8efac3c921e203574cfe0f1f83433fddb8ccfd273f7c3cab7bc27efe3bb61fdccd5146f1185364b9b621e7fb2b74b51f5ee6be72ab6ff46a6359dc2c855e61469724c1dbeb273df9d2e1c1fb74891239c0019dc12d5c7535f7238f963b761d7102b585372cf021b64c4fc85bfb3161e59d2e298bba44cfd34d6859d9dba9dc6271e5047d525468c814f2ae438474b0a977273036da1a2292f88fcfb89574a6bdca1185b40f8aa54026d5926725f99ef028da1be892e3586361efe15f4a148ff1bc9\n\t# forwarding error packet\n\tshared_secret = a6519e98832a0b179f62123b3567c106db99ee37bef036e783263602f3488fae\n\tammag_key = 59ee5867c5c151daa31e36ee42530f429c433836286e63744f2020b980302564\n\tstream = 0f10c86f05968dd91188b998ee45dcddfbf89fe9a99aa6375c42ed5520a257e048456fe417c15219ce39d921555956ae2ff795177c63c819233f3bcb9b8b28e5ac6e33a3f9b87ca62dff43f4cc4a2755830a3b7e98c326b278e2bd31f4a9973ee99121c62873f5bfb2d159d3d48c5851e3b341f9f6634f51939188c3b9ff45feeb11160bb39ce3332168b8e744a92107db575ace7866e4b8f390f1edc4acd726ed106555900a0832575c3a7ad11bb1fe388ff32b99bcf2a0d0767a83cf293a220a983ad014d404bfa20022d8b369fe06f7ecc9c74751dcda0ff39d8bca74bf9956745ba4e5d299e0da8f68a9f660040beac03e795a046640cf8271307a8b64780b0588422f5a60ed7e36d60417562938b400802dac5f87f267204b6d5bcfd8a05b221ec294d883271b06ca709042ed5dbb64a7328d2796195eab4512994fb88919c73b3e5dd7bf68b2136d34cff39b3be266b71e004509bf975a240800bb8ae5eed248423a991ae80ef751b2d03b67fb93ffdd7969d5b500fe446a4ffb4cd04d0767a5d367ebd3f8f260f38ae1e9d9f9a7bd1a99ca1e10ee36bd241f06fc2b481c9b7450d9c9704204666807783264a0e93468e22db4dc4a7a4db2963ddf4366d08e225cf94848aac794bcecb7e850113e38cc3647a03a5dfaa3442b1bb58b1de7fa7f436feb4d7c23cbd2de6d55d4025fcd383cc9d49c0b130e2fd5a9097c216683c842f898a8a2159761cca9aa1c818194e3b7bea6da6652d5189f3b6b0ca1d5398b6d14e311d9c7f00399c29e94deb98496f4cd97c5d7d6a65cabc3791f60d728d6422a422c0cff5f7dfd4ce2d7e8d38dd71ae18763acc832c57275497f61b2620cca13cc64c0c48353f3817016f91448d6fc1cc451ee1f4a429e43292bbcd54fcd807e2c47675bac1781d9d81e9e6dc69028d428f5ee261750f626bcaf416a0e7badadf73fe1922207ae6c5209d16849e4a108f4a6f38694075f55177105ac4c2b97f6a474b94c03257d8d12b0196e2905d914b8c2213a1b9dc9608e1a2a1e03fe0820a813275de83be5e9734875787a9e006eb8574c23ddd49e2347d1ecfcedf3caa0a5dd45666368525b48ac14225d6422f82dbf59860ee4dc78e845d3c57668ce9b9e7a8d012491cef242078b458a956ad67c360fb6d8b86ab201d6217e49b55fa02a1dea2dbe88d0b08d30670d1b93c35cc5e41e088fccb267e41d6151cf8560496e1beeefe680744d9dabb383a4957466b4dc3e2bce7b135211da483d998a22fa687cc609641126c5dee3ed87291067916b5b065f40582163291d48e81ecd975d0d6fd52a31754f8ef15e43a560bd30ea5bf21915bd2e7007e607abbc6261edc8430cc7f789675b1fe83e807c5c475bd5178eba2fc40674706b0a68c6a428e5dec36e413e653c6db1178923ff87e2389a78bf9e93b713de4f4753f9f9d6a361369b609e1970c91ff9bd191c472e0bf2e8681412260ad0ef5855dc39f2084d45\n\terror packet for node 1: 1b4b09a935ce7af95b336baae307f2b400e3a7e808d9b4cf421cc4b3955620acb69dcdb656128dae8857adbd4e6b37fbb1be9c1f2f02e61e9e59a630c4c77cf383cb37b07413aa4de2f2fbf5b40ae40a91a8f4c6d74aeacef1bb1be4ecbc26ec2c824d2bc45db4b9098e732a769788f1cff3f5b41b0d25c132d40dc5ad045ef0043b15332ca3c5a09de2cdb17455a0f82a8f20da08346282823dab062cdbd2111e238528141d69de13de6d83994fbc711e3e269df63a12d3a4177c5c149150eb4dc2f589cd8acabcddba14dec3b0dada12d663b36176cd3c257c5460bab93981ad99f58660efa9b31d7e63b39915329695b3fa60e0a3bdb93e7e29a54ca6a8f360d3848866198f9c3da3ba958e7730847fe1e6478ce8597848d3412b4ae48b06e05ba9a104e648f6eaf183226b5f63ed2e68f77f7e38711b393766a6fab7921b03eba82b5d7cb78e34dc961948d6161eadd7cf5d95d9c56df2ff5faa6ccf85eacdc9ff2fc3abafe41c365a5bd14fd486d6b5e2f24199319e7813e02e798877ffe31a70ae2398d9e31b9e3727e6c1a3c0d995c67d37bb6e72e9660aaaa9232670f382add2edd468927e3303b6142672546997fe105583e7c5a3c4c2b599731308b5416e6c9a3f3ba55b181ad0439d3535356108b059f2cb8742eed7a58d4eba9fe79eaa77c34b12aff1abdaea93197aabd0e74cb271269ca464b3b06aef1d6573df5e1224179616036b368677f26479376681b772d3760e871d99efd34cca5cd6beca95190d967da820b21e5bec60082ea46d776b0517488c84f26d12873912d1f68fafd67bcf4c298e43cfa754959780682a2db0f75f95f0598c0d04fd014c50e4beb86a9e37d95f2bba7e5065ae052dc306555bca203d104c44a538b438c9762de299e1c4ad30d5b4a6460a76484661fc907682af202cd69b9a4473813b2fdc1142f1403a49b7e69a650b7cde9ff133997dcc6d43f049ecac5fce097a21e2bce49c810346426585e3a5a18569b4cddd5ff6bdec66d0b69fcbc5ab3b137b34cc8aefb8b850a764df0e685c81c326611d901c392a519866e132bbb73234f6a358ba284fbafb21aa3605cacbaf9d0c901390a98b7a7dac9d4f0b405f7291c88b2ff45874241c90ac6c5fc895a440453c344d3a365cb929f9c91b9e39cb98b142444aae03a6ae8284c77eb04b0a163813d4c21883df3c0f398f47bf127b5525f222107a2d8fe55289f0cfd3f4bbad6c5387b0594ef8a966afc9e804ccaf75fe39f35c6446f7ee076d433f2f8a44dba1515acc78e589fa8c71b0a006fe14feebd51d0e0aa4e51110d16759eee86192eee90b34432130f387e0ccd2ee71023f1f641cddb571c690107e08f592039fe36d81336a421e89378f351e633932a2f5f697d25b620ffb8e84bb6478e9bd229bf3b164b48d754ae97bd23f319e3c56b3bcdaaeb3bd7fc02ec02066b324cb72a09b6b43dec1097f49d69d3c138ce6f1a6402898baf7568c\n\t# forwarding error packet\n\tshared_secret = 53eb63ea8a3fec3b3cd433b85cd62a4b145e1dda09391b348c4e1cd36a03ea66\n\tammag_key = 3761ba4d3e726d8abb16cba5950ee976b84937b61b7ad09e741724d7dee12eb5\n\tstream = 3699fd352a948a05f604763c0bca2968d5eaca2b0118602e52e59121f050936c8dd90c24df7dc8cf8f1665e39a6c75e9e2c0900ea245c9ed3b0008148e0ae18bbfaea0c711d67eade980c6f5452e91a06b070bbde68b5494a92575c114660fb53cf04bf686e67ffa4a0f5ae41a59a39a8515cb686db553d25e71e7a97cc2febcac55df2711b6209c502b2f8827b13d3ad2f491c45a0cafe7b4d8d8810e805dee25d676ce92e0619b9c206f922132d806138713a8f69589c18c3fdc5acee41c1234b17ecab96b8c56a46787bba2c062468a13919afc18513835b472a79b2c35f9a91f38eb3b9e998b1000cc4a0dbd62ac1a5cc8102e373526d7e8f3c3a1b4bfb2f8a3947fe350cb89f73aa1bb054edfa9895c0fc971c2b5056dc8665902b51fced6dff80c4d247db977c15a710ce280fbd0ae3ca2a245b1c967aeb5a1a4a441c50bc9ceb33ca64b5ca93bd8b50060520f35a54a148a4112e8762f9d0b0f78a7f46a5f06c7a4b0845d020eb505c9e527aabab71009289a6919520d32af1f9f51ce4b3655c6f1aae1e26a16dc9aae55e9d4a6f91d4ba76e96fcb851161da3fc39d0d97ce30a5855c75ac2f613ff36a24801bcbd33f0ce4a3572b9a2fca21efb3b07897fc07ee71e8b1c0c6f8dbb7d2c4ed13f11249414fc94047d1a4a0be94d45db56af4c1a3bf39c9c5aa18209eaebb9e025f670d4c8cc1ee598c912db154eaa3d0c93cb3957e126c50486bf98c852ad326b5f80a19df6b2791f3d65b8586474f4c5dcb2aca0911d2257d1bb6a1e9fc1435be879e75d23290f9feb93ed40baaeca1c399fc91fb1da3e5f0f5d63e543a8d12fe6f7e654026d3a118ab58cb14bef9328d4af254215eb1f639828cc6405a3ab02d90bb70a798787a52c29b3a28fc67b0908563a65f08112abd4e9115cb01db09460c602aba3ddc375569dc3abe42c61c5ea7feb39ad8b05d8e2718e68806c0e1c34b0bc85492f985f8b3e76197a50d63982b780187078f5c59ebd814afaeffc7b2c6ee39d4f9c8c45fb5f685756c563f4b9d028fe7981b70752f5a31e44ba051ab40f3604c8596f1e95dc9b0911e7ede63d69b5eecd245fbecbcf233cf6eba842c0fec795a5adeab2100b1a1bc62c15046d48ec5709da4af64f59a2e552ddbbdcda1f543bb4b687e79f2253ff0cd9ba4e6bfae8e510e5147273d288fd4336dbd0b6617bf0ef71c0b4f1f9c1dc999c17ad32fe196b1e2b27baf4d59bba8e5193a9595bd786be00c32bae89c5dbed1e994fddffbec49d0e2d270bcc1068850e5d7e7652e274909b3cf5e3bc6bf64def0bbeac974a76d835e9a10bdd7896f27833232d907b7405260e3c986569bb8fdd65a55b020b91149f27bda9e63b4c2cc5370bcc81ef044a68c40c1b178e4265440334cc40f59ab5f82a022532805bfa659257c8d8ab9b4aef6abbd05de284c2eb165ef35737e3d387988c566f7b1ca0b1fc3e7b4ed991b77f23775e1c36a09a991384a33b78\n\terror packet for node 0: 2dd2f49c1f5af0fcad371d96e8cddbdcd5096dc309c1d4e110f955926506b3c03b44c192896f45610741c85ed4074212537e0c118d472ff3a559ae244acd9d783c65977765c5d4e00b723d00f12475aafaafff7b31c1be5a589e6e25f8da2959107206dd42bbcb43438129ce6cce2b6b4ae63edc76b876136ca5ea6cd1c6a04ca86eca143d15e53ccdc9e23953e49dc2f87bb11e5238cd6536e57387225b8fff3bf5f3e686fd08458ffe0211b87d64770db9353500af9b122828a006da754cf979738b4374e146ea79dd93656170b89c98c5f2299d6e9c0410c826c721950c780486cd6d5b7130380d7eaff994a8503a8fef3270ce94889fe996da66ed121741987010f785494415ca991b2e8b39ef2df6bde98efd2aec7d251b2772485194c8368451ad49c2354f9d30d95367bde316fec6cbdddc7dc0d25e99d3075e13d3de0822669861dafcd29de74eac48b64411987285491f98d78584d0c2a163b7221ea796f9e8671b2bb91e38ef5e18aaf32c6c02f2fb690358872a1ed28166172631a82c2568d23238017188ebbd48944a147f6cdb3690d5f88e51371cb70adf1fa02afe4ed8b581afc8bcc5104922843a55d52acde09bc9d2b71a663e178788280f3c3eae127d21b0b95777976b3eb17be40a702c244d0e5f833ff49dae6403ff44b131e66df8b88e33ab0a58e379f2c34bf5113c66b9ea8241fc7aa2b1fa53cf4ed3cdd91d407730c66fb039ef3a36d4050dde37d34e80bcfe02a48a6b14ae28227b1627b5ad07608a7763a531f2ffc96dff850e8c583461831b19feffc783bc1beab6301f647e9617d14c92c4b1d63f5147ccda56a35df8ca4806b8884c4aa3c3cc6a174fdc2232404822569c01aba686c1df5eecc059ba97e9688c8b16b70f0d24eacfdba15db1c71f72af1b2af85bd168f0b0800483f115eeccd9b02adf03bdd4a88eab03e43ce342877af2b61f9d3d85497cd1c6b96674f3d4f07f635bb26add1e36835e321d70263b1c04234e222124dad30ffb9f2a138e3ef453442df1af7e566890aedee568093aa922dd62db188aa8361c55503f8e2c2e6ba93de744b55c15260f15ec8e69bb01048ca1fa7bbbd26975bde80930a5b95054688a0ea73af0353cc84b997626a987cc06a517e18f91e02908829d4f4efc011b9867bd9bfe04c5f94e4b9261d30cc39982eb7b250f12aee2a4cce0484ff34eebba89bc6e35bd48d3968e4ca2d77527212017e202141900152f2fd8af0ac3aa456aae13276a13b9b9492a9a636e18244654b3245f07b20eb76b8e1cea8c55e5427f08a63a16b0a633af67c8e48ef8e53519041c9138176eb14b8782c6c2ee76146b8490b97978ee73cd0104e12f483be5a4af414404618e9f6633c55dda6f22252cb793d3d16fae4f0e1431434e7acc8fa2c009d4f6e345ade172313d558a4e61b4377e31b8ed4e28f7cd13a7fe3f72a409bc3bdabfe0ba47a6d861e21f64d2fac706dab18b3e546df4\n\n# References\n\n[sphinx]: http://www.cypherpunks.ca/~iang/pubs/Sphinx_Oakland09.pdf\n[RFC2104]: https://tools.ietf.org/html/rfc2104\n[fips198]: http://csrc.nist.gov/publications/fips/fips198-1/FIPS-198-1_final.pdf\n[sec2]: http://www.secg.org/sec2-v2.pdf\n[rfc8439]: https://tools.ietf.org/html/rfc8439\n\n# Authors\n\n[ FIXME: ]\n\n![Creative Commons License](https://i.creativecommons.org/l/by/4.0/88x31.png \"License CC-BY\")\n<br>\nThis work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).\n"
        },
        {
          "name": "05-onchain.md",
          "type": "blob",
          "size": 33.37890625,
          "content": "# BOLT #5: Recommendations for On-chain Transaction Handling\n\n## Abstract\n\nLightning allows for two parties (a local node and a remote node) to conduct transactions\noff-chain by giving each of the parties a *cross-signed commitment transaction*,\nwhich describes the current state of the channel (basically, the current balance).\nThis *commitment transaction* is updated every time a new payment is made and\nis spendable at all times.\n\nThere are three ways a channel can end:\n\n1. The good way (*mutual close*): at some point the local and remote nodes agree\nto close the channel. They generate a *closing transaction* (which is similar to a\ncommitment transaction, but without any pending payments) and publish it on the\nblockchain (see [BOLT #2: Channel Close](02-peer-protocol.md#channel-close)).\n2. The bad way (*unilateral close*): something goes wrong, possibly without evil\nintent on either side. Perhaps one party crashed, for instance. One side\npublishes its *latest commitment transaction*.\n3. The ugly way (*revoked transaction close*): one of the parties deliberately\ntries to cheat, by publishing an *outdated commitment transaction* (presumably,\na prior version, which is more in its favor).\n\nBecause Lightning is designed to be trustless, there is no risk of loss of funds\nin any of these three cases; provided that the situation is properly handled.\nThe goal of this document is to explain exactly how a node should react when it\nencounters any of the above situations, on-chain.\n\n# Table of Contents\n  * [General Nomenclature](#general-nomenclature)\n  * [Commitment Transaction](#commitment-transaction)\n  * [Failing a Channel](#failing-a-channel)\n  * [Mutual Close Handling](#mutual-close-handling)\n  * [Unilateral Close Handling: Local Commitment Transaction](#unilateral-close-handling-local-commitment-transaction)\n      * [HTLC Output Handling: Local Commitment, Local Offers](#htlc-output-handling-local-commitment-local-offers)\n      * [HTLC Output Handling: Local Commitment, Remote Offers](#htlc-output-handling-local-commitment-remote-offers)\n  * [Unilateral Close Handling: Remote Commitment Transaction](#unilateral-close-handling-remote-commitment-transaction)\n      * [HTLC Output Handling: Remote Commitment, Local Offers](#htlc-output-handling-remote-commitment-local-offers)\n      * [HTLC Output Handling: Remote Commitment, Remote Offers](#htlc-output-handling-remote-commitment-remote-offers)\n  * [Revoked Transaction Close Handling](#revoked-transaction-close-handling)\n\t  * [Penalty Transactions Weight Calculation](#penalty-transactions-weight-calculation)\n  * [Generation of HTLC Transactions](#generation-of-htlc-transactions)\n  * [General Requirements](#general-requirements)\n  * [Appendix A: Expected Weights](#appendix-a-expected-weights)\n\t* [Expected Weight of the `to_local` Penalty Transaction Witness](#expected-weight-of-the-to-local-penalty-transaction-witness)\n\t* [Expected Weight of the `offered_htlc` Penalty Transaction Witness](#expected-weight-of-the-offered-htlc-penalty-transaction-witness)\n\t* [Expected Weight of the `accepted_htlc` Penalty Transaction Witness](#expected-weight-of-the-accepted-htlc-penalty-transaction-witness)\n  * [Authors](#authors)\n\n# General Nomenclature\n\nAny unspent output is considered to be *unresolved* and can be *resolved*\nas detailed in this document. Usually this is accomplished by spending it with\nanother *resolving* transaction. Although, sometimes simply noting the output\nfor later wallet spending is sufficient, in which case the transaction containing\nthe output is considered to be its own *resolving* transaction.\n\nOutputs that are *resolved* are considered *irrevocably resolved*\nonce the remote's *resolving* transaction is included in a block at least 100\ndeep, on the most-work blockchain. 100 blocks is far greater than the\nlongest known Bitcoin fork and is the same wait time used for\nconfirmations of miners' rewards (see [Reference Implementation](https://github.com/bitcoin/bitcoin/blob/4db82b7aab4ad64717f742a7318e3dc6811b41be/src/consensus/tx_verify.cpp#L223)).\n\n## Requirements\n\nA node:\n  - once it has broadcast a funding transaction OR sent a commitment signature\n  for a commitment transaction that contains an HTLC output:\n    - until all outputs are *irrevocably resolved*:\n      - MUST monitor the blockchain for transactions that spend any output that\n      is NOT *irrevocably resolved*.\n  - MUST *resolve* all outputs, as specified below.\n  - MUST be prepared to resolve outputs multiple times, in case of blockchain\n  reorganizations.\n  - upon the funding transaction being spent, if the channel is NOT already\n  closed:\n    - MAY send a descriptive `error`.\n    - SHOULD fail the channel.\n  - SHOULD ignore invalid transactions.\n\n## Rationale\n\nOnce a local node has some funds at stake, monitoring the blockchain is required\nto ensure the remote node does not close unilaterally.\n\nInvalid transactions (e.g. bad signatures) can be generated by anyone,\n(and will be ignored by the blockchain anyway), so they should not\ntrigger any action.\n\n# Commitment Transaction\n\nThe local and remote nodes each hold a *commitment transaction*. Each of these\ncommitment transactions has up to six types of outputs:\n\n1. _local node's main output_: Zero or one output, to pay to the *local node's*\ndelayed_pubkey.\n2. _remote node's main output_: Zero or one output, to pay to the *remote node's*\ndelayed_pubkey.\n3. _local node's anchor output_: one output paying to the *local node's*\nfunding_pubkey.\n4. _remote node's anchor output_: one output paying to the *remote node's*\nfunding_pubkey.\n5. _local node's offered HTLCs_: Zero or more pending payments (*HTLCs*), to pay\nthe *remote node* in return for a payment preimage.\n6. _remote node's offered HTLCs_: Zero or more pending payments (*HTLCs*), to\npay the *local node* in return for a payment preimage.\n\nTo incentivize the local and remote nodes to cooperate, an `OP_CHECKSEQUENCEVERIFY`\nrelative timeout encumbers the *local node's outputs* (in the *local node's\ncommitment transaction*) and the *remote node's outputs* (in the *remote node's\ncommitment transaction*). So for example, if the local node publishes its\ncommitment transaction, it will have to wait to claim its own funds,\nwhereas the remote node will have immediate access to its own funds. As a\nconsequence, the two commitment transactions are not identical, but they are\n(usually) symmetrical.\n\nSee [BOLT #3: Commitment Transaction](03-transactions.md#commitment-transaction)\nfor more details.\n\n# Failing a Channel\n\nAlthough closing a channel can be accomplished in several ways, the most\nefficient is preferred.\n\nVarious error cases involve closing a channel. The requirements for sending\nerror messages to peers are specified in\n[BOLT #1: The `error` Message](01-messaging.md#the-error-message).\n\n## Requirements\n\nA node:\n  - if a *local commitment transaction* has NOT ever contained a `to_local`\n  or HTLC output:\n    - MAY simply forget the channel.\n  - otherwise:\n    - if the *current commitment transaction* does NOT contain `to_local` or\n    other HTLC outputs:\n      - MAY simply wait for the remote node to close the channel.\n      - until the remote node closes:\n        - MUST NOT forget the channel.\n    - otherwise:\n      - if it has received a valid `closing_signed` message that includes a\n      sufficient fee:\n        - SHOULD use this fee to perform a *mutual close*.\n      - otherwise:\n      \t- if the node knows or assumes its channel state is outdated:\n      \t  - MUST NOT broadcast its *last commitment transaction*.\n        - otherwise:\n          - MUST broadcast the *last commitment transaction*, for which it has a\n          signature, to perform a *unilateral close*.\n          - MUST spend any `to_local_anchor` output, providing sufficient fees as incentive to include the commitment transaction in a block.\n          Special care must be taken when spending to a third-party, because this re-introduces the vulnerability that was\n          addressed by adding the CSV delay to the non-anchor outputs.\n          - SHOULD use [replace-by-fee](https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki) or other mechanism on the spending transaction if it proves insufficient for timely inclusion in a block.\n\n## Rationale\n\nSince `dust_limit_satoshis` is supposed to prevent creation of uneconomic\noutputs (which would otherwise remain forever, unspent on the blockchain), all\ncommitment transaction outputs MUST be spent.\n\nIn the early stages of a channel, it's common for one side to have\nlittle or no funds in the channel; in this case, having nothing at stake, a node\nneed not consume resources monitoring the channel state.\n\nThere exists a bias towards preferring mutual closes over unilateral closes,\nbecause outputs of the former are unencumbered by a delay and are directly\nspendable by wallets. In addition, mutual close fees tend to be less exaggerated\nthan those of commitment transactions (or in the case of `option_anchors`,\nthe commitment transaction may require a child transaction to cause it to be mined). So, the only reason not to use the\nsignature from `closing_signed` would be if the fee offered was too small for\nit to be processed.\n\n# Mutual Close Handling\n\nA closing transaction *resolves* the funding transaction output.\n\nIn the case of a mutual close, a node need not do anything else, as it has\nalready agreed to the output, which is sent to its specified `scriptpubkey` (see\n[BOLT #2: Closing initiation: `shutdown`](02-peer-protocol.md#closing-initiation-shutdown)).\n\n# Unilateral Close Handling: Local Commitment Transaction\n\nThis is the first of two cases involving unilateral closes. In this case, a\nnode discovers its *local commitment transaction*, which *resolves* the funding\ntransaction output.\n\nHowever, a node cannot claim funds from the outputs of a unilateral close that\nit initiated, until the `OP_CHECKSEQUENCEVERIFY` delay has passed (as specified\nby the remote node's `to_self_delay` field). Where relevant, this situation is\nnoted below.\n\n## Requirements\n\nA node:\n  - upon discovering its *local commitment transaction*:\n    - SHOULD spend the `to_local` output to a convenient address.\n    - MUST wait until the `OP_CHECKSEQUENCEVERIFY` delay has passed (as\n    specified by the remote node's `to_self_delay` field) before spending the\n    output.\n      - Note: if the output is spent (as recommended), the output is *resolved*\n      by the spending transaction, otherwise it is considered *resolved* by the\n      commitment transaction itself.\n    - MAY ignore the `to_remote` output.\n      - Note: No action is required by the local node, as `to_remote` is\n      considered *resolved* by the commitment transaction itself.\n    - MUST handle HTLCs offered by itself as specified in\n    [HTLC Output Handling: Local Commitment, Local Offers](#htlc-output-handling-local-commitment-local-offers).\n    - MUST handle HTLCs offered by the remote node as\n    specified in [HTLC Output Handling: Local Commitment, Remote Offers](#htlc-output-handling-local-commitment-remote-offers).\n\n## Rationale\n\nSpending the `to_local` output avoids having to remember the complicated\nwitness script, associated with that particular channel, for later\nspending.\n\nThe `to_remote` output is entirely the business of the remote node, and\ncan be ignored.\n\n## HTLC Output Handling: Local Commitment, Local Offers\n\nEach HTLC output can only be spent by either the *local offerer*, by using the\nHTLC-timeout transaction after it's timed out, or the *remote recipient*, if it\nhas the payment preimage.\n\nThere can be HTLCs which are not represented by any outputs: either\nbecause they were trimmed as dust, or because the transaction has only been\npartially committed.\n\nThe HTLC output has *timed out* once the height of the latest block is equal to\nor greater than the HTLC `cltv_expiry`.\n\n### Requirements\n\nA node:\n  - if the commitment transaction HTLC output is spent using the payment\n  preimage, the output is considered *irrevocably resolved*:\n    - MUST extract the payment preimage from the transaction input witness.\n  - if the commitment transaction HTLC output has *timed out* and hasn't been\n  *resolved*:\n    - MUST *resolve* the output by spending it using the HTLC-timeout\n    transaction.\n    - once the resolving transaction has reached reasonable depth:\n      - MUST fail the corresponding incoming HTLC (if any).\n      - MUST resolve the output of that HTLC-timeout transaction.\n      - SHOULD resolve the HTLC-timeout transaction by spending it to a\n      convenient address.\n        - Note: if the output is spent (as recommended), the output is\n        *resolved* by the spending transaction, otherwise it is considered\n        *resolved* by the HTLC-timeout transaction itself.\n      - MUST wait until the `OP_CHECKSEQUENCEVERIFY` delay has passed (as\n      specified by the remote node's `open_channel` `to_self_delay` field)\n      before spending that HTLC-timeout output.\n  - for any committed HTLC that does NOT have an output in this commitment\n  transaction:\n    - once the commitment transaction has reached reasonable depth:\n      - MUST fail the corresponding incoming HTLC (if any).\n    - if no *valid* commitment transaction contains an output corresponding to\n    the HTLC.\n      - MAY fail the corresponding incoming HTLC sooner.\n\n### Rationale\n\nThe payment preimage either serves to prove payment (when the offering node\noriginated the payment) or to redeem the corresponding incoming HTLC from\nanother peer (when the offering node is forwarding the payment). Once a node has\nextracted the payment, it no longer cares about the fate of the HTLC-spending\ntransaction itself.\n\nIn cases where both resolutions are possible (e.g. when a node receives payment\nsuccess after timeout), either interpretation is acceptable; it is the\nresponsibility of the recipient to spend it before this occurs.\n\nThe local HTLC-timeout transaction needs to be used to time out the HTLC (to\nprevent the remote node fulfilling it and claiming the funds) before the\nlocal node can back-fail any corresponding incoming HTLC, using\n`update_fail_htlc` (presumably with reason `permanent_channel_failure`), as\ndetailed in\n[BOLT #2](02-peer-protocol.md#forwarding-htlcs).\nIf the incoming HTLC is also on-chain, a node must simply wait for it to\ntimeout: there is no way to signal early failure.\n\nIf an HTLC is too small to appear in *any commitment transaction*, it can be\nsafely failed immediately. Otherwise, if an HTLC isn't in the *local commitment\ntransaction*, a node needs to make sure that a blockchain reorganization, or\nrace, does not switch to a commitment transaction that does contain the HTLC\nbefore the node fails it (hence the wait). The requirement that the incoming\nHTLC be failed before its own timeout still applies as an upper bound.\n\n## HTLC Output Handling: Local Commitment, Remote Offers\n\nEach HTLC output can only be spent by the recipient, using the HTLC-success\ntransaction, which it can only populate if it has the payment\npreimage. If it doesn't have the preimage (and doesn't discover it), it's\nthe offerer's responsibility to spend the HTLC output once it's timed out.\n\nThere are several possible cases for an offered HTLC:\n\n1. The offerer is NOT irrevocably committed to it. The recipient will usually\n   not know the preimage, since it will not forward HTLCs until they're fully\n   committed. So using the preimage would reveal that this recipient is the\n   final hop; thus, in this case, it's best to allow the HTLC to time out.\n2. The offerer is irrevocably committed to the offered HTLC, but the recipient\n   has not yet committed to an outgoing HTLC. In this case, the recipient can\n   either forward or timeout the offered HTLC.\n3. The recipient has committed to an outgoing HTLC, in exchange for the offered\n   HTLC. In this case, the recipient must use the preimage, once it receives it\n   from the outgoing HTLC; otherwise, it will lose funds by sending an outgoing\n   payment without redeeming the incoming payment.\n\n### Requirements\n\nA local node:\n  - if it receives (or already possesses) a payment preimage for an unresolved\n  HTLC output that it has been offered AND for which it has committed to an\n  outgoing HTLC:\n    - MUST *resolve* the output by spending it, using the HTLC-success\n    transaction.\n    - MUST NOT reveal its own preimage when it's not the final recipient.<sup>[Preimage-Extraction](https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-October/002857.html)</sup>\n    - MUST resolve the output of that HTLC-success transaction.\n  - otherwise:\n    - if the *remote node* is NOT irrevocably committed to the HTLC:\n      - MUST NOT *resolve* the output by spending it.\n  - SHOULD resolve that HTLC-success transaction output by spending it to a\n  convenient address.\n  - MUST wait until the `OP_CHECKSEQUENCEVERIFY` delay has passed (as specified\n    by the *remote node's* `open_channel`'s `to_self_delay` field), before\n    spending that HTLC-success transaction output.\n\nIf the output is spent (as is recommended), the output is *resolved* by\nthe spending transaction, otherwise it's considered *resolved* by the HTLC-success\ntransaction itself.\n\nIf it's NOT otherwise resolved, once the HTLC output has expired, it is\nconsidered *irrevocably resolved*.\n\n# Unilateral Close Handling: Remote Commitment Transaction\n\nThe *remote node's* commitment transaction *resolves* the funding\ntransaction output.\n\nThere are no delays constraining node behavior in this case, so it's simpler for\na node to handle than the case in which it discovers its local commitment\ntransaction (see [Unilateral Close Handling: Local Commitment Transaction](#unilateral-close-handling-local-commitment-transaction)).\n\n## Requirements\n\nA local node:\n  - upon discovering a *valid* commitment transaction broadcast by a\n  *remote node*:\n    - if possible:\n      - MUST handle each output as specified below.\n      - MAY take no action in regard to the associated `to_remote`, which is\n      simply a P2WPKH output to the *local node*.\n        - Note: `to_remote` is considered *resolved* by the commitment transaction\n        itself.\n      - MAY take no action in regard to the associated `to_local`, which is a\n      payment output to the *remote node*.\n        - Note: `to_local` is considered *resolved* by the commitment transaction\n        itself.\n      - MUST handle HTLCs offered by itself as specified in\n      [HTLC Output Handling: Remote Commitment, Local Offers](#htlc-output-handling-remote-commitment-local-offers)\n      - MUST handle HTLCs offered by the remote node as specified in\n      [HTLC Output Handling: Remote Commitment, Remote Offers](#htlc-output-handling-remote-commitment-remote-offers)\n    - otherwise (it is NOT able to handle the broadcast for some reason):\n      - MUST inform the user of potentially lost funds.\n\n## Rationale\n\nThere may be more than one valid, *unrevoked* commitment transaction after a\nsignature has been received via `commitment_signed` and before the corresponding\n`revoke_and_ack`. As such, either commitment may serve as the *remote node's*\ncommitment transaction; hence, the local node is required to handle both.\n\nIn the case of data loss, a local node may reach a state where it doesn't\nrecognize all of the *remote node's* commitment transaction HTLC outputs. It can\ndetect the data loss state, because it has signed the transaction, and the\ncommitment number is greater than expected. It can derive its own `remotepubkey` for the\ntransaction, in order to salvage its own funds. Note: in this scenario, the node\nwill be unable to salvage the HTLCs.\n\n## HTLC Output Handling: Remote Commitment, Local Offers\n\nEach HTLC output can only be spent by either the *local offerer*, after it's\ntimed out, or by the *remote recipient*, by using the HTLC-success transaction\nif it has the payment preimage.\n\nThere can be HTLCs which are not represented by any outputs: either\nbecause the outputs were trimmed as dust, or because the remote node has two\n*valid* commitment transactions with differing HTLCs.\n\nThe HTLC output has *timed out* once the depth of the latest block is equal to\nor greater than the HTLC `cltv_expiry`.\n\n### Requirements\n\nA local node:\n  - if the commitment transaction HTLC output is spent using the payment\n  preimage:\n    - MUST extract the payment preimage from the HTLC-success transaction input\n    witness.\n      - Note: the output is considered *irrevocably resolved*.\n  - if the commitment transaction HTLC output has *timed out* AND NOT been\n  *resolved*:\n    - MUST *resolve* the output, by spending it to a convenient address.\n  - for any committed HTLC that does NOT have an output in this commitment\n  transaction:\n    - once the commitment transaction has reached reasonable depth:\n      - MUST fail the corresponding incoming HTLC (if any).\n    - otherwise:\n      - if no *valid* commitment transaction contains an output corresponding to\n      the HTLC:\n        - MAY fail it sooner.\n\n### Rationale\n\nIf the commitment transaction belongs to the *remote* node, the only way for it\nto spend the HTLC output (using a payment preimage) is for it to use the\nHTLC-success transaction.\n\nThe payment preimage either serves to prove payment (when the offering node is\nthe originator of the payment) or to redeem the corresponding incoming HTLC from\nanother peer (when the offering node is forwarding the payment). After a node has\nextracted the payment, it no longer need be concerned with the fate of the\nHTLC-spending transaction itself.\n\nIn cases where both resolutions are possible (e.g. when a node receives payment\nsuccess after timeout), either interpretation is acceptable: it's the\nresponsibility of the recipient to spend it before this occurs.\n\nOnce it has timed out, the local node needs to spend the HTLC output (to prevent\nthe remote node from using the HTLC-success transaction) before it can\nback-fail any corresponding incoming HTLC, using `update_fail_htlc`\n(presumably with reason `permanent_channel_failure`), as detailed in\n[BOLT #2](02-peer-protocol.md#forwarding-htlcs).\nIf the incoming HTLC is also on-chain, a node simply waits for it to\ntimeout, as there's no way to signal early failure.\n\nIf an HTLC is too small to appear in *any commitment transaction*, it\ncan be safely failed immediately. Otherwise,\nif an HTLC isn't in the *local commitment transaction* a node needs to make sure\nthat a blockchain reorganization or race does not switch to a\ncommitment transaction that does contain it before the node fails it: hence\nthe wait. The requirement that the incoming HTLC be failed before its\nown timeout still applies as an upper bound.\n\n## HTLC Output Handling: Remote Commitment, Remote Offers\n\nThe remote HTLC outputs can only be spent by the local node if it has the\npayment preimage. If the local node does not have the preimage (and doesn't\ndiscover it), it's the remote node's responsibility to spend the HTLC output\nonce it's timed out.\n\nThere are actually several possible cases for an offered HTLC:\n\n1. The offerer is not irrevocably committed to it. In this case, the recipient\n   usually won't know the preimage, since it won't forward HTLCs until\n   they're fully committed. As using the preimage would reveal that\n   this recipient is the final hop, it's best to allow the HTLC to time out.\n2. The offerer is irrevocably committed to the offered HTLC, but the recipient\n   hasn't yet committed to an outgoing HTLC. In this case, the recipient can\n   either forward it or wait for it to timeout.\n3. The recipient has committed to an outgoing HTLC in exchange for an offered\n   HTLC. In this case, the recipient must use the preimage, if it receives it\n   from the outgoing HTLC; otherwise, it will lose funds by sending an outgoing\n   payment without redeeming the incoming one.\n\n### Requirements\n\nA local node:\n  - if it receives (or already possesses) a payment preimage for an unresolved\n  HTLC output that it was offered AND for which it has committed to an\noutgoing HTLC:\n    - MUST *resolve* the output by spending it to a convenient address.\n  - otherwise:\n    - if the remote node is NOT irrevocably committed to the HTLC:\n      - MUST NOT *resolve* the output by spending it.\n\nIf not otherwise resolved, once the HTLC output has expired, it is considered\n*irrevocably resolved*.\n\n# Revoked Transaction Close Handling\n\nIf any node tries to cheat by broadcasting an outdated commitment transaction\n(any previous commitment transaction besides the most current one), the other\nnode in the channel can use its revocation private key to claim all the funds from the\nchannel's original funding transaction.\n\n## Requirements\n\nOnce a node discovers a commitment transaction for which *it* has a\nrevocation private key, the funding transaction output is *resolved*.\n\nA local node:\n  - MUST NOT broadcast a commitment transaction for which *it* has exposed the\n  `per_commitment_secret`.\n  - MAY take no action regarding the _local node's main output_, as this is a\n  simple P2WPKH output to itself.\n    - Note: this output is considered *resolved* by the commitment transaction\n      itself.\n  - MUST *resolve* the _remote node's main output_ by spending it using the\n  revocation private key.\n  - MUST *resolve* the _remote node's offered HTLCs_ in one of three ways:\n    * spend the *commitment tx* using the payment revocation private key.\n    * spend the *commitment tx* using the payment preimage (if known).\n    * spend the *HTLC-timeout tx*, if the remote node has published it.\n  - MUST *resolve* the _local node's offered HTLCs_ in one of three ways:\n    * spend the *commitment tx* using the payment revocation private key.\n    * spend the *commitment tx* once the HTLC timeout has passed.\n    * spend the *HTLC-success tx*, if the remote node has published it.\n  - MUST *resolve* the _remote node's HTLC-timeout transaction_ by spending it\n  using the revocation private key.\n  - MUST *resolve* the _remote node's HTLC-success transaction_ by spending it\n  using the revocation private key.\n  - SHOULD extract the payment preimage from the transaction input witness, if\n  it's not already known.\n  - if `option_anchors` applies:\n    - MAY use a single transaction to *resolve* all the outputs.\n    - if confirmation doesn't happen before reaching `security_delay` blocks from\n  expiry:\n      - SHOULD *resolve* revoked outputs in their own, separate penalty transactions. A previous\n  penalty transaction claiming multiple revoked outputs at once may be blocked from confirming\n  because of a transaction pinning attack.\n  - otherwise:\n    - MAY use a single transaction to *resolve* all the outputs.\n  - MUST handle its transactions being invalidated by HTLC transactions.\n\n## Rationale\n\nA single transaction that resolves all the outputs will be under the\nstandard size limit because of the 483 HTLC-per-party limit (see\n[BOLT #2](02-peer-protocol.md#the-open_channel-message)).\n\nNote: if `option_anchors` applies, the cheating node can pin spends of its\nHTLC-timeout/HTLC-success outputs thanks to SIGHASH_SINGLE malleability.\nUsing a single penalty transaction for all revoked outputs is thus unsafe as it\ncould be blocked to propagate long enough for the _local node's `to_local` output_ 's\nrelative locktime to expire and the cheating party escaping the penalty on this\noutput. Though this situation doesn't prevent faithful punishment of the second-level\nrevoked output if the pinning transaction confirms.\n\nThe `security_delay` is a fixed-point relative to the absolute expiration of\nthe revoked output at which the punishing node must broadcast a single-spend\ntransaction for the revoked output and actively fee-bump it until its confirmation.\nThe exact value of `security_delay` is left as a matter of node policy, though we\nrecommend 18 blocks (similar to incoming HTLC deadline).\n\n## Penalty Transactions Weight Calculation\n\nThere are three different scripts for penalty transactions, with the following\nwitness weights (details of weight computation are in\n[Appendix A](#appendix-a-expected-weights)):\n\n    to_local_penalty_witness: 160 bytes\n    offered_htlc_penalty_witness: 243 bytes\n    accepted_htlc_penalty_witness: 249 bytes\n\nThe penalty *txinput* itself takes up 41 bytes and has a weight of 164 bytes,\nwhich results in the following weights for each input:\n\n    to_local_penalty_input_weight: 324 bytes\n    offered_htlc_penalty_input_weight: 407 bytes\n    accepted_htlc_penalty_input_weight: 413 bytes\n\nThe rest of the penalty transaction takes up 4+1+1+8+1+34+4=53 bytes of\nnon-witness data: assuming it has a pay-to-witness-script-hash (the largest\nstandard output script), in addition to a 2-byte witness header.\n\nIn addition to spending these outputs, a penalty transaction may optionally\nspend the commitment transaction's `to_remote` output (e.g. to reduce the total\namount paid in fees). Doing so requires the inclusion of a P2WPKH witness and an\nadditional *txinput*, resulting in an additional 108 + 164 = 272 bytes.\n\nIn the worst case scenario, the node holds only incoming HTLCs, and the\nHTLC-timeout transactions are not published, which forces the node to spend from\nthe commitment transaction.\n\nWith a maximum standard weight of 400000 bytes, the maximum number of HTLCs that\ncan be swept in a single transaction is as follows:\n\n    max_num_htlcs = (400000 - 324 - 272 - (4 * 53) - 2) / 413 = 966\n\nThus, 483 bidirectional HTLCs (containing both `to_local` and\n`to_remote` outputs) can be resolved in a single penalty transaction.\nNote: even if the `to_remote` output is not swept, the resulting\n`max_num_htlcs` is 967; which yields the same unidirectional limit of 483 HTLCs.\n\n# Generation of HTLC Transactions\n\nIf `option_anchors` does not apply to the commitment transaction, then\nHTLC-timeout and HTLC-success transactions are complete transactions with\n(hopefully!) reasonable fees and must be used directly.\n\nOtherwise, `SIGHASH_SINGLE|SIGHASH_ANYONECANPAY` MUST be used on the\nHTLC signatures received from the peer, as this allows HTLC transactions to be combined with \nother transactions.  The local signature MUST use `SIGHASH_ALL`, otherwise\nanyone can attach additional inputs and outputs to the tx.\n\nIf `option_anchors` applies, then the HTLC-timeout and\nHTLC-success transactions are signed with the input and output having the same\nvalue. This means they have a zero fee and MUST be combined with other inputs\nto arrive at a reasonable fee.\n\n## Requirements\n\nA node which broadcasts an HTLC-success or HTLC-timeout transaction for a\ncommitment transaction:\n  - if `option_anchors` applies:\n    - MUST combine it with inputs contributing sufficient fee to ensure timely\n      inclusion in a block.\n    - MAY combine it with other transactions.\n\n# General Requirements\n\nA node:\n  - upon discovering a transaction that spends a funding transaction output\n  which does not fall into one of the above categories (mutual close, unilateral\n  close, or revoked transaction close):\n    - MUST warn the user of potentially lost funds.\n      - Note: the existence of such a rogue transaction implies that its private\n      key has leaked and that its funds may be lost as a result.\n  - MAY simply monitor the contents of the most-work chain for transactions.\n    - Note: on-chain HTLCs should be sufficiently rare that speed need not be\n    considered critical.\n  - MAY monitor (valid) broadcast transactions (a.k.a the mempool).\n    - Note: watching for mempool transactions should result in lower latency\n    HTLC redemptions.\n\n# Appendix A: Expected Weights\n\n## Expected Weight of the `to_local` Penalty Transaction Witness\n\nAs described in [BOLT #3](03-transactions.md), the witness for this transaction\nis:\n\n    <sig> 1 { OP_IF <revocationpubkey> OP_ELSE to_self_delay OP_CSV OP_DROP <local_delayedpubkey> OP_ENDIF OP_CHECKSIG }\n\nThe *expected weight* of the `to_local` penalty transaction witness is\ncalculated as follows:\n\n    to_local_script: 83 bytes\n        - OP_IF: 1 byte\n            - OP_DATA: 1 byte (revocationpubkey length)\n            - revocationpubkey: 33 bytes\n        - OP_ELSE: 1 byte\n            - OP_DATA: 1 byte (delay length)\n            - delay: 8 bytes\n            - OP_CHECKSEQUENCEVERIFY: 1 byte\n            - OP_DROP: 1 byte\n            - OP_DATA: 1 byte (local_delayedpubkey length)\n            - local_delayedpubkey: 33 bytes\n        - OP_ENDIF: 1 byte\n        - OP_CHECKSIG: 1 byte\n\n    to_local_penalty_witness: 160 bytes\n        - number_of_witness_elements: 1 byte\n        - revocation_sig_length: 1 byte\n        - revocation_sig: 73 bytes\n        - one_length: 1 byte\n        - witness_script_length: 1 byte\n        - witness_script (to_local_script)\n\n## Expected Weight of the `offered_htlc` Penalty Transaction Witness\n\nThe *expected weight* of the `offered_htlc` penalty transaction witness is\ncalculated as follows (some calculations have already been made in\n[BOLT #3](03-transactions.md)):\n\n    offered_htlc_script: 133 bytes\n\n    offered_htlc_penalty_witness: 243 bytes\n        - number_of_witness_elements: 1 byte\n        - revocation_sig_length: 1 byte\n        - revocation_sig: 73 bytes\n        - revocation_key_length: 1 byte\n        - revocation_key: 33 bytes\n        - witness_script_length: 1 byte\n        - witness_script (offered_htlc_script)\n\n## Expected Weight of the `accepted_htlc` Penalty Transaction Witness\n\nThe *expected weight*  of the `accepted_htlc` penalty transaction witness is\ncalculated as follows (some calculations have already been made in\n[BOLT #3](03-transactions.md)):\n\n    accepted_htlc_script: 139 bytes\n\n    accepted_htlc_penalty_witness: 249 bytes\n        - number_of_witness_elements: 1 byte\n        - revocation_sig_length: 1 byte\n        - revocation_sig: 73 bytes\n        - revocationpubkey_length: 1 byte\n        - revocationpubkey: 33 bytes\n        - witness_script_length: 1 byte\n        - witness_script (accepted_htlc_script)\n\n# Authors\n\n[FIXME:]\n\n![Creative Commons License](https://i.creativecommons.org/l/by/4.0/88x31.png \"License CC-BY\")\n<br>\nThis work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).\n"
        },
        {
          "name": "07-routing-gossip.md",
          "type": "blob",
          "size": 52.3720703125,
          "content": "# BOLT #7: P2P Node and Channel Discovery\n\nThis specification describes simple node discovery, channel discovery, and channel update mechanisms that do not rely on a third-party to disseminate the information.\n\nNode and channel discovery serve two different purposes:\n\n - Node discovery allows nodes to broadcast their ID, host, and port, so that other nodes can open connections and establish payment channels with them.\n - Channel discovery allows the creation and maintenance of a local view of the network's topology, so that a node can discover routes to desired destinations.\n\nTo support channel and node discovery, three *gossip messages* are supported:\n\n- For node discovery, peers exchange `node_announcement`\n  messages, which supply additional information about the nodes. There may be\n  multiple `node_announcement` messages, in order to update the node information.\n\n - For channel discovery, peers in the network exchange\n   `channel_announcement` messages containing information regarding new\n   channels between the two nodes. They can also exchange `channel_update`\n   messages, which update information about a channel. There can only be\n   one valid `channel_announcement` for any channel, but at least two\n   `channel_update` messages are expected.\n\n# Table of Contents\n\n  * [Definition of `short_channel_id`](#definition-of-short_channel_id)\n  * [The `announcement_signatures` Message](#the-announcement_signatures-message)\n  * [The `channel_announcement` Message](#the-channel_announcement-message)\n  * [The `node_announcement` Message](#the-node_announcement-message)\n  * [The `channel_update` Message](#the-channel_update-message)\n  * [Query Messages](#query-messages)\n  * [Rebroadcasting](#rebroadcasting)\n  * [HTLC Fees](#htlc-fees)\n  * [Pruning the Network View](#pruning-the-network-view)\n  * [Recommendations for Routing](#recommendations-for-routing)\n  * [References](#references)\n\n## Definition of `short_channel_id`\n\nThe `short_channel_id` is the unique description of the funding transaction.\nIt is constructed as follows:\n  1. the most significant 3 bytes: indicating the block height\n  2. the next 3 bytes: indicating the transaction index within the block\n  3. the least significant 2 bytes: indicating the output index that pays to the channel.\n\nThe standard human readable format for `short_channel_id` is created\nby printing the above components, in the order:\nblock height, transaction index, and output index.\nEach component is printed as a decimal number,\nand separated from each other by the small letter `x`.\nFor example, a `short_channel_id` might be written as `539268x845x1`,\nindicating a channel on the output 1 of the transaction at index 845\nof the block at height 539268.\n\n### Rationale\n\nThe `short_channel_id` human readable format is designed\nso that double-clicking or double-tapping it will select the entire ID\non most systems.\nHumans prefer decimal when reading numbers,\nso the ID components are written in decimal.\nThe small letter `x` is used since on most fonts,\nthe `x` is visibly smaller than decimal digits,\nmaking it easy to visibly group each component of the ID.\n\n## The `announcement_signatures` Message\n\nThis is a direct message between the two endpoints of a channel and serves as an opt-in mechanism to allow the announcement of the channel to the rest of the network.\nIt contains the necessary signatures, by the sender, to construct the `channel_announcement` message.\n\n1. type: 259 (`announcement_signatures`)\n2. data:\n    * [`channel_id`:`channel_id`]\n    * [`short_channel_id`:`short_channel_id`]\n    * [`signature`:`node_signature`]\n    * [`signature`:`bitcoin_signature`]\n\nThe willingness of the initiating node to announce the channel is signaled during channel opening by setting the `announce_channel` bit in `channel_flags` (see [BOLT #2](02-peer-protocol.md#the-open_channel-message)).\n\n### Requirements\n\nThe `announcement_signatures` message is created by constructing a `channel_announcement` message, corresponding to the newly established channel, and signing it with the secrets matching an endpoint's `node_id` and `bitcoin_key`. After it's signed, the\n`announcement_signatures` message may be sent.\n\nA node:\n  - if the `open_channel` message has the `announce_channel` bit set AND a `shutdown` message has not been sent:\n    - MUST send the `announcement_signatures` message.\n      - MUST NOT send `announcement_signatures` messages until `channel_ready`\n      has been sent and received AND the funding transaction has at least six confirmations.\n  - otherwise:\n    - MUST NOT send the `announcement_signatures` message.\n  - upon reconnection (once the above timing requirements have been met):\n    - MUST respond to the first `announcement_signatures` message with its own\n    `announcement_signatures` message.\n    - if it has NOT received an `announcement_signatures` message:\n      - SHOULD retransmit the `announcement_signatures` message.\n\nA recipient node:\n  - if the `short_channel_id` is NOT correct:\n    - SHOULD send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n  - if the `node_signature` OR the `bitcoin_signature` is NOT correct:\n    - MAY send a `warning` and close the connection, or send an\n      `error` and fail the channel.\n  - if it has sent AND received a valid `announcement_signatures` message:\n    - SHOULD queue the `channel_announcement` message for its peers.\n  - if it has not sent `channel_ready`:\n    - MAY defer handling the announcement_signatures until after it has sent `channel_ready`\n    - otherwise:\n      - MUST ignore it.\n\n\n### Rationale\n\nThe reason for allowing deferring of a premature announcement_signatures is\nthat an earlier version of the spec did not require waiting for receipt of\nfunding locked: deferring rather than ignoring it allows compatibility with\nthis behavior.\n\n## The `channel_announcement` Message\n\nThis gossip message contains ownership information regarding a channel. It ties\neach on-chain Bitcoin key to the associated Lightning node key, and vice-versa.\nThe channel is not practically usable until at least one side has announced\nits fee levels and expiry, using `channel_update`.\n\nProving the existence of a channel between `node_1` and `node_2` requires:\n\n1. proving that the funding transaction pays to `bitcoin_key_1` and\n   `bitcoin_key_2`\n2. proving that `node_1` owns `bitcoin_key_1`\n3. proving that `node_2` owns `bitcoin_key_2`\n\nAssuming that all nodes know the unspent transaction outputs, the first proof is\naccomplished by a node finding the output given by the `short_channel_id` and\nverifying that it is indeed a P2WSH funding transaction output for those keys\nspecified in [BOLT #3](03-transactions.md#funding-transaction-output).\n\nThe last two proofs are accomplished through explicit signatures:\n`bitcoin_signature_1` and `bitcoin_signature_2` are generated for each\n`bitcoin_key` and each of the corresponding `node_id`s are signed.\n\nIt's also necessary to prove that `node_1` and `node_2` both agree on the\nannouncement message: this is accomplished by having a signature from each\n`node_id` (`node_signature_1` and `node_signature_2`) signing the message.\n\n1. type: 256 (`channel_announcement`)\n2. data:\n    * [`signature`:`node_signature_1`]\n    * [`signature`:`node_signature_2`]\n    * [`signature`:`bitcoin_signature_1`]\n    * [`signature`:`bitcoin_signature_2`]\n    * [`u16`:`len`]\n    * [`len*byte`:`features`]\n    * [`chain_hash`:`chain_hash`]\n    * [`short_channel_id`:`short_channel_id`]\n    * [`point`:`node_id_1`]\n    * [`point`:`node_id_2`]\n    * [`point`:`bitcoin_key_1`]\n    * [`point`:`bitcoin_key_2`]\n\n### Requirements\n\nThe origin node:\n  - MUST set `chain_hash` to the 32-byte hash that uniquely identifies the chain\n  that the channel was opened within:\n    - for the _Bitcoin blockchain_:\n      - MUST set `chain_hash` value (encoded in hex) equal to `6fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d6190000000000`.\n  - MUST set `short_channel_id` to refer to the confirmed funding transaction,\n  as specified in [BOLT #2](02-peer-protocol.md#the-channel_ready-message).\n    - Note: the corresponding output MUST be a P2WSH, as described in [BOLT #3](03-transactions.md#funding-transaction-output).\n  - MUST set `node_id_1` and `node_id_2` to the public keys of the two nodes\n  operating the channel, such that `node_id_1` is the lexicographically-lesser of the\n  two compressed keys sorted in ascending lexicographic order.\n  - MUST set `bitcoin_key_1` and `bitcoin_key_2` to `node_id_1` and `node_id_2`'s\n  respective `funding_pubkey`s.\n  - MUST compute the double-SHA256 hash `h` of the message, beginning at offset\n  256, up to the end of the message.\n    - Note: the hash skips the 4 signatures but hashes the rest of the message,\n    including any future fields appended to the end.\n  - MUST set `node_signature_1` and `node_signature_2` to valid\n    signatures of the hash `h` (using `node_id_1` and `node_id_2`'s respective\n    secrets).\n  - MUST set `bitcoin_signature_1` and `bitcoin_signature_2` to valid\n  signatures of the hash `h` (using `bitcoin_key_1` and `bitcoin_key_2`'s\n  respective secrets).\n  - MUST set `features` based on what features were negotiated for this channel, according to [BOLT #9](09-features.md#assigned-features-flags)\n  - MUST set `len` to the minimum length required to hold the `features` bits\n  it sets.\n\nThe receiving node:\n  - MUST verify the integrity AND authenticity of the message by verifying the\n  signatures.\n  - if there is an unknown even bit in the `features` field:\n    - MUST NOT attempt to route messages through the channel.\n  - if the `short_channel_id`'s output does NOT correspond to a P2WSH (using\n    `bitcoin_key_1` and `bitcoin_key_2`, as specified in\n    [BOLT #3](03-transactions.md#funding-transaction-output)) OR the output is\n    spent:\n    - MUST ignore the message.\n  - if the specified `chain_hash` is unknown to the receiver:\n    - MUST ignore the message.\n  - otherwise:\n    - if `bitcoin_signature_1`, `bitcoin_signature_2`, `node_signature_1` OR\n    `node_signature_2` are invalid OR NOT correct:\n      - SHOULD send a `warning`.\n      - MAY close the connection.\n      - MUST ignore the message.\n    - otherwise:\n      - if `node_id_1` OR `node_id_2` are blacklisted:\n        - SHOULD ignore the message.\n      - otherwise:\n        - if the transaction referred to was NOT previously announced as a\n        channel:\n          - SHOULD queue the message for rebroadcasting.\n          - MAY choose NOT to for messages longer than the minimum expected\n          length.\n      - if it has previously received a valid `channel_announcement`, for the\n      same transaction, in the same block, but for a different `node_id_1` or\n      `node_id_2`:\n        - SHOULD blacklist the previous message's `node_id_1` and `node_id_2`,\n        as well as this `node_id_1` and `node_id_2` AND forget any channels\n        connected to them.\n      - otherwise:\n        - SHOULD store this `channel_announcement`.\n  - once its funding output has been spent OR reorganized out:\n    - SHOULD forget a channel after a 12-block delay.\n\n### Rationale\n\nBoth nodes are required to sign to indicate they are willing to route other\npayments via this channel (i.e. be part of the public network); requiring their\nBitcoin signatures proves that they control the channel.\n\nThe blacklisting of conflicting nodes disallows multiple different\nannouncements. Such conflicting announcements should never be broadcast by any\nnode, as this implies that keys have leaked.\n\nWhile channels should not be advertised before they are sufficiently deep, the\nrequirement against rebroadcasting only applies if the transaction has not moved\nto a different block.\n\nIn order to avoid storing excessively large messages, yet still allow for\nreasonable future expansion, nodes are permitted to restrict rebroadcasting\n(perhaps statistically).\n\nNew channel features are possible in the future: backwards compatible (or\noptional) features will have _odd_ feature bits, while incompatible features\nwill have _even_ feature bits\n([\"It's OK to be odd!\"](00-introduction.md#glossary-and-terminology-guide)).\n\nA delay of 12 blocks is used when forgetting a channel on funding output spend\nas to permit a new `channel_announcement` to propagate which indicates this\nchannel was spliced.\n\n## The `node_announcement` Message\n\nThis gossip message allows a node to indicate extra data associated with it, in\naddition to its public key. To avoid trivial denial of service attacks,\nnodes not associated with an already known channel are ignored.\n\n1. type: 257 (`node_announcement`)\n2. data:\n   * [`signature`:`signature`]\n   * [`u16`:`flen`]\n   * [`flen*byte`:`features`]\n   * [`u32`:`timestamp`]\n   * [`point`:`node_id`]\n   * [`3*byte`:`rgb_color`]\n   * [`32*byte`:`alias`]\n   * [`u16`:`addrlen`]\n   * [`addrlen*byte`:`addresses`]\n\n`timestamp` allows for the ordering of messages, in the case of multiple\nannouncements. `rgb_color` and `alias` allow intelligence services to assign\nnodes colors like black and cool monikers like 'IRATEMONK' and 'WISTFULTOLL'.\n\n`addresses` allows a node to announce its willingness to accept incoming network\nconnections: it contains a series of `address descriptor`s for connecting to the\nnode. The first byte describes the address type and is followed by the\nappropriate number of bytes for that type.\n\nThe following `address descriptor` types are defined:\n\n   * `1`: ipv4; data = `[4:ipv4_addr][2:port]` (length 6)\n   * `2`: ipv6; data = `[16:ipv6_addr][2:port]` (length 18)\n   * `3`: Deprecated (length 12). Used to contain Tor v2 onion services.\n   * `4`: Tor v3 onion service; data = `[35:onion_addr][2:port]` (length 37)\n       * version 3 ([prop224](https://gitweb.torproject.org/torspec.git/tree/proposals/224-rend-spec-ng.txt))\n         onion service addresses; Encodes:\n         `[32:32_byte_ed25519_pubkey] || [2:checksum] || [1:version]`, where\n         `checksum = sha3(\".onion checksum\" || pubkey || version)[:2]`.\n   * `5`: DNS hostname; data = `[1:hostname_len][hostname_len:hostname][2:port]` (length up to 258)\n       * `hostname` bytes MUST be ASCII characters.\n       * Non-ASCII characters MUST be encoded using Punycode:\n         https://en.wikipedia.org/wiki/Punycode\n\n### Requirements\n\nThe origin node:\n  - MUST set `timestamp` to be greater than that of any previous\n  `node_announcement` it has previously created.\n    - MAY base it on a UNIX timestamp.\n  - MUST set `signature` to the signature of the double-SHA256 of the entire\n  remaining packet after `signature` (using the key given by `node_id`).\n  - MAY set `alias` AND `rgb_color` to customize its appearance in maps and\n  graphs.\n    - Note: the first byte of `rgb_color` is the red value, the second byte is the\n    green value, and the last byte is the blue value.\n  - MUST set `alias` to a valid UTF-8 string, with any `alias` trailing-bytes\n  equal to 0.\n  - SHOULD fill `addresses` with an address descriptor for each public network\n  address that expects incoming connections.\n  - MUST set `addrlen` to the number of bytes in `addresses`.\n  - MUST place address descriptors in ascending order.\n  - SHOULD NOT place any zero-typed address descriptors anywhere.\n  - SHOULD use placement only for aligning fields that follow `addresses`.\n  - MUST NOT create a `type 1`, `type 2` or `type 5` address descriptor with\n  `port` equal to 0.\n  - SHOULD ensure `ipv4_addr` AND `ipv6_addr` are routable addresses.\n  - MUST set `features` according to [BOLT #9](09-features.md#assigned-features-flags)\n  - SHOULD set `flen` to the minimum length required to hold the `features`\n  bits it sets.\n  - SHOULD not announce a Tor v2 onion service.\n  - MUST NOT announce more than one `type 5` DNS hostname.\n\nThe receiving node:\n  - if `node_id` is NOT a valid compressed public key:\n    - SHOULD send a `warning`.\n    - MAY close the connection.\n    - MUST NOT process the message further.\n  - if `signature` is NOT a valid signature (using `node_id` of the\n  double-SHA256 of the entire message following the `signature` field, including\nany future fields appended to the end):\n    - SHOULD send a `warning`.\n    - MAY close the connection.\n    - MUST NOT process the message further.\n  - if `features` field contains _unknown even bits_:\n    - SHOULD NOT connect to the node.\n    - Unless paying a [BOLT #11](11-payment-encoding.md) invoice which does not\n      have the same bit(s) set, MUST NOT attempt to send payments _to_ the node.\n    - MUST NOT route a payment _through_ the node.\n  - SHOULD ignore the first `address descriptor` that does NOT match the types\n  defined above.\n  - if `addrlen` is insufficient to hold the address descriptors of the\n  known types:\n    - SHOULD send a `warning`.\n    - MAY close the connection.\n  - if `port` is equal to 0:\n    - SHOULD ignore `ipv6_addr` OR `ipv4_addr` OR `hostname`.\n  - if `node_id` is NOT previously known from a `channel_announcement` message,\n  OR if `timestamp` is NOT greater than the last-received `node_announcement`\n  from this `node_id`:\n    - SHOULD ignore the message.\n  - otherwise:\n    - if `timestamp` is greater than the last-received `node_announcement` from\n    this `node_id`:\n      - SHOULD queue the message for rebroadcasting.\n      - MAY choose NOT to queue messages longer than the minimum expected length.\n  - MAY use `rgb_color` AND `alias` to reference nodes in interfaces.\n    - SHOULD insinuate their self-signed origins.\n  - SHOULD ignore Tor v2 onion services.\n  - if more than one `type 5` address is announced:\n    - SHOULD ignore the additional data.\n    - MUST not forward the `node_announcement`.\n\n### Rationale\n\nNew node features are possible in the future: backwards compatible (or\noptional) ones will have _odd_ `feature` _bits_, incompatible ones will have\n_even_ `feature` _bits_. These will be propagated normally; incompatible\nfeature bits here refer to the nodes, not the `node_announcement` message\nitself.\n\nNew address types may be added in the future; as address descriptors have\nto be ordered in ascending order, unknown ones can be safely ignored.\nAdditional fields beyond `addresses` may also be added in the future—with\noptional padding within `addresses`, if they require certain alignment.\n\n### Security Considerations for Node Aliases\n\nNode aliases are user-defined and provide a potential avenue for injection\nattacks, both during the process of rendering and during persistence.\n\nNode aliases should always be sanitized before being displayed in\nHTML/Javascript contexts or any other dynamically interpreted rendering\nframeworks. Similarly, consider using prepared statements, input validation,\nand escaping to protect against injection vulnerabilities and persistence\nengines that support SQL or other dynamically interpreted querying languages.\n\n* [Stored and Reflected XSS Prevention](https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet)\n* [DOM-based XSS Prevention](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)\n* [SQL Injection Prevention](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)\n\nDon't be like the school of [Little Bobby Tables](https://xkcd.com/327/).\n\n## The `channel_update` Message\n\nAfter a channel has been initially announced, each side independently\nannounces the fees and minimum expiry delta it requires to relay HTLCs\nthrough this channel. Each uses the 8-byte channel shortid that matches the\n`channel_announcement` and the 1-bit `channel_flags` field to indicate which end of the\nchannel it's on (origin or final). A node can do this multiple times, in\norder to change fees.\n\nNote that the `channel_update` gossip message is only useful in the context\nof *relaying* payments, not *sending* payments. When making a payment\n `A` -> `B` -> `C` -> `D`, only the `channel_update`s related to channels\n `B` -> `C` (announced by `B`) and `C` -> `D` (announced by `C`) will\n come into play. When building the route, amounts and expiries for HTLCs need\n to be calculated backward from the destination to the source. The exact initial\n value for `amount_msat` and the minimal value for `cltv_expiry`, to be used for\n the last HTLC in the route, are provided in the payment request\n (see [BOLT #11](11-payment-encoding.md#tagged-fields)).\n\n1. type: 258 (`channel_update`)\n2. data:\n    * [`signature`:`signature`]\n    * [`chain_hash`:`chain_hash`]\n    * [`short_channel_id`:`short_channel_id`]\n    * [`u32`:`timestamp`]\n    * [`byte`:`message_flags`]\n    * [`byte`:`channel_flags`]\n    * [`u16`:`cltv_expiry_delta`]\n    * [`u64`:`htlc_minimum_msat`]\n    * [`u32`:`fee_base_msat`]\n    * [`u32`:`fee_proportional_millionths`]\n    * [`u64`:`htlc_maximum_msat`]\n\nThe `channel_flags` bitfield is used to indicate the direction of the channel: it\nidentifies the node that this update originated from and signals various options\nconcerning the channel. The following table specifies the meaning of its\nindividual bits:\n\n| Bit Position  | Name        | Meaning                          |\n| ------------- | ----------- | -------------------------------- |\n| 0             | `direction` | Direction this update refers to. |\n| 1             | `disable`   | Disable the channel.             |\n\nThe `message_flags` bitfield is used to provide additional details about the message:\n\n| Bit Position  | Name           |\n| ------------- | ---------------|\n| 0             | `must_be_one`  |\n| 1             | `dont_forward` |\n\nThe `node_id` for the signature verification is taken from the corresponding\n`channel_announcement`: `node_id_1` if the least-significant bit of flags is 0\nor `node_id_2` otherwise.\n\n### Requirements\n\nThe origin node:\n  - MUST NOT send a created `channel_update` before `channel_ready` has been received.\n  - MAY create a `channel_update` to communicate the channel parameters to the\n  channel peer, even though the channel has not yet been announced (i.e.\n    the `announce_channel` bit was not set or the `channel_update` is sent before\n    the peers exchanged [announcement signatures](#the-announcement_signatures-message)).\n    - MUST set the `short_channel_id` to either an `alias` it has\n    received from the peer, or the real channel `short_channel_id`.\n    - MUST set `dont_forward` to 1 in `message_flags`\n    - MUST NOT forward such a `channel_update` to other peers, for privacy\n    reasons.\n    - Note: such a `channel_update`, one not preceded by a\n    `channel_announcement`, is invalid to any other peer and would be discarded.\n  - MUST set `signature` to the signature of the double-SHA256 of the entire\n  remaining packet after `signature`, using its own `node_id`.\n  - MUST set `chain_hash` AND `short_channel_id` to match the 32-byte hash AND\n  8-byte channel ID that uniquely identifies the channel specified in the\n  `channel_announcement` message.\n  - if the origin node is `node_id_1` in the message:\n    - MUST set the `direction` bit of `channel_flags` to 0.\n  - otherwise:\n    - MUST set the `direction` bit of `channel_flags` to 1.\n  - MUST set `htlc_maximum_msat` to the maximum value it will send through this channel for a single HTLC.\n    - MUST set this to less than or equal to the channel capacity.\n    - MUST set this to less than or equal to `max_htlc_value_in_flight_msat` it received from the peer.\n    - MUST set this to greater than or equal to `htlc_minimum_msat`.\n  - MUST set `must_be_one` in `message_flags` to 1.\n  - MUST set bits in `channel_flags` and `message_flags` that are not assigned a meaning to 0.\n  - MAY create and send a `channel_update` with the `disable` bit set to 1, to\n  signal a channel's temporary unavailability (e.g. due to a loss of\n  connectivity) OR permanent unavailability (e.g. prior to an on-chain\n  settlement).\n    - MAY sent a subsequent `channel_update` with the `disable` bit set to 0 to\n    re-enable the channel.\n  - MUST set `timestamp` to greater than 0, AND to greater than any\n  previously-sent `channel_update` for this `short_channel_id`.\n    - SHOULD base `timestamp` on a UNIX timestamp.\n  - MUST set `cltv_expiry_delta` to the number of blocks it will subtract from\n  an incoming HTLC's `cltv_expiry`.\n  - MUST set `htlc_minimum_msat` to the minimum HTLC value (in millisatoshi)\n  that the channel peer will accept.\n    - MUST set `htlc_minimum_msat` to less than or equal to `htlc_maximum_msat`.\n  - MUST set `fee_base_msat` to the base fee (in millisatoshi) it will charge\n  for any HTLC.\n  - MUST set `fee_proportional_millionths` to the amount (in millionths of a\n  satoshi) it will charge per transferred satoshi.\n  - SHOULD NOT create redundant `channel_update`s\n  - If it creates a new `channel_update` with updated channel parameters:\n    - SHOULD keep accepting the previous channel parameters for 10 minutes\n\nThe receiving node:\n  - if the `short_channel_id` does NOT match a previous `channel_announcement`,\n  OR if the channel has been closed in the meantime:\n    - MUST ignore `channel_update`s that do NOT correspond to one of its own\n    channels.\n  - SHOULD accept `channel_update`s for its own channels (even if non-public),\n  in order to learn the associated origin nodes' forwarding parameters.\n  - if `signature` is not a valid signature, using `node_id` of the\n  double-SHA256 of the entire message following the `signature` field (including\n  unknown fields following `fee_proportional_millionths`):\n    - SHOULD send a `warning` and close the connection.\n    - MUST NOT process the message further.\n  - if the specified `chain_hash` value is unknown (meaning it isn't active on\n  the specified chain):\n    - MUST ignore the channel update.\n  - if the `timestamp` is equal to the last-received `channel_update` for this\n    `short_channel_id` AND `node_id`:\n    - if the fields below `timestamp` differ:\n      - MAY blacklist this `node_id`.\n      - MAY forget all channels associated with it.\n    - if the fields below `timestamp` are equal:\n      - SHOULD ignore this message\n  - if `timestamp` is lower than that of the last-received\n  `channel_update` for this `short_channel_id` AND for `node_id`:\n    - SHOULD ignore the message.\n  - otherwise:\n    - if the `timestamp` is unreasonably far in the future:\n      - MAY discard the `channel_update`.\n    - otherwise:\n      - SHOULD queue the message for rebroadcasting.\n      - MAY choose NOT to for messages longer than the minimum expected length.\n  - if `htlc_maximum_msat` < `htlc_minimum_msat`:\n    - SHOULD ignore this channel during route considerations.\n  - if `htlc_maximum_msat` is greater than channel capacity:\n    - MAY blacklist this `node_id`\n    - SHOULD ignore this channel during route considerations.\n  - otherwise:\n    - SHOULD consider the `htlc_maximum_msat` when routing.\n\n### Rationale\n\nThe `timestamp` field is used by nodes for pruning `channel_update`s that are\neither too far in the future or have not been updated in two weeks; so it\nmakes sense to have it be a UNIX timestamp (i.e. seconds since UTC\n1970-01-01). This cannot be a hard requirement, however, given the possible case\nof two `channel_update`s within a single second.\n\nIt is assumed that more than one `channel_update` message changing the channel\nparameters in the same second may be a DoS attempt, and therefore, the node responsible\nfor signing such messages may be blacklisted. However, a node may send a same\n`channel_update` message with a different signature (changing the nonce in signature\nsigning), and hence fields apart from signature are checked to see if the channel\nparameters have changed for the same timestamp. It is also important to note that\nECDSA signatures are malleable. So, an intermediate node who received the `channel_update`\nmessage can rebroadcast it just by changing the `s` component of signature with `-s`.\nThis should however not result in the blacklist of the `node_id` from where\nthe message originated.\n\nThe recommendation against redundant `channel_update`s minimizes spamming the network,\nhowever it is sometimes inevitable.  For example, a channel with a\npeer which is unreachable will eventually cause a `channel_update` to\nindicate that the channel is disabled, with another update re-enabling\nthe channel when the peer reestablishes contact.  Because gossip\nmessages are batched and replace previous ones, the result may be a\nsingle seemingly-redundant update.\n\nWhen a node creates a new `channel_update` to change its channel parameters,\nit will take some time to propagate through the network and payers may use\nolder parameters. It is recommended to keep accepting older parameters for\nat least 10 minutes to improve payment latency and reliability.\n\nThe `must_be_one` field in `message_flags` was previously used to indicate\nthe presence of the `htlc_maximum_msat` field. This field must now always\nbe present, so `must_be_one` is a constant value, and ignored by receivers.\n\n## Query Messages\n\nUnderstanding of messages used to be indicated with the `gossip_queries`\nfeature bit; now these messages are universally supported, that feature has\nnow been slightly repurposed.  Not offering this feature means a node is not\nworth querying for gossip: either they do not store the entire gossip map, or\nthey are only connected to a single peer (this one).\n\nThere are several messages which contain a long array of\n`short_channel_id`s (called `encoded_short_ids`) so we include an encoding byte\nwhich allows for different encoding schemes to be defined in the future, if they\nprovide benefit.\n\nEncoding types:\n* `0`: uncompressed array of `short_channel_id` types, in ascending order.\n* `1`: Previously used for zlib compression, this encoding MUST NOT be used.\n\nThis encoding is also used for arrays of other types (timestamps, flags, ...),\nand specified with an `encoded_` prefix. For example, `encoded_timestamps` is\nan array of timestamps with a `0` prefix.\n\nQuery messages can be extended with optional fields that can help reduce the number of messages needed to synchronize routing tables by enabling:\n\n- timestamp-based filtering of `channel_update` messages: only ask for `channel_update` messages that are newer than the ones you already have.\n- checksum-based filtering of `channel_update` messages: only ask for `channel_update` messages that carry different information from the ones you already have.\n\nNodes can signal that they support extended gossip queries with the `gossip_queries_ex` feature bit.\n\n### The `query_short_channel_ids`/`reply_short_channel_ids_end` Messages\n\n1. type: 261 (`query_short_channel_ids`)\n2. data:\n    * [`chain_hash`:`chain_hash`]\n    * [`u16`:`len`]\n    * [`len*byte`:`encoded_short_ids`]\n    * [`query_short_channel_ids_tlvs`:`tlvs`]\n\n1. `tlv_stream`: `query_short_channel_ids_tlvs`\n2. types:\n    1. type: 1 (`query_flags`)\n    2. data:\n        * [`byte`:`encoding_type`]\n        * [`...*byte`:`encoded_query_flags`]\n\n`encoded_query_flags` is an array of bitfields, one bigsize per bitfield, one bitfield for each `short_channel_id`. Bits have the following meaning:\n\n| Bit Position  | Meaning                                  |\n| ------------- | ---------------------------------------- |\n| 0             | Sender wants `channel_announcement`      |\n| 1             | Sender wants `channel_update` for node 1 |\n| 2             | Sender wants `channel_update` for node 2 |\n| 3             | Sender wants `node_announcement` for node 1 |\n| 4             | Sender wants `node_announcement` for node 2 |\n\nQuery flags must be minimally encoded, which means that one flag will be encoded with a single byte.\n\n1. type: 262 (`reply_short_channel_ids_end`)\n2. data:\n    * [`chain_hash`:`chain_hash`]\n    * [`byte`:`full_information`]\n\nThis is a general mechanism which lets a node query for the\n`channel_announcement` and `channel_update` messages for specific channels\n(identified via `short_channel_id`s). This is usually used either because\na node sees a `channel_update` for which it has no `channel_announcement` or\nbecause it has obtained previously unknown `short_channel_id`s\nfrom `reply_channel_range`.\n\n#### Requirements\n\nThe sender:\n  - SHOULD NOT send this to a peer which does not offer `gossip_queries`.\n  - MUST NOT send `query_short_channel_ids` if it has sent a previous `query_short_channel_ids` to this peer and not received `reply_short_channel_ids_end`.\n  - MUST set `chain_hash` to the 32-byte hash that uniquely identifies the chain\n  that the `short_channel_id`s refer to.\n  - MUST set the first byte of `encoded_short_ids` to the encoding type.\n  - MUST encode a whole number of `short_channel_id`s to `encoded_short_ids`\n  - MAY send this if it receives a `channel_update` for a\n   `short_channel_id` for which it has no `channel_announcement`.\n  - SHOULD NOT send this if the channel referred to is not an unspent output.\n  - MAY include an optional `query_flags`. If so:\n    - MUST set `encoding_type`, as for `encoded_short_ids`.\n    - Each query flag is a minimally-encoded bigsize.\n    - MUST encode one query flag per `short_channel_id`.\n\nThe receiver:\n  - if the first byte of `encoded_short_ids` is not a known encoding type:\n    - MAY send a `warning`.\n    - MAY close the connection.\n  - if `encoded_short_ids` does not decode into a whole number of `short_channel_id`:\n    - MAY send a `warning`.\n    - MAY close the connection.\n  - if it has not sent `reply_short_channel_ids_end` to a previously received `query_short_channel_ids` from this sender:\n    - MAY send a `warning`.\n    - MAY close the connection.\n  - if the incoming message includes `query_short_channel_ids_tlvs`:\n    - if `encoding_type` is not a known encoding type:\n      - MAY send a `warning`.\n      - MAY close the connection.\n    - if `encoded_query_flags` does not decode to exactly one flag per `short_channel_id`:\n      - MAY send a `warning`.\n      - MAY close the connection.\n  - MUST respond to each known `short_channel_id`:\n    - if the incoming message does not include `encoded_query_flags`:\n      - with a `channel_announcement` and the latest `channel_update` for each end\n      - MUST follow with any `node_announcement`s for each `channel_announcement`\n    - otherwise:\n      - We define `query_flag` for the Nth `short_channel_id` in\n        `encoded_short_ids` to be the Nth bigsize of the decoded\n        `encoded_query_flags`.\n      - if bit 0 of `query_flag` is set:\n        - MUST reply with a `channel_announcement`\n      - if bit 1 of `query_flag` is set and it has received a `channel_update` from `node_id_1`:\n        - MUST reply with the latest `channel_update` for `node_id_1`\n      - if bit 2 of `query_flag` is set and it has received a `channel_update` from `node_id_2`:\n        - MUST reply with the latest `channel_update` for `node_id_2`\n      - if bit 3 of `query_flag` is set and it has received a `node_announcement` from `node_id_1`:\n        - MUST reply with the latest `node_announcement` for `node_id_1`\n      - if bit 4 of `query_flag` is set and it has received a `node_announcement` from `node_id_2`:\n        - MUST reply with the latest `node_announcement` for `node_id_2`\n    - SHOULD NOT wait for the next outgoing gossip flush to send these.\n  - SHOULD avoid sending duplicate `node_announcements` in response to a single `query_short_channel_ids`.\n  - MUST follow these responses with `reply_short_channel_ids_end`.\n  - if does not maintain up-to-date channel information for `chain_hash`:\n    - MUST set `full_information` to 0.\n  - otherwise:\n    - SHOULD set `full_information` to 1.\n\n#### Rationale\n\nFuture nodes may not have complete information; they certainly won't have\ncomplete information on unknown `chain_hash` chains.  While this `full_information`\nfield (previously and confusingly called `complete`) cannot be trusted, a 0 does indicate that the sender should search\nelsewhere for additional data.\n\nThe explicit `reply_short_channel_ids_end` message means that the receiver can\nindicate it doesn't know anything, and the sender doesn't need to rely on\ntimeouts.  It also causes a natural ratelimiting of queries.\n\n### The `query_channel_range` and `reply_channel_range` Messages\n\n1. type: 263 (`query_channel_range`)\n2. data:\n    * [`chain_hash`:`chain_hash`]\n    * [`u32`:`first_blocknum`]\n    * [`u32`:`number_of_blocks`]\n    * [`query_channel_range_tlvs`:`tlvs`]\n\n1. `tlv_stream`: `query_channel_range_tlvs`\n2. types:\n    1. type: 1 (`query_option`)\n    2. data:\n        * [`bigsize`:`query_option_flags`]\n\n`query_option_flags` is a bitfield represented as a minimally-encoded bigsize. Bits have the following meaning:\n\n| Bit Position  | Meaning                 |\n| ------------- | ----------------------- |\n| 0             | Sender wants timestamps |\n| 1             | Sender wants checksums  |\n\nThough it is possible, it would not be very useful to ask for checksums without asking for timestamps too: the receiving node may have an older `channel_update` with a different checksum, asking for it would be useless. And if a `channel_update` checksum is actually 0 (which is quite unlikely) it will not be queried.\n\n1. type: 264 (`reply_channel_range`)\n2. data:\n    * [`chain_hash`:`chain_hash`]\n    * [`u32`:`first_blocknum`]\n    * [`u32`:`number_of_blocks`]\n    * [`byte`:`sync_complete`]\n    * [`u16`:`len`]\n    * [`len*byte`:`encoded_short_ids`]\n    * [`reply_channel_range_tlvs`:`tlvs`]\n\n1. `tlv_stream`: `reply_channel_range_tlvs`\n2. types:\n    1. type: 1 (`timestamps_tlv`)\n    2. data:\n        * [`byte`:`encoding_type`]\n        * [`...*byte`:`encoded_timestamps`]\n    1. type: 3 (`checksums_tlv`)\n    2. data:\n        * [`...*channel_update_checksums`:`checksums`]\n\nFor a single `channel_update`, timestamps are encoded as:\n\n1. subtype: `channel_update_timestamps`\n2. data:\n    * [`u32`:`timestamp_node_id_1`]\n    * [`u32`:`timestamp_node_id_2`]\n\nWhere:\n* `timestamp_node_id_1` is the timestamp of the `channel_update` for `node_id_1`, or 0 if there was no `channel_update` from that node.\n* `timestamp_node_id_2` is the timestamp of the `channel_update` for `node_id_2`, or 0 if there was no `channel_update` from that node.\n\nFor a single `channel_update`, checksums are encoded as:\n\n1. subtype: `channel_update_checksums`\n2. data:\n    * [`u32`:`checksum_node_id_1`]\n    * [`u32`:`checksum_node_id_2`]\n\nWhere:\n* `checksum_node_id_1` is the checksum of the `channel_update` for `node_id_1`, or 0 if there was no `channel_update` from that node.\n* `checksum_node_id_2` is the checksum of the `channel_update` for `node_id_2`, or 0 if there was no `channel_update` from that node.\n\nThe checksum of a `channel_update` is the CRC32C checksum as specified in [RFC3720](https://tools.ietf.org/html/rfc3720#appendix-B.4) of this `channel_update` without its `signature` and `timestamp` fields.\n\nThis allows querying for channels within specific blocks.\n\n#### Requirements\n\nThe sender of `query_channel_range`:\n  - SHOULD NOT send this to a peer which does not offer `gossip_queries`.\n  - MUST NOT send this if it has sent a previous `query_channel_range` to this peer and not received all `reply_channel_range` replies.\n  - MUST set `chain_hash` to the 32-byte hash that uniquely identifies the chain\n  that it wants the `reply_channel_range` to refer to\n  - MUST set `first_blocknum` to the first block it wants to know channels for\n  - MUST set `number_of_blocks` to 1 or greater.\n  - MAY append an additional `query_channel_range_tlv`, which specifies the type of extended information it would like to receive.  \n\nThe receiver of `query_channel_range`:\n  - if it has not sent all `reply_channel_range` to a previously received `query_channel_range` from this sender:\n    - MAY send a `warning`.\n    - MAY close the connection.\n  - MUST respond with one or more `reply_channel_range`:\n    - MUST set with `chain_hash` equal to that of `query_channel_range`,\n    - MUST limit `number_of_blocks` to the maximum number of blocks whose\n      results could fit in `encoded_short_ids`\n    - MAY split block contents across multiple `reply_channel_range`.\n    - the first `reply_channel_range` message:\n      - MUST set `first_blocknum` less than or equal to the `first_blocknum` in `query_channel_range`\n      - MUST set `first_blocknum` plus `number_of_blocks` greater than `first_blocknum` in `query_channel_range`.\n    - successive `reply_channel_range` message:\n      - MUST have `first_blocknum` equal or greater than the previous `first_blocknum`.\n    - MUST set `sync_complete` to `false` if this is not the final `reply_channel_range`.\n    - the final `reply_channel_range` message:\n      - MUST have `first_blocknum` plus `number_of_blocks` equal or greater than the `query_channel_range` `first_blocknum` plus `number_of_blocks`.\n    - MUST set `sync_complete` to `true`.\n\nIf the incoming message includes `query_option`, the receiver MAY append additional information to its reply:\n- if bit 0 in `query_option_flags` is set, the receiver MAY append a `timestamps_tlv` that contains `channel_update` timestamps for all `short_channel_id`s in `encoded_short_ids`\n- if bit 1 in `query_option_flags` is set, the receiver MAY append a `checksums_tlv` that contains `channel_update` checksums for all `short_channel_id`s in `encoded_short_ids`\n\n#### Rationale\n\nA single response might be too large for a single packet, so multiple replies\nmay be required.  We want to allow a peer to store canned results for (say)\n1000-block ranges, so replies can exceed the requested range.  However, we\nrequire that each reply be relevant (overlapping the requested range).\n\nBy insisting that replies be in increasing order, the receiver can easily\ndetermine if replies are done: simply check if `first_blocknum` plus\n`number_of_blocks` equals or exceeds the `first_blocknum` plus\n`number_of_blocks` it asked for.\n\nThe addition of timestamp and checksum fields allow a peer to omit querying for redundant updates.\n\n### The `gossip_timestamp_filter` Message\n\n1. type: 265 (`gossip_timestamp_filter`)\n2. data:\n    * [`chain_hash`:`chain_hash`]\n    * [`u32`:`first_timestamp`]\n    * [`u32`:`timestamp_range`]\n\nThis message allows a node to constrain future gossip messages to\na specific range.  A node which wants any gossip messages has\nto send this, otherwise no gossip messages would be received.\n\nNote that this filter replaces any previous one, so it can be used\nmultiple times to change the gossip from a peer.\n\n#### Requirements\n\nThe sender:\n  - MUST set `chain_hash` to the 32-byte hash that uniquely identifies the chain\n  that it wants the gossip to refer to.\n  - If the receiver does not offer `gossip_queries`:\n    - SHOULD set `first_timestamp` to 0xFFFFFFFF and `timestamp_range` to 0.\n\nThe receiver:\n  - SHOULD send all gossip messages whose `timestamp` is greater or\n    equal to `first_timestamp`, and less than `first_timestamp` plus\n    `timestamp_range`.\n    - MAY wait for the next outgoing gossip flush to send these.\n  - SHOULD send gossip messages as it generates them regardless of `timestamp`.\n  - Otherwise (relayed gossip):\n    - SHOULD restrict future gossip messages to those whose `timestamp`\n      is greater or equal to `first_timestamp`, and less than\n      `first_timestamp` plus `timestamp_range`.\n  - If a `channel_announcement` has no corresponding `channel_update`s:\n    - MUST NOT send the `channel_announcement`.\n  - Otherwise:\n    - MUST consider the `timestamp` of the `channel_announcement` to be the `timestamp` of a corresponding `channel_update`.\n    - MUST consider whether to send the `channel_announcement` after receiving the first corresponding `channel_update`.\n  - If a `channel_announcement` is sent:\n    - MUST send the `channel_announcement` prior to any corresponding `channel_update`s and `node_announcement`s.\n\n#### Rationale\n\nSince `channel_announcement` doesn't have a timestamp, we generate a likely\none.  If there's no `channel_update` then it is not sent at all, which is most\nlikely in the case of pruned channels.\n\nOtherwise the `channel_announcement` is usually followed immediately by a\n`channel_update`. Ideally we would specify that the first (oldest) `channel_update`'s\ntimestamp is to be used as the time of the `channel_announcement`, but new nodes on\nthe network will not have this, and further would require the first `channel_update`\ntimestamp to be stored. Instead, we allow any update to be used, which\nis simple to implement.\n\nIn the case where the `channel_announcement` is nonetheless missed,\n`query_short_channel_ids` can be used to retrieve it.\n\nNodes can use `timestamp_filter` to reduce their gossip load when they\nhave many peers (eg. setting `first_timestamp` to `0xFFFFFFFF` after the\nfirst few peers, in the assumption that propagation is adequate).\nThis assumption of adequate propagation does not apply for gossip messages\ngenerated directly by the node itself, so they should ignore filters.\n\n### Requirements\n\nA node:\n  - MUST NOT relay any gossip messages it did not generate itself, unless explicitly requested.\n\n## Rebroadcasting\n\n### Requirements\n\nA receiving node:\n  - upon receiving a new `channel_announcement` or a `channel_update` or\n  `node_announcement` with an updated `timestamp`:\n    - SHOULD update its local view of the network's topology accordingly.\n  - after applying the changes from the announcement:\n    - if there are no channels associated with the corresponding origin node:\n      - MAY purge the origin node from its set of known nodes.\n    - otherwise:\n      - SHOULD update the appropriate metadata AND store the signature\n      associated with the announcement.\n        - Note: this will later allow the node to rebuild the announcement\n        for its peers.\n\nA node:\n  - MUST not send gossip it did not generate itself, until it receives `gossip_timestamp_filter`.\n  - SHOULD flush outgoing gossip messages once every 60 seconds, independently of\n  the arrival times of the messages.\n    - Note: this results in staggered announcements that are unique (not\n    duplicated).\n    - SHOULD NOT forward gossip messages to peers who sent `networks` in `init`\n      and did not specify the `chain_hash` of this gossip message.\n  - MAY re-announce its channels regularly.\n    - Note: this is discouraged, in order to keep the resource requirements low.\n\n### Rationale\n\nOnce the gossip message has been processed, it's added to a list of outgoing\nmessages, destined for the processing node's peers, replacing any older\nupdates from the origin node. This list of gossip messages will be flushed at\nregular intervals; such a store-and-delayed-forward broadcast is called a\n_staggered broadcast_. Also, such batching forms a natural rate\nlimit with low overhead.\n\n## HTLC Fees\n\n### Requirements\n\nThe origin node:\n  - SHOULD accept HTLCs that pay a fee equal to or greater than:\n    - fee_base_msat + ( amount_to_forward * fee_proportional_millionths / 1000000 )\n  - SHOULD accept HTLCs that pay an older fee, for some reasonable time after\n  sending `channel_update`.\n    - Note: this allows for any propagation delay.\n\n## Pruning the Network View\n\n### Requirements\n\nA node:\n  - SHOULD monitor the funding transactions in the blockchain, to identify\n  channels that are being closed.\n  - if the funding output of a channel is spent and received 12 block confirmations:\n    - SHOULD be removed from the local network view AND be considered closed.\n  - if the announced node no longer has any associated open channels:\n    - MAY prune nodes added through `node_announcement` messages from their\n    local view.\n      - Note: this is a direct result of the dependency of a `node_announcement`\n      being preceded by a `channel_announcement`.\n\n### Recommendation on Pruning Stale Entries\n\n#### Requirements\n\nA node:\n  - if the `timestamp` of the latest `channel_update` in either direction is\n  older than two weeks (1209600 seconds):\n    - MAY prune the channel.\n    - MAY ignore the channel.\n    - Note: this is an individual node policy and MUST NOT be enforced by\n    forwarding peers, e.g. by closing channels when receiving outdated gossip\n    messages.\n\n#### Rationale\n\nSeveral scenarios may result in channels becoming unusable and its endpoints\nbecoming unable to send updates for these channels. For example, this occurs if\nboth endpoints lose access to their private keys and can neither sign\n`channel_update`s nor close the channel on-chain. In this case, the channels are\nunlikely to be part of a computed route, since they would be partitioned off\nfrom the rest of the network; however, they would remain in the local network\nview would be forwarded to other peers indefinitely.\n\nThe oldest `channel_update` is used to prune the channel since both sides need\nto be active in order for the channel to be usable. Doing so prunes channels\neven if one side continues to send fresh `channel_update`s but the other node\nhas disappeared.\n\n## Recommendations for Routing\n\nWhen calculating a route for an HTLC, both the `cltv_expiry_delta` and the fee\nneed to be considered: the `cltv_expiry_delta` contributes to the time that\nfunds will be unavailable in the event of a worst-case failure. The relationship\nbetween these two attributes is unclear, as it depends on the reliability of the\nnodes involved.\n\nIf a route is computed by simply routing to the intended recipient and summing\nthe `cltv_expiry_delta`s, then it's possible for intermediate nodes to guess\ntheir position in the route. Knowing the CLTV of the HTLC, the surrounding\nnetwork topology, and the `cltv_expiry_delta`s gives an attacker a way to guess\nthe intended recipient. Therefore, it's highly desirable to add a random offset\nto the CLTV that the intended recipient will receive, which bumps all CLTVs\nalong the route.\n\nIn order to create a plausible offset, the origin node MAY start a limited\nrandom walk on the graph, starting from the intended recipient and summing the\n`cltv_expiry_delta`s, and use the resulting sum as the offset.\nThis effectively creates a _shadow route extension_ to the actual route and\nprovides better protection against this attack vector than simply picking a\nrandom offset would.\n\nOther more advanced considerations involve diversification of route selection,\nto avoid single points of failure and detection, and balancing of local\nchannels.\n\n### Routing Example\n\nConsider four nodes:\n\n\n```\n   B\n  / \\\n /   \\\nA     C\n \\   /\n  \\ /\n   D\n```\n\nEach advertises the following `cltv_expiry_delta` on its end of every\nchannel:\n\n1. A: 10 blocks\n2. B: 20 blocks\n3. C: 30 blocks\n4. D: 40 blocks\n\nC also uses a `min_final_cltv_expiry_delta` of 18 (the default) when requesting\npayments.\n\nAlso, each node has a set fee scheme that it uses for each of its\nchannels:\n\n1. A: 100 base + 1000 millionths\n2. B: 200 base + 2000 millionths\n3. C: 300 base + 3000 millionths\n4. D: 400 base + 4000 millionths\n\nThe network will see eight `channel_update` messages:\n\n1. A->B: `cltv_expiry_delta` = 10, `fee_base_msat` = 100, `fee_proportional_millionths` = 1000\n1. A->D: `cltv_expiry_delta` = 10, `fee_base_msat` = 100, `fee_proportional_millionths` = 1000\n1. B->A: `cltv_expiry_delta` = 20, `fee_base_msat` = 200, `fee_proportional_millionths` = 2000\n1. D->A: `cltv_expiry_delta` = 40, `fee_base_msat` = 400, `fee_proportional_millionths` = 4000\n1. B->C: `cltv_expiry_delta` = 20, `fee_base_msat` = 200, `fee_proportional_millionths` = 2000\n1. D->C: `cltv_expiry_delta` = 40, `fee_base_msat` = 400, `fee_proportional_millionths` = 4000\n1. C->B: `cltv_expiry_delta` = 30, `fee_base_msat` = 300, `fee_proportional_millionths` = 3000\n1. C->D: `cltv_expiry_delta` = 30, `fee_base_msat` = 300, `fee_proportional_millionths` = 3000\n\n**B->C.** If B were to send 4,999,999 millisatoshi directly to C, it would\nneither charge itself a fee nor add its own `cltv_expiry_delta`, so it would\nuse C's requested `min_final_cltv_expiry_delta` of 18. Presumably it would also add a\n_shadow route_ to give an extra CLTV of 42. Additionally, it could add extra\nCLTV deltas at other hops, as these values represent a minimum, but chooses not\nto do so here, for the sake of simplicity:\n\n   * `amount_msat`: 4999999\n   * `cltv_expiry`: current-block-height + 18 + 42\n   * `onion_routing_packet`:\n     * `amt_to_forward` = 4999999\n     * `outgoing_cltv_value` = current-block-height + 18 + 42\n\n**A->B->C.** If A were to send 4,999,999 millisatoshi to C via B, it needs to\npay B the fee it specified in the B->C `channel_update`, calculated as\nper [HTLC Fees](#htlc-fees):\n\n        fee_base_msat + ( amount_to_forward * fee_proportional_millionths / 1000000 )\n\n        200 + ( 4999999 * 2000 / 1000000 ) = 10199\n\nSimilarly, it would need to add B->C's `channel_update` `cltv_expiry_delta` (20), C's\nrequested `min_final_cltv_expiry_delta` (18), and the cost for the _shadow route_ (42).\nThus, A->B's `update_add_htlc` message would be:\n\n   * `amount_msat`: 5010198\n   * `cltv_expiry`: current-block-height + 20 + 18 + 42\n   * `onion_routing_packet`:\n     * `amt_to_forward` = 4999999\n     * `outgoing_cltv_value` = current-block-height + 18 + 42\n\nB->C's `update_add_htlc` would be the same as B->C's direct payment above.\n\n**A->D->C.** Finally, if for some reason A chose the more expensive route via D,\nA->D's `update_add_htlc` message would be:\n\n   * `amount_msat`: 5020398\n   * `cltv_expiry`: current-block-height + 40 + 18 + 42\n   * `onion_routing_packet`:\n     * `amt_to_forward` = 4999999\n     * `outgoing_cltv_value` = current-block-height + 18 + 42\n\nAnd D->C's `update_add_htlc` would again be the same as B->C's direct payment\nabove.\n\n\n![Creative Commons License](https://i.creativecommons.org/l/by/4.0/88x31.png \"License CC-BY\")\n<br>\nThis work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).\n"
        },
        {
          "name": "08-transport.md",
          "type": "blob",
          "size": 42.658203125,
          "content": "# BOLT #8: Encrypted and Authenticated Transport\n\nAll communications between Lightning nodes is encrypted in order to\nprovide confidentiality for all transcripts between nodes and is authenticated in order to\navoid malicious interference. Each node has a known long-term identifier that\nis a public key on Bitcoin's `secp256k1` curve. This long-term public key is\nused within the protocol to establish an encrypted and authenticated connection\nwith peers, and also to authenticate any information advertised on behalf\nof a node.\n\n# Table of Contents\n\n  * [Cryptographic Messaging Overview](#cryptographic-messaging-overview)\n    * [Authenticated Key Agreement Handshake](#authenticated-key-agreement-handshake)\n    * [Handshake Versioning](#handshake-versioning)\n    * [Noise Protocol Instantiation](#noise-protocol-instantiation)\n  * [Authenticated Key Exchange Handshake Specification](#authenticated-key-exchange-handshake-specification)\n    * [Handshake State](#handshake-state)\n    * [Handshake State Initialization](#handshake-state-initialization)\n    * [Handshake Exchange](#handshake-exchange)\n  * [Lightning Message Specification](#lightning-message-specification)\n    * [Encrypting and Sending Messages](#encrypting-and-sending-messages)\n    * [Receiving and Decrypting Messages](#receiving-and-decrypting-messages)\n  * [Lightning Message Key Rotation](#lightning-message-key-rotation)\n  * [Security Considerations](#security-considerations)\n  * [Appendix A: Transport Test Vectors](#appendix-a-transport-test-vectors)\n    * [Initiator Tests](#initiator-tests)\n    * [Responder Tests](#responder-tests)\n    * [Message Encryption Tests](#message-encryption-tests)\n  * [Acknowledgments](#acknowledgments)\n  * [References](#references)\n  * [Authors](#authors)\n\n## Cryptographic Messaging Overview\n\nPrior to sending any Lightning messages, nodes MUST first initiate the\ncryptographic session state that is used to encrypt and authenticate all\nmessages sent between nodes. The initialization of this cryptographic session\nstate is completely distinct from any inner protocol message header or\nconventions.\n\nThe transcript between two nodes is separated into two distinct segments:\n\n1. Before any actual data transfer, both nodes participate in an\n   authenticated key agreement handshake, which is based on the Noise\n   Protocol Framework<sup>[2](#reference-2)</sup>.\n2. If the initial handshake is successful, then nodes enter the Lightning\n   message exchange phase. In the Lightning message exchange phase, all\n   messages are Authenticated Encryption with Associated Data (AEAD) ciphertexts.\n\n### Authenticated Key Agreement Handshake\n\nThe handshake chosen for the authenticated key exchange is `Noise_XK`. As a\npre-message, the initiator must know the identity public key of\nthe responder. This provides a degree of identity hiding for the\nresponder, as its static public key is _never_ transmitted during the handshake. Instead,\nauthentication is achieved implicitly via a series of Elliptic-Curve\nDiffie-Hellman (ECDH) operations followed by a MAC check.\n\nThe authenticated key agreement (`Noise_XK`) is performed in three distinct\nsteps (acts). During each act of the handshake the following occurs: some (possibly encrypted) keying\nmaterial is sent to the other party; an ECDH is performed, based on exactly\nwhich act is being executed, with the result mixed into the current set of\nencryption keys (`ck` the chaining key and `k` the encryption key); and\nan AEAD payload with a zero-length cipher text is sent. As this payload has no\nlength, only a MAC is sent across. The mixing of ECDH outputs into\na hash digest forms an incremental TripleDH handshake.\n\nUsing the language of the Noise Protocol, `e` and `s` (both public keys with `e` being \nthe ephemeral key and `s` being the static key which in our case is usually the `nodeid`)\nindicate possibly encrypted keying material, and `es`, `ee`, and `se` each indicate an\nECDH operation between two keys. The handshake is laid out as follows:\n```\n    Noise_XK(s, rs):\n       <- s\n       ...\n       -> e, es\n       <- e, ee\n       -> s, se\n```\nAll of the handshake data sent across the wire, including the keying material, is\nincrementally hashed into a session-wide \"handshake digest\", `h`. Note that the\nhandshake state `h` is never transmitted during the handshake; instead, digest\nis used as the Associated Data within the zero-length AEAD messages.\n\nAuthenticating each message sent ensures that a man-in-the-middle (MITM) hasn't modified\nor replaced any of the data sent as part of a handshake, as the MAC\ncheck would fail on the other side if so.\n\nA successful check of the MAC by the receiver indicates implicitly that all\nauthentication has been successful up to that point. If a MAC check ever fails\nduring the handshake process, then the connection is to be immediately\nterminated.\n\n### Handshake Versioning\n\nEach message sent during the initial handshake starts with a single leading\nbyte, which indicates the version used for the current handshake. A version of 0\nindicates that no change is necessary, while a non-zero version indicate that the\nclient has deviated from the protocol originally specified within this\ndocument.\n\nClients MUST reject handshake attempts initiated with an unknown version.\n\n### Noise Protocol Instantiation\n\nConcrete instantiations of the Noise Protocol require the definition of\nthree abstract cryptographic objects: the hash function, the elliptic curve,\nand the AEAD cipher scheme. For Lightning, `SHA-256` is\nchosen as the hash function, `secp256k1` as the elliptic curve, and\n`ChaChaPoly-1305` as the AEAD construction.\n\nThe composition of `ChaCha20` and `Poly1305` that are used MUST conform to\n`RFC 8439`<sup>[1](#reference-1)</sup>.\n\nThe official protocol name for the Lightning variant of Noise is\n`Noise_XK_secp256k1_ChaChaPoly_SHA256`. The ASCII string representation of\nthis value is hashed into a digest used to initialize the starting handshake\nstate. If the protocol names of two endpoints differ, then the handshake\nprocess fails immediately.\n\n## Authenticated Key Exchange Handshake Specification\n\nThe handshake proceeds in three acts, taking 1.5 round trips. Each handshake is\na _fixed_ sized payload without any header or additional meta-data attached.\nThe exact size of each act is as follows:\n\n   * **Act One**: 50 bytes\n   * **Act Two**: 50 bytes\n   * **Act Three**: 66 bytes\n\n### Handshake State\n\nThroughout the handshake process, each side maintains these variables:\n\n * `ck`: the **chaining key**. This value is the accumulated hash of all\n   previous ECDH outputs. At the end of the handshake, `ck` is used to derive\n   the encryption keys for Lightning messages.\n\n * `h`: the **handshake hash**. This value is the accumulated hash of _all_\n   handshake data that has been sent and received so far during the handshake\n   process.\n\n * `temp_k1`, `temp_k2`, `temp_k3`: the **intermediate keys**. These are used to\n   encrypt and decrypt the zero-length AEAD payloads at the end of each handshake\n   message.\n\n * `e`: a party's **ephemeral keypair**. For each session, a node MUST generate a\n   new ephemeral key with strong cryptographic randomness.\n\n * `s`: a party's **static keypair** (`ls` for local, `rs` for remote)\n\nThe following functions will also be referenced:\n\n  * `ECDH(k, rk)`: performs an Elliptic-Curve Diffie-Hellman operation using\n    `k`, which is a valid `secp256k1` private key, and `rk`, which is a valid public key\n      * The returned value is the SHA256 of the compressed format of the\n\t    generated point.\n\n  * `HKDF(salt,ikm)`: a function defined in `RFC 5869`<sup>[3](#reference-3)</sup>,\n    evaluated with a zero-length `info` field\n     * All invocations of `HKDF` implicitly return 64 bytes of\n       cryptographic randomness using the extract-and-expand component of the\n       `HKDF`.\n\n  * `encryptWithAD(k, n, ad, plaintext)`: outputs `encrypt(k, n, ad, plaintext)`\n     * Where `encrypt` is an evaluation of `ChaCha20-Poly1305` (IETF variant)\n       with the passed arguments, with nonce `n` encoded as 32 zero bits,\n       followed by a *little-endian* 64-bit value. Note: this follows the Noise\n       Protocol convention, rather than our normal endian.\n\n  * `decryptWithAD(k, n, ad, ciphertext)`: outputs `decrypt(k, n, ad, ciphertext)`\n     * Where `decrypt` is an evaluation of `ChaCha20-Poly1305` (IETF variant)\n       with the passed arguments, with nonce `n` encoded as 32 zero bits,\n       followed by a *little-endian* 64-bit value.\n\n  * `generateKey()`: generates and returns a fresh `secp256k1` keypair\n     * Where the object returned by `generateKey` has two attributes:\n         * `.pub`, which returns an abstract object representing the public key\n         * `.priv`, which represents the private key used to generate the\n           public key\n     * Where the object also has a single method:\n         * `.serializeCompressed()`\n\n  * `a || b` denotes the concatenation of two byte strings `a` and `b`\n\n### Handshake State Initialization\n\nBefore the start of Act One, both sides initialize their per-sessions\nstate as follows:\n\n 1. `h = SHA-256(protocolName)`\n    * where `protocolName = \"Noise_XK_secp256k1_ChaChaPoly_SHA256\"` encoded as\n      an ASCII string\n\n 2. `ck = h`\n\n 3. `h = SHA-256(h || prologue)`\n    * where `prologue` is the ASCII string: `lightning`\n\nAs a concluding step, both sides mix the responder's public key into the\nhandshake digest:\n\n * The initiating node mixes in the responding node's static public key\n   serialized in Bitcoin's compressed format:\n   * `h = SHA-256(h || rs.pub.serializeCompressed())`\n\n * The responding node mixes in their local static public key serialized in\n   Bitcoin's compressed format:\n   * `h = SHA-256(h || ls.pub.serializeCompressed())`\n\n### Handshake Exchange\n\n#### Act One\n\n```\n    -> e, es\n```\n\nAct One is sent from initiator to responder. During Act One, the initiator\nattempts to satisfy an implicit challenge by the responder. To complete this\nchallenge, the initiator must know the static public key of the responder.\n\nThe handshake message is _exactly_ 50 bytes: 1 byte for the handshake\nversion, 33 bytes for the compressed ephemeral public key of the initiator,\nand 16 bytes for the `poly1305` tag.\n\n**Sender Actions:**\n\n1. `e = generateKey()`\n2. `h = SHA-256(h || e.pub.serializeCompressed())`\n     * The newly generated ephemeral key is accumulated into the running\n       handshake digest.\n3. `es = ECDH(e.priv, rs)`\n     * The initiator performs an ECDH between its newly generated ephemeral\n       key and the remote node's static public key.\n4. `ck, temp_k1 = HKDF(ck, es)`\n     * A new temporary encryption key is generated, which is\n       used to generate the authenticating MAC.\n5. `c = encryptWithAD(temp_k1, 0, h, zero)`\n     * where `zero` is a zero-length plaintext\n6. `h = SHA-256(h || c)`\n     * Finally, the generated ciphertext is accumulated into the authenticating\n       handshake digest.\n7. Send `m = 0 || e.pub.serializeCompressed() || c` to the responder over the network buffer.\n\n**Receiver Actions:**\n\n1. Read _exactly_ 50 bytes from the network buffer.\n2. Parse the read message (`m`) into `v`, `re`, and `c`:\n    * where `v` is the _first_ byte of `m`, `re` is the next 33\n      bytes of `m`, and `c` is the last 16 bytes of `m`\n    * The raw bytes of the remote party's ephemeral public key (`re`) are to be\n      deserialized into a point on the curve using affine coordinates as encoded\n      by the key's serialized composed format.\n3. If `v` is an unrecognized handshake version, then the responder MUST\n    abort the connection attempt.\n4. `h = SHA-256(h || re.serializeCompressed())`\n    * The responder accumulates the initiator's ephemeral key into the authenticating\n      handshake digest.\n5. `es = ECDH(s.priv, re)`\n    * The responder performs an ECDH between its static private key and the\n      initiator's ephemeral public key.\n6. `ck, temp_k1 = HKDF(ck, es)`\n    * A new temporary encryption key is generated, which will\n      shortly be used to check the authenticating MAC.\n7. `p = decryptWithAD(temp_k1, 0, h, c)`\n    * If the MAC check in this operation fails, then the initiator does _not_\n      know the responder's static public key. If this is the case, then the\n      responder MUST terminate the connection without any further messages.\n8. `h = SHA-256(h || c)`\n     * The received ciphertext is mixed into the handshake digest. This step serves\n       to ensure the payload wasn't modified by a MITM.\n\n#### Act Two\n\n```\n   <- e, ee\n```\n\nAct Two is sent from the responder to the initiator. Act Two will _only_\ntake place if Act One was successful. Act One was successful if the\nresponder was able to properly decrypt and check the MAC of the tag sent at\nthe end of Act One.\n\nThe handshake is _exactly_ 50 bytes: 1 byte for the handshake version, 33\nbytes for the compressed ephemeral public key of the responder, and 16 bytes\nfor the `poly1305` tag.\n\n**Sender Actions:**\n\n1. `e = generateKey()`\n2. `h = SHA-256(h || e.pub.serializeCompressed())`\n     * The newly generated ephemeral key is accumulated into the running\n       handshake digest.\n3. `ee = ECDH(e.priv, re)`\n     * where `re` is the ephemeral key of the initiator, which was received\n       during Act One\n4. `ck, temp_k2 = HKDF(ck, ee)`\n     * A new temporary encryption key is generated, which is\n       used to generate the authenticating MAC.\n5. `c = encryptWithAD(temp_k2, 0, h, zero)`\n     * where `zero` is a zero-length plaintext\n6. `h = SHA-256(h || c)`\n     * Finally, the generated ciphertext is accumulated into the authenticating\n       handshake digest.\n7. Send `m = 0 || e.pub.serializeCompressed() || c` to the initiator over the network buffer.\n\n**Receiver Actions:**\n\n1. Read _exactly_ 50 bytes from the network buffer.\n2. Parse the read message (`m`) into `v`, `re`, and `c`:\n    * where `v` is the _first_ byte of `m`, `re` is the next 33\n      bytes of `m`, and `c` is the last 16 bytes of `m`.\n3. If `v` is an unrecognized handshake version, then the responder MUST\n    abort the connection attempt.\n4. `h = SHA-256(h || re.serializeCompressed())`\n5. `ee = ECDH(e.priv, re)`\n    * where `re` is the responder's ephemeral public key\n    * The raw bytes of the remote party's ephemeral public key (`re`) are to be\n      deserialized into a point on the curve using affine coordinates as encoded\n      by the key's serialized composed format.\n6. `ck, temp_k2 = HKDF(ck, ee)`\n     * A new temporary encryption key is generated, which is\n       used to generate the authenticating MAC.\n7. `p = decryptWithAD(temp_k2, 0, h, c)`\n    * If the MAC check in this operation fails, then the initiator MUST\n      terminate the connection without any further messages.\n8. `h = SHA-256(h || c)`\n     * The received ciphertext is mixed into the handshake digest. This step serves\n       to ensure the payload wasn't modified by a MITM.\n\n#### Act Three\n\n```\n   -> s, se\n```\n\nAct Three is the final phase in the authenticated key agreement described in\nthis section. This act is sent from the initiator to the responder as a\nconcluding step. Act Three is executed _if and only if_ Act Two was successful.\nDuring Act Three, the initiator transports its static public key to the\nresponder encrypted with _strong_ forward secrecy, using the accumulated `HKDF`\nderived secret key at this point of the handshake.\n\nThe handshake is _exactly_ 66 bytes: 1 byte for the handshake version, 33\nbytes for the static public key encrypted with the `ChaCha20` stream\ncipher, 16 bytes for the encrypted public key's tag generated via the AEAD\nconstruction, and 16 bytes for a final authenticating tag.\n\n**Sender Actions:**\n\n1. `c = encryptWithAD(temp_k2, 1, h, s.pub.serializeCompressed())`\n    * where `s` is the static public key of the initiator\n2. `h = SHA-256(h || c)`\n3. `se = ECDH(s.priv, re)`\n    * where `re` is the ephemeral public key of the responder\n4. `ck, temp_k3 = HKDF(ck, se)`\n    * The final intermediate shared secret is mixed into the running chaining key.\n5. `t = encryptWithAD(temp_k3, 0, h, zero)`\n     * where `zero` is a zero-length plaintext\n6. `sk, rk = HKDF(ck, zero)`\n     * where `zero` is a zero-length plaintext,\n       `sk` is the key to be used by the initiator to encrypt messages to the\n       responder,\n       and `rk` is the key to be used by the initiator to decrypt messages sent by\n       the responder\n     * The final encryption keys, to be used for sending and\n       receiving messages for the duration of the session, are generated.\n7. `rn = 0, sn = 0`\n     * The sending and receiving nonces are initialized to 0.\n8. `rck = sck = ck`\n     * The sending and receiving chaining keys are initialized the same.\n9. Send `m = 0 || c || t` over the network buffer.\n\n**Receiver Actions:**\n\n1. Read _exactly_ 66 bytes from the network buffer.\n2. Parse the read message (`m`) into `v`, `c`, and `t`:\n    * where `v` is the _first_ byte of `m`, `c` is the next 49\n      bytes of `m`, and `t` is the last 16 bytes of `m`\n3. If `v` is an unrecognized handshake version, then the responder MUST\n    abort the connection attempt.\n4. `rs = decryptWithAD(temp_k2, 1, h, c)`\n     * At this point, the responder has recovered the static public key of the\n       initiator.\n     * If the MAC check in this operation fails, then the responder MUST\n       terminate the connection without any further messages.\n5. `h = SHA-256(h || c)`\n6. `se = ECDH(e.priv, rs)`\n     * where `e` is the responder's original ephemeral key\n7. `ck, temp_k3 = HKDF(ck, se)`\n8. `p = decryptWithAD(temp_k3, 0, h, t)`\n     * If the MAC check in this operation fails, then the responder MUST\n       terminate the connection without any further messages.\n9. `rk, sk = HKDF(ck, zero)`\n     * where `zero` is a zero-length plaintext,\n       `rk` is the key to be used by the responder to decrypt the messages sent\n       by the initiator,\n       and `sk` is the key to be used by the responder to encrypt messages to\n       the initiator\n     * The final encryption keys, to be used for sending and\n       receiving messages for the duration of the session, are generated.\n10. `rn = 0, sn = 0`\n     * The sending and receiving nonces are initialized to 0.\n11. `rck = sck = ck`\n     * The sending and receiving chaining keys are initialized the same.\n\n## Lightning Message Specification\n\nAt the conclusion of Act Three, both sides have derived the encryption keys, which\nwill be used to encrypt and decrypt messages for the remainder of the\nsession.\n\nThe actual Lightning protocol messages are encapsulated within AEAD ciphertexts.\nEach message is prefixed with another AEAD ciphertext, which encodes the total\nlength of the following Lightning message (not including its MAC).\n\nThe *maximum* size of _any_ Lightning message MUST NOT exceed `65535` bytes. A\nmaximum size of `65535` simplifies testing, makes memory management\neasier, and helps mitigate memory-exhaustion attacks.\n\nIn order to make traffic analysis more difficult, the length prefix for\nall encrypted Lightning messages is also encrypted. Additionally a\n16-byte `Poly-1305` tag is added to the encrypted length prefix in order to ensure\nthat the packet length hasn't been modified when in-flight and also to avoid\ncreating a decryption oracle.\n\nThe structure of packets on the wire resembles the following:\n\n```\n+-------------------------------\n|2-byte encrypted message length|\n+-------------------------------\n|  16-byte MAC of the encrypted |\n|        message length         |\n+-------------------------------\n|                               |\n|                               |\n|     encrypted Lightning       |\n|            message            |\n|                               |\n+-------------------------------\n|     16-byte MAC of the        |\n|      Lightning message        |\n+-------------------------------\n```\n\nThe prefixed message length is encoded as a 2-byte big-endian integer,\nfor a total maximum packet length of `2 + 16 + 65535 + 16` = `65569` bytes.\n\n### Encrypting and Sending Messages\n\nIn order to encrypt and send a Lightning message (`m`) to the network stream,\ngiven a sending key (`sk`) and a nonce (`sn`), the following steps are completed:\n\n1. Let `l = len(m)`.\n    * where `len` obtains the length in bytes of the Lightning message\n2. Serialize `l` into 2 bytes encoded as a big-endian integer.\n3. Encrypt `l` (using `ChaChaPoly-1305`, `sn`, and `sk`), to obtain `lc`\n    (18 bytes)\n    * The nonce `sn` is encoded as a 96-bit little-endian number. As the\n      decoded nonce is 64 bits, the 96-bit nonce is encoded as: 32 bits\n      of leading 0s followed by a 64-bit value.\n        * The nonce `sn` MUST be incremented after this step.\n    * A zero-length byte slice is to be passed as the AD (associated data).\n4. Finally, encrypt the message itself (`m`) using the same procedure used to\n    encrypt the length prefix. Let encrypted ciphertext be known as `c`.\n    * The nonce `sn` MUST be incremented after this step.\n5. Send `lc || c` over the network buffer.\n\n### Receiving and Decrypting Messages\n\nIn order to decrypt the _next_ message in the network stream, the following\nsteps are completed:\n\n1. Read _exactly_ 18 bytes from the network buffer.\n2. Let the encrypted length prefix be known as `lc`.\n3. Decrypt `lc` (using `ChaCha20-Poly1305`, `rn`, and `rk`), to obtain the size of\n    the encrypted packet `l`.\n    * A zero-length byte slice is to be passed as the AD (associated data).\n    * The nonce `rn` MUST be incremented after this step.\n4. Read _exactly_ `l+16` bytes from the network buffer, and let the bytes be\n    known as `c`.\n5. Decrypt `c` (using `ChaCha20-Poly1305`, `rn`, and `rk`), to obtain decrypted\n    plaintext packet `p`.\n    * The nonce `rn` MUST be incremented after this step.\n\n## Lightning Message Key Rotation\n\nChanging keys regularly and forgetting previous keys is useful to\nprevent the decryption of old messages, in the case of later key leakage (i.e.\nbackwards secrecy).\n\nKey rotation is performed for _each_ key (`sk` and `rk`) _individually_,\nusing `sck` and `rck` respectively.  A key\nis to be rotated after a party encrypts or decrypts 1000 times with it (i.e. every 500 messages).\nThis can be properly accounted for by rotating the key once the nonce dedicated\nto it reaches 1000.\n\nKey rotation for a key `k` is performed according to the following steps:\n\n1. Let `ck` be the chaining key (i.e. `rck` for `rk` or `sck` for `sk`)\n2. `ck', k' = HKDF(ck, k)`\n3. Reset the nonce for the key to `n = 0`.\n4. `k = k'`\n5. `ck = ck'`\n\n# Security Considerations\n\nIt is strongly recommended that existing, commonly-used, validated\nlibraries be used for encryption and decryption, to avoid the many possible\nimplementation pitfalls.\n\n# Appendix A: Transport Test Vectors\n\nTo make a repeatable test handshake, the following specifies what `generateKey()` will\nreturn (i.e. the value for `e.priv`) for each side. Note that this\nis a violation of the spec, which requires randomness.\n\n## Initiator Tests\n\nThe initiator SHOULD produce the given output when fed this input.\nThe comments reflect internal states, for debugging purposes.\n\n```\n    name: transport-initiator successful handshake\n    rs.pub: 0x028d7500dd4c12685d1f568b4c2b5048e8534b873319f3a8daa612b469132ec7f7\n    ls.priv: 0x1111111111111111111111111111111111111111111111111111111111111111\n    ls.pub: 0x034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa\n    e.priv: 0x1212121212121212121212121212121212121212121212121212121212121212\n    e.pub: 0x036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f7\n    # Act One\n    # h=0x9e0e7de8bb75554f21db034633de04be41a2b8a18da7a319a03c803bf02b396c\n    # ss=0x1e2fb3c8fe8fb9f262f649f64d26ecf0f2c0a805a767cf02dc2d77a6ef1fdcc3\n    # HKDF(0x2640f52eebcd9e882958951c794250eedb28002c05d7dc2ea0f195406042caf1,0x1e2fb3c8fe8fb9f262f649f64d26ecf0f2c0a805a767cf02dc2d77a6ef1fdcc3)\n    # ck,temp_k1=0xb61ec1191326fa240decc9564369dbb3ae2b34341d1e11ad64ed89f89180582f,0xe68f69b7f096d7917245f5e5cf8ae1595febe4d4644333c99f9c4a1282031c9f\n    # encryptWithAD(0xe68f69b7f096d7917245f5e5cf8ae1595febe4d4644333c99f9c4a1282031c9f, 0x000000000000000000000000, 0x9e0e7de8bb75554f21db034633de04be41a2b8a18da7a319a03c803bf02b396c, <empty>)\n    # c=0df6086551151f58b8afe6c195782c6a\n    # h=0x9d1ffbb639e7e20021d9259491dc7b160aab270fb1339ef135053f6f2cebe9ce\n    output: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a\n    # Act Two\n    input: 0x0002466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730ae\n    # re=0x02466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f27\n    # h=0x38122f669819f906000621a14071802f93f2ef97df100097bcac3ae76c6dc0bf\n    # ss=0xc06363d6cc549bcb7913dbb9ac1c33fc1158680c89e972000ecd06b36c472e47\n    # HKDF(0xb61ec1191326fa240decc9564369dbb3ae2b34341d1e11ad64ed89f89180582f,0xc06363d6cc549bcb7913dbb9ac1c33fc1158680c89e972000ecd06b36c472e47)\n    # ck,temp_k2=0xe89d31033a1b6bf68c07d22e08ea4d7884646c4b60a9528598ccb4ee2c8f56ba,0x908b166535c01a935cf1e130a5fe895ab4e6f3ef8855d87e9b7581c4ab663ddc\n    # decryptWithAD(0x908b166535c01a935cf1e130a5fe895ab4e6f3ef8855d87e9b7581c4ab663ddc, 0x000000000000000000000000, 0x38122f669819f906000621a14071802f93f2ef97df100097bcac3ae76c6dc0bf, 0x6e2470b93aac583c9ef6eafca3f730ae)\n    # h=0x90578e247e98674e661013da3c5c1ca6a8c8f48c90b485c0dfa1494e23d56d72\n    # Act Three\n    # encryptWithAD(0x908b166535c01a935cf1e130a5fe895ab4e6f3ef8855d87e9b7581c4ab663ddc, 0x000000000100000000000000, 0x90578e247e98674e661013da3c5c1ca6a8c8f48c90b485c0dfa1494e23d56d72, 0x034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa)\n    # c=0xb9e3a702e93e3a9948c2ed6e5fd7590a6e1c3a0344cfc9d5b57357049aa22355361aa02e55a8fc28fef5bd6d71ad0c3822\n    # h=0x5dcb5ea9b4ccc755e0e3456af3990641276e1d5dc9afd82f974d90a47c918660\n    # ss=0xb36b6d195982c5be874d6d542dc268234379e1ae4ff1709402135b7de5cf0766\n    # HKDF(0xe89d31033a1b6bf68c07d22e08ea4d7884646c4b60a9528598ccb4ee2c8f56ba,0xb36b6d195982c5be874d6d542dc268234379e1ae4ff1709402135b7de5cf0766)\n    # ck,temp_k3=0x919219dbb2920afa8db80f9a51787a840bcf111ed8d588caf9ab4be716e42b01,0x981a46c820fb7a241bc8184ba4bb1f01bcdfafb00dde80098cb8c38db9141520\n    # encryptWithAD(0x981a46c820fb7a241bc8184ba4bb1f01bcdfafb00dde80098cb8c38db9141520, 0x000000000000000000000000, 0x5dcb5ea9b4ccc755e0e3456af3990641276e1d5dc9afd82f974d90a47c918660, <empty>)\n    # t=0x8dc68b1c466263b47fdf31e560e139ba\n    output: 0x00b9e3a702e93e3a9948c2ed6e5fd7590a6e1c3a0344cfc9d5b57357049aa22355361aa02e55a8fc28fef5bd6d71ad0c38228dc68b1c466263b47fdf31e560e139ba\n    # HKDF(0x919219dbb2920afa8db80f9a51787a840bcf111ed8d588caf9ab4be716e42b01,zero)\n    output: sk,rk=0x969ab31b4d288cedf6218839b27a3e2140827047f2c0f01bf5c04435d43511a9,0xbb9020b8965f4df047e07f955f3c4b88418984aadc5cdb35096b9ea8fa5c3442\n\n    name: transport-initiator act2 short read test\n    rs.pub: 0x028d7500dd4c12685d1f568b4c2b5048e8534b873319f3a8daa612b469132ec7f7\n    ls.priv: 0x1111111111111111111111111111111111111111111111111111111111111111\n    ls.pub: 0x034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa\n    e.priv: 0x1212121212121212121212121212121212121212121212121212121212121212\n    e.pub: 0x036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f7\n    output: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a\n    # Act Two\n    input: 0x0002466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730\n    output: ERROR (ACT2_READ_FAILED)\n\n    name: transport-initiator act2 bad version test\n    rs.pub: 0x028d7500dd4c12685d1f568b4c2b5048e8534b873319f3a8daa612b469132ec7f7\n    ls.priv: 0x1111111111111111111111111111111111111111111111111111111111111111\n    ls.pub: 0x034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa\n    e.priv: 0x1212121212121212121212121212121212121212121212121212121212121212\n    e.pub: 0x036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f7\n    output: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a\n    # Act Two\n    input: 0x0102466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730ae\n    output: ERROR (ACT2_BAD_VERSION 1)\n\n    name: transport-initiator act2 bad key serialization test\n    rs.pub: 0x028d7500dd4c12685d1f568b4c2b5048e8534b873319f3a8daa612b469132ec7f7\n    ls.priv: 0x1111111111111111111111111111111111111111111111111111111111111111\n    ls.pub: 0x034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa\n    e.priv: 0x1212121212121212121212121212121212121212121212121212121212121212\n    e.pub: 0x036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f7\n    output: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a\n    # Act Two\n    input: 0x0004466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730ae\n    output: ERROR (ACT2_BAD_PUBKEY)\n\n    name: transport-initiator act2 bad MAC test\n    rs.pub: 0x028d7500dd4c12685d1f568b4c2b5048e8534b873319f3a8daa612b469132ec7f7\n    ls.priv: 0x1111111111111111111111111111111111111111111111111111111111111111\n    ls.pub: 0x034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa\n    e.priv: 0x1212121212121212121212121212121212121212121212121212121212121212\n    e.pub: 0x036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f7\n    output: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a\n    # Act Two\n    input: 0x0002466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730af\n    output: ERROR (ACT2_BAD_TAG)\n```\n\n## Responder Tests\n\nThe responder SHOULD produce the given output when fed this input.\n\n```\n    name: transport-responder successful handshake\n    ls.priv=2121212121212121212121212121212121212121212121212121212121212121\n    ls.pub=028d7500dd4c12685d1f568b4c2b5048e8534b873319f3a8daa612b469132ec7f7\n    e.priv=0x2222222222222222222222222222222222222222222222222222222222222222\n    e.pub=0x02466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f27\n    # Act One\n    input: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a\n    # re=0x036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f7\n    # h=0x9e0e7de8bb75554f21db034633de04be41a2b8a18da7a319a03c803bf02b396c\n    # ss=0x1e2fb3c8fe8fb9f262f649f64d26ecf0f2c0a805a767cf02dc2d77a6ef1fdcc3\n    # HKDF(0x2640f52eebcd9e882958951c794250eedb28002c05d7dc2ea0f195406042caf1,0x1e2fb3c8fe8fb9f262f649f64d26ecf0f2c0a805a767cf02dc2d77a6ef1fdcc3)\n    # ck,temp_k1=0xb61ec1191326fa240decc9564369dbb3ae2b34341d1e11ad64ed89f89180582f,0xe68f69b7f096d7917245f5e5cf8ae1595febe4d4644333c99f9c4a1282031c9f\n    # decryptWithAD(0xe68f69b7f096d7917245f5e5cf8ae1595febe4d4644333c99f9c4a1282031c9f, 0x000000000000000000000000, 0x9e0e7de8bb75554f21db034633de04be41a2b8a18da7a319a03c803bf02b396c, 0x0df6086551151f58b8afe6c195782c6a)\n    # h=0x9d1ffbb639e7e20021d9259491dc7b160aab270fb1339ef135053f6f2cebe9ce\n    # Act Two\n    # e.pub=0x02466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f27 e.priv=0x2222222222222222222222222222222222222222222222222222222222222222\n    # h=0x38122f669819f906000621a14071802f93f2ef97df100097bcac3ae76c6dc0bf\n    # ss=0xc06363d6cc549bcb7913dbb9ac1c33fc1158680c89e972000ecd06b36c472e47\n    # HKDF(0xb61ec1191326fa240decc9564369dbb3ae2b34341d1e11ad64ed89f89180582f,0xc06363d6cc549bcb7913dbb9ac1c33fc1158680c89e972000ecd06b36c472e47)\n    # ck,temp_k2=0xe89d31033a1b6bf68c07d22e08ea4d7884646c4b60a9528598ccb4ee2c8f56ba,0x908b166535c01a935cf1e130a5fe895ab4e6f3ef8855d87e9b7581c4ab663ddc\n    # encryptWithAD(0x908b166535c01a935cf1e130a5fe895ab4e6f3ef8855d87e9b7581c4ab663ddc, 0x000000000000000000000000, 0x38122f669819f906000621a14071802f93f2ef97df100097bcac3ae76c6dc0bf, <empty>)\n    # c=0x6e2470b93aac583c9ef6eafca3f730ae\n    # h=0x90578e247e98674e661013da3c5c1ca6a8c8f48c90b485c0dfa1494e23d56d72\n    output: 0x0002466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730ae\n    # Act Three\n    input: 0x00b9e3a702e93e3a9948c2ed6e5fd7590a6e1c3a0344cfc9d5b57357049aa22355361aa02e55a8fc28fef5bd6d71ad0c38228dc68b1c466263b47fdf31e560e139ba\n    # decryptWithAD(0x908b166535c01a935cf1e130a5fe895ab4e6f3ef8855d87e9b7581c4ab663ddc, 0x000000000100000000000000, 0x90578e247e98674e661013da3c5c1ca6a8c8f48c90b485c0dfa1494e23d56d72, 0xb9e3a702e93e3a9948c2ed6e5fd7590a6e1c3a0344cfc9d5b57357049aa22355361aa02e55a8fc28fef5bd6d71ad0c3822)\n    # rs=0x034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa\n    # h=0x5dcb5ea9b4ccc755e0e3456af3990641276e1d5dc9afd82f974d90a47c918660\n    # ss=0xb36b6d195982c5be874d6d542dc268234379e1ae4ff1709402135b7de5cf0766\n    # HKDF(0xe89d31033a1b6bf68c07d22e08ea4d7884646c4b60a9528598ccb4ee2c8f56ba,0xb36b6d195982c5be874d6d542dc268234379e1ae4ff1709402135b7de5cf0766)\n    # ck,temp_k3=0x919219dbb2920afa8db80f9a51787a840bcf111ed8d588caf9ab4be716e42b01,0x981a46c820fb7a241bc8184ba4bb1f01bcdfafb00dde80098cb8c38db9141520\n    # decryptWithAD(0x981a46c820fb7a241bc8184ba4bb1f01bcdfafb00dde80098cb8c38db9141520, 0x000000000000000000000000, 0x5dcb5ea9b4ccc755e0e3456af3990641276e1d5dc9afd82f974d90a47c918660, 0x8dc68b1c466263b47fdf31e560e139ba)\n    # HKDF(0x919219dbb2920afa8db80f9a51787a840bcf111ed8d588caf9ab4be716e42b01,zero)\n    output: rk,sk=0x969ab31b4d288cedf6218839b27a3e2140827047f2c0f01bf5c04435d43511a9,0xbb9020b8965f4df047e07f955f3c4b88418984aadc5cdb35096b9ea8fa5c3442\n\n    name: transport-responder act1 short read test\n    ls.priv=2121212121212121212121212121212121212121212121212121212121212121\n    ls.pub=028d7500dd4c12685d1f568b4c2b5048e8534b873319f3a8daa612b469132ec7f7\n    e.priv=0x2222222222222222222222222222222222222222222222222222222222222222\n    e.pub=0x02466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f27\n    # Act One\n    input: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c\n    output: ERROR (ACT1_READ_FAILED)\n\n    name: transport-responder act1 bad version test\n    ls.priv=2121212121212121212121212121212121212121212121212121212121212121\n    ls.pub=028d7500dd4c12685d1f568b4c2b5048e8534b873319f3a8daa612b469132ec7f7\n    e.priv=0x2222222222222222222222222222222222222222222222222222222222222222\n    e.pub=0x02466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f27\n    # Act One\n    input: 0x01036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a\n    output: ERROR (ACT1_BAD_VERSION)\n\n    name: transport-responder act1 bad key serialization test\n    ls.priv=2121212121212121212121212121212121212121212121212121212121212121\n    ls.pub=028d7500dd4c12685d1f568b4c2b5048e8534b873319f3a8daa612b469132ec7f7\n    e.priv=0x2222222222222222222222222222222222222222222222222222222222222222\n    e.pub=0x02466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f27\n    # Act One\n    input: 0x00046360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a\n    output: ERROR (ACT1_BAD_PUBKEY)\n\n    name: transport-responder act1 bad MAC test\n    ls.priv=2121212121212121212121212121212121212121212121212121212121212121\n    ls.pub=028d7500dd4c12685d1f568b4c2b5048e8534b873319f3a8daa612b469132ec7f7\n    e.priv=0x2222222222222222222222222222222222222222222222222222222222222222\n    e.pub=0x02466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f27\n    # Act One\n    input: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6b\n    output: ERROR (ACT1_BAD_TAG)\n\n    name: transport-responder act3 bad version test\n    ls.priv=2121212121212121212121212121212121212121212121212121212121212121\n    ls.pub=028d7500dd4c12685d1f568b4c2b5048e8534b873319f3a8daa612b469132ec7f7\n    e.priv=0x2222222222222222222222222222222222222222222222222222222222222222\n    e.pub=0x02466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f27\n    # Act One\n    input: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a\n    # Act Two\n    output: 0x0002466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730ae\n    # Act Three\n    input: 0x01b9e3a702e93e3a9948c2ed6e5fd7590a6e1c3a0344cfc9d5b57357049aa22355361aa02e55a8fc28fef5bd6d71ad0c38228dc68b1c466263b47fdf31e560e139ba\n    output: ERROR (ACT3_BAD_VERSION 1)\n\n    name: transport-responder act3 short read test\n    ls.priv=2121212121212121212121212121212121212121212121212121212121212121\n    ls.pub=028d7500dd4c12685d1f568b4c2b5048e8534b873319f3a8daa612b469132ec7f7\n    e.priv=0x2222222222222222222222222222222222222222222222222222222222222222\n    e.pub=0x02466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f27\n    # Act One\n    input: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a\n    # Act Two\n    output: 0x0002466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730ae\n    # Act Three\n    input: 0x00b9e3a702e93e3a9948c2ed6e5fd7590a6e1c3a0344cfc9d5b57357049aa22355361aa02e55a8fc28fef5bd6d71ad0c38228dc68b1c466263b47fdf31e560e139\n    output: ERROR (ACT3_READ_FAILED)\n\n    name: transport-responder act3 bad MAC for ciphertext test\n    ls.priv=2121212121212121212121212121212121212121212121212121212121212121\n    ls.pub=028d7500dd4c12685d1f568b4c2b5048e8534b873319f3a8daa612b469132ec7f7\n    e.priv=0x2222222222222222222222222222222222222222222222222222222222222222\n    e.pub=0x02466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f27\n    # Act One\n    input: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a\n    # Act Two\n    output: 0x0002466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730ae\n    # Act Three\n    input: 0x00c9e3a702e93e3a9948c2ed6e5fd7590a6e1c3a0344cfc9d5b57357049aa22355361aa02e55a8fc28fef5bd6d71ad0c38228dc68b1c466263b47fdf31e560e139ba\n    output: ERROR (ACT3_BAD_CIPHERTEXT)\n\n    name: transport-responder act3 bad rs test\n    ls.priv=2121212121212121212121212121212121212121212121212121212121212121\n    ls.pub=028d7500dd4c12685d1f568b4c2b5048e8534b873319f3a8daa612b469132ec7f7\n    e.priv=0x2222222222222222222222222222222222222222222222222222222222222222\n    e.pub=0x02466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f27\n    # Act One\n    input: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a\n    # Act Two\n    output: 0x0002466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730ae\n    # Act Three\n    input: 0x00bfe3a702e93e3a9948c2ed6e5fd7590a6e1c3a0344cfc9d5b57357049aa2235536ad09a8ee351870c2bb7f78b754a26c6cef79a98d25139c856d7efd252c2ae73c\n    # decryptWithAD(0x908b166535c01a935cf1e130a5fe895ab4e6f3ef8855d87e9b7581c4ab663ddc, 0x000000000000000000000001, 0x90578e247e98674e661013da3c5c1ca6a8c8f48c90b485c0dfa1494e23d56d72, 0xd7fedc211450dd9602b41081c9bd05328b8bf8c0238880f7b7cb8a34bb6d8354081e8d4b81887fae47a74fe8aab3008653)\n    # rs=0x044f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa\n    output: ERROR (ACT3_BAD_PUBKEY)\n\n    name: transport-responder act3 bad MAC test\n    ls.priv=2121212121212121212121212121212121212121212121212121212121212121\n    ls.pub=028d7500dd4c12685d1f568b4c2b5048e8534b873319f3a8daa612b469132ec7f7\n    e.priv=0x2222222222222222222222222222222222222222222222222222222222222222\n    e.pub=0x02466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f27\n    # Act One\n    input: 0x00036360e856310ce5d294e8be33fc807077dc56ac80d95d9cd4ddbd21325eff73f70df6086551151f58b8afe6c195782c6a\n    # Act Two\n    output: 0x0002466d7fcae563e5cb09a0d1870bb580344804617879a14949cf22285f1bae3f276e2470b93aac583c9ef6eafca3f730ae\n    # Act Three\n    input: 0x00b9e3a702e93e3a9948c2ed6e5fd7590a6e1c3a0344cfc9d5b57357049aa22355361aa02e55a8fc28fef5bd6d71ad0c38228dc68b1c466263b47fdf31e560e139bb\n    output: ERROR (ACT3_BAD_TAG)\n```\n\n## Message Encryption Tests\n\nIn this test, the initiator sends length 5 messages containing \"hello\"\n1001 times. Only six example outputs are shown, for brevity and to test\ntwo key rotations:\n\n\tname: transport-message test\n    ck=0x919219dbb2920afa8db80f9a51787a840bcf111ed8d588caf9ab4be716e42b01\n\tsk=0x969ab31b4d288cedf6218839b27a3e2140827047f2c0f01bf5c04435d43511a9\n\trk=0xbb9020b8965f4df047e07f955f3c4b88418984aadc5cdb35096b9ea8fa5c3442\n    # encrypt l: cleartext=0x0005, AD=NULL, sn=0x000000000000000000000000, sk=0x969ab31b4d288cedf6218839b27a3e2140827047f2c0f01bf5c04435d43511a9 => 0xcf2b30ddf0cf3f80e7c35a6e6730b59fe802\n    # encrypt m: cleartext=0x68656c6c6f, AD=NULL, sn=0x000000000100000000000000, sk=0x969ab31b4d288cedf6218839b27a3e2140827047f2c0f01bf5c04435d43511a9 => 0x473180f396d88a8fb0db8cbcf25d2f214cf9ea1d95\n\toutput 0: 0xcf2b30ddf0cf3f80e7c35a6e6730b59fe802473180f396d88a8fb0db8cbcf25d2f214cf9ea1d95\n    # encrypt l: cleartext=0x0005, AD=NULL, sn=0x000000000200000000000000, sk=0x969ab31b4d288cedf6218839b27a3e2140827047f2c0f01bf5c04435d43511a9 => 0x72887022101f0b6753e0c7de21657d35a4cb\n    # encrypt m: cleartext=0x68656c6c6f, AD=NULL, sn=0x000000000300000000000000, sk=0x969ab31b4d288cedf6218839b27a3e2140827047f2c0f01bf5c04435d43511a9 => 0x2a1f5cde2650528bbc8f837d0f0d7ad833b1a256a1\n\toutput 1: 0x72887022101f0b6753e0c7de21657d35a4cb2a1f5cde2650528bbc8f837d0f0d7ad833b1a256a1\n    # 0xcc2c6e467efc8067720c2d09c139d1f77731893aad1defa14f9bf3c48d3f1d31, 0x3fbdc101abd1132ca3a0ae34a669d8d9ba69a587e0bb4ddd59524541cf4813d8 = HKDF(0x919219dbb2920afa8db80f9a51787a840bcf111ed8d588caf9ab4be716e42b01, 0x969ab31b4d288cedf6218839b27a3e2140827047f2c0f01bf5c04435d43511a9)\n    # 0xcc2c6e467efc8067720c2d09c139d1f77731893aad1defa14f9bf3c48d3f1d31, 0x3fbdc101abd1132ca3a0ae34a669d8d9ba69a587e0bb4ddd59524541cf4813d8 = HKDF(0x919219dbb2920afa8db80f9a51787a840bcf111ed8d588caf9ab4be716e42b01, 0x969ab31b4d288cedf6218839b27a3e2140827047f2c0f01bf5c04435d43511a9)\n    output 500: 0x178cb9d7387190fa34db9c2d50027d21793c9bc2d40b1e14dcf30ebeeeb220f48364f7a4c68bf8\n    output 501: 0x1b186c57d44eb6de4c057c49940d79bb838a145cb528d6e8fd26dbe50a60ca2c104b56b60e45bd\n    # 0x728366ed68565dc17cf6dd97330a859a6a56e87e2beef3bd828a4c4a54d8df06, 0x9e0477f9850dca41e42db0e4d154e3a098e5a000d995e421849fcd5df27882bd = HKDF(0xcc2c6e467efc8067720c2d09c139d1f77731893aad1defa14f9bf3c48d3f1d31, 0x3fbdc101abd1132ca3a0ae34a669d8d9ba69a587e0bb4ddd59524541cf4813d8)\n    # 0x728366ed68565dc17cf6dd97330a859a6a56e87e2beef3bd828a4c4a54d8df06, 0x9e0477f9850dca41e42db0e4d154e3a098e5a000d995e421849fcd5df27882bd = HKDF(0xcc2c6e467efc8067720c2d09c139d1f77731893aad1defa14f9bf3c48d3f1d31, 0x3fbdc101abd1132ca3a0ae34a669d8d9ba69a587e0bb4ddd59524541cf4813d8)\n    output 1000: 0x4a2f3cc3b5e78ddb83dcb426d9863d9d9a723b0337c89dd0b005d89f8d3c05c52b76b29b740f09\n    output 1001: 0x2ecd8c8a5629d0d02ab457a0fdd0f7b90a192cd46be5ecb6ca570bfc5e268338b1a16cf4ef2d36\n\n# Acknowledgments\n\nTODO(roasbeef); fin\n\n# References\n1. <a id=\"reference-1\">https://tools.ietf.org/html/rfc8439</a>\n2. <a id=\"reference-2\">http://noiseprotocol.org/noise.html</a>\n3. <a id=\"reference-3\">https://tools.ietf.org/html/rfc5869</a>\n\n# Authors\n\nFIXME\n\n![Creative Commons License](https://i.creativecommons.org/l/by/4.0/88x31.png \"License CC-BY\")\n<br>\nThis work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).\n"
        },
        {
          "name": "09-features.md",
          "type": "blob",
          "size": 8.85546875,
          "content": "# BOLT #9: Assigned Feature Flags\n\nThis document tracks the assignment of `features` flags in the `init`\nmessage ([BOLT #1](01-messaging.md)), as well as `features` fields in\nthe `channel_announcement` and `node_announcement` messages ([BOLT\n#7](07-routing-gossip.md)).  The flags are tracked separately, since\nnew flags will likely be added over time.\n\nSome features were introduced and became so widespread they are `ASSUMED` to be present by all nodes, and can be safely ignored (and the semantics are only defined in prior revisions of this spec).\n\nFlags are numbered from the least-significant bit, at bit 0 (i.e. 0x1,\nan _even_ bit). They are generally assigned in pairs so that features\ncan be introduced as optional (_odd_ bits) and later upgraded to be compulsory\n(_even_ bits), which will be refused by outdated nodes:\nsee [BOLT #1: The `init` Message](01-messaging.md#the-init-message).\n\nSome features don't make sense on a per-channels or per-node basis, so\neach feature defines how it is presented in those contexts.  Some\nfeatures may be required for opening a channel, but not a requirement\nfor use of the channel, so the presentation of those features depends\non the feature itself.\n\nThe Context column decodes as follows:\n\n* `I`: presented in the `init` message.\n* `N`: presented in the `node_announcement` messages\n* `C`: presented in the `channel_announcement` message.\n* `C-`: presented in the `channel_announcement` message, but always odd (optional).\n* `C+`: presented in the `channel_announcement` message, but always even (required).\n* `9`: presented in [BOLT 11](11-payment-encoding.md) invoices.\n* `B`: presented in the `allowed_features` field of a blinded path.\n\n| Bits  | Name                              | Description                                               | Context  | Dependencies              | Link                                                                  |\n|-------|-----------------------------------|-----------------------------------------------------------|----------|---------------------------|-----------------------------------------------------------------------|\n| 0/1   | `option_data_loss_protect`        | ASSUMED                                                   |          |                           |                                                                       |\n| 4/5   | `option_upfront_shutdown_script`  | Commits to a shutdown scriptpubkey when opening channel   | IN       |                           | [BOLT #2][bolt02-open]                                                |\n| 6/7   | `gossip_queries`                  | Peer has useful gossip to share                           |          |                           |                                                                       |\n| 8/9   | `var_onion_optin`                 | ASSUMED                                                   |          |                           |                                                                       |\n| 10/11 | `gossip_queries_ex`               | Gossip queries can include additional information         | IN       |                           | [BOLT #7][bolt07-query]                                               |\n| 12/13 | `option_static_remotekey`         | ASSUMED                                                   |          |                           |                                                                       |\n| 14/15 | `payment_secret`                  | Node supports `payment_secret` field                      | IN9      |                           | [Routing Onion Specification][bolt04]                                 |\n| 16/17 | `basic_mpp`                       | Node can receive basic multi-part payments                | IN9      | `payment_secret`          | [BOLT #4][bolt04-mpp]                                                 |\n| 18/19 | `option_support_large_channel`    | Can create large channels                                 | IN       |                           | [BOLT #2](02-peer-protocol.md#the-open_channel-message)               |\n| 22/23 | `option_anchors`                  | Anchor commitment type with zero fee HTLC transactions    | IN       |                           | [BOLT #3][bolt03-htlc-tx], [lightning-dev][ml-sighash-single-harmful] |\n| 24/25 | `option_route_blinding`           | Node supports blinded paths                               | IN9      |                           | [BOLT #4][bolt04-route-blinding]                                      |\n| 26/27 | `option_shutdown_anysegwit`       | Future segwit versions allowed in `shutdown`              | IN       |                           | [BOLT #2][bolt02-shutdown]                                            |\n| 28/29 | `option_dual_fund`                | Use v2 of channel open, enables dual funding              | IN       |                           | [BOLT #2](02-peer-protocol.md)                                        |\n| 34/35 | `option_quiesce`             | Support for `stfu` message                                     | IN       |                            | [BOLT #2][bolt02-quiescence]                                         |\n| 38/39 | `option_onion_messages`           | Can forward onion messages                                | IN       |                           | [BOLT #7](04-onion-routing.md#onion-messages)                         |\n| 44/45 | `option_channel_type`             | Node supports the `channel_type` field in open/accept     | IN       |                           | [BOLT #2](02-peer-protocol.md#the-open_channel-message)               |\n| 46/47 | `option_scid_alias`               | Supply channel aliases for routing                        | IN       |                           | [BOLT #2][bolt02-channel-ready]                                       |\n| 48/49 | `option_payment_metadata`         | Payment metadata in tlv record                            | 9        |                           | [BOLT #11](11-payment-encoding.md#tagged-fields)                      |\n| 50/51 | `option_zeroconf`                 | Understands zeroconf channel types                        | IN       | `option_scid_alias`       | [BOLT #2][bolt02-channel-ready]                                       |\n\n\n## Requirements\n\nThe origin node:\n  * If it supports a feature above, SHOULD set the corresponding odd\n    bit in all feature fields indicated by the Context column unless\n\tindicated that it must set the even feature bit instead.\n  * If it requires a feature above, MUST set the corresponding even\n    feature bit in all feature fields indicated by the Context column,\n    unless indicated that it must set the odd feature bit instead.\n  * MUST NOT set feature bits it does not support.\n  * MUST NOT set feature bits in fields not specified by the table above.\n  * MUST NOT set both the optional and mandatory bits.\n  * MUST set all transitive feature dependencies.\n  * MUST support:\n    * `var_onion_optin`\n\nThe receiving node:\n  * if both the optional and the mandatory feature bits in a pair are set,\n  the feature should be treated as mandatory.\n\nThe requirements for receiving specific bits are defined in the linked sections in the table above.\nThe requirements for feature bits that are not defined\nabove can be found in [BOLT #1: The `init` Message](01-messaging.md#the-init-message).\n\n## Rationale\n\nNote that for feature flags which are available in both the `node_announcement`\nand [BOLT 11](11-payment-encoding.md) invoice contexts, the features as set in\nthe [BOLT 11](11-payment-encoding.md) invoice should override those set in the\n`node_announcement`. This keeps things consistent with the unknown features\nbehavior as specified in [BOLT 7](07-routing-gossip.md#the-node_announcement-message).\n\nThe origin must set all transitive feature dependencies in order to create a\nwell-formed feature vector. By validating all known dependencies up front, this\nsimplifies logic gated on a single feature bit; the feature's dependencies are\nknown to be set, and do not need to be validated at every feature gate.\n\n![Creative Commons License](https://i.creativecommons.org/l/by/4.0/88x31.png \"License CC-BY\")\n<br>\nThis work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).\n\n[bolt02-retransmit]: 02-peer-protocol.md#message-retransmission\n[bolt02-open]: 02-peer-protocol.md#the-open_channel-message\n[bolt03-htlc-tx]: 03-transactions.md#htlc-timeout-and-htlc-success-transactions\n[bolt02-shutdown]: 02-peer-protocol.md#closing-initiation-shutdown\n[bolt02-quiescence]: 02-peer-protocol.md#channel-quiescence\n[bolt02-channel-ready]: 02-peer-protocol.md#the-channel_ready-message\n[bolt04]: 04-onion-routing.md\n[bolt07-sync]: 07-routing-gossip.md#initial-sync\n[bolt07-query]: 07-routing-gossip.md#query-messages\n[bolt04-mpp]: 04-onion-routing.md#basic-multi-part-payments\n[bolt04-route-blinding]: 04-onion-routing.md#route-blinding\n[ml-sighash-single-harmful]: https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-September/002796.html\n"
        },
        {
          "name": "10-dns-bootstrap.md",
          "type": "blob",
          "size": 8.2802734375,
          "content": "# BOLT #10: DNS Bootstrap and Assisted Node Location\n\n## Overview\n\nThis specification describes a node discovery mechanism based on the Domain Name System (DNS).\nIts purpose is twofold:\n\n - Bootstrap: providing the initial node discovery for nodes that have no known contacts in the network\n - Assisted Node Location: supporting nodes in discovery of the current network address of previously known peers\n\nA domain name server implementing this specification is referred to as a\n_DNS Seed_ and answers incoming DNS queries of type `A`, `AAAA`, or `SRV`, as\nspecified in RFCs 1035<sup>[1](#ref-1)</sup>, 3596<sup>[2](#ref-2)</sup>, and\n2782<sup>[3](#ref-3)</sup>, respectively.\nThe DNS server is authoritative for a subdomain, referred to as a\n_seed root domain_, and clients may query it for subdomains.\n\nThe subdomains consist of a number of dot-separated _conditions_ that further narrow the desired results.\n\n## Table of Contents\n\n  * [DNS Seed Queries](#dns-seed-queries)\n    * [Query Semantics](#query-semantics)\n  * [Reply Construction](#reply-construction)\n  * [Policies](#policies)\n  * [Examples](#examples)\n  * [References](#references)\n  * [Authors](#authors)\n\n## DNS Seed Queries\n\nA client MAY issue queries using the `A`, `AAAA`, or `SRV` query types,\nspecifying conditions for the desired results the seed should return.\n\nQueries distinguish between _wildcard_ queries and _node_ queries, depending on\nwhether the `l`-key is set or not.\n\n### Query Semantics\n\nThe conditions are key-value pairs: the key is a single-letter, while the\nremainder of the key-value pair is the value.\nThe following key-value pairs MUST be supported by a DNS seed:\n\n - `r`: realm byte\n   - used to specify what realm the returned nodes must support\n   - default value: 0 (Bitcoin)\n - `a`: address types\n   - a bitfield that uses the types from [BOLT #7](07-routing-gossip.md) as bit\n   index\n   - used to specify what address types should be returned for `SRV` queries\n   - MAY only be used for `SRV` queries\n   - default value: 6 (i.e. `2 || 4`, since bit 1 and bit 2 are set for IPv4 and\n     IPv6, respectively)\n - `l`: `node_id`\n   - a bech32-encoded `node_id` of a specific node\n   - used to ask for a single node instead of a random selection\n   - default value: null\n - `n`: number of desired reply records\n   - default value: 25\n\nConditions are passed in the DNS seed query as individual, dot-separated subdomain components.\n\nFor example, a query for `r0.a2.n10.lseed.bitcoinstats.com` would imply: return\n10 (`n10`) IPv4 (`a2`) records for nodes supporting Bitcoin (`r0`).\n\n### Requirements\n\nThe DNS seed:\n  - MUST evaluate the conditions from the _seed root domain_ by\n  'going up-the-tree', i.e. evaluating right-to-left in a fully qualified domain\nname.\n    - E.g. to evaluate the above case: first evaluate `n10`, then `a2`, and finally `r0`.\n  - if a condition (key) is specified more than once:\n    - MUST discard any earlier value for that condition AND use the new value\n    instead.\n      - E.g. for `n5.r0.a2.n10.lseed.bitcoinstats.com`, the result is:\n      ~~`n10`~~, `a2`, `r0`, `n5`.\n  - SHOULD return results that match all conditions.\n  - if it does NOT implement filtering by a given condition:\n    - MAY ignore the condition altogether (i.e. the seed filtering is best effort only).\n  - for `A` and `AAAA` queries:\n    - MUST return only nodes listening on the default port 9735, as defined in\n    [BOLT #1](01-messaging.md).\n  - for `SRV` queries:\n    - MAY return nodes that are listening on non-default ports, since `SRV`\n    records return a _(hostname,port)_-tuple.\n  - upon receiving a _wildcard_ query:\n    - MUST select a random subset of up to `n` IPv4 or IPv6 addresses of nodes\n    that are listening for incoming connections.\n  - upon receiving a _node_ query:\n    - MUST select the record matching the `node_id`, if any, AND return all\n    addresses associated with that node.\n\nQuerying clients:\n  - MUST NOT rely on any given condition being met by the results.\n\n### Reply Construction\n\nThe results are serialized in a reply with a query type matching the client's\nquery type. For example, `A`, `AAAA`, and `SRV` queries respectively result in\n`A`, `AAAA`, and `SRV` replies. Additionally, replies may be augmented with\nadditional records (e.g. to add `A` or `AAAA` records matching the returned\n`SRV` records).\n\nFor `A` and `AAAA` queries, the reply contains the domain name and the IP\naddress of the results.\n\nThe domain name MUST match the domain in the query, in order not to be filtered\nby intermediate resolvers.\n\nFor `SRV` queries, the reply consists of (_virtual hostnames_, port)-tuples.\nA virtual hostname is a subdomain of the seed root domain that uniquely\nidentifies a node in the network.\nIt is constructed by prepending the `node_id` condition to the seed root domain.\n\nThe DNS seed:\n  - MAY additionally return the corresponding `A` and `AAAA` records that\n  indicate the IP address for the `SRV` entries in the additional section of the\n  reply.\n- MAY omit these additional records upon detecting a repeated query.\n  - Reason: due to the large size of the resulting reply, the reply may be\n  dropped by intermediate resolvers.\n- if no entries match all the conditions:\n  - MUST return an empty reply.\n\n## Policies\n\nThe DNS seed:\n  - MUST NOT return replies with a TTL less than 60 seconds.\n  - MAY filter nodes from its local views for various reasons, including faulty\n  nodes, flaky nodes, or spam prevention.\n  - MUST reply to random queries (i.e. queries to the seed root domain and to\n    the `_nodes._tcp.` alias for `SRV` queries) with _random and unbiased_\n    samples from the set of all known good nodes, in accordance with the Bitcoin DNS Seed policy<sup>[4](#ref-4)</sup>.\n\n## Examples\n\nQuerying for `AAAA` records:\n\n\t$ dig lseed.bitcoinstats.com AAAA\n\tlseed.bitcoinstats.com. 60      IN      AAAA    2a02:aa16:1105:4a80:1234:1234:37c1:9c9\n\nQuerying for `SRV` records:\n\n\t$ dig lseed.bitcoinstats.com SRV\n\tlseed.bitcoinstats.com. 59   IN      SRV     10 10 6331 ln1qwktpe6jxltmpphyl578eax6fcjc2m807qalr76a5gfmx7k9qqfjwy4mctz.lseed.bitcoinstats.com.\n\tlseed.bitcoinstats.com. 59   IN      SRV     10 10 9735 ln1qv2w3tledmzczw227nnkqrrltvmydl8gu4w4d70g9td7avke6nmz2tdefqp.lseed.bitcoinstats.com.\n\tlseed.bitcoinstats.com. 59   IN      SRV     10 10 9735 ln1qtynyymv99pqf0r9cuexvvqtxrlgejuecf8myfsa96vcpflgll5cqmr2xsu.lseed.bitcoinstats.com.\n\tlseed.bitcoinstats.com. 59   IN      SRV     10 10 4280 ln1qdfvlysfpyh96apy3w3qdwlu8jjkdhnuxa689ka540tnde6gnx86cf7ga2d.lseed.bitcoinstats.com.\n\tlseed.bitcoinstats.com. 59   IN      SRV     10 10 4281 ln1qwf789tlcpe4n34649xrqllxt97whsvfk5pm07ggqms3vrjwdj3cu6332zs.lseed.bitcoinstats.com.\n\nQuerying for the `A` for the first virtual hostname from the previous example:\n\n\t$ dig ln1qwktpe6jxltmpphyl578eax6fcjc2m807qalr76a5gfmx7k9qqfjwy4mctz.lseed.bitcoinstats.com A\n\tln1qwktpe6jxltmpphyl578eax6fcjc2m807qalr76a5gfmx7k9qqfjwy4mctz.lseed.bitcoinstats.com. 60 IN A 139.59.143.87\n\nQuerying for only IPv4 nodes (`a2`) via seed filtering:\n\n\t$dig a2.lseed.bitcoinstats.com SRV\n\ta2.lseed.bitcoinstats.com. 59\tIN\tSRV\t10 10 9735 ln1q2jy22cg2nckgxttjf8txmamwe9rtw325v4m04ug2dm9sxlrh9cagrrpy86.lseed.bitcoinstats.com.\n\ta2.lseed.bitcoinstats.com. 59\tIN\tSRV\t10 10 9735 ln1qfrkq32xayuq63anmc2zp5vtd2jxafhdzzudmuws0hvxshtgd2zd7jsqv7f.lseed.bitcoinstats.com.\n\nQuerying for only IPv6 nodes (`a4`) supporting Bitcoin (`r0`) via seed filtering:\n\n\t$dig r0.a4.lseed.bitcoinstats.com SRV\n\tr0.a4.lseed.bitcoinstats.com. 59 IN\tSRV\t10 10 9735 ln1qwx3prnvmxuwsnaqhzwsrrpwy4pjf5m8fv4m8kcjkdvyrzymlcmj5dakwrx.lseed.bitcoinstats.com.\n\tr0.a4.lseed.bitcoinstats.com. 59 IN\tSRV\t10 10 9735 ln1qwr7x7q2gvj7kwzzr7urqq9x7mq0lf9xn6svs8dn7q8gu5q4e852znqj3j7.lseed.bitcoinstats.com.\n\n## References\n- <a id=\"ref-1\">[RFC 1035 - Domain Names](https://www.ietf.org/rfc/rfc1035.txt)</a>\n- <a id=\"ref-2\">[RFC 3596 - DNS Extensions to Support IP Version 6](https://tools.ietf.org/html/rfc3596)</a>\n- <a id=\"ref-3\">[RFC 2782 - A DNS RR for specifying the location of services (DNS SRV)](https://www.ietf.org/rfc/rfc2782.txt)</a>\n- <a id=\"ref-4\">[Expectations for DNS Seed operators](https://github.com/bitcoin/bitcoin/blob/master/doc/dnsseed-policy.md)</a>\n\n## Authors\n\n[ FIXME: Insert Author List ]\n\n![Creative Commons License](https://i.creativecommons.org/l/by/4.0/88x31.png \"License CC-BY\")\n<br>\nThis work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).\n"
        },
        {
          "name": "11-payment-encoding.md",
          "type": "blob",
          "size": 45.79296875,
          "content": "# BOLT #11: Invoice Protocol for Lightning Payments\n\nA simple, extendable, QR-code-ready protocol for requesting payments\nover Lightning.\n\n# Table of Contents\n\n  * [Encoding Overview](#encoding-overview)\n  * [Human-Readable Part](#human-readable-part)\n  * [Data Part](#data-part)\n    * [Tagged Fields](#tagged-fields)\n    * [Feature Bits](#feature-bits)\n  * [Payer / Payee Interactions](#payer--payee-interactions)\n    * [Payer / Payee Requirements](#payer--payee-requirements)\n  * [Implementation](#implementation)\n  * [Examples](#examples)\n  * [Authors](#authors)\n\n# Encoding Overview\n\nThe format for a Lightning invoice uses\n[bech32 encoding](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki),\nwhich is already used for Bitcoin Segregated Witness. It can be\nsimply reused for Lightning invoices even though its 6-character checksum is optimized\nfor manual entry, which is unlikely to happen often given the length\nof Lightning invoices.\n\nIf a URI scheme is desired, the current recommendation is to either\nuse 'lightning:' as a prefix before the BOLT-11 encoding (note: not\n'lightning://'), or for fallback to Bitcoin payments, to use 'bitcoin:',\nas per BIP-21, with the key 'lightning' and the value equal to the BOLT-11\nencoding.\n\n## Requirements\n\nA writer:\n   - MUST encode the payment request in Bech32 (see BIP-0173)\n   - SHOULD use upper case for QR codes (see BIP-0173)\n   - MAY exceed the 90-character limit specified in BIP-0173.\n\nA reader:\n  - MUST parse the address as Bech32, as specified in BIP-0173 (also without the character limit).\n\t- Note: this includes handling uppercase as specified by BIP-0173\n  - if the checksum is incorrect:\n    - MUST fail the payment.\n\n# Human-Readable Part\n\nThe human-readable part of a Lightning invoice consists of two sections:\n1. `prefix`: `ln` + BIP-0173 currency prefix (e.g. `lnbc` for Bitcoin mainnet,\n   `lntb` for Bitcoin testnet, `lntbs` for Bitcoin signet, and `lnbcrt` for\n   Bitcoin regtest)\n1. `amount`: optional number in that currency, followed by an optional\n   `multiplier` letter. The unit encoded here is the 'social' convention of a payment unit -- in the case of Bitcoin the unit is 'bitcoin' NOT satoshis.\n\nThe following `multiplier` letters are defined:\n\n* `m` (milli): multiply by 0.001\n* `u` (micro): multiply by 0.000001\n* `n` (nano): multiply by 0.000000001\n* `p` (pico): multiply by 0.000000000001\n\n## Requirements\n\nA writer:\n  - MUST encode `prefix` using the currency required for successful payment.\n  - if a specific minimum `amount` is required for successful payment:\n\t  - MUST include that `amount`.\n\t- MUST encode `amount` as a positive decimal integer with no leading 0s.\n\t- If the `p` multiplier is used the last decimal of `amount` MUST be `0`.\n\t- SHOULD use the shortest representation possible, by using the largest\n\t  multiplier or omitting the multiplier.\n\nA reader:\n  - if it does NOT understand the `prefix`:\n    - MUST fail the payment.\n  - if the `amount` is empty:\n\t  - SHOULD indicate to the payer that amount is unspecified.\n  - otherwise:\n    - if `amount` contains a non-digit OR is followed by anything except\n    a `multiplier` (see table above):\n  \t  - MUST fail the payment.\n    - if the `multiplier` is present:\n\t  - MUST multiply `amount` by the `multiplier` value to derive the\n      amount required for payment.\n      - if multiplier is `p` and the last decimal of `amount` is not 0:\n\t    - MUST fail the payment.\n\n## Rationale\n\nThe `amount` is encoded into the human readable part, as it's fairly\nreadable and a useful indicator of how much is being requested.\n\nDonation addresses often don't have an associated amount, so `amount`\nis optional in that case. Usually a minimum payment is required for\nwhatever is being offered in return.\n\nThe `p` multiplier would allow to specify sub-millisatoshi amounts, which cannot be transferred on the network, since HTLCs are denominated in millisatoshis.\nRequiring a trailing `0` decimal ensures that the `amount` represents an integer number of millisatoshis.\n\n# Data Part\n\nThe data part of a Lightning invoice consists of multiple sections:\n\n1. `timestamp`: seconds-since-1970 (35 bits, big-endian)\n1. zero or more tagged parts\n1. `signature`: Bitcoin-style signature of above (520 bits)\n\n## Requirements\n\nA writer:\n  - MUST set `timestamp` to the number of seconds since Midnight 1 January 1970, UTC in\n  big-endian.\n  - MUST set `signature` to a valid 512-bit secp256k1 signature of the SHA2 256-bit hash of the\n  human-readable part, represented as UTF-8 bytes, concatenated with the\n  data part (excluding the signature) with 0 bits appended to pad the\n  data to the next byte boundary, with a trailing byte containing\n  the recovery ID (0, 1, 2, or 3).\n\nA reader:\n  - MUST check that the `signature` is valid (see the `n` tagged field specified below).\n\n## Rationale\n\n`signature` covers an exact number of bytes even though the SHA2\nstandard actually supports hashing in bit boundaries, because it's not widely\nimplemented. The recovery ID allows public-key recovery, so the\nidentity of the payee node can be implied.\n\n## Tagged Fields\n\nEach Tagged Field is of the form:\n\n1. `type` (5 bits)\n1. `data_length` (10 bits, big-endian)\n1. `data` (`data_length` x 5 bits)\n\nNote that the maximum length of a Tagged Field's `data` is constricted by the maximum value of `data_length`. This is 1023 x 5 bits, or 639 bytes.\n\nCurrently defined tagged fields are:\n\n* `p` (1): `data_length` 52. 256-bit SHA256 payment_hash. Preimage of this provides proof of payment.\n* `s` (16): `data_length` 52. This 256-bit secret prevents forwarding nodes from probing the payment recipient.\n* `d` (13): `data_length` variable. Short description of purpose of payment (UTF-8), e.g. '1 cup of coffee' or 'ナンセンス 1杯'\n* `m` (27): `data_length` variable. Additional metadata to attach to the\n  payment. Note that the size of this field is limited by the maximum hop payload size. Long metadata fields reduce the maximum route length.\n* `n` (19): `data_length` 53. 33-byte public key of the payee node\n* `h` (23): `data_length` 52. 256-bit description of purpose of payment (SHA256). This is used to commit to an associated description that is over 639 bytes, but the transport mechanism for the description in that case is transport specific and not defined here.\n* `x` (6): `data_length` variable. `expiry` time in seconds (big-endian). Default is 3600 (1 hour) if not specified.\n* `c` (24): `data_length` variable. `min_final_cltv_expiry_delta` to use for the last HTLC in the route. Default is 18 if not specified.\n* `f` (9): `data_length` variable, depending on version. Fallback on-chain address: for Bitcoin, this starts with a 5-bit `version` and contains a witness program or P2PKH or P2SH address.\n* `r` (3): `data_length` variable. One or more entries containing extra routing information for a private route; there may be more than one `r` field\n   * `pubkey` (264 bits)\n   * `short_channel_id` (64 bits)\n   * `fee_base_msat` (32 bits, big-endian)\n   * `fee_proportional_millionths` (32 bits, big-endian)\n   * `cltv_expiry_delta` (16 bits, big-endian)\n* `9` (5): `data_length` variable. One or more 5-bit values containing features\n  supported or required for receiving this payment.\n  See [Feature Bits](#feature-bits).\n\n### Requirements\n\nA writer:\n  - MUST include exactly one `p` field.\n  - MUST include exactly one `s` field.\n  - MUST set `payment_hash` to the SHA2 256-bit hash of the `payment_preimage`\n  that will be given in return for payment.\n  - MUST include either exactly one `d` or exactly one `h` field.\n    - if `d` is included:\n      - MUST set `d` to a valid UTF-8 string.\n      - SHOULD use a complete description of the purpose of the payment.\n    - if `h` is included:\n      - MUST make the preimage of the hashed description in `h` available\n      through some unspecified means.\n        - SHOULD use a complete description of the purpose of the payment.\n  - MAY include one `x` field.\n    - if `x` is included:\n      - SHOULD use the minimum `data_length` possible.\n  - SHOULD include one `c` field (`min_final_cltv_expiry_delta`).\n    - MUST set `c` to the minimum `cltv_expiry` it will accept for the last\n    HTLC in the route.\n    - SHOULD use the minimum `data_length` possible.\n  - MAY include one `n` field. (Otherwise performing signature recovery is required)\n    - MUST set `n` to the public key used to create the `signature`.\n  - MAY include one or more `f` fields.\n    - for Bitcoin payments:\n      - MUST set an `f` field to a valid witness version and program, OR to `17`\n      followed by a public key hash, OR to `18` followed by a script hash.\n  - if there is NOT a public channel associated with its public key:\n    - MUST include at least one `r` field.\n      - `r` field MUST contain one or more ordered entries, indicating the forward route from\n      a public node to the final destination.\n        - Note: for each entry, the `pubkey` is the node ID of the start of the channel;\n        `short_channel_id` is the short channel ID field to identify the channel; and\n        `fee_base_msat`, `fee_proportional_millionths`, and `cltv_expiry_delta` are as\n        specified in [BOLT #7](07-routing-gossip.md#the-channel_update-message).\n    - MAY include more than one `r` field to provide multiple routing options.\n  - if `9` contains non-zero bits:\n    - SHOULD use the minimum `data_length` possible.\n  - otherwise:\n    - MUST omit the `9` field altogether.\n  - MUST pad field data to a multiple of 5 bits, using 0s.\n  - if a writer offers more than one of any field type, it:\n    - MUST specify the most-preferred field first, followed by less-preferred fields, in order.\n\nA reader:\n  - MUST skip over unknown fields, OR an `f` field with unknown `version`, OR  `p`, `h`, `s` or\n  `n` fields that do NOT have `data_length`s of 52, 52, 52 or 53, respectively.\n  - if the `9` field contains unknown _odd_ bits that are non-zero:\n    - MUST ignore the bit.\n  - if the `9` field contains unknown _even_ bits that are non-zero:\n    - MUST fail the payment.\n\t- SHOULD indicate the unknown bit to the user.\n  - MUST check that the SHA2 256-bit hash in the `h` field exactly matches the hashed\n  description.\n  - if a valid `n` field is provided:\n    - MUST use the `n` field to validate the signature instead of performing signature recovery.\n  - if there is a valid `s` field:\n    - MUST use that as [`payment_secret`](04-onion-routing.md#tlv_payload-payload-format)\n  - if the `c` field (`min_final_cltv_expiry_delta`) is not provided:\n    - MUST use an expiry delta of at least 18 when making the payment\n  - if an `m` field is provided:\n    - MUST use that as [`payment_metadata`](04-onion-routing.md#tlv_payload-payload-format)\n### Rationale\n\nThe type-and-length format allows future extensions to be backward\ncompatible. `data_length` is always a multiple of 5 bits, for easy\nencoding and decoding. Readers also ignore fields of different length,\nfor fields that are expected may change.\n\nThe `p` field supports the current 256-bit payment hash, but future\nspecs could add a new variant of different length: in which case,\nwriters could support both old and new variants, and old readers would\nignore the variant not the correct length.\n\nThe `d` field allows inline descriptions, but may be insufficient for\ncomplex orders. Thus, the `h` field allows a summary: though the method\nby which the description is served is as-yet unspecified and will\nprobably be transport dependent. The `h` format could change in the future,\nby changing the length, so readers ignore it if it's not 256 bits.\n\nThe `m` field allows metadata to be attached to the payment. This supports\napplications where the recipient doesn't keep any context for the payment.\n\nThe `n` field can be used to explicitly specify the destination node ID,\ninstead of requiring signature recovery.\n\nThe `x` field gives warning as to when a payment will be\nrefused: mainly to avoid confusion. The default was chosen\nto be reasonable for most payments and to allow sufficient time for\non-chain payment, if necessary.\n\nThe `c` field allows a way for the destination node to require a specific\nminimum CLTV expiry for its incoming HTLC. Destination nodes may use this\nto require a higher, more conservative value than the default one (depending\non their fee estimation policy and their sensitivity to time locks). Note\nthat remote nodes in the route specify their required `cltv_expiry_delta`\nin the `channel_update` message, which they can update at all times.\n\nThe `f` field allows on-chain fallback; however, this may not make sense for\ntiny or time-sensitive payments. It's possible that new\naddress forms will appear; thus, multiple `f` fields (in an implied\npreferred order) help with transition, and `f` fields with versions 19-31\nwill be ignored by readers.\n\nThe `r` field allows limited routing assistance: as specified, it only\nallows minimum information to use private channels, however, it could also\nassist in future partial-knowledge routing.\n\n### Security Considerations for Payment Descriptions\n\nPayment descriptions are user-defined and provide a potential avenue for\ninjection attacks: during the processes of both rendering and persistence.\n\nPayment descriptions should always be sanitized before being displayed in\nHTML/Javascript contexts (or any other dynamically interpreted rendering\nframeworks). Implementers should be extra perceptive to the possibility of\nreflected XSS attacks, when decoding and displaying payment descriptions. Avoid\noptimistically rendering the contents of the payment request until all\nvalidation, verification, and sanitization processes have been successfully\ncompleted.\n\nFurthermore, consider using prepared statements, input validation, and/or\nescaping, to protect against injection vulnerabilities in persistence\nengines that support SQL or other dynamically interpreted querying languages.\n\n* [Stored and Reflected XSS Prevention](https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet)\n* [DOM-based XSS Prevention](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet)\n* [SQL Injection Prevention](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)\n\nDon't be like the school of [Little Bobby Tables](https://xkcd.com/327/).\n\n## Feature Bits\n\nFeature bits allow forward and backward compatibility, and follow the\n_it's ok to be odd_ rule.  Features appropriate for use in the `9` field\nare marked in [BOLT 9](09-features.md).\n\nThe field is big-endian.  The least-significant bit is numbered 0,\nwhich is _even_, and the next most significant bit is numbered 1,\nwhich is _odd_.\n\n### Requirements\n\nA writer:\n  - MUST set the `9` field to a feature vector compliant with the\n    [BOLT 9 origin node requirements](09-features.md#requirements).\n\nA reader:\n  - if the feature vector does not set all known, transitive feature dependencies:\n    - MUST NOT attempt the payment.\n  - if the `basic_mpp` feature is offered in the invoice:\n    - MAY pay using [Basic multi-part payments](04-onion-routing.md#basic-multi-part-payments).\n  - otherwise:\n    - MUST NOT use [Basic multi-part payments](04-onion-routing.md#basic-multi-part-payments).\n\n\n# Payer / Payee Interactions\n\nThese are generally defined by the rest of the Lightning BOLT series,\nbut it's worth noting that [BOLT #4](04-onion-routing.md#requirements-2) specifies that the payee SHOULD\naccept up to twice the expected `amount`, so the payer can make\npayments harder to track by adding small variations.\n\nThe intent is that the payer recovers the payee's node ID from the\nsignature, and after checking that conditions such as fees,\nexpiry, and block timeout are acceptable, attempts a payment. It can use `r` fields to\naugment its routing information, if necessary to reach the final node.\n\nIf the payment succeeds but there is a later dispute, the payer can\nprove both the signed offer from the payee and the successful\npayment.\n\n## Payer / Payee Requirements\n\nA payer:\n  - after the `timestamp` plus `expiry` has passed:\n    - SHOULD NOT attempt a payment.\n  - otherwise:\n    - if a Lightning payment fails:\n      - MAY attempt to use the address given in the first `f` field that it\n      understands for payment.\n  - MAY use the sequence of channels, specified by the `r` field, to route to the payee.\n  - SHOULD consider the fee amount and payment timeout before initiating payment.\n  - SHOULD use the first `p` field that it did NOT skip as the payment hash.\n\nA payee:\n  - after the `timestamp` plus `expiry` has passed:\n    - SHOULD NOT accept a payment.\n\n# Implementation\n\nhttps://github.com/rustyrussell/lightning-payencode\n\n# Examples\n\nNB: all the following examples are signed with `priv_key`=`e126f68f7eafcc8b74f54d269fe206be715000f94dac067d1c04a8ca3b2db734`.\nAll invoices contain a `payment_secret`=`1111111111111111111111111111111111111111111111111111111111111111` unless otherwise noted.\n\n> ### Please make a donation of any amount using payment_hash 0001020304050607080900010203040506070809000102030405060708090102 to me @03e7156ae33b0a208d0744199163177e909e80176e55d97a2f221ede0f934dd9ad\n> lnbc1pvjluezsp5zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygspp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqdpl2pkx2ctnv5sxxmmwwd5kgetjypeh2ursdae8g6twvus8g6rfwvs8qun0dfjkxaq9qrsgq357wnc5r2ueh7ck6q93dj32dlqnls087fxdwk8qakdyafkq3yap9us6v52vjjsrvywa6rt52cm9r9zqt8r2t7mlcwspyetp5h2tztugp9lfyql\n\nBreakdown:\n\n* `lnbc`: prefix, Lightning on Bitcoin mainnet\n* `1`: Bech32 separator\n* `pvjluez`: timestamp (1496314658)\n* `s`: payment secret\n  * `p5`: `data_length` (`p` = 1, `5` = 20; 1 * 32 + 20 == 52)\n  * `zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygs`: payment secret 1111111111111111111111111111111111111111111111111111111111111111\n* `p`: payment hash\n  * `p5`: `data_length` (`p` = 1, `5` = 20; 1 * 32 + 20 == 52)\n  * `qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypq`: payment hash 0001020304050607080900010203040506070809000102030405060708090102\n* `d`: short description\n  * `pl`: `data_length` (`p` = 1, `l` = 31; 1 * 32 + 31 == 63)\n  * `2pkx2ctnv5sxxmmwwd5kgetjypeh2ursdae8g6twvus8g6rfwvs8qun0dfjkxaq`: 'Please consider supporting this project'\n* `9`: features\n  * `qr`: `data_length` (`q` = 0, `r` = 3; 0 * 32 + 3 == 3)\n  * `sgq`: b100000100000000\n* `357wnc5r2ueh7ck6q93dj32dlqnls087fxdwk8qakdyafkq3yap9us6v52vjjsrvywa6rt52cm9r9zqt8r2t7mlcwspyetp5h2tztugp`: signature\n* `9lfyql`: Bech32 checksum\n* Signature breakdown:\n  * `8d3ce9e28357337f62da0162d9454df827f83cfe499aeb1c1db349d4d81127425e434ca29929406c23bba1ae8ac6ca32880b38d4bf6ff874024cac34ba9625f1` hex of signature data (32-byte r, 32-byte s)\n  * `1` (int) recovery flag contained in `signature`\n  * `6c6e62630b25fe64500d04444444444444444444444444444444444444444444444444444444444444444021a00008101820283038404800081018202830384048000810182028303840480810343f506c6561736520636f6e736964657220737570706f7274696e6720746869732070726f6a6563740500e08000` hex of data for signing (prefix + data after separator up to the start of the signature)\n  * `6daf4d488be41ce7cbb487cab1ef2975e5efcea879b20d421f0ef86b07cbb987` hex of SHA256 of the preimage\n\n> ### Please send $3 for a cup of coffee to the same peer, within one minute\n> lnbc2500u1pvjluezsp5zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygspp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqdq5xysxxatsyp3k7enxv4jsxqzpu9qrsgquk0rl77nj30yxdy8j9vdx85fkpmdla2087ne0xh8nhedh8w27kyke0lp53ut353s06fv3qfegext0eh0ymjpf39tuven09sam30g4vgpfna3rh\n\nBreakdown:\n\n* `lnbc`: prefix, Lightning on Bitcoin mainnet\n* `2500u`: amount (2500 micro-bitcoin)\n* `1`: Bech32 separator\n* `pvjluez`: timestamp (1496314658)\n* `s`: payment secret...\n* `p`: payment hash...\n* `d`: short description\n  * `q5`: `data_length` (`q` = 0, `5` = 20; 0 * 32 + 20 == 20)\n  * `xysxxatsyp3k7enxv4js`: '1 cup coffee'\n* `x`: expiry time\n  * `qz`: `data_length` (`q` = 0, `z` = 2; 0 * 32 + 2 == 2)\n  * `pu`: 60 seconds (`p` = 1, `u` = 28; 1 * 32 + 28 == 60)\n* `9`: features\n  * `qr`: `data_length` (`q` = 0, `r` = 3; 0 * 32 + 3 == 3)\n  * `sgq`: b100000100000000\n* `uk0rl77nj30yxdy8j9vdx85fkpmdla2087ne0xh8nhedh8w27kyke0lp53ut353s06fv3qfegext0eh0ymjpf39tuven09sam30g4vgp`: signature\n* `fna3rh`: Bech32 checksum\n* Signature breakdown:\n  * `e59e3ffbd3945e4334879158d31e89b076dff54f3fa7979ae79df2db9dcaf5896cbfe1a478b8d2307e92c88139464cb7e6ef26e414c4abe33337961ddc5e8ab1` hex of signature data (32-byte r, 32-byte s)\n  * `1` (int) recovery flag contained in `signature`\n  * `6c6e626332353030750b25fe64500d04444444444444444444444444444444444444444444444444444444444444444021a000081018202830384048000810182028303840480008101820283038404808103414312063757020636f66666565030041e140382000` hex of data for signing (prefix + data after separator up to the start of the signature)\n  * `047e24bf270b25d42a56d57b2578faa3a10684641bab817c2851a871cb41dbc0` hex of SHA256 of the preimage\n\n> ### Please send 0.0025 BTC for a cup of nonsense (ナンセンス 1杯) to the same peer, within one minute\n> lnbc2500u1pvjluezsp5zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygspp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqdpquwpc4curk03c9wlrswe78q4eyqc7d8d0xqzpu9qrsgqhtjpauu9ur7fw2thcl4y9vfvh4m9wlfyz2gem29g5ghe2aak2pm3ps8fdhtceqsaagty2vph7utlgj48u0ged6a337aewvraedendscp573dxr\n\nBreakdown:\n\n* `lnbc`: prefix, Lightning on Bitcoin mainnet\n* `2500u`: amount (2500 micro-bitcoin)\n* `1`: Bech32 separator\n* `pvjluez`: timestamp (1496314658)\n* `s`: payment secret...\n* `p`: payment hash...\n* `d`: short description\n  * `pq`: `data_length` (`p` = 1, `q` = 0; 1 * 32 + 0 == 32)\n  * `uwpc4curk03c9wlrswe78q4eyqc7d8d0`: 'ナンセンス 1杯'\n* `x`: expiry time\n  * `qz`: `data_length` (`q` = 0, `z` = 2; 0 * 32 + 2 == 2)\n  * `pu`: 60 seconds (`p` = 1, `u` = 28; 1 * 32 + 28 == 60)\n* `9`: features\n  * `qr`: `data_length` (`q` = 0, `r` = 3; 0 * 32 + 3 == 3)\n  * `sgq`: b100000100000000\n* `htjpauu9ur7fw2thcl4y9vfvh4m9wlfyz2gem29g5ghe2aak2pm3ps8fdhtceqsaagty2vph7utlgj48u0ged6a337aewvraedendscp`: signature\n* `573dxr`: Bech32 checksum\n* Signature breakdown:\n  * `bae41ef385e0fc972977c7ea42b12cbd76577d2412919da8a8a22f9577b6507710c0e96dd78c821dea16453037f717f44aa7e3d196ebb18fbb97307dcb7336c3` hex of signature data (32-byte r, 32-byte s)\n  * `1` (int) recovery flag contained in `signature`\n  * `6c6e626332353030750b25fe64500d04444444444444444444444444444444444444444444444444444444444444444021a000081018202830384048000810182028303840480008101820283038404808103420e3838ae383b3e382bbe383b3e382b92031e69daf30041e14038200` hex of data for signing (prefix + data after separator up to the start of the signature)\n  * `f140d992ba419578ba9cfe1af85f92df90a76f442fb5e6e09b1f0582534ba87d` hex of SHA256 of the preimage\n\n> ### Now send $24 for an entire list of things (hashed)\n> lnbc20m1pvjluezsp5zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygspp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqhp58yjmdan79s6qqdhdzgynm4zwqd5d7xmw5fk98klysy043l2ahrqs9qrsgq7ea976txfraylvgzuxs8kgcw23ezlrszfnh8r6qtfpr6cxga50aj6txm9rxrydzd06dfeawfk6swupvz4erwnyutnjq7x39ymw6j38gp7ynn44\n\nBreakdown:\n\n* `lnbc`: prefix, Lightning on Bitcoin mainnet\n* `20m`: amount (20 milli-bitcoin)\n* `1`: Bech32 separator\n* `pvjluez`: timestamp (1496314658)\n* `s`: payment secret...\n* `p`: payment hash...\n* `h`: tagged field: hash of description\n  * `p5`: `data_length` (`p` = 1, `5` = 20; 1 * 32 + 20 == 52)\n  * `8yjmdan79s6qqdhdzgynm4zwqd5d7xmw5fk98klysy043l2ahrqs`: SHA256 of 'One piece of chocolate cake, one icecream cone, one pickle, one slice of swiss cheese, one slice of salami, one lollypop, one piece of cherry pie, one sausage, one cupcake, and one slice of watermelon'  (SHA256 hex: `3925b6f67e2c340036ed12093dd44e0368df1b6ea26c53dbe4811f58fd5db8c1`)\n* `9`: features\n  * `qr`: `data_length` (`q` = 0, `r` = 3; 0 * 32 + 3 == 3)\n  * `sgq`: b100000100000000\n* `7ea976txfraylvgzuxs8kgcw23ezlrszfnh8r6qtfpr6cxga50aj6txm9rxrydzd06dfeawfk6swupvz4erwnyutnjq7x39ymw6j38gp`: signature\n* `7ynn44`: Bech32 checksum\n* Signature breakdown:\n  * `f67a5f696648fa4fb102e1a07b230e54722f8e024cee71e80b4847ac191da3fb2d2cdb28cc32344d7e9a9cf5c9b6a0ee0582ae46e9938b9c81e344a4dbb5289d` hex of signature data (32-byte r, 32-byte s)\n  * `1` (int) recovery flag contained in `signature`\n  * `6c6e626332306d0b25fe64500d04444444444444444444444444444444444444444444444444444444444444444021a000081018202830384048000810182028303840480008101820283038404808105c343925b6f67e2c340036ed12093dd44e0368df1b6ea26c53dbe4811f58fd5db8c10280704000` hex of data for signing (prefix + data after separator up to the start of the signature)\n  * `e2ffa444e2979edb639fbdaa384638683ba1a5240b14dd7a150e45a04eea261d` hex of SHA256 of the preimage\n\n> ### The same, on testnet, with a fallback address mk2QpYatsKicvFVuTAQLBryyccRXMUaGHP\n> lntb20m1pvjluezsp5zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygshp58yjmdan79s6qqdhdzgynm4zwqd5d7xmw5fk98klysy043l2ahrqspp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqfpp3x9et2e20v6pu37c5d9vax37wxq72un989qrsgqdj545axuxtnfemtpwkc45hx9d2ft7x04mt8q7y6t0k2dge9e7h8kpy9p34ytyslj3yu569aalz2xdk8xkd7ltxqld94u8h2esmsmacgpghe9k8\n\nBreakdown:\n\n* `lntb`: prefix, Lightning on Bitcoin testnet\n* `20m`: amount (20 milli-bitcoin)\n* `1`: Bech32 separator\n* `pvjluez`: timestamp (1496314658)\n* `h`: tagged field: hash of description...\n* `s`: payment secret...\n* `p`: payment hash...\n* `f`: tagged field: fallback address\n  * `pp`: `data_length` (`p` = 1; 1 * 32 + 1 == 33)\n  * `3` = 17, so P2PKH address\n  * `x9et2e20v6pu37c5d9vax37wxq72un98`: 160-bit P2PKH address\n* `9`: features...\n* `dj545axuxtnfemtpwkc45hx9d2ft7x04mt8q7y6t0k2dge9e7h8kpy9p34ytyslj3yu569aalz2xdk8xkd7ltxqld94u8h2esmsmacgp`: signature\n* `ghe9k8`: Bech32 checksum\n* Signature breakdown:\n  * `6ca95a74dc32e69ced6175b15a5cc56a92bf19f5dace0f134b7d94d464b9f5cf6090a18d48b243f289394d17bdf89466d8e6b37df5981f696bc3dd5986e1bee1` hex of signature data (32-byte r, 32-byte s)\n  * `1` (int) recovery flag contained in `signature`\n  * `6c6e746232306d0b25fe64500d044444444444444444444444444444444444444444444444444444444444444442e1a1c92db7b3f161a001b7689049eea2701b46f8db7513629edf2408fac7eaedc608043400010203040506070809000102030405060708090001020304050607080901020484313172b5654f6683c8fb146959d347ce303cae4ca728070400` hex of data for signing (prefix + data after separator up to the start of the signature)\n  * `33bc6642a336097c74299cadfdfdd2e4884a555cf1b4fda72b095382d473d795` hex of SHA256 of the preimage\n\n> ### On mainnet, with fallback address 1RustyRX2oai4EYYDpQGWvEL62BBGqN9T with extra routing info to go via nodes 029e03a901b85534ff1e92c43c74431f7ce72046060fcf7a95c37e148f78c77255 then 039e03a901b85534ff1e92c43c74431f7ce72046060fcf7a95c37e148f78c77255\n> lnbc20m1pvjluezsp5zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygspp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqhp58yjmdan79s6qqdhdzgynm4zwqd5d7xmw5fk98klysy043l2ahrqsfpp3qjmp7lwpagxun9pygexvgpjdc4jdj85fr9yq20q82gphp2nflc7jtzrcazrra7wwgzxqc8u7754cdlpfrmccae92qgzqvzq2ps8pqqqqqqpqqqqq9qqqvpeuqafqxu92d8lr6fvg0r5gv0heeeqgcrqlnm6jhphu9y00rrhy4grqszsvpcgpy9qqqqqqgqqqqq7qqzq9qrsgqdfjcdk6w3ak5pca9hwfwfh63zrrz06wwfya0ydlzpgzxkn5xagsqz7x9j4jwe7yj7vaf2k9lqsdk45kts2fd0fkr28am0u4w95tt2nsq76cqw0\n\nBreakdown:\n\n* `lnbc`: prefix, Lightning on Bitcoin mainnet\n* `20m`: amount (20 milli-bitcoin)\n* `1`: Bech32 separator\n* `pvjluez`: timestamp (1496314658)\n* `s`: payment secret...\n* `p`: payment hash...\n* `h`: tagged field: hash of description...\n* `f`: tagged field: fallback address\n  * `pp`: `data_length` (`p` = 1; 1 * 32 + 1 == 33)\n  * `3` = 17, so P2PKH address\n  * `qjmp7lwpagxun9pygexvgpjdc4jdj85f`: 160-bit P2PKH address\n* `r`: tagged field: route information\n  * `9y`: `data_length` (`9` = 5, `y` = 4; 5 * 32 + 4 == 164)\n    * `q20q82gphp2nflc7jtzrcazrra7wwgzxqc8u7754cdlpfrmccae92qgzqvzq2ps8pqqqqqqpqqqqq9qqqvpeuqafqxu92d8lr6fvg0r5gv0heeeqgcrqlnm6jhphu9y00rrhy4grqszsvpcgpy9qqqqqqgqqqqq7qqzq`:\n      * pubkey: `029e03a901b85534ff1e92c43c74431f7ce72046060fcf7a95c37e148f78c77255`\n      * `short_channel_id`: 66051x263430x1800\n      * `fee_base_msat`: 1 millisatoshi\n      * `fee_proportional_millionths`: 20\n      * `cltv_expiry_delta`: 3\n      * pubkey: `039e03a901b85534ff1e92c43c74431f7ce72046060fcf7a95c37e148f78c77255`\n      * `short_channel_id`: 197637x395016x2314\n      * `fee_base_msat`: 2 millisatoshi\n      * `fee_proportional_millionths`: 30\n      * `cltv_expiry_delta`: 4\n* `9`: features...\n* `dfjcdk6w3ak5pca9hwfwfh63zrrz06wwfya0ydlzpgzxkn5xagsqz7x9j4jwe7yj7vaf2k9lqsdk45kts2fd0fkr28am0u4w95tt2nsq`: signature\n* `76cqw0`: Bech32 checksum\n* Signature breakdown:\n  * `6a6586db4e8f6d40e3a5bb92e4df5110c627e9ce493af237e20a046b4e86ea200178c59564ecf892f33a9558bf041b6ad2cb8292d7a6c351fbb7f2ae2d16b54e` hex of signature data (32-byte r, 32-byte s)\n  * `0` (int) recovery flag contained in `signature`\n  * `6c6e626332306d0b25fe64500d04444444444444444444444444444444444444444444444444444444444444444021a000081018202830384048000810182028303840480008101820283038404808105c343925b6f67e2c340036ed12093dd44e0368df1b6ea26c53dbe4811f58fd5db8c104843104b61f7dc1ea0dc99424464cc4064dc564d91e891948053c07520370aa69fe3d258878e8863ef9ce408c0c1f9ef52b86fc291ef18ee4aa020406080a0c0e1000000002000000280006073c07520370aa69fe3d258878e8863ef9ce408c0c1f9ef52b86fc291ef18ee4aa06080a0c0e101214000000040000003c00080500e08000` hex of data for signing (prefix + data after separator up to the start of the signature)\n  * `b342d4655b984e53f405fe4d872fb9b7cf54ba538fcd170ed4a5906a9f535064` hex of SHA256 of the preimage\n\n> ### On mainnet, with fallback (P2SH) address 3EktnHQD7RiAE6uzMj2ZifT9YgRrkSgzQX\n> lnbc20m1pvjluezsp5zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygshp58yjmdan79s6qqdhdzgynm4zwqd5d7xmw5fk98klysy043l2ahrqspp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqfppj3a24vwu6r8ejrss3axul8rxldph2q7z99qrsgqz6qsgww34xlatfj6e3sngrwfy3ytkt29d2qttr8qz2mnedfqysuqypgqex4haa2h8fx3wnypranf3pdwyluftwe680jjcfp438u82xqphf75ym\n\nBreakdown:\n\n* `lnbc`: prefix, Lightning on Bitcoin mainnet\n* `20m`: amount (20 milli-bitcoin)\n* `1`: Bech32 separator\n* `pvjluez`: timestamp (1496314658)\n* `s`: payment secret...\n* `h`: tagged field: hash of description...\n* `p`: payment hash...\n* `f`: tagged field: fallback address\n  * `pp`: `data_length` (`p` = 1; 1 * 32 + 1 == 33)\n  * `j` = 18, so P2SH address\n  * `3a24vwu6r8ejrss3axul8rxldph2q7z9`:  160-bit P2SH address\n* `9`: features...\n* `z6qsgww34xlatfj6e3sngrwfy3ytkt29d2qttr8qz2mnedfqysuqypgqex4haa2h8fx3wnypranf3pdwyluftwe680jjcfp438u82xqp`: signature\n* `hf75ym`: Bech32 checksum\n* Signature breakdown:\n  * `16810439d1a9bfd5a65acc61340dc92448bb2d456a80b58ce012b73cb5202438020500c9ab7ef5573a4d174c811f669885ae27f895bb3a3be52c243589f87518` hex of signature data (32-byte r, 32-byte s)\n  * `1` (int) recovery flag contained in `signature`\n  * `6c6e626332306d0b25fe64500d044444444444444444444444444444444444444444444444444444444444444442e1a1c92db7b3f161a001b7689049eea2701b46f8db7513629edf2408fac7eaedc608043400010203040506070809000102030405060708090001020304050607080901020484328f55563b9a19f321c211e9b9f38cdf686ea0784528070400` hex of data for signing (prefix + data after separator up to the start of the signature)\n  * `9e93321a775f7dffdca03e61d1ac6e0e356cc63cecd3835271200c1e5b499d29` hex of SHA256 of the preimage\n\n> ### On mainnet, with fallback (P2WPKH) address bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4\n> lnbc20m1pvjluezsp5zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygshp58yjmdan79s6qqdhdzgynm4zwqd5d7xmw5fk98klysy043l2ahrqspp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqfppqw508d6qejxtdg4y5r3zarvary0c5xw7k9qrsgqt29a0wturnys2hhxpner2e3plp6jyj8qx7548zr2z7ptgjjc7hljm98xhjym0dg52sdrvqamxdezkmqg4gdrvwwnf0kv2jdfnl4xatsqmrnsse\n\n* `lnbc`: prefix, Lightning on Bitcoin mainnet\n* `20m`: amount (20 milli-bitcoin)\n* `1`: Bech32 separator\n* `pvjluez`: timestamp (1496314658)\n* `s`: payment secret...\n* `h`: tagged field: hash of description...\n* `p`: payment hash...\n* `f`: tagged field: fallback address\n  * `pp`: `data_length` (`p` = 1; 1 * 32 + 1 == 33)\n  * `q`: 0, so witness version 0\n  * `w508d6qejxtdg4y5r3zarvary0c5xw7k`: 160 bits = P2WPKH.\n* `9`: features...\n* `t29a0wturnys2hhxpner2e3plp6jyj8qx7548zr2z7ptgjjc7hljm98xhjym0dg52sdrvqamxdezkmqg4gdrvwwnf0kv2jdfnl4xatsq`: signature\n* `mrnsse`: Bech32 checksum\n* Signature breakdown:\n  * `5a8bd7b97c1cc9055ee60cf2356621f8752248e037a953886a1782b44a58f5ff2d94e6bc89b7b514541a3603bb33722b6c08aa1a3639d34becc549a99fea6eae` hex of signature data (32-byte r, 32-byte s)\n  * `0` (int) recovery flag contained in `signature`\n  * `6c6e626332306d0b25fe64500d044444444444444444444444444444444444444444444444444444444444444442e1a1c92db7b3f161a001b7689049eea2701b46f8db7513629edf2408fac7eaedc60804340001020304050607080900010203040506070809000102030405060708090102048420751e76e8199196d454941c45d1b3a323f1433bd628070400` hex of data for signing (prefix + data after separator up to the start of the signature)\n  * `44fbec32cdac99a1a3cd638ec507dad633a1e5bba514832fd3471e663a157f7b` hex of SHA256 of the preimage\n\n> ### On mainnet, with fallback (P2WSH) address bc1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3qccfmv3\n> lnbc20m1pvjluezsp5zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygshp58yjmdan79s6qqdhdzgynm4zwqd5d7xmw5fk98klysy043l2ahrqspp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqfp4qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q9qrsgq9vlvyj8cqvq6ggvpwd53jncp9nwc47xlrsnenq2zp70fq83qlgesn4u3uyf4tesfkkwwfg3qs54qe426hp3tz7z6sweqdjg05axsrjqp9yrrwc\n\n* `lnbc`: prefix, Lightning on Bitcoin mainnet\n* `20m`: amount (20 milli-bitcoin)\n* `1`: Bech32 separator\n* `pvjluez`: timestamp (1496314658)\n* `s`: payment secret...\n* `h`: tagged field: hash of description...\n* `p`: payment hash...\n* `f`: tagged field: fallback address\n  * `p4`: `data_length` (`p` = 1, `4` = 21; 1 * 32 + 21 == 53)\n  * `q`: 0, so witness version 0\n  * `rp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q`: 260 bits = P2WSH.\n* `9`: features...\n* `9vlvyj8cqvq6ggvpwd53jncp9nwc47xlrsnenq2zp70fq83qlgesn4u3uyf4tesfkkwwfg3qs54qe426hp3tz7z6sweqdjg05axsrjqp`: signature\n* `9yrrwc`: Bech32 checksum\n* Signature breakdown:\n  * `2b3ec248f80301a421817369194f012cdd8af8df1c279981420f9e901e20fa3309d791e11355e609b59ce4a220852a0cd55ab862b1785a83b206c90fa74d01c8` hex of signature data (32-byte r, 32-byte s)\n  * `1` (int) recovery flag contained in `signature`\n  * `6c6e626332306d0b25fe64500d044444444444444444444444444444444444444444444444444444444444444442e1a1c92db7b3f161a001b7689049eea2701b46f8db7513629edf2408fac7eaedc608043400010203040506070809000102030405060708090001020304050607080901020486a01863143c14c5166804bd19203356da136c985678cd4d27a1b8c63296049032620280704000` hex of data for signing (prefix + data after separator up to the start of the signature)\n  * `865a2cc6730e1eeeacd30e6da8e9ab0e9115828d27953ec0c0f985db05da5027` hex of SHA256 of the preimage\n\n> ### Please send 0.00967878534 BTC for a list of items within one week, amount in pico-BTC\n> lnbc9678785340p1pwmna7lpp5gc3xfm08u9qy06djf8dfflhugl6p7lgza6dsjxq454gxhj9t7a0sd8dgfkx7cmtwd68yetpd5s9xar0wfjn5gpc8qhrsdfq24f5ggrxdaezqsnvda3kkum5wfjkzmfqf3jkgem9wgsyuctwdus9xgrcyqcjcgpzgfskx6eqf9hzqnteypzxz7fzypfhg6trddjhygrcyqezcgpzfysywmm5ypxxjemgw3hxjmn8yptk7untd9hxwg3q2d6xjcmtv4ezq7pqxgsxzmnyyqcjqmt0wfjjq6t5v4khxsp5zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygsxqyjw5qcqp2rzjq0gxwkzc8w6323m55m4jyxcjwmy7stt9hwkwe2qxmy8zpsgg7jcuwz87fcqqeuqqqyqqqqlgqqqqn3qq9q9qrsgqrvgkpnmps664wgkp43l22qsgdw4ve24aca4nymnxddlnp8vh9v2sdxlu5ywdxefsfvm0fq3sesf08uf6q9a2ke0hc9j6z6wlxg5z5kqpu2v9wz\n\nBreakdown:\n\n* `lnbc`: prefix, Lightning on bitcoin mainnet\n* `9678785340p`: amount (9678785340 pico-bitcoin = 967878534 milli satoshi)\n* `1`: Bech32 separator\n* `pwmna7l`: timestamp (1572468703)\n* `s`: payment secret...\n* `p`: payment hash\n  * `p5`: `data_length` (`p` = 1, `5` = 20; 1 * 32 + 20 == 52)\n  * `gc3xfm08u9qy06djf8dfflhugl6p7lgza6dsjxq454gxhj9t7a0s`: payment hash 462264ede7e14047e9b249da94fefc47f41f7d02ee9b091815a5506bc8abf75f\n* `d`: short description\n  * `8d`: `data_length` (`8` = 7, `d` = 13; 7 * 32 + 13 == 237)\n  * `gfkx7cmtwd68yetpd5s9xar0wfjn5gpc8qhrsdfq24f5ggrxdaezqsnvda3kkum5wfjkzmfqf3jkgem9wgsyuctwdus9xgrcyqcjcgpzgfskx6eqf9hzqnteypzxz7fzypfhg6trddjhygrcyqezcgpzfysywmm5ypxxjemgw3hxjmn8yptk7untd9hxwg3q2d6xjcmtv4ezq7pqxgsxzmnyyqcjqmt0wfjjq6t5v4khx`: 'Blockstream Store: 88.85 USD for Blockstream Ledger Nano S x 1, \\\"Back In My Day\\\" Sticker x 2, \\\"I Got Lightning Working\\\" Sticker x 2 and 1 more items'\n* `x`: expiry time\n  * `qy`: `data_length` (`q` = 0, `y` = 2; 0 * 32 + 4 == 4)\n  * `jw5q`: 604800 seconds (`j` = 18, `w` = 14, `5` = 20, `q` = 0; 18 * 32^3 + 14 * 32^2 + 20 * 32 + 0 == 604800)\n* `c`: `min_final_cltv_expiry_delta`\n  * `qp`: `data_length` (`q` = 0, `p` = 1; 0 * 32 + 1 == 1)\n  * `2`: min_final_cltv_expiry_delta = 10\n* `r`: tagged field: route information\n  * `zj`: `data_length` (`z` = 2, `j` = 18; 2 * 32 + 18 == 82)\n  * `q0gxwkzc8w6323m55m4jyxcjwmy7stt9hwkwe2qxmy8zpsgg7jcuwz87fcqqeuqqqyqqqqlgqqqqn3qq9q`:\n    * pubkey: 03d06758583bb5154774a6eb221b1276c9e82d65bbaceca806d90e20c108f4b1c7\n    * short_channel_id: 589390x3312x1\n    * fee_base_msat = 1000\n    * fee_proportional_millionths = 2500\n    * cltv_expiry_delta = 40\n* `9`: features...\n* `rvgkpnmps664wgkp43l22qsgdw4ve24aca4nymnxddlnp8vh9v2sdxlu5ywdxefsfvm0fq3sesf08uf6q9a2ke0hc9j6z6wlxg5z5kqp`: signature\n* `u2v9wz`: Bech32 checksum\n\n> ### Please send $30 for coffee beans to the same peer, which supports features 8, 14 and 99, using secret 0x1111111111111111111111111111111111111111111111111111111111111111\n> lnbc25m1pvjluezpp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqdq5vdhkven9v5sxyetpdeessp5zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygs9q5sqqqqqqqqqqqqqqqqsgq2a25dxl5hrntdtn6zvydt7d66hyzsyhqs4wdynavys42xgl6sgx9c4g7me86a27t07mdtfry458rtjr0v92cnmswpsjscgt2vcse3sgpz3uapa\n\nBreakdown:\n\n* `lnbc`: prefix, Lightning on Bitcoin mainnet\n* `25m`: amount (25 milli-bitcoin)\n* `1`: Bech32 separator\n* `pvjluez`: timestamp (1496314658)\n* `p`: payment hash...\n* `d`: short description\n  * `q5`: `data_length` (`q` = 0, `5` = 20; 0 * 32 + 20 == 20)\n  * `vdhkven9v5sxyetpdees`: 'coffee beans'\n* `s`: payment secret\n  * `p5`: `data_length` (`p` = 1, `5` = 20; 1 * 32 + 20 == 52)\n  * `zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygs`: 0x1111111111111111111111111111111111111111111111111111111111111111\n* `9`: features\n  * `q5`: `data_length` (`q` = 0, `5` = 20; 0 * 32 + 20 == 20)\n  * `sqqqqqqqqqqqqqqqqsgq`: b1000....00000100000100000000\n* `2a25dxl5hrntdtn6zvydt7d66hyzsyhqs4wdynavys42xgl6sgx9c4g7me86a27t07mdtfry458rtjr0v92cnmswpsjscgt2vcse3sgp`: signature\n* `z3uapa`: Bech32 checksum\n\n> ### Same, but all upper case.\n> LNBC25M1PVJLUEZPP5QQQSYQCYQ5RQWZQFQQQSYQCYQ5RQWZQFQQQSYQCYQ5RQWZQFQYPQDQ5VDHKVEN9V5SXYETPDEESSP5ZYG3ZYG3ZYG3ZYG3ZYG3ZYG3ZYG3ZYG3ZYG3ZYG3ZYG3ZYG3ZYGS9Q5SQQQQQQQQQQQQQQQQSGQ2A25DXL5HRNTDTN6ZVYDT7D66HYZSYHQS4WDYNAVYS42XGL6SGX9C4G7ME86A27T07MDTFRY458RTJR0V92CNMSWPSJSCGT2VCSE3SGPZ3UAPA\n\n> ### Same, but including fields which must be ignored.\n> lnbc25m1pvjluezpp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqdq5vdhkven9v5sxyetpdeessp5zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygs9q5sqqqqqqqqqqqqqqqqsgq2qrqqqfppnqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqppnqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpp4qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqhpnqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqhp4qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqspnqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqsp4qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqnp5qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqnpkqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqz599y53s3ujmcfjp5xrdap68qxymkqphwsexhmhr8wdz5usdzkzrse33chw6dlp3jhuhge9ley7j2ayx36kawe7kmgg8sv5ugdyusdcqzn8z9x\n\nBreakdown:\n\n* `lnbc`: prefix, Lightning on Bitcoin mainnet\n* `25m`: amount (25 milli-bitcoin)\n* `1`: Bech32 separator\n* `pvjluez`: timestamp (1496314658)\n* `p`: payment hash...\n* `d`: short description\n  * `q5`: `data_length` (`q` = 0, `5` = 20; 0 * 32 + 20 == 20)\n  * `vdhkven9v5sxyetpdees`: 'coffee beans'\n* `s`: payment secret\n  * `p5`: `data_length` (`p` = 1, `5` = 20; 1 * 32 + 20 == 52)\n  * `zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygs`: 0x1111111111111111111111111111111111111111111111111111111111111111\n* `9`: features\n  * `q5`: `data_length` (`q` = 0, `5` = 20; 0 * 32 + 20 == 20)\n  * `sqqqqqqqqqqqqqqqqsgq`: b1000....00000100000100000000\n* `2`: unknown field\n  * `qr`: `data_length` (`q` = 0, `r` = 3; 0 * 32 + 3 == 3)\n  * `qqq`: zeroes\n* `f`: tagged field: fallback address\n  * `pp`: `data_length` (`p` = 1, `p` = 1; 1 * 32 + 1 == 33)\n  * `nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq`: fallback address type 19 (ignored)\n* `p`: payment hash\n  * `pn`: `data_length` (`p` = 1, `n` = 19; 1 * 32 + 19 == 51) (ignored)\n  * `qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq`\n* `p`: payment hash\n  * `p4`: `data_length` (`p` = 1, `4` = 21; 1 * 32 + 21 == 53) (ignored)\n  * `qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq`\n* `h`: hash of description\n  * `pn`: `data_length` (`p` = 1, `n` = 19; 1 * 32 + 19 == 51) (ignored)\n  * `qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq`\n* `h`: hash of description\n  * `p4`: `data_length` (`p` = 1, `4` = 21; 1 * 32 + 21 == 53) (ignored)\n  * `qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq`\n* `s`: payment secret\n  * `pn`: `data_length` (`p` = 1, `n` = 19; 1 * 32 + 19 == 51) (ignored)\n  * `qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq`\n* `s`: payment secret\n  * `p4`: `data_length` (`p` = 1, `4` = 21; 1 * 32 + 21 == 53) (ignored)\n  * `qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq`\n* `n`: node id\n  * `p5`: `data_length` (`p` = 1, `5` = 20; 1 * 32 + 20 == 52) (ignored)\n  * `qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq`\n* `n`: node id\n  * `pk`: `data_length` (`p` = 1, `k` = 22; 1 * 32 + 22 == 54) (ignored)\n  * `qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq`\n* `z599y53s3ujmcfjp5xrdap68qxymkqphwsexhmhr8wdz5usdzkzrse33chw6dlp3jhuhge9ley7j2ayx36kawe7kmgg8sv5ugdyusdcq`: signature\n* `zn8z9x`: Bech32 checksum\n\n> ### Please send 0.01 BTC with payment metadata 0x01fafaf0\n> lnbc10m1pvjluezpp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqdp9wpshjmt9de6zqmt9w3skgct5vysxjmnnd9jx2mq8q8a04uqsp5zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygs9q2gqqqqqqsgq7hf8he7ecf7n4ffphs6awl9t6676rrclv9ckg3d3ncn7fct63p6s365duk5wrk202cfy3aj5xnnp5gs3vrdvruverwwq7yzhkf5a3xqpd05wjc\n\nBreakdown:\n\n* `lnbc`: prefix, Lightning on Bitcoin mainnet\n* `10m`: amount (10 milli-bitcoin)\n* `1`: Bech32 separator\n* `pvjluez`: timestamp (1496314658)\n* `p`: payment hash\n  * `p5`: `data_length` (`p` = 1, `5` = 20; 1 * 32 + 20 == 52)\n  * `qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypq`: payment hash 0001020304050607080900010203040506070809000102030405060708090102\n* `d`: short description\n  * `p9`: `data_length` (`p` = 1, `9` = 5; 1 * 32 + 5 == 37)\n  * `wpshjmt9de6zqmt9w3skgct5vysxjmnnd9jx2`: 'payment metadata inside'\n* `m`: metadata\n  * `q8`: `data_length` (`q` = 0, `8` = 7; 0 * 32 + 7 == 7)\n  * `q8a04uq`: 0x01fafaf0\n* `s`: payment secret\n  * `p5`: `data_length` (`p` = 1, `5` = 20; 1 * 32 + 20 == 52)\n  * `zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygs`: 0x1111111111111111111111111111111111111111111111111111111111111111\n* `9`: features\n  * `q2`: `data_length` (`q` = 0, `2` = 10; 0 * 32 + 10 == 10)\n  * `gqqqqqqsgq`: [b01000000000000000000000000000000000100000100000000] = 8 + 14 + 48\n* `7hf8he7ecf7n4ffphs6awl9t6676rrclv9ckg3d3ncn7fct63p6s365duk5wrk202cfy3aj5xnnp5gs3vrdvruverwwq7yzhkf5a3xqp`: signature\n* `d05wjc`: Bech32 checksum\n\n# Examples of Invalid Invoices\n\n> # Same, but adding invalid unknown feature 100\n> lnbc25m1pvjluezpp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqdq5vdhkven9v5sxyetpdeessp5zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygs9q4psqqqqqqqqqqqqqqqqsgqtqyx5vggfcsll4wu246hz02kp85x4katwsk9639we5n5yngc3yhqkm35jnjw4len8vrnqnf5ejh0mzj9n3vz2px97evektfm2l6wqccp3y7372\n\nBreakdown:\n\n* `lnbc`: prefix, Lightning on Bitcoin mainnet\n* `25m`: amount (25 milli-bitcoin)\n* `1`: Bech32 separator\n* `pvjluez`: timestamp (1496314658)\n* `p`: payment hash...\n* `d`: short description\n  * `q5`: `data_length` (`q` = 0, `5` = 20; 0 * 32 + 20 == 20)\n  * `vdhkven9v5sxyetpdees`: 'coffee beans'\n* `s`: payment secret\n  * `p5`: `data_length` (`p` = 1, `5` = 20; 1 * 32 + 20 == 52)\n  * `zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygs`: 0x1111111111111111111111111111111111111111111111111111111111111111\n* `9`: features\n  * `q4`: `data_length` (`q` = 0, `4` = 21; 0 * 32 + 21 == 21)\n  * `psqqqqqqqqqqqqqqqqsgq`: b000011000....00000100000100000000\n* `tqyx5vggfcsll4wu246hz02kp85x4katwsk9639we5n5yngc3yhqkm35jnjw4len8vrnqnf5ejh0mzj9n3vz2px97evektfm2l6wqccp`: signature\n* `3y7372`: Bech32 checksum\n\n> ### Bech32 checksum is invalid.\n> lnbc2500u1pvjluezpp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqdpquwpc4curk03c9wlrswe78q4eyqc7d8d0xqzpuyk0sg5g70me25alkluzd2x62aysf2pyy8edtjeevuv4p2d5p76r4zkmneet7uvyakky2zr4cusd45tftc9c5fh0nnqpnl2jfll544esqchsrnt\n\n> ### Malformed bech32 string (no 1)\n> pvjluezpp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqdpquwpc4curk03c9wlrswe78q4eyqc7d8d0xqzpuyk0sg5g70me25alkluzd2x62aysf2pyy8edtjeevuv4p2d5p76r4zkmneet7uvyakky2zr4cusd45tftc9c5fh0nnqpnl2jfll544esqchsrny\n\n> ### Malformed bech32 string (mixed case)\n> LNBC2500u1pvjluezpp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqdpquwpc4curk03c9wlrswe78q4eyqc7d8d0xqzpuyk0sg5g70me25alkluzd2x62aysf2pyy8edtjeevuv4p2d5p76r4zkmneet7uvyakky2zr4cusd45tftc9c5fh0nnqpnl2jfll544esqchsrny\n\n> ### Signature is not recoverable.\n> lnbc2500u1pvjluezpp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqdq5xysxxatsyp3k7enxv4jsxqzpusp5zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygs9qrsgqwgt7mcn5yqw3yx0w94pswkpq6j9uh6xfqqqtsk4tnarugeektd4hg5975x9am52rz4qskukxdmjemg92vvqz8nvmsye63r5ykel43pgz7zq0g2\n\n> ### String is too short.\n> lnbc1pvjluezpp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqdpl2pkx2ctnv5sxxmmwwd5kgetjypeh2ursdae8g6na6hlh\n\n> ### Invalid multiplier\n> lnbc2500x1pvjluezpp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqdq5xysxxatsyp3k7enxv4jsxqzpusp5zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygs9qrsgqrrzc4cvfue4zp3hggxp47ag7xnrlr8vgcmkjxk3j5jqethnumgkpqp23z9jclu3v0a7e0aruz366e9wqdykw6dxhdzcjjhldxq0w6wgqcnu43j\n\n> ### Invalid sub-millisatoshi precision.\n> lnbc2500000001p1pvjluezpp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqdq5xysxxatsyp3k7enxv4jsxqzpusp5zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3zygs9qrsgq0lzc236j96a95uv0m3umg28gclm5lqxtqqwk32uuk4k6673k6n5kfvx3d2h8s295fad45fdhmusm8sjudfhlf6dcsxmfvkeywmjdkxcp99202x\n\n# Authors\n\n[ FIXME: ]\n\n![Creative Commons License](https://i.creativecommons.org/l/by/4.0/88x31.png \"License CC-BY\")\n<br>\nThis work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).\n"
        },
        {
          "name": "12-offer-encoding.md",
          "type": "blob",
          "size": 39.9306640625,
          "content": "# BOLT #12: Flexible Protocol for Lightning Payments\n\n# Table of Contents\n\n  * [Limitations of BOLT 11](#limitations-of-bolt-11)\n  * [Payment Flow Scenarios](#payment-flow-scenarios)\n  * [Encoding](#encoding)\n  * [Signature calculation](#signature-calculation)\n  * [Offers](#offers)\n  * [Invoice Requests](#invoice-requests)\n  * [Invoices](#invoices)\n  * [Invoice Errors](#invoice-errors)\n\n# Limitations of BOLT 11\n\nThe BOLT 11 invoice format has proven popular but has several\nlimitations:\n\n1. The entangling of bech32 encoding makes it awkward to send\n   in other forms (e.g. inside the lightning network itself).\n2. The signature applying to the entire invoice makes it impossible\n   to prove an invoice without revealing its entirety.\n3. Fields cannot generally be extracted for external use: the `h`\n   field was a boutique extraction of the `d` field only.\n4. The lack of the 'it's OK to be odd' rule makes backward compatibility\n   harder.\n5. The 'human-readable' idea of separating amounts proved fraught:\n   `p` was often mishandled, and amounts in pico-bitcoin are harder\n   than the modern satoshi-based counting.\n6. Developers found the bech32 encoding to have an issue with extensions,\n   which means we want to replace or discard it anyway.\n7. The `payment_secret` designed to prevent probing by other nodes in\n   the path was only useful if the invoice remained private between the\n   payer and payee.\n8. Invoices must be given per user and are actively dangerous if two\n   payment attempts are made for the same user.\n\n\n# Payment Flow Scenarios\n\nHere we use \"user\" as shorthand for the individual user's lightning\nnode and \"merchant\" as the shorthand for the node of someone who is\nselling or has sold something.\n\nThere are two basic payment flows supported by BOLT 12:\n\nThe general user-pays-merchant flow is:\n1. A merchant publishes an *offer*, such as on a web page or a QR code.\n2. Every user requests a unique *invoice* over the lightning network\n   using an *invoice_request* message, which contains the offer fields.\n3. The merchant replies with the *invoice*.\n4. The user makes a payment to the merchant as indicated by the invoice.\n\nThe merchant-pays-user flow (e.g. ATM or refund):\n1. The merchant publishes an *invoice_request* which includes an amount it wishes to send to the user.\n2. The user sends an *invoice* over the lightning network for the amount in the\n   *invoice_request*, using a (possibly temporary) *invoice_node_id*.\n3. The merchant confirms the *invoice_node_id* to ensure it's about to pay the correct\n   person, and makes a payment to the invoice.\n\n## Payment Proofs and Payer Proofs\n\nNote that the normal lightning \"proof of payment\" can only demonstrate that an\ninvoice was paid (by showing the preimage of the `payment_hash`), not who paid\nit.  The merchant can claim an invoice was paid, and once revealed, anyone can\nclaim they paid the invoice, too.[1]\n\nProviding a key in *invoice_request* allows the payer to prove that they were the one\nto request the invoice.  In addition, the Merkle construction of the BOLT 12\ninvoice signature allows the user to reveal invoice fields in case\nof a dispute selectively.\n\n# Encoding\n\nEach of the forms documented here are in\n[TLV](01-messaging.md#type-length-value-format) format.\n\nThe supported ASCII encoding is the human-readable prefix, followed by a\n`1`, followed by a bech32-style data string of the TLVs in order,\noptionally interspersed with `+` (for indicating additional data is to\ncome).  There is no checksum, unlike bech32m.\n\n## Requirements\n\nWriters of a bolt12 string:\n- MUST either use all lowercase or all UPPERCASE.\n- SHOULD use uppercase for QR codes.\n- SHOULD use lower case otherwise.\n- MAY use `+`, optionally followed by whitespace, to separate large bolt12 strings.\n\nReaders of a bolt12 string:\n- MUST handle strings which are all lowercase, or all uppercase.\n- if it encounters a `+` followed by zero or more whitespace characters between \n  two bech32 characters:\n  - MUST remove the `+` and whitespace.\n\n## Rationale\n\nThe use of bech32 is arbitrary but already exists in the bitcoin\nworld.  We currently omit the six-character trailing checksum: QR\ncodes have their own checksums anyway, and errors don't result in loss\nof funds, simply an invalid offer (or inability to parse).\n\nThe use of `+` (which is ignored) allows use over limited\ntext fields like Twitter:\n\n```\nlno1xxxxxxxx+\n\nyyyyyyyyyyyy+\n\nzzzzz\n```\n\nSee [format-string-test.json](bolt12/format-string-test.json).\n\n# Signature Calculation\n\nAll signatures are created as per\n[BIP-340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki)\nand tagged as recommended there.  Thus we define H(`tag`,`msg`) as\nSHA256(SHA256(`tag`) || SHA256(`tag`) || `msg`), and SIG(`tag`,`msg`,`key`)\nas the signature of H(`tag`,`msg`) using `key`.\n\nEach form is signed using one or more *signature TLV elements*: TLV\ntypes 240 through 1000 (inclusive).  For these,\nthe tag is \"lightning\" || `messagename` || `fieldname`, and `msg` is the\nMerkle-root; \"lightning\" is the literal 9-byte ASCII string,\n`messagename` is the name of the TLV stream being signed (i.e. \"invoice_request\" or \"invoice\") and the `fieldname` is the TLV field containing the\nsignature (e.g. \"signature\").\n\nThe formulation of the Merkle tree is similar to that proposed in\n[BIP-341](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki),\nwith each TLV leaf paired with a nonce leaf to avoid\nrevealing adjacent nodes in proofs.\n\nThe Merkle tree's leaves are, in TLV-ascending order for each tlv:\n1. The H(\"LnLeaf\",tlv).\n2. The H(\"LnNonce\"||first-tlv,tlv-type) where first-tlv is the numerically-first TLV entry in the stream, and tlv-type is the \"type\" field (1-9 bytes) of the current tlv.\n\nThe Merkle tree inner nodes are H(\"LnBranch\", lesser-SHA256||greater-SHA256);\nthis ordering means proofs are more compact since left/right is\ninherently determined.\n\nIf there is not exactly a power of 2 leaves, then the tree depth will\nbe uneven, with the deepest tree on the lowest-order leaves.\n\ne.g. consider the encoding of an `invoice` `signature` with TLVs TLV0, TLV1, and TLV2 (of types 0, 1, and 2 respectively):\n\n```\nL1=H(\"LnLeaf\",TLV0)\nL1nonce=H(\"LnNonce\"||TLV0,0)\nL2=H(\"LnLeaf\",TLV1)\nL2nonce=H(\"LnNonce\"||TLV0,1)\nL3=H(\"LnLeaf\",TLV2)\nL3nonce=H(\"LnNonce\"||TLV0,2)\n\nAssume L1 < L1nonce, L2 > L2nonce and L3 > L3nonce.\n\n   L1    L1nonce                      L2   L2nonce                L3   L3nonce\n     \\   /                             \\   /                       \\   /\n      v v                               v v                         v v\nL1A=H(\"LnBranch\",L1||L1nonce) L2A=H(\"LnBranch\",L2nonce||L2)  L3A=H(\"LnBranch\",L3nonce||L3)\n                 \nAssume L1A < L2A:\n\n       L1A   L2A                                 L3A=H(\"LnBranch\",L3nonce||L3)\n         \\   /                                    |\n          v v                                     v\n  L1A2A=H(\"LnBranch\",L1A||L2A)                   L3A=H(\"LnBranch\",L3nonce||L3)\n  \nAssume L1A2A > L3A:\n\n  L1A2A=H(\"LnBranch\",L1A||L2A)          L3A\n                          \\            /\n                           v          v\n                Root=H(\"LnBranch\",L3A||L1A2A)\n\nSignature = SIG(\"lightninginvoicesignature\", Root, nodekey)\n```\n\n# Offers\n\nOffers are a precursor to an invoice_request: readers will request an invoice\n(or multiple) based on the offer.  An offer can be much longer-lived than a\nparticular invoice, so it has some different characteristics; in particular the amount can be in a non-lightning currency.  It's\nalso designed for compactness to fit inside a QR code easily.\n\nNote that the non-signature TLV elements get mirrored into\ninvoice_request and invoice messages, so they each have specific and\ndistinct TLV ranges.\n\nThe human-readable prefix for offers is `lno`.\n\n## TLV Fields for Offers\n\n1. `tlv_stream`: `offer`\n2. types:\n    1. type: 2 (`offer_chains`)\n    2. data:\n        * [`...*chain_hash`:`chains`]\n    1. type: 4 (`offer_metadata`)\n    2. data:\n        * [`...*byte`:`data`]\n    1. type: 6 (`offer_currency`)\n    2. data:\n        * [`...*utf8`:`iso4217`]\n    1. type: 8 (`offer_amount`)\n    2. data:\n        * [`tu64`:`amount`]\n    1. type: 10 (`offer_description`)\n    2. data:\n        * [`...*utf8`:`description`]\n    1. type: 12 (`offer_features`)\n    2. data:\n        * [`...*byte`:`features`]\n    1. type: 14 (`offer_absolute_expiry`)\n    2. data:\n        * [`tu64`:`seconds_from_epoch`]\n    1. type: 16 (`offer_paths`)\n    2. data:\n        * [`...*blinded_path`:`paths`]\n    1. type: 18 (`offer_issuer`)\n    2. data:\n        * [`...*utf8`:`issuer`]\n    1. type: 20 (`offer_quantity_max`)\n    2. data:\n        * [`tu64`:`max`]\n    1. type: 22 (`offer_issuer_id`)\n    2. data:\n        * [`point`:`id`]\n\n## Requirements For Offers\n\nA writer of an offer:\n  - MUST NOT set any TLV fields outside the inclusive ranges: 1 to 79 and 1000000000 to 1999999999.\n  - if the chain for the invoice is not solely bitcoin:\n    - MUST specify `offer_chains` the offer is valid for.\n  - otherwise:\n    - SHOULD omit `offer_chains`, implying that bitcoin is only chain.\n  - if a specific minimum `offer_amount` is required for successful payment:\n    - MUST set `offer_amount` to the amount expected (per item).\n    - if the currency for `offer_amount` is that of all entries in `chains`:\n      - MUST specify `offer_amount` in multiples of the minimum lightning-payable unit\n        (e.g. milli-satoshis for bitcoin).\n    - otherwise:\n      - MUST specify `offer_currency` `iso4217` as an ISO 4217 three-letter code.\n      - MUST specify `offer_amount` in the currency unit adjusted by the ISO 4217\n        exponent (e.g. USD cents).\n    - MUST set `offer_description` to a complete description of the purpose\n      of the payment.\n  - otherwise:\n    - MUST NOT set `offer_amount`\n    - MUST NOT set `offer_currency`\n    - MAY set `offer_description`\n  - MAY set `offer_metadata` for its own use.\n  - if it supports bolt12 offer features:\n    - MUST set `offer_features`.`features` to the bitmap of bolt12 features.\n  - if the offer expires:\n    - MUST set `offer_absolute_expiry` `seconds_from_epoch` to the number of seconds\n      after midnight 1 January 1970, UTC that invoice_request should not be\n      attempted.\n  - if it is connected only by private channels:\n    - MUST include `offer_paths` containing one or more paths to the node from\n      publicly reachable nodes.\n  - otherwise:\n    - MAY include `offer_paths`.\n  - if it includes `offer_paths`:\n    - MAY set `offer_issuer_id`.\n  - otherwise:\n     - MUST set `offer_issuer_id` to the node's public key to request the invoice from.\n  - if it sets `offer_issuer`:\n    - SHOULD set it to identify the issuer of the invoice clearly.\n    - if it includes a domain name:\n      - SHOULD begin it with either user@domain or domain\n      - MAY follow with a space and more text\n  - if it can supply more than one item for a single invoice:\n    - if the maximum quantity is known:\n      - MUST set that maximum in `offer_quantity_max`.\n      - MUST NOT set `offer_quantity_max` to 0.\n    - otherwise:\n      - MUST set `offer_quantity_max` to 0.\n  - otherwise:\n    - MUST NOT set `offer_quantity_max`.\n\nA reader of an offer:\n  - if the offer contains any TLV fields outside the inclusive ranges: 1 to 79 and 1000000000 to 1999999999:\n    - MUST NOT respond to the offer.\n  - if `offer_features` contains unknown _odd_ bits that are non-zero:\n    - MUST ignore the bit.\n  - if `offer_features` contains unknown _even_ bits that are non-zero:\n    - MUST NOT respond to the offer.\n    - SHOULD indicate the unknown bit to the user.\n  - if `offer_chains` is not set:\n    - if the node does not accept bitcoin invoices:\n      - MUST NOT respond to the offer\n  - otherwise: (`offer_chains` is set):\n    - if the node does not accept invoices for any of the `chains`:\n      - MUST NOT respond to the offer\n  - if `offer_amount` is set and `offer_description` is not set:\n    - MUST NOT respond to the offer.\n  - if `offer_currency` is set and `offer_amount` is not set:\n    - MUST NOT respond to the offer.\n  - if neither `offer_issuer_id` nor `offer_paths` are set:\n    - MUST NOT respond to the offer.\n  - if `num_hops` is 0 in any `blinded_path` in `offer_paths`:\n    - MUST NOT respond to the offer.\n  - if it uses `offer_amount` to provide the user with a cost estimate:\n    - MUST take into account the currency units for `offer_amount`:\n      - `offer_currency` field if set\n      - otherwise, the minimum lightning-payable unit (e.g. milli-satoshis for\n        bitcoin).\n    - MUST warn the user if the received `invoice_amount` differs significantly\n        from that estimate.\n  - if the current time is after `offer_absolute_expiry`:\n    - MUST NOT respond to the offer.\n  - if it chooses to send an invoice request, it sends an onion message:\n    - if `offer_paths` is set:\n      - MUST send the onion message via any path in `offer_paths` to the final `onion_msg_hop`.`blinded_node_id` in that path\n    - otherwise:\n      - MUST send the onion message to `offer_issuer_id`\n    - MAY send more than one invoice request onion message at once.\n\n## Rationale\n\nThe entire offer is reflected in the invoice_request, both for\ncompleteness (so all information will be returned in the invoice), and\nso that the offer node can be stateless.  This makes `offer_metadata`\nparticularly useful, since it can contain an authentication cookie to\nvalidate the other fields.\n\nBecause offer fields are copied into the invoice request (and then the invoice),\nthey require distinct ranges.  The range 1-79 is the normal range, with another\nbillion for self-assigning experimental ranges.\n\nA signature is unnecessary, and makes for a longer string (potentially\nlimiting QR code use on low-end cameras); if the offer has an error, no\ninvoice will be given since the request includes all the non-signature \nfields.\n\nThe `offer_issuer_id` can be omitted for brevity, if `offer_paths` is set, as each of the final `blinded_node_id` in the paths can serve as a valid public key for the destination.\n\nBecause `offer_amount` can be in a different currency (using the `offer_currency` field) it is merely a guide: the issuer will convert it into a number of millisatoshis for `invoice_amount` at the time they generate an invoice, or the invoice request can specify the exact amount in `invreq_amount`, but the issuer may then reject it if it disagrees.\n\n`offer_quantity_max` is allowed to be 1, which seems useless, but\nuseful in a system which bases it on available stock.  It would be\npainful to have to special-case the \"only one left\" offer generation.\n\nOffers can be used to simply send money without expecting anything in return (tips, kudos, donations, etc), which means the description field is optional (the `offer_issuer` field is very useful for this case!); if you are charging for something specific, the description is vital for the user to know what it was they paid for.\n\n# Invoice Requests\n\nInvoice Requests are a request for an invoice; the human-readable prefix for\ninvoice requests is `lnr`.\n\nThere are two similar-looking uses for invoice requests, which are\nalmost identical from a workflow perspective, but are quite different\nfrom a user's point of view.\n\nOne is a response to an offer; this contains the `offer_issuer_id` or `offer_paths` and\nall other offer details, and is generally received over an onion\nmessage: if it's valid and refers to a known offer, the response is\ngenerally to reply with an `invoice` using the `reply_path` field of\nthe onion message.\n\nThe second case is publishing an invoice request without an offer,\nsuch as via QR code.  It contains neither `offer_issuer_id` nor `offer_paths`, setting the\n`invreq_payer_id` (and possibly `invreq_paths`) instead, as it in the one paying: the\nother offer fields are filled by the creator of the `invoice_request`,\nforming a kind of offer-to-send-money.\n\nNote: the `invreq_metadata` is numbered 0 (not in the\n80-159 range for other invreq fields) making it the \"numerically-first TLV entry\"\nfor [Signature Calculation](#signature-calculation).  This ensures that merkle\nleaves are unguessable, allowing a future compact representation to hide fields\nwhile still allowing signature validation.\n\n\n## TLV Fields for `invoice_request`\n\n1. `tlv_stream`: `invoice_request`\n2. types:\n    1. type: 0 (`invreq_metadata`)\n    2. data:\n        * [`...*byte`:`blob`]\n    1. type: 2 (`offer_chains`)\n    2. data:\n        * [`...*chain_hash`:`chains`]\n    1. type: 4 (`offer_metadata`)\n    2. data:\n        * [`...*byte`:`data`]\n    1. type: 6 (`offer_currency`)\n    2. data:\n        * [`...*utf8`:`iso4217`]\n    1. type: 8 (`offer_amount`)\n    2. data:\n        * [`tu64`:`amount`]\n    1. type: 10 (`offer_description`)\n    2. data:\n        * [`...*utf8`:`description`]\n    1. type: 12 (`offer_features`)\n    2. data:\n        * [`...*byte`:`features`]\n    1. type: 14 (`offer_absolute_expiry`)\n    2. data:\n        * [`tu64`:`seconds_from_epoch`]\n    1. type: 16 (`offer_paths`)\n    2. data:\n        * [`...*blinded_path`:`paths`]\n    1. type: 18 (`offer_issuer`)\n    2. data:\n        * [`...*utf8`:`issuer`]\n    1. type: 20 (`offer_quantity_max`)\n    2. data:\n        * [`tu64`:`max`]\n    1. type: 22 (`offer_issuer_id`)\n    2. data:\n        * [`point`:`id`]\n    1. type: 80 (`invreq_chain`)\n    2. data:\n        * [`chain_hash`:`chain`]\n    1. type: 82 (`invreq_amount`)\n    2. data:\n        * [`tu64`:`msat`]\n    1. type: 84 (`invreq_features`)\n    2. data:\n        * [`...*byte`:`features`]\n    1. type: 86 (`invreq_quantity`)\n    2. data:\n        * [`tu64`:`quantity`]\n    1. type: 88 (`invreq_payer_id`)\n    2. data:\n        * [`point`:`key`]\n    1. type: 89 (`invreq_payer_note`)\n    2. data:\n        * [`...*utf8`:`note`]\n    1. type: 90 (`invreq_paths`)\n    2. data:\n        * [`...*blinded_path`:`paths`]\n    1. type: 91 (`invreq_bip_353_name`)\n    2. data:\n        * [`u8`:`name_len`]\n        * [`name_len*byte`:`name`]\n        * [`u8`:`domain_len`]\n        * [`domain_len*byte`:`domain`]\n    1. type: 240 (`signature`)\n    2. data:\n        * [`bip340sig`:`sig`]\n\n## Requirements for Invoice Requests\n\nThe writer:\n  - if it is responding to an offer:\n    - MUST copy all fields from the offer (including unknown fields).\n    - if `offer_chains` is set:\n      - MUST set `invreq_chain` to one of `offer_chains` unless that chain is bitcoin, in which case it SHOULD omit `invreq_chain`.\n    - otherwise:\n      - if it sets `invreq_chain` it MUST set it to bitcoin.\n    - MUST set `signature`.`sig` as detailed in [Signature Calculation](#signature-calculation) using the `invreq_payer_id`.\n    - if `offer_amount` is not present:\n      - MUST specify `invreq_amount`.\n    - otherwise:\n      - MAY omit `invreq_amount`.\n      - if it sets `invreq_amount`:\n        - MUST specify `invreq_amount`.`msat` as greater or equal to amount expected by `offer_amount` (and, if present, `offer_currency` and `invreq_quantity`).\n    - MUST set `invreq_payer_id` to a transient public key.\n    - MUST remember the secret key corresponding to `invreq_payer_id`.\n    - if `offer_quantity_max` is present:\n      - MUST set `invreq_quantity` to greater than zero.\n      - if `offer_quantity_max` is non-zero:\n        - MUST set `invreq_quantity` less than or equal to `offer_quantity_max`.\n    - otherwise:\n      - MUST NOT set `invreq_quantity`\n  - otherwise (not responding to an offer):\n    - MUST set `offer_description` to a complete description of the purpose of the payment.\n    - MUST set (or not set) `offer_absolute_expiry` and `offer_issuer` as it would for an offer.\n    - MUST set `invreq_payer_id` (as it would set `offer_issuer_id` for an offer).\n    - MUST set `invreq_paths` as it would set (or not set) `offer_paths` for an offer.\n    - MUST NOT include `signature`, `offer_metadata`, `offer_chains`, `offer_amount`, `offer_currency`, `offer_features`, `offer_quantity_max`, `offer_paths` or `offer_issuer_id`\n    - if the chain for the invoice is not solely bitcoin:\n      - MUST specify `invreq_chain` the offer is valid for.\n    - MUST set `invreq_amount`.\n  - MUST NOT set any non-signature TLV fields outside the inclusive ranges: 0 to 159 and 1000000000 to 2999999999\n  - MUST set `invreq_metadata` to an unpredictable series of bytes.\n  - if it sets `invreq_amount`:\n    - MUST set `msat` in multiples of the minimum lightning-payable unit\n        (e.g. milli-satoshis for bitcoin) for `invreq_chain` (or for bitcoin, if there is no `invreq_chain`).\n  - if it supports bolt12 invoice request features:\n    - MUST set `invreq_features`.`features` to the bitmap of features.\n  - if it received the offer from which it constructed this `invoice_request` using BIP 353 resolution:\n    - MUST include `invreq_bip_353_name` with,\n      - `name` set to the post-₿, pre-@ part of the BIP 353 HRN,\n      - `domain` set to the post-@ part of the BIP 353 HRN.\n\nThe reader:\n  - MUST reject the invoice request if `invreq_payer_id` or `invreq_metadata` are not present.\n  - MUST reject the invoice request if any non-signature TLV fields are outside the inclusive ranges: 0 to 159 and 1000000000 to 2999999999\n  - if `invreq_features` contains unknown _odd_ bits that are non-zero:\n    - MUST ignore the bit.\n  - if `invreq_features` contains unknown _even_ bits that are non-zero:\n    - MUST reject the invoice request.\n  - MUST reject the invoice request if `signature` is not correct as detailed in [Signature Calculation](#signature-calculation) using the `invreq_payer_id`.\n  - if `num_hops` is 0 in any `blinded_path` in `invreq_paths`:\n    - MUST reject the invoice request.\n  - if `offer_issuer_id` is present, and `invreq_metadata` is identical to a previous `invoice_request`:\n    - MAY simply reply with the previous invoice.\n  - otherwise:\n    - MUST NOT reply with a previous invoice.\n  - if `offer_issuer_id` or `offer_paths` are present (response to an offer):\n    - MUST reject the invoice request if the offer fields do not exactly match a valid, unexpired offer.\n    - if `offer_paths` is present:\n      - MUST ignore the invoice_request if it did not arrive via one of those paths.\n    - otherwise:\n      - MUST ignore any invoice_request if it arrived via a blinded path.\n    - if `offer_quantity_max` is present:\n      - MUST reject the invoice request if there is no `invreq_quantity` field.\n      - if `offer_quantity_max` is non-zero:\n        - MUST reject the invoice request if `invreq_quantity` is zero, OR greater than `offer_quantity_max`.\n    - otherwise:\n      - MUST reject the invoice request if there is an `invreq_quantity` field.\n    - if `offer_amount` is present:\n      - MUST calculate the *expected amount* using the `offer_amount`:\n        - if `offer_currency` is not the `invreq_chain` currency, convert to the\n          `invreq_chain` currency.\n        - if `invreq_quantity` is present, multiply by `invreq_quantity`.`quantity`.\n      - if `invreq_amount` is present:\n        - MUST reject the invoice request if `invreq_amount`.`msat` is less than the *expected amount*.\n        - MAY reject the invoice request if `invreq_amount`.`msat` greatly exceeds the *expected amount*.\n    - otherwise (no `offer_amount`):\n      - MUST reject the invoice request if it does not contain `invreq_amount`.\n    - SHOULD send an invoice in response using the `onionmsg_tlv` `reply_path`.\n  - otherwise (no `offer_issuer_id` or `offer_paths`, not a response to our offer):\n    - MUST reject the invoice request if any of the following are present:\n      - `offer_chains`, `offer_features` or `offer_quantity_max`.\n    - MUST reject the invoice request if `invreq_amount` is not present.\n    - MAY use `offer_amount` (or `offer_currency`) for informational display to user.\n    - if it sends an invoice in response:\n      - MUST use `invreq_paths` if present, otherwise MUST use `invreq_payer_id` as the node id to send to.\n  - if `invreq_chain` is not present:\n    - MUST reject the invoice request if bitcoin is not a supported chain.\n  - if `invreq_bip_353_name` is present:\n    - MUST reject the invoice request if `name` or `domain` contain any bytes which are not\n      `0`-`9`, `a`-`z`, `A`-`Z`, `-`, `_` or `.`.\n  - otherwise:\n    - MUST reject the invoice request if `invreq_chain`.`chain` is not a supported chain.\n\n\n## Rationale\n\n`invreq_metadata` might typically contain information about the derivation of the\n`invreq_payer_id`.  This should not leak any information (such as using a simple\nBIP-32 derivation path); a valid system might be for a node to maintain a base\npayer key and encode a 128-bit tweak here.  The payer_id would be derived by\ntweaking the base key with SHA256(payer_base_pubkey || tweak).  It's also\nthe first entry (if present), ensuring an unpredictable nonce for hashing.\n\n`invreq_payer_note` allows you to compliment, taunt, or otherwise engrave\ngraffiti into the invoice for all to see.\n\nUsers can give a tip (or obscure the amount sent) by specifying an\n`invreq_amount` in their invoice request, even though the offer specifies an\n`offer_amount`.  The recipient will only accept this if\nthe invoice request amount exceeds the amount it's expecting (i.e. its\n`offer_amount` after any currency conversion, multiplied by `invreq_quantity`, if\nany).\n\nNon-offer-response invoice requests are currently required to\nexplicitly state the `invreq_amount` in the chain currency,\nso `offer_amount` and `offer_currency` are redundant (but may be\ninformative for the payer to know how the sender claims\n`invreq_amount` was derived).\n\nThe requirement to use `offer_paths` if present, ensures a node does not reveal it is the source of an offer if it is asked directly.  Similarly, the requirement that the correct path is used for the offer ensures that cannot be made to reveal that it is the same node that created some other offer.\n\n# Invoices\n\nInvoices are a payment request, and when the payment is made, \nthe payment preimage can be combined with the invoice to form a cryptographic receipt.\n\nThe recipient sends an `invoice` in response to an `invoice_request` using\nthe `onion_message` `invoice` field.\n\n1. `tlv_stream`: `invoice`\n2. types:\n    1. type: 0 (`invreq_metadata`)\n    2. data:\n        * [`...*byte`:`blob`]\n    1. type: 2 (`offer_chains`)\n    2. data:\n        * [`...*chain_hash`:`chains`]\n    1. type: 4 (`offer_metadata`)\n    2. data:\n        * [`...*byte`:`data`]\n    1. type: 6 (`offer_currency`)\n    2. data:\n        * [`...*utf8`:`iso4217`]\n    1. type: 8 (`offer_amount`)\n    2. data:\n        * [`tu64`:`amount`]\n    1. type: 10 (`offer_description`)\n    2. data:\n        * [`...*utf8`:`description`]\n    1. type: 12 (`offer_features`)\n    2. data:\n        * [`...*byte`:`features`]\n    1. type: 14 (`offer_absolute_expiry`)\n    2. data:\n        * [`tu64`:`seconds_from_epoch`]\n    1. type: 16 (`offer_paths`)\n    2. data:\n        * [`...*blinded_path`:`paths`]\n    1. type: 18 (`offer_issuer`)\n    2. data:\n        * [`...*utf8`:`issuer`]\n    1. type: 20 (`offer_quantity_max`)\n    2. data:\n        * [`tu64`:`max`]\n    1. type: 22 (`offer_issuer_id`)\n    2. data:\n        * [`point`:`id`]\n    1. type: 80 (`invreq_chain`)\n    2. data:\n        * [`chain_hash`:`chain`]\n    1. type: 82 (`invreq_amount`)\n    2. data:\n        * [`tu64`:`msat`]\n    1. type: 84 (`invreq_features`)\n    2. data:\n        * [`...*byte`:`features`]\n    1. type: 86 (`invreq_quantity`)\n    2. data:\n        * [`tu64`:`quantity`]\n    1. type: 88 (`invreq_payer_id`)\n    2. data:\n        * [`point`:`key`]\n    1. type: 89 (`invreq_payer_note`)\n    2. data:\n        * [`...*utf8`:`note`]\n    1. type: 90 (`invreq_paths`)\n    2. data:\n        * [`...*blinded_path`:`paths`]\n    1. type: 160 (`invoice_paths`)\n    2. data:\n        * [`...*blinded_path`:`paths`]\n    1. type: 162 (`invoice_blindedpay`)\n    2. data:\n        * [`...*blinded_payinfo`:`payinfo`]\n    1. type: 164 (`invoice_created_at`)\n    2. data:\n        * [`tu64`:`timestamp`]\n    1. type: 166 (`invoice_relative_expiry`)\n    2. data:\n        * [`tu32`:`seconds_from_creation`]\n    1. type: 168 (`invoice_payment_hash`)\n    2. data:\n        * [`sha256`:`payment_hash`]\n    1. type: 170 (`invoice_amount`)\n    2. data:\n        * [`tu64`:`msat`]\n    1. type: 172 (`invoice_fallbacks`)\n    2. data:\n        * [`...*fallback_address`:`fallbacks`]\n    1. type: 174 (`invoice_features`)\n    2. data:\n        * [`...*byte`:`features`]\n    1. type: 176 (`invoice_node_id`)\n    2. data:\n        * [`point`:`node_id`]\n    1. type: 240 (`signature`)\n    2. data:\n        * [`bip340sig`:`sig`]\n\n1. subtype: `blinded_payinfo`\n2. data:\n   * [`u32`:`fee_base_msat`]\n   * [`u32`:`fee_proportional_millionths`]\n   * [`u16`:`cltv_expiry_delta`]\n   * [`u64`:`htlc_minimum_msat`]\n   * [`u64`:`htlc_maximum_msat`]\n   * [`u16`:`flen`]\n   * [`flen*byte`:`features`]\n\n1. subtype: `fallback_address`\n2. data:\n   * [`byte`:`version`]\n   * [`u16`:`len`]\n   * [`len*byte`:`address`]\n\n## Invoice Features\n\n| Bits | Description                      | Name           |\n|------|----------------------------------|----------------|\n| 16   | Multi-part-payment support       | MPP/compulsory |\n| 17   | Multi-part-payment support       | MPP/optional   |\n\nThe 'MPP support' invoice feature indicates that the payer MUST (16) or\nMAY (17) use multiple part payments to pay the invoice.\n\nSome implementations may not support MPP (e.g. for small payments), or\nmay (due to capacity limits on a single channel) require it.\n\n## Requirements\n\nA writer of an invoice:\n  - MUST set `invoice_created_at` to the number of seconds since Midnight 1\n    January 1970, UTC when the invoice was created.\n  - MUST set `invoice_amount` to the minimum amount it will accept, in units of \n    the minimal lightning-payable unit (e.g. milli-satoshis for bitcoin) for\n    `invreq_chain`.\n  - if the invoice is in response to an `invoice_request`:\n    - MUST copy all non-signature fields from the invoice request (including unknown fields).\n    - if `invreq_amount` is present:\n      - MUST set `invoice_amount` to `invreq_amount`\n    - otherwise:\n      - MUST set `invoice_amount` to the *expected amount*.\n  - MUST set `invoice_payment_hash` to the SHA256 hash of the\n    `payment_preimage` that will be given in return for payment.\n  - if `offer_issuer_id` is present:\n    - MUST set `invoice_node_id` to the `offer_issuer_id`\n  - otherwise, if `offer_paths` is present:\n    - MUST set `invoice_node_id` to the final `blinded_node_id` on the path it received the invoice request\n  - MUST specify exactly one signature TLV element: `signature`.\n    - MUST set `sig` to the signature using `invoice_node_id` as described in [Signature Calculation](#signature-calculation).\n  - if it requires multiple parts to pay the invoice:\n    - MUST set `invoice_features`.`features` bit `MPP/compulsory`\n  - or if it allows multiple parts to pay the invoice:\n    - MUST set `invoice_features`.`features` bit `MPP/optional`\n  - if the expiry for accepting payment is not 7200 seconds after `invoice_created_at`:\n    - MUST set `invoice_relative_expiry`.`seconds_from_creation` to the number of\n      seconds after `invoice_created_at` that payment of this invoice should not be attempted.\n  - if it accepts onchain payments:\n    - MAY specify `invoice_fallbacks`\n    - SHOULD specify `invoice_fallbacks` in order of most-preferred to least-preferred\n      if it has a preference.\n    - for the bitcoin chain, it MUST set each `fallback_address` with\n      `version` as a valid witness version and `address` as a valid witness\n      program\n  - MUST include `invoice_paths` containing one or more paths to the node.\n    - MUST specify `invoice_paths` in order of most-preferred to least-preferred if it has a preference.\n    - MUST include `invoice_blindedpay` with exactly one `blinded_payinfo` for each `blinded_path` in `paths`, in order.\n    - MUST set `features` in each `blinded_payinfo` to match `encrypted_data_tlv`.`allowed_features` (or empty, if no `allowed_features`).\n    - SHOULD ignore any payment which does not use one of the paths.\n\nA reader of an invoice:\n  - MUST reject the invoice if `invoice_amount` is not present.\n  - MUST reject the invoice if `invoice_created_at` is not present.\n  - MUST reject the invoice if `invoice_payment_hash` is not present.\n  - MUST reject the invoice if `invoice_node_id` is not present.\n  - if `invreq_chain` is not present:\n    - MUST reject the invoice if bitcoin is not a supported chain.\n  - otherwise:\n    - MUST reject the invoice if `invreq_chain`.`chain` is not a supported chain.\n  - if `invoice_features` contains unknown _odd_ bits that are non-zero:\n    - MUST ignore the bit.\n  - if `invoice_features` contains unknown _even_ bits that are non-zero:\n    - MUST reject the invoice.\n  - if `invoice_relative_expiry` is present:\n    - MUST reject the invoice if the current time since 1970-01-01 UTC is greater than `invoice_created_at` plus `seconds_from_creation`.\n  - otherwise:\n    - MUST reject the invoice if the current time since 1970-01-01 UTC is greater than `invoice_created_at` plus 7200.\n  - MUST reject the invoice if `invoice_paths` is not present or is empty.\n  - MUST reject the invoice if `num_hops` is 0 in any `blinded_path` in `invoice_paths`.\n  - MUST reject the invoice if `invoice_blindedpay` is not present.\n  - MUST reject the invoice if `invoice_blindedpay` does not contain exactly one `blinded_payinfo` per `invoice_paths`.`blinded_path`.\n  - For each `invoice_blindedpay`.`payinfo`:\n    - MUST NOT use the corresponding `invoice_paths`.`path` if `payinfo`.`features` has any unknown even bits set.\n    - MUST reject the invoice if this leaves no usable paths.\n  - if the invoice is a response to an `invoice_request`:\n    - MUST reject the invoice if all fields in ranges 0 to 159 and 1000000000 to 2999999999 (inclusive) do not exactly match the invoice request.\n    - if `offer_issuer_id` is present (invoice_request for an offer):\n      - MUST reject the invoice if `invoice_node_id` is not equal to `offer_issuer_id`\n    - otherwise, if `offer_paths` is present (invoice_request for an offer without id):\n      - MUST reject the invoice if `invoice_node_id` is not equal to the final `blinded_node_id` it sent the invoice request to.\n    - otherwise (invoice_request without an offer):\n      - MAY reject the invoice if it cannot confirm that `invoice_node_id` is correct, out-of-band.\n  - MUST reject the invoice if `signature` is not a valid signature using `invoice_node_id` as described in [Signature Calculation](#signature-calculation).\n  - SHOULD prefer to use earlier `invoice_paths` over later ones if it has no other reason for preference.\n  - if `invoice_features` contains the MPP/compulsory bit:\n    - MUST pay the invoice via multiple separate blinded paths.\n  - otherwise, if `invoice_features` contains the MPP/optional bit:\n    - MAY pay the invoice via multiple separate payments.\n  - otherwise:\n    - MUST NOT use multiple parts to pay the invoice.\n  - if `invreq_amount` is present:\n    - MUST reject the invoice if `invoice_amount` is not equal to `invreq_amount`\n  - otherwise:\n    - SHOULD confirm authorization if `invoice_amount`.`msat` is not within the amount range authorized.\n  - for the bitcoin chain, if the invoice specifies `invoice_fallbacks`:\n    - MUST ignore any `fallback_address` for which `version` is greater than 16.\n    - MUST ignore any `fallback_address` for which `address` is less than 2 or greater than 40 bytes.\n    - MUST ignore any `fallback_address` for which `address` does not meet known requirements for the given `version`\n  - if `invreq_paths` is present:\n    - MUST reject the invoice if it did not arrive via one of those paths.\n  - otherwise, neither `offer_issuer_id` nor `offer_paths` are present (not derived from an offer):\n    - MUST reject the invoice if it arrived via a blinded path.\n  - otherwise (derived from an offer):\n    - MUST reject the invoice if it did not arrive via invoice request `onionmsg_tlv` `reply_path`.\n\n## Rationale\n\nBecause the messaging layer is unreliable, it's quite possible to\nreceive multiple requests for the same offer.  As it's the caller's\nresponsibility to make `invreq_metadata` both unpredictable and unique,\nthe writer doesn't have to check all the fields are duplicates before\nsimply returning a previous invoice.  Note that such caching is optional,\nand should be carefully limited when e.g. currency conversion is involved,\nor if the invoice has expired.\n\nThe invoice duplicates fields rather than committing to the previous\ninvreq.  This flattened format simplifies storage at some space cost, as\nthe payer need only remember the invoice for any refunds or proof.\n\nThe reader of the invoice cannot trust the invoice correctly reflects\nthe invreq fields, hence the requirements to check that they\nare correct, although allowance is made for simply sending an unrequested\ninvoice directly.\n\nNote that the recipient of the invoice can determine the expected\namount from either the offer it received, or the invreq it\nsent, so often already has authorization for the expected amount.\n\nThe default `invoice_relative_expiry` of 7200 seconds, which is generally a\nsufficient time for payment, even if new channels need to be opened.\n\nBlinded paths provide an equivalent to `payment_secret` and `payment_metadata` used in BOLT 11.\nEven if `invoice_node_id` or `invreq_payer_id` is public, we force the use of blinding paths to keep these features.\nIf the recipient does not care about the added privacy offered by blinded paths, they can create a path of length 1 with only themselves.\n\nRather than provide detailed per-hop-payinfo for each hop in a blinded path, we aggregate the fees and CLTV deltas.\nThis avoids trivially revealing any distinguishing non-uniformity which may distinguish the path.\n\nIn the case of an invoice where there was no offer (just an invoice\nrequest), the payer needs to ensure that the invoice is from the\nintended payment recipient.  This is the basis for the suggestion to\nconfirm the invoice_node_id for this case.\n\nRaw invoices (not based on an invoice_request) are generally not\nsupported, though an implementation is allowed to support them, and we\nmay define the behavior in future.  The redundant requirement to check\n`invreq_chain` explicitly is a nod to this: if the invoice is\na response to an invoice request, that field must have existed due\nto the invoice request requirements, and we also require it to be mirrored\nhere.\n\n\n# Invoice Errors\n\nInformative errors can be returned in an onion message `invoice_error`\nfield (via the onion `reply_path`) for either `invoice_request` or\n`invoice`.\n\n## TLV Fields for `invoice_error`\n\n1. `tlv_stream`: `invoice_error`\n2. types:\n    1. type: 1 (`erroneous_field`)\n    2. data:\n        * [`tu64`:`tlv_fieldnum`]\n    1. type: 3 (`suggested_value`)\n    2. data:\n        * [`...*byte`:`value`]\n    1. type: 5 (`error`)\n    2. data:\n        * [`...*utf8`:`msg`]\n\n## Requirements\n\nA writer of an invoice_error:\n  - MUST set `error` to an explanatory string.\n  - MAY set `erroneous_field` to a specific field number in the\n    `invoice` or `invoice_request` which had a problem.\n  - if it sets `erroneous_field`:\n    - MAY set `suggested_value`.\n    - if it sets `suggested_value`:\n      - MUST set `suggested_value` to a valid field for that `tlv_fieldnum`.\n  - otherwise:\n    - MUST NOT set `suggested_value`.\n\nA reader of an invoice_error:\n   FIXME!\n\n## Rationale\n\nUsually an error message is sufficient for diagnostics, however future\nenhancements may make automated handling useful.\n\nIn particular, we could allow non-offer-response `invoice_request`s to\nomit `invreq_amount` in future and use offer fields to\nindicate alternate currencies.  (\"I will send you 10c!\").  Then the\nsender of the invoice would have to guess how many msat that was,\nand could use the `invoice_error` to indicate if the recipient disagreed\nwith the conversion so the sender can send a new invoice.\n\n# FIXME: Possible future extensions:\n\n1. The offer can require delivery info in the `invoice_request`.\n2. An offer can be updated: the response to an `invoice_request` is another offer,\n   perhaps with a signature from the original `offer_issuer_id`\n3. Any empty TLV fields can mean the value is supposed to be known by\n   other means (i.e. transport-specific), but is still hashed for sig.\n4. We could upgrade to allow multiple offers in one invreq and\n   invoice, to make a shopping list.\n7. All-zero offer_id == gratuitous payment.\n8. Streaming invoices?\n9. Re-add recurrence.\n10. Re-add `invreq_refund_for` to support proofs.\n11. Re-add `invoice_replace` for requesting replacement of a (stuck-payment) \n    invoice with a new one.\n12. Allow non-offer `invoice_request` with alternate currencies?\n13. Add `offer_quantity_unit` to indicate stepping for quantity\n    (e.g. 100 grams).\n\n[1] https://www.youtube.com/watch?v=4SYc_flMnMQ\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.5,
          "content": "# How to Modify the Specification\n\nWelcome!  This document is a meta-discussion of how the specifications\nshould be safely altered when you want to include some amazing new\nfunctionality.\n\nPlease remember that we're all trying to Make Things Better.  Respect,\nconsideration, kindness and humor have made this process\n[fun](00-introduction.md#theme-song) and rewarding and we'd like to keep it\nthat way.  We're nice!\n\n## Extension Design\n\nThere are several extension mechanisms in the spec; you should seek to use\nthem, or introduce new ones if necessary.\n\n### Adding New Inter-Peer Messages\n\nUnknown odd inter-peer messages are ignored, aka \"it's OK to be odd!\"\nwhich makes more sense as you get to know me.\n\nIf your message is an enhancement, and you don't need to know if the other\nside supports it, you should give it an odd number.  If it would be broken\nif the other side doesn't support it (ie. Should Never Happen) give it an\neven number.  Mistakes happen, and future versions of the software may well\nnot be tested against ancient versions.\n\nIf you want to experiment with new [message types](01-messaging.md#lightning-message-format) internally, I recommend\nusing 32768 and above (use even, so it will break if these accidentally\nescape into the wild).\n\n### Adding New Feature Bits\n\n[Feature bits](01-messaging.md#the-init-message) are how you know a message is legal to send (see above), and\nalso they can be used to find appropriate peers.\n\nFeature bits are always assigned in pairs, even if it doesn't make sense\nfor them to ever be compulsory.  The feature bit is self-assigned in the\ntitle of the PR, to make it easier for others to self-assign.  Until the PR\nis merged into the spec, experimental implementations should use the proposed\nfeature bit +100; they can accept both feature bits once it is merged (if\nthe protocol does not change!).\n\nAlmost every spec change should have a feature bit associated; in the past\nwe have grouped feature bits, then we couldn't disable a single feature\nwhen implementations turned out to be broken.\n\nUsually feature bits are odd when first deployed, then some become even\nwhen deployment is almost universal.  This often allows legacy code to be\nremoved, since you'll never talk to peers who can't deal with the feature.\n\nIf you want to experiment with new feature bits internally, I recommend\nusing 100 and above.\n\n### Extending Inter-Peer Messages\n\nThe spec says that additional data in messages is ignored, which is another\nway we can extend in future.  For BOLT 1.0, optional fields were appended,\nand their presence flagged by feature bits.\n\nThe modern way to do this is to add a TLV to the end of a message.  This\ncontains optional fields: again, even means you will only send it if a\nfeature bit indicates support, odd means it's OK to send to old peers\n(often making implementation easier, since peers can send them\nunconditionally).\n\n## Writing The Spec\n\nThe specification is supposed to be readable in text form, readable once\nconverted to HTML, and digestible by [tools/extract-formats.py].  In\nparticular, fields should use the correct type and have as much of their\nstructure as possible described explicitly (avoid 100*byte fields).\n\nIf necessary, you can modify that tool if you need strange formatting\nchanges.\n\nThe output of this tool is used to generate code for several\nimplementations, and it's also recommended that implementations quote the\nspec liberally and have automated testing that the quotes are correct, as\n[c-lightning\ndoes](https://github.com/ElementsProject/lightning/blob/master/tools/check-bolt.c).\n\nIf your New Thing replaces the existing one, be sure to move the existing\none to a Legacy subsection: new readers will want to go straight to the\nmodern version.  Don't emulate the classic Linux snprintf 1.27 man page:\n\n    RETURN VALUE\n       If the output was truncated, the return value is -1, otherwise it is the\n       number of characters stored, not including the terminating null.   (Thus\n       until  glibc  2.0.6.  Since glibc 2.1 these functions return the  number\n       of characters (excluding the trailing null) which would have been  writ‐\n       ten to the final string if enough space had been available.)\n\nImagine the bitterness of someone who only reads the first sentence\nassuming they have the answer they're looking for!  Someone who still\nremembers it with bitterness 20 years on and digs it out of prehistory\nto use it as an example of how not to write.  Yep, that'd be sad.\n\nThere's a [detailed style guide](.copy-edit-stylesheet-checklist.md) if you\nwant to know how to format things, and we run a spellchecker in our [CI\nsystem](.travis.yml) as well so you may need to add lines to\n[.aspell.en.pws].\n\n### Writing The Requirements\n\nSome requirements are obvious, some are subtle.  They're designed to walk\nan implementer through the code they have to write, so write them as YOU\ndevelop YOUR implementation.  Stick with `MUST`/`SHOULD`/`MAY` and `NOT`:\nsee [RFC 2119](https://www.ietf.org/rfc/rfc2119.txt)\n\nRequirements are grouped into writer and reader, just as implementations\nare.  Make sure you define exactly what a writer must do, and exactly what\na reader must do if the writer doesn't do that!  A developer should\nnever have to intuit reader requirements from writer ones.\n\nNote that the data doesn't have requirements: don't say `foo MUST be 0`,\nsay `The writer MUST set foo to 0` and `The reader MUST fail the connection\nif foo is not 0`.\n\nAvoid the term `MUST check`: use `MUST fail the connection if` or `MUST\nfail the channel if` or `MUST send an error message if`.\n\nThere's a subtle art here for future extensions: you might say `a writer\nMUST set foo to 0` and not mention it in the reader requirements, but it's\nbetter to say `a reader MUST ignore foo`.  A future version of the spec\nmight define when a writer sets `foo` to `1` and we know that old readers\nwill ignore it.\n\n`MAY` is a hint as to what something is for: an implementation may do\nanything not written in the spec anyway.  `MUST` is when not doing\nsomething will break the protocol or security.\n\nRequirements can be vague (eg. \"in a timely manner\"), but only as a last\nresort admission of defeat.  If you don't know, what hope has the poor\nimplementer?\n\n### Creating Test Vectors\n\nFor new low-level protocol constructions, test vectors are necessary.\nThese have traditionally been lines within the spec itself, but the modern\ntrend is to use JSON and separate files.  The intent is that they be\nmachine-readable by implementations.\n\nFor new inter-peer messages, a test framework is in development to simulate\nentire conversations.\n\n## Specification Modification Process\n\nThere is a [mailing\nlist](https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev)\nfor larger feature discussion, a [GitHub\nrepository](https://github.com/lightningnetwork/lightning-rfc) for\nexplicit issues and pull requests, and a bi-weekly IRC meeting on\n#lightning-dev on Freenode, currently held at 5:30am Tuesday, \nAdelaide/Australia timezone (eg. Tuesday 23rd July 2019 05:30 == Mon, 22\nJul 2019 20:00 UTC).\n\nSpelling, typo and formatting changes are accepted once two contributors\nack and there are no nacks.  All other changes get approved and minuted at\nthe IRC meeting.  Protocol changes require two independent implementations\nwhich successfully inter-operate; be patient as spec changes are hard to\nfix later, so agreement can take some time.\n\nIn addition, there are occasional face-to-face invitation-only Summits\nwhere broad direction is established.  These are amazing, and you should\ndefinitely join us sometime.\n\nWe look forward to you joining us!\nYour Friendly Lightning Developers.\n"
        },
        {
          "name": "CoC.md",
          "type": "blob",
          "size": 5.2900390625,
          "content": "# Code of Conduct\n\nThe lightning spec community is open to pretty much anyone. To ensure that project forums are open and friendly, we count on maintainers and project representatives to behave in a way that is not disruptive to any one participant's well-being.\n\nTherefore, we came up with some easy to follow guidelines.\n * Be friendly. Interact in a way that fosters openness, inclusivity, and collaboration.\n * Be respectful. We may disagree, but disagreement is no excuse for rude behavior or personal attacks.\n * Be considerate. Provide and accept constructive criticism.\n\nPrivate or public harassment of any kind will not be tolerated. Since harassment can take many forms, here's a non-exhaustive list of what we consider unacceptable behavior:\n * Offensive language directed at individuals or groups of people\n * Bullying (verbal, physical, social, or cyber)\n * Interfering with someone's ability to contribute, like with excessive nitpicking\n * Continued one-on-one communication after a party has requested it cease\n * Stalking online or offline\n * Doxing or unauthorized publication of private information or communication\n * Unwelcomed sexual attention\n * Inappropriate visual displays such as sexually-oriented or offensive photography, cartoons, drawings, or gestures\n * Retaliation for reporting or threatening to report harassment\n\nAdditionally, spam and other content which disrupts or prevents contributors from working is not acceptable.\n\n## The Code of Conduct Team\n\nA small team of contributors has volunteered to enforce this Code of Conduct. If you feel like a community member has engaged in inappropriate behavior, please don't hesitate to contact one of the following contributors via email:\n * Vincenzo Palazzo - vincenzopalazzo on member.fsf.org\n * Rusty Russell - rusty on rustcorp.com.au\n\n## The Code of Conduct Team’s Responsibilities\n\nTeam members are tasked with acknowledging reports within 24 hours. They will review each incident and determine, to the best of their ability:\n * Does the event constitute a Code of Conduct violation?\n * Is the behavior on our list of inappropriate behavior? Is it borderline inappropriate?\n * Did the event occur in a space within our Code of Conduct's scope?\n   * If the incident occurred outside community forums and the individual is seen as a project representative or identifies as a contributor, the incident may be in scope.\n   * Additionally, an incident may be in scope if a community member's ability to contribute to the lightning spec is impacted.\n * Did this incident occur in a private conversation or in a public space?\n * Is the situation isolated or ongoing?\n * How is the reported person's behavior negatively impacting others?\n * Does the incident impact the ability of individuals to freely contribute to the lightning spec?\n * Does this incident include sexual harassment?\n * Does this pose a safety risk or severely negatively impact someone's mental health?\n * Is there a risk of this behavior being repeated?\n * Does the reported person understand why their behavior was inappropriate?\n\nIf a report is insufficiently detailed or involves multiple parties, the Code of Conduct Team may seek additional information from witnesses or the accused. Neither party should contact the other to discuss the incident. Likewise, the team will do its best not to disclose who reported a given incident, either to the accused or generally, though we recognize that circumstantial disclosures to the accused might be unavoidable.\n\nThe Code of Conduct Team aims to resolve all reports within one week. If a resolution is not possible within that time frame, the team will respond to the reporter(s) with an adjusted one.\n\n## Possible responses to an incident include:\n\n### Taking no further action:\nIf the Code of Conduct Team determines that no action is needed, they will inform the reporter.\n\n### Simple warning:\nThis applies to disruptive behavior, but not insulting behavior. The Code of Conduct Team will contact the individual(s) and request that they stop.\n\n### Final warning:\nIf an incident or series of incidents creates sustained toxicity within the lightning spec community, the Code of Conduct Team will sternly warn the reported party and raise the possibility of further disciplinary action. In addition, they may request that the reported party:\n * Not use specific language\n * Not participate in specific types of discussions\n * Not send private messages to a community member\n * Not review a particular person's PRs on GitHub (but still allow them to privately share review comments with a maintainer)\n * Not lead sub-projects like code review sessions\n * Take a step away for a short period to cool off\n * Lose maintainer/merge access\n\n### 2-3 months imposed break:\nIf the Code of Conduct Team’s warning goes unheeded, the individual(s) may be asked to avoid participating with the lightning spec community on its preferred platforms for several months. After time has passed, the individual(s) will have the option of meeting with the team to discuss returning to the community.\n\n### Extended or permanent ban:\nIf a temporary break does not remedy a serious offense, the offender may be removed or banned from the Github repository. The Code of Conduct Team may also choose to un-ban a user for a first offense, depending on its severity and pending that the user has offered the offended party a genuine apology.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.6123046875,
          "content": "# Lightning Network In-Progress Specifications\n\nThe specifications are currently a work-in-progress and currently being\ndrafted.\n\nPull requests and comments welcome, seeking input from community stakeholders.\n\nDiscussion available on the [lightning-dev mailing list](https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev).\n\n### [Start here for Table of Contents](00-introduction.md)\n\n![Creative Commons License](https://i.creativecommons.org/l/by/4.0/88x31.png \"License CC-BY\")\n<br>\nThis work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).\n"
        },
        {
          "name": "bolt04",
          "type": "tree",
          "content": null
        },
        {
          "name": "bolt07",
          "type": "tree",
          "content": null
        },
        {
          "name": "bolt12",
          "type": "tree",
          "content": null
        },
        {
          "name": "proposals",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}