{
  "metadata": {
    "timestamp": 1736709641234,
    "page": 13,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "swiftlang/swift-book",
      "stars": 1777,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.8857421875,
          "content": "# This file is a list of commits that made uninteresting formatting\n# changes, which should be ignored by git-blame, so that it can instead\n# display more the relevant history and attribution information.\n#\n# To use this file for a single command, pass it as follows:\n#\n#   git blame --ignore-revs-file .git-blame-ignore-revs <somefile>\n#\n# To use this file for all blame operations, run the following command:\n#\n#   git config --local blame.ignoreRevsFile .git-blame-ignore-revs\n#\n# For more information, see the git-blame(1) man page's discussion of\n# the --ignore-revs-file option, and the git-config(1) man page's\n# discussion of the blame.ignoreRevsFile option.\n\n# Convert RST to markdown\n96f0925407c6bd9eadd9d58d253bad3e1ef7a9f2\n\n# Convert the formal grammar to markdown\n4039ee0ef4e69d2cf6460861f9444a499503db16\n\n# Clean up formatting of term-definition lists\nc914c44ccdbbda757ee43e5d4c777abf24391a1a\n"
        },
        {
          "name": ".git-order-file",
          "type": "blob",
          "size": 2.4404296875,
          "content": "# This file lists the chapters of TSPL, in the order they appear in the\n# book.  When reviewing changes, the diff can be easier to read when it\n# appears in this order.\n#\n# To use this file for single command, run a command like the following:\n#\n#     git log -O .git-order-file\n#     git diff -O .git-order-file\n#\n# To use it for all diffs, run the following command:\n#\n#     git config --local diff.orderFile .git-order-file\n#\n# For more information, see the git-log(1) and git-diff(1) man pages'\n# discussions of the -O option, and the git-config(1) man page's\n# discussion of diff.orderFile option.\n\nTSPL.docc/GuidedTour/AboutSwift.md\nTSPL.docc/GuidedTour/Compatibility.md\nTSPL.docc/GuidedTour/GuidedTour.md\n\nTSPL.docc/LanguageGuide/TheBasics.md\nTSPL.docc/LanguageGuide/BasicOperators.md\nTSPL.docc/LanguageGuide/StringsAndCharacters.md\nTSPL.docc/LanguageGuide/CollectionTypes.md\nTSPL.docc/LanguageGuide/ControlFlow.md\nTSPL.docc/LanguageGuide/Functions.md\nTSPL.docc/LanguageGuide/Closures.md\nTSPL.docc/LanguageGuide/Enumerations.md\nTSPL.docc/LanguageGuide/ClassesAndStructures.md\nTSPL.docc/LanguageGuide/Properties.md\nTSPL.docc/LanguageGuide/Methods.md\nTSPL.docc/LanguageGuide/Subscripts.md\nTSPL.docc/LanguageGuide/Inheritance.md\nTSPL.docc/LanguageGuide/Initialization.md\nTSPL.docc/LanguageGuide/Deinitialization.md\nTSPL.docc/LanguageGuide/OptionalChaining.md\nTSPL.docc/LanguageGuide/ErrorHandling.md\nTSPL.docc/LanguageGuide/Concurrency.md\nTSPL.docc/LanguageGuide/Macros.md\nTSPL.docc/LanguageGuide/TypeCasting.md\nTSPL.docc/LanguageGuide/NestedTypes.md\nTSPL.docc/LanguageGuide/Extensions.md\nTSPL.docc/LanguageGuide/Protocols.md\nTSPL.docc/LanguageGuide/Generics.md\nTSPL.docc/LanguageGuide/OpaqueTypes.md\nTSPL.docc/LanguageGuide/AutomaticReferenceCounting.md\nTSPL.docc/LanguageGuide/MemorySafety.md\nTSPL.docc/LanguageGuide/AccessControl.md\nTSPL.docc/LanguageGuide/AdvancedOperators.md\n\nTSPL.docc/ReferenceManual/AboutTheLanguageReference.md\nTSPL.docc/ReferenceManual/LexicalStructure.md\nTSPL.docc/ReferenceManual/Types.md\nTSPL.docc/ReferenceManual/Expressions.md\nTSPL.docc/ReferenceManual/Statements.md\nTSPL.docc/ReferenceManual/Declarations.md\nTSPL.docc/ReferenceManual/Attributes.md\nTSPL.docc/ReferenceManual/Patterns.md\nTSPL.docc/ReferenceManual/GenericParametersAndArguments.md\nTSPL.docc/ReferenceManual/SummaryOfTheGrammar.md\n\nTSPL.docc/RevisionHistory/RevisionHistory.md\n\n# Files that don't match a pattern listed above, such as assets and\n# build scripts, will appear at the end of the diff.\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0810546875,
          "content": "*.md linguist-detectable=true\n*.md linguist-documentation=false\n*.md diff=markdown\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.08984375,
          "content": ".DS_Store\n.docc-build\n.swiftpm\n/.build\n/Package.resolved\n/TSPL.docc/header.html\n/swift-book\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.6396484375,
          "content": "# Contributing to *The Swift Programming Language* book\n\nBy submitting a pull request,\nyou represent that you have the right to license your contribution\nto Apple and the community,\nand agree by submitting the patch\nthat your contributions are licensed under\nthe [Swift license](https://swift.org/LICENSE.txt).\n\nFor small changes,\nlike typo fixes and revisions within a few paragraphs,\nthe discussion of those changes is usually small enough\nto be part of the pull request.\nFor large changes,\nlike new chapters and sections,\nstart a thread in the [Swift forums][forum]\nto discuss your approach and identify possible issues\nbefore you invest a lot of time in writing.\nIn general,\nthe amount of discussion around a change before making a pull request\ncorresponds to the size of that change.\n\nContent in this book follows [Apple Style Guide][asg]\nand [this book’s style guide][tspl-style].\n\n[asg]: https://help.apple.com/applestyleguide/\n[forum]: https://forums.swift.org/c/swift-documentation/92\n[tspl-style]: /Style.md\n\n## Working on a feature branch\n\nIf this is your first contribution,\nstart by making a fork of the Git repository.\n\nIn your fork,\nmake a new branch starting at `main`\nwith a brief, descriptive name.\nBranch names are ephemeral:\nWhen a pull request is merged,\nthe merge commit doesn’t include name of your feature branch.\n\nIf you need to incorporate changes from `main` or resolve a merge conflict,\nmerge `main` into your feature branch.\nBefore creating a pull request,\nyou can instead rebase your feature branch onto `main` if you prefer,\nbut don't rebase commits that are part of a pull request.\n\n## Writing commit messages\n\nUse the Git commit message to communicate with other contributors --\nboth the people working on the project now\nwho are reviewing your changes,\nand people who join the project in the future\nwho will need to understand what you changed and why.\n\nEvery commit starts with a one-sentence summary.\nThe summary usually fits in 50 characters,\nbut it's ok to exceed that amount occasionally\nif rewriting for brevity would make it too hard to read.\nIf it's hard to write a good summary,\ntry breaking your changes into multiple smaller commits.\n\nIf you can't explain the commit entirely in its summary,\nskip one line and add additional information.\nThis additional information includes information like\nthe reasons for the change,\nthe approach you took when making it,\nalternatives you considered,\nand a summary of what you changed.\nHard wrap these lines at 72 characters\nand leave a blank line between paragraphs.\nThe body of a commit is plain text,\nnot markdown like the content of the book.\n\nFollowing these formatting conventions in your commit\nmakes it easier to read\nin places like the output from `git` and notification emails.\nMost text editors can help you write a commit message\nby marking lines that are too long\nand hard wrapping text automatically.\n\n## Submitting a pull request\n\nUse the following steps when creating a new pull request:\n\n1. Test that your changes build locally by running `docc preview TSPL.docc`.\n2. Create a pull request in this repository.\n3. Write a brief message in the pull request to introduce your work in context.\n\nWithin a few days,\nsomeone will assign reviewers and start a build in CI.\n\nDuring the review of the pull request,\nadd new commits on your branch to incorporate feedback,\nbut don’t rebase or force push.\nRewriting the branch's history\nmakes it hard for reviewers to see\nwhat changed since the last time they reviewed your changes.\nIf there are merge conflicts,\nmerge `main` into your branch or use the GitHub web UI\nto resolve the conflicts when accepting the pull request.\n\nAfter a pull request is merged, delete the feature branch.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.4755859375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n    1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n    2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n    3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n    4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n    5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n    6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n    7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n    8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n    9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n    END OF TERMS AND CONDITIONS\n\n    APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n    Copyright [yyyy] [name of copyright owner]\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n\n## Runtime Library Exception to the Apache 2.0 License: ##\n\n\n    As an exception, if you use this Software to compile your source code and\n    portions of this Software are embedded into the binary product as a result,\n    you may redistribute such product without providing attribution as would\n    otherwise be required by Sections 4(a), 4(b) and 4(d) of the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.8310546875,
          "content": "# The Swift Programming Language\n\nThis repository contains the source for *The Swift Programming Language*\n(sometimes abbreviated as TSPL),\nwhich is published on [docs.swift.org][published]\nand built using [Swift-DocC][docc].\n\n## Contributing\n\nFor small changes,\nlike typo fixes and changes to a few paragraphs,\nfork this repository and make a pull request.\n\nA formal contribution process for this document is still in development.\nIn the meantime,\nstart a pitch thread in the [Swift forums][forum] for larger changes\nto discuss your approach and identify possible issues\nbefore you invest a lot of time in writing.\n\nContent in this book follows [Apple Style Guide][asg]\nand [this book’s style guide][tspl-style].\n\nFile bugs about the content using the [issues page][bugs] on Github.\n\nDiscussions and contributions follow the [Swift Code of Conduct][conduct].\n\nFor more information, see [Contributing to The Swift Programming Language][contributing].\n\n[asg]: https://help.apple.com/applestyleguide/\n[bugs]: https://github.com/apple/swift-book/issues\n[conduct]: https://www.swift.org/code-of-conduct\n[contributing]: /CONTRIBUTING.md\n[forum]: https://forums.swift.org/c/swift-documentation/92\n[tspl-style]: /Style.md\n[published]: https://docs.swift.org/swift-book/documentation/the-swift-programming-language/\n[docc]: https://github.com/apple/swift-docc\n\n## Building\n\nRun `docc preview TSPL.docc`\nin this repository's root directory.\n\nAfter running DocC, open the link that `docc` outputs\nto display a local preview in your browser.\n\n> Note:\n>\n> If you installed DocC by downloading a toolchain from Swift.org,\n> `docc` is located in `usr/bin/`,\n> relative to the installation path of the toolchain.\n> Make sure your shell's `PATH` environment variable\n> includes that directory.\n>\n> If you installed DocC by downloading Xcode,\n> run `xcrun docc preview TSPL.docc` instead.\n\n"
        },
        {
          "name": "Style.md",
          "type": "blob",
          "size": 19.908203125,
          "content": "# The Book’s Structure\n\nTSPL is divided into three main parts, plus some front matter,\nwhich serve complementary functions:\n\n**A Swift Tour**,\ncommonly referred to as “the tour”,\nshows you a bunch of interesting Swift code,\nbut it tells you almost nothing about how the language works.\nFor example, the guide has an entire chapter about optional chaining,\nbut it’s summarized in just a few sentences in the tour.\nThe tour just needs to give you the syntax and a taste of how to use it;\nit relies on the guide to provide the actual in-depth explanation\nof how optional chaining works in general and when you should use it.\n\nThe intention of the tour is that\nit can be read in its entirety in a single sitting.\nA beginner will get a high-level view of what’s possible in Swift.\nA reader with more programming background will learn\n“enough Swift to be dangerous” — that is,\nenough of the language syntax to start muddling along on a first project,\nand then come back to TSPL when they’re ready to learn more than\njust surface level syntax for concepts they already know from other languages.\n\n**Language Guide**,\ncommonly referred to as “the guide”,\nleads you through the Swift language in a pedagogically useful, linear order.\nIt doesn't promise to show you every feature of\nthe language or the Swift standard library,\nand it hand-waves over the exact details\nof some of the more complicated underlying bits.\nThe guide leans on the reference to resolve the nitty-gritty detail questions\nand to exhaustively cover the language.\nUnlike the reference,\nit walks you through step-by-step explanations,\nshowing examples of the language features in action,\nand it assumes very little prior knowledge.\n\nTo maintain the promise of a linear reading order\nwhen you add new sections to the guide,\nmake sure that all of the syntax and concepts that you use in your explanations\nare already discussed in previous chapters.\n“The Basics” exists, in large part, to introduce a bunch of syntax and concepts\nthat the early chapters of the guide need\n— many topics from “The Basics” are covered again later in the guide in more detail.\n\nThe guide includes types from the Swift standard library for two reasons:\nthey’re needed by an explanation of a language concept,\nor they’re so common that readers wouldn’t\nbe able to build anything useful without them.\nThe latter reason includes a judgement call.\nWhen new types are introduced in the Swift standard library,\nwe usually need to discuss whether & where to add them to TSPL.\n\nThe guide can be broken down into three major chunks:\nbasic topics, data-modeling topics, and advanced topics.\nBasic topics is everything before the introduction of\nenumerations, structures, and classes.\nAdvanced topics is everything after deinitialization.\nData modeling is the content in between.\nThe linear flow is intended to make sense,\neven if you stop reading for a while between chunks.\nFor example, reading just the basic topics gives you enough information\nto write programs that have only unstructured “primitive” data.\nThe chapters in each chunk are ordered with fundamental topics at the beginning,\nand topics that most readers can skip at the end.\n\n**Language Reference**,\ncommonly referred to as “the reference”,\ndescribes every aspect of the Swift language in complete detail,\nbut it makes no attempt to be an instructional text.\nIts material is ordered according to the shape of the formal grammar,\nand it hand-waves over examples and applications.\nSeveral places explicitly link back to the guide for examples.\nIt doesn't need to be as approachable for beginners,\nbecause the guide handles that,\nbut it does need to be accurate and unambiguous,\nshining its flashlight into infrequently explored areas of the language.\nTo accomplish that,\nit sometimes must sacrifice approachability or user-friendliness.\nThat's ok — many readers won't even need the reference,\nbut if the reference is unclear,\nthe readers who need an answer have nowhere else to go.\n\nWithin the reference, sections follow a predictable four-part structure:\n\n* A few sentences briefly describe the language construct named by the heading.\n* A code outline shows its general syntactic shape.\n* A few paragraphs describe it in more detail.\n* A grammar formally describes the syntax.\n\nThe purpose of the formal grammar\nis to be able to unambiguously answer questions of what’s valid Swift\n(without commenting on meaning)\nfor readers whose question wasn’t fully answered by the prose in the reference.\nIt’s primarily aimed at human readers,\nwhich means it’s not always suitable for generating a parser for Swift code.\n\n# Terms and Rules\n\n## attribute names\n\nIn the guide, write `@` before attribute names;\nin the reference, omit it.\n\n## back deploy\n\nSpelled as two words, not closed up or hyphenated.\n\n## compiler, the\n\nSee entry for *Swift*.\n\n## deprecation\n\nIn the language reference,\ninclude a deprecation note at the start of a section\nthat describes a deprecated feature.\nUse wording and markup like the following:\n\n```\n> Deprecated:\n> This attribute is deprecated;\n> use the <doc:Attributes#main> attribute instead.\n> In Swift 6,\n> using this attribute will be an error.\n```\n\n## definite initialization\n\nNot “definitive initialization”.\nDon‘t abbreviate as DI.\n\n## function\n\nIn the reference,\n“function” includes both free functions and member functions,\nso we don’t also mention methods separately.\nIn the guide, we write “functions and methods”.\n\n## headings\n\nUse number signs (`#`) for headings, not underlines.\n\nAlthough level four headings are allowed and the book does use them,\nyou should generally try to avoid them.\nDeeply nested headings often indicate\nthat there’s a better way to organize the content.\n\n## macro names\n\nIn the guide,\nwrite `@` before the name when referring to attached macros\nand `#` before the name when referring to freestanding macros.\nIn the reference, omit it.\n\n## memberwise initializer\n\nNot hyphenated as “member-wise”.\n\n## method\n\nSee entry for *function*.\n\n## non-optional\n\nHyphenated to avoid the misreading as nono-ptional.\nNormal rules for hyphenation from Apple Style Guide would omit the hyphen.\n\nSee also commit 51c4fbc135a5e82343a0f5d9121f8a060b59f1a3 and <rdar://problem/44881846>.\n\n## non-asynchronous\n\nUse “synchronous” instead of this double negation.\n\n## operator\n\nWhen introducing a named operator for the first time,\ngive its name followed by its symbol.\nIn subsequent use, use the symbol on its own.\nFor example:\n\n> By default,\n> custom classes and structures don’t have an implementation of\n> the *equal to* operator (`==`) or *not equal to* operator (`!=`).\n> You usually implement the `==` operator,\n> and use the Swift standard library’s default implementation of the `!=` operator\n> that negates the result of the `==` operator.\n> There are two ways to implement the `==` operator.\n\nIf the operator doesn’t have an established English name,\nmake sure you get tech review on the name you invent for it.\n\n## optional binding\n\nOmit the article: \"use optional binding\", not \"use an optional binding\".\n\n## passive voice\n\nIn general,\nthe writing guidance to avoid passive voice\nwhen you could write the sentence in active still applies\nbecause the active voice tends to be more readable.\nHowever,\nbecause of the subject matter in TSPL,\nit’s sometimes the case that\nthe active form of a sentence has no meaningful subject\nbecause the action is performed by some vague compiler-Swift-parser entity.\nIn that case, passive voice is sometimes the clearest way to write\na sentence whose focus is the action rather than the agent.\n\nFor example, the phrase “X is understood as Y”\nappears several times in the reference\nwhen describing the meaning of a piece of syntax.\nIn this case, passive voice is clearer than active\nbecause there isn’t a clear agent performing the understanding\nand the identity of that agent is irrelevant.\n\n## potential suspension point\n\nThis is the preferred wording when describing the semantics of `await`.\nIf context has already made that clear and repeating “potential” becomes wordy,\nyou can shorten it to just “suspension point”.\n\n## punctuation before a code listing\n\nWrite a colon after a sentence that ends with a phrase like\n“as follows” or “as shown below”,\nwhere the code listing is basically acting like a part of the sentence,\nand the prose is explicitly referring to it.\nUse a colon after a sentence fragment like “For example:”.\nWrite a period after sentences that make a statement about the code\nbut don’t include words that refer to the code.\nUse a period for sentences that begin with a phrase like\n“In the following code”.\n\n> **Note:**\n> This usage isn’t entirely consistent in the existing text.\n> We should have a discussion about this with Editorial.\n\n## runtime, run time\n\nApple Style Guide uses “runtime” for both\nthe point in time at which code is run (the run time)\nand the environment in which it is being run (the runtime).\nSo far, because we don’t document the Swift runtime environment\nin the same way that the Obj-C runtime is documented,\nwe haven’t needed to make this distinction.\n(We don’t document the Swift runtime, in part,\nbecause it doesn’t expose any API like the Obj-C runtime does.)\nIn general, because the terms are used differently,\nthe difference is obvious from context,\nwith the exception of phrases like “a run-time error” and “a runtime error”,\nwhich refer respectively to\nan error that occurs while running the code\nand an error that comes from or is related to the Swift runtime environment.\n\n## shared mutable state\n\nAvoid when describing actors.\nBy design, actors specifically *avoid* having shared mutable state —\ntheir mutable state is private,\nand accessible only through the actor's (async) methods.\n\n## standard library\n\nSpell out in full as “the Swift standard library“ on the first use.\nIf context already makes it clear\nand repeating the full name becomes wordy,\nyou can shorted it to just “the standard library”\nin continued discussion.\n(We currently don‘t have any examples of doing that.)\n\nNot “stdlib“ or “the stdlib“.\n\n## spawn, start\n\nUse “add” instead to refer to creating a new task,\nto match the API symbol name.\n(These names were used in an earlier version of the SE proposal.)\n\n## suspension point\n\nSee entry for *potential suspension point*.\n\n## syntax outline\n\nUse only when demonstrating the shape of a syntactic construction.\nWhen referring to the placeholders (aka blue bubbles)\nin body text that comes after the syntax outline,\nitalicize their name.\n\nSyntax outlines are used very sparingly in the guide,\nbut extensively in the reference.\n\n## Swift\n\nIn the guide, we use Swift as a “friendly” subject\nwhen describing something that the compiler or the language is doing.\nFor example:\n\n> Swift assumes that you are referring\n> to a property or method of the current instance.\n>\n> Note that Swift infers a type of `String` for the `someString` constant.\n>\n> Swift gives you a warning if you use an optional value\n> where a value of type `Any` is expected.\n\nIn the reference,\nwe refer to the compiler specifically\nwhen it‘s the actual agent performing the action.\nWe don’t distinguish between the parts of the compiler\nlike the parser or the lexer or the optimizer.\n\n# Tone\n\nIn general, and especially in the guide,\nthe writing approach should carry a sense of joy.\nExamples should be easy and pleasant to read,\nwhich means we prefer code that’s realistic\nand many chapters weave a common narrative thread across multiple examples.\nAlthough that continuous narrative connection\ncan make later changes more expensive,\non the whole we think it’s worth it because it makes the chapter\nflow better and hang together better as a cohesive whole.\n\nIn the interest of readability and approachability,\nwe don’t write examples that have\nsingle-letter or meaningless identifiers,\neven in the reference and even when we‘re only describing syntax.\nInstead, when there’s no relevant semantic meaning,\nwe use types like `SomeStructure` and variables like `someArray`.\n\nSome of our examples include humorous references to things outside the book,\nsuch as the joke about Firefly crew members in the guided tour.\nSome of them are marked with a REFERENCE comment that explains the reference.\nAll of them need to be easily ignored\nif you didn’t catch the reference,\nand it should be easy to search for the reference online\nif you noticed that there was a reference but didn’t get the joke.\n\nCode listings in the guide typically follow a three part formula.\nThe paragraph before the code listing\nframes the problem that we’re trying to solve\nand explains what the code will do at a very high level.\nThe paragraph (or sometimes multiple paragraphs) after the code\nwalk through what the code listing did in more detail.\nThe intention here is essentially to provide progressive disclosure:\nAdvanced readers can skip the paragraph after the code listing,\nand might even be able to skip some of the text before it,\nbut the full no-assumptions-made explanation of the code\nis still available to readers who need it.\n\nFor a discussion of the balance between the tour, the guide, and the reference,\nsee the README file at the top level of this repository.\n\n# Semantic Line Breaks\n\nThe markdown files in this repository use semantic line breaks,\nwhere lines end at sentence and clause boundaries.\nThis keeps lines short enough to ensure that\ndiffs remain readable when shown in places like\npull requests,\ncommit notification emails,\nand the terminal.\nBecause the lines break in meaningful places,\nchanges don’t require re-wrapping entire paragraphs,\nso only the lines that changed get marked.\nThis lets tools like `git-blame` give per-line history.\n\nAs you’re writing,\naim to keep lines 80 characters or less.\nStart a new line after each sentence,\nand as needed at clause boundaries.\nFor a long list,\nyou can put each list item on its own line —\nthis is mostly helpful for lists you want to alphabetize\nbecause it lets you sort those lines.\nThere are several different styles throughout the book,\nso don’t feel the need to exactly follow any one approach.\n\nWhen you’re editing existing text,\npreserve the line breaks when feasible\nto help keep the diffs small and preserve per-line history.\nDon’t rewrap an existing line just because it’s too long,\nunless you’re actually making other changes.\nFor historical reasons,\nthere are parts of the book\nthat use a line length of 90 or 100 characters;\nrewrapping them just for the sake of line length\nwould make history harder to follow and create a bunch of noisy diffs.\n\nAs a historical note,\n“UNIX for Beginners” by Brian W. Kernighan in 1974\nis possibly the origin of this approach.\nPage 11 has the following guidance\nin the section *Hints for Preparing Documents*:\n\n> Most documents go through several versions\n> (always more than you expected)\n> before they are finally finished.\n> Accordingly,\n> you should do whatever possible to make the job of changing them easy.\n>\n> First,\n> when you do the purely mechanical operations of typing,\n> type so that subsequent editing will be easy.\n> Start each sentence on a new line.\n> Make lines short, and break lines at natural places,\n> such as after commas and semicolons,\n> rather than randomly.\n> Since most people change documents by rewriting phrases\n> and adding, deleting and rearranging sentences,\n> these precautions simplify any editing you have to do later.\n\nAlthough this guidance was originally written in the context of\npreparing `nroff` and `troff` files\nusing the line editor `ed(1)` on a paper teletype,\nit continues to hold up well today\nbecause Git and other programming tools\nstill generally expect text to be made up of lines of <80 characters.\n\n# Formal Grammar\n\nThese guidelines apply to the “Grammar of X” blocks in the reference.\n\n**Write an ASCII arrow.**\nThe arrow (`-->`) can be read as “can consist of.”\n\nTo make the arrow in RST, use two hyphens (`-`) followed by a right-hand angle bracket (`>`).\nThe production path is responsible for making it render as a nice Unicode arrow.\n\n**Write literals with double backticks.**\nFor example:\n\n    forty-two --> ``42``\n\n**Write syntactic category names without any extra markup.**\nWithin a syntax-grammar block, they appear in italics automatically.\nDon’t refer to them from the English prose above them.\n\n**Use full English words as the names for syntactic categories.**\nThere are cases where this isn’t feasible because of space considerations.\nFor example, in the grammar for a C-style for statement,\nthe category that defines the initialization part of the for statement\nhad to be shortened to *for-init*\n(instead of *for-initialization*, as the rule specifies).\nIn this case, nothing seems lost from a readability or pedagogical perspective.\n\n    c-style-for-statement --> ``for`` for-init-OPT ``;`` expression-OPT ``;`` basic-expression-OPT brace-item-list\n    c-style-for-statement --> ``for`` ``(`` for-init-OPT ``;`` expression-OPT ``;`` basic-expression-OPT ``)`` brace-item-list\n\n    for-init --> variable-declaration | expression\n\n**Use a pipe (`|`) to indicate alternation.**\nWhen there are too many alternatives\nto fit on a single line, use a new line for each alternative.\nDon’t mix pipes and newlines.\n\nFor example, to specify that a *case-block-item* can consist of a *declaration*,\n*expression*, or a *statement*, you can use a pipe instead of a new line,\nbecause all three alternatives fit nicely on one line:\n\n    code-block-item --> declaration | expression | statement\n\nWhen using pipes,\nkeep the number of items in each alternative small for readability.\nThe most common case is that each alternative is either\na single literal or a single syntactic category,\nalthough that's not always possible.\n\nOn the other hand, consider the grammar of a control transfer statement:\n\n    control-transfer-statement --> break-statement\n    control-transfer-statement --> continue-statement\n    control-transfer-statement --> fallthrough-statement\n    control-transfer-statement --> return-statement\n\nThere likely wouldn’t be room on a single line to use a pipe to separate each alternative.\nThe following tends not to look good:\n\n    control-transfer-statement --> break-statement | continue-statement | fallthrough-statement | return-statement\n\n**Append `-OPT` to indicate optionality.**\nWithin a syntax-grammar block,\nthis is translated to a subscript “opt” automatically.\n\n**Use plural names for repetition.**\nIn BNF, this is represented with a plus (`+`) or star (`*`).\nThe syntax of our formal grammar doesn’t include repetition operators,\nso we use two syntactic categories to allow repetition.\nFor example:\n\n    categories --> category categories-OPT\n    category --> More formal grammar goes here.\n\n    switch-statement --> ``switch`` basic-expression { switch-cases-OPT }\n    switch-cases --> switch-case switch-cases-OPT\n    switch-case --> case-label statements\n    switch-case --> default-label statements\n    switch-case --> conditional-switch-case\n\nA plural name consists of only a repeated list of the singular version.\nIf you need separators like commas, call it a “list”.\n\n    case-label --> attributes-OPT ``case`` case-item-list ``:``\n    case-item-list --> pattern where-clause-OPT | pattern where-clause-OPT ``,`` case-item-list\n\nAs shown above, use right-recursion when dealing with repetition.\n\n**Omit grouping parentheses.**\nOur formal grammar doesn’t use grouping parentheses.\nOptionality using `-OPT` always applies to exactly one token before it,\nand only one level of alternation using `|` or line breaks is allowed.\n\nIf you see BNF grammar for new language features that uses parentheses,\nyou need to exercise some creativity and judgment when removing them.\n\nFor example,\ntranslating this part of a BNF rule required coming up with a new category,\nwhich then needed to be defined:\n\n    ('where' expr)?\n\nIt became:\n\n    guard-expression-OPT\n    guard-expression --> ``where`` expression\n\nThis BNF rule was a bit dense and required the application of several of the rules above:\n\n    stmt-switch-case ::= (case-label+ | default-label) brace-item*\n\nIt became:\n\n    switch-case --> case-labels brace-items-OPT | default-label brace-items-OPT\n\n"
        },
        {
          "name": "TSPL.docc",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}