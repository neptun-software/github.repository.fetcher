{
  "metadata": {
    "timestamp": 1736709639946,
    "page": 10,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "airbnb/swift",
      "stars": 2458,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0625,
          "content": "*.md linguist-detectable=true\n*.md linguist-documentation=false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0322265625,
          "content": ".build\n.swiftpm\n.DS_Store\n.vscode"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.59765625,
          "content": "Airbnb has adopted a Code of Conduct that we expect project participants to adhere to. Please [read the full Code of Conduct text](https://airbnb.io/codeofconduct/) so that you can understand what actions will and will not be tolerated. Report violations to the maintainers of this project or to [opensource-conduct@airbnb.com](mailto:opensource-conduct@airbnb.com).\n\nReports sent to [opensource-conduct@airbnb.com](mailto:opensource-conduct@airbnb.com) are received by Airbnb's open source code of conduct moderation team, which is composed of Airbnb employees. All communications are private and confidential.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.2783203125,
          "content": "# Contributing\n\nTo contribute a new style rule first fork the repo and create your branch from `master`. Then open a PR and propose the rule following the structure below.\n\nIf you have an idea that's not completely fleshed out, please [open an issue](https://github.com/airbnb/swift/issues/new) to discuss.\n\n## Structure of a new rule:\n\nAt minimum every rule should contain:\n\n1. A permalink to reference easily.\n1. A short description.\n1. A link to the appropriate [SwiftLint](https://github.com/realm/SwiftLint) / [SwiftFormat](https://github.com/nicklockwood/SwiftFormat) rule.\n1. _(optional)_ A \"Why?\" section describing the reasoning behind the rule.\n1. A code example describing the incorrect and correct behaviours.\n\n#### Example:\n\n* <a id='an-id'></a><a href='#an-id'>(link)</a>\n**This is the description of the rule.** [![SwiftLint: some_rule](https://img.shields.io/badge/SwiftLint-some__rule-007A87.svg)](https://github.com/realm/SwiftLint/blob/master/Rules.md#some_rule) [![SwiftFormat: some_rule](https://img.shields.io/badge/SwiftFormat-some__rule-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat#rules)\n\n  <details>\n\n  #### Why?\n  This is an explanation of why this rule is needed.\n\n  ```swift\n  // WRONG\n  func someIncorrectCode {}\n\n  // GOOD\n  func someGoodCode {}\n  ```\n\n  </details>\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.0615234375,
          "content": "source 'https://rubygems.org' do\n  gem \"rake\", \"~> 13.0.0\"\nend\n"
        },
        {
          "name": "Gemfile.lock",
          "type": "blob",
          "size": 0.166015625,
          "content": "GEM\n  specs:\n\nGEM\n  remote: https://rubygems.org/\n  specs:\n    rake (13.0.6)\n\nPLATFORMS\n  arm64-darwin-23\n  ruby\n\nDEPENDENCIES\n  rake (~> 13.0.0)!\n\nBUNDLED WITH\n   2.5.4\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0380859375,
          "content": "MIT License\n\nCopyright (c) 2012 Airbnb\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "PULL_REQUEST_TEMPLATE.md",
          "type": "blob",
          "size": 0.0693359375,
          "content": "#### Summary\n\n<!--- required --->\n\n#### Reasoning\n\n<!--- required --->\n"
        },
        {
          "name": "Package.resolved",
          "type": "blob",
          "size": 0.3125,
          "content": "{\n  \"pins\" : [\n    {\n      \"identity\" : \"swift-argument-parser\",\n      \"kind\" : \"remoteSourceControl\",\n      \"location\" : \"https://github.com/apple/swift-argument-parser\",\n      \"state\" : {\n        \"revision\" : \"e394bf350e38cb100b6bc4172834770ede1b7232\",\n        \"version\" : \"1.0.3\"\n      }\n    }\n  ],\n  \"version\" : 2\n}\n"
        },
        {
          "name": "Package.swift",
          "type": "blob",
          "size": 1.611328125,
          "content": "// swift-tools-version: 5.6\nimport PackageDescription\n\nlet package = Package(\n  name: \"AirbnbSwift\",\n  platforms: [.macOS(.v10_13)],\n  products: [\n    .plugin(name: \"FormatSwift\", targets: [\"FormatSwift\"]),\n  ],\n  dependencies: [\n    .package(url: \"https://github.com/apple/swift-argument-parser\", from: \"1.0.3\"),\n  ],\n  targets: [\n    .plugin(\n      name: \"FormatSwift\",\n      capability: .command(\n        intent: .custom(\n          verb: \"format\",\n          description: \"Formats Swift source files according to the Airbnb Swift Style Guide\"),\n        permissions: [\n          .writeToPackageDirectory(reason: \"Format Swift source files\"),\n        ]),\n      dependencies: [\n        \"AirbnbSwiftFormatTool\",\n        \"swiftformat\",\n        \"SwiftLintBinary\",\n      ]),\n\n    .executableTarget(\n      name: \"AirbnbSwiftFormatTool\",\n      dependencies: [\n        .product(name: \"ArgumentParser\", package: \"swift-argument-parser\"),\n      ],\n      resources: [\n        .process(\"airbnb.swiftformat\"),\n        .process(\"swiftlint.yml\"),\n      ]),\n\n    .testTarget(\n      name: \"AirbnbSwiftFormatToolTests\",\n      dependencies: [\"AirbnbSwiftFormatTool\"]),\n\n    .binaryTarget(\n      name: \"swiftformat\",\n      url: \"https://github.com/calda/SwiftFormat/releases/download/0.56-beta-4/SwiftFormat.artifactbundle.zip\",\n      checksum: \"a68b82c004343bcb1d1b07f97429bab868eb42d15bdbba9c6eb81d5bb061e2f9\"),\n\n    .binaryTarget(\n      name: \"SwiftLintBinary\",\n      url: \"https://github.com/realm/SwiftLint/releases/download/0.55.1/SwiftLintBinary-macos.artifactbundle.zip\",\n      checksum: \"722a705de1cf4e0e07f2b7d2f9f631f3a8b2635a0c84cce99f9677b38aa4a1d6\"),\n  ])\n"
        },
        {
          "name": "Plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 137.013671875,
          "content": "# Airbnb Swift Style Guide\n\n[![](https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fairbnb%2Fswift%2Fbadge%3Ftype%3Dswift-versions)](https://swiftpackageindex.com/airbnb/swift)\n\n## Goals\n\nFollowing this style guide should:\n\n* Make it easier to read and begin understanding unfamiliar code.\n* Make code easier to maintain.\n* Reduce simple programmer errors.\n* Reduce cognitive load while coding.\n* Keep discussions on diffs focused on the code's logic rather than its style.\n\nNote that brevity is not a primary goal. Code should be made more concise only if other good code qualities (such as readability, simplicity, and clarity) remain equal or are improved.\n\n## Guiding Tenets\n\n* This guide is in addition to the official [Swift API Design Guidelines](https://swift.org/documentation/api-design-guidelines/). These rules should not contradict that document.\n* These rules should not fight Xcode's <kbd>^</kbd> + <kbd>I</kbd> indentation behavior.\n* We strive to make every rule lintable:\n  * If a rule changes the format of the code, it needs to be able to be reformatted automatically (either using [SwiftFormat](https://github.com/nicklockwood/SwiftFormat) or [SwiftLint](https://github.com/realm/SwiftLint) autocorrect).\n  * For rules that don't directly change the format of the code, we should have a lint rule that throws a warning.\n  * Exceptions to these rules should be rare and heavily justified.\n\n## Swift Package Manager command plugin\n\nThis repo includes a Swift Package Manager command plugin that you can use to automatically reformat or lint your package according to the style guide. To use this command plugin with your package, all you need to do is add this repo as a dependency:\n\n```swift\ndependencies: [\n  .package(url: \"https://github.com/airbnb/swift\", from: \"1.0.0\"),\n]\n```\n\nand then run the `format` command plugin in your package directory:\n\n```shell\n$ swift package format\n```\n\n<details>\n<summary>Usage guide</summary>\n\n```shell\n# Supported in Xcode 14+. Prompts for permission to write to the package directory.\n$ swift package format\n\n# When using the Xcode 13 toolchain, or a noninteractive shell, you must use:\n$ swift package --allow-writing-to-package-directory format\n\n# To just lint without reformatting, you can use `--lint`:\n$ swift package format --lint\n\n# By default the command plugin runs on the entire package directory.\n# You can exclude directories using `exclude`:\n$ swift package format --exclude Tests\n\n# Alternatively you can explicitly list the set of paths and/or SPM targets:\n$ swift package format --paths Sources Tests Package.swift\n$ swift package format --targets AirbnbSwiftFormatTool\n\n# The plugin infers your package's minimum Swift version from the `swift-tools-version`\n# in your `Package.swift`, but you can provide a custom value with `--swift-version`:\n$ swift package format --swift-version 5.3\n```\n\nThe package plugin returns a non-zero exit code if there is a lint failure that requires attention.\n - In `--lint` mode, any lint failure from any tool will result in a non-zero exit code.\n - In standard autocorrect mode without `--lint`, only failures from SwiftLint lint-only rules will result in a non-zero exit code.\n\n</details>\n\n## Table of Contents\n\n1. [Xcode Formatting](#xcode-formatting)\n1. [Naming](#naming)\n1. [Style](#style)\n    1. [Functions](#functions)\n    1. [Closures](#closures)\n    1. [Operators](#operators)\n1. [Patterns](#patterns)\n1. [File Organization](#file-organization)\n1. [Objective-C Interoperability](#objective-c-interoperability)\n1. [Contributors](#contributors)\n1. [Amendments](#amendments)\n\n## Xcode Formatting\n\n_You can enable the following settings in Xcode by running [this script](resources/xcode_settings.bash), e.g. as part of a \"Run Script\" build phase._\n\n* <a id='column-width'></a>(<a href='#column-width'>link</a>) **Each line should have a maximum column width of 100 characters.** [![SwiftFormat: wrap](https://img.shields.io/badge/SwiftFormat-wrap-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#wrap)\n\n  <details>\n\n  #### Why?\n  Due to larger screen sizes, we have opted to choose a page guide greater than 80.\n\n  We currently only \"strictly enforce\" (lint / auto-format) a maximum column width of 130 characters to limit the cases where manual clean up is required for reformatted lines that fall slightly above the threshold.\n\n  </details>\n\n* <a id='spaces-over-tabs'></a>(<a href='#spaces-over-tabs'>link</a>) **Use 2 spaces to indent lines.** [![SwiftFormat: indent](https://img.shields.io/badge/SwiftFormat-indent-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#indent)\n\n* <a id='trailing-whitespace'></a>(<a href='#trailing-whitespace'>link</a>) **Trim trailing whitespace in all lines.** [![SwiftFormat: trailingSpace](https://img.shields.io/badge/SwiftFormat-trailingSpace-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#trailingSpace)\n\n**[⬆ back to top](#table-of-contents)**\n\n## Naming\n\n* <a id='use-camel-case'></a>(<a href='#use-camel-case'>link</a>) **Use PascalCase for type and protocol names, and lowerCamelCase for everything else.**\n\n  <details>\n\n  ```swift\n  protocol SpaceThing {\n    // ...\n  }\n\n  class SpaceFleet: SpaceThing {\n\n    enum Formation {\n      // ...\n    }\n\n    class Spaceship {\n      // ...\n    }\n\n    var ships: [Spaceship] = []\n    static let worldName: String = \"Earth\"\n\n    func addShip(_ ship: Spaceship) {\n      // ...\n    }\n  }\n\n  let myFleet = SpaceFleet()\n  ```\n\n  </details>\n\n  _Exception: You may prefix a private property with an underscore if it is backing an identically-named property or method with a higher access level._\n\n  <details>\n\n  #### Why?\n  There are specific scenarios where a backing property or method that is prefixed with an underscore could be easier to read than using a more descriptive name.\n\n  - Type erasure\n\n  ```swift\n  public final class AnyRequester<ModelType>: Requester {\n\n    public init<T: Requester>(_ requester: T) where T.ModelType == ModelType {\n      _executeRequest = requester.executeRequest\n    }\n\n    @discardableResult\n    public func executeRequest(\n      _ request: URLRequest,\n      onSuccess: @escaping (ModelType, Bool) -> Void,\n      onFailure: @escaping (Error) -> Void)\n      -> URLSessionCancellable\n    {\n      return _executeRequest(request, onSuccess, onFailure)\n    }\n\n    private let _executeRequest: (\n      URLRequest,\n      @escaping (ModelType, Bool) -> Void,\n      @escaping (Error) -> Void)\n      -> URLSessionCancellable\n  }\n  ```\n\n  - Backing a less specific type with a more specific type\n\n  ```swift\n  final class ExperiencesViewController: UIViewController {\n    // We can't name this view since UIViewController has a view: UIView property.\n    private lazy var _view = CustomView()\n\n    loadView() {\n      self.view = _view\n    }\n  }\n  ```\n\n  </details>\n\n* <a id='bool-names'></a>(<a href='#bool-names'>link</a>) **Name booleans like `isSpaceship`, `hasSpacesuit`, etc.** This makes it clear that they are booleans and not other types.\n\n* <a id='capitalize-acronyms'></a>(<a href='#capitalize-acronyms'>link</a>) **Acronyms in names (e.g. `URL`) should be all-caps except when it’s the start of a name that would otherwise be lowerCamelCase, in which case it should be uniformly lower-cased.**\n\n  <details>\n\n  ```swift\n  // WRONG\n  class UrlValidator {\n\n    func isValidUrl(_ URL: URL) -> Bool {\n      // ...\n    }\n\n    func isProfileUrl(_ URL: URL, for userId: String) -> Bool {\n      // ...\n    }\n  }\n\n  let URLValidator = UrlValidator()\n  let isProfile = URLValidator.isProfileUrl(URLToTest, userId: IDOfUser)\n\n  // RIGHT\n  class URLValidator {\n\n    func isValidURL(_ url: URL) -> Bool {\n      // ...\n    }\n\n    func isProfileURL(_ url: URL, for userID: String) -> Bool {\n      // ...\n    }\n  }\n\n  let urlValidator = URLValidator()\n  let isProfile = urlValidator.isProfileURL(urlToTest, userID: idOfUser)\n  ```\n\n  </details>\n\n* <a id='general-part-first'></a>(<a href='#general-part-first'>link</a>) **Names should be written with their most general part first and their most specific part last.** The meaning of \"most general\" depends on context, but should roughly mean \"that which most helps you narrow down your search for the item you're looking for.\" Most importantly, be consistent with how you order the parts of your name.\n\n  <details>\n\n  ```swift\n  // WRONG\n  let rightTitleMargin: CGFloat\n  let leftTitleMargin: CGFloat\n  let bodyRightMargin: CGFloat\n  let bodyLeftMargin: CGFloat\n\n  // RIGHT\n  let titleMarginRight: CGFloat\n  let titleMarginLeft: CGFloat\n  let bodyMarginRight: CGFloat\n  let bodyMarginLeft: CGFloat\n  ```\n\n  </details>\n\n* <a id='hint-at-types'></a>(<a href='#hint-at-types'>link</a>) **Include a hint about type in a name if it would otherwise be ambiguous.**\n\n  <details>\n\n  ```swift\n  // WRONG\n  let title: String\n  let cancel: UIButton\n\n  // RIGHT\n  let titleText: String\n  let cancelButton: UIButton\n  ```\n\n  </details>\n\n* <a id='past-tense-events'></a>(<a href='#past-tense-events'>link</a>) **Event-handling functions should be named like past-tense sentences.** The subject can be omitted if it's not needed for clarity.\n\n  <details>\n\n  ```swift\n  // WRONG\n  class ExperiencesViewController {\n\n    private func handleBookButtonTap() {\n      // ...\n    }\n\n    private func modelChanged() {\n      // ...\n    }\n  }\n\n  // RIGHT\n  class ExperiencesViewController {\n\n    private func didTapBookButton() {\n      // ...\n    }\n\n    private func modelDidChange() {\n      // ...\n    }\n  }\n  ```\n\n  </details>\n\n* <a id='avoid-class-prefixes'></a>(<a href='#avoid-class-prefixes'>link</a>) **Avoid Objective-C-style acronym prefixes.** This is no longer needed to avoid naming conflicts in Swift.\n\n  <details>\n\n  ```swift\n  // WRONG\n  class AIRAccount {\n    // ...\n  }\n\n  // RIGHT\n  class Account {\n    // ...\n  }\n  ```\n\n  </details>\n\n* <a id='avoid-controller-suffix'></a>(<a href='#avoid-controller-suffix'>link</a>) **Avoid `*Controller` in names of classes that aren't view controllers.**\n  <details>\n\n  #### Why?\n  Controller is an overloaded suffix that doesn't provide information about the responsibilities of the class.\n\n  </details>\n\n**[⬆ back to top](#table-of-contents)**\n\n## Style\n\n* <a id='use-implicit-types'></a>(<a href='#use-implicit-types'>link</a>) **Don't include types where they can be easily inferred.** [![SwiftFormat: redundantType](https://img.shields.io/badge/SwiftFormat-redundantType-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#redundantType)\n\n  <details>\n\n  ```swift\n  // WRONG\n  let sun: Star = Star(mass: 1.989e30)\n  let earth: Planet = Planet.earth\n\n  // RIGHT\n  let sun = Star(mass: 1.989e30)\n  let earth = Planet.earth\n\n  // NOT RECOMMENDED. However, since the linter doesn't have full type information, this is not enforced automatically.\n  let moon: Moon = earth.moon // returns `Moon`\n\n  // RIGHT\n  let moon = earth.moon\n  let moon: PlanetaryBody? = earth.moon\n\n  // WRONG: Most literals provide a default type that can be inferred.\n  let enableGravity: Bool = true\n  let numberOfPlanets: Int = 8\n  let sunMass: Double = 1.989e30\n\n  // RIGHT\n  let enableGravity = true\n  let numberOfPlanets = 8\n  let sunMass = 1.989e30\n  \n  // WRONG: Types can be inferred from if/switch expressions as well if each branch has the same explicit type.\n  let smallestPlanet: Planet =\n    if treatPlutoAsPlanet {\n      Planet.pluto\n    } else {\n      Planet.mercury\n    }\n\n  // RIGHT\n  let smallestPlanet =\n    if treatPlutoAsPlanet {\n      Planet.pluto\n    } else {\n      Planet.mercury\n    }\n  ```\n\n  </details>\n\n* <a id='infer-property-types'></a>(<a href='#infer-property-types'>link</a>) **Prefer letting the type of a variable or property be inferred from the right-hand-side value rather than writing the type explicitly on the left-hand side.** [![SwiftFormat: propertyTypes](https://img.shields.io/badge/SwiftFormat-propertyTypes-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#propertyTypes)\n\n  <details>\n\n  Prefer using inferred types when the right-hand-side value is a static member with a leading dot (e.g. an `init`, a `static` property / function, or an enum case). This applies to both local variables and property declarations:\n\n  ```swift\n  // WRONG\n  struct SolarSystemBuilder {\n    let sun: Star = .init(mass: 1.989e30)\n    let earth: Planet = .earth\n\n    func setUp() {\n      let galaxy: Galaxy = .andromeda\n      let system: SolarSystem = .init(sun, earth)\n      galaxy.add(system)\n    }\n  }\n  \n  // RIGHT\n  struct SolarSystemBuilder {\n    let sun = Star(mass: 1.989e30)\n    let earth = Planet.earth\n\n    func setUp() {\n      let galaxy = Galaxy.andromeda\n      let system = SolarSystem(sun, earth)\n      galaxy.add(system)\n    }\n  }\n  ```\n\n  Explicit types are still permitted in other cases:\n\n  ```swift\n  // RIGHT: There is no right-hand-side value, so an explicit type is required.\n  let sun: Star\n\n  // RIGHT: The right-hand-side is not a static member of the left-hand type.\n  let moon: PlantaryBody = earth.moon\n  let sunMass: Float = 1.989e30\n  let planets: [Planet] = []\n  let venusMoon: Moon? = nil\n  ```\n\n  There are some rare cases where the inferred type syntax has a different meaning than the explicit type syntax. In these cases, the explicit type syntax is still permitted:\n\n  ```swift\n  extension String {\n    static let earth = \"Earth\"\n  }\n\n  // WRONG: fails with \"error: type 'String?' has no member 'earth'\"\n  let planetName = String?.earth\n\n  // RIGHT\n  let planetName: String? = .earth\n  ```\n\n  ```swift\n  struct SaturnOutline: ShapeStyle { ... }\n\n  extension ShapeStyle where Self == SaturnOutline {\n    static var saturnOutline: SaturnOutline { \n      SaturnOutline() \n    }\n  }\n\n  // WRONG: fails with \"error: static member 'saturnOutline' cannot be used on protocol metatype '(any ShapeStyle).Type'\"\n  let myShape2 = (any ShapeStyle).myShape\n\n  // RIGHT: If the property's type is an existential / protocol type, moving the type\n  // to the right-hand side will result in invalid code if the value is defined in an\n  // extension like `extension ShapeStyle where Self == SaturnOutline`.\n  // SwiftFormat autocorrect detects this case by checking for the existential `any` keyword.\n  let myShape1: any ShapeStyle = .saturnOutline\n  ```\n\n  </details>\n\n* <a id='omit-self'></a>(<a href='#omit-self'>link</a>) **Don't use `self` unless it's necessary for disambiguation or required by the language.** [![SwiftFormat: redundantSelf](https://img.shields.io/badge/SwiftFormat-redundantSelf-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#redundantSelf)\n\n  <details>\n\n  ```swift\n  final class Listing {\n\n    init(capacity: Int, allowsPets: Bool) {\n      // WRONG\n      self.capacity = capacity\n      self.isFamilyFriendly = !allowsPets // `self.` not required here\n\n      // RIGHT\n      self.capacity = capacity\n      isFamilyFriendly = !allowsPets\n    }\n\n    private let isFamilyFriendly: Bool\n    private var capacity: Int\n\n    private func increaseCapacity(by amount: Int) {\n      // WRONG\n      self.capacity += amount\n\n      // RIGHT\n      capacity += amount\n\n      // WRONG\n      self.save()\n\n      // RIGHT\n      save()\n    }\n  }\n  ```\n\n  </details>\n\n* <a id='upgrade-self'></a>(<a href='#upgrade-self'>link</a>) **Bind to `self` when upgrading from a weak reference.** [![SwiftFormat: strongifiedSelf](https://img.shields.io/badge/SwiftFormat-strongifiedSelf-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#strongifiedSelf)\n\n  <details>\n\n  ```swift\n  // WRONG\n  class MyClass {\n\n    func request(completion: () -> Void) {\n      API.request() { [weak self] response in\n        guard let strongSelf = self else { return }\n        // Do work\n        completion()\n      }\n    }\n  }\n\n  // RIGHT\n  class MyClass {\n\n    func request(completion: () -> Void) {\n      API.request() { [weak self] response in\n        guard let self else { return }\n        // Do work\n        completion()\n      }\n    }\n  }\n  ```\n\n  </details>\n\n* <a id='trailing-comma-array'></a>(<a href='#trailing-comma-array'>link</a>) **Add a trailing comma on the last element of a multi-line array.** [![SwiftFormat: trailingCommas](https://img.shields.io/badge/SwiftFormat-trailingCommas-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#trailingCommas)\n\n  <details>\n\n  ```swift\n  // WRONG\n  let rowContent = [\n    listingUrgencyDatesRowContent(),\n    listingUrgencyBookedRowContent(),\n    listingUrgencyBookedShortRowContent()\n  ]\n\n  // RIGHT\n  let rowContent = [\n    listingUrgencyDatesRowContent(),\n    listingUrgencyBookedRowContent(),\n    listingUrgencyBookedShortRowContent(),\n  ]\n  ```\n\n* <a id='no-space-inside-collection-brackets'></a>(<a href='#no-space-inside-brackets'>link</a>) **There should be no spaces inside the brackets of collection literals.** [![SwiftFormat: spaceInsideBrackets](https://img.shields.io/badge/SwiftFormat-spaceInsideBrackets-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#spaceInsideBrackets)\n\n  <details>\n\n  ```swift\n  // WRONG\n  let innerPlanets = [ mercury, venus, earth, mars ]\n  let largestObjects = [ .star: sun, .planet: jupiter  ]\n\n  // RIGHT\n  let innerPlanets = [mercury, venus, earth, mars]\n  let largestObjects = [.star: sun, .planet: jupiter]\n  ```\n\n  </details>\n\n* <a id='name-tuple-elements'></a>(<a href='#name-tuple-elements'>link</a>) **Name members of tuples for extra clarity.** Rule of thumb: if you've got more than 3 fields, you should probably be using a struct.\n\n  <details>\n\n  ```swift\n  // WRONG\n  func whatever() -> (Int, Int) {\n    return (4, 4)\n  }\n  let thing = whatever()\n  print(thing.0)\n\n  // RIGHT\n  func whatever() -> (x: Int, y: Int) {\n    return (x: 4, y: 4)\n  }\n\n  // THIS IS ALSO OKAY\n  func whatever2() -> (x: Int, y: Int) {\n    let x = 4\n    let y = 4\n    return (x, y)\n  }\n\n  let coord = whatever()\n  coord.x\n  coord.y\n  ```\n\n  </details>\n\n* <a id='colon-spacing'></a>(<a href='#colon-spacing'>link</a>) **Colons should always be followed by a space, but not preceded by a space**. [![SwiftFormat: spaceAroundOperators](https://img.shields.io/badge/SwiftFormat-spaceAroundOperators-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#spacearoundoperators)\n\n  <details>\n\n  ```swift\n  // WRONG\n  let planet:CelestialObject = sun.planets[0]\n  let planet : CelestialObject = sun.planets[0]\n\n  // RIGHT\n  let planet: CelestialObject = sun.planets[0]\n  ```\n\n  ```swift\n  // WRONG\n  class Planet : CelestialObject {\n    // ...\n  }\n\n  // RIGHT\n  class Planet: CelestialObject {\n    // ...\n  }\n  ```\n\n  ```swift\n  // WRONG\n  let moons: [Planet : Moon] = [\n    mercury : [], \n    venus : [], \n    earth : [theMoon], \n    mars : [phobos,deimos],\n  ]\n\n  // RIGHT\n  let moons: [Planet: Moon] = [\n    mercury: [], \n    venus: [], \n    earth: [theMoon], \n    mars: [phobos,deimos],\n  ]\n  ```\n\n  </details>\n\n* <a id='return-arrow-spacing'></a>(<a href='#return-arrow-spacing'>link</a>) **Place a space on either side of a return arrow for readability.** [![SwiftFormat: spaceAroundOperators](https://img.shields.io/badge/SwiftFormat-spaceAroundOperators-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#spacearoundoperators)\n\n  <details>\n\n  ```swift\n  // WRONG\n  func doSomething()->String {\n    // ...\n  }\n\n  // RIGHT\n  func doSomething() -> String {\n    // ...\n  }\n  ```\n\n  ```swift\n  // WRONG\n  func doSomething(completion: ()->Void) {\n    // ...\n  }\n\n  // RIGHT\n  func doSomething(completion: () -> Void) {\n    // ...\n  }\n  ```\n\n  </details>\n\n* <a id='unnecessary-parens'></a>(<a href='#unnecessary-parens'>link</a>) **Omit unnecessary parentheses.** [![SwiftFormat: redundantParens](https://img.shields.io/badge/SwiftFormat-redundantParens-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#redundantParens)\n\n  <details>\n\n  ```swift\n  // WRONG\n  if (userCount > 0) { ... }\n  switch (someValue) { ... }\n  let evens = userCounts.filter { (number) in number.isMultiple(of: 2) }\n  let squares = userCounts.map() { $0 * $0 }\n\n  // RIGHT\n  if userCount > 0 { ... }\n  switch someValue { ... }\n  let evens = userCounts.filter { number in number.isMultiple(of: 2) }\n  let squares = userCounts.map { $0 * $0 }\n  ```\n\n  </details>\n\n* <a id='unnecessary-enum-arguments'></a> (<a href='#unnecessary-enum-arguments'>link</a>) **Omit enum associated values from case statements when all arguments are unlabeled.** [![SwiftFormat: redundantPattern](https://img.shields.io/badge/SwiftFormat-redundantPattern-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#redundantPattern)\n\n  <details>\n\n  ```swift\n  // WRONG\n  if case .done(_) = result { ... }\n\n  switch animal {\n  case .dog(_, _, _):\n    ...\n  }\n\n  // RIGHT\n  if case .done = result { ... }\n\n  switch animal {\n  case .dog:\n    ...\n  }\n  ```\n\n  </details>\n\n* <a id='inline-let-when-destructuring'></a> (<a href='#inline-let-when-destructuring'>link</a>) **When destructuring an enum case or a tuple, place the `let` keyword inline, adjacent to each individual property assignment.** [![SwiftFormat: hoistPatternLet](https://img.shields.io/badge/SwiftFormat-hoistPatternLet-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#hoistPatternLet)\n\n  <details>\n\n    ```swift\n    // WRONG\n    switch result {\n    case let .success(value):\n      // ...\n    case let .error(errorCode, errorReason):\n      // ...\n    }\n\n    // WRONG\n    guard let case .success(value) else {\n      return\n    }\n\n    // RIGHT\n    switch result {\n    case .success(let value):\n      // ...\n    case .error(let errorCode, let errorReason):\n      // ...\n    }\n\n    // RIGHT\n    guard case .success(let value) else {\n      return\n    }\n    ```\n\n    #### Why?\n\n    1. **Consistency**: We should prefer to either _always_ inline the `let` keyword or _never_ inline the `let` keyword. In Airbnb's Swift codebase, we [observed](https://github.com/airbnb/swift/pull/126#discussion_r631979244) that inline `let` is used far more often in practice (especially when destructuring enum cases with a single associated value).\n\n    2. **Clarity**: Inlining the `let` keyword makes it more clear which identifiers are part of the conditional check and which identifiers are binding new variables, since the `let` keyword is always adjacent to the variable identifier.\n\n    ```swift\n    // `let` is adjacent to the variable identifier, so it is immediately obvious\n    // at a glance that these identifiers represent new variable bindings\n    case .enumCaseWithSingleAssociatedValue(let string):\n    case .enumCaseWithMultipleAssociatedValues(let string, let int):\n\n    // The `let` keyword is quite far from the variable identifiers,\n    // so it is less obvious that they represent new variable bindings\n    case let .enumCaseWithSingleAssociatedValue(string):\n    case let .enumCaseWithMultipleAssociatedValues(string, int):\n\n    ```\n\n  </details>\n\n* <a id='attributes-on-prev-line'></a>(<a href='#attributes-on-prev-line'>link</a>) **Place attributes for functions, types, and computed properties on the line above the declaration**. [![SwiftFormat: wrapAttributes](https://img.shields.io/badge/SwiftFormat-wrapAttributes-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#wrapAttributes)\n\n  <details>\n\n  ```swift\n  // WRONG\n  @objc class Spaceship {\n\n    @ViewBuilder var controlPanel: some View {\n      // ...\n    }\n\n    @discardableResult func fly() -> Bool {\n      // ...\n    }\n\n  }\n\n  // RIGHT\n  @objc\n  class Spaceship {\n\n    @ViewBuilder\n    var controlPanel: some View {\n      // ...\n    }\n\n    @discardableResult\n    func fly() -> Bool {\n      // ...\n    }\n\n  }\n  ```\n\n  </details>\n\n* <a id='simple-stored-property-attributes-on-same-line'></a>(<a href='#simple-stored-property-attributes-on-same-line'>link</a>) **Place simple attributes for stored properties on the same line as the rest of the declaration**. Complex attributes with named arguments, or more than one unnamed argument, should be placed on the previous line. [![SwiftFormat: wrapAttributes](https://img.shields.io/badge/SwiftFormat-wrapAttributes-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#wrapAttributes)\n\n  <details>\n\n  ```swift\n  // WRONG. These simple property wrappers should be written on the same line as the declaration. \n  struct SpaceshipDashboardView {\n\n    @State\n    private var warpDriveEnabled: Bool\n\n    @ObservedObject\n    private var lifeSupportService: LifeSupportService\n\n    @Environment(\\.controlPanelStyle) \n    private var controlPanelStyle\n\n  }\n\n  // RIGHT\n  struct SpaceshipDashboardView {\n\n    @State private var warpDriveEnabled: Bool\n\n    @ObservedObject private var lifeSupportService: LifeSupportService\n\n    @Environment(\\.controlPanelStyle) private var controlPanelStyle\n\n  }\n  ```\n\n  ```swift\n  // WRONG. These complex attached macros should be written on the previous line.\n  struct SolarSystemView {\n\n    @Query(sort: \\.distance) var allPlanets: [Planet]\n\n    @Query(sort: \\.age, order: .reverse) var moonsByAge: [Moon]\n\n  }\n\n  // RIGHT\n  struct SolarSystemView {\n\n    @Query(sort: \\.distance)\n    var allPlanets: [Planet]\n\n    @Query(sort: \\.age, order: .reverse)\n    var oldestMoons: [Moon]\n\n  }\n  ```\n\n  ```swift\n  // WRONG. These long, complex attributes should be written on the previous line.\n  struct RocketFactory {\n\n    @available(*, unavailable, message: \"No longer in production\") var saturn5Builder: Saturn5Builder\n\n    @available(*, deprecated, message: \"To be retired by 2030\") var atlas5Builder: Atlas5Builder\n\n    @available(*, iOS 18.0, tvOS 18.0, macOS 15.0, watchOS 11.0) var newGlennBuilder: NewGlennBuilder\n\n  }\n\n  // RIGHT\n  struct RocketFactory {\n\n    @available(*, unavailable, message: \"No longer in production\")\n    var saturn5Builder: Saturn5Builder\n\n    @available(*, deprecated, message: \"To be retired by 2030\")\n    var atlas5Builder: Atlas5Builder\n    \n    @available(*, iOS 18.0, tvOS 18.0, macOS 15.0, watchOS 11.0)\n    var newGlennBuilder: NewGlennBuilder\n\n  }\n  ```\n  \n  #### Why?\n  \n  Unlike other types of declarations, which have braces and span multiple lines, stored property declarations are often only a single line of code. Stored properties are often written sequentially without any blank lines between them. This makes the code compact without hurting readability, and allows for related properties to be grouped together in blocks:\n  \n  ```swift\n  struct SpaceshipDashboardView {\n    @State private var warpDriveEnabled: Bool\n    @State private var lifeSupportEnabled: Bool\n    @State private var artificialGravityEnabled: Bool\n    @State private var tractorBeamEnabled: Bool\n    \n    @Environment(\\.controlPanelStyle) private var controlPanelStyle\n    @Environment(\\.toggleButtonStyle) private var toggleButtonStyle\n  }\n  ```\n  \n  If stored property attributes were written on the previous line (like other types of attributes), then the properties start to visually bleed together unless you add blank lines between them:\n  \n  ```swift\n  struct SpaceshipDashboardView {\n    @State\n    private var warpDriveEnabled: Bool\n    @State\n    private var lifeSupportEnabled: Bool\n    @State\n    private var artificialGravityEnabled: Bool\n    @State\n    private var tractorBeamEnabled: Bool\n    \n    @Environment(\\.controlPanelStyle)\n    private var controlPanelStyle\n    @Environment(\\.toggleButtonStyle)\n    private var toggleButtonStyle\n  }\n  ```\n  \n  If you add blank lines, the list of properties becomes much longer and you lose the ability to group related properties together:  \n  \n  ```swift\n  struct SpaceshipDashboardView {\n    @State\n    private var warpDriveEnabled: Bool\n    \n    @State\n    private var lifeSupportEnabled: Bool\n    \n    @State\n    private var artificialGravityEnabled: Bool\n    \n    @State\n    private var tractorBeamEnabled: Bool\n    \n    @Environment(\\.controlPanelStyle)\n    private var controlPanelStyle\n    \n    @Environment(\\.toggleButtonStyle)\n    private var toggleButtonStyle\n  }\n  ```\n  \n  This doesn't apply to complex attributes with named arguments, or multiple unnamed arguments. These arguments are visually complex and typically encode a lot of information, so feel cramped and difficult to read when written on a single line:\n\n  ```swift\n  // Despite being less than 100 characters long, these lines are very complex and feel unnecessarily long: \n  @available(*, unavailable, message: \"No longer in production\") var saturn5Builder: Saturn5Builder\n  @available(*, deprecated, message: \"To be retired by 2030\") var atlas5Builder: Atlas5Builder\n  @available(*, iOS 18.0, tvOS 18.0, macOS 15.0, watchOS 11.0) var newGlennBuilder: NewGlennBuilder\n  ```\n\n  </details>\n\n* <a id='multi-line-array'></a>(<a href='#multi-line-array'>link</a>) **Multi-line arrays should have each bracket on a separate line.** Put the opening and closing brackets on separate lines from any of the elements of the array. Also add a trailing comma on the last element. [![SwiftFormat: wrapArguments](https://img.shields.io/badge/SwiftFormat-wrapArguments-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#wrapArguments)\n\n  <details>\n\n  ```swift\n  // WRONG\n  let rowContent = [listingUrgencyDatesRowContent(),\n                    listingUrgencyBookedRowContent(),\n                    listingUrgencyBookedShortRowContent()]\n\n  // WRONG\n  let rowContent = [\n    listingUrgencyDatesRowContent(),\n    listingUrgencyBookedRowContent(),\n    listingUrgencyBookedShortRowContent()\n  ]\n\n  // RIGHT\n  let rowContent = [\n    listingUrgencyDatesRowContent(),\n    listingUrgencyBookedRowContent(),\n    listingUrgencyBookedShortRowContent(),\n  ]\n  ```\n\n* <a id='long-typealias'></a>(<a href='#long-typealias'>link</a>) [Long](https://github.com/airbnb/swift#column-width) type aliases of protocol compositions should wrap before the `=` and before each individual `&`. [![SwiftFormat: wrapArguments](https://img.shields.io/badge/SwiftFormat-wrapArguments-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#wrapArguments)\n\n  <details>\n\n  ```swift\n  // WRONG (too long)\n  public typealias Dependencies = CivilizationServiceProviding & LawsOfPhysicsProviding & PlanetBuilderProviding & UniverseBuilderProviding & UniverseSimulatorServiceProviding\n\n  // WRONG (naive wrapping)\n  public typealias Dependencies = CivilizationServiceProviding & LawsOfPhysicsProviding & PlanetBuilderProviding &\n    UniverseBuilderProviding & UniverseSimulatorServiceProviding\n\n  // WRONG (unbalanced)\n  public typealias Dependencies = CivilizationServiceProviding\n    & LawsOfPhysicsProviding\n    & PlanetBuilderProviding\n    & UniverseBuilderProviding\n    & UniverseSimulatorServiceProviding\n\n  // RIGHT\n  public typealias Dependencies\n    = CivilizationServiceProviding\n    & LawsOfPhysicsProviding\n    & PlanetBuilderProviding\n    & UniverseBuilderProviding\n    & UniverseSimulatorServiceProviding\n  ```\n\n* <a id='sort-typealiases'></a>(<a href='#sort-typealiases'>link</a>) **Sort protocol composition type aliases alphabetically.** [![SwiftFormat: sortTypealiases](https://img.shields.io/badge/SwiftFormat-sortTypealiases-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#sortTypealiases)\n\n  <details>\n\n  #### Why?\n\n  Protocol composition type aliases are an unordered list with no natural ordering. Sorting alphabetically keeps these lists more organized, which is especially valuable for long protocol compositions.\n\n  ```swift\n  // WRONG (not sorted)\n  public typealias Dependencies\n    = UniverseBuilderProviding\n    & LawsOfPhysicsProviding\n    & UniverseSimulatorServiceProviding\n    & PlanetBuilderProviding\n    & CivilizationServiceProviding\n\n  // RIGHT\n  public typealias Dependencies\n    = CivilizationServiceProviding\n    & LawsOfPhysicsProviding\n    & PlanetBuilderProviding\n    & UniverseBuilderProviding\n    & UniverseSimulatorServiceProviding\n  ```\n\n* <a id='prefer-if-let-shorthand'></a>(<a href='#prefer-if-let-shorthand'>link</a>) Omit the right-hand side of the expression when unwrapping an optional property to a non-optional property with the same name. [![SwiftFormat: redundantOptionalBinding](https://img.shields.io/badge/SwiftFormat-redundantOptionalBinding-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#redundantOptionalBinding)\n\n  <details>\n\n  #### Why?\n\n  Following the rationale in [SE-0345](https://github.com/apple/swift-evolution/blob/main/proposals/0345-if-let-shorthand.md), this shorthand syntax removes unnecessary boilerplate while retaining clarity.\n\n  ```swift\n  // WRONG\n  if\n    let galaxy = galaxy,\n    galaxy.name == \"Milky Way\"\n  { … }\n\n  guard\n    let galaxy = galaxy,\n    galaxy.name == \"Milky Way\"\n  else { … }\n\n  // RIGHT\n  if\n    let galaxy,\n    galaxy.name == \"Milky Way\"\n  { … }\n\n  guard\n    let galaxy,\n    galaxy.name == \"Milky Way\"\n  else { … }\n  ```\n\n* <a id='else-on-same-line'></a>(<a href='#else-on-same-line'>link</a>) **Else statements should start on the same line as the previous condition's closing brace, unless the conditions are separated by a blank line or comments.** [![SwiftFormat: elseOnSameLine](https://img.shields.io/badge/SwiftFormat-elseOnSameLine-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#elseOnSameLine)\n\n  <details>\n\n  ```swift\n  // WRONG\n  if let galaxy {\n    …\n  }\n  else if let bigBangService {\n    …\n  }\n  else {\n    …\n  }\n\n  // RIGHT\n  if let galaxy {\n    …\n  } else if let bigBangService {\n    …\n  } else {\n    …\n  }\n\n  // RIGHT, because there are comments between the conditions\n  if let galaxy {\n    …\n  }\n  // If the galaxy hasn't been created yet, create it using the big bang service\n  else if let bigBangService {\n    …\n  }\n  // If the big bang service doesn't exist, fail gracefully\n  else {\n    …\n  }\n\n  // RIGHT, because there are blank lines between the conditions\n  if let galaxy {\n    …\n  }\n\n  else if let bigBangService {\n    // If the galaxy hasn't been created yet, create it using the big bang service\n    …\n  }\n\n  else {\n    // If the big bang service doesn't exist, fail gracefully\n    …\n  }\n  ```\n\n* <a id='multi-line-conditions'></a>(<a href='#multi-line-conditions'>link</a>) **Multi-line conditional statements should break after the leading keyword.** Indent each individual statement by [2 spaces](https://github.com/airbnb/swift#spaces-over-tabs). [![SwiftFormat: wrapArguments](https://img.shields.io/badge/SwiftFormat-wrapArguments-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#wrapArguments)\n\n  <details>\n\n  #### Why?\n  Breaking after the leading keyword resets indentation to the standard [2-space grid](https://github.com/airbnb/swift#spaces-over-tabs),\n  which helps avoid fighting Xcode's <kbd>^</kbd> + <kbd>I</kbd> indentation behavior.\n\n  ```swift\n  // WRONG\n  if let galaxy,\n    galaxy.name == \"Milky Way\" // Indenting by two spaces fights Xcode's ^+I indentation behavior\n  { … }\n\n  // WRONG\n  guard let galaxy,\n        galaxy.name == \"Milky Way\" // Variable width indentation (6 spaces)\n  else { … }\n\n  // WRONG\n  guard let earth = universe.find(\n    .planet,\n    named: \"Earth\"),\n    earth.isHabitable // Blends in with previous condition's method arguments\n  else { … }\n\n  // RIGHT\n  if\n    let galaxy,\n    galaxy.name == \"Milky Way\"\n  { … }\n\n  // RIGHT\n  guard\n    let galaxy,\n    galaxy.name == \"Milky Way\"\n  else { … }\n\n  // RIGHT\n  guard\n    let earth = universe.find(\n      .planet,\n      named: \"Earth\"),\n    earth.isHabitable\n  else { … }\n\n  // RIGHT\n  if let galaxy {\n    …\n  }\n\n  // RIGHT\n  guard let galaxy else {\n    …\n  }\n  ```\n  \n  </details>\n\n* <a id='wrap-multiline-conditional-assignment'></a>(<a href='#wrap-multiline-conditional-assignment'>link</a>) **Add a line break after the assignment operator (`=`) before a multi-line `if` or `switch` expression**, and indent the following `if` / `switch` expression. If the declaration fits on a single line, a line break is not required. [![SwiftFormat: wrapMultilineConditionalAssignment](https://img.shields.io/badge/SwiftFormat-wrapMultilineConditionalAssignment-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#wrapMultilineConditionalAssignment)\n\n  <details>\n\n  #### Why?\n  \n  This makes it so that `if` and `switch` expressions always have the same \"shape\" as standard `if` and `switch` statements, where:\n  1. The `if` / `switch` keyword is always the left-most token on a dedicated line of code.\n  2. The conditional branches are always to the right of and below the `if` / `switch` keyword.\n\n  This is most consistent with how the `if` / `switch` keywords are used for control flow, and thus makes it easier to recognize that the code is using an `if` or `switch` expression at a glance. \n  \n  ```swift\n  // WRONG. Should have a line break after the first `=`. \n  let planetLocation = if let star = planet.star {\n    \"The \\(star.name) system\"\n   } else {\n    \"Rogue planet\"\n  }\n\n  // WRONG. The first `=` should be on the line of the variable being assigned.\n  let planetLocation \n    = if let star = planet.star {\n      \"The \\(star.name) system\"\n    } else {\n      \"Rogue planet\"\n    }\n\n  // WRONG. `switch` expression should be indented.\n  let planetLocation =\n  switch planet {\n  case .mercury, .venus, .earth, .mars:\n    .terrestrial\n  case .jupiter, .saturn, .uranus, .neptune:\n    .gasGiant\n  }\n    \n  // RIGHT \n  let planetLocation = \n    if let star = planet.star {\n      \"The \\(star.name) system\"\n    } else {\n      \"Rogue planet\"\n    }\n    \n  // RIGHT\n  let planetType: PlanetType =\n    switch planet {\n    case .mercury, .venus, .earth, .mars:\n      .terrestrial\n    case .jupiter, .saturn, .uranus, .neptune:\n      .gasGiant\n    }\n    \n  // ALSO RIGHT. A line break is not required because the declaration fits on a single line. \n  let moonName = if let moon = planet.moon { moon.name } else { \"none\" }\n\n  // ALSO RIGHT. A line break is permitted if it helps with readability.\n  let moonName =\n    if let moon = planet.moon { moon.name } else { \"none\" }\n  ```\n  \n  </details>\n\n* <a id='prefer-conditional-assignment-to-control-flow'></a>(<a href='#prefer-conditional-assignment-to-control-flow'>link</a>) **When initializing a new property with the result of a conditional statement (e.g. an `if` or `switch` statement), use a single `if`/`switch` expression where possible** rather than defining an uninitialized property and initializing it on every branch of the following conditional statement. [![SwiftFormat: conditionalAssignment](https://img.shields.io/badge/SwiftFormat-conditionalAssignment-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#conditionalAssignment)\n\n  <details>\n\n  #### Why?\n\n  There are several benefits to using an `if`/`switch` expression over simply performing assignment on each branch of the following conditional statement:\n  1. In most cases, you no longer need to explicitly write a type annotation for the variable that is being assigned to.\n  2. The compiler will diagnose more cases where using a mutable `var` is unnecessary.\n  3. The resulting syntax is visually lighter because the property name being assigned doesn't need to be written on each branch.\n\n  ```swift\n  // BEFORE\n  // 1. An explicit type annotation is required for the uninitialized property.\n  // 2. `var` is unnecessary here because `planetLocation` is never modified after being initialized, but the compiler doesn't diagnose.\n  // 3. The `planetLocation` property name is written on each branch so is redundant and visually noisy.\n  var planetLocation: String\n  if let star = planet.star {\n    planetLocation = \"The \\(star.name) system\"\n  } else {\n    planetLocation = \"Rogue planet\"\n  }\n\n  print(planetLocation)\n\n  // AFTER\n  // 1. No need to write an explicit `: String` type annotation.\n  // 2. The compiler correctly diagnoses that the `var` is unnecessary and emits a warning suggesting to use `let` instead. \n  // 3. Each conditional branch is simply the value being assigned.\n  var planetLocation =\n    if let star = planet.star {\n      \"The \\(star.name) system\"\n    } else {\n      \"Rogue planet\"\n    }\n\n  print(planetLocation)\n  ```\n\n  #### Examples\n\n  ```swift\n  // WRONG\n  let planetLocation: String\n  if let star = planet.star {\n    planetLocation = \"The \\(star.name) system\"\n  } else {\n    planetLocation = \"Rogue planet\"\n  }\n\n  let planetType: PlanetType\n  switch planet {\n  case .mercury, .venus, .earth, .mars:\n    planetType = .terrestrial\n  case .jupiter, .saturn, .uranus, .neptune:\n    planetType = .gasGiant\n  }\n\n  let canBeTerraformed: Bool \n  if \n    let star = planet.star, \n    !planet.isHabitable,\n    planet.isInHabitableZone(of: star) \n  {\n    canBeTerraformed = true\n  } else {\n    canBeTerraformed = false\n  }\n\n  // RIGHT\n  let planetLocation =\n    if let star = planet.star {\n      \"The \\(star.name) system\"\n    } else {\n      \"Rogue planet\"\n    }\n\n  let planetType: PlanetType =\n    switch planet {\n    case .mercury, .venus, .earth, .mars:\n      .terrestrial\n    case .jupiter, .saturn, .uranus, .neptune:\n      .gasGiant\n    }\n\n  let canBeTerraformed =\n    if \n      let star = planet.star, \n      !planet.isHabitable,\n      planet.isInHabitableZone(of: star) \n    {\n      true\n    } else {\n      false\n    }\n\n  // ALSO RIGHT. This example cannot be converted to an if/switch expression\n  // because one of the branches is more than just a single expression.\n  let planetLocation: String\n  if let star = planet.star {\n    planetLocation = \"The \\(star.name) system\"\n  } else {\n    let actualLocaton = galaxy.name ?? \"the universe\"\n    planetLocation = \"Rogue planet somewhere in \\(actualLocation)\"\n  }\n  ```\n\n  </details>\n\n* <a id='blank-line-after-multiline-switch-case'></a>(<a href='#blank-line-after-multiline-switch-case'>link</a>) **Insert a blank line following a switch case with a multi-line body.** Spacing within an individual switch statement should be consistent. If any case has a multi-line body then all cases should include a trailing blank line. The last switch case doesn't need a blank line, since it is already followed by a closing brace. [![SwiftFormat: blankLineAfterSwitchCase](https://img.shields.io/badge/SwiftFormat-blankLineAfterSwitchCase-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#blankLineAfterSwitchCase) [![SwiftFormat: consistentSwitchCaseSpacing](https://img.shields.io/badge/SwiftFormat-consistentSwitchCaseSpacing-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#consistentSwitchCaseSpacing)\n\n  <details>\n\n  #### Why?\n\n  Like with [declarations in a file](#newline-between-scope-siblings), inserting a blank line between scopes makes them easier to visually differentiate.\n  \n  Complex switch statements are visually busy without blank lines between the cases, making it more difficult to read the code and harder to distinguish between individual cases at a glance. Blank lines between the individual cases make complex switch statements easier to read.\n\n  #### Examples\n\n  ```swift\n  // WRONG. These switch cases should be followed by a blank line.\n  func handle(_ action: SpaceshipAction) {\n    switch action {\n    case .engageWarpDrive:\n      navigationComputer.destination = targetedDestination\n      warpDrive.spinUp()\n      warpDrive.activate()\n    case .enableArtificialGravity:\n      artificialGravityEngine.enable(strength: .oneG)\n    case .scanPlanet(let planet):\n      scanner.target = planet\n      scanner.scanAtmosphere()\n      scanner.scanBiosphere()\n      scanner.scanForArtificialLife()\n    case .handleIncomingEnergyBlast:\n      energyShields.engage()\n    }\n  }\n\n  // WRONG. While the `.enableArtificialGravity` case isn't multi-line, the other cases are.\n  // For consistency, it should also include a trailing blank line.\n  func handle(_ action: SpaceshipAction) {\n    switch action {\n    case .engageWarpDrive:\n      navigationComputer.destination = targetedDestination\n      warpDrive.spinUp()\n      warpDrive.activate()\n\n    case .enableArtificialGravity:\n      artificialGravityEngine.enable(strength: .oneG)\n    case .scanPlanet(let planet):\n      scanner.target = planet\n      scanner.scanAtmosphere()\n      scanner.scanBiosphere()\n      scanner.scanForArtificialLife()\n      \n    case .handleIncomingEnergyBlast:\n      energyShields.engage()\n    }\n  }\n\n  // RIGHT. All of the cases have a trailing blank line.\n  func handle(_ action: SpaceshipAction) {\n    switch action {\n    case .engageWarpDrive:\n      navigationComputer.destination = targetedDestination\n      warpDrive.spinUp()\n      warpDrive.activate()\n\n    case .enableArtificialGravity:\n      artificialGravityEngine.enable(strength: .oneG)\n\n    case .scanPlanet(let planet):\n      scanner.target = planet\n      scanner.scanAtmosphere()\n      scanner.scanBiosphere()\n      scanner.scanForArtificialLife()\n      \n    case .handleIncomingEnergyBlast:\n      energyShields.engage()\n    }\n  }\n\n  // RIGHT. Since none of the cases are multi-line, blank lines are not required.\n  func handle(_ action: SpaceshipAction) {\n    switch action {\n    case .engageWarpDrive:\n      warpDrive.engage()\n    case .enableArtificialGravity:\n      artificialGravityEngine.enable(strength: .oneG)\n    case .scanPlanet(let planet):\n      scanner.scan(planet)\n    case .handleIncomingEnergyBlast:\n      energyShields.engage()\n    }\n  }\n\n  // ALSO RIGHT. Blank lines are still permitted after single-line switch cases if it helps with readability.\n  func handle(_ action: SpaceshipAction) {\n    switch action {\n    case .engageWarpDrive:\n      warpDrive.engage()\n\n    case .enableArtificialGravity:\n      artificialGravityEngine.enable(strength: .oneG)\n\n    case .scanPlanet(let planet):\n      scanner.scan(planet)\n\n    case .handleIncomingEnergyBlast:\n      energyShields.engage()\n    }\n  }\n\n  // WRONG. While it's fine to use blank lines to separate cases, spacing within a single switch statement should be consistent.\n  func handle(_ action: SpaceshipAction) {\n    switch action {\n    case .engageWarpDrive:\n      warpDrive.engage()\n    case .enableArtificialGravity:\n      artificialGravityEngine.enable(strength: .oneG)\n    case .scanPlanet(let planet):\n      scanner.scan(planet)\n\n    case .handleIncomingEnergyBlast:\n      energyShields.engage()\n    }\n  }\n  ```\n\n  </details>\n\n* <a id='wrap-guard-else'></a>(<a href='#wrap-guard-else'>link</a>) **Add a line break before the `else` keyword in a multi-line guard statement.** For single-line guard statements, keep the `else` keyword on the same line as the `guard` keyword. The open brace should immediately follow the `else` keyword. [![SwiftFormat: elseOnSameLine](https://img.shields.io/badge/SwiftFormat-elseOnSameLine-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#elseOnSameLine)\n\n  <details>\n\n  ```swift\n  // WRONG (else should be on its own line for multi-line guard statements)\n  guard\n    let galaxy,\n    galaxy.name == \"Milky Way\" else\n  { … }\n\n  // WRONG (else should be on the same line for single-line guard statements)\n  guard let galaxy\n  else { … }\n\n  // RIGHT\n  guard\n    let galaxy,\n    galaxy.name == \"Milky Way\"\n  else { … }\n\n  // RIGHT\n  guard let galaxy else {\n    …\n  }\n  ```\n\n* <a id='indent-multiline-string-literals'></a>(<a href='#indent-multiline-string-literals'>link</a>) **Indent the body and closing triple-quote of multiline string literals**, unless the string literal begins on its own line in which case the string literal contents and closing triple-quote should have the same indentation as the opening triple-quote. [![SwiftFormat: indent](https://img.shields.io/badge/SwiftFormat-indent-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#indent)\n\n  <details>\n\n  ```swift\n  // WRONG\n  var spaceQuote = \"\"\"\n  “Space,” it says, “is big. Really big. You just won’t believe how vastly, hugely, mindbogglingly big it is.\n  I mean, you may think it’s a long way down the road to the chemist’s, but that’s just peanuts to space.”\n  \"\"\"\n\n  // RIGHT\n  var spaceQuote = \"\"\"\n    “Space,” it says, “is big. Really big. You just won’t believe how vastly, hugely, mindbogglingly big it is.\n    I mean, you may think it’s a long way down the road to the chemist’s, but that’s just peanuts to space.”\n    \"\"\"\n\n  // WRONG\n  var universeQuote: String {\n    \"\"\"\n      In the beginning the Universe was created.\n      This has made a lot of people very angry and been widely regarded as a bad move.\n      \"\"\"\n  }\n\n  // RIGHT\n  var universeQuote: String {\n    \"\"\"\n    In the beginning the Universe was created.\n    This has made a lot of people very angry and been widely regarded as a bad move.\n    \"\"\"\n  }\n  ```\n\n  </details>\n\n* <a id='favor-constructors'></a>(<a href='#favor-constructors'>link</a>) **Use constructors instead of Make() functions for NSRange and others.** [![SwiftLint: legacy_constructor](https://img.shields.io/badge/SwiftLint-legacy__constructor-007A87.svg)](https://realm.github.io/SwiftLint/legacy_constructor)\n\n  <details>\n\n  ```swift\n  // WRONG\n  let range = NSMakeRange(10, 5)\n\n  // RIGHT\n  let range = NSRange(location: 10, length: 5)\n  ```\n\n  </details>\n\n* <a id='standard-library-type-shorthand'></a>(<a href='#standard-library-type-sugar'>link</a>) **For standard library types with a canonical shorthand form (`Optional`, `Array`, `Dictionary`), prefer using the shorthand form over the full generic form.** [![SwiftFormat: typeSugar](https://img.shields.io/badge/SwiftFormat-typeSugar-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#typeSugar)\n\n  <details>\n\n  ```swift\n  // WRONG\n  let optional: Optional<String> = nil\n  let array: Array<String> = []\n  let dictionary: Dictionary<String, Any> = [:]\n\n  // RIGHT\n  let optional: String? = nil\n  let array: [String] = []\n  let dictionary: [String: Any] = [:]\n  ```\n\n  </details>\n\n* <a id='omit-explicit-init'></a>(<a href='#omit-explicit-init'>link</a>) **Omit explicit `.init` when not required.** [![SwiftFormat: redundantInit](https://img.shields.io/badge/SwiftFormat-redundantInit-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#redundantInit)\n\n  <details>\n\n  ```swift\n  // WRONG\n  let universe = Universe.init()\n\n  // RIGHT\n  let universe = Universe()\n  ```\n\n  </details>\n\n* <a id='single-line-expression-braces'></a>(<a href='#single-line-expression-braces'>link</a>) The opening brace following a single-line expression should be on the same line as the rest of the statement. [![SwiftFormat: braces](https://img.shields.io/badge/SwiftFormat-braces-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#braces)\n\n  <details>\n\n  ```swift\n  // WRONG\n  if !planet.isHabitable\n  {\n    planet.terraform()\n  }\n\n  class Planet\n  {\n    func terraform()\n    {\n      generateAtmosphere()\n      generateOceans()\n    }\n  }\n\n  // RIGHT\n  if !planet.isHabitable {\n    planet.terraform()\n  }\n\n  class Planet {\n    func terraform() {\n      generateAtmosphere()\n      generateOceans()\n    }\n  }\n  ```\n\n  </details>\n\n* <a id='multi-line-expression-braces'></a>(<a href='#multi-line-expression-braces'>link</a>) The opening brace following a multi-line expression should wrap to a new line. [![SwiftFormat: wrapMultilineStatementBraces](https://img.shields.io/badge/SwiftFormat-wrapMultilineStatementBraces-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#wrapMultilineStatementBraces)\n\n  <details>\n\n  ```swift\n  // WRONG\n  if\n    let star = planet.nearestStar(),\n    planet.isInHabitableZone(of: star) {\n    planet.terraform()\n  }\n\n  class Planet {\n    func terraform(\n      atmosphereOptions: AtmosphereOptions = .default,\n      oceanOptions: OceanOptions = .default) {\n      generateAtmosphere(atmosphereOptions)\n      generateOceans(oceanOptions)\n    }\n  }\n\n  // RIGHT\n  if\n    let star = planet.nearestStar(),\n    planet.isInHabitableZone(of: star)\n  {\n    planet.terraform()\n  }\n\n  class Planet {\n    func terraform(\n      atmosphereOptions: AtmosphereOptions = .default,\n      oceanOptions: OceanOptions = .default)\n    {\n      generateAtmosphere(atmosphereOptions)\n      generateOceans(oceanOptions)\n    }\n  }\n  ```\n\n  </details>\n\n* <a id='whitespace-around-braces'></a>(<a href='#whitespace-around-braces'>link</a>) **Braces should be surrounded by a single whitespace character (either a space, or a newline) on each side.** [![SwiftFormat: spaceInsideBraces](https://img.shields.io/badge/SwiftFormat-spaceInsideBraces-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#spaceInsideBraces) [![SwiftFormat: spaceAroundBraces](https://img.shields.io/badge/SwiftFormat-spaceAroundBraces-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#spaceAroundBraces)\n\n  <details>\n\n  ```swift\n  // WRONG\n  struct Planet{\n    …\n  }\n\n  // WRONG\n  if condition{\n    …\n  }else{\n    …\n  }\n\n  // RIGHT\n  struct Planet {\n    …\n  }\n\n  // RIGHT\n  if condition {\n    …\n  } else {\n    …\n  }\n  ```\n\n* <a id='no-spaces-around-function-parens'></a>(<a href='#no-spaces-around-parens'>link</a>) For function calls and declarations, there should be no spaces before or inside the parentheses of the argument list. [![SwiftFormat: spaceInsideParens](https://img.shields.io/badge/SwiftFormat-spaceInsideParens-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#spaceInsideParens) [![SwiftFormat: spaceAroundParens](https://img.shields.io/badge/SwiftFormat-spaceAroundParens-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#spaceAroundParens)\n\n  <details>\n\n  ```swift\n  // WRONG\n  func install ( _ engine: Engine ) { }\n\n  install ( AntimatterDrive( ) )\n\n  // RIGHT\n  func install(_ engine: Engine) { }\n\n  install(AntimatterDrive())\n  ```\n\n  </details>\n\n* <a id='single-line-comments'></a>(<a href='#single-line-comments'>link</a>) **Comment blocks should use single-line comments (`//` for code comments and `///` for documentation comments)**, rather than multi-line comments (`/* ... */` and `/** ... */`). [![SwiftFormat: blockComments](https://img.shields.io/badge/SwiftFormat-blockComments-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#blockComments)\n\n  <details>\n\n  ```swift\n  // WRONG\n\n  /**\n  * A planet that exists somewhere in the universe.\n  *\n  * Planets have many properties. For example, the best planets\n  * have atmospheres and bodies of water to support life.\n  */\n  class Planet {\n    /**\n      Terraforms the planet, by adding an atmosphere and ocean that is hospitable for life.\n    */\n    func terraform() {\n      /*\n      Generate the atmosphere first, before generating the ocean.\n      Otherwise, the water will just boil off immediately.\n      */\n      generateAtmosphere()\n\n      /* Now that we have an atmosphere, it's safe to generate the ocean */\n      generateOceans()\n    }\n  }\n\n  // RIGHT\n\n  /// A planet that exists somewhere in the universe.\n  ///\n  /// Planets have many properties. For example, the best planets\n  /// have atmospheres and bodies of water to support life.\n  class Planet {\n    /// Terraforms the planet, by adding an atmosphere and ocean that is hospitable for life.\n    func terraform() {\n      // Generate the atmosphere first, before generating the ocean.\n      // Otherwise, the water will just boil off immediately.\n      generateAtmosphere()\n\n      // Now that we have an atmosphere, it's safe to generate the ocean\n      generateOceans()\n    }\n  }\n  ```\n\n  </details>\n\n* <a id='doc-comments-before-declarations'></a>(<a href='#doc-comments-before-declarations'>link</a>) **Use doc comments (`///`) instead of regular comments (`//`) before declarations within type bodies or at the top level.** [![SwiftFormat: docComments](https://img.shields.io/badge/SwiftFormat-docComments-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#docComments)\n\n  <details>\n\n  ```swift\n  // WRONG\n\n  // A planet that exists somewhere in the universe.\n  class Planet {\n    // Data about the composition and density of the planet's atmosphere if present.\n    var atmosphere: Atmosphere?\n\n    // Data about the size, location, and composition of large bodies of water on the planet's surface.\n    var oceans: [Ocean]\n\n    // Terraforms the planet, by adding an atmosphere and ocean that is hospitable for life.\n    func terraform() {\n      // This gas composition has a pretty good track record so far!\n      let composition = AtmosphereComposition(nitrogen: 0.78, oxygen: 0.22)\n\n      // Generate the atmosphere first, then the oceans. Otherwise, the water will just boil off immediately.\n      generateAtmosphere(using: composition)\n      generateOceans()\n    }\n  }\n\n  // RIGHT\n\n  /// A planet that exists somewhere in the universe.\n  class Planet {\n    /// Data about the composition and density of the planet's atmosphere if present.\n    var atmosphere: Atmosphere?\n\n    /// Data about the size, location, and composition of large bodies of water on the planet's surface.\n    var oceans: [Ocean]\n\n    /// Terraforms the planet, by adding an atmosphere and ocean that is hospitable for life.\n    func terraform() {\n      // This gas composition has a pretty good track record so far!\n      let composition = AtmosphereComposition(nitrogen: 0.78, oxygen: 0.22)\n\n      // Generate the atmosphere first, then the oceans. Otherwise, the water will just boil off immediately.\n      generateAtmosphere(using: composition)\n      generateOceans()\n    }\n  }\n  \n  // ALSO RIGHT:\n\n  func terraform() {\n    /// This gas composition has a pretty good track record so far!\n    ///  - Doc comments are not required before local declarations in function scopes, but are permitted.\n    let composition = AtmosphereComposition(nitrogen: 0.78, oxygen: 0.22)\n\n    /// Generate the `atmosphere` first, **then** the `oceans`. Otherwise, the water will just boil off immediately.\n    ///  - Comments not preceding declarations can use doc comments, and will not be autocorrected into regular comments.\n    ///    This can be useful because Xcode applies markdown styling to doc comments but not regular comments.\n    generateAtmosphere(using: composition)\n    generateOceans()\n  }\n  ```\n\n  Regular comments are permitted before declarations in some cases. \n  \n  For example, comment directives like `// swiftformat:`, `// swiftlint:`, `// sourcery:`, `// MARK:` and `// TODO:` are typically required to use regular comments and don't work correctly with doc comments:\n\n  ```swift\n  // RIGHT\n\n  // swiftformat:sort\n  enum FeatureFlags {\n    case allowFasterThanLightTravel\n    case disableGravity\n    case enableDarkEnergy\n    case enableDarkMatter\n  }\n\n  // TODO: There are no more production consumers of this legacy model, so we\n  // should detangle the remaining code dependencies and clean it up.\n  struct LegacyGeocentricUniverseModel {\n    ...\n  }\n  ```\n\n  Regular comments are also allowed before a grouped block of declarations, since it's possible that the comment refers to the block as a whole rather than just the following declaration:\n\n  ```swift\n  // RIGHT\n\n  enum Planet {\n    // The inner planets\n    case mercury\n    case venus\n    case earth\n    case mars\n\n    // The outer planets\n    case jupiter\n    case saturn\n    case uranus\n    case neptune\n  }\n\n  // ALSO RIGHT\n\n  enum Planet {\n    /// The smallest planet\n    case mercury\n    case venus\n    case earth\n    case mars\n    /// The largest planet\n    case jupiter\n    case saturn\n    case uranus\n    case neptune\n  }\n  ```\n\n  </details>\n\n* <a id='doc-comments-before-attributes'></a>(<a href='#doc-comments-before-attributes'>link</a>) **Place doc comments for a declaration before any attributes or modifiers.** [![SwiftFormat: docCommentsBeforeModifiers](https://img.shields.io/badge/SwiftFormat-docCommentsBeforeModifiers-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#docCommentsBeforeModifiers)\n\n  <details>\n\n  ```swift\n  // WRONG\n\n  @MainActor\n  /// A spacecraft with everything you need to explore the universe.\n  struct Spaceship { … }\n\n  public\n  /// A spacecraft with everything you need to explore the universe.\n  struct Spaceship { … }\n\n  // RIGHT\n\n  /// A spacecraft with everything you need to explore the universe.\n  @MainActor\n  struct Spaceship { … }\n\n  /// A spacecraft with everything you need to explore the universe.\n  public struct Spaceship { … }\n  ```\n\n  </details>\n\n* <a id='whitespace-around-comment-delimiters'></a>(<a href='#whitespace-around-comment-delimiters'>link</a>) Include spaces or newlines before and after comment delimiters (`//`, `///`, `/*`, and `*/`) [![SwiftFormat: spaceAroundComments](https://img.shields.io/badge/SwiftFormat-spaceAroundComments-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#spaceAroundComments) [![SwiftFormat: spaceInsideComments](https://img.shields.io/badge/SwiftFormat-spaceInsideComments-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#spaceInsideComments)\n\n  <details>\n\n  ```swift\n  // WRONG\n\n  ///A spacecraft with incredible performance characteristics\n  struct Spaceship {\n\n    func travelFasterThanLight() {/*unimplemented*/}\n\n    func travelBackInTime() { }//TODO: research whether or not this is possible\n\n  }\n\n  // RIGHT\n\n  /// A spacecraft with incredible performance characteristics\n  struct Spaceship {\n\n    func travelFasterThanLight() { /* unimplemented */ }\n\n    func travelBackInTime() { } // TODO: research whether or not this is possible\n\n  }\n  ```\n\n  </details>\n\n* <a id='space-in-empty-braces'></a>(<a href='#space-in-empty-braces'>link</a>) Include a single space in an empty set of braces (`{ }`). [![SwiftFormat: emptyBraces](https://img.shields.io/badge/SwiftFormat-emptyBraces-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#emptyBraces)\n\n  <details>\n\n  ```swift\n  // WRONG\n  extension Spaceship: Trackable {}\n\n  extension SpaceshipView {\n    var accessibilityIdentifier: String {\n      get { spaceship.name }\n      set {}\n    }\n  }\n\n  // RIGHT\n  extension Spaceship: Trackable { }\n\n  extension SpaceshipView {\n    var accessibilityIdentifier: String {\n      get { spaceship.name }\n      set { }\n    }\n  }\n  ```\n\n  </details>\n\n* <a id='prefer-for-loop-over-forEach'></a>(<a href='#prefer-for-loop-over-forEach'>link</a>) **Prefer using `for` loops over the functional `forEach(…)` method**, unless using `forEach(…)` as the last element in a functional chain. [![SwiftFormat: forLoop](https://img.shields.io/badge/SwiftFormat-forLoop-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#forLoop)\n\n  <details>\n\n  #### Why?\n  For loops are more idiomatic than the `forEach(…)` method, and are typically familiar to all developers who have experience with C-family languages. \n\n  For loops are also more expressive than the `forEach(…)` method. For loops support the `return`, `continue`, and `break` control flow keywords, while `forEach(…)` only supports `return` (which has the same behavior as `continue` in a for loop).\n  \n  ```swift\n  // WRONG\n  planets.forEach { planet in\n    planet.terraform()\n  }\n\n  // WRONG\n  planets.forEach {\n    $0.terraform()\n  }\n\n  // RIGHT\n  for planet in planets {\n    planet.terraform()\n  }\n\n  // ALSO FINE, since forEach is useful when paired with other functional methods in a chain.\n  planets\n    .filter { !$0.isGasGiant }\n    .map { PlanetTerraformer(planet: $0) }\n    .forEach { $0.terraform() }\n  ```\n    \n  </details>\n\n* <a id='omit-internal-keyword'></a>(<a href='#omit-internal-keyword'>link</a>) **Omit the `internal` keyword** when defining types, properties, or functions with an internal access control level. [![SwiftFormat: redundantInternal](https://img.shields.io/badge/SwiftFormat-redundantInternal-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#redundantInternal)\n\n  <details>\n\n  ```swift\n  // WRONG\n  internal class Spaceship {\n    internal init() { … }\n\n    internal func travel(to planet: Planet) { … }\n  }\n\n  // RIGHT, because internal access control is implied if no other access control level is specified.\n  class Spaceship {\n    init() { … }\n\n    func travel(to planet: Planet) { … }\n  }\n  ```\n\n  </details>\n\n### Functions\n\n* <a id='omit-function-void-return'></a>(<a href='#omit-function-void-return'>link</a>) **Omit `Void` return types from function definitions.** [![SwiftFormat: redundantVoidReturnType](https://img.shields.io/badge/SwiftFormat-redundantVoidReturnType-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#redundantVoidReturnType)\n\n  <details>\n\n  ```swift\n  // WRONG\n  func doSomething() -> Void {\n    ...\n  }\n\n  // RIGHT\n  func doSomething() {\n    ...\n  }\n  ```\n\n  </details>\n\n* <a id='long-function-declaration'></a>(<a href='#long-function-declaration'>link</a>) **Separate [long](https://github.com/airbnb/swift#column-width) function declarations with line breaks before each argument label, and before the return signature or any effects (`async`, `throws`).** Put the open curly brace on the next line so the first executable line doesn't look like it's another parameter. [![SwiftFormat: wrapArguments](https://img.shields.io/badge/SwiftFormat-wrapArguments-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#wrapArguments) [![SwiftFormat: braces](https://img.shields.io/badge/SwiftFormat-braces-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#braces)\n\n  <details>\n\n  ```swift\n  class Universe {\n\n    // WRONG\n    func generateStars(at location: Point, count: Int, color: StarColor, withAverageDistance averageDistance: Float) -> String {\n      // This is too long and will probably auto-wrap in a weird way\n    }\n\n    // WRONG\n    func generateStars(at location: Point,\n                       count: Int,\n                       color: StarColor,\n                       withAverageDistance averageDistance: Float) -> String\n    {\n      // Xcode indents all the arguments\n    }\n\n    // WRONG\n    func generateStars(\n      at location: Point,\n      count: Int,\n      color: StarColor,\n      withAverageDistance averageDistance: Float) -> String {\n      populateUniverse() // this line blends in with the argument list\n    }\n\n    // WRONG\n    func generateStars(\n      at location: Point,\n      count: Int,\n      color: StarColor,\n      withAverageDistance averageDistance: Float) throws\n      -> String {\n      populateUniverse() // this line blends in with the argument list\n    }\n\n    // WRONG\n    func generateStars(\n      at location: Point,\n      count: Int,\n      color: StarColor,\n      withAverageDistance averageDistance: Float) async throws // these effects are easy to miss since they're visually associated with the last parameter\n      -> String\n    {\n      populateUniverse()\n    }\n\n    // RIGHT\n    func generateStars(\n      at location: Point,\n      count: Int,\n      color: StarColor,\n      withAverageDistance averageDistance: Float)\n      -> String\n    {\n      populateUniverse()\n    }\n\n    // RIGHT\n    func generateStars(\n      at location: Point,\n      count: Int,\n      color: StarColor,\n      withAverageDistance averageDistance: Float)\n      async throws -> String\n    {\n      populateUniverse()\n    }\n  }\n  ```\n\n  </details>\n\n* <a id='long-function-invocation'></a>(<a href='#long-function-invocation'>link</a>) **[Long](https://github.com/airbnb/swift#column-width) function invocations should also break on each argument.** Put the closing parenthesis on the last line of the invocation. [![SwiftFormat: wrapArguments](https://img.shields.io/badge/SwiftFormat-wrapArguments-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#wrapArguments)\n\n  <details>\n\n  ```swift\n  // WRONG\n  universe.generateStars(at: location, count: 5, color: starColor, withAverageDistance: 4)\n\n  // WRONG\n  universe.generateStars(at: location,\n                         count: 5,\n                         color: starColor,\n                         withAverageDistance: 4)\n\n  // WRONG\n  universe.generateStars(\n    at: location,\n    count: 5,\n    color: starColor,\n    withAverageDistance: 4\n  )\n\n  // WRONG\n  universe.generate(5,\n    .stars,\n    at: location)\n\n  // RIGHT\n  universe.generateStars(\n    at: location,\n    count: 5,\n    color: starColor,\n    withAverageDistance: 4)\n\n  // RIGHT\n  universe.generate(\n    5,\n    .stars,\n    at: location)\n  ```\n\n  </details>\n\n* <a id='unused-function-parameter-naming'></a>(<a href='#unused-function-parameter-naming'>link</a>) **Name unused function parameters as underscores (`_`).** [![SwiftFormat: unusedArguments](https://img.shields.io/badge/SwiftFormat-unusedArguments-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#unusedArguments)\n\n    <details>\n\n    #### Why?\n    Naming unused function parameters as underscores makes it more clear when the parameter is unused within the function body.\n    This can make it easier to catch subtle logical errors, and can highlight opportunities to simplify method signatures.\n\n    ```swift\n    // WRONG\n\n    // In this method, the `newCondition` parameter is unused.\n    // This is actually a logical error, and is easy to miss, but compiles without warning.\n    func updateWeather(_ newCondition: WeatherCondition) -> Weather {\n      var updatedWeather = self\n      updatedWeather.condition = condition // this mistake inadvertently makes this method unable to change the weather condition\n      return updatedWeather\n    }\n\n    // In this method, the `color` parameter is unused.\n    // Is this a logical error (e.g. should it be passed through to the `universe.generateStars` method call),\n    // or is this an unused argument that should be removed from the method signature?\n    func generateUniverseWithStars(\n      at location: Point,\n      count: Int,\n      color: StarColor,\n      withAverageDistance averageDistance: Float)\n    {\n      let universe = generateUniverse()\n      universe.generateStars(\n        at: location,\n        count: count,\n        withAverageDistance: averageDistance)\n    }\n    ```\n\n    ```swift\n    // RIGHT\n\n    // Automatically reformatting the unused parameter to be an underscore\n    // makes it more clear that the parameter is unused, which makes it\n    // easier to spot the logical error.\n    func updateWeather(_: WeatherCondition) -> Weather {\n      var updatedWeather = self\n      updatedWeather.condition = condition\n      return updatedWeather\n    }\n\n    // The underscore makes it more clear that the `color` parameter is unused.\n    // This method argument can either be removed if truly unnecessary,\n    // or passed through to `universe.generateStars` to correct the logical error.\n    func generateUniverseWithStars(\n      at location: Point,\n      count: Int,\n      color _: StarColor,\n      withAverageDistance averageDistance: Float)\n    {\n      let universe = generateUniverse()\n      universe.generateStars(\n        at: location,\n        count: count,\n        withAverageDistance: averageDistance)\n    }\n    ```\n\n    </details>\n\n* <a id='remove-blank-lines-between-chained-functions'></a>(<a href='#remove-blank-lines-between-chained-functions'>link</a>) **Remove blank lines between chained functions.** [![SwiftFormat: blanklinesbetweenchainedfunctions](https://img.shields.io/badge/SwiftFormat-blankLinesBetweenChainedFunctions-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#blanklinesbetweenchainedfunctions)\n\n  <details>\n\n  #### Why?\n\n  Improves readability and maintainability, making it easier to see the sequence of functions that are applied to the object.\n\n  ```swift\n  // WRONG\n  var innerPlanetNames: [String] {\n    planets\n      .filter { $0.isInnerPlanet }\n\n      .map { $0.name }\n  }\n\n  // WRONG\n  var innerPlanetNames: [String] {\n    planets\n      .filter { $0.isInnerPlanet }\n\n      // Gets the name of the inner planet\n      .map { $0.name }\n  }\n\n  // RIGHT\n  var innerPlanetNames: [String] {\n    planets\n      .filter { $0.isInnerPlanet }\n      .map { $0.name }\n  }\n\n  // RIGHT\n  var innerPlanetNames: [String] {\n    planets\n      .filter { $0.isInnerPlanet }\n      // Gets the name of the inner planet\n      .map { $0.name }\n  }\n  ```\n\n  </details>\n\n### Closures\n\n* <a id='favor-void-closure-return'></a>(<a href='#favor-void-closure-return'>link</a>) **Favor `Void` return types over `()` in closure declarations.** If you must specify a `Void` return type in a function declaration, use `Void` rather than `()` to improve readability. [![SwiftFormat: void](https://img.shields.io/badge/SwiftFormat-void-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#void)\n\n  <details>\n\n  ```swift\n  // WRONG\n  func method(completion: () -> ()) {\n    ...\n  }\n\n  // RIGHT\n  func method(completion: () -> Void) {\n    ...\n  }\n  ```\n\n  </details>\n\n* <a id='unused-closure-parameter-naming'></a>(<a href='#unused-closure-parameter-naming'>link</a>) **Name unused closure parameters as underscores (`_`).** [![SwiftFormat: unusedArguments](https://img.shields.io/badge/SwiftFormat-unusedArguments-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#unusedArguments)\n\n    <details>\n\n    #### Why?\n    Naming unused closure parameters as underscores reduces the cognitive overhead required to read\n    closures by making it obvious which parameters are used and which are unused.\n\n    ```swift\n    // WRONG\n    someAsyncThing() { argument1, argument2, argument3 in\n      print(argument3)\n    }\n\n    // RIGHT\n    someAsyncThing() { _, _, argument3 in\n      print(argument3)\n    }\n    ```\n\n    </details>\n\n* <a id='closure-brace-spacing'></a>(<a href='#closure-brace-spacing'>link</a>) **Closures should have a single space or newline inside each brace.** Trailing closures should additionally have a single space or newline outside each brace. [![SwiftFormat: spaceInsideBraces](https://img.shields.io/badge/SwiftFormat-spaceInsideBraces-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#spaceInsideBraces) [![SwiftFormat: spaceAroundBraces](https://img.shields.io/badge/SwiftFormat-spaceAroundBraces-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#spaceAroundBraces)\n\n  <details>\n\n  ```swift\n  // WRONG\n  let evenSquares = numbers.filter{$0.isMultiple(of: 2)}.map{  $0 * $0  }\n\n  // RIGHT\n  let evenSquares = numbers.filter { $0.isMultiple(of: 2) }.map { $0 * $0 }\n\n  // WRONG\n  let evenSquares = numbers.filter( { $0.isMultiple(of: 2) } ).map( { $0 * $0 } )\n\n  // RIGHT\n  let evenSquares = numbers.filter({ $0.isMultiple(of: 2) }).map({ $0 * $0 })\n\n  // WRONG\n  let evenSquares = numbers\n    .filter{\n      $0.isMultiple(of: 2)\n    }\n    .map{\n      $0 * $0\n    }\n\n  // RIGHT\n  let evenSquares = numbers\n    .filter {\n      $0.isMultiple(of: 2)\n    }\n    .map {\n      $0 * $0\n    }\n  ```\n\n  </details>\n\n* <a id='omit-closure-void-return'></a>(<a href='#omit-closure-void-return'>link</a>) **Omit `Void` return types from closure expressions.** [![SwiftFormat: redundantVoidReturnType](https://img.shields.io/badge/SwiftFormat-redundantVoidReturnType-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#redundantVoidReturnType)\n\n  <details>\n\n  ```swift\n  // WRONG\n  someAsyncThing() { argument -> Void in\n    ...\n  }\n\n  // RIGHT\n  someAsyncThing() { argument in\n    ...\n  }\n  ```\n\n  </details>\n\n* <a id='anonymous-trailing-closures'></a>(<a href='#anonymous-trailing-closures'>link</a>) **Prefer trailing closure syntax for closure arguments with no parameter name.** [![SwiftFormat: trailingClosures](https://img.shields.io/badge/SwiftFormat-trailingClosures-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#trailingClosures)\n\n  <details>\n\n  ```swift\n  // WRONG\n  planets.map({ $0.name })\n\n  // RIGHT\n  planets.map { $0.name }\n\n  // ALSO RIGHT, since this closure has a parameter name\n  planets.first(where: { $0.isGasGiant })\n\n  // ALSO FINE. Trailing closure syntax is still permitted for closures\n  // with parameter names. However, consider using non-trailing syntax\n  // in cases where the parameter name is semantically meaningful.\n  planets.first { $0.isGasGiant }\n  ```\n\n  </details>\n\n* <a id='unowned-captures'></a>(<a href='#unowned-captures'>link</a>) **Avoid using `unowned` captures.** Instead prefer safer alternatives like `weak` captures, or capturing variables directly. [![SwiftLint: unowned_variable_capture](https://img.shields.io/badge/SwiftLint-unowned__variable__capture-007A87.svg)](https://realm.github.io/SwiftLint/unowned_variable_capture.html)\n\n  <details>\n  `unowned` captures are unsafe because they will cause the application to crash if the referenced object has been deallocated.\n\n  ```swift\n  // WRONG: Crashes if `self` has been deallocated when closures are called.\n  final class SpaceshipNavigationService {\n    let spaceship: Spaceship\n    let planet: Planet\n    \n    func colonizePlanet() {\n      spaceship.travel(to: planet, onArrival: { [unowned self] in\n        planet.colonize()\n      })\n    }\n    \n    func exploreSystem() {\n      spaceship.travel(to: planet, nextDestination: { [unowned self] in\n        planet.moons?.first\n      })\n    }\n  }\n  ```\n\n  `weak` captures are safer because they require the author to explicitly handle the case where the referenced object no longer exists.\n\n  ```swift\n  // RIGHT: Uses a `weak self` capture and explicitly handles the case where `self` has been deallocated\n  final class SpaceshipNavigationService {\n    let spaceship: Spaceship\n    let planet: Planet\n    \n    func colonizePlanet() {\n      spaceship.travel(to: planet, onArrival: { [weak self] in\n        guard let self else { return }\n        planet.colonize()\n      })\n    }\n    \n    func exploreSystem() {\n      spaceship.travel(to: planet, nextDestination: { [weak self] in\n        guard let self else { return nil }\n        return planet.moons?.first\n      })\n    }\n  }\n  ```\n\n  Alternatively, consider directly capturing the variables that are used in the closure. This lets you avoid having to handle the case where `self` is nil, since you don't even need to reference `self`:\n\n  ```swift\n  // RIGHT: Explicitly captures `planet` instead of capturing `self`\n  final class SpaceshipNavigationService {\n    let spaceship: Spaceship\n    let planet: Planet\n    \n    func colonizePlanet() {\n      spaceship.travel(to: planet, onArrival: { [planet] in\n        planet.colonize()\n      })\n    }\n    \n    func exploreSystem() {\n      spaceship.travel(to: planet, nextDestination: { [planet] in\n        planet.moons?.first\n      })\n    }\n  }\n  ```\n  \n  </details>\n\n### Operators\n\n* <a id='infix-operator-spacing'></a>(<a href='#infix-operator-spacing'>link</a>) **Infix operators should have a single space on either side.** However, in operator definitions, omit the trailing space between the operator and the open parenthesis. This rule does not apply to range operators (e.g. `1...3`). [![SwiftFormat: spaceAroundOperators](https://img.shields.io/badge/SwiftFormat-spaceAroundOperators-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#spacearoundoperators)\n\n  <details>\n\n  ```swift\n  // WRONG\n  let capacity = 1+2\n  let capacity = currentCapacity??0\n  let capacity=newCapacity\n  let latitude = region.center.latitude-region.span.latitudeDelta/2.0\n\n  // RIGHT\n  let capacity = 1 + 2\n  let capacity = currentCapacity ?? 0\n  let capacity = newCapacity\n  let latitude = region.center.latitude - region.span.latitudeDelta / 2.0\n  ```\n\n  ```swift\n  // WRONG\n  static func == (_ lhs: MyView, _ rhs: MyView) -> Bool {\n    lhs.id == rhs.id\n  }\n\n  // RIGHT\n  static func ==(_ lhs: MyView, _ rhs: MyView) -> Bool {\n    lhs.id == rhs.id\n  }\n  ```\n\n  </details>\n\n* <a id='long-ternary-operator-expressions'></a>(<a href='#long-ternary-operator-expressions'>link</a>) **[Long](https://github.com/airbnb/swift#column-width) ternary operator expressions should wrap before the `?` and before the `:`**, putting each conditional branch on a separate line. [![SwiftFormat: wrap](https://img.shields.io/badge/SwiftFormat-wrap-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#wrap)\n\n  <details>\n\n  ```swift\n  // WRONG (too long)\n  let destinationPlanet = solarSystem.hasPlanetsInHabitableZone ? solarSystem.planetsInHabitableZone.first : solarSystem.uninhabitablePlanets.first\n\n  // WRONG (naive wrapping)\n  let destinationPlanet = solarSystem.hasPlanetsInHabitableZone ? solarSystem.planetsInHabitableZone.first :\n    solarSystem.uninhabitablePlanets.first\n\n  // WRONG (unbalanced operators)\n  let destinationPlanet = solarSystem.hasPlanetsInHabitableZone ?\n    solarSystem.planetsInHabitableZone.first :\n    solarSystem.uninhabitablePlanets.first\n\n  // RIGHT\n  let destinationPlanet = solarSystem.hasPlanetsInHabitableZone\n    ? solarSystem.planetsInHabitableZone.first\n    : solarSystem.uninhabitablePlanets.first\n   ```\n\n  </details>\n\n* <a id='use-commas-in-and-conditions'></a>(<a href='#use-commas-in-and-conditions'>link</a>) In conditional statements (`if`, `guard`, `while`), separate boolean conditions using commas (`,`) instead of `&&` operators.  [![SwiftFormat: andOperator](https://img.shields.io/badge/SwiftFormat-andOperator-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#andOperator)\n\n  <details>\n\n  ```swift\n  // WRONG\n  if let star = planet.star, !planet.isHabitable && planet.isInHabitableZone(of: star) {\n    planet.terraform()\n  }\n\n  if\n    let star = planet.star,\n    !planet.isHabitable\n    && planet.isInHabitableZone(of: star)\n  {\n    planet.terraform()\n  }\n\n  // RIGHT\n  if let star = planet.star, !planet.isHabitable, planet.isInHabitableZone(of: star) {\n    planet.terraform()\n  }\n\n  if\n    let star = planet.star,\n    !planet.isHabitable,\n    planet.isInHabitableZone(of: star)\n  {\n    planet.terraform()\n  }\n  ```\n\n  </details>\n\n* <a id='prefer-bound-generic-extension-shorthand'></a>(<a href='#prefer-bound-generic-extension-shorthand'>link</a>) When extending bound generic types, prefer using generic bracket syntax (`extension Collection<Planet>`), or sugared syntax for applicable standard library types (`extension [Planet]`) instead of generic type constraints. [![SwiftFormat: genericExtensions](https://img.shields.io/badge/SwiftFormat-genericExtensions-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#genericExtensions)\n\n  <details>\n\n  ```swift\n  // WRONG\n  extension Array where Element == Star { … }\n  extension Optional where Wrapped == Spaceship { … }\n  extension Dictionary where Key == Moon, Element == Planet { … }\n  extension Collection where Element == Universe { … }\n  extension StateStore where State == SpaceshipState, Action == SpaceshipAction { … }\n\n  // RIGHT\n  extension [Star] { … }\n  extension Spaceship? { … }\n  extension [Moon: Planet] { … }\n  extension Collection<Universe> { … }\n  extension StateStore<SpaceshipState, SpaceshipAction> { … }\n\n  // ALSO RIGHT. There are multiple types that could satisfy this constraint\n  // (e.g. [Planet], [Moon]), so this is not a \"bound generic type\" and isn't\n  // eligible for the generic bracket syntax.\n  extension Array where Element: PlanetaryBody { }\n  ```\n\n  </details>\n\n* <a id='no-semicolons'></a>(<a href='#no-semicolons'>link</a>) **Avoid using semicolons.** Semicolons are not required at the end of a line, so should be omitted. While you can use semicolons to place two statements on the same line, it is more common and preferred to separate them using a newline instead. [![SwiftFormat: semicolons](https://img.shields.io/badge/SwiftFormat-semicolons-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#semicolons)\n\n  <details>\n\n  ### Examples\n\n  ```swift\n  // WRONG. Semicolons are not required and can be omitted.\n  let mercury = planets[0];\n  let venus = planets[1];\n  let earth = planets[2];\n\n  // WRONG. While you can use semicolons to place multiple statements on a single line,\n  // it is more common and preferred to separate them using newlines instead.\n  let mercury = planets[0]; let venus = planets[1]; let earth = planets[2];\n\n  // RIGHT\n  let mercury = planets[0]\n  let venus = planets[1]\n  let earth = planets[2]\n\n  // WRONG\n  guard let moon = planet.moon else { completion(nil); return }\n\n  // WRONG\n  guard let moon = planet.moon else { \n    completion(nil); return\n  }\n\n  // RIGHT\n  guard let moon = planet.moon else { \n    completion(nil)\n    return\n  }\n  ```\n\n  </details>\n\n**[⬆ back to top](#table-of-contents)**\n\n## Patterns\n\n* <a id='implicitly-unwrapped-optionals'></a>(<a href='#implicitly-unwrapped-optionals'>link</a>) **Prefer initializing properties at `init` time whenever possible, rather than using implicitly unwrapped optionals.**  A notable exception is UIViewController's `view` property. [![SwiftLint: implicitly_unwrapped_optional](https://img.shields.io/badge/SwiftLint-implicitly__unwrapped__optional-007A87.svg)](https://realm.github.io/SwiftLint/implicitly_unwrapped_optional)\n\n  <details>\n\n  ```swift\n  // WRONG\n  class MyClass {\n\n    init() {\n      super.init()\n      someValue = 5\n    }\n\n    var someValue: Int!\n  }\n\n  // RIGHT\n  class MyClass {\n\n    init() {\n      someValue = 0\n      super.init()\n    }\n\n    var someValue: Int\n  }\n  ```\n\n  </details>\n\n* <a id='time-intensive-init'></a>(<a href='#time-intensive-init'>link</a>) **Avoid performing any meaningful or time-intensive work in `init()`.** Avoid doing things like opening database connections, making network requests, reading large amounts of data from disk, etc. Create something like a `start()` method if these things need to be done before an object is ready for use.\n\n* <a id='complex-property-observers'></a>(<a href='#complex-property-observers'>link</a>) **Extract complex property observers into methods.** This reduces nestedness, separates side-effects from property declarations, and makes the usage of implicitly-passed parameters like `oldValue` explicit.\n\n  <details>\n\n  ```swift\n  // WRONG\n  class TextField {\n    var text: String? {\n      didSet {\n        guard oldValue != text else {\n          return\n        }\n\n        // Do a bunch of text-related side-effects.\n      }\n    }\n  }\n\n  // RIGHT\n  class TextField {\n    var text: String? {\n      didSet { textDidUpdate(from: oldValue) }\n    }\n\n    private func textDidUpdate(from oldValue: String?) {\n      guard oldValue != text else {\n        return\n      }\n\n      // Do a bunch of text-related side-effects.\n    }\n  }\n  ```\n\n  </details>\n\n* <a id='complex-callback-block'></a>(<a href='#complex-callback-block'>link</a>) **Extract complex callback blocks into methods**. This limits the complexity introduced by weak-self in blocks and reduces nestedness. If you need to reference self in the method call, make use of `guard` to unwrap self for the duration of the callback.\n\n  <details>\n\n  ```swift\n  // WRONG\n  class MyClass {\n\n    func request(completion: () -> Void) {\n      API.request() { [weak self] response in\n        if let self {\n          // Processing and side effects\n        }\n        completion()\n      }\n    }\n  }\n\n  // RIGHT\n  class MyClass {\n\n    func request(completion: () -> Void) {\n      API.request() { [weak self] response in\n        guard let self else { return }\n        self.doSomething(with: self.property, response: response)\n        completion()\n      }\n    }\n\n    func doSomething(with nonOptionalParameter: SomeClass, response: SomeResponseClass) {\n      // Processing and side effects\n    }\n  }\n  ```\n\n  </details>\n\n* <a id='guards-at-top'></a>(<a href='#guards-at-top'>link</a>) **Prefer using `guard` at the beginning of a scope.**\n\n  <details>\n\n  #### Why?\n  It's easier to reason about a block of code when all `guard` statements are grouped together at the top rather than intermixed with business logic.\n\n  </details>\n\n* <a id='limit-access-control'></a>(<a href='#limit-access-control'>link</a>) **Access control should be at the strictest level possible.** Prefer `public` to `open` and `private` to `fileprivate` unless you need that behavior. [![SwiftFormat: redundantFileprivate](https://img.shields.io/badge/SwiftFormat-redundantFileprivate-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#redundantFileprivate)\n\n  <details>\n\n  ```swift\n  // WRONG\n  public struct Spaceship {\n    // WRONG: `engine` is used in `extension Spaceship` below,\n    // but extensions in the same file can access `private` members.\n    fileprivate let engine: AntimatterEngine\n\n    // WRONG: `hull` is not used by any other type, so `fileprivate` is unnecessary.\n    fileprivate let hull: Hull\n\n    // RIGHT: `navigation` is used in `extension Pilot` below,\n    // so `fileprivate` is necessary here.\n    fileprivate let navigation: SpecialRelativityNavigationService\n  }\n\n  extension Spaceship {\n    public func blastOff() {\n      engine.start()\n    }\n  }\n\n  extension Pilot {\n    public func chartCourse() {\n      spaceship.navigation.course = .andromedaGalaxy\n      spaceship.blastOff()\n    }\n  }\n  ```\n\n  ```swift\n  // RIGHT\n  public struct Spaceship {\n    fileprivate let navigation: SpecialRelativityNavigationService\n    private let engine: AntimatterEngine\n    private let hull: Hull\n  }\n\n  extension Spaceship {\n    public func blastOff() {\n      engine.start()\n    }\n  }\n\n  extension Pilot {\n    public func chartCourse() {\n      spaceship.navigation.course = .andromedaGalaxy\n      spaceship.blastOff()\n    }\n  }\n  ```\n\n* <a id='avoid-global-functions'></a>(<a href='#avoid-global-functions'>link</a>) **Avoid global functions whenever possible.** Prefer methods within type definitions.\n\n  <details>\n\n  ```swift\n  // WRONG\n  func age(of person: Person, bornAt: TimeInterval) -> Int {\n    // ...\n  }\n\n  func jump(person: Person) {\n    // ...\n  }\n\n  // RIGHT\n  class Person {\n    var bornAt: TimeInterval\n\n    var age: Int {\n      // ...\n    }\n\n    func jump() {\n      // ...\n    }\n  }\n  ```\n\n  </details>\n\n* <a id='namespace-using-enums'></a>(<a href='#namespace-using-enums'>link</a>) **Use caseless `enum`s for organizing `public` or `internal` constants and functions into namespaces.** [![SwiftFormat: enumNamespaces](https://img.shields.io/badge/SwiftFormat-enumNamespaces-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#enumNamespaces)\n  * Avoid creating non-namespaced global constants and functions.\n  * Feel free to nest namespaces where it adds clarity.\n  * `private` globals are permitted, since they are scoped to a single file and do not pollute the global namespace. Consider placing private globals in an `enum` namespace to match the guidelines for other declaration types.\n\n  <details>\n\n  #### Why?\n  Caseless `enum`s work well as namespaces because they cannot be instantiated, which matches their intent.\n\n  ```swift\n  // WRONG\n  struct Environment {\n    static let earthGravity = 9.8\n    static let moonGravity = 1.6\n  }\n\n  // WRONG\n  struct Environment {\n\n    struct Earth {\n      static let gravity = 9.8\n    }\n\n    struct Moon {\n      static let gravity = 1.6\n    }\n  }\n\n  // RIGHT\n  enum Environment {\n\n    enum Earth {\n      static let gravity = 9.8\n    }\n\n    enum Moon {\n      static let gravity = 1.6\n    }\n  }\n  ```\n\n  </details>\n\n* <a id='auto-enum-values'></a>(<a href='#auto-enum-values'>link</a>) **Use Swift's automatic enum values unless they map to an external source.** Add a comment explaining why explicit values are defined. [![SwiftFormat: redundantRawValues](https://img.shields.io/badge/SwiftFormat-redundantRawValues-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#redundantRawValues)\n\n  <details>\n\n  #### Why?\n  To minimize user error, improve readability, and write code faster, rely on Swift's automatic enum values. If the value maps to an external source (e.g. it's coming from a network request) or is persisted across binaries, however, define the values explicitly, and document what these values are mapping to.\n\n  This ensures that if someone adds a new value in the middle, they won't accidentally break things.\n\n  ```swift\n  // WRONG\n  enum ErrorType: String {\n    case error = \"error\"\n    case warning = \"warning\"\n  }\n\n  // WRONG\n  enum UserType: String {\n    case owner\n    case manager\n    case member\n  }\n\n  // WRONG\n  enum Planet: Int {\n    case mercury = 0\n    case venus = 1\n    case earth = 2\n    case mars = 3\n    case jupiter = 4\n    case saturn = 5\n    case uranus = 6\n    case neptune = 7\n  }\n\n  // WRONG\n  enum ErrorCode: Int {\n    case notEnoughMemory\n    case invalidResource\n    case timeOut\n  }\n\n  // RIGHT\n  // Relying on Swift's automatic enum values\n  enum ErrorType: String {\n    case error\n    case warning\n  }\n\n  // RIGHT\n  /// These are written to a logging service. Explicit values ensure they're consistent across binaries.\n  // swiftformat:disable redundantRawValues\n  enum UserType: String {\n    case owner = \"owner\"\n    case manager = \"manager\"\n    case member = \"member\"\n  }\n  // swiftformat:enable redundantRawValues\n\n  // RIGHT\n  // Relying on Swift's automatic enum values\n  enum Planet: Int {\n    case mercury\n    case venus\n    case earth\n    case mars\n    case jupiter\n    case saturn\n    case uranus\n    case neptune\n  }\n\n  // RIGHT\n  /// These values come from the server, so we set them here explicitly to match those values.\n  enum ErrorCode: Int {\n    case notEnoughMemory = 0\n    case invalidResource = 1\n    case timeOut = 2\n  }\n  ```\n\n  </details>\n\n* <a id='semantic-optionals'></a>(<a href='#semantic-optionals'>link</a>) **Use optionals only when they have semantic meaning.**\n\n* <a id='prefer-immutable-values'></a>(<a href='#prefer-immutable-values'>link</a>) **Prefer immutable values whenever possible.** Use `map` and `compactMap` instead of appending to a new collection. Use `filter` instead of removing elements from a mutable collection.\n\n  <details>\n\n  #### Why?\n  Mutable variables increase complexity, so try to keep them in as narrow a scope as possible.\n\n  ```swift\n  // WRONG\n  var results = [SomeType]()\n  for element in input {\n    let result = transform(element)\n    results.append(result)\n  }\n\n  // RIGHT\n  let results = input.map { transform($0) }\n  ```\n\n  ```swift\n  // WRONG\n  var results = [SomeType]()\n  for element in input {\n    if let result = transformThatReturnsAnOptional(element) {\n      results.append(result)\n    }\n  }\n\n  // RIGHT\n  let results = input.compactMap { transformThatReturnsAnOptional($0) }\n  ```\n\n  </details>\n\n* <a id='prefer-immutable-statics'></a>(<a href='#prefer-immutable-statics'>link</a>) **Prefer immutable or computed static properties over mutable ones whenever possible.** Use stored `static let` properties or computed `static var` properties over stored `static var` properties whenever possible, as stored `static var` properties are global mutable state.\n\n  <details>\n\n  #### Why?\n  Global mutable state increases complexity and makes it harder to reason about the behavior of applications. It should be avoided when possible.\n\n  ```swift\n  // WRONG\n  enum Fonts {\n    static var title = UIFont(…)\n  }\n\n  // RIGHT\n  enum Fonts {\n    static let title = UIFont(…)\n  }\n  ```\n\n  ```swift\n  // WRONG\n  struct FeatureState {\n    var count: Int\n\n    static var initial = FeatureState(count: 0)\n  }\n\n  // RIGHT\n  struct FeatureState {\n    var count: Int\n\n    static var initial: FeatureState {\n      // Vend static properties that are cheap to compute\n      FeatureState(count: 0)\n    }\n  }\n  ```\n\n  </details>\n\n* <a id='preconditions-and-asserts'></a>(<a href='#preconditions-and-asserts'>link</a>) **Handle an unexpected but recoverable condition with an `assert` method combined with the appropriate logging in production. If the unexpected condition is not recoverable, prefer a `precondition` method or `fatalError()`.** This strikes a balance between crashing and providing insight into unexpected conditions in the wild. Only prefer `fatalError` over a `precondition` method when the failure message is dynamic, since a `precondition` method won't report the message in the crash report. [![SwiftLint: fatal_error_message](https://img.shields.io/badge/SwiftLint-fatal__error__message-007A87.svg)](https://realm.github.io/SwiftLint/fatal_error_message)\n\n  <details>\n\n  ```swift\n  func didSubmitText(_ text: String) {\n    // It's unclear how this was called with an empty string; our custom text field shouldn't allow this.\n    // This assert is useful for debugging but it's OK if we simply ignore this scenario in production.\n    guard !text.isEmpty else {\n      assertionFailure(\"Unexpected empty string\")\n      return\n    }\n    // ...\n  }\n\n  func transformedItem(atIndex index: Int, from items: [Item]) -> Item {\n    precondition(index >= 0 && index < items.count)\n    // It's impossible to continue executing if the precondition has failed.\n    // ...\n  }\n\n  func makeImage(name: String) -> UIImage {\n    guard let image = UIImage(named: name, in: nil, compatibleWith: nil) else {\n      fatalError(\"Image named \\(name) couldn't be loaded.\")\n      // We want the error message so we know the name of the missing image.\n    }\n    return image\n  }\n  ```\n\n  </details>\n\n* <a id='static-type-methods-by-default'></a>(<a href='#static-type-methods-by-default'>link</a>) **Default type methods to `static`.**\n\n  <details>\n\n  #### Why?\n  If a method needs to be overridden, the author should opt into that functionality by using the `class` keyword instead.\n\n  ```swift\n  // WRONG\n  class Fruit {\n    class func eatFruits(_ fruits: [Fruit]) { ... }\n  }\n\n  // RIGHT\n  class Fruit {\n    static func eatFruits(_ fruits: [Fruit]) { ... }\n  }\n  ```\n\n  </details>\n\n* <a id='final-classes-by-default'></a>(<a href='#final-classes-by-default'>link</a>) **Default classes to `final`.**\n\n  <details>\n\n  #### Why?\n  If a class needs to be overridden, the author should opt into that functionality by omitting the `final` keyword.\n\n  ```swift\n  // WRONG\n  class SettingsRepository {\n    // ...\n  }\n\n  // RIGHT\n  final class SettingsRepository {\n    // ...\n  }\n  ```\n\n  </details>\n\n* <a id='switch-avoid-default'></a>(<a href='#switch-avoid-default'>link</a>) When switching over an enum, generally prefer enumerating all cases rather than using the `default` case.\n\n  <details>\n\n  #### Why?\n  Enumerating every case requires developers and reviewers have to consider the correctness of every switch statement when new cases are added in the future.\n\n  ```swift\n  // NOT PREFERRED\n  switch trafficLight {\n  case .greenLight:\n    // Move your vehicle\n  default:\n    // Stop your vehicle\n  }\n\n  // PREFERRED\n  switch trafficLight {\n  case .greenLight:\n    // Move your vehicle\n  case .yellowLight, .redLight:\n    // Stop your vehicle\n  }\n  \n  // COUNTEREXAMPLES\n\n  enum TaskState {\n    case pending\n    case running\n    case canceling\n    case success(Success)\n    case failure(Error)\n\n    // We expect that this property will remain valid if additional cases are added to the enumeration.\n    public var isRunning: Bool {\n      switch self {\n      case .running:\n        true\n      default:\n        false\n      }\n    }  \n  }\n\n  extension TaskState: Equatable {\n    // Explicitly listing each state would be too burdensome. Ideally this function could be implemented with a well-tested macro.\n    public static func == (lhs: TaskState, rhs: TaskState) -> Bool {\n      switch (lhs, rhs) {\n      case (.pending, .pending):\n        true\n      case (.running, .running):\n        true\n      case (.canceling, .canceling):\n        true\n      case (.success(let lhs), .success(let rhs)):\n        lhs == rhs\n      case (.failure(let lhs), .failure(let rhs)):\n        lhs == rhs\n      default:\n        false\n      }\n    }\n  }\n  ```\n\n  </details>\n\n* <a id='optional-nil-check'></a>(<a href='#optional-nil-check'>link</a>) **Check for nil rather than using optional binding if you don't need to use the value.** [![SwiftLint: unused_optional_binding](https://img.shields.io/badge/SwiftLint-unused__optional__binding-007A87.svg)](https://realm.github.io/SwiftLint/unused_optional_binding)\n\n  <details>\n\n  #### Why?\n  Checking for nil makes it immediately clear what the intent of the statement is. Optional binding is less explicit.\n\n  ```swift\n  var thing: Thing?\n\n  // WRONG\n  if let _ = thing {\n    doThing()\n  }\n\n  // RIGHT\n  if thing != nil {\n    doThing()\n  }\n  ```\n\n  </details>\n\n* <a id='omit-return'></a>(<a href='#omit-return'>link</a>) **Omit the `return` keyword when not required by the language.** [![SwiftFormat: redundantReturn](https://img.shields.io/badge/SwiftFormat-redundantReturn-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#redundantReturn)\n\n  <details>\n\n  ```swift\n  // WRONG\n  [\"1\", \"2\", \"3\"].compactMap { return Int($0) }\n\n  var size: CGSize {\n    return CGSize(\n      width: 100.0,\n      height: 100.0)\n  }\n\n  func makeInfoAlert(message: String) -> UIAlertController {\n    return UIAlertController(\n      title: \"ℹ️ Info\",\n      message: message,\n      preferredStyle: .alert)\n  }\n\n  var alertTitle: String {\n    if issue.severity == .critical {\n      return \"💥 Critical Error\"\n    } else {\n      return \"ℹ️ Info\"\n    }\n  }\n\n  func type(of planet: Planet) -> PlanetType {\n    switch planet {\n    case .mercury, .venus, .earth, .mars:\n      return .terrestrial\n    case .jupiter, .saturn, .uranus, .neptune:\n      return .gasGiant\n    }\n  }\n\n  // RIGHT\n  [\"1\", \"2\", \"3\"].compactMap { Int($0) }\n\n  var size: CGSize {\n    CGSize(\n      width: 100.0,\n      height: 100.0)\n  }\n\n  func makeInfoAlert(message: String) -> UIAlertController {\n    UIAlertController(\n      title: \"ℹ️ Info\",\n      message: message,\n      preferredStyle: .alert)\n  }\n\n  var alertTitle: String {\n    if issue.severity == .critical {\n      \"💥 Critical Error\"\n    } else {\n      \"ℹ️ Info\"\n    }\n  }\n\n  func type(of planet: Planet) -> PlanetType {\n    switch planet {\n    case .mercury, .venus, .earth, .mars:\n      .terrestrial\n    case .jupiter, .saturn, .uranus, .neptune:\n      .gasGiant\n    }\n  }\n  ```\n\n  </details>\n\n* <a id='use-anyobject'></a>(<a href='#use-anyobject'>link</a>) **Use `AnyObject` instead of `class` in protocol definitions.** [![SwiftFormat: anyObjectProtocol](https://img.shields.io/badge/SwiftFormat-anyObjectProtocol-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#anyobjectprotocol)\n\n  <details>\n\n  #### Why?\n\n  [SE-0156](https://github.com/apple/swift-evolution/blob/master/proposals/0156-subclass-existentials.md), which introduced support for using the `AnyObject` keyword as a protocol constraint, recommends preferring `AnyObject` over `class`:\n\n  > This proposal merges the concepts of `class` and `AnyObject`, which now have the same meaning: they represent an existential for classes. To get rid of the duplication, we suggest only keeping `AnyObject` around. To reduce source-breakage to a minimum, `class` could be redefined as `typealias class = AnyObject` and give a deprecation warning on class for the first version of Swift this proposal is implemented in. Later, `class` could be removed in a subsequent version of Swift.\n\n  ```swift\n  // WRONG\n  protocol Foo: class { }\n\n  // RIGHT\n  protocol Foo: AnyObject { }\n  ```\n\n  </details>\n\n* <a id='extension-access-control'></a>(<a href='#extension-access-control'>link</a>) **Specify the access control for each declaration in an extension individually.** [![SwiftFormat: extensionAccessControl](https://img.shields.io/badge/SwiftFormat-extensionAccessControl-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#extensionaccesscontrol)\n\n  <details>\n\n  #### Why?\n\n  Specifying the access control on the declaration itself helps engineers more quickly determine the access control level of an individual declaration.\n\n  ```swift\n  // WRONG\n  public extension Universe {\n    // This declaration doesn't have an explicit access control level.\n    // In all other scopes, this would be an internal function,\n    // but because this is in a public extension, it's actually a public function.\n    func generateGalaxy() { }\n  }\n\n  // WRONG\n  private extension Spaceship {\n    func enableHyperdrive() { }\n  }\n\n  // RIGHT\n  extension Universe {\n    // It is immediately obvious that this is a public function,\n    // even if the start of the `extension Universe` scope is off-screen.\n    public func generateGalaxy() { }\n  }\n\n  // RIGHT\n  extension Spaceship {\n    // Recall that a private extension actually has fileprivate semantics,\n    // so a declaration in a private extension is fileprivate by default.\n    fileprivate func enableHyperdrive() { }\n  }\n  ```\n\n  </details>\n\n* <a id='no-direct-standard-out-logs'></a>(<a href='#no-direct-standard-out-logs'>link</a>) **Prefer dedicated logging systems like [`os_log`](https://developer.apple.com/documentation/os/logging) or [`swift-log`](https://github.com/apple/swift-log) over writing directly to standard out using `print(…)`, `debugPrint(…)`, or `dump(…)`.**\n\n  <details>\n\n  #### Why?\n  All log messages should flow into intermediate logging systems that can direct messages to the correct destination(s) and potentially filter messages based on the app's environment or configuration. `print(…)`, `debugPrint(…)`, or `dump(…)` will write all messages directly to standard out in all app configurations and can potentially leak personally identifiable information (PII).\n\n  </details>\n\n* <a id='no-file-literal'></a>(<a href='#no-file-literal'>link</a>) **Don't use `#file`. Use `#fileID` or `#filePath` as appropriate.**\n\n  <details>\n\n  #### Why?\n  The behavior of the `#file` literal (or macro as of Swift 5.9) has evolved from evaluating to the full source file path (the behavior as of `#filePath`) to a human-readable string containing module and file name (the behavior of `#fileID`). Use the literal (or macro) with the most appropriate behavior for your use case.\n\n  [Swift documentation](https://developer.apple.com/documentation/swift/file)\n\n  [Swift Evolution Proposal: Concise magic file names](https://github.com/apple/swift-evolution/blob/main/proposals/0274-magic-file.md)\n\n  </details>\n\n* <a id='no-filepath-literal'></a>(<a href='#no-filepath-literal'>link</a>) **Don't use `#filePath` in production code. Use `#fileID` instead.**\n\n  <details>\n\n  #### Why?\n  `#filePath` should only be used in non-production code where the full path of the source file provides useful information to developers. Because `#fileID` doesn’t embed the full path to the source file, it won't expose your file system and reduces the size of the compiled binary.\n\n  [#filePath documentation](https://developer.apple.com/documentation/swift/filepath#overview)\n\n  </details>\n\n* <a id='avoid-redundant-closures'></a>(<a href='#avoid-redundant-closures'>link</a>) **Avoid single-expression closures that are always called immediately**. Instead, prefer inlining the expression. [![SwiftFormat: redundantClosure](https://img.shields.io/badge/SwiftFormat-redundantClosure-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#redundantClosure)\n\n  <details>\n\n  ```swift\n  // WRONG\n  lazy var universe: Universe = {\n    Universe()\n  }()\n\n  lazy var stars = {\n    universe.generateStars(\n      at: location,\n      count: 5,\n      color: starColor,\n      withAverageDistance: 4)\n  }()\n\n  // RIGHT\n  lazy var universe = Universe()\n\n  lazy var stars = universe.generateStars(\n    at: location,\n    count: 5,\n    color: starColor,\n    withAverageDistance: 4)\n  ```\n\n  </details>\n\n* <a id='redundant-get'></a>(<a href='#redundant-get'>link</a>) **Omit the `get` clause from a computed property declaration that doesn't also have a `set`, `willSet`, or `didSet` clause.** [![SwiftFormat: redundantGet](https://img.shields.io/badge/SwiftFormat-redundantGet-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#redundantGet)\n\n    <details>\n\n    ```swift\n    // WRONG\n    var universe: Universe {\n      get {\n        Universe()\n      }\n    }\n\n    // RIGHT\n    var universe: Universe {\n      Universe()\n    }\n\n    // RIGHT\n    var universe: Universe {\n      get { multiverseService.current }\n      set { multiverseService.current = newValue }\n    }\n    ```\n\n    </details>\n\n* <a id='prefer-opaque-generic-parameters'></a>(<a href='#prefer-opaque-generic-parameters'>link</a>) **Prefer using opaque generic parameters (with `some`) over verbose named generic parameter syntax where possible.**  [![SwiftFormat: opaqueGenericParameters](https://img.shields.io/badge/SwiftFormat-opaqueGenericParameters-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#opaqueGenericParameters)\n\n    <details>\n\n    #### Why?\n\n    Opaque generic parameter syntax is significantly less verbose and thus more legible than the full named generic parameter syntax.\n\n    ```swift\n    // WRONG\n    func spaceshipDashboard<WarpDriveView: View, CaptainsLogView: View>(\n      warpDrive: WarpDriveView,\n      captainsLog: CaptainsLogView)\n      -> some View\n    { … }\n\n    func generate<Planets>(_ planets: Planets) where Planets: Collection, Planets.Element == Planet {\n      …\n    }\n\n    // RIGHT\n    func spaceshipDashboard(\n      warpDrive: some View,\n      captainsLog: some View)\n      -> some View\n    { … }\n\n    func generate(_ planets: some Collection<Planet>) {\n      …\n    }\n\n    // Also fine, since there isn't an equivalent opaque parameter syntax for expressing\n    // that two parameters in the type signature are of the same type:\n    func terraform<Body: PlanetaryBody>(_ planetaryBody: Body, into terraformedBody: Body) {\n      …\n    }\n\n    // Also fine, since the generic parameter name is referenced in the function body so can't be removed:\n    func terraform<Body: PlanetaryBody>(_ planetaryBody: Body)  {\n      planetaryBody.generateAtmosphere(Body.idealAtmosphere)\n    }\n    ```\n\n    #### `some Any`\n\n    Fully-unconstrained generic parameters are somewhat uncommon, but are equivalent to `some Any`. For example:\n\n    ```swift\n    func assertFailure<Value>(\n      _ result: Result<Value, Error>,\n      file: StaticString = #filePath,\n      line: UInt = #line)\n    {\n      if case .failure(let error) = result {\n        XCTFail(error.localizedDescription, file: file, line: line)\n      }\n    }\n\n    // is equivalent to:\n    func assertFailure(\n      _ result: Result<some Any, Error>,\n      file: StaticString = #filePath,\n      line: UInt = #line)\n    {\n      if case .failure(let error) = result {\n        XCTFail(error.localizedDescription, file: file, line: line)\n      }\n    }\n    ```\n\n    `some Any` is somewhat unintuitive, and the named generic parameter is useful in this situation to compensate for the weak type information. Because of this, prefer using named generic parameters instead of `some Any`.\n\n    </details>\n\n* <a id='unchecked-sendable'></a>(<a href='#unchecked-sendable'>link</a>) **Prefer to avoid using `@unchecked Sendable`**. Use a standard `Sendable` conformance instead where possible. If working with a type from a module that has not yet been updated to support Swift Concurrency, suppress concurrency-related errors using `@preconcurrency import`. \n\n    <details>\n\n    `@unchecked Sendable` provides no guarantees about the thread safety of a type, and instead unsafely suppresses compiler errors related to concurrency checking. \n\n    There are typically other, safer methods for suppressing concurrency-related errors:\n\n    ### 1. Use `Sendable` instead of `@unchecked Sendable`, with `@MainActor` if appropriate\n\n    A `Sendable` conformance is the preferred way to declare that a type is thread-safe. The compiler will emit an error if a type conforming to `Sendable` is not thread-safe. For example, simple value types and immutable classes can always safely conform to `Sendable`, but mutable classes cannot:\n\n    ```swift\n    // RIGHT: Simple value types are thread-safe.\n    struct Planet: Sendable {\n      var mass: Double\n    }\n\n    // RIGHT: Immutable classes are thread-safe.\n    final class Planet: Sendable {\n      let mass: Double\n    }\n\n    // WRONG: Mutable classes are not thread-safe.\n    final class Planet: Sendable {\n      // ERROR: stored property 'mass' of 'Sendable'-conforming class 'Planet' is mutable\n      var mass: Double\n    }\n\n    // WRONG: @unchecked is unnecessary because the compiler can prove that the type is thread-safe.\n    struct Planet: @unchecked Sendable {\n      var mass: Double\n    }\n    ```\n\n    Mutable classes can be made `Sendable` and thread-safe if they are isolated to a single actor / thread / concurrency domain. Any mutable class can be made `Sendable` by isolating it to a global actor using an annotation like `@MainActor` (which isolates it to the main actor):\n\n    ```swift\n    // RIGHT: A mutable class isolated to the main actor is thread-safe.\n    @MainActor\n    final class Planet: Sendable {\n      var mass: Double\n    }\n\n    // WRONG: @unchecked Sendable is unsafe because mutable classes are not thread-safe.\n    struct Planet: @unchecked Sendable {\n      var mass: Double\n    }\n    ```\n\n    ### 2. Use `@preconcurrency import`\n\n    If working with a non-`Sendable` type from a module that hasn't yet adopted Swift concurrency, suppress concurrency-related errors using `@preconcurrency import`.\n\n    ```swift\n    /// Defined in `UniverseKit` module\n    class Planet: PlanetaryBody { \n      var star: Star\n    }\n    ```\n\n    ```swift \n    // WRONG: Unsafely marking a non-thread-safe class as Sendable only to suppress errors\n    import PlanetaryBody\n\n    extension PlanetaryBody: @unchecked Sendable { }\n\n    // RIGHT\n    @preconcurrency import PlanetaryBody\n    ```\n\n    ### 3. Restructure code so the compiler can verify that it is thread-safe\n\n    If possible, restructure code so that the compiler can verify that it is thread safe. This lets you use a `Sendable` conformance instead of an unsafe `@unchecked Sendable` conformance. \n\n    When conforming to `Sendable`, the compiler will emit an error in the future if you attempt to make a change that is not thread-safe. This guarantee is lost when using `@unchecked Sendable`, which makes it easier to accidentally introduce changes which are not thread-safe.\n\n    For example, given this set of classes:\n\n    ```swift\n    class PlanetaryBody { \n      let mass: Double  \n    }\n\n    class Planet: PlanetaryBody { \n      let star: Star\n    }\n\n    // NOT IDEAL: no compiler-enforced thread safety.\n    extension PlanetaryBody: @unchecked Sendable { }\n    ```\n\n    the compiler can't verify `PlanetaryBody` is `Sendable` because it is not `final`. Instead of using `@unchecked Sendable`, you could restructure the code to not use subclassing:\n\n    ```swift\n    // BETTER: Compiler-enforced thread safety.\n    protocol PlanetaryBody: Sendable {\n      var mass: Double { get }\n    }\n\n    final class Planet: PlanetaryBody, Sendable {\n      let mass: Double\n      let star: Star\n    }\n    ```\n\n    ### Using `@unchecked Sendable` when necessary\n\n    Sometimes it is truly necessary to use `@unchecked Sendable`. In these cases, you can add a `// swiftlint:disable:next no_unchecked_sendable` annotation with an explanation for how we know the type is thread-safe, and why we have to use `@unchecked Sendable` instead of `Sendable`.\n\n    A canonical, safe use case of `@unchecked Sendable` is a class where the mutable state is protected by some other thread-safe mechanism like a lock. This type is thread-safe, but the compiler cannot verify this.\n\n    ```swift\n    struct Atomic<Value> {\n      /// `value` is thread-safe because it is manually protected by a lock.\n      var value: Value { ... }\n    }\n\n    // WRONG: disallowed by linter\n    extension Atomic: @unchecked Sendable { }\n\n    // WRONG: suppressing lint error without an explanation\n    // swiftlint:disable:next no_unchecked_sendable\n    extension Atomic: @unchecked Sendable { }\n\n    // RIGHT: suppressing the linter with an explanation why the type is thread-safe\n    // Atomic is thread-safe because its underlying mutable state is protected by a lock.\n    // swiftlint:disable:next no_unchecked_sendable\n    extension Atomic: @unchecked Sendable { }\n    ```\n\n    It is also reasonable to use `@unchecked Sendable` for types that are thread-safe in existing usage but can't be refactored to support a proper `Sendable` conformance (e.g. due to backwards compatibility constraints):\n\n    ```swift\n    class PlanetaryBody { \n      let mass: Double  \n    }\n\n    class Planet: PlanetaryBody { \n      let star: Star\n    }\n\n    // WRONG: disallowed by linter\n    extension PlanetaryBody: @unchecked Sendable { }\n\n    // WRONG: suppressing lint error without an explanation\n    // swiftlint:disable:next no_unchecked_sendable\n    extension PlanetaryBody: @unchecked Sendable { }\n\n    // RIGHT: suppressing the linter with an explanation why the type is thread-safe\n    // PlanetaryBody cannot conform to Sendable because it is non-final and has subclasses.\n    // PlanetaryBody itself is safely Sendable because it only consists of immutable values.\n    // All subclasses of PlanetaryBody are also simple immutable values, so are safely Sendable as well.\n    // swiftlint:disable:next no_unchecked_sendable\n    extension PlanetaryBody: @unchecked Sendable { }\n    ```\n\n    </details>\n\n* <a id='redundant-property'></a>(<a href='#redundant-property'>link</a>) **Avoid defining properties that are then returned immediately.** Instead, return the value directly. [![SwiftFormat: redundantProperty](https://img.shields.io/badge/SwiftFormat-redundantProperty-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#redundantProperty)\n\n    <details>\n\n    ### Why?\n\n    Property declarations that are immediately returned are typically redundant and unnecessary. Sometimes these are unintentionally created as the byproduct of refactoring. Cleaning them up automatically simplifies the code. In some cases this also results in the `return` keyword itself being unnecessary, further simplifying the code.\n\n    ```swift\n    // WRONG\n    var spaceship: Spaceship {\n      let spaceship = spaceshipBuilder.build(warpDrive: warpDriveBuilder.build())\n      return spaceship\n    }\n\n    // RIGHT\n    var spaceship: Spaceship {\n      spaceshipBuilder.build(warpDrive: warpDriveBuilder.build())\n    }\n\n    // WRONG\n    var spaceship: Spaceship {\n      let warpDrive = warpDriveBuilder.build()\n      let spaceship = spaceshipBuilder.build(warpDrive: warpDrive)\n      return spaceship\n    }\n\n    // RIGHT\n    var spaceship: Spaceship {\n      let warpDrive = warpDriveBuilder.build()\n      return spaceshipBuilder.build(warpDrive: warpDrive)\n    }\n    ```\n\n    </details>\n\n* <a id='redundant-equatable-implementation'></a>(<a href='#redundant-equatable-implementation'>link</a>) **Prefer using a generated Equatable implementation when comparing all properties of a type.** For structs, prefer using the compiler-synthesized Equatable implementation when possible. [![SwiftFormat: redundantEquatable](https://img.shields.io/badge/SwiftFormat-redundantEquatable-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#redundantEquatable)\n\n    <details>\n\n    ### Why?\n\n    Manually-implemented Equatable implementations are verbose, and keeping them up-to-date is error-prone. For example, when adding a new property, it's possible to forget to update the Equatable implementation to compare it.\n\n    ```swift\n    /// WRONG: The `static func ==` implementation is redundant and error-prone.\n    struct Planet: Equatable {\n      let mass: Double\n      let orbit: OrbitalElements\n      let rotation: Double\n\n      static func ==(lhs: Planet, rhs: Planet) -> Bool {\n        lhs.mass == rhs.mass\n          && lhs.orbit == rhs.orbit\n          && lhs.rotation == rhs.rotation\n      }\n    }\n\n    /// RIGHT: The `static func ==` implementation is synthesized by the compiler.\n    struct Planet: Equatable {\n      let mass: Double\n      let orbit: OrbitalElements\n      let rotation: Double\n    }\n\n    /// ALSO RIGHT: The `static func ==` implementation differs from the implementation that \n    /// would be synthesized by the compiler and compared all properties, so is not redundant.\n    struct CelestialBody: Equatable {\n      let id: UUID\n      let orbit: OrbitalElements\n\n      static func ==(lhs: Planet, rhs: Planet) -> Bool {\n        lhs.id == rhs.id\n      }\n    }\n    ```\n\n    In projects that provide an `@Equatable` macro, prefer using that macro to generate the `static func ==` for classes rather than implementing it manually.\n\n    ```swift\n    /// WRONG: The `static func ==` implementation is verbose and error-prone.\n    final class Planet: Equatable {\n      let mass: Double\n      let orbit: OrbitalElements\n      let rotation: Double\n\n      static func ==(lhs: Planet, rhs: Planet) -> Bool {\n        lhs.mass == rhs.mass\n          && lhs.orbit == rhs.orbit\n          && lhs.rotation == rhs.rotation\n      }\n    }\n\n    /// RIGHT: The `static func ==` implementation is generated by the `@Equatable` macro.\n    @Equatable\n    final class struct Planet: Equatable {\n      let mass: Double\n      let orbit: OrbitalElements\n      let rotation: Double\n    }\n    ```\n\n    </details>\n\n* <a id='redundant-environment-key-implementation'></a>(<a href='#redundant-environment-key-implementation'>link</a>) **Prefer using the `@Entry` macro to define properties inside `EnvironmentValues`**. When adding properties to SwiftUI `EnvironemtnValues`, prefer using the compiler-synthesized property implementation when possible. [![SwiftFormat: environmentEntry](https://img.shields.io/badge/SwiftFormat-environmentEntry-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/develop/Rules.md#environmentEntry)\n\n    <details>\n\n    ### Why?\n\n    Manually-implemented environment keys are verbose and it is considered a legacy pattern. `@Entry` was specifically intended to be a replacement considering it was backported to iOS 13.\n\n    ```swift\n    /// WRONG: The `EnvironmentValues` property depends on `IsSelectedEnvironmentKey`\n    struct IsSelectedEnvironmentKey: EnvironmentKey {\n      static var defaultValue: Bool { false }\n    }\n\n    extension EnvironmentValues {\n      var isSelected: Bool {\n       get { self[IsSelectedEnvironmentKey.self] }\n       set { self[IsSelectedEnvironmentKey.self] = newValue }\n      }\n    }\n\n    /// RIGHT: The `EnvironmentValues` property uses the @Entry macro \n    extension EnvironmentValues {\n      @Entry var isSelected: Bool = false\n    }\n    ```\n\n    </details>\n\n* <a id='void-type'></a>(<a href='#void-type'>link</a>) **Avoid using `()` as a type**. Prefer `Void`.\n\n  <details>\n\n  ```swift\n  // WRONG\n  let result: Result<(), Error>\n\n  // RIGHT\n  let result: Result<Void, Error>\n  ```\n  </details>\n\n* <a id='void-instance'></a>(<a href='#void-instance'>link</a>) **Avoid using `Void()` as an instance of `Void`**. Prefer `()`.\n\n  <details>\n\n  ```swift\n  let completion: (Result<Void, Error>) -> Void \n\n  // WRONG\n  completion(.success(Void()))\n  \n  // RIGHT\n  completion(.success(()))\n  ```\n  </details>\n\n* <a id='count-where'></a>(<a href='#count-where'>link</a>) **Prefer using `count(where: { … })` over `filter { … }.count`**.\n\n  <details>\n\n  Swift 6.0 ([finally!](https://forums.swift.org/t/accepted-again-se-0220-count-where/66659)) added a `count(where:)` method to the standard library. Prefer using the `count(where:)` method over using the `filter(_:)` method followed by a `count` call.\n\n  ```swift\n  // WRONG\n  let planetsWithMoons = planets.filter { !$0.moons.isEmpty }.count\n\n  // RIGHT\n  let planetsWithMoons = planets.count(where: { !$0.moons.isEmpty })\n  ```\n  </details>\n\n**[⬆ back to top](#table-of-contents)**\n\n## File Organization\n\n* <a id='alphabetize-and-deduplicate-imports'></a>(<a href='#alphabetize-and-deduplicate-imports'>link</a>) **Alphabetize and deduplicate module imports within a file. Place all imports at the top of the file below the header comments. Do not add additional line breaks between import statements. Add a single empty line before the first import and after the last import.** [![SwiftFormat: sortedImports](https://img.shields.io/badge/SwiftFormat-sortedImports-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#sortedImports) [![SwiftFormat: duplicateImports](https://img.shields.io/badge/SwiftFormat-duplicateImports-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#duplicateImports)\n\n  <details>\n\n  #### Why?\n  - A standard organization method helps engineers more quickly determine which modules a file depends on.\n  - Duplicated import statements have no effect and should be removed for clarity.\n\n  ```swift\n  // WRONG\n\n  //  Copyright © 2018 Airbnb. All rights reserved.\n  //\n  import DLSPrimitives\n  import Constellation\n  import Constellation\n  import Epoxy\n\n  import Foundation\n\n  // RIGHT\n\n  //  Copyright © 2018 Airbnb. All rights reserved.\n  //\n\n  import Constellation\n  import DLSPrimitives\n  import Epoxy\n  import Foundation\n  ```\n\n  </details>\n\n  _Exception: `@testable import` should be grouped after the regular import and separated by an empty line._\n\n  <details>\n\n  ```swift\n  // WRONG\n\n  //  Copyright © 2018 Airbnb. All rights reserved.\n  //\n\n  import DLSPrimitives\n  @testable import Epoxy\n  import Foundation\n  import Nimble\n  import Quick\n\n  // RIGHT\n\n  //  Copyright © 2018 Airbnb. All rights reserved.\n  //\n\n  import DLSPrimitives\n  import Foundation\n  import Nimble\n  import Quick\n\n  @testable import Epoxy\n  ```\n\n  </details>\n\n* <a id='limit-consecutive-whitespace'></a><a id='limit-vertical-whitespace'></a>(<a href='#limit-consecutive-whitespace'>link</a>) **Limit consecutive whitespace to one blank line or space (excluding indentation).** Favor the following formatting guidelines over whitespace of varying heights or widths. [![SwiftFormat: consecutiveBlankLines](https://img.shields.io/badge/SwiftFormat-consecutiveBlankLines-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#consecutiveBlankLines) [![SwiftFormat: consecutiveSpaces](https://img.shields.io/badge/SwiftFormat-consecutiveSpaces-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#consecutiveSpaces)\n\n  <details>\n\n  ```swift\n  // WRONG\n  struct Planet {\n\n    let mass:          Double\n    let hasAtmosphere: Bool\n\n\n    func distance(to: Planet) { }\n\n  }\n\n  // RIGHT\n  struct Planet {\n\n    let mass: Double\n    let hasAtmosphere: Bool\n\n    func distance(to: Planet) { }\n\n  }\n  ```\n\n  </details>\n\n\n* <a id='newline-at-eof'></a>(<a href='#newline-at-eof'>link</a>) **Files should end in a newline.** [![SwiftFormat: linebreakAtEndOfFile](https://img.shields.io/badge/SwiftFormat-linebreakAtEndOfFile-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#linebreakatendoffile)\n\n* <a id='newline-between-scope-siblings'></a>(<a href='#newline-between-scope-siblings'>link</a>) **Declarations that include scopes spanning multiple lines should be separated from adjacent declarations in the same scope by a newline.** Insert a single blank line between multi-line scoped declarations (e.g. types, extensions, functions, computed properties, etc.) and other declarations at the same indentation level. [![SwiftFormat: blankLinesBetweenScopes](https://img.shields.io/badge/SwiftFormat-blankLinesBetweenScopes-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#blankLinesBetweenScopes)\n\n  <details>\n\n  #### Why?\n  Dividing scoped declarations from other declarations at the same scope visually separates them, making adjacent declarations easier to differentiate from the scoped declaration.\n\n  ```swift\n  // WRONG\n  struct SolarSystem {\n    var numberOfPlanets: Int {\n      …\n    }\n    func distance(to: SolarSystem) -> AstronomicalUnit {\n      …\n    }\n  }\n  struct Galaxy {\n    func distance(to: Galaxy) -> AstronomicalUnit {\n      …\n    }\n    func contains(_ solarSystem: SolarSystem) -> Bool {\n      …\n    }\n  }\n\n  // RIGHT\n  struct SolarSystem {\n    var numberOfPlanets: Int {\n      …\n    }\n\n    func distance(to: SolarSystem) -> AstronomicalUnit {\n      …\n    }\n  }\n\n  struct Galaxy {\n    func distance(to: Galaxy) -> AstronomicalUnit {\n      …\n    }\n\n    func contains(_ solarSystem: SolarSystem) -> Bool {\n      …\n    }\n  }\n  ```\n\n  </details>\n\n* <a id='no-blank-lines-at-start-or-end-of-non-type-scopes'></a>(<a href='#no-blank-lines-at-start-or-end-of-non-type-scopes'>link</a>) **Remove blank lines at the top and bottom of scopes**, excluding type bodies which can optionally include blank lines. [![SwiftFormat: blankLinesAtStartOfScope](https://img.shields.io/badge/SwiftFormat-blankLinesAtStartOfScope-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#blankLinesAtStartOfScope) [![SwiftFormat: blankLinesAtEndOfScope](https://img.shields.io/badge/SwiftFormat-blankLinesAtEndOfScope-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#blankLinesAtEndOfScope)\n\n  <details>\n\n  ```swift\n  // WRONG\n  class Planet {\n    func terraform() {\n\n      generateAtmosphere()\n      generateOceans()\n\n    }\n  }\n\n  // RIGHT\n  class Planet {\n    func terraform() {\n      generateAtmosphere()\n      generateOceans()\n    }\n  }\n\n  // Also fine!\n  class Planet {\n\n    func terraform() {\n      generateAtmosphere()\n      generateOceans()\n    }\n\n  }\n  ```\n\n  </details>\n\n\n* <a id='mark-types-and-extensions'></a>(<a href='#mark-types-and-extensions'>link</a>) **Each type and extension which implements a conformance should be preceded by a `MARK` comment.** [![SwiftFormat: markTypes](https://img.shields.io/badge/SwiftFormat-markTypes-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#markTypes)\n  * Types should be preceded by a `// MARK: - TypeName` comment.\n  * Extensions that add a conformance should be preceded by a `// MARK: - TypeName + ProtocolName` comment.\n  * Extensions that immediately follow the type being extended should omit that type's name and instead use `// MARK: ProtocolName`.\n  * If there is only one type or extension in a file, the `MARK` comment can be omitted.\n  * If the extension in question is empty (e.g. has no declarations in its body), the `MARK` comment can be omitted.\n  * For extensions that do not add new conformances, consider adding a `MARK` with a descriptive comment.\n\n  <details>\n\n  ```swift\n  // MARK: - GalaxyView\n\n  final class GalaxyView: UIView { … }\n\n  // MARK: ContentConfigurableView\n\n  extension GalaxyView: ContentConfigurableView { … }\n\n  // MARK: - Galaxy + SpaceThing, NamedObject\n\n  extension Galaxy: SpaceThing, NamedObject { … }\n  ```\n\n  </details>\n\n* <a id='marks-within-types'></a>(<a href='#marks-within-types'>link</a>) **Use `// MARK:` to separate the contents of type definitions and extensions into the sections listed below, in order.** All type definitions and extensions should be divided up in this consistent way, allowing a reader of your code to easily jump to what they are interested in. [![SwiftFormat: organizeDeclarations](https://img.shields.io/badge/SwiftFormat-organizeDeclarations-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#organizeDeclarations)\n  * `// MARK: Lifecycle` for `init` and `deinit` methods.\n  * `// MARK: Open` for `open` properties and methods.\n  * `// MARK: Public` for `public` properties and methods.\n  * `// MARK: Package` for `package` properties and methods.\n  * `// MARK: Internal` for `internal` properties and methods.\n  * `// MARK: Fileprivate` for `fileprivate` properties and methods.\n  * `// MARK: Private` for `private` properties and methods.\n  * If the type in question is an enum, its cases should go above the first `// MARK:`.\n  * Do not subdivide each of these sections into subsections, as it makes the method dropdown more cluttered and therefore less useful. Instead, group methods by functionality and use smart naming to make clear which methods are related. If there are enough methods that sub-sections seem necessary, consider refactoring your code into multiple types.\n  * If all of the type or extension's definitions belong to the same category (e.g. the type or extension only consists of `internal` properties), it is OK to omit the `// MARK:`s.\n  * If the type in question is a simple value type (e.g. fewer than 20 lines), it is OK to omit the `// MARK:`s, as it would hurt legibility.\n\n* <a id='subsection-organization'></a>(<a href='#subsection-organization'>link</a>) **Within each top-level section, place content in the following order.** This allows a new reader of your code to more easily find what they are looking for. [![SwiftFormat: organizeDeclarations](https://img.shields.io/badge/SwiftFormat-organizeDeclarations-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#organizeDeclarations)\n  * Nested types and type aliases\n  * Static properties\n  * Static property with body\n  * Class properties with body\n  * SwiftUI dynamic properties (@State, @Environment, @Binding, etc), grouped by type\n  * Instance properties\n  * Instance properties with body\n  * Static methods\n  * Class methods\n  * Instance methods\n\n  <details>\n  \n    Computed properties and properties with property observers should appear at the end of the set of declarations of the same kind. (e.g. instance properties.)\n\n    ```swift\n    // WRONG\n    class PlanetView: UIView {\n    \n      static var startOfTime { -CGFloat.greatestFiniteMagnitude / 0 }\n\n      var atmosphere: Atmosphere {\n         didSet {\n           print(\"oh my god, the atmosphere changed\")\n         }\n       }\n\n      override class var layerClass: AnyClass {\n        PlanetLayer.self\n      }\n\n      var gravity: CGFloat\n\n      static let speedOfLight: CGFloat = 300_000\n    }\n\n    // RIGHT\n    class PlanetView: UIView {\n    \n      static let speedOfLight: CGFloat = 300_000\n      static var startOfTime { -CGFloat.greatestFiniteMagnitude / 0 }\n\n      override class var layerClass: AnyClass {\n        PlanetLayer.self\n      }\n\n      var gravity: CGFloat\n      var atmosphere: Atmosphere {\n         didSet {\n           print(\"oh my god, the atmosphere changed\")\n         }\n       }\n    }\n    ```\n\n    SwiftUI Properties are a special type of property that lives inside SwiftUI views. These views conform to the [`DynamicProperty`](https://developer.apple.com/documentation/swiftui/dynamicproperty) protocol and cause the view's body to re-compute. Given this common functionality and also a similar syntax, it is preferred to group them.\n\n    ```swift\n    // WRONG\n\n    struct CustomSlider: View {\n    \n      // MARK: Internal\n\n      var body: some View {\n        ...\n      }\n\n      // MARK: Private\n\n      @Binding private var value: Value\n      private let range: ClosedRange<Double>\n      @Environment(\\.sliderStyle) private var style\n      private let step: Double.Stride\n      @Environment(\\.layoutDirection) private var layoutDirection\n    }\n\n    // RIGHT\n\n    struct CustomSlider: View {\n      \n      // MARK: Internal\n\n      var body: some View {\n        ...\n      }\n\n      // MARK: Private\n\n      @Environment(\\.sliderStyle) private var style\n      @Environment(\\.layoutDirection) private var layoutDirection\n      @Binding private var value: Value\n\n      private let range: ClosedRange<Double>\n      private let step: Double.Stride\n    }\n    ```\n\n    Additionally, within the grouping of SwiftUI properties, it is preferred that the properties are also grouped by their dynamic property type. The group order applied by the formatter is determined by the first time a type appears:\n\n    ```swift\n    // WRONG\n    struct CustomSlider: View {\n\n      @Binding private var value: Value\n      @State private var foo = Foo()\n      @Environment(\\.sliderStyle) private var style\n      @State private var bar = Bar()\n      @Environment(\\.layoutDirection) private var layoutDirection\n\n      private let range: ClosedRange<Double>\n      private let step: Double.Stride\n    }\n\n    // RIGHT\n    struct CustomSlider: View {\n\n      @Binding private var value: Value\n      @State private var foo = Foo()\n      @State private var bar = Bar()\n      @Environment(\\.sliderStyle) private var style\n      @Environment(\\.layoutDirection) private var layoutDirection\n\n      private let range: ClosedRange<Double>\n      private let step: Double.Stride\n    }\n    ```\n\n  </details>\n\n\n* <a id='newline-between-subsections'></a>(<a href='#newline-between-subsections'>link</a>) **Add empty lines between property declarations of different kinds.** (e.g. between static properties and instance properties.) [![SwiftFormat: organizeDeclarations](https://img.shields.io/badge/SwiftFormat-organizeDeclarations-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#organizeDeclarations)\n\n  <details>\n\n  ```swift\n  // WRONG\n  static let gravityEarth: CGFloat = 9.8\n  static let gravityMoon: CGFloat = 1.6\n  var gravity: CGFloat\n\n  // RIGHT\n  static let gravityEarth: CGFloat = 9.8\n  static let gravityMoon: CGFloat = 1.6\n\n  var gravity: CGFloat\n  ```\n\n  </details>\n      \n* <a id='unused-private-declaration'></a>(<a href='#unused-private-declaration'>link</a>) **Remove unused private and fileprivate properties, functions, and typealiases** [![SwiftFormat: unusedPrivateDeclarations](https://img.shields.io/badge/SwiftFormat-unusedPrivateDeclarations-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#unusedPrivateDeclarations)\n\n  <details>\n\n  #### Why?\n  \n  Improves readability since the code has no effect and should be removed for clarity.\n  \n  ```swift\n  // WRONG: Includes private declarations that are unused\n  struct Planet {\n    var ageInBillionYears: Double {\n      ageInMillionYears / 1000\n    }\n    \n    private var ageInMillionsOfYears: Double\n    private typealias Dependencies = UniverseBuilderProviding // unused\n    private var mass: Double // unused\n    private func distance(to: Planet) { } // unused\n  }\n    \n  // RIGHT\n  struct Planet {\n    var ageInBillionsOfYears: Double {\n      ageInMillionYears / 1000\n    }\n\n    private var ageInMillionYears: Double\n  }\n  ```\n  \n  </details>\n  \n* <a id='remove-empty-extensions'></a>(<a href='#remove-empty-extensions'>link</a>) **Remove empty extensions that define no properties, functions, or conformances.** [![SwiftFormat: emptyExtensions](https://img.shields.io/badge/SwiftFormat-emptyExtensions-7B0051.svg)](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#emptyExtensions)\n\n  <details>\n\n  #### Why?\n  Improves readability since the code has no effect and should be removed for clarity.\n  \n  ```swift\n  // WRONG: The first extension is empty and redundant.\n  extension Planet {}\n  \n  extension Planet: Equatable {}\n\n  // RIGHT: Empty extensions that add a protocol conformance aren't redundant.\n  extension Planet: Equatable {}\n  ```\n\n  </details>\n\n**[⬆ back to top](#table-of-contents)**\n\n## Objective-C Interoperability\n\n* <a id='prefer-pure-swift-classes'></a>(<a href='#prefer-pure-swift-classes'>link</a>) **Prefer pure Swift classes over subclasses of NSObject.** If your code needs to be used by some Objective-C code, wrap it to expose the desired functionality. Use `@objc` on individual methods and variables as necessary rather than exposing all API on a class to Objective-C via `@objcMembers`.\n\n  <details>\n\n  ```swift\n  class PriceBreakdownViewController {\n\n    private let acceptButton = UIButton()\n\n    private func setUpAcceptButton() {\n      acceptButton.addTarget(\n        self,\n        action: #selector(didTapAcceptButton),\n        forControlEvents: .touchUpInside)\n    }\n\n    @objc\n    private func didTapAcceptButton() {\n      // ...\n    }\n  }\n  ```\n\n  </details>\n\n**[⬆ back to top](#table-of-contents)**\n\n## Contributors\n\n  - [View Contributors](https://github.com/airbnb/swift/graphs/contributors)\n\n**[⬆ back to top](#table-of-contents)**\n\n## Amendments\n\nWe encourage you to fork this guide and change the rules to fit your team’s style guide. Below, you may list some amendments to the style guide. This allows you to periodically update your style guide without having to deal with merge conflicts.\n\n**[⬆ back to top](#table-of-contents)**\n"
        },
        {
          "name": "Rakefile",
          "type": "blob",
          "size": 2.00390625,
          "content": "require 'json'\nrequire 'net/http'\nrequire 'json'\nrequire 'tempfile'\n\nnamespace :lint do\n  desc 'Lints swift files'\n  task :swift do\n    sh 'swift package --allow-writing-to-package-directory format --lint'\n  end\nend\n\nnamespace :format do\n  desc 'Formats swift files'\n  task :swift do\n    sh 'swift package --allow-writing-to-package-directory format'\n  end\nend\n\nnamespace :update do\n  desc 'Updates SwiftFormat to the latest version'\n  task :swiftformat do\n    # Find the most recent release of SwiftFormat in the https://github.com/calda/SwiftFormat repo.\n    response = Net::HTTP.get(URI('https://api.github.com/repos/calda/SwiftFormat/releases/latest'))\n    latest_release_info = JSON.parse(response)\n\n    latest_version_number = latest_release_info['tag_name']\n\n    # Download the artifact bundle for the latest release and compute its checksum.\n    temp_dir = Dir.mktmpdir\n    artifact_bundle_url = \"https://github.com/calda/SwiftFormat/releases/download/#{latest_version_number}/swiftformat.artifactbundle.zip\"\n    artifact_bundle_zip_path = \"#{temp_dir}/swiftformat.artifactbundle.zip\"\n    \n    sh \"curl #{artifact_bundle_url} -L --output #{artifact_bundle_zip_path}\"\n    checksum = `swift package compute-checksum #{artifact_bundle_zip_path}`\n\n    # Update the Package.swift file to reference this version\n    package_manifest_path = 'Package.swift'\n    package_manifest_content = File.read(package_manifest_path)\n    \n    updated_swift_format_reference = <<-EOS\n    .binaryTarget(\n      name: \"swiftformat\",\n      url: \"https://github.com/calda/SwiftFormat/releases/download/#{latest_version_number}/SwiftFormat.artifactbundle.zip\",\n      checksum: \"#{checksum.strip}\"),\n    EOS\n    \n    regex = /[ ]*.binaryTarget\\([\\S\\s]*name: \"swiftformat\"[\\S\\s]*?\\),\\s/\n    updated_package_manifest = package_manifest_content.gsub(regex, updated_swift_format_reference)\n    File.open(package_manifest_path, \"w\") { |file| file.puts updated_package_manifest }\n    \n    puts \"Updated Package.swift to reference SwiftFormat #{latest_version_number}\"\n  end\nend\n"
        },
        {
          "name": "Sources",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}