{
  "metadata": {
    "timestamp": 1736709643799,
    "page": 20,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "satoshilabs/slips",
      "stars": 1532,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0244140625,
          "content": "*.md linguist-detectable\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.154296875,
          "content": "language: node_js\n\nnode_js:\n  - \"node\"\n\nbefore_script:\n  - npm install -g markdownlint-cli\n\nscript:\n  - markdownlint -c markdownlint.json *.md\n  - ./check.sh\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 19.6611328125,
          "content": "Attribution-ShareAlike 4.0 International\n\n=======================================================================\n\nCreative Commons Corporation (\"Creative Commons\") is not a law firm and\ndoes not provide legal services or legal advice. Distribution of\nCreative Commons public licenses does not create a lawyer-client or\nother relationship. Creative Commons makes its licenses and related\ninformation available on an \"as-is\" basis. Creative Commons gives no\nwarranties regarding its licenses, any material licensed under their\nterms and conditions, or any related information. Creative Commons\ndisclaims all liability for damages resulting from their use to the\nfullest extent possible.\n\nUsing Creative Commons Public Licenses\n\nCreative Commons public licenses provide a standard set of terms and\nconditions that creators and other rights holders may use to share\noriginal works of authorship and other material subject to copyright\nand certain other rights specified in the public license below. The\nfollowing considerations are for informational purposes only, are not\nexhaustive, and do not form part of our licenses.\n\n     Considerations for licensors: Our public licenses are\n     intended for use by those authorized to give the public\n     permission to use material in ways otherwise restricted by\n     copyright and certain other rights. Our licenses are\n     irrevocable. Licensors should read and understand the terms\n     and conditions of the license they choose before applying it.\n     Licensors should also secure all rights necessary before\n     applying our licenses so that the public can reuse the\n     material as expected. Licensors should clearly mark any\n     material not subject to the license. This includes other CC-\n     licensed material, or material used under an exception or\n     limitation to copyright. More considerations for licensors:\n\twiki.creativecommons.org/Considerations_for_licensors\n\n     Considerations for the public: By using one of our public\n     licenses, a licensor grants the public permission to use the\n     licensed material under specified terms and conditions. If\n     the licensor's permission is not necessary for any reason--for\n     example, because of any applicable exception or limitation to\n     copyright--then that use is not regulated by the license. Our\n     licenses grant only permissions under copyright and certain\n     other rights that a licensor has authority to grant. Use of\n     the licensed material may still be restricted for other\n     reasons, including because others have copyright or other\n     rights in the material. A licensor may make special requests,\n     such as asking that all changes be marked or described.\n     Although not required by our licenses, you are encouraged to\n     respect those requests where reasonable. More_considerations\n     for the public: \n\twiki.creativecommons.org/Considerations_for_licensees\n\n=======================================================================\n\nCreative Commons Attribution-ShareAlike 4.0 International Public\nLicense\n\nBy exercising the Licensed Rights (defined below), You accept and agree\nto be bound by the terms and conditions of this Creative Commons\nAttribution-ShareAlike 4.0 International Public License (\"Public\nLicense\"). To the extent this Public License may be interpreted as a\ncontract, You are granted the Licensed Rights in consideration of Your\nacceptance of these terms and conditions, and the Licensor grants You\nsuch rights in consideration of benefits the Licensor receives from\nmaking the Licensed Material available under these terms and\nconditions.\n\n\nSection 1 -- Definitions.\n\n  a. Adapted Material means material subject to Copyright and Similar\n     Rights that is derived from or based upon the Licensed Material\n     and in which the Licensed Material is translated, altered,\n     arranged, transformed, or otherwise modified in a manner requiring\n     permission under the Copyright and Similar Rights held by the\n     Licensor. For purposes of this Public License, where the Licensed\n     Material is a musical work, performance, or sound recording,\n     Adapted Material is always produced where the Licensed Material is\n     synched in timed relation with a moving image.\n\n  b. Adapter's License means the license You apply to Your Copyright\n     and Similar Rights in Your contributions to Adapted Material in\n     accordance with the terms and conditions of this Public License.\n\n  c. BY-SA Compatible License means a license listed at\n     creativecommons.org/compatiblelicenses, approved by Creative\n     Commons as essentially the equivalent of this Public License.\n\n  d. Copyright and Similar Rights means copyright and/or similar rights\n     closely related to copyright including, without limitation,\n     performance, broadcast, sound recording, and Sui Generis Database\n     Rights, without regard to how the rights are labeled or\n     categorized. For purposes of this Public License, the rights\n     specified in Section 2(b)(1)-(2) are not Copyright and Similar\n     Rights.\n\n  e. Effective Technological Measures means those measures that, in the\n     absence of proper authority, may not be circumvented under laws\n     fulfilling obligations under Article 11 of the WIPO Copyright\n     Treaty adopted on December 20, 1996, and/or similar international\n     agreements.\n\n  f. Exceptions and Limitations means fair use, fair dealing, and/or\n     any other exception or limitation to Copyright and Similar Rights\n     that applies to Your use of the Licensed Material.\n\n  g. License Elements means the license attributes listed in the name\n     of a Creative Commons Public License. The License Elements of this\n     Public License are Attribution and ShareAlike.\n\n  h. Licensed Material means the artistic or literary work, database,\n     or other material to which the Licensor applied this Public\n     License.\n\n  i. Licensed Rights means the rights granted to You subject to the\n     terms and conditions of this Public License, which are limited to\n     all Copyright and Similar Rights that apply to Your use of the\n     Licensed Material and that the Licensor has authority to license.\n\n  j. Licensor means the individual(s) or entity(ies) granting rights\n     under this Public License.\n\n  k. Share means to provide material to the public by any means or\n     process that requires permission under the Licensed Rights, such\n     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  l. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n     the Council of 11 March 1996 on the legal protection of databases,\n     as amended and/or succeeded, as well as other essentially\n     equivalent rights anywhere in the world.\n\n  m. You means the individual or entity exercising the Licensed Rights\n     under this Public License. Your has a corresponding meaning.\n\n\nSection 2 -- Scope.\n\n  a. License grant.\n\n       1. Subject to the terms and conditions of this Public License,\n          the Licensor hereby grants You a worldwide, royalty-free,\n          non-sublicensable, non-exclusive, irrevocable license to\n          exercise the Licensed Rights in the Licensed Material to:\n\n            a. reproduce and Share the Licensed Material, in whole or\n               in part; and\n\n            b. produce, reproduce, and Share Adapted Material.\n\n       2. Exceptions and Limitations. For the avoidance of doubt, where\n          Exceptions and Limitations apply to Your use, this Public\n          License does not apply, and You do not need to comply with\n          its terms and conditions.\n\n       3. Term. The term of this Public License is specified in Section\n          6(a).\n\n       4. Media and formats; technical modifications allowed. The\n          Licensor authorizes You to exercise the Licensed Rights in\n          all media and formats whether now known or hereafter created,\n          and to make technical modifications necessary to do so. The\n          Licensor waives and/or agrees not to assert any right or\n          authority to forbid You from making technical modifications\n          necessary to exercise the Licensed Rights, including\n          technical modifications necessary to circumvent Effective\n          Technological Measures. For purposes of this Public License,\n          simply making modifications authorized by this Section 2(a)\n          (4) never produces Adapted Material.\n\n       5. Downstream recipients.\n\n            a. Offer from the Licensor -- Licensed Material. Every\n               recipient of the Licensed Material automatically\n               receives an offer from the Licensor to exercise the\n               Licensed Rights under the terms and conditions of this\n               Public License.\n\n            b. Additional offer from the Licensor -- Adapted Material.\n               Every recipient of Adapted Material from You\n               automatically receives an offer from the Licensor to\n               exercise the Licensed Rights in the Adapted Material\n               under the conditions of the Adapter's License You apply.\n\n            c. No downstream restrictions. You may not offer or impose\n               any additional or different terms or conditions on, or\n               apply any Effective Technological Measures to, the\n               Licensed Material if doing so restricts exercise of the\n               Licensed Rights by any recipient of the Licensed\n               Material.\n\n       6. No endorsement. Nothing in this Public License constitutes or\n          may be construed as permission to assert or imply that You\n          are, or that Your use of the Licensed Material is, connected\n          with, or sponsored, endorsed, or granted official status by,\n          the Licensor or others designated to receive attribution as\n          provided in Section 3(a)(1)(A)(i).\n\n  b. Other rights.\n\n       1. Moral rights, such as the right of integrity, are not\n          licensed under this Public License, nor are publicity,\n          privacy, and/or other similar personality rights; however, to\n          the extent possible, the Licensor waives and/or agrees not to\n          assert any such rights held by the Licensor to the limited\n          extent necessary to allow You to exercise the Licensed\n          Rights, but not otherwise.\n\n       2. Patent and trademark rights are not licensed under this\n          Public License.\n\n       3. To the extent possible, the Licensor waives any right to\n          collect royalties from You for the exercise of the Licensed\n          Rights, whether directly or through a collecting society\n          under any voluntary or waivable statutory or compulsory\n          licensing scheme. In all other cases the Licensor expressly\n          reserves any right to collect such royalties.\n\n\nSection 3 -- License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the\nfollowing conditions.\n\n  a. Attribution.\n\n       1. If You Share the Licensed Material (including in modified\n          form), You must:\n\n            a. retain the following if it is supplied by the Licensor\n               with the Licensed Material:\n\n                 i. identification of the creator(s) of the Licensed\n                    Material and any others designated to receive\n                    attribution, in any reasonable manner requested by\n                    the Licensor (including by pseudonym if\n                    designated);\n\n                ii. a copyright notice;\n\n               iii. a notice that refers to this Public License;\n\n                iv. a notice that refers to the disclaimer of\n                    warranties;\n\n                 v. a URI or hyperlink to the Licensed Material to the\n                    extent reasonably practicable;\n\n            b. indicate if You modified the Licensed Material and\n               retain an indication of any previous modifications; and\n\n            c. indicate the Licensed Material is licensed under this\n               Public License, and include the text of, or the URI or\n               hyperlink to, this Public License.\n\n       2. You may satisfy the conditions in Section 3(a)(1) in any\n          reasonable manner based on the medium, means, and context in\n          which You Share the Licensed Material. For example, it may be\n          reasonable to satisfy the conditions by providing a URI or\n          hyperlink to a resource that includes the required\n          information.\n\n       3. If requested by the Licensor, You must remove any of the\n          information required by Section 3(a)(1)(A) to the extent\n          reasonably practicable.\n\n  b. ShareAlike.\n\n     In addition to the conditions in Section 3(a), if You Share\n     Adapted Material You produce, the following conditions also apply.\n\n       1. The Adapter's License You apply must be a Creative Commons\n          license with the same License Elements, this version or\n          later, or a BY-SA Compatible License.\n\n       2. You must include the text of, or the URI or hyperlink to, the\n          Adapter's License You apply. You may satisfy this condition\n          in any reasonable manner based on the medium, means, and\n          context in which You Share Adapted Material.\n\n       3. You may not offer or impose any additional or different terms\n          or conditions on, or apply any Effective Technological\n          Measures to, Adapted Material that restrict exercise of the\n          rights granted under the Adapter's License You apply.\n\n\nSection 4 -- Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that\napply to Your use of the Licensed Material:\n\n  a. for the avoidance of doubt, Section 2(a)(1) grants You the right\n     to extract, reuse, reproduce, and Share all or a substantial\n     portion of the contents of the database;\n\n  b. if You include all or a substantial portion of the database\n     contents in a database in which You have Sui Generis Database\n     Rights, then the database in which You have Sui Generis Database\n     Rights (but not its individual contents) is Adapted Material,\n\n     including for purposes of Section 3(b); and\n  c. You must comply with the conditions in Section 3(a) if You Share\n     all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not\nreplace Your obligations under this Public License where the Licensed\nRights include other Copyright and Similar Rights.\n\n\nSection 5 -- Disclaimer of Warranties and Limitation of Liability.\n\n  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\n     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\n     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\n     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\n     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\n     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\n     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\n     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\n     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\n     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\n\n  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\n     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\n     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\n     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\n     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\n     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\n     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\n     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\n     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\n\n  c. The disclaimer of warranties and limitation of liability provided\n     above shall be interpreted in a manner that, to the extent\n     possible, most closely approximates an absolute disclaimer and\n     waiver of all liability.\n\n\nSection 6 -- Term and Termination.\n\n  a. This Public License applies for the term of the Copyright and\n     Similar Rights licensed here. However, if You fail to comply with\n     this Public License, then Your rights under this Public License\n     terminate automatically.\n\n  b. Where Your right to use the Licensed Material has terminated under\n     Section 6(a), it reinstates:\n\n       1. automatically as of the date the violation is cured, provided\n          it is cured within 30 days of Your discovery of the\n          violation; or\n\n       2. upon express reinstatement by the Licensor.\n\n     For the avoidance of doubt, this Section 6(b) does not affect any\n     right the Licensor may have to seek remedies for Your violations\n     of this Public License.\n\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n     License.\n\n\nSection 7 -- Other Terms and Conditions.\n\n  a. The Licensor shall not be bound by any additional or different\n     terms or conditions communicated by You unless expressly agreed.\n\n  b. Any arrangements, understandings, or agreements regarding the\n     Licensed Material not stated herein are separate from and\n     independent of the terms and conditions of this Public License.\n\n\nSection 8 -- Interpretation.\n\n  a. For the avoidance of doubt, this Public License does not, and\n     shall not be interpreted to, reduce, limit, restrict, or impose\n     conditions on any use of the Licensed Material that could lawfully\n     be made without permission under this Public License.\n\n  b. To the extent possible, if any provision of this Public License is\n     deemed unenforceable, it shall be automatically reformed to the\n     minimum extent necessary to make it enforceable. If the provision\n     cannot be reformed, it shall be severed from this Public License\n     without affecting the enforceability of the remaining terms and\n     conditions.\n\n  c. No term or condition of this Public License will be waived and no\n     failure to comply consented to unless expressly agreed to by the\n     Licensor.\n\n  d. Nothing in this Public License constitutes or may be interpreted\n     as a limitation upon, or waiver of, any privileges and immunities\n     that apply to the Licensor or You, including from the legal\n     processes of any jurisdiction or authority.\n\n\n=======================================================================\n\nCreative Commons is not a party to its public\nlicenses. Notwithstanding, Creative Commons may elect to apply one of\nits public licenses to material it publishes and in those instances\nwill be considered the “Licensor.” The text of the Creative Commons\npublic licenses is dedicated to the public domain under the CC0 Public\nDomain Dedication. Except for the limited purpose of indicating that\nmaterial is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\nto any of its public licenses or any other arrangements,\nunderstandings, or agreements concerning use of licensed material. For\nthe avoidance of doubt, this paragraph does not form part of the\npublic licenses.\n\nCreative Commons may be contacted at creativecommons.org.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.1005859375,
          "content": "# SatoshiLabs Improvement Proposals\n\nSatoshiLabs projects need a way how to document their technical decisions and features.\nFor some of them Bitcoin Improvement Proposal (BIP) is not a right place because\ntheir range and implications are outside of the scope of Bitcoin and cryptocurrencies.\n\nSLIP repository is an extension to Bitcoin Improvement Proposal (BIP) process\nand contains the documents that are unsuitable for submission to BIP repository.\n\nEach SLIP should provide a concise technical specification of the feature and a rationale for the feature.\n\n| Number                    | Title                                                                 | Type          | Status   |\n|---------------------------|-----------------------------------------------------------------------|---------------|----------|\n| [SLIP-0000](slip-0000.md) | SLIP Template                                                         | Informational | Accepted |\n| [SLIP-0010](slip-0010.md) | Universal private key derivation from master private key              | Standard      | Final    |\n| [SLIP-0011](slip-0011.md) | Symmetric encryption of key-value pairs using deterministic hierarchy | Standard      | Final    |\n| [SLIP-0012](slip-0012.md) | Public key encryption using deterministic hierarchy                   | Standard      | Draft    |\n| [SLIP-0013](slip-0013.md) | Authentication using deterministic hierarchy                          | Standard      | Final    |\n| [SLIP-0014](slip-0014.md) | Stress Test Deterministic Wallet                                      | Informational | Active   |\n| [SLIP-0015](slip-0015.md) | Format for Bitcoin metadata and its encryption in HD wallets          | Standard      | Final    |\n| [SLIP-0016](slip-0016.md) | Format for password storage and its encryption                        | Standard      | Final    |\n| [SLIP-0017](slip-0017.md) | Elliptic Curve Diffie-Hellman using deterministic hierarchy           | Standard      | Final    |\n| SLIP-0018                 | reserved (CoSi)                                                       | Standard      | Draft    |\n| [SLIP-0019](slip-0019.md) | Proof of Ownership                                                    | Standard      | Accepted |\n| [SLIP-0020](slip-0020.md) | Proof of User Confirmation                                            | Standard      | Draft    |\n| [SLIP-0021](slip-0021.md) | Hierarchical derivation of symmetric keys                             | Standard      | Final    |\n| [SLIP-0022](slip-0022.md) | FIDO2 Credential ID format for HD wallets                             | Standard      | Final    |\n| [SLIP-0023](slip-0023.md) | Cardano HD master node derivation from a master seed                  | Standard      | Final    |\n| [SLIP-0024](slip-0024.md) | Trezor payment request format                                         | Standard      | Draft    |\n| [SLIP-0025](slip-0025.md) | Key derivation for CoinJoin accounts                                  | Standard      | Draft    |\n| SLIP-0026                 | reserved (CoSi)                                                       | Standard      | Draft    |\n| [SLIP-0032](slip-0032.md) | Extended serialization format for BIP-32 wallets                      | Standard      | Draft    |\n| [SLIP-0039](slip-0039.md) | Shamir's Secret-Sharing for Mnemonic Codes                            | Standard      | Final    |\n| [SLIP-0044](slip-0044.md) | Registered coin types for BIP-0044                                    | Standard      | Active   |\n| [SLIP-0048](slip-0048.md) | Deterministic key hierarchy for Graphene-based networks               | Standard      | Active   |\n| [SLIP-0077](slip-0077.md) | Deterministic blinding key derivation for Confidential Transactions   | Standard      | Draft    |\n| [SLIP-0132](slip-0132.md) | Registered HD version bytes for BIP-0032                              | Standard      | Active   |\n| [SLIP-0173](slip-0173.md) | Registered human-readable parts for BIP-0173                          | Standard      | Active   |\n\n---\n\nThis work is licensed under a [Creative Commons Attribution-ShareAlike 4.0 International License](https://creativecommons.org/licenses/by-sa/4.0/).\n"
        },
        {
          "name": "check.sh",
          "type": "blob",
          "size": 0.1650390625,
          "content": "echo \"SLIP-0044 duplicates:\"\ngrep '^| [0-9]' slip-0044.md | cut -f 4 -d '|' | tr -d ' ' | sort | uniq -d\n\necho \"SLIP-0044 uppercase:\"\ngrep '0x80[^ ]*[A-F]' slip-0044.md\n"
        },
        {
          "name": "markdownlint.json",
          "type": "blob",
          "size": 0.1083984375,
          "content": "{\n  \"MD004\": false,\n  \"MD013\": false,\n  \"MD024\": false,\n  \"MD029\": false,\n  \"MD033\": false,\n  \"MD040\": false\n}\n"
        },
        {
          "name": "slip-0000.md",
          "type": "blob",
          "size": 0.552734375,
          "content": "# SLIP-0000 : SLIP Template\n\n```\nNumber:  SLIP-0000\nTitle:   SLIP Template\nType:    Informational\nStatus:  Accepted\nAuthors: SatoshiLabs <info@satoshilabs.com>\nCreated: 2014-06-06\n```\n\n## Abstract\n\nThis is a section for an abstract.\n\n## Motivation\n\nThis is a section for a motivation.\n\n## Body\n\nThis is a section for a body. The title of the section should be changed\nand the section can be split into multiple sections and subsections.\n\n## References\n\nThis is a section for references such as links to other documents (BIP or SLIP)\nor to reference implementations.\n"
        },
        {
          "name": "slip-0010.md",
          "type": "blob",
          "size": 26.404296875,
          "content": "# SLIP-0010 : Universal private key derivation from master private key\n\n```\nNumber:  SLIP-0010\nTitle:   Universal private key derivation from master private key\nType:    Standard\nStatus:  Final\nAuthors: Jochen Hoenicke <hoenicke@gmail.com>\n         Pavol Rusnak <stick@satoshilabs.com>\nCreated: 2016-04-26\n```\n\n## Abstract\n\nSLIP-0010 describes a generalized derivation scheme for private and public key\npairs in hierarchical deterministic wallets for the curves secp256k1,\nNIST P-256, ed25519 and curve25519.\n\n## Motivation\n\nSome Trezor applications, in particular SSH and GPG, need different\ncurve types, e.g., NIST P-256 and ed25519.  For security reasons different\nprivate and public key pairs should be used for these curves.  This SLIP\ndescribes how to derive a master private/public key for these curves by\ngeneralizing the derivation scheme used in\n[BIP-0032](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki).\n\n## Body\n\nTrezor generates all keys from a [BIP-0039](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki)\nmnemonic or from a set of [SLIP-0039](https://github.com/satoshilabs/slips/blob/master/slip-0039.md)\nmnemonic shares and optionally a passphrase.  Each of these standards specifies\nhow to compute a seed from the mnemonic(s) and passphrase.  From this\nseed Trezor can create several master keys, one for each curve.  It uses a\nprocess similar and practically compatible with BIP-0032.  For other curves it uses a\ndifferent salt than BIP-0032.  This avoids using the same private key\nfor different elliptic curves with different orders.\n\n### Master key generation\n\nWe adapt the master key generation from BIP-0032.  To use different\nprivate keys for different curves we use different keys for the HMAC\nhash that generates the master key.  For the NIST P-256 curve the only\nother difference is the curve domain parameters.  In the algorithm below\nwe denote the group order of the elliptic curve by n. point(k) is the\nscalar multiplication of the curve generator by the scalar k.\nThe operation (+) of two elements on the curve is the group point\naddition.  For ed25519 and curve25519 the private keys are no longer\nmultipliers for the group generator; instead the hash of the private\nkey is the multiplier.  For this reason, our scheme for ed25519 and curve25519 does\nnot support public key derivation and uses the produced hashes directly\nas private keys.\n\nFor ed25519 public keys we define ser<sub>P</sub>(P): serializes the elliptic\ncurve point P = (x,y) on a twisted Edwards curve as a byte sequence:\n0x00 || ENC(x, y), where ENC is defined in [RFC 8032](https://datatracker.ietf.org/doc/html/rfc8032).\n\nFor curve25519 public keys we define ser<sub>P</sub>(P): serializes the elliptic\ncurve point P = (u,v) on a Montgomery curve as a byte sequence:\n0x00 || encodeUCoordinate(u, 255), where encodeUCoordinate is defined in [RFC 7748](https://datatracker.ietf.org/doc/html/rfc7748).\n\nFor ed25519 and curve25519 private keys we define ser<sub>256</sub>(p) = p and\nparse<sub>256</sub>(p) = p, since private keys for these two curves are not\nintegers but byte sequences.\n\nTo avoid invalid master keys, the algorithm is retried with the\nintermediate hash as new seed if the key is invalid.\n\nLet S be a seed byte sequence of 128 to 512 bits in length.  This is the same\nas the seed byte sequence used in BIP-0032.  The value of S should be the\nbinary seed obtained from a BIP-0039 mnemonic and optional passphrase or it\nshould be the master secret obtained from a set of SLIP-0039 mnemonics and\noptional passphrase.\n\n1. Calculate I = HMAC-SHA512(Key = Curve, Data = S)\n2. Split I into two 32-byte sequences, I<sub>L</sub> and I<sub>R</sub>.\n3. Use parse<sub>256</sub>(I<sub>L</sub>) as master secret key, and I<sub>R</sub> as master chain code.\n4. If curve is not ed25519 or curve25519 and I<sub>L</sub> is 0 or ≥ n (invalid key):\n    * Set S := I and restart at step 1.\n\nThe supported curves are\n\n* Curve = \"Bitcoin seed\" for the secp256k1 curve (this is compatible with BIP-0032).\n* Curve = \"Nist256p1 seed\" for the NIST P-256 curve.\n* Curve = \"ed25519 seed\" for the ed25519 curve.\n* Curve = \"curve25519 seed\" for curve25519.\n\nFor ed25519 and curve25519, the last step always succeeds since every\n32-byte sequence (even all zero) is a valid private key.\n\n### Child key derivation (CKD) functions\n\nPrivate and public key derivation for NIST P-256 is identical to the\ngeneration for secp256k1 but uses the domain parameters of that curve.\nWe change BIP-32 to not fail if the resulting key is not valid but\nretry hashing until a valid key is found.  For ed25519 and curve25519 only hardened\nkey generation from private parent key to private child key is supported.\n\nGiven a parent extended key and an index i, it is possible to compute\nthe corresponding child extended key. The algorithm to do so depends\non whether the child is a hardened key or not (or, equivalently,\nwhether i ≥ 2<sup>31</sup>), and whether we're talking about private\nor public keys.\n\n#### Private parent key &rarr; private child key\n\nLet n denote the order of the curve.\n\nThe function CKDpriv((k<sub>par</sub>, c<sub>par</sub>), i) &rarr; (k<sub>i</sub>, c<sub>i</sub>) computes a child extended private key from the parent extended private key:\n\n1. Check whether i ≥ 2<sup>31</sup> (whether the child is a hardened key).\n    * If so (hardened child): let I = HMAC-SHA512(Key = c<sub>par</sub>, Data = 0x00 || ser<sub>256</sub>(k<sub>par</sub>) || ser<sub>32</sub>(i)). (Note: The 0x00 pads the private key to make it 33 bytes long.)\n    * If not (normal child):\n        * If curve is ed25519 or curve25519: return failure.\n        * let I = HMAC-SHA512(Key = c<sub>par</sub>, Data = ser<sub>P</sub>(point(k<sub>par</sub>)) || ser<sub>32</sub>(i)).\n2. Split I into two 32-byte sequences, I<sub>L</sub> and I<sub>R</sub>.\n3. The returned chain code c<sub>i</sub> is I<sub>R</sub>.\n4. If curve is ed25519 or curve25519: The returned child key k<sub>i</sub> is I<sub>L</sub>.\n5. If parse<sub>256</sub>(I<sub>L</sub>) ≥ n or parse<sub>256</sub>(I<sub>L</sub>) + k<sub>par</sub> (mod n) = 0 (resulting key is invalid):\n    * let I = HMAC-SHA512(Key = c<sub>par</sub>, Data = 0x01 || I<sub>R</sub> || ser<sub>32</sub>(i) and restart at step 2.\n6. Otherwise: The returned child key k<sub>i</sub> is parse<sub>256</sub>(I<sub>L</sub>) + k<sub>par</sub> (mod n).\n\nThe HMAC-SHA512 function is specified in [RFC 4231](http://tools.ietf.org/html/rfc4231).\n\n#### Public parent key &rarr; public child key\n\nThis function always fails for ed25519 and curve25519 since normal derivation is not supported.\n\nThe function CKDpub((K<sub>par</sub>, c<sub>par</sub>), i) &rarr; (K<sub>i</sub>, c<sub>i</sub>) computes a child extended public key from the parent extended public key. It is only defined for non-hardened child keys.\n\n1. Check whether i ≥ 2<sup>31</sup> (whether the child is a hardened key).\n    * If so (hardened child): return failure\n    * If not (normal child): let I = HMAC-SHA512(Key = c<sub>par</sub>, Data = ser<sub>P</sub>(K<sub>par</sub>) || ser<sub>32</sub>(i)).\n2. Split I into two 32-byte sequences, I<sub>L</sub> and I<sub>R</sub>.\n3. The returned child key K<sub>i</sub> is point(parse<sub>256</sub>(I<sub>L</sub>)) + K<sub>par</sub>.\n4. The returned chain code c<sub>i</sub> is I<sub>R</sub>.\n5. If parse<sub>256</sub>(I<sub>L</sub>) ≥ n or K<sub>i</sub> is the point at infinity (the resulting key is invalid):\n    * let I = HMAC-SHA512(Key = c<sub>par</sub>, Data = 0x01 || I<sub>R</sub> || ser<sub>32</sub>(i)) and restart at step 2.\n\n## Compatibility with BIP-0032\n\nMaster key generation in BIP-0032 may result in an invalid key, in which case\nthe wallet keys are undefined. Similarly child key derivation may result in an\ninvalid key, in which case the child key for the given index is undefined and\none should proceed with the next index value. For the secp256k1 curve the\nprobability of this happening is lower than 2<sup>&minus;127</sup>,\ni.e. practically impossible. For the NIST P-256 curve, on the other hand, the\nprobability is 2<sup>&minus;32</sup>, i.e. unlikely but possible. The present\nspecification extends the BIP-0032 definition of child key derivation so that\nthe keys for all indices are well defined. The reason for extending the\ndefinition is to avoid problems when dealing with the NIST P-256 curve. However,\nthe extended definition also applies to the secp256k1 curve.\n\nFor the secp256k1 curve the SLIP-0010 derivation scheme is identical to BIP-0032\nwith near certainty (probability greater than 1&minus;2<sup>&minus;127</sup> per\nderivation operation). Theoretically, if a seed is used in a SLIP-0010 wallet to\nreceive assets and the seed is ported to a BIP-0032 wallet, then there is an\ninfinitesimal chance that some assets will not be discovered by the BIP-0032\nwallet. Conversely, if a seed is used in a BIP-0032 wallet to receive assets and\nthe seed is ported to a SLIP-0010 wallet, then all assets will be discovered by\nthe SLIP-0010 wallet.\n\n## Test vectors\n\n### Test vector 1 for secp256k1\n\nSeed (hex): 000102030405060708090a0b0c0d0e0f\n\n* Chain m\n  * fingerprint: 00000000\n  * chain code: 873dff81c02f525623fd1fe5167eac3a55a049de3d314bb42ee227ffed37d508\n  * private: e8f32e723decf4051aefac8e2c93c9c5b214313817cdb01a1494b917c8436b35\n  * public: 0339a36013301597daef41fbe593a02cc513d0b55527ec2df1050e2e8ff49c85c2\n* Chain m/0<sub>H</sub>\n  * fingerprint: 3442193e\n  * chain code: 47fdacbd0f1097043b78c63c20c34ef4ed9a111d980047ad16282c7ae6236141\n  * private: edb2e14f9ee77d26dd93b4ecede8d16ed408ce149b6cd80b0715a2d911a0afea\n  * public: 035a784662a4a20a65bf6aab9ae98a6c068a81c52e4b032c0fb5400c706cfccc56\n* Chain m/0<sub>H</sub>/1\n  * fingerprint: 5c1bd648\n  * chain code: 2a7857631386ba23dacac34180dd1983734e444fdbf774041578e9b6adb37c19\n  * private: 3c6cb8d0f6a264c91ea8b5030fadaa8e538b020f0a387421a12de9319dc93368\n  * public: 03501e454bf00751f24b1b489aa925215d66af2234e3891c3b21a52bedb3cd711c\n* Chain m/0<sub>H</sub>/1/2<sub>H</sub>\n  * fingerprint: bef5a2f9\n  * chain code: 04466b9cc8e161e966409ca52986c584f07e9dc81f735db683c3ff6ec7b1503f\n  * private: cbce0d719ecf7431d88e6a89fa1483e02e35092af60c042b1df2ff59fa424dca\n  * public: 0357bfe1e341d01c69fe5654309956cbea516822fba8a601743a012a7896ee8dc2\n* Chain m/0<sub>H</sub>/1/2<sub>H</sub>/2\n  * fingerprint: ee7ab90c\n  * chain code: cfb71883f01676f587d023cc53a35bc7f88f724b1f8c2892ac1275ac822a3edd\n  * private: 0f479245fb19a38a1954c5c7c0ebab2f9bdfd96a17563ef28a6a4b1a2a764ef4\n  * public: 02e8445082a72f29b75ca48748a914df60622a609cacfce8ed0e35804560741d29\n* Chain m/0<sub>H</sub>/1/2<sub>H</sub>/2/1000000000\n  * fingerprint: d880d7d8\n  * chain code: c783e67b921d2beb8f6b389cc646d7263b4145701dadd2161548a8b078e65e9e\n  * private: 471b76e389e528d6de6d816857e012c5455051cad6660850e58372a6c3e6e7c8\n  * public: 022a471424da5e657499d1ff51cb43c47481a03b1e77f951fe64cec9f5a48f7011\n\n### Test vector 1 for nist256p1\n\nSeed (hex): 000102030405060708090a0b0c0d0e0f\n\n* Chain m\n  * fingerprint: 00000000\n  * chain code: beeb672fe4621673f722f38529c07392fecaa61015c80c34f29ce8b41b3cb6ea\n  * private: 612091aaa12e22dd2abef664f8a01a82cae99ad7441b7ef8110424915c268bc2\n  * public: 0266874dc6ade47b3ecd096745ca09bcd29638dd52c2c12117b11ed3e458cfa9e8\n* Chain m/0<sub>H</sub>\n  * fingerprint: be6105b5\n  * chain code: 3460cea53e6a6bb5fb391eeef3237ffd8724bf0a40e94943c98b83825342ee11\n  * private: 6939694369114c67917a182c59ddb8cafc3004e63ca5d3b84403ba8613debc0c\n  * public: 0384610f5ecffe8fda089363a41f56a5c7ffc1d81b59a612d0d649b2d22355590c\n* Chain m/0<sub>H</sub>/1\n  * fingerprint: 9b02312f\n  * chain code: 4187afff1aafa8445010097fb99d23aee9f599450c7bd140b6826ac22ba21d0c\n  * private: 284e9d38d07d21e4e281b645089a94f4cf5a5a81369acf151a1c3a57f18b2129\n  * public: 03526c63f8d0b4bbbf9c80df553fe66742df4676b241dabefdef67733e070f6844\n* Chain m/0<sub>H</sub>/1/2<sub>H</sub>\n  * fingerprint: b98005c1\n  * chain code: 98c7514f562e64e74170cc3cf304ee1ce54d6b6da4f880f313e8204c2a185318\n  * private: 694596e8a54f252c960eb771a3c41e7e32496d03b954aeb90f61635b8e092aa7\n  * public: 0359cf160040778a4b14c5f4d7b76e327ccc8c4a6086dd9451b7482b5a4972dda0\n* Chain m/0<sub>H</sub>/1/2<sub>H</sub>/2\n  * fingerprint: 0e9f3274\n  * chain code: ba96f776a5c3907d7fd48bde5620ee374d4acfd540378476019eab70790c63a0\n  * private: 5996c37fd3dd2679039b23ed6f70b506c6b56b3cb5e424681fb0fa64caf82aaa\n  * public: 029f871f4cb9e1c97f9f4de9ccd0d4a2f2a171110c61178f84430062230833ff20\n* Chain m/0<sub>H</sub>/1/2<sub>H</sub>/2/1000000000\n  * fingerprint: 8b2b5c4b\n  * chain code: b9b7b82d326bb9cb5b5b121066feea4eb93d5241103c9e7a18aad40f1dde8059\n  * private: 21c4f269ef0a5fd1badf47eeacebeeaa3de22eb8e5b0adcd0f27dd99d34d0119\n  * public: 02216cd26d31147f72427a453c443ed2cde8a1e53c9cc44e5ddf739725413fe3f4\n\n### Test vector 1 for ed25519\n\nSeed (hex): 000102030405060708090a0b0c0d0e0f\n\n* Chain m\n  * fingerprint: 00000000\n  * chain code: 90046a93de5380a72b5e45010748567d5ea02bbf6522f979e05c0d8d8ca9fffb\n  * private: 2b4be7f19ee27bbf30c667b642d5f4aa69fd169872f8fc3059c08ebae2eb19e7\n  * public: 00a4b2856bfec510abab89753fac1ac0e1112364e7d250545963f135f2a33188ed\n* Chain m/0<sub>H</sub>\n  * fingerprint: ddebc675\n  * chain code: 8b59aa11380b624e81507a27fedda59fea6d0b779a778918a2fd3590e16e9c69\n  * private: 68e0fe46dfb67e368c75379acec591dad19df3cde26e63b93a8e704f1dade7a3\n  * public: 008c8a13df77a28f3445213a0f432fde644acaa215fc72dcdf300d5efaa85d350c\n* Chain m/0<sub>H</sub>/1<sub>H</sub>\n  * fingerprint: 13dab143\n  * chain code: a320425f77d1b5c2505a6b1b27382b37368ee640e3557c315416801243552f14\n  * private: b1d0bad404bf35da785a64ca1ac54b2617211d2777696fbffaf208f746ae84f2\n  * public: 001932a5270f335bed617d5b935c80aedb1a35bd9fc1e31acafd5372c30f5c1187\n* Chain m/0<sub>H</sub>/1<sub>H</sub>/2<sub>H</sub>\n  * fingerprint: ebe4cb29\n  * chain code: 2e69929e00b5ab250f49c3fb1c12f252de4fed2c1db88387094a0f8c4c9ccd6c\n  * private: 92a5b23c0b8a99e37d07df3fb9966917f5d06e02ddbd909c7e184371463e9fc9\n  * public: 00ae98736566d30ed0e9d2f4486a64bc95740d89c7db33f52121f8ea8f76ff0fc1\n* Chain m/0<sub>H</sub>/1<sub>H</sub>/2<sub>H</sub>/2<sub>H</sub>\n  * fingerprint: 316ec1c6\n  * chain code: 8f6d87f93d750e0efccda017d662a1b31a266e4a6f5993b15f5c1f07f74dd5cc\n  * private: 30d1dc7e5fc04c31219ab25a27ae00b50f6fd66622f6e9c913253d6511d1e662\n  * public: 008abae2d66361c879b900d204ad2cc4984fa2aa344dd7ddc46007329ac76c429c\n* Chain m/0<sub>H</sub>/1<sub>H</sub>/2<sub>H</sub>/2<sub>H</sub>/1000000000<sub>H</sub>\n  * fingerprint: d6322ccd\n  * chain code: 68789923a0cac2cd5a29172a475fe9e0fb14cd6adb5ad98a3fa70333e7afa230\n  * private: 8f94d394a8e8fd6b1bc2f3f49f5c47e385281d5c17e65324b0f62483e37e8793\n  * public: 003c24da049451555d51a7014a37337aa4e12d41e485abccfa46b47dfb2af54b7a\n\n### Test vector 1 for curve25519\n\nSeed (hex): 000102030405060708090a0b0c0d0e0f\n\n* Chain m\n  * fingerprint: 00000000\n  * chain code: 77997ca3588a1a34f3589279ea2962247abfe5277d52770a44c706378c710768\n  * private: d70a59c2e68b836cc4bbe8bcae425169b9e2384f3905091e3d60b890e90cd92c\n  * public: 005c7289dc9f7f3ea1c8c2de7323b9fb0781f69c9ecd6de4f095ac89a02dc80577\n* Chain m/0<sub>H</sub>\n  * fingerprint: 6f5a9c0d\n  * chain code: 349a3973aad771c628bf1f1b4d5e071f18eff2e492e4aa7972a7e43895d6597f\n  * private: cd7630d7513cbe80515f7317cdb9a47ad4a56b63c3f1dc29583ab8d4cc25a9b2\n  * public: 00cb8be6b256ce509008b43ae0dccd69960ad4f7ff2e2868c1fbc9e19ec3ad544b\n* Chain m/0<sub>H</sub>/1<sub>H</sub>\n  * fingerprint: fde474d7\n  * chain code: 2ee5ba14faf2fe9d7ab532451c2be3a0a5375c5e8c44fb31d9ad7edc25cda000\n  * private: a95f97cfc1a61dd833b882c89d36a78a030ea6b2fbe3ae2a70e4f1fc9008d6b1\n  * public: 00e9506455dce2526df42e5e4eb5585eaef712e5f9c6a28bf9fb175d96595ea872\n* Chain m/0<sub>H</sub>/1<sub>H</sub>/2<sub>H</sub>\n  * fingerprint: 6569dde7\n  * chain code: e1897d5a96459ce2a3d294cb2a6a59050ee61255818c50e03ac4263ef17af084\n  * private: 3d6cce04a9175929da907a90b02176077b9ae050dcef9b959fed978bb2200cdc\n  * public: 0018f008fcbc6d1cd8b4fe7a9eba00f6570a9da02a9b0005028cb2731b12ee4118\n* Chain m/0<sub>H</sub>/1<sub>H</sub>/2<sub>H</sub>/2<sub>H</sub>\n  * fingerprint: 1b7cce71\n  * chain code: 1cccc84e2737cfe81b51fbe4c97bbdb000f6a76eddffb9ed03108fbff3ff7e4f\n  * private: 7ae7437efe0a3018999e6f00d72e810ebc50578dbf6728bfa1c7fe73501081a7\n  * public: 00512e288a8ef4d869620dc4b06bb06ad2524b350dee5a39fcfeb708dbac65c25c\n* Chain m/0<sub>H</sub>/1<sub>H</sub>/2<sub>H</sub>/2<sub>H</sub>/1000000000<sub>H</sub>\n  * fingerprint: de5dcb65\n  * chain code: 8ccf15d55b1dda246b0c1bf3e979a471a82524c1bd0c1eaecccf00dde72168bb\n  * private: 7a59954d387abde3bc703f531f67d659ec2b8a12597ae82824547d7e27991e26\n  * public: 00a077fcf5af53d210257d44a86eb2031233ac7237da220434ac01a0bebccc1919\n\n### Test vector 2 for secp256k1\n\nSeed (hex): fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542\n\n* Chain m\n  * fingerprint: 00000000\n  * chain code: 60499f801b896d83179a4374aeb7822aaeaceaa0db1f85ee3e904c4defbd9689\n  * private: 4b03d6fc340455b363f51020ad3ecca4f0850280cf436c70c727923f6db46c3e\n  * public: 03cbcaa9c98c877a26977d00825c956a238e8dddfbd322cce4f74b0b5bd6ace4a7\n* Chain m/0\n  * fingerprint: bd16bee5\n  * chain code: f0909affaa7ee7abe5dd4e100598d4dc53cd709d5a5c2cac40e7412f232f7c9c\n  * private: abe74a98f6c7eabee0428f53798f0ab8aa1bd37873999041703c742f15ac7e1e\n  * public: 02fc9e5af0ac8d9b3cecfe2a888e2117ba3d089d8585886c9c826b6b22a98d12ea\n* Chain m/0/2147483647<sub>H</sub>\n  * fingerprint: 5a61ff8e\n  * chain code: be17a268474a6bb9c61e1d720cf6215e2a88c5406c4aee7b38547f585c9a37d9\n  * private: 877c779ad9687164e9c2f4f0f4ff0340814392330693ce95a58fe18fd52e6e93\n  * public: 03c01e7425647bdefa82b12d9bad5e3e6865bee0502694b94ca58b666abc0a5c3b\n* Chain m/0/2147483647<sub>H</sub>/1\n  * fingerprint: d8ab4937\n  * chain code: f366f48f1ea9f2d1d3fe958c95ca84ea18e4c4ddb9366c336c927eb246fb38cb\n  * private: 704addf544a06e5ee4bea37098463c23613da32020d604506da8c0518e1da4b7\n  * public: 03a7d1d856deb74c508e05031f9895dab54626251b3806e16b4bd12e781a7df5b9\n* Chain m/0/2147483647<sub>H</sub>/1/2147483646<sub>H</sub>\n  * fingerprint: 78412e3a\n  * chain code: 637807030d55d01f9a0cb3a7839515d796bd07706386a6eddf06cc29a65a0e29\n  * private: f1c7c871a54a804afe328b4c83a1c33b8e5ff48f5087273f04efa83b247d6a2d\n  * public: 02d2b36900396c9282fa14628566582f206a5dd0bcc8d5e892611806cafb0301f0\n* Chain m/0/2147483647<sub>H</sub>/1/2147483646<sub>H</sub>/2\n  * fingerprint: 31a507b8\n  * chain code: 9452b549be8cea3ecb7a84bec10dcfd94afe4d129ebfd3b3cb58eedf394ed271\n  * private: bb7d39bdb83ecf58f2fd82b6d918341cbef428661ef01ab97c28a4842125ac23\n  * public: 024d902e1a2fc7a8755ab5b694c575fce742c48d9ff192e63df5193e4c7afe1f9c\n\n### Test vector 2 for nist256p1\n\nSeed (hex): fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542\n\n* Chain m\n  * fingerprint: 00000000\n  * chain code: 96cd4465a9644e31528eda3592aa35eb39a9527769ce1855beafc1b81055e75d\n  * private: eaa31c2e46ca2962227cf21d73a7ef0ce8b31c756897521eb6c7b39796633357\n  * public: 02c9e16154474b3ed5b38218bb0463e008f89ee03e62d22fdcc8014beab25b48fa\n* Chain m/0\n  * fingerprint: 607f628f\n  * chain code: 84e9c258bb8557a40e0d041115b376dd55eda99c0042ce29e81ebe4efed9b86a\n  * private: d7d065f63a62624888500cdb4f88b6d59c2927fee9e6d0cdff9cad555884df6e\n  * public: 039b6df4bece7b6c81e2adfeea4bcf5c8c8a6e40ea7ffa3cf6e8494c61a1fc82cc\n* Chain m/0/2147483647<sub>H</sub>\n  * fingerprint: 946d2a54\n  * chain code: f235b2bc5c04606ca9c30027a84f353acf4e4683edbd11f635d0dcc1cd106ea6\n  * private: 96d2ec9316746a75e7793684ed01e3d51194d81a42a3276858a5b7376d4b94b9\n  * public: 02f89c5deb1cae4fedc9905f98ae6cbf6cbab120d8cb85d5bd9a91a72f4c068c76\n* Chain m/0/2147483647<sub>H</sub>/1\n  * fingerprint: 218182d8\n  * chain code: 7c0b833106235e452eba79d2bdd58d4086e663bc8cc55e9773d2b5eeda313f3b\n  * private: 974f9096ea6873a915910e82b29d7c338542ccde39d2064d1cc228f371542bbc\n  * public: 03abe0ad54c97c1d654c1852dfdc32d6d3e487e75fa16f0fd6304b9ceae4220c64\n* Chain m/0/2147483647<sub>H</sub>/1/2147483646<sub>H</sub>\n  * fingerprint: 931223e4\n  * chain code: 5794e616eadaf33413aa309318a26ee0fd5163b70466de7a4512fd4b1a5c9e6a\n  * private: da29649bbfaff095cd43819eda9a7be74236539a29094cd8336b07ed8d4eff63\n  * public: 03cb8cb067d248691808cd6b5a5a06b48e34ebac4d965cba33e6dc46fe13d9b933\n* Chain m/0/2147483647<sub>H</sub>/1/2147483646<sub>H</sub>/2\n  * fingerprint: 956c4629\n  * chain code: 3bfb29ee8ac4484f09db09c2079b520ea5616df7820f071a20320366fbe226a7\n  * private: bb0a77ba01cc31d77205d51d08bd313b979a71ef4de9b062f8958297e746bd67\n  * public: 020ee02e18967237cf62672983b253ee62fa4dd431f8243bfeccdf39dbe181387f\n\n### Test vector 2 for ed25519\n\nSeed (hex): fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542\n\n* Chain m\n  * fingerprint: 00000000\n  * chain code: ef70a74db9c3a5af931b5fe73ed8e1a53464133654fd55e7a66f8570b8e33c3b\n  * private: 171cb88b1b3c1db25add599712e36245d75bc65a1a5c9e18d76f9f2b1eab4012\n  * public: 008fe9693f8fa62a4305a140b9764c5ee01e455963744fe18204b4fb948249308a\n* Chain m/0<sub>H</sub>\n  * fingerprint: 31981b50\n  * chain code: 0b78a3226f915c082bf118f83618a618ab6dec793752624cbeb622acb562862d\n  * private: 1559eb2bbec5790b0c65d8693e4d0875b1747f4970ae8b650486ed7470845635\n  * public: 0086fab68dcb57aa196c77c5f264f215a112c22a912c10d123b0d03c3c28ef1037\n* Chain m/0<sub>H</sub>/2147483647<sub>H</sub>\n  * fingerprint: 1e9411b1\n  * chain code: 138f0b2551bcafeca6ff2aa88ba8ed0ed8de070841f0c4ef0165df8181eaad7f\n  * private: ea4f5bfe8694d8bb74b7b59404632fd5968b774ed545e810de9c32a4fb4192f4\n  * public: 005ba3b9ac6e90e83effcd25ac4e58a1365a9e35a3d3ae5eb07b9e4d90bcf7506d\n* Chain m/0<sub>H</sub>/2147483647<sub>H</sub>/1<sub>H</sub>\n  * fingerprint: fcadf38c\n  * chain code: 73bd9fff1cfbde33a1b846c27085f711c0fe2d66fd32e139d3ebc28e5a4a6b90\n  * private: 3757c7577170179c7868353ada796c839135b3d30554bbb74a4b1e4a5a58505c\n  * public: 002e66aa57069c86cc18249aecf5cb5a9cebbfd6fadeab056254763874a9352b45\n* Chain m/0<sub>H</sub>/2147483647<sub>H</sub>/1<sub>H</sub>/2147483646<sub>H</sub>\n  * fingerprint: aca70953\n  * chain code: 0902fe8a29f9140480a00ef244bd183e8a13288e4412d8389d140aac1794825a\n  * private: 5837736c89570de861ebc173b1086da4f505d4adb387c6a1b1342d5e4ac9ec72\n  * public: 00e33c0f7d81d843c572275f287498e8d408654fdf0d1e065b84e2e6f157aab09b\n* Chain m/0<sub>H</sub>/2147483647<sub>H</sub>/1<sub>H</sub>/2147483646<sub>H</sub>/2<sub>H</sub>\n  * fingerprint: 422c654b\n  * chain code: 5d70af781f3a37b829f0d060924d5e960bdc02e85423494afc0b1a41bbe196d4\n  * private: 551d333177df541ad876a60ea71f00447931c0a9da16f227c11ea080d7391b8d\n  * public: 0047150c75db263559a70d5778bf36abbab30fb061ad69f69ece61a72b0cfa4fc0\n\n### Test vector 2 for curve25519\n\nSeed (hex): fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542\n\n* Chain m\n  * fingerprint: 00000000\n  * chain code: b62c0c81a80a0ee16b977abb3677eb47549d0eef090f7a6c2b2010e739875e34\n  * private: 088491f5b4dfafbe956de471f3db10e02d784bc76050ee3b7c3f11b9706d3730\n  * public: 0060cc3b40567729af08757e1efe62536dc864a57ec582f98b96f484201a260c7a\n* Chain m/0<sub>H</sub>\n  * fingerprint: 75edaf13\n  * chain code: 341f386e571229e8adc52b82e824532817a31a35ba49ae334424e7228d020eed\n  * private: 8e73218a1ba5c7b95e94b6e7cf7b37fb6240fb3b2ecd801402a4439da7067ee2\n  * public: 007992b3f270ef15f266785fffb73246ad7f40d1fe8679b737fed0970d92cc5f39\n* Chain m/0<sub>H</sub>/2147483647<sub>H</sub>\n  * fingerprint: 5b26da66\n  * chain code: 942cbec088b4ae92e8db9336025e9185fec0985a3da89d7a408bc2a4e18a8134\n  * private: 29262b215c961bae20274588b33955c36f265c1f626df9feebb51034ce63c19d\n  * public: 002372feac417c38b833e1aba75f2420278122d698605b995cafc2fed7bb453d41\n* Chain m/0<sub>H</sub>/2147483647<sub>H</sub>/1<sub>H</sub>\n  * fingerprint: f701c832\n  * chain code: fe02397ae2ca71efe455f470fb23928baf026360a9e9090e21958f6fba9efc30\n  * private: a4d2474bd98c5e9ff416f536697b89949627d6d2c384b81a86d29f1136f4c2d1\n  * public: 00eca4fd0458d3f729b6218eda871b350fa8870a744caf6d30cd84dad2b9dd9c2d\n* Chain m/0<sub>H</sub>/2147483647<sub>H</sub>/1<sub>H</sub>/2147483646<sub>H</sub>\n  * fingerprint: 6063347b\n  * chain code: b3b49d550e732ee629f4aeb4bf7213c3ae0f239fd10add513253cddbb8efb868\n  * private: d3500d9b30529c51d92497eded1d68d29f60c630c45c61a481c185e574c6e5cf\n  * public: 00edaa3d381a2b02f40a80d69b2ce7ba7c3c4a9421744808857cd48c50d29b5868\n* Chain m/0<sub>H</sub>/2147483647<sub>H</sub>/1<sub>H</sub>/2147483646<sub>H</sub>/2<sub>H</sub>\n  * fingerprint: 86bf4fed\n  * chain code: f6ded904046e9758b9388dbf95ea5db837ab98b03b00e4db7009a8e3ac077685\n  * private: e20fecd59312b63b37eee27714465aae1caa1c87840abd0d685ea88b3d598fdf\n  * public: 00aa705de68066e9534a238af35ea77c48016462a8aff358d22eaa6c7d5b034354\n\n### Test derivation retry for nist256p1\n\nSeed (hex): 000102030405060708090a0b0c0d0e0f\n\n* Chain m\n  * fingerprint: 00000000\n  * chain code: beeb672fe4621673f722f38529c07392fecaa61015c80c34f29ce8b41b3cb6ea\n  * private: 612091aaa12e22dd2abef664f8a01a82cae99ad7441b7ef8110424915c268bc2\n  * public: 0266874dc6ade47b3ecd096745ca09bcd29638dd52c2c12117b11ed3e458cfa9e8\n* Chain m/28578<sub>H</sub>\n  * fingerprint: be6105b5\n  * chain code: e94c8ebe30c2250a14713212f6449b20f3329105ea15b652ca5bdfc68f6c65c2\n  * private: 06f0db126f023755d0b8d86d4591718a5210dd8d024e3e14b6159d63f53aa669\n  * public: 02519b5554a4872e8c9c1c847115363051ec43e93400e030ba3c36b52a3e70a5b7\n* Chain m/28578<sub>H</sub>/33941\n  * fingerprint: 3e2b7bc6\n  * chain code: 9e87fe95031f14736774cd82f25fd885065cb7c358c1edf813c72af535e83071\n  * private: 092154eed4af83e078ff9b84322015aefe5769e31270f62c3f66c33888335f3a\n  * public: 0235bfee614c0d5b2cae260000bb1d0d84b270099ad790022c1ae0b2e782efe120\n\n### Test seed retry for nist256p1\n\nSeed (hex): a7305bc8df8d0951f0cb224c0e95d7707cbdf2c6ce7e8d481fec69c7ff5e9446\n\n* Chain m\n  * fingerprint: 00000000\n  * chain code: 7762f9729fed06121fd13f326884c82f59aa95c57ac492ce8c9654e60efd130c\n  * private: 3b8c18469a4634517d6d0b65448f8e6c62091b45540a1743c5846be55d47d88f\n  * public: 0383619fadcde31063d8c5cb00dbfe1713f3e6fa169d8541a798752a1c1ca0cb20\n\n## Implementation\n\n* [Python implementation to generate test vectors](slip-0010/testvectors.py)\n* [.NET Standard 2.0 Implementation](https://github.com/elucidsoft/dotnetstandard-bip32)\n* [Swift implementation](https://github.com/radixdlt/babylon-wallet-ios/tree/main/RadixWallet/Cryptography/SLIP10)\n* [Kotlin implementation](https://github.com/radixdlt/SLIP10-Android)\n\n## References\n\n* [BIP-0032: Hierarchical Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n* [BIP-0039: Mnemonic code for generating deterministic keys](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki)\n* [SLIP-0039: Shamir's Secret-Sharing for Mnemonic Codes](https://github.com/satoshilabs/slips/blob/master/slip-0039.md)\n* [RFC 8032: Edwards-Curve Digital Signature Algorithm (EdDSA)](https://datatracker.ietf.org/doc/html/rfc8032)\n* [RFC 7748: Elliptic Curves for Security](https://datatracker.ietf.org/doc/html/rfc7748)\n"
        },
        {
          "name": "slip-0010",
          "type": "tree",
          "content": null
        },
        {
          "name": "slip-0011.md",
          "type": "blob",
          "size": 4.482421875,
          "content": "# SLIP-0011 : Symmetric encryption of key-value pairs using deterministic hierarchy\n\n```\nNumber:  SLIP-0011\nTitle:   Symmetric encryption of key-value pairs using deterministic hierarchy\nType:    Standard\nStatus:  Final\nAuthors: Pavol Rusnak <stick@satoshilabs.com>\n         Marek Palatinus <slush@satoshilabs.com>\n         Karel Bilek <kb@karelbilek.com>\nCreated: 2014-06-12\n```\n\n## Abstract\n\nThis document is explaining symmetric encryption on hardware devices, using deterministic hierarchy.\n\n## Motivation\n\nWe want to provide a symmetric encryption in the hardware wallet, where the key doesn't exit the device, and where the user might be forced to confirm the encryption/decryption on the display.\n\n## Body\n\n### Overview\n\nThe following data are sent to the hardware wallet:\n\n* BIP 32 path\n* key (that is being shown on the device)\n* value\n* encrypt/decrypt direction\n* should user confirm on encrypt?\n* should user confirm on decrypt?\n* optional IV\n\nValue is what is actually being encrypted. The key for the encryption is constructed from the private key on the BIP address, the key displayed on the device, and the two informations about whether to ask for confirmation.\n\nIt is constructed in such a way, that different path, key or the confirm information will get a different encryption key and IV. So, you cannot \"skip\" the confirmation by using different input.\n\nIV can be either manually set, or it is computed together with the key.\n\nThe value must be divisible into 16-byte blocks. The application has to pad the blocks itself and ensure safety; for example, by using PKCS7.\n\n### Details\n\nThe details are best explained on a slightly simplified code from TREZOR Python emulator.\n\n```python\ndef _cipher_keyvalue(self, address_n, key, value, encrypt, ask_on_encrypt, ask_on_decrypt, iv):\n    if len(value) % 16 > 0:\n        return Failure(message=\"Input length must be a multiple of 16\")\n    private_key = BIP32(self.storage.get_node()).get_private_node(list(address_n)).private_key\n    key += \"E1\" if ask_on_encrypt else \"E0\"\n    key += \"D1\" if ask_on_decrypt else \"D0\"\n    secret = hmac.HMAC(key=private_key, msg=key, digestmod=hashlib.sha512).digest()\n    aes_key = secret[0:32]\n    aes_iv = iv if iv else secret[32:48]\n    aes = pyaes.AESModeOfOperationCBC(key=aes_key, iv=aes_iv)\n    if encrypt:\n        res = ''.join([aes.encrypt(value[i:i+16]) for i in range(0, len(value), 16)])\n    else:\n        res = ''.join([aes.decrypt(value[i:i+16]) for i in range(0, len(value), 16)])\n    return CipheredKeyValue(value=res)\n```\n\n```python\nif len(value) % 16 > 0:\n    return Failure(message=\"Input length must be a multiple of 16\")\n```\n\nFirst, the value is checked, if it is divisable into 16-byte blocks, since the symmetric cipher is block cipher. The application has to pad the blocks itself and ensure safety; for example, by using PKCS7.\n\n```python\nprivate_key = BIP32(self.storage.get_node()).get_private_node(list(address_n)).private_key\n```\n\nPrivate key of the BIP32 node is derived.\n\n```python\nkey += \"E1\" if ask_on_encrypt else \"E0\"\nkey += \"D1\" if ask_on_decrypt else \"D0\"\n```\n\nThe key, displayed on the device, is concatenated with either E1 or E0 and either D1 or D0, depending on whether the confirmation is enabled in a given direction.\n\n```python\nsecret = hmac.HMAC(key=private_key, msg=key, digestmod=hashlib.sha512).digest()\n```\n\nThe key, with the concatenated E1/E0 or D1/D0, is HMACed, with the private key from HD Node, with SHA512 as a hash function.\n\n```python\naes_key = secret[0:32]\naes_iv = iv if iv else secret[32:48]\n```\n\nThe AES key is the first 32 bytes of the HMAC; the input vector is the next 16 bytes.\n\n```python\naes = pyaes.AESModeOfOperationCBC(key=aes_key, iv=aes_iv)\n```\n\nThe algorithm is AES, in CBC mode.\n\n```python\nif encrypt:\n    res = ''.join([aes.encrypt(value[i:i+16]) for i in range(0, len(value), 16)])\nelse:\n    res = ''.join([aes.decrypt(value[i:i+16]) for i in range(0, len(value), 16)])\n```\n\nThe result are the encrypted/decrypted blocks, concatenated together.\n\n## Test Vectors\n\nCheck [test_msg_cipherkeyvalue.py](https://github.com/trezor/python-trezor/blob/master/trezorlib/tests/device_tests/test_msg_cipherkeyvalue.py) for the test vectors.\n\n## References\n\nThe algorithm is implemented in [TREZOR firmware](https://github.com/trezor/trezor-mcu/blob/master/firmware/fsm.c) (function `fsm_msgCipherKeyValue`) and its [emulator](https://github.com/trezor/trezor-emu/blob/master/trezor/machine.py#L781) (function `_cipher_keyvalue`).\n\nIt is used in algorithms described in [SLIP-0015](slip-0015.md) and [SLIP-0016](slip-0016.md).\n"
        },
        {
          "name": "slip-0012.md",
          "type": "blob",
          "size": 0.6689453125,
          "content": "# SLIP-0012 : Public key encryption using deterministic hierarchy\n\n```\nNumber:  SLIP-0012\nTitle:   Public key encryption using deterministic hierarchy\nType:    Standard\nStatus:  Draft\nAuthors: Pavol Rusnak <stick@satoshilabs.com>\n         Marek Palatinus <slush@satoshilabs.com>\nCreated: 2014-06-12\n```\n\n## Abstract\n\nThis is a section for an abstract.\n\n## Motivation\n\nThis is a section for a motivation.\n\n## Body\n\nThis is a section for a body. The title of the section should be changed\nand the section can be split into multiple sections and subsections.\n\n## References\n\nThis is a section for references such as links to other documents (BIP or SLIP)\nor to reference implementations.\n"
        },
        {
          "name": "slip-0013.md",
          "type": "blob",
          "size": 3.3935546875,
          "content": "# SLIP-0013 : Authentication using deterministic hierarchy\n\n```\nNumber:  SLIP-0013\nTitle:   Authentication using deterministic hierarchy\nType:    Standard\nStatus:  Final\nAuthors: Pavol Rusnak <stick@satoshilabs.com>\nCreated: 2015-03-12\n```\n\n## Abstract\n\nThis document describes a method that is used for authenticating\nto various services such as websites or remote shells using a determinstic\nhierarchy.\n\n## Motivation\n\nUsing Deterministic Hierarchy for authenticating into systems is ideal,\nbecause the same concepts of easy backup that relate to backing up\ndeterministic wallets can be applied to backing up user identities.\n\n## Service Identity\n\nLet's introduce the service identity. It consists of two elements:\n\na) RFC 3986 URI `proto://[user@]host[:port][/path]`\n\nExamples:\n\n* `https://example.com`\n* `ftp://public@example.com/pub`\n* `ssh://root@example.com:2222`\n\nb) index (32-bit unsigned integer)\n\nThe index is used so one can generate more keys corresponding to the same URI.\n\n## HD Structure\n\n1. First concatenate `index` with the URI (`uri`). Use little endian for `index`.\n\n2. Compute the SHA256 hash of the result (`hash`).\n\n3. Truncate `hash` to 128 bits (`hash128`)\n\n4. Split `hash128` into four 32-bit integers `A`, `B`, `C`, `D`. Use little endian for each.\n\n5. Set highest bits of numbers `A`, `B`, `C`, `D` to 1 (e.g. logical OR with 0x80000000) to harden\n\n6. Derive the HD node `m/13'/A'/B'/C'/D'` according to SLIP-0010.\n\n### Worked example\n\n1. `index + uri`=`0` + `https://satoshi@bitcoin.org/login`\n\n2. `sha256(index + uri)` = `d0e2389d4c8394a9f3e32de01104bf6e8db2d9e2bb0905d60fffa5a18fd696db`\n\n3. `hash128` = `d0e2389d4c8394a9f3e32de01104bf6e`\n\n4. `A` = 2637750992, `B` = 2845082444, `C` = 3761103859, `D` = 1858012177\n\n5. `A'` = 2637750992, `B'` = 2845082444, `C'` = 3761103859, `D'` = 4005495825\n\n6. `HD node path` = `m/2147483661/2637750992/2845082444/3761103859/4005495825`\n\nSee a [Python example](https://github.com/trezor/python-trezor/blob/ca45019918bc4c54f1ace899a9acf397c8f4d92f/tests/test_msg_signidentity.py#L27).\n\n## Challenge - Response\n\nService issues the challenge consisting of three parts:\n\na) service identity described above (e.g. `https://example.com 0`)\n\nb) hidden challenge\n\n* random bytes sequence of maximum length 64\n* this won't be shown to the user\n\nc) visual challenge\n\n* arbitrary string of text of maximum length 64\n* this will be shown to the user and we recommend using timestamp in `YYYY-MM-DD HH:MM:SS` format or similar\n\nSigner takes this data and computes the private key according to section HD Structure.\nThen it concatenates sha256 hashes of challenge hidden and challenge visual and\nsigns the result using the standard Bitcoin message signing.\nFinally, the signature is returned together with the node public key and node address.\n\nIt's up to service operator to take this message and react in three possible ways:\n\n1. signature is invalid or not present -> show error to user\n2. signature is valid, address/public key seen for the first time -> create user account\n3. signature is valid, address/public key known -> login to user account\n\n## References\n\n* [BIP-0043: Purpose Field for Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki)\n* [RFC 3986: Uniform Resource Identifier (URI): Generic Syntax](https://tools.ietf.org/html/rfc3986)\n* [SLIP-0010: Universal private key derivation from master private key](https://github.com/satoshilabs/slips/blob/master/slip-0010.md)\n"
        },
        {
          "name": "slip-0014.md",
          "type": "blob",
          "size": 18.884765625,
          "content": "# SLIP-0014 : Stress Test Deterministic Wallet\n\n```\nNumber:  SLIP-0014\nTitle:   Stress Test Deterministic Wallet\nType:    Informational\nStatus:  Active\nAuthors: Pavol Rusnak <stick@satoshilabs.com>\nCreated: 2015-01-12\n```\n\n## Abstract\n\nSLIP-0014 describes a stress test deterministic wallet, which can be used\nto test various cornercases that such wallet can encounter.\n\n## Motivation\n\nDuring the development of myTREZOR deterministic wallet we realized there\nare quite a lot of different types of transactions in the network. In order\nto simplify testing of transaction history we came up with the idea to create\na special xpub that will contain these various types of transactions.\n\nFor more coins and their addresses (not listed in this document) see [addresses.md](slip-0014/addresses.md)\n\n## Bitcoin Wallets\n\nroot node:\n\n```\nmnemonic: all all all all all all all all all all all all\n\nxprv9s21ZrQH143K2rbkN6QpF6ZB3QQcyJA6aYbagMp6i8y831VVvpfcWNWqg5DM6GxSn66UDQUrgRgQEsLPZJC3APkPsQjxB7ndNMgj5R5HLmo\n```\n\n### Bitcoin: Legacy / P2PKH / BIP44\n\n```\nm/44'/0'/0'\n\nxprv9xj9UhHNKHr6kJKJBVj82ZxFrbfhczBDUHyVj7kHGAiZqAeUenz2JhrphnMMYVKcWcVPFJESngtKsVa4FYEvFfWUTtZThCoZdwDeS9qQnqm\nxpub6BiVtCpG9fQPxnPmHXG8PhtzQdWC2Su4qWu6XW9tpWFYhxydCLJGrWBJZ5H6qTAHdPQ7pQhtpjiYZVZARo14qHiay2fvrX996oEP42u8wZy\n\npkh([5c9e228d/44'/0'/0']xpub6BiVtCpG9fQPxnPmHXG8PhtzQdWC2Su4qWu6XW9tpWFYhxydCLJGrWBJZ5H6qTAHdPQ7pQhtpjiYZVZARo14qHiay2fvrX996oEP42u8wZy/0/*)#vzuemqzv\npkh([5c9e228d/44'/0'/0']xpub6BiVtCpG9fQPxnPmHXG8PhtzQdWC2Su4qWu6XW9tpWFYhxydCLJGrWBJZ5H6qTAHdPQ7pQhtpjiYZVZARo14qHiay2fvrX996oEP42u8wZy/1/*)#akecx4j5\n\npkh([5c9e228d/44'/0'/0']xpub6BiVtCpG9fQPxnPmHXG8PhtzQdWC2Su4qWu6XW9tpWFYhxydCLJGrWBJZ5H6qTAHdPQ7pQhtpjiYZVZARo14qHiay2fvrX996oEP42u8wZy/<0;1>/*)#t3pfpx6p\n```\n\n[link to btc1.trezor.io](https://btc1.trezor.io/xpub/xpub6BiVtCpG9fQPxnPmHXG8PhtzQdWC2Su4qWu6XW9tpWFYhxydCLJGrWBJZ5H6qTAHdPQ7pQhtpjiYZVZARo14qHiay2fvrX996oEP42u8wZy)\n\n#### Addresses\n\nindex | address                              | private key\n------|--------------------------------------|------------\n   0  | `1JAd7XCBzGudGpJQSDSfpmJhiygtLQWaGL` | `L1KjqxZkUwdXaKNL15F2jJZVZpgi2HkHPHGyqTrQNNegyZez3A7Z`\n   1  | `1GWFxtwWmNVqotUPXLcKVL2mUKpshuJYo`  | `KyBcuurcaJw6NqnZsmtpDqjbsS67PTXEZAK9QyFEDsyYjmNJJozj`\n   2  | `1Eni8JFS4yA2wJkicc3yx3QzCNzopLybCM` | `L3yYwqub7bYq6qKkPf9UAE7uuZYV8adAHvEaceXY9fKX8G7FDCoZ`\n   3  | `124dT55Jqpj9AKTyJnTX6G8RkUs7ReTzun` | `L2SNnZeTNHwgr9mayyHLZxmpyQN4SNbrxjBf9Rwq5Fvu2wwTm476`\n   4  | `15T9DSqc6wjkPxcr2MNVSzF9JAePdvS3n1` | `L4jzKXRhQXesPeUSUNi7EMHAEBFzwJuAkZsNi5tja9rLxgGajwPv`\n   5  | `1GA9u9TfCG7SWmKCveBumdA1TZpfom6ZdJ` | `L1N67rzEMn6fqvhkFeDnt11LMxYdGZtGQgdYVuASNpmQRawgbJEN`\n   6  | `1PogPE3bXc84abzEuM2rJEZf2vCbCEZzXz` | `L3Y5pgT2ewKqdqh6kcGDQ7YHFoW5Vh4xErrPqb4Yjb5re9QYZw7D`\n   7  | `176U2WABbj4h5PCrxE963wmxzXd2Mw6bP4` | `L2RpVajejxusxUXqLHTFJAyp1nzJnT2xuJpfm7Uah4GGUHz7XD58`\n   8  | `1HRZDR7CmLnq59w6mtzNa7SHtVWPSxdgKA` | `Kx8nBDjAkXkykD62AF8XjP8W5Z4a79iZC8Z7axyDWXsZTcn5agzM`\n   9  | `1MPdvYLzcekvEzAB7DmiHa1oU8Foh4KUw8` | `L1xWyxmCkjsB2Z9wnjoZ5TGabeg8KbpZt1PjgVsKA9pn3L7JCiTs`\n\n### Bitcoin: Legacy SegWit / P2SH-P2WPKH / BIP49\n\n```\nm/49'/0'/0'\n\nxprv9yVyTu1dmn2ekCQYnV4FhXrVNbnJKBbAwXgDaqmhcjyxHaz31UTdLYGqdwFCBv8LA1BafJUWeiQ6J1uUSU5ebGK6GmcFiJsb3bYfpfpLyva\nxpub6CVKsQYXc9awxgV1tWbG4foDvdcnieK2JkbpPEBKB5WwAPKBZ1mstLbKVB4ov7QzxzjaxNK6EfmNY5Jsk2cG26EVcEkycGW4tchT2dyUhrx\n\nyprvAJLEmZgYvTa8bVbfcqqsucwzYZvkFoafreCSNEfazkMqLgoGG8dBxbvyf9CnBpnFZeJPQn557NkeBJX3AAVfPVzh97JgJDh5KKcKDCEbbzm\nypub6XKbB5DSkq8Royg8isNtGktj6bmEfGJXDs83Ad5CZ5tpDV8QofwSWQFTWP2Pv24vNdrPhquehL7vRMvSTj2GpKv6UaTQCBKZALm6RJAmxG6\n\nsh(wpkh([5c9e228d/49'/0'/0']xpub6CVKsQYXc9awxgV1tWbG4foDvdcnieK2JkbpPEBKB5WwAPKBZ1mstLbKVB4ov7QzxzjaxNK6EfmNY5Jsk2cG26EVcEkycGW4tchT2dyUhrx/0/*))#jkfqtdfw\nsh(wpkh([5c9e228d/49'/0'/0']xpub6CVKsQYXc9awxgV1tWbG4foDvdcnieK2JkbpPEBKB5WwAPKBZ1mstLbKVB4ov7QzxzjaxNK6EfmNY5Jsk2cG26EVcEkycGW4tchT2dyUhrx/1/*))#8h8knju3\n\nsh(wpkh([5c9e228d/49'/0'/0']xpub6CVKsQYXc9awxgV1tWbG4foDvdcnieK2JkbpPEBKB5WwAPKBZ1mstLbKVB4ov7QzxzjaxNK6EfmNY5Jsk2cG26EVcEkycGW4tchT2dyUhrx/<0;1>/*))#a49xle58\n```\n\n[link to btc1.trezor.io](https://btc1.trezor.io/xpub/ypub6XKbB5DSkq8Royg8isNtGktj6bmEfGJXDs83Ad5CZ5tpDV8QofwSWQFTWP2Pv24vNdrPhquehL7vRMvSTj2GpKv6UaTQCBKZALm6RJAmxG6)\n\n#### Addresses\n\nindex | address                              | private key\n------|--------------------------------------|------------\n   0  | `3L6TyTisPBmrDAj6RoKmDzNnj4eQi54gD2` | `L1xY6RmpnGn7r5bhQCrDXFTqVGFY7e1p62Rw5yw6bNzKUzRLD1tw`\n   1  | `3GMMgFUQiYTYQhuHQuZfQoXPvW3GPqfGmD` | `Kx2KfpCa6Aewb1zxPBt5ex8MFNKk3SrJaeYRVjNRCUg7zALXDy8w`\n   2  | `3BKbtvJtLSjnSoGUYTeQ17tMKTuyqbUV7P` | `L3L1oYXQbPmgpgvyB6BzM5PihfAvZfi3pFMZfppVQscM1zQokdtg`\n   3  | `3Dyf1D6pVR6ZAQYN1th6ehgS1uqgGk1TGh` | `L3w2TxQpwJCkEhM96o3DTFTC1Pv67kpQ4Nwp4jD9n8oHvFQ7KsSB`\n   4  | `33wLRyxHFtrXLF7Aun38Dctw5QyiBdruK2` | `L1K9dsgY46AgcGsNYdqJCEQbKBvvSuRz1MrWu3ATgyRaq3vVprtn`\n   5  | `32pKKUD5TKyqb4kzPorJnY8XhiLaHBKni1` | `L2ET81wAcxm4vU22w7mEU2EC9bf5aNr1XaMNA1B9GkMHr5YT99a5`\n   6  | `3NCRi181wMB1v9gPyms9WDruKemBfrE9rQ` | `KzyfHMxPYBmwgy3pJtqj2UK6xbqzA8TDZUdapXMCQidk2zLg1zVC`\n   7  | `32d6ze9Be4J45ERomziXxGWXxLobAAQq85` | `L3i75zyVQKi5ZBjHMghQSgCx1HYQnYjZh1N2Y6gBLciEa7mqYqvN`\n   8  | `3FNTNKoAcXDUTUSNAtVTcvAehwQLyJSmP9` | `L5SXQN7L1KNFTVurn4xaevP494RYRWNSqVUE2cUFMFnpQTSPHNYG`\n   9  | `3L55P4LZsyKYUw5Aqy6DPky6ySw3g34TQS` | `Kzi8YhDogNJKVis8r5z4Lq8M6rSNudAG5p63pF45i9fQQb3KCAeC`\n\n### Bitcoin: SegWit / P2WPKH / BIP84\n\n```\nm/84'/0'/0'\n\nxprv9zE7ynHaxhGKkZyFCd2jEJYmiZ5X2tdvYHhkVKsHBybspXSX4GTeD9BcR2b4PmvKShEQtFh6L8pRyu8SxPdumPhaQiBUQQiCSsEhnaadaYm\nxpub6DDUPHpUo4pcy43iJeZjbSVWGav1SMMmuWdMHiGtkK8rhKmfbomtkwW6GKs1GGAKehT6QRocrmda3WWxXawpjmwaUHfFRXuKrXSapdckEYF\n\nzprvAdteb7dRG4MHTAMUsLbyeUjn4VNQv8cvNWkC47f3wzMdvj4yZanmTGVtTSWEPbEAFyU2PCtDFTXXkUMaPnTwMs4n9PaKaEMAzKMzZguzwHG\nzpub6rszzdAK6RuafeRwyN8z1cgWcXCuKbLmjjfnrW4fWKtcoXQ8787214pNJjnBG5UATyghuNzjn6Lfp5k5xymrLFJnCy46bMYJPyZsbpFGagT\n\nwpkh([5c9e228d/84'/0'/0']xpub6DDUPHpUo4pcy43iJeZjbSVWGav1SMMmuWdMHiGtkK8rhKmfbomtkwW6GKs1GGAKehT6QRocrmda3WWxXawpjmwaUHfFRXuKrXSapdckEYF/0/*)#l4dc6ccr\nwpkh([5c9e228d/84'/0'/0']xpub6DDUPHpUo4pcy43iJeZjbSVWGav1SMMmuWdMHiGtkK8rhKmfbomtkwW6GKs1GGAKehT6QRocrmda3WWxXawpjmwaUHfFRXuKrXSapdckEYF/1/*)#wpge8dgm\n\nwpkh([5c9e228d/84'/0'/0']xpub6DDUPHpUo4pcy43iJeZjbSVWGav1SMMmuWdMHiGtkK8rhKmfbomtkwW6GKs1GGAKehT6QRocrmda3WWxXawpjmwaUHfFRXuKrXSapdckEYF/<0;1>/*)#tdqj4vr6\n```\n\n[link to btc1.trezor.io](https://btc1.trezor.io/xpub/zpub6rszzdAK6RuafeRwyN8z1cgWcXCuKbLmjjfnrW4fWKtcoXQ8787214pNJjnBG5UATyghuNzjn6Lfp5k5xymrLFJnCy46bMYJPyZsbpFGagT)\n\n#### Addresses\n\nindex | address                                      | private key\n------|----------------------------------------------|------------\n0     | `bc1qannfxke2tfd4l7vhepehpvt05y83v3qsf6nfkk` | `Kycvq5CiKukoBWJjN3WEduoHnE6pKWrQPM7XuiLEkbgLuQgEzZPu`\n1     | `bc1q7e6qu5smalrpgqrx9k2gnf0hgjyref5p36ru2m` | `Kz4p2JcERCPT6LADX5pDmV1XNtnskABTaCFQb1hyNuWDqY43HuwE`\n2     | `bc1q5f2lvs7t29wv8nwssse6a4f6099sc3nagchqyc` | `KxXM7XXwK8G1yZpw5o8tqaA5Ria5R3WxX78zbdPdg3Ncp9mgHiur`\n3     | `bc1q6hr68ewf72l6r7cj6ut286x0xkwg5706jq450u` | `KyGV2ApxE2gLmCukQbjKAKKrcGKBCGSRy2itnyXDoxcdjsdd9vXH`\n4     | `bc1q7zql632newlfv9rt269jyxdn30370rh4kp23pd` | `L5gUrfBMftHbbn6tUaHNHkNcPxpz6niJsdCubAMHTaxU759RDY6N`\n5     | `bc1qfcjv620stvtzjeelg26ncgww8ks49zy8lracjz` | `L3YbRwxjxLx9SwcKYyaKXWPtR3pqbPdzMjaTHv6oi62jETv6VNvC`\n6     | `bc1quqgq44wq0zjh6d920zs42nsy4n4ev5vt8nxke4` | `L1i1MqdvaTpcaPaHXfgMkxLU7Mq6DZHRzs54AmdAYNstE4vRRT2i`\n7     | `bc1qunyzxr3gfcg7ggxp5vpxwm3q7t3xc52rcaupu4` | `KzkvQCu5ERcFcd6HBicdcDEom3MEaP3ptRLeHqnG6X1LU3jj7vjh`\n8     | `bc1q2glg28yag4rdgrd0hj5ntdvva8cgrjdsku5prc` | `KyQf4uHNM1eskde2jJ7XwrXDe8TD9DAML5UTp3uxA7uzbWSY1NzZ`\n9     | `bc1q9z4cdmrgtfjsp34dmtvha98shje83jjn2t27z5` | `L5o7HpPciFxK9QrJu2tWg6aVTK89KjLHizHPwwAfqVX2qyzxqmrB`\n\n### Bitcoin: Taproot / P2TR / BIP86\n\n```\nm/86'/0'/0'\n\nxprv9xwmiZmq343K7HjUZAPMQ51qhFy8vKHeTYWApWMgkTp9LFtrRqkam7p5mwDVcXiaK97CMumfGTqmSgxpWE2yb9LTxmbT1Cnrvq4dYthBjxm\nxpub6Bw885JisRbcKmowfBvMmCxaFHodKn1VpmRmctmJJoM8D4DzyP4qJv8ZdD9V9r3SSGjmK2KJEDnvLH6f1Q4HrobEvnCeKydNvf1eir3RHZk\n\ntr([5c9e228d/86'/0'/0']xpub6Bw885JisRbcKmowfBvMmCxaFHodKn1VpmRmctmJJoM8D4DzyP4qJv8ZdD9V9r3SSGjmK2KJEDnvLH6f1Q4HrobEvnCeKydNvf1eir3RHZk/0/*)#d8jj22qr\ntr([5c9e228d/86'/0'/0']xpub6Bw885JisRbcKmowfBvMmCxaFHodKn1VpmRmctmJJoM8D4DzyP4qJv8ZdD9V9r3SSGjmK2KJEDnvLH6f1Q4HrobEvnCeKydNvf1eir3RHZk/1/*)#unhnhlsm\n\ntr([5c9e228d/86'/0'/0']xpub6Bw885JisRbcKmowfBvMmCxaFHodKn1VpmRmctmJJoM8D4DzyP4qJv8ZdD9V9r3SSGjmK2KJEDnvLH6f1Q4HrobEvnCeKydNvf1eir3RHZk/<0;1>/*)#4swej4wz\n```\n\n[link to btc1.trezor.io](https://btc1.trezor.io/xpub/tr(xpub6Bw885JisRbcKmowfBvMmCxaFHodKn1VpmRmctmJJoM8D4DzyP4qJv8ZdD9V9r3SSGjmK2KJEDnvLH6f1Q4HrobEvnCeKydNvf1eir3RHZk))\n\n#### Addresses\n\nindex | address                                                          | private key\n------|------------------------------------------------------------------|------------\n0     | `bc1ptxs597p3fnpd8gwut5p467ulsydae3rp9z75hd99w8k3ljr9g9rqx6ynaw` | TBD\n1     | `bc1plca7n9vs7d906nwlqyvk0d0jxnxss6x7w3x2y879quuvj8xn3p3s7vrrl2` | TBD\n2     | `bc1pks4em3l8vg4zyk5xpcmgygh7elkhu03z3fqj48a2a2lv948cn4hsyltl3h` | TBD\n3     | `bc1pvlme5mvcme0mqvfxknqr4mmcajthd9c9vqwknfghgvnsdt0ghtyquf66nq` | TBD\n4     | `bc1pu4kdwq4jvpk3psqt6tw38fax7l20xj8y6gtzdgm9dj2amgy6t77sn420ak` | TBD\n5     | `bc1p4w7pr3hx7ufuwpl7wj8z70kcdgu3uz5rnunhqv242629xskngyhstt8kny` | TBD\n6     | `bc1p6rna8q8jpqj88pc0na5y4c2t574xrr6r4vfl7pw3zfmt0fyvyweskhh52w` | TBD\n7     | `bc1pfqpkg5evfvqu0yjczwrm8vr8dzxmg8cpr8t5fw0whcv8r68tvx0swws8nt` | TBD\n8     | `bc1pqveghnerewvk8frrs9s4ha5ta8yzycu5zfdmez4jp4dxkdvpaspqenr5dy` | TBD\n9     | `bc1pkef3scnk7prtlpklpk586u3n3fvhe4hv2lvmggf8dx7sdwk6l6pq7j6u8q` | TBD\n\n## Bitcoin Testnet Wallets\n\nroot node:\n\n```\nmnemonic: all all all all all all all all all all all all\n\ntprv8ZgxMBicQKsPdfqH2fGKQkBAMXpqCpC6v6WhYnEZC7TbpcEavC1N27tHbFP16eLm9XdFDW6cqnGChit8gWXyyT1zQ3xFqUWgHTS9XBQw3j5\n```\n\n### Bitcoin Testnet: Legacy / P2PKH / BIP44\n\n```\nm/44'/1'/0'\n\ntprv8gdjtqr3TjNXgxpdi4LurDeG1Z8rQR2cGXYbaifKAPypiaF8hG5k5XxT7bTsjdkN9ERUkLVb47tvJ7sYRsJrkbbFf2UTRqAkkGRcaWEhRuY\ntpubDDKn3FtHc74CaRrRbi1WFdJNaaenZkDWqq9NsEhcafnDZ4VuKeuLG2aKHm5SuwuLgAhRkkfHqcCxpnVNSrs5kJYZXwa6Ud431VnevzzzK3U\n\npkh([5c9e228d/44'/1'/0']tpubDDKn3FtHc74CaRrRbi1WFdJNaaenZkDWqq9NsEhcafnDZ4VuKeuLG2aKHm5SuwuLgAhRkkfHqcCxpnVNSrs5kJYZXwa6Ud431VnevzzzK3U/0/*)#k65gljcw\npkh([5c9e228d/44'/1'/0']tpubDDKn3FtHc74CaRrRbi1WFdJNaaenZkDWqq9NsEhcafnDZ4VuKeuLG2aKHm5SuwuLgAhRkkfHqcCxpnVNSrs5kJYZXwa6Ud431VnevzzzK3U/1/*)#8w3fz8gk\n\npkh([5c9e228d/44'/1'/0']tpubDDKn3FtHc74CaRrRbi1WFdJNaaenZkDWqq9NsEhcafnDZ4VuKeuLG2aKHm5SuwuLgAhRkkfHqcCxpnVNSrs5kJYZXwa6Ud431VnevzzzK3U/<0;1>/*)#jlq3k5tw\n```\n\n[link to tbtc1.trezor.io](https://tbtc1.trezor.io/xpub/tpubDDKn3FtHc74CaRrRbi1WFdJNaaenZkDWqq9NsEhcafnDZ4VuKeuLG2aKHm5SuwuLgAhRkkfHqcCxpnVNSrs5kJYZXwa6Ud431VnevzzzK3U)\n\n#### Addresses\n\nindex | address                              | private key\n------|--------------------------------------|------------\n   0  | `mvbu1Gdy8SUjTenqerxUaZyYjmveZvt33q` | `cPigoY3hubxpXad1t5WmxpcQpmezLeCcbpA7EpyhDofFnein2wF5`\n   1  | `mopZWqZZyQc3F2Sy33cvDtJchSAMsnLi7b` | `cVN8eHRQh8r9THM2Mu5HCSjx6cfVdssqGL1KeiCKBwUouyf6K5F5`\n   2  | `mgswWyysmViMqYmn5XEj1pVz7rVUftVEBP` | `cUCiXe6qNE43rEJkSR9e1Tt37W5gQmmGeBiSmXzDbZgxbs5Z5nvK`\n   3  | `momtnzR3XqXgDSsFmd8gkGxUiHZLde3RmA` | `cTAi8RAF2htyUn3F921npbuJLSVdYfpfwqjwLEAPkqvFxLAF716k`\n   4  | `moE1dVYvebvtaMuNdXQKvu4UxUftLmS1Gt` | `cUmGFJMq5Vkh4rjKHe4J4S5adJH1E8xFJJ2ZARBSZNBVzYwj1RvH`\n   5  | `muXZYKRJFJ2qPegzV2GEzLqHxngJpzMrmT` | `cRHMG1RjgVWTdUNEgDD5oNEvQvBAha5N3YntnT7rC8yekePLGQwR`\n   6  | `mnY26FLTzfC94mDoUcyDJh1GVE3LuAUMbs` | `cS9rFFu8douRgweuQKLdF4QXpS3H1UeoNxZWTt6K874nt4sy56HX`\n   7  | `mgV9Z3YuSbxGb2b2Y1T6VCqtU2osui7vhG` | `cQ1Uh9vXLhaoEgPGUEGMoWACpzrVesmB8G4KdK5vZBnLBifyB29Q`\n   8  | `miLqfMwzis98J5vkjjhTiXVsrkAYwuxmts` | `cPwi3WVwjgr422fBeLa22UHwRkQEMZqoJBjevuosqd25yyYekEkF`\n   9  | `mhAacBq3SnXEpoxzEwKqfnQz1iYjxmGg9V` | `cRkkmKXgTmq3Je2B71Rn4HQxeo2hEqvtUeQ5r4Q7eKr5qtq6vzu4`\n\n### Bitcoin Testnet: Legacy SegWit / P2SH-P2WPKH / BIP49\n\n```\nm/49'/1'/0'\n\ntprv8fbPeVsyzhdBvmTfb8BShTevk7eHVig91hJ3FUHqCXPFMxyMytfYDFLZvLc6C6xvbFRsa26tZXFLDLHigKKwZ1wbHMX9cFfQ2HHQh63C3k3\ntpubDCHRnuvE95JrpEVTUmr36sK3K9ADf3s3aztpXzL8coBeCTE8cHV8PjxS6SjWJM3GfPn798gyEa3dRPgjoUDSuNfuC9xz4PHznwKEk2XL7X1\n\nuprv8zRexAYu9PAfn4enRUy4uYkRv5njSLfdvopG2sBiaXm8R4nbEYq6qJzhwYZgC1cqztYgKVhT2Bbt6cuHQ1jxMFdC9hDaCAUtJ1M45hTgJAA\nupub5DR1Mg5nykixzYjFXWW5GghAU7dDqoPVJ2jrqFbL8sJ7Hs7jn69MP7KBnnmxn88GeZtnH8PRKV9w5MMSFX8AdEAoXY8Qd8BJPoXtpMeHMxJ\n\nsh(wpkh([5c9e228d/49'/1'/0']tpubDCHRnuvE95JrpEVTUmr36sK3K9ADf3s3aztpXzL8coBeCTE8cHV8PjxS6SjWJM3GfPn798gyEa3dRPgjoUDSuNfuC9xz4PHznwKEk2XL7X1/0/*))#qfh8hjq8\nsh(wpkh([5c9e228d/49'/1'/0']tpubDCHRnuvE95JrpEVTUmr36sK3K9ADf3s3aztpXzL8coBeCTE8cHV8PjxS6SjWJM3GfPn798gyEa3dRPgjoUDSuNfuC9xz4PHznwKEk2XL7X1/1/*))#4ge30d4c\n\nsh(wpkh([5c9e228d/49'/1'/0']tpubDCHRnuvE95JrpEVTUmr36sK3K9ADf3s3aztpXzL8coBeCTE8cHV8PjxS6SjWJM3GfPn798gyEa3dRPgjoUDSuNfuC9xz4PHznwKEk2XL7X1/<0;1>/*))#egxlxhl0\n```\n\n[link to tbtc1.trezor.io](https://tbtc1.trezor.io/xpub/upub5DR1Mg5nykixzYjFXWW5GghAU7dDqoPVJ2jrqFbL8sJ7Hs7jn69MP7KBnnmxn88GeZtnH8PRKV9w5MMSFX8AdEAoXY8Qd8BJPoXtpMeHMxJ)\n\n#### Addresses\n\nindex | address                               | private key\n------|---------------------------------------|------------\n   0  | `2N4Q5FhU2497BryFfUgbqkAJE87aKHUhXMp` | `cRgRJFubBbGF7mrYxbtVfYvRTw7nTuwAgCxQxW8sz7J3GUaFDpXy`\n   1  | `2Mt7P2BAfE922zmfXrdcYTLyR7GUvbwSEns` | `cNzuaocakTkP3uTfFeyxJaatdFFEi3eEXSeckjrPubeEtLc6LgKN`\n   2  | `2N6aUMgQk8y1zvoq6FeWFyotyj75WY9BGsu` | `cRFggMzpii7ZyrnvBaqyq1DE3Aw7yxeT2ZjaJ48GRzcWZYegWaxE`\n   3  | `2NA7tbZWM9BcRwBuebKSQe2xbhhF1paJwBM` | `cQEuKiCruVH89JimwRT7LkjPTJKDPRU5FLrzEoEUQqRDJbvVeEaV`\n   4  | `2N8RZMzvrUUnpLmvACX9ysmJ2MX3GK5jcQM` | `cUBFS7oSvLg5Lt3jx148obE4dPc3EU8hiwta11LXJipYHE1xD79m`\n   5  | `2MvUUSiQZDSqyeSdofKX9KrSCio1nANPDTe` | `cUfaGYiJKGBNawCzm7q4xbCzr3dwpTckdaMLxiNrEHoxQZWCGA6h`\n   6  | `2NBXaWu1HazjoUVgrXgcKNoBLhtkkD9Gmet` | `cNzV3JvVCSPsyh34NveJ5YCSE65QWyJNSTGr5LsMtEzgXmsncos5`\n   7  | `2N791Ttf89tMVw2maj86E1Y3VgxD9Mc7PU7` | `cNu1yCSQZuUo3qweP73EUu1peVh29xchhwbyBuqWgcAoho2AX9sE`\n   8  | `2NCJmwEq8GJm8t8GWWyBXAfpw7F2qZEVP5Y` | `cQjPz5n3UMGY6f2ZTY4EfC5mF7qpcrBXQfFW23xNNxTsUCc4pAse`\n   9  | `2NEgW71hWKer2XCSA8ZCC2VnWpB77L6bk68` | `cPb7wNHh9eQqECVdGFCLGTKkmdUjyk2FRdJspBAbKaNAvstZzNzZ`\n\n### Bitcoin Testnet: SegWit / P2WPKH / BIP84\n\n```\nm/84'/1'/0'\n\ntprv8fs8xTNozVNnBjpLwdox39a8dNqR86VDbVtYDFtJk7HCbSrQDpW4ctKSz9f7J6MTYiHhRANPjvknG2RN5XtxaKmMdW18WUvZiQhHX1s8jmt\ntpubDCZB6sR48s4T5Cr8qHUYSZEFCQMMHRg8AoVKVmvcAP5bRw7ArDKeoNwKAJujV3xCPkBvXH5ejSgbgyN6kREmF7sMd41NdbuHa8n1DZNxSMg\n\nvprv9KXfZnieHrTjtLCacMPCTKm8yK8K1LUDRivyn3g5W82xheUrj8qBs1dj2ZaHHufJMzXJv7ZWfFTt2beVWvizAo8ZNBPygJZYFrpaJAwg3nA\nvpub5YX1yJFY8E236pH3iNvCpThsXLxoQoC4nwraaS5h4TZwaSp1Gg9SQoxCsrumxjh7nZRQQkNfH29TEDeMvAZVmD3rpmsDnFc5Sj4JgJG6m4b\n\nwpkh([5c9e228d/84'/1'/0']tpubDCZB6sR48s4T5Cr8qHUYSZEFCQMMHRg8AoVKVmvcAP5bRw7ArDKeoNwKAJujV3xCPkBvXH5ejSgbgyN6kREmF7sMd41NdbuHa8n1DZNxSMg/0/*)#rn0zejch\nwpkh([5c9e228d/84'/1'/0']tpubDCZB6sR48s4T5Cr8qHUYSZEFCQMMHRg8AoVKVmvcAP5bRw7ArDKeoNwKAJujV3xCPkBvXH5ejSgbgyN6kREmF7sMd41NdbuHa8n1DZNxSMg/1/*)#j82ry8g0\n\nwpkh([5c9e228d/84'/1'/0']tpubDCZB6sR48s4T5Cr8qHUYSZEFCQMMHRg8AoVKVmvcAP5bRw7ArDKeoNwKAJujV3xCPkBvXH5ejSgbgyN6kREmF7sMd41NdbuHa8n1DZNxSMg/<0;1>/*)#egs8kz3g\n```\n\n[link to tbtc1.trezor.io](https://tbtc1.trezor.io/xpub/vpub5YX1yJFY8E236pH3iNvCpThsXLxoQoC4nwraaS5h4TZwaSp1Gg9SQoxCsrumxjh7nZRQQkNfH29TEDeMvAZVmD3rpmsDnFc5Sj4JgJG6m4b)\n\n#### Addresses\n\nindex | address                                      | private key\n------|----------------------------------------------|------------\n0     | `tb1qkvwu9g3k2pdxewfqr7syz89r3gj557l3uuf9r9` | `cPSW1uTU2dmrJTgFoiAoZva3iZfyhjdT5y8agNzpMKa4c7qFPgrG`\n1     | `tb1qldlynaqp0hy4zc2aag3pkenzvxy65saesxw3wd` | `cRyA1t3w1ytsAiDKsvdeePqESnQBKk8TbftWUPkAGQ4utCZ3Dg42`\n2     | `tb1q9l0rk0gkgn73d0gc57qn3t3cwvucaj3h8wtrlu` | `cSskN3UgpZpMSc828a3EZYocJt1XBdEuPaCqkGh6WFa9yxRxN3vs`\n3     | `tb1qtxe2hdle9he8hc2xds7yl2m8zutjksv02jf0er` | `cSGF69RZV9Q3kMRRmruArTHr21eSGZ1N1NJAFR7bx29PQLhYq22v`\n4     | `tb1qglrv8xrtf68udd5pxj2pxyq5s7lynq20h9nq2w` | `cQjQZvK1kGQBTRMs7Ei5UybGM28qWTUMUrPy41NovrvC6BbcqqK4`\n5     | `tb1qds6ygc07t7d8prjs60qnx0nv4gexx9heyx8rek` | `cRJVMp8dUK7ABt6FcxVz3kLLHr2bh4tHeYiZttGibnGSZHsERxDE`\n6     | `tb1q86udlgffezp9kgjvqlfah7a6c8dpepamm43yea` | `cW7FNz2pYQchTZHccRQkYZyEEAFB2VyxRBuuwnNGkNoa75jzrRLz`\n7     | `tb1q503m8pxyvf7ypurcvwv2kp0ajyjumsjqk55n3f` | `cTX4ewf6JzypdZ4ipLKV4dBCBjyTdHwQ7bgNZDYXduG889te2CoM`\n8     | `tb1qg805w4uhsz3sy9stasdx2rkwp4haf446m8ker9` | `cTZX79TBoyzkGjMRAN7AfzUURD7iCjBw6ZPYxHVW4vMSeX8rHyhN`\n9     | `tb1qy2f6mkfa3aaecqz2s2xr0utf6edza7qz4h37y6` | `cTpLEpKdrSKsrRjKguU2PKxbKNKPuTvTvFAYGi9X1AMzsoKwiDaH`\n\n### Bitcoin Testnet: Taproot / P2TR / BIP86\n\n```\nm/86'/1'/0'\n\ntprv8fS6YLYKZhcFQovUKifZpMGn4oGmtS9sNoL4jokEMEYsJWQyZ2s6hTfd1amgKc7PVHdyfkdRgJL7S2DnRtrKczyUq6ZPXWqg5RmFKC51jzh\ntpubDC88gkaZi5HvJGxGDNLADkvtdpni3mLmx6vr2KnXmWMG8zfkBRggsxHVBkUpgcwPe2KKpkyvTJCdXHb1UHEWE64vczyyPQfHr1skBcsRedN\n\ntr([5c9e228d/86'/1'/0']tpubDC88gkaZi5HvJGxGDNLADkvtdpni3mLmx6vr2KnXmWMG8zfkBRggsxHVBkUpgcwPe2KKpkyvTJCdXHb1UHEWE64vczyyPQfHr1skBcsRedN/0/*)#4rqwxvej\ntr([5c9e228d/86'/1'/0']tpubDC88gkaZi5HvJGxGDNLADkvtdpni3mLmx6vr2KnXmWMG8zfkBRggsxHVBkUpgcwPe2KKpkyvTJCdXHb1UHEWE64vczyyPQfHr1skBcsRedN/1/*)#yh90mef2\n\ntr([5c9e228d/86'/1'/0']tpubDC88gkaZi5HvJGxGDNLADkvtdpni3mLmx6vr2KnXmWMG8zfkBRggsxHVBkUpgcwPe2KKpkyvTJCdXHb1UHEWE64vczyyPQfHr1skBcsRedN/<0;1>/*)#rlla6vx8\n```\n\n[link to tbtc1.trezor.io](https://tbtc1.trezor.io/xpub/tr(tpubDC88gkaZi5HvJGxGDNLADkvtdpni3mLmx6vr2KnXmWMG8zfkBRggsxHVBkUpgcwPe2KKpkyvTJCdXHb1UHEWE64vczyyPQfHr1skBcsRedN))\n\n#### Addresses\n\nindex | address                                                          | private key\n------|------------------------------------------------------------------|------------\n0     | `tb1pswrqtykue8r89t9u4rprjs0gt4qzkdfuursfnvqaa3f2yql07zmq8s8a5u` | TBD\n1     | `tb1p8tvmvsvhsee73rhym86wt435qrqm92psfsyhy6a3n5gw455znnpqm8wald` | TBD\n2     | `tb1p537ddhyuydg5c2v75xxmn6ac64yz4xns2x0gpdcwj5vzzzgrywlqlqwk43` | TBD\n3     | `tb1pdsepw2hky9etm9d3yfumyq9g25xwys6d0jysstaaymgc6nheggasgamqts` | TBD\n4     | `tb1p7dh7sgd570satc42lfsverp00x97gg7u2xu539ea4xt2mwh2p70q48dg3r` | TBD\n5     | `tb1puyst6yj0x3w5z253k5xt0crk2zjy36g0fzhascd4wknxfwv9h9lszyhefk` | TBD\n6     | `tb1pz9mehv82d3ujcw3zhqfn2pvlfu6ayzcm936tv9vu32ca0dsymlxs8nhr3m` | TBD\n7     | `tb1ppq3xlfze03f0wzp8unyyz4le2fkpx62urz4wppnaty25c2adwljquymj9d` | TBD\n8     | `tb1pxveqzq6hgy0dwdehtlhplgrtvu7t83hfr9gkhaxxtjucmwefr2psc49t6a` | TBD\n9     | `tb1pwfygp66acq6c3uyuqtjcmmkaahfw543elpyrtfav8dkpv7uy3sxqvkv0j9` | TBD\n\n## References\n\n- [BIP-0032: Hierarchical Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n- [BIP-0039: Mnemonic code for generating deterministic keys](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki)\n- [BIP-0044: Multi-Account Hierarchy for Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki)\n- [BIP-0049: Derivation scheme for P2WPKH-nested-in-P2SH based accounts](https://github.com/bitcoin/bips/blob/master/bip-0049.mediawiki)\n- [BIP-0084: Derivation scheme for P2WPKH based accounts](https://github.com/bitcoin/bips/blob/master/bip-0084.mediawiki)\n- [BIP-0086: Key Derivation for Single Key P2TR Outputs](https://github.com/bitcoin/bips/blob/master/bip-0086.mediawiki)\n"
        },
        {
          "name": "slip-0014",
          "type": "tree",
          "content": null
        },
        {
          "name": "slip-0015.md",
          "type": "blob",
          "size": 8.07421875,
          "content": "# SLIP-0015 : Format for Bitcoin metadata and its encryption in HD wallets\n\n```\nNumber:  SLIP-0015\nTitle:   Format for Bitcoin metadata and its encryption in HD wallets\nType:    Standard\nStatus:  Final\nAuthors: Karel Bilek <kb@karelbilek.com>\nCreated: 2015-01-12\n```\n\n## Abstract\n\nSLIP-0015 describes a format to save Bitcoin transaction metadata (labels to accounts, transactions)\nin a secure way, with regard to HD wallets, especially (but not limited to) hardware HD wallets.\n\n## Goals\n\nIn myTREZOR web wallet, we need to save additional metadata, such as account labels or transaction labels.\nWe had several goals:\n\n1. data should be safely saved on a untrustworthy cloud service (such as Dropbox)\n2. usage should be effortless with secure hardware wallet\n3. we should allow other applications to use the files, even when they don't support hardware wallets in general\n\nBecause we want effortless usage, we want users to be able to add metadata even when they don't have the device connected, or even when they don't actually own the device.\n\nFor this reason, we don't want to sign the changes on the secure device and we want to encrypt everything\non an unsecure device, with the key in memory.\nThis has the unfortunate consequence of attacker being able to both read and edit metadata if he attacks\nthe unsecure device.\n\nHowever, we want at least prevent the cloud storage operator to be able to read the metadata. We want to hide\nthe metadata itself from the cloud storage operator, and even the XPUBs of the accounts for deniability.\n\n## General design\n\nWe first derive a *master key* from hardware device itself, which is shared for all accounts on the device.\n\nWe then derive *account key* for every account. This key is a string -- because of the stated goal 3., we want to be able to import it into third party applications without HD wallets.\n\nFrom the account key, we derive both a filename and a symmetric encryption key. We then save the metadata to the given file, in an encrypted JSON.\n\n## Design details\n\n### Deriving master key\n\nWe first get the master key by sending CipherKeyValue to hardware device with following parameters\n\n* path: `m/10015'/0'` (hardened path, see BIP32)\n* key: `Enable labeling?`\n* value: `fedcba98765432100123456789abcdeffedcba98765432100123456789abcdef` (byte sequence, here in hexadecimal)\n* encrypt: true\n* ask_on_encrypt, ask_on_decrypt: true\n* iv: unset\n\nCipherKeyValue is defined in [SLIP-0011](slip-0011.md).\n\nThe master key should be 32 bytes (256 bits) long. It is treated as a pseudo-random byte sequence.\n\n### Deriving account key\n\nFrom the master key, we derive the account key for every account in the following way:\n\nFirst, we use the HMAC function:\n\n`HMAC-SHA256(master key, xpub)`\n\nwhere\n\n* master key is a byte sequence, as defined in the previous section\n* xpub is a string, as defined in BIP32. For example:\n\n`xpub6BiVtCpG9fQPxnPmHXG8PhtzQdWC2Su4qWu6XW9tpWFYhxydCLJGrWBJZ5H6qTAHdPQ7pQhtpjiYZVZARo14qHiay2fvrX996oEP42u8wZy`\n\nThen, the result is converted to string using Base58Check encoding, as used in Bitcoin.\n\nThe API key is either 49 or 50 characters long.\n\n### Deriving filename and password from account key\n\nWe take the account key, *as a string*, and we use HMAC function to derive filename and password for metadata file. Every account has its own metadata file.\n\n* First, we use the HMAC function `HMAC-SHA512(API key, constant)`, where\n\n  * API key is a string (in base58c) from the previous section.\n\n    The API key is taken as a string, so third-party applications can use their own API keys.\n\n  * constant is `0123456789abcdeffedcba9876543210` (byte sequence, here in hexadecimal).\n\n* The result is 64 bytes/512 bits.\n\n  * The first half is used to derive the filename.\n\n    The bytes are converted to hexadecimal, which is the used as a filename, with the extension \".mtdt\".\n\n    We are using hexadecimal instead of base64/base58 because of the ambiguity on case-insensitive filesystems.\n\n  * The second half is used as a key for further encryption, as a byte sequence.\n\n* We are using `AES-256-GCM` algorithm for encryption.\n\n  * Random 12 bytes are generated as a IV\n  * GCM is used with the full 128-bit tag\n\n* The resulting file looks like this:\n\n  * first 12 bytes of the file are the random IV\n  * the next 16 bytes are the GCM authentication tag\n  * the rest is the ciphertext\n\n### Data format\n\nThe (decrypted) metadata are in following format:\n\nThe file is a serialized JSON object with the following keys:\n\n* `version`: version of metadata format, for future backwards compatibility. The version is currently `1.0.0`.\n* `accountLabel`: label for the account, a string\n* `outputLabels`: labels for outputs, described further\n* `addressLabels`: labels for addresses, described further\n\n`outputLabels` has transaction hashes for keys, and for values it has object with output indexes for keys and output labels, as strings, for values. Output indexes start at 0.\n\n`addressLabels` has addresses (in traditional Base58Check encoding) for keys and their labels for values. Only receiving addresses are saved in this object.\n\nAll labels can have any unicode letters. Empty string is treated in the software as having no label.\n\nAn example object looks like this:\n\n```javascript\n{\n  \"version\": \"1.0.0\",\n  \"accountLabel\": \"Saving account\", // one file per account, so only 1 label needed\n  \"addressLabels\": {\n    \"1JAd7XCBzGudGpJQSDSfpmJhiygtLQWaGL\": \"My receiving address\",\n    \"1GWFxtwWmNVqotUPXLcKVL2mUKpshuJYo\": \"\"  // equivalent to no label set or null\n  },\n  \"outputLabels\": {\n    \"350eebc1012ce2339b71b5fca317a0d174abc3a633684bc65a71845deb596539\": {\n      \"0\": \"Money to Adam\",\n      \"1\": \"\"  // equivalent to no label set\n    },\n    \"ebbd138134e2c8acfee4fd4edb6f7f9175ee7b4020bcc82aba9a13ce06fae85b\": {\n      \"0\": \"Feeding bitcoin eater\"\n    }\n  }\n}\n```\n\n(comments are of course not part of a valid JSON and are included here only for clarity)\n\n## Example\n\nAll the example code is in Python2.\n\n### Deriving \"master\" key\n\nExample code, deriving a master key from a connected TREZOR is in [1_masterkey.py](slip-0015/1_masterkey.py). It requires [python-trezor](https://github.com/trezor/python-trezor) installed and TREZOR connencted\n\nFor the \"stress test\" wallet, defined in SLIP-0014, the master key should be (in hex):\n\n```\n20c8bf0701213cdcf4c2f56fd0096c1772322d42fb9c4d0ddf6bb122d713d2f3\n```\n\n### Deriving \"account\" key\n\nExample code, deriving an account key for master key, is in [2_accountkey.py](slip-0015/2_accountkey.py). First argument of the script is xpub of the account, the second argument is the master key from previous step (in hexadecimal).\n\nFor the \"stress test\" wallet, defined in SLIP-0014, and its first account (with the xpub `xpub6BiVtCp...`), the key should be:\n\n```\nv5kCxSKLTsnwmgPBeaRyFDWeG9zXouF34L72763zjLrS4LWy8\n```\n\n### Deriving filename, decoding\n\nExample code for decryption is in [3_decrypt.py](slip-0015/3_decrypt.py). First and only argument is the account key from previous step. The file has to be in a current working directory (in myTREZOR, we use `~/Dropbox/Apps/TREZOR/` for saving the files).\n\nWith the key `v5kCxSKLTsnwmgPBeaRyFDWeG9zXouF34L72763zjLrS4LWy8`, filename `08108c3a46882bb71a5df59f4962e02f89a63efb1cf5f32ded94694528be6cec.mtdt` and the data (in hex)\n\n```\nd32a5831b74ba04cdf44309fbb96a1b464fe5d4a27d1e753c30602ba1947\n3cca7d8734e8b9442dbd41d530c42e03fea59a5d38b21392f3e4a135eb07\n009d5a8b9996055b7aff076918c4ed63ee49db56c5a6b069cac7f221f704\n5af7197cdbb562ba004d7a6f06eb7cffd1dfb177fd652e66c2d05d944b58\n85d6a104853a0d07e4cebff3513a2f6a1c8ff6f4f98ce222f3d601f1c796\nd070b7523649e10242dfe78cb2db50e826dd18b1f65213f5c0748577ecc9\n7b8e13ab9cd0c5fe7b76635717c64ad352064a3321df6bbfa2db8ef8c692\n55ef9d8a8dfbce9c6ad3029bbdcf1b2bb04795fd96aa95d27e6ca1ed2658\nbfb108b44dac2159184d6e3cabe341e2ec5d83756aeb8c408e92fe6ca3e6\n3d4c0d644aa2648341506324574d205934c65f54979b1d684f7a2442e8d5\n2149ed67449019e6091aa182afcaf5aa1fa8bf3114ee7b46e47b4c6648d1\nd1355cefd10081be6e8c7bdf1b2ff14d8896b1ede811fa1aa2c024a6ebf3\n6baf0a8d6afa2975bf551e8bc3f03117b42dc4cbe2a6bd700f2fda40c78a\n48627ebc130286ba98\n```\n\nwe should get to file, similar to the one described above.\n\nSimilarly, in [4_encrypt.py](slip-0015/4_encrypt.py) there is an example code for encrypting.\n"
        },
        {
          "name": "slip-0015",
          "type": "tree",
          "content": null
        },
        {
          "name": "slip-0016.md",
          "type": "blob",
          "size": 6.7626953125,
          "content": "# SLIP-0016 : Format for password storage and its encryption\n\n```\nNumber:  SLIP-0016\nTitle:   Format for password storage and its encryption\nType:    Standard\nStatus:  Final\nAuthors: Peter Jensen <peteritsjustadream@gmail.com>\nCreated: 2016-18-02\n```\n\n## Abstract\n\nSLIP-0016 describes simple encryption concept for hardware device for secure storage of passwords.\n\n## General design\n\nAt first, we derive a master key from HW device itself, which is divided in two parts.\nFirst part is hashed and used as a name of storage file.\nSecond part is used for primary storage encryption.\n\nStorage file is encrypted JSON object, which contains configuration, tags and separate entries. Each entry has other two encrypted properties derivated from  device to provide higher level of security with low risk of leaks.\n\n## Design details\n\n### Deriving master key\n\nWe derive masterKey from hardware device by sending cipherKeyValue with following params:\n\n* path: `m/10016'/0` (hardened path, see BIP32)\n* ENC_KEY: `'Unlock encrypted storage?'` (max length message is 256 bytes)\n* ENC_VALUE: `'2d650551248d792eabf628f451200d7f51cb63e46aadcbb1038aacb05e8c8aee2d650551248d792eabf628f451200d7f51cb63e46aadcbb1038aacb05e8c8aee'` (in hexadecimal (128 /2), max length is 1024 bytes)\n* encrypt: `true`\n* ask_on_encrypt: `true`\n* ask_on_decrypt: `true`\n* iv: unset\n\nJS EXAMPLE:\n\n```javascript\nsession.cipherKeyValue(\n[(10016 | 0x80000000) >>> 0, 0],\n'Unlock encrypted storage?',\n'2d650551248d792eabf628f451200d7f51cb63e46aadcbb1038aacb05e8c8aee2d650551248d792eabf628f451200d7f51cb63e46aadcbb1038aacb05e8c8aee',\ntrue, true, true)\n```\n\nCipherKeyValue is defined in [SLIP-0011](slip-0011.md).\n\n### Deriving file name\n\nFrom the first half of master key, we derive the file name for every user/device in the following way:\nFirst, we use the HMAC function:\n\n`HMAC-SHA256(fileKey, FILENAME_MESS)`\n\nwhere:\n\n* fileKey is the first half of masterKey (`masterKey.substring(0, masterKey.length / 2)`)\n* FILENAME_MESS is a constant string `'5f91add3fa1c3c76e90c90a3bd0999e2bd7833d06a483fe884ee60397aca277a'`\n\nThe output result is digested to HEX string. After, we append extension `'.pswd'`\n\nEXAMPLE RESULT: `a80387a2222f4360f71fd2165368c6ed91b26287d9bc1ce8be71e64e6b216a4f.pswd`\n\n### Deriving encryption key and file level encryption\n\nAs an encryption key is used the SECOND half (32 bytes) of master key for the first level of data file encryption. Encryption key is in HEX string.\n\nFor encrypt/decrypt we are using `AES-256-GCM` algorithm.\n\n* Input Vector (IV) is 12 randomly generated bytes\n* GCM is used with full 128-bit autentication tag (authTag)\n\n[more info](https://nodejs.org/api/crypto.html#crypto_crypto_createcipheriv_algorithm_key_iv)\n\nThe result output stored in file is:\n\n* first 12 bytes of the file is randomly generated IV\n* next 16 bytes is the GCM authTag\n* the rest is output ciphertext\n\n[more info](https://nodejs.org/api/crypto.html#crypto_crypto_createdecipheriv_algorithm_key_iv)\n\n### Data format\n\n(Decrypted) data file is serialized JSON object with the following keys:\n\n* `version`: for future backwards compatibility and data storage manipulation\n* `config`: for remembering personal setup of application\n* `tags`: contain set of labels with their icons (from icomoon set). Default tag is **All** and it is only tag, unable to edit or delete.\n\n```javascript\n{title:\"My social networks\", icon:\"person\", active:\"active\"}\n```\n\n* `entries`: is object of all password entries encrypted second time\n\n```javascript\n{\n    \"title\": \"http://wwww.github.com\",\n    \"username\": \"Satoshi Nakamoto\",\n    \"nonce\": \"8688105887642a3cbb61889d8762432ef864df107e097d2b19e93c8d808c2e21\",\n    \"note\": \"public note\",\n    \"password\": {},\n    \"safe_note\": {},\n    \"tags\": [1]\n}\n```\n\n### Entry level encryption\n\nEvery entry contains keys from upper example.\n\n* `title`: title is represented as string. If given string is matching URL, it will be shown on device as domain without protocol prefix.\n* `username`: string, will be passed to device, in encryption/decryption process\n* `nonce`: hidden generated string which is output of cipherKeyValue over Title + Username key and random values\n* `password`: is buffer array output of plain string and nonce (encryption process described later)\n* `safe_note`: is also buffer array output of plain string and nonce (also described later)\n* `note`: is plain UTF8 string\n* `tags`: is array of Tags key values\n\nStep by step entry encryption:\n\n1. Generate random 32 bytes buffer and convert to HEX string inadequately called `nonce`\n2. Set key as `'Unlock ' + title + ' for user ' + username + '?'`\n3. Ask device for `cipherKeyValue`, where path is the same as in the deriving file name, key is described in second step and enc_value is our `nonce` from the first step. Do not forget to setup properly other three bool values!\n\nEXAMPLE:\n\n```javascript\nsession.cipherKeyValue(\n[(10016 | 0x80000000) >>> 0, 0], // same path\n'Unlock github.com for user Satoshi Nakamoto?',\n'2d650551248d792eabf628f451200d7f51cb63e46aadcbb1038aacb05e8c8aee2d650551248d792eabf628f451200d7f51cb63e46aadcbb1038aacb05e8c8aee',\ntrue,   //encrypt? - has to be TRUE in encryption\nfalse,  //askOnEncrypt? is the same in encryption and decryption\ntrue) // askOnDecrypt? we want this because otherwise somebody could rob us!\n```\n\n4. Then we use our famous `nonce` from the first step in `AES-256-GCM` algorithm encryption for `password` string and `safe_note` string. Process of encryption is the same as in the deriving encryption key and file level encryption. So basically we get some Buffer array output with 12 bytes of IV and 16 bytes of GCM authTag and the rest is cipherText.\n5. Output of each encryption is stored to appropriate keys, just instead of generated `nonce` we store result from third step ( `cipherKeyValue`) which we later use for decryption process\n\n### Entry decryption\n\n1. We ask device for the same  `cipherKeyValue` as in encryption process, just instead of  `nonce`, we use our encrypted result and boolean value  `encrypt?` is **false**!\n\nEXAMPLE:\n\n```javascript\nsession.cipherKeyValue(\n[(10016 | 0x80000000) >>> 0, 0], // same path\n'Unlock github.com for user Satoshi Nakamoto?',\n'8688105887642a3cbb61889d8762432ef864df107e097d2b19e93c8d808c2e21',\nfalse,   //encrypt? - has to be FALSE in decryption\nfalse,  //askOnEncrypt? is the same in encryption and decryption\ntrue) // askOnDecrypt? we want this because otherwise somebody could rob us!\n```\n\n2. Other steps are the same as in entry encryption, we just symmetrically decrypt values of `password` and  `safe_note` via `AES-256-GCM` algorithm. Size of IV and authTag for AES is the same as in encryption. Beware on cipher Key data type - it must be hex. Output is in JSON.\n\nCheck example of password reader implementation in Python: [pwd_reader.py](https://github.com/trezor/python-trezor/blob/master/tools/pwd_reader.py) - there is an example code for decryption.\n"
        },
        {
          "name": "slip-0017.md",
          "type": "blob",
          "size": 2.859375,
          "content": "# SLIP-0017 : ECDH using deterministic hierarchy\n\n```\nNumber:  SLIP-0017\nTitle:   ECDH using deterministic hierarchy\nType:    Standard\nStatus:  Final\nAuthors: Roman Zeyde <roman.zeyde@gmail.com>\nCreated: 2016-05-29\n```\n\n## Abstract\n\nThis document describes a method for implementing Elliptic Curve\nDiffie-Hellman algorithm, using a determinstic hierarchy.\n\n## Motivation\n\nUsing Deterministic Hierarchy for encryption and decryption is ideal,\nbecause the same concepts of easy backup that relate to backing up\ndeterministic wallets can be applied to backing up private keys.\n\n## Service Identity\n\nLet's introduce the service identity. It consists of two elements:\n\na) RFC 3986 URI `proto://[user@]host[:port][/path]`\n\nExamples:\n\n* `https://example.com`\n* `ftp://public@example.com/pub`\n* `ssh://root@example.com:2222`\n\nb) index (32-bit unsigned integer)\n\nThe index is used so one can generate more keys corresponding to the same URI.\n\n## HD Structure\n\n1. First concatenate `index` with the URI (`uri`). Use little endian for `index`.\n\n2. Compute the SHA256 hash of the result (`hash`).\n\n3. Truncate `hash` to 128 bits (`hash128`)\n\n4. Split `hash128` into four 32-bit integers `A`, `B`, `C`, `D`. Use little endian for each.\n\n5. Set highest bits of numbers `A`, `B`, `C`, `D` to 1 (e.g. logical OR with 0x80000000) to harden\n\n6. Derive the HD node `m/17'/A'/B'/C'/D'` according to SLIP-0010.\n\n## Shared secret generation\n\nSuppose that Alice and Bob need to agree on a shared secret.\n\nFirst, they agree on a specific elliptic curve and generate\ntwo public keys: `P1 = k1*G` for Alice and `P2 = k2*G` for Bob.\n\nIn order to derive a shared secret, Alice retrieves Bob's public key (P2).\nThen, she calls `Q = GetECDHSessionKey(P2)` API on her TREZOR, to compute\n`Q = k1*P2`, by multiplying Bob's public key `P2` (as an elliptic curve point)\nby her private key `k1` (as a 256-bit scalar).\n\nThe result is the elliptic curve point `Q = k1*k2*P`, which can be computed in a\nsimilar way by Bob (since `Q = k2*P1`), is used to derive a shared secret.\n\n## Worked example\n\n1. `index + uri`=`42` + `https://nvsaberhagen@getmonero.org/login`\n\n2. `sha256(index + uri)` = `f8be2155d1323418dc94a20c74bfdb7ab418eb7b061b38729193870405dd3875`\n\n3. `hash128` = `f8be2155d1323418dc94a20c74bfdb7a`\n\n4. `A` = 1428274936 (0x5521bef8), `B` = 406074065 (0x0x183432d1), `C` = 211981532 (0x0ca294dc), `D` = 2061221748 (0x7adbbf74)\n\n5. `A'` = 3575758584, `B'` = 2553557713, `C'` = 2359465180, `D'` = 4208705396\n\n6. `HD node path` = `m/2147483665/3575758584/2553557713/2359465180/4208705396`\n\n## References\n\n* [BIP-0043: Purpose Field for Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki)\n* [RFC 3986: Uniform Resource Identifier (URI): Generic Syntax](https://tools.ietf.org/html/rfc3986)\n* [SLIP-0010: Universal private key derivation from master private key](https://github.com/satoshilabs/slips/blob/master/slip-0010.md)\n"
        },
        {
          "name": "slip-0019.md",
          "type": "blob",
          "size": 25.431640625,
          "content": "# SLIP-0019 : Proof of Ownership\n\n```\nNumber:  SLIP-0019\nTitle:   Proof of Ownership\nType:    Standard\nStatus:  Accepted\nAuthors: Andrew Kozlik <andrew.kozlik@satoshilabs.com>\n         Stepan Snigirev <stepan@cryptoadvance.io>\n         Ondrej Vejpustek <ondrej.vejpustek@satoshilabs.com>\n         Pavol Rusnak <stick@satoshilabs.com>\nCreated: 2019-04-25\n```\n\n## Abstract\n\nThis specification defines the format for a proof of ownership which can be passed to a hierarchical deterministic wallet together with each input of an unsigned transaction. This proof allows the wallet to determine whether it is able to spend the given input or not. It also allows third parties to verify that a user has the ability to spend the input.\n\n## Motivation\n\nIn certain applications like CoinJoin or opening a dual-funded channel in the Lightning Network, a wallet has to sign transactions containing external inputs. To calculate the actual amount the user is spending, the wallet needs to reliably determine for each input whether it belongs to the wallet or not. Without such a mechanism an attacker can deceive the wallet into displaying incorrect information about the amount being spent, which can result in theft of user funds. This was first recognized in a bitcoin-dev [mailing list discussion](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-August/014843.html).\n\nFor example, in a CoinJoin transaction an attacker can construct a transaction with inputs `in1` and `in2` of identical value belonging to the user and two outputs of identical value, `user_out` belonging to the user and `attacker_out` belonging to the attacker. If such a transaction is sent to a hardware wallet twice with `in1` marked as external the first time and `in2` marked as external the second time, then the hardware wallet will display two signing requests to the user with a spending amount of `in2 - user_out` and `in1 - user_out`, respectively. The user will think that they are signing two different CoinJoin transactions and spending `in1 + in2 - 2*user_out` for the fees, while in reality they are signing two different inputs to a single transaction and sending half of the amount to the attacker.\n\nTo mitigate such an attack, the hardware wallet needs to ascertain non-ownership of all inputs which are claimed to be external. In case of hierarchical deterministic wallets it is generally not feasible to ascertain this solely based on the scriptPubKey of the UTXO, because it would require searching through billions of BIP32 derivation paths.\n\nA CoinJoin coordinator can also benefit from such a proof to verify that the CoinJoin participant is able and willing to sign the input. This verification helps to mitigate denial-of-service attacks as the attacker has to use a limited UTXO set that they control and in case of misbehavior this UTXO set gets banned.\n\n## Proof of ownership format\n\nA proof of ownership consists of a proof body and a signature. The proof body contains one or more ownership identifiers which allow a wallet to efficiently determine whether or not it is able to spend a UTXO having a given scriptPubKey. The proof signature affirms that the proof body can be trusted to have been generated by the true owner of the UTXO.\n\n```\nproofOfOwnership = proofBody || proofSignature\n```\n\n### Ownership identifier\n\nLet *k* be a secret *ownership identification key* derived from the wallet's master secret using the [SLIP-0021](https://github.com/satoshilabs/slips/blob/master/slip-0021.md) method for hierarchical derivation of symmetric keys as:\n\n```\nk = Key(m/\"SLIP-0019\"/\"Ownership identification key\")\n```\n\nThe ownership identifier for a scriptPubKey is computed as:\n\n```\nid = HMAC-SHA256(key = k, msg = scriptPubKey)\n```\n\nIn case of *m*-of-*n* multi-signature scriptPubKeys the proof of ownership SHOULD contain the ownership identifiers of all *n* co-owners of that scriptPubKey. See [Identifier inclusion](#identifier-inclusion) for further details.\n\nA wallet MUST NOT produce and reveal an ownership identifier for a scriptPubKey which it does not control. Such a fake ownership identifier can be used to mount a denial-of-service attack.\n\n### Proof body\n\nThe *proofBody* is a concatenation of the following fields:\n\n* *versionMagic* (4 bytes): b\"\\x53\\x4c\\x00\\x19\" (this is \"SL\" followed by 0019 in compressed numeric form as an abbreviation for \"SLIP-0019\").\n* *flags* (1 byte, bit 0 is the least significant bit):\n  * Bit 0: User confirmation\n    * 0 means the proof was generated without user confirmation.\n    * 1 means the user confirmed the generation of the proof.\n  * Bits 1 to 7: Reserved for future use (all must be 0).\n* *n* (VarInt): the number of ownership identifiers which follow. The VarInt MUST be encoded in the fewest possible number of bytes.\n* *id*<sub>1</sub> || *id*<sub>2</sub> || ... || *id*<sub>*n*</sub> (32 bytes each): concatenation of the ownership identifiers for the given scriptPubKey, one for each co-owner, see [Identifier inclusion](#identifier-inclusion) for further details.\n\n### Proof footer\n\nThe *proofFooter* is a concatenation of the following fields:\n\n* *scriptPubKey* (length-prefixed string).\n* *commitmentData* (length-prefixed string), any additional data to which the proof should commit, see below.\n\nThe proof footer is included only in the *sighash* computation. It is not part of the proof of ownership, because the verifier of the proof should obtain these fields externally based on the context in which the proof is provided. Namely the *scriptPubKey* should be obtained by looking up the output being spent and the *commitmentData* is given by the application context. Variable-length fields are encoded the same way as in Bitcoin transactions, as a length-prefixed string, where the length is encoded as a variable-length integer (VarInt).\n\n### Proof signature\n\nThe concatenation of the *proofBody* and *proofFooter* is signed using the Generic Signed Message Format as defined in the [original BIP-0322](https://github.com/bitcoin/bips/blob/f9e95849f337358cd89c83b948fbede3875481c3/bip-0322.mediawiki) until October 2020, when the BIP-0322 specification was rewritten to use the transaction-based approach.\nThe *proofSignature* is the `SignatureProof` container defined in the original BIP-0322 using the sighash computed as:\n\n```\nsighash = SHA-256(proofBody || proofFooter)\n```\n\n### Additional commitment data\n\nThe content of the *commitmentData* field is application-specific. If an application does not define the content of this field, then a zero-length string should be used by default.\n\nIn case of CoinJoin transactions the *commitmentData* SHOULD contain a globally unique PSBT identifier (*psbtId*). The purpose of such an identifier is to prevent an attacker from causing denial of service by registering an input into a different CoinJoin transaction than the one for which the input was intended. The user should explicitly confirm the generation of the proof and the *commitmentData* value to affirm their intent to participate in the given CoinJoin transaction.\n\nThe *psbtId* is not to be confused with TXID, which is the hash of a transaction's data. Since the *psbtId* needs to be known before the transaction is created, it cannot be derived from the transaction data but needs to be generated as a nonce. For example:\n\n1. The concatenation of a globally unique CoinJoin server identifier (192 bits) with a sequential round identifier (64 bits).\n2. A random 256 bit value.\n\n## Proof construction\n\n### Single-signature scriptPubKeys\n\nWhen constructing a proof of ownership for a single-signature scriptPubKey the inputs to the wallet are the *flags*, *scriptPubKey*, *commitmentData* and the BIP32 derivation path. The wallet takes the following steps:\n\n1. Ensure that bits 1 through 7 of *flags* are clear.\n2. Ensure that the wallet controls the private key to the provided *scriptPubKey*. This is typically done by using the provided BIP32 derivation path.\n3. If bit 0 (user confirmation) of *flags* is set, then prompt the user to confirm generation of the ownership proof with the given *commitmentData*. If the user does not confirm, then abort.\n4. Compute the ownership identifier for the scriptPubKey.\n5. Compile the *proofBody* and *proofFooter*, and generate the *proofSignature*.\n6. Return the *proofBody* and *proofSignature*.\n\n### Multi-signature scriptPubKeys\n\nThe construction of a proof of ownership for a *m*-of-*n* multi-signature scriptPubKey requires a signing coordinator, i.e. a watch-only software wallet. The signing coordinator is assumed to have obtained the ownership identifiers of all *n* co-owners in advance. These ownership identifiers should generally be produced at the time of the creation of the multi-signature address.\n\nWhen constructing a proof of ownership, the signing coordinator prepares the *proofBody* and *proofFooter* and sends these to each signer together with any other required metadata, such as the BIP32 derivation path for the input. Each of the *m* signers then takes the following steps:\n\n1. Parse the *proofBody* and *proofFooter*. If *versionMagic* is not recognized or if any of the bits 1 through 7 of *flags* is set, then abort.\n2. Derive the ownership identifier using the *scriptPubKey* provided in the *proofFooter*.\n3. If the derived ownership identifier is not listed in the *proofBody*, then abort.\n4. If bit 0 (user confirmation) of *flags* is set, then prompt the user to confirm generation of the ownership proof with the given *commitmentData*. If the user does not confirm, then abort.\n5. Return the signature for the provided *proofBody* and *proofFooter*.\n\nThe signing coordinator collects all the signatures and combines them into a `SignatureProof` container to finalize the proof.\n\n## Proof usage\n\n### Verifying non-ownership of transaction inputs\n\nWhen a wallet is requested to sign a transaction, each external input SHOULD be accompanied with a proof of ownership so that the wallet may ascertain non-ownership of such an input in order to correctly inform the user about the amount they are spending in the transaction. For each external input the wallet takes the following steps:\n\n1. By reliable means obtain the scriptPubKey of the UTXO being spent by that input. Prior to SegWit version 1 witness programs this step involves acquiring the full transaction being spent and verifying its hash against that which is given in the outpoint.\n2. Parse the *proofBody*. If *versionMagic* is not recognized or if any of the bits 1 through 7 of *flags* is set, then abort.\n3. Verify that the *proofSignature* is valid in accordance with BIP-0322 using the obtained scriptPubKey and the sighash as defined in the [Proof signature](#proof-signature) section.\n4. Derive the ownership identifier using the wallet's ownership identification key and the obtained scriptPubKey.\n5. Verify that the derived ownership identifier is not included in the *proofBody*.\n\n### Verifying ability and intent to sign an input\n\nEach input which is registered to take part in a CoinJoin transaction should be accompanied with a proof of ownership which affirms the owner's intent to take part, so as to mitigate denial-of-service attacks. The CoinJoin coordinator takes the following steps before registering an input:\n\n1. By reliable means obtain the scriptPubKey of the UTXO being spent by that input.\n2. Parse the *proofBody*. If *versionMagic* is not recognized or if any of the bits 1 through 7 of *flags* is set, then abort.\n3. Verify that bit 0 (user confirmation) of *flags* is set.\n4. Verify that the *proofSignature* is valid using the obtained scriptPubKey.\n\nA proof of ownership commits to a particular scriptPubKey, which means that the proof is replayable for UTXOs with the same address. Nevertheless, freshness of such a proof is guaranteed if a nonce (such as the *psbtId*) is included in the *commitmentData*.\n\n## PSBT extension\n\nThis section proposes additional fields for [BIP-0174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) PSBTv0 and [BIP-0370](https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki) PSBTv2 that allow for SLIP-0019 proofs of ownership to be included in a PSBT of any version.\n\nThe following new global type is defined:\nName | `<keytype>` | `<keydata>` | `<keydata>` Description | `<valuedata>` | `<valuedata>` Description | Versions Requiring Inclusion | Versions Requiring Exclusion | Versions Allowing Inclusion\n-----|-------------|-------------|-------------------------|---------------|---------------------------|------------------------------|------------------------------|----------------------------\nProof-of-ownership commitment data | `PSBT_GLOBAL_OWNERSHIP_COMMITMENT = 0x07` | None | No key data | `<bytes commitmentData>` | The value used as the *commitmentData* in each input's proof-of-ownership. | | | 0, 2\n\nThe following new per-input type is defined:\nName | `<keytype>` | `<keydata>` | `<keydata>` Description | `<valuedata>` | `<valuedata>` Description | Versions Requiring Inclusion | Versions Requiring Exclusion | Versions Allowing Inclusion\n-----|-------------|-------------|-------------------------|---------------|---------------------------|------------------------------|------------------------------|----------------------------\nProof-of-ownership | `PSBT_IN_OWNERSHIP_PROOF = 0x19` | None | No key data | `<bytes proofOfOwnership>` | A *proofOfOwnership* for this input, as defined above, allowing a wallet to determine whether it is able to spend this input or not. | | | 0, 2\n\n## Implementation considerations\n\n### Script evaluation on hardware wallets\n\nCurrently most hardware wallets do not support complete Bitcoin script verification, so initial deployment of proofs of ownership can be limited to a set of known scripts. In the future hardware wallets may implement [miniscript](http://bitcoin.sipa.be/miniscript/) verification, that will cover most of the use-cases known today.\n\n### Identifier inclusion\n\nWhen generating a proof of ownership for *m*-of-*n* multi-signature scriptPubKeys the proof body SHOULD contain the ownership identifiers of all *n* co-owners of that scriptPubKey. Failing to include all ownership identifiers opens the door to the following attack.\n\nFor simplicity consider two equal-valued UTXOs *A* and *B*, both of which have the same 1-of-2 multi-signature scriptPubKey controlled by Users 1 and 2. The attacker requests a proof of ownership *P1* from User 1 containing only User 1's ownership identifier. Similarly the attacker requests a proof of ownership *P2* from User 2 containing only User 2's ownership identifier. The attacker then creates a CoinJoin transaction with inputs *A* and *B* and equal-valued outputs *out_user* and *out_attacker*, the former of which is a multi-signature scriptPubKey controlled by Users 1 and 2. User 1 is given the transaction to sign with proof *P2* for the input spending *B*, and User 2 is given the same transaction to sign with proof *P1* for the input spending *A*. User 1 perceives *B* as foreign, assumes they are transferring *A* to *out_user* and signs the input spending *A*. User 2 perceives *A* as foreign, assumes they are transferring *B* to *out_user* and signs the input spending *B*. As a result half of the amount from *A* and *B* is transferred to the attacker. This attack is extendable to more complex *m*-of-*n* multi-signatures.\n\nIn some cases there are legitimate reasons not to include the ownership identifier of a co-owner:\n\n1. The excluded co-owner does not support any kind of proof of ownership format and will never take part in a transaction containing external inputs. An example of this would be a cryptocurrency custody service which is included in the multi-signature setup only as a backup in case the key of one of the co-owners is lost.\n2. A co-owner is intentionally excluded to avoid signing failures due to input ownership collisions. Consider a user who is participating in a CoinJoin transaction with their UTXO *A*. At the same time this user happens to be a co-owner of another UTXO *B* being spent as an input in the same transaction. The user is not meant to be cosigning *B*, because this input was registered independently by a group of co-owners who did not expect the user to participate. Thus the user's wallet will recognize *B* as an input it co-owns, but it will not be able to sign because it was not given the corresponding BIP32 derivation path. Even if the path were to be provided, the user might not be willing to cosign due to confusion at the unexpected presence of the input amount supplied by *B*. As a result the CoinJoin transaction will fail to complete. Before excluding an ownership identifier on these grounds, the likelihood of this kind of scenario needs to be carefully weighed against the risk of the attack described above.\n\n## Test vectors\n\n### Test vector 1 (P2WPKH)\n\n#### Input parameters\n\nParameter              | Value\n-----------------------|------\nBIP39 seed             | \"all all all all all all all all all all all all\"\nPassphrase             | \"\"\nOwnership ID key (hex) | `0a115a171e30f8a740bae6c4144bec5dc1099ffa79b83dfb8aa3501d094de585`\nPath                   | m/84'/0'/0'/1/0\n*scriptPubKey* (hex)   | `0014b2f771c370ccf219cd3059cda92bdf7f00cf2103`\nUser confirmation      | False\n*commitmentData*       | \"\"\n*sighash*  (hex)       | `850dd556283b49d80fa5501035b4775e62f0c80bf36f62d1adf2f2f9f108c884`\n\n#### Proof of ownership (hex)\n\n`534c00190001a122407efc198211c81af4450f40b235d54775efd934d16b9e31c6ce9bad57070002483045022100c0dc28bb563fc5fea76cacff75dba9cb4122412faae01937cdebccfb065f9a7002202e980bfbd8a434a7fc4cd2ca49da476ce98ca097437f8159b1a386b41fcdfac50121032ef68318c8f6aaa0adec0199c69901f0db7d3485eb38d9ad235221dc3d61154b`\n\nSplit into components:\n\nName               | Value\n-------------------|------\n*versionMagic*     | `534c0019`\n*flags*            | `00`\n*n*                | `01`\n*id*               | `a122407efc198211c81af4450f40b235d54775efd934d16b9e31c6ce9bad5707`\n*scriptSig* length | `00`\n*scriptSig*        | (empty)\n*witness*          | `02483045022100c0dc28bb563fc5fea76cacff75dba9cb4122412faae01937cd`<br>`ebccfb065f9a7002202e980bfbd8a434a7fc4cd2ca49da476ce98ca097437f81`<br>`59b1a386b41fcdfac50121032ef68318c8f6aaa0adec0199c69901f0db7d3485`<br>`eb38d9ad235221dc3d61154b`\n\n### Test vector 2 (P2WPKH nested in BIP16 P2SH)\n\n#### Input parameters\n\nParameter              | Value\n-----------------------|------\nBIP39 seed             | \"all all all all all all all all all all all all\"\nPassphrase             | \"\"\nOwnership ID key (hex) | `0a115a171e30f8a740bae6c4144bec5dc1099ffa79b83dfb8aa3501d094de585`\nPath                   | m/49'/0'/0'/1/0\n*scriptPubKey* (hex)   | `a914b9ddc52a7d95ad46d474bfc7186d0150e15a499187`\nUser confirmation      | True\n*commitmentData*       | \"TREZOR\"\n*sighash*  (hex)       | `709fa3a60709cecefbd7aaaf551ff23421d65d1c046e6a9390abf73cbcd2fc83`\n\n#### Proof of ownership (hex)\n\n`534c0019010192caf0b8daf78f1d388dbbceaec34bd2dabc31b217e32343663667f6694a3f4617160014e0cffbee1925a411844f44c3b8d81365ab51d0360247304402207f1003c59661ddf564af2e10d19ad8d6a1a47ad30e7052197d95fd65d186a67802205f0a804509980fec1b063554aadd8fb871d7c9fe934087cba2da09cbeff8531c012103a961687895a78da9aef98eed8e1f2a3e91cfb69d2f3cf11cbd0bb1773d951928`\n\nSplit into components:\n\nName               | Value\n-------------------|------\n*versionMagic*     | `534c0019`\n*flags*            | `01`\n*n*                | `01`\n*id*               | `92caf0b8daf78f1d388dbbceaec34bd2dabc31b217e32343663667f6694a3f46`\n*scriptSig* length | `17`\n*scriptSig*        | `160014e0cffbee1925a411844f44c3b8d81365ab51d036`\n*witness*          | `0247304402207f1003c59661ddf564af2e10d19ad8d6a1a47ad30e7052197d95`<br>`fd65d186a67802205f0a804509980fec1b063554aadd8fb871d7c9fe934087cb`<br>`a2da09cbeff8531c012103a961687895a78da9aef98eed8e1f2a3e91cfb69d2f`<br>`3cf11cbd0bb1773d951928`\n\n### Test vector 3 (P2PKH)\n\n#### Input parameters\n\nParameter              | Value\n-----------------------|------\nBIP39 seed             | \"all all all all all all all all all all all all\"\nPassphrase             | \"TREZOR\"\nOwnership ID key (hex) | `2d773852e0959b3c1bac15bd3a8ad410e2c6720befb4f7f428d74bdd5d6e4f1d`\nPath                   | m/44'/0'/0'/1/0\n*scriptPubKey* (hex)   | `76a9145a4deff88ada6705ed70835bc0db56a124b9cdcd88ac`\nUser confirmation      | False\n*commitmentData*       | \"\"\n*sighash*  (hex)       | `abf12242bc87f457126373a08775fbeb67ccd5e09c4acbc1d8b310be68a3ac33`\n\n#### Proof of ownership (hex)\n\n`534c00190001ccc49ac5fede0efc80725fbda8b763d4e62a221c51cc5425076cffa7722c0bda6b483045022100e818002d0a85438a7f2140503a6aa0a6af6002fa956d0101fd3db24e776e546f0220430fd59dc1498bc96ab6e71a4829b60224828cf1fc35edc98e0973db203ca3f0012102f63159e21fbcb54221ec993def967ad2183a9c243c8bff6e7d60f4d5ed3b386500`\n\nSplit into components:\n\nName               | Value\n-------------------|------\n*versionMagic*     | `534c0019`\n*flags*            | `00`\n*n*                | `01`\n*id*               | `ccc49ac5fede0efc80725fbda8b763d4e62a221c51cc5425076cffa7722c0bda`\n*scriptSig* length | `6b`\n*scriptSig*        | `483045022100e818002d0a85438a7f2140503a6aa0a6af6002fa956d0101fd`<br>`3db24e776e546f0220430fd59dc1498bc96ab6e71a4829b60224828cf1fc35ed`<br>`c98e0973db203ca3f0012102f63159e21fbcb54221ec993def967ad2183a9c24`<br>`3c8bff6e7d60f4d5ed3b3865`\n*witness*          | `00`\n\n### Test vector 4 (P2WSH 2-of-3 multisig)\n\n#### Input parameters\n\nParameter                | Value\n-------------------------|------\nBIP39 seed 1             | \"all all all all all all all all all all all all\"\nPassphrase 1             | \"\"\nOwnership ID key 1 (hex) | `0a115a171e30f8a740bae6c4144bec5dc1099ffa79b83dfb8aa3501d094de585`\nBIP39 seed 2             | \"abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about\"\nPassphrase 2             | \"\"\nOwnership ID key 2 (hex) | `cd50559c65666fd381e823b82fff04763465062c1ff4c93d3e147a306f884130`\nBIP39 seed 3             | \"zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo wrong\"\nPassphrase 3             | \"\"\nOwnership ID key 3 (hex) | `64b3e4f003fd7dea4168dd19f85410ac3b1844abd1d7f9f3a74254a7852af725`\nPath                     | m/84'/0'/0'/1/0\n*scriptPubKey* (hex)     | `00209149b5bcaae8c876f1997ef6b60ec197475217fd3e736d4c54fcf49fe4f5213a`\nUser confirmation        | False\n*commitmentData*         | \"TREZOR\"\n*sighash*  (hex)         | `d2cca14e9ea31a5e4bb36e6e5813adf31f8744bc6da09680e3a0d69e5c8dddb1`\n\n#### Proof of ownership (hex)\n\nThe proof is signed using the first and the third key.\n\n`534c00190003309c4ffec5c228cc836b51d572c0a730dbabd39df9f01862502ac9eabcdeb94a46307177b959c48bf2eb516e0463bb651aad388c7f8f597320df7854212fa3443892f9573e08cedff9160b243759520733a980fed45b131a8bba171317ae5d940004004830450221009d8cd2d792633732b3a406ea86072e94c72c0d1ffb5ddde466993ee2142eeef502206fa9c6273ab35400ebf689028ebcf8d2031edb3326106339e92d499652dc43030147304402205fae1218bc4600ad6c28b6093e8f3757603681b024e60f1d92fca579bfce210b022011d6f1c6ef1c7f7601f635ed237dafc774386dd9f4be0aef85e3af3f095d8a9201695221032ef68318c8f6aaa0adec0199c69901f0db7d3485eb38d9ad235221dc3d61154b2103025324888e429ab8e3dbaf1f7802648b9cd01e9b418485c5fa4c1b9b5700e1a621033057150eb57e2b21d69866747f3d377e928f864fa88ecc5ddb1c0e501cce3f8153ae`\n\nSplit into components:\n\nName               | Value\n-------------------|------\n*versionMagic*     | `534c0019`\n*flags*            | `00`\n*n*                | `03`\n*id*<sub>1</sub>   | `309c4ffec5c228cc836b51d572c0a730dbabd39df9f01862502ac9eabcdeb94a`\n*id*<sub>2</sub>   | `46307177b959c48bf2eb516e0463bb651aad388c7f8f597320df7854212fa344`\n*id*<sub>3</sub>   | `3892f9573e08cedff9160b243759520733a980fed45b131a8bba171317ae5d94`\n*scriptSig* length | `00`\n*scriptSig*        | (empty)\n*witness*          | `04004830450221009d8cd2d792633732b3a406ea86072e94c72c0d1ffb5ddde4`<br>`66993ee2142eeef502206fa9c6273ab35400ebf689028ebcf8d2031edb332610`<br>`6339e92d499652dc43030147304402205fae1218bc4600ad6c28b6093e8f3757`<br>`603681b024e60f1d92fca579bfce210b022011d6f1c6ef1c7f7601f635ed237d`<br>`afc774386dd9f4be0aef85e3af3f095d8a9201695221032ef68318c8f6aaa0ad`<br>`ec0199c69901f0db7d3485eb38d9ad235221dc3d61154b2103025324888e429a`<br>`b8e3dbaf1f7802648b9cd01e9b418485c5fa4c1b9b5700e1a621033057150eb5`<br>`7e2b21d69866747f3d377e928f864fa88ecc5ddb1c0e501cce3f8153ae`\n\n### Test vector 5 (P2TR)\n\n#### Input parameters\n\nParameter              | Value\n-----------------------|------\nBIP39 seed             | \"all all all all all all all all all all all all\"\nPassphrase             | \"\"\nOwnership ID key (hex) | `0a115a171e30f8a740bae6c4144bec5dc1099ffa79b83dfb8aa3501d094de585`\nPath                   | m/86'/0'/0'/1/0\n*scriptPubKey* (hex)   | `51204102897557de0cafea0a8401ea5b59668eccb753e4b100aebe6a19609f3cc79f`\nUser confirmation      | False\n*commitmentData*       | \"\"\n*sighash* (hex)        | `331a936e0a94d8ec7a105507dbdd445d6cd6a516d53c0bfd83769bdac1950483`\n\n#### Proof of ownership (hex)\n\n`534c00190001dc18066224b9e30e306303436dc18ab881c7266c13790350a3fe415e438135ec000140647d6af883107a870417e808abe424882bd28ee04a28ba85a7e99400e1b9485075733695964c2a0fa02d4439ab80830e9566ccbd10f2597f5513eff9f03a0497`\n\nSplit into components:\n\nName               | Value\n-------------------|------\n*versionMagic*     | `534c0019`\n*flags*            | `00`\n*n*                | `01`\n*id*               | `dc18066224b9e30e306303436dc18ab881c7266c13790350a3fe415e438135ec`\n*scriptSig* length | `00`\n*scriptSig*        | (empty)\n*witness*          | `0140647d6af883107a870417e808abe424882bd28ee04a28ba85a7e99400e1b9`<br>`485075733695964c2a0fa02d4439ab80830e9566ccbd10f2597f5513eff9f03a`<br>`0497`\n\n## References\n\n* [bitcoin-dev](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-August/014843.html): Original mailing list thread\n* [BIP-0174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki): Partially Signed Bitcoin Transaction Format\n* [BIP-0322](https://github.com/bitcoin/bips/blob/f9e95849f337358cd89c83b948fbede3875481c3/bip-0322.mediawiki): Generic Signed Message Format from March 25th 2020\n"
        },
        {
          "name": "slip-0020.md",
          "type": "blob",
          "size": 0.5400390625,
          "content": "# SLIP-0020 : Proof of User Confirmation\n\n```\nNumber:  SLIP-0020\nTitle:   Proof of User Confirmation\nType:    Standard\nStatus:  Draft\nAuthors: TBD\nCreated: 2019-04-25\n```\n\n## Abstract\n\nThis is a section for an abstract.\n\n## Motivation\n\nThis is a section for a motivation.\n\n## Body\n\nThis is a section for a body. The title of the section should be changed\nand the section can be split into multiple sections and subsections.\n\n## References\n\nThis is a section for references such as links to other documents (BIP or SLIP)\nor to reference implementations.\n"
        },
        {
          "name": "slip-0021.md",
          "type": "blob",
          "size": 7.1728515625,
          "content": "# SLIP-0021 : Hierarchical derivation of symmetric keys\n\n```\nNumber:  SLIP-0021\nTitle:   Hierarchical derivation of symmetric keys\nType:    Standard\nStatus:  Final\nAuthors: Andrew R. Kozlik <andrew.kozlik@satoshilabs.com>\n         Ondrej Vejpustek <ondrej.vejpustek@satoshilabs.com>\n         Pavol Rusnak <stick@satoshilabs.com>\nCreated: 2019-06-25\n```\n\n## Abstract\n\nThis document describes a method of deriving a hierarchy of symmetric keys from a master secret, such as the recovery seed used in cryptocurrency wallets.\n\n## Motivation\n\nThe [BIP-0032](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) and [SLIP-0010](https://github.com/satoshilabs/slips/blob/master/slip-0010.md) specifications define how to derive a hierarchy of private/public key pairs from a master seed for the elliptic curves secp256k1, NIST P-256 and ed25519. However, there does not exist any similar specification for the derivation of keys for symmetric-key algorithms, which are needed for example in password encryption or encryption of Bitcoin metadata. [SLIP-0011](https://github.com/satoshilabs/slips/blob/master/slip-0010.md) deals with this problem by first using BIP-0032 to derive a secp256k1 private key and then deriving the symmetric key from this private key. However, BIP-0032 was not designed to be used in this way and it also implies that an implementation of SLIP-0011 requires secp256k1 arithmetic, which should not be needed for symmetric key derivation. The purpose of this specification is to lay down a common framework for the deterministic derivation of a hierarchy of symmetric keys from a master seed.\n\n## Master node generation\n\nWe adapt the master node generation from BIP-0032 and SLIP-0010. To achieve proper domain separation from the secp256k1, NIST P-256 and ed25519 key hierarchies, we use the string “Symmetric key seed” instead of the curve name. Let *S* be the master secret, such as that defined in [SLIP-0039](https://github.com/satoshilabs/slips/blob/master/slip-0039.md) or the binary seed defined in [BIP-0039](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki). Then the master node *m* is derived as follows:\n\n```\nm = HMAC-SHA512(key = b\"Symmetric key seed\", msg = S)\n```\n\nThe master node is used to derive child nodes, each of which can in turn be used to derive lower-level child nodes of their own and so on. Each node is associated with a 256-bit symmetric key. The master node is thus the root of a key tree.\n\n## Child node derivation\n\nThe child nodes of a parent node *N* are identified by a variable-length byte string called a *label*. The labels of all nodes which are derived from the master node, i.e., the first-level labels, MUST identify the purpose of the subordinate nodes. The purpose determines the further structure beneath the node. This label must be sufficiently unique to avoid collisions between applications. Examples include the ASCII encoding of the strings \"BIP-9999\", \"SLIP-9999\" or \"FIDO2 Trezor Credential ID\".\n\nThe derivation function is defined as:\n\n```\nChildNode(N, label) = HMAC-SHA512(key = N[0:32], msg = b\"\\x00\" + label),\n```\n\nwhere *N*[0:32] is the first 32 bytes of node data. The key for a given node is defined as the last 32 bytes of the node data:\n\n```\nKey(N) = N[32:64]\n```\n\n## Example\n\nThis example shows several keys derived from the master secret\n\n```\nS = c76c4ac4f4e4a00d6b274d5c39c700bb4a7ddc04fbc6f78e85ca75007b5b495f74a9043eeb77bdd53aa6fc3a0e31462270316fa04b8c19114c8798706cd02ac8\n```\n\nwhich is the binary seed obtained from the BIP-0039 mnemonic \"all all all all all all all all all all all all\" with an empty passphrase.\n\n```\nKey(m) = dbf12b44133eaab506a740f6565cc117228cbf1dd70635cfa8ddfdc9af734756\nKey(m/\"SLIP-0021\") = 1d065e3ac1bbe5c7fad32cf2305f7d709dc070d672044a19e610c77cdf33de0d\nKey(m/\"SLIP-0021\"/\"Master encryption key\") = ea163130e35bbafdf5ddee97a17b39cef2be4b4f390180d65b54cf05c6a82fde\nKey(m/\"SLIP-0021\"/\"Authentication key\") = 47194e938ab24cc82bfa25f6486ed54bebe79c40ae2a5a32ea6db294d81861a6\n```\n\n## Design rationale\n\nThis standard is designed in accordance with [NIST SP 800-108](https://doi.org/10.6028/NIST.SP.800-108) Recommendation for Key Derivation Using Pseudorandom Functions.\n\n### Key length\n\nEach node is associated with a 256-bit symmetric key. This key length is considered sufficiently secure for a number of years to come, see [keylength.com](https://www.keylength.com/en/compare/). It is also compatible with all major symmetric-key algorithms in use today, such as AES-256, ChaCha20Poly1305 or HMAC. The key derivation functions specified in NIST SP 800-108 allow for the derivation of variable length keys. Nevertheless, since such a feature appears to be of little use, a fixed key length was chosen to keep the implementation of this SLIP as simple as possible.\n\n### Key separation\n\nThe fact that each node is associated with a key of its own and uses a separate key for the derivation of child nodes is based on the principle that a single key should be used for only one purpose, e.g., encryption, integrity authentication, key derivation. The reasoning behind this principle is well known:\n\n1. The use of the same key for two different cryptographic processes may weaken the security provided by one or both of the processes.\n2. Limiting the use of a key limits the damage that could be done if the key is compromised.\n3. Some uses of keys interfere with each other.\n\nMost importantly, the scheme is designed so that the knowledge of Key(*N*) is independent of the ability to derive child nodes of *N*. Thus the compromise of Key(*N*) does not jeopardize any child keys of *N*.\n\n### Labeling child nodes\n\nIn the BIP-0032 specification child nodes are indexed by a 31-bit integer. This is well suited for hierarchical wallets, but there are instances where it would be more convenient to be able to specify the derived key using a randomly generated value with sufficient entropy to avoid collisions. For such purposes a 31-bit index is insufficient. A variable-length byte string allows maximum flexibility in labeling nodes, for example by using a printable string, an encoded integer index or a 256-bit random value.\n\n### Child node derivation\n\nSince this derivation scheme is intended to be fully deterministic once the master secret is known, the context and separator as defined in NIST SP 800-108 are omitted from the HMAC-SHA512 input. The counter and the length of the derived key are also omitted from the input, because they are constant.\n\nThe value of the message entering the HMAC-SHA512 function is a null byte followed by the label of the child node. The reason for this is that the first byte of the message value is reserved for future use. It can be used for domain separation in case support for other types of labels is desired.\n\n## References\n\n* [BIP-0032: Hierarchical Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n* [SLIP-0010: Universal private key derivation from master private key](https://github.com/satoshilabs/slips/blob/master/slip-0010.md)\n* [SLIP-0011: Symmetric encryption of key-value pairs using deterministic hierarchy](https://github.com/satoshilabs/slips/blob/master/slip-0011.md)\n* [NIST Special Publication 800-108: Recommendation for Key Derivation Using Pseudorandom Functions](https://doi.org/10.6028/NIST.SP.800-108)\n"
        },
        {
          "name": "slip-0022.md",
          "type": "blob",
          "size": 15.083984375,
          "content": "# SLIP-0022 : FIDO2 credential ID format for HD wallets\n\n```\nNumber:  SLIP-0022\nTitle:   FIDO2 credential ID format for HD wallets\nType:    Standard\nStatus:  Final\nAuthors: Andrew R. Kozlik <andrew.kozlik@satoshilabs.com>\n         Pavol Rusnak <stick@satoshilabs.com>\n         Ondrej Vejpustek <ondrej.vejpustek@satoshilabs.com>\nCreated: 2019-07-19\n```\n\n## Abstract\n\nThis document describes an interoperable format for FIDO2 credential IDs for use in hierarchical deterministic wallets.\n\n## Motivation\n\nA FIDO2 credential ID is a probabilistically-unique byte sequence identifying a public key credential. It is generated by the authenticator during registration and stored by the relying party and optionally by the authenticator itself. One way to generate a credential ID is to encrypt all credential data so that only its managing authenticator can decrypt it. This kind of credential ID allows the authenticator to be nearly stateless, by having the relying party store any necessary state. Currently there is no standardized way of formatting the credential data into this kind of credential ID. This specification defines a format for credential IDs designed for use in hierarchical deterministic wallets, which are distinctive in that they derive a hierarchy of cryptographic keys from a single master secret, such as that defined in [SLIP-0039](https://github.com/satoshilabs/slips/blob/master/slip-0039.md) or the binary seed defined in [BIP-0039](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki). This format may also be used for U2F key handles.\n\n## Credential ID format\n\nA SLIP-0022 credential ID is a byte string between 33 and 65535 bytes in length of the following form:\n\nVersion | Initialization vector | Encrypted credential data | Authentication tag\n--------|-----------------------|---------------------------|-------------------\n4 bytes | 12 bytes              | variable length           | 16 bytes\n\nThe version is the byte string \"`\\xf1\\xd0\\x02\\x00`\" in case of FIDO2 credential IDs and \"`\\xf1\\xd0\\x01\\x01`\" in case of U2F key handles. The initialization vector, which is used as input to the Chacha20Poly1305 cipher, is generated randomly for each new credential ID. The Poly1305 authentication tag is used to verify that the credential ID belongs to the authenticator.\n\n## Credential data encoding\n\nCredential data members are encoded using a [CBOR](https://tools.ietf.org/html/rfc7049) map (CBOR major type 5) with keys of unsigned integer type, similar to how CTAP2 command parameters and response members are encoded. The CBOR map must be encoded using the definite length variant. Some members are optional, therefore the length of the credential data map may vary.\n\nThe map keys and value types are specified below:\n\nMember name     | Key | Value type                            | Required                    | Definition\n----------------|-----|---------------------------------------|-----------------------------|-------------------------\nrpId            | 1   | Text string (CBOR major type 3).      | Required for FIDO2.         | Relying party identifier. The \"id\" member of the rp parameter from the authenticatorMakeCredential request.\nrpName          | 2   | Text string (CBOR major type 3).      | Optional.                   | Relying party name. The \"name\" member of the rp parameter from the authenticatorMakeCredential request.\nuserId          | 3   | Byte string (CBOR major type 2).      | Required for FIDO2.         | User account ID. The \"id\" member of the user parameter from the authenticatorMakeCredential request.\nuserName        | 4   | Text string (CBOR major type 3).      | Optional.                   | User account name. The \"name\" member of the user parameter from the authenticatorMakeCredential request.\nuserDisplayName | 5   | Text string (CBOR major type 3).      | Optional.                   | User account display name. The \"displayName\" member of the user parameter from the authenticatorMakeCredential request. In case of U2F the user may be prompted to enter a custom display name during registration.\ncreationTime    | 6   | Unsigned integer (CBOR major type 0). | Required for FIDO2.         | Any value which allows credentials to be sorted by the time of their creation, such as the UNIX timestamp or the value of an incremental counter at the moment of creation.\nhmacSecret      | 7   | Boolean (CBOR simple value 20 or 21). | Optional. False by default. | Indicates whether the credential was created with the hmac-secret extension set to true.\nuseSignCount    | 8   | Boolean (CBOR simple value 20 or 21). | Optional. False by default for FIDO2. Absent for U2F. | If false, all operations with the credential must use zero as the signature counter value. If true, the credential must use a signature counter which is incremented for each successful authenticatorGetAssertion operation.\nalgorithm       | 9   | Integer (CBOR major type 0 or 1)      | Required if the \"curve\" field is present, otherwise optional. | The COSE identifier of the algorithm to be used for generating assertion signatures, as specified in the IANA COSE Algorithms Registry [IANA-COSE-ALGS-REG](https://www.iana.org/assignments/cose/cose.xhtml#algorithms).\ncurve           | 10  | Integer (CBOR major type 0 or 1)      | Required if the \"algorithm\" field specifies an elliptic curve signature algorithm. | The COSE identifier of the elliptic curve to be used for generating assertion signatures, as specified in the IANA COSE Elliptic Curves Registry [IANA-COSE-EC-REG](https://www.iana.org/assignments/cose/cose.xhtml#elliptic-curves).\n\nIf the \"algorithm\" field is not present, then the algorithm defaults to ES256 (-7) and the curve defaults to P-256 (1).\n\nCredential data MUST be encoded using the CTAP2 canonical CBOR encoding form as specified in [Section 6](https://fidoalliance.org/specs/fido-v2.0-ps-20190130/fido-client-to-authenticator-protocol-v2.0-ps-20190130.html#message-encoding) of the FIDO Client to Authenticator Protocol (CTAP) v2.0.\n\n### Example of credential data encoding\n\nA credential data object in CBOR diagnostic notation:\n\n```\ncredentialData = {\n  1: \"example.com\",\n  3: h'3082019330820138A0030201023082019330820138A003020102308201933082',\n  4: \"johnpsmith@example.com\",\n  6: 2,\n  7: true\n};\n```\n\nwould be CBOR encoded as follows:\n\n```\na5                                   # map(5)\n   01                                # unsigned(1) - rpId\n   6b                                # text(11)\n      6578616d706c652e636f6d         # \"example.com\"\n   03                                # unsigned(3) - userId\n   58 20                             # bytes(32)\n      3082019330820138a003020102     # userid\n      3082019330820138a003020102     # ...\n      308201933082                   # ...\n   04                                # unsigned(4) - userName\n   76                                # text(22)\n      6a6f686e70736d697468406578616d # \"johnpsmith@example.com\"\n      706c652e636f6d                 # ...\n   06                                # unsigned(6) - creationTime\n   02                                # unsigned(2) - the second credential created\n                                     #               with this authenticator\n   07                                # unsigned(7) - hmacSecret\n   f5                                # primitive(21) - true\n```\n\n## Encryption\n\nThe CBOR encoded credential data is encrypted using Chacha20Poly1305 as defined in [RFC 8439](https://tools.ietf.org/html/rfc8439). In case of FIDO2 the SHA-256 hash of the rpId is used as the AAD input to the cipher. In case of U2F the application parameter (SHA-256 hash of the UTF-8 encoding of the application identity) is used as the AAD input to the cipher.\n\nThe encryption key *k* is the same for all credential IDs of the same version which are generated by an authenticator with a given master secret. The key is derived from the master secret using the [SLIP-0021](https://github.com/satoshilabs/slips/blob/master/slip-0021.md) method for hierarchical derivation of symmetric keys as:\n\n```\nk = Key(m/\"SLIP-0022\"/version/\"Encryption key\")\n```\n\nwhere *version* is the first four bytes of the credential ID, for example \"`\\xf1\\xd0\\x02\\x00`\" in case of FIDO2 credential IDs.\n\n## Derivation of the credential key pair\n\nThe credential key pair used for generating assertion signatures is derived from a master secret and from the version and authentication tag of the credential ID using the [SLIP-0010](https://github.com/satoshilabs/slips/blob/master/slip-0010.md) key derivation scheme. The key path is computed from the authentication tag by splitting it into four 4-byte values A, B, C and D which are interpreted as 32-bit integers in big-endian byte order. The highest bit in each integer is set and the key path is:\n\n```\nm/10022'/version'/A'/B'/C'/D'\n```\n\nwhere *version* is the first four bytes of the credential ID interpreted as a 32-bit integer in big-endian byte order, for example \"0xf1d00200\" in case of FIDO2 credential IDs.\n\n## Derivation of hmac-secret CredRandom\n\nThe CredRandom value used in the hmac-secret extension is derived from the master secret and the credential ID using the SLIP-0021 method for hierarchical derivation of symmetric keys as:\n\n```\nCredRandom = Key(m/\"SLIP-0022\"/version/\"hmac-secret\"/credentialId)\n```\n\nwhere *version* is the first four bytes of the credential ID.\n\n## Signature counter\n\nThe purpose of the signature counter is to aid relying parties in detecting cloned authenticators. Hierarchical deterministic wallets use a master secret, which can be backed-up and used for device recovery or legitimately used to create a clone of the device. Implementation of a signature counter impedes these use cases. Fortunately, FIDO2 allows authenticators to choose whether a credential will or will not use a signature counter. In the latter case the value of the signature counter remains constant at zero in all authenticatorMakeCredential responses and authenticatorGetAssertion responses. It is therefore recommended that authenticators do not create FIDO2 credentials with the \"useSignCount\" field set to true, unless required by the relying party.\n\nThe above does not apply to U2F key handles, because the U2F protocol requires the implementation of a signature counter. In case of U2F key handles the \"useSignCount\" field MUST NOT be present.\n\n## Example\n\nUnless stated otherwise, the values given below are encoded as strings containing two hexadecimal digits for each byte.\n\nThe following is an example of a credential ID and the corresponding keys belonging to an authenticator with the master secret `S`. The credential data stored in the ID is the same as that given in the previous example:\n\n```\ncredentialId = \"f1d0020013e65c865634ad8abddf7a66df56ae7d8c3afd356f76426801508b2e579bcb3496fe6396a6002e3cd6d80f6359dfa9961e24c544bfc2f26acec1b8d878ba56727e1f6a7b5176c607552aea63a5abe5d826d69fab3063edfa0201d9a51013d69eddb2eff37acdd5963f\"\n```\n\n```\nS = \"c76c4ac4f4e4a00d6b274d5c39c700bb4a7ddc04fbc6f78e85ca75007b5b495f74a9043eeb77bdd53aa6fc3a0e31462270316fa04b8c19114c8798706cd02ac8\"\n```\n\nNote that `S` is the binary seed obtained from the BIP-0039 mnemonic \"all all all all all all all all all all all all\" with an empty passphrase.\n\nCredential data encryption key:\n\n```\nk = \"5b60f6c30e5ef87a5f6756242c98f487da0ca7c173282737660e7bc320fad6cf\"\n```\n\nCredential key pair, the private key is encoded as an integer in base 10:\n\n```\nprivateKey = 17028406872725666093318073001284158176462610154049610120643103153631976435873\n\npublicKey = \"0451f0d4c307bc737c90ac605c6279f7d01e451798aa7b74df550fdb43a7760c7c02b5107fef42094d00f52a9b1e90afb90e1b9decbf15a6f13d4f882de857e2f4\"\n```\n\nCredRandom value used in the hmac-secret extension:\n\n```\nCredRandom = \"36a9b5d71c13ed54594474b54073af1fb03ea91cd056588909dae43ae2f35dbf\"\n```\n\n## Design rationale\n\n### Choice of encoding\n\nCBOR encoding is used for serialization throughout the CTAP2 protocol. Therefore any authenticator supporting FIDO2 must support CBOR, making it the natural choice for encoding credential data. Encoding the data as a map allows easy handling of optional members, deprecating old members and introducing new members.\n\n### Data encryption and authentication\n\nGenerally the data members contained in the credential ID are stored alongside the credential ID or are transmitted on the same channel. Therefore, there does not appear to be a strong reason to encrypt the credential ID content. However, encrypting it allows the credential ID to be separated from the account information so that it is meaningless in isolation. Furthermore, in the future new data members requiring confidentiality may need to be added. In that case it is easier to manage encryption of the entire credential data map rather than its individual members.\n\nThe random 96-bit initialization vector ensures that even if a user were to generate 2<sup>32</sup> credentials, then the likelihood of a collision occurring would be below 2<sup>&minus;32</sup>. Since every credential generation requires user consent, this length provides a sufficient guarantee of IV uniqueness.\n\nThe authentication tag is required to prevent an attacker from tampering with credential data and to avoid DOS attacks.\n\nAccording to the Web Authentication specification the RP ID is provided by the client to the authenticator for all operations, and the authenticator ensures that credentials created by a relying party can only be used in operations requested by the same RP ID. Using the RP ID as AAD input to the cipher enforces this requirement.\n\n### Key pair derivation\n\nThe rationale behind using the authentication tag for the SLIP-0010 key path is as follows:\n\n* The key path is not a confidential piece of information so it does not need to be encrypted or derived with the knowledge of a secret key.\n* The key path should depend on the credential information and on the relying party identifier, which is always provided as AAD when computing the authentication tag.\n* There should be an element of randomness so that different keys are generated even if the credential information is the same. Consider for example a relying party which insists on rotating the authentication key every three months and keeps track of old keys. The randomness is ensured by the fact that the IV is generated randomly.\n* Key path collisions should be near impossible to ensure unlinkability of various online identities of the same user. The likelihood of a collision occurring between authentication tags is even smaller than in the case of initialization vectors.\n\n## References\n\n* [Web Authentication](https://www.w3.org/TR/webauthn/): An API for accessing Public Key Credentials Level 1, W3C Recommendation, 4 March 2019\n* [FIDO Client to Authenticator Protocol (CTAP) v2.0](https://fidoalliance.org/specs/fido-v2.0-ps-20190130/fido-client-to-authenticator-protocol-v2.0-ps-20190130.html#sctn-hmac-secret-extension), Proposed Standard, January 30, 2019\n* [IANA-COSE-REG](https://www.iana.org/assignments/cose/cose.xhtml): IANA CBOR Object Signing and Encryption (COSE) Registries.\n* [RFC 7049](https://tools.ietf.org/html/rfc7049): Concise Binary Object Representation (CBOR)\n* [SLIP-0010](https://github.com/satoshilabs/slips/blob/master/slip-0010.md): Universal private key derivation from master private key\n* [SLIP-0021](https://github.com/satoshilabs/slips/blob/master/slip-0021.md): Hierarchical derivation of symmetric keys\n"
        },
        {
          "name": "slip-0023.md",
          "type": "blob",
          "size": 8.6435546875,
          "content": "# SLIP-0023 : Cardano HD master node derivation from a master seed\n\n```\nNumber:  SLIP-0023\nTitle:   Cardano HD master node derivation from a master seed\nType:    Standard\nStatus:  Final\nAuthors: Andrew R. Kozlik <andrew.kozlik@satoshilabs.com>\nCreated: 2019-07-24\n```\n\n## Abstract\n\nThis specification describes how to derive the master node, aka root node, of the key tree in Cardano hierarchical deterministic wallets.\n\n## Motivation\n\nCryptocurrency wallets generally work by combining a [BIP-0039](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki) mnemonic or a set of [SLIP-0039](https://github.com/satoshilabs/slips/blob/master/slip-0039.md) mnemonics with a user-entered passphrase to generate a master seed. This master seed is then used to derive a hierarchy of cryptographic keys as defined in [BIP-0032](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) and [SLIP-0010](https://github.com/satoshilabs/slips/blob/master/slip-0010.md).\n\nCardano hierarchical deterministic wallets use an extended private key which requires them to implement a custom adaptation of the BIP-0032 child key derivation scheme. The Cardano wallets currently in existence implement several mutually incompatible schemes for the derivation of the master node from a BIP-0039 mnemonic and passphrase. Unfortunately all of these derivation schemes fail to separate the derivation of the seed from the derivation of the key tree, making it impossible to integrate them with new seed derivation schemes. This specification aims to rectify this by defining a new scheme for the derivation of the master node from a seed. The new scheme is primarily intended for use with SLIP-0039 Shamir's Secret-Sharing for Mnemonic Codes.\n\n## Cardano universal master node derivation\n\nThis scheme adapts the master node derivation used in BIP-0032 and SLIP-0010 by defining a new curve name \"ed25519 cardano seed\" for the Ed25519 curve with the Cardano deterministic key hierarchy. The curve name is used as salt in BIP-0032 and SLIP-0010 when deriving the master node from the seed. This is necessary to ensure proper domain separation between different elliptic curves or different types of key hierarchies. The root extended private key (*k*<sub>L</sub>,&nbsp;*k*<sub>R</sub>) is computed by taking the SHA-512 hash of the root private key *I*<sub>L</sub>, modifying certain bits to make it a valid EdDSA key and clearing the third highest bit of *k*<sub>L</sub> to ensure compatibility with Cardano child key derivation.\n\n1. Let *S* be a seed byte sequence such as the master secret from SLIP-0039.\n2. Calculate *I* := HMAC-SHA512(Key = \"ed25519 cardano seed\", Data = *S*).\n3. Split *I* into two 32-byte sequences, *I*<sub>L</sub> := *I*[0:32] and *I*<sub>R</sub> := *I*[32:64].\n4. Let *k* := SHA-512(*I*<sub>L</sub>).\n5. Modify *k* by assigning *k*[0] := *k*[0] & 0xf8 and *k*[31] := (*k*[31] & 0x1f) | 0x40.\n6. Interpret *k*[0:32] as a 256-bit integer *k*<sub>L</sub> in little-endian byte order. Let *k*<sub>R</sub> := *k*[32:64] and use (*k*<sub>L</sub>,&nbsp;*k*<sub>R</sub>) as the root extended private key and *c* := *I*<sub>R</sub> as the root chain code.\n\n## Cardano Icarus master node derivation\n\nThe Icarus master node derivation scheme, aka V2 derivation scheme, is commonly used with BIP-0039 in Cardano wallets. Since there does not exist any specification of this scheme, its description is included below for completeness.\n\n1. Let *M* be a BIP-0039 mnemonic and *P* the passphrase entered by the user.\n2. Determine the initial entropy *E* that was used to generate *M*.\n3. Compute *S* := PBKDF2-HMAC-SHA512(password = *P*, salt = *E*, iterations = 4096, dkLen = 96).\n4. Modify *S* by assigning *S*[0] := *S*[0] & 0xf8 and *S*[31] := (*S*[31] & 0x1f) | 0x40.\n5. Interpret *S*[0:32] as a 256-bit integer *k*<sub>L</sub> in little-endian byte order. Let *k*<sub>R</sub> := *S*[32:64] and use (*k*<sub>L</sub>,&nbsp;*k*<sub>R</sub>) as the root extended private key and *c* := *S*[64:96] as the root chain code.\n\n## Child key derivation\n\nThe derivation of child keys in the Cardano deterministic key hierarchy is specified in [BIP32-Ed25519](https://doi.org/10.1109/EuroSPW.2017.47) and also described in the [Cardano documentation](https://github.com/input-output-hk/technical-docs/blob/main/cardano-components/cardano-wallet/doc/Wallet-Cryptography-and-Encoding.md#hierarchical-deterministic-wallets).\n\n## Compliance\n\nWhen SLIP-0039 is used as the source of the master secret the master node for the Cardano deterministic key hierarchy MUST be derived using the Cardano universal master node derivation scheme as specified [above](#cardano-universal-master-node-derivation).\n\nWhen BIP-0039 is used as the source of the master secret the master node for the Cardano deterministic key hierarchy SHOULD be derived using the Cardano Icarus master node derivation scheme to maintain compatibility with existing wallets.\n\n## Test vectors\n\nIn the following test vectors the values of *S*, *k*<sub>R</sub>, *A* and *c* are each encoded as a string containing two hexadecimal digits for each byte. The value of *k*<sub>L</sub> is encoded as an integer in base 10.\n\n### Test vector 1 for Cardano universal master node derivation (128 bits)\n\nLet the seed be *S* = \"578d685d20b602683dc5171df411d3e2\".\n\nNote that *S* is the master secret obtained from the following three SLIP-0039 share mnemonics with the passphrase \"TREZOR\":\n\n* \"extra extend academic bishop cricket bundle tofu goat apart victim enlarge program behavior permit course armed jerky faint language modern\",\n* \"extra extend academic acne away best indicate impact square oasis prospect painting voting guest either argue username racism enemy eclipse\",\n* \"extra extend academic arcade born dive legal hush gross briefing talent drug much home firefly toxic analysis idea umbrella slice\".\n\nThe root extended private key is:<br/>\n*k*<sub>L</sub> = 38096432269777187972282727382530464140043628323029465813805073381215192153792<br/>\n*k*<sub>R</sub> = \"4064253ffefc4127489bce1b825a47329010c5afb4d21154ef949ef786204405\"\n\nThe root public key is:<br/>\n*A* = \"83e3ecaf57f90f022c45e10d1b8cb78499c30819515ad9a81ad82139fdb12a90\"\n\nThe root chain code is:<br/>\n*c* = \"22c12755afdd192742613b3062069390743ea232bc1b366c8f41e37292af9305\"\n\nThe address for the derivation path 44'/1815'/0'/0/0 is:<br/>\nAe2tdPwUPEYxF9NAMNdd3v2LZoMeWp7gCZiDb6bZzFQeeVASzoP7HC4V9s6\n\nThe address for the derivation path 44'/1815'/0'/0/1 is:<br/>\nAe2tdPwUPEZ1TjYcvfkWAbiHtGVxv4byEHHZoSyQXjPJ362DifCe1ykgqgy\n\nThe address for the derivation path 44'/1815'/0'/0/2 is:<br/>\nAe2tdPwUPEZGXmSbda1kBNfyhRQGRcQxJFdk7mhWZXAGnapyejv2b2U3aRb\n\n### Test vector 2 for Cardano universal master node derivation (256 bits)\n\nLet the seed be *S* = \"a055b781aac0c9dc1bfb7d803bc8ffd5d4392e506db2e4a5a93f0aba958c5be7\".\n\nNote that this is the master secret obtained from the two SLIP-0039 share mnemonics with the passphrase \"TREZOR\":\n\n* \"hobo romp academic axis august founder knife legal recover alien expect emphasis loan kitchen involve teacher capture rebuild trial numb spider forward ladle lying voter typical security quantity hawk legs idle leaves gasoline\",\n* \"hobo romp academic agency ancestor industry argue sister scene midst graduate profile numb paid headset airport daisy flame express scene usual welcome quick silent downtown oral critical step remove says rhythm venture aunt\".\n\nThe extended private key is:<br/>\n*k*<sub>L</sub> =\n35870817594148037193235249761081259065186522922583196642112477624627719791504\n<br/>\n*k*<sub>R</sub> = \"f9d99bf3cd9c7e12663e8646afa40cb3aecf15d91f2abc15d21056c6bccb3414\"\n\nThe root public key is:<br/>\n*A* = \"eea170f0ef97b59d22907cb429888029721ed67d3e7a1b56b81731086ab7db64\"\n\nThe root chain code is:<br/>\n*c* = \"04f1de750b62725fcc1ae1b93ca4063acb53c486b959cadaa100ebd7828e5460\"\n\nThe address for the derivation path 44'/1815'/0'/0/0 is:<br/>\nAe2tdPwUPEYyDD1C2FbVJFAE3FuAxLspfMYt29TJ1urnSKr57cVhEcioSCC\n\nThe address for the derivation path 44'/1815'/0'/0/1 is:<br/>\nAe2tdPwUPEZHJGtyz47F6wD7qAegt1JNRJWuiE36QLvFzeqJPBZ2EBvhr8M\n\nThe address for the derivation path 44'/1815'/0'/0/2 is:<br/>\nAe2tdPwUPEYxD9xNPBJTzYmtFVVWEPB6KW4TCDijQ4pDwU11wt5621PyCi4\n\n## References\n\n* [BIP-0032](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki): Hierarchical Deterministic Wallets\n* [SLIP-0010](https://github.com/satoshilabs/slips/blob/master/slip-0010.md): Universal private key derivation from master private key\n* [BIP-0039](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki): Mnemonic code for generating deterministic keys\n* [SLIP-0039](https://github.com/satoshilabs/slips/blob/master/slip-0039.md): Shamir's Secret-Sharing for Mnemonic Codes\n* D. Khovratovich and J. Law: [BIP32-Ed25519 Hierarchical Deterministic Keys over a Non-linear Keyspace](https://doi.org/10.1109/EuroSPW.2017.47)\n"
        },
        {
          "name": "slip-0024.md",
          "type": "blob",
          "size": 16.3232421875,
          "content": "# SLIP-0024 : Trezor payment request format\n\n```\nNumber:  SLIP-0024\nTitle:   Trezor payment request format\nType:    Standard\nStatus:  Draft\nAuthors: Andrew Kozlik <andrew.kozlik@satoshilabs.com>\nCreated: 2021-12-09\n```\n\n## Abstract\n\nA Trezor payment request is a message that is signed by a trusted party requesting payment of a specified amount to one or more addresses, similar in principle to [BIP-0070](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki).\nThis message can be processed by a payer's wallet in such a way that the payer does not have to inspect the destination address and only needs to confirm the payment of the requested amount to the recipient that is named in the payment request.\n\n## Motivation\n\nBefore a cryptocurrency payment can be made, the recipient of the payment needs to securely communicate their receiving address to the payer. If the communication channel between the two parties is not well secured or if one of the endpoints is compromised by malware, then an attacker may modify the address, changing it to the attacker's own address in order to receive the payment instead of the legitimate recipient. This type of attack is known as *address spoofing*.\n\nHardware wallets are known to be the most secure solution to cryptocurrency payments. They are generally very resilient to malware, but they do not protect the payer from address spoofing outside of the wallet. The task of authenticating the address is up to the payer who should ideally verify the correctness of the address by means of a second channel. Using multiple channels to communicate the address reduces the likelihood of an attacker being able to compromise all of them at once, but at the same time it hinders the user experience.\n\nThis specification defines a new format of payment requests which aim to make cryptocurrency payments in hardware wallets safer and more user-friendly by allowing automated authentication of merchant's addresses using digital signatures.\n\n### Differences over BIP-0070\n\nThe Trezor payment request format is heavily inspired by the earlier [BIP-0070](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki) specification. The main ways in which the present specification differs over BIP-0070 are summarized below.\n\n* Adapted to the needs of hardware wallets.\n  * A nonce challenge is used to guarantee freshness instead of creation/expiry time, since the current time is not reliably available in hardware wallets.\n  * The way in which the payment request data is hashed is optimized for memory-constrained environments.\n  * PKI is considered out of scope of this specification, thus X.509 support is not required.\n* Designed for use with multiple cryptocurrencies.\n* Defines new types of memo fields, which allow for new use-cases.\n* The signature is required.\n\n## Payment request items\n\n### Recipient name\n\nThe recipient name is shown to the payer instead of the address or addresses which the payment request represents. The payer must however have the option of inspecting the addresses on the wallet's screen if they wish.\n\n### Memos\n\nMemos are used to provide additional information to the payer about the purpose of the payment request.\nA memo may also contain information that needs to be verified by the payer or their wallet. By making the payment to the specified address the payer confirms that the information in the memo is correct. Two types of memos are defined.\n\n#### Text memo\n\nA text memo is a UTF-8 encoded, plain-text note explaining the purpose of the payment request.\nThe note MUST be displayed to the payer in full.\n\n#### Refund memo\n\nA refund memo specifies the address where the payment should be refunded to the customer if necessary.\nThe customer's wallet MUST verify that it controls this address, see [Verifying address ownership](#verifying-address-ownership).\nThe wallet does not have to display this information on the screen.\n\n#### Coin purchase memo\n\nA coin purchase memo can be used by a cryptocurrency exchange service to inform their customer about the cryptocurrency and amount that the customer will receive in exchange for the payment they make. The customer's wallet MUST display this information on the screen. The coin purchase memo also specifies the address to which the exchange will send the cryptocurrency purchased by the customer. The customer's wallet MUST verify that it controls this address, see [Verifying address ownership](#verifying-address-ownership).\n\n### Nonce\n\nA unique challenge generated by the payer's wallet. The nonce guarantees freshness of the payment request and prevents replaying the payment request to the wallet or to another wallet. A nonce SHOULD be present whenever one or more memos are present in the payment request.\n\n### Requested outputs\n\nA list of destination addresses with requested amounts. The payer is requested to pay the specified amount to each of the listed addresses.\n\n### Payment request signature\n\nA digital signature of the payment request issued by a party which is trusted by the payer.\n\n## Trusted party\n\nThe definition of a trusted party is out of scope of this specification. It is up to the wallet vendor to choose how trusted parties are defined. For example, they may be defined by one or more pinned public keys in the wallet's firmware or the trusted public keys may be user-defined. Trust can also be derived from a PKI scheme, such as X.509 in the BIP-0070 specification. However, it should be noted that X.509 is not very well suited for use in hardware wallets due to its excessive complexity, e.g. certificate extensions, expiry dates or certificate validation and revocation rules. Each trusted party may be restricted to signing payment requests only for particular recipient names.\n\n## Workflows\n\nThe following describes several scenarios involving a customer paying a merchant using cryptocurrency. The customer has a hardware wallet and a wallet application running on their computer which controls the hardware wallet. The merchant has access to a signing server whose signatures are trusted by the customer's wallet.\n\n### Basic scenario\n\n1. The customer creates an order with the merchant and chooses to pay using Bitcoin.\n2. The merchant generates a unique receiving address for the customer's order.\n3. The merchant authenticates itself to the signing server and sends it the receiving address and amount to be paid.\n4. The signing server returns a signed payment request to the merchant containing the merchant's name, receiving address and amount to be paid.\n5. The merchant verifies that the signature matches the provided data and generates a BIP-0021 URI with the payment request signature in `slip24sig` as described [below](#usage-with-the-bip-0021-uri-scheme).\n6. The customer clicks the BIP-0021 URI which opens their wallet application.\n7. The wallet application creates a transaction transferring the requested amount to the merchant's address.\n8. The wallet application requests a transaction signature from the hardware wallet, providing the payment request data.\n9. The hardware wallet verifies that the payment request signature was issued by a trusted party and displays a confirmation dialog to the user stating the merchant's name and amount to be sent.\n10. The customer confirms the dialog and the hardware wallet generates the transaction signature.\n11. The wallet application broadcasts the signed transaction.\n12. The merchant monitors the blockchain for a transaction transferring the requested amount to its receiving address.\n\nIf the trusted signing server is operated by a hardware wallet vendor, then in step 1 the customer may need to select the vendor of their wallet. The server may also be operated by the merchant itself, in which case the customer will have had to load the merchant's public key into their hardware wallet in advance.\n\n### Scenario with a refund memo\n\n1. The customer's wallet application selects an address which belongs to the customer and is suitable for receiving the refund of a payment.\n2. The wallet application obtains two items from the hardware wallet:\n    * an address authentication code for the selected refund address and\n    * a nonce challenge, which the hardware wallet also records in a nonce cache in its volatile memory.\n3. The wallet application provides the customer's refund address and nonce challenge to the merchant who will be receiving the payment.\n4. The merchant generates a unique receiving address for the payment request.\n5. The merchant authenticates itself to the signing server and sends it its receiving address, the amount to be paid, the customer's refund address and nonce challenge.\n6. The signing server returns a signed payment request to the merchant.\n7. The merchant verifies that the signature matches the provided data and returns the payment request to the customer's wallet application.\n8. The wallet application creates a transaction transferring the requested amount to the merchant's address.\n9. The wallet application requests a transaction signature from the hardware wallet, providing the payment request data together with the address authentication code of the refund address.\n10. The hardware wallet takes the following steps:\n    * Verifies that it issued the nonce challenge by checking its nonce cache and removes it from the cache so that the payment request cannot be reused in the future.\n    * Verifies that it controls the refund address by validating the address authentication code.\n    * Verifies that the payment request signature was issued by a trusted party.\n    * Displays a confirmation dialog to the user stating the merchant's name and amount to be sent.\n11. The customer confirms the dialog and the hardware wallet generates the transaction signature.\n12. The wallet application broadcasts the signed transaction.\n13. The merchant monitors the blockchain for a transaction transferring the requested amount to its receiving address.\n14. If the merchant needs to refund the payment, then it may send it to the refund address that was specified in the payment request without any further interaction with the customer.\n\n## Signature generation\n\nThe payment request signature is generated by signing the *paymentRequestDigest* using the private key of the trusted party.\nThe default signature scheme is ECDSA with SHA-256 and the curve secp256k1, but any other suitable signature scheme may be chosen by the trusted party instead. In case of the default scheme the signature is encoded in 64 bytes. The first 32 bytes encode the *r* component of the signature and the second 32 bytes encode the *s* component, both in big-endian byte order.\n\nThe *paymentRequestDigest* is computed by hashing the concatenation of the following fields:\n\n* *versionMagic* (4 bytes): b\"\\x53\\x4c\\x00\\x24\" (this is \"SL\" followed by 0024 in compressed numeric form as an abbreviation for \"SLIP-0024\").\n* *nonce* (length-prefixed binary string): an optional nonce challenge from the wallet. If a nonce is not used, then a zero-length string should be provided.\n* *recipientName* (length-prefixed UTF-8 string): a human-readable string identifying the recipient of the payment.\n* *n* (CompactSize integer): the number of memos which follow. The CompactSize integer MUST be encoded in the fewest possible number of bytes.\n* *memo*<sub>1</sub> || *memo*<sub>2</sub> || ... || *memo*<sub>*n*</sub> (variable length): concatenation of the binary encoding of the memos, see below.\n* *coinType* (4 bytes): 32-bit encoding of the SLIP-0044 coin type of the outputs in little-endian byte order.\n* *outputsHash* (32 bytes): the hash of the binary encodings of all requested outputs, see below.\n\nA text memo is encoded as the concatenation of the following fields:\n\n* *memoType* (4 bytes): b\"\\x01\\x00\\x00\\x00\" (32-bit encoding of the integer 1 in little-endian byte order).\n* *text* (length-prefixed UTF-8 string): a human-readable string providing information about the purpose of the payment.\n\nA refund memo is encoded as the concatenation of the following fields:\n\n* *memoType* (4 bytes): b\"\\x02\\x00\\x00\\x00\" (32-bit encoding of the integer 2 in little-endian byte order).\n* *address* (length-prefixed string): the address where the payment should be refunded if necessary.\n\nA coin purchase memo is encoded as follows:\n\n* *memoType* (4 bytes): b\"\\x03\\x00\\x00\\x00\" (32-bit encoding of the integer 3 in little-endian byte order).\n* *coinType* (4 bytes): 32-bit encoding of the SLIP-0044 coin type of the address where the coin purchase will be delivered in little-endian byte order.\n* *amount* (length-prefixed UTF-8 string): the human-readable amount the address will receive including units, e.g. \"0.025 BTC\".\n* *address* (length-prefixed string): the address where the coin purchase will be delivered.\n\nThe value of *outputsHash* is computed as the hash of the concatenation of the binary encodings of the requested outputs. The binary encoding of an output is the concatenation of the following fields:\n\n* *amount* (8 bytes): 64-bit encoding of the amount of the requested output in little-endian byte order, expressed in the smallest unit of the given cryptocurrency (satoshis).\n* *address* (length-prefixed string): the address of the requested output.\n\nAll variable-length fields are encoded the same way as in Bitcoin transactions, as a [length-prefixed string](https://en.bitcoin.it/wiki/Protocol_documentation#Variable_length_string), where the length is encoded as a variable-length CompactSize integer.\n\n## Usage with the BIP-0021 URI scheme\n\n[BIP-0021](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki) specifies a URI scheme for encoding Bitcoin payment requests. The present specification defines a new query key `slip24sig` for BIP-0021 URIs, allowing the URI to encode a basic Trezor payment request. If the `slip24sig` field is specified in the URI the `amount` and `label` fields MUST also be specified.\n\nThe value of `slip24sig` is the base64 encoding of the SLIP-0024 payment request signature. Note that any `=` characters in the base64 encoding must be percent-encoded as `%3D`. When computing the hash of the payment request the *recipientName* is taken from the`label` field of the URI. If the `message` field is specified in the URI, then the message is processed as a text memo. The *outputsHash* value is the hash of exactly one output specified by the `address` and `amount` fields of the URI. A nonce is not used and the *coinType* is 0.\n\n## JSON schema\n\nUse-cases involving multiple outputs or nonces require a more complex protocol than BIP-0021. For this purpose a JSON schema will be defined to document the data interchange format between the merchant and customer's wallet application. The same format may also be used for communicating payment requests between the merchant and the signing server.\n\nTODO\n\n## Verifying address ownership\n\nThis section is non-normative. One of the requirements in processing a refund memo or a coin purchase memo is that the customer's wallet must verify that the specified address is controlled by the wallet. The most common way of verifying address ownership by a wallet is to provide the BIP-0032 derivation path leading from the wallet's seed to the address. In cases where the address uses a script such as multisig, specifying the address derivation can be more complicated.\n\nIn order to simplify the communication protocol with the wallet, it is more convenient to verify address ownership by means of an address authentication code. When getting an address from the hardware wallet, the wallet can return an authentication code together with the address. This authentication code is saved by the calling application and used at a later point in time to prove to a stateless hardware wallet that the address was derived from its seed.\n\n### Address authentication code in Trezor\n\nLet *k* be a secret *address authentication key* derived from the wallet's master secret using the [SLIP-0021](https://github.com/satoshilabs/slips/blob/master/slip-0021.md) method for hierarchical derivation of symmetric keys as:\n\n```\nk = Key(m/\"SLIP-0024\"/\"Address MAC key\")\n```\n\nThe address authentication code is computed as:\n\n```\nmac = HMAC-SHA256(key = k, msg = coinType || address)\n```\n\nwhere `coinType || address` is the concatenation of the following fields:\n\n* *coinType* (4 bytes): 32-bit encoding of the SLIP-0044 coin type of the address in little-endian byte order.\n* *address* (length-prefixed string): the address being authenticated.\n\n## Test vectors\n\nTODO\n\n## References\n\n* [BIP-0021](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki): URI Scheme\n* [BIP-0070](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki): Payment Protocol\n"
        },
        {
          "name": "slip-0025.md",
          "type": "blob",
          "size": 7.537109375,
          "content": "# SLIP 25 : Key derivation for CoinJoin accounts\n\n```\nNumber:  SLIP-0025\nTitle:   Key derivation for CoinJoin accounts\nType:    Standard\nStatus:  Draft\nAuthors: Andrew R. Kozlik <andrew.kozlik@satoshilabs.com>\nCreated: 2022-04-04\n```\n\n## Abstract\n\nThis document defines a logical hierarchy for deterministic wallets based on the algorithm defined in [BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) and [SLIP 10](https://github.com/satoshilabs/slips/blob/master/slip-0010.md) and the scheme described in [BIP 43](https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki).\nThe purpose of this document is largely the same as [BIP 86](https://github.com/bitcoin/bips/blob/master/bip-0086.mediawiki), however the keys derived using the present hierarchy are meant to be used in so called *CoinJoin accounts*, which are managed by CoinJoin wallets.\n\n## Motivation\n\nA CoinJoin wallet allows its users to participate in a special kind of transaction which mixes the user's UTXOs with the UTXOs of other participants in order to obfuscate the ownership of the resulting CoinJoin outputs to external observers.\nEach user receives the same amount from the CoinJoin transaction as they put in, minus a small coordination and mining fee.\nEach UTXO that is managed by a CoinJoin wallet is assigned an anonymity rating based on its CoinJoin history and the user typically chooses to spend only those UTXOs which have achieved a sufficient level of anonymity.\nThe way in which the account keys and XPUBs are managed requires greater care than in the case of ordinary cryptocurrency accounts based on BIPs [44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki), [49](https://github.com/bitcoin/bips/blob/master/bip-0086.mediawiki), [84](https://github.com/bitcoin/bips/blob/master/bip-0084.mediawiki) or [86](https://github.com/bitcoin/bips/blob/master/bip-0086.mediawiki), which is why we define this domain-separated hierarchy.\n\n## Public key derivation\n\nWe define the following 6 levels in the BIP 32 derivation path:\n\n```\nm / 10025' / coin_type' / account' / script_type' / change / address_index\n```\n\n`'` in the path indicates that hardened derivation is used.\nA key derived with this derivation path pattern will be referred to as `derived_key` further in this document.\n\n### Coin type field\n\nThe value of `coin_type` MUST be one of the coin types defined in [SLIP 44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md).\nThe keys derived for a particular coin type SHOULD only be used in connection with the cryptocurrency specified in SLIP 44.\n\nOne master node (seed) can be used for multiple cryptocurrency networks.\nSharing keys between different cryptocurrency networks or between mainnet and testnet may be especially dangerous if the cryptocurrency does not implemented strong replay protection, e.g. via `SIGHASH_FORKID`.\nFor example if a testnet application is allowed to access mainnet keys, then an attacker may be able to coerce the user into spending Bitcoin by signing a seemingly harmless testnet transaction.\n\nThis level creates a separate subtree for every cryptocurrency, avoiding key reuse between networks and improving privacy.\n\n### Account field\n\nThe value of `account` SHOULD be in the range from `0` to `100`.\nAccounts are numbered from index `0` in a sequentially increasing manner.\n\nThis level splits the key space into independent user identities.\nUsers can use these accounts to organize their funds in the same fashion as bank accounts for better overview of their operations, e.g. a business account and a personal account.\nSome users may also choose to segregate coins into multiple identities as a fail-safe in case CoinJoin doesn't offer the advertised level of anonymity.\n\nWallet software should prevent spending coins from different accounts in one transaction.\nIt should also prevent the creation of an account, i.e. accessing the new account's addresses, if a previous account does not have any transaction history.\n\n### Script type field\n\nThe value of `script_type` MUST be `1`.\nAll other values are reserved for future use.\n\nThe inclusion of this field is inspired by [BIP 48](https://github.com/bitcoin/bips/blob/master/bip-0048.mediawiki).\nBeing able to manage multiple script types under a single account may be especially useful in other privacy-focused applications such as [BIP 78](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki) PayJoin when the sender's script type needs to be matched by the receiving wallet.\n\n### Change field\n\nThe value of `change` MUST be `0` or `1`.\nAll other values are reserved for future use.\n\nThe value `0` is used for the *external chain* and the value `1` for the *internal chain* (also known as change addresses or internal addresses).\nThe external chain is used for addresses that are meant to be visible outside of the wallet, e.g. for receiving payments.\nThe Internal chain is used for addresses which are not meant to be visible outside of the wallet and is used either for returning transaction change or for outputs of CoinJoin transactions.\n\n### Address index field\n\nThe value of `address_index` SHOULD be an integer in the range from `0` to `1000000` (inclusive).\nAddresses are numbered from index `0` in a sequentially increasing manner.\n\n## Address derivation\n\n### Script type 1: P2TR\n\nIf `script_type = 1` then the derived key MUST be used to generate a P2TR address.\nThe scriptPubKey is defined exactly as specified in the [Address derivation](https://github.com/bitcoin/bips/blob/master/bip-0086.mediawiki#address-derivation) section of BIP 86:\n\n```\ninternal_key:       lift_x(derived_key)\n32_byte_output_key: internal_key + int(HashTapTweak(bytes(internal_key)))G\nscriptPubKey:       0x51 0x20 {32_byte_output_key}\n```\n\n## Handling XPUBs and addresses\n\nThe UTXOs from a CoinJoin account SHOULD only be spent by a wallet that is able to rate the anonymity of the UTXOs and select the ones satisfying the user's anonymity threshold.\n\nWallets MUST require user confirmation before releasing the XPUB to any node in the BIP 32 subtree of `m / 10025'`.\n\nWallets SHOULD NOT display an address belonging to the internal chain (`change = 1`) of a CoinJoin account.\n\n## Backwards Compatibility\n\nThis SLIP is not backwards compatible with earlier derivation schemes by design due to the special requirements for handling XPUBs and addresses.\nAn incompatible wallet will not discover these accounts, however the scheme is sufficiently similar to existing schemes, so that adding it to current implementations does not require any significant amount of new code.\n\n## Test vectors\n\nTODO\n\n## References\n\n* [BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki): Hierarchical Deterministic Wallets\n* [SLIP 10](https://github.com/satoshilabs/slips/blob/master/slip-0010.md): Universal private key derivation from master private key\n* [BIP 44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki): Multi-Account Hierarchy for Deterministic Wallets\n* [SLIP 44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md): Registered coin types for BIP 44\n* [BIP 48](https://github.com/bitcoin/bips/blob/master/bip-0048.mediawiki): Multi-Script Hierarchy for Multi-Sig Wallets\n* [BIP 49](https://github.com/bitcoin/bips/blob/master/bip-0049.mediawiki): Derivation scheme for P2WPKH-nested-in-P2SH based accounts\n* [BIP 84](https://github.com/bitcoin/bips/blob/master/bip-0084.mediawiki): Derivation scheme for P2WPKH based accounts\n* [BIP 86](https://github.com/bitcoin/bips/blob/master/bip-0086.mediawiki): Deterministic Entropy From BIP32 Keychains\n* [BIP 78](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki): A Simple Payjoin Proposal\n"
        },
        {
          "name": "slip-0032.md",
          "type": "blob",
          "size": 11.884765625,
          "content": "# SLIP-0032 : Extended serialization format for BIP-32 wallets\n\n```\nNumber:  SLIP-0032\nTitle:   Extended serialization format for BIP-32 wallets\nType:    Standard\nStatus:  Draft\nAuthors: Pavol Rusnak <stick@satoshilabs.com>\nCreated: 2017-09-06\n```\n\n## Abstract\n\nBIP-0032 already defines a serialization format for hierarchical deterministic\nkeys.  In this document we present extended version of the serialization\nformat, which aims to overcome some limitations of the original proposal.\n\n## Changes\n\nFirst modification is including full BIP-32 path of the exported node, so\nwallet can check whether the provided key was exported from expected part of\nthe deterministic hierarchy.\n\nSecond modification is removal of fingerprint field, which was barely used by\nwallets and introduces unnecessary extra computation steps during serialization\nof the key. Sometimes it is even not possible to compute the fingerprint at all\n(when the parent key is unknown).\n\nLast modification is the change from Base58 encoding to Bech32 encoding, which\nis more efficient in many areas.\n\n## Serialization format\n\nExtended public and private keys are serialized as follows:\n\n* 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 derived keys, ...\n* 4 * depth bytes: serialized BIP-32 path; each entry is encoded as 32-bit unsigned integer, most significant byte first\n* 32 bytes: the chain code\n* 33 bytes: the public key or private key data (ser<sub>P</sub>(K) for public keys, 0x00 || ser<sub>256</sub>(k) for private keys)\n\nThis structure is encoded using Bech32 format described in BIP-0173. We will\nuse 'xpub' human-readable part for extended public keys and 'xprv' for extended\nprivate keys.\n\n## Test vectors\n\n<pre>\nmnemonic = abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about\n\nm :\n\nlegacy_bip32_xprv = xprv9s21ZrQH143K3GJpoapnV8SFfukcVBSfeCficPSGfubmSFDxo1kuHnLisriDvSnRRuL2Qrg5ggqHKNVpxR86QEC8w35uxmGoggxtQTPvfUu\nlegacy_bip32_xpub = xpub661MyMwAqRbcFkPHucMnrGNzDwb6teAX1RbKQmqtEF8kK3Z7LZ59qafCjB9eCRLiTVG3uxBxgKvRgbubRhqSKXnGGb1aoaqLrpMBDrVxga8\n\nslip32_prv_hex    = 007923408dadd3c7b56eed15567707ae5e5dca089de972e07f3b860450e2a3b70e001837c1be8e2995ec11cda2b066151be2cfb48adf9e47b151d46adab3a21cdf67\nslip32_pub_hex    = 007923408dadd3c7b56eed15567707ae5e5dca089de972e07f3b860450e2a3b70e03d902f35f560e0470c63313c7369168d9d7df2d49bf295fd9fb7cb109ccee0494\n\nslip32_prv_bech32 = xprv1qpujxsyd4hfu0dtwa524vac84e09mjsgnh5h9crl8wrqg58z5wmsuqqcxlqmar3fjhkprndzkpnp2xlze76g4hu7g7c4r4r2m2e6y8xlvu566tn6\nslip32_pub_bech32 = xpub1qpujxsyd4hfu0dtwa524vac84e09mjsgnh5h9crl8wrqg58z5wmsuq7eqte474swq3cvvvcncumfz6xe6l0j6jdl990an7mukyyuemsyjszuwypl\n\nm/0 :\n\nlegacy_bip32_xprv = xprv9ukW2UsmeQP9NB14w61cimzwEKbUJxHCypMb1PpEafjCETz69a6tp8aYdMkHfz6U49Ut262f9MpGZkCna1zDhEfW2BGkSehvrxd5ueR4TBe\nlegacy_bip32_xpub = xpub68jrRzQfUmwSaf5Y37Yd5uwfnMRxiR14M3HBonDr91GB7GKEh7R9Mvu2UeCtbASfXZ9FdNo9FwFx6a37HNXUDiXVQFXuadXmevRBa3y7rL8\n\nslip32_prv_hex    = 0100000000e0e6503ac057cf5dc76e0735e56dd44d193b2e9e271cc2d46bc759c99b021e3c00baa89a8bdd61c5e22b9f10601d8791c9f8fc4b2fa6df9d68d336f0eb03b06eb6\nslip32_pub_hex    = 0100000000e0e6503ac057cf5dc76e0735e56dd44d193b2e9e271cc2d46bc759c99b021e3c0376bf533d4b15510fa9f4124b6e48616f07debcf2ef0cfb185cdc4a576450b475\n\nslip32_prv_bech32 = xprv1qyqqqqqqurn9qwkq2l84m3mwqu672mw5f5vnkt57yuwv94rtcavunxczrc7qpw4gn29a6cw9ug4e7yrqrkrerj0cl39jlfkln45dxdhsavpmqm4krfqykk\nslip32_pub_bech32 = xpub1qyqqqqqqurn9qwkq2l84m3mwqu672mw5f5vnkt57yuwv94rtcavunxczrc7qxa4l2v75k923p75lgyjtdeyxzmc8m6709mcvlvv9ehz22aj9pdr4m6lwmk\n\nm/1 :\n\nlegacy_bip32_xprv = xprv9ukW2UsmeQP9PQFT4K5ZcUPAXZy7hZPqMAX94Q2rTNA5qRznspNy8q87j3hc5eWWS7hS7sGVpEiGbMHLqxubZFqAASWSBuyVDqE9jxqjD9E\nlegacy_bip32_xpub = xpub68jrRzQfUmwSbtKvALcZycKu5boc727giPSjrnSU1hh4iEKwRMhDgdSbaK3Ac8hngo2Fgbz9B5S4V1jbkR8ffjFLjTBWSvALDZPzTLqeMqb\n\nslip32_prv_hex    = 01000000015c48917d6838b666aeb11eac7c4f98f807779b57c7522e38509719eeb1e7a59200c1beaff0c4db984670a40c69c2947b9d33cd7f6e749c67e1fcb5c6118dda1282\nslip32_pub_hex    = 01000000015c48917d6838b666aeb11eac7c4f98f807779b57c7522e38509719eeb1e7a59202ea2649b3512b9a859ab658a85e2989a7ae39b2518877b2dc0f2b44b785d5788d\n\nslip32_prv_bech32 = xprv1qyqqqqqpt3yfzltg8zmxdt43r6k8cnuclqrh0x6hcafzuwzsjuv7av085kfqpsd74lcvfkucgec2grrfc228h8fne4lkuayuvlsledwxzxxa5y5zefalyg\nslip32_pub_bech32 = xpub1qyqqqqqpt3yfzltg8zmxdt43r6k8cnuclqrh0x6hcafzuwzsjuv7av085kfq963xfxe4z2u6skdtvk9gtc5cnfaw8xe9rzrhktwq726yk7za27ydw88adn\n\nm/0' :\n\nlegacy_bip32_xprv = xprv9ukW2Usuz4v7Yd2EC4vNXaMckdsEdgBA9n7MQbqMJbW9FuHDWWjDwzEM2h6XmFnrzX7JVmfcNWMEVoRauU6hQpbokqPPNTbdycW9fHSPYyF\nlegacy_bip32_xpub = xpub68jrRzQopSUQm76hJ6TNtiJMJfhj38u1X12xCzExrw388hcN443UVnYpswdUkV7vPJ3KayiCdp3Q5E23s4wvkucohVTh7eSstJdBFyn2DMx\n\nslip32_prv_hex    = 0180000000f1c03f5ff97108912fd56761d3fada8879e4173aba45f10da4bbd94b1c49716000c08cf331996482c06db3d259ff99be4bf7083824d53185e33191ee7ceb2bf96f\nslip32_pub_hex    = 0180000000f1c03f5ff97108912fd56761d3fada8879e4173aba45f10da4bbd94b1c497160027f1d87730e460e921b382242911565bf93daf2081ed685b2edd1d01176b2c13c\n\nslip32_prv_bech32 = xprv1qxqqqqqq78qr7hlewyyfzt74vasa87k63pu7g9e6hfzlzrdyh0v5k8zfw9sqpsyv7vcejeyzcpkm85jel7vmujlhpquzf4f3sh3nry0w0n4jh7t0jhc039\nslip32_pub_bech32 = xpub1qxqqqqqq78qr7hlewyyfzt74vasa87k63pu7g9e6hfzlzrdyh0v5k8zfw9sqylcasaesu3swjgdnsgjzjy2kt0unmteqs8kkskewm5wsz9mt9sfuvlxj6p\n\nm/1' :\n\nlegacy_bip32_xprv = xprv9ukW2Usuz4v7ZSQ9zPsP7jQkeP7MtjLzyyb9zfZ7uZc7Hr1Kf1FKQq1tM8edPHeB2fPBATtH7XYNAEmxtCWRNvP5qZkv4E3CXL3FvwPsBSm\nlegacy_bip32_xpub = xpub68jrRzQopSUQmvUd6RQPUsMVCQwrJC4rMCWko3xjTu96AeLUCYZZxdLNCSXBA3QhaZJ67AynQNCtfcBFemxfjzWHWLKbkVCFyHGjFHHgqeE\n\nslip32_prv_hex    = 018000000143cc4bca59c666a5f79265148125802ed2cec46df1c5ca8e6a058dab525a73f1003ef02fc53000742891fc90458ba9edc8363d8f1f267e326b1078710c7db34de5\nslip32_pub_hex    = 018000000143cc4bca59c666a5f79265148125802ed2cec46df1c5ca8e6a058dab525a73f103b5184a526dac6abda3d8d54a541471ce83e8c2260d56706053e2780922319f5e\n\nslip32_prv_bech32 = xprv1qxqqqqqpg0xyhjjecen2taujv52gzfvq9mfva3rd78zu4rn2qkx6k5j6w0csq0hs9lznqqr59zgleyz93w57mjpk8k837fn7xf43q7r3p37mxn095hysnx\nslip32_pub_bech32 = xpub1qxqqqqqpg0xyhjjecen2taujv52gzfvq9mfva3rd78zu4rn2qkx6k5j6w0cs8dgcfffxmtr2hk3a34222s28rn5rarpzvr2kwps98cncpy3rr867k5u83k\n\nm/44'/0'/0' :\n\nlegacy_bip32_xprv = xprv9xpXFhFpqdQK3TmytPBqXtGSwS3DLjojFhTGht8gwAAii8py5X6pxeBnQ6ehJiyJ6nDjWGJfZ95WxByFXVkDxHXrqu53WCRGypk2ttuqncb\nlegacy_bip32_xpub = xpub6BosfCnifzxcFwrSzQiqu2DBVTshkCXacvNsWGYJVVhhawA7d4R5WSWGFNbi8Aw6ZRc1brxMyWMzG3DSSSSoekkudhUd9yLb6qx39T9nMdj\n\nslip32_prv_hex    = 038000002c80000000800000003da4bc190a2680111d31fadfdc905f2a7f6ce77c6f109919116f253d4344521900fe64af825b5b78554c33a28b23085fc082f691b3c712cc1d4e66e133297da87a\nslip32_pub_hex    = 038000002c80000000800000003da4bc190a2680111d31fadfdc905f2a7f6ce77c6f109919116f253d4344521903774c910fcf07fa96886ea794f0d5caed9afe30b44b83f7e213bb92930e7df4bd\n\nslip32_prv_bech32 = xprv1qwqqqqpvsqqqqqyqqqqqq0dyhsvs5f5qzywnr7klmjg972nldnnhcmcsnyv3zme984p5g5seqrlxftuztddhs42vxw3gkgcgtlqg9a53k0r39nqafenwzvef0k585enml6g\nslip32_pub_bech32 = xpub1qwqqqqpvsqqqqqyqqqqqq0dyhsvs5f5qzywnr7klmjg972nldnnhcmcsnyv3zme984p5g5seqdm5eyg0eurl495gd6nefux4etke4l3sk39c8alzzwae9ycw0h6t6ltmssr\n\nm/44'/0'/1' :\n\nlegacy_bip32_xprv = xprv9xpXFhFpqdQK5owUStFsuAiWUxYpLkvQn1QmVDumBKTvmmjkNEZgpMYoAaAftt3JVeDhRkvyLvrKathDToUMdz2FqRF7JNavF7uboJWArrw\nlegacy_bip32_xpub = xpub6BosfCnifzxcJJ1wYuntGJfF2zPJkDeG9ELNHcKNjezuea4tumswN9sH1psMdSVqCMoJC21Bv8usSeqSP4Sp1tLzW7aY59fGn9GCYzx5UTo\n\nslip32_prv_hex    = 038000002c80000000800000012971fa2db0ff5d69e166a406813aa3d9ed09c4adac2e0ce33523da8c5609f4f4008855dfda37fe663bffc0136618504e3cbd7d992134609cef6191c729339d5c65\nslip32_pub_hex    = 038000002c80000000800000012971fa2db0ff5d69e166a406813aa3d9ed09c4adac2e0ce33523da8c5609f4f4025d0261853d4c3a379160fb51d2f262ac64e65219139982c4e2180bcef1a233d9\n\nslip32_prv_bech32 = xprv1qwqqqqpvsqqqqqyqqqqqz2t3lgkmpl6ad8skdfqxsya28k0dp8z2mtpwpn3n2g7633tqna85qzy9th76xllxvwllcqfkvxzsfc7t6lveyy6xp880vxguw2fnn4wx2mhtjy8\nslip32_pub_bech32 = xpub1qwqqqqpvsqqqqqyqqqqqz2t3lgkmpl6ad8skdfqxsya28k0dp8z2mtpwpn3n2g7633tqna85qfwsycv984xr5du3vra4r5hjv2kxfejjryfenqkyugvqhnh35geajlgxhp0\n\nm/44'/2'/0' :\n\nlegacy_bip32_xprv = Ltpv7735AbcbmL1gbgDWj2ezvs59rh4RM1oTN2BKTKbfe3146FCPCNFbBBSWfuV9vCJNMXD9LuHpQnqVWpn2hbMhikqPdoGqbS3ptdPoNWEvvgR\nlegacy_bip32_xpub = Ltub2YDQmP391UYeDYvLye9P1SuNJFkcRGN7SYHM8JMxaDnegcPTXHJ2BnYmvHnFnGPGKu2WMuCga6iZV3SDxDMGrRyMcrYEfSPhrpS1EPkC43E\n\nslip32_prv_hex    = 038000002c8000000280000000869c5045e5fc789646babcd1961b101bc31e75fe50df8a585c79b05dca0ac75800983cd10d8d14160b10b9a4bb63207e9585054a3133619d57b78ea9d5aa3046d2\nslip32_pub_hex    = 038000002c8000000280000000869c5045e5fc789646babcd1961b101bc31e75fe50df8a585c79b05dca0ac7580340fe3b8e89165258bac0cb711613c618d1af63dc321a90b751d0697301441bcc\n\nslip32_prv_bech32 = xprv1qwqqqqpvsqqqqq5qqqqqpp5u2pz7tlrcjert40x3jcd3qx7rre6lu5xl3fv9c7dsth9q436cqzvre5gd352pvzcshxjtkceq062c2p22xyekr82hk782n4d2xprdysp4gxc\nslip32_pub_bech32 = xpub1qwqqqqpvsqqqqq5qqqqqpp5u2pz7tlrcjert40x3jcd3qx7rre6lu5xl3fv9c7dsth9q436cqdq0uwuw3yt9yk96cr9hz9snccvdrtmrmsep4y9h28gxjucpgsducuj4f9r\n\nm/49'/0'/0' :\n\nlegacy_bip32_xprv = yprvAHwhK6RbpuS3dgCYHM5jc2ZvEKd7Bi61u9FVhYMpgMSuZS613T1xxQeKTffhrHY79hZ5PsskBjcc6C2V7DrnsMsNaGDaWev3GLRQRgV7hxF\nlegacy_bip32_xpub = ypub6Ww3ibxVfGzLrAH1PNcjyAWenMTbbAosGNB6VvmSEgytSER9azLDWCxoJwW7Ke7icmizBMXrzBx9979FfaHxHcrArf3zbeJJJUZPf663zsP\n\nslip32_prv_hex    = 038000003180000000800000006eaae365ae0e0a0aab84325cfe7cd76c3b909035f889e7d3f1b847a9a0797ecb00880d51752bda4190607e079588d3f644d96bfa03446bce93cddfda3c4a99c7e6\nslip32_pub_hex    = 038000003180000000800000006eaae365ae0e0a0aab84325cfe7cd76c3b909035f889e7d3f1b847a9a0797ecb02f1f347891b20f7568eae3ec9869fbfb67bcab6f358326f10ecc42356bd55939d\n\nslip32_prv_bech32 = xprv1qwqqqqp3sqqqqqyqqqqqqm42udj6urs2p24cgvjule7dwmpmjzgrt7yfulflrwz84xs8jlktqzyq65t490dyryrq0cretzxn7ezdj6l6qdzxhn5neh0a50z2n8r7vumvllf\nslip32_pub_bech32 = xpub1qwqqqqp3sqqqqqyqqqqqqm42udj6urs2p24cgvjule7dwmpmjzgrt7yfulflrwz84xs8jlktqtclx3ufrvs0w45w4clvnp5lh7m8hj4k7dvrymcsanzzx44a2kfe6xynfgh\n\nm/49'/2'/0' :\n\nlegacy_bip32_xprv = Mtpv7RooeEQDUitupgpJcxZnfDwvq8hC24R7GAiscrqFhHHhit96vCNY7yudJgrM841dMbiRUQceC12566XAHHC8Rd1BtnBdokq9tmF7jLLvUdh\nlegacy_bip32_xpub = Mtub2rz9F1pkisRsSZX8sa4Ajon9GhPP6JymLgpuHqbYdU5JKFLBF7Qy8b1tZ3dccj2fefrAxfrPdVkpCxuWn3g72UctH2bvJRkp6iFmp8aLeRZ\n\nslip32_prv_hex    = 0380000031800000028000000067b7e1dc5c70a93504218ccf40c47ad46d4a9c858196376ce0e853aca7be049800cf222cc2e097049fe2ca76626c19c7e7a3ef971b1f64195758ab3c832463fcf4\nslip32_pub_hex    = 0380000031800000028000000067b7e1dc5c70a93504218ccf40c47ad46d4a9c858196376ce0e853aca7be049802b07388bd2edaba3c0a2c0856716fd7c9965d212fb2736f7b925f57d922b10ace\n\nslip32_prv_bech32 = xprv1qwqqqqp3sqqqqq5qqqqqqeahu8w9cu9fx5zzrrx0grz844rdf2wgtqvkxakwp6zn4jnmupycqr8jytxzuztsf8lzefmxymqecln68muhrv0kgx2htz4neqeyv070gg6dcn7\nslip32_pub_bech32 = xpub1qwqqqqp3sqqqqq5qqqqqqeahu8w9cu9fx5zzrrx0grz844rdf2wgtqvkxakwp6zn4jnmupycq2c88z9a9mdt50q29sy9vut06lyevhfp97e8xmmmjf040kfzky9vu2pu92u\n\nm/84'/0'/0' :\n\nlegacy_bip32_xprv = zprvAdG4iTXWBoARxkkzNpNh8r6Qag3irQB8PzEMkAFeTRXxHpbF9z4QgEvBRmfvqWvGp42t42nvgGpNgYSJA9iefm1yYNZKEm7z6qUWCroSQnE\nlegacy_bip32_xpub = zpub6rFR7y4Q2AijBEqTUquhVz398htDFrtymD9xYYfG1m4wAcvPhXNfE3EfH1r1ADqtfSdVCToUG868RvUUkgDKf31mGDtKsAYz2oz2AGutZYs\n\nslip32_prv_hex    = 038000005480000000800000004a53a0ab21b9dc95869c4e92a161194e03c0ef3ff5014ac692f433c4765490fc00e14f274d16ca0d91031b98b162618061d03930fa381af6d4caf44b01819ab6d4\nslip32_pub_hex    = 038000005480000000800000004a53a0ab21b9dc95869c4e92a161194e03c0ef3ff5014ac692f433c4765490fc02707a62fdacc26ea9b63b1c197906f56ee0180d0bcf1966e1a2da34f5f3a09a9b\n\nslip32_prv_bech32 = xprv1qwqqqqz5sqqqqqyqqqqqqjjn5z4jrwwujkrfcn5j59s3jnsrcrhnlagpftrf9apnc3m9fy8uqrs57f6dzm9qmygrrwvtzcnpspsaqwfslgup4ak5et6ykqvpn2mdggeaxrp\nslip32_pub_bech32 = xpub1qwqqqqz5sqqqqqyqqqqqqjjn5z4jrwwujkrfcn5j59s3jnsrcrhnlagpftrf9apnc3m9fy8uqfc85cha4npxa2dk8vwpj7gx74hwqxqdp083jehp5tdrfa0n5zdfkg3lp00\n</pre>\n\n## References\n\n* [BIP-0032: Hierarchical Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n* [BIP-0173: Base32 address format for native v0-16 witness outputs](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)\n"
        },
        {
          "name": "slip-0039.md",
          "type": "blob",
          "size": 42.0380859375,
          "content": "# SLIP-0039 : Shamir's Secret-Sharing for Mnemonic Codes\n\n```\nNumber:  SLIP-0039\nTitle:   Shamir's Secret-Sharing for Mnemonic Codes\nType:    Standard\nStatus:  Final\nAuthors: Pavol Rusnak <stick@satoshilabs.com>\n         Andrew Kozlik <andrew.kozlik@satoshilabs.com>\n         Ondrej Vejpustek <ondrej.vejpustek@satoshilabs.com>\n         Tomas Susanka <tomas.susanka@satoshilabs.com>\n         Marek Palatinus <slush@satoshilabs.com>\n         Jochen Hoenicke <hoenicke@gmail.com>\nCreated: 2017-12-18\n```\n\n## Table of contents\n\n* [Abstract](#abstract)\n* [Notation](#notation)\n* [Motivation](#motivation)\n* [Shamir's secret-sharing](#shamirs-secret-sharing)\n* [Two-level scheme](#two-level-scheme)\n* [Format of the share mnemonic](#format-of-the-share-mnemonic)\n* [Generating and combining the shares](#generating-and-combining-the-shares)\n  * [Polynomial interpolation](#polynomial-interpolation)\n  * [Sharing a secret](#sharing-a-secret)\n  * [Generating the shares](#generating-the-shares)\n  * [Combining the shares](#combining-the-shares)\n* [Checksum](#checksum)\n* [Passphrase](#passphrase)\n* [Encryption of the master secret](#encryption-of-the-master-secret)\n* [Decryption of the master secret](#decryption-of-the-master-secret)\n* [Versioning](#versioning)\n* [Localization](#localization)\n* [Wordlist](#wordlist)\n* [Specification for backing up BIP-0032 Hierarchical Deterministic Wallets](#specification-for-backing-up-bip-0032-hierarchical-deterministic-wallets)\n* [Test vectors](#test-vectors)\n* [Reference implementation](#reference-implementation)\n* [Design rationale](#design-rationale)\n* [References](#references)\n\n## Abstract\n\nThis SLIP describes a standard and interoperable implementation of Shamir's secret-sharing (SSS) and a specification for its use in backing up Hierarchical Deterministic Wallets described in [BIP-0032](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki). SSS splits a master secret into unique parts which can be distributed among participants. A specified minimum number of parts is required to be supplied in order to reconstruct the original secret. Knowledge of fewer than the required number of parts does not leak information about the master secret. This SLIP is mainly intended as a replacement for [BIP-0039](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki) and for the most part, the two are [not compatible](#Bip39Compatibility).\n\n## Notation\n\nNotation        | Meaning\n----------------|---------------------------------------------------------------\n*G*             | total number of groups, a positive integer, 1 &le; *G* &le; 16\n*N<sub>i</sub>* | total number of members in group *i*, a positive integer, 1 &le; *N<sub>i</sub>* &le; 16\n*GT*            | group threshold, a positive integer, 1 &le; *GT* &le; *G*\n*T<sub>i</sub>* | member threshold for group *i*, a positive integer, 1 &le; *T<sub>i</sub>* &le; *N<sub>i</sub>*\n*id*            | random identifier, a 15-bit unsigned integer\n*ext*           | extendable backup flag\n*e*             | iteration exponent, a 4-bit unsigned integer\n*MS*            | master secret, an octet string\n*n*             | length of the master secret in bytes\n*EMS*           | encrypted master secret, an octet string\n&#124;&#124;    | concatenation operator\nxor             | bit-wise exclusive-or of two octet strings\n\n## Motivation\n\nPreservation of digital assets is generally important and it is especially important in the case of decentralized payments systems such as Bitcoin, where there is no recourse in the case of loss of an asset. The usual approach to protecting digital assets is redundant backups, but when the asset itself is of significant and liquidable value, there is a substantial risk of the backup holder absconding with the asset. Shamir's secret-sharing provides a better mechanism for backing up secrets by distributing custodianship among a number of trusted parties in a manner that can prevent loss even if one or a few of those parties become compromised.\n\nHowever, the lack of SSS standardization to date presents a risk of being unable to perform secret recovery in the future should the tooling change. Therefore, we propose standardizing SSS so that SLIP-0039 compatible implementations will be interoperable.\n\n## Shamir's secret-sharing\n\nShamir's secret-sharing (SSS) is a cryptographic mechanism describing how to split a secret into *N* unique parts, where any *T* of them are required to reconstruct the secret. First, a polynomial *f* of degree *T* &minus; 1 is constructed and each party is given a corresponding point - an integer input *x* to the polynomial and the corresponding output *f*(*x*).\n\nWhen any *T* points are provided, they exactly define the polynomial. Usually the value of the polynomial *f*(0) is used as the shared secret. In this specification the shared secret is stored as *f*(255)<sup>[3](#IndexEncoding)</sup>. More details on SSS can be found on [Wikipedia](https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing).\n\nWe propose that given a secret, *T* &minus; 2 shares be generated randomly and the remaining shares be computed in such a way that *f*(255) encodes the shared secret and *f*(254) encodes the digest<sup>[4](#Digest)</sup> of the shared secret. Encoding the digest makes it possible to verify that the shared secret has been correctly recovered. The diagram below illustrates the splitting of a secret into five shares such that any three are required to recover the shared secret (*N* = 5 and *T* = 3).\n\n![curve](slip-0039/shamir-curve.svg)\n\nShamir's secret sharing scheme is applied separately to each byte of the shared secret and GF(256) is used as the underlying finite field<sup>[1](#FiniteField)</sup>. Bytes are interpreted as elements of GF(256) using polynomial representation with operations modulo the Rijndael irreducible polynomial *x*<sup>8</sup> + *x*<sup>4</sup> + *x*<sup>3</sup> + *x* + 1, see [AES](https://doi.org/10.6028/NIST.FIPS.197) sections 3.2, 4.1 and 4.2.\n\n## Two-level scheme\n\nOne characteristic of Shamir’s secret sharing scheme is that all shares are equal. Thus if the owner of the secret needs to distribute the amount of trust unevenly between shareholders, then some shareholders need to be given multiple shares. Furthermore, as discussed by [Allen and Friedenbach](https://github.com/WebOfTrustInfo/rwot8-barcelona/blob/master/topics-and-advance-readings/social-key-recovery.md), the owner might want to restrict the combinations of shareholders which are able to reconstruct the secret, because some combinations of shareholders might be more likely to collude against the owner than others. To facilitate this we propose that the encrypted master secret (*EMS*) is first split using a *GT*-of-*G* scheme to obtain a set of first-level shares, aka *group shares*. The *i*-th group share, 1 &le; *i* &le; *G*, is then split using a *T<sub>i</sub>*-of-*N<sub>i</sub>* scheme to obtain a set of second-level shares, aka *member shares*, which are distributed among the shareholders. Two levels are assumed to be sufficient to accommodate the majority of use cases while maintaining a comprehensive user interface.\n\nFor example, Alice wants to be able to reconstruct her *EMS* on her own using her 2 shares, which she has stored at different locations. In case these shares get destroyed, she also wants to have a backup with her friends and family in such a way that 3 of her 5 friends together with 2 of her 6 family members are required to reconstruct the *EMS*. A two-level secret sharing scheme can easily accommodate such requirements. In the given example Alice first splits the *EMS* using a 2-of-4 scheme to obtain the group shares A, B, C and D. She keeps A and B for herself and splits C further using a 3-of-5 scheme to obtain member shares C1, ... , C5, giving one to each friend. Similarly, Alice splits D among her family members using a 2-of-6 scheme. Thus family members receive a greater amount of trust than friends, without having to give one person multiple shares. However, even if all six family members collude against Alice, they cannot obtain the *EMS* without the help of at least three of Alice's friends or without stealing one of Alice's own shares.\n\nAll shares created in accordance with this specification use the two-level secret sharing scheme. If the creator of the shares wishes to use only a basic single-level *T*-of-*N* scheme, then they SHOULD<sup>[2](#GroupPolicies)</sup> create a single group and conduct the splitting at the second level, i.e. *GT* = 1, *G* = 1, *T*<sub>1</sub> = *T* and *N*<sub>1</sub> = *N*.\n\nIf the member threshold *T<sub>i</sub>* of a group is 1, then the size *N<sub>i</sub>* of the group SHOULD<sup>[2](#GroupPolicies)</sup> also be equal to 1. The one share can then be given to multiple members.\n\n## Format of the share mnemonic\n\nWe propose the following format of the shares:\n\n| Identifier (*id*) | Extendable (*ext*) | Iteration exponent (*e*) | Group index (*GI*) | Group threshold (*Gt*) | Group count (*g*) | Member index (*I*) | Member threshold (*t*) | Padded share value (*ps*) | Checksum (*C*) |\n|---------|-------|--------|--------|--------|--------|--------|--------|---------------------|---------|\n| 15 bits | 1 bit | 4 bits | 4 bits | 4 bits | 4 bits | 4 bits | 4 bits | padding + 8*n* bits | 30 bits |\n\n* The **identifier** (*id*) field is a random 15-bit value which is the same for all shares and is used to verify that the shares belong together.\n* The **extendable backup flag** (*ext*) field<sup>[10](#ExtendableBackup)</sup> indicates that the *id* is used as salt in the encryption of the master secret when *ext* = 0.\n* The **iteration exponent** (*e*) field indicates the total number of iterations to be used in PBKDF2. The number of iterations is calculated as 10000&times;2<sup>*e*</sup>.\n* The **group index** (*GI*) field<sup>[3](#IndexEncoding)</sup> is the *x* value of the group share.\n* The **group threshold** (*Gt*) field<sup>[3](#IndexEncoding)</sup> indicates how many group shares are needed to reconstruct the master secret. The actual value is encoded as *Gt* = *GT* &minus; 1, so a value of 0 indicates that a single group share is needed (*GT* = 1), a value of 1 indicates that two group shares are needed (*GT* = 2) etc.\n* The **group count** (*g*) indicates the total number of groups. The actual value is encoded as *g* = *G* &minus; 1.\n* The **member index** (*I*) field<sup>[3](#IndexEncoding)</sup> is the *x* value of the member share in the given group.\n* The **member threshold** (*t*) field<sup>[3](#IndexEncoding)</sup> indicates how many member shares are needed to reconstruct the group share. The actual value is encoded as *t* = *T* &minus; 1.\n* The **padded share value** (*ps*) field corresponds to a list of the SSS part's *f<sub>k</sub>*(*x*) values (see the diagram above), 1 &le; *k* &le; *n*. Each *f<sub>k</sub>*(*x*) value is encoded as a string of eight bits in big-endian order. The concatenation of these bit strings is the share value. This value is left-padded with \"0\" bits so that the length of the padded share value in bits becomes the nearest multiple of 10.\n* The **checksum** (*C*) field is an RS1024 checksum (see [below](#checksum)) of the data part of the share (that is *id* || *ext* || *e* || *GI* || *Gt* || *g* || *I* || *t* || *ps*). The customization string (*cs*) of RS1024 is \"shamir\" if *ext* = 0 and \"shamir_extendable\" if *ext* = 1.\n\nThis structure is then converted into a mnemonic code by splitting it up into 10-bit segments with each becoming an index into a word list containing exactly 1024 words (see [below](#wordlist)). Big-endian bit order is used in all conversions. The entropy<sup>[4](#Digest)</sup> of the master secret MUST be at least 128 bits and its length MUST be a multiple of 16 bits. All implementations MUST support master secrets of length 128 bits and 256 bits:\n\n| Security | Padded share value length | Total share length  |\n|----------|---------------------------|---------------------|\n| 128 bits | 130 bits                  | 200 bits = 20 words |\n| 256 bits | 260 bits                  | 330 bits = 33 words |\n\nThis construction yields a beneficial property where the random identifier and the iteration exponent transform into the first two words of the mnemonic code, so the user can immediately tell whether the correct shares are being combined, i.e. they have to have the same first two words. Moreover, the third word encodes the group index, group threshold and part of the group count. Since the group threshold and group count are constant, all shares belonging to the same group start with the same three words.\n\n## Generating and combining the shares\n\n### Polynomial interpolation\n\nGiven a set of *m* points (*x<sub>i</sub>*, *y<sub>i</sub>*), 1 &le; *i* &le; *m*, such that no two *x<sub>i</sub>* values equal, there exists a polynomial that assumes the value *y<sub>i</sub>* at each point *x<sub>i</sub>*. The polynomial of the lowest degree that satisfies these conditions is uniquely determined and can be obtained using the Lagrange interpolation formula given below.\n\nSince Shamir's secret sharing scheme is applied separately to each of the *n* bytes of the shared secret, we work with *y*<sub>*i*</sub> as a vector of *n* values, where *y*<sub>*i*</sub>[*k*] = *f<sub>k</sub>*(*x<sub>i</sub>*), 1 &le; *k* &le; *n*, and *f<sub>k</sub>* is the polynomial in the *k*-th instance of the scheme.\n\n#### Interpolate(*x*, {(*x<sub>i</sub>*, *y*<sub>*i*</sub>), 1 &le; *i* &le; *m*})\n\n**Input:** the desired index *x*, a set of index/value-vector pairs {(*x<sub>i</sub>*, *y*<sub>*i*</sub>), 1 &le; *i* &le; *m*} &subseteq; GF(256) &times; GF(256)<sup>*n*</sup>\n\n**Output:** the value-vector (*f*<sub>1</sub>(*x*), ... , *f<sub>n</sub>*(*x*))\n\n![f_k(x) = \\sum_{i=1}^m y_i[k] \\prod_{\\underset{j \\neq i}{j=1}}^m \\frac{x - x_j}{x_i - x_j}](slip-0039/lagrange.png)\n\n### Sharing a secret\n\n#### SplitSecret(*T*, *N*, *S*)\n\n**Input:** threshold *T*, number of shares *N*, secret *S*\n\n**Output:** shares *y*<sub>1</sub>, ... , *y<sub>N</sub>* for share indices 0, ... , *N* &minus; 1\n\n1. Check the following conditions:\n   * 0 &lt; *T* &le; *N* &le; 16\n   * The length of *S* in bits is at least 128 and a multiple of 16.\n\n   If any of these conditions is not satisfied, then abort.\n2. If *T* is 1, then let *y<sub>i</sub>* = *S* for all *i*, 1 &le; *i* &le; *N*, and return.\n3. Let *n* be the length of *S* in bytes. Generate *R* &in; GF(256)<sup>*n*&minus;4</sup> randomly with uniform distribution and let *D* be the concatenation of the first 4 bytes of HMAC-SHA256(key=*R*, msg=*S*) with the *n* &minus; 4 bytes of *R*.\n4. Let *y*<sub>1</sub>, ... , *y*<sub>*T*&minus;2</sub> &in; GF(256)<sup>*n*</sup> be generated randomly, independently with uniform distribution.\n5. For *i* such that *T* &minus; 2 &lt; *i* &le; *N* compute *y<sub>i</sub>* = Interpolation(*i* &minus; 1, {(0, *y*<sub>1</sub>), ... , (*T* &minus; 3, *y*<sub>*T*&minus;2</sub>), (254, *D*), (255, *S*)}).\n\nThe source of randomness used to generate the values in steps 3 and 4 above MUST be suitable for generating cryptographic keys.\n\n#### RecoverSecret(*T*, [(*x*<sub>1</sub>, *y*<sub>1</sub>), ... , (*x<sub>m</sub>*, *y<sub>m</sub>*)])\n\n**Input:** threshold *T*, a list of *m* share-index/share-value pairs [(*x*<sub>1</sub>, *y*<sub>1</sub>), ... , (*x<sub>m</sub>*, *y<sub>m</sub>*)]\n\n**Output:** the shared secret *S*\n\n1. If *T* is 1, then let *S* = *y*<sub>1</sub> and return.\n2. Compute *S* = Interpolation(255, [(*x*<sub>1</sub>, *y*<sub>1</sub>), ... , (*x<sub>m</sub>*, *y<sub>m</sub>*)]).\n3. Compute *D* = Interpolation(254, [(*x*<sub>1</sub>, *y*<sub>1</sub>), ... , (*x<sub>m</sub>*, *y<sub>m</sub>*)]).\n4. Let *R* be the last *n* &minus; 4 bytes of *D*. If the first 4 bytes of HMAC-SHA256(key=*R*, msg=*S*) are equal to the first 4 bytes of *D*, then return *S*, otherwise abort.\n\n### Generating the shares\n\n#### GenerateShares(*GT*, [(*T*<sub>1</sub>,*N*<sub>1</sub>), ... , (*T<sub>G</sub>*,*N<sub>G</sub>*)], *MS*, *P*, *e*)\n\n**Input:** group threshold *GT*, list of member thresholds *T*<sub>1</sub>, ... , *T<sub>G</sub>* and group sizes *N*<sub>1</sub>, ... , *N<sub>G</sub>*, master secret *MS*, passphrase *P*, iteration exponent *e*\n\n**Output:** list of shares\n\n1. If *T<sub>i</sub>* = 1 and *N<sub>i</sub>* &gt; 1 for any *i*, then abort.\n2. Generate a random 15-bit value *id*.\n3. Let *ext* = 1.\n4. Compute the encrypted master secret *EMS* = Encrypt(*MS*, *P*, *e*, *id*, *ext*).\n5. Compute the group shares *s*<sub>1</sub>, ... , *s<sub>G</sub>* = SplitSecret(*GT*, *G*, *EMS*).\n6. For each group share *s<sub>i</sub>*, 1 &le; *i* &le; *G*, compute the member shares *s*<sub>*i*,1</sub>, ... , *s*<sub>*i*,*N<sub>i</sub>*</sub> = SplitSecret(*T<sub>i</sub>*, *N<sub>i</sub>*, *s<sub>i</sub>*).\n7. For each *i* and each *j*, 1 &le; *i* &le; *G*, 1 &le; *j* &le; *N<sub>i</sub>*, return (*id*, *ext*, *e*, *i* &minus; 1, *GT* &minus; 1, *j* &minus; 1, *T<sub>i</sub>* &minus; 1, *s<sub>i,j</sub>*).\n\n### Combining the shares\n\n**Input:** list of shares, passphrase *P*\n\n**Output:** master secret *MS*\n\n1. Check the following conditions:\n   * The checksum of each share MUST be valid. Implementations SHOULD NOT implement correction beyond potentially suggesting to the user where in the mnemonic an error might be found, without suggesting the correction to make<sup>[5](#ChecksumDesign)</sup>.\n   * All shares MUST have the same identifier *id*, extendable backup flag *ext*, iteration exponent *e*, group threshold *GT*, group count *G* and length. The value of *G* MUST be greater than or equal to *GT*.\n   * Let *GM* be the number of pairwise distinct group indices among the given shares. Then *GM* MUST be equal to *GT*.\n   * All shares with a given group index *GI<sub>i</sub>*, 1 &le; *i* &le; *GM*, MUST have the same member threshold *T<sub>i</sub>*, their member indices MUST be pairwise distinct and their count *M<sub>i</sub>* MUST be equal to *T<sub>i</sub>*.\n   * The length of the padding of the share value in bits, which is equal to the length of the padded share value in bits modulo 16, MUST NOT exceed 8 bits.\n   * All padding bits MUST be \"0\".\n   * The length of each share value MUST be at least 128 bits.\n\n   Abort if any check fails.\n\n2. Let *s<sub>i</sub>* = RecoverSecret([(*I*<sub>*i*,1</sub>, *s*<sub>*i*,1</sub>), ... , (*I*<sub>*i*,*M<sub>i</sub>*</sub>, *s*<sub>*i*,*M<sub>i</sub>*</sub>)]), where *I<sub>i,j</sub>* and *s<sub>i,j</sub>* are the member-index/share-value pairs of the shares with group index *GI<sub>i</sub>*.\n\n3. Let *EMS* = RecoverSecret([(*GI*<sub>1</sub>, *s*<sub>1</sub>), ... , (*GI<sub>GM</sub>*, *s<sub>GM</sub>*)])\n\n4. Return *MS* = Decrypt(*EMS*, *P*, *e*, *id*, *ext*).\n\n## Checksum\n\nThe last three words of the mnemonic form a checksum and contain no information. Valid mnemonics MUST pass the criteria for validity specified by the Python3 code snippet below. The function `rs1024_verify_checksum` must return true when its arguments are:\n\n* `cs`: the customization string\n* `data`: the data part as a list of 10-bit integers, each corresponding to one word of the mnemonic\n\n```\ndef rs1024_polymod(values):\n  GEN = [0xe0e040, 0x1c1c080, 0x3838100, 0x7070200, 0xe0e0009, 0x1c0c2412, 0x38086c24, 0x3090fc48, 0x21b1f890, 0x3f3f120]\n  chk = 1\n  for v in values:\n    b = (chk >> 20)\n    chk = (chk & 0xfffff) << 10 ^ v\n    for i in range(10):\n      chk ^= GEN[i] if ((b >> i) & 1) else 0\n  return chk\n\ndef rs1024_verify_checksum(cs, data):\n  return rs1024_polymod([ord(x) for x in cs] + data) == 1\n```\n\nThis implements a Reed-Solomon code over GF(1024) that guarantees detection of any error affecting at most 3 words and has less than a 1 in 10<sup>9</sup> chance of failing to detect more errors. More details about the properties can be found in the Checksum Design appendix<sup>[5](#ChecksumDesign)</sup>. The customization string is processed by feeding each character's US-ASCII value into the checksum calculation prior to the data.\n\nTo construct a valid checksum given the customization string and the values of the data-part words, the code below can be used:\n\n```\ndef rs1024_create_checksum(cs, data):\n  values = [ord(x) for x in cs] + data\n  polymod = rs1024_polymod(values + [0,0,0]) ^ 1\n  return [(polymod >> 10 * (2 - i)) & 1023 for i in range(3)]\n```\n\n## Passphrase\n\nTo allow additional protection, the master secret is encrypted with a passphrase using the encryption function described below. There is no way to verify that the correct passphrase was used to decrypt the encrypted master secret. This allows the user to obtain multiple master secrets from a single encrypted master secret by using different passphrases<sup>[8](#PassphraseVerification)</sup>.\n\nIn order to achieve the best interoperability among various operating systems and wallet implementations, the passphrase MUST be a string containing only printable ASCII characters (code points 32-126). If no passphrase is provided, an empty string SHALL be used as the passphrase.\n\n## Encryption of the master secret\n\nThe master secret is encrypted using a wide-blocksize pseudorandom permutation<sup>[7](#Encryption)</sup> based on the Luby-Rackoff construction. It consists of a four-round Feistel network with the key derivation function PBKDF2<sup>[6](#KDFParam)</sup> as the round function. This scheme is invertible, which means that the creator of the shares can choose the master secret, making it possible to migrate a BIP-32 wallet from BIP-39 mnemonics to the new secret sharing scheme. The master secret is first split into two equally long parts, where `L` is the first *n*/2 bytes of the master secret and `R` is the last *n*/2 bytes of the master secret, and processed as follows:\n\n```\nL = MS[:len(S)/2]\nR = MS[len(S)/2:]\nfor i in [0,1,2,3]:\n    (L, R) = (R, L xor F(i, R))\n```\n\nThe encrypted master secret is then `EMS = R || L`.\n\nThe *i*-th round function `F(i, R)` is defined as follows:\n\n```\nF(i, R) = PBKDF2(PRF = HMAC-SHA256, Password = (i || passphrase), Salt = (salt_prefix || R), iterations = 2500 << e, dkLen = n/2 bytes)\n```\n\nThe value of *i* is encoded as one byte.\n\nIf *ext* = 1, then `salt_prefix` is an empty string.\nIf *ext* = 0, then `salt_prefix = \"shamir\" || id`, where the random identifier value *id* is encoded as two bytes in big-endian byte order.\n\n## Decryption of the master secret\n\nThe only difference between encryption and decryption is the reversal of the order of the values of `i`:\n\n```\nL = EMS[:len(EMS)/2]\nR = EMS[len(EMS)/2:]\nfor i in [3,2,1,0]:\n    (L, R) = (R, L xor F(i, R))\nMS = R || L\n```\n\n## Versioning\n\nOur scheme doesn't support versioning. This is intentional to avoid unclear claims such as SLIP-0039 compatibility without a clear understanding of which version of the scheme is actually meant. Any future enhancement of this specification should be standardized as a new BIP or SLIP and should use its own unique customization string so that shares created in accordance with the new specification cannot be mistaken for SLIP-0039 shares.\n\n## Localization\n\nNo localization is supported. This standard deals with a set of English words only. Previous attempts with arbitrary wordlists caused lots of confusion among users and decreased interoperability across various implementations.\n\n## Wordlist\n\nThe wordlist mandated by this SLIP is [available here](slip-0039/wordlist.txt). Several criteria were applied in the creation of the list:\n\n* The wordlist is alphabetically sorted.\n* No word is shorter than 4 letters.\n* No word is longer than 8 letters.\n* All words begin with a unique 4-letter prefix.\n* The wordlist contains only common English words (+ the word \"satoshi\").\n* The minimum Damerau-Levenshtein distance between any two words is at least 2.\n* The similarity between the pronunciation of any two words has been minimized.\n\n(see the [test](slip-0039/test_wordlist.sh) which checks whether these criteria are fulfilled).\n\n## Specification for backing up BIP-0032 Hierarchical Deterministic Wallets\n\nSLIP-0039 can be used to back up any master secret *S* which satisfies the length constraints described above. However, any application implementing SLIP-0039 for backing up a [BIP-0032](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) Hierarchical Deterministic Wallet MUST use the [BIP-0032 master seed](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#master-key-generation) as the SLIP-0039 master secret *S*. To clarify, this is the initial generated seed byte sequence of 128-512 bits, which is used as the input to `HMAC-SHA512` for deriving the BIP-0032 master node.\n\nThis specification is required to ensure that SLIP-0039 backups created in one wallet can be restored in any other wallet that implements SLIP-0039.\n\n## Test vectors\n\nThe test vectors are given as a list of quadruples. The first element of the quadruple is a description of the test vector, the second is a list of mnemonics, the third is the master secret which results from combining the mnemonics and the fourth is the BIP32 master extended private key derived from the master secret. The master secret is encoded as a string containing two hexadecimal digits for each byte. If the string is empty, then attempting to combine the given set of mnemonics should result in an error. The passphrase \"TREZOR\" is used for all valid sets of mnemonics.\n\n<http://github.com/trezor/python-shamir-mnemonic/blob/master/vectors.json>\n\n## Reference implementation\n\nThe reference implementation is available from\n<http://github.com/trezor/python-shamir-mnemonic/>.\n\n## Other implementations\n\nC#:\n\n* <https://github.com/lontivero/Slip39>\n* <https://github.com/xecrets/xecrets-slip39>\n\nDart:\n\n* <https://github.com/ilap/slip39-dart>\n\nGo:\n\n* <https://github.com/gavincarr/go-slip39>\n\nJavaScript:\n\n* <https://github.com/ilap/slip39-js>\n* <https://github.com/BlueWallet/BlueWallet/tree/master/blue_modules/slip39>\n\nRust:\n\n* <https://github.com/rust-bitcoin/rust-wallet/blob/master/src/sss.rs>\n* <https://github.com/Internet-of-People/slip39-rust>\n\nWallets with SLIP39 support:\n\n* <https://github.com/unchained-capital/hermit>\n* <https://electrum.org/>\n* <https://sparrowwallet.com/>\n\n## Design rationale\n\n1. <a name=\"FiniteField\"></a>**Choice of finite field**\n\n    Finite fields of the form GF(2<sup>*m*</sup>) and GF(*p*), where *p* is a prime number, were considered for this scheme. The field GF(256) was chosen because the field arithmetic is easy to implement in any programming language and many implementations are already available since it is used in the AES cipher. The fact that it is byte-oriented makes it easy to work with.\n\n    Using a field of prime order GF(*p*), where log<sub>2</sub> *p* is approximately the length of the master secret in bits, would require support for multi-precision arithmetic. Many programming languages, such as C/C++, do not support multi-precision arithmetic out of the box. Implementations would also need to store information about the prime number that should be used for each admissible length of the master secret or they would need to compute the prime number on the fly.\n\n    Choosing GF(2<sup>*m*</sup>), where *m* is the length of the master secret in bits would require a more complicated implementation than GF(256). This is in part due to the multi-precision nature of the arithmetic and in part due to the fact that implementations would need to store an (e.g. lexicographically minimal) irreducible polynomial of degree *m* for each admissible value of *m* or they would need to be able to determine this polynomial on the fly.\n\n2. <a name=\"GroupPolicies\"></a>**Group policies**\n\n    It is recommended that when a single-level *T*-of-*N* scheme is desired, then a single group share should be created and split into *N* member shares. The alternative would be to create *N* groups, with each group using a 1-of-1 member scheme. There is no difference in terms of security between the two methods. The advantage of using the recommended method is that when recovering the secret, it is possible to determine from any share that a single-level scheme was used. This makes it possible to provide a more comprehensive user experience.\n\n    It is recommended that if the member threshold *T<sub>i</sub>* of a group is 1, then the size *N<sub>i</sub>* of the group should also be 1. Splitting a group share using a 1-of-*N* scheme for *N* &gt; 1 provides no additional security over a 1-of-1 scheme because the shares in a group with threshold 1 will only differ in the member index (fourth word of the mnemonic) and in the three checksum words at the end of the mnemonic. If a user attempts to produce several member shares with threshold 1, then it is most likely to be a mistake or a failure to understand the consequences.\n\n3. <a name=\"IndexEncoding\"></a>**Index encoding**\n\n    It is anticipated that 16 groups with 16 member shares in each group will be more than enough for any application of Shamir's Secret Sharing Scheme to BIP-32 master seeds. Thus to reduce the mnemonic length, the index and threshold values are restricted to 4 bits each.\n\n    In this specification the shared secret is stored under index 255 instead of the usual index 0. The disadvantage of using index 0 for the shared secret is that 0 then cannot be used as the index value for a share, thus any shares with index value 0 have to be considered invalid. However, some implementations might fail to check this, which would open the door to the following attack: Assume that an implementation doesn't check that the supplied *x* value is non-zero. An attacker that has write access to one of the shares can then change the stored point from (*x*,*y*) to (0,*y*). If the implementation uses this value in the Lagrange interpolation formula, then the resulting shared secret will always be equal to *y* regardless of the values of the other shares. If this value is protected with a weak passphrase and used as a master seed for a BIP-32 wallet, then the attacker will be able to steal any funds transferred to this wallet because he knows *y*.\n\n4. <a name=\"Digest\"></a>**Digest**\n\n    If the threshold *T* is at least 2, then share index 254 is used to encode the digest of the shared secret *S*. The share value *D* corresponding to index 254 consists of two parts. The first 4 bytes of *D* encode the actual digest and the remaining *n* &minus; 4 bytes *R* are randomly generated. The digest is computed as the first four bytes of HMAC-SHA256(key=*R*, msg=*S*). Encoding the digest makes it possible to detect an invalid set of shares with a random failure chance of 2<sup>&minus;32</sup>. Since each mnemonic has an identifier and an RS1024 checksum, an invalid set of shares is unlikely to appear randomly. Thus an invalid digest generally indicates that one or more of the provided shares have been maliciously fabricated by an attacker.\n\n    Let *m* denote the entropy of the shared secret in bits. A disadvantage of encoding the digest of the shared secret is that an attacker who has knowledge of *T* &minus; 1 share values can reduce the entropy of the shared secret to *m* &minus; 32 bits by performing a brute-force search over the 2<sup>*m*</sup> possible values of the shared secret and eliminating the ones which give an invalid digest. The entropy of the shared secret must be sufficiently large to make such attacks impractical, which is why this specification requires that *m* &ge; 128.\n\n    The advantage of using HMAC-SHA256(key=*R*, msg=*S*) as opposed to SHA-256(*S*) to compute the digest is that it provides better protection against attacks where the attacker has only partial knowledge of *T* &minus; 1 shares or partial knowledge of the shared secret. For example, if the digest would only depend on *S* and not on *R*, then it would be possible to perform the attack described above with the knowledge of only the first 4 bytes of *T* &minus; 1 share values.\n\n5. <a name=\"ChecksumDesign\"></a>**Checksum design**\n\n    The checksum design is heavily inspired by Bech32 defined in [BIP-0173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#Bech32). The RS1024 checksum uses a Reed-Solomon code over GF(1024) so that the code alphabet matches the 10-bit wordlist. A Reed-Solomon code over GF(1024) allows creating mnemonics of length up to a thousand words, which is plenty. Shared secrets that would require such length are impractical for human entry and should be stored in binary form rather than mnemonic form. We picked 3 checksum words as a trade-off between the length of the mnemonics and the error-detection capabilities, as 3 checksum words is the lowest number sufficient for a random failure chance below 1 per billion. RS1024 is an MDS code, which means that it is guaranteed to detect any 3 or fewer errors. This is the maximum possible for any kind of checksum that has length 3. Reed-Solomon codes can be viewed as a special case of BCH codes. In the Python3 code snippet, we use the BCH view of Reed-Solomon codes, because it allows for a more efficient implementation of the algorithms. The generating polynomial of the code is (*x* &minus; *a*)(*x* &minus; *a*<sup>2</sup>)(*x* &minus; *a*<sup>3</sup>), where *a* is a root of the primitive polynomial *x*<sup>10</sup> + *x*<sup>3</sup> + 1 over GF(2). The elements of GF(1024) are represented as polynomials with operations modulo this primitive polynomial.\n\n    Implementations should not implement correction beyond potentially suggesting to the user where in the mnemonic an error might be found, without suggesting the correction to make. The same recommendation is also made in BIP-0173 (Bech32), which uses a similar checksum scheme. The reason for this is that automated error-corrections change invalid mnemonics into valid mnemonics. The problem is that if more than a few errors are made, then the auto-corrected mnemonic will be valid but different from the original. Use of such a mnemonic may cause funds to be lost irrecoverably (most notably if the threshold is 1). This is why corrections should be made only by the user, who can inspect the hand-written mnemonic more closely and is therefore better qualified to decide where exactly the errors were made.\n\n6. <a name=\"KDFParam\"></a>**Choice of KDF function and parameters**\n\n    PBKDF2 is a widely used standard password-based key derivation function. Newer key derivation functions such as scrypt or Argon2 were considered, but these require a large amount of memory, which is a limiting factor in hardware wallets.\n\n    The SHA-256 algorithm operates on 32-bit words, whereas the SHA-512 algorithm operates on 64-bit words. As a consequence, SHA-512 is significantly faster on 64-bit platforms than on 32-bit platforms, but SHA-256 performs almost the same on both platforms. Using HMAC-SHA512 would put the user who may be running on a 32-bit platform at a significant disadvantage against an attacker which is running a brute force attack on a 64-bit platform. This is why HMAC-SHA256 was chosen as the pseudorandom function for PBKDF2.\n\n    The total number of iterations in PBKDF2 was chosen to be at least 10000, i.e. 2500 iterations in each of the four rounds of the Feistel-based encryption function. A larger number of iterations in PBKDF2 would currently impact the user experience in hardware wallets. The creator of the shares is free to choose a larger number of iterations, theoretically as high as 327 million, making the format more future-proof and more suitable for a wider range of environments.\n\n7. <a name=\"Encryption\"></a>**Encryption**\n\n    The advantage of a wide-blocksize pseudorandom permutation over a simple encryption scheme is that it thwarts attacks where the adversary obtains, for example, the first several bytes of *T* different shares. If the master secret were not protected by a strong pseudorandom permutation, the adversary could compute a part of the master secret. This is a serious concern if the master secret is, for example, a private key. Protecting the master secret using AES in any of the common block cipher modes does not solve this problem.\n\n    It might appear that such attacks would not be possible had a larger finite field been used, such as GF(2<sup>*m*</sup>) or GF(*p*), where *m* &asymp; log<sub>2</sub> *p* and *m* is the length of the master secret in bits. However, we are not aware of any proof that Shamir's secret sharing scheme is secure in scenarios where partial information about the shares is leaked. In fact, our preliminary investigation indicates that in certain cases information about the shared secret may leak if partial knowledge of *T* shares is available. Thus the use of a strong pseudorandom permutation is advisable regardless of the choice of the field.\n\n    The role of the key derivation function in the Feistel-based encryption function is twofold. Firstly, it protects the passphrase against brute-force and dictionary attacks. Secondly, if the adversary obtains a part of the encrypted master secret as described above, the slow key derivation function protects against brute-force attacks which attempt to reveal the unknown part of the encrypted master secret.\n\n8. <a name=\"PassphraseVerification\"></a>**Passphrase verification**\n\n    The proposed design does not provide a way to verify that the correct passphrase was used to decrypt the encrypted master secret. This is an intentional feature which allows the user to obtain multiple master secrets from a single encrypted master secret by using different passphrases. This design allows for plausible deniability when the master secret is used as the master seed for a hierarchical deterministic wallet (see [BIP-32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)). Every passphrase generates a valid seed but only the correct one will make the desired wallet available. Thus the owner can use one passphrase to access their real wallet and another passphrase to access a decoy wallet. If the owner is later coerced into revealing their passphrase either by [law](https://en.wikipedia.org/wiki/Key_disclosure_law) or by force, then they can reveal the passphrase which accesses the decoy wallet and [plausibly deny](https://en.wikipedia.org/wiki/Plausible_deniability) the existence of their real wallet, because there is no way for the coercer to prove that the decoy wallet is not the real one.\n\n9. <a name=\"Bip39Compatibility\"></a>**Compatibility with BIP-0039**\n\n    **Converting an existing BIP-0039 mnemonic to SLIP-0039 shares**\n\n    This is possible, but only at the price of all SLIP-0039 shares being 59 words long regardless of the length of the original BIP-0039 mnemonic. This is due to the fact that in BIP-0039 the mnemonic and passphrase are processed by PBKDF2-SHA-512 to produce a 512-bit seed which is what would need to be split using SLIP-0039. Furthermore, anyone who is using several different passphrases with one BIP-0039 mnemonic to have several wallets can convert only one of these wallets to SLIP-0039 shares.\n\n    Users who wish to take advantage of Shamir's secret sharing are advised to transfer their funds from their old BIP-0039 wallet to a new wallet backed-up using SLIP-0039. Doing so has the advantage of fully eliminating the possibility of theft using the old BIP-0039 mnemonic, which may happen if the user unknowingly fails to destroy all of its copies.\n\n    **Converting existing SLIP-0039 shares to a BIP-0039 mnemonic**\n\n    This is not possible due to the overly coupled design of BIP-0039 and its use of a one-way derivation function. BIP-0039 works by first generating a high-entropy secret, then converting it to a mnemonic and finally using the mnemonic itself as input to PBKDF2 to derive the seed. This means that for any new scheme to be compatible with BIP-0039, it would have to be built on top of BIP-0039 with all of its now obsolete aspects. That includes the conversion of the high-entropy secret to the mnemonic using the old wordlist, which would have to be included in the implementation, unreasonably bloating its size. SLIP-0039 instead introduces a new decoupled design which is more feature-rich and allows maximum flexibility for future upgrades.\n\n    Some individuals have expressed a concern that the inability to convert SLIP-0039 shares to BIP-0039 may lead to vendor lock-in due to the slow adoption of SLIP-0039 by hardware wallet vendors. This concern is unwarranted, since even if the conversion to BIP-0039 were possible and a user needed to recover their seed onto a device which does not support SLIP-0039, then they would need to use some conversion tool running on their computer. In that case, they might as well simply recover their SLIP-0039 shares in a software wallet running on their computer and send all of their funds to a new seed on their new device. Thus the ability to convert shares to a BIP-0039 mnemonic makes no difference in this respect.\n\n10. <a name=\"ExtendableBackup\"></a>**Extendable backup flag**\n\n    When this flag is set, it indicates that the *id* is not used as salt in the encryption of the master secret, making it possible to create multiple sets of shares, such that each set of shares uses a different *id* and each set of shares leads to the same master secret for every passphrase. This is a desirable property, because it allows users to start working with their wallet by creating a single-share (1-of-1) scheme and later upgrade to a multi-share scheme while maintaining the same *EMS* and passphrases. In case the user upgrades two or more times to a multi-share scheme, then each set of shares will in all likelihood have a distinct *id*. Thus it will be possible to tell the sets apart and avoid their accidental mixing, which could potentially lead to loss of access to funds, since shares from different sets are incompatible even if they use the same scheme.\n\n    The *ext* flag was added in a later revision of this specification. Previously *ext* was the highest bit of a 5-bit iteration exponent. In newly created shares *ext* SHOULD be set to 1. However, since some users already have shares that use *ext* = 0, implementations MUST support master secret decryption using both *ext* values. If *ext* = 0, then implementations SHOULD NOT allow the intentional creation of another set of shares with the same *id* and *EMS*. Doing so would run the risk of users trying to recover shares from incompatible groups, which is something that implementations are not required to handle.\n\n## References\n\n* [BIP-0032: Hierarchical Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n* [Secret Sharing Step by Step by Point Software](http://www.pointsoftware.ch/en/secret-sharing-step-by-step/)\n* [FIPS-197: Specification for the Advanced Encryption Standard (AES)](https://doi.org/10.6028/NIST.FIPS.197)\n* [C. Allen and M. Friedenbach: A New Approach to Social Key Recovery](https://github.com/WebOfTrustInfo/rwot8-barcelona/blob/master/topics-and-advance-readings/social-key-recovery.md)\n"
        },
        {
          "name": "slip-0039",
          "type": "tree",
          "content": null
        },
        {
          "name": "slip-0044.md",
          "type": "blob",
          "size": 120.5,
          "content": "# SLIP-0044 : Registered coin types for BIP-0044\n\n```\nNumber:  SLIP-0044\nTitle:   Registered coin types for BIP-0044\nType:    Standard\nStatus:  Active\nAuthors: Pavol Rusnak <stick@satoshilabs.com>\n         Marek Palatinus <slush@satoshilabs.com>\nCreated: 2014-07-09\n```\n\n## Abstract\n\nBIP-0044 defines a logical hierarchy for deterministic wallets.\nLevel 2 of the hierarchy describes a coin type in use.\n\n## Motivation\n\nBIP repository does not want to deal with assigning the values for various\ncoin types different than Bitcoin so we propose this SLIP to become such body.\n\n## Registered coin types\n\nThese are the registered coin types for usage in level 2 of BIP44 described in chapter \"Coin type\".\n\nAll these constants are used as hardened derivation.\n\n| Coin type  | Path component (`coin_type'`) | Symbol  | Coin                              |\n| ---------- | ----------------------------- | ------- | --------------------------------- |\n| 0          | 0x80000000                    | BTC     | Bitcoin                           |\n| 1          | 0x80000001                    |         | Testnet (all coins)               |\n| 2          | 0x80000002                    | LTC     | Litecoin                          |\n| 3          | 0x80000003                    | DOGE    | Dogecoin                          |\n| 4          | 0x80000004                    | RDD     | Reddcoin                          |\n| 5          | 0x80000005                    | DASH    | Dash                              |\n| 6          | 0x80000006                    | PPC     | Peercoin                          |\n| 7          | 0x80000007                    | NMC     | Namecoin                          |\n| 8          | 0x80000008                    | FTC     | Feathercoin                       |\n| 9          | 0x80000009                    | XCP     | Counterparty                      |\n| 10         | 0x8000000a                    | BLK     | Blackcoin                         |\n| 11         | 0x8000000b                    | NSR     | NuShares                          |\n| 12         | 0x8000000c                    | NBT     | NuBits                            |\n| 13         | 0x8000000d                    | MZC     | Mazacoin                          |\n| 14         | 0x8000000e                    | VIA     | Viacoin                           |\n| 15         | 0x8000000f                    | XCH     | ClearingHouse                     |\n| 16         | 0x80000010                    | RBY     | Rubycoin                          |\n| 17         | 0x80000011                    | GRS     | Groestlcoin                       |\n| 18         | 0x80000012                    | DGC     | Digitalcoin                       |\n| 19         | 0x80000013                    | CCN     | Cannacoin                         |\n| 20         | 0x80000014                    | DGB     | DigiByte                          |\n| 21         | 0x80000015                    |         | Open Assets                       |\n| 22         | 0x80000016                    | MONA    | Monacoin                          |\n| 23         | 0x80000017                    | CLAM    | Clams                             |\n| 24         | 0x80000018                    | XPM     | Primecoin                         |\n| 25         | 0x80000019                    | NEOS    | Neoscoin                          |\n| 26         | 0x8000001a                    | JBS     | Jumbucks                          |\n| 27         | 0x8000001b                    | ZRC     | ziftrCOIN                         |\n| 28         | 0x8000001c                    | VTC     | Vertcoin                          |\n| 29         | 0x8000001d                    | NXT     | NXT                               |\n| 30         | 0x8000001e                    | BURST   | Burst                             |\n| 31         | 0x8000001f                    | MUE     | MonetaryUnit                      |\n| 32         | 0x80000020                    | ZOOM    | Zoom                              |\n| 33         | 0x80000021                    | VASH    | Virtual Cash                      |\n| 34         | 0x80000022                    | CDN     | Canada eCoin                      |\n| 35         | 0x80000023                    | SDC     | ShadowCash                        |\n| 36         | 0x80000024                    | PKB     | ParkByte                          |\n| 37         | 0x80000025                    | PND     | Pandacoin                         |\n| 38         | 0x80000026                    | START   | StartCOIN                         |\n| 39         | 0x80000027                    | MOIN    | MOIN                              |\n| 40         | 0x80000028                    | EXP     | Expanse                           |\n| 41         | 0x80000029                    | EMC2    | Einsteinium                       |\n| 42         | 0x8000002a                    | DCR     | Decred                            |\n| 43         | 0x8000002b                    | XEM     | NEM                               |\n| 44         | 0x8000002c                    | PART    | Particl                           |\n| 45         | 0x8000002d                    | ARG     | Argentum (dead)                   |\n| 46         | 0x8000002e                    |         | Libertas                          |\n| 47         | 0x8000002f                    |         | Posw coin                         |\n| 48         | 0x80000030                    | SHR     | Shreeji                           |\n| 49         | 0x80000031                    | GCR     | Global Currency Reserve (GCRcoin) |\n| 50         | 0x80000032                    | NVC     | Novacoin                          |\n| 51         | 0x80000033                    | AC      | Asiacoin                          |\n| 52         | 0x80000034                    | BTCD    | BitcoinDark                       |\n| 53         | 0x80000035                    | DOPE    | Dopecoin                          |\n| 54         | 0x80000036                    | TPC     | Templecoin                        |\n| 55         | 0x80000037                    | AIB     | AIB                               |\n| 56         | 0x80000038                    | EDRC    | EDRCoin                           |\n| 57         | 0x80000039                    | SYS     | Syscoin                           |\n| 58         | 0x8000003a                    | SLR     | Solarcoin                         |\n| 59         | 0x8000003b                    | SMLY    | Smileycoin                        |\n| 60         | 0x8000003c                    | ETH     | Ether                             |\n| 61         | 0x8000003d                    | ETC     | Ether Classic                     |\n| 62         | 0x8000003e                    | PSB     | Pesobit                           |\n| 63         | 0x8000003f                    | LDCN    | Landcoin (dead)                   |\n| 64         | 0x80000040                    |         | Open Chain                        |\n| 65         | 0x80000041                    | XBC     | Bitcoinplus                       |\n| 66         | 0x80000042                    | IOP     | Internet of People                |\n| 67         | 0x80000043                    | NXS     | Nexus                             |\n| 68         | 0x80000044                    | INSN    | InsaneCoin                        |\n| 69         | 0x80000045                    | OK      | OKCash                            |\n| 70         | 0x80000046                    | BRIT    | BritCoin                          |\n| 71         | 0x80000047                    | CMP     | Compcoin                          |\n| 72         | 0x80000048                    | CRW     | Crown                             |\n| 73         | 0x80000049                    | BELA    | BelaCoin                          |\n| 74         | 0x8000004a                    | ICX     | ICON                              |\n| 75         | 0x8000004b                    | FJC     | FujiCoin                          |\n| 76         | 0x8000004c                    | MIX     | MIX                               |\n| 77         | 0x8000004d                    | XVG     | Verge Currency                    |\n| 78         | 0x8000004e                    | EFL     | Electronic Gulden                 |\n| 79         | 0x8000004f                    | CLUB    | ClubCoin                          |\n| 80         | 0x80000050                    | RICHX   | RichCoin                          |\n| 81         | 0x80000051                    | POT     | Potcoin                           |\n| 82         | 0x80000052                    | QRK     | Quarkcoin                         |\n| 83         | 0x80000053                    | TRC     | Terracoin                         |\n| 84         | 0x80000054                    | GRC     | Gridcoin                          |\n| 85         | 0x80000055                    | AUR     | Auroracoin                        |\n| 86         | 0x80000056                    | IXC     | IXCoin                            |\n| 87         | 0x80000057                    | NLG     | Gulden                            |\n| 88         | 0x80000058                    | BITB    | BitBean                           |\n| 89         | 0x80000059                    | BTA     | Bata                              |\n| 90         | 0x8000005a                    | XMY     | Myriadcoin                        |\n| 91         | 0x8000005b                    | BSD     | BitSend                           |\n| 92         | 0x8000005c                    | UNO     | Unobtanium                        |\n| 93         | 0x8000005d                    | MTR     | MasterTrader                      |\n| 94         | 0x8000005e                    | GB      | GoldBlocks                        |\n| 95         | 0x8000005f                    | SHM     | Saham                             |\n| 96         | 0x80000060                    | CRX     | Chronos                           |\n| 97         | 0x80000061                    | BIQ     | Ubiquoin                          |\n| 98         | 0x80000062                    | EVO     | Evotion                           |\n| 99         | 0x80000063                    | STO     | SaveTheOcean                      |\n| 100        | 0x80000064                    | BIGUP   | BigUp                             |\n| 101        | 0x80000065                    | GAME    | GameCredits                       |\n| 102        | 0x80000066                    | DLC     | Dollarcoins                       |\n| 103        | 0x80000067                    | ZYD     | Zayedcoin                         |\n| 104        | 0x80000068                    | DBIC    | Dubaicoin                         |\n| 105        | 0x80000069                    | STRAT   | Stratis                           |\n| 106        | 0x8000006a                    | SH      | Shilling                          |\n| 107        | 0x8000006b                    | MARS    | MarsCoin                          |\n| 108        | 0x8000006c                    | UBQ     | Ubiq                              |\n| 109        | 0x8000006d                    | PTC     | Pesetacoin                        |\n| 110        | 0x8000006e                    | NRO     | Neurocoin                         |\n| 111        | 0x8000006f                    | ARK     | ARK                               |\n| 112        | 0x80000070                    | USC     | UltimateSecureCashMain            |\n| 113        | 0x80000071                    | THC     | Hempcoin                          |\n| 114        | 0x80000072                    | LINX    | Linx                              |\n| 115        | 0x80000073                    | ECN     | Ecoin                             |\n| 116        | 0x80000074                    | DNR     | Denarius                          |\n| 117        | 0x80000075                    | PINK    | Pinkcoin                          |\n| 118        | 0x80000076                    | ATOM    | Atom                              |\n| 119        | 0x80000077                    | PIVX    | Pivx                              |\n| 120        | 0x80000078                    | FLASH   | Flashcoin                         |\n| 121        | 0x80000079                    | ZEN     | Zencash                           |\n| 122        | 0x8000007a                    | PUT     | Putincoin                         |\n| 123        | 0x8000007b                    | ZNY     | BitZeny                           |\n| 124        | 0x8000007c                    | UNIFY   | Unify                             |\n| 125        | 0x8000007d                    | XST     | StealthCoin                       |\n| 126        | 0x8000007e                    | BRK     | Breakout Coin                     |\n| 127        | 0x8000007f                    | VC      | Vcash                             |\n| 128        | 0x80000080                    | XMR     | Monero                            |\n| 129        | 0x80000081                    | VOX     | Voxels                            |\n| 130        | 0x80000082                    | NAV     | NavCoin                           |\n| 131        | 0x80000083                    | FCT     | Factom Factoids                   |\n| 132        | 0x80000084                    | EC      | Factom Entry Credits              |\n| 133        | 0x80000085                    | ZEC     | Zcash                             |\n| 134        | 0x80000086                    | LSK     | Lisk                              |\n| 135        | 0x80000087                    | STEEM   | Steem                             |\n| 136        | 0x80000088                    | XZC     | ZCoin                             |\n| 137        | 0x80000089                    | RBTC    | Rootstock                         |\n| 138        | 0x8000008a                    |         | Giftblock                         |\n| 139        | 0x8000008b                    | RPT     | RealPointCoin                     |\n| 140        | 0x8000008c                    | LBC     | LBRY Credits                      |\n| 141        | 0x8000008d                    | KMD     | Komodo                            |\n| 142        | 0x8000008e                    | BSQ     | bisq Token                        |\n| 143        | 0x8000008f                    | RIC     | Riecoin                           |\n| 144        | 0x80000090                    | XRP     | XRP                               |\n| 145        | 0x80000091                    | BCH     | Bitcoin Cash                      |\n| 146        | 0x80000092                    | NEBL    | Neblio                            |\n| 147        | 0x80000093                    | ZCL     | ZClassic                          |\n| 148        | 0x80000094                    | XLM     | Stellar Lumens                    |\n| 149        | 0x80000095                    | NLC2    | NoLimitCoin2                      |\n| 150        | 0x80000096                    | WHL     | WhaleCoin                         |\n| 151        | 0x80000097                    | ERC     | EuropeCoin                        |\n| 152        | 0x80000098                    | DMD     | Diamond                           |\n| 153        | 0x80000099                    | BTM     | Bytom                             |\n| 154        | 0x8000009a                    | BIO     | Biocoin                           |\n| 155        | 0x8000009b                    | XWCC    | Whitecoin Classic                 |\n| 156        | 0x8000009c                    | BTG     | Bitcoin Gold                      |\n| 157        | 0x8000009d                    | BTC2X   | Bitcoin 2x                        |\n| 158        | 0x8000009e                    | SSN     | SuperSkynet                       |\n| 159        | 0x8000009f                    | TOA     | TOACoin                           |\n| 160        | 0x800000a0                    | BTX     | Bitcore                           |\n| 161        | 0x800000a1                    | ACC     | Adcoin                            |\n| 162        | 0x800000a2                    | BCO     | Bridgecoin                        |\n| 163        | 0x800000a3                    | ELLA    | Ellaism                           |\n| 164        | 0x800000a4                    | PIRL    | Pirl                              |\n| 165        | 0x800000a5                    | XNO     | Nano                              |\n| 166        | 0x800000a6                    | VIVO    | Vivo                              |\n| 167        | 0x800000a7                    | FRST    | Firstcoin                         |\n| 168        | 0x800000a8                    | HNC     | Helleniccoin                      |\n| 169        | 0x800000a9                    | BUZZ    | BUZZ                              |\n| 170        | 0x800000aa                    | MBRS    | Ember                             |\n| 171        | 0x800000ab                    | HC      | Hcash                             |\n| 172        | 0x800000ac                    | HTML    | HTMLCOIN                          |\n| 173        | 0x800000ad                    | ODN     | Obsidian                          |\n| 174        | 0x800000ae                    | ONX     | OnixCoin                          |\n| 175        | 0x800000af                    | RVN     | Ravencoin                         |\n| 176        | 0x800000b0                    | GBX     | GoByte                            |\n| 177        | 0x800000b1                    | BTCZ    | BitcoinZ                          |\n| 178        | 0x800000b2                    | POA     | Poa                               |\n| 179        | 0x800000b3                    | NYC     | NewYorkCoin                       |\n| 180        | 0x800000b4                    | MXT     | MarteXcoin                        |\n| 181        | 0x800000b5                    | WC      | Wincoin                           |\n| 182        | 0x800000b6                    | MNX     | Minexcoin                         |\n| 183        | 0x800000b7                    | BTCP    | Bitcoin Private                   |\n| 184        | 0x800000b8                    | MUSIC   | Musicoin                          |\n| 185        | 0x800000b9                    | BCA     | Bitcoin Atom                      |\n| 186        | 0x800000ba                    | CRAVE   | Crave                             |\n| 187        | 0x800000bb                    | STAK    | STRAKS                            |\n| 188        | 0x800000bc                    | WBTC    | World Bitcoin                     |\n| 189        | 0x800000bd                    | LCH     | LiteCash                          |\n| 190        | 0x800000be                    | EXCL    | ExclusiveCoin                     |\n| 191        | 0x800000bf                    |         | Lynx                              |\n| 192        | 0x800000c0                    | LCC     | LitecoinCash                      |\n| 193        | 0x800000c1                    | XFE     | Feirm                             |\n| 194        | 0x800000c2                    | EOS     | EOS                               |\n| 195        | 0x800000c3                    | TRX     | Tron                              |\n| 196        | 0x800000c4                    | KOBO    | Kobocoin                          |\n| 197        | 0x800000c5                    | HUSH    | HUSH                              |\n| 198        | 0x800000c6                    | BAN     | Banano                            |\n| 199        | 0x800000c7                    | ETF     | ETF                               |\n| 200        | 0x800000c8                    | OMNI    | Omni                              |\n| 201        | 0x800000c9                    | BIFI    | BitcoinFile                       |\n| 202        | 0x800000ca                    | UFO     | Uniform Fiscal Object             |\n| 203        | 0x800000cb                    | CNMC    | Cryptonodes                       |\n| 204        | 0x800000cc                    | BCN     | Bytecoin                          |\n| 205        | 0x800000cd                    | RIN     | Ringo                             |\n| 206        | 0x800000ce                    | ATP     | Alaya                             |\n| 207        | 0x800000cf                    | EVT     | everiToken                        |\n| 208        | 0x800000d0                    | ATN     | ATN                               |\n| 209        | 0x800000d1                    | BIS     | Bismuth                           |\n| 210        | 0x800000d2                    | NEET    | NEETCOIN                          |\n| 211        | 0x800000d3                    | BOPO    | BopoChain                         |\n| 212        | 0x800000d4                    | OOT     | Utrum                             |\n| 213        | 0x800000d5                    | ALIAS   | Alias                             |\n| 214        | 0x800000d6                    | MONK    | Monkey Project                    |\n| 215        | 0x800000d7                    | BOXY    | BoxyCoin                          |\n| 216        | 0x800000d8                    | FLO     | Flo                               |\n| 217        | 0x800000d9                    | MEC     | Megacoin                          |\n| 218        | 0x800000da                    | BTDX    | BitCloud                          |\n| 219        | 0x800000db                    | XAX     | Artax                             |\n| 220        | 0x800000dc                    | ANON    | ANON                              |\n| 221        | 0x800000dd                    | LTZ     | LitecoinZ                         |\n| 222        | 0x800000de                    | BITG    | Bitcoin Green                     |\n| 223        | 0x800000df                    | ICP     | Internet Computer (DFINITY)       |\n| 224        | 0x800000e0                    | SMART   | Smartcash                         |\n| 225        | 0x800000e1                    | XUEZ    | XUEZ                              |\n| 226        | 0x800000e2                    | HLM     | Helium                            |\n| 227        | 0x800000e3                    | WEB     | Webchain                          |\n| 228        | 0x800000e4                    | ACM     | Actinium                          |\n| 229        | 0x800000e5                    | NOS     | NOS Stable Coins                  |\n| 230        | 0x800000e6                    | BITC    | BitCash                           |\n| 231        | 0x800000e7                    | HTH     | Help The Homeless Coin            |\n| 232        | 0x800000e8                    | TZC     | Trezarcoin                        |\n| 233        | 0x800000e9                    | VAR     | Varda                             |\n| 234        | 0x800000ea                    | IOV     | IOV                               |\n| 235        | 0x800000eb                    | FIO     | FIO                               |\n| 236        | 0x800000ec                    | BSV     | BitcoinSV                         |\n| 237        | 0x800000ed                    | DXN     | DEXON                             |\n| 238        | 0x800000ee                    | QRL     | Quantum Resistant Ledger          |\n| 239        | 0x800000ef                    | PCX     | ChainX                            |\n| 240        | 0x800000f0                    | LOKI    | Loki                              |\n| 241        | 0x800000f1                    |         | Imagewallet                       |\n| 242        | 0x800000f2                    | NIM     | Nimiq                             |\n| 243        | 0x800000f3                    | SOV     | Sovereign Coin                    |\n| 244        | 0x800000f4                    | JCT     | Jibital Coin                      |\n| 245        | 0x800000f5                    | SLP     | Simple Ledger Protocol            |\n| 246        | 0x800000f6                    | EWT     | Energy Web                        |\n| 247        | 0x800000f7                    | UC      | Ulord                             |\n| 248        | 0x800000f8                    | EXOS    | EXOS                              |\n| 249        | 0x800000f9                    | ECA     | Electra                           |\n| 250        | 0x800000fa                    | SOOM    | Soom                              |\n| 251        | 0x800000fb                    | XRD     | Redstone                          |\n| 252        | 0x800000fc                    | FREE    | FreeCoin                          |\n| 253        | 0x800000fd                    | NPW     | NewPowerCoin                      |\n| 254        | 0x800000fe                    | BST     | BlockStamp                        |\n| 255        | 0x800000ff                    |         | SmartHoldem                       |\n| 256        | 0x80000100                    | NANO    | Bitcoin Nano                      |\n| 257        | 0x80000101                    | BTCC    | Bitcoin Core                      |\n| 258        | 0x80000102                    |         | Zen Protocol                      |\n| 259        | 0x80000103                    | ZEST    | Zest                              |\n| 260        | 0x80000104                    | ABT     | ArcBlock                          |\n| 261        | 0x80000105                    | PION    | Pion                              |\n| 262        | 0x80000106                    | DT3     | DreamTeam3                        |\n| 263        | 0x80000107                    | ZBUX    | Zbux                              |\n| 264        | 0x80000108                    | KPL     | Kepler                            |\n| 265        | 0x80000109                    | TPAY    | TokenPay                          |\n| 266        | 0x8000010a                    | ZILLA   | ChainZilla                        |\n| 267        | 0x8000010b                    | ANK     | Anker                             |\n| 268        | 0x8000010c                    | BCC     | BCChain                           |\n| 269        | 0x8000010d                    | HPB     | HPB                               |\n| 270        | 0x8000010e                    | ONE     | ONE                               |\n| 271        | 0x8000010f                    | SBC     | SBC                               |\n| 272        | 0x80000110                    | IPC     | IPChain                           |\n| 273        | 0x80000111                    | DMTC    | Dominantchain                     |\n| 274        | 0x80000112                    | OGC     | Onegram                           |\n| 275        | 0x80000113                    | SHIT    | Shitcoin                          |\n| 276        | 0x80000114                    | ANDES   | Andescoin                         |\n| 277        | 0x80000115                    | AREPA   | Arepacoin                         |\n| 278        | 0x80000116                    | BOLI    | Bolivarcoin                       |\n| 279        | 0x80000117                    | RIL     | Rilcoin                           |\n| 280        | 0x80000118                    | HTR     | Hathor Network                    |\n| 281        | 0x80000119                    | ACME    | Accumulate                        |\n| 282        | 0x8000011a                    | BRAVO   | BRAVO                             |\n| 283        | 0x8000011b                    | ALGO    | Algorand                          |\n| 284        | 0x8000011c                    | BZX     | Bitcoinzero                       |\n| 285        | 0x8000011d                    | GXX     | GravityCoin                       |\n| 286        | 0x8000011e                    | HEAT    | HEAT                              |\n| 287        | 0x8000011f                    | XDN     | DigitalNote                       |\n| 288        | 0x80000120                    | FSN     | FUSION                            |\n| 289        | 0x80000121                    | CPC     | Capricoin                         |\n| 290        | 0x80000122                    | BOLD    | Bold                              |\n| 291        | 0x80000123                    | IOST    | IOST                              |\n| 292        | 0x80000124                    | TKEY    | Tkeycoin                          |\n| 293        | 0x80000125                    | USE     | Usechain                          |\n| 294        | 0x80000126                    | BCZ     | BitcoinCZ                         |\n| 295        | 0x80000127                    | IOC     | Iocoin                            |\n| 296        | 0x80000128                    | ASF     | Asofe                             |\n| 297        | 0x80000129                    | MASS    | MASS                              |\n| 298        | 0x8000012a                    | FAIR    | FairCoin                          |\n| 299        | 0x8000012b                    | NUKO    | Nekonium                          |\n| 300        | 0x8000012c                    | GNX     | Genaro Network                    |\n| 301        | 0x8000012d                    | DIVI    | Divi Project                      |\n| 302        | 0x8000012e                    | CMT     | Community                         |\n| 303        | 0x8000012f                    | EUNO    | EUNO                              |\n| 304        | 0x80000130                    | IOTX    | IoTeX                             |\n| 305        | 0x80000131                    | ONION   | DeepOnion                         |\n| 306        | 0x80000132                    | 8BIT    | 8Bit                              |\n| 307        | 0x80000133                    | ATC     | AToken Coin                       |\n| 308        | 0x80000134                    | BTS     | Bitshares                         |\n| 309        | 0x80000135                    | CKB     | Nervos CKB                        |\n| 310        | 0x80000136                    | UGAS    | Ultrain                           |\n| 311        | 0x80000137                    | ADS     | Adshares                          |\n| 312        | 0x80000138                    | ARA     | Aura                              |\n| 313        | 0x80000139                    | ZIL     | Zilliqa                           |\n| 314        | 0x8000013a                    | MOAC    | MOAC                              |\n| 315        | 0x8000013b                    | SWTC    | SWTC                              |\n| 316        | 0x8000013c                    | VNSC    | vnscoin                           |\n| 317        | 0x8000013d                    | PLUG    | Pl^g                              |\n| 318        | 0x8000013e                    | MAN     | Matrix AI Network                 |\n| 319        | 0x8000013f                    | ECC     | ECCoin                            |\n| 320        | 0x80000140                    | RPD     | Rapids                            |\n| 321        | 0x80000141                    | RAP     | Rapture                           |\n| 322        | 0x80000142                    | GARD    | Hashgard                          |\n| 323        | 0x80000143                    | ZER     | Zero                              |\n| 324        | 0x80000144                    | EBST    | eBoost                            |\n| 325        | 0x80000145                    | SHARD   | Shard                             |\n| 326        | 0x80000146                    | MRX     | Metrix Coin                       |\n| 327        | 0x80000147                    | CMM     | Commercium                        |\n| 328        | 0x80000148                    | BLOCK   | Blocknet                          |\n| 329        | 0x80000149                    | AUDAX   | AUDAX                             |\n| 330        | 0x8000014a                    | LUNA    | Terra                             |\n| 331        | 0x8000014b                    | ZPM     | zPrime                            |\n| 332        | 0x8000014c                    | KUVA    | Kuva Utility Note                 |\n| 333        | 0x8000014d                    | MEM     | MemCoin                           |\n| 334        | 0x8000014e                    | CS      | Credits                           |\n| 335        | 0x8000014f                    | SWIFT   | SwiftCash                         |\n| 336        | 0x80000150                    | FIX     | FIX                               |\n| 337        | 0x80000151                    | CPC     | CPChain                           |\n| 338        | 0x80000152                    | VGO     | VirtualGoodsToken                 |\n| 339        | 0x80000153                    | DVT     | DeVault                           |\n| 340        | 0x80000154                    | N8V     | N8VCoin                           |\n| 341        | 0x80000155                    | MTNS    | OmotenashiCoin                    |\n| 342        | 0x80000156                    | BLAST   | BLAST                             |\n| 343        | 0x80000157                    | DCT     | DECENT                            |\n| 344        | 0x80000158                    | AUX     | Auxilium                          |\n| 345        | 0x80000159                    | USDP    | USDP                              |\n| 346        | 0x8000015a                    | HTDF    | HTDF                              |\n| 347        | 0x8000015b                    | YEC     | Ycash                             |\n| 348        | 0x8000015c                    | QLC     | QLC Chain                         |\n| 349        | 0x8000015d                    | TEA     | Icetea Blockchain                 |\n| 350        | 0x8000015e                    | ARW     | ArrowChain                        |\n| 351        | 0x8000015f                    | MDM     | Medium                            |\n| 352        | 0x80000160                    | CYB     | Cybex                             |\n| 353        | 0x80000161                    | LTO     | LTO Network                       |\n| 354        | 0x80000162                    | DOT     | Polkadot                          |\n| 355        | 0x80000163                    | AEON    | Aeon                              |\n| 356        | 0x80000164                    | RES     | Resistance                        |\n| 357        | 0x80000165                    | AYA     | Aryacoin                          |\n| 358        | 0x80000166                    | DAPS    | Dapscoin                          |\n| 359        | 0x80000167                    | CSC     | CasinoCoin                        |\n| 360        | 0x80000168                    | VSYS    | V Systems                         |\n| 361        | 0x80000169                    | NOLLAR  | Nollar                            |\n| 362        | 0x8000016a                    | XNOS    | NOS                               |\n| 363        | 0x8000016b                    | CPU     | CPUchain                          |\n| 364        | 0x8000016c                    | LAMB    | Lambda Storage Chain              |\n| 365        | 0x8000016d                    | VCT     | ValueCyber                        |\n| 366        | 0x8000016e                    | CZR     | Canonchain                        |\n| 367        | 0x8000016f                    | ABBC    | ABBC                              |\n| 368        | 0x80000170                    | HET     | HET                               |\n| 369        | 0x80000171                    | XAS     | Asch                              |\n| 370        | 0x80000172                    | VDL     | Vidulum                           |\n| 371        | 0x80000173                    | MED     | MediBloc                          |\n| 372        | 0x80000174                    | ZVC     | ZVChain                           |\n| 373        | 0x80000175                    | VESTX   | Vestx                             |\n| 374        | 0x80000176                    | DBT     | DarkBit                           |\n| 375        | 0x80000177                    | SEOS    | SuperEOS                          |\n| 376        | 0x80000178                    | MXW     | Maxonrow                          |\n| 377        | 0x80000179                    | ZNZ     | ZENZO                             |\n| 378        | 0x8000017a                    | XCX     | XChain                            |\n| 379        | 0x8000017b                    | SOX     | SonicX                            |\n| 380        | 0x8000017c                    | NYZO    | Nyzo                              |\n| 381        | 0x8000017d                    | ULC     | ULCoin                            |\n| 382        | 0x8000017e                    | RYO     | Ryo Currency                      |\n| 383        | 0x8000017f                    | KAL     | Kaleidochain                      |\n| 384        | 0x80000180                    | XSN     | Stakenet                          |\n| 385        | 0x80000181                    | DOGEC   | DogeCash                          |\n| 386        | 0x80000182                    | BMV     | Bitcoin Matteo's Vision           |\n| 387        | 0x80000183                    | QBC     | Quebecoin                         |\n| 388        | 0x80000184                    | IMG     | ImageCoin                         |\n| 389        | 0x80000185                    | QOS     | QOS                               |\n| 390        | 0x80000186                    | PKT     | PKT                               |\n| 391        | 0x80000187                    | LHD     | LitecoinHD                        |\n| 392        | 0x80000188                    | CENNZ   | CENNZnet                          |\n| 393        | 0x80000189                    | HSN     | Hyper Speed Network               |\n| 394        | 0x8000018a                    | CRO     | Crypto Chain                      |\n| 395        | 0x8000018b                    | UMBRU   | Umbru                             |\n| 396        | 0x8000018c                    | EVER    | Everscale                         |\n| 397        | 0x8000018d                    | NEAR    | NEAR Protocol                     |\n| 398        | 0x8000018e                    | XPC     | XPChain                           |\n| 399        | 0x8000018f                    | ZOC     | 01coin                            |\n| 400        | 0x80000190                    | NIX     | NIX                               |\n| 401        | 0x80000191                    | UC      | Utopiacoin                        |\n| 402        | 0x80000192                    | GALI    | Galilel                           |\n| 403        | 0x80000193                    | OLT     | Oneledger                         |\n| 404        | 0x80000194                    | XBI     | XBI                               |\n| 405        | 0x80000195                    | DONU    | DONU                              |\n| 406        | 0x80000196                    | EARTHS  | Earths                            |\n| 407        | 0x80000197                    | HDD     | HDDCash                           |\n| 408        | 0x80000198                    | SUGAR   | Sugarchain                        |\n| 409        | 0x80000199                    | AILE    | AileCoin                          |\n| 410        | 0x8000019a                    | TENT    | TENT                              |\n| 411        | 0x8000019b                    | TAN     | Tangerine Network                 |\n| 412        | 0x8000019c                    | AIN     | AIN                               |\n| 413        | 0x8000019d                    | MSR     | Masari                            |\n| 414        | 0x8000019e                    | SUMO    | Sumokoin                          |\n| 415        | 0x8000019f                    | ETN     | Electroneum                       |\n| 416        | 0x800001a0                    | BYTZ    | BYTZ                              |\n| 417        | 0x800001a1                    | WOW     | Wownero                           |\n| 418        | 0x800001a2                    | XTNC    | XtendCash                         |\n| 419        | 0x800001a3                    | LTHN    | Lethean                           |\n| 420        | 0x800001a4                    | NODE    | NodeHost                          |\n| 421        | 0x800001a5                    | AGM     | Argoneum                          |\n| 422        | 0x800001a6                    | CCX     | Conceal Network                   |\n| 423        | 0x800001a7                    | TNET    | Title Network                     |\n| 424        | 0x800001a8                    | TELOS   | TelosCoin                         |\n| 425        | 0x800001a9                    | AION    | Aion                              |\n| 426        | 0x800001aa                    | BC      | Bitcoin Confidential              |\n| 427        | 0x800001ab                    | KTV     | KmushiCoin                        |\n| 428        | 0x800001ac                    | ZCR     | ZCore                             |\n| 429        | 0x800001ad                    | ERG     | Ergo                              |\n| 430        | 0x800001ae                    | PESO    | Criptopeso                        |\n| 431        | 0x800001af                    | BTC2    | Bitcoin 2                         |\n| 432        | 0x800001b0                    | XRPHD   | XRPHD                             |\n| 433        | 0x800001b1                    | WE      | WE Coin                           |\n| 434        | 0x800001b2                    | KSM     | Kusama                            |\n| 435        | 0x800001b3                    | PCN     | Peepcoin                          |\n| 436        | 0x800001b4                    | NCH     | NetCloth                          |\n| 437        | 0x800001b5                    | ICU     | CHIPO                             |\n| 438        | 0x800001b6                    | FNSA    | FINSCHIA                          |\n| 439        | 0x800001b7                    | DTP     | DeVault Token Protocol            |\n| 440        | 0x800001b8                    | BTCR    | Bitcoin Royale                    |\n| 441        | 0x800001b9                    | AERGO   | AERGO                             |\n| 442        | 0x800001ba                    | XTH     | Dothereum                         |\n| 443        | 0x800001bb                    | LV      | Lava                              |\n| 444        | 0x800001bc                    | PHR     | Phore                             |\n| 445        | 0x800001bd                    | VITAE   | Vitae                             |\n| 446        | 0x800001be                    | COCOS   | Cocos-BCX                         |\n| 447        | 0x800001bf                    | DIN     | Dinero                            |\n| 448        | 0x800001c0                    | SPL     | Simplicity                        |\n| 449        | 0x800001c1                    | YCE     | MYCE                              |\n| 450        | 0x800001c2                    | XLR     | Solaris                           |\n| 451        | 0x800001c3                    | KTS     | Klimatas                          |\n| 452        | 0x800001c4                    | DGLD    | DGLD                              |\n| 453        | 0x800001c5                    | XNS     | Insolar                           |\n| 454        | 0x800001c6                    | EM      | EMPOW                             |\n| 455        | 0x800001c7                    | SHN     | ShineBlocks                       |\n| 456        | 0x800001c8                    | SEELE   | Seele                             |\n| 457        | 0x800001c9                    | AE      | æternity                          |\n| 458        | 0x800001ca                    | ODX     | ObsidianX                         |\n| 459        | 0x800001cb                    | KAVA    | Kava                              |\n| 460        | 0x800001cc                    | GLEEC   | GLEEC                             |\n| 461        | 0x800001cd                    | FIL     | Filecoin                          |\n| 462        | 0x800001ce                    | RUTA    | Rutanio                           |\n| 463        | 0x800001cf                    | CSDT    | CSDT                              |\n| 464        | 0x800001d0                    | ETI     | EtherInc                          |\n| 465        | 0x800001d1                    | ZSLP    | Zclassic Simple Ledger Protocol   |\n| 466        | 0x800001d2                    | ERE     | EtherCore                         |\n| 467        | 0x800001d3                    | DX      | DxChain Token                     |\n| 468        | 0x800001d4                    | CPS     | Capricoin+                        |\n| 469        | 0x800001d5                    | BTH     | Bithereum                         |\n| 470        | 0x800001d6                    | MESG    | MESG                              |\n| 471        | 0x800001d7                    | FIMK    | FIMK                              |\n| 472        | 0x800001d8                    | AR      | Arweave                           |\n| 473        | 0x800001d9                    | OGO     | Origo                             |\n| 474        | 0x800001da                    | ROSE    | Oasis Network                     |\n| 475        | 0x800001db                    | BARE    | BARE Network                      |\n| 476        | 0x800001dc                    | GLEEC   | GleecBTC                          |\n| 477        | 0x800001dd                    | CLR     | Color Coin                        |\n| 478        | 0x800001de                    | RNG     | Ring                              |\n| 479        | 0x800001df                    | OLO     | Tool Global                       |\n| 480        | 0x800001e0                    | PEXA    | Pexa                              |\n| 481        | 0x800001e1                    | MOON    | Mooncoin                          |\n| 482        | 0x800001e2                    | OCEAN   | Ocean Protocol                    |\n| 483        | 0x800001e3                    | BNT     | Bluzelle Native                   |\n| 484        | 0x800001e4                    | AMO     | AMO Blockchain                    |\n| 485        | 0x800001e5                    | FCH     | FreeCash                          |\n| 486        | 0x800001e6                    | LAT     | PlatON                            |\n| 487        | 0x800001e7                    | COIN    | Bitcoin Bank                      |\n| 488        | 0x800001e8                    | VEO     | Amoveo                            |\n| 489        | 0x800001e9                    | CCA     | Counos Coin                       |\n| 490        | 0x800001ea                    | GFN     | Graphene                          |\n| 491        | 0x800001eb                    | BIP     | Minter Network                    |\n| 492        | 0x800001ec                    | KPG     | Kunpeng Network                   |\n| 493        | 0x800001ed                    | FIN     | FINL Chain                        |\n| 494        | 0x800001ee                    | BAND    | Band                              |\n| 495        | 0x800001ef                    | DROP    | Dropil                            |\n| 496        | 0x800001f0                    | BHT     | Bluehelix Chain                   |\n| 497        | 0x800001f1                    | LYRA    | Scrypta                           |\n| 498        | 0x800001f2                    | CS      | Credits                           |\n| 499        | 0x800001f3                    | RUPX    | Rupaya                            |\n| 500        | 0x800001f4                    | THETA   | Theta                             |\n| 501        | 0x800001f5                    | SOL     | Solana                            |\n| 502        | 0x800001f6                    | THT     | ThoughtAI                         |\n| 503        | 0x800001f7                    | CFX     | Conflux                           |\n| 504        | 0x800001f8                    | KUMA    | Kumacoin                          |\n| 505        | 0x800001f9                    | HASH    | Provenance                        |\n| 506        | 0x800001fa                    | CSPR    | Casper                            |\n| 507        | 0x800001fb                    | EARTH   | EARTH                             |\n| 508        | 0x800001fc                    | EGLD    | MultiversX                        |\n| 509        | 0x800001fd                    | CHI     | Xaya                              |\n| 510        | 0x800001fe                    | KOTO    | Koto                              |\n| 511        | 0x800001ff                    | OTC     | θ                                 |\n| 512        | 0x80000200                    | RXD     | Radiant                           |\n| 513        | 0x80000201                    | SEELEN  | Seele-N                           |\n| 514        | 0x80000202                    | AETH    | AETH                              |\n| 515        | 0x80000203                    | DNA     | Idena                             |\n| 516        | 0x80000204                    | VEE     | Virtual Economy Era               |\n| 517        | 0x80000205                    | SIERRA  | SierraCoin                        |\n| 518        | 0x80000206                    | LET     | Linkeye                           |\n| 519        | 0x80000207                    | BSC     | Bitcoin Smart Contract            |\n| 520        | 0x80000208                    | BTCV    | BitcoinVIP                        |\n| 521        | 0x80000209                    | ABA     | Dabacus                           |\n| 522        | 0x8000020a                    | SCC     | StakeCubeCoin                     |\n| 523        | 0x8000020b                    | EDG     | Edgeware                          |\n| 524        | 0x8000020c                    | AMS     | AmsterdamCoin                     |\n| 525        | 0x8000020d                    | GOSS    | GOSSIP Coin                       |\n| 526        | 0x8000020e                    | BU      | BUMO                              |\n| 527        | 0x8000020f                    | GRAM    | GRAM                              |\n| 528        | 0x80000210                    | YAP     | Yapstone                          |\n| 529        | 0x80000211                    | SCRT    | Secret Network                    |\n| 530        | 0x80000212                    | NOVO    | Novo                              |\n| 531        | 0x80000213                    | GHOST   | Ghost                             |\n| 532        | 0x80000214                    | HST     | HST                               |\n| 533        | 0x80000215                    | PRJ     | ProjectCoin                       |\n| 534        | 0x80000216                    | YOU     | YOUChain                          |\n| 535        | 0x80000217                    | XHV     | Haven Protocol                    |\n| 536        | 0x80000218                    | BYND    | Beyondcoin                        |\n| 537        | 0x80000219                    | JOYS    | Joys Digital                      |\n| 538        | 0x8000021a                    | VAL     | Valorbit                          |\n| 539        | 0x8000021b                    | FLOW    | Flow                              |\n| 540        | 0x8000021c                    | SMESH   | Spacemesh Coin                    |\n| 541        | 0x8000021d                    | SCDO    | SCDO                              |\n| 542        | 0x8000021e                    | IQS     | IQ-Cash                           |\n| 543        | 0x8000021f                    | BIND    | Compendia                         |\n| 544        | 0x80000220                    | COINEVO | Coinevo                           |\n| 545        | 0x80000221                    | SCRIBE  | Scribe                            |\n| 546        | 0x80000222                    | HYN     | Hyperion                          |\n| 547        | 0x80000223                    | BHP     | BHP                               |\n| 548        | 0x80000224                    | BBC     | BigBang Core                      |\n| 549        | 0x80000225                    | MKF     | MarketFinance                     |\n| 550        | 0x80000226                    | XDC     | XinFin                            |\n| 551        | 0x80000227                    | STR     | Straightedge                      |\n| 552        | 0x80000228                    | SUM     | Sumcoin                           |\n| 553        | 0x80000229                    | HBC     | HuobiChain                        |\n| 554        | 0x8000022a                    | ---     | reserved                          |\n| 555        | 0x8000022b                    | BCS     | Bitcoin Smart                     |\n| 556        | 0x8000022c                    | KTS     | Kratos                            |\n| 557        | 0x8000022d                    | LKR     | Lkrcoin                           |\n| 558        | 0x8000022e                    | TAO     | Tao                               |\n| 559        | 0x8000022f                    | XWC     | Whitecoin                         |\n| 560        | 0x80000230                    | DEAL    | DEAL                              |\n| 561        | 0x80000231                    | NTY     | Nexty                             |\n| 562        | 0x80000232                    | TOP     | TOP NetWork                       |\n| 563        | 0x80000233                    | ---     | reserved                          |\n| 564        | 0x80000234                    | AG      | Agoric                            |\n| 565        | 0x80000235                    | CICO    | Coinicles                         |\n| 566        | 0x80000236                    | IRIS    | Irisnet                           |\n| 567        | 0x80000237                    | NCG     | Nine Chronicles                   |\n| 568        | 0x80000238                    | LRG     | Large Coin                        |\n| 569        | 0x80000239                    | SERO    | Super Zero Protocol               |\n| 570        | 0x8000023a                    | BDX     | Beldex                            |\n| 571        | 0x8000023b                    | CCXX    | Counos X                          |\n| 572        | 0x8000023c                    | SLS     | Saluscoin                         |\n| 573        | 0x8000023d                    | SRM     | Serum                             |\n| 574        | 0x8000023e                    | ---     | reserved                          |\n| 575        | 0x8000023f                    | VIVT    | VIDT Datalink                     |\n| 576        | 0x80000240                    | BPS     | BitcoinPoS                        |\n| 577        | 0x80000241                    | NKN     | NKN                               |\n| 578        | 0x80000242                    | ICL     | ILCOIN                            |\n| 579        | 0x80000243                    | BONO    | Bonorum                           |\n| 580        | 0x80000244                    | PLC     | PLATINCOIN                        |\n| 581        | 0x80000245                    | DUN     | Dune                              |\n| 582        | 0x80000246                    | DMCH    | Darmacash                         |\n| 583        | 0x80000247                    | CTC     | Creditcoin                        |\n| 584        | 0x80000248                    | KELP    | Haidai Network                    |\n| 585        | 0x80000249                    | GBCR    | GoldBCR                           |\n| 586        | 0x8000024a                    | XDAG    | XDAG                              |\n| 587        | 0x8000024b                    | PRV     | Incognito Privacy                 |\n| 588        | 0x8000024c                    | SCAP    | SafeCapital                       |\n| 589        | 0x8000024d                    | TFUEL   | Theta Fuel                        |\n| 590        | 0x8000024e                    | GTM     | Gentarium                         |\n| 591        | 0x8000024f                    | RNL     | RentalChain                       |\n| 592        | 0x80000250                    | GRIN    | Grin                              |\n| 593        | 0x80000251                    | MWC     | MimbleWimbleCoin                  |\n| 594        | 0x80000252                    | DOCK    | Dock                              |\n| 595        | 0x80000253                    | POLYX   | Polymesh                          |\n| 596        | 0x80000254                    | DIVER   | Divergenti                        |\n| 597        | 0x80000255                    | XEP     | Electra Protocol                  |\n| 598        | 0x80000256                    | APN     | Apron                             |\n| 599        | 0x80000257                    | TFC     | Turbo File Coin                   |\n| 600        | 0x80000258                    | UTE     | Unit-e                            |\n| 601        | 0x80000259                    | MTC     | Metacoin                          |\n| 602        | 0x8000025a                    | NC      | NobodyCash                        |\n| 603        | 0x8000025b                    | XINY    | Xinyuehu                          |\n| 604        | 0x8000025c                    | DYN     | Dynamo                            |\n| 605        | 0x8000025d                    | BUFS    | Buffer                            |\n| 606        | 0x8000025e                    | STOS    | Stratos                           |\n| 607        | 0x8000025f                    | TON     | TON                               |\n| 608        | 0x80000260                    | TAFT    | TAFT                              |\n| 609        | 0x80000261                    | HYDRA   | HYDRA                             |\n| 610        | 0x80000262                    | NOR     | Noir                              |\n| 611        | 0x80000263                    |         | Manta Network Private Asset       |\n| 612        | 0x80000264                    |         | Calamari Network Private Asset    |\n| 613        | 0x80000265                    | WCN     | Widecoin                          |\n| 614        | 0x80000266                    | OPT     | Optimistic Ethereum               |\n| 615        | 0x80000267                    | PSWAP   | PolkaSwap                         |\n| 616        | 0x80000268                    | VAL     | Validator                         |\n| 617        | 0x80000269                    | XOR     | Sora                              |\n| 618        | 0x8000026a                    | SSP     | SmartShare                        |\n| 619        | 0x8000026b                    | DEI     | DeimosX                           |\n| 620        | 0x8000026c                    | ---     | reserved                          |\n| 621        | 0x8000026d                    | ZERO    | Singularity                       |\n| 622        | 0x8000026e                    | ALPHA   | AlphaDAO                          |\n| 623        | 0x8000026f                    | BDECO   | BDCashProtocol Ecosystem          |\n| 624        | 0x80000270                    | NOBL    | Nobility                          |\n| 625        | 0x80000271                    | EAST    | Eastcoin                          |\n| 626        | 0x80000272                    | KDA     | Kadena                            |\n| 627        | 0x80000273                    | SOUL    | Phantasma                         |\n| 628        | 0x80000274                    | LORE    | Gitopia                           |\n| 629        | 0x80000275                    | FNR     | Fincor                            |\n| 630        | 0x80000276                    | NEXUS   | Nexus                             |\n| 631        | 0x80000277                    | QTZ     | Quartz                            |\n| 632        | 0x80000278                    | MAS     | Massa                             |\n| 633        | 0x80000279                    | CALL    | Callchain                         |\n| 634        | 0x8000027a                    | VAL     | Validity                          |\n| 635        | 0x8000027b                    | POKT    | Pocket Network                    |\n| 636        | 0x8000027c                    | EMIT    | EMIT                              |\n| 637        | 0x8000027d                    | APTOS   | Aptos                             |\n| 638        | 0x8000027e                    | ADON    | ADON                              |\n| 639        | 0x8000027f                    | BTSG    | BitSong                           |\n| 640        | 0x80000280                    | LFC     | Leofcoin                          |\n| 641        | 0x80000281                    | KCS     | KuCoin Shares                     |\n| 642        | 0x80000282                    | KCC     | KuCoin Community Chain            |\n| 643        | 0x80000283                    | AZERO   | Aleph Zero                        |\n| 644        | 0x80000284                    | TREE    | Tree                              |\n| 645        | 0x80000285                    | LX      | Lynx                              |\n| 646        | 0x80000286                    | XLN     | Lunarium                          |\n| 647        | 0x80000287                    | CIC     | CIC Chain                         |\n| 648        | 0x80000288                    | ZRB     | Zarb                              |\n| 649        | 0x80000289                    | ---     | reserved                          |\n| 650        | 0x8000028a                    | UCO     | Archethic                         |\n| 651        | 0x8000028b                    | SFX     | Safex Cash                        |\n| 652        | 0x8000028c                    | SFT     | Safex Token                       |\n| 653        | 0x8000028d                    | WSFX    | Wrapped Safex Cash                |\n| 654        | 0x8000028e                    | USDG    | US Digital Gold                   |\n| 655        | 0x8000028f                    | WMP     | WAMP                              |\n| 656        | 0x80000290                    | EKTA    | Ekta                              |\n| 657        | 0x80000291                    | YDA     | YadaCoin                          |\n| 658        | 0x80000292                    | WHIVE   | Whive                             |\n| 659        | 0x80000293                    | KOIN    | Koinos                            |\n| 660        | 0x80000294                    | PIRATE  | PirateCash                        |\n| 661        | 0x80000295                    | UNQ     | Unique                            |\n| 662        | 0x80000296                    | ULM     | UltonSmartchain                   |\n| 663        | 0x80000297                    | SFRX    | EtherGem Sapphire                 |\n| 664        | 0x80000298                    | BSTY    | GlobalBoost-Y                     |\n| 665        | 0x80000299                    | IMP     | Impact Protocol                   |\n| 666        | 0x8000029a                    | ACT     | Achain                            |\n| 667        | 0x8000029b                    | PRKL    | Perkle                            |\n| 668        | 0x8000029c                    | SSC     | SelfSell                          |\n| 669        | 0x8000029d                    | GC      | GateChain                         |\n| 670        | 0x8000029e                    | PLGR    | Pledger                           |\n| 671        | 0x8000029f                    | MPLGR   | Pledger                           |\n| 672        | 0x800002a0                    | KNOX    | Knox                              |\n| 673        | 0x800002a1                    | ZED     | ZED                               |\n| 674        | 0x800002a2                    | CNDL    | Candle                            |\n| 675        | 0x800002a3                    | WLKR    | Walker Crypto Innovation Index    |\n| 676        | 0x800002a4                    | WLKRR   | Walker                            |\n| 677        | 0x800002a5                    | YUNGE   | Yunge                             |\n| 678        | 0x800002a6                    | Voken   | Voken                             |\n| 679        | 0x800002a7                    | APL     | Apollo                            |\n| 680        | 0x800002a8                    | Evrynet | Evrynet                           |\n| 681        | 0x800002a9                    | NENG    | Nengcoin                          |\n| 682        | 0x800002aa                    | CHTA    | Cheetahcoin                       |\n| 683        | 0x800002ab                    | ALEO    | Aleo Network                      |\n| 684        | 0x800002ac                    | HMS     | Hemis                             |\n| 685        | 0x800002ad                    | OAS     | Oasys                             |\n| 686        | 0x800002ae                    | KAR     | Karura Network                    |\n| 687        | 0x800002af                    | FLON    | FullOn Network                    |\n| 688        | 0x800002b0                    | CET     | CoinEx Chain                      |\n| 689        | 0x800002b1                    | XLINK   | XLink Chain                       |\n| 690        | 0x800002b2                    | KLV     | KleverChain                       |\n| 691        | 0x800002b3                    | TNT     | Tangle                            |\n| 692        | 0x800002b4                    | GTG     | Gotigin                           |\n| 693        | 0x800002b5                    | NET     | RealityNet                        |\n| 694        | 0x800002b6                    | VTBC    | VTB Community                     |\n| 695        | 0x800002b7                    | DIONE   | Odyssey Chain                     |\n| 696        | 0x800002b8                    | LUM     | Lumos                             |\n| 697        | 0x800002b9                    | AVA     | Avalon                            |\n| 698        | 0x800002ba                    | VEIL    | Veil                              |\n| 699        | 0x800002bb                    | GTB     | GotaBit                           |\n| 700        | 0x800002bc                    | XDAI    | xDai                              |\n| 701        | 0x800002bd                    | COM     | Commercio                         |\n| 702        | 0x800002be                    | CCC     | Commercio Cash Credit             |\n| 703        | 0x800002bf                    | SNR     | Sonr                              |\n| 704        | 0x800002c0                    | RAQ     | Ra Quantum                        |\n| 705        | 0x800002c1                    | PEG     | Pegasus Token                     |\n| 706        | 0x800002c2                    | LKG     | Lionking                          |\n| 707        | 0x800002c3                    | MCOIN   | Moneta Coin                       |\n| 708        | 0x800002c4                    | ---     | reserved                          |\n| 709        | 0x800002c5                    | AVAIL   | Avail                             |\n| 710        | 0x800002c6                    | FURY    | Highbury                          |\n| 711        | 0x800002c7                    | CHC     | Chaincoin                         |\n| 712        | 0x800002c8                    | SERF    | Serfnet                           |\n| 713        | 0x800002c9                    | XTL     | Katal Chain                       |\n| 714        | 0x800002ca                    | BNB     | Binance                           |\n| 715        | 0x800002cb                    | SIN     | Sinovate                          |\n| 716        | 0x800002cc                    | DLN     | Delion                            |\n| 717        | 0x800002cd                    | BONTE   | Bontecoin                         |\n| 718        | 0x800002ce                    | PEER    | Peer                              |\n| 719        | 0x800002cf                    | ZET     | Zetacoin                          |\n| 720        | 0x800002d0                    | ABY     | Artbyte                           |\n| 721        | 0x800002d1                    | PGX     | Mirai Chain                       |\n| 722        | 0x800002d2                    | IL8P    | InfiniLooP                        |\n| 723        | 0x800002d3                    | VOI     | Voi                               |\n| 724        | 0x800002d4                    | XVC     | Vanillacash                       |\n| 725        | 0x800002d5                    | MCX     | MultiCash                         |\n| 726        | 0x800002d6                    | TARA    | Taraxa                            |\n| 727        | 0x800002d7                    | BLU     | BluCrates                         |\n| 728        | 0x800002d8                    | BFC     | BFC                               |\n| 729        | 0x800002d9                    | DCC     | DecentraCast                      |\n| 730        | 0x800002da                    | HEALIOS | Tenacity                          |\n| 731        | 0x800002db                    | BMK     | Bitmark                           |\n| 732        | 0x800002dc                    |         |\n| 733        | 0x800002dd                    | TBC     | TBChat                            |\n| 734        | 0x800002de                    | DENTX   | DENTNet                           |\n| 735        | 0x800002df                    |         |\n| 736        | 0x800002e0                    |         |\n| 737        | 0x800002e1                    | ATOP    | Financial Blockchain              |\n| 738        | 0x800002e2                    | BTE     | Bitweb                            |\n| 739        | 0x800002e3                    | DPC     | Dpowcoin (DualPowCoin)            |\n| 740        | 0x800002e4                    | MDC     | MyDataCoin                        |\n| 741        | 0x800002e5                    | RIV     | Rigvid\n| 742        | 0x800002e6                    |         |\n| 743        | 0x800002e7                    |         |\n| 744        | 0x800002e8                    | DUSK    | Dusk                              |\n| 745        | 0x800002e9                    |         |\n| 746        | 0x800002ea                    |         |\n| 747        | 0x800002eb                    | CFG     | Centrifuge                        |\n| 748        | 0x800002ec                    |         |\n| 749        | 0x800002ed                    |         |\n| 750        | 0x800002ee                    | XPRT    | Persistence                       |\n| 751        | 0x800002ef                    |         |\n| 752        | 0x800002f0                    |         |\n| 753        | 0x800002f1                    |         | Age X25519 Encryption             |\n| 754        | 0x800002f2                    |         | Age NIST Encryption               |\n| 755        | 0x800002f3                    |         |\n| 756        | 0x800002f4                    |         |\n| 757        | 0x800002f5                    | HONEY   | HoneyWood                         |\n| 758        | 0x800002f6                    | XDD     | XDDCoin                           |\n| 759        | 0x800002f7                    |         |\n| 760        | 0x800002f8                    |         |\n| 761        | 0x800002f9                    |         |\n| 762        | 0x800002fa                    |         |\n| 763        | 0x800002fb                    |         |\n| 764        | 0x800002fc                    |         |\n| 765        | 0x800002fd                    | TGN     | Tagion                            |\n| 766        | 0x800002fe                    |         |\n| 767        | 0x800002ff                    |         |\n| 768        | 0x80000300                    | BALLZ   | Ballzcoin                         |\n| 769        | 0x80000301                    |         |\n| 770        | 0x80000302                    | COSA    | Cosanta                           |\n| 771        | 0x80000303                    | BR      | BR                                |\n| 772        | 0x80000304                    |         |\n| 773        | 0x80000305                    | CSB     | CosmoBliss                        |\n| 774        | 0x80000306                    |         |\n| 775        | 0x80000307                    | PLSR    | Pulsar Coin                       |\n| 776        | 0x80000308                    | KEY     | Keymaker Coin                     |\n| 777        | 0x80000309                    | BTW     | Bitcoin World                     |\n| 778        | 0x8000030a                    |         |\n| 779        | 0x8000030b                    |         |\n| 780        | 0x8000030c                    | PLCUC   | PLC Ultima Classic                |\n| 781        | 0x8000030d                    | PLCUX   | PLC Ultima X                      |\n| 782        | 0x8000030e                    | PLCU    | PLC Ultima                        |\n| 783        | 0x8000030f                    | SMARTBC | SMART Blockchain                  |\n| 784        | 0x80000310                    | SUI     | Sui                               |\n| 785        | 0x80000311                    | ULTIMA  | ULTIMA                            |\n| 786        | 0x80000312                    | UIDD    | UIDD                              |\n| 787        | 0x80000313                    | ACA     | Acala                             |\n| 788        | 0x80000314                    | BNC     | Bifrost                           |\n| 789        | 0x80000315                    | TAU     | Lamden                            |\n| 790        | 0x80000316                    |         |\n| 791        | 0x80000317                    |         |\n| 792        | 0x80000318                    |         |\n| 793        | 0x80000319                    |         |\n| 794        | 0x8000031a                    | INTR    | Interlay                          |\n| 795        | 0x8000031b                    | KINT    | Kintsugi                          |\n| 796        | 0x8000031c                    |         |\n| 797        | 0x8000031d                    |         |\n| 798        | 0x8000031e                    |         |\n| 799        | 0x8000031f                    | PDEX    | Polkadex                          |\n| 800        | 0x80000320                    | BEET    | Beetle Coin                       |\n| 801        | 0x80000321                    | DST     | DSTRA                             |\n| 802        | 0x80000322                    | CY      | Cyberyen                          |\n| 803        | 0x80000323                    | RYME    | Ryme Network                      |\n| 804        | 0x80000324                    | ZKS     | zkSync                            |\n| 805        | 0x80000325                    | SCASH   | Scash                             |\n| 806        | 0x80000326                    |         |\n| 807        | 0x80000327                    |         |\n| 808        | 0x80000328                    | QVT     | Qvolta                            |\n| 809        | 0x80000329                    | SDN     | Shiden Network                    |\n| 810        | 0x8000032a                    | ASTR    | Astar Network                     |\n| 811        | 0x8000032b                    | ---     | reserved                          |\n| 812        | 0x8000032c                    |         |\n| 813        | 0x8000032d                    | MEER    | Qitmeer                           |\n| 814        | 0x8000032e                    |         |\n| 815        | 0x8000032f                    | FACT    | ImFACT                            |\n| 816        | 0x80000330                    | FSC     | FSC                               |\n| 817        | 0x80000331                    |         |\n| 818        | 0x80000332                    | VET     | VeChain Token                     |\n| 819        | 0x80000333                    | REEF    | Reef                              |\n| 820        | 0x80000334                    | CLO     | Callisto                          |\n| 821        | 0x80000335                    |         |\n| 822        | 0x80000336                    | BDB     | BigchainDB                        |\n| 823        | 0x80000337                    |         |\n| 824        | 0x80000338                    | RBNT    | Redbelly Network                  |\n| 825        | 0x80000339                    |         |\n| 826        | 0x8000033a                    |         |\n| 827        | 0x8000033b                    | ACE     | Endurance                         |\n| 828        | 0x8000033c                    | CCN     | ComputeCoin                       |\n| 829        | 0x8000033d                    | BBA     | BBACHAIN                          |\n| 830        | 0x8000033e                    |         |\n| 831        | 0x8000033f                    | CRUZ    | cruzbit                           |\n| 832        | 0x80000340                    | SAPP    | Sapphire                          |\n| 833        | 0x80000341                    | 777     | Jackpot                           |\n| 834        | 0x80000342                    | KYAN    | Kyanite                           |\n| 835        | 0x80000343                    | AZR     | Azzure                            |\n| 836        | 0x80000344                    | CFL     | CryptoFlow                        |\n| 837        | 0x80000345                    | DASHD   | Dash Diamond                      |\n| 838        | 0x80000346                    | TRTT    | Trittium                          |\n| 839        | 0x80000347                    | UCR     | Ultra Clear                       |\n| 840        | 0x80000348                    | PNY     | Peony                             |\n| 841        | 0x80000349                    | BECN    | Beacon                            |\n| 842        | 0x8000034a                    | MONK    | Monk                              |\n| 843        | 0x8000034b                    | SAGA    | CryptoSaga                        |\n| 844        | 0x8000034c                    | SUV     | Suvereno                          |\n| 845        | 0x8000034d                    | ESK     | EskaCoin                          |\n| 846        | 0x8000034e                    | OWO     | OneWorld Coin                     |\n| 847        | 0x8000034f                    | PEPS    | PEPS Coin                         |\n| 848        | 0x80000350                    | BIR     | Birake                            |\n| 849        | 0x80000351                    | MOBIC   | MobilityCoin                      |\n| 850        | 0x80000352                    | FLS     | Flits                             |\n| 851        | 0x80000353                    | FRECO   | Freco                             |\n| 852        | 0x80000354                    | DSM     | Desmos                            |\n| 853        | 0x80000355                    | PRCY    | PRCY Coin                         |\n| 854        | 0x80000356                    |         |\n| 855        | 0x80000357                    |         |\n| 856        | 0x80000358                    |         |\n| 857        | 0x80000359                    |         |\n| 858        | 0x8000035a                    | HVH     | HAVAH                             |\n| 859        | 0x8000035b                    |         |\n| 860        | 0x8000035c                    | XBIT    | XBIT Coin                         |\n| 861        | 0x8000035d                    |         |\n| 862        | 0x8000035e                    |         |\n| 863        | 0x8000035f                    |         |\n| 864        | 0x80000360                    | CVM     | Convex                            |\n| 865        | 0x80000361                    |         |\n| 866        | 0x80000362                    | MOB     | MobileCoin                        |\n| 867        | 0x80000363                    |         |\n| 868        | 0x80000364                    | IF      | Infinitefuture                    |\n| 869        | 0x80000365                    |         |\n| 870        | 0x80000366                    |         |\n| 871        | 0x80000367                    |         |\n| 872        | 0x80000368                    |         |\n| 873        | 0x80000369                    | QUORUM  | Quorum                            |\n| 874        | 0x8000036a                    |         |\n| 875        | 0x8000036b                    |         |\n| 876        | 0x8000036c                    |         |\n| 877        | 0x8000036d                    | NAM     | Namada                            |\n| 878        | 0x8000036e                    | SCR     | Scorum Network                    |\n| 879        | 0x8000036f                    |         |\n| 880        | 0x80000370                    | LUM     | Lum Network                       |\n| 881        | 0x80000371                    |         |\n| 882        | 0x80000372                    |         |\n| 883        | 0x80000373                    | ZBC     | ZooBC                             |\n| 884        | 0x80000374                    |         |\n| 885        | 0x80000375                    |         |\n| 886        | 0x80000376                    | ADF     | AD Token                          |\n| 887        | 0x80000377                    |         |\n| 888        | 0x80000378                    | NEO     | NEO                               |\n| 889        | 0x80000379                    | TOMO    | TOMO                              |\n| 890        | 0x8000037a                    | XSEL    | Seln                              |\n| 891        | 0x8000037b                    |         |\n| 892        | 0x8000037c                    |         |\n| 893        | 0x8000037d                    |         |\n| 894        | 0x8000037e                    |         |\n| 895        | 0x8000037f                    |         |\n| 896        | 0x80000380                    | LKSC    | LKSCoin                           |\n| 897        | 0x80000381                    |         |\n| 898        | 0x80000382                    | AS      | Assetchain                        |\n| 899        | 0x80000383                    | XEC     | eCash                             |\n| 900        | 0x80000384                    | LMO     | Lumeneo                           |\n| 901        | 0x80000385                    | NXT     | NxtMeta                           |\n| 902        | 0x80000386                    |         |\n| 903        | 0x80000387                    |         |\n| 904        | 0x80000388                    | HNT     | Helium                            |\n| 905        | 0x80000389                    |         |\n| 906        | 0x8000038a                    | XPX     | Sirius                            |\n| 907        | 0x8000038b                    | FIS     | StaFi                             |\n| 908        | 0x8000038c                    |         |\n| 909        | 0x8000038d                    | SGE     | Saage                             |\n| 910        | 0x8000038e                    |         |\n| 911        | 0x8000038f                    | GERT    | Gert                              |\n| 912        | 0x80000390                    |         |\n| 913        | 0x80000391                    | VARA    | Vara Network                      |\n| 914        | 0x80000392                    |         |\n| 915        | 0x80000393                    |         |\n| 916        | 0x80000394                    | META    | Metadium                          |\n| 917        | 0x80000395                    | FRA     | Findora                           |\n| 918        | 0x80000396                    |         |\n| 919        | 0x80000397                    | CCD     | Concordium                        |\n| 920        | 0x80000398                    |         |\n| 921        | 0x80000399                    | AVN     | Avian Network                     |\n| 922        | 0x8000039a                    |         |\n| 923        | 0x8000039b                    |         |\n| 924        | 0x8000039c                    |         |\n| 925        | 0x8000039d                    | DIP     | Dipper Network                    |\n| 926        | 0x8000039e                    |         |\n| 927        | 0x8000039f                    |         |\n| 928        | 0x800003a0                    | GHM     | HermitMatrixNetwork               |\n| 929        | 0x800003a1                    |         |\n| 930        | 0x800003a2                    |         |\n| 931        | 0x800003a3                    | RUNE    | THORChain (RUNE)                  |\n| 932        | 0x800003a4                    |         |\n| 933        | 0x800003a5                    |         |\n| 934        | 0x800003a6                    |         |\n| 935        | 0x800003a7                    |         |\n| 936        | 0x800003a8                    |         |\n| 937        | 0x800003a9                    |         |\n| 938        | 0x800003aa                    | MGO     | Mango Network                     |\n| 939        | 0x800003ab                    | AB      | Argot Protocol                    |\n| 940        | 0x800003ac                    |         |\n| 941        | 0x800003ad                    | ---     | reserved                          |\n| 942        | 0x800003ae                    | KCN     | Kylacoin                          |\n| 943        | 0x800003af                    | LCN     | Lyncoin                           |\n| 944        | 0x800003b0                    |         |\n| 945        | 0x800003b1                    | UNLOCK  | Jasiri protocol                   |\n| 946        | 0x800003b2                    |         |\n| 947        | 0x800003b3                    |         |\n| 948        | 0x800003b4                    |         |\n| 949        | 0x800003b5                    |         |\n| 950        | 0x800003b6                    |         |\n| 951        | 0x800003b7                    |         |\n| 952        | 0x800003b8                    |         |\n| 953        | 0x800003b9                    |         |\n| 954        | 0x800003ba                    |         |\n| 955        | 0x800003bb                    | LTP     | LifetionCoin                      |\n| 956        | 0x800003bc                    |         |\n| 957        | 0x800003bd                    |         |\n| 958        | 0x800003be                    |         | KickSoccer                        |\n| 959        | 0x800003bf                    |         |\n| 960        | 0x800003c0                    | VKAX    | Vkax                              |\n| 961        | 0x800003c1                    |         |\n| 962        | 0x800003c2                    |         |\n| 963        | 0x800003c3                    |         |\n| 964        | 0x800003c4                    |         |\n| 965        | 0x800003c5                    |         |\n| 966        | 0x800003c6                    | MATIC   | Matic                             |\n| 967        | 0x800003c7                    |         |\n| 968        | 0x800003c8                    | UNW     | UNW                               |\n| 969        | 0x800003c9                    | QI      | Quai Network                      |\n| 970        | 0x800003ca                    | TWINS   | TWINS                             |\n| 971        | 0x800003cb                    |         |\n| 972        | 0x800003cc                    |         |\n| 973        | 0x800003cd                    |         |\n| 974        | 0x800003ce                    |         |\n| 975        | 0x800003cf                    |         |\n| 976        | 0x800003d0                    |         |\n| 977        | 0x800003d1                    | TLOS    | Telos                             |\n| 978        | 0x800003d2                    |         |\n| 979        | 0x800003d3                    |         |\n| 980        | 0x800003d4                    |         |\n| 981        | 0x800003d5                    | TAFECO  | Taf ECO Chain                     |\n| 982        | 0x800003d6                    |         |\n| 983        | 0x800003d7                    |         |\n| 984        | 0x800003d8                    |         |\n| 985        | 0x800003d9                    | AU      | Autonomy                          |\n| 986        | 0x800003da                    |         |\n| 987        | 0x800003db                    | VCG     | VipCoin                           |\n| 988        | 0x800003dc                    | XAZAB   | Xazab core                        |\n| 989        | 0x800003dd                    | AIOZ    | AIOZ                              |\n| 990        | 0x800003de                    | CORE    | Coreum                            |\n| 991        | 0x800003df                    | PEC     | Phoenix                           |\n| 992        | 0x800003e0                    | UNT     | Unit                              |\n| 993        | 0x800003e1                    | XRB     | X Currency                        |\n| 994        | 0x800003e2                    | QUAI    | Quai Network                      |\n| 995        | 0x800003e3                    | CAPS    | Ternoa                            |\n| 996        | 0x800003e4                    | OKT     | OKChain Token                     |\n| 997        | 0x800003e5                    | SUM     | Solidum                           |\n| 998        | 0x800003e6                    | LBTC    | Lightning Bitcoin                 |\n| 999        | 0x800003e7                    | BCD     | Bitcoin Diamond                   |\n| 1000       | 0x800003e8                    | BTN     | Bitcoin New                       |\n| 1001       | 0x800003e9                    | TT      | ThunderCore                       |\n| 1002       | 0x800003ea                    | BKT     | BanKitt                           |\n| 1003       | 0x800003eb                    | NODL    | Nodle                             |\n| 1004       | 0x800003ec                    | PCOIN   | PCOIN                             |\n| 1005       | 0x800003ed                    | TAO     | Bittensor                         |\n| 1006       | 0x800003ee                    | HSK     | HashKey Chain                     |\n| 1007       | 0x800003ef                    | FTM     | Fantom                            |\n| 1008       | 0x800003f0                    | RPG     | RPG                               |\n| 1009       | 0x800003f1                    | LAKE    | iconLake                          |\n| 1010       | 0x800003f2                    | HT      | Huobi ECO Chain                   |\n| 1011       | 0x800003f3                    | ELV     | Eluvio                            |\n| 1012       | 0x800003f4                    | JOC     | Japan Open Chain                  |\n| 1013       | 0x800003f5                    | BIC     | Beincrypto                        |\n| 1014       | 0x800003f6                    | JOY     | Joystream                         |\n| 1015       | 0x800003f7                    | ZCX     | ZEN Exchange Token                |\n| 1016       | 0x800003f8                    | ---     | reserved                          |\n| 1020       | 0x800003fc                    | EVC     | Evrice                            |\n| 1022       | 0x800003fe                    | XRD     | Radix DLT                         |\n| 1023       | 0x800003ff                    | ONE     | HARMONY-ONE (Legacy)              |\n| 1024       | 0x80000400                    | ONT     | Ontology                          |\n| 1025       | 0x80000401                    | CZZ     | Classzz                           |\n| 1026       | 0x80000402                    | KEX     | Kira Exchange Token               |\n| 1027       | 0x80000403                    | MCM     | Mochimo                           |\n| 1028       | 0x80000404                    | PLS     | Pulse Coin                        |\n| 1032       | 0x80000408                    | BTCR    | BTCR                              |\n| 1042       | 0x80000412                    | MFID    | Moonfish ID                       |\n| 1111       | 0x80000457                    | BBC     | Big Bitcoin                       |\n| 1116       | 0x8000045c                    | CORE    | Core                              |\n| 1120       | 0x80000460                    | RISE    | RISE                              |\n| 1122       | 0x80000462                    | CMT     | CyberMiles Token                  |\n| 1128       | 0x80000468                    | ETSC    | Ethereum Social                   |\n| 1129       | 0x80000469                    | DFI     | DeFiChain                         |\n| 1130       | 0x8000046a                    | DFI     | DeFiChain EVM Network             |\n| 1137       | 0x80000471                    | $DAG    | Constellation Labs                |\n| 1145       | 0x80000479                    | CDY     | Bitcoin Candy                     |\n| 1155       | 0x80000483                    | ENJ     | Enjin Coin                        |\n| 1170       | 0x80000492                    | HOO     | Hoo Smart Chain                   |\n| 1234       | 0x800004d2                    | ALPH    | Alephium                          |\n| 1236       | 0x800004d4                    |         | Masca                             |\n| 1237       | 0x800004d5                    |         | Nostr                             |\n| 1280       | 0x80000500                    |         | Kudos Setler                      |\n| 1284       | 0x80000504                    | GLMR    | Moonbeam                          |\n| 1285       | 0x80000505                    | MOVR    | Moonriver                         |\n| 1286       | 0x80000506                    | DSG     | Dessage Social Protocol           |\n| 1298       | 0x80000512                    | WPC     | Wpc                               |\n| 1308       | 0x8000051c                    | WEI     | WEI                               |\n| 1312       | 0x80000520                    | BITS    | Entropy                           |\n| 1337       | 0x80000539                    | DFC     | Defcoin                           |\n| 1338       | 0x8000053a                    | IRON    | Iron Fish                         |\n| 1348       | 0x80000544                    | ISLM    | IslamicCoin                       |\n| 1397       | 0x80000575                    | HYC     | Hycon                             |\n| 1410       | 0x80000582                    | TENTSLP | TENT Simple Ledger Protocol       |\n| 1510       | 0x800005e6                    | XSC     | XT Smart Chain                    |\n| 1512       | 0x800005e8                    | AAC     | Double-A Chain                    |\n| 1524       | 0x800005f4                    |         | Taler                             |\n| 1533       | 0x800005fd                    | BEAM    | Beam                              |\n| 1536       | 0x80000600                    | GAS     | BubiChain                         |\n| 1540       | 0x80000604                    | ATHENA  | Athena                            |\n| 1551       | 0x8000060f                    | SDK     | Sovereign SDK                     |\n| 1555       | 0x80000613                    | APC     | Apc Chain                         |\n| 1616       | 0x80000650                    | ELF     | AELF                              |\n| 1618       | 0x80000652                    | AUDL    | AUDL                              |\n| 1620       | 0x80000654                    | ATH     | Atheios                           |\n| 1627       | 0x8000065b                    | LUME    | Lume Web                          |\n| 1642       | 0x8000066a                    | NEW     | Newton                            |\n| 1657       | 0x80000679                    | BTA     | Btachain                          |\n| 1668       | 0x80000684                    | NEOX    | Neoxa                             |\n| 1669       | 0x80000685                    | MEWC    | Meowcoin                          |\n| 1688       | 0x80000698                    | BCX     | BitcoinX                          |\n| 1729       | 0x800006c1                    | XTZ     | Tezos                             |\n| 1776       | 0x800006f0                    | LBTC    | Liquid BTC                        |\n| 1777       | 0x800006f1                    | BBP     | Biblepay                          |\n| 1784       | 0x800006f8                    | JPYS    | JPY Stablecoin                    |\n| 1789       | 0x800006fd                    | VEGA    | Vega Protocol                     |\n| 1815       | 0x80000717                    | ADA     | Cardano                           |\n| 1818       | 0x8000071a                    | CUBE    | Cube Chain Native Token           |\n| 1856       | 0x80000743                    | TES     | Teslacoin                         |\n| 1888       | 0x80000760                    | ZTX     | Zetrix                            |\n| 1899       | 0x8000076b                    | XEC     | eCash token                       |\n| 1900       | 0x8000076c                    | XNA     | Neurai                            |\n| 1901       | 0x8000076d                    | CLC     | Classica                          |\n| 1907       | 0x80000773                    | BITCI   | Bitcicoin                         |\n| 1918       | 0x8000077e                    | BKC     | Briskcoin                         |\n| 1919       | 0x8000077f                    | VIPS    | VIPSTARCOIN                       |\n| 1926       | 0x80000786                    | CITY    | City Coin                         |\n| 1951       | 0x8000079f                    | ESA     | Esa                               |\n| 1952       | 0x800007a0                    | ESC     | EsaCoin                           |\n| 1955       | 0x800007a3                    | XX      | xx coin                           |\n| 1977       | 0x800007b9                    | XMX     | Xuma                              |\n| 1984       | 0x800007c0                    | TRTL    | TurtleCoin                        |\n| 1985       | 0x800007c1                    | SLRT    | Solarti Chain                     |\n| 1986       | 0x800007c2                    | QTH     | Qing Tong Horizon                 |\n| 1987       | 0x800007c3                    | EGEM    | EtherGem                          |\n| 1988       | 0x800007c4                    | MIRA    | Mira Chain                        |\n| 1989       | 0x800007c5                    | HODL    | HOdlcoin                          |\n| 1990       | 0x800007c6                    | PHL     | Placeholders                      |\n| 1991       | 0x800007c7                    | SC      | Sia                               |\n| 1996       | 0x800007cc                    | MYT     | Mineyourtime                      |\n| 1997       | 0x800007cd                    | POLIS   | Polis                             |\n| 1998       | 0x800007ce                    | XMCC    | Monoeci                           |\n| 1999       | 0x800007cf                    | COLX    | ColossusXT                        |\n| 2000       | 0x800007d0                    | GIN     | GinCoin                           |\n| 2001       | 0x800007d1                    | MNP     | MNPCoin                           |\n| 2002       | 0x800007d2                    | MLN     | Miraland                          |\n| 2015       | 0x800007df                    | TEER    | Integritee                        |\n| 2017       | 0x800007e1                    | KIN     | Kin                               |\n| 2018       | 0x800007e2                    | EOSC    | EOSClassic                        |\n| 2019       | 0x800007e3                    | GBT     | GoldBean Token                    |\n| 2020       | 0x800007e4                    | PKC     | PKC                               |\n| 2021       | 0x800007e5                    | SKT     | Sukhavati                         |\n| 2024       | 0x800007e8                    | USBC    | Universal Ledger USBC             |\n| 2022       | 0x800007e6                    | XHT     | Xinghuo Token                     |\n| 2023       | 0x800007e7                    | COC     | Chat On Chain                     |\n| 2025       | 0x800007e9                    | ROCK    | Zenrock Labs                      |\n| 2026       | 0x800007ea                    | ASTRON  | ASTRON Token                      |\n| 2046       | 0x800007fe                    | ANY     | Any                               |\n| 2048       | 0x80000800                    | MCASH   | MCashChain                        |\n| 2049       | 0x80000801                    | TRUE    | TrueChain                         |\n| 2050       | 0x80000802                    | MOVO    | Movo Smart Chain                  |\n| 2086       | 0x80000826                    | KILT    | KILT Spiritnet                    |\n| 2091       | 0x8000082b                    | FRQCY   | Frequency                         |\n| 2109       | 0x8000083d                    | SAMA    | Exosama Network                   |\n| 2112       | 0x80000840                    | IoTE    | IoTE                              |\n| 2125       | 0x8000084d                    | BAY     | BitBay                            |\n| 2137       | 0x80000859                    | XRG     | Ergon                             |\n| 2199       | 0x80000897                    | SAMA    | Moonsama Network                  |\n| 2221       | 0x800008ad                    | ASK     | ASK                               |\n| 2222       | 0x800008ae                    | CWEB    | Coinweb                           |\n| 2285       | 0x800008ed                    |         | Qiyi Chain                        |\n| 2301       | 0x800008fd                    | QTUM    | QTUM                              |\n| 2302       | 0x800008fe                    | ETP     | Metaverse                         |\n| 2303       | 0x800008ff                    | GXC     | GXChain                           |\n| 2304       | 0x80000900                    | CRP     | CranePay                          |\n| 2305       | 0x80000901                    | ELA     | Elastos                           |\n| 2338       | 0x80000922                    | SNOW    | Snowblossom                       |\n| 2365       | 0x8000093d                    | XIN     | Mixin                             |\n| 2500       | 0x800009c4                    | NEXI    | Nexi                              |\n| 2570       | 0x80000a0a                    | AOA     | Aurora                            |\n| 2686       | 0x80000a7e                    | AIPG    | AIPowerGrid                       |\n| 2718       | 0x80000a9e                    | NAS     | Nebulas                           |\n| 2809       | 0x80000af9                    | LAN     | Lanify                            |\n| 2894       | 0x80000b4e                    | REOSC   | REOSC Ecosystem                   |\n| 2941       | 0x80000b7d                    | BND     | Blocknode                         |\n| 3000       | 0x80000bb8                    | SM      | Stealth Message                   |\n| 3003       | 0x80000bbb                    | LUX     | LUX                               |\n| 3030       | 0x80000bd6                    | HBAR    | Hedera HBAR                       |\n| 3077       | 0x80000c05                    | COS     | Contentos                         |\n| 3276       | 0x80000ccc                    | CCC     | CodeChain                         |\n| 3344       | 0x80000d10                    | PLMC    | Polimec                           |\n| 3333       | 0x80000d05                    | SXP     | Solar                             |\n| 3338       | 0x80000d0a                    | PEAQ    | peaq                              |\n| 3377       | 0x80000d31                    | ROI     | ROIcoin                           |\n| 3381       | 0x80000d35                    | DYN     | Dynamic                           |\n| 3383       | 0x80000d37                    | SEQ     | Sequence                          |\n| 3434       | 0x80000d6a                    | PEPE    | Pepecoin Core                     |\n| 3501       | 0x80000dad                    | JFIN    | JFIN Coin                         |\n| 3552       | 0x80000de0                    | DEO     | Destocoin                         |\n| 3564       | 0x80000dec                    | DST     | DeStream                          |\n| 3601       | 0x80000e11                    | CY      | Cybits                            |\n| 3757       | 0x80000ead                    | MPC     | Partisia Blockchain               |\n| 3840       | 0x80000f00                    | RED     | ReDeFi RED                        |\n| 4040       | 0x80000fc8                    | FC8     | FCH Network                       |\n| 4096       | 0x80001000                    | YEE     | YeeCo                             |\n| 4218       | 0x8000107a                    | IOTA    | IOTA                              |\n| 4219       | 0x8000107b                    | SMR     | Shimmer                           |\n| 4242       | 0x80001092                    | AXE     | Axe                               |\n| 4343       | 0x800010f7                    | XYM     | Symbol                            |\n| 4444       | 0x8000115c                    | C4E     | Chain4Energy                      |\n| 4646       | 0x80001226                    | MST     | MST                               |\n| 4919       | 0x80001337                    | XVM     | Venidium                          |\n| 4976       | 0x80001370                    | VARA    | Vara                              |\n| 4999       | 0x80001387                    | BXN     | BlackFort Exchange Network        |\n| 5000       | 0x80001388                    | V12     | Vet The Vote                      |\n| 5006       | 0x8000138e                    | SBC     | Senior Blockchain                 |\n| 5248       | 0x80001480                    | FIC     | FIC                               |\n| 5353       | 0x800014e9                    | HNS     | Handshake                         |\n| 5404       | 0x8000151c                    | ISK     | ISKRA                             |\n| 5467       | 0x8000155b                    | ALTME   | ALTME                             |\n| 5555       | 0x800015b3                    | FUND    | Unification                       |\n| 5757       | 0x8000167d                    | STX     | Stacks                            |\n| 5895       | 0x80001707                    | VOW     | VowChain VOW                      |\n| 5920       | 0x80001720                    | SLU     | SILUBIUM                          |\n| 5995       | 0x8000176B                    | DUSK    | Dusk Network                      |\n| 6060       | 0x800017ac                    | GO      | GoChain GO                        |\n| 6144       | 0x80001800                    | DTS     | Datos                             |\n| 6174       | 0x8000181e                    | MOI     | My Own Internet                   |\n| 6278       | 0x80001886                    | STEAMX  | Rails Network Mainnet             |\n| 6532       | 0x80001984                    | UM      | Penumbra                          |\n| 6599       | 0x800019c7                    | RSC     | Royal Sports City                 |\n| 6666       | 0x80001a0a                    | BPA     | Bitcoin Pizza                     |\n| 6688       | 0x80001a20                    | SAFE    | SAFE                              |\n| 6779       | 0x80001a7b                    | COTI    | COTI                              |\n| 6969       | 0x80001b39                    | ROGER   | TheHolyrogerCoin                  |\n| 7000       | 0x80001b58                    | ZETA    | ZetaChain                         |\n| 7027       | 0x80001b73                    | ELLA    | Ella the heart                    |\n| 7028       | 0x80001b74                    | AA      | Arthera                           |\n| 7070       | 0x80001b9e                    | DOI     | Doichain                          |\n| 7091       | 0x80001bb3                    | TOPL    | Topl                              |\n| 7331       | 0x80001ca3                    | KLY     | KLYNTAR                           |\n| 7341       | 0x80001cad                    | SHFT    | Shyft                             |\n| 7518       | 0x80001d5e                    | MEV     | MEVerse                           |\n| 7576       | 0x80001d98                    | ADIL    | ADIL Chain                        |\n| 7777       | 0x80001e61                    | BTV     | Bitvote                           |\n| 7779       | 0x80001e63                    | CPV     | Compverse                         |\n| 8000       | 0x80001f40                    | SKY     | Skycoin                           |\n| 8017       | 0x80001f51                    | ISC     | iSunCoin                          |\n| 8080       | 0x80001f90                    |         | DSRV                              |\n| 8181       | 0x80001ff5                    | BOC     | BeOne Chain                       |\n| 8192       | 0x80002000                    | PAC     | pacprotocol                       |\n| 8217       | 0x80002019                    | KAIA    | KAIA                              |\n| 8339       | 0x80002093                    | BTQ     | BitcoinQuark                      |\n| 8444       | 0x800020fc                    | XCH     | Chia                              |\n| 8453       | 0x80002105                    |         | Base                              |\n| 8520       | 0x80002148                    | ---     | reserved                          |\n| 8680       | 0x800021e8                    | PLMNT   | Planetmint                        |\n| 8732       | 0x8000221c                    | BLN     | Bullions                          |\n| 8738       | 0x80002222                    | ALPH    | Alph Network                      |\n| 8866       | 0x800022a2                    | GGX     | Golden Gate                       |\n| 8886       | 0x800022b6                    | GGXT    | Golden Gate Sydney                |\n| 8888       | 0x800022b8                    | SBTC    | Super Bitcoin                     |\n| 8964       | 0x80002304                    | NULS    | NULS                              |\n| 8997       | 0x80002325                    | BBC     | Babacoin                          |\n| 8998       | 0x80002326                    | JGC     | JagoanCoin                        |\n| 8999       | 0x80002327                    | BTP     | Bitcoin Pay                       |\n| 9000       | 0x80002328                    | AVAX    | Avalanche                         |\n| 9001       | 0x80002329                    | ARB1    | Arbitrum                          |\n| 9002       | 0x8000232a                    | BOBA    | Boba                              |\n| 9003       | 0x8000232b                    | LOOP    | Loopring                          |\n| 9004       | 0x8000232c                    | STRK    | StarkNet                          |\n| 9005       | 0x8000232d                    | AVAXC   | Avalanche C-Chain                 |\n| 9006       | 0x8000232e                    | BSC     | Binance Smart Chain               |\n| 9797       | 0x80002645                    | NRG     | Energi                            |\n| 9888       | 0x800026a0                    | BTF     | Bitcoin Faith                     |\n| 9969       | 0x800026f1                    | OSMI    | Osmium                            |\n| 9999       | 0x8000270f                    | GOD     | Bitcoin God                       |\n| 10000      | 0x80002710                    | FO      | FIBOS                             |\n| 10001      | 0x80002711                    | SPACE   | Space                             |\n| 10007      | 0x80002717                    | S       | SONIC                             |\n| 10111      | 0x8000277f                    | DHP     | dHealth                           |\n| 10226      | 0x800027f2                    | RTM     | Raptoreum                         |\n| 10242      | 0x80002802                    | AA      | Arthera                           |\n| 10291      | 0x80002833                    | XRC     | XRhodium                          |\n| 10507      | 0x8000290b                    | NUM     | Numbers Protocol                  |\n| 10605      | 0x8000296d                    | XPI     | Lotus                             |\n| 11111      | 0x80002b67                    | ESS     | Essentia One                      |\n| 11742      | 0x80002dde                    | VARCH   | InvArch                           |\n| 11743      | 0x80002ddf                    | TNKR    | Tinkernet                         |\n| 12345      | 0x80003039                    | IPOS    | IPOS                              |\n| 12586      | 0x8000312a                    | MINA    | Mina                              |\n| 13107      | 0x80003333                    | BTY     | BitYuan                           |\n| 13108      | 0x80003334                    | YCC     | Yuan Chain Coin                   |\n| 13381      | 0x80003445                    | PHX     | Phoenix                           |\n| 14001      | 0x800036b1                    | WAX     | Worldwide Asset Exchange          |\n| 15845      | 0x80003de5                    | SDGO    | SanDeGo                           |\n| 16181      | 0x80003f35                    | XTX     | Totem Live Network                |\n| 16754      | 0x80004172                    | ARDR    | Ardor                             |\n| 18000      | 0x80004650                    | MTR     | Meter                             |\n| 19165      | 0x80004add                    | SAFE    | Safecoin                          |\n| 19167      | 0x80004adf                    | FLUX    | Flux                              |\n| 19169      | 0x80004ae1                    | RITO    | Ritocoin                          |\n| 19788      | 0x80004d4c                    | ML      | Mintlayer                         |\n| 20036      | 0x80004e44                    | XND     | ndau                              |\n| 21004      | 0x8000520c                    | C4EI    | c4ei                              |\n| 21337      | 0x80005359                    | XAH     | Xahau                             |\n| 21888      | 0x80005580                    | PAC     | Pactus                            |\n| 22504      | 0x800057e8                    | PWR     | PWRcoin                           |\n| 23000      | 0x800059d8                    | EPIC    | Epic Cash                         |\n| 25252      | 0x800062a4                    | BELL    | Bellcoin                          |\n| 25718      | 0x80006476                    | CHX     | Own                               |\n| 26417      | 0x80006731                    | G1      | Ğ1                                |\n| 29223      | 0x80007227                    | NEXA    | Nexa                              |\n| 30001      | 0x80007531                    | ---     | reserved                          |\n| 31102      | 0x8000797e                    | ESN     | EtherSocial Network               |\n| 31337      | 0x80007a69                    |         | ThePower                          |\n| 33416      | 0x80008288                    | TEO     | Trust Eth reOrigin                |\n| 33878      | 0x80008456                    | BTCS    | Bitcoin Stake                     |\n| 34952      | 0x80008888                    | BTT     | ByteTrade                         |\n| 37992      | 0x80009468                    | FXTC    | FixedTradeCoin                    |\n| 39321      | 0x80009999                    | AMA     | Amabig                            |\n| 42069      | 0x8000a455                    | FACT    | FACT0RN                           |\n| 43028      | 0x8000a814                    | AXIV    | AXIV                              |\n| 47803      | 0x8000babb                    | BAX     | BAX                               |\n| 49262      | 0x8000c06e                    | EVE     | evan                              |\n| 49344      | 0x8000c0c0                    | STASH   | STASH                             |\n| 52752      | 0x8000ce10                    | CELO    | Celo                              |\n| 54176      | 0x8000d3a0                    | OVER    | OverProtocol                      |\n| 61616      | 0x8000f0b0                    | TH      | TianHe                            |\n| 65536      | 0x80010000                    | KETH    | Krypton World                     |\n| 69420      | 0x80010f2c                    | GRLC    | Garlicoin                         |\n| 70007      | 0x80011177                    | GWL     | Gewel                             |\n| 83293      | 0x8001455d                    | QUBIC   | Qubic                             |\n| 77777      | 0x80012fd1                    | ZYN     | Wethio                            |\n| 88888      | 0x80015b38                    | RYO     | c0ban                             |\n| 99999      | 0x8001869f                    | WICC    | Waykichain                        |\n| 100500     | 0x80018894                    | HOME    | HomeCoin                          |\n| 101010     | 0x80018a92                    | STC     | Starcoin                          |\n| 104109     | 0x800196ad                    |         | Seed Hypermedia                   |\n| 105105     | 0x80019a91                    | STRAX   | Strax                             |\n| 111111     | 0x8001b207                    | KAS     | Kaspa                             |\n| 121337     | 0x8001d9f9                    | KLS     | Karlsen                           |\n| 123456     | 0x8001e240                    | SPR     | Spectre                           |\n| 130822     | 0x8001ff06                    | WBT     | WhiteBIT Coin                     |\n| 161803     | 0x8002780b                    | APTA    | Bloqs4Good                        |\n| 200625     | 0x80030fb1                    | AKA     | Akroma                            |\n| 200901     | 0x800310c5                    | BTR     | Bitlayer                          |\n| 224433     | 0x80036cb1                    | CONET   | CONET Holesky Network             |\n| 246529     | 0x8003c301                    | ATS     | ARTIS sigma1                      |\n| 261131     | 0x8003fc0b                    | ZAMA    | Zama                              |\n| 314159     | 0x8004cb2f                    | PI      | Pi Network                        |\n| 333332     | 0x80051614                    | VALUE   | Value Chain                       |\n| 333333     | 0x80051615                    | 3333    | Pi Value Consensus                |\n| 424242     | 0x80067932                    | X42     | x42                               |\n| 440017     | 0x8006b6d1                    | @G      | Graphite                          |\n| 534352     | 0x80082750                    | SCR     | Scroll                            |\n| 666666     | 0x800a2c2a                    | VITE    | Vite                              |\n| 696365     | 0x800b3206                    | ICE     | Ice Network                       |\n| 888888     | 0x800d9038                    | SEA     | Second Exchange Alliance          |\n| 999999     | 0x800c9061                    | WTC     | WaltonChain                       |\n| 1048576    | 0x80100000                    | AMAX    | Armonia Meta Chain                |\n| 1171337    | 0x8011df89                    | ILT     | iOlite                            |\n| 1313114    | 0x8014095a                    | ETHO    | Etho Protocol                     |\n| 1313500    | 0x80140adc                    | XERO    | Xerom                             |\n| 1712144    | 0x801a2010                    | LAX     | LAPO                              |\n| 3924011    | 0x803be02b                    | EPK     | EPIK Protocol                     |\n| 4741444    | 0x80485944                    | HYD     | Hydra Token                       |\n| 5249353    | 0x80501949                    | BCO     | BitcoinOre                        |\n| 5249354    | 0x8050194a                    | BHD     | BitcoinHD                         |\n| 5264462    | 0x8050544e                    | PTN     | PalletOne                         |\n| 5655640    | 0x80564c58                    | VLX     | Velas                             |\n| 5718350    | 0x8057414e                    | WAN     | Wanchain                          |\n| 5741564    | 0x80579bfc                    | WAVES   | Waves                             |\n| 5741565    | 0x80579bfd                    | WEST    | Waves Enterprise                  |\n| 6382179    | 0x80616263                    | ABC     | Abcmint                           |\n| 6517357    | 0x8063726d                    | CRM     | Creamcoin                         |\n| 7171666    | 0x806d6e52                    | BROCK   | Bitrock                           |\n| 7562605    | 0x8073656d                    | SEM     | Semux                             |\n| 7567736    | 0x80737978                    | ION     | ION                               |\n| 7777777    | 0x8076adf1                    | FCT     | FirmaChain                        |\n| 7825266    | 0x80776772                    | WGR     | WGR                               |\n| 7825267    | 0x80776773                    | OBSR    | OBServer                          |\n| 8163271    | 0x807c8fc7                    | AFS     | ANFS                              |\n| 10000118   | 0x805d30b6                    | OSMO    | Osmosis                           |\n| 15118976   | 0x80e6b280                    | XDS     | XDS                               |\n| 19000118   | 0x8121eb36                    | SEI     | SEI                               |\n| 61717561   | 0x83adbc39                    | AQUA    | Aquachain                         |\n| 77777777   | 0x84a2cb71                    | AZT     | Aztecoin                          |\n| 88888888   | 0x854c5638                    | HATCH   | Hatch                             |\n| 91927009   | 0x857ab1e1                    | kUSD    | kUSD                              |\n| 99999996   | 0x85f5e0fc                    | GENS    | GENS                              |\n| 99999997   | 0x85f5e0fd                    | EQ      | EQ                                |\n| 99999998   | 0x85f5e0fe                    | FLUID   | Fluid Chains                      |\n| 99999999   | 0x85f5e0ff                    | QKC     | QuarkChain                        |\n| 11259375   | 0x80abcdef                    | LBR     | 0L                                |\n| 20230101   | 0x8134afd5                    | ROH     | Rooch                             |\n| 20240430   | 0x8134d82e                    | NLK     | NuLinkCoin                        |\n| 608589380  | 0xa4465644                    | FVDC    | ForumCoin                         |\n| 1179993420 | 0xc655454c                    |         | Fuel                              |\n| 1179993421 | 0xc655454d                    | TTNC    | TakeTitan                         |\n| 1179993431 | 0xc6554557                    | MTGBP   | MTGBP                             |\n| 1179993441 | 0xc6554561                    | QFS     | Qfs                               |\n| 1179993451 | 0xc655456b                    | RWA     | Asset Chain                       |\n\nCoin types will be added only if there is a wallet implementing BIP-0044 for desired coin.\n\n## Libraries\n\n- [BIP44-constants](https://www.npmjs.com/package/bip44-constants) ([source](http://github.com/bitcoinjs/bip44-constants)) JavaScript package with described coin types\n\n## References\n\n- [BIP-0044: Multi-Account Hierarchy for Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki)\n"
        },
        {
          "name": "slip-0048.md",
          "type": "blob",
          "size": 10.05859375,
          "content": "# SLIP-0048 : Deterministic Key Hierarchy for Graphene-based Networks\n\n```\nNumber:  SLIP-0048\nTitle:   Deterministic key hierarchy for Graphene-based networks\nType:    Standard\nStatus:  Active\nAuthors: Fabian Schuh <Fabian@chainsquad.com>\nCreated: 2016-10-18\n```\n\n## Abstract\n\nThis SLIP defines the logical hierarchy for deterministic wallets using Graphene technology.\nIt extends [BIP-0044](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) known from Bitcoin which should be read and understood before going into the details of this specification.\n\n## Motivation\n\nThe key derivation structure defined in BIP-0044/SLIP-0044 does not properly represent the possibilities available to Graphene based networks. For this reason, we defined this SLIP and provide a standard for hierarchies on those networks.\n\n## Account Roles on Graphene\n\nGraphene-based blockchains (such as BitShares, Steem, Peerplays, MUSE, etc.) do not use the UTXO model. Instead, there are accounts registered on the blockchains that have a (modifiable) role scheme attached to each of them. The actual roles depend on the use case of the network but most of them constitute an `owner` and an `active` role among others. Usually, the only difference between `owner` and `active` role is that the `owner` can change the `owner` role, while the `active` cannot, and thus represents some kind of cold storage or super-admin roles.\n\nTechnically, each role can consist of multiple (weighted) keys or other accounts to facilitate hierarchical weighted roles on the blockchain.\n\nWallets are supposed to have at least one key installed that is associated with the account's owner role (i.e. the `owner` key) to allow recovery.\n\nThe `memo` key is different in that it is **not** a roles but a single key that is assigned to an account. This key is used for private (encrypted) messaging to derive a shared secret between sender and receiver.\n\n## Deterministic Key Hierarchy\n\n```\nm / purpose' / network' / role' / account-index' / key-index'\n```\n\nEach level has a special meaning, described in the chapters below. Apostrophe in the path indicates that BIP32 hardened derivation is used.\n\n### Purpose\n\nPurpose is a constant set to 48' (or 0x80000030) following the BIP43 recommendation. It indicates that the subtree of this node is used according to this specification.\n\nHardened derivation is used at this level.\n\n### Network\n\nOne master node (seed) can be used for unlimited number of independent keys which can be used in different networks such as BitShares, Steem, PeerPlays and others. However, sharing the same space for various networks has some disadvantages.\n\nThis level creates a separate subtree for every network, avoiding reusing addresses across networks and improving privacy issues.\n\n`network`is a constant, set for each network. Developers may ask for registering unused number for their project.\n\nThe list of already allocated networks is in the chapter \"Registered networks\" below.\n\nHardened derivation is used at this level.\n\n### Role\n\nEach account can be associated with its own keys. To distinguish different roles, a roles id is used to obtain a specific sub tree. Since each Graphene-based network can have it's own specific set of roles, the actually used role indices are provided in the section \"Registered networks\", below.\n\nHardened derivation is used at this level.\n\nThe Role comes prior to the Account index so that a role-specific parent key can be derived which allows to derive child keys that do not interfer with other roles.\nA simple use-case would be a mobile wallet app that does not want to expose owner keys but only has active keys available by going through the tree starting with:\n\n```\nm / purpose' / network' / [active]\n```\n\n### Account-Index\n\nSince hierarchical key derivation can be used to obtain an infinite amount of keys, we allow users to store keys for an infinite amount of accounts by using account indices. This means that account-index 0, derives a subkey to obtain multiple keys associated with account *A*, while account-index 1 does the same for account *B*. Note that the public keys cannot be associated with each other unless a common parent node in the tree is published.\n\nSoftware needs to discover all used accounts after importing the seed from an external source. Such an algorithm is described in \"Account discovery\" chapter.\n\nThus, software should prevent a update of an account with a specific key (see below) if a previous key does not have an account associated with it.\n\n## Account discovery\n\nWhen the master seed is imported from an external source the software should start to discover the accounts in the following manner (for a specific role, e.g. `active`):\n\n* derive the first account's node (index = 0)\n* derive the child keys for each role (respect the gap limit)\n* use the blockchains API to obtain the account associated with one of this public keys\n* if the public key is not associated with any account, stop discovery\n* if there is an account associated with any of these key, increase the account index and go to step 1\n\nDepending on the blockchain's API and available resources, account discovery could be done with multiple accounts (resepct the gap limit) at once. With a gap limit of 5 for account's and a gap limit of 5 for keys, we would need to scan for 25 keys. Combined with bloom filtering, the amount of data could be reduced at the expense of a single step lookup.\n\nThis algorithm is successful because software should disallow creation of new accounts if previous one has no associated account.\n\n### Key-Index\n\nWe want to be able to for example take an account's current role key and put it on a different device.\nIf that device is compromised, we want the other (more secure) device to be able to generate the new generation of that posting key without further interaction. For this reason, each accounts-role leaf generates a new subtree of keys. This allows to keep the keys for other roles and merely update the role with the compromised keys. Other wallets with the same tree will still be able to access the accounts by deriving the new keys.\n\n### Public Key gap limit\n\nPublic Key gap limit is currently set to 5. If the software hits 5 unused public keys in a row, it expects there are no used accounts beyond this point and stops searching the public key chain.\n\nWallet software should allow the advanced user to manually search beyond the gap limit of 5.\n\n## Account Setup Procedure\n\nThis paragraph describes how to *onboard* an existing account into this standard, e.g. for hardware wallets. Later it will be possible to create (and register) new accounts, given a funded account is already available through this specifications (account creation costs a fee on most networks).\n\nThe procedure to onboard an account involves **two** transactions and works as follows:\n\n1. The user requests an unused public key from the master (seed) node according to the specifications\n2. The obtained public key is **added** to the existing account's **owner** role (full-weight)\n3. This key is used for an `account_update` operation in order to replace the existing roles for sole access to the account by keys following this specification.\n\nThe advantages of this procedure are:\n\n* This algorithm proves that it has the correct private key to obtain owner roles since this key is required to sign the `account_update` operation.\n* Optionally, alternative keys to specific operations (e.g. *posting* roles on Steem) can be added that do not follow the above specification, to allow for multi-signature schemes\n* Wallets following this specification can be used solely as coldstorage for the owner key while the active key could be held outside the wallet\n\nDisadvantages are:\n\n* The user needs to be educated about the roles, or\n* a simplified account roles setup scheme needs to be developed\n\n## Registered networks\n\nIndex          | Network      | Roles\n---------------|--------------|---------------------------------------------------------\n0x00000000     | Steem        | `0x0`: owner, `0x1`: active, `0x3`: memo, `0x4`: posting\n0x00000001     | BitShares    | `0x0`: owner, `0x1`: active, `0x3`: memo\n0x00000002     | PeerPlays    | `0x0`: owner, `0x1`: active, `0x3`: memo\n0x00000003     | Muse         | `0x0`: owner, `0x1`: active, `0x3`: memo\n0x00000004     | EOS          | `0x0`: owner, `0x1`: active\n0x00000005     | FIBOS        | `0x0`: owner, `0x1`: active\n0x00000006     | ONE          | `0x0`: owner, `0x1`: active\n0x00000007     | SBC          | `0x0`: owner, `0x1`: active\n0x00000008     | YOYOW        | `0x0`: owner, `0x1`: active, `0x3`: memo, `0x4`: secondary\n0x00000009     | BOS          | `0x0`: owner, `0x1`: active\n0x0000000a     | ONEGRAM      | `0x0`: owner, `0x1`: active\n0x0000000b     | BRAVO        | `0x0`: owner, `0x1`: active, `0x3`: memo, `0x4`: posting\n0x0000000c     | DECENT       | `0x0`: owner, `0x1`: active, `0x3`: memo\n0x0000000d     | Hive         | `0x0`: owner, `0x1`: active, `0x3`: memo, `0x4`: posting\n0x00001388     | Vet The Vote | `0x0`: owner, `0x1`: active, `0x3`: memo, `0x4`: posting, `0x5`: comms\n0x000014da     | Keet         | `0x0`: owner\n\n## Examples\n\nNetwork    | Role          | Account-index  | Key-Index | Path\n-----------|---------------|----------------|-----------|----------------------------\nSteem      | active        | first          | first     | m / 48' / 0'    / 1' / 0' / 0'\nBitShares  | owner         | forth          | forth     | m / 48' / 1'    / 0' / 3' / 3'\nEOS        | owner         | first          | first     | m / 48' / 4'    / 0' / 0' / 0'\nFIBOS      | owner         | first          | first     | m / 48' / 5'    / 0' / 0' / 0'\nBOS        | owner         | first          | first     | m / 48' / 9'    / 0' / 0' / 0'\nONEGRAM    | owner         | first          | first     | m / 48' / 10'   / 0' / 0' / 0'\nV12        | comms         | first          | first     | m / 48' / 5000' / 5' / 0' / 0'\n\n## References\n\n* [BIP-0044: Multi-Account Hierarchy for Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki)\n* [Graphene Wiki](https://github.com/cryptonomex/graphene/wiki)\n\n## Updates\n\n2017/09/07: In the hierarchy, the key role and the account index are swapped to allow separation of roles in sub-trees.\n"
        },
        {
          "name": "slip-0048",
          "type": "tree",
          "content": null
        },
        {
          "name": "slip-0077.md",
          "type": "blob",
          "size": 3.091796875,
          "content": "# SLIP-0077 : Deterministic blinding key derivation for Confidential Transactions\n\n```\nNumber:  SLIP-0077\nTitle:   Deterministic blinding key derivation for Confidential Transactions\nType:    Standard\nStatus:  Draft\nAuthors: Roman Zeyde <mail@romanzey.de>\nCreated: 2019-06-15\n```\n\n## Abstract\n\nThis document describes a method for blinding key derivation\nfor Confidential Transactions, using a deterministic hierarchy.\n\n## General design\n\nIn confidential transactions, the sender and the receiver use ECDH to derive a shared nonce, which is then used for hiding/recovering of the actual value and asset type being transacted.\nIn Elements/Liquid, the receiver uses the following derivation scheme for his ECDH public/private keys:\n\n```\nblinding_private_key := HMAC_SHA256(key=master_blinding_key, msg=script_pubkey)\nblinding_public_key := secp256k1_publickey(private_key=blinding_private_key)\n```\n\nNote: `blinding_private_key` (as 256-bit scalar) must be less than the secp256k1 curve group order - otherwise, the derivation above must fail.\n\nThe receiver is using `blinding_public_key` to construct a \"confidential address\", which is used by the sender to blind the relevant transaction outputs. Each such blinded transaction output also contains the sender's ECDH public key, so the receiver would be able to recover the shared nonce using its `blinding_private_key`.\n\nAn additional use-case is sharing some/all of the receiver's blinding private keys with an external auditor, allowing unblinding the audited outputs without being able to spend them.\n\n## Design details\n\n### Master blinding key derivation\n\nIn order to use similar blinding key derivation scheme on TREZOR, we suggest using [SLIP-0021](https://github.com/satoshilabs/slips/blob/master/slip-0021.md) derivation scheme for `master_blinding_key`:\n\n```\ndomain := b\"Symmetric key seed\"\nroot   := HMAC_SHA512(key=domain, msg=seed)\n\nlabel := b\"SLIP-0077\"\nnode  := HMAC_SHA512(key=root[0:32], msg=(b\"\\x00\" + label))\n\nmaster_blinding_key := node[32:64]\n```\n\nThe above seed should be derived using [BIP-0039](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki#from-mnemonic-to-seed) mnemonic and passphrase (if available).\n\n### Shared nonce derivation\n\nThe shared nonce is derived using ECDH and double-SHA256 of the compressed shared public key:\n\n```\nshared := secp256k1_multiply(blinding_private_key, sender_public_key, compressed=True)\nnonce := SHA256(SHA256(shared))\n```\n\n## References\n\n* [An investigation into Confidential Transactions](https://github.com/AdamISZ/ConfidentialTransactionsDoc/blob/master/essayonCT.pdf)\n* [Confidential Transactions tutorial](https://elementsproject.org/elements-code-tutorial/confidential-transactions#blindingkey)\n* [Liquid Developer Guide](https://docs.blockstream.com/liquid/developer-guide/developer-guide-index.html#confidential-transactions)\n* [Elements' blinding key derivation](https://github.com/ElementsProject/elements/blob/a6beb256ed5195c2a1014a34fdf354d5797247a8/src/wallet/wallet.cpp#L5594)\n* [Elements' output unblinding using ECDH](https://github.com/ElementsProject/elements/blob/66c015529e7846f8491bcafd986326bcafc1bfcb/src/blind.cpp#L53)\n"
        },
        {
          "name": "slip-0132.md",
          "type": "blob",
          "size": 8.8447265625,
          "content": "# SLIP-0132 : Registered HD version bytes for BIP-0032\n\n```\nNumber:  SLIP-0132\nTitle:   Registered HD version bytes for BIP-0032\nType:    Standard\nStatus:  Active\nAuthors: Clark Moody <clark@clarkmoody.com>\nCreated: 2018-02-08\n```\n\n## Abstract\n\nBIP-0032 defines the derivation scheme for hierarchical deterministic wallets, which encode their public and private keys in an extended serialization format known as `xpub`. The `xpub` prefix is an artifact of Base58 encoding the four version bytes of the serialization format.\n\n## Motivation\n\nThe BIP repository defines public and private key version bytes for Bitcoin's mainnet and testnet. However, other cryptocurrencies use different version bytes for encoding HD seeds, and the BIP repository is focused on Bitcoin. Thus, we propose this SLIP act as a registry for all coin HD version bytes.\n\nSince BIP-0032 does not specify the address format for a given derivation path, wallet developers [have proposed](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/014907.html) altering the version bytes to achieve this. With the activation of SegWit on Bitcoin, the number of ways of encoding an address public key has increased. While [BIP-0049](https://github.com/bitcoin/bips/blob/master/bip-0049.mediawiki) proposes a method for encoding P2WPKH-nested-in-P2SH addresses, its original version failed to change the HD seed version bytes (retained `xpub` prefix), leading to unsustainable user confusion. Either the user must know that the `xpub` uses BIP-0049 derivation, or the consumer of the `xpub` must scan both address spaces (P2PKH and P2WPKH-in-P2SH).\n\n[BIP-0084](https://github.com/bitcoin/bips/blob/master/bip-0084.mediawiki) proposes a native-SegWit derivation scheme, encoding P2WPKH addresses in Bech32. However, the extended serialization format was originally presented with a `zpub` prefix but no version bytes. This is an issue since multiple values of the version bytes may encode to the same prefix.\n\nA final important motiviation for establishing a clearinghouse of HD version bytes is the fact that the extended serialization format does not encode the coin type. The [SLIP-0032](https://github.com/satoshilabs/slips/blob/master/slip-0032.md) proposal attempts a remedy by including the full BIP-0032 derivation path within the serialized key. Along with a human-readable prefix of `xpub` and Bech32 encoding, SLIP-0032 should greatly improve the wallet ecosystem. Until wallets begin implementation of SLIP-0032, however, this registry aims to alleviate the confusion.\n\n## Registered HD version bytes\n\nThese are the registered HD version bytes for extended serialization of public and private keys.\n\nCoin                                      | Public Key            | Private Key           | Address Encoding                 | BIP 32 Path |\n------------------------------------------|-----------------------|-----------------------|----------------------------------|-------------|\nBitcoin                                   | `0x0488b21e` - `xpub` | `0x0488ade4` - `xprv` | P2PKH or P2SH                    | m/44'/0'    |\nBitcoin                                   | `0x049d7cb2` - `ypub` | `0x049d7878` - `yprv` | P2WPKH in P2SH                   | m/49'/0'    |\nBitcoin                                   | `0x04b24746` - `zpub` | `0x04b2430c` - `zprv` | P2WPKH                           | m/84'/0'    |\nBitcoin                                   | `0x0295b43f` - `Ypub` | `0x0295b005` - `Yprv` | Multi-signature P2WSH in P2SH    | -           |\nBitcoin                                   | `0x02aa7ed3` - `Zpub` | `0x02aa7a99` - `Zprv` | Multi-signature P2WSH            | -           |\nBitcoin Testnet                           | `0x043587cf` - `tpub` | `0x04358394` - `tprv` | P2PKH or P2SH                    | m/44'/1'    |\nBitcoin Testnet                           | `0x044a5262` - `upub` | `0x044a4e28` - `uprv` | P2WPKH in P2SH                   | m/49'/1'    |\nBitcoin Testnet                           | `0x045f1cf6` - `vpub` | `0x045f18bc` - `vprv` | P2WPKH                           | m/84'/1'    |\nBitcoin Testnet                           | `0x024289ef` - `Upub` | `0x024285b5` - `Uprv` | Multi-signature P2WSH in P2SH    | -           |\nBitcoin Testnet                           | `0x02575483` - `Vpub` | `0x02575048` - `Vprv` | Multi-signature P2WSH            | -           |\nGroestlcoin                               | `0x0488b21e` - `xpub` | `0x0488ade4` - `xprv` | P2PKH or P2SH                    | m/44'/17'   |\nGroestlcoin                               | `0x049d7cb2` - `ypub` | `0x049d7878` - `yprv` | P2WPKH in P2SH                   | m/49'/17'   |\nGroestlcoin                               | `0x04b24746` - `zpub` | `0x04b2430c` - `zprv` | P2WPKH                           | m/84'/17'   |\nGroestlcoin                               | `0x0295b43f` - `Ypub` | `0x0295b005` - `Yprv` | Multi-signature P2WSH in P2SH    | -           |\nGroestlcoin                               | `0x02aa7ed3` - `Zpub` | `0x02aa7a99` - `Zprv` | Multi-signature P2WSH            | -           |\nGroestlcoin Testnet                       | `0x043587cf` - `tpub` | `0x04358394` - `tprv` | P2PKH or P2SH                    | m/44'/1'    |\nGroestlcoin Testnet                       | `0x044a5262` - `upub` | `0x044a4e28` - `uprv` | P2WPKH in P2SH                   | m/49'/1'    |\nGroestlcoin Testnet                       | `0x045f1cf6` - `vpub` | `0x045f18bc` - `vprv` | P2WPKH                           | m/84'/1'    |\nGroestlcoin Testnet                       | `0x024289ef` - `Upub` | `0x024285b5` - `Uprv` | Multi-signature P2WSH in P2SH    | -           |\nGroestlcoin Testnet                       | `0x02575483` - `Vpub` | `0x02575048` - `Vprv` | Multi-signature P2WSH            | -           |\nKylacoin                                  | `0x038f332e` - `kpub` | `0x038f2ef4` - `kprv` | P2PKH or P2SH                    | -           |\nKylacoin Testnet                          | `0x045f1cf6` - `vpub` | `0x045f18bc` - `vprv` | P2PKH or P2SH                    | -           |\nLitecoin                                  | `0x019da462` - `Ltub` | `0x019d9cfe` - `Ltpv` | P2PKH or P2SH                    | m/44'/2'    |\nLitecoin                                  | `0x01b26ef6` - `Mtub` | `0x01b26792` - `Mtpv` | P2WPKH in P2SH                   | m/49'/2'    |\nLitecoin Testnet                          | `0x0436f6e1` - `ttub` | `0x0436ef7d` - `ttpv` | P2PKH or P2SH                    | m/44'/1'    |\nLyncoin                                   | `0x019c354f` - `Lpub` | `0x019c3115` - `Lprv` | P2PKH or P2SH                    | -           |\nLyncoin Testnet                           | `0x022dbf5b` - `Tpub` | `0x022dbb21` - `Tprv` | P2PKH or P2SH                    | -           |\nNexa                                      | `0x42696720` - `xpub` | `0x426c6b73` - `xprv` | P2PKT or P2PKH or P2SH           | m/44'/29223'|\nNexa Testnet                              | `0x043587cf` - `xpub` | `0x04358394` - `xprv` | P2PKT or P2PKH or P2SH           | m/44'/1'    |\nVertcoin                                  | `0x0488b21e` - `vtcp` | `0x0488ade4` - `vtcv` | P2PKH or P2SH                    | m/44'/28'   |\nPolis                                     | `0x03e25d7e` - `ppub` | `0x03e25945` - `pprv` | P2PKH                            | m/44'/1997' |\nSyscoin                                   | `0x04b24746` - `zpub` | `0x04b2430c` - `zprv` | P2WPKH                           | m/84'/57'   |\nSyscoin                                   | `0x02aa7ed3` - `Zpub` | `0x02aa7a99` - `Zprv` | Multi-signature P2WSH            | -           |\n\n## Bitcoin Test Vectors\n\n```\nMnemonic: abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about\n\nm/44'/0'/0'\nxprv9xpXFhFpqdQK3TmytPBqXtGSwS3DLjojFhTGht8gwAAii8py5X6pxeBnQ6ehJiyJ6nDjWGJfZ95WxByFXVkDxHXrqu53WCRGypk2ttuqncb\nxpub6BosfCnifzxcFwrSzQiqu2DBVTshkCXacvNsWGYJVVhhawA7d4R5WSWGFNbi8Aw6ZRc1brxMyWMzG3DSSSSoekkudhUd9yLb6qx39T9nMdj\nm/44'/0'/0'/0/0 address:\n1LqBGSKuX5yYUonjxT5qGfpUsXKYYWeabA\n\nm/49'/0'/0'\nyprvAHwhK6RbpuS3dgCYHM5jc2ZvEKd7Bi61u9FVhYMpgMSuZS613T1xxQeKTffhrHY79hZ5PsskBjcc6C2V7DrnsMsNaGDaWev3GLRQRgV7hxF\nypub6Ww3ibxVfGzLrAH1PNcjyAWenMTbbAosGNB6VvmSEgytSER9azLDWCxoJwW7Ke7icmizBMXrzBx9979FfaHxHcrArf3zbeJJJUZPf663zsP\nm/49'/0'/0'/0/0 address:\n37VucYSaXLCAsxYyAPfbSi9eh4iEcbShgf\n\nm/84'/0'/0'\nzprvAdG4iTXWBoARxkkzNpNh8r6Qag3irQB8PzEMkAFeTRXxHpbF9z4QgEvBRmfvqWvGp42t42nvgGpNgYSJA9iefm1yYNZKEm7z6qUWCroSQnE\nzpub6rFR7y4Q2AijBEqTUquhVz398htDFrtymD9xYYfG1m4wAcvPhXNfE3EfH1r1ADqtfSdVCToUG868RvUUkgDKf31mGDtKsAYz2oz2AGutZYs\nm/84'/0'/0'/0/0 address:\nbc1qcr8te4kr609gcawutmrza0j4xv80jy8z306fyu\n```\n\n[Test vectors generation code](https://gist.github.com/clarkmoody/0a788d2e012ffe339bb7d3873e47c081)\n\n## References\n\n* [BIP-0032: Hierarchical Deterministic Wallets # Serialization](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#serialization-format)\n* [SLIP-0032: Extended serialization format for BIP-32 wallets](https://github.com/satoshilabs/slips/blob/master/slip-0032.md)\n"
        },
        {
          "name": "slip-0173.md",
          "type": "blob",
          "size": 22.1923828125,
          "content": "# SLIP-0173 : Registered human-readable parts for BIP-0173\n\n```\nNumber:  SLIP-0173\nTitle:   Registered human-readable parts for BIP-0173\nType:    Standard\nStatus:  Active\nAuthors: Clark Moody <clark@clarkmoody.com>\nCreated: 2017-05-17\n```\n\n## Abstract\n\nBIP-0173 defines a new format for segregated witness output addresses that contains a human-readable part that identifies the coin type.\n\n## Motivation\n\nThe BIP repository does not want to deal with assigning the values for various coin types different than Bitcoin so we propose this SLIP to become such body.\n\n## Registered human-readable parts\n\nThese are the registered human-readable parts for usage in Bech32 encoding of witness programs.\n\n| Coin                     | Mainnet       | Testnet  | Regtest     |\n| ------------------------ | ------------- | -------- | ----------- |\n| 8ball                    | `8ball`       |          |             |\n| Aaron Network            | `aaron`       |          |             |\n| Acrechain                | `acre`        |          |             |\n| Agoric                   | `agoric`      |          |             |\n| AIOZ Network             | `aioz`        |          |             |\n| Akash                    | `akash`       |          |             |\n| Andromeda                | `andr`        |          |             |\n| Alaya                    | `atp`         | `atx`    |             |\n| Althea                   | `althea`      |          |             |\n| Archway                  | `archway`     | `const`  |             |\n| Apc                      | `apc`         |          |             |\n| Arkhadian                | `arkh`        |          |             |\n| AssetMantle              | `mantle`      |          |             |\n| Athena                   | `ath`         | `atest`  |             |\n| AtomOne                  | `atone`       |          |             |\n| Aura Network             | `aura`        |          |             |\n| Axelar                   | `axelar`      |          |             |\n| Babylon                  | `bbn`         |          |             |\n| BARE                     | `bare`        | `tbare`  | `bart`      |\n| Band Protocol            | `band`        |          |             |\n| BeeZee                   | `bze`         | `tbz`    |             |\n| Bellcoin                 | `bm`          | `bt`     | `br`        |\n| BeOne Chain              | `boc`         | `tboc`   |             |\n| Binance Chain            | `bnb`         |          |             |\n| BitCanna                 | `bcna`        |          |             |\n| BitBadges                | `bb`          |          |             |\n| Bitcoin                  | `bc`          | `tb`     | `bcrt`      |\n| Bitcoin Atom             | `bca`         | `tbca`   | `bcart`     |\n| Bitcoin Gold             | `btg`         | `tbtg`   |             |\n| Bitcoin Platinum         | `btp`         | `tbtp`   |             |\n| Bitcoin Post-Quantum     | `pq`          | `tq`     | `pqrt`      |\n| Bitcoin Private          | `btcp`        | `tbtcp`  | `regbtcp`   |\n| Bitcore                  | `btx`         | `tbtx`   |             |\n| BitSong                  | `bitsong`     |          |             |\n| BitZeny                  | `bz`          | `tz`     | `rz`        |\n| Blackcoin                | `blk`         | `tblk`   | `blrt`      |\n| Blacknet                 | `blacknet`    |          | `rblacknet` |\n| BlockX                   | `blockx`      |          |             |\n| BlueChip                 | `bcp`         |          |             |\n| Bluzelle                 | `bluzelle`    |          |             |\n| bostrom                  | `bostrom`     |          |             |\n| Bouachain                | `bouachain`   |          |             |\n| Canto                    | `canto`       |          |             |\n| Carbon                   | `swth`        |          |             |\n| Celestia                 | `celestia`    |          |             |\n| Cerberus                 | `cerberus`    |          |             |\n| Chain4Energy             | `c4e`         |          |             |\n| cheqd                    | `cheqd`       |          |             |\n| Chia                     | `xch`         | `txch`   |             |\n| Chihuahua                | `chihuahua`   |          |             |\n| Chimba                   | `chimba`      |          |             |\n| Chronic Chain            | `chronic`     |          |             |\n| Cifer                    | `cife`        | `cift`   |             |\n| City Coin                | `city`        | `tcity`  |             |\n| Cnho Stables             | `cnho`        |          |             |\n| Comdex                   | `comdex`      |          |             |\n| Commercio                | `did:com:`    |          |             |\n| Composable               | `centauri`    |          |             |\n| ConsciousDAO             | `cvn`         |          |             |\n| Coreum                   | `core`        |`testcore`|             |\n| Cosmos Hub               | `cosmos`      |          |             |\n| Coss Chain               | `coss`        | `tcoss`  |             |\n| CPUchain                 | `cpu`         | `tcpu`   | `rcpu`      |\n| Craft Economy            | `craft`       |          |             |\n| CranePay                 | `cp`          | `cpt`    | `cpr`       |\n| Crescent                 | `cre`         |          |             |\n| Cronos                   | `crc`         |          |             |\n| Crypto Chain             | `cro`         | `tcro`   |             |\n| Cudos                    | `cudos`       |          |             |\n| Cyber                    | `cyber`       |          |             |\n| Cyberyen                 | `cy`          | `tcy`    | `rcy`       |\n| Decentr                  | `decentr`     |          |             |\n| Desmos                   | `desmos`      |          |             |\n| dHealth                  | `dh`          |          |             |\n| Dig Chain                | `dig`         |          |             |\n| DigiByte                 | `dgb`         | `dgbt`   | `dgbrt`     |\n| Dora Vota                | `dora`        |          |             |\n| Developer Network        | `dev`         |          |             |\n| Dungeon Network          | `dungeon`     |          |             |\n| dYdX Protocol            | `dydx`        |          |             |\n| Dymension                | `dym`         |          |             |\n| Dyson Protocol           | `dys`         |          |             |\n| Echelon                  | `echelon`     |          |             |\n| e-Money                  | `emoney`      |          |             |\n| Elys Network             | `elys`        |          |             |\n| EmpowerChain             | `empower`     |          |             |\n| Epix                     | `epix`        |          |             |\n| Ethos                    | `ethos`       |          |             |\n| Evmos                    | `evmos`       |          |             |\n| Fetch                    | `fetch`       |          |             |\n| Finschia                 | `link`        | `tlink`  |             |\n| FirmaChain               | `firma`       |          |             |\n| Fren.ai                  | `fren`        | `fren-1` |             |\n| FujiCoin                 | `fc`          | `tf`     | `fcrt`      |\n| Furya                    | `furya`       |          |             |\n| f(x)Core                 | `fx`          |          |             |\n| Galaxy                   | `galaxy`      |          |             |\n| GovGen                   | `govgen`      |          |             |\n| Wormhole Gateway         | `wormhole`    |          |             |\n| GenesisL1                | `genesis`     |          |             |\n| GGEZ1 Chain              | `ggez`        |          |             |\n| Gitopia                  | `gitopia`     |          |             |\n| GlobalBoost-Y            | `gb`          | `gbt`    | `gbrt`      |\n| Golden Gate              | `ggx`         | `ggxt`   |             |\n| Gravity Bridge           | `gravity`     |          |             |\n| Groestlcoin              | `grs`         | `tgrs`   | `grsrt`     |\n| Handshake                | `hs`          | `ts`     | `rs`        |\n| Haqq Network             | `haqq`        |          |             |\n| Hash                     | `pb`          | `tp`     |             |\n| HashKey Chain            | `hsk`         | `hst`    |             |\n| Hedge                    | `hedge`       |          |             |\n| HeliChain                | `heli`        |          |             |\n| Highbury                 | `fury`        |          |             |\n| HoneyWood                | `bears`       |          |             |\n| Humans                   | `human`       |          |             |\n| Hypersign                | `hid`         |          |             |\n| IDEP                     | `idep`        |          |             |\n| Imversed                 | `imv`         |          |             |\n| Int3face                 | `int3`        |          |             |\n| Initia                   | `init`        |          |             |\n| Injective                | `inj`         |          |             |\n| IOTA                     | `iota`        | `atoi`   |             |\n| IoTeX                    | `io`          | `it`     |             |\n| IRISnet                  | `iaa`         |          |             |\n| Impact Hub               | `ixo`         |          |             |\n| Jackal                   | `jkl`         |          |             |\n| Juno                     | `juno`        |          |             |\n| Joltify                  | `jolt`        |          |             |\n| Kava                     | `kava`        |          |             |\n| Ki                       | `ki`          |          |             |\n| Kima Network             | `kima`        |          |             |\n| Kira Network             | `kira`        |          |             |\n| Konstellation            | `darc`        |          |             |\n| kopi                     | `kopi`        |          |             |\n| Kujira                   | `kujira`      |          |             |\n| Kylacoin                 | `kc`          | `tkc`    | `kcrt`      |\n| KYVE                     | `kyve`        |          |             |\n| Lambda                   | `lamb`        |          |             |\n| LatticeX                 | `pla`         | `plt`    |             |\n| Lava                     | `lava@`       | `lava@`  |             |\n| LikeCoin                 | `like`        |          |             |\n| Litecoin                 | `ltc`         | `tltc`   | `rltc`      |\n| Logos                    | `logos`       |          |             |\n| Loop                     | `loop`        |          |             |\n| Lorenzo                  | `lrz`         |          |             |\n| Loyal                    | `loyal`       |          |             |\n| Lum Network              | `lum`         |          |             |\n| LumenX                   | `lumen`       |          |             |\n| Lyncoin                  | `lc`          | `tlc`    | `lcrt`      |\n| Mande Network            | `mande`       |          |             |\n| MANTRA Chain             | `mantra`      |          |             |\n| Mars Protocol            | `mars`        |          |             |\n| Maya Protocol            | `maya`        | `smaya`  |             |\n| Medas Digital            | `medas`       |          |             |\n| Medibloc                 | `panacea`     |          |             |\n| MEME                     | `meme`        |          |             |\n| MetaNova Verse           | `mnova`       |          |             |\n| Microtick                | `micro`       |          |             |\n| Migaloo                  | `migaloo`     |          |             |\n| MilkyWay                 | `milk`        |          |             |\n| Mises                    | `mises`       |          |             |\n| Monacoin                 | `mona`        | `tmona`  | `rmona`     |\n| Moneta Coin              | `moneta`      |          |             |\n| MTGBP                    | `mtgbp`       | `tmtgbp` | `rmtgbp`    |\n| MUN Blockchain           | `mun`         |          |             |\n| Mutelandia Network       | `mute`        |          |             |\n| Myriad                   | `my`          | `tm`     |             |\n| Mythos                   | `mythos`      |          |             |\n| Namecoin                 | `nc`          | `tn`     | `ncrt`      |\n| Neura                    | `neura`       |          |             |\n| Neutaro                  | `neutaro`     |          |             |\n| Neutron                  | `neutron`     |          |             |\n| Nexa                     | `nexa`        |`nexatest`| `nexareg`   |\n| Nibiru                   | `nibi`        |          |             |\n| Nillion                  | `nillion`     |          |             |\n| Nim                      | `nim`         |          |             |\n| Noble                    | `noble`       |          |             |\n| Nois                     | `nois`        |          |             |\n| Nomic                    | `nomic`       |          |             |\n| Nyx                      | `n`           |          |             |\n| Oasis Network            | `oasis`       | `oasis`  |             |\n| Octa                     | `octa`        |          |             |\n| Odin Protocol            | `odin`        |          |             |\n| OKExChain                | `ex`          |          |             |\n| OKP4                     | `okp4`        |          |             |\n| Omni                     | `o`           | `to`     | `ocrt`      |\n| OmniFlix                 | `omniflix`    |          |             |\n| OPCT Chain               | `opct`        |          |             |\n| Onomy                    | `onomy`       |          |             |\n| Oraichain                | `orai`        |          |             |\n| Osmosis                  | `osmo`        |          |             |\n| Paloma                   | `paloma`      |          |             |\n| Passage                  | `pasg`        |          |             |\n| Peercoin                 | `xpc`         | `tpc`    |             |\n| Persistence              | `persistence` |          |             |\n| Picasso                  | `pica`        |          |             |\n| PKT                      | `pkt`         | `tpk`    |             |\n| Planq                    | `plq`         |          |             |\n| PlatON                   | `lat`         | `lax`    |             |\n| Point Network            | `point`       | `xpoint` |             |\n| Provenance               | `pb`          | `tp`     |             |\n| Pryzm                    | `pryzm`       |          |             |\n| Pundi X Chain            | `px`          |          |             |\n| Pylons                   | `pylo`        |          |             |\n| QFS                      | `qfs`         | `tqfs`   | `rqfs  `    |\n| Quantum Resistant Ledger | `qrl`         | `tqrl`   | `qrlrt`     |\n| Quasar                   | `quasar`      |          |             |\n| Quicksilver              | `quick`       |          |             |\n| Qwoyn Blockchain         | `qwoyn`       |          |             |\n| Ravencoin                | `rc`          | `tr`     | `rcrt`      |\n| Realio Network           | `realio`      |          |             |\n| Rebus                    | `rebus`       |          |             |\n| Regen                    | `regen`       |          |             |\n| Riecoin                  | `ric`         | `tric`   | `rric`      |\n| Rizon                    | `rizon`       |          |             |\n| Router Protocol          | `router`       |          |             |\n| Saga                     | `saga`        | `tsaga`  |             |\n| Scash                    | `scash`       | `tscash` | `rscash`    |\n| Scorum Network           | `scorum`      |          |             |\n| SEDA                     | `seda`        |          |             |\n| Secret Network           | `secret`      |          |             |\n| Sei                      | `sei`         |          |             |\n| Self Chain               | `self`        |          |             |\n| Sentinel                 | `sent`        |          |             |\n| SGE Network              | `sge`         |          |             |\n| ShareLedger              | `shareledger` |          |             |\n| Shentu                   | `shentu`      |          |             |\n| Shido                    | `shido`       |          |             |\n| Shimmer                  | `smr`         | `rms`    |             |\n| Sifchain                 | `sif`         |          |             |\n| SIX Protocol             | `6x`          |          |             |\n| Sommelier                | `somm`        |          |             |\n| Sonr                     | `idx`         |          |             |\n| Source                   | `source`      |          |             |\n| Spacemesh                | `sm`          | `stest`  |             |\n| StaFiHub                 | `stafi`       |          |             |\n| Stargaze                 | `stars`       |          |             |\n| Starname                 | `star`        |          |             |\n| Straightedge             | `str`         |          |             |\n| Stratos                  | `st`          |          |             |\n| Stride                   | `stride`      |          |             |\n| Sugarchain               | `sugar`       | `tugar`  | `rugar`     |\n| Susucoin                 | `susu`        | `tutu`   | `ruru`      |\n| Symphony                 | `symphony`    |          |             |\n| Synternet                | `synt`        | `amber`  |             |\n| Syscoin                  | `sys`         | `tsys`   | `scrt`      |\n| TakeTitan                | `ttnc`        | `tttnc`  | `rttnc`     |\n| Tenet                    | `tenet`       |          |             |\n| Teritori                 | `tori`        |          |             |\n| Terp                     | `terp`        |          |             |\n| Terra                    | `terra`       |          |             |\n| Tgrade                   | `tgrade`      |          |             |\n| Thorchain                | `thor`        |          |             |\n| Titan                    | `titan`       |          |             |\n| Ulas                     | `ulas`        |          |             |\n| Umee                     | `umee`        |          |             |\n| Unification              | `und`         |          |             |\n| UnUniFi                  | `ununifi`     |          |             |\n| Unit-e                   | `ue`          | `tue`    | `uert`      |\n| Uptick                   | `uptick`      |          |             |\n| Vertcoin                 | `vtc`         | `tvtc`   |             |\n| Viacoin                  | `via`         | `tvia`   |             |\n| Vidulum                  | `vdl`         | `tvdl`   |             |\n| VinceChain               | `vce`         |          |             |\n| VIPSTARCOIN              | `vips`        | `tvips`  |             |\n| Wpc                      | `wpc`         |          |             |\n| Xion                     | `xion`        | `txion`  |             |\n| XPLA                     | `xpla`        |          |             |\n| YeeCo                    | `yee`         | `tyee`   |             |\n| Zen Protocol             | `zen`         | `tzn`    |             |\n| ZetaChain                | `zeta`        |          |             |\n| Zilliqa                  | `zil`         | `tzil`   |             |\n\n## Non-Segwit-compatible uses of Bech32 / Bech32m\n\nThe following human-readable parts are registered for formats using Bech32 or Bech32m\nthat are not compatible with Segwit. Entries annotated with \"(m)\" use Bech32m [BIP-0350];\nother entries use Bech32. `[text]` indicates variable content in the human-readable part.\n\n| Project           | Mainnet / Production           | Testnet                    | Regtest                       |\n| ----------------- | ------------------------------ | -------------------------- | ----------------------------- |\n| age               | `age`                          |\n|                   | `age-secret-key-`              |\n|                   | `age1[name]`                   |\n|                   | `age-plugin-[name]-`           |\n| Lightning Network | `ln[currency prefix + amount]` |\n| Zcash             | `zs`                           | `ztestsapling`             | `zregtestsapling`             |\n|                   | `zivks`                        | `zivktestsapling`          | `zivkregtestsapling`          |\n|                   | `zxviews`                      | `zxviewtestsapling`        | `zxviewregtestsapling`        |\n|                   | `zxsprout`                     | `zxtestsprout`             | `zxregtestsprout`             |\n|                   | `secret-spending-key-main`     | `secret-spending-key-test` | `secret-spending-key-regtest` |\n|                   | `secret-extended-key-main`     | `secret-extended-key-test` | `secret-extended-key-regtest` |\n|                   | `u` (m)                        | `utest` (m)                | `uregtest` (m)                |\n|                   | `uivk` (m)                     | `uivktest` (m)             | `uivkregtest` (m)             |\n|                   | `uview` (m)                    | `uviewtest` (m)            | `uviewregtest` (m)            |\n\n## Uses of codex32\n\nThe codex32 format is used to store master secret data. It features an extended\nchecksum versus the one used in Bech32 in order to support enhanced error\ncorrection. Codex32 uses the same notion of a human-readable part and the same\nset of 32 characters as other Bech32 formats.\n\n| Application          | Human-readable part  |\n| -------------------- | -------------------- |\n| CLN's HSM secret     | `cl`                 |\n| BIP-0032 master seed | `ms`                 |\n\n## Libraries\n\n- [Reference Implementations](https://github.com/sipa/bech32/tree/master/ref)\n\n## References\n\n- [BIP-0173: Base32 address format for native v0-16 witness outputs](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)\n- [BIP-0350: Bech32m format for v1+ witness addresses](https://github.com/bitcoin/bips/blob/master/bip-0350.mediawiki)\n- [BIP-0093: codex32: Checksummed SSSS-aware BIP32 seeds](https://github.com/bitcoin/bips/blob/master/bip-0093.mediawiki)\n"
        }
      ]
    }
  ]
}