{
  "metadata": {
    "timestamp": 1736557360895,
    "page": 329,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nlohmann/json",
      "stars": 43986,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 0.39,
          "content": "arm_container:\n  image: gcc:latest\n\ncheck_task:\n  check_script:\n  - wget https://github.com/Kitware/CMake/releases/download/v3.20.2/cmake-3.20.2.tar.gz\n  - tar xfz cmake-3.20.2.tar.gz\n  - cd cmake-3.20.2\n  - ./configure\n  - make cmake ctest -j4\n  - cd ..\n  - mkdir build\n  - cd build\n  - ../cmake-3.20.2/bin/cmake .. -DJSON_FastTests=ON\n  - make -j4\n  - cd tests\n  - ../../cmake-3.20.2/bin/ctest -j4\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 2.8,
          "content": "# TODO: The first three checks are only removed to get the CI going. They have to be addressed at some point.\n\nChecks: '*,\n\n         -portability-template-virtual-member-function,\n         -bugprone-use-after-move,\n         -hicpp-invalid-access-moved,\n\n         -altera-id-dependent-backward-branch,\n         -altera-struct-pack-align,\n         -altera-unroll-loops,\n         -android-cloexec-fopen,\n         -boost-use-ranges,\n         -bugprone-easily-swappable-parameters,\n         -cert-err58-cpp,\n         -concurrency-mt-unsafe,\n         -cppcoreguidelines-avoid-const-or-ref-data-members,\n         -cppcoreguidelines-avoid-do-while,\n         -cppcoreguidelines-avoid-goto,\n         -cppcoreguidelines-avoid-magic-numbers,\n         -cppcoreguidelines-avoid-non-const-global-variables,\n         -cppcoreguidelines-macro-usage,\n         -cppcoreguidelines-pro-bounds-array-to-pointer-decay,\n         -cppcoreguidelines-pro-bounds-constant-array-index,\n         -cppcoreguidelines-pro-bounds-pointer-arithmetic,\n         -cppcoreguidelines-pro-type-reinterpret-cast,\n         -cppcoreguidelines-pro-type-union-access,\n         -cppcoreguidelines-rvalue-reference-param-not-moved,\n         -cppcoreguidelines-virtual-class-destructor,\n         -fuchsia-default-arguments-calls,\n         -fuchsia-default-arguments-declarations,\n         -fuchsia-overloaded-operator,\n         -google-explicit-constructor,\n         -google-readability-function-size,\n         -google-runtime-int,\n         -google-runtime-references,\n         -hicpp-avoid-goto,\n         -hicpp-explicit-conversions,\n         -hicpp-function-size,\n         -hicpp-no-array-decay,\n         -hicpp-no-assembler,\n         -hicpp-signed-bitwise,\n         -hicpp-uppercase-literal-suffix,\n         -llvm-header-guard,\n         -llvm-include-order,\n         -llvmlibc-*,\n         -misc-use-anonymous-namespace,\n         -misc-confusable-identifiers,\n         -misc-include-cleaner,\n         -misc-no-recursion,\n         -misc-non-private-member-variables-in-classes,\n         -modernize-concat-nested-namespaces,\n         -modernize-type-traits,\n         -modernize-use-constraints,\n         -modernize-use-designated-initializers,\n         -modernize-use-nodiscard,\n         -modernize-use-ranges,\n         -modernize-use-std-numbers,\n         -modernize-use-trailing-return-type,\n         -performance-enum-size,\n         -readability-function-cognitive-complexity,\n         -readability-function-size,\n         -readability-identifier-length,\n         -readability-magic-numbers,\n         -readability-redundant-access-specifiers,\n         -readability-simplify-boolean-expr,\n         -readability-uppercase-literal-suffix'\n\nCheckOptions:\n  - key: hicpp-special-member-functions.AllowSoleDefaultDtor\n    value: 1\n\nWarningsAsErrors: '*'\n\n#HeaderFilterRegex: '.*nlohmann.*'\nHeaderFilterRegex: '.*hpp$'\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7,
          "content": "*.dSYM\n*.o\n*.gcno\n*.gcda\n.DS_Store\n\n.wsjcpp-logs/*\n.wsjcpp/*\n\n/.idea\n/cmake-build-*\n\n# Visual Studio / Visual Studio Code\n/.vs/\n/.vscode/\n/out/\n\n# clangd cache\n/.cache/\n\n# build directories (vscode-cmake-tools, user-defined, ...)\n/build*/\n\n# fuzzers\n/tests/corpus_*\n/tests/parse_*_fuzzer\n\n# documentation\n/docs/docset/docSet.dsidx\n/docs/docset/JSON_for_Modern_C++.docset/\n/docs/docset/JSON_for_Modern_C++.tgz\n/docs/mkdocs/docs/__pycache__/\n/docs/mkdocs/docs/examples/\n/docs/mkdocs/docs/images/json.gif\n/docs/mkdocs/site/\n/docs/mkdocs/venv/\n\n# serve_header\n/localhost.pem\n/localhost-key.pem\n/serve_header.yml\n\n# Swift Package Manager build directory\n/.build\n\n/tools/astyle/venv/\n\n# Bazel-related\nMODULE.bazel.lock\n"
        },
        {
          "name": ".lgtm.yml",
          "type": "blob",
          "size": 0.08,
          "content": "path_classifiers:\n  thirdparty:\n    - /tools/amalgamate\n    - /tools/cpplint\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.39,
          "content": "repos:\n- repo: https://github.com/gitleaks/gitleaks\n  rev: v8.16.3\n  hooks:\n  - id: gitleaks\n- repo: https://github.com/pocc/pre-commit-hooks\n  rev: v1.3.5\n  hooks:\n  - id: cpplint\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v4.4.0\n  hooks:\n  - id: end-of-file-fixer\n  - id: trailing-whitespace\n- repo: https://github.com/pylint-dev/pylint\n  rev: v2.17.2\n  hooks:\n  - id: pylint\n"
        },
        {
          "name": ".reuse",
          "type": "tree",
          "content": null
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 3.11,
          "content": "load(\"@rules_cc//cc:cc_library.bzl\", \"cc_library\")\nload(\"@rules_license//rules:license.bzl\", \"license\")\n\npackage(\n    default_applicable_licenses = [\":license\"],\n)\n\nexports_files([\n    \"LICENSE.MIT\",\n])\n\nlicense(\n    name = \"license\",\n    license_kinds = [\"@rules_license//licenses/spdx:MIT\"],\n    license_text = \"LICENSE.MIT\",\n)\n\ncc_library(\n    name = \"json\",\n    hdrs = [\n        \"include/nlohmann/adl_serializer.hpp\",\n        \"include/nlohmann/byte_container_with_subtype.hpp\",\n        \"include/nlohmann/detail/abi_macros.hpp\",\n        \"include/nlohmann/detail/conversions/from_json.hpp\",\n        \"include/nlohmann/detail/conversions/to_chars.hpp\",\n        \"include/nlohmann/detail/conversions/to_json.hpp\",\n        \"include/nlohmann/detail/exceptions.hpp\",\n        \"include/nlohmann/detail/hash.hpp\",\n        \"include/nlohmann/detail/input/binary_reader.hpp\",\n        \"include/nlohmann/detail/input/input_adapters.hpp\",\n        \"include/nlohmann/detail/input/json_sax.hpp\",\n        \"include/nlohmann/detail/input/lexer.hpp\",\n        \"include/nlohmann/detail/input/parser.hpp\",\n        \"include/nlohmann/detail/input/position_t.hpp\",\n        \"include/nlohmann/detail/iterators/internal_iterator.hpp\",\n        \"include/nlohmann/detail/iterators/iter_impl.hpp\",\n        \"include/nlohmann/detail/iterators/iteration_proxy.hpp\",\n        \"include/nlohmann/detail/iterators/iterator_traits.hpp\",\n        \"include/nlohmann/detail/iterators/json_reverse_iterator.hpp\",\n        \"include/nlohmann/detail/iterators/primitive_iterator.hpp\",\n        \"include/nlohmann/detail/json_custom_base_class.hpp\",\n        \"include/nlohmann/detail/json_pointer.hpp\",\n        \"include/nlohmann/detail/json_ref.hpp\",\n        \"include/nlohmann/detail/macro_scope.hpp\",\n        \"include/nlohmann/detail/macro_unscope.hpp\",\n        \"include/nlohmann/detail/meta/call_std/begin.hpp\",\n        \"include/nlohmann/detail/meta/call_std/end.hpp\",\n        \"include/nlohmann/detail/meta/cpp_future.hpp\",\n        \"include/nlohmann/detail/meta/detected.hpp\",\n        \"include/nlohmann/detail/meta/identity_tag.hpp\",\n        \"include/nlohmann/detail/meta/is_sax.hpp\",\n        \"include/nlohmann/detail/meta/std_fs.hpp\",\n        \"include/nlohmann/detail/meta/type_traits.hpp\",\n        \"include/nlohmann/detail/meta/void_t.hpp\",\n        \"include/nlohmann/detail/output/binary_writer.hpp\",\n        \"include/nlohmann/detail/output/output_adapters.hpp\",\n        \"include/nlohmann/detail/output/serializer.hpp\",\n        \"include/nlohmann/detail/string_concat.hpp\",\n        \"include/nlohmann/detail/string_escape.hpp\",\n        \"include/nlohmann/detail/string_utils.hpp\",\n        \"include/nlohmann/detail/value_t.hpp\",\n        \"include/nlohmann/json.hpp\",\n        \"include/nlohmann/json_fwd.hpp\",\n        \"include/nlohmann/ordered_map.hpp\",\n        \"include/nlohmann/thirdparty/hedley/hedley.hpp\",\n        \"include/nlohmann/thirdparty/hedley/hedley_undef.hpp\",\n    ],\n    includes = [\"include\"],\n    visibility = [\"//visibility:public\"],\n)\n\ncc_library(\n    name = \"singleheader-json\",\n    hdrs = [\n        \"single_include/nlohmann/json.hpp\",\n    ],\n    includes = [\"single_include\"],\n    visibility = [\"//visibility:public\"],\n)\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.4,
          "content": "cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n  - family-names: Lohmann\n    given-names: Niels\n    orcid: https://orcid.org/0000-0001-9037-795X\n    email: mail@nlohmann.me\n    website: https://nlohmann.me\ntitle: \"JSON for Modern C++\"\nversion: 3.11.3\ndate-released: 2023-11-28\nlicense: MIT\nrepository-code: \"https://github.com/nlohmann\"\nurl: https://json.nlohmann.me\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 7.68,
          "content": "cmake_minimum_required(VERSION 3.1...3.14)\n\n##\n## PROJECT\n## name and version\n##\nproject(nlohmann_json VERSION 3.11.3 LANGUAGES CXX)\n\n##\n## MAIN_PROJECT CHECK\n## determine if nlohmann_json is built as a subproject (using add_subdirectory) or if it is the main project\n##\nset(MAIN_PROJECT OFF)\nif (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n    set(MAIN_PROJECT ON)\nendif()\n\n##\n## INCLUDE\n##\n##\nset(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})\ninclude(ExternalProject)\n\n##\n## OPTIONS\n##\n\nif (POLICY CMP0077)\n    # Allow CMake 3.13+ to override options when using FetchContent / add_subdirectory.\n    cmake_policy(SET CMP0077 NEW)\nendif ()\n\n# VERSION_GREATER_EQUAL is not available in CMake 3.1\nif(${MAIN_PROJECT} AND (${CMAKE_VERSION} VERSION_EQUAL 3.13 OR ${CMAKE_VERSION} VERSION_GREATER 3.13))\n    set(JSON_BuildTests_INIT ON)\nelse()\n    set(JSON_BuildTests_INIT OFF)\nendif()\noption(JSON_BuildTests                     \"Build the unit tests when BUILD_TESTING is enabled.\" ${JSON_BuildTests_INIT})\noption(JSON_CI                             \"Enable CI build targets.\" OFF)\noption(JSON_Diagnostics                    \"Use extended diagnostic messages.\" OFF)\noption(JSON_Diagnostic_Positions           \"Enable diagnostic positions.\" OFF)\noption(JSON_GlobalUDLs                     \"Place user-defined string literals in the global namespace.\" ON)\noption(JSON_ImplicitConversions            \"Enable implicit conversions.\" ON)\noption(JSON_DisableEnumSerialization       \"Disable default integer enum serialization.\" OFF)\noption(JSON_LegacyDiscardedValueComparison \"Enable legacy discarded value comparison.\" OFF)\noption(JSON_Install                        \"Install CMake targets during install step.\" ${MAIN_PROJECT})\noption(JSON_MultipleHeaders                \"Use non-amalgamated version of the library.\" ON)\noption(JSON_SystemInclude                  \"Include as system headers (skip for clang-tidy).\" OFF)\n\nif (JSON_CI)\n    include(ci)\nendif ()\n\n##\n## CONFIGURATION\n##\ninclude(GNUInstallDirs)\n\nif (NOT DEFINED NLOHMANN_JSON_TARGET_NAME)\n    # Allow overriding the target name when using FetchContent / add_subdirectory.\n    set(NLOHMANN_JSON_TARGET_NAME ${PROJECT_NAME})\nendif()\n\nset(NLOHMANN_JSON_CONFIG_INSTALL_DIR        \"${CMAKE_INSTALL_DATADIR}/cmake/${PROJECT_NAME}\" CACHE INTERNAL \"\")\nset(NLOHMANN_JSON_INCLUDE_INSTALL_DIR       \"${CMAKE_INSTALL_INCLUDEDIR}\")\nset(NLOHMANN_JSON_TARGETS_EXPORT_NAME       \"${PROJECT_NAME}Targets\")\nset(NLOHMANN_JSON_CMAKE_CONFIG_TEMPLATE     \"cmake/config.cmake.in\")\nset(NLOHMANN_JSON_CMAKE_CONFIG_DIR          \"${CMAKE_CURRENT_BINARY_DIR}\")\nset(NLOHMANN_JSON_CMAKE_VERSION_CONFIG_FILE \"${NLOHMANN_JSON_CMAKE_CONFIG_DIR}/${PROJECT_NAME}ConfigVersion.cmake\")\nset(NLOHMANN_JSON_CMAKE_PROJECT_CONFIG_FILE \"${NLOHMANN_JSON_CMAKE_CONFIG_DIR}/${PROJECT_NAME}Config.cmake\")\nset(NLOHMANN_JSON_CMAKE_PROJECT_TARGETS_FILE \"${NLOHMANN_JSON_CMAKE_CONFIG_DIR}/${PROJECT_NAME}Targets.cmake\")\nset(NLOHMANN_JSON_PKGCONFIG_INSTALL_DIR     \"${CMAKE_INSTALL_DATADIR}/pkgconfig\")\n\nif (JSON_MultipleHeaders)\n    set(NLOHMANN_JSON_INCLUDE_BUILD_DIR \"${PROJECT_SOURCE_DIR}/include/\")\n    message(STATUS \"Using the multi-header code from ${NLOHMANN_JSON_INCLUDE_BUILD_DIR}\")\nelse()\n    set(NLOHMANN_JSON_INCLUDE_BUILD_DIR \"${PROJECT_SOURCE_DIR}/single_include/\")\n    message(STATUS \"Using the single-header code from ${NLOHMANN_JSON_INCLUDE_BUILD_DIR}\")\nendif()\n\nif (NOT JSON_ImplicitConversions)\n    message(STATUS \"Implicit conversions are disabled (JSON_USE_IMPLICIT_CONVERSIONS=0)\")\nendif()\n\nif (JSON_DisableEnumSerialization)\n    message(STATUS \"Enum integer serialization is disabled (JSON_DISABLE_ENUM_SERIALIZATION=0)\")\nendif()\n\nif (JSON_LegacyDiscardedValueComparison)\n    message(STATUS \"Legacy discarded value comparison enabled (JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON=1)\")\nendif()\n\nif (JSON_Diagnostics)\n    message(STATUS \"Diagnostics enabled (JSON_DIAGNOSTICS=1)\")\nendif()\n\nif (JSON_Diagnostic_Positions)\n    message(STATUS \"Diagnostic positions enabled\")\nendif()\n\nif (NOT JSON_GlobalUDLs)\n    message(STATUS \"User-defined string literals are not put in the global namespace (JSON_USE_GLOBAL_UDLS=0)\")\nendif()\n\nif (JSON_SystemInclude)\n    set(NLOHMANN_JSON_SYSTEM_INCLUDE \"SYSTEM\")\nendif()\n\n##\n## TARGET\n## create target and add include path\n##\nadd_library(${NLOHMANN_JSON_TARGET_NAME} INTERFACE)\nadd_library(${PROJECT_NAME}::${NLOHMANN_JSON_TARGET_NAME} ALIAS ${NLOHMANN_JSON_TARGET_NAME})\nif (${CMAKE_VERSION} VERSION_LESS \"3.8.0\")\n    target_compile_features(${NLOHMANN_JSON_TARGET_NAME} INTERFACE cxx_range_for)\nelse()\n    target_compile_features(${NLOHMANN_JSON_TARGET_NAME} INTERFACE cxx_std_11)\nendif()\n\ntarget_compile_definitions(\n    ${NLOHMANN_JSON_TARGET_NAME}\n    INTERFACE\n    $<$<NOT:$<BOOL:${JSON_GlobalUDLs}>>:JSON_USE_GLOBAL_UDLS=0>\n    $<$<NOT:$<BOOL:${JSON_ImplicitConversions}>>:JSON_USE_IMPLICIT_CONVERSIONS=0>\n    $<$<BOOL:${JSON_DisableEnumSerialization}>:JSON_DISABLE_ENUM_SERIALIZATION=1>\n    $<$<BOOL:${JSON_Diagnostics}>:JSON_DIAGNOSTICS=1>\n    $<$<BOOL:${JSON_Diagnostic_Positions}>:JSON_DIAGNOSTIC_POSITIONS=1>\n    $<$<BOOL:${JSON_LegacyDiscardedValueComparison}>:JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON=1>\n)\n\ntarget_include_directories(\n    ${NLOHMANN_JSON_TARGET_NAME}\n    ${NLOHMANN_JSON_SYSTEM_INCLUDE} INTERFACE\n    $<BUILD_INTERFACE:${NLOHMANN_JSON_INCLUDE_BUILD_DIR}>\n    $<INSTALL_INTERFACE:${NLOHMANN_JSON_INCLUDE_INSTALL_DIR}>\n)\n\n## add debug view definition file for msvc (natvis)\nif (MSVC)\n    set(NLOHMANN_ADD_NATVIS TRUE)\n    set(NLOHMANN_NATVIS_FILE \"nlohmann_json.natvis\")\n    target_sources(\n        ${NLOHMANN_JSON_TARGET_NAME}\n        INTERFACE\n            $<INSTALL_INTERFACE:${NLOHMANN_NATVIS_FILE}>\n            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${NLOHMANN_NATVIS_FILE}>\n    )\nendif()\n\n# Install a pkg-config file, so other tools can find this.\nCONFIGURE_FILE(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/pkg-config.pc.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc\"\n    @ONLY\n)\n\n##\n## TESTS\n## create and configure the unit test target\n##\nif (JSON_BuildTests)\n    include(CTest)\n    enable_testing()\n    add_subdirectory(tests)\nendif()\n\n##\n## INSTALL\n## install header files, generate and install cmake config files for find_package()\n##\ninclude(CMakePackageConfigHelpers)\n# use a custom package version config file instead of\n# write_basic_package_version_file to ensure that it's architecture-independent\n# https://github.com/nlohmann/json/issues/1697\nconfigure_file(\n    \"cmake/nlohmann_jsonConfigVersion.cmake.in\"\n    ${NLOHMANN_JSON_CMAKE_VERSION_CONFIG_FILE}\n    @ONLY\n)\nconfigure_file(\n    ${NLOHMANN_JSON_CMAKE_CONFIG_TEMPLATE}\n    ${NLOHMANN_JSON_CMAKE_PROJECT_CONFIG_FILE}\n    @ONLY\n)\n\nif(JSON_Install)\n    install(\n        DIRECTORY ${NLOHMANN_JSON_INCLUDE_BUILD_DIR}\n        DESTINATION ${NLOHMANN_JSON_INCLUDE_INSTALL_DIR}\n    )\n    install(\n        FILES ${NLOHMANN_JSON_CMAKE_PROJECT_CONFIG_FILE} ${NLOHMANN_JSON_CMAKE_VERSION_CONFIG_FILE}\n        DESTINATION ${NLOHMANN_JSON_CONFIG_INSTALL_DIR}\n    )\n    if (NLOHMANN_ADD_NATVIS)\n        install(\n            FILES ${NLOHMANN_NATVIS_FILE}\n            DESTINATION .\n    )\n    endif()\n    export(\n        TARGETS ${NLOHMANN_JSON_TARGET_NAME}\n        NAMESPACE ${PROJECT_NAME}::\n        FILE ${NLOHMANN_JSON_CMAKE_PROJECT_TARGETS_FILE}\n    )\n    install(\n        TARGETS ${NLOHMANN_JSON_TARGET_NAME}\n        EXPORT ${NLOHMANN_JSON_TARGETS_EXPORT_NAME}\n        INCLUDES DESTINATION ${NLOHMANN_JSON_INCLUDE_INSTALL_DIR}\n    )\n    install(\n        EXPORT ${NLOHMANN_JSON_TARGETS_EXPORT_NAME}\n        NAMESPACE ${PROJECT_NAME}::\n        DESTINATION ${NLOHMANN_JSON_CONFIG_INSTALL_DIR}\n    )\n    install(\n        FILES \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc\"\n        DESTINATION ${NLOHMANN_JSON_PKGCONFIG_INSTALL_DIR}\n    )\n    include(CPack)\nendif()\n"
        },
        {
          "name": "ChangeLog.md",
          "type": "blob",
          "size": 297.74,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file. This project adheres to [Semantic Versioning](http://semver.org/).\n\n## [3.11.2](https://github.com/nlohmann/json/releases/tag/3.11.2) (2022-08-12)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.11.1...3.11.2)\n\n- MSVC natvis visualizer does not work after introduction of inline ABI namespace [\\#3696](https://github.com/nlohmann/json/issues/3696)\n- The use of parenthesis gives compilation errors in some situations [\\#3682](https://github.com/nlohmann/json/issues/3682)\n- extern from/to\\_json result in linker error [\\#3657](https://github.com/nlohmann/json/issues/3657)\n- json\\_fwd.hpp no longer standalone [\\#3656](https://github.com/nlohmann/json/issues/3656)\n- regression: `.value<size_t>` is compilation error. [\\#3655](https://github.com/nlohmann/json/issues/3655)\n- Regression: no match for 'operator!=' comparing json\\_pointer and const char \\*/string\\_t [\\#3654](https://github.com/nlohmann/json/issues/3654)\n- Regression: call to member function 'value' is ambiguous [\\#3652](https://github.com/nlohmann/json/issues/3652)\n- macOS 10.15 Actions runner image deprecation [\\#3612](https://github.com/nlohmann/json/issues/3612)\n\n- generate\\_natvis.py: validate version number; cleanup [\\#3698](https://github.com/nlohmann/json/pull/3698) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Add Python script for generating Natvis file and update file for 3.11.2 [\\#3697](https://github.com/nlohmann/json/pull/3697) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- fix typo in json\\_pointer.md [\\#3692](https://github.com/nlohmann/json/pull/3692) ([eltociear](https://github.com/eltociear))\n- Add amalgamated json-fwd.hpp to release [\\#3687](https://github.com/nlohmann/json/pull/3687) ([nlohmann](https://github.com/nlohmann))\n- Documentation updates for 3.11.2 [\\#3686](https://github.com/nlohmann/json/pull/3686) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Make json\\_pointer usable as map key \\(again\\) [\\#3685](https://github.com/nlohmann/json/pull/3685) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Deprecate json\\_pointer/string\\_t comparisons [\\#3684](https://github.com/nlohmann/json/pull/3684) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Restructure inline namespace and allow version component to be disabled [\\#3683](https://github.com/nlohmann/json/pull/3683) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Properly constrain non-string json\\_pointer overloads [\\#3681](https://github.com/nlohmann/json/pull/3681) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Amalgamate the forward declaration header [\\#3679](https://github.com/nlohmann/json/pull/3679) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Fix 'const' qualifier on bool& has no effect [\\#3678](https://github.com/nlohmann/json/pull/3678) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Fix whitespace in workflow files [\\#3675](https://github.com/nlohmann/json/pull/3675) ([nlohmann](https://github.com/nlohmann))\n- Attempt to fix labeler permissions [\\#3674](https://github.com/nlohmann/json/pull/3674) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Refine 'Publish documentation' workflow [\\#3673](https://github.com/nlohmann/json/pull/3673) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Documentation change [\\#3672](https://github.com/nlohmann/json/pull/3672) ([nlohmann](https://github.com/nlohmann))\n- Add labeler action [\\#3671](https://github.com/nlohmann/json/pull/3671) ([nlohmann](https://github.com/nlohmann))\n- Complete contributor list [\\#3670](https://github.com/nlohmann/json/pull/3670) ([nlohmann](https://github.com/nlohmann))\n- Add json\\_pointer/string\\_t equality comparison operators [\\#3664](https://github.com/nlohmann/json/pull/3664) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Reimplement value\\(\\) access functions [\\#3663](https://github.com/nlohmann/json/pull/3663) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Complete contributor list [\\#3662](https://github.com/nlohmann/json/pull/3662) ([nlohmann](https://github.com/nlohmann))\n- Adjust naming of GitHub action jobs [\\#3661](https://github.com/nlohmann/json/pull/3661) ([nlohmann](https://github.com/nlohmann))\n- Publish documentation on push to develop branch [\\#3660](https://github.com/nlohmann/json/pull/3660) ([nlohmann](https://github.com/nlohmann))\n- Add Discord badge to README [\\#3651](https://github.com/nlohmann/json/pull/3651) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Miscellaneous small fixes [\\#3643](https://github.com/nlohmann/json/pull/3643) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Minor BJData fixes [\\#3637](https://github.com/nlohmann/json/pull/3637) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Update CI [\\#3626](https://github.com/nlohmann/json/pull/3626) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n\n## [v3.11.1](https://github.com/nlohmann/json/releases/tag/v3.11.1) (2022-08-01)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.11.0...v3.11.1)\n\n- Regression: no matching literal operator for call to 'operator\"\"\\_json' [\\#3645](https://github.com/nlohmann/json/issues/3645)\n- \\_json  operator\"\"\\(\\)  [\\#3644](https://github.com/nlohmann/json/issues/3644)\n\n- Fix global UDLs [\\#3646](https://github.com/nlohmann/json/pull/3646) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n\n## [v3.11.0](https://github.com/nlohmann/json/releases/tag/v3.11.0) (2022-08-01)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.10.5...v3.11.0)\n\n- ICPC: warning \\#1098: the qualifier on this friend declaration is ignored [\\#3632](https://github.com/nlohmann/json/issues/3632)\n- Starting with 3.10.4, just adding `\\#include json.hpp` causes compile error: `overload resolution selected deleted operator '=' [\\#3620](https://github.com/nlohmann/json/issues/3620)\n- xwidgets doesn't compile with version \\>3.10.3 [\\#3602](https://github.com/nlohmann/json/issues/3602)\n- json\\_pointer\\_\\_pop\\_back.cpp example does not compile [\\#3600](https://github.com/nlohmann/json/issues/3600)\n- nlohmann::json::array 'push\\_back' is ambiguous [\\#3589](https://github.com/nlohmann/json/issues/3589)\n- Multiple versions causing conflict [\\#3588](https://github.com/nlohmann/json/issues/3588)\n- ERROR: ThreadSanitizer: SEGV on unknown address [\\#3584](https://github.com/nlohmann/json/issues/3584)\n- unicode4 test consistently fails on RISC-V hardware [\\#3579](https://github.com/nlohmann/json/issues/3579)\n- sax\\_parse\\(iterator, json\\_sax\\_t \\*\\) string callback clobbers spaces [\\#3574](https://github.com/nlohmann/json/issues/3574)\n- Nlohmann JSON Parse crash with raylib-cpp [\\#3570](https://github.com/nlohmann/json/issues/3570)\n- ordered\\_json doesn't accept keys of types other than string\\_t \\(e.g., string\\_view\\) [\\#3558](https://github.com/nlohmann/json/issues/3558)\n- turning an object into an array [\\#3547](https://github.com/nlohmann/json/issues/3547)\n- json:parse\\_bjdata\\_fuzzer: ASSERT: ref\\_stack.back\\(\\)-\\>is\\_array\\(\\) [\\#3541](https://github.com/nlohmann/json/issues/3541)\n- Warning about potential null dereference in GCC 12.1 \\(Fedora 36\\) [\\#3525](https://github.com/nlohmann/json/issues/3525)\n- Enable 32bit unit test in CI [\\#3524](https://github.com/nlohmann/json/issues/3524)\n- Error when roundtripping BJData [\\#3519](https://github.com/nlohmann/json/issues/3519)\n- ASSERT error while parsing BJData [\\#3513](https://github.com/nlohmann/json/issues/3513)\n- An exception occurred when sending a string with double quotes [\\#3504](https://github.com/nlohmann/json/issues/3504)\n- Binary reader for BJData creates incorrect SAX events [\\#3503](https://github.com/nlohmann/json/issues/3503)\n- It can't support  \"nan\", \"inf\", \"-inf\" for float type [\\#3494](https://github.com/nlohmann/json/issues/3494)\n- ASAN error while parsing BJData \\(Heap-buffer-overflow READ 1\\) [\\#3492](https://github.com/nlohmann/json/issues/3492)\n- UBSAN error while parsing BJData \\(Null-dereference\\) [\\#3491](https://github.com/nlohmann/json/issues/3491)\n- UBSAN error while parsing BJData \\(Invalid-bool-value\\) [\\#3490](https://github.com/nlohmann/json/issues/3490)\n- json:parse\\_bjdata\\_fuzzer reaches assertion [\\#3475](https://github.com/nlohmann/json/issues/3475)\n- Compilation with -fmodules-ts and use inside of a module [\\#3472](https://github.com/nlohmann/json/issues/3472)\n- json.exception.parse\\_error.101 only occurs outside of IDE  [\\#3467](https://github.com/nlohmann/json/issues/3467)\n- json:parse\\_bjdata\\_fuzzer reaches assertion [\\#3461](https://github.com/nlohmann/json/issues/3461)\n- NLOHMANN\\_DEFINE\\_TYPE\\_NON\\_INTRUSIVE\\_WITH\\_DEFAULT can not parse { \"key\" : null} [\\#3458](https://github.com/nlohmann/json/issues/3458)\n- Unable to compile when using Microsoft's \\_CRTDBG [\\#3457](https://github.com/nlohmann/json/issues/3457)\n- Compilation errors when including `<filesystem>` and using `--std=c++17` or above \\(MinGW/Win10\\) [\\#3449](https://github.com/nlohmann/json/issues/3449)\n- Weird things on for statement [\\#3447](https://github.com/nlohmann/json/issues/3447)\n- Parsing error when there is a json string within a Json [\\#3445](https://github.com/nlohmann/json/issues/3445)\n- ordered\\_json vs json types comparison [\\#3443](https://github.com/nlohmann/json/issues/3443)\n- Error occurred when converting nlohmann::json to std::any [\\#3428](https://github.com/nlohmann/json/issues/3428)\n- I was forced to report an assertion error when copying an array of strings [\\#3419](https://github.com/nlohmann/json/issues/3419)\n- About Serialization Error invalid UTF-8 byte at index [\\#3414](https://github.com/nlohmann/json/issues/3414)\n- Comparison of NaN differs between json and float [\\#3409](https://github.com/nlohmann/json/issues/3409)\n- when i use it in C++ sserver,it it constantly show that fatal error: adl\\_serializer.hpp: No such file or directory [\\#3404](https://github.com/nlohmann/json/issues/3404)\n- parse error [\\#3403](https://github.com/nlohmann/json/issues/3403)\n- CMake script MAIN\\_PROJECT always OFF [\\#3390](https://github.com/nlohmann/json/issues/3390)\n- Parser unable to handle large floating point numbers [\\#3389](https://github.com/nlohmann/json/issues/3389)\n- Compilation error if json\\_pointer is used with alternative string type [\\#3388](https://github.com/nlohmann/json/issues/3388)\n- Unit tests conversions & items fail to build \\(Clang \\<4.0/C++14 only\\) [\\#3384](https://github.com/nlohmann/json/issues/3384)\n- Regression test for \\#3070 is not being run and fails when enabled [\\#3377](https://github.com/nlohmann/json/issues/3377)\n- Refactor unit tests to use more convenient doctest assertion macros [\\#3365](https://github.com/nlohmann/json/issues/3365)\n- An json.h issue reported in a static code analyzer [\\#3361](https://github.com/nlohmann/json/issues/3361)\n- Mixing different JSON\\_DIAGNOSTICS settings in separately compiled units leads to core [\\#3360](https://github.com/nlohmann/json/issues/3360)\n- json::out\\_of\\_range exception matches against lot of others while testing [\\#3352](https://github.com/nlohmann/json/issues/3352)\n- use mipsel-openwrt-linux-g++ -std=c++11 to compile, it has some errors \"error: 'snprintf' is not a member of 'std'\" [\\#3349](https://github.com/nlohmann/json/issues/3349)\n- Add proper issue templates [\\#3348](https://github.com/nlohmann/json/issues/3348)\n- switch from json to ordered\\_json [\\#3343](https://github.com/nlohmann/json/issues/3343)\n- Json dump use to compilation errors [\\#3339](https://github.com/nlohmann/json/issues/3339)\n- Ambiguous conversion from nlohmann::basic\\_json\\<\\> to custom class. [\\#3333](https://github.com/nlohmann/json/issues/3333)\n- Iterator doesn't satisfy std::incrementable because post-increment may change constness [\\#3331](https://github.com/nlohmann/json/issues/3331)\n- Inconsistent handling of floating point numbers after parse\\(\\) [\\#3329](https://github.com/nlohmann/json/issues/3329)\n- Documentation for `ordered_json` should show proper use of the `parse()` function. [\\#3325](https://github.com/nlohmann/json/issues/3325)\n- \"type must be boolean, but is object\" error thrown on non-boolean object [\\#3319](https://github.com/nlohmann/json/issues/3319)\n- Incomplete Type in request parms [\\#3318](https://github.com/nlohmann/json/issues/3318)\n- 小米 MIX4 MIUI13  bug [\\#3316](https://github.com/nlohmann/json/issues/3316)\n- json.exception.parse\\_error.101 when parsing data received over a socket [\\#3313](https://github.com/nlohmann/json/issues/3313)\n- Parse to custom class from unordered\\_json breaks on G++11.2.0 with C++20 [\\#3312](https://github.com/nlohmann/json/issues/3312)\n- try to assign dumped string to a class member varible [\\#3300](https://github.com/nlohmann/json/issues/3300)\n- includedir in pkgconfig is error if install\\_headers\\(\\) has subdir argument.  [\\#3284](https://github.com/nlohmann/json/issues/3284)\n- SHA-256 sum of json-3.10.5.tar.xz changes over time \\(but not the content itself\\) [\\#3281](https://github.com/nlohmann/json/issues/3281)\n- items\\(\\) method does not follow order of json message [\\#3278](https://github.com/nlohmann/json/issues/3278)\n- Perplexing template deduction failure serialising a 3rd party type using base class [\\#3267](https://github.com/nlohmann/json/issues/3267)\n- json.hpp 'isfinite' is not a member of 'std' also isinf; snprintf; stoull and to\\_string members of std [\\#3263](https://github.com/nlohmann/json/issues/3263)\n- JSON build fails for C++ cmake [\\#3256](https://github.com/nlohmann/json/issues/3256)\n- Unexpected implicit conversion [\\#3254](https://github.com/nlohmann/json/issues/3254)\n- Add a function that checks for valid json in a C++ string  [\\#3245](https://github.com/nlohmann/json/issues/3245)\n- Replace use of standard IO from error handling [\\#3239](https://github.com/nlohmann/json/issues/3239)\n- Use Catch for unit tests [\\#3232](https://github.com/nlohmann/json/issues/3232)\n- Exception thrown during initialization causes a memory leak [\\#3215](https://github.com/nlohmann/json/issues/3215)\n- Tests failing when compiling with c++20 [\\#3207](https://github.com/nlohmann/json/issues/3207)\n- ambiguous regression [\\#3204](https://github.com/nlohmann/json/issues/3204)\n- Deserialization: if class is\\_constructible from std::string wrong from\\_json overload is being selected, compilation failed [\\#3171](https://github.com/nlohmann/json/issues/3171)\n- 'clang++ ./json.hpp' with no usage: Compiler syntax problem in clang 3.7.0 \\(tizen :/ \\) [\\#3153](https://github.com/nlohmann/json/issues/3153)\n- build failure on upcoming gcc-12: test/src/unit-regression1.cpp:392:22: error: ambiguous overload for 'operator=' [\\#3138](https://github.com/nlohmann/json/issues/3138)\n- Applying JSON patch creates parent object [\\#3134](https://github.com/nlohmann/json/issues/3134)\n- Iterators cannot be used with range-v3 [\\#3130](https://github.com/nlohmann/json/issues/3130)\n- std::shared\\_ptr\\<T\\> == nlohmann::json compiles, which seem undesirable [\\#3026](https://github.com/nlohmann/json/issues/3026)\n- Error in test\\download\\_test\\_data.vcxproj custom build step when compiling with Visual Studio 2019 16.7.7 msbuild on Windows 10 [\\#2593](https://github.com/nlohmann/json/issues/2593)\n- Consider putting the user-defined literals in a namespace [\\#1682](https://github.com/nlohmann/json/issues/1682)\n- Using versioned namespaces [\\#1539](https://github.com/nlohmann/json/issues/1539)\n- How can I use std::string\\_view as the json\\_key to \"operator \\[\\]\" ? [\\#1529](https://github.com/nlohmann/json/issues/1529)\n- serialize std::variant\\<...\\> [\\#1261](https://github.com/nlohmann/json/issues/1261)\n\n- Prepare 3.11.0 release [\\#3635](https://github.com/nlohmann/json/pull/3635) ([nlohmann](https://github.com/nlohmann))\n- Fix warning [\\#3634](https://github.com/nlohmann/json/pull/3634) ([nlohmann](https://github.com/nlohmann))\n- Add license header to new files [\\#3633](https://github.com/nlohmann/json/pull/3633) ([nlohmann](https://github.com/nlohmann))\n- Add a unit test including windows.h [\\#3631](https://github.com/nlohmann/json/pull/3631) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Fixed latest build error in msvc platform [\\#3630](https://github.com/nlohmann/json/pull/3630) ([KsaNL](https://github.com/KsaNL))\n- Add regression tests for \\#3204 and \\#3333 [\\#3629](https://github.com/nlohmann/json/pull/3629) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Fix patch::add creating nonexistent parents [\\#3628](https://github.com/nlohmann/json/pull/3628) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Adjust JSON Pointer examples [\\#3622](https://github.com/nlohmann/json/pull/3622) ([nlohmann](https://github.com/nlohmann))\n- Disable exceptions on ICPC [\\#3621](https://github.com/nlohmann/json/pull/3621) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- build: install .pc and .cmake files to share/ [\\#3619](https://github.com/nlohmann/json/pull/3619) ([Tachi107](https://github.com/Tachi107))\n- Fix MinGW CI failures [\\#3618](https://github.com/nlohmann/json/pull/3618) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Fix Unicode test timeout \\(for real this time!\\) [\\#3614](https://github.com/nlohmann/json/pull/3614) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Use 'concurrency' in GitHub workflows [\\#3610](https://github.com/nlohmann/json/pull/3610) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Use swap\\(\\) by ADL [\\#3609](https://github.com/nlohmann/json/pull/3609) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Move UDLs out of the global namespace [\\#3605](https://github.com/nlohmann/json/pull/3605) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Re-add value\\_type detection to distinguish string types [\\#3604](https://github.com/nlohmann/json/pull/3604) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Add operator\\<\\<\\(json\\_pointer\\) [\\#3601](https://github.com/nlohmann/json/pull/3601) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Add documentation for comparing json and ordered\\_json [\\#3599](https://github.com/nlohmann/json/pull/3599) ([nlohmann](https://github.com/nlohmann))\n- Clean up after \\#3581 [\\#3596](https://github.com/nlohmann/json/pull/3596) ([nlohmann](https://github.com/nlohmann))\n- Add assertion if nullptr is passed to parse function [\\#3593](https://github.com/nlohmann/json/pull/3593) ([nlohmann](https://github.com/nlohmann))\n- Minor documentation fixes [\\#3592](https://github.com/nlohmann/json/pull/3592) ([nlohmann](https://github.com/nlohmann))\n- Add versioned, ABI-tagged inline namespace and namespace macros [\\#3590](https://github.com/nlohmann/json/pull/3590) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Add badge for https://repology.org/project/nlohmann-json/versions [\\#3586](https://github.com/nlohmann/json/pull/3586) ([nlohmann](https://github.com/nlohmann))\n- Add error message if test suite cannot be found [\\#3585](https://github.com/nlohmann/json/pull/3585) ([nlohmann](https://github.com/nlohmann))\n- add patch\\_inplace function [\\#3581](https://github.com/nlohmann/json/pull/3581) ([wolfv](https://github.com/wolfv))\n- Enable overriding test properties and set Unicode test timeouts [\\#3580](https://github.com/nlohmann/json/pull/3580) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Ignore output directory [\\#3572](https://github.com/nlohmann/json/pull/3572) ([NN---](https://github.com/NN---))\n- Optimize output vector adapter write [\\#3569](https://github.com/nlohmann/json/pull/3569) ([romainreignier](https://github.com/romainreignier))\n- Add overloads for more key types to ordered\\_map and fix ordered\\_map::erase\\(first, last\\) with first == last [\\#3564](https://github.com/nlohmann/json/pull/3564) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Make certain usage patterns more prominent in the README [\\#3557](https://github.com/nlohmann/json/pull/3557) ([jez](https://github.com/jez))\n- CI: fix \"JSON\\_MultipleHeaders\" option spelling [\\#3555](https://github.com/nlohmann/json/pull/3555) ([karzhenkov](https://github.com/karzhenkov))\n- More documentation updates for 3.11.0 [\\#3553](https://github.com/nlohmann/json/pull/3553) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Use DOCTEST\\_\\* compiler macros and suppress pragmas warning [\\#3550](https://github.com/nlohmann/json/pull/3550) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Add unit test to make sure iterator\\_input\\_adapter advances iterators correctly [\\#3548](https://github.com/nlohmann/json/pull/3548) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Use REUSE framework [\\#3546](https://github.com/nlohmann/json/pull/3546) ([nlohmann](https://github.com/nlohmann))\n- Use `std::iterator_traits` to extract `iterator_category` [\\#3544](https://github.com/nlohmann/json/pull/3544) ([Mike-Leo-Smith](https://github.com/Mike-Leo-Smith))\n- BJData dimension length can not be string\\_t::npos, fix \\#3541 [\\#3543](https://github.com/nlohmann/json/pull/3543) ([fangq](https://github.com/fangq))\n- Allow disabling default enum conversions [\\#3536](https://github.com/nlohmann/json/pull/3536) ([zxey](https://github.com/zxey))\n- Add to\\_json\\(\\) for std::vector\\<bool\\>::reference [\\#3534](https://github.com/nlohmann/json/pull/3534) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- CI: Enable 32bit unit test \\(3\\) [\\#3532](https://github.com/nlohmann/json/pull/3532) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Use new CI image [\\#3528](https://github.com/nlohmann/json/pull/3528) ([nlohmann](https://github.com/nlohmann))\n- Fix ndarray dimension signedness, fix ndarray length overflow \\(2\\); add 32bit unit test [\\#3523](https://github.com/nlohmann/json/pull/3523) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Small documentation fixes [\\#3520](https://github.com/nlohmann/json/pull/3520) ([nlohmann](https://github.com/nlohmann))\n- Add assertion to converting constructor [\\#3517](https://github.com/nlohmann/json/pull/3517) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- CI: Remove -Wstrict-overflow [\\#3516](https://github.com/nlohmann/json/pull/3516) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Fix nlohmann/json\\#3513, explain is\\_ndarray flag [\\#3514](https://github.com/nlohmann/json/pull/3514) ([fangq](https://github.com/fangq))\n- Prevent ndarray size vector from recursive use, fix nlohmann/json\\#3503 [\\#3505](https://github.com/nlohmann/json/pull/3505) ([fangq](https://github.com/fangq))\n- prevent ndarray dimension vector from recusive array, nlohmann/json\\#3500 [\\#3502](https://github.com/nlohmann/json/pull/3502) ([fangq](https://github.com/fangq))\n- Discard optimized containers with negative counts in UBJSON/BJData \\(\\#3491,\\#3492,\\#3490\\) [\\#3500](https://github.com/nlohmann/json/pull/3500) ([fangq](https://github.com/fangq))\n- Update json.hpp [\\#3499](https://github.com/nlohmann/json/pull/3499) ([ivanovmp](https://github.com/ivanovmp))\n- Add assertion for invariant in SAX-DOM parser [\\#3498](https://github.com/nlohmann/json/pull/3498) ([nlohmann](https://github.com/nlohmann))\n- Add more macOS builders [\\#3485](https://github.com/nlohmann/json/pull/3485) ([nlohmann](https://github.com/nlohmann))\n- change bjdata ndarray flag to detect negative size, as part of \\#3475 [\\#3479](https://github.com/nlohmann/json/pull/3479) ([fangq](https://github.com/fangq))\n- Document fuzzer usage [\\#3478](https://github.com/nlohmann/json/pull/3478) ([nlohmann](https://github.com/nlohmann))\n- Add build step for ICPC \\(with fixes\\) [\\#3465](https://github.com/nlohmann/json/pull/3465) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Complete documentation for 3.11.0 [\\#3464](https://github.com/nlohmann/json/pull/3464) ([nlohmann](https://github.com/nlohmann))\n- Handle invalid BJData optimized type, fix \\#3461 [\\#3463](https://github.com/nlohmann/json/pull/3463) ([fangq](https://github.com/fangq))\n- Reorganize directories [\\#3462](https://github.com/nlohmann/json/pull/3462) ([nlohmann](https://github.com/nlohmann))\n- Enable rapid testing and development on Compiler Explorer [\\#3456](https://github.com/nlohmann/json/pull/3456) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- cpplint 1.6.0 [\\#3454](https://github.com/nlohmann/json/pull/3454) ([nlohmann](https://github.com/nlohmann))\n- Disable regression test for \\#3070 on GCC \\<8.4 [\\#3451](https://github.com/nlohmann/json/pull/3451) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Fix C++20/gcc-12 issues \\(Part 2\\) [\\#3446](https://github.com/nlohmann/json/pull/3446) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Overwork documentation [\\#3444](https://github.com/nlohmann/json/pull/3444) ([nlohmann](https://github.com/nlohmann))\n- Fix typo in basic\\_json documentation [\\#3439](https://github.com/nlohmann/json/pull/3439) ([jhnlee](https://github.com/jhnlee))\n- Exclude std::any from implicit conversion \\(fixes \\#3428\\) [\\#3437](https://github.com/nlohmann/json/pull/3437) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Document which version introduced the macros [\\#3431](https://github.com/nlohmann/json/pull/3431) ([nlohmann](https://github.com/nlohmann))\n- Fix constraints on from\\_json\\(\\) for strings \\(fixes \\#3171, \\#3267, \\#3312, \\#3384\\) [\\#3427](https://github.com/nlohmann/json/pull/3427) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- at.md: fix typo [\\#3426](https://github.com/nlohmann/json/pull/3426) ([heinemml](https://github.com/heinemml))\n- Implement support for string\\_view \\(attempt no. 3\\) [\\#3423](https://github.com/nlohmann/json/pull/3423) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- CI: speedup AppVeyor builds by ~30% [\\#3422](https://github.com/nlohmann/json/pull/3422) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Restore disabled check for \\#3070 \\(except on MSVC\\) [\\#3421](https://github.com/nlohmann/json/pull/3421) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Update CI image [\\#3420](https://github.com/nlohmann/json/pull/3420) ([nlohmann](https://github.com/nlohmann))\n- Add check if different version is also included [\\#3418](https://github.com/nlohmann/json/pull/3418) ([nlohmann](https://github.com/nlohmann))\n- Report the right \\_\\_cplusplus value for MSVC in basic\\_json meta\\(\\) [\\#3417](https://github.com/nlohmann/json/pull/3417) ([flagarde](https://github.com/flagarde))\n- CI: windows-2016 has been deprecated; remove jobs [\\#3416](https://github.com/nlohmann/json/pull/3416) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Re-template json\\_pointer on string type [\\#3415](https://github.com/nlohmann/json/pull/3415) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Refactor unit tests to use more convenient doctest assertion macros \\(Part 2\\) [\\#3405](https://github.com/nlohmann/json/pull/3405) ([kkarbowiak](https://github.com/kkarbowiak))\n- Refactor unit tests to use more convenient doctest assertion macros [\\#3393](https://github.com/nlohmann/json/pull/3393) ([kkarbowiak](https://github.com/kkarbowiak))\n- Improve unit testing \\(Part 1\\) [\\#3380](https://github.com/nlohmann/json/pull/3380) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Fix C++20/gcc-12 issues \\(Part 1\\) [\\#3379](https://github.com/nlohmann/json/pull/3379) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Add clarification to avoid misunderstanding that cause \\#3360 [\\#3378](https://github.com/nlohmann/json/pull/3378) ([puffetto](https://github.com/puffetto))\n- Fix ordered\\_map ctor with initializer\\_list \\(fixes \\#3343\\) [\\#3370](https://github.com/nlohmann/json/pull/3370) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Fix and update CI [\\#3368](https://github.com/nlohmann/json/pull/3368) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- FetchContent\\_MakeAvailable [\\#3351](https://github.com/nlohmann/json/pull/3351) ([nlohmann](https://github.com/nlohmann))\n- Avoid clash with Arduino defines [\\#3338](https://github.com/nlohmann/json/pull/3338) ([DarkZeros](https://github.com/DarkZeros))\n- Support UBJSON-derived Binary JData \\(BJData\\) format [\\#3336](https://github.com/nlohmann/json/pull/3336) ([fangq](https://github.com/fangq))\n- Make iterator operator++/--\\(int\\) equality-preserving [\\#3332](https://github.com/nlohmann/json/pull/3332) ([falbrechtskirchinger](https://github.com/falbrechtskirchinger))\n- Add note on parsing ordered\\_json [\\#3326](https://github.com/nlohmann/json/pull/3326) ([nlohmann](https://github.com/nlohmann))\n- Fix CITATION.cff and add automatic validation of your citation metadata [\\#3320](https://github.com/nlohmann/json/pull/3320) ([fdiblen](https://github.com/fdiblen))\n- .github/workflows/windows.yml: Add support for Visual Studio 2022 [\\#3295](https://github.com/nlohmann/json/pull/3295) ([t-b](https://github.com/t-b))\n- Add maintainer targets to create source archive [\\#3289](https://github.com/nlohmann/json/pull/3289) ([nlohmann](https://github.com/nlohmann))\n- Fix a typo [\\#3265](https://github.com/nlohmann/json/pull/3265) ([fhuberts](https://github.com/fhuberts))\n- Fix typo [\\#3249](https://github.com/nlohmann/json/pull/3249) ([rex4539](https://github.com/rex4539))\n- Add documentation for JSON Lines [\\#3247](https://github.com/nlohmann/json/pull/3247) ([nlohmann](https://github.com/nlohmann))\n- Improve documentation InputType and IteratorType [\\#3246](https://github.com/nlohmann/json/pull/3246) ([nlohmann](https://github.com/nlohmann))\n- Remove stringstream [\\#3244](https://github.com/nlohmann/json/pull/3244) ([nlohmann](https://github.com/nlohmann))\n- fix \\_MSC\\_VER version to check for std::filesystem [\\#3240](https://github.com/nlohmann/json/pull/3240) ([gcerretani](https://github.com/gcerretani))\n- Add macros NLOHMANN\\_DEFINE\\_TYPE\\_INTRUSIVE\\_WITH\\_DEFAULT and ...\\_NON\\_INTRUSIVE\\_WITH\\_DEFAULT [\\#3143](https://github.com/nlohmann/json/pull/3143) ([pketelsen](https://github.com/pketelsen))\n\n## [v3.10.5](https://github.com/nlohmann/json/releases/tag/v3.10.5) (2022-01-03)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.10.4...v3.10.5)\n\n- \\#include \\<filesystem\\> doesn't work with gcc-7 when `-std=c++17` is specified. [\\#3203](https://github.com/nlohmann/json/issues/3203)\n- Not able to use nlohmann json with c++ code built using emscripten to wasm [\\#3200](https://github.com/nlohmann/json/issues/3200)\n- Warning for shadowed variables [\\#3188](https://github.com/nlohmann/json/issues/3188)\n- Accessing missing keys on const json object leads to assert [\\#3183](https://github.com/nlohmann/json/issues/3183)\n- Data member is available, but null is reported, and program throws error [\\#3173](https://github.com/nlohmann/json/issues/3173)\n- serialization problem, from\\_json need construct new object [\\#3169](https://github.com/nlohmann/json/issues/3169)\n- std::filesystem unavailable on macOS lower deployment targets [\\#3156](https://github.com/nlohmann/json/issues/3156)\n- \\[json.exception.type\\_error.305\\] cannot use operator\\[\\] with a string argument with string [\\#3151](https://github.com/nlohmann/json/issues/3151)\n- json::dump\\(\\) is not compatible with C++ standards [\\#3147](https://github.com/nlohmann/json/issues/3147)\n- Issue with json::parse decoding codepoints [\\#3142](https://github.com/nlohmann/json/issues/3142)\n- Simple parse of json object thinks it should be an array [\\#3136](https://github.com/nlohmann/json/issues/3136)\n- How to properly read a Json string that may be null in some cases? [\\#3135](https://github.com/nlohmann/json/issues/3135)\n- Deadlock on create json - windows only [\\#3129](https://github.com/nlohmann/json/issues/3129)\n- Wrong parsing of int64 values nearest of limit [\\#3126](https://github.com/nlohmann/json/issues/3126)\n- ordered\\_json doesn't support range based erase [\\#3108](https://github.com/nlohmann/json/issues/3108)\n- Apple build failed with json/single\\_include/nlohmann/json.hpp:4384:57: 'path' is unavailable [\\#3097](https://github.com/nlohmann/json/issues/3097)\n- GCC 7.5.0 with --std=c++17: filesystem: No such file or directory [\\#3090](https://github.com/nlohmann/json/issues/3090)\n- Drop Travis CI [\\#3087](https://github.com/nlohmann/json/issues/3087)\n- ordered\\_json::reset\\(\\) compile error with nvcc [\\#3013](https://github.com/nlohmann/json/issues/3013)\n- Support for unordered\\_map as object\\_t [\\#2932](https://github.com/nlohmann/json/issues/2932)\n- Compiler warning with Intel compiler, same as \\#755 [\\#2712](https://github.com/nlohmann/json/issues/2712)\n- Compiler warnings with NVCC 11.2 [\\#2676](https://github.com/nlohmann/json/issues/2676)\n- some static analysis warning at line 11317 [\\#1390](https://github.com/nlohmann/json/issues/1390)\n- Compiling with icpc [\\#755](https://github.com/nlohmann/json/issues/755)\n\n- Fix compilation error with NVCC [\\#3234](https://github.com/nlohmann/json/pull/3234) ([nlohmann](https://github.com/nlohmann))\n- Remove Travis CI [\\#3233](https://github.com/nlohmann/json/pull/3233) ([nlohmann](https://github.com/nlohmann))\n- Add build step for NVCC and fix a warning [\\#3227](https://github.com/nlohmann/json/pull/3227) ([nlohmann](https://github.com/nlohmann))\n- Update cpplint [\\#3225](https://github.com/nlohmann/json/pull/3225) ([nlohmann](https://github.com/nlohmann))\n- Fix: Warning for shadowed variables \\(\\#3188\\) [\\#3193](https://github.com/nlohmann/json/pull/3193) ([kernie](https://github.com/kernie))\n- Fix FAQ hyperlink typo in readme [\\#3148](https://github.com/nlohmann/json/pull/3148) ([Prince-Mendiratta](https://github.com/Prince-Mendiratta))\n- Docs: Update `skip_comments` to `ignore_comments` [\\#3145](https://github.com/nlohmann/json/pull/3145) ([daniel-kun](https://github.com/daniel-kun))\n- fix typos in documentation [\\#3140](https://github.com/nlohmann/json/pull/3140) ([striezel](https://github.com/striezel))\n- Fix spelling [\\#3125](https://github.com/nlohmann/json/pull/3125) ([axic](https://github.com/axic))\n- Extend std specializations [\\#3121](https://github.com/nlohmann/json/pull/3121) ([nlohmann](https://github.com/nlohmann))\n- Add missing erase\\(first, last\\) function to ordered\\_map [\\#3109](https://github.com/nlohmann/json/pull/3109) ([nlohmann](https://github.com/nlohmann))\n- Fix typos in operator\\[\\] documentation [\\#3102](https://github.com/nlohmann/json/pull/3102) ([axnsan12](https://github.com/axnsan12))\n- Add C++17 copies of the test binaries [\\#3101](https://github.com/nlohmann/json/pull/3101) ([nlohmann](https://github.com/nlohmann))\n- Add examples for parsing from iterator pair [\\#3100](https://github.com/nlohmann/json/pull/3100) ([nlohmann](https://github.com/nlohmann))\n- Update CI [\\#3088](https://github.com/nlohmann/json/pull/3088) ([nlohmann](https://github.com/nlohmann))\n- Consolidate documentation [\\#3071](https://github.com/nlohmann/json/pull/3071) ([nlohmann](https://github.com/nlohmann))\n- Add recursive update function [\\#3069](https://github.com/nlohmann/json/pull/3069) ([nlohmann](https://github.com/nlohmann))\n\n## [v3.10.4](https://github.com/nlohmann/json/releases/tag/v3.10.4) (2021-10-16)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.10.3...v3.10.4)\n\n- Compiler error in output serializer due to 'incompatible initializer' [\\#3081](https://github.com/nlohmann/json/issues/3081)\n- Strange behaviour when using std::sort on std::vector\\<json\\> [\\#3080](https://github.com/nlohmann/json/issues/3080)\n- Unhandled exception: nlohmann::detail::parse\\_error [\\#3078](https://github.com/nlohmann/json/issues/3078)\n- explicit constructor with default does not compile [\\#3077](https://github.com/nlohmann/json/issues/3077)\n- Parse an object but get an array using GCC [\\#3076](https://github.com/nlohmann/json/issues/3076)\n- Version 3.10.3 breaks backward-compatibility with 3.10.2 [\\#3070](https://github.com/nlohmann/json/issues/3070)\n- Feature request, Add to\\_json/from\\_json to align with other to/from binary api.  [\\#3067](https://github.com/nlohmann/json/issues/3067)\n- vcpkg is out of date [\\#3066](https://github.com/nlohmann/json/issues/3066)\n\n- Revert invalid fix [\\#3082](https://github.com/nlohmann/json/pull/3082) ([nlohmann](https://github.com/nlohmann))\n- Allow to use get with explicit constructor [\\#3079](https://github.com/nlohmann/json/pull/3079) ([nlohmann](https://github.com/nlohmann))\n- fix std::filesystem::path regression [\\#3073](https://github.com/nlohmann/json/pull/3073) ([theodelrieu](https://github.com/theodelrieu))\n\n## [v3.10.3](https://github.com/nlohmann/json/releases/tag/v3.10.3) (2021-10-08)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.10.2...v3.10.3)\n\n- Parsing an emtpy string returns a string with size 1 instead of expected 0 [\\#3057](https://github.com/nlohmann/json/issues/3057)\n- Linking error  \"duplicate symbol: std::type\\_info::operator==\" on static build with MinGW [\\#3042](https://github.com/nlohmann/json/issues/3042)\n- Yet another assertion failure when inserting into arrays with JSON\\_DIAGNOSTICS set [\\#3032](https://github.com/nlohmann/json/issues/3032)\n- accept and parse function not work well with a pure number string [\\#3029](https://github.com/nlohmann/json/issues/3029)\n- push\\_back doesn't work for serializing containers [\\#3027](https://github.com/nlohmann/json/issues/3027)\n- Strange behaviour when creating array with single element [\\#3025](https://github.com/nlohmann/json/issues/3025)\n- Input ordered\\_json doesn't work [\\#3023](https://github.com/nlohmann/json/issues/3023)\n- Issue iterating through 'items' [\\#3021](https://github.com/nlohmann/json/issues/3021)\n- Cannot spell the namespace right [\\#3015](https://github.com/nlohmann/json/issues/3015)\n- JSON Parse error when reading json object from file [\\#3011](https://github.com/nlohmann/json/issues/3011)\n- Parent pointer not properly set when using update\\(\\) [\\#3007](https://github.com/nlohmann/json/issues/3007)\n- Overwriting terminated null character [\\#3001](https://github.com/nlohmann/json/issues/3001)\n- 'operator =' is ambiguous on VS2017 [\\#2997](https://github.com/nlohmann/json/issues/2997)\n- JSON Patch for Array Elements [\\#2994](https://github.com/nlohmann/json/issues/2994)\n- JSON Parse throwing error [\\#2983](https://github.com/nlohmann/json/issues/2983)\n- to\\_{binary format} does not provide a mechanism for specifying a custom allocator for the returned type. [\\#2982](https://github.com/nlohmann/json/issues/2982)\n- 3.10.1 zip json.hpp has version number 3.10.0 instead of 3.10.1 [\\#2973](https://github.com/nlohmann/json/issues/2973)\n- Assertion failure when serializing array with JSON\\_DIAGNOSTICS set [\\#2926](https://github.com/nlohmann/json/issues/2926)\n\n- Fix Clang version [\\#3040](https://github.com/nlohmann/json/pull/3040) ([nlohmann](https://github.com/nlohmann))\n- Fix assertion failure for JSON\\_DIAGNOSTICS [\\#3037](https://github.com/nlohmann/json/pull/3037) ([carlsmedstad](https://github.com/carlsmedstad))\n- meta: fix is\\_compatible/constructible traits [\\#3020](https://github.com/nlohmann/json/pull/3020) ([theodelrieu](https://github.com/theodelrieu))\n- Set parent pointers for values inserted via update\\(\\) \\(fixes \\#3007\\). [\\#3008](https://github.com/nlohmann/json/pull/3008) ([AnthonyVH](https://github.com/AnthonyVH))\n- Allow allocators for output\\_vector\\_adapter [\\#2989](https://github.com/nlohmann/json/pull/2989) ([nlohmann](https://github.com/nlohmann))\n- Re-add Clang 12 [\\#2986](https://github.com/nlohmann/json/pull/2986) ([nlohmann](https://github.com/nlohmann))\n- Use new Docker image [\\#2981](https://github.com/nlohmann/json/pull/2981) ([nlohmann](https://github.com/nlohmann))\n- Update docset generation script [\\#2967](https://github.com/nlohmann/json/pull/2967) ([nlohmann](https://github.com/nlohmann))\n\n## [v3.10.2](https://github.com/nlohmann/json/releases/tag/v3.10.2) (2021-08-26)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.10.1...v3.10.2)\n\n- Annoying -Wundef on new JSON\\_DIAGNOSTICS macro [\\#2975](https://github.com/nlohmann/json/issues/2975)\n- += issue with multiple redirection. [\\#2970](https://github.com/nlohmann/json/issues/2970)\n- \"incomplete type ‘nlohmann::detail::wide\\_string\\_input\\_helper\" compilation error [\\#2969](https://github.com/nlohmann/json/issues/2969)\n\n- Fix -Wunused warnings on JSON\\_DIAGNOSTICS  [\\#2976](https://github.com/nlohmann/json/pull/2976) ([gcerretani](https://github.com/gcerretani))\n\n## [v3.10.1](https://github.com/nlohmann/json/releases/tag/v3.10.1) (2021-08-24)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.10.0...v3.10.1)\n\n- JSON\\_DIAGNOSTICS assertion for ordered\\_json [\\#2962](https://github.com/nlohmann/json/issues/2962)\n- Inserting in unordered json using a pointer retains the leading slash [\\#2958](https://github.com/nlohmann/json/issues/2958)\n- Test  \\#9: test-cbor test case sample.json fails in debug mode - Stack overflow [\\#2955](https://github.com/nlohmann/json/issues/2955)\n- 3.10.0 broke at least the Bear project [\\#2953](https://github.com/nlohmann/json/issues/2953)\n- 2 tests fail in 3.10.0: cmake\\_fetch\\_content\\_configure, cmake\\_fetch\\_content\\_build [\\#2951](https://github.com/nlohmann/json/issues/2951)\n- ctest \\(58+60,/67 cmake\\_import\\_configure\\) fails when build with -D JSON\\_Install:BOOL=OFF because of missing nlohmann\\_jsonTargets.cmake [\\#2946](https://github.com/nlohmann/json/issues/2946)\n- Document vcpkg usage [\\#2944](https://github.com/nlohmann/json/issues/2944)\n- Linker error LNK2005 when compiling \\(x64\\) json-3.10.0.zip with Visual Studio 2019 16.11.1  [\\#2941](https://github.com/nlohmann/json/issues/2941)\n- Move Travis jobs to travis-ci.com [\\#2938](https://github.com/nlohmann/json/issues/2938)\n\n- Fixed typo in docs/api/basic\\_json/parse.md [\\#2968](https://github.com/nlohmann/json/pull/2968) ([mbadhan](https://github.com/mbadhan))\n- Add link to Homebrew package [\\#2966](https://github.com/nlohmann/json/pull/2966) ([nlohmann](https://github.com/nlohmann))\n- Fix parent update for diagnostics with ordered\\_json [\\#2963](https://github.com/nlohmann/json/pull/2963) ([nlohmann](https://github.com/nlohmann))\n- Set stack size for some unit tests when using MSVC [\\#2961](https://github.com/nlohmann/json/pull/2961) ([nlohmann](https://github.com/nlohmann))\n- Add regression test [\\#2960](https://github.com/nlohmann/json/pull/2960) ([nlohmann](https://github.com/nlohmann))\n- Update Travis badge [\\#2959](https://github.com/nlohmann/json/pull/2959) ([nlohmann](https://github.com/nlohmann))\n- Fix some extra \";\" clang warnings [\\#2957](https://github.com/nlohmann/json/pull/2957) ([Hallot](https://github.com/Hallot))\n- Add documentation for integration via vcpkg [\\#2954](https://github.com/nlohmann/json/pull/2954) ([nlohmann](https://github.com/nlohmann))\n- Avoid duplicate AppVeyor builds [\\#2952](https://github.com/nlohmann/json/pull/2952) ([nlohmann](https://github.com/nlohmann))\n- 🚨 fix gdb\\_pretty\\_printer failure on basic types [\\#2950](https://github.com/nlohmann/json/pull/2950) ([senyai](https://github.com/senyai))\n- Add header to use value\\_t [\\#2948](https://github.com/nlohmann/json/pull/2948) ([nlohmann](https://github.com/nlohmann))\n- Skip some tests if JSON\\_Install is not set [\\#2947](https://github.com/nlohmann/json/pull/2947) ([nlohmann](https://github.com/nlohmann))\n- Remove outdated json\\_unit test binary [\\#2945](https://github.com/nlohmann/json/pull/2945) ([nlohmann](https://github.com/nlohmann))\n- Updating the Homebrew Command [\\#2943](https://github.com/nlohmann/json/pull/2943) ([amirmasoudabdol](https://github.com/amirmasoudabdol))\n\n## [v3.10.0](https://github.com/nlohmann/json/releases/tag/v3.10.0) (2021-08-17)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.9.1...v3.10.0)\n\n- Latest version 3.9.1 uses throw instead of JSON\\_THROW in the amalgamated json.hpp file [\\#2934](https://github.com/nlohmann/json/issues/2934)\n- Copy to a variable inside a Structure [\\#2933](https://github.com/nlohmann/json/issues/2933)\n- warning C4068: unknown pragma 'GCC' on MSVC/cl [\\#2924](https://github.com/nlohmann/json/issues/2924)\n- Errors during ninja test [\\#2918](https://github.com/nlohmann/json/issues/2918)\n- compiler warning: \"not return a value\" [\\#2917](https://github.com/nlohmann/json/issues/2917)\n- Comparison floating points causes warning [\\#2909](https://github.com/nlohmann/json/issues/2909)\n- Why can't I have std::vector\\<json&\\> testList? [\\#2900](https://github.com/nlohmann/json/issues/2900)\n- \\[json.hpp\\] from releases doesnt work [\\#2897](https://github.com/nlohmann/json/issues/2897)\n- g++ \\(11\\) -Wuseless-cast gives lots of warnings [\\#2893](https://github.com/nlohmann/json/issues/2893)\n- Cannot serialize and immediatly deserialize json to/from bson [\\#2892](https://github.com/nlohmann/json/issues/2892)\n- Floating-point precision conversion error [\\#2876](https://github.com/nlohmann/json/issues/2876)\n- How to avoid escaping for an already escaped string in .dump\\(\\) [\\#2870](https://github.com/nlohmann/json/issues/2870)\n- can't parse std::vector\\<std::byte\\> [\\#2869](https://github.com/nlohmann/json/issues/2869)\n- ASAN detects memory leaks [\\#2865](https://github.com/nlohmann/json/issues/2865)\n- Binary subtype field cannot represent all CBOR tags [\\#2863](https://github.com/nlohmann/json/issues/2863)\n- string literals possibly being parsed as another type due to the presence of only digits and full-stops [\\#2852](https://github.com/nlohmann/json/issues/2852)\n- json::parse\\(\\) works only with absolute paths [\\#2851](https://github.com/nlohmann/json/issues/2851)\n- Compiler Warnings on Raspberry Pi OS [\\#2850](https://github.com/nlohmann/json/issues/2850)\n- Braced initialization and aggregate initialization behavior is different for `json::array()` function call. [\\#2848](https://github.com/nlohmann/json/issues/2848)\n- 3.9.1: test suite is failing [\\#2845](https://github.com/nlohmann/json/issues/2845)\n- Documentation for macro JSON\\_NO\\_IO is missing [\\#2842](https://github.com/nlohmann/json/issues/2842)\n- Assertion failure when inserting into arrays with JSON\\_DIAGNOSTICS set [\\#2838](https://github.com/nlohmann/json/issues/2838)\n- HELP! There is a memory leak in the code?! [\\#2837](https://github.com/nlohmann/json/issues/2837)\n- Elegant conversion of a 2-D-json array to a standard C++ array [\\#2805](https://github.com/nlohmann/json/issues/2805)\n- Swift Package Manager support [\\#2802](https://github.com/nlohmann/json/issues/2802)\n- Referencing a subkey which doesn't exist gives crash [\\#2797](https://github.com/nlohmann/json/issues/2797)\n- Failed benchmark due to renamed branch [\\#2796](https://github.com/nlohmann/json/issues/2796)\n- Build Errors with VS 2019 and json Version 3.9.1 when attempting to replicate SAX Example [\\#2782](https://github.com/nlohmann/json/issues/2782)\n- Value with spaces cannot be parsed [\\#2781](https://github.com/nlohmann/json/issues/2781)\n- \\[Question\\] CBOR rfc support. [\\#2779](https://github.com/nlohmann/json/issues/2779)\n- Using JSON.hpp header file in Visual Studio 2013 \\(C++ Project\\) [\\#2775](https://github.com/nlohmann/json/issues/2775)\n- compilation error on clang-8 + C++17 [\\#2759](https://github.com/nlohmann/json/issues/2759)\n- Undefined symbol EOF  [\\#2755](https://github.com/nlohmann/json/issues/2755)\n- Parsing a string into json object behaves differently under g++ and MinGW compilers. [\\#2746](https://github.com/nlohmann/json/issues/2746)\n- big git history size [\\#2742](https://github.com/nlohmann/json/issues/2742)\n- How to get reference of std::vector\\<T\\> [\\#2735](https://github.com/nlohmann/json/issues/2735)\n- CMake failure in VS2019 Community [\\#2734](https://github.com/nlohmann/json/issues/2734)\n- Possibility to use with custom c++ version to use in intel sgx enclaves [\\#2730](https://github.com/nlohmann/json/issues/2730)\n- Possibility to use without the dependency to file io and streams to use in intel sgx enclaves [\\#2728](https://github.com/nlohmann/json/issues/2728)\n- error C2784& error C2839... in my visual studio 2015 compiler [\\#2726](https://github.com/nlohmann/json/issues/2726)\n- `-fno-expection` not respected anymore in 3.9.1 [\\#2725](https://github.com/nlohmann/json/issues/2725)\n- When exceptions disabled with JSON\\_NOEXCEPTION, lib just aborts without any message [\\#2724](https://github.com/nlohmann/json/issues/2724)\n- Critical error detected c0000374 on windows10 msvc 2019 16.8.5 [\\#2710](https://github.com/nlohmann/json/issues/2710)\n- unused parameter error/warning [\\#2706](https://github.com/nlohmann/json/issues/2706)\n- How to store data into a Map from json file [\\#2691](https://github.com/nlohmann/json/issues/2691)\n- Tests do not compile with pre-release glibc [\\#2686](https://github.com/nlohmann/json/issues/2686)\n- compile errors .... chromium-style [\\#2680](https://github.com/nlohmann/json/issues/2680)\n- .dump\\(\\) not allowing compact form [\\#2678](https://github.com/nlohmann/json/issues/2678)\n- error: no matching function for call to ‘nlohmann::basic\\_json\\<\\>::value\\(int, std::set\\<int\\>&\\)’ [\\#2671](https://github.com/nlohmann/json/issues/2671)\n- Compiler warning: unused parameter [\\#2668](https://github.com/nlohmann/json/issues/2668)\n- Deserializing to a struct as shown on the project homepage throws compile time errors [\\#2665](https://github.com/nlohmann/json/issues/2665)\n- Unable to compile on MSVC 2019 with SDL checking enabled: This function or variable may be unsafe [\\#2664](https://github.com/nlohmann/json/issues/2664)\n- terminating with uncaught exception of type nlohmann::detail::type\\_error: \\[json.exception.type\\_error.302\\] type must be array, but is object [\\#2661](https://github.com/nlohmann/json/issues/2661)\n- unused-parameter on OSX when Diagnostics is off [\\#2658](https://github.com/nlohmann/json/issues/2658)\n- std::pair wrong serialization [\\#2655](https://github.com/nlohmann/json/issues/2655)\n- The result of json is\\_number\\_integer\\(\\) function is wrong when read a json file  [\\#2653](https://github.com/nlohmann/json/issues/2653)\n- 2 backslash cause problem [\\#2652](https://github.com/nlohmann/json/issues/2652)\n- No support for using an external/system copy of Hedley [\\#2651](https://github.com/nlohmann/json/issues/2651)\n- error: incomplete type 'qfloat16' used in type trait expression [\\#2650](https://github.com/nlohmann/json/issues/2650)\n- Unused variable in exception class when not using improved diagnostics [\\#2646](https://github.com/nlohmann/json/issues/2646)\n- I am trying to do this - converting from wstring works incorrectly! [\\#2642](https://github.com/nlohmann/json/issues/2642)\n- Exception 207 On ARM Processor During Literal String Parsing [\\#2634](https://github.com/nlohmann/json/issues/2634)\n- double free or corruption \\(!prev\\) error on Json push\\_back and write [\\#2632](https://github.com/nlohmann/json/issues/2632)\n- nlohmann::detail::parse\\_error: syntax error while parsing CBOR string: expected length specification \\(0x60-0x7B\\) or indefinite string type \\(0x7F\\) [\\#2629](https://github.com/nlohmann/json/issues/2629)\n- please allow disabling implicit conversions in non-single-file use [\\#2621](https://github.com/nlohmann/json/issues/2621)\n- Preserve decimal formatting [\\#2618](https://github.com/nlohmann/json/issues/2618)\n- Visual Studio Visual Assist code issues reported by VA code inspection of file json.hpp [\\#2615](https://github.com/nlohmann/json/issues/2615)\n- Missing get function and no viable overloaded '=' on mac [\\#2610](https://github.com/nlohmann/json/issues/2610)\n- corruption when parse from string [\\#2603](https://github.com/nlohmann/json/issues/2603)\n- Parse from byte-vector results in compile error [\\#2602](https://github.com/nlohmann/json/issues/2602)\n- Memory leak when working on ARM Linux [\\#2601](https://github.com/nlohmann/json/issues/2601)\n- Unhandled exception in test-cbor.exe Stack overflow when debugging project with Visual Studio 2019 16.7.7 compiled with c++17 or c++latest [\\#2598](https://github.com/nlohmann/json/issues/2598)\n- Error in download\\_test\\_data.vcxproj when compiling with Visual Studio 2019 16.7.7 Professional msbuild on Windows 10 2004 Professional [\\#2594](https://github.com/nlohmann/json/issues/2594)\n- Warnings  C4715 and C4127 when building json-3.9.1 with Visual Studio 2019 16.7.7 [\\#2592](https://github.com/nlohmann/json/issues/2592)\n- I tried some change to dump\\(\\) for \\[1,2,3...\\] [\\#2584](https://github.com/nlohmann/json/issues/2584)\n- try/catch block does not catch parsing error [\\#2579](https://github.com/nlohmann/json/issues/2579)\n- Serializing uint64\\_t is broken for large values [\\#2578](https://github.com/nlohmann/json/issues/2578)\n- deserializing arrays should be part of the library [\\#2575](https://github.com/nlohmann/json/issues/2575)\n- Deserialization to std::array with non-default constructable types fails [\\#2574](https://github.com/nlohmann/json/issues/2574)\n- Compilation error when trying to use same type for number\\_integer\\_t and number\\_unsigned\\_t in basic\\_json template specification. [\\#2573](https://github.com/nlohmann/json/issues/2573)\n- compiler error: directive output may be truncated writing between 2 and 8 bytes [\\#2572](https://github.com/nlohmann/json/issues/2572)\n- Incorrect convert map to json when key cannot construct an string i.e. int  [\\#2564](https://github.com/nlohmann/json/issues/2564)\n- no matching function for call to ‘nlohmann::basic\\_json\\<\\>::basic\\_json\\(\\<brace-enclosed initializer list\\>\\)’ [\\#2559](https://github.com/nlohmann/json/issues/2559)\n- type\\_error factory creates a dangling pointer \\(in VisualStudio 2019\\) [\\#2535](https://github.com/nlohmann/json/issues/2535)\n- Cannot assign from ordered\\_json vector\\<CustomStruct\\> to value in not ordered json [\\#2528](https://github.com/nlohmann/json/issues/2528)\n- Qt6: Break changes [\\#2519](https://github.com/nlohmann/json/issues/2519)\n- valgrind memcheck Illegal instruction when use nlohmann::json::parse [\\#2518](https://github.com/nlohmann/json/issues/2518)\n- Buffer overflow [\\#2515](https://github.com/nlohmann/json/issues/2515)\n- Including CTest in the top-level CMakeLists.txt sets BUILD\\_TESTING=ON for parent projects [\\#2513](https://github.com/nlohmann/json/issues/2513)\n- Compilation error when using NLOHMANN\\_JSON\\_SERIALIZE\\_ENUM ordered\\_json on libc++ [\\#2491](https://github.com/nlohmann/json/issues/2491)\n- Missing \"void insert\\( InputIt first, InputIt last \\);\" overload in nlohmann::ordered\\_map [\\#2490](https://github.com/nlohmann/json/issues/2490)\n- Could not find a package configuration file provided by \"nlohmann\\_json\" [\\#2482](https://github.com/nlohmann/json/issues/2482)\n- json becomes empty for unknown reason [\\#2470](https://github.com/nlohmann/json/issues/2470)\n- Using std::wstring as StringType fails compiling [\\#2459](https://github.com/nlohmann/json/issues/2459)\n- Sample code in GIF slide outdated \\(cannot use emplace\\(\\) with array\\) [\\#2457](https://github.com/nlohmann/json/issues/2457)\n- from\\_json\\<std::wstring\\> is treated as an array on latest MSVC [\\#2453](https://github.com/nlohmann/json/issues/2453)\n- MemorySanitizer: use-of-uninitialized-value [\\#2449](https://github.com/nlohmann/json/issues/2449)\n- I need help [\\#2441](https://github.com/nlohmann/json/issues/2441)\n- type conversion failing with clang ext\\_vector\\_type  [\\#2436](https://github.com/nlohmann/json/issues/2436)\n- json::parse\\(\\) can't be resolved under specific circumstances [\\#2427](https://github.com/nlohmann/json/issues/2427)\n- from\\_\\*\\(ptr, len\\) deprecation [\\#2426](https://github.com/nlohmann/json/issues/2426)\n- Error ONLY in release mode [\\#2425](https://github.com/nlohmann/json/issues/2425)\n- \"Custom data source\" exemple make no sense [\\#2423](https://github.com/nlohmann/json/issues/2423)\n- Refuses to compile in project [\\#2419](https://github.com/nlohmann/json/issues/2419)\n- Compilation failure of tests with C++20 standard \\(caused by change of u8 literals\\)  [\\#2413](https://github.com/nlohmann/json/issues/2413)\n- No matching function for call to 'input\\_adapter' under Xcode of with nlohmann version 3.9.1 [\\#2412](https://github.com/nlohmann/json/issues/2412)\n- Git tags are not valid semvers [\\#2409](https://github.com/nlohmann/json/issues/2409)\n- after dump, stderr output disappear [\\#2403](https://github.com/nlohmann/json/issues/2403)\n- Using custom string. [\\#2398](https://github.com/nlohmann/json/issues/2398)\n- value\\(\\) throws unhandled exception for partially specified json object [\\#2393](https://github.com/nlohmann/json/issues/2393)\n- assertion on runtime causes program to stop when accessing const json with missing key [\\#2392](https://github.com/nlohmann/json/issues/2392)\n- Usage with -fno-elide-constructors causes dump\\(\\) output to be array of `null`s [\\#2387](https://github.com/nlohmann/json/issues/2387)\n- Build fails with clang-cl due to override of CMAKE\\_CXX\\_COMPILER\\(?\\) [\\#2384](https://github.com/nlohmann/json/issues/2384)\n- std::optional not working with primitive types [\\#2383](https://github.com/nlohmann/json/issues/2383)\n- Unexpected array when initializing a json const& on gcc 4.8.5 using uniform syntax [\\#2370](https://github.com/nlohmann/json/issues/2370)\n- setprecision support [\\#2362](https://github.com/nlohmann/json/issues/2362)\n- json::parse\\(allow\\_exceptions = false\\) documentation is misleading. [\\#2360](https://github.com/nlohmann/json/issues/2360)\n- std::begin and std::end usage without specifying std namespace [\\#2359](https://github.com/nlohmann/json/issues/2359)\n- Custom object conversion to json hangs in background thread [\\#2358](https://github.com/nlohmann/json/issues/2358)\n- Add support of nullable fields to NLOHMANN\\_DEFINE\\_TYPE\\_NON\\_INTRUSIVE and NLOHMANN\\_DEFINE\\_TYPE\\_INTRUSIVE [\\#2356](https://github.com/nlohmann/json/issues/2356)\n- the portfile for the vcpkg is not working. [\\#2351](https://github.com/nlohmann/json/issues/2351)\n- Compiler warns of implicit fallthrough when defining preprocessor macro NDEBUG [\\#2348](https://github.com/nlohmann/json/issues/2348)\n- Compile error on Intel compiler running in Windows [\\#2346](https://github.com/nlohmann/json/issues/2346)\n- Build error caused by overwriting CMAKE\\_CXX\\_COMPILER [\\#2343](https://github.com/nlohmann/json/issues/2343)\n- Error: an attribute list cannot appear here     JSON\\_HEDLEY\\_DEPRECATED\\_FOR [\\#2342](https://github.com/nlohmann/json/issues/2342)\n- compiler warning [\\#2341](https://github.com/nlohmann/json/issues/2341)\n- 3.9.0: tests make build non-reproducible [\\#2324](https://github.com/nlohmann/json/issues/2324)\n- Initialization different between gcc/clang [\\#2311](https://github.com/nlohmann/json/issues/2311)\n- Attempt to `get()` a numeric value as a type which cannot represent it should throw [\\#2310](https://github.com/nlohmann/json/issues/2310)\n- Surprising behaviour with overloaded operators [\\#2256](https://github.com/nlohmann/json/issues/2256)\n- ADL issue in input\\_adapter [\\#2248](https://github.com/nlohmann/json/issues/2248)\n- Output adapters should be templated. [\\#2172](https://github.com/nlohmann/json/issues/2172)\n- error when using nlohmann::json, std::function and std::bind [\\#2147](https://github.com/nlohmann/json/issues/2147)\n- Remove undefined behavior for const operator\\[\\] [\\#2111](https://github.com/nlohmann/json/issues/2111)\n- json\\({}\\) gives null instead of empty object with GCC and -std=c++17 [\\#2046](https://github.com/nlohmann/json/issues/2046)\n- GDB pretty printing support [\\#1952](https://github.com/nlohmann/json/issues/1952)\n- Always compile tests with all warnings enabled and error out on warnings [\\#1798](https://github.com/nlohmann/json/issues/1798)\n- Fixes Cppcheck warnings [\\#1759](https://github.com/nlohmann/json/issues/1759)\n- How to get position info or parser context with custom from\\_json\\(\\) that may throw exceptions? [\\#1508](https://github.com/nlohmann/json/issues/1508)\n- Suggestion to improve value\\(\\) accessors with respect to move semantics [\\#1275](https://github.com/nlohmann/json/issues/1275)\n- Add Key name to Exception [\\#932](https://github.com/nlohmann/json/issues/932)\n\n- Overwork warning flags [\\#2936](https://github.com/nlohmann/json/pull/2936) ([nlohmann](https://github.com/nlohmann))\n- Treat MSVC warnings as errors [\\#2930](https://github.com/nlohmann/json/pull/2930) ([nlohmann](https://github.com/nlohmann))\n- All: fix warnings when compiling with -Wswitch-enum [\\#2927](https://github.com/nlohmann/json/pull/2927) ([fhuberts](https://github.com/fhuberts))\n- Guard GCC pragmas [\\#2925](https://github.com/nlohmann/json/pull/2925) ([nlohmann](https://github.com/nlohmann))\n- Supress -Wfloat-equal on intended float comparisions [\\#2911](https://github.com/nlohmann/json/pull/2911) ([Finkman](https://github.com/Finkman))\n- Fix binary subtypes [\\#2908](https://github.com/nlohmann/json/pull/2908) ([nlohmann](https://github.com/nlohmann))\n- Fix useless-cast warnings [\\#2902](https://github.com/nlohmann/json/pull/2902) ([nlohmann](https://github.com/nlohmann))\n- Add regression test [\\#2898](https://github.com/nlohmann/json/pull/2898) ([nlohmann](https://github.com/nlohmann))\n- Refactor Unicode tests [\\#2889](https://github.com/nlohmann/json/pull/2889) ([nlohmann](https://github.com/nlohmann))\n- CMake cleanup [\\#2885](https://github.com/nlohmann/json/pull/2885) ([nlohmann](https://github.com/nlohmann))\n- Avoid string in case of empty CBOR objects [\\#2879](https://github.com/nlohmann/json/pull/2879) ([nlohmann](https://github.com/nlohmann))\n- Suppress C4127 warning in unit-json\\_pointer.cpp [\\#2875](https://github.com/nlohmann/json/pull/2875) ([nlohmann](https://github.com/nlohmann))\n- Fix truncation warning [\\#2874](https://github.com/nlohmann/json/pull/2874) ([nlohmann](https://github.com/nlohmann))\n- Fix memory leak in to\\_json [\\#2872](https://github.com/nlohmann/json/pull/2872) ([nlohmann](https://github.com/nlohmann))\n- Fix assertion failure in diagnostics [\\#2866](https://github.com/nlohmann/json/pull/2866) ([nlohmann](https://github.com/nlohmann))\n- Update documentation [\\#2861](https://github.com/nlohmann/json/pull/2861) ([nlohmann](https://github.com/nlohmann))\n- Consistency with `using` in README.md [\\#2826](https://github.com/nlohmann/json/pull/2826) ([justanotheranonymoususer](https://github.com/justanotheranonymoususer))\n- Properly constrain the basic\\_json conversion operator [\\#2825](https://github.com/nlohmann/json/pull/2825) ([ldionne](https://github.com/ldionne))\n- Fix CI [\\#2817](https://github.com/nlohmann/json/pull/2817) ([nlohmann](https://github.com/nlohmann))\n- Specified git branch for google benchmark fetch in benchmark test [\\#2795](https://github.com/nlohmann/json/pull/2795) ([grafail](https://github.com/grafail))\n- Add C++ standards to macOS matrix [\\#2790](https://github.com/nlohmann/json/pull/2790) ([nlohmann](https://github.com/nlohmann))\n- Update URLs to HTTPS [\\#2789](https://github.com/nlohmann/json/pull/2789) ([TotalCaesar659](https://github.com/TotalCaesar659))\n- Link to Conan Center package added [\\#2771](https://github.com/nlohmann/json/pull/2771) ([offa](https://github.com/offa))\n- Keep consistent formatting [\\#2770](https://github.com/nlohmann/json/pull/2770) ([jasmcaus](https://github.com/jasmcaus))\n- Add a cmake option to use SYSTEM in target\\_include\\_directories [\\#2762](https://github.com/nlohmann/json/pull/2762) ([jpl-mac](https://github.com/jpl-mac))\n- replace EOF with std::char\\_traits\\<char\\>::eof\\(\\) [\\#2756](https://github.com/nlohmann/json/pull/2756) ([nlohmann](https://github.com/nlohmann))\n- Fix typo in README [\\#2754](https://github.com/nlohmann/json/pull/2754) ([mortenfyhn](https://github.com/mortenfyhn))\n- Update documentation [\\#2749](https://github.com/nlohmann/json/pull/2749) ([nlohmann](https://github.com/nlohmann))\n- Add documentation for numbers [\\#2747](https://github.com/nlohmann/json/pull/2747) ([nlohmann](https://github.com/nlohmann))\n- Use Clang 12 in CI [\\#2737](https://github.com/nlohmann/json/pull/2737) ([nlohmann](https://github.com/nlohmann))\n- Fixes \\#2730 [\\#2731](https://github.com/nlohmann/json/pull/2731) ([theShmoo](https://github.com/theShmoo))\n- Possibility to use without the dependency to file io and streams to use in intel sgx enclaves [\\#2729](https://github.com/nlohmann/json/pull/2729) ([theShmoo](https://github.com/theShmoo))\n- Update json.hpp [\\#2707](https://github.com/nlohmann/json/pull/2707) ([raduteo](https://github.com/raduteo))\n- pkg-config.pc.in: Don't concatenate paths [\\#2690](https://github.com/nlohmann/json/pull/2690) ([doronbehar](https://github.com/doronbehar))\n- add more CI steps [\\#2689](https://github.com/nlohmann/json/pull/2689) ([nlohmann](https://github.com/nlohmann))\n- Update doctest from 2.4.4 to 2.4.6 \\(fixes \\#2686\\) [\\#2687](https://github.com/nlohmann/json/pull/2687) ([musicinmybrain](https://github.com/musicinmybrain))\n- License fix [\\#2683](https://github.com/nlohmann/json/pull/2683) ([nlohmann](https://github.com/nlohmann))\n- Update parse\\_exceptions.md - correct `json::exception::parse_error` [\\#2679](https://github.com/nlohmann/json/pull/2679) ([frasermarlow](https://github.com/frasermarlow))\n- Remove HEDLEY annotation from exception::what\\(\\) [\\#2673](https://github.com/nlohmann/json/pull/2673) ([remyjette](https://github.com/remyjette))\n- Fix amount of entries in the json object [\\#2659](https://github.com/nlohmann/json/pull/2659) ([abbaswasim](https://github.com/abbaswasim))\n- Fix missing 1.78 in example in README.md [\\#2625](https://github.com/nlohmann/json/pull/2625) ([wawiesel](https://github.com/wawiesel))\n- Add GDB pretty printer [\\#2607](https://github.com/nlohmann/json/pull/2607) ([nlohmann](https://github.com/nlohmann))\n- readme: fix tilde character display [\\#2582](https://github.com/nlohmann/json/pull/2582) ([bl-ue](https://github.com/bl-ue))\n- Add support for deserialization of STL containers of non-default constructable types \\(fixes \\#2574\\). [\\#2576](https://github.com/nlohmann/json/pull/2576) ([AnthonyVH](https://github.com/AnthonyVH))\n- Better diagnostics [\\#2562](https://github.com/nlohmann/json/pull/2562) ([nlohmann](https://github.com/nlohmann))\n- CI targets [\\#2561](https://github.com/nlohmann/json/pull/2561) ([nlohmann](https://github.com/nlohmann))\n- Add switch to skip non-reproducible tests. [\\#2560](https://github.com/nlohmann/json/pull/2560) ([nlohmann](https://github.com/nlohmann))\n- Fix compilation of input\\_adapter\\(container\\) in edge cases [\\#2553](https://github.com/nlohmann/json/pull/2553) ([jasujm](https://github.com/jasujm))\n- Allow parsing from std::byte containers [\\#2550](https://github.com/nlohmann/json/pull/2550) ([nlohmann](https://github.com/nlohmann))\n- Travis doesn't run any tests in C++17 mode [\\#2540](https://github.com/nlohmann/json/pull/2540) ([karzhenkov](https://github.com/karzhenkov))\n- Doctest is updated to v2.4.3 [\\#2538](https://github.com/nlohmann/json/pull/2538) ([YarikTH](https://github.com/YarikTH))\n- Fix warnings [\\#2537](https://github.com/nlohmann/json/pull/2537) ([nlohmann](https://github.com/nlohmann))\n- Fix a shadowing warning [\\#2536](https://github.com/nlohmann/json/pull/2536) ([nlohmann](https://github.com/nlohmann))\n- Clarify license of is\\_complete\\_type implementation [\\#2534](https://github.com/nlohmann/json/pull/2534) ([nlohmann](https://github.com/nlohmann))\n- Do not unconditionally redefine C++14 constructs [\\#2533](https://github.com/nlohmann/json/pull/2533) ([nlohmann](https://github.com/nlohmann))\n- Doctest is updated to v2.4.1 [\\#2525](https://github.com/nlohmann/json/pull/2525) ([YarikTH](https://github.com/YarikTH))\n- Add MAIN\\_PROJECT check for test and install options [\\#2514](https://github.com/nlohmann/json/pull/2514) ([globberwops](https://github.com/globberwops))\n- Ranged insert test section is added in unit-ordered\\_json.cpp [\\#2512](https://github.com/nlohmann/json/pull/2512) ([YarikTH](https://github.com/YarikTH))\n- Add asserts to suppress C28020 [\\#2447](https://github.com/nlohmann/json/pull/2447) ([jbzdarkid](https://github.com/jbzdarkid))\n- Change argument name \"subtype\" in byte\\_container\\_with\\_subtype [\\#2444](https://github.com/nlohmann/json/pull/2444) ([linev](https://github.com/linev))\n- 📝  add CPM.Cmake example [\\#2406](https://github.com/nlohmann/json/pull/2406) ([leozz37](https://github.com/leozz37))\n- Fix move constructor of json\\_ref [\\#2405](https://github.com/nlohmann/json/pull/2405) ([karzhenkov](https://github.com/karzhenkov))\n- Properly select \"Release\" build for Travis [\\#2375](https://github.com/nlohmann/json/pull/2375) ([karzhenkov](https://github.com/karzhenkov))\n- Update Hedley [\\#2367](https://github.com/nlohmann/json/pull/2367) ([nlohmann](https://github.com/nlohmann))\n- Fix and extend documentation of discarded values [\\#2363](https://github.com/nlohmann/json/pull/2363) ([nlohmann](https://github.com/nlohmann))\n- Fix typos in documentation [\\#2354](https://github.com/nlohmann/json/pull/2354) ([rbuch](https://github.com/rbuch))\n- Remove \"\\#define private public\" from tests [\\#2352](https://github.com/nlohmann/json/pull/2352) ([nlohmann](https://github.com/nlohmann))\n- Remove -Wimplicit-fallthrough warning [\\#2349](https://github.com/nlohmann/json/pull/2349) ([nlohmann](https://github.com/nlohmann))\n- Fix code to work without exceptions [\\#2347](https://github.com/nlohmann/json/pull/2347) ([nlohmann](https://github.com/nlohmann))\n- fix cmake script overwriting compiler path [\\#2344](https://github.com/nlohmann/json/pull/2344) ([ongjunjie](https://github.com/ongjunjie))\n\n## [v3.9.1](https://github.com/nlohmann/json/releases/tag/v3.9.1) (2020-08-06)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.9.0...v3.9.1)\n\n- Can't parse not formatted JSON. [\\#2340](https://github.com/nlohmann/json/issues/2340)\n- parse returns desired array contained in array when JSON text begins with square bracket on gcc 7.5.0 [\\#2339](https://github.com/nlohmann/json/issues/2339)\n- Unexpected deserialization difference between Mac and Linux [\\#2338](https://github.com/nlohmann/json/issues/2338)\n- Reading ordered\\_json from file causes compile error [\\#2331](https://github.com/nlohmann/json/issues/2331)\n- ignore\\_comment=true fails on multiple consecutive lines starting with comments [\\#2330](https://github.com/nlohmann/json/issues/2330)\n- Update documentation about Homebrew installation and CMake integration - Homebrew [\\#2326](https://github.com/nlohmann/json/issues/2326)\n- Chinese character initialize error [\\#2325](https://github.com/nlohmann/json/issues/2325)\n- json.update and vector\\<pair\\>does not work with ordered\\_json [\\#2315](https://github.com/nlohmann/json/issues/2315)\n- Ambiguous call to overloaded function [\\#2210](https://github.com/nlohmann/json/issues/2210)\n\n- Fix fallthrough warning [\\#2333](https://github.com/nlohmann/json/pull/2333) ([nlohmann](https://github.com/nlohmann))\n- Fix lexer to properly cope with repeated comments [\\#2332](https://github.com/nlohmann/json/pull/2332) ([nlohmann](https://github.com/nlohmann))\n- Fix name of Homebrew formula in documentation [\\#2327](https://github.com/nlohmann/json/pull/2327) ([nlohmann](https://github.com/nlohmann))\n- fix typo [\\#2320](https://github.com/nlohmann/json/pull/2320) ([wx257osn2](https://github.com/wx257osn2))\n- Fix a bug due to missing overloads in ordered\\_map container [\\#2319](https://github.com/nlohmann/json/pull/2319) ([nlohmann](https://github.com/nlohmann))\n- cmake: install pkg-config file relative to current\\_binary\\_dir [\\#2318](https://github.com/nlohmann/json/pull/2318) ([eli-schwartz](https://github.com/eli-schwartz))\n- Fixed installation of pkg-config file on other than Ubuntu [\\#2314](https://github.com/nlohmann/json/pull/2314) ([xvitaly](https://github.com/xvitaly))\n\n## [v3.9.0](https://github.com/nlohmann/json/releases/tag/v3.9.0) (2020-07-27)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.8.0...v3.9.0)\n\n- Unknown Type Name clang error when using NLOHMANN\\_DEFINE\\_TYPE\\_NON\\_INTRUSIVE [\\#2313](https://github.com/nlohmann/json/issues/2313)\n- Clang 10.0 / GCC 10.1 warnings on disabled exceptions [\\#2304](https://github.com/nlohmann/json/issues/2304)\n- Application stalls indefinitely with message byte size 10 [\\#2293](https://github.com/nlohmann/json/issues/2293)\n- linker error [\\#2292](https://github.com/nlohmann/json/issues/2292)\n- Add support for high-precision numbers in UBJSON encoding [\\#2286](https://github.com/nlohmann/json/issues/2286)\n- NLOHMANN\\_DEFINE\\_TYPE\\_NON\\_INTRUSIVE fails if the length of the argument is 10 [\\#2280](https://github.com/nlohmann/json/issues/2280)\n- Custom types : MACRO expansion bug [\\#2267](https://github.com/nlohmann/json/issues/2267)\n- to/from\\_json Failing To Convert String [\\#2238](https://github.com/nlohmann/json/issues/2238)\n- clang 9.0 report warning: unused type alias 'size\\_type' \\[-Wunused-local-typedef\\] [\\#2221](https://github.com/nlohmann/json/issues/2221)\n- Enormous array created when working with map\\<int,T\\> [\\#2220](https://github.com/nlohmann/json/issues/2220)\n- Can I disable sorting of json values [\\#2219](https://github.com/nlohmann/json/issues/2219)\n- Getting Qt types to work [\\#2217](https://github.com/nlohmann/json/issues/2217)\n- Convert to Qt QVariant  [\\#2216](https://github.com/nlohmann/json/issues/2216)\n- How to custom serialize same data type of vector? [\\#2215](https://github.com/nlohmann/json/issues/2215)\n- json constructor does not support std::optional [\\#2214](https://github.com/nlohmann/json/issues/2214)\n- Failing to Parse Valid JSON [\\#2209](https://github.com/nlohmann/json/issues/2209)\n- \\(De-\\)Serialization of std::variant with namespaces [\\#2208](https://github.com/nlohmann/json/issues/2208)\n- Addint support for complex type [\\#2207](https://github.com/nlohmann/json/issues/2207)\n- array\\_index possible out of range [\\#2205](https://github.com/nlohmann/json/issues/2205)\n- Object deserialized as array [\\#2204](https://github.com/nlohmann/json/issues/2204)\n- Sending to a function a reference to a sub-branch [\\#2200](https://github.com/nlohmann/json/issues/2200)\n- How to Serialize derived class to JSON object?  [\\#2199](https://github.com/nlohmann/json/issues/2199)\n- JSON incorrectly serialized [\\#2198](https://github.com/nlohmann/json/issues/2198)\n- Exception Unhandled out\\_of\\_range error [\\#2197](https://github.com/nlohmann/json/issues/2197)\n- msgpack serialisation : float is treated as 64bit float, not 32bit float. [\\#2196](https://github.com/nlohmann/json/issues/2196)\n- Is it possible to use compile-time type guarantees for JSON structures? [\\#2195](https://github.com/nlohmann/json/issues/2195)\n- Question : performance against python dict [\\#2194](https://github.com/nlohmann/json/issues/2194)\n- vs2017 compile error [\\#2192](https://github.com/nlohmann/json/issues/2192)\n- Check if a key exists [\\#2191](https://github.com/nlohmann/json/issues/2191)\n- Failed to run tests due to missing test data on builders without Internet access [\\#2190](https://github.com/nlohmann/json/issues/2190)\n- 3.8.0: unit-cbor.cpp test failures [\\#2189](https://github.com/nlohmann/json/issues/2189)\n- 'nlohmann/json.hpp' file not found [\\#2188](https://github.com/nlohmann/json/issues/2188)\n- How to send json data over the wire? [\\#2185](https://github.com/nlohmann/json/issues/2185)\n- Ubuntu 16 not supporting nlohmann/json? [\\#2184](https://github.com/nlohmann/json/issues/2184)\n- .get\\<std::string\\> causing emdash errors [\\#2180](https://github.com/nlohmann/json/issues/2180)\n- Object properties should not be re-sorted alphabetically [\\#2179](https://github.com/nlohmann/json/issues/2179)\n- Custom type registration : instrusive API [\\#2175](https://github.com/nlohmann/json/issues/2175)\n- Many version of the function \"void to\\_json\\(json& j, const MyStruct& struct\\)\" [\\#2171](https://github.com/nlohmann/json/issues/2171)\n- How should strings be escaped? [\\#2155](https://github.com/nlohmann/json/issues/2155)\n- Adding a value to an existing json puts it at the beginning instead of the end [\\#2149](https://github.com/nlohmann/json/issues/2149)\n- The header file is big, can we use what we need. [\\#2134](https://github.com/nlohmann/json/issues/2134)\n- Changing the default format for unordered\\_map \\(or other set\\) [\\#2132](https://github.com/nlohmann/json/issues/2132)\n- Getting size of deserialized bson document [\\#2131](https://github.com/nlohmann/json/issues/2131)\n- implicit conversion failure [\\#2128](https://github.com/nlohmann/json/issues/2128)\n- Error thrown when parsing in a subclass [\\#2124](https://github.com/nlohmann/json/issues/2124)\n- explicit conversion to string not considered for std::map keys in GCC8 [\\#2096](https://github.com/nlohmann/json/issues/2096)\n- Add support for JSONC [\\#2061](https://github.com/nlohmann/json/issues/2061)\n- Library provides template arg for string\\_type but assumes std::string in some places [\\#2059](https://github.com/nlohmann/json/issues/2059)\n- incremental parsing with sax\\_parser [\\#2030](https://github.com/nlohmann/json/issues/2030)\n- Question about flatten and unflatten [\\#1989](https://github.com/nlohmann/json/issues/1989)\n- CBOR parser doesn't skip tags [\\#1968](https://github.com/nlohmann/json/issues/1968)\n- Compilation failure using Clang on Windows [\\#1898](https://github.com/nlohmann/json/issues/1898)\n- Fail to build when including json.hpp as a system include [\\#1818](https://github.com/nlohmann/json/issues/1818)\n- Parsing string into json doesn't preserve the order correctly. [\\#1817](https://github.com/nlohmann/json/issues/1817)\n- \\[C++17\\] Allow std::optional to convert to nlohmann::json [\\#1749](https://github.com/nlohmann/json/issues/1749)\n- How can I save json object in file in order?  [\\#1717](https://github.com/nlohmann/json/issues/1717)\n- Support for Comments [\\#1513](https://github.com/nlohmann/json/issues/1513)\n- clang compiler: error : unknown type name 'not' [\\#1119](https://github.com/nlohmann/json/issues/1119)\n- dump\\(\\) without alphabetical order [\\#1106](https://github.com/nlohmann/json/issues/1106)\n- operator T\\(\\) considered harmful [\\#958](https://github.com/nlohmann/json/issues/958)\n- Order of the elements in JSON object [\\#952](https://github.com/nlohmann/json/issues/952)\n- How to prevent alphabetical sorting of data? [\\#727](https://github.com/nlohmann/json/issues/727)\n- Why is an object ordering values by Alphabetical Order?  [\\#660](https://github.com/nlohmann/json/issues/660)\n- Feature request: Comments [\\#597](https://github.com/nlohmann/json/issues/597)\n- Head Elements Sorting [\\#543](https://github.com/nlohmann/json/issues/543)\n- Automatic ordered JSON [\\#424](https://github.com/nlohmann/json/issues/424)\n- Support for comments. [\\#376](https://github.com/nlohmann/json/issues/376)\n- Optional comment support. [\\#363](https://github.com/nlohmann/json/issues/363)\n- Strip comments / Minify [\\#294](https://github.com/nlohmann/json/issues/294)\n- maintaining order of keys during iteration [\\#106](https://github.com/nlohmann/json/issues/106)\n\n- Update documentation [\\#2312](https://github.com/nlohmann/json/pull/2312) ([nlohmann](https://github.com/nlohmann))\n- Fix bug in CBOR tag handling [\\#2308](https://github.com/nlohmann/json/pull/2308) ([nlohmann](https://github.com/nlohmann))\n- added inline to NLOHMANN\\_DEFINE\\_TYPE\\_NON\\_INTRUSIVE macro [\\#2306](https://github.com/nlohmann/json/pull/2306) ([jwittbrodt](https://github.com/jwittbrodt))\n- fixes unused variable 'ex' for \\#2304 [\\#2305](https://github.com/nlohmann/json/pull/2305) ([AODQ](https://github.com/AODQ))\n- Cleanup [\\#2303](https://github.com/nlohmann/json/pull/2303) ([nlohmann](https://github.com/nlohmann))\n- Add test with multiple translation units [\\#2301](https://github.com/nlohmann/json/pull/2301) ([nlohmann](https://github.com/nlohmann))\n- Merge GitHub actions [\\#2300](https://github.com/nlohmann/json/pull/2300) ([nlohmann](https://github.com/nlohmann))\n- Fix unused parameter [\\#2299](https://github.com/nlohmann/json/pull/2299) ([nlohmann](https://github.com/nlohmann))\n- Add support for high-precision numbers in UBJSON encoding [\\#2297](https://github.com/nlohmann/json/pull/2297) ([nlohmann](https://github.com/nlohmann))\n- fix eof for get\\_binary and get\\_string [\\#2294](https://github.com/nlohmann/json/pull/2294) ([jprochazk](https://github.com/jprochazk))\n- Serialisation macros: increase upper bound on number of member variables [\\#2287](https://github.com/nlohmann/json/pull/2287) ([pfeatherstone](https://github.com/pfeatherstone))\n- add inline specifier for detail::combine [\\#2285](https://github.com/nlohmann/json/pull/2285) ([T0b1-iOS](https://github.com/T0b1-iOS))\n- Add static assertion for missing binary function in SAX interface [\\#2282](https://github.com/nlohmann/json/pull/2282) ([nlohmann](https://github.com/nlohmann))\n- Add test for target\\_include\\_directories [\\#2279](https://github.com/nlohmann/json/pull/2279) ([nlohmann](https://github.com/nlohmann))\n- Clean up maintainer Makefiles and fix some linter warnings [\\#2274](https://github.com/nlohmann/json/pull/2274) ([nlohmann](https://github.com/nlohmann))\n- Add option to ignore CBOR tags [\\#2273](https://github.com/nlohmann/json/pull/2273) ([nlohmann](https://github.com/nlohmann))\n- Hash function without allocation [\\#2269](https://github.com/nlohmann/json/pull/2269) ([nlohmann](https://github.com/nlohmann))\n- Add ClangCL for MSVC [\\#2268](https://github.com/nlohmann/json/pull/2268) ([t-b](https://github.com/t-b))\n- Makefile: Always use SED variable [\\#2264](https://github.com/nlohmann/json/pull/2264) ([t-b](https://github.com/t-b))\n- Add Xcode 12 CI [\\#2262](https://github.com/nlohmann/json/pull/2262) ([nlohmann](https://github.com/nlohmann))\n- Make library work with Clang on Windows [\\#2259](https://github.com/nlohmann/json/pull/2259) ([nlohmann](https://github.com/nlohmann))\n- Add ordered\\_json specialization with ordered object keys [\\#2258](https://github.com/nlohmann/json/pull/2258) ([nlohmann](https://github.com/nlohmann))\n- Add pkg-config file [\\#2253](https://github.com/nlohmann/json/pull/2253) ([ericonr](https://github.com/ericonr))\n- Fix regression from \\#2181 [\\#2251](https://github.com/nlohmann/json/pull/2251) ([nlohmann](https://github.com/nlohmann))\n- Tag binary values in cbor if set [\\#2244](https://github.com/nlohmann/json/pull/2244) ([matthewbauer](https://github.com/matthewbauer))\n- Make assert configurable via JSON\\_ASSERT [\\#2242](https://github.com/nlohmann/json/pull/2242) ([nlohmann](https://github.com/nlohmann))\n- Add specialization of get\\_to [\\#2233](https://github.com/nlohmann/json/pull/2233) ([nlohmann](https://github.com/nlohmann))\n- Refine documentation of error\\_handler parameter [\\#2232](https://github.com/nlohmann/json/pull/2232) ([nlohmann](https://github.com/nlohmann))\n- Simplify conversion from/to custom types [\\#2225](https://github.com/nlohmann/json/pull/2225) ([nlohmann](https://github.com/nlohmann))\n- Remove unused typedefs [\\#2224](https://github.com/nlohmann/json/pull/2224) ([nlohmann](https://github.com/nlohmann))\n- Enable CMake policy CMP0077 [\\#2222](https://github.com/nlohmann/json/pull/2222) ([alexreinking](https://github.com/alexreinking))\n- Add option to ignore comments in parse/accept functions [\\#2212](https://github.com/nlohmann/json/pull/2212) ([nlohmann](https://github.com/nlohmann))\n- Fix Clang-Tidy warnings [\\#2211](https://github.com/nlohmann/json/pull/2211) ([nlohmann](https://github.com/nlohmann))\n- Simple ordered\\_json that works on all supported compilers [\\#2206](https://github.com/nlohmann/json/pull/2206) ([gatopeich](https://github.com/gatopeich))\n- Use unsigned indizies for array index in json pointer [\\#2203](https://github.com/nlohmann/json/pull/2203) ([t-b](https://github.com/t-b))\n- Add option to not rely on Internet connectivity during test stage [\\#2202](https://github.com/nlohmann/json/pull/2202) ([nlohmann](https://github.com/nlohmann))\n- Serialize floating-point numbers with 32 bit when possible \\(MessagePack\\) [\\#2201](https://github.com/nlohmann/json/pull/2201) ([nlohmann](https://github.com/nlohmann))\n- Fix consistency in function `int_to_string()` [\\#2193](https://github.com/nlohmann/json/pull/2193) ([dota17](https://github.com/dota17))\n- Fix issue\\#1275 [\\#2181](https://github.com/nlohmann/json/pull/2181) ([dota17](https://github.com/dota17))\n- C++20 support by removing swap specialization [\\#2176](https://github.com/nlohmann/json/pull/2176) ([gracicot](https://github.com/gracicot))\n- Feat/explicit conversion operator [\\#1559](https://github.com/nlohmann/json/pull/1559) ([theodelrieu](https://github.com/theodelrieu))\n\n## [v3.8.0](https://github.com/nlohmann/json/releases/tag/v3.8.0) (2020-06-14)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.7.3...v3.8.0)\n\n- sorry delete this issue, i'm stupid [\\#2187](https://github.com/nlohmann/json/issues/2187)\n- Append to a std::nlohmann::json type [\\#2186](https://github.com/nlohmann/json/issues/2186)\n- Some troubles to compile the last revision [\\#2177](https://github.com/nlohmann/json/issues/2177)\n- ​\\#​ Top level CMakeLists.txt​\n​project​\\(FOO\\)\n...\n​option​\\(FOO\\_USE\\_EXTERNAL\\_JSON ​\"Use an external JSON library\"​ ​OFF​\\)\n...\n​add\\_subdirectory​\\(thirdparty\\)\n...\n​add\\_library​\\(foo ...\\)\n...\n​\\#​ Note that the namespaced target will always be available regardless of the​\n​\\#​ import method​\n​target\\_link\\_libraries​\\(foo ​PRIVATE​ nlohmann\\_json::nlohmann\\_json\\) [\\#2170](https://github.com/nlohmann/json/issues/2170)\n- https://www.github.com/nlohmann/json/tree/develop/include%2Fnlohmann%2Fjson\\_fwd.hpp [\\#2169](https://github.com/nlohmann/json/issues/2169)\n- templated from\\_json of non primitive types causes gcc error [\\#2168](https://github.com/nlohmann/json/issues/2168)\n- few warnings/errors in copy assignment [\\#2167](https://github.com/nlohmann/json/issues/2167)\n- Different output when upgrading from clang 9 to clang 10 [\\#2166](https://github.com/nlohmann/json/issues/2166)\n- Cannot build with VS 2019 / C++17 [\\#2163](https://github.com/nlohmann/json/issues/2163)\n- Q: When I received an illegal string,How the program knows? [\\#2162](https://github.com/nlohmann/json/issues/2162)\n- Problem while reading a json file [\\#2161](https://github.com/nlohmann/json/issues/2161)\n- converting std::chrono::system\\_clock::time\\_point to json. [\\#2159](https://github.com/nlohmann/json/issues/2159)\n-  how to parse vector\\<struct\\> format [\\#2157](https://github.com/nlohmann/json/issues/2157)\n- nlohmann::json and =nullptr [\\#2156](https://github.com/nlohmann/json/issues/2156)\n- test-cbor fails [\\#2154](https://github.com/nlohmann/json/issues/2154)\n- Accessing array inside array syntax?  [\\#2151](https://github.com/nlohmann/json/issues/2151)\n- Best way to catch errors when querying json [\\#2150](https://github.com/nlohmann/json/issues/2150)\n- JSON Data Mapping Key-Value from other Key-Value [\\#2148](https://github.com/nlohmann/json/issues/2148)\n- Conflicts with std \\<any\\> compiling with GCC 10 [\\#2146](https://github.com/nlohmann/json/issues/2146)\n- Incorrect CMake FetchContent example [\\#2142](https://github.com/nlohmann/json/issues/2142)\n- Help for a Beginner? [\\#2141](https://github.com/nlohmann/json/issues/2141)\n- Read Json from File [\\#2139](https://github.com/nlohmann/json/issues/2139)\n- How to feed a predefined integer value into json string [\\#2138](https://github.com/nlohmann/json/issues/2138)\n- getting json array inside json object [\\#2135](https://github.com/nlohmann/json/issues/2135)\n- Add .contains example to doc [\\#2133](https://github.com/nlohmann/json/issues/2133)\n- Is it safe to return string.c\\_str\\(\\) received from get\\(\\)? [\\#2130](https://github.com/nlohmann/json/issues/2130)\n- GCC 10: Compilation error when including any before including json header in C++17 mode [\\#2129](https://github.com/nlohmann/json/issues/2129)\n- Intersection of two json files [\\#2127](https://github.com/nlohmann/json/issues/2127)\n- App crashes when dump method called for non ascii chars. [\\#2126](https://github.com/nlohmann/json/issues/2126)\n- iterator based erase method [\\#2122](https://github.com/nlohmann/json/issues/2122)\n- quick and convenient api to get/set nested json values [\\#2120](https://github.com/nlohmann/json/issues/2120)\n- assigning nullptr to std::string [\\#2118](https://github.com/nlohmann/json/issues/2118)\n- usless\\_cast warnings with gcc 9.3 and 10.1 \\(C++17\\) [\\#2114](https://github.com/nlohmann/json/issues/2114)\n- clang 10 warning [\\#2113](https://github.com/nlohmann/json/issues/2113)\n- Possible incorrect \\_MSC\\_VER reference [\\#2112](https://github.com/nlohmann/json/issues/2112)\n- warning under gcc 10.1 [\\#2110](https://github.com/nlohmann/json/issues/2110)\n- Wdeprecated-declarations from GCC v10.1.0 [\\#2109](https://github.com/nlohmann/json/issues/2109)\n- Global std::vector from json [\\#2108](https://github.com/nlohmann/json/issues/2108)\n- heap-buffer-overflow when using nlohmann/json, ASAN, and gtest [\\#2107](https://github.com/nlohmann/json/issues/2107)\n- exception 0x770DC5AF when i read an special char in json file [\\#2106](https://github.com/nlohmann/json/issues/2106)\n- json::parse\\(\\) fails to parse a dump\\(2,' '\\) output, yet does successfully parse dump\\(\\) [\\#2105](https://github.com/nlohmann/json/issues/2105)\n- run test-udt error  in MSVC 19.16.27034.0 [\\#2103](https://github.com/nlohmann/json/issues/2103)\n- Unable to dump to stringstream [\\#2102](https://github.com/nlohmann/json/issues/2102)\n- Can't ad an object in another objet [\\#2101](https://github.com/nlohmann/json/issues/2101)\n- Implicit conversion causes \"cannot use operator\\[\\] with a string argument with string\" [\\#2098](https://github.com/nlohmann/json/issues/2098)\n- C++20: char8\\_t [\\#2097](https://github.com/nlohmann/json/issues/2097)\n- Compilation issues when included in project [\\#2094](https://github.com/nlohmann/json/issues/2094)\n- string value with null character causes infinite loop [\\#2093](https://github.com/nlohmann/json/issues/2093)\n- corrupted size vs. prev\\_size \\(aborted\\) [\\#2092](https://github.com/nlohmann/json/issues/2092)\n- Get string field content without return std::string copy  [\\#2091](https://github.com/nlohmann/json/issues/2091)\n- JSON Comments \\(JSON 5\\) [\\#2090](https://github.com/nlohmann/json/issues/2090)\n- Remove \\#include \\<ciso646\\> [\\#2089](https://github.com/nlohmann/json/issues/2089)\n- JSON library as a git submodule [\\#2088](https://github.com/nlohmann/json/issues/2088)\n- Apple Clang 11.0.3 on MacOS Catalina 10.15.4 not compiling [\\#2087](https://github.com/nlohmann/json/issues/2087)\n- Value function return empty object even if it exist [\\#2086](https://github.com/nlohmann/json/issues/2086)\n- Cannot debug but Run works [\\#2085](https://github.com/nlohmann/json/issues/2085)\n- Question about serialization. [\\#2084](https://github.com/nlohmann/json/issues/2084)\n- How to include in an external project [\\#2083](https://github.com/nlohmann/json/issues/2083)\n- Missing tests for binary values [\\#2082](https://github.com/nlohmann/json/issues/2082)\n- How to override default string serialization? [\\#2079](https://github.com/nlohmann/json/issues/2079)\n- Can't have a json type as a property in an arbitrary type [\\#2078](https://github.com/nlohmann/json/issues/2078)\n- New release? [\\#2075](https://github.com/nlohmann/json/issues/2075)\n- CMake FetchContent \\> Updating the documentation? [\\#2073](https://github.com/nlohmann/json/issues/2073)\n- How to convert STL Vector \\(of user defined type\\) to Json [\\#2072](https://github.com/nlohmann/json/issues/2072)\n- how to make an array of objects [\\#2070](https://github.com/nlohmann/json/issues/2070)\n- ‘\\_\\_int64’ was not declared [\\#2068](https://github.com/nlohmann/json/issues/2068)\n- \\[json.exception.type\\_error.317\\] cannot serialize binary data to text JSON [\\#2067](https://github.com/nlohmann/json/issues/2067)\n- Unexpected end of input; expected '\\[', '{', or a literal [\\#2066](https://github.com/nlohmann/json/issues/2066)\n- Json structure can be nested? [\\#2065](https://github.com/nlohmann/json/issues/2065)\n- Bug: returning reference to local temporary object [\\#2064](https://github.com/nlohmann/json/issues/2064)\n- Allow to use non strict parsing [\\#2063](https://github.com/nlohmann/json/issues/2063)\n- Crashing on json::at [\\#2062](https://github.com/nlohmann/json/issues/2062)\n- How to convert a const std::vector\\<char8\\_t\\> message to a json, to be able to parse it and extract information from it? Can you point to any examples? [\\#2058](https://github.com/nlohmann/json/issues/2058)\n- Nice library [\\#2057](https://github.com/nlohmann/json/issues/2057)\n- json.hpp:15372:22: error: expected unqualified-id if \\(not std::isfinite\\(x\\)\\): Started getting this bug after updating my XCode [\\#2056](https://github.com/nlohmann/json/issues/2056)\n- Confused as how I can extract the values from the JSON object. [\\#2055](https://github.com/nlohmann/json/issues/2055)\n- Warnings with GCC 10 [\\#2052](https://github.com/nlohmann/json/issues/2052)\n- Warnings with Clang 10 [\\#2049](https://github.com/nlohmann/json/issues/2049)\n- Update doctest [\\#2048](https://github.com/nlohmann/json/issues/2048)\n- Unclear error message: \"cannot use operator\\[\\] with a string argument with array\" [\\#2047](https://github.com/nlohmann/json/issues/2047)\n- Serializing std::variant\\<T, std::vector\\<T\\>\\> [\\#2045](https://github.com/nlohmann/json/issues/2045)\n- Crash when parse big jsonfile [\\#2042](https://github.com/nlohmann/json/issues/2042)\n- How to check if a key exists without silently generating null objects on the path [\\#2041](https://github.com/nlohmann/json/issues/2041)\n- Crash when traversing over items\\(\\) of temporary json objects [\\#2040](https://github.com/nlohmann/json/issues/2040)\n- How to parse multiple line value ? [\\#2039](https://github.com/nlohmann/json/issues/2039)\n- SAX API uses unsigned std::size\\_t but  -1 if element size is not known; [\\#2037](https://github.com/nlohmann/json/issues/2037)\n- How to parse big decimal data [\\#2036](https://github.com/nlohmann/json/issues/2036)\n- how use   template \\<typename T\\> struct adl\\_serializer  [\\#2035](https://github.com/nlohmann/json/issues/2035)\n- auto iterator returned by find to handle value depending if is string or numeric. [\\#2032](https://github.com/nlohmann/json/issues/2032)\n- pass find returned iterator to numeric variable. [\\#2031](https://github.com/nlohmann/json/issues/2031)\n- Parse error on valid json file [\\#2029](https://github.com/nlohmann/json/issues/2029)\n- Is here any elegant way to combine serialization and deserialization code? [\\#2028](https://github.com/nlohmann/json/issues/2028)\n- Notes about dump function [\\#2027](https://github.com/nlohmann/json/issues/2027)\n- Different JSON printouts for empty dictionary on Linux and Mac. [\\#2026](https://github.com/nlohmann/json/issues/2026)\n- easier way to get exception reason out of json\\_sax\\_dom\\_callback\\_parser without exceptions [\\#2024](https://github.com/nlohmann/json/issues/2024)\n- Using fifo\\_map with base class and derived class [\\#2023](https://github.com/nlohmann/json/issues/2023)\n- Error reading JSON File  [\\#2022](https://github.com/nlohmann/json/issues/2022)\n- Parse causing crash on android.  Cannot catch. [\\#2021](https://github.com/nlohmann/json/issues/2021)\n- Extra backslashes in nested json [\\#2020](https://github.com/nlohmann/json/issues/2020)\n- How to create patch for merge\\_patch input ? [\\#2018](https://github.com/nlohmann/json/issues/2018)\n- CppUTest/include/CppUTestExt/MockSupport.h:40: error: default argument for ‘MockFailureReporter\\* failureReporterForThisCall’ has type ‘void\\*’ [\\#2017](https://github.com/nlohmann/json/issues/2017)\n- including another file [\\#2016](https://github.com/nlohmann/json/issues/2016)\n- GNU PREREQ Error with gcc 9.3.0 [\\#2015](https://github.com/nlohmann/json/issues/2015)\n- Parse error: json.exception.parse\\_error.101 - invalid string: ill-formed UTF-8 byte [\\#2014](https://github.com/nlohmann/json/issues/2014)\n- Add more flexibility to basic\\_json's ObjectType \\(and ArrayType\\) [\\#2013](https://github.com/nlohmann/json/issues/2013)\n- afl persistent mode [\\#2012](https://github.com/nlohmann/json/issues/2012)\n- Compiler Errors under VS2019 in Appveyor CI [\\#2009](https://github.com/nlohmann/json/issues/2009)\n- Another compilation failure with Visual Studio [\\#2007](https://github.com/nlohmann/json/issues/2007)\n- Implicit cast to std::string broken again with VS2019 16.5.0 [\\#2006](https://github.com/nlohmann/json/issues/2006)\n- error: no matching member function for call to 'AddRaw' [\\#2005](https://github.com/nlohmann/json/issues/2005)\n- When I re-create an object again after the network request, an error is reported [\\#2003](https://github.com/nlohmann/json/issues/2003)\n- How to merge \\(and not replace\\) different Json::Value objects in jsoncpp [\\#2001](https://github.com/nlohmann/json/issues/2001)\n- scalar transforms to list [\\#2000](https://github.com/nlohmann/json/issues/2000)\n- Dump JSON containing multibyte characters [\\#1999](https://github.com/nlohmann/json/issues/1999)\n- Build error  when modify value [\\#1998](https://github.com/nlohmann/json/issues/1998)\n- How do i include a vector of pointers in my json? [\\#1997](https://github.com/nlohmann/json/issues/1997)\n- Compiler error wrt incomplete types changed in gcc8.3.0-26 [\\#1996](https://github.com/nlohmann/json/issues/1996)\n- NaN-like comparison behavior of discarded is inconvenient [\\#1988](https://github.com/nlohmann/json/issues/1988)\n- Maintaining JSON package in my CMake [\\#1987](https://github.com/nlohmann/json/issues/1987)\n- reading int number and string number [\\#1986](https://github.com/nlohmann/json/issues/1986)\n- Build error: keyword is hidden by macro definition! [\\#1985](https://github.com/nlohmann/json/issues/1985)\n- JSON patch diff for op=add formation is not as per standard \\(RFC 6902\\) [\\#1983](https://github.com/nlohmann/json/issues/1983)\n- json\\_pointer.contains\\(\\) exception is incorrectly raised [\\#1982](https://github.com/nlohmann/json/issues/1982)\n- Error with non existing key [\\#1981](https://github.com/nlohmann/json/issues/1981)\n- Closed [\\#1978](https://github.com/nlohmann/json/issues/1978)\n- Where is the library built and what is the name? [\\#1977](https://github.com/nlohmann/json/issues/1977)\n- The cmake\\_import example does not build [\\#1976](https://github.com/nlohmann/json/issues/1976)\n- Dumping core when reading invalid file [\\#1975](https://github.com/nlohmann/json/issues/1975)\n- Abort in dump\\(\\) method [\\#1973](https://github.com/nlohmann/json/issues/1973)\n- Unclear docs regarding parser\\_callback\\_t callbacks [\\#1972](https://github.com/nlohmann/json/issues/1972)\n- Possible memory leak on push\\_back [\\#1971](https://github.com/nlohmann/json/issues/1971)\n- Is it possible to get a safe mutable reference/pointer to internal variant used in nlohmann json?  [\\#1970](https://github.com/nlohmann/json/issues/1970)\n- Getting a flatten json to map\\<string, string\\> [\\#1957](https://github.com/nlohmann/json/issues/1957)\n- forced type conversion or lexical cast without exception. [\\#1955](https://github.com/nlohmann/json/issues/1955)\n- Add json\\_view type support to avoid excessive copying [\\#1954](https://github.com/nlohmann/json/issues/1954)\n- Adding \"examples\" section for real-life usages [\\#1953](https://github.com/nlohmann/json/issues/1953)\n- Add nlohmann::json::key\\_type [\\#1951](https://github.com/nlohmann/json/issues/1951)\n- cannot use operator\\[\\] with a string argument with string [\\#1949](https://github.com/nlohmann/json/issues/1949)\n- std::ifstream \\>\\> json error [\\#1948](https://github.com/nlohmann/json/issues/1948)\n- Cannot update json data in an iterator? [\\#1947](https://github.com/nlohmann/json/issues/1947)\n- How can i build this library in VS 2017? [\\#1943](https://github.com/nlohmann/json/issues/1943)\n- json\\_pointer.contains\\(\\) exceptions when path not found [\\#1942](https://github.com/nlohmann/json/issues/1942)\n- Nested objects serialize/deserialize [\\#1941](https://github.com/nlohmann/json/issues/1941)\n- Compile warning on architectures that are not x86 [\\#1939](https://github.com/nlohmann/json/issues/1939)\n- Version of nlohmann-json-dev in debian packages [\\#1938](https://github.com/nlohmann/json/issues/1938)\n- Create a json object for every cycle  [\\#1937](https://github.com/nlohmann/json/issues/1937)\n- How to get the object name? [\\#1936](https://github.com/nlohmann/json/issues/1936)\n- Reserve and resize function for basic json [\\#1935](https://github.com/nlohmann/json/issues/1935)\n- How to use json parse in tsl::ordread\\_map? [\\#1934](https://github.com/nlohmann/json/issues/1934)\n- C++14 support is not enabled with msvc2015 [\\#1932](https://github.com/nlohmann/json/issues/1932)\n- Need help with to\\_json for derived class, keep getting \"cannot use operator\" [\\#1931](https://github.com/nlohmann/json/issues/1931)\n- How to handle std::vector\\<std::uint8\\_t\\> [\\#1930](https://github.com/nlohmann/json/issues/1930)\n- Heap corruption issue [\\#1929](https://github.com/nlohmann/json/issues/1929)\n- Add `std::wistream` support. [\\#1928](https://github.com/nlohmann/json/issues/1928)\n- This i can write and read any file thanks [\\#1927](https://github.com/nlohmann/json/issues/1927)\n- How can I get this simple example working? [\\#1926](https://github.com/nlohmann/json/issues/1926)\n- emplace\\_back does not seems to work with the int 0 [\\#1925](https://github.com/nlohmann/json/issues/1925)\n- Why nlohmann does not release memory [\\#1924](https://github.com/nlohmann/json/issues/1924)\n- Is it possible to have template `json::parse` with `noexcept` specifier? [\\#1922](https://github.com/nlohmann/json/issues/1922)\n- JSON to wstring? [\\#1921](https://github.com/nlohmann/json/issues/1921)\n- GCC 10 tests build failure [\\#1920](https://github.com/nlohmann/json/issues/1920)\n- Size of binary json representations [\\#1919](https://github.com/nlohmann/json/issues/1919)\n- Accessing strings \\(for example in keys or values\\) without having the lib create a copy of it. [\\#1916](https://github.com/nlohmann/json/issues/1916)\n- operator== documentation should show how to apply custom comparison function [\\#1915](https://github.com/nlohmann/json/issues/1915)\n- char8\\_t and std::u8string support [\\#1914](https://github.com/nlohmann/json/issues/1914)\n- std::is\\_pod is deprecated in C++20 [\\#1913](https://github.com/nlohmann/json/issues/1913)\n- Incomplete types reported by \\(experimental\\) GCC10 [\\#1912](https://github.com/nlohmann/json/issues/1912)\n- Compile warnings on MSVC 14.2 [\\#1911](https://github.com/nlohmann/json/issues/1911)\n- How to parse json file with   type composition  of std::optional  and std::variant [\\#1910](https://github.com/nlohmann/json/issues/1910)\n- why root\\_schema be  implemented as unique\\_ptr in json-validator.cpp，could I use it as shared\\_ptr? [\\#1908](https://github.com/nlohmann/json/issues/1908)\n- compile error in gcc-6.3.0 [\\#1906](https://github.com/nlohmann/json/issues/1906)\n- Scalar constexpr is odr-used when used as json initializer [\\#1905](https://github.com/nlohmann/json/issues/1905)\n- install Slack app [\\#1904](https://github.com/nlohmann/json/issues/1904)\n- typo in a comment [\\#1903](https://github.com/nlohmann/json/issues/1903)\n- Watch JSON variables in Debug [\\#1902](https://github.com/nlohmann/json/issues/1902)\n- does Json sdk cares about dfc dfd utf8 issue? [\\#1901](https://github.com/nlohmann/json/issues/1901)\n- Allow multiple line string value in JSON [\\#1897](https://github.com/nlohmann/json/issues/1897)\n- Writing map to json file  [\\#1896](https://github.com/nlohmann/json/issues/1896)\n- Small documentation mistake [\\#1895](https://github.com/nlohmann/json/issues/1895)\n- why static function `parse` cann't find in visual studio 2019 [\\#1894](https://github.com/nlohmann/json/issues/1894)\n- Best way to handle json files with missing key value pairs. [\\#1893](https://github.com/nlohmann/json/issues/1893)\n- accessing json object as multimap [\\#1892](https://github.com/nlohmann/json/issues/1892)\n- What is the best way to parse vec3s into glm::vec3 [\\#1891](https://github.com/nlohmann/json/issues/1891)\n- Get array of items without using vector [\\#1890](https://github.com/nlohmann/json/issues/1890)\n- Build errors \\(clang 11.0.0\\) on macOS 10.15.2 [\\#1889](https://github.com/nlohmann/json/issues/1889)\n- Multiple arrays to vectors help [\\#1888](https://github.com/nlohmann/json/issues/1888)\n- json::parse\\(begin, end\\) parse error on first character using uchar\\* [\\#1887](https://github.com/nlohmann/json/issues/1887)\n- issue in free\\(\\) [\\#1886](https://github.com/nlohmann/json/issues/1886)\n- is\\_number\\_unsigned\\(\\) returns false for positive integers \\(int or 0 or 1 literals\\) [\\#1885](https://github.com/nlohmann/json/issues/1885)\n- MSVC build failure with /Zc:\\_\\_cplusplus and C++17 [\\#1883](https://github.com/nlohmann/json/issues/1883)\n- RFC 6901 op:replace & arrays [\\#1882](https://github.com/nlohmann/json/issues/1882)\n- Problem with serialization of my custom template doubly-linked list [\\#1881](https://github.com/nlohmann/json/issues/1881)\n- is\\_array\\(\\) is True, but raise 'cannot use operator\\[\\] for object iterators' [\\#1880](https://github.com/nlohmann/json/issues/1880)\n- Serialize dynamic array [\\#1879](https://github.com/nlohmann/json/issues/1879)\n- Serialization of struct object. [\\#1877](https://github.com/nlohmann/json/issues/1877)\n- warning:c4503 [\\#1875](https://github.com/nlohmann/json/issues/1875)\n- Why are flattened empty objects/arrays not representable? [\\#1874](https://github.com/nlohmann/json/issues/1874)\n- Container Overflow \\(ASAN\\) when using operator \\>\\> on an ifs [\\#1873](https://github.com/nlohmann/json/issues/1873)\n- Sub-array to vector or map object? [\\#1870](https://github.com/nlohmann/json/issues/1870)\n- WIP: QT \\(cute\\) type supports [\\#1869](https://github.com/nlohmann/json/issues/1869)\n- Compiler flags to disable features and shrink code size [\\#1868](https://github.com/nlohmann/json/issues/1868)\n- null strings [\\#1867](https://github.com/nlohmann/json/issues/1867)\n- Struct with array of struct and \\_\\_attribute\\_\\_\\(\\(packed\\)\\) [\\#1866](https://github.com/nlohmann/json/issues/1866)\n- Best way to extract numbers in the string? [\\#1865](https://github.com/nlohmann/json/issues/1865)\n- Displaying \\\\?\\Volume{guid} from string to json giving error [\\#1864](https://github.com/nlohmann/json/issues/1864)\n- not working when compiling as x86 [\\#1863](https://github.com/nlohmann/json/issues/1863)\n- Skipping evaluation of log line expressions with a macro, is it possible? [\\#1862](https://github.com/nlohmann/json/issues/1862)\n- Suppress warnings [\\#1861](https://github.com/nlohmann/json/issues/1861)\n- conflit with g++ compile option -mwindows [\\#1860](https://github.com/nlohmann/json/issues/1860)\n- How to serialize nested classes to semi-flat JSON object? [\\#1859](https://github.com/nlohmann/json/issues/1859)\n- Memory Requirement for large json file [\\#1858](https://github.com/nlohmann/json/issues/1858)\n- Query a binary format \\(BSON, CBOR, MessagePack, UBJSON\\) [\\#1856](https://github.com/nlohmann/json/issues/1856)\n- Documentation on operator\\[\\] behavior with missing keys [\\#1855](https://github.com/nlohmann/json/issues/1855)\n- Problem in converting string into JSON; Can't parse successfully. [\\#1854](https://github.com/nlohmann/json/issues/1854)\n- json.at\\_or\\_default\\(key, defaultval\\) [\\#1852](https://github.com/nlohmann/json/issues/1852)\n- please improve the enum conversion documentation \\(my example gist provided\\) [\\#1851](https://github.com/nlohmann/json/issues/1851)\n- Default value returned on ValueType nlohmann::basic\\_json::value \\(const typename object\\_t::key\\_type& key, const ValueType& default\\_value\\) \t [\\#1850](https://github.com/nlohmann/json/issues/1850)\n- Accounting for arbitrary precision numerical literals [\\#1849](https://github.com/nlohmann/json/issues/1849)\n- While trying to make a simple array, I get a nested array instead [\\#1848](https://github.com/nlohmann/json/issues/1848)\n- How to reuse the parser and serializer intermediate storage? [\\#1847](https://github.com/nlohmann/json/issues/1847)\n- Too much content in json.hpp leads to slow compilation [\\#1845](https://github.com/nlohmann/json/issues/1845)\n- Cannot read some data in json file [\\#1843](https://github.com/nlohmann/json/issues/1843)\n- Precompiled JSON library? [\\#1842](https://github.com/nlohmann/json/issues/1842)\n- Please change assert into throw\\(maybe\\) in line 17946 [\\#1841](https://github.com/nlohmann/json/issues/1841)\n- JSON for modern C++ ECCN information [\\#1840](https://github.com/nlohmann/json/issues/1840)\n- CI: reduce build time for Travis valgrind [\\#1836](https://github.com/nlohmann/json/issues/1836)\n- How do I traverse a json object and add new elements into the hierarchy [\\#1834](https://github.com/nlohmann/json/issues/1834)\n- Invalid UTF-8 byte at index 1: 0x65 [\\#1831](https://github.com/nlohmann/json/issues/1831)\n- Serialize big data in json [\\#1828](https://github.com/nlohmann/json/issues/1828)\n- Backslash '\\' in value causes exception [\\#1827](https://github.com/nlohmann/json/issues/1827)\n- from\\_json for non default constructible class with dependency injection [\\#1819](https://github.com/nlohmann/json/issues/1819)\n- Semi-frequent timeouts in `test-unicode_all` with 3.6.1 \\(aarch64\\) [\\#1816](https://github.com/nlohmann/json/issues/1816)\n- input\\_adapter not user extensible [\\#1813](https://github.com/nlohmann/json/issues/1813)\n- crash at json::destroy on android  [\\#1812](https://github.com/nlohmann/json/issues/1812)\n- Logs are repeating while cmake [\\#1809](https://github.com/nlohmann/json/issues/1809)\n- Add a the possibility to add dynamic json objects [\\#1795](https://github.com/nlohmann/json/issues/1795)\n- Unnecessary test data file in the release [\\#1790](https://github.com/nlohmann/json/issues/1790)\n- Add support for parse stack limiting [\\#1788](https://github.com/nlohmann/json/issues/1788)\n- GCC -Wuseless-cast warnings [\\#1777](https://github.com/nlohmann/json/issues/1777)\n- compilation issue with NVCC 9.0 [\\#1773](https://github.com/nlohmann/json/issues/1773)\n- Unexpected behavior with fifo\\_map json when copy and append  [\\#1763](https://github.com/nlohmann/json/issues/1763)\n- Parse error [\\#1761](https://github.com/nlohmann/json/issues/1761)\n- Assignment \\(using value\\(\\)\\) to nonexistent element behaves differently on Xcode 8 vs Xcode 10 [\\#1758](https://github.com/nlohmann/json/issues/1758)\n- Readme out of date [\\#1756](https://github.com/nlohmann/json/issues/1756)\n- cmake\\_\\* tests don't use the build system's compiler [\\#1747](https://github.com/nlohmann/json/issues/1747)\n- Static assertions for template type properties required [\\#1729](https://github.com/nlohmann/json/issues/1729)\n- Use float and possibly half in json::to\\_cbor [\\#1719](https://github.com/nlohmann/json/issues/1719)\n- json::from\\_cbor does not respect allow\\_exceptions = false when input is string literal [\\#1715](https://github.com/nlohmann/json/issues/1715)\n- /Zc:\\_\\_cplusplus leads to C2416 [\\#1695](https://github.com/nlohmann/json/issues/1695)\n- `unflatten` vs objects with number-ish keys [\\#1575](https://github.com/nlohmann/json/issues/1575)\n- A \"thinner\" source code tar as part of release? [\\#1572](https://github.com/nlohmann/json/issues/1572)\n- Repository is almost 450MB [\\#1497](https://github.com/nlohmann/json/issues/1497)\n- Substantial performance penalty caused by polymorphic input adapter  [\\#1457](https://github.com/nlohmann/json/issues/1457)\n- Move tests to a separate repo [\\#1235](https://github.com/nlohmann/json/issues/1235)\n- reduce repos size [\\#1185](https://github.com/nlohmann/json/issues/1185)\n- CMakeLists.txt in release zips? [\\#1184](https://github.com/nlohmann/json/issues/1184)\n- Minimal branch? [\\#1066](https://github.com/nlohmann/json/issues/1066)\n- Move test blobs to a submodule? [\\#732](https://github.com/nlohmann/json/issues/732)\n- \\[Question\\] When using this as git submodule, will it clone the whole thing include test data and benchmark? [\\#620](https://github.com/nlohmann/json/issues/620)\n- Need to improve ignores.. [\\#567](https://github.com/nlohmann/json/issues/567)\n- Minimal repository \\(current size very large\\) [\\#556](https://github.com/nlohmann/json/issues/556)\n- For a header-only library you have to clone 214MB [\\#482](https://github.com/nlohmann/json/issues/482)\n- 17 MB / 90 MB repo size!? [\\#96](https://github.com/nlohmann/json/issues/96)\n\n- Improve parse\\_ubjson\\_fuzzer [\\#2182](https://github.com/nlohmann/json/pull/2182) ([tanuj208](https://github.com/tanuj208))\n- Add input adapter tests [\\#2178](https://github.com/nlohmann/json/pull/2178) ([nlohmann](https://github.com/nlohmann))\n- Fix warnings [\\#2174](https://github.com/nlohmann/json/pull/2174) ([nlohmann](https://github.com/nlohmann))\n- Fix PR\\#1006 [\\#2158](https://github.com/nlohmann/json/pull/2158) ([dota17](https://github.com/dota17))\n- Fix issue\\#1972 [\\#2153](https://github.com/nlohmann/json/pull/2153) ([dota17](https://github.com/dota17))\n- Update URLs to HTTPS [\\#2152](https://github.com/nlohmann/json/pull/2152) ([TotalCaesar659](https://github.com/TotalCaesar659))\n- Fix Issue\\#1813: user defined input adapters [\\#2145](https://github.com/nlohmann/json/pull/2145) ([FrancoisChabot](https://github.com/FrancoisChabot))\n- Fix issue\\#1939: Cast character to unsigned for comparison [\\#2144](https://github.com/nlohmann/json/pull/2144) ([XyFreak](https://github.com/XyFreak))\n- Fix issue\\#2142: readme: fix typo in CMake FetchContent example [\\#2143](https://github.com/nlohmann/json/pull/2143) ([quentin-dev](https://github.com/quentin-dev))\n- Respect allow\\_exceptions=false for binary formats [\\#2140](https://github.com/nlohmann/json/pull/2140) ([nlohmann](https://github.com/nlohmann))\n- Fix issue 2112 [\\#2137](https://github.com/nlohmann/json/pull/2137) ([dota17](https://github.com/dota17))\n- Add bleeding edge GCC to CI [\\#2136](https://github.com/nlohmann/json/pull/2136) ([aokellermann](https://github.com/aokellermann))\n- Clean up implementation of binary type [\\#2125](https://github.com/nlohmann/json/pull/2125) ([nlohmann](https://github.com/nlohmann))\n- Fixed a compilation error in MSVC [\\#2121](https://github.com/nlohmann/json/pull/2121) ([gistrec](https://github.com/gistrec))\n- Overwork CI [\\#2119](https://github.com/nlohmann/json/pull/2119) ([nlohmann](https://github.com/nlohmann))\n- Fix warnings from Clang 10 and GCC 9 [\\#2116](https://github.com/nlohmann/json/pull/2116) ([nlohmann](https://github.com/nlohmann))\n- Do not include \\<ciso646\\> when using C++17 [\\#2115](https://github.com/nlohmann/json/pull/2115) ([nlohmann](https://github.com/nlohmann))\n- Fix issue\\#2086: disallow json::value\\_t type parameter in value\\(\\) [\\#2104](https://github.com/nlohmann/json/pull/2104) ([dota17](https://github.com/dota17))\n- Fix Coveralls integration [\\#2100](https://github.com/nlohmann/json/pull/2100) ([nlohmann](https://github.com/nlohmann))\n- Add tests for binary values [\\#2099](https://github.com/nlohmann/json/pull/2099) ([nlohmann](https://github.com/nlohmann))\n- Use external test data [\\#2081](https://github.com/nlohmann/json/pull/2081) ([nlohmann](https://github.com/nlohmann))\n- Remove Doozer CI [\\#2080](https://github.com/nlohmann/json/pull/2080) ([nlohmann](https://github.com/nlohmann))\n- Fix README.md. Missing ``` [\\#2077](https://github.com/nlohmann/json/pull/2077) ([ArthurSonzogni](https://github.com/ArthurSonzogni))\n- Fix error message about invalid surrogate pairs [\\#2076](https://github.com/nlohmann/json/pull/2076) ([rmisev](https://github.com/rmisev))\n- Add CMake fetchcontent documentation and tests [\\#2074](https://github.com/nlohmann/json/pull/2074) ([ArthurSonzogni](https://github.com/ArthurSonzogni))\n- Properly pass serialize\\_binary to dump function [\\#2071](https://github.com/nlohmann/json/pull/2071) ([nlohmann](https://github.com/nlohmann))\n- Fix returning reference to local temporary object [\\#2069](https://github.com/nlohmann/json/pull/2069) ([nlohmann](https://github.com/nlohmann))\n- updated wandbox link [\\#2060](https://github.com/nlohmann/json/pull/2060) ([alexandermyasnikov](https://github.com/alexandermyasnikov))\n- Fix bug in diff function [\\#2054](https://github.com/nlohmann/json/pull/2054) ([nlohmann](https://github.com/nlohmann))\n- Fix GCC compiler warnings [\\#2053](https://github.com/nlohmann/json/pull/2053) ([nlohmann](https://github.com/nlohmann))\n- Fix Clang compiler warnings [\\#2051](https://github.com/nlohmann/json/pull/2051) ([nlohmann](https://github.com/nlohmann))\n- Update doctest to 2.3.7 [\\#2050](https://github.com/nlohmann/json/pull/2050) ([nlohmann](https://github.com/nlohmann))\n- Fix issue\\#1719 [\\#2044](https://github.com/nlohmann/json/pull/2044) ([dota17](https://github.com/dota17))\n- Add missing testcase about NaN in unit-constructor1.cpp [\\#2043](https://github.com/nlohmann/json/pull/2043) ([dota17](https://github.com/dota17))\n- Templatize basic\\_json constructor from json\\_ref [\\#2034](https://github.com/nlohmann/json/pull/2034) ([ArtemSarmini](https://github.com/ArtemSarmini))\n- Replace deprecated std::is\\_pod [\\#2033](https://github.com/nlohmann/json/pull/2033) ([nlohmann](https://github.com/nlohmann))\n- Fixes \\#1971 \\(memory leak in basic\\_json::push\\_back\\) [\\#2025](https://github.com/nlohmann/json/pull/2025) ([ArtemSarmini](https://github.com/ArtemSarmini))\n- fix \\#1982:json\\_pointer.contains\\(\\) exception is incorrectly raised [\\#2019](https://github.com/nlohmann/json/pull/2019) ([dota17](https://github.com/dota17))\n- Update LICENSE.MIT [\\#2010](https://github.com/nlohmann/json/pull/2010) ([magamig](https://github.com/magamig))\n- PR for \\#2006 to test in AppVeyor. [\\#2008](https://github.com/nlohmann/json/pull/2008) ([garethsb](https://github.com/garethsb))\n- Added wsjcpp.yml [\\#2004](https://github.com/nlohmann/json/pull/2004) ([sea-kg](https://github.com/sea-kg))\n- fix error 'setw' is not a member of 'std' in Wandbox example [\\#2002](https://github.com/nlohmann/json/pull/2002) ([alexandermyasnikov](https://github.com/alexandermyasnikov))\n- catch exceptions for json\\_pointer : ..../+99 [\\#1990](https://github.com/nlohmann/json/pull/1990) ([dota17](https://github.com/dota17))\n- Modify the document about operator== [\\#1984](https://github.com/nlohmann/json/pull/1984) ([dota17](https://github.com/dota17))\n- Rename argument array\\_index to array\\_indx in json\\_pointer methods [\\#1980](https://github.com/nlohmann/json/pull/1980) ([linev](https://github.com/linev))\n- README: Fix string representation of `dump`ed `json` [\\#1979](https://github.com/nlohmann/json/pull/1979) ([alexweej](https://github.com/alexweej))\n- fix warnings in serializer.hpp for VS2019 [\\#1969](https://github.com/nlohmann/json/pull/1969) ([dota17](https://github.com/dota17))\n- Fix C26451 warnnings in to\\_chars.hpp [\\#1967](https://github.com/nlohmann/json/pull/1967) ([dota17](https://github.com/dota17))\n- appveyor.yml: Compile and test with latest version for \\_\\_cplusplus ma… [\\#1958](https://github.com/nlohmann/json/pull/1958) ([t-b](https://github.com/t-b))\n- Fix typo in examples [\\#1956](https://github.com/nlohmann/json/pull/1956) ([dota17](https://github.com/dota17))\n- templated input adapters [\\#1950](https://github.com/nlohmann/json/pull/1950) ([FrancoisChabot](https://github.com/FrancoisChabot))\n- Update README.md : add a FAQ about memory release [\\#1933](https://github.com/nlohmann/json/pull/1933) ([dota17](https://github.com/dota17))\n- Some typos [\\#1923](https://github.com/nlohmann/json/pull/1923) ([Coeur](https://github.com/Coeur))\n- Fix link to parse function in README [\\#1918](https://github.com/nlohmann/json/pull/1918) ([kastiglione](https://github.com/kastiglione))\n- Readme: Updated links to hunter repo & docs [\\#1917](https://github.com/nlohmann/json/pull/1917) ([jothepro](https://github.com/jothepro))\n- Adds instruction for using Build2's package manager [\\#1909](https://github.com/nlohmann/json/pull/1909) ([Klaim](https://github.com/Klaim))\n- Update README.md [\\#1907](https://github.com/nlohmann/json/pull/1907) ([pauljurczak](https://github.com/pauljurczak))\n- Fix warning: ignoring return value [\\#1871](https://github.com/nlohmann/json/pull/1871) ([sonulohani](https://github.com/sonulohani))\n- docs: add central repository as conan source to readme [\\#1857](https://github.com/nlohmann/json/pull/1857) ([gocarlos](https://github.com/gocarlos))\n- README: Package in MSYS2 renamed to nlohmann-json [\\#1853](https://github.com/nlohmann/json/pull/1853) ([podsvirov](https://github.com/podsvirov))\n- Fix msvc warnings [\\#1846](https://github.com/nlohmann/json/pull/1846) ([MBalszun](https://github.com/MBalszun))\n- Update tests that generate CMake projects to use main project's C++ compiler [\\#1844](https://github.com/nlohmann/json/pull/1844) ([Tridacnid](https://github.com/Tridacnid))\n- make CMake's version config file architecture-independent [\\#1746](https://github.com/nlohmann/json/pull/1746) ([uhoreg](https://github.com/uhoreg))\n- Add binary type support to all binary file formats, as well as an internally represented binary type [\\#1662](https://github.com/nlohmann/json/pull/1662) ([OmnipotentEntity](https://github.com/OmnipotentEntity))\n\n## [v3.7.3](https://github.com/nlohmann/json/releases/tag/v3.7.3) (2019-11-17)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.7.2...v3.7.3)\n\n- Project branches [\\#1839](https://github.com/nlohmann/json/issues/1839)\n- Quadratic destruction complexity introduced in \\#1436 [\\#1837](https://github.com/nlohmann/json/issues/1837)\n- Trying to open a file [\\#1814](https://github.com/nlohmann/json/issues/1814)\n- Comparing data type with value\\_t::number\\_integer fails [\\#1783](https://github.com/nlohmann/json/issues/1783)\n- CMake version config file is architecture-dependent [\\#1697](https://github.com/nlohmann/json/issues/1697)\n\n- Fix quadratic destruction complexity [\\#1838](https://github.com/nlohmann/json/pull/1838) ([nickaein](https://github.com/nickaein))\n\n## [v3.7.2](https://github.com/nlohmann/json/releases/tag/v3.7.2) (2019-11-10)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.7.1...v3.7.2)\n\n- Segmentation fault in destructor in case of large inputs [\\#1835](https://github.com/nlohmann/json/issues/1835)\n- type\\_name\\(\\) is not consistent with type\\(\\) [\\#1833](https://github.com/nlohmann/json/issues/1833)\n- json::parse is not a member [\\#1832](https://github.com/nlohmann/json/issues/1832)\n- How do you deal with json\\* ? [\\#1829](https://github.com/nlohmann/json/issues/1829)\n- Combined find\\_package/add\\_subdirectory not linking libraries [\\#1771](https://github.com/nlohmann/json/issues/1771)\n- example code for ifstream reading a json file results in no operator error [\\#1766](https://github.com/nlohmann/json/issues/1766)\n- Warning: unsequenced modification and access to 'range' [\\#1674](https://github.com/nlohmann/json/issues/1674)\n- Segmentation fault \\(stack overflow\\) due to unbounded recursion [\\#1419](https://github.com/nlohmann/json/issues/1419)\n- Stack-overflow \\(OSS-Fuzz 4234\\) [\\#832](https://github.com/nlohmann/json/issues/832)\n\n- Configure WhiteSource Bolt for GitHub [\\#1830](https://github.com/nlohmann/json/pull/1830) ([mend-bolt-for-github[bot]](https://github.com/apps/mend-bolt-for-github))\n- Prevent stackoverflow caused by recursive deconstruction [\\#1436](https://github.com/nlohmann/json/pull/1436) ([nickaein](https://github.com/nickaein))\n\n## [v3.7.1](https://github.com/nlohmann/json/releases/tag/v3.7.1) (2019-11-06)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.7.0...v3.7.1)\n\n- std::is\\_constructible is always true with tuple [\\#1825](https://github.com/nlohmann/json/issues/1825)\n- Can't compile from\\_json\\(std::valarray\\<T\\>\\). [\\#1824](https://github.com/nlohmann/json/issues/1824)\n- json class should have a get\\_or member function [\\#1823](https://github.com/nlohmann/json/issues/1823)\n- NLOHMANN\\_JSON\\_SERIALIZE\\_ENUM macro capture's json objects by value [\\#1822](https://github.com/nlohmann/json/issues/1822)\n- Parse fails when number literals start with zero [\\#1820](https://github.com/nlohmann/json/issues/1820)\n- Weird behaviour of `contains` with `json_pointer` [\\#1815](https://github.com/nlohmann/json/issues/1815)\n- strange behaviour with json\\_pointer and .contains\\(\\) [\\#1811](https://github.com/nlohmann/json/issues/1811)\n- Can \\#1695 be re-opened? [\\#1808](https://github.com/nlohmann/json/issues/1808)\n- Merge two json objects [\\#1807](https://github.com/nlohmann/json/issues/1807)\n- std::is\\_constructible\\<json, std::unordered\\_map\\<std::string, Data\\>\\> when to\\_json not defined [\\#1805](https://github.com/nlohmann/json/issues/1805)\n- Private data on parsing [\\#1802](https://github.com/nlohmann/json/issues/1802)\n- Capturing Line and Position when querying [\\#1800](https://github.com/nlohmann/json/issues/1800)\n- json error on parsing DBL\\_MAX from string [\\#1796](https://github.com/nlohmann/json/issues/1796)\n- De/Serialisation of vector of tupple object with nested obect need Help please [\\#1794](https://github.com/nlohmann/json/issues/1794)\n- Output json is corrupted [\\#1793](https://github.com/nlohmann/json/issues/1793)\n- variable name byte sometimes used as a \\#define [\\#1792](https://github.com/nlohmann/json/issues/1792)\n- Can't read json file [\\#1791](https://github.com/nlohmann/json/issues/1791)\n- Problems with special German letters [\\#1789](https://github.com/nlohmann/json/issues/1789)\n- Support for trailing commas [\\#1787](https://github.com/nlohmann/json/issues/1787)\n- json\\_pointer construction bug [\\#1786](https://github.com/nlohmann/json/issues/1786)\n- Visual Studio 2017 warning [\\#1784](https://github.com/nlohmann/json/issues/1784)\n- ciso646 header become obsolete [\\#1782](https://github.com/nlohmann/json/issues/1782)\n- Migrate LGTM.com installation from OAuth to GitHub App [\\#1781](https://github.com/nlohmann/json/issues/1781)\n- JSON comparison, contains and operator& [\\#1778](https://github.com/nlohmann/json/issues/1778)\n- pass a json object to a class contructor adds an array around the object [\\#1776](https://github.com/nlohmann/json/issues/1776)\n- 'Float' number\\_float\\_function\\_t template parameter name conflicts with C '\\#define Float float' [\\#1775](https://github.com/nlohmann/json/issues/1775)\n- A weird building problem :-\\( [\\#1774](https://github.com/nlohmann/json/issues/1774)\n- What is this json\\_ref? [\\#1772](https://github.com/nlohmann/json/issues/1772)\n- Interoperability with other languages [\\#1770](https://github.com/nlohmann/json/issues/1770)\n- Json dump [\\#1768](https://github.com/nlohmann/json/issues/1768)\n- json\\_pointer\\<\\>::back\\(\\) should be const [\\#1764](https://github.com/nlohmann/json/issues/1764)\n- How to get value from array [\\#1762](https://github.com/nlohmann/json/issues/1762)\n- Merge two jsons [\\#1757](https://github.com/nlohmann/json/issues/1757)\n- Unable to locate nlohmann\\_jsonConfig.cmake [\\#1755](https://github.com/nlohmann/json/issues/1755)\n- json.hpp won;t compile VS2019 CLR/CLI app but does in console app [\\#1754](https://github.com/nlohmann/json/issues/1754)\n- \\[Nested Json Objects\\] Segmentation fault [\\#1753](https://github.com/nlohmann/json/issues/1753)\n- remove/replace assert with exceptions [\\#1752](https://github.com/nlohmann/json/issues/1752)\n- Add array support for update\\(\\) function [\\#1751](https://github.com/nlohmann/json/issues/1751)\n- Is there a reason the `get_to` method is defined in `include/nlohmann/json.hpp` but not in `single_include/nlohmann/json.hpp`? [\\#1750](https://github.com/nlohmann/json/issues/1750)\n- how to validate json object before calling dump\\(\\) [\\#1748](https://github.com/nlohmann/json/issues/1748)\n- Unable to invoke accessors on json objects in lldb [\\#1745](https://github.com/nlohmann/json/issues/1745)\n- Escaping string before parsing [\\#1743](https://github.com/nlohmann/json/issues/1743)\n- Construction in a member initializer list using curly braces is set as 'array' [\\#1742](https://github.com/nlohmann/json/issues/1742)\n- Read a subkey from json object [\\#1740](https://github.com/nlohmann/json/issues/1740)\n- Serialize vector of glm:vec2 [\\#1739](https://github.com/nlohmann/json/issues/1739)\n- Support nlohmann::basic\\_json::value with JSON\\_NOEXCEPTION [\\#1738](https://github.com/nlohmann/json/issues/1738)\n- how to know the parse is error [\\#1737](https://github.com/nlohmann/json/issues/1737)\n- How to check if a given key exists in a JSON object [\\#1736](https://github.com/nlohmann/json/issues/1736)\n- Allow The Colon Key-Value Delimiter To Have A Space Before It \\[@ READ ONLY\\] [\\#1735](https://github.com/nlohmann/json/issues/1735)\n- Allow Tail { \"Key\": \"Value\" } Comma \\[@ READ ONLY\\] [\\#1734](https://github.com/nlohmann/json/issues/1734)\n- No-throw json::value\\(\\) [\\#1733](https://github.com/nlohmann/json/issues/1733)\n- JsonObject.dump\\(\\)  [\\#1732](https://github.com/nlohmann/json/issues/1732)\n- basic\\_json has no member \"parse\" [\\#1731](https://github.com/nlohmann/json/issues/1731)\n- Exception \"type must be string, but is array\" [\\#1730](https://github.com/nlohmann/json/issues/1730)\n- json::contains usage to find a path [\\#1727](https://github.com/nlohmann/json/issues/1727)\n- How to create JSON Object from my Structures of Data and Json File from that Object [\\#1726](https://github.com/nlohmann/json/issues/1726)\n- please provide an API to read JSON from file directly. [\\#1725](https://github.com/nlohmann/json/issues/1725)\n- How to modify a value stored at a key? [\\#1723](https://github.com/nlohmann/json/issues/1723)\n- CMake not correctly finding the configuration package for 3.7.0  [\\#1721](https://github.com/nlohmann/json/issues/1721)\n- name typo in the \"spack package management\" section of README.md [\\#1720](https://github.com/nlohmann/json/issues/1720)\n- How to add json to another json? [\\#1718](https://github.com/nlohmann/json/issues/1718)\n- json::parse\\(\\) ubsan regression with v3.7.0 [\\#1716](https://github.com/nlohmann/json/issues/1716)\n- What I am doing wrong?!? [\\#1714](https://github.com/nlohmann/json/issues/1714)\n- Potential memory leak detected by Valgrind [\\#1713](https://github.com/nlohmann/json/issues/1713)\n- json::parse is not thread safe? [\\#1712](https://github.com/nlohmann/json/issues/1712)\n- static analysis alarm by cppcheck [\\#1711](https://github.com/nlohmann/json/issues/1711)\n- The compilation time is slow [\\#1710](https://github.com/nlohmann/json/issues/1710)\n- not linking properly with cmake [\\#1709](https://github.com/nlohmann/json/issues/1709)\n- Error in dump\\(\\) with int64\\_t minimum value [\\#1708](https://github.com/nlohmann/json/issues/1708)\n- Crash on trying to deserialize json string on 3ds homebrew [\\#1707](https://github.com/nlohmann/json/issues/1707)\n- Can't compile VS2019. 13 Errors  [\\#1706](https://github.com/nlohmann/json/issues/1706)\n- find an object that matches the search criteria [\\#1705](https://github.com/nlohmann/json/issues/1705)\n- IntelliSense goes crazy on VS2019 [\\#1704](https://github.com/nlohmann/json/issues/1704)\n- Installing on Ubuntu 16.04 [\\#1703](https://github.com/nlohmann/json/issues/1703)\n- Where is json::parse now? [\\#1702](https://github.com/nlohmann/json/issues/1702)\n- Forward header should't be amalgamated [\\#1700](https://github.com/nlohmann/json/issues/1700)\n- Json support for Cmake version 2.8.12 [\\#1699](https://github.com/nlohmann/json/issues/1699)\n- Intruisive scientific notation when using .dump\\(\\); [\\#1698](https://github.com/nlohmann/json/issues/1698)\n- Is there support for automatic serialization/deserialization? [\\#1696](https://github.com/nlohmann/json/issues/1696)\n- on MSVC dump\\(\\) will hard crash for larger json [\\#1693](https://github.com/nlohmann/json/issues/1693)\n- puzzled implicit conversions [\\#1692](https://github.com/nlohmann/json/issues/1692)\n- Information: My project uses this awesome library [\\#1691](https://github.com/nlohmann/json/issues/1691)\n- Consider listing files explicitly instead of using GLOB [\\#1686](https://github.com/nlohmann/json/issues/1686)\n- Failing tests on MSVC with VS2019 15.9.13 x64 [\\#1685](https://github.com/nlohmann/json/issues/1685)\n- Change from v2 to v3. Encoding with cp1252 [\\#1680](https://github.com/nlohmann/json/issues/1680)\n- How to add Fifo\\_map into json using Cmake [\\#1679](https://github.com/nlohmann/json/issues/1679)\n- include.zip should contain meson.build [\\#1672](https://github.com/nlohmann/json/issues/1672)\n- \\[Question\\] How do I parse JSON into custom types? [\\#1669](https://github.com/nlohmann/json/issues/1669)\n- Binary \\(0x05\\) data type for BSON to JSON conversion [\\#1668](https://github.com/nlohmann/json/issues/1668)\n- Possible to call dump from lldb? [\\#1666](https://github.com/nlohmann/json/issues/1666)\n- Segmentation fault when linked with libunwind [\\#1665](https://github.com/nlohmann/json/issues/1665)\n- Should I include single-header after my to\\_json and from\\_json custom functions declaration? Why not? [\\#1663](https://github.com/nlohmann/json/issues/1663)\n- Errors/Warnings in VS 2019 when Including Header File [\\#1659](https://github.com/nlohmann/json/issues/1659)\n- Return null object from object's const operator\\[\\] as well. [\\#1658](https://github.com/nlohmann/json/issues/1658)\n- Can't stream json object in to std::basic\\_stringstream\\<wchar\\_t\\> [\\#1656](https://github.com/nlohmann/json/issues/1656)\n- C2440 in vs2015 cannot convert from 'initializer-list' to nlohmann::basic\\_json [\\#1655](https://github.com/nlohmann/json/issues/1655)\n- Issues around get and pointers [\\#1653](https://github.com/nlohmann/json/issues/1653)\n- Non-member operator== breaks enum \\(de\\)serialization [\\#1647](https://github.com/nlohmann/json/issues/1647)\n- Valgrind: bytes in 1 blocks are definitely lost [\\#1646](https://github.com/nlohmann/json/issues/1646)\n- Convenient way to make 'basic\\_json' accept 'QString' as an key type as well? [\\#1640](https://github.com/nlohmann/json/issues/1640)\n- mongodb: nan, inf [\\#1599](https://github.com/nlohmann/json/issues/1599)\n- Error in adl\\_serializer [\\#1590](https://github.com/nlohmann/json/issues/1590)\n- Injecting class during serialization [\\#1584](https://github.com/nlohmann/json/issues/1584)\n- output\\_adapter not user extensible [\\#1534](https://github.com/nlohmann/json/issues/1534)\n- Inclusion of nlohmann/json.hpp causes OS/ABI to change on Linux [\\#1410](https://github.com/nlohmann/json/issues/1410)\n- Add library versioning using inline namespaces [\\#1394](https://github.com/nlohmann/json/issues/1394)\n- CBOR byte string support [\\#1129](https://github.com/nlohmann/json/issues/1129)\n- How to deserialize array with derived objects [\\#716](https://github.com/nlohmann/json/issues/716)\n\n- Add restriction for tuple specialization of to\\_json [\\#1826](https://github.com/nlohmann/json/pull/1826) ([cbegue](https://github.com/cbegue))\n- Fix for \\#1647 [\\#1821](https://github.com/nlohmann/json/pull/1821) ([AnthonyVH](https://github.com/AnthonyVH))\n- Fix issue \\#1805 [\\#1806](https://github.com/nlohmann/json/pull/1806) ([cbegue](https://github.com/cbegue))\n- Fix some spelling errors - mostly in comments & documentation. [\\#1803](https://github.com/nlohmann/json/pull/1803) ([flopp](https://github.com/flopp))\n- Update Hedley to v11. [\\#1799](https://github.com/nlohmann/json/pull/1799) ([nemequ](https://github.com/nemequ))\n- iteration\\_proxy: Fix integer truncation from std::size\\_t to int [\\#1797](https://github.com/nlohmann/json/pull/1797) ([t-b](https://github.com/t-b))\n- appveyor.yml: Add MSVC 16 2019 support [\\#1780](https://github.com/nlohmann/json/pull/1780) ([t-b](https://github.com/t-b))\n- test/CMakeLists.txt: Use an explicit list instead of GLOB [\\#1779](https://github.com/nlohmann/json/pull/1779) ([t-b](https://github.com/t-b))\n- Make json\\_pointer::back const \\(resolves \\#1764\\) [\\#1769](https://github.com/nlohmann/json/pull/1769) ([chris0x44](https://github.com/chris0x44))\n- did you mean 'serialization'? [\\#1767](https://github.com/nlohmann/json/pull/1767) ([0xflotus](https://github.com/0xflotus))\n- Allow items\\(\\) to be used with custom string [\\#1765](https://github.com/nlohmann/json/pull/1765) ([crazyjul](https://github.com/crazyjul))\n- Cppcheck fixes [\\#1760](https://github.com/nlohmann/json/pull/1760) ([Xav83](https://github.com/Xav83))\n- Fix and add test's for SFINAE problem [\\#1741](https://github.com/nlohmann/json/pull/1741) ([tete17](https://github.com/tete17))\n- Fix clang sanitizer invocation [\\#1728](https://github.com/nlohmann/json/pull/1728) ([t-b](https://github.com/t-b))\n- Add gcc 9 and compile with experimental C++20 support [\\#1724](https://github.com/nlohmann/json/pull/1724) ([t-b](https://github.com/t-b))\n- Fix int64 min issue [\\#1722](https://github.com/nlohmann/json/pull/1722) ([t-b](https://github.com/t-b))\n- release: add singleinclude and meson.build to include.zip [\\#1694](https://github.com/nlohmann/json/pull/1694) ([eli-schwartz](https://github.com/eli-schwartz))\n\n## [v3.7.0](https://github.com/nlohmann/json/releases/tag/v3.7.0) (2019-07-28)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.6.1...v3.7.0)\n\n- How can I retrieve uknown strings from json file in my C++ program. [\\#1684](https://github.com/nlohmann/json/issues/1684)\n- contains\\(\\) is sometimes causing stack-based buffer overrun exceptions [\\#1683](https://github.com/nlohmann/json/issues/1683)\n- How to deserialize arrays  from json [\\#1681](https://github.com/nlohmann/json/issues/1681)\n- Compilation failed in VS2015 [\\#1678](https://github.com/nlohmann/json/issues/1678)\n- Why the compiled object file is so huge? [\\#1677](https://github.com/nlohmann/json/issues/1677)\n- From Version 2.1.1 to 3.6.1 serialize std::set [\\#1676](https://github.com/nlohmann/json/issues/1676)\n- Qt deprecation model halting compiltion [\\#1675](https://github.com/nlohmann/json/issues/1675)\n-  Build For Raspberry pi , Rapbery with new Compiler C++17 [\\#1671](https://github.com/nlohmann/json/issues/1671)\n- Build from Raspberry pi [\\#1667](https://github.com/nlohmann/json/issues/1667)\n- Can not translate map with integer key to dict string ?  [\\#1664](https://github.com/nlohmann/json/issues/1664)\n- Double type converts to scientific notation [\\#1661](https://github.com/nlohmann/json/issues/1661)\n- Missing v3.6.1 tag on master branch [\\#1657](https://github.com/nlohmann/json/issues/1657)\n- Support Fleese Binary Data Format [\\#1654](https://github.com/nlohmann/json/issues/1654)\n- Suggestion: replace alternative tokens for !, && and || with their symbols [\\#1652](https://github.com/nlohmann/json/issues/1652)\n- Build failure test-allocator.vcxproj [\\#1651](https://github.com/nlohmann/json/issues/1651)\n- How to provide function json& to\\_json\\(\\) which is similar as 'void to\\_json\\(json&j, const CObject& obj\\)'  ? [\\#1650](https://github.com/nlohmann/json/issues/1650)\n- Can't throw exception when starting file is a number [\\#1649](https://github.com/nlohmann/json/issues/1649)\n- to\\_json / from\\_json with nested type [\\#1648](https://github.com/nlohmann/json/issues/1648)\n- How to create a json object from a std::string, created by j.dump? [\\#1645](https://github.com/nlohmann/json/issues/1645)\n- Problem getting vector \\(array\\) of strings [\\#1644](https://github.com/nlohmann/json/issues/1644)\n- json.hpp compilation issue with other typedefs with same name [\\#1642](https://github.com/nlohmann/json/issues/1642)\n- nlohmann::adl\\_serializer\\<T,void\\>::to\\_json no matching overloaded function found [\\#1641](https://github.com/nlohmann/json/issues/1641)\n- overwrite adl\\_serializer\\<bool, void\\> to change behaviour [\\#1638](https://github.com/nlohmann/json/issues/1638)\n- json.SelectToken\\(\"Manufacturers.Products.Price\"\\); [\\#1637](https://github.com/nlohmann/json/issues/1637)\n- Add json type as value [\\#1636](https://github.com/nlohmann/json/issues/1636)\n- Unit conversion test error: conversion from 'nlohmann::json' to non-scalar type 'std::string\\_view' requested [\\#1634](https://github.com/nlohmann/json/issues/1634)\n- nlohmann VS JsonCpp by C++17 [\\#1633](https://github.com/nlohmann/json/issues/1633)\n- To integrate an inline helper function that return type name as string [\\#1632](https://github.com/nlohmann/json/issues/1632)\n- Return JSON as reference [\\#1631](https://github.com/nlohmann/json/issues/1631)\n- Updating from an older version causes problems with assing a json object to a struct [\\#1630](https://github.com/nlohmann/json/issues/1630)\n- Can without default constructor function for user defined classes when only to\\_json is needed? [\\#1629](https://github.com/nlohmann/json/issues/1629)\n- Compilation fails with clang 6.x-8.x in C++14 mode [\\#1628](https://github.com/nlohmann/json/issues/1628)\n- Treating floating point as string [\\#1627](https://github.com/nlohmann/json/issues/1627)\n- error parsing character å [\\#1626](https://github.com/nlohmann/json/issues/1626)\n- \\[Help\\] How to Improve Json Output Performance with Large Json Arrays [\\#1624](https://github.com/nlohmann/json/issues/1624)\n- Suggested link changes for reporting new issues \\[blob/develop/REAME.md and blob/develop/.github/CONTRIBUTING.md\\] [\\#1623](https://github.com/nlohmann/json/issues/1623)\n- Broken link to issue template in CONTRIBUTING.md [\\#1622](https://github.com/nlohmann/json/issues/1622)\n- Missing word in README.md file  [\\#1621](https://github.com/nlohmann/json/issues/1621)\n- Package manager instructions in README for brew is incorrect [\\#1620](https://github.com/nlohmann/json/issues/1620)\n- Building with Visual Studio 2019 [\\#1619](https://github.com/nlohmann/json/issues/1619)\n- Precedence of to\\_json and builtin harmful [\\#1617](https://github.com/nlohmann/json/issues/1617)\n- The type json is missing from the html documentation [\\#1616](https://github.com/nlohmann/json/issues/1616)\n- variant is not support in Release 3.6.1? [\\#1615](https://github.com/nlohmann/json/issues/1615)\n- Replace assert with throw for const operator\\[\\] [\\#1614](https://github.com/nlohmann/json/issues/1614)\n- Memory Overhead is Too High \\(10x or more\\) [\\#1613](https://github.com/nlohmann/json/issues/1613)\n- program crash everytime, when other data type incomming in json stream as expected [\\#1612](https://github.com/nlohmann/json/issues/1612)\n- Improved Enum Support [\\#1611](https://github.com/nlohmann/json/issues/1611)\n- is it possible convert json object back to stl container ? [\\#1610](https://github.com/nlohmann/json/issues/1610)\n- Add C++17-like emplace.back\\(\\) for arrays. [\\#1609](https://github.com/nlohmann/json/issues/1609)\n- is\\_nothrow\\_copy\\_constructible fails for json::const\\_iterator on MSVC2015 x86 Debug build [\\#1608](https://github.com/nlohmann/json/issues/1608)\n- Reading and writing array elements [\\#1607](https://github.com/nlohmann/json/issues/1607)\n- Converting json::value to int [\\#1605](https://github.com/nlohmann/json/issues/1605)\n- I have a vector of keys and and a string of value and i want to create nested json array [\\#1604](https://github.com/nlohmann/json/issues/1604)\n- In compatible JSON object from nlohmann::json to nohman::json - unexpected end of input; expected '\\[', '{', or a literal [\\#1603](https://github.com/nlohmann/json/issues/1603)\n- json parser crash if having a large number integer in message  [\\#1602](https://github.com/nlohmann/json/issues/1602)\n- Value method with undocumented throwing 302 exception [\\#1601](https://github.com/nlohmann/json/issues/1601)\n- Accessing value with json pointer adds key if not existing [\\#1600](https://github.com/nlohmann/json/issues/1600)\n- README.md broken link to project documentation [\\#1597](https://github.com/nlohmann/json/issues/1597)\n- Random Kudos: Thanks for your work on this! [\\#1596](https://github.com/nlohmann/json/issues/1596)\n- json::parse return value and errors [\\#1595](https://github.com/nlohmann/json/issues/1595)\n- initializer list constructor makes curly brace initialization fragile [\\#1594](https://github.com/nlohmann/json/issues/1594)\n- trying to log message for missing keyword, difference between \\[\"foo\"\\] and at\\(\"foo\"\\) [\\#1593](https://github.com/nlohmann/json/issues/1593)\n- std::string and std::wstring `to_json`  [\\#1592](https://github.com/nlohmann/json/issues/1592)\n- I have a C structure which I need to convert to a JSON. How do I do it? Haven't found proper examples so far. [\\#1591](https://github.com/nlohmann/json/issues/1591)\n- dump\\_escaped possible error ? [\\#1589](https://github.com/nlohmann/json/issues/1589)\n- json::parse\\(\\) into a vector\\<string\\> results in unhandled exception [\\#1587](https://github.com/nlohmann/json/issues/1587)\n- push\\_back\\(\\)/emplace\\_back\\(\\) on array invalidates pointers to existing array items [\\#1586](https://github.com/nlohmann/json/issues/1586)\n- Getting nlohmann::detail::parse\\_error on JSON generated by nlohmann::json not sure why [\\#1583](https://github.com/nlohmann/json/issues/1583)\n- getting error terminate called after throwing an instance of 'std::domain\\_error'   what\\(\\):  cannot use at\\(\\) with string [\\#1582](https://github.com/nlohmann/json/issues/1582)\n- how i create json file  [\\#1581](https://github.com/nlohmann/json/issues/1581)\n- prevent rounding of double datatype values [\\#1580](https://github.com/nlohmann/json/issues/1580)\n- Documentation Container Overview Doesn't Reference Const Methods [\\#1579](https://github.com/nlohmann/json/issues/1579)\n- Writing an array into a nlohmann::json object [\\#1578](https://github.com/nlohmann/json/issues/1578)\n- compilation error when using with another library [\\#1577](https://github.com/nlohmann/json/issues/1577)\n- Homebrew on OSX doesn't install cmake config file [\\#1576](https://github.com/nlohmann/json/issues/1576)\n- JSON Parse Out of Range Error [\\#1574](https://github.com/nlohmann/json/issues/1574)\n- Integrating into existing CMake Project [\\#1573](https://github.com/nlohmann/json/issues/1573)\n- conversion to std::string failed [\\#1571](https://github.com/nlohmann/json/issues/1571)\n- jPtr operation does not throw [\\#1569](https://github.com/nlohmann/json/issues/1569)\n- How to generate dll file for this project [\\#1568](https://github.com/nlohmann/json/issues/1568)\n- how to pass variable data to json in c [\\#1567](https://github.com/nlohmann/json/issues/1567)\n- I want to achieve an upgraded function. [\\#1566](https://github.com/nlohmann/json/issues/1566)\n- How to determine the type of elements read from a JSON array? [\\#1564](https://github.com/nlohmann/json/issues/1564)\n- try\\_get\\_to [\\#1563](https://github.com/nlohmann/json/issues/1563)\n- example code  compile error [\\#1562](https://github.com/nlohmann/json/issues/1562)\n- How to iterate over nested json object [\\#1561](https://github.com/nlohmann/json/issues/1561)\n- Build Option/Separate Function to Allow to Throw on Duplicate Keys [\\#1560](https://github.com/nlohmann/json/issues/1560)\n- Compiler Switches -Weffc++ & -Wshadow are throwing errors [\\#1558](https://github.com/nlohmann/json/issues/1558)\n- warning: use of the 'nodiscard' attribute is a C++17 extension [\\#1557](https://github.com/nlohmann/json/issues/1557)\n- Import/Export compressed JSON files [\\#1556](https://github.com/nlohmann/json/issues/1556)\n- GDB renderers for json library [\\#1554](https://github.com/nlohmann/json/issues/1554)\n- Is it possible to construct a json string object from a binary buffer? [\\#1553](https://github.com/nlohmann/json/issues/1553)\n- json objects in list [\\#1552](https://github.com/nlohmann/json/issues/1552)\n- Matrix output [\\#1550](https://github.com/nlohmann/json/issues/1550)\n- Using json merge\\_patch on ordered non-alphanumeric datasets [\\#1549](https://github.com/nlohmann/json/issues/1549)\n- Invalid parsed value for big integer [\\#1548](https://github.com/nlohmann/json/issues/1548)\n- Integrating with android ndk issues. [\\#1547](https://github.com/nlohmann/json/issues/1547)\n- add noexcept json::value\\(\"key\", default\\) method variant? [\\#1546](https://github.com/nlohmann/json/issues/1546)\n- Thank you! 🙌 [\\#1545](https://github.com/nlohmann/json/issues/1545)\n- Output and input matrix [\\#1544](https://github.com/nlohmann/json/issues/1544)\n- Add regression tests for MSVC [\\#1543](https://github.com/nlohmann/json/issues/1543)\n- \\[Help Needed!\\] Season of Docs [\\#1542](https://github.com/nlohmann/json/issues/1542)\n- program still abort\\(\\) or exit\\(\\) with try catch [\\#1541](https://github.com/nlohmann/json/issues/1541)\n- Have a json::type\\_error exception because of JSON object [\\#1540](https://github.com/nlohmann/json/issues/1540)\n- Quoted numbers [\\#1538](https://github.com/nlohmann/json/issues/1538)\n- Reading a JSON file into an object [\\#1537](https://github.com/nlohmann/json/issues/1537)\n- Releases 3.6.0 and 3.6.1 don't build on conda / windows [\\#1536](https://github.com/nlohmann/json/issues/1536)\n- \\[Clang\\] warning: use of the 'nodiscard' attribute is a C++17 extension \\[-Wc++17-extensions\\] [\\#1535](https://github.com/nlohmann/json/issues/1535)\n- wchar\\_t/std::wstring json can be created but not accessed [\\#1533](https://github.com/nlohmann/json/issues/1533)\n- json stringify [\\#1532](https://github.com/nlohmann/json/issues/1532)\n- How can I use it from gcc on RPI [\\#1528](https://github.com/nlohmann/json/issues/1528)\n- std::pair treated as an array instead of key-value in `std::vector<std::pair<>>` [\\#1520](https://github.com/nlohmann/json/issues/1520)\n- Excessive Memory Usage for Large Json File [\\#1516](https://github.com/nlohmann/json/issues/1516)\n- SAX dumper [\\#1512](https://github.com/nlohmann/json/issues/1512)\n- Conversion to user type containing a std::vector not working with documented approach [\\#1511](https://github.com/nlohmann/json/issues/1511)\n- Inconsistent use of type alias. [\\#1507](https://github.com/nlohmann/json/issues/1507)\n- Is there a current way to represent strings as json int? [\\#1503](https://github.com/nlohmann/json/issues/1503)\n- Intermittent issues with loadJSON [\\#1484](https://github.com/nlohmann/json/issues/1484)\n- use json construct std::string [\\#1462](https://github.com/nlohmann/json/issues/1462)\n- JSON Creation [\\#1461](https://github.com/nlohmann/json/issues/1461)\n- Null bytes in files are treated like EOF [\\#1095](https://github.com/nlohmann/json/issues/1095)\n- Feature: to\\_string\\(const json& j\\); [\\#916](https://github.com/nlohmann/json/issues/916)\n\n- Use GNUInstallDirs instead of hard-coded path. [\\#1673](https://github.com/nlohmann/json/pull/1673) ([ghost](https://github.com/ghost))\n- Package Manager: MSYS2 \\(pacman\\) [\\#1670](https://github.com/nlohmann/json/pull/1670) ([podsvirov](https://github.com/podsvirov))\n- Fix json.hpp compilation issue with other typedefs with same name \\(Issue \\#1642\\) [\\#1643](https://github.com/nlohmann/json/pull/1643) ([kevinlul](https://github.com/kevinlul))\n- Add explicit conversion from json to std::string\\_view in conversion unit test [\\#1639](https://github.com/nlohmann/json/pull/1639) ([taylorhoward92](https://github.com/taylorhoward92))\n- Minor fixes in docs [\\#1625](https://github.com/nlohmann/json/pull/1625) ([nickaein](https://github.com/nickaein))\n- Fix broken links to documentation [\\#1598](https://github.com/nlohmann/json/pull/1598) ([nickaein](https://github.com/nickaein))\n- Added to\\_string and added basic tests [\\#1585](https://github.com/nlohmann/json/pull/1585) ([Macr0Nerd](https://github.com/Macr0Nerd))\n- Regression tests for MSVC [\\#1570](https://github.com/nlohmann/json/pull/1570) ([nickaein](https://github.com/nickaein))\n- Fix/1511 [\\#1555](https://github.com/nlohmann/json/pull/1555) ([theodelrieu](https://github.com/theodelrieu))\n- Remove C++17 extension warning from clang; \\#1535 [\\#1551](https://github.com/nlohmann/json/pull/1551) ([heavywatal](https://github.com/heavywatal))\n- moved from Catch to doctest for unit tests [\\#1439](https://github.com/nlohmann/json/pull/1439) ([onqtam](https://github.com/onqtam))\n\n## [v3.6.1](https://github.com/nlohmann/json/releases/tag/v3.6.1) (2019-03-20)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/3.6.1...v3.6.1)\n\n## [3.6.1](https://github.com/nlohmann/json/releases/tag/3.6.1) (2019-03-20)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.6.0...3.6.1)\n\n- Failed to build with \\<Windows.h\\> [\\#1531](https://github.com/nlohmann/json/issues/1531)\n- Compiling 3.6.0 with GCC \\> 7, array vs std::array \\#590 is back [\\#1530](https://github.com/nlohmann/json/issues/1530)\n- 3.6.0: warning: missing initializer for member 'std::array\\<char, 9ul\\>::\\_M\\_elems' \\[-Wmissing-field-initializers\\] [\\#1527](https://github.com/nlohmann/json/issues/1527)\n- unable to parse json  [\\#1525](https://github.com/nlohmann/json/issues/1525)\n\n## [v3.6.0](https://github.com/nlohmann/json/releases/tag/v3.6.0) (2019-03-19)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.5.0...v3.6.0)\n\n- How can I turn a string of a json array into a json array? [\\#1526](https://github.com/nlohmann/json/issues/1526)\n- Minor: missing a std:: namespace tag [\\#1521](https://github.com/nlohmann/json/issues/1521)\n- how to precision to four decimal for double when use to\\_json [\\#1519](https://github.com/nlohmann/json/issues/1519)\n- error parse [\\#1518](https://github.com/nlohmann/json/issues/1518)\n- Compile error: template argument deduction/substitution failed [\\#1515](https://github.com/nlohmann/json/issues/1515)\n- std::complex type [\\#1510](https://github.com/nlohmann/json/issues/1510)\n- CBOR byte string support [\\#1509](https://github.com/nlohmann/json/issues/1509)\n- Compilation error getting a std::pair\\<\\> on latest VS 2017 compiler [\\#1506](https://github.com/nlohmann/json/issues/1506)\n- \"Integration\" section of documentation needs update? [\\#1505](https://github.com/nlohmann/json/issues/1505)\n- Json object from string from a TCP socket [\\#1504](https://github.com/nlohmann/json/issues/1504)\n- MSVC warning C4946 \\(\"reinterpret\\_cast used between related classes\"\\) compiling json.hpp [\\#1502](https://github.com/nlohmann/json/issues/1502)\n- How to programmatically fill an n-th dimensional JSON object? [\\#1501](https://github.com/nlohmann/json/issues/1501)\n- Error compiling with clang and `JSON_NOEXCEPTION`: need to include `cstdlib` [\\#1500](https://github.com/nlohmann/json/issues/1500)\n- The code compiles unsuccessfully with android-ndk-r10e [\\#1499](https://github.com/nlohmann/json/issues/1499)\n- Cmake 3.1 in develop, when is it likely to make it into a stable release? [\\#1498](https://github.com/nlohmann/json/issues/1498)\n- Some Help please object inside array [\\#1494](https://github.com/nlohmann/json/issues/1494)\n- How to get data into vector of user-defined type from a Json object [\\#1493](https://github.com/nlohmann/json/issues/1493)\n- how to find subelement  without loop [\\#1490](https://github.com/nlohmann/json/issues/1490)\n- json to std::map [\\#1487](https://github.com/nlohmann/json/issues/1487)\n- Type in README.md [\\#1486](https://github.com/nlohmann/json/issues/1486)\n- Error in parsing and reading msgpack-lite  [\\#1485](https://github.com/nlohmann/json/issues/1485)\n- Compiling issues with libc 2.12 [\\#1483](https://github.com/nlohmann/json/issues/1483)\n- How do I use reference or pointer binding values? [\\#1482](https://github.com/nlohmann/json/issues/1482)\n- Compilation fails in MSVC with the Microsoft Language Extensions disabled [\\#1481](https://github.com/nlohmann/json/issues/1481)\n- Functional visit [\\#1480](https://github.com/nlohmann/json/issues/1480)\n- \\[Question\\] Unescaped dump [\\#1479](https://github.com/nlohmann/json/issues/1479)\n- Some Help please [\\#1478](https://github.com/nlohmann/json/issues/1478)\n- Global variables are stored within the JSON file, how do I declare them as global variables when I read them out in my C++ program?  [\\#1476](https://github.com/nlohmann/json/issues/1476)\n- Unable to modify one of the values within the JSON file, and save it  [\\#1475](https://github.com/nlohmann/json/issues/1475)\n- Documentation of parse function has two identical @pre causes [\\#1473](https://github.com/nlohmann/json/issues/1473)\n- GCC 9.0 build failure [\\#1472](https://github.com/nlohmann/json/issues/1472)\n- Can we have an `exists()` method? [\\#1471](https://github.com/nlohmann/json/issues/1471)\n- How to parse multi object json from file? [\\#1470](https://github.com/nlohmann/json/issues/1470)\n- How to returns the name of the upper object? [\\#1467](https://github.com/nlohmann/json/issues/1467)\n- Error: \"tuple\\_size\" has already been declared in the current scope [\\#1466](https://github.com/nlohmann/json/issues/1466)\n- Checking keys of two jsons against eachother [\\#1465](https://github.com/nlohmann/json/issues/1465)\n- Disable installation when used as meson subproject [\\#1463](https://github.com/nlohmann/json/issues/1463)\n- Unpack list of integers to a std::vector\\<int\\> [\\#1460](https://github.com/nlohmann/json/issues/1460)\n- Implement DRY definition of JSON representation of a c++ class  [\\#1459](https://github.com/nlohmann/json/issues/1459)\n- json.exception.type\\_error.305 with GCC 4.9 when using C++ {} initializer [\\#1458](https://github.com/nlohmann/json/issues/1458)\n- API to convert an \"uninitialized\" json into an empty object or empty array [\\#1456](https://github.com/nlohmann/json/issues/1456)\n- How to parse a vector of objects with const attributes [\\#1453](https://github.com/nlohmann/json/issues/1453)\n- NLOHMANN\\_JSON\\_SERIALIZE\\_ENUM potentially requires duplicate definitions [\\#1450](https://github.com/nlohmann/json/issues/1450)\n- Question about making json object from file directory [\\#1449](https://github.com/nlohmann/json/issues/1449)\n- .get\\(\\) throws error if used with userdefined structs in unordered\\_map [\\#1448](https://github.com/nlohmann/json/issues/1448)\n- Integer Overflow \\(OSS-Fuzz 12506\\) [\\#1447](https://github.com/nlohmann/json/issues/1447)\n- If a string has too many invalid UTF-8 characters, json::dump attempts to index an array out of bounds. [\\#1445](https://github.com/nlohmann/json/issues/1445)\n- Setting values of .JSON file [\\#1444](https://github.com/nlohmann/json/issues/1444)\n- alias object\\_t::key\\_type in basic\\_json [\\#1442](https://github.com/nlohmann/json/issues/1442)\n- Latest Ubuntu package is 2.1.1 [\\#1438](https://github.com/nlohmann/json/issues/1438)\n- lexer.hpp\\(1363\\)  '\\_snprintf': is not a  member | Visualstudio 2017 [\\#1437](https://github.com/nlohmann/json/issues/1437)\n- Static method invites inadvertent logic error. [\\#1433](https://github.com/nlohmann/json/issues/1433)\n- EOS compilation produces \"fatal error: 'nlohmann/json.hpp' file not found\" [\\#1432](https://github.com/nlohmann/json/issues/1432)\n- Support for bad commas [\\#1429](https://github.com/nlohmann/json/issues/1429)\n- Please have one base exception class for all json exceptions [\\#1427](https://github.com/nlohmann/json/issues/1427)\n- Compilation warning: 'tuple\\_size' defined as a class template here but previously declared as a struct template [\\#1426](https://github.com/nlohmann/json/issues/1426)\n- Which version can be used with GCC 4.8.2 ? [\\#1424](https://github.com/nlohmann/json/issues/1424)\n- Ignore nullptr values on constructing json object from a container [\\#1422](https://github.com/nlohmann/json/issues/1422)\n- Support for custom float precision via unquoted strings [\\#1421](https://github.com/nlohmann/json/issues/1421)\n- It is possible to call `json::find` with a json\\_pointer as argument. This causes runtime UB/crash. [\\#1418](https://github.com/nlohmann/json/issues/1418)\n- Dump throwing exception [\\#1416](https://github.com/nlohmann/json/issues/1416)\n- Build error  [\\#1415](https://github.com/nlohmann/json/issues/1415)\n- Append version to include.zip [\\#1412](https://github.com/nlohmann/json/issues/1412)\n- error C2039: '\\_snprintf': is not a member of 'std' - Windows [\\#1408](https://github.com/nlohmann/json/issues/1408)\n- Deserializing to vector [\\#1407](https://github.com/nlohmann/json/issues/1407)\n- Efficient way to set a `json` object as value into another `json` key [\\#1406](https://github.com/nlohmann/json/issues/1406)\n- Document return value of parse\\(\\) when allow\\_exceptions == false and parsing fails [\\#1405](https://github.com/nlohmann/json/issues/1405)\n- Unexpected behaviour with structured binding [\\#1404](https://github.com/nlohmann/json/issues/1404)\n- Which native types does get\\<type\\>\\(\\) allow? [\\#1403](https://github.com/nlohmann/json/issues/1403)\n- Add something like Json::StaticString [\\#1402](https://github.com/nlohmann/json/issues/1402)\n- -Wmismatched-tags in 3.5.0? [\\#1401](https://github.com/nlohmann/json/issues/1401)\n- Coverity Scan reports an UNCAUGHT\\_EXCEPT issue [\\#1400](https://github.com/nlohmann/json/issues/1400)\n- fff [\\#1399](https://github.com/nlohmann/json/issues/1399)\n- sorry this is not an issue, just a Question, How to change a key value in a file and save it ? [\\#1398](https://github.com/nlohmann/json/issues/1398)\n- appveyor x64 builds appear to be using Win32 toolset [\\#1374](https://github.com/nlohmann/json/issues/1374)\n- Serializing/Deserializing  a Class containing a vector of itself [\\#1373](https://github.com/nlohmann/json/issues/1373)\n- Retrieving array elements. [\\#1369](https://github.com/nlohmann/json/issues/1369)\n- Deserialize [\\#1366](https://github.com/nlohmann/json/issues/1366)\n- call of overloaded for push\\_back and operator+= is ambiguous [\\#1352](https://github.com/nlohmann/json/issues/1352)\n- got an error and cann't figure it out [\\#1351](https://github.com/nlohmann/json/issues/1351)\n- Improve number-to-string conversion [\\#1334](https://github.com/nlohmann/json/issues/1334)\n- Implicit type conversion error on MSVC [\\#1333](https://github.com/nlohmann/json/issues/1333)\n- NuGet Package [\\#1132](https://github.com/nlohmann/json/issues/1132)\n\n- Change macros to numeric\\_limits [\\#1514](https://github.com/nlohmann/json/pull/1514) ([naszta](https://github.com/naszta))\n- fix GCC 7.1.1 - 7.2.1 on CentOS [\\#1496](https://github.com/nlohmann/json/pull/1496) ([lieff](https://github.com/lieff))\n- Update Buckaroo instructions in README.md [\\#1495](https://github.com/nlohmann/json/pull/1495) ([njlr](https://github.com/njlr))\n- Fix gcc9 build error test/src/unit-allocator.cpp \\(Issue \\#1472\\) [\\#1492](https://github.com/nlohmann/json/pull/1492) ([stac47](https://github.com/stac47))\n- Fix typo in README.md [\\#1491](https://github.com/nlohmann/json/pull/1491) ([nickaein](https://github.com/nickaein))\n- Do proper endian conversions [\\#1489](https://github.com/nlohmann/json/pull/1489) ([andreas-schwab](https://github.com/andreas-schwab))\n- Fix documentation [\\#1477](https://github.com/nlohmann/json/pull/1477) ([nickaein](https://github.com/nickaein))\n- Implement contains\\(\\) member function [\\#1474](https://github.com/nlohmann/json/pull/1474) ([nickaein](https://github.com/nickaein))\n- Add operator/= and operator/ to construct a JSON pointer by appending two JSON pointers [\\#1469](https://github.com/nlohmann/json/pull/1469) ([garethsb](https://github.com/garethsb))\n- Disable Clang -Wmismatched-tags warning on tuple\\_size / tuple\\_element [\\#1468](https://github.com/nlohmann/json/pull/1468) ([past-due](https://github.com/past-due))\n- Disable installation when used as meson subproject. \\#1463 [\\#1464](https://github.com/nlohmann/json/pull/1464) ([elvisoric](https://github.com/elvisoric))\n- docs: README typo [\\#1455](https://github.com/nlohmann/json/pull/1455) ([wythe](https://github.com/wythe))\n- remove extra semicolon from readme [\\#1451](https://github.com/nlohmann/json/pull/1451) ([Afforix](https://github.com/Afforix))\n- attempt to fix \\#1445, flush buffer in serializer::dump\\_escaped in UTF8\\_REJECT case. [\\#1446](https://github.com/nlohmann/json/pull/1446) ([scinart](https://github.com/scinart))\n- Use C++11 features supported by CMake 3.1. [\\#1441](https://github.com/nlohmann/json/pull/1441) ([iwanders](https://github.com/iwanders))\n- :rotating\\_light: fixed unused variable warning [\\#1435](https://github.com/nlohmann/json/pull/1435) ([pboettch](https://github.com/pboettch))\n- allow push\\_back\\(\\) and pop\\_back\\(\\) calls on json\\_pointer [\\#1434](https://github.com/nlohmann/json/pull/1434) ([pboettch](https://github.com/pboettch))\n- Add instructions about using nlohmann/json with the conda package manager [\\#1430](https://github.com/nlohmann/json/pull/1430) ([nicoddemus](https://github.com/nicoddemus))\n- Updated year in README.md [\\#1425](https://github.com/nlohmann/json/pull/1425) ([jef](https://github.com/jef))\n- Fixed broken links in the README file [\\#1423](https://github.com/nlohmann/json/pull/1423) ([skypjack](https://github.com/skypjack))\n- Fixed broken links in the README file [\\#1420](https://github.com/nlohmann/json/pull/1420) ([skypjack](https://github.com/skypjack))\n- docs: typo in README [\\#1417](https://github.com/nlohmann/json/pull/1417) ([wythe](https://github.com/wythe))\n- Fix x64 target platform for appveyor [\\#1414](https://github.com/nlohmann/json/pull/1414) ([nickaein](https://github.com/nickaein))\n- Improve dump\\_integer performance [\\#1411](https://github.com/nlohmann/json/pull/1411) ([nickaein](https://github.com/nickaein))\n- buildsystem: relax requirement on cmake version [\\#1409](https://github.com/nlohmann/json/pull/1409) ([yann-morin-1998](https://github.com/yann-morin-1998))\n- CMake: Optional Install if Embedded [\\#1330](https://github.com/nlohmann/json/pull/1330) ([ax3l](https://github.com/ax3l))\n\n## [v3.5.0](https://github.com/nlohmann/json/releases/tag/v3.5.0) (2018-12-21)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.4.0...v3.5.0)\n\n- Copyconstructor inserts original into array with single element [\\#1397](https://github.com/nlohmann/json/issues/1397)\n- Get value without explicit typecasting [\\#1395](https://github.com/nlohmann/json/issues/1395)\n- Big file parsing [\\#1393](https://github.com/nlohmann/json/issues/1393)\n- Adding Structured Binding Support [\\#1388](https://github.com/nlohmann/json/issues/1388)\n- map\\<json::value\\_t, string\\> exhibits unexpected behavior [\\#1387](https://github.com/nlohmann/json/issues/1387)\n- Error Code Return [\\#1386](https://github.com/nlohmann/json/issues/1386)\n- using unordered\\_map as object type [\\#1385](https://github.com/nlohmann/json/issues/1385)\n- float precision [\\#1384](https://github.com/nlohmann/json/issues/1384)\n- \\[json.exception.type\\_error.316\\] invalid UTF-8 byte at index 1: 0xC3 [\\#1383](https://github.com/nlohmann/json/issues/1383)\n- Inconsistent Constructor \\(GCC vs. Clang\\) [\\#1381](https://github.com/nlohmann/json/issues/1381)\n- \\#define or || [\\#1379](https://github.com/nlohmann/json/issues/1379)\n- How to iterate inside the values ? [\\#1377](https://github.com/nlohmann/json/issues/1377)\n- items\\(\\) unable to get the elements [\\#1375](https://github.com/nlohmann/json/issues/1375)\n- conversion json to std::map doesn't work for types \\<int, double\\>  [\\#1372](https://github.com/nlohmann/json/issues/1372)\n- A minor issue in the build instructions [\\#1371](https://github.com/nlohmann/json/issues/1371)\n- Using this library without stream ? [\\#1370](https://github.com/nlohmann/json/issues/1370)\n- Writing and reading BSON data [\\#1368](https://github.com/nlohmann/json/issues/1368)\n- Retrieving array elements from object type iterator. [\\#1367](https://github.com/nlohmann/json/issues/1367)\n- json::dump\\(\\) silently crashes if items contain accented letters [\\#1365](https://github.com/nlohmann/json/issues/1365)\n- warnings in MSVC \\(2015\\) in 3.4.0 related to bool... [\\#1364](https://github.com/nlohmann/json/issues/1364)\n- Cant compile with -C++17 and beyond compiler options [\\#1362](https://github.com/nlohmann/json/issues/1362)\n- json to concrete type conversion through reference or pointer fails [\\#1361](https://github.com/nlohmann/json/issues/1361)\n- the first attributes of JSON string is misplaced  [\\#1360](https://github.com/nlohmann/json/issues/1360)\n- Copy-construct using initializer-list converts objects to arrays [\\#1359](https://github.com/nlohmann/json/issues/1359)\n- About value\\(key, default\\_value\\) and operator\\[\\]\\(key\\)  [\\#1358](https://github.com/nlohmann/json/issues/1358)\n- Problem with printing json response object [\\#1356](https://github.com/nlohmann/json/issues/1356)\n- Serializing pointer segfaults [\\#1355](https://github.com/nlohmann/json/issues/1355)\n- Read `long long int` data as a number. [\\#1354](https://github.com/nlohmann/json/issues/1354)\n- eclipse oxygen in ubuntu get\\<size\\_t\\> is ambiguous  [\\#1353](https://github.com/nlohmann/json/issues/1353)\n- Can't build on Visual Studio 2017 v15.8.9 [\\#1350](https://github.com/nlohmann/json/issues/1350)\n- cannot parse from string? [\\#1349](https://github.com/nlohmann/json/issues/1349)\n- Error: out\\_of\\_range [\\#1348](https://github.com/nlohmann/json/issues/1348)\n- expansion pattern 'CompatibleObjectType' contains no argument packs, with CUDA 10 [\\#1347](https://github.com/nlohmann/json/issues/1347)\n- Unable to update a value for a nested\\(multi-level\\) json file [\\#1344](https://github.com/nlohmann/json/issues/1344)\n- Fails to compile when std::iterator\\_traits is not SFINAE friendly. [\\#1341](https://github.com/nlohmann/json/issues/1341)\n- EOF flag not set on exhausted input streams. [\\#1340](https://github.com/nlohmann/json/issues/1340)\n- Shadowed Member in merge\\_patch [\\#1339](https://github.com/nlohmann/json/issues/1339)\n- Periods/literal dots in keys? [\\#1338](https://github.com/nlohmann/json/issues/1338)\n- Protect macro expansion of commonly defined macros [\\#1337](https://github.com/nlohmann/json/issues/1337)\n- How to validate an input before parsing? [\\#1336](https://github.com/nlohmann/json/issues/1336)\n- Non-verifying dump\\(\\) alternative for debugging/logging needed [\\#1335](https://github.com/nlohmann/json/issues/1335)\n- Json Libarary is not responding for me in c++ [\\#1332](https://github.com/nlohmann/json/issues/1332)\n- Question - how to find an object in an array [\\#1331](https://github.com/nlohmann/json/issues/1331)\n- Nesting additional data in json object [\\#1328](https://github.com/nlohmann/json/issues/1328)\n- can to\\_json\\(\\) be defined inside a class? [\\#1324](https://github.com/nlohmann/json/issues/1324)\n- CodeBlocks IDE can't find `json.hpp` header [\\#1318](https://github.com/nlohmann/json/issues/1318)\n- Change json\\_pointer to provide an iterator begin/end/etc, don't use vectors, and also enable string\\_view [\\#1312](https://github.com/nlohmann/json/issues/1312)\n- Xcode - adding it to library  [\\#1300](https://github.com/nlohmann/json/issues/1300)\n- unicode: accept char16\\_t, char32\\_t sequences [\\#1298](https://github.com/nlohmann/json/issues/1298)\n- unicode: char16\\_t\\* is compiler error, but char16\\_t\\[\\] is accepted [\\#1297](https://github.com/nlohmann/json/issues/1297)\n- Dockerfile Project Help Needed [\\#1296](https://github.com/nlohmann/json/issues/1296)\n- Comparisons between large unsigned and negative signed integers [\\#1295](https://github.com/nlohmann/json/issues/1295)\n- CMake alias to `nlohmann::json` [\\#1291](https://github.com/nlohmann/json/issues/1291)\n- Release zips without tests [\\#1285](https://github.com/nlohmann/json/issues/1285)\n- separate object\\_t::key\\_type from basic\\_json::key\\_type, and use an allocator which returns object\\_t::key\\_type [\\#1274](https://github.com/nlohmann/json/issues/1274)\n- Is there a nice way to associate external values with json elements? [\\#1256](https://github.com/nlohmann/json/issues/1256)\n- Delete by json\\_pointer [\\#1248](https://github.com/nlohmann/json/issues/1248)\n- Expose lexer, as a StAX parser [\\#1219](https://github.com/nlohmann/json/issues/1219)\n- Subclassing json\\(\\) & error on recursive load [\\#1201](https://github.com/nlohmann/json/issues/1201)\n- Check value for existence by json\\_pointer [\\#1194](https://github.com/nlohmann/json/issues/1194)\n\n- Feature/add file input adapter [\\#1392](https://github.com/nlohmann/json/pull/1392) ([dumarjo](https://github.com/dumarjo))\n-  Added Support for Structured Bindings  [\\#1391](https://github.com/nlohmann/json/pull/1391) ([pratikpc](https://github.com/pratikpc))\n- Link to issue \\#958 broken [\\#1382](https://github.com/nlohmann/json/pull/1382) ([kjpus](https://github.com/kjpus))\n- readme: fix typo [\\#1380](https://github.com/nlohmann/json/pull/1380) ([manu-chroma](https://github.com/manu-chroma))\n- recommend using explicit from JSON conversions [\\#1363](https://github.com/nlohmann/json/pull/1363) ([theodelrieu](https://github.com/theodelrieu))\n- Fix merge\\_patch shadow warning [\\#1346](https://github.com/nlohmann/json/pull/1346) ([ax3l](https://github.com/ax3l))\n- Allow installation via Meson [\\#1345](https://github.com/nlohmann/json/pull/1345) ([mpoquet](https://github.com/mpoquet))\n- Set eofbit on exhausted input stream. [\\#1343](https://github.com/nlohmann/json/pull/1343) ([mefyl](https://github.com/mefyl))\n- Add a SFINAE friendly iterator\\_traits and use that instead. [\\#1342](https://github.com/nlohmann/json/pull/1342) ([dgavedissian](https://github.com/dgavedissian))\n- Fix EOL Whitespaces & CMake Spelling [\\#1329](https://github.com/nlohmann/json/pull/1329) ([ax3l](https://github.com/ax3l))\n\n## [v3.4.0](https://github.com/nlohmann/json/releases/tag/v3.4.0) (2018-10-30)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.3.0...v3.4.0)\n\n- Big uint64\\_t values are serialized wrong [\\#1327](https://github.com/nlohmann/json/issues/1327)\n- \\[Question\\] Efficient check for equivalency? [\\#1325](https://github.com/nlohmann/json/issues/1325)\n- Can't use ifstream and .clear\\(\\) [\\#1321](https://github.com/nlohmann/json/issues/1321)\n- \\[Warning\\] -Wparentheses on line 555 on single\\_include [\\#1319](https://github.com/nlohmann/json/issues/1319)\n- Compilation error using at and find with enum struct [\\#1316](https://github.com/nlohmann/json/issues/1316)\n- Parsing JSON from a web address [\\#1311](https://github.com/nlohmann/json/issues/1311)\n- How to convert JSON to Struct with embeded subject [\\#1310](https://github.com/nlohmann/json/issues/1310)\n- Null safety/coalescing function? [\\#1309](https://github.com/nlohmann/json/issues/1309)\n- Building fails using single include file: json.hpp [\\#1308](https://github.com/nlohmann/json/issues/1308)\n- json::parse\\(std::string\\) Exception inside packaged Lib [\\#1306](https://github.com/nlohmann/json/issues/1306)\n- Problem in Dockerfile with installation of library [\\#1304](https://github.com/nlohmann/json/issues/1304)\n- compile error in from\\_json converting to container with std::pair [\\#1299](https://github.com/nlohmann/json/issues/1299)\n- Json that I am trying to parse, and I am lost Structure Array below top level [\\#1293](https://github.com/nlohmann/json/issues/1293)\n- Serializing std::variant causes stack overflow [\\#1292](https://github.com/nlohmann/json/issues/1292)\n- How do I go about customising from\\_json to support \\_\\_int128\\_t/\\_\\_uint128\\_t? [\\#1290](https://github.com/nlohmann/json/issues/1290)\n- merge\\_patch: inconsistent behaviour merging empty sub-object [\\#1289](https://github.com/nlohmann/json/issues/1289)\n- Buffer over/underrun using UBJson? [\\#1288](https://github.com/nlohmann/json/issues/1288)\n- Enable the latest C++ standard with Visual Studio [\\#1287](https://github.com/nlohmann/json/issues/1287)\n- truncation of constant value in to\\_cbor\\(\\) [\\#1286](https://github.com/nlohmann/json/issues/1286)\n- eosio.wasmsdk error [\\#1284](https://github.com/nlohmann/json/issues/1284)\n- use the same interface for writing arrays and non-arrays [\\#1283](https://github.com/nlohmann/json/issues/1283)\n- How to read json file with optional  entries and entries with different types [\\#1281](https://github.com/nlohmann/json/issues/1281)\n- merge result not as espected [\\#1279](https://github.com/nlohmann/json/issues/1279)\n- how to get only \"name\" from below json [\\#1278](https://github.com/nlohmann/json/issues/1278)\n- syntax error  on right json string [\\#1276](https://github.com/nlohmann/json/issues/1276)\n- Parsing JSON Array where members have no key, using custom types [\\#1267](https://github.com/nlohmann/json/issues/1267)\n- I get a json exception periodically from json::parse for the same json  [\\#1263](https://github.com/nlohmann/json/issues/1263)\n- GCC 8.2.1. Compilation error: invalid conversion from... [\\#1246](https://github.com/nlohmann/json/issues/1246)\n- BSON support [\\#1244](https://github.com/nlohmann/json/issues/1244)\n- enum to json mapping [\\#1208](https://github.com/nlohmann/json/issues/1208)\n- Soften the landing when dumping non-UTF8 strings \\(type\\_error.316 exception\\) [\\#1198](https://github.com/nlohmann/json/issues/1198)\n\n- Add macro to define enum/JSON mapping [\\#1323](https://github.com/nlohmann/json/pull/1323) ([nlohmann](https://github.com/nlohmann))\n- Add BSON support [\\#1320](https://github.com/nlohmann/json/pull/1320) ([nlohmann](https://github.com/nlohmann))\n- Properly convert constants to CharType [\\#1315](https://github.com/nlohmann/json/pull/1315) ([nlohmann](https://github.com/nlohmann))\n- Allow to set error handler for decoding errors [\\#1314](https://github.com/nlohmann/json/pull/1314) ([nlohmann](https://github.com/nlohmann))\n- Add Meson related info to README [\\#1305](https://github.com/nlohmann/json/pull/1305) ([koponomarenko](https://github.com/koponomarenko))\n- Improve diagnostic messages for binary formats [\\#1303](https://github.com/nlohmann/json/pull/1303) ([nlohmann](https://github.com/nlohmann))\n- add new is\\_constructible\\_\\* traits used in from\\_json [\\#1301](https://github.com/nlohmann/json/pull/1301) ([theodelrieu](https://github.com/theodelrieu))\n- add constraints for variadic json\\_ref constructors [\\#1294](https://github.com/nlohmann/json/pull/1294) ([theodelrieu](https://github.com/theodelrieu))\n- Improve diagnostic messages [\\#1282](https://github.com/nlohmann/json/pull/1282) ([nlohmann](https://github.com/nlohmann))\n- Removed linter warnings [\\#1280](https://github.com/nlohmann/json/pull/1280) ([nlohmann](https://github.com/nlohmann))\n- Thirdparty benchmark: Fix Clang detection. [\\#1277](https://github.com/nlohmann/json/pull/1277) ([Lord-Kamina](https://github.com/Lord-Kamina))\n\n## [v3.3.0](https://github.com/nlohmann/json/releases/tag/v3.3.0) (2018-10-05)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/3.3.0...v3.3.0)\n\n## [3.3.0](https://github.com/nlohmann/json/releases/tag/3.3.0) (2018-10-05)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.2.0...3.3.0)\n\n- When key is not found print the key name into error too [\\#1273](https://github.com/nlohmann/json/issues/1273)\n- Visual Studio 2017 15.8.5 \"conditional expression is constant\" warning on Line 1851 in json.hpp [\\#1268](https://github.com/nlohmann/json/issues/1268)\n- how can we get this working on WSL? [\\#1264](https://github.com/nlohmann/json/issues/1264)\n- Help needed [\\#1259](https://github.com/nlohmann/json/issues/1259)\n- A way to get to a JSON values \"key\" [\\#1258](https://github.com/nlohmann/json/issues/1258)\n- While compiling got 76 errors [\\#1255](https://github.com/nlohmann/json/issues/1255)\n- Two blackslashes on json output file [\\#1253](https://github.com/nlohmann/json/issues/1253)\n- Including nlohmann the badwrong way. [\\#1250](https://github.com/nlohmann/json/issues/1250)\n- how to build with clang? [\\#1247](https://github.com/nlohmann/json/issues/1247)\n- Cmake target\\_link\\_libraries unable to find nlohmann\\_json since version 3.2.0 [\\#1243](https://github.com/nlohmann/json/issues/1243)\n- \\[Question\\] Access to end\\(\\) iterator reference [\\#1242](https://github.com/nlohmann/json/issues/1242)\n- Parsing different json format [\\#1241](https://github.com/nlohmann/json/issues/1241)\n- Parsing Multiple JSON Files [\\#1240](https://github.com/nlohmann/json/issues/1240)\n- Doesn't compile under C++17 [\\#1239](https://github.com/nlohmann/json/issues/1239)\n- Conversion operator for nlohmann::json is not SFINAE friendly [\\#1237](https://github.com/nlohmann/json/issues/1237)\n- Custom deserialization of number\\_float\\_t [\\#1236](https://github.com/nlohmann/json/issues/1236)\n- deprecated-declarations warnings when compiling tests with GCC 8.2.1. [\\#1233](https://github.com/nlohmann/json/issues/1233)\n- Incomplete type with json\\_fwd.hpp [\\#1232](https://github.com/nlohmann/json/issues/1232)\n- Parse Error [\\#1229](https://github.com/nlohmann/json/issues/1229)\n- json::get function with argument [\\#1227](https://github.com/nlohmann/json/issues/1227)\n- questions regarding from\\_json [\\#1226](https://github.com/nlohmann/json/issues/1226)\n- Lambda in unevaluated context [\\#1225](https://github.com/nlohmann/json/issues/1225)\n- NLohmann doesn't compile when enabling strict warning policies [\\#1224](https://github.com/nlohmann/json/issues/1224)\n- Creating array of objects [\\#1223](https://github.com/nlohmann/json/issues/1223)\n- Somewhat unhelpful error message \"cannot use operator\\[\\] with object\" [\\#1220](https://github.com/nlohmann/json/issues/1220)\n- single\\_include json.hpp [\\#1218](https://github.com/nlohmann/json/issues/1218)\n- Maps with enum class keys which are convertible to JSON strings should be converted to JSON dictionaries [\\#1217](https://github.com/nlohmann/json/issues/1217)\n- Adding JSON Array to the Array  [\\#1216](https://github.com/nlohmann/json/issues/1216)\n- Best way to output a vector of a given type to json [\\#1215](https://github.com/nlohmann/json/issues/1215)\n- compiler warning: double definition of macro JSON\\_INTERNAL\\_CATCH  [\\#1213](https://github.com/nlohmann/json/issues/1213)\n- Compilation error when using MOCK\\_METHOD1 from GMock and nlohmann::json [\\#1212](https://github.com/nlohmann/json/issues/1212)\n- Issues parsing a previously encoded binary \\(non-UTF8\\) string. [\\#1211](https://github.com/nlohmann/json/issues/1211)\n- Yet another ordering question: char \\* and parse\\(\\) [\\#1209](https://github.com/nlohmann/json/issues/1209)\n- Error using gcc 8.1.0 on Ubuntu 14.04 [\\#1207](https://github.com/nlohmann/json/issues/1207)\n- \"type must be string, but is \" std::string\\(j.type\\_name\\(\\)  [\\#1206](https://github.com/nlohmann/json/issues/1206)\n- Returning empty json object from a function of type const json& ? [\\#1205](https://github.com/nlohmann/json/issues/1205)\n- VS2017 compiler suggests using constexpr if [\\#1204](https://github.com/nlohmann/json/issues/1204)\n- Template instatiation error on compiling [\\#1203](https://github.com/nlohmann/json/issues/1203)\n- BUG - json dump field with unicode -\\> array of ints \\(instead of string\\) [\\#1197](https://github.com/nlohmann/json/issues/1197)\n- Compile error using Code::Blocks // mingw-w64 GCC 8.1.0 - \"Incomplete Type\" [\\#1193](https://github.com/nlohmann/json/issues/1193)\n- SEGFAULT on arm target  [\\#1190](https://github.com/nlohmann/json/issues/1190)\n- Compiler crash with old Clang [\\#1179](https://github.com/nlohmann/json/issues/1179)\n- Custom Precision on floating point numbers [\\#1170](https://github.com/nlohmann/json/issues/1170)\n- Can we have a json\\_view class like std::string\\_view? [\\#1158](https://github.com/nlohmann/json/issues/1158)\n- improve error handling [\\#1152](https://github.com/nlohmann/json/issues/1152)\n- We should remove static\\_asserts [\\#960](https://github.com/nlohmann/json/issues/960)\n\n- Fix warning C4127: conditional expression is constant [\\#1272](https://github.com/nlohmann/json/pull/1272) ([antonioborondo](https://github.com/antonioborondo))\n- Turn off additional deprecation warnings for GCC. [\\#1271](https://github.com/nlohmann/json/pull/1271) ([chuckatkins](https://github.com/chuckatkins))\n- docs: Add additional CMake documentation [\\#1270](https://github.com/nlohmann/json/pull/1270) ([chuckatkins](https://github.com/chuckatkins))\n- unit-testsuites.cpp: fix hangup if file not found [\\#1262](https://github.com/nlohmann/json/pull/1262) ([knilch0r](https://github.com/knilch0r))\n- Fix broken cmake imported target alias [\\#1260](https://github.com/nlohmann/json/pull/1260) ([chuckatkins](https://github.com/chuckatkins))\n- GCC 48 [\\#1257](https://github.com/nlohmann/json/pull/1257) ([henryiii](https://github.com/henryiii))\n- Add version and license to meson.build [\\#1252](https://github.com/nlohmann/json/pull/1252) ([koponomarenko](https://github.com/koponomarenko))\n- \\#1179 Reordered the code. It seems to stop clang 3.4.2 in RHEL 7 from crash… [\\#1249](https://github.com/nlohmann/json/pull/1249) ([LEgregius](https://github.com/LEgregius))\n- Use a version check to provide backwards comatible CMake imported target names [\\#1245](https://github.com/nlohmann/json/pull/1245) ([chuckatkins](https://github.com/chuckatkins))\n- Fix issue \\#1237 [\\#1238](https://github.com/nlohmann/json/pull/1238) ([theodelrieu](https://github.com/theodelrieu))\n- Add a get overload taking a parameter. [\\#1231](https://github.com/nlohmann/json/pull/1231) ([theodelrieu](https://github.com/theodelrieu))\n- Move lambda out of unevaluated context [\\#1230](https://github.com/nlohmann/json/pull/1230) ([mandreyel](https://github.com/mandreyel))\n- Remove static asserts [\\#1228](https://github.com/nlohmann/json/pull/1228) ([theodelrieu](https://github.com/theodelrieu))\n- Better error 305 [\\#1221](https://github.com/nlohmann/json/pull/1221) ([rivertam](https://github.com/rivertam))\n- Fix \\#1213 [\\#1214](https://github.com/nlohmann/json/pull/1214) ([simnalamburt](https://github.com/simnalamburt))\n- Export package to allow builds without installing [\\#1202](https://github.com/nlohmann/json/pull/1202) ([dennisfischer](https://github.com/dennisfischer))\n\n## [v3.2.0](https://github.com/nlohmann/json/releases/tag/v3.2.0) (2018-08-20)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/3.2.0...v3.2.0)\n\n## [3.2.0](https://github.com/nlohmann/json/releases/tag/3.2.0) (2018-08-20)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.1.2...3.2.0)\n\n- Am I doing this wrong? Getting an empty string [\\#1199](https://github.com/nlohmann/json/issues/1199)\n- Incompatible Pointer Type [\\#1196](https://github.com/nlohmann/json/issues/1196)\n- json.exception.type\\_error.316 [\\#1195](https://github.com/nlohmann/json/issues/1195)\n- Strange warnings in Code::Blocks 17.12, GNU GCC [\\#1192](https://github.com/nlohmann/json/issues/1192)\n- \\[Question\\] Current place in code to change floating point resolution [\\#1191](https://github.com/nlohmann/json/issues/1191)\n- Add key name when throwing type error [\\#1189](https://github.com/nlohmann/json/issues/1189)\n- Not able to include in visual studio code? [\\#1188](https://github.com/nlohmann/json/issues/1188)\n- Get an Index or row number of an element [\\#1186](https://github.com/nlohmann/json/issues/1186)\n- Difference between `merge_patch` and `update` [\\#1183](https://github.com/nlohmann/json/issues/1183)\n- Is there a way to get an element from a JSON without throwing an exception on failure? [\\#1182](https://github.com/nlohmann/json/issues/1182)\n- to\\_string? [\\#1181](https://github.com/nlohmann/json/issues/1181)\n- How to cache a json object's pointer into a map? [\\#1180](https://github.com/nlohmann/json/issues/1180)\n- Can this library work within a Qt project for Android using Qt Creator? [\\#1178](https://github.com/nlohmann/json/issues/1178)\n- How to get all keys of one object? [\\#1177](https://github.com/nlohmann/json/issues/1177)\n- How can I only parse the first level and get the value as string? [\\#1175](https://github.com/nlohmann/json/issues/1175)\n- I have a query regarding nlohmann::basic\\_json::basic\\_json [\\#1174](https://github.com/nlohmann/json/issues/1174)\n- unordered\\_map with vectors won't convert to json? [\\#1173](https://github.com/nlohmann/json/issues/1173)\n- return json objects from functions [\\#1172](https://github.com/nlohmann/json/issues/1172)\n- Problem when exporting to CBOR [\\#1171](https://github.com/nlohmann/json/issues/1171)\n- Roundtripping null to nullptr does not work [\\#1169](https://github.com/nlohmann/json/issues/1169)\n- MSVC fails to compile std::swap specialization for nlohmann::json [\\#1168](https://github.com/nlohmann/json/issues/1168)\n- Unexpected behaviour of is\\_null - Part II [\\#1167](https://github.com/nlohmann/json/issues/1167)\n- Floating point imprecision [\\#1166](https://github.com/nlohmann/json/issues/1166)\n- Combine json objects into one? [\\#1165](https://github.com/nlohmann/json/issues/1165)\n- Is there any way to know if the object has changed? [\\#1164](https://github.com/nlohmann/json/issues/1164)\n- Value throws on null string [\\#1163](https://github.com/nlohmann/json/issues/1163)\n- Weird template issue in large project [\\#1162](https://github.com/nlohmann/json/issues/1162)\n- \\_json returns a different result vs ::parse [\\#1161](https://github.com/nlohmann/json/issues/1161)\n- Showing difference between two json objects [\\#1160](https://github.com/nlohmann/json/issues/1160)\n- no instance of overloaded function \"std::swap\" matches the specified type\t [\\#1159](https://github.com/nlohmann/json/issues/1159)\n- resize\\(...\\)? [\\#1157](https://github.com/nlohmann/json/issues/1157)\n- Issue with struct nested in class' to\\_json [\\#1155](https://github.com/nlohmann/json/issues/1155)\n- Deserialize std::map with std::nan [\\#1154](https://github.com/nlohmann/json/issues/1154)\n- Parse throwing errors [\\#1149](https://github.com/nlohmann/json/issues/1149)\n- cocoapod integration [\\#1148](https://github.com/nlohmann/json/issues/1148)\n- wstring parsing [\\#1147](https://github.com/nlohmann/json/issues/1147)\n- Is it possible to dump a two-dimensional array to \"\\[\\[null\\],\\[1,2,3\\]\\]\"? [\\#1146](https://github.com/nlohmann/json/issues/1146)\n- Want to write a class member variable and a struct variable \\( this structure is inside the class\\) to the json file [\\#1145](https://github.com/nlohmann/json/issues/1145)\n- Does json support converting an instance of a struct into json string? [\\#1143](https://github.com/nlohmann/json/issues/1143)\n- \\#Most efficient way to search for child parameters \\(recursive find?\\) [\\#1141](https://github.com/nlohmann/json/issues/1141)\n-  could not find to\\_json\\(\\) method in T's namespace [\\#1140](https://github.com/nlohmann/json/issues/1140)\n- chars get treated as JSON numbers not JSON strings [\\#1139](https://github.com/nlohmann/json/issues/1139)\n- How do I count number of objects in array? [\\#1137](https://github.com/nlohmann/json/issues/1137)\n- Serializing a vector of classes? [\\#1136](https://github.com/nlohmann/json/issues/1136)\n- Compile error. Unable convert form nullptr to nullptr&& [\\#1135](https://github.com/nlohmann/json/issues/1135)\n- std::unordered\\_map in struct, serialization [\\#1133](https://github.com/nlohmann/json/issues/1133)\n- dump\\(\\) can't handle umlauts [\\#1131](https://github.com/nlohmann/json/issues/1131)\n- Add a way to get a key reference from the iterator [\\#1127](https://github.com/nlohmann/json/issues/1127)\n- can't not parse \"\\\\“ string [\\#1123](https://github.com/nlohmann/json/issues/1123)\n-  if  json file  contain Internationalization   chars   ,  get  exception [\\#1122](https://github.com/nlohmann/json/issues/1122)\n- How to use a json::iterator dereferenced value in code? [\\#1120](https://github.com/nlohmann/json/issues/1120)\n- Disable implicit conversions from json to std::initializer\\_list\\<T\\> for any T [\\#1118](https://github.com/nlohmann/json/issues/1118)\n- Implicit conversions to complex types can lead to surprising and confusing errors [\\#1116](https://github.com/nlohmann/json/issues/1116)\n- How can I write from\\_json for a complex datatype that is not default constructible? [\\#1115](https://github.com/nlohmann/json/issues/1115)\n- Compile error in VS2015 when compiling unit-conversions.cpp [\\#1114](https://github.com/nlohmann/json/issues/1114)\n- ADL Serializer for std::any / boost::any [\\#1113](https://github.com/nlohmann/json/issues/1113)\n- Unexpected behaviour of is\\_null [\\#1112](https://github.com/nlohmann/json/issues/1112)\n- How to resolve  \" undefined reference to `std::\\_\\_throw\\_bad\\_cast\\(\\)'\" [\\#1111](https://github.com/nlohmann/json/issues/1111)\n- cannot compile on ubuntu 18.04 and 16.04 [\\#1110](https://github.com/nlohmann/json/issues/1110)\n- JSON representation for floating point values has too many digits [\\#1109](https://github.com/nlohmann/json/issues/1109)\n- Not working for classes containing \"\\_declspec\\(dllimport\\)\" in their declaration [\\#1108](https://github.com/nlohmann/json/issues/1108)\n- Get keys from json object [\\#1107](https://github.com/nlohmann/json/issues/1107)\n- Cannot deserialize types using std::ratio [\\#1105](https://github.com/nlohmann/json/issues/1105)\n-  i want to learn json [\\#1104](https://github.com/nlohmann/json/issues/1104)\n- Type checking during compile [\\#1103](https://github.com/nlohmann/json/issues/1103)\n- Iterate through sub items [\\#1102](https://github.com/nlohmann/json/issues/1102)\n- cppcheck failing for version 3.1.2 [\\#1101](https://github.com/nlohmann/json/issues/1101)\n- Deserializing std::map [\\#1100](https://github.com/nlohmann/json/issues/1100)\n- accessing key by reference [\\#1098](https://github.com/nlohmann/json/issues/1098)\n- clang 3.8.0 croaks while trying to compile with debug symbols [\\#1097](https://github.com/nlohmann/json/issues/1097)\n- Serialize a list of class objects with json [\\#1096](https://github.com/nlohmann/json/issues/1096)\n- Small question [\\#1094](https://github.com/nlohmann/json/issues/1094)\n- Upgrading to 3.x: to\\_/from\\_json with enum class [\\#1093](https://github.com/nlohmann/json/issues/1093)\n- Q: few questions about json construction [\\#1092](https://github.com/nlohmann/json/issues/1092)\n- general crayCC compilation failure [\\#1091](https://github.com/nlohmann/json/issues/1091)\n- Merge Patch clears original data [\\#1090](https://github.com/nlohmann/json/issues/1090)\n- \\[Question\\] how to use nlohmann/json in c++? [\\#1088](https://github.com/nlohmann/json/issues/1088)\n- C++17 decomposition declaration support [\\#1087](https://github.com/nlohmann/json/issues/1087)\n- \\[Question\\] Access multi-level json objects [\\#1086](https://github.com/nlohmann/json/issues/1086)\n- Serializing vector [\\#1085](https://github.com/nlohmann/json/issues/1085)\n- update nested value in multi hierarchy json object [\\#1084](https://github.com/nlohmann/json/issues/1084)\n- Overriding default values? [\\#1083](https://github.com/nlohmann/json/issues/1083)\n- detail namespace collision with Cereal? [\\#1082](https://github.com/nlohmann/json/issues/1082)\n- Error using json.dump\\(\\); [\\#1081](https://github.com/nlohmann/json/issues/1081)\n- Consuming TCP Stream [\\#1080](https://github.com/nlohmann/json/issues/1080)\n- Compilation error with strong typed enums in map in combination with namespaces [\\#1079](https://github.com/nlohmann/json/issues/1079)\n- cassert error [\\#1076](https://github.com/nlohmann/json/issues/1076)\n- Valid json data not being parsed [\\#1075](https://github.com/nlohmann/json/issues/1075)\n- Feature request :: Better testing for key existance without try/catch [\\#1074](https://github.com/nlohmann/json/issues/1074)\n- Hi, I have input like a.b.c and want to convert it to \\\"a\\\"{\\\"b\\\": \\\"c\\\"} form. Any suggestions how do I do this? Thanks. [\\#1073](https://github.com/nlohmann/json/issues/1073)\n- ADL deserializer not picked up for non default-constructible type [\\#1072](https://github.com/nlohmann/json/issues/1072)\n- Deserializing std::array doesn't compiler \\(no insert\\(\\)\\) [\\#1071](https://github.com/nlohmann/json/issues/1071)\n- Serializing OpenCV Mat problem [\\#1070](https://github.com/nlohmann/json/issues/1070)\n- Compilation error with ICPC compiler [\\#1068](https://github.com/nlohmann/json/issues/1068)\n- Not existing value, crash [\\#1065](https://github.com/nlohmann/json/issues/1065)\n- cyryllic symbols [\\#1064](https://github.com/nlohmann/json/issues/1064)\n- newbie usage question [\\#1063](https://github.com/nlohmann/json/issues/1063)\n- Trying j\\[\"strTest\"\\] = \"%A\" produces \"strTest\": \"-0X1.CCCCCCCCCCCCCP+205\" [\\#1062](https://github.com/nlohmann/json/issues/1062)\n- convert json value to std::string??? [\\#1061](https://github.com/nlohmann/json/issues/1061)\n- Commented out test cases, should they be removed? [\\#1060](https://github.com/nlohmann/json/issues/1060)\n- different behaviour between clang and gcc with braced initialization [\\#1059](https://github.com/nlohmann/json/issues/1059)\n- json array:  initialize with prescribed size and `resize` method. [\\#1057](https://github.com/nlohmann/json/issues/1057)\n- Is it possible to use exceptions istead of assertions? [\\#1056](https://github.com/nlohmann/json/issues/1056)\n- when using assign operator in with json object a static assertion fails.. [\\#1055](https://github.com/nlohmann/json/issues/1055)\n- Iterate over leafs of a JSON data structure: enrich the JSON pointer API [\\#1054](https://github.com/nlohmann/json/issues/1054)\n- \\[Feature request\\] Access by path [\\#1053](https://github.com/nlohmann/json/issues/1053)\n- document that implicit js -\\> primitive conversion does not work for std::string::value\\_type and why [\\#1052](https://github.com/nlohmann/json/issues/1052)\n- error: ‘BasicJsonType’ in namespace ‘::’ does not name a type [\\#1051](https://github.com/nlohmann/json/issues/1051)\n- Destructor is called when filling object through assignement [\\#1050](https://github.com/nlohmann/json/issues/1050)\n- Is this thing thread safe for reads? [\\#1049](https://github.com/nlohmann/json/issues/1049)\n- clang-tidy: Call to virtual function during construction  [\\#1046](https://github.com/nlohmann/json/issues/1046)\n- Using STL algorithms with JSON containers with expected results? [\\#1045](https://github.com/nlohmann/json/issues/1045)\n- Usage with gtest/gmock not working as expected [\\#1044](https://github.com/nlohmann/json/issues/1044)\n- Consequences of from\\_json / to\\_json being in namespace of data struct. [\\#1042](https://github.com/nlohmann/json/issues/1042)\n- const\\_reference operator\\[\\]\\(const typename object\\_t::key\\_type& key\\) const throw instead of assert [\\#1039](https://github.com/nlohmann/json/issues/1039)\n- Trying to retrieve data from nested objects [\\#1038](https://github.com/nlohmann/json/issues/1038)\n- Direct download link for json\\_fwd.hpp? [\\#1037](https://github.com/nlohmann/json/issues/1037)\n- I know the library supports UTF-8, but failed to dump the value [\\#1036](https://github.com/nlohmann/json/issues/1036)\n- Putting a Vec3-like vector into a json object [\\#1035](https://github.com/nlohmann/json/issues/1035)\n- Ternary operator crash [\\#1034](https://github.com/nlohmann/json/issues/1034)\n- Issued with Clion Inspection Resolution since 2018.1 [\\#1033](https://github.com/nlohmann/json/issues/1033)\n- Some testcases fail and one never finishes [\\#1032](https://github.com/nlohmann/json/issues/1032)\n- Can this class work with wchar\\_t / std::wstring? [\\#1031](https://github.com/nlohmann/json/issues/1031)\n- Makefile: Valgrind flags have no effect [\\#1030](https://github.com/nlohmann/json/issues/1030)\n- 「==」 Should be 「\\>」 [\\#1029](https://github.com/nlohmann/json/issues/1029)\n- HOCON reader? [\\#1027](https://github.com/nlohmann/json/issues/1027)\n- add json string in previous string?? [\\#1025](https://github.com/nlohmann/json/issues/1025)\n- RFC: fluent parsing interface [\\#1023](https://github.com/nlohmann/json/issues/1023)\n- Does it support chinese character? [\\#1022](https://github.com/nlohmann/json/issues/1022)\n- to/from\\_msgpack only works with standard typization [\\#1021](https://github.com/nlohmann/json/issues/1021)\n- Build failure using latest clang and GCC compilers [\\#1020](https://github.com/nlohmann/json/issues/1020)\n- can two json objects be concatenated? [\\#1019](https://github.com/nlohmann/json/issues/1019)\n- Erase by integer index [\\#1018](https://github.com/nlohmann/json/issues/1018)\n- Function find overload taking a json\\_pointer [\\#1017](https://github.com/nlohmann/json/issues/1017)\n- I think should implement an parser function [\\#1016](https://github.com/nlohmann/json/issues/1016)\n- Readme gif [\\#1015](https://github.com/nlohmann/json/issues/1015)\n- Python bindings [\\#1014](https://github.com/nlohmann/json/issues/1014)\n- how to add two json string in single object?? [\\#1012](https://github.com/nlohmann/json/issues/1012)\n- how to serialize class Object \\(convert data in object into json\\)?? [\\#1011](https://github.com/nlohmann/json/issues/1011)\n- Enable forward declaration of json by making json a class instead of a using declaration [\\#997](https://github.com/nlohmann/json/issues/997)\n- compilation error while using intel c++ compiler 2018 [\\#994](https://github.com/nlohmann/json/issues/994)\n- How to create a json variable? [\\#990](https://github.com/nlohmann/json/issues/990)\n- istream \\>\\> json  --- 1st character skipped in stream [\\#976](https://github.com/nlohmann/json/issues/976)\n- Add a SAX parser [\\#971](https://github.com/nlohmann/json/issues/971)\n- How to solve large json file? [\\#927](https://github.com/nlohmann/json/issues/927)\n- json\\_pointer public push\\_back, pop\\_back [\\#837](https://github.com/nlohmann/json/issues/837)\n- Using input\\_adapter in a slightly unexpected way [\\#834](https://github.com/nlohmann/json/issues/834)\n\n- Fix -Wno-sometimes-uninitialized by initializing \"result\" in parse\\_sax [\\#1200](https://github.com/nlohmann/json/pull/1200) ([thyu](https://github.com/thyu))\n- \\[RFC\\] Introduce a new macro function: JSON\\_INTERNAL\\_CATCH [\\#1187](https://github.com/nlohmann/json/pull/1187) ([simnalamburt](https://github.com/simnalamburt))\n- Fix unit tests that were silently skipped or crashed \\(depending on the compiler\\) [\\#1176](https://github.com/nlohmann/json/pull/1176) ([grembo](https://github.com/grembo))\n- Refactor/no virtual sax [\\#1153](https://github.com/nlohmann/json/pull/1153) ([theodelrieu](https://github.com/theodelrieu))\n- Fixed compiler error in VS 2015 for debug mode [\\#1151](https://github.com/nlohmann/json/pull/1151) ([sonulohani](https://github.com/sonulohani))\n- Fix links to cppreference named requirements \\(formerly concepts\\) [\\#1144](https://github.com/nlohmann/json/pull/1144) ([jrakow](https://github.com/jrakow))\n- meson: fix include directory [\\#1142](https://github.com/nlohmann/json/pull/1142) ([jrakow](https://github.com/jrakow))\n- Feature/unordered map conversion [\\#1138](https://github.com/nlohmann/json/pull/1138) ([theodelrieu](https://github.com/theodelrieu))\n- fixed compile error for \\#1045 [\\#1134](https://github.com/nlohmann/json/pull/1134) ([Daniel599](https://github.com/Daniel599))\n-  test \\(non\\)equality for alt\\_string implementation  [\\#1130](https://github.com/nlohmann/json/pull/1130) ([agrianius](https://github.com/agrianius))\n- remove stringstream dependency [\\#1117](https://github.com/nlohmann/json/pull/1117) ([TinyTinni](https://github.com/TinyTinni))\n- Provide a from\\_json overload for std::map [\\#1089](https://github.com/nlohmann/json/pull/1089) ([theodelrieu](https://github.com/theodelrieu))\n- fix typo in README [\\#1078](https://github.com/nlohmann/json/pull/1078) ([martin-mfg](https://github.com/martin-mfg))\n- Fix typo [\\#1058](https://github.com/nlohmann/json/pull/1058) ([dns13](https://github.com/dns13))\n- Misc cmake packaging enhancements [\\#1048](https://github.com/nlohmann/json/pull/1048) ([chuckatkins](https://github.com/chuckatkins))\n- Fixed incorrect LLVM version number in README [\\#1047](https://github.com/nlohmann/json/pull/1047) ([jammehcow](https://github.com/jammehcow))\n- Fix trivial typo in comment. [\\#1043](https://github.com/nlohmann/json/pull/1043) ([coryan](https://github.com/coryan))\n- Package Manager: Spack [\\#1041](https://github.com/nlohmann/json/pull/1041) ([ax3l](https://github.com/ax3l))\n- CMake: 3.8+ is Sufficient [\\#1040](https://github.com/nlohmann/json/pull/1040) ([ax3l](https://github.com/ax3l))\n- Added support for string\\_view in C++17 [\\#1028](https://github.com/nlohmann/json/pull/1028) ([gracicot](https://github.com/gracicot))\n- Added public target\\_compile\\_features for auto and constexpr [\\#1026](https://github.com/nlohmann/json/pull/1026) ([ktonon](https://github.com/ktonon))\n\n## [v3.1.2](https://github.com/nlohmann/json/releases/tag/v3.1.2) (2018-03-14)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/3.1.2...v3.1.2)\n\n## [3.1.2](https://github.com/nlohmann/json/releases/tag/3.1.2) (2018-03-14)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.1.1...3.1.2)\n\n- STL containers are always serialized to a nested array like \\[\\[1,2,3\\]\\] [\\#1013](https://github.com/nlohmann/json/issues/1013)\n- The library doesn't want to insert an unordered\\_map [\\#1010](https://github.com/nlohmann/json/issues/1010)\n- Convert Json to uint8\\_t [\\#1008](https://github.com/nlohmann/json/issues/1008)\n- How to compare two JSON objects? [\\#1007](https://github.com/nlohmann/json/issues/1007)\n- Syntax checking [\\#1003](https://github.com/nlohmann/json/issues/1003)\n- more than one operator '=' matches these operands [\\#1002](https://github.com/nlohmann/json/issues/1002)\n- How to check if key existed  [\\#1000](https://github.com/nlohmann/json/issues/1000)\n- nlohmann::json::parse exhaust memory in go binding [\\#999](https://github.com/nlohmann/json/issues/999)\n- Range-based iteration over a non-array object [\\#998](https://github.com/nlohmann/json/issues/998)\n- get\\<T\\> for types that are not default constructible [\\#996](https://github.com/nlohmann/json/issues/996)\n- Prevent Null values to appear in .dump\\(\\) [\\#995](https://github.com/nlohmann/json/issues/995)\n- number parsing [\\#993](https://github.com/nlohmann/json/issues/993)\n- C2664 \\(C++/CLR\\) cannot convert 'nullptr' to 'nullptr &&' [\\#987](https://github.com/nlohmann/json/issues/987)\n- Uniform initialization from another json object differs between gcc and clang. [\\#985](https://github.com/nlohmann/json/issues/985)\n- Problem with adding the lib as a submodule [\\#983](https://github.com/nlohmann/json/issues/983)\n- UTF-8/Unicode error [\\#982](https://github.com/nlohmann/json/issues/982)\n- \"forcing MSVC stacktrace to show which T we're talking about.\" error [\\#980](https://github.com/nlohmann/json/issues/980)\n- reverse order of serialization  [\\#979](https://github.com/nlohmann/json/issues/979)\n- Assigning between different json types [\\#977](https://github.com/nlohmann/json/issues/977)\n- Support serialisation of `unique_ptr<>` and `shared_ptr<>` [\\#975](https://github.com/nlohmann/json/issues/975)\n- Unexpected end of input \\(not same as one before\\) [\\#974](https://github.com/nlohmann/json/issues/974)\n- Segfault on direct initializing json object [\\#973](https://github.com/nlohmann/json/issues/973)\n- Segmentation fault on G++ when trying to assign json string literal to custom json type. [\\#972](https://github.com/nlohmann/json/issues/972)\n- os\\_defines.h:44:19: error: missing binary operator before token \"\\(\" [\\#970](https://github.com/nlohmann/json/issues/970)\n- Passing an iteration object by reference to a function [\\#967](https://github.com/nlohmann/json/issues/967)\n- Json and fmt::lib's format\\_arg\\(\\) [\\#964](https://github.com/nlohmann/json/issues/964)\n\n- Allowing for user-defined string type in lexer/parser [\\#1009](https://github.com/nlohmann/json/pull/1009) ([nlohmann](https://github.com/nlohmann))\n- dump to alternative string type, as defined in basic\\_json template [\\#1006](https://github.com/nlohmann/json/pull/1006) ([agrianius](https://github.com/agrianius))\n- Fix memory leak during parser callback [\\#1001](https://github.com/nlohmann/json/pull/1001) ([nlohmann](https://github.com/nlohmann))\n- fixed misprinted condition detected by PVS Studio. [\\#992](https://github.com/nlohmann/json/pull/992) ([bogemic](https://github.com/bogemic))\n- Fix/basic json conversion [\\#986](https://github.com/nlohmann/json/pull/986) ([theodelrieu](https://github.com/theodelrieu))\n- Make integration section concise [\\#981](https://github.com/nlohmann/json/pull/981) ([wla80](https://github.com/wla80))\n\n## [v3.1.1](https://github.com/nlohmann/json/releases/tag/v3.1.1) (2018-02-13)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.1.0...v3.1.1)\n\n- Updation of child object isn't reflected in parent Object [\\#968](https://github.com/nlohmann/json/issues/968)\n- How to add user defined C++ path to sublime text  [\\#966](https://github.com/nlohmann/json/issues/966)\n- fast number parsing [\\#965](https://github.com/nlohmann/json/issues/965)\n- With non-unique keys, later stored entries are not taken into account anymore [\\#963](https://github.com/nlohmann/json/issues/963)\n- Timeout \\(OSS-Fuzz 6034\\) [\\#962](https://github.com/nlohmann/json/issues/962)\n- Incorrect parsing of indefinite length CBOR strings. [\\#961](https://github.com/nlohmann/json/issues/961)\n- Reload a json file at runtime without emptying my std::ifstream [\\#959](https://github.com/nlohmann/json/issues/959)\n- Split headers should be part of the release [\\#956](https://github.com/nlohmann/json/issues/956)\n- Coveralls shows no coverage data [\\#953](https://github.com/nlohmann/json/issues/953)\n- Feature request: Implicit conversion to bool [\\#951](https://github.com/nlohmann/json/issues/951)\n- converting json to vector of type with templated constructor [\\#924](https://github.com/nlohmann/json/issues/924)\n- No structured bindings support? [\\#901](https://github.com/nlohmann/json/issues/901)\n- \\[Request\\] Macro generating from\\_json\\(\\) and to\\_json\\(\\) [\\#895](https://github.com/nlohmann/json/issues/895)\n- basic\\_json::value throws exception instead of returning default value [\\#871](https://github.com/nlohmann/json/issues/871)\n\n- Fix constraints on from\\_json\\(CompatibleArrayType\\) [\\#969](https://github.com/nlohmann/json/pull/969) ([theodelrieu](https://github.com/theodelrieu))\n- Make coveralls watch the include folder [\\#957](https://github.com/nlohmann/json/pull/957) ([theodelrieu](https://github.com/theodelrieu))\n- Fix links in README.md [\\#955](https://github.com/nlohmann/json/pull/955) ([patrikhuber](https://github.com/patrikhuber))\n- Add a note about installing the library with cget [\\#954](https://github.com/nlohmann/json/pull/954) ([pfultz2](https://github.com/pfultz2))\n\n## [v3.1.0](https://github.com/nlohmann/json/releases/tag/v3.1.0) (2018-02-01)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/3.1.0...v3.1.0)\n\n## [3.1.0](https://github.com/nlohmann/json/releases/tag/3.1.0) (2018-02-01)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.0.1...3.1.0)\n\n- I have a proposal [\\#949](https://github.com/nlohmann/json/issues/949)\n- VERSION define\\(s\\) [\\#948](https://github.com/nlohmann/json/issues/948)\n- v3.0.1 compile error in icc 16.0.4 [\\#947](https://github.com/nlohmann/json/issues/947)\n- Use in VS2017 15.5.5 [\\#946](https://github.com/nlohmann/json/issues/946)\n- Process for reporting Security Bugs? [\\#945](https://github.com/nlohmann/json/issues/945)\n- Please expose a NLOHMANN\\_JSON\\_VERSION macro [\\#943](https://github.com/nlohmann/json/issues/943)\n- Change header include directory to nlohmann/json [\\#942](https://github.com/nlohmann/json/issues/942)\n- string\\_type in binary\\_reader [\\#941](https://github.com/nlohmann/json/issues/941)\n- compile error with clang 5.0 -std=c++1z and no string\\_view [\\#939](https://github.com/nlohmann/json/issues/939)\n- Allow overriding JSON\\_THROW to something else than abort\\(\\) [\\#938](https://github.com/nlohmann/json/issues/938)\n- Handle invalid string in Json file [\\#937](https://github.com/nlohmann/json/issues/937)\n- Unused variable 'kMinExp' [\\#935](https://github.com/nlohmann/json/issues/935)\n- yytext is already defined [\\#933](https://github.com/nlohmann/json/issues/933)\n- Equality operator fails [\\#931](https://github.com/nlohmann/json/issues/931)\n- use in visual studio 2015 [\\#929](https://github.com/nlohmann/json/issues/929)\n- Relative includes of json\\_fwd.hpp in detail/meta.hpp. \\[Develop branch\\] [\\#928](https://github.com/nlohmann/json/issues/928)\n- GCC 7.x issue [\\#926](https://github.com/nlohmann/json/issues/926)\n- json\\_fwd.hpp not installed [\\#923](https://github.com/nlohmann/json/issues/923)\n- Use Google Benchmarks [\\#921](https://github.com/nlohmann/json/issues/921)\n- Move class json\\_pointer to separate file [\\#920](https://github.com/nlohmann/json/issues/920)\n- Unable to locate 'to\\_json\\(\\)' and 'from\\_json\\(\\)' methods in the same namespace [\\#917](https://github.com/nlohmann/json/issues/917)\n- \\[answered\\]Read key1 from .value example  [\\#914](https://github.com/nlohmann/json/issues/914)\n- Don't use `define private public` in test files [\\#913](https://github.com/nlohmann/json/issues/913)\n- value\\(\\) template argument type deduction [\\#912](https://github.com/nlohmann/json/issues/912)\n- Installation path is incorrect [\\#910](https://github.com/nlohmann/json/issues/910)\n- H [\\#909](https://github.com/nlohmann/json/issues/909)\n- Build failure using clang 5 [\\#908](https://github.com/nlohmann/json/issues/908)\n- Amalgate [\\#907](https://github.com/nlohmann/json/issues/907)\n- Update documentation and tests wrt. split headers [\\#906](https://github.com/nlohmann/json/issues/906)\n- Lib not working on ubuntu 16.04 [\\#905](https://github.com/nlohmann/json/issues/905)\n- Problem when writing to file. [\\#904](https://github.com/nlohmann/json/issues/904)\n- C2864 error when compiling with VS2015 and VS 2017 [\\#903](https://github.com/nlohmann/json/issues/903)\n- \\[json.exception.type\\_error.304\\] cannot use at\\(\\) with object [\\#902](https://github.com/nlohmann/json/issues/902)\n- How do I forward nlohmann::json declaration? [\\#899](https://github.com/nlohmann/json/issues/899)\n- How to effectively store binary data? [\\#898](https://github.com/nlohmann/json/issues/898)\n- How to get the length of a JSON string without retrieving its std::string? [\\#897](https://github.com/nlohmann/json/issues/897)\n- Regression Tests Failure using \"ctest\" [\\#887](https://github.com/nlohmann/json/issues/887)\n- Discuss: add JSON Merge Patch \\(RFC 7396\\)? [\\#877](https://github.com/nlohmann/json/issues/877)\n- Discuss: replace static \"iterator\\_wrapper\" function with \"items\" member function [\\#874](https://github.com/nlohmann/json/issues/874)\n- Make optional user-data available in from\\_json [\\#864](https://github.com/nlohmann/json/issues/864)\n- Casting to std::string not working in VS2015 [\\#861](https://github.com/nlohmann/json/issues/861)\n- Sequential reading of JSON arrays [\\#851](https://github.com/nlohmann/json/issues/851)\n- Idea: Handle Multimaps Better [\\#816](https://github.com/nlohmann/json/issues/816)\n- Floating point rounding [\\#777](https://github.com/nlohmann/json/issues/777)\n- Loss of precision when serializing \\<double\\> [\\#360](https://github.com/nlohmann/json/issues/360)\n\n- Templatize std::string in binary\\_reader \\#941 [\\#950](https://github.com/nlohmann/json/pull/950) ([kaidokert](https://github.com/kaidokert))\n- fix cmake install directory \\(for real this time\\) [\\#944](https://github.com/nlohmann/json/pull/944) ([theodelrieu](https://github.com/theodelrieu))\n- Allow overriding THROW/CATCH/TRY macros with no-exceptions \\#938 [\\#940](https://github.com/nlohmann/json/pull/940) ([kaidokert](https://github.com/kaidokert))\n- Removed compiler warning about unused variable 'kMinExp' [\\#936](https://github.com/nlohmann/json/pull/936) ([zerodefect](https://github.com/zerodefect))\n- Fix a typo in README.md [\\#930](https://github.com/nlohmann/json/pull/930) ([Pipeliner](https://github.com/Pipeliner))\n- Howto installation of json\\_fwd.hpp \\(fixes \\#923\\) [\\#925](https://github.com/nlohmann/json/pull/925) ([zerodefect](https://github.com/zerodefect))\n- fix sfinae on basic\\_json UDT constructor [\\#919](https://github.com/nlohmann/json/pull/919) ([theodelrieu](https://github.com/theodelrieu))\n- Floating-point formatting [\\#915](https://github.com/nlohmann/json/pull/915) ([abolz](https://github.com/abolz))\n- Fix/cmake install [\\#911](https://github.com/nlohmann/json/pull/911) ([theodelrieu](https://github.com/theodelrieu))\n- fix link to the documentation of the emplace function [\\#900](https://github.com/nlohmann/json/pull/900) ([Dobiasd](https://github.com/Dobiasd))\n- JSON Merge Patch \\(RFC 7396\\) [\\#876](https://github.com/nlohmann/json/pull/876) ([nlohmann](https://github.com/nlohmann))\n- Refactor/split it [\\#700](https://github.com/nlohmann/json/pull/700) ([theodelrieu](https://github.com/theodelrieu))\n\n## [v3.0.1](https://github.com/nlohmann/json/releases/tag/v3.0.1) (2017-12-29)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/3.0.1...v3.0.1)\n\n## [3.0.1](https://github.com/nlohmann/json/releases/tag/3.0.1) (2017-12-29)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v3.0.0...3.0.1)\n\n- Problem parsing array to global vector [\\#896](https://github.com/nlohmann/json/issues/896)\n- Invalid RFC6902 copy operation succeeds [\\#894](https://github.com/nlohmann/json/issues/894)\n- How to rename a key during looping? [\\#893](https://github.com/nlohmann/json/issues/893)\n- clang++-6.0 \\(6.0.0-svn321357-1\\) warning [\\#892](https://github.com/nlohmann/json/issues/892)\n- Make json.hpp aware of the modules TS? [\\#891](https://github.com/nlohmann/json/issues/891)\n- All enum values not handled in switch cases. \\( -Wswitch-enum \\) [\\#889](https://github.com/nlohmann/json/issues/889)\n- JSON Pointer resolve failure resulting in incorrect exception code [\\#888](https://github.com/nlohmann/json/issues/888)\n- Unexpected nested arrays from std::vector [\\#886](https://github.com/nlohmann/json/issues/886)\n- erase multiple elements from a json object [\\#884](https://github.com/nlohmann/json/issues/884)\n- Container function overview in Doxygen is not updated [\\#883](https://github.com/nlohmann/json/issues/883)\n- How to use this for binary file uploads [\\#881](https://github.com/nlohmann/json/issues/881)\n- Allow setting JSON\\_BuildTests=OFF from parent CMakeLists.txt [\\#846](https://github.com/nlohmann/json/issues/846)\n- Unit test fails for local-independent str-to-num [\\#845](https://github.com/nlohmann/json/issues/845)\n- Another idea about type support [\\#774](https://github.com/nlohmann/json/issues/774)\n\n- Includes CTest module/adds BUILD\\_TESTING option [\\#885](https://github.com/nlohmann/json/pull/885) ([TinyTinni](https://github.com/TinyTinni))\n- Fix MSVC warning C4819 [\\#882](https://github.com/nlohmann/json/pull/882) ([erengy](https://github.com/erengy))\n- Merge branch 'develop' into coverity\\_scan [\\#880](https://github.com/nlohmann/json/pull/880) ([nlohmann](https://github.com/nlohmann))\n- :wrench: Fix up a few more effc++ items [\\#858](https://github.com/nlohmann/json/pull/858) ([mattismyname](https://github.com/mattismyname))\n\n## [v3.0.0](https://github.com/nlohmann/json/releases/tag/v3.0.0) (2017-12-17)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/3.0.0...v3.0.0)\n\n## [3.0.0](https://github.com/nlohmann/json/releases/tag/3.0.0) (2017-12-17)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v2.1.1...3.0.0)\n\n- unicode strings [\\#878](https://github.com/nlohmann/json/issues/878)\n- Visual Studio 2017 15.5 C++17 std::allocator deprecations [\\#872](https://github.com/nlohmann/json/issues/872)\n- Typo \"excpetion\" [\\#869](https://github.com/nlohmann/json/issues/869)\n- Explicit array example in README.md incorrect [\\#867](https://github.com/nlohmann/json/issues/867)\n- why don't you release this from Feb. ? [\\#865](https://github.com/nlohmann/json/issues/865)\n- json::parse throws std::invalid\\_argument when processing string generated by json::dump\\(\\) [\\#863](https://github.com/nlohmann/json/issues/863)\n- code analysis: potential bug? [\\#859](https://github.com/nlohmann/json/issues/859)\n- MSVC2017, 15.5 new issues.   [\\#857](https://github.com/nlohmann/json/issues/857)\n- very basic: fetching string value/content without quotes [\\#853](https://github.com/nlohmann/json/issues/853)\n- Ambiguous function call to get with pointer type and constant json object in VS2015 \\(15.4.4\\) [\\#852](https://github.com/nlohmann/json/issues/852)\n- How to put  object in the array as a member? [\\#850](https://github.com/nlohmann/json/issues/850)\n- misclick, please ignore [\\#849](https://github.com/nlohmann/json/issues/849)\n- Make XML great again. [\\#847](https://github.com/nlohmann/json/issues/847)\n- Converting to array not working [\\#843](https://github.com/nlohmann/json/issues/843)\n- Iteration weirdness [\\#842](https://github.com/nlohmann/json/issues/842)\n- Use reference or pointer as Object value [\\#841](https://github.com/nlohmann/json/issues/841)\n- Ambiguity in parsing nested maps [\\#840](https://github.com/nlohmann/json/issues/840)\n- could not find from\\_json\\(\\) method in T's namespace [\\#839](https://github.com/nlohmann/json/issues/839)\n- Incorrect parse error with binary data in keys? [\\#838](https://github.com/nlohmann/json/issues/838)\n- using dump\\(\\) when std::wstring is StringType with VS2017 [\\#836](https://github.com/nlohmann/json/issues/836)\n- Show the path of the currently parsed value when an error occurs [\\#835](https://github.com/nlohmann/json/issues/835)\n- Repetitive data type while reading [\\#833](https://github.com/nlohmann/json/issues/833)\n- Storing multiple types inside map [\\#831](https://github.com/nlohmann/json/issues/831)\n- Application terminating [\\#830](https://github.com/nlohmann/json/issues/830)\n- Missing CMake hunter package? [\\#828](https://github.com/nlohmann/json/issues/828)\n- std::map\\<std::string, std::string\\> from json object yields C2665: 'std::pair\\<const \\_Kty,\\_Ty\\>::pair': none of the 2 overloads could convert all the argument types [\\#827](https://github.com/nlohmann/json/issues/827)\n- object.dump gives quoted string, want to use .dump\\(\\) to generate javascripts. [\\#826](https://github.com/nlohmann/json/issues/826)\n- Assertion failed on \\[\"NoExistKey\"\\] of an not existing key of const json& [\\#825](https://github.com/nlohmann/json/issues/825)\n- vs2015 error : static member will remain uninitialized at runtime but use in constant-expressions is supported [\\#824](https://github.com/nlohmann/json/issues/824)\n- Code Checking Warnings from json.hpp on VS2017 Community [\\#821](https://github.com/nlohmann/json/issues/821)\n- Missing iostream in try online [\\#820](https://github.com/nlohmann/json/issues/820)\n- Floating point value loses decimal point during dump [\\#818](https://github.com/nlohmann/json/issues/818)\n- Conan package for the library [\\#817](https://github.com/nlohmann/json/issues/817)\n- stream error  [\\#815](https://github.com/nlohmann/json/issues/815)\n- Link error when using find\\(\\) on the latest commit [\\#814](https://github.com/nlohmann/json/issues/814)\n- ABI issue with json object between 2 shared libraries [\\#813](https://github.com/nlohmann/json/issues/813)\n- scan\\_string\\(\\) return token\\_type::parse\\_error; when parse ansi file [\\#812](https://github.com/nlohmann/json/issues/812)\n- segfault when using fifo\\_map with json [\\#810](https://github.com/nlohmann/json/issues/810)\n- This shit is shit  [\\#809](https://github.com/nlohmann/json/issues/809)\n- \\_finite and \\_isnan are no members of \"std\" [\\#808](https://github.com/nlohmann/json/issues/808)\n- how to print out the line which causing exception? [\\#806](https://github.com/nlohmann/json/issues/806)\n- {} uses copy constructor, while = does not [\\#805](https://github.com/nlohmann/json/issues/805)\n- json.hpp:8955: multiple definition of function that is not defined twice or more. [\\#804](https://github.com/nlohmann/json/issues/804)\n- \\[question\\] to\\_json for base and derived class [\\#803](https://github.com/nlohmann/json/issues/803)\n- Misleading error message - unexpected '\"' - on incorrect utf-8 symbol [\\#802](https://github.com/nlohmann/json/issues/802)\n- json data = std::string\\_view\\(\"hi\"\\); doesn't work? [\\#801](https://github.com/nlohmann/json/issues/801)\n- Thread safety of parse\\(\\) [\\#800](https://github.com/nlohmann/json/issues/800)\n- Numbers as strings [\\#799](https://github.com/nlohmann/json/issues/799)\n- Tests failing on arm [\\#797](https://github.com/nlohmann/json/issues/797)\n- Using your library \\(without modification\\) in another library [\\#796](https://github.com/nlohmann/json/issues/796)\n- Iterating over sub-object [\\#794](https://github.com/nlohmann/json/issues/794)\n- how to get the json object again from which printed by the method of dump\\(\\) [\\#792](https://github.com/nlohmann/json/issues/792)\n- ppa to include source [\\#791](https://github.com/nlohmann/json/issues/791)\n- Different include paths in macOS and Ubuntu [\\#790](https://github.com/nlohmann/json/issues/790)\n- Missing break after line 12886 in switch/case [\\#789](https://github.com/nlohmann/json/issues/789)\n- All unit tests fail? [\\#787](https://github.com/nlohmann/json/issues/787)\n- More use of move semantics in deserialization [\\#786](https://github.com/nlohmann/json/issues/786)\n- warning C4706 - Visual Studio 2017 \\(/W4\\) [\\#784](https://github.com/nlohmann/json/issues/784)\n- Compile error in clang 5.0 [\\#782](https://github.com/nlohmann/json/issues/782)\n- Error Installing appium\\_lib with Ruby v2.4.2 Due to JSON [\\#781](https://github.com/nlohmann/json/issues/781)\n- ::get\\<int\\>\\(\\) fails in new\\(er\\) release \\[MSVC\\] [\\#780](https://github.com/nlohmann/json/issues/780)\n- Type Conversion [\\#779](https://github.com/nlohmann/json/issues/779)\n- Segfault on nested parsing [\\#778](https://github.com/nlohmann/json/issues/778)\n- Build warnings: shadowing exception id [\\#776](https://github.com/nlohmann/json/issues/776)\n- multi-level JSON support. [\\#775](https://github.com/nlohmann/json/issues/775)\n- SIGABRT on dump\\(\\) [\\#773](https://github.com/nlohmann/json/issues/773)\n- \\[Question\\] Custom StringType template parameter \\(possibility for a KeyType template parameter\\) [\\#772](https://github.com/nlohmann/json/issues/772)\n- constexpr ALL the Things! [\\#771](https://github.com/nlohmann/json/issues/771)\n- error: ‘BasicJsonType’ in namespace ‘::’ does not name a type [\\#770](https://github.com/nlohmann/json/issues/770)\n- Program calls abort function [\\#769](https://github.com/nlohmann/json/issues/769)\n- \\[Question\\] Floating point resolution config during dump\\(\\) ? [\\#768](https://github.com/nlohmann/json/issues/768)\n- make check - no test ran [\\#767](https://github.com/nlohmann/json/issues/767)\n- The library cannot work properly with custom allocator based containers [\\#766](https://github.com/nlohmann/json/issues/766)\n- Documentation or feature request. [\\#763](https://github.com/nlohmann/json/issues/763)\n- warnings in msvc about mix/max macro while windows.h is used in the project [\\#762](https://github.com/nlohmann/json/issues/762)\n- std::signbit ambiguous [\\#761](https://github.com/nlohmann/json/issues/761)\n- How to use value for std::experimental::optional type? [\\#760](https://github.com/nlohmann/json/issues/760)\n- Cannot load json file properly [\\#759](https://github.com/nlohmann/json/issues/759)\n- Compilation error with unordered\\_map\\< int, int \\> [\\#758](https://github.com/nlohmann/json/issues/758)\n- CBOR string [\\#757](https://github.com/nlohmann/json/issues/757)\n- Proposal: out\\_of\\_range should be a subclass of std::out\\_of\\_range [\\#756](https://github.com/nlohmann/json/issues/756)\n- Getter is setting the value to null if the key does not exist [\\#754](https://github.com/nlohmann/json/issues/754)\n- parsing works sometimes and crashes others [\\#752](https://github.com/nlohmann/json/issues/752)\n- Static\\_assert failed \"incompatible pointer type\" with Xcode [\\#751](https://github.com/nlohmann/json/issues/751)\n- user-defined literal operator not found [\\#750](https://github.com/nlohmann/json/issues/750)\n- getting clean string from it.key\\(\\) [\\#748](https://github.com/nlohmann/json/issues/748)\n- Best method for exploring and obtaining values of nested json objects when the names are not known beforehand? [\\#747](https://github.com/nlohmann/json/issues/747)\n- null char at the end of string [\\#746](https://github.com/nlohmann/json/issues/746)\n- Incorrect sample for operator \\>\\> in docs [\\#745](https://github.com/nlohmann/json/issues/745)\n- User-friendly documentation [\\#744](https://github.com/nlohmann/json/issues/744)\n- Retrieve all values that match a json path [\\#743](https://github.com/nlohmann/json/issues/743)\n- Compilation issue with gcc 7.2 [\\#742](https://github.com/nlohmann/json/issues/742)\n- CMake target nlohmann\\_json does not have src into its interface includes [\\#741](https://github.com/nlohmann/json/issues/741)\n- Error when serializing empty json: type must be string, but is object [\\#740](https://github.com/nlohmann/json/issues/740)\n- Conversion error for std::map\\<int, std::string\\>  [\\#739](https://github.com/nlohmann/json/issues/739)\n- Dumping Json to file as array [\\#738](https://github.com/nlohmann/json/issues/738)\n- nesting json objects [\\#737](https://github.com/nlohmann/json/issues/737)\n- where to find general help? [\\#736](https://github.com/nlohmann/json/issues/736)\n- Compilation Error on Clang 5.0 Upgrade [\\#735](https://github.com/nlohmann/json/issues/735)\n- Compilation error with std::map\\<std::string, std::string\\> on vs 2015 [\\#734](https://github.com/nlohmann/json/issues/734)\n- Benchmarks for Binary formats [\\#733](https://github.com/nlohmann/json/issues/733)\n- Support \\n symbols in json string. [\\#731](https://github.com/nlohmann/json/issues/731)\n- Project's name is too generic and hard to search for [\\#730](https://github.com/nlohmann/json/issues/730)\n- Visual Studio 2015 IntelliTrace problems [\\#729](https://github.com/nlohmann/json/issues/729)\n- How to erase nested objects inside other objects? [\\#728](https://github.com/nlohmann/json/issues/728)\n- Serialization for CBOR [\\#726](https://github.com/nlohmann/json/issues/726)\n- Using json Object as value in a map [\\#725](https://github.com/nlohmann/json/issues/725)\n- std::regex and nlohmann::json value [\\#724](https://github.com/nlohmann/json/issues/724)\n- Warnings when compiling with VisualStudio 2015 [\\#723](https://github.com/nlohmann/json/issues/723)\n- Has this lib the unicode \\(wstring\\) support? [\\#722](https://github.com/nlohmann/json/issues/722)\n- When will be 3.0 in master? [\\#721](https://github.com/nlohmann/json/issues/721)\n- Determine the type from error message. [\\#720](https://github.com/nlohmann/json/issues/720)\n- Compile-Error C2100 \\(MS VS2015\\) in line 887 json.hpp [\\#719](https://github.com/nlohmann/json/issues/719)\n- from\\_json not working for boost::optional example [\\#718](https://github.com/nlohmann/json/issues/718)\n- about from\\_json and to\\_json function [\\#717](https://github.com/nlohmann/json/issues/717)\n- How to detect parse failure? [\\#715](https://github.com/nlohmann/json/issues/715)\n- Parse throw std::ios\\_base::failure exception when failbit set to true [\\#714](https://github.com/nlohmann/json/issues/714)\n- Is there a way of format just making a pretty print without changing the key's orders ? [\\#713](https://github.com/nlohmann/json/issues/713)\n- Serialization of array of not same model items [\\#712](https://github.com/nlohmann/json/issues/712)\n- pointer to json parse vector [\\#711](https://github.com/nlohmann/json/issues/711)\n- Gtest SEH Exception [\\#709](https://github.com/nlohmann/json/issues/709)\n- broken from\\_json implementation for pair and tuple  [\\#707](https://github.com/nlohmann/json/issues/707)\n- Unevaluated lambda in assert breaks gcc 7 build [\\#705](https://github.com/nlohmann/json/issues/705)\n- Issues when adding values to firebase database [\\#704](https://github.com/nlohmann/json/issues/704)\n- Floating point equality - revisited [\\#703](https://github.com/nlohmann/json/issues/703)\n- Conversion from valarray\\<double\\> to json fails to build [\\#702](https://github.com/nlohmann/json/issues/702)\n- internal compiler error \\(gcc7\\)  [\\#701](https://github.com/nlohmann/json/issues/701)\n- One build system to rule them all [\\#698](https://github.com/nlohmann/json/issues/698)\n- Generated nlohmann\\_jsonConfig.cmake does not set JSON\\_INCLUDE\\_DIR [\\#695](https://github.com/nlohmann/json/issues/695)\n- support the Chinese language in json string [\\#694](https://github.com/nlohmann/json/issues/694)\n- NaN problem within develop branch [\\#693](https://github.com/nlohmann/json/issues/693)\n- Please post example of specialization for boost::filesystem [\\#692](https://github.com/nlohmann/json/issues/692)\n- Impossible to do an array of composite objects [\\#691](https://github.com/nlohmann/json/issues/691)\n- How to save json to file? [\\#690](https://github.com/nlohmann/json/issues/690)\n- my simple json parser [\\#689](https://github.com/nlohmann/json/issues/689)\n- problem with new struct parsing syntax [\\#688](https://github.com/nlohmann/json/issues/688)\n- Parse error while parse the json string contains  UTF 8 encoded document bytes string [\\#684](https://github.com/nlohmann/json/issues/684)\n- \\[question\\] how to get a string value by pointer [\\#683](https://github.com/nlohmann/json/issues/683)\n- create json object from string variable [\\#681](https://github.com/nlohmann/json/issues/681)\n- adl\\_serializer and CRTP [\\#680](https://github.com/nlohmann/json/issues/680)\n- Is there a way to control the precision of serialized floating point numbers? [\\#677](https://github.com/nlohmann/json/issues/677)\n- Is there a way to get the path of a value? [\\#676](https://github.com/nlohmann/json/issues/676)\n- Could the parser locate errors to line? [\\#675](https://github.com/nlohmann/json/issues/675)\n- There is performance inefficiency found by coverity tool json2.1.1/include/nlohmann/json.hpp [\\#673](https://github.com/nlohmann/json/issues/673)\n- include problem, when cmake on osx [\\#672](https://github.com/nlohmann/json/issues/672)\n- Operator= ambiguous in C++1z and GCC 7.1.1 [\\#670](https://github.com/nlohmann/json/issues/670)\n- should't the cmake install target be to nlohman/json.hpp [\\#668](https://github.com/nlohmann/json/issues/668)\n- deserialise from `std::vector` [\\#667](https://github.com/nlohmann/json/issues/667)\n- How to iterate? [\\#665](https://github.com/nlohmann/json/issues/665)\n- could this json lib work on windows? [\\#664](https://github.com/nlohmann/json/issues/664)\n- How does from\\_json work? [\\#662](https://github.com/nlohmann/json/issues/662)\n- insert\\(or merge\\) object should replace same key , not ignore [\\#661](https://github.com/nlohmann/json/issues/661)\n- Parse method doesn't handle newlines. [\\#659](https://github.com/nlohmann/json/issues/659)\n- Compilation \"note\" on GCC 6 ARM [\\#658](https://github.com/nlohmann/json/issues/658)\n- Adding additional push\\_back/operator+= rvalue overloads for JSON object [\\#657](https://github.com/nlohmann/json/issues/657)\n- dump's parameter \"ensure\\_ascii\" creates too long sequences [\\#656](https://github.com/nlohmann/json/issues/656)\n- Question: parsing `void *` [\\#655](https://github.com/nlohmann/json/issues/655)\n- how should I check a string is valid JSON string ? [\\#653](https://github.com/nlohmann/json/issues/653)\n- Question: thread safety of read only accesses [\\#651](https://github.com/nlohmann/json/issues/651)\n- Eclipse: Method 'size' could not be resolved [\\#649](https://github.com/nlohmann/json/issues/649)\n- Update/Add object fields [\\#648](https://github.com/nlohmann/json/issues/648)\n- No exception raised for Out Of Range input of numbers [\\#647](https://github.com/nlohmann/json/issues/647)\n- Package Name [\\#646](https://github.com/nlohmann/json/issues/646)\n- What is the meaning of operator\\[\\]\\(T\\* key\\) [\\#645](https://github.com/nlohmann/json/issues/645)\n- Which is the correct way to json objects as parameters to functions? [\\#644](https://github.com/nlohmann/json/issues/644)\n- Method to get string representations of values [\\#642](https://github.com/nlohmann/json/issues/642)\n-  CBOR serialization of a given JSON value does not serialize [\\#641](https://github.com/nlohmann/json/issues/641)\n- Are we forced to use \"-fexceptions\" flag in android ndk project [\\#640](https://github.com/nlohmann/json/issues/640)\n- Comparison of objects containing floats [\\#639](https://github.com/nlohmann/json/issues/639)\n- 'localeconv' is not supported by NDK for SDK  \\<=20 [\\#638](https://github.com/nlohmann/json/issues/638)\n- \\[Question\\] cLion integration [\\#637](https://github.com/nlohmann/json/issues/637)\n- How to construct an iteratable usage in nlohmann json? [\\#636](https://github.com/nlohmann/json/issues/636)\n- \\[Question\\] copy assign json-container to vector [\\#635](https://github.com/nlohmann/json/issues/635)\n- Get size without .dump\\(\\) [\\#634](https://github.com/nlohmann/json/issues/634)\n- Segmentation fault when parsing invalid json file [\\#633](https://github.com/nlohmann/json/issues/633)\n- How to serialize from json to vector\\<customType\\>? [\\#632](https://github.com/nlohmann/json/issues/632)\n- no member named 'thousands\\_sep' in 'lconv' [\\#631](https://github.com/nlohmann/json/issues/631)\n- \\[Question\\] Any fork for \\(the unsupported\\) Visual Studio 2012 version? [\\#628](https://github.com/nlohmann/json/issues/628)\n- Dependency injection in serializer [\\#627](https://github.com/nlohmann/json/issues/627)\n- from\\_json for std::array [\\#625](https://github.com/nlohmann/json/issues/625)\n- Discussion: How to structure the parsing function families [\\#623](https://github.com/nlohmann/json/issues/623)\n- Question: How to erase subtree [\\#622](https://github.com/nlohmann/json/issues/622)\n- Insertion into nested json field [\\#621](https://github.com/nlohmann/json/issues/621)\n- Question: return static json object from function [\\#618](https://github.com/nlohmann/json/issues/618)\n- icc16 error [\\#617](https://github.com/nlohmann/json/issues/617)\n- \\[-Wdeprecated-declarations\\] in row `j >> ss;` in file `json.hpp:7405:26` and FAILED unit tests with MinGWx64! [\\#616](https://github.com/nlohmann/json/issues/616)\n- to\\_json for pairs, tuples [\\#614](https://github.com/nlohmann/json/issues/614)\n- Using uninitialized memory 'buf' in line 11173 v2.1.1? [\\#613](https://github.com/nlohmann/json/issues/613)\n- How to parse multiple same Keys of JSON and save them? [\\#612](https://github.com/nlohmann/json/issues/612)\n- \"Multiple declarations\" error when using types defined with `typedef` [\\#611](https://github.com/nlohmann/json/issues/611)\n- 2.1.1+ breaks compilation of shared\\_ptr\\<json\\> == 0 [\\#610](https://github.com/nlohmann/json/issues/610)\n- a bug of inheritance ?  [\\#608](https://github.com/nlohmann/json/issues/608)\n- std::map key conversion with to\\_json [\\#607](https://github.com/nlohmann/json/issues/607)\n- json.hpp:6384:62: error: wrong number of template arguments \\(1, should be 2\\) [\\#606](https://github.com/nlohmann/json/issues/606)\n- Incremental parsing: Where's the push version? [\\#605](https://github.com/nlohmann/json/issues/605)\n- Is there a way to validate the structure of a json object ? [\\#604](https://github.com/nlohmann/json/issues/604)\n- \\[Question\\] Issue when using Appveyor when compiling library [\\#603](https://github.com/nlohmann/json/issues/603)\n- BOM not skipped when using json:parse\\(iterator\\) [\\#602](https://github.com/nlohmann/json/issues/602)\n- Use of the binary type in CBOR and Message Pack [\\#601](https://github.com/nlohmann/json/issues/601)\n- Newbie issue: how does one convert a map in Json back to std::map? [\\#600](https://github.com/nlohmann/json/issues/600)\n- Plugin system [\\#599](https://github.com/nlohmann/json/issues/599)\n- Using custom types for scalars? [\\#596](https://github.com/nlohmann/json/issues/596)\n- Issues with the arithmetic in iterator and reverse iterator [\\#593](https://github.com/nlohmann/json/issues/593)\n- not enough examples [\\#592](https://github.com/nlohmann/json/issues/592)\n- in-class initialization for type 'const T' is not yet implemented [\\#591](https://github.com/nlohmann/json/issues/591)\n- compiling with gcc 7 -\\> error on bool operator \\< [\\#590](https://github.com/nlohmann/json/issues/590)\n- Parsing from stream leads to an array [\\#589](https://github.com/nlohmann/json/issues/589)\n- Buggy support for binary string data [\\#587](https://github.com/nlohmann/json/issues/587)\n- C++17's ambiguous conversion [\\#586](https://github.com/nlohmann/json/issues/586)\n- How does the messagepack encoding/decoding compare to msgpack-cpp in terms of performance? [\\#585](https://github.com/nlohmann/json/issues/585)\n- is it possible to check existence of a value deep in hierarchy? [\\#584](https://github.com/nlohmann/json/issues/584)\n- loading from a stream and exceptions [\\#582](https://github.com/nlohmann/json/issues/582)\n- Visual Studio seems not to have all min\\(\\) function versions [\\#581](https://github.com/nlohmann/json/issues/581)\n- Supporting of the json schema [\\#580](https://github.com/nlohmann/json/issues/580)\n- Stack-overflow \\(OSS-Fuzz 1444\\) [\\#577](https://github.com/nlohmann/json/issues/577)\n- Heap-buffer-overflow \\(OSS-Fuzz 1400\\) [\\#575](https://github.com/nlohmann/json/issues/575)\n- JSON escape quotes [\\#574](https://github.com/nlohmann/json/issues/574)\n- error: static\\_assert failed [\\#573](https://github.com/nlohmann/json/issues/573)\n- Storing floats, and round trip serialisation/deserialisation diffs [\\#572](https://github.com/nlohmann/json/issues/572)\n- JSON.getLong produces inconsistent results [\\#571](https://github.com/nlohmann/json/issues/571)\n- Request: Object.at\\(\\) with default return value [\\#570](https://github.com/nlohmann/json/issues/570)\n- Internal structure gets corrupted while parsing [\\#569](https://github.com/nlohmann/json/issues/569)\n- create template \\<typename Iter\\> basic\\_json from\\_cbor\\(Iter begin, Iter end\\) [\\#568](https://github.com/nlohmann/json/issues/568)\n- Conan.io [\\#566](https://github.com/nlohmann/json/issues/566)\n- contradictory documentation regarding json::find [\\#565](https://github.com/nlohmann/json/issues/565)\n- Unexpected '\\\"' in middle of array [\\#564](https://github.com/nlohmann/json/issues/564)\n- Support parse std::pair to Json object [\\#563](https://github.com/nlohmann/json/issues/563)\n- json and Microsoft Visual c++ Compiler Nov 2012 CTP [\\#562](https://github.com/nlohmann/json/issues/562)\n- from\\_json declaration order and exceptions [\\#561](https://github.com/nlohmann/json/issues/561)\n- Tip: Don't upgrade to VS2017 if using json initializer list constructs [\\#559](https://github.com/nlohmann/json/issues/559)\n- parse error - unexpected end of input [\\#558](https://github.com/nlohmann/json/issues/558)\n- Cant modify existing numbers inside a json object [\\#557](https://github.com/nlohmann/json/issues/557)\n- Better support for SAX style serialize and deserialize in new version? [\\#554](https://github.com/nlohmann/json/issues/554)\n- Cannot convert from json array to std::array [\\#553](https://github.com/nlohmann/json/issues/553)\n- Do not define an unnamed namespace in a header file \\(DCL59-CPP\\) [\\#552](https://github.com/nlohmann/json/issues/552)\n- Parse error on known good json file [\\#551](https://github.com/nlohmann/json/issues/551)\n- Warning on Intel compiler \\(icc 17\\) [\\#550](https://github.com/nlohmann/json/issues/550)\n- multiple versions of 'vsnprintf' [\\#549](https://github.com/nlohmann/json/issues/549)\n- illegal indirection [\\#548](https://github.com/nlohmann/json/issues/548)\n- Ambiguous compare operators with clang-5.0 [\\#547](https://github.com/nlohmann/json/issues/547)\n- Using tsl::ordered\\_map [\\#546](https://github.com/nlohmann/json/issues/546)\n- Compiler support errors are inconvenient [\\#544](https://github.com/nlohmann/json/issues/544)\n- Duplicate symbols error happens while to\\_json/from\\_json method implemented inside entity definition header file [\\#542](https://github.com/nlohmann/json/issues/542)\n- consider adding a bool json::is\\_valid\\(std::string const&\\) non-member function [\\#541](https://github.com/nlohmann/json/issues/541)\n- Help request [\\#539](https://github.com/nlohmann/json/issues/539)\n- How to deal with missing keys in `from_json`? [\\#538](https://github.com/nlohmann/json/issues/538)\n- recursive from\\_msgpack implementation will stack overflow [\\#537](https://github.com/nlohmann/json/issues/537)\n- Exception objects must be nothrow copy constructible \\(ERR60-CPP\\) [\\#531](https://github.com/nlohmann/json/issues/531)\n- Support for multiple root elements [\\#529](https://github.com/nlohmann/json/issues/529)\n- Port has\\_shape from dropbox/json11 [\\#528](https://github.com/nlohmann/json/issues/528)\n- dump\\_float: truncation from ptrdiff\\_t to long [\\#527](https://github.com/nlohmann/json/issues/527)\n- Make exception base class visible in basic\\_json [\\#525](https://github.com/nlohmann/json/issues/525)\n- msgpack unit test failures on ppc64 arch [\\#524](https://github.com/nlohmann/json/issues/524)\n- How about split the implementation out, and only leave the interface? [\\#523](https://github.com/nlohmann/json/issues/523)\n- VC++2017 not enough actual parameters for macro 'max' [\\#522](https://github.com/nlohmann/json/issues/522)\n- crash on empty ifstream [\\#521](https://github.com/nlohmann/json/issues/521)\n- Suggestion: Support tabs for indentation when serializing to stream. [\\#520](https://github.com/nlohmann/json/issues/520)\n- Abrt in get\\_number \\(OSS-Fuzz 885\\) [\\#519](https://github.com/nlohmann/json/issues/519)\n- Abrt on unknown address \\(OSS-Fuzz 884\\) [\\#518](https://github.com/nlohmann/json/issues/518)\n- Stack-overflow \\(OSS-Fuzz 869\\) [\\#517](https://github.com/nlohmann/json/issues/517)\n- Assertion error \\(OSS-Fuzz 868\\) [\\#516](https://github.com/nlohmann/json/issues/516)\n- NaN to json and back [\\#515](https://github.com/nlohmann/json/issues/515)\n- Comparison of NaN [\\#514](https://github.com/nlohmann/json/issues/514)\n- why it's not possible to serialize c++11 enums directly [\\#513](https://github.com/nlohmann/json/issues/513)\n- clang compile error: use of overloaded operator '\\<=' is ambiguous   with \\(nlohmann::json{{\"a\", 5}}\\)\\[\"a\"\\] \\<= 10 [\\#512](https://github.com/nlohmann/json/issues/512)\n- Why not also look inside the type for \\(static\\) to\\_json and from\\_json funtions? [\\#511](https://github.com/nlohmann/json/issues/511)\n- Parser issues [\\#509](https://github.com/nlohmann/json/issues/509)\n- I may not understand [\\#507](https://github.com/nlohmann/json/issues/507)\n- VS2017 min / max problem for 2.1.1 [\\#506](https://github.com/nlohmann/json/issues/506)\n- CBOR/MessagePack is not read until the end [\\#505](https://github.com/nlohmann/json/issues/505)\n- Assertion error \\(OSS-Fuzz 856\\) [\\#504](https://github.com/nlohmann/json/issues/504)\n- Return position in parse error exceptions [\\#503](https://github.com/nlohmann/json/issues/503)\n- conversion from/to C array is not supported [\\#502](https://github.com/nlohmann/json/issues/502)\n- error C2338: could not find to\\_json\\(\\) method in T's namespace [\\#501](https://github.com/nlohmann/json/issues/501)\n- Test suite fails in en\\_GB.UTF-8 [\\#500](https://github.com/nlohmann/json/issues/500)\n- cannot use operator\\[\\] with number [\\#499](https://github.com/nlohmann/json/issues/499)\n- consider using \\_\\_cpp\\_exceptions and/or \\_\\_EXCEPTIONS to disable/enable exception support [\\#498](https://github.com/nlohmann/json/issues/498)\n- Stack-overflow \\(OSS-Fuzz issue 814\\) [\\#497](https://github.com/nlohmann/json/issues/497)\n- Using in Unreal Engine - handling custom types conversion [\\#495](https://github.com/nlohmann/json/issues/495)\n- Conversion from vector\\<bool\\> to json fails to build [\\#494](https://github.com/nlohmann/json/issues/494)\n- fill\\_line\\_buffer incorrectly tests m\\_stream for eof but not fail or bad bits [\\#493](https://github.com/nlohmann/json/issues/493)\n- Compiling with \\_GLIBCXX\\_DEBUG yields iterator-comparison warnings during tests [\\#492](https://github.com/nlohmann/json/issues/492)\n- crapy interface [\\#491](https://github.com/nlohmann/json/issues/491)\n- Fix Visual Studo 2013 builds. [\\#490](https://github.com/nlohmann/json/issues/490)\n- Failed to compile with -D\\_GLIBCXX\\_PARALLEL [\\#489](https://github.com/nlohmann/json/issues/489)\n- Input several field with the same name [\\#488](https://github.com/nlohmann/json/issues/488)\n- read in .json file yields strange sizes [\\#487](https://github.com/nlohmann/json/issues/487)\n- json::value\\_t can't be a map's key type in VC++ 2015 [\\#486](https://github.com/nlohmann/json/issues/486)\n- Using fifo\\_map [\\#485](https://github.com/nlohmann/json/issues/485)\n- Cannot get float pointer for value stored as `0` [\\#484](https://github.com/nlohmann/json/issues/484)\n- byte string support [\\#483](https://github.com/nlohmann/json/issues/483)\n- https://github.com/nlohmann/json\\#execute-unit-tests [\\#481](https://github.com/nlohmann/json/issues/481)\n- Remove deprecated constructor basic\\_json\\(std::istream&\\) [\\#480](https://github.com/nlohmann/json/issues/480)\n- writing the binary json file? [\\#479](https://github.com/nlohmann/json/issues/479)\n- CBOR/MessagePack from uint8\\_t \\* and size [\\#478](https://github.com/nlohmann/json/issues/478)\n- Streaming binary representations  [\\#477](https://github.com/nlohmann/json/issues/477)\n- Reuse memory in to\\_cbor and to\\_msgpack functions [\\#476](https://github.com/nlohmann/json/issues/476)\n- Error Using JSON Library with arrays C++ [\\#475](https://github.com/nlohmann/json/issues/475)\n- Moving forward to version 3.0.0 [\\#474](https://github.com/nlohmann/json/issues/474)\n- Inconsistent behavior in conversion to array type [\\#473](https://github.com/nlohmann/json/issues/473)\n- Create a \\[key:member\\_pointer\\] map to ease parsing custom types [\\#471](https://github.com/nlohmann/json/issues/471)\n- MSVC 2015 update 2 [\\#469](https://github.com/nlohmann/json/issues/469)\n- VS2017 implicit to std::string conversion fix. [\\#464](https://github.com/nlohmann/json/issues/464)\n- How to make sure a string or string literal is a valid JSON? [\\#458](https://github.com/nlohmann/json/issues/458)\n- basic\\_json templated on a \"policy\" class [\\#456](https://github.com/nlohmann/json/issues/456)\n- json::value\\(const json\\_pointer&, ValueType\\) requires exceptions to return the default value. [\\#440](https://github.com/nlohmann/json/issues/440)\n- is it possible merge two json object [\\#428](https://github.com/nlohmann/json/issues/428)\n- Is it possible to turn this into a shared library? [\\#420](https://github.com/nlohmann/json/issues/420)\n- Further thoughts on performance improvements [\\#418](https://github.com/nlohmann/json/issues/418)\n- nan number stored as null [\\#388](https://github.com/nlohmann/json/issues/388)\n- Behavior of operator\\>\\> should more closely resemble that of built-in overloads. [\\#367](https://github.com/nlohmann/json/issues/367)\n- Request: range-based-for over a json-object to expose .first/.second [\\#350](https://github.com/nlohmann/json/issues/350)\n- feature wish: JSONPath [\\#343](https://github.com/nlohmann/json/issues/343)\n- UTF-8/Unicode escape and dump [\\#330](https://github.com/nlohmann/json/issues/330)\n- Serialized value not always can be parsed. [\\#329](https://github.com/nlohmann/json/issues/329)\n- Is there a way to forward declare nlohmann::json? [\\#314](https://github.com/nlohmann/json/issues/314)\n- Exception line [\\#301](https://github.com/nlohmann/json/issues/301)\n- Do not throw exception when default\\_value's type does not match the actual type [\\#278](https://github.com/nlohmann/json/issues/278)\n- dump\\(\\) method doesn't work with a custom allocator [\\#268](https://github.com/nlohmann/json/issues/268)\n- Readme documentation enhancements [\\#248](https://github.com/nlohmann/json/issues/248)\n- Use user-defined exceptions [\\#244](https://github.com/nlohmann/json/issues/244)\n- Incorrect C++11 allocator model support [\\#161](https://github.com/nlohmann/json/issues/161)\n\n- :white\\_check\\_mark: re-added tests for algorithms [\\#879](https://github.com/nlohmann/json/pull/879) ([nlohmann](https://github.com/nlohmann))\n- Overworked library toward 3.0.0 release [\\#875](https://github.com/nlohmann/json/pull/875) ([nlohmann](https://github.com/nlohmann))\n- :rotating\\_light: remove C4996 warnings \\#872 [\\#873](https://github.com/nlohmann/json/pull/873) ([nlohmann](https://github.com/nlohmann))\n- :boom: throwing an exception in case dump encounters a non-UTF-8 string \\#838 [\\#870](https://github.com/nlohmann/json/pull/870) ([nlohmann](https://github.com/nlohmann))\n- :memo: fixing documentation \\#867 [\\#868](https://github.com/nlohmann/json/pull/868) ([nlohmann](https://github.com/nlohmann))\n- iter\\_impl template conformance with C++17 [\\#860](https://github.com/nlohmann/json/pull/860) ([bogemic](https://github.com/bogemic))\n- Std allocator conformance cpp17 [\\#856](https://github.com/nlohmann/json/pull/856) ([bogemic](https://github.com/bogemic))\n- cmake: use BUILD\\_INTERFACE/INSTALL\\_INTERFACE [\\#855](https://github.com/nlohmann/json/pull/855) ([theodelrieu](https://github.com/theodelrieu))\n- to/from\\_json: add a MSVC-specific static\\_assert to force a stacktrace [\\#854](https://github.com/nlohmann/json/pull/854) ([theodelrieu](https://github.com/theodelrieu))\n- Add .natvis for MSVC debug view [\\#844](https://github.com/nlohmann/json/pull/844) ([TinyTinni](https://github.com/TinyTinni))\n- Updated hunter package links [\\#829](https://github.com/nlohmann/json/pull/829) ([jowr](https://github.com/jowr))\n- Typos README [\\#811](https://github.com/nlohmann/json/pull/811) ([Itja](https://github.com/Itja))\n- add forwarding references to json\\_ref constructor [\\#807](https://github.com/nlohmann/json/pull/807) ([theodelrieu](https://github.com/theodelrieu))\n- Add transparent comparator and perfect forwarding support to find\\(\\) and count\\(\\) [\\#795](https://github.com/nlohmann/json/pull/795) ([jseward](https://github.com/jseward))\n- Error : 'identifier \"size\\_t\" is undefined' in linux [\\#793](https://github.com/nlohmann/json/pull/793) ([sonulohani](https://github.com/sonulohani))\n- Fix Visual Studio 2017 warnings [\\#788](https://github.com/nlohmann/json/pull/788) ([jseward](https://github.com/jseward))\n- Fix warning C4706 on Visual Studio 2017 [\\#785](https://github.com/nlohmann/json/pull/785) ([jseward](https://github.com/jseward))\n- Set GENERATE\\_TAGFILE in Doxyfile [\\#783](https://github.com/nlohmann/json/pull/783) ([eld00d](https://github.com/eld00d))\n- using more CMake [\\#765](https://github.com/nlohmann/json/pull/765) ([nlohmann](https://github.com/nlohmann))\n- Simplified istream handing \\#367 [\\#764](https://github.com/nlohmann/json/pull/764) ([pjkundert](https://github.com/pjkundert))\n- Add info for the vcpkg package. [\\#753](https://github.com/nlohmann/json/pull/753) ([gregmarr](https://github.com/gregmarr))\n- fix from\\_json implementation for pair/tuple [\\#708](https://github.com/nlohmann/json/pull/708) ([theodelrieu](https://github.com/theodelrieu))\n- Update json.hpp [\\#686](https://github.com/nlohmann/json/pull/686) ([GoWebProd](https://github.com/GoWebProd))\n- Remove duplicate word [\\#685](https://github.com/nlohmann/json/pull/685) ([daixtrose](https://github.com/daixtrose))\n- To fix compilation issue for intel OSX compiler [\\#682](https://github.com/nlohmann/json/pull/682) ([kbthomp1](https://github.com/kbthomp1))\n- Digraph warning [\\#679](https://github.com/nlohmann/json/pull/679) ([traits](https://github.com/traits))\n- massage -\\> message [\\#678](https://github.com/nlohmann/json/pull/678) ([DmitryKuk](https://github.com/DmitryKuk))\n- Fix \"not constraint\" grammar in docs [\\#674](https://github.com/nlohmann/json/pull/674) ([wincent](https://github.com/wincent))\n- Add documentation for integration with CMake and hunter [\\#671](https://github.com/nlohmann/json/pull/671) ([dan-42](https://github.com/dan-42))\n- REFACTOR: rewrite CMakeLists.txt for better inlcude and reuse [\\#669](https://github.com/nlohmann/json/pull/669) ([dan-42](https://github.com/dan-42))\n- enable\\_testing only if the JSON\\_BuildTests is ON [\\#666](https://github.com/nlohmann/json/pull/666) ([effolkronium](https://github.com/effolkronium))\n- Support moving from rvalues in std::initializer\\_list [\\#663](https://github.com/nlohmann/json/pull/663) ([himikof](https://github.com/himikof))\n- add ensure\\_ascii parameter to dump. \\#330 [\\#654](https://github.com/nlohmann/json/pull/654) ([ryanjmulder](https://github.com/ryanjmulder))\n- Rename BuildTests to JSON\\_BuildTests [\\#652](https://github.com/nlohmann/json/pull/652) ([olegendo](https://github.com/olegendo))\n- Don't include \\<iostream\\>, use std::make\\_shared [\\#650](https://github.com/nlohmann/json/pull/650) ([olegendo](https://github.com/olegendo))\n- Refacto/split basic json [\\#643](https://github.com/nlohmann/json/pull/643) ([theodelrieu](https://github.com/theodelrieu))\n- fix typo in operator\\_\\_notequal example [\\#630](https://github.com/nlohmann/json/pull/630) ([Chocobo1](https://github.com/Chocobo1))\n- Fix MSVC warning C4819 [\\#629](https://github.com/nlohmann/json/pull/629) ([Chocobo1](https://github.com/Chocobo1))\n- \\[BugFix\\] Add parentheses around std::min [\\#626](https://github.com/nlohmann/json/pull/626) ([koemeet](https://github.com/koemeet))\n- add pair/tuple conversions [\\#624](https://github.com/nlohmann/json/pull/624) ([theodelrieu](https://github.com/theodelrieu))\n- remove std::pair support [\\#615](https://github.com/nlohmann/json/pull/615) ([theodelrieu](https://github.com/theodelrieu))\n- Add pair support, fix CompatibleObject conversions \\(fixes \\#600\\) [\\#609](https://github.com/nlohmann/json/pull/609) ([theodelrieu](https://github.com/theodelrieu))\n- \\#550 Fix iterator related compiling issues for Intel icc [\\#598](https://github.com/nlohmann/json/pull/598) ([HenryRLee](https://github.com/HenryRLee))\n- Issue \\#593 Fix the arithmetic operators in the iterator and reverse iterator [\\#595](https://github.com/nlohmann/json/pull/595) ([HenryRLee](https://github.com/HenryRLee))\n- fix doxygen error of basic\\_json::get\\(\\) [\\#583](https://github.com/nlohmann/json/pull/583) ([zhaohuaxishi](https://github.com/zhaohuaxishi))\n- Fixing assignement for iterator wrapper second, and adding unit test [\\#579](https://github.com/nlohmann/json/pull/579) ([Type1J](https://github.com/Type1J))\n- Adding first and second properties to iteration\\_proxy\\_internal [\\#578](https://github.com/nlohmann/json/pull/578) ([Type1J](https://github.com/Type1J))\n- Adding support for Meson. [\\#576](https://github.com/nlohmann/json/pull/576) ([Type1J](https://github.com/Type1J))\n- add enum class default conversions [\\#545](https://github.com/nlohmann/json/pull/545) ([theodelrieu](https://github.com/theodelrieu))\n- Properly pop diagnostics [\\#540](https://github.com/nlohmann/json/pull/540) ([tinloaf](https://github.com/tinloaf))\n- Add Visual Studio 17 image to appveyor build matrix [\\#536](https://github.com/nlohmann/json/pull/536) ([vpetrigo](https://github.com/vpetrigo))\n- UTF8 encoding enhancement [\\#534](https://github.com/nlohmann/json/pull/534) ([TedLyngmo](https://github.com/TedLyngmo))\n- Fix typo [\\#530](https://github.com/nlohmann/json/pull/530) ([berkus](https://github.com/berkus))\n- Make exception base class visible in basic\\_json [\\#526](https://github.com/nlohmann/json/pull/526) ([ghost](https://github.com/ghost))\n- :art: Namespace `uint8_t` from the C++ stdlib [\\#510](https://github.com/nlohmann/json/pull/510) ([alexweej](https://github.com/alexweej))\n- add to\\_json method for C arrays [\\#508](https://github.com/nlohmann/json/pull/508) ([theodelrieu](https://github.com/theodelrieu))\n- Fix -Weffc++ warnings \\(GNU 6.3.1\\) [\\#496](https://github.com/nlohmann/json/pull/496) ([TedLyngmo](https://github.com/TedLyngmo))\n\n## [v2.1.1](https://github.com/nlohmann/json/releases/tag/v2.1.1) (2017-02-25)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/2.1.1...v2.1.1)\n\n## [2.1.1](https://github.com/nlohmann/json/releases/tag/2.1.1) (2017-02-25)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v2.1.0...2.1.1)\n\n- warning in the library [\\#472](https://github.com/nlohmann/json/issues/472)\n- How to create an array of Objects? [\\#470](https://github.com/nlohmann/json/issues/470)\n- \\[Bug?\\] Cannot get int pointer, but int64\\_t works [\\#468](https://github.com/nlohmann/json/issues/468)\n- Illegal indirection [\\#467](https://github.com/nlohmann/json/issues/467)\n- in vs can't find linkageId   [\\#466](https://github.com/nlohmann/json/issues/466)\n- Roundtrip error while parsing \"1000000000000000010E5\" [\\#465](https://github.com/nlohmann/json/issues/465)\n- C4996 error and warning with Visual Studio [\\#463](https://github.com/nlohmann/json/issues/463)\n- Support startIndex for from\\_cbor/from\\_msgpack [\\#462](https://github.com/nlohmann/json/issues/462)\n- question: monospace font used in feature slideshow? [\\#460](https://github.com/nlohmann/json/issues/460)\n- Object.keys\\(\\) [\\#459](https://github.com/nlohmann/json/issues/459)\n- Use “, “ as delimiter for json-objects. [\\#457](https://github.com/nlohmann/json/issues/457)\n- Enum -\\> string during serialization and vice versa [\\#455](https://github.com/nlohmann/json/issues/455)\n- doubles are printed as integers [\\#454](https://github.com/nlohmann/json/issues/454)\n- Warnings with Visual Studio c++ \\(VS2015 Update 3\\) [\\#453](https://github.com/nlohmann/json/issues/453)\n- Heap-buffer-overflow \\(OSS-Fuzz issue 585\\) [\\#452](https://github.com/nlohmann/json/issues/452)\n- use of undeclared identifier 'UINT8\\_MAX' [\\#451](https://github.com/nlohmann/json/issues/451)\n- Question on the lifetime managment of objects at the lower levels [\\#449](https://github.com/nlohmann/json/issues/449)\n- Json should not be constructible with 'json\\*' [\\#448](https://github.com/nlohmann/json/issues/448)\n- Move value\\_t to namespace scope [\\#447](https://github.com/nlohmann/json/issues/447)\n- Typo in README.md [\\#446](https://github.com/nlohmann/json/issues/446)\n- make check compilation is unneccesarily slow [\\#445](https://github.com/nlohmann/json/issues/445)\n- Problem in dump\\(\\) in json.h caused by ss.imbue [\\#444](https://github.com/nlohmann/json/issues/444)\n- I want to create Windows Application in Visual Studio 2015 c++, and i have a problem [\\#443](https://github.com/nlohmann/json/issues/443)\n- Implicit conversion issues [\\#442](https://github.com/nlohmann/json/issues/442)\n- Parsing of floats locale dependent [\\#302](https://github.com/nlohmann/json/issues/302)\n\n- Speedup CI builds using cotire [\\#461](https://github.com/nlohmann/json/pull/461) ([tusharpm](https://github.com/tusharpm))\n- TurpentineDistillery feature/locale independent str to num [\\#450](https://github.com/nlohmann/json/pull/450) ([nlohmann](https://github.com/nlohmann))\n- README: adjust boost::optional example [\\#439](https://github.com/nlohmann/json/pull/439) ([jaredgrubb](https://github.com/jaredgrubb))\n- fix \\#414 - comparing to 0 literal [\\#415](https://github.com/nlohmann/json/pull/415) ([stanmihai4](https://github.com/stanmihai4))\n- locale-independent num-to-str [\\#378](https://github.com/nlohmann/json/pull/378) ([TurpentineDistillery](https://github.com/TurpentineDistillery))\n\n## [v2.1.0](https://github.com/nlohmann/json/releases/tag/v2.1.0) (2017-01-28)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/2.1.0...v2.1.0)\n\n## [2.1.0](https://github.com/nlohmann/json/releases/tag/2.1.0) (2017-01-28)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v2.0.10...2.1.0)\n\n- Parsing multiple JSON objects from a string or stream [\\#438](https://github.com/nlohmann/json/issues/438)\n- Use-of-uninitialized-value \\(OSS-Fuzz issue 477\\) [\\#437](https://github.com/nlohmann/json/issues/437)\n- add `reserve` function for array to reserve memory before adding json values into it [\\#436](https://github.com/nlohmann/json/issues/436)\n- Typo in examples page [\\#434](https://github.com/nlohmann/json/issues/434)\n- avoid malformed json [\\#433](https://github.com/nlohmann/json/issues/433)\n- How to add json objects to a map? [\\#432](https://github.com/nlohmann/json/issues/432)\n- create json instance from raw json \\(unsigned char\\*\\) [\\#431](https://github.com/nlohmann/json/issues/431)\n- Getting std::invalid\\_argument: stream error when following example [\\#429](https://github.com/nlohmann/json/issues/429)\n- Forward declare-only header? [\\#427](https://github.com/nlohmann/json/issues/427)\n- Implicit conversion from array to object [\\#425](https://github.com/nlohmann/json/issues/425)\n- error C4996: 'strerror' when reading file [\\#422](https://github.com/nlohmann/json/issues/422)\n- Get an error - JSON pointer must be empty or begin with '/' [\\#421](https://github.com/nlohmann/json/issues/421)\n- size parameter for parse\\(\\) [\\#419](https://github.com/nlohmann/json/issues/419)\n- json.hpp forcibly defines GCC\\_VERSION [\\#417](https://github.com/nlohmann/json/issues/417)\n- Use-of-uninitialized-value \\(OSS-Fuzz issue 377\\) [\\#416](https://github.com/nlohmann/json/issues/416)\n- comparing to 0 literal [\\#414](https://github.com/nlohmann/json/issues/414)\n- Single char converted to ASCII code instead of string [\\#413](https://github.com/nlohmann/json/issues/413)\n- How to know if a string  was parsed as utf-8? [\\#406](https://github.com/nlohmann/json/issues/406)\n- Overloaded += to add objects to an array makes no sense? [\\#404](https://github.com/nlohmann/json/issues/404)\n- Finding a value in an array [\\#399](https://github.com/nlohmann/json/issues/399)\n- add release information in static function [\\#397](https://github.com/nlohmann/json/issues/397)\n- Optimize memory usage of json objects in combination with binary serialization [\\#373](https://github.com/nlohmann/json/issues/373)\n- Conversion operators not considered [\\#369](https://github.com/nlohmann/json/issues/369)\n- Append \".0\" to serialized floating\\_point values that are digits-only. [\\#362](https://github.com/nlohmann/json/issues/362)\n- Add a customization point for user-defined types [\\#328](https://github.com/nlohmann/json/issues/328)\n- Conformance report for reference [\\#307](https://github.com/nlohmann/json/issues/307)\n- Document the best way to serialize/deserialize user defined types to json [\\#298](https://github.com/nlohmann/json/issues/298)\n- Add StringView template typename to basic\\_json [\\#297](https://github.com/nlohmann/json/issues/297)\n- \\[Improvement\\] Add option to remove exceptions [\\#296](https://github.com/nlohmann/json/issues/296)\n- Performance in miloyip/nativejson-benchmark [\\#202](https://github.com/nlohmann/json/issues/202)\n\n- conversion from/to user-defined types [\\#435](https://github.com/nlohmann/json/pull/435) ([nlohmann](https://github.com/nlohmann))\n- Fix documentation error [\\#430](https://github.com/nlohmann/json/pull/430) ([vjon](https://github.com/vjon))\n\n## [v2.0.10](https://github.com/nlohmann/json/releases/tag/v2.0.10) (2017-01-02)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/2.0.10...v2.0.10)\n\n## [2.0.10](https://github.com/nlohmann/json/releases/tag/2.0.10) (2017-01-02)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v2.0.9...2.0.10)\n\n- Heap-buffer-overflow \\(OSS-Fuzz issue 367\\) [\\#412](https://github.com/nlohmann/json/issues/412)\n- Heap-buffer-overflow \\(OSS-Fuzz issue 366\\) [\\#411](https://github.com/nlohmann/json/issues/411)\n- Use-of-uninitialized-value \\(OSS-Fuzz issue 347\\) [\\#409](https://github.com/nlohmann/json/issues/409)\n- Heap-buffer-overflow \\(OSS-Fuzz issue 344\\) [\\#408](https://github.com/nlohmann/json/issues/408)\n- Heap-buffer-overflow \\(OSS-Fuzz issue 343\\) [\\#407](https://github.com/nlohmann/json/issues/407)\n- Heap-buffer-overflow \\(OSS-Fuzz issue 342\\) [\\#405](https://github.com/nlohmann/json/issues/405)\n- strerror throwing error in compiler VS2015 [\\#403](https://github.com/nlohmann/json/issues/403)\n- json::parse of std::string being underlined by Visual Studio [\\#402](https://github.com/nlohmann/json/issues/402)\n- Explicitly getting string without .dump\\(\\)  [\\#401](https://github.com/nlohmann/json/issues/401)\n- Possible to speed up json::parse? [\\#398](https://github.com/nlohmann/json/issues/398)\n- the alphabetic order in the code influence console\\_output. [\\#396](https://github.com/nlohmann/json/issues/396)\n- Execute tests with clang sanitizers [\\#394](https://github.com/nlohmann/json/issues/394)\n- Check if library can be used with ETL [\\#361](https://github.com/nlohmann/json/issues/361)\n\n- Feature/clang sanitize [\\#410](https://github.com/nlohmann/json/pull/410) ([Daniel599](https://github.com/Daniel599))\n- Add Doozer build badge [\\#400](https://github.com/nlohmann/json/pull/400) ([andoma](https://github.com/andoma))\n\n## [v2.0.9](https://github.com/nlohmann/json/releases/tag/v2.0.9) (2016-12-16)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/2.0.9...v2.0.9)\n\n## [2.0.9](https://github.com/nlohmann/json/releases/tag/2.0.9) (2016-12-16)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v2.0.8...2.0.9)\n\n- \\#pragma GCC diagnostic ignored \"-Wdocumentation\" [\\#393](https://github.com/nlohmann/json/issues/393)\n- How to parse this json file and write separate sub object as json files? [\\#392](https://github.com/nlohmann/json/issues/392)\n- Integer-overflow \\(OSS-Fuzz issue 267\\) [\\#389](https://github.com/nlohmann/json/issues/389)\n- Implement indefinite-length types from RFC 7049 [\\#387](https://github.com/nlohmann/json/issues/387)\n- template parameter \"T\" is not used in declaring the parameter types of function template [\\#386](https://github.com/nlohmann/json/issues/386)\n- Serializing json instances containing already serialized string values without escaping [\\#385](https://github.com/nlohmann/json/issues/385)\n- Add test cases from RFC 7049 [\\#384](https://github.com/nlohmann/json/issues/384)\n- Add a table of contents to the README file [\\#383](https://github.com/nlohmann/json/issues/383)\n- Update FAQ section in the guidelines for contributing [\\#382](https://github.com/nlohmann/json/issues/382)\n- Allow for forward declaring nlohmann::json [\\#381](https://github.com/nlohmann/json/issues/381)\n- Bug in overflow detection when parsing integers [\\#380](https://github.com/nlohmann/json/issues/380)\n- A unique name to mention the library? [\\#377](https://github.com/nlohmann/json/issues/377)\n- Non-unique keys in objects. [\\#375](https://github.com/nlohmann/json/issues/375)\n- Request: binary serialization/deserialization [\\#358](https://github.com/nlohmann/json/issues/358)\n\n- Replace class iterator and const\\_iterator by using a single template class to reduce code. [\\#395](https://github.com/nlohmann/json/pull/395) ([Bosswestfalen](https://github.com/Bosswestfalen))\n- Clang: quiet a warning [\\#391](https://github.com/nlohmann/json/pull/391) ([jaredgrubb](https://github.com/jaredgrubb))\n- Fix issue \\#380: Signed integer overflow check [\\#390](https://github.com/nlohmann/json/pull/390) ([qwename](https://github.com/qwename))\n\n## [v2.0.8](https://github.com/nlohmann/json/releases/tag/v2.0.8) (2016-12-02)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/2.0.8...v2.0.8)\n\n## [2.0.8](https://github.com/nlohmann/json/releases/tag/2.0.8) (2016-12-02)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v2.0.7...2.0.8)\n\n- Reading from file [\\#374](https://github.com/nlohmann/json/issues/374)\n- Compiler warnings? [\\#372](https://github.com/nlohmann/json/issues/372)\n- docs: how to release a json object in memory? [\\#371](https://github.com/nlohmann/json/issues/371)\n- crash in dump [\\#370](https://github.com/nlohmann/json/issues/370)\n- Coverity issue \\(FORWARD\\_NULL\\) in lexer\\(std::istream& s\\) [\\#368](https://github.com/nlohmann/json/issues/368)\n- json::parse on failed stream gets stuck [\\#366](https://github.com/nlohmann/json/issues/366)\n- Performance improvements [\\#365](https://github.com/nlohmann/json/issues/365)\n- 'to\\_string' is not a member of 'std'  [\\#364](https://github.com/nlohmann/json/issues/364)\n- Crash in dump\\(\\) from a static object [\\#359](https://github.com/nlohmann/json/issues/359)\n- json::parse\\(...\\) vs json j; j.parse\\(...\\) [\\#357](https://github.com/nlohmann/json/issues/357)\n- Hi, is there any method to dump  json to string with the insert order rather than alphabets [\\#356](https://github.com/nlohmann/json/issues/356)\n- Provide an example of reading from an json with only a key that has an array of strings. [\\#354](https://github.com/nlohmann/json/issues/354)\n- Request: access with default value. [\\#353](https://github.com/nlohmann/json/issues/353)\n- {} and \\[\\] causes parser error. [\\#352](https://github.com/nlohmann/json/issues/352)\n- Reading a JSON file into a JSON object [\\#351](https://github.com/nlohmann/json/issues/351)\n- Request: 'emplace\\_back' [\\#349](https://github.com/nlohmann/json/issues/349)\n- Is it possible to stream data through the json parser without storing everything in memory? [\\#347](https://github.com/nlohmann/json/issues/347)\n- pure virtual conversion operator [\\#346](https://github.com/nlohmann/json/issues/346)\n- Floating point precision lost [\\#345](https://github.com/nlohmann/json/issues/345)\n- unit-conversions SIGSEGV on armv7hl [\\#303](https://github.com/nlohmann/json/issues/303)\n- Coverity scan fails [\\#299](https://github.com/nlohmann/json/issues/299)\n- Using QString as string type [\\#274](https://github.com/nlohmann/json/issues/274)\n\n## [v2.0.7](https://github.com/nlohmann/json/releases/tag/v2.0.7) (2016-11-02)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v2.0.6...v2.0.7)\n\n- JSON5 [\\#348](https://github.com/nlohmann/json/issues/348)\n- Check \"Parsing JSON is a Minefield\" [\\#344](https://github.com/nlohmann/json/issues/344)\n- Allow hex numbers [\\#342](https://github.com/nlohmann/json/issues/342)\n- Convert strings to numbers [\\#341](https://github.com/nlohmann/json/issues/341)\n- \"\"-operators ignore the length parameter [\\#340](https://github.com/nlohmann/json/issues/340)\n- JSON into std::tuple [\\#339](https://github.com/nlohmann/json/issues/339)\n- JSON into vector [\\#335](https://github.com/nlohmann/json/issues/335)\n- Installing with Homebrew on Mac Errors \\(El Capitan\\) [\\#331](https://github.com/nlohmann/json/issues/331)\n- g++ make check results in error [\\#312](https://github.com/nlohmann/json/issues/312)\n- Cannot convert from 'json' to 'char' [\\#276](https://github.com/nlohmann/json/issues/276)\n- Please add a Pretty-Print option for arrays to stay always in one line [\\#229](https://github.com/nlohmann/json/issues/229)\n- Conversion to STL map\\<string, vector\\<int\\>\\> gives error [\\#220](https://github.com/nlohmann/json/issues/220)\n- std::unorderd\\_map cannot be used as ObjectType [\\#164](https://github.com/nlohmann/json/issues/164)\n\n- fix minor grammar/style issue in README.md [\\#336](https://github.com/nlohmann/json/pull/336) ([seeekr](https://github.com/seeekr))\n\n## [v2.0.6](https://github.com/nlohmann/json/releases/tag/v2.0.6) (2016-10-15)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v2.0.5...v2.0.6)\n\n- How to handle json files? [\\#333](https://github.com/nlohmann/json/issues/333)\n- This file requires compiler and library support .... [\\#332](https://github.com/nlohmann/json/issues/332)\n- Segmentation fault on saving json to file [\\#326](https://github.com/nlohmann/json/issues/326)\n- parse error - unexpected \\<uninitialized\\> with 2.0.5 [\\#325](https://github.com/nlohmann/json/issues/325)\n- Add nested object capability to pointers [\\#323](https://github.com/nlohmann/json/issues/323)\n- Fix usage examples' comments for std::multiset [\\#322](https://github.com/nlohmann/json/issues/322)\n- json\\_unit runs forever when executed in build directory [\\#319](https://github.com/nlohmann/json/issues/319)\n- Visual studio 2015 update3 true != TRUE [\\#317](https://github.com/nlohmann/json/issues/317)\n- releasing single header file in compressed format [\\#316](https://github.com/nlohmann/json/issues/316)\n- json object from std::ifstream [\\#315](https://github.com/nlohmann/json/issues/315)\n\n- make has\\_mapped\\_type struct friendly [\\#324](https://github.com/nlohmann/json/pull/324) ([vpetrigo](https://github.com/vpetrigo))\n- Fix usage examples' comments for std::multiset [\\#321](https://github.com/nlohmann/json/pull/321) ([vasild](https://github.com/vasild))\n- Include dir relocation [\\#318](https://github.com/nlohmann/json/pull/318) ([ChristophJud](https://github.com/ChristophJud))\n- trivial documentation fix [\\#313](https://github.com/nlohmann/json/pull/313) ([5tefan](https://github.com/5tefan))\n\n## [v2.0.5](https://github.com/nlohmann/json/releases/tag/v2.0.5) (2016-09-14)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v2.0.4...v2.0.5)\n\n- \\[feature request\\]: schema validator and comments [\\#311](https://github.com/nlohmann/json/issues/311)\n- make json\\_benchmarks no longer working in 2.0.4 [\\#310](https://github.com/nlohmann/json/issues/310)\n- Segmentation fault \\(core dumped\\) [\\#309](https://github.com/nlohmann/json/issues/309)\n- No matching member function for call to 'get\\_impl' [\\#308](https://github.com/nlohmann/json/issues/308)\n\n## [v2.0.4](https://github.com/nlohmann/json/releases/tag/v2.0.4) (2016-09-11)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v2.0.3...v2.0.4)\n\n- Parsing fails without space at end of file [\\#306](https://github.com/nlohmann/json/issues/306)\n- json schema validator [\\#305](https://github.com/nlohmann/json/issues/305)\n- Unused variable warning [\\#304](https://github.com/nlohmann/json/issues/304)\n\n## [v2.0.3](https://github.com/nlohmann/json/releases/tag/v2.0.3) (2016-08-31)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v2.0.2...v2.0.3)\n\n- warning C4706: assignment within conditional expression [\\#295](https://github.com/nlohmann/json/issues/295)\n- Q: Is it possible to build json tree from already UTF8 encoded values? [\\#293](https://github.com/nlohmann/json/issues/293)\n- Equality operator results in array when assigned object [\\#292](https://github.com/nlohmann/json/issues/292)\n- Support for integers not from the range \\[-\\(2\\*\\*53\\)+1, \\(2\\*\\*53\\)-1\\] in parser [\\#291](https://github.com/nlohmann/json/issues/291)\n- Support for iterator-range parsing [\\#290](https://github.com/nlohmann/json/issues/290)\n- Horribly inconsistent behavior between const/non-const reference in operator \\[\\] \\(\\) [\\#289](https://github.com/nlohmann/json/issues/289)\n- Silently get numbers into smaller types [\\#288](https://github.com/nlohmann/json/issues/288)\n- Incorrect parsing of large int64\\_t numbers [\\#287](https://github.com/nlohmann/json/issues/287)\n- \\[question\\]: macro to disable floating point support [\\#284](https://github.com/nlohmann/json/issues/284)\n\n- unit-constructor1.cpp: Fix floating point truncation warning [\\#300](https://github.com/nlohmann/json/pull/300) ([t-b](https://github.com/t-b))\n\n## [v2.0.2](https://github.com/nlohmann/json/releases/tag/v2.0.2) (2016-07-31)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v2.0.1...v2.0.2)\n\n- can function dump\\(\\)  return string in the order I push in the json object ? [\\#286](https://github.com/nlohmann/json/issues/286)\n- Error on the Mac: Undefined symbols for architecture x86\\_64 [\\#285](https://github.com/nlohmann/json/issues/285)\n- value\\(\\) does not work with \\_json\\_pointer types [\\#283](https://github.com/nlohmann/json/issues/283)\n- Build error for std::int64 [\\#282](https://github.com/nlohmann/json/issues/282)\n- strings can't be accessed after dump\\(\\)-\\>parse\\(\\) - type is lost [\\#281](https://github.com/nlohmann/json/issues/281)\n- Easy serialization of classes [\\#280](https://github.com/nlohmann/json/issues/280)\n- recursive data structures [\\#277](https://github.com/nlohmann/json/issues/277)\n- hexify\\(\\) function emits conversion warning [\\#270](https://github.com/nlohmann/json/issues/270)\n\n- let the makefile choose the correct sed [\\#279](https://github.com/nlohmann/json/pull/279) ([murinicanor](https://github.com/murinicanor))\n- Update hexify to use array lookup instead of ternary \\(\\#270\\) [\\#275](https://github.com/nlohmann/json/pull/275) ([dtoma](https://github.com/dtoma))\n\n## [v2.0.1](https://github.com/nlohmann/json/releases/tag/v2.0.1) (2016-06-28)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v2.0.0...v2.0.1)\n\n- Compilation error. [\\#273](https://github.com/nlohmann/json/issues/273)\n- dump\\(\\) performance degradation in v2 [\\#272](https://github.com/nlohmann/json/issues/272)\n\n- fixed a tiny typo [\\#271](https://github.com/nlohmann/json/pull/271) ([feroldi](https://github.com/feroldi))\n\n## [v2.0.0](https://github.com/nlohmann/json/releases/tag/v2.0.0) (2016-06-23)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v1.1.0...v2.0.0)\n\n- json::diff generates incorrect patch when removing multiple array elements. [\\#269](https://github.com/nlohmann/json/issues/269)\n- Docs - What does Json\\[key\\] return? [\\#267](https://github.com/nlohmann/json/issues/267)\n- Compiler Errors With JSON.hpp [\\#265](https://github.com/nlohmann/json/issues/265)\n- Ambiguous push\\_back and operator+= overloads [\\#263](https://github.com/nlohmann/json/issues/263)\n- Preseving order of items in json [\\#262](https://github.com/nlohmann/json/issues/262)\n- '\\' char problem in strings [\\#261](https://github.com/nlohmann/json/issues/261)\n- VS2015 compile fail [\\#260](https://github.com/nlohmann/json/issues/260)\n- -Wconversion warning [\\#259](https://github.com/nlohmann/json/issues/259)\n- Maybe a bug [\\#258](https://github.com/nlohmann/json/issues/258)\n- Few tests failed on Visual C++ 2015 [\\#257](https://github.com/nlohmann/json/issues/257)\n- Access keys when iteration with new for loop C++11 [\\#256](https://github.com/nlohmann/json/issues/256)\n- multiline text values [\\#255](https://github.com/nlohmann/json/issues/255)\n- Error when using json in g++ [\\#254](https://github.com/nlohmann/json/issues/254)\n- is the release 2.0? [\\#253](https://github.com/nlohmann/json/issues/253)\n- concatenate objects [\\#252](https://github.com/nlohmann/json/issues/252)\n- Encoding [\\#251](https://github.com/nlohmann/json/issues/251)\n- Unable to build example for constructing json object with stringstreams [\\#250](https://github.com/nlohmann/json/issues/250)\n- Hexadecimal support [\\#249](https://github.com/nlohmann/json/issues/249)\n- Update long-term goals [\\#246](https://github.com/nlohmann/json/issues/246)\n- Contribution To This Json Project [\\#245](https://github.com/nlohmann/json/issues/245)\n- Trouble using parser with initial dictionary [\\#243](https://github.com/nlohmann/json/issues/243)\n- Unit test fails when doing a CMake out-of-tree build [\\#241](https://github.com/nlohmann/json/issues/241)\n- -Wconversion warnings [\\#239](https://github.com/nlohmann/json/issues/239)\n- Additional integration options [\\#237](https://github.com/nlohmann/json/issues/237)\n- .get\\<std::string\\>\\(\\) works for non spaced string but returns as array for spaced/longer strings [\\#236](https://github.com/nlohmann/json/issues/236)\n- ambiguous overload for 'push\\_back' and 'operator+=' [\\#235](https://github.com/nlohmann/json/issues/235)\n- Can't use basic\\_json::iterator as a base iterator for std::move\\_iterator [\\#233](https://github.com/nlohmann/json/issues/233)\n- json object's creation can freezes execution [\\#231](https://github.com/nlohmann/json/issues/231)\n- Incorrect dumping of parsed numbers with exponents, but without decimal places [\\#230](https://github.com/nlohmann/json/issues/230)\n- double values are serialized with commas as decimal points [\\#228](https://github.com/nlohmann/json/issues/228)\n- Move semantics with std::initializer\\_list [\\#225](https://github.com/nlohmann/json/issues/225)\n- replace emplace [\\#224](https://github.com/nlohmann/json/issues/224)\n- abort during getline in yyfill [\\#223](https://github.com/nlohmann/json/issues/223)\n- free\\(\\): invalid pointer error in GCC 5.2.1 [\\#221](https://github.com/nlohmann/json/issues/221)\n- Error compile Android NDK  error: 'strtof' is not a member of 'std' [\\#219](https://github.com/nlohmann/json/issues/219)\n- Wrong link in the README.md [\\#217](https://github.com/nlohmann/json/issues/217)\n- Wide character strings not supported [\\#216](https://github.com/nlohmann/json/issues/216)\n- Memory allocations using range-based for loops [\\#214](https://github.com/nlohmann/json/issues/214)\n- would you like to support gcc 4.8.1?  [\\#211](https://github.com/nlohmann/json/issues/211)\n- Reading concatenated json's from an istream [\\#210](https://github.com/nlohmann/json/issues/210)\n- Conflicting typedef of ssize\\_t on Windows 32 bit when using Boost.Python [\\#204](https://github.com/nlohmann/json/issues/204)\n- Inconsistency between operator\\[\\] and push\\_back [\\#203](https://github.com/nlohmann/json/issues/203)\n- Small bugs in json.hpp \\(get\\_number\\) and unit.cpp \\(non-standard integer type test\\) [\\#199](https://github.com/nlohmann/json/issues/199)\n- GCC/clang floating point parsing bug in strtod\\(\\) [\\#195](https://github.com/nlohmann/json/issues/195)\n- What is within scope? [\\#192](https://github.com/nlohmann/json/issues/192)\n- Bugs in miloyip/nativejson-benchmark: roundtrips [\\#187](https://github.com/nlohmann/json/issues/187)\n- Floating point exceptions [\\#181](https://github.com/nlohmann/json/issues/181)\n- Integer conversion to unsigned [\\#178](https://github.com/nlohmann/json/issues/178)\n- map string string fails to compile [\\#176](https://github.com/nlohmann/json/issues/176)\n- In basic\\_json::basic\\_json\\(const CompatibleArrayType& val\\), the requirement of CompatibleArrayType is not strict enough. [\\#174](https://github.com/nlohmann/json/issues/174)\n- Provide a FAQ [\\#163](https://github.com/nlohmann/json/issues/163)\n- Implicit assignment to std::string fails [\\#144](https://github.com/nlohmann/json/issues/144)\n\n- Fix Issue \\#265 [\\#266](https://github.com/nlohmann/json/pull/266) ([06needhamt](https://github.com/06needhamt))\n- Define CMake/CTest tests [\\#247](https://github.com/nlohmann/json/pull/247) ([robertmrk](https://github.com/robertmrk))\n- Out of tree builds and a few other miscellaneous CMake cleanups. [\\#242](https://github.com/nlohmann/json/pull/242) ([ChrisKitching](https://github.com/ChrisKitching))\n- Implement additional integration options [\\#238](https://github.com/nlohmann/json/pull/238) ([robertmrk](https://github.com/robertmrk))\n- make serialization locale-independent [\\#232](https://github.com/nlohmann/json/pull/232) ([nlohmann](https://github.com/nlohmann))\n- fixes \\#223 by updating README.md [\\#227](https://github.com/nlohmann/json/pull/227) ([kevin--](https://github.com/kevin--))\n- Use namespace std for int64\\_t and uint64\\_t [\\#226](https://github.com/nlohmann/json/pull/226) ([lv-zheng](https://github.com/lv-zheng))\n- Added missing cerrno header to fix ERANGE compile error on android [\\#222](https://github.com/nlohmann/json/pull/222) ([Teemperor](https://github.com/Teemperor))\n- Corrected readme [\\#218](https://github.com/nlohmann/json/pull/218) ([Annihil](https://github.com/Annihil))\n- Create PULL\\_REQUEST\\_TEMPLATE.md [\\#213](https://github.com/nlohmann/json/pull/213) ([whackashoe](https://github.com/whackashoe))\n- fixed noexcept; added constexpr [\\#208](https://github.com/nlohmann/json/pull/208) ([nlohmann](https://github.com/nlohmann))\n- Add support for afl-fuzz testing [\\#207](https://github.com/nlohmann/json/pull/207) ([mykter](https://github.com/mykter))\n- replaced ssize\\_t occurrences with auto \\(addresses \\#204\\) [\\#205](https://github.com/nlohmann/json/pull/205) ([nlohmann](https://github.com/nlohmann))\n- Fixed issue \\#199 - Small bugs in json.hpp \\(get\\_number\\) and unit.cpp \\(non-standard integer type test\\) [\\#200](https://github.com/nlohmann/json/pull/200) ([twelsby](https://github.com/twelsby))\n- Fix broken link [\\#197](https://github.com/nlohmann/json/pull/197) ([vog](https://github.com/vog))\n- Issue \\#195 - update Travis to Trusty due to gcc/clang strtod\\(\\) bug [\\#196](https://github.com/nlohmann/json/pull/196) ([twelsby](https://github.com/twelsby))\n- Issue \\#178 - Extending support to full uint64\\_t/int64\\_t range and unsigned type \\(updated\\) [\\#193](https://github.com/nlohmann/json/pull/193) ([twelsby](https://github.com/twelsby))\n\n## [v1.1.0](https://github.com/nlohmann/json/releases/tag/v1.1.0) (2016-01-24)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v1.0.0...v1.1.0)\n\n- Small error in pull \\#185 [\\#194](https://github.com/nlohmann/json/issues/194)\n- Bugs in miloyip/nativejson-benchmark: floating-point parsing [\\#186](https://github.com/nlohmann/json/issues/186)\n- Floating point equality [\\#185](https://github.com/nlohmann/json/issues/185)\n- Unused variables in catch [\\#180](https://github.com/nlohmann/json/issues/180)\n- Typo in documentation [\\#179](https://github.com/nlohmann/json/issues/179)\n- JSON performance benchmark comparision [\\#177](https://github.com/nlohmann/json/issues/177)\n- Since re2c is often ignored in pull requests, it may make sense to make a contributing.md file [\\#175](https://github.com/nlohmann/json/issues/175)\n- Question about exceptions [\\#173](https://github.com/nlohmann/json/issues/173)\n- Android? [\\#172](https://github.com/nlohmann/json/issues/172)\n- Cannot index by key of type static constexpr const char\\* [\\#171](https://github.com/nlohmann/json/issues/171)\n- Add assertions [\\#168](https://github.com/nlohmann/json/issues/168)\n- MSVC 2015 build fails when attempting to compare object\\_t [\\#167](https://github.com/nlohmann/json/issues/167)\n- Member detector is not portable [\\#166](https://github.com/nlohmann/json/issues/166)\n- Unnecessary const\\_cast [\\#162](https://github.com/nlohmann/json/issues/162)\n- Question about get\\_ref\\(\\) [\\#128](https://github.com/nlohmann/json/issues/128)\n- range based for loop for objects [\\#83](https://github.com/nlohmann/json/issues/83)\n- Consider submitting this to the Boost Library Incubator [\\#66](https://github.com/nlohmann/json/issues/66)\n\n- Fixed Issue \\#186 - add strto\\(f|d|ld\\) overload wrappers, \"-0.0\" special case and FP trailing zero [\\#191](https://github.com/nlohmann/json/pull/191) ([twelsby](https://github.com/twelsby))\n- Issue \\#185 - remove approx\\(\\) and use \\#pragma to kill warnings [\\#190](https://github.com/nlohmann/json/pull/190) ([twelsby](https://github.com/twelsby))\n- Fixed Issue \\#171 - added two extra template overloads of operator\\[\\] for T\\* arguments [\\#189](https://github.com/nlohmann/json/pull/189) ([twelsby](https://github.com/twelsby))\n- Fixed issue \\#167 - removed operator ValueType\\(\\) condition for VS2015 [\\#188](https://github.com/nlohmann/json/pull/188) ([twelsby](https://github.com/twelsby))\n- Implementation of get\\_ref\\(\\) [\\#184](https://github.com/nlohmann/json/pull/184) ([dariomt](https://github.com/dariomt))\n- Fixed some typos in CONTRIBUTING.md [\\#182](https://github.com/nlohmann/json/pull/182) ([nibroc](https://github.com/nibroc))\n\n## [v1.0.0](https://github.com/nlohmann/json/releases/tag/v1.0.0) (2015-12-27)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/v1.0.0-rc1...v1.0.0)\n\n- add key name to exception [\\#160](https://github.com/nlohmann/json/issues/160)\n- Getting member discarding qualifyer [\\#159](https://github.com/nlohmann/json/issues/159)\n- basic\\_json::iterator::value\\(\\) output includes quotes while basic\\_json::iterator::key\\(\\) doesn't [\\#158](https://github.com/nlohmann/json/issues/158)\n- Indexing `const basic_json<>` with `const basic_string<char>` [\\#157](https://github.com/nlohmann/json/issues/157)\n- token\\_type\\_name\\(token\\_type t\\): not all control paths return a value [\\#156](https://github.com/nlohmann/json/issues/156)\n- prevent json.hpp from emitting compiler warnings [\\#154](https://github.com/nlohmann/json/issues/154)\n- json::parse\\(string\\) does not check utf8 bom [\\#152](https://github.com/nlohmann/json/issues/152)\n- unsigned 64bit values output as signed [\\#151](https://github.com/nlohmann/json/issues/151)\n- Wish feature: json5 [\\#150](https://github.com/nlohmann/json/issues/150)\n- Unable to compile on MSVC 2015 with SDL checking enabled: This function or variable may be unsafe. [\\#149](https://github.com/nlohmann/json/issues/149)\n- \"Json Object\" type does not keep object order [\\#148](https://github.com/nlohmann/json/issues/148)\n- dump\\(\\)  convert strings encoded by utf-8 to shift-jis on windows 10.  [\\#147](https://github.com/nlohmann/json/issues/147)\n- Unable to get field names in a json object [\\#145](https://github.com/nlohmann/json/issues/145)\n- Question: Is the use of incomplete type correct? [\\#138](https://github.com/nlohmann/json/issues/138)\n- json.hpp:5746:32: error: 'to\\_string' is not a member of 'std' [\\#136](https://github.com/nlohmann/json/issues/136)\n- Bug in basic\\_json::operator\\[\\] const overload [\\#135](https://github.com/nlohmann/json/issues/135)\n- wrong enable\\_if for const pointer \\(instead of pointer-to-const\\) [\\#134](https://github.com/nlohmann/json/issues/134)\n- overload of at\\(\\) with default value [\\#133](https://github.com/nlohmann/json/issues/133)\n- Splitting source [\\#132](https://github.com/nlohmann/json/issues/132)\n- Question about get\\_ptr\\(\\) [\\#127](https://github.com/nlohmann/json/issues/127)\n- Visual Studio 14 Debug assertion failed [\\#125](https://github.com/nlohmann/json/issues/125)\n- Memory leak in face of exceptions [\\#118](https://github.com/nlohmann/json/issues/118)\n- Find and Count for arrays [\\#117](https://github.com/nlohmann/json/issues/117)\n- dynamically constructing an arbitrarily nested object [\\#114](https://github.com/nlohmann/json/issues/114)\n- Returning any data type [\\#113](https://github.com/nlohmann/json/issues/113)\n- Compile error with g++ 4.9.3 cygwin 64-bit [\\#112](https://github.com/nlohmann/json/issues/112)\n- insert json array issue with gcc4.8.2 [\\#110](https://github.com/nlohmann/json/issues/110)\n- error: unterminated raw string [\\#109](https://github.com/nlohmann/json/issues/109)\n- vector\\<json\\> copy constructor really weird [\\#108](https://github.com/nlohmann/json/issues/108)\n- \\[clang-3.6.2\\] string/sstream with number to json issue [\\#107](https://github.com/nlohmann/json/issues/107)\n- object field accessors [\\#103](https://github.com/nlohmann/json/issues/103)\n- v8pp and json [\\#95](https://github.com/nlohmann/json/issues/95)\n- Wishlist [\\#65](https://github.com/nlohmann/json/issues/65)\n- Windows/Visual Studio \\(through 2013\\) is unsupported [\\#62](https://github.com/nlohmann/json/issues/62)\n\n- Replace sprintf with hex function, this fixes \\#149 [\\#153](https://github.com/nlohmann/json/pull/153) ([whackashoe](https://github.com/whackashoe))\n- Fix character skipping after a surrogate pair [\\#146](https://github.com/nlohmann/json/pull/146) ([robertmrk](https://github.com/robertmrk))\n- Detect correctly pointer-to-const [\\#137](https://github.com/nlohmann/json/pull/137) ([dariomt](https://github.com/dariomt))\n- disabled \"CopyAssignable\" test for MSVC in Debug mode, see \\#125 [\\#131](https://github.com/nlohmann/json/pull/131) ([dariomt](https://github.com/dariomt))\n- removed stream operator for iterator, resolution for \\#125 [\\#130](https://github.com/nlohmann/json/pull/130) ([dariomt](https://github.com/dariomt))\n- fixed typos in comments for examples [\\#129](https://github.com/nlohmann/json/pull/129) ([dariomt](https://github.com/dariomt))\n- Remove superfluous inefficiency [\\#126](https://github.com/nlohmann/json/pull/126) ([d-frey](https://github.com/d-frey))\n- remove invalid parameter '-stdlib=libc++' in CMakeLists.txt [\\#124](https://github.com/nlohmann/json/pull/124) ([emvivre](https://github.com/emvivre))\n- exception-safe object creation, fixes \\#118 [\\#122](https://github.com/nlohmann/json/pull/122) ([d-frey](https://github.com/d-frey))\n- Fix small oversight. [\\#121](https://github.com/nlohmann/json/pull/121) ([ColinH](https://github.com/ColinH))\n- Overload parse\\(\\) to accept an rvalue reference [\\#120](https://github.com/nlohmann/json/pull/120) ([silverweed](https://github.com/silverweed))\n- Use the right variable name in doc string [\\#115](https://github.com/nlohmann/json/pull/115) ([whoshuu](https://github.com/whoshuu))\n\n## [v1.0.0-rc1](https://github.com/nlohmann/json/releases/tag/v1.0.0-rc1) (2015-07-26)\n\n[Full Changelog](https://github.com/nlohmann/json/compare/4502e7e51c0569419c26e75fbdd5748170603e54...v1.0.0-rc1)\n\n- Finish documenting the public interface in Doxygen [\\#102](https://github.com/nlohmann/json/issues/102)\n- Binary string causes numbers to be dumped as hex [\\#101](https://github.com/nlohmann/json/issues/101)\n- failed to iterator json object with reverse\\_iterator [\\#100](https://github.com/nlohmann/json/issues/100)\n- 'noexcept' : unknown override specifier [\\#99](https://github.com/nlohmann/json/issues/99)\n- json float parsing problem [\\#98](https://github.com/nlohmann/json/issues/98)\n- Adjust wording to JSON RFC [\\#97](https://github.com/nlohmann/json/issues/97)\n- static analysis warnings [\\#94](https://github.com/nlohmann/json/issues/94)\n- reverse\\_iterator operator inheritance problem [\\#93](https://github.com/nlohmann/json/issues/93)\n- init error [\\#92](https://github.com/nlohmann/json/issues/92)\n- access by \\(const\\) reference [\\#91](https://github.com/nlohmann/json/issues/91)\n- is\\_integer and is\\_float tests [\\#90](https://github.com/nlohmann/json/issues/90)\n- Nonstandard integer type [\\#89](https://github.com/nlohmann/json/issues/89)\n- static library build [\\#84](https://github.com/nlohmann/json/issues/84)\n- lexer::get\\_number return NAN [\\#82](https://github.com/nlohmann/json/issues/82)\n- MinGW have no std::to\\_string [\\#80](https://github.com/nlohmann/json/issues/80)\n- Incorrect behaviour of basic\\_json::count method [\\#78](https://github.com/nlohmann/json/issues/78)\n- Invoking is\\_array\\(\\) function creates \"null\" value [\\#77](https://github.com/nlohmann/json/issues/77)\n- dump\\(\\) / parse\\(\\) not idempotent [\\#76](https://github.com/nlohmann/json/issues/76)\n- Handle infinity and NaN cases [\\#70](https://github.com/nlohmann/json/issues/70)\n- errors in g++-4.8.1 [\\#68](https://github.com/nlohmann/json/issues/68)\n- Keys when iterating over objects [\\#67](https://github.com/nlohmann/json/issues/67)\n- Compilation results in tons of warnings [\\#64](https://github.com/nlohmann/json/issues/64)\n- Complete brief documentation [\\#61](https://github.com/nlohmann/json/issues/61)\n- Double quotation mark is not parsed correctly [\\#60](https://github.com/nlohmann/json/issues/60)\n- Get coverage back to 100% [\\#58](https://github.com/nlohmann/json/issues/58)\n- erase elements using iterators [\\#57](https://github.com/nlohmann/json/issues/57)\n- Removing item from array [\\#56](https://github.com/nlohmann/json/issues/56)\n- Serialize/Deserialize like PHP? [\\#55](https://github.com/nlohmann/json/issues/55)\n- Numbers as keys [\\#54](https://github.com/nlohmann/json/issues/54)\n- Why are elements alphabetized on key while iterating? [\\#53](https://github.com/nlohmann/json/issues/53)\n- Document erase, count, and iterators key and value [\\#52](https://github.com/nlohmann/json/issues/52)\n- Do not use std::to\\_string [\\#51](https://github.com/nlohmann/json/issues/51)\n- Supported compilers [\\#50](https://github.com/nlohmann/json/issues/50)\n- Confused about iterating through json objects [\\#49](https://github.com/nlohmann/json/issues/49)\n- Use non-member begin/end [\\#48](https://github.com/nlohmann/json/issues/48)\n- Erase key [\\#47](https://github.com/nlohmann/json/issues/47)\n- Key iterator [\\#46](https://github.com/nlohmann/json/issues/46)\n- Add count member function [\\#45](https://github.com/nlohmann/json/issues/45)\n- Problem getting vector \\(array\\) of strings [\\#44](https://github.com/nlohmann/json/issues/44)\n- Compilation error due to assuming that private=public [\\#43](https://github.com/nlohmann/json/issues/43)\n- Use of deprecated implicit copy constructor [\\#42](https://github.com/nlohmann/json/issues/42)\n- Printing attribute names [\\#39](https://github.com/nlohmann/json/issues/39)\n- dumping a small number\\_float just outputs 0.000000 [\\#37](https://github.com/nlohmann/json/issues/37)\n- find is error [\\#32](https://github.com/nlohmann/json/issues/32)\n- Avoid using spaces when encoding without pretty print [\\#31](https://github.com/nlohmann/json/issues/31)\n- Cannot encode long numbers [\\#30](https://github.com/nlohmann/json/issues/30)\n- segmentation fault when iterating over empty arrays/objects [\\#28](https://github.com/nlohmann/json/issues/28)\n- Creating an empty array [\\#27](https://github.com/nlohmann/json/issues/27)\n- Custom allocator support [\\#25](https://github.com/nlohmann/json/issues/25)\n- make the type of the used string container customizable [\\#20](https://github.com/nlohmann/json/issues/20)\n- Improper parsing of JSON string \"\\\\\" [\\#17](https://github.com/nlohmann/json/issues/17)\n- create a header-only version [\\#16](https://github.com/nlohmann/json/issues/16)\n- Don't return \"const values\" [\\#15](https://github.com/nlohmann/json/issues/15)\n- Add to\\_string overload for indentation [\\#13](https://github.com/nlohmann/json/issues/13)\n- string parser does not recognize uncompliant strings [\\#12](https://github.com/nlohmann/json/issues/12)\n- possible double-free in find function [\\#11](https://github.com/nlohmann/json/issues/11)\n- UTF-8 encoding/deconding/testing [\\#10](https://github.com/nlohmann/json/issues/10)\n- move code into namespace [\\#9](https://github.com/nlohmann/json/issues/9)\n- free functions for explicit objects and arrays in initializer lists [\\#8](https://github.com/nlohmann/json/issues/8)\n- unique\\_ptr for ownership [\\#7](https://github.com/nlohmann/json/issues/7)\n- Add unit tests [\\#4](https://github.com/nlohmann/json/issues/4)\n- Drop C++98 support [\\#3](https://github.com/nlohmann/json/issues/3)\n- Test case coverage [\\#2](https://github.com/nlohmann/json/issues/2)\n- Runtime error in Travis job [\\#1](https://github.com/nlohmann/json/issues/1)\n\n- Keyword 'inline' is useless when member functions are defined in headers [\\#87](https://github.com/nlohmann/json/pull/87) ([ahamez](https://github.com/ahamez))\n- Remove useless typename [\\#86](https://github.com/nlohmann/json/pull/86) ([ahamez](https://github.com/ahamez))\n- Avoid warning with Xcode's clang [\\#85](https://github.com/nlohmann/json/pull/85) ([ahamez](https://github.com/ahamez))\n-  Fix typos [\\#73](https://github.com/nlohmann/json/pull/73) ([aqnouch](https://github.com/aqnouch))\n- Replace `default_callback` function with `nullptr` and check for null… [\\#72](https://github.com/nlohmann/json/pull/72) ([aburgh](https://github.com/aburgh))\n- support enum [\\#71](https://github.com/nlohmann/json/pull/71) ([likebeta](https://github.com/likebeta))\n- Fix performance regression introduced with the parsing callback feature. [\\#69](https://github.com/nlohmann/json/pull/69) ([aburgh](https://github.com/aburgh))\n- Improve the implementations of the comparission-operators [\\#63](https://github.com/nlohmann/json/pull/63) ([Florianjw](https://github.com/Florianjw))\n- Fix compilation of json\\_unit with GCC 5 [\\#59](https://github.com/nlohmann/json/pull/59) ([dkopecek](https://github.com/dkopecek))\n- Parse streams incrementally. [\\#40](https://github.com/nlohmann/json/pull/40) ([aburgh](https://github.com/aburgh))\n- Feature/small float serialization [\\#38](https://github.com/nlohmann/json/pull/38) ([jrandall](https://github.com/jrandall))\n- template version with re2c scanner [\\#36](https://github.com/nlohmann/json/pull/36) ([nlohmann](https://github.com/nlohmann))\n- more descriptive documentation in example [\\#33](https://github.com/nlohmann/json/pull/33) ([luxe](https://github.com/luxe))\n- Fix string conversion under Clang [\\#26](https://github.com/nlohmann/json/pull/26) ([wancw](https://github.com/wancw))\n- Fixed dumping of strings [\\#24](https://github.com/nlohmann/json/pull/24) ([Teemperor](https://github.com/Teemperor))\n- Added a remark to the readme that coverage is GCC only for now [\\#23](https://github.com/nlohmann/json/pull/23) ([Teemperor](https://github.com/Teemperor))\n- Unicode escaping [\\#22](https://github.com/nlohmann/json/pull/22) ([Teemperor](https://github.com/Teemperor))\n- Implemented the JSON spec for string parsing for everything but the \\uXXXX escaping [\\#21](https://github.com/nlohmann/json/pull/21) ([Teemperor](https://github.com/Teemperor))\n- add the std iterator typedefs to iterator and const\\_iterator [\\#19](https://github.com/nlohmann/json/pull/19) ([kirkshoop](https://github.com/kirkshoop))\n- Fixed escaped quotes [\\#18](https://github.com/nlohmann/json/pull/18) ([Teemperor](https://github.com/Teemperor))\n- Fix double delete on std::bad\\_alloc exception [\\#14](https://github.com/nlohmann/json/pull/14) ([elliotgoodrich](https://github.com/elliotgoodrich))\n- Added CMake and lcov [\\#6](https://github.com/nlohmann/json/pull/6) ([Teemperor](https://github.com/Teemperor))\n- Version 2.0 [\\#5](https://github.com/nlohmann/json/pull/5) ([nlohmann](https://github.com/nlohmann))\n\n\n\n\\* *This Changelog was automatically generated by [github_changelog_generator](https://github.com/github-changelog-generator/github-changelog-generator)*\n"
        },
        {
          "name": "LICENSE.MIT",
          "type": "blob",
          "size": 1.05,
          "content": "MIT License \n\nCopyright (c) 2013-2024 Niels Lohmann\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "LICENSES",
          "type": "tree",
          "content": null
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 0.17,
          "content": "module(\n    name = \"nlohmann_json\",\n    compatibility_level = 1,\n)\n\nbazel_dep(name = \"rules_cc\", version = \"0.0.17\")\nbazel_dep(name = \"rules_license\", version = \"1.0.0\")\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 13.05,
          "content": ".PHONY: pretty clean ChangeLog.md release\n\n##########################################################################\n# configuration\n##########################################################################\n\n# find GNU sed to use `-i` parameter\nSED:=$(shell command -v gsed || which sed)\n\n\n##########################################################################\n# source files\n##########################################################################\n\n# the list of sources in the include folder\nSRCS=$(shell find include -type f | sort)\n\n# the list of sources in the tests folder\nTESTS_SRCS=$(shell find tests -type f \\( -name '*.hpp' -o -name '*.cpp' -o -name '*.cu' \\) -not -path 'tests/thirdparty/*' -not -path 'tests/abi/include/nlohmann/*' | sort)\n\n# the single headers (amalgamated from the source files)\nAMALGAMATED_FILE=single_include/nlohmann/json.hpp\nAMALGAMATED_FWD_FILE=single_include/nlohmann/json_fwd.hpp\n\n\n##########################################################################\n# documentation of the Makefile's targets\n##########################################################################\n\n# main target\nall:\n\t@echo \"amalgamate - amalgamate files single_include/nlohmann/json{,_fwd}.hpp from the include/nlohmann sources\"\n\t@echo \"ChangeLog.md - generate ChangeLog file\"\n\t@echo \"check-amalgamation - check whether sources have been amalgamated\"\n\t@echo \"clean - remove built files\"\n\t@echo \"doctest - compile example files and check their output\"\n\t@echo \"fuzz_testing - prepare fuzz testing of the JSON parser\"\n\t@echo \"fuzz_testing_bson - prepare fuzz testing of the BSON parser\"\n\t@echo \"fuzz_testing_cbor - prepare fuzz testing of the CBOR parser\"\n\t@echo \"fuzz_testing_msgpack - prepare fuzz testing of the MessagePack parser\"\n\t@echo \"fuzz_testing_ubjson - prepare fuzz testing of the UBJSON parser\"\n\t@echo \"pretty - beautify code with Artistic Style\"\n\t@echo \"run_benchmarks - build and run benchmarks\"\n\n\n##########################################################################\n# documentation tests\n##########################################################################\n\n# compile example files and check output\ndoctest:\n\t$(MAKE) check_output -C docs\n\n\n##########################################################################\n# benchmarks\n##########################################################################\n\nrun_benchmarks:\n\trm -fr cmake-build-benchmarks\n\tmkdir cmake-build-benchmarks\n\tcd cmake-build-benchmarks ; cmake ../tests/benchmarks -GNinja -DCMAKE_BUILD_TYPE=Release\n\tcd cmake-build-benchmarks ; ninja\n\tcd cmake-build-benchmarks ; ./json_benchmarks\n\n\n##########################################################################\n# fuzzing\n##########################################################################\n\n# the overall fuzz testing target\nfuzz_testing:\n\trm -fr fuzz-testing\n\tmkdir -p fuzz-testing fuzz-testing/testcases fuzz-testing/out\n\t$(MAKE) parse_afl_fuzzer -C tests CXX=afl-clang++\n\tmv tests/parse_afl_fuzzer fuzz-testing/fuzzer\n\tfind tests/data/json_tests -size -5k -name *json | xargs -I{} cp \"{}\" fuzz-testing/testcases\n\t@echo \"Execute: afl-fuzz -i fuzz-testing/testcases -o fuzz-testing/out fuzz-testing/fuzzer\"\n\nfuzz_testing_bson:\n\trm -fr fuzz-testing\n\tmkdir -p fuzz-testing fuzz-testing/testcases fuzz-testing/out\n\t$(MAKE) parse_bson_fuzzer -C tests CXX=afl-clang++\n\tmv tests/parse_bson_fuzzer fuzz-testing/fuzzer\n\tfind tests/data -size -5k -name *.bson | xargs -I{} cp \"{}\" fuzz-testing/testcases\n\t@echo \"Execute: afl-fuzz -i fuzz-testing/testcases -o fuzz-testing/out fuzz-testing/fuzzer\"\n\nfuzz_testing_cbor:\n\trm -fr fuzz-testing\n\tmkdir -p fuzz-testing fuzz-testing/testcases fuzz-testing/out\n\t$(MAKE) parse_cbor_fuzzer -C tests CXX=afl-clang++\n\tmv tests/parse_cbor_fuzzer fuzz-testing/fuzzer\n\tfind tests/data -size -5k -name *.cbor | xargs -I{} cp \"{}\" fuzz-testing/testcases\n\t@echo \"Execute: afl-fuzz -i fuzz-testing/testcases -o fuzz-testing/out fuzz-testing/fuzzer\"\n\nfuzz_testing_msgpack:\n\trm -fr fuzz-testing\n\tmkdir -p fuzz-testing fuzz-testing/testcases fuzz-testing/out\n\t$(MAKE) parse_msgpack_fuzzer -C tests CXX=afl-clang++\n\tmv tests/parse_msgpack_fuzzer fuzz-testing/fuzzer\n\tfind tests/data -size -5k -name *.msgpack | xargs -I{} cp \"{}\" fuzz-testing/testcases\n\t@echo \"Execute: afl-fuzz -i fuzz-testing/testcases -o fuzz-testing/out fuzz-testing/fuzzer\"\n\nfuzz_testing_ubjson:\n\trm -fr fuzz-testing\n\tmkdir -p fuzz-testing fuzz-testing/testcases fuzz-testing/out\n\t$(MAKE) parse_ubjson_fuzzer -C tests CXX=afl-clang++\n\tmv tests/parse_ubjson_fuzzer fuzz-testing/fuzzer\n\tfind tests/data -size -5k -name *.ubjson | xargs -I{} cp \"{}\" fuzz-testing/testcases\n\t@echo \"Execute: afl-fuzz -i fuzz-testing/testcases -o fuzz-testing/out fuzz-testing/fuzzer\"\n\nfuzzing-start:\n\tafl-fuzz -S fuzzer1 -i fuzz-testing/testcases -o fuzz-testing/out fuzz-testing/fuzzer > /dev/null &\n\tafl-fuzz -S fuzzer2 -i fuzz-testing/testcases -o fuzz-testing/out fuzz-testing/fuzzer > /dev/null &\n\tafl-fuzz -S fuzzer3 -i fuzz-testing/testcases -o fuzz-testing/out fuzz-testing/fuzzer > /dev/null &\n\tafl-fuzz -S fuzzer4 -i fuzz-testing/testcases -o fuzz-testing/out fuzz-testing/fuzzer > /dev/null &\n\tafl-fuzz -S fuzzer5 -i fuzz-testing/testcases -o fuzz-testing/out fuzz-testing/fuzzer > /dev/null &\n\tafl-fuzz -S fuzzer6 -i fuzz-testing/testcases -o fuzz-testing/out fuzz-testing/fuzzer > /dev/null &\n\tafl-fuzz -S fuzzer7 -i fuzz-testing/testcases -o fuzz-testing/out fuzz-testing/fuzzer > /dev/null &\n\tafl-fuzz -M fuzzer0 -i fuzz-testing/testcases -o fuzz-testing/out fuzz-testing/fuzzer\n\nfuzzing-stop:\n\t-killall fuzzer\n\t-killall afl-fuzz\n\n\n##########################################################################\n# Static analysis\n##########################################################################\n\n# call PVS-Studio Analyzer <https://www.viva64.com/en/pvs-studio/>\npvs_studio:\n\trm -fr cmake-build-pvs-studio\n\tmkdir cmake-build-pvs-studio\n\tcd cmake-build-pvs-studio ; cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=On -DJSON_MultipleHeaders=ON\n\tcd cmake-build-pvs-studio ; pvs-studio-analyzer analyze -j 10\n\tcd cmake-build-pvs-studio ; plog-converter -a'GA:1,2;64:1;CS' -t fullhtml PVS-Studio.log -o pvs\n\topen cmake-build-pvs-studio/pvs/index.html\n\n\n##########################################################################\n# Code format and source amalgamation\n##########################################################################\n\nASTYLE=tools/astyle/venv/bin/astyle\n\ninstall_astyle:\n\t@test -d tools/astyle/venv || python3 -mvenv tools/astyle/venv ; tools/astyle/venv/bin/pip3 install --quiet --upgrade pip\n\t@test -f $(ASTYLE) || tools/astyle/venv/bin/pip3 install --quiet -r tools/astyle/requirements.txt\n\t@$(ASTYLE) --version\n\n# call the Artistic Style pretty printer on all source files\npretty: install_astyle\n\t$(ASTYLE) --project=tools/astyle/.astylerc $(SRCS) $(TESTS_SRCS) $(AMALGAMATED_FILE) $(AMALGAMATED_FWD_FILE) docs/examples/*.cpp\n\n# call the Clang-Format on all source files\npretty_format:\n\tfor FILE in $(SRCS) $(TESTS_SRCS) $(AMALGAMATED_FILE) docs/examples/*.cpp; do echo $$FILE; clang-format -i $$FILE; done\n\n# create single header files and pretty print\namalgamate: $(AMALGAMATED_FILE) $(AMALGAMATED_FWD_FILE)\n\t$(MAKE) pretty\n\n# call the amalgamation tool for json.hpp\n$(AMALGAMATED_FILE): $(SRCS)\n\ttools/amalgamate/amalgamate.py -c tools/amalgamate/config_json.json -s . --verbose=yes\n\n# call the amalgamation tool for json_fwd.hpp\n$(AMALGAMATED_FWD_FILE): $(SRCS)\n\ttools/amalgamate/amalgamate.py -c tools/amalgamate/config_json_fwd.json -s . --verbose=yes\n\n# check if file single_include/nlohmann/json.hpp has been amalgamated from the nlohmann sources\n# Note: this target is called by Travis\ncheck-amalgamation:\n\t@mv $(AMALGAMATED_FILE) $(AMALGAMATED_FILE)~\n\t@mv $(AMALGAMATED_FWD_FILE) $(AMALGAMATED_FWD_FILE)~\n\t@$(MAKE) amalgamate\n\t@diff $(AMALGAMATED_FILE) $(AMALGAMATED_FILE)~ || (echo \"===================================================================\\n  Amalgamation required! Please read the contribution guidelines\\n  in file .github/CONTRIBUTING.md.\\n===================================================================\" ; mv $(AMALGAMATED_FILE)~ $(AMALGAMATED_FILE) ; false)\n\t@diff $(AMALGAMATED_FWD_FILE) $(AMALGAMATED_FWD_FILE)~ || (echo \"===================================================================\\n  Amalgamation required! Please read the contribution guidelines\\n  in file .github/CONTRIBUTING.md.\\n===================================================================\" ; mv $(AMALGAMATED_FWD_FILE)~ $(AMALGAMATED_FWD_FILE) ; false)\n\t@mv $(AMALGAMATED_FILE)~ $(AMALGAMATED_FILE)\n\t@mv $(AMALGAMATED_FWD_FILE)~ $(AMALGAMATED_FWD_FILE)\n\nBUILD.bazel: $(SRCS)\n\tcmake -P cmake/scripts/gen_bazel_build_file.cmake\n\n##########################################################################\n# ChangeLog\n##########################################################################\n\n# Create a ChangeLog based on the git log using the GitHub Changelog Generator\n# (<https://github.com/github-changelog-generator/github-changelog-generator>).\n\n# variable to control the diffs between the last released version and the current repository state\nNEXT_VERSION ?= \"unreleased\"\n\nChangeLog.md:\n\tgithub_changelog_generator -o ChangeLog.md --user nlohmann --project json --simple-list --release-url https://github.com/nlohmann/json/releases/tag/%s --future-release $(NEXT_VERSION)\n\t$(SED) -i 's|https://github.com/nlohmann/json/releases/tag/HEAD|https://github.com/nlohmann/json/tree/HEAD|' ChangeLog.md\n\t$(SED) -i '2i All notable changes to this project will be documented in this file. This project adheres to [Semantic Versioning](http://semver.org/).' ChangeLog.md\n\n\n##########################################################################\n# Release files\n##########################################################################\n\n# Create a tar.gz archive that contains sufficient files to be used as CMake project (e.g., using FetchContent). The\n# archive is created according to the advices of <https://reproducible-builds.org/docs/archives/>.\njson.tar.xz:\n\tmkdir json\n\trsync -R $(shell find LICENSE.MIT nlohmann_json.natvis CMakeLists.txt cmake/*.in include single_include -type f) json\n\tgtar --sort=name --mtime=\"@$(shell git log -1 --pretty=%ct)\" --owner=0 --group=0 --numeric-owner --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime --create --file - json | xz --compress -9e --threads=2 - > json.tar.xz\n\trm -fr json\n\n# We use `-X` to make the resulting ZIP file reproducible, see\n# <https://content.pivotal.io/blog/barriers-to-deterministic-reproducible-zip-files>.\ninclude.zip: BUILD.bazel\n\tzip -9 --recurse-paths -X include.zip $(SRCS) $(AMALGAMATED_FILE) $(AMALGAMATED_FWD_FILE) BUILD.bazel WORKSPACE.bazel meson.build LICENSE.MIT\n\n# Create the files for a release and add signatures and hashes.\nrelease: include.zip json.tar.xz\n\trm -fr release_files\n\tmkdir release_files\n\tgpg --armor --detach-sig include.zip\n\tgpg --armor --detach-sig $(AMALGAMATED_FILE)\n\tgpg --armor --detach-sig $(AMALGAMATED_FWD_FILE)\n\tgpg --armor --detach-sig json.tar.xz\n\tcp $(AMALGAMATED_FILE) release_files\n\tcp $(AMALGAMATED_FWD_FILE) release_files\n\tmv $(AMALGAMATED_FILE).asc $(AMALGAMATED_FWD_FILE).asc json.tar.xz json.tar.xz.asc include.zip include.zip.asc release_files\n\tcd release_files ; shasum -a 256 json.hpp include.zip json.tar.xz > hashes.txt\n\n\n##########################################################################\n# Maintenance\n##########################################################################\n\n# clean up\nclean:\n\trm -fr fuzz fuzz-testing *.dSYM tests/*.dSYM\n\trm -fr benchmarks/files/numbers/*.json\n\trm -fr cmake-build-benchmarks fuzz-testing cmake-build-pvs-studio release_files\n\t$(MAKE) clean -Cdocs\n\n\n##########################################################################\n# Thirdparty code\n##########################################################################\n\nupdate_hedley:\n\trm -f include/nlohmann/thirdparty/hedley/hedley.hpp include/nlohmann/thirdparty/hedley/hedley_undef.hpp\n\tcurl https://raw.githubusercontent.com/nemequ/hedley/master/hedley.h -o include/nlohmann/thirdparty/hedley/hedley.hpp\n\t$(SED) -i 's/HEDLEY_/JSON_HEDLEY_/g' include/nlohmann/thirdparty/hedley/hedley.hpp\n\tgrep \"[[:blank:]]*#[[:blank:]]*undef\" include/nlohmann/thirdparty/hedley/hedley.hpp | grep -v \"__\" | sort | uniq | $(SED) 's/ //g' | $(SED) 's/undef/undef /g' > include/nlohmann/thirdparty/hedley/hedley_undef.hpp\n\t$(SED) -i '1s/^/#pragma once\\n\\n/' include/nlohmann/thirdparty/hedley/hedley.hpp\n\t$(SED) -i '1s/^/#pragma once\\n\\n/' include/nlohmann/thirdparty/hedley/hedley_undef.hpp\n\t$(MAKE) amalgamate\n\n##########################################################################\n# serve_header.py\n##########################################################################\n\nserve_header:\n\t./tools/serve_header/serve_header.py --make $(MAKE)\n\n##########################################################################\n# REUSE\n##########################################################################\n\nreuse:\n\tpipx run reuse annotate --recursive single_include include -tjson --license MIT --copyright \"Niels Lohmann <https://nlohmann.me>\" --year \"2013-2024\" --merge-copyrights\n\tpipx run reuse annotate $(TESTS_SRCS) -tjson_support --license MIT --copyright \"Niels Lohmann <https://nlohmann.me>\" --year \"2013-2024\" --merge-copyrights\n\tpipx run reuse lint\n"
        },
        {
          "name": "Package.swift",
          "type": "blob",
          "size": 0.54,
          "content": "// swift-tools-version: 5.9\n// The swift-tools-version declares the minimum version of Swift required to build this package.\n\nimport PackageDescription\n\nlet package = Package(\n    name: \"nlohmann-json\",\n     platforms: [\n        .iOS(.v12), .macOS(.v10_13), .tvOS(.v12), .watchOS(.v4)\n    ],\n    products: [\n        .library(name: \"json\", targets: [\"json\"])\n    ],\n    targets: [\n        .target(\n            name: \"json\",\n            path: \"single_include/nlohmann\",\n            publicHeadersPath: \".\"\n        )\n    ],\n    cxxLanguageStandard: .cxx11\n)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 113.34,
          "content": "[![JSON for Modern C++](docs/json.gif)](https://github.com/nlohmann/json/releases)\n\n[![Build Status](https://ci.appveyor.com/api/projects/status/1acb366xfyg3qybk/branch/develop?svg=true)](https://ci.appveyor.com/project/nlohmann/json)\n[![Ubuntu](https://github.com/nlohmann/json/workflows/Ubuntu/badge.svg)](https://github.com/nlohmann/json/actions?query=workflow%3AUbuntu)\n[![macOS](https://github.com/nlohmann/json/workflows/macOS/badge.svg)](https://github.com/nlohmann/json/actions?query=workflow%3AmacOS)\n[![Windows](https://github.com/nlohmann/json/workflows/Windows/badge.svg)](https://github.com/nlohmann/json/actions?query=workflow%3AWindows)\n[![Coverage Status](https://coveralls.io/repos/github/nlohmann/json/badge.svg?branch=develop)](https://coveralls.io/github/nlohmann/json?branch=develop)\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/5550/badge.svg)](https://scan.coverity.com/projects/nlohmann-json)\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/e0d1a9d5d6fd46fcb655c4cb930bb3e8)](https://www.codacy.com/gh/nlohmann/json/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=nlohmann/json&amp;utm_campaign=Badge_Grade)\n[![Cirrus CI](https://api.cirrus-ci.com/github/nlohmann/json.svg)](https://cirrus-ci.com/github/nlohmann/json)\n[![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/json.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:json)\n[![Try online](https://img.shields.io/badge/try-online-blue.svg)](https://wandbox.org/permlink/1mp10JbaANo6FUc7)\n[![Documentation](https://img.shields.io/badge/docs-mkdocs-blue.svg)](https://json.nlohmann.me)\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/nlohmann/json/master/LICENSE.MIT)\n[![GitHub Releases](https://img.shields.io/github/release/nlohmann/json.svg)](https://github.com/nlohmann/json/releases)\n[![Vcpkg Version](https://img.shields.io/vcpkg/v/nlohmann-json)](https://vcpkg.link/ports/nlohmann-json)\n[![Packaging status](https://repology.org/badge/tiny-repos/nlohmann-json.svg)](https://repology.org/project/nlohmann-json/versions)\n[![GitHub Downloads](https://img.shields.io/github/downloads/nlohmann/json/total)](https://github.com/nlohmann/json/releases)\n[![GitHub Issues](https://img.shields.io/github/issues/nlohmann/json.svg)](https://github.com/nlohmann/json/issues)\n[![Average time to resolve an issue](https://isitmaintained.com/badge/resolution/nlohmann/json.svg)](https://isitmaintained.com/project/nlohmann/json \"Average time to resolve an issue\")\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/289/badge)](https://bestpractices.coreinfrastructure.org/projects/289)\n[![OpenSSF Scorecard](https://api.scorecard.dev/projects/github.com/nlohmann/json/badge)](https://scorecard.dev/viewer/?uri=github.com/nlohmann/json)\n[![GitHub Sponsors](https://img.shields.io/badge/GitHub-Sponsors-ff69b4)](https://github.com/sponsors/nlohmann)\n[![REUSE status](https://api.reuse.software/badge/github.com/nlohmann/json)](https://api.reuse.software/info/github.com/nlohmann/json)\n[![Discord](https://img.shields.io/discord/1003743314341793913)](https://discord.gg/6mrGXKvX7y)\n\n- [Design goals](#design-goals)\n- [Sponsors](#sponsors)\n- [Support](#support) ([documentation](https://json.nlohmann.me), [FAQ](https://json.nlohmann.me/home/faq/), [discussions](https://github.com/nlohmann/json/discussions), [API](https://json.nlohmann.me/api/basic_json/), [bug issues](https://github.com/nlohmann/json/issues))\n- [Examples](#examples)\n  - [Read JSON from a file](#read-json-from-a-file)\n  - [Creating `json` objects from JSON literals](#creating-json-objects-from-json-literals)\n  - [JSON as first-class data type](#json-as-first-class-data-type)\n  - [Serialization / Deserialization](#serialization--deserialization)\n  - [STL-like access](#stl-like-access)\n  - [Conversion from STL containers](#conversion-from-stl-containers)\n  - [JSON Pointer and JSON Patch](#json-pointer-and-json-patch)\n  - [JSON Merge Patch](#json-merge-patch)\n  - [Implicit conversions](#implicit-conversions)\n  - [Conversions to/from arbitrary types](#arbitrary-types-conversions)\n  - [Specializing enum conversion](#specializing-enum-conversion)\n  - [Binary formats (BSON, CBOR, MessagePack, UBJSON, and BJData)](#binary-formats-bson-cbor-messagepack-ubjson-and-bjdata)\n- [Customers](#customers)\n- [Supported compilers](#supported-compilers)\n- [Integration](#integration)\n  - [CMake](#cmake)\n  - [Package Managers](#package-managers)\n  - [Pkg-config](#pkg-config)\n- [License](#license)\n- [Contact](#contact)\n- [Thanks](#thanks)\n- [Used third-party tools](#used-third-party-tools)\n- [Projects using JSON for Modern C++](#projects-using-json-for-modern-c)\n- [Notes](#notes)\n- [Execute unit tests](#execute-unit-tests)\n\n\n## Design goals\n\nThere are myriads of [JSON](https://json.org) libraries out there, and each may even have its reason to exist. Our class had these design goals:\n\n- **Intuitive syntax**. In languages such as Python, JSON feels like a first class data type. We used all the operator magic of modern C++ to achieve the same feeling in your code. Check out the [examples below](#examples) and you'll know what I mean.\n\n- **Trivial integration**. Our whole code consists of a single header file [`json.hpp`](https://github.com/nlohmann/json/blob/develop/single_include/nlohmann/json.hpp). That's it. No library, no subproject, no dependencies, no complex build system. The class is written in vanilla C++11. All in all, everything should require no adjustment of your compiler flags or project settings.\n\n- **Serious testing**. Our code is heavily [unit-tested](https://github.com/nlohmann/json/tree/develop/tests/src) and covers [100%](https://coveralls.io/r/nlohmann/json) of the code, including all exceptional behavior. Furthermore, we checked with [Valgrind](https://valgrind.org) and the [Clang Sanitizers](https://clang.llvm.org/docs/index.html) that there are no memory leaks. [Google OSS-Fuzz](https://github.com/google/oss-fuzz/tree/master/projects/json) additionally runs fuzz tests against all parsers 24/7, effectively executing billions of tests so far. To maintain high quality, the project is following the [Core Infrastructure Initiative (CII) best practices](https://bestpractices.coreinfrastructure.org/projects/289).\n\nOther aspects were not so important to us:\n\n- **Memory efficiency**. Each JSON object has an overhead of one pointer (the maximal size of a union) and one enumeration element (1 byte). The default generalization uses the following C++ data types: `std::string` for strings, `int64_t`, `uint64_t` or `double` for numbers, `std::map` for objects, `std::vector` for arrays, and `bool` for Booleans. However, you can template the generalized class `basic_json` to your needs.\n\n- **Speed**. There are certainly [faster JSON libraries](https://github.com/miloyip/nativejson-benchmark#parsing-time) out there. However, if your goal is to speed up your development by adding JSON support with a single header, then this library is the way to go. If you know how to use a `std::vector` or `std::map`, you are already set.\n\nSee the [contribution guidelines](https://github.com/nlohmann/json/blob/master/.github/CONTRIBUTING.md#please-dont) for more information.\n\n\n## Sponsors\n\nYou can sponsor this library at [GitHub Sponsors](https://github.com/sponsors/nlohmann).\n\n### :raising_hand: Priority Sponsor\n\n- [Martti Laine](https://github.com/codeclown)\n- [Paul Harrington](https://github.com/phrrngtn)\n\n### :label: Named Sponsors\n\n- [Michael Hartmann](https://github.com/reFX-Mike)\n- [Stefan Hagen](https://github.com/sthagen)\n- [Steve Sperandeo](https://github.com/homer6)\n- [Robert Jefe Lindstädt](https://github.com/eljefedelrodeodeljefe)\n- [Steve Wagner](https://github.com/ciroque)\n- [Lion Yang](https://github.com/LionNatsu)\n\n### Further support\n\nThe development of the library is further supported by JetBrains by providing free access to their IDE tools.\n\n[![JetBrains logo.](https://resources.jetbrains.com/storage/products/company/brand/logos/jetbrains.svg)](https://jb.gg/OpenSourceSupport)\n\nThanks everyone!\n\n\n## Support\n\n:question: If you have a **question**, please check if it is already answered in the [**FAQ**](https://json.nlohmann.me/home/faq/) or the [**Q&A**](https://github.com/nlohmann/json/discussions/categories/q-a) section. If not, please [**ask a new question**](https://github.com/nlohmann/json/discussions/new) there.\n\n:books: If you want to **learn more** about how to use the library, check out the rest of the [**README**](#examples), have a look at [**code examples**](https://github.com/nlohmann/json/tree/develop/docs/examples), or browse through the [**help pages**](https://json.nlohmann.me).\n\n:construction: If you want to understand the **API** better, check out the [**API Reference**](https://json.nlohmann.me/api/basic_json/).\n\n:bug: If you found a **bug**, please check the [**FAQ**](https://json.nlohmann.me/home/faq/) if it is a known issue or the result of a design decision. Please also have a look at the [**issue list**](https://github.com/nlohmann/json/issues) before you [**create a new issue**](https://github.com/nlohmann/json/issues/new/choose). Please provide as much information as possible to help us understand and reproduce your issue.\n\nThere is also a [**docset**](https://github.com/Kapeli/Dash-User-Contributions/tree/master/docsets/JSON_for_Modern_C%2B%2B) for the documentation browsers [Dash](https://kapeli.com/dash), [Velocity](https://velocity.silverlakesoftware.com), and [Zeal](https://zealdocs.org) that contains the full [documentation](https://json.nlohmann.me) as offline resource.\n\n\n## Examples\n\nHere are some examples to give you an idea how to use the class.\n\nBeside the examples below, you may want to:\n\n→ Check the [documentation](https://json.nlohmann.me/)\\\n→ Browse the [standalone example files](https://github.com/nlohmann/json/tree/develop/docs/examples)\n\nEvery API function (documented in the [API Documentation](https://json.nlohmann.me/api/basic_json/)) has a corresponding standalone example file. For example, the [`emplace()`](https://json.nlohmann.me/api/basic_json/emplace/) function has a matching [emplace.cpp](https://github.com/nlohmann/json/blob/develop/docs/examples/emplace.cpp) example file.\n\n### Read JSON from a file\n\nThe `json` class provides an API for manipulating a JSON value. To create a `json` object by reading a JSON file:\n\n```cpp\n#include <fstream>\n#include <nlohmann/json.hpp>\nusing json = nlohmann::json;\n\n// ...\n\nstd::ifstream f(\"example.json\");\njson data = json::parse(f);\n```\n\n### Creating `json` objects from JSON literals\n\nAssume you want to create hard-code this literal JSON value in a file, as a `json` object:\n\n```json\n{\n  \"pi\": 3.141,\n  \"happy\": true\n}\n```\n\nThere are various options:\n\n```cpp\n// Using (raw) string literals and json::parse\njson ex1 = json::parse(R\"(\n  {\n    \"pi\": 3.141,\n    \"happy\": true\n  }\n)\");\n\n// Using user-defined (raw) string literals\nusing namespace nlohmann::literals;\njson ex2 = R\"(\n  {\n    \"pi\": 3.141,\n    \"happy\": true\n  }\n)\"_json;\n\n// Using initializer lists\njson ex3 = {\n  {\"happy\", true},\n  {\"pi\", 3.141},\n};\n```\n\n### JSON as first-class data type\n\nHere are some examples to give you an idea how to use the class.\n\nAssume you want to create the JSON object\n\n```json\n{\n  \"pi\": 3.141,\n  \"happy\": true,\n  \"name\": \"Niels\",\n  \"nothing\": null,\n  \"answer\": {\n    \"everything\": 42\n  },\n  \"list\": [1, 0, 2],\n  \"object\": {\n    \"currency\": \"USD\",\n    \"value\": 42.99\n  }\n}\n```\n\nWith this library, you could write:\n\n```cpp\n// create an empty structure (null)\njson j;\n\n// add a number that is stored as double (note the implicit conversion of j to an object)\nj[\"pi\"] = 3.141;\n\n// add a Boolean that is stored as bool\nj[\"happy\"] = true;\n\n// add a string that is stored as std::string\nj[\"name\"] = \"Niels\";\n\n// add another null object by passing nullptr\nj[\"nothing\"] = nullptr;\n\n// add an object inside the object\nj[\"answer\"][\"everything\"] = 42;\n\n// add an array that is stored as std::vector (using an initializer list)\nj[\"list\"] = { 1, 0, 2 };\n\n// add another object (using an initializer list of pairs)\nj[\"object\"] = { {\"currency\", \"USD\"}, {\"value\", 42.99} };\n\n// instead, you could also write (which looks very similar to the JSON above)\njson j2 = {\n  {\"pi\", 3.141},\n  {\"happy\", true},\n  {\"name\", \"Niels\"},\n  {\"nothing\", nullptr},\n  {\"answer\", {\n    {\"everything\", 42}\n  }},\n  {\"list\", {1, 0, 2}},\n  {\"object\", {\n    {\"currency\", \"USD\"},\n    {\"value\", 42.99}\n  }}\n};\n```\n\nNote that in all these cases, you never need to \"tell\" the compiler which JSON value type you want to use. If you want to be explicit or express some edge cases, the functions [`json::array()`](https://json.nlohmann.me/api/basic_json/array/) and [`json::object()`](https://json.nlohmann.me/api/basic_json/object/) will help:\n\n```cpp\n// a way to express the empty array []\njson empty_array_explicit = json::array();\n\n// ways to express the empty object {}\njson empty_object_implicit = json({});\njson empty_object_explicit = json::object();\n\n// a way to express an _array_ of key/value pairs [[\"currency\", \"USD\"], [\"value\", 42.99]]\njson array_not_object = json::array({ {\"currency\", \"USD\"}, {\"value\", 42.99} });\n```\n\n### Serialization / Deserialization\n\n#### To/from strings\n\nYou can create a JSON value (deserialization) by appending `_json` to a string literal:\n\n```cpp\n// create object from string literal\njson j = \"{ \\\"happy\\\": true, \\\"pi\\\": 3.141 }\"_json;\n\n// or even nicer with a raw string literal\nauto j2 = R\"(\n  {\n    \"happy\": true,\n    \"pi\": 3.141\n  }\n)\"_json;\n```\n\nNote that without appending the `_json` suffix, the passed string literal is not parsed, but just used as JSON string\nvalue. That is, `json j = \"{ \\\"happy\\\": true, \\\"pi\\\": 3.141 }\"` would just store the string\n`\"{ \"happy\": true, \"pi\": 3.141 }\"` rather than parsing the actual object.\n\nThe string literal should be brought into scope with `using namespace nlohmann::literals;`\n(see [`json::parse()`](https://json.nlohmann.me/api/operator_literal_json/)).\n\nThe above example can also be expressed explicitly using [`json::parse()`](https://json.nlohmann.me/api/basic_json/parse/):\n\n```cpp\n// parse explicitly\nauto j3 = json::parse(R\"({\"happy\": true, \"pi\": 3.141})\");\n```\n\nYou can also get a string representation of a JSON value (serialize):\n\n```cpp\n// explicit conversion to string\nstd::string s = j.dump();    // {\"happy\":true,\"pi\":3.141}\n\n// serialization with pretty printing\n// pass in the amount of spaces to indent\nstd::cout << j.dump(4) << std::endl;\n// {\n//     \"happy\": true,\n//     \"pi\": 3.141\n// }\n```\n\nNote the difference between serialization and assignment:\n\n```cpp\n// store a string in a JSON value\njson j_string = \"this is a string\";\n\n// retrieve the string value\nauto cpp_string = j_string.template get<std::string>();\n// retrieve the string value (alternative when a variable already exists)\nstd::string cpp_string2;\nj_string.get_to(cpp_string2);\n\n// retrieve the serialized value (explicit JSON serialization)\nstd::string serialized_string = j_string.dump();\n\n// output of original string\nstd::cout << cpp_string << \" == \" << cpp_string2 << \" == \" << j_string.template get<std::string>() << '\\n';\n// output of serialized value\nstd::cout << j_string << \" == \" << serialized_string << std::endl;\n```\n\n[`.dump()`](https://json.nlohmann.me/api/basic_json/dump/) returns the originally stored string value.\n\nNote the library only supports UTF-8. When you store strings with different encodings in the library, calling [`dump()`](https://json.nlohmann.me/api/basic_json/dump/) may throw an exception unless `json::error_handler_t::replace` or `json::error_handler_t::ignore` are used as error handlers.\n\n#### To/from streams (e.g. files, string streams)\n\nYou can also use streams to serialize and deserialize:\n\n```cpp\n// deserialize from standard input\njson j;\nstd::cin >> j;\n\n// serialize to standard output\nstd::cout << j;\n\n// the setw manipulator was overloaded to set the indentation for pretty printing\nstd::cout << std::setw(4) << j << std::endl;\n```\n\nThese operators work for any subclasses of `std::istream` or `std::ostream`. Here is the same example with files:\n\n```cpp\n// read a JSON file\nstd::ifstream i(\"file.json\");\njson j;\ni >> j;\n\n// write prettified JSON to another file\nstd::ofstream o(\"pretty.json\");\no << std::setw(4) << j << std::endl;\n```\n\nPlease note that setting the exception bit for `failbit` is inappropriate for this use case. It will result in program termination due to the `noexcept` specifier in use.\n\n#### Read from iterator range\n\nYou can also parse JSON from an iterator range; that is, from any container accessible by iterators whose `value_type` is an integral type of 1, 2 or 4 bytes, which will be interpreted as UTF-8, UTF-16 and UTF-32 respectively. For instance, a `std::vector<std::uint8_t>`, or a `std::list<std::uint16_t>`:\n\n```cpp\nstd::vector<std::uint8_t> v = {'t', 'r', 'u', 'e'};\njson j = json::parse(v.begin(), v.end());\n```\n\nYou may leave the iterators for the range [begin, end):\n\n```cpp\nstd::vector<std::uint8_t> v = {'t', 'r', 'u', 'e'};\njson j = json::parse(v);\n```\n\n#### Custom data source\n\nSince the parse function accepts arbitrary iterator ranges, you can provide your own data sources by implementing the `LegacyInputIterator` concept.\n\n```cpp\nstruct MyContainer {\n  void advance();\n  const char& get_current();\n};\n\nstruct MyIterator {\n    using difference_type = std::ptrdiff_t;\n    using value_type = char;\n    using pointer = const char*;\n    using reference = const char&;\n    using iterator_category = std::input_iterator_tag;\n\n    MyIterator& operator++() {\n        target->advance();\n        return *this;\n    }\n\n    bool operator!=(const MyIterator& rhs) const {\n        return rhs.target != target;\n    }\n\n    reference operator*() const {\n        return target->get_current();\n    }\n\n    MyContainer* target = nullptr;\n};\n\nMyIterator begin(MyContainer& tgt) {\n    return MyIterator{&tgt};\n}\n\nMyIterator end(const MyContainer&) {\n    return {};\n}\n\nvoid foo() {\n    MyContainer c;\n    json j = json::parse(c);\n}\n```\n\n#### SAX interface\n\nThe library uses a SAX-like interface with the following functions:\n\n```cpp\n// called when null is parsed\nbool null();\n\n// called when a boolean is parsed; value is passed\nbool boolean(bool val);\n\n// called when a signed or unsigned integer number is parsed; value is passed\nbool number_integer(number_integer_t val);\nbool number_unsigned(number_unsigned_t val);\n\n// called when a floating-point number is parsed; value and original string is passed\nbool number_float(number_float_t val, const string_t& s);\n\n// called when a string is parsed; value is passed and can be safely moved away\nbool string(string_t& val);\n// called when a binary value is parsed; value is passed and can be safely moved away\nbool binary(binary_t& val);\n\n// called when an object or array begins or ends, resp. The number of elements is passed (or -1 if not known)\nbool start_object(std::size_t elements);\nbool end_object();\nbool start_array(std::size_t elements);\nbool end_array();\n// called when an object key is parsed; value is passed and can be safely moved away\nbool key(string_t& val);\n\n// called when a parse error occurs; byte position, the last token, and an exception is passed\nbool parse_error(std::size_t position, const std::string& last_token, const detail::exception& ex);\n```\n\nThe return value of each function determines whether parsing should proceed.\n\nTo implement your own SAX handler, proceed as follows:\n\n1. Implement the SAX interface in a class. You can use class `nlohmann::json_sax<json>` as base class, but you can also use any class where the functions described above are implemented and public.\n2. Create an object of your SAX interface class, e.g. `my_sax`.\n3. Call `bool json::sax_parse(input, &my_sax)`; where the first parameter can be any input like a string or an input stream and the second parameter is a pointer to your SAX interface.\n\nNote the `sax_parse` function only returns a `bool` indicating the result of the last executed SAX event. It does not return a  `json` value - it is up to you to decide what to do with the SAX events. Furthermore, no exceptions are thrown in case of a parse error - it is up to you what to do with the exception object passed to your `parse_error` implementation. Internally, the SAX interface is used for the DOM parser (class `json_sax_dom_parser`) as well as the acceptor (`json_sax_acceptor`), see file [`json_sax.hpp`](https://github.com/nlohmann/json/blob/develop/include/nlohmann/detail/input/json_sax.hpp).\n\n### STL-like access\n\nWe designed the JSON class to behave just like an STL container. In fact, it satisfies the [**ReversibleContainer**](https://en.cppreference.com/w/cpp/named_req/ReversibleContainer) requirement.\n\n```cpp\n// create an array using push_back\njson j;\nj.push_back(\"foo\");\nj.push_back(1);\nj.push_back(true);\n\n// also use emplace_back\nj.emplace_back(1.78);\n\n// iterate the array\nfor (json::iterator it = j.begin(); it != j.end(); ++it) {\n  std::cout << *it << '\\n';\n}\n\n// range-based for\nfor (auto& element : j) {\n  std::cout << element << '\\n';\n}\n\n// getter/setter\nconst auto tmp = j[0].template get<std::string>();\nj[1] = 42;\nbool foo = j.at(2);\n\n// comparison\nj == R\"([\"foo\", 1, true, 1.78])\"_json;  // true\n\n// other stuff\nj.size();     // 4 entries\nj.empty();    // false\nj.type();     // json::value_t::array\nj.clear();    // the array is empty again\n\n// convenience type checkers\nj.is_null();\nj.is_boolean();\nj.is_number();\nj.is_object();\nj.is_array();\nj.is_string();\n\n// create an object\njson o;\no[\"foo\"] = 23;\no[\"bar\"] = false;\no[\"baz\"] = 3.141;\n\n// also use emplace\no.emplace(\"weather\", \"sunny\");\n\n// special iterator member functions for objects\nfor (json::iterator it = o.begin(); it != o.end(); ++it) {\n  std::cout << it.key() << \" : \" << it.value() << \"\\n\";\n}\n\n// the same code as range for\nfor (auto& el : o.items()) {\n  std::cout << el.key() << \" : \" << el.value() << \"\\n\";\n}\n\n// even easier with structured bindings (C++17)\nfor (auto& [key, value] : o.items()) {\n  std::cout << key << \" : \" << value << \"\\n\";\n}\n\n// find an entry\nif (o.contains(\"foo\")) {\n  // there is an entry with key \"foo\"\n}\n\n// or via find and an iterator\nif (o.find(\"foo\") != o.end()) {\n  // there is an entry with key \"foo\"\n}\n\n// or simpler using count()\nint foo_present = o.count(\"foo\"); // 1\nint fob_present = o.count(\"fob\"); // 0\n\n// delete an entry\no.erase(\"foo\");\n```\n\n\n### Conversion from STL containers\n\nAny sequence container (`std::array`, `std::vector`, `std::deque`, `std::forward_list`, `std::list`) whose values can be used to construct JSON values (e.g., integers, floating point numbers, Booleans, string types, or again STL containers described in this section) can be used to create a JSON array. The same holds for similar associative containers (`std::set`, `std::multiset`, `std::unordered_set`, `std::unordered_multiset`), but in these cases the order of the elements of the array depends on how the elements are ordered in the respective STL container.\n\n```cpp\nstd::vector<int> c_vector {1, 2, 3, 4};\njson j_vec(c_vector);\n// [1, 2, 3, 4]\n\nstd::deque<double> c_deque {1.2, 2.3, 3.4, 5.6};\njson j_deque(c_deque);\n// [1.2, 2.3, 3.4, 5.6]\n\nstd::list<bool> c_list {true, true, false, true};\njson j_list(c_list);\n// [true, true, false, true]\n\nstd::forward_list<int64_t> c_flist {12345678909876, 23456789098765, 34567890987654, 45678909876543};\njson j_flist(c_flist);\n// [12345678909876, 23456789098765, 34567890987654, 45678909876543]\n\nstd::array<unsigned long, 4> c_array {{1, 2, 3, 4}};\njson j_array(c_array);\n// [1, 2, 3, 4]\n\nstd::set<std::string> c_set {\"one\", \"two\", \"three\", \"four\", \"one\"};\njson j_set(c_set); // only one entry for \"one\" is used\n// [\"four\", \"one\", \"three\", \"two\"]\n\nstd::unordered_set<std::string> c_uset {\"one\", \"two\", \"three\", \"four\", \"one\"};\njson j_uset(c_uset); // only one entry for \"one\" is used\n// maybe [\"two\", \"three\", \"four\", \"one\"]\n\nstd::multiset<std::string> c_mset {\"one\", \"two\", \"one\", \"four\"};\njson j_mset(c_mset); // both entries for \"one\" are used\n// maybe [\"one\", \"two\", \"one\", \"four\"]\n\nstd::unordered_multiset<std::string> c_umset {\"one\", \"two\", \"one\", \"four\"};\njson j_umset(c_umset); // both entries for \"one\" are used\n// maybe [\"one\", \"two\", \"one\", \"four\"]\n```\n\nLikewise, any associative key-value containers (`std::map`, `std::multimap`, `std::unordered_map`, `std::unordered_multimap`) whose keys can construct an `std::string` and whose values can be used to construct JSON values (see examples above) can be used to create a JSON object. Note that in case of multimaps only one key is used in the JSON object and the value depends on the internal order of the STL container.\n\n```cpp\nstd::map<std::string, int> c_map { {\"one\", 1}, {\"two\", 2}, {\"three\", 3} };\njson j_map(c_map);\n// {\"one\": 1, \"three\": 3, \"two\": 2 }\n\nstd::unordered_map<const char*, double> c_umap { {\"one\", 1.2}, {\"two\", 2.3}, {\"three\", 3.4} };\njson j_umap(c_umap);\n// {\"one\": 1.2, \"two\": 2.3, \"three\": 3.4}\n\nstd::multimap<std::string, bool> c_mmap { {\"one\", true}, {\"two\", true}, {\"three\", false}, {\"three\", true} };\njson j_mmap(c_mmap); // only one entry for key \"three\" is used\n// maybe {\"one\": true, \"two\": true, \"three\": true}\n\nstd::unordered_multimap<std::string, bool> c_ummap { {\"one\", true}, {\"two\", true}, {\"three\", false}, {\"three\", true} };\njson j_ummap(c_ummap); // only one entry for key \"three\" is used\n// maybe {\"one\": true, \"two\": true, \"three\": true}\n```\n\n### JSON Pointer and JSON Patch\n\nThe library supports **JSON Pointer** ([RFC 6901](https://tools.ietf.org/html/rfc6901)) as alternative means to address structured values. On top of this, **JSON Patch** ([RFC 6902](https://tools.ietf.org/html/rfc6902)) allows describing differences between two JSON values - effectively allowing patch and diff operations known from Unix.\n\n```cpp\n// a JSON value\njson j_original = R\"({\n  \"baz\": [\"one\", \"two\", \"three\"],\n  \"foo\": \"bar\"\n})\"_json;\n\n// access members with a JSON pointer (RFC 6901)\nj_original[\"/baz/1\"_json_pointer];\n// \"two\"\n\n// a JSON patch (RFC 6902)\njson j_patch = R\"([\n  { \"op\": \"replace\", \"path\": \"/baz\", \"value\": \"boo\" },\n  { \"op\": \"add\", \"path\": \"/hello\", \"value\": [\"world\"] },\n  { \"op\": \"remove\", \"path\": \"/foo\"}\n])\"_json;\n\n// apply the patch\njson j_result = j_original.patch(j_patch);\n// {\n//    \"baz\": \"boo\",\n//    \"hello\": [\"world\"]\n// }\n\n// calculate a JSON patch from two JSON values\njson::diff(j_result, j_original);\n// [\n//   { \"op\":\" replace\", \"path\": \"/baz\", \"value\": [\"one\", \"two\", \"three\"] },\n//   { \"op\": \"remove\",\"path\": \"/hello\" },\n//   { \"op\": \"add\", \"path\": \"/foo\", \"value\": \"bar\" }\n// ]\n```\n\n### JSON Merge Patch\n\nThe library supports **JSON Merge Patch** ([RFC 7386](https://tools.ietf.org/html/rfc7386)) as a patch format. Instead of using JSON Pointer (see above) to specify values to be manipulated, it describes the changes using a syntax that closely mimics the document being modified.\n\n```cpp\n// a JSON value\njson j_document = R\"({\n  \"a\": \"b\",\n  \"c\": {\n    \"d\": \"e\",\n    \"f\": \"g\"\n  }\n})\"_json;\n\n// a patch\njson j_patch = R\"({\n  \"a\":\"z\",\n  \"c\": {\n    \"f\": null\n  }\n})\"_json;\n\n// apply the patch\nj_document.merge_patch(j_patch);\n// {\n//  \"a\": \"z\",\n//  \"c\": {\n//    \"d\": \"e\"\n//  }\n// }\n```\n\n### Implicit conversions\n\nSupported types can be implicitly converted to JSON values.\n\nIt is recommended to **NOT USE** implicit conversions **FROM** a JSON value.\nYou can find more details about this recommendation [here](https://www.github.com/nlohmann/json/issues/958).\nYou can switch off implicit conversions by defining `JSON_USE_IMPLICIT_CONVERSIONS` to `0` before including the `json.hpp` header. When using CMake, you can also achieve this by setting the option `JSON_ImplicitConversions` to `OFF`.\n\n```cpp\n// strings\nstd::string s1 = \"Hello, world!\";\njson js = s1;\nauto s2 = js.template get<std::string>();\n// NOT RECOMMENDED\nstd::string s3 = js;\nstd::string s4;\ns4 = js;\n\n// Booleans\nbool b1 = true;\njson jb = b1;\nauto b2 = jb.template get<bool>();\n// NOT RECOMMENDED\nbool b3 = jb;\nbool b4;\nb4 = jb;\n\n// numbers\nint i = 42;\njson jn = i;\nauto f = jn.template get<double>();\n// NOT RECOMMENDED\ndouble f2 = jb;\ndouble f3;\nf3 = jb;\n\n// etc.\n```\n\nNote that `char` types are not automatically converted to JSON strings, but to integer numbers. A conversion to a string must be specified explicitly:\n\n```cpp\nchar ch = 'A';                       // ASCII value 65\njson j_default = ch;                 // stores integer number 65\njson j_string = std::string(1, ch);  // stores string \"A\"\n```\n\n### Arbitrary types conversions\n\nEvery type can be serialized in JSON, not just STL containers and scalar types. Usually, you would do something along those lines:\n\n```cpp\nnamespace ns {\n    // a simple struct to model a person\n    struct person {\n        std::string name;\n        std::string address;\n        int age;\n    };\n}\n\nns::person p = {\"Ned Flanders\", \"744 Evergreen Terrace\", 60};\n\n// convert to JSON: copy each value into the JSON object\njson j;\nj[\"name\"] = p.name;\nj[\"address\"] = p.address;\nj[\"age\"] = p.age;\n\n// ...\n\n// convert from JSON: copy each value from the JSON object\nns::person p {\n    j[\"name\"].template get<std::string>(),\n    j[\"address\"].template get<std::string>(),\n    j[\"age\"].template get<int>()\n};\n```\n\nIt works, but that's quite a lot of boilerplate... Fortunately, there's a better way:\n\n```cpp\n// create a person\nns::person p {\"Ned Flanders\", \"744 Evergreen Terrace\", 60};\n\n// conversion: person -> json\njson j = p;\n\nstd::cout << j << std::endl;\n// {\"address\":\"744 Evergreen Terrace\",\"age\":60,\"name\":\"Ned Flanders\"}\n\n// conversion: json -> person\nauto p2 = j.template get<ns::person>();\n\n// that's it\nassert(p == p2);\n```\n\n#### Basic usage\n\nTo make this work with one of your types, you only need to provide two functions:\n\n```cpp\nusing json = nlohmann::json;\n\nnamespace ns {\n    void to_json(json& j, const person& p) {\n        j = json{{\"name\", p.name}, {\"address\", p.address}, {\"age\", p.age}};\n    }\n\n    void from_json(const json& j, person& p) {\n        j.at(\"name\").get_to(p.name);\n        j.at(\"address\").get_to(p.address);\n        j.at(\"age\").get_to(p.age);\n    }\n} // namespace ns\n```\n\nThat's all! When calling the `json` constructor with your type, your custom `to_json` method will be automatically called.\nLikewise, when calling `template get<your_type>()` or `get_to(your_type&)`, the `from_json` method will be called.\n\nSome important things:\n\n* Those methods **MUST** be in your type's namespace (which can be the global namespace), or the library will not be able to locate them (in this example, they are in namespace `ns`, where `person` is defined).\n* Those methods **MUST** be available (e.g., proper headers must be included) everywhere you use these conversions. Look at [issue 1108](https://github.com/nlohmann/json/issues/1108) for errors that may occur otherwise.\n* When using `template get<your_type>()`, `your_type` **MUST** be [DefaultConstructible](https://en.cppreference.com/w/cpp/named_req/DefaultConstructible). (There is a way to bypass this requirement described later.)\n* In function `from_json`, use function [`at()`](https://json.nlohmann.me/api/basic_json/at/) to access the object values rather than `operator[]`. In case a key does not exist, `at` throws an exception that you can handle, whereas `operator[]` exhibits undefined behavior.\n* You do not need to add serializers or deserializers for STL types like `std::vector`: the library already implements these.\n\n#### Simplify your life with macros\n\nIf you just want to serialize/deserialize some structs, the `to_json`/`from_json` functions can be a lot of boilerplate.\n\nThere are two macros to make your life easier as long as you (1) want to use a JSON object as serialization and (2) want to use the member variable names as object keys in that object:\n\n- `NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(name, member1, member2, ...)` is to be defined inside the namespace of the class/struct to create code for.\n- `NLOHMANN_DEFINE_TYPE_INTRUSIVE(name, member1, member2, ...)` is to be defined inside the class/struct to create code for. This macro can also access private members.\n\nIn both macros, the first parameter is the name of the class/struct, and all remaining parameters name the members.\n\n##### Examples\n\nThe `to_json`/`from_json` functions for the `person` struct above can be created with:\n\n```cpp\nnamespace ns {\n    NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(person, name, address, age)\n}\n```\n\nHere is an example with private members, where `NLOHMANN_DEFINE_TYPE_INTRUSIVE` is needed:\n\n```cpp\nnamespace ns {\n    class address {\n      private:\n        std::string street;\n        int housenumber;\n        int postcode;\n\n      public:\n        NLOHMANN_DEFINE_TYPE_INTRUSIVE(address, street, housenumber, postcode)\n    };\n}\n```\n\n#### How do I convert third-party types?\n\nThis requires a bit more advanced technique. But first, let's see how this conversion mechanism works:\n\nThe library uses **JSON Serializers** to convert types to json.\nThe default serializer for `nlohmann::json` is `nlohmann::adl_serializer` (ADL means [Argument-Dependent Lookup](https://en.cppreference.com/w/cpp/language/adl)).\n\nIt is implemented like this (simplified):\n\n```cpp\ntemplate <typename T>\nstruct adl_serializer {\n    static void to_json(json& j, const T& value) {\n        // calls the \"to_json\" method in T's namespace\n    }\n\n    static void from_json(const json& j, T& value) {\n        // same thing, but with the \"from_json\" method\n    }\n};\n```\n\nThis serializer works fine when you have control over the type's namespace. However, what about `boost::optional` or `std::filesystem::path` (C++17)? Hijacking the `boost` namespace is pretty bad, and it's illegal to add something other than template specializations to `std`...\n\nTo solve this, you need to add a specialization of `adl_serializer` to the `nlohmann` namespace, here's an example:\n\n```cpp\n// partial specialization (full specialization works too)\nnamespace nlohmann {\n    template <typename T>\n    struct adl_serializer<boost::optional<T>> {\n        static void to_json(json& j, const boost::optional<T>& opt) {\n            if (opt == boost::none) {\n                j = nullptr;\n            } else {\n              j = *opt; // this will call adl_serializer<T>::to_json which will\n                        // find the free function to_json in T's namespace!\n            }\n        }\n\n        static void from_json(const json& j, boost::optional<T>& opt) {\n            if (j.is_null()) {\n                opt = boost::none;\n            } else {\n                opt = j.template get<T>(); // same as above, but with\n                                           // adl_serializer<T>::from_json\n            }\n        }\n    };\n}\n```\n\n#### How can I use `get()` for non-default constructible/non-copyable types?\n\nThere is a way, if your type is [MoveConstructible](https://en.cppreference.com/w/cpp/named_req/MoveConstructible). You will need to specialize the `adl_serializer` as well, but with a special `from_json` overload:\n\n```cpp\nstruct move_only_type {\n    move_only_type() = delete;\n    move_only_type(int ii): i(ii) {}\n    move_only_type(const move_only_type&) = delete;\n    move_only_type(move_only_type&&) = default;\n\n    int i;\n};\n\nnamespace nlohmann {\n    template <>\n    struct adl_serializer<move_only_type> {\n        // note: the return type is no longer 'void', and the method only takes\n        // one argument\n        static move_only_type from_json(const json& j) {\n            return {j.template get<int>()};\n        }\n\n        // Here's the catch! You must provide a to_json method! Otherwise, you\n        // will not be able to convert move_only_type to json, since you fully\n        // specialized adl_serializer on that type\n        static void to_json(json& j, move_only_type t) {\n            j = t.i;\n        }\n    };\n}\n```\n\n#### Can I write my own serializer? (Advanced use)\n\nYes. You might want to take a look at [`unit-udt.cpp`](https://github.com/nlohmann/json/blob/develop/tests/src/unit-udt.cpp) in the test suite, to see a few examples.\n\nIf you write your own serializer, you'll need to do a few things:\n\n- use a different `basic_json` alias than `nlohmann::json` (the last template parameter of `basic_json` is the `JSONSerializer`)\n- use your `basic_json` alias (or a template parameter) in all your `to_json`/`from_json` methods\n- use `nlohmann::to_json` and `nlohmann::from_json` when you need ADL\n\nHere is an example, without simplifications, that only accepts types with a size <= 32, and uses ADL.\n\n```cpp\n// You should use void as a second template argument\n// if you don't need compile-time checks on T\ntemplate<typename T, typename SFINAE = typename std::enable_if<sizeof(T) <= 32>::type>\nstruct less_than_32_serializer {\n    template <typename BasicJsonType>\n    static void to_json(BasicJsonType& j, T value) {\n        // we want to use ADL, and call the correct to_json overload\n        using nlohmann::to_json; // this method is called by adl_serializer,\n                                 // this is where the magic happens\n        to_json(j, value);\n    }\n\n    template <typename BasicJsonType>\n    static void from_json(const BasicJsonType& j, T& value) {\n        // same thing here\n        using nlohmann::from_json;\n        from_json(j, value);\n    }\n};\n```\n\nBe **very** careful when reimplementing your serializer, you can stack overflow if you don't pay attention:\n\n```cpp\ntemplate <typename T, void>\nstruct bad_serializer\n{\n    template <typename BasicJsonType>\n    static void to_json(BasicJsonType& j, const T& value) {\n      // this calls BasicJsonType::json_serializer<T>::to_json(j, value);\n      // if BasicJsonType::json_serializer == bad_serializer ... oops!\n      j = value;\n    }\n\n    template <typename BasicJsonType>\n    static void to_json(const BasicJsonType& j, T& value) {\n      // this calls BasicJsonType::json_serializer<T>::from_json(j, value);\n      // if BasicJsonType::json_serializer == bad_serializer ... oops!\n      value = j.template get<T>(); // oops!\n    }\n};\n```\n\n### Specializing enum conversion\n\nBy default, enum values are serialized to JSON as integers. In some cases this could result in undesired behavior. If an enum is modified or re-ordered after data has been serialized to JSON, the later de-serialized JSON data may be undefined or a different enum value than was originally intended.\n\nIt is possible to more precisely specify how a given enum is mapped to and from JSON as shown below:\n\n```cpp\n// example enum type declaration\nenum TaskState {\n    TS_STOPPED,\n    TS_RUNNING,\n    TS_COMPLETED,\n    TS_INVALID=-1,\n};\n\n// map TaskState values to JSON as strings\nNLOHMANN_JSON_SERIALIZE_ENUM( TaskState, {\n    {TS_INVALID, nullptr},\n    {TS_STOPPED, \"stopped\"},\n    {TS_RUNNING, \"running\"},\n    {TS_COMPLETED, \"completed\"},\n})\n```\n\nThe `NLOHMANN_JSON_SERIALIZE_ENUM()` macro declares a set of `to_json()` / `from_json()` functions for type `TaskState` while avoiding repetition and boilerplate serialization code.\n\n**Usage:**\n\n```cpp\n// enum to JSON as string\njson j = TS_STOPPED;\nassert(j == \"stopped\");\n\n// json string to enum\njson j3 = \"running\";\nassert(j3.template get<TaskState>() == TS_RUNNING);\n\n// undefined json value to enum (where the first map entry above is the default)\njson jPi = 3.14;\nassert(jPi.template get<TaskState>() == TS_INVALID );\n```\n\nJust as in [Arbitrary Type Conversions](#arbitrary-types-conversions) above,\n- `NLOHMANN_JSON_SERIALIZE_ENUM()` MUST be declared in your enum type's namespace (which can be the global namespace), or the library will not be able to locate it, and it will default to integer serialization.\n- It MUST be available (e.g., proper headers must be included) everywhere you use the conversions.\n\nOther Important points:\n- When using `template get<ENUM_TYPE>()`, undefined JSON values will default to the first pair specified in your map. Select this default pair carefully.\n- If an enum or JSON value is specified more than once in your map, the first matching occurrence from the top of the map will be returned when converting to or from JSON.\n\n### Binary formats (BSON, CBOR, MessagePack, UBJSON, and BJData)\n\nThough JSON is a ubiquitous data format, it is not a very compact format suitable for data exchange, for instance over a network. Hence, the library supports [BSON](https://bsonspec.org) (Binary JSON), [CBOR](https://cbor.io) (Concise Binary Object Representation), [MessagePack](https://msgpack.org), [UBJSON](https://ubjson.org) (Universal Binary JSON Specification) and [BJData](https://neurojson.org/bjdata) (Binary JData) to efficiently encode JSON values to byte vectors and to decode such vectors.\n\n```cpp\n// create a JSON value\njson j = R\"({\"compact\": true, \"schema\": 0})\"_json;\n\n// serialize to BSON\nstd::vector<std::uint8_t> v_bson = json::to_bson(j);\n\n// 0x1B, 0x00, 0x00, 0x00, 0x08, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x63, 0x74, 0x00, 0x01, 0x10, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n\n// roundtrip\njson j_from_bson = json::from_bson(v_bson);\n\n// serialize to CBOR\nstd::vector<std::uint8_t> v_cbor = json::to_cbor(j);\n\n// 0xA2, 0x67, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x63, 0x74, 0xF5, 0x66, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x00\n\n// roundtrip\njson j_from_cbor = json::from_cbor(v_cbor);\n\n// serialize to MessagePack\nstd::vector<std::uint8_t> v_msgpack = json::to_msgpack(j);\n\n// 0x82, 0xA7, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x63, 0x74, 0xC3, 0xA6, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x00\n\n// roundtrip\njson j_from_msgpack = json::from_msgpack(v_msgpack);\n\n// serialize to UBJSON\nstd::vector<std::uint8_t> v_ubjson = json::to_ubjson(j);\n\n// 0x7B, 0x69, 0x07, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x63, 0x74, 0x54, 0x69, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x69, 0x00, 0x7D\n\n// roundtrip\njson j_from_ubjson = json::from_ubjson(v_ubjson);\n```\n\nThe library also supports binary types from BSON, CBOR (byte strings), and MessagePack (bin, ext, fixext). They are stored by default as `std::vector<std::uint8_t>` to be processed outside the library.\n\n```cpp\n// CBOR byte string with payload 0xCAFE\nstd::vector<std::uint8_t> v = {0x42, 0xCA, 0xFE};\n\n// read value\njson j = json::from_cbor(v);\n\n// the JSON value has type binary\nj.is_binary(); // true\n\n// get reference to stored binary value\nauto& binary = j.get_binary();\n\n// the binary value has no subtype (CBOR has no binary subtypes)\nbinary.has_subtype(); // false\n\n// access std::vector<std::uint8_t> member functions\nbinary.size(); // 2\nbinary[0]; // 0xCA\nbinary[1]; // 0xFE\n\n// set subtype to 0x10\nbinary.set_subtype(0x10);\n\n// serialize to MessagePack\nauto cbor = json::to_msgpack(j); // 0xD5 (fixext2), 0x10, 0xCA, 0xFE\n```\n\n## Customers\n\nThe library is used in multiple projects, applications, operating systems, etc. The list below is not exhaustive, but the result of an internet search. If you know further customers of the library, please let me know, see [contact](#contact).\n\n[![](docs/mkdocs/docs/images/customers.png)](https://json.nlohmann.me/home/customers/)\n\n## Supported compilers\n\nThough it's 2024 already, the support for C++11 is still a bit sparse. Currently, the following compilers are known to work:\n\n- GCC 4.8 - 14.2 (and possibly later)\n- Clang 3.4 - 20.0 (and possibly later)\n- Apple Clang 9.1 - 16.1 (and possibly later)\n- Intel C++ Compiler 17.0.2 (and possibly later)\n- Nvidia CUDA Compiler 11.0.221 (and possibly later)\n- Microsoft Visual C++ 2015 / Build Tools 14.0.25123.0 (and possibly later)\n- Microsoft Visual C++ 2017 / Build Tools 15.5.180.51428 (and possibly later)\n- Microsoft Visual C++ 2019 / Build Tools 16.3.1+1def00d3d (and possibly later)\n- Microsoft Visual C++ 2022 / Build Tools 19.30.30709.0 (and possibly later)\n\nI would be happy to learn about other compilers/versions.\n\nPlease note:\n\n- GCC 4.8 has a bug [57824](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=57824)): multiline raw strings cannot be the arguments to macros. Don't use multiline raw strings directly in macros with this compiler.\n- Android defaults to using very old compilers and C++ libraries. To fix this, add the following to your `Application.mk`. This will switch to the LLVM C++ library, the Clang compiler, and enable C++11 and other features disabled by default.\n\n    ```\n    APP_STL := c++_shared\n    NDK_TOOLCHAIN_VERSION := clang3.6\n    APP_CPPFLAGS += -frtti -fexceptions\n    ```\n\n    The code compiles successfully with [Android NDK](https://developer.android.com/ndk/index.html?hl=ml), Revision 9 - 11 (and possibly later) and [CrystaX's Android NDK](https://www.crystax.net/en/android/ndk) version 10.\n\n- For GCC running on MinGW or Android SDK, the error `'to_string' is not a member of 'std'` (or similarly, for `strtod` or `strtof`) may occur. Note this is not an issue with the code,  but rather with the compiler itself. On Android, see above to build with a newer environment.  For MinGW, please refer to [this site](https://tehsausage.com/mingw-to-string) and [this discussion](https://github.com/nlohmann/json/issues/136) for information on how to fix this bug. For Android NDK using `APP_STL := gnustl_static`, please refer to [this discussion](https://github.com/nlohmann/json/issues/219).\n\n- Unsupported versions of GCC and Clang are rejected by `#error` directives. This can be switched off by defining `JSON_SKIP_UNSUPPORTED_COMPILER_CHECK`. Note that you can expect no support in this case.\n\nThe following compilers are currently used in continuous integration at [AppVeyor](https://ci.appveyor.com/project/nlohmann/json), [Cirrus CI](https://cirrus-ci.com/github/nlohmann/json), and [GitHub Actions](https://github.com/nlohmann/json/actions):\n\n| Compiler                                                                                               | Operating System   | CI Provider    |\n|--------------------------------------------------------------------------------------------------------|--------------------|----------------|\n| Apple Clang 14.0.0 (clang-1400.0.29.202); Xcode 14.1                                                   | macOS 13.7         | GitHub Actions |\n| Apple Clang 14.0.0 (clang-1400.0.29.202); Xcode 14.2                                                   | macOS 13.7         | GitHub Actions |\n| Apple Clang 14.0.3 (clang-1403.0.22.14.1); Xcode 14.3                                                  | macOS 13.7         | GitHub Actions |\n| Apple Clang 14.0.3 (clang-1403.0.22.14.1); Xcode 14.3.1                                                | macOS 13.7.1       | GitHub Actions |\n| Apple Clang 15.0.0 (clang-1500.0.40.1); Xcode 15.0.1                                                   | macOS 13.7         | GitHub Actions |\n| Apple Clang 15.0.0 (clang-1500.1.0.2.5); Xcode 15.1                                                    | macOS 13.7         | GitHub Actions |\n| Apple Clang 15.0.0 (clang-1500.1.0.2.5); Xcode 15.2                                                    | macOS 13.7         | GitHub Actions |\n| Apple Clang 15.0.0 (clang-1500.3.9.4); Xcode 15.3                                                      | macOS 14.7         | GitHub Actions |\n| Apple Clang 15.0.0 (clang-1500.3.9.4); Xcode 15.4                                                      | macOS 14.7         | GitHub Actions |\n| Apple Clang 16.0.0 (clang-1600.0.26.3); Xcode 16.0                                                     | macOS 15.0.1       | GitHub Actions |\n| Apple Clang 16.0.0 (clang-1600.0.26.4); Xcode 16.1                                                     | macOS 15.0.1       | GitHub Actions |\n| Clang 3.5.2                                                                                            | Ubuntu 22.04.1 LTS | GitHub Actions |\n| Clang 3.6.2                                                                                            | Ubuntu 22.04.1 LTS | GitHub Actions |\n| Clang 3.7.1                                                                                            | Ubuntu 22.04.1 LTS | GitHub Actions |\n| Clang 3.8.1                                                                                            | Ubuntu 22.04.1 LTS | GitHub Actions |\n| Clang 3.9.1                                                                                            | Ubuntu 22.04.1 LTS | GitHub Actions |\n| Clang 4.0.1                                                                                            | Ubuntu 22.04.1 LTS | GitHub Actions |\n| Clang 5.0.2                                                                                            | Ubuntu 22.04.1 LTS | GitHub Actions |\n| Clang 6.0.1                                                                                            | Ubuntu 22.04.1 LTS | GitHub Actions |\n| Clang 7.0.1                                                                                            | Ubuntu 22.04.1 LTS | GitHub Actions |\n| Clang 8.0.0                                                                                            | Ubuntu 22.04.1 LTS | GitHub Actions |\n| Clang 9.0.0                                                                                            | Ubuntu 22.04.1 LTS | GitHub Actions |\n| Clang 10.0.0                                                                                           | Ubuntu 22.04.1 LTS | GitHub Actions |\n| Clang 10.0.0 with GNU-like command-line                                                                | Windows-10.0.17763 | GitHub Actions |\n| Clang 11.0.0 with GNU-like command-line                                                                | Windows-10.0.17763 | GitHub Actions |\n| Clang 11.0.0 with MSVC-like command-line                                                               | Windows-10.0.17763 | GitHub Actions |\n| Clang 11.0.0                                                                                           | Ubuntu 20.04.3 LTS | GitHub Actions |\n| Clang 12.0.0                                                                                           | Ubuntu 20.04.3 LTS | GitHub Actions |\n| Clang 12.0.0 with GNU-like command-line                                                                | Windows-10.0.17763 | GitHub Actions |\n| Clang 13.0.0                                                                                           | Ubuntu 20.04.3 LTS | GitHub Actions |\n| Clang 13.0.0 with GNU-like command-line                                                                | Windows-10.0.17763 | GitHub Actions |\n| Clang 14.0.0                                                                                           | Ubuntu 20.04.3 LTS | GitHub Actions |\n| Clang 14.0.0 with GNU-like command-line                                                                | Windows-10.0.17763 | GitHub Actions |\n| Clang 15.0.0 with GNU-like command-line                                                                | Windows-10.0.17763 | GitHub Actions |\n| Clang 15.0.4                                                                                           | Ubuntu 20.04.3 LTS | GitHub Actions |\n| Clang 16.0.0 (16.0.0-++20221031071727+500876226c60-1~exp1~20221031071831.439)                          | Ubuntu 20.04.3 LTS | GitHub Actions |\n| Clang 16.0.6 (++20231112084702+7cbf1a259152-1~exp1~20231112084757.16)                                  | Ubuntu 20.04.1 LTS | GitHub Actions |\n| Clang 17.0.6 (++20231208085813+6009708b4367-1~exp1~20231208085906.81)                                  | Ubuntu 20.04.1 LTS | GitHub Actions |\n| Clang 18.1.8 (++20240731024826+3b5b5c1ec4a3-1~exp1~20240731144843.145)                                 | Ubuntu 20.04.1 LTS | GitHub Actions |\n| Clang 19.1.2 (++20241016063422+7ba7d8e2f7b6-1~exp1~20241016063541.55)                                  | Ubuntu 20.04.1 LTS | GitHub Actions |\n| Clang 20.0.0 (++20241022113049+f1ade1f874db-1~exp1~20241022113104.1036)                                | Ubuntu 22.04.1 LTS | GitHub Actions |\n| GCC 4.8.5 (Ubuntu 4.8.5-4ubuntu8)                                                                      | Ubuntu 20.04.4 LTS | GitHub Actions |\n| GCC 4.9.3 (Ubuntu 4.9.3-13ubuntu2)                                                                     | Ubuntu 20.04.4 LTS | GitHub Actions |\n| GCC 4.8.5 (Ubuntu 4.8.5-4ubuntu2)                                                                      | Ubuntu 20.04.4 LTS | GitHub Actions |\n| GCC 5.5.0 (Ubuntu 5.5.0-12ubuntu1)                                                                     | Ubuntu 20.04.4 LTS | GitHub Actions |\n| GCC 6.4.0 (Ubuntu 6.4.0-17ubuntu1)                                                                     | Ubuntu 20.04.4 LTS | GitHub Actions |\n| GCC 7.5.0                                                                                              | Ubuntu 22.04.1 LTS | GitHub Actions |\n| GCC 8.1.0 (i686-posix-dwarf-rev0, Built by MinGW-W64 project)                                          | Windows-10.0.17763 | GitHub Actions |\n| GCC 8.1.0 (x86_64-posix-seh-rev0, Built by MinGW-W64 project)                                          | Windows-10.0.17763 | GitHub Actions |\n| GCC 8.5.0                                                                                              | Ubuntu 22.04.1 LTS | GitHub Actions |\n| GCC 9.5.0                                                                                              | Ubuntu 22.04.1 LTS | GitHub Actions |\n| GCC 10.5.0                                                                                             | Ubuntu 22.04.1 LTS | GitHub Actions |\n| GCC 11.1.0                                                                                             | Ubuntu (aarch64)   | Cirrus CI      |\n| GCC 11.5.0                                                                                             | Ubuntu 22.04.1 LTS | GitHub Actions |\n| GCC 12.4.0                                                                                             | Ubuntu 22.04.1 LTS | GitHub Actions |\n| GCC 13.0.0 20220605 (experimental)                                                                     | Ubuntu 20.04.3 LTS | GitHub Actions |\n| GCC 13.3.0                                                                                             | Ubuntu 22.04.1 LTS | GitHub Actions |\n| GCC 14.2.0                                                                                             | Ubuntu 22.04.1 LTS | GitHub Actions |\n| Intel C++ Compiler 2021.5.0.20211109                                                                   | Ubuntu 20.04.3 LTS | GitHub Actions |\n| NVCC 11.0.221                                                                                          | Ubuntu 20.04.3 LTS | GitHub Actions |\n| Visual Studio 14 2015 MSVC 19.0.24241.7 (Build Engine version 14.0.25420.1)                            | Windows-6.3.9600   | AppVeyor       |\n| Visual Studio 15 2017 MSVC 19.16.27035.0 (Build Engine version 15.9.21+g9802d43bc3 for .NET Framework) | Windows-10.0.14393 | AppVeyor       |\n| Visual Studio 16 2019 MSVC 19.28.29912.0 (Build Engine version 16.9.0+57a23d249 for .NET Framework)    | Windows-10.0.17763 | GitHub Actions |\n| Visual Studio 16 2019 MSVC 19.28.29912.0 (Build Engine version 16.9.0+57a23d249 for .NET Framework)    | Windows-10.0.17763 | AppVeyor       |\n| Visual Studio 17 2022 MSVC 19.30.30709.0 (Build Engine version 17.0.31804.368 for .NET Framework)      | Windows-10.0.20348 | GitHub Actions |\n\n\n## Integration\n\n[`json.hpp`](https://github.com/nlohmann/json/blob/develop/single_include/nlohmann/json.hpp) is the single required file in `single_include/nlohmann` or [released here](https://github.com/nlohmann/json/releases). You need to add\n\n```cpp\n#include <nlohmann/json.hpp>\n\n// for convenience\nusing json = nlohmann::json;\n```\n\nto the files you want to process JSON and set the necessary switches to enable C++11 (e.g., `-std=c++11` for GCC and Clang).\n\nYou can further use file [`include/nlohmann/json_fwd.hpp`](https://github.com/nlohmann/json/blob/develop/include/nlohmann/json_fwd.hpp) for forward-declarations. The installation of json_fwd.hpp (as part of cmake's install step), can be achieved by setting `-DJSON_MultipleHeaders=ON`.\n\n### CMake\n\nYou can also use the `nlohmann_json::nlohmann_json` interface target in CMake.  This target populates the appropriate usage requirements for `INTERFACE_INCLUDE_DIRECTORIES` to point to the appropriate include directories and `INTERFACE_COMPILE_FEATURES` for the necessary C++11 flags.\n\n#### External\n\nTo use this library from a CMake project, you can locate it directly with `find_package()` and use the namespaced imported target from the generated package configuration:\n\n```cmake\n# CMakeLists.txt\nfind_package(nlohmann_json 3.2.0 REQUIRED)\n...\nadd_library(foo ...)\n...\ntarget_link_libraries(foo PRIVATE nlohmann_json::nlohmann_json)\n```\n\nThe package configuration file, `nlohmann_jsonConfig.cmake`, can be used either from an install tree or directly out of the build tree.\n\n#### Embedded\n\nTo embed the library directly into an existing CMake project, place the entire source tree in a subdirectory and call `add_subdirectory()` in your `CMakeLists.txt` file:\n\n```cmake\n# Typically you don't care so much for a third party library's tests to be\n# run from your own project's code.\nset(JSON_BuildTests OFF CACHE INTERNAL \"\")\n\n# If you only include this third party in PRIVATE source files, you do not\n# need to install it when your main project gets installed.\n# set(JSON_Install OFF CACHE INTERNAL \"\")\n\n# Don't use include(nlohmann_json/CMakeLists.txt) since that carries with it\n# unintended consequences that will break the build.  It's generally\n# discouraged (although not necessarily well documented as such) to use\n# include(...) for pulling in other CMake projects anyways.\nadd_subdirectory(nlohmann_json)\n...\nadd_library(foo ...)\n...\ntarget_link_libraries(foo PRIVATE nlohmann_json::nlohmann_json)\n```\n\n##### Embedded (FetchContent)\n\nSince CMake v3.11,\n[FetchContent](https://cmake.org/cmake/help/v3.11/module/FetchContent.html) can\nbe used to automatically download a release as a dependency at configure time.\n\nExample:\n```cmake\ninclude(FetchContent)\n\nFetchContent_Declare(json URL https://github.com/nlohmann/json/releases/download/v3.11.3/json.tar.xz)\nFetchContent_MakeAvailable(json)\n\ntarget_link_libraries(foo PRIVATE nlohmann_json::nlohmann_json)\n```\n\n**Note**: It is recommended to use the URL approach described above which is supported as of version 3.10.0. See\n<https://json.nlohmann.me/integration/cmake/#fetchcontent> for more information.\n\n#### Supporting Both\n\nTo allow your project to support either an externally supplied or an embedded JSON library, you can use a pattern akin to the following:\n\n``` cmake\n# Top level CMakeLists.txt\nproject(FOO)\n...\noption(FOO_USE_EXTERNAL_JSON \"Use an external JSON library\" OFF)\n...\nadd_subdirectory(thirdparty)\n...\nadd_library(foo ...)\n...\n# Note that the namespaced target will always be available regardless of the\n# import method\ntarget_link_libraries(foo PRIVATE nlohmann_json::nlohmann_json)\n```\n```cmake\n# thirdparty/CMakeLists.txt\n...\nif(FOO_USE_EXTERNAL_JSON)\n  find_package(nlohmann_json 3.2.0 REQUIRED)\nelse()\n  set(JSON_BuildTests OFF CACHE INTERNAL \"\")\n  add_subdirectory(nlohmann_json)\nendif()\n...\n```\n\n`thirdparty/nlohmann_json` is then a complete copy of this source tree.\n\n### Package Managers\n\n:beer: If you are using OS X and [Homebrew](https://brew.sh), just type `brew install nlohmann-json` and you're set. If you want the bleeding edge rather than the latest release, use `brew install nlohmann-json --HEAD`. See [nlohmann-json](https://formulae.brew.sh/formula/nlohmann-json) for more information.\n\nIf you are using the [Meson Build System](https://mesonbuild.com), add this source tree as a [meson subproject](https://mesonbuild.com/Subprojects.html#using-a-subproject). You may also use the `include.zip` published in this project's [Releases](https://github.com/nlohmann/json/releases) to reduce the size of the vendored source tree. Alternatively, you can get a wrap file by downloading it from [Meson WrapDB](https://wrapdb.mesonbuild.com/nlohmann_json), or simply use `meson wrap install nlohmann_json`. Please see the meson project for any issues regarding the packaging.\n\nThe provided `meson.build` can also be used as an alternative to CMake for installing `nlohmann_json` system-wide in which case a pkg-config file is installed. To use it, simply have your build system require the `nlohmann_json` pkg-config dependency. In Meson, it is preferred to use the [`dependency()`](https://mesonbuild.com/Reference-manual.html#dependency) object with a subproject fallback, rather than using the subproject directly.\n\nIf you are using [Bazel](https://bazel.build/) you can simply reference this repository using `http_archive` or `git_repository` and depend on `@nlohmann_json//:json`.\n\nIf you are using [Conan](https://www.conan.io/) to manage your dependencies, merely add [`nlohmann_json/x.y.z`](https://conan.io/center/nlohmann_json) to your `conanfile`'s requires, where `x.y.z` is the release version you want to use. Please file issues [here](https://github.com/conan-io/conan-center-index/issues) if you experience problems with the packages.\n\nIf you are using [Spack](https://www.spack.io/) to manage your dependencies, you can use the [`nlohmann-json` package](https://spack.readthedocs.io/en/latest/package_list.html#nlohmann-json). Please see the [spack project](https://github.com/spack/spack) for any issues regarding the packaging.\n\nIf you are using [hunter](https://github.com/cpp-pm/hunter) on your project for external dependencies, then you can use the [nlohmann_json package](https://hunter.readthedocs.io/en/latest/packages/pkg/nlohmann_json.html). Please see the hunter project for any issues regarding the packaging.\n\nIf you are using [Buckaroo](https://buckaroo.pm), you can install this library's module with `buckaroo add github.com/buckaroo-pm/nlohmann-json`. Please file issues [here](https://github.com/buckaroo-pm/nlohmann-json). There is a demo repo [here](https://github.com/njlr/buckaroo-nholmann-json-example).\n\nIf you are using [vcpkg](https://github.com/Microsoft/vcpkg/) on your project for external dependencies, then you can install the [nlohmann-json package](https://github.com/Microsoft/vcpkg/tree/master/ports/nlohmann-json) with `vcpkg install nlohmann-json` and follow the then displayed descriptions. Please see the vcpkg project for any issues regarding the packaging.\n\nIf you are using [cget](https://cget.readthedocs.io/en/latest/), you can install the latest development version with `cget install nlohmann/json`. A specific version can be installed with `cget install nlohmann/json@v3.1.0`. Also, the multiple header version can be installed by adding the `-DJSON_MultipleHeaders=ON` flag (i.e., `cget install nlohmann/json -DJSON_MultipleHeaders=ON`).\n\nIf you are using [CocoaPods](https://cocoapods.org), you can use the library by adding pod `\"nlohmann_json\", '~>3.1.2'` to your podfile (see [an example](https://bitbucket.org/benman/nlohmann_json-cocoapod/src/master/)). Please file issues [here](https://bitbucket.org/benman/nlohmann_json-cocoapod/issues?status=new&status=open).\n\nIf you are using [Swift Package Manager](https://swift.org/package-manager/), you can use the library by adding a package dependency to this repository. And target dependency as `.product(name: \"nlohmann-json\", package: \"json\")`.\n\nIf you are using [NuGet](https://www.nuget.org), you can use the package [nlohmann.json](https://www.nuget.org/packages/nlohmann.json/). Please check [this extensive description](https://github.com/nlohmann/json/issues/1132#issuecomment-452250255) on how to use the package. Please file issues [here](https://github.com/hnkb/nlohmann-json-nuget/issues).\n\nIf you are using [conda](https://conda.io/), you can use the package [nlohmann_json](https://github.com/conda-forge/nlohmann_json-feedstock) from [conda-forge](https://conda-forge.org) executing `conda install -c conda-forge nlohmann_json`. Please file issues [here](https://github.com/conda-forge/nlohmann_json-feedstock/issues).\n\nIf you are using [MSYS2](https://www.msys2.org/), you can use the [mingw-w64-nlohmann-json](https://packages.msys2.org/base/mingw-w64-nlohmann-json) package, just type `pacman -S mingw-w64-i686-nlohmann-json` or `pacman -S mingw-w64-x86_64-nlohmann-json` for installation. Please file issues [here](https://github.com/msys2/MINGW-packages/issues/new?title=%5Bnlohmann-json%5D) if you experience problems with the packages.\n\nIf you are using [MacPorts](https://ports.macports.org), execute `sudo port install nlohmann-json` to install the [nlohmann-json](https://ports.macports.org/port/nlohmann-json/) package.\n\nIf you are using [`build2`](https://build2.org), you can use the [`nlohmann-json`](https://cppget.org/nlohmann-json) package from the public repository https://cppget.org or directly from the [package's sources repository](https://github.com/build2-packaging/nlohmann-json). In your project's `manifest` file, just add `depends: nlohmann-json` (probably with some [version constraints](https://build2.org/build2-toolchain/doc/build2-toolchain-intro.xhtml#guide-add-remove-deps)). If you are not familiar with using dependencies in `build2`, [please read this introduction](https://build2.org/build2-toolchain/doc/build2-toolchain-intro.xhtml).\nPlease file issues [here](https://github.com/build2-packaging/nlohmann-json) if you experience problems with the packages.\n\nIf you are using [`wsjcpp`](https://wsjcpp.org), you can use the command `wsjcpp install \"https://github.com/nlohmann/json:develop\"` to get the latest version. Note you can change the branch \":develop\" to an existing tag or another branch.\n\nIf you are using [`CPM.cmake`](https://github.com/TheLartians/CPM.cmake), you can check this [`example`](https://github.com/TheLartians/CPM.cmake/tree/master/examples/json). After [adding CPM script](https://github.com/TheLartians/CPM.cmake#adding-cpm) to your project, implement the following snippet to your CMake:\n\n```cmake\nCPMAddPackage(\n    NAME nlohmann_json\n    GITHUB_REPOSITORY nlohmann/json\n    VERSION 3.9.1)\n```\n\n### Pkg-config\n\nIf you are using bare Makefiles, you can use `pkg-config` to generate the include flags that point to where the library is installed:\n\n```sh\npkg-config nlohmann_json --cflags\n```\n\nUsers of the Meson build system will also be able to use a system-wide library, which will be found by `pkg-config`:\n\n```meson\njson = dependency('nlohmann_json', required: true)\n```\n\n\n## License\n\n<img align=\"right\" src=\"https://149753425.v2.pressablecdn.com/wp-content/uploads/2009/06/OSIApproved_100X125.png\" alt=\"OSI approved license\">\n\nThe class is licensed under the [MIT License](https://opensource.org/licenses/MIT):\n\nCopyright &copy; 2013-2024 [Niels Lohmann](https://nlohmann.me)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n* * *\n\n- The class contains the UTF-8 Decoder from Bjoern Hoehrmann which is licensed under the [MIT License](https://opensource.org/licenses/MIT) (see above). Copyright &copy; 2008-2009 [Björn Hoehrmann](https://bjoern.hoehrmann.de/) <bjoern@hoehrmann.de>\n- The class contains a slightly modified version of the Grisu2 algorithm from Florian Loitsch which is licensed under the [MIT License](https://opensource.org/licenses/MIT) (see above). Copyright &copy; 2009 [Florian Loitsch](https://florian.loitsch.com/)\n- The class contains a copy of [Hedley](https://nemequ.github.io/hedley/) from Evan Nemerson which is licensed as [CC0-1.0](https://creativecommons.org/publicdomain/zero/1.0/).\n- The class contains parts of [Google Abseil](https://github.com/abseil/abseil-cpp) which is licensed under the [Apache 2.0 License](https://opensource.org/licenses/Apache-2.0).\n\n<img align=\"right\" src=\"https://git.fsfe.org/reuse/reuse-ci/raw/branch/master/reuse-horizontal.png\" alt=\"REUSE Software\">\n\nThe library is compliant to version 3.3 of the [**REUSE specification**](https://reuse.software):\n\n- Every source file contains an SPDX copyright header.\n- The full text of all licenses used in the repository can be found in the `LICENSES` folder.\n- File `.reuse/dep5` contains an overview of all files' copyrights and licenses.\n- Run `pipx run reuse lint` to verify the project's REUSE compliance and `pipx run reuse spdx` to generate a SPDX SBOM.\n\n## Contact\n\nIf you have questions regarding the library, I would like to invite you to [open an issue at GitHub](https://github.com/nlohmann/json/issues/new/choose). Please describe your request, problem, or question as detailed as possible, and also mention the version of the library you are using as well as the version of your compiler and operating system. Opening an issue at GitHub allows other users and contributors to this library to collaborate. For instance, I have little experience with MSVC, and most issues in this regard have been solved by a growing community. If you have a look at the [closed issues](https://github.com/nlohmann/json/issues?q=is%3Aissue+is%3Aclosed), you will see that we react quite timely in most cases.\n\nOnly if your request would contain confidential information, please [send me an email](mailto:mail@nlohmann.me). For encrypted messages, please use [this key](https://keybase.io/nlohmann/pgp_keys.asc).\n\n## Security\n\n[Commits by Niels Lohmann](https://github.com/nlohmann/json/commits) and [releases](https://github.com/nlohmann/json/releases) are signed with this [PGP Key](https://keybase.io/nlohmann/pgp_keys.asc?fingerprint=797167ae41c0a6d9232e48457f3cea63ae251b69).\n\n## Thanks\n\nI deeply appreciate the help of the following people.\n\n<img src=\"https://raw.githubusercontent.com/nlohmann/json/develop/docs/avatars.png\" align=\"right\">\n\n1. [Teemperor](https://github.com/Teemperor) implemented CMake support and lcov integration, realized escape and Unicode handling in the string parser, and fixed the JSON serialization.\n2. [elliotgoodrich](https://github.com/elliotgoodrich) fixed an issue with double deletion in the iterator classes.\n3. [kirkshoop](https://github.com/kirkshoop) made the iterators of the class composable to other libraries.\n4. [wancw](https://github.com/wanwc) fixed a bug that hindered the class to compile with Clang.\n5. Tomas Åblad found a bug in the iterator implementation.\n6. [Joshua C. Randall](https://github.com/jrandall) fixed a bug in the floating-point serialization.\n7. [Aaron Burghardt](https://github.com/aburgh) implemented code to parse streams incrementally. Furthermore, he greatly improved the parser class by allowing the definition of a filter function to discard undesired elements while parsing.\n8. [Daniel Kopeček](https://github.com/dkopecek) fixed a bug in the compilation with GCC 5.0.\n9. [Florian Weber](https://github.com/Florianjw) fixed a bug in and improved the performance of the comparison operators.\n10. [Eric Cornelius](https://github.com/EricMCornelius) pointed out a bug in the handling with NaN and infinity values. He also improved the performance of the string escaping.\n11. [易思龙](https://github.com/likebeta) implemented a conversion from anonymous enums.\n12. [kepkin](https://github.com/kepkin) patiently pushed forward the support for Microsoft Visual studio.\n13. [gregmarr](https://github.com/gregmarr) simplified the implementation of reverse iterators and helped with numerous hints and improvements. In particular, he pushed forward the implementation of user-defined types.\n14. [Caio Luppi](https://github.com/caiovlp) fixed a bug in the Unicode handling.\n15. [dariomt](https://github.com/dariomt) fixed some typos in the examples.\n16. [Daniel Frey](https://github.com/d-frey) cleaned up some pointers and implemented exception-safe memory allocation.\n17. [Colin Hirsch](https://github.com/ColinH) took care of a small namespace issue.\n18. [Huu Nguyen](https://github.com/whoshuu) correct a variable name in the documentation.\n19. [Silverweed](https://github.com/silverweed) overloaded `parse()` to accept an rvalue reference.\n20. [dariomt](https://github.com/dariomt) fixed a subtlety in MSVC type support and implemented the `get_ref()` function to get a reference to stored values.\n21. [ZahlGraf](https://github.com/ZahlGraf) added a workaround that allows compilation using Android NDK.\n22. [whackashoe](https://github.com/whackashoe) replaced a function that was marked as unsafe by Visual Studio.\n23. [406345](https://github.com/406345) fixed two small warnings.\n24. [Glen Fernandes](https://github.com/glenfe) noted a potential portability problem in the `has_mapped_type` function.\n25. [Corbin Hughes](https://github.com/nibroc) fixed some typos in the contribution guidelines.\n26. [twelsby](https://github.com/twelsby) fixed the array subscript operator, an issue that failed the MSVC build, and floating-point parsing/dumping. He further added support for unsigned integer numbers and implemented better roundtrip support for parsed numbers.\n27. [Volker Diels-Grabsch](https://github.com/vog) fixed a link in the README file.\n28. [msm-](https://github.com/msm-) added support for American Fuzzy Lop.\n29. [Annihil](https://github.com/Annihil) fixed an example in the README file.\n30. [Themercee](https://github.com/Themercee) noted a wrong URL in the README file.\n31. [Lv Zheng](https://github.com/lv-zheng) fixed a namespace issue with `int64_t` and `uint64_t`.\n32. [abc100m](https://github.com/abc100m) analyzed the issues with GCC 4.8 and proposed a [partial solution](https://github.com/nlohmann/json/pull/212).\n33. [zewt](https://github.com/zewt) added useful notes to the README file about Android.\n34. [Róbert Márki](https://github.com/robertmrk) added a fix to use move iterators and improved the integration via CMake.\n35. [Chris Kitching](https://github.com/ChrisKitching) cleaned up the CMake files.\n36. [Tom Needham](https://github.com/06needhamt) fixed a subtle bug with MSVC 2015 which was also proposed by [Michael K.](https://github.com/Epidal).\n37. [Mário Feroldi](https://github.com/thelostt) fixed a small typo.\n38. [duncanwerner](https://github.com/duncanwerner) found a really embarrassing performance regression in the 2.0.0 release.\n39. [Damien](https://github.com/dtoma) fixed one of the last conversion warnings.\n40. [Thomas Braun](https://github.com/t-b) fixed a warning in a test case and adjusted MSVC calls in the CI.\n41. [Théo DELRIEU](https://github.com/theodelrieu) patiently and constructively oversaw the long way toward [iterator-range parsing](https://github.com/nlohmann/json/issues/290). He also implemented the magic behind the serialization/deserialization of user-defined types and split the single header file into smaller chunks.\n42. [Stefan](https://github.com/5tefan) fixed a minor issue in the documentation.\n43. [Vasil Dimov](https://github.com/vasild) fixed the documentation regarding conversions from `std::multiset`.\n44. [ChristophJud](https://github.com/ChristophJud) overworked the CMake files to ease project inclusion.\n45. [Vladimir Petrigo](https://github.com/vpetrigo) made a SFINAE hack more readable and added Visual Studio 17 to the build matrix.\n46. [Denis Andrejew](https://github.com/seeekr) fixed a grammar issue in the README file.\n47. [Pierre-Antoine Lacaze](https://github.com/palacaze) found a subtle bug in the `dump()` function.\n48. [TurpentineDistillery](https://github.com/TurpentineDistillery) pointed to [`std::locale::classic()`](https://en.cppreference.com/w/cpp/locale/locale/classic) to avoid too much locale joggling, found some nice performance improvements in the parser, improved the benchmarking code, and realized locale-independent number parsing and printing.\n49. [cgzones](https://github.com/cgzones) had an idea how to fix the Coverity scan.\n50. [Jared Grubb](https://github.com/jaredgrubb) silenced a nasty documentation warning.\n51. [Yixin Zhang](https://github.com/qwename) fixed an integer overflow check.\n52. [Bosswestfalen](https://github.com/Bosswestfalen) merged two iterator classes into a smaller one.\n53. [Daniel599](https://github.com/Daniel599) helped to get Travis execute the tests with Clang's sanitizers.\n54. [Jonathan Lee](https://github.com/vjon) fixed an example in the README file.\n55. [gnzlbg](https://github.com/gnzlbg) supported the implementation of user-defined types.\n56. [Alexej Harm](https://github.com/qis) helped to get the user-defined types working with Visual Studio.\n57. [Jared Grubb](https://github.com/jaredgrubb) supported the implementation of user-defined types.\n58. [EnricoBilla](https://github.com/EnricoBilla) noted a typo in an example.\n59. [Martin Hořeňovský](https://github.com/horenmar) found a way for a 2x speedup for the compilation time of the test suite.\n60. [ukhegg](https://github.com/ukhegg) found proposed an improvement for the examples section.\n61. [rswanson-ihi](https://github.com/rswanson-ihi) noted a typo in the README.\n62. [Mihai Stan](https://github.com/stanmihai4) fixed a bug in the comparison with `nullptr`s.\n63. [Tushar Maheshwari](https://github.com/tusharpm) added [cotire](https://github.com/sakra/cotire) support to speed up the compilation.\n64. [TedLyngmo](https://github.com/TedLyngmo) noted a typo in the README, removed unnecessary bit arithmetic, and fixed some `-Weffc++` warnings.\n65. [Krzysztof Woś](https://github.com/krzysztofwos) made exceptions more visible.\n66. [ftillier](https://github.com/ftillier) fixed a compiler warning.\n67. [tinloaf](https://github.com/tinloaf) made sure all pushed warnings are properly popped.\n68. [Fytch](https://github.com/Fytch) found a bug in the documentation.\n69. [Jay Sistar](https://github.com/Type1J) implemented a Meson build description.\n70. [Henry Lee](https://github.com/HenryRLee) fixed a warning in ICC and improved the iterator implementation.\n71. [Vincent Thiery](https://github.com/vthiery) maintains a package for the Conan package manager.\n72. [Steffen](https://github.com/koemeet) fixed a potential issue with MSVC and `std::min`.\n73. [Mike Tzou](https://github.com/Chocobo1) fixed some typos.\n74. [amrcode](https://github.com/amrcode) noted a misleading documentation about comparison of floats.\n75. [Oleg Endo](https://github.com/olegendo) reduced the memory consumption by replacing `<iostream>` with `<iosfwd>`.\n76. [dan-42](https://github.com/dan-42) cleaned up the CMake files to simplify including/reusing of the library.\n77. [Nikita Ofitserov](https://github.com/himikof) allowed for moving values from initializer lists.\n78. [Greg Hurrell](https://github.com/wincent) fixed a typo.\n79. [Dmitry Kukovinets](https://github.com/DmitryKuk) fixed a typo.\n80. [kbthomp1](https://github.com/kbthomp1) fixed an issue related to the Intel OSX compiler.\n81. [Markus Werle](https://github.com/daixtrose) fixed a typo.\n82. [WebProdPP](https://github.com/WebProdPP) fixed a subtle error in a precondition check.\n83. [Alex](https://github.com/leha-bot) noted an error in a code sample.\n84. [Tom de Geus](https://github.com/tdegeus) reported some warnings with ICC and helped to fix them.\n85. [Perry Kundert](https://github.com/pjkundert) simplified reading from input streams.\n86. [Sonu Lohani](https://github.com/sonulohani) fixed a small compilation error.\n87. [Jamie Seward](https://github.com/jseward) fixed all MSVC warnings.\n88. [Nate Vargas](https://github.com/eld00d) added a Doxygen tag file.\n89. [pvleuven](https://github.com/pvleuven) helped to fix a warning in ICC.\n90. [Pavel](https://github.com/crea7or) helped to fix some warnings in MSVC.\n91. [Jamie Seward](https://github.com/jseward) avoided unnecessary string copies in `find()` and `count()`.\n92. [Mitja](https://github.com/Itja) fixed some typos.\n93. [Jorrit Wronski](https://github.com/jowr) updated the Hunter package links.\n94. [Matthias Möller](https://github.com/TinyTinni) added a `.natvis` for the MSVC debug view.\n95. [bogemic](https://github.com/bogemic) fixed some C++17 deprecation warnings.\n96. [Eren Okka](https://github.com/erengy) fixed some MSVC warnings.\n97. [abolz](https://github.com/abolz) integrated the Grisu2 algorithm for proper floating-point formatting, allowing more roundtrip checks to succeed.\n98. [Vadim Evard](https://github.com/Pipeliner) fixed a Markdown issue in the README.\n99. [zerodefect](https://github.com/zerodefect) fixed a compiler warning.\n100. [Kert](https://github.com/kaidokert) allowed to template the string type in the serialization and added the possibility to override the exceptional behavior.\n101. [mark-99](https://github.com/mark-99) helped fixing an ICC error.\n102. [Patrik Huber](https://github.com/patrikhuber) fixed links in the README file.\n103. [johnfb](https://github.com/johnfb) found a bug in the implementation of CBOR's indefinite length strings.\n104. [Paul Fultz II](https://github.com/pfultz2) added a note on the cget package manager.\n105. [Wilson Lin](https://github.com/wla80) made the integration section of the README more concise.\n106. [RalfBielig](https://github.com/ralfbielig) detected and fixed a memory leak in the parser callback.\n107. [agrianius](https://github.com/agrianius) allowed to dump JSON to an alternative string type.\n108. [Kevin Tonon](https://github.com/ktonon) overworked the C++11 compiler checks in CMake.\n109. [Axel Huebl](https://github.com/ax3l) simplified a CMake check and added support for the [Spack package manager](https://spack.io).\n110. [Carlos O'Ryan](https://github.com/coryan) fixed a typo.\n111. [James Upjohn](https://github.com/jammehcow) fixed a version number in the compilers section.\n112. [Chuck Atkins](https://github.com/chuckatkins) adjusted the CMake files to the CMake packaging guidelines and provided documentation for the CMake integration.\n113. [Jan Schöppach](https://github.com/dns13) fixed a typo.\n114. [martin-mfg](https://github.com/martin-mfg) fixed a typo.\n115. [Matthias Möller](https://github.com/TinyTinni) removed the dependency from `std::stringstream`.\n116. [agrianius](https://github.com/agrianius) added code to use alternative string implementations.\n117. [Daniel599](https://github.com/Daniel599) allowed to use more algorithms with the `items()` function.\n118. [Julius Rakow](https://github.com/jrakow) fixed the Meson include directory and fixed the links to [cppreference.com](cppreference.com).\n119. [Sonu Lohani](https://github.com/sonulohani) fixed the compilation with MSVC 2015 in debug mode.\n120. [grembo](https://github.com/grembo) fixed the test suite and re-enabled several test cases.\n121. [Hyeon Kim](https://github.com/simnalamburt) introduced the macro `JSON_INTERNAL_CATCH` to control the exception handling inside the library.\n122. [thyu](https://github.com/thyu) fixed a compiler warning.\n123. [David Guthrie](https://github.com/LEgregius) fixed a subtle compilation error with Clang 3.4.2.\n124. [Dennis Fischer](https://github.com/dennisfischer) allowed to call `find_package` without installing the library.\n125. [Hyeon Kim](https://github.com/simnalamburt) fixed an issue with a double macro definition.\n126. [Ben Berman](https://github.com/rivertam) made some error messages more understandable.\n127. [zakalibit](https://github.com/zakalibit) fixed a compilation problem with the Intel C++ compiler.\n128. [mandreyel](https://github.com/mandreyel) fixed a compilation problem.\n129. [Kostiantyn Ponomarenko](https://github.com/koponomarenko) added version and license information to the Meson build file.\n130. [Henry Schreiner](https://github.com/henryiii) added support for GCC 4.8.\n131. [knilch](https://github.com/knilch0r) made sure the test suite does not stall when run in the wrong directory.\n132. [Antonio Borondo](https://github.com/antonioborondo) fixed an MSVC 2017 warning.\n133. [Dan Gendreau](https://github.com/dgendreau) implemented the `NLOHMANN_JSON_SERIALIZE_ENUM` macro to quickly define an enum/JSON mapping.\n134. [efp](https://github.com/efp) added line and column information to parse errors.\n135. [julian-becker](https://github.com/julian-becker) added BSON support.\n136. [Pratik Chowdhury](https://github.com/pratikpc) added support for structured bindings.\n137. [David Avedissian](https://github.com/davedissian) added support for Clang 5.0.1 (PS4 version).\n138. [Jonathan Dumaresq](https://github.com/dumarjo) implemented an input adapter to read from `FILE*`.\n139. [kjpus](https://github.com/kjpus) fixed a link in the documentation.\n140. [Manvendra Singh](https://github.com/manu-chroma) fixed a typo in the documentation.\n141. [ziggurat29](https://github.com/ziggurat29) fixed an MSVC warning.\n142. [Sylvain Corlay](https://github.com/SylvainCorlay) added code to avoid an issue with MSVC.\n143. [mefyl](https://github.com/mefyl) fixed a bug when JSON was parsed from an input stream.\n144. [Millian Poquet](https://github.com/mpoquet) allowed to install the library via Meson.\n145. [Michael Behrns-Miller](https://github.com/moodboom) found an issue with a missing namespace.\n146. [Nasztanovics Ferenc](https://github.com/naszta) fixed a compilation issue with libc 2.12.\n147. [Andreas Schwab](https://github.com/andreas-schwab) fixed the endian conversion.\n148. [Mark-Dunning](https://github.com/Mark-Dunning) fixed a warning in MSVC.\n149. [Gareth Sylvester-Bradley](https://github.com/garethsb-sony) added `operator/` for JSON Pointers.\n150. [John-Mark](https://github.com/johnmarkwayve) noted a missing header.\n151. [Vitaly Zaitsev](https://github.com/xvitaly) fixed compilation with GCC 9.0.\n152. [Laurent Stacul](https://github.com/stac47) fixed compilation with GCC 9.0.\n153. [Ivor Wanders](https://github.com/iwanders) helped to reduce the CMake requirement to version 3.1.\n154. [njlr](https://github.com/njlr) updated the Buckaroo instructions.\n155. [Lion](https://github.com/lieff) fixed a compilation issue with GCC 7 on CentOS.\n156. [Isaac Nickaein](https://github.com/nickaein) improved the integer serialization performance and  implemented the `contains()` function.\n157. [past-due](https://github.com/past-due) suppressed an unfixable warning.\n158. [Elvis Oric](https://github.com/elvisoric) improved Meson support.\n159. [Matěj Plch](https://github.com/Afforix) fixed an example in the README.\n160. [Mark Beckwith](https://github.com/wythe) fixed a typo.\n161. [scinart](https://github.com/scinart) fixed bug in the serializer.\n162. [Patrick Boettcher](https://github.com/pboettch) implemented `push_back()` and `pop_back()` for JSON Pointers.\n163. [Bruno Oliveira](https://github.com/nicoddemus) added support for Conda.\n164. [Michele Caini](https://github.com/skypjack) fixed links in the README.\n165. [Hani](https://github.com/hnkb) documented how to install the library with NuGet.\n166. [Mark Beckwith](https://github.com/wythe) fixed a typo.\n167. [yann-morin-1998](https://github.com/yann-morin-1998) helped to reduce the CMake requirement to version 3.1.\n168. [Konstantin Podsvirov](https://github.com/podsvirov) maintains a package for the MSYS2 software distro.\n169. [remyabel](https://github.com/remyabel) added GNUInstallDirs to the CMake files.\n170. [Taylor Howard](https://github.com/taylorhoward92) fixed a unit test.\n171. [Gabe Ron](https://github.com/Macr0Nerd) implemented the `to_string` method.\n172. [Watal M. Iwasaki](https://github.com/heavywatal) fixed a Clang warning.\n173. [Viktor Kirilov](https://github.com/onqtam) switched the unit tests from [Catch](https://github.com/philsquared/Catch) to [doctest](https://github.com/onqtam/doctest)\n174. [Juncheng E](https://github.com/ejcjason) fixed a typo.\n175. [tete17](https://github.com/tete17) fixed a bug in the `contains` function.\n176. [Xav83](https://github.com/Xav83) fixed some cppcheck warnings.\n177. [0xflotus](https://github.com/0xflotus) fixed some typos.\n178. [Christian Deneke](https://github.com/chris0x44) added a const version of `json_pointer::back`.\n179. [Julien Hamaide](https://github.com/crazyjul) made the `items()` function work with custom string types.\n180. [Evan Nemerson](https://github.com/nemequ) updated fixed a bug in Hedley and updated this library accordingly.\n181. [Florian Pigorsch](https://github.com/flopp) fixed a lot of typos.\n182. [Camille Bégué](https://github.com/cbegue) fixed an issue in the conversion from  `std::pair` and `std::tuple` to `json`.\n183. [Anthony VH](https://github.com/AnthonyVH) fixed a compile error in an enum deserialization.\n184. [Yuriy Vountesmery](https://github.com/ua-code-dragon) noted a subtle bug in a preprocessor check.\n185. [Chen](https://github.com/dota17) fixed numerous issues in the library.\n186. [Antony Kellermann](https://github.com/aokellermann) added a CI step for GCC 10.1.\n187. [Alex](https://github.com/gistrec) fixed an MSVC warning.\n188. [Rainer](https://github.com/rvjr) proposed an improvement in the floating-point serialization in CBOR.\n189. [Francois Chabot](https://github.com/FrancoisChabot) made performance improvements in the input adapters.\n190. [Arthur Sonzogni](https://github.com/ArthurSonzogni) documented how the library can be included via `FetchContent`.\n191. [Rimas Misevičius](https://github.com/rmisev) fixed an error message.\n192. [Alexander Myasnikov](https://github.com/alexandermyasnikov) fixed some examples and a link in the README.\n193. [Hubert Chathi](https://github.com/uhoreg) made CMake's version config file architecture-independent.\n194. [OmnipotentEntity](https://github.com/OmnipotentEntity) implemented the binary values for CBOR, MessagePack, BSON, and UBJSON.\n195. [ArtemSarmini](https://github.com/ArtemSarmini) fixed a compilation issue with GCC 10 and fixed a leak.\n196. [Evgenii Sopov](https://github.com/sea-kg) integrated the library to the wsjcpp package manager.\n197. [Sergey Linev](https://github.com/linev) fixed a compiler warning.\n198. [Miguel Magalhães](https://github.com/magamig) fixed the year in the copyright.\n199. [Gareth Sylvester-Bradley](https://github.com/garethsb-sony) fixed a compilation issue with MSVC.\n200. [Alexander “weej” Jones](https://github.com/alex-weej) fixed an example in the README.\n201. [Antoine Cœur](https://github.com/Coeur) fixed some typos in the documentation.\n202. [jothepro](https://github.com/jothepro) updated links to the Hunter package.\n203. [Dave Lee](https://github.com/kastiglione) fixed link in the README.\n204. [Joël Lamotte](https://github.com/Klaim) added instruction for using Build2's package manager.\n205. [Paul Jurczak](https://github.com/pauljurczak) fixed an example in the README.\n206. [Sonu Lohani](https://github.com/sonulohani) fixed a warning.\n207. [Carlos Gomes Martinho](https://github.com/gocarlos) updated the Conan package source.\n208. [Konstantin Podsvirov](https://github.com/podsvirov) fixed the MSYS2 package documentation.\n209. [Tridacnid](https://github.com/Tridacnid) improved the CMake tests.\n210. [Michael](https://github.com/MBalszun) fixed MSVC warnings.\n211. [Quentin Barbarat](https://github.com/quentin-dev) fixed an example in the documentation.\n212. [XyFreak](https://github.com/XyFreak) fixed a compiler warning.\n213. [TotalCaesar659](https://github.com/TotalCaesar659) fixed links in the README.\n214. [Tanuj Garg](https://github.com/tanuj208) improved the fuzzer coverage for UBSAN input.\n215. [AODQ](https://github.com/AODQ) fixed a compiler warning.\n216. [jwittbrodt](https://github.com/jwittbrodt) made `NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE` inline.\n217. [pfeatherstone](https://github.com/pfeatherstone) improved the upper bound of arguments of the `NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE`/`NLOHMANN_DEFINE_TYPE_INTRUSIVE` macros.\n218. [Jan Procházka](https://github.com/jprochazk) fixed a bug in the CBOR parser for binary and string values.\n219. [T0b1-iOS](https://github.com/T0b1-iOS) fixed a bug in the new hash implementation.\n220. [Matthew Bauer](https://github.com/matthewbauer) adjusted the CBOR writer to create tags for binary subtypes.\n221. [gatopeich](https://github.com/gatopeich) implemented an ordered map container for `nlohmann::ordered_json`.\n222. [Érico Nogueira Rolim](https://github.com/ericonr) added support for pkg-config.\n223. [KonanM](https://github.com/KonanM) proposed an implementation for the `NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE`/`NLOHMANN_DEFINE_TYPE_INTRUSIVE` macros.\n224. [Guillaume Racicot](https://github.com/gracicot) implemented `string_view` support and allowed C++20 support.\n225. [Alex Reinking](https://github.com/alexreinking) improved CMake support for `FetchContent`.\n226. [Hannes Domani](https://github.com/ssbssa) provided a GDB pretty printer.\n227. Lars Wirzenius reviewed the README file.\n228. [Jun Jie](https://github.com/ongjunjie) fixed a compiler path in the CMake scripts.\n229. [Ronak Buch](https://github.com/rbuch) fixed typos in the documentation.\n230. [Alexander Karzhenkov](https://github.com/karzhenkov) fixed a move constructor and the Travis builds.\n231. [Leonardo Lima](https://github.com/leozz37) added CPM.Cmake support.\n232. [Joseph Blackman](https://github.com/jbzdarkid) fixed a warning.\n233. [Yaroslav](https://github.com/YarikTH) updated doctest and implemented unit tests.\n234. [Martin Stump](https://github.com/globberwops) fixed a bug in the CMake files.\n235. [Jaakko Moisio](https://github.com/jasujm) fixed a bug in the input adapters.\n236. [bl-ue](https://github.com/bl-ue) fixed some Markdown issues in the README file.\n237. [William A. Wieselquist](https://github.com/wawiesel) fixed an example from the README.\n238. [abbaswasim](https://github.com/abbaswasim) fixed an example from the README.\n239. [Remy Jette](https://github.com/remyjette) fixed a warning.\n240. [Fraser](https://github.com/frasermarlow) fixed the documentation.\n241. [Ben Beasley](https://github.com/musicinmybrain) updated doctest.\n242. [Doron Behar](https://github.com/doronbehar) fixed pkg-config.pc.\n243. [raduteo](https://github.com/raduteo) fixed a warning.\n244. [David Pfahler](https://github.com/theShmoo) added the possibility to compile the library without I/O support.\n245. [Morten Fyhn Amundsen](https://github.com/mortenfyhn) fixed a typo.\n246. [jpl-mac](https://github.com/jpl-mac) allowed to treat the library as a system header in CMake.\n247. [Jason Dsouza](https://github.com/jasmcaus) fixed the indentation of the CMake file.\n248. [offa](https://github.com/offa) added a link to Conan Center to the documentation.\n249. [TotalCaesar659](https://github.com/TotalCaesar659) updated the links in the documentation to use HTTPS.\n250. [Rafail Giavrimis](https://github.com/grafail) fixed the Google Benchmark default branch.\n251. [Louis Dionne](https://github.com/ldionne) fixed a conversion operator.\n252. [justanotheranonymoususer](https://github.com/justanotheranonymoususer) made the examples in the README more consistent.\n253. [Finkman](https://github.com/Finkman) suppressed some `-Wfloat-equal` warnings.\n254. [Ferry Huberts](https://github.com/fhuberts) fixed `-Wswitch-enum` warnings.\n255. [Arseniy Terekhin](https://github.com/senyai) made the GDB pretty-printer robust against unset variable names.\n256. [Amir Masoud Abdol](https://github.com/amirmasoudabdol) updated the Homebrew command as nlohmann/json is now in homebrew-core.\n257. [Hallot](https://github.com/Hallot) fixed some `-Wextra-semi-stmt warnings`.\n258. [Giovanni Cerretani](https://github.com/gcerretani) fixed `-Wunused` warnings on `JSON_DIAGNOSTICS`.\n259. [Bogdan Popescu](https://github.com/Kapeli) hosts the [docset](https://github.com/Kapeli/Dash-User-Contributions/tree/master/docsets/JSON_for_Modern_C%2B%2B) for offline documentation viewers.\n260. [Carl Smedstad](https://github.com/carlsmedstad) fixed an assertion error when using `JSON_DIAGNOSTICS`.\n261. [miikka75](https://github.com/miikka75) provided an important fix to compile C++17 code with Clang 9.\n262. [Maarten Becker](https://github.com/kernie) fixed a warning for shadowed variables.\n263. [Cristi Vîjdea](https://github.com/axnsan12) fixed typos in the `operator[]` documentation.\n264. [Alex Beregszaszi](https://github.com/axic) fixed spelling mistakes in comments.\n265. [Dirk Stolle](https://github.com/striezel) fixed typos in documentation.\n266. [Daniel Albuschat](https://github.com/daniel-kun) corrected the parameter name in the `parse` documentation.\n267. [Prince Mendiratta](https://github.com/Prince-Mendiratta) fixed a link to the FAQ.\n268. [Florian Albrechtskirchinger](https://github.com/falbrechtskirchinger) implemented `std::string_view` support for object keys and made dozens of other improvements.\n269. [Qianqian Fang](https://github.com/fangq) implemented the Binary JData (BJData) format.\n270. [pketelsen](https://github.com/pketelsen) added macros `NLOHMANN_DEFINE_TYPE_INTRUSIVE_WITH_DEFAULT` and `NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE_WITH_DEFAULT`.\n271. [DarkZeros](https://github.com/DarkZeros) adjusted to code to not clash with Arduino defines.\n272. [flagarde](https://github.com/flagarde) fixed the output of `meta()` for MSVC.\n273. [Giovanni Cerretani](https://github.com/gcerretani) fixed a check for `std::filesystem`.\n274. [Dimitris Apostolou](https://github.com/rex4539) fixed a typo.\n275. [Ferry Huberts](https://github.com/fhuberts) fixed a typo.\n276. [Michael Nosthoff](https://github.com/heinemml) fixed a typo.\n277. [JungHoon Lee](https://github.com/jhnlee) fixed a typo.\n278. [Faruk D.](https://github.com/fdiblen) fixed the CITATION.CFF file.\n279. [Andrea Cocito](https://github.com/puffetto) added a clarification on macro usage to the documentation.\n280. [Krzysiek Karbowiak](https://github.com/kkarbowiak) refactored the tests to use `CHECK_THROWS_WITH_AS`.\n281. [Chaoqi Zhang](https://github.com/prncoprs) fixed a typo.\n282. [ivanovmp](https://github.com/ivanovmp) fixed a whitespace error.\n283. [KsaNL](https://github.com/KsaNL) fixed a build error when including `<windows.h>`.\n284. [Andrea Pappacoda](https://github.com/Tachi107) moved `.pc` and `.cmake` files to `share` directory.\n285. [Wolf Vollprecht](https://github.com/wolfv) added the `patch_inplace` function.\n286. [Jake Zimmerman](https://github.com/jez) highlighted common usage patterns in the README file.\n287. [NN](https://github.com/NN---) added the Visual Studio output directory to `.gitignore`.\n288. [Romain Reignier](https://github.com/romainreignier) improved the performance the vector output adapter.\n289. [Mike](https://github.com/Mike-Leo-Smith) fixed the `std::iterator_traits`.\n290. [Richard Hozák](https://github.com/zxey) added macro `JSON_NO_ENUM` to disable default enum conversions.\n291. [vakokako](https://github.com/vakokako) fixed tests when compiling with C++20.\n292. [Alexander “weej” Jones](https://github.com/alexweej) fixed an example in the README.\n293. [Eli Schwartz](https://github.com/eli-schwartz) added more files to the `include.zip` archive.\n294. [Kevin Lu](https://github.com/kevinlul) fixed a compilation issue when typedefs with certain names were present.\n295. [Trevor Hickey](https://github.com/luxe) improved the description of an example.\n296. [Jef LeCompte](https://github.com/jef) updated the year in the README file.\n297. [Alexandre Hamez](https://github.com/ahamez) fixed a warning.\n298. [Maninderpal Badhan](https://github.com/mbadhan) fixed a typo.\n299. [kevin--](https://github.com/kevin--) added a note to an example in the README file.\n300. [I](https://github.com/wx257osn2) fixed a typo.\n301. [Gregorio Litenstein](https://github.com/Lord-Kamina) fixed the Clang detection.\n302. [Andreas Smas](https://github.com/andoma) added a Doozer badge.\n303. [WanCW](https://github.com/wancw) fixed the string conversion with Clang.\n304. [zhaohuaxishi](https://github.com/zhaohuaxishi) fixed a Doxygen error.\n305. [emvivre](https://github.com/emvivre) removed an invalid parameter from CMake.\n306. [Tobias Hermann](https://github.com/Dobiasd) fixed a link in the README file.\n307. [Michael](https://github.com/traits) fixed a warning.\n308. [Ryan Mulder](https://github.com/ryanjmulder) added `ensure_ascii` to the `dump` function.\n309. [Muri Nicanor](https://github.com/murinicanor) fixed the `sed` discovery in the Makefile.\n310. [David Avedissian](https://github.com/dgavedissian) implemented SFINAE-friendly `iterator_traits`.\n311. [AQNOUCH Mohammed](https://github.com/aqnouch) fixed a typo in the README.\n312. [Gareth Sylvester-Bradley](https://github.com/garethsb) added `operator/=` and `operator/` to construct JSON pointers.\n313. [Michael Macnair](https://github.com/mykter) added support for afl-fuzz testing.\n314. [Berkus Decker](https://github.com/berkus) fixed a typo in the README.\n315. [Illia Polishchuk](https://github.com/effolkronium) improved the CMake testing.\n316. [Ikko Ashimine](https://github.com/eltociear) fixed a typo.\n317. [Raphael Grimm](https://github.com/barcode) added the possibility to define a custom base class.\n318. [tocic](https://github.com/tocic) fixed typos in the documentation.\n319. [Vertexwahn](https://github.com/Vertexwahn) added Bazel build support.\n320. [Dirk Stolle](https://github.com/striezel) fixed typos in the documentation.\n321. [DavidKorczynski](https://github.com/DavidKorczynski) added a CIFuzz CI GitHub action.\n322. [Finkman](https://github.com/Finkman) fixed the debug pretty-printer.\n323. [Florian Segginger](https://github.com/floriansegginger) bumped the years in the README.\n324. [haadfida](https://github.com/haadfida) cleaned up the badges of used services.\n325. [Arsen Arsenović](https://github.com/ArsenArsen) fixed a build error.\n326. [theevilone45](https://github.com/theevilone45) fixed a typo in a CMake file.\n327. [Sergei Trofimovich](https://github.com/trofi) fixed the custom allocator support.\n328. [Joyce](https://github.com/joycebrum) fixed some security issues in the GitHub workflows.\n329. [Nicolas Jakob](https://github.com/njakob) add vcpkg version badge.\n330. [Tomerkm](https://github.com/Tomerkm) added tests.\n331. [No.](https://github.com/tusooa) fixed the use of `get<>` calls.\n332. [taro](https://github.com/tarolling) fixed a typo in the `CODEOWNERS` file.\n333. [Ikko Eltociear Ashimine](https://github.com/eltociear) fixed a typo.\n334. [Felix Yan](https://github.com/felixonmars) fixed a typo in the README.\n335. [HO-COOH](https://github.com/HO-COOH) fixed a parentheses in the documentation.\n336. [Ivor Wanders](https://github.com/iwanders) fixed the examples to catch exception by `const&`.\n337. [miny1233](https://github.com/miny1233) fixed a parentheses in the documentation.\n338. [tomalakgeretkal](https://github.com/tomalakgeretkal) fixed a compilation error.\n339. [alferov](https://github.com/ALF-ONE) fixed a compilation error.\n340. [Craig Scott](https://github.com/craigscott-crascit) fixed a deprecation warning in CMake.\n341. [Vyacheslav Zhdanovskiy](https://github.com/ZeronSix) added macros for serialization-only types.\n342. [Mathieu Westphal](https://github.com/mwestphal) fixed typos.\n343. [scribam](https://github.com/scribam) fixed the MinGW workflow.\n344. [Aleksei Sapitskii](https://github.com/aleksproger) added support for Apple's Swift Package Manager.\n345. [Benjamin Buch](https://github.com/bebuch) fixed the installation path in CMake.\n346. [Colby Haskell](https://github.com/colbychaskell) clarified the parse error message in case a file cannot be opened.\n\nThanks a lot for helping out! Please [let me know](mailto:mail@nlohmann.me) if I forgot someone.\n\n\n## Used third-party tools\n\nThe library itself consists of a single header file licensed under the MIT license. However, it is built, tested, documented, and whatnot using a lot of third-party tools and services. Thanks a lot!\n\n- [**amalgamate.py - Amalgamate C source and header files**](https://github.com/edlund/amalgamate) to create a single header file\n- [**American fuzzy lop**](https://lcamtuf.coredump.cx/afl/) for fuzz testing\n- [**AppVeyor**](https://www.appveyor.com) for [continuous integration](https://ci.appveyor.com/project/nlohmann/json) on Windows\n- [**Artistic Style**](http://astyle.sourceforge.net) for automatic source code indentation\n- [**Clang**](https://clang.llvm.org) for compilation with code sanitizers\n- [**CMake**](https://cmake.org) for build automation\n- [**Codacy**](https://www.codacy.com) for further [code analysis](https://www.codacy.com/app/nlohmann/json)\n- [**Coveralls**](https://coveralls.io) to measure [code coverage](https://coveralls.io/github/nlohmann/json)\n- [**Coverity Scan**](https://scan.coverity.com) for [static analysis](https://scan.coverity.com/projects/nlohmann-json)\n- [**cppcheck**](http://cppcheck.sourceforge.net) for static analysis\n- [**doctest**](https://github.com/onqtam/doctest) for the unit tests\n- [**git-update-ghpages**](https://github.com/rstacruz/git-update-ghpages) to upload the documentation to gh-pages\n- [**GitHub Changelog Generator**](https://github.com/skywinder/github-changelog-generator) to generate the [ChangeLog](https://github.com/nlohmann/json/blob/develop/ChangeLog.md)\n- [**Google Benchmark**](https://github.com/google/benchmark) to implement the benchmarks\n- [**Hedley**](https://nemequ.github.io/hedley/) to avoid re-inventing several compiler-agnostic feature macros\n- [**lcov**](http://ltp.sourceforge.net/coverage/lcov.php) to process coverage information and create an HTML view\n- [**libFuzzer**](https://llvm.org/docs/LibFuzzer.html) to implement fuzz testing for OSS-Fuzz\n- [**Material for MkDocs**](https://squidfunk.github.io/mkdocs-material/) for the style of the documentation site\n- [**MkDocs**](https://www.mkdocs.org) for the documentation site\n- [**OSS-Fuzz**](https://github.com/google/oss-fuzz) for continuous fuzz testing of the library ([project repository](https://github.com/google/oss-fuzz/tree/master/projects/json))\n- [**Probot**](https://probot.github.io) for automating maintainer tasks such as closing stale issues, requesting missing information, or detecting toxic comments.\n- [**Valgrind**](https://valgrind.org) to check for correct memory management\n\n\n## Projects using JSON for Modern C++\n\nThe library is currently used in Apple macOS Sierra-Monterey and iOS 10-15. I am not sure what they are using the library for, but I am happy that it runs on so many devices.\n\n\n## Notes\n\n### Character encoding\n\nThe library supports **Unicode input** as follows:\n\n- Only **UTF-8** encoded input is supported which is the default encoding for JSON according to [RFC 8259](https://tools.ietf.org/html/rfc8259.html#section-8.1).\n- `std::u16string` and `std::u32string` can be parsed, assuming UTF-16 and UTF-32 encoding, respectively. These encodings are not supported when reading from files or other input containers.\n- Other encodings such as Latin-1 or ISO 8859-1 are **not** supported and will yield parse or serialization errors.\n- [Unicode noncharacters](https://www.unicode.org/faq/private_use.html#nonchar1) will not be replaced by the library.\n- Invalid surrogates (e.g., incomplete pairs such as `\\uDEAD`) will yield parse errors.\n- The strings stored in the library are UTF-8 encoded. When using the default string type (`std::string`), note that its length/size functions return the number of stored bytes rather than the number of characters or glyphs.\n- When you store strings with different encodings in the library, calling [`dump()`](https://json.nlohmann.me/api/basic_json/dump/) may throw an exception unless `json::error_handler_t::replace` or `json::error_handler_t::ignore` are used as error handlers.\n- To store wide strings (e.g., `std::wstring`), you need to convert them to a UTF-8 encoded `std::string` before, see [an example](https://json.nlohmann.me/home/faq/#wide-string-handling).\n\n### Comments in JSON\n\nThis library does not support comments by default. It does so for three reasons:\n\n1. Comments are not part of the [JSON specification](https://tools.ietf.org/html/rfc8259). You may argue that `//` or `/* */` are allowed in JavaScript, but JSON is not JavaScript.\n2. This was not an oversight: Douglas Crockford [wrote on this](https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr) in May 2012:\n\n\t> I removed comments from JSON because I saw people were using them to hold parsing directives, a practice which would have destroyed interoperability.  I know that the lack of comments makes some people sad, but it shouldn't.\n\n\t> Suppose you are using JSON to keep configuration files, which you would like to annotate. Go ahead and insert all the comments you like. Then pipe it through JSMin before handing it to your JSON parser.\n\n3. It is dangerous for interoperability if some libraries would add comment support while others don't. Please check [The Harmful Consequences of the Robustness Principle](https://tools.ietf.org/html/draft-iab-protocol-maintenance-01) on this.\n\nHowever, you can pass set parameter `ignore_comments` to true in the `parse` function to ignore `//` or `/* */` comments. Comments will then be treated as whitespace.\n\n### Order of object keys\n\nBy default, the library does not preserve the **insertion order of object elements**. This is standards-compliant, as the [JSON standard](https://tools.ietf.org/html/rfc8259.html) defines objects as \"an unordered collection of zero or more name/value pairs\".\n\nIf you do want to preserve the insertion order, you can try the type [`nlohmann::ordered_json`](https://github.com/nlohmann/json/issues/2179). Alternatively, you can use a more sophisticated ordered map like [`tsl::ordered_map`](https://github.com/Tessil/ordered-map) ([integration](https://github.com/nlohmann/json/issues/546#issuecomment-304447518)) or [`nlohmann::fifo_map`](https://github.com/nlohmann/fifo_map) ([integration](https://github.com/nlohmann/json/issues/485#issuecomment-333652309)).\n\n### Memory Release\n\nWe checked with Valgrind and the Address Sanitizer (ASAN) that there are no memory leaks.\n\nIf you find that a parsing program with this library does not release memory, please consider the following case, and it may be unrelated to this library.\n\n**Your program is compiled with glibc.** There is a tunable threshold that glibc uses to decide whether to actually return memory to the system or whether to cache it for later reuse. If in your program you make lots of small allocations and those small allocations are not a contiguous block and are presumably below the threshold, then they will not get returned to the OS.\nHere is a related issue [#1924](https://github.com/nlohmann/json/issues/1924).\n\n### Further notes\n\n- The code contains numerous debug **assertions** which can be switched off by defining the preprocessor macro `NDEBUG`, see the [documentation of `assert`](https://en.cppreference.com/w/cpp/error/assert). In particular, note [`operator[]`](https://json.nlohmann.me/api/basic_json/operator%5B%5D/) implements **unchecked access** for const objects: If the given key is not present, the behavior is undefined (think of a dereferenced null pointer) and yields an [assertion failure](https://github.com/nlohmann/json/issues/289) if assertions are switched on. If you are not sure whether an element in an object exists, use checked access with the [`at()` function](https://json.nlohmann.me/api/basic_json/at/). Furthermore, you can define `JSON_ASSERT(x)` to replace calls to `assert(x)`.\n- As the exact number type is not defined in the [JSON specification](https://tools.ietf.org/html/rfc8259.html), this library tries to choose the best fitting C++ number type automatically. As a result, the type `double` may be used to store numbers which may yield [**floating-point exceptions**](https://github.com/nlohmann/json/issues/181) in certain rare situations if floating-point exceptions have been unmasked in the calling code. These exceptions are not caused by the library and need to be fixed in the calling code, such as by re-masking the exceptions prior to calling library functions.\n- The code can be compiled without C++ **runtime type identification** features; that is, you can use the `-fno-rtti` compiler flag.\n- **Exceptions** are used widely within the library. They can, however, be switched off with either using the compiler flag `-fno-exceptions` or by defining the symbol `JSON_NOEXCEPTION`. In this case, exceptions are replaced by `abort()` calls. You can further control this behavior by defining `JSON_THROW_USER` (overriding `throw`), `JSON_TRY_USER` (overriding `try`), and `JSON_CATCH_USER` (overriding `catch`). Note that `JSON_THROW_USER` should leave the current scope (e.g., by throwing or aborting), as continuing after it may yield undefined behavior. Note the explanatory [`what()`](https://en.cppreference.com/w/cpp/error/exception/what) string of exceptions is not available for MSVC if exceptions are disabled, see [#2824](https://github.com/nlohmann/json/discussions/2824).\n\n## Execute unit tests\n\nTo compile and run the tests, you need to execute\n\n```sh\n$ mkdir build\n$ cd build\n$ cmake .. -DJSON_BuildTests=On\n$ cmake --build .\n$ ctest --output-on-failure\n```\n\nNote that during the `ctest` stage, several JSON test files are downloaded from an [external repository](https://github.com/nlohmann/json_test_data). If policies forbid downloading artifacts during testing, you can download the files yourself and pass the directory with the test files via `-DJSON_TestDataDirectory=path` to CMake. Then, no Internet connectivity is required. See [issue #2189](https://github.com/nlohmann/json/issues/2189) for more information.\n\nIf the test suite is not found, several test suites will fail like this:\n\n```\n===============================================================================\njson/tests/src/make_test_data_available.hpp:21:\nTEST CASE:  check test suite is downloaded\n\njson/tests/src/make_test_data_available.hpp:23: FATAL ERROR: REQUIRE( utils::check_testsuite_downloaded() ) is NOT correct!\n  values: REQUIRE( false )\n  logged: Test data not found in 'json/cmake-build-debug/json_test_data'.\n          Please execute target 'download_test_data' before running this test suite.\n          See <https://github.com/nlohmann/json#execute-unit-tests> for more information.\n\n===============================================================================\n```\n\nIn case you have downloaded the library rather than checked out the code via Git, test `cmake_fetch_content_configure` will fail. Please execute `ctest -LE git_required` to skip these tests. See [issue #2189](https://github.com/nlohmann/json/issues/2189) for more information.\n\nSome tests change the installed files and hence make the whole process not reproducible. Please execute `ctest -LE not_reproducible` to skip these tests. See [issue #2324](https://github.com/nlohmann/json/issues/2324) for more information. Furthermore, assertions must be switched off to ensure reproducible builds (see [discussion 4494](https://github.com/nlohmann/json/discussions/4494)).\n\nNote you need to call `cmake -LE \"not_reproducible|git_required\"` to exclude both labels. See [issue #2596](https://github.com/nlohmann/json/issues/2596) for more information.\n\nAs Intel compilers use unsafe floating point optimization by default, the unit tests may fail. Use flag [`/fp:precise`](https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/compiler-options/compiler-option-details/floating-point-options/fp-model-fp.html) then.\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 0.61,
          "content": "project('nlohmann_json',\n    'cpp',\n    version : '3.11.3',\n    license : 'MIT',\n)\n\nnlohmann_json_dep = declare_dependency(\n    include_directories: include_directories('single_include')\n)\n\nnlohmann_json_multiple_headers = declare_dependency(\n    include_directories: include_directories('include')\n)\n\nif not meson.is_subproject()\ninstall_headers('single_include/nlohmann/json.hpp', subdir: 'nlohmann')\ninstall_headers('single_include/nlohmann/json_fwd.hpp', subdir: 'nlohmann')\n\npkgc = import('pkgconfig')\npkgc.generate(name: 'nlohmann_json',\n    version: meson.project_version(),\n    description: 'JSON for Modern C++'\n)\nendif\n"
        },
        {
          "name": "nlohmann_json.natvis",
          "type": "blob",
          "size": 20.35,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- * * * * * * * * AUTO-GENERATED FILE  * * * * * * * * -->\n<!-- Edit ./tools/generate_natvis/nlohmann_json.natvis.j2 -->\n<!-- * * * * * * * * AUTO-GENERATED FILE  * * * * * * * * -->\n\n<AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n    <!-- Namespace nlohmann -->\n    <Type Name=\"nlohmann::basic_json&lt;*&gt;\">\n        <DisplayString Condition=\"m_data.m_type == nlohmann::detail::value_t::null\">null</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::detail::value_t::object\">{*(m_data.m_value.object)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::detail::value_t::array\">{*(m_data.m_value.array)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::detail::value_t::string\">{*(m_data.m_value.string)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::detail::value_t::boolean\">{m_data.m_value.boolean}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::detail::value_t::number_integer\">{m_data.m_value.number_integer}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::detail::value_t::number_unsigned\">{m_data.m_value.number_unsigned}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::detail::value_t::number_float\">{m_data.m_value.number_float}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::detail::value_t::discarded\">discarded</DisplayString>\n        <Expand>\n            <ExpandedItem Condition=\"m_data.m_type == nlohmann::detail::value_t::object\">\n                *(m_data.m_value.object),view(simple)\n            </ExpandedItem>\n            <ExpandedItem Condition=\"m_data.m_type == nlohmann::detail::value_t::array\">\n                *(m_data.m_value.array),view(simple)\n            </ExpandedItem>\n        </Expand>\n    </Type>\n\n    <!-- Skip the pair first/second members in the treeview while traversing a map.\n         Only works in VS 2015 Update 2 and beyond using the new visualization -->\n    <Type Name=\"std::pair&lt;*, nlohmann::basic_json&lt;*&gt;&gt;\" IncludeView=\"MapHelper\">\n        <DisplayString>{second}</DisplayString>\n        <Expand>\n            <ExpandedItem>second</ExpandedItem>\n        </Expand>\n    </Type>\n\n    <!-- Namespace nlohmann::json_abi -->\n    <Type Name=\"nlohmann::json_abi::basic_json&lt;*&gt;\">\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi::detail::value_t::null\">null</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi::detail::value_t::object\">{*(m_data.m_value.object)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi::detail::value_t::array\">{*(m_data.m_value.array)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi::detail::value_t::string\">{*(m_data.m_value.string)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi::detail::value_t::boolean\">{m_data.m_value.boolean}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi::detail::value_t::number_integer\">{m_data.m_value.number_integer}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi::detail::value_t::number_unsigned\">{m_data.m_value.number_unsigned}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi::detail::value_t::number_float\">{m_data.m_value.number_float}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi::detail::value_t::discarded\">discarded</DisplayString>\n        <Expand>\n            <ExpandedItem Condition=\"m_data.m_type == nlohmann::json_abi::detail::value_t::object\">\n                *(m_data.m_value.object),view(simple)\n            </ExpandedItem>\n            <ExpandedItem Condition=\"m_data.m_type == nlohmann::json_abi::detail::value_t::array\">\n                *(m_data.m_value.array),view(simple)\n            </ExpandedItem>\n        </Expand>\n    </Type>\n\n    <!-- Skip the pair first/second members in the treeview while traversing a map.\n         Only works in VS 2015 Update 2 and beyond using the new visualization -->\n    <Type Name=\"std::pair&lt;*, nlohmann::json_abi::basic_json&lt;*&gt;&gt;\" IncludeView=\"MapHelper\">\n        <DisplayString>{second}</DisplayString>\n        <Expand>\n            <ExpandedItem>second</ExpandedItem>\n        </Expand>\n    </Type>\n\n    <!-- Namespace nlohmann::json_abi_v3_11_3 -->\n    <Type Name=\"nlohmann::json_abi_v3_11_3::basic_json&lt;*&gt;\">\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_v3_11_3::detail::value_t::null\">null</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_v3_11_3::detail::value_t::object\">{*(m_data.m_value.object)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_v3_11_3::detail::value_t::array\">{*(m_data.m_value.array)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_v3_11_3::detail::value_t::string\">{*(m_data.m_value.string)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_v3_11_3::detail::value_t::boolean\">{m_data.m_value.boolean}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_v3_11_3::detail::value_t::number_integer\">{m_data.m_value.number_integer}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_v3_11_3::detail::value_t::number_unsigned\">{m_data.m_value.number_unsigned}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_v3_11_3::detail::value_t::number_float\">{m_data.m_value.number_float}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_v3_11_3::detail::value_t::discarded\">discarded</DisplayString>\n        <Expand>\n            <ExpandedItem Condition=\"m_data.m_type == nlohmann::json_abi_v3_11_3::detail::value_t::object\">\n                *(m_data.m_value.object),view(simple)\n            </ExpandedItem>\n            <ExpandedItem Condition=\"m_data.m_type == nlohmann::json_abi_v3_11_3::detail::value_t::array\">\n                *(m_data.m_value.array),view(simple)\n            </ExpandedItem>\n        </Expand>\n    </Type>\n\n    <!-- Skip the pair first/second members in the treeview while traversing a map.\n         Only works in VS 2015 Update 2 and beyond using the new visualization -->\n    <Type Name=\"std::pair&lt;*, nlohmann::json_abi_v3_11_3::basic_json&lt;*&gt;&gt;\" IncludeView=\"MapHelper\">\n        <DisplayString>{second}</DisplayString>\n        <Expand>\n            <ExpandedItem>second</ExpandedItem>\n        </Expand>\n    </Type>\n\n    <!-- Namespace nlohmann::json_abi_diag -->\n    <Type Name=\"nlohmann::json_abi_diag::basic_json&lt;*&gt;\">\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag::detail::value_t::null\">null</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag::detail::value_t::object\">{*(m_data.m_value.object)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag::detail::value_t::array\">{*(m_data.m_value.array)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag::detail::value_t::string\">{*(m_data.m_value.string)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag::detail::value_t::boolean\">{m_data.m_value.boolean}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag::detail::value_t::number_integer\">{m_data.m_value.number_integer}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag::detail::value_t::number_unsigned\">{m_data.m_value.number_unsigned}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag::detail::value_t::number_float\">{m_data.m_value.number_float}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag::detail::value_t::discarded\">discarded</DisplayString>\n        <Expand>\n            <ExpandedItem Condition=\"m_data.m_type == nlohmann::json_abi_diag::detail::value_t::object\">\n                *(m_data.m_value.object),view(simple)\n            </ExpandedItem>\n            <ExpandedItem Condition=\"m_data.m_type == nlohmann::json_abi_diag::detail::value_t::array\">\n                *(m_data.m_value.array),view(simple)\n            </ExpandedItem>\n        </Expand>\n    </Type>\n\n    <!-- Skip the pair first/second members in the treeview while traversing a map.\n         Only works in VS 2015 Update 2 and beyond using the new visualization -->\n    <Type Name=\"std::pair&lt;*, nlohmann::json_abi_diag::basic_json&lt;*&gt;&gt;\" IncludeView=\"MapHelper\">\n        <DisplayString>{second}</DisplayString>\n        <Expand>\n            <ExpandedItem>second</ExpandedItem>\n        </Expand>\n    </Type>\n\n    <!-- Namespace nlohmann::json_abi_diag_v3_11_3 -->\n    <Type Name=\"nlohmann::json_abi_diag_v3_11_3::basic_json&lt;*&gt;\">\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_v3_11_3::detail::value_t::null\">null</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_v3_11_3::detail::value_t::object\">{*(m_data.m_value.object)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_v3_11_3::detail::value_t::array\">{*(m_data.m_value.array)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_v3_11_3::detail::value_t::string\">{*(m_data.m_value.string)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_v3_11_3::detail::value_t::boolean\">{m_data.m_value.boolean}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_v3_11_3::detail::value_t::number_integer\">{m_data.m_value.number_integer}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_v3_11_3::detail::value_t::number_unsigned\">{m_data.m_value.number_unsigned}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_v3_11_3::detail::value_t::number_float\">{m_data.m_value.number_float}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_v3_11_3::detail::value_t::discarded\">discarded</DisplayString>\n        <Expand>\n            <ExpandedItem Condition=\"m_data.m_type == nlohmann::json_abi_diag_v3_11_3::detail::value_t::object\">\n                *(m_data.m_value.object),view(simple)\n            </ExpandedItem>\n            <ExpandedItem Condition=\"m_data.m_type == nlohmann::json_abi_diag_v3_11_3::detail::value_t::array\">\n                *(m_data.m_value.array),view(simple)\n            </ExpandedItem>\n        </Expand>\n    </Type>\n\n    <!-- Skip the pair first/second members in the treeview while traversing a map.\n         Only works in VS 2015 Update 2 and beyond using the new visualization -->\n    <Type Name=\"std::pair&lt;*, nlohmann::json_abi_diag_v3_11_3::basic_json&lt;*&gt;&gt;\" IncludeView=\"MapHelper\">\n        <DisplayString>{second}</DisplayString>\n        <Expand>\n            <ExpandedItem>second</ExpandedItem>\n        </Expand>\n    </Type>\n\n    <!-- Namespace nlohmann::json_abi_ldvcmp -->\n    <Type Name=\"nlohmann::json_abi_ldvcmp::basic_json&lt;*&gt;\">\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp::detail::value_t::null\">null</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp::detail::value_t::object\">{*(m_data.m_value.object)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp::detail::value_t::array\">{*(m_data.m_value.array)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp::detail::value_t::string\">{*(m_data.m_value.string)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp::detail::value_t::boolean\">{m_data.m_value.boolean}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp::detail::value_t::number_integer\">{m_data.m_value.number_integer}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp::detail::value_t::number_unsigned\">{m_data.m_value.number_unsigned}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp::detail::value_t::number_float\">{m_data.m_value.number_float}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp::detail::value_t::discarded\">discarded</DisplayString>\n        <Expand>\n            <ExpandedItem Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp::detail::value_t::object\">\n                *(m_data.m_value.object),view(simple)\n            </ExpandedItem>\n            <ExpandedItem Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp::detail::value_t::array\">\n                *(m_data.m_value.array),view(simple)\n            </ExpandedItem>\n        </Expand>\n    </Type>\n\n    <!-- Skip the pair first/second members in the treeview while traversing a map.\n         Only works in VS 2015 Update 2 and beyond using the new visualization -->\n    <Type Name=\"std::pair&lt;*, nlohmann::json_abi_ldvcmp::basic_json&lt;*&gt;&gt;\" IncludeView=\"MapHelper\">\n        <DisplayString>{second}</DisplayString>\n        <Expand>\n            <ExpandedItem>second</ExpandedItem>\n        </Expand>\n    </Type>\n\n    <!-- Namespace nlohmann::json_abi_ldvcmp_v3_11_3 -->\n    <Type Name=\"nlohmann::json_abi_ldvcmp_v3_11_3::basic_json&lt;*&gt;\">\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp_v3_11_3::detail::value_t::null\">null</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp_v3_11_3::detail::value_t::object\">{*(m_data.m_value.object)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp_v3_11_3::detail::value_t::array\">{*(m_data.m_value.array)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp_v3_11_3::detail::value_t::string\">{*(m_data.m_value.string)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp_v3_11_3::detail::value_t::boolean\">{m_data.m_value.boolean}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp_v3_11_3::detail::value_t::number_integer\">{m_data.m_value.number_integer}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp_v3_11_3::detail::value_t::number_unsigned\">{m_data.m_value.number_unsigned}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp_v3_11_3::detail::value_t::number_float\">{m_data.m_value.number_float}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp_v3_11_3::detail::value_t::discarded\">discarded</DisplayString>\n        <Expand>\n            <ExpandedItem Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp_v3_11_3::detail::value_t::object\">\n                *(m_data.m_value.object),view(simple)\n            </ExpandedItem>\n            <ExpandedItem Condition=\"m_data.m_type == nlohmann::json_abi_ldvcmp_v3_11_3::detail::value_t::array\">\n                *(m_data.m_value.array),view(simple)\n            </ExpandedItem>\n        </Expand>\n    </Type>\n\n    <!-- Skip the pair first/second members in the treeview while traversing a map.\n         Only works in VS 2015 Update 2 and beyond using the new visualization -->\n    <Type Name=\"std::pair&lt;*, nlohmann::json_abi_ldvcmp_v3_11_3::basic_json&lt;*&gt;&gt;\" IncludeView=\"MapHelper\">\n        <DisplayString>{second}</DisplayString>\n        <Expand>\n            <ExpandedItem>second</ExpandedItem>\n        </Expand>\n    </Type>\n\n    <!-- Namespace nlohmann::json_abi_diag_ldvcmp -->\n    <Type Name=\"nlohmann::json_abi_diag_ldvcmp::basic_json&lt;*&gt;\">\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp::detail::value_t::null\">null</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp::detail::value_t::object\">{*(m_data.m_value.object)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp::detail::value_t::array\">{*(m_data.m_value.array)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp::detail::value_t::string\">{*(m_data.m_value.string)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp::detail::value_t::boolean\">{m_data.m_value.boolean}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp::detail::value_t::number_integer\">{m_data.m_value.number_integer}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp::detail::value_t::number_unsigned\">{m_data.m_value.number_unsigned}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp::detail::value_t::number_float\">{m_data.m_value.number_float}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp::detail::value_t::discarded\">discarded</DisplayString>\n        <Expand>\n            <ExpandedItem Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp::detail::value_t::object\">\n                *(m_data.m_value.object),view(simple)\n            </ExpandedItem>\n            <ExpandedItem Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp::detail::value_t::array\">\n                *(m_data.m_value.array),view(simple)\n            </ExpandedItem>\n        </Expand>\n    </Type>\n\n    <!-- Skip the pair first/second members in the treeview while traversing a map.\n         Only works in VS 2015 Update 2 and beyond using the new visualization -->\n    <Type Name=\"std::pair&lt;*, nlohmann::json_abi_diag_ldvcmp::basic_json&lt;*&gt;&gt;\" IncludeView=\"MapHelper\">\n        <DisplayString>{second}</DisplayString>\n        <Expand>\n            <ExpandedItem>second</ExpandedItem>\n        </Expand>\n    </Type>\n\n    <!-- Namespace nlohmann::json_abi_diag_ldvcmp_v3_11_3 -->\n    <Type Name=\"nlohmann::json_abi_diag_ldvcmp_v3_11_3::basic_json&lt;*&gt;\">\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp_v3_11_3::detail::value_t::null\">null</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp_v3_11_3::detail::value_t::object\">{*(m_data.m_value.object)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp_v3_11_3::detail::value_t::array\">{*(m_data.m_value.array)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp_v3_11_3::detail::value_t::string\">{*(m_data.m_value.string)}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp_v3_11_3::detail::value_t::boolean\">{m_data.m_value.boolean}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp_v3_11_3::detail::value_t::number_integer\">{m_data.m_value.number_integer}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp_v3_11_3::detail::value_t::number_unsigned\">{m_data.m_value.number_unsigned}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp_v3_11_3::detail::value_t::number_float\">{m_data.m_value.number_float}</DisplayString>\n        <DisplayString Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp_v3_11_3::detail::value_t::discarded\">discarded</DisplayString>\n        <Expand>\n            <ExpandedItem Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp_v3_11_3::detail::value_t::object\">\n                *(m_data.m_value.object),view(simple)\n            </ExpandedItem>\n            <ExpandedItem Condition=\"m_data.m_type == nlohmann::json_abi_diag_ldvcmp_v3_11_3::detail::value_t::array\">\n                *(m_data.m_value.array),view(simple)\n            </ExpandedItem>\n        </Expand>\n    </Type>\n\n    <!-- Skip the pair first/second members in the treeview while traversing a map.\n         Only works in VS 2015 Update 2 and beyond using the new visualization -->\n    <Type Name=\"std::pair&lt;*, nlohmann::json_abi_diag_ldvcmp_v3_11_3::basic_json&lt;*&gt;&gt;\" IncludeView=\"MapHelper\">\n        <DisplayString>{second}</DisplayString>\n        <Expand>\n            <ExpandedItem>second</ExpandedItem>\n        </Expand>\n    </Type>\n\n</AutoVisualizer>\n"
        },
        {
          "name": "single_include",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "wsjcpp.yml",
          "type": "blob",
          "size": 0.59,
          "content": "wsjcpp_version: \"v0.1.1\"\ncmake_minimum_required: \"3.0\"\ncmake_cxx_standard: \"11\"\nname: \"nlohmann/json\"\nversion: \"v3.11.3\"\ndescription: \"JSON for Modern C++\"\nissues: \"https://github.com/nlohmann/json/issues\"\nkeywords:\n  - \"c++\"\n  - \"json\"\n\nrepositories:\n  - type: main\n    url: \"https://github.com/nlohmann/json\"\n\nauthors:\n  - name: \"Niels Lohmann\"\n    email: \"mail@nlohmann.me\"\n\ndistribution:\n  - source-file: \"single_include/nlohmann/json.hpp\"\n    target-file: \"json.hpp\"\n    type: \"source-code\"\n  - source-file: \"single_include/nlohmann/json_fwd.hpp\"\n    target-file: \"json_fwd.hpp\"\n    type: \"source-code\"\n"
        }
      ]
    }
  ]
}