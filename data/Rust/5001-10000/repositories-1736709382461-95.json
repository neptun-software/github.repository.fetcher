{
  "metadata": {
    "timestamp": 1736709382461,
    "page": 95,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fschutt/azul",
      "stars": 5940,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2041015625,
          "content": "target/\nvendor/\n**/*.rs.bk\n*.pdf\n*.sublime-project\n.vscode/*\n.vs/*\n*.log\n.idea/*\nout.txt\n*.dll\n*.so\n*.out\n*.o\n*.exe\napi/c/main/\n.DS_Store\n.xcodeproject\nLICENSE-WINDOWS.json\nLICENSE-LINUX.json\nLICENSE-MAC.json\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 52.09375,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.24.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f5fb1d8e4442bd405fdfd1dacb42792696b0cf9cb15882e5d097b742a676d375\"\ndependencies = [\n \"gimli\",\n]\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n\n[[package]]\nname = \"adler2\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"512761e0bb2578dd7380c6baaa0f4ce03e84f95e960231d1dec8bf4d7d6e2627\"\n\n[[package]]\nname = \"aliasable\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"250f629c0161ad8107cf89319e990051fae62832fd343083bea452d93e2205fd\"\n\n[[package]]\nname = \"alloc-no-stdlib\"\nversion = \"2.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cc7bb162ec39d46ab1ca8c77bf72e890535becd1751bb45f64c597edb4c8c6b3\"\n\n[[package]]\nname = \"alloc-stdlib\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94fb8275041c72129eb51b7d0322c29b8387a0386127718b096429201a5d6ece\"\ndependencies = [\n \"alloc-no-stdlib\",\n]\n\n[[package]]\nname = \"allsorts\"\nversion = \"0.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7b566d29776fc848a8279a72339499db95ee5592926bac114d35aa9a92efe9c\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"bitreader\",\n \"brotli-decompressor\",\n \"byteorder\",\n \"crc32fast\",\n \"encoding_rs\",\n \"flate2\",\n \"glyph-names\",\n \"itertools\",\n \"lazy_static\",\n \"libc\",\n \"log\",\n \"num-traits\",\n \"ouroboros\",\n \"pathfinder_geometry\",\n \"rustc-hash\",\n \"tinyvec\",\n \"ucd-trie\",\n \"unicode-canonical-combining-class\",\n \"unicode-general-category\",\n \"unicode-joining-type\",\n]\n\n[[package]]\nname = \"app_units\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3a46058e45b48cf55b729e4ae34007fa904ea70cfcf2a0fa21dacf1441e521c\"\ndependencies = [\n \"num-traits\",\n \"serde\",\n]\n\n[[package]]\nname = \"approx\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cab112f0a86d568ea0e627cc1d6be74a1e9cd55214684db5561995f6dad897c6\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"arc-swap\"\nversion = \"1.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69f7f8c3906b62b754cd5326047894316021dcfe5a194c8ea52bdd94934a3457\"\n\n[[package]]\nname = \"arrayref\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76a2e8124351fda1ef8aaaa3bbd7ebbcb486bbcd4225aca0aa0d84bb2db8fecb\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n\n[[package]]\nname = \"atomic-polyfill\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8cf2bce30dfe09ef0bfaef228b9d414faaf7e563035494d7fe092dba54b300f4\"\ndependencies = [\n \"critical-section\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26\"\n\n[[package]]\nname = \"azul\"\nversion = \"1.0.0-beta1\"\ndependencies = [\n \"azul-dll\",\n \"serde\",\n \"serde_derive\",\n]\n\n[[package]]\nname = \"azul-core\"\nversion = \"0.0.2\"\ndependencies = [\n \"azul-css\",\n \"azul-css-parser\",\n \"gl-context-loader\",\n \"highway\",\n \"libm\",\n \"rust-fontconfig\",\n]\n\n[[package]]\nname = \"azul-css\"\nversion = \"0.0.1\"\ndependencies = [\n \"libm\",\n]\n\n[[package]]\nname = \"azul-css-parser\"\nversion = \"0.0.1\"\ndependencies = [\n \"azul-css\",\n \"azul-simplecss\",\n]\n\n[[package]]\nname = \"azul-desktop\"\nversion = \"0.0.5\"\ndependencies = [\n \"azul-core\",\n \"azul-css\",\n \"azul-css-parser\",\n \"azul-layout\",\n \"azul-text-layout\",\n \"azul-webrender\",\n \"azulc\",\n \"backtrace\",\n \"bitflags 2.6.0\",\n \"clipboard2\",\n \"core-foundation\",\n \"dispatch\",\n \"fern\",\n \"gl-context-loader\",\n \"libm\",\n \"log\",\n \"objc2\",\n \"once_cell\",\n \"raw-window-handle\",\n \"rust-fontconfig\",\n \"strfmt\",\n \"tinyfiledialogs\",\n \"winapi\",\n]\n\n[[package]]\nname = \"azul-dll\"\nversion = \"0.0.1\"\ndependencies = [\n \"azul-core\",\n \"azul-desktop\",\n \"log\",\n \"pyo3\",\n \"pyo3-log\",\n]\n\n[[package]]\nname = \"azul-examples\"\nversion = \"0.0.1\"\ndependencies = [\n \"azul\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"azul-layout\"\nversion = \"0.0.4\"\ndependencies = [\n \"azul-core\",\n \"azul-css\",\n \"azul-css-parser\",\n \"azul-text-layout\",\n \"azulc\",\n \"rayon\",\n \"rust-fontconfig\",\n]\n\n[[package]]\nname = \"azul-peek-poke\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c9ead7fd1075c08f43689ffd11c1cfd2c05ac83d634ee1aa1115bce9cc1fc5c7\"\ndependencies = [\n \"azul-peek-poke-derive\",\n \"euclid\",\n]\n\n[[package]]\nname = \"azul-peek-poke-derive\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"157ac32d148629ae2f8bee4917b32b31e0fc262fe65d534533e59fa954361178\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"azul-simplecss\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c303bfdf857413adbd19d9b15dddd9b4adb8e2be7e493c8a38d9fc6179a074ac\"\n\n[[package]]\nname = \"azul-text-layout\"\nversion = \"0.0.5\"\ndependencies = [\n \"allsorts\",\n \"azul-core\",\n \"azul-css\",\n \"rayon\",\n \"tinyvec\",\n \"ttf-parser\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"azul-webrender\"\nversion = \"0.62.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1234646f5b1dc6b2c639504aa2b367ce62fe06bac1a3629c1070c82f17e02c8a\"\ndependencies = [\n \"azul-webrender-api\",\n \"azul-webrender-build\",\n \"azul-wr_malloc_size_of\",\n \"bincode\",\n \"bitflags 1.3.2\",\n \"byteorder\",\n \"core-foundation\",\n \"core-graphics\",\n \"core-text\",\n \"cstr\",\n \"derive_more\",\n \"dwrote\",\n \"etagere\",\n \"euclid\",\n \"freetype\",\n \"fxhash\",\n \"gl-context-loader\",\n \"lazy_static\",\n \"libc\",\n \"log\",\n \"malloc_size_of_derive\",\n \"num-traits\",\n \"objc\",\n \"plane-split\",\n \"rayon\",\n \"smallvec\",\n \"svg_fmt\",\n \"time\",\n \"tracy-rs\",\n]\n\n[[package]]\nname = \"azul-webrender-api\"\nversion = \"0.62.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b39c60ce889d3c992eb8bc54a12806fc880c412dbc8f7ddc2f39e56855b0a49\"\ndependencies = [\n \"app_units\",\n \"azul-peek-poke\",\n \"azul-wr_malloc_size_of\",\n \"bitflags 1.3.2\",\n \"byteorder\",\n \"core-foundation\",\n \"core-graphics\",\n \"crossbeam-channel\",\n \"derive_more\",\n \"euclid\",\n \"malloc_size_of_derive\",\n \"serde\",\n \"serde_bytes\",\n \"serde_derive\",\n \"time\",\n]\n\n[[package]]\nname = \"azul-webrender-build\"\nversion = \"0.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97b63a4d39d3530715a27455b1b4656fc31cb7c05ee70e6a9123896e36776837\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"lazy_static\",\n]\n\n[[package]]\nname = \"azul-wr_malloc_size_of\"\nversion = \"0.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26c3ac57184341697b2712c17ddcf7d420f58bd353812f5fc268d152f83d40a8\"\ndependencies = [\n \"app_units\",\n \"euclid\",\n]\n\n[[package]]\nname = \"azulc\"\nversion = \"0.0.3\"\ndependencies = [\n \"azul-core\",\n \"azul-css\",\n \"azul-css-parser\",\n \"azul-layout\",\n \"base64 0.22.1\",\n \"geo\",\n \"geo-booleanop\",\n \"gl-context-loader\",\n \"image\",\n \"lyon\",\n \"rayon\",\n \"resvg\",\n \"roxmltree\",\n \"rust-fontconfig\",\n \"tiny-skia\",\n \"usvg\",\n \"xmlparser\",\n \"xmlwriter\",\n]\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.74\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d82cb332cdfaed17ae235a638438ac4d4839913cc2af585c3c6746e8f8bee1a\"\ndependencies = [\n \"addr2line\",\n \"cfg-if\",\n \"libc\",\n \"miniz_oxide 0.8.0\",\n \"object\",\n \"rustc-demangle\",\n \"windows-targets\",\n]\n\n[[package]]\nname = \"base64\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.22.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6\"\n\n[[package]]\nname = \"binary-space-partition\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88ceb0d16c4fd0e42876e298d7d3ce3780dd9ebdcbe4199816a32c77e08597ff\"\n\n[[package]]\nname = \"bincode\"\nversion = \"1.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de\"\n\n[[package]]\nname = \"bitreader\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bdd859c9d97f7c468252795b35aeccc412bdbb1e90ee6969c4fa6328272eaeff\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"block\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a\"\n\n[[package]]\nname = \"block-sys\"\nversion = \"0.1.0-beta.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fa55741ee90902547802152aaf3f8e5248aab7e21468089560d4c8840561146\"\ndependencies = [\n \"objc-sys\",\n]\n\n[[package]]\nname = \"block2\"\nversion = \"0.2.0-alpha.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8dd9e63c1744f755c2f60332b88de39d341e5e86239014ad839bd71c106dec42\"\ndependencies = [\n \"block-sys\",\n \"objc2-encode\",\n]\n\n[[package]]\nname = \"brotli-decompressor\"\nversion = \"2.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e2e4afe60d7dd600fdd3de8d0f08c2b7ec039712e3b6137ff98b7004e82de4f\"\ndependencies = [\n \"alloc-no-stdlib\",\n \"alloc-stdlib\",\n]\n\n[[package]]\nname = \"bytemuck\"\nversion = \"1.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94bbb0ad554ad961ddc5da507a12a29b14e4ae5bda06b19f575a3e6079d2e2ae\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"812acba72f0a070b003d3697490d2b55b837230ae7c6c6497f05cc2ddbb8d938\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"clipboard-win\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3a093d6fed558e5fe24c3dfc85a68bb68f1c824f440d3ba5aca189e2998786b\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"clipboard2\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240f0df217fb302a7d47f78a52403e2405c2b363fbdb34ac488dbc57126280e5\"\ndependencies = [\n \"clipboard-win\",\n \"objc\",\n \"objc-foundation\",\n \"objc_id\",\n \"x11-clipboard\",\n]\n\n[[package]]\nname = \"color_quant\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d7b894f5411737b7867f4827955924d7c254fc9f4d91a6aad6b097804b1018b\"\n\n[[package]]\nname = \"convert_case\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6245d59a3e82a7fc217c5828a6692dbc6dfb63a0c8c90495621f7b9d79704a0e\"\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b\"\n\n[[package]]\nname = \"core-graphics\"\nversion = \"0.22.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2581bbab3b8ffc6fcbd550bf46c355135d16e9ff2a6ea032ad6b9bf1d7efe4fb\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"core-foundation\",\n \"core-graphics-types\",\n \"foreign-types\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-graphics-types\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"45390e6114f68f718cc7a830514a96f903cccd70d02a8f6d9f643ac4ba45afaf\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"core-foundation\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-text\"\nversion = \"19.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99d74ada66e07c1cefa18f8abfba765b486f250de2e4a999e5727fc0dd4b4a25\"\ndependencies = [\n \"core-foundation\",\n \"core-graphics\",\n \"foreign-types\",\n \"libc\",\n]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"critical-section\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f64009896348fc5af4222e9cf7d7d82a95a256c634ebcf61c53e4ea461422242\"\n\n[[package]]\nname = \"crossbeam-channel\"\nversion = \"0.5.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33480d6946193aa8033910124896ca395333cae7e2d1113d1fef6c3272217df2\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"613f8cc01fe9cf1a3eb3d7f488fd2fa8388403e97039e2f73692932e291a770d\"\ndependencies = [\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22ec99545bb0ed0ea7bb9b8e1e9122ea386ff8a48c0922e43f36d45ab09e0e80\"\n\n[[package]]\nname = \"cstr\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68523903c8ae5aacfa32a0d9ae60cadeb764e1da14ee0d26b1f3089f13a54636\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n]\n\n[[package]]\nname = \"ctor\"\nversion = \"0.1.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d2301688392eb071b0bf1a37be05c469d3cc4dbbd95df672fe28ab021e6a096\"\ndependencies = [\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"data-url\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a30bfce702bcfa94e906ef82421f2c0e61c076ad76030c16ee5d2e9a32fe193\"\ndependencies = [\n \"matches\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f33878137e4dafd7fa914ad4e259e18a4e8e532b9617a2d0150262bf53abfce\"\ndependencies = [\n \"convert_case\",\n \"proc-macro2\",\n \"quote\",\n \"rustc_version\",\n \"syn 2.0.79\",\n]\n\n[[package]]\nname = \"dispatch\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd0c93bb4b0c6d9b77f4435b0ae98c24d17f1c45b2ff844c6151a07256ca923b\"\n\n[[package]]\nname = \"dwrote\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2da3498378ed373237bdef1eddcc64e7be2d3ba4841f4c22a998e81cadeea83c\"\ndependencies = [\n \"lazy_static\",\n \"libc\",\n \"serde\",\n \"serde_derive\",\n \"winapi\",\n \"wio\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"encoding_rs\"\nversion = \"0.8.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b45de904aa0b010bce2ab45264d0631681847fa7b6f2eaa7dab7619943bc4f59\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"etagere\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e2f1e3be19fb10f549be8c1bf013e8675b4066c445e36eb76d2ebb2f54ee495\"\ndependencies = [\n \"euclid\",\n \"svg_fmt\",\n]\n\n[[package]]\nname = \"euclid\"\nversion = \"0.22.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ad9cdb4b747e485a12abb0e6566612956c7a1bafa3bdb8d682c5b6d403589e48\"\ndependencies = [\n \"num-traits\",\n \"serde\",\n]\n\n[[package]]\nname = \"fdeflate\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8090f921a24b04994d9929e204f50b498a33ea6ba559ffaa05e04f7ee7fb5ab\"\ndependencies = [\n \"simd-adler32\",\n]\n\n[[package]]\nname = \"fern\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9f0c14694cbd524c8720dd69b0e3179344f04ebb5f90f2e4a440c6ea3b2f1ee\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"flate2\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b39522e96686d38f4bc984b9198e3a0613264abaebaff2c5c918bfa6b6da09af\"\ndependencies = [\n \"cfg-if\",\n \"crc32fast\",\n \"libc\",\n \"miniz_oxide 0.5.4\",\n]\n\n[[package]]\nname = \"float-cmp\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"98de4bbd547a563b716d8dfa9aad1cb19bfab00f4fa09a6a4ed21dbcf44ce9c4\"\n\n[[package]]\nname = \"float_next_after\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fc612c5837986b7104a87a0df74a5460931f1c5274be12f8d0f40aa2f30d632\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"float_next_after\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8bf7cc16383c4b8d58b9905a8509f02926ce3058053c056376248d958c9df1e8\"\n\n[[package]]\nname = \"foreign-types\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\ndependencies = [\n \"foreign-types-shared\",\n]\n\n[[package]]\nname = \"foreign-types-shared\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n\n[[package]]\nname = \"freetype\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a440748e063798e4893ceb877151e84acef9bea9a8c6800645cf3f1b3a7806e\"\ndependencies = [\n \"freetype-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"freetype-sys\"\nversion = \"0.20.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e7edc5b9669349acfda99533e9e0bcf26a51862ab43b08ee7745c55d28eb134\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"fxhash\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c\"\ndependencies = [\n \"byteorder\",\n]\n\n[[package]]\nname = \"geo\"\nversion = \"0.26.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1645cf1d7fea7dac1a66f7357f3df2677ada708b8d9db8e9b043878930095a96\"\ndependencies = [\n \"float_next_after 1.0.0\",\n \"geo-types 0.7.13\",\n \"geographiclib-rs\",\n \"log\",\n \"num-traits\",\n \"robust 1.1.0\",\n \"rstar\",\n]\n\n[[package]]\nname = \"geo-booleanop\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97a7c2c6db82fd6f0629fac66df1ec88cb84a539e3984f6ce6d373ba542ec03a\"\ndependencies = [\n \"float_next_after 0.1.5\",\n \"geo-types 0.4.3\",\n \"num-traits\",\n \"robust 0.1.2\",\n]\n\n[[package]]\nname = \"geo-types\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"866e8f6dbd2218b05ea8a25daa1bfac32b0515fe7e0a37cb6a7b9ed0ed82a07e\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"geo-types\"\nversion = \"0.7.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ff16065e5720f376fbced200a5ae0f47ace85fd70b7e54269790281353b6d61\"\ndependencies = [\n \"approx\",\n \"num-traits\",\n \"rstar\",\n \"serde\",\n]\n\n[[package]]\nname = \"geographiclib-rs\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6e5ed84f8089c70234b0a8e0aedb6dc733671612ddc0d37c6066052f9781960\"\ndependencies = [\n \"libm\",\n]\n\n[[package]]\nname = \"ghost\"\nversion = \"0.1.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0e085ded9f1267c32176b40921b9754c474f7dd96f7e808d4a982e48aa1e854\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.79\",\n]\n\n[[package]]\nname = \"gif\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3edd93c6756b4dfaf2709eafcc345ba2636565295c198a9cfbf75fa5e3e00b06\"\ndependencies = [\n \"color_quant\",\n \"weezl\",\n]\n\n[[package]]\nname = \"gif\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fb2d69b19215e18bb912fa30f7ce15846e301408695e44e0ef719f1da9e19f2\"\ndependencies = [\n \"color_quant\",\n \"weezl\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.31.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32085ea23f3234fc7846555e85283ba4de91e21016dc0455a16286d87a292d64\"\n\n[[package]]\nname = \"gl-context-loader\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"41e665af714f24e0a0500e5592791bac06bfcb791b9a766f37fb0cb9bb149ef7\"\n\n[[package]]\nname = \"glyph-names\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3531d702d6c1a3ba92a5fb55a404c7b8c476c8e7ca249951077afcbe4bc807f\"\n\n[[package]]\nname = \"hash32\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0c35f58762feb77d74ebe43bdbc3210f09be9fe6742234d573bacc26ed92b67\"\ndependencies = [\n \"byteorder\",\n]\n\n[[package]]\nname = \"heapless\"\nversion = \"0.7.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cdc6457c0eb62c71aac4bc17216026d8410337c4126773b9c5daba343f17964f\"\ndependencies = [\n \"atomic-polyfill\",\n \"hash32\",\n \"rustc_version\",\n \"spin\",\n \"stable_deref_trait\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"highway\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1489f81ead4b71a09ddeab6850c0356c0932587637d753f21ee1010ab875b013\"\n\n[[package]]\nname = \"image\"\nversion = \"0.24.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5690139d2f55868e080017335e4b94cb7414274c74f1669c84fb5feba2c9f69d\"\ndependencies = [\n \"bytemuck\",\n \"byteorder\",\n \"color_quant\",\n \"gif 0.13.1\",\n \"jpeg-decoder 0.3.1\",\n \"num-traits\",\n \"png\",\n \"tiff\",\n]\n\n[[package]]\nname = \"indoc\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa799dd5ed20a7e349f3b4639aa80d74549c81716d9ec4f994c9b5815598306\"\n\n[[package]]\nname = \"inventory\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"84344c6e0b90a9e2b6f3f9abe5cc74402684e348df7b32adca28747e0cef091a\"\ndependencies = [\n \"ctor\",\n \"ghost\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"jpeg-decoder\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9478aa10f73e7528198d75109c8be5cd7d15fb530238040148d5f9a22d4c5b3b\"\n\n[[package]]\nname = \"jpeg-decoder\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f5d4a7da358eff58addd2877a45865158f0d78c911d43a5784ceb7bbf52833b0\"\ndependencies = [\n \"rayon\",\n]\n\n[[package]]\nname = \"kurbo\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a53776d271cfb873b17c618af0298445c88afc52837f3e948fa3fafd131f449\"\ndependencies = [\n \"arrayvec 0.7.6\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.159\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"561d97a539a36e26a9a5fad1ea11a3039a67714694aaa379433e580854bc3dc5\"\n\n[[package]]\nname = \"libm\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ec2a862134d2a7d32d7983ddcdd1c4923530833c9f2ea1a44fc5fa473989058\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"lyon\"\nversion = \"0.17.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf0510ed5e3e2fb80f3db2061ef5ca92d87bfda1a624bb1eacf3bd50226e4cbb\"\ndependencies = [\n \"lyon_algorithms\",\n \"lyon_tessellation\",\n]\n\n[[package]]\nname = \"lyon_algorithms\"\nversion = \"0.17.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8037f716541ba0d84d3de05c0069f8068baf73990d55980558b84d944c8a244a\"\ndependencies = [\n \"lyon_path\",\n \"sid\",\n]\n\n[[package]]\nname = \"lyon_geom\"\nversion = \"0.17.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"71d89ccbdafd83d259403e22061be27bccc3254bba65cdc5303250c4227c8c8e\"\ndependencies = [\n \"arrayvec 0.5.2\",\n \"euclid\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"lyon_path\"\nversion = \"0.17.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b0a59fdf767ca0d887aa61d1b48d4bbf6a124c1a45503593f7d38ab945bfbc0\"\ndependencies = [\n \"lyon_geom\",\n]\n\n[[package]]\nname = \"lyon_tessellation\"\nversion = \"0.17.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7230e08dd0638048e46f387f255dbe7a7344a3e6705beab53242b5af25635760\"\ndependencies = [\n \"float_next_after 0.1.5\",\n \"lyon_path\",\n]\n\n[[package]]\nname = \"malloc_buf\"\nversion = \"0.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62bb907fe88d54d8d9ce32a3cceab4218ed2f6b7d35617cafe9adf84e43919cb\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"malloc_size_of_derive\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f44db74bde26fdf427af23f1d146c211aed857c59e3be750cf2617f6b0b05c94\"\ndependencies = [\n \"proc-macro2\",\n \"syn 2.0.79\",\n \"synstructure 0.13.1\",\n]\n\n[[package]]\nname = \"matches\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2532096657941c2fea9c289d370a250971c689d4f143798ff67113ec042024a5\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96590ba8f175222643a85693f33d26e9c8a015f599c216509b1a6894af675d34\"\ndependencies = [\n \"adler\",\n]\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2d80299ef12ff69b16a84bb182e3b9df68b5a91574d3d4fa6e41b65deec4df1\"\ndependencies = [\n \"adler2\",\n \"simd-adler32\",\n]\n\n[[package]]\nname = \"mmapio\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0204e2cac68f5b2e35b7ec8cb5d906f6e58e78dad8066a30b6ee54da99bb03dd\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n \"libm\",\n]\n\n[[package]]\nname = \"objc\"\nversion = \"0.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"915b1b472bc21c53464d6c8461c9d3af805ba1ef837e1cac254428f4a77177b1\"\ndependencies = [\n \"malloc_buf\",\n]\n\n[[package]]\nname = \"objc-foundation\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1add1b659e36c9607c7aab864a76c7a4c2760cd0cd2e120f3fb8b952c7e22bf9\"\ndependencies = [\n \"block\",\n \"objc\",\n \"objc_id\",\n]\n\n[[package]]\nname = \"objc-sys\"\nversion = \"0.2.0-beta.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df3b9834c1e95694a05a828b59f55fa2afec6288359cda67146126b3f90a55d7\"\n\n[[package]]\nname = \"objc2\"\nversion = \"0.3.0-beta.3.patch-leaks.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e01640f9f2cb1220bbe80325e179e532cb3379ebcd1bf2279d703c19fe3a468\"\ndependencies = [\n \"block2\",\n \"objc-sys\",\n \"objc2-encode\",\n]\n\n[[package]]\nname = \"objc2-encode\"\nversion = \"2.0.0-pre.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"abfcac41015b00a120608fdaa6938c44cb983fee294351cc4bac7638b4e50512\"\ndependencies = [\n \"objc-sys\",\n]\n\n[[package]]\nname = \"objc_id\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c92d4ddb4bd7b50d730c215ff871754d0da6b2178849f8a2a2ab69712d0c073b\"\ndependencies = [\n \"objc\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.36.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"084f1a5821ac4c651660a94a7153d27ac9d8a53736203f58b31945ded098070a\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.20.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"82881c4be219ab5faaf2ad5e5e5ecdff8c66bd7402ca3160975c93b24961afd1\"\ndependencies = [\n \"portable-atomic\",\n]\n\n[[package]]\nname = \"ouroboros\"\nversion = \"0.17.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2ba07320d39dfea882faa70554b4bd342a5f273ed59ba7c1c6b4c840492c954\"\ndependencies = [\n \"aliasable\",\n \"ouroboros_macro\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ouroboros_macro\"\nversion = \"0.17.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec4c6225c69b4ca778c0aea097321a64c421cf4577b331c61b229267edabb6f8\"\ndependencies = [\n \"heck\",\n \"proc-macro-error\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.79\",\n]\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall\",\n \"smallvec\",\n \"windows-targets\",\n]\n\n[[package]]\nname = \"pathfinder_geometry\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b7b7e7b4ea703700ce73ebf128e1450eb69c3a8329199ffbfb9b2a0418e5ad3\"\ndependencies = [\n \"log\",\n \"pathfinder_simd\",\n]\n\n[[package]]\nname = \"pathfinder_simd\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cf07ef4804cfa9aea3b04a7bbdd5a40031dbb6b4f2cbaf2b011666c80c5b4f2\"\ndependencies = [\n \"rustc_version\",\n]\n\n[[package]]\nname = \"pico-args\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db8bcd96cb740d03149cbad5518db9fd87126a10ab519c011893b1754134c468\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"953ec861398dccce10c670dfeaf3ec4911ca479e9c02154b3a215178c5f566f2\"\n\n[[package]]\nname = \"plane-split\"\nversion = \"0.17.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3f7075ec146b897b6e0faca47adeb7ed3d4f6eaa8145bf19db17311081b3f63\"\ndependencies = [\n \"binary-space-partition\",\n \"euclid\",\n \"log\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"png\"\nversion = \"0.17.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"52f9d46a34a05a6a57566bc2bfae066ef07585a6e3fa30fbbdff5936380623f0\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"crc32fast\",\n \"fdeflate\",\n \"flate2\",\n \"miniz_oxide 0.8.0\",\n]\n\n[[package]]\nname = \"portable-atomic\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cc9c68a3f6da06753e9335d63e27f6b9754dd1920d941135b7ea8224f141adb2\"\n\n[[package]]\nname = \"proc-macro-error\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c\"\ndependencies = [\n \"proc-macro-error-attr\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro-error-attr\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"pyo3\"\nversion = \"0.16.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0220c44442c9b239dd4357aa856ac468a4f5e1f0df19ddb89b2522952eb4c6ca\"\ndependencies = [\n \"cfg-if\",\n \"indoc\",\n \"inventory\",\n \"libc\",\n \"parking_lot\",\n \"pyo3-build-config\",\n \"pyo3-ffi\",\n \"pyo3-macros\",\n \"unindent\",\n]\n\n[[package]]\nname = \"pyo3-build-config\"\nversion = \"0.16.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c819d397859445928609d0ec5afc2da5204e0d0f73d6bf9e153b04e83c9cdc2\"\ndependencies = [\n \"once_cell\",\n \"target-lexicon\",\n]\n\n[[package]]\nname = \"pyo3-ffi\"\nversion = \"0.16.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca882703ab55f54702d7bfe1189b41b0af10272389f04cae38fe4cd56c65f75f\"\ndependencies = [\n \"libc\",\n \"pyo3-build-config\",\n]\n\n[[package]]\nname = \"pyo3-log\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d84f1cb4bfeb767e1913b5e79fb86c1db083404296a650a7689a96371f7d30ea\"\ndependencies = [\n \"arc-swap\",\n \"log\",\n \"pyo3\",\n]\n\n[[package]]\nname = \"pyo3-macros\"\nversion = \"0.16.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"568749402955ad7be7bad9a09b8593851cd36e549ac90bfd44079cea500f3f21\"\ndependencies = [\n \"proc-macro2\",\n \"pyo3-macros-backend\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"pyo3-macros-backend\"\nversion = \"0.16.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"611f64e82d98f447787e82b8e7b0ebc681e1eb78fc1252668b2c605ffb4e1eb8\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"raw-window-handle\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f2ff9a1f06a88b01621b7ae906ef0211290d1c8a168a15542486a8f61c0833b9\"\n\n[[package]]\nname = \"rayon\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b418a60154510ca1a002a752ca9714984e21e4241e804d32555251faf8b78ffa\"\ndependencies = [\n \"either\",\n \"rayon-core\",\n]\n\n[[package]]\nname = \"rayon-core\"\nversion = \"1.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1465873a3dfdaa8ae7cb14b4383657caab0b3e8a0aa9ae8e04b044854c8dfce2\"\ndependencies = [\n \"crossbeam-deque\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"rctree\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ae028b272a6e99d9f8260ceefa3caa09300a8d6c8d2b2001316474bc52122e9\"\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.5.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b6dfecf2c74bce2466cabf93f6664d6998a69eb21e39f4207930065b27b771f\"\ndependencies = [\n \"bitflags 2.6.0\",\n]\n\n[[package]]\nname = \"resvg\"\nversion = \"0.22.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2e702d1e8e00a3a0717b96244cba840f34f542d8f23097c8903266c4e2975658\"\ndependencies = [\n \"gif 0.11.4\",\n \"jpeg-decoder 0.2.6\",\n \"log\",\n \"pico-args\",\n \"png\",\n \"rgb\",\n \"svgtypes\",\n \"tiny-skia\",\n \"usvg\",\n]\n\n[[package]]\nname = \"rgb\"\nversion = \"0.8.50\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57397d16646700483b67d2dd6511d79318f9d057fdbd21a4066aeac8b41d310a\"\ndependencies = [\n \"bytemuck\",\n]\n\n[[package]]\nname = \"robust\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"222155e5550abd9100afdcdefbd08aa1b856d226b60e327044ec21b1ece2f78e\"\n\n[[package]]\nname = \"robust\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cbf4a6aa5f6d6888f39e980649f3ad6b666acdce1d78e95b8a2cb076e687ae30\"\n\n[[package]]\nname = \"roxmltree\"\nversion = \"0.14.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"921904a62e410e37e215c40381b7117f830d9d89ba60ab5236170541dd25646b\"\ndependencies = [\n \"xmlparser\",\n]\n\n[[package]]\nname = \"rstar\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73111312eb7a2287d229f06c00ff35b51ddee180f017ab6dec1f69d62ac098d6\"\ndependencies = [\n \"heapless\",\n \"num-traits\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"rust-fontconfig\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34f79014d061d4b959d842bc1a09c41f752fff163e25dfdde68552859fed1bd0\"\ndependencies = [\n \"allsorts\",\n \"base64 0.22.1\",\n \"mmapio\",\n \"xmlparser\",\n]\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"719b953e2095829ee67db738b3bfa9fa368c94900df327b3f07fe6e794d2fe1f\"\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cfcb3a22ef46e85b45de6ee7e79d063319ebb6594faafcf1c225ea92ab6e9b92\"\ndependencies = [\n \"semver\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"safe_arch\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c1ff3d6d9696af502cc3110dacce942840fb06ff4514cad92236ecc455f2ce05\"\ndependencies = [\n \"bytemuck\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.210\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8e3592472072e6e22e0a54d5904d9febf8508f65fb8552499a1abc7d1078c3a\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_bytes\"\nversion = \"0.11.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"387cc504cb06bb40a96c8e04e951fe01854cf6bc921053c954e4a606d9675c6a\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.210\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"243902eda00fad750862fc144cea25caca5e20d615af0a81bee94ca738f1df1f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.79\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.128\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ff5456707a1de34e7e37f2a6fd3d3f808c318259cbd01ab6377795054b483d8\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"sid\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd5ac56c121948b4879bba9e519852c211bcdd8f014efff766441deff0b91bdb\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"simd-adler32\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d66dc143e6b11c1eddc06d5c423cfc97062865baf299914ab64caa38182078fe\"\n\n[[package]]\nname = \"simplecss\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a11be7c62927d9427e9f40f3444d5499d868648e2edbc4e2116de69e7ec0e89d\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"siphasher\"\nversion = \"0.3.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38b58827f4464d87d377d175e90bf58eb00fd8716ff0a62f80356b5e61555d0d\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67\"\ndependencies = [\n \"lock_api\",\n]\n\n[[package]]\nname = \"stable_deref_trait\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strfmt\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b278b244ef7aa5852b277f52dd0c6cac3a109919e1f6d699adde63251227a30f\"\n\n[[package]]\nname = \"svg_fmt\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"20e16a0f46cf5fd675563ef54f26e83e20f2366bcf027bcb3cc3ed2b98aaf2ca\"\n\n[[package]]\nname = \"svgtypes\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22975e8a2bac6a76bb54f898a6b18764633b00e780330f0b689f65afb3975564\"\ndependencies = [\n \"siphasher\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89132cd0bf050864e1d38dc3bbc07a0eb8e7530af26344d3d2bbbef83499f590\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.79\",\n]\n\n[[package]]\nname = \"target-lexicon\"\nversion = \"0.12.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61c41af27dd6d1e27b1b16b489db798443478cef1f06a660c96db617ba5de3b1\"\n\n[[package]]\nname = \"tiff\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba1310fcea54c6a9a4fd1aad794ecc02c31682f6bfbecdf460bf19533eed1e3e\"\ndependencies = [\n \"flate2\",\n \"jpeg-decoder 0.3.1\",\n \"weezl\",\n]\n\n[[package]]\nname = \"time\"\nversion = \"0.1.45\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b797afad3f312d1c66a56d11d0316f916356d11bd158fbc6ca6389ff6bf805a\"\ndependencies = [\n \"libc\",\n \"wasi\",\n \"winapi\",\n]\n\n[[package]]\nname = \"tiny-skia\"\nversion = \"0.6.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d049bfef0eaa2521e75d9ffb5ce86ad54480932ae19b85f78bec6f52c4d30d78\"\ndependencies = [\n \"arrayref\",\n \"arrayvec 0.5.2\",\n \"bytemuck\",\n \"cfg-if\",\n \"libm\",\n \"png\",\n \"safe_arch\",\n]\n\n[[package]]\nname = \"tinyfiledialogs\"\nversion = \"3.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e25fa0bc43a6566e2cc6d7ac96df3fa5a57beba34445bead1b368ba8fe9ca568\"\ndependencies = [\n \"cc\",\n \"libc\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"445e881f4f6d382d5f27c034e25eb92edd7c784ceab92a0937db7f2e9471b938\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\"\n\n[[package]]\nname = \"tracy-rs\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce607aae8ab0ab3abf3a2723a9ab6f09bb8639ed83fdd888d857b8e556c868d8\"\n\n[[package]]\nname = \"ttf-parser\"\nversion = \"0.15.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b3e06c9b9d80ed6b745c7159c40b311ad2916abb34a49e9be2653b90db0d8dd\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2896d95c02a80c6d6a5d6e953d479f5ddf2dfdb6a244441010e373ac0fb88971\"\n\n[[package]]\nname = \"unicode-canonical-combining-class\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6925586af9268182c711e47c0853ed84131049efaca41776d0ca97f983865c32\"\n\n[[package]]\nname = \"unicode-general-category\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2281c8c1d221438e373249e065ca4989c4c36952c211ff21a0ee91c44a3869e7\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e91b56cd4cadaeb79bbf1a5645f6b4f8dc5bde8834ad5894a8db35fda9efa1fe\"\n\n[[package]]\nname = \"unicode-joining-type\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22f8cb47ccb8bc750808755af3071da4a10dcd147b68fc874b7ae4b12543f6f5\"\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5033c97c4262335cded6d6fc3e5c18ab755e1a3dc96376350f3d8e9f009ad956\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853\"\n\n[[package]]\nname = \"unindent\"\nversion = \"0.1.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1766d682d402817b5ac4490b3c3002d91dfa0d22812f341609f97b08757359c\"\n\n[[package]]\nname = \"usvg\"\nversion = \"0.22.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a261d60a7215fa339482047cc3dafd4e22e2bf34396aaebef2b707355bbb39c0\"\ndependencies = [\n \"base64 0.13.1\",\n \"data-url\",\n \"flate2\",\n \"float-cmp\",\n \"kurbo\",\n \"log\",\n \"pico-args\",\n \"rctree\",\n \"roxmltree\",\n \"simplecss\",\n \"siphasher\",\n \"svgtypes\",\n \"xmlwriter\",\n]\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.10.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a143597ca7c7793eff794def352d41792a93c481eb1042423ff7ff72ba2c31f\"\n\n[[package]]\nname = \"weezl\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53a85b86a771b1c87058196170769dd264f66c0782acf1ae6cc51bfd64b39082\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm\",\n \"windows_aarch64_msvc\",\n \"windows_i686_gnu\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc\",\n \"windows_x86_64_gnu\",\n \"windows_x86_64_gnullvm\",\n \"windows_x86_64_msvc\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n\n[[package]]\nname = \"wio\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5d129932f4644ac2396cb456385cbf9e63b5b30c6e8dc4820bdca4eb082037a5\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"x11-clipboard\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89bd49c06c9eb5d98e6ba6536cf64ac9f7ee3a009b2f53996d405b3944f6bcea\"\ndependencies = [\n \"xcb\",\n]\n\n[[package]]\nname = \"xcb\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e917a3f24142e9ff8be2414e36c649d47d6cc2ba81f16201cdef96e533e02de\"\ndependencies = [\n \"libc\",\n \"log\",\n]\n\n[[package]]\nname = \"xmlparser\"\nversion = \"0.13.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"66fee0b777b0f5ac1c69bb06d361268faafa61cd4682ae064a171c16c433e9e4\"\n\n[[package]]\nname = \"xmlwriter\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec7a2a501ed189703dba8b08142f057e887dfc4b2cc4db2d343ac6376ba3e0b9\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.4736328125,
          "content": "[workspace]\nmembers = [\n    \"api/rust\",\n    \"azul-dll\",\n    \"azul-desktop\",\n    \"azulc\",\n    \"azul-css\",\n    \"azul-core\",\n    \"azul-layout\",\n    \"azul-text-layout\",\n    \"azul-css-parser\",\n    \"examples/rust\",\n]\n\n[profile.dev]\nopt-level = 'z'\nlto = false\npanic = \"abort\"\ndebug = true\nstrip = false\n\n[profile.release]\nopt-level = 3\nlto = true\npanic = \"abort\"\ncodegen-units = 1\ndebug = false\ndebug-assertions = false\noverflow-checks = false\nincremental = false\nrpath = false\nstrip = false"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 16.3330078125,
          "content": "Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in\n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n"
        },
        {
          "name": "LICENSE-LINUX.txt",
          "type": "blob",
          "size": 10.36328125,
          "content": "[program] is based in part on the AZUL GUI toolkit (https://azul.rs),\r\nlicensed under the Mozilla Public License Version 2.0.\r\nThe AZUL GUI toolkit itself uses the following libraries:\r\n\r\nInflector v0.11.4 licensed BSD-2-Clause\r\n    by Josh Teeter\r\nadler v1.0.2 licensed 0BSD OR Apache-2.0 OR MIT\r\n    by Jonas Schievink\r\nalloc-no-stdlib v2.0.4 licensed BSD-3-Clause\r\n    by Daniel Reiter Horn\r\nalloc-stdlib v0.2.2 licensed BSD-3-Clause\r\n    by Daniel Reiter Horn\r\nallsorts v0.10.0 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\nallsorts-rental v0.5.6 licensed Apache-2.0 OR MIT\r\n    by Jameson Ernst\r\nallsorts_no_std v0.5.2 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\napp_units v0.7.1 licensed MPL-2.0\r\n    by The Servo Project Developers\r\narrayref v0.3.7 licensed BSD-2-Clause\r\n    by David Roundy\r\narrayvec v0.5.2 licensed Apache-2.0 OR MIT\r\n    by bluss\r\narrayvec v0.7.2 licensed Apache-2.0 OR MIT\r\n    by bluss\r\nazul-core v0.0.2 licensed MPL-2.0\r\n    by Felix Schütt\r\nazul-css v0.0.1 licensed MPL-2.0\r\n    by Felix Schütt\r\nazul-css-parser v0.0.1 licensed MPL-2.0\r\n    by Felix Schütt\r\nazul-desktop v0.0.5 licensed MPL-2.0\r\n    by Felix Schütt, The winit contributors\r\nazul-dll v0.0.1 licensed MPL-2.0\r\n    by Felix Schütt\r\nazul-layout v0.0.4 licensed MPL-2.0\r\n    by Felix Schütt\r\nazul-peek-poke v0.2.0 licensed Apache-2.0 OR MIT\r\n    by Dan Glastonbury\r\nazul-peek-poke-derive v0.2.1 licensed Apache-2.0 OR MIT\r\n    by Dan Glastonbury\r\nazul-simplecss v0.1.1 licensed MPL-2.0\r\n    by Reizner Evgeniy\r\nazul-text-layout v0.0.5 licensed MPL-2.0\r\n    by Felix Schütt\r\nazul-webrender v0.62.2 licensed MPL-2.0\r\n    by Glenn Watson\r\nazul-webrender-api v0.62.0 licensed MPL-2.0\r\n    by Glenn Watson\r\nazul-webrender-build v0.0.2 licensed MPL-2.0\r\n    by The Servo Project Developers\r\nazul-wr_malloc_size_of v0.0.1 licensed Apache-2.0 OR MIT\r\n    by The Servo Project Developers\r\nazulc v0.0.3 licensed MPL-2.0\r\n    by Felix Schütt\r\nbacktrace v0.3.67 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nbase64 v0.13.1 licensed Apache-2.0 OR MIT\r\n    by Alice Maz, Marshall Pierce\r\nbinary-space-partition v0.1.2 licensed MPL-2.0\r\n    by Dzmitry Malyshau\r\nbincode v1.3.3 licensed MIT\r\n    by Ty Overby, Francesco Mazzoli, David Tolnay, Zoey Riordan\r\nbitflags v1.3.2 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nbitreader v0.3.7 licensed Apache-2.0 OR MIT\r\n    by Ilkka Rauta\r\nbrotli-decompressor v2.3.4 licensed BSD-3-Clause OR MIT\r\n    by Daniel Reiter Horn, The Brotli Authors\r\nbytemuck v1.13.1 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Lokathor\r\nbyteorder v1.4.3 licensed MIT OR Unlicense\r\n    by Andrew Gallant\r\ncfg-if v1.0.0 licensed Apache-2.0 OR MIT\r\n    by Alex Crichton\r\nclipboard2 v0.1.1 licensed MIT\r\n    by Avi Weinstock, Felix Schütt\r\ncolor_quant v1.1.0 licensed MIT\r\n    by nwin\r\nconvert_case v0.4.0 licensed MIT\r\n    by David Purdum\r\ncrc32fast v1.3.2 licensed Apache-2.0 OR MIT\r\n    by Sam Rijs, Alex Crichton\r\ncstr v0.2.11 licensed MIT\r\n    by Xidorn Quan\r\ndata-url v0.1.1 licensed Apache-2.0 OR MIT\r\n    by Simon Sapin\r\nderive_more v0.99.17 licensed MIT\r\n    by Jelte Fennema\r\neither v1.8.1 licensed Apache-2.0 OR MIT\r\n    by bluss\r\nencoding_rs v0.8.32 licensed (Apache-2.0 OR MIT) AND BSD-3-Clause\r\n    by Henri Sivonen\r\netagere v0.2.7 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\neuclid v0.22.9 licensed Apache-2.0 OR MIT\r\n    by The Servo Project Developers\r\nfdeflate v0.3.0 licensed Apache-2.0 OR MIT\r\n    by The image-rs Developers\r\nfern v0.6.2 licensed MIT\r\n    by David Ross\r\nflate2 v1.0.23 licensed Apache-2.0 OR MIT\r\n    by Alex Crichton, Josh Triplett\r\nfloat-cmp v0.9.0 licensed MIT\r\n    by Mike Dilger\r\nfloat_next_after v0.1.5 licensed MIT\r\n    by Bronson Brown-deVost\r\nfreetype v0.7.0 licensed Apache-2.0 OR MIT\r\n    by The Servo Project Developers\r\nfreetype-sys v0.13.1 licensed MIT\r\n    by Coeuvre\r\nfxhash v0.2.1 licensed Apache-2.0 OR MIT\r\n    by cbreeden\r\ngif v0.11.4 licensed Apache-2.0 OR MIT\r\n    by nwin\r\ngif v0.12.0 licensed Apache-2.0 OR MIT\r\n    by The image-rs Developers\r\ngl-context-loader v0.1.8 licensed Apache-2.0 OR MIT\r\n    by Felix Schütt, The Servo Project Developers\r\nglyph-names v0.1.0 licensed BSD-3-Clause\r\n    by YesLogic Pty. Ltd.\r\nhighway v0.8.1 licensed MIT\r\n    by Nick Babcock\r\nimage v0.24.6 licensed MIT\r\n    by The image-rs Developers\r\nitertools v0.8.2 licensed Apache-2.0 OR MIT\r\n    by bluss\r\njpeg-decoder v0.2.6 licensed Apache-2.0 OR MIT\r\n    by The image-rs Developers\r\njpeg-decoder v0.3.0 licensed Apache-2.0 OR MIT\r\n    by The image-rs Developers\r\nkurbo v0.8.3 licensed Apache-2.0 OR MIT\r\n    by Raph Levien\r\nlazy_static v1.4.0 licensed Apache-2.0 OR MIT\r\n    by Marvin Löbel\r\nlibc v0.2.142 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nlibm v0.2.6 licensed Apache-2.0 OR MIT\r\n    by Jorge Aparicio\r\nlog v0.4.17 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nlyon v0.17.10 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nlyon_algorithms v0.17.7 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nlyon_geom v0.17.7 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nlyon_path v0.17.7 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nlyon_tessellation v0.17.10 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nmalloc_size_of_derive v0.1.2 licensed Apache-2.0 OR MIT\r\n    by The Servo Project Developers\r\nmemchr v2.5.0 licensed MIT OR Unlicense\r\n    by Andrew Gallant, bluss\r\nmemoffset v0.8.0 licensed MIT\r\n    by Gilad Naaman\r\nminiz_oxide v0.4.4 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Frommi, oyvindln\r\nminiz_oxide v0.5.4 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Frommi, oyvindln\r\nminiz_oxide v0.6.2 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Frommi, oyvindln\r\nminiz_oxide v0.7.1 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Frommi, oyvindln\r\nmmapio v0.9.1 licensed Apache-2.0 OR MIT\r\n    by henrylee2cn, dignifiedquire, Dan Burkert\r\nnum-integer v0.1.45 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nnum-rational v0.4.1 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nnum-traits v0.2.15 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nnum_cpus v1.15.0 licensed Apache-2.0 OR MIT\r\n    by Sean McArthur\r\nouroboros v0.9.5 licensed Apache-2.0 OR MIT\r\n    by Joshua Maros\r\nouroboros_macro v0.9.5 licensed Apache-2.0 OR MIT\r\n    by Joshua Maros\r\npico-args v0.4.2 licensed MIT\r\n    by Evgeniy Reizner\r\nplane-split v0.17.1 licensed MPL-2.0\r\n    by Dzmitry Malyshau\r\npng v0.17.8 licensed Apache-2.0 OR MIT\r\n    by The image-rs Developers\r\nproc-macro-error v1.0.4 licensed Apache-2.0 OR MIT\r\n    by CreepySkeleton\r\nproc-macro-error-attr v1.0.4 licensed Apache-2.0 OR MIT\r\n    by CreepySkeleton\r\nproc-macro2 v1.0.56 licensed Apache-2.0 OR MIT\r\n    by David Tolnay, Alex Crichton\r\nquote v1.0.26 licensed Apache-2.0 OR MIT\r\n    by David Tolnay\r\nraw-window-handle v0.5.2 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Osspial\r\nrayon v1.7.0 licensed Apache-2.0 OR MIT\r\n    by Niko Matsakis, Josh Stone\r\nrayon-core v1.11.0 licensed Apache-2.0 OR MIT\r\n    by Niko Matsakis, Josh Stone\r\nrctree v0.4.0 licensed MIT\r\n    by Simon Sapin, Evgeniy Reizner\r\nrental-impl v0.5.5 licensed Apache-2.0 OR MIT\r\n    by Jameson Ernst\r\nresvg v0.22.0 licensed MPL-2.0\r\n    by Yevhenii Reizner\r\nrgb v0.8.36 licensed MIT\r\n    by Kornel Lesiński\r\nroxmltree v0.14.1 licensed Apache-2.0 OR MIT\r\n    by Evgeniy Reizner\r\nrust-fontconfig v0.1.5 licensed MIT\r\n    by Felix Schütt\r\nrustc-demangle v0.1.23 licensed Apache-2.0 OR MIT\r\n    by Alex Crichton\r\nrustc-hash v1.1.0 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nsafe_arch v0.5.2 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Lokathor\r\nscopeguard v1.1.0 licensed Apache-2.0 OR MIT\r\n    by bluss\r\nserde v1.0.160 licensed Apache-2.0 OR MIT\r\n    by Erick Tryzelaar, David Tolnay\r\nserde_bytes v0.11.9 licensed Apache-2.0 OR MIT\r\n    by David Tolnay\r\nserde_derive v1.0.160 licensed Apache-2.0 OR MIT\r\n    by Erick Tryzelaar, David Tolnay\r\nsid v0.6.1 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nsimd-adler32 v0.3.5 licensed MIT\r\n    by Marvin Countryman\r\nsimplecss v0.2.1 licensed Apache-2.0 OR MIT\r\n    by Reizner Evgeniy\r\nsiphasher v0.3.10 licensed Apache-2.0 OR MIT\r\n    by Frank Denis\r\nsmallvec v1.10.0 licensed Apache-2.0 OR MIT\r\n    by The Servo Project Developers\r\nstable_deref_trait v1.2.0 licensed Apache-2.0 OR MIT\r\n    by Robert Grosse\r\nstrfmt v0.1.6 licensed MIT\r\n    by Garrett Berg\r\nsvg_fmt v0.4.1 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nsvgtypes v0.8.2 licensed Apache-2.0 OR MIT\r\n    by Yevhenii Reizner\r\nsyn v1.0.109 licensed Apache-2.0 OR MIT\r\n    by David Tolnay\r\nsyn v2.0.15 licensed Apache-2.0 OR MIT\r\n    by David Tolnay\r\nsynstructure v0.12.6 licensed MIT\r\n    by Nika Layzell\r\ntiff v0.8.1 licensed MIT\r\n    by The image-rs Developers\r\ntime v0.1.45 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\ntiny-skia v0.6.6 licensed BSD-3-Clause\r\n    by Yevhenii Reizner\r\ntinyfiledialogs v3.9.1 licensed zlib-acknowledgement\r\n    by Guillaume Vareille, Josh Matthews\r\ntinyvec v1.6.0 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Lokathor\r\ntinyvec_macros v0.1.1 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Soveu\r\ntracy-rs v0.1.2 licensed MPL-2.0\r\n    by Glenn Watson\r\nttf-parser v0.15.2 licensed Apache-2.0 OR MIT\r\n    by Yevhenii Reizner\r\nucd-trie v0.1.5 licensed Apache-2.0 OR MIT\r\n    by Andrew Gallant\r\nunicode-canonical-combining-class v0.2.0 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\nunicode-general-category v0.3.0 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\nunicode-general-category v0.5.1 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\nunicode-ident v1.0.8 licensed (MIT OR Apache-2.0) AND Unicode-DFS-2016\r\n    by David Tolnay\r\nunicode-joining-type v0.5.0 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\nunicode-joining-type v0.6.0 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\nunicode-normalization v0.1.22 licensed Apache-2.0 OR MIT\r\n    by kwantam, Manish Goregaokar\r\nunicode-xid v0.2.4 licensed Apache-2.0 OR MIT\r\n    by erick.tryzelaar, kwantam, Manish Goregaokar\r\nusvg v0.22.0 licensed MPL-2.0\r\n    by Yevhenii Reizner\r\nweezl v0.1.7 licensed Apache-2.0 OR MIT\r\n    by HeroicKatora\r\nx11-clipboard v0.3.3 licensed MIT\r\n    by quininer kel\r\nxcb v0.8.2 licensed MIT\r\n    by Remi Thebault\r\nxmlparser v0.13.5 licensed Apache-2.0 OR MIT\r\n    by Evgeniy Reizner\r\nxmlwriter v0.1.0 licensed MIT\r\n    by Evgeniy Reizner\r\n\r\nTo generate the full text of the license for the license, please visit\r\nhttps://spdx.org/licenses/ and replace the license author in the source\r\ntext in any given license with the name of the author listed above."
        },
        {
          "name": "LICENSE-MAC.txt",
          "type": "blob",
          "size": 10.97265625,
          "content": "[program] is based in part on the AZUL GUI toolkit (https://azul.rs),\r\nlicensed under the Mozilla Public License Version 2.0.\r\nThe AZUL GUI toolkit itself uses the following libraries:\r\n\r\nInflector v0.11.4 licensed BSD-2-Clause\r\n    by Josh Teeter\r\nadler v1.0.2 licensed 0BSD OR Apache-2.0 OR MIT\r\n    by Jonas Schievink\r\nalloc-no-stdlib v2.0.4 licensed BSD-3-Clause\r\n    by Daniel Reiter Horn\r\nalloc-stdlib v0.2.2 licensed BSD-3-Clause\r\n    by Daniel Reiter Horn\r\nallsorts v0.10.0 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\nallsorts-rental v0.5.6 licensed Apache-2.0 OR MIT\r\n    by Jameson Ernst\r\nallsorts_no_std v0.5.2 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\napp_units v0.7.1 licensed MPL-2.0\r\n    by The Servo Project Developers\r\narrayref v0.3.7 licensed BSD-2-Clause\r\n    by David Roundy\r\narrayvec v0.5.2 licensed Apache-2.0 OR MIT\r\n    by bluss\r\narrayvec v0.7.2 licensed Apache-2.0 OR MIT\r\n    by bluss\r\nazul-core v0.0.2 licensed MPL-2.0\r\n    by Felix Schütt\r\nazul-css v0.0.1 licensed MPL-2.0\r\n    by Felix Schütt\r\nazul-css-parser v0.0.1 licensed MPL-2.0\r\n    by Felix Schütt\r\nazul-desktop v0.0.5 licensed MPL-2.0\r\n    by Felix Schütt, The winit contributors\r\nazul-dll v0.0.1 licensed MPL-2.0\r\n    by Felix Schütt\r\nazul-layout v0.0.4 licensed MPL-2.0\r\n    by Felix Schütt\r\nazul-peek-poke v0.2.0 licensed Apache-2.0 OR MIT\r\n    by Dan Glastonbury\r\nazul-peek-poke-derive v0.2.1 licensed Apache-2.0 OR MIT\r\n    by Dan Glastonbury\r\nazul-simplecss v0.1.1 licensed MPL-2.0\r\n    by Reizner Evgeniy\r\nazul-text-layout v0.0.5 licensed MPL-2.0\r\n    by Felix Schütt\r\nazul-webrender v0.62.2 licensed MPL-2.0\r\n    by Glenn Watson\r\nazul-webrender-api v0.62.0 licensed MPL-2.0\r\n    by Glenn Watson\r\nazul-webrender-build v0.0.2 licensed MPL-2.0\r\n    by The Servo Project Developers\r\nazul-wr_malloc_size_of v0.0.1 licensed Apache-2.0 OR MIT\r\n    by The Servo Project Developers\r\nazulc v0.0.3 licensed MPL-2.0\r\n    by Felix Schütt\r\nbacktrace v0.3.67 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nbase64 v0.13.1 licensed Apache-2.0 OR MIT\r\n    by Alice Maz, Marshall Pierce\r\nbinary-space-partition v0.1.2 licensed MPL-2.0\r\n    by Dzmitry Malyshau\r\nbincode v1.3.3 licensed MIT\r\n    by Ty Overby, Francesco Mazzoli, David Tolnay, Zoey Riordan\r\nbitflags v1.3.2 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nbitreader v0.3.7 licensed Apache-2.0 OR MIT\r\n    by Ilkka Rauta\r\nblock v0.1.6 licensed MIT\r\n    by Steven Sheldon\r\nbrotli-decompressor v2.3.4 licensed BSD-3-Clause OR MIT\r\n    by Daniel Reiter Horn, The Brotli Authors\r\nbytemuck v1.13.1 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Lokathor\r\nbyteorder v1.4.3 licensed MIT OR Unlicense\r\n    by Andrew Gallant\r\ncfg-if v1.0.0 licensed Apache-2.0 OR MIT\r\n    by Alex Crichton\r\nclipboard2 v0.1.1 licensed MIT\r\n    by Avi Weinstock, Felix Schütt\r\ncolor_quant v1.1.0 licensed MIT\r\n    by nwin\r\nconvert_case v0.4.0 licensed MIT\r\n    by David Purdum\r\ncore-foundation v0.9.3 licensed Apache-2.0 OR MIT\r\n    by The Servo Project Developers\r\ncore-foundation-sys v0.8.4 licensed Apache-2.0 OR MIT\r\n    by The Servo Project Developers\r\ncore-graphics v0.22.3 licensed Apache-2.0 OR MIT\r\n    by The Servo Project Developers\r\ncore-graphics-types v0.1.1 licensed Apache-2.0 OR MIT\r\n    by The Servo Project Developers\r\ncore-text v19.2.0 licensed Apache-2.0 OR MIT\r\n    by The Servo Project Developers\r\ncrc32fast v1.3.2 licensed Apache-2.0 OR MIT\r\n    by Sam Rijs, Alex Crichton\r\ncstr v0.2.11 licensed MIT\r\n    by Xidorn Quan\r\ndata-url v0.1.1 licensed Apache-2.0 OR MIT\r\n    by Simon Sapin\r\nderive_more v0.99.17 licensed MIT\r\n    by Jelte Fennema\r\neither v1.8.1 licensed Apache-2.0 OR MIT\r\n    by bluss\r\nencoding_rs v0.8.32 licensed (Apache-2.0 OR MIT) AND BSD-3-Clause\r\n    by Henri Sivonen\r\netagere v0.2.7 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\neuclid v0.22.9 licensed Apache-2.0 OR MIT\r\n    by The Servo Project Developers\r\nfdeflate v0.3.0 licensed Apache-2.0 OR MIT\r\n    by The image-rs Developers\r\nfern v0.6.2 licensed MIT\r\n    by David Ross\r\nflate2 v1.0.23 licensed Apache-2.0 OR MIT\r\n    by Alex Crichton, Josh Triplett\r\nfloat-cmp v0.9.0 licensed MIT\r\n    by Mike Dilger\r\nfloat_next_after v0.1.5 licensed MIT\r\n    by Bronson Brown-deVost\r\nforeign-types v0.3.2 licensed Apache-2.0 OR MIT\r\n    by Steven Fackler\r\nforeign-types-shared v0.1.1 licensed Apache-2.0 OR MIT\r\n    by Steven Fackler\r\nfxhash v0.2.1 licensed Apache-2.0 OR MIT\r\n    by cbreeden\r\ngif v0.11.4 licensed Apache-2.0 OR MIT\r\n    by nwin\r\ngif v0.12.0 licensed Apache-2.0 OR MIT\r\n    by The image-rs Developers\r\ngl-context-loader v0.1.8 licensed Apache-2.0 OR MIT\r\n    by Felix Schütt, The Servo Project Developers\r\nglyph-names v0.1.0 licensed BSD-3-Clause\r\n    by YesLogic Pty. Ltd.\r\nhighway v0.8.1 licensed MIT\r\n    by Nick Babcock\r\nimage v0.24.6 licensed MIT\r\n    by The image-rs Developers\r\nitertools v0.8.2 licensed Apache-2.0 OR MIT\r\n    by bluss\r\njpeg-decoder v0.2.6 licensed Apache-2.0 OR MIT\r\n    by The image-rs Developers\r\njpeg-decoder v0.3.0 licensed Apache-2.0 OR MIT\r\n    by The image-rs Developers\r\nkurbo v0.8.3 licensed Apache-2.0 OR MIT\r\n    by Raph Levien\r\nlazy_static v1.4.0 licensed Apache-2.0 OR MIT\r\n    by Marvin Löbel\r\nlibc v0.2.142 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nlibm v0.2.6 licensed Apache-2.0 OR MIT\r\n    by Jorge Aparicio\r\nlog v0.4.17 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nlyon v0.17.10 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nlyon_algorithms v0.17.7 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nlyon_geom v0.17.7 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nlyon_path v0.17.7 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nlyon_tessellation v0.17.10 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nmalloc_buf v0.0.6 licensed MIT\r\n    by Steven Sheldon\r\nmalloc_size_of_derive v0.1.2 licensed Apache-2.0 OR MIT\r\n    by The Servo Project Developers\r\nmemchr v2.5.0 licensed MIT OR Unlicense\r\n    by Andrew Gallant, bluss\r\nmemoffset v0.8.0 licensed MIT\r\n    by Gilad Naaman\r\nminiz_oxide v0.4.4 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Frommi, oyvindln\r\nminiz_oxide v0.5.4 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Frommi, oyvindln\r\nminiz_oxide v0.6.2 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Frommi, oyvindln\r\nminiz_oxide v0.7.1 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Frommi, oyvindln\r\nmmapio v0.9.1 licensed Apache-2.0 OR MIT\r\n    by henrylee2cn, dignifiedquire, Dan Burkert\r\nnum-integer v0.1.45 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nnum-rational v0.4.1 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nnum-traits v0.2.15 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nnum_cpus v1.15.0 licensed Apache-2.0 OR MIT\r\n    by Sean McArthur\r\nobjc v0.2.7 licensed MIT\r\n    by Steven Sheldon\r\nobjc-foundation v0.1.1 licensed MIT\r\n    by Steven Sheldon\r\nobjc_id v0.1.1 licensed MIT\r\n    by Steven Sheldon\r\nouroboros v0.9.5 licensed Apache-2.0 OR MIT\r\n    by Joshua Maros\r\nouroboros_macro v0.9.5 licensed Apache-2.0 OR MIT\r\n    by Joshua Maros\r\npico-args v0.4.2 licensed MIT\r\n    by Evgeniy Reizner\r\nplane-split v0.17.1 licensed MPL-2.0\r\n    by Dzmitry Malyshau\r\npng v0.17.8 licensed Apache-2.0 OR MIT\r\n    by The image-rs Developers\r\nproc-macro-error v1.0.4 licensed Apache-2.0 OR MIT\r\n    by CreepySkeleton\r\nproc-macro-error-attr v1.0.4 licensed Apache-2.0 OR MIT\r\n    by CreepySkeleton\r\nproc-macro2 v1.0.56 licensed Apache-2.0 OR MIT\r\n    by David Tolnay, Alex Crichton\r\nquote v1.0.26 licensed Apache-2.0 OR MIT\r\n    by David Tolnay\r\nraw-window-handle v0.5.2 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Osspial\r\nrayon v1.7.0 licensed Apache-2.0 OR MIT\r\n    by Niko Matsakis, Josh Stone\r\nrayon-core v1.11.0 licensed Apache-2.0 OR MIT\r\n    by Niko Matsakis, Josh Stone\r\nrctree v0.4.0 licensed MIT\r\n    by Simon Sapin, Evgeniy Reizner\r\nrental-impl v0.5.5 licensed Apache-2.0 OR MIT\r\n    by Jameson Ernst\r\nresvg v0.22.0 licensed MPL-2.0\r\n    by Yevhenii Reizner\r\nrgb v0.8.36 licensed MIT\r\n    by Kornel Lesiński\r\nroxmltree v0.14.1 licensed Apache-2.0 OR MIT\r\n    by Evgeniy Reizner\r\nrust-fontconfig v0.1.5 licensed MIT\r\n    by Felix Schütt\r\nrustc-demangle v0.1.23 licensed Apache-2.0 OR MIT\r\n    by Alex Crichton\r\nrustc-hash v1.1.0 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nsafe_arch v0.5.2 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Lokathor\r\nscopeguard v1.1.0 licensed Apache-2.0 OR MIT\r\n    by bluss\r\nserde v1.0.160 licensed Apache-2.0 OR MIT\r\n    by Erick Tryzelaar, David Tolnay\r\nserde_bytes v0.11.9 licensed Apache-2.0 OR MIT\r\n    by David Tolnay\r\nserde_derive v1.0.160 licensed Apache-2.0 OR MIT\r\n    by Erick Tryzelaar, David Tolnay\r\nsid v0.6.1 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nsimd-adler32 v0.3.5 licensed MIT\r\n    by Marvin Countryman\r\nsimplecss v0.2.1 licensed Apache-2.0 OR MIT\r\n    by Reizner Evgeniy\r\nsiphasher v0.3.10 licensed Apache-2.0 OR MIT\r\n    by Frank Denis\r\nsmallvec v1.10.0 licensed Apache-2.0 OR MIT\r\n    by The Servo Project Developers\r\nstable_deref_trait v1.2.0 licensed Apache-2.0 OR MIT\r\n    by Robert Grosse\r\nstrfmt v0.1.6 licensed MIT\r\n    by Garrett Berg\r\nsvg_fmt v0.4.1 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nsvgtypes v0.8.2 licensed Apache-2.0 OR MIT\r\n    by Yevhenii Reizner\r\nsyn v1.0.109 licensed Apache-2.0 OR MIT\r\n    by David Tolnay\r\nsyn v2.0.15 licensed Apache-2.0 OR MIT\r\n    by David Tolnay\r\nsynstructure v0.12.6 licensed MIT\r\n    by Nika Layzell\r\ntiff v0.8.1 licensed MIT\r\n    by The image-rs Developers\r\ntime v0.1.45 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\ntiny-skia v0.6.6 licensed BSD-3-Clause\r\n    by Yevhenii Reizner\r\ntinyfiledialogs v3.9.1 licensed zlib-acknowledgement\r\n    by Guillaume Vareille, Josh Matthews\r\ntinyvec v1.6.0 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Lokathor\r\ntinyvec_macros v0.1.1 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Soveu\r\ntracy-rs v0.1.2 licensed MPL-2.0\r\n    by Glenn Watson\r\nttf-parser v0.15.2 licensed Apache-2.0 OR MIT\r\n    by Yevhenii Reizner\r\nucd-trie v0.1.5 licensed Apache-2.0 OR MIT\r\n    by Andrew Gallant\r\nunicode-canonical-combining-class v0.2.0 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\nunicode-general-category v0.3.0 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\nunicode-general-category v0.5.1 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\nunicode-ident v1.0.8 licensed (MIT OR Apache-2.0) AND Unicode-DFS-2016\r\n    by David Tolnay\r\nunicode-joining-type v0.5.0 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\nunicode-joining-type v0.6.0 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\nunicode-normalization v0.1.22 licensed Apache-2.0 OR MIT\r\n    by kwantam, Manish Goregaokar\r\nunicode-xid v0.2.4 licensed Apache-2.0 OR MIT\r\n    by erick.tryzelaar, kwantam, Manish Goregaokar\r\nusvg v0.22.0 licensed MPL-2.0\r\n    by Yevhenii Reizner\r\nweezl v0.1.7 licensed Apache-2.0 OR MIT\r\n    by HeroicKatora\r\nxmlparser v0.13.5 licensed Apache-2.0 OR MIT\r\n    by Evgeniy Reizner\r\nxmlwriter v0.1.0 licensed MIT\r\n    by Evgeniy Reizner\r\n\r\nTo generate the full text of the license for the license, please visit\r\nhttps://spdx.org/licenses/ and replace the license author in the source\r\ntext in any given license with the name of the author listed above."
        },
        {
          "name": "LICENSE-WINDOWS.txt",
          "type": "blob",
          "size": 10.39453125,
          "content": "[program] is based in part on the AZUL GUI toolkit (https://azul.rs),\r\nlicensed under the Mozilla Public License Version 2.0.\r\nThe AZUL GUI toolkit itself uses the following libraries:\r\n\r\nInflector v0.11.4 licensed BSD-2-Clause\r\n    by Josh Teeter\r\nadler v1.0.2 licensed 0BSD OR Apache-2.0 OR MIT\r\n    by Jonas Schievink\r\nalloc-no-stdlib v2.0.4 licensed BSD-3-Clause\r\n    by Daniel Reiter Horn\r\nalloc-stdlib v0.2.2 licensed BSD-3-Clause\r\n    by Daniel Reiter Horn\r\nallsorts v0.10.0 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\nallsorts-rental v0.5.6 licensed Apache-2.0 OR MIT\r\n    by Jameson Ernst\r\nallsorts_no_std v0.5.2 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\napp_units v0.7.1 licensed MPL-2.0\r\n    by The Servo Project Developers\r\narrayref v0.3.7 licensed BSD-2-Clause\r\n    by David Roundy\r\narrayvec v0.5.2 licensed Apache-2.0 OR MIT\r\n    by bluss\r\narrayvec v0.7.2 licensed Apache-2.0 OR MIT\r\n    by bluss\r\nazul-core v0.0.2 licensed MPL-2.0\r\n    by Felix Schütt\r\nazul-css v0.0.1 licensed MPL-2.0\r\n    by Felix Schütt\r\nazul-css-parser v0.0.1 licensed MPL-2.0\r\n    by Felix Schütt\r\nazul-desktop v0.0.5 licensed MPL-2.0\r\n    by Felix Schütt, The winit contributors\r\nazul-dll v0.0.1 licensed MPL-2.0\r\n    by Felix Schütt\r\nazul-layout v0.0.4 licensed MPL-2.0\r\n    by Felix Schütt\r\nazul-peek-poke v0.2.0 licensed Apache-2.0 OR MIT\r\n    by Dan Glastonbury\r\nazul-peek-poke-derive v0.2.1 licensed Apache-2.0 OR MIT\r\n    by Dan Glastonbury\r\nazul-simplecss v0.1.1 licensed MPL-2.0\r\n    by Reizner Evgeniy\r\nazul-text-layout v0.0.5 licensed MPL-2.0\r\n    by Felix Schütt\r\nazul-webrender v0.62.2 licensed MPL-2.0\r\n    by Glenn Watson\r\nazul-webrender-api v0.62.0 licensed MPL-2.0\r\n    by Glenn Watson\r\nazul-webrender-build v0.0.2 licensed MPL-2.0\r\n    by The Servo Project Developers\r\nazul-wr_malloc_size_of v0.0.1 licensed Apache-2.0 OR MIT\r\n    by The Servo Project Developers\r\nazulc v0.0.3 licensed MPL-2.0\r\n    by Felix Schütt\r\nbacktrace v0.3.67 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nbase64 v0.13.1 licensed Apache-2.0 OR MIT\r\n    by Alice Maz, Marshall Pierce\r\nbinary-space-partition v0.1.2 licensed MPL-2.0\r\n    by Dzmitry Malyshau\r\nbincode v1.3.3 licensed MIT\r\n    by Ty Overby, Francesco Mazzoli, David Tolnay, Zoey Riordan\r\nbitflags v1.3.2 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nbitreader v0.3.7 licensed Apache-2.0 OR MIT\r\n    by Ilkka Rauta\r\nbrotli-decompressor v2.3.4 licensed BSD-3-Clause OR MIT\r\n    by Daniel Reiter Horn, The Brotli Authors\r\nbytemuck v1.13.1 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Lokathor\r\nbyteorder v1.4.3 licensed MIT OR Unlicense\r\n    by Andrew Gallant\r\ncfg-if v1.0.0 licensed Apache-2.0 OR MIT\r\n    by Alex Crichton\r\nclipboard-win v2.2.0 licensed MIT\r\n    by Douman\r\nclipboard2 v0.1.1 licensed MIT\r\n    by Avi Weinstock, Felix Schütt\r\ncolor_quant v1.1.0 licensed MIT\r\n    by nwin\r\nconvert_case v0.4.0 licensed MIT\r\n    by David Purdum\r\ncrc32fast v1.3.2 licensed Apache-2.0 OR MIT\r\n    by Sam Rijs, Alex Crichton\r\ncstr v0.2.11 licensed MIT\r\n    by Xidorn Quan\r\ndata-url v0.1.1 licensed Apache-2.0 OR MIT\r\n    by Simon Sapin\r\nderive_more v0.99.17 licensed MIT\r\n    by Jelte Fennema\r\ndwrote v0.11.0 licensed MPL-2.0\r\n    by The Servo Project Developers, Vladimir Vukicevic\r\neither v1.8.1 licensed Apache-2.0 OR MIT\r\n    by bluss\r\nencoding_rs v0.8.32 licensed (Apache-2.0 OR MIT) AND BSD-3-Clause\r\n    by Henri Sivonen\r\netagere v0.2.7 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\neuclid v0.22.9 licensed Apache-2.0 OR MIT\r\n    by The Servo Project Developers\r\nfdeflate v0.3.0 licensed Apache-2.0 OR MIT\r\n    by The image-rs Developers\r\nfern v0.6.2 licensed MIT\r\n    by David Ross\r\nflate2 v1.0.23 licensed Apache-2.0 OR MIT\r\n    by Alex Crichton, Josh Triplett\r\nfloat-cmp v0.9.0 licensed MIT\r\n    by Mike Dilger\r\nfloat_next_after v0.1.5 licensed MIT\r\n    by Bronson Brown-deVost\r\nfxhash v0.2.1 licensed Apache-2.0 OR MIT\r\n    by cbreeden\r\ngif v0.11.4 licensed Apache-2.0 OR MIT\r\n    by nwin\r\ngif v0.12.0 licensed Apache-2.0 OR MIT\r\n    by The image-rs Developers\r\ngl-context-loader v0.1.8 licensed Apache-2.0 OR MIT\r\n    by Felix Schütt, The Servo Project Developers\r\nglyph-names v0.1.0 licensed BSD-3-Clause\r\n    by YesLogic Pty. Ltd.\r\nhighway v0.8.1 licensed MIT\r\n    by Nick Babcock\r\nimage v0.24.6 licensed MIT\r\n    by The image-rs Developers\r\nitertools v0.8.2 licensed Apache-2.0 OR MIT\r\n    by bluss\r\njpeg-decoder v0.2.6 licensed Apache-2.0 OR MIT\r\n    by The image-rs Developers\r\njpeg-decoder v0.3.0 licensed Apache-2.0 OR MIT\r\n    by The image-rs Developers\r\nkurbo v0.8.3 licensed Apache-2.0 OR MIT\r\n    by Raph Levien\r\nlazy_static v1.4.0 licensed Apache-2.0 OR MIT\r\n    by Marvin Löbel\r\nlibc v0.2.142 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nlibm v0.2.6 licensed Apache-2.0 OR MIT\r\n    by Jorge Aparicio\r\nlog v0.4.17 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nlyon v0.17.10 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nlyon_algorithms v0.17.7 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nlyon_geom v0.17.7 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nlyon_path v0.17.7 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nlyon_tessellation v0.17.10 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nmalloc_size_of_derive v0.1.2 licensed Apache-2.0 OR MIT\r\n    by The Servo Project Developers\r\nmemchr v2.5.0 licensed MIT OR Unlicense\r\n    by Andrew Gallant, bluss\r\nmemoffset v0.8.0 licensed MIT\r\n    by Gilad Naaman\r\nminiz_oxide v0.4.4 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Frommi, oyvindln\r\nminiz_oxide v0.5.4 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Frommi, oyvindln\r\nminiz_oxide v0.6.2 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Frommi, oyvindln\r\nminiz_oxide v0.7.1 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Frommi, oyvindln\r\nmmapio v0.9.1 licensed Apache-2.0 OR MIT\r\n    by henrylee2cn, dignifiedquire, Dan Burkert\r\nnum-integer v0.1.45 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nnum-rational v0.4.1 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nnum-traits v0.2.15 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nnum_cpus v1.15.0 licensed Apache-2.0 OR MIT\r\n    by Sean McArthur\r\nouroboros v0.9.5 licensed Apache-2.0 OR MIT\r\n    by Joshua Maros\r\nouroboros_macro v0.9.5 licensed Apache-2.0 OR MIT\r\n    by Joshua Maros\r\npico-args v0.4.2 licensed MIT\r\n    by Evgeniy Reizner\r\nplane-split v0.17.1 licensed MPL-2.0\r\n    by Dzmitry Malyshau\r\npng v0.17.8 licensed Apache-2.0 OR MIT\r\n    by The image-rs Developers\r\nproc-macro-error v1.0.4 licensed Apache-2.0 OR MIT\r\n    by CreepySkeleton\r\nproc-macro-error-attr v1.0.4 licensed Apache-2.0 OR MIT\r\n    by CreepySkeleton\r\nproc-macro2 v1.0.56 licensed Apache-2.0 OR MIT\r\n    by David Tolnay, Alex Crichton\r\nquote v1.0.26 licensed Apache-2.0 OR MIT\r\n    by David Tolnay\r\nraw-window-handle v0.5.2 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Osspial\r\nrayon v1.7.0 licensed Apache-2.0 OR MIT\r\n    by Niko Matsakis, Josh Stone\r\nrayon-core v1.11.0 licensed Apache-2.0 OR MIT\r\n    by Niko Matsakis, Josh Stone\r\nrctree v0.4.0 licensed MIT\r\n    by Simon Sapin, Evgeniy Reizner\r\nrental-impl v0.5.5 licensed Apache-2.0 OR MIT\r\n    by Jameson Ernst\r\nresvg v0.22.0 licensed MPL-2.0\r\n    by Yevhenii Reizner\r\nrgb v0.8.36 licensed MIT\r\n    by Kornel Lesiński\r\nroxmltree v0.14.1 licensed Apache-2.0 OR MIT\r\n    by Evgeniy Reizner\r\nrust-fontconfig v0.1.5 licensed MIT\r\n    by Felix Schütt\r\nrustc-demangle v0.1.23 licensed Apache-2.0 OR MIT\r\n    by Alex Crichton\r\nrustc-hash v1.1.0 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\nsafe_arch v0.5.2 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Lokathor\r\nscopeguard v1.1.0 licensed Apache-2.0 OR MIT\r\n    by bluss\r\nserde v1.0.160 licensed Apache-2.0 OR MIT\r\n    by Erick Tryzelaar, David Tolnay\r\nserde_bytes v0.11.9 licensed Apache-2.0 OR MIT\r\n    by David Tolnay\r\nserde_derive v1.0.160 licensed Apache-2.0 OR MIT\r\n    by Erick Tryzelaar, David Tolnay\r\nsid v0.6.1 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nsimd-adler32 v0.3.5 licensed MIT\r\n    by Marvin Countryman\r\nsimplecss v0.2.1 licensed Apache-2.0 OR MIT\r\n    by Reizner Evgeniy\r\nsiphasher v0.3.10 licensed Apache-2.0 OR MIT\r\n    by Frank Denis\r\nsmallvec v1.10.0 licensed Apache-2.0 OR MIT\r\n    by The Servo Project Developers\r\nstable_deref_trait v1.2.0 licensed Apache-2.0 OR MIT\r\n    by Robert Grosse\r\nstrfmt v0.1.6 licensed MIT\r\n    by Garrett Berg\r\nsvg_fmt v0.4.1 licensed Apache-2.0 OR MIT\r\n    by Nicolas Silva\r\nsvgtypes v0.8.2 licensed Apache-2.0 OR MIT\r\n    by Yevhenii Reizner\r\nsyn v1.0.109 licensed Apache-2.0 OR MIT\r\n    by David Tolnay\r\nsyn v2.0.15 licensed Apache-2.0 OR MIT\r\n    by David Tolnay\r\nsynstructure v0.12.6 licensed MIT\r\n    by Nika Layzell\r\ntiff v0.8.1 licensed MIT\r\n    by The image-rs Developers\r\ntime v0.1.45 licensed Apache-2.0 OR MIT\r\n    by The Rust Project Developers\r\ntiny-skia v0.6.6 licensed BSD-3-Clause\r\n    by Yevhenii Reizner\r\ntinyfiledialogs v3.9.1 licensed zlib-acknowledgement\r\n    by Guillaume Vareille, Josh Matthews\r\ntinyvec v1.6.0 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Lokathor\r\ntinyvec_macros v0.1.1 licensed Apache-2.0 OR MIT OR Zlib\r\n    by Soveu\r\ntracy-rs v0.1.2 licensed MPL-2.0\r\n    by Glenn Watson\r\nttf-parser v0.15.2 licensed Apache-2.0 OR MIT\r\n    by Yevhenii Reizner\r\nucd-trie v0.1.5 licensed Apache-2.0 OR MIT\r\n    by Andrew Gallant\r\nunicode-canonical-combining-class v0.2.0 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\nunicode-general-category v0.3.0 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\nunicode-general-category v0.5.1 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\nunicode-ident v1.0.8 licensed (MIT OR Apache-2.0) AND Unicode-DFS-2016\r\n    by David Tolnay\r\nunicode-joining-type v0.5.0 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\nunicode-joining-type v0.6.0 licensed Apache-2.0\r\n    by YesLogic Pty. Ltd.\r\nunicode-normalization v0.1.22 licensed Apache-2.0 OR MIT\r\n    by kwantam, Manish Goregaokar\r\nunicode-xid v0.2.4 licensed Apache-2.0 OR MIT\r\n    by erick.tryzelaar, kwantam, Manish Goregaokar\r\nusvg v0.22.0 licensed MPL-2.0\r\n    by Yevhenii Reizner\r\nweezl v0.1.7 licensed Apache-2.0 OR MIT\r\n    by HeroicKatora\r\nwinapi v0.3.9 licensed Apache-2.0 OR MIT\r\n    by Peter Atashian\r\nwio v0.2.2 licensed Apache-2.0 OR MIT\r\n    by Peter Atashian\r\nxmlparser v0.13.5 licensed Apache-2.0 OR MIT\r\n    by Evgeniy Reizner\r\nxmlwriter v0.1.0 licensed MIT\r\n    by Evgeniy Reizner\r\n\r\nTo generate the full text of the license for the license, please visit\r\nhttps://spdx.org/licenses/ and replace the license author in the source\r\ntext in any given license with the name of the author listed above."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.8642578125,
          "content": "# Azul - Desktop GUI framework\r\n\r\n<!-- [START badges] -->\r\n[![CI](https://github.com/fschutt/azul/actions/workflows/rust.yml/badge.svg)](https://github.com/fschutt/azul/actions/workflows/rust.yml)\r\n[![Coverage Status](https://coveralls.io/repos/github/fschutt/azul/badge.svg?branch=master)](https://coveralls.io/github/fschutt/azul?branch=master)\r\n[![LICENSE](https://img.shields.io/badge/license-MPL--2.0-blue.svg)](LICENSE)\r\n[![Rust Compiler Version](https://img.shields.io/badge/rustc-1.58%20stable-blue.svg)]()\r\n[![dependency status](https://deps.rs/repo/github/fschutt/azul/status.svg)](https://deps.rs/repo/github/fschutt/azul)\r\n<!-- [END badges] -->\r\n\r\n> Azul is a free, functional, reactive GUI framework for Rust, C and C++,\r\nbuilt using the WebRender rendering engine and a CSS / HTML-like document\r\nobject model for rapid development of beautiful, native desktop applications\r\n\r\n###### [Website](https://azul.rs/) | [Releases](https://azul.rs/releases) | [User guide](https://azul.rs/guide) | [API documentation](https://azul.rs/api) | [Video demo](https://www.youtube.com/watch?v=kWL0ehf4wwI) | [Matrix Chat](https://discord.gg/nxUmsCG)\r\n\r\n## Features\r\n\r\nAzul uses [webrender](https://github.com/servo/webrender) (the rendering engine behind \r\nFirefox) to render your UI, so it supports lots of common CSS features like:\r\n\r\n- gradients (linear, radial, conic)\r\n- box shadows\r\n- SVG filters\r\n- composition operators (multiply, darken, etc.)\r\n- border styling\r\n- border-radii\r\n- scrolling / automatic overflow\r\n- CSS transforms\r\n\r\nSee the [list of supported CSS keys / values](https://azul.rs/guide/1.0.0-alpha1/CSSstyling) for more info.\r\n\r\nOn top of that, Azul features...\r\n\r\n- lots of built-in widgets ([Button](https://azul.rs/api/1.0.0-alpha1#st.Button), [TextInput](https://azul.rs/api/1.0.0-alpha1#st.TextInput), [CheckBox](https://azul.rs/api/1.0.0-alpha1#st.CheckBox), [ColorInput](https://azul.rs/api/1.0.0-alpha1#st.ColorInput), [TextInput](https://azul.rs/api/1.0.0-alpha1#st.TextInput), [NumberInput](https://azul.rs/api/1.0.0-alpha1#st.NumberInput))\r\n- embedding OpenGL textures\r\n- simplified HTML-like relative/absolute layout system based on CSS flexbox\r\n- 60+ FPS animations via [Animation](https://azul.rs/api/1.0.0-alpha1#st.Animation) API\r\n- cross-platform native dialogs\r\n- cross-platform text shaping and rendering\r\n- SVG parsing and rendering\r\n- shape tesselation for rendering large numbers of 2D lines, circles, rects, shapes, etc. in a single draw call\r\n- managing off-main-thread tasks for I/O\r\n- dynamic linking via shared library\\*\r\n- usable from Rust, C, C++ and Python via auto-generated API bindings\\**\r\n- HTML-to-Rust compilation for fast prototyping / hot reload\r\n\r\n\\* static linking not yet available\r\n\r\n\\** C++ bindings and Python are not yet stabilized and might not work depending\r\non the branch you're using. They will be stabilized before the release.\r\n\r\n## Screenshots \r\n\r\n![image](https://user-images.githubusercontent.com/12084016/129535820-ca2b56a6-fdb5-4d0d-b043-a7f5394339e9.png)\r\n![image](https://user-images.githubusercontent.com/12084016/129535780-69b9365b-ad87-439f-9d10-d416991de8fc.png)\r\n![image](https://user-images.githubusercontent.com/12084016/128639991-e98c0b92-66df-4ad8-973b-c9d45c68d5b3.png)\r\n![image](https://user-images.githubusercontent.com/12084016/126752996-1ec1f221-2b01-4f01-99c6-794640228d59.png)\r\n\r\n## Hello World\r\n\r\n### Python\r\n\r\n```py\r\nfrom azul import *\r\n\r\nclass DataModel:\r\n    def __init__(self, counter):\r\n        self.counter = counter\r\n\r\ndef render_dom(data, info):\r\n    \r\n    label = Dom.text(\"{}\".format(data.counter))\r\n    label.set_inline_style(\"font-size: 50px;\")\r\n    \r\n    button = Button(\"Increment counter\")\r\n    button.set_on_click(data, increment_counter)\r\n\r\n    dom = Dom.body()\r\n    dom.add_child(label)\r\n    dom.add_child(button.dom())\r\n\r\n    return dom.style(Css.empty())\r\n\r\ndef increment_counter(data, info):\r\n    data.counter += 1;\r\n    return Update.RefreshDom\r\n\r\napp = App(DataModel(5), AppConfig(LayoutSolver.Default))\r\napp.run(WindowCreateOptions(render_dom))\r\n```\r\n\r\n### Rust\r\n\r\n```rust\r\nuse azul::prelude::*;\r\nuse azul::widgets::{button::Button, label::Label};\r\n\r\nstruct DataModel {\r\n    counter: usize,\r\n}\r\n\r\nextern \"C\" \r\nfn render_dom(data: &mut RefAny, _: &mut LayoutInfo) -> StyledDom {\r\n\r\n    let data = data.downcast_ref::<DataModel>()?;\r\n\r\n    let label = Dom::text(format!(\"{}\", data.counter))\r\n        .with_inline_style(\"font-size: 50px;\");\r\n        \r\n    let button = Button::new(\"Increment counter\")\r\n        .onmouseup(increment_counter, data.clone());\r\n\r\n    Dom::body()\r\n    .with_child(label)\r\n    .with_child(button.dom())\r\n    .style(Css::empty())\r\n}\r\n\r\nextern \"C\" \r\nfn increment_counter(data: &mut RefAny, _: &mut CallbackInfo) -> Update {\r\n    let mut data = data.downcast_mut::<DataModel>()?;\r\n    data.counter += 1;\r\n    Update::RefreshDom // call render_dom() again\r\n}\r\n\r\nfn main() {\r\n    let initial_data = RefAny::new(DataModel { counter: 0 });\r\n    let app = App::new(initial_data, AppConfig::default());\r\n    app.run(WindowCreateOptions::new(render_dom));\r\n}\r\n```\r\n\r\n### C\r\n\r\n```c\r\n#include \"azul.h\"\r\n\r\ntypedef struct {\r\n    uint32_t counter;\r\n} DataModel;\r\n\r\nvoid DataModel_delete(DataModel* restrict A) { }\r\nAZ_REFLECT(DataModel, DataModel_delete);\r\n\r\nAzStyledDom render_dom(AzRefAny* data, AzLayoutInfo* info) {\r\n\r\n    DataModelRef d = DataModelRef_create(data);\r\n    if !(DataModel_downcastRef(data, &d)) {\r\n        return AzStyledDom_empty();\r\n    }\r\n    \r\n    char buffer [20];\r\n    int written = snprintf(buffer, 20, \"%d\", d->counter);\r\n    AzString const labelstring = AzString_copyFromBytes(&buffer, 0, written);\r\n    AzDom label = AzDom_text(labelstring);\r\n    AzString const inline_css = AzString_fromConstStr(\"font-size: 50px;\");\r\n    AzDom_setInlineStyle(&label, inline_css);\r\n    \r\n    AzString const buttontext = AzString_fromConstStr(\"Increment counter\");\r\n    AzButton button = AzButton_new(buttontext, AzRefAny_clone(data));\r\n    AzButton_setOnClick(&button, incrementCounter);\r\n\r\n    AzDom body = Dom_body();\r\n    AzDom_addChild(body, AzButton_dom(&button));\r\n    AzDom_addChild(body, label);\r\n    \r\n    AzCss global_css = AzCss_empty();\r\n    return AzDom_style(body, global_css);\r\n}\r\n\r\nUpdate incrementCounter(RefAny* data, CallbackInfo* event) {\r\n    DataModelRefMut d = DataModelRefMut_create(data);\r\n    if !(DataModel_downcastRefMut(data, &d)) {\r\n        return Update_DoNothing;\r\n    }\r\n    d->ptr.counter += 1;\r\n    DataModelRefMut_delete(&d);\r\n    return Update_RefreshDom;\r\n}\r\n\r\nint main() {\r\n    DataModel model = { .counter = 5 };\r\n    AzApp app = AzApp_new(DataModel_upcast(model), AzAppConfig_default());\r\n    AzApp_run(app, AzWindowCreateOptions_new(render_dom));\r\n    return 0;\r\n}\r\n```\r\n\r\n## License\r\n\r\nAzul is licensed under the MPL-2.0. Which means that yes, you can build \r\nproprietary applications using azul without having to publish your code: \r\nyou only have to publish changes made to *the library itself*.\r\n\r\nCopyright 2017 - current Felix Schütt\r\n"
        },
        {
          "name": "api.json",
          "type": "blob",
          "size": 874.1103515625,
          "content": "{\n    \"1.0.0-alpha1\": {\n        \"app\": {\n            \"doc\": \"`App` construction and configuration\",\n            \"classes\": {\n                \"App\": {\n                    \"external\": \"azul_impl::app::AzAppPtr\",\n                    \"is_boxed_object\": true,\n                    \"doc\": \"Main application class\",\n                    \"struct_fields\": [\n                        {\"ptr\": {\"type\": \"*const c_void\"}},\n                        {\"run_destructor\": {\"type\": \"bool\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"doc\":\"Creates a new App instance from the given `AppConfig`\",\n                            \"fn_args\": [\n                                {\"data\": \"RefAny\", \"doc\": \"The initialized data model of the application, will be passed to the `LayoutCallback` of the active windows\"},\n                                {\"config\": \"AppConfig\", \"doc\": \"Additional configuration on how the global application should behave\"}\n                            ],\n                            \"fn_body\": \"azul_impl::app::AzAppPtr::new(data, config)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"add_window\": {\n                            \"doc\": \"Spawn a new window on the screen when the app is run.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"window\": \"WindowCreateOptions\", \"doc\": \"New window, note that this will **not** be spawned as the root window\"}\n                            ],\n                            \"fn_body\":\"app.add_window(window)\"\n                        },\n                        \"add_image\": {\n                            \"doc\": \"Adds a new image identified by an ID to the image cache\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"id\": \"String\"},\n                                {\"image\": \"ImageRef\"}\n                            ],\n                            \"fn_body\": \"app.add_image(id, image)\"\n                        },\n                        \"get_monitors\": {\n                            \"doc\": \"Returns a list of monitors - useful for setting the monitor that a window should spawn on.\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"MonitorVec\", \"doc\": \"List of currently attached monitors, note that this `Vec` will be empty on wasm32\"},\n                            \"fn_body\":\"app.get_monitors()\"\n                        },\n                        \"run\": {\n                            \"doc\": \"Runs the application. Due to platform restrictions (specifically `WinMain` on Windows), this function never returns.\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"window\": \"WindowCreateOptions\", \"doc\": \"Initial state of the root (main) window of the application\"}\n                            ],\n                            \"fn_body\":\"app.run(window)\"\n                        }\n                    }\n                },\n                \"AppConfig\": {\n                    \"external\": \"azul_impl::resources::AppConfig\",\n                    \"doc\": \"Configuration for optional features, such as whether to enable logging or panic hooks\",\n                    \"struct_fields\": [\n                        {\"layout_solver\": {\"type\": \"LayoutSolver\", \"doc\": \"Which layout solver version to use, necessary so that future upgrades don't break the layout of old programs\"}},\n                        {\"log_level\": {\"type\": \"AppLogLevel\", \"doc\": \"If enabled, logs error and info messages\"}},\n                        {\"enable_visual_panic_hook\": {\"type\": \"bool\", \"doc\": \"If the app crashes / panics, a window with a message box pops up\"}},\n                        {\"enable_logging_on_panic\": {\"type\": \"bool\", \"doc\": \"If set, a backtrace + error information gets logged to stdout (if the log_level is not `LogLevel::Off`)\"}},\n                        {\"enable_tab_navigation\": {\"type\": \"bool\", \"doc\": \"Whether keyboard navigation should be enabled\"}},\n                        {\"system_callbacks\": {\"type\": \"SystemCallbacks\", \"doc\": \"External callbacks to create a thread or get the curent time\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"doc\": \"Constructs a default `AppConfig`, uses the layout solver currently available\",\n                            \"fn_args\": [\n                                {\"layout_solver\": \"LayoutSolver\"}\n                            ],\n                            \"fn_body\": \"AzAppConfig::new(layout_solver)\"\n                        }\n                    }\n                },\n                \"AppLogLevel\": {\n                    \"doc\": \"Configuration to set which messages should be logged.\",\n                    \"external\": \"azul_impl::resources::AppLogLevel\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Off\": {\"doc\": \"No logging\"}},\n                        {\"Error\": {\"doc\": \"Log errors\"}},\n                        {\"Warn\": {\"doc\": \"Log warnings\"}},\n                        {\"Info\": {\"doc\": \"Log informational messages\"}},\n                        {\"Debug\": {\"doc\": \"Log debug messages\"}},\n                        {\"Trace\": {\"doc\": \"Log tracing information\"}}\n                    ]\n                },\n                \"LayoutSolver\": {\n                    \"external\": \"azul_impl::resources::LayoutSolverVersion\",\n                    \"doc\": \"Version of the layout solver to use - future binary versions of azul may have more fields here, necessary so that old compiled applications don't break with newer releases of azul. Newer layout versions are opt-in only.\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Default\": {\"doc\": \"Default, current layout solver version\"}}\n                    ]\n                },\n                \"SystemCallbacks\": {\n                    \"external\": \"azul_impl::task::ExternalSystemCallbacks\",\n                    \"doc\": \"External system callbacks to get the system time or create / manage threads\",\n                    \"struct_fields\": [\n                        {\"create_thread_fn\": {\"type\": \"CreateThreadFn\"}},\n                        {\"get_system_time_fn\": {\"type\": \"GetSystemTimeFn\"}}\n                    ],\n                    \"constructors\": {\n                        \"library_internal\": {\n                            \"doc\": \"Use the default, library-internal callbacks instead of providing your own\",\n                            \"fn_args\": [\n                            ],\n                            \"fn_body\": \"AzSystemCallbacks::rust_internal()\"\n                        }\n                    }\n                }\n            }\n        },\n        \"window\": {\n            \"doc\": \"Window creation / startup configuration\",\n            \"classes\": {\n                \"WindowCreateOptions\": {\n                    \"external\": \"azul_core::window::WindowCreateOptions\",\n                    \"doc\": \"Options on how to initially create the window\",\n                    \"struct_fields\": [\n                        {\"state\": {\"type\": \"WindowState\", \"doc\": \"Initial state of the window on the first frame\"}},\n                        {\"size_to_content\": {\"type\": \"bool\", \"doc\": \"If set, the first UI redraw will be called with a size of (0, 0) and the window size depends on the size of the overflowing UI. This is good for windows that do not want to take up unnecessary extra space\"}},\n                        {\"renderer_type\": {\"type\": \"OptionRendererOptions\", \"doc\": \"If not `None`, azul will try to create a window with the specific renderer type and **crash** if the renderer is not available for whatever reason\"}},\n                        {\"theme\": {\"type\": \"OptionWindowTheme\", \"doc\": \"Initially the `theme` on the `WindowState` is set to the OS theme - use this field to override the operating systems `Dark` or `Light` mode\"}},\n                        {\"create_callback\": {\"type\": \"OptionCallback\", \"doc\": \"Callback to run **once** when the window is initially created\"}},\n                        {\"hot_reload\": {\"type\": \"bool\", \"doc\": \"If set to true, will hot-reload the UI every 200ms. Default: false\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"doc\": \"Creates a new window configuration with a custom layout callback\",\n                            \"fn_args\":[\n                                {\"layout_callback\": \"LayoutCallbackType\", \"doc\": \"The callback to call when the UI of the window should be rendered\"}\n                            ],\n                            \"fn_body\":\"AzWindowCreateOptions::new(layout_callback)\"\n                        }\n                    }\n                },\n                \"RendererOptions\": {\n                    \"doc\": \"Force a specific renderer: note that azul will **crash** on startup if the `RendererOptions` are not satisfied.\",\n                    \"external\": \"azul_core::window::RendererOptions\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"vsync\": {\"type\": \"Vsync\", \"doc\": \"Force the renderer to enable VSync. Set this only if your application can't run without VSync.\"}},\n                        {\"srgb\": {\"type\": \"Srgb\", \"doc\": \"Force the renderer to enable SRGB (OpenGL extension). Set this only if your application can't run without correct SRGB handling and color correctness is a priority.\"}},\n                        {\"hw_accel\": {\"type\": \"HwAcceleration\", \"doc\": \"Force the renderer to enable hardware acceleration. Set this only if your application can't run without hardware acceleration (ex. for games).\"}}\n                    ]\n                },\n                \"Vsync\": {\n                    \"doc\": \"Whether the renderer has VSync enabled\",\n                    \"external\": \"azul_core::window::Vsync\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Enabled\": {}},\n                        {\"Disabled\": {}},\n                        {\"DontCare\": {}}\n                    ]\n                },\n                \"Srgb\": {\n                    \"doc\": \"Does the renderer render in SRGB color space? By default, azul tries to set it to `Enabled` and falls back to `Disabled` if the OpenGL context can't be initialized properly\",\n                    \"external\": \"azul_core::window::Srgb\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Enabled\": {}},\n                        {\"Disabled\": {}},\n                        {\"DontCare\": {}}\n                    ]\n                },\n                \"HwAcceleration\": {\n                    \"doc\": \"Does the renderer render using hardware acceleration? By default, azul tries to set it to `Enabled` and falls back to `Disabled` if the OpenGL context can't be initialized properly\",\n                    \"external\": \"azul_core::window::HwAcceleration\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Enabled\": {}},\n                        {\"Disabled\": {}},\n                        {\"DontCare\": {}}\n                    ]\n                },\n                \"LayoutPoint\": {\n                    \"doc\": \"Offset in physical pixels (integer units)\",\n                    \"external\": \"azul_impl::css::LayoutPoint\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"x\": {\"type\": \"isize\", \"doc\": \"**Note**: can be negative\"}},\n                        {\"y\": {\"type\": \"isize\", \"doc\": \"**Note**: can be negative\"}}\n                    ]\n                },\n                \"LayoutSize\": {\n                    \"doc\": \"Size in physical pixels (integer units)\",\n                    \"external\": \"azul_impl::css::LayoutSize\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"width\": {\"type\": \"isize\", \"doc\": \"**Note**: can be negative\"}},\n                        {\"height\": {\"type\": \"isize\", \"doc\": \"**Note**: can be negative\"}}\n                    ]\n                },\n                \"LayoutRect\": {\n                    \"external\": \"azul_impl::css::LayoutRect\",\n                    \"doc\": \"Represents a rectangle in physical pixels (integer units)\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"origin\": {\"type\": \"LayoutPoint\", \"doc\": \"**Note**: can be negative\"}},\n                        {\"size\": {\"type\": \"LayoutSize\", \"doc\": \"**Note**: can be negative\"}}\n                    ]\n                },\n                \"RawWindowHandle\": {\n                    \"doc\": \"Raw platform handle, for integration in / with other toolkits and custom non-azul window extensions\",\n                    \"external\": \"azul_core::window::RawWindowHandle\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"IOS\": {\"type\": \"IOSHandle\"}},\n                        {\"MacOS\": {\"type\": \"MacOSHandle\"}},\n                        {\"Xlib\": {\"type\": \"XlibHandle\"}},\n                        {\"Xcb\": {\"type\": \"XcbHandle\"}},\n                        {\"Wayland\": {\"type\": \"WaylandHandle\"}},\n                        {\"Windows\": {\"type\": \"WindowsHandle\"}},\n                        {\"Web\": {\"type\": \"WebHandle\"}},\n                        {\"Android\": {\"type\": \"AndroidHandle\"}},\n                        {\"Unsupported\": {}}\n                    ]\n                },\n                \"IOSHandle\": {\n                    \"external\": \"azul_core::window::IOSHandle\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"ui_window\": {\"type\": \"*mut c_void\"}},\n                        {\"ui_view\": {\"type\": \"*mut c_void\"}},\n                        {\"ui_view_controller\": {\"type\": \"*mut c_void\"}}\n                    ]\n                },\n                \"MacOSHandle\": {\n                    \"external\": \"azul_core::window::MacOSHandle\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"ns_window\": {\"type\": \"*mut c_void\"}},\n                        {\"ns_view\": {\"type\": \"*mut c_void\"}}\n                    ]\n                },\n                \"XlibHandle\": {\n                    \"external\": \"azul_core::window::XlibHandle\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"window\": {\"type\": \"u64\", \"doc\": \"An Xlib Window\"}},\n                        {\"display\": {\"type\": \"*mut c_void\", \"doc\": \"A pointer to an Xlib `Display`\"}}\n                    ]\n                },\n                \"XcbHandle\": {\n                    \"external\": \"azul_core::window::XcbHandle\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"window\": {\"type\": \"u32\", \"doc\": \"An X11 `xcb_window_t`\"}},\n                        {\"connection\": {\"type\": \"*mut c_void\", \"doc\": \"A pointer to an X server `xcb_connection_t`\"}}\n                    ]\n                },\n                \"WaylandHandle\": {\n                    \"external\": \"azul_core::window::WaylandHandle\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"surface\": {\"type\": \"*mut c_void\", \"doc\": \"A pointer to a `wl_surface`\"}},\n                        {\"display\": {\"type\": \"*mut c_void\", \"doc\": \"A pointer to a `wl_display`\"}}\n                    ]\n                },\n                \"WindowsHandle\": {\n                    \"external\": \"azul_core::window::WindowsHandle\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"hwnd\": {\"type\": \"*mut c_void\", \"doc\": \"Pointer to a `HWND` handle\"}},\n                        {\"hinstance\": {\"type\": \"*mut c_void\", \"doc\": \"Pointer to a `HINSTANCE` associated with this windows `HWND`.\"}}\n                    ]\n                },\n                \"WebHandle\": {\n                    \"external\": \"azul_core::window::WebHandle\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"id\": {\"type\": \"u32\", \"doc\": \"An ID value inserted into the data attributes of the canvas element. Set to 0 if invalid.\"}}\n                    ]\n                },\n                \"AndroidHandle\": {\n                    \"external\": \"azul_core::window::AndroidHandle\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"a_native_window\": {\"type\": \"*mut c_void\", \"doc\": \"A pointer to an `ANativeWindow`\"}}\n                    ]\n                },\n                \"XWindowType\": {\n                    \"doc\": \"X11 window hint: Type of window\",\n                    \"external\": \"azul_core::window::XWindowType\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"Desktop\": {\"doc\": \"A desktop feature. This can include a single window containing desktop icons with the same dimensions as the screen, allowing the desktop environment to have full control of the desktop, without the need for proxying root window clicks\"}},\n                        {\"Dock\": {\"doc\": \"A dock or panel feature. Typically a Window Manager would keep such windows on top of all other windows\"}},\n                        {\"Toolbar\": {\"doc\": \"Toolbar windows. \\\"Torn off\\\" from the main application\"}},\n                        {\"Menu\": {\"doc\": \"Pinnable menu windows. \\\"Torn off\\\" from the main application\"}},\n                        {\"Utility\": {\"doc\": \"A small persistent utility window, such as a palette or toolbox\"}},\n                        {\"Splash\": {\"doc\": \"The window is a splash screen displayed as an application is starting up\"}},\n                        {\"Dialog\": {\"doc\": \"This is a dialog window\"}},\n                        {\"DropdownMenu\": {\"doc\": \"A dropdown menu that usually appears when the user clicks on an item in a menu bar. This property is typically used on override-redirect windows.\"}},\n                        {\"PopupMenu\": {\"doc\": \"A popup menu that usually appears when the user right clicks on an object. This property is typically used on override-redirect windows.\"}},\n                        {\"Tooltip\": {\"doc\": \"A tooltip window. Usually used to show additional information when hovering over an object with the cursor. This property is typically used on override-redirect windows.\"}},\n                        {\"Notification\": {\"doc\": \"The window is a notification. This property is typically used on override-redirect windows.\"}},\n                        {\"Combo\": {\"doc\": \"This should be used on the windows that are popped up by combo boxes. This property is typically used on override-redirect windows.\"}},\n                        {\"Dnd\": {\"doc\": \"This indicates the the window is being dragged. This property is typically used on override-redirect windows.\"}},\n                        {\"Normal\": {\"doc\": \" This is a normal, top-level window\"}}\n                    ]\n                },\n                \"PhysicalPositionI32\": {\n                    \"doc\": \"Same as `LayoutPoint`, but uses `i32` instead of `isize`\",\n                    \"external\": \"azul_core::window::PhysicalPositionI32\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"x\": {\"type\": \"i32\"}},\n                        {\"y\": {\"type\": \"i32\"}}\n                    ]\n                },\n                \"PhysicalSizeU32\": {\n                    \"doc\": \"Same as `LayoutPoint`, but uses `u32` instead of `isize`\",\n                    \"external\": \"azul_core::window::PhysicalSizeU32\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"width\": {\"type\": \"u32\"}},\n                        {\"height\": {\"type\": \"u32\"}}\n                    ]\n                },\n                \"LogicalRect\": {\n                    \"doc\": \"Logical rectangle area (can differ based on HiDPI settings). Usually this is what you'd want for hit-testing and positioning elements.\",\n                    \"external\": \"azul_core::window::LogicalRect\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"origin\": {\"type\": \"LogicalPosition\"}},\n                        {\"size\": {\"type\": \"LogicalSize\"}}\n                    ]\n                },\n                \"LogicalPosition\": {\n                    \"doc\": \"Logical position (can differ based on HiDPI settings). Usually this is what you'd want for hit-testing and positioning elements.\",\n                    \"external\": \"azul_core::window::LogicalPosition\",\n                    \"derive\": [\"Default\", \"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"x\": {\"type\": \"f32\"}},\n                        {\"y\": {\"type\": \"f32\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"fn_args\":[\n                                {\"x\": \"f32\"},\n                                {\"y\": \"f32\"}\n                            ],\n                            \"fn_body\": \"AzLogicalPosition::new(x, y)\"\n                        },\n                        \"zero\": {\n                            \"fn_args\":[\n                            ],\n                            \"fn_body\": \"AzLogicalPosition::zero()\"\n                        }\n                    }\n                },\n                \"LogicalSize\": {\n                    \"doc\": \"A size in \\\"logical\\\" (non-HiDPI-adjusted) pixels in floating-point units\",\n                    \"external\": \"azul_core::window::LogicalSize\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"width\": {\"type\": \"f32\"}},\n                        {\"height\": {\"type\": \"f32\"}}\n                    ],\n                    \"functions\": {\n                        \"to_physical\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"hidpi_factor\": \"f32\"}\n                            ],\n                            \"returns\": {\"type\": \"PhysicalSizeU32\"},\n                            \"fn_body\": \"logicalsize.to_physical(hidpi_factor)\"\n                        }\n                    }\n                },\n                \"IconKey\": {\n                    \"doc\": \"Unique hash of a window icon, so that azul does not have to compare the actual bytes to see wether the window icon has changed.\",\n                    \"external\": \"azul_core::window::IconKey\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"id\": {\"type\": \"usize\", \"doc\": \"Can be any number, just has to be unique to the application. You need to generate a new `IconKey` if the window icon of your application has changed.\"}}\n                    ]\n                },\n                \"SmallWindowIconBytes\": {\n                    \"doc\": \"Small (16x16x4) window icon, usually shown in the window titlebar\",\n                    \"external\": \"azul_core::window::SmallWindowIconBytes\",\n                    \"struct_fields\": [\n                        {\"key\": {\"type\": \"IconKey\", \"doc\": \"Key / hash of the window icon, so that azul can detect whether the icon has changed and notify the OS about the change.\"}},\n                        {\"rgba_bytes\": {\"type\": \"U8Vec\", \"doc\": \"Decoded bytes of the window icon, [32x32x4] bytes in length, rgba format\"}}\n                    ]\n                },\n                \"LargeWindowIconBytes\": {\n                    \"doc\": \"Large (32x32x4) window icon, usually used on high-resolution displays (instead of `SmallWindowIcon`)\",\n                    \"external\": \"azul_core::window::LargeWindowIconBytes\",\n                    \"struct_fields\": [\n                        {\"key\": {\"type\": \"IconKey\", \"doc\": \"Key / hash of the taskbar icon, so that azul can detect whether the icon has changed and notify the OS about the change.\"}},\n                        {\"rgba_bytes\": {\"type\": \"U8Vec\", \"doc\": \"Decoded bytes of the window icon, [32x32x4] bytes in length, rgba format\"}}\n                    ]\n                },\n                \"WindowIcon\": {\n                    \"doc\": \"Window \\\"favicon\\\", usually shown in the top left of the window on Windows\",\n                    \"external\": \"azul_core::window::WindowIcon\",\n                    \"enum_fields\": [\n                        {\"Small\": {\"type\": \"SmallWindowIconBytes\", \"doc\": \"Low-resolution version of the favicon\"}},\n                        {\"Large\": {\"type\": \"LargeWindowIconBytes\", \"doc\": \"High-resolution version of the favicon\"}}\n                    ]\n                },\n                \"TaskBarIcon\": {\n                    \"doc\": \"Application taskbar icon, 256x256x4 bytes in size\",\n                    \"external\": \"azul_core::window::TaskBarIcon\",\n                    \"struct_fields\": [\n                        {\"key\": {\"type\": \"IconKey\", \"doc\": \"Unique icon key so that azul can determine whether the application icon has changed and notify the OS about the change\"}},\n                        {\"rgba_bytes\": {\"type\": \"U8Vec\", \"doc\": \"Decoded bytes of the taskbar icon, 256x256x4 bytes in size, rgba format\"}}\n                    ]\n                },\n                \"VirtualKeyCode\": {\n                    \"doc\": \"Symbolic name for a keyboard key, does **not** take the keyboard locale into account\",\n                    \"external\": \"azul_core::window::VirtualKeyCode\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Key1\": {}},\n                        {\"Key2\": {}},\n                        {\"Key3\": {}},\n                        {\"Key4\": {}},\n                        {\"Key5\": {}},\n                        {\"Key6\": {}},\n                        {\"Key7\": {}},\n                        {\"Key8\": {}},\n                        {\"Key9\": {}},\n                        {\"Key0\": {}},\n                        {\"A\": {}},\n                        {\"B\": {}},\n                        {\"C\": {}},\n                        {\"D\": {}},\n                        {\"E\": {}},\n                        {\"F\": {}},\n                        {\"G\": {}},\n                        {\"H\": {}},\n                        {\"I\": {}},\n                        {\"J\": {}},\n                        {\"K\": {}},\n                        {\"L\": {}},\n                        {\"M\": {}},\n                        {\"N\": {}},\n                        {\"O\": {}},\n                        {\"P\": {}},\n                        {\"Q\": {}},\n                        {\"R\": {}},\n                        {\"S\": {}},\n                        {\"T\": {}},\n                        {\"U\": {}},\n                        {\"V\": {}},\n                        {\"W\": {}},\n                        {\"X\": {}},\n                        {\"Y\": {}},\n                        {\"Z\": {}},\n                        {\"Escape\": {}},\n                        {\"F1\": {}},\n                        {\"F2\": {}},\n                        {\"F3\": {}},\n                        {\"F4\": {}},\n                        {\"F5\": {}},\n                        {\"F6\": {}},\n                        {\"F7\": {}},\n                        {\"F8\": {}},\n                        {\"F9\": {}},\n                        {\"F10\": {}},\n                        {\"F11\": {}},\n                        {\"F12\": {}},\n                        {\"F13\": {}},\n                        {\"F14\": {}},\n                        {\"F15\": {}},\n                        {\"F16\": {}},\n                        {\"F17\": {}},\n                        {\"F18\": {}},\n                        {\"F19\": {}},\n                        {\"F20\": {}},\n                        {\"F21\": {}},\n                        {\"F22\": {}},\n                        {\"F23\": {}},\n                        {\"F24\": {}},\n                        {\"Snapshot\": {}},\n                        {\"Scroll\": {}},\n                        {\"Pause\": {}},\n                        {\"Insert\": {}},\n                        {\"Home\": {}},\n                        {\"Delete\": {}},\n                        {\"End\": {}},\n                        {\"PageDown\": {}},\n                        {\"PageUp\": {}},\n                        {\"Left\": {}},\n                        {\"Up\": {}},\n                        {\"Right\": {}},\n                        {\"Down\": {}},\n                        {\"Back\": {}},\n                        {\"Return\": {}},\n                        {\"Space\": {}},\n                        {\"Compose\": {}},\n                        {\"Caret\": {}},\n                        {\"Numlock\": {}},\n                        {\"Numpad0\": {}},\n                        {\"Numpad1\": {}},\n                        {\"Numpad2\": {}},\n                        {\"Numpad3\": {}},\n                        {\"Numpad4\": {}},\n                        {\"Numpad5\": {}},\n                        {\"Numpad6\": {}},\n                        {\"Numpad7\": {}},\n                        {\"Numpad8\": {}},\n                        {\"Numpad9\": {}},\n                        {\"NumpadAdd\": {}},\n                        {\"NumpadDivide\": {}},\n                        {\"NumpadDecimal\": {}},\n                        {\"NumpadComma\": {}},\n                        {\"NumpadEnter\": {}},\n                        {\"NumpadEquals\": {}},\n                        {\"NumpadMultiply\": {}},\n                        {\"NumpadSubtract\": {}},\n                        {\"AbntC1\": {}},\n                        {\"AbntC2\": {}},\n                        {\"Apostrophe\": {}},\n                        {\"Apps\": {}},\n                        {\"Asterisk\": {}},\n                        {\"At\": {}},\n                        {\"Ax\": {}},\n                        {\"Backslash\": {}},\n                        {\"Calculator\": {}},\n                        {\"Capital\": {}},\n                        {\"Colon\": {}},\n                        {\"Comma\": {}},\n                        {\"Convert\": {}},\n                        {\"Equals\": {}},\n                        {\"Grave\": {}},\n                        {\"Kana\": {}},\n                        {\"Kanji\": {}},\n                        {\"LAlt\": {}},\n                        {\"LBracket\": {}},\n                        {\"LControl\": {}},\n                        {\"LShift\": {}},\n                        {\"LWin\": {}},\n                        {\"Mail\": {}},\n                        {\"MediaSelect\": {}},\n                        {\"MediaStop\": {}},\n                        {\"Minus\": {}},\n                        {\"Mute\": {}},\n                        {\"MyComputer\": {}},\n                        {\"NavigateForward\": {}},\n                        {\"NavigateBackward\": {}},\n                        {\"NextTrack\": {}},\n                        {\"NoConvert\": {}},\n                        {\"OEM102\": {}},\n                        {\"Period\": {}},\n                        {\"PlayPause\": {}},\n                        {\"Plus\": {}},\n                        {\"Power\": {}},\n                        {\"PrevTrack\": {}},\n                        {\"RAlt\": {}},\n                        {\"RBracket\": {}},\n                        {\"RControl\": {}},\n                        {\"RShift\": {}},\n                        {\"RWin\": {}},\n                        {\"Semicolon\": {}},\n                        {\"Slash\": {}},\n                        {\"Sleep\": {}},\n                        {\"Stop\": {}},\n                        {\"Sysrq\": {}},\n                        {\"Tab\": {}},\n                        {\"Underline\": {}},\n                        {\"Unlabeled\": {}},\n                        {\"VolumeDown\": {}},\n                        {\"VolumeUp\": {}},\n                        {\"Wake\": {}},\n                        {\"WebBack\": {}},\n                        {\"WebFavorites\": {}},\n                        {\"WebForward\": {}},\n                        {\"WebHome\": {}},\n                        {\"WebRefresh\": {}},\n                        {\"WebSearch\": {}},\n                        {\"WebStop\": {}},\n                        {\"Yen\": {}},\n                        {\"Copy\": {}},\n                        {\"Paste\": {}},\n                        {\"Cut\": {}}\n                    ]\n                },\n                \"AcceleratorKey\": {\n                    \"doc\": \"Symbolic accelerator key (ctrl, alt, shift)\",\n                    \"external\": \"azul_core::window::AcceleratorKey\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Ctrl\": {}},\n                        {\"Alt\": {}},\n                        {\"Shift\": {}},\n                        {\"Key\": {\"type\": \"VirtualKeyCode\"}}\n                    ]\n                },\n                \"WindowSize\": {\n                    \"doc\": \"Minimum / maximum / current size of the window in logical dimensions\",\n                    \"external\": \"azul_core::window::WindowSize\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"dimensions\": {\"type\": \"LogicalSize\", \"doc\": \"Current dimensions in logical units\"}},\n                        {\"dpi\": {\"type\": \"u32\", \"doc\": \"Actual DPI factor (default: 96)\"}},\n                        {\"min_dimensions\": {\"type\": \"OptionLogicalSize\", \"doc\": \"Maximum size of the window in logical units\"}},\n                        {\"max_dimensions\": {\"type\": \"OptionLogicalSize\", \"doc\": \"Minimum size of the window in logical units\"}}\n                    ],\n                    \"functions\": {\n                        \"get_hidpi_factor\": {\n                            \"doc\": \"Returns the hidpi factor of the bounds\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"f32\"},\n                            \"fn_body\": \"windowsize.get_hidpi_factor()\"\n                        }\n                    }\n                },\n                \"WindowFlags\": {\n                    \"doc\": \"Boolean flags relating to the current window state\",\n                    \"external\": \"azul_core::window::WindowFlags\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"frame\": {\"type\": \"WindowFrame\", \"doc\": \"Is the window currently minimized, maximized, fullscreened or normal\"}},\n                        {\"is_about_to_close\": {\"type\": \"bool\", \"doc\": \"Is the window about to close on the next frame? Setting this to true will close the window.\"}},\n                        {\"has_decorations\": {\"type\": \"bool\", \"doc\": \"Does the window have decorations (close, minimize, maximize, title bar)?\"}},\n                        {\"is_visible\": {\"type\": \"bool\", \"doc\": \"Is the window currently visible?\"}},\n                        {\"is_always_on_top\": {\"type\": \"bool\", \"doc\": \"Is the window always on top?\"}},\n                        {\"is_resizable\": {\"type\": \"bool\", \"doc\": \"Whether the window is resizable\"}},\n                        {\"has_focus\": {\"type\": \"bool\", \"doc\": \"Whether the window is currently focused (changing this field will request user attention)\"}},\n                        {\"has_extended_window_frame\": {\"type\": \"bool\", \"doc\": \"Whether the window has an \\\"extended frame\\\", i.e. the title bar is not rendered and the maximize / minimize / close buttons bleed into the window content\"}},\n                        {\"has_blur_behind_window\": {\"type\": \"bool\", \"doc\": \"Whether the window has a background blur\"}},\n                        {\"smooth_scroll_enabled\": {\"type\": \"bool\", \"doc\": \"Is smooth scrolling enabled for this window?\"}},\n                        {\"autotab_enabled\": {\"type\": \"bool\", \"doc\": \"Is automatic TAB support enabled for this window?\"}}\n                    ]\n                },\n                \"WindowFrame\": {\n                    \"doc\": \"State of the window frame (minimized, maximized, fullscreen or normal window)\",\n                    \"external\": \"azul_core::window::WindowFrame\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Normal\": {}},\n                        {\"Minimized\": {}},\n                        {\"Maximized\": {}},\n                        {\"Fullscreen\": {}}\n                    ]\n                },\n                \"DebugState\": {\n                    \"doc\": \"Debugging information, will be rendered as an overlay on top of the UI\",\n                    \"external\": \"azul_core::window::DebugState\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"profiler_dbg\": {\"type\": \"bool\", \"doc\": \"Display the frame profiler on screen\"}},\n                        {\"render_target_dbg\": {\"type\": \"bool\", \"doc\": \"Display intermediate render targets on screen\"}},\n                        {\"texture_cache_dbg\": {\"type\": \"bool\", \"doc\": \"Display all texture cache pages on screen\"}},\n                        {\"gpu_time_queries\": {\"type\": \"bool\", \"doc\": \"Display GPU timing results\"}},\n                        {\"gpu_sample_queries\": {\"type\": \"bool\", \"doc\": \"Query the number of pixels that pass the depth test divided and show it in the profiler as a percentage of the number of pixels in the screen (window width times height)\"}},\n                        {\"disable_batching\": {\"type\": \"bool\", \"doc\": \"Render each quad with their own draw call.\\r\\nTerrible for performance but can help with understanding the drawing order when inspecting renderdoc or apitrace recordings\"}},\n                        {\"epochs\": {\"type\": \"bool\", \"doc\": \"Display the pipeline epochs\"}},\n                        {\"echo_driver_messages\": {\"type\": \"bool\", \"doc\": \"Print driver messages to stdout\"}},\n                        {\"show_overdraw\": {\"type\": \"bool\", \"doc\": \"Show an overlay displaying overdraw amount\"}},\n                        {\"gpu_cache_dbg\": {\"type\": \"bool\", \"doc\": \"Display the contents of GPU cache\"}},\n                        {\"texture_cache_dbg_clear_evicted\": {\"type\": \"bool\", \"doc\": \"Clear evicted parts of the texture cache for debugging purposes\"}},\n                        {\"picture_caching_dbg\": {\"type\": \"bool\", \"doc\": \"Show picture caching debug overlay\"}},\n                        {\"primitive_dbg\": {\"type\": \"bool\", \"doc\": \"Highlight all primitives with colors based on kind\"}},\n                        {\"zoom_dbg\": {\"type\": \"bool\", \"doc\": \"Draw a zoom widget showing part of the framebuffer zoomed in\"}},\n                        {\"small_screen\": {\"type\": \"bool\", \"doc\": \"Scale the debug renderer down for a smaller screen. This will disrupt any mapping between debug display items and page content, so shouldn't be used with overlays like the picture caching or primitive display\"}},\n                        {\"disable_opaque_pass\": {\"type\": \"bool\", \"doc\": \"Disable various bits of the WebRender pipeline, to help narrow down where slowness might be coming from\"}},\n                        {\"disable_alpha_pass\": {\"type\": \"bool\", \"doc\": \"Disable alpha\"}},\n                        {\"disable_clip_masks\": {\"type\": \"bool\", \"doc\": \"Disable all clip masks\"}},\n                        {\"disable_text_prims\": {\"type\": \"bool\", \"doc\": \"Disable text rendering\"}},\n                        {\"disable_gradient_prims\": {\"type\": \"bool\", \"doc\": \"Disable gradients\"}},\n                        {\"obscure_images\": {\"type\": \"bool\", \"doc\": \"Disable image rendering\"}},\n                        {\"glyph_flashing\": {\"type\": \"bool\", \"doc\": \"Taint the transparent area of the glyphs with a random opacity to easily see when glyphs are re-rasterized\"}},\n                        {\"smart_profiler\": {\"type\": \"bool\", \"doc\": \"The profiler only displays information that is out of the ordinary\"}},\n                        {\"invalidation_dbg\": {\"type\": \"bool\", \"doc\": \"Dump picture cache invalidation information to stdout\"}},\n                        {\"tile_cache_logging_dbg\": {\"type\": \"bool\", \"doc\": \"Print debug information about tile caches\"}},\n                        {\"profiler_capture\": {\"type\": \"bool\", \"doc\": \"Capture a profile of the frame to a file\"}},\n                        {\"force_picture_invalidation\": {\"type\": \"bool\", \"doc\": \"Force WebRender to render a new frame, even if WR can't determine that the display has changed\"}}\n                    ]\n                },\n                \"KeyboardState\": {\n                    \"doc\": \"Current keyboard state, stores what keys / characters have been pressed\",\n                    \"external\": \"azul_core::window::KeyboardState\",\n                    \"struct_fields\": [\n                        {\"current_char\": {\"type\": \"OptionChar\", \"doc\": \"Currently pressed `char` - (READONLY)\"}},\n                        {\"current_virtual_keycode\": {\"type\": \"OptionVirtualKeyCode\", \"doc\": \"Currently pressed `VirtualKeyCode` - (READONLY). **DO NOT USE THIS FOR TEXT INPUT, USE `current_char` and `On::TextInput` instead.**\"}},\n                        {\"pressed_virtual_keycodes\": {\"type\": \"VirtualKeyCodeVec\", \"doc\": \"List of currently held-down `VirtualKeyCodes` - useful to implement combinated shortcuts (ex. `Ctrl + Shift + Right`)\"}},\n                        {\"pressed_scancodes\": {\"type\": \"ScanCodeVec\", \"doc\": \"List of currently held-down `ScanCode`s (typedef for `u32`). Same as `current_virtual_keycodes`, but the scancode identifies the physical key pressed, independent of the keyboard layout. The scancode does not change if the user adjusts the host's keyboard map. Use when the physical location of the key is more important than the key's host GUI semantics, such as for movement controls in a first-person game (German keyboard: Z key, UK keyboard: Y key, etc.)\"}}\n                    ],\n                    \"functions\": {\n                        \"shift_down\": {\n                            \"doc\": \"Returns if the `SHIFT` key is held down (left OR right shift)\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"bool\"},\n                            \"fn_body\": \"keyboardstate.shift_down()\"\n                        },\n                        \"ctrl_down\": {\n                            \"doc\": \"Returns if the `CTRL` key is held down\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"bool\"},\n                            \"fn_body\": \"keyboardstate.ctrl_down()\"\n                        },\n                        \"alt_down\": {\n                            \"doc\": \"Returns if the `ALT` key is held down\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"bool\"},\n                            \"fn_body\": \"keyboardstate.alt_down()\"\n                        },\n                        \"super_down\": {\n                            \"doc\": \"Returns if the `SUPER` (\\\"Windows\\\") key is held down\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"bool\"},\n                            \"fn_body\": \"keyboardstate.super_down()\"\n                        },\n                        \"is_key_down\": {\n                            \"doc\": \"Returns if a key is held down\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"key\": \"VirtualKeyCode\"}\n                            ],\n                            \"returns\": {\"type\": \"bool\"},\n                            \"fn_body\": \"keyboardstate.is_key_down(key)\"\n                        }\n                    }\n                },\n                \"MouseCursorType\": {\n                    \"doc\": \"Current icon of the mouse cursor\",\n                    \"external\": \"azul_core::window::MouseCursorType\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Default\": {}},\n                        {\"Crosshair\": {}},\n                        {\"Hand\": {}},\n                        {\"Arrow\": {}},\n                        {\"Move\": {}},\n                        {\"Text\": {}},\n                        {\"Wait\": {}},\n                        {\"Help\": {}},\n                        {\"Progress\": {}},\n                        {\"NotAllowed\": {}},\n                        {\"ContextMenu\": {}},\n                        {\"Cell\": {}},\n                        {\"VerticalText\": {}},\n                        {\"Alias\": {}},\n                        {\"Copy\": {}},\n                        {\"NoDrop\": {}},\n                        {\"Grab\": {}},\n                        {\"Grabbing\": {}},\n                        {\"AllScroll\": {}},\n                        {\"ZoomIn\": {}},\n                        {\"ZoomOut\": {}},\n                        {\"EResize\": {}},\n                        {\"NResize\": {}},\n                        {\"NeResize\": {}},\n                        {\"NwResize\": {}},\n                        {\"SResize\": {}},\n                        {\"SeResize\": {}},\n                        {\"SwResize\": {}},\n                        {\"WResize\": {}},\n                        {\"EwResize\": {}},\n                        {\"NsResize\": {}},\n                        {\"NeswResize\": {}},\n                        {\"NwseResize\": {}},\n                        {\"ColResize\": {}},\n                        {\"RowResize\": {}}\n                    ]\n                },\n                \"CursorPosition\": {\n                    \"doc\": \"Current position of the mouse cursor, relative to the window. Set to `Uninitialized` on startup (gets initialized on the first frame).\",\n                    \"external\": \"azul_core::window::CursorPosition\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"OutOfWindow\": {\"type\": \"LogicalPosition\", \"doc\": \"The cursor is out of bound of the window. For security reasons, tracking the cursor is not permitted by the library. The payload is set to the position where the cursor left the window.\"}},\n                        {\"Uninitialized\": {\"doc\": \"The cursor position is unknown because the app hasn't yet been started. This is the default value and should generally only be set on startup.\"}},\n                        {\"InWindow\": {\"type\": \"LogicalPosition\", \"doc\": \"Cursor position relative to the top left corner of the window\"}}\n                    ],\n                    \"functions\": {\n                        \"get_position\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionLogicalPosition\"},\n                            \"fn_body\": \"cursorposition.get_position().into()\"\n                        }\n                    }\n                },\n                \"MouseState\": {\n                    \"doc\": \"Current mouse / cursor state\",\n                    \"external\": \"azul_core::window::MouseState\",\n                    \"struct_fields\": [\n                        {\"mouse_cursor_type\": {\"type\": \"OptionMouseCursorType\", \"doc\": \"Current mouse cursor type, set to `None` if the cursor is hidden. (READWRITE)\"}},\n                        {\"cursor_position\": {\"type\": \"CursorPosition\", \"doc\": \"Current mouse cursor type, set to `None` if the cursor is hidden. (READWRITE)\"}},\n                        {\"is_cursor_locked\": {\"type\": \"bool\", \"doc\": \"Is the mouse cursor locked to the current window (important for applications like games)? (READWRITE)\"}},\n                        {\"left_down\": {\"type\": \"bool\", \"doc\": \"Is the left mouse button down? (READONLY)\"}},\n                        {\"right_down\": {\"type\": \"bool\", \"doc\": \"Is the right mouse button down? (READONLY)\"}},\n                        {\"middle_down\": {\"type\": \"bool\", \"doc\": \"Is the middle mouse button down? (READONLY)\"}},\n                        {\"scroll_x\": {\"type\": \"OptionF32\", \"doc\": \"Scroll amount in pixels in the horizontal direction. Gets reset to 0 after every frame (READONLY)\"}},\n                        {\"scroll_y\": {\"type\": \"OptionF32\", \"doc\": \"Scroll amount in pixels in the vertical direction. Gets reset to 0 after every frame (READONLY)\"}}\n                    ]\n                },\n                \"PlatformSpecificOptions\": {\n                    \"doc\": \"Platform-specific window configuration, i.e. WM options that are not cross-platform\",\n                    \"external\": \"azul_core::window::PlatformSpecificOptions\",\n                    \"struct_fields\": [\n                        {\"windows_options\": {\"type\": \"WindowsWindowOptions\", \"doc\": \"Windows-specific WM options\"}},\n                        {\"linux_options\": {\"type\": \"LinuxWindowOptions\", \"doc\": \"Linux-specific WM options\"}},\n                        {\"mac_options\": {\"type\": \"MacWindowOptions\", \"doc\": \"Mac-specific WM options\"}},\n                        {\"wasm_options\": {\"type\": \"WasmWindowOptions\", \"doc\": \"Web / WASM-specific WM options\"}}\n                    ]\n                },\n                \"WindowsWindowOptions\": {\n                    \"doc\": \"Window configuration specific to Win32\",\n                    \"external\": \"azul_core::window::WindowsWindowOptions\",\n                    \"struct_fields\": [\n                        {\"allow_drag_drop\": {\"type\": \"bool\", \"doc\": \"STARTUP ONLY: Whether the window should allow drag + drop operations (default: true)\"}},\n                        {\"no_redirection_bitmap\": {\"type\": \"bool\", \"doc\": \"STARTUP ONLY: Sets `WS_EX_NOREDIRECTIONBITMAP`\"}},\n                        {\"window_icon\": {\"type\": \"OptionWindowIcon\", \"doc\": \"STARTUP ONLY: Window icon (decoded bytes), usually 32x32x4 bytes large (`ICON_SMALL`), appears at the top right corner of the window\"}},\n                        {\"taskbar_icon\": {\"type\": \"OptionTaskBarIcon\", \"doc\": \"READWRITE: Taskbar icon (decoded bytes), usually 256x256x4 bytes large (`ICON_BIG`). Can be changed in callbacks / at runtime.\"}},\n                        {\"parent_window\": {\"type\": \"OptionHwndHandle\", \"doc\": \"READWRITE: Taskbar icon (decoded bytes), usually 256x256x4 bytes large (`ICON_BIG`). Can be changed in callbacks / at runtime.\"}}\n                    ]\n                },\n                \"WaylandTheme\": {\n                    \"doc\": \"CSD theme of the window title / button controls\",\n                    \"external\": \"azul_core::window::WaylandTheme\",\n                    \"struct_fields\": [\n                        {\"title_bar_active_background_color\": {\"type\": \"[u8;4]\"}},\n                        {\"title_bar_active_separator_color\": {\"type\": \"[u8;4]\"}},\n                        {\"title_bar_active_text_color\": {\"type\": \"[u8;4]\"}},\n                        {\"title_bar_inactive_background_color\": {\"type\": \"[u8;4]\"}},\n                        {\"title_bar_inactive_separator_color\": {\"type\": \"[u8;4]\"}},\n                        {\"title_bar_inactive_text_color\": {\"type\": \"[u8;4]\"}},\n                        {\"maximize_idle_foreground_inactive_color\": {\"type\": \"[u8;4]\"}},\n                        {\"minimize_idle_foreground_inactive_color\": {\"type\": \"[u8;4]\"}},\n                        {\"close_idle_foreground_inactive_color\": {\"type\": \"[u8;4]\"}},\n                        {\"maximize_hovered_foreground_inactive_color\": {\"type\": \"[u8;4]\"}},\n                        {\"minimize_hovered_foreground_inactive_color\": {\"type\": \"[u8;4]\"}},\n                        {\"close_hovered_foreground_inactive_color\": {\"type\": \"[u8;4]\"}},\n                        {\"maximize_disabled_foreground_inactive_color\": {\"type\": \"[u8;4]\"}},\n                        {\"minimize_disabled_foreground_inactive_color\": {\"type\": \"[u8;4]\"}},\n                        {\"close_disabled_foreground_inactive_color\": {\"type\": \"[u8;4]\"}},\n                        {\"maximize_idle_background_inactive_color\": {\"type\": \"[u8;4]\"}},\n                        {\"minimize_idle_background_inactive_color\": {\"type\": \"[u8;4]\"}},\n                        {\"close_idle_background_inactive_color\": {\"type\": \"[u8;4]\"}},\n                        {\"maximize_hovered_background_inactive_color\": {\"type\": \"[u8;4]\"}},\n                        {\"minimize_hovered_background_inactive_color\": {\"type\": \"[u8;4]\"}},\n                        {\"close_hovered_background_inactive_color\": {\"type\": \"[u8;4]\"}},\n                        {\"maximize_disabled_background_inactive_color\": {\"type\": \"[u8;4]\"}},\n                        {\"minimize_disabled_background_inactive_color\": {\"type\": \"[u8;4]\"}},\n                        {\"close_disabled_background_inactive_color\": {\"type\": \"[u8;4]\"}},\n                        {\"maximize_idle_foreground_active_color\": {\"type\": \"[u8;4]\"}},\n                        {\"minimize_idle_foreground_active_color\": {\"type\": \"[u8;4]\"}},\n                        {\"close_idle_foreground_active_color\": {\"type\": \"[u8;4]\"}},\n                        {\"maximize_hovered_foreground_active_color\": {\"type\": \"[u8;4]\"}},\n                        {\"minimize_hovered_foreground_active_color\": {\"type\": \"[u8;4]\"}},\n                        {\"close_hovered_foreground_active_color\": {\"type\": \"[u8;4]\"}},\n                        {\"maximize_disabled_foreground_active_color\": {\"type\": \"[u8;4]\"}},\n                        {\"minimize_disabled_foreground_active_color\": {\"type\": \"[u8;4]\"}},\n                        {\"close_disabled_foreground_active_color\": {\"type\": \"[u8;4]\"}},\n                        {\"maximize_idle_background_active_color\": {\"type\": \"[u8;4]\"}},\n                        {\"minimize_idle_background_active_color\": {\"type\": \"[u8;4]\"}},\n                        {\"close_idle_background_active_color\": {\"type\": \"[u8;4]\"}},\n                        {\"maximize_hovered_background_active_color\": {\"type\": \"[u8;4]\"}},\n                        {\"minimize_hovered_background_active_color\": {\"type\": \"[u8;4]\"}},\n                        {\"close_hovered_background_active_color\": {\"type\": \"[u8;4]\"}},\n                        {\"maximize_disabled_background_active_color\": {\"type\": \"[u8;4]\"}},\n                        {\"minimize_disabled_background_active_color\": {\"type\": \"[u8;4]\"}},\n                        {\"close_disabled_background_active_color\": {\"type\": \"[u8;4]\"}},\n                        {\"title_bar_font\": {\"type\": \"String\", \"doc\": \"Font of the title bar, \\\"sans-serif\\\" by default\"}},\n                        {\"title_bar_font_size\": {\"type\": \"f32\"}}\n                    ]\n                },\n                \"RendererType\": {\n                    \"doc\": \"Renderer type of the current windows OpenGL context\",\n                    \"external\": \"azul_core::window::RendererType\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Hardware\": {\"doc\": \"Hardware rendering active (OpenGL 3.1 / OpenGL ES 3.0)\"}},\n                        {\"Software\": {\"doc\": \"Software OpenGL rendering active (swgl)\"}}\n                    ]\n                },\n                \"StringPair\": {\n                    \"doc\": \"Key-value pair, used for setting WM hints values specific to GNOME\",\n                    \"external\": \"azul_core::window::AzStringPair\",\n                    \"derive\": [\"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"key\": {\"type\": \"String\"}},\n                        {\"value\": {\"type\": \"String\"}}\n                    ]\n                },\n                \"LinuxWindowOptions\": {\n                    \"external\": \"azul_core::window::LinuxWindowOptions\",\n                    \"struct_fields\": [\n                        {\"x11_visual\": {\"type\": \"OptionX11Visual\", \"doc\": \"Which X11 visual to use for the window (unimplemented). Can only be set at window creation, can't be changed in callbacks\"}},\n                        {\"x11_screen\": {\"type\": \"OptionI32\", \"doc\": \"Which screen to use when showing the window (unimplemented). Can only be set at window creation, can't be changed in callbacks\"}},\n                        {\"x11_wm_classes\": {\"type\": \"StringPairVec\", \"doc\": \"Build window with `WM_CLASS` hint; defaults to the name of the binary. Only relevant on X11. Can only be set at window creation, can't be changed in callbacks.\"}},\n                        {\"x11_override_redirect\": {\"type\": \"bool\", \"doc\": \"Build window with override-redirect flag; defaults to false. Only relevant on X11. Can only be set at window creation, can't be changed in callbacks.\"}},\n                        {\"x11_window_types\": {\"type\": \"XWindowTypeVec\", \"doc\": \"Build window with `_NET_WM_WINDOW_TYPE` hint; defaults to `Normal`. Only relevant on X11. Can only be set at window creation, can't be changed in callbacks.\"}},\n                        {\"x11_gtk_theme_variant\": {\"type\": \"OptionString\", \"doc\": \"Build window with `_GTK_THEME_VARIANT` hint set to the specified value. Currently only relevant on X11. Can only be set at window creation, can't be changed in callbacks.\"}},\n                        {\"x11_resize_increments\": {\"type\": \"OptionLogicalSize\", \"doc\": \"Build window with resize increment hint. Only implemented on X11. Can only be set at window creation, can't be changed in callbacks.\"}},\n                        {\"x11_base_size\": {\"type\": \"OptionLogicalSize\", \"doc\": \"Build window with base size hint. Only implemented on X11. Can only be set at window creation, can't be changed in callbacks.\"}},\n                        {\"wayland_app_id\": {\"type\": \"OptionString\", \"doc\": \"Build window with a given application ID. It should match the `.desktop` file distributed with the program. Only relevant on Wayland. Can only be set at window creation, can't be changed in callbacks.\"}},\n                        {\"wayland_theme\": {\"type\": \"OptionWaylandTheme\", \"doc\": \"Window decoration of the window minimize / maximize / close buttons\"}},\n                        {\"request_user_attention\": {\"type\": \"bool\", \"doc\": \"Whether the window icon should blink to request the users attention.\"}},\n                        {\"window_icon\": {\"type\": \"OptionWindowIcon\", \"doc\": \"Sets the window icon of the program\"}}\n                    ]\n                },\n                \"MacWindowOptions\": {\n                    \"external\": \"azul_core::window::MacWindowOptions\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"_reserved\": {\"type\": \"u8\", \"doc\": \"Reserved empty field\"}}\n                    ]\n                },\n                \"WasmWindowOptions\": {\n                    \"external\": \"azul_core::window::WasmWindowOptions\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"_reserved\": {\"type\": \"u8\", \"doc\": \"Reserved empty field\"}}\n                    ]\n                },\n                \"FullScreenMode\": {\n                    \"external\": \"azul_core::window::FullScreenMode\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"SlowFullScreen\": {\"doc\": \"- macOS: If the window is in windowed mode, transitions it slowly to fullscreen mode}\\r\\n- other: Does the same as `FastFullScreen`.\"}},\n                        {\"FastFullScreen\": {\"doc\": \"Window should immediately go into fullscreen mode (on macOS this is not the default behaviour).\"}},\n                        {\"SlowWindowed\": {\"doc\": \"- macOS: If the window is in fullscreen mode, transitions slowly back to windowed state.\\r\\n- other: Does the same as `FastWindowed`.\"}},\n                        {\"FastWindowed\": {\"doc\": \"If the window is in fullscreen mode, will immediately go back to windowed mode (on macOS this is not the default behaviour).\"}}\n                    ]\n                },\n                \"WindowTheme\": {\n                    \"doc\": \"Window theme, set by the operating system or `WindowCreateOptions.theme` on startup\",\n                    \"external\": \"azul_core::window::WindowTheme\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"DarkMode\": {\"doc\": \"Dark mode theme\"}},\n                        {\"LightMode\": {\"doc\": \"Light mode theme (default)\"}}\n                    ]\n                },\n                \"WindowPosition\": {\n                    \"doc\": \"Position of the top left corner of the window relative to the top left of the monitor\",\n                    \"external\": \"azul_core::window::WindowPosition\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Uninitialized\": {\"doc\": \"Window position has not been initialized yet (default, only set on startup)\"}},\n                        {\"Initialized\": {\"type\": \"PhysicalPositionI32\", \"doc\": \"Initialized window position: modifying this value will move the window\"}}\n                    ]\n                },\n                \"ImePosition\": {\n                    \"doc\": \"Position of the virtual keyboard necessary to insert CJK characters\",\n                    \"external\": \"azul_core::window::ImePosition\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Uninitialized\": {}},\n                        {\"Initialized\": {\"type\": \"LogicalPosition\"}}\n                    ]\n                },\n                \"TouchState\": {\n                    \"doc\": \"Current state of touch devices / touch inputs\",\n                    \"external\": \"azul_core::window::TouchState\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"unused\": {\"type\": \"u8\"}}\n                    ]\n                },\n                \"Monitor\": {\n                    \"doc\": \"Information about a single (or many) monitors, useful for dock widgets\",\n                    \"external\": \"azul_core::window::Monitor\",\n                    \"struct_fields\": [\n                        {\"id\": {\"type\": \"usize\", \"doc\": \"Internal ID for the monitor, only useful at startup to specify which screen the window should be created on (unimplemented)\"}},\n                        {\"name\": {\"type\": \"OptionString\", \"doc\": \"Name of the Monitor\"}},\n                        {\"size\": {\"type\": \"LayoutSize\", \"doc\": \"Size of the monitor. Note that this does not say anything about DPI (i.e. the physical, real-world size of the monitor).\"}},\n                        {\"position\": {\"type\": \"LayoutPoint\", \"doc\": \"Position relative to the top left of the \\\"virtual\\\" monitor size (if two or more monitors are connected, this area will usually be a union of all monitors)\"}},\n                        {\"scale_factor\": {\"type\": \"f64\", \"doc\": \"HiDPI scale factor of this monitor\"}},\n                        {\"video_modes\": {\"type\": \"VideoModeVec\", \"doc\": \"List of video modes supported by this monitor\"}},\n                        {\"is_primary_monitor\": {\"type\": \"bool\", \"doc\": \"Whether this monitor is set as the primary monitor\"}}\n                    ]\n                },\n                \"VideoMode\": {\n                    \"doc\": \"Describes a rendering configuration for a monitor\",\n                    \"external\": \"azul_core::window::VideoMode\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"size\": {\"type\": \"LayoutSize\", \"doc\": \"Screen resolution in pixels\"}},\n                        {\"bit_depth\": {\"type\": \"u16\", \"doc\": \"Returns the bit depth of this video mode, as in how many bits you have available per color. This is generally 24 bits or 32 bits on modern systems, depending on whether the alpha channel is counted or not.\\r\\nWayland: always returns 32.\\r\\niOS: always returns 32.\"}},\n                        {\"refresh_rate\": {\"type\": \"u16\", \"doc\": \"Returns the refresh rate of this video mode. Note: the returned refresh rate is an integer approximation, and you shouldn't rely on this value to be exact.\"}}\n                    ]\n                },\n                \"WindowState\": {\n                    \"external\": \"azul_core::window::WindowState\",\n                    \"struct_fields\": [\n                        {\"title\": {\"type\": \"String\", \"doc\": \"Current title of the window\"}},\n                        {\"theme\": {\"type\": \"WindowTheme\", \"doc\": \"Current theme of the window (dark or light mode). Will emit a `ThemeChanged` event if it is changed in a callback.\"}},\n                        {\"size\": {\"type\": \"WindowSize\", \"doc\": \"Size of the window + max width / max height: 800 x 600 by default\"}},\n                        {\"position\": {\"type\": \"WindowPosition\", \"doc\": \"The x and y position, or None to let the WM decide where to put the window (default)\"}},\n                        {\"flags\": {\"type\": \"WindowFlags\", \"doc\": \"Flags such as whether the window is minimized / maximized, fullscreen, etc.\"}},\n                        {\"debug_state\": {\"type\": \"DebugState\", \"doc\": \"Mostly used for debugging, shows WebRender-builtin graphs on the screen. Used for performance monitoring and displaying frame times (rendering-only).\"}},\n                        {\"keyboard_state\": {\"type\": \"KeyboardState\", \"doc\": \"Current keyboard state - NOTE: mutating this field (currently) does nothing (doesn't get synchronized with OS-level window)!\"}},\n                        {\"mouse_state\": {\"type\": \"MouseState\", \"doc\": \"Current mouse state\"}},\n                        {\"touch_state\": {\"type\": \"TouchState\", \"doc\": \"Current touch state, stores all states of currently connected touch input devices, pencils, tablets, etc. - NOTE: readonly field - mutating this field will not get synchronized with the OS\"}},\n                        {\"ime_position\": {\"type\": \"ImePosition\", \"doc\": \"Sets location of IME candidate box in client area coordinates (relative to the top left of the window)\"}},\n                        {\"monitor\": {\"type\": \"Monitor\", \"doc\": \"Which monitor the window is currently residing on\"}},\n                        {\"platform_specific_options\": {\"type\": \"PlatformSpecificOptions\", \"doc\": \"Window options that can only be set on a certain platform (`WindowsWindowOptions` / `LinuxWindowOptions` / `MacWindowOptions`).\"}},\n                        {\"renderer_options\": {\"type\": \"RendererOptions\", \"doc\": \"Whether this window has SRGB / vsync / hardware acceleration\"}},\n                        {\"background_color\": {\"type\": \"ColorU\", \"doc\": \"Color of the window background (can be transparent if necessary)\"}},\n                        {\"layout_callback\": {\"type\": \"LayoutCallback\"}},\n                        {\"close_callback\": {\"type\": \"OptionCallback\", \"doc\": \"Callback to run before the window closes, if `DoNothing` is returned, window won't close\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"doc\": \"Creates a new WindowState with default settings and a custom layout callback\",\n                            \"fn_args\":[\n                                {\"layout_callback\": \"LayoutCallbackType\"}\n                            ],\n                            \"fn_body\": \"AzWindowState::new(layout_callback)\"\n                        },\n                        \"default\": {\n                            \"doc\": \"Creates a default WindowState with an empty layout callback - useful only if you use the Rust `WindowState { .. WindowState::default() }` intialization syntax.\",\n                            \"fn_args\": [],\n                            \"fn_body\": \"AzWindowState::default()\"\n                        }\n                    }\n                }\n            }\n        },\n        \"callbacks\": {\n            \"doc\": \"Callback type definitions + struct definitions of `CallbackInfo`s\",\n            \"classes\": {\n                \"LayoutCallback\": {\n                    \"external\": \"azul_impl::callbacks::LayoutCallback\",\n                    \"enum_fields\": [\n                        {\"Raw\": {\"type\": \"LayoutCallbackInner\"}},\n                        {\"Marshaled\": {\"type\": \"MarshaledLayoutCallback\"}}\n                    ]\n                },\n                \"MarshaledLayoutCallback\": {\n                    \"doc\": \"C-ABI stable wrapper over a `MarshaledLayoutCallback`\",\n                    \"external\": \"azul_impl::callbacks::MarshaledLayoutCallback\",\n                    \"struct_fields\": [\n                        {\"marshal_data\": {\"type\": \"RefAny\"}},\n                        {\"cb\": {\"type\": \"MarshaledLayoutCallbackInner\"}}\n                    ]\n                },\n                \"MarshaledLayoutCallbackInner\": {\n                    \"doc\": \"C-ABI stable wrapper over a `MarshaledLayoutCallbackInner`\",\n                    \"external\": \"azul_impl::callbacks::MarshaledLayoutCallbackInner\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"MarshaledLayoutCallbackType\"}}\n                    ]\n                },\n                \"MarshaledLayoutCallbackType\": {\n                    \"doc\": \"Marshaled version of LayoutCallback, carrys an extra \\\"marshal_data\\\" containing the (usually external) function object\",\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\", \"doc\": \"Marshal-local data (the `marshal_data` of the `MarshaledLayoutCallback` struct)\"},\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\", \"doc\": \"Application state of the `App`\"},\n                            {\"type\": \"LayoutCallbackInfo\", \"ref\": \"value\", \"doc\": \"Useful information to contitionally return the structure of the DOM based on the width / height of the window\" }\n                        ],\n                        \"returns\": {\"type\": \"StyledDom\", \"doc\": \"The styled DOM rendered from the application state\"}\n                    }\n                },\n                \"LayoutCallbackInner\": {\n                    \"doc\": \"C-ABI stable wrapper over a `LayoutCallbackType`\",\n                    \"external\": \"azul_impl::callbacks::LayoutCallbackInner\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"LayoutCallbackType\"}}\n                    ]\n                },\n                \"LayoutCallbackType\": {\n                    \"doc\": \"Main callback to layout the UI. azul will only call this callback when necessary (usually when one of the callback or timer returns `RegenerateStyledDomForCurrentWindow`), however azul may also call this callback at any given time, so it should be performant. This is the main entry point for your app UI.\",\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\", \"doc\": \"Application state of the `App`\"},\n                            {\"type\": \"LayoutCallbackInfo\", \"ref\": \"refmut\", \"doc\": \"Useful information to contitionally return the structure of the DOM based on the width / height of the window\" }\n                        ],\n                        \"returns\": {\"type\": \"StyledDom\", \"doc\": \"The styled DOM rendered from the application state\"}\n                    }\n                },\n                \"Callback\": {\n                    \"doc\": \"C-ABI stable wrapper over a `CallbackType`\",\n                    \"external\": \"azul_impl::callbacks::Callback\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"CallbackType\"}}\n                    ]\n                },\n                \"CallbackType\": {\n                    \"doc\": \"Generic UI callback function pointer: called when the `EventFilter` is active\",\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\", \"doc\": \"Reference counted opaque pointer to the data set in the `CallbackData` for the hit DOM node\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\", \"doc\": \"Context struct to allow the callback to manipulate UI structures\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\", \"doc\": \"Whether this callback has modified the application state in such a way that a full UI redraw is unavoidable. If any callback returns true, the `LayoutCallback` of the window will be called again to render the next frame.\"}\n                    }\n                },\n                \"CallbackInfo\": {\n                    \"external\": \"azul_impl::callbacks::CallbackInfo\",\n                    \"struct_fields\": [\n                        {\"layout_results\": {\"type\": \"*const c_void\"}},\n                        {\"layout_results_count\": {\"type\": \"usize\"}},\n                        {\"renderer_resources\": {\"type\": \"*const c_void\"}},\n                        {\"previous_window_state\": {\"type\": \"*const c_void\"}},\n                        {\"current_window_state\": {\"type\": \"*const c_void\"}},\n                        {\"modifiable_window_state\": {\"type\": \"*mut WindowState\"}},\n                        {\"gl_context\": {\"type\": \"*const OptionGl\"}},\n                        {\"image_cache\": {\"type\": \"*mut c_void\"}},\n                        {\"system_fonts\": {\"type\": \"*mut c_void\"}},\n                        {\"timers\": {\"type\": \"*mut c_void\"}},\n                        {\"threads\": {\"type\": \"*mut c_void\"}},\n                        {\"timers_removed\": {\"type\": \"*mut c_void\"}},\n                        {\"threads_removed\": {\"type\": \"*mut c_void\"}},\n                        {\"current_window_handle\": {\"type\": \"*const RawWindowHandle\"}},\n                        {\"new_windows\": {\"type\": \"*mut c_void\"}},\n                        {\"system_callbacks\": {\"type\": \"*const SystemCallbacks\"}},\n                        {\"stop_propagation\": {\"type\": \"*mut bool\"}},\n                        {\"focus_target\": {\"type\": \"*mut c_void\"}},\n                        {\"words_changed_in_callbacks\": {\"type\": \"*mut c_void\"}},\n                        {\"images_changed_in_callbacks\": {\"type\": \"*mut c_void\"}},\n                        {\"image_masks_changed_in_callbacks\": {\"type\": \"*mut c_void\"}},\n                        {\"css_properties_changed_in_callbacks\": {\"type\": \"*mut c_void\"}},\n                        {\"current_scroll_states\": {\"type\": \"*const c_void\"}},\n                        {\"nodes_scrolled_in_callback\": {\"type\": \"*mut c_void\"}},\n                        {\"hit_dom_node\": {\"type\": \"DomNodeId\"}},\n                        {\"cursor_relative_to_item\": {\"type\": \"OptionLogicalPosition\"}},\n                        {\"cursor_in_viewport\": {\"type\": \"OptionLogicalPosition\"}},\n                        {\"_reserved_ref\": {\"type\": \"*const c_void\"}},\n                        {\"_reserved_mut\": {\"type\": \"*mut c_void\"}}\n                    ],\n                    \"functions\": {\n                        \"get_hit_node\": {\n                            \"doc\": \"Returns the `DomNodeId` of the element that the callback was attached to.\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"DomNodeId\"},\n                            \"fn_body\": \"callbackinfo.get_hit_node()\"\n                        },\n                        \"get_system_time_fn\": {\n                            \"doc\": \"Returns the function pointer necessary to query the current time.\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"GetSystemTimeFn\"},\n                            \"fn_body\": \"callbackinfo.get_system_time_fn()\"\n                        },\n                        \"get_cursor_relative_to_viewport\": {\n                            \"doc\": \"Returns the `LayoutPoint` of the cursor in the viewport (relative to the origin of the `Dom`). Set to `None` if the cursor is not in the current window.\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionLogicalPosition\"},\n                            \"fn_body\": \"callbackinfo.get_cursor_relative_to_viewport()\"\n                        },\n                        \"get_cursor_relative_to_node\": {\n                            \"doc\": \"Returns the `LayoutPoint` of the cursor in the viewport (relative to the origin of the `Dom`). Set to `None` if the cursor is not hovering over the current node.\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionLogicalPosition\"},\n                            \"fn_body\": \"callbackinfo.get_cursor_relative_to_node()\"\n                        },\n                        \"get_current_window_state\": {\n                            \"doc\": \"Returns a copy of the current windows `WindowState`.\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"WindowState\"},\n                            \"fn_body\": \"callbackinfo.get_current_window_state()\"\n                        },\n                        \"get_current_keyboard_state\": {\n                            \"doc\": \"Returns a copy of the internal `KeyboardState`. Same as `self.get_window_state().keyboard_state`\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"KeyboardState\"},\n                            \"fn_body\": \"callbackinfo.get_current_keyboard_state()\"\n                        },\n                        \"get_current_mouse_state\": {\n                            \"doc\": \"Returns a copy of the internal `MouseState`. Same as `self.get_window_state().mouse_state`\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"MouseState\"},\n                            \"fn_body\": \"callbackinfo.get_current_mouse_state()\"\n                        },\n                        \"get_previous_window_state\": {\n                            \"doc\": \"Returns a copy of the current windows `WindowState`.\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionWindowState\"},\n                            \"fn_body\": \"callbackinfo.get_previous_window_state().into()\"\n                        },\n                        \"get_previous_keyboard_state\": {\n                            \"doc\": \"Returns a copy of the internal `KeyboardState`. Same as `self.get_window_state().keyboard_state`\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionKeyboardState\"},\n                            \"fn_body\": \"callbackinfo.get_previous_keyboard_state().into()\"\n                        },\n                        \"get_previous_mouse_state\": {\n                            \"doc\": \"Returns a copy of the internal `MouseState`. Same as `self.get_window_state().mouse_state`\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionMouseState\"},\n                            \"fn_body\": \"callbackinfo.get_previous_mouse_state().into()\"\n                        },\n                        \"get_current_window_handle\": {\n                            \"doc\": \"Returns a copy of the current windows `RawWindowHandle`.\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"RawWindowHandle\"},\n                            \"fn_body\": \"callbackinfo.get_current_window_handle()\"\n                        },\n                        \"get_gl_context\": {\n                            \"doc\": \"Returns a **reference-counted copy** of the current windows' `Gl` (context). You can use this to render OpenGL textures.\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionGl\"},\n                            \"fn_body\": \"callbackinfo.get_gl_context()\"\n                        },\n                        \"get_scroll_position\": {\n                            \"doc\": \"Returns the x / y offset that this node has been scrolled to by the user or `None` if the node has not been scrolled.\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionLogicalPosition\"},\n                            \"fn_body\": \"callbackinfo.get_scroll_position(node_id).into()\"\n                        },\n                        \"get_dataset\": {\n                            \"doc\": \"Returns the `dataset` property of the given Node or `None` if the node doesn't have a `dataset` property.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionRefAny\"},\n                            \"fn_body\": \"callbackinfo.get_dataset(node_id).into()\"\n                        },\n                        \"get_node_id_of_root_dataset\": {\n                            \"doc\": \"Given a dataset, returns the node ID of the \\\"root\\\" `RefAny`, i.e. the `RefAny` with the lowest `instance` count that is set as a `dataset` on any node.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"dataset\": \"RefAny\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionDomNodeId\"},\n                            \"fn_body\": \"callbackinfo.get_node_id_of_root_dataset(dataset).into()\"\n                        },\n                        \"get_string_contents\": {\n                            \"doc\": \"If the node is a `Text` node, returns a copy of the internal string contents.\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionString\"},\n                            \"fn_body\": \"callbackinfo.get_string_contents(node_id).into()\"\n                        },\n                        \"get_inline_text\": {\n                            \"doc\": \"If the node is a `Text` node, returns the layouted inline glyphs of the text currently rendered on the screen\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionInlineText\"},\n                            \"fn_body\": \"callbackinfo.get_inline_text(node_id).into()\"\n                        },\n                        \"get_font_ref\": {\n                            \"doc\": \"If the node is a `Text` node, returns the `FontRef` that was used to render this node. Useful for getting font metrics for a text string\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionFontRef\"},\n                            \"fn_body\": \"callbackinfo.get_font_ref(node_id).into()\"\n                        },\n                        \"get_text_layout_options\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionResolvedTextLayoutOptions\"},\n                            \"fn_body\": \"callbackinfo.get_text_layout_options(node_id).into()\"\n                        },\n                        \"shape_text\": {\n                            \"doc\": \"Similar to `get_inline_text()`: If the node is a `Text` node, shape the `text` string with the same parameters as the current text and return the calculated InlineTextLayout. Necessary to calculate text cursor offsets and to detect when a line overflows content.\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"node_id\": \"DomNodeId\"},\n                                {\"text\": \"String\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionInlineText\"},\n                            \"fn_body\": \"azul_impl::text_layout::callback_info_shape_text(callbackinfo, node_id, text).into()\"\n                        },\n                        \"get_index_in_parent\": {\n                            \"doc\": \"Returns the index of the node relative to the parent node.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"usize\"},\n                            \"fn_body\": \"let mut t = 0; let mut n = node_id; while let Some(prev) = callbackinfo.get_previous_sibling(n) { n = prev; t += 1; } t\"\n                        },\n                        \"get_parent\": {\n                            \"doc\": \"Returns the parent `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionDomNodeId\"},\n                            \"fn_body\": \"callbackinfo.get_parent(node_id).into()\"\n                        },\n                        \"get_previous_sibling\": {\n                            \"doc\": \"Returns the previous siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionDomNodeId\"},\n                            \"fn_body\": \"callbackinfo.get_previous_sibling(node_id).into()\"\n                        },\n                        \"get_next_sibling\": {\n                            \"doc\": \"Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionDomNodeId\"},\n                            \"fn_body\": \"callbackinfo.get_next_sibling(node_id).into()\"\n                        },\n                        \"get_first_child\": {\n                            \"doc\": \"Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionDomNodeId\"},\n                            \"fn_body\": \"callbackinfo.get_first_child(node_id).into()\"\n                        },\n                        \"get_last_child\": {\n                            \"doc\": \"Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionDomNodeId\"},\n                            \"fn_body\": \"callbackinfo.get_last_child(node_id).into()\"\n                        },\n                        \"get_node_position\": {\n                            \"doc\": \"Returns the position of a given DOM node in the UI\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionPositionInfo\"},\n                            \"fn_body\": \"callbackinfo.get_node_position(node_id).into()\"\n                        },\n                        \"get_node_size\": {\n                            \"doc\": \"Returns the size of a given DOM node in the UI\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionLogicalSize\"},\n                            \"fn_body\": \"callbackinfo.get_node_size(node_id).into()\"\n                        },\n                        \"get_computed_css_property\": {\n                            \"doc\": \"Returns the current computed CSS property of a given DOM node in the UI\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"},\n                                {\"property_type\": \"CssPropertyType\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionCssProperty\"},\n                            \"fn_body\": \"callbackinfo.get_computed_css_property(node_id, property_type).into()\"\n                        },\n                        \"set_window_state\": {\n                            \"doc\": \"Sets the new `WindowState` for the next frame. The window is updated after all callbacks are run.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"new_state\": \"WindowState\"}\n                            ],\n                            \"fn_body\": \"callbackinfo.set_window_state(new_state);\"\n                        },\n                        \"set_focus\": {\n                            \"doc\": \"Sets the new `FocusTarget` for the next frame. Note that this will emit a `On::FocusLost` and `On::FocusReceived` event, if the focused node has changed.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"target\": \"FocusTarget\"}\n                            ],\n                            \"fn_body\": \"callbackinfo.set_focus(target);\"\n                        },\n                        \"set_css_property\": {\n                            \"doc\": \"Sets a `CssProperty` on a given node to its new value. If this property change affects the layout, this will automatically trigger a relayout and redraw of the screen.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"},\n                                {\"new_property\": \"CssProperty\"}\n                            ],\n                            \"fn_body\": \"callbackinfo.set_css_property(node_id, new_property); \"\n                        },\n                        \"set_scroll_position\": {\n                            \"doc\": \"Sets the scroll position of the node\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"},\n                                {\"scroll_position\": \"LogicalPosition\"}\n                            ],\n                            \"fn_body\": \"callbackinfo.set_scroll_position(node_id, scroll_position)\"\n                        },\n                        \"set_string_contents\": {\n                            \"doc\": \"If the node is a `Text` node, overwrites the `Text` content with the new string, without requiring the entire UI to be rebuilt.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"},\n                                {\"string\": \"String\"}\n                            ],\n                            \"fn_body\": \"callbackinfo.set_string_contents(node_id, string)\"\n                        },\n                        \"add_image\": {\n                            \"doc\": \"Adds a new image identified by an ID to the image cache\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"id\": \"String\"},\n                                {\"image\": \"ImageRef\"}\n                            ],\n                            \"fn_body\": \"callbackinfo.add_image(id, image)\"\n                        },\n                        \"has_image\": {\n                            \"doc\": \"Returns whether an image with a given CSS ID already exists\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"id\": \"String\"}\n                            ],\n                            \"returns\": {\"type\": \"bool\"},\n                            \"fn_body\": \"callbackinfo.has_image(&id)\"\n                        },\n                        \"get_image\": {\n                            \"doc\": \"Returns the image with a given CSS ID\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"id\": \"String\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionImageRef\"},\n                            \"fn_body\": \"callbackinfo.get_image(&id).into()\"\n                        },\n                        \"update_image\": {\n                            \"doc\": \"If the node is an `Image`, exchanges the current image with a new source\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"},\n                                {\"new_image\": \"ImageRef\"},\n                                {\"image_type\": \"UpdateImageType\"}\n                            ],\n                            \"fn_body\": \"callbackinfo.update_image(node_id, new_image, image_type)\"\n                        },\n                        \"delete_image\": {\n                            \"doc\": \"Deletes an image identified by a CSS ID from the image cache\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"id\": \"String\"}\n                            ],\n                            \"fn_body\": \"callbackinfo.delete_image(&id)\"\n                        },\n                        \"update_image_mask\": {\n                            \"doc\": \"If the node has an `ImageMask`, exchanges the current mask for the new mask\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"},\n                                {\"new_mask\": \"ImageMask\"}\n                            ],\n                            \"fn_body\": \"callbackinfo.update_image_mask(node_id, new_mask)\"\n                        },\n                        \"stop_propagation\": {\n                            \"doc\": \"Stops the propagation of the current callback event type to the parent. Events are bubbled from the inside out (children first, then parents), this event stops the propagation of the event to the parent.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"fn_body\": \"callbackinfo.stop_propagation();\"\n                        },\n                        \"create_window\": {\n                            \"doc\": \"Spawns a new window with the given `WindowCreateOptions`.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"new_window\": \"WindowCreateOptions\"}\n                            ],\n                            \"fn_body\": \"callbackinfo.create_window(new_window);\"\n                        },\n                        \"start_timer\": {\n                            \"doc\": \"Adds a new `Timer` to the runtime. See the documentation for `Timer` for more information.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"timer\": \"Timer\"}\n                            ],\n                            \"returns\": {\"type\": \"TimerId\"},\n                            \"fn_body\": \"callbackinfo.start_timer(timer)\"\n                        },\n                        \"start_animation\": {\n                            \"doc\": \"Starts an animation timer on a give NodeId - same as a `Timer`, but uses a pre-configured interpolation function to drive the animation timer\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node\": \"DomNodeId\"},\n                                {\"animation\": \"Animation\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionTimerId\"},\n                            \"fn_body\": \"callbackinfo.start_animation(node, animation).into()\"\n                        },\n                        \"stop_timer\": {\n                            \"doc\": \"Stops / cancels a `Timer`. See the documentation for `Timer` for more information.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"timer_id\": \"TimerId\"}\n                            ],\n                            \"returns\": {\"type\": \"bool\", \"doc\": \"Returns true if the timer was successfully stopped / removed.\"},\n                            \"fn_body\": \"callbackinfo.stop_timer(timer_id)\"\n                        },\n                        \"start_thread\": {\n                            \"doc\": \"Starts a new `Thread` to the runtime. See the documentation for `Thread` for more information.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"thread_initialize_data\": \"RefAny\"},\n                                {\"writeback_data\": \"RefAny\"},\n                                {\"callback\": \"ThreadCallbackType\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionThreadId\" },\n                            \"fn_body\": \"callbackinfo.start_thread(thread_initialize_data, writeback_data, callback).into()\"\n                        },\n                        \"send_thread_msg\": {\n                            \"doc\": \"Sends a message to a background thread\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"thread_id\": \"ThreadId\"},\n                                {\"msg\": \"ThreadSendMsg\"}\n                            ],\n                            \"returns\": {\"type\": \"bool\", \"doc\": \"Returns `true` if the ThreadId is valid and the message could be sent, false otherwise\"},\n                            \"fn_body\": \"callbackinfo.send_thread_msg(thread_id, msg)\"\n                        },\n                        \"stop_thread\": {\n                            \"doc\": \"Stops a thread at the nearest possible opportunity. Sends a `ThreadSendMsg::TerminateThread` message to the thread and joins the thread.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"thread_id\": \"ThreadId\"}\n                            ],\n                            \"returns\": {\"type\": \"bool\", \"doc\": \"Returns `true` if the ThreadId is valid, false otherwise\"},\n                            \"fn_body\": \"callbackinfo.stop_thread(thread_id)\"\n                        }\n                    }\n                },\n                \"UpdateImageType\": {\n                    \"doc\": \"Which type of image should be updated: background image (the CSS background) or content image (the <img src=\\\"\\\"> content)\",\n                    \"external\": \"azul_impl::callbacks::UpdateImageType\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Background\": {\"doc\": \"Update the background image\"}},\n                        {\"Content\": {\"doc\": \"Update the <img> content of the DOM node\"}}\n                    ]\n                },\n                \"Update\": {\n                    \"doc\": \"Specifies if the screen should be updated after the callback function has returned\",\n                    \"external\": \"azul_impl::callbacks::Update\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"DoNothing\": {\"doc\": \"The screen does not need to redraw after the callback has been called\"}},\n                        {\"RefreshDom\": {\"doc\": \"After the callback is called, the screen needs to redraw (layout() function being called again)\"}},\n                        {\"RefreshDomAllWindows\": {\"doc\": \"After the callback is called, the layout() function needs to be called again for ALL windows\"}}\n                    ]\n                },\n                \"NodeId\": {\n                    \"doc\": \"Index of a Node in the internal `NodeDataContainer`\",\n                    \"external\": \"azul_impl::styled_dom::NodeHierarchyItemId\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"usize\", \"doc\": \"Index of the node into the vector.\\r\\n**Note:** the `index` is offset by 1:\\r\\n\\r\\n`0 = None`\\r\\n\\r\\n`1 = Some(0)`\\r\\n\\r\\n`2 = Some(1)`\"}}\n                    ]\n                },\n                \"DomId\": {\n                    \"doc\": \"ID of a DOM - one window can contain multiple, nested DOMs (such as iframes)\",\n                    \"external\": \"azul_impl::styled_dom::DomId\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"usize\", \"doc\": \"Index of the dom into the `StyledDomVec`\"}}\n                    ]\n                },\n                \"DomNodeId\": {\n                    \"doc\": \"Combination of node ID + DOM ID, both together can identify a node\",\n                    \"external\": \"azul_impl::callbacks::DomNodeId\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"dom\": {\"type\": \"DomId\"}},\n                        {\"node\": {\"type\": \"NodeId\"}}\n                    ]\n                },\n                \"PositionInfo\": {\n                    \"external\": \"azul_impl::ui_solver::PositionInfo\",\n                    \"enum_fields\": [\n                        {\"Static\": {\"type\": \"PositionInfoInner\"}},\n                        {\"Fixed\": {\"type\": \"PositionInfoInner\"}},\n                        {\"Absolute\": {\"type\": \"PositionInfoInner\"}},\n                        {\"Relative\": {\"type\": \"PositionInfoInner\"}}\n                    ],\n                    \"functions\": {\n                        \"is_positioned\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"bool\"},\n                            \"fn_body\": \"positioninfo.is_positioned()\"\n                        },\n                        \"get_static_offset\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"LogicalPosition\"},\n                            \"fn_body\": \"positioninfo.get_static_offset()\"\n                        },\n                        \"get_relative_offset\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"LogicalPosition\"},\n                            \"fn_body\": \"positioninfo.get_relative_offset()\"\n                        }\n                    }\n                },\n                \"PositionInfoInner\": {\n                    \"external\": \"azul_impl::ui_solver::PositionInfoInner\",\n                    \"struct_fields\": [\n                        {\"x_offset\": {\"type\": \"f32\"}},\n                        {\"y_offset\": {\"type\": \"f32\"}},\n                        {\"static_x_offset\": {\"type\": \"f32\"}},\n                        {\"static_y_offset\": {\"type\": \"f32\"}}\n                    ]\n                },\n                \"HidpiAdjustedBounds\": {\n                    \"external\": \"azul_impl::callbacks::HidpiAdjustedBounds\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"logical_size\": {\"type\": \"LogicalSize\"}},\n                        {\"hidpi_factor\": {\"type\": \"f32\"}}\n                    ],\n                    \"functions\": {\n                        \"get_logical_size\": {\n                            \"doc\": \"Returns the size of the bounds in logical units\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"LogicalSize\"},\n                            \"fn_body\": \"hidpiadjustedbounds.get_logical_size()\"\n                        },\n                        \"get_physical_size\": {\n                            \"doc\": \"Returns the size of the bounds in physical units\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"PhysicalSizeU32\"},\n                            \"fn_body\": \"hidpiadjustedbounds.get_physical_size()\"\n                        },\n                        \"get_hidpi_factor\": {\n                            \"doc\": \"Returns the hidpi factor of the bounds\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"f32\"},\n                            \"fn_body\": \"hidpiadjustedbounds.get_hidpi_factor()\"\n                        }\n                    }\n                },\n                \"InlineText\": {\n                    \"external\": \"azul_impl::callbacks::InlineText\",\n                    \"struct_fields\": [\n                        {\"lines\": {\"type\": \"InlineLineVec\", \"doc\": \"List of lines in this text, relative to the text origin\"}},\n                        {\"content_size\": {\"type\": \"LogicalSize\", \"doc\": \"Content size of all text lines\"}},\n                        {\"font_size_px\": {\"type\": \"f32\", \"doc\": \"Font size in pixels used for layouting this text\" }},\n                        {\"last_word_index\": {\"type\": \"usize\", \"doc\": \"Index of the last `Word` in this text (- note that a `Word` can also be a `Space`, `Return` or `Tab`).\"}},\n                        {\"baseline_descender_px\": {\"type\": \"f32\", \"doc\": \"**NEGATIVE** descender of the text baseline (distance from baseline of the text to the bottom of the line)\"}}\n                    ],\n                    \"functions\": {\n                        \"hit_test\": {\n                            \"doc\": \"Hit-tests the inline text, returns detailed information about which glyph / word / line, etc. the position (usually the mouse cursor) is currently over. Result may be empty (no hits) or contain more than one result (cursor is hovering over multiple overlapping glyphs at once).\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"position\": \"LogicalPosition\"}\n                            ],\n                            \"returns\": {\"type\": \"InlineTextHitVec\"},\n                            \"fn_body\": \"inlinetext.hit_test(position).into()\"\n                        }\n                    }\n                },\n                \"InlineLine\": {\n                    \"external\": \"azul_impl::callbacks::InlineLine\",\n                    \"struct_fields\": [\n                        {\"words\": {\"type\": \"InlineWordVec\", \"doc\": \"List of words in this line (includes tabs, return and spaces)\" }},\n                        {\"bounds\": {\"type\": \"LogicalRect\", \"doc\": \"Size and origin of the line, relative to the inline text origin (top left corner)\" }}\n                    ]\n                },\n                \"InlineWord\": {\n                    \"external\": \"azul_core::callbacks::InlineWord\",\n                    \"enum_fields\": [\n                        {\"Tab\": {\"doc\": \"Tab character, width depends on `TextLayoutOptions.tab_width`\"}},\n                        {\"Return\": {\"doc\": \"Return character\"}},\n                        {\"Space\": {\"doc\": \"Space character\"}},\n                        {\"Word\": {\"type\": \"InlineTextContents\", \"doc\": \"Actual word containing renderable glyphs\"}}\n                    ]\n                },\n                \"InlineTextContents\": {\n                    \"external\": \"azul_core::callbacks::InlineTextContents\",\n                    \"struct_fields\": [\n                        {\"glyphs\": {\"type\": \"InlineGlyphVec\", \"doc\": \"List of glyphs in this word\"}},\n                        {\"bounds\": {\"type\": \"LogicalRect\", \"doc\": \"origin and size of the word relative to the line origin (top left corner of the line)\"}}\n                    ]\n                },\n                \"InlineGlyph\": {\n                    \"external\": \"azul_core::callbacks::InlineGlyph\",\n                    \"struct_fields\": [\n                        {\"bounds\": {\"type\": \"LogicalRect\", \"doc\": \"origin and size of the glyph - note: origin relative to the word origin (top left corner of the word)\"}},\n                        {\"unicode_codepoint\": {\"type\": \"OptionChar\", \"doc\": \"`Option<char>`: optional unicode codepoint of this glyph\"}},\n                        {\"glyph_index\": {\"type\": \"u32\", \"doc\": \"Index of the glyph in the font\"}}\n                    ]\n                },\n                \"InlineTextHit\": {\n                    \"external\": \"azul_core::callbacks::InlineTextHit\",\n                    \"struct_fields\": [\n                        {\"unicode_codepoint\": {\"type\": \"OptionChar\", \"doc\": \"`Option<char>`, if the glyph was a character (as opposed to a diacritic mark), contains the unicode codepoint of the character\"}},\n                        {\"hit_relative_to_inline_text\": {\"type\": \"LogicalPosition\", \"doc\": \"Position of the hit relative to the top left corner of the inline text\"}},\n                        {\"hit_relative_to_line\": {\"type\": \"LogicalPosition\", \"doc\": \"Position of the hit relative to the top left corner of the line\"}},\n                        {\"hit_relative_to_text_content\": {\"type\": \"LogicalPosition\", \"doc\": \"Position of the hit relative to the top left corner of the word\"}},\n                        {\"hit_relative_to_glyph\": {\"type\": \"LogicalPosition\", \"doc\": \"Position of the hit relative to the top left corner of the glyph\"}},\n                        {\"line_index_relative_to_text\": {\"type\": \"usize\", \"doc\": \"Index of the line in the text\"}},\n                        {\"word_index_relative_to_text\": {\"type\": \"usize\", \"doc\": \"Index of the word in the text (note: words include `Space`, `Tab` and `Return`)\"}},\n                        {\"text_content_index_relative_to_text\": {\"type\": \"usize\", \"doc\": \"Index of the text content in the text\"}},\n                        {\"glyph_index_relative_to_text\": {\"type\": \"usize\", \"doc\": \"Index of the hit glyph in the text (note: one glyph is not one character, glyphs include diacritic marks)\"}},\n                        {\"char_index_relative_to_text\": {\"type\": \"usize\", \"doc\": \"Index of the hit character (unicode codepoint) in the text.\"}},\n                        {\"word_index_relative_to_line\": {\"type\": \"usize\", \"doc\": \"Index of the hit word (note: includes `Tab`, `Space`, `Return`) in the hit line\"}},\n                        {\"text_content_index_relative_to_line\": {\"type\": \"usize\", \"doc\": \"Index of the hit text content (\\\"word\\\") in the hit line\"}},\n                        {\"glyph_index_relative_to_line\": {\"type\": \"usize\", \"doc\": \"Index of the hit glyph in the line (includes diacritic marks)\"}},\n                        {\"char_index_relative_to_line\": {\"type\": \"usize\", \"doc\": \"Index of the hit character (unicode codepoint) in the line\"}},\n                        {\"glyph_index_relative_to_word\": {\"type\": \"usize\", \"doc\": \"Index of the hit glyph in the word (includes diacritic marks)\"}},\n                        {\"char_index_relative_to_word\": {\"type\": \"usize\", \"doc\": \"Index of the hit character (unicode codepoint) in the word\"}}\n                    ]\n                },\n                \"FocusTarget\": {\n                    \"doc\": \"Defines the keyboard input focus target\",\n                    \"external\": \"azul_impl::callbacks::FocusTarget\",\n                    \"enum_fields\": [\n                        {\"Id\": {\"type\": \"DomNodeId\", \"doc\": \"Set the focus by its DOM + Node ID\"}},\n                        {\"Path\": {\"type\": \"FocusTargetPath\", \"doc\": \"Set the focus by a CSS path\"}},\n                        {\"Previous\": {\"doc\": \"Sets the focus to the previous focusable node in the DOM or `None` if this was the first focusable DOM node\"}},\n                        {\"Next\": {\"doc\": \"Sets the focus to the next focusable node in the DOM or `None` if this was the last focusable DOM node\"}},\n                        {\"First\": {\"doc\": \"Set the focus to the first focusable DOM or `None` if no nodes are focusable\"}},\n                        {\"Last\": {\"doc\": \"Set the focus to the last focusable DOM or `None` if no nodes are focusable\"}},\n                        {\"NoFocus\": {\"doc\": \"Unset the keyboard focus\"}}\n                    ]\n                },\n                \"FocusTargetPath\": {\n                    \"doc\": \"CSS path to set the keyboard input focus\",\n                    \"external\": \"azul_impl::callbacks::FocusTargetPath\",\n                    \"struct_fields\": [\n                        {\"dom\": {\"type\": \"DomId\"}},\n                        {\"css_path\": {\"type\": \"CssPath\"}}\n                    ]\n                },\n                \"ResolvedTextLayoutOptions\": {\n                    \"external\": \"azul_impl::ui_solver::ResolvedTextLayoutOptions\",\n                    \"struct_fields\": [\n                        {\"font_size_px\": {\"type\": \"f32\"}},\n                        {\"line_height\": {\"type\": \"OptionF32\"}},\n                        {\"letter_spacing\": {\"type\": \"OptionF32\"}},\n                        {\"word_spacing\": {\"type\": \"OptionF32\"}},\n                        {\"tab_width\": {\"type\": \"OptionF32\"}},\n                        {\"max_horizontal_width\": {\"type\": \"OptionF32\"}},\n                        {\"leading\": {\"type\": \"OptionF32\"}},\n                        {\"holes\": {\"type\": \"LogicalRectVec\"}}\n                    ],\n                    \"constructors\": {\n                        \"default\": {\n                            \"fn_args\": [],\n                            \"fn_body\": \"AzResolvedTextLayoutOptions::default()\"\n                        }\n                    }\n                },\n                \"Animation\": {\n                    \"doc\": \"Animation struct to start a new animation\",\n                    \"external\": \"azul_impl::callbacks::Animation\",\n                    \"struct_fields\": [\n                        {\"from\": {\"type\": \"CssProperty\"}},\n                        {\"to\": {\"type\": \"CssProperty\"}},\n                        {\"duration\": {\"type\": \"Duration\"}},\n                        {\"repeat\": {\"type\": \"AnimationRepeat\"}},\n                        {\"repeat_count\": {\"type\": \"AnimationRepeatCount\"}},\n                        {\"easing\": {\"type\": \"AnimationEasing\"}},\n                        {\"relayout_on_finish\": {\"type\": \"bool\", \"doc\": \"Whether to reconstruct the DOM when the animation is finished, useful for UI state transitions\"}}\n                    ]\n                },\n                \"AnimationRepeat\": {\n                    \"doc\": \"How should an animation repeat (loop, ping-pong, etc.)\",\n                    \"external\": \"azul_impl::callbacks::AnimationRepeat\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"NoRepeat\": {\"doc\": \"Terminate the animation after the first iteration\"}},\n                        {\"Loop\": {\"doc\": \"Loop animation, reset the animation on every iteration\"}},\n                        {\"PingPong\": {\"doc\": \"Loop animation, invert `from` and `to` after ever iteration\"}}\n                    ]\n                },\n                \"AnimationRepeatCount\": {\n                    \"doc\": \"How many times should an animation repeat\",\n                    \"external\": \"azul_impl::callbacks::AnimationRepeatCount\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Times\": {\"type\": \"usize\"}},\n                        {\"Infinite\": {}}\n                    ]\n                },\n                \"AnimationEasing\": {\n                    \"doc\": \"Easing function of the animation (ease-in, ease-out, ease-in-out, custom)\",\n                    \"external\": \"azul_impl::css::AnimationInterpolationFunction\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Ease\": {}},\n                        {\"Linear\": {}},\n                        {\"EaseIn\": {}},\n                        {\"EaseOut\": {}},\n                        {\"EaseInOut\": {}},\n                        {\"CubicBezier\": {\"type\": \"SvgCubicCurve\"}}\n                    ]\n                },\n                \"IFrameCallback\": {\n                    \"doc\": \"C-ABI wrapper over an `IFrameCallbackType`\",\n                    \"external\": \"azul_impl::callbacks::IFrameCallback\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"IFrameCallbackType\"}}\n                    ]\n                },\n                \"IFrameCallbackType\": {\n                    \"doc\": \"For rendering large or infinite datasets such as tables or lists, azul uses `IFrameCallbacks` that allow the library user to only render the visible portion of DOM nodes, not the entire set. IFrames are rendered after the screen has been laid out, but before it gets composited. IFrames can be used recursively (i.e. iframes within iframes are possible). IFrames are re-rendered once the user scrolls to the bounds (see `IFrameCallbackReturn` on how to set the bounds) or the parent DOM was recreated.\",\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\", \"doc\": \"An `IFrameCallback` can have some data passed along from the parent DOM - usually this would be struct containing the widget state\"},\n                            {\"type\": \"IFrameCallbackInfo\", \"ref\": \"refmut\", \"doc\": \"Similar to `LayoutCallbackInfo`, but carries an additional `bounds` field which has information about the size / current scroll position of the IFrame.\"}\n                        ],\n                        \"returns\": {\"type\": \"IFrameCallbackReturn\", \"doc\": \"Contains the returned `StyledDom` as well as information about the initial scroll position of the new DOM plus scrollbar / overflow information\"}\n                    }\n                },\n                \"IFrameCallbackInfo\": {\n                    \"external\": \"azul_impl::callbacks::IFrameCallbackInfo\",\n                    \"struct_fields\": [\n                        {\"system_fonts\": {\"type\": \"*const c_void\", \"doc\": \"Pointer to system fonts\"}},\n                        {\"image_cache\": {\"type\": \"*const c_void\", \"doc\": \"Pointer to the image cache\"}},\n                        {\"window_theme\": {\"type\": \"WindowTheme\", \"doc\": \"Window theme, so that the IFrame can conditionally style itself\"}},\n                        {\"bounds\": {\"type\": \"HidpiAdjustedBounds\", \"doc\": \"Bounds of the IFrame with HiDPI factor\"}},\n                        {\"scroll_size\": {\"type\": \"LogicalSize\", \"doc\": \"How far the user has scrolled in the virtual scroll frame - useful to set the ``\"}},\n                        {\"scroll_offset\": {\"type\": \"LogicalPosition\", \"doc\": \"How far the user has scrolled in the virtual scroll frame - useful to set the ``\"}},\n                        {\"virtual_scroll_size\": {\"type\": \"LogicalSize\", \"doc\": \"How far the user has scrolled in the virtual scroll frame - useful to set the ``\"}},\n                        {\"virtual_scroll_offset\": {\"type\": \"LogicalPosition\", \"doc\": \"How far the user has scrolled in the virtual scroll frame - useful to set the ``\"}},\n                        {\"_reserved_ref\": {\"type\": \"*const c_void\"}},\n                        {\"_reserved_mut\": {\"type\": \"*mut c_void\"}}\n                    ]\n                },\n                \"IFrameCallbackReturn\": {\n                    \"external\": \"azul_impl::callbacks::IFrameCallbackReturn\",\n                    \"doc\": \"<img src=\\\"../images/scrollbounds.png\\\"/>\",\n                    \"struct_fields\": [\n                        {\"dom\": { \"type\": \"StyledDom\", \"doc\": \"The DOM that is currently visible in the `HidpiAdjustedBounds`.\" }},\n                        {\"scroll_size\": {\"type\": \"LogicalSize\", \"doc\": \"The actual extent of the `dom` in pixels - usually larger than currently visible bounds. When the user scrolls to one of the edges of these bounds, this `IFrameCallback` will be called again, so you'd want to render some extra rows or columns so that the callback doesn't have to get called again on every single scrolled pixel.\"}},\n                        {\"scroll_offset\": {\"type\": \"LogicalPosition\", \"doc\": \"Position that the `dom` should be scrolled to, relative to the `virtual_scroll_offset`.\"}},\n                        {\"virtual_scroll_size\": {\"type\": \"LogicalSize\", \"doc\": \"While the `scroll_size` is the currently rendered part of a larger scroll area, the virtual scroll size is the total size, even of non-rendered elements. For example, a table might show 30 - 40 rows and 10 columns, but the virtual size could be much larger. This setting only affects is the size of the scrollbar thumb.\"}},\n                        {\"virtual_scroll_offset\": {\"type\": \"LogicalPosition\", \"doc\": \"Same as `virtual_scroll_offset`, but only affects the position of the scrollbar thumb\"}}\n                    ]\n                },\n                \"RenderImageCallback\": {\n                    \"external\": \"azul_impl::callbacks::RenderImageCallback\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"RenderImageCallbackType\"}}\n                    ]\n                },\n                \"RenderImageCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"RenderImageCallbackInfo\", \"ref\": \"refmut\"}\n                        ],\n                        \"returns\": {\"type\": \"ImageRef\"}\n                    }\n                },\n                \"RenderImageCallbackInfo\": {\n                    \"external\": \"azul_impl::callbacks::RenderImageCallbackInfo\",\n                    \"struct_fields\": [\n                        {\"callback_node_id\": {\"type\": \"DomNodeId\"}},\n                        {\"bounds\": {\"type\": \"HidpiAdjustedBounds\"}},\n                        {\"gl_context\": {\"type\": \"*const OptionGl\"}},\n                        {\"image_cache\": {\"type\": \"*const c_void\"}},\n                        {\"system_fonts\": {\"type\": \"*const c_void\"}},\n                        {\"node_hierarchy\": {\"type\": \"*const NodeHierarchyItemVec\"}},\n                        {\"words_cache\": {\"type\": \"*const c_void\"}},\n                        {\"shaped_words_cache\": {\"type\": \"*const c_void\"}},\n                        {\"positioned_words_cache\": {\"type\": \"*const c_void\"}},\n                        {\"positioned_rects\": {\"type\": \"*const c_void\"}},\n                        {\"_reserved_ref\": {\"type\": \"*const c_void\"}},\n                        {\"_reserved_mut\": {\"type\": \"*mut c_void\"}}\n                    ],\n                    \"functions\": {\n                        \"get_gl_context\": {\n                            \"doc\": \"Returns a copy of the internal `Gl`\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionGl\"},\n                            \"fn_body\": \"renderimagecallbackinfo.get_gl_context().into()\"\n                        },\n                        \"get_bounds\": {\n                            \"doc\": \"Returns a copy of the internal `HidpiAdjustedBounds`\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"HidpiAdjustedBounds\"},\n                            \"fn_body\": \"renderimagecallbackinfo.get_bounds()\"\n                        },\n                        \"get_callback_node_id\": {\n                            \"doc\": \"Returns the `DomNodeId` that this callback was called on\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"DomNodeId\"},\n                            \"fn_body\": \"renderimagecallbackinfo.get_callback_node_id()\"\n                        },\n                        \"get_inline_text\": {\n                            \"doc\": \"If the node is a `Text` node, returns the layouted inline glyphs\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionInlineText\"},\n                            \"fn_body\": \"renderimagecallbackinfo.get_inline_text(node_id).into()\"\n                        },\n                        \"get_index_in_parent\": {\n                            \"doc\": \"Returns the index of the node relative to the parent node.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"usize\"},\n                            \"fn_body\": \"let mut t = 0; let mut n = node_id; while let Some(prev) = renderimagecallbackinfo.get_previous_sibling(n) { n = prev; t += 1; } t\"\n                        },\n                        \"get_parent\": {\n                            \"doc\": \"Returns the parent `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionDomNodeId\"},\n                            \"fn_body\": \"renderimagecallbackinfo.get_parent(node_id).into()\"\n                        },\n                        \"get_previous_sibling\": {\n                            \"doc\": \"Returns the previous siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionDomNodeId\"},\n                            \"fn_body\": \"renderimagecallbackinfo.get_previous_sibling(node_id).into()\"\n                        },\n                        \"get_next_sibling\": {\n                            \"doc\": \"Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionDomNodeId\"},\n                            \"fn_body\": \"renderimagecallbackinfo.get_next_sibling(node_id).into()\"\n                        },\n                        \"get_first_child\": {\n                            \"doc\": \"Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionDomNodeId\"},\n                            \"fn_body\": \"renderimagecallbackinfo.get_first_child(node_id).into()\"\n                        },\n                        \"get_last_child\": {\n                            \"doc\": \"Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_id\": \"DomNodeId\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionDomNodeId\"},\n                            \"fn_body\": \"renderimagecallbackinfo.get_last_child(node_id).into()\"\n                        }\n                    }\n                },\n                \"TimerCallback\": {\n                    \"external\": \"azul_impl::callbacks::TimerCallback\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"TimerCallbackType\"}}\n                    ]\n                },\n                \"TimerCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"TimerCallbackInfo\", \"ref\": \"refmut\"}\n                        ],\n                        \"returns\": {\"type\": \"TimerCallbackReturn\"}\n                    }\n                },\n                \"TimerCallbackInfo\": {\n                    \"external\": \"azul_impl::callbacks::TimerCallbackInfo\",\n                    \"struct_fields\": [\n                        {\"callback_info\": {\"type\": \"CallbackInfo\"}},\n                        {\"node_id\": {\"type\": \"OptionDomNodeId\", \"doc\": \"If the timer is attached to a NodeId, stores the node ID\"}},\n                        {\"frame_start\": {\"type\": \"Instant\", \"doc\": \"Instant of when the current frame was started, for cancelling timers / animations if they take too long\"}},\n                        {\"call_count\": {\"type\": \"usize\", \"doc\": \"How many times this animation was called already\"}},\n                        {\"is_about_to_finish\": {\"type\": \"bool\", \"doc\": \"Set to true on the last invocation of the timer, usually necessar to re-render the DOM only on the last frame\"}},\n                        {\"_reserved_ref\": {\"type\": \"*const c_void\"}},\n                        {\"_reserved_mut\": {\"type\": \"*mut c_void\"}}\n                    ]\n                },\n                \"TimerCallbackReturn\": {\n                    \"external\": \"azul_impl::callbacks::TimerCallbackReturn\",\n                    \"struct_fields\": [\n                        {\"should_update\": {\"type\": \"Update\", \"doc\": \"Whether the timer affects the screen in any way\"}},\n                        {\"should_terminate\": {\"type\": \"TerminateTimer\", \"doc\": \"Whether the timer should terminate itself\"}}\n                    ]\n                },\n                \"WriteBackCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"WriteBackCallback\": {\n                    \"external\": \"azul_impl::callbacks::WriteBackCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"WriteBackCallbackType\"}}\n                    ]\n                },\n                \"ThreadCallback\": {\n                    \"external\": \"azul_impl::callbacks::ThreadCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"ThreadCallbackType\"}}\n                    ]\n                },\n                \"ThreadCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"value\"},\n                            {\"type\": \"ThreadSender\", \"ref\": \"value\"},\n                            {\"type\": \"ThreadReceiver\", \"ref\": \"value\"}\n                        ]\n                    }\n                },\n                \"RefAnyDestructorType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"c_void\", \"ref\": \"refmut\"}\n                        ]\n                    }\n                },\n                \"RefCount\": {\n                    \"external\": \"azul_impl::callbacks::RefCount\",\n                    \"is_boxed_object\": true,\n                    \"struct_fields\": [\n                        {\"ptr\": {\"type\": \"*const c_void\"}},\n                        {\"run_destructor\": {\"type\": \"bool\"}}\n                    ],\n                    \"functions\": {\n                        \"can_be_shared\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"bool\"},\n                            \"fn_body\": \"refcount.can_be_shared()\"\n                        },\n                        \"can_be_shared_mut\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"bool\"},\n                            \"fn_body\": \"refcount.can_be_shared_mut()\"\n                        },\n                        \"increase_ref\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"fn_body\": \"refcount.increase_ref()\"\n                        },\n                        \"decrease_ref\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"fn_body\": \"refcount.decrease_ref()\"\n                        },\n                        \"increase_refmut\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"fn_body\": \"refcount.increase_refmut()\"\n                        },\n                        \"decrease_refmut\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"fn_body\": \"refcount.decrease_refmut()\"\n                        }\n                    }\n                },\n                \"RefAny\": {\n                    \"external\": \"azul_impl::callbacks::RefAny\",\n                    \"doc\": \"RefAny is a reference-counted, opaque pointer, which stores a reference to a struct. `RefAny` can be up- and downcasted (this usually done via generics and can't be expressed in the Rust API)\",\n                    \"is_boxed_object\": true,\n                    \"struct_fields\": [\n                        {\"_internal_ptr\":  {\"type\": \"*const c_void\", \"doc\": \"Pointer to the type-erased struct\"}},\n                        {\"sharing_info\":  {\"type\": \"RefCount\", \"doc\": \"Pointer to the reference count of this `RefAny`. Calling `.clone()` will not clone the data, only bump the reference count by 1. When the `num_copies` reaches 0, the destructor of this `RefAny` is called\"}},\n                        {\"instance_id\": {\"type\": \"u64\", \"doc\": \"Instance ID of this `RefAny`: should be 0 for the `root` node, and increase for every copy. Necessary to identify the \\\"root\\\" `RefAny`, otherwise all instances would have the same priority.\"}},\n                        {\"run_destructor\": {\"type\": \"bool\"}}\n                    ],\n                    \"constructors\": {\n                        \"new_c\": {\n                            \"fn_args\": [\n                                {\"ptr\": \"*const c_void\"},\n                                {\"len\": \"usize\"},\n                                {\"type_id\": \"u64\"},\n                                {\"type_name\": \"String\"},\n                                {\"destructor\": \"RefAnyDestructorType\"}\n                            ],\n                            \"fn_body\": \"AzRefAny::new_c(ptr, len, type_id, type_name, destructor)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"get_type_id\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"u64\"},\n                            \"fn_body\": \"refany.get_type_id()\"\n                        },\n                        \"get_type_name\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"String\"},\n                            \"fn_body\": \"refany.get_type_name()\"\n                        }\n                    }\n                },\n                \"LayoutCallbackInfo\": {\n                    \"external\": \"azul_impl::callbacks::LayoutCallbackInfo\",\n                    \"struct_fields\": [\n                        {\"window_size\": {\"type\": \"WindowSize\"}},\n                        {\"theme\": {\"type\": \"WindowTheme\"}},\n                        {\"image_cache\": {\"type\": \"*const c_void\"}},\n                        {\"gl_context\": {\"type\": \"*const OptionGl\"}},\n                        {\"system_fonts\": {\"type\": \"*const c_void\"}},\n                        {\"_reserved_ref\": {\"type\": \"*const c_void\"}},\n                        {\"_reserved_mut\": {\"type\": \"*mut c_void\"}}\n                    ],\n                    \"functions\": {\n                        \"get_gl_context\": {\n                            \"doc\": \"Returns a copy of the OpenGL context\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionGl\"},\n                            \"fn_body\": \"layoutcallbackinfo.get_gl_context()\"\n                        },\n                        \"get_system_fonts\": {\n                            \"doc\": \"Returns all system-native fonts with their respective file paths as values\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"StringPairVec\"},\n                            \"fn_body\": \"layoutcallbackinfo.get_system_fonts().into()\"\n                        },\n                        \"get_image\": {\n                            \"doc\": \"Returns an `ImageRef` referenced by a CSS ID\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"id\": \"String\"}\n                            ],\n                            \"returns\": {\"type\": \"OptionImageRef\"},\n                            \"fn_body\": \"layoutcallbackinfo.get_image(&id).into()\"\n                        }\n                    }\n                }\n            }\n        },\n        \"dom\": {\n            \"doc\": \"`Dom` construction and configuration\",\n            \"classes\": {\n                \"Dom\": {\n                    \"external\": \"azul_impl::dom::Dom\",\n                    \"struct_fields\": [\n                        {\"root\": {\"type\": \"NodeData\", \"doc\": \"Root node data - note that the global DOM root should be of `NodeType::Body`\"}},\n                        {\"children\": {\"type\": \"DomVec\", \"doc\": \"Child nodes of this root node\"}},\n                        {\"total_children\": {\"type\": \"usize\", \"doc\": \"Number of child nodes, including all child DOM trees\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"fn_args\": [\n                                {\"node_type\": \"NodeType\"}\n                            ],\n                            \"fn_body\": \"AzDom::new(node_type)\"\n                        },\n                        \"body\": {\n                            \"fn_args\": [],\n                            \"fn_body\": \"AzDom::body()\"\n                        },\n                        \"div\": {\n                            \"fn_args\": [],\n                            \"fn_body\": \"AzDom::div()\"\n                        },\n                        \"br\": {\n                            \"fn_args\": [],\n                            \"fn_body\": \"AzDom::br()\"\n                        },\n                        \"text\": {\n                            \"fn_args\": [\n                                {\"string\": \"String\"}\n                            ],\n                            \"fn_body\": \"AzDom::text(string)\"\n                        },\n                        \"image\": {\n                            \"fn_args\": [\n                                {\"image\": \"ImageRef\"}\n                            ],\n                            \"fn_body\": \"AzDom::image(image)\"\n                        },\n                        \"iframe\": {\n                            \"fn_args\": [\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"IFrameCallbackType\"}\n                            ],\n                            \"fn_body\": \"AzDom::iframe(data, callback)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"set_node_type\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_type\": \"NodeType\"}\n                            ],\n                            \"fn_body\": \"dom.root.set_node_type(node_type)\"\n                        },\n                        \"with_node_type\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_type\": \"NodeType\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); dom.root.set_node_type(node_type); dom\"\n                        },\n                        \"set_dataset\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"dataset\": \"RefAny\"}\n                            ],\n                            \"fn_body\": \"dom.root.set_dataset(Some(dataset).into())\"\n                        },\n                        \"with_dataset\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"dataset\": \"RefAny\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); dom.root.set_dataset(Some(dataset).into()); dom\"\n                        },\n                        \"set_ids_and_classes\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"ids_and_classes\": \"IdOrClassVec\"}\n                            ],\n                            \"fn_body\": \"dom.root.set_ids_and_classes(ids_and_classes)\"\n                        },\n                        \"with_ids_and_classes\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"ids_and_classes\": \"IdOrClassVec\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); dom.root.set_ids_and_classes(ids_and_classes); dom\"\n                        },\n                        \"set_callbacks\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"callbacks\": \"CallbackDataVec\"}\n                            ],\n                            \"fn_body\": \"dom.root.set_callbacks(callbacks)\"\n                        },\n                        \"with_callbacks\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"callbacks\": \"CallbackDataVec\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); dom.root.set_callbacks(callbacks); dom\"\n                        },\n                        \"set_inline_css_props\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"css_properties\": \"NodeDataInlineCssPropertyVec\"}\n                            ],\n                            \"fn_body\": \"dom.root.set_inline_css_props(css_properties)\"\n                        },\n                        \"with_inline_css_props\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"css_properties\": \"NodeDataInlineCssPropertyVec\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); dom.root.set_inline_css_props(css_properties); dom\"\n                        },\n                        \"add_callback\": {\n                            \"doc\": \"Adds a child node to this DOM (potentially heap-allocates in Rust code). Swaps `self` with a default `Dom` in order to prevent accidental copies.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"event\": \"EventFilter\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"CallbackType\"}\n                            ],\n                            \"fn_body\": \"dom.root.add_callback(event, data, callback)\"\n                        },\n                        \"with_callback\": {\n                            \"doc\": \"Same as add_child, but as a builder method.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"event\": \"EventFilter\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"CallbackType\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); dom.root.add_callback(event, data, callback); dom\"\n                        },\n                        \"add_child\": {\n                            \"doc\": \"Adds a child node to this DOM (potentially heap-allocates in Rust code). Swaps `self` with a default `Dom` in order to prevent accidental copies.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"child\": \"Dom\"}\n                            ],\n                            \"fn_body\": \"dom.add_child(child)\"\n                        },\n                        \"with_child\": {\n                            \"doc\": \"Same as add_child, but as a builder method.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"child\": \"Dom\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"dom.with_child(child)\"\n                        },\n                        \"set_children\": {\n                            \"doc\": \"Adds a child node to this DOM (potentially heap-allocates in Rust code). Swaps `self` with a default `Dom` in order to prevent accidental copies.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"children\": \"DomVec\"}\n                            ],\n                            \"fn_body\": \"dom.set_children(children)\"\n                        },\n                        \"with_children\": {\n                            \"doc\": \"Same as set_children, but as a builder method.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"children\": \"DomVec\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); dom.set_children(children); dom\"\n                        },\n                        \"add_id\": {\n                            \"doc\": \"Adds an CSS ID to the DOM root node.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"id\": \"String\"}\n                            ],\n                            \"fn_body\": \"dom.root.add_id(id)\"\n                        },\n                        \"with_id\": {\n                            \"doc\": \"Same as add_id, but as a builder method\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"id\": \"String\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); dom.root.add_id(id); dom\"\n                        },\n                        \"add_class\": {\n                            \"doc\": \"Adds a CSS class to the DOM root node.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"class\": \"String\"}\n                            ],\n                            \"fn_body\": \"dom.root.add_class(class)\"\n                        },\n                        \"with_class\": {\n                            \"doc\": \"Same as add_class, but as a builder method\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"class\": \"String\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); dom.root.add_class(class); dom\"\n                        },\n                        \"add_css_property\": {\n                            \"doc\": \"Adds an inline (normal) CSS property to the DOM root node.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"prop\": \"CssProperty\"}\n                            ],\n                            \"fn_body\": \"dom.root.add_normal_css_property(prop)\"\n                        },\n                        \"with_css_property\": {\n                            \"doc\": \"Same as add_class, but as a builder method\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"prop\": \"CssProperty\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); dom.root.add_normal_css_property(prop); dom\"\n                        },\n                        \"add_hover_css_property\": {\n                            \"doc\": \"Adds an inline (hover) CSS property to the DOM root node.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"prop\": \"CssProperty\"}\n                            ],\n                            \"fn_body\": \"dom.root.add_hover_css_property(prop)\"\n                        },\n                        \"with_hover_css_property\": {\n                            \"doc\": \"Same as add_class, but as a builder method\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"prop\": \"CssProperty\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); dom.root.add_hover_css_property(prop); dom\"\n                        },\n                        \"add_active_css_property\": {\n                            \"doc\": \"Adds an inline (hover) CSS property to the DOM root node.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"prop\": \"CssProperty\"}\n                            ],\n                            \"fn_body\": \"dom.root.add_active_css_property(prop)\"\n                        },\n                        \"with_active_css_property\": {\n                            \"doc\": \"Same as add_class, but as a builder method\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"prop\": \"CssProperty\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); dom.root.add_active_css_property(prop); dom\"\n                        },\n                        \"add_focus_css_property\": {\n                            \"doc\": \"Adds an inline (hover) CSS property to the DOM root node.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"prop\": \"CssProperty\"}\n                            ],\n                            \"fn_body\": \"dom.root.add_focus_css_property(prop)\"\n                        },\n                        \"with_focus_css_property\": {\n                            \"doc\": \"Same as add_class, but as a builder method\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"prop\": \"CssProperty\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); dom.root.add_focus_css_property(prop); dom\"\n                        },\n                        \"set_inline_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"String\"}\n                            ],\n                            \"fn_body\": \"AzNodeData_setInlineStyle(&mut dom.root, style);\"\n                        },\n                        \"with_inline_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"String\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); AzNodeData_setInlineStyle(&mut dom.root, style); dom\"\n                        },\n                        \"set_inline_hover_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"String\"}\n                            ],\n                            \"fn_body\": \"AzNodeData_setInlineHoverStyle(&mut dom.root, style);\"\n                        },\n                        \"with_inline_hover_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"String\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); AzNodeData_setInlineHoverStyle(&mut dom.root, style); dom\"\n                        },\n                        \"set_inline_active_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"String\"}\n                            ],\n                            \"fn_body\": \"AzNodeData_setInlineActiveStyle(&mut dom.root, style);\"\n                        },\n                        \"with_inline_active_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"String\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); AzNodeData_setInlineActiveStyle(&mut dom.root, style); dom\"\n                        },\n                        \"set_inline_focus_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"String\"}\n                            ],\n                            \"fn_body\": \"AzNodeData_setInlineFocusStyle(&mut dom.root, style);\"\n                        },\n                        \"with_inline_focus_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"String\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); AzNodeData_setInlineFocusStyle(&mut dom.root, style); dom\"\n                        },\n                        \"set_clip_mask\": {\n                            \"doc\": \"Sets the clip mask for the DOM root node.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"clip_mask\": \"ImageMask\"}\n                            ],\n                            \"fn_body\": \"dom.root.set_clip_mask(clip_mask)\"\n                        },\n                        \"with_clip_mask\": {\n                            \"doc\": \"Same as set_clip_mask, but as a builder method\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"clip_mask\": \"ImageMask\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); dom.root.set_clip_mask(clip_mask); dom\"\n                        },\n                        \"set_tab_index\": {\n                            \"doc\": \"Sets the tab index for the DOM root node.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"tab_index\": \"TabIndex\"}\n                            ],\n                            \"fn_body\": \"dom.root.set_tab_index(tab_index)\"\n                        },\n                        \"with_tab_index\": {\n                            \"doc\": \"Same as set_tab_index, but as a builder method\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"tab_index\": \"TabIndex\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); dom.root.set_tab_index(tab_index); dom\"\n                        },\n                        \"set_accessibility_info\": {\n                            \"doc\": \"Sets accessibility attributes for the DOM root node.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"accessibility_info\": \"AccessibilityInfo\"}\n                            ],\n                            \"fn_body\": \"dom.root.set_accessibility_info(accessibility_info)\"\n                        },\n                        \"with_accessibility_info\": {\n                            \"doc\": \"Same as set_accessibility_info, but as a builder method\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"accessibility_info\": \"AccessibilityInfo\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); dom.root.set_accessibility_info(accessibility_info); dom\"\n                        },\n                        \"set_menu_bar\": {\n                            \"doc\": \"Sets the menu bar for the DOM root node. See `NodeData::set_menu_bar` for more information.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"menu_bar\": \"Menu\"}\n                            ],\n                            \"fn_body\": \"dom.root.set_menu_bar(menu_bar)\"\n                        },\n                        \"with_menu_bar\": {\n                            \"doc\": \"Same as set_accessibility_info, but as a builder method\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"menu_bar\": \"Menu\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); dom.root.set_menu_bar(menu_bar); dom\"\n                        },\n                        \"set_context_menu\": {\n                            \"doc\": \"Sets the context menu for the DOM root node. See `NodeData::set_context_menu` for more information.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"context_menu\": \"Menu\"}\n                            ],\n                            \"fn_body\": \"dom.root.set_context_menu(context_menu)\"\n                        },\n                        \"with_context_menu\": {\n                            \"doc\": \"Same as set_context_menu, but as a builder method\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"context_menu\": \"Menu\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut dom = dom.swap_with_default(); dom.root.set_context_menu(context_menu); dom\"\n                        },\n                        \"hash\": {\n                            \"doc\": \"Calculates the hash of this node (note: in order to be truly unique, you also have to hash the DOM and Node ID).\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"u64\"},\n                            \"fn_body\": \"dom.root.calculate_node_data_hash().0\"\n                        },\n                        \"node_count\": {\n                            \"doc\": \"Returns the number of nodes in the DOM, including all child DOM trees. Result is equal to `self.total_children + 1` (count of all child trees + the root node)\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"usize\"},\n                            \"fn_body\": \"dom.node_count()\"\n                        },\n                        \"get_html_string\": {\n                            \"doc\": \"Returns a HTML string that you can write to a file in order to debug the UI structure and debug potential cascading issues\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"returns\": {\"type\": \"String\"},\n                            \"fn_body\": \"dom.style(AzCss::empty()).get_html_string(\\\"\\\", \\\"\\\", false).into()\"\n                        },\n                        \"get_html_string_test\": {\n                            \"doc\": \"Returns a HTML for unit testing\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"returns\": {\"type\": \"String\"},\n                            \"fn_body\": \"dom.style(AzCss::empty()).get_html_string(\\\"\\\", \\\"\\\", true).into()\"\n                        },\n                        \"style\": {\n                            \"doc\": \"Same as `StyledDom::new(dom, css)`: NOTE - replaces self with an empty DOM, in order to prevent cloning the DOM entirely\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"css\": \"Css\"}\n                            ],\n                            \"returns\": {\"type\": \"StyledDom\"},\n                            \"fn_body\": \"dom.style(css)\"\n                        }\n                    }\n                },\n                \"IFrameNode\": {\n                    \"external\": \"azul_impl::dom::IFrameNode\",\n                    \"struct_fields\": [\n                        {\"callback\": {\"type\": \"IFrameCallback\"}},\n                        {\"data\": {\"type\": \"RefAny\"}}\n                    ]\n                },\n                \"CallbackData\": {\n                    \"external\": \"azul_impl::dom::CallbackData\",\n                    \"struct_fields\": [\n                        {\"event\": {\"type\": \"EventFilter\"}},\n                        {\"callback\": {\"type\": \"Callback\"}},\n                        {\"data\": {\"type\": \"RefAny\"}}\n                    ]\n                },\n                \"NodeData\": {\n                    \"doc\": \"Represents one single DOM node (node type, classes, ids and callbacks are stored here)\",\n                    \"external\": \"azul_impl::dom::NodeData\",\n                    \"struct_fields\": [\n                        {\"node_type\": {\"type\": \"NodeType\", \"doc\": \"Stores the type of the node, i.e. `div`, `img`, `p`, etc.\"}},\n                        {\"dataset\": {\"type\": \"OptionRefAny\", \"doc\": \"`dataset` attribute of the node, useful to store any UI-related data on the node itself\"}},\n                        {\"ids_and_classes\": {\"type\": \"IdOrClassVec\", \"doc\": \"Stores the ids of the node, i.e. `[#main, #something]`\"}},\n                        {\"callbacks\": {\"type\": \"CallbackDataVec\", \"doc\": \"Stores the callbacks of the node, i.e. `On::MouseUp` -> `Callback(my_button_click_handler)`\"}},\n                        {\"inline_css_props\": {\"type\": \"NodeDataInlineCssPropertyVec\", \"doc\": \"Override certain dynamic styling properties for this DOM node\"}},\n                        {\"tab_index\": {\"type\": \"OptionTabIndex\", \"doc\": \"Tab index / focusable property for this DOM node\"}},\n                        {\"extra\": {\"type\": \"*const c_void\", \"doc\": \"Extra data relevant for this node: Necessary to extend the NodeData without breaking ABI as well as to efficiently store less commonly set options. Default set to `nullptr` (= `None` internally)\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"doc\": \"Creates an new, empty `NodeData` struct\",\n                            \"fn_args\": [\n                                {\"node_type\": \"NodeType\"}\n                            ],\n                            \"fn_body\": \"AzNodeData::new(node_type)\"\n                        },\n                        \"body\": {\n                            \"fn_args\": [],\n                            \"fn_body\": \"AzNodeData::body()\"\n                        },\n                        \"div\": {\n                            \"fn_args\": [],\n                            \"fn_body\": \"AzNodeData::div()\"\n                        },\n                        \"br\": {\n                            \"fn_args\": [],\n                            \"fn_body\": \"AzNodeData::br()\"\n                        },\n                        \"text\": {\n                            \"fn_args\": [\n                                {\"string\": \"String\"}\n                            ],\n                            \"fn_body\": \"AzNodeData::text(string)\"\n                        },\n                        \"image\": {\n                            \"fn_args\": [\n                                {\"image\": \"ImageRef\"}\n                            ],\n                            \"fn_body\": \"AzNodeData::image(image)\"\n                        },\n                        \"iframe\": {\n                            \"fn_args\": [\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"IFrameCallbackType\"}\n                            ],\n                            \"fn_body\": \"AzNodeData::iframe(data, callback)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"set_node_type\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_type\": \"NodeType\"}\n                            ],\n                            \"fn_body\": \"nodedata.set_node_type(node_type)\"\n                        },\n                        \"with_node_type\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node_type\": \"NodeType\"}\n                            ],\n                            \"returns\": {\"type\": \"NodeData\"},\n                            \"fn_body\": \"let mut nodedata = nodedata.swap_with_default(); nodedata.set_node_type(node_type); nodedata\"\n                        },\n                        \"set_dataset\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"dataset\": \"RefAny\"}\n                            ],\n                            \"fn_body\": \"nodedata.set_dataset(Some(dataset).into())\"\n                        },\n                        \"with_dataset\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"dataset\": \"RefAny\"}\n                            ],\n                            \"returns\": {\"type\": \"NodeData\"},\n                            \"fn_body\": \"let mut nodedata = nodedata.swap_with_default(); nodedata.set_dataset(Some(dataset).into()); nodedata\"\n                        },\n                        \"set_ids_and_classes\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"ids_and_classes\": \"IdOrClassVec\"}\n                            ],\n                            \"fn_body\": \"nodedata.set_ids_and_classes(ids_and_classes)\"\n                        },\n                        \"with_ids_and_classes\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"ids_and_classes\": \"IdOrClassVec\"}\n                            ],\n                            \"returns\": {\"type\": \"NodeData\"},\n                            \"fn_body\": \"let mut nodedata = nodedata.swap_with_default(); nodedata.set_ids_and_classes(ids_and_classes); nodedata\"\n                        },\n                        \"add_callback\": {\n                            \"doc\": \"Adds a callback this DOM (potentially heap-allocates in Rust code)\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"event\": \"EventFilter\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"CallbackType\"}\n                            ],\n                            \"fn_body\": \"nodedata.add_callback(event, data, callback)\"\n                        },\n                        \"with_callback\": {\n                            \"doc\": \"Same as add_child, but as a builder method.\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"event\": \"EventFilter\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"CallbackType\"}\n                            ],\n                            \"returns\": {\"type\": \"NodeData\"},\n                            \"fn_body\": \"let mut nodedata = nodedata.swap_with_default(); nodedata.add_callback(event, data, callback); nodedata\"\n                        },\n                        \"set_callbacks\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"callbacks\": \"CallbackDataVec\"}\n                            ],\n                            \"fn_body\": \"nodedata.set_callbacks(callbacks)\"\n                        },\n                        \"with_callbacks\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"callbacks\": \"CallbackDataVec\"}\n                            ],\n                            \"returns\": {\"type\": \"NodeData\"},\n                            \"fn_body\": \"let mut nodedata = nodedata.swap_with_default(); nodedata.set_callbacks(callbacks); nodedata\"\n                        },\n                        \"set_inline_css_props\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"css_properties\": \"NodeDataInlineCssPropertyVec\"}\n                            ],\n                            \"fn_body\": \"nodedata.set_inline_css_props(css_properties)\"\n                        },\n                        \"with_inline_css_props\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"css_properties\": \"NodeDataInlineCssPropertyVec\"}\n                            ],\n                            \"returns\": {\"type\": \"NodeData\"},\n                            \"fn_body\": \"let mut nodedata = nodedata.swap_with_default(); nodedata.set_inline_css_props(css_properties); nodedata\"\n                        },\n                        \"set_inline_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"String\"}\n                            ],\n                            \"fn_body\": \"nodedata.set_inline_css_props(nodedata.get_inline_css_props().with_append(AzNodeDataInlineCssPropertyVec::parse_normal(style.as_str())))\"\n                        },\n                        \"with_inline_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"String\"}\n                            ],\n                            \"returns\": {\"type\": \"NodeData\"},\n                            \"fn_body\": \"let mut nodedata = nodedata.swap_with_default(); AzNodeData_setInlineStyle(&mut nodedata, style); nodedata\"\n                        },\n                        \"set_inline_hover_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"String\"}\n                            ],\n                            \"fn_body\": \"nodedata.set_inline_css_props(nodedata.get_inline_css_props().with_append(AzNodeDataInlineCssPropertyVec::parse_hover(style.as_str())))\"\n                        },\n                        \"with_inline_hover_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"String\"}\n                            ],\n                            \"returns\": {\"type\": \"NodeData\"},\n                            \"fn_body\": \"let mut nodedata = nodedata.swap_with_default(); AzNodeData_setInlineHoverStyle(&mut nodedata, style); nodedata\"\n                        },\n                        \"set_inline_active_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"String\"}\n                            ],\n                            \"fn_body\": \"nodedata.set_inline_css_props(nodedata.get_inline_css_props().with_append(AzNodeDataInlineCssPropertyVec::parse_active(style.as_str())))\"\n                        },\n                        \"with_inline_active_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"String\"}\n                            ],\n                            \"returns\": {\"type\": \"NodeData\"},\n                            \"fn_body\": \"let mut nodedata = nodedata.swap_with_default(); AzNodeData_setInlineActiveStyle(&mut nodedata, style); nodedata\"\n                        },\n                        \"set_inline_focus_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"String\"}\n                            ],\n                            \"fn_body\": \"nodedata.set_inline_css_props(nodedata.get_inline_css_props().with_append(AzNodeDataInlineCssPropertyVec::parse_focus(style.as_str())))\"\n                        },\n                        \"with_inline_focus_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"String\"}\n                            ],\n                            \"returns\": {\"type\": \"NodeData\"},\n                            \"fn_body\": \"let mut nodedata = nodedata.swap_with_default(); AzNodeData_setInlineFocusStyle(&mut nodedata, style); nodedata\"\n                        },\n                        \"set_clip_mask\": {\n                            \"doc\": \"Sets the `extra.clip_mask` field for this node\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"image_mask\": \"ImageMask\"}\n                            ],\n                            \"fn_body\": \"nodedata.set_clip_mask(image_mask)\"\n                        },\n                        \"set_tab_index\": {\n                            \"doc\": \"Sets the tab index for this node\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"tab_index\": \"TabIndex\"}\n                            ],\n                            \"fn_body\": \"nodedata.set_tab_index(tab_index)\"\n                        },\n                        \"set_accessibility_info\": {\n                            \"doc\": \"Sets accessibility attributes for this node\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"accessibility_info\": \"AccessibilityInfo\"}\n                            ],\n                            \"fn_body\": \"nodedata.set_accessibility_info(accessibility_info)\"\n                        },\n                        \"set_menu_bar\": {\n                            \"doc\": \"Adds a (native) menu bar: If this node is the root node the menu bar will be added to the window, else it will be displayed using the width and position of the bounding rectangle\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"menu_bar\": \"Menu\"}\n                            ],\n                            \"fn_body\": \"nodedata.set_menu_bar(menu_bar)\"\n                        },\n                        \"set_context_menu\": {\n                            \"doc\": \"Signalizes that this node has a (native) context-aware menu. If set, the user can left-click the node to open the menu\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"context_menu\": \"Menu\"}\n                            ],\n                            \"fn_body\": \"nodedata.set_context_menu(context_menu)\"\n                        },\n                        \"hash\": {\n                            \"doc\": \"Calculates the hash of this node (note: in order to be truly unique, you also have to hash the DOM and Node ID).\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"u64\"},\n                            \"fn_body\": \"nodedata.calculate_node_data_hash().0\"\n                        }\n                    }\n                },\n                \"NodeType\": {\n                    \"doc\": \"List of core DOM node types built-into by `azul`\",\n                    \"external\": \"azul_impl::dom::NodeType\",\n                    \"enum_fields\": [\n                        {\"Body\": {\"doc\": \"`body` node, usually used to indicate a root node\"}},\n                        {\"Div\": {\"doc\": \"Regular div with no particular type of data attached\"}},\n                        {\"Br\": {\"doc\": \"Creates a break in an inline text layout\"}},\n                        {\"Text\": {\"type\": \"String\", \"doc\": \"Equivalent to the HTML `<p>` tag, a small label that can be (optionally) be selected by the user\"}},\n                        {\"Image\": {\"type\": \"ImageRef\", \"doc\": \"Equivalent to the HTML `<img>` tag, references an image or texture\"}},\n                        {\"IFrame\": {\"type\": \"IFrameNode\", \"doc\": \"Callback that renders a DOM when invoked with a width / height after the layout of the parent DOM is done. Can be selected in CSS with the `\\\"iframe\\\"` selector.\"}}\n                    ]\n                },\n                \"On\": {\n                    \"external\": \"azul_impl::dom::On\",\n                    \"derive\": [\"Copy\"],\n                    \"doc\": \"When to call a callback action - `On::MouseOver`, `On::MouseOut`, etc.\",\n                    \"enum_fields\": [\n                        { \"MouseOver\": {\"doc\": \"Mouse cursor is hovering over the element\"}},\n                        { \"MouseDown\": {\"doc\": \"Mouse cursor has is over element and is pressed (not good for \\\"click\\\" events - use `MouseUp` instead)\"}},\n                        { \"LeftMouseDown\": {\"doc\": \"(Specialization of `MouseDown`). Fires only if the left mouse button has been pressed while cursor was over the element\"}},\n                        { \"MiddleMouseDown\": {\"doc\": \"(Specialization of `MouseDown`). Fires only if the middle mouse button has been pressed while cursor was over the element\"}},\n                        { \"RightMouseDown\": {\"doc\": \"(Specialization of `MouseDown`). Fires only if the right mouse button has been pressed while cursor was over the element\"}},\n                        { \"MouseUp\": {\"doc\": \"Mouse button has been released while cursor was over the element\"}},\n                        { \"LeftMouseUp\": {\"doc\": \"(Specialization of `MouseUp`). Fires only if the left mouse button has been released while cursor was over the element\"}},\n                        { \"MiddleMouseUp\": {\"doc\": \"(Specialization of `MouseUp`). Fires only if the middle mouse button has been released while cursor was over the element\"}},\n                        { \"RightMouseUp\": {\"doc\": \"(Specialization of `MouseUp`). Fires only if the right mouse button has been released while cursor was over the element\"}},\n                        { \"MouseEnter\": {\"doc\": \"Mouse cursor has entered the element\"}},\n                        { \"MouseLeave\": {\"doc\": \"Mouse cursor has left the element\"}},\n                        { \"Scroll\": {\"doc\": \"Mousewheel / touchpad scrolling\"}},\n                        { \"TextInput\": {\"doc\": \"The window received a unicode character (also respects the system locale)\"}},\n                        { \"VirtualKeyDown\": {\"doc\": \"Check `keyboard_state.current_char` to get the current pressed character\"}},\n                        { \"VirtualKeyUp\": {\"doc\": \"A **virtual keycode** was pressed. Note: This is only the virtual keycode, not the actual char. If you want to get the character, use `TextInput` instead. **NOTE**: A virtual key does not have to map to a printable character. You can get all currently pressed virtual keycodes in the `keyboard_state.current_virtual_keycodes` and / or just the last keycode in the `keyboard_state.latest_virtual_keycode`.\"}},\n                        { \"HoveredFile\": {\"doc\": \"\"}},\n                        { \"DroppedFile\": {\"doc\": \"\"}},\n                        { \"HoveredFileCancelled\": {\"doc\": \"\"}},\n                        { \"FocusReceived\": {\"doc\": \"\"}},\n                        { \"FocusLost\": {\"doc\": \"\"}}\n                    ],\n                    \"functions\": {\n                        \"into_event_filter\": {\n                            \"doc\": \"Converts the `On` shorthand into a `EventFilter`\",\n                            \"fn_args\": [\n                                {\"self\": \"value\"}\n                            ],\n                            \"returns\": {\"type\": \"EventFilter\"},\n                            \"fn_body\": \"on.into()\"\n                        }\n                    }\n                },\n                \"EventFilter\": {\n                    \"external\": \"azul_impl::dom::EventFilter\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Hover\": {\"type\": \"HoverEventFilter\" } },\n                        { \"Not\": {\"type\": \"NotEventFilter\" } },\n                        { \"Focus\": {\"type\": \"FocusEventFilter\" } },\n                        { \"Window\": {\"type\": \"WindowEventFilter\" } },\n                        { \"Component\": { \"type\": \"ComponentEventFilter\" } },\n                        { \"Application\": { \"type\": \"ApplicationEventFilter\" } }\n                    ]\n                },\n                \"HoverEventFilter\": {\n                    \"external\": \"azul_impl::dom::HoverEventFilter\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"MouseOver\": {}} ,\n                        { \"MouseDown\": {}} ,\n                        { \"LeftMouseDown\": {}} ,\n                        { \"RightMouseDown\": {}} ,\n                        { \"MiddleMouseDown\": {}} ,\n                        { \"MouseUp\": {}} ,\n                        { \"LeftMouseUp\": {}} ,\n                        { \"RightMouseUp\": {}} ,\n                        { \"MiddleMouseUp\": {}} ,\n                        { \"MouseEnter\": {}} ,\n                        { \"MouseLeave\": {}} ,\n                        { \"Scroll\": {}} ,\n                        { \"ScrollStart\": {}} ,\n                        { \"ScrollEnd\": {}} ,\n                        { \"TextInput\": {}} ,\n                        { \"VirtualKeyDown\": {}} ,\n                        { \"VirtualKeyUp\": {}} ,\n                        { \"HoveredFile\": {}} ,\n                        { \"DroppedFile\": {}} ,\n                        { \"HoveredFileCancelled\": {}},\n                        {\"TouchStart\": {}},\n                        {\"TouchMove\": {}},\n                        {\"TouchEnd\": {}},\n                        {\"TouchCancel\": {}}\n                    ]\n                },\n                \"FocusEventFilter\": {\n                    \"external\": \"azul_impl::dom::FocusEventFilter\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"MouseOver\": {}} ,\n                        { \"MouseDown\": {}} ,\n                        { \"LeftMouseDown\": {}} ,\n                        { \"RightMouseDown\": {}} ,\n                        { \"MiddleMouseDown\": {}} ,\n                        { \"MouseUp\": {}} ,\n                        { \"LeftMouseUp\": {}} ,\n                        { \"RightMouseUp\": {}} ,\n                        { \"MiddleMouseUp\": {}} ,\n                        { \"MouseEnter\": {}} ,\n                        { \"MouseLeave\": {}} ,\n                        { \"Scroll\": {}} ,\n                        { \"ScrollStart\": {}} ,\n                        { \"ScrollEnd\": {}} ,\n                        { \"TextInput\": {}} ,\n                        { \"VirtualKeyDown\": {}} ,\n                        { \"VirtualKeyUp\": {}} ,\n                        { \"FocusReceived\": {}} ,\n                        { \"FocusLost\": {}}\n                    ]\n                },\n                \"NotEventFilter\": {\n                    \"external\": \"azul_impl::dom::NotEventFilter\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Hover\": {\"type\": \"HoverEventFilter\" } },\n                        { \"Focus\": {\"type\": \"FocusEventFilter\" } }\n                    ]\n                },\n                \"WindowEventFilter\": {\n                    \"external\": \"azul_impl::dom::WindowEventFilter\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"MouseOver\": {}} ,\n                        { \"MouseDown\": {}} ,\n                        { \"LeftMouseDown\": {}} ,\n                        { \"RightMouseDown\": {}} ,\n                        { \"MiddleMouseDown\": {}} ,\n                        { \"MouseUp\": {}} ,\n                        { \"LeftMouseUp\": {}} ,\n                        { \"RightMouseUp\": {}} ,\n                        { \"MiddleMouseUp\": {}} ,\n                        { \"MouseEnter\": {}} ,\n                        { \"MouseLeave\": {}} ,\n                        { \"Scroll\": {}} ,\n                        { \"ScrollStart\": {}} ,\n                        { \"ScrollEnd\": {}} ,\n                        { \"TextInput\": {}} ,\n                        { \"VirtualKeyDown\": {}} ,\n                        { \"VirtualKeyUp\": {}} ,\n                        { \"HoveredFile\": {}} ,\n                        { \"DroppedFile\": {}} ,\n                        { \"HoveredFileCancelled\": {}},\n                        { \"Resized\": {}},\n                        { \"Moved\": {}},\n                        { \"TouchStart\": {}},\n                        { \"TouchMove\": {}},\n                        { \"TouchEnd\": {}},\n                        { \"TouchCancel\": {}},\n                        { \"FocusReceived\": {}},\n                        { \"FocusLost\": {}},\n                        { \"CloseRequested\": {}},\n                        { \"ThemeChanged\": {}}\n                    ]\n                },\n                \"ComponentEventFilter\": {\n                    \"external\": \"azul_impl::dom::ComponentEventFilter\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"AfterMount\": {\"doc\": \"Node has been added. Internally the DOM tree is diffed and this event fires only once.\"}},\n                        {\"BeforeUnmount\": {\"doc\": \"Node has been removed (DOM tree has been exchanged)\"}},\n                        {\"NodeResized\": {\"doc\": \"Item has been resized\"}},\n                        {\"DefaultAction\": {\"doc\": \"Performs the \\\"default action\\\", necessary for accessibility\"}},\n                        {\"Selected\": {\"doc\": \"Item has been selected using assistive technology (e.g. screen reader)\"}}\n                    ]\n                },\n                \"ApplicationEventFilter\": {\n                    \"external\": \"azul_impl::dom::ApplicationEventFilter\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"DeviceConnected\": {}},\n                        {\"DeviceDisconnected\": {}}\n                    ]\n                },\n                \"AccessibilityInfo\": {\n                    \"doc\": \"Accessibility information (MSAA wrapper). See `NodeData.set_accessibility_info()`\",\n                    \"external\": \"azul_impl::dom::AccessibilityInfo\",\n                    \"struct_fields\": [\n                        {\"name\": {\"type\": \"OptionString\", \"doc\": \"Get the \\\"name\\\" of the `IAccessible`, for example the name of a button, checkbox or menu item. Try to use unique names for each item in a dialog so that voice dictation software doesn't have to deal with extra ambiguity\"}},\n                        {\"value\": {\"type\": \"OptionString\", \"doc\": \"Get the \\\"value\\\" of the `IAccessible`, for example a number in a slider, a URL for a link, the text a user entered in a field.\"}},\n                        {\"role\": {\"type\": \"AccessibilityRole\", \"doc\": \"Get an enumerated value representing what this IAccessible is used for, for example is it a link, static text, editable text, a checkbox, or a table cell, etc.\"}},\n                        {\"states\": {\"type\": \"AccessibilityStateVec\", \"doc\": \"Possible on/off states, such as focused, focusable, selected, selectable, visible, protected (for passwords), checked, etc.\"}},\n                        {\"accelerator\": {\"type\": \"OptionVirtualKeyCodeCombo\", \"doc\": \"Optional keyboard accelerator\"}},\n                        {\"default_action\": {\"type\": \"OptionString\", \"doc\": \"Optional \\\"default action\\\" description. Only used when there is at least one `ComponentEventFilter::DefaultAction` callback present on this node\"}}\n                    ]\n                },\n                \"AccessibilityRole\": {\n                    \"doc\": \"MSAA Accessibility role constants. For information on what each role does, see the <a href=\\\"https://docs.microsoft.com/en-us/windows/win32/winauto/object-roles\\\">MSDN Role Constants page</a>\",\n                    \"external\": \"azul_impl::dom::AccessibilityRole\",\n                    \"enum_fields\": [\n                        {\"TitleBar\": {\"doc\": \"Inserted by operating system\"}},\n                        {\"MenuBar\": {}},\n                        {\"ScrollBar\": {}},\n                        {\"Grip\": {}},\n                        {\"Sound\": {}},\n                        {\"Cursor\": {}},\n                        {\"Caret\": {}},\n                        {\"Alert\": {}},\n                        {\"Window\": {\"doc\": \"Inserted by operating system\"}},\n                        {\"Client\": {}},\n                        {\"MenuPopup\": {}},\n                        {\"MenuItem\": {}},\n                        {\"Tooltip\": {}},\n                        {\"Application\": {}},\n                        {\"Document\": {}},\n                        {\"Pane\": {}},\n                        {\"Chart\": {}},\n                        {\"Dialog\" : {}},\n                        {\"Border\": {}},\n                        {\"Grouping\": {}},\n                        {\"Separator\": {}},\n                        {\"Toolbar\": {}},\n                        {\"StatusBar\": {}},\n                        {\"Table\": {}},\n                        {\"ColumnHeader\": {}},\n                        {\"RowHeader\": {}},\n                        {\"Column\": {}},\n                        {\"Row\": {}},\n                        {\"Cell\": {}},\n                        {\"Link\": {}},\n                        {\"HelpBalloon\": {}},\n                        {\"Character\"  : {}},\n                        {\"List\": {}},\n                        {\"ListItem\": {}},\n                        {\"Outline\": {}},\n                        {\"OutlineItem\": {}},\n                        {\"Pagetab\": {}},\n                        {\"PropertyPage\": {}},\n                        {\"Indicator\": {}},\n                        {\"Graphic\": {}},\n                        {\"StaticText\": {}},\n                        {\"Text\": {}},\n                        {\"PushButton\": {}},\n                        {\"CheckButton\": {}},\n                        {\"RadioButton\": {}},\n                        {\"ComboBox\": {}},\n                        {\"DropList\": {}},\n                        {\"ProgressBar\": {}},\n                        {\"Dial\": {}},\n                        {\"HotkeyField\": {}},\n                        {\"Slider\": {}},\n                        {\"SpinButton\": {}},\n                        {\"Diagram\": {}},\n                        {\"Animation\": {}},\n                        {\"Equation\": {}},\n                        {\"ButtonDropdown\": {}},\n                        {\"ButtonMenu\": {}},\n                        {\"ButtonDropdownGrid\": {}},\n                        {\"Whitespace\": {}},\n                        {\"PageTabList\": {}},\n                        {\"Clock\": {}},\n                        {\"SplitButton\": {}},\n                        {\"IpAddress\": {}},\n                        {\"Nothing\": {}}\n                    ]\n                },\n                \"AccessibilityState\": {\n                    \"doc\": \"MSAA accessibility state. For information on what each state does, see the <a href=\\\"https://docs.microsoft.com/en-us/windows/win32/winauto/object-state-constants\\\">MSDN State Constants page</a>.\",\n                    \"external\": \"azul_impl::dom::AccessibilityState\",\n                    \"enum_fields\": [\n                        {\"Unavailable\": {}},\n                        {\"Selected\": {}},\n                        {\"Focused\": {}},\n                        {\"Checked\": {}},\n                        {\"Readonly\": {}},\n                        {\"Default\": {}},\n                        {\"Expanded\": {}},\n                        {\"Collapsed\": {}},\n                        {\"Busy\": {}},\n                        {\"Offscreen\": {}},\n                        {\"Focusable\": {}},\n                        {\"Selectable\": {}},\n                        {\"Linked\": {}},\n                        {\"Traversed\": {}},\n                        {\"Multiselectable\": {}},\n                        {\"Protected\": {}}\n                    ]\n                },\n                \"TabIndex\": {\n                    \"external\": \"azul_impl::dom::TabIndex\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { \"doc\": \"Automatic tab index, similar to simply setting `focusable = \\\"true\\\"` or `tabindex = 0`, (both have the effect of making the element focusable)\" }} ,\n                        { \"OverrideInParent\": { \"type\": \"u32\", \"doc\": \" Set the tab index in relation to its parent element (`tabindex = n`)\" }} ,\n                        { \"NoKeyboardFocus\": { \"doc\": \"Elements can be focused in callbacks, but are not accessible via keyboard / tab navigation (`tabindex = -1` ) \"}}\n                    ]\n                },\n                \"IdOrClass\": {\n                    \"external\": \"azul_impl::dom::IdOrClass\",\n                    \"enum_fields\": [\n                        {\"Id\": {\"type\": \"String\"}},\n                        {\"Class\": {\"type\": \"String\"}}\n                    ]\n                },\n                \"NodeDataInlineCssProperty\": {\n                    \"external\": \"azul_impl::dom::NodeDataInlineCssProperty\",\n                    \"enum_fields\": [\n                        {\"Normal\": {\"type\": \"CssProperty\"}},\n                        {\"Active\": {\"type\": \"CssProperty\"}},\n                        {\"Focus\": {\"type\": \"CssProperty\"}},\n                        {\"Hover\": {\"type\": \"CssProperty\"}}\n                    ]\n                }\n            }\n        },\n        \"menu\": {\n            \"classes\": {\n                \"Menu\": {\n                    \"doc\": \"Menu struct (application / window menu, dropdown menu, context menu). Modeled after the Windows API\",\n                    \"external\": \"azul_core::window::Menu\",\n                    \"struct_fields\": [\n                        {\"items\": {\"type\": \"MenuItemVec\", \"doc\": \"Items in this menu\"}},\n                        {\"position\": {\"type\": \"MenuPopupPosition\", \"doc\": \"Position of where the context menu should pop up. Ignored for application menus.\"}},\n                        {\"context_mouse_btn\": {\"type\": \"ContextMenuMouseButton\", \"doc\": \"Determines whether this context menu should pop up on a left, right or middle click\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"doc\": \"Creates an new, empty Menu\",\n                            \"fn_args\": [\n                                {\"items\": \"MenuItemVec\"}\n                            ],\n                            \"fn_body\": \"AzMenu::new(items)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"set_popup_position\": {\n                            \"doc\": \"Sets the popup position of the menu, ignored on menu bars\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"position\": \"MenuPopupPosition\"}\n                            ],\n                            \"fn_body\": \"menu.position = position;\"\n                        },\n                        \"with_popup_position\": {\n                            \"doc\": \"Sets the popup position of the menu, ignored on menu bars (builder method)\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"position\": \"MenuPopupPosition\"}\n                            ],\n                            \"returns\": {\"type\": \"Menu\"},\n                            \"fn_body\": \"let mut menu = menu.swap_with_default(); menu.position = position; menu\"\n                        }\n                    }\n                },\n                \"ContextMenuMouseButton\": {\n                    \"doc\": \"Determines whether this context menu should pop up on a left, right or middle click\",\n                    \"external\": \"azul_core::window::ContextMenuMouseButton\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"Right\": {}},\n                        {\"Middle\": {}},\n                        {\"Left\": {}}\n                    ]\n                },\n                \"MenuPopupPosition\": {\n                    \"doc\": \"Position of where the context menu should pop up\",\n                    \"external\": \"azul_core::window::MenuPopupPosition\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"BottomLeftOfCursor\": {}},\n                        {\"BottomRightOfCursor\": {}},\n                        {\"TopLeftOfCursor\": {}},\n                        {\"TopRightOfCursor\": {}},\n                        {\"BottomOfHitRect\": {}},\n                        {\"LeftOfHitRect\": {}},\n                        {\"TopOfHitRect\": {}},\n                        {\"RightOfHitRect\": {}},\n                        {\"AutoCursor\": {}},\n                        {\"AutoHitRect\": {}}\n                    ]\n                },\n                \"MenuItem\": {\n                    \"doc\": \"Item entry in a menu or menu bar\",\n                    \"external\": \"azul_core::window::MenuItem\",\n                    \"enum_fields\": [\n                        {\"String\": {\"type\": \"StringMenuItem\", \"doc\": \"Regular \\\"labeled\\\" menu item\"}},\n                        {\"Separator\": {\"doc\": \"Line separator, usually only rendered in vertical menus\"}},\n                        {\"BreakLine\": {\"doc\": \"Breaks items in a menu onto separate lines, usually only rendered in horizontal menu bars\"}}\n                    ]\n                },\n                \"StringMenuItem\": {\n                    \"doc\": \"Regular labeled menu item\",\n                    \"external\": \"azul_core::window::StringMenuItem\",\n                    \"struct_fields\": [\n                        {\"label\": {\"type\": \"String\", \"doc\": \"Label of the menu entry\"}},\n                        {\"accelerator\": {\"type\": \"OptionVirtualKeyCodeCombo\", \"doc\": \"Optional accelerator combination, (ex. \\\"CTRL + X\\\" = [VirtualKeyCode::Ctrl, VirtualKeyCode::X]) for keyboard shortcut\"}},\n                        {\"callback\": {\"type\": \"OptionMenuCallback\", \"doc\": \"Optional callback to call when the item is activated\"}},\n                        {\"state\": {\"type\": \"MenuItemState\", \"doc\": \"State of the menu entry (normal, greyed, disabled)\"}},\n                        {\"icon\": {\"type\": \"OptionMenuItemIcon\", \"doc\": \"Optional icon (checkbox or custom image) of the menu entry\"}},\n                        {\"children\": {\"type\": \"MenuItemVec\", \"doc\": \"Sub-menus of the window (empty by default)\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"doc\": \"Creates a new menu item\",\n                            \"fn_args\": [\n                                {\"label\": \"String\"}\n                            ],\n                            \"fn_body\": \"AzStringMenuItem::new(label)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"set_callback\": {\n                            \"doc\": \"Adds a callback to the menu item\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"CallbackType\"}\n                            ],\n                            \"fn_body\": \"stringmenuitem.callback = AzOptionMenuCallback::Some(AzMenuCallback { data, callback: AzCallback { cb: callback } });\"\n                        },\n                        \"with_callback\": {\n                            \"doc\": \"Adds a callback to the menu item\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"CallbackType\"}\n                            ],\n                            \"returns\": {\"type\": \"StringMenuItem\"},\n                            \"fn_body\": \"let mut stringmenuitem = stringmenuitem.swap_with_default(); stringmenuitem.callback = AzOptionMenuCallback::Some(AzMenuCallback { data, callback: AzCallback { cb: callback } }); stringmenuitem\"\n                        },\n                        \"add_child\": {\n                            \"doc\": \"Adds a single child submenu to the current menu\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"child\": \"MenuItem\"}\n                            ],\n                            \"fn_body\": \"let mut m = stringmenuitem.children.clone().into_library_owned_vec(); m.push(child); stringmenuitem.children = m.into();\"\n                        },\n                        \"with_child\": {\n                            \"doc\": \"Adds a single child submenu to the current menu\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"child\": \"MenuItem\"}\n                            ],\n                            \"returns\": {\"type\": \"StringMenuItem\"},\n                            \"fn_body\": \"let mut stringmenuitem = stringmenuitem.swap_with_default(); let mut m = stringmenuitem.children.clone().into_library_owned_vec(); m.push(child); stringmenuitem.children = m.into(); stringmenuitem\"\n                        },\n                        \"set_children\": {\n                            \"doc\": \"Sets the children of this menu\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"children\": \"MenuItemVec\"}\n                            ],\n                            \"fn_body\": \"stringmenuitem.children = children;\"\n                        },\n                        \"with_children\": {\n                            \"doc\": \"Adds a child submenu to the current menu\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"children\": \"MenuItemVec\"}\n                            ],\n                            \"returns\": {\"type\": \"StringMenuItem\"},\n                            \"fn_body\": \"let mut stringmenuitem = stringmenuitem.swap_with_default(); stringmenuitem.children = children; stringmenuitem\"\n                        }\n                    }\n                },\n                \"VirtualKeyCodeCombo\": {\n                    \"doc\": \"Combination of virtual key codes that have to be pressed together\",\n                    \"external\": \"azul_core::window::VirtualKeyCodeCombo\",\n                    \"struct_fields\": [\n                        {\"keys\": {\"type\": \"VirtualKeyCodeVec\"}}\n                    ]\n                },\n                \"MenuCallback\": {\n                    \"doc\": \"Similar to `dom.CallbackData`, stores some data + a callback to call when the menu is activated\",\n                    \"external\": \"azul_core::window::MenuCallback\",\n                    \"struct_fields\": [\n                        {\"callback\": {\"type\": \"Callback\", \"doc\": \"Callback to be called when the menu item is clicked\"}},\n                        {\"data\": {\"type\": \"RefAny\", \"doc\": \"Data of the callback to be called on\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"fn_args\": [\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"CallbackType\"}\n                            ],\n                            \"fn_body\": \"AzMenuCallback { callback: AzCallback { cb: callback }, data }\"\n                        }\n                    }\n                },\n                \"MenuItemIcon\": {\n                    \"doc\": \"Icon of a menu entry\",\n                    \"external\": \"azul_core::window::MenuItemIcon\",\n                    \"enum_fields\": [\n                        {\"Checkbox\": {\"type\": \"bool\", \"doc\": \"Menu item shows a checkbox (either checked or not)\"}},\n                        {\"Image\": {\"type\": \"ImageRef\", \"doc\": \"Menu item shows a custom image, usually in 16x16 format\"}}\n                    ]\n                },\n                \"MenuItemState\": {\n                    \"doc\": \"Describes the state of a menu item\",\n                    \"external\": \"azul_core::window::MenuItemState\",\n                    \"enum_fields\": [\n                        {\"Normal\": {\"doc\": \"Normal menu item (default)\"}},\n                        {\"Greyed\": {\"doc\": \"Menu item is greyed out and clicking it does nothing\"}},\n                        {\"Disabled\": {\"doc\": \"Menu item is disabled, clicking it does nothing - but NOT greyed out\"}}\n                    ]\n                }\n            }\n        },\n        \"css\": {\n            \"doc\": \"`Css` parsing module\",\n            \"classes\": {\n                \"CssRuleBlock\": {\n                    \"external\": \"azul_impl::css::CssRuleBlock\",\n                    \"struct_fields\": [\n                        {\"path\": {\"type\": \"CssPath\"}},\n                        {\"declarations\": {\"type\": \"CssDeclarationVec\"}}\n                    ]\n                },\n                \"CssDeclaration\": {\n                    \"external\": \"azul_impl::css::CssDeclaration\",\n                    \"enum_fields\": [\n                        {\"Static\": {\"type\": \"CssProperty\"}},\n                        {\"Dynamic\": {\"type\": \"DynamicCssProperty\"}}\n                    ]\n                },\n                \"DynamicCssProperty\": {\n                    \"external\": \"azul_impl::css::DynamicCssProperty\",\n                    \"struct_fields\": [\n                        {\"dynamic_id\": {\"type\": \"String\"}},\n                        {\"default_value\": {\"type\": \"CssProperty\"}}\n                    ]\n                },\n                \"CssPath\": {\n                    \"external\": \"azul_impl::css::CssPath\",\n                    \"struct_fields\": [\n                        {\"selectors\": {\"type\": \"CssPathSelectorVec\"}}\n                    ]\n                },\n                \"CssPathSelector\": {\n                    \"external\": \"azul_impl::css::CssPathSelector\",\n                    \"enum_fields\": [\n                        {\"Global\": {}},\n                        {\"Type\": {\"type\": \"NodeTypeKey\"}},\n                        {\"Class\": {\"type\": \"String\"}},\n                        {\"Id\": {\"type\": \"String\"}},\n                        {\"PseudoSelector\": {\"type\": \"CssPathPseudoSelector\"}},\n                        {\"DirectChildren\": {}},\n                        {\"Children\": {}}\n                    ]\n                },\n                \"NodeTypeKey\": {\n                    \"external\": \"azul_impl::css::NodeTypeTag\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"Body\": {}},\n                        {\"Div\": {}},\n                        {\"Br\": {}},\n                        {\"P\": {}},\n                        {\"Img\": {}},\n                        {\"IFrame\": {}}\n                    ]\n                },\n                \"CssPathPseudoSelector\": {\n                    \"external\": \"azul_impl::css::CssPathPseudoSelector\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"First\": {}},\n                        {\"Last\": {}},\n                        {\"NthChild\": {\"type\": \"CssNthChildSelector\"}},\n                        {\"Hover\": {}},\n                        {\"Active\": {}},\n                        {\"Focus\": {}}\n                    ]\n                },\n                \"CssNthChildSelector\": {\n                    \"external\": \"azul_impl::css::CssNthChildSelector\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"Number\": {\"type\": \"u32\"}},\n                        {\"Even\": {}},\n                        {\"Odd\": {}},\n                        {\"Pattern\": {\"type\": \"CssNthChildPattern\"}}\n                    ]\n                },\n                \"CssNthChildPattern\": {\n                    \"external\": \"azul_impl::css::CssNthChildPattern\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"repeat\": {\"type\": \"u32\"}},\n                        {\"offset\": {\"type\": \"u32\"}}\n                    ]\n                },\n                \"Stylesheet\": {\n                    \"external\": \"azul_impl::css::Stylesheet\",\n                    \"struct_fields\": [\n                        {\"rules\": {\"type\": \"CssRuleBlockVec\"}}\n                    ]\n                },\n                \"Css\": {\n                    \"external\": \"azul_impl::css::Css\",\n                    \"struct_fields\": [\n                        {\"stylesheets\": {\"type\": \"StylesheetVec\"}}\n                    ],\n                    \"constructors\": {\n                        \"empty\": {\n                            \"doc\": \"Returns an empty CSS style\",\n                            \"fn_args\": [],\n                            \"fn_body\":\"AzCss::empty()\"\n                        },\n                        \"from_string\": {\n                            \"doc\": \"Returns a CSS style parsed from a `String`\",\n                            \"fn_args\": [\n                                {\"s\": \"String\"}\n                            ],\n                            \"fn_body\":\"AzCss::from_string(s)\"\n                        }\n                    }\n                },\n                \"CssDeclaration\": {\n                    \"external\": \"azul_impl::css::CssDeclaration\",\n                    \"enum_fields\": [\n                        {\"Static\": {\"type\": \"CssProperty\"}},\n                        {\"Dynamic\": {\"type\": \"DynamicCssProperty\"}}\n                    ]\n                },\n                \"DynamicCssProperty\": {\n                    \"external\": \"azul_impl::css::DynamicCssProperty\",\n                    \"struct_fields\": [\n                        {\"dynamic_id\": {\"type\": \"String\"}},\n                        {\"default_value\": {\"type\": \"CssProperty\"}}\n                    ]\n                },\n                \"CssPropertyType\": {\n                    \"external\": \"azul_impl::css::CssPropertyType\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"TextColor\": {}},\n                        {\"FontSize\": {}},\n                        {\"FontFamily\": {}},\n                        {\"TextAlign\": {}},\n                        {\"LetterSpacing\": {}},\n                        {\"LineHeight\": {}},\n                        {\"WordSpacing\": {}},\n                        {\"TabWidth\": {}},\n                        {\"Cursor\": {}},\n                        {\"Display\": {}},\n                        {\"Float\": {}},\n                        {\"BoxSizing\": {}},\n                        {\"Width\": {}},\n                        {\"Height\": {}},\n                        {\"MinWidth\": {}},\n                        {\"MinHeight\": {}},\n                        {\"MaxWidth\": {}},\n                        {\"MaxHeight\": {}},\n                        {\"Position\": {}},\n                        {\"Top\": {}},\n                        {\"Right\": {}},\n                        {\"Left\": {}},\n                        {\"Bottom\": {}},\n                        {\"FlexWrap\": {}},\n                        {\"FlexDirection\": {}},\n                        {\"FlexGrow\": {}},\n                        {\"FlexShrink\": {}},\n                        {\"JustifyContent\": {}},\n                        {\"AlignItems\": {}},\n                        {\"AlignContent\": {}},\n                        {\"BackgroundContent\": {}},\n                        {\"BackgroundPosition\": {}},\n                        {\"BackgroundSize\": {}},\n                        {\"BackgroundRepeat\": {}},\n                        {\"OverflowX\": {}},\n                        {\"OverflowY\": {}},\n                        {\"PaddingTop\": {}},\n                        {\"PaddingLeft\": {}},\n                        {\"PaddingRight\": {}},\n                        {\"PaddingBottom\": {}},\n                        {\"MarginTop\": {}},\n                        {\"MarginLeft\": {}},\n                        {\"MarginRight\": {}},\n                        {\"MarginBottom\": {}},\n                        {\"BorderTopLeftRadius\": {}},\n                        {\"BorderTopRightRadius\": {}},\n                        {\"BorderBottomLeftRadius\": {}},\n                        {\"BorderBottomRightRadius\": {}},\n                        {\"BorderTopColor\": {}},\n                        {\"BorderRightColor\": {}},\n                        {\"BorderLeftColor\": {}},\n                        {\"BorderBottomColor\": {}},\n                        {\"BorderTopStyle\": {}},\n                        {\"BorderRightStyle\": {}},\n                        {\"BorderLeftStyle\": {}},\n                        {\"BorderBottomStyle\": {}},\n                        {\"BorderTopWidth\": {}},\n                        {\"BorderRightWidth\": {}},\n                        {\"BorderLeftWidth\": {}},\n                        {\"BorderBottomWidth\": {}},\n                        {\"BoxShadowLeft\": {}},\n                        {\"BoxShadowRight\": {}},\n                        {\"BoxShadowTop\": {}},\n                        {\"BoxShadowBottom\": {}},\n                        {\"ScrollbarStyle\": {}},\n                        {\"Opacity\": {}},\n                        {\"Transform\": {}},\n                        {\"TransformOrigin\": {}},\n                        {\"PerspectiveOrigin\": {}},\n                        {\"BackfaceVisibility\": {}},\n                        {\"MixBlendMode\": {}},\n                        {\"Filter\": {}},\n                        {\"BackdropFilter\": {}},\n                        {\"TextShadow\": {}}\n                    ]\n                },\n                \"AnimationInterpolationFunction\": {\n                    \"external\": \"azul_impl::css::AnimationInterpolationFunction\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"Ease\": {}},\n                        {\"Linear\": {}},\n                        {\"EaseIn\": {}},\n                        {\"EaseOut\": {}},\n                        {\"EaseInOut\": {}},\n                        {\"CubicBezier\": {\"type\":\"SvgCubicCurve\"}}\n                    ]\n                },\n                \"InterpolateContext\": {\n                    \"external\": \"azul_impl::css::InterpolateResolver\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"animation_func\": {\"type\": \"AnimationInterpolationFunction\"}},\n                        {\"parent_rect_width\": {\"type\": \"f32\"}},\n                        {\"parent_rect_height\": {\"type\": \"f32\"}},\n                        {\"current_rect_width\": {\"type\": \"f32\"}},\n                        {\"current_rect_height\": {\"type\": \"f32\"}}\n                    ]\n                },\n                \"ColorU\": {\n                    \"external\": \"azul_impl::css::ColorU\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"r\": {\"type\": \"u8\"}},\n                        {\"g\": {\"type\": \"u8\"}},\n                        {\"b\": {\"type\": \"u8\"}},\n                        {\"a\": {\"type\": \"u8\"}}\n                    ],\n                    \"constructors\": {\n                        \"from_str\": {\n                            \"fn_args\":[\n                                {\"string\": \"String\"}\n                            ],\n                            \"fn_body\": \"azul_impl::css::css_parser::parse_css_color(string.as_str()).ok().unwrap_or(AzColorU::BLACK)\"\n                        },\n                        \"transparent\": {\n                            \"fn_args\": [],\n                            \"fn_body\": \"AzColorU::TRANSPARENT\"\n                        },\n                        \"white\": {\n                            \"fn_args\": [],\n                            \"fn_body\": \"AzColorU::WHITE\"\n                        },\n                        \"black\": {\n                            \"fn_args\": [],\n                            \"fn_body\": \"AzColorU::BLACK\"\n                        }\n                    },\n                    \"functions\": {\n                        \"to_hash\": {\n                            \"fn_args\":[\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"String\"},\n                            \"fn_body\": \"coloru.to_hash().into()\"\n                        }\n                    }\n                },\n                \"SizeMetric\": {\n                    \"external\": \"azul_impl::css::SizeMetric\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Px\": {}},\n                        {\"Pt\": {}},\n                        {\"Em\": {}},\n                        {\"Percent\": {}}\n                    ]\n                },\n                \"FloatValue\": {\n                    \"external\": \"azul_impl::css::FloatValue\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"number\": {\"type\": \"isize\"}}\n                    ]\n                },\n                \"PixelValue\": {\n                    \"external\": \"azul_impl::css::PixelValue\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"metric\": {\"type\": \"SizeMetric\"}},\n                        {\"number\": {\"type\": \"FloatValue\"}}\n                    ]\n                },\n                \"PixelValueNoPercent\": {\n                    \"external\": \"azul_impl::css::PixelValueNoPercent\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"BoxShadowClipMode\": {\n                    \"external\": \"azul_impl::css::BoxShadowClipMode\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Outset\": {}},\n                        {\"Inset\": {}}\n                    ]\n                },\n                \"StyleBoxShadow\": {\n                    \"external\": \"azul_impl::css::StyleBoxShadow\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        { \"offset\": {\"type\": \"[PixelValueNoPercent;2]\" }},\n                        { \"color\": {\"type\": \"ColorU\" }},\n                        { \"blur_radius\": {\"type\": \"PixelValueNoPercent\" }},\n                        { \"spread_radius\": {\"type\": \"PixelValueNoPercent\" }},\n                        { \"clip_mode\": {\"type\": \"BoxShadowClipMode\" }}\n                    ]\n                },\n                \"StyleMixBlendMode\": {\n                    \"external\": \"azul_impl::css::StyleMixBlendMode\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"Normal\": {}},\n                        {\"Multiply\": {}},\n                        {\"Screen\": {}},\n                        {\"Overlay\": {}},\n                        {\"Darken\": {}},\n                        {\"Lighten\": {}},\n                        {\"ColorDodge\": {}},\n                        {\"ColorBurn\": {}},\n                        {\"HardLight\": {}},\n                        {\"SoftLight\": {}},\n                        {\"Difference\": {}},\n                        {\"Exclusion\": {}},\n                        {\"Hue\": {}},\n                        {\"Saturation\": {}},\n                        {\"Color\": {}},\n                        {\"Luminosity\": {}}\n                    ]\n                },\n                \"StyleFilter\": {\n                    \"external\": \"azul_impl::css::StyleFilter\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"Blend\": {\"type\": \"StyleMixBlendMode\"}},\n                        {\"Flood\": {\"type\": \"ColorU\"}},\n                        {\"Blur\": {\"type\": \"StyleBlur\"}},\n                        {\"Opacity\": {\"type\": \"PercentageValue\"}},\n                        {\"ColorMatrix\": {\"type\": \"StyleColorMatrix\"}},\n                        {\"DropShadow\": {\"type\": \"StyleBoxShadow\"}},\n                        {\"ComponentTransfer\": {}},\n                        {\"Offset\": {\"type\": \"StyleFilterOffset\"}},\n                        {\"Composite\": {\"type\": \"StyleCompositeFilter\"}}\n                    ]\n                },\n                \"StyleBlur\": {\n                    \"external\": \"azul_impl::css::StyleBlur\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"width\": {\"type\": \"PixelValue\"}},\n                        {\"height\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"StyleColorMatrix\": {\n                    \"external\": \"azul_impl::css::StyleColorMatrix\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"matrix\": {\"type\": \"[FloatValue;20]\"}}\n                    ]\n                },\n                \"StyleFilterOffset\": {\n                    \"external\": \"azul_impl::css::StyleFilterOffset\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"x\": {\"type\": \"PixelValue\"}},\n                        {\"y\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"StyleCompositeFilter\": {\n                    \"external\": \"azul_impl::css::StyleCompositeFilter\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"Over\": {}},\n                        {\"In\": {}},\n                        {\"Atop\": {}},\n                        {\"Out\": {}},\n                        {\"Xor\": {}},\n                        {\"Lighter\": {}},\n                        {\"Arithmetic\": {\"type\": \"[FloatValue;4]\"}}\n                    ]\n                },\n                \"LayoutAlignContent\": {\n                    \"external\": \"azul_impl::css::LayoutAlignContent\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"Stretch\": {\"doc\": \"Default value. Lines stretch to take up the remaining space\"}},\n                        {\"Center\": {\"doc\": \"Lines are packed toward the center of the flex container\"}},\n                        {\"Start\": {\"doc\": \"Lines are packed toward the start of the flex container\"}},\n                        {\"End\": {\"doc\": \"Lines are packed toward the end of the flex container\"}},\n                        {\"SpaceBetween\": {\"doc\": \"Lines are evenly distributed in the flex container\"}},\n                        {\"SpaceAround\": {\"doc\": \"Lines are evenly distributed in the flex container, with half-size spaces on either end\"}}\n                    ]\n                },\n                \"LayoutAlignItems\": {\n                    \"external\": \"azul_impl::css::LayoutAlignItems\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"Stretch\": {\"doc\": \"Items are stretched to fit the container\"}},\n                        {\"Center\": {\"doc\": \"Items are positioned at the center of the container\"}},\n                        {\"FlexStart\": {\"doc\": \"Items are positioned at the beginning of the container\"}},\n                        {\"FlexEnd\": {\"doc\": \"Items are positioned at the end of the container\"}}\n                    ]\n                },\n                \"LayoutBottom\": {\n                    \"external\": \"azul_impl::css::LayoutBottom\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"LayoutBoxSizing\": {\n                    \"external\": \"azul_impl::css::LayoutBoxSizing\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"ContentBox\": {}},\n                        {\"BorderBox\": {}}\n                    ]\n                },\n                \"LayoutFlexDirection\": {\n                    \"external\": \"azul_impl::css::LayoutFlexDirection\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"Row\": {}},\n                        {\"RowReverse\": {}},\n                        {\"Column\": {}},\n                        {\"ColumnReverse\": {}}\n                    ]\n                },\n                \"LayoutDisplay\": {\n                    \"external\": \"azul_impl::css::LayoutDisplay\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"None\": {}},\n                        {\"Flex\": {}},\n                        {\"Block\": {}},\n                        {\"InlineBlock\": {}}\n                    ]\n                },\n                \"LayoutFlexGrow\": {\n                    \"external\": \"azul_impl::css::LayoutFlexGrow\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"FloatValue\" }}\n                    ]\n                },\n                \"LayoutFlexShrink\": {\n                    \"external\": \"azul_impl::css::LayoutFlexShrink\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"FloatValue\" }}\n                    ]\n                },\n                \"LayoutFloat\": {\n                    \"external\": \"azul_impl::css::LayoutFloat\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"Left\": {}},\n                        {\"Right\": {}}\n                    ]\n                },\n                \"LayoutHeight\": {\n                    \"external\": \"azul_impl::css::LayoutHeight\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"PixelValue\" }}\n                    ]\n                },\n                \"LayoutJustifyContent\": {\n                    \"external\": \"azul_impl::css::LayoutJustifyContent\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                         {\"Start\": {\"doc\": \"Default value. Items are positioned at the beginning of the container\"}},\n                         {\"End\": {\"doc\": \"Items are positioned at the end of the container\"}},\n                         {\"Center\": {\"doc\": \"Items are positioned at the center of the container\"}},\n                         {\"SpaceBetween\": {\"doc\": \"Items are positioned with space between the lines\"}},\n                         {\"SpaceAround\": {\"doc\": \"Items are positioned with space before, between, and after the lines\"}},\n                         {\"SpaceEvenly\": {\"doc\": \"Items are distributed so that the spacing between any two adjacent alignment subjects, before the first alignment subject, and after the last alignment subject is the same\"}}\n                    ]\n                },\n                \"LayoutLeft\": {\n                    \"external\": \"azul_impl::css::LayoutLeft\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"PixelValue\" }}\n                    ]\n                },\n                \"LayoutMarginBottom\": {\n                    \"external\": \"azul_impl::css::LayoutMarginBottom\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"PixelValue\" }}\n                    ]\n                },\n                \"LayoutMarginLeft\": {\n                    \"external\": \"azul_impl::css::LayoutMarginLeft\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"PixelValue\" }}\n                    ]\n                },\n                \"LayoutMarginRight\": {\n                    \"external\": \"azul_impl::css::LayoutMarginRight\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"PixelValue\" }}\n                    ]\n                },\n                \"LayoutMarginTop\": {\n                    \"external\": \"azul_impl::css::LayoutMarginTop\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"PixelValue\" }}\n                    ]\n                },\n                \"LayoutMaxHeight\": {\n                    \"external\": \"azul_impl::css::LayoutMaxHeight\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"PixelValue\" }}\n                    ]\n                },\n                \"LayoutMaxWidth\": {\n                    \"external\": \"azul_impl::css::LayoutMaxWidth\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"PixelValue\" }}\n                    ]\n                },\n                \"LayoutMinHeight\": {\n                    \"external\": \"azul_impl::css::LayoutMinHeight\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"PixelValue\" }}\n                    ]\n                },\n                \"LayoutMinWidth\": {\n                    \"external\": \"azul_impl::css::LayoutMinWidth\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"PixelValue\" }}\n                    ]\n                },\n                \"LayoutPaddingBottom\": {\n                    \"external\": \"azul_impl::css::LayoutPaddingBottom\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"PixelValue\" }}\n                    ]\n                },\n                \"LayoutPaddingLeft\": {\n                    \"external\": \"azul_impl::css::LayoutPaddingLeft\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"PixelValue\" }}\n                    ]\n                },\n                \"LayoutPaddingRight\": {\n                    \"external\": \"azul_impl::css::LayoutPaddingRight\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"PixelValue\" }}\n                    ]\n                },\n                \"LayoutPaddingTop\": {\n                    \"external\": \"azul_impl::css::LayoutPaddingTop\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"PixelValue\" }}\n                    ]\n                },\n                \"LayoutPosition\": {\n                    \"external\": \"azul_impl::css::LayoutPosition\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"Static\": {}},\n                        {\"Relative\": {}},\n                        {\"Absolute\": {}},\n                        {\"Fixed\": {}}\n                    ]\n                },\n                \"LayoutRight\": {\n                    \"external\": \"azul_impl::css::LayoutRight\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"PixelValue\" }}\n                    ]\n                },\n                \"LayoutTop\": {\n                    \"external\": \"azul_impl::css::LayoutTop\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"PixelValue\" }}\n                    ]\n                },\n                \"LayoutWidth\": {\n                    \"external\": \"azul_impl::css::LayoutWidth\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": { \"type\": \"PixelValue\" }}\n                    ]\n                },\n                \"LayoutFlexWrap\": {\n                    \"external\": \"azul_impl::css::LayoutFlexWrap\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"Wrap\": {}},\n                        {\"NoWrap\": {}}\n                    ]\n                },\n                \"LayoutOverflow\": {\n                    \"external\": \"azul_impl::css::LayoutOverflow\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                         {\"Scroll\": {\"doc\": \"Always shows a scroll bar, overflows on scroll\"}},\n                         {\"Auto\": {\"doc\": \"Does not show a scroll bar by default, only when text is overflowing\"}},\n                         {\"Hidden\": {\"doc\": \"Never shows a scroll bar, simply clips text\"}},\n                         {\"Visible\": {\"doc\": \"Doesn't show a scroll bar, simply overflows the text\"}}\n                    ]\n                },\n                \"FloatValue\": {\n                    \"external\": \"azul_impl::css::FloatValue\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        { \"number\": {\"type\": \"isize\" }}\n                    ]\n                },\n                \"PercentageValue\": {\n                    \"external\": \"azul_impl::css::PercentageValue\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        { \"number\": {\"type\": \"FloatValue\" }}\n                    ]\n                },\n                \"AngleMetric\": {\n                    \"external\": \"azul_impl::css::AngleMetric\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Degree\": {}},\n                        {\"Radians\": {}},\n                        {\"Grad\": {}},\n                        {\"Turn\": {}},\n                        {\"Percent\": {}}\n                    ]\n                },\n                \"AngleValue\": {\n                    \"external\": \"azul_impl::css::AngleValue\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        { \"metric\": {\"type\": \"AngleMetric\" }},\n                        { \"number\": {\"type\": \"FloatValue\" }}\n                    ],\n                    \"functions\": {\n                        \"get_degrees\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\":\"f32\"},\n                            \"fn_body\": \"anglevalue.to_degrees()\"\n                        }\n                    }\n                },\n                \"NormalizedLinearColorStop\": {\n                    \"external\": \"azul_impl::css::NormalizedLinearColorStop\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"offset\": {\"type\": \"PercentageValue\"}},\n                        {\"color\": {\"type\": \"ColorU\"}}\n                    ]\n                },\n                \"NormalizedRadialColorStop\": {\n                    \"external\": \"azul_impl::css::NormalizedRadialColorStop\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"offset\": {\"type\": \"AngleValue\"}},\n                        {\"color\": {\"type\": \"ColorU\"}}\n                    ]\n                },\n                \"DirectionCorner\": {\n                    \"external\": \"azul_impl::css::DirectionCorner\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Right\": {}},\n                        {\"Left\": {}},\n                        {\"Top\": {}},\n                        {\"Bottom\": {}},\n                        {\"TopRight\": {}},\n                        {\"TopLeft\": {}},\n                        {\"BottomRight\": {}},\n                        {\"BottomLeft\": {}}\n                    ]\n                },\n                \"DirectionCorners\": {\n                    \"external\": \"azul_impl::css::DirectionCorners\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"from\": {\"type\": \"DirectionCorner\"}},\n                        {\"to\": {\"type\": \"DirectionCorner\"}}\n                    ]\n                },\n                \"Direction\": {\n                    \"external\": \"azul_impl::css::Direction\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Angle\": {\"type\": \"AngleValue\"}},\n                        {\"FromTo\": {\"type\": \"DirectionCorners\"}}\n                    ]\n                },\n                \"ExtendMode\": {\n                    \"external\": \"azul_impl::css::ExtendMode\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Clamp\": {}},\n                        {\"Repeat\": {}}\n                    ]\n                },\n                \"LinearGradient\": {\n                    \"external\": \"azul_impl::css::LinearGradient\",\n                    \"struct_fields\": [\n                        {\"direction\": {\"type\": \"Direction\"}},\n                        {\"extend_mode\": {\"type\": \"ExtendMode\"}},\n                        {\"stops\": {\"type\": \"NormalizedLinearColorStopVec\"}}\n                    ]\n                },\n                \"Shape\": {\n                    \"external\": \"azul_impl::css::Shape\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Ellipse\": {}},\n                        {\"Circle\": {}}\n                    ]\n                },\n                \"RadialGradientSize\": {\n                    \"external\": \"azul_impl::css::RadialGradientSize\",\n                    \"enum_fields\": [\n                        {\"ClosestSide\": {\"doc\": \"The gradients ending shape meets the side of the box closest to its center (for circles) or meets both the vertical and horizontal sides closest to the center (for ellipses)\"}},\n                        {\"ClosestCorner\": {\"doc\": \"The gradients ending shape is sized so that it exactly meets the closest corner of the box from its center\"}},\n                        {\"FarthestSide\": {\"doc\": \"Similar to closest-side, except the ending shape is sized to meet the side of the box farthest from its center (or vertical and horizontal sides)\"}},\n                        {\"FarthestCorner\": {\"doc\": \"The default value, the gradient's ending shape is sized so that it exactly meets the farthest corner of the box from its center\"}}\n                    ]\n                },\n                \"RadialGradient\": {\n                    \"external\": \"azul_impl::css::RadialGradient\",\n                    \"struct_fields\": [\n                        {\"shape\": {\"type\": \"Shape\"}},\n                        {\"size\": {\"type\": \"RadialGradientSize\"}},\n                        {\"position\": {\"type\": \"StyleBackgroundPosition\"}},\n                        {\"extend_mode\": {\"type\": \"ExtendMode\"}},\n                        {\"stops\": {\"type\": \"NormalizedLinearColorStopVec\"}}\n                    ]\n                },\n                \"ConicGradient\": {\n                    \"external\": \"azul_impl::css::ConicGradient\",\n                    \"struct_fields\": [\n                        {\"extend_mode\": {\"type\": \"ExtendMode\"}},\n                        {\"center\": {\"type\": \"StyleBackgroundPosition\"}},\n                        {\"angle\": {\"type\": \"AngleValue\"}},\n                        {\"stops\": {\"type\": \"NormalizedRadialColorStopVec\"}}\n                    ]\n                },\n                \"StyleBackgroundContent\": {\n                    \"external\": \"azul_impl::css::StyleBackgroundContent\",\n                    \"enum_fields\": [\n                        {\"LinearGradient\": {\"type\": \"LinearGradient\"}},\n                        {\"RadialGradient\": {\"type\": \"RadialGradient\"}},\n                        {\"ConicGradient\": {\"type\": \"ConicGradient\"}},\n                        {\"Image\": {\"type\": \"String\"}},\n                        {\"Color\": {\"type\": \"ColorU\"}}\n                    ]\n                },\n                \"BackgroundPositionHorizontal\": {\n                    \"external\": \"azul_impl::css::BackgroundPositionHorizontal\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Left\": {}},\n                        {\"Center\": {}},\n                        {\"Right\": {}},\n                        {\"Exact\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"BackgroundPositionVertical\": {\n                    \"external\": \"azul_impl::css::BackgroundPositionVertical\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Top\": {}},\n                        {\"Center\": {}},\n                        {\"Bottom\": {}},\n                        {\"Exact\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"StyleBackgroundPosition\": {\n                    \"external\": \"azul_impl::css::StyleBackgroundPosition\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"horizontal\": {\"type\": \"BackgroundPositionHorizontal\"}},\n                        {\"vertical\": {\"type\": \"BackgroundPositionVertical\"}}\n                    ]\n                },\n                \"StyleBackgroundRepeat\": {\n                    \"external\": \"azul_impl::css::StyleBackgroundRepeat\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"NoRepeat\": {}},\n                        {\"Repeat\": {}},\n                        {\"RepeatX\": {}},\n                        {\"RepeatY\": {}}\n                    ]\n                },\n                \"StyleBackgroundSize\": {\n                    \"external\": \"azul_impl::css::StyleBackgroundSize\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"ExactSize\": {\"type\": \"[PixelValue;2]\"}},\n                        {\"Contain\": {}},\n                        {\"Cover\": {}}\n                    ]\n                },\n                \"StyleBorderBottomColor\": {\n                    \"external\": \"azul_impl::css::StyleBorderBottomColor\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"ColorU\"}}\n                    ]\n                },\n                \"StyleBorderBottomLeftRadius\": {\n                    \"external\": \"azul_impl::css::StyleBorderBottomLeftRadius\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"StyleBorderBottomRightRadius\": {\n                    \"external\": \"azul_impl::css::StyleBorderBottomRightRadius\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"BorderStyle\": {\n                    \"external\": \"azul_impl::css::BorderStyle\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"None\": {}},\n                        {\"Solid\": {}},\n                        {\"Double\": {}},\n                        {\"Dotted\": {}},\n                        {\"Dashed\": {}},\n                        {\"Hidden\": {}},\n                        {\"Groove\": {}},\n                        {\"Ridge\": {}},\n                        {\"Inset\": {}},\n                        {\"Outset\": {}}\n                    ]\n                },\n                \"StyleBorderBottomStyle\": {\n                    \"external\": \"azul_impl::css::StyleBorderBottomStyle\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"BorderStyle\"}}\n                    ]\n                },\n                \"LayoutBorderBottomWidth\": {\n                    \"external\": \"azul_impl::css::LayoutBorderBottomWidth\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"StyleBorderLeftColor\": {\n                    \"external\": \"azul_impl::css::StyleBorderLeftColor\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"ColorU\"}}\n                    ]\n                },\n                \"StyleBorderLeftStyle\": {\n                    \"external\": \"azul_impl::css::StyleBorderLeftStyle\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"BorderStyle\"}}\n                    ]\n                },\n                \"LayoutBorderLeftWidth\": {\n                    \"external\": \"azul_impl::css::LayoutBorderLeftWidth\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"StyleBorderRightColor\": {\n                    \"external\": \"azul_impl::css::StyleBorderRightColor\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"ColorU\"}}\n                    ]\n                },\n                \"StyleBorderRightStyle\": {\n                    \"external\": \"azul_impl::css::StyleBorderRightStyle\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"BorderStyle\"}}\n                    ]\n                },\n                \"LayoutBorderRightWidth\": {\n                    \"external\": \"azul_impl::css::LayoutBorderRightWidth\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"StyleBorderTopColor\": {\n                    \"external\": \"azul_impl::css::StyleBorderTopColor\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"ColorU\"}}\n                    ]\n                },\n                \"StyleBorderTopLeftRadius\": {\n                    \"external\": \"azul_impl::css::StyleBorderTopLeftRadius\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"StyleBorderTopRightRadius\": {\n                    \"external\": \"azul_impl::css::StyleBorderTopRightRadius\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"StyleBorderTopStyle\": {\n                    \"external\": \"azul_impl::css::StyleBorderTopStyle\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"BorderStyle\"}}\n                    ]\n                },\n                \"LayoutBorderTopWidth\": {\n                    \"external\": \"azul_impl::css::LayoutBorderTopWidth\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"ScrollbarInfo\": {\n                    \"external\": \"azul_impl::css::ScrollbarInfo\",\n                    \"struct_fields\": [\n                        {\"width\": {\"type\": \"LayoutWidth\"}},\n                        {\"padding_left\": {\"type\": \"LayoutPaddingLeft\"}},\n                        {\"padding_right\": {\"type\": \"LayoutPaddingRight\"}},\n                        {\"track\": {\"type\": \"StyleBackgroundContent\"}},\n                        {\"thumb\": {\"type\": \"StyleBackgroundContent\"}},\n                        {\"button\": {\"type\": \"StyleBackgroundContent\"}},\n                        {\"corner\": {\"type\": \"StyleBackgroundContent\"}},\n                        {\"resizer\": {\"type\": \"StyleBackgroundContent\"}}\n                    ]\n                },\n                \"ScrollbarStyle\": {\n                    \"external\": \"azul_impl::css::ScrollbarStyle\",\n                    \"struct_fields\": [\n                        {\"horizontal\": {\"type\": \"ScrollbarInfo\"}},\n                        {\"vertical\": {\"type\": \"ScrollbarInfo\"}}\n                    ]\n                },\n                \"StyleCursor\": {\n                    \"external\": \"azul_impl::css::StyleCursor\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"Alias\": {}},\n                        {\"AllScroll\": {}},\n                        {\"Cell\": {}},\n                        {\"ColResize\": {}},\n                        {\"ContextMenu\": {}},\n                        {\"Copy\": {}},\n                        {\"Crosshair\": {}},\n                        {\"Default\": {}},\n                        {\"EResize\": {}},\n                        {\"EwResize\": {}},\n                        {\"Grab\": {}},\n                        {\"Grabbing\": {}},\n                        {\"Help\": {}},\n                        {\"Move\": {}},\n                        {\"NResize\": {}},\n                        {\"NsResize\": {}},\n                        {\"NeswResize\": {}},\n                        {\"NwseResize\": {}},\n                        {\"Pointer\": {}},\n                        {\"Progress\": {}},\n                        {\"RowResize\": {}},\n                        {\"SResize\": {}},\n                        {\"SeResize\": {}},\n                        {\"Text\": {}},\n                        {\"Unset\": {}},\n                        {\"VerticalText\": {}},\n                        {\"WResize\": {}},\n                        {\"Wait\": {}},\n                        {\"ZoomIn\": {}},\n                        {\"ZoomOut\": {}}\n                    ]\n                },\n                \"StyleFontFamily\": {\n                    \"external\": \"azul_impl::css::StyleFontFamily\",\n                    \"enum_fields\": [\n                        {\"System\": {\"type\": \"String\", \"doc\": \"Postscript identifier for a system-native font (for example \\\"Arial\\\"). Also supports HTML-native values such as `sans-serif`, `serif`, `monospace`, `fantasy` and `oblique`.\"}},\n                        {\"File\": {\"type\": \"String\", \"doc\": \"Path to a font loaded from a file\"}},\n                        {\"Ref\": {\"type\": \"FontRef\", \"doc\": \"Reference-counted font bytes - usually used on nodes that have to must be rendered with a specific font\"}}\n                    ]\n                },\n                \"StyleFontSize\": {\n                    \"external\": \"azul_impl::css::StyleFontSize\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"StyleLetterSpacing\": {\n                    \"external\": \"azul_impl::css::StyleLetterSpacing\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"StyleLineHeight\": {\n                    \"external\": \"azul_impl::css::StyleLineHeight\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"PercentageValue\"}}\n                    ]\n                },\n                \"StyleTabWidth\": {\n                    \"external\": \"azul_impl::css::StyleTabWidth\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"PercentageValue\"}}\n                    ]\n                },\n                \"StyleOpacity\": {\n                    \"external\": \"azul_impl::css::StyleOpacity\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"PercentageValue\"}}\n                    ]\n                },\n                \"StyleTransformOrigin\": {\n                    \"external\": \"azul_impl::css::StyleTransformOrigin\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"x\": {\"type\": \"PixelValue\"}},\n                        {\"y\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"StylePerspectiveOrigin\": {\n                    \"external\": \"azul_impl::css::StyleTransformOrigin\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"x\": {\"type\": \"PixelValue\"}},\n                        {\"y\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"StyleBackfaceVisibility\": {\n                    \"external\": \"azul_impl::css::StyleBackfaceVisibility\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"Hidden\": {}},\n                        {\"Visible\": {}}\n                    ]\n                },\n                \"StyleTransform\": {\n                    \"external\": \"azul_impl::css::StyleTransform\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"Matrix\": {\"type\": \"StyleTransformMatrix2D\"}},\n                        {\"Matrix3D\": {\"type\": \"StyleTransformMatrix3D\"}},\n                        {\"Translate\": {\"type\": \"StyleTransformTranslate2D\"}},\n                        {\"Translate3D\": {\"type\": \"StyleTransformTranslate3D\"}},\n                        {\"TranslateX\": {\"type\": \"PixelValue\"}},\n                        {\"TranslateY\": {\"type\": \"PixelValue\"}},\n                        {\"TranslateZ\": {\"type\": \"PixelValue\"}},\n                        {\"Rotate\": {\"type\": \"AngleValue\"}},\n                        {\"Rotate3D\": {\"type\": \"StyleTransformRotate3D\"}},\n                        {\"RotateX\": {\"type\": \"AngleValue\"}},\n                        {\"RotateY\": {\"type\": \"AngleValue\"}},\n                        {\"RotateZ\": {\"type\": \"AngleValue\"}},\n                        {\"Scale\": {\"type\": \"StyleTransformScale2D\"}},\n                        {\"Scale3D\": {\"type\": \"StyleTransformScale3D\"}},\n                        {\"ScaleX\": {\"type\": \"PercentageValue\"}},\n                        {\"ScaleY\": {\"type\": \"PercentageValue\"}},\n                        {\"ScaleZ\": {\"type\": \"PercentageValue\"}},\n                        {\"Skew\": {\"type\": \"StyleTransformSkew2D\"}},\n                        {\"SkewX\": {\"type\": \"PercentageValue\"}},\n                        {\"SkewY\": {\"type\": \"PercentageValue\"}},\n                        {\"Perspective\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"StyleTransformMatrix2D\": {\n                    \"external\": \"azul_impl::css::StyleTransformMatrix2D\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"a\": {\"type\": \"PixelValue\" }},\n                        {\"b\": {\"type\": \"PixelValue\" }},\n                        {\"c\": {\"type\": \"PixelValue\" }},\n                        {\"d\": {\"type\": \"PixelValue\" }},\n                        {\"tx\": {\"type\": \"PixelValue\" }},\n                        {\"ty\": {\"type\": \"PixelValue\" }}\n                    ]\n                },\n                \"StyleTransformMatrix3D\": {\n                    \"external\": \"azul_impl::css::StyleTransformMatrix3D\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"m11\": {\"type\": \"PixelValue\"}},\n                        {\"m12\": {\"type\": \"PixelValue\"}},\n                        {\"m13\": {\"type\": \"PixelValue\"}},\n                        {\"m14\": {\"type\": \"PixelValue\"}},\n                        {\"m21\": {\"type\": \"PixelValue\"}},\n                        {\"m22\": {\"type\": \"PixelValue\"}},\n                        {\"m23\": {\"type\": \"PixelValue\"}},\n                        {\"m24\": {\"type\": \"PixelValue\"}},\n                        {\"m31\": {\"type\": \"PixelValue\"}},\n                        {\"m32\": {\"type\": \"PixelValue\"}},\n                        {\"m33\": {\"type\": \"PixelValue\"}},\n                        {\"m34\": {\"type\": \"PixelValue\"}},\n                        {\"m41\": {\"type\": \"PixelValue\"}},\n                        {\"m42\": {\"type\": \"PixelValue\"}},\n                        {\"m43\": {\"type\": \"PixelValue\"}},\n                        {\"m44\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"StyleTransformTranslate2D\": {\n                    \"external\": \"azul_impl::css::StyleTransformTranslate2D\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"x\": {\"type\": \"PixelValue\"}},\n                        {\"y\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"StyleTransformTranslate3D\": {\n                    \"external\": \"azul_impl::css::StyleTransformTranslate3D\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"x\": {\"type\": \"PixelValue\"}},\n                        {\"y\": {\"type\": \"PixelValue\"}},\n                        {\"z\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"StyleTransformRotate3D\": {\n                    \"external\": \"azul_impl::css::StyleTransformRotate3D\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"x\": {\"type\": \"PercentageValue\"}},\n                        {\"y\": {\"type\": \"PercentageValue\"}},\n                        {\"z\": {\"type\": \"PercentageValue\"}},\n                        {\"angle\": {\"type\": \"AngleValue\"}}\n                    ]\n                },\n                \"StyleTransformScale2D\": {\n                    \"external\": \"azul_impl::css::StyleTransformScale2D\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"x\": {\"type\": \"PercentageValue\"}},\n                        {\"y\": {\"type\": \"PercentageValue\"}}\n                    ]\n                },\n                \"StyleTransformScale3D\": {\n                    \"external\": \"azul_impl::css::StyleTransformScale3D\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"x\": {\"type\": \"PercentageValue\"}},\n                        {\"y\": {\"type\": \"PercentageValue\"}},\n                        {\"z\": {\"type\": \"PercentageValue\"}}\n                    ]\n                },\n                \"StyleTransformSkew2D\": {\n                    \"external\": \"azul_impl::css::StyleTransformSkew2D\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"x\": {\"type\": \"PercentageValue\"}},\n                        {\"y\": {\"type\": \"PercentageValue\"}}\n                    ]\n                },\n                \"StyleTextAlign\": {\n                    \"external\": \"azul_impl::css::StyleTextAlign\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        {\"Left\": {}},\n                        {\"Center\": {}},\n                        {\"Right\": {}}\n                    ]\n                },\n                \"StyleTextColor\": {\n                    \"external\": \"azul_impl::css::StyleTextColor\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"ColorU\"}}\n                    ]\n                },\n                \"StyleWordSpacing\": {\n                    \"external\": \"azul_impl::css::StyleWordSpacing\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"PixelValue\"}}\n                    ]\n                },\n                \"StyleBoxShadowValue\": {\n                    \"external\": \"azul_impl::css::StyleBoxShadowValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleBoxShadow\" }}\n                    ]\n                },\n                \"LayoutAlignContentValue\": {\n                    \"external\": \"azul_impl::css::LayoutAlignContentValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutAlignContent\" }}\n                    ]\n                },\n                \"LayoutAlignItemsValue\": {\n                    \"external\": \"azul_impl::css::LayoutAlignItemsValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutAlignItems\" }}\n                    ]\n                },\n                \"LayoutBottomValue\": {\n                    \"external\": \"azul_impl::css::LayoutBottomValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutBottom\" }}\n                    ]\n                },\n                \"LayoutBoxSizingValue\": {\n                    \"external\": \"azul_impl::css::LayoutBoxSizingValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutBoxSizing\" }}\n                    ]\n                },\n                \"LayoutFlexDirectionValue\": {\n                    \"external\": \"azul_impl::css::LayoutFlexDirectionValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutFlexDirection\" }}\n                    ]\n                },\n                \"LayoutDisplayValue\": {\n                    \"external\": \"azul_impl::css::LayoutDisplayValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutDisplay\" }}\n                    ]\n                },\n                \"LayoutFlexGrowValue\": {\n                    \"external\": \"azul_impl::css::LayoutFlexGrowValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutFlexGrow\" }}\n                    ]\n                },\n                \"LayoutFlexShrinkValue\": {\n                    \"external\": \"azul_impl::css::LayoutFlexShrinkValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutFlexShrink\" }}\n                    ]\n                },\n                \"LayoutFloatValue\": {\n                    \"external\": \"azul_impl::css::LayoutFloatValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutFloat\" }}\n                    ]\n                },\n                \"LayoutHeightValue\": {\n                    \"external\": \"azul_impl::css::LayoutHeightValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutHeight\" }}\n                    ]\n                },\n                \"LayoutJustifyContentValue\": {\n                    \"external\": \"azul_impl::css::LayoutJustifyContentValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutJustifyContent\" }}\n                    ]\n                },\n                \"LayoutLeftValue\": {\n                    \"external\": \"azul_impl::css::LayoutLeftValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutLeft\" }}\n                    ]\n                },\n                \"LayoutMarginBottomValue\": {\n                    \"external\": \"azul_impl::css::LayoutMarginBottomValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutMarginBottom\" }}\n                    ]\n                },\n                \"LayoutMarginLeftValue\": {\n                    \"external\": \"azul_impl::css::LayoutMarginLeftValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutMarginLeft\" }}\n                    ]\n                },\n                \"LayoutMarginRightValue\": {\n                    \"external\": \"azul_impl::css::LayoutMarginRightValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutMarginRight\" }}\n                    ]\n                },\n                \"LayoutMarginTopValue\": {\n                    \"external\": \"azul_impl::css::LayoutMarginTopValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutMarginTop\" }}\n                    ]\n                },\n                \"LayoutMaxHeightValue\": {\n                    \"external\": \"azul_impl::css::LayoutMaxHeightValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutMaxHeight\" }}\n                    ]\n                },\n                \"LayoutMaxWidthValue\": {\n                    \"external\": \"azul_impl::css::LayoutMaxWidthValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutMaxWidth\" }}\n                    ]\n                },\n                \"LayoutMinHeightValue\": {\n                    \"external\": \"azul_impl::css::LayoutMinHeightValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutMinHeight\" }}\n                    ]\n                },\n                \"LayoutMinWidthValue\": {\n                    \"external\": \"azul_impl::css::LayoutMinWidthValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutMinWidth\" }}\n                    ]\n                },\n                \"LayoutPaddingBottomValue\": {\n                    \"external\": \"azul_impl::css::LayoutPaddingBottomValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutPaddingBottom\" }}\n                    ]\n                },\n                \"LayoutPaddingLeftValue\": {\n                    \"external\": \"azul_impl::css::LayoutPaddingLeftValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutPaddingLeft\" }}\n                    ]\n                },\n                \"LayoutPaddingRightValue\": {\n                    \"external\": \"azul_impl::css::LayoutPaddingRightValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutPaddingRight\" }}\n                    ]\n                },\n                \"LayoutPaddingTopValue\": {\n                    \"external\": \"azul_impl::css::LayoutPaddingTopValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutPaddingTop\" }}\n                    ]\n                },\n                \"LayoutPositionValue\": {\n                    \"external\": \"azul_impl::css::LayoutPositionValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutPosition\" }}\n                    ]\n                },\n                \"LayoutRightValue\": {\n                    \"external\": \"azul_impl::css::LayoutRightValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutRight\" }}\n                    ]\n                },\n                \"LayoutTopValue\": {\n                    \"external\": \"azul_impl::css::LayoutTopValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutTop\" }}\n                    ]\n                },\n                \"LayoutWidthValue\": {\n                    \"external\": \"azul_impl::css::LayoutWidthValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutWidth\" }}\n                    ]\n                },\n                \"LayoutFlexWrapValue\": {\n                    \"external\": \"azul_impl::css::LayoutFlexWrapValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutFlexWrap\" }}\n                    ]\n                },\n                \"LayoutOverflowValue\": {\n                    \"external\": \"azul_impl::css::LayoutOverflowValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutOverflow\" }}\n                    ]\n                },\n                \"ScrollbarStyleValue\": {\n                    \"external\": \"azul_impl::css::ScrollbarStyleValue\",\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"ScrollbarStyle\" }}\n                    ]\n                },\n                \"StyleBackgroundContentVecValue\": {\n                    \"external\": \"azul_impl::css::StyleBackgroundContentVecValue\",\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleBackgroundContentVec\" }}\n                    ]\n                },\n                \"StyleBackgroundPositionVecValue\": {\n                    \"external\": \"azul_impl::css::StyleBackgroundPositionVecValue\",\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleBackgroundPositionVec\" }}\n                    ]\n                },\n                \"StyleBackgroundRepeatVecValue\": {\n                    \"external\": \"azul_impl::css::StyleBackgroundRepeatVecValue\",\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleBackgroundRepeatVec\" }}\n                    ]\n                },\n                \"StyleBackgroundSizeVecValue\": {\n                    \"external\": \"azul_impl::css::StyleBackgroundSizeVecValue\",\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleBackgroundSizeVec\" }}\n                    ]\n                },\n                \"StyleBorderBottomColorValue\": {\n                    \"external\": \"azul_impl::css::StyleBorderBottomColorValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleBorderBottomColor\" }}\n                    ]\n                },\n                \"StyleBorderBottomLeftRadiusValue\": {\n                    \"external\": \"azul_impl::css::StyleBorderBottomLeftRadiusValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleBorderBottomLeftRadius\" }}\n                    ]\n                },\n                \"StyleBorderBottomRightRadiusValue\": {\n                    \"external\": \"azul_impl::css::StyleBorderBottomRightRadiusValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleBorderBottomRightRadius\" }}\n                    ]\n                },\n                \"StyleBorderBottomStyleValue\": {\n                    \"external\": \"azul_impl::css::StyleBorderBottomStyleValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleBorderBottomStyle\" }}\n                    ]\n                },\n                \"LayoutBorderBottomWidthValue\": {\n                    \"external\": \"azul_impl::css::LayoutBorderBottomWidthValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutBorderBottomWidth\" }}\n                    ]\n                },\n                \"StyleBorderLeftColorValue\": {\n                    \"external\": \"azul_impl::css::StyleBorderLeftColorValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleBorderLeftColor\" }}\n                    ]\n                },\n                \"StyleBorderLeftStyleValue\": {\n                    \"external\": \"azul_impl::css::StyleBorderLeftStyleValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleBorderLeftStyle\" }}\n                    ]\n                },\n                \"LayoutBorderLeftWidthValue\": {\n                    \"external\": \"azul_impl::css::LayoutBorderLeftWidthValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutBorderLeftWidth\" }}\n                    ]\n                },\n                \"StyleBorderRightColorValue\": {\n                    \"external\": \"azul_impl::css::StyleBorderRightColorValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleBorderRightColor\" }}\n                    ]\n                },\n                \"StyleBorderRightStyleValue\": {\n                    \"external\": \"azul_impl::css::StyleBorderRightStyleValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleBorderRightStyle\" }}\n                    ]\n                },\n                \"LayoutBorderRightWidthValue\": {\n                    \"external\": \"azul_impl::css::LayoutBorderRightWidthValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutBorderRightWidth\" }}\n                    ]\n                },\n                \"StyleBorderTopColorValue\": {\n                    \"external\": \"azul_impl::css::StyleBorderTopColorValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleBorderTopColor\" }}\n                    ]\n                },\n                \"StyleBorderTopLeftRadiusValue\": {\n                    \"external\": \"azul_impl::css::StyleBorderTopLeftRadiusValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleBorderTopLeftRadius\" }}\n                    ]\n                },\n                \"StyleBorderTopRightRadiusValue\": {\n                    \"external\": \"azul_impl::css::StyleBorderTopRightRadiusValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleBorderTopRightRadius\" }}\n                    ]\n                },\n                \"StyleBorderTopStyleValue\": {\n                    \"external\": \"azul_impl::css::StyleBorderTopStyleValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleBorderTopStyle\" }}\n                    ]\n                },\n                \"LayoutBorderTopWidthValue\": {\n                    \"external\": \"azul_impl::css::LayoutBorderTopWidthValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"LayoutBorderTopWidth\" }}\n                    ]\n                },\n                \"StyleCursorValue\": {\n                    \"external\": \"azul_impl::css::StyleCursorValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleCursor\" }}\n                    ]\n                },\n                \"StyleFontFamilyVecValue\": {\n                    \"external\": \"azul_impl::css::StyleFontFamilyVecValue\",\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleFontFamilyVec\" }}\n                    ]\n                },\n                \"StyleFontSizeValue\": {\n                    \"external\": \"azul_impl::css::StyleFontSizeValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleFontSize\" }}\n                    ]\n                },\n                \"StyleLetterSpacingValue\": {\n                    \"external\": \"azul_impl::css::StyleLetterSpacingValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleLetterSpacing\" }}\n                    ]\n                },\n                \"StyleLineHeightValue\": {\n                    \"external\": \"azul_impl::css::StyleLineHeightValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleLineHeight\" }}\n                    ]\n                },\n                \"StyleTabWidthValue\": {\n                    \"external\": \"azul_impl::css::StyleTabWidthValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleTabWidth\" }}\n                    ]\n                },\n                \"StyleTextAlignValue\": {\n                    \"external\": \"azul_impl::css::StyleTextAlignValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleTextAlign\" }}\n                    ]\n                },\n                \"StyleTextColorValue\": {\n                    \"external\": \"azul_impl::css::StyleTextColorValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleTextColor\" }}\n                    ]\n                },\n                \"StyleWordSpacingValue\": {\n                    \"external\": \"azul_impl::css::StyleWordSpacingValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleWordSpacing\" }}\n                    ]\n                },\n                \"StyleOpacityValue\": {\n                    \"external\": \"azul_impl::css::StyleOpacityValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleOpacity\" }}\n                    ]\n                },\n                \"StyleTransformVecValue\": {\n                    \"external\": \"azul_impl::css::StyleTransformVecValue\",\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleTransformVec\" }}\n                    ]\n                },\n                \"StyleTransformOriginValue\": {\n                    \"external\": \"azul_impl::css::StyleTransformOriginValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleTransformOrigin\" }}\n                    ]\n                },\n                \"StylePerspectiveOriginValue\": {\n                    \"external\": \"azul_impl::css::StylePerspectiveOriginValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StylePerspectiveOrigin\" }}\n                    ]\n                },\n                \"StyleBackfaceVisibilityValue\": {\n                    \"external\": \"azul_impl::css::StyleBackfaceVisibilityValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleBackfaceVisibility\" }}\n                    ]\n                },\n                \"StyleMixBlendModeValue\": {\n                    \"external\": \"azul_impl::css::StyleMixBlendModeValue\",\n                    \"derive\": [\"Copy\"],\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleMixBlendMode\" }}\n                    ]\n                },\n                \"StyleFilterVecValue\": {\n                    \"external\": \"azul_impl::css::StyleFilterVecValue\",\n                    \"enum_fields\": [\n                        { \"Auto\": { }} ,\n                        { \"None\": { }} ,\n                        { \"Inherit\": { }} ,\n                        { \"Initial\": { }} ,\n                        { \"Exact\": { \"type\": \"StyleFilterVec\" }}\n                    ]\n                },\n                \"CssProperty\": {\n                    \"doc\": \"Parsed CSS key-value pair\",\n                    \"external\": \"azul_impl::css::CssProperty\",\n                    \"enum_fields\": [\n                        {\"TextColor\": {\"type\": \"StyleTextColorValue\"}},\n                        {\"FontSize\": {\"type\": \"StyleFontSizeValue\"}},\n                        {\"FontFamily\": {\"type\": \"StyleFontFamilyVecValue\"}},\n                        {\"TextAlign\": {\"type\": \"StyleTextAlignValue\"}},\n                        {\"LetterSpacing\": {\"type\": \"StyleLetterSpacingValue\"}},\n                        {\"LineHeight\": {\"type\": \"StyleLineHeightValue\"}},\n                        {\"WordSpacing\": {\"type\": \"StyleWordSpacingValue\"}},\n                        {\"TabWidth\": {\"type\": \"StyleTabWidthValue\"}},\n                        {\"Cursor\": {\"type\": \"StyleCursorValue\"}},\n                        {\"Display\": {\"type\": \"LayoutDisplayValue\"}},\n                        {\"Float\": {\"type\": \"LayoutFloatValue\"}},\n                        {\"BoxSizing\": {\"type\": \"LayoutBoxSizingValue\"}},\n                        {\"Width\": {\"type\": \"LayoutWidthValue\"}},\n                        {\"Height\": {\"type\": \"LayoutHeightValue\"}},\n                        {\"MinWidth\": {\"type\": \"LayoutMinWidthValue\"}},\n                        {\"MinHeight\": {\"type\": \"LayoutMinHeightValue\"}},\n                        {\"MaxWidth\": {\"type\": \"LayoutMaxWidthValue\"}},\n                        {\"MaxHeight\": {\"type\": \"LayoutMaxHeightValue\"}},\n                        {\"Position\": {\"type\": \"LayoutPositionValue\"}},\n                        {\"Top\": {\"type\": \"LayoutTopValue\"}},\n                        {\"Right\": {\"type\": \"LayoutRightValue\"}},\n                        {\"Left\": {\"type\": \"LayoutLeftValue\"}},\n                        {\"Bottom\": {\"type\": \"LayoutBottomValue\"}},\n                        {\"FlexWrap\": {\"type\": \"LayoutFlexWrapValue\"}},\n                        {\"FlexDirection\": {\"type\": \"LayoutFlexDirectionValue\"}},\n                        {\"FlexGrow\": {\"type\": \"LayoutFlexGrowValue\"}},\n                        {\"FlexShrink\": {\"type\": \"LayoutFlexShrinkValue\"}},\n                        {\"JustifyContent\": {\"type\": \"LayoutJustifyContentValue\"}},\n                        {\"AlignItems\": {\"type\": \"LayoutAlignItemsValue\"}},\n                        {\"AlignContent\": {\"type\": \"LayoutAlignContentValue\"}},\n                        {\"BackgroundContent\": {\"type\": \"StyleBackgroundContentVecValue\"}},\n                        {\"BackgroundPosition\": {\"type\": \"StyleBackgroundPositionVecValue\"}},\n                        {\"BackgroundSize\": {\"type\": \"StyleBackgroundSizeVecValue\"}},\n                        {\"BackgroundRepeat\": {\"type\": \"StyleBackgroundRepeatVecValue\"}},\n                        {\"OverflowX\": {\"type\": \"LayoutOverflowValue\"}},\n                        {\"OverflowY\": {\"type\": \"LayoutOverflowValue\"}},\n                        {\"PaddingTop\": {\"type\": \"LayoutPaddingTopValue\"}},\n                        {\"PaddingLeft\": {\"type\": \"LayoutPaddingLeftValue\"}},\n                        {\"PaddingRight\": {\"type\": \"LayoutPaddingRightValue\"}},\n                        {\"PaddingBottom\": {\"type\": \"LayoutPaddingBottomValue\"}},\n                        {\"MarginTop\": {\"type\": \"LayoutMarginTopValue\"}},\n                        {\"MarginLeft\": {\"type\": \"LayoutMarginLeftValue\"}},\n                        {\"MarginRight\": {\"type\": \"LayoutMarginRightValue\"}},\n                        {\"MarginBottom\": {\"type\": \"LayoutMarginBottomValue\"}},\n                        {\"BorderTopLeftRadius\": {\"type\": \"StyleBorderTopLeftRadiusValue\"}},\n                        {\"BorderTopRightRadius\": {\"type\": \"StyleBorderTopRightRadiusValue\"}},\n                        {\"BorderBottomLeftRadius\": {\"type\": \"StyleBorderBottomLeftRadiusValue\"}},\n                        {\"BorderBottomRightRadius\": {\"type\": \"StyleBorderBottomRightRadiusValue\"}},\n                        {\"BorderTopColor\": {\"type\": \"StyleBorderTopColorValue\"}},\n                        {\"BorderRightColor\": {\"type\": \"StyleBorderRightColorValue\"}},\n                        {\"BorderLeftColor\": {\"type\": \"StyleBorderLeftColorValue\"}},\n                        {\"BorderBottomColor\": {\"type\": \"StyleBorderBottomColorValue\"}},\n                        {\"BorderTopStyle\": {\"type\": \"StyleBorderTopStyleValue\"}},\n                        {\"BorderRightStyle\": {\"type\": \"StyleBorderRightStyleValue\"}},\n                        {\"BorderLeftStyle\": {\"type\": \"StyleBorderLeftStyleValue\"}},\n                        {\"BorderBottomStyle\": {\"type\": \"StyleBorderBottomStyleValue\"}},\n                        {\"BorderTopWidth\": {\"type\": \"LayoutBorderTopWidthValue\"}},\n                        {\"BorderRightWidth\": {\"type\": \"LayoutBorderRightWidthValue\"}},\n                        {\"BorderLeftWidth\": {\"type\": \"LayoutBorderLeftWidthValue\"}},\n                        {\"BorderBottomWidth\": {\"type\": \"LayoutBorderBottomWidthValue\"}},\n                        {\"BoxShadowLeft\": {\"type\": \"StyleBoxShadowValue\"}},\n                        {\"BoxShadowRight\": {\"type\": \"StyleBoxShadowValue\"}},\n                        {\"BoxShadowTop\": {\"type\": \"StyleBoxShadowValue\"}},\n                        {\"BoxShadowBottom\": {\"type\": \"StyleBoxShadowValue\"}},\n                        {\"ScrollbarStyle\": {\"type\": \"ScrollbarStyleValue\"}},\n                        {\"Opacity\": {\"type\": \"StyleOpacityValue\"}},\n                        {\"Transform\": {\"type\": \"StyleTransformVecValue\"}},\n                        {\"TransformOrigin\": {\"type\": \"StyleTransformOriginValue\"}},\n                        {\"PerspectiveOrigin\": {\"type\": \"StylePerspectiveOriginValue\"}},\n                        {\"BackfaceVisibility\": {\"type\": \"StyleBackfaceVisibilityValue\"}},\n                        {\"MixBlendMode\": {\"type\": \"StyleMixBlendModeValue\"}},\n                        {\"Filter\": {\"type\": \"StyleFilterVecValue\"}},\n                        {\"BackdropFilter\": {\"type\": \"StyleFilterVecValue\"}},\n                        {\"TextShadow\": {\"type\": \"StyleBoxShadowValue\"}}\n                    ],\n                    \"functions\": {\n                        \"get_key_string\": {\n                            \"doc\": \"Returns the key of the CSS property as a string, i.e. `background`\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"String\"},\n                            \"fn_body\": \"cssproperty.key().into()\"\n                        },\n                        \"get_value_string\": {\n                            \"doc\": \"Returns the value of the CSS property as a string, i.e. `linear-gradient(red, blue)`\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"String\"},\n                            \"fn_body\": \"cssproperty.value().into()\"\n                        },\n                        \"get_key_value_string\": {\n                            \"doc\": \"Returns the CSS key-value pair as a string, i.e. `background: linear-gradient(red, blue)`\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"String\"},\n                            \"fn_body\": \"cssproperty.format_css().into()\"\n                        },\n                        \"interpolate\": {\n                            \"doc\": \"Interpolates two CSS properties given a value `t` ranging from 0.0 to 1.0. The interpolation function can be set on the `context` (`Ease`, `Linear`, etc.).\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"other\": \"CssProperty\"},\n                                {\"t\": \"f32\"},\n                                {\"context\": \"InterpolateContext\"}\n                            ],\n                            \"returns\": {\"type\": \"CssProperty\"},\n                            \"fn_body\": \"cssproperty.interpolate(&other, t, &context)\"\n                        }\n                    }\n                }\n            }\n        },\n        \"widgets\": {\n            \"doc\": \"Default, built-in widgets (button, label, textinput, etc.)\",\n            \"classes\": {\n                \"Ribbon\": {\n                    \"external\": \"crate::widgets::ribbon::Ribbon\",\n                    \"struct_fields\": [\n                        {\"tab_active\": {\"type\": \"i32\"}}\n                    ],\n                    \"functions\": {\n                        \"dom\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"callback\": \"RibbonOnTabClickedCallback\"},\n                                {\"data\": \"RefAny\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"ribbon.dom(callback, data)\"\n                        }\n                    }\n                },\n                \"RibbonOnTabClickedCallback\": {\n                    \"external\": \"crate::widgets::ribbon::RibbonOnTabClickedCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"RibbonOnTabClickedCallbackType\"}}\n                    ]\n                },\n                \"RibbonOnTabClickedCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"i32\", \"ref\": \"value\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"Button\": {\n                    \"external\": \"crate::widgets::button::Button\",\n                    \"struct_fields\": [\n                        {\"label\": {\"type\": \"String\"}},\n                        {\"image\": {\"type\": \"OptionImageRef\"}},\n                        {\"container_style\": {\"type\": \"NodeDataInlineCssPropertyVec\"}},\n                        {\"label_style\": {\"type\": \"NodeDataInlineCssPropertyVec\"}},\n                        {\"image_style\": {\"type\": \"NodeDataInlineCssPropertyVec\"}},\n                        {\"on_click\": {\"type\": \"OptionButtonOnClick\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"doc\": \"Creates a new labeled button\",\n                            \"fn_args\": [\n                                {\"label\": \"String\"}\n                            ],\n                            \"fn_body\": \"AzButton::new(label)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"set_on_click\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"CallbackType\"}\n                            ],\n                            \"fn_body\": \"button.set_on_click(data, callback);\"\n                        },\n                        \"with_on_click\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"CallbackType\"}\n                            ],\n                            \"returns\": {\"type\": \"Button\"},\n                            \"fn_body\": \"let mut button = button.swap_with_default(); button.set_on_click(data, callback); button\"\n                        },\n                        \"dom\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"button.swap_with_default().dom()\"\n                        }\n                    }\n                },\n                \"ButtonOnClick\": {\n                    \"external\": \"crate::widgets::button::ButtonOnClick\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"Callback\"}}\n                    ]\n                },\n                \"FileInput\": {\n                    \"external\": \"crate::widgets::file_input::FileInput\",\n                    \"struct_fields\": [\n                        {\"state\": {\"type\": \"FileInputStateWrapper\"}},\n                        {\"default_text\": {\"type\": \"String\"}},\n                        {\"image\": {\"type\": \"OptionImageRef\"}},\n                        {\"container_style\": {\"type\": \"NodeDataInlineCssPropertyVec\"}},\n                        {\"label_style\": {\"type\": \"NodeDataInlineCssPropertyVec\"}},\n                        {\"image_style\": {\"type\": \"NodeDataInlineCssPropertyVec\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"doc\": \"Creates a new file input button\",\n                            \"fn_args\": [\n                                {\"path\": \"OptionString\"}\n                            ],\n                            \"fn_body\": \"AzFileInput::new(path)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"set_default_text\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"default_text\": \"String\"}\n                            ],\n                            \"fn_body\": \"fileinput.set_default_text(default_text);\"\n                        },\n                        \"with_default_text\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"default_text\": \"String\"}\n                            ],\n                            \"returns\": {\"type\": \"FileInput\"},\n                            \"fn_body\": \"let mut fileinput = fileinput.swap_with_default(); fileinput.set_default_text(default_text); fileinput\"\n                        },\n                        \"set_on_path_change\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"FileInputOnPathChangeCallbackType\"}\n                            ],\n                            \"fn_body\": \"fileinput.set_on_path_change(data, callback);\"\n                        },\n                        \"with_on_path_change\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"FileInputOnPathChangeCallbackType\"}\n                            ],\n                            \"returns\": {\"type\": \"FileInput\"},\n                            \"fn_body\": \"let mut fileinput = fileinput.swap_with_default(); fileinput.set_on_path_change(data, callback); fileinput\"\n                        },\n                        \"dom\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"fileinput.swap_with_default().dom()\"\n                        }\n                    }\n                },\n                \"FileInputStateWrapper\": {\n                    \"external\": \"crate::widgets::file_input::FileInputStateWrapper\",\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"FileInputState\"}},\n                        {\"on_file_path_change\": {\"type\": \"OptionFileInputOnPathChange\"}},\n                        {\"file_dialog_title\": {\"type\": \"String\"}},\n                        {\"default_dir\": {\"type\": \"OptionString\"}},\n                        {\"file_types\": {\"type\": \"OptionFileTypeList\"}}\n                    ]\n                },\n                \"FileInputState\": {\n                    \"external\": \"crate::widgets::file_input::FileInputState\",\n                    \"struct_fields\": [\n                        {\"path\": {\"type\": \"OptionString\"}}\n                    ]\n                },\n                \"FileInputOnPathChange\": {\n                    \"external\": \"crate::widgets::file_input::FileInputOnPathChange\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"FileInputOnPathChangeCallback\"}}\n                    ]\n                },\n                \"FileInputOnPathChangeCallback\": {\n                    \"external\": \"crate::widgets::file_input::FileInputOnPathChangeCallback\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"FileInputOnPathChangeCallbackType\"}}\n                    ]\n                },\n                \"FileInputOnPathChangeCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"FileInputState\", \"ref\": \"ref\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"CheckBox\": {\n                    \"external\": \"crate::widgets::check_box::CheckBox\",\n                    \"struct_fields\": [\n                        {\"state\": {\"type\": \"CheckBoxStateWrapper\"}},\n                        {\"container_style\": {\"type\": \"NodeDataInlineCssPropertyVec\"}},\n                        {\"content_style\": {\"type\": \"NodeDataInlineCssPropertyVec\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"doc\": \"Creates a new checkbox, disabled or enabled\",\n                            \"fn_args\": [\n                                {\"checked\": \"bool\"}\n                            ],\n                            \"fn_body\": \"AzCheckBox::new(checked)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"set_on_toggle\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"CheckBoxOnToggleCallbackType\"}\n                            ],\n                            \"fn_body\": \"checkbox.set_on_toggle(data, callback);\"\n                        },\n                        \"with_on_toggle\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"CheckBoxOnToggleCallbackType\"}\n                            ],\n                            \"returns\": {\"type\": \"CheckBox\"},\n                            \"fn_body\": \"let mut checkbox = checkbox.swap_with_default(); checkbox.set_on_toggle(data, callback); checkbox\"\n                        },\n                        \"dom\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"checkbox.swap_with_default().dom()\"\n                        }\n                    }\n                },\n                \"CheckBoxStateWrapper\": {\n                    \"external\": \"crate::widgets::check_box::CheckBoxStateWrapper\",\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"CheckBoxState\"}},\n                        {\"on_toggle\": {\"type\": \"OptionCheckBoxOnToggle\"}}\n                    ]\n                },\n                \"CheckBoxOnToggle\": {\n                    \"external\": \"crate::widgets::check_box::CheckBoxOnToggle\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"CheckBoxOnToggleCallback\"}}\n                    ]\n                },\n                \"CheckBoxOnToggleCallback\": {\n                    \"external\": \"crate::widgets::check_box::CheckBoxOnToggleCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"CheckBoxOnToggleCallbackType\"}}\n                    ]\n                },\n                \"CheckBoxOnToggleCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"CheckBoxState\", \"ref\": \"ref\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"CheckBoxState\": {\n                    \"external\": \"crate::widgets::check_box::CheckBoxState\",\n                    \"struct_fields\": [\n                        {\"checked\": {\"type\": \"bool\"}}\n                    ]\n                },\n                \"Label\": {\n                    \"external\": \"crate::widgets::label::Label\",\n                    \"struct_fields\": [\n                        {\"text\": {\"type\": \"String\"}},\n                        {\"style\": {\"type\": \"NodeDataInlineCssPropertyVec\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"fn_args\": [\n                                {\"text\": \"String\"}\n                            ],\n                            \"fn_body\": \"AzLabel::new(text)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"dom\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"label.swap_with_default().dom()\"\n                        }\n                    }\n                },\n                \"ColorInput\": {\n                    \"external\": \"crate::widgets::color_input::ColorInput\",\n                    \"struct_fields\": [\n                        {\"state\": {\"type\": \"ColorInputStateWrapper\"}},\n                        {\"style\": {\"type\": \"NodeDataInlineCssPropertyVec\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"fn_args\": [\n                                {\"color\": \"ColorU\"}\n                            ],\n                            \"fn_body\": \"AzColorInput::new(color)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"set_on_value_change\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"ColorInputOnValueChangeCallbackType\"}\n                            ],\n                            \"fn_body\": \"colorinput.set_on_value_change(data, callback)\"\n                        },\n                        \"with_on_value_change\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"ColorInputOnValueChangeCallbackType\"}\n                            ],\n                            \"returns\": {\"type\": \"ColorInput\"},\n                            \"fn_body\": \"let mut colorinput = colorinput.swap_with_default(); colorinput.set_on_value_change(data, callback); colorinput\"\n                        },\n                        \"dom\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"colorinput.swap_with_default().dom()\"\n                        }\n                    }\n                },\n                \"ColorInputStateWrapper\": {\n                    \"external\": \"crate::widgets::color_input::ColorInputStateWrapper\",\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"ColorInputState\"}},\n                        {\"title\": {\"type\": \"String\"}},\n                        {\"on_value_change\": {\"type\": \"OptionColorInputOnValueChange\"}}\n                    ]\n                },\n                \"ColorInputState\": {\n                    \"external\": \"crate::widgets::color_input::ColorInputState\",\n                    \"struct_fields\": [\n                        {\"color\": {\"type\": \"ColorU\"}}\n                    ]\n                },\n                \"ColorInputOnValueChange\": {\n                    \"external\": \"crate::widgets::color_input::ColorInputOnValueChange\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"ColorInputOnValueChangeCallback\"}}\n                    ]\n                },\n                \"ColorInputOnValueChangeCallback\": {\n                    \"external\": \"crate::widgets::color_input::ColorInputOnValueChangeCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"ColorInputOnValueChangeCallbackType\"}}\n                    ]\n                },\n                \"ColorInputOnValueChangeCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"ColorInputState\", \"ref\": \"ref\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"TextInput\": {\n                    \"external\": \"crate::widgets::text_input::TextInput\",\n                    \"struct_fields\": [\n                        {\"state\": {\"type\": \"TextInputStateWrapper\"}},\n                        {\"placeholder_style\": {\"type\": \"NodeDataInlineCssPropertyVec\"}},\n                        {\"container_style\": {\"type\": \"NodeDataInlineCssPropertyVec\"}},\n                        {\"label_style\": {\"type\": \"NodeDataInlineCssPropertyVec\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"fn_args\": [],\n                            \"fn_body\": \"AzTextInput::new()\"\n                        }\n                    },\n                    \"functions\": {\n                        \"set_text\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"text\": \"String\"}\n                            ],\n                            \"fn_body\": \"textinput.set_text(text)\"\n                        },\n                        \"with_text\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"text\": \"String\"}\n                            ],\n                            \"returns\": {\"type\": \"TextInput\"},\n                            \"fn_body\": \"textinput.with_text(text)\"\n                        },\n                        \"set_placeholder\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"text\": \"String\"}\n                            ],\n                            \"fn_body\": \"textinput.set_placeholder(text)\"\n                        },\n                        \"with_placeholder\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"text\": \"String\"}\n                            ],\n                            \"returns\": {\"type\": \"TextInput\"},\n                            \"fn_body\": \"textinput.with_placeholder(text)\"\n                        },\n                        \"set_on_text_input\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"TextInputOnTextInputCallbackType\"}\n                            ],\n                            \"fn_body\": \"textinput.set_on_text_input(data, callback)\"\n                        },\n                        \"with_on_text_input\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"TextInputOnTextInputCallbackType\"}\n                            ],\n                            \"returns\": {\"type\": \"TextInput\"},\n                            \"fn_body\": \"let mut textinput = textinput.swap_with_default(); textinput.set_on_text_input(data, callback); textinput\"\n                        },\n                        \"set_on_virtual_key_down\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"TextInputOnVirtualKeyDownCallbackType\"}\n                            ],\n                            \"fn_body\": \"textinput.set_on_virtual_key_down(data, callback)\"\n                        },\n                        \"with_on_virtual_key_down\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"TextInputOnVirtualKeyDownCallbackType\"}\n                            ],\n                            \"returns\": {\"type\": \"TextInput\"},\n                            \"fn_body\": \"let mut textinput = textinput.swap_with_default(); textinput.set_on_virtual_key_down(data, callback); textinput\"\n                        },\n                        \"set_on_focus_lost\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"TextInputOnFocusLostCallbackType\"}\n                            ],\n                            \"fn_body\": \"textinput.set_on_focus_lost(data, callback)\"\n                        },\n                        \"with_on_focus_lost\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"TextInputOnFocusLostCallbackType\"}\n                            ],\n                            \"returns\": {\"type\": \"TextInput\"},\n                            \"fn_body\": \"let mut textinput = textinput.swap_with_default(); textinput.set_on_focus_lost(data, callback); textinput\"\n                        },\n                        \"set_placeholder_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"placeholder_style\": \"NodeDataInlineCssPropertyVec\"}\n                            ],\n                            \"fn_body\": \"textinput.set_placeholder_style(placeholder_style)\"\n                        },\n                        \"with_placeholder_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"placeholder_style\": \"NodeDataInlineCssPropertyVec\"}\n                            ],\n                            \"returns\": {\"type\": \"TextInput\"},\n                            \"fn_body\": \"let mut textinput = textinput.swap_with_default(); textinput.set_placeholder_style(placeholder_style); textinput\"\n                        },\n                        \"set_container_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"container_style\": \"NodeDataInlineCssPropertyVec\"}\n                            ],\n                            \"fn_body\": \" textinput.set_container_style(container_style)\"\n                        },\n                        \"with_container_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"container_style\": \"NodeDataInlineCssPropertyVec\"}\n                            ],\n                            \"returns\": {\"type\": \"TextInput\"},\n                            \"fn_body\": \"let mut textinput = textinput.swap_with_default(); textinput.set_container_style(container_style); textinput\"\n                        },\n                        \"set_label_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"label_style\": \"NodeDataInlineCssPropertyVec\"}\n                            ],\n                            \"fn_body\": \"textinput.set_container_style(label_style)\"\n                        },\n                        \"with_label_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"label_style\": \"NodeDataInlineCssPropertyVec\"}\n                            ],\n                            \"returns\": {\"type\": \"TextInput\"},\n                            \"fn_body\": \"let mut textinput = textinput.swap_with_default(); textinput.set_label_style(label_style); textinput\"\n                        },\n                        \"dom\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"textinput.swap_with_default().dom()\"\n                        }\n                    }\n                },\n                \"TextInputStateWrapper\": {\n                    \"external\": \"crate::widgets::text_input::TextInputStateWrapper\",\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"TextInputState\"}},\n                        {\"on_text_input\": {\"type\": \"OptionTextInputOnTextInput\"}},\n                        {\"on_virtual_key_down\": {\"type\": \"OptionTextInputOnVirtualKeyDown\"}},\n                        {\"on_focus_lost\": {\"type\": \"OptionTextInputOnFocusLost\"}},\n                        {\"update_text_input_before_calling_focus_lost_fn\": {\"type\": \"bool\"}},\n                        {\"update_text_input_before_calling_vk_down_fn\": {\"type\": \"bool\"}},\n                        {\"cursor_animation\": {\"type\": \"OptionTimerId\"}}\n                    ]\n                },\n                \"TextInputState\": {\n                    \"external\": \"crate::widgets::text_input::TextInputState\",\n                    \"struct_fields\": [\n                        {\"text\": {\"type\": \"U32Vec\"}},\n                        {\"placeholder\": {\"type\": \"OptionString\"}},\n                        {\"max_len\": {\"type\": \"usize\"}},\n                        {\"selection\": {\"type\": \"OptionTextInputSelection\"}},\n                        {\"cursor_pos\": {\"type\": \"usize\"}}\n                    ],\n                    \"functions\": {\n                        \"get_text\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"String\"},\n                            \"fn_body\": \"textinputstate.get_text().into()\"\n                        }\n                    }\n                },\n                \"TextInputSelection\": {\n                    \"external\": \"crate::widgets::text_input::TextInputSelection\",\n                    \"enum_fields\": [\n                        {\"All\": {}},\n                        {\"FromTo\": {\"type\": \"TextInputSelectionRange\"}}\n                    ]\n                },\n                \"TextInputSelectionRange\": {\n                    \"external\": \"crate::widgets::text_input::TextInputSelectionRange\",\n                    \"struct_fields\": [\n                        {\"from\": {\"type\": \"usize\"}},\n                        {\"to\": {\"type\": \"usize\"}}\n                    ]\n                },\n                \"TextInputOnTextInput\": {\n                    \"external\": \"crate::widgets::text_input::TextInputOnTextInput\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"TextInputOnTextInputCallback\"}}\n                    ]\n                },\n                \"TextInputOnTextInputCallback\": {\n                    \"external\": \"crate::widgets::text_input::TextInputOnTextInputCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"TextInputOnTextInputCallbackType\"}}\n                    ]\n                },\n                \"TextInputOnTextInputCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"TextInputState\", \"ref\": \"ref\"}\n                        ],\n                        \"returns\": {\"type\": \"OnTextInputReturn\"}\n                    }\n                },\n                \"TextInputOnVirtualKeyDown\": {\n                    \"external\": \"crate::widgets::text_input::TextInputOnVirtualKeyDown\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"TextInputOnVirtualKeyDownCallback\"}}\n                    ]\n                },\n                \"TextInputOnVirtualKeyDownCallback\": {\n                    \"external\": \"crate::widgets::text_input::TextInputOnVirtualKeyDownCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"TextInputOnVirtualKeyDownCallbackType\"}}\n                    ]\n                },\n                \"TextInputOnVirtualKeyDownCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"TextInputState\", \"ref\": \"ref\"}\n                        ],\n                        \"returns\": {\"type\": \"OnTextInputReturn\"}\n                    }\n                },\n                \"TextInputOnFocusLost\": {\n                    \"external\": \"crate::widgets::text_input::TextInputOnFocusLost\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"TextInputOnFocusLostCallback\"}}\n                    ]\n                },\n                \"TextInputOnFocusLostCallback\": {\n                    \"external\": \"crate::widgets::text_input::TextInputOnFocusLostCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"TextInputOnFocusLostCallbackType\"}}\n                    ]\n                },\n                \"TextInputOnFocusLostCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"TextInputState\", \"ref\": \"ref\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"OnTextInputReturn\": {\n                    \"external\": \"crate::widgets::text_input::OnTextInputReturn\",\n                    \"struct_fields\": [\n                        {\"update\": {\"type\": \"Update\"}},\n                        {\"valid\": {\"type\": \"TextInputValid\"}}\n                    ]\n                },\n                \"TextInputValid\": {\n                    \"external\": \"crate::widgets::text_input::TextInputValid\",\n                    \"enum_fields\": [\n                        {\"Yes\": {}},\n                        {\"No\": {}}\n                    ]\n                },\n                \"NumberInput\": {\n                    \"external\": \"crate::widgets::number_input::NumberInput\",\n                    \"struct_fields\": [\n                        {\"text_input\": {\"type\": \"TextInput\"}},\n                        {\"state\": {\"type\": \"NumberInputStateWrapper\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"fn_args\": [\n                                {\"number\": \"f32\"}\n                            ],\n                            \"fn_body\": \"AzNumberInput::new(number)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"set_on_text_input\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"TextInputOnTextInputCallbackType\"}\n                            ],\n                            \"fn_body\": \"numberinput.set_on_text_input(data, callback)\"\n                        },\n                        \"with_on_text_input\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"TextInputOnTextInputCallbackType\"}\n                            ],\n                            \"returns\": {\"type\": \"NumberInput\"},\n                            \"fn_body\": \"let mut numberinput = numberinput.swap_with_default(); numberinput.set_on_text_input(data, callback); numberinput\"\n                        },\n                        \"set_on_virtual_key_down\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"TextInputOnVirtualKeyDownCallbackType\"}\n                            ],\n                            \"fn_body\": \"numberinput.set_on_virtual_key_down(data, callback)\"\n                        },\n                        \"with_on_virtual_key_down\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"TextInputOnVirtualKeyDownCallbackType\"}\n                            ],\n                            \"returns\": {\"type\": \"NumberInput\"},\n                            \"fn_body\": \"let mut numberinput = numberinput.swap_with_default(); numberinput.set_on_virtual_key_down(data, callback); numberinput\"\n                        },\n                        \"set_on_focus_lost\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"NumberInputOnFocusLostCallbackType\"}\n                            ],\n                            \"fn_body\": \"numberinput.set_on_focus_lost(data, callback)\"\n                        },\n                        \"with_on_focus_lost\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"NumberInputOnFocusLostCallbackType\"}\n                            ],\n                            \"returns\": {\"type\": \"NumberInput\"},\n                            \"fn_body\": \"let mut numberinput = numberinput.swap_with_default(); numberinput.set_on_focus_lost(data, callback); numberinput\"\n                        },\n                        \"set_placeholder_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"NodeDataInlineCssPropertyVec\"}\n                            ],\n                            \"fn_body\": \"numberinput.set_placeholder_style(style)\"\n                        },\n                        \"with_placeholder_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"NodeDataInlineCssPropertyVec\"}\n                            ],\n                            \"returns\": {\"type\": \"NumberInput\"},\n                            \"fn_body\": \"let mut numberinput = numberinput.swap_with_default(); numberinput.set_placeholder_style(style); numberinput\"\n                        },\n                        \"set_container_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"NodeDataInlineCssPropertyVec\"}\n                            ],\n                            \"fn_body\": \"numberinput.set_container_style(style)\"\n                        },\n                        \"with_container_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"NodeDataInlineCssPropertyVec\"}\n                            ],\n                            \"returns\": {\"type\": \"NumberInput\"},\n                            \"fn_body\": \"let mut numberinput = numberinput.swap_with_default(); numberinput.set_container_style(style); numberinput\"\n                        },\n                        \"set_label_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"NodeDataInlineCssPropertyVec\"}\n                            ],\n                            \"fn_body\": \"numberinput.set_label_style(style)\"\n                        },\n                        \"with_label_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"style\": \"NodeDataInlineCssPropertyVec\"}\n                            ],\n                            \"returns\": {\"type\": \"NumberInput\"},\n                            \"fn_body\": \"let mut numberinput = numberinput.swap_with_default(); numberinput.set_label_style(style); numberinput\"\n                        },\n                        \"set_on_value_change\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"NumberInputOnValueChangeCallbackType\"}\n                            ],\n                            \"fn_body\": \"numberinput.set_on_value_change(data, callback)\"\n                        },\n                        \"with_on_value_change\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"NumberInputOnValueChangeCallbackType\"}\n                            ],\n                            \"returns\": {\"type\": \"NumberInput\"},\n                            \"fn_body\": \"let mut numberinput = numberinput.swap_with_default(); numberinput.set_on_value_change(data, callback); numberinput\"\n                        },\n                        \"dom\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"numberinput.swap_with_default().dom()\"\n                        }\n                    }\n                },\n                \"NumberInputStateWrapper\": {\n                    \"external\": \"crate::widgets::number_input::NumberInputStateWrapper\",\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"NumberInputState\"}},\n                        {\"on_value_change\": {\"type\": \"OptionNumberInputOnValueChange\"}},\n                        {\"on_focus_lost\": {\"type\": \"OptionNumberInputOnFocusLost\"}}\n                    ]\n                },\n                \"NumberInputState\": {\n                    \"external\": \"crate::widgets::number_input::NumberInputState\",\n                    \"struct_fields\": [\n                        {\"previous\": {\"type\": \"f32\"}},\n                        {\"number\": {\"type\": \"f32\"}},\n                        {\"min\": {\"type\": \"f32\"}},\n                        {\"max\": {\"type\": \"f32\"}}\n                    ]\n                },\n                \"NumberInputOnValueChange\": {\n                    \"external\": \"crate::widgets::number_input::NumberInputOnValueChange\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"NumberInputOnValueChangeCallback\"}}\n                    ]\n                },\n                \"NumberInputOnValueChangeCallback\": {\n                    \"external\": \"crate::widgets::number_input::NumberInputOnValueChangeCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"NumberInputOnValueChangeCallbackType\"}}\n                    ]\n                },\n                \"NumberInputOnValueChangeCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"NumberInputState\", \"ref\": \"ref\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"NumberInputOnFocusLost\": {\n                    \"external\": \"crate::widgets::number_input::NumberInputOnFocusLost\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"NumberInputOnFocusLostCallback\"}}\n                    ]\n                },\n                \"NumberInputOnFocusLostCallback\": {\n                    \"external\": \"crate::widgets::number_input::NumberInputOnFocusLostCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"NumberInputOnFocusLostCallbackType\"}}\n                    ]\n                },\n                \"NumberInputOnFocusLostCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"NumberInputState\", \"ref\": \"ref\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"ProgressBar\": {\n                    \"external\": \"crate::widgets::progressbar::ProgressBar\",\n                    \"struct_fields\": [\n                        {\"state\": {\"type\": \"ProgressBarState\"}},\n                        {\"height\": {\"type\": \"PixelValue\"}},\n                        {\"bar_background\": {\"type\": \"StyleBackgroundContentVec\"}},\n                        {\"container_background\": {\"type\": \"StyleBackgroundContentVec\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"fn_args\": [\n                                {\"percent_done\": \"f32\"}\n                            ],\n                            \"fn_body\": \"AzProgressBar::new(percent_done)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"set_height\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"height\": \"PixelValue\"}\n                            ],\n                            \"fn_body\": \"progressbar.set_height(height);\"\n                        },\n                        \"with_height\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"height\": \"PixelValue\"}\n                            ],\n                            \"returns\": {\"type\": \"ProgressBar\"},\n                            \"fn_body\": \"let mut progressbar = progressbar.swap_with_default(); progressbar.set_height(height); progressbar\"\n                        },\n                        \"set_container_background\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"background\": \"StyleBackgroundContentVec\"}\n                            ],\n                            \"fn_body\": \"progressbar.set_container_background(background);\"\n                        },\n                        \"with_container_style\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"background\": \"StyleBackgroundContentVec\"}\n                            ],\n                            \"returns\": {\"type\": \"ProgressBar\"},\n                            \"fn_body\": \"let mut progressbar = progressbar.swap_with_default(); progressbar.set_container_background(background); progressbar\"\n                        },\n                        \"set_bar_background\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"background\": \"StyleBackgroundContentVec\"}\n                            ],\n                            \"fn_body\": \"progressbar.set_bar_background(background);\"\n                        },\n                        \"with_bar_background\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"background\": \"StyleBackgroundContentVec\"}\n                            ],\n                            \"returns\": {\"type\": \"ProgressBar\"},\n                            \"fn_body\": \"let mut progressbar = progressbar.swap_with_default(); progressbar.set_bar_background(background); progressbar\"\n                        },\n                        \"dom\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"progressbar.swap_with_default().dom()\"\n                        }\n                    }\n                },\n                \"ProgressBarState\": {\n                    \"external\": \"crate::widgets::progressbar::ProgressBarState\",\n                    \"struct_fields\": [\n                        {\"percent_done\": {\"type\": \"f32\"}},\n                        {\"display_percentage\": {\"type\": \"bool\"}}\n                    ]\n                },\n                \"TabHeader\": {\n                    \"external\": \"crate::widgets::tabs::TabHeader\",\n                    \"struct_fields\": [\n                        {\"tabs\": {\"type\": \"StringVec\"}},\n                        {\"active_tab\": {\"type\": \"usize\"}},\n                        {\"on_click\": {\"type\": \"OptionTabOnClick\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"fn_args\": [\n                                {\"tabs\": \"StringVec\"}\n                            ],\n                            \"fn_body\": \"AzTabHeader::new(tabs)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"set_active_tab\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"active_tab\": \"usize\"}\n                            ],\n                            \"fn_body\": \"tabheader.set_active_tab(active_tab)\"\n                        },\n                        \"with_active_tab\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"active_tab\": \"usize\"}\n                            ],\n                            \"returns\": {\"type\": \"TabHeader\"},\n                            \"fn_body\": \"tabheader.with_active_tab(active_tab)\"\n                        },\n                        \"set_on_click\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"TabOnClickCallbackType\"}\n                            ],\n                            \"fn_body\": \"tabheader.set_on_click(data, callback)\"\n                        },\n                        \"with_on_click\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"data\": \"RefAny\"},\n                                {\"callback\": \"TabOnClickCallbackType\"}\n                            ],\n                            \"returns\": {\"type\": \"TabHeader\"},\n                            \"fn_body\": \"tabheader.with_on_click(data, callback)\"\n                        },\n                        \"dom\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"tabheader.dom()\"\n                        }\n                    }\n                },\n                \"TabHeaderState\": {\n                    \"external\": \"crate::widgets::tabs::TabHeaderState\",\n                    \"struct_fields\": [\n                        {\"active_tab\": {\"type\": \"usize\"}}\n                    ]\n                },\n                \"TabContent\": {\n                    \"external\": \"crate::widgets::tabs::TabContent\",\n                    \"struct_fields\": [\n                        {\"content\": {\"type\": \"Dom\"}},\n                        {\"has_padding\": {\"type\": \"bool\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"fn_args\": [\n                                {\"content\": \"Dom\"}\n                            ],\n                            \"fn_body\": \"AzTabContent::new(content)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"set_padding\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"has_padding\": \"bool\"}\n                            ],\n                            \"fn_body\": \"tabcontent.set_padding(has_padding)\"\n                        },\n                        \"with_padding\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"has_padding\": \"bool\"}\n                            ],\n                            \"returns\": {\"type\": \"TabContent\"},\n                            \"fn_body\": \"tabcontent.with_padding(has_padding)\"\n                        },\n                        \"dom\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"tabcontent.dom()\"\n                        }\n                    }\n                },\n                \"TabOnClick\": {\n                    \"external\": \"crate::widgets::tabs::TabOnClick\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"TabOnClickCallback\"}}\n                    ]\n                },\n                \"TabOnClickCallback\": {\n                    \"external\": \"crate::widgets::tabs::TabOnClickCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"TabOnClickCallbackType\"}}\n                    ]\n                },\n                \"TabOnClickCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"TabHeaderState\", \"ref\": \"ref\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"Frame\": {\n                    \"external\": \"crate::widgets::frame::Frame\",\n                    \"struct_fields\": [\n                        {\"title\": {\"type\": \"String\"}},\n                        {\"flex_grow\": {\"type\": \"f32\"}},\n                        {\"content\": {\"type\": \"Dom\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"fn_args\": [\n                                {\"title\": \"String\"},\n                                {\"dom\": \"Dom\"}\n                            ],\n                            \"fn_body\": \"AzFrame::new(title, dom)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"set_flex_grow\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"flex_grow\": \"f32\"}\n                            ],\n                            \"fn_body\": \"frame.set_flex_grow(flex_grow)\"\n                        },\n                        \"with_flex_grow\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"flex_grow\": \"f32\"}\n                            ],\n                            \"returns\": {\"type\": \"Frame\"},\n                            \"fn_body\": \"let mut frame = frame.swap_with_default(); frame.set_flex_grow(flex_grow); frame\"\n                        },\n                        \"dom\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut frame = frame.swap_with_default(); frame.dom()\"\n                        }\n                    }\n                },\n                \"NodeGraph\": {\n                    \"external\": \"crate::widgets::node_graph::NodeGraph\",\n                    \"struct_fields\": [\n                        {\"node_types\": {\"type\": \"NodeTypeIdInfoMapVec\"}},\n                        {\"input_output_types\": {\"type\": \"InputOutputTypeIdInfoMapVec\"}},\n                        {\"nodes\": {\"type\": \"NodeIdNodeMapVec\"}},\n                        {\"allow_multiple_root_nodes\": {\"type\": \"bool\"}},\n                        {\"offset\": {\"type\": \"LogicalPosition\"}},\n                        {\"style\": {\"type\": \"NodeGraphStyle\"}},\n                        {\"callbacks\": {\"type\": \"NodeGraphCallbacks\"}},\n                        {\"add_node_str\": {\"type\": \"String\"}},\n                        {\"scale_factor\": {\"type\": \"f32\"}}\n                    ],\n                    \"functions\": {\n                        \"dom\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"let mut nodegraph = nodegraph.swap_with_default(); nodegraph.dom()\"\n                        }\n                    }\n                },\n                \"NodeTypeIdInfoMap\": {\n                    \"external\": \"crate::widgets::node_graph::NodeTypeIdInfoMap\",\n                    \"derive\": [\"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"node_type_id\": {\"type\": \"NodeTypeId\" }},\n                        {\"node_type_info\": {\"type\": \"NodeTypeInfo\" }}\n                    ]\n                },\n                \"InputOutputTypeIdInfoMap\": {\n                    \"external\": \"crate::widgets::node_graph::InputOutputTypeIdInfoMap\",\n                    \"derive\": [\"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"io_type_id\": {\"type\": \"InputOutputTypeId\" }},\n                        {\"io_info\": {\"type\": \"InputOutputInfo\" }}\n                    ]\n                },\n                \"NodeIdNodeMap\": {\n                    \"external\": \"crate::widgets::node_graph::NodeIdNodeMap\",\n                    \"struct_fields\": [\n                        {\"node_id\": {\"type\": \"NodeGraphNodeId\" }},\n                        {\"node\": {\"type\": \"Node\" }}\n                    ]\n                },\n                \"NodeGraphStyle\": {\n                    \"external\": \"crate::widgets::node_graph::NodeGraphStyle\",\n                    \"derive\": [\"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"Default\": {}}\n                    ]\n                },\n                \"NodeGraphCallbacks\": {\n                    \"external\": \"crate::widgets::node_graph::NodeGraphCallbacks\",\n                    \"struct_fields\": [\n                        {\"on_node_added\": {\"type\": \"OptionNodeGraphOnNodeAdded\"}},\n                        {\"on_node_removed\": {\"type\": \"OptionNodeGraphOnNodeRemoved\"}},\n                        {\"on_node_dragged\": {\"type\": \"OptionNodeGraphOnNodeDragged\"}},\n                        {\"on_node_graph_dragged\": {\"type\": \"OptionNodeGraphOnNodeGraphDragged\"}},\n                        {\"on_node_connected\": {\"type\": \"OptionNodeGraphOnNodeConnected\"}},\n                        {\"on_node_input_disconnected\": {\"type\": \"OptionNodeGraphOnNodeInputDisconnected\"}},\n                        {\"on_node_output_disconnected\": {\"type\": \"OptionNodeGraphOnNodeOutputDisconnected\"}},\n                        {\"on_node_field_edited\": {\"type\": \"OptionNodeGraphOnNodeFieldEdited\"}}\n                    ]\n                },\n                \"NodeGraphOnNodeAddedCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"NodeTypeId\", \"ref\": \"value\"},\n                            {\"type\": \"NodeGraphNodeId\", \"ref\": \"value\"},\n                            {\"type\": \"NodePosition\", \"ref\": \"value\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"NodeGraphOnNodeAddedCallback\": {\n                    \"external\": \"crate::widgets::node_graph::OnNodeAddedCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"NodeGraphOnNodeAddedCallbackType\"}}\n                    ]\n                },\n                \"NodeGraphOnNodeAdded\": {\n                    \"external\": \"crate::widgets::node_graph::OnNodeAdded\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"NodeGraphOnNodeAddedCallback\"}}\n                    ]\n                },\n                \"NodeGraphOnNodeRemovedCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"NodeGraphNodeId\", \"ref\": \"value\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"NodeGraphOnNodeRemovedCallback\": {\n                    \"external\": \"crate::widgets::node_graph::OnNodeRemovedCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"NodeGraphOnNodeRemovedCallbackType\"}}\n                    ]\n                },\n                \"NodeGraphOnNodeRemoved\": {\n                    \"external\": \"crate::widgets::node_graph::OnNodeRemoved\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"NodeGraphOnNodeRemovedCallback\"}}\n                    ]\n                },\n                \"NodeGraphOnNodeGraphDraggedCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"GraphDragAmount\", \"ref\": \"value\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"NodeGraphOnNodeGraphDraggedCallback\": {\n                    \"external\": \"crate::widgets::node_graph::OnNodeGraphDraggedCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"NodeGraphOnNodeGraphDraggedCallbackType\"}}\n                    ]\n                },\n                \"NodeGraphOnNodeGraphDragged\": {\n                    \"external\": \"crate::widgets::node_graph::OnNodeGraphDragged\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"NodeGraphOnNodeGraphDraggedCallback\"}}\n                    ]\n                },\n                \"NodeGraphOnNodeDraggedCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"NodeGraphNodeId\", \"ref\": \"value\"},\n                            {\"type\": \"NodeDragAmount\", \"ref\": \"value\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"NodeGraphOnNodeDraggedCallback\": {\n                    \"external\": \"crate::widgets::node_graph::OnNodeDraggedCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"NodeGraphOnNodeDraggedCallbackType\"}}\n                    ]\n                },\n                \"NodeGraphOnNodeDragged\": {\n                    \"external\": \"crate::widgets::node_graph::OnNodeDragged\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"NodeGraphOnNodeDraggedCallback\"}}\n                    ]\n                },\n                \"NodeGraphOnNodeConnectedCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"NodeGraphNodeId\", \"ref\": \"value\"},\n                            {\"type\": \"usize\", \"ref\": \"value\"},\n                            {\"type\": \"NodeGraphNodeId\", \"ref\": \"value\"},\n                            {\"type\": \"usize\", \"ref\": \"value\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"NodeGraphOnNodeConnectedCallback\": {\n                    \"external\": \"crate::widgets::node_graph::OnNodeConnectedCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"NodeGraphOnNodeConnectedCallbackType\"}}\n                    ]\n                },\n                \"NodeGraphOnNodeConnected\": {\n                    \"external\": \"crate::widgets::node_graph::OnNodeConnected\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"NodeGraphOnNodeConnectedCallback\"}}\n                    ]\n                },\n                \"NodeGraphOnNodeInputDisconnectedCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"NodeGraphNodeId\", \"ref\": \"value\"},\n                            {\"type\": \"usize\", \"ref\": \"value\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"NodeGraphOnNodeInputDisconnectedCallback\": {\n                    \"external\": \"crate::widgets::node_graph::OnNodeInputDisconnectedCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"NodeGraphOnNodeInputDisconnectedCallbackType\"}}\n                    ]\n                },\n                \"NodeGraphOnNodeInputDisconnected\": {\n                    \"external\": \"crate::widgets::node_graph::OnNodeInputDisconnected\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"NodeGraphOnNodeInputDisconnectedCallback\"}}\n                    ]\n                },\n                \"NodeGraphOnNodeOutputDisconnectedCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"NodeGraphNodeId\", \"ref\": \"value\"},\n                            {\"type\": \"usize\", \"ref\": \"value\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"NodeGraphOnNodeOutputDisconnectedCallback\": {\n                    \"external\": \"crate::widgets::node_graph::OnNodeOutputDisconnectedCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"NodeGraphOnNodeOutputDisconnectedCallbackType\"}}\n                    ]\n                },\n                \"NodeGraphOnNodeOutputDisconnected\": {\n                    \"external\": \"crate::widgets::node_graph::OnNodeOutputDisconnected\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"NodeGraphOnNodeOutputDisconnectedCallback\"}}\n                    ]\n                },\n                \"NodeGraphOnNodeFieldEditedCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"NodeGraphNodeId\", \"ref\": \"value\"},\n                            {\"type\": \"usize\", \"ref\": \"value\"},\n                            {\"type\": \"NodeTypeId\", \"ref\": \"value\"},\n                            {\"type\": \"NodeTypeFieldValue\", \"ref\": \"value\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"NodeGraphOnNodeFieldEditedCallback\": {\n                    \"external\": \"crate::widgets::node_graph::OnNodeFieldEditedCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"NodeGraphOnNodeFieldEditedCallbackType\"}}\n                    ]\n                },\n                \"NodeGraphOnNodeFieldEdited\": {\n                    \"external\": \"crate::widgets::node_graph::OnNodeFieldEdited\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"NodeGraphOnNodeFieldEditedCallback\"}}\n                    ]\n                },\n                \"InputOutputTypeId\": {\n                    \"external\": \"crate::widgets::node_graph::InputOutputTypeId\",\n                    \"derive\": [\"Copy\", \"Clone\", \"PartialEq\", \"PartialOrd\", \"Ord\", \"Eq\", \"Hash\", \"Serialize\", \"Deserialize\"],\n                    \"serde\": \"transparent\",\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"u64\"}}\n                    ]\n                },\n                \"NodeTypeId\": {\n                    \"external\": \"crate::widgets::node_graph::NodeTypeId\",\n                    \"derive\": [\"Copy\", \"Clone\", \"PartialEq\", \"PartialOrd\", \"Ord\", \"Eq\", \"Hash\", \"Serialize\", \"Deserialize\"],\n                    \"serde\": \"transparent\",\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"u64\"}}\n                    ]\n                },\n                \"NodeGraphNodeId\": {\n                    \"external\": \"crate::widgets::node_graph::NodeGraphNodeId\",\n                    \"derive\": [\"Copy\", \"Clone\", \"PartialEq\", \"PartialOrd\", \"Ord\", \"Eq\", \"Hash\", \"Serialize\", \"Deserialize\"],\n                    \"serde\": \"transparent\",\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"u64\"}}\n                    ]\n                },\n                \"Node\": {\n                    \"external\": \"crate::widgets::node_graph::Node\",\n                    \"struct_fields\": [\n                        {\"node_type\": {\"type\": \"NodeTypeId\"}},\n                        {\"position\": {\"type\": \"NodePosition\"}},\n                        {\"fields\": {\"type\": \"NodeTypeFieldVec\"}},\n                        {\"connect_in\": {\"type\": \"InputConnectionVec\"}},\n                        {\"connect_out\": {\"type\": \"OutputConnectionVec\"}}\n                    ]\n                },\n                \"NodeTypeField\": {\n                    \"external\": \"crate::widgets::node_graph::NodeTypeField\",\n                    \"derive\": [\"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"key\": {\"type\": \"String\"}},\n                        {\"value\": {\"type\": \"NodeTypeFieldValue\"}}\n                    ]\n                },\n                \"NodeTypeFieldValue\": {\n                    \"external\": \"crate::widgets::node_graph::NodeTypeFieldValue\",\n                    \"derive\": [\"Serialize\", \"Deserialize\"],\n                    \"enum_fields\": [\n                        {\"TextInput\": {\"type\": \"String\"}},\n                        {\"NumberInput\": {\"type\": \"f32\"}},\n                        {\"CheckBox\": {\"type\": \"bool\"}},\n                        {\"ColorInput\": {\"type\": \"ColorU\"}},\n                        {\"FileInput\": {\"type\": \"OptionString\"}}\n                    ]\n                },\n                \"InputConnection\": {\n                    \"external\": \"crate::widgets::node_graph::InputConnection\",\n                    \"struct_fields\": [\n                        {\"input_index\": {\"type\": \"usize\"}},\n                        {\"connects_to\": {\"type\": \"OutputNodeAndIndexVec\"}}\n                    ]\n                },\n                \"OutputNodeAndIndex\": {\n                    \"external\": \"crate::widgets::node_graph::OutputNodeAndIndex\",\n                    \"struct_fields\": [\n                        {\"node_id\": {\"type\": \"NodeGraphNodeId\"}},\n                        {\"output_index\": {\"type\": \"usize\"}}\n                    ]\n                },\n                \"OutputConnection\": {\n                    \"external\": \"crate::widgets::node_graph::OutputConnection\",\n                    \"struct_fields\": [\n                        {\"output_index\": {\"type\": \"usize\"}},\n                        {\"connects_to\": {\"type\": \"InputNodeAndIndexVec\"}}\n                    ]\n                },\n                \"InputNodeAndIndex\": {\n                    \"external\": \"crate::widgets::node_graph::InputNodeAndIndex\",\n                    \"struct_fields\": [\n                        {\"node_id\": {\"type\": \"NodeGraphNodeId\"}},\n                        {\"input_index\": {\"type\": \"usize\"}}\n                    ]\n                },\n                \"NodeTypeInfo\": {\n                    \"external\": \"crate::widgets::node_graph::NodeTypeInfo\",\n                    \"derive\": [\"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"is_root\": {\"type\": \"bool\"}},\n                        {\"name\": {\"type\": \"String\"}},\n                        {\"inputs\": {\"type\": \"InputOutputTypeIdVec\"}},\n                        {\"outputs\": {\"type\": \"InputOutputTypeIdVec\"}}\n                    ]\n                },\n                \"InputOutputInfo\": {\n                    \"external\": \"crate::widgets::node_graph::InputOutputInfo\",\n                    \"derive\": [\"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"data_type\": {\"type\": \"String\"}},\n                        {\"color\": {\"type\": \"ColorU\"}}\n                    ]\n                },\n                \"NodePosition\": {\n                    \"external\": \"crate::widgets::node_graph::NodePosition\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"x\": {\"type\": \"f32\"}},\n                        {\"y\": {\"type\": \"f32\"}}\n                    ]\n                },\n                \"GraphDragAmount\": {\n                    \"external\": \"crate::widgets::node_graph::GraphDragAmount\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"x\": {\"type\": \"f32\"}},\n                        {\"y\": {\"type\": \"f32\"}}\n                    ]\n                },\n                \"NodeDragAmount\": {\n                    \"external\": \"crate::widgets::node_graph::NodeDragAmount\",\n                    \"derive\": [\"Copy\", \"Serialize\", \"Deserialize\"],\n                    \"struct_fields\": [\n                        {\"x\": {\"type\": \"f32\"}},\n                        {\"y\": {\"type\": \"f32\"}}\n                    ]\n                },\n                \"ListView\": {\n                    \"external\": \"crate::widgets::list_view::ListView\",\n                    \"struct_fields\": [\n                        {\"columns\": {\"type\": \"StringVec\", \"doc\": \"Column names\"}},\n                        {\"rows\": {\"type\": \"ListViewRowVec\", \"doc\": \"Currently rendered rows. Note that the ListView does not have to render all rows at once, usually you'd only render the top 100 rows and then lazy-load once the user has scrolled to the end\"}},\n                        {\"sorted_by\": {\"type\": \"OptionUsize\", \"doc\": \"Which column is the list view sorted by (default = None)?\"}},\n                        {\"scroll_offset\": {\"type\": \"PixelValueNoPercent\", \"doc\": \"Offset to add to the rows used when layouting row positions during lazy-loaded scrolling. Also affects the scroll position\"}},\n                        {\"content_height\": {\"type\": \"OptionPixelValueNoPercent\", \"doc\": \"Height of the content, if not all rows are loaded\"}},\n                        {\"column_context_menu\": {\"type\": \"OptionMenu\", \"doc\": \"Context menu for the columns (usually opens a context menu to select which columns to show)\"}},\n                        {\"on_lazy_load_scroll\": {\"type\": \"OptionListViewOnLazyLoadScroll\", \"doc\": \"Indicates that this ListView is being lazily loaded, allows control over what happens when the user scrolls the ListView.\"}},\n                        {\"on_column_click\": {\"type\": \"OptionListViewOnColumnClick\", \"doc\": \"What to do when the user left-clicks the column (usually used for storing which column to sort by)\"}},\n                        {\"on_row_click\": {\"type\": \"OptionListViewOnRowClick\", \"doc\": \"What to do when the user left-clicks a row (usually used for selecting the row depending on the state)\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"fn_args\": [\n                                {\"columns\": \"StringVec\"}\n                            ],\n                            \"fn_body\": \"AzListView::new(columns)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"with_rows\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"rows\": \"ListViewRowVec\"}\n                            ],\n                            \"returns\": {\"type\": \"ListView\"},\n                            \"fn_body\": \"listview.with_rows(rows)\"\n                        },\n                        \"dom\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"listview.swap_with_default().dom()\"\n                        }\n                    }\n                },\n                \"ListViewRow\": {\n                    \"external\": \"crate::widgets::list_view::ListViewRow\",\n                    \"struct_fields\": [\n                        {\"cells\": {\"type\": \"DomVec\", \"doc\": \"Each cell is an opaque Dom object\"}},\n                        {\"height\": {\"type\": \"OptionPixelValueNoPercent\", \"doc\": \"Height of the row, if known beforehand\"}}\n                    ]\n                },\n                \"ListViewState\": {\n                    \"external\": \"crate::widgets::list_view::ListViewState\",\n                    \"struct_fields\": [\n                        {\"columns\": {\"type\": \"StringVec\", \"doc\": \"Copy of the current column names\"}},\n                        {\"sorted_by\": {\"type\": \"OptionUsize\", \"doc\": \"Which column the rows are currently sorted by\"}},\n                        {\"current_row_count\": {\"type\": \"usize\", \"doc\": \"Row count of rows currently loaded in the DOM\"}},\n                        {\"scroll_offset\": {\"type\": \"PixelValueNoPercent\", \"doc\": \"Y-offset currently applied to the rows\"}},\n                        {\"current_scroll_position\": {\"type\": \"LogicalPosition\", \"doc\": \"Current position where the user has scrolled the ListView to\"}},\n                        {\"current_content_height\": {\"type\": \"LogicalSize\", \"doc\": \"Current height of the row container\"}}\n                    ]\n                },\n                \"ListViewOnLazyLoadScrollCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"ListViewState\", \"ref\": \"ref\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"ListViewOnLazyLoadScrollCallback\": {\n                    \"external\": \"crate::widgets::list_view::ListViewOnLazyLoadScrollCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"ListViewOnLazyLoadScrollCallbackType\"}}\n                    ]\n                },\n                \"ListViewOnLazyLoadScroll\": {\n                    \"external\": \"crate::widgets::list_view::ListViewOnLazyLoadScroll\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"ListViewOnLazyLoadScrollCallback\"}}\n                    ]\n                },\n                \"ListViewOnColumnClickCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"ListViewState\", \"ref\": \"ref\"},\n                            {\"type\": \"usize\", \"ref\": \"value\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"ListViewOnColumnClickCallback\": {\n                    \"external\": \"crate::widgets::list_view::ListViewOnColumnClickCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"ListViewOnColumnClickCallbackType\"}}\n                    ]\n                },\n                \"ListViewOnColumnClick\": {\n                    \"external\": \"crate::widgets::list_view::ListViewOnColumnClick\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"ListViewOnColumnClickCallback\"}}\n                    ]\n                },\n\n                \"ListViewOnRowClickCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"ListViewState\", \"ref\": \"ref\"},\n                            {\"type\": \"usize\", \"ref\": \"value\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"ListViewOnRowClickCallback\": {\n                    \"external\": \"crate::widgets::list_view::ListViewOnRowClickCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"ListViewOnRowClickCallbackType\"}}\n                    ]\n                },\n                \"ListViewOnRowClick\": {\n                    \"external\": \"crate::widgets::list_view::ListViewOnRowClick\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"ListViewOnRowClickCallback\"}}\n                    ]\n                },\n                \"TreeView\": {\n                    \"external\": \"crate::widgets::tree_view::TreeView\",\n                    \"struct_fields\": [\n                        {\"root\": {\"type\": \"String\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"fn_args\": [\n                                {\"root\": \"String\"}\n                            ],\n                            \"fn_body\": \"AzTreeView::new(root)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"dom\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"treeview.swap_with_default().dom()\"\n                        }\n                    }\n                },\n                \"DropDown\": {\n                    \"external\": \"crate::widgets::drop_down::DropDown\",\n                    \"struct_fields\": [\n                        {\"choices\": {\"type\": \"StringVec\"}},\n                        {\"selected\": {\"type\": \"usize\"}},\n                        {\"on_choice_change\": {\"type\": \"OptionDropDownOnChoiceChange\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"fn_args\": [\n                                {\"choices\": \"StringVec\"}\n                            ],\n                            \"fn_body\": \"AzDropDown::new(choices)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"dom\": {\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"returns\": {\"type\": \"Dom\"},\n                            \"fn_body\": \"dropdown.swap_with_default().dom()\"\n                        }\n                    }\n                },\n                \"DropDownOnChoiceChangeCallbackType\": {\n                    \"callback_typedef\": {\n                        \"fn_args\": [\n                            {\"type\": \"RefAny\", \"ref\": \"refmut\"},\n                            {\"type\": \"CallbackInfo\", \"ref\": \"refmut\"},\n                            {\"type\": \"usize\", \"ref\": \"value\"}\n                        ],\n                        \"returns\": {\"type\": \"Update\"}\n                    }\n                },\n                \"DropDownOnChoiceChangeCallback\": {\n                    \"external\": \"crate::widgets::drop_down::DropDownOnChoiceChangeCallback\",\n                    \"struct_fields\": [\n                        {\"cb\": {\"type\": \"DropDownOnChoiceChangeCallbackType\"}}\n                    ]\n                },\n                \"DropDownOnChoiceChange\": {\n                    \"external\": \"crate::widgets::drop_down::DropDownOnChoiceChange\",\n                    \"struct_fields\": [\n                        {\"data\": {\"type\": \"RefAny\"}},\n                        {\"callback\": {\"type\": \"DropDownOnChoiceChangeCallback\"}}\n                    ]\n                }\n            }\n        },\n        \"style\": {\n            \"doc\": \"DOM to CSS cascading and styling module\",\n            \"classes\": {\n                \"NodeHierarchyItem\": {\n                    \"external\": \"azul_impl::styled_dom::NodeHierarchyItem\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"parent\": {\"type\": \"usize\"}},\n                        {\"previous_sibling\": {\"type\": \"usize\"}},\n                        {\"next_sibling\": {\"type\": \"usize\"}},\n                        {\"last_child\": {\"type\": \"usize\"}}\n                    ]\n                },\n                \"CascadeInfo\": {\n                    \"external\": \"azul_impl::style::CascadeInfo\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"index_in_parent\": {\"type\": \"u32\"}},\n                        {\"is_last_child\": {\"type\": \"bool\"}}\n                    ]\n                },\n                \"CssPropertySource\": {\n                    \"external\": \"azul_impl::styled_dom::CssPropertySource\",\n                    \"enum_fields\": [\n                        {\"Css\": {\"type\": \"CssPath\"}},\n                        {\"Inline\": {}}\n                    ]\n                },\n                \"StyledNodeState\": {\n                    \"external\": \"azul_impl::styled_dom::StyledNodeState\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"normal\": {\"type\": \"bool\"}},\n                        {\"hover\": {\"type\": \"bool\"}},\n                        {\"active\": {\"type\": \"bool\"}},\n                        {\"focused\": {\"type\": \"bool\"}}\n                    ]\n                },\n                \"StyledNode\": {\n                    \"external\": \"azul_impl::styled_dom::StyledNode\",\n                    \"struct_fields\": [\n                        {\"state\": {\"type\": \"StyledNodeState\", \"doc\": \"\"}},\n                        {\"tag_id\": {\"type\": \"OptionTagId\", \"doc\": \"Optional hit-testing tag ID (NOTE: The tag ID has to be adjusted after the layout is done (to account for scroll tags))\"}}\n                    ]\n                },\n                \"TagId\": {\n                    \"external\": \"azul_impl::styled_dom::AzTagId\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"inner\": {\"type\": \"u64\"}}\n                    ]\n                },\n                \"TagIdToNodeIdMapping\": {\n                    \"external\": \"azul_impl::styled_dom::TagIdToNodeIdMapping\",\n                    \"struct_fields\": [\n                        {\"tag_id\": {\"type\": \"TagId\"}},\n                        {\"node_id\": {\"type\": \"NodeId\"}},\n                        {\"tab_index\": {\"type\": \"OptionTabIndex\"}},\n                        {\"parents\": {\"type\": \"NodeIdVec\"}}\n                    ]\n                },\n                \"ParentWithNodeDepth\": {\n                    \"external\": \"azul_impl::styled_dom::ParentWithNodeDepth\",\n                    \"derive\": [\"Copy\"],\n                    \"struct_fields\": [\n                        {\"depth\": {\"type\": \"usize\"}},\n                        {\"node_id\": {\"type\": \"NodeId\"}}\n                    ]\n                },\n                \"CssPropertyCache\": {\n                    \"external\": \"azul_impl::styled_dom::CssPropertyCachePtr\",\n                    \"is_boxed_object\": true,\n                    \"struct_fields\": [\n                        {\"ptr\": {\"type\": \"*mut c_void\" } },\n                        {\"run_destructor\": {\"type\": \"bool\"}}\n                    ]\n                },\n                \"StyledDom\": {\n                    \"external\": \"azul_impl::styled_dom::StyledDom\",\n                    \"struct_fields\": [\n                        {\"root\": {\"type\": \"NodeId\" }},\n                        {\"node_hierarchy\": {\"type\": \"NodeHierarchyItemVec\" }},\n                        {\"node_data\": {\"type\": \"NodeDataVec\" }},\n                        {\"styled_nodes\": {\"type\": \"StyledNodeVec\" }},\n                        {\"cascade_info\": {\"type\": \"CascadeInfoVec\" }},\n                        {\"nodes_with_window_callbacks\": {\"type\": \"NodeIdVec\" }},\n                        {\"nodes_with_not_callbacks\": {\"type\": \"NodeIdVec\" }},\n                        {\"nodes_with_datasets_and_callbacks\": {\"type\": \"NodeIdVec\" }},\n                        {\"tag_ids_to_node_ids\": {\"type\": \"TagIdToNodeIdMappingVec\" }},\n                        {\"non_leaf_nodes\": {\"type\": \"ParentWithNodeDepthVec\" }},\n                        {\"css_property_cache\": {\"type\": \"CssPropertyCache\" }}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"doc\": \"Styles a `Dom` with the given `Css`, returning the `StyledDom` - complexity `O(count(dom_nodes) * count(css_blocks))`: make sure that the `Dom` and the `Css` are as small as possible, use inline CSS if the performance isn't good enough\",\n                            \"fn_args\": [\n                                {\"dom\": \"Dom\"},\n                                {\"css\": \"Css\"}\n                            ],\n                            \"fn_body\":\"let mut dom = dom; let mut css = css; AzStyledDom::new(&mut dom, css)\"\n                        },\n                        \"default\": {\n                            \"doc\": \"Returns a default, empty `Dom`, usually returned if you don't want to crash in an error case.\",\n                            \"fn_args\": [],\n                            \"fn_body\":\"AzStyledDom::default()\"\n                        },\n                        \"from_xml\": {\n                            \"doc\": \"Returns a DOM loaded from an XML file\",\n                            \"fn_args\": [\n                                {\"xml_string\": \"String\"}\n                            ],\n                            \"fn_body\": \"azul_impl::app::extra::styled_dom_from_str(xml_string.as_str())\"\n                        },\n                        \"from_file\": {\n                            \"doc\": \"Same as `from_xml`, but loads the file relative to the current directory\",\n                            \"fn_args\": [\n                                {\"xml_file_path\": \"String\"}\n                            ],\n                            \"fn_body\": \"azul_impl::app::extra::styled_dom_from_file(xml_file_path.as_str())\"\n                        }\n                    },\n                    \"functions\": {\n                        \"append_child\": {\n                            \"doc\": \"Appends an already styled list of DOM nodes to the current `dom.root` - complexity `O(count(dom.dom_nodes))`\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"dom\": \"StyledDom\"}\n                            ],\n                            \"fn_body\": \"styleddom.append_child(dom);\"\n                        },\n                        \"with_child\": {\n                            \"doc\": \"Same as `append_child()`, but as a builder method\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"dom\": \"StyledDom\"}\n                            ],\n                            \"returns\": {\"type\": \"StyledDom\"},\n                            \"fn_body\": \"styleddom.with_child(dom)\"\n                        },\n                        \"restyle\": {\n                            \"doc\": \"Restyles an already styled DOM with a new CSS - overwrites old styles, but does not replace them, useful for implementing user styles that are applied on top of the existing application style\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"css\": \"Css\"}\n                            ],\n                            \"fn_body\": \"styleddom.restyle(css);\"\n                        },\n                        \"node_count\": {\n                            \"doc\": \"Returns the number of nodes in the styled DOM\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"usize\"},\n                            \"fn_body\": \"styleddom.node_count()\"\n                        },\n                        \"get_html_string\": {\n                            \"doc\": \"Returns a HTML string that you can write to a file in order to debug the UI structure and debug potential cascading issues\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"String\"},\n                            \"fn_body\": \"styleddom.get_html_string(\\\"\\\", \\\"\\\", false).into()\"\n                        },\n                        \"get_html_string_test\": {\n                            \"doc\": \"Returns a HTML for unit testing\",\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"returns\": {\"type\": \"String\"},\n                            \"fn_body\": \"styleddom.get_html_string(\\\"\\\", \\\"\\\", true).into()\"\n                        },\n                        \"set_menu_bar\": {\n                            \"doc\": \"Adds a menu to the root node\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"menu\": \"Menu\"}\n                            ],\n                            \"fn_body\": \"styleddom.set_menu_bar(menu)\"\n                        },\n                        \"with_menu_bar\": {\n                            \"doc\": \"Adds a menu to the root node (builder method)\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"menu\": \"Menu\"}\n                            ],\n                            \"returns\": {\"type\": \"StyledDom\"},\n                            \"fn_body\": \"let mut styleddom = styleddom.swap_with_default(); styleddom.set_menu_bar(menu); styleddom\"\n                        },\n                        \"set_context_menu\": {\n                            \"doc\": \"Adds a context menu to the root node\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"menu\": \"Menu\"}\n                            ],\n                            \"fn_body\": \"styleddom.set_context_menu(menu)\"\n                        },\n                        \"with_context_menu\": {\n                            \"doc\": \"Adds a context menu to the root node (builder method)\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"menu\": \"Menu\"}\n                            ],\n                            \"returns\": {\"type\": \"StyledDom\"},\n                            \"fn_body\": \"let mut styleddom = styleddom.swap_with_default(); styleddom.set_context_menu(menu); styleddom\"\n                        }\n                    }\n                }\n            }\n        },\n        \"gl\": {\n            \"doc\": \"OpenGl helper types (`Texture`, `Gl`, etc.)\",\n            \"classes\": {\n                \"Texture\": {\n                    \"external\": \"azul_impl::gl::Texture\",\n                    \"is_boxed_object\": true,\n                    \"struct_fields\": [\n                        {\"texture_id\": {\"type\": \"u32\", \"doc\": \"Raw OpenGL texture ID\"}},\n                        {\"flags\": {\"type\": \"TextureFlags\", \"doc\": \"Hints and flags for optimization purposes\"}},\n                        {\"size\": {\"type\": \"PhysicalSizeU32\", \"doc\": \"Size of this texture (in pixels)\"}},\n                        {\"background_color\": {\"type\": \"ColorU\", \"doc\": \"Background color of this texture\"}},\n                        {\"gl_context\": {\"type\": \"Gl\", \"doc\": \"A reference-counted pointer to the OpenGL context (so that the texture can be deleted in the destructor)\"}},\n                        {\"format\": {\"type\": \"RawImageFormat\", \"doc\": \"Format of this texture (rgba, brga, etc.)\"}},\n                        {\"refcount\": {\"type\": \"*const c_void\", \"doc\": \"Reference count for this texture. Texture will be automatically deleted when the refcount reaches 0.\"}},\n                        {\"run_destructor\": {\"type\": \"bool\"}}\n                    ],\n                    \"constructors\": {\n                        \"new\": {\n                            \"fn_args\": [\n                                {\"texture_id\": \"u32\"},\n                                {\"flags\": \"TextureFlags\"},\n                                {\"size\": \"PhysicalSizeU32\"},\n                                {\"background_color\": \"ColorU\"},\n                                {\"gl_context\": \"Gl\"},\n                                {\"format\": \"RawImageFormat\"}\n                            ],\n                            \"fn_body\": \"AzTexture::new(texture_id, flags, size, background_color, gl_context, format)\"\n                        },\n                        \"allocate_rgba8\": {\n                            \"doc\": \"Allocates an OpenGL texture of a given size with a single red channel (used for image masks)\",\n                            \"fn_args\": [\n                                {\"gl\": \"Gl\"},\n                                {\"size\": \"PhysicalSizeU32\"},\n                                {\"background\": \"ColorU\"}\n                            ],\n                            \"fn_body\": \"AzTexture::allocate_rgba8(gl, size, background)\"\n                        },\n                        \"allocate_clip_mask\": {\n                            \"doc\": \"Allocates an OpenGL texture of a given size with a single red channel (used for image masks)\",\n                            \"fn_args\": [\n                                {\"gl\": \"Gl\"},\n                                {\"size\": \"PhysicalSizeU32\"},\n                                {\"background\": \"ColorU\"}\n                            ],\n                            \"fn_body\": \"azul_impl::svg::allocate_clipmask_texture(gl, size)\"\n                        }\n                    },\n                    \"functions\": {\n                        \"clear\": {\n                            \"doc\": \"Clears the texture with the currently set background color\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"fn_body\": \"texture.clear()\"\n                        },\n                        \"draw_clip_mask\": {\n                            \"doc\": \"Draws a vertex / index buffer (aka. `&TessellatedSvgNode`) to the texture\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node\": \"TessellatedSvgNode\"}\n                            ],\n                            \"returns\": {\"type\": \"bool\"},\n                            \"fn_body\": \"azul_impl::svg::render_tessellated_node_gpu(texture, &node).is_some()\"\n                        },\n                        \"draw_tesselated_svg_gpu_node\": {\n                            \"doc\": \"Draws a `&TessellatedGPUSvgNode` with the given color to the texture\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node\": \"*const TessellatedGPUSvgNode\"},\n                                {\"size\": \"PhysicalSizeU32\"},\n                                {\"color\": \"ColorU\"},\n                                {\"transforms\": \"StyleTransformVec\"}\n                            ],\n                            \"returns\": {\"type\": \"bool\"},\n                            \"fn_body\": \"let node = unsafe { &*node }; node.draw(texture, size, color, transforms)\"\n                        },\n                        \"draw_tesselated_colored_svg_gpu_node\": {\n                            \"doc\": \"Draws a `&TessellatedColoredGPUSvgNode` with the given color to the texture\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"},\n                                {\"node\": \"*const TessellatedColoredGPUSvgNode\"},\n                                {\"size\": \"PhysicalSizeU32\"},\n                                {\"transforms\": \"StyleTransformVec\"}\n                            ],\n                            \"returns\": {\"type\": \"bool\"},\n                            \"fn_body\": \"let node = unsafe { &*node }; node.draw(texture, size, transforms)\"\n                        },\n                        \"apply_fxaa\": {\n                            \"doc\": \"Applies an FXAA filter to the texture\",\n                            \"fn_args\": [\n                                {\"self\": \"refmut\"}\n                            ],\n                            \"returns\": {\"type\": \"bool\"},\n                            \"fn_body\": \"azul_impl::svg::apply_fxaa(texture).is_some()\"\n                        }\n                    }\n                },\n                \"GlVoidPtrConst\": {\n                    \"external\": \"azul_impl::gl::GlVoidPtrConst\",\n                    \"is_boxed_object\": true,\n                    \"struct_fields\": [\n                        {\"ptr\": {\"type\": \"*const c_void\"}},\n                        {\"run_destructor\": {\"type\": \"bool\"}}\n                    ]\n                },\n                \"GlVoidPtrMut\": {\n                    \"external\": \"azul_impl::gl::GlVoidPtrMut\",\n                    \"struct_fields\": [\n                        {\"ptr\": {\"type\": \"*mut c_void\"}}\n                    ]\n                },\n                \"Gl\": {\n                    \"external\": \"azul_impl::gl::GlContextPtr\",\n                    \"is_boxed_object\": true,\n                    \"struct_fields\": [\n                        {\"ptr\": {\"type\": \"*const c_void\", \"doc\": \"Reference-counted pointer to the OpenGL context. Can not be copied between threads.\"}},\n                        {\"renderer_type\": {\"type\": \"RendererType\", \"doc\": \"Extra flag to see whether we are using hardware OpenGL or software OpenGL\"}},\n                        {\"run_destructor\": {\"type\": \"bool\"}}\n                    ],\n                    \"functions\": {\n                        \"get_type\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"fn_body\": \"gl.get_type()\",\n                            \"returns\": {\"type\": \"GlType\"}\n                        },\n                        \"buffer_data_untyped\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"size\": \"isize\"},\n                                {\"data\": \"GlVoidPtrConst\"},\n                                {\"usage\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.buffer_data_untyped(target, size, data, usage)\"\n                        },\n                        \"buffer_sub_data_untyped\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"offset\": \"isize\"},\n                                {\"size\": \"isize\"},\n                                {\"data\": \"GlVoidPtrConst\"}\n                            ],\n                            \"fn_body\": \"gl.buffer_sub_data_untyped(target, offset, size, data)\"\n                        },\n                        \"map_buffer\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"access\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.map_buffer(target, access)\",\n                            \"returns\": {\"type\": \"GlVoidPtrMut\"}\n                        },\n                        \"map_buffer_range\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"offset\": \"isize\"},\n                                {\"length\": \"isize\"},\n                                {\"access\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.map_buffer_range(target, offset, length, access)\",\n                            \"returns\": {\"type\": \"GlVoidPtrMut\"}\n                        },\n                        \"unmap_buffer\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.unmap_buffer(target)\",\n                            \"returns\": {\"type\": \"u8\"}\n                        },\n                        \"tex_buffer\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"internal_format\": \"u32\"},\n                                {\"buffer\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.tex_buffer(target, internal_format, buffer)\"\n                        },\n                        \"shader_source\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"shader\": \"u32\"},\n                                {\"strings\": \"StringVec\"}\n                            ],\n                            \"fn_body\": \"gl.shader_source(shader, strings)\"\n                        },\n                        \"read_buffer\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"mode\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.read_buffer(mode)\"\n                        },\n                        \"read_pixels_into_buffer\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"x\": \"i32\"},\n                                {\"y\": \"i32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"},\n                                {\"format\": \"u32\"},\n                                {\"pixel_type\": \"u32\"},\n                                {\"dst_buffer\": \"U8VecRefMut\"}\n                            ],\n                            \"fn_body\": \"gl.read_pixels_into_buffer(x, y, width, height, format, pixel_type, dst_buffer)\"\n                        },\n                        \"read_pixels\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"x\": \"i32\"},\n                                {\"y\": \"i32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"},\n                                {\"format\": \"u32\"},\n                                {\"pixel_type\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.read_pixels(x, y, width, height, format, pixel_type)\",\n                            \"returns\": {\"type\": \"U8Vec\"}\n                        },\n                        \"read_pixels_into_pbo\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"x\": \"i32\"},\n                                {\"y\": \"i32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"},\n                                {\"format\": \"u32\"},\n                                {\"pixel_type\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.read_pixels_into_pbo(x, y, width, height, format, pixel_type)\"\n                        },\n                        \"sample_coverage\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"value\": \"f32\"},\n                                {\"invert\": \"bool\"}\n                            ],\n                            \"fn_body\": \"gl.sample_coverage(value, invert)\"\n                        },\n                        \"polygon_offset\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"factor\": \"f32\"},\n                                {\"units\": \"f32\"}\n                            ],\n                            \"fn_body\": \"gl.polygon_offset(factor, units)\"\n                        },\n                        \"pixel_store_i\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"name\": \"u32\"},\n                                {\"param\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.pixel_store_i(name, param)\"\n                        },\n                        \"gen_buffers\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"n\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.gen_buffers(n)\",\n                            \"returns\": {\"type\": \"GLuintVec\"}\n                        },\n                        \"gen_renderbuffers\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"n\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.gen_renderbuffers(n)\",\n                            \"returns\": {\"type\": \"GLuintVec\"}\n                        },\n                        \"gen_framebuffers\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"n\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.gen_framebuffers(n)\",\n                            \"returns\": {\"type\": \"GLuintVec\"}\n                        },\n                        \"gen_textures\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"n\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.gen_textures(n)\",\n                            \"returns\": {\"type\": \"GLuintVec\"}\n                        },\n                        \"gen_vertex_arrays\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"n\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.gen_vertex_arrays(n)\",\n                            \"returns\": {\"type\": \"GLuintVec\"}\n                        },\n                        \"gen_queries\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"n\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.gen_queries(n)\",\n                            \"returns\": {\"type\": \"GLuintVec\"}\n                        },\n                        \"begin_query\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"id\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.begin_query(target, id)\"\n                        },\n                        \"end_query\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.end_query(target)\"\n                        },\n                        \"query_counter\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"id\": \"u32\"},\n                                {\"target\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.query_counter(id, target)\"\n                        },\n                        \"get_query_object_iv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"id\": \"u32\"},\n                                {\"pname\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_query_object_iv(id, pname)\",\n                            \"returns\": {\"type\": \"i32\"}\n                        },\n                        \"get_query_object_uiv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"id\": \"u32\"},\n                                {\"pname\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_query_object_uiv(id, pname)\",\n                            \"returns\": {\"type\": \"u32\"}\n                        },\n                        \"get_query_object_i64v\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"id\": \"u32\"},\n                                {\"pname\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_query_object_i64v(id, pname)\",\n                            \"returns\": {\"type\": \"i64\"}\n                        },\n                        \"get_query_object_ui64v\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"id\": \"u32\"},\n                                {\"pname\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_query_object_ui64v(id, pname)\",\n                            \"returns\": {\"type\": \"u64\"}\n                        },\n                        \"delete_queries\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"queries\": \"GLuintVecRef\"}\n                            ],\n                            \"fn_body\": \"gl.delete_queries(queries)\"\n                        },\n                        \"delete_vertex_arrays\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"vertex_arrays\": \"GLuintVecRef\"}\n                            ],\n                            \"fn_body\": \"gl.delete_vertex_arrays(vertex_arrays)\"\n                        },\n                        \"delete_buffers\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"buffers\": \"GLuintVecRef\"}\n                            ],\n                            \"fn_body\": \"gl.delete_buffers(buffers)\"\n                        },\n                        \"delete_renderbuffers\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"renderbuffers\": \"GLuintVecRef\"}\n                            ],\n                            \"fn_body\": \"gl.delete_renderbuffers(renderbuffers)\"\n                        },\n                        \"delete_framebuffers\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"framebuffers\": \"GLuintVecRef\"}\n                            ],\n                            \"fn_body\": \"gl.delete_framebuffers(framebuffers)\"\n                        },\n                        \"delete_textures\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"textures\": \"GLuintVecRef\"}\n                            ],\n                            \"fn_body\": \"gl.delete_textures(textures)\"\n                        },\n                        \"framebuffer_renderbuffer\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"attachment\": \"u32\"},\n                                {\"renderbuffertarget\": \"u32\"},\n                                {\"renderbuffer\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.framebuffer_renderbuffer(target, attachment, renderbuffertarget, renderbuffer)\"\n                        },\n                        \"renderbuffer_storage\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"internalformat\": \"u32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.renderbuffer_storage(target, internalformat, width, height)\"\n                        },\n                        \"depth_func\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"func\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.depth_func(func)\"\n                        },\n                        \"active_texture\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"texture\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.active_texture(texture)\"\n                        },\n                        \"attach_shader\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"shader\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.attach_shader(program, shader)\"\n                        },\n                        \"bind_attrib_location\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"index\": \"u32\"},\n                                {\"name\": \"Refstr\"}\n                            ],\n                            \"fn_body\": \"gl.bind_attrib_location(program, index, name)\"\n                        },\n                        \"get_uniform_iv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"location\": \"i32\"},\n                                {\"result\": \"GLintVecRefMut\"}\n                            ],\n                            \"fn_body\": \"gl.get_uniform_iv(program, location, result)\"\n                        },\n                        \"get_uniform_fv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"location\": \"i32\"},\n                                {\"result\": \"GLfloatVecRefMut\"}\n                            ],\n                            \"fn_body\": \"gl.get_uniform_fv(program, location, result)\"\n                        },\n                        \"get_uniform_block_index\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"name\": \"Refstr\"}\n                            ],\n                            \"fn_body\": \"gl.get_uniform_block_index(program, name)\",\n                            \"returns\": {\"type\": \"u32\"}\n                        },\n                        \"get_uniform_indices\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"names\": \"RefstrVecRef\"}\n                            ],\n                            \"fn_body\": \"gl.get_uniform_indices(program, names)\",\n                            \"returns\": {\"type\": \"GLuintVec\"}\n                        },\n                        \"bind_buffer_base\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"index\": \"u32\"},\n                                {\"buffer\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.bind_buffer_base(target, index, buffer)\"\n                        },\n                        \"bind_buffer_range\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"index\": \"u32\"},\n                                {\"buffer\": \"u32\"},\n                                {\"offset\": \"isize\"},\n                                {\"size\": \"isize\"}\n                            ],\n                            \"fn_body\": \"gl.bind_buffer_range(target, index, buffer, offset, size)\"\n                        },\n                        \"uniform_block_binding\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"uniform_block_index\": \"u32\"},\n                                {\"uniform_block_binding\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_block_binding(program, uniform_block_index, uniform_block_binding)\"\n                        },\n                        \"bind_buffer\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"buffer\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.bind_buffer(target, buffer)\"\n                        },\n                        \"bind_vertex_array\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"vao\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.bind_vertex_array(vao)\"\n                        },\n                        \"bind_renderbuffer\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"renderbuffer\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.bind_renderbuffer(target, renderbuffer)\"\n                        },\n                        \"bind_framebuffer\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"framebuffer\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.bind_framebuffer(target, framebuffer)\"\n                        },\n                        \"bind_texture\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"texture\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.bind_texture(target, texture)\"\n                        },\n                        \"draw_buffers\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"bufs\": \"GLenumVecRef\"}\n                            ],\n                            \"fn_body\": \"gl.draw_buffers(bufs)\"\n                        },\n                        \"tex_image_2d\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"level\": \"i32\"},\n                                {\"internal_format\": \"i32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"},\n                                {\"border\": \"i32\"},\n                                {\"format\": \"u32\"},\n                                {\"ty\": \"u32\"},\n                                {\"opt_data\": \"OptionU8VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.tex_image_2d(target, level, internal_format, width, height, border, format, ty, opt_data)\"\n                        },\n                        \"compressed_tex_image_2d\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"level\": \"i32\"},\n                                {\"internal_format\": \"u32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"},\n                                {\"border\": \"i32\"},\n                                {\"data\": \"U8VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.compressed_tex_image_2d(target, level, internal_format, width, height, border, data)\"\n                        },\n                        \"compressed_tex_sub_image_2d\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"level\": \"i32\"},\n                                {\"xoffset\": \"i32\"},\n                                {\"yoffset\": \"i32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"},\n                                {\"format\": \"u32\"},\n                                {\"data\": \"U8VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.compressed_tex_sub_image_2d(target, level, xoffset, yoffset, width, height, format, data)\"\n                        },\n                        \"tex_image_3d\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"level\": \"i32\"},\n                                {\"internal_format\": \"i32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"},\n                                {\"depth\": \"i32\"},\n                                {\"border\": \"i32\"},\n                                {\"format\": \"u32\"},\n                                {\"ty\": \"u32\"},\n                                {\"opt_data\": \"OptionU8VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.tex_image_3d(target, level, internal_format, width, height, depth, border, format, ty, opt_data)\"\n                        },\n                        \"copy_tex_image_2d\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"level\": \"i32\"},\n                                {\"internal_format\": \"u32\"},\n                                {\"x\": \"i32\"},\n                                {\"y\": \"i32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"},\n                                {\"border\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.copy_tex_image_2d(target, level, internal_format, x, y, width, height, border)\"\n                        },\n                        \"copy_tex_sub_image_2d\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"level\": \"i32\"},\n                                {\"xoffset\": \"i32\"},\n                                {\"yoffset\": \"i32\"},\n                                {\"x\": \"i32\"},\n                                {\"y\": \"i32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.copy_tex_sub_image_2d(target, level, xoffset, yoffset, x, y, width, height)\"\n                        },\n                        \"copy_tex_sub_image_3d\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"level\": \"i32\"},\n                                {\"xoffset\": \"i32\"},\n                                {\"yoffset\": \"i32\"},\n                                {\"zoffset\": \"i32\"},\n                                {\"x\": \"i32\"},\n                                {\"y\": \"i32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.copy_tex_sub_image_3d(target, level, xoffset, yoffset, zoffset, x, y, width, height)\"\n                        },\n                        \"tex_sub_image_2d\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"level\": \"i32\"},\n                                {\"xoffset\": \"i32\"},\n                                {\"yoffset\": \"i32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"},\n                                {\"format\": \"u32\"},\n                                {\"ty\": \"u32\"},\n                                {\"data\": \"U8VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.tex_sub_image_2d(target, level, xoffset, yoffset, width, height, format, ty, data)\"\n                        },\n                        \"tex_sub_image_2d_pbo\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"level\": \"i32\"},\n                                {\"xoffset\": \"i32\"},\n                                {\"yoffset\": \"i32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"},\n                                {\"format\": \"u32\"},\n                                {\"ty\": \"u32\"},\n                                {\"offset\": \"usize\"}\n                            ],\n                            \"fn_body\": \"gl.tex_sub_image_2d_pbo(target, level, xoffset, yoffset, width, height, format, ty, offset)\"\n                        },\n                        \"tex_sub_image_3d\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"level\": \"i32\"},\n                                {\"xoffset\": \"i32\"},\n                                {\"yoffset\": \"i32\"},\n                                {\"zoffset\": \"i32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"},\n                                {\"depth\": \"i32\"},\n                                {\"format\": \"u32\"},\n                                {\"ty\": \"u32\"},\n                                {\"data\": \"U8VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.tex_sub_image_3d(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ty, data)\"\n                        },\n                        \"tex_sub_image_3d_pbo\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"level\": \"i32\"},\n                                {\"xoffset\": \"i32\"},\n                                {\"yoffset\": \"i32\"},\n                                {\"zoffset\": \"i32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"},\n                                {\"depth\": \"i32\"},\n                                {\"format\": \"u32\"},\n                                {\"ty\": \"u32\"},\n                                {\"offset\": \"usize\"}\n                            ],\n                            \"fn_body\": \"gl.tex_sub_image_3d_pbo(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ty, offset)\"\n                        },\n                        \"tex_storage_2d\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"levels\": \"i32\"},\n                                {\"internal_format\": \"u32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.tex_storage_2d(target, levels, internal_format, width, height)\"\n                        },\n                        \"tex_storage_3d\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"levels\": \"i32\"},\n                                {\"internal_format\": \"u32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"},\n                                {\"depth\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.tex_storage_3d(target, levels, internal_format, width, height, depth)\"\n                        },\n                        \"get_tex_image_into_buffer\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"level\": \"i32\"},\n                                {\"format\": \"u32\"},\n                                {\"ty\": \"u32\"},\n                                {\"output\": \"U8VecRefMut\"}\n                            ],\n                            \"fn_body\": \"gl.get_tex_image_into_buffer(target, level, format, ty, output)\"\n                        },\n                        \"copy_image_sub_data\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"src_name\": \"u32\"},\n                                {\"src_target\": \"u32\"},\n                                {\"src_level\": \"i32\"},\n                                {\"src_x\": \"i32\"},\n                                {\"src_y\": \"i32\"},\n                                {\"src_z\": \"i32\"},\n                                {\"dst_name\": \"u32\"},\n                                {\"dst_target\": \"u32\"},\n                                {\"dst_level\": \"i32\"},\n                                {\"dst_x\": \"i32\"},\n                                {\"dst_y\": \"i32\"},\n                                {\"dst_z\": \"i32\"},\n                                {\"src_width\": \"i32\"},\n                                {\"src_height\": \"i32\"},\n                                {\"src_depth\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.copy_image_sub_data(src_name, src_target, src_level, src_x, src_y, src_z, dst_name, dst_target, dst_level, dst_x, dst_y, dst_z, src_width, src_height, src_depth)\"\n                        },\n                        \"invalidate_framebuffer\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"attachments\": \"GLenumVecRef\"}\n                            ],\n                            \"fn_body\": \"gl.invalidate_framebuffer(target, attachments)\"\n                        },\n                        \"invalidate_sub_framebuffer\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"attachments\": \"GLenumVecRef\"},\n                                {\"xoffset\": \"i32\"},\n                                {\"yoffset\": \"i32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.invalidate_sub_framebuffer(target, attachments, xoffset, yoffset, width, height)\"\n                        },\n                        \"get_integer_v\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"name\": \"u32\"},\n                                {\"result\": \"GLintVecRefMut\"}\n                            ],\n                            \"fn_body\": \"gl.get_integer_v(name, result)\"\n                        },\n                        \"get_integer_64v\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"name\": \"u32\"},\n                                {\"result\": \"GLint64VecRefMut\"}\n                            ],\n                            \"fn_body\": \"gl.get_integer_64v(name, result)\"\n                        },\n                        \"get_integer_iv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"name\": \"u32\"},\n                                {\"index\": \"u32\"},\n                                {\"result\": \"GLintVecRefMut\"}\n                            ],\n                            \"fn_body\": \"gl.get_integer_iv(name, index, result)\"\n                        },\n                        \"get_integer_64iv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"name\": \"u32\"},\n                                {\"index\": \"u32\"},\n                                {\"result\": \"GLint64VecRefMut\"}\n                            ],\n                            \"fn_body\": \"gl.get_integer_64iv(name, index, result)\"\n                        },\n                        \"get_boolean_v\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"name\": \"u32\"},\n                                {\"result\": \"GLbooleanVecRefMut\"}\n                            ],\n                            \"fn_body\": \"gl.get_boolean_v(name, result)\"\n                        },\n                        \"get_float_v\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"name\": \"u32\"},\n                                {\"result\": \"GLfloatVecRefMut\"}\n                            ],\n                            \"fn_body\": \"gl.get_float_v(name, result)\"\n                        },\n                        \"get_framebuffer_attachment_parameter_iv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"attachment\": \"u32\"},\n                                {\"pname\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_framebuffer_attachment_parameter_iv(target, attachment, pname)\",\n                            \"returns\": {\"type\": \"i32\"}\n                        },\n                        \"get_renderbuffer_parameter_iv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"pname\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_renderbuffer_parameter_iv(target, pname)\",\n                            \"returns\": {\"type\": \"i32\"}\n                        },\n                        \"get_tex_parameter_iv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"name\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_tex_parameter_iv(target, name)\",\n                            \"returns\": {\"type\": \"i32\"}\n                        },\n                        \"get_tex_parameter_fv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"name\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_tex_parameter_fv(target, name)\",\n                            \"returns\": {\"type\": \"f32\"}\n                        },\n                        \"tex_parameter_i\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"pname\": \"u32\"},\n                                {\"param\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.tex_parameter_i(target, pname, param)\"\n                        },\n                        \"tex_parameter_f\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"pname\": \"u32\"},\n                                {\"param\": \"f32\"}\n                            ],\n                            \"fn_body\": \"gl.tex_parameter_f(target, pname, param)\"\n                        },\n                        \"framebuffer_texture_2d\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"attachment\": \"u32\"},\n                                {\"textarget\": \"u32\"},\n                                {\"texture\": \"u32\"},\n                                {\"level\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.framebuffer_texture_2d(target, attachment, textarget, texture, level)\"\n                        },\n                        \"framebuffer_texture_layer\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"attachment\": \"u32\"},\n                                {\"texture\": \"u32\"},\n                                {\"level\": \"i32\"},\n                                {\"layer\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.framebuffer_texture_layer(target, attachment, texture, level, layer)\"\n                        },\n                        \"blit_framebuffer\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"src_x0\": \"i32\"},\n                                {\"src_y0\": \"i32\"},\n                                {\"src_x1\": \"i32\"},\n                                {\"src_y1\": \"i32\"},\n                                {\"dst_x0\": \"i32\"},\n                                {\"dst_y0\": \"i32\"},\n                                {\"dst_x1\": \"i32\"},\n                                {\"dst_y1\": \"i32\"},\n                                {\"mask\": \"u32\"},\n                                {\"filter\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.blit_framebuffer(src_x0, src_y0, src_x1, src_y1, dst_x0, dst_y0, dst_x1, dst_y1, mask, filter)\"\n                        },\n                        \"vertex_attrib_4f\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"index\": \"u32\"},\n                                {\"x\": \"f32\"},\n                                {\"y\": \"f32\"},\n                                {\"z\": \"f32\"},\n                                {\"w\": \"f32\"}\n                            ],\n                            \"fn_body\": \"gl.vertex_attrib_4f(index, x, y, z, w)\"\n                        },\n                        \"vertex_attrib_pointer_f32\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"index\": \"u32\"},\n                                {\"size\": \"i32\"},\n                                {\"normalized\": \"bool\"},\n                                {\"stride\": \"i32\"},\n                                {\"offset\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.vertex_attrib_pointer_f32(index, size, normalized, stride, offset)\"\n                        },\n                        \"vertex_attrib_pointer\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"index\": \"u32\"},\n                                {\"size\": \"i32\"},\n                                {\"type_\": \"u32\"},\n                                {\"normalized\": \"bool\"},\n                                {\"stride\": \"i32\"},\n                                {\"offset\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.vertex_attrib_pointer(index, size, type_, normalized, stride, offset)\"\n                        },\n                        \"vertex_attrib_i_pointer\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"index\": \"u32\"},\n                                {\"size\": \"i32\"},\n                                {\"type_\": \"u32\"},\n                                {\"stride\": \"i32\"},\n                                {\"offset\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.vertex_attrib_i_pointer(index, size, type_, stride, offset)\"\n                        },\n                        \"vertex_attrib_divisor\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"index\": \"u32\"},\n                                {\"divisor\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.vertex_attrib_divisor(index, divisor)\"\n                        },\n                        \"viewport\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"x\": \"i32\"},\n                                {\"y\": \"i32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.viewport(x, y, width, height)\"\n                        },\n                        \"scissor\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"x\": \"i32\"},\n                                {\"y\": \"i32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.scissor(x, y, width, height)\"\n                        },\n                        \"line_width\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"width\": \"f32\"}\n                            ],\n                            \"fn_body\": \"gl.line_width(width)\"\n                        },\n                        \"use_program\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.use_program(program)\"\n                        },\n                        \"validate_program\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.validate_program(program)\"\n                        },\n                        \"draw_arrays\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"mode\": \"u32\"},\n                                {\"first\": \"i32\"},\n                                {\"count\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.draw_arrays(mode, first, count)\"\n                        },\n                        \"draw_arrays_instanced\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"mode\": \"u32\"},\n                                {\"first\": \"i32\"},\n                                {\"count\": \"i32\"},\n                                {\"primcount\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.draw_arrays_instanced(mode, first, count, primcount)\"\n                        },\n                        \"draw_elements\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"mode\": \"u32\"},\n                                {\"count\": \"i32\"},\n                                {\"element_type\": \"u32\"},\n                                {\"indices_offset\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.draw_elements(mode, count, element_type, indices_offset)\"\n                        },\n                        \"draw_elements_instanced\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"mode\": \"u32\"},\n                                {\"count\": \"i32\"},\n                                {\"element_type\": \"u32\"},\n                                {\"indices_offset\": \"u32\"},\n                                {\"primcount\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.draw_elements_instanced(mode, count, element_type, indices_offset, primcount)\"\n                        },\n                        \"blend_color\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"r\": \"f32\"},\n                                {\"g\": \"f32\"},\n                                {\"b\": \"f32\"},\n                                {\"a\": \"f32\"}\n                            ],\n                            \"fn_body\": \"gl.blend_color(r, g, b, a)\"\n                        },\n                        \"blend_func\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"sfactor\": \"u32\"},\n                                {\"dfactor\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.blend_func(sfactor, dfactor)\"\n                        },\n                        \"blend_func_separate\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"src_rgb\": \"u32\"},\n                                {\"dest_rgb\": \"u32\"},\n                                {\"src_alpha\": \"u32\"},\n                                {\"dest_alpha\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.blend_func_separate(src_rgb, dest_rgb, src_alpha, dest_alpha)\"\n                        },\n                        \"blend_equation\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"mode\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.blend_equation(mode)\"\n                        },\n                        \"blend_equation_separate\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"mode_rgb\": \"u32\"},\n                                {\"mode_alpha\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.blend_equation_separate(mode_rgb, mode_alpha)\"\n                        },\n                        \"color_mask\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"r\": \"bool\"},\n                                {\"g\": \"bool\"},\n                                {\"b\": \"bool\"},\n                                {\"a\": \"bool\"}\n                            ],\n                            \"fn_body\": \"gl.color_mask(r, g, b, a)\"\n                        },\n                        \"cull_face\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"mode\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.cull_face(mode)\"\n                        },\n                        \"front_face\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"mode\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.front_face(mode)\"\n                        },\n                        \"enable\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"cap\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.enable(cap)\"\n                        },\n                        \"disable\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"cap\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.disable(cap)\"\n                        },\n                        \"hint\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"param_name\": \"u32\"},\n                                {\"param_val\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.hint(param_name, param_val)\"\n                        },\n                        \"is_enabled\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"cap\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.is_enabled(cap)\",\n                            \"returns\": {\"type\": \"u8\"}\n                        },\n                        \"is_shader\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"shader\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.is_shader(shader)\",\n                            \"returns\": {\"type\": \"u8\"}\n                        },\n                        \"is_texture\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"texture\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.is_texture(texture)\",\n                            \"returns\": {\"type\": \"u8\"}\n                        },\n                        \"is_framebuffer\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"framebuffer\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.is_framebuffer(framebuffer)\",\n                            \"returns\": {\"type\": \"u8\"}\n                        },\n                        \"is_renderbuffer\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"renderbuffer\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.is_renderbuffer(renderbuffer)\",\n                            \"returns\": {\"type\": \"u8\"}\n                        },\n                        \"check_frame_buffer_status\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.check_frame_buffer_status(target)\",\n                            \"returns\": {\"type\": \"u32\"}\n                        },\n                        \"enable_vertex_attrib_array\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"index\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.enable_vertex_attrib_array(index)\"\n                        },\n                        \"disable_vertex_attrib_array\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"index\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.disable_vertex_attrib_array(index)\"\n                        },\n                        \"uniform_1f\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"v0\": \"f32\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_1f(location, v0)\"\n                        },\n                        \"uniform_1fv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"values\": \"F32VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_1fv(location, values)\"\n                        },\n                        \"uniform_1i\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"v0\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_1i(location, v0)\"\n                        },\n                        \"uniform_1iv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"values\": \"I32VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_1iv(location, values)\"\n                        },\n                        \"uniform_1ui\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"v0\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_1ui(location, v0)\"\n                        },\n                        \"uniform_2f\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"v0\": \"f32\"},\n                                {\"v1\": \"f32\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_2f(location, v0, v1)\"\n                        },\n                        \"uniform_2fv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"values\": \"F32VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_2fv(location, values)\"\n                        },\n                        \"uniform_2i\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"v0\": \"i32\"},\n                                {\"v1\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_2i(location, v0, v1)\"\n                        },\n                        \"uniform_2iv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"values\": \"I32VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_2iv(location, values)\"\n                        },\n                        \"uniform_2ui\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"v0\": \"u32\"},\n                                {\"v1\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_2ui(location, v0, v1)\"\n                        },\n                        \"uniform_3f\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"v0\": \"f32\"},\n                                {\"v1\": \"f32\"},\n                                {\"v2\": \"f32\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_3f(location, v0, v1, v2)\"\n                        },\n                        \"uniform_3fv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"values\": \"F32VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_3fv(location, values)\"\n                        },\n                        \"uniform_3i\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"v0\": \"i32\"},\n                                {\"v1\": \"i32\"},\n                                {\"v2\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_3i(location, v0, v1, v2)\"\n                        },\n                        \"uniform_3iv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"values\": \"I32VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_3iv(location, values)\"\n                        },\n                        \"uniform_3ui\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"v0\": \"u32\"},\n                                {\"v1\": \"u32\"},\n                                {\"v2\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_3ui(location, v0, v1, v2)\"\n                        },\n                        \"uniform_4f\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"x\": \"f32\"},\n                                {\"y\": \"f32\"},\n                                {\"z\": \"f32\"},\n                                {\"w\": \"f32\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_4f(location, x, y, z, w)\"\n                        },\n                        \"uniform_4i\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"x\": \"i32\"},\n                                {\"y\": \"i32\"},\n                                {\"z\": \"i32\"},\n                                {\"w\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_4i(location, x, y, z, w)\"\n                        },\n                        \"uniform_4iv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"values\": \"I32VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_4iv(location, values)\"\n                        },\n                        \"uniform_4ui\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"x\": \"u32\"},\n                                {\"y\": \"u32\"},\n                                {\"z\": \"u32\"},\n                                {\"w\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_4ui(location, x, y, z, w)\"\n                        },\n                        \"uniform_4fv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"values\": \"F32VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_4fv(location, values)\"\n                        },\n                        \"uniform_matrix_2fv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"transpose\": \"bool\"},\n                                {\"value\": \"F32VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_matrix_2fv(location, transpose, value)\"\n                        },\n                        \"uniform_matrix_3fv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"transpose\": \"bool\"},\n                                {\"value\": \"F32VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_matrix_3fv(location, transpose, value)\"\n                        },\n                        \"uniform_matrix_4fv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"location\": \"i32\"},\n                                {\"transpose\": \"bool\"},\n                                {\"value\": \"F32VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.uniform_matrix_4fv(location, transpose, value)\"\n                        },\n                        \"depth_mask\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"flag\": \"bool\"}\n                            ],\n                            \"fn_body\": \"gl.depth_mask(flag)\"\n                        },\n                        \"depth_range\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"near\": \"f64\"},\n                                {\"far\": \"f64\"}\n                            ],\n                            \"fn_body\": \"gl.depth_range(near, far)\"\n                        },\n                        \"get_active_attrib\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"index\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_active_attrib(program, index)\",\n                            \"returns\": {\"type\": \"GetActiveAttribReturn\"}\n                        },\n                        \"get_active_uniform\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"index\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_active_uniform(program, index)\",\n                            \"returns\": {\"type\": \"GetActiveUniformReturn\"}\n                        },\n                        \"get_active_uniforms_iv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"indices\": \"GLuintVec\"},\n                                {\"pname\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_active_uniforms_iv(program, indices, pname)\",\n                            \"returns\": {\"type\": \"GLintVec\"}\n                        },\n                        \"get_active_uniform_block_i\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"index\": \"u32\"},\n                                {\"pname\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_active_uniform_block_i(program, index, pname)\",\n                            \"returns\": {\"type\": \"i32\"}\n                        },\n                        \"get_active_uniform_block_iv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"index\": \"u32\"},\n                                {\"pname\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_active_uniform_block_iv(program, index, pname)\",\n                            \"returns\": {\"type\": \"GLintVec\"}\n                        },\n                        \"get_active_uniform_block_name\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"index\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_active_uniform_block_name(program, index)\",\n                            \"returns\": {\"type\": \"String\"}\n                        },\n                        \"get_attrib_location\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"name\": \"Refstr\"}\n                            ],\n                            \"fn_body\": \"gl.get_attrib_location(program, name)\",\n                            \"returns\": {\"type\": \"i32\"}\n                        },\n                        \"get_frag_data_location\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"name\": \"Refstr\"}\n                            ],\n                            \"fn_body\": \"gl.get_frag_data_location(program, name)\",\n                            \"returns\": {\"type\": \"i32\"}\n                        },\n                        \"get_uniform_location\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"name\": \"Refstr\"}\n                            ],\n                            \"fn_body\": \"gl.get_uniform_location(program, name)\",\n                            \"returns\": {\"type\": \"i32\"}\n                        },\n                        \"get_program_info_log\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_program_info_log(program)\",\n                            \"returns\": {\"type\": \"String\"}\n                        },\n                        \"get_program_iv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"pname\": \"u32\"},\n                                {\"result\": \"GLintVecRefMut\"}\n                            ],\n                            \"fn_body\": \"gl.get_program_iv(program, pname, result)\"\n                        },\n                        \"get_program_binary\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_program_binary(program)\",\n                            \"returns\": {\"type\": \"GetProgramBinaryReturn\"}\n                        },\n                        \"program_binary\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"format\": \"u32\"},\n                                {\"binary\": \"U8VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.program_binary(program, format, binary)\"\n                        },\n                        \"program_parameter_i\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"pname\": \"u32\"},\n                                {\"value\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.program_parameter_i(program, pname, value)\"\n                        },\n                        \"get_vertex_attrib_iv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"index\": \"u32\"},\n                                {\"pname\": \"u32\"},\n                                {\"result\": \"GLintVecRefMut\"}\n                            ],\n                            \"fn_body\": \"gl.get_vertex_attrib_iv(index, pname, result)\"\n                        },\n                        \"get_vertex_attrib_fv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"index\": \"u32\"},\n                                {\"pname\": \"u32\"},\n                                {\"result\": \"GLfloatVecRefMut\"}\n                            ],\n                            \"fn_body\": \"gl.get_vertex_attrib_fv(index, pname, result)\"\n                        },\n                        \"get_vertex_attrib_pointer_v\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"index\": \"u32\"},\n                                {\"pname\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_vertex_attrib_pointer_v(index, pname)\",\n                            \"returns\": {\"type\": \"isize\"}\n                        },\n                        \"get_buffer_parameter_iv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"pname\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_buffer_parameter_iv(target, pname)\",\n                            \"returns\": {\"type\": \"i32\"}\n                        },\n                        \"get_shader_info_log\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"shader\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_shader_info_log(shader)\",\n                            \"returns\": {\"type\": \"String\"}\n                        },\n                        \"get_string\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"which\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_string(which)\",\n                            \"returns\": {\"type\": \"String\"}\n                        },\n                        \"get_string_i\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"which\": \"u32\"},\n                                {\"index\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_string_i(which, index)\",\n                            \"returns\": {\"type\": \"String\"}\n                        },\n                        \"get_shader_iv\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"shader\": \"u32\"},\n                                {\"pname\": \"u32\"},\n                                {\"result\": \"GLintVecRefMut\"}\n                            ],\n                            \"fn_body\": \"gl.get_shader_iv(shader, pname, result)\"\n                        },\n                        \"get_shader_precision_format\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"shader_type\": \"u32\"},\n                                {\"precision_type\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.get_shader_precision_format(shader_type, precision_type)\",\n                            \"returns\": {\"type\": \"GlShaderPrecisionFormatReturn\"}\n                        },\n                        \"compile_shader\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"shader\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.compile_shader(shader)\"\n                        },\n                        \"create_program\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"fn_body\": \"gl.create_program()\",\n                            \"returns\": {\"type\": \"u32\"}\n                        },\n                        \"delete_program\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.delete_program(program)\"\n                        },\n                        \"create_shader\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"shader_type\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.create_shader(shader_type)\",\n                            \"returns\": {\"type\": \"u32\"}\n                        },\n                        \"delete_shader\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"shader\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.delete_shader(shader)\"\n                        },\n                        \"detach_shader\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"shader\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.detach_shader(program, shader)\"\n                        },\n                        \"link_program\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.link_program(program)\"\n                        },\n                        \"clear_color\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"r\": \"f32\"},\n                                {\"g\": \"f32\"},\n                                {\"b\": \"f32\"},\n                                {\"a\": \"f32\"}\n                            ],\n                            \"fn_body\": \"gl.clear_color(r, g, b, a)\"\n                        },\n                        \"clear\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"buffer_mask\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.clear(buffer_mask)\"\n                        },\n                        \"clear_depth\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"depth\": \"f64\"}\n                            ],\n                            \"fn_body\": \"gl.clear_depth(depth)\"\n                        },\n                        \"clear_stencil\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"s\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.clear_stencil(s)\"\n                        },\n                        \"flush\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"fn_body\": \"gl.flush()\"\n                        },\n                        \"finish\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"fn_body\": \"gl.finish()\"\n                        },\n                        \"get_error\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"fn_body\": \"gl.get_error()\",\n                            \"returns\": {\"type\": \"u32\"}\n                        },\n                        \"stencil_mask\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"mask\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.stencil_mask(mask)\"\n                        },\n                        \"stencil_mask_separate\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"face\": \"u32\"},\n                                {\"mask\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.stencil_mask_separate(face, mask)\"\n                        },\n                        \"stencil_func\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"func\": \"u32\"},\n                                {\"ref_\": \"i32\"},\n                                {\"mask\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.stencil_func(func, ref_, mask)\"\n                        },\n                        \"stencil_func_separate\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"face\": \"u32\"},\n                                {\"func\": \"u32\"},\n                                {\"ref_\": \"i32\"},\n                                {\"mask\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.stencil_func_separate(face, func, ref_, mask)\"\n                        },\n                        \"stencil_op\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"sfail\": \"u32\"},\n                                {\"dpfail\": \"u32\"},\n                                {\"dppass\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.stencil_op(sfail, dpfail, dppass)\"\n                        },\n                        \"stencil_op_separate\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"face\": \"u32\"},\n                                {\"sfail\": \"u32\"},\n                                {\"dpfail\": \"u32\"},\n                                {\"dppass\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.stencil_op_separate(face, sfail, dpfail, dppass)\"\n                        },\n                        \"egl_image_target_texture2d_oes\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"image\": \"GlVoidPtrConst\"}\n                            ],\n                            \"fn_body\": \"gl.egl_image_target_texture2d_oes(target, image)\"\n                        },\n                        \"generate_mipmap\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.generate_mipmap(target)\"\n                        },\n                        \"insert_event_marker_ext\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"message\": \"Refstr\"}\n                            ],\n                            \"fn_body\": \"gl.insert_event_marker_ext(message)\"\n                        },\n                        \"push_group_marker_ext\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"message\": \"Refstr\"}\n                            ],\n                            \"fn_body\": \"gl.push_group_marker_ext(message)\"\n                        },\n                        \"pop_group_marker_ext\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"fn_body\": \"gl.pop_group_marker_ext()\"\n                        },\n                        \"debug_message_insert_khr\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"source\": \"u32\"},\n                                {\"type_\": \"u32\"},\n                                {\"id\": \"u32\"},\n                                {\"severity\": \"u32\"},\n                                {\"message\": \"Refstr\"}\n                            ],\n                            \"fn_body\": \"gl.debug_message_insert_khr(source, type_, id, severity, message)\"\n                        },\n                        \"push_debug_group_khr\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"source\": \"u32\"},\n                                {\"id\": \"u32\"},\n                                {\"message\": \"Refstr\"}\n                            ],\n                            \"fn_body\": \"gl.push_debug_group_khr(source, id, message)\"\n                        },\n                        \"pop_debug_group_khr\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"fn_body\": \"gl.pop_debug_group_khr()\"\n                        },\n                        \"fence_sync\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"condition\": \"u32\"},\n                                {\"flags\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.fence_sync(condition, flags)\",\n                            \"returns\": {\"type\": \"GLsyncPtr\"}\n                        },\n                        \"client_wait_sync\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"sync\": \"GLsyncPtr\"},\n                                {\"flags\": \"u32\"},\n                                {\"timeout\": \"u64\"}\n                            ],\n                            \"returns\": {\"type\": \"u32\"},\n                            \"fn_body\": \"gl.client_wait_sync(sync, flags, timeout)\"\n                        },\n                        \"wait_sync\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"sync\": \"GLsyncPtr\"},\n                                {\"flags\": \"u32\"},\n                                {\"timeout\": \"u64\"}\n                            ],\n                            \"fn_body\": \"gl.wait_sync(sync, flags, timeout)\"\n                        },\n                        \"delete_sync\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"sync\": \"GLsyncPtr\"}\n                            ],\n                            \"fn_body\": \"gl.delete_sync(sync)\"\n                        },\n                        \"texture_range_apple\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"data\": \"U8VecRef\"}\n                            ],\n                            \"fn_body\": \"gl.texture_range_apple(target, data)\"\n                        },\n                        \"gen_fences_apple\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"n\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.gen_fences_apple(n)\",\n                            \"returns\": {\"type\": \"GLuintVec\"}\n                        },\n                        \"delete_fences_apple\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"fences\": \"GLuintVecRef\"}\n                            ],\n                            \"fn_body\": \"gl.delete_fences_apple(fences)\"\n                        },\n                        \"set_fence_apple\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"fence\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.set_fence_apple(fence)\"\n                        },\n                        \"finish_fence_apple\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"fence\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.finish_fence_apple(fence)\"\n                        },\n                        \"test_fence_apple\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"fence\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.test_fence_apple(fence)\"\n                        },\n                        \"test_object_apple\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"object\": \"u32\"},\n                                {\"name\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.test_object_apple(object, name)\",\n                            \"returns\": {\"type\": \"u8\"}\n                        },\n                        \"finish_object_apple\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"object\": \"u32\"},\n                                {\"name\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.finish_object_apple(object, name)\"\n                        },\n                        \"get_frag_data_index\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"name\": \"Refstr\"}\n                            ],\n                            \"fn_body\": \"gl.get_frag_data_index(program, name)\",\n                            \"returns\": {\"type\": \"i32\"}\n                        },\n                        \"blend_barrier_khr\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"fn_body\": \"gl.blend_barrier_khr()\"\n                        },\n                        \"bind_frag_data_location_indexed\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"program\": \"u32\"},\n                                {\"color_number\": \"u32\"},\n                                {\"index\": \"u32\"},\n                                {\"name\": \"Refstr\"}\n                            ],\n                            \"fn_body\": \"gl.bind_frag_data_location_indexed(program, color_number, index, name)\"\n                        },\n                        \"get_debug_messages\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"}\n                            ],\n                            \"fn_body\": \"gl.get_debug_messages()\",\n                            \"returns\": {\"type\": \"DebugMessageVec\"}\n                        },\n                        \"provoking_vertex_angle\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"mode\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.provoking_vertex_angle(mode)\"\n                        },\n                        \"gen_vertex_arrays_apple\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"n\": \"i32\"}\n                            ],\n                            \"fn_body\": \"gl.gen_vertex_arrays_apple(n)\",\n                            \"returns\": {\"type\": \"GLuintVec\"}\n                        },\n                        \"bind_vertex_array_apple\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"vao\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.bind_vertex_array_apple(vao)\"\n                        },\n                        \"delete_vertex_arrays_apple\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"vertex_arrays\": \"GLuintVecRef\"}\n                            ],\n                            \"fn_body\": \"gl.delete_vertex_arrays_apple(vertex_arrays)\"\n                        },\n                        \"copy_texture_chromium\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"source_id\": \"u32\"},\n                                {\"source_level\": \"i32\"},\n                                {\"dest_target\": \"u32\"},\n                                {\"dest_id\": \"u32\"},\n                                {\"dest_level\": \"i32\"},\n                                {\"internal_format\": \"i32\"},\n                                {\"dest_type\": \"u32\"},\n                                {\"unpack_flip_y\": \"u8\"},\n                                {\"unpack_premultiply_alpha\": \"u8\"},\n                                {\"unpack_unmultiply_alpha\": \"u8\"}\n                            ],\n                            \"fn_body\": \"gl.copy_texture_chromium(source_id, source_level, dest_target, dest_id, dest_level, internal_format, dest_type, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha)\"\n                        },\n                        \"copy_sub_texture_chromium\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"source_id\": \"u32\"},\n                                {\"source_level\": \"i32\"},\n                                {\"dest_target\": \"u32\"},\n                                {\"dest_id\": \"u32\"},\n                                {\"dest_level\": \"i32\"},\n                                {\"x_offset\": \"i32\"},\n                                {\"y_offset\": \"i32\"},\n                                {\"x\": \"i32\"},\n                                {\"y\": \"i32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"},\n                                {\"unpack_flip_y\": \"u8\"},\n                                {\"unpack_premultiply_alpha\": \"u8\"},\n                                {\"unpack_unmultiply_alpha\": \"u8\"}\n                            ],\n                            \"fn_body\": \"gl.copy_sub_texture_chromium(source_id, source_level, dest_target, dest_id, dest_level, x_offset, y_offset, x, y, width, height, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha)\"\n                        },\n                        \"egl_image_target_renderbuffer_storage_oes\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"image\": \"GlVoidPtrConst\"}\n                            ],\n                            \"fn_body\": \"gl.egl_image_target_renderbuffer_storage_oes(target, image)\"\n                        },\n                        \"copy_texture_3d_angle\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"source_id\": \"u32\"},\n                                {\"source_level\": \"i32\"},\n                                {\"dest_target\": \"u32\"},\n                                {\"dest_id\": \"u32\"},\n                                {\"dest_level\": \"i32\"},\n                                {\"internal_format\": \"i32\"},\n                                {\"dest_type\": \"u32\"},\n                                {\"unpack_flip_y\": \"u8\"},\n                                {\"unpack_premultiply_alpha\": \"u8\"},\n                                {\"unpack_unmultiply_alpha\": \"u8\"}\n                            ],\n                            \"fn_body\": \"gl.copy_texture_3d_angle(source_id, source_level, dest_target, dest_id, dest_level, internal_format, dest_type, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha)\"\n                        },\n                        \"copy_sub_texture_3d_angle\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"source_id\": \"u32\"},\n                                {\"source_level\": \"i32\"},\n                                {\"dest_target\": \"u32\"},\n                                {\"dest_id\": \"u32\"},\n                                {\"dest_level\": \"i32\"},\n                                {\"x_offset\": \"i32\"},\n                                {\"y_offset\": \"i32\"},\n                                {\"z_offset\": \"i32\"},\n                                {\"x\": \"i32\"},\n                                {\"y\": \"i32\"},\n                                {\"z\": \"i32\"},\n                                {\"width\": \"i32\"},\n                                {\"height\": \"i32\"},\n                                {\"depth\": \"i32\"},\n                                {\"unpack_flip_y\": \"u8\"},\n                                {\"unpack_premultiply_alpha\": \"u8\"},\n                                {\"unpack_unmultiply_alpha\": \"u8\"}\n                            ],\n                            \"fn_body\": \"gl.copy_sub_texture_3d_angle(source_id, source_level, dest_target, dest_id, dest_level, x_offset, y_offset, z_offset, x, y, z, width, height, depth, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha)\"\n                        },\n                        \"buffer_storage\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"size\": \"isize\"},\n                                {\"data\": \"GlVoidPtrConst\"},\n                                {\"flags\": \"u32\"}\n                            ],\n                            \"fn_body\": \"gl.buffer_storage(target, size, data, flags)\"\n                        },\n                        \"flush_mapped_buffer_range\": {\n                            \"fn_args\": [\n                                {\"self\": \"ref\"},\n                                {\"target\": \"u32\"},\n                                {\"offset\": \"isize\"},\n                                {\"length\": \"isize\"}\n                            ],\n                            \"fn_body\": \"gl.flush_mapped_buffer_range(target, offset, length)\"\n                        }\n                    },\n                    \"constants\": [\n                        {\"ACCUM\": {\"type\": \"u32\", \"value\": \"0x0100\"}},\n                        {\"ACCUM_ALPHA_BITS\": {\"type\": \"u32\", \"value\": \"0x0D5B\"}},\n                        {\"ACCUM_BLUE_BITS\": {\"type\": \"u32\", \"value\": \"0x0D5A\"}},\n                        {\"ACCUM_BUFFER_BIT\": {\"type\": \"u32\", \"value\": \"0x00000200\"}},\n                        {\"ACCUM_CLEAR_VALUE\": {\"type\": \"u32\", \"value\": \"0x0B80\"}},\n                        {\"ACCUM_GREEN_BITS\": {\"type\": \"u32\", \"value\": \"0x0D59\"}},\n                        {\"ACCUM_RED_BITS\": {\"type\": \"u32\", \"value\": \"0x0D58\"}},\n                        {\"ACTIVE_ATTRIBUTES\": {\"type\": \"u32\", \"value\": \"0x8B89\"}},\n                        {\"ACTIVE_ATTRIBUTE_MAX_LENGTH\": {\"type\": \"u32\", \"value\": \"0x8B8A\"}},\n                        {\"ACTIVE_TEXTURE\": {\"type\": \"u32\", \"value\": \"0x84E0\"}},\n                        {\"ACTIVE_UNIFORMS\": {\"type\": \"u32\", \"value\": \"0x8B86\"}},\n                        {\"ACTIVE_UNIFORM_BLOCKS\": {\"type\": \"u32\", \"value\": \"0x8A36\"}},\n                        {\"ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH\": {\"type\": \"u32\", \"value\": \"0x8A35\"}},\n                        {\"ACTIVE_UNIFORM_MAX_LENGTH\": {\"type\": \"u32\", \"value\": \"0x8B87\"}},\n                        {\"ADD\": {\"type\": \"u32\", \"value\": \"0x0104\"}},\n                        {\"ADD_SIGNED\": {\"type\": \"u32\", \"value\": \"0x8574\"}},\n                        {\"ALIASED_LINE_WIDTH_RANGE\": {\"type\": \"u32\", \"value\": \"0x846E\"}},\n                        {\"ALIASED_POINT_SIZE_RANGE\": {\"type\": \"u32\", \"value\": \"0x846D\"}},\n                        {\"ALL_ATTRIB_BITS\": {\"type\": \"u32\", \"value\": \"0xFFFFFFFF\"}},\n                        {\"ALPHA\": {\"type\": \"u32\", \"value\": \"0x1906\"}},\n                        {\"ALPHA12\": {\"type\": \"u32\", \"value\": \"0x803D\"}},\n                        {\"ALPHA16\": {\"type\": \"u32\", \"value\": \"0x803E\"}},\n                        {\"ALPHA16F_EXT\": {\"type\": \"u32\", \"value\": \"0x881C\"}},\n                        {\"ALPHA32F_EXT\": {\"type\": \"u32\", \"value\": \"0x8816\"}},\n                        {\"ALPHA4\": {\"type\": \"u32\", \"value\": \"0x803B\"}},\n                        {\"ALPHA8\": {\"type\": \"u32\", \"value\": \"0x803C\"}},\n                        {\"ALPHA8_EXT\": {\"type\": \"u32\", \"value\": \"0x803C\"}},\n                        {\"ALPHA_BIAS\": {\"type\": \"u32\", \"value\": \"0x0D1D\"}},\n                        {\"ALPHA_BITS\": {\"type\": \"u32\", \"value\": \"0x0D55\"}},\n                        {\"ALPHA_INTEGER\": {\"type\": \"u32\", \"value\": \"0x8D97\"}},\n                        {\"ALPHA_SCALE\": {\"type\": \"u32\", \"value\": \"0x0D1C\"}},\n                        {\"ALPHA_TEST\": {\"type\": \"u32\", \"value\": \"0x0BC0\"}},\n                        {\"ALPHA_TEST_FUNC\": {\"type\": \"u32\", \"value\": \"0x0BC1\"}},\n                        {\"ALPHA_TEST_REF\": {\"type\": \"u32\", \"value\": \"0x0BC2\"}},\n                        {\"ALREADY_SIGNALED\": {\"type\": \"u32\", \"value\": \"0x911A\"}},\n                        {\"ALWAYS\": {\"type\": \"u32\", \"value\": \"0x0207\"}},\n                        {\"AMBIENT\": {\"type\": \"u32\", \"value\": \"0x1200\"}},\n                        {\"AMBIENT_AND_DIFFUSE\": {\"type\": \"u32\", \"value\": \"0x1602\"}},\n                        {\"AND\": {\"type\": \"u32\", \"value\": \"0x1501\"}},\n                        {\"AND_INVERTED\": {\"type\": \"u32\", \"value\": \"0x1504\"}},\n                        {\"AND_REVERSE\": {\"type\": \"u32\", \"value\": \"0x1502\"}},\n                        {\"ANY_SAMPLES_PASSED\": {\"type\": \"u32\", \"value\": \"0x8C2F\"}},\n                        {\"ANY_SAMPLES_PASSED_CONSERVATIVE\": {\"type\": \"u32\", \"value\": \"0x8D6A\"}},\n                        {\"ARRAY_BUFFER\": {\"type\": \"u32\", \"value\": \"0x8892\"}},\n                        {\"ARRAY_BUFFER_BINDING\": {\"type\": \"u32\", \"value\": \"0x8894\"}},\n                        {\"ATTACHED_SHADERS\": {\"type\": \"u32\", \"value\": \"0x8B85\"}},\n                        {\"ATTRIB_STACK_DEPTH\": {\"type\": \"u32\", \"value\": \"0x0BB0\"}},\n                        {\"AUTO_NORMAL\": {\"type\": \"u32\", \"value\": \"0x0D80\"}},\n                        {\"AUX0\": {\"type\": \"u32\", \"value\": \"0x0409\"}},\n                        {\"AUX1\": {\"type\": \"u32\", \"value\": \"0x040A\"}},\n                        {\"AUX2\": {\"type\": \"u32\", \"value\": \"0x040B\"}},\n                        {\"AUX3\": {\"type\": \"u32\", \"value\": \"0x040C\"}},\n                        {\"AUX_BUFFERS\": {\"type\": \"u32\", \"value\": \"0x0C00\"}},\n                        {\"BACK\": {\"type\": \"u32\", \"value\": \"0x0405\"}},\n                        {\"BACK_LEFT\": {\"type\": \"u32\", \"value\": \"0x0402\"}},\n                        {\"BACK_RIGHT\": {\"type\": \"u32\", \"value\": \"0x0403\"}},\n                        {\"BGR\": {\"type\": \"u32\", \"value\": \"0x80E0\"}},\n                        {\"BGRA\": {\"type\": \"u32\", \"value\": \"0x80E1\"}},\n                        {\"BGRA8_EXT\": {\"type\": \"u32\", \"value\": \"0x93A1\"}},\n                        {\"BGRA_EXT\": {\"type\": \"u32\", \"value\": \"0x80E1\"}},\n                        {\"BGRA_INTEGER\": {\"type\": \"u32\", \"value\": \"0x8D9B\"}},\n                        {\"BGR_INTEGER\": {\"type\": \"u32\", \"value\": \"0x8D9A\"}},\n                        {\"BITMAP\": {\"type\": \"u32\", \"value\": \"0x1A00\"}},\n                        {\"BITMAP_TOKEN\": {\"type\": \"u32\", \"value\": \"0x0704\"}},\n                        {\"BLEND\": {\"type\": \"u32\", \"value\": \"0x0BE2\"}},\n                        {\"BLEND_ADVANCED_COHERENT_KHR\": {\"type\": \"u32\", \"value\": \"0x9285\"}},\n                        {\"BLEND_COLOR\": {\"type\": \"u32\", \"value\": \"0x8005\"}},\n                        {\"BLEND_DST\": {\"type\": \"u32\", \"value\": \"0x0BE0\"}},\n                        {\"BLEND_DST_ALPHA\": {\"type\": \"u32\", \"value\": \"0x80CA\"}},\n                        {\"BLEND_DST_RGB\": {\"type\": \"u32\", \"value\": \"0x80C8\"}},\n                        {\"BLEND_EQUATION\": {\"type\": \"u32\", \"value\": \"0x8009\"}},\n                        {\"BLEND_EQUATION_ALPHA\": {\"type\": \"u32\", \"value\": \"0x883D\"}},\n                        {\"BLEND_EQUATION_RGB\": {\"type\": \"u32\", \"value\": \"0x8009\"}},\n                        {\"BLEND_SRC\": {\"type\": \"u32\", \"value\": \"0x0BE1\"}},\n                        {\"BLEND_SRC_ALPHA\": {\"type\": \"u32\", \"value\": \"0x80CB\"}},\n                        {\"BLEND_SRC_RGB\": {\"type\": \"u32\", \"value\": \"0x80C9\"}},\n                        {\"BLUE\": {\"type\": \"u32\", \"value\": \"0x1905\"}},\n                        {\"BLUE_BIAS\": {\"type\": \"u32\", \"value\": \"0x0D1B\"}},\n                        {\"BLUE_BITS\": {\"type\": \"u32\", \"value\": \"0x0D54\"}},\n                        {\"BLUE_INTEGER\": {\"type\": \"u32\", \"value\": \"0x8D96\"}},\n                        {\"BLUE_SCALE\": {\"type\": \"u32\", \"value\": \"0x0D1A\"}},\n                        {\"BOOL\": {\"type\": \"u32\", \"value\": \"0x8B56\"}},\n                        {\"BOOL_VEC2\": {\"type\": \"u32\", \"value\": \"0x8B57\"}},\n                        {\"BOOL_VEC3\": {\"type\": \"u32\", \"value\": \"0x8B58\"}},\n                        {\"BOOL_VEC"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "azul-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "azul-css-parser",
          "type": "tree",
          "content": null
        },
        {
          "name": "azul-css",
          "type": "tree",
          "content": null
        },
        {
          "name": "azul-desktop",
          "type": "tree",
          "content": null
        },
        {
          "name": "azul-dll",
          "type": "tree",
          "content": null
        },
        {
          "name": "azul-layout",
          "type": "tree",
          "content": null
        },
        {
          "name": "azul-text-layout",
          "type": "tree",
          "content": null
        },
        {
          "name": "azulc",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.py",
          "type": "blob",
          "size": 189.8984375,
          "content": "import json\nimport re\nimport pprint\nimport os\nimport subprocess\nimport shutil\nfrom sys import platform\nimport time\n\n# dict that keeps the order of insertion\nfrom collections import OrderedDict\n\ndef create_folder(path):\n    os.mkdir(path)\n\ndef remove_path(path):\n    \"\"\" param <path> could either be relative or absolute. \"\"\"\n    if os.path.isfile(path) or os.path.islink(path):\n        os.remove(path)  # remove the file\n    elif os.path.isdir(path):\n        shutil.rmtree(path)  # remove dir and all contains\n    else:\n        raise ValueError(\"file {} is not a file or dir.\".format(path))\n\ndef zip_directory(output_filename, dir_name):\n    shutil.make_archive(output_filename, 'zip', dir_name)\n\ndef copy_file(src, dest):\n    shutil.copyfile(src, dest)\n\ndef read_file(path):\n    text_file = open(path, 'r')\n    text_file_contents = text_file.read()\n    text_file.close()\n    return text_file_contents\n\ndef read_api_file(path):\n    api_file_contents = read_file(path)\n    apiData = json.loads(api_file_contents)\n    return apiData\n\nhtml_root = \"https://azul.rs\"\nroot_folder = os.path.abspath(os.path.join(__file__, os.pardir))\nprefix = \"Az\"\nbasic_types = [ # note: \"char\" is not a primitive type! - use u32 instead\n    \"bool\", \"f32\", \"f64\", \"fn\", \"i128\", \"i16\",\n    \"i32\", \"i64\", \"i8\", \"isize\", \"slice\", \"u128\", \"u16\",\n    \"u32\", \"u64\", \"u8\", \"()\", \"usize\", \"c_void\"\n]\n\nlicense = read_file(root_folder + \"/LICENSE\")\n\nrust_api_patches = {\n    tuple(['str']): read_file(root_folder + \"/api/_patches/azul.rs/string.rs\"),\n    tuple(['vec']): read_file(root_folder + \"/api/_patches/azul.rs/vec.rs\"),\n    tuple(['option']): read_file(root_folder + \"/api/_patches/azul.rs/option.rs\"),\n    tuple(['dom']): read_file(root_folder + \"/api/_patches/azul.rs/dom.rs\"),\n    tuple(['gl']): read_file(root_folder + \"/api/_patches/azul.rs/gl.rs\"),\n    tuple(['css']): read_file(root_folder + \"/api/_patches/azul.rs/css.rs\"),\n    tuple(['window']): read_file(root_folder + \"/api/_patches/azul.rs/window.rs\"),\n    tuple(['callbacks']): read_file(root_folder + \"/api/_patches/azul.rs/callbacks.rs\"),\n}\n\n# ---------------------------------------------------------------------------------------------\n\ndef snake_case_to_lower_camel(snake_str):\n    first, *others = snake_str.split('_')\n    return ''.join([first.lower(), *map(str.title, others)])\n\ndef strip_fn_arg_types_mem_transmute(arg_list):\n    if len(arg_list) == 0:\n        return \"\"\n\n    arg_list1 = \"\"\n\n    for item in arg_list.split(\",\"):\n        part_a = item.split(\":\")[0].strip()\n        arg_list1 += \"transmute(\" + part_a + \"), \"\n\n    if arg_list1 != \"\":\n        arg_list1 = arg_list1[:-2]\n\n    return arg_list1.strip()\n\n# turns a list of function args into function pointer args\n# ex. \"mut dom: AzDom, event: AzEventFilter, data: AzRefAny, callback: AzCallback\"\n# ->  \"_: AzDom, _: AzEventFilter, _: AzRefAny, _: AzCallback\"\ndef strip_fn_arg_types(arg_list):\n    if len(arg_list) == 0:\n        return \"\"\n\n    arg_list1 = \"\"\n\n    for item in arg_list.split(\",\"):\n        part_b = item.split(\":\")[1]\n        arg_list1 += \"_: \" + part_b + \", \"\n\n    if arg_list1 != \"\":\n        arg_list1 = arg_list1[:-2]\n\n    return arg_list1.strip()\n\ndef write_file(string, path):\n    text_file = open(path, \"w+\", newline='')\n    text_file.write(string)\n    text_file.close()\n\ndef is_primitive_arg(arg):\n    return get_stripped_arg(arg) in basic_types\n\ndef get_stripped_arg(arg):\n    arg = arg.replace(\"&\", \"\")\n    arg = arg.replace(\"&mut\", \"\")\n    arg = arg.replace(\"*const\", \"\")\n    arg = arg.replace(\"*const\", \"\")\n    arg = arg.replace(\"*mut\", \"\")\n    arg = arg.strip()\n    return arg\n\ndef search_imports_arg_type(c, search_type, arg_types_to_search):\n    if search_type in c.keys():\n        for fn_name in c[search_type]:\n            const = c[search_type][fn_name]\n            if \"fn_args\" in const.keys():\n                for arg_object in const[\"fn_args\"]:\n                    arg_name = list(arg_object.keys())[0]\n                    if arg_name == \"self\":\n                        continue\n                    arg_type = arg_object[arg_name]\n                    arg_types_to_search.append(arg_type)\n\ndef get_all_imports(apiData, module, module_name):\n\n    imports = {}\n\n    arg_types_to_search = []\n\n    for class_name in module.keys():\n        c = module[class_name]\n        search_imports_arg_type(c, \"constructors\", arg_types_to_search)\n        search_imports_arg_type(c, \"functions\", arg_types_to_search)\n\n    for arg in arg_types_to_search:\n\n        arg = arg.replace(\"*const\", \"\")\n        arg = arg.replace(\"*mut\", \"\")\n        arg = arg.strip()\n\n        if arg in basic_types:\n            continue\n\n        found_module = search_for_class_by_class_name(apiData, arg)\n\n        if found_module is None:\n            raise Exception(arg + \" not found!\")\n\n        if found_module[0] in imports:\n            imports[found_module[0]].add(found_module[1])\n        else:\n            imports[found_module[0]] = {found_module[1]}\n\n    if module_name in imports:\n        del imports[module_name]\n\n    imports_str = \"\"\n\n    for module_name in imports.keys():\n        classes = list(imports[module_name])\n        use_str = \"\"\n        if len(classes) == 1:\n            use_str = classes[0]\n        else:\n            use_str = \"{\"\n            classes.sort()\n            for c in classes:\n                use_str += c + \", \"\n            use_str = use_str[:-2]\n            use_str += \"}\"\n\n        imports_str += \"    use crate::\" + module_name + \"::\" + use_str + \";\\r\\n\"\n\n    return imports_str\n\ndef fn_args_c_api(f, class_name, class_ptr_name, self_as_first_arg, apiData):\n    fn_args = \"\"\n\n    if self_as_first_arg:\n        self_val = list(f[\"fn_args\"][0].values())[0]\n        if (self_val == \"value\"):\n            fn_args += class_name.lower() + \": \" + class_ptr_name + \", \"\n        elif (self_val == \"mut value\"):\n            fn_args += \"mut \" + class_name.lower() + \": \" + class_ptr_name + \", \"\n        elif (self_val == \"refmut\"):\n            fn_args += class_name.lower() + \": &mut \" + class_ptr_name + \", \"\n        elif (self_val == \"ref\"):\n            fn_args += class_name.lower() + \": &\" + class_ptr_name + \", \"\n        else:\n            raise Exception(\"wrong self value \" + self_val + \" \" + class_name)\n\n    if \"fn_args\" in f.keys():\n        for arg_object in f[\"fn_args\"]:\n            arg_name = list(arg_object.keys())[0]\n            if arg_name == \"self\":\n                continue\n            arg_type = arg_object[arg_name]\n\n            analyzed_arg_type = analyze_type(arg_type)\n            ptr_type = analyzed_arg_type[0]\n            arg_type = analyzed_arg_type[1]\n\n            if is_primitive_arg(arg_type):\n                fn_args += arg_name + \": \" + ptr_type + arg_type + \", \" # no pre, no postfix\n            else:\n                arg_type_new = search_for_class_by_class_name(apiData, arg_type)\n                if arg_type_new is None:\n                    print(\"arg_type not found: \" + str(arg_type))\n                    raise Exception(\"type not found: \" + arg_type)\n                arg_type = arg_type_new[1]\n                fn_args += arg_name + \": \" + ptr_type + prefix + arg_type + \", \" # no postfix\n        fn_args = fn_args[:-2]\n\n    return fn_args\n\ndef c_fn_args_c_api(f, class_name, class_ptr_name, self_as_first_arg):\n    fn_args = \"\"\n\n    if self_as_first_arg:\n        self_val = list(f[\"fn_args\"][0].values())[0]\n        if (self_val == \"value\"):\n            fn_args += \"const \" + class_ptr_name + \" \" + class_name.lower() + \", \"\n        elif (self_val == \"mut value\"):\n            fn_args += \"restrict \" + class_ptr_name + \": \" + class_name.lower() + \", \"\n        elif (self_val == \"refmut\"):\n            fn_args += class_ptr_name + \"* restrict \" + class_name.lower() + \", \"\n        elif (self_val == \"ref\"):\n            fn_args += \"const \" + class_ptr_name + \"* \" + class_name.lower() + \", \"\n        else:\n            raise Exception(\"wrong self value \" + self_val)\n\n    if \"fn_args\" in f.keys():\n        for arg_object in f[\"fn_args\"]:\n            arg_name = list(arg_object.keys())[0]\n            if arg_name == \"self\":\n                continue\n            arg_type = arg_object[arg_name]\n\n            analyzed_arg_type = analyze_type(arg_type)\n            ptr_type = analyzed_arg_type[0]\n            arg_type = analyzed_arg_type[1]\n\n            if is_primitive_arg(arg_type):\n                if ptr_type == \"*const\":\n                    fn_args += \"const\" + replace_primitive_ctype(arg_type) + \"* \" + arg_name + \", \" # no pre, no postfix\n                elif ptr_type == \"*mut\":\n                    fn_args += replace_primitive_ctype(arg_type) + \"* restrict\" + \" \" + arg_name + \", \" # no pre, no postfix\n                else:\n                    fn_args += replace_primitive_ctype(arg_type) + \" \" + arg_name + \", \" # no pre, no postfix\n            else:\n                fn_args += prefix + replace_primitive_ctype(arg_type) + replace_primitive_ctype(ptr_type).strip() + \" \" + arg_name + \", \" # no postfix\n\n        fn_args = fn_args[:-2]\n\n    return fn_args\n\ndef analyze_type(arg):\n    starts = \"\"\n    arg_type = \"\"\n    ends = \"\"\n\n    if type(arg) is dict:\n        print(\"expected string, got dict: \" + str(arg))\n\n    if arg.startswith(\"&mut\"):\n        starts = \"&mut \"\n        arg_type = arg.replace(\"&mut\", \"\")\n    elif arg.startswith(\"&\"):\n        starts = \"&\"\n        arg_type = arg.replace(\"&\", \"\")\n    elif arg.startswith(\"*const\"):\n        starts = \"*const \"\n        arg_type = arg.replace(\"*const\", \"\")\n    elif arg.startswith(\"*mut\"):\n        starts = \"*mut \"\n        arg_type = arg.replace(\"*mut\", \"\")\n    else:\n        arg_type = arg\n\n    arg_type = arg_type.strip()\n\n    if arg_type.startswith(\"[\") and arg_type.endswith(\"]\"):\n        starts += \"[\"\n        arg_type_array = arg_type[1:].split(\";\")\n        arg_type = arg_type_array[0]\n        ends += \";\" + arg_type_array[1]\n\n    return [starts, arg_type, ends]\n\ndef class_is_small_enum(c):\n    return \"enum_fields\" in c.keys()\n\ndef class_is_small_struct(c):\n    return \"struct_fields\" in c.keys()\n\ndef class_is_typedef(c):\n    return \"callback_typedef\" in c.keys()\n\ndef class_is_stack_allocated(c):\n    class_is_boxed_object = not(\"external\" in c.keys() and (\"struct_fields\" in c.keys() or \"enum_fields\" in c.keys() or \"callback_typedef\" in c.keys() or \"const\" in c.keys()))\n    return not(class_is_boxed_object)\n\n# Same as calling get_class(search_class_by_name())\ndef quick_get_class(api_data, searched_class_name):\n    field_type_class_path = search_for_class_by_class_name(api_data, searched_class_name)\n    if field_type_class_path is None:\n        print(\"quick_get_class: could not find: \" + searched_class_name)\n        raise \"quick_get_class: could not find: \" + searched_class_name\n    found_c = get_class(api_data, field_type_class_path[0], field_type_class_path[1])\n    if found_c is None:\n        print(\"quick_get_class: could not find: \" + searched_class_name)\n        raise \"quick_get_class: could not find: \" + searched_class_name\n    return found_c\n\n# Find the [module, classname] given a class_name, returns None if not found\n# Then you can use get_class() to get the class object\ndef search_for_class_by_class_name(api_data, searched_class_name):\n    for module_name in api_data.keys():\n        module = api_data[module_name]\n        for class_name in module[\"classes\"].keys():\n            c = module[\"classes\"][class_name]\n            class_name = class_name\n            if class_name == searched_class_name or class_name == searched_class_name:\n                return [module_name, class_name]\n\n    return None\n\ndef get_class(api_data, module_name, class_name):\n    return api_data[module_name][\"classes\"][class_name]\n\n# Returns whether a type is external, searches by class_name instead of class_name\ndef is_stack_allocated_type(api_data, class_name):\n    search_result = search_for_class_by_class_name(api_data, class_name)\n    if search_result is None:\n        raise Exception(\"type not found \" + class_name)\n    c = get_class(api_data, search_result[0], search_result[1])\n    return class_is_stack_allocated(c)\n\n# Returns if the class is \"pure virtual\", i.e. if it is an\n# object consisting of patches instead of being defined in the API\ndef class_is_virtual(api_data, className, api):\n    for module_name in api_data.keys():\n        module = api_data[module_name][\"classes\"]\n        for class_name in module.keys():\n            if class_name != className:\n                continue\n            c = module[class_name]\n            if \"use_patches\" in c.keys() and api in c[\"use_patches\"]:\n                return True\n\n    return False\n\n# Generate the string for TAKING rust-api function arguments\ndef rust_bindings_fn_args(f, class_name, class_ptr_name, self_as_first_arg, api_data):\n    fn_args = \"\"\n    generics = \"\"\n\n    if self_as_first_arg:\n        self_val = list(f[\"fn_args\"][0].values())[0]\n        if (self_val == \"value\") or (self_val == \"mut value\"):\n            fn_args += \"self, \"\n        elif (self_val == \"refmut\"):\n            fn_args += \"&mut self, \"\n        elif (self_val == \"ref\"):\n            fn_args += \"&self, \"\n        else:\n            raise Exception(\"wrong self value \" + self_val)\n\n    generic_counter = 0\n    if \"fn_args\" in f.keys():\n        for arg_object in f[\"fn_args\"]:\n            arg_name = list(arg_object.keys())[0]\n            if arg_name == \"self\":\n                continue\n            arg_type = arg_object[arg_name]\n            arg_type = arg_type.strip()\n\n            generic_counter += 1\n            type_analyzed = analyze_type(arg_type)\n            start = type_analyzed[0]\n            arg_type = type_analyzed[1]\n\n            if is_primitive_arg(arg_type):\n                fn_args += arg_name + \": \" + start + arg_type + \", \" # usize\n            else:\n                arg_type_class_name = search_for_class_by_class_name(api_data, arg_type)\n                if arg_type_class_name is None:\n                    raise Exception(\"arg type \" + arg_type + \" not found!\")\n                arg_type_class = get_class(api_data, arg_type_class_name[0], arg_type_class_name[1])\n                if class_is_typedef(arg_type_class):\n                    fn_args += arg_name + \": \" + start + arg_type_class_name[1] + \", \"\n                elif start == \"*const \" or start == \"*mut \":\n                    fn_args += arg_name + \": _\" + str(generic_counter) + \", \"\n                    generics += \"_\" + str(generic_counter) + \": Into<\" +  start + prefix + arg_type_class_name[1] + \">, \"\n                else:\n                    fn_args += arg_name + \": _\" + str(generic_counter) + \", \"\n                    generics += \"_\" + str(generic_counter) + \": Into<\" +  start + arg_type_class_name[1] + \">, \"\n\n        fn_args = fn_args[:-2]\n\n    if generics == \"\":\n        return [\"\", fn_args]\n    else:\n        return [\"<\" + generics[:-2] + \">\", fn_args]\n\n# Generate the string for CALLING rust-api function args\ndef rust_bindings_call_fn_args(f, class_name, class_ptr_name, self_as_first_arg, api_data, class_is_boxed_object, self_ext=\"\"):\n    fn_args = \"\"\n    if self_as_first_arg:\n        self_val = list(f[\"fn_args\"][0].values())[0]\n\n    if \"fn_args\" in f.keys():\n        for arg_object in f[\"fn_args\"]:\n            arg_name = list(arg_object.keys())[0]\n            arg_type = arg_object[arg_name].strip()\n\n            if arg_name == \"self\":\n                if len(self_ext) > 0:\n                    if arg_type == \"ref\":\n                        fn_args += \"&self\" + self_ext + \", \"\n                    elif arg_type == \"refmut\":\n                        fn_args += \"&mut self\" + self_ext + \", \"\n                    else:\n                        fn_args += \"self\" + self_ext + \", \"\n                else:\n                    fn_args += \"self\" + self_ext + \", \"\n                continue\n\n            starts = \"\"\n            type_analyzed = analyze_type(arg_type)\n            start = type_analyzed[0]\n            arg_type = type_analyzed[1]\n\n            if is_primitive_arg(arg_type):\n                fn_args += arg_name + \", \"\n            else:\n                arg_type = arg_type.strip()\n                arg_type_class = search_for_class_by_class_name(api_data, arg_type)\n                if arg_type_class is None:\n                    raise Exception(\"arg type \" + arg_type + \" not found!\")\n                arg_type_class = get_class(api_data, arg_type_class[0], arg_type_class[1])\n\n                if start == \"*const \" or start == \"*mut \":\n                    if len(self_ext) > 0:\n                        fn_args += \"unsafe { core::mem::transmute(\" + arg_name + \".into()) }, \"\n                    else:\n                        fn_args += arg_name + self_ext + \".into(), \"\n                else:\n                    if class_is_typedef(arg_type_class):\n                        fn_args += start + arg_name + self_ext + \", \"\n                    elif class_is_stack_allocated(arg_type_class):\n                        fn_args += start + arg_name + self_ext + \".into(), \" # .object\n                    else:\n                        fn_args += start + arg_name + self_ext + \".into(), \"\n\n        fn_args = fn_args[:-2]\n\n    return fn_args\n\n\n# ---------------------------------------------------------------------------------------------\n\n\n# Generates the azul-dll/lib.rs file\n#\n# Returns an array:\n#\n#   [\n#      dll.rs code,\n#      all structs (in order of dependency),\n#      all functions (in order of appearance),\n#      C forward_declarations,\n#   ]\n#\ndef generate_rust_dll(api_data):\n\n    version = list(api_data.keys())[-1]\n    code = \"\"\n    code += \"//! WARNING: autogenerated code for azul api version \" + str(version) + \"\\r\\n\"\n    code += \"\\r\\n\"\n    code += \"#![deny(improper_ctypes_definitions)]\\r\\n\"\n    code += \"\\r\\n\"\n\n    code += read_file(root_folder + \"/api/_patches/azul-dll/header.rs\")\n\n    code += \"\\r\\n\"\n    code += \"pub mod widgets;\\r\\n\"\n    code += \"#[cfg(all(feature = \\\"python-extension\\\", feature = \\\"link_dynamic\\\", not(feature = \\\"link-static\\\")))]\\r\\n\"\n    code += \"pub mod python;\\r\\n\"\n    code += \"\\r\\n\"\n\n    myapi_data = api_data[version]\n\n    structs_map = OrderedDict({})\n    rust_functions_map = OrderedDict({})\n\n    for module_name in myapi_data.keys():\n        module = myapi_data[module_name][\"classes\"]\n\n        for class_name in module.keys():\n            c = module[class_name]\n\n            code += \"\\r\\n\"\n\n            class_is_boxed_object = not(class_is_stack_allocated(c))\n            class_is_const = \"const\" in c.keys()\n            class_can_be_cloned = True\n            if \"clone\" in c.keys():\n                class_can_be_cloned = c[\"clone\"]\n\n            struct_derive = []\n            if \"derive\" in c.keys():\n                struct_derive = c[\"derive\"]\n\n            class_can_derive_debug = \"derive\" in c.keys() and \"Debug\" in c[\"derive\"]\n            class_can_be_copied = \"derive\" in c.keys() and \"Copy\" in c[\"derive\"]\n            class_has_partialeq = \"derive\" in c.keys() and \"PartialEq\" in c[\"derive\"]\n            class_has_eq = \"derive\" in c.keys()and \"Eq\" in c[\"derive\"]\n            class_has_partialord = \"derive\" in c.keys()and \"PartialOrd\" in c[\"derive\"]\n            class_has_ord = \"derive\" in c.keys() and \"Ord\" in c[\"derive\"]\n            class_can_be_hashed = \"derive\" in c.keys() and \"Hash\" in c[\"derive\"]\n\n            class_has_custom_destructor = (\"custom_destructor\" in c.keys() and c[\"custom_destructor\"])\n            class_is_callback_typedef = \"callback_typedef\" in c.keys() and (len(c[\"callback_typedef\"].keys()) > 0)\n            is_boxed_object = \"is_boxed_object\" in c.keys() and c[\"is_boxed_object\"]\n            treat_external_as_ptr = \"external\" in c.keys() and is_boxed_object\n\n            # Small structs and enums are stack-allocated in order to save on indirection\n            # They don't have destructors, since they\n            c_is_stack_allocated = not(class_is_boxed_object)\n\n            class_ptr_name = prefix + class_name\n\n            if class_is_callback_typedef:\n                code += \"pub type \" + class_ptr_name + \" = \" + generate_rust_callback_fn_type(myapi_data, c[\"callback_typedef\"]) + \";\"\n                structs_map[class_ptr_name] = { \"callback_typedef\": c[\"callback_typedef\"] }\n                continue\n\n            class_has_recursive_destructor = has_recursive_destructor(myapi_data, c)\n\n            struct_doc = \"\"\n            if \"doc\" in c.keys():\n                struct_doc = c[\"doc\"]\n            else:\n                if c_is_stack_allocated:\n                    struct_doc = \"Re-export of rust-allocated (stack based) `\" + class_name + \"` struct\"\n                else:\n                    struct_doc = \"Pointer to rust-allocated `Box<\" + class_name + \">` struct\"\n\n            code += \"/// \" + struct_doc  + \"\\r\\n\"\n\n            struct_serde = \"\"\n            if \"serde\" in c.keys():\n                struct_serde = c[\"serde\"]\n\n            if \"external\" in c.keys():\n                external_path = c[\"external\"]\n                if class_is_const:\n                    code += \"pub static \" + class_ptr_name + \": \" + prefix + c[\"const\"] + \" = \" + external_path + \";\\r\\n\"\n                elif class_is_boxed_object:\n                    structs_map[class_ptr_name] = {\n                        \"external\": external_path,\n                        \"clone\": class_can_be_cloned,\n                        \"is_boxed_object\": is_boxed_object,\n                        \"custom_destructor\": class_has_custom_destructor,\n                        \"recursive_destructor\": class_has_recursive_destructor,\n                        \"derive\": struct_derive,\n                        \"doc\": struct_doc,\n                        \"struct\": [{\"ptr\": {\"type\": \"*mut c_void\" }}]\n                    }\n                    if len(struct_serde) > 0:\n                        structs_map[class_ptr_name][\"serde\"] = struct_serde\n\n                    if treat_external_as_ptr:\n                        code += \"pub use \" + external_path + \" as \" + class_ptr_name + \"TT;\\r\\n\"\n                        code += \"pub use \" + class_ptr_name + \"TT as \" + class_ptr_name + \";\\r\\n\"\n                    else:\n                        code += \"#[repr(C)] pub struct \" + class_ptr_name + \" { pub ptr: *mut c_void }\\r\\n\"\n                else:\n                    if \"struct_fields\" in c.keys():\n                        structs_map[class_ptr_name] = {\n                            \"external\": external_path,\n                            \"clone\": class_can_be_cloned,\n                            \"is_boxed_object\": is_boxed_object,\n                            \"custom_destructor\": class_has_custom_destructor,\n                            \"recursive_destructor\": class_has_recursive_destructor,\n                            \"derive\": struct_derive,\n                            \"doc\": struct_doc, \"struct\":\n                            c[\"struct_fields\"]\n                        }\n                        if len(struct_serde) > 0:\n                            structs_map[class_ptr_name][\"serde\"] = struct_serde\n                    elif \"enum_fields\" in c.keys():\n                        structs_map[class_ptr_name] = {\n                            \"external\": external_path,\n                            \"clone\": class_can_be_cloned,\n                            \"is_boxed_object\": is_boxed_object,\n                            \"custom_destructor\": class_has_custom_destructor,\n                            \"recursive_destructor\": class_has_recursive_destructor,\n                            \"derive\": struct_derive,\n                            \"doc\": struct_doc,\n                            \"enum\": c[\"enum_fields\"]\n                        }\n                        if len(struct_serde) > 0:\n                            structs_map[class_ptr_name][\"serde\"] = struct_serde\n\n                    code += \"pub use \" + external_path + \" as \" + class_ptr_name + \"TT;\\r\\n\"\n                    code += \"pub use \" + class_ptr_name + \"TT as \" + class_ptr_name + \";\\r\\n\"\n            else:\n                raise Exception(\"structs without 'external' key are not allowed! \" + class_name)\n            if \"constructors\" in c.keys():\n                for fn_name in c[\"constructors\"]:\n\n                    const = c[\"constructors\"][fn_name]\n\n                    fn_body = \"\"\n\n                    if c_is_stack_allocated:\n                        fn_body += const[\"fn_body\"]\n                    else:\n                        fn_body += \"let object: \" + class_name + \" = \" + const[\"fn_body\"] + \"; \" # note: security check, that the returned object is of the correct type\n                        fn_body += \"let ptr = Box::into_raw(Box::new(object)) as *mut c_void; \"\n                        fn_body += class_ptr_name + \" { ptr }\"\n\n                    if \"doc\" in const.keys():\n                        code += \"/// \" + const[\"doc\"] + \"\\r\\n\"\n                    else:\n                        code += \"/// Creates a new `\" + class_name + \"` instance whose memory is owned by the rust allocator\\r\\n\"\n                        code += \"/// Equivalent to the Rust `\" + class_name  + \"::\" + fn_name + \"()` constructor.\\r\\n\"\n\n                    returns = class_ptr_name\n                    if \"returns\" in const.keys():\n                        return_type = const[\"returns\"][\"type\"]\n                        analyzed_return_type = analyze_type(return_type)\n                        if is_primitive_arg(analyzed_return_type[1]):\n                            returns = return_type\n                        else:\n                            return_type_class = search_for_class_by_class_name(myapi_data, analyzed_return_type[1])\n                            if return_type_class is None:\n                                print(\"rust-dll: (line 549): no return_type_class found for \" + return_type)\n\n                            returns = analyzed_return_type[0] + prefix + return_type_class[1] + analyzed_return_type[2] # no postfix\n\n\n                    fn_args = fn_args_c_api(const, class_name, class_ptr_name, False, myapi_data)\n\n                    rust_functions_map[str(class_ptr_name + \"_\" + snake_case_to_lower_camel(fn_name))] = [fn_args, returns];\n                    code += \"#[no_mangle] pub extern \\\"C\\\" fn \" + class_ptr_name + \"_\" + snake_case_to_lower_camel(fn_name) + \"(\" + fn_args + \") -> \" + returns + \" { \"\n                    code += fn_body\n                    code += \" }\\r\\n\"\n\n            if \"functions\" in c.keys():\n                for fn_name in c[\"functions\"]:\n\n                    f = c[\"functions\"][fn_name]\n\n                    fn_body = f[\"fn_body\"]\n\n                    if \"doc\" in f.keys():\n                        code += \"/// \" + f[\"doc\"] + \"\\r\\n\"\n                    else:\n                        code += \"/// Equivalent to the Rust `\" + class_name  + \"::\" + fn_name + \"()` function.\\r\\n\"\n\n                    fn_args = fn_args_c_api(f, class_name, class_ptr_name, True, myapi_data)\n\n                    returns = \"\"\n                    if \"returns\" in f.keys():\n                        return_type = f[\"returns\"][\"type\"]\n                        analyzed_return_type = analyze_type(return_type)\n                        if is_primitive_arg(analyzed_return_type[1]):\n                            returns = return_type\n                        else:\n                            return_type_class = search_for_class_by_class_name(myapi_data, analyzed_return_type[1])\n                            if return_type_class is None:\n                                print(\"rust-dll: (line 549): no return_type_class found for \" + return_type)\n\n                            returns = analyzed_return_type[0] + prefix + return_type_class[1] + analyzed_return_type[2] # no postfix\n\n                    rust_functions_map[str(class_ptr_name + \"_\" + snake_case_to_lower_camel(fn_name))] = [fn_args, returns];\n                    return_arrow = \"\" if returns == \"\" else \" -> \"\n                    code += \"#[no_mangle] pub extern \\\"C\\\" fn \" + class_ptr_name + \"_\" + snake_case_to_lower_camel(fn_name) + \"(\" + fn_args + \")\" + return_arrow + returns + \" { \"\n                    code += fn_body\n                    code += \" }\\r\\n\"\n\n            if c_is_stack_allocated:\n                if class_can_be_copied:\n                    # intentionally empty, no destructor necessary\n                    pass\n                elif class_has_custom_destructor or treat_external_as_ptr or class_has_recursive_destructor:\n                    # az_item_delete()\n                    code += \"/// Destructor: Takes ownership of the `\" + class_name + \"` pointer and deletes it.\\r\\n\"\n                    if class_has_custom_destructor or treat_external_as_ptr:\n                        rust_functions_map[str(class_ptr_name + \"_delete\")] = [\"object: &mut \" + class_ptr_name, \"\"];\n                    code += \"#[no_mangle] pub extern \\\"C\\\" fn \" + class_ptr_name + \"_delete(object: &mut \" + class_ptr_name + \") { \"\n                    if is_boxed_object:\n                        code += \" if object.run_destructor { unsafe { core::ptr::drop_in_place(object); } }\"\n                    else:\n                        code += \" unsafe { core::ptr::drop_in_place(object); } \"\n                    code += \"}\\r\\n\"\n\n                if treat_external_as_ptr and class_can_be_cloned:\n                    # az_item_deepCopy()\n                    code += \"/// Clones the object\\r\\n\"\n                    rust_functions_map[str(class_ptr_name + \"_deepCopy\")] = [\"object: &\" + class_ptr_name, class_ptr_name];\n                    code += \"#[no_mangle] pub extern \\\"C\\\" fn \" + class_ptr_name + \"_deepCopy(object: &\" + class_ptr_name + \") -> \" + class_ptr_name + \" { \"\n                    code += \"object.clone()\"\n                    code += \" }\\r\\n\"\n            else:\n                raise Exception(\"type \" + class_name + \"is not stack allocated!\")\n\n    sort_structs_result = sort_structs_map(myapi_data, structs_map)\n    structs_map = sort_structs_result[0]\n    forward_delcarations = sort_structs_result[1]\n\n    code += \"\\r\\n\\r\\n\"\n    code += generate_size_test(myapi_data, structs_map)\n\n    return [code, structs_map, rust_functions_map, forward_delcarations]\n\n# Searches recursively for all fields on a class whether\n# any of the fields have a destructor\n#\n# This is because in C you generally want to call MyObject_delete() in order to have it\n#\n# @returns bool\ndef has_recursive_destructor(myapi_data, c):\n\n    class_is_callback_typedef = \"callback_typedef\" in c.keys() and (len(c[\"callback_typedef\"].keys()) > 0)\n\n    if class_is_callback_typedef:\n        return False\n\n    class_has_custom_destructor = (\"custom_destructor\" in c.keys() and c[\"custom_destructor\"])\n    is_boxed_object = \"is_boxed_object\" in c.keys() and c[\"is_boxed_object\"]\n    treat_external_as_ptr = \"external\" in c.keys() and is_boxed_object\n\n    if class_has_custom_destructor or treat_external_as_ptr:\n        return True\n\n    # loop through fields and recurse\n    if \"struct_fields\" in c.keys():\n        for field in c[\"struct_fields\"]:\n            field_name = list(field.keys())[0]\n            if not \"type\" in field[field_name]:\n                print(\"error: struct \" + str(c) + \" field \" + field_name + \" has no \\\"type\\\"!\")\n            field_type = field[field_name][\"type\"]\n            field_type_analyzed = analyze_type(field_type)\n            if is_primitive_arg(field_type_analyzed[1]):\n                continue\n            if has_recursive_destructor(myapi_data, quick_get_class(myapi_data, field_type_analyzed[1])):\n                return True\n    elif \"enum_fields\" in c.keys():\n        for enum_name in c[\"enum_fields\"]:\n            variant_name = list(enum_name.keys())[0]\n            variant = enum_name[variant_name]\n            if \"type\" in variant.keys():\n                field_type_analyzed = analyze_type(variant[\"type\"])\n                if is_primitive_arg(field_type_analyzed[1]):\n                    continue\n                if has_recursive_destructor(myapi_data, quick_get_class(myapi_data, field_type_analyzed[1])):\n                    return True\n    return False\n\n\n# In order to statically link without code changes,\n# all crate-internal types have to be listed as:\n#\n# use azul_impl::blah::Foo as AzFoo;\n# use azul_impl::baz::Baz as AzBaz;\n#\n# This function generates a list of all these imports\ndef generate_list_of_struct_imports(structs_map):\n    import_str = \"\"\n    for struct_name in structs_map.keys():\n        struct = structs_map[struct_name]\n        if \"external\" in struct.keys():\n            external_ref = struct[\"external\"]\n            import_str += \"use \" + external_ref + \" as \" + struct_name + \";\\r\\n\"\n    return import_str\n\n# Returns a sorted structs map where the structs are sorted\n# so that all structs that a class depends on as fields appear\n# before the class itself\n#\n# This is important because then we don't need forward declarations\n# when generating C and C++ code (plus it also makes the size-tests\n# easier to debug)\ndef sort_structs_map(api_data, structs_map):\n\n    # From Python 3.6 onwards, the standard dict type maintains insertion order by default.\n    sorted_class_map = OrderedDict([])\n\n    # when encountering the class \"DomVec\", you must forward-declare the class \"Dom\",\n    # because the type is recursive\n    extra_forward_delcarations = {\n        \"AzDomVec\": {\"type\": \"struct\", \"name\": \"AzDom\"},\n        \"AzMenuItemVec\": {\"type\": \"struct\", \"name\": \"AzMenuItem\"},\n        \"AzXmlNodeVec\": {\"type\": \"struct\", \"name\": \"AzXmlNode\"},\n    }\n    forward_delcarations = OrderedDict([\n        (\"AzDomVec\", \"Dom\"),\n        (\"AzXmlNodeVec\", \"XmlNode\"),\n        (\"AzMenuItemVec\", \"MenuItem\")\n    ])\n\n    classes_not_found = OrderedDict([])\n\n    # first, insert all types that only have primitive types as fields\n    for class_name in structs_map.keys():\n        clazz = structs_map[class_name]\n        should_insert_struct = True\n\n        found_c_is_callback_typedef = \"callback_typedef\" in clazz.keys() and (len(clazz[\"callback_typedef\"].keys()) > 0)\n        found_c_is_boxed_object = \"is_boxed_object\" in clazz.keys() and clazz[\"is_boxed_object\"]\n        class_in_forward_decl = class_name in forward_delcarations.keys()\n\n        if found_c_is_callback_typedef:\n            pass\n        elif \"struct\" in clazz.keys():\n            struct = clazz[\"struct\"]\n            for field in struct:\n                field_name = list(field.keys())[0]\n                field_type = list(field.values())[0]\n                if not \"type\" in field_type:\n                    raise Exception(\"missing type field in \" + class_name + \" \" + field_name)\n                field_type = analyze_type(field_type[\"type\"])[1]\n                if not(is_primitive_arg(field_type)):\n                    found_c = search_for_class_by_class_name(api_data, field_type)\n                    if found_c is None:\n                        print(\"struct \" + field_type + \" not found\")\n                    field_is_fn_ptr = class_is_typedef(get_class(api_data, found_c[0], found_c[1]))\n                    if not(class_in_forward_decl and field_type == forward_delcarations[class_name]) and not(field_is_fn_ptr):\n                        should_insert_struct = False\n        elif \"enum\" in clazz.keys():\n            enum = clazz[\"enum\"]\n            for variant in enum:\n                variant_name = list(variant.keys())[0]\n                variant_type = list(variant.values())[0]\n                if \"type\" in variant_type.keys():\n                    variant_type = analyze_type(variant_type[\"type\"])[1]\n                    if not(is_primitive_arg(variant_type)):\n                        found_c = search_for_class_by_class_name(api_data, variant_type)\n                        if found_c is None:\n                            print(\"sort structs map: \" + class_name + \" variant \" + variant_type + \" not found\")\n                        field_is_fn_ptr = class_is_typedef(get_class(api_data, found_c[0], found_c[1]))\n                        if not(class_in_forward_decl and variant_type == forward_delcarations[class_name]) and not(field_is_fn_ptr):\n                            should_insert_struct = False\n        else:\n            raise Exception(\"sort_structs_map: not enum nor struct nor typedef\" + class_name + \"\")\n\n        if should_insert_struct:\n            sorted_class_map[class_name] = clazz\n        else:\n            classes_not_found[class_name] = clazz\n\n    # Now loop through every class that was not a primitive type\n    # usually this should resolve in 9 - 10 iterations\n    iteration_count = 0;\n    while not(len(classes_not_found.keys()) == 0):\n        # classes not found in this iteration\n        current_classes_not_found = OrderedDict([])\n\n        for class_name in classes_not_found.keys():\n            clazz = classes_not_found[class_name]\n            should_insert_struct = True\n            found_c_is_callback_typedef = \"callback_typedef\" in clazz.keys() and (len(clazz[\"callback_typedef\"].keys()) > 0)\n            class_in_forward_decl = class_name in forward_delcarations.keys()\n            if found_c_is_callback_typedef:\n                pass\n            elif \"struct\" in clazz.keys():\n                struct = clazz[\"struct\"]\n                for field in struct:\n                    field_name = list(field.keys())[0]\n                    field_type = list(field.values())[0]\n                    field_type = analyze_type(field_type[\"type\"])[1]\n                    if not(is_primitive_arg(field_type)):\n                        found_c = search_for_class_by_class_name(api_data, field_type)\n                        field_is_fn_ptr = class_is_typedef(get_class(api_data, found_c[0], found_c[1]))\n                        if not(class_in_forward_decl and field_type == forward_delcarations[class_name]) and not(field_is_fn_ptr):\n                            field_type = prefix + field_type\n                            if not(field_type in sorted_class_map.keys()):\n                                should_insert_struct = False\n            elif \"enum\" in clazz.keys():\n                enum = clazz[\"enum\"]\n                for variant in enum:\n                    variant_name = list(variant.keys())[0]\n                    variant_type = list(variant.values())[0]\n                    if \"type\" in variant_type.keys():\n                        variant_type = analyze_type(variant_type[\"type\"])[1]\n                        if not(is_primitive_arg(variant_type)):\n                            found_c = search_for_class_by_class_name(api_data, variant_type)\n                            field_is_fn_ptr = class_is_typedef(get_class(api_data, found_c[0], found_c[1]))\n                            if not(class_in_forward_decl and variant_type == forward_delcarations[class_name]) and not(field_is_fn_ptr):\n                                variant_type = prefix + variant_type\n                                if not(variant_type in sorted_class_map.keys()):\n                                    should_insert_struct = False\n            else:\n                raise Exception(\"sort_structs_map: not enum nor struct \" + class_name + \"\")\n\n            if should_insert_struct:\n                sorted_class_map[class_name] = clazz\n            else:\n                current_classes_not_found[class_name] = clazz\n\n\n        classes_not_found = current_classes_not_found\n        iteration_count += 1\n\n        # NOTE: if the iteration count is extremely high,\n        # something is wrong with the script\n        if iteration_count > 500:\n            raise Exception(\"infinite recursion detected in sort_structs_map: \" + str(len(current_classes_not_found.keys())) + \" unresolved structs = \" + str(current_classes_not_found.keys()) + \"\\r\\n\")\n\n    return [sorted_class_map, forward_delcarations, extra_forward_delcarations]\n\n# Generate the RUST code for the struct layout of the final API\n# This function has to be called twice in order to ensure that the layout of the struct\n# matches the layout in the binary\ndef generate_structs(api_data, structs_map, autoderive, indent = 4, private_pointers=True,no_derive=False,wrapper_postfix=\"\"):\n\n    indent_str = \" \" * indent\n\n    code = \"\"\n\n    for struct_name in structs_map.keys():\n        struct = structs_map[struct_name]\n\n        if \"doc\" in struct.keys():\n            code += indent_str + \"/// \" + struct[\"doc\"] + \"\\r\\n\"\n        else:\n            code += indent_str + \"/// `\" + struct_name + \"` struct\\r\\n\"\n\n        class_is_callback_typedef = \"callback_typedef\" in struct.keys() and (len(struct[\"callback_typedef\"].keys()) > 0)\n        class_can_be_copied = \"derive\" in struct.keys() and \"Copy\" in struct[\"derive\"]\n        class_can_be_serde_serialized = \"derive\" in struct.keys() and \"Serialize\" in struct[\"derive\"]\n        class_can_be_serde_deserialized = \"derive\" in struct.keys() and \"Deserialize\" in struct[\"derive\"]\n        class_implements_default = \"derive\" in struct.keys() and \"Default\" in struct[\"derive\"]\n        class_implements_eq = \"derive\" in struct.keys() and \"Eq\" in struct[\"derive\"]\n        class_implements_ord = \"derive\" in struct.keys() and \"Ord\" in struct[\"derive\"]\n        class_implements_hash = \"derive\" in struct.keys() and \"Hash\" in struct[\"derive\"]\n        class_has_custom_destructor = \"custom_destructor\" in struct.keys() and struct[\"custom_destructor\"]\n        class_can_be_cloned = True\n        if \"clone\" in struct.keys():\n            class_can_be_cloned = struct[\"clone\"]\n\n        is_boxed_object = \"is_boxed_object\" in struct.keys() and struct[\"is_boxed_object\"]\n        treat_external_as_ptr = \"external\" in struct.keys() and is_boxed_object\n\n\n        opt_derive_default = \"\"\n        if class_implements_default:\n            opt_derive_default = indent_str + \"#[derive(Default)]\\r\\n\"\n\n        opt_derive_serde_extra_options = \"\"\n        if class_can_be_serde_serialized or class_can_be_serde_deserialized:\n            if \"serde\" in struct.keys():\n                opt_derive_serde_extra_options = indent_str + \"#[cfg_attr(feature = \\\"serde-support\\\", serde(\" + struct[\"serde\"] + \"))]\\r\\n\"\n\n        opt_derive_serde = \"\"\n        if class_can_be_serde_serialized and class_can_be_serde_deserialized:\n            opt_derive_serde = indent_str + \"#[cfg_attr(feature = \\\"serde-support\\\", derive(Serialize, Deserialize))]\\r\\n\"\n        elif class_can_be_serde_serialized:\n            opt_derive_serde = indent_str + \"#[cfg_attr(feature = \\\"serde-support\\\", derive(Serialize))]\\r\\n\"\n        elif class_can_be_serde_deserialized:\n            opt_derive_serde = indent_str + \"#[cfg_attr(feature = \\\"serde-support\\\", derive(Deserialize))]\\r\\n\"\n\n        if no_derive:\n            opt_derive_serde = \"\"\n            opt_derive_default = \"\"\n            opt_derive_serde_extra_options = \"\"\n\n        if class_is_callback_typedef:\n            fn_ptr = generate_rust_callback_fn_type(api_data, struct[\"callback_typedef\"])\n            code += indent_str + \"pub type \" + struct_name + \" = \" + fn_ptr + \";\\r\\n\\r\\n\"\n        elif \"struct\" in struct.keys():\n            struct = struct[\"struct\"]\n\n            # for LayoutCallback and RefAny, etc. the #[derive(Debug)] has to be implemented manually\n\n            opt_derive_debug = indent_str + \"#[derive(Debug)]\\r\\n\"\n            opt_derive_clone = indent_str + \"#[derive(Clone)]\\r\\n\"\n            opt_derive_copy = indent_str + \"#[derive(Copy)]\\r\\n\"\n            opt_derive_other = indent_str + \"#[derive(PartialEq, PartialOrd)]\\r\\n\"\n            opt_derive_eq = \"\"\n            opt_derive_ord = \"\"\n            opt_derive_hash = \"\"\n\n            if no_derive:\n                opt_derive_debug = \"\"\n                opt_derive_clone = \"\"\n                opt_derive_copy = \"\"\n                opt_derive_other = \"\"\n\n            if not(class_can_be_copied):\n                opt_derive_copy = \"\"\n\n            if not(class_can_be_cloned) or (treat_external_as_ptr and class_can_be_cloned):\n                opt_derive_clone = \"\"\n\n            if struct_name == \"AzString\":\n                opt_derive_debug = \"\"\n\n            if class_has_custom_destructor or not(autoderive) or struct_name == \"AzU8VecRef\":\n                opt_derive_copy = \"\"\n                opt_derive_debug = \"\"\n                opt_derive_clone = \"\"\n                opt_derive_other = \"\"\n\n            if len(opt_derive_other) > 0:\n                if class_implements_eq:\n                    opt_derive_eq = indent_str + \"#[derive(Eq)]\\r\\n\"\n                if class_implements_ord:\n                    opt_derive_ord = indent_str + \"#[derive(Ord)]\\r\\n\"\n                if class_implements_hash:\n                    opt_derive_hash = indent_str + \"#[derive(Hash)]\\r\\n\"\n\n            for field in struct:\n                if \"type\" in list(field.values())[0]:\n                    analyzed_arg_type = analyze_type(list(field.values())[0][\"type\"])\n                    if not(is_primitive_arg(analyzed_arg_type[1])):\n                        field_type_class_path = search_for_class_by_class_name(api_data, analyzed_arg_type[1])\n                        if field_type_class_path is None:\n                            print(\"no field_type_class_path found for \" + str(analyzed_arg_type))\n                        found_c = get_class(api_data, field_type_class_path[0], field_type_class_path[1])\n                        found_c_is_callback_typedef = \"callback_typedef\" in found_c.keys() and found_c[\"callback_typedef\"]\n                        if found_c_is_callback_typedef:\n                            opt_derive_debug = \"\"\n                            opt_derive_other = \"\"\n\n            repr = \"#[repr(C)]\\r\\n\"\n            if \"repr\" in structs_map[struct_name].keys():\n                repr = \"#[repr(\" + structs_map[struct_name][\"repr\"] + \")]\\r\\n\"\n\n            code += indent_str + repr\n            code += opt_derive_debug + opt_derive_clone\n            code += opt_derive_other + opt_derive_copy\n            code += opt_derive_eq + opt_derive_ord\n            code += opt_derive_hash\n            code += opt_derive_default\n            code += opt_derive_serde\n            code += opt_derive_serde_extra_options\n            code += indent_str + \"pub struct \" + struct_name + \" {\\r\\n\"\n\n            for field in struct:\n                if type(field) is str:\n                    print(\"Struct \" + struct_name + \" should have a dictionary as fields\")\n                field_name = list(field.keys())[0]\n                field_type = list(field.values())[0]\n                if \"type\" in field_type:\n                    field_type = field_type[\"type\"]\n                    field_extra_derive = \"\"\n                    if \"derive\" in field[field_name].keys():\n                        field_extra_derive = field[field_name][\"derive\"] + \"\\r\\n\"\n                    code += field_extra_derive\n                    analyzed_arg_type = analyze_type(field_type)\n                    if is_primitive_arg(analyzed_arg_type[1]):\n                        if field_name == \"ptr\" and private_pointers:\n                            code += indent_str + \"    \" + \"pub(crate) \"\n                        else:\n                            code += indent_str + \"    \" + \"pub \"\n                        code += field_name + \": \" + field_type + \",\\r\\n\"\n                    else:\n                        field_type_class_path = search_for_class_by_class_name(api_data, analyzed_arg_type[1])\n                        if field_type_class_path is None:\n                            print(\"no field_type_class_path found for \" + str(analyzed_arg_type))\n\n                        found_c = get_class(api_data, field_type_class_path[0], field_type_class_path[1])\n                        if field_name == \"ptr\":\n                            code += indent_str + \"    \" + \"pub(crate) \"\n                        else:\n                            code += indent_str + \"    \" + \"pub \"\n                        field_postfix = wrapper_postfix\n                        prevent_wrapper_recursion = len(wrapper_postfix) != 0 and struct_name.endswith(wrapper_postfix)\n                        found_c_is_enum = \"enum_fields\" in found_c.keys()\n                        if (not(found_c_is_enum) or prevent_wrapper_recursion):\n                            field_postfix = \"\"\n                        code += field_name + \": \" + analyzed_arg_type[0] + prefix + field_type_class_path[1] + field_postfix + analyzed_arg_type[2] + \",\\r\\n\"\n                else:\n                    print(\"struct \" + struct_name + \" does not have a type on field \" + field_name)\n                    raise Exception(\"error\")\n            code += indent_str + \"}\\r\\n\\r\\n\"\n        elif \"enum\" in struct.keys():\n            enum = struct[\"enum\"]\n            repr = \"#[repr(C)]\\r\\n\"\n\n            for variant in enum:\n                variant_name = list(variant.keys())[0]\n                variant = list(variant.values())[0]\n                if \"type\" in variant.keys():\n                    repr = \"#[repr(C, u8)]\\r\\n\"\n\n            if \"repr\" in structs_map[struct_name].keys():\n                repr = \"#[repr(\" + structs_map[struct_name][\"repr\"] + \")]\\r\\n\"\n\n            # don't derive(Debug) for enums with function pointers in their variants\n            opt_derive_debug = indent_str + \"#[derive(Debug)]\\r\\n\"\n            opt_derive_clone = indent_str + \"#[derive(Clone)]\\r\\n\"\n            opt_derive_copy = indent_str + \"#[derive(Copy)]\\r\\n\"\n            opt_derive_other = indent_str + \"#[derive(PartialEq, PartialOrd)]\\r\\n\"\n            opt_derive_eq = \"\"\n            opt_derive_ord = \"\"\n            opt_derive_hash = \"\"\n\n            if no_derive:\n                opt_derive_debug = \"\"\n                opt_derive_clone = \"\"\n                opt_derive_copy = \"\"\n                opt_derive_other = \"\"\n\n            if not(class_can_be_copied):\n                opt_derive_copy = \"\"\n\n            if not(class_can_be_cloned) or (treat_external_as_ptr and class_can_be_cloned):\n                opt_derive_clone = \"\"\n\n            if class_has_custom_destructor or not(autoderive):\n                opt_derive_copy = \"\"\n                opt_derive_debug = \"\"\n                opt_derive_clone = \"\"\n                opt_derive_other = \"\"\n\n            if len(opt_derive_other) > 0:\n                if class_implements_eq:\n                    opt_derive_eq = indent_str + \"#[derive(Eq)]\\r\\n\"\n                if class_implements_ord:\n                    opt_derive_ord = indent_str + \"#[derive(Ord)]\\r\\n\"\n                if class_implements_hash:\n                    opt_derive_hash = indent_str + \"#[derive(Hash)]\\r\\n\"\n\n            for variant in enum:\n                variant = list(variant.values())[0]\n                if \"type\" in variant.keys():\n                    variant_type = variant[\"type\"]\n                    analyzed_arg_type = analyze_type(variant_type)\n                    if not(is_primitive_arg(analyzed_arg_type[1])):\n                        field_type_class_path = search_for_class_by_class_name(api_data, analyzed_arg_type[1])\n                        if field_type_class_path is None:\n                            print(\"no field_type_class_path found for \" + str(analyzed_arg_type))\n                        found_c = get_class(api_data, field_type_class_path[0], field_type_class_path[1])\n                        found_c_is_callback_typedef = \"callback_typedef\" in found_c.keys() and found_c[\"callback_typedef\"]\n                        if found_c_is_callback_typedef:\n                            opt_derive_debug = \"\"\n                            opt_derive_other = \"\"\n\n            code += indent_str + repr\n            code += opt_derive_debug + opt_derive_clone\n            code += opt_derive_other + opt_derive_copy\n            code += opt_derive_ord + opt_derive_eq\n            code += opt_derive_hash\n            code += opt_derive_default\n            code += opt_derive_serde\n            code += opt_derive_serde_extra_options\n            code += indent_str + \"pub enum \" + struct_name + \" {\\r\\n\"\n\n            for variant in enum:\n                variant_name = list(variant.keys())[0]\n                variant = list(variant.values())[0]\n                if \"type\" in variant.keys():\n                    variant_type = variant[\"type\"]\n                    if is_primitive_arg(variant_type):\n                        code += indent_str + \"    \" + variant_name + \"(\" + variant_type + \"),\\r\\n\"\n                    else:\n                        analyzed_arg_type = analyze_type(variant_type)\n                        if is_primitive_arg(analyzed_arg_type[1]):\n                            # array of [f32;x]\n                            code += indent_str + \"    \"  + variant_name + \"(\" + analyzed_arg_type[0] + analyzed_arg_type[1] + analyzed_arg_type[2] + \"),\\r\\n\"\n                        else:\n                            field_type_class_path = search_for_class_by_class_name(api_data, analyzed_arg_type[1])\n                            if field_type_class_path is None:\n                                print(\"variant_type not found: \" + variant_type + \" in \" + struct_name)\n                            found_c = get_class(api_data, field_type_class_path[0], field_type_class_path[1])\n                            found_c_is_enum = \"enum\" in found_c.keys()\n                            variant_postfix = wrapper_postfix\n                            if not(found_c_is_enum):\n                                variant_postfix = \"\"\n                            code += indent_str + \"    \"  + variant_name + \"(\" + analyzed_arg_type[0] + prefix + field_type_class_path[1] + variant_postfix + analyzed_arg_type[2] + \"),\\r\\n\"\n                else:\n                    code += indent_str + \"    \"  + variant_name + \",\\r\\n\"\n            code += indent_str + \"}\\r\\n\\r\\n\"\n\n    return code\n\n# returns the RUST DLL binding code\ndef generate_rust_dll_bindings(api_data, structs_map, functions_map):\n\n    code = \"\"\n    code += read_file(root_folder + \"/api/_patches/azul.rs/dll.rs\")\n    code += \"\\r\\n\"\n\n    code += \"    #[cfg(not(feature = \\\"link-static\\\"))]\\r\\n\"\n    code += \"    pub use self::dynamic_link::*;\\r\\n\"\n    code += \"    #[cfg(feature = \\\"link-static\\\")]\\r\\n\"\n    code += \"    pub use self::static_link::*;\\r\\n\"\n    code += \"    pub use self::types::*;\\r\\n\"\n    code += \"\\r\\n\"\n\n    code += \"    mod types {\\r\\n\"\n    code += \"        use core::ffi::c_void;\\r\\n\\r\\n\"\n    code += generate_structs(api_data, structs_map, True, indent=8)\n    code += \"    }\\r\\n\\r\\n\"\n\n    code += \"    #[cfg(feature = \\\"link-static\\\")]\\r\\n\"\n    code += \"    #[allow(non_snake_case)]\\r\\n\"\n    code += \"    mod static_link {\\r\\n\"\n    code += \"        use core::ffi::c_void;\\r\\n\"\n    code += \"        use core::mem::transmute;\\r\\n\"\n    code += \"        use super::types::*;\\r\\n\\r\\n\"\n    for fn_name in functions_map.keys():\n        fn_type = functions_map[fn_name]\n        fn_args = fn_type[0]\n        fn_return = fn_type[1]\n        return_arrow = \"\" if fn_return == \"\" else \" -> \"\n        fn_args_with_mem_transmute = strip_fn_arg_types_mem_transmute(fn_args)\n        code += \"        pub(crate) fn \" + fn_name + \"(\" + fn_args + \")\" + return_arrow + fn_return + \" { unsafe { transmute(azul::\" + fn_name + \"(\" + fn_args_with_mem_transmute + \")) } }\\r\\n\"\n    code += \"    }\\r\\n\\r\\n\"\n\n    code += \"    #[cfg(not(feature = \\\"link-static\\\"))]\\r\\n\"\n    code += \"    mod dynamic_link {\\r\\n\"\n    code += \"        use core::ffi::c_void;\\r\\n\\r\\n\"\n    code += \"        use super::types::*;\\r\\n\\r\\n\"\n    code += \"        #[cfg_attr(target_os = \\\"windows\\\", link(name=\\\"azul.dll\\\"))] // https://github.com/rust-lang/cargo/issues/9082\\r\\n\"\n    code += \"        #[cfg_attr(not(target_os = \\\"windows\\\"), link(name=\\\"azul\\\"))] // https://github.com/rust-lang/cargo/issues/9082\\r\\n\"\n    code += \"        extern \\\"C\\\" {\\r\\n\"\n    for fn_name in functions_map.keys():\n        fn_type = functions_map[fn_name]\n        fn_args = fn_type[0]\n        fn_return = fn_type[1]\n        return_arrow = \"\" if fn_return == \"\" else \" -> \"\n        code += \"            pub(crate) fn \" + fn_name + \"(\" + strip_fn_arg_types(fn_args) + \")\" + return_arrow + fn_return + \";\\r\\n\"\n    code += \"        }\\r\\n\\r\\n\"\n    code += \"    }\\r\\n\\r\\n\"\n\n    code += \"\\r\\n\"\n    code += \"\\r\\n\"\n\n    return code\n\n# Generates the azul-dll/python.rs file (pyo3 bindings)\ndef generate_python_api(api_data, structs_map, functions_map):\n\n    version = list(api_data.keys())[-1]\n\n    pyo3_code = \"\"\n    pyo3_code += \"#![allow(non_snake_case)]\\r\\n\"\n    pyo3_code += \"\\r\\n\"\n    pyo3_code += read_file(root_folder + \"/api/_patches/azul-dll/header.rs\")\n    pyo3_code += \"\\r\\n\"\n    pyo3_code += \"use core::mem;\\r\\n\"\n    pyo3_code += \"use pyo3::prelude::*;\\r\\n\"\n    pyo3_code += \"use pyo3::PyObjectProtocol;\\r\\n\"\n    pyo3_code += \"use pyo3::types::*;\\r\\n\"\n    pyo3_code += \"use pyo3::exceptions::PyException;\\r\\n\"\n\n    # This should be done properly, but right now it works\n\n    pyo3_code += \"type GLuint = u32; type AzGLuint = GLuint;\\r\\n\"\n    pyo3_code += \"type GLint = i32; type AzGLint = GLint;\\r\\n\"\n    pyo3_code += \"type GLint64 = i64; type AzGLint64 = GLint64;\\r\\n\"\n    pyo3_code += \"type GLuint64 = u64; type AzGLuint64 = GLuint64;\\r\\n\"\n    pyo3_code += \"type GLenum = u32; type AzGLenum = GLenum;\\r\\n\"\n    pyo3_code += \"type GLintptr = isize; type AzGLintptr = GLintptr;\\r\\n\"\n    pyo3_code += \"type GLboolean = u8; type AzGLboolean = GLboolean;\\r\\n\"\n    pyo3_code += \"type GLsizeiptr = isize; type AzGLsizeiptr = GLsizeiptr;\\r\\n\"\n    pyo3_code += \"type GLvoid = c_void; type AzGLvoid = GLvoid;\\r\\n\"\n    pyo3_code += \"type GLbitfield = u32; type AzGLbitfield = GLbitfield;\\r\\n\"\n    pyo3_code += \"type GLsizei = i32; type AzGLsizei = GLsizei;\\r\\n\"\n    pyo3_code += \"type GLclampf = f32; type AzGLclampf = GLclampf;\\r\\n\"\n    pyo3_code += \"type GLfloat = f32; type AzGLfloat = GLfloat;\\r\\n\"\n    pyo3_code += \"type AzF32 = f32;\\r\\n\"\n    pyo3_code += \"type AzU16 = u16;\\r\\n\"\n    pyo3_code += \"type AzU32 = u32;\\r\\n\"\n    pyo3_code += \"type AzScanCode = u32;\\r\\n\"\n\n    pyo3_code += \"\\r\\n\"\n    pyo3_code += \"\\r\\n\"\n    pyo3_code += read_file(root_folder + \"/api/_patches/python/api.rs\")\n    pyo3_code += \"\\r\\n\"\n\n    # Functions that have to be implemented manually\n    manual_implementations = [\n\n        (\"app\", \"App\", \"new\"), # ok: replaced\n        (\"window\", \"WindowCreateOptions\", \"new\"), # ok: replaced\n        (\"window\", \"WindowState\", \"new\"), # ok: replaced\n\n        (\"dom\", \"Dom\", \"iframe\"), # ok: replaced\n        (\"dom\", \"Dom\", \"set_dataset\"), # ok: replaced\n        (\"dom\", \"Dom\", \"with_dataset\"), # ok: replaced\n        (\"dom\", \"Dom\", \"add_callback\"), # ok: replaced\n        (\"dom\", \"Dom\", \"with_callback\"), # ok: replaced\n\n        (\"dom\", \"NodeData\", \"add_callback\"), # ok: replaced\n        (\"dom\", \"NodeData\", \"with_callback\"), # ok: replaced\n        (\"dom\", \"NodeData\", \"iframe\"), # ok: replaced\n        (\"dom\", \"NodeData\", \"set_dataset\"), # ok: replaced\n        (\"dom\", \"NodeData\", \"with_dataset\"), # ok: replaced\n\n        (\"widgets\", \"Button\", \"set_on_click\"), # ok: replaced\n        (\"widgets\", \"Button\", \"with_on_click\"), # ok: replaced\n\n        (\"menu\", \"StringMenuItem\", \"with_callback\"),\n        (\"menu\", \"StringMenuItem\", \"set_callback\"),\n        (\"menu\", \"MenuCallback\", \"new\"),\n        (\"gl\", \"Texture\", \"draw_tesselated_svg_gpu_node\"),\n        (\"gl\", \"Texture\", \"draw_tesselated_colored_svg_gpu_node\"),\n        (\"svg\", \"TessellatedGPUSvgNode\", \"new\"),\n        (\"svg\", \"TessellatedColoredGPUSvgNode\", \"new\"),\n\n        (\"task\", \"Timer\", \"new\"),\n        (\"callbacks\", \"CallbackInfo\", \"start_thread\"),\n        (\"callbacks\", \"CallbackInfo\", \"get_node_id_of_root_dataset\"),\n        (\"image\", \"ImageRef\", \"callback\"),\n\n        (\"widgets\", \"FileInput\", \"set_on_path_change\"),\n        (\"widgets\", \"FileInput\", \"with_on_path_change\"),\n        (\"widgets\", \"CheckBox\", \"set_on_toggle\"),\n        (\"widgets\", \"CheckBox\", \"with_on_toggle\"),\n        (\"widgets\", \"ColorInput\", \"set_on_value_change\"),\n        (\"widgets\", \"ColorInput\", \"with_on_value_change\"),\n        (\"widgets\", \"TextInput\", \"set_on_text_input\"),\n        (\"widgets\", \"TextInput\", \"with_on_text_input\"),\n        (\"widgets\", \"TextInput\", \"set_on_virtual_key_down\"),\n        (\"widgets\", \"TextInput\", \"with_on_virtual_key_down\"),\n        (\"widgets\", \"TextInput\", \"set_on_focus_lost\"),\n        (\"widgets\", \"TextInput\", \"with_on_focus_lost\"),\n        (\"widgets\", \"NumberInput\", \"set_on_value_change\"),\n        (\"widgets\", \"NumberInput\", \"with_on_value_change\"),\n        (\"widgets\", \"NumberInput\", \"with_on_text_input\"),\n        (\"widgets\", \"NumberInput\", \"with_on_virtual_key_down\"),\n        (\"widgets\", \"NumberInput\", \"with_on_focus_lost\"),\n        (\"widgets\", \"NumberInput\", \"set_on_text_input\"),\n        (\"widgets\", \"NumberInput\", \"set_on_virtual_key_down\"),\n        (\"widgets\", \"NumberInput\", \"set_on_focus_lost\"),\n        (\"widgets\", \"TabHeader\", \"with_on_click\"),\n        (\"widgets\", \"TabHeader\", \"set_on_click\"),\n        (\"widgets\", \"Ribbon\", \"dom\"),\n\n        # unnecessary due to Python string wrappers\n        (\"str\", \"String\", \"as_refstr\"),\n        (\"str\", \"String\", \"copy_from_bytes\"),\n        (\"vec\", \"U8Vec\", \"copy_from_bytes\"),\n        (\"callbacks\", \"RefAny\", \"new_c\"), # unnecessary, use PyAny\n        (\"vec\", \"TesselatedSvgNodeVec\", \"as_ref_vec\"),\n        (\"vec\", \"U8Vec\", \"as_ref_vec\"),\n    ]\n\n    inject_impls = {\n        (\"app\", \"App\"): read_file(root_folder + \"/api/_patches/python/app.rs\"),\n        (\"dom\", \"Dom\"): read_file(root_folder + \"/api/_patches/python/dom.rs\"),\n        (\"dom\", \"NodeData\"): read_file(root_folder + \"/api/_patches/python/nodedata.rs\"),\n        (\"widgets\", \"Button\"): read_file(root_folder + \"/api/_patches/python/button.rs\"),\n        (\"callbacks\", \"LayoutCallback\"): read_file(root_folder + \"/api/_patches/python/layout_callback.rs\"),\n        (\"window\", \"WindowCreateOptions\"): read_file(root_folder + \"/api/_patches/python/window_create_options.rs\"),\n        (\"window\", \"WindowState\"): read_file(root_folder + \"/api/_patches/python/window_state.rs\"),\n    }\n\n    staticmethods = [\n        (\"File\", \"open\"),\n        (\"File\", \"create\"),\n        (\"MsgBox\", \"ok\"),\n        (\"MsgBox\", \"ok_cancel\"),\n        (\"MsgBox\", \"yes_no\"),\n        (\"FileDialog\", \"select_file\"),\n        (\"FileDialog\", \"select_multiple_files\"),\n        (\"FileDialog\", \"select_folder\"),\n        (\"FileDialog\", \"save_file\"),\n        (\"ImageRef\", \"invalid\"),\n        (\"ImageRef\", \"raw_image\"),\n        (\"ImageRef\", \"gl_texture\"),\n        (\"ImageRef\", \"callback\"),\n        (\"FontRef\", \"parse\"),\n        (\"ColorPickerDialog\", \"open\"),\n        (\"SystemClipboard\", \"new\"),\n        (\"Css\", \"empty\"),\n        (\"Css\", \"from_string\"),\n        (\"WindowState\", \"default\"),\n    ]\n\n    not_default_constructable = {\n        \"Gl\": {},\n        \"ThreadSender\": {},\n        \"ThreadReceiver\": {},\n        \"Thread\": {},\n        \"TesselatedSvgNodeVec\": {},\n        \"U8Vec\": {},\n        \"CallbackInfo\": {},\n        \"IFrameCallbackInfo\": {},\n        \"RenderImageCallbackInfo\": {},\n        \"TimerCallbackInfo\": {},\n        \"LayoutCallbackInfo\": {},\n        \"RefAny\": {},\n        \"RefCount\": {},\n        \"IOSHandle\": {},\n        \"MacOSHandle\": {},\n        \"XlibHandle\": {},\n        \"XcbHandle\": {},\n        \"WaylandHandle\": {},\n        \"WindowsHandle\": {},\n        \"AndroidHandle\": {},\n        \"WaylandTheme\": {},\n        \"MarshaledLayoutCallbackInner\": {},\n        \"LayoutCallbackInner\": {},\n        \"Callback\": {},\n        \"IFrameCallback\": {},\n        \"RenderImageCallback\": {},\n        \"TimerCallback\": {},\n        \"WriteBackCallback\": {},\n        \"ThreadCallback\": {},\n        \"StyleBoxShadow\": {},\n        \"CssPropertyCache\": {},\n        \"GlVoidPtrConst\": {},\n        \"GlVoidPtrMut\": {},\n        \"U8VecRef\": {},\n        \"U8VecRefMut\": {},\n        \"F32VecRef\": {},\n        \"I32VecRef\": {},\n        \"GLuintVecRef\": {},\n        \"GLenumVecRef\": {},\n        \"GLintVecRefMut\": {},\n        \"GLint64VecRefMut\": {},\n        \"GLbooleanVecRefMut\": {},\n        \"GLfloatVecRefMut\": {},\n        \"RefstrVecRef\": {},\n        \"Refstr\": {},\n        \"GLsyncPtr\": {},\n        \"TesselatedSvgNodeVecRef\": {},\n        \"InstantPtr\": {},\n        \"InstantPtrCloneFn\": {},\n        \"InstantPtrDestructorFn\": {},\n        \"CreateThreadFn\": {},\n        \"GetSystemTimeFn\": {},\n        \"CheckThreadFinishedFn\": {},\n        \"LibrarySendThreadMsgFn\": {},\n        \"LibraryReceiveThreadMsgFn\": {},\n        \"ThreadRecvFn\": {},\n        \"ThreadSendFn\": {},\n        \"ThreadDestructorFn\": {},\n        \"ThreadReceiverDestructorFn\": {},\n        \"ThreadSenderDestructorFn\": {},\n        \"FontMetrics\": {},\n        \"ColorInputOnValueChangeCallback\": {},\n        \"TextInputOnTextInputCallback\": {},\n        \"TextInputOnVirtualKeyDownCallback\": {},\n        \"TextInputOnFocusLostCallback\": {},\n        \"NumberInputOnValueChangeCallback\": {},\n        \"CheckBoxOnToggleCallback\": {},\n    }\n\n    python_replacements = {\n        \"String\": (\"String\", \"pystring_to_azstring\", \"az_string_to_py_string\"),\n        \"U8Vec\": (\"Vec<u8>\", \"pyvecu8_to_vecu8\", \"az_vecu8_to_py_vecu8\"),\n        \"U16Vec\": (\"Vec<u16>\", \"pyvecu16_to_vecu16\", \"az_vecu8_to_py_vecu16\"),\n        \"F32Vec\": (\"Vec<f32>\", \"pyvecf32_to_vecf32\", \"az_vecf32_to_py_vecf32\"),\n        \"Refstr\": (\"&str\", \"pystring_to_refstr\"),\n        \"U8VecRefMut\": (\"mut Vec<u8>\", \"pybytesrefmut_to_vecu8refmut\"),\n        \"U8VecRef\": (\"Vec<u8>\", \"pybytesref_to_vecu8_ref\"),\n        \"F32VecRef\": (\"Vec<f32>\", \"pylist_f32_to_rust\"),\n        \"GLuintVecRef\": (\"Vec<u32>\", \"pylist_u32_to_rust\"),\n        \"GLintVecRefMut\": (\"mut Vec<i32>\", \"pylist_i32_to_rust\"),\n        \"GLint64VecRefMut\": (\"mut Vec<i64>\", \"pylist_i64_to_rust\"),\n        \"GLbooleanVecRefMut\": (\"mut Vec<u8>\", \"pylist_bool_to_rust\"),\n        \"GLfloatVecRefMut\": (\"mut Vec<f32>\", \"pylist_glfoat_to_rust\"),\n        \"RefstrVecRef\": (\"Vec<&str>\", \"pylist_str_to_rust\", \"\", \"vec_string_to_vec_refstr\"),\n        \"TesselatedSvgNodeVecRef\": (\"Vec<AzTesselatedSvgNode>\", \"pylist_tesselated_svg_node\"),\n    }\n\n    new_struct_map = dict(structs_map)\n    raw_pointer_structs = {}\n\n    # pyo3 does not know how to translate enums\n    # so we just create a \"EnumWrapper\" struct that\n    # contains the internal type in rust-representation\n    for struct_name in list(structs_map.keys()):\n        struct = structs_map[struct_name]\n        if \"struct\" in struct.keys():\n            new_struct_map[struct_name][\"extra_derive\"] = \"#[pyclass(name = \\\"\" + struct_name[len(prefix):] + \"\\\")]\"\n            field_index = 0\n            for field in struct[\"struct\"]:\n                field_name = list(field.keys())[0]\n                field_type = list(field.values())[0][\"type\"]\n                if len(analyze_type(field_type)[0]) > 0:\n                    raw_pointer_structs[struct_name] = {}\n                elif (not(field_name == \"cb\")):\n                    new_struct_map[struct_name][\"struct\"][field_index][field_name][\"extra_derive\"] = \"    #[pyo3(get, set)]\"\n                field_index = field_index + 1\n        elif \"enum\" in struct.keys():\n            new_struct_map[struct_name + \"EnumWrapper\"] = {}\n            new_struct_map[struct_name + \"EnumWrapper\"][\"struct\"] = []\n            new_struct_map[struct_name + \"EnumWrapper\"][\"struct\"].append({})\n            new_struct_map[struct_name + \"EnumWrapper\"][\"struct\"][0][\"inner\"] = {}\n            new_struct_map[struct_name + \"EnumWrapper\"][\"struct\"][0][\"inner\"][\"type\"] = struct_name[len(prefix):]\n            new_struct_map[struct_name + \"EnumWrapper\"][\"struct\"][0][\"inner\"][\"doc\"] = struct_name[len(prefix):] + \" wrapper\"\n            new_struct_map[struct_name + \"EnumWrapper\"][\"repr\"] = \"transparent\"\n            new_struct_map[struct_name + \"EnumWrapper\"][\"extra_derive\"] = \"#[pyclass(name = \\\"\" + struct_name[len(prefix):] + \"\\\")]\"\n\n            for variant in struct[\"enum\"]:\n                variant_name = list(field.keys())[0]\n                variant = list(variant.values())[0]\n                if \"type\" in variant.keys():\n                    variant_type = variant[\"type\"]\n                    if len(analyze_type(variant_type)[0]) > 0:\n                        raw_pointer_structs[struct_name] = {}\n        elif \"callback_typedef\" in struct.keys():\n            pass\n\n    pyo3_code += generate_structs(\n        api_data[version],\n        dict(new_struct_map),\n        functions_map,\n        indent=0,\n        private_pointers=False,\n        no_derive=True,\n        wrapper_postfix=\"EnumWrapper\"\n    )\n\n    pyo3_code += \"\\r\\n\"\n    pyo3_code += \"// Necessary because the Python interpreter may send structs across different threads\"\n    pyo3_code += \"\\r\\n\"\n    for raw_pointer_struct in raw_pointer_structs.keys():\n        pyo3_code += \"unsafe impl Send for \" + raw_pointer_struct + \" { }\\r\\n\"\n\n    pyo3_code += \"\\r\\n\"\n\n    pyo3_code += \"\\r\\n\"\n    pyo3_code += \"// Python objects must implement Clone at minimum\"\n    pyo3_code += \"\\r\\n\"\n    for struct_name in list(structs_map.keys()):\n        struct = structs_map[struct_name]\n        clone_class = True\n        if \"clone\" in struct.keys():\n            clone_class = struct[\"clone\"]\n        if not(clone_class):\n            continue\n\n        if \"struct\" in struct.keys():\n            pyo3_code += \"impl Clone for \" + struct_name + \" { fn clone(&self) -> Self { let r: &\" + struct[\"external\"]+ \" = unsafe { mem::transmute(self) }; unsafe { mem::transmute(r.clone()) } } }\\r\\n\"\n        elif \"enum\" in struct.keys():\n            pyo3_code += \"impl Clone for \" + struct_name + \"EnumWrapper { fn clone(&self) -> Self { let r: &\" + struct[\"external\"]+ \" = unsafe { mem::transmute(self) }; unsafe { mem::transmute(r.clone()) } } }\\r\\n\"\n\n    pyo3_code += \"\\r\\n\"\n    pyo3_code += \"// Implement Drop for all objects with drop constructors\"\n    pyo3_code += \"\\r\\n\"\n    for struct_name in list(structs_map.keys()):\n        struct = structs_map[struct_name]\n        class_has_custom_destructor = \"custom_destructor\" in struct.keys() and struct[\"custom_destructor\"]\n        is_boxed_object = \"is_boxed_object\" in struct.keys() and struct[\"is_boxed_object\"]\n        should_impl_drop = class_has_custom_destructor or is_boxed_object\n\n        if should_impl_drop:\n            if \"struct\" in struct.keys():\n                pyo3_code += \"impl Drop for \" + struct_name + \" { fn drop(&mut self) { crate::\" + struct_name + \"_delete(unsafe { mem::transmute(self) }); } }\\r\\n\"\n            elif \"enum\" in struct.keys():\n                pyo3_code += \"impl Drop for \" + struct_name + \"EnumWrapper { fn drop(&mut self) { crate::\" + struct_name + \"_delete(unsafe { mem::transmute(self) }); } }\\r\\n\"\n\n    pyo3_code += \"\\r\\n\"\n\n    # List of types that are returned as errors, have to implement py03::Error\n    errlist = []\n\n    for module_name in api_data[version].keys():\n        module = api_data[version][module_name]\n        for class_name in module[\"classes\"].keys():\n            struct = module[\"classes\"][class_name]\n\n            constants = \"\"\n            if \"constants\" in struct.keys():\n                for constant in struct[\"constants\"]:\n                    constant_name = list(constant.keys())[0]\n                    constant_type = constant[constant_name][\"type\"]\n                    constant_value = constant[constant_name][\"value\"]\n                    constants += \"    #[classattr]\\r\\n    const \" + constant_name + \": \" + constant_type + \" = \" + constant_value + \";\\r\\n\"\n                constants += \"\\r\\n\"\n\n            if \"struct_fields\" in struct.keys():\n\n                pyo3_code += \"\\r\\n\"\n                pyo3_code += \"#[pymethods]\\r\\n\"\n                pyo3_code += \"impl \" + prefix + class_name + \" {\\r\\n\" + constants\n                external = struct[\"external\"]\n\n                if \"constructors\" in struct.keys():\n                    for constructor_name in struct[\"constructors\"]:\n                        if (module_name, class_name, constructor_name) in manual_implementations:\n                            continue\n                        constructor = struct[\"constructors\"][constructor_name]\n                        if not(\"fn_args\" in constructor.keys()):\n                            print(\"wrong format: constructor \" + class_name + \"::\" + constructor_name)\n                        fn_args = constructor[\"fn_args\"]\n                        break_outer_flag = False\n                        for f in fn_args:\n                            arg_name = list(f.keys())[0]\n                            arg_type = f[arg_name]\n                            analyzed = analyze_type(arg_type)\n                            if len(analyzed[0]) != 0 or arg_type == \"RefAny\":\n                                break_outer_flag = True\n                                raise Exception(\"function \" + class_name + \" \" + constructor_name + \" cannot take RefAny as argument in Python API\")\n                                continue # no constructor can take pointers in the Python API\n                        if break_outer_flag:\n                            continue # break outer loop\n                        py_args = format_py_args(python_replacements, fn_args, api_data[version], constructor=True)\n                        return_type = None\n                        return_type_match = \"\"\n                        returns_option = None\n                        returns_error = None\n                        if \"returns\" in constructor.keys():\n                            return_type_match = constructor[\"returns\"][\"type\"]\n                            r = format_py_return(python_replacements, constructor[\"returns\"], api_data[version], errlist, constructor=True)\n                            return_type = r[0]\n                            returns_option = r[1]\n                            returns_error = r[2]\n                        return_type_str = prefix + class_name\n                        if not(return_type is None):\n                            return_type_str = return_type\n                        if (constructor_name == \"new\" and not(\"returns\" in constructor.keys())):\n                            pyo3_code += \"    #[new]\\r\\n\"\n                        else:\n                            pyo3_code += \"    #[staticmethod]\\r\\n\"\n                        pyo3_code += \"    fn \" + constructor_name + \"(\" + py_args + \") -> \" + return_type_str + \" {\\r\\n\"\n                        pyo3_code += \"        \" + format_py_body(python_replacements, module_name, class_name, constructor_name, fn_args, api_data[version], return_type_match, returns_option, returns_error, constructor=True) + \"\\r\\n\"\n                        pyo3_code += \"    }\\r\\n\"\n\n                # Generate constructors\n                class_is_vec = class_name.endswith(\"Vec\")\n                while True:\n                    if (not(\"constructors\") in struct.keys() or len(struct[\"constructors\"]) == 0) and not(class_name in not_default_constructable.keys()):\n                        py_new_constructor = \"\"\n                        py_func_args = \"\"\n\n                        # do not generate a __new__() constructor for struct\n                        # that have only \"ptr + len\" fields\n                        # this is a special rule for AzTessellatedSvgNodeVecRef\n                        maybe_is_ref_struct = len(struct[\"struct_fields\"]) == 2\n                        is_ref_struct = False\n\n                        for field in struct[\"struct_fields\"]:\n                            field_name = list(field.keys())[0]\n                            if field_name == \"ptr\":\n                                if maybe_is_ref_struct:\n                                    is_ref_struct = True\n                                break # don't generate code\n                            field_type = field[field_name][\"type\"]\n                            analyzed_type = analyze_type(field_type)\n                            if len(analyzed_type[0]) != 0:\n                                break # don't generate code for structs with raw pointers\n                            if is_primitive_arg(analyzed_type[1]):\n                                py_func_args += field_name + \": \" + field_type + \", \"\n                                py_new_constructor += \"            \" + field_name + \",\\r\\n\"\n                            else:\n                                f_class = quick_get_class(api_data[version], analyzed_type[1])\n                                if \"enum_fields\" in f_class.keys():\n                                    py_func_args += field_name + \": \" + prefix + field_type + \"EnumWrapper, \"\n                                    py_new_constructor += \"            \" + field_name + \",\\r\\n\"\n                                elif \"struct_fields\" in f_class.keys():\n                                    py_func_args += field_name + \": \" + prefix + field_type + \", \"\n                                    py_new_constructor += \"            \" + field_name + \",\\r\\n\"\n                                else:\n                                    break\n\n                        if is_ref_struct: # only necessary for AzTessellatedSvgNodeVecRef\n                            break\n\n                        if not(len(py_func_args) == 0):\n                            py_func_args = py_func_args[:-2] # strip final \", \"\n\n                        if class_is_vec:\n                            vec_type = class_name[:-3]\n                            vec_ty_excluded = [\"ScanCode\", \"U16\", \"U32\", \"I32\", \"F32\", \"GLuint\", \"GLint\"]\n                            if not(vec_type in vec_ty_excluded):\n                                vec_class = quick_get_class(api_data[version], vec_type)\n                                if \"enum_fields\" in vec_class.keys():\n                                    vec_type = vec_type + \"EnumWrapper\"\n                            pyo3_code += \"    /// Creates a new `\" + vec_type + \"Vec` from a Python array\\r\\n\"\n                            pyo3_code += \"    #[new]\\r\\n\"\n                            pyo3_code += \"    fn __new__(input: Vec<\" + prefix + vec_type + \">) -> Self {\\r\\n\"\n                            pyo3_code += \"        let m: \" + external + \" = \" + external + \"::from_vec(unsafe { mem::transmute(input) }); unsafe { mem::transmute(m) }\\r\\n\"\n\n                            pyo3_code += \"    }\\r\\n\"\n                            pyo3_code += \"    \\r\\n\"\n                            pyo3_code += \"    /// Returns the \" + vec_type + \" as a Python array\\r\\n\"\n                            pyo3_code += \"    fn array(&self) -> Vec<\" + prefix + vec_type + \"> {\\r\\n\"\n                            pyo3_code += \"        let m: &\" + external + \" = unsafe { mem::transmute(self) }; unsafe { mem::transmute(m.clone().into_library_owned_vec()) }\\r\\n\"\n                            pyo3_code += \"    }\\r\\n\"\n                        else:\n                            pyo3_code += \"    #[new]\\r\\n\"\n                            pyo3_code += \"    fn __new__(\" + py_func_args + \") -> Self {\\r\\n\"\n                            pyo3_code += \"        Self {\\r\\n\"\n                            pyo3_code += py_new_constructor\n                            pyo3_code += \"        }\\r\\n\"\n                            pyo3_code += \"    }\\r\\n\"\n                        pyo3_code += \"\\r\\n\"\n\n                    break\n\n                if \"functions\" in struct.keys():\n                    for function_name in struct[\"functions\"]:\n                        function = struct[\"functions\"][function_name]\n                        if (module_name, class_name, function_name) in manual_implementations:\n                            continue\n                        if not(\"fn_args\" in function.keys()):\n                            print(\"wrong format: \" + class_name + \"::\" + function_name)\n                        fn_args = function[\"fn_args\"]\n                        break_outer_flag = False\n                        for f in fn_args:\n                            arg_name = list(f.keys())[0]\n                            arg_type = f[arg_name]\n                            analyzed = analyze_type(arg_type)\n                            if len(analyzed[0]) != 0 or arg_type == \"RefAny\":\n                                raise Exception(\"function \" + class_name + \" \" + function_name + \" cannot take RefAny as argument in Python API\")\n                                break_outer_flag = True\n                                continue # no constructor can take pointers in the Python API\n                        if break_outer_flag:\n                            continue # break outer loop\n                        self_arg = \"&self\" # TODO\n                        self_needs_clone = False\n                        if fn_args[0][\"self\"] == \"refmut\":\n                            self_arg = \"&mut self\"\n                        elif fn_args[0][\"self\"] == \"value\":\n                            self_arg = \"self\" # TODO: possible?\n\n                        return_type = None # TODO\n                        return_type_match = \"\"\n                        returns_option = None\n                        returns_error = None\n                        if \"returns\" in function.keys():\n                            return_type_match = function[\"returns\"][\"type\"]\n                            r = format_py_return(python_replacements, function[\"returns\"], api_data[version], errlist, constructor=False)\n                            return_type = r[0]\n                            returns_option = r[1]\n                            returns_error = r[2]\n                        return_type_str = \"()\"\n                        if not(return_type is None):\n                            return_type_str = return_type\n                        pyo3_code += \"    fn \" + function_name + \"(\" + self_arg + format_py_args(python_replacements, fn_args, api_data[version], constructor=False) + \") -> \" + return_type_str + \" {\\r\\n\"\n                        pyo3_code += \"        \" + format_py_body(python_replacements, module_name, class_name, function_name, fn_args, api_data[version], return_type_match, returns_option, returns_error, constructor=False) + \"\\r\\n\"\n                        pyo3_code += \"    }\\r\\n\"\n\n\n                if tuple((module_name, class_name)) in inject_impls:\n                    pyo3_code += inject_impls[tuple((module_name, class_name))]\n                pyo3_code += \"}\\r\\n\"\n\n                pyo3_code += \"\\r\\n\"\n                pyo3_code += \"#[pyproto]\\r\\n\"\n                pyo3_code += \"impl PyObjectProtocol for \" + prefix + class_name + \" {\\r\\n\"\n                pyo3_code += \"    fn __str__(&self) -> Result<String, PyErr> { \\r\\n\"\n                pyo3_code += \"        let m: &\" + external + \" = unsafe { mem::transmute(self) }; Ok(format!(\\\"{:#?}\\\", m))\\r\\n\"\n                pyo3_code += \"    }\\r\\n\"\n                pyo3_code += \"    fn __repr__(&self) -> Result<String, PyErr> { \\r\\n\"\n                pyo3_code += \"        let m: &\" + external + \" = unsafe { mem::transmute(self) }; Ok(format!(\\\"{:#?}\\\", m))\\r\\n\"\n                pyo3_code += \"    }\\r\\n\"\n                pyo3_code += \"}\\r\\n\"\n\n            elif \"enum_fields\" in struct.keys():\n                pyo3_code += \"\\r\\n\"\n                pyo3_code += \"#[pymethods]\\r\\n\"\n                pyo3_code += \"impl \" + prefix + class_name + \"EnumWrapper {\\r\\n\" + constants\n\n                enum_is_union = False\n\n                # generate a Enum::Blah(...) constructor function\n                for enum_name in struct[\"enum_fields\"]:\n                    enum_arg_type = \"\"\n                    enum_type = \"\"\n                    needs_transmute = False\n                    variant_name = list(enum_name.keys())[0]\n                    variant = enum_name[variant_name]\n                    if \"type\" in variant.keys():\n                        enum_is_union = True\n                        analyzed_type = analyze_type(variant[\"type\"])\n                        if (len(analyzed_type[0]) > 0):\n                            continue\n                        enum_arg_type = \"v: \" + analyzed_type[1]\n                        if not(is_primitive_arg(analyzed_type[1])):\n                            e_class = quick_get_class(api_data[version], analyzed_type[1])\n                            if \"enum_fields\" in e_class.keys():\n                                enum_arg_type = \"v: \" + prefix + analyzed_type[1] + \"EnumWrapper\"\n                                needs_transmute = True\n                            elif \"struct_fields\" in e_class.keys():\n                                enum_arg_type = \"v: \" + prefix + analyzed_type[1]\n                            else:\n                                continue # cannot construct callbacks as function arguments\n                        else:\n                             enum_arg_type = \"v: \" + analyzed_type[1]\n                        enum_type = enum_arg_type\n                    if not(len(enum_type) == 0):\n                        pyo3_code += \"    #[staticmethod]\\r\\n    fn \" + variant_name + \"(\" + enum_arg_type + \") -> \"\n                    else:\n                        pyo3_code += \"    #[classattr]\\r\\n    fn \" + variant_name + \"(\" + enum_arg_type + \") -> \"\n                    pyo3_code += prefix + class_name + \"EnumWrapper { \"\n                    pyo3_code += prefix + class_name + \"EnumWrapper { inner: \" + prefix + class_name + \"::\" + variant_name\n                    if not(len(enum_type) == 0):\n                        if needs_transmute:\n                            pyo3_code += \"(unsafe { mem::transmute(v) })\"\n                        else:\n                            pyo3_code += \"(v)\"\n                    pyo3_code += \" } }\\r\\n\"\n\n                if tuple((module_name, class_name)) in inject_impls:\n                    pyo3_code += inject_impls[tuple((module_name, class_name))]\n\n                # Generate a \"match\" function that returns the enum tag as a string + the object as a tuple\n                if enum_is_union:\n                    pyo3_code += \"\\r\\n\"\n                    pyo3_code += \"    fn r#match(&self) -> PyResult<Vec<PyObject>> {\\r\\n\"\n                    pyo3_code += \"        use crate::python::\" + prefix + class_name + \";\\r\\n\"\n                    pyo3_code += \"        use pyo3::conversion::IntoPy;\\r\\n\"\n                    pyo3_code += \"        let gil = Python::acquire_gil();\\r\\n\"\n                    pyo3_code += \"        let py = gil.python();\\r\\n\"\n                    pyo3_code += \"        match &self.inner {\\r\\n\"\n                    for enum_name in struct[\"enum_fields\"]:\n                        variant_name = list(enum_name.keys())[0]\n                        variant = enum_name[variant_name]\n                        opt_variant_type_match = \"\"\n                        if \"type\" in variant.keys():\n                            opt_variant_type_match = \"(v)\"\n                        opt_variant_value = \"()\"\n                        if \"type\" in variant.keys():\n                            if (variant[\"type\"] == \"*const c_void\") or (variant[\"type\"] == \"*mut c_void\"):\n                                opt_variant_value = \"()\"\n                            else:\n                                analyzed_type = analyze_type(variant[\"type\"])\n                                if not(is_primitive_arg(analyzed_type[1])):\n                                    e_class = quick_get_class(api_data[version], analyzed_type[1])\n                                    if \"enum_fields\" in e_class.keys():\n                                        opt_variant_value = \"{ let m: &\" + prefix + analyzed_type[1] + \"EnumWrapper = unsafe { mem::transmute(v) }; m.clone() }\"\n                                    elif class_is_typedef(e_class):\n                                        opt_variant_value = \"()\" # can't destructure function pointer\n                                    elif variant[\"type\"] == \"[PixelValue;2]\":\n                                        opt_variant_value = \"v.to_vec()\"\n                                    else:\n                                        opt_variant_value = \"v.clone()\"\n                                else:\n                                        opt_variant_value = \"v\"\n\n                        pyo3_code += \"            \" + prefix + class_name + \"::\" + variant_name + opt_variant_type_match + \" => Ok(vec![\\\"\" + variant_name + \"\\\".into_py(py), \" + opt_variant_value + \".into_py(py)]),\\r\\n\"\n                    pyo3_code += \"        }\\r\\n\"\n                    pyo3_code += \"    }\\r\\n\"\n\n                pyo3_code += \"}\\r\\n\"\n\n                external = struct[\"external\"]\n                pyo3_code += \"\\r\\n\"\n                pyo3_code += \"#[pyproto]\\r\\n\"\n                pyo3_code += \"impl PyObjectProtocol for \" + prefix + class_name + \"EnumWrapper {\\r\\n\"\n                pyo3_code += \"    fn __str__(&self) -> Result<String, PyErr> { \\r\\n\"\n                pyo3_code += \"        let m: &\" + external + \" = unsafe { mem::transmute(&self.inner) }; Ok(format!(\\\"{:#?}\\\", m))\\r\\n\"\n                pyo3_code += \"    }\\r\\n\"\n                pyo3_code += \"    fn __repr__(&self) -> Result<String, PyErr> { \\r\\n\"\n                pyo3_code += \"        let m: &\" + external + \" = unsafe { mem::transmute(&self.inner) }; Ok(format!(\\\"{:#?}\\\", m))\\r\\n\"\n                pyo3_code += \"    }\\r\\n\"\n\n                # simple C-like enum: implement comparison operators\n                if not(enum_is_union):\n                    pyo3_code += \"    fn __richcmp__(&self, other: \" + prefix + class_name + \"EnumWrapper, op: pyo3::class::basic::CompareOp) -> PyResult<bool> {\\r\\n\"\n                    pyo3_code += \"        match op {\\r\\n\"\n                    pyo3_code += \"            pyo3::class::basic::CompareOp::Lt => { Ok((self.clone().inner as usize) <  (other.clone().inner as usize)) }\\r\\n\"\n                    pyo3_code += \"            pyo3::class::basic::CompareOp::Le => { Ok((self.clone().inner as usize) <= (other.clone().inner as usize)) }\\r\\n\"\n                    pyo3_code += \"            pyo3::class::basic::CompareOp::Eq => { Ok((self.clone().inner as usize) == (other.clone().inner as usize)) }\\r\\n\"\n                    pyo3_code += \"            pyo3::class::basic::CompareOp::Ne => { Ok((self.clone().inner as usize) != (other.clone().inner as usize)) }\\r\\n\"\n                    pyo3_code += \"            pyo3::class::basic::CompareOp::Gt => { Ok((self.clone().inner as usize) >  (other.clone().inner as usize)) }\\r\\n\"\n                    pyo3_code += \"            pyo3::class::basic::CompareOp::Ge => { Ok((self.clone().inner as usize) >= (other.clone().inner as usize)) }\\r\\n\"\n                    pyo3_code += \"        }\\r\\n\"\n                    pyo3_code += \"    }\\r\\n\"\n\n                pyo3_code += \"}\\r\\n\"\n\n    errlist_dict = {}\n    for err in errlist:\n        errlist_dict[err] = {}\n\n    pyo3_code += \"\\r\\n\"\n    for err in errlist_dict.keys():\n        external = structs_map[err][\"external\"]\n        pyo3_code += \"\\r\\n\"\n        pyo3_code += \"impl core::convert::From<\" + err + \"> for PyErr {\\r\\n\"\n        pyo3_code += \"    fn from(err: \" + err + \") -> PyErr {\\r\\n\"\n        pyo3_code += \"        let r: \" + external + \" = unsafe { mem::transmute(err) };\\r\\n\"\n        pyo3_code += \"        PyException::new_err(format!(\\\"{}\\\", r))\\r\\n\"\n        pyo3_code += \"    }\\r\\n\"\n        pyo3_code += \"}\\r\\n\"\n\n    pyo3_code += \"\\r\\n\"\n    pyo3_code += \"#[pymodule]\\r\\n\"\n    pyo3_code += \"fn azul(py: Python, m: &PyModule) -> PyResult<()> {\\r\\n\"\n    pyo3_code += \"\\r\\n\"\n    pyo3_code += \"    #[cfg(all(feature = \\\"use_pyo3_logger\\\", not(feature = \\\"use_fern_logger\\\")))] {\\r\\n\"\n\n    # Since we can't get access to the AppConfig\n    # here, use environment variables for configuration\n\n    pyo3_code += \"        let mut filter = log::LevelFilter ::Warn;\\r\\n\"\n    pyo3_code += \"\\r\\n\"\n    pyo3_code += \"        if std::env::var(\\\"AZUL_PY_LOGLEVEL_ERROR\\\").is_ok() { filter = log::LevelFilter ::Error; }\\r\\n\"\n    pyo3_code += \"        if std::env::var(\\\"AZUL_PY_LOGLEVEL_WARN\\\").is_ok() { filter = log::LevelFilter ::Warn; }\\r\\n\"\n    pyo3_code += \"        if std::env::var(\\\"AZUL_PY_LOGLEVEL_INFO\\\").is_ok() { filter = log::LevelFilter ::Info; }\\r\\n\"\n    pyo3_code += \"        if std::env::var(\\\"AZUL_PY_LOGLEVEL_DEBUG\\\").is_ok() { filter = log::LevelFilter ::Debug; }\\r\\n\"\n    pyo3_code += \"        if std::env::var(\\\"AZUL_PY_LOGLEVEL_TRACE\\\").is_ok() { filter = log::LevelFilter ::Trace; }\\r\\n\"\n    pyo3_code += \"        if std::env::var(\\\"AZUL_PY_LOGLEVEL_OFF\\\").is_ok() { filter = log::LevelFilter ::Off; }\\r\\n\"\n    pyo3_code += \"\\r\\n\"\n\n    # pyo3_code += \"        match pyo3_log::Logger::new(py.clone(), pyo3_log::Caching::LoggersAndLevels) {\\r\\n\"\n    # pyo3_code += \"            Ok(o) => {\\r\\n\"\n    # pyo3_code += \"                match o.filter(filter).install() {\\r\\n\"\n    # pyo3_code += \"                    Ok(_) => { }, \\r\\n\"\n    # pyo3_code += \"                    Err(e) => { println!(\\\"Could not initialize Python logger, (continuing execution): {}\\\", e); }, \\r\\n\"\n    # pyo3_code += \"                }\\r\\n\"\n    # pyo3_code += \"            },\\r\\n\"\n    # pyo3_code += \"            Err(e) => { println!(\\\"Could not create Python logger (continuing execution)\\\"); },\\r\\n\"\n    # pyo3_code += \"        }\\r\\n\"\n\n    # pyo3_code += \"        pyo3_log::init();\\r\\n\"\n    pyo3_code += \"    }\\r\\n\"\n    pyo3_code += \"\\r\\n\"\n\n    for module_name in api_data[version].keys():\n        module = api_data[version][module_name]\n        for class_name in module[\"classes\"].keys():\n            struct = module[\"classes\"][class_name]\n            if \"struct_fields\" in struct.keys():\n                pyo3_code += \"    m.add_class::<\" + prefix + class_name + \">()?;\\r\\n\"\n            elif \"enum_fields\" in struct.keys():\n                pyo3_code += \"    m.add_class::<\" + prefix + class_name + \"EnumWrapper>()?;\\r\\n\"\n                pass\n            elif \"callback_typedef\" in struct.keys():\n                pass\n        pyo3_code += \"\\r\\n\"\n    pyo3_code += \"    Ok(())\\r\\n\"\n    pyo3_code += \"}\\r\\n\"\n    pyo3_code += \"\\r\\n\"\n    return pyo3_code\n\n# Formats the input function arguments for the python DLL\ndef format_py_args(python_replacements, fn_args, api_data, constructor=False):\n\n    fn_args_string = \"\"\n\n    # if the argument is a AzString, use a String instead\n    for f in fn_args:\n        f_name = list(f.keys())[0]\n        if f_name == \"self\":\n            continue\n        f_type = f[f_name]\n        analyzed_fn_type = analyze_type(f_type)\n        f_type = analyzed_fn_type[1]\n\n        ref = \"\"\n        if analyzed_fn_type[0].strip() == \"*const\":\n            ref = \"&\"\n        elif analyzed_fn_type[0].strip() == \"*mut\":\n            ref = \"&mut \"\n\n        f_real_mut = \"\"\n        f_real_type = \"\"\n        if is_primitive_arg(f_type):\n            f_real_type = ref + f_type\n        else:\n            f_class = quick_get_class(api_data, analyzed_fn_type[1])\n            if \"enum_fields\" in f_class.keys():\n                f_real_type = ref + prefix + f_type + \"EnumWrapper\"\n            elif \"struct_fields\" in f_class.keys():\n                f_real_type = ref + prefix + f_type\n                if f_type in python_replacements.keys():\n                    py_replace = python_replacements[f_type][0]\n                    if py_replace.startswith(\"mut \"):\n                        f_real_mut = \"mut \"\n                        f_real_type = ref + py_replace[4:]\n                    else:\n                        f_real_type = ref + py_replace\n            else:\n                raise Exception(\"cannot use type \" + f_name + \": \" + f_type + \" as a Python function argument\")\n\n        fn_args_string += f_real_mut + f_name + \": \" + f_real_type + \", \"\n\n    if not(len(fn_args_string) == 0):\n        fn_args_string = fn_args_string[:-2]\n\n    if (not(constructor) and not(len(fn_args_string) == 0)):\n        fn_args_string = \", \" + fn_args_string\n\n    return fn_args_string\n\n# Formats the return type for the python DLL\n# returns the (return type, class_is_option, class_throws)\ndef format_py_return(python_replacements, return_type, api_data, errlist, constructor=False):\n    if return_type[\"type\"].startswith(\"Result\"):\n        found_c = quick_get_class(api_data, return_type[\"type\"])\n        ret_type_ok = found_c[\"enum_fields\"][0][\"Ok\"][\"type\"]\n        return_type_ok = ret_type_ok\n        if not(ret_type_ok in python_replacements.keys()):\n            return_type_ok = prefix + ret_type_ok\n        else:\n            return_type_ok = python_replacements[ret_type_ok][0]\n        ret_type_err = found_c[\"enum_fields\"][1][\"Err\"][\"type\"]\n        return_type_err = ret_type_err\n        if not(ret_type_err in python_replacements.keys()):\n            return_type_err = prefix + ret_type_err\n            errlist.append(return_type_err)\n        else:\n            return_type_err = python_replacements[ret_type_err][0]\n        return (\"Result<\" + return_type_ok + \", PyErr>\", None, return_type[\"type\"])\n    elif return_type[\"type\"].startswith(\"Option\"):\n        found_c = quick_get_class(api_data, return_type[\"type\"])\n        ret_type = found_c[\"enum_fields\"][1][\"Some\"][\"type\"]\n        return_type_opt = ret_type\n        if not(ret_type in python_replacements.keys()):\n            return_type_opt = prefix + ret_type\n            ret_type_c = quick_get_class(api_data, ret_type)\n            if \"enum_fields\" in ret_type_c.keys():\n                return_type_opt = return_type_opt + \"EnumWrapper\"\n        else:\n            return_type_opt = python_replacements[ret_type][0]\n        return (\"Option<\" + return_type_opt + \">\", return_type[\"type\"], None)\n    elif return_type[\"type\"] in python_replacements.keys():\n        return (python_replacements[return_type[\"type\"]][0], None, None)\n    else:\n        # TODO: PyBuffer / Vec conversion\n        if is_primitive_arg(return_type[\"type\"]):\n            return (return_type[\"type\"], None, None)\n        else:\n            return_type_str = prefix + return_type[\"type\"]\n            ret_type_c = quick_get_class(api_data, return_type[\"type\"])\n            if \"enum_fields\" in ret_type_c.keys():\n                return_type_str = return_type_str + \"EnumWrapper\"\n            return (return_type_str, None, None)\n\ndef format_py_body(python_replacements, module_name, class_name, function_name, fn_args, api_data, return_type_str, returns_option=None, returns_error=None, constructor=False):\n\n    # convert input \"String\" into azul-internal AzStrings\n    string_conversions = \"\"\n    for f in fn_args:\n        f_name = list(f.keys())[0]\n        f_type = f[f_name]\n        if f_type in python_replacements.keys():\n            python_replace = python_replacements[f_type][1]\n            if len(python_replacements[f_type]) == 4:\n                string_conversions += \"let \" + f_name + \" = \" + python_replacements[f_type][3] + \"(&\" + f_name + \");\\r\\n        \"\n            if python_replacements[f_type][0].startswith(\"mut \"):\n                string_conversions += \"let \" + f_name + \" = \" + python_replace + \"(&mut \" + f_name + \");\\r\\n        \"\n            else:\n                string_conversions += \"let \" + f_name + \" = \" + python_replace + \"(&\" + f_name + \");\\r\\n        \"\n\n    fn_args_invoke = \"\"\n    for f in fn_args:\n        fn_args_invoke += \"            mem::transmute(\" + list(f.keys())[0] + \"),\\r\\n\"\n    if not(len(fn_args_invoke) == 0):\n        fn_args_invoke = \"\\r\\n\" + fn_args_invoke\n        fn_args_invoke += \"        \"\n    fn_body = \"\"\n    fn_body += string_conversions\n\n    if (not(returns_option is None)):\n        # function returns option: cannot transmute, use match None { ... }\n        # function throws an error: cannot transmute, use match Err { ... }\n        fn_body += \"let m: \" + prefix + returns_option + \" = unsafe { mem::transmute(crate::\" + prefix + class_name + \"_\" + snake_case_to_lower_camel(function_name) + \"(\" + fn_args_invoke + \")) };\\r\\n\"\n        fn_body += \"        match m {\\r\\n\"\n        fn_body += \"            \" + prefix + returns_option + \"::Some(s) => Some(\"\n\n        replace_option = \"\"\n\n        # if function returns OptionString, OptionVecRefMut, ...\n        for entry in python_replacements.keys():\n            if returns_option == \"Option\" + entry:\n                replace_option = entry\n\n        if len(replace_option) != 0:\n            fn_body += \"{ let s: \" + prefix + replace_option + \" = unsafe { mem::transmute(s) }; s.into() }\"\n        else:\n            fn_body += \"unsafe { mem::transmute(s) }\"\n\n        fn_body += \"),\\r\\n\"\n        fn_body += \"            \" + prefix + returns_option + \"::None => None,\\r\\n\"\n        fn_body += \"        }\\r\\n\"\n    elif not(returns_error is None):\n        # function throws an error: cannot transmute, use match Err { ... }\n        fn_body += \"let m: \" + prefix + returns_error + \" = unsafe { mem::transmute(crate::\" + prefix + class_name + \"_\" + snake_case_to_lower_camel(function_name) + \"(\" + fn_args_invoke + \")) };\\r\\n\"\n        fn_body += \"        match m {\\r\\n\"\n        fn_body += \"            \" + prefix + returns_error + \"::Ok(o) => Ok(o.into()),\\r\\n\"\n        fn_body += \"            \" + prefix + returns_error + \"::Err(e) => Err(e.into()),\\r\\n\"\n        fn_body += \"        }\\r\\n\"\n    else:\n        if return_type_str in python_replacements.keys():\n            fn_body += python_replacements[return_type_str][2] + \"(unsafe { mem::transmute(crate::\" + prefix + class_name + \"_\" + snake_case_to_lower_camel(function_name) + \"(\" + fn_args_invoke + \")) })\"\n        else:\n            fn_body += \"unsafe { mem::transmute(crate::\" + prefix + class_name + \"_\" + snake_case_to_lower_camel(function_name) + \"(\" + fn_args_invoke + \")) }\"\n    return fn_body\n\n\n# Generates the azul/rust/azul.rs file\ndef generate_rust_api(api_data, structs_map, functions_map):\n\n    module_file_map = {}\n    version = list(api_data.keys())[-1]\n    module_file_map['dll'] = generate_rust_dll_bindings(api_data[version], structs_map, functions_map)\n    myapi_data = api_data[version]\n\n    for module_name in myapi_data.keys():\n        code = \"\"\n        module_doc = None\n        if \"doc\" in myapi_data[module_name]:\n            module_doc = myapi_data[module_name][\"doc\"]\n\n        module = myapi_data[module_name][\"classes\"]\n\n        code += \"    #![allow(dead_code, unused_imports, unused_unsafe)]\\r\\n\"\n        if module_doc != None:\n            code += \"    //! \" + module_doc + \"\\r\\n\"\n\n        code += \"    use crate::dll::*;\\r\\n\"\n        code += \"    use core::ffi::c_void;\\r\\n\"\n\n        if tuple([module_name]) in rust_api_patches:\n            code += rust_api_patches[tuple([module_name])]\n\n        code += get_all_imports(myapi_data, module, module_name)\n\n        for class_name in module.keys():\n            c = module[class_name]\n\n            class_can_derive_debug = \"derive\" in c.keys() and \"Debug\" in c[\"derive\"]\n            class_can_be_copied = \"derive\" in c.keys() and \"Copy\" in c[\"derive\"]\n            class_has_partialeq = \"derive\" in c.keys() and \"PartialEq\" in c[\"derive\"]\n            class_has_eq = \"derive\" in c.keys() and \"Eq\" in c[\"derive\"]\n            class_has_partialord = \"derive\" in c.keys() and \"PartialOrd\" in c[\"derive\"]\n            class_has_ord = \"derive\" in c.keys() and \"Ord\" in c[\"derive\"]\n            class_can_be_hashed = \"derive\" in c.keys() and \"Hash\" in c[\"derive\"]\n\n            class_is_boxed_object = not(class_is_stack_allocated(c))\n            class_is_const = \"const\" in c.keys()\n            class_is_callback_typedef = \"callback_typedef\" in c.keys() and (len(c[\"callback_typedef\"]) > 0)\n            class_has_custom_destructor = \"custom_destructor\" in c.keys() and c[\"custom_destructor\"]\n            treat_external_as_ptr = \"external\" in c.keys() and \"is_boxed_object\" in c.keys() and c[\"is_boxed_object\"]\n\n            class_can_be_cloned = True\n            if \"clone\" in c.keys():\n                class_can_be_cloned = c[\"clone\"]\n\n            c_is_stack_allocated = not(class_is_boxed_object)\n            class_ptr_name = prefix + class_name\n\n            if \"doc\" in c.keys():\n                code += \"    /// \" + c[\"doc\"] + \"\\r\\n    \"\n            else:\n                code += \"    /// `\" + class_name + \"` struct\\r\\n    \"\n\n            code += \"\\r\\n    #[doc(inline)] pub use crate::dll::\" + class_ptr_name + \" as \" + class_name + \";\\r\\n\"\n\n            has_constructors = (\"constructors\" in c.keys() and len(c[\"constructors\"]) > 0)\n            has_functions = (\"functions\" in c.keys() and len(c[\"functions\"]) > 0)\n            has_constants = (\"constants\" in c.keys() and len(c[\"constants\"]) > 0)\n\n            should_emit_impl = has_constructors or has_functions or has_constants and not(class_is_const or class_is_callback_typedef)\n\n            if should_emit_impl:\n\n                class_impl_block = \"\\r\\n\"\n\n                if \"constants\" in c.keys():\n                    for constant in c[\"constants\"]:\n                        constant_name = list(constant.keys())[0]\n                        constant_type = constant[constant_name][\"type\"]\n                        constant_value = constant[constant_name][\"value\"]\n                        class_impl_block += \"        pub const \" + constant_name + \": \" + constant_type + \" = \" + constant_value + \";\\r\\n\"\n\n                    class_impl_block += \"\\r\\n\"\n\n                if \"constructors\" in c.keys():\n                    for fn_name in c[\"constructors\"]:\n                        const = c[\"constructors\"][fn_name]\n\n                        c_fn_name = class_ptr_name + \"_\" + snake_case_to_lower_camel(fn_name)\n                        fn_args = rust_bindings_fn_args(const, class_name, class_ptr_name, False, myapi_data)\n                        fn_args_call = rust_bindings_call_fn_args(const, class_name, class_ptr_name, False, myapi_data, class_is_boxed_object)\n\n                        fn_body = \"\"\n\n                        if tuple([module_name, class_name, fn_name]) in rust_api_patches.keys() \\\n                        and \"use_patches\" in const.keys() \\\n                        and \"rust\" in const[\"use_patches\"]:\n                            fn_body = rust_api_patches[tuple([module_name, class_name, fn_name])]\n                        else:\n                            fn_body = \"unsafe { crate::dll::\" + c_fn_name + \"(\" + fn_args_call + \") }\"\n\n                        if \"doc\" in const.keys():\n                            class_impl_block += \"        /// \" + const[\"doc\"] + \"\\r\\n\"\n                        else:\n                            class_impl_block += \"        /// Creates a new `\" + class_name + \"` instance.\\r\\n\"\n\n                        returns = \"Self\"\n                        if \"returns\" in const.keys():\n                            return_type = const[\"returns\"][\"type\"]\n                            returns = return_type\n                            analyzed_return_type = analyze_type(return_type)\n                            if is_primitive_arg(analyzed_return_type[1]):\n                                fn_body = fn_body\n                            else:\n                                return_type_class = search_for_class_by_class_name(myapi_data, analyzed_return_type[1])\n                                if return_type_class is None:\n                                    print(\"no return type found for return type: \" + return_type)\n                                returns = analyzed_return_type[0] + \" crate::\" + return_type_class[0] + \"::\" + return_type_class[1] + analyzed_return_type[2]\n                                fn_body = fn_body\n\n                        class_impl_block += \"        pub fn \" + fn_name + \"\" + fn_args[0] + \"(\" + fn_args[1] + \") -> \" + returns + \" { \" + fn_body + \" }\\r\\n\"\n\n                if \"functions\" in c.keys():\n                    for fn_name in c[\"functions\"]:\n                        f = c[\"functions\"][fn_name]\n\n                        fn_args = rust_bindings_fn_args(f, class_name, class_ptr_name, True, myapi_data)\n                        fn_args_call = rust_bindings_call_fn_args(f, class_name, class_ptr_name, True, myapi_data, class_is_boxed_object)\n\n                        c_fn_name = class_ptr_name + \"_\" + snake_case_to_lower_camel(fn_name)\n\n                        fn_body = \"\"\n\n                        if tuple([module_name, class_name, fn_name]) in rust_api_patches.keys() \\\n                        and \"use_patches\" in const.keys() \\\n                        and \"rust\" in const[\"use_patches\"]:\n                            fn_body = rust_api_patches[tuple([module_name, class_name, fn_name])]\n                        else:\n                            fn_body = \"unsafe { crate::dll::\" + c_fn_name + \"(\" + fn_args_call + \") }\"\n\n                        if tuple([module_name, class_name, fn_name]) in rust_api_patches:\n                            class_impl_block += rust_api_patches[tuple([module_name, class_name, fn_name])]\n\n                            if \"use_patches\" in f.keys() and f[\"use_patches\"]:\n                                continue\n\n                        if \"doc\" in f.keys():\n                            class_impl_block += \"        /// \" + f[\"doc\"] + \"\\r\\n\"\n                        else:\n                            class_impl_block += \"        /// Calls the `\" + class_name + \"::\" + fn_name + \"` function.\\r\\n\"\n\n                        returns = \"\"\n                        if \"returns\" in f.keys():\n                            return_type = f[\"returns\"][\"type\"]\n                            returns = \" -> \" + return_type\n                            analyzed_return_type = analyze_type(return_type)\n                            if is_primitive_arg(analyzed_return_type[1]):\n                                fn_body = fn_body\n                            else:\n                                return_type_class = search_for_class_by_class_name(myapi_data, analyzed_return_type[1])\n                                if return_type_class is None:\n                                    print(\"no return type found for return type: \" + return_type)\n                                returns = \" ->\" + analyzed_return_type[0] + \" crate::\" + return_type_class[0] + \"::\" + return_type_class[1] + analyzed_return_type[2]\n                                fn_body = fn_body\n\n                        class_impl_block += \"        pub fn \" + fn_name + fn_args[0] + \"(\" + fn_args[1] + \") \" +  returns + \" { \" + fn_body + \" }\\r\\n\"\n\n                code += \"    impl \" + class_name + \" {\\r\\n\"\n                code += class_impl_block\n                code += \"    }\\r\\n\\r\\n\" # end of class\n\n            if treat_external_as_ptr and class_can_be_cloned:\n                code += \"    impl Clone for \" + class_name + \" { fn clone(&self) -> Self { unsafe { crate::dll::\" + class_ptr_name + \"_deepCopy(self) } } }\\r\\n\"\n            if treat_external_as_ptr:\n                code += \"    impl Drop for \" + class_name + \" { fn drop(&mut self) { if self.run_destructor { unsafe { crate::dll::\" + class_ptr_name + \"_delete(self) } } } }\\r\\n\"\n\n\n        module_file_map[module_name] = code\n\n    final_code = \"\"\n\n    for line in license.splitlines():\n        final_code += \"// \" + line + \"\\r\\n\"\n\n    final_code += read_file(root_folder + \"/api/_patches/azul.rs/header.rs\")\n\n    for module_name in module_file_map.keys():\n        if module_name != \"dll\":\n            final_code += \"pub \"\n        final_code += \"mod \" + module_name + \" {\\r\\n\"\n        final_code += module_file_map[module_name]\n        final_code += \"}\\r\\n\\r\\n\"\n\n    return final_code\n\n# Generate the RUST function callback type:\n#\n# extern \"C\" fn(&Blah, &Foo) -> FooReturn\ndef generate_rust_callback_fn_type(api_data, callback_typedef):\n    # callback_typedef\n\n    fn_string = \"extern \\\"C\\\" fn(\"\n\n    if \"fn_args\" in callback_typedef.keys():\n        fn_args = callback_typedef[\"fn_args\"]\n        for fn_arg in fn_args:\n            fn_arg_type = fn_arg[\"type\"]\n            if not \"ref\" in fn_arg.keys():\n                print(\"callback type \" + str(callback_typedef) + \" does not have a ref attribute for fn_arg \" + str(fn_arg))\n            fn_arg_ref = fn_arg[\"ref\"]\n            search_result = search_for_class_by_class_name(api_data, fn_arg_type)\n            fn_arg_class = fn_arg_type\n            if not(is_primitive_arg(fn_arg_type)):\n                if search_result is None:\n                    print(\"fn_arg_type \" + fn_arg_type + \" not found!\")\n                fn_arg_class = search_result[1]\n\n            if not(is_primitive_arg(fn_arg_type)):\n                if fn_arg_ref == \"ref\":\n                    fn_string += \"&\" + prefix + fn_arg_class\n                elif fn_arg_ref == \"refmut\":\n                    fn_string += \"&mut \" + prefix + fn_arg_class\n                elif fn_arg_ref == \"value\":\n                    fn_string += prefix + fn_arg_class\n                else:\n                    raise Exception(\"wrong fn_arg_ref on \" + fn_arg_type)\n            else:\n                if fn_arg_ref == \"ref\":\n                    fn_string += \"&\"  + fn_arg_class\n                elif fn_arg_ref == \"refmut\":\n                    fn_string += \"&mut \" + fn_arg_class\n                elif fn_arg_ref == \"value\":\n                    fn_string += fn_arg_class\n                else:\n                    raise Exception(\"wrong fn_arg_ref on \" + fn_arg_type)\n\n            fn_string += \", \"\n\n        if len(fn_args) > 0:\n            fn_string = fn_string[:-2] # trim last comma\n\n    fn_string += \")\"\n\n    if \"returns\" in callback_typedef.keys():\n        fn_string += \" -> \"\n        fn_arg_type = callback_typedef[\"returns\"][\"type\"]\n        search_result = search_for_class_by_class_name(api_data, fn_arg_type)\n        fn_arg_class = fn_arg_type\n\n        if not(is_primitive_arg(fn_arg_type)):\n            if search_result is None:\n                print(\"fn_arg_type \" + fn_arg_type + \" not found!\")\n                raise Exception(\"fn_arg_type \" + fn_arg_type + \" not found!\")\n            fn_arg_class = search_result[1]\n\n        if not(is_primitive_arg(fn_arg_type)):\n            fn_string += prefix + fn_arg_class\n        else:\n            fn_string += fn_arg_class\n\n    return fn_string\n\n# Generate the C coded for the struct layout of the final API\ndef generate_c_structs(api_data, structs_map, forward_declarations, extra_forward_delcarations, use_prefix=True, typedef_style=\"c\"):\n    code = \"\"\n\n    pfx = prefix\n    if not(use_prefix):\n        pfx = \"\"\n\n    # Put all function pointers at the top and forward-declare all the structs\n    # C does not allow (?) to forward declare function pointers\n    function_pointers = []\n\n    for struct_name in structs_map.keys():\n        struct = structs_map[struct_name]\n        class_is_callback_typedef = \"callback_typedef\" in struct.keys() and (len(struct[\"callback_typedef\"].keys()) > 0)\n        if class_is_callback_typedef:\n            if typedef_style == \"c\":\n                function_pointers.append(tuple((struct[\"callback_typedef\"], generate_c_callback_fn_type(api_data, struct[\"callback_typedef\"], struct_name, use_prefix))))\n            elif typedef_style == \"cpp\":\n                function_pointers.append(tuple((struct[\"callback_typedef\"], generate_cpp_callback_fn_type(api_data, struct[\"callback_typedef\"], struct_name, use_prefix))))\n\n    function_pointer_string = \"\"\n    already_forward_declared = []\n\n    for fnptr in function_pointers:\n        if \"fn_args\" in fnptr[0].keys():\n            for arg in fnptr[0][\"fn_args\"]:\n                arg_type = analyze_type(arg[\"type\"])[1]\n                if is_primitive_arg(analyze_type(arg_type)[1]):\n                    continue\n                if not(arg_type in already_forward_declared):\n                    # forward declare the correct type (struct, enum, union)\n                    arg_type_type = \"struct\"\n                    found_c = search_for_class_by_class_name(api_data, arg_type)\n                    c = get_class(api_data, found_c[0], found_c[1])\n                    if \"enum_fields\" in c.keys():\n                        arg_type_type = \"enum\"\n                        if enum_is_union(c[\"enum_fields\"]):\n                            arg_type_type = \"union\"\n                    function_pointer_string += \"\\r\\n\" + arg_type_type + \" \" + pfx + arg_type + \";\"\n                    if typedef_style == \"c\":\n                        function_pointer_string += \"\\r\\ntypedef \" + arg_type_type + \" \" + pfx + arg_type + \" \" + pfx + arg_type + \";\"\n\n                    already_forward_declared.append(arg_type)\n\n        if \"returns\" in fnptr[0].keys():\n            return_type = fnptr[0][\"returns\"][\"type\"]\n            return_type = analyze_type(return_type)[1]\n            if not(is_primitive_arg(return_type)):\n                if not(return_type in already_forward_declared):\n                    # forward declare the correct type (struct, enum, union)\n                    arg_type_type = \"struct\"\n                    found_c = search_for_class_by_class_name(api_data, return_type)\n                    c = get_class(api_data, found_c[0], found_c[1])\n                    if \"enum_fields\" in c.keys():\n                        arg_type_type = \"enum\"\n                        if enum_is_union(c[\"enum_fields\"]):\n                            arg_type_type = \"union\"\n                    function_pointer_string += \"\\r\\n\" + arg_type_type + \" \" + pfx + return_type + \";\"\n                    if typedef_style == \"c\":\n                        function_pointer_string += \"\\r\\ntypedef \" + arg_type_type + \" \" + pfx + return_type + \" \" + pfx + return_type + \";\"\n                    already_forward_declared.append(return_type)\n\n        function_pointer_string += \"\\r\\n\"\n        function_pointer_string += fnptr[1]\n        function_pointer_string += \"\\r\\n\"\n\n    code += function_pointer_string\n    code += \"\\r\\n\"\n\n    for struct_name in structs_map.keys():\n        struct = structs_map[struct_name]\n        class_is_callback_typedef = \"callback_typedef\" in struct.keys() and (len(struct[\"callback_typedef\"].keys()) > 0)\n        class_can_be_copied = \"derive\" in struct.keys() and \"Copy\" in struct[\"derive\"]\n        class_has_custom_destructor = \"custom_destructor\" in struct.keys() and struct[\"custom_destructor\"]\n        class_can_be_cloned = True\n        if \"clone\" in struct.keys():\n            class_can_be_cloned = struct[\"clone\"]\n\n        is_boxed_object = \"is_boxed_object\" in struct.keys() and struct[\"is_boxed_object\"]\n        treat_external_as_ptr = \"external\" in struct.keys() and is_boxed_object\n\n        if struct_name in extra_forward_delcarations.keys():\n            struct_forward_decl = extra_forward_delcarations[struct_name]\n            code += \"\\r\\n\" + struct_forward_decl[\"type\"] + \" \" + struct_forward_decl[\"name\"] + \";\"\n            if typedef_style == \"c\":\n                code += \"\\r\\ntypedef \" + struct_forward_decl[\"type\"] + \" \" + struct_forward_decl[\"name\"] + \" \" + struct_forward_decl[\"name\"] + \";\"\n\n        if class_is_callback_typedef:\n            # function_pointers += generate_c_callback_fn_type(api_data, struct[\"callback_typedef\"], struct_name)\n            # function_pointers += \"\\r\\n\"\n            pass\n        elif \"struct\" in struct.keys():\n            struct = struct[\"struct\"]\n            # https://stackoverflow.com/questions/65043140/how-to-forward-declare-structs-in-c\n            code += \"\\r\\nstruct \" + struct_name + \" {\\r\\n\"\n\n            for field in struct:\n                if type(field) is str:\n                    print(\"Struct \" + struct_name + \" should have a dictionary as fields\")\n                field_name = list(field.keys())[0]\n                field_type = list(field.values())[0]\n                if \"type\" in field_type:\n                    field_type = field_type[\"type\"]\n                    analyzed_arg_type = analyze_type(field_type)\n\n                    # arrays: convert blah: [BlahType;4] to BlahType blah[4]\n                    is_array = False\n                    if (len(analyzed_arg_type) == 3 and analyzed_arg_type[2].startswith(\";\")):\n                        analyzed_arg_type[2] = analyzed_arg_type[2][1:]\n                        is_array = True\n\n                    if is_primitive_arg(analyzed_arg_type[1]):\n                        if is_array:\n                            code += \"    \" + replace_primitive_ctype(analyzed_arg_type[1]) + \" \" + field_name + replace_primitive_ctype(analyzed_arg_type[0]).strip() + analyzed_arg_type[2] + \";\\r\\n\"\n                        else:\n                            code += \"    \" + replace_primitive_ctype(analyzed_arg_type[1]) + replace_primitive_ctype(analyzed_arg_type[0]).strip() + analyzed_arg_type[2] + \" \" + field_name + \";\\r\\n\"\n                    else:\n                        field_type_class_path = search_for_class_by_class_name(api_data, analyzed_arg_type[1])\n                        if field_type_class_path is None:\n                            print(\"no field_type_class_path found for \" + str(analyzed_arg_type))\n\n                        found_c = get_class(api_data, field_type_class_path[0], field_type_class_path[1])\n                        if is_array:\n                            code += \"    \" + pfx + field_type_class_path[1] + \" \" + field_name + replace_primitive_ctype(analyzed_arg_type[0]).strip() + analyzed_arg_type[2] + \";\\r\\n\"\n                        else:\n                            code += \"    \" + pfx + field_type_class_path[1] + replace_primitive_ctype(analyzed_arg_type[0]).strip()  + analyzed_arg_type[2]+ \" \" + field_name + \";\\r\\n\"\n                else:\n                    print(\"struct \" + struct_name + \" does not have a type on field \" + field_name)\n                    raise Exception(\"error\")\n\n            if typedef_style == \"cpp\":\n                code += \"    \" + struct_name + \"& operator=(const \" + struct_name + \"&) = delete; /* disable assignment operator, use std::move (default) or .clone() */\\r\\n\"\n                if not(class_can_be_copied):\n                    code += \"    \" + struct_name + \"(const \" + struct_name + \"&) = delete; /* disable copy constructor, use explicit .clone() */\\r\\n\"\n                code += \"    \" + struct_name + \"() = delete; /* disable default constructor, use C++20 designated initializer instead */\\r\\n\"\n            code += \"};\\r\\n\"\n\n            if not(struct_name in already_forward_declared):\n                if typedef_style == \"c\":\n                    code += \"typedef struct \" + struct_name + \" \" + struct_name + \";\\r\\n\"\n\n        elif \"enum\" in struct.keys():\n            enum = struct[\"enum\"]\n            if not(enum_is_union(enum)):\n                if typedef_style == \"cpp\":\n                    code += \"\\r\\nenum class \" + struct_name + \" {\\r\\n\"\n                else:\n                    code += \"\\r\\nenum \" + struct_name + \" {\\r\\n\"\n                for variant in enum:\n                    variant_name = list(variant.keys())[0]\n                    variant_real = list(variant.values())[0]\n                    if typedef_style == \"cpp\":\n                        code += \"   \" + variant_name + \",\\r\\n\"\n                    else:\n                        code += \"   \" + struct_name + \"_\" + variant_name + \",\\r\\n\"\n                code += \"};\\r\\n\"\n                if not(struct_name in already_forward_declared):\n                    if typedef_style == \"c\":\n                        code += \"typedef enum \" + struct_name + \" \" + struct_name + \";\\r\\n\"\n            else:\n                # generate union tag\n                if typedef_style == \"cpp\":\n                    code += \"\\r\\nenum class \" + struct_name + \"Tag {\\r\\n\"\n                else:\n                    code += \"\\r\\nenum \" + struct_name + \"Tag {\\r\\n\"\n                for variant in enum:\n                    variant_name = list(variant.keys())[0]\n                    if typedef_style == \"cpp\":\n                        code += \"   \" + variant_name + \",\\r\\n\"\n                    else:\n                        code += \"   \" + struct_name + \"Tag_\" + variant_name + \",\\r\\n\"\n                code += \"};\\r\\n\"\n                if typedef_style == \"c\":\n                    code += \"typedef enum \" + struct_name + \"Tag \" + struct_name + \"Tag;\\r\\n\"\n\n                # generate union variants\n                for variant in enum:\n                    variant_name = list(variant.keys())[0]\n                    variant_real = list(variant.values())[0]\n                    c_type = \"\"\n                    if \"type\" in variant_real.keys():\n                        variant_type = variant_real[\"type\"]\n                        analyzed_variant_type = analyze_type(variant_type)\n                        variant_prefix = pfx\n                        if is_primitive_arg(analyzed_variant_type[1]):\n                            variant_prefix = \"\"\n\n                        # arrays: convert blah: [BlahType;4] to BlahType blah[4]\n                        is_array = False\n                        if (len(analyzed_variant_type[2]) == 3 and analyzed_variant_type[2].startswith(\";\")):\n                            analyzed_variant_type[2] = analyzed_variant_type[2][1:]\n                            is_array = True\n\n                        if is_array:\n                            c_type = \" \" + variant_prefix + replace_primitive_ctype(analyzed_variant_type[1]).strip()  + \" payload\" + replace_primitive_ctype(analyzed_variant_type[0]).strip() + analyzed_variant_type[2] + \";\"\n                        else:\n                            c_type = \" \" + variant_prefix + replace_primitive_ctype(analyzed_variant_type[1]).strip() + replace_primitive_ctype(analyzed_variant_type[0]).strip() + analyzed_variant_type[2] + \" payload;\"\n\n                    code += \"\\r\\nstruct \" + struct_name + \"Variant_\" + variant_name + \" { \" + struct_name + \"Tag tag;\" + c_type + \" };\"\n                    if typedef_style == \"c\":\n                        code += \"\\r\\ntypedef struct \" + struct_name + \"Variant_\" + variant_name + \" \" + struct_name + \"Variant_\" + variant_name + \";\"\n\n                # generate union\n                code += \"\\r\\nunion \" + struct_name + \" {\\r\\n\"\n                for variant in enum:\n                    variant_name = list(variant.keys())[0]\n                    code += \"    \" + struct_name + \"Variant_\" + variant_name + \" \" + variant_name + \";\\r\\n\"\n                code += \"};\\r\\n\"\n                if not(struct_name in already_forward_declared):\n                    if typedef_style == \"c\":\n                        code += \"typedef union \" + struct_name + \" \" + struct_name + \";\"\n\n                code += \"\\r\\n\"\n\n    return code\n\n# Generate BlahVec_fromConstArray() macros and BlahVec_empty() macros\n# NOTE: This is only in the C API, the C++ API uses consteval\ndef generate_c_union_macros_and_vec_constructors(api_data, structs_map):\n    code = \"\"\n\n    version = list(api_data.keys())[-1]\n    myapi_data = api_data[version]\n\n    for struct_name in structs_map.keys():\n        struct = structs_map[struct_name]\n\n        if not(\"enum\" in struct.keys()):\n            continue\n\n        enum = struct[\"enum\"]\n        if not(enum_is_union(enum)):\n            continue\n\n        # generate macros for creating variants\n        for variant in enum:\n            variant_name = list(variant.keys())[0]\n            if \"type\" in variant[variant_name]:\n                code += \"\\r\\n#define \" + struct_name + \"_\" + variant_name + \"(v) { .\" + variant_name + \" = { .tag = \" + struct_name + \"Tag_\" + variant_name + \", .payload = v } }\"\n            else:\n                code += \"\\r\\n#define \" + struct_name + \"_\" + variant_name + \" { .\" + variant_name + \" = { .tag = \" + struct_name + \"Tag_\" + variant_name + \" } }\"\n\n\n    # generate automatic \"empty\" constructor macros for all types in the \"vec\" module\n    # for struct in api_data[\"0.1.0\"][\"classes\"][\"vec\"]\n    if \"vec\" in myapi_data.keys():\n        for vec_name in myapi_data[\"vec\"][\"classes\"].keys():\n            if vec_name.endswith(\"Vec\"):\n                vec_type = analyze_type(myapi_data[\"vec\"][\"classes\"][vec_name][\"struct_fields\"][0][\"ptr\"][\"type\"])[1]\n                if is_primitive_arg(vec_type):\n                    code += \"\\r\\n\" + replace_primitive_ctype(vec_type).strip() + \" \" +  prefix + vec_name + \"Array[] = {};\"\n                    code += \"\\r\\n#define \" + prefix + vec_name + \"_fromConstArray(v) { .ptr = &v, .len = sizeof(v) / sizeof(\" + replace_primitive_ctype(vec_type).strip() + \"), .cap = sizeof(v) / sizeof(\" + replace_primitive_ctype(vec_type).strip() + \"), .destructor = { .NoDestructor = { .tag = \" + prefix + vec_name + \"DestructorTag_NoDestructor, }, }, }\"\n                else:\n                    code += \"\\r\\n\" + prefix + vec_type + \" \" +  prefix + vec_name + \"Array[] = {};\"\n                    code += \"\\r\\n#define \" + prefix + vec_name + \"_fromConstArray(v) { .ptr = &v, .len = sizeof(v) / sizeof(\" + prefix + vec_name[:-3] + \"), .cap = sizeof(v) / sizeof(\" + prefix + vec_name[:-3] + \"), .destructor = { .NoDestructor = { .tag = \" + prefix + vec_name + \"DestructorTag_NoDestructor, }, }, }\"\n                code += \"\\r\\n#define \" + prefix + vec_name + \"_empty { .ptr = &\" + prefix + vec_name + \"Array, .len = 0, .cap = 0, .destructor = { .NoDestructor = { .tag = \" + prefix + vec_name + \"DestructorTag_NoDestructor, }, }, }\"\n                code += \"\\r\\n\"\n\n    return code\n\n# returns whether an enum is a union\ndef enum_is_union(enum):\n    enum_is_c_enum = True\n    for variant in enum:\n        variant_name = list(variant.keys())[0]\n        variant_real = list(variant.values())[0]\n        if \"type\" in variant_real.keys():\n            enum_is_c_enum = False # enum is tagged union\n    return not(enum_is_c_enum)\n\n# takes the api data and a function callback and returns\n# the C function pointer typedef, i.e.:\n#\n# generate_c_callback_fn_type(api_data, {\"fn_args\": [{\"type\": \"Blah\", \"ref\": \"value\"}], \"returns\": {\"type\": \"Foo\"}}, \"BlahCallback\")\n# => \"typedef Foo (*BlahCallback)(Blah);\"\ndef generate_c_callback_fn_type(api_data, callback_typedef, callback_name,use_prefix=True):\n    # callback_typedef\n\n    return_val = \"void\"\n    pfx = prefix\n    if not(use_prefix):\n        pfx = \"\"\n\n    if \"returns\" in callback_typedef.keys():\n        fn_arg_type = callback_typedef[\"returns\"][\"type\"]\n        search_result = search_for_class_by_class_name(api_data, fn_arg_type)\n        fn_arg_class = fn_arg_type\n\n        if not(is_primitive_arg(fn_arg_type)):\n            if search_result is None:\n                print(\"fn_arg_type \" + fn_arg_type + \" not found!\")\n                raise Exception(\"fn_arg_type \" + fn_arg_type + \" not found!\")\n            fn_arg_class = search_result[1]\n\n        if not(is_primitive_arg(fn_arg_type)):\n            return_val = pfx + fn_arg_class\n        else:\n            return_val = fn_arg_class\n\n    fn_string = \"typedef \" + return_val + \" (*\" + callback_name + \")(\"\n\n    if \"fn_args\" in callback_typedef.keys():\n        fn_args = callback_typedef[\"fn_args\"]\n        fn_arg_idx = 0\n        for fn_arg in fn_args:\n            fn_arg_type = fn_arg[\"type\"]\n            fn_arg_ref = fn_arg[\"ref\"]\n            search_result = search_for_class_by_class_name(api_data, fn_arg_type)\n            fn_arg_class = fn_arg_type\n            if not(is_primitive_arg(fn_arg_type)):\n                if search_result is None:\n                    print(\"fn_arg_type \" + fn_arg_type + \" not found!\")\n                fn_arg_class = search_result[1]\n\n            if not(is_primitive_arg(fn_arg_type)):\n                if fn_arg_ref == \"ref\":\n                    fn_string += pfx + fn_arg_class + \"* const\"\n                elif fn_arg_ref == \"refmut\":\n                    fn_string += pfx + fn_arg_class + \"* restrict\"\n                elif fn_arg_ref == \"value\":\n                    fn_string += pfx + fn_arg_class\n                else:\n                    raise Exception(\"wrong fn_arg_ref on \" + fn_arg_type)\n            else:\n                if fn_arg_ref == \"ref\":\n                    fn_string += \"const \" + replace_primitive_ctype(fn_arg_class) + \"*\"\n                elif fn_arg_ref == \"refmut\":\n                    fn_string += replace_primitive_ctype(fn_arg_class) + \"* restrict\"\n                elif fn_arg_ref == \"value\":\n                    fn_string += replace_primitive_ctype(fn_arg_class)\n                else:\n                    raise Exception(\"wrong fn_arg_ref on \" + fn_arg_type)\n\n            fn_string += \" \"\n            fn_string += chr(fn_arg_idx + 65)\n            fn_string += \", \"\n            fn_arg_idx += 1\n\n        if len(fn_args) > 0:\n            fn_string = fn_string[:-2] # trim last comma\n\n    fn_string += \");\"\n\n    return fn_string\n\n# takes the api data and a function callback and returns\n# the C function pointer typedef, i.e.:\n#\n# generate_c_callback_fn_type(api_data, {\"fn_args\": [{\"type\": \"Blah\", \"ref\": \"value\"}], \"returns\": {\"type\": \"Foo\"}}, \"BlahCallback\")\n# => \"using BlahCallback = Foo(*)(Blah);\"\ndef generate_cpp_callback_fn_type(api_data, callback_typedef, callback_name,use_prefix=True):\n    # callback_typedef\n\n    return_val = \"void\"\n    pfx = prefix\n    if not(use_prefix):\n        pfx = \"\"\n\n    if \"returns\" in callback_typedef.keys():\n        fn_arg_type = callback_typedef[\"returns\"][\"type\"]\n        search_result = search_for_class_by_class_name(api_data, fn_arg_type)\n        fn_arg_class = fn_arg_type\n\n        if not(is_primitive_arg(fn_arg_type)):\n            if search_result is None:\n                print(\"fn_arg_type \" + fn_arg_type + \" not found!\")\n                raise Exception(\"fn_arg_type \" + fn_arg_type + \" not found!\")\n            fn_arg_class = search_result[1]\n\n        if not(is_primitive_arg(fn_arg_type)):\n            return_val = pfx + fn_arg_class\n        else:\n            return_val = fn_arg_class\n\n    fn_string = \"using \" + callback_name + \" = \" + return_val + \"(*)(\"\n\n    if \"fn_args\" in callback_typedef.keys():\n        fn_args = callback_typedef[\"fn_args\"]\n        fn_arg_idx = 0\n        for fn_arg in fn_args:\n            fn_arg_type = fn_arg[\"type\"]\n            fn_arg_ref = fn_arg[\"ref\"]\n            search_result = search_for_class_by_class_name(api_data, fn_arg_type)\n            fn_arg_class = fn_arg_type\n            if not(is_primitive_arg(fn_arg_type)):\n                if search_result is None:\n                    print(\"fn_arg_type \" + fn_arg_type + \" not found!\")\n                fn_arg_class = search_result[1]\n\n            if not(is_primitive_arg(fn_arg_type)):\n                if fn_arg_ref == \"ref\":\n                    fn_string += pfx + fn_arg_class + \"* const\"\n                elif fn_arg_ref == \"refmut\":\n                    fn_string += pfx + fn_arg_class + \"* restrict\"\n                elif fn_arg_ref == \"value\":\n                    fn_string += pfx + fn_arg_class\n                else:\n                    raise Exception(\"wrong fn_arg_ref on \" + fn_arg_type)\n            else:\n                if fn_arg_ref == \"ref\":\n                    fn_string += \"const \" + replace_primitive_ctype(fn_arg_class) + \"*\"\n                elif fn_arg_ref == \"refmut\":\n                    fn_string += replace_primitive_ctype(fn_arg_class) + \"* restrict\"\n                elif fn_arg_ref == \"value\":\n                    fn_string += replace_primitive_ctype(fn_arg_class)\n                else:\n                    raise Exception(\"wrong fn_arg_ref on \" + fn_arg_type)\n\n            # fn_string += \" \"\n            # fn_string += chr(fn_arg_idx + 65)\n            fn_string += \", \"\n            fn_arg_idx += 1\n\n        if len(fn_args) > 0:\n            fn_string = fn_string[:-2] # trim last comma\n\n    fn_string += \");\"\n\n    return fn_string\n\n# returns the C type for the primitive rust type\ndef replace_primitive_ctype(input):\n    # https://locka99.gitbooks.io/a-guide-to-porting-c-to-rust/content/features_of_rust/types.html\n    input = input.strip()\n    # C: #include <stdint.h>\n    # C++: #include <cstdlib>\n    switcher = {\n        \"*const\": \"* \", # TODO: figure out proper c semantics - the VALUE is const, not the POINTER!\n        \"*mut\": \"* restrict \",\n        \"i8\": \"int8_t\",\n        \"u8\": \"uint8_t\",\n        \"i16\": \"int16_t\",\n        \"u16\": \"uint16_t\",\n        \"i32\": \"int32_t\",\n        \"i64\": \"int64_t\",\n        \"isize\": \"ssize_t\",\n        \"u32\": \"uint32_t\",\n        \"u64\": \"uint64_t\",\n        \"f32\": \"float\",\n        \"f64\": \"double\",\n        \"usize\": \"size_t\",\n        \"c_void\": \"void\",\n    }\n    return switcher.get(input, input + \" \")\n\n# Generates the functions to put in the C header file\n# assumes that all structs / data types have already been declared previously\ndef generate_c_functions(api_data,use_prefix=True,typedef_style=\"c\"):\n\n    code = \"\"\n\n    pfx = prefix\n    if not(use_prefix):\n        pfx = \"\"\n\n    function_prefix = \"extern DLLIMPORT \"\n    if typedef_style == \"cpp\":\n        function_prefix = \"\"\n\n    version = list(api_data.keys())[-1]\n    myapi_data = api_data[version]\n\n    code += \"\\r\\n\"\n    code += \"\\r\\n/* FUNCTIONS from azul.dll / libazul.so */\"\n\n    for module_name in myapi_data.keys():\n        module = myapi_data[module_name][\"classes\"]\n        for class_name in module.keys():\n            c = module[class_name]\n\n            c_is_stack_allocated = class_is_stack_allocated(c)\n            class_can_be_copied = \"derive\" in c.keys() and \"Copy\" in c[\"derive\"]\n            class_has_recursive_destructor = has_recursive_destructor(myapi_data, c)\n            class_has_custom_destructor = \"custom_destructor\" in c.keys() and c[\"custom_destructor\"]\n            is_boxed_object = \"is_boxed_object\" in c.keys() and c[\"is_boxed_object\"]\n            treat_external_as_ptr = \"external\" in c.keys() and is_boxed_object\n            class_can_be_cloned = True\n            if \"clone\" in c.keys():\n                class_can_be_cloned = c[\"clone\"]\n\n            class_ptr_name = pfx + class_name\n            print_separator = False\n\n            if \"constructors\" in c.keys():\n                print_separator = True\n                for constructor_name in c[\"constructors\"].keys():\n                    const = c[\"constructors\"][constructor_name]\n                    fn_args = c_fn_args_c_api(const, class_name, class_ptr_name, False)\n                    code += \"\\r\\n\" + function_prefix + class_ptr_name + \" \" + class_ptr_name + \"_\" + snake_case_to_lower_camel(constructor_name) + \"(\" + fn_args + \");\"\n\n            if \"functions\" in c.keys():\n                print_separator = True\n                for function_name in c[\"functions\"].keys():\n                    function = c[\"functions\"][function_name]\n                    fn_args = c_fn_args_c_api(function, class_name, class_ptr_name, True)\n\n                    return_val = \"void\"\n                    if \"returns\" in function.keys():\n                        analyzed_return_type = analyze_type(function[\"returns\"][\"type\"])\n                        if is_primitive_arg(analyzed_return_type[1]):\n                            return_val = replace_primitive_ctype(analyzed_return_type[1])\n                        else:\n                            return_val = pfx + analyzed_return_type[1]\n\n                    code += \"\\r\\n\" + function_prefix + return_val + \" \"+ class_ptr_name + \"_\" + snake_case_to_lower_camel(function_name) + \"(\" + fn_args + \");\"\n\n            if c_is_stack_allocated:\n                if class_can_be_copied:\n                    # intentionally empty, no destructor necessary\n                    pass\n                elif class_has_custom_destructor or treat_external_as_ptr or class_has_recursive_destructor:\n                    print_separator = True\n                    code += \"\\r\\n\" + function_prefix + \"void \" + class_ptr_name + \"_delete(\" + class_ptr_name + \"* restrict instance);\"\n\n                if treat_external_as_ptr and class_can_be_cloned:\n                    print_separator = True\n                    code += \"\\r\\n\" + function_prefix + class_ptr_name + \" \" + class_ptr_name + \"_deepCopy(\" + class_ptr_name + \"* const instance);\"\n\n            # if print_separator:\n            #   code += \"\\r\\n\"\n\n    return code\n\n# Generates all constants\ndef generate_c_constants(api_data):\n\n    version = list(api_data.keys())[-1]\n    myapi_data = api_data[version]\n\n    code = \"\"\n    code += \"\\r\\n\"\n    code += \"\\r\\n/* CONSTANTS */\\r\\n\\r\\n\"\n\n    for module_name in myapi_data.keys():\n        module = myapi_data[module_name][\"classes\"]\n        for class_name in module.keys():\n            c = module[class_name]\n\n            if \"constants\" in c.keys():\n                for constant in c[\"constants\"]:\n                    constant_name = list(constant.keys())[0]\n                    constant_type = constant[constant_name][\"type\"]\n                    constant_value = constant[constant_name][\"value\"]\n                    code += \"#define \" + prefix + class_name + \"_\" + constant_name + \" \" + constant_value + \"\\r\\n\"\n                code += \"\\r\\n\"\n\n    return code\n\n# Generates extra functions for C to destructure tagged union enums\ndef generate_c_extra_functions(api_data):\n\n    version = list(api_data.keys())[-1]\n    myapi_data = api_data[version]\n\n    code = \"\"\n\n    for module_name in myapi_data.keys():\n        module = myapi_data[module_name][\"classes\"]\n        for class_name in module.keys():\n            c = module[class_name]\n            e = False\n\n            if \"enum_fields\" in c.keys():\n                if enum_is_union(c[\"enum_fields\"]):\n                    e = True\n\n            if not(e):\n                continue\n\n            # generate _matchRef and _matchMut functions for each variant in the enum\n            for variant in c[\"enum_fields\"]:\n                variant_name = list(variant.keys())[0]\n                if \"type\" in variant[variant_name]:\n                    type_name = variant[variant_name][\"type\"]\n\n                    code += \"bool \" + prefix + class_name + \"_matchRef\" + variant_name + \"(const \" + prefix + class_name + \"* value, const \" + prefix + type_name + \"** restrict out) {\\r\\n\"\n                    code += \"    const \" + prefix + class_name + \"Variant_\" + variant_name + \"* casted = (const \" + prefix + class_name +\"Variant_\" + variant_name + \"*)value;\\r\\n\"\n                    code += \"    bool valid = casted->tag == \" + prefix + class_name + \"Tag_\" + variant_name + \";\\r\\n\"\n                    code += \"    if (valid) { *out = &casted->payload; } else { *out = 0; }\\r\\n\"\n                    code += \"    return valid;\\r\\n\"\n                    code += \"}\\r\\n\\r\\n\"\n\n                    code += \"bool \" + prefix + class_name + \"_matchMut\" + variant_name + \"(\" + prefix + class_name + \"* restrict value, \" + prefix + type_name + \"* restrict * restrict out) {\\r\\n\"\n                    code += \"    \" + prefix + class_name + \"Variant_\" + variant_name + \"* restrict casted = (\" + prefix + class_name +\"Variant_\" + variant_name + \"* restrict)value;\\r\\n\"\n                    code += \"    bool valid = casted->tag == \" + prefix + class_name + \"Tag_\" + variant_name + \";\\r\\n\"\n                    code += \"    if (valid) { *out = &casted->payload; } else { *out = 0; }\\r\\n\"\n                    code += \"    return valid;\\r\\n\"\n                    code += \"}\\r\\n\\r\\n\"\n\n    return code\n\ndef generate_c_api(api_data, structs_map):\n    code = \"\"\n\n    version = list(api_data.keys())[-1]\n    myapi_data = api_data[version]\n\n    structs_map = sort_structs_map(myapi_data, structs_map)\n    extra_forward_delcarations = structs_map[2]\n    forward_delcarations = structs_map[1]\n    structs_map = structs_map[0]\n\n    code += \"#ifndef AZUL_H\\r\\n\"\n    code += \"#define AZUL_H\\r\\n\"\n    code += \"\\r\\n\"\n    code += \"#include <stdbool.h>\\r\\n\" # bool\n    code += \"#include <stdint.h>\\r\\n\" # uint8_t, ...\n    code += \"#include <stddef.h>\\r\\n\" # size_t\n    code += \"\\r\\n\"\n    code += \"/* C89 port for \\\"restrict\\\" keyword from C99 */\\r\\n\"\n    code += \"#if __STDC__ != 1\\r\\n\"\n    code += \"#    define restrict __restrict\\r\\n\"\n    code += \"#else\\r\\n\"\n    code += \"#    ifndef __STDC_VERSION__\\r\\n\"\n    code += \"#        define restrict __restrict\\r\\n\"\n    code += \"#    else\\r\\n\"\n    code += \"#        if __STDC_VERSION__ < 199901L\\r\\n\"\n    code += \"#            define restrict __restrict\\r\\n\"\n    code += \"#        endif\\r\\n\"\n    code += \"#    endif\\r\\n\"\n    code += \"#endif\\r\\n\"\n    code += \"\\r\\n\"\n    code += \"/* cross-platform define for ssize_t (signed size_t) */\\r\\n\"\n    code += \"#ifdef _WIN32\\r\\n\"\n    code += \"    #include <windows.h>\\r\\n\"\n    code += \"    #ifdef _MSC_VER\\r\\n\"\n    code += \"        typedef SSIZE_T ssize_t;\\r\\n\"\n    code += \"    #endif\\r\\n\"\n    code += \"#else\\r\\n\"\n    code += \"    #include <sys/types.h>\\r\\n\"\n    code += \"#endif\\r\\n\"\n    code += \"\\r\\n\"\n    code += \"/* cross-platform define for __declspec(dllimport) */\\r\\n\"\n    code += \"#ifdef _WIN32\\r\\n\"\n    code += \"    #define DLLIMPORT __declspec(dllimport)\\r\\n\"\n    code += \"#else\\r\\n\"\n    code += \"    #define DLLIMPORT\\r\\n\"\n    code += \"#endif\\r\\n\"\n    code += \"\\r\\n\"\n\n    code += generate_c_structs(myapi_data, structs_map, forward_delcarations, extra_forward_delcarations)\n    code += generate_c_union_macros_and_vec_constructors(api_data, structs_map)\n    code += generate_c_functions(api_data)\n    code += generate_c_constants(api_data)\n    code += generate_c_extra_functions(api_data)\n\n    code += \"\\r\\n\"\n    code += read_file(root_folder + \"/api/_patches/c/patch.h\")\n    code += \"\\r\\n\"\n    code += \"\\r\\n#endif /* AZUL_H */\\r\\n\"\n    return code\n\ndef generate_cpp_api(api_data, structs_map):\n    code = \"\"\n\n    version = list(api_data.keys())[-1]\n    myapi_data = api_data[version]\n\n    structs_map = sort_structs_map(myapi_data, structs_map)\n    extra_forward_delcarations = structs_map[2]\n    forward_delcarations = structs_map[1]\n    structs_map = structs_map[0]\n\n    code += \"#ifndef AZUL_H\\r\\n\"\n    code += \"#define AZUL_H\\r\\n\"\n    code += \"\\r\\n\"\n    code += \"namespace dll {\\r\\n\"\n    code += \"\\r\\n\"\n    code += \"    #include <cstdint>\\r\\n\" # uint8_t, ...\n    code += \"    #include <cstddef>\\r\\n\" # size_t\n\n    # strip the prefix from the struct entries\n    # (not necessary for the C++ API, only for function names)\n    # this could've been done cleaner\n    stripped = strip_all_prefixes(structs_map, forward_delcarations, extra_forward_delcarations)\n    structs_map = stripped[0]\n    forward_delcarations = stripped[1]\n    extra_forward_delcarations = stripped[2]\n\n    # add structs, no prefix, use C++ style function pointer typedefs\n    c_struct_code = generate_c_structs(myapi_data, structs_map, forward_delcarations, extra_forward_delcarations, use_prefix=False,typedef_style=\"cpp\")\n    for line in c_struct_code.splitlines():\n        code += \"    \" + line + \"\\r\\n\"\n    code += \"\\r\\n\"\n\n    code += \"    extern \\\"C\\\" {\"\n    c_functions_code = generate_c_functions(api_data,use_prefix=False,typedef_style=\"cpp\")\n    for line in c_functions_code.splitlines():\n        code += \"        \" + line + \"\\r\\n\"\n    code += \"\\r\\n\"\n    code += \"    } /* extern \\\"C\\\" */\\r\\n\"\n    code += \"\\r\\n\"\n\n    code += \"} /* namespace */ \\r\\n\"\n\n\n    code += \"\\r\\n\"\n    code += \"\\r\\n#endif /* AZUL_H */\\r\\n\"\n\n    return code\n\ndef strip_all_prefixes(structs_map, forward_delcarations, extra_forward_delcarations):\n\n    # strip structs_map\n    new_structs_map = OrderedDict({})\n    for key in structs_map.keys():\n        value = structs_map[key]\n        key = key[len(prefix):]\n        new_structs_map[key] = value\n\n    # strip forward_delcarations\n    new_forward_delcarations = OrderedDict({})\n    for key in forward_delcarations.keys():\n        value = forward_delcarations[key]\n        key = key[len(prefix):]\n        new_forward_delcarations[key] = value\n\n    new_extra_forward_delcarations = OrderedDict({})\n    for key in extra_forward_delcarations.keys():\n        value = extra_forward_delcarations[key]\n        key = key[len(prefix):]\n        new_extra_forward_delcarations[key] = value\n\n    return [new_structs_map, new_forward_delcarations, new_extra_forward_delcarations]\n\n# generate a test function that asserts that the struct layout in the DLL\n# is the same as in the generated bindings\ndef generate_size_test(api_data, structs_map):\n\n    generated_structs = generate_structs(api_data, structs_map, False)\n\n    test_str = \"\"\n\n    test_str += \"#[cfg(all(test, not(feature = \\\"rlib\\\")))]\\r\\n\"\n    test_str += \"#[allow(dead_code)]\\r\\n\"\n    test_str += \"mod test_sizes {\\r\\n\"\n\n    test_str += read_file(root_folder + \"/api/_patches/azul-dll/test-sizes.rs\")\n\n    test_str += generated_structs\n    test_str += \"    use core::ffi::c_void;\\r\\n\"\n    test_str += \"    use azul_impl::css::*;\\r\\n\"\n    test_str += \"\\r\\n\"\n\n    test_str += \"    #[test]\\r\\n\"\n    test_str += \"    fn test_size() {\\r\\n\"\n    test_str += \"         use core::alloc::Layout;\\r\\n\"\n\n    for struct_name in structs_map.keys():\n        struct = structs_map[struct_name]\n        if \"external\" in struct.keys():\n            external_path = struct[\"external\"]\n            test_str += \"        assert_eq!((Layout::new::<\" + external_path + \">(), \\\"\" + struct_name +  \"\\\"), (Layout::new::<\" + struct_name + \">(), \\\"\" + struct_name +  \"\\\"));\\r\\n\"\n\n    test_str += \"    }\\r\\n\"\n    test_str += \"}\\r\\n\"\n    return test_str\n\n# ---------------------------\n\ndef verify_clang_is_installed():\n    if not(os.environ['CC'] == 'clang-cl') or not(os.environ['CXX'] == 'clang-cl'):\n        raise Exception(\"environment variables CC and CXX have to be set to 'clang-cl' before building! Make sure LLVM and clang is installed!\")\n\ndef cleanup_start():\n    # TODO: remove entire /api folder and re-generate it?\n    files = [\"azul.dll\", \"azul.sh\", \"azul.dylib\"]\n\n    for f in files:\n        if os.path.exists(root_folder + \"/target/debug/examples/\" + f):\n            remove_path(root_folder + \"/target/debug/examples/\" + f)\n\n        if os.path.exists(root_folder + \"/target/release/examples/\" + f):\n            remove_path(root_folder + \"/target/release/examples/\" + f)\n\n        if os.path.exists(root_folder + \"/target/debug/\" + f):\n            remove_path(root_folder + \"/target/debug/\" + f)\n\n        if os.path.exists(root_folder + \"/target/release/\" + f):\n            remove_path(root_folder + \"/target/release/\" + f)\n\n    # if (len(os.environ.get('AZUL_INSTALL_DIR', '')) > 0):\n    #     if os.path.exists(os.environ['AZUL_INSTALL_DIR']):\n    #         remove_path(os.environ['AZUL_INSTALL_DIR'])\n\ndef generate_api():\n    apiData = read_api_file(root_folder + \"/api.json\")\n    rust_dll_result = generate_rust_dll(apiData)\n\n    structs_map = rust_dll_result[1].copy()\n    functions_map = rust_dll_result[2]\n    forward_declarations = rust_dll_result[3]\n\n    write_file(rust_dll_result[0], root_folder + \"/azul-dll/src/lib.rs\")\n    write_file(generate_rust_api(apiData, structs_map, functions_map.copy()), root_folder + \"/api/rust/src/lib.rs\")\n    write_file(generate_c_api(apiData, structs_map), root_folder + \"/api/c/azul.h\")\n    write_file(generate_python_api(apiData, structs_map, functions_map.copy()), root_folder + \"/azul-dll/src/python.rs\")\n    write_file(generate_cpp_api(apiData, structs_map), root_folder + \"/api/cpp/azul.hpp\")\n\n# Build the library with release settings\ndef build_dll():\n\n    # Make a copy of the current environment\n    # d = dict(os.environ)\n    # d['CC'] = 'clang'\n    # d['CXX'] = 'clang'\n    # cwd = root_folder + \"/azul-dll\"\n\n    if platform == \"linux\" or platform == \"linux2\": # TODO: freebsd?\n        #             rustup toolchain install stable-x86_64-unknown-linux-gnu  &&\n        #             rustup override set stable-x86_64-unknown-linux-gnu  &&\n        os.system(\"\"\"\n            cd azul-dll  &&\n            RUSTLFLAGS=\"-Ctarget-feature=-crt-static\" cargo build --lib --target=x86_64-unknown-linux-gnu --all-features --release  &&\n            cd ..\n        \"\"\")\n    elif platform == \"darwin\":\n        os.system(\"\"\"\n            cd azul-dll\n            rustup toolchain install stable-x86_64-unknown-darwin-gnu\n            rustup override set stable-x86_64-unknown-darwin-gnu\n            rustup override set stable-x86_64-unknown-darwin-gnu\n            RUSTFLAGS=\"-Ctarget-feature=-crt-static\" cargo build --lib --target=x86_64-unknown-darwin-gnu --all-features --release\n            cd ..\n        \"\"\")\n    elif platform == \"win32\":\n        os.system(\"\"\"\n            cd azul-dll\n            rustup toolchain install stable-x86_64-pc-windows-msvc\n            rustup override set stable-x86_64-pc-windows-msvc\n            RUSTFLAGS=\"-Ctarget-feature=-crt-static\" cargo build --lib --target=x86_64-pc-windows-msvc --all-features --release\n            cd ..\n        \"\"\")\n    else:\n        raise Exception(\"unsupported platform: \" + platform)\n\ndef run_size_test():\n    d = dict(os.environ)   # Make a copy of the current environment\n    d['CC'] = 'clang-cl'\n    d['CXX'] = 'clang-cl'\n    d['RUSTFLAGS'] = '-C target-feature=+crt-static'\n    cwd = root_folder + \"/azul-dll\"\n    subprocess.Popen(['cargo', 'test', '--all-features', '--release'], env=d, cwd=cwd).wait()\n\ndef build_examples():\n    cwd = root_folder + \"/examples/rust\"\n    examples = [\n        # \"async\",\n        # \"calculator\",\n        # \"components\",\n        # \"game_of_life\",\n        # \"headless\",\n        # \"hello_world\",\n        # \"layout_tests\",\n        # \"list\",\n        # \"opengl\",\n        \"public\",\n        # \"heap_corruption_test\",\n        # \"slider\",\n        # \"svg\",\n        # \"table\",\n        # \"text_input\",\n    ]\n    for e in examples:\n        subprocess.Popen(['cargo', 'run', '--release', '--bin', e], cwd=cwd).wait()\n    pass\n\ndef release_on_cargo():\n    # Publish packages in the correct order of dedpendencies\n    os.system(\"cd \\\"\" + root_folder + \"/azul-css\\\" && cargo check && cargo test && cargo publish\")\n    os.system(\"cd \\\"\" + root_folder + \"/azul-css-parser\\\" && cargo check && cargo test && cargo publish\")\n    os.system(\"cd \\\"\" + root_folder + \"/azul-core\\\" && cargo check && cargo test && cargo publish\")\n    os.system(\"cd \\\"\" + root_folder + \"/azul-text-layout\\\" && cargo check && cargo test && cargo publish\")\n    os.system(\"cd \\\"\" + root_folder + \"/azulc\\\" && cargo check && cargo test && cargo publish\")\n    os.system(\"cd \\\"\" + root_folder + \"/azul-layout\\\" && cargo check && cargo test && cargo publish\")\n    os.system(\"cd \\\"\" + root_folder + \"/azul-desktop\\\" && cargo check && cargo test && cargo publish\")\n    os.system(\"cd \\\"\" + root_folder + \"/azul-web\\\" && cargo check && cargo test && cargo publish\")\n    os.system(\"cd \\\"\" + root_folder + \"/azul-dll\\\" && cargo check && cargo test && cargo publish\")\n    os.system(\"cd \\\"\" + root_folder + \"/azul\\\" && cargo check && cargo test && cargo publish\")\n    os.system(\"cd \\\"\" + root_folder + \"/azul-widgets\\\" && cargo check && cargo test && cargo publish\")\n\ndef make_debian_release_package():\n    # copy the files such that file is Debian deploy-able\n    pass\n\ndef make_release_zip_files():\n    # Generate the [arch]-*x86_64, [arch]-*i686 etc. ZIP files\n    pass\n\ndef replace_split(d, search, tag):\n\n    newdoc = \"\"\n\n    split = d.split(search)\n\n    index = 0\n    while index < len(split):\n        if index % 2 == 0:\n            newdoc += split[index]\n        else:\n            newdoc += \"<\" + tag + \">\" + split[index] + \"</\" + tag + \">\"\n        index += 1\n\n    return newdoc\n\ndef format_doc(docstring):\n    newdoc = docstring\n    newdoc = newdoc.replace(\"<\", \"&lt;\")\n    newdoc = newdoc.replace(\">\", \"&gt;\")\n    newdoc = newdoc.replace(\"```rust\", \"<code>\")\n    newdoc = newdoc.replace(\"```\", \"</code>\")\n    newdoc = replace_split(newdoc, \"`\", \"code\")\n    newdoc = replace_split(newdoc, \"**\", \"strong\")\n    newdoc = newdoc.replace(\"\\r\\n\", \"<br/>\")\n    return newdoc\n\ndef render_example_description(descr, replace=True):\n    descr = descr.strip()\n    if replace:\n        descr = descr.replace(\"\\\"\", \"&quot;\")\n        descr = descr.replace(\"\\n\", \"\")\n        descr = descr.replace(\"\\r\\n\", \"\")\n        descr = descr.replace(\"#\", \"&pound;\")\n    return descr\n\ndef render_example_code(jsex, replace=True):\n    jsex = jsex.replace(\">\", \"&gt;\")\n    jsex = jsex.replace(\"<\", \"&lt;\")\n    if replace:\n        # jsex = jsex.replace(\"#\", \"%23\")\n        jsex = jsex.replace(\"\\\"\", \"&quot;\")\n        jsex = jsex.replace(\"\\n\", \"<br/>\")\n        jsex = jsex.replace(\"\\r\\n\", \"<br/>\")\n        jsex = jsex.replace(\" \", \"&nbsp;\")\n    jsex = jsex.strip()\n    return jsex\n\ndef generate_docs():\n    apiData = read_api_file(root_folder + \"/api.json\")\n    html_template = read_file(root_folder + \"/api/_patches/html/api.template.html\")\n    html_template = html_template.replace(\"$$ROOT_RELATIVE$$\", html_root)\n\n    if os.path.exists(root_folder + \"/target/html\"):\n        remove_path(root_folder + \"/target/html\")\n\n    if not(os.path.exists(root_folder + \"/target\")):\n        create_folder(root_folder + \"/target\")\n\n    all_versions = list(apiData.keys())\n    current_version = all_versions[-1]\n\n    create_folder(root_folder + \"/target/html\")\n    create_folder(root_folder + \"/target/html/api\")\n    create_folder(root_folder + \"/target/html/guide\")\n    for version in all_versions:\n        create_folder(root_folder + \"/target/html/guide/\" + version)\n    create_folder(root_folder + \"/target/html/release\")\n    create_folder(root_folder + \"/target/html/fonts\")\n    create_folder(root_folder + \"/target/html/images\")\n\n    # copy files\n    # copy_file(, )\n    copy_file(root_folder + \"/api/_patches/html/logo.svg\", root_folder + \"/target/html/logo.svg\")\n    copy_file(root_folder + \"/api/_patches/html/fleur-de-lis.svg\", root_folder + \"/target/html/images/fleur-de-lis.svg\")\n    copy_file(root_folder + \"/api/_patches/html/main.css\", root_folder + \"/target/html/main.css\")\n    copy_file(root_folder + \"/examples/assets/fonts/Morris Jenson Initialen.ttf\", root_folder + \"/target/html/fonts/Morris Jenson Initialen.ttf\")\n    copy_file(root_folder + \"/examples/assets/fonts/SourceSerifPro-Regular.ttf\", root_folder + \"/target/html/fonts/SourceSerifPro-Regular.ttf\")\n\n    index_template = read_file(root_folder + \"/api/_patches/html/index.template.html\")\n    index_section_template = read_file(root_folder + \"/api/_patches/html/index.section.template.html\")\n    index_section_template = index_section_template.replace(\"$$ROOT_RELATIVE$$\", html_root)\n    index_template = index_template.replace(\"$$ROOT_RELATIVE$$\", html_root)\n    index_examples = [\n        {\n            \"id\": \"widgets\",\n            \"description\": render_example_description(\"\"\"\n                Objects are composed into a DOM hierarchy which\n                only gets re-rendered when a callback returns\n                <code>RefreshDom</code>. The resulting DOM tree\n                can be styled with CSS.\n            \"\"\"),\n            \"screenshot_path\": root_folder + \"/examples/assets/screenshots/helloworld.png\",\n            \"screenshot_url\": html_root + \"/images/helloworld.png\",\n            \"cpu\": \"CPU: 0%\",\n            \"memory\": \"Memory: 23MB\",\n            \"image_alt\": \"Rendering a simple UI using the Azul GUI toolkit\",\n            \"code:c\": render_example_code(read_file(root_folder + \"/examples/c/hello-world.c\")),\n            \"code:cpp\": render_example_code(read_file(root_folder + \"/examples/cpp/hello-world.cpp\")),\n            \"code:rust\": render_example_code(read_file(root_folder + \"/examples/rust/hello-world.rs\")),\n            \"code:python\": render_example_code(read_file(root_folder + \"/examples/python/hello-world.py\")),\n        },\n        {\n            \"id\": \"helloworld\",\n            \"description\": render_example_description(\"\"\"\n                The UI structure is created via composition instead of inheritance.\n                Callbacks can modify the application data and then tell the framework to\n                reconstruct the entire UI again - but only if it's necessary, not on every frame.\n            \"\"\"),\n            \"screenshot_path\": root_folder + \"/examples/assets/screenshots/helloworld.png\",\n            \"screenshot_url\": html_root + \"/images/helloworld.png\",\n            \"cpu\": \"CPU: 0%\",\n            \"memory\": \"Memory: 23MB\",\n            \"image_alt\": \"Rendering a simple UI using the Azul GUI toolkit\",\n            \"code:c\": render_example_code(read_file(root_folder + \"/examples/c/hello-world.c\")),\n            \"code:cpp\": render_example_code(read_file(root_folder + \"/examples/cpp/hello-world.cpp\")),\n            \"code:rust\": render_example_code(read_file(root_folder + \"/examples/rust/hello-world.rs\")),\n            \"code:python\": render_example_code(read_file(root_folder + \"/examples/python/hello-world.py\")),\n        },\n        {\n            \"id\": \"table\",\n            \"description\": render_example_description(\"\"\"\n                Azul supports lazy loading and can render infinitely large datasets\n                (such as a table, shown here) while using a comparably small amount of memory.\n                DOM nodes share their CSS style efficiently via pointers,\n                so that properties do not get duplicated in memory.\n            \"\"\"),\n            \"screenshot_path\": root_folder + \"/examples/assets/screenshots/table.png\",\n            \"screenshot_url\": html_root + \"/images/table.png\",\n            \"cpu\": \"CPU: 0%\",\n            \"memory\": \"Memory: 23MB\",\n            \"image_alt\": \"Rendering a table using the Azul GUI toolkit\",\n            \"code:c\": render_example_code(read_file(root_folder + \"/examples/c/table.c\")),\n            \"code:cpp\": render_example_code(read_file(root_folder + \"/examples/cpp/table.cpp\")),\n            \"code:rust\": render_example_code(read_file(root_folder + \"/examples/rust/table.rs\")),\n            \"code:python\": render_example_code(read_file(root_folder + \"/examples/python/table.py\")),\n        },\n        {\n            \"id\": \"svg\",\n            \"description\": render_example_description(\"\"\"\n                Azul contains a SVG1.1 compatible SVG renderer as well as functions\n                for tesselating and drawing shapes to OpenGL textures. Images / textures\n                can be composited as clip masks and even be animated.\n            \"\"\"),\n            \"screenshot_path\": root_folder + \"/examples/assets/screenshots/svg.png\",\n            \"screenshot_url\": html_root + \"/images/svg.png\",\n            \"cpu\": \"CPU: 0%\",\n            \"memory\": \"Memory: 23MB\",\n            \"image_alt\": \"Rendering a SVG file using the Azul GUI toolkit\",\n            \"code:c\": render_example_code(read_file(root_folder + \"/examples/c/svg.c\")),\n            \"code:cpp\": render_example_code(read_file(root_folder + \"/examples/cpp/svg.cpp\")),\n            \"code:rust\": render_example_code(read_file(root_folder + \"/examples/rust/svg.rs\")),\n            \"code:python\": render_example_code(read_file(root_folder + \"/examples/python/svg.py\")),\n        },\n        {\n            \"id\": \"calculator\",\n            \"description\": render_example_description(\"\"\"\n                Composing larger UIs is just a matter of proper function composition.\n                Widget-specific data is either stored on the callback object itself -\n                or on the DOM node, similar to a HTML 'dataset' attribute.\n            \"\"\"),\n            \"screenshot_path\": root_folder + \"/examples/assets/screenshots/calculator.png\",\n            \"screenshot_url\": html_root + \"/images/calculator.png\",\n            \"cpu\": \"CPU: 0%\",\n            \"memory\": \"Memory: 23MB\",\n            \"image_alt\": \"Composing widgets via functions in the Azul GUI toolkit\",\n            \"code:c\": render_example_code(read_file(root_folder + \"/examples/c/calculator.c\")),\n            \"code:cpp\": render_example_code(read_file(root_folder + \"/examples/cpp/calculator.cpp\")),\n            \"code:rust\": render_example_code(read_file(root_folder + \"/examples/rust/calculator.rs\")),\n            \"code:python\": render_example_code(read_file(root_folder + \"/examples/python/calculator.py\")),\n        },\n        {\n            \"id\": \"xml\",\n            \"description\": render_example_description(\"\"\"\n                Azul contains an XML-based UI description which can be instantly\n                hot-reloaded from a file. After prototyping the UI in XML / CSS,\n                you can compile the code to a native language in order to get both\n                fast design iteration times as well as performant code.\n            \"\"\"),\n            \"screenshot_path\": root_folder + \"/examples/assets/screenshots/xml.png\",\n            \"screenshot_url\": html_root + \"/images/xml.png\",\n            \"cpu\": \"Memory: 0%\",\n            \"memory\": \"Memory: 23MB\",\n            \"image_alt\": \"XML UI hot-reloading for fast prototyping\",\n            \"code:c\": render_example_code(read_file(root_folder + \"/examples/c/xml.c\")),\n            \"code:cpp\": render_example_code(read_file(root_folder + \"/examples/cpp/xml.cpp\")),\n            \"code:rust\": render_example_code(read_file(root_folder + \"/examples/rust/xml.rs\")),\n            \"code:python\": render_example_code(read_file(root_folder + \"/examples/python/xml.py\")),\n        }\n    ]\n\n    example_sections = \"\"\n    for ex_id, ex in enumerate(index_examples):\n        copy_file(ex[\"screenshot_path\"], root_folder + \"/target/html/images/\" + ex[\"id\"] + \".png\")\n        example_section = index_section_template.replace(\"$$EXAMPLE_CODE$$\", index_examples[ex_id][\"code:python\"])\n        example_section = example_section.replace(\"$$EXAMPLE_IMAGE_SOURCE$$\", index_examples[ex_id][\"screenshot_url\"])\n        example_section = example_section.replace(\"$$EXAMPLE_IMAGE_ALT$$\", index_examples[ex_id][\"image_alt\"])\n        example_section = example_section.replace(\"$$EXAMPLE_STATS_MEMORY$$\", index_examples[ex_id][\"memory\"])\n        example_section = example_section.replace(\"$$EXAMPLE_STATS_CPU$$\", index_examples[ex_id][\"cpu\"])\n        example_section = example_section.replace(\"$$EXAMPLE_DESCRIPTION$$\", index_examples[ex_id][\"description\"])\n        example_section = example_section.replace(\"$$EXAMPLE_ID$$\", str(ex_id))\n        example_sections += example_section\n\n    index_html = index_template.replace(\"$$JAVASCRIPT_EXAMPLES$$\", json.dumps(index_examples))\n    index_html = index_html.replace(\"$$INDEX_SECTION_EXAMPLES$$\", example_sections)\n\n    write_file(index_html, root_folder + \"/target/html/index.html\")\n\n    guide_sidebar = \"<ul>\"\n    guide_sidebar_nested = \"<ul>\"\n    guides_rendered = []\n    for entry in sorted(os.scandir(root_folder + \"/api/_patches/html/guide\"),key=lambda x: x.name):\n        if entry.path.endswith(\".md\") and entry.is_file():\n            entry_name = entry.name[3:-3]\n            html_path_name = entry_name.replace(\" \", \"\")\n            guide_sidebar += \"<li><a href=\\\"\" + html_root + \"/guide/\" + current_version + \"/\" + html_path_name + \"\\\">\" + entry_name + \"</a></li>\"\n            guide_sidebar_nested += \"<li><a href=\\\"./\" + html_path_name + \"\\\">\" + entry_name + \"</a></li>\"\n            guides_rendered.append(tuple((entry_name, read_file(entry.path))))\n    guide_sidebar += \"</ul>\"\n    guide_sidebar_nested += \"</ul>\"\n\n    guide_combined_page = html_template.replace(\"$$ROOT_RELATIVE$$\", html_root)\n    guide_combined_page = guide_combined_page.replace(\"$$SIDEBAR_GUIDE$$\", \"\")\n    guide_combined_page = guide_combined_page.replace(\"$$SIDEBAR_RELEASES$$\", \"\")\n    guide_combined_page = guide_combined_page.replace(\"$$SIDEBAR_API$$\", \"\")\n    guide_combined_page = guide_combined_page.replace(\"$$TITLE$$\", \"User guide\")\n    guide_combined_page = guide_combined_page.replace(\"$$CONTENT$$\", guide_sidebar)\n    write_file(guide_combined_page, root_folder + \"/target/html/guide.html\")\n\n    for guide in guides_rendered:\n        entry_name = guide[0]\n        html_path_name = entry_name.replace(\" \", \"\")\n        guide_content = guide[1]\n        guide_content = guide_content.replace(\"$$ROOT_RELATIVE$$\", html_root)\n        formatted_guide = html_template.replace(\"$$ROOT_RELATIVE$$\", html_root)\n        formatted_guide = formatted_guide.replace(\"$$SIDEBAR_GUIDE$$\", \"\")\n        formatted_guide = formatted_guide.replace(\"$$SIDEBAR_RELEASES$$\", \"\")\n        formatted_guide = formatted_guide.replace(\"$$SIDEBAR_API$$\", \"\")\n        formatted_guide = formatted_guide.replace(\"$$TITLE$$\", entry_name)\n        formatted_guide = formatted_guide.replace(\"$$CONTENT$$\", guide_content)\n        extra_css = \"\"\"\n        main > div { max-width: 80ch; }\n        main > div > p { margin-left: 10px; margin-top: 10px; }\n        main p, main a, main strong { font-family: \"Source Serif Pro\", serif; font-size: 16px; }\n        main > div > h3 { margin: 10px; }\n        main .warning h4 { margin-bottom: 10px; }\n        main .warning {\n            padding: 10px;\n            border-radius: 5px;\n            border: 1px dashed #facb26;\n            margin: 10px;\n            background: #fff8be;\n            color: #222;\n            box-shadow: 0px 0px 20px #facb2655;\n        }\n        main code.expand { display: block; margin-top: 20px; padding: 10px; border-radius: 5px; }\n        \"\"\"\n        formatted_guide = formatted_guide.replace(\"/*$$_EXTRA_CSS$$*/\", extra_css)\n        write_file(formatted_guide, root_folder + \"/target/html/guide/\" + current_version + \"/\" + html_path_name + \".html\")\n\n    releases_string = \"<ul>\"\n\n    for version in all_versions:\n        create_folder(root_folder + \"/target/html/release/\" + version)\n        create_folder(root_folder + \"/target/html/release/\" + version + \"/files\")\n\n    for version in all_versions:\n        releases_string += \"<li><a href=\\\"\" + html_root + \"/release/\" + version + \"\\\">\" + version + \"</a></li>\"\n\n    releases_string += \"</ul>\"\n\n    releases_combined_page = html_template.replace(\"$$ROOT_RELATIVE$$\", html_root)\n    releases_combined_page = releases_combined_page.replace(\"$$SIDEBAR_GUIDE$$\", \"\")\n    releases_combined_page = releases_combined_page.replace(\"$$SIDEBAR_RELEASES$$\", \"\")\n    releases_combined_page = releases_combined_page.replace(\"$$SIDEBAR_API$$\", \"\")\n    releases_combined_page = releases_combined_page.replace(\"$$TITLE$$\", \"Choose release version\")\n    releases_combined_page = releases_combined_page.replace(\"$$CONTENT$$\", releases_string)\n    write_file(releases_combined_page, root_folder + \"/target/html/releases.html\")\n\n    for version in all_versions:\n        release_announcement = read_file(root_folder + \"/api/_patches/html/release/\" + version + \".html\")\n        release_page = html_template.replace(\"$$ROOT_RELATIVE$$\", html_root)\n        release_page = release_page.replace(\"$$SIDEBAR_GUIDE$$\", \"\")\n        release_page = release_page.replace(\"$$SIDEBAR_RELEASES$$\", \"\")\n        release_page = release_page.replace(\"$$SIDEBAR_API$$\", \"\")\n        release_page = release_page.replace(\"$$TITLE$$\", \"Release notes - Azul GUI v\" + version)\n        release_page = release_page.replace(\"$$CONTENT$$\", release_announcement)\n        write_file(release_page, root_folder + \"/target/html/release/\" + version + \".html\")\n\n    api_sidebar_string = \"<ul>\"\n    for version in all_versions:\n        api_sidebar_string += \"<li><a href=\\\"\" + html_root + \"/api/\" + version + \"\\\">\" + version + \"</a></li>\"\n    api_sidebar_string += \"</ul>\"\n\n    for version in all_versions:\n\n        api_page_contents = \"\"\n        api_header = read_file(root_folder + \"/api/_patches/html/api-header.html\")\n        api_header = api_header.replace(\"$$ROOT_RELATIVE$$\", html_root)\n        api_page_contents += api_header\n        api_page_contents += \"<ul>\"\n\n        if \"doc\" in apiData[version].keys():\n            api_page_contents += \"<p class=\\\"version doc\\\">\" + format_doc(apiData[version][\"doc\"]) + \"</p>\"\n\n        for module_name in apiData[version].keys():\n\n            api_page_contents += \"<li class=\\\"m\\\" id=\\\"m.\" + module_name + \"\\\">\"\n\n            module = apiData[version][module_name]\n\n            if \"doc\" in module.keys():\n                api_page_contents += \"<p class=\\\"m doc\\\">\" + format_doc(module[\"doc\"]) + \"</p>\"\n\n            api_page_contents += \"<h3>mod <a href=\\\"#m.\" + module_name + \"\\\">\" + module_name + \"</a>:</h3>\"\n\n            api_page_contents += \"<ul>\"\n\n            for class_name in module[\"classes\"].keys():\n                c = module[\"classes\"][class_name]\n                is_boxed_object = \"is_boxed_object\" in c.keys() and c[\"is_boxed_object\"]\n                treat_external_as_ptr = \"external\" in c.keys() and is_boxed_object\n                class_has_custom_destructor = \"custom_destructor\" in c.keys() and c[\"custom_destructor\"]\n                class_has_recursive_destructor = has_recursive_destructor(apiData[version], c)\n\n                destructor_warning = \"\"\n                if class_has_custom_destructor or treat_external_as_ptr or class_has_recursive_destructor:\n                    destructor_warning = \"&nbsp;<span class=\\\"chd\\\">has destructor</span>\"\n\n                if \"enum_fields\" in c.keys():\n                    api_page_contents += \"<li class=\\\"st e pbi\\\" id=\\\"st.\" + class_name + \"\\\">\"\n                    if \"doc\" in c.keys():\n                        api_page_contents += \"<p class=\\\"class doc\\\">\" + format_doc(c[\"doc\"]) + \"</p>\"\n                    enum_type = \"enum\"\n                    if enum_is_union(c[\"enum_fields\"]):\n                        enum_type = \"union enum\"\n\n                    api_page_contents += \"<h4>\" + enum_type + \" <a href=\\\"#st.\" + class_name + \"\\\">\" + class_name + \"</a>\" + destructor_warning + \"</h4>\"\n                    for enum_variant in c[\"enum_fields\"]:\n                        enum_variant_name = list(enum_variant.keys())[0]\n                        if \"doc\" in enum_variant[enum_variant_name]:\n                            api_page_contents += \"<p class=\\\"v doc\\\">\" + format_doc(enum_variant[enum_variant_name][\"doc\"]) + \"</p>\"\n\n                        if \"type\" in enum_variant[enum_variant_name]:\n                            enum_variant_type = enum_variant[enum_variant_name][\"type\"]\n                            analyzed_variant_type = analyze_type(enum_variant_type)\n\n                            if is_primitive_arg(analyzed_variant_type[1]):\n                                api_page_contents += \"<p class=\\\"f\\\">\" + enum_variant_name + \"(\" + enum_variant_type + \")</p>\"\n                            else:\n                                api_page_contents += \"<p class=\\\"f\\\">\" + enum_variant_name + \"(\" + analyzed_variant_type[0] + \"<a href=\\\"#st.\" + analyzed_variant_type[1] + \"\\\">\" + analyzed_variant_type[1] +\"</a>\" + analyzed_variant_type[2] + \")</p>\"\n                        else:\n                            api_page_contents += \"<p class=\\\"f\\\">\" + enum_variant_name + \"</p>\"\n\n                elif \"struct_fields\" in c.keys():\n                    api_page_contents += \"<li class=\\\"st s pbi\\\" id=\\\"st.\" + class_name + \"\\\">\"\n                    if \"doc\" in c.keys():\n                        api_page_contents += \"<p class=\\\"class doc\\\">\" + format_doc(c[\"doc\"]) + \"</p>\"\n                    api_page_contents += \"<h4>struct <a href=\\\"#st.\" + class_name + \"\\\">\" + class_name + \"</a>\" + destructor_warning + \"</h4>\"\n                    for struct_field in c[\"struct_fields\"]:\n                        struct_field_name = list(struct_field.keys())[0]\n                        struct_type = struct_field[struct_field_name][\"type\"]\n                        analyzed_struct_type = analyze_type(struct_type)\n\n                        if \"doc\" in struct_field[struct_field_name]:\n                            api_page_contents += \"<p class=\\\"f doc\\\">\" + format_doc(struct_field[struct_field_name][\"doc\"]) + \"</p>\"\n\n                        if is_primitive_arg(analyzed_struct_type[1]):\n                            api_page_contents += \"<p class=\\\"f\\\">\" + struct_field_name + \": \" + struct_type + \"</p>\"\n                        else:\n                            api_page_contents += \"<p class=\\\"f\\\">\" + struct_field_name + \": \" + analyzed_struct_type[0] + \"<a href=\\\"#st.\" + analyzed_struct_type[1] + \"\\\">\" + analyzed_struct_type[1] +\"</a>\" + analyzed_struct_type[2] + \"</p>\"\n\n                elif \"callback_typedef\" in c.keys():\n                    api_page_contents += \"<li class=\\\"pbi fnty\\\" id=\\\"st.\" + class_name + \"\\\">\"\n                    if \"doc\" in c.keys():\n                        api_page_contents += \"<p class=\\\"class doc\\\">\" + format_doc(c[\"doc\"]) + \"</p>\"\n                    api_page_contents += \"<h4>fnptr <a href=\\\"#fnty.\" + class_name + \"\\\">\" + class_name + \"</a></h4>\"\n                    callback_typedef = c[\"callback_typedef\"]\n\n                    if \"fn_args\" in callback_typedef:\n                        api_page_contents += \"<ul>\"\n                        for fn_arg in callback_typedef[\"fn_args\"]:\n\n                            if \"doc\" in fn_arg.keys():\n                                api_page_contents += \"<p class=\\\"arg doc\\\">\" + format_doc(fn_arg[\"doc\"]) + \"</p>\"\n\n                            fn_arg_type = fn_arg[\"type\"]\n                            analyzed_fn_arg_type = analyze_type(fn_arg_type)\n                            fn_arg_ref = fn_arg[\"ref\"]\n\n                            fn_arg_ref_html = \"\"\n                            if (fn_arg_ref == \"value\"):\n                                fn_arg_ref_html = \"\"\n                            elif (fn_arg_ref == \"ref\"):\n                                fn_arg_ref_html = \"&\"\n                            elif (fn_arg_ref == \"refmut\"):\n                                fn_arg_ref_html = \"&mut \"\n\n                            if is_primitive_arg(analyzed_fn_arg_type[1]):\n                                api_page_contents += \"<li><p class=\\\"f\\\">arg \" + analyzed_fn_arg_type[1] + \"</p></li>\"\n                            else:\n                                api_page_contents += \"<li><p class=\\\"fnty arg\\\">arg \" + fn_arg_ref_html + \" <a href=\\\"#st.\" + analyzed_fn_arg_type[1] + \"\\\">\" + fn_arg_type + \"</a></p></li>\"\n                        api_page_contents += \"</ul>\"\n\n                    if \"returns\" in callback_typedef.keys():\n                        if \"doc\" in callback_typedef[\"returns\"].keys():\n                            api_page_contents += \"<p class=\\\"ret doc\\\">\" + format_doc(callback_typedef[\"returns\"][\"doc\"]) + \"</p>\"\n                        return_type = callback_typedef[\"returns\"][\"type\"]\n                        analyzed_return_type = analyze_type(return_type)\n                        if is_primitive_arg(analyzed_fn_arg_type[1]):\n                            api_page_contents += \"<p class=\\\"fnty ret\\\">-&gt;&nbsp;\" + analyzed_return_type[1] + \"</p>\"\n                        else:\n                            api_page_contents += \"<p class=\\\"fnty ret\\\">-&gt;&nbsp;<a href=\\\"#st.\" + analyzed_return_type[1] + \"\\\">\" + analyzed_return_type[1] + \"</a></p>\"\n\n                if \"constructors\" in c.keys():\n                    api_page_contents += \"<ul>\"\n                    for function_name in c[\"constructors\"]:\n                        f = c[\"constructors\"][function_name]\n                        if \"doc\" in f:\n                            api_page_contents += \"<p class=\\\"cn doc\\\">\" + format_doc(c[\"constructors\"][function_name][\"doc\"]) + \"</p>\"\n                        arg_string = \"\"\n                        if \"fn_args\" in f:\n                            args = f[\"fn_args\"]\n                            for arg in args:\n                                arg_name = list(arg.keys())[0]\n                                arg_val = arg[arg_name]\n                                if \"doc\" in arg.keys():\n                                    arg_string += \"<p class=\\\"arg doc\\\">\" + arg[\"doc\"] + \"</p>\"\n\n                                analyzed_arg_val = analyze_type(arg_val)\n                                if is_primitive_arg(analyzed_arg_val[1]):\n                                    arg_string += \"<li><p class=\\\"arg\\\">arg \" + arg_name + \": \" + analyzed_arg_val[1] + \"</p></li>\"\n                                else:\n                                    arg_string += \"<li><p class=\\\"arg\\\">arg \" + arg_name + \": \" + analyzed_arg_val[0] + \"<a href=\\\"#st.\" + analyzed_arg_val[1] + \"\\\">\" + analyzed_arg_val[1] + \"</a>\" + analyzed_arg_val[2] + \"</p></li>\"\n\n                        api_page_contents += \"<li class=\\\"cn\\\" id=\\\"\" + class_name + \".\" + function_name + \"\\\">\"\n                        api_page_contents += \"<p>constructor <a href=\\\"#\" + class_name + \".\" + function_name + \"\\\">\" + function_name + \"</a>:</p>\"\n                        api_page_contents += \"<ul>\"\n                        if not(len(arg_string) == 0):\n                            api_page_contents += arg_string\n                        if \"returns\" in f.keys():\n                            api_page_contents += \"<li>\"\n                            if \"doc\" in f[\"returns\"].keys():\n                                api_page_contents += \"<p class=\\\"ret doc\\\">\" + format_doc(f[\"returns\"][\"doc\"]) + \"</p>\"\n                            return_type = f[\"returns\"][\"type\"]\n                            analyzed_return_type = analyze_type(return_type)\n                            if is_primitive_arg(analyzed_return_type[1]):\n                                api_page_contents += \"<p class=\\\"cn ret\\\">-&gt;&nbsp;\" + analyzed_return_type[1] + \"</p>\"\n                            else:\n                                api_page_contents += \"<p class=\\\"cn ret\\\">-&gt;&nbsp;\" + analyzed_return_type[0] + \"<a href=\\\"#st.\"+ analyzed_return_type[1] + \"\\\">\" + analyzed_return_type[1] + \"</a>\" + analyzed_return_type[2] + \"</p>\"\n                            api_page_contents += \"</li>\"\n\n                        api_page_contents += \"<li><p class=\\\"ret\\\">-&gt;&nbsp;<a href=\\\"#st.\" + class_name + \"\\\">\" + class_name + \"</a></p></li>\"\n                        api_page_contents += \"</ul>\"\n                        api_page_contents += \"</li>\"\n\n                    api_page_contents += \"</ul>\"\n\n                if \"functions\" in c.keys():\n                    api_page_contents += \"<ul>\"\n                    for function_name in c[\"functions\"]:\n                        f = c[\"functions\"][function_name]\n                        if \"doc\" in f:\n                            api_page_contents += \"<p class=\\\"fn doc\\\">\" + format_doc(c[\"functions\"][function_name][\"doc\"]) + \"</p>\"\n                        arg_string = \"\"\n                        self_arg = \"\"\n                        if \"fn_args\" in f:\n                            args = f[\"fn_args\"]\n                            for arg in args:\n                                arg_name = list(arg.keys())[0]\n                                arg_val = arg[arg_name]\n\n                                if arg_name == \"self\":\n                                    if arg_val == \"value\":\n                                        self_arg = \"self\"\n                                    elif arg_val == \"ref\":\n                                        self_arg = \"&self\"\n                                    elif arg_val == \"refmut\":\n                                        self_arg = \"&mut self\"\n                                else:\n                                    if \"doc\" in arg.keys():\n                                        arg_string += \"<p class=\\\"arg doc\\\">\" + arg[\"doc\"] + \"</p>\"\n\n                                    analyzed_arg_val = analyze_type(arg_val)\n                                    if is_primitive_arg(analyzed_arg_val[1]):\n                                        arg_string += \"<li><p class=\\\"arg\\\">arg \" + arg_name + \": \" + analyzed_arg_val[1] + \"</p></li>\"\n                                    else:\n                                        arg_string += \"<li><p class=\\\"arg\\\">arg \" + arg_name + \": \" + analyzed_arg_val[0] + \"<a href=\\\"#st.\" + analyzed_arg_val[1] + \"\\\">\" + analyzed_arg_val[1] + \"</a>\" + analyzed_arg_val[2] + \"</p></li>\"\n\n                        api_page_contents += \"<li class=\\\"fn\\\" id=\\\"\" + class_name + \".\" + function_name + \"\\\">\"\n                        api_page_contents += \"<p>fn <a href=\\\"#\" + class_name + \".\" + function_name + \"\\\">\" + function_name + \"</a>:</p>\"\n                        api_page_contents += \"<ul>\"\n                        api_page_contents += \"<li><p class=\\\"arg\\\">\" + self_arg + \"</p></li>\"\n                        if not(len(arg_string) == 0):\n                            api_page_contents += arg_string\n                        if \"returns\" in f.keys():\n                            api_page_contents += \"<li>\"\n                            if \"doc\" in f[\"returns\"].keys():\n                                api_page_contents += \"<p class=\\\"ret doc\\\">\" + format_doc(f[\"returns\"][\"doc\"]) + \"</p>\"\n                            return_type = f[\"returns\"][\"type\"]\n                            analyzed_return_type = analyze_type(return_type)\n                            if is_primitive_arg(analyzed_return_type[1]):\n                                api_page_contents += \"<p class=\\\"fn ret\\\">-&gt;&nbsp;\" + analyzed_return_type[1] + \"</p>\"\n                            else:\n                                api_page_contents += \"<p class=\\\"fn ret\\\">-&gt;&nbsp;\" + analyzed_return_type[0] + \"<a href=\\\"#st.\"+ analyzed_return_type[1] + \"\\\">\" + analyzed_return_type[1] + \"</a>\" + analyzed_return_type[2] + \"</p>\"\n                            api_page_contents += \"</li>\"\n\n                        api_page_contents += \"</ul>\"\n                        api_page_contents += \"</li>\"\n\n                    api_page_contents += \"</ul>\"\n\n                api_page_contents += \"</li>\"\n\n            api_page_contents += \"</ul>\"\n\n            api_page_contents += \"</li>\"\n\n        api_page_contents += \"</ul>\"\n\n        releases_string = \"<ul>\"\n        for version in all_versions:\n            releases_string += \"<li><a href=\\\"./\" + version + \"\\\">\" + version + \"</a></li>\"\n        releases_string += \"</ul>\"\n\n        final_html = html_template.replace(\"$$ROOT_RELATIVE$$\", html_root)\n        extra_css = \"\\\n        body > .center > main > div > ul * { font-size: 12px; font-weight: normal; list-style-type: none; font-family: monospace; }\\\n        body > .center > main > div > ul > li ul { margin-left: 20px; }\\\n        body > .center > main > div > ul > li.m { margin-top: 40px; margin-bottom: 20px; }\\\n        body > .center > main > div > ul > li.m > ul > li { margin-bottom: 15px; }\\\n        body > .center > main > div > ul > li.m > ul > li.st.e { color: #2b6a2d; }\\\n        body > .center > main > div > ul > li.m > ul > li.st.s { color: #905; }\\\n        body > .center > main > div > ul > li.m > ul > li.fnty,\\\n        body > .center > main > div > ul > li.m > ul > li .arg { color: #4c1c1a; }\\\n        body > .center > main > div > ul > li.m > ul > li.st .f { margin-left: 20px; }\\\n        body > .center > main > div > ul > li.m > ul > li.st .v.doc { margin-left: 20px; }\\\n        body > .center > main > div > ul > li.m > ul > li.st .cn { margin-left: 20px; color: #07a; }\\\n        body > .center > main > div > ul > li.m > ul > li.st .fn { margin-left: 20px; color: #004e92; }\\\n        body > .center > main > div > ul > li.m > ul > li p.ret,\\\n        body > .center > main > div > ul > li.m > ul > li p.fn.ret,\\\n        body > .center > main > div > ul > li.m > ul > li p.ret.doc { margin-left: 0px; }\\\n        body > .center > main > div p.doc { margin-top: 5px !important; color: black !important; max-width: 70ch !important; font-weight: bolder; }\\\n        body > .center > main > div a { color: inherit !important; }\\\n        \"\n        final_html = final_html.replace(\"/*$$_EXTRA_CSS$$*/\", extra_css)\n        final_html = final_html.replace(\"$$SIDEBAR_RELEASES$$\", \"\")\n        final_html = final_html.replace(\"$$SIDEBAR_GUIDE$$\", \"\")\n        final_html = final_html.replace(\"$$SIDEBAR_API$$\", api_sidebar_string)\n        final_html = final_html.replace(\"$$TITLE$$\", \"v\" + version)\n        final_html = final_html.replace(\"$$CONTENT$$\", api_page_contents)\n        write_file(final_html, root_folder + \"/target/html/api/\" + version + \".html\")\n\n    api_combined_page = html_template.replace(\"$$ROOT_RELATIVE$$\", html_root)\n    api_combined_page = api_combined_page.replace(\"$$SIDEBAR_GUIDE$$\", \"\")\n    api_combined_page = api_combined_page.replace(\"$$SIDEBAR_RELEASES$$\", \"\")\n    api_combined_page = api_combined_page.replace(\"$$SIDEBAR_API$$\", \"\")\n    api_combined_page = api_combined_page.replace(\"$$TITLE$$\", \"Choose API version\")\n    api_combined_page = api_combined_page.replace(\"$$CONTENT$$\", api_sidebar_string)\n    write_file(api_combined_page, root_folder + \"/target/html/api.html\")\n\ndef build_azulc():\n    # enable features=\"image_loading, font_loading\" to enable layouting\n    os.system('cd \"' + root_folder + '/azulc\" && cargo build --bin azulc --no-default-features --features=\"xml std font_loading image_loading text_layout\" --release')\n\ndef generate_license():\n\n    default_license_text = \"\\r\\n\".join([\n        \"[program] is based in part on the AZUL GUI toolkit (https://azul.rs),\",\n        \"licensed under the Mozilla Public License Version 2.0.\",\n        \"The AZUL GUI toolkit itself uses the following libraries:\",\n        \"\",\n        \"\"\n    ])\n\n    license_posttext = \"\\r\\n\".join([\n        \"\",\n        \"To generate the full text of the license for the license, please visit\",\n        \"https://spdx.org/licenses/ and replace the license author in the source\",\n        \"text in any given license with the name of the author listed above.\"\n    ])\n\n    try:\n        os.system('cd \"' + root_folder + '/azul-dll\" && cargo license --filter-platform=x86_64-pc-windows-msvc --avoid-build-deps --avoid-dev-deps -j > ../LICENSE-WINDOWS.json')\n        license_template = read_file(root_folder + \"/LICENSE\")\n        license_authors = read_file(root_folder + \"/LICENSE-WINDOWS.json\")\n        license_json = json.loads(license_authors)\n        license_authors_formatted = format_license_authors(license_json)\n        remove_unused_crates(license_json, root_folder + \"/../azul-v1.0-beta1\")\n        final_license_text = default_license_text + license_authors_formatted + license_posttext\n        write_file(final_license_text, root_folder + \"/LICENSE-WINDOWS.txt\")\n        remove_path(root_folder + \"/LICENSE-WINDOWS.json\")\n\n        os.system('cd \"' + root_folder + '/azul-dll\" && cargo license --filter-platform=x86_64-unknown-linux-gnu --avoid-build-deps --avoid-dev-deps -j > ../LICENSE-LINUX.json')\n        license_template = read_file(root_folder + \"/LICENSE\")\n        license_authors = read_file(root_folder + \"/LICENSE-LINUX.json\")\n        license_json = json.loads(license_authors)\n        license_authors_formatted = format_license_authors(license_json)\n        remove_unused_crates(license_json, root_folder + \"/../azul-v1.0-beta1\")\n        final_license_text = default_license_text + license_authors_formatted + license_posttext\n        write_file(final_license_text, root_folder + \"/LICENSE-LINUX.txt\")\n        remove_path(root_folder + \"/LICENSE-LINUX.json\")\n\n        os.system('cd \"' + root_folder + '/azul-dll\" && cargo license --filter-platform=x86_64-apple-darwin --avoid-build-deps --avoid-dev-deps -j > ../LICENSE-MAC.json')\n        license_template = read_file(root_folder + \"/LICENSE\")\n        license_authors = read_file(root_folder + \"/LICENSE-MAC.json\")\n        license_json = json.loads(license_authors)\n        license_authors_formatted = format_license_authors(license_json)\n        remove_unused_crates(license_json, root_folder + \"/../azul-v1.0-beta1\")\n        final_license_text = default_license_text + license_authors_formatted + license_posttext\n        write_file(final_license_text, root_folder + \"/LICENSE-MAC.txt\")\n        remove_path(root_folder + \"/LICENSE-MAC.json\")\n    except e:\n        print(\"could not generate license: \" + str(e))\n        print(\"help: no cargo-license installed?\")\n        print(\"continuing build script.\")\n\ndef format_license_authors(license_json):\n    license_txt = \"\"\n\n    for crate in license_json:\n        name = crate[\"name\"]\n        if name is None:\n            continue\n        version = crate[\"version\"]\n        if version is None:\n            continue\n        license = crate[\"license\"]\n        if license is None:\n            continue\n        a = crate[\"authors\"]\n        if a is None:\n            continue\n\n        authors = []\n        for author in a.split(\"|\"):\n            # strip email for privacy reasons\n            authors.append(re.sub(\"<.*>\", \"\", author).strip())\n\n        license_txt += name + \" v\" + version + \" licensed \" + license + \"\\r\\n    by \" + \", \".join(authors) + \"\\r\\n\"\n\n    return license_txt\n\n# cargo vendor vendors a lot of unused crates for some reason\n# this reduces the dependencies.zip file to a more reasonable size\n# use WinDirState to see what files are taking up the most space\ndef remove_unused_crates(license_json, vendor_path):\n    license_txt = \"\"\n    added = [\n        \"azul-dll\",\n        \"azul-desktop\",\n        \"azulc\",\n        \"azul-css\",\n        \"azul-core\",\n        \"azul-layout\",\n        \"azul-text-layout\",\n        \"azul-css-parser\",\n    ]\n\n    # early exit if path does not exist\n    if (not(os.path.isdir(vendor_path)) and not(os.path.isfile(vendor_path))):\n        return\n\n    vendored_crates = os.listdir(vendor_path)\n    for crate in license_json:\n        name = crate[\"name\"]\n        if not(name in added):\n            if name in vendored_crates:\n                vendored_crates.remove(name)\n\n    # vendored_crates now contains the list of vendored\n    # directories that are not used by this build\n    for folder in vendored_crates:\n        remove_path(vendor_path + \"/\" + folder)\n\n    blacklisted_folder_names = [\"test\", \"tests\", \"doc\", \"benches\", \"examples\", \"ci\", \"fixtures\"]\n    blacklisted_file_endings = [\".xml\", \".csv\"]\n\n    # remove all \"test\" \"tests\", \"doc\", \"benches\" and \"examples\" \"ci\" directories\n    for v in os.listdir(vendor_path):\n        for f in os.listdir(vendor_path + \"/\" + v):\n            if f in blacklisted_folder_names:\n                remove_path(vendor_path + \"/\" + v + \"/\" + f)\n\n    # as well as any \".json\", \".xml\" and \".csv\" files\n    for root, dirs, files in os.walk(vendor_path):\n        for file in files:\n            for b in blacklisted_file_endings:\n                if file.endswith(b):\n                    print(\"removing \" + os.path.join(root, file))\n                    os.remove(os.path.join(root, file))\n\ndef full_test():\n    os.system('cd \"' + root_folder + '/azul-dll\" && cargo check --verbose --all-features')\n    os.system('cd \"' + root_folder + '/azul-dll\" && cargo check --verbose --examples')\n    os.system('cd \"' + root_folder + '/azul-dll\" && cargo check --no-default-features')\n    os.system('cd \"' + root_folder + '/azul-dll\" && cargo check --verbose --release --all-features')\n    os.system('cd \"' + root_folder + '/azul-dll\" && cargo check --no-default-features --features=\"svg\"')\n    os.system('cd \"' + root_folder + '/azul-dll\" && cargo check --no-default-features --features=\"image_loading\"')\n    os.system('cd \"' + root_folder + '/azul-dll\" && cargo check --no-default-features --features=\"font_loading\"')\n    os.system('cd \"' + root_folder + '/azul-dll\" && cargo test --verbose --all-features')\n    os.system('cd \"' + root_folder + \"/examples && cargo run --bin layout_tests -- --nocapture\")\n\ndef debug_test_compile_c():\n    if platform == \"linux\" or platform == \"linux2\":\n        os.system('cd \"' + root_folder + '/api/c\" && gcc -ansi ./main.c')\n    elif platform == \"win32\":\n        os.system(\"cd \\\"\" + root_folder + \"/api/c\\\" && clang -ansi ./main.c -lazul -I\\\"\" + root_folder + \"/target/release/x86_64-unknown-windows-msvc/release\\\" \")\n    else:\n        pass\n\ndef main():\n    print(\"removing old azul.dll...\")\n    # cleanup_start()\n    # print(\"verifying that LLVM / clang-cl is installed...\")\n    # verify_clang_is_installed()\n    print(\"generating API...\")\n    generate_api()\n    print(\"generating documentation in /target/html...\")\n    generate_docs()\n    print(\"building azulc (release mode)...\")\n    # build_azulc()\n    print(\"building azul-dll (release mode)...\")\n    # build_dll()\n    print(\"checking azul-dll for struct size integrity...\")\n    # run_size_test()\n    print(\"building examples...\")\n    # build_examples()\n    print(\"building and linking C examples from /examples/c/...\")\n    # debug_test_compile_c()\n    # full_test()\n    # release_on_cargo()\n    # make_debian_release_package()\n    # make_release_zip_files()\n    # travis: github release - copy azul.zip!\n    # if RELEASE: # needs cargo-license\n    #   generate_license()\n\nif __name__ == \"__main__\":\n    main()"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}