{
  "metadata": {
    "timestamp": 1736709360722,
    "page": 57,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cantino/mcfly",
      "stars": 7021,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0732421875,
          "content": ".idea\n/target\n**/*.rs.bk\nupdate.sh\n.zsh_history\n.zshrc\n/.fish\n.vscode/**/*\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.6748046875,
          "content": "# Based on the \"trust\" template v0.1.2\n# https://github.com/japaric/trust/tree/v0.1.2\n\ndist: trusty\nlanguage: rust\nservices: docker\nsudo: required\n\nenv:\n  global:\n    - CRATE_NAME=mcfly\n\nmatrix:\n  include:\n    # Linux\n#    - env: TARGET=aarch64-unknown-linux-gnu\n    - env: TARGET=arm-unknown-linux-gnueabi\n    - env: TARGET=armv7-unknown-linux-gnueabihf\n    - env: TARGET=i686-unknown-linux-gnu\n#    - env: TARGET=i686-unknown-linux-musl\n#    - env: TARGET=mips-unknown-linux-gnu\n#    - env: TARGET=mips64-unknown-linux-gnuabi64\n#    - env: TARGET=mips64el-unknown-linux-gnuabi64\n#    - env: TARGET=mipsel-unknown-linux-gnu\n#    - env: TARGET=powerpc-unknown-linux-gnu\n#    - env: TARGET=powerpc64-unknown-linux-gnu\n#    - env: TARGET=powerpc64le-unknown-linux-gnu\n#    - env: TARGET=s390x-unknown-linux-gnu DISABLE_TESTS=1\n    - env: TARGET=x86_64-unknown-linux-gnu\n#    - env: TARGET=x86_64-unknown-linux-musl\n\n    # OSX\n#    - env: TARGET=i686-apple-darwin\n#      os: osx\n    - env: TARGET=x86_64-apple-darwin\n      os: osx\n\n    # *BSD\n#    - env: TARGET=i686-unknown-freebsd DISABLE_TESTS=1\n#    - env: TARGET=x86_64-unknown-freebsd DISABLE_TESTS=1\n#    - env: TARGET=x86_64-unknown-netbsd DISABLE_TESTS=1\n\n    # Windows\n#    - env: TARGET=x86_64-pc-windows-gnu\n\n    # Bare metal\n    # These targets don't support std and as such are likely not suitable for\n    # most crates.\n    # - env: TARGET=thumbv6m-none-eabi\n    # - env: TARGET=thumbv7em-none-eabi\n    # - env: TARGET=thumbv7em-none-eabihf\n    # - env: TARGET=thumbv7m-none-eabi\n\n    # Testing other channels\n    - env: TARGET=x86_64-unknown-linux-gnu\n      rust: nightly\n    - env: TARGET=x86_64-apple-darwin\n      os: osx\n      rust: nightly\n\nbefore_install:\n  - set -e\n  - rustup self update\n\ninstall:\n  - sh ci/install.sh\n  - source ~/.cargo/env || true\n\nscript:\n  - bash ci/script.sh\n\nafter_script: set +e\n\nbefore_deploy:\n  - sh ci/before_deploy.sh\n\ndeploy:\n  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new\n  # - Encrypt it: `travis encrypt 0123456789012345678901234567890123456789`\n  # - Note: if your project is on travis-ci.com instead of travis-ci.org you\n  #         need to add the `--pro` flag like:\n  #         `travis encrypt 0123456789012345678901234567890123456789 --pro`\n  # - Paste the output down here\n  api_key:\n    secure: \"1rJFIUde5cmrrkrjBkmSFgJ3U1jRl0lf+tm0fkxfaTbaYvM1HeTNUquWKCicFthRul+TihytnIlmeCA0YhSqA+kqJps9Qw3WV9U9kLLpw/nNM1ms1x+SmSP3TetIhNftsOBpVgoX9qS46uQoljZGouU/B3a+1CIaCG+nuQL0MiB4pXi3TrQUnFtaA696NDxZxC3IR+CmTpjgJ+Q2/1oEBUW4cbYJAs8nQe+GZGf2Ijh+gLb2Qtesimf8HG1hxhfPEFq+oPlOiR3EAnFPP4QBBgSO/qo3zp4vPei+pBd3OGuWnPn3KbTNeCD4aojtjKBQQa0VES8CRISZOBwNE4Rl2w1unf4aHmXM/H2Tzy+185a3X1bilv+S6sjJlkAmvsZzdD5H9gBCBLPW0fJpNdAjR7cSaoHU3sNKXuW7pulDselz9I6fAO5Y9avBf0NbrknM3p/Fy5qn2aIQyAt4U7rswgA3ydsgHKclwTZKm6+ub+BB90gRRCX9ugods9zTre0TVxGwgz1fiukfNM1+wNpdz4jpthHi99GF7kzb8hOyHZQo5vx/mBX8kWbvZ3oQO9VA+oBs9rZnabBnJ6Mv/liPGdlbG19dxSSFzig6pza6zkWmi9UC6Ghwh6oQ/mYfaT3+0Tlql0qh0xXG9ogHhTxiexlLlFqFomp4ER+vkjNQXnE=\"\n  file_glob: true\n  file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*\n  on:\n    # Here you can pick which targets will generate binary releases\n    # In this example, there are some targets that are tested using the stable\n    # and nightly channels. This condition makes sure there is only one release\n    # for such targets and that's generated using the stable channel\n    condition: $TRAVIS_RUST_VERSION = stable\n    tags: true\n  provider: releases\n  prerelease: true\n  skip_cleanup: true\n\ncache: cargo\nbefore_cache:\n  # Travis can't cache files that are not readable by \"others\"\n  - chmod -R a+r $HOME/.cargo\n\nbranches:\n  only:\n    # release tags\n    - /^v\\d+\\.\\d+\\.\\d+.*$/\n    - master\n\nnotifications:\n  email:\n    on_success: never\n"
        },
        {
          "name": "CHANGELOG.txt",
          "type": "blob",
          "size": 7.2421875,
          "content": "0.9.2 - Aug 11, 2024\n - Numerous bash fixes (thanks @akinomyoga)\n - Bind to both emacs and vi-insert keymaps in Bash (thanks @akinomyoga)\n\n0.9.1 - July 10, 2024\n - Added the `mcfly stats` command (thanks @nicokosi)\n - Prevent cancellation of Bash/Zsh initialization on mcfly initialization failure (thanks @akinomyoga)\n - Prevent UTF-8 entry issue from new default to avoid TIOCSTI added in 0.9.0 (thanks @akinomyoga)\n\n0.9.0 - May 31, 2024\n - Make bash no longer use TIOCSTI by default (thanks @jtschuster)\n\n0.8.6 - May 18, 2024\n - Add windows asset generation (thanks @jtschuster)\n - Fix init issue for fish (thanks @4t8dd)\n\n0.8.5 - May 11, 2024\n - Use C:\\Users\\username\\AppData\\Local instead of C:\\Users\\username\\AppData\\Roaming (thanks @jtschuster)\n - Fix Fish return codes (thanks @manfredlotz)\n - Allow colors to be configured in a new optional config.toml (thanks @exokernel)\n - Paste in emacs mode (thanks @eatradish)\n\n0.8.4 - Dec 24, 2023\n - Remove spurious print when moving files.\n - PowerShell improvements (thanks @Namorzyny and @YoshidaRyoko!)\n\n0.8.3 - Dec 3, 2023\n - Add support for exporting command history matching a regex or date range (thanks @TD-Sky!)\n - Add Windows and Powershell support (thanks @jtschuster!)\n - Add deprecation warning on brew tap.\n\n0.8.1 - Jun 3, 2023\n - Fix use of MCFLY_DISABLE_MENU (thanks @barklan!)\n - Support Fish private mode support (thanks @Aeron!)\n - Always set MCFLY_HISTORY in zsh to support subshells (thanks @utkarshgupta137!)\n - Allow linking mcfly with system-provided sqlite with sqlite-bundled feature flag (thanks @jirutka!)\n - And allow sourcing in zsh more than once (thanks @ahatzz11 and @deekshithanand!)\n - Reduce size by removing unnecessary/unused regex features (thanks @jirutka!)\n - Add per-directory history (thanks @rawkode!)\n\n0.8.0 - Mar 6, 2023\n - Add forward-compatibility check for database schema (thanks @bnprks!)\n - Add MCFLY_DISABLE_RUN_COMMAND option to disable command running (thanks @chaserhkj!)\n - Add customizable prompt with MCFLY_PROMPT (thanks @vedkothavade!)\n - Replace termion with crossterm (big change, thanks @jtschuster!)\n - Allow ENV variables to be set to FALSE\n0.7.1 - Dec 15, 2022\n - Ensure at least MCFLY_HISTFILE is set for history import when HISTFILE is missing\n0.7.0 - Dec 10, 2022\n - Upgraded to clap4 (thanks @TD-Sky!)\n - Switched back to which for command location due to issues when run at root (thanks @Efreak and @joefiorini!)\n - Stopped exporting HISTFILE to fix issue when using nested shells (thanks @dithpri and @AndrewKvalheim!)\n - Added ctrl-w to vim keybinds (thanks @copy!)\n - Cursor no longer jumps to top when deleting history (thanks @navazjm!)\n - Fixed compatibility with mktemp from uutils/coreutils (thanks @jhult!)\n - Skip fuzzy matches when sorting by time (thanks @navazjm!)\n - Fix handling of open-quote strings in fish (thanks @hivehand!)\n0.6.1 - Jul 16, 2022\n - Avoid return 0 to prevent re-sourcing .zshrc from erroring\n - Vim mode improvement (thanks @fabiogibson!)\n - Allow switching between rank and time-based sorting with F1 (thanks @navazjm!)\n - Dependency security updates\n0.6.0 - Mar 22, 2022\n - Allow disabling of menu (thanks @michaelnavs!)\n - Prevent subshells from having multiple mcfly PROMPT_COMMAND hooks in bash (thanks @nfultz!)\n - Errors during history import do not prevent other lines from importing (thanks @qouoq!)\n - Store configuration in XDG directories when ~/.mcfly does not yet exist (thanks @Awernx!)\n0.5.13 - Jan 24, 2022\n - Fix 'illegal byte sequence' due to incorrect TIOCSTI cast (thanks @arunpersaud!)\n0.5.12 - Jan 12, 2022\n - Automatically detect if Zsh extended history is used (thanks @vmax!)\n0.5.11 - Dec 12, 2021\n - Avoid using builtins to fix WSL bug\n0.5.10 - Nov 6, 2021\n - Fix zsh utf-8 history encoding (thanks @onriv!)\n - Support Ctrl-p and Ctrl-n in vim mode (thanks @otherJL0!)\n - Make MCFLY_FUZZY a tuneable int (thanks @dmfay!)\n - Prevent errors when running bash inside of fish (thanks @btglr!)\n0.5.9 - Aug 29, 2021\n - Prefer unaliased commands in bash/zsh (thanks @Mic92!)\n - Fix zsh source message (thanks @hlascelles!)\n - Prevent potentially unsafe variable substitution in paths (thanks @CreativeCactus!)\n0.5.8 - Aug 1, 2021\n - Option to place interface at bottom of screen (thanks @agrism)\n - Option to sort by recency (thanks @agrism)\n - Option to skip prompting on command deletion (thanks @goddade)\n0.5.7 - Jun 27, 2021\n - Document MCFLY_RESULTS config value\n - Initialize database inside a transaction for speed (thanks @SafariMonkey!)\n - Move to cantino/homebrew-mcfly for tap install\n - Show run time of commands (thanks @dmfay!)\n - Clean PROMPT_COMMAND before joining with a semicolon in Bash\n - Fix zsh interactivity test\n - Make ^d delete forward (thanks @rbutoi!)\n - Move to Github Actions for build and add install script instructions (thanks @praveenperera!)\n0.5.6 - Apr 1, 2021\n - Fix fish shell initialization (thanks @domoritz)\n - Fix fish shell escaping (thanks @scooter-dangle!)\n0.5.5 - Mar 12, 2021\n - Fixed a crash during init without any history\n - Fixed a crash during init without any history\n - Fixed issue when deleting all history (thanks @akinnane!)\n - Add MCFLY_HISTORY_LIMIT to limit history search\n0.5.4 - Feb 28, 2021\n - Switched to `mcfly init` pattern for shell config files (thanks @b3nj5m1n!)\n0.5.3 - Jan 17, 2021\n - Ensure that history is appended in Bash 4+.\n0.5.2 - Dec 10, 2020\n - Bash 4+ should no longer have a cluttered terminal buffer (thanks @CreativeCactus)\n - Vim mode now starts in insert mode (thanks @JamJar00)\n0.5.1 - Dec 6, 2020\n - Fuzzy searching via the MCFLY_FUZZY option from @dmfay.\n0.5.0 - Aug 21, 2020\n - Fish support! Thanks @tjkirch!\n0.4.0 - Jun 28, 2020\n - Zsh support!\n0.3.6 - Dec 15, 2019\n - Optional VI-style keybindings from @JamJar00\n0.3.5 - Aug 30, 2019\n - Remake the history file if it gets removed\n0.3.4 - May 24, 2019\n - Only read 256 bytes for session id generation (thanks @SuperSandro2000!)\n - Prevent adding empty commands\n - Try using unlock_notify to prevent race condition with locked DB.\n - Ensure stdin is a tty to fix issue with Sublime Text 3 (thanks @abuzze!)\n0.3.3 - Feb 11, 2019\n - Fix version number\n0.3.2 - Feb 10, 2019\n - Fix 'cat /dev/urandom' not closing (thanks @Melkor333!)\n - Update to Rust 2018\n - Error gracefully when .bash_history is not found\n - Add more Xes for Slackware Linux (thanks @aik099)\n0.3.1 - Dec 25, 2018\n  - Fix background color on Light Mode\n0.3.0 - Dec 25, 2018\n  - Support users who have `set -o vi` (thanks @Asdalo21)\n  - Remove Regex dependency for a smaller binary.\n  - Add support for Light Mode - enable with `export MCFLY_LIGHT=TRUE` (thanks @mshron)\n  - Fix broken Rust install link (thanks @bperel)\n0.2.5 - Dec 9, 2018\n  - Prevent clobbering of command return statuses (thanks @gwk)\n  - Add Ctrl-n and Ctrl-p mappings (thanks @greyblake)\n  - Support spaces in HISTFILE (thanks @markusjevringgoeuro)\n0.2.4 - Dec 4, 2018\n  - Important update: fixes bug where historical directory paths would be incorrectly updated when a directory that was a\n    prefix of another was moved, resulting in historical directory references that never actually existed.\n  - Silences logs when moving / renaming directories.\n  - Fixes importing of shell history that contains invalid UTF8 characters.\n0.2.3 - Dec 3, 2018\n  - Note: 0.2.3 was never built as a release or pushed to Homebrew.\n  - Use clobbering redirects, thanks to @gwk.\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 41.50390625,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 4\n\n[[package]]\nname = \"adler32\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aae1277d39aeec15cb388266ecc24b11c80469deae6067e17a1a7aa9e5c1f234\"\n\n[[package]]\nname = \"ahash\"\nversion = \"0.8.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n \"version_check\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"android-tzdata\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"anstream\"\nversion = \"0.6.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8acc5369981196006228e28809f761875c0327210a891e941f4c683b3a99529b\"\ndependencies = [\n \"anstyle\",\n \"anstyle-parse\",\n \"anstyle-query\",\n \"anstyle-wincon\",\n \"colorchoice\",\n \"is_terminal_polyfill\",\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55cc3b69f167a1ef2e161439aa98aed94e6028e5f9a59be9a6ffb47aef1651f9\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b2d16507662817a6a20a9ea92df6652ee4f94f914589377d69f3b21bc5798a9\"\ndependencies = [\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79947af37f4177cfead1110013d678905c37501914fba0efea834c3fe9a8d60c\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"3.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2109dbce0e72be3ec00bed26e6a7479ca384ad226efdd66db8fa2e3a38c83125\"\ndependencies = [\n \"anstyle\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26\"\n\n[[package]]\nname = \"autopilot\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a2fd0359d0cd30b15419bcce7e6641a3cbe2046c612b3900216dc64bc989558\"\ndependencies = [\n \"cocoa\",\n \"core-foundation\",\n \"core-graphics\",\n \"image\",\n \"libc\",\n \"pkg-config\",\n \"rand 0.7.3\",\n \"scopeguard\",\n \"winapi\",\n \"x11\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de\"\n\n[[package]]\nname = \"block\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a\"\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c31a0499c1dc64f458ad13872de75c0eb7e3fdb0e67964610c914b034fc5956e\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.39\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e36cc9d416881d2e24f9a963be5fb1cd90966419ac844274161d10488b3e825\"\ndependencies = [\n \"android-tzdata\",\n \"iana-time-zone\",\n \"js-sys\",\n \"num-traits\",\n \"wasm-bindgen\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"chrono-systemd-time\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"429fae93a2fb86c5028aa38bd4a7c0c47b51eb1e30ce059c96dea25bd570dd6c\"\ndependencies = [\n \"chrono\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"4.5.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3135e7ec2ef7b10c6ed8950f0f792ed96ee093fa088608f1c76e569722700c84\"\ndependencies = [\n \"clap_builder\",\n \"clap_derive\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.5.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30582fc632330df2bd26877bde0c1f4470d57c582bbc070376afcd04d8cb4838\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap_lex\",\n \"strsim\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.5.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ac6a0c7b1a9e9a5186361f67dfa1b88213572f427fb9ab038efb2bd8c582dab\"\ndependencies = [\n \"heck\",\n \"proc-macro2 1.0.92\",\n \"quote 1.0.37\",\n \"syn 2.0.90\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46ad14479a25103f283c0f10005961cf086d8dc42205bb44c46ac563475dca6\"\n\n[[package]]\nname = \"cocoa\"\nversion = \"0.20.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c49e86fc36d5704151f5996b7b3795385f50ce09e3be0f47a0cfde869681cf8\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"block\",\n \"core-foundation\",\n \"core-graphics\",\n \"foreign-types\",\n \"libc\",\n \"objc\",\n]\n\n[[package]]\nname = \"color_quant\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d7b894f5411737b7867f4827955924d7c254fc9f4d91a6aad6b097804b1018b\"\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b63caa9aa9397e2d9480a9b13673856c78d8ac123288526c37d7839f2a86990\"\n\n[[package]]\nname = \"config\"\nversion = \"0.14.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68578f196d2a33ff61b27fae256c3164f65e36382648e30666dde05b8cc9dfdf\"\ndependencies = [\n \"nom\",\n \"pathdiff\",\n \"serde\",\n \"toml\",\n]\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57d24c7a13c43e870e37c1556b74555437870a04514f7685f5b354e090567171\"\ndependencies = [\n \"core-foundation-sys 0.7.0\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3a71ab494c0b5b860bdc8407ae08978052417070c2ced38573a9157ad75b8ac\"\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b\"\n\n[[package]]\nname = \"core-graphics\"\nversion = \"0.19.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3889374e6ea6ab25dba90bb5d96202f61108058361f6dc72e8b03e6f8bbe923\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"core-foundation\",\n \"foreign-types\",\n \"libc\",\n]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9dd111b7b7f7d55b72c0a6ae361660ee5853c9af73f70c3c2ef6858b950e2e51\"\ndependencies = [\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28\"\n\n[[package]]\nname = \"crossterm\"\nversion = \"0.27.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f476fe445d41c9e991fd07515a6f463074b782242ccf4a5b7b1d1012e70824df\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"crossterm_winapi\",\n \"filedescriptor\",\n \"libc\",\n \"mio\",\n \"parking_lot\",\n \"signal-hook\",\n \"signal-hook-mio\",\n \"winapi\",\n]\n\n[[package]]\nname = \"crossterm_winapi\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"acdd7c62a3665c7f6830a51635d9ac9b23ed385797f70a83bb8bafe9c572ab2b\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"csv\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"acdc4883a9c96732e4733212c01447ebd805833b7275a73ca3ee080fd77afdaf\"\ndependencies = [\n \"csv-core\",\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"csv-core\"\nversion = \"0.1.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5efa2b3d7902f4b634a20cae3c9c4e6209dc4779feb6863329607560143efa70\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"deflate\"\nversion = \"0.7.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"707b6a7b384888a70c8d2e8650b3e60170dfc6a67bb4aa67b6dfca57af4bedb4\"\ndependencies = [\n \"adler32\",\n \"byteorder\",\n]\n\n[[package]]\nname = \"directories-next\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"339ee130d97a610ea5a5872d2bbb130fdf68884ff09d3028b81bec8a1ac23bbc\"\ndependencies = [\n \"cfg-if\",\n \"dirs-sys-next\",\n]\n\n[[package]]\nname = \"dirs\"\nversion = \"5.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44c45a9d03d6676652bcb5e724c7e988de1acad23a711b5217ab9cbecbec2225\"\ndependencies = [\n \"dirs-sys\",\n]\n\n[[package]]\nname = \"dirs-sys\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"520f05a5cbd335fae5a99ff7a6ab8627577660ee5cfd6a94a6a929b52ff0321c\"\ndependencies = [\n \"libc\",\n \"option-ext\",\n \"redox_users\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"dirs-sys-next\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d\"\ndependencies = [\n \"libc\",\n \"redox_users\",\n \"winapi\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"fallible-iterator\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2acce4a10f12dc2fb14a218589d4f1f62ef011b2d0cc4b3cb1bba8e94da14649\"\n\n[[package]]\nname = \"fallible-streaming-iterator\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7360491ce676a36bf9bb3c56c1aa791658183a54d2744120f27285738d90465a\"\n\n[[package]]\nname = \"filedescriptor\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7199d965852c3bac31f779ef99cbb4537f80e952e2d6aa0ffeb30cce00f4f46e\"\ndependencies = [\n \"libc\",\n \"thiserror\",\n \"winapi\",\n]\n\n[[package]]\nname = \"foreign-types\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\ndependencies = [\n \"foreign-types-shared\",\n]\n\n[[package]]\nname = \"foreign-types-shared\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8fc3cb4d91f53b50155bdcfd23f6a4c39ae1969c2ae85982b135750cccaf5fce\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi 0.9.0+wasi-snapshot-preview1\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi 0.11.0+wasi-snapshot-preview1\",\n]\n\n[[package]]\nname = \"gif\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"471d90201b3b223f3451cd4ad53e34295f16a1df17b1edf3736d47761c3981af\"\ndependencies = [\n \"color_quant\",\n \"lzw\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\ndependencies = [\n \"ahash\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.15.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n\n[[package]]\nname = \"hashlink\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ba4ff7128dee98c7dc9794b6a411377e1404dba1c97deb8d1a55297bd25d8af\"\ndependencies = [\n \"hashbrown 0.14.5\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea\"\n\n[[package]]\nname = \"humantime\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"235e081f3925a06703c2d0117ea8b91f042756fd6e7a6e5d901e8ca1a996b220\"\ndependencies = [\n \"android_system_properties\",\n \"core-foundation-sys 0.8.7\",\n \"iana-time-zone-haiku\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"windows-core\",\n]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"image\"\nversion = \"0.22.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08ed2ada878397b045454ac7cfb011d73132c59f31a955d230bd1f1c2e68eb4a\"\ndependencies = [\n \"byteorder\",\n \"gif\",\n \"jpeg-decoder\",\n \"num-iter\",\n \"num-rational\",\n \"num-traits\",\n \"png\",\n \"scoped_threadpool\",\n \"tiff\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62f822373a4fe84d4bb149bf54e584a7f4abec90e072ed49cda0edea5b95471f\"\ndependencies = [\n \"equivalent\",\n \"hashbrown 0.15.2\",\n]\n\n[[package]]\nname = \"inflate\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1cdb29978cc5797bd8dcc8e5bf7de604891df2a8dc576973d71a281e916db2ff\"\ndependencies = [\n \"adler32\",\n]\n\n[[package]]\nname = \"is_terminal_polyfill\"\nversion = \"1.70.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d75a2a4b1b190afb6f5425f10f6a8f959d2ea0b9c2b1d79553551850539e4674\"\n\n[[package]]\nname = \"jpeg-decoder\"\nversion = \"0.1.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"229d53d58899083193af11e15917b5640cd40b29ff475a1fe4ef725deb02d0f2\"\ndependencies = [\n \"rayon\",\n]\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.76\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6717b6b5b077764fb5966237269cb3c64edddde4b14ce42647430a78ced9e7b7\"\ndependencies = [\n \"once_cell\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.169\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5aba8db14291edd000dfcc4d620c7ebfb122c613afb886ca8803fa4e128a20a\"\n\n[[package]]\nname = \"libredox\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"libc\",\n]\n\n[[package]]\nname = \"libsqlite3-sys\"\nversion = \"0.28.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c10584274047cb335c23d3e61bcef8e323adae7c5c8c760540f73610177fc3f\"\ndependencies = [\n \"cc\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"lzw\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d947cbb889ed21c2a84be6ffbaebf5b4e0f4340638cba0444907e38b56be084\"\n\n[[package]]\nname = \"malloc_buf\"\nversion = \"0.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62bb907fe88d54d8d9ce32a3cceab4218ed2f6b7d35617cafe9adf84e43919cb\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"mcfly\"\nversion = \"0.9.2\"\ndependencies = [\n \"autopilot\",\n \"chrono\",\n \"chrono-systemd-time\",\n \"clap\",\n \"config\",\n \"crossterm\",\n \"csv\",\n \"directories-next\",\n \"humantime\",\n \"itertools\",\n \"libc\",\n \"path-absolutize\",\n \"rand 0.8.5\",\n \"regex\",\n \"rusqlite\",\n \"serde\",\n \"serde_json\",\n \"shellexpand\",\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"minimal-lexical\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"\n\n[[package]]\nname = \"mio\"\nversion = \"0.8.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c\"\ndependencies = [\n \"libc\",\n \"log\",\n \"wasi 0.11.0+wasi-snapshot-preview1\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"nom\"\nversion = \"7.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a\"\ndependencies = [\n \"memchr\",\n \"minimal-lexical\",\n]\n\n[[package]]\nname = \"num-derive\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eafd0b45c5537c3ba526f79d3e75120036502bebacbb3f3220914067ce39dbf2\"\ndependencies = [\n \"proc-macro2 0.4.30\",\n \"quote 0.6.13\",\n \"syn 0.15.44\",\n]\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.46\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7969661fd2958a5cb096e56c8e1ad0444ac2bbcd0061bd28660485a44879858f\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-iter\"\nversion = \"0.1.45\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1429034a0490724d0075ebb2bc9e875d6503c3cf69e235a8941aa757d83ef5bf\"\ndependencies = [\n \"autocfg\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-rational\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c000134b5dbf44adc5cb772486d335293351644b801551abe8f75c84cfa4aef\"\ndependencies = [\n \"autocfg\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"objc\"\nversion = \"0.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"915b1b472bc21c53464d6c8461c9d3af805ba1ef837e1cac254428f4a77177b1\"\ndependencies = [\n \"malloc_buf\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.20.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1261fe7e33c73b354eab43b1273a57c8f967d0391e80353e51f764ac02cf6775\"\n\n[[package]]\nname = \"option-ext\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04744f49eae99ab78e0d5c0b603ab218f515ea8cfe5a456d7629ad883a3b6e7d\"\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall\",\n \"smallvec\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"path-absolutize\"\nversion = \"3.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e4af381fe79fa195b4909485d99f73a80792331df0625188e707854f0b3383f5\"\ndependencies = [\n \"path-dedot\",\n]\n\n[[package]]\nname = \"path-dedot\"\nversion = \"3.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07ba0ad7e047712414213ff67533e6dd477af0a4e1d14fb52343e53d30ea9397\"\ndependencies = [\n \"once_cell\",\n]\n\n[[package]]\nname = \"pathdiff\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df94ce210e5bc13cb6651479fa48d14f601d9858cfe0467f43ae157023b938d3\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"953ec861398dccce10c670dfeaf3ec4911ca479e9c02154b3a215178c5f566f2\"\n\n[[package]]\nname = \"png\"\nversion = \"0.15.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef859a23054bbfee7811284275ae522f0434a3c8e7f4b74bd4a35ae7e1c4a283\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"crc32fast\",\n \"deflate\",\n \"inflate\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"0.4.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf3d2011ab5c909338f7887f4fc896d35932e29146c12c8d01da6b22a80ba759\"\ndependencies = [\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d3544b3f2748c54e147655edb5025752e2303145b5aefb3c3ea2c78b973bb0\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"0.6.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ce23b6b870e8f94f81fb0a363d65d86675884b34a09043c81e5562f11c1f8e1\"\ndependencies = [\n \"proc-macro2 0.4.30\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2 1.0.92\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03\"\ndependencies = [\n \"getrandom 0.1.16\",\n \"libc\",\n \"rand_chacha 0.2.2\",\n \"rand_core 0.5.1\",\n \"rand_hc\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha 0.3.1\",\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core 0.5.1\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\ndependencies = [\n \"getrandom 0.1.16\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom 0.2.15\",\n]\n\n[[package]]\nname = \"rand_hc\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\ndependencies = [\n \"rand_core 0.5.1\",\n]\n\n[[package]]\nname = \"rayon\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b418a60154510ca1a002a752ca9714984e21e4241e804d32555251faf8b78ffa\"\ndependencies = [\n \"either\",\n \"rayon-core\",\n]\n\n[[package]]\nname = \"rayon-core\"\nversion = \"1.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1465873a3dfdaa8ae7cb14b4383657caab0b3e8a0aa9ae8e04b044854c8dfce2\"\ndependencies = [\n \"crossbeam-deque\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.5.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"03a862b389f93e68874fbf580b9de08dd02facb9a788ebadaf4a3fd33cf58834\"\ndependencies = [\n \"bitflags 2.6.0\",\n]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba009ff324d1fc1b900bd1fdb31564febe58a8ccc8a6fdbb93b543d33b13ca43\"\ndependencies = [\n \"getrandom 0.2.15\",\n \"libredox\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c\"\n\n[[package]]\nname = \"rusqlite\"\nversion = \"0.31.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b838eba278d213a8beaf485bd313fd580ca4505a00d5871caeb1457c55322cae\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"fallible-iterator\",\n \"fallible-streaming-iterator\",\n \"hashlink\",\n \"libsqlite3-sys\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"scoped_threadpool\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d51f5df5af43ab3f1360b429fa5e0152ac5ce8c0bd6485cae490332e96846a8\"\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.216\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b9781016e935a97e8beecf0c933758c97a5520d32930e460142b4cd80c6338e\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.216\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46f859dbbf73865c6627ed570e78961cd3ac92407a2d117204c49232485da55e\"\ndependencies = [\n \"proc-macro2 1.0.92\",\n \"quote 1.0.37\",\n \"syn 2.0.90\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.133\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7fceb2473b9166b2294ef05efcb65a3db80803f0b03ef86a5fc88a2b85ee377\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_spanned\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87607cb1398ed59d48732e575a4c28a7a8ebf2454b964fe3f224f2afc07909e1\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"shellexpand\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da03fa3b94cc19e3ebfc88c4229c49d8f08cdbd1228870a45f0ffdf84988e14b\"\ndependencies = [\n \"dirs\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"signal-hook\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8621587d4798caf8eb44879d42e56b9a93ea5dcd315a6487c357130095b62801\"\ndependencies = [\n \"libc\",\n \"signal-hook-registry\",\n]\n\n[[package]]\nname = \"signal-hook-mio\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34db1a06d485c9142248b7a054f034b349b212551f3dfd19c94d45a754a217cd\"\ndependencies = [\n \"libc\",\n \"mio\",\n \"signal-hook\",\n]\n\n[[package]]\nname = \"signal-hook-registry\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a9e9e0b4211b72e7b8b6e85c807d36c212bdb33ea8587f7569562a84df5465b1\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f\"\n\n[[package]]\nname = \"syn\"\nversion = \"0.15.44\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ca4b3b69a77cbe1ffc9e198781b7acb0c7365a883670e8f1c1bc66fba79a5c5\"\ndependencies = [\n \"proc-macro2 0.4.30\",\n \"quote 0.6.13\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.90\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"919d3b74a5dd0ccd15aeb8f93e7006bd9e14c295087c9896a110f490752bcf31\"\ndependencies = [\n \"proc-macro2 1.0.92\",\n \"quote 1.0.37\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6aaf5339b578ea85b50e080feb250a3e8ae8cfcdff9a461c9ec2904bc923f52\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fee6c4efc90059e10f81e6d42c60a18f76588c3d74cb83a0b242a2b6c7504c1\"\ndependencies = [\n \"proc-macro2 1.0.92\",\n \"quote 1.0.37\",\n \"syn 2.0.90\",\n]\n\n[[package]]\nname = \"tiff\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d7b7c2cfc4742bd8a32f2e614339dd8ce30dbcf676bb262bd63a2327bc5df57d\"\ndependencies = [\n \"byteorder\",\n \"lzw\",\n \"num-derive\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"toml\"\nversion = \"0.8.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1ed1f98e3fdc28d6d910e6737ae6ab1a93bf1985935a1193e68f93eeb68d24e\"\ndependencies = [\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"toml_edit\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.22.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ae48d6208a266e853d946088ed816055e556cc6028c5e8e2b84d9fa5dd7c7f5\"\ndependencies = [\n \"indexmap\",\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adb9e6ca4f869e1180728b7950e35922a7fc6397f7b641499e8f3ef06e50dc83\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6ccf251212114b54433ec949fd6a7841275f9ada20dddd2f29e9ceea4501493\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821\"\n\n[[package]]\nname = \"vcpkg\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.9.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.99\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a474f6281d1d70c17ae7aa6a613c87fce69a127e2624002df63dcb39d6cf6396\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.99\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f89bb38646b4f81674e8f5c3fb81b562be1fd936d84320f3264486418519c79\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"proc-macro2 1.0.92\",\n \"quote 1.0.37\",\n \"syn 2.0.90\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.99\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2cc6181fd9a7492eef6fef1f33961e3695e4579b9872a6f7c83aee556666d4fe\"\ndependencies = [\n \"quote 1.0.37\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.99\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30d7a95b763d3c45903ed6c81f156801839e5ee968bb07e534c44df0fcd330c2\"\ndependencies = [\n \"proc-macro2 1.0.92\",\n \"quote 1.0.37\",\n \"syn 2.0.90\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.99\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"943aab3fdaaa029a6e0271b35ea10b72b943135afe9bffca82384098ad0e06a6\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.59.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.5\",\n \"windows_aarch64_msvc 0.48.5\",\n \"windows_i686_gnu 0.48.5\",\n \"windows_i686_msvc 0.48.5\",\n \"windows_x86_64_gnu 0.48.5\",\n \"windows_x86_64_gnullvm 0.48.5\",\n \"windows_x86_64_msvc 0.48.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.52.6\",\n \"windows_aarch64_msvc 0.52.6\",\n \"windows_i686_gnu 0.52.6\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc 0.52.6\",\n \"windows_x86_64_gnu 0.52.6\",\n \"windows_x86_64_gnullvm 0.52.6\",\n \"windows_x86_64_msvc 0.52.6\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.6.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"36c1fec1a2bb5866f07c25f68c26e565c4c200aebb96d7e55710c19d3e8ac49b\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"x11\"\nversion = \"2.21.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"502da5464ccd04011667b11c435cb992822c2c0dbde1770c988480d312a0db2e\"\ndependencies = [\n \"libc\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2 1.0.92\",\n \"quote 1.0.37\",\n \"syn 2.0.90\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.4443359375,
          "content": "[package]\nname = \"mcfly\"\nversion = \"0.9.2\"\nauthors = [\"Andrew Cantino <cantino@users.noreply.github.com>\"]\nedition = \"2021\"\ndescription = \"McFly replaces your default ctrl-r shell history search with an intelligent search engine that takes into account your working directory and the context of recently executed commands. McFly's suggestions are prioritized in real time with a small neural network.\"\nlicense = \"MIT\"\nrepository = \"https://github.com/cantino/mcfly\"\ncategories = [\"command-line-utilities\"]\nexclude = [\"HomebrewFormula\", \"HomebrewFormula/*\", \"pkg/*\", \"docs/*\"]\n\n[profile.release]\nlto = true\n\n[profile.dev]\ndebug = true\n\n[dependencies]\nconfig = { version = \"0.14.0\", default-features = false, features = [\"toml\"] }\nchrono = \"0.4\"\nchrono-systemd-time = \"0.3\"\ncsv = \"1\"\nserde_json = \"1\"\nserde = { version = \"1\", features = [\"derive\"] }\nhumantime = \"2.1\"\ndirectories-next = \"2.0\"\nitertools = \"0.12\"\nrand = \"0.8\"\npath-absolutize = \"3.1\"\nregex = { version = \"1\", default-features = false, features = [\"perf\", \"std\"] }\nshellexpand = \"3\"\nunicode-segmentation = \"1.11\"\n\n[dependencies.rusqlite]\nversion = \"0.31\"\nfeatures = [\"functions\", \"unlock_notify\"]\n\n[dependencies.crossterm]\nversion = \"0.27\"\nfeatures = [\"use-dev-tty\"]\n\n[dependencies.clap]\nversion = \"4\"\nfeatures = [\"derive\"]\n\n[target.'cfg(not(windows))'.dependencies]\nlibc = \"0.2\"\n\n[target.'cfg(windows)'.dependencies]\nautopilot = \"0.4.0\"\n\n[features]\ndefault = [\"sqlite-bundled\"]\nsqlite-bundled = [\"rusqlite/bundled\"]\n"
        },
        {
          "name": "HomebrewFormula",
          "type": "blob",
          "size": 0.009765625,
          "content": "./pkg/brew"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05078125,
          "content": "The MIT License\n\nCopyright (c) 2018, Andrew Cantino\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.2119140625,
          "content": "> **Seeking co-maintainers**:\n> I don't have much time to maintain this project these days. If someone would like to jump in and become a co-maintainer, it would be appreciated!\n\n![Build Status](https://github.com/cantino/mcfly/actions/workflows/mean_bean_ci.yml/badge.svg)\n[![](https://img.shields.io/crates/v/mcfly.svg)](https://crates.io/crates/mcfly)\n\n# McFly - fly through your shell history\n\n<img src=\"/docs/screenshot.png\" alt=\"screenshot\" width=\"400\">\n\nMcFly replaces your default `ctrl-r` shell history search with an intelligent search engine that takes into account\nyour working directory and the context of recently executed commands. McFly's suggestions are prioritized\nin real time with a small neural network.\n\nTL;DR: an upgraded `ctrl-r` where history results make sense for what you're working on right now.\n\n## Features\n\n* Rebinds `ctrl-r` to bring up a full-screen reverse history search prioritized with a small neural network.\n* Augments your shell history to track command exit status, timestamp, and execution directory in a SQLite database.\n* Maintains your normal shell history file as well so that you can stop using McFly whenever you want.\n* Unicode support throughout.\n* Includes a simple action to scrub any history item from the McFly database and your shell history files.\n* Designed to be extensible for other shells in the future.\n* Written in Rust, so it's fast and safe.\n* You can type `%` to match any number of characters when searching.\n* Supports Zsh, Bash (version 3+), and PowerShell (version 7+)\n\n## Prioritization\n\nThe key feature of McFly is smart command prioritization powered by a small neural network that runs\nin real time. The goal is for the command you want to run to always be one of the top suggestions.\n\nWhen suggesting a command, McFly takes into consideration:\n\n* The directory where you ran the command. You're likely to run that command in the same directory in the future.\n* What commands you typed before the command (e.g., the command's execution context).\n* How often you run the command.\n* When you last ran the command.\n* If you've selected the command in McFly before.\n* The command's historical exit status. You probably don't want to run old failed commands.\n\n## Installation\n\n### Install with Homebrew (on macOS or Linux)\n\n1. Install `mcfly`:\n    ```bash\n    brew install mcfly\n    ```\n1. Add the following to the end of your `~/.bashrc`, `~/.zshrc`, or `~/.config/fish/config.fish` file:\n\n   Bash:\n    ```bash\n    eval \"$(mcfly init bash)\"\n    ```\n\n   Zsh:\n    ```bash\n    eval \"$(mcfly init zsh)\"\n    ```\n\n   Fish:\n    ```bash\n    mcfly init fish | source\n    ```\n1. Run `. ~/.bashrc` / `. ~/.zshrc` / `source ~/.config/fish/config.fish` or restart your terminal emulator.\n\n#### Uninstalling with Homebrew\n\n1. Remove `mcfly`:\n    ```bash\n    brew uninstall mcfly\n    ```\n1. Remove the lines you added to `~/.bashrc` / `~/.zshrc` / `~/.config/fish/config.fish`.\n\n### Install with MacPorts (on macOS)\n\n1. Update the ports tree\n    ```bash\n    sudo port selfupdate\n    ```\n1. Install `mcfly`:\n    ```bash\n    sudo port install mcfly\n    ```\n1. Add the following to the end of your `~/.bashrc`, `~/.zshrc`, or `~/.config/fish/config.fish` file, as appropriate:\n\n   Bash:\n    ```bash\n    eval \"$(mcfly init bash)\"\n    ```\n\n   Zsh:\n    ```bash\n    eval \"$(mcfly init zsh)\"\n    ```\n\n   Fish:\n    ```bash\n    mcfly init fish | source\n    ```\n1. Run `. ~/.bashrc` / `. ~/.zshrc` / `source ~/.config/fish/config.fish` or restart your terminal emulator.\n\n#### Uninstalling with MacPorts\n\n1. Remove `mcfly`:\n    ```bash\n    sudo port uninstall mcfly\n    ```\n1. Remove the lines you added to `~/.bashrc` / `~/.zshrc` / `~/.config/fish/config.fish`.\n\n### Installing using our install script (macOS or Linux)\n\n1. `curl -LSfs https://raw.githubusercontent.com/cantino/mcfly/master/ci/install.sh | sh -s -- --git cantino/mcfly` (or, if the current user doesn't have permissions to edit /usr/local/bin, then use `sudo sh -s`.)\n\n2. Add the following to the end of your `~/.bashrc`, `~/.zshrc`, or `~/.config/fish/config.fish` file, respectively:\n\n   Bash:\n\n   ```bash\n   eval \"$(mcfly init bash)\"\n   ```\n\n   Zsh:\n\n   ```bash\n   eval \"$(mcfly init zsh)\"\n   ```\n\n   Fish:\n   ```bash\n   mcfly init fish | source\n   ```\n\n3. Run `. ~/.bashrc` / `. ~/.zshrc` / `source ~/.config/fish/config.fish` or restart your terminal emulator.\n\n### Installing manually from GitHub (macOS or Linux)\n\n1. Download the [latest release from GitHub](https://github.com/cantino/mcfly/releases).\n1. Install to a location in your `$PATH`. (For example, you could create a directory at `~/bin`, copy `mcfly` to this location, and add `export PATH=\"$PATH:$HOME/bin\"` to your `.bashrc` / `.zshrc`, or run `set -Ua fish_user_paths \"$HOME/bin\"` for fish.)\n1. Add the following to the end of your `~/.bashrc`, `~/.zshrc`, or `~/.config/fish/config.fish`, respectively:\n\n   Bash:\n    ```bash\n    eval \"$(mcfly init bash)\"\n    ```\n\n   Zsh:\n    ```bash\n    eval \"$(mcfly init zsh)\"\n    ```\n\n   Fish:\n    ```bash\n    mcfly init fish | source\n    ```\n\n1. Run `. ~/.bashrc` / `. ~/.zshrc` / `source ~/.config/fish/config.fish` or restart your terminal emulator.\n\n### Install manually from source (macOS, Linux, or Windows)\n\n1. [Install Rust 1.40 or later](https://www.rust-lang.org/tools/install)\n1. Run `git clone https://github.com/cantino/mcfly` and `cd mcfly`\n1. Run `cargo install --path .`\n1. Ensure `~/.cargo/bin` is in your `$PATH`.\n1. Add the following to the end of your `~/.bashrc`, `~/.zshrc`, `~/.config/fish/config.fish`, or powershell `$PROFILE`, respectively:\n\n   Bash:\n    ```bash\n    eval \"$(mcfly init bash)\"\n    ```\n\n   Zsh:\n    ```bash\n    eval \"$(mcfly init zsh)\"\n    ```\n\n   Fish:\n    ```bash\n    mcfly init fish | source\n    ```\n\n    Powershell Core (pwsh)\n    ```powershell\n    Invoke-Expression -Command $(mcfly init powershell | out-string)\n    ```\n\n1. Run `. ~/.bashrc` / `. ~/.zshrc` / `source ~/.config/fish/config.fish` / `. $PROFILE` or restart your terminal emulator.\n\n### Install by [Zinit](https://github.com/zdharma-continuum/zinit)\n\n* Add below code to your zshrc.\n\n    ```zsh\n    zinit ice lucid wait\"0a\" from\"gh-r\" as\"program\" atload'eval \"$(mcfly init zsh)\"'\n    zinit light cantino/mcfly\n    ```\n* It will download mcfly and install for you.\n* `$(mcfly init zsh)` will be executed after prompt\n\n## iTerm2\n\nTo avoid McFly's UI messing up your scrollback history in iTerm2, make sure this option is unchecked:\n\n<img src=\"/docs/iterm2.jpeg\" alt=\"iterm2 UI instructions\">\n\n## Dump history\n\nMcFly can dump the command history into *stdout*.\n\nFor example:\n```bash\nmcfly dump --since '2023-01-01' --before '2023-09-12 09:15:30'\n```\nwill dump the command run between *2023-01-01 00:00:00.0* to *2023-09-12 09:15:30*(**exclusive**) as **json**.\nYou can specify **csv** as dump format via `--format csv` as well.\n\nEach item in dumped commands has the following fields:\n* `cmd`: The run command.\n* `when_run`: The time when the command ran in your local timezone.\n\nYou can dump all the commands history without any arguments:\n```bash\nmcfly dump\n```\n\n### Timestamp format\n\nMcFly parses timestamps via `chrono-systemd-time`, a non-strict implementation of [systemd.time](https://www.freedesktop.org/software/systemd/man/systemd.time.html), with the following exceptions:\n* time units **must** accompany all time span values.\n* time zone suffixes are **not** supported.\n* weekday prefixes are **not** supported.\n\nMcFly users simply need to understand **specifying timezone in timestamp isn't allowed**.\nMcFly will always use your **local timezone**.\n\nFor more details, please refer to the [`chrono-systemd-time` documentation](https://docs.rs/chrono-systemd-time/latest/chrono_systemd_time/).\n\n### Regex\n*Dump* supports filtering commands with regex.\nThe regex syntax follows [crate regex](https://docs.rs/regex/latest/regex/#syntax).\n\nFor example:\n```bash\nmcfly dump -r '^cargo run'\n```\nwill dump all command prefixes with `cargo run`.\n\nYou can use `-r/--regex` and time options at the same time.\n\nFor example:\n```bash\nmcfly dump -r '^cargo run' --since '2023-09-12 09:15:30'\n```\nwill dump all command prefixes with `cargo run` ran since *2023-09-12 09:15:30*.\n\n## Settings\nA number of settings can be set via environment variables. To set a setting you should add the following snippets to your `~/.bashrc` / `~/.zshrc` / `~/.config/fish/config.fish`.\n\n### Light Mode\nTo swap the color scheme for use in a light terminal, set the environment variable `MCFLY_LIGHT`.\n\nbash / zsh:\n```bash\nexport MCFLY_LIGHT=TRUE\n```\n\nfish:\n```bash\nset -gx MCFLY_LIGHT TRUE\n```\n\npowershell:\n```powershell\n$env:MCFLY_LIGHT = \"TRUE\"\n```\n\nTip: on macOS you can use the following snippet for color scheme to be configured based on system-wide settings:\n\nbash / zsh:\n```bash\nif [[ \"$(defaults read -g AppleInterfaceStyle 2&>/dev/null)\" != \"Dark\" ]]; then\n    export MCFLY_LIGHT=TRUE\nfi\n```\n\n### VIM Key Scheme\nBy default Mcfly uses an `emacs` inspired key scheme. If you would like to switch to the `vim` inspired key scheme, set the environment variable `MCFLY_KEY_SCHEME`.\n\nbash / zsh:\n```bash\nexport MCFLY_KEY_SCHEME=vim\n```\n\nfish:\n```bash\nset -gx MCFLY_KEY_SCHEME vim\n```\n\npowershell:\n```powershell\n$env:MCFLY_KEY_SCHEME=\"vim\"\n```\n\n### Fuzzy Searching\nTo enable fuzzy searching, set `MCFLY_FUZZY` to an integer. 0 is off; higher numbers weight toward shorter matches. Values in the 2-5 range get good results so far; try a few and [report what works best for you](https://github.com/cantino/mcfly/issues/183)!\n\nbash / zsh:\n```bash\nexport MCFLY_FUZZY=2\n```\n\nfish:\n```bash\nset -gx MCFLY_FUZZY 2\n```\n\npowershell:\n```powershell\n$env:MCFLY_FUZZY=2\n```\n\n### Results Count\nTo change the maximum number of results shown, set `MCFLY_RESULTS` (default: 10).\n\nbash / zsh:\n```bash\nexport MCFLY_RESULTS=50\n```\n\nfish:\n```bash\nset -gx MCFLY_RESULTS 50\n```\n\npowershell:\n```powershell\n$env:MCFLY_RESULTS=50\n```\n\n### Delete without confirmation\nTo delete without confirmation, set `MCFLY_DELETE_WITHOUT_CONFIRM` to true.\n\nbash / zsh:\n```bash\nexport MCFLY_DELETE_WITHOUT_CONFIRM=true\n```\n\nfish:\n```bash\nset -gx MCFLY_DELETE_WITHOUT_CONFIRM true\n```\n\npowershell:\n```powershell\n$env:MCFLY_DELETE_WITHOUT_CONFIRM=\"true\"\n```\n\n### Interface view\nTo change interface view, set `MCFLY_INTERFACE_VIEW` (default: `TOP`).\nAvailable options: `TOP` and `BOTTOM`\n\nbash / zsh:\n```bash\nexport MCFLY_INTERFACE_VIEW=BOTTOM\n```\n\nfish:\n```bash\nset -gx MCFLY_INTERFACE_VIEW BOTTOM\n```\n\npowershell:\n```powershell\n$env:MCFLY_INTERFACE_VIEW=\"BOTTOM\"\n```\n\n### Disable menu interface\nTo disable the menu interface, set the environment variable `MCFLY_DISABLE_MENU`.\n\nbash / zsh:\n```bash\nexport MCFLY_DISABLE_MENU=TRUE\n```\n\nfish:\n```bash\nset -gx MCFLY_DISABLE_MENU TRUE\n```\n\npowershell:\n```powershell\n$env:MCFLY_DISABLE_MENU=true\n ```\n\n### Results sorting\nTo change the sorting of results shown, set `MCFLY_RESULTS_SORT` (default: RANK).\nPossible values `RANK` and `LAST_RUN`\n\nbash / zsh:\n```bash\nexport MCFLY_RESULTS_SORT=LAST_RUN\n```\n\nfish:\n```bash\nset -gx MCFLY_RESULTS_SORT LAST_RUN\n```\n\npowershell:\n```powershell\n$env:MCFLY_RESULTS_SORT=\"LAST_RUN\"\n ```\n\n### Custom Prompt\nTo change the prompt, set `MCFLY_PROMPT` (default: `$`).\n\nbash / zsh:\n```bash\nexport MCFLY_PROMPT=\"❯\"\n```\n\nfish:\n```bash\nset -gx MCFLY_PROMPT \"❯\"\n```\n\npowershell:\n```powershell\n$env:MCFLY_PROMPT=\">\"\n ```\n\nNote that only single-character-prompts are allowed. setting `MCFLY_PROMPT` to `\"<str>\"` will reset it to the default prompt.\n\n### Database Location\n\nMcFly stores its SQLite database in the standard location for the OS. On OS X, this is in `~/Library/Application Support/McFly`, on Linux it is in `$XDG_DATA_DIR/mcfly/history.db` (default would be `~/.local/share/mcfly/history.db`), and on Windows, it is `%LOCALAPPDATA%\\McFly\\data\\history.db`. For legacy support, if `~/.mcfly/` exists, it is used instead.\n\n### Slow startup\n\nIf you have a very large history database and you notice that McFly launches slowly, you can set `MCFLY_HISTORY_LIMIT` to something like 10000 to limit how many records are considered when searching. In this example, McFly would search only the latest 10,000 entries.\n\n### Bash TIOCSTI\n\nStarting with Linux kernel version 6.2, some systems have disabled TIOCSTI (which McFly previously used to write the selected command). McFly works around this issue by using two \"dummy\" keybindings, which default to `ctrl-x 1` and `ctrl-x 2`. If you are using either of these for another purpose, you can set the `MCFLY_BASH_SEARCH_KEYBINDING` and `MCFLY_BASH_ACCEPT_LINE_KEYBINDING`, respectively, to something you are not using. If you would prefer to use the legacy TIOCSTI behavior, you can enable it by setting the `sysctl` variable `dev.tty.legacy_tiocsti` to `1` on your system and set the `MCFLY_BASH_USE_TIOCSTI` bash variable to `1`.\n\n## HISTTIMEFORMAT\n\nMcFly currently doesn't parse or use `HISTTIMEFORMAT`.\n\n## Possible Future Features\n\n* Add a screencast to README.\n* Learn common command options and autocomplete them in the suggestion UI?\n* Sort command line args when coming up with the template matching string.\n* Possible prioritization improvements:\n   * Cross validation & explicit training set selection.\n   * Learn command embeddings\n\n## Development\n\n### Contributing\n\nContributions and bug fixes are encouraged! However, we may not merge PRs that increase complexity significantly beyond what is already required to maintain the project. If you're in doubt, feel free to open an issue and ask.\n\n### Running tests\n\n`cargo test`\n\n### Releasing (notes for @cantino)\n\n1. Edit `Cargo.toml` and bump the version.\n1. Edit CHANGELOG.txt\n1. Run `cargo clippy` and `cargo fmt`.\n1. Recompile (`cargo build`) and test (`cargo test`)\n1. `git add -p`\n1. `git ci -m 'Bumping to vx.x.x'`\n1. `git tag vx.x.x`\n1. `git push origin head --tags`\n1. Let the build finish.\n1. Edit the new Release on Github.\n1. `cargo publish`\n1. TBD: update homebrew-core Formula at https://github.com/Homebrew/homebrew-core/blob/master/Formula/m/mcfly.rb\n\nOld:\n1. Edit `pkg/brew/mcfly.rb` and update the version and SHAs. (`shasum -a 256 ...`)\n1. Edit `../homebrew-mcfly/pkg/brew/mcfly.rb` too.\n  1. `cp pkg/brew/mcfly.rb ../homebrew-mcfly/pkg/brew/mcfly.rb`\n  1. Compare with `diff ../homebrew-mcfly/pkg/brew/mcfly.rb ../mcfly/pkg/brew/mcfly.rb ; diff ../homebrew-mcfly/HomebrewFormula/mcfly.rb ../mcfly/HomebrewFormula/mcfly.rb`\n1. `git add -p && git ci -m 'Update homebrew' && git push`\n1. `cd ../homebrew-mcfly && git add -p && git ci -m 'Update homebrew' && git push && cd ../mcfly`\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev.bash",
          "type": "blob",
          "size": 0.4560546875,
          "content": "#!/bin/bash\n# Build mcfly and run a dev environment bash for local mcfly testing\n\nif ! this_dir=$(cd \"$(dirname \"$0\")\" && pwd); then\n    exit $?\nfi\n\nrm -f target/debug/mcfly\ncargo build\n# For some reason, to get line numbers in backtraces, we have to run the binary directly.\nHISTFILE=$HOME/.bash_history \\\n  MCFLY_PATH=target/debug/mcfly \\\n  RUST_BACKTRACE=full \\\n  MCFLY_DEBUG=1 \\\n  PATH=target/debug/:$PATH \\\n  exec /bin/bash --init-file \"$this_dir/mcfly.bash\" -i\n"
        },
        {
          "name": "dev.fish",
          "type": "blob",
          "size": 0.51953125,
          "content": "#!/bin/bash\n# Build mcfly and run a dev environment fish for local mcfly testing\n\nthis_dir=$(cd `dirname \"$0\"`; pwd)\n\n# Setup for local testing.\nmkdir -p $this_dir/.fish\n\nrm -f target/debug/mcfly\ncargo build\n# For some reason, to get line numbers in backtraces, we have to run the binary directly.\nXDG_DATA_HOME=$this_dir/.fish \\\n  MCFLY_PATH=target/debug/mcfly \\\n  RUST_BACKTRACE=full \\\n  MCFLY_DEBUG=1 \\\n  PATH=target/debug/:$PATH \\\n  exec /usr/bin/env fish -i --init-command \"source $this_dir/mcfly.fish; and mcfly_key_bindings\"\n"
        },
        {
          "name": "dev.zsh",
          "type": "blob",
          "size": 0.5927734375,
          "content": "#!/bin/bash\n# Build mcfly and run a dev environment zsh for local mcfly testing\n\nthis_dir=$(cd `dirname \"$0\"`; pwd)\n\n# Setup for local testing.\ntouch $this_dir/.zsh_history\n\n# Needed so that the test instance of zsh sources the local mcfly.zsh file on startup.\necho \"source ./mcfly.zsh\" > $this_dir/.zshrc\n\nrm -f target/debug/mcfly\ncargo build\n# For some reason, to get line numbers in backtraces, we have to run the binary directly.\nHISTFILE=$HOME/.zsh_history \\\n  MCFLY_PATH=target/debug/mcfly \\\n  RUST_BACKTRACE=full \\\n  MCFLY_DEBUG=1 \\\n  ZDOTDIR=\"$this_dir\" \\\n  PATH=target/debug/:$PATH \\\n  /bin/zsh -i\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "mcfly.bash",
          "type": "blob",
          "size": 7.3798828125,
          "content": "#!/bin/bash\n\nfunction mcfly_initialize {\n  # Note: We avoid using [[ ... ]] to check the Bash version because we are\n  # even unsure whether it is available before confirming the Bash version.\n  if [ -z \"${BASH_VERSINFO-}\" ] || [ \"${BASH_VERSINFO-}\" -lt 3 ]; then\n    printf 'mcfly.bash: This setup requires Bash >= 3.0.' >&2\n    return 1\n  fi\n\n  unset -f \"${FUNCNAME[0]}\"\n\n  # Ensure stdin is a tty\n  [[ -t 0 ]] || return 0\n\n  # Ensure an interactive shell\n  [[ $- =~ .*i.* ]] || return 0\n\n  # Avoid loading this file more than once\n  [[ ${__MCFLY_LOADED-} != \"loaded\" ]] || return 0\n  __MCFLY_LOADED=\"loaded\"\n\n  # Setup MCFLY_HISTFILE and make sure it exists.\n  export MCFLY_HISTFILE=\"${HISTFILE:-$HOME/.bash_history}\"\n  MCFLY_BASH_SEARCH_KEYBINDING=${MCFLY_BASH_SEARCH_KEYBINDING:-\"\\C-x1\"}\n  MCFLY_BASH_ACCEPT_LINE_KEYBINDING=${MCFLY_BASH_ACCEPT_LINE_KEYBINDING:-\"\\C-x2\"}\n  if [[ ! -r ${MCFLY_HISTFILE} ]]; then\n    echo \"McFly: ${MCFLY_HISTFILE} does not exist or is not readable. Please fix this or set HISTFILE to something else before using McFly.\"\n    return 1\n  fi\n\n  # MCFLY_SESSION_ID is used by McFly internally to keep track of the commands from a particular terminal session.\n  MCFLY_SESSION_ID=\"$(command dd if=/dev/urandom bs=256 count=1 2> /dev/null | LC_ALL=C command tr -dc 'a-zA-Z0-9' | command head -c 24)\"\n  export MCFLY_SESSION_ID\n\n  # Find the binary\n  MCFLY_PATH=${MCFLY_PATH:-$(builtin type -P mcfly)}\n  if [[ $MCFLY_PATH != /* ]]; then\n    # When the user include a relative path in PATH, \"builtin type -P\" may\n    # produce a relative path.  We convert relative paths to the absolute ones.\n    MCFLY_PATH=$PWD/$MCFLY_PATH\n  fi\n  if [[ ! -x $MCFLY_PATH ]]; then\n    echo \"Cannot find the mcfly binary, please make sure that mcfly is in your path before sourcing mcfly.bash.\"\n    return 1\n  fi\n\n  # Ignore commands with a leading space\n  export HISTCONTROL=\"${HISTCONTROL:-ignorespace}\"\n\n  # Append new history items to .bash_history\n  shopt -s histappend\n\n  # Setup a function to be used by $PROMPT_COMMAND.\n  function mcfly_prompt_command {\n    local exit_code=$? # Record exit status of previous command.\n\n    # Populate McFly's temporary, per-session history file from recent commands in the shell's primary HISTFILE.\n    if [[ ! -f ${MCFLY_HISTORY-} ]]; then\n      MCFLY_HISTORY=$(command mktemp \"${TMPDIR:-/tmp}\"/mcfly.XXXXXXXX)\n      export MCFLY_HISTORY\n      command tail -n100 \"${MCFLY_HISTFILE}\" >| \"${MCFLY_HISTORY}\"\n    fi\n\n    history -a \"${MCFLY_HISTORY}\" # Append history to $MCFLY_HISTORY.\n    # Run mcfly with the saved code. It will:\n    # * append commands to $HISTFILE, (~/.bash_history by default)\n    #   for backwards compatibility and to load in new terminal sessions;\n    # * find the text of the last command in $MCFLY_HISTORY and save it to the database.\n    \"$MCFLY_PATH\" add --exit \"${exit_code}\" --append-to-histfile \"${MCFLY_HISTFILE}\"\n    # Clear the in-memory history and reload it from $MCFLY_HISTORY\n    # (to remove instances of '#mcfly: ' from the local session history).\n    history -cr \"${MCFLY_HISTORY}\"\n    return \"${exit_code}\" # Restore the original exit code by returning it.\n  }\n\n  function mcfly_add_prompt_command {\n    local command=$1 IFS=$' \\t\\n'\n    if ((BASH_VERSINFO[0] > 5 || BASH_VERSINFO[0] == 5 && BASH_VERSINFO[1] >= 1)); then\n      # Bash 5.1 supports array PROMPT_COMMAND, where we register our prompt\n      # command to a new element PROMPT_COMMAND[i] (with i >= 1) to avoid\n      # conflicts with other frameworks.\n      if [[ \" ${PROMPT_COMMAND[*]-} \" != *\" $command \"* ]]; then\n        PROMPT_COMMAND[0]=${PROMPT_COMMAND[0]:-}\n        # Note: We here use eval to avoid syntax error in Bash < 3.1.  We drop\n        # the support for Bash < 3.0, but this is still needed to avoid parse\n        # error before the Bash version check is performed.\n        eval 'PROMPT_COMMAND+=(\"$command\")'\n      fi\n    elif [[ -z ${PROMPT_COMMAND-} ]]; then\n      PROMPT_COMMAND=\"$command\"\n    elif [[ $PROMPT_COMMAND != *\"mcfly_prompt_command\"* ]]; then\n      PROMPT_COMMAND=\"$command;${PROMPT_COMMAND#;}\"\n    fi\n  }\n  # Set $PROMPT_COMMAND run mcfly_prompt_command, preserving any existing $PROMPT_COMMAND.\n  mcfly_add_prompt_command \"mcfly_prompt_command\"\n\n  function mcfly_search_with_tiocsti {\n    local LAST_EXIT_CODE=$? IFS=$' \\t\\n'\n    echo \"#mcfly: ${READLINE_LINE[*]}\" >> \"$MCFLY_HISTORY\"\n    READLINE_LINE=\n    \"$MCFLY_PATH\" search\n    return \"$LAST_EXIT_CODE\"\n  }\n\n  # Runs mcfly search with output to file, reads the output, and sets READLINE_LINE to the command.\n  # If the command is to be run, binds the MCFLY_KEYSTROKE2 to accept-line, otherwise binds it to nothing.\n  function mcfly_search {\n    local LAST_EXIT_CODE=$? IFS=$' \\t\\n'\n    # Get a temp file name but don't create the file - mcfly will create the file for us.\n    local MCFLY_OUTPUT\n    MCFLY_OUTPUT=$(command mktemp --dry-run \"${TMPDIR:-/tmp}\"/mcfly.output.XXXXXXXX)\n    echo \"#mcfly: ${READLINE_LINE[*]}\" >> \"$MCFLY_HISTORY\"\n    \"$MCFLY_PATH\" search -o \"$MCFLY_OUTPUT\"\n    # If the file doesn't exist, nothing was selected from mcfly, exit without binding accept-line\n    if [[ ! -f $MCFLY_OUTPUT ]]; then\n      bind \"\\\"$MCFLY_BASH_ACCEPT_LINE_KEYBINDING\\\":\\\"\\\"\"\n      return\n    fi\n    # Get the command and set the bash text to it, and move the cursor to the end of the line.\n    local MCFLY_COMMAND\n    MCFLY_COMMAND=$(command awk 'NR==2{$1=a; print substr($0, 2)}' \"$MCFLY_OUTPUT\")\n    READLINE_LINE=$MCFLY_COMMAND\n    READLINE_POINT=${#READLINE_LINE}\n\n    # Get the mode and bind the accept-line key if the mode is run.\n    local MCFLY_MODE\n    MCFLY_MODE=$(command awk 'NR==1{$1=a; print substr($0, 2)}' \"$MCFLY_OUTPUT\")\n    if [[ $MCFLY_MODE == \"run\" ]]; then\n      bind \"\\\"$MCFLY_BASH_ACCEPT_LINE_KEYBINDING\\\":accept-line\"\n    else\n      bind \"\\\"$MCFLY_BASH_ACCEPT_LINE_KEYBINDING\\\":\\\"\\\"\"\n    fi\n\n    command rm -f \"$MCFLY_OUTPUT\"\n    return \"$LAST_EXIT_CODE\"\n  }\n\n  # Take ownership of ctrl-r.\n  if ((BASH_VERSINFO[0] >= 4)); then\n    # shellcheck disable=SC2016\n    if [[ ${MCFLY_BASH_USE_TIOCSTI-} == 1 ]]; then\n      bind -m emacs     -x '\"\\C-r\": \"mcfly_search_with_tiocsti\"'\n      bind -m vi-insert -x '\"\\C-r\": \"mcfly_search_with_tiocsti\"'\n    else\n      # Bind ctrl+r to 2 keystrokes, the first one is used to search in McFly, the second one is used to run the command (if mcfly_search binds it to accept-line).\n      bind -m emacs     -x \"\\\"$MCFLY_BASH_SEARCH_KEYBINDING\\\":\\\"mcfly_search\\\"\"\n      bind -m vi-insert -x \"\\\"$MCFLY_BASH_SEARCH_KEYBINDING\\\":\\\"mcfly_search\\\"\"\n      bind -m emacs     \"\\\"\\C-r\\\":\\\"$MCFLY_BASH_SEARCH_KEYBINDING$MCFLY_BASH_ACCEPT_LINE_KEYBINDING\\\"\"\n      bind -m vi-insert \"\\\"\\C-r\\\":\\\"$MCFLY_BASH_SEARCH_KEYBINDING$MCFLY_BASH_ACCEPT_LINE_KEYBINDING\\\"\"\n    fi\n  else\n    # The logic here is:\n    #   1. Jump to the beginning of the edit buffer, add 'mcfly: ', and comment out the current line. We comment out the line\n    #      to ensure that all possible special characters, including backticks, are ignored. This commented out line will\n    #      end up as the most recent entry in the $MCFLY_HISTORY file.\n    #   2. Type \"mcfly search\" and then run the command. McFly will pull the last line from the $MCFLY_HISTORY file,\n    #      which should be the commented-out search from step #1. It will then remove that line from the history file and\n    #      render the search UI pre-filled with it.\n    bind -m emacs     '\"\\C-r\": \"\\C-amcfly: \\e# mcfly search\\C-m\"'\n    bind -m vi-insert '\"\\C-r\": \"\\e0i#mcfly: \\e\\C-m mcfly search\\C-m\"'\n  fi\n}\nmcfly_initialize\n"
        },
        {
          "name": "mcfly.fish",
          "type": "blob",
          "size": 3.447265625,
          "content": "#!/usr/bin/env fish\n\n# Avoid loading this file more than once\nif test \"$__MCFLY_LOADED\" != \"loaded\"\n  set -g __MCFLY_LOADED \"loaded\"\n\n  # If this is an interactive shell\n  if status is-interactive\n    # Note: we only use the history file for the session when this file was sourced.\n    # Would have to reset this before calling mcfly if you want commands from another session later.\n    if not set -q MCFLY_HISTFILE\n      set -gx MCFLY_HISTFILE (set -q XDG_DATA_HOME; and echo $XDG_DATA_HOME; or echo $HOME/.local/share)/fish/(set -q fish_history; and echo $fish_history; or echo fish)_history\n    end\n    if not test -r \"$MCFLY_HISTFILE\"\n      echo \"McFly: $MCFLY_HISTFILE does not exist or is not readable. Please fix this or set MCFLY_HISTFILE to something else before using McFly.\" >&2\n      exit 1\n    end\n\n    # MCFLY_SESSION_ID is used by McFly internally to keep track of the commands from a particular terminal session.\n    set -gx MCFLY_SESSION_ID (dd if=/dev/urandom bs=256 count=1 2>/dev/null | env LC_ALL=C tr -dc 'a-zA-Z0-9' | head -c 24)\n\n    # Find the binary\n    set -q MCFLY_PATH; or set -l MCFLY_PATH (command which mcfly)\n    if test -z \"$MCFLY_PATH\"; or test \"$MCFLY_PATH\" = \"mcfly not found\"\n      echo \"Cannot find the mcfly binary, please make sure that mcfly is in your path before sourcing mcfly.fish\"\n      exit 1\n    end\n    # We don't need a MCFLY_HISTORY file because we can get the last command in fish_postexec.\n    set -gx MCFLY_HISTORY /dev/null\n    set -g __MCFLY_CMD $MCFLY_PATH --mcfly_history $MCFLY_HISTORY --history_format fish\n\n    function __mcfly_save_old_pwd -d 'Save PWD before running command' -e fish_preexec\n      set -g __MCFLY_OLD_PWD \"$PWD\"\n    end\n\n    function __mcfly_add_command -d 'Add run commands to McFly database' -e fish_postexec\n      # Retain return code of last command before we lose it\n      set -l last_status $status\n      # Check for the private mode\n      test -n \"$fish_private_mode\"; and return\n      # Handle first call of this function after sourcing mcfly.fish, when the old PWD won't be set\n      set -q __MCFLY_OLD_PWD; or set -g __MCFLY_OLD_PWD \"$PWD\"\n\n      test -n \"$MCFLY_DEBUG\"; and echo mcfly.fish: Run eval $__MCFLY_CMD add --exit '$last_status' --old-dir '$__MCFLY_OLD_PWD' -- '$argv[1]'\n      eval $__MCFLY_CMD add --exit '$last_status' --old-dir '$__MCFLY_OLD_PWD' -- '$argv[1]'\n    end\n\n    # Set up key binding functions.\n    function __mcfly-history-widget -d \"Search command history with McFly\"\n      set tmpdir $TMPDIR\n      if test -z \"$tmpdir\"\n        set tmpdir /tmp\n      end\n      set -l mcfly_output (mktemp \"$tmpdir/mcfly.output.XXXXXXXX\")\n      eval $__MCFLY_CMD search -o '$mcfly_output' -- (commandline | string escape)\n\n      # Interpret commandline/run requests from McFly\n      set -l mode; set -l commandline\n      while read key val\n        test \"$key\" = \"mode\"; and set mode \"$val\"\n        test \"$key\" = \"commandline\"; and set commandline \"$val\"\n        test \"$key\" = \"delete\"; and history delete --exact --case-sensitive \"$val\"\n      end < \"$mcfly_output\"\n      rm -f $mcfly_output\n\n      if test -n \"$commandline\"\n        commandline \"$commandline\"\n      end\n      if test \"$mode\" = \"run\"\n        commandline -f execute\n      end\n      commandline -f repaint\n    end\n\n    function mcfly_key_bindings -d \"Default key bindings for McFly\"\n       bind \\cr __mcfly-history-widget\n       if bind -M insert >/dev/null 2>&1\n         bind -M insert \\cr __mcfly-history-widget\n       end\n    end\n\n    mcfly_key_bindings\n  end\nend\n"
        },
        {
          "name": "mcfly.ps1",
          "type": "blob",
          "size": 4.1328125,
          "content": "#!/usr/bin/env pwsh\n\n$null = New-Module mcfly {\n    # We need PSReadLine for a number of capabilities\n    if ($null -eq (Get-Module -Name PSReadLine)) {\n        Write-Host \"Installing PSReadLine as McFly dependency\"\n        Install-Module PSReadLine\n    }\n\n    # Get history file and make a dummy file for psreadline (hopefully after it has loaded the real history file to its in memory history)\n    $env:HISTFILE = $null -eq $env:HISTFILE -or \"\" -eq $env:HISTFILE ? (Get-PSReadLineOption).HistorySavePath : $env:HISTFILE;\n    $psreadline_dummy = New-TemporaryFile\n    # Append history to dummy file for compatibility\n    Get-Content -Path $Env:HISTFILE | Out-File -FilePath $psreadline_dummy -Force\n    Set-PSReadLineOption -HistorySavePath $psreadline_dummy.FullName\n\n\n    $fileExists = Test-Path -path $env:HISTFILE\n    if (-not $fileExists) {\n        Write-Host \"McFly: ${env:HISTFILE} does not exist or is not readable. Please fix this or set HISTFILE to something else before using McFly.\";\n        return 1;\n    }\n\n    # MCFLY_SESSION_ID is used by McFly internally to keep track of the commands from a particular terminal session.\n    $MCFLY_SESSION_ID = new-guid\n    $env:MCFLY_SESSION_ID = $MCFLY_SESSION_ID\n\n    $env:MCFLY_HISTORY = New-TemporaryFile\n    Get-Content $env:HISTFILE | Select-Object -Last 100 | Set-Content $env:MCFLY_HISTORY\n\n    <#\n    .SYNOPSIS\n    Cmdlet to run McFly\n\n    .PARAMETER CommandToComplete\n    The command to complete\n\n    .EXAMPLE\n    Invoke-McFly -CommandToComplete \"cargo bu\"\n    #>\n    function Invoke-McFly {\n        Param([string]$CommandToComplete)\n        $lastExitTmp = $LASTEXITCODE\n        $tempFile = New-TemporaryFile\n        Start-Process -FilePath '::MCFLY::' -ArgumentList \"search\", \"$CommandToComplete\", -o, \"$tempFile\" -NoNewWindow -Wait\n        foreach($line in Get-Content $tempFile) {\n            $key, $value = $line -split ' ', 2\n            if (\"mode\" -eq $key) {\n                $mode = $value\n            }\n            if (\"commandline\" -eq $key) {\n                $commandline = $value\n            }\n        }\n        if(-not ($null -eq $commandline)) {\n            [Microsoft.PowerShell.PSConsoleReadLine]::DeleteLine()\n            [Microsoft.PowerShell.PSConsoleReadline]::Insert($commandline)\n            if(\"run\" -eq $mode) {\n                [Microsoft.PowerShell.PSConsoleReadline]::AcceptLine()\n            }\n        }\n        Remove-Item $tempFile\n        $LASTEXITCODE = $lastExitTmp\n    }\n\n    <#\n    .SYNOPSIS\n    Add a command to McFly's history.\n\n    .PARAMETER Command\n    The string of the command to add to McFly's history\n\n    .PARAMETER ExitCode\n    The exit code of the command to add\n\n    .EXAMPLE\n    Add-CommandToMcFly -Command \"cargo build\"\n    #>\n    function Add-CommandToMcFly {\n        Param (\n            [string] $Command,\n            [int] $ExitCode\n        )\n        $ExitCode = $ExitCode ?? 0;\n        $Command | Out-File -FilePath $env:MCFLY_HISTORY -Append\n        Start-Process -FilePath '::MCFLY::' -ArgumentList add, --exit, $ExitCode, --append-to-histfile, $env:HISTFILE -NoNewWindow | Write-Host\n    }\n\n    # We need to make sure we call out AddToHistoryHandler right after each command is called\n    Set-PSReadLineOption -HistorySaveStyle SaveIncrementally\n\n    Set-PSReadLineOption -PredictionSource HistoryAndPlugin\n\n    Set-PSReadLineOption -AddToHistoryHandler {\n        Param([string]$Command)\n        $lastExitTmp = $LASTEXITCODE\n        $Command = $Command.Trim();\n        # PSReadLine executes this before the command even runs, so we don't know its exit code - assume 0\n        Add-CommandToMcFly -Command $Command -ExitCode 0\n        $LASTEXITCODE = $lastExitTmp\n        # Tell PSReadLine to save the command to their in-memory history (and also the dummy file)\n        return $true\n    }\n\n    Set-PSReadLineKeyHandler -Chord \"Ctrl+r\" -ScriptBlock {\n        $line = $null\n        $cursor = $null\n        [Microsoft.PowerShell.PSConsoleReadline]::GetBufferState([ref]$line, [ref]$cursor)\n        \"#mcfly: $line\" | Out-File -FilePath $env:MCFLY_HISTORY -Append\n        Invoke-McFly -CommandToComplete \"`\"$line`\"\"\n    }\n\n    Export-ModuleMember -Function @(\n        \"Invoke-McFly\"\n        \"Add-CommandToMcFly\"\n    )\n}\n"
        },
        {
          "name": "mcfly.zsh",
          "type": "blob",
          "size": 3.7607421875,
          "content": "#!/bin/zsh\n\n() {\n  # Ensure an interactive shell\n  [[ -o interactive ]] || return 0\n\n  # Setup MCFLY_HISTFILE and make sure it exists.\n  export MCFLY_HISTFILE=\"${HISTFILE:-$HOME/.zsh_history}\"\n  if [[ ! -r \"${MCFLY_HISTFILE}\" ]]; then\n    echo \"McFly: ${MCFLY_HISTFILE} does not exist or is not readable. Please fix this or set HISTFILE to something else before using McFly.\"\n    return 1\n  fi\n\n  # MCFLY_SESSION_ID is used by McFly internally to keep track of the commands from a particular terminal session.\n  export MCFLY_SESSION_ID=$(command dd if=/dev/urandom bs=256 count=1 2> /dev/null | LC_ALL=C command tr -dc 'a-zA-Z0-9' | command head -c 24)\n\n  # Find the binary\n  MCFLY_PATH=${MCFLY_PATH:-$(command which mcfly)}\n  if [[ -z \"$MCFLY_PATH\" || \"$MCFLY_PATH\" == \"mcfly not found\" ]]; then\n    echo \"Cannot find the mcfly binary, please make sure that mcfly is in your path before sourcing mcfly.zsh.\"\n    return 1\n  fi\n\n  # Required for commented out mcfly search commands to work.\n  setopt interactive_comments   # allow comments in interactive shells (like Bash does)\n\n  # McFly's temporary, per-session history file.\n  export MCFLY_HISTORY=$(command mktemp ${TMPDIR:-/tmp}/mcfly.XXXXXXXX)\n\n  # Check if we need to use extended history\n  if [[ -o extendedhistory ]]; then\n    export MCFLY_HISTORY_FORMAT=\"zsh-extended\"\n  else\n    export MCFLY_HISTORY_FORMAT=\"zsh\"\n  fi\n\n  # Setup a function to be used by $PROMPT_COMMAND.\n  function mcfly_prompt_command {\n    local exit_code=$? # Record exit status of previous command.\n\n    # Populate McFly's temporary, per-session history file from recent commands in the shell's primary HISTFILE.\n    if [[ ! -f \"${MCFLY_HISTORY}\" ]]; then\n      export MCFLY_HISTORY=$(command mktemp ${TMPDIR:-/tmp}/mcfly.XXXXXXXX)\n      command tail -n100 \"${MCFLY_HISTFILE}\" >| ${MCFLY_HISTORY}\n    fi\n\n    # Write history to $MCFLY_HISTORY.\n    fc -W \"${MCFLY_HISTORY}\"\n\n    # Run mcfly with the saved code. It find the text of the last command in $MCFLY_HISTORY and save it to the database.\n    [ -n \"$MCFLY_DEBUG\" ] && echo \"mcfly.zsh: Run mcfly add --exit ${exit_code}\"\n    $MCFLY_PATH --history_format $MCFLY_HISTORY_FORMAT add --exit ${exit_code}\n    return ${exit_code} # Restore the original exit code by returning it.\n  }\n\n  if [[ -z $precmd_functions ]] || [[ \"${precmd_functions[(ie)mcfly_prompt_command]}\" -gt ${#precmd_functions} ]]; then\n    precmd_functions+=(mcfly_prompt_command)\n  else\n    [ -n \"$MCFLY_DEBUG\" ] && echo \"mcfly_prompt_command already in precmd_functions, skipping\"\n  fi\n\n  # Cleanup $MCFLY_HISTORY tmp files on exit.\n  mcfly_exit_logger() {\n    [ -n \"$MCFLY_DEBUG\" ] && echo \"mcfly.zsh: Exiting and removing $MCFLY_HISTORY\"\n    command rm -f $MCFLY_HISTORY\n  }\n\n  if [[ -z $zshexit_functions ]] || [[ \"${zshexit_functions[(ie)mcfly_exit_logger]}\" -gt ${#zshexit_functions} ]]; then\n    zshexit_functions+=(mcfly_exit_logger)\n  else\n    [ -n \"$MCFLY_DEBUG\" ] && echo \"mcfly_exit_logger already in zshexit_functions, skipping\"\n  fi\n\n  # Take ownership of ctrl-r.\n  mcfly-history-widget() {\n    () {\n      echoti rmkx\n      exec </dev/tty\n      local mcfly_output=$(mktemp ${TMPDIR:-/tmp}/mcfly.output.XXXXXXXX)\n      $MCFLY_PATH --history_format $MCFLY_HISTORY_FORMAT search -o \"${mcfly_output}\" \"${LBUFFER}\"\n      echoti smkx\n\n      # Interpret commandline/run requests from McFly\n      while read -r key val; do\n        if [[ \"$key\" = \"mode\" ]]; then local mode=\"$val\"; fi\n        if [[ \"$key\" = \"commandline\" ]]; then local commandline=\"$val\"; fi\n      done < \"${mcfly_output}\"\n      command rm -f $mcfly_output\n\n      if [[ -n $commandline ]]; then\n        RBUFFER=\"\"\n        LBUFFER=\"${commandline}\"\n      fi\n      if [[ \"${mode}\" == \"run\" ]]; then\n        zle accept-line\n      fi\n      zle redisplay\n    }\n  }\n  zle -N mcfly-history-widget\n  bindkey '^R' mcfly-history-widget\n}\n"
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}