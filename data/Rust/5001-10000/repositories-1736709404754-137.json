{
  "metadata": {
    "timestamp": 1736709404754,
    "page": 137,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mit-pdos/noria",
      "stars": 5019,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4462890625,
          "content": "run.sh\n*.hist\n.*.rustfmt\n*.json\n*.png\n*.log\n*.svg\n*.folded\n*.strace\n*.host\n*.db\nplotting/*.png\n\ncallgrind.out.*\nperf.data*\n\n# Generated by Cargo\n# will have compiled files and executables\ntarget/\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here http://doc.crates.io/guide.html#cargotoml-vs-cargolock\nCargo.lock\n\n# IDE\n.idea/\n.vscode/\n\n# R + plotly\nplots.html\nplots_files/\n.RData\n.Rhistory\n\n*.swp\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.310546875,
          "content": "dist: trusty\nlanguage: rust\ncache: false\nrust:\n  - nightly\nenv:\n  - SETTLE_TIME=2000\nscript:\n  - cargo check --all --all-targets\n  - cargo test --all -- --test-threads=1\naddons:\n  apt:\n    packages:\n    - liblz4-dev\nbefore_cache:\n  - rm -rf /home/travis/.cargo/registry\n  - rm -rf $TRAVIS_BUILD_DIR/target/incremental\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.33203125,
          "content": "[workspace]\nmembers = [\n\t\"noria\",\n\t\"server\",\n\t\"applications\",\n]\n\n[profile.release]\ndebug=true\n\n[patch.crates-io]\n# https://github.com/tower-rs/tokio-tower/pull/6\n# optional -- just a perf optimization\n# comment this out if you want cargo doc to work!\ntokio-tower = { git = \"https://github.com/tower-rs/tokio-tower.git\", branch = \"no-box\" }\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.6123046875,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright 2018 The Noria Developers <noria@pdos.csail.mit.edu>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.087890625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2018 The Noria Developers <noria@pdos.csail.mit.edu>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.0595703125,
          "content": "# Noria: data-flow for high-performance web applications\n\n[![noria on crates.io](https://img.shields.io/crates/v/noria.svg)](https://crates.io/crates/noria)\n[![noria on docs.rs](https://docs.rs/noria/badge.svg)](https://jon.thesquareplanet.com/crates/noria/)\n[![noria-server on crates.io](https://img.shields.io/crates/v/noria-server.svg)](https://crates.io/crates/noria-server)\n[![noria-server on docs.rs](https://docs.rs/noria-server/badge.svg)](https://jon.thesquareplanet.com/crates/noria-server/)\n[![Azure Status](https://dev.azure.com/mit-pdos/mit-pdos/_apis/build/status/noria?branchName=master)](https://dev.azure.com/mit-pdos/mit-pdos/_build/latest?definitionId=1&branchName=master)\n\nNoria is a new streaming data-flow system designed to act as a fast\nstorage backend for read-heavy web applications based on [Jon Gjengset's\nPhd Thesis](https://jon.thesquareplanet.com/papers/phd-thesis.pdf), as\nwell as [this paper](https://jon.tsp.io/papers/osdi18-noria.pdf) from\n[OSDI'18](https://www.usenix.org/conference/osdi18/presentation/gjengset).\nIt acts like a database, but precomputes and caches relational query\nresults so that reads are blazingly fast. Noria automatically keeps cached\nresults up-to-date as the underlying data, stored in persistent _base\ntables_, change. Noria uses partially-stateful data-flow to reduce memory\noverhead, and supports dynamic, runtime data-flow and query change.\n\nNoria comes with [a MySQL\nadapter](https://github.com/mit-pdos/noria-mysql) that implements the\nbinary MySQL protocol. This lets any application that currently talks to\nMySQL or MariaDB switch to Noria with minimal effort. For example,\nrunning a [Lobsters-like workload](https://github.com/jonhoo/trawler)\nthat issues the [equivalent SQL\nqueries](https://github.com/mit-pdos/noria/tree/master/applications/lobsters/src/endpoints/natural)\nto the real [Lobsters website](https://lobste.rs), Noria improves\nthroughput supported by 5x:\n\n![Noria speeds up Lobsters queries by 5x](https://people.csail.mit.edu/malte/projects/noria/lobsters-perf.svg)\n\nAt a high level, Noria takes a set of parameterized SQL queries (think\n[prepared\nstatements](https://en.wikipedia.org/wiki/Prepared_statement)), and\nproduces a [data-flow\nprogram](https://en.wikipedia.org/wiki/Stream_processing) that maintains\n[materialized views](https://en.wikipedia.org/wiki/Materialized_view)\nfor the output of those queries. Reads now become fast lookups directly\ninto these materialized views, as if the value had been directly cached\nin memcached. The views are then kept up-to-date incrementally through\nthe data-flow, which yields high write throughput.\n\n## Running Noria\n\nLike most databases, Noria follows a server-client model where many\nclients connect to a (potentially distributed) server. The server in\nthis case is the `noria-server` binary, and must be started before\nclients can connect. Noria also uses [Apache\nZooKeeper](https://zookeeper.apache.org/) to announce the location of\nits servers, so ZooKeeper must be running.\n\nYou (currently) need nightly Rust to build `noria-server`. This will be\narranged for\n[automatically](https://github.com/rust-lang-nursery/rustup.rs#the-toolchain-file)\nif you're using [`rustup.rs`](https://rustup.rs/). To build\n`noria-server`, run\n\n```console\n$ cargo build --release --bin noria-server\n```\n\nYou may need to install some dependencies for the above to work:\n\n - clang\n - libclang-dev\n - libssl-dev\n - liblz4-dev\n - build-essential\n\nTo start a long-running `noria-server` instance, ensure that ZooKeeper\nis running, and then run:\n\n```console\n$ cargo r --release --bin noria-server -- --deployment myapp --no-reuse --address 172.16.0.19 --shards 0\n```\n\n`myapp` here is a _deployment_. Many `noria-server` instances can\noperate in a single deployment at the same time, and will share the\nworkload between them. Workers in the same deployment automatically\nelect a leader and discovery each other via\n[ZooKeeper](http://zookeeper.apache.org/).\n\n## Interacting with Noria\n\nThere are two primary ways to interact with Noria: through the [Rust\nbindings](https://crates.io/crates/noria) or through the [MySQL\nadapter](https://github.com/mit-pdos/noria-mysql). They both\nautomatically locate the running worker through ZooKeeper (use `-z` if\nZooKeeper is not running on `localhost:2181`).\n\n### Rust bindings\n\nThe [`noria` crate](https://crates.io/crates/noria) provides native Rust\nbindings to interact with `noria-server`. See the [`noria`\ndocumentation](https://jon.thesquareplanet.com/crates/noria/) for detailed\ninstructions on how to use the library. You can also take a look at the\n[example Noria program](noria/examples/quickstart.rs) using Noria's\nclient API. You can also see a self-contained version that embeds\n`noria-server` (and doesn't require ZooKeeper) in [this\nexample](server/examples/local-server.rs).\n\n### MySQL adapter\n\nWe have built a [MySQL\nadapter](https://github.com/mit-pdos/noria-mysql) for Noria that accepts\nstandard MySQL queries and speaks the MySQL protocol to make it easy to\ntry Noria out for existing applications. Once the adapter is running\n(see its `README`), you should be able to point your application at\n`localhost:3306` to send queries to Noria. If your application crashes,\nthis is a bug, and we would appreciate it if you [open an\nissue](https://github.com/mit-pdos/noria/issues). You may also want to\ntry to disable automatic re-use (with `--no-reuse`) or sharding (with\n`--shards 0`) in case those are misbehaving.\n\n## CLI and Web UI\n\nYou can manually inspect the data stored in Noria using any MySQL client\n(e.g., the `mysql` CLI), or use [Noria's own web\ninterface](https://github.com/mit-pdos/noria-ui).\n\n## Noria development\n\nNoria is a large piece of software that spans many sub-crates and\nexternal tools (see links in the text above). Each sub-crate is\nresponsible for a component of Noria's architecture, such as external\nAPI (`noria`), mapping SQL to data-flow (`server/mir`), and\nexecuting data-flow operators (`server/dataflow`). The code in\n`server/src/` is the glue that ties these pieces together by\nestablishing materializations, scheduling data-flow work, orchestrating\nNoria program changes, handling failovers, etc.\n\n[`server/src/lib.rs`](server/src/lib.rs) has a pretty extensive comment at\nthe top of it that goes through how the Noria internals fit together at\nan implementation level. While it occasionally lags behind, especially\nfollowing larger changes, it should serve to get you familiarized with\nthe basic building blocks relatively quickly.\n\nThe sub-crates each serve a distinct role:\n\n - [`noria/`](noria/): everything that an external program communicating\n   with Noria needs. This includes types used in RPCs as\n   arguments/return types, as well as code for discovering Noria workers\n   through ZooKeeper, establishing a connection to Noria through\n   ZooKeeper, and invoking the various RPC exposed by the Noria\n   controller ([`server/src/controller.rs`](server/src/controller/inner.rs)).\n   The `noria` sub-crate also contains a number of internal\n   data-structures that must be shared between the client and the\n   server like [`DataType`](noria/src/data.rs) (Noria's \"value\"\n   type). These are annotated with `#[doc(hidden)]`, and should be easy\n   to spot in `noria/src/lib.rs`.\n - [`applications/`](applications/): a collection of various\n   Noria benchmarks. The most frequently used one is `vote`, which runs\n   the vote benchmark from §8.2 of the OSDI paper. You can run it in a\n   bunch of different ways (`--help` should be useful), and with many\n   different backends. The `localsoup` backend is the one that's easiest\n   to get up and running with.\n - [`server/src/`](server/src/): the Noria server, including\n   high-level components such as RPC handling, domain scheduling,\n   connection management, and all the controller operations (listening\n   for heartbeats, handling failed workers, etc.). It contains two\n   notable sub-crates:\n\n   - [`dataflow/`](server/dataflow/): the code that implements the\n     internals of the data-flow graph. This includes implementations of\n     the different operators ([`ops/`](server/dataflow/src/ops/)),\n     \"special\" operators like leaf views and sharders\n     ([`node/special/`](server/dataflow/src/node/special/)),\n     implementations of view storage ([`state/`](server/dataflow/src/state/)),\n     and the code that coordinates execution of control, data, and\n     backfill messages within a thread domain\n     ([`domain/`](server/dataflow/src/domain/)).\n   - [`mir/`](server/mir/): the code that implements Noria's\n     SQL-to-dataflow mapping. This includes resolving columns and keys,\n     creating dataflow operators, and detecting reuse opportunities, and\n     triggering migrations to make changes after new SQL queries have\n     been added. @ms705 is the primary author of this particular\n     subcrate, and it builds largely upon\n     [`nom-sql`](https://docs.rs/nom-sql/).\n   - [`common/`](server/common/): data-structures that are shared\n     between the various `server` sub-crates.\n\nTo run the test suite, use:\n```console\n$ cargo test\n```\n\nBuild and open the documentation with:\n```console\n$ cargo doc --open\n```\n\nOnce `noria-server` is running, its API is available on port 6033 at the\nspecified listen address.\n\nAlternatively, you can discover Noria's REST API listen address and port\nthrough ZooKeeper via this command:\n\n```console\n$ cargo run --bin noria-zk -- \\\n    --show --deployment myapp\n    | grep external | cut -d' ' -f4\n```\n\nA basic graphical UI runs at `http://IP:PORT/graph.html` and shows\nthe running data-flow graph. You can also deploy Noria's\n[more advanced web UI](https://github.com/mit-pdos/noria-ui) that serves\nthe REST API endpoints in a human-digestible form and includes the\ngraph visualization.\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0\n   ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license\n   ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n"
        },
        {
          "name": "applications",
          "type": "tree",
          "content": null
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 1.287109375,
          "content": "jobs:\n - job: check\n   strategy:\n     matrix:\n       Linux:\n         vmImage: ubuntu-latest\n       MacOS:\n         vmImage: macOS-10.14\n   pool:\n     vmImage: $(vmImage)\n   continueOnError: $[ ne( variables['Agent.OS'], 'Linux' ) ]\n   steps:\n     - template: install-rust.yml@templates\n       parameters:\n         rust: nightly\n         components:\n           - rustfmt\n     - bash: |\n         brew install llvm\n         brew link --force llvm\n         echo \"##vso[task.setvariable variable=LLVM_CONFIG]/usr/local/opt/llvm/bin/llvm-config\"\n         echo \"##vso[task.setvariable variable=PATH]/usr/local/opt/llvm/bin:$PATH\"\n       displayName: Install LLVM (macOS)\n       condition: eq( variables['Agent.OS'], 'Darwin' )\n     - bash: cargo check --workspace --all-features --all-targets\n       displayName: cargo check\n     - script: cargo fmt --all -- --check\n       displayName: cargo fmt --check\n       condition: eq( variables['Agent.OS'], 'Linux' )\n       continueOnError: true\n     - script: cargo test -- --test-threads=1\n       displayName: \"cargo test\"\n       condition: eq( variables['Agent.OS'], 'Linux' )\n       env:\n        SETTLE_TIME: 2000\n\nresources:\n  repositories:\n    - repository: templates\n      type: github\n      name: crate-ci/azure-pipelines\n      ref: refs/heads/v0.3\n      endpoint: mit-pdos\n"
        },
        {
          "name": "noria",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-toolchain",
          "type": "blob",
          "size": 0.0078125,
          "content": "nightly\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.0166015625,
          "content": "edition = \"2018\"\n"
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "taster.toml",
          "type": "blob",
          "size": 2.6064453125,
          "content": "version = 2\n\n[uniform]\ncommand = \"cargo\"\nargs = [\"run\", \"--release\", \"--manifest-path\", \"applications/Cargo.toml\", \"--bin\", \"vote\", \"--\", \"--threads\", \"8\", \"localsoup\"]\nregexs = [\"^(write\\t50)\\t([0-9.]+)\", \"^(read\\t50)\\t([0-9.]+)\", \"^(write\\t95)\\t([0-9.]+)\", \"^(read\\t95)\\t([0-9.]+)\"]\nlower_better = true\n\n[uniform-unsharded]\ncommand = \"cargo\"\nargs = [\"run\", \"--release\", \"--manifest-path\", \"applications/Cargo.toml\", \"--bin\", \"vote\", \"--\", \"--threads\", \"8\", \"localsoup\", \"--shards=1\"]\nregexs = [\"^(write\\t50)\\t([0-9.]+)\", \"^(read\\t50)\\t([0-9.]+)\", \"^(write\\t95)\\t([0-9.]+)\", \"^(read\\t95)\\t([0-9.]+)\"]\nlower_better = true\n\n[purged-vote-replay]\ncommand = \"cargo\"\nargs = [\"run\", \"--release\", \"--manifest-path\", \"applications/Cargo.toml\", \"--bin\", \"vote-purge-stress\", \"--\", \"-t\", \"3\", \"--purge\", \"all\"]\nregexs = [\"^(replay\\t50)\\t([0-9.]+)\", \"^(replay\\t95)\\t([0-9.]+)\"]\nlower_better = true\n\n#[staged]\n#command = \"cargo\"\n#args = [\"run\", \"--release\", \"--manifest-path\", \"benchmarks/Cargo.toml\", \"--bin\", \"vote\", \"--\", \"--avg\", \"--articles=100000\", \"--stage\", \"--runtime=30\"]\n#regexs = [\"(avg GET): ([0-9.]+)\", \"(avg PUT): ([0-9.]+)\"]\n#\n#[multiclient]\n#command = \"cargo\"\n#args = [\"run\", \"--release\", \"--manifest-path\", \"benchmarks/Cargo.toml\", \"--bin\", \"vote\", \"--\", \"--avg\", \"--articles=100000\", \"--runtime=30\", \"--getters=4\"]\n#regexs = [\"^(avg GET): ([0-9.]+)\", \"(avg PUT): ([0-9.]+)\", \"^(cumavg GET): ([0-9.]+)\"]\n\n#[tx-bank]\n#command = \"cargo\"\n#args = [\"run\", \"--release\", \"--manifest-path\", \"benchmarks/Cargo.toml\", \"--bin\", \"bank\", \"--\", \"--avg\", \"--accounts=1000\", \"--runtime=30\", \"-t=1\"]\n#regexs = [\"(avg PUT): ([0-9.]+)\"]\n\n#[backfill]\n#command = \"cargo\"\n#args = [\"run\", \"--release\", \"--manifest-path\", \"benchmarks/Cargo.toml\", \"--bin\", \"vote-stress\", \"--\", \"--articles=100000\", \"--votes=100000\", \"--runtime=10\", \"--stupid\"]\n#regexs = [\"(RATE): ([0-9.]+)\"]\n\n#[vote-migration]\n#command = \"cargo\"\n#args = [\"run\", \"--release\", \"--manifest-path\", \"benchmarks/Cargo.toml\", \"--bin\", \"vote\", \"--\", \"--avg\", \"--articles=100000\", \"--runtime=60\", \"--migrate=30\", \"--stupid\"]\n#regexs = [\"(Migration) completed in ([0-9.]+)s\"]\n#lower_better = true\n#improvement_threshold = 0.5\n#regression_threshold = 0.5\n\n#[post-migration]\n#command = \"cargo\"\n#args = [\"run\", \"--release\", \"--manifest-path\", \"benchmarks/Cargo.toml\", \"--bin\", \"vote\", \"--\", \"--avg\", \"--articles=100000\", \"--runtime=60\", \"--migrate=30\", \"--stupid\"]\n#regexs = [\"avg (GET)\\\\+: ([0-9.]+)\", \"avg (PUT)\\\\+: ([0-9.]+)\"]\n\n[slack-aliases]\nms705 = \"malte\"\nfintelia = \"jonathan\"\nomegablitz = \"aashish\"\nrtmrtmrtmrtm = \"rtm\"\nlarat7 = \"laratimbo\"\njmftrindade = \"jmf\"\nygina = \"gina\"\nalanamarzoev = \"marzoev\"\njmbredenberg = \"jamb\"\n"
        }
      ]
    }
  ]
}