{
  "metadata": {
    "timestamp": 1736709392074,
    "page": 112,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "autumnai/leaf",
      "stars": 5555,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clog.toml",
          "type": "blob",
          "size": 0.84375,
          "content": "[clog]\n# A repository link with the trailing '.git' which will be used to generate\n# all commit and issue links\nrepository = \"https://github.com/autumnai/leaf\"\n\n# specify the style of commit links to generate, defaults to \"github\" if omitted\nlink-style = \"github\"\n\n# The preferred way to set a constant changelog. This file will be read for old changelog\n# data, then prepended to for new changelog data. It's the equivilant to setting\n# both infile and outfile to the same file.\n#\n# Do not use with outfile or infile fields!\n#\n# Defaults to stdout when omitted\n# changelog = \"CHANGELOG.md\"\n\n# This sets the output format. There are two options \"json\" or \"markdown\" and\n# defaults to \"markdown\" when omitted\noutput-format = \"markdown\"\n\n# If you use tags, you can set the following if you wish to only pick\n# up changes since your latest tag\nfrom-latest-tag = true\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0283203125,
          "content": "target\nCargo.lock\n\nmynetwork\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.134765625,
          "content": "sudo: false\nlanguage: rust\nrust:\n- nightly\n- beta\n- stable\nmatrix:\n  allow_failures:\n    - rust: nightly\n      env: FEATURES=lint\n  exclude:\n    - rust: beta\n      env: FEATURES=lint\n    - rust: stable\n      env: FEATURES=lint\nbranches:\n  only:\n    - master\nbefore_script:\n- |\n  pip install 'travis-cargo<0.2' --user &&\n  export PATH=$HOME/.local/bin:$PATH\nscript:\n- |\n  travis-cargo build -- --no-default-features --features $FEATURES &&\n  travis-cargo test -- --no-default-features --features $FEATURES &&\n  travis-cargo bench -- --no-default-features --features $FEATURES &&\n  travis-cargo --only stable doc -- --no-default-features --features $FEATURES\naddons:\n  apt:\n    sources:\n      - ubuntu-toolchain-r-test\n    packages:\n      - libcurl4-openssl-dev\n      - libelf-dev\n      - libdw-dev\n      - libblas-dev\n      - fglrx\n      - opencl-headers\n      - binutils-dev\n      - nvidia-opencl-dev\n      - gcc-4.8\n      - g++-4.8\ninstall:\n    - git clone https://github.com/kentonv/capnproto.git\n    - cd capnproto/c++\n    - git checkout tags/v0.5.3\n    - ./setup-autotools.sh\n    - autoreconf -i\n    - ./configure --disable-shared\n    - make -j5\n    - export PATH=\"$PATH:$(pwd)\"\n    - export LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:$(pwd)\"\n    -  cd ../..\nafter_success:\n- travis-cargo doc-upload\n- travis-cargo coveralls --no-sudo --verify\nnotifications:\n  email:\n    on_success: never\nenv:\n  global:\n    - CC=gcc-4.8\n    - CXX=g++-4.8\n    - secure: QcJ9u0BrVpvjYnerd/3dukvM+GLFQNikIoDHhtKjVenuM2ozZtW6+/RyyXVC1YMh/SghwTnu4Kcnv1sdmwuiC5KWdPoppfalXdxafPkl5PGEfTOexe6L5UAJNW6BdA4lbRKM3xnaUg0Guq6x6tD/zdABIkh8nym/gRLGKT40e9Xitkf6wUQqPBHTGZimip59qg5Fty8lAD48pCBEXynJm+ihA2tz6EDhp0/7wvieHyEl/FqNwvUL5+Z9EeTzEJfKNF8PA5DTHkgeXgeCnWKLm8cCdPEziRZlgdQtvIW27oZBkNTQGHyqI9/tVYhaW4AeKstzE5BoJuyRzmerWYRQCNiz8bgyAjc5HnpWLJPmPSFaGBWTRzwYwUk/iOUP4YEZiN3p0Xj1sKgSB0TA2AjKWND7cufwjrW8NdPdZ3hURVOnM8DHYSQMm2HOfbUNnkw+P5M8n+flT2HKWFdnPhJ3n12rDlLYdHeg9PQ3emJ6kE8Y/jrNT+6yZRrSwLQnsV0uU8Ii44MFQHpdUOGuOIxZFGh9rjKsUwhruUpGtbwI4FWPOqiQJvIaBFY1IUjIVlVCZevvIG3fPXvPksIEKwK93hM/ThDi2PLq2qwBpA87RNfKxDG4S0aR2j19IG+ludbpPcP95mYFVnGCb4rpj44iZoCifC8c9tVqC4L85hEGzik=\n  matrix:\n    - FEATURES=travis\n    - FEATURES=lint\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 8.7373046875,
          "content": "<a name=\"0.2.1\"></a>\n## 0.2.1 (2016-04-21)\n\n\n#### Bug Fixes\n\n* **sgd:**  initialize weight gradient history with zeroes ([68689955](https://github.com/autumnai/leaf/commit/68689955c29c5e061389067b4dd4729b71404ad0))\n* **solvers:**  remove CUDA build flag ([1f5f6b87](https://github.com/autumnai/leaf/commit/1f5f6b87260f7b7c2d202d59cedc686c9c3f6b1e))\n\n#### Breaking Changes\n\n* **container:**  put sequential layer into container dir ([bb23b76b](https://github.com/autumnai/leaf/commit/bb23b76b41935a572135564c41c9df2b627d73d5), breaks [#](https://github.com/autumnai/leaf/issues/))\n\n#### Features\n\n* **container:**  put sequential layer into container dir ([bb23b76b](https://github.com/autumnai/leaf/commit/bb23b76b41935a572135564c41c9df2b627d73d5), breaks [#](https://github.com/autumnai/leaf/issues/))\n* **features:**  change meaning of framework features ([58d72f50](https://github.com/autumnai/leaf/commit/58d72f50964f8ddc3fc43d5f8b91b31af5881a7d))\n* **layers:**  add tanh layer ([b1d5ec91](https://github.com/autumnai/leaf/commit/b1d5ec913be86c91a58ac281151d2cdf1ca976aa))\n* **serialization:**\n  *  add deserialization ([df7c9d88](https://github.com/autumnai/leaf/commit/df7c9d88713cffbc50261c488e940f0926edfea4))\n  *  add serialization ([cb1a1b4b](https://github.com/autumnai/leaf/commit/cb1a1b4b72eddcbba0414c32829f1e1e23b10ca1))\n\n#### Performance\n\n* **sgd:**  use GPU for computation of weight updates ([08fd965b](https://github.com/autumnai/leaf/commit/08fd965b19a64879bc364f488ebb393b07e3f413))\n* **solver:**  don't zero fill weight gradients ([6c4482c5](https://github.com/autumnai/leaf/commit/6c4482c5c17de761516f3cce7e860e5651041ea1))\n\n\n<a name=\"0.2.0\"></a>\n## 0.2.0 (2016-03-04)\n\n\n#### Bug Fixes\n\n* **convolution:**  add missing weight initialization ([79f71095](https://github.com/autumnai/leaf/commit/79f710955374daf1a878edfdf5dd5977edd75550))\n* **dependency:**  make collenchyma version constraint stricter ([6b3f6af3](https://github.com/autumnai/leaf/commit/6b3f6af30005ebed40bf84b3dc9d36770db509a2))\n* **nll:**  add NLLConfig to specify number of classes ([34568774](https://github.com/autumnai/leaf/commit/34568774ad0e491f7a31d624f68513b3dedaa14c))\n* **reshape:**  fix reshaping of network input blobs ([20d97e9d](https://github.com/autumnai/leaf/commit/20d97e9d42161db7ac5aa95c48c8db04f8f950e9))\n* **sequential:**  synchronize after forward/backward ([d1c1030f](https://github.com/autumnai/leaf/commit/d1c1030ff64166263012aad0572cdc7e2be865bf))\n* **test:**  fix tests after adding collenchyma ([a7f8a695](https://github.com/autumnai/leaf/commit/a7f8a69521130289fc6b5a3eebc7f28133a7fac4))\n\n#### Features\n\n* **activations:**  add in-place activations ([920b6419](https://github.com/autumnai/leaf/commit/920b64191d642e8536deffdf55d7c26bf287a7b9))\n* **convolution:**\n  *  remove convolution axis ([a8345ee1](https://github.com/autumnai/leaf/commit/a8345ee1555c0c256f5a30cdabf7ebcc46d52455))\n  *  add shared workspace for convolution layer ([f5f25c31](https://github.com/autumnai/leaf/commit/f5f25c31a4c8bd058cd576c789ba732241ab4496))\n* **everything:**  introduce most of the changes for 0.2.0 ([1e0db777](https://github.com/autumnai/leaf/commit/1e0db7774b5bdb38615d444c881265ec7cec390e))\n* **layer:**  add Sequential layer ([aaacc1ed](https://github.com/autumnai/leaf/commit/aaacc1edf351d2fb07f1f7a375cffac03d9932ed))\n* **layers:**  implement Into<LayerType> for all layers ([b9a4e8f6](https://github.com/autumnai/leaf/commit/b9a4e8f6dd86fe1bd80a669ae1aa2e17a017c4c1))\n* **license:**  change license to dual MIT/Apache-2.0 ([a06b7c52](https://github.com/autumnai/leaf/commit/a06b7c522c7e9f1c837b96ce27a9eca4b34d2bad))\n* **reshape:**  added in-place functionality to reshape layer ([f03bfc20](https://github.com/autumnai/leaf/commit/f03bfc20711451493a8324cad553f7f2f00ffcbe))\n* **solvers:**  reintroduce solvers for Layers ([0254a432](https://github.com/autumnai/leaf/commit/0254a432b0d990990564aed8c25b237bda15a685))\n\n#### Performance\n\n* **sequential:**  enable in-place inside Sequential containers ([5f0a40cb](https://github.com/autumnai/leaf/commit/5f0a40cba2becb86eb948363192895855fa49c75))\n\n\n<a name=\"0.1.2\"></a>\n## 0.1.2 (2015-12-19)\n\n\n#### Bug Fixes\n\n* **dependency:**  make collenchyma version constraint stricter ([594f207c](https://github.com/autumnai/leaf/commit/594f207c129da424637285185ca804429d48c8b0))\n\n\n<a name=\"0.1.1\"></a>\n## 0.1.1 (2015-11-30)\n\n\n#### Bug Fixes\n\n* **dependency:**  make collenchyma version constraint stricter ([355620ad](https://github.com/autumnai/leaf/commit/355620ad2383973267f3480715f0f160e60d9089))\n* **test:**  fix tests after adding collenchyma ([cc0d340e](https://github.com/autumnai/leaf/commit/cc0d340eb9684970ec94d547edbacaa1805fc16f))\n\n\n\n<a name=\"0.1.0\"></a>\n## 0.1.0 (2015-11-10)\n\n\n#### Features\n\n* **backend:**  switch to collenchyma and update blob ([7556f55a](https://github.com/autumnai/leaf/commit/7556f55a0bee3b8c73017cdb2023c37831fb5a33))\n* **backpropagation:**  implemented backpropagation ([1e97f9d8](https://github.com/autumnai/leaf/commit/1e97f9d8c4ebe32f8fb521de0e1f7183ce78879e))\n* **ci:**  Added travis for CI and doc building ([324ea1b0](https://github.com/autumnai/leaf/commit/324ea1b0c92439f447f589219be303ca9e952e87))\n* **layer:**  progress on forwarding network; introducted ReadBlob and WriteBlob for Layers ([ab56a021](https://github.com/autumnai/leaf/commit/ab56a02156585747ade254ebaaa074f6c6102bc8))\n* **network:**  network forwarding and helpers ([0415f637](https://github.com/autumnai/leaf/commit/0415f637bbcff9301afa5f6bd02a4188cc4022d9))\n* **release:**  prepare for 0.0.1 ([52c5a95f](https://github.com/autumnai/leaf/commit/52c5a95f676b18298e14482648b82536bea00a18))\n* **solver:**\n  *  implement solver and sgd ([83db20d4](https://github.com/autumnai/leaf/commit/83db20d4540240aaa8c0031bd8b67ae4d6e4c264))\n  *  calculation of learning rate from config ([84a74449](https://github.com/autumnai/leaf/commit/84a74449d14fd7b8782917dbfe92099d620828ed))\n  *  started fleshing out sgd solver ([5985d581](https://github.com/autumnai/leaf/commit/5985d581743f7b0dfeb5f2675b26dadb026f118f))\n\n#### Bug Fixes\n\n* **build:**  added lib blas to travis dependency ([3fd3a285](https://github.com/autumnai/leaf/commit/3fd3a2858811a31c3c8b35a14b8faa2db74f9ea7))\n* **cargo:**  fixed homepage spelling ([c71c3196](https://github.com/autumnai/leaf/commit/c71c319639bc77a89eed7a2414b2e620d3890aa6))\n* **dependencies:**  locked dependencies more thightly as required by crates.io ([6c2a45ec](https://github.com/autumnai/leaf/commit/6c2a45ec887f9d3aaa42d0a11c13da995ebfb5ac))\n* **dim_check:**  fixed layer dimension checking based on the new interface of phloem ([f685ce7e](https://github.com/autumnai/leaf/commit/f685ce7e8da9bb1607636b07d8b8c8b64a989694))\n* **docs:**  own gh-pages token for doc upload ([0967dead](https://github.com/autumnai/leaf/commit/0967dead21818aac60204a8f79e4382448215bf7))\n* **keywords:**  remove whitespace from cargo keywords ([6b54de82](https://github.com/autumnai/leaf/commit/6b54de823282f6688347bcea4b4def674b90b1ae))\n* **phloem:**  updated shape interface change ([6169645c](https://github.com/autumnai/leaf/commit/6169645c4078b1f078cdac1969cf5915297cbcf4))\n* **typo:**  broken link in contribution guide ([71aec33b](https://github.com/autumnai/leaf/commit/71aec33b8ae9b1228f90cccb3c375f9b823f2b73))\n* **wording:**  Fixed wording of contribution guide; also some smaller typo fixes ([8bdea30a](https://github.com/autumnai/leaf/commit/8bdea30a382fda8cddd46a50784db8b97673f1bb))\n\n\n\n<a name=\"0.0.1\"></a>\n## 0.0.1 (2015-11-02)\n\n\n#### Features\n\n* **ci:**  Added travis for CI and doc building ([324ea1b0](https://github.com/autumnai/leaf/commit/324ea1b0c92439f447f589219be303ca9e952e87))\n* **layer:**  progress on forwarding network; introducted ReadBlob and WriteBlob for Layers ([ab56a021](https://github.com/autumnai/leaf/commit/ab56a02156585747ade254ebaaa074f6c6102bc8))\n* **network:**  network forwarding and helpers ([0415f637](https://github.com/autumnai/leaf/commit/0415f637bbcff9301afa5f6bd02a4188cc4022d9))\n\n#### Bug Fixes\n\n* **build:**  added lib blas to travis dependency ([3fd3a285](https://github.com/autumnai/leaf/commit/3fd3a2858811a31c3c8b35a14b8faa2db74f9ea7))\n* **cargo:**  fixed homepage spelling ([c71c3196](https://github.com/autumnai/leaf/commit/c71c319639bc77a89eed7a2414b2e620d3890aa6))\n* **dim_check:**  fixed layer dimension checking based on the new interface of phloem ([f685ce7e](https://github.com/autumnai/leaf/commit/f685ce7e8da9bb1607636b07d8b8c8b64a989694))\n* **docs:**  own gh-pages token for doc upload ([0967dead](https://github.com/autumnai/leaf/commit/0967dead21818aac60204a8f79e4382448215bf7))\n* **phloem:**  updated shape interface change ([6169645c](https://github.com/autumnai/leaf/commit/6169645c4078b1f078cdac1969cf5915297cbcf4))\n* **wording:**  Fixed wording of contribution guide; also some smaller typo fixes ([8bdea30a](https://github.com/autumnai/leaf/commit/8bdea30a382fda8cddd46a50784db8b97673f1bb))\n\n\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.5419921875,
          "content": "# Contributing to Leaf\n\nWe love, that you are interested in contributing to Leaf. There are many ways\nto contribute and we appreciate all of them. This document gives a rough\noverview of how you can contribute to Leaf.\n\n* [Pull Requests](#pull-requests)\n* [Bug Reports](#bug-reports)\n* [Feature Requests](#feature-requests)\n* [Appendix](#appendix)\n  * [Git Commit Guidelines](#git-commit-guidelines)\n  * [Documentation Guidelines](#documentation-guidelines)\n\n\nIf you have questions hop on the [Leaf Chat](https://gitter.im/autumnai/leaf), to the #rust-machine-learning IRC on irc.mozilla.org or reach out to {@[MJ](https://twitter.com/mjhirn), @[Max](https://twitter.com/hobofan)}.\n\n## Pull Requests\n\n#### Preparation\n\nBefore you get started, please find the page of the project you're looking to\nimprove. We encourage you to poke around in the code a little bit, familiarize\nyourself with their development styles, check the commit log to see who is\ncontributing.\n\nBefore you start working, you might check out the **Network** tab on the project\nto see all the other forks other people have made. Somebody might be already\nworking on the problem you would love to solve.\n\n#### Making a PR\n\nPull requests are the primary mechanism we use to change Leaf repos. GitHub\nitself has some [great documentation](https://help.github.com/articles/using-pull-requests/)\non using the Pull Request feature. We use the 'fork and pull' model described\nthere.\n\nPlease make pull requests against the `master` branch.\n\nAll pull requests are reviewed by another person.\n\n> **Highfive not yet integrated**:\n> *We have a bot, @rust-highfive, that will automatically assign a random*\n> *person to review your request.*\n>\n> *If you want to request that a specific person reviews your pull request,*\n> *you can add an `r?` to the message. For example, MJ usually reviews*\n> *documentation changes. So if you were to make a documentation change, add*\n>\n>    r? @MichaelHirn\n>\n> *to the end of the message, and @rust-highfive will assign @MichaelHirn*\n> *instead of a random person. This is entirely optional.*\n\nAfter someone has reviewed your pull request, they will leave an annotation\non the pull request with an `r+`. It will look something like this:\n\n   @homu: r+ 38fe8d2\n\nThis tells @homu, our lovable integration bot, that your pull request has\nbeen approved. The PR then enters the\n[merge queue](http://buildbot.rust-lang.org/homu/queue/rust), where\n@homu will run all the tests on every platform we support. If it all works\nout, @homu will merge your code into `master` and close the pull request.\n\n## Bug Reports\n\nWhile bugs are unfortunate, they're a reality in software. We can't fix what we\ndon't know about, so please report liberally. If you're not sure if something\nis a bug or not, feel free to file a bug anyway.\n\nIf you have the chance, before reporting a bug, please search existing issues,\nas it's possible that someone else has already reported your error. This doesn't\nalways work, and sometimes it's hard to know what to search for, so consider this\nextra credit. We won't mind if you accidentally file a duplicate report.\n\n[Opening an issue is easy](https://guides.github.com/features/issues/)\nHere's a template that you can use to file a bug, though it's not necessary to\nuse it exactly:\n\n    <short summary of the bug>\n\n    I tried this code:\n\n    <code sample that causes the bug>\n\n    I expected to see this happen: <explanation>\n\n    Instead, this happened: <explanation>\n\n    ## Meta\n\n    {Library, Rust, OS} versions\n\n    Backtrace:\n\nAll three components are important: what you did, what you expected, what\nhappened instead. Please include information about what platform you're on, what\nversion of Rust and library you're using, etc.\n\nSometimes, a backtrace is helpful, and so including that is nice. To get\na backtrace, set the `RUST_BACKTRACE` environment variable. The easiest way\nto do this is to invoke `rustc` like this:\n\n```bash\n$ RUST_BACKTRACE=1 rustc ...\n```\n\n## Feature Requests\n\nTo request a change to the way that one of the Leaf libraries work, please\nopen an issue in the repository.\n\n## Appendix\n\n### Git Commit Guidelines\n\nWe have very precise rules over how git commit messages should be formatted.\nThis leads to more readable messages that are easy to follow when looking\nthrough the project history. The commit guidelines help us to auto-generate the CHANGELOG. More information about it, can be found in the [`Guide to CHANGELOG in Rust` post][2].\n\n#### Commit Message Examples\n\nFollowing some valid commit message examples. A syntax explanation can be found in the following section, Commit Message Format. \n\nExample for a mature commit message.\n```\ndocs/readme: add contact section to README.md\n\nA lot of people have asked about contact details, so I decided it would be a good idea to include our contact details in the README.md\n\nREFERENCE: #4, #63\nCLOSE: #52\n```\n\nAnother example on how you would make the commit on the command line.\n```\ngit commit -m 'feat/solver: add Adagrad as SGD-based solver\n\nSome more context and explanation about the commit, PR.\n\nCLOSE: #42'\n```\n\n#### Commit Message Format\n\nEach commit message consists of a header, a body and a footer. The header has a\nspecial format that includes a type, a scope and a subject:\n\n    <type>/<scope>: <subject>\n    \\n\n    <body>\n    \\n\n    <footer>\n\nAny line of the commit message cannot be longer 100 characters! This allows the\nmessage to be easier to read on GitHub as well as in various git tools.\n\n<**type**>:\n\nMust be one of the following:\n\n- *`feat`*: A new feature\n- *`fix`*: A bug fix\n- *`docs`*: Documentation only changes\n- *`style`*: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\n- *`refactor`*: A code change that neither fixes a bug nor adds a feature\n- *`perf`*: A code change that improves performance\n- *`test`*: Adding missing tests\n- *`chore`*: Changes to the build process or auxiliary tools and libraries such as documentation generation\n\n<**scope**>:\n\nThe scope could be anything that specifies the place of the commit change, e.g. `solver`, `[filename]`, `tests`, `lib`, ... we are not very restrictive on the scope. The scope should just be lowercase and if possible contain of a single word, this makes the CHANGELOG generation easier.\n\n<**subject**>:\n\nThe subject contains succinct description of the change:\n- use the imperative, present tense: \"change\" not \"changed\" nor \"changes\"\n- don't capitalize first letter\n- no dot (.) at the end\n\n<**body**>:\n\nThe body should include the motivation for the change, contrast this with\nprevious behaviour and overall information about, why that commit matters.\n\n- Just as in the `subject`, use the imperative, present tense\n\n<**footer**>:\n\nThe footer should contain any information about Breaking Changes and is also the\nplace to reference GitHub issues that this commit closes. For Example:\n\n    BREAKING CHANGE: [specify what is breaking]\n\n    { REFERENCE, CLOSE, FIX } #Issue\n\n\n#### Revert\n\nIf the commit reverts a previous commit, it should begin with `revert:`,\nfollowed by the header of the reverted commit. In the body it should say:\n`This reverts commit <hash>.`, where the hash is the SHA of the commit being\nreverted.\n\n### Documentation Guidelines\n\nWe created an extensive [Documentation Guide][1] for you, which outlines an easy\nand efficient communication Framework for providing developers and users with\nhelpful Documentation about the Deep Learning Framework.\n\n[1]: https://medium.com/@autumn_eng/increasing-open-source-engagement-with-structural-communication-guidelines-for-code-documentation-e72533de8e45\n[2]: https://medium.com/@autumn_eng/guide-to-changelog-md-in-rust-6eb349808fa4\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.4453125,
          "content": "[package]\nname = \"leaf\"\ndescription = \"Machine Learning Framework for Hackers\"\nversion = \"0.2.1\"\nauthors = [\n  \"Maximilian Goisser <max@autumnai.com>\",\n  \"Michael Hirn <mj@autumnai.com>\"\n]\nrepository = \"https://github.com/autumnai/leaf\"\nhomepage = \"https://github.com/autumnai/leaf\"\ndocumentation = \"http://autumnai.github.io/leaf\"\nreadme = \"README.md\"\nkeywords = [\"deep-learning\", \"neural-networks\", \"machine-learning\", \"framework\"]\nlicense = \"MIT OR Apache-2.0\"\n\nbuild = \"build.rs\"\n\n[dependencies]\ncollenchyma = { version = \"0.0.8\", default-features = false, features = [\"native\"] } # native feature to read/write data into tensors\ncollenchyma-blas = { version = \"0.2.0\", default-features = false, features = [\"native\"] } # only compiles with native feature\ncollenchyma-nn = { version = \"0.3.2\", default-features = false }\n\nlog = \"0.3.2\"\nrand = \"0.3.0\"\nnum = \"0.1\"\n\ncapnp = \"0.6.2\"\n\ntimeit = \"0.1.2\"\n\nclippy = { version = \"0.0.41\", optional = true }\n\n[build-dependencies]\ncapnpc = \"0.6.1\"\n\n[dev-dependencies]\nenv_logger = \"0.3\"\n\n[features]\ndefault = [\"native\"]\nnative = [\"collenchyma-blas/native\", \"collenchyma-nn/native\"]\ncuda = [\"collenchyma/cuda\", \"collenchyma-blas/cuda\", \"collenchyma-nn/cuda\"]\nopencl = [\"collenchyma/opencl\", \"collenchyma-blas/opencl\", \"collenchyma-nn/opencl\"]\n\ntravis = [\"native\"]\ndev = []\nunstable = [] # for travis-cargo\nlint = [\"clippy\"]\n\n[profile.bench]\nopt-level = 3\ndebug = false\nrpath = false\nlto = false\ndebug-assertions = false\ncodegen-units = 1\n"
        },
        {
          "name": "FEATURE-FLAGS.md",
          "type": "blob",
          "size": 3.8388671875,
          "content": "# Feature flags in Leaf\n\n## The problem(s)\n\nSupporting different backends is an important concept in Leaf.\n\nOptimally we would like to always have to choice of running Leaf on all backends.\nHowever in reality there are some tradeoffs that have to be made.\n\nOne problem is that certain backends require the presence of special hardware to\nrun (CUDA needs NVIDIA GPUs), or the libraries to address them are not present on\nthe developers machine which is necessary for compilation.\n\nAnother challenge is that not all backends have support for the same operations,\nwhich constrains neural networks with special requirements to the backends that\nprovide those operations. Due to some limitations in the current version of Rust\n(1.7) allowing differently featured backends can not be that easily supported.\nSee [Issue #81](https://github.com/autumnai/leaf/issues/81).\n\n## The solution\n\nFeature flags are a well known concept to add opt-in functionality that is\nnot necessary for every use-case of a library and are a good solution to the first\nproblem.\nLuckily, Cargo, Rust's package manager has built-in support for feature flags.\n\nA simple dependency with additional features enabled in a `Cargo.toml` looks like this:\n```toml\n[dependencies]\nleaf = { version = \"0.2.0\", features = [\"cuda\"] }\n```\n\nFeature flags are usually used in an additive way, but **some configurations\nof features for Leaf might actually take away some functionality**.\nWe do this because we want the models to be portable across different backends,\nwhich is not possible if e.g. the CUDA backend supports Convolution layers while\nthe Native backend doesn't. To make it possible we deactivate those features that\nare only available on a single backend, effectively \"dumbing down\" the backends.\n\nExample:\n- feature flags are `cuda` -> `Convolution` Layer **is available** since the CUDA backend provides the required traits and there is no native backend it has to be compatible with.\n- feature flags are `native` -> `Convolution` Layer **is not available** since the native backend does not provide the required traits and there are no other frameworks present.\n- feature flags are `native cuda` -> `Convolution` Layer **is not available** since the native backend does not provide the required traits, and the CUDA backend has been dumbed down.\n\n## Using the feature flags\n\nOne thing we have ignored until now are default feature flags. Cargo allows to\ndefine a set of features that should be included in a package by default .\nOne of the default feature flags of Leaf is the `native` flag. When looking at\nthe above example you might notice that the only way we can unleash the full\npower of the CUDA backend is by deactivating the default `native` flag.\nCargo allows us to do that either via the `--no-default-features` on the CLI or\nby specifying `default-feature = false` for a dependency in `Cargo.toml`.\n\n#### In your project\n\nThe simple `Cargo.toml` example above works in simple cases but if you want\nto provide the same flexibility of backends in your project, you can reexport\nthe feature flags.\n\nA typical example (including collenchyma) would look like this:\n```toml\n[dependencies]\nleaf = { version = \"0.2.0\", default-features = false }\n# the native collenchyma feature is neccesary to read/write tensors\ncollenchyma = { version = \"0.0.8\", default-features = false, features = [\"native\"] }\n\n[features]\ndefault = [\"native\"]\nnative  = [\"leaf/native\"]\nopencl  = [\"leaf/opencl\", \"collenchyma/opencl\"]\ncuda    = [\"leaf/cuda\", \"collenchyma/cuda\"]\n\n```\n\nBuilding your project would then look like this:\n```sh\n# having both native and CUDA backends\n# `native` is provided by default, and `cuda` explicitly specified by `--features cuda`\ncargo build --features cuda\n# unleashing CUDA\n# `native` default not included because of `--no-default-features`, and `cuda` explicitly specified by `--features cuda`\ncargo build --no-default-features --features cuda\n```\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 11.0576171875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0908203125,
          "content": "MIT LICENSE\n\nCopyright (c) 2015 Storeness UG (haftungsbeschraenkt) <developers@autumnai.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.5927734375,
          "content": "# Leaf • [![Join the chat at https://gitter.im/autumnai/leaf](https://img.shields.io/badge/gitter-join%20chat-brightgreen.svg)](https://gitter.im/autumnai/leaf?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Build Status](https://travis-ci.org/autumnai/leaf.svg?branch=master)](https://travis-ci.org/autumnai/leaf) [![Crates.io](http://meritbadge.herokuapp.com/leaf)](https://crates.io/crates/leaf) [![License](https://img.shields.io/crates/l/leaf.svg)](LICENSE)\n\n## Introduction\n\nLeaf is a open Machine Learning Framework for hackers to build classical, deep\nor hybrid machine learning applications. It was inspired by the brilliant people\nbehind TensorFlow, Torch, Caffe, Rust and numerous research papers and brings\nmodularity, performance and portability to deep learning.\n\nLeaf has one of the simplest APIs, is lean and tries to introduce minimal\ntechnical debt to your stack.\n\nSee the [Leaf - Machine Learning for Hackers][leaf-book] book for more.\n\nLeaf is a few months old, but thanks to its architecture and Rust, it is already\none of the fastest Machine Intelligence Frameworks available.\n\n\n> See more Deep Neural Networks benchmarks on [Deep Learning Benchmarks][deep-learning-benchmarks-website].\n\nLeaf is portable. Run it on CPUs, GPUs, and FPGAs, on machines with an OS, or on\nmachines without one. Run it with OpenCL or CUDA. Credit goes to\n[Collenchyma][collenchyma] and Rust.\n\nLeaf is part of the [Autumn][autumn] Machine Intelligence Platform, which is\nworking on making AI algorithms 100x more computational efficient.\n\nWe see Leaf as the core of constructing high-performance machine intelligence\napplications. Leaf's design makes it easy to publish independent modules to make\ne.g. deep reinforcement learning, visualization and monitoring, network\ndistribution, [automated preprocessing][cuticula] or scaleable production\ndeployment easily accessible for everyone.\n\n[caffe]: https://github.com/BVLC/caffe\n[rust]: https://www.rust-lang.org/\n[tensorflow]: https://github.com/tensorflow/tensorflow\n[benchmarks]: #benchmarks\n[leaf-examples]: #examples\n[documentation]: http://autumnai.github.io/leaf\n\n> Disclaimer: Leaf is currently in an early stage of development.\n> If you are experiencing any bugs with features that have been\n> implemented, feel free to create a issue.\n\n## Getting Started\n\n### Documentation\n\nTo learn how to build classical, deep or hybrid machine learning applications with Leaf, check out the [Leaf - Machine Learning for Hackers][leaf-book] book.\n\nFor additional information see the [Rust API Documentation][documentation] or the [Autumn Website][autumn].\n\nOr start by running the **Leaf examples**.\n\nWe are providing a [Leaf examples repository][leaf-examples], where we and\nothers publish executable machine learning models build with Leaf. It features\na CLI for easy usage and has a detailed guide in the [project\nREADME.md][leaf-examples].\n\nLeaf comes with an examples directory as well, which features popular neural\nnetworks (e.g. Alexnet, Overfeat, VGG). To run them on your machine, just follow\nthe install guide, clone this repoistory and then run\n\n```bash\n# The examples currently require CUDA support.\ncargo run --release --no-default-features --features cuda --example benchmarks alexnet\n```\n\n[leaf-examples]: https://github.com/autumnai/leaf-examples\n\n### Installation\n\n> Leaf is build in [Rust][rust]. If you are new to Rust you can install Rust as detailed [here][rust_download].\nWe also recommend taking a look at the [official Rust - Getting Started Guide][rust_getting_started].\n\nTo start building a machine learning application (Rust only for now. Wrappers are welcome) and you are using Cargo, just add Leaf to your `Cargo.toml`:\n\n```toml\n[dependencies]\nleaf = \"0.2.1\"\n```\n\n[rust_download]: https://www.rust-lang.org/downloads.html\n[rust_getting_started]: https://doc.rust-lang.org/book/getting-started.html\n[cargo-edit]: https://github.com/killercup/cargo-edit\n\nIf you are on a machine that doesn't have support for CUDA or OpenCL you\ncan selectively enable them like this in your `Cargo.toml`:\n\n```toml\n[dependencies]\nleaf = { version = \"0.2.1\", default-features = false }\n\n[features]\ndefault = [\"native\"] # include only the ones you want to use, in this case \"native\"\nnative  = [\"leaf/native\"]\ncuda    = [\"leaf/cuda\"]\nopencl  = [\"leaf/opencl\"]\n```\n\n> More information on the use of feature flags in Leaf can be found in [FEATURE-FLAGS.md](./FEATURE-FLAGS.md)\n\n### Contributing\n\nIf you want to start hacking on Leaf (e.g.\n  [adding a new `Layer`](http://autumnai.com/leaf/book/create-new-layer.html))\nyou should start with forking and cloning the repository.\n\nWe have more instructions to help you get started in the [CONTRIBUTING.md][contributing].\n\nWe also has a near real-time collaboration culture, which happens\nhere on Github and on the [Leaf Gitter Channel][gitter-leaf].\n\n> Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as below, without any additional terms or conditions.\n\n[contributing]: CONTRIBUTING.md\n[gitter-leaf]: https://gitter.im/autumnai/leaf\n[mj]: https://twitter.com/mjhirn\n[hobofan]: https://twitter.com/hobofan\n[irc]: https://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust-machine-learning\n\n## Ecosystem / Extensions\n\nWe designed Leaf and the other crates of the [Autumn Platform][autumn] to be as modular\nand extensible as possible. More helpful crates you can use with Leaf:\n\n- [**Cuticula**][cuticula]: Preprocessing Framework for Machine Learning\n- [**Collenchyma**][collenchyma]: Portable, HPC-Framework on any hardware with CUDA, OpenCL, Rust\n\n[cuticula]: https://github.com/autumnai/cuticula\n[collenchyma]: https://github.com/autumnai/collenchyma\n\n## Support / Contact\n\n- With a bit of luck, you can find us online on the #rust-machine-learning IRC at irc.mozilla.org,\n- but we are always approachable on [Gitter/Leaf][gitter-leaf]\n- For bugs and feature request, you can create a [Github issue][leaf-issue]\n- For more private matters, send us email straight to our inbox: developers@autumnai.com\n- Refer to [Autumn][autumn] for more information\n\n[leaf-issue]: https://github.com/autumnai/leaf/issues\n\n## Changelog\n\nYou can find the release history at the [CHANGELOG.md][changelog]. We are using [Clog][clog], the Rust tool for auto-generating CHANGELOG files.\n\n[changelog]: CHANGELOG.md\n[Clog]: https://github.com/clog-tool/clog-cli\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 3.99609375,
          "content": "<div align=\"center\">\n  <img src=\"http://autumnai.com/images/autumn_leaf_benchmarks_alexnet.png\"><br><br>\n</div>\n> Forward and Backward duration for Leaf 0.2 and other Machine Learning Frameworks on the popular Alexnet.\n\n# Announcing Leaf 0.2\n\nWe are happy to announce today the release of Leaf 0.2 on which we have been\nworking on for the last weeks. Leaf is a modular, performant, portable\nMachine Intelligence Framework.\nIt is the Hacker's Machine Intelligence Framework, developed by software\nengineers.\n\nYou can [install Leaf 0.2][install] and [run examples][examples], including\npopular Deep Neural Networks like Alexnet, Overfeat, VGG and more.\n\n## What's in Leaf 0.2\n\nThe release was mostly about finding an efficient and clean architecture,\ncatching up with the performance level of other Machine Learning Frameworks. It\nshares concepts from the brilliant work done by the people behind Torch,\nTensorflow, Caffe, Rust and numerous research papers. We have several large\nfeatures under development, Leaf 0.2 gives us the platform to go on exploring\nnew territory with Leaf 0.3.\n\n### Performance\n\nLeaf 0.2 is one of the fastest Machine Intelligence Frameworks that exist\ntoday. Rust was a big help in developing the entire platform over the course of\na few months. We achieved a very efficient GPU utilization and oriented our\narchitecture close to Torch and achieved the distribution capabilities of\nTensorflow, on a lower abstraction level. More information in the\nfollowing sections. \n\nMore Benchmarks and comparisons, including Memory utilization, can be found on\n[Deep Learning Benchmarks][deep-learning-benchmarks-website].\n\n### Portability\n\nLeaf 0.2 uses [Collenchyma][collenchyma] for training and running models on\nCPUs, GPUs, FPGAs, etc. with OpenCL or CUDA or other Computation Languages, on\nvarious machines and operating systems, without the need to adapt your code what\nso ever. This makes deployment of models to servers, desktops, smartphones and\nlater embedded devices very convenient.\n\nWith that abstraction and separation of algorithm representation and execution,\nwe gain a nice Framework for distributed model execution, without relying\non a symbolic, data-flow graph model like Tensorflow, which introduces\nperformance and development overhead concerns.\n\n### Architecture\n\nLeaf 0.2 replaces special `Network` objects with container layers\nlike the `Sequential` layer. Where previously all weights were stored centrally\nby the Network, each Layer is now responsible for managing its own weights.\nThis allows for more flexibility in expressing different network architectures.\nIt also enables better programmatic generation of networks by nesting container\nlayers where each container represents a common pattern in neural networks,\ne.g. Convolution, Pooling and ReLU following each other.\n\n### Contributors for Leaf 0.2\n\nWe had 9 individual contributors, which made Leaf 0.2 possible. Thank you so\nmuch for your contribution, when Leaf wasn't even executable, yet. And thank you\nfor everyone who took the time to engage with us on [Gitter][gitter-leaf] and\nGithub.\n\n* Maximilian Goisser ([@hobofan](https://twitter.com/hobofan))\n* Michael Hirn ([@mjhirn](https://twitter.com/mjhirn))\n* Ewan Higgs ([ehiggs](https://github.com/ehiggs))\n* Florian Gilcher ([@argorak](https://twitter.com/Argorak))\n* Paul Dib ([pdib](https://github.com/pdib))\n* David Irvine ([dirvine](https://github.com/dirvine))\n* Pascal Hertleif ([killercup](https://github.com/killercup))\n* Kyle Schmit ([kschmit90](https://github.com/kschmit90))\n* Sébastien Lerique ([wehlutyk](https://github.com/wehlutyk))\n\n<div align=\"center\">\n  <p>\n    <a href=\"http://autumnai.com\">More about Leaf and Autumn</a> |\n    Follow on Twitter: <a href=\"https://twitter.com/autumn_eng\">@autumn_eng</a>\n  </p>\n</div>\n\n[install]: https://github.com/autumnai/leaf#getting-started\n[examples]: https://github.com/autumnai/leaf#examples\n[collenchyma]: https://github.com/autumnai/collenchyma\n[deep-learning-benchmarks-website]: http://autumnai.com/deep-learning-benchmarks\n[gitter-leaf]: https://gitter.im/autumnai/leaf\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 0.09765625,
          "content": "extern crate capnpc;\n\nfn main() {\n    ::capnpc::compile(\"capnp\", &[\"capnp/leaf.capnp\"]).unwrap();\n}\n"
        },
        {
          "name": "capnp",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "perf",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.060546875,
          "content": "format_strings = false\nreorder_imports = true\nmax_width = 120\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}