{
  "metadata": {
    "timestamp": 1736709387224,
    "page": 105,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dtolnay/anyhow",
      "stars": 5667,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.029296875,
          "content": "/target\n**/*.rs.bk\nCargo.lock\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.0908203125,
          "content": "[package]\nname = \"anyhow\"\nversion = \"1.0.95\"\nauthors = [\"David Tolnay <dtolnay@gmail.com>\"]\ncategories = [\"rust-patterns\", \"no-std\"]\ndescription = \"Flexible concrete Error type built on std::error::Error\"\ndocumentation = \"https://docs.rs/anyhow\"\nedition = \"2018\"\nkeywords = [\"error\", \"error-handling\"]\nlicense = \"MIT OR Apache-2.0\"\nrepository = \"https://github.com/dtolnay/anyhow\"\nrust-version = \"1.39\"\n\n[features]\ndefault = [\"std\"]\nstd = []\n\n[dependencies]\n# On compilers older than 1.65, features=[\"backtrace\"] may be used to enable\n# backtraces via the `backtrace` crate. This feature has no effect on 1.65+\n# besides bringing in an unused dependency, as `std::backtrace` is always\n# preferred.\nbacktrace = { version = \"0.3.51\", optional = true }\n\n[dev-dependencies]\nfutures = { version = \"0.3\", default-features = false }\nrustversion = \"1.0.6\"\nsyn = { version = \"2.0\", features = [\"full\"] }\nthiserror = \"2\"\ntrybuild = { version = \"1.0.66\", features = [\"diff\"] }\n\n[lib]\ndoc-scrape-examples = false\n\n[package.metadata.docs.rs]\ntargets = [\"x86_64-unknown-linux-gnu\"]\nrustdoc-args = [\"--generate-link-to-definition\"]\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 9.4951171875,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 0.9990234375,
          "content": "Permission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.9580078125,
          "content": "Anyhow&ensp;¯\\\\\\_(°ペ)\\_/¯\n==========================\n\n[<img alt=\"github\" src=\"https://img.shields.io/badge/github-dtolnay/anyhow-8da0cb?style=for-the-badge&labelColor=555555&logo=github\" height=\"20\">](https://github.com/dtolnay/anyhow)\n[<img alt=\"crates.io\" src=\"https://img.shields.io/crates/v/anyhow.svg?style=for-the-badge&color=fc8d62&logo=rust\" height=\"20\">](https://crates.io/crates/anyhow)\n[<img alt=\"docs.rs\" src=\"https://img.shields.io/badge/docs.rs-anyhow-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\" height=\"20\">](https://docs.rs/anyhow)\n[<img alt=\"build status\" src=\"https://img.shields.io/github/actions/workflow/status/dtolnay/anyhow/ci.yml?branch=master&style=for-the-badge\" height=\"20\">](https://github.com/dtolnay/anyhow/actions?query=branch%3Amaster)\n\nThis library provides [`anyhow::Error`][Error], a trait object based error type\nfor easy idiomatic error handling in Rust applications.\n\n[Error]: https://docs.rs/anyhow/1.0/anyhow/struct.Error.html\n\n```toml\n[dependencies]\nanyhow = \"1.0\"\n```\n\n*Compiler support: requires rustc 1.39+*\n\n<br>\n\n## Details\n\n- Use `Result<T, anyhow::Error>`, or equivalently `anyhow::Result<T>`, as the\n  return type of any fallible function.\n\n  Within the function, use `?` to easily propagate any error that implements the\n  [`std::error::Error`] trait.\n\n  ```rust\n  use anyhow::Result;\n\n  fn get_cluster_info() -> Result<ClusterMap> {\n      let config = std::fs::read_to_string(\"cluster.json\")?;\n      let map: ClusterMap = serde_json::from_str(&config)?;\n      Ok(map)\n  }\n  ```\n\n  [`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n- Attach context to help the person troubleshooting the error understand where\n  things went wrong. A low-level error like \"No such file or directory\" can be\n  annoying to debug without more context about what higher level step the\n  application was in the middle of.\n\n  ```rust\n  use anyhow::{Context, Result};\n\n  fn main() -> Result<()> {\n      ...\n      it.detach().context(\"Failed to detach the important thing\")?;\n\n      let content = std::fs::read(path)\n          .with_context(|| format!(\"Failed to read instrs from {}\", path))?;\n      ...\n  }\n  ```\n\n  ```console\n  Error: Failed to read instrs from ./path/to/instrs.json\n\n  Caused by:\n      No such file or directory (os error 2)\n  ```\n\n- Downcasting is supported and can be by value, by shared reference, or by\n  mutable reference as needed.\n\n  ```rust\n  // If the error was caused by redaction, then return a\n  // tombstone instead of the content.\n  match root_cause.downcast_ref::<DataStoreError>() {\n      Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n      None => Err(error),\n  }\n  ```\n\n- If using Rust &ge; 1.65, a backtrace is captured and printed with the error if\n  the underlying error type does not already provide its own. In order to see\n  backtraces, they must be enabled through the environment variables described\n  in [`std::backtrace`]:\n\n  - If you want panics and errors to both have backtraces, set\n    `RUST_BACKTRACE=1`;\n  - If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n  - If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n    `RUST_LIB_BACKTRACE=0`.\n\n  [`std::backtrace`]: https://doc.rust-lang.org/std/backtrace/index.html#environment-variables\n\n- Anyhow works with any error type that has an impl of `std::error::Error`,\n  including ones defined in your crate. We do not bundle a `derive(Error)` macro\n  but you can write the impls yourself or use a standalone macro like\n  [thiserror].\n\n  ```rust\n  use thiserror::Error;\n\n  #[derive(Error, Debug)]\n  pub enum FormatError {\n      #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n      InvalidHeader {\n          expected: String,\n          found: String,\n      },\n      #[error(\"Missing attribute: {0}\")]\n      MissingAttribute(String),\n  }\n  ```\n\n- One-off error messages can be constructed using the `anyhow!` macro, which\n  supports string interpolation and produces an `anyhow::Error`.\n\n  ```rust\n  return Err(anyhow!(\"Missing attribute: {}\", missing));\n  ```\n\n  A `bail!` macro is provided as a shorthand for the same early return.\n\n  ```rust\n  bail!(\"Missing attribute: {}\", missing);\n  ```\n\n<br>\n\n## No-std support\n\nIn no_std mode, almost all of the same API is available and works the same way.\nTo depend on Anyhow in no_std mode, disable our default enabled \"std\" feature in\nCargo.toml. A global allocator is required.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", default-features = false }\n```\n\nWith versions of Rust older than 1.81, no_std mode may require an additional\n`.map_err(Error::msg)` when working with a non-Anyhow error type inside a\nfunction that returns Anyhow's error type, as the trait that `?`-based error\nconversions are defined by is only available in std in those old versions.\n\n<br>\n\n## Comparison to failure\n\nThe `anyhow::Error` type works something like `failure::Error`, but unlike\nfailure ours is built around the standard library's `std::error::Error` trait\nrather than a separate trait `failure::Fail`. The standard library has adopted\nthe necessary improvements for this to be possible as part of [RFC 2504].\n\n[RFC 2504]: https://github.com/rust-lang/rfcs/blob/master/text/2504-fix-error.md\n\n<br>\n\n## Comparison to thiserror\n\nUse Anyhow if you don't care what error type your functions return, you just\nwant it to be easy. This is common in application code. Use [thiserror] if you\nare a library that wants to design your own dedicated error type(s) so that on\nfailures the caller gets exactly the information that you choose.\n\n[thiserror]: https://github.com/dtolnay/thiserror\n\n<br>\n\n#### License\n\n<sup>\nLicensed under either of <a href=\"LICENSE-APACHE\">Apache License, Version\n2.0</a> or <a href=\"LICENSE-MIT\">MIT license</a> at your option.\n</sup>\n\n<br>\n\n<sub>\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in this crate by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n</sub>\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 7.548828125,
          "content": "use std::env;\nuse std::ffi::OsString;\nuse std::fs;\nuse std::io::ErrorKind;\nuse std::iter;\nuse std::path::Path;\nuse std::process::{self, Command, Stdio};\nuse std::str;\n\n#[cfg(all(feature = \"backtrace\", not(feature = \"std\")))]\ncompile_error! {\n    \"`backtrace` feature without `std` feature is not supported\"\n}\n\nfn main() {\n    let mut error_generic_member_access = false;\n    if cfg!(feature = \"std\") {\n        println!(\"cargo:rerun-if-changed=build/probe.rs\");\n\n        let consider_rustc_bootstrap;\n        if compile_probe(false) {\n            // This is a nightly or dev compiler, so it supports unstable\n            // features regardless of RUSTC_BOOTSTRAP. No need to rerun build\n            // script if RUSTC_BOOTSTRAP is changed.\n            error_generic_member_access = true;\n            consider_rustc_bootstrap = false;\n        } else if let Some(rustc_bootstrap) = env::var_os(\"RUSTC_BOOTSTRAP\") {\n            if compile_probe(true) {\n                // This is a stable or beta compiler for which the user has set\n                // RUSTC_BOOTSTRAP to turn on unstable features. Rerun build\n                // script if they change it.\n                error_generic_member_access = true;\n                consider_rustc_bootstrap = true;\n            } else if rustc_bootstrap == \"1\" {\n                // This compiler does not support the generic member access API\n                // in the form that anyhow expects. No need to pay attention to\n                // RUSTC_BOOTSTRAP.\n                error_generic_member_access = false;\n                consider_rustc_bootstrap = false;\n            } else {\n                // This is a stable or beta compiler for which RUSTC_BOOTSTRAP\n                // is set to restrict the use of unstable features by this\n                // crate.\n                error_generic_member_access = false;\n                consider_rustc_bootstrap = true;\n            }\n        } else {\n            // Without RUSTC_BOOTSTRAP, this compiler does not support the\n            // generic member access API in the form that anyhow expects, but\n            // try again if the user turns on unstable features.\n            error_generic_member_access = false;\n            consider_rustc_bootstrap = true;\n        }\n\n        if error_generic_member_access {\n            println!(\"cargo:rustc-cfg=std_backtrace\");\n            println!(\"cargo:rustc-cfg=error_generic_member_access\");\n        }\n\n        if consider_rustc_bootstrap {\n            println!(\"cargo:rerun-if-env-changed=RUSTC_BOOTSTRAP\");\n        }\n    }\n\n    let rustc = match rustc_minor_version() {\n        Some(rustc) => rustc,\n        None => return,\n    };\n\n    if rustc >= 80 {\n        println!(\"cargo:rustc-check-cfg=cfg(anyhow_nightly_testing)\");\n        println!(\"cargo:rustc-check-cfg=cfg(anyhow_no_core_error)\");\n        println!(\"cargo:rustc-check-cfg=cfg(anyhow_no_core_unwind_safe)\");\n        println!(\"cargo:rustc-check-cfg=cfg(anyhow_no_fmt_arguments_as_str)\");\n        println!(\"cargo:rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");\n        println!(\"cargo:rustc-check-cfg=cfg(anyhow_no_unsafe_op_in_unsafe_fn_lint)\");\n        println!(\"cargo:rustc-check-cfg=cfg(error_generic_member_access)\");\n        println!(\"cargo:rustc-check-cfg=cfg(std_backtrace)\");\n    }\n\n    if rustc < 51 {\n        // core::ptr::addr_of\n        // https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html#stabilized-apis\n        println!(\"cargo:rustc-cfg=anyhow_no_ptr_addr_of\");\n    }\n\n    if rustc < 52 {\n        // core::fmt::Arguments::as_str\n        // https://blog.rust-lang.org/2021/05/06/Rust-1.52.0.html#stabilized-apis\n        println!(\"cargo:rustc-cfg=anyhow_no_fmt_arguments_as_str\");\n\n        // #![deny(unsafe_op_in_unsafe_fn)]\n        // https://github.com/rust-lang/rust/issues/71668\n        println!(\"cargo:rustc-cfg=anyhow_no_unsafe_op_in_unsafe_fn_lint\");\n    }\n\n    if rustc < 56 {\n        // core::panic::{UnwindSafe, RefUnwindSafe}\n        // https://blog.rust-lang.org/2021/10/21/Rust-1.56.0.html#stabilized-apis\n        println!(\"cargo:rustc-cfg=anyhow_no_core_unwind_safe\");\n    }\n\n    if !error_generic_member_access && cfg!(feature = \"std\") && rustc >= 65 {\n        // std::backtrace::Backtrace\n        // https://blog.rust-lang.org/2022/11/03/Rust-1.65.0.html#stabilized-apis\n        println!(\"cargo:rustc-cfg=std_backtrace\");\n    }\n\n    if rustc < 81 {\n        // core::error::Error\n        // https://blog.rust-lang.org/2024/09/05/Rust-1.81.0.html#coreerrorerror\n        println!(\"cargo:rustc-cfg=anyhow_no_core_error\");\n    }\n}\n\nfn compile_probe(rustc_bootstrap: bool) -> bool {\n    if env::var_os(\"RUSTC_STAGE\").is_some() {\n        // We are running inside rustc bootstrap. This is a highly non-standard\n        // environment with issues such as:\n        //\n        //     https://github.com/rust-lang/cargo/issues/11138\n        //     https://github.com/rust-lang/rust/issues/114839\n        //\n        // Let's just not use nightly features here.\n        return false;\n    }\n\n    let rustc = cargo_env_var(\"RUSTC\");\n    let out_dir = cargo_env_var(\"OUT_DIR\");\n    let out_subdir = Path::new(&out_dir).join(\"probe\");\n    let probefile = Path::new(\"build\").join(\"probe.rs\");\n\n    if let Err(err) = fs::create_dir(&out_subdir) {\n        if err.kind() != ErrorKind::AlreadyExists {\n            eprintln!(\"Failed to create {}: {}\", out_subdir.display(), err);\n            process::exit(1);\n        }\n    }\n\n    let rustc_wrapper = env::var_os(\"RUSTC_WRAPPER\").filter(|wrapper| !wrapper.is_empty());\n    let rustc_workspace_wrapper =\n        env::var_os(\"RUSTC_WORKSPACE_WRAPPER\").filter(|wrapper| !wrapper.is_empty());\n    let mut rustc = rustc_wrapper\n        .into_iter()\n        .chain(rustc_workspace_wrapper)\n        .chain(iter::once(rustc));\n    let mut cmd = Command::new(rustc.next().unwrap());\n    cmd.args(rustc);\n\n    if !rustc_bootstrap {\n        cmd.env_remove(\"RUSTC_BOOTSTRAP\");\n    }\n\n    cmd.stderr(Stdio::null())\n        .arg(\"--edition=2018\")\n        .arg(\"--crate-name=anyhow\")\n        .arg(\"--crate-type=lib\")\n        .arg(\"--emit=dep-info,metadata\")\n        .arg(\"--cap-lints=allow\")\n        .arg(\"--out-dir\")\n        .arg(&out_subdir)\n        .arg(probefile);\n\n    if let Some(target) = env::var_os(\"TARGET\") {\n        cmd.arg(\"--target\").arg(target);\n    }\n\n    // If Cargo wants to set RUSTFLAGS, use that.\n    if let Ok(rustflags) = env::var(\"CARGO_ENCODED_RUSTFLAGS\") {\n        if !rustflags.is_empty() {\n            for arg in rustflags.split('\\x1f') {\n                cmd.arg(arg);\n            }\n        }\n    }\n\n    let success = match cmd.status() {\n        Ok(status) => status.success(),\n        Err(_) => false,\n    };\n\n    // Clean up to avoid leaving nondeterministic absolute paths in the dep-info\n    // file in OUT_DIR, which causes nonreproducible builds in build systems\n    // that treat the entire OUT_DIR as an artifact.\n    if let Err(err) = fs::remove_dir_all(&out_subdir) {\n        if err.kind() != ErrorKind::NotFound {\n            eprintln!(\"Failed to clean up {}: {}\", out_subdir.display(), err);\n            process::exit(1);\n        }\n    }\n\n    success\n}\n\nfn rustc_minor_version() -> Option<u32> {\n    let rustc = cargo_env_var(\"RUSTC\");\n    let output = Command::new(rustc).arg(\"--version\").output().ok()?;\n    let version = str::from_utf8(&output.stdout).ok()?;\n    let mut pieces = version.split('.');\n    if pieces.next() != Some(\"rustc 1\") {\n        return None;\n    }\n    pieces.next()?.parse().ok()\n}\n\nfn cargo_env_var(key: &str) -> OsString {\n    env::var_os(key).unwrap_or_else(|| {\n        eprintln!(\n            \"Environment variable ${} is not set during execution of build script\",\n            key,\n        );\n        process::exit(1);\n    })\n}\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.037109375,
          "content": "[toolchain]\ncomponents = [\"rust-src\"]\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}