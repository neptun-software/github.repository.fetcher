{
  "metadata": {
    "timestamp": 1736709353421,
    "page": 42,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SeaQL/sea-orm",
      "stars": 7652,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0341796875,
          "content": "*.html.tera linguist-language=HTML\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0810546875,
          "content": "target\nfiredbg\nCargo.lock\n*.sublime*\n.vscode\n.idea/*\n*/.idea/*\n.env.local\n.DS_Store"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 83.3125,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/)\nand this project adheres to [Semantic Versioning](http://semver.org/).\n\n## 1.1.4 - 2025-01-10\n\n### Enhancements\n\n* Allow modifying the connection in migrations https://github.com/SeaQL/sea-orm/pull/2397\n* `DeriveRelatedEntity` proc_macro use `async-graphql` re-exported by `seaography` https://github.com/SeaQL/sea-orm/pull/2469\n\n## 1.1.3 - 2024-12-24\n\n### New Features\n\n* [sea-orm-codegen] register seaography entity modules & active enums https://github.com/SeaQL/sea-orm/pull/2403\n```rust\npub mod prelude;\n\npub mod sea_orm_active_enums;\n\npub mod baker;\npub mod bakery;\npub mod cake;\npub mod cakes_bakers;\npub mod customer;\npub mod lineitem;\npub mod order;\n\nseaography::register_entity_modules!([\n    baker,\n    bakery,\n    cake,\n    cakes_bakers,\n    customer,\n    lineitem,\n    order,\n]);\n\nseaography::register_active_enums!([\n    sea_orm_active_enums::Tea,\n    sea_orm_active_enums::Color,\n]);\n```\n\n### Enhancements\n\n* Insert many allow active models to have different column set https://github.com/SeaQL/sea-orm/pull/2433\n```rust\n// this previously panics\nlet apple = cake_filling::ActiveModel {\n    cake_id: ActiveValue::set(2),\n    filling_id: ActiveValue::NotSet,\n};\nlet orange = cake_filling::ActiveModel {\n    cake_id: ActiveValue::NotSet,\n    filling_id: ActiveValue::set(3),\n};\nassert_eq!(\n    Insert::<cake_filling::ActiveModel>::new()\n        .add_many([apple, orange])\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#\"INSERT INTO \"cake_filling\" (\"cake_id\", \"filling_id\") VALUES (2, NULL), (NULL, 3)\"#,\n);\n```\n* [sea-orm-cli] Added `MIGRATION_DIR` environment variable https://github.com/SeaQL/sea-orm/pull/2419\n* Added `ColumnDef::is_unique` https://github.com/SeaQL/sea-orm/pull/2401\n* Postgres: quote schema in `search_path` https://github.com/SeaQL/sea-orm/pull/2436\n\n### Bug Fixes\n\n* MySQL: fix transaction isolation level not respected when used with access mode https://github.com/SeaQL/sea-orm/pull/2450\n\n## 1.1.2 - 2024-12-02\n\n### Enhancements\n\n* Added `ColumnTrait::enum_type_name()` to signify enum types https://github.com/SeaQL/sea-orm/pull/2415\n* Added `DbBackend::boolean_value()` for database dependent boolean value https://github.com/SeaQL/sea-orm/pull/2415\n\n## 1.1.1 - 2024-11-04\n\n### Enhancements\n\n* [sea-orm-macros] `impl From<Model> for ActiveModel` instead of `impl From<<Entity as sea_orm::EntityTrait>::Model> for ActiveModel` https://github.com/SeaQL/sea-orm/pull/2349.\nNow the following can compile:\n```rust\nuse sea_orm::{tests_cfg::cake, Set};\n\nstruct Cake {\n    id: i32,\n    name: String,\n}\n\nimpl From<Cake> for cake::ActiveModel {\n    fn from(value: Cake) -> Self {\n        Self {\n            id: Set(value.id),\n            name: Set(value.name),\n        }\n    }\n}\n```\n\n## 1.1.0 - 2024-10-15\n\n### Versions\n\n+ `1.1.0-rc.1`: 2024-08-09\n+ `1.1.0-rc.2`: 2024-10-04\n+ `1.1.0-rc.3`: 2024-10-08\n\n### Enhancements\n\n* [sea-orm-macros] Call `EnumIter::get` using fully qualified syntax https://github.com/SeaQL/sea-orm/pull/2321\n* Construct `DatabaseConnection` directly from `sqlx::PgPool`, `sqlx::SqlitePool` and `sqlx::MySqlPool` https://github.com/SeaQL/sea-orm/pull/2348\n* [sea-orm-migration] Add `pk_uuid` schema helper https://github.com/SeaQL/sea-orm/pull/2329\n* [sea-orm-migration] Allow `custom` and `custom_null` schema helper to take column name and alias of different `IntoIden` types https://github.com/SeaQL/sea-orm/pull/2326\n* Add `ColumnDef::get_column_default` getter https://github.com/SeaQL/sea-orm/pull/2387\n\n### Upgrades\n\n* Upgrade `sqlx` to `0.8.2` https://github.com/SeaQL/sea-orm/pull/2305, https://github.com/SeaQL/sea-orm/pull/2371\n* Upgrade `bigdecimal` to `0.4` https://github.com/SeaQL/sea-orm/pull/2305\n* Upgrade `sea-query` to `0.32.0-rc` https://github.com/SeaQL/sea-orm/pull/2305\n* Upgrade `sea-query-binder` to `0.7.0-rc` https://github.com/SeaQL/sea-orm/pull/2305\n* Upgrade `sea-schema` to `0.16.0-rc` https://github.com/SeaQL/sea-orm/pull/2305\n* Upgrade `ouroboros` to `0.18` https://github.com/SeaQL/sea-orm/pull/2353\n\n### House keeping\n\n* Fix typos https://github.com/SeaQL/sea-orm/pull/2360\n* Update documentations https://github.com/SeaQL/sea-orm/pull/2345\n\n## 1.0.1 - 2024-08-26\n\n### New Features\n\n* Added `ConnectOptions::connect_lazy` for creating DB connection pools without establishing connections up front https://github.com/SeaQL/sea-orm/pull/2268\n\n### Breaking Changes\n\n* Changed `ProxyDatabaseTrait` methods to async. It's a breaking change, but it should have been part of the 1.0 release.\n    The feature is behind the feature guard `proxy`, and we believe it shouldn't impact majority of users.\n    https://github.com/SeaQL/sea-orm/pull/2278\n\n### Bug Fixes\n\n* [sea-orm-codegen] Fix `ColumnType` to Rust type resolution https://github.com/SeaQL/sea-orm/pull/2313\n\n## 1.0.0 - 2024-08-02\n\n### Versions\n\n+ `1.0.0-rc.1`: 2024-02-06\n+ `1.0.0-rc.2`: 2024-03-15\n+ `1.0.0-rc.3`: 2024-03-26\n+ `1.0.0-rc.4`: 2024-05-13\n+ `1.0.0-rc.5`: 2024-05-29\n+ `1.0.0-rc.6`: 2024-06-19\n+ `1.0.0-rc.7`: 2024-06-25\n\n### New Features\n\n* Introduce `PrimaryKeyArity` with `ARITY` constant https://github.com/SeaQL/sea-orm/pull/2185\n```rust\nfn get_arity_of<E: EntityTrait>() -> usize {\n    E::PrimaryKey::iter().count() // before; runtime\n    <<E::PrimaryKey as PrimaryKeyTrait>::ValueType as PrimaryKeyArity>::ARITY // now; compile-time\n}\n```\n* Associate `ActiveModel` to `EntityTrait` https://github.com/SeaQL/sea-orm/pull/2186\n* [sea-orm-macros] Added `rename_all` attribute to `DeriveEntityModel` & `DeriveActiveEnum` https://github.com/SeaQL/sea-orm/pull/2170\n```rust\n#[derive(DeriveEntityModel)]\n#[sea_orm(table_name = \"user\", rename_all = \"camelCase\")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    id: i32,\n    first_name: String, // firstName\n    #[sea_orm(column_name = \"lAsTnAmE\")]\n    last_name: String, // lAsTnAmE\n}\n\n#[derive(EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = \"String\", db_type = \"String(StringLen::None)\", rename_all = \"camelCase\")]\npub enum TestEnum {\n    DefaultVariant, // defaultVariant\n    #[sea_orm(rename = \"kebab-case\")]\n    VariantKebabCase, // variant-kebab-case\n    #[sea_orm(rename = \"snake_case\")]\n    VariantSnakeCase, // variant_snake_case\n    #[sea_orm(string_value = \"CuStOmStRiNgVaLuE\")]\n    CustomStringValue, // CuStOmStRiNgVaLuE\n}\n```\n* [sea-orm-migration] schema helper https://github.com/SeaQL/sea-orm/pull/2099\n```rust\n// Remember to import `sea_orm_migration::schema::*`\nuse sea_orm_migration::{prelude::*, schema::*};\n\n#[derive(DeriveMigrationName)]\npub struct Migration;\n\n#[async_trait::async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        manager\n            .create_table(\n                Table::create()\n                    .table(Users::Table)\n                    .if_not_exists()\n                    .col(pk_auto(Users::Id)) // Primary key with auto-increment\n                    .col(uuid(Users::Pid)) // UUID column\n                    .col(string_uniq(Users::Email)) // String column with unique constraint\n                    .col(string(Users::Password)) // String column\n                    .col(string(Users::ApiKey).unique_key())\n                    .col(string(Users::Name))\n                    .col(string_null(Users::ResetToken)) // Nullable string column\n                    .col(timestamp_null(Users::ResetSentAt)) // Nullable timestamp column\n                    .col(string_null(Users::EmailVerificationToken))\n                    .col(timestamp_null(Users::EmailVerificationSentAt))\n                    .col(timestamp_null(Users::EmailVerifiedAt))\n                    .to_owned(),\n            )\n            .await\n    }\n\n    // ...\n}\n```\n\n### Enhancements\n\n* Added non-TLS runtime https://github.com/SeaQL/sea-orm/pull/2256\n* Added `QuerySelect::tbl_col_as`\n* Added `Insert::on_conflict_do_nothing` https://github.com/SeaQL/sea-orm/pull/2244\n* Migration schema nullable column set NULL explicitly https://github.com/SeaQL/sea-orm/pull/2255\n* Added `ActiveValue::set_if_not_equals()` https://github.com/SeaQL/sea-orm/pull/2194\n* Added `ActiveValue::try_as_ref()` https://github.com/SeaQL/sea-orm/pull/2197\n* Added `QuerySelect::order_by_with_nulls` https://github.com/SeaQL/sea-orm/pull/2228\n* Expose `get_xxx_connection_pool` by default https://github.com/SeaQL/sea-orm/pull/2233\n* Added `QueryResult::column_names` https://github.com/SeaQL/sea-orm/pull/2148\n* [sea-orm-macro] Add `@generated` in generated code https://github.com/SeaQL/sea-orm/pull/2199\n* [sea-orm-macro] Qualify traits in `DeriveActiveModel` macro https://github.com/SeaQL/sea-orm/pull/1665\n* [sea-orm-cli] Fix `migrate generate` on empty `mod.rs` files https://github.com/SeaQL/sea-orm/pull/2064\n* `DerivePartialModel` macro attribute `entity` now supports `syn::Type` https://github.com/SeaQL/sea-orm/pull/2137\n```rust\n#[derive(DerivePartialModel)]\n#[sea_orm(entity = \"<entity::Model as ModelTrait>::Entity\")]\nstruct EntityNameNotAIdent {\n    #[sea_orm(from_col = \"foo2\")]\n    _foo: i32,\n    #[sea_orm(from_col = \"bar2\")]\n    _bar: String,\n}\n```\n* Added `RelationDef::from_alias()` https://github.com/SeaQL/sea-orm/pull/2146\n```rust\nlet cf = Alias::new(\"cf\");\n\nassert_eq!(\n    cake::Entity::find()\n        .join_as(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Cake.def().rev(),\n            cf.clone()\n        )\n        .join(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Filling.def().from_alias(cf)\n        )\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        \"SELECT `cake`.`id`, `cake`.`name` FROM `cake`\",\n        \"LEFT JOIN `cake_filling` AS `cf` ON `cake`.`id` = `cf`.`cake_id`\",\n        \"LEFT JOIN `filling` ON `cf`.`filling_id` = `filling`.`id`\",\n    ]\n    .join(\" \")\n);\n```\n\n### Bug Fixes\n\n* Set schema search path in Postgres without enclosing single quote https://github.com/SeaQL/sea-orm/pull/2241\n* [sea-orm-cli] Generate `has_one` relation for foreign key of unique index / constraint https://github.com/SeaQL/sea-orm/pull/2254\n\n### Breaking changes\n\n* Renamed `ConnectOptions::pool_options()` to `ConnectOptions::sqlx_pool_options()` https://github.com/SeaQL/sea-orm/pull/2145\n* Made `sqlx_common` private, hiding `sqlx_error_to_xxx_err` https://github.com/SeaQL/sea-orm/pull/2145\n* Rework SQLite type mappings https://github.com/SeaQL/sea-orm/pull/2077, https://github.com/SeaQL/sea-orm/pull/2078\n\n### Upgrades\n\n* Upgrade `time` to `0.3.36` https://github.com/SeaQL/sea-orm/pull/2267\n* Upgrade `strum` to `0.26` https://github.com/SeaQL/sea-orm/pull/2088\n* Upgrade `sea-schema` to `0.15.0`\n* Upgrade `sea-query-binder` to `0.6.0`\n* Upgrade `sea-query` to `0.31.0`\n\n### House keeping\n\n* Reduce warnings in integration tests https://github.com/SeaQL/sea-orm/pull/2177\n* Improved Actix example to return 404 not found on unexpected inputs https://github.com/SeaQL/sea-orm/pull/2140\n* Re-enable `rocket_okapi` example https://github.com/SeaQL/sea-orm/pull/2136\n\n## 1.0.0-rc.7 - 2024-06-25\n\n### Upgrades\n\n* Upgrade `sea-query-binder` to `0.6.0-rc.4` https://github.com/SeaQL/sea-orm/pull/2267\n* Upgrade `time` to `0.3.36` https://github.com/SeaQL/sea-orm/pull/2267\n\n## 1.0.0-rc.6 - 2024-06-19\n\n### Enhancements\n\n* Added non-TLS runtime https://github.com/SeaQL/sea-orm/pull/2256\n* Added `QuerySelect::tbl_col_as`\n* Added `Insert::on_conflict_do_nothing` https://github.com/SeaQL/sea-orm/pull/2244\n* Migration schema nullable column set NULL explicitly https://github.com/SeaQL/sea-orm/pull/2255\n\n### Bug Fixes\n\n* Set schema search path in Postgres without enclosing single quote https://github.com/SeaQL/sea-orm/pull/2241\n* [sea-orm-cli] Generate `has_one` relation for foreign key of unique index / constraint https://github.com/SeaQL/sea-orm/pull/2254\n\n## 1.0.0-rc.5 - 2024-05-29\n\n### New Features\n\n* Introduce `PrimaryKeyArity` with `ARITY` constant https://github.com/SeaQL/sea-orm/pull/2185\n```rust\nfn get_arity_of<E: EntityTrait>() -> usize {\n    E::PrimaryKey::iter().count() // before; runtime\n    <<E::PrimaryKey as PrimaryKeyTrait>::ValueType as PrimaryKeyArity>::ARITY // now; compile-time\n}\n```\n* Associate `ActiveModel` to `EntityTrait` https://github.com/SeaQL/sea-orm/pull/2186\n* [sea-orm-macros] Added `rename_all` attribute to `DeriveEntityModel` & `DeriveActiveEnum` https://github.com/SeaQL/sea-orm/pull/2170\n```rust\n#[derive(DeriveEntityModel)]\n#[sea_orm(table_name = \"user\", rename_all = \"camelCase\")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    id: i32,\n    first_name: String, // firstName\n    #[sea_orm(column_name = \"lAsTnAmE\")]\n    last_name: String, // lAsTnAmE\n}\n\n#[derive(EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = \"String\", db_type = \"String(StringLen::None)\", rename_all = \"camelCase\")]\npub enum TestEnum {\n    DefaultVariant, // defaultVariant\n    #[sea_orm(rename = \"kebab-case\")]\n    VariantKebabCase, // variant-kebab-case\n    #[sea_orm(rename = \"snake_case\")]\n    VariantSnakeCase, // variant_snake_case\n    #[sea_orm(string_value = \"CuStOmStRiNgVaLuE\")]\n    CustomStringValue, // CuStOmStRiNgVaLuE\n}\n```\n\n### Enhancements\n\n* Added `ActiveValue::set_if_not_equals()` https://github.com/SeaQL/sea-orm/pull/2194\n* Added `ActiveValue::try_as_ref()` https://github.com/SeaQL/sea-orm/pull/2197\n* Added `QuerySelect::order_by_with_nulls` https://github.com/SeaQL/sea-orm/pull/2228\n* Expose `get_xxx_connection_pool` by default https://github.com/SeaQL/sea-orm/pull/2233\n\n## 1.0.0-rc.4 - 2024-05-13\n\n### Enhancements\n\n* Added `QueryResult::column_names` https://github.com/SeaQL/sea-orm/pull/2148\n* [sea-orm-macro] Add `@generated` in generated code https://github.com/SeaQL/sea-orm/pull/2199\n\n### Upgrades\n\n* Upgrade `sea-query` to `0.31.0-rc.6`\n* Upgrade `sea-schema` to `0.15.0-rc.6`\n\n### House Keeping\n\n* Reduce warnings in integration tests https://github.com/SeaQL/sea-orm/pull/2177\n\n## 1.0.0-rc.3 - 2024-03-26\n\n### Enhancements\n\n* [sea-orm-macro] Qualify traits in `DeriveActiveModel` macro https://github.com/SeaQL/sea-orm/pull/1665\n\n## 1.0.0-rc.2 - 2024-03-15\n\n### Breaking Changes\n\n* Renamed `ConnectOptions::pool_options()` to `ConnectOptions::sqlx_pool_options()` https://github.com/SeaQL/sea-orm/pull/2145\n* Made `sqlx_common` private, hiding `sqlx_error_to_xxx_err` https://github.com/SeaQL/sea-orm/pull/2145\n\n### Enhancements\n\n* [sea-orm-cli] Fix `migrate generate` on empty `mod.rs` files https://github.com/SeaQL/sea-orm/pull/2064\n* `DerivePartialModel` macro attribute `entity` now supports `syn::Type` https://github.com/SeaQL/sea-orm/pull/2137\n```rust\n#[derive(DerivePartialModel)]\n#[sea_orm(entity = \"<entity::Model as ModelTrait>::Entity\")]\nstruct EntityNameNotAIdent {\n    #[sea_orm(from_col = \"foo2\")]\n    _foo: i32,\n    #[sea_orm(from_col = \"bar2\")]\n    _bar: String,\n}\n```\n* Added `RelationDef::from_alias()` https://github.com/SeaQL/sea-orm/pull/2146\n```rust\nlet cf = Alias::new(\"cf\");\n\nassert_eq!(\n    cake::Entity::find()\n        .join_as(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Cake.def().rev(),\n            cf.clone()\n        )\n        .join(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Filling.def().from_alias(cf)\n        )\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        \"SELECT `cake`.`id`, `cake`.`name` FROM `cake`\",\n        \"LEFT JOIN `cake_filling` AS `cf` ON `cake`.`id` = `cf`.`cake_id`\",\n        \"LEFT JOIN `filling` ON `cf`.`filling_id` = `filling`.`id`\",\n    ]\n    .join(\" \")\n);\n```\n\n### Upgrades\n\n* Upgrade `sea-schema` to `0.15.0-rc.3`\n* Upgrade `strum` to `0.26` https://github.com/SeaQL/sea-orm/pull/2088\n\n### House keeping\n\n* Improved Actix example to return 404 not found on unexpected inputs https://github.com/SeaQL/sea-orm/pull/2140\n* Re-enable `rocket_okapi` example https://github.com/SeaQL/sea-orm/pull/2136\n\n## 1.0.0-rc.1 - 2024-02-06\n\n### New Features\n\n* [sea-orm-migration] schema helper https://github.com/SeaQL/sea-orm/pull/2099\n```rust\n// Remember to import `sea_orm_migration::schema::*`\nuse sea_orm_migration::{prelude::*, schema::*};\n\n#[derive(DeriveMigrationName)]\npub struct Migration;\n\n#[async_trait::async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        manager\n            .create_table(\n                Table::create()\n                    .table(Users::Table)\n                    .if_not_exists()\n                    .col(pk_auto(Users::Id)) // Primary key with auto-increment\n                    .col(uuid(Users::Pid)) // UUID column\n                    .col(string_uniq(Users::Email)) // String column with unique constraint\n                    .col(string(Users::Password)) // String column\n                    .col(string(Users::ApiKey).unique_key())\n                    .col(string(Users::Name))\n                    .col(string_null(Users::ResetToken)) // Nullable string column\n                    .col(timestamp_null(Users::ResetSentAt)) // Nullable timestamp column\n                    .col(string_null(Users::EmailVerificationToken))\n                    .col(timestamp_null(Users::EmailVerificationSentAt))\n                    .col(timestamp_null(Users::EmailVerifiedAt))\n                    .to_owned(),\n            )\n            .await\n    }\n\n    // ...\n}\n```\n\n### Breaking Changes\n\n* Rework SQLite type mappings https://github.com/SeaQL/sea-orm/pull/2077, https://github.com/SeaQL/sea-orm/pull/2078\n* Updated `sea-query` to `0.31`\n\n## 0.12.14 - 2024-02-05\n\n* Added feature flag `sqlite-use-returning-for-3_35` to use SQLite's returning https://github.com/SeaQL/sea-orm/pull/2070\n* Added Loco example https://github.com/SeaQL/sea-orm/pull/2092\n\n## 0.12.12 - 2024-01-22\n\n### Bug Fixes\n\n* [sea-orm-cli] Fix entity generation for non-alphanumeric enum variants https://github.com/SeaQL/sea-orm/pull/1821\n* [sea-orm-cli] Fix entity generation for relations with composite keys https://github.com/SeaQL/sea-orm/pull/2071\n\n### Enhancements\n\n* Added `ConnectOptions::test_before_acquire`\n\n## 0.12.11 - 2024-01-14\n\n### New Features\n\n* Added `desc` to `Cursor` paginator https://github.com/SeaQL/sea-orm/pull/2037\n\n### Enhancements\n\n* Improve query performance of `Paginator`'s `COUNT` query https://github.com/SeaQL/sea-orm/pull/2030\n* Added SQLx slow statements logging to `ConnectOptions` https://github.com/SeaQL/sea-orm/pull/2055\n* Added `QuerySelect::lock_with_behavior` https://github.com/SeaQL/sea-orm/pull/1867\n\n### Bug Fixes\n\n* [sea-orm-macro] Qualify types in `DeriveValueType` macro https://github.com/SeaQL/sea-orm/pull/2054\n\n### House keeping\n\n* Fix clippy warnings on 1.75 https://github.com/SeaQL/sea-orm/pull/2057\n\n## 0.12.10 - 2023-12-14\n\n### New Features\n\n* [sea-orm-macro] Comment attribute for Entity (`#[sea_orm(comment = \"action\")]`); `create_table_from_entity` supports comment https://github.com/SeaQL/sea-orm/pull/2009\n* Added \"proxy\" (feature flag `proxy`) to database backend https://github.com/SeaQL/sea-orm/pull/1881, https://github.com/SeaQL/sea-orm/pull/2000\n\n### Enhancements\n\n* Cast enums in `is_in` and `is_not_in` https://github.com/SeaQL/sea-orm/pull/2002\n\n### Upgrades\n\n* Updated `sea-query` to `0.30.5` https://github.com/SeaQL/sea-query/releases/tag/0.30.5\n\n## 0.12.9 - 2023-12-08\n\n### Enhancements\n\n* Add source annotations to errors https://github.com/SeaQL/sea-orm/pull/1999\n\n### Upgrades\n\n* Updated `sea-query` to `0.30.4` https://github.com/SeaQL/sea-query/releases/tag/0.30.4\n\n## 0.12.8 - 2023-12-04\n\n### Enhancements\n\n* Implement `StatementBuilder` for `sea_query::WithQuery` https://github.com/SeaQL/sea-orm/issues/1960\n\n### Upgrades\n\n* Upgrade `axum` example to `0.7` https://github.com/SeaQL/sea-orm/pull/1984\n\n## 0.12.7 - 2023-11-22\n\n### Enhancements\n\n* Added method `expr_as_` that accepts `self` https://github.com/SeaQL/sea-orm/pull/1979\n\n### Upgrades\n\n* Updated `sea-query` to `0.30.3` https://github.com/SeaQL/sea-query/releases/tag/0.30.3\n\n## 0.12.6 - 2023-11-13\n\n### New Features\n\n* Added `#[sea_orm(skip)]` for `FromQueryResult` derive macro https://github.com/SeaQL/sea-orm/pull/1954\n\n## 0.12.5 - 2023-11-12\n\n### Bug Fixes\n\n* [sea-orm-cli] Fix duplicated active enum use statements on generated entities https://github.com/SeaQL/sea-orm/pull/1953\n* [sea-orm-cli] Added `--enum-extra-derives` https://github.com/SeaQL/sea-orm/pull/1934\n* [sea-orm-cli] Added `--enum-extra-attributes` https://github.com/SeaQL/sea-orm/pull/1952\n\n## 0.12.4 - 2023-10-19\n\n### New Features\n\n* Add support for root JSON arrays https://github.com/SeaQL/sea-orm/pull/1898\n    Now the following works (requires the `json-array` / `postgres-array` feature)!\n```rust\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = \"json_struct_vec\")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    #[sea_orm(column_type = \"Json\")]\n    pub struct_vec: Vec<JsonColumn>,\n}\n\n#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, FromJsonQueryResult)]\npub struct JsonColumn {\n    pub value: String,\n}\n```\n\n### Enhancements\n\n* Loader: use `ValueTuple` as hash key https://github.com/SeaQL/sea-orm/pull/1868\n\n### Upgrades\n\n* Updated `sea-query` to `0.30.2` https://github.com/SeaQL/sea-query/releases/tag/0.30.2\n\n## 0.12.3 - 2023-09-22\n\n### New Features\n\n* [sea-orm-migration] Check if an index exists https://github.com/SeaQL/sea-orm/pull/1828\n* Added `cursor_by` to `SelectTwo` https://github.com/SeaQL/sea-orm/pull/1826\n\n### Enhancements\n\n* [sea-orm-cli] Support generation of related entity with composite foreign key https://github.com/SeaQL/sea-orm/pull/1693\n\n### Bug Fixes\n\n* [sea-orm-macro] Fixed `DeriveValueType` by qualifying `QueryResult` https://github.com/SeaQL/sea-orm/pull/1855\n* Fixed `Loader` panic on empty inputs\n\n### Upgrades\n\n* Upgraded `salvo` to `0.50`\n* Upgraded `chrono` to `0.4.30` https://github.com/SeaQL/sea-orm/pull/1858\n* Updated `sea-query` to `0.30.1`\n* Updated `sea-schema` to `0.14.1`\n\n### House keeping\n\n* Added test cases for `find_xxx_related/linked` https://github.com/SeaQL/sea-orm/pull/1811\n\n## 0.12.2 - 2023-08-04\n\n### Enhancements\n\n* Added support for Postgres arrays in `FromQueryResult` impl of `JsonValue` https://github.com/SeaQL/sea-orm/pull/1598\n\n### Bug fixes\n\n* Fixed `find_with_related` consolidation logic https://github.com/SeaQL/sea-orm/issues/1800\n\n## 0.12.1 - 2023-07-27\n\n+ `0.12.0-rc.1`: Yanked    \n+ `0.12.0-rc.2`: 2023-05-19\n+ `0.12.0-rc.3`: 2023-06-22\n+ `0.12.0-rc.4`: 2023-07-08\n+ `0.12.0-rc.5`: 2023-07-22\n\n### New Features\n\n* Added `MigratorTrait::migration_table_name()` method to configure the name of migration table https://github.com/SeaQL/sea-orm/pull/1511\n```rust\n#[async_trait::async_trait]\nimpl MigratorTrait for Migrator {\n    // Override the name of migration table\n    fn migration_table_name() -> sea_orm::DynIden {\n        Alias::new(\"override_migration_table_name\").into_iden()\n    }\n    ...\n}\n```\n* Added option to construct chained AND / OR join on condition https://github.com/SeaQL/sea-orm/pull/1433\n```rust\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = \"cake\")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub name: String,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    // By default, it's\n    // `JOIN `fruit` ON `cake`.`id` = `fruit`.`cake_id` AND `fruit`.`name` LIKE '%tropical%'`\n    #[sea_orm(\n        has_many = \"super::fruit::Entity\",\n        on_condition = r#\"super::fruit::Column::Name.like(\"%tropical%\")\"#\n    )]\n    TropicalFruit,\n    // Or specify `condition_type = \"any\"` to override it,\n    // `JOIN `fruit` ON `cake`.`id` = `fruit`.`cake_id` OR `fruit`.`name` LIKE '%tropical%'`\n    #[sea_orm(\n        has_many = \"super::fruit::Entity\",\n        on_condition = r#\"super::fruit::Column::Name.like(\"%tropical%\")\"#\n        condition_type = \"any\",\n    )]\n    OrTropicalFruit,\n}\n```\n* Supports entity with composite primary key of arity 12 https://github.com/SeaQL/sea-orm/pull/1508\n    * `Identity` supports tuple of `DynIden` with arity up to 12\n```rust\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = \"primary_key_of_12\")]\npub struct Model {\n    #[sea_orm(primary_key, auto_increment = false)]\n    pub id_1: String,\n    ...\n    #[sea_orm(primary_key, auto_increment = false)]\n    pub id_12: bool,\n}\n```\n* Added macro `DerivePartialModel` https://github.com/SeaQL/sea-orm/pull/1597\n```rust\n#[derive(DerivePartialModel, FromQueryResult)]\n#[sea_orm(entity = \"Cake\")]\nstruct PartialCake {\n    name: String,\n    #[sea_orm(\n        from_expr = r#\"SimpleExpr::FunctionCall(Func::upper(Expr::col((Cake, cake::Column::Name))))\"#\n    )]\n    name_upper: String,\n}\n\nassert_eq!(\n    cake::Entity::find()\n        .into_partial_model::<PartialCake>()\n        .into_statement(DbBackend::Sqlite)\n        .to_string(),\n    r#\"SELECT \"cake\".\"name\", UPPER(\"cake\".\"name\") AS \"name_upper\" FROM \"cake\"\"#\n);\n```\n* Added `DbErr::sql_err()` method to convert error into common database errors `SqlErr`, such as unique constraint or foreign key violation errors. https://github.com/SeaQL/sea-orm/pull/1707\n```rust\nassert!(matches!(\n    cake.into_active_model().insert(db).await\n        .expect_err(\"Insert a row with duplicated primary key\")\n        .sql_err(),\n    Some(SqlErr::UniqueConstraintViolation(_))\n));\n\nassert!(matches!(\n    fk_cake.insert(db).await\n        .expect_err(\"Insert a row with invalid foreign key\")\n        .sql_err(),\n    Some(SqlErr::ForeignKeyConstraintViolation(_))\n));\n```\n* Added `Select::find_with_linked`, similar to `find_with_related`: https://github.com/SeaQL/sea-orm/pull/1728, https://github.com/SeaQL/sea-orm/pull/1743\n```rust\nfn find_with_related<R>(self, r: R) -> SelectTwoMany<E, R>\n    where R: EntityTrait, E: Related<R>;\nfn find_with_linked<L, T>(self, l: L) -> SelectTwoMany<E, T>\n    where L: Linked<FromEntity = E, ToEntity = T>, T: EntityTrait;\n\n// boths yields `Vec<(E::Model, Vec<F::Model>)>`\n```\n* Added `DeriveValueType` derive macro for custom wrapper types, implementations of the required traits will be provided, you can customize the `column_type` and `array_type` if needed https://github.com/SeaQL/sea-orm/pull/1720\n```rust\n#[derive(DeriveValueType)]\n#[sea_orm(array_type = \"Int\")]\npub struct Integer(i32);\n\n#[derive(DeriveValueType)]\n#[sea_orm(column_type = \"Boolean\", array_type = \"Bool\")]\npub struct Boolbean(pub String);\n\n#[derive(DeriveValueType)]\npub struct StringVec(pub Vec<String>);\n```\n* Added `DeriveDisplay` derive macro to implements `std::fmt::Display` for enum https://github.com/SeaQL/sea-orm/pull/1726\n```rust\n#[derive(DeriveDisplay)]\nenum DisplayTea {\n    EverydayTea,\n    #[sea_orm(display_value = \"Breakfast Tea\")]\n    BreakfastTea,\n}\nassert_eq!(format!(\"{}\", DisplayTea::EverydayTea), \"EverydayTea\");\nassert_eq!(format!(\"{}\", DisplayTea::BreakfastTea), \"Breakfast Tea\");\n```\n* Added `UpdateMany::exec_with_returning()` https://github.com/SeaQL/sea-orm/pull/1677\n```rust\nlet models: Vec<Model> = Entity::update_many()\n    .col_expr(Column::Values, Expr::expr(..))\n    .exec_with_returning(db)\n    .await?;\n```\n* Supporting `default_expr` in `DeriveEntityModel` https://github.com/SeaQL/sea-orm/pull/1474\n```rust\n#[derive(DeriveEntityModel)]\n#[sea_orm(table_name = \"hello\")]\npub struct Model {\n    #[sea_orm(default_expr = \"Expr::current_timestamp()\")]\n    pub timestamp: DateTimeUtc,\n}\n\nassert_eq!(\n    Column::Timestamp.def(),\n    ColumnType::TimestampWithTimeZone.def()\n        .default(Expr::current_timestamp())\n);\n```\n* Introduced new `ConnAcquireErr` https://github.com/SeaQL/sea-orm/pull/1737\n```rust\nenum DbErr {\n    ConnectionAcquire(ConnAcquireErr),\n    ..\n}\n\nenum ConnAcquireErr {\n    Timeout,\n    ConnectionClosed,\n}\n```\n\n#### Seaography\n\nAdded Seaography integration https://github.com/SeaQL/sea-orm/pull/1599\n\n* Added `DeriveEntityRelated` macro which will implement `seaography::RelationBuilder` for `RelatedEntity` enumeration when the `seaography` feature is enabled\n* Added generation of `seaography` related information to `sea-orm-codegen`.\n\n    The `RelatedEntity` enum is added in entities files by `sea-orm-cli` when flag `seaography` is set:\n```rust\n/// SeaORM Entity\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]\npub enum RelatedEntity {\n    #[sea_orm(entity = \"super::bakery::Entity\")]\n    Bakery,\n    #[sea_orm(entity = \"super::cake_baker::Entity\")]\n    CakeBaker,\n    #[sea_orm(entity = \"super::cake::Entity\")]\n    Cake,\n}\n```\n* Added [`seaography_example`](https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example)\n\n### Enhancements\n\n* Supports for partial select of `Option<T>` model field. A `None` value will be filled when the select result does not contain the `Option<T>` field without throwing an error. https://github.com/SeaQL/sea-orm/pull/1513\n* [sea-orm-cli] the `migrate init` command will create a `.gitignore` file when the migration folder reside in a Git repository https://github.com/SeaQL/sea-orm/pull/1334\n* [sea-orm-cli] Added support for generating migration of space separated name, for example executing `sea-orm-cli migrate generate \"create accounts table\"` command will create `m20230503_000000_create_accounts_table.rs` for you https://github.com/SeaQL/sea-orm/pull/1570\n* Added `Migration::name()` and `Migration::status()` getters for the name and status of `sea_orm_migration::Migration` https://github.com/SeaQL/sea-orm/pull/1519\n```rust\nlet migrations = Migrator::get_pending_migrations(db).await?;\nassert_eq!(migrations.len(), 5);\n\nlet migration = migrations.get(0).unwrap();\nassert_eq!(migration.name(), \"m20220118_000002_create_fruit_table\");\nassert_eq!(migration.status(), MigrationStatus::Pending);\n```\n* The `postgres-array` feature will be enabled when `sqlx-postgres` backend is selected https://github.com/SeaQL/sea-orm/pull/1565\n* Replace `String` parameters in API with `Into<String>` https://github.com/SeaQL/sea-orm/pull/1439\n    * Implements `IntoMockRow` for any `BTreeMap` that is indexed by string `impl IntoMockRow for BTreeMap<T, Value> where T: Into<String>`\n    * Converts any string value into `ConnectOptions` - `impl From<T> for ConnectOptions where T: Into<String>`\n    * Changed the parameter of method `ConnectOptions::new(T) where T: Into<String>` to takes any string SQL\n    * Changed the parameter of method `Statement::from_string(DbBackend, T) where T: Into<String>` to takes any string SQL\n    * Changed the parameter of method `Statement::from_sql_and_values(DbBackend, T, I) where I: IntoIterator<Item = Value>, T: Into<String>` to takes any string SQL\n    * Changed the parameter of method `Transaction::from_sql_and_values(DbBackend, T, I) where I: IntoIterator<Item = Value>, T: Into<String>` to takes any string SQL\n    * Changed the parameter of method `ConnectOptions::set_schema_search_path(T) where T: Into<String>` to takes any string\n    * Changed the parameter of method `ColumnTrait::like()`, `ColumnTrait::not_like()`, `ColumnTrait::starts_with()`, `ColumnTrait::ends_with()` and `ColumnTrait::contains()` to takes any string\n* Added `sea_query::{DynIden, RcOrArc, SeaRc}` to entity prelude https://github.com/SeaQL/sea-orm/pull/1661\n* Added `expr`, `exprs` and `expr_as` methods to `QuerySelect` trait https://github.com/SeaQL/sea-orm/pull/1702\n* Added `DatabaseConnection::ping` https://github.com/SeaQL/sea-orm/pull/1627\n```rust\n|db: DatabaseConnection| {\n    assert!(db.ping().await.is_ok());\n    db.clone().close().await;\n    assert!(matches!(db.ping().await, Err(DbErr::ConnectionAcquire)));\n}\n```\n* Added `TryInsert` that does not panic on empty inserts https://github.com/SeaQL/sea-orm/pull/1708\n```rust\n// now, you can do:\nlet res = Bakery::insert_many(std::iter::empty())\n    .on_empty_do_nothing()\n    .exec(db)\n    .await;\n\nassert!(matches!(res, Ok(TryInsertResult::Empty)));\n```\n* Insert on conflict do nothing to return Ok https://github.com/SeaQL/sea-orm/pull/1712\n```rust\nlet on = OnConflict::column(Column::Id).do_nothing().to_owned();\n\n// Existing behaviour\nlet res = Entity::insert_many([..]).on_conflict(on).exec(db).await;\nassert!(matches!(res, Err(DbErr::RecordNotInserted)));\n\n// New API; now you can:\nlet res =\nEntity::insert_many([..]).on_conflict(on).do_nothing().exec(db).await;\nassert!(matches!(res, Ok(TryInsertResult::Conflicted)));\n```\n\n### Bug Fixes\n\n* Fixed `DeriveActiveEnum` throwing errors because `string_value` consists non-UAX#31 compliant characters https://github.com/SeaQL/sea-orm/pull/1374\n```rust\n#[derive(EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = \"String\", db_type = \"String(None)\")]\npub enum StringValue {\n    #[sea_orm(string_value = \"\")]\n    Member1,\n    #[sea_orm(string_value = \"$$\")]\n    Member2,\n}\n// will now produce the following enum:\npub enum StringValueVariant {\n    __Empty,\n    _0x240x24,\n}\n```\n* [sea-orm-cli] Fix Postgres enum arrays https://github.com/SeaQL/sea-orm/pull/1678\n* [sea-orm-cli] The implementation of `Related<R>` with `via` and `to` methods will not be generated if there exists multiple paths via an intermediate table https://github.com/SeaQL/sea-orm/pull/1435\n* [sea-orm-cli] fixed entity generation includes partitioned tables https://github.com/SeaQL/sea-orm/issues/1582, https://github.com/SeaQL/sea-schema/pull/105\n* Fixed `ActiveEnum::db_type()` return type does not implement `ColumnTypeTrait` https://github.com/SeaQL/sea-orm/pull/1576\n* Resolved `insert_many` failing if the models iterator is empty https://github.com/SeaQL/sea-orm/issues/873\n\n### Breaking changes\n\n* Supports for partial select of `Option<T>` model field. A `None` value will be filled when the select result does not contain the `Option<T>` field instead of throwing an error. https://github.com/SeaQL/sea-orm/pull/1513\n* Replaced `sea-strum` dependency with upstream `strum` in `sea-orm` https://github.com/SeaQL/sea-orm/pull/1535\n    * Added `derive` and `strum` features to `sea-orm-macros`\n    * The derive macro `EnumIter` is now shipped by `sea-orm-macros`\n* Added a new variant `Many` to `Identity` https://github.com/SeaQL/sea-orm/pull/1508\n* Enabled `hashable-value` feature in SeaQuery, thus `Value::Float(NaN) == Value::Float(NaN)` would be true https://github.com/SeaQL/sea-orm/pull/1728, https://github.com/SeaQL/sea-orm/pull/1743\n* The `DeriveActiveEnum` derive macro no longer implement `std::fmt::Display`. You can use the new `DeriveDisplay` macro https://github.com/SeaQL/sea-orm/pull/1726\n* `sea-query/derive` is no longer enabled by `sea-orm`, as such, `Iden` no longer works as a derive macro (it's still a trait). Instead, we are shipping a new macro `DeriveIden` https://github.com/SeaQL/sea-orm/pull/1740 https://github.com/SeaQL/sea-orm/pull/1755\n```rust\n// then:\n\n#[derive(Iden)]\n#[iden = \"category\"]\npub struct CategoryEnum;\n\n#[derive(Iden)]\npub enum Tea {\n    Table,\n    #[iden = \"EverydayTea\"]\n    EverydayTea,\n}\n\n// now:\n\n#[derive(DeriveIden)]\n#[sea_orm(iden = \"category\")]\npub struct CategoryEnum;\n\n#[derive(DeriveIden)]\npub enum Tea {\n    Table,\n    #[sea_orm(iden = \"EverydayTea\")]\n    EverydayTea,\n}\n```\n* Definition of `DbErr::ConnectionAcquire` changed to `ConnectionAcquire(ConnAcquireErr)` https://github.com/SeaQL/sea-orm/pull/1737\n* `FromJsonQueryResult` removed from entity prelude\n\n### Upgrades\n\n* Upgraded `sqlx` to `0.7` https://github.com/SeaQL/sea-orm/pull/1742\n* Upgraded `sea-query` to `0.30` https://github.com/SeaQL/sea-orm/pull/1742\n* Upgraded `sea-schema` to `0.14` https://github.com/SeaQL/sea-orm/pull/1742\n* Upgraded `syn` to `2` https://github.com/SeaQL/sea-orm/pull/1713\n* Upgraded `heck` to `0.4` https://github.com/SeaQL/sea-orm/pull/1520, https://github.com/SeaQL/sea-orm/pull/1544\n* Upgraded `strum` to `0.25` https://github.com/SeaQL/sea-orm/pull/1752\n* Upgraded `clap` to `4.3` https://github.com/SeaQL/sea-orm/pull/1468\n* Upgraded `ouroboros` to `0.17` https://github.com/SeaQL/sea-orm/pull/1724\n\n### House keeping\n\n* Replaced `bae` with `sea-bae` https://github.com/SeaQL/sea-orm/pull/1739\n\n**Full Changelog**: https://github.com/SeaQL/sea-orm/compare/0.11.1...0.12.1\n\n## 0.11.3 - 2023-04-24\n\n### Enhancements\n\n* Re-export `sea_orm::ConnectionTrait` in `sea_orm_migration::prelude` https://github.com/SeaQL/sea-orm/pull/1577\n* Support generic structs in `FromQueryResult` derive macro https://github.com/SeaQL/sea-orm/pull/1464, https://github.com/SeaQL/sea-orm/pull/1603\n```rust\n#[derive(FromQueryResult)]\nstruct GenericTest<T: TryGetable> {\n    foo: i32,\n    bar: T,\n}\n```\n```rust\ntrait MyTrait {\n    type Item: TryGetable;\n}\n\n#[derive(FromQueryResult)]\nstruct TraitAssociateTypeTest<T>\nwhere\n    T: MyTrait,\n{\n    foo: T::Item,\n}\n```\n\n### Bug Fixes\n\n* Fixed https://github.com/SeaQL/sea-orm/issues/1608 by pinning the version of `tracing-subscriber` dependency to 0.3.17 https://github.com/SeaQL/sea-orm/pull/1609\n\n## 0.11.2 - 2023-03-25\n\n### Enhancements\n\n* Enable required `syn` features https://github.com/SeaQL/sea-orm/pull/1556\n* Re-export `sea_query::BlobSize` in `sea_orm::entity::prelude` https://github.com/SeaQL/sea-orm/pull/1548\n\n## 0.11.1 - 2023-03-10\n\n### Bug Fixes\n\n* Fixes `DeriveActiveEnum` (by qualifying `ColumnTypeTrait::def`) https://github.com/SeaQL/sea-orm/issues/1478\n* The CLI command `sea-orm-cli generate entity -u '<DB-URL>'` will now generate the following code for each `Binary` or `VarBinary` columns in compact format https://github.com/SeaQL/sea-orm/pull/1529\n```rust\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]\n#[sea_orm(table_name = \"binary\")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    #[sea_orm(column_type = \"Binary(BlobSize::Blob(None))\")]\n    pub binary: Vec<u8>,\n    #[sea_orm(column_type = \"Binary(BlobSize::Blob(Some(10)))\")]\n    pub binary_10: Vec<u8>,\n    #[sea_orm(column_type = \"Binary(BlobSize::Tiny)\")]\n    pub binary_tiny: Vec<u8>,\n    #[sea_orm(column_type = \"Binary(BlobSize::Medium)\")]\n    pub binary_medium: Vec<u8>,\n    #[sea_orm(column_type = \"Binary(BlobSize::Long)\")]\n    pub binary_long: Vec<u8>,\n    #[sea_orm(column_type = \"VarBinary(10)\")]\n    pub var_binary: Vec<u8>,\n}\n```\n* The CLI command `sea-orm-cli generate entity -u '<DB-URL>' --expanded-format` will now generate the following code for each `Binary` or `VarBinary` columns in expanded format https://github.com/SeaQL/sea-orm/pull/1529\n```rust\nimpl ColumnTrait for Column {\n    type EntityName = Entity;\n    fn def(&self) -> ColumnDef {\n        match self {\n            Self::Id => ColumnType::Integer.def(),\n            Self::Binary => ColumnType::Binary(sea_orm::sea_query::BlobSize::Blob(None)).def(),\n            Self::Binary10 => {\n                ColumnType::Binary(sea_orm::sea_query::BlobSize::Blob(Some(10u32))).def()\n            }\n            Self::BinaryTiny => ColumnType::Binary(sea_orm::sea_query::BlobSize::Tiny).def(),\n            Self::BinaryMedium => ColumnType::Binary(sea_orm::sea_query::BlobSize::Medium).def(),\n            Self::BinaryLong => ColumnType::Binary(sea_orm::sea_query::BlobSize::Long).def(),\n            Self::VarBinary => ColumnType::VarBinary(10u32).def(),\n        }\n    }\n}\n```\n* Fix missing documentation on type generated by derive macros https://github.com/SeaQL/sea-orm/pull/1522, https://github.com/SeaQL/sea-orm/pull/1531\n\n## 0.11.0 - 2023-02-07\n\n+ 2023-02-02: `0.11.0-rc.1`\n+ 2023-02-04: `0.11.0-rc.2`\n\n### New Features\n\n#### SeaORM Core\n\n* Simple data loader https://github.com/SeaQL/sea-orm/pull/1238, https://github.com/SeaQL/sea-orm/pull/1443\n* Transactions Isolation level and Access mode https://github.com/SeaQL/sea-orm/pull/1230\n* Support various UUID formats that are available in `uuid::fmt` module https://github.com/SeaQL/sea-orm/pull/1325\n* Support Vector of enum for Postgres https://github.com/SeaQL/sea-orm/pull/1210\n* Support `ActiveEnum` field as primary key https://github.com/SeaQL/sea-orm/pull/1414\n* Casting columns as a different data type on select, insert and update https://github.com/SeaQL/sea-orm/pull/1304\n* Methods of `ActiveModelBehavior` receive db connection as a parameter https://github.com/SeaQL/sea-orm/pull/1145, https://github.com/SeaQL/sea-orm/pull/1328\n* Added `execute_unprepared` method to `DatabaseConnection` and `DatabaseTransaction` https://github.com/SeaQL/sea-orm/pull/1327\n* Added `Select::into_tuple` to select rows as tuples (instead of defining a custom Model) https://github.com/SeaQL/sea-orm/pull/1311\n\n#### SeaORM CLI\n\n* Generate `#[serde(skip_deserializing)]` for primary key columns https://github.com/SeaQL/sea-orm/pull/846, https://github.com/SeaQL/sea-orm/pull/1186, https://github.com/SeaQL/sea-orm/pull/1318\n* Generate `#[serde(skip)]` for hidden columns https://github.com/SeaQL/sea-orm/pull/1171, https://github.com/SeaQL/sea-orm/pull/1320\n* Generate entity with extra derives and attributes for model struct https://github.com/SeaQL/sea-orm/pull/1124, https://github.com/SeaQL/sea-orm/pull/1321\n\n#### SeaORM Migration\n\n* Migrations are now performed inside a transaction for Postgres https://github.com/SeaQL/sea-orm/pull/1379\n\n### Enhancements\n\n* Refactor schema module to expose functions for database alteration https://github.com/SeaQL/sea-orm/pull/1256\n* Generate compact entity with `#[sea_orm(column_type = \"JsonBinary\")]` macro attribute https://github.com/SeaQL/sea-orm/pull/1346\n* `MockDatabase::append_exec_results()`, `MockDatabase::append_query_results()`, `MockDatabase::append_exec_errors()` and `MockDatabase::append_query_errors()` take any types implemented `IntoIterator` trait https://github.com/SeaQL/sea-orm/pull/1367\n* `find_by_id` and `delete_by_id` take any `Into` primary key value https://github.com/SeaQL/sea-orm/pull/1362\n* `QuerySelect::offset` and `QuerySelect::limit` takes in `Into<Option<u64>>` where `None` would reset them https://github.com/SeaQL/sea-orm/pull/1410\n* Added `DatabaseConnection::close` https://github.com/SeaQL/sea-orm/pull/1236\n* Added `is_null` getter for `ColumnDef` https://github.com/SeaQL/sea-orm/pull/1381\n* Added `ActiveValue::reset` to convert `Unchanged` into `Set` https://github.com/SeaQL/sea-orm/pull/1177\n* Added `QueryTrait::apply_if` to optionally apply a filter https://github.com/SeaQL/sea-orm/pull/1415\n* Added the `sea-orm-internal` feature flag to expose some SQLx types\n    * Added `DatabaseConnection::get_*_connection_pool()` for accessing the inner SQLx connection pool https://github.com/SeaQL/sea-orm/pull/1297\n    * Re-exporting SQLx errors https://github.com/SeaQL/sea-orm/pull/1434\n\n### Upgrades\n\n* Upgrade `axum` to `0.6.1` https://github.com/SeaQL/sea-orm/pull/1285\n* Upgrade `sea-query` to `0.28` https://github.com/SeaQL/sea-orm/pull/1366\n* Upgrade `sea-query-binder` to `0.3` https://github.com/SeaQL/sea-orm/pull/1366\n* Upgrade `sea-schema` to `0.11` https://github.com/SeaQL/sea-orm/pull/1366\n\n### House Keeping\n\n* Fixed all clippy warnings as of `1.67.0` https://github.com/SeaQL/sea-orm/pull/1426\n* Removed dependency where not needed https://github.com/SeaQL/sea-orm/pull/1213\n* Disabled default features and enabled only the needed ones https://github.com/SeaQL/sea-orm/pull/1300\n* Cleanup panic and unwrap https://github.com/SeaQL/sea-orm/pull/1231\n* Cleanup the use of `vec!` macro https://github.com/SeaQL/sea-orm/pull/1367\n\n### Bug Fixes\n\n* [sea-orm-cli] Propagate error on the spawned child processes https://github.com/SeaQL/sea-orm/pull/1402\n    * Fixes sea-orm-cli errors exit with error code 0 https://github.com/SeaQL/sea-orm/issues/1342\n* Fixes `DeriveColumn` (by qualifying `IdenStatic::as_str`) https://github.com/SeaQL/sea-orm/pull/1280\n* Prevent returning connections to pool with a positive transaction depth https://github.com/SeaQL/sea-orm/pull/1283\n* Postgres insert many will throw `RecordNotInserted` error if non of them are being inserted https://github.com/SeaQL/sea-orm/pull/1021\n    * Fixes inserting active models by `insert_many` with `on_conflict` and `do_nothing` panics if no rows are inserted on Postgres https://github.com/SeaQL/sea-orm/issues/899\n* Don't call `last_insert_id` if not needed https://github.com/SeaQL/sea-orm/pull/1403\n    * Fixes hitting 'negative last_insert_rowid' panic with Sqlite https://github.com/SeaQL/sea-orm/issues/1357\n* Noop when update without providing any values https://github.com/SeaQL/sea-orm/pull/1384\n    * Fixes Syntax Error when saving active model that sets nothing https://github.com/SeaQL/sea-orm/pull/1376\n\n### Breaking Changes\n\n* [sea-orm-cli] Enable --universal-time by default https://github.com/SeaQL/sea-orm/pull/1420\n* Added `RecordNotInserted` and `RecordNotUpdated` to `DbErr`\n* Added `ConnectionTrait::execute_unprepared` method https://github.com/SeaQL/sea-orm/pull/1327\n* As part of https://github.com/SeaQL/sea-orm/pull/1311, the required method of `TryGetable` changed:\n```rust\n// then\nfn try_get(res: &QueryResult, pre: &str, col: &str) -> Result<Self, TryGetError>;\n// now; ColIdx can be `&str` or `usize`\nfn try_get_by<I: ColIdx>(res: &QueryResult, index: I) -> Result<Self, TryGetError>;\n```\nSo if you implemented it yourself:\n```patch\nimpl TryGetable for XXX {\n-   fn try_get(res: &QueryResult, pre: &str, col: &str) -> Result<Self, TryGetError> {\n+   fn try_get_by<I: sea_orm::ColIdx>(res: &QueryResult, idx: I) -> Result<Self, TryGetError> {\n-       let value: YYY = res.try_get(pre, col).map_err(TryGetError::DbErr)?;\n+       let value: YYY = res.try_get_by(idx).map_err(TryGetError::DbErr)?;\n        ..\n    }\n}\n```\n* The `ActiveModelBehavior` trait becomes async trait https://github.com/SeaQL/sea-orm/pull/1328.\nIf you overridden the default `ActiveModelBehavior` implementation:\n```rust\n#[async_trait::async_trait]\nimpl ActiveModelBehavior for ActiveModel {\n    async fn before_save<C>(self, db: &C, insert: bool) -> Result<Self, DbErr>\n    where\n        C: ConnectionTrait,\n    {\n        // ...\n    }\n\n    // ...\n}\n```\n* `DbErr::RecordNotFound(\"None of the database rows are affected\")` is moved to a dedicated error variant `DbErr::RecordNotUpdated` https://github.com/SeaQL/sea-orm/pull/1425\n```rust\nlet res = Update::one(cake::ActiveModel {\n        name: Set(\"Cheese Cake\".to_owned()),\n        ..model.into_active_model()\n    })\n    .exec(&db)\n    .await;\n\n// then\nassert_eq!(\n    res,\n    Err(DbErr::RecordNotFound(\n        \"None of the database rows are affected\".to_owned()\n    ))\n);\n\n// now\nassert_eq!(res, Err(DbErr::RecordNotUpdated));\n```\n* `sea_orm::ColumnType` was replaced by `sea_query::ColumnType` https://github.com/SeaQL/sea-orm/pull/1395\n    * Method `ColumnType::def` was moved to `ColumnTypeTrait`\n    * `ColumnType::Binary` becomes a tuple variant which takes in additional option `sea_query::BlobSize`\n    * `ColumnType::Custom` takes a `sea_query::DynIden` instead of `String` and thus a new method `custom` is added (note the lowercase)\n```diff\n// Compact Entity\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = \"fruit\")]\npub struct Model {\n-   #[sea_orm(column_type = r#\"Custom(\"citext\".to_owned())\"#)]\n+   #[sea_orm(column_type = r#\"custom(\"citext\")\"#)]\n    pub column: String,\n}\n```\n```diff\n// Expanded Entity\nimpl ColumnTrait for Column {\n    type EntityName = Entity;\n\n    fn def(&self) -> ColumnDef {\n        match self {\n-           Self::Column => ColumnType::Custom(\"citext\".to_owned()).def(),\n+           Self::Column => ColumnType::custom(\"citext\").def(),\n        }\n    }\n}\n```\n\n### Miscellaneous\n\n* Fixed a small typo https://github.com/SeaQL/sea-orm/pull/1391\n* `axum` example should use tokio runtime https://github.com/SeaQL/sea-orm/pull/1428\n\n**Full Changelog**: https://github.com/SeaQL/sea-orm/compare/0.10.0...0.11.0\n\n## 0.10.7 - 2023-01-19\n\n### Bug Fixes\n\n* Inserting active models by `insert_many` with `on_conflict` and `do_nothing` panics if no rows are inserted on Postgres https://github.com/SeaQL/sea-orm/issues/899\n* Hitting 'negative last_insert_rowid' panic with Sqlite https://github.com/SeaQL/sea-orm/issues/1357\n\n## 0.10.6 - 2022-12-23\n\n### Enhancements\n\n* Cast enum values when constructing update many query https://github.com/SeaQL/sea-orm/pull/1178\n\n### Bug Fixes\n\n* Fixes `DeriveColumn` (by qualifying `IdenStatic::as_str`) https://github.com/SeaQL/sea-orm/pull/1280\n* Prevent returning connections to pool with a positive transaction depth https://github.com/SeaQL/sea-orm/pull/1283\n* [sea-orm-codegen] Skip implementing Related if the same related entity is being referenced by a conjunct relation https://github.com/SeaQL/sea-orm/pull/1298\n* [sea-orm-cli] CLI depends on codegen of the same version https://github.com/SeaQL/sea-orm/pull/1299/\n\n## 0.10.5 - 2022-12-02\n\n### New Features\n\n* Add `QuerySelect::columns` method - select multiple columns https://github.com/SeaQL/sea-orm/pull/1264\n* Transactions Isolation level and Access mode https://github.com/SeaQL/sea-orm/pull/1230\n\n### Bug Fixes\n\n* `DeriveEntityModel` derive macro: when parsing field type, always treat field with `Option<T>` as nullable column https://github.com/SeaQL/sea-orm/pull/1257\n\n### Enhancements\n\n* [sea-orm-cli] Generate `Related` implementation for many-to-many relation with extra columns https://github.com/SeaQL/sea-orm/pull/1260\n* Optimize the default implementation of `TryGetableFromJson::try_get_from_json()` - deserializing into `Self` directly without the need of a intermediate `serde_json::Value` https://github.com/SeaQL/sea-orm/pull/1249\n\n## 0.10.4 - 2022-11-24\n\n### Bug Fixes\n\n* Fix DeriveActiveEnum expand enum variant starts with number https://github.com/SeaQL/sea-orm/pull/1219\n* [sea-orm-cli] Generate entity file for specified tables only https://github.com/SeaQL/sea-orm/pull/1245\n* Support appending `DbErr` to `MockDatabase` https://github.com/SeaQL/sea-orm/pull/1241\n\n### Enhancements\n\n* Filter rows with `IS IN` enum values expression https://github.com/SeaQL/sea-orm/pull/1183\n* [sea-orm-cli] Generate entity with relation variant order by name of reference table https://github.com/SeaQL/sea-orm/pull/1229\n\n## 0.10.3 - 2022-11-14\n\n### Bug Fixes\n\n* [sea-orm-cli] Set search path when initializing Postgres connection for CLI generate entity https://github.com/SeaQL/sea-orm/pull/1212\n* [sea-orm-cli] Generate `_` prefix to enum variant starts with number https://github.com/SeaQL/sea-orm/pull/1211\n* Fix composite key cursor pagination https://github.com/SeaQL/sea-orm/pull/1216\n    + The logic for single-column primary key was correct, but for composite keys the logic was incorrect\n\n### Enhancements\n\n* Added `Insert::exec_without_returning` https://github.com/SeaQL/sea-orm/pull/1208\n\n### House Keeping\n\n* Remove dependency when not needed https://github.com/SeaQL/sea-orm/pull/1207\n\n## 0.10.2 - 2022-11-06\n\n### Enhancements\n\n* [sea-orm-rocket] added `sqlx_logging` to `Config` https://github.com/SeaQL/sea-orm/pull/1192\n* Collecting metrics for `query_one/all` https://github.com/SeaQL/sea-orm/pull/1165\n* Use GAT to elide `StreamTrait` lifetime https://github.com/SeaQL/sea-orm/pull/1161\n\n### Bug Fixes\n\n* corrected the error name `UpdateGetPrimaryKey` https://github.com/SeaQL/sea-orm/pull/1180\n\n### Upgrades\n\n* Update MSRV to 1.65\n\n## 0.10.1 - 2022-10-27\n\n### Enhancements\n\n* [sea-orm-cli] Escape module name defined with Rust keywords https://github.com/SeaQL/sea-orm/pull/1052\n* [sea-orm-cli] Check to make sure migration name doesn't contain hyphen `-` in it https://github.com/SeaQL/sea-orm/pull/879, https://github.com/SeaQL/sea-orm/pull/1155\n* Support `time` crate for SQLite https://github.com/SeaQL/sea-orm/pull/995\n\n### Bug Fixes\n\n* [sea-orm-cli] Generate `Related` for m-to-n relation https://github.com/SeaQL/sea-orm/pull/1075\n* [sea-orm-cli] Generate model entity with Postgres Enum field https://github.com/SeaQL/sea-orm/pull/1153\n* [sea-orm-cli] Migrate up command apply all pending migrations https://github.com/SeaQL/sea-orm/pull/1010\n* [sea-orm-cli] Conflicting short flag `-u` when executing `migrate generate` command https://github.com/SeaQL/sea-orm/pull/1157\n* Prefix the usage of types with `sea_orm::` inside `DeriveActiveEnum` derive macros https://github.com/SeaQL/sea-orm/pull/1146, https://github.com/SeaQL/sea-orm/pull/1154\n* [sea-orm-cli] Generate model with `Vec<f32>` or `Vec<f64>` should not derive `Eq` on the model struct https://github.com/SeaQL/sea-orm/pull/1158\n\n### House Keeping\n\n* [sea-orm-cli] [sea-orm-migration] Add `cli` feature to optionally include dependencies that are required by the CLI https://github.com/SeaQL/sea-orm/pull/978\n\n### Upgrades\n\n* Upgrade `sea-schema` to 0.10.2 https://github.com/SeaQL/sea-orm/pull/1153\n\n## 0.10.0 - 2022-10-23\n\n### New Features\n\n* Better error types (carrying SQLx Error) https://github.com/SeaQL/sea-orm/pull/1002\n* Support array datatype in PostgreSQL https://github.com/SeaQL/sea-orm/pull/1132\n* [sea-orm-cli] Generate entity files as a library or module https://github.com/SeaQL/sea-orm/pull/953\n* [sea-orm-cli] Generate a new migration template with name prefix of unix timestamp https://github.com/SeaQL/sea-orm/pull/947\n* [sea-orm-cli] Generate migration in modules https://github.com/SeaQL/sea-orm/pull/933\n* [sea-orm-cli] Generate `DeriveRelation` on empty `Relation` enum https://github.com/SeaQL/sea-orm/pull/1019\n* [sea-orm-cli] Generate entity derive `Eq` if possible https://github.com/SeaQL/sea-orm/pull/988\n* [sea-orm-cli] Run migration on any PostgreSQL schema https://github.com/SeaQL/sea-orm/pull/1056\n\n### Enhancements\n\n* Support `distinct` & `distinct_on` expression https://github.com/SeaQL/sea-orm/pull/902\n* `fn column()` also handle enum type https://github.com/SeaQL/sea-orm/pull/973\n* Added `acquire_timeout` on `ConnectOptions` https://github.com/SeaQL/sea-orm/pull/897\n* [sea-orm-cli] `migrate fresh` command will drop all PostgreSQL types https://github.com/SeaQL/sea-orm/pull/864, https://github.com/SeaQL/sea-orm/pull/991\n* Better compile error for entity without primary key https://github.com/SeaQL/sea-orm/pull/1020\n* Added blanket implementations of `IntoActiveValue` for `Option` values https://github.com/SeaQL/sea-orm/pull/833\n* Added `into_model` & `into_json` to `Cursor` https://github.com/SeaQL/sea-orm/pull/1112\n* Added `set_schema_search_path` method to `ConnectOptions` for setting schema search path of PostgreSQL connection https://github.com/SeaQL/sea-orm/pull/1056\n* Serialize `time` types as `serde_json::Value` https://github.com/SeaQL/sea-orm/pull/1042\n* Implements `fmt::Display` for `ActiveEnum` https://github.com/SeaQL/sea-orm/pull/986\n* Implements `TryFrom<ActiveModel>` for `Model` https://github.com/SeaQL/sea-orm/pull/990\n\n### Bug Fixes\n\n* Trim spaces when paginating raw SQL https://github.com/SeaQL/sea-orm/pull/1094\n\n### Breaking Changes\n\n* Replaced `usize` with `u64` in `PaginatorTrait` https://github.com/SeaQL/sea-orm/pull/789\n* Type signature of `DbErr` changed as a result of https://github.com/SeaQL/sea-orm/pull/1002\n* `ColumnType::Enum` structure changed:\n```rust\nenum ColumnType {\n    // then\n    Enum(String, Vec<String>)\n\n    // now\n    Enum {\n        /// Name of enum\n        name: DynIden,\n        /// Variants of enum\n        variants: Vec<DynIden>,\n    }\n    ...\n}\n\n// example\n\n#[derive(Iden)]\nenum TeaEnum {\n    #[iden = \"tea\"]\n    Enum,\n    #[iden = \"EverydayTea\"]\n    EverydayTea,\n    #[iden = \"BreakfastTea\"]\n    BreakfastTea,\n}\n\n// then\nColumnDef::new(active_enum_child::Column::Tea)\n    .enumeration(\"tea\", vec![\"EverydayTea\", \"BreakfastTea\"])\n\n// now\nColumnDef::new(active_enum_child::Column::Tea)\n    .enumeration(TeaEnum::Enum, [TeaEnum::EverydayTea, TeaEnum::BreakfastTea])\n```\n\n* A new method `array_type` was added to `ValueType`:\n```rust\nimpl sea_orm::sea_query::ValueType for MyType {\n    fn array_type() -> sea_orm::sea_query::ArrayType {\n        sea_orm::sea_query::ArrayType::TypeName\n    }\n    ...\n}\n```\n\n* `ActiveEnum::name()` changed return type to `DynIden`:\n```rust\n#[derive(Debug, Iden)]\n#[iden = \"category\"]\npub struct CategoryEnum;\n\nimpl ActiveEnum for Category {\n    // then\n    fn name() -> String {\n        \"category\".to_owned()\n    }\n\n    // now\n    fn name() -> DynIden {\n        SeaRc::new(CategoryEnum)\n    }\n    ...\n}\n```\n\n### House Keeping\n\n* Documentation grammar fixes https://github.com/SeaQL/sea-orm/pull/1050\n* Replace `dotenv` with `dotenvy` in examples https://github.com/SeaQL/sea-orm/pull/1085\n* Exclude test_cfg module from SeaORM https://github.com/SeaQL/sea-orm/pull/1077\n\n### Integration\n\n* Support `rocket_okapi` https://github.com/SeaQL/sea-orm/pull/1071\n\n### Upgrades\n\n* Upgrade `sea-query` to 0.26 https://github.com/SeaQL/sea-orm/pull/985\n\n**Full Changelog**: https://github.com/SeaQL/sea-orm/compare/0.9.0...0.10.0\n\n## 0.9.3 - 2022-09-30\n\n### Enhancements\n\n* `fn column()` also handle enum type https://github.com/SeaQL/sea-orm/pull/973\n* Generate migration in modules https://github.com/SeaQL/sea-orm/pull/933\n* Generate `DeriveRelation` on empty `Relation` enum https://github.com/SeaQL/sea-orm/pull/1019\n* Documentation grammar fixes https://github.com/SeaQL/sea-orm/pull/1050\n\n### Bug Fixes\n\n* Implement `IntoActiveValue` for `time` types https://github.com/SeaQL/sea-orm/pull/1041\n* Fixed module import for `FromJsonQueryResult` derive macro https://github.com/SeaQL/sea-orm/pull/1081\n\n## 0.9.2 - 2022-08-20\n\n### Enhancements\n\n* [sea-orm-cli] Migrator CLI handles init and generate commands https://github.com/SeaQL/sea-orm/pull/931\n* [sea-orm-cli] added `with-copy-enums` flag to conditional derive `Copy` on `ActiveEnum` https://github.com/SeaQL/sea-orm/pull/936\n\n### House Keeping\n\n* Exclude `chrono` default features https://github.com/SeaQL/sea-orm/pull/950\n* Set minimal rustc version to `1.60` https://github.com/SeaQL/sea-orm/pull/938\n* Update `sea-query` to `0.26.3`\n\n### Notes\n\nIn this minor release, we removed `time` v0.1 from the dependency graph\n\n## 0.9.1 - 2022-07-22\n\n### Enhancements\n\n* [sea-orm-cli] Codegen support for `VarBinary` column type https://github.com/SeaQL/sea-orm/pull/746\n* [sea-orm-cli] Generate entity for SYSTEM VERSIONED tables on MariaDB https://github.com/SeaQL/sea-orm/pull/876\n\n### Bug Fixes\n\n* `RelationDef` & `RelationBuilder` should be `Send` & `Sync` https://github.com/SeaQL/sea-orm/pull/898\n\n### House Keeping\n\n* Remove unnecessary `async_trait` https://github.com/SeaQL/sea-orm/pull/737\n\n## 0.9.0 - 2022-07-17\n\n### New Features\n\n* Cursor pagination https://github.com/SeaQL/sea-orm/pull/822\n* Custom join on conditions https://github.com/SeaQL/sea-orm/pull/793\n* `DeriveMigrationName` and `sea_orm_migration::util::get_file_stem` https://github.com/SeaQL/sea-orm/pull/736\n* `FromJsonQueryResult` for deserializing `Json` from query result https://github.com/SeaQL/sea-orm/pull/794\n\n### Enhancements\n\n* Added `sqlx_logging_level` to `ConnectOptions` https://github.com/SeaQL/sea-orm/pull/800\n* Added `num_items_and_pages` to `Paginator` https://github.com/SeaQL/sea-orm/pull/768\n* Added `TryFromU64` for `time` https://github.com/SeaQL/sea-orm/pull/849\n* Added `Insert::on_conflict` https://github.com/SeaQL/sea-orm/pull/791\n* Added `QuerySelect::join_as` and `QuerySelect::join_as_rev` https://github.com/SeaQL/sea-orm/pull/852\n* Include column name in `TryGetError::Null` https://github.com/SeaQL/sea-orm/pull/853\n* [sea-orm-cli] Improve logging https://github.com/SeaQL/sea-orm/pull/735\n* [sea-orm-cli] Generate enum with numeric like variants https://github.com/SeaQL/sea-orm/pull/588\n* [sea-orm-cli] Allow old pending migration to be applied https://github.com/SeaQL/sea-orm/pull/755\n* [sea-orm-cli] Skip generating entity for ignored tables https://github.com/SeaQL/sea-orm/pull/837\n* [sea-orm-cli] Generate code for `time` crate https://github.com/SeaQL/sea-orm/pull/724\n* [sea-orm-cli] Add various blob column types https://github.com/SeaQL/sea-orm/pull/850\n* [sea-orm-cli] Generate entity files with Postgres's schema name https://github.com/SeaQL/sea-orm/pull/422\n\n### Upgrades\n\n* Upgrade `clap` to 3.2 https://github.com/SeaQL/sea-orm/pull/706\n* Upgrade `time` to 0.3 https://github.com/SeaQL/sea-orm/pull/834\n* Upgrade `sqlx` to 0.6 https://github.com/SeaQL/sea-orm/pull/834\n* Upgrade `uuid` to 1.0 https://github.com/SeaQL/sea-orm/pull/834\n* Upgrade `sea-query` to 0.26 https://github.com/SeaQL/sea-orm/pull/834\n* Upgrade `sea-schema` to 0.9 https://github.com/SeaQL/sea-orm/pull/834\n\n### House Keeping\n\n* Refactor stream metrics https://github.com/SeaQL/sea-orm/pull/778\n\n### Bug Fixes\n\n* [sea-orm-cli] skip checking connection string for credentials https://github.com/SeaQL/sea-orm/pull/851\n\n### Breaking Changes\n\n* `SelectTwoMany::one()` has been dropped https://github.com/SeaQL/sea-orm/pull/813, you can get `(Entity, Vec<RelatedEntity>)` by first querying a single model from Entity, then use [`ModelTrait::find_related`] on the model.\n* #### Feature flag revamp\n    We now adopt the [weak dependency](https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html#new-syntax-for-cargo-features) syntax in Cargo. That means the flags `[\"sqlx-json\", \"sqlx-chrono\", \"sqlx-decimal\", \"sqlx-uuid\", \"sqlx-time\"]` are not needed and now removed. Instead, `with-time` will enable `sqlx?/time` only if `sqlx` is already enabled. As a consequence, now the features `with-json`, `with-chrono`, `with-rust_decimal`, `with-uuid`, `with-time` will not be enabled as a side-effect of enabling `sqlx`.\n\n**Full Changelog**: https://github.com/SeaQL/sea-orm/compare/0.8.0...0.9.0\n\n## sea-orm-migration 0.8.3\n\n* Removed `async-std` from dependency https://github.com/SeaQL/sea-orm/pull/758\n\n## 0.8.0 - 2022-05-10\n\n### New Features\n* [sea-orm-cli] `sea migrate generate` to generate a new, empty migration file https://github.com/SeaQL/sea-orm/pull/656\n\n### Enhancements\n* Add `max_connections` option to CLI https://github.com/SeaQL/sea-orm/pull/670\n* Derive `Eq`, `Clone` for `DbErr` https://github.com/SeaQL/sea-orm/pull/677\n* Add `is_changed` to `ActiveModelTrait` https://github.com/SeaQL/sea-orm/pull/683\n\n### Bug Fixes\n* Fix `DerivePrimaryKey` with custom primary key column name https://github.com/SeaQL/sea-orm/pull/694\n* Fix `DeriveEntityModel` macros override column name https://github.com/SeaQL/sea-orm/pull/695\n* Fix Insert with no value supplied using `DEFAULT` https://github.com/SeaQL/sea-orm/pull/589\n\n### Breaking Changes\n* Migration utilities are moved from sea-schema to sea-orm repo, under a new sub-crate `sea-orm-migration`. `sea_schema::migration::prelude` should be replaced by `sea_orm_migration::prelude` in all migration files\n\n### Upgrades\n* Upgrade `sea-query` to 0.24.x, `sea-schema` to 0.8.x\n* Upgrade example to Actix Web 4, Actix Web 3 remains https://github.com/SeaQL/sea-orm/pull/638\n* Added Tonic gRPC example https://github.com/SeaQL/sea-orm/pull/659\n* Upgrade GraphQL example to use axum 0.5.x\n* Upgrade axum example to 0.5.x\n\n### Fixed Issues\n* Failed to insert row with only default values https://github.com/SeaQL/sea-orm/issues/420\n* Reduce database connections to 1 during codegen https://github.com/SeaQL/sea-orm/issues/511\n* Column names with single letters separated by underscores are concatenated https://github.com/SeaQL/sea-orm/issues/630\n* Update Actix Web examples https://github.com/SeaQL/sea-orm/issues/639\n* Lower function missing https://github.com/SeaQL/sea-orm/issues/672\n* is_changed on active_model https://github.com/SeaQL/sea-orm/issues/674\n* Failing find_with_related with column_name attribute https://github.com/SeaQL/sea-orm/issues/693\n\n**Full Changelog**: https://github.com/SeaQL/sea-orm/compare/0.7.1...0.8.0\n\n## 0.7.1 - 2022-03-26\n\n* Fix sea-orm-cli error\n* Fix sea-orm cannot build without `with-json`\n\n## 0.7.0 - 2022-03-26\n\n### New Features\n* Update ActiveModel by JSON by @billy1624 in https://github.com/SeaQL/sea-orm/pull/492\n* Supports `time` crate by @billy1624 https://github.com/SeaQL/sea-orm/pull/602\n* Allow for creation of indexes for PostgreSQL and SQLite @nickb937 https://github.com/SeaQL/sea-orm/pull/593\n* Added `delete_by_id` @ShouvikGhosh2048 https://github.com/SeaQL/sea-orm/pull/590\n* Implement `PaginatorTrait` for `SelectorRaw` @shinbunbun https://github.com/SeaQL/sea-orm/pull/617\n\n### Enhancements\n* Added axum graphql example by @aaronleopold in https://github.com/SeaQL/sea-orm/pull/587\n* Add example for integrate with jsonrpsee by @hunjixin https://github.com/SeaQL/sea-orm/pull/632\n* Codegen add serde derives to enums, if specified by @BenJeau https://github.com/SeaQL/sea-orm/pull/463\n* Codegen Unsigned Integer by @billy1624 https://github.com/SeaQL/sea-orm/pull/397\n* Add `Send` bound to `QueryStream` and `TransactionStream` by @sebpuetz https://github.com/SeaQL/sea-orm/pull/471\n* Add `Send` to `StreamTrait` by @nappa85 https://github.com/SeaQL/sea-orm/pull/622\n* `sea` as an alternative bin name to `sea-orm-cli` by @ZhangHanDong https://github.com/SeaQL/sea-orm/pull/558\n\n### Bug Fixes\n* Fix codegen with Enum in expanded format by @billy1624 https://github.com/SeaQL/sea-orm/pull/624\n* Fixing and testing into_json of various field types by @billy1624 https://github.com/SeaQL/sea-orm/pull/539\n\n### Breaking Changes\n* Exclude `mock` from default features by @billy1624 https://github.com/SeaQL/sea-orm/pull/562\n* `create_table_from_entity` will no longer create index for MySQL, please use the new method `create_index_from_entity`\n\n### Documentations\n* Describe default value of ActiveValue on document by @Ken-Miura in https://github.com/SeaQL/sea-orm/pull/556\n* community: add axum-book-management by @lz1998 in https://github.com/SeaQL/sea-orm/pull/564\n* Add Backpack to project showcase by @JSH32 in https://github.com/SeaQL/sea-orm/pull/567\n* Add mediarepo to showcase by @Trivernis in https://github.com/SeaQL/sea-orm/pull/569\n* COMMUNITY: add a link to Svix to showcase by @tasn in https://github.com/SeaQL/sea-orm/pull/537\n* Update COMMUNITY.md by @naryand in https://github.com/SeaQL/sea-orm/pull/570\n* Update COMMUNITY.md by @BobAnkh in https://github.com/SeaQL/sea-orm/pull/568\n* Update COMMUNITY.md by @KaniyaSimeji in https://github.com/SeaQL/sea-orm/pull/566\n* Update COMMUNITY.md by @aaronleopold in https://github.com/SeaQL/sea-orm/pull/565\n* Update COMMUNITY.md by @gudaoxuri in https://github.com/SeaQL/sea-orm/pull/572\n* Update Wikijump's entry in COMMUNITY.md by @ammongit in https://github.com/SeaQL/sea-orm/pull/573\n* Update COMMUNITY.md by @koopa1338 in https://github.com/SeaQL/sea-orm/pull/574\n* Update COMMUNITY.md by @gengteng in https://github.com/SeaQL/sea-orm/pull/580\n* Update COMMUNITY.md by @Yama-Tomo in https://github.com/SeaQL/sea-orm/pull/582\n* add oura-postgres-sink to COMMUNITY.md by @rvcas in https://github.com/SeaQL/sea-orm/pull/594\n* Add rust-example-caster-api to COMMUNITY.md by @bkonkle in https://github.com/SeaQL/sea-orm/pull/623\n\n### Fixed Issues\n* orm-cli generated incorrect type for #[sea_orm(primary_key)]. Should be u64. Was i64. https://github.com/SeaQL/sea-orm/issues/295\n* how to update dynamically from json value https://github.com/SeaQL/sea-orm/issues/346\n* Make `DatabaseConnection` `Clone` with the default features enabled https://github.com/SeaQL/sea-orm/issues/438\n* Updating multiple fields in a Model by passing a reference https://github.com/SeaQL/sea-orm/issues/460\n* SeaORM CLI not adding serde derives to Enums https://github.com/SeaQL/sea-orm/issues/461\n* sea-orm-cli generates wrong data type for nullable blob https://github.com/SeaQL/sea-orm/issues/490\n* Support the time crate in addition (instead of?) chrono https://github.com/SeaQL/sea-orm/issues/499\n* PaginatorTrait for SelectorRaw https://github.com/SeaQL/sea-orm/issues/500\n* sea_orm::DatabaseConnection should implement `Clone` by default https://github.com/SeaQL/sea-orm/issues/517\n* How do you seed data in migrations using ActiveModels? https://github.com/SeaQL/sea-orm/issues/522\n* Datetime fields are not serialized by `.into_json()` on queries https://github.com/SeaQL/sea-orm/issues/530\n* Update / Delete by id https://github.com/SeaQL/sea-orm/issues/552\n* `#[sea_orm(indexed)]` only works for MySQL https://github.com/SeaQL/sea-orm/issues/554\n* `sea-orm-cli generate --with-serde` does not work on Postgresql custom type https://github.com/SeaQL/sea-orm/issues/581\n* `sea-orm-cli generate --expanded-format` panic when postgres table contains enum type https://github.com/SeaQL/sea-orm/issues/614\n* UUID fields are not serialized by `.into_json()` on queries https://github.com/SeaQL/sea-orm/issues/619\n\n**Full Changelog**: https://github.com/SeaQL/sea-orm/compare/0.6.0...0.7.0\n\n## 0.6.0 - 2022-02-07\n\n### New Features\n* Migration Support by @billy1624 in https://github.com/SeaQL/sea-orm/pull/335\n* Support `DateTime<Utc>` & `DateTime<Local>` by @billy1624 in https://github.com/SeaQL/sea-orm/pull/489\n* Add `max_lifetime` connection option by @billy1624 in https://github.com/SeaQL/sea-orm/pull/493\n\n### Enhancements\n* Model with Generics by @billy1624 in https://github.com/SeaQL/sea-orm/pull/400\n* Add Poem example by @sunli829 in https://github.com/SeaQL/sea-orm/pull/446\n* Codegen `column_name` proc_macro attribute by @billy1624 in https://github.com/SeaQL/sea-orm/pull/433\n* Easy joins with MockDatabase #447 by @cemoktra in https://github.com/SeaQL/sea-orm/pull/455\n\n### Bug Fixes\n* CLI allow generate entity with url without password by @billy1624 in https://github.com/SeaQL/sea-orm/pull/436\n* Support up to 6-ary composite primary key by @billy1624 in https://github.com/SeaQL/sea-orm/pull/423\n* Fix FromQueryResult when Result is redefined by @tasn in https://github.com/SeaQL/sea-orm/pull/495\n* Remove `r#` prefix when deriving `FromQueryResult` by @smrtrfszm in https://github.com/SeaQL/sea-orm/pull/494\n\n### Breaking Changes\n* Name conflict of foreign key constraints when two entities have more than one foreign keys by @billy1624 in https://github.com/SeaQL/sea-orm/pull/417\n\n### Fixed Issues\n* Is it possible to have 4 values Composite Key? https://github.com/SeaQL/sea-orm/issues/352\n* Support `DateTime<Utc>` & `DateTime<Local>` https://github.com/SeaQL/sea-orm/issues/381\n* Codegen `column_name` proc_macro attribute if column name isn't in snake case https://github.com/SeaQL/sea-orm/issues/395\n* Model with Generics https://github.com/SeaQL/sea-orm/issues/402\n* Foreign key constraint collision when multiple keys exist between the same two tables https://github.com/SeaQL/sea-orm/issues/405\n* sea-orm-cli passwordless database user causes \"No password was found in the database url\" error https://github.com/SeaQL/sea-orm/issues/435\n* Testing joins with MockDatabase https://github.com/SeaQL/sea-orm/issues/447\n* Surface max_lifetime connection option https://github.com/SeaQL/sea-orm/issues/475\n\n**Full Changelog**: https://github.com/SeaQL/sea-orm/compare/0.5.0...0.6.0\n\n## 0.5.0 - 2022-01-01\n\n### Fixed Issues\n* Why insert, update, etc return an ActiveModel instead of Model? https://github.com/SeaQL/sea-orm/issues/289\n* Rework `ActiveValue` https://github.com/SeaQL/sea-orm/issues/321\n* Some missing ActiveEnum utilities https://github.com/SeaQL/sea-orm/issues/338\n\n### Merged PRs\n* First metric and tracing implementation by @nappa85 in https://github.com/SeaQL/sea-orm/pull/373\n* Update sea-orm to depends on SeaQL/sea-query#202 by @billy1624 in https://github.com/SeaQL/sea-orm/pull/370\n* Codegen ActiveEnum & Create Enum From ActiveEnum by @billy1624 in https://github.com/SeaQL/sea-orm/pull/348\n* Axum example: update to Axum v0.4.2 by @ttys3 in https://github.com/SeaQL/sea-orm/pull/383\n* Fix rocket version by @Gabriel-Paulucci in https://github.com/SeaQL/sea-orm/pull/384\n* Insert & Update Return `Model` by @billy1624 in https://github.com/SeaQL/sea-orm/pull/339\n* Rework `ActiveValue` by @billy1624 in https://github.com/SeaQL/sea-orm/pull/340\n* Add wrapper method `ModelTrait::delete` by @billy1624 in https://github.com/SeaQL/sea-orm/pull/396\n* Add docker create script for contributors to setup databases locally by @billy1624 in https://github.com/SeaQL/sea-orm/pull/378\n* Log with tracing-subscriber by @billy1624 in https://github.com/SeaQL/sea-orm/pull/399\n* Codegen SQLite by @billy1624 in https://github.com/SeaQL/sea-orm/pull/386\n* PR without clippy warnings in file changed tab by @billy1624 in https://github.com/SeaQL/sea-orm/pull/401\n* Rename `sea-strum` lib back to `strum` by @billy1624 in https://github.com/SeaQL/sea-orm/pull/361\n\n### Breaking Changes\n* `ActiveModel::insert` and `ActiveModel::update` return `Model` instead of `ActiveModel`\n* Method `ActiveModelBehavior::after_save` takes `Model` as input instead of `ActiveModel`\n* Rename method `sea_orm::unchanged_active_value_not_intended_for_public_use` to `sea_orm::Unchanged`\n* Rename method `ActiveValue::unset` to `ActiveValue::not_set`\n* Rename method `ActiveValue::is_unset` to `ActiveValue::is_not_set`\n* `PartialEq` of `ActiveValue` will also check the equality of state instead of just checking the equality of value\n\n**Full Changelog**: https://github.com/SeaQL/sea-orm/compare/0.4.2...0.5.0\n\n## 0.4.2 - 2021-12-12\n\n### Fixed Issues\n* Delete::many() doesn't work when schema_name is defined https://github.com/SeaQL/sea-orm/issues/362\n* find_with_related panic https://github.com/SeaQL/sea-orm/issues/374\n* How to define the rust type of TIMESTAMP? https://github.com/SeaQL/sea-orm/issues/344\n* Add Table on the generated Column enum https://github.com/SeaQL/sea-orm/issues/356\n\n### Merged PRs\n* `Delete::many()` with `TableRef` by @billy1624 in https://github.com/SeaQL/sea-orm/pull/363\n* Fix related & linked with enum columns by @billy1624 in https://github.com/SeaQL/sea-orm/pull/376\n* Temporary Fix: Handling MySQL & SQLite timestamp columns by @billy1624 in https://github.com/SeaQL/sea-orm/pull/379\n* Add feature to generate table Iden by @Sytten in https://github.com/SeaQL/sea-orm/pull/360\n\n## 0.4.1 - 2021-12-05\n\n### Fixed Issues\n* Is it possible to have 4 values Composite Key? https://github.com/SeaQL/sea-orm/issues/352\n* [sea-orm-cli] Better handling of relation generations https://github.com/SeaQL/sea-orm/issues/239\n\n### Merged PRs\n* Add TryFromU64 trait for `DateTime<FixedOffset>`. by @kev0960 in https://github.com/SeaQL/sea-orm/pull/331\n* add offset and limit by @lz1998 in https://github.com/SeaQL/sea-orm/pull/351\n* For some reason the `axum_example` fail to compile by @billy1624 in https://github.com/SeaQL/sea-orm/pull/355\n* Support Up to 6 Values Composite Primary Key by @billy1624 in https://github.com/SeaQL/sea-orm/pull/353\n* Codegen Handle Self Referencing & Multiple Relations to the Same Related Entity by @billy1624 in https://github.com/SeaQL/sea-orm/pull/347\n\n## 0.4.0 - 2021-11-19\n\n### Fixed Issues\n* Disable SQLx query logging https://github.com/SeaQL/sea-orm/issues/290\n* Code generated by `sea-orm-cli` cannot pass clippy https://github.com/SeaQL/sea-orm/issues/296\n* Should return detailed error message for connection failure https://github.com/SeaQL/sea-orm/issues/310\n* `DateTimeWithTimeZone` does not implement `Serialize` and `Deserialize` https://github.com/SeaQL/sea-orm/issues/319\n* Support returning clause to avoid database hits https://github.com/SeaQL/sea-orm/issues/183\n\n### Merged PRs\n* chore: update to Rust 2021 Edition by @sno2 in https://github.com/SeaQL/sea-orm/pull/273\n* Enumeration - 3 by @billy1624 in https://github.com/SeaQL/sea-orm/pull/274\n* Enumeration - 2 by @billy1624 in https://github.com/SeaQL/sea-orm/pull/261\n* Codegen fix clippy warnings by @billy1624 in https://github.com/SeaQL/sea-orm/pull/303\n* Add axum example by @YoshieraHuang in https://github.com/SeaQL/sea-orm/pull/297\n* Enumeration by @billy1624 in https://github.com/SeaQL/sea-orm/pull/258\n* Add `PaginatorTrait` and `CountTrait` for more constraints by @YoshieraHuang in https://github.com/SeaQL/sea-orm/pull/306\n* Continue `PaginatorTrait` by @billy1624 in https://github.com/SeaQL/sea-orm/pull/307\n* Refactor `Schema` by @billy1624 in https://github.com/SeaQL/sea-orm/pull/309\n* Detailed connection errors by @billy1624 in https://github.com/SeaQL/sea-orm/pull/312\n* Suppress `ouroboros` missing docs warnings by @billy1624 in https://github.com/SeaQL/sea-orm/pull/288\n* `with-json` feature requires `chrono/serde` by @billy1624 in https://github.com/SeaQL/sea-orm/pull/320\n* Pass the argument `entity.table_ref()` instead of just `entity`. by @josh-codes in https://github.com/SeaQL/sea-orm/pull/318\n* Unknown types could be a newtypes instead of `ActiveEnum` by @billy1624 in https://github.com/SeaQL/sea-orm/pull/324\n* Returning by @billy1624 in https://github.com/SeaQL/sea-orm/pull/292\n\n### Breaking Changes\n* Refactor `paginate()` & `count()` utilities into `PaginatorTrait`. You can use the paginator as usual but you might need to import `PaginatorTrait` manually when upgrading from the previous version.\n    ```rust\n    use futures::TryStreamExt;\n    use sea_orm::{entity::*, query::*, tests_cfg::cake};\n\n    let mut cake_stream = cake::Entity::find()\n        .order_by_asc(cake::Column::Id)\n        .paginate(db, 50)\n        .into_stream();\n\n    while let Some(cakes) = cake_stream.try_next().await? {\n        // Do something on cakes: Vec<cake::Model>\n    }\n    ```\n* The helper struct `Schema` converting `EntityTrait` into different `sea-query` statements now has to be initialized with `DbBackend`.\n    ```rust\n    use sea_orm::{tests_cfg::*, DbBackend, Schema};\n    use sea_orm::sea_query::TableCreateStatement;\n\n    // 0.3.x\n    let _: TableCreateStatement = Schema::create_table_from_entity(cake::Entity);\n\n    // 0.4.x\n    let schema: Schema = Schema::new(DbBackend::MySql);\n    let _: TableCreateStatement = schema.create_table_from_entity(cake::Entity);\n    ```\n* When performing insert or update operation on `ActiveModel` against PostgreSQL, `RETURNING` clause will be used to perform select in a single SQL statement.\n    ```rust\n    // For PostgreSQL\n    cake::ActiveModel {\n        name: Set(\"Apple Pie\".to_owned()),\n        ..Default::default()\n    }\n    .insert(&postgres_db)\n    .await?;\n\n    assert_eq!(\n        postgres_db.into_transaction_log(),\n        vec![Transaction::from_sql_and_values(\n            DbBackend::Postgres,\n            r#\"INSERT INTO \"cake\" (\"name\") VALUES ($1) RETURNING \"id\", \"name\"\"#,\n            vec![\"Apple Pie\".into()]\n        )]);\n    ```\n    ```rust\n    // For MySQL & SQLite\n    cake::ActiveModel {\n        name: Set(\"Apple Pie\".to_owned()),\n        ..Default::default()\n    }\n    .insert(&other_db)\n    .await?;\n\n    assert_eq!(\n        other_db.into_transaction_log(),\n        vec![\n            Transaction::from_sql_and_values(\n                DbBackend::MySql,\n                r#\"INSERT INTO `cake` (`name`) VALUES (?)\"#,\n                vec![\"Apple Pie\".into()]\n            ),\n            Transaction::from_sql_and_values(\n                DbBackend::MySql,\n                r#\"SELECT `cake`.`id`, `cake`.`name` FROM `cake` WHERE `cake`.`id` = ? LIMIT ?\"#,\n                vec![15.into(), 1u64.into()]\n            )]);\n    ```\n\n**Full Changelog**: https://github.com/SeaQL/sea-orm/compare/0.3.2...0.4.0\n\n## 0.3.2 - 2021-11-03\n\n### Fixed Issues\n* Support for BYTEA Postgres primary keys https://github.com/SeaQL/sea-orm/issues/286\n\n### Merged PRs\n* Documentation for sea-orm by @charleschege in https://github.com/SeaQL/sea-orm/pull/280\n* Support `Vec<u8>` primary key by @billy1624 in https://github.com/SeaQL/sea-orm/pull/287\n\n## 0.3.1 - 2021-10-23\n\n(We are changing our Changelog format from now on)\n\n### Fixed Issues\n* Align case transforms across derive macros https://github.com/SeaQL/sea-orm/issues/262\n* Added `is_null` and `is_not_null` to `ColumnTrait` https://github.com/SeaQL/sea-orm/issues/267\n\n(The following is generated by GitHub)\n\n### Merged PRs\n* Changed manual url parsing to use Url crate by @AngelOnFira in https://github.com/SeaQL/sea-orm/pull/253\n* Test self referencing relation by @billy1624 in https://github.com/SeaQL/sea-orm/pull/256\n* Unify case-transform using the same crate by @billy1624 in https://github.com/SeaQL/sea-orm/pull/264\n* CI cleaning by @AngelOnFira in https://github.com/SeaQL/sea-orm/pull/263\n* CI install sea-orm-cli in debug mode by @billy1624 in https://github.com/SeaQL/sea-orm/pull/265\n\n## 0.3.0 - 2021-10-15\n\nhttps://www.sea-ql.org/SeaORM/blog/2021-10-15-whats-new-in-0.3.0\n\n- Built-in Rocket support\n- `ConnectOptions`\n\n```rust\nlet mut opt = ConnectOptions::new(\"protocol://username:password@host/database\".to_owned());\nopt.max_connections(100)\n    .min_connections(5)\n    .connect_timeout(Duration::from_secs(8))\n    .idle_timeout(Duration::from_secs(8));\nlet db = Database::connect(opt).await?;\n```\n\n- [[#211]] Throw error if none of the db rows are affected\n\n```rust\nassert_eq!(\n    Update::one(cake::ActiveModel {\n        name: Set(\"Cheese Cake\".to_owned()),\n        ..model.into_active_model()\n    })\n    .exec(&db)\n    .await,\n    Err(DbErr::RecordNotFound(\n        \"None of the database rows are affected\".to_owned()\n    ))\n);\n\n// update many remains the same\nassert_eq!(\n    Update::many(cake::Entity)\n        .col_expr(cake::Column::Name, Expr::value(\"Cheese Cake\".to_owned()))\n        .filter(cake::Column::Id.eq(2))\n        .exec(&db)\n        .await,\n    Ok(UpdateResult { rows_affected: 0 })\n);\n```\n\n- [[#223]] `ActiveValue::take()` & `ActiveValue::into_value()` without `unwrap()`\n- [[#205]] Drop `Default` trait bound of `PrimaryKeyTrait::ValueType`\n- [[#222]] Transaction & streaming\n- [[#210]] Update `ActiveModelBehavior` API\n- [[#240]] Add derive `DeriveIntoActiveModel` and `IntoActiveValue` trait\n- [[#237]] Introduce optional serde support for model code generation\n- [[#246]] Add `#[automatically_derived]` to all derived implementations\n\n[#211]: https://github.com/SeaQL/sea-orm/pull/211\n[#223]: https://github.com/SeaQL/sea-orm/pull/223\n[#205]: https://github.com/SeaQL/sea-orm/pull/205\n[#222]: https://github.com/SeaQL/sea-orm/pull/222\n[#210]: https://github.com/SeaQL/sea-orm/pull/210\n[#240]: https://github.com/SeaQL/sea-orm/pull/240\n[#237]: https://github.com/SeaQL/sea-orm/pull/237\n[#246]: https://github.com/SeaQL/sea-orm/pull/246\n\n**Full Changelog**: https://github.com/SeaQL/sea-orm/compare/0.2.6...0.3.0\n\n## 0.2.6 - 2021-10-09\n\n- [[#224]] [sea-orm-cli] Date & Time column type mapping\n- Escape rust keywords with `r#` raw identifier\n\n[#224]: https://github.com/SeaQL/sea-orm/pull/224\n\n## 0.2.5 - 2021-10-06\n\n- [[#227]] Resolve \"Inserting actual none value of Option<Date> results in panic\"\n- [[#219]] [sea-orm-cli] Add `--tables` option\n- [[#189]] Add `debug_query` and `debug_query_stmt` macro\n\n[#227]: https://github.com/SeaQL/sea-orm/issues/227\n[#219]: https://github.com/SeaQL/sea-orm/pull/219\n[#189]: https://github.com/SeaQL/sea-orm/pull/189\n\n## 0.2.4 - 2021-10-01\n\nhttps://www.sea-ql.org/SeaORM/blog/2021-10-01-whats-new-in-0.2.4\n\n- [[#186]] [sea-orm-cli] Foreign key handling\n- [[#191]] [sea-orm-cli] Unique key handling\n- [[#182]] `find_linked` join with alias\n- [[#202]] Accept both `postgres://` and `postgresql://`\n- [[#208]] Support fetching T, (T, U), (T, U, P) etc\n- [[#209]] Rename column name & column enum variant\n- [[#207]] Support `chrono::NaiveDate` & `chrono::NaiveTime`\n- Support `Condition::not` (from sea-query)\n\n[#186]: https://github.com/SeaQL/sea-orm/issues/186\n[#191]: https://github.com/SeaQL/sea-orm/issues/191\n[#182]: https://github.com/SeaQL/sea-orm/pull/182\n[#202]: https://github.com/SeaQL/sea-orm/pull/202\n[#208]: https://github.com/SeaQL/sea-orm/pull/208\n[#209]: https://github.com/SeaQL/sea-orm/pull/209\n[#207]: https://github.com/SeaQL/sea-orm/pull/207\n\n## 0.2.3 - 2021-09-22\n\n- [[#152]] DatabaseConnection impl `Clone`\n- [[#175]] Impl `TryGetableMany` for different types of generics\n- Codegen `TimestampWithTimeZone` fixup\n\n[#152]: https://github.com/SeaQL/sea-orm/issues/152\n[#175]: https://github.com/SeaQL/sea-orm/issues/175\n\n## 0.2.2 - 2021-09-18\n\n- [[#105]] Compact entity format\n- [[#132]] Add ActiveModel `insert` & `update`\n- [[#129]] Add `set` method to `UpdateMany`\n- [[#118]] Initial lock support\n- [[#167]] Add `FromQueryResult::find_by_statement`\n\n[#105]: https://github.com/SeaQL/sea-orm/issues/105\n[#132]: https://github.com/SeaQL/sea-orm/issues/132\n[#129]: https://github.com/SeaQL/sea-orm/issues/129\n[#118]: https://github.com/SeaQL/sea-orm/issues/118\n[#167]: https://github.com/SeaQL/sea-orm/issues/167\n\n## 0.2.1 - 2021-09-04\n\n- Update dependencies\n\n## 0.2.0 - 2021-09-03\n\n- [[#37]] Rocket example\n- [[#114]] `log` crate and `env-logger`\n- [[#103]] `InsertResult` to return the primary key's type\n- [[#89]] Represent several relations between same types by `Linked`\n- [[#59]] Transforming an Entity into `TableCreateStatement`\n\n[#37]: https://github.com/SeaQL/sea-orm/issues/37\n[#114]: https://github.com/SeaQL/sea-orm/issues/114\n[#103]: https://github.com/SeaQL/sea-orm/issues/103\n[#89]: https://github.com/SeaQL/sea-orm/issues/89\n[#59]: https://github.com/SeaQL/sea-orm/issues/59\n\n**Full Changelog**: https://github.com/SeaQL/sea-orm/compare/0.1.3...0.2.0\n\n## 0.1.3 - 2021-08-30\n\n- [[#108]] Remove impl TryGetable for Option<T>\n\n[#108]: https://github.com/SeaQL/sea-orm/issues/108\n\n## 0.1.2 - 2021-08-23\n\n- [[#68]] Added `DateTimeWithTimeZone` as supported attribute type\n- [[#70]] Generate arbitrary named entity\n- [[#80]] Custom column name\n- [[#81]] Support join on multiple columns\n- [[#99]] Implement FromStr for ColumnTrait\n\n[#68]: https://github.com/SeaQL/sea-orm/issues/68\n[#70]: https://github.com/SeaQL/sea-orm/issues/70\n[#80]: https://github.com/SeaQL/sea-orm/issues/80\n[#81]: https://github.com/SeaQL/sea-orm/issues/81\n[#99]: https://github.com/SeaQL/sea-orm/issues/99\n\n## 0.1.1 - 2021-08-08\n\n- Early release of SeaORM\n"
        },
        {
          "name": "COMMUNITY.md",
          "type": "blob",
          "size": 12.5830078125,
          "content": "# Community\n\n## Built with SeaORM\n\nIf you have built an app using SeaORM and want to showcase it, feel free to open a PR and add it to the list below!\n\n### Startups\n\n- [Caido](https://caido.io/) | A lightweight web security auditing toolkit\n- [My Data My Consent](https://mydatamyconsent.com/) | Online data sharing for people and businesses simplified\n- [Prefix.dev](https://prefix.dev/) | Conda Package Search, Environment Management and Deployment built for [mamba](https://github.com/mamba-org/mamba)  | DB: Postgres, SQLite\n- [Svix](https://www.svix.com/) ([repository](https://github.com/svix/svix-webhooks)) ![GitHub stars](https://img.shields.io/github/stars/svix/svix-webhooks.svg?style=social) | The enterprise ready webhooks service | DB: Postgres\n- [Templateless](https://templateless.com/) | Email design using just code | DB: Postgres\n- [UpVPN](https://upvpn.app) ([repository](https://github.com/upvpn/upvpn-app)) | Serverless VPN on WireGuard® | DB: SQLite, Postgres\n\n### Open Source Projects\n\n#### CMS\n\n- [Backpack](https://github.com/JSH32/Backpack) | Open source self hosted file sharing platform on crack | DB: MySQL, Postgres, SQLite\n- [Dev Board](https://github.com/goto-eof/dev_board_api_rust) | A dashboard for organizing software development tasks implemented in Rust\n- [Iron Guard](https://github.com/AfaanBilal/iron-guard-server) | An inventory management system HTTP REST API server built with Rocket and SeaORM | DB: MySQL\n- [mediarepo](https://mediarepo.trivernis.dev) ([repository](https://github.com/Trivernis/mediarepo)) ![GitHub stars](https://img.shields.io/github/stars/Trivernis/mediarepo.svg?style=social) | A tag-based media management application | DB: SQLite\n- [mugen](https://github.com/koopa1338/mugen-dms) | DMS written in 🦀 | DB: Postgres\n- [OctoBase](https://github.com/toeverything/OctoBase) ![GitHub stars](https://img.shields.io/github/stars/toeverything/OctoBase.svg?style=social) | A light-weight, scalable, offline collaborative data backend written in 🦀 | DB: MySQL, Postgres, SQLite\n- [Ryot](https://ignisda.github.io/ryot) ([repository](https://github.com/IgnisDa/ryot)) ![GitHub stars](https://img.shields.io/github/stars/ignisda/ryot.svg?style=social) | The only self hosted tracker you will ever need | DB: MySQL, Postgres, SQLite\n- [Wikijump](https://github.com/scpwiki/wikijump) ([repository](https://github.com/scpwiki/wikijump/tree/develop/deepwell)) ![GitHub stars](https://img.shields.io/github/stars/scpwiki/wikijump.svg?style=social) | API service for Wikijump, a fork of Wikidot | DB: Postgres\n- [sero](https://github.com/clowzed/sero): Host static sites with custom subdomains as surge.sh does. But with full control and cool new features. DB: Postgres\n\n#### Game\n- [Ceobe Canteen Serve](https://github.com/Enraged-Dun-Cookie-Development-Team/Ceobe-Canteen-Serve) | A tool based on Arknights mobile game, using axum as web framework | DB: MySQL\n- [KongYing Tavern Backend](https://github.com/kongying-tavern/genshin-cloud-rust) | The community map navigation tool for Genshin Impact | DB: Postgres\n- [Pocket Relay](https://github.com/PocketRelay/Server) | Mass Effect 3 multiplayer private server emulator | DB: MySQL, SQLite\n- [seichi-portal-backend](https://github.com/GiganticMinecraft/seichi-portal-backend) | Backend server(REST API) of [seichi-portal](https://github.com/GiganticMinecraft/seichi-portal) | DB: MySQL\n- [thrpg](https://github.com/thrpg/thrpg) | Touhou Project's secondary creative games | DB: Postgres\n\n#### Social\n- [aeroFans](https://github.com/naryand/aerofans) | Full stack forum-like social media platform in Rust and WebAssembly | DB: Postgres\n- [Crab Fit](https://crab.fit) [![GitHub stars](https://img.shields.io/github/stars/GRA0007/crab.fit.svg?style=social)](https://github.com/GRA0007/crab.fit) | Align your schedules to find the perfect time that works for everyone. | DB: MySQL, Postgres, SQLite\n- [Hatsu](https://github.com/importantimport/hatsu) | 🩵 Self-hosted & Fully-automated ActivityPub Bridge for Static Sites. | DB: SQLite, Postgres\n- [JinShu](https://github.com/gengteng/jinshu) | A cross-platform **I**nstant **M**essaging system written in 🦀 | DB: MySQL, Postgres\n- [Portfolio](https://github.com/admisio/Portfolio) | Encrypted high school 🏫 admissions service | DB: Postgres, SQLite\n- [THUBurrow](https://github.com/BobAnkh/THUBurrow) | A campus forum built by Next.js and Rocket | DB: Postgres\n- [playa](https://github.com/whizzes/playa) | 🏖️ Decentralized Social Platform powered by Rust and Whizzes Contributors\n\n#### Bots\n- [bulbbot-gw](https://github.com/TeamBulbbot/bulbbot-gw) | The gateway code for the Discord bot Bulbbot | DB: Postgres\n- [Fikabot](https://github.com/sousandrei/fikabot) | A slack bot to schedule coffee breaks (Fika in swedish) in slack channels | DB: MySQL\n- [remindee-bot](https://github.com/magnickolas/remindee-bot) | Telegram bot for managing reminders | DB: SQLite\n- [SophyCore](https://github.com/FarDragi/SophyCore) | Main system that centralizes all rules, to be used by both the discord bot and the future site | DB: Postgres\n\n#### Crypto\n- [MoonRamp](https://github.com/MoonRamp/MoonRamp) | A free and open source crypto payment gateway | DB: MySQL, Postgres, SQLite\n- [Oura Postgres Sink](https://github.com/dcSpark/oura-postgres-sink) | Sync a postgres database with the cardano blockchain using Oura | DB: Postgres\n- [RGB Lib](https://github.com/RGB-Tools/rgb-lib) | A library to manage wallets for RGB assets | DB: MySQL, Postgres, SQLite\n- [Sensei](https://github.com/L2-Technology/sensei) | A Bitcoin lightning node implementation | DB: MySQL, Postgres, SQLite\n\n#### Dev Tools\n- [CodeCTRL](https://codectrl.authentura.com) ([repository](https://github.com/Authentura/codectrl)) | A self-hostable code logging platform | DB: SQLite\n- [Crosup](https://github.com/tsirysndr/crosup) | Quickly setup your development environment on your Chromebook/ChromeOS or any Linux distribution 🐧 ❄️ 💻 🚀 ✨ | DB: SQLite\n- [CyberAPI](https://github.com/vicanso/cyberapi) API tool client for developer. | DB: SQLite\n- [nitro_repo](https://github.com/wyatt-herkamp/nitro_repo) | An OpenSource, lightweight, and fast artifact manager. | DB: MySQL, SQLite\n- [Notifico](https://notifico.tech) ([repository](https://github.com/notificohq/notifico)) ![GitHub stars](https://img.shields.io/github/stars/notificohq/notifico.svg?style=social) | An advanced omni-channel notification server. | DB: MySQL, Postgres, SQLite\n- [Orca](https://github.com/workfoxes/orca) | An No-code Test Automation platform using Actix, SeaORM, React. runs on the desktop and cloud | DB: Postgres\n\n#### System\n- [Email view tracker](https://github.com/friedemannsommer/email-view-tracker) | Simple web UI to create tracking URLs for HTML emails. | DB: MySQL, Postgres\n- [LLDAP](https://github.com/nitnelave/lldap) ![GitHub stars](https://img.shields.io/github/stars/nitnelave/lldap.svg?style=social) | A light LDAP server for user management | DB: MySQL, Postgres, SQLite\n- [RSS aggregator](https://github.com/fistons/rss-aggregator)| A small RSS aggregator and API using Actix Web and SeaORM | DB: Postgres\n- [ruuth](https://github.com/outurnate/ruuth) ([repository](https://github.com/outurnate/ruuth)) | A simple nginx auth_request backend providing MFA and lockout mechanisms | DB: MySQL, Postgres, SQLite\n- [snmp-sim-rust](https://github.com/sonalake/snmp-sim-rust) | SNMP Simulator | DB: SQLite\n- [Wikipedia Speedrun](https://wikipediaspeedrun.com) ([repository](https://github.com/hut8/wikipedia-speedrun)) | Finds shortest paths between Wikipedia articles | DB: SQLite\n\n#### Url Shortener\n- [Dinoly](https://github.com/ippsav/Dinoly) | An url shortener using Axum web framework and SeaORM | DB: Postgres\n- [SlashURL](https://github.com/henriquekirchheck/slashurl) | A url shortener using Rust designed to be implemented anywhere | DB: PostgreSQL\n- [url_shortener](https://github.com/michidk/url_shortener) | A simple self-hosted URL shortener written in Rust | DB: MySQL, Postgres, SQLite\n\n#### Desktop / CLI Apps\n\n- [pansy](https://github.com/niuhuan/pansy) | An illustration app using SeaORM, SQLite, flutter. runs on the desktop and mobile terminals | DB: SQLite\n- [Spyglass](https://www.spyglass.fyi/) ([repository](https://github.com/a5huynh/spyglass)) ![GitHub stars](https://img.shields.io/github/stars/a5huynh/spyglass.svg?style=social) | 🔭 A personal search engine that indexes what you want w/ a simple set of rules. | DB: SQLite\n- [todo-rs](https://github.com/anshulxyz/todo-rs/) | A TUI ToDo-app written in Rust using Cursive library and SeaORM for SQLite | DB: SQLite\n- [Warpgate](https://github.com/warp-tech/warpgate) ![GitHub stars](https://img.shields.io/github/stars/warp-tech/warpgate.svg?style=social) | Smart SSH bastion that works with any SSH client | DB: SQLite\n\n#### Audio and Music\n\n- [Deaftone](https://deaftone.org) ([repository](https://github.com/Ortygia/Deaftone)) | Lightweight music server. With a clean and simple API | DB: SQLite\n- [Music Player](https://github.com/tsirysndr/music-player) ![GitHub stars](https://img.shields.io/github/stars/tsirysndr/music-player.svg?style=social) | An extensible music server written in Rust 🚀🎵✨ | DB: SQLite\n\n#### Embedded\n\n- [rj45less-server](https://github.com/pmnxis/rj45less-server) | A simple unique number allocator for custom router | DB: SQLite\n\n### Programming Libraries\n\n- [logic-lock](https://github.com/nappa85/logic-lock) | MySQL logic locks implemented over sea-orm | DB: MySQL\n- [sea-orm-adapter](https://github.com/ZihanType/sea-orm-adapter) | Sea ORM adapter for casbin-rs | DB: MySQL, Postgres, SQLite\n- [symbols](https://github.com/nappa85/symbols) | A proc-macro utility to populates enum variants with primary keys values\n\n### Frameworks\n\n- [actix-admin](https://github.com/mgugger/actix-admin) | An admin panel for Actix Web built with Tera, HTMX and SeaOrm | DB: MySQL, Postgres, SQLite\n- [poem_admin](https://github.com/lingdu1234/poem_admin) | An admin panel built with poems, SeaORM and Vue 3. | DB: MySQL, Postgres, SQLite\n- [Loco.rs](https://github.com/loco-rs/loco) | A full stack Web and API productivity framework similar to Rails, based on SeaORM with db tooling and migrations code generation | DB: Postgres, SQLite\n- [tardis](https://github.com/ideal-world/tardis) | Elegant, Clean Rust development framework🛸 | DB: MySQL, Postgres, SQLite\n- [spring-rs](https://github.com/spring-rs/spring-rs) | A application framework written in rust inspired by java's spring-boot🍃 | DB: MySQL, Postgres, SQLite\n\n### Scaffolding\n\n- [actix-react-starter-template](https://github.com/aslamplr/actix-react-starter-template) | Actix Web + SeaORM + React + Redux + Redux Saga project starter template | DB: Postgres\n- [Adta](https://github.com/aaronleopold/adta) | Adta is **A**nother **D**amn **T**odo **A**pp, fun little side project | DB: MySQL, Postgres, SQLite\n- [Axum Book Management](https://github.com/lz1998/axum-book-management) | CRUD system of book-management with ORM and JWT for educational purposes | DB: MySQL\n- [BookStore](https://github.com/AfaanBilal/bookstore) | A bookstore manegement system HTTP REST API using Rocket, SeaORM and JWT. | DB: MySQL\n- [crud-rs](https://github.com/onichandame/crud-rs) | A framework combining async-graphql and SeaORM\n- [http-api-rs](https://github.com/daniel-samson/http-api-rs) | Template project for creating REST API's in rust with swagger ui\n- [oxide_todo](https://github.com/TheAwiteb/oxide_todo) | RESTful Todo built with Actix, swagger-ui and SeaORM, tested by rstest. | DB: SQLite\n- [Rust Async-GraphQL Example: Caster API](https://github.com/bkonkle/rust-example-caster-api) | A demo GraphQL API using Tokio, Warp, async-graphql, and SeaORM | DB: Postgres\n- [rust-juniper-playground](https://github.com/Yama-Tomo/rust-juniper-playground) | juniper with SeaORM example | DB: MySQL\n- [service_auth](https://github.com/shorii/service_auth) | A simple JWT authentication web-application | DB: Postgres\n- [Super Toolbox](https://github.com/atopx/toolbox) | micro-service best practices: use go-gin and rust-tonic | DB: mysql\n\n## Learning Resources\n\nIf you have an article, tutorial, podcast or video related to SeaORM and want to share it with the community, feel free to submit a PR and add it to the list below!\n\n- A video course on Axum and SeaORM: [Youtube Playlist](https://www.youtube.com/playlist?list=PLrmY5pVcnuE-_CP7XZ_44HN-mDrLQV4nS), [GitHub Code](https://github.com/brooks-builds/full-stack-todo-rust-course/tree/main/backend/rust/axum) by [\nBrooks Builds](https://github.com/brooks-builds)\n- Async GraphQL with Rust: [Part 1](https://konkle.us/async-graphql-rust-1-introduction/), [Part 2](https://konkle.us/async-graphql-with-rust-part-two/), [Part 3](https://konkle.us/async-graphql-with-rust-part-three/) by [Brandon Konkle](https://github.com/bkonkle)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.34765625,
          "content": "# Contributing to SeaORM\n\nThank you for taking the time to read this. First of all, star ALL our repos!\n\nSeaORM is a community driven project. We welcome you to participate, contribute and together build for SeaQL's future.\n\n## Code of Conduct\n\nThis project is governed by the [SeaQL Code of Conduct](https://github.com/SeaQL/.github/blob/master/CODE_OF_CONDUCT.md). By participating, you are expected to uphold this code.\n\n## I have a question\n\nIf you have a question to ask, please do not open an issue for it. It's quicker to ask us on [SeaQL Discord Server](https://discord.com/invite/uCPdDXzbdv) or open a [GitHub Discussion](https://docs.github.com/en/discussions/quickstart#creating-a-new-discussion) on the corresponding repository.\n\n## I need a feature\n\nFeature requests from anyone is definitely welcomed! Actually, since 0.2, many features are proposed and/or contributed by non-core members, e.g. [#105](https://github.com/SeaQL/sea-orm/issues/105), [#142](https://github.com/SeaQL/sea-orm/issues/142), [#252](https://github.com/SeaQL/sea-orm/issues/252), with various degrees of involvement. We will implement feature proposals if it benefits everyone, but of course code contributions will more likely be accepted.\n\n## I want to support\n\nAwesome! The best way to support us is to recommend it to your classmates/colleagues/friends, write blog posts and tutorials on SeaQL projects and help out other users in the community. It is difficult enough to keep an open source afloat, so every little help matters, especially if it can directly/indirectly lighten the core team's mental load.\n\n## I want to join\n\nWe are always looking for long-term contributors. If you want to commit longer-term to SeaQL's open source effort, definitely talk with us! There may be various forms of \"grant\" to compensate for your devotion. Although at this stage we are not resourceful enough to offer a stable stream of income to contributors.\n\n## I want to sponsor\n\nIf you don't have time to contribute but would like to support the organization, a financial contribution via [GitHub sponsor](https://github.com/sponsors/SeaQL) is a great way to support us.\n\n## I want to setup my machine for development and testing\n\nThanks for the time and effort to compose a PR! You are always welcomed to contact us via [Discord](https://discord.com/invite/uCPdDXzbdv) or GitHub if you need any help when contributing. Feel free to open draft PR and ask for review and guidance.\n\n### Unit Test\n\nWithout involving a live database, you can run unit tests on your machine with the command below:\n\n- Unit testing `sea-orm`, `sea-orm-macros`, `sea-orm-codegen`\n    ```sh\n    cargo test --workspace\n    ```\n- Unit testing `sea-orm-cli`\n    ```sh\n    cargo test --manifest-path sea-orm-cli/Cargo.toml\n    ```\n- Unit testing `sea-orm-rocket`\n    ```sh\n    cargo test --manifest-path sea-orm-rocket/Cargo.toml\n    ```\n\n### Integration Test\n\nNext, if you want to run integration tests on a live database. We recommend using Docker to spawn your database instance, you can refer to [this](build-tools/docker-compose.yml) docker compose file for reference.\n\nRunning integration tests on a live database:\n- SQLite\n    ```sh\n    DATABASE_URL=\"sqlite::memory:\" cargo test --all --features default,sqlx-sqlite,runtime-async-std-native-tls\n    ```\n- MySQL / MariaDB\n    ```sh\n    DATABASE_URL=\"mysql://root:root@localhost\" cargo test --all --features default,sqlx-mysql,runtime-async-std-rustls\n    ```\n- PostgreSQL\n    ```sh\n    DATABASE_URL=\"postgres://root:root@localhost\" cargo test --all --features default,sqlx-postgres,runtime-async-std-native-tls\n    ```\n\n### Running `sea-orm-cli` from source code\n\nYou can either run the follow command at root:\n\n```sh\ncargo run --manifest-path sea-orm-cli/Cargo.toml -- <command & arguments for sea-orm-cli>\n# E.g.\ncargo run --manifest-path sea-orm-cli/Cargo.toml -- migrate init\n```\n\nOr, you `cd` into `sea-orm-cli` directory and simply execute:\n\n```sh\ncargo run -- <command & arguments for sea-orm-cli>\n# E.g.\ncargo run -- migrate init\n```\n\n### Installing `sea-orm-cli` from source code\n\nYou can either run the follow command at root:\n\n```sh\ncargo install --force --path sea-orm-cli\n```\n\nOr, you `cd` into `sea-orm-cli` directory and simply execute:\n\n```sh\ncargo install --force --path .\n```\n\nOr, you install `sea-orm-cli` from GitHub:\n\n```sh\ncargo install sea-orm-cli --force --git https://github.com/SeaQL/sea-orm --branch <GIT_BRANCH>\n```\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 5.158203125,
          "content": "[workspace]\nmembers = [\".\", \"sea-orm-macros\", \"sea-orm-codegen\"]\n\n[package]\nname = \"sea-orm\"\nversion = \"1.1.4\"\nauthors = [\"Chris Tsang <chris.2y3@outlook.com>\"]\nedition = \"2021\"\ndescription = \"🐚 An async & dynamic ORM for Rust\"\nlicense = \"MIT OR Apache-2.0\"\nhomepage = \"https://www.sea-ql.org/SeaORM\"\ndocumentation = \"https://docs.rs/sea-orm\"\nrepository = \"https://github.com/SeaQL/sea-orm\"\ncategories = [\"database\"]\nkeywords = [\"async\", \"orm\", \"mysql\", \"postgres\", \"sqlite\"]\nrust-version = \"1.81\"\n\n[package.metadata.docs.rs]\nfeatures = [\"default\", \"sqlx-all\", \"mock\", \"proxy\", \"runtime-async-std-native-tls\", \"postgres-array\", \"sea-orm-internal\"]\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n\n[lib]\nname = \"sea_orm\"\npath = \"src/lib.rs\"\n\n[dependencies]\nasync-stream = { version = \"0.3\", default-features = false }\nasync-trait = { version = \"0.1\", default-features = false }\nchrono = { version = \"0.4.30\", default-features = false, optional = true }\ntime = { version = \"0.3.36\", default-features = false, optional = true }\nfutures = { version = \"0.3\", default-features = false, features = [\"std\"] }\nlog = { version = \"0.4\", default-features = false }\ntracing = { version = \"0.1\", default-features = false, features = [\"attributes\", \"log\"] }\nrust_decimal = { version = \"1\", default-features = false, optional = true }\nbigdecimal = { version = \"0.4\", default-features = false, optional = true }\nsea-orm-macros = { version = \"~1.1.4\", path = \"sea-orm-macros\", default-features = false, features = [\"strum\"] }\nsea-query = { version = \"0.32.1\", default-features = false, features = [\"thread-safe\", \"hashable-value\", \"backend-mysql\", \"backend-postgres\", \"backend-sqlite\"] }\nsea-query-binder = { version = \"0.7.0\", default-features = false, optional = true }\nstrum = { version = \"0.26\", default-features = false }\nserde = { version = \"1.0\", default-features = false }\nserde_json = { version = \"1.0\", default-features = false, optional = true }\nsqlx = { version = \"0.8.2\", default-features = false, optional = true }\nuuid = { version = \"1\", default-features = false, optional = true }\nouroboros = { version = \"0.18\", default-features = false }\nurl = { version = \"2.2\", default-features = false }\nthiserror = { version = \"1\", default-features = false }\n\n[dev-dependencies]\nsmol = { version = \"1.2\" }\nsmol-potat = { version = \"1.1\" }\nasync-std = { version = \"1\", features = [\"attributes\", \"tokio1\"] }\nfutures = { version = \"0.3\" }\ntokio = { version = \"1.6\", features = [\"full\"] }\nactix-rt = { version = \"2.2.0\" }\nmaplit = { version = \"1\" }\ntracing-subscriber = { version = \"0.3.17\", features = [\"env-filter\"] }\nsea-orm = { path = \".\", features = [\"mock\", \"debug-print\", \"tests-cfg\", \"postgres-array\", \"sea-orm-internal\"] }\npretty_assertions = { version = \"0.7\" }\ntime = { version = \"0.3.36\", features = [\"macros\"] }\nuuid = { version = \"1\", features = [\"v4\"] }\nonce_cell = \"1.8\"\narraystring = \"0.3\"\ndotenv = \"0.15\"\n\n[features]\ndebug-print = []\ndefault = [\n    \"macros\",\n    \"with-json\",\n    \"with-chrono\",\n    \"with-rust_decimal\",\n    \"with-bigdecimal\",\n    \"with-uuid\",\n    \"with-time\",\n]\nmacros = [\"sea-orm-macros/derive\"]\nmock = []\nproxy = [\"serde_json\", \"serde/derive\"]\nwith-json = [\"serde_json\", \"sea-query/with-json\", \"chrono?/serde\", \"rust_decimal?/serde\", \"bigdecimal?/serde\", \"uuid?/serde\", \"time?/serde\", \"sea-query-binder?/with-json\", \"sqlx?/json\"]\nwith-chrono = [\"chrono\", \"sea-query/with-chrono\", \"sea-query-binder?/with-chrono\", \"sqlx?/chrono\"]\nwith-rust_decimal = [\"rust_decimal\", \"sea-query/with-rust_decimal\", \"sea-query-binder?/with-rust_decimal\", \"sqlx?/rust_decimal\"]\nwith-bigdecimal = [\"bigdecimal\", \"sea-query/with-bigdecimal\", \"sea-query-binder?/with-bigdecimal\", \"sqlx?/bigdecimal\"]\nwith-uuid = [\"uuid\", \"sea-query/with-uuid\", \"sea-query-binder?/with-uuid\", \"sqlx?/uuid\"]\nwith-time = [\"time\", \"sea-query/with-time\", \"sea-query-binder?/with-time\", \"sqlx?/time\"]\npostgres-array = [\"sea-query/postgres-array\", \"sea-query-binder?/postgres-array\", \"sea-orm-macros/postgres-array\"]\njson-array = [\"postgres-array\"] # this does not actually enable sqlx-postgres, but only a few traits to support array in sea-query\nsea-orm-internal = []\nsqlx-dep = []\nsqlx-all = [\"sqlx-mysql\", \"sqlx-postgres\", \"sqlx-sqlite\"]\nsqlx-mysql = [\"sqlx-dep\", \"sea-query-binder/sqlx-mysql\", \"sqlx/mysql\"]\nsqlx-postgres = [\"sqlx-dep\", \"sea-query-binder/sqlx-postgres\", \"sqlx/postgres\", \"postgres-array\"]\nsqlx-sqlite = [\"sqlx-dep\", \"sea-query-binder/sqlx-sqlite\", \"sqlx/sqlite\"]\nsqlite-use-returning-for-3_35 = []\nruntime-async-std = [\"sqlx?/runtime-async-std\"]\nruntime-async-std-native-tls = [\"sqlx?/runtime-async-std-native-tls\", \"runtime-async-std\"]\nruntime-async-std-rustls = [\"sqlx?/runtime-async-std-rustls\", \"runtime-async-std\"]\nruntime-actix = [\"sqlx?/runtime-tokio\"]\nruntime-actix-native-tls = [\"sqlx?/runtime-tokio-native-tls\", \"runtime-actix\"]\nruntime-actix-rustls = [\"sqlx?/runtime-tokio-rustls\", \"runtime-actix\"]\nruntime-tokio = [\"sqlx?/runtime-tokio\"]\nruntime-tokio-native-tls = [\"sqlx?/runtime-tokio-native-tls\", \"runtime-tokio\"]\nruntime-tokio-rustls = [\"sqlx?/runtime-tokio-rustls\", \"runtime-tokio\"]\ntests-cfg = [\"serde/derive\"]\nseaography = [\"sea-orm-macros/seaography\"]\n\n# This allows us to develop using a local version of sea-query\n# [patch.crates-io]\n# sea-query = { path = \"../sea-query\" }\n"
        },
        {
          "name": "DESIGN.md",
          "type": "blob",
          "size": 1.9970703125,
          "content": "# Design\n\nWe are heavily inspired by ActiveRecord, Eloquent and TypeORM.\n\n1. Intuitive and ergonomic\n\nAPI should state the intention clearly. Provide syntax sugar for common things.\n\n2. Fast(er) compilation\n\nBalance between compile-time checking and compilation speed.\n\n3. Avoid 'symbol soup'\n\nAvoid macros with DSL, use derive macros where appropriate. Be friendly with IDE tools.\n\n## Test Time\n\nAfter some bitterness we realized it is not possible to capture everything at compile time. But we don't \nwant to encounter problems at run time either. The solution is to perform checking at 'test time' to\nuncover problems. These checks will be removed at production so there will be no run time penalty.\n\n## API style\n\n### Turbofish and inference\n\nConsider the following method:\n```rust\nfn left_join<E>(self) -> Self\nwhere\n    E: EntityTrait,\n{\n    // ...\n}\n```\nwhich has to be invoked like:\n```rust\n.left_join::<fruit::Entity>()\n```\n\nIf we instead do:\n```rust\nfn left_join<E>(self, _: E) -> Self\nwhere\n    E: EntityTrait,\n{\n    // ...\n}\n```\nthen the Turbofish can be omitted:\n```rust\n.left_join(fruit::Entity)\n```\nprovided that `fruit::Entity` is a unit struct.\n\n### Builder pattern\n\nInstead of:\n```rust\nfn has_many(entity: Entity, from: Column, to: Column);\n\nhas_many(cake::Entity, cake::Column::Id, fruit::Column::CakeId)\n```\n\nwe'd prefer having a builder and stating the params explicitly:\n```rust\nhas_many(cake::Entity).from(cake::Column::Id).to(fruit::Column::CakeId)\n```\n\n### Method overloading\n\nConsider the following two methods, which accept the same parameter but in different forms:\n\n```rust\nfn method_with_model(m: Model) { ... }\nfn method_with_active_model(a: ActiveModel) { ... }\n```\n\nWe would define a trait\n\n```rust\npub trait IntoActiveModel {\n    fn into_active_model(self) -> ActiveModel;\n}\n```\n\nSuch that `Model` and `ActiveModel` both impl this trait.\n\nIn this way, we can overload the two methods:\n\n```rust\npub fn method<A>(a: A)\nwhere\n    A: IntoActiveModel,\n{\n    let a: ActiveModel = a.into_active_model();\n    ...\n}\n```\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.591796875,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0419921875,
          "content": "Copyright (c) 2023 Seafire Software Limited\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.5205078125,
          "content": "<div align=\"center\">\n\n  <img src=\"https://www.sea-ql.org/SeaORM/img/SeaORM banner.png\"/>\n\n  <h1>SeaORM</h1>\n\n  <h3>🐚 An async & dynamic ORM for Rust</h3>\n\n  [![crate](https://img.shields.io/crates/v/sea-orm.svg)](https://crates.io/crates/sea-orm)\n  [![docs](https://docs.rs/sea-orm/badge.svg)](https://docs.rs/sea-orm)\n  [![build status](https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml/badge.svg)](https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml)\n\n</div>\n\n# SeaORM\n\n#### SeaORM is a relational ORM to help you build web services in Rust with the familiarity of dynamic languages.\n\n[![GitHub stars](https://img.shields.io/github/stars/SeaQL/sea-orm.svg?style=social&label=Star&maxAge=1)](https://github.com/SeaQL/sea-orm/stargazers/)\nIf you like what we do, consider starring, sharing and contributing!\n\nPlease help us with maintaining SeaORM by completing the [SeaQL Community Survey 2024](https://sea-ql.org/community-survey)!\n\n[![Discord](https://img.shields.io/discord/873880840487206962?label=Discord)](https://discord.com/invite/uCPdDXzbdv)\nJoin our Discord server to chat with other members of the SeaQL community!\n\n## Getting Started\n\n+ [Documentation](https://www.sea-ql.org/SeaORM)\n+ [Tutorial](https://www.sea-ql.org/sea-orm-tutorial)\n+ [Cookbook](https://www.sea-ql.org/sea-orm-cookbook)\n\nIntegration examples:\n\n+ [Actix v4 Example](https://github.com/SeaQL/sea-orm/tree/master/examples/actix_example)\n+ [Axum Example](https://github.com/SeaQL/sea-orm/tree/master/examples/axum_example)\n+ [GraphQL Example](https://github.com/SeaQL/sea-orm/tree/master/examples/graphql_example)\n+ [jsonrpsee Example](https://github.com/SeaQL/sea-orm/tree/master/examples/jsonrpsee_example)\n+ [Loco TODO Example](https://github.com/SeaQL/sea-orm/tree/master/examples/loco_example) / [Loco REST Starter](https://github.com/SeaQL/sea-orm/tree/master/examples/loco_starter)\n+ [Poem Example](https://github.com/SeaQL/sea-orm/tree/master/examples/poem_example)\n+ [Rocket Example](https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_example) / [Rocket OpenAPI Example](https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_okapi_example)\n+ [Salvo Example](https://github.com/SeaQL/sea-orm/tree/master/examples/salvo_example)\n+ [Tonic Example](https://github.com/SeaQL/sea-orm/tree/master/examples/tonic_example)\n+ [Seaography Example](https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example)\n\n## Features\n\n1. Async\n\n    Relying on [SQLx](https://github.com/launchbadge/sqlx), SeaORM is a new library with async support from day 1.\n\n2. Dynamic\n\n    Built upon [SeaQuery](https://github.com/SeaQL/sea-query), SeaORM allows you to build complex dynamic queries.\n\n3. Testable\n\n    Use mock connections and/or SQLite to write tests for your application logic.\n\n4. Service Oriented\n\n    Quickly build services that join, filter, sort and paginate data in REST, GraphQL and gRPC APIs.\n\n## A quick taste of SeaORM\n\n### Entity\n```rust\nuse sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = \"cake\")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub name: String,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(has_many = \"super::fruit::Entity\")]\n    Fruit,\n}\n\nimpl Related<super::fruit::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Fruit.def()\n    }\n}\n```\n\n### Select\n```rust\n// find all models\nlet cakes: Vec<cake::Model> = Cake::find().all(db).await?;\n\n// find and filter\nlet chocolate: Vec<cake::Model> = Cake::find()\n    .filter(cake::Column::Name.contains(\"chocolate\"))\n    .all(db)\n    .await?;\n\n// find one model\nlet cheese: Option<cake::Model> = Cake::find_by_id(1).one(db).await?;\nlet cheese: cake::Model = cheese.unwrap();\n\n// find related models (lazy)\nlet fruits: Vec<fruit::Model> = cheese.find_related(Fruit).all(db).await?;\n\n// find related models (eager)\nlet cake_with_fruits: Vec<(cake::Model, Vec<fruit::Model>)> =\n    Cake::find().find_with_related(Fruit).all(db).await?;\n\n```\n### Insert\n```rust\nlet apple = fruit::ActiveModel {\n    name: Set(\"Apple\".to_owned()),\n    ..Default::default() // no need to set primary key\n};\n\nlet pear = fruit::ActiveModel {\n    name: Set(\"Pear\".to_owned()),\n    ..Default::default()\n};\n\n// insert one\nlet pear = pear.insert(db).await?;\n\n// insert many\nFruit::insert_many([apple, pear]).exec(db).await?;\n```\n### Update\n```rust\nuse sea_orm::sea_query::{Expr, Value};\n\nlet pear: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet mut pear: fruit::ActiveModel = pear.unwrap().into();\n\npear.name = Set(\"Sweet pear\".to_owned());\n\n// update one\nlet pear: fruit::Model = pear.update(db).await?;\n\n// update many: UPDATE \"fruit\" SET \"cake_id\" = NULL WHERE \"fruit\".\"name\" LIKE '%Apple%'\nFruit::update_many()\n    .col_expr(fruit::Column::CakeId, Expr::value(Value::Int(None)))\n    .filter(fruit::Column::Name.contains(\"Apple\"))\n    .exec(db)\n    .await?;\n\n```\n### Save\n```rust\nlet banana = fruit::ActiveModel {\n    id: NotSet,\n    name: Set(\"Banana\".to_owned()),\n    ..Default::default()\n};\n\n// create, because primary key `id` is `NotSet`\nlet mut banana = banana.save(db).await?;\n\nbanana.name = Set(\"Banana Mongo\".to_owned());\n\n// update, because primary key `id` is `Set`\nlet banana = banana.save(db).await?;\n\n```\n### Delete\n```rust\n// delete one\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\nfruit::Entity::delete(orange.into_active_model())\n    .exec(db)\n    .await?;\n\n// or simply\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\norange.delete(db).await?;\n\n// delete many: DELETE FROM \"fruit\" WHERE \"fruit\".\"name\" LIKE 'Orange'\nfruit::Entity::delete_many()\n    .filter(fruit::Column::Name.contains(\"Orange\"))\n    .exec(db)\n    .await?;\n\n```\n\n## 🧭 Seaography: instant GraphQL API\n\n[Seaography](https://github.com/SeaQL/seaography) is a GraphQL framework built on top of SeaORM. Seaography allows you to build GraphQL resolvers quickly. With just a few commands, you can launch a GraphQL server from SeaORM entities!\n\nLook at the [Seaography Example](https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example) to learn more.\n\n<img src=\"https://raw.githubusercontent.com/SeaQL/sea-orm/master/examples/seaography_example/Seaography%20example.png\"/>\n\n## 🖥️ Admin Dashboard\n\nMaking use of Seaography, it will be a breeze to create admin dashboard with your favourite frontend framework. Check out our examples and tutorials:\n\n1. [React Admin Example](https://github.com/SeaQL/sea-orm/tree/master/examples/react_admin)\n1. [Adding GraphQL Support to Loco with Seaography](https://www.sea-ql.org/blog/2024-07-01-graphql-support-with-loco-seaography/)\n1. [GraphQL based Admin Dashboard with Loco and Seaography](https://www.sea-ql.org/blog/2024-08-08-graphql-admin-dashboard-with-loco-seaography/)\n\n<img src=\"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20Dashboard%20Demo.png\"/>\n\n## Learn More\n\n1. [Design](https://github.com/SeaQL/sea-orm/tree/master/DESIGN.md)\n1. [Architecture](https://www.sea-ql.org/SeaORM/docs/internal-design/architecture/)\n1. [Engineering](https://www.sea-ql.org/blog/2022-07-30-engineering/)\n1. [Change Log](https://github.com/SeaQL/sea-orm/tree/master/CHANGELOG.md)\n\n### Who's using SeaORM?\n\nSee [Built with SeaORM](https://github.com/SeaQL/sea-orm/blob/master/COMMUNITY.md#built-with-seaorm). Feel free to [submit yours](https://github.com/SeaQL/sea-orm/issues/403)!\n\n## License\n\nLicensed under either of\n\n-   Apache License, Version 2.0\n    ([LICENSE-APACHE](LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n-   MIT license\n    ([LICENSE-MIT](LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\nat your option.\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\nWe invite you to participate, contribute and together help build Rust's future.\n\nA big shout out to our contributors!\n\n[![Contributors](https://opencollective.com/sea-orm/contributors.svg?width=1000&button=false)](https://github.com/SeaQL/sea-orm/graphs/contributors)\n\n## Sponsorship\n\n[SeaQL.org](https://www.sea-ql.org/) is an independent open-source organization run by passionate developers. If you enjoy using our libraries, please star and share our repositories. If you feel generous, a small donation via [GitHub Sponsor](https://github.com/sponsors/SeaQL) will be greatly appreciated, and goes a long way towards sustaining the organization.\n\n### Gold Sponsors\n\n<a href=\"https://osmos.io/\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://www.sea-ql.org/static/sponsors/Osmos-dark.svg\">\n    <img src=\"https://www.sea-ql.org/static/sponsors/Osmos.svg\" width=\"240\">\n  </picture>\n</a>\n\n### Silver Sponsors\n\n<table><tr>\n<td><a href=\"https://www.digitalocean.com/\">\n  <img src=\"https://www.sea-ql.org/static/sponsors/DigitalOcean.svg\" width=\"125\">\n</a></td>\n\n<td><a href=\"https://www.jetbrains.com/\">\n  <img src=\"https://www.sea-ql.org/static/sponsors/JetBrains.svg\" width=\"125\">\n</a></td>\n</tr></table>\n\nWe’re immensely grateful to our sponsors: Osmos, for their gold-tier sponsorship and trust in the tools we develop. Digital Ocean, for sponsoring our servers. And JetBrains, for sponsoring our IDE.\n\n## Mascot\n\nA friend of Ferris, Terres the hermit crab is the official mascot of SeaORM. His hobby is collecting shells.\n\n<img alt=\"Terres\" src=\"https://www.sea-ql.org/SeaORM/img/Terres.png\" width=\"400\"/>\n"
        },
        {
          "name": "build-tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "issues",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.03125,
          "content": "format_code_in_doc_comments=true"
        },
        {
          "name": "sea-orm-cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "sea-orm-codegen",
          "type": "tree",
          "content": null
        },
        {
          "name": "sea-orm-macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "sea-orm-migration",
          "type": "tree",
          "content": null
        },
        {
          "name": "sea-orm-rocket",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}