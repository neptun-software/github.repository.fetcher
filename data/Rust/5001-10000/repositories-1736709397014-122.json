{
  "metadata": {
    "timestamp": 1736709397014,
    "page": 122,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "makepad/makepad",
      "stars": 5234,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6767578125,
          "content": "# Generated by Cargo\n# will have compiled files and executables\n**/target/\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\nCargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n.DS_Store\n/platform/bind/windows/generate\n\n/edit_repo\n\n*.bat\nmandelbrot_presets.json\nmakepad_settings.ron\nmakepad_state*.ron\nkey.ron\n.vscode\nrustc*.txt\n\nOPENAI_KEY\n\n/local\n\n/tools/cargo_makepad/android_*\n/tools/cargo_makepad/ios-deploy/_Frameworks/\n/tools/cargo_makepad/ios-deploy/build/\n*.fish\nexperiments/websocket-windows/nodejs-websocketserver\nexperiments/svgloader\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.6904296875,
          "content": "workspace.members = [\n    # === experiments ===\n    # \"experiments/dual-contouring\",\n    # \"experiments/emoji\",\n    # \"experiments/esp-peer-0\",\n    # \"experiments/esp-peer-1\",\n    # \"experiments/esp-peer-2\",\n    # \"experiments/esp-peer-3\",\n    # \"experiments/esp-peer-4\",\n    # \"experiments/windsim\",\n    # \"experiments/esp-term\",\n    # \"experiments/esp_chat\",\n    # \"experiments/esp_car\",\n    \"experiments/homescreens\",\n    \"experiments/html_experiment\",\n    # \"experiments/bigfish\",\n    \"experiments/teamtalk\",\n    \"experiments/huedmx\",\n    \"experiments/sdxl_remote\",\n    # === examples ===\n    # \"examples/bare_text\",\n    # \"examples/fractal_zoom\",\n    \"examples/ui_zoo\",\n    \"examples/ai_docs\",\n    \"examples/news_feed\",\n    #\"examples/floating_elements\",\n    # \"examples/bare_text\",\n    \"examples/hello_widgets\",\n    \"examples/web_cam\",\n    \"examples/ironfish\",\n    \"examples/simple\",\n    \"examples/text_flow\",\n    \"examples/simple\",\n    \"examples/simple_shader\",\n    \"examples/chatgpt\",\n    \"examples/sdxl\",\n    \"examples/slides\",\n    #\"examples/graph\",\n    #\"examples/image_viewer\",\n    \"studio\",\n    # \"makepad_wonderous\",\n    # \"complex_layout\",\n    # \"comp_demo\",\n    \"tools/cargo_makepad\",\n    \"tools/auto_version\",\n]\n\nworkspace.exclude = [\n    \"code_editor\",\n    \"libs/stitch\",\n    \"libs/futures\",\n    \"libs/wasm_bridge/test\",\n    \"experiments/websocket-tcpstream\",\n    \"experiments/websocket-windows\",\n    \"experiments/svgloader\",\n    \"experiments/empty\",\n    \"tools/windows_strip\",\n    \"tools/video_mixer\",\n    \"tools/web_server\",\n    \"tools/file_router\",\n    \"tools/wasm_strip\",\n]\n\nworkspace.resolver = \"2\"\n#debug = true\n\n[profile.small]\ninherits = \"release\"\n#debug = true\nopt-level = 'z'   # Optimize for size\nlto = true        # Enable link-time optimization\ncodegen-units = 1 # Reduce number of codegen units to increase optimizations\npanic = 'abort'   # Abort on panic\nstrip = true\n\n\n#[profile.dev.package.makepad-live-tokenizer]\n#opt-level = 3\n#[profile.dev.package.makepad-live-compiler]\n#opt-level = 3\n#[profile.dev.package.makepad-shader-compiler]\n#opt-level = 3\n#[profile.dev.package.makepad-platform]\n#opt-level = 3\n#[profile.dev.package.makepad-draw]\n#opt-level = 3\n#[profile.dev.package.makepad-vector]\n#opt-level = 3\n#[profile.dev.package.rustybuzz]\n#opt-level = 3\n#[profile.dev.package.bitflags]\n#opt-level = 3\n#[profile.dev.package.bytemuck]\n#opt-level = 3\n#[profile.dev.package.smallvec]\n#opt-level = 3\n#[profile.dev.package.unicode-bidi-mirroring]\n#opt-level = 3\n#[profile.dev.package.unicode-ccc]\n#opt-level = 3\n#[profile.dev.package.unicode-properties]\n#opt-level = 3\n#[profile.dev.package.unicode-script]\n#opt-level = 3\n#[profile.dev.package.unicode-bidi]\n#opt-level = 3\n#[profile.dev.package.ttf-parser]\n#opt-level = 3\n"
        },
        {
          "name": "Icon_Settings.svg",
          "type": "blob",
          "size": 0.5419921875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 286 286\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <rect id=\"Icon_Settings\" x=\"0.337\" y=\"0.575\" width=\"284.734\" height=\"284.734\" style=\"fill:none;\"/>\n</svg>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2023 Makepad B.V.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.8056640625,
          "content": "## Contact\n\nRik Arends: @rikarends on twitter, https://fosstodon.org/@rikarends#\n\nEddy Bruel: @ejpbruel on twitter\n\nSebastian Michailidis: @SebMichailidis on twitter\n\nOur discord channel for Makepad:\nhttps://discord.gg/adqBRq7Ece\n\nMost recent talk about makepad: https://www.youtube.com/watch?v=rC4FCS-oMpg\n\n# Makepad\n\n## Overview\n\nThis is the repository for Makepad, a new way to build UIs in Rust for both native and the web.\n\nMakepad consists of Makepad Framework and Makepad Studio.\n\nMakepad Framework is our UI framework. It consists of multiple crates, but the top level crate is [makepad-widgets](https://crates.io/crates/makepad-widgets). For a further explanation of Makepad Framework, please see the README for that crate.\n\nMakepad Studio is a prototype of an IDE that we've built using Makepad Framework. It's still under heavy development, but our eventual goal with Makepad Studio is to create an IDE that enables the design of an application to be changed at runtime. The main crate for Makepad Studio is [makepad-studio](https://crates.io/crates/makepad-studio). Please see the README for that crate for more.\n\nDemo links:\n\n[makepad-example-fractal-zoom](https://makepad.nl/makepad/examples/fractal_zoom/src/index.html)\n\n[makepad-example-ironfish](https://makepad.nl/makepad/examples/ironfish/src/index.html)\n\n[makepad-example-simple](https://makepad.nl/makepad/examples/simple/src/index.html)\n\n\n### Prerequisites\n\nTo build the Makepad crates you first need to install Rust.\n[https://www.rust-lang.org/tools/install](https://www.rust-lang.org/tools/install)\n\nOur native builds work on the stable Rust toolchain. However, some of the errors generated by Makepad at runtime (particulary those originating in our DSL) do not contain line information unless you use the nightly Rust toolchain. Moreover, our web builds only work on nightly for now. For this reason, we recommend that you build Makepad using the nightly Rust toolchain.\n\nFor the non standard build targets (apple ios, apple tvos, android, wasm) we have a buildtool called 'cargo-makepad' that you need to install.\n\nInstall it from a local clone of the [repo](https://github.com/makepad/makepad):\n\n```cargo install --path=./tools/cargo_makepad```\n\nOr install it from crates.io (the last published version, it may be older than the repo):\n\n```cargo install cargo-makepad```\n\nThe way how you've installed `cargo-makepad` will affect how you will install Makepad studio, if you\nchoose to use it (more later).\n\nNow this tool can be used to install toolchains per platform needed\n\n```cargo makepad wasm install-toolchain```\n\n```cargo makepad apple ios install-toolchain```\n\n```cargo makepad apple tvos install-toolchain```\n\n\n```cargo makepad android --abi=all install-toolchain```\n\n## Running makepad studio\n\nMakepad studio allows you to easily build and view the examples, and it uses cargo-makepad internally so be sure to install cargo-makepad as shown above.\n\nIf you've installed `cargo-makepad` from a local clone of the repo, then either\n- build & run Makepad studio from the local clone:\n  \n  ```cargo run -p makepad-studio --release```\n- or install `makepad-studio` from the local clone:\n  \n  ```cargo install --path=./studio```\n\nOr install it from crates.io (the last published version, it may be older than the repo)::\n\n```cargo install makepad-studio```\n\nIf you build the wasm applications, you can open it on:\n\n<http://127.0.0.1:8010>\n\n## Build & Run Commands\n\n[Makepad](https://github.com/makepad/makepad) is a cross-platform UI framework written in Rust.\nIt is in active development, but is already usable to build quick prototypes and simple (or even complicated UI) applications.\n\nOne of the key features of the Makepad is its ability to simply, and quickly, build and run applications on multiple platforms, including MacOS, Windows, Linux, Android, iOS, and WebAssembly.\n\nHere are the current/latest instructions on how to build and run Makepad applications on the different platforms.\n\n## Assumptions\n\nWe will assume the following:\nName of application: **`makepad-example-simple`**\n\nIt can be changed to any one of the existing example apps in the [*Makepad* examples folder](https://github.com/makepad/makepad//tree/master/examples).\n\n## Build & Run Instructions\n\nFollow step 1 commands below for initial setup of the Makepad build and run environment.\nAfter step 2, you may choose any one or more of the platforms you're interested in building for.\n\n## 1. Setup Makepad\n\nReplace `projects` with your own directory name.\n\n```bash\ncd ~/projects\n```\n\n### Clone the Makepad repository\n\n```bash\ngit clone https://github.com/makepad/makepad.git\n```\n\nor\n\n```bash\ngit clone git@github.com:makepad/makepad.git\n```\n\n### Change to latest 'rik' branch (Optional)\n\n```bash\ncd ~/projects/makepad\ngit branch rik\n```\n\n### Install makepad subcommand for cargo\n\n```bash\ncd ~/projects/makepad\ncargo install --path ./tools/cargo_makepad\n```\n\n### Install platform toolchains\n\n```bash\nrustup toolchain install nightly\n```\n\n## 2. Go To Examples folder (Optional)\n\n```bash\ncd ~/projects/makepad/examples\nls -l\n```\n\nAll examples in this directory have the application name of `makepad-example-` prefix plus the name of directory.\n\n## 3. MacOS / PC\n\nRunning on Desktop is the quickest way to try out an example app.\n\n```bash\ncd ~/projects/makepad/examples/simple\ncargo run\n```\n\nor\n\n```bash\ncd ~/projects/makepad\ncargo run -p makepad-example-simple\n```\n\nAnd there should be a desktop application window now running (may need to click on the icon on MacOS's Dock to show it)\n\n## 4. Android Build\n\n### Install Android toolchain (First time)\n\n```bash\ncargo makepad android install-toolchain\n```\n\n### Install app on Android device or Android emulator\n\nOpen either the Android emulator or connect to a real Android device\nuse `adb` command to make sure there's a single device connected properly, then install and run as below:\n\n```bash\ncd ~/projects/makepad\ncargo makepad android run -p makepad-example-simple --release\n```\n\nThe application will be installed and launch on either the emulator or device.\n\n## 5. iOS Setup & Install\n\n### Install iOS toolchain (First time)\n\n```bash\nxcode-select --install\ncargo makepad apple ios install-toolchain\n```\n\n### Install app on Apple devivce or iOS simulator\n\n### iOS Setup\n\nFor iOS, the process is slightly more complicated. The steps involved are:\n\n1. Enable your iPhone's Developer Mode, please see instructions here: [Enable Developer Mode](https://www.delasign.com/blog/how-to-turn-on-developer-mode-on-an-iphone/)\n1. Setup an Apple Developer account\n1. Setup an empty skeleton project in XCode\n    1. File -> New -> Project to create a new \"App\"\n    1. Set the Product Name as **`makepad-example-simple`** (used in --app later)\n    1. Set the Organization Identifier to a value of your choice, for this example we will use **`my.test`** (used in --org later)\n    1. Setup the Project Signing & Capabilities to select the proper team account\n1. In XCode, Build/Run this project to install and run the app on the simulator and device\n1. Once the simulator and device has the \"skeleton\" app installed and running properly, then it is ready for Makepad to install its application.\n\n### Makepad Install\n\nWe will run the `cargo makepad apple ios` command, similar to Android build above, but there are some 2 to 6 additional parameters that need to be filled in:\n\n**`--org`**\n\nFirst few parts of the organization identifier. Usually in the form of *com.somecompany* or *org.orgname*, etc.\nThis is the same value used to setup the initial skeleton app above. For this example:\n> `my.test`\n\n**`--app`**\n\nThe name of the application or the project. This is the same as the Product Name used to setup the initial skeleton app above. In this case:\n> `makepad-example-simple`\n\n### Install app on iOS simulator\n\n```bash\ncd ~/projects/makepad\ncargo makepad apple ios \\\n  --org=my.test \\\n  --app=makepad-example-simple \\\n  run-sim -p makepad-example-simple --release\n```\n\n### Install app on iOS device\n\nFor installing on real device, the process is more involved due to possibility of multiple profiles and signing identities and target devices. For this reason, Makepad provides a list command to show all the local provisioning profiles, signing identities and connected devices, which can be used as the value for the subsequent command arguments.\n\nFor example, first run the following command:\n\n```bash\ncd ~/projects/makepad\ncargo makepad apple list\n```\n\nThis command will print out the list of all provisioning profiles, signing identities, and device identifiers on the current system. The user has to decide and choose the ones that he/she needs to use for each type.\n\nOnce decided, run the folloiwng command and fill in the **unique starting characters** chosen from the output.\n\n```bash\ncargo makepad apple ios \\\n --profile=unique-starting-hex-string-of-provisioning-profiles \\\n --cert=UNIQUE_STARTING_HEX_STRING-of-signing-certificates \\\n --device-identifier=UNIQUE-STARTING-HEX-STRING-of-devices \\\n --org=my.test \\\n --app=makepad-example-simple \\\n run-device -p makepad-example-simple –release\n \n```\n\nThe application will be installed and launched on either the emulator or real device. (Make sure the device is connected and unlocked)\n\n## 6. WASM Build\n\nRunning the Makepad application as a WASM build is as simple as a single command. The sript will automatically generate the necessary index.html and other files and also start a local webserver at port 8010. After running the command below, just open your browser to <http://127.0.0.1:8010/> in order for the app to load and run.\n\n### Install WASM toolchain (First time)\n\n```bash\ncargo makepad wasm install-toolchain\n```\n\n### Install app as WASM binary for browsers\n\n```bash\ncargo makepad wasm run -p makepad-example-simple --release\n```\n\n### Cross-origin headers for WASM for browsers\n\nFor WASM to work in browsers, your web server must\n\n- serve the MIME types correctly (as is common), and\n- set the following two headers.\n  ```\n  Cross-Origin-Embedder-Policy: require-corp\n  Cross-Origin-Opener-Policy: same-origin\n  ```\n  This is NOT common on public web servers like GitHub Pages. And it can't be set with `<meta\n  http-equiv=\"...\" content=\"...\"></meta>` in `index.html`.\n  \n  A workaround - but possibly for non-private browser mode only: use\n  [gzuidhof/coi-serviceworker](https://github.com/gzuidhof/coi-serviceworker):\n  \n  1. Let's say that you use Makepad's `experiments/html_experiment`. Build it with `cargo makepad\n     wasm build -p makepad-experiment-html`.\n  2. Copy\n     [coi-serviceworker.min.js](https://github.com/gzuidhof/coi-serviceworker/blob/master/coi-serviceworker.min.js)\n     (or\n     [coi-serviceworker.js](https://github.com/gzuidhof/coi-serviceworker/blob/master/coi-serviceworker.js))\n     to `target/makepad-wasm-app/debug/makepad-experiment-html`.\n  3. Edit `target/makepad-wasm-app/debug/makepad-experiment-html/index.html` and under `<head>` add:\n     `<script src=\"coi-serviceworker.min.js\"></script>` (or `<script\n     src=\"coi-serviceworker.js\"></script>`).\n  4. If use build a release with `cargo makepad wasm build -p makepad-experiment-html --release`,\n     then the build directory is `makepad/target/makepad-wasm-app/release/makepad-experiment-html`\n     instead.\n  5. If there is any initiation, it will be run twice. To control that, follow\n     [gzuidhof/coi-serviceworker#14](https://github.com/gzuidhof/coi-serviceworker/issues/14).\n  6. If this works well, incorporate it to Makepad's `tools/cargo_makepad/src/wasm/compile.rs` and\n     `platform/src/os/web/` and create a pull request.\n---\n\n## Makepad Commands Quick Reference\n\n### Cargo Tools Installations\n\nThese are commands that need to be run at least once initially to setup Makepad development environments.\nThey should also be run once in a while or when there are updates to the cargo_makepad script.\n\n```bash\nrustup update\nrustup install nightly\nrustup toolchain install nightly\n\ncd ~/projects/makepad\ncargo install --path ./tools/cargo_makepad\ncargo makepad android install-toolchain\ncargo makepad apple ios install-toolchain\ncargo makepad apple tv install-toolchain\ncargo makepad wasm install-toolchain\n\n```\n\n### Android\n\nCommand for installing the app onto an iOS Simulator.\n\n```bash\ncargo makepad android run -p makepad-example-simple --release\n\ncargo makepad android run -p makepad-example-fractal-zoom --release\n\ncargo makepad android run -p makepad-example-ironfish --release\n\ncargo makepad android run -p makepad-example-news-feed --release\n```\n\n### iOS Simulator\n\nCommand for installing the app onto an iOS Simulator.\n\n```bash\ncargo makepad apple ios --org=my.test --app=makepad-example-simple run-sim -p makepad-example-simple --release\n\ncargo makepad apple ios --org=my.test --app=makepad-example-fractal-zoom run-sim -p makepad-example-fractal-zoom --release\n\ncargo makepad apple ios --org=my.test --app=makepad-example-ironfish run-sim -p makepad-example-ironfish --release\n\ncargo makepad apple ios --org=my.test --app=makepad-example-news-feed run-sim -p makepad-example-news-feed --release\n```\n\n### iOS Device\n\nCommand for installing the app onto a physical iOS device.\n\n**See Step 5 above for more detailed instructions.**\n\n```bash\ncargo makepad apple ios --org=my.test --profile=ABC --cert=DEF --device=MyiPhone --app=makepad-example-simple run-device -p makepad-example-simple --release\n\ncargo makepad apple ios --org=my.test --profile=ABC --cert=DEF --device=MyiPhone --app=makepad-example-fractal-zoom run-device -p makepad-example-fractal-zoom --release\n\ncargo makepad apple ios --org=my.test --profile=ABC --cert=DEF --device=MyiPhone --app=makepad-example-ironfish -run-device -p makepad-example-ironfish --release\n\ncargo makepad apple ios --org=my.test --profile=ABC --cert=DEF --device=MyiPhone --app=makepad-example-news-feed run-device -p makepad-example-news-feed --release\n```\n\n### Cargo Check Builds\n\nCommand to check that the compilation passes for all Makepad supported platforms:\n(Will use 100% CPU and cause hang machine, only try on high-end systems)\n\n```bash\ncargo makepad check install-toolchain\ncargo makepad check all\n```\n"
        },
        {
          "name": "audio_graph",
          "type": "tree",
          "content": null
        },
        {
          "name": "code_editor",
          "type": "tree",
          "content": null
        },
        {
          "name": "draw",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "experiments",
          "type": "tree",
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "platform",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.0302734375,
          "content": "#disable_all_formatting = true\n"
        },
        {
          "name": "studio",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "widgets",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}