{
  "metadata": {
    "timestamp": 1736709353805,
    "page": 43,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "crossbeam-rs/crossbeam",
      "stars": 7600,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 1.2021484375,
          "content": "only_if: $CIRRUS_TAG == '' && ($CIRRUS_PR != '' || $CIRRUS_BRANCH == 'master')\nauto_cancellation: $CIRRUS_PR != ''\nenv:\n  CARGO_INCREMENTAL: '0'\n  CARGO_NET_RETRY: '10'\n  CARGO_TERM_COLOR: always\n  RUST_BACKTRACE: '1'\n  RUSTDOCFLAGS: -D warnings\n  RUSTFLAGS: -D warnings\n  RUSTUP_MAX_RETRIES: '10'\n\naarch64_linux_task:\n  name: test ($TARGET)\n  env:\n    TARGET: aarch64-unknown-linux-gnu\n  arm_container:\n    image: rust\n  setup_script:\n    - rustup toolchain add nightly && rustup default nightly\n  test_script:\n    - cargo test --all --all-features --exclude benchmarks -- --test-threads=1\n    - cargo test --all --all-features --exclude benchmarks --release -- --test-threads=1\n\naarch64_macos_task:\n  name: test ($TARGET)\n  env:\n    TARGET: aarch64-apple-darwin\n  macos_instance:\n    image: ghcr.io/cirruslabs/macos-ventura-xcode\n  setup_script:\n    - curl --proto '=https' --tlsv1.2 -fsSL --retry 10 --retry-connrefused https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly --no-modify-path\n  test_script:\n    - . \"$HOME/.cargo/env\"\n    - cargo test --all --all-features --exclude benchmarks -- --test-threads=1\n    - cargo test --all --all-features --exclude benchmarks --release -- --test-threads=1\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0888671875,
          "content": "/crossbeam-channel/benchmarks/*.txt\n/crossbeam-channel/benchmarks/*.png\ntarget/\nCargo.lock\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.0302734375,
          "content": "# Version 0.8.4\n\n- Remove dependency on `cfg-if`. (#1072)\n\n# Version 0.8.3\n\n- Bump the minimum supported Rust version to 1.61. (#1037)\n\n# Version 0.8.2\n\n- Bump the minimum supported Rust version to 1.38. (#877)\n\n# Version 0.8.1\n\n- Support targets that do not have atomic CAS on stable Rust (#698)\n\n# Version 0.8.0\n\n- Bump the minimum supported Rust version to 1.36.\n- Bump `crossbeam-channel` to `0.5`.\n- Bump `crossbeam-deque` to `0.8`.\n- Bump `crossbeam-epoch` to `0.9`.\n- Bump `crossbeam-queue` to `0.3`.\n- Bump `crossbeam-utils` to `0.8`.\n\n# Version 0.7.3\n\n- Fix breakage with nightly feature due to rust-lang/rust#65214.\n- Bump `crossbeam-channel` to `0.4`.\n- Bump `crossbeam-epoch` to `0.8`.\n- Bump `crossbeam-queue` to `0.2`.\n- Bump `crossbeam-utils` to `0.7`.\n\n# Version 0.7.2\n\n- Bump `crossbeam-channel` to `0.3.9`.\n- Bump `crossbeam-epoch` to `0.7.2`.\n- Bump `crossbeam-utils` to `0.6.6`.\n\n# Version 0.7.1\n\n- Bump `crossbeam-utils` to `0.6.5`.\n\n# Version 0.7.0\n\n- Remove `ArcCell`, `MsQueue`, and `TreiberStack`.\n- Change the interface of `ShardedLock` to match `RwLock`.\n- Add `SegQueue::len()`.\n- Rename `SegQueue::try_pop()` to `SegQueue::pop()`.\n- Change the return type of `SegQueue::pop()` to `Result`.\n- Introduce `ArrayQueue`.\n- Update dependencies.\n\n# Version 0.6.0\n\n- Update dependencies.\n\n# Version 0.5.0\n\n- Update `crossbeam-channel` to 0.3.\n- Update `crossbeam-utils` to 0.6.\n- Add `AtomicCell`, `SharedLock`, and `WaitGroup`.\n\n# Version 0.4.1\n\n- Fix a double-free bug in `MsQueue` and `SegQueue`.\n\n# Version 0.4\n\n- Switch to the new implementation of epoch-based reclamation in\n  [`crossbeam-epoch`](https://github.com/crossbeam-rs/crossbeam-epoch), fixing numerous bugs in the\n  old implementation.  Its API is changed in a backward-incompatible way.\n- Switch to the new implementation of `CachePadded` and scoped thread in\n  [`crossbeam-utils`](https://github.com/crossbeam-rs/crossbeam-utils).  The scoped thread API is\n  changed in a backward-incompatible way.\n- Switch to the new implementation of Chase-Lev deque in\n  [`crossbeam-deque`](https://github.com/crossbeam-rs/crossbeam-deque).  Its API is changed in a\n  backward-incompatible way.\n- Export channel implemented in\n  [`crossbeam-channel`](https://github.com/crossbeam-rs/crossbeam-channel).\n- Remove `AtomicOption`.\n- Implement `Default` and `From` traits.\n\n# Version 0.3\n\n- Introduced `ScopedThreadBuilder` with the ability to name threads and set stack size\n- `Worker` methods in the Chase-Lev deque don't require mutable access anymore\n- Fixed a bug when unblocking `pop()` in `MsQueue`\n- Implemented `Drop` for `MsQueue`, `SegQueue`, and `TreiberStack`\n- Implemented `Default` for `TreiberStack`\n- Added `is_empty` to `SegQueue`\n- Renamed `mem::epoch` to `epoch`\n- Other bug fixes\n\n# Version 0.2\n\n- Changed existing non-blocking `pop` methods to `try_pop`\n- Added blocking `pop` support to Michael-Scott queue\n- Added Chase-Lev work-stealing deque\n\n# Version 0.1\n\n- Added [epoch-based memory management](http://aturon.github.io/blog/2015/08/27/epoch/)\n- Added Michael-Scott queue\n- Added Segmented array queue\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.7509765625,
          "content": "[package]\nname = \"crossbeam\"\n# When publishing a new version:\n# - Update CHANGELOG.md\n# - Update README.md (when increasing major or minor version)\n# - Run './tools/publish.sh crossbeam <version>'\nversion = \"0.8.4\"\nedition = \"2021\"\nrust-version = \"1.61\"\nlicense = \"MIT OR Apache-2.0\"\nrepository = \"https://github.com/crossbeam-rs/crossbeam\"\nhomepage = \"https://github.com/crossbeam-rs/crossbeam\"\ndescription = \"Tools for concurrent programming\"\nkeywords = [\"atomic\", \"garbage\", \"non-blocking\", \"lock-free\", \"rcu\"]\ncategories = [\"concurrency\", \"memory-management\", \"data-structures\", \"no-std\"]\nexclude = [\"/.*\", \"/ci\", \"/tools\"]\n\n[features]\ndefault = [\"std\"]\n\n# Enable to use APIs that require `std`.\n# This is enabled by default.\nstd = [\n  \"alloc\",\n  \"crossbeam-channel/std\",\n  \"crossbeam-deque/std\",\n  \"crossbeam-epoch/std\",\n  \"crossbeam-queue/std\",\n  \"crossbeam-utils/std\",\n]\n\n# Enable to use APIs that require `alloc`.\n# This is enabled by default and also enabled if the `std` feature is enabled.\nalloc = [\"crossbeam-epoch/alloc\", \"crossbeam-queue/alloc\"]\n\n[dependencies]\ncrossbeam-channel = { version = \"0.5.10\", path = \"crossbeam-channel\", default-features = false, optional = true }\ncrossbeam-deque = { version = \"0.8.4\", path = \"crossbeam-deque\", default-features = false, optional = true }\ncrossbeam-epoch = { version = \"0.9.17\", path = \"crossbeam-epoch\", default-features = false, optional = true }\ncrossbeam-queue = { version = \"0.3.10\", path = \"crossbeam-queue\", default-features = false, optional = true }\ncrossbeam-utils = { version = \"0.8.18\", path = \"crossbeam-utils\", default-features = false, features = [\"atomic\"] }\n\n[dev-dependencies]\nrand = \"0.8\"\n\n[lints]\nworkspace = true\n\n[workspace]\nresolver = \"2\"\nmembers = [\n  \".\",\n  \"crossbeam-channel\",\n  \"crossbeam-channel/benchmarks\",\n  \"crossbeam-deque\",\n  \"crossbeam-epoch\",\n  \"crossbeam-queue\",\n  \"crossbeam-skiplist\",\n  \"crossbeam-utils\",\n]\n\n[workspace.lints.rust]\nmissing_debug_implementations = \"warn\"\nrust_2018_idioms = \"warn\"\nsingle_use_lifetimes = \"warn\"\nunexpected_cfgs = { level = \"warn\", check-cfg = [\n  'cfg(crossbeam_loom)',\n  'cfg(crossbeam_sanitize)',\n] }\nunreachable_pub = \"warn\"\n# unsafe_op_in_unsafe_fn = \"warn\" # Set at crate-level instead since https://github.com/rust-lang/rust/pull/100081 is not available on MSRV\n[workspace.lints.clippy]\n# Suppress buggy or noisy clippy lints\ndeclare_interior_mutable_const = { level = \"allow\", priority = 1 } # https://github.com/rust-lang/rust-clippy/issues/7665\nincompatible_msrv = { level = \"allow\", priority = 1 } # buggy: doesn't consider cfg, https://github.com/rust-lang/rust-clippy/issues/12280, https://github.com/rust-lang/rust-clippy/issues/12257#issuecomment-2093667187\nlint_groups_priority = { level = \"allow\", priority = 1 } # https://github.com/rust-lang/rust-clippy/issues/12920\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.59765625,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright 2019 The Crossbeam Project Developers\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0732421875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2019 The Crossbeam Project Developers\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.82421875,
          "content": "# Crossbeam\n\n[![Build Status](https://github.com/crossbeam-rs/crossbeam/workflows/CI/badge.svg)](\nhttps://github.com/crossbeam-rs/crossbeam/actions)\n[![License](https://img.shields.io/badge/license-MIT_OR_Apache--2.0-blue.svg)](\nhttps://github.com/crossbeam-rs/crossbeam#license)\n[![Cargo](https://img.shields.io/crates/v/crossbeam.svg)](\nhttps://crates.io/crates/crossbeam)\n[![Documentation](https://docs.rs/crossbeam/badge.svg)](\nhttps://docs.rs/crossbeam)\n[![Rust 1.61+](https://img.shields.io/badge/rust-1.61+-lightgray.svg)](\nhttps://www.rust-lang.org)\n[![chat](https://img.shields.io/discord/569610676205781012.svg?logo=discord)](https://discord.com/invite/JXYwgWZ)\n\nThis crate provides a set of tools for concurrent programming:\n\n#### Atomics\n\n* [`AtomicCell`], a thread-safe mutable memory location.<sup>(no_std)</sup>\n* [`AtomicConsume`], for reading from primitive atomic types with \"consume\" ordering.<sup>(no_std)</sup>\n\n#### Data structures\n\n* [`deque`], work-stealing deques for building task schedulers.\n* [`ArrayQueue`], a bounded MPMC queue that allocates a fixed-capacity buffer on construction.<sup>(alloc)</sup>\n* [`SegQueue`], an unbounded MPMC queue that allocates small buffers, segments, on demand.<sup>(alloc)</sup>\n\n#### Memory management\n\n* [`epoch`], an epoch-based garbage collector.<sup>(alloc)</sup>\n\n#### Thread synchronization\n\n* [`channel`], multi-producer multi-consumer channels for message passing.\n* [`Parker`], a thread parking primitive.\n* [`ShardedLock`], a sharded reader-writer lock with fast concurrent reads.\n* [`WaitGroup`], for synchronizing the beginning or end of some computation.\n\n#### Utilities\n\n* [`Backoff`], for exponential backoff in spin loops.<sup>(no_std)</sup>\n* [`CachePadded`], for padding and aligning a value to the length of a cache line.<sup>(no_std)</sup>\n* [`scope`], for spawning threads that borrow local variables from the stack.\n\n*Features marked with <sup>(no_std)</sup> can be used in `no_std` environments.*<br/>\n*Features marked with <sup>(alloc)</sup> can be used in `no_std` environments, but only if `alloc`\nfeature is enabled.*\n\n[`AtomicCell`]: https://docs.rs/crossbeam/latest/crossbeam/atomic/struct.AtomicCell.html\n[`AtomicConsume`]: https://docs.rs/crossbeam/latest/crossbeam/atomic/trait.AtomicConsume.html\n[`deque`]: https://docs.rs/crossbeam/latest/crossbeam/deque/index.html\n[`ArrayQueue`]: https://docs.rs/crossbeam/latest/crossbeam/queue/struct.ArrayQueue.html\n[`SegQueue`]: https://docs.rs/crossbeam/latest/crossbeam/queue/struct.SegQueue.html\n[`channel`]: https://docs.rs/crossbeam/latest/crossbeam/channel/index.html\n[`Parker`]: https://docs.rs/crossbeam/latest/crossbeam/sync/struct.Parker.html\n[`ShardedLock`]: https://docs.rs/crossbeam/latest/crossbeam/sync/struct.ShardedLock.html\n[`WaitGroup`]: https://docs.rs/crossbeam/latest/crossbeam/sync/struct.WaitGroup.html\n[`epoch`]: https://docs.rs/crossbeam/latest/crossbeam/epoch/index.html\n[`Backoff`]: https://docs.rs/crossbeam/latest/crossbeam/utils/struct.Backoff.html\n[`CachePadded`]: https://docs.rs/crossbeam/latest/crossbeam/utils/struct.CachePadded.html\n[`scope`]: https://docs.rs/crossbeam/latest/crossbeam/fn.scope.html\n\n## Crates\n\nThe main `crossbeam` crate just [re-exports](src/lib.rs) tools from\nsmaller subcrates:\n\n* [`crossbeam-channel`](crossbeam-channel)\n  provides multi-producer multi-consumer channels for message passing.\n* [`crossbeam-deque`](crossbeam-deque)\n  provides work-stealing deques, which are primarily intended for building task schedulers.\n* [`crossbeam-epoch`](crossbeam-epoch)\n  provides epoch-based garbage collection for building concurrent data structures.\n* [`crossbeam-queue`](crossbeam-queue)\n  provides concurrent queues that can be shared among threads.\n* [`crossbeam-utils`](crossbeam-utils)\n  provides atomics, synchronization primitives, scoped threads, and other utilities.\n\nThere is one more experimental subcrate that is not yet included in `crossbeam`:\n\n* [`crossbeam-skiplist`](crossbeam-skiplist)\n  provides concurrent maps and sets based on lock-free skip lists.\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[dependencies]\ncrossbeam = \"0.8\"\n```\n\n## Compatibility\n\nCrossbeam supports stable Rust releases going back at least six months,\nand every time the minimum supported Rust version is increased, a new minor\nversion is released. Currently, the minimum supported Rust version is 1.61.\n\n## Contributing\n\nCrossbeam welcomes contribution from everyone in the form of suggestions, bug reports,\npull requests, and feedback. 💛\n\nIf you need ideas for contribution, there are several ways to get started:\n\n* Found a bug or have a feature request?\n  [Submit an issue](https://github.com/crossbeam-rs/crossbeam/issues/new)!\n* Issues and PRs labeled with\n  [feedback wanted](https://github.com/crossbeam-rs/crossbeam/issues?utf8=%E2%9C%93&q=is%3Aopen+sort%3Aupdated-desc+label%3A%22feedback+wanted%22+)\n  need feedback from users and contributors.\n* Issues labeled with\n  [good first issue](https://github.com/crossbeam-rs/crossbeam/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22good+first+issue%22)\n  are relatively easy starter issues.\n\n#### RFCs\n\nWe also have the [RFCs](https://github.com/crossbeam-rs/rfcs) repository for more\nhigh-level discussion, which is the place where we brainstorm ideas and propose\nsubstantial changes to Crossbeam.\n\nYou are welcome to participate in any open\n[issues](https://github.com/crossbeam-rs/rfcs/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc)\nor\n[pull requests](https://github.com/crossbeam-rs/rfcs/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc).\n\n#### Learning resources\n\nIf you'd like to learn more about concurrency and non-blocking data structures, there's a\nlist of learning resources in our [wiki](https://github.com/crossbeam-rs/rfcs/wiki),\nwhich includes relevant blog posts, papers, videos, and other similar projects.\n\nAnother good place to visit is [merged RFCs](https://github.com/crossbeam-rs/rfcs/tree/master/text).\nThey contain elaborate descriptions and rationale for features we've introduced to\nCrossbeam, but keep in mind that some of the written information is now out of date.\n\n#### Conduct\n\nThe Crossbeam project adheres to the\n[Rust Code of Conduct](https://www.rust-lang.org/policies/code-of-conduct).\nThis describes the minimum behavior expected from all contributors.\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\nSome Crossbeam subcrates have additional licensing notices.\nTake a look at other readme files in this repository for more information.\n\n#### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n"
        },
        {
          "name": "build-common.rs",
          "type": "blob",
          "size": 0.470703125,
          "content": "// The target triplets have the form of 'arch-vendor-system'.\n//\n// When building for Linux (e.g. the 'system' part is\n// 'linux-something'), replace the vendor with 'unknown'\n// so that mapping to rust standard targets happens correctly.\nfn convert_custom_linux_target(target: String) -> String {\n    let mut parts: Vec<&str> = target.split('-').collect();\n    let system = parts.get(2);\n    if system == Some(&\"linux\") {\n        parts[1] = \"unknown\";\n    };\n    parts.join(\"-\")\n}\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "crossbeam-channel",
          "type": "tree",
          "content": null
        },
        {
          "name": "crossbeam-deque",
          "type": "tree",
          "content": null
        },
        {
          "name": "crossbeam-epoch",
          "type": "tree",
          "content": null
        },
        {
          "name": "crossbeam-queue",
          "type": "tree",
          "content": null
        },
        {
          "name": "crossbeam-skiplist",
          "type": "tree",
          "content": null
        },
        {
          "name": "crossbeam-utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "no_atomic.rs",
          "type": "blob",
          "size": 0.212890625,
          "content": "// This file is @generated by no_atomic.sh.\n// It is not intended for manual editing.\n\nconst NO_ATOMIC: &[&str] = &[\n    \"bpfeb-unknown-none\",\n    \"bpfel-unknown-none\",\n    \"mipsel-sony-psx\",\n    \"msp430-none-elf\",\n];\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}