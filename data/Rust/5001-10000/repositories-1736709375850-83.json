{
  "metadata": {
    "timestamp": 1736709375850,
    "page": 83,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-lang/rustfmt",
      "stars": 6132,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.359375,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.rs]\nindent_size = 4\n\n[tests/**/*.rs]\ncharset = utf-8\nend_of_line = unset\nindent_size = unset\nindent_style = unset\ntrim_trailing_whitespace = unset\ninsert_final_newline = unset\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2978515625,
          "content": "* text=auto eol=lf\ntests/source/issue-3494/crlf.rs -text\ntests/source/comment_crlf_newline.rs -text\ntests/source/configs/enum_discrim_align_threshold/40.rs -text\ntests/target/issue-3494/crlf.rs -text\ntests/target/comment_crlf_newline.rs -text\ntests/target/configs/enum_discrim_align_threshold/40.rs -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.560546875,
          "content": "\n# Created by https://www.gitignore.io/api/rust\n\n### Rust ###\n# Generated by Cargo\n# will have compiled files and executables\n/target\ntests/cargo-fmt/**/target\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here http://doc.crates.io/guide.html#cargotoml-vs-cargolock\n# Cargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n# End of https://www.gitignore.io/api/rust\n\n# Used by macOS' file system to track custom attributes of containing folder\n.DS_Store\n\n# Editors' specific files\n.idea/\n.vscode/\n*~\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 77.1806640625,
          "content": "# Changelog\n\n## [1.8.0] 2024-09-20\n\n### Fixed\n- Fix issue where rustfmt would crash on Windows when using the `ignore` option [#6178](https://github.com/rust-lang/rustfmt/issues/6178)\n\n### Changed\n- `rustfmt --version` now prints a commit hash that is 10 characters long [#6258](https://github.com/rust-lang/rustfmt/pull/6258)\n- `rustfmt --version` will no longer print empty git information when git information isn't available at build time.\n  For example, git information is not available when building rustfmt from a source tarball [#6266](https://github.com/rust-lang/rustfmt/pull/6266)\n- `version` has been soft deprecated and replaced by `style_edition`.\n  `style_edition=2024` is equivalent to `version=Two` and `style_edition={2015|2018|2021}`\n  are equivalent to `version=One` [#6247](https://github.com/rust-lang/rustfmt/pull/6247)\n- When `style_edition=2024` is configured `overflow_delimited_expr` will default to `true` [#6260](https://github.com/rust-lang/rustfmt/pull/6260).\n  ```rust\n  // with style_edition=2015\n  do_thing(\n      x,\n      Bar {\n          x: value,\n          y: value2,\n      },\n  );\n\n  // with style_edition=2024\n  do_thing(x, Bar {\n      x: value,\n      y: value2,\n  });\n  ```\n- When `style_edition=2024` is configured rustfmt will apply the [style guide's version sorting algorithm]\n  when sorting imports [#6284](https://github.com/rust-lang/rustfmt/pull/6284)\n  ```rust\n  // with style_edition=2015\n  use std::num::{NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU8};\n\n  // with style_edition=2024\n  use std::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64};\n  ```\n  [style guide's version sorting algorithm]: https://doc.rust-lang.org/nightly/style-guide/#sorting\n- When parsing rustfmt configurations fails, rustfmt will now include the path to the toml file in the error message [#6302](https://github.com/rust-lang/rustfmt/issues/6302)\n\n### Added\n- rustfmt now formats trailing where clauses in type aliases [#5887](https://github.com/rust-lang/rustfmt/pull/5887)\n  ```rust\n  type Foo\n      = Bar\n  where\n      A: B,\n      C: D;\n  ```\n- Users can now configure which `style_edition` rustfmt uses when formatting their code as specified\n  in [RFC 3338](https://rust-lang.github.io/rfcs/3338-style-evolution.html). Users are encouraged to configure `style_edition`\n  in their `rustfmt.toml` files, but the value can also be specified via the cli with `--unstable-features --style-edition={style_edition}`.\n  When `style_edition` is not explicitly configured it will be inferred from the `edition` configuration.\n  When neither `style_edition` nor `edition` are configured `style_edition` defaults to `2015` [#6247](https://github.com/rust-lang/rustfmt/pull/6247)\n\n### Misc\n- Removed `tracing-attributes` dependency [#6208](https://github.com/rust-lang/rustfmt/pull/6208)\n- Reduced syn's features in the internal `config_proc_macro` crate [#6237](https://github.com/rust-lang/rustfmt/pull/6237)\n\n## [1.7.1] 2024-06-24\n\n### Fixed\n\n- Fix an idempotency issue when rewriting where clauses in which rustfmt would continuously add a trailing comma `,` to the end of trailing line comments [#5941](https://github.com/rust-lang/rustfmt/issues/5941).\n- Prevent enum variant attributes from wrapping one character early when using `version=Two` [#5801](https://github.com/rust-lang/rustfmt/issues/5801)\n- Properly wrap macro matchers at the `max_width` when using `version=Two` and `format_macro_matchers=true` [#3805](https://github.com/rust-lang/rustfmt/issues/3805)\n- Prevent panic when formatting trait declaration with non [Unicode Normalization Form] C (NFC) identifiers [#6069](https://github.com/rust-lang/rustfmt/issues/6069)\n  ```rust\n  // The ó below is two codepoints, ASCII o followed by U+0301 COMBINING ACUTE ACCENT.\n  // It NFC-normalizes to ó, U+00F3 LATIN SMALL LETTER O WITH ACUTE.\n  trait Foó: Bar {}\n  ```\n  [unicode normalization form]: https://unicode.org/reports/tr15/\n- Ensure a space is added to a range expression, when the right hand side of the range expression is a binary expression that ends with a trailing period [#6059](https://github.com/rust-lang/rustfmt/issues/6059)\n  ```rust\n  let range = 3. / 2. ..4.;\n  ```\n- When using `version=Two`, comments in match arms that contain `=>` no longer prevent formatting [#5998](https://github.com/rust-lang/rustfmt/issues/5998)\n  ```rust\n  match a {\n      _ =>\n      // comment with =>\n      {\n          println!(\"A\")\n      }\n  }\n  ```\n- Prevent panics when formatting input that contains the expanded form of `offset_of!` [#5885](https://github.com/rust-lang/rustfmt/issues/5885) [#6105](https://github.com/rust-lang/rustfmt/issues/6105)\n  ```rust\n  const _: () = builtin # offset_of(x, x);\n  ```\n- When using `version=Two` inner attributes in `match` expressions are correctly indented [#6147](https://github.com/rust-lang/rustfmt/issues/6147)\n  ```rust\n  pub fn main() {\n      match x {\n          #![attr1]\n          #![attr2]\n          _ => (),\n      }\n  }\n  ```\n- Output correct syntax for type ascription builtin [#6159](https://github.com/rust-lang/rustfmt/issues/6159)\n  ```rust\n  fn main() {\n      builtin # type_ascribe(10, usize)\n  }\n  ```\n- rustfmt no longer removes inner attributes from inline const blocks [#6158](https://github.com/rust-lang/rustfmt/issues/6158)\n  ```rust\n  fn main() {\n      const {\n          #![allow(clippy::assertions_on_constants)]\n\n          assert!(1 < 2);\n      }\n  }\n  ```\n- rustfmt no longer removes `safe` and `unsafe` keywords from static items in extern blocks.\n  This helps support [`#![feature(unsafe_extern_blocks)]`](https://github.com/rust-lang/rust/issues/123743) [#6204](https://github.com/rust-lang/rustfmt/pull/6204)\n  ```rust\n  #![feature(unsafe_extern_blocks)]\n\n  unsafe extern \"C\" {\n      safe static TEST1: i32;\n      unsafe static TEST2: i32;\n  }\n  ```\n\n\n### Changed\n\n- `hide_parse_errors` has been soft deprecated and it's been renamed to `show_parse_errors` [#5961](https://github.com/rust-lang/rustfmt/pull/5961).\n- The diff output produced by `rustfmt --check` is more compatible with editors that support navigating directly to line numbers [#5971](https://github.com/rust-lang/rustfmt/pull/5971)\n- When using `version=Two`, the `trace!` macro from the [log crate] is now formatted similarly to `debug!`, `info!`, `warn!`, and `error!` [#5987](https://github.com/rust-lang/rustfmt/issues/5987).\n\n  [log crate]: https://crates.io/crates/log\n\n\n### Added\n\n- `generated_marker_line_search_limit` is a new unstable configuration option that allows users to configure how many lines to search for an `@generated` marker when `format_generated_files=false` [#5658](https://github.com/rust-lang/rustfmt/issues/5658)\n\n\n### Misc\n\n- Updating `dirs 4.0.0 -> 5.0.1` and `cargo_metadata 0.15.4 -> 0.18.0` [#6033] (https://github.com/rust-lang/rustfmt/issues/6033)\n  - For reference, here's the [dirs v5 changelog](https://github.com/dirs-dev/dirs-rs/blob/main/README.md#5)\n- Updated [itertools v0.11 -> v0.12](https://github.com/rust-itertools/itertools/blob/v0.12.1/CHANGELOG.md#0120) [#6093](https://github.com/rust-lang/rustfmt/pull/6093)\n- Addressed clap deprecations output when running `cargo check --features clap/deprecated` [#6101](https://github.com/rust-lang/rustfmt/pull/6101)\n- Bumped bytecount `0.6.4` -> `0.6.8` to fix compilation issues with the `generic-simd` feature. See [bytecount#92] and [bytecount#93]\n\n  [bytecount#92]: https://github.com/llogiq/bytecount/pull/92\n  [bytecount#93]: https://github.com/llogiq/bytecount/pull/93\n- Replace the `lazy_static` dependency with `std::sync::OnceLock` [#6154](https://github.com/rust-lang/rustfmt/pull/6154)\n\n## [1.7.0] 2023-10-22\n\n### Fixed\n\n- Sometimes when `format_code_in_doc_comments=true` was set some line comments were converted to block comments [#5533](https://github.com/rust-lang/rustfmt/issues/5533)\n- rustfmt will no longer remove the braces in match arms when the block has a labeled [#5676](https://github.com/rust-lang/rustfmt/issues/5676)\n  ```rust\n  fn main() {\n      match true {\n          true => 'a: {\n              break 'a\n          }\n          _ => (),\n      }\n  }\n  ```\n- Calling methods on float literals ending in `.` will now be wrapped in parenthesis. e.g. `0. .to_string()` will be formatted as `(0.).to_string()` [#5791](https://github.com/rust-lang/rustfmt/issues/5791)\n- Prevent ICE when formatting empty `macro_rules!` branch [#5730](https://github.com/rust-lang/rustfmt/issues/5730)\n  ```rust\n  macro_rules! statement {\n      () => {;};\n  }\n  ```\n- Prevent ICE when formatting `vec!{}` [#5735](https://github.com/rust-lang/rustfmt/issues/5735)\n- Prevent internal trailing whitespace error when formatting an empty `macro_rules!` definition e.g. `macro_rules! foo {}` [#5882](https://github.com/rust-lang/rustfmt/issues/5882)\n- Formatting doc comment lines that start with `.` or `)` won't be treated as ordered markdown lists because `.` or `)` must be preceded by a number to start an ordered markdown list [#5835](https://github.com/rust-lang/rustfmt/pull/5835)\n- Add parenthesis around closures when they're used as method receives, don't have a block body, and end with `.` [#4808](https://github.com/rust-lang/rustfmt/issues/4808)\n  ```rust\n  fn main() {\n      || (10.).method();\n      (|| ..).method();\n      (|| 1..).method();\n  }\n  ```\n- Prevent removing `for<T>` when using the [`#![feature(non_lifetime_binders)]`](https://github.com/rust-lang/rust/issues/108185) [#5721](https://github.com/rust-lang/rustfmt/issues/5721)\n  ```rust\n  #![feature(non_lifetime_binders)]\n  #![allow(incomplete_features)]\n\n  trait Other<U: ?Sized> {}\n\n  trait Trait<U>\n  where\n      for<T> U: Other<T> {}\n  ```\n- Fix various issues with comments in imports [#5852](https://github.com/rust-lang/rustfmt/issues/5852) [#4708](https://github.com/rust-lang/rustfmt/issues/4708) [#3984](https://github.com/rust-lang/rustfmt/issues/3984)\n- When setting `version = Two` newlines between where clause bounds will be removed [#5655](https://github.com/rust-lang/rustfmt/issues/5655)\n  ```rust\n  fn foo<T>(_: T)\n  where\n      T: std::fmt::Debug,\n      T: std::fmt::Display,\n  {\n  }\n  ```\n- Improve formatting of `let-else` statements that have leading attributes When setting `version = Two` [#5901](https://github.com/rust-lang/rustfmt/issues/5901)\n- Prevent comment duplication in expressions wrapped in parenthesis. [#5871](https://github.com/rust-lang/rustfmt/issues/5871)\n- Adjust the span derivation used when rewriting const generics. The incorrect span derivation lead to invalid code after reformatting. [#5935](https://github.com/rust-lang/rustfmt/issues/5935)\n\n\n### Changed\n\n- rustfmt no longer removes explicit `Rust` ABIs. e.g `extern \"Rust\" fn im_a_rust_fn() {}` [#5701](https://github.com/rust-lang/rustfmt/issues/5701)\n- Setting `trailing_semicolon = false` will only remove trailing `;` on the last expression in a block [#5797](https://github.com/rust-lang/rustfmt/issues/5797)\n- Update the format of `cargo help fmt` to be more consistent with other standard commands [#5908](https://github.com/rust-lang/rustfmt/pull/5908)\n\n### Added\n\n- Users can now set `skip_macro_invocations` in `rustfmt.toml` [#5816](https://github.com/rust-lang/rustfmt/issues/5816)\n- Adds initial support for formatting `let-chains`. **`let-chains` are still a nightly feature and their formatting is subject to change** [#5910](https://github.com/rust-lang/rustfmt/pull/5910). Formatting was implemented following the rules outlined in [rust-lang/rust#110568](https://github.com/rust-lang/rust/pull/110568)\n\n### Misc\n\n- Support the experimental `dyn*` syntax, enabled by `#![feature(dyn_star)]` [#5542](https://github.com/rust-lang/rustfmt/issues/5542)\n- Replace `unicode_categories` dependency with `unicode-properties` [#5864](https://github.com/rust-lang/rustfmt/pull/5864)\n\n## [1.6.0] 2023-07-02\n\n### Added\n\n- Support for formatting let-else statements [#5690]\n- New config option, `single_line_let_else_max_width`, that allows users to configure the maximum length of single line `let-else` statements. `let-else` statements that otherwise meet the requirements to be formatted on a single line will have their divergent`else` block formatted over multiple lines if they exceed this length [#5684]\n\n[#5690]: https://github.com/rust-lang/rustfmt/pull/5690\n[#5684]: https://github.com/rust-lang/rustfmt/issues/5684\n\n## [1.5.3] 2023-06-20\n\n### Fixed\n\n- When formatting doc comments with `wrap_comments = true` rustfmt will no longer wrap markdown tables [#4210](https://github.com/rust-lang/rustfmt/issues/4210)\n- Properly handle wrapping comments that include a numbered list in markdown [#5416](https://github.com/rust-lang/rustfmt/issues/5416)\n- Properly handle markdown sublists that utilize a `+` [#4041](https://github.com/rust-lang/rustfmt/issues/4041)\n- rustfmt will no longer use shorthand initialization when rewriting a tuple struct even when `use_field_init_shorthand = true` as this leads to code that could no longer compile.\n  Take the following struct as an example `struct MyStruct(u64);`. rustfmt will no longer format `MyStruct { 0: 0 }` as `MyStruct { 0 }` [#5488](https://github.com/rust-lang/rustfmt/issues/5488)\n- rustfmt no longer panics when formatting an empty code block in a doc comment with `format_code_in_doc_comments = true` [#5234](https://github.com/rust-lang/rustfmt/issues/5234). For example:\n  ```rust\n  /// ```\n  ///\n  /// ```\n  fn main() {}\n  ```\n- rustfmt no longer incorrectly duplicates the where clause bounds when using const expression in where clause bounds with feature `#![feature(generic_const_exprs)]` [#5691](https://github.com/rust-lang/rustfmt/issues/5691). e.g.:\n  ```rust\n  struct S<const C: usize>\n  where\n      [(); { num_slots!(C) }]:, {\n      // code ...\n  }\n  ```\n- Prevent ICE when parsing invalid attributes in `cfg_if!` macros [#5728](https://github.com/rust-lang/rustfmt/issues/5728), [#5729](https://github.com/rust-lang/rustfmt/issues/5729)\n- rustfmt no longer loses comments placed between a doc comment and generic params [#5320](https://github.com/rust-lang/rustfmt/issues/5320)\n- Handle explicit discriminants in enums with comments present [#5686](https://github.com/rust-lang/rustfmt/issues/5686)\n\n### Changed\n\n- Users can now control whether rustc parser errors are displayed with color using rustfmt's `--color` option. To disable colored errors pass `--color=Never` to rustfmt [#5717](https://github.com/rust-lang/rustfmt/issues/5717)\n\n\n### Added\n\n- rustfmt now recognises `+` as the start of a markdown list, and won't incorrectly wrap sublists that begin with `+` when formatting doc comments with `wrap_comments = true` [#5560](https://github.com/rust-lang/rustfmt/pull/5560)\n\n### Misc\n\n- Update various dependencies, including `syn`, `cargo_metadata`, `env_logger`, and `toml`\n\n## [1.5.2] 2023-01-24\n\n### Fixed\n\n- Resolve issue when comments are found within const generic defaults in unit structs [#5668](https://github.com/rust-lang/rustfmt/issues/5668)\n- Resolve issue when block comments are found within trait generics [#5358](https://github.com/rust-lang/rustfmt/issues/5358)\n- Correctly handle alignment of comments containing unicode characters [#5504](https://github.com/rust-lang/rustfmt/issues/5504)\n- Properly indent a single generic bound that requires being written across multiple lines [#4689](https://github.com/rust-lang/rustfmt/issues/4689) (n.b. this change is version gated and will only appear when the `version` configuration option is set to `Two`)\n\n### Changed\n\n- Renamed `fn_args_layout` configuration option to `fn_params_layout` [#4149](https://github.com/rust-lang/rustfmt/issues/4149). Note that `fn_args_layout` has only been soft deprecated: `fn_args_layout` will continue to work without issue, but rustfmt will display a warning to encourage users to switch to the new name\n\n### Added\n\n- New configuration option [`skip_macro_invocations`](https://rust-lang.github.io/rustfmt/?version=master&search=#skip_macro_invocations) [#5347](https://github.com/rust-lang/rustfmt/pull/5347) that can be used to globally define a single enumerated list of macro calls that rustfmt should skip formatting. rustfmt [currently also supports this via a custom tool attribute](https://github.com/rust-lang/rustfmt#tips), however, these cannot be used in all contexts because [custom inner attributes are unstable](https://github.com/rust-lang/rust/issues/54726)\n\n### Misc\n\n- rustfmt now internally supports the ability to have both stable and unstable variants of a configuration option [#5378](https://github.com/rust-lang/rustfmt/issues/5378). This ability will allow the rustfmt team to make certain configuration options available on stable toolchains more quickly because we no longer have to wait for _every_ variant to be stable-ready before stabilizing _any_ variant. \n\n### Install/Download Options\n- **rustup (nightly)** - nightly-2023-01-24\n- **GitHub Release Binaries** - [Release v1.5.2](https://github.com/rust-lang/rustfmt/releases/tag/v1.5.2)\n- **Build from source** - [Tag v1.5.2](https://github.com/rust-lang/rustfmt/tree/v1.5.2), see instructions for how to [install rustfmt from source][install-from-source]\n\n## [1.5.1] 2022-06-24\n\n**N.B** A bug was introduced in v1.5.0/nightly-2022-06-15 which modified formatting. If you happened to run rustfmt over your code with one of those ~10 nightlies it's possible you may have seen formatting changes, and you may see additional changes after this fix since that bug has now been reverted.\n\n### Fixed\n\n- Correct an issue introduced in v1.5.0 where formatting changes were unintentionally introduced in a few cases with a large/long construct in a right hand side position (e.g. a large chain on the RHS of a local/assignment statement)\n- `cargo fmt --version` properly displays the version value again [#5395](https://github.com/rust-lang/rustfmt/issues/5395)\n\n### Changed\n\n- Properly sort imports containing raw identifiers [#3791](https://github.com/rust-lang/rustfmt/issues/3791) (note this is change version gated, and not applied by default)\n\n### Added\n\n- Add new configuration option, `doc_comment_code_block_width`, which allows for setting a shorter width limit to use for formatting code snippets in doc comments [#5384](https://github.com/rust-lang/rustfmt/issues/5384)\n\n### Install/Download Options\n- **rustup (nightly)** - nightly-2022-06-24\n- **GitHub Release Binaries** - [Release v1.5.1](https://github.com/rust-lang/rustfmt/releases/tag/v1.5.0)\n- **Build from source** - [Tag v1.5.1](https://github.com/rust-lang/rustfmt/tree/v1.5.1), see instructions for how to [install rustfmt from source][install-from-source]\n\n## [1.5.0] 2022-06-14\n\n### Changed\n\n- Simplify the rustfmt help text by eliding the full path to the rustfmt binary path from the usage string when running `rustfmt --help` [#5214](https://github.com/rust-lang/rustfmt/issues/5214)\n\n- Bumped the version for several dependencies. Most notably `dirs` `v2.0.1` -> `v4.0.0`. This changed the global user config directory on macOS from `$HOME/Library/Preferences` to `$HOME/Library/Application Support` [#5237](https://github.com/rust-lang/rustfmt/pull/5237)\n\n### Fixed\n\n- Remove duplicate imports when `imports_granularity` is set to `Item` [#4725](https://github.com/rust-lang/rustfmt/issues/4725)\n- Properly handle stdin input containing an inner skip attribute [#5368](https://github.com/rust-lang/rustfmt/issues/5368)\n- Maintain attributes on imports when `imports_granularity` is set to `Item` [#5030](https://github.com/rust-lang/rustfmt/issues/5030)\n- Format empty trait definitions as a single line when both `empty_item_single_line` is enabled and `brace_style` is set to `AlwaysNextLine` [#5047](https://github.com/rust-lang/rustfmt/issues/5047)\n- Don't change granularity of imports containing comments with `imports_granularity` if doing so could lose or misplace those comments [#5311](https://github.com/rust-lang/rustfmt/pull/5311)\n- Prevent rustfmt from removing trailing comments at the end of files annotated with inner `#![rustfmt::skip]` attributes [#5033](https://github.com/rust-lang/rustfmt/issues/5033)\n- Fixed various `error[internal]: left behind trailing whitespace\"` issues:\n  - Remove trailing whitespace when formatting a where clause who's bounds have an empty right hand side [#5012](https://github.com/rust-lang/rustfmt/issues/5012) [#4850](https://github.com/rust-lang/rustfmt/issues/4850)\n  - Prevent rustfmt from adding an empty comment line when rewriting markdown lists at the start of doc comments. This issue was triggered when `wrap_comments=true` [#5088](https://github.com/rust-lang/rustfmt/issues/5088)\n- Prevent adding a block indented newline before a function parameter with a complex type that was formatted over multiple lines [#5125](https://github.com/rust-lang/rustfmt/issues/5125)\n- Fix various module resolution issues preventing rustfmt from finding modules that should be formatted:\n  - Handle external mods imported via external->inline load hierarchy [#5063](https://github.com/rust-lang/rustfmt/issues/5063)\n  - Resolve sub modules of integration tests [#5119](https://github.com/rust-lang/rustfmt/issues/5119)\n  - Module resolution will fallback to the current search directory if a relative directory search results in a `FileNotFound` error [#5198](https://github.com/rust-lang/rustfmt/issues/5198)\n- Give users a clearer error message when resolving a module who's file path is ambiguous (e.g `x.rs` and `x/mod.rs`). Before users were given a `File not found` error message which was confusing [#5167](https://github.com/rust-lang/rustfmt/issues/5167)\n- Fix various issues related to type aliases:\n  - Prevent rustfmt from adding `= impl` to associated types defined in macro bodies [#4823](https://github.com/rust-lang/rustfmt/issues/4823)\n  - Properly block indent type alias impl traits (TAITs) that wrap to the next line when `version=Two` is set. Before any trait bounds that wrapped to the next line would not be indented [#5027](https://github.com/rust-lang/rustfmt/issues/5027)\n  - Prevent rustfmt from adding an `impl Trait` definition into types [#5086](https://github.com/rust-lang/rustfmt/issues/5086)\n- Fix cases where `normalize_comments=true` would de-normalizes some comments by changing inline comments into block comments [#4909](https://github.com/rust-lang/rustfmt/issues/4909)\n- Prevent rustfmt from wrapping the content of markdown [reference-style links](https://www.markdownguide.org/basic-syntax/#reference-style-links) in doc comments [#5095](https://github.com/rust-lang/rustfmt/issues/5095) [#4933](https://github.com/rust-lang/rustfmt/issues/4933)\n- Don't format files annotated with inner `#![rustfmt::skip]` attribute [PR #5094](https://github.com/rust-lang/rustfmt/pull/5094)\n- Prevent duplicate comma when struct pattern ends with `..` and `trailing_comma=Always`. For example, `let Foo { a, .. } = b;` would become `let Foo { a,, .. } = b;` [#5066](https://github.com/rust-lang/rustfmt/issues/5066)\n- Fix the order of `static` and `async` keywords when rewriting static async closures. The correct order is `static` and then `async` (e.g `static async || {}`) [#5149](https://github.com/rust-lang/rustfmt/issues/5149)\n- Retain the fully qualified path segment when rewriting struct literals in expression position. Now `<Struct as Trait>::Type` is not rewritten as `Trait::Type` [#5151](https://github.com/rust-lang/rustfmt/issues/5151)\n- Do not remove match arm braces from a match arm with a single `ast::ExprKind::Block` that has leading attributes. Removing the braces could lead to code that does not compile. Now rustfmt will leave the outer `{}` in place when formatting `=> {#[allow(unsafe_code)]unsafe {}}` [#4109](https://github.com/rust-lang/rustfmt/issues/4109)\n- Backport json emitter and stdin changes [PR #5054](https://github.com/rust-lang/rustfmt/pull/5054)\n  - Make `--check` work when running rustfmt with input from stdin [PR #3896](https://github.com/rust-lang/rustfmt/pull/3896)\n  - Fix `--check` with the `--files-with-diff` flag [PR #3910](https://github.com/rust-lang/rustfmt/pull/3910)\n  - Produce valid JSON when using the JSON emitter [PR #3953](https://github.com/rust-lang/rustfmt/pull/3953)\n  - Fix newlines in JSON output [PR #4262](https://github.com/rust-lang/rustfmt/pull/4262)\n  - Use `<stdin>` when emitting stdin as filename [PR #4298](https://github.com/rust-lang/rustfmt/pull/4298)\n- Always generate some output when formatting `@generated` files via stdin even when `format_generated_files=false`. Not producing output caused rust-analyzer to delete the file content [rust-lang/rust-analyzer](https://github.com/rust-lang/rust-analyzer/issues/11285) [#5172](https://github.com/rust-lang/rustfmt/issues/5172)\n- Properly block indent multi-line comments in empty struct definitions. Previously, only the first comment line would be block indented. All other comment lines would be aligned with the struct definition [#4854](https://github.com/rust-lang/rustfmt/issues/4854)\n- Prevent rustfmt from wrapping a comment at a byte position inside a non-ascii character when `wrap_comments=true`. This prevents rustfmt from panicking when breaking on the invalid position [#5023](https://github.com/rust-lang/rustfmt/issues/5023)\n- Prevent rustfmt from removing commented out trailing separators (e.g commas) when rewriting lists. For example, remove the comma from a comment like this `// ...,` would lead to a scenario where the entire list could not be rewritten because the content of the comment changed [#5042](https://github.com/rust-lang/rustfmt/issues/5042)\n- Fix panic when `import_granularity` was set to `Module`, `One`, or `Crate` and the import use declaration contained an alias `use crate a::b as b1` [#5131](https://github.com/rust-lang/rustfmt/issues/5131)\n- Add a newline between generic parameters and their doc comments to prevent the generic parameters from being merged into their doc comments [#5122](https://github.com/rust-lang/rustfmt/issues/5122)\n- Fixes indentation issue where string literals manually broken with line continuation characters (`\\`) would be incorrectly indented in macro definitions when setting `format_strings=true`[#4036](https://github.com/rust-lang/rustfmt/issues/4036)\n- Properly wrap and format long markdown block quotes when `wrap_comments=true` [#5157](https://github.com/rust-lang/rustfmt/issues/5157)\n- Prevent rustfmt from wrapping markdown headers even when `wrap_comments=true`. Wrapping the markdown headers would prevent them from being properly rendered with rustdoc [#5238](https://github.com/rust-lang/rustfmt/issues/5238)\n- Prevent rustfmt from removing commas between struct fields when those fields were also separated by an empty line [#4791](https://github.com/rust-lang/rustfmt/issues/4791) [#4928](https://github.com/rust-lang/rustfmt/issues/4928)\n- Fix compiler error caused when formatting imports with `imports_granularity=Module` and a path containing `self`. Given the following import `use crate::lexer::{self, tokens::TokenData};`, rustfmt would transform the `self` import into `use crate::lexer::self;`. Now rustfmt produces `use crate::lexer::{self};` [#4681](https://github.com/rust-lang/rustfmt/issues/4681)\n- Prevent rustfmt from breaking long type links in doc comments on namespace qualifiers (`::`) when `wrap_comments=true`. Breaking these long type links over multiple lines prevented them from being properly rendered in rustdoc [#5260](https://github.com/rust-lang/rustfmt/issues/5260)\n- Correctly find the start of struct bodies after any generic `const` parameters. Naively searching for an opening `{` lead to issues since generic `const` parameters are also defined with `{}` (e.g. `struct Example<const N: usize = { 1048576 }> {}`) [#5273](https://github.com/rust-lang/rustfmt/issues/5273)\n- Prevent rustfmt from merging derives when using inner or outer `rustfmt::skip::attributes` attributes. For example, `#[rustfmt::skip::attributes(derive)]` [#5270](https://github.com/rust-lang/rustfmt/issues/5270)\n- Retain trailing `;` when rewriting macro calls in extern blocks. For example, `extern \"C\" { x!(-); }`[#5281](https://github.com/rust-lang/rustfmt/issues/5281)\n- Add a newline when formatting struct fields preceded by both doc comments and inline comments to prevent the field from being merged into the inline comment. This was not an issue when a struct was preceded by just a doc comment or just an inline comment [#5215](https://github.com/rust-lang/rustfmt/issues/5215)\n\n### Added\n\n- Added `One` as a new [group_imports](https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#group_imports) option to create a single group for all imports [PR #4966](https://github.com/rust-lang/rustfmt/pull/4966)\n- Add [short_array_element_width_threshold](https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#short_array_element_width_threshold) config option to give users more control over when `Mixed` list formatting is used [PR #5228](https://github.com/rust-lang/rustfmt/pull/5228)\n\n### Removed\n\n- Removed unstable, nightly-only config option `report_todo` [#5101](https://github.com/rust-lang/rustfmt/issues/5101)\n- Removed unstable, nightly-only config option `report_fixme` [#5102](https://github.com/rust-lang/rustfmt/issues/5102)\n- Removed unstable, nightly-only config option `license_template_path` [#5103](https://github.com/rust-lang/rustfmt/issues/5103)\n\n### Misc\n\n- Improved performance when formatting large and deeply nested expression trees, often found in generated code, which have many expressions that exceed `max_width` [#5128](https://github.com/rust-lang/rustfmt/issues/5128), [#4867](https://github.com/rust-lang/rustfmt/issues/4867), [#4476](https://github.com/rust-lang/rustfmt/issues/4476), [#5139](https://github.com/rust-lang/rustfmt/pull/5139)\n\n### Install/Download Options\n- **rustup (nightly)** - nightly-2022-06-15\n- **GitHub Release Binaries** - [Release v1.5.0](https://github.com/rust-lang/rustfmt/releases/tag/v1.5.0)\n- **Build from source** - [Tag v1.5.0](https://github.com/rust-lang/rustfmt/tree/v1.5.0), see instructions for how to [install rustfmt from source][install-from-source]\n\n## [1.4.38] 2021-10-20\n\n### Changed\n\n- Switched from `rustc-ap-*` crates to `rustc_private` for consumption model of rustc internals\n- `annotate-snippets` updated to v0.8 [PR #4762](https://github.com/rust-lang/rustfmt/pull/4762)\n- Greatly improved the performance of `cargo fmt` in large workspaces utilizing the `--all` flag by updating to a newer version of `cargo_metadata` that leverages updated `cargo` output from v1.51+ [PR #4997](https://github.com/rust-lang/rustfmt/pull/4997)\n- Improved formatting of long slice patterns [#4530](https://github.com/rust-lang/rustfmt/issues/4530)\n  - **Note you must have `version = Two` in your configuration to take advantage of the new formatting**\n- Stabilized `match_block_trailing_comma` configuration option [#3380](https://github.com/rust-lang/rustfmt/issues/3380) - [https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#match_block_trailing_comma](https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#match_block_trailing_comma)\n- Stabilized `disable_all_formatting` configuration option [#5026](https://github.com/rust-lang/rustfmt/pull/5026) - [https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#disable_all_formatting](https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#disable_all_formatting)\n- Various improvements to the configuration documentation website [https://rust-lang.github.io/rustfmt/?version=v1.4.38]([https://rust-lang.github.io/rustfmt/?version=v1.4.38])\n- Addressed various clippy and rustc warnings\n\n\n### Fixed\n\n- Resolved issue where specious whitespace would be inserted when a block style comment was terminated within string literal processing [#4312](https://github.com/rust-lang/rustfmt/issues/4312)\n- Nested out-of-line mods are again parsed and formatted [#4874](https://github.com/rust-lang/rustfmt/issues/4874)\n- Accepts `2021` for edition value from rustfmt command line [PR #4847](https://github.com/rust-lang/rustfmt/pull/4847)\n- Unstable command line options are no longer displayed in `--help` text on stable [PR #4798](https://github.com/rust-lang/rustfmt/issues/4798)\n- Stopped panicking on patterns in match arms which start with non-ascii characters [#4868](https://github.com/rust-lang/rustfmt/issues/4868)\n- Stopped stripping defaults on const params [#4816](https://github.com/rust-lang/rustfmt/issues/4816)\n- Fixed issue with dropped content with GAT aliases with self bounds in impls [#4911](https://github.com/rust-lang/rustfmt/issues/4911)\n- Stopped removing generic args on associated type constraints [#4943](https://github.com/rust-lang/rustfmt/issues/4943)\n- Stopped dropping visibility on certain trait and impl items [#4960](https://github.com/rust-lang/rustfmt/issues/4960)\n- Fixed dropping of qualified paths in struct patterns [#4908](https://github.com/rust-lang/rustfmt/issues/4908) and [#5005](https://github.com/rust-lang/rustfmt/issues/5005)\n- Fixed bug in line width calculation that was causing specious formatting of certain patterns [#4031](https://github.com/rust-lang/rustfmt/issues/4031)\n  - **Note that this bug fix may cause observable formatting changes in cases where code had been formatted with prior versions of rustfmt that contained the bug**\n- Fixed bug where rustfmt would drop parameter attributes if they were too long in certain cases [#4579](https://github.com/rust-lang/rustfmt/issues/4579)\n- Resolved idempotency issue with extern body elements [#4963](https://github.com/rust-lang/rustfmt/issues/4963)\n- rustfmt will now handle doc-style comments on function parameters, since they could appear with certain macro usage patterns even though it's generally invalid syntax [#4936](https://github.com/rust-lang/rustfmt/issues/4936)\n- Fixed bug in `match_block_trailing_comma` where commas were not added to the blocks of bodies whose arm had a guard that did not fit on the same line as the pattern [#4998](https://github.com/rust-lang/rustfmt/pull/4998)\n- Fixed bug in cases where derive attributes started with a block style comment [#4984](https://github.com/rust-lang/rustfmt/issues/4984)\n- Fixed issue where the struct rest could be lost when `struct_field_align_threshold` was enabled [#4926](https://github.com/rust-lang/rustfmt/issues/4926)\n- Handles cases where certain control flow type expressions have comments between patterns/keywords and the pattern ident contains the keyword [#5009](https://github.com/rust-lang/rustfmt/issues/5009)\n- Handles tuple structs that have explicit visibilities and start with a block style comment [#5011](https://github.com/rust-lang/rustfmt/issues/5011)\n- Handles leading line-style comments in certain types of macro calls [#4615](https://github.com/rust-lang/rustfmt/issues/4615)\n\n\n### Added\n- Granular width heuristic options made available for user control [PR #4782](https://github.com/rust-lang/rustfmt/pull/4782). This includes the following:\n  - [`array_width`](https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#array_width)\n  - [`attr_fn_like_width`](https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#attr_fn_like_width)\n  - [`chain_width`](https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#chain_width)\n  - [`fn_call_width`](https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#fn_call_width)\n  - [`single_line_if_else_max_width`](https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#single_line_if_else_max_width)\n  - [`struct_lit_width`](https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#struct_lit_width)\n  - [`struct_variant_width`](https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#struct_variant_width)\n\nNote this hit the rustup distributions prior to the v1.4.38 release as part of an out-of-cycle updates, but is listed in this version because the feature was not in the other v1.4.37 releases. See also the `use_small_heuristics` section on the configuration site for more information\n[https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#use_small_heuristics](https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#use_small_heuristics)\n\n- New `One` variant added to `imports_granularity` configuration option which can be used to reformat all imports into a single use statement [#4669](https://github.com/rust-lang/rustfmt/issues/4669)\n- rustfmt will now skip files that are annotated with `@generated` at the top of the file [#3958](https://github.com/rust-lang/rustfmt/issues/3958)\n  if `format_generated_files` option is set to `false` (by default `@generated` files are formatted)\n- New configuration option `hex_literal_case` that allows user to control the casing utilized for hex literals [PR #4903](https://github.com/rust-lang/rustfmt/pull/4903)\n\nSee the section on the configuration site for more information\nhttps://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#hex_literal_case\n\n- `cargo fmt` now directly supports the `--check` flag, which means it's now possible to run `cargo fmt --check` instead of the more verbose `cargo fmt -- --check` [#3888](https://github.com/rust-lang/rustfmt/issues/3888)\n\n### Install/Download Options\n- **rustup (nightly)** - *pending*\n- **GitHub Release Binaries** - [Release v1.4.38](https://github.com/rust-lang/rustfmt/releases/tag/v1.4.38)\n- **Build from source** - [Tag v1.4.38](https://github.com/rust-lang/rustfmt/tree/v1.4.38), see instructions for how to [install rustfmt from source][install-from-source]\n\n## [1.4.37] 2021-04-03\n\n### Changed\n\n- `rustc-ap-*` crates updated to v712.0.0\n\n### Fixed\n- Resolve idempotence issue related to indentation of macro defs that contain or-patterns with inner comments ([#4603](https://github.com/rust-lang/rustfmt/issues/4603))\n- Addressed various clippy and rustc warnings\n\n### Install/Download Options\n- **crates.io package** - *pending*\n- **rustup (nightly)** - *pending*\n- **GitHub Release Binaries** - [Release v1.4.37](https://github.com/rust-lang/rustfmt/releases/tag/v1.4.37)\n- **Build from source** - [Tag v1.4.37](https://github.com/rust-lang/rustfmt/tree/v1.4.37), see instructions for how to [install rustfmt from source][install-from-source]\n\n## [1.4.36] 2021-02-07\n\n### Changed\n\n- `rustc-ap-*` crates updated to v705.0.0\n\n### Install/Download Options\n- **crates.io package** - *pending*\n- **rustup (nightly)** - *pending*\n- **GitHub Release Binaries** - [Release v1.4.36](https://github.com/rust-lang/rustfmt/releases/tag/v1.4.36)\n- **Build from source** - [Tag v1.4.36](https://github.com/rust-lang/rustfmt/tree/v1.4.36), see instructions for how to [install rustfmt from source][install-from-source]\n\n## [1.4.35] 2021-02-03\n\n### Changed\n\n- `rustc-ap-*` crates updated to v702.0.0\n\n### Install/Download Options\n- **crates.io package** - *pending*\n- **rustup (nightly)** - *n/a (superseded by [v1.4.36](#1436-2021-02-07))\n- **GitHub Release Binaries** - [Release v1.4.35](https://github.com/rust-lang/rustfmt/releases/tag/v1.4.35)\n- **Build from source** - [Tag v1.4.35](https://github.com/rust-lang/rustfmt/tree/v1.4.35), see instructions for how to [install rustfmt from source][install-from-source]\n\n## [1.4.34] 2021-01-28\n\n### Fixed\n- Don't insert trailing comma on (base-less) rest in struct literals within macros ([#4675](https://github.com/rust-lang/rustfmt/issues/4675))\n\n### Install/Download Options\n- **crates.io package** - *pending*\n- **rustup (nightly)** - Starting in `2021-01-31`\n- **GitHub Release Binaries** - [Release v1.4.34](https://github.com/rust-lang/rustfmt/releases/tag/v1.4.34)\n- **Build from source** - [Tag v1.4.34](https://github.com/rust-lang/rustfmt/tree/v1.4.34), see instructions for how to [install rustfmt from source][install-from-source]\n\n## [1.4.33] 2021-01-27\n\n### Changed\n- `merge_imports` configuration has been deprecated in favor of the new `imports_granularity` option. Any existing usage of `merge_imports` will be automatically mapped to the corresponding value on `imports_granularity` with a warning message printed to encourage users to update their config files.\n\n### Added\n- New `imports_granularity` option has been added which succeeds `merge_imports`. This new option supports several additional variants which allow users to merge imports at different levels (crate or module), and even flatten imports to have a single use statement per item. ([PR #4634](https://github.com/rust-lang/rustfmt/pull/4634), [PR #4639](https://github.com/rust-lang/rustfmt/pull/4639))\n\nSee the section on the configuration site for more information\nhttps://rust-lang.github.io/rustfmt/?version=v1.4.33&search=#imports_granularity\n\n### Fixed\n- Fix erroneous removal of `const` keyword on const trait impl ([#4084](https://github.com/rust-lang/rustfmt/issues/4084))\n- Fix incorrect span usage wit const generics in supertraits ([#4204](https://github.com/rust-lang/rustfmt/issues/4204))\n- Use correct span for const generic params ([#4263](https://github.com/rust-lang/rustfmt/issues/4263))\n- Correct span on const generics to include type bounds ([#4310](https://github.com/rust-lang/rustfmt/issues/4310))\n- Idempotence issue on blocks containing only empty statements ([#4627](https://github.com/rust-lang/rustfmt/issues/4627) and [#3868](https://github.com/rust-lang/rustfmt/issues/3868))\n- Fix issue with semicolon placement on required functions that have a trailing comment that ends in a line-style comment before the semicolon ([#4646](https://github.com/rust-lang/rustfmt/issues/4646))\n- Avoid shared interned cfg_if symbol since rustfmt can re-initialize the rustc_ast globals on multiple inputs ([#4656](https://github.com/rust-lang/rustfmt/issues/4656))\n\n### Install/Download Options\n- **crates.io package** - *pending*\n- **rustup (nightly)** - n/a (superseded by [v1.4.34](#1434-2021-01-28))\n- **GitHub Release Binaries** - [Release v1.4.33](https://github.com/rust-lang/rustfmt/releases/tag/v1.4.33)\n- **Build from source** - [Tag v1.4.33](https://github.com/rust-lang/rustfmt/tree/v1.4.33), see instructions for how to [install rustfmt from source][install-from-source]\n\n## [1.4.32] 2021-01-16\n\n### Fixed\n- Indentation now correct on first bound in cases where the generic bounds are multiline formatted and the first bound itself is multiline formatted ([#4636](https://github.com/rust-lang/rustfmt/issues/4636))\n\n### Install/Download Options\n- **crates.io package** - *pending*\n- **rustup (nightly)** - Starting in `2021-01-18`\n- **GitHub Release Binaries** - [Release v1.4.32](https://github.com/rust-lang/rustfmt/releases/tag/v1.4.32)\n- **Build from source** - [Tag v1.4.32](https://github.com/rust-lang/rustfmt/tree/v1.4.32), see instructions for how to [install rustfmt from source][install-from-source]\n\n## [1.4.31] 2021-01-09\n\n### Changed\n\n- `rustc-ap-*` crates updated to v697.0.0\n\n### Added\n- Support for 2021 Edition [#4618](https://github.com/rust-lang/rustfmt/pull/4618))\n\n### Install/Download Options\n- **crates.io package** - *pending*\n- **rustup (nightly)** - Starting in `2021-01-16`\n- **GitHub Release Binaries** - [Release v1.4.31](https://github.com/rust-lang/rustfmt/releases/tag/v1.4.31)\n- **Build from source** - [Tag v1.4.31](https://github.com/rust-lang/rustfmt/tree/v1.4.31), see instructions for how to [install rustfmt from source][install-from-source]\n\n## [1.4.30] 2020-12-20\n\n### Fixed\n- Last character in derive no longer erroneously stripped when `indent_style` is overridden to `Visual`. ([#4584](https://github.com/rust-lang/rustfmt/issues/4584))\n- Brace wrapping of closure bodies maintained in cases where the closure has an explicit return type and the body consists of a single expression statement. ([#4577](https://github.com/rust-lang/rustfmt/issues/4577))\n- No more panics on invalid code with `err` and `typeof` types ([#4357](https://github.com/rust-lang/rustfmt/issues/4357), [#4586](https://github.com/rust-lang/rustfmt/issues/4586))\n\n### Install/Download Options\n- **crates.io package** - *pending*\n- **rustup (nightly)** - Starting in `2020-12-25`\n- **GitHub Release Binaries** - [Release v1.4.30](https://github.com/rust-lang/rustfmt/releases/tag/v1.4.30)\n- **Build from source** - [Tag v1.4.30](https://github.com/rust-lang/rustfmt/tree/v1.4.30), see instructions for how to [install rustfmt from source][install-from-source]\n\n## [1.4.29] 2020-12-04\n\n### Fixed\n- Negative polarity on non-trait impl now preserved. ([#4566](https://github.com/rust-lang/rustfmt/issues/4566))\n\n### Install/Download Options\n- **crates.io package** - *pending*\n- **rustup (nightly)** - Starting in `2020-12-07`\n- **GitHub Release Binaries** - [Release v1.4.29](https://github.com/rust-lang/rustfmt/releases/tag/v1.4.29)\n- **Build from source** - [Tag v1.4.29](https://github.com/rust-lang/rustfmt/tree/v1.4.29), see instructions for how to [install rustfmt from source][install-from-source]\n\n## [1.4.28] 2020-11-29\n\n### Changed\n\n- `rustc-ap-*` crates updated to v691.0.0\n- In the event of an invalid inner attribute on a `cfg_if` condition, rustfmt will now attempt to continue and format the imported modules. Previously rustfmt would emit the parser error about an inner attribute being invalid in this position, but for rustfmt's purposes the invalid attribute doesn't prevent nor impact module formatting.\n\n### Added\n\n- [`group_imports`][group-imports-config-docs] - a new configuration option that allows users to control the strategy used for grouping imports ([#4107](https://github.com/rust-lang/rustfmt/issues/4107))\n\n[group-imports-config-docs]: https://github.com/rust-lang/rustfmt/blob/v1.4.28/Configurations.md#group_imports\n\n### Fixed\n- Formatting of malformed derived attributes is no longer butchered. ([#3898](https://github.com/rust-lang/rustfmt/issues/3898), [#4029](https://github.com/rust-lang/rustfmt/issues/4029), [#4115](https://github.com/rust-lang/rustfmt/issues/4115), [#4545](https://github.com/rust-lang/rustfmt/issues/4545))\n- Correct indentation used in macro branches when `hard_tabs` is enabled. ([#4152](https://github.com/rust-lang/rustfmt/issues/4152))\n- Comments between the visibility modifier and item name are no longer dropped. ([#2781](https://github.com/rust-lang/rustfmt/issues/2781))\n- Comments preceding the assignment operator in type aliases are no longer dropped. ([#4244](https://github.com/rust-lang/rustfmt/issues/4244))\n- Comments between {`&` operator, lifetime, `mut` kw, type} are no longer dropped. ([#4245](https://github.com/rust-lang/rustfmt/issues/4245))\n- Comments between type bounds are no longer dropped. ([#4243](https://github.com/rust-lang/rustfmt/issues/4243))\n- Function headers are no longer dropped on foreign function items. ([#4288](https://github.com/rust-lang/rustfmt/issues/4288))\n- Foreign function blocks are no longer dropped. ([#4313](https://github.com/rust-lang/rustfmt/issues/4313))\n- `where_single_line` is no longer incorrectly applied to multiline function signatures that have no `where` clause. ([#4547](https://github.com/rust-lang/rustfmt/issues/4547))\n- `matches!` expressions with multiple patterns and a destructure pattern are now able to be formatted. ([#4512](https://github.com/rust-lang/rustfmt/issues/4512))\n\n### Install/Download Options\n- **crates.io package** - *pending*\n- **rustup (nightly)** - n/a (superseded by [v1.4.29](#1429-2020-12-04))\n- **GitHub Release Binaries** - [Release v1.4.28](https://github.com/rust-lang/rustfmt/releases/tag/v1.4.28)\n- **Build from source** - [Tag v1.4.28](https://github.com/rust-lang/rustfmt/tree/v1.4.28), see instructions for how to [install rustfmt from source][install-from-source]\n\n## [1.4.27] 2020-11-16\n\n### Fixed\n\n- Leading comments in an extern block are no longer dropped (a bug that exists in v1.4.26). ([#4528](https://github.com/rust-lang/rustfmt/issues/4528))\n\n### Install/Download Options\n- **crates.io package** - *pending*\n- **rustup (nightly)** - Starting in `2020-11-18`\n- **GitHub Release Binaries** - [Release v1.4.27](https://github.com/rust-lang/rustfmt/releases/tag/v1.4.27)\n- **Build from source** - [Tag v1.4.27](https://github.com/rust-lang/rustfmt/tree/v1.4.27), see instructions for how to [install rustfmt from source][install-from-source]\n\n## [1.4.26] 2020-11-14\n\n### Changed\n\n- Original comment indentation for trailing comments within an `if` is now taken into account when determining the indentation level to use for the trailing comment in formatted code. This does not modify any existing code formatted with rustfmt; it simply gives the programmer discretion to specify whether the comment is associated to the `else` block, or if the trailing comment is just a member of the `if` block. ([#1575](https://github.com/rust-lang/rustfmt/issues/1575), [#4120](https://github.com/rust-lang/rustfmt/issues/4120), [#4506](https://github.com/rust-lang/rustfmt/issues/4506))\n\nIn this example the `// else comment` refers to the `else`:\n```rust\n// if comment\nif cond {\n    \"if\"\n// else comment\n} else {\n    \"else\"\n}\n```\n\nWhereas in this case the `// continue` comments are members of their respective blocks and do not refer to the `else` below.\n```rust\nif toks.eat_token(Token::Word(\"modify\"))? && toks.eat_token(Token::Word(\"labels\"))? {\n    if toks.eat_token(Token::Colon)? {\n        // ate the token\n    } else if toks.eat_token(Token::Word(\"to\"))? {\n        // optionally eat the colon after to, e.g.:\n        // @rustbot modify labels to: -S-waiting-on-author, +S-waiting-on-review\n        toks.eat_token(Token::Colon)?;\n    } else {\n        // It's okay if there's no to or colon, we can just eat labels\n        // afterwards.\n    }\n    1 + 2;\n    // continue\n} else if toks.eat_token(Token::Word(\"label\"))? {\n    // continue\n} else {\n    return Ok(None);\n}\n```\n\n### Fixed\n- Formatting of empty blocks with attributes which only contained comments is no longer butchered.([#4475](https://github.com/rust-lang/rustfmt/issues/4475), [#4467](https://github.com/rust-lang/rustfmt/issues/4467), [#4452](https://github.com/rust-lang/rustfmt/issues/4452#issuecomment-705886282), [#4522](https://github.com/rust-lang/rustfmt/issues/4522))\n- Indentation of trailing comments in non-empty extern blocks is now correct. ([#4120](https://github.com/rust-lang/rustfmt/issues/4120#issuecomment-696491872))\n\n### Install/Download Options\n- **crates.io package** - *pending*\n- **rustup (nightly)** - Starting in `2020-11-16`\n- **GitHub Release Binaries** - [Release v1.4.26](https://github.com/rust-lang/rustfmt/releases/tag/v1.4.26)\n- **Build from source** - [Tag v1.4.26](https://github.com/rust-lang/rustfmt/tree/v1.4.26), see instructions for how to [install rustfmt from source][install-from-source]\n\n## [1.4.25] 2020-11-10\n\n### Changed\n\n- Semicolons are no longer automatically inserted on trailing expressions in macro definition arms ([#4507](https://github.com/rust-lang/rustfmt/pull/4507)). This gives the programmer control and discretion over whether there should be semicolons in these scenarios so that potential expansion issues can be avoided.\n\n### Install/Download Options\n- **crates.io package** - *pending*\n- **rustup (nightly)** - Starting in `2020-11-14`\n- **GitHub Release Binaries** - [Release v1.4.25](https://github.com/rust-lang/rustfmt/releases/tag/v1.4.25)\n- **Build from source** - [Tag v1.4.25](https://github.com/rust-lang/rustfmt/tree/v1.4.25), see instructions for how to [install rustfmt from source][install-from-source]\n\n## [1.4.24] 2020-11-05\n\n### Changed\n\n- Block wrapped match arm bodies containing a single macro call expression are no longer flattened ([#4496](https://github.com/rust-lang/rustfmt/pull/4496)). This allows programmer discretion so that the block wrapping can be preserved in cases where needed to prevent issues in expansion, such as with trailing semicolons, and aligns with updated [Style Guide guidance](https://github.com/rust-dev-tools/fmt-rfcs/blob/master/guide/expressions.md#macro-call-expressions) for such scenarios.\n\n### Fixed\n- Remove useless `deprecated` attribute on a trait impl block in the rustfmt lib, as these now trigger errors ([rust-lang/rust/#78626](https://github.com/rust-lang/rust/pull/78626))\n\n### Install/Download Options\n- **crates.io package** - *pending*\n- **rustup (nightly)** - Starting in `2020-11-09`\n- **GitHub Release Binaries** - [Release v1.4.24](https://github.com/rust-lang/rustfmt/releases/tag/v1.4.24)\n- **Build from source** - [Tag v1.4.24](https://github.com/rust-lang/rustfmt/tree/v1.4.24), see instructions for how to [install rustfmt from source][install-from-source]\n\n## [1.4.23] 2020-10-30\n\n### Changed\n\n- Update `rustc-ap-*` crates to v686.0.0\n\n### Added\n- Initial support for formatting new ConstBlock syntax ([#4478](https://github.com/rust-lang/rustfmt/pull/4478))\n\n### Fixed\n- Handling of unclosed delimiter-only parsing errors in input files ([#4466](https://github.com/rust-lang/rustfmt/issues/4466))\n- Misc. minor parser bugs ([#4418](https://github.com/rust-lang/rustfmt/issues/4418) and [#4431](https://github.com/rust-lang/rustfmt/issues/4431))\n- Panic on nested tuple access ([#4355](https://github.com/rust-lang/rustfmt/issues/4355))\n- Unable to disable license template path via cli override ([#4487](https://github.com/rust-lang/rustfmt/issues/4487))\n- Preserve comments in empty statements [#4018](https://github.com/rust-lang/rustfmt/issues/4018))\n- Indentation on skipped code [#4398](https://github.com/rust-lang/rustfmt/issues/4398))\n\n### Install/Download Options\n- **crates.io package** - *pending*\n- **rustup (nightly)** - n/a (superseded by [v1.4.24](#1424-2020-11-05))\n- **GitHub Release Binaries** - [Release v1.4.23](https://github.com/rust-lang/rustfmt/releases/tag/v1.4.23)\n- **Build from source** - [Tag v1.4.23](https://github.com/rust-lang/rustfmt/tree/v1.4.23), see instructions for how to [install rustfmt from source][install-from-source]\n\n\n\n## [1.4.22] 2020-10-04\n\n### Changed\n\n- Update `rustc-ap-*` crates to v679.0.0\n- Add config option to allow control of leading match arm pipes\n- Support `RUSTFMT` environment variable in `cargo fmt` to run specified `rustfmt` instance\n\n### Fixed\n\n- Fix preservation of type aliases within extern blocks\n\n\n## [1.4.9] 2019-10-07\n\n### Changed\n\n- Update `rustc-ap-*` crates to 606.0.0.\n\n### Fixed\n\n- Fix aligning comments of different group\n- Fix flattening imports with a single `self`.\n- Fix removing attributes on function parameters.\n- Fix removing `impl` keyword from opaque type.\n\n## [1.4.8] 2019-09-08\n\n### Changed\n\n- Update `rustc-ap-*` crates to 583.0.0.\n\n## [1.4.7] 2019-09-06\n\n### Added\n\n- Add `--config` command line option.\n\n### Changed\n\n- Update `rustc-ap-*` crates to 581.0.0.\n- rustfmt now do not warn against trailing whitespaces inside macro calls.\n\n### Fixed\n\n- Fix `merge_imports` generating invalid code.\n- Fix removing discriminant values on enum variants.\n- Fix modules defined inside `cfg_if!` not being formatted.\n- Fix minor formatting issues.\n\n## [1.4.6] 2019-08-28\n\n### Added\n\n- Add `--message-format` command line option to `cargo-fmt`.\n- Add `-l,--files-with-diff` command line option to `rustfmt`.\n- Add `json` emit mode.\n\n### Fixed\n\n- Fix removing attributes on struct pattern's fields.\n- Fix non-idempotent formatting of match arm.\n- Fix `merge_imports` generating invalid code.\n- Fix imports with `#![macro_use]` getting reordered with `reorder_imports`.\n- Fix calculation of line numbers in checkstyle output.\n- Fix poor formatting of complex fn type.\n\n## [1.4.5] 2019-08-13\n\n### Fixed\n\n- Fix generating invalid code when formatting an impl block with const generics inside a where clause.\n- Fix adding a trailing space after a `dyn` keyword which is used as a macro argument by itself.\n\n## [1.4.4] 2019-08-06\n\n### Fixed\n\n- Fix `cargo fmt` incorrectly formatting crates that is not part of the workspace or the path dependencies.\n- Fix removing a trailing comma from a tuple pattern.\n\n## [1.4.3] 2019-08-02\n\n### Changed\n\n- Update `rustc-ap-*` crates to 546.0.0.\n\n### Fixed\n\n- Fix an underscore pattern getting removed.\n\n## [1.4.2] 2019-07-31\n\n### Changed\n\n- Explicitly require the version of `rustfmt-config_proc_macro` to be 0.1.2 or later.\n\n## [1.4.1] 2019-07-30\n\n### Changed\n\n- Update `rustc-ap-*` crates to 542.0.0.\n\n## [1.4.0] 2019-07-29\n\n### Added\n\n- Add new attribute `rustfmt::skip::attributes` to prevent rustfmt\nfrom formatting an attribute #3665\n\n### Changed\n\n- Update `rustc-ap-*` crates to 541.0.0.\n- Remove multiple semicolons.\n\n## [1.3.3] 2019-07-15\n\n### Added\n\n- Add `--manifest-path` support to `cargo fmt` (#3683).\n\n### Fixed\n\n- Fix `cargo fmt -- --help` printing nothing (#3620).\n- Fix inserting an extra comma (#3677).\n- Fix incorrect handling of CRLF with `file-lines` (#3684).\n- Fix `print-config=minimal` option (#3687).\n\n## [1.3.2] 2019-07-06\n\n### Fixed\n\n- Fix rustfmt crashing when `await!` macro call is used in a method chain.\n- Fix rustfmt not recognizing a package whose name differs from its directory's name.\n\n## [1.3.1] 2019-06-30\n\n### Added\n\n- Implement the `Display` trait on the types of `Config`.\n\n### Changed\n\n- `ignore` configuration option now only supports paths separated by `/`. Windows-style paths are not supported.\n- Running `cargo fmt` in a sub-directory of a project is now supported.\n\n### Fixed\n\n- Fix bugs that may cause rustfmt to crash.\n\n## [1.3.0] 2019-06-09\n\n### Added\n\n- Format modules defined inside `cfg_if` macro calls #3600\n\n### Changed\n\n- Change option `format_doc_comment` to `format_code_in_doc_comment`.\n- `use_small_heuristics` changed to be an enum and stabilised. Configuration\n  options are now ready for 1.0.\n- Stabilise `fn_args_density` configuration option and rename it to `fn_args_layout` #3581\n- Update `rustc-ap-*` crates to 486.0.0\n- Ignore sub-modules when skip-children is used #3607\n- Removed bitrig support #3608\n\n### Fixed\n\n- `wrap_comments` should not imply `format_doc_comments` #3535\n- Incorrect handling of const generics #3555\n- Add the handling for `vec!` with paren inside macro #3576\n- Format trait aliases with where clauses #3586\n- Catch panics from the parser while rewriting macro calls #3589\n- Fix erasing inner attributes in struct #3593\n- Inline the attribute with its item even with the `macro_use` attribute or when `reorder_imports` is disabled #3598\n- Fix the bug add unwanted code to impl #3602\n\n## [1.2.2] 2019-04-24\n\n### Fixed\n\n- Fix processing of `ignore` paths #3522\n- Attempt to format attributes if only they exist #3523\n\n## [1.2.1] 2019-04-18\n\n### Added\n\n- Add `--print-config current` CLI option b473e65\n- Create GitHub [page](https://rust-lang.github.io/rustfmt/) for Configuration.md #3485\n\n### Fixed\n\n- Keep comment appearing between parameter's name and its type #3491\n- Do not delete semicolon after macro call with square brackets #3500\n- Fix `--version` CLI option #3506\n- Fix duplication of attributes on a match arm's body #3510\n- Avoid overflowing item with attributes #3511\n\n## [1.2.0] 2019-03-27\n\n### Added\n\n- Add new attribute `rustfmt::skip::macros` to prevent rustfmt from formatting a macro #3454\n\n### Changed\n\n- Discard error report in silent_emitter #3466\n\n### Fixed\n\n- Fix bad performance on deeply nested binary expressions #3467\n- Use BTreeMap to guarantee consistent ordering b4d4b57\n\n## [1.1.1] 2019-03-21\n\n### Fixed\n\n- Avoid panic on macro inside deeply nested block c9479de\n- Fix line numbering in missed spans and handle file_lines in edge cases cdd08da\n- Fix formatting of async blocks 1fa06ec\n- Avoid duplication on the presence of spaces between macro name and `!` #3464\n\n## [1.1.0] 2019-03-17\n\n### Added\n\n- Add `inline_attribute_width` configuration option to write an item and its attribute on the same line if their combined width is below a threshold #3409\n- Support `const` generics f0c861b\n- Support path clarity module #3448\n\n### Changed\n\n- Align loop and while formatting 7d9a2ef\n- Support `EmitMode::ModifiedLines` with stdin input #3424\n- Update `rustc-ap-*` crates to 407.0.0\n- Remove trailing whitespaces in missing spans 2d5bc69\n\n### Fixed\n\n- Do not remove comment in the case of no arg 8e3ef3e\n- Fix `Ident of macro+ident gets duplicated` error 40ff078\n- Format the if expression at the end of the block in a single line 5f3dfe6\n\n## [1.0.3] 2019-02-14\n\n### Added\n\n- Point unstable options to tracking issues 412dcc7\n\n### Changed\n\n- Update `rustc-ap-*` crates to 373.0.0\n\n## [1.0.2] 2019-02-12\n\n### Added\n\n- Add a [section](https://github.com/rust-lang/rustfmt/blob/ae331be/Contributing.md#version-gate-formatting-changes) to the Contributing.md file about version-gating formatting changes 36e2cb0\n- Allow specifying package with `-p` CLI option a8d2591\n- Support `rustfmt::skip` on imports #3289\n- Support global `rustfmt.toml` to be written in user config directory #3280\n- Format visibility on trait alias 96a3df3\n\n### Changed\n\n- Do not modify original source code inside macro call #3260\n- Recognize strings inside comments in order to avoid indenting them baa62c6\n- Use Unicode-standard char width to wrap comments or strings a01990c\n- Change new line point in the case of no args #3294\n- Use the same formatting rule between functions and macros #3298\n- Update rustc-ap-rustc_target to 366.0.0, rustc-ap-syntax to 366.0.0, and rustc-ap-syntax_pos to 366.0.0\n\n### Fixed\n\n- rewrite_comment: fix block fallback when failing to rewrite an itemized block ab7f4e1\n- Catch possible tokenizer panics #3240\n- Fix macro indentation on Windows #3266\n- Fix shape when formatting return or break expr on statement position #3259\n- rewrite_comment: fix block fallback when failing to rewrite an itemized block\n- Keep leading double-colon to respect the 2018 edition of rust's paths a2bfc02\n- Fix glob and nested global imports 2125ad2\n- Do not force trailing comma when using mixed layout #3306\n- Prioritize `single_line_fn` and `empty_item_single_line` over `brace_style` #3308\n- Fix `internal error: left behind trailing whitespace` with long lines c2534f5\n- Fix attribute duplication #3325\n- Fix formatting of strings within a macro 813aa79\n- Handle a macro argument with a single keyword 9a7ea6a\n\n## [1.0.1] 2018-12-09\n\n### Added\n\n- Add a `version` option 378994b\n\n### Changed\n\n- End expressions like return/continue/break with a semicolon #3223\n- Update rustc-ap-rustc_target to 306.0.0, rustc-ap-syntax to 306.0.0, and rustc-ap-syntax_pos to 306.0.0\n\n### Fixed\n\n- Allow to run a rustfmt command from cargo-fmt even when there is no target a2da636\n- Fix `un-closed delimiter` errors when formatting break labels 40174e9\n\n## [1.0.0] 2018-11-19\n\n### Changed\n\n- Preserve possibly one whitespace for brace macros 1a3bc79\n- Prefer to break arguments over putting output type on the next line 1dd54e6\n\n## [0.99.9] 2018-11-15\n\n### Changed\n\n- Update rustc-ap-rustc_target to 297.0.0, rustc-ap-syntax to 297.0.0, to rustc-ap-syntax_pos to 297.0.0\n- Don't align comments on `extern crate`s dd7add7\n\n## [0.99.8] 2018-11-14\n\n### Added\n\n- Add `overflow_delimited_expr` config option to more aggressively allow overflow #3175\n\n### Fixed\n\n- Fix the logic for retaining a comment before the arrow in a match #3181\n- Do not wrap comments in doctest to avoid failing doctest runs #3183\n- Fix comment rewriting that was wrapping code into a line comment #3188\n- Fix formatting of unit-struct with `where`-clause #3200\n\n## [0.99.7] 2018-11-07\n\n### Changed\n\n- Force a newline after the `if` condition if there is a different indentation level #3109\n- Use correct width when formatting type on local statement #3126\n- Treat crates non-alphabetically when ordering 799005f\n- Fix formatting of code that is annotated with rustfmt::skip #3113\n- Stabilize `edition` configuration option 9c3ae2d\n- cargo-fmt: detect Rust edition in use #3129\n- Trim the indentation on macros which heuristically appear to use block-style indentation #3178\n\n### Fixed\n\n- Do not remove path disambiguator inside macro #3142\n- Improve handling of Windows newlines #3141\n- Fix alignment of a struct's fields (`struct_field_align_threshold` option) with the Visual `indent_style` #3165\n- Fix a bug in formatting markdown lists within comments #3172\n\n## [0.99.6] 2018-10-18\n\n### Added\n\n- Add `enum_discrim_align_threshold` option to vertically align enum discriminants cc22869\n- Add `println!`-like heuristic to the `fail` attribute #3067\n- Handle itemized items inside comments #3083\n- Add `format_doc_comments` configuration option to control the formatting of code snippets inside comments #3089\n\n### Changed\n\n- Makes brace behavior consistent with empty bodies for traits and impls 2727d41\n- Consider a multi-lined array as a block-like expression #3969\n- Improve formatting of strings #3073\n- Get rid of extra commas in Visual struct literal formatting #3077\n- Update rustc-ap-rustc_target to 274.0.0, rustc-ap-syntax to 274.0.0, and rustc-ap-syntax_pos to 274.0.0\n- Format macro calls with item-like arguments #3080\n- Avoid control flow expressions conditions to go multi line ef59b34\n- Simplify multi-lining binop expressions #3101\n\n### Fixed\n\n- Do not format a code block in documentation if it is annotated with ignore or text 2bcc3a9\n- Fix inconsistent overflow behavior in Visual style #3078\n- Fix corner cases of the string formatting implementation #3083\n- Do not add parens around lifetimes 0ac68c9\n- Catch parser panic in format_snippet 8c4e92a\n\n## [0.99.5] 2018-09-25\n\n### Added\n\n- Handle leading module separator for 2018 Edition #2952\n- Add configuration option `normalize_doc_attributes`: convert doc attributes to comments #3002\n\n### Changed\n\n- Accept 2015 and 2018 instead of Edition2015 and Edition2018 for edition option eec7436\n- Support platforms without a timer 46e2a2e\n- Update rustc-ap-rustc_target to 263.0.0, rustc-ap-syntax to 263.0.0, and rustc-ap-syntax_pos to 263.0.0\n\n### Fixed\n\n- Format of attributes with commas #2971\n- Fix optional arg condensing #2972\n- Improve formatting of long function parameters #2981\n- Fix formatting of raw string literals #2983\n- Handle chain with try operators with spaces #2986\n- Use correct shape in Visual tuple rewriting #2987\n- Improve formatting of arguments with `visual_style = \"Visual\"` option #2988\n- Change `print_diff` to output the correct line number 992b179\n- Propagate errors about failing to rewrite a macro 6f318e3\n- Handle formatting of long function signature #3010\n- Fix indent computation of a macro with braces c3edf6d\n- Format generics on associated types #3035\n- Incorrect indentation of multiline block match expression #3042\n- Fix bug in import where two consecutive module separators were possible 98a0ef2\n- Prevent right-shifting of block comments with bare lines 5fdb6db\n\n## [0.99.4] 2018-08-27\n\n### Added\n\n- Handle formatting of underscore imports #2951\n- Handle formatting of try blocks #2965\n\n### Changed\n\n- Update rustc-ap-rustc_target to 237.0.0, rustc-ap-syntax to 237.0.0, and rustc-ap-syntax_pos to 237.0.0 ca19c9a\n- Consider `dev` channel as nightly for unstable features #2948\n\n### Fixed\n\n- Fix formatting of patterns with ellipsis # 2942\n\n## [0.99.3] 2018-08-23\n\n### Added\n\n- Use path attribute when searching for modules #2901\n- Expose FileLines JSON representation to allow external libraries to use the file_lines option #2915\n\n### Changed\n\n- Replace '--config-help' with '--config=help' cb10e06\n- Improve formatting of slice patterns #2912\n\n### Fixed\n\n- Format chains with comment #2899\n- Fix indentation of formatted macro body #2920\n- Fix indentation of block comments f23e6aa\n\n## [0.99.2] 2018-08-07\n\n### Changed\n\n- Update rustc-ap-rustc_target to 218.0.0, rustc-ap-syntax to 218.0.0, and rustc-ap-syntax_pos to 218.0.0 5c9a2b6\n- Combine function-like attributes #2900\n\n### Fixed\n\n- Explicitly handle semicolon after the item in statement position d96e3ca\n- Fix parsing '#'-hiding of rustdoc 2eca09e\n\n## [0.99.1] 2018-08-04\n\n### Fixed\n\n- fix use statements ordering when a number is present 1928ae7\n\n## [0.99.0] 2018-08-03\n\n- 1.0 RC release\n\n### Changed\n\n- Clarification in README.md 30fe66b\n\n## [0.9.0] 2018-08-01\n\n### Added\n\n- Handle raw identifiers 3027c21\n- Format async closure 60ce411\n- Add max_width option for all heuristics c2ae39e\n- Add config option `format_macro_matchers` to format the metavariable matching patterns in macros 79c5ee8\n- Add config option `format_macro_bodies` to format the bodies of macros 79c5ee8\n- Format existential type fc307ff\n- Support raw identifiers in struct expressions f121b1a\n- Format Async block and async function 0b25f60\n\n### Changed\n\n- Update rustc-ap-rustc_target to 211.0.0, rustc-ap-syntax to 211.0.0, and rustc-ap-syntax_pos to 211.0.0\n- Put each nested import on its own line while putting non-nested imports on the same line as much as possible 42ab258\n- Respect `empty_item_single_line` config option when formatting empty impls. Put the `where` on its own line to improve readability #2771\n- Strip leading `|` in match arm patterns 1d4b988\n- Apply short function call heuristic to attributes 3abebf9\n- Indent a match guard if the pattern is multiline be4d37d\n- Change default newline style to `Native` 9d8f381\n- Improve formatting of series of binop expressions a4cdb68\n- Trigger an internal error if we skip formatting due to a lost comment b085113\n- Refactor chain formatting #2838\n\n### Fixed\n\n- Do not insert spaces around braces with empty body or multiple lines 2f65852\n- Allow using mixed layout with comments #2766\n- Handle break labels #2726\n- fix rewrite_string when a line feed is present 472a2ed\n- Fix an anomaly with comments and array literals b28a0cd\n- Check for comments after the `=>` in a match arm 6899471\n\n## [0.8.0,0.8.1,0.8.2] 2018-05-28\n\n### Added\n\n- Use scoped attributes for skip attribute https://github.com/rust-lang/rustfmt/pull/2703\n\n### Changed\n\n- Comment options `wrap_comments` and `normalize_comments` are reverted back to unstable 416bc4c\n- Stabilise `reorder_imports` and `reorder_modules` options 7b6d2b4\n- Remove `spaces_within_parens_and_brackets` option d726492\n- Stabilise shorthand options: `use_try_shorthand`, `use_field_init_shorthand`, and `force_explicit_abi` 8afe367\n- Stabilise `remove_nested_parens` and set default to true a70f716\n- Unstabilise `unstable_features` dd9c15a\n- Remove `remove_blank_lines_at_start_or_end_of_block` option 2ee8b0e\n- Update rustc-ap-syntax to 146.0.0 and rustc-ap-rustc_target to 146.0.0 2c275a2\n- Audit the public API #2639\n\n### Fixed\n\n- Handle code block in doc comment without rust prefix f1974e2\n\n## [0.7.0] 2018-05-14\n\n### Added\n\n- Add integration tests against crates in the rust-lang-nursery c79f39a\n\n### Changed\n\n- Update rustc-ap-syntax to 128.0.0 and rustc-ap-rustc_target to 128.0.0 195395f\n- Put operands on its own line when each fits in a single line f8439ce\n- Improve CLI options 55ac062 1869888 798bffb 4d9de48 eca7796 8396da1 5d9f5aa\n\n### Fixed\n\n- Use correct line width for list attribute 61a401a\n- Avoid flip-flopping impl items when reordering them 37c216c\n- Formatting breaks short lines when max_width is less than 100 9b36156\n- Fix variant \"Mixed\" of imports_layout option 8c8676c\n- Improve handling of long lines f885039\n- Fix up lines exceeding max width 51c07f4\n- Fix handling of modules in non_modrs_mods style cf573e8\n- Do not duplicate attributes on use items e59ceaf\n- Do not insert an extra brace in macros with native newlines 4c9ef93\n\n## [0.6.1] 2018-05-01\n\n### Changed\n\n- Change the default value of imports_indent to IndentStyle::Block https://github.com/rust-lang/rustfmt/pull/2662\n\n### Fixed\n\n- Handle formatting of auto traits 5b5a72c\n- Use consistent formatting for empty enum and struct https://github.com/rust-lang/rustfmt/pull/2656\n\n## [0.6.0] 2018-04-20\n\n### Changed\n\n- Improve public API 8669004\n\n## [0.5.0] 2018-04-20\n\n### Added\n\n- Add `verbose-diff` CLI option 5194984\n\n### Changed\n\n- Update rustc-ap-syntax to 103.0.0 dd807e2\n- Refactor to make a sensible public API ca610d3\n\n### Fixed\n\n- Add spaces between consecutive `..` `..=` 61d29eb\n\n## [0.4.2] 2018-04-12\n\n### Added\n\n- Handle binary operators and lifetimes 0fd174d\n- Add reorder_impl_items config option 94f5a05\n- Add `--unstable-features` CLI option to list unstable options from the `--help` output 8208f8a\n- Add merge_imports config option 5dd203e\n\n### Changed\n\n- Format macro arguments with vertical layout ec71459\n- Reorder imports by default 164cf7d\n- Do not collapse block around expr with condition on match arm 5b9b7d5\n- Use vertical layout for complex attributes c77708f\n- Format array using heuristics for function calls 98c6f7b\n- Implement stable ordering for impl items with the following item priority: type, const, macro, then method fa80ddf\n- Reorder imports by default 164cf7d\n- Group `extern crate` by default 3a138a2\n- Make `error_on_line_overflow` false by default f146711\n- Merge imports with the same prefix into a single nested import 1954513\n- Squash the various 'reorder imports' option into one 911395a\n\n### Fixed\n\n- Print version is missing the channel ca6fc67\n- Do not add the beginning vert to the match arm 1e1d9d4\n- Follow indent style config when formatting attributes efd295a\n- Do not insert newline when item is empty a8022f3\n- Do not indent or unindent inside string literal ec1907b\n\n## [0.4.1] 2018-03-16\n\n### Added\n\n- Add `ignore` configuration option.\n- Add `license_template_path` configuration option.\n- Format `lazy_static!`.\n\n### Fixed\n\n- Fix formatting bugs.\n- Fix setting `reorder_modules` removing inline modules.\n- Format attributes on block expressions.\n- Support `dyn trait` syntax.\n- Support multiple patterns in `if let` and `while let`.\n- Support a pattern with parentheses.\n\n## [0.4.0] 2018-03-02\n\n### Changed\n\n- Do not print verbose outputs when formatting with stdin.\n- Preserve trailing whitespaces in doc comments.\n- Scale the values of width heuristics by `max_width`.\n\n### Fixed\n\n- Do not reorder items with `#[macro_use]`.\n- Fix formatting bugs.\n- Support the beginning `|` on a match arm.\n\n## [0.3.8] 2018-02-04\n\n### Added\n\n- Format (or at least try to format) `macro_rules!`.\n\n## [0.3.7] 2018-02-01\n\n### Added\n\n- Add `use_field_init_shorthand` config option.\n- Add `reorder_modules` configuration option.\n\n## [0.3.6] 2018-01-18\n\n### Fixed\n\n- Fix panicking on formatting certain macros (#2371).\n\n## [0.3.5] 2018-01-15\n\n### Changed\n\n- Format code block in comments when `wrap_comments` is set to `true`.\n- Remove `same_line_attributes` configuration option.\n- Rename `git-fmt` to `git-rustfmt`.\n\n### Fixed\n\n- Rustup to `rustc 1.25.0-nightly (e6072a7b3 2018-01-13)`.\n- Fix formatting bugs.\n\n## [0.3.4] 2017-12-23\n\n### Added\n\n- Add `--version` flag to `cargo-fmt`, allow `cargo fmt --version`.\n\n### Fixed\n\n- Rustup to `rustc 1.24.0-nightly (5165ee9e2 2017-12-22)`.\n\n## [0.3.3] 2017-12-22\n\n### Added\n\n- Format trait aliases.\n\n### Changed\n\n- `cargo fmt` will format every workspace member.\n\n### Fixed\n\n- Rustup to `rustc 1.24.0-nightly (250b49205 2017-12-21)`\n- Fix formatting bugs.\n\n## [0.3.2] 2017-12-15\n\n### Changed\n\n- Warn when unknown configuration option is used.\n\n### Fixed\n\n- Rustup to `rustc 1.24.0-nightly (0077d128d 2017-12-14)`.\n\n## [0.3.1] 2017-12-11\n\n### Added\n\n- Add `error_on_unformatted` configuration option.\n- Add `--error-on-unformatted` command line option.\n\n### Changed\n\n- Do not report formatting errors on comments or strings by default.\n- Rename `error_on_line_overflow_comments` to `error_on_unformatted`.\n\n### Fixed\n\n- Fix formatting bugs.\n- Fix adding a trailing whitespace inside code block when `wrap_comments = true`.\n\n## [0.3.0] 2017-12-11\n\n### Added\n\n- Support nested imports.\n\n### Changed\n\n- Do not report errors on skipped items.\n- Do not format code block inside comments when `wrap_comments = true`.\n- Keep vertical spaces between items within range.\n- Format `format!` and its variants using compressed style.\n- Format `write!` and its variants using compressed style.\n- Format **simple** array using compressed style.\n\n### Fixed\n\n- Fix `rustfmt --package package_name` not working properly.\n- Fix formatting bugs.\n\n## [0.2.17] 2017-12-03\n\n### Added\n\n- Add `blank_lines_lower_bound` and `blank_lines_upper_bound` configuration options.\n\n### Changed\n\n- Combine configuration options related to width heuristic into `width_heuristic`.\n- If the match arm's body is `if` expression, force to use block.\n\n### Fixed\n\n- Fix `cargo fmt --all` being trapped in an infinite loop.\n- Fix many formatting bugs.\n\n### Removed\n\n- Remove legacy configuration options.\n\n## [0.2.16] 2017-11-21\n\n### Added\n\n- Remove empty lines at the beginning of the file.\n- Soft wrapping on doc comments.\n\n### Changed\n\n- Break before `|` when using multiple lines for match arm patterns.\n- Combine `control_style`, `where_style` and `*_indent` config options into `indent_style`.\n- Combine `item_brace_style` and `fn_brace_style` config options into `brace_style`.\n- Combine config options related spacing around colons into `space_before_colon` and `space_after_colon`.\n\n### Fixed\n\n- Fix many bugs.\n\n## [0.2.15] 2017-11-08\n\n### Added\n\n- Add git-fmt tool\n- `where_single_line` configuration option.\n\n### Changed\n\n- Rename `chain_one_line_max` to `chain_width`.\n- Change the suffix of indent-related configuration options to `_indent`.\n\n## [0.2.14] 2017-11-06\n\n### Fixed\n\n- Rustup to the latest nightly.\n\n## [0.2.13] 2017-10-30\n\n### Fixed\n\n- Rustup to the latest nightly.\n\n## [0.2.12] 2017-10-29\n\n### Fixed\n\n- Fix a bug that `cargo fmt` hangs forever.\n\n## [0.2.11] 2017-10-29\n\n### Fixed\n\n- Fix a bug that `cargo fmt` crashes.\n\n## [0.2.10] 2017-10-28\n\n## [0.2.9] 2017-10-16\n\n## [0.2.8] 2017-09-28\n\n## [0.2.7] 2017-09-21\n\n### Added\n\n- `binop_separator` configuration option (#1964).\n\n### Changed\n\n- Use horizontal layout for function call with a single argument.\n\n### Fixed\n\n- Fix panicking when calling `cargo fmt --all` (#1963).\n- Refactorings & faster rustfmt.\n\n## [0.2.6] 2017-09-14\n\n### Fixed\n\n- Fix a performance issue with nested block (#1940).\n- Refactorings & faster rustfmt.\n\n## [0.2.5] 2017-08-31\n\n### Added\n\n- Format and preserve attributes on statements (#1933).\n\n### Fixed\n\n- Use getters to access `Span` fields (#1899).\n\n## [0.2.4] 2017-08-30\n\n### Added\n\n- Add support for `Yield` (#1928).\n\n## [0.2.3] 2017-08-30\n\n### Added\n\n- `multiline_closure_forces_block` configuration option (#1898).\n- `multiline_match_arm_forces_block` configuration option (#1898).\n- `merge_derives` configuration option (#1910).\n- `struct_remove_empty_braces` configuration option (#1930).\n- Various refactorings.\n\n### Changed\n\n- Put single-lined block comments on the same line with list-like structure's item (#1923).\n- Preserve blank line between doc comment and attribute (#1925).\n- Put the opening and the closing braces of enum and struct on the same line, even when `item_brace_style = \"AlwaysNextLine\"` (#1930).\n\n### Fixed\n\n- Format attributes on `ast::ForeignItem` and take max width into account (#1916).\n- Ignore empty lines when calculating the shortest indent width inside macro with braces (#1918).\n- Handle tabs properly inside macro with braces (#1918).\n- Fix a typo in `compute_budgets_for_args()` (#1924).\n- Recover comment between keyword (`impl` and `trait`) and `{` which used to get removed (#1925).\n\n\n[install-from-source]: https://github.com/rust-lang/rustfmt#installing-from-source\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.1982421875,
          "content": "# The Rust Code of Conduct\n\nA version of this document [can be found online](https://www.rust-lang.org/conduct.html).\n\n## Conduct\n\n**Contact**: [rust-mods@rust-lang.org](mailto:rust-mods@rust-lang.org)\n\n* We are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other similar characteristic.\n* On IRC, please avoid using overtly sexual nicknames or other nicknames that might detract from a friendly, safe and welcoming environment for all.\n* Please be kind and courteous. There's no need to be mean or rude.\n* Respect that people have differences of opinion and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a right answer.\n* Please keep unstructured critique to a minimum. If you have solid ideas you want to experiment with, make a fork and see how it works.\n* We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behavior. We interpret the term \"harassment\" as including the definition in the <a href=\"https://github.com/stumpsyn/policies/blob/master/citizen_code_of_conduct.md/\">Citizen Code of Conduct</a>; if you have any lack of clarity about what might be included in that concept, please read their definition. In particular, we don't tolerate behavior that excludes people in socially marginalized groups.\n* Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a community member, please contact one of the channel ops or any of the [Rust moderation team][mod_team] immediately. Whether you're a regular contributor or a newcomer, we care about making this community a safe place for you and we've got your back.\n* Likewise any spamming, trolling, flaming, baiting or other attention-stealing behavior is not welcome.\n\n## Moderation\n\n\nThese are the policies for upholding our community's standards of conduct. If you feel that a thread needs moderation, please contact the [Rust moderation team][mod_team].\n\n1. Remarks that violate the Rust standards of conduct, including hateful, hurtful, oppressive, or exclusionary remarks, are not allowed. (Cursing is allowed, but never targeting another user, and never in a hateful manner.)\n2. Remarks that moderators find inappropriate, whether listed in the code of conduct or not, are also not allowed.\n3. Moderators will first respond to such remarks with a warning.\n4. If the warning is unheeded, the user will be \"kicked,\" i.e., kicked out of the communication channel to cool off.\n5. If the user comes back and continues to make trouble, they will be banned, i.e., indefinitely excluded.\n6. Moderators may choose at their discretion to un-ban the user if it was a first offense and they offer the offended party a genuine apology.\n7. If a moderator bans someone and you think it was unjustified, please take it up with that moderator, or with a different moderator, **in private**. Complaints about bans in-channel are not allowed.\n8. Moderators are held to a higher standard than other community members. If a moderator creates an inappropriate situation, they should expect less leeway than others.\n\nIn the Rust community we strive to go the extra step to look out for each other. Don't just aim to be technically unimpeachable, try to be your best self. In particular, avoid flirting with offensive or sensitive issues, particularly if they're off-topic; this all too often leads to unnecessary fights, hurt feelings, and damaged trust; worse, it can drive people away from the community entirely.\n\nAnd if someone takes issue with something you said or did, resist the urge to be defensive. Just stop doing what it was they complained about and apologize. Even if you feel you were misinterpreted or unfairly accused, chances are good there was something you could've communicated better — remember that it's your responsibility to make your fellow Rustaceans comfortable. Everyone wants to get along and we are all here first and foremost because we want to talk about cool technology. You will find that people will be eager to assume good intent and forgive as long as you earn their trust.\n\nThe enforcement policies listed above apply to all official Rust venues; including official IRC channels (#rust, #rust-internals, #rust-tools, #rust-libs, #rustc, #rust-beginners, #rust-docs, #rust-community, #rust-lang, and #cargo); GitHub repositories under rust-lang, rust-lang-nursery, and rust-lang-deprecated; and all forums under rust-lang.org (users.rust-lang.org, internals.rust-lang.org). For other projects adopting the Rust Code of Conduct, please contact the maintainers of those projects for enforcement. If you wish to use this code of conduct for your own project, consider explicitly mentioning your moderation policy or making a copy with your own moderation policy so as to avoid confusion.\n\n*Adapted from the [Node.js Policy on Trolling](http://blog.izs.me/post/30036893703/policy-on-trolling) as well as the [Contributor Covenant v1.3.0](https://www.contributor-covenant.org/version/1/3/0/).*\n\n[mod_team]: https://www.rust-lang.org/team.html#Moderation-team\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 23.2197265625,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"0.7.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e37cfd5e7657ada45f742d6e99ca5788580b5c529dc78faf11ece6dc702656f\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"annotate-snippets\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3b9d411ecbaf79885c6df4d75fff75858d5995ff25385657a28af47e82f9c36\"\ndependencies = [\n \"unicode-width\",\n \"yansi-term\",\n]\n\n[[package]]\nname = \"anstream\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1f58811cfac344940f1a400b6e6231ce35171f614f26439e80f8c1465c5cc0c\"\ndependencies = [\n \"anstyle\",\n \"anstyle-parse\",\n \"anstyle-query\",\n \"anstyle-wincon\",\n \"colorchoice\",\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b84bf0a05bbb2a83e5eb6fa36bb6e87baa08193c35ff52bbf6b38d8af2890e46\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"938874ff5980b03a87c5524b3ae5b59cf99b1d6bc836848df7bc5ada9643c333\"\ndependencies = [\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5ca11d4be1bab0c8bc8734a9aa7bf4ee8316d462a08c6ac5052f888fef5b494b\"\ndependencies = [\n \"windows-sys\",\n]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58f54d10c6dfa51283a066ceab3ec1ab78d13fae00aa49243a45e4571fb79dfd\"\ndependencies = [\n \"anstyle\",\n \"windows-sys\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.56\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4361135be9122e0870de935d7c439aef945b9f9ddd4199a553b5270b49c82a27\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bstr\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba3569f383e8f1598449f1a423e72e99569137b47740b1da11ef19af3d5c3223\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"bytecount\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5ce89b21cab1437276d2650d57e971f9d548a2d9037cc231abdc0562b97498ce\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6f3132262930b0522068049f5870a856ab8affc80c70d08b6ecb785771a6fc23\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cbdb825da8a5df079a43676dbe042702f1707b1109f713a01420fbb4cc71fa27\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fb9ac64500cc83ce4b9f8dafa78186aa008c8dea77a09b94cd307fd0cd5022a8\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"clap\"\nversion = \"4.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a13b88d2c62ff462f88e4a121f17a82c1af05693a2f192b5c38d14de73c19f6\"\ndependencies = [\n \"clap_builder\",\n \"clap_derive\",\n]\n\n[[package]]\nname = \"clap-cargo\"\nversion = \"0.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"383f21342a464d4af96e9a4cad22a0b4f2880d4a5b3bbf5c9654dd1d9a224ee4\"\ndependencies = [\n \"anstyle\",\n \"clap\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2bb9faaa7c2ef94b2743a21f5a29e6f0010dff4caa69ac8e9d6cf8b6fa74da08\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap_lex\",\n \"strsim\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0862016ff20d69b84ef8247369fabf5c008a7417002411897d40ee1f4532b873\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd7cc57abe963c6d3b9d8be5b06ba7c8957a930305ca90304f24ef040aa6f961\"\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"acbf1af155f9b9ef647e42cdc158db4b64a1b61f743629225fde6f3e0be2a7c7\"\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0bf124c720b7686e3c2663cf54062ab0f68a88af2fb6a030e87e30bf721fcb38\"\ndependencies = [\n \"cfg-if\",\n \"lazy_static\",\n]\n\n[[package]]\nname = \"diff\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e25ea47919b1560c4e3b7fe0aaab9becf5b84a10325ddf7db0f0ba5e1026499\"\n\n[[package]]\nname = \"dirs\"\nversion = \"5.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44c45a9d03d6676652bcb5e724c7e988de1acad23a711b5217ab9cbecbec2225\"\ndependencies = [\n \"dirs-sys\",\n]\n\n[[package]]\nname = \"dirs-next\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1\"\ndependencies = [\n \"cfg-if\",\n \"dirs-sys-next\",\n]\n\n[[package]]\nname = \"dirs-sys\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"520f05a5cbd335fae5a99ff7a6ab8627577660ee5cfd6a94a6a929b52ff0321c\"\ndependencies = [\n \"libc\",\n \"option-ext\",\n \"redox_users\",\n \"windows-sys\",\n]\n\n[[package]]\nname = \"dirs-sys-next\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d\"\ndependencies = [\n \"libc\",\n \"redox_users\",\n \"winapi\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"getopts\"\nversion = \"0.2.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14dbbfd5c71d70241ecf9e6f13737f7b5ce823821063188d7e46c41d371eebd5\"\ndependencies = [\n \"unicode-width\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9be70c98951c83b8d2f8f60d7065fa6d5146873094452a1008da8c2f1e4205ad\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"globset\"\nversion = \"0.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"10463d9ff00a2a068db14231982f5132edebad0d7660cd956a1c30292dbcbfbd\"\ndependencies = [\n \"aho-corasick\",\n \"bstr\",\n \"fnv\",\n \"log\",\n \"regex\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2540771e65fc8cb83cd6e8a237f70c319bd5c29f78ed1084ba5d50eeac86f7f9\"\n\n[[package]]\nname = \"ignore\"\nversion = \"0.4.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"713f1b139373f96a2e0ce3ac931cd01ee973c3c5dd7c40c0c2efe96ad2b6751d\"\ndependencies = [\n \"crossbeam-utils\",\n \"globset\",\n \"lazy_static\",\n \"log\",\n \"memchr\",\n \"regex\",\n \"same-file\",\n \"thread_local\",\n \"walkdir\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99\"\ndependencies = [\n \"autocfg\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1aab8fc367588b89dcee83ab0fd66b72b50b72fa1904d7095045ace2b0c81c35\"\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.141\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3304a64d199bb964be99741b7a14d26972741915b3649639149b2479bb46f4b5\"\n\n[[package]]\nname = \"log\"\nversion = \"0.4.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6389c490849ff5bc16be905ae24bc913a9c8892e19b2341dbc175e14c341c2b8\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"matchers\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558\"\ndependencies = [\n \"regex-automata\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"308cc39be01b73d0d18f82a0e7b2a3df85245f84af96fdddc5d202d27e47b86a\"\n\n[[package]]\nname = \"nu-ansi-term\"\nversion = \"0.46.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84\"\ndependencies = [\n \"overload\",\n \"winapi\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.17.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b7e5500299e16ebb147ae15a00a942af264cf3688f47923b8fc2cd5858f23ad3\"\n\n[[package]]\nname = \"option-ext\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04744f49eae99ab78e0d5c0b603ab218f515ea8cfe5a456d7629ad883a3b6e7d\"\n\n[[package]]\nname = \"overload\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39\"\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b368fba921b0dce7e60f5e04ec15e565b3303972b42bcfde1d0713b881959eb\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4424af4bf778aae2051a77b60283332f386554255d722233d09fbfc7e30da2fc\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62f25bc4c7e55e0b0b7a1d43fb893f4fa1361d0abe38b9ce4f323c2adfe6ef42\"\ndependencies = [\n \"bitflags\",\n]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b033d837a7cf162d7993aded9304e30a83213c648b6e389db233191f891e5c2b\"\ndependencies = [\n \"getrandom\",\n \"redox_syscall\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b1f693b24f6ac912f4893ef08244d70b6067480d2f1a46e950c9691e6749d1d\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\ndependencies = [\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1\"\n\n[[package]]\nname = \"rustfmt-config_proc_macro\"\nversion = \"0.3.0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"rustfmt-nightly\"\nversion = \"1.8.0\"\ndependencies = [\n \"annotate-snippets\",\n \"anyhow\",\n \"bytecount\",\n \"cargo_metadata\",\n \"clap\",\n \"clap-cargo\",\n \"diff\",\n \"dirs\",\n \"getopts\",\n \"ignore\",\n \"itertools\",\n \"regex\",\n \"rustfmt-config_proc_macro\",\n \"serde\",\n \"serde_json\",\n \"term\",\n \"thiserror\",\n \"toml\",\n \"tracing\",\n \"tracing-subscriber\",\n \"unicode-properties\",\n \"unicode-segmentation\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f2cc38e8fa666e2de3c4aba7edeb5ffc5246c1c2ed0e3d17e560aeeba736b23f\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73b4b750c782965c211b42f022f59af1fbceabdd026623714f104152f1ec149f\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d65bd28f48be7196d222d95b9243287f48d27aca604e08497513019ff0502cc4\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.160\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb2f3770c8bce3bcda7e149193a069a0f4365bda1fa5cd88e03bca26afc1216c\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.160\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"291a097c63d8497e00160b166a967a4a79c64f3facdd01cbd7502231688d77df\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e8d9fa5c3b304765ce1fd9c4c8a3de2c8db365a5b91be52f186efc675681d95\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_spanned\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93107647184f6027e3b7dcb2e11034cf95ffa1e3a682c67951963ac69c1c007d\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"sharded-slab\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"900fba806f70c630b0a382d0d825e17a0f19fcd059a2ade1ff237bcddf446b31\"\ndependencies = [\n \"lazy_static\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a507befe795404456341dfab10cef66ead4c041f62b8b11bbb92bffe5d0953e0\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fcf316d5356ed6847742d036f8a39c3b8435cac10bd528a4bd461928a6ab34d5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"term\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c59df8ac95d96ff9bede18eb7300b0fda5e5d8d90960e76f8e14ae765eedbf1f\"\ndependencies = [\n \"dirs-next\",\n \"rustversion\",\n \"winapi\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"978c9a314bd8dc99be594bc3c175faaa9794be04a5a5e153caba6915336cebac\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f9456a42c5b0d803c8cd86e73dd7cc9edd429499f37a3550d286d5e86720569f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"1.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5516c27b78311c50bf42c071425c560ac799b11c30b31f87e3081965fe5e0180\"\ndependencies = [\n \"once_cell\",\n]\n\n[[package]]\nname = \"toml\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d6135d499e69981f9ff0ef2167955a5333c35e36f6937d382974566b3d5b94ec\"\ndependencies = [\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"toml_edit\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a76a9312f5ba4c2dec6b9161fdf25d87ad8a09256ccea5a556fef03c706a10f\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2380d56e8670370eee6566b0bfd4265f65b3f432e8c6d85623f728d4fa31f739\"\ndependencies = [\n \"indexmap\",\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ce8c33a8d48bd45d624a6e523445fd21ec13d3653cd51f681abf67418f54eb8\"\ndependencies = [\n \"cfg-if\",\n \"pin-project-lite\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0955b8137a1df6f1a2e9a37d8a6656291ff0297c1a97c24e0d8425fe2312f79a\"\ndependencies = [\n \"once_cell\",\n \"valuable\",\n]\n\n[[package]]\nname = \"tracing-log\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ddad33d2d10b1ed7eb9d1f518a5674713876e97e5bb9b7345a7984fbb4f922\"\ndependencies = [\n \"lazy_static\",\n \"log\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-subscriber\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30a651bc37f915e81f087d86e62a18eec5f79550c7faff886f7090b4ea757c77\"\ndependencies = [\n \"matchers\",\n \"nu-ansi-term\",\n \"once_cell\",\n \"regex\",\n \"sharded-slab\",\n \"smallvec\",\n \"thread_local\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-log\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5464a87b239f13a63a501f2701565754bae92d243d4bb7eb12f6d57d2269bf4\"\n\n[[package]]\nname = \"unicode-properties\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7f91c8b21fbbaa18853c3d0801c78f4fc94cdb976699bb03e832e75f7fd22f0\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1dd624098567895118886609431a7c3b8f516e41d30e0643f03d94592a147e36\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0edd1e5b14653f783770bce4a4dabb4a5108a5370a5f5d8cfe8710c361f6c8b\"\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a\"\n\n[[package]]\nname = \"valuable\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"808cf2735cd4b6866113f648b791c6adc5714537bc222d9347bb203386ffda56\"\ndependencies = [\n \"same-file\",\n \"winapi\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.10.2+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd6fbd9a79829dd1ad0cc20627bf1ed606756a7f77edff7b66b7064f9cb327c6\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b1eb6f0cd7c80c79759c929114ef071b87354ce476d9d94271031c0497adfd5\"\ndependencies = [\n \"windows_aarch64_gnullvm\",\n \"windows_aarch64_msvc\",\n \"windows_i686_gnu\",\n \"windows_i686_msvc\",\n \"windows_x86_64_gnu\",\n \"windows_x86_64_gnullvm\",\n \"windows_x86_64_msvc\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91ae572e1b79dba883e0d315474df7305d12f569b400fcf90581b06062f7e1bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b2ef27e0d7bdfcfc7b868b317c1d32c641a6fe4629c171b8928c7b08d98d7cf3\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"622a1962a7db830d6fd0a69683c80a18fda201879f0f447f065a3b7467daa241\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4542c6e364ce21bf45d69fdd2a8e455fa38d316158cfd43b3ac1c5b1b19f8e00\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca2b8a661f7628cbd23440e50b05d705db3686f894fc9580820623656af974b1\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7896dbc1f41e08872e9d5e8f8baa8fdd2677f29468c4e156210174edc7f7b953\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a515f5799fe4961cb532f983ce2b23082366b898e52ffbce459c86f67c8378a\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.4.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca0ace3845f0d96209f0375e6d367e3eb87eb65d27d445bdc9f1843a26f39448\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"yansi-term\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe5c30ade05e61656247b2e334a031dfd0cc466fadef865bdcdea8d537951bf1\"\ndependencies = [\n \"winapi\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.619140625,
          "content": "[package]\n\nname = \"rustfmt-nightly\"\nversion = \"1.8.0\"\ndescription = \"Tool to find and fix Rust formatting issues\"\nrepository = \"https://github.com/rust-lang/rustfmt\"\nreadme = \"README.md\"\nlicense = \"Apache-2.0 OR MIT\"\nbuild = \"build.rs\"\ncategories = [\"development-tools\"]\nedition = \"2021\"\n\n[[bin]]\nname = \"rustfmt\"\npath = \"src/bin/main.rs\"\n\n[[bin]]\nname = \"cargo-fmt\"\npath = \"src/cargo-fmt/main.rs\"\n\n[[bin]]\nname = \"rustfmt-format-diff\"\npath = \"src/format-diff/main.rs\"\n\n[[bin]]\nname = \"git-rustfmt\"\npath = \"src/git-rustfmt/main.rs\"\n\n[features]\ndefault = [\"cargo-fmt\", \"rustfmt-format-diff\"]\ncargo-fmt = []\nrustfmt-format-diff = []\ngeneric-simd = [\"bytecount/generic-simd\"]\n\n[dependencies]\nannotate-snippets = { version = \"0.9\", features = [\"color\"] }\nanyhow = \"1.0\"\nbytecount = \"0.6.8\"\ncargo_metadata = \"0.18\"\nclap = { version = \"4.4.2\", features = [\"derive\"] }\nclap-cargo = \"0.12.0\"\ndiff = \"0.1\"\ndirs = \"5.0\"\ngetopts = \"0.2\"\nignore = \"0.4\"\nitertools = \"0.12\"\nregex = \"1.7\"\nserde = { version = \"1.0.160\", features = [\"derive\"] }\nserde_json = \"1.0\"\nterm = \"0.7\"\nthiserror = \"1.0.40\"\ntoml = \"0.7.4\"\ntracing = { version = \"0.1.37\", default-features = false, features = [\"std\"] }\ntracing-subscriber = { version = \"0.3.17\", features = [\"env-filter\"] }\nunicode-segmentation = \"1.9\"\nunicode-width = \"0.1\"\nunicode-properties = { version = \"0.1\", default-features = false, features = [\"general-category\"] }\n\nrustfmt-config_proc_macro = { version = \"0.3\", path = \"config_proc_macro\" }\n\n# Rustc dependencies are loaded from the sysroot, Cargo doesn't know about them.\n\n[package.metadata.rust-analyzer]\n# This package uses #[feature(rustc_private)]\nrustc_private = true\n"
        },
        {
          "name": "Configurations.md",
          "type": "blob",
          "size": 65.869140625,
          "content": "# Configuring Rustfmt\n\nRustfmt is designed to be very configurable. You can create a TOML file called `rustfmt.toml` or `.rustfmt.toml`, place it in the project or any other parent directory and it will apply the options in that file. If none of these directories contain such a file, both your home directory and a directory called `rustfmt` in your [global config directory](https://docs.rs/dirs/5.0.1/dirs/fn.config_dir.html) (e.g. `.config/rustfmt/`) are checked as well.\n\nA possible content of `rustfmt.toml` or `.rustfmt.toml` might look like this:\n\n```toml\nindent_style = \"Block\"\nreorder_imports = false\n```\n\nEach configuration option is either stable or unstable.\nStable options can always be used, while unstable options are only available on a nightly toolchain and must be opted into.\nTo enable unstable options, set `unstable_features = true` in `rustfmt.toml` or pass `--unstable-features` to rustfmt.\n\n# Configuration Options\n\nBelow you find a detailed visual guide on all the supported configuration options of rustfmt:\n\n## `array_width`\n\nMaximum width of an array literal before falling back to vertical formatting.\n\n- **Default value**: `60`\n- **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n- **Stable**: Yes\n\nBy default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `array_width` will take precedence.\n\nSee also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n\n## `attr_fn_like_width`\n\nMaximum width of the args of a function-like attributes before falling back to vertical formatting.\n\n- **Default value**: `70`\n- **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n- **Stable**: Yes\n\nBy default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `attr_fn_like_width` will take precedence.\n\nSee also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n\n## `binop_separator`\n\nWhere to put a binary operator when a binary expression goes multiline.\n\n- **Default value**: `\"Front\"`\n- **Possible values**: `\"Front\"`, `\"Back\"`\n- **Stable**: No (tracking issue: [#3368](https://github.com/rust-lang/rustfmt/issues/3368))\n\n#### `\"Front\"` (default):\n\n```rust\nfn main() {\n    let or = foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo\n        || barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar;\n\n    let sum = 123456789012345678901234567890\n        + 123456789012345678901234567890\n        + 123456789012345678901234567890;\n\n    let range = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n        ..bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n}\n```\n\n#### `\"Back\"`:\n\n```rust\nfn main() {\n    let or = foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo ||\n        barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar;\n\n    let sum = 123456789012345678901234567890 +\n        123456789012345678901234567890 +\n        123456789012345678901234567890;\n\n    let range = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa..\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n}\n```\n\n## `blank_lines_lower_bound`\n\nMinimum number of blank lines which must be put between items. If two items have fewer blank lines between\nthem, additional blank lines are inserted.\n\n- **Default value**: `0`\n- **Possible values**: *unsigned integer*\n- **Stable**: No (tracking issue: [#3382](https://github.com/rust-lang/rustfmt/issues/3382))\n\n### Example\nOriginal Code (rustfmt will not change it with the default value of `0`):\n\n```rust\n#![rustfmt::skip]\n\nfn foo() {\n    println!(\"a\");\n}\nfn bar() {\n    println!(\"b\");\n    println!(\"c\");\n}\n```\n\n#### `1`\n```rust\nfn foo() {\n\n    println!(\"a\");\n}\n\nfn bar() {\n\n    println!(\"b\");\n\n    println!(\"c\");\n}\n```\n\n\n## `blank_lines_upper_bound`\n\nMaximum number of blank lines which can be put between items. If more than this number of consecutive empty\nlines are found, they are trimmed down to match this integer.\n\n- **Default value**: `1`\n- **Possible values**: any non-negative integer\n- **Stable**: No (tracking issue: [#3381](https://github.com/rust-lang/rustfmt/issues/3381))\n\n### Example\nOriginal Code:\n\n```rust\n#![rustfmt::skip]\n\nfn foo() {\n    println!(\"a\");\n}\n\n\n\nfn bar() {\n    println!(\"b\");\n\n\n    println!(\"c\");\n}\n```\n\n#### `1` (default):\n```rust\nfn foo() {\n    println!(\"a\");\n}\n\nfn bar() {\n    println!(\"b\");\n\n    println!(\"c\");\n}\n```\n\n#### `2`:\n```rust\nfn foo() {\n    println!(\"a\");\n}\n\n\nfn bar() {\n    println!(\"b\");\n\n\n    println!(\"c\");\n}\n```\n\nSee also: [`blank_lines_lower_bound`](#blank_lines_lower_bound)\n\n## `brace_style`\n\nBrace style for items\n\n- **Default value**: `\"SameLineWhere\"`\n- **Possible values**: `\"AlwaysNextLine\"`, `\"PreferSameLine\"`, `\"SameLineWhere\"`\n- **Stable**: No (tracking issue: [#3376](https://github.com/rust-lang/rustfmt/issues/3376))\n\n### Functions\n\n#### `\"SameLineWhere\"` (default):\n\n```rust\nfn lorem() {\n    // body\n}\n\nfn lorem(ipsum: usize) {\n    // body\n}\n\nfn lorem<T>(ipsum: T)\nwhere\n    T: Add + Sub + Mul + Div,\n{\n    // body\n}\n```\n\n#### `\"AlwaysNextLine\"`:\n\n```rust\nfn lorem()\n{\n    // body\n}\n\nfn lorem(ipsum: usize)\n{\n    // body\n}\n\nfn lorem<T>(ipsum: T)\nwhere\n    T: Add + Sub + Mul + Div,\n{\n    // body\n}\n```\n\n#### `\"PreferSameLine\"`:\n\n```rust\nfn lorem() {\n    // body\n}\n\nfn lorem(ipsum: usize) {\n    // body\n}\n\nfn lorem<T>(ipsum: T)\nwhere\n    T: Add + Sub + Mul + Div, {\n    // body\n}\n```\n\n### Structs and enums\n\n#### `\"SameLineWhere\"` (default):\n\n```rust\nstruct Lorem {\n    ipsum: bool,\n}\n\nstruct Dolor<T>\nwhere\n    T: Eq,\n{\n    sit: T,\n}\n```\n\n#### `\"AlwaysNextLine\"`:\n\n```rust\nstruct Lorem\n{\n    ipsum: bool,\n}\n\nstruct Dolor<T>\nwhere\n    T: Eq,\n{\n    sit: T,\n}\n```\n\n#### `\"PreferSameLine\"`:\n\n```rust\nstruct Lorem {\n    ipsum: bool,\n}\n\nstruct Dolor<T>\nwhere\n    T: Eq, {\n    sit: T,\n}\n```\n\n## `chain_width`\n\nMaximum width of a chain to fit on one line.\n\n- **Default value**: `60`\n- **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n- **Stable**: Yes\n\nBy default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `chain_width` will take precedence.\n\nSee also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n\n## `color`\n\nWhether to use colored output or not.\n\n- **Default value**: `\"Auto\"`\n- **Possible values**: \"Auto\", \"Always\", \"Never\"\n- **Stable**: No (tracking issue: [#3385](https://github.com/rust-lang/rustfmt/issues/3385))\n\n## `combine_control_expr`\n\nCombine control expressions with function calls.\n\n- **Default value**: `true`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3369](https://github.com/rust-lang/rustfmt/issues/3369))\n\n#### `true` (default):\n\n```rust\nfn example() {\n    // If\n    foo!(if x {\n        foo();\n    } else {\n        bar();\n    });\n\n    // IfLet\n    foo!(if let Some(..) = x {\n        foo();\n    } else {\n        bar();\n    });\n\n    // While\n    foo!(while x {\n        foo();\n        bar();\n    });\n\n    // WhileLet\n    foo!(while let Some(..) = x {\n        foo();\n        bar();\n    });\n\n    // ForLoop\n    foo!(for x in y {\n        foo();\n        bar();\n    });\n\n    // Loop\n    foo!(loop {\n        foo();\n        bar();\n    });\n}\n```\n\n#### `false`:\n\n```rust\nfn example() {\n    // If\n    foo!(\n        if x {\n            foo();\n        } else {\n            bar();\n        }\n    );\n\n    // IfLet\n    foo!(\n        if let Some(..) = x {\n            foo();\n        } else {\n            bar();\n        }\n    );\n\n    // While\n    foo!(\n        while x {\n            foo();\n            bar();\n        }\n    );\n\n    // WhileLet\n    foo!(\n        while let Some(..) = x {\n            foo();\n            bar();\n        }\n    );\n\n    // ForLoop\n    foo!(\n        for x in y {\n            foo();\n            bar();\n        }\n    );\n\n    // Loop\n    foo!(\n        loop {\n            foo();\n            bar();\n        }\n    );\n}\n```\n\n## `comment_width`\n\nMaximum length of comments. No effect unless `wrap_comments = true`.\n\n- **Default value**: `80`\n- **Possible values**: any positive integer\n- **Stable**: No (tracking issue: [#3349](https://github.com/rust-lang/rustfmt/issues/3349))\n\n**Note:** A value of `0` results in [`wrap_comments`](#wrap_comments) being applied regardless of a line's width.\n\n#### `80` (default; comments shorter than `comment_width`):\n```rust\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n```\n\n#### `60` (comments longer than `comment_width`):\n```rust\n// Lorem ipsum dolor sit amet,\n// consectetur adipiscing elit.\n```\n\nSee also [`wrap_comments`](#wrap_comments).\n\n## `condense_wildcard_suffixes`\n\nReplace strings of _ wildcards by a single .. in tuple patterns\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3384](https://github.com/rust-lang/rustfmt/issues/3384))\n\n#### `false` (default):\n\n```rust\nfn main() {\n    let (lorem, ipsum, _, _) = (1, 2, 3, 4);\n    let (lorem, ipsum, ..) = (1, 2, 3, 4);\n}\n```\n\n#### `true`:\n\n```rust\nfn main() {\n    let (lorem, ipsum, ..) = (1, 2, 3, 4);\n}\n```\n\n## `control_brace_style`\n\nBrace style for control flow constructs\n\n- **Default value**: `\"AlwaysSameLine\"`\n- **Possible values**: `\"AlwaysNextLine\"`, `\"AlwaysSameLine\"`, `\"ClosingNextLine\"`\n- **Stable**: No (tracking issue: [#3377](https://github.com/rust-lang/rustfmt/issues/3377))\n\n#### `\"AlwaysSameLine\"` (default):\n\n```rust\nfn main() {\n    if lorem {\n        println!(\"ipsum!\");\n    } else {\n        println!(\"dolor!\");\n    }\n}\n```\n\n#### `\"AlwaysNextLine\"`:\n\n```rust\nfn main() {\n    if lorem\n    {\n        println!(\"ipsum!\");\n    }\n    else\n    {\n        println!(\"dolor!\");\n    }\n}\n```\n\n#### `\"ClosingNextLine\"`:\n\n```rust\nfn main() {\n    if lorem {\n        println!(\"ipsum!\");\n    }\n    else {\n        println!(\"dolor!\");\n    }\n}\n```\n\n## `disable_all_formatting`\n\nDon't reformat anything.\n\nNote that this option may be soft-deprecated in the future once the [ignore](#ignore) option is stabilized. Nightly toolchain users are encouraged to use [ignore](#ignore) instead when possible.\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: Yes\n\n## `edition`\n\nSpecifies which edition is used by the parser.\n\n- **Default value**: `\"2015\"`\n- **Possible values**: `\"2015\"`, `\"2018\"`, `\"2021\"`, `\"2024\"`\n- **Stable**: Yes\n\nRustfmt is able to pick up the edition used by reading the `Cargo.toml` file if executed\nthrough the Cargo's formatting tool `cargo fmt`. Otherwise, the edition needs to be specified\nin your config file:\n\n```toml\nedition = \"2018\"\n```\n\n## `empty_item_single_line`\n\nPut empty-body functions and impls on a single line\n\n- **Default value**: `true`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3356](https://github.com/rust-lang/rustfmt/issues/3356))\n\n#### `true` (default):\n\n```rust\nfn lorem() {}\n\nimpl Lorem {}\n```\n\n#### `false`:\n\n```rust\nfn lorem() {\n}\n\nimpl Lorem {\n}\n```\n\nSee also [`brace_style`](#brace_style), [`control_brace_style`](#control_brace_style).\n\n\n## `enum_discrim_align_threshold`\n\nThe maximum length of enum variant having discriminant, that gets vertically aligned with others.\nVariants without discriminants would be ignored for the purpose of alignment.\n\nNote that this is not how much whitespace is inserted, but instead the longest variant name that\ndoesn't get ignored when aligning.\n\n- **Default value** : 0\n- **Possible values**: any positive integer\n- **Stable**: No (tracking issue: [#3372](https://github.com/rust-lang/rustfmt/issues/3372))\n\n#### `0` (default):\n\n```rust\nenum Foo {\n    A = 0,\n    Bb = 1,\n    RandomLongVariantGoesHere = 10,\n    Ccc = 71,\n}\n\nenum Bar {\n    VeryLongVariantNameHereA = 0,\n    VeryLongVariantNameHereBb = 1,\n    VeryLongVariantNameHereCcc = 2,\n}\n```\n\n#### `20`:\n\n```rust\nenum Foo {\n    A   = 0,\n    Bb  = 1,\n    RandomLongVariantGoesHere = 10,\n    Ccc = 2,\n}\n\nenum Bar {\n    VeryLongVariantNameHereA = 0,\n    VeryLongVariantNameHereBb = 1,\n    VeryLongVariantNameHereCcc = 2,\n}\n```\n\n\n## `error_on_line_overflow`\n\nError if Rustfmt is unable to get all lines within `max_width`, except for comments and string\nliterals. If this happens, then it is a bug in Rustfmt. You might be able to work around the bug by\nrefactoring your code to avoid long/complex expressions, usually by extracting a local variable or\nusing a shorter name.\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3391](https://github.com/rust-lang/rustfmt/issues/3391))\n\nSee also [`max_width`](#max_width).\n\n## `error_on_unformatted`\n\nError if unable to get comments or string literals within `max_width`, or they are left with\ntrailing whitespaces.\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3392](https://github.com/rust-lang/rustfmt/issues/3392))\n\n## `fn_args_layout`\n\nThis option is deprecated and has been renamed to `fn_params_layout` to better communicate that\nit affects the layout of parameters in function signatures.\n\n- **Default value**: `\"Tall\"`\n- **Possible values**: `\"Compressed\"`, `\"Tall\"`, `\"Vertical\"`\n- **Stable**: Yes\n\n#### `\"Tall\"` (default):\n\n```rust\ntrait Lorem {\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    ) {\n        // body\n    }\n}\n```\n\n#### `\"Compressed\"`:\n\n```rust\ntrait Lorem {\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n        adipiscing: Adipiscing, elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n        adipiscing: Adipiscing, elit: Elit,\n    ) {\n        // body\n    }\n}\n```\n\n#### `\"Vertical\"`:\n\n```rust\ntrait Lorem {\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n    ) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    ) {\n        // body\n    }\n}\n```\n\nSee also [`fn_params_layout`](#fn_params_layout)\n\n## `fn_call_width`\n\nMaximum width of the args of a function call before falling back to vertical formatting.\n\n- **Default value**: `60`\n- **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n- **Stable**: Yes\n\nBy default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `fn_call_width` will take precedence.\n\nSee also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n\n## `fn_params_layout`\n\nControl the layout of parameters in function signatures.\n\n- **Default value**: `\"Tall\"`\n- **Possible values**: `\"Compressed\"`, `\"Tall\"`, `\"Vertical\"`\n- **Stable**: Yes\n\n#### `\"Tall\"` (default):\n\n```rust\ntrait Lorem {\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    ) {\n        // body\n    }\n}\n```\n\n#### `\"Compressed\"`:\n\n```rust\ntrait Lorem {\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n        adipiscing: Adipiscing, elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n        adipiscing: Adipiscing, elit: Elit,\n    ) {\n        // body\n    }\n}\n```\n\n#### `\"Vertical\"`:\n\n```rust\ntrait Lorem {\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n    ) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    ) {\n        // body\n    }\n}\n```\n\n\n## `fn_single_line`\n\nPut single-expression functions on a single line\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3358](https://github.com/rust-lang/rustfmt/issues/3358))\n\n#### `false` (default):\n\n```rust\nfn lorem() -> usize {\n    42\n}\n\nfn lorem() -> usize {\n    let ipsum = 42;\n    ipsum\n}\n```\n\n#### `true`:\n\n```rust\nfn lorem() -> usize { 42 }\n\nfn lorem() -> usize {\n    let ipsum = 42;\n    ipsum\n}\n```\n\nSee also [`control_brace_style`](#control_brace_style).\n\n\n## `force_explicit_abi`\n\nAlways print the abi for extern items\n\n- **Default value**: `true`\n- **Possible values**: `true`, `false`\n- **Stable**: Yes\n\n**Note:** Non-\"C\" ABIs are always printed. If `false` then \"C\" is removed.\n\n#### `true` (default):\n\n```rust\nextern \"C\" {\n    pub static lorem: c_int;\n}\n```\n\n#### `false`:\n\n```rust\nextern {\n    pub static lorem: c_int;\n}\n```\n\n## `force_multiline_blocks`\n\nForce multiline closure and match arm bodies to be wrapped in a block\n\n- **Default value**: `false`\n- **Possible values**: `false`, `true`\n- **Stable**: No (tracking issue: [#3374](https://github.com/rust-lang/rustfmt/issues/3374))\n\n#### `false` (default):\n\n```rust\nfn main() {\n    result.and_then(|maybe_value| match maybe_value {\n        None => foo(),\n        Some(value) => bar(),\n    });\n\n    match lorem {\n        None => |ipsum| {\n            println!(\"Hello World\");\n        },\n        Some(dolor) => foo(),\n    }\n}\n```\n\n#### `true`:\n\n```rust\nfn main() {\n    result.and_then(|maybe_value| {\n        match maybe_value {\n            None => foo(),\n            Some(value) => bar(),\n        }\n    });\n\n    match lorem {\n        None => {\n            |ipsum| {\n                println!(\"Hello World\");\n            }\n        }\n        Some(dolor) => foo(),\n    }\n}\n```\n\n\n## `format_code_in_doc_comments`\n\nFormat code snippet included in doc comments.\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3348](https://github.com/rust-lang/rustfmt/issues/3348))\n\n#### `false` (default):\n\n```rust\n/// Adds one to the number given.\n///\n/// # Examples\n///\n/// ```rust\n/// let five=5;\n///\n/// assert_eq!(\n///     6,\n///     add_one(5)\n/// );\n/// # fn add_one(x: i32) -> i32 {\n/// #     x + 1\n/// # }\n/// ```\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n```\n\n#### `true`\n\n```rust\n/// Adds one to the number given.\n///\n/// # Examples\n///\n/// ```rust\n/// let five = 5;\n///\n/// assert_eq!(6, add_one(5));\n/// # fn add_one(x: i32) -> i32 {\n/// #     x + 1\n/// # }\n/// ```\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n```\n\n## `doc_comment_code_block_width`\n\nMax width for code snippets included in doc comments. Only used if [`format_code_in_doc_comments`](#format_code_in_doc_comments) is true.\n\n- **Default value**: `100`\n- **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n- **Stable**: No (tracking issue: [#5359](https://github.com/rust-lang/rustfmt/issues/5359))\n\n## `format_generated_files`\n\nFormat generated files. A file is considered generated if any of the first several lines contain a `@generated` comment marker. The number of lines to check is configured by `generated_marker_line_search_limit`.\n\nBy default, generated files are reformatted, i. e. `@generated` marker is ignored.\nThis option is currently ignored for stdin (`@generated` in stdin is ignored.)\n\n- **Default value**: `true`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#5080](https://github.com/rust-lang/rustfmt/issues/5080))\n\n## `generated_marker_line_search_limit`\n\nNumber of lines to check for a `@generated` pragma header, starting from the top of the file. Setting this value to `0` will treat all files as non-generated. When`format_generated_files` is `true`, this option has no effect.\n\n- **Default value**: `5`\n- **Possible values**: any positive integer\n- **Stable**: No (tracking issue: [#5080](https://github.com/rust-lang/rustfmt/issues/5080))\n\nSee also [format_generated_files](#format_generated_files) link here.\n\n## `format_macro_matchers`\n\nFormat the metavariable matching patterns in macros.\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3354](https://github.com/rust-lang/rustfmt/issues/3354))\n\n#### `false` (default):\n\n```rust\nmacro_rules! foo {\n    ($a: ident : $b: ty) => {\n        $a(42): $b;\n    };\n    ($a: ident $b: ident $c: ident) => {\n        $a = $b + $c;\n    };\n}\n```\n\n#### `true`:\n\n```rust\nmacro_rules! foo {\n    ($a:ident : $b:ty) => {\n        $a(42): $b;\n    };\n    ($a:ident $b:ident $c:ident) => {\n        $a = $b + $c;\n    };\n}\n```\n\nSee also [`format_macro_bodies`](#format_macro_bodies).\n\n\n## `format_macro_bodies`\n\nFormat the bodies of declarative macro definitions.\n\n- **Default value**: `true`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3355](https://github.com/rust-lang/rustfmt/issues/3355))\n\n#### `true` (default):\n\n```rust\nmacro_rules! foo {\n    ($a: ident : $b: ty) => {\n        $a(42): $b;\n    };\n    ($a: ident $b: ident $c: ident) => {\n        $a = $b + $c;\n    };\n}\n```\n\n#### `false`:\n\n```rust\nmacro_rules! foo {\n    ($a: ident : $b: ty) => { $a(42): $b; };\n    ($a: ident $b: ident $c: ident) => { $a=$b+$c; };\n}\n```\n\nSee also [`format_macro_matchers`](#format_macro_matchers).\n\n## `skip_macro_invocations`\n\nSkip formatting the bodies of macro invocations with the following names.\n\nrustfmt will not format any macro invocation for macros with names set in this list.\nIncluding the special value \"*\" will prevent any macro invocations from being formatted.\n\nNote: This option does not have any impact on how rustfmt formats macro definitions.\n\n- **Default value**: `[]`\n- **Possible values**: a list of macro name idents, `[\"name_0\", \"name_1\", ..., \"*\"]`\n- **Stable**: No (tracking issue: [#5346](https://github.com/rust-lang/rustfmt/issues/5346))\n\n#### `[]` (default):\n\nrustfmt will follow its standard approach to formatting macro invocations.\n\nNo macro invocations will be skipped based on their name. More information about rustfmt's standard macro invocation formatting behavior can be found in [#5437](https://github.com/rust-lang/rustfmt/discussions/5437).\n\n```rust\nlorem!(\n    const _: u8 = 0;\n);\n\nipsum!(\n    const _: u8 = 0;\n);\n```\n\n#### `[\"lorem\"]`:\n\nThe named macro invocations will be skipped.\n\n```rust\nlorem!(\n        const _: u8 = 0;\n);\n\nipsum!(\n    const _: u8 = 0;\n);\n```\n\n#### `[\"*\"]`:\n\nThe special selector `*` will skip all macro invocations.\n\n```rust\nlorem!(\n        const _: u8 = 0;\n);\n\nipsum!(\n        const _: u8 = 0;\n);\n```\n\n## `format_strings`\n\nFormat string literals where necessary\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3353](https://github.com/rust-lang/rustfmt/issues/3353))\n\n#### `false` (default):\n\n```rust\nfn main() {\n    let lorem = \"ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit amet consectetur adipiscing\";\n}\n```\n\n#### `true`:\n\n```rust\nfn main() {\n    let lorem = \"ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit amet \\\n                 consectetur adipiscing\";\n}\n```\n\nSee also [`max_width`](#max_width).\n\n## `hard_tabs`\n\nUse tab characters for indentation, spaces for alignment\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: Yes\n\n#### `false` (default):\n\n```rust\nfn lorem() -> usize {\n    42 // spaces before 42\n}\n```\n\n#### `true`:\n\n```rust\nfn lorem() -> usize {\n\t42 // tabs before 42\n}\n```\n\nSee also: [`tab_spaces`](#tab_spaces).\n\n## `hex_literal_case`\n\nControl the case of the letters in hexadecimal literal values\n\n- **Default value**: `Preserve`\n- **Possible values**: `Preserve`, `Upper`, `Lower`\n- **Stable**: No (tracking issue: [#5081](https://github.com/rust-lang/rustfmt/issues/5081))\n\n## `hide_parse_errors`\n\nThis option is deprecated and has been renamed to `show_parse_errors` to avoid confusion around the double negative default of `hide_parse_errors=false`.\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3390](https://github.com/rust-lang/rustfmt/issues/3390))\n\n## `show_parse_errors`\n\nShow parse errors if the parser failed to parse files.\n\n- **Default value**: `true`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#5977](https://github.com/rust-lang/rustfmt/issues/5977))\n\n## `ignore`\n\nSkip formatting files and directories that match the specified pattern.\nThe pattern format is the same as [.gitignore](https://git-scm.com/docs/gitignore#_pattern_format). Be sure to use Unix/forwardslash `/` style  paths. This path style will work on all platforms. Windows style paths with backslashes `\\` are not supported.\n\n- **Default value**: format every file\n- **Possible values**: See an example below\n- **Stable**: No (tracking issue: [#3395](https://github.com/rust-lang/rustfmt/issues/3395))\n\n### Example\n\nIf you want to ignore specific files, put the following to your config file:\n\n```toml\nignore = [\n    \"src/types.rs\",\n    \"src/foo/bar.rs\",\n]\n```\n\nIf you want to ignore every file under `examples/`, put the following to your config file:\n\n```toml\nignore = [\n    \"examples\",\n]\n```\n\nIf you want to ignore every file under the directory where you put your rustfmt.toml:\n\n```toml\nignore = [\"/\"]\n```\n\nIf you want to allow specific paths that would otherwise be ignored, prefix those paths with a `!`:\n\n```toml\nignore = [\"bar_dir/*\", \"!bar_dir/*/what.rs\"]\n```\n\nIn this case, all files under `bar_dir` will be ignored, except files like `bar_dir/sub/what.rs`\nor `bar_dir/another/what.rs`.\n\n## `imports_indent`\n\nIndent style of imports\n\n- **Default Value**: `\"Block\"`\n- **Possible values**: `\"Block\"`, `\"Visual\"`\n- **Stable**: No (tracking issue: [#3360](https://github.com/rust-lang/rustfmt/issues/3360))\n\n#### `\"Block\"` (default):\n\n```rust\nuse foo::{\n    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,\n    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz,\n};\n```\n\n#### `\"Visual\"`:\n\n```rust\nuse foo::{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,\n          zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz};\n```\n\nSee also: [`imports_layout`](#imports_layout).\n\n## `imports_layout`\n\nItem layout inside a imports block\n\n- **Default value**: \"Mixed\"\n- **Possible values**: \"Horizontal\", \"HorizontalVertical\", \"Mixed\", \"Vertical\"\n- **Stable**: No (tracking issue: [#3361](https://github.com/rust-lang/rustfmt/issues/3361))\n\n#### `\"Mixed\"` (default):\n\n```rust\nuse foo::{xxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzzz};\n\nuse foo::{\n    aaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbb, cccccccccccccccccc, dddddddddddddddddd,\n    eeeeeeeeeeeeeeeeee, ffffffffffffffffff,\n};\n```\n\n#### `\"Horizontal\"`:\n\n**Note**: This option forces all imports onto one line and may exceed `max_width`.\n\n```rust\nuse foo::{xxx, yyy, zzz};\n\nuse foo::{aaa, bbb, ccc, ddd, eee, fff};\n```\n\n#### `\"HorizontalVertical\"`:\n\n```rust\nuse foo::{xxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzzz};\n\nuse foo::{\n    aaaaaaaaaaaaaaaaaa,\n    bbbbbbbbbbbbbbbbbb,\n    cccccccccccccccccc,\n    dddddddddddddddddd,\n    eeeeeeeeeeeeeeeeee,\n    ffffffffffffffffff,\n};\n```\n\n#### `\"Vertical\"`:\n\n```rust\nuse foo::{\n    xxx,\n    yyy,\n    zzz,\n};\n\nuse foo::{\n    aaa,\n    bbb,\n    ccc,\n    ddd,\n    eee,\n    fff,\n};\n```\n\n## `indent_style`\n\nIndent on expressions or items.\n\n- **Default value**: `\"Block\"`\n- **Possible values**: `\"Block\"`, `\"Visual\"`\n- **Stable**: No (tracking issue: [#3346](https://github.com/rust-lang/rustfmt/issues/3346))\n\n### Array\n\n#### `\"Block\"` (default):\n\n```rust\nfn main() {\n    let lorem = vec![\n        \"ipsum\",\n        \"dolor\",\n        \"sit\",\n        \"amet\",\n        \"consectetur\",\n        \"adipiscing\",\n        \"elit\",\n    ];\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn main() {\n    let lorem = vec![\"ipsum\",\n                     \"dolor\",\n                     \"sit\",\n                     \"amet\",\n                     \"consectetur\",\n                     \"adipiscing\",\n                     \"elit\"];\n}\n```\n\n### Control flow\n\n#### `\"Block\"` (default):\n\n```rust\nfn main() {\n    if lorem_ipsum\n        && dolor_sit\n        && amet_consectetur\n        && lorem_sit\n        && dolor_consectetur\n        && amet_ipsum\n        && lorem_consectetur\n    {\n        // ...\n    }\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn main() {\n    if lorem_ipsum\n       && dolor_sit\n       && amet_consectetur\n       && lorem_sit\n       && dolor_consectetur\n       && amet_ipsum\n       && lorem_consectetur\n    {\n        // ...\n    }\n}\n```\n\nSee also: [`control_brace_style`](#control_brace_style).\n\n### Function arguments\n\n#### `\"Block\"` (default):\n\n```rust\nfn lorem() {}\n\nfn lorem(ipsum: usize) {}\n\nfn lorem(\n    ipsum: usize,\n    dolor: usize,\n    sit: usize,\n    amet: usize,\n    consectetur: usize,\n    adipiscing: usize,\n    elit: usize,\n) {\n    // body\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn lorem() {}\n\nfn lorem(ipsum: usize) {}\n\nfn lorem(ipsum: usize,\n         dolor: usize,\n         sit: usize,\n         amet: usize,\n         consectetur: usize,\n         adipiscing: usize,\n         elit: usize) {\n    // body\n}\n```\n\n### Function calls\n\n#### `\"Block\"` (default):\n\n```rust\nfn main() {\n    lorem(\n        \"lorem\",\n        \"ipsum\",\n        \"dolor\",\n        \"sit\",\n        \"amet\",\n        \"consectetur\",\n        \"adipiscing\",\n        \"elit\",\n    );\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn main() {\n    lorem(\"lorem\",\n          \"ipsum\",\n          \"dolor\",\n          \"sit\",\n          \"amet\",\n          \"consectetur\",\n          \"adipiscing\",\n          \"elit\");\n}\n```\n\n### Generics\n\n#### `\"Block\"` (default):\n\n```rust\nfn lorem<\n    Ipsum: Eq = usize,\n    Dolor: Eq = usize,\n    Sit: Eq = usize,\n    Amet: Eq = usize,\n    Adipiscing: Eq = usize,\n    Consectetur: Eq = usize,\n    Elit: Eq = usize,\n>(\n    ipsum: Ipsum,\n    dolor: Dolor,\n    sit: Sit,\n    amet: Amet,\n    adipiscing: Adipiscing,\n    consectetur: Consectetur,\n    elit: Elit,\n) -> T {\n    // body\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn lorem<Ipsum: Eq = usize,\n         Dolor: Eq = usize,\n         Sit: Eq = usize,\n         Amet: Eq = usize,\n         Adipiscing: Eq = usize,\n         Consectetur: Eq = usize,\n         Elit: Eq = usize>(\n    ipsum: Ipsum,\n    dolor: Dolor,\n    sit: Sit,\n    amet: Amet,\n    adipiscing: Adipiscing,\n    consectetur: Consectetur,\n    elit: Elit)\n    -> T {\n    // body\n}\n```\n\n#### Struct\n\n#### `\"Block\"` (default):\n\n```rust\nfn main() {\n    let lorem = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn main() {\n    let lorem = Lorem { ipsum: dolor,\n                        sit: amet };\n}\n```\n\nSee also: [`struct_lit_single_line`](#struct_lit_single_line), [`indent_style`](#indent_style).\n\n### Where predicates\n\n#### `\"Block\"` (default):\n\n```rust\nfn lorem<Ipsum, Dolor, Sit, Amet>() -> T\nwhere\n    Ipsum: Eq,\n    Dolor: Eq,\n    Sit: Eq,\n    Amet: Eq,\n{\n    // body\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn lorem<Ipsum, Dolor, Sit, Amet>() -> T\n    where Ipsum: Eq,\n          Dolor: Eq,\n          Sit: Eq,\n          Amet: Eq\n{\n    // body\n}\n```\n\n## `inline_attribute_width`\n\nWrite an item and its attribute on the same line if their combined width is below a threshold\n\n- **Default value**: 0\n- **Possible values**: any positive integer\n- **Stable**: No (tracking issue: [#3343](https://github.com/rust-lang/rustfmt/issues/3343))\n\n### Example\n\n#### `0` (default):\n```rust\n#[cfg(feature = \"alloc\")]\nuse core::slice;\n```\n\n#### `50`:\n```rust\n#[cfg(feature = \"alloc\")] use core::slice;\n```\n\n## `match_arm_blocks`\n\nControls whether arm bodies are wrapped in cases where the first line of the body cannot fit on the same line as the `=>` operator.\n\nThe Style Guide requires that bodies are block wrapped by default if a line break is required after the `=>`, but this option can be used to disable that behavior to prevent wrapping arm bodies in that event, so long as the body contains neither multiple statements nor line comments.\n\n- **Default value**: `true`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3373](https://github.com/rust-lang/rustfmt/issues/3373))\n\n#### `true` (default):\n\n```rust\nfn main() {\n    match lorem {\n        ipsum => {\n            foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x)\n        }\n        dolor => println!(\"{}\", sit),\n        sit => foo(\n            \"foooooooooooooooooooooooo\",\n            \"baaaaaaaaaaaaaaaaaaaaaaaarr\",\n            \"baaaaaaaaaaaaaaaaaaaazzzzzzzzzzzzz\",\n            \"qqqqqqqqquuuuuuuuuuuuuuuuuuuuuuuuuuxxx\",\n        ),\n    }\n}\n```\n\n#### `false`:\n\n```rust\nfn main() {\n    match lorem {\n        lorem =>\n            foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x),\n        ipsum => println!(\"{}\", sit),\n        sit => foo(\n            \"foooooooooooooooooooooooo\",\n            \"baaaaaaaaaaaaaaaaaaaaaaaarr\",\n            \"baaaaaaaaaaaaaaaaaaaazzzzzzzzzzzzz\",\n            \"qqqqqqqqquuuuuuuuuuuuuuuuuuuuuuuuuuxxx\",\n        ),\n    }\n}\n```\n\nSee also: [`match_block_trailing_comma`](#match_block_trailing_comma).\n\n## `match_arm_leading_pipes`\n\nControls whether to include a leading pipe on match arms\n\n- **Default value**: `Never`\n- **Possible values**: `Always`, `Never`, `Preserve`\n- **Stable**: Yes\n\n#### `Never` (default):\n```rust\n// Leading pipes are removed from this:\n// fn foo() {\n//     match foo {\n//         | \"foo\" | \"bar\" => {}\n//         | \"baz\"\n//         | \"something relatively long\"\n//         | \"something really really really realllllllllllllly long\" => println!(\"x\"),\n//         | \"qux\" => println!(\"y\"),\n//         _ => {}\n//     }\n// }\n\n// Becomes\nfn foo() {\n    match foo {\n        \"foo\" | \"bar\" => {}\n        \"baz\"\n        | \"something relatively long\"\n        | \"something really really really realllllllllllllly long\" => println!(\"x\"),\n        \"qux\" => println!(\"y\"),\n        _ => {}\n    }\n}\n```\n\n#### `Always`:\n```rust\n// Leading pipes are emitted on all arms of this:\n// fn foo() {\n//     match foo {\n//         \"foo\" | \"bar\" => {}\n//         \"baz\"\n//         | \"something relatively long\"\n//         | \"something really really really realllllllllllllly long\" => println!(\"x\"),\n//         \"qux\" => println!(\"y\"),\n//         _ => {}\n//     }\n// }\n\n// Becomes:\nfn foo() {\n    match foo {\n        | \"foo\" | \"bar\" => {}\n        | \"baz\"\n        | \"something relatively long\"\n        | \"something really really really realllllllllllllly long\" => println!(\"x\"),\n        | \"qux\" => println!(\"y\"),\n        | _ => {}\n    }\n}\n```\n\n#### `Preserve`:\n```rust\nfn foo() {\n    match foo {\n        | \"foo\" | \"bar\" => {}\n        | \"baz\"\n        | \"something relatively long\"\n        | \"something really really really realllllllllllllly long\" => println!(\"x\"),\n        | \"qux\" => println!(\"y\"),\n        _ => {}\n    }\n\n    match baz {\n        \"qux\" => {}\n        \"foo\" | \"bar\" => {}\n        _ => {}\n    }\n}\n```\n\n## `match_block_trailing_comma`\n\nPut a trailing comma after a block based match arm (non-block arms are not affected)\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: Yes\n\n#### `false` (default):\n\n```rust\nfn main() {\n    match lorem {\n        Lorem::Ipsum => {\n            println!(\"ipsum\");\n        }\n        Lorem::Dolor => println!(\"dolor\"),\n    }\n}\n```\n\n#### `true`:\n\n```rust\nfn main() {\n    match lorem {\n        Lorem::Ipsum => {\n            println!(\"ipsum\");\n        },\n        Lorem::Dolor => println!(\"dolor\"),\n    }\n}\n```\n\nSee also: [`trailing_comma`](#trailing_comma), [`match_arm_blocks`](#match_arm_blocks).\n\n## `max_width`\n\nMaximum width of each line\n\n- **Default value**: `100`\n- **Possible values**: any positive integer\n- **Stable**: Yes\n\nSee also [`error_on_line_overflow`](#error_on_line_overflow).\n\n## `merge_derives`\n\nMerge multiple derives into a single one.\n\n- **Default value**: `true`\n- **Possible values**: `true`, `false`\n- **Stable**: Yes\n\n#### `true` (default):\n\n```rust\n#[derive(Eq, PartialEq, Debug, Copy, Clone)]\npub enum Foo {}\n```\n\n#### `false`:\n\n```rust\n#[derive(Eq, PartialEq, Debug, Copy, Clone)]\npub enum Bar {}\n\n#[derive(Eq, PartialEq)]\n#[derive(Debug)]\n#[derive(Copy, Clone)]\npub enum Foo {}\n```\n\n## `imports_granularity`\n\nControls how imports are structured in `use` statements. Imports will be merged or split to the configured level of granularity.\n\nSimilar to other `import` related configuration options, this option operates within the bounds of user-defined groups of imports. See [`group_imports`](#group_imports) for more information on import groups.\n\nNote that rustfmt will not modify the granularity of imports containing comments if doing so could potentially lose or misplace said comments.\n\n- **Default value**: `Preserve`\n- **Possible values**: `Preserve`, `Crate`, `Module`, `Item`, `One`\n- **Stable**: No (tracking issue: [#4991](https://github.com/rust-lang/rustfmt/issues/4991))\n\n\n#### `Preserve` (default):\n\nDo not change the granularity of any imports and preserve the original structure written by the developer.\n\n```rust\nuse foo::b;\nuse foo::b::{f, g};\nuse foo::{a, c, d::e};\nuse qux::{h, i};\n```\n\n#### `Crate`:\n\nMerge imports from the same crate into a single `use` statement. Conversely, imports from different crates are split into separate statements.\n\n```rust\nuse foo::{\n    a, b,\n    b::{f, g},\n    c,\n    d::e,\n};\nuse qux::{h, i};\n```\n\n#### `Module`:\n\nMerge imports from the same module into a single `use` statement. Conversely, imports from different modules are split into separate statements.\n\n```rust\nuse foo::b::{f, g};\nuse foo::d::e;\nuse foo::{a, b, c};\nuse qux::{h, i};\n```\n\n#### `Item`:\n\nFlatten imports so that each has its own `use` statement.\n\n```rust\nuse foo::a;\nuse foo::b;\nuse foo::b::f;\nuse foo::b::g;\nuse foo::c;\nuse foo::d::e;\nuse qux::h;\nuse qux::i;\n```\n\n#### `One`:\n\nMerge all imports into a single `use` statement as long as they have the same visibility.\n\n```rust\npub use foo::{x, y};\nuse {\n    bar::{\n        a,\n        b::{self, f, g},\n        c,\n        d::e,\n    },\n    qux::{h, i},\n};\n```\n\n## `merge_imports`\n\nThis option is deprecated. Use `imports_granularity = \"Crate\"` instead.\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n\n#### `false` (default):\n\n```rust\nuse foo::{a, c, d};\nuse foo::{b, g};\nuse foo::{e, f};\n```\n\n#### `true`:\n\n```rust\nuse foo::{a, b, c, d, e, f, g};\n```\n\n\n## `newline_style`\n\nUnix or Windows line endings\n\n- **Default value**: `\"Auto\"`\n- **Possible values**: `\"Auto\"`, `\"Native\"`, `\"Unix\"`, `\"Windows\"`\n- **Stable**: Yes\n\n#### `Auto` (default):\n\nThe newline style is detected automatically on a per-file basis. Files\nwith mixed line endings will be converted to the first detected line\nending style.\n\n#### `Native`\n\nLine endings will be converted to `\\r\\n` on Windows and `\\n` on all\nother platforms.\n\n#### `Unix`\n\nLine endings will be converted to `\\n`.\n\n#### `Windows`\n\nLine endings will be converted to `\\r\\n`.\n\n## `normalize_comments`\n\nConvert /* */ comments to // comments where possible\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3350](https://github.com/rust-lang/rustfmt/issues/3350))\n\n#### `false` (default):\n\n```rust\n// Lorem ipsum:\nfn dolor() -> usize {}\n\n/* sit amet: */\nfn adipiscing() -> usize {}\n```\n\n#### `true`:\n\n```rust\n// Lorem ipsum:\nfn dolor() -> usize {}\n\n// sit amet:\nfn adipiscing() -> usize {}\n```\n\n## `normalize_doc_attributes`\n\nConvert `#![doc]` and `#[doc]` attributes to `//!` and `///` doc comments.\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3351](https://github.com/rust-lang/rustfmt/issues/3351))\n\n#### `false` (default):\n\n```rust\n#![doc = \"Example documentation\"]\n\n#[doc = \"Example item documentation\"]\npub enum Bar {}\n\n/// Example item documentation\npub enum Foo {}\n```\n\n#### `true`:\n\n```rust\n//! Example documentation\n\n/// Example item documentation\npub enum Foo {}\n```\n\n## `overflow_delimited_expr`\n\nWhen structs, slices, arrays, and block/array-like macros are used as the last\nargument in an expression list, allow them to overflow (like blocks/closures)\ninstead of being indented on a new line.\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3370](https://github.com/rust-lang/rustfmt/issues/3370))\n\n#### `false` (default):\n\n```rust\nfn example() {\n    foo(ctx, |param| {\n        action();\n        foo(param)\n    });\n\n    foo(\n        ctx,\n        Bar {\n            x: value,\n            y: value2,\n        },\n    );\n\n    foo(\n        ctx,\n        &[\n            MAROON_TOMATOES,\n            PURPLE_POTATOES,\n            ORGANE_ORANGES,\n            GREEN_PEARS,\n            RED_APPLES,\n        ],\n    );\n\n    foo(\n        ctx,\n        vec![\n            MAROON_TOMATOES,\n            PURPLE_POTATOES,\n            ORGANE_ORANGES,\n            GREEN_PEARS,\n            RED_APPLES,\n        ],\n    );\n}\n```\n\n#### `true`:\n\n```rust\nfn example() {\n    foo(ctx, |param| {\n        action();\n        foo(param)\n    });\n\n    foo(ctx, Bar {\n        x: value,\n        y: value2,\n    });\n\n    foo(ctx, &[\n        MAROON_TOMATOES,\n        PURPLE_POTATOES,\n        ORGANE_ORANGES,\n        GREEN_PEARS,\n        RED_APPLES,\n    ]);\n\n    foo(ctx, vec![\n        MAROON_TOMATOES,\n        PURPLE_POTATOES,\n        ORGANE_ORANGES,\n        GREEN_PEARS,\n        RED_APPLES,\n    ]);\n}\n```\n\n## `remove_nested_parens`\n\nRemove nested parens.\n\n- **Default value**: `true`,\n- **Possible values**: `true`, `false`\n- **Stable**: Yes\n\n\n#### `true` (default):\n```rust\nfn main() {\n    (foo());\n}\n```\n\n#### `false`:\n```rust\nfn main() {\n    (foo());\n\n    ((((foo()))));\n}\n```\n\n\n## `reorder_impl_items`\n\nReorder impl items. `type` and `const` are put first, then macros and methods.\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3363](https://github.com/rust-lang/rustfmt/issues/3363))\n\n#### `false` (default)\n\n```rust\nstruct Dummy;\n\nimpl Iterator for Dummy {\n    fn next(&mut self) -> Option<Self::Item> {\n        None\n    }\n\n    type Item = i32;\n}\n\nimpl Iterator for Dummy {\n    type Item = i32;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        None\n    }\n}\n```\n\n#### `true`\n\n```rust\nstruct Dummy;\n\nimpl Iterator for Dummy {\n    type Item = i32;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        None\n    }\n}\n```\n\n## `reorder_imports`\n\nReorder import and extern crate statements alphabetically in groups (a group is\nseparated by a newline).\n\n- **Default value**: `true`\n- **Possible values**: `true`, `false`\n- **Stable**: Yes\n\n#### `true` (default):\n\n```rust\nuse dolor;\nuse ipsum;\nuse lorem;\nuse sit;\n```\n\n#### `false`:\n\n```rust\nuse lorem;\nuse ipsum;\nuse dolor;\nuse sit;\n```\n\n## `group_imports`\n\nControls the strategy for how consecutive imports are grouped together.\n\nControls the strategy for grouping sets of consecutive imports. Imports may contain newlines between imports and still be grouped together as a single set, but other statements between imports will result in different grouping sets.\n\n- **Default value**: `Preserve`\n- **Possible values**: `Preserve`, `StdExternalCrate`, `One`\n- **Stable**: No (tracking issue: [#5083](https://github.com/rust-lang/rustfmt/issues/5083))\n\nEach set of imports (one or more `use` statements, optionally separated by newlines) will be formatted independently. Other statements such as `mod ...` or `extern crate ...` will cause imports to not be grouped together.\n\n#### `Preserve` (default):\n\nPreserve the source file's import groups.\n\n```rust\nuse super::update::convert_publish_payload;\nuse chrono::Utc;\n\nuse alloc::alloc::Layout;\nuse juniper::{FieldError, FieldResult};\nuse uuid::Uuid;\n\nuse std::sync::Arc;\n\nuse broker::database::PooledConnection;\n\nuse super::schema::{Context, Payload};\nuse crate::models::Event;\nuse core::f32;\n```\n\n#### `StdExternalCrate`:\n\nDiscard existing import groups, and create three groups for:\n1. `std`, `core` and `alloc`,\n2. external crates,\n3. `self`, `super` and `crate` imports.\n\n```rust\nuse alloc::alloc::Layout;\nuse core::f32;\nuse std::sync::Arc;\n\nuse broker::database::PooledConnection;\nuse chrono::Utc;\nuse juniper::{FieldError, FieldResult};\nuse uuid::Uuid;\n\nuse super::schema::{Context, Payload};\nuse super::update::convert_publish_payload;\nuse crate::models::Event;\n```\n\n#### `One`:\n\nDiscard existing import groups, and create a single group for everything\n\n```rust\nuse super::schema::{Context, Payload};\nuse super::update::convert_publish_payload;\nuse crate::models::Event;\nuse alloc::alloc::Layout;\nuse broker::database::PooledConnection;\nuse chrono::Utc;\nuse core::f32;\nuse juniper::{FieldError, FieldResult};\nuse std::sync::Arc;\nuse uuid::Uuid;\n```\n\n## `reorder_modules`\n\nReorder `mod` declarations alphabetically in group.\n\n- **Default value**: `true`\n- **Possible values**: `true`, `false`\n- **Stable**: Yes\n\n#### `true` (default)\n\n```rust\nmod a;\nmod b;\n\nmod dolor;\nmod ipsum;\nmod lorem;\nmod sit;\n```\n\n#### `false`\n\n```rust\nmod b;\nmod a;\n\nmod lorem;\nmod ipsum;\nmod dolor;\nmod sit;\n```\n\n**Note** `mod` with `#[macro_export]` will not be reordered since that could change the semantics\nof the original source code.\n\n## `required_version`\n\nRequire a specific version of rustfmt. If you want to make sure that the\nspecific version of rustfmt is used in your CI, use this option.\n\n- **Default value**: `CARGO_PKG_VERSION`\n- **Possible values**: any published version (e.g. `\"0.3.8\"`)\n- **Stable**: No (tracking issue: [#3386](https://github.com/rust-lang/rustfmt/issues/3386))\n\n## `short_array_element_width_threshold`\n\nThe width threshold for an array element to be considered \"short\".\n\nThe layout of an array is dependent on the length of each of its elements. \nIf the length of every element in an array is below this threshold (all elements are \"short\") then the array can be formatted in the mixed/compressed style, but if any one element has a length that exceeds this threshold then the array elements will have to be formatted vertically.\n\n- **Default value**: `10`\n- **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n- **Stable**: Yes\n\n#### `10` (default):\n```rust\nfn main() {\n    pub const FORMAT_TEST: [u64; 5] = [\n        0x0000000000000000,\n        0xaaaaaaaaaaaaaaaa,\n        0xbbbbbbbbbbbbbbbb,\n        0xcccccccccccccccc,\n        0xdddddddddddddddd,\n    ];\n}\n```\n#### `20`:\n```rust\nfn main() {\n    pub const FORMAT_TEST: [u64; 5] = [\n        0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xbbbbbbbbbbbbbbbb, 0xcccccccccccccccc,\n        0xdddddddddddddddd,\n    ];\n}\n```\nSee also [`max_width`](#max_width).\n\n## `skip_children`\n\nDon't reformat out of line modules\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3389](https://github.com/rust-lang/rustfmt/issues/3389))\n\n## `single_line_if_else_max_width`\n\nMaximum line length for single line if-else expressions. A value of `0` (zero) results in if-else expressions always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n\n- **Default value**: `50`\n- **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n- **Stable**: Yes\n\nBy default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `single_line_if_else_max_width` will take precedence.\n\nSee also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n\n## `single_line_let_else_max_width`\n\nMaximum line length for single line let-else statements.\nSee the [let-else statement section of the Rust Style Guide](https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/statements.md#else-blocks-let-else-statements) for more details on when a let-else statement may be written on a single line.\nA value of `0` (zero) means the divergent `else` block will always be formatted over multiple lines.\nNote this occurs when `use_small_heuristics` is set to `Off`.\n\nBy default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `single_line_let_else_max_width` will take precedence.\n\n- **Default value**: `50`\n- **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n- **Stable**: Yes\n\n#### `50` (default):\n\n```rust\nfn main() {\n    let Some(w) = opt else { return Ok(()) };\n\n    let Some(x) = opt else { return };\n\n    let Some(y) = opt else {\n        return;\n    };\n\n    let Some(z) = some_very_very_very_very_long_name else {\n        return;\n    };\n}\n```\n\n#### `0`:\n\n```rust\nfn main() {\n    let Some(w) = opt else {\n        return Ok(());\n    };\n\n    let Some(x) = opt else {\n        return;\n    };\n\n    let Some(y) = opt else {\n        return;\n    };\n\n    let Some(z) = some_very_very_very_very_long_name else {\n        return;\n    };\n}\n```\n\n#### `100`:\n\n```rust\nfn main() {\n    let Some(w) = opt else { return Ok(()) };\n\n    let Some(x) = opt else { return };\n\n    let Some(y) = opt else {\n        return;\n    };\n\n    let Some(z) = some_very_very_very_very_long_name else { return };\n}\n```\n\nSee also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n\n\n## `space_after_colon`\n\nLeave a space after the colon.\n\n- **Default value**: `true`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3366](https://github.com/rust-lang/rustfmt/issues/3366))\n\n#### `true` (default):\n\n```rust\nfn lorem<T: Eq>(t: T) {\n    let lorem: Dolor = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n}\n```\n\n#### `false`:\n\n```rust\nfn lorem<T:Eq>(t:T) {\n    let lorem:Dolor = Lorem {\n        ipsum:dolor,\n        sit:amet,\n    };\n}\n```\n\nSee also: [`space_before_colon`](#space_before_colon).\n\n## `space_before_colon`\n\nLeave a space before the colon.\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3365](https://github.com/rust-lang/rustfmt/issues/3365))\n\n#### `false` (default):\n\n```rust\nfn lorem<T: Eq>(t: T) {\n    let lorem: Dolor = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n}\n```\n\n#### `true`:\n\n```rust\nfn lorem<T : Eq>(t : T) {\n    let lorem : Dolor = Lorem {\n        ipsum : dolor,\n        sit : amet,\n    };\n}\n```\n\nSee also: [`space_after_colon`](#space_after_colon).\n\n## `spaces_around_ranges`\n\nPut spaces around the .., ..=, and ... range operators\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3367](https://github.com/rust-lang/rustfmt/issues/3367))\n\n#### `false` (default):\n\n```rust\nfn main() {\n    let lorem = 0..10;\n    let ipsum = 0..=10;\n\n    match lorem {\n        1..5 => foo(),\n        _ => bar,\n    }\n\n    match lorem {\n        1..=5 => foo(),\n        _ => bar,\n    }\n\n    match lorem {\n        1...5 => foo(),\n        _ => bar,\n    }\n}\n```\n\n#### `true`:\n\n```rust\nfn main() {\n    let lorem = 0 .. 10;\n    let ipsum = 0 ..= 10;\n\n    match lorem {\n        1 .. 5 => foo(),\n        _ => bar,\n    }\n\n    match lorem {\n        1 ..= 5 => foo(),\n        _ => bar,\n    }\n\n    match lorem {\n        1 ... 5 => foo(),\n        _ => bar,\n    }\n}\n```\n\n## `struct_field_align_threshold`\n\nThe maximum diff of width between struct fields to be aligned with each other.\n\n- **Default value** : 0\n- **Possible values**: any non-negative integer\n- **Stable**: No (tracking issue: [#3371](https://github.com/rust-lang/rustfmt/issues/3371))\n\n#### `0` (default):\n\n```rust\nstruct Foo {\n    x: u32,\n    yy: u32,\n    zzz: u32,\n}\n```\n\n#### `20`:\n\n```rust\nstruct Foo {\n    x:   u32,\n    yy:  u32,\n    zzz: u32,\n}\n```\n\n## `struct_lit_single_line`\n\nPut small struct literals on a single line\n\n- **Default value**: `true`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3357](https://github.com/rust-lang/rustfmt/issues/3357))\n\n#### `true` (default):\n\n```rust\nfn main() {\n    let lorem = Lorem { foo: bar, baz: ofo };\n}\n```\n\n#### `false`:\n\n```rust\nfn main() {\n    let lorem = Lorem {\n        foo: bar,\n        baz: ofo,\n    };\n}\n```\n\nSee also: [`indent_style`](#indent_style).\n\n## `struct_lit_width`\n\nMaximum width in the body of a struct literal before falling back to vertical formatting. A value of `0` (zero) results in struct literals always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n\n- **Default value**: `18`\n- **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n- **Stable**: Yes\n\nBy default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `struct_lit_width` will take precedence.\n\nSee also [`max_width`](#max_width), [`use_small_heuristics`](#use_small_heuristics), and [`struct_lit_single_line`](#struct_lit_single_line)\n\n## `struct_variant_width`\n\nMaximum width in the body of a struct variant before falling back to vertical formatting. A value of `0` (zero) results in struct literals always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n\n- **Default value**: `35`\n- **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n- **Stable**: Yes\n\nBy default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `struct_variant_width` will take precedence.\n\nSee also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n\n## `style_edition`\n\nControls the edition of the [Rust Style Guide] to use for formatting ([RFC 3338])\n\n- **Default value**: `\"2015\"`\n- **Possible values**: `\"2015\"`, `\"2018\"`, `\"2021\"`, `\"2024\"` (unstable variant)\n- **Stable**: No\n\n[Rust Style Guide]: https://doc.rust-lang.org/nightly/style-guide/\n[RFC 3338]: https://rust-lang.github.io/rfcs/3338-style-evolution.html\n\n## `tab_spaces`\n\nNumber of spaces per tab\n\n- **Default value**: `4`\n- **Possible values**: any positive integer\n- **Stable**: Yes\n\n#### `4` (default):\n\n```rust\nfn lorem() {\n    let ipsum = dolor();\n    let sit = vec![\n        \"amet consectetur adipiscing elit amet\",\n        \"consectetur adipiscing elit amet consectetur.\",\n    ];\n}\n```\n\n#### `2`:\n\n```rust\nfn lorem() {\n  let ipsum = dolor();\n  let sit = vec![\n    \"amet consectetur adipiscing elit amet\",\n    \"consectetur adipiscing elit amet consectetur.\",\n  ];\n}\n```\n\nSee also: [`hard_tabs`](#hard_tabs).\n\n\n## `trailing_comma`\n\nHow to handle trailing commas for lists\n\n- **Default value**: `\"Vertical\"`\n- **Possible values**: `\"Always\"`, `\"Never\"`, `\"Vertical\"`\n- **Stable**: No (tracking issue: [#3379](https://github.com/rust-lang/rustfmt/issues/3379))\n\n#### `\"Vertical\"` (default):\n\n```rust\nfn main() {\n    let Lorem { ipsum, dolor, sit } = amet;\n    let Lorem {\n        ipsum,\n        dolor,\n        sit,\n        amet,\n        consectetur,\n        adipiscing,\n    } = elit;\n}\n```\n\n#### `\"Always\"`:\n\n```rust\nfn main() {\n    let Lorem { ipsum, dolor, sit, } = amet;\n    let Lorem {\n        ipsum,\n        dolor,\n        sit,\n        amet,\n        consectetur,\n        adipiscing,\n    } = elit;\n}\n```\n\n#### `\"Never\"`:\n\n```rust\nfn main() {\n    let Lorem { ipsum, dolor, sit } = amet;\n    let Lorem {\n        ipsum,\n        dolor,\n        sit,\n        amet,\n        consectetur,\n        adipiscing\n    } = elit;\n}\n```\n\nSee also: [`match_block_trailing_comma`](#match_block_trailing_comma).\n\n## `trailing_semicolon`\n\nAdd trailing semicolon after break, continue and return\n\n- **Default value**: `true`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3378](https://github.com/rust-lang/rustfmt/issues/3378))\n\n#### `true` (default):\n```rust\nfn foo() -> usize {\n    return 0;\n}\n```\n\n#### `false`:\n```rust\nfn foo() -> usize {\n    return 0\n}\n```\n\n## `type_punctuation_density`\n\nDetermines if `+` or `=` are wrapped in spaces in the punctuation of types\n\n- **Default value**: `\"Wide\"`\n- **Possible values**: `\"Compressed\"`, `\"Wide\"`\n- **Stable**: No (tracking issue: [#3364](https://github.com/rust-lang/rustfmt/issues/3364))\n\n#### `\"Wide\"` (default):\n\n```rust\nfn lorem<Ipsum: Dolor + Sit = Amet>() {\n    // body\n}\n```\n\n#### `\"Compressed\"`:\n\n```rust\nfn lorem<Ipsum: Dolor+Sit=Amet>() {\n    // body\n}\n```\n\n## `unstable_features`\n\nEnable unstable features on the unstable channel.\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3387](https://github.com/rust-lang/rustfmt/issues/3387))\n\n## `use_field_init_shorthand`\n\nUse field initialize shorthand if possible.\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: Yes\n\n#### `false` (default):\n\n```rust\nstruct Foo {\n    x: u32,\n    y: u32,\n    z: u32,\n}\n\nfn main() {\n    let x = 1;\n    let y = 2;\n    let z = 3;\n    let a = Foo { x, y, z };\n    let b = Foo { x: x, y: y, z: z };\n}\n```\n\n#### `true`:\n\n```rust\nstruct Foo {\n    x: u32,\n    y: u32,\n    z: u32,\n}\n\nfn main() {\n    let x = 1;\n    let y = 2;\n    let z = 3;\n    let a = Foo { x, y, z };\n}\n```\n\n## `use_small_heuristics`\n\nThis option can be used to simplify the management and bulk updates of the granular width configuration settings ([`fn_call_width`](#fn_call_width), [`attr_fn_like_width`](#attr_fn_like_width), [`struct_lit_width`](#struct_lit_width), [`struct_variant_width`](#struct_variant_width), [`array_width`](#array_width), [`chain_width`](#chain_width), [`single_line_if_else_max_width`](#single_line_if_else_max_width)), that respectively control when formatted constructs are multi-lined/vertical based on width.\n\nNote that explicitly provided values for the width configuration settings take precedence and override the calculated values determined by `use_small_heuristics`.\n\n- **Default value**: `\"Default\"`\n- **Possible values**: `\"Default\"`, `\"Off\"`, `\"Max\"`\n- **Stable**: Yes\n\n#### `Default` (default):\nWhen `use_small_heuristics` is set to `Default`, the values for the granular width settings are calculated as a ratio of the value for `max_width`.\n\nThe ratios are:\n* [`fn_call_width`](#fn_call_width) - `60%`\n* [`attr_fn_like_width`](#attr_fn_like_width) - `70%`\n* [`struct_lit_width`](#struct_lit_width) - `18%`\n* [`struct_variant_width`](#struct_variant_width) - `35%`\n* [`array_width`](#array_width) - `60%`\n* [`chain_width`](#chain_width) - `60%`\n* [`single_line_if_else_max_width`](#single_line_if_else_max_width) - `50%`\n* [`single_line_let_else_max_width`](#single_line_let_else_max_width) - `50%`\n\nFor example when `max_width` is set to `100`, the width settings are:\n* `fn_call_width=60`\n* `attr_fn_like_width=70`\n* `struct_lit_width=18`\n* `struct_variant_width=35`\n* `array_width=60`\n* `chain_width=60`\n* `single_line_if_else_max_width=50`\n* `single_line_let_else_max_width=50`\n\nand when `max_width` is set to `200`:\n* `fn_call_width=120`\n* `attr_fn_like_width=140`\n* `struct_lit_width=36`\n* `struct_variant_width=70`\n* `array_width=120`\n* `chain_width=120`\n* `single_line_if_else_max_width=100`\n* `single_line_let_else_max_width=100`\n\n```rust\nenum Lorem {\n    Ipsum,\n    Dolor(bool),\n    Sit { amet: Consectetur, adipiscing: Elit },\n}\n\nfn main() {\n    lorem(\n        \"lorem\",\n        \"ipsum\",\n        \"dolor\",\n        \"sit\",\n        \"amet\",\n        \"consectetur\",\n        \"adipiscing\",\n    );\n\n    let lorem = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n    let lorem = Lorem { ipsum: dolor };\n\n    let lorem = if ipsum { dolor } else { sit };\n}\n```\n\n#### `Off`:\nWhen `use_small_heuristics` is set to `Off`, the granular width settings are functionally disabled and ignored. See the documentation for the respective width config options for specifics.\n\n```rust\nenum Lorem {\n    Ipsum,\n    Dolor(bool),\n    Sit {\n        amet: Consectetur,\n        adipiscing: Elit,\n    },\n}\n\nfn main() {\n    lorem(\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\", \"consectetur\", \"adipiscing\");\n\n    let lorem = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n\n    let lorem = if ipsum {\n        dolor\n    } else {\n        sit\n    };\n}\n```\n\n#### `Max`:\nWhen `use_small_heuristics` is set to `Max`, then each granular width setting is set to the same value as `max_width`.\n\nSo if `max_width` is set to `200`, then all the width settings are also set to `200`.\n* `fn_call_width=200`\n* `attr_fn_like_width=200`\n* `struct_lit_width=200`\n* `struct_variant_width=200`\n* `array_width=200`\n* `chain_width=200`\n* `single_line_if_else_max_width=200`\n* `single_line_let_else_max_width=200`\n\n```rust\nenum Lorem {\n    Ipsum,\n    Dolor(bool),\n    Sit { amet: Consectetur, adipiscing: Elit },\n}\n\nfn main() {\n    lorem(\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\", \"consectetur\", \"adipiscing\");\n\n    let lorem = Lorem { ipsum: dolor, sit: amet };\n\n    let lorem = if ipsum { dolor } else { sit };\n}\n```\n\n\nSee also:\n* [`max_width`](#max_width)\n* [`fn_call_width`](#fn_call_width)\n* [`attr_fn_like_width`](#attr_fn_like_width)\n* [`struct_lit_width`](#struct_lit_width)\n* [`struct_variant_width`](#struct_variant_width)\n* [`array_width`](#array_width)\n* [`chain_width`](#chain_width)\n* [`single_line_if_else_max_width`](#single_line_if_else_max_width)\n* [`single_line_let_else_max_width`](#single_line_let_else_max_width)\n\n## `use_try_shorthand`\n\nReplace uses of the try! macro by the ? shorthand\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: Yes\n\n#### `false` (default):\n\n```rust\nfn main() {\n    let lorem = ipsum.map(|dolor| dolor.sit())?;\n\n    let lorem = try!(ipsum.map(|dolor| dolor.sit()));\n}\n```\n\n#### `true`:\n\n```rust\nfn main() {\n    let lorem = ipsum.map(|dolor| dolor.sit())?;\n}\n```\n\n## `version`\n\nThis option is deprecated and has been replaced by [`style_edition`](#style_edition).\n`version = \"One\"` is equivalent to `style_edition = \"(2015|2018|2021)\"` and\n`version = \"Two\"` is equivalent to `style_edition = \"2024\"`\n\n- **Default value**: `One`\n- **Possible values**: `One`, `Two`\n- **Stable**: No (tracking issue: [#3383](https://github.com/rust-lang/rustfmt/issues/3383))\n\n### Example\n\n```toml\nversion = \"Two\"\n```\n\n## `where_single_line`\n\nForces the `where` clause to be laid out on a single line.\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3359](https://github.com/rust-lang/rustfmt/issues/3359))\n\n#### `false` (default):\n\n```rust\nimpl<T> Lorem for T\nwhere\n    Option<T>: Ipsum,\n{\n    // body\n}\n```\n\n#### `true`:\n\n```rust\nimpl<T> Lorem for T\nwhere Option<T>: Ipsum\n{\n    // body\n}\n```\n\nSee also [`brace_style`](#brace_style), [`control_brace_style`](#control_brace_style).\n\n\n## `wrap_comments`\n\nBreak comments to fit on the line\n\nNote that no wrapping will happen if:\n1. The comment is the start of a markdown header doc comment\n2. A URL was found in the comment\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n- **Stable**: No (tracking issue: [#3347](https://github.com/rust-lang/rustfmt/issues/3347))\n\n#### `false` (default):\n\n```rust\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n// sed do eiusmod tempor incididunt ut labore et dolore\n// magna aliqua. Ut enim ad minim veniam, quis nostrud\n// exercitation ullamco laboris nisi ut aliquip ex ea\n// commodo consequat.\n\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n// Information on the lorem ipsum can be found at the following url: https://en.wikipedia.org/wiki/Lorem_ipsum. Its text is: lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n/// # This doc comment is a very long header (it starts with a '#'). Had it not been a header it would have been wrapped. But because it is a header, it will not be. That is because wrapping a markdown header breaks it.\nstruct Foo {}\n```\n\n#### `true`:\n\n```rust\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n// sed do eiusmod tempor incididunt ut labore et dolore\n// magna aliqua. Ut enim ad minim veniam, quis nostrud\n// exercitation ullamco laboris nisi ut aliquip ex ea\n// commodo consequat.\n\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n// sed do eiusmod tempor incididunt ut labore et dolore\n// magna aliqua. Ut enim ad minim veniam, quis nostrud\n// exercitation ullamco laboris nisi ut aliquip ex ea\n// commodo consequat.\n\n// Information on the lorem ipsum can be found at the following url: https://en.wikipedia.org/wiki/Lorem_ipsum. Its text is: lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n/// # This doc comment is a very long header (it starts with a '#'). Had it not been a header it would have been wrapped. But because it is a header, it will not be. That is because wrapping a markdown header breaks it.\nstruct Foo {}\n```\n\n# Internal Options\n\n## `emit_mode`\n\nInternal option\n\n## `make_backup`\n\nInternal option, use `--backup`\n\n## `print_misformatted_file_names`\n\nInternal option, use `-l` or `--files-with-diff`\n"
        },
        {
          "name": "Contributing.md",
          "type": "blob",
          "size": 13.025390625,
          "content": "# Contributing\n\nThere are many ways to contribute to Rustfmt. This document lays out what they\nare and has information on how to get started. If you have any questions about\ncontributing or need help with anything, please ask in the WG-Rustfmt channel\non [Discord](https://discordapp.com/invite/rust-lang). Feel free to also ask questions\non issues, or file new issues specifically to get help.\n\nAll contributors are expected to follow our [Code of\nConduct](CODE_OF_CONDUCT.md).\n\n## Test and file issues\n\nIt would be really useful to have people use rustfmt on their projects and file\nissues where it does something you don't expect.\n\n\n## Create test cases\n\nHaving a strong test suite for a tool like this is essential. It is very easy\nto create regressions. Any tests you can add are very much appreciated.\n\nThe tests can be run with `cargo test`. This does a number of things:\n* runs the unit tests for a number of internal functions;\n* makes sure that rustfmt run on every file in `./tests/source/` is equal to its\n  associated file in `./tests/target/`;\n* runs idempotence tests on the files in `./tests/target/`. These files should\n  not be changed by rustfmt;\n* checks that rustfmt's code is not changed by running on itself. This ensures\n  that the project bootstraps.\n\nCreating a test is as easy as creating a new file in `./tests/source/` and an\nequally named one in `./tests/target/`. If it is only required that rustfmt\nleaves a piece of code unformatted, it may suffice to only create a target file.\n\nWhenever there's a discrepancy between the expected output when running tests, a\ncolourised diff will be printed so that the offending line(s) can quickly be\nidentified.\n\nWithout explicit settings, the tests will be run using rustfmt's default\nconfiguration. It is possible to run a test using non-default settings in several\nways. Firstly, you can include configuration parameters in comments at the top\nof the file. For example: to use 3 spaces per tab, start your test with\n`// rustfmt-tab_spaces: 3`. Just remember that the comment is part of the input,\nso include in both the source and target files! It is also possible to\nexplicitly specify the name of the expected output file in the target directory.\nUse `// rustfmt-target: filename.rs` for this. You can also specify a custom\nconfiguration by using the `rustfmt-config` directive. Rustfmt will then use\nthat toml file located in `./tests/config/` for its configuration. Including\n`// rustfmt-config: small_tabs.toml` will run your test with the configuration\nfile found at `./tests/config/small_tabs.toml`. The final option is used when the\ntest source file contains no configuration parameter comments. In this case, the\ntest harness looks for a configuration file with the same filename as the test\nfile in the `./tests/config/` directory, so a test source file named `test-indent.rs`\nwould need a configuration file named `test-indent.toml` in that directory. As an\nexample, the `issue-1111.rs` test file is configured by the file\n`./tests/config/issue-1111.toml`.\n\n## Debugging\n\nSome `rewrite_*` methods use the `debug!` macro for printing useful information.\nThese messages can be printed by using the environment variable `RUSTFMT_LOG=debug`.\nThese traces can be helpful in understanding which part of the code was used\nand get a better grasp on the execution flow.\n\n## Hack!\n\nHere are some [good starting issues](https://github.com/rust-lang/rustfmt/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22).\n\nIf you've found areas which need polish and don't have issues, please submit a\nPR, don't feel there needs to be an issue.\n\n\n### Guidelines\n\nRustfmt bootstraps, that is part of its test suite is running itself on its\nsource code. So, basically, the only style guideline is that you must pass the\ntests. That ensures that the Rustfmt source code adheres to our own conventions.\n\nTalking of tests, if you add a new feature or fix a bug, please also add a test.\nIt's really easy, see above for details. Please run `cargo test` before\nsubmitting a PR to ensure your patch passes all tests, it's pretty quick.\n\nRustfmt is post-1.0 and within major version releases we strive for backwards\ncompatibility (at least when using the default options). That means any code\nwhich changes Rustfmt's output must be guarded by either an option or a version\ncheck. The latter is implemented as an option called `option`. See the section on\n[configuration](#Configuration) below.\n\nPlease try to avoid leaving `TODO`s in the code. There are a few around, but I\nwish there weren't. You can leave `FIXME`s, preferably with an issue number.\n\n\n### Run Rustfmt from source code\n\nYou may want to run a version of rustfmt from source code as part of a test or\nhacking on the rustfmt codebase. It's strongly discouraged to install a version\nof rustfmt from source.\n\nTo run `rustfmt` on a file:\n\n```\ncargo run --bin rustfmt -- path/to/file.rs\n```\n\nIf you want to test modified `cargo-fmt`, or run `rustfmt` on the whole project (You may need to build rustfmt first):\n\n```\nRUSTFMT=\"./target/debug/rustfmt\" cargo run --bin cargo-fmt -- --manifest-path path/to/project/you/want2test/Cargo.toml\n```\n\n### Gate formatting changes\n\nA change that introduces a different code-formatting must be gated on the\n`style_edition` configuration. This is to ensure rustfmt upholds its formatting\nstability guarantees and adheres to the Style Edition process set in [RFC 3338]\n\nThis can be done by conditionally guarding the formatting change, e.g.:\n\n```rust\n// if the current stable Style Edition is Edition 2024\nif config.style_edition() <= StyleEdition::Edition2024 {\n    // current formatting\n} else {\n    // new formatting\n}\n```\n\nThis allows the user to apply the next formatting explicitly via the\nconfiguration, while being stable by default.\n\nThis can then be enhanced as needed if and when there are\nnew Style Editions with differing formatting prescriptions.\n\n| Note: Only formatting changes with default options need to be gated. |\n| --- |\n\n[RFC 3338]: https://rust-lang.github.io/rfcs/3338-style-evolution.html\n\n### A quick tour of Rustfmt\n\nRustfmt is basically a pretty printer - that is, its mode of operation is to\ntake an AST (abstract syntax tree) and print it in a nice way (including staying\nunder the maximum permitted width for a line). In order to get that AST, we\nfirst have to parse the source text, we use the Rust compiler's parser to do\nthat (see [src/lib.rs](src/lib.rs)). We shy away from doing anything too fancy, such as\nalgebraic approaches to pretty printing, instead relying on an heuristic\napproach, 'manually' crafting a string for each AST node. This results in quite\na lot of code, but it is relatively simple.\n\nThe AST is a tree view of source code. It carries all the semantic information\nabout the code, but not all of the syntax. In particular, we lose white space\nand comments (although doc comments are preserved). Rustfmt uses a view of the\nAST before macros are expanded, so there are still macro uses in the code. The\narguments to macros are not an AST, but raw tokens - this makes them harder to\nformat.\n\nThere are different nodes for every kind of item and expression in Rust. For\nmore details see the source code in the compiler -\n[ast.rs](https://github.com/rust-lang/rust/blob/master/compiler/rustc_ast/src/ast.rs) - and/or the\n[docs](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/index.html).\n\nMany nodes in the AST (but not all, annoyingly) have a `Span`. A `Span` is a\nrange in the source code, it can easily be converted to a snippet of source\ntext. When the AST does not contain enough information for us, we rely heavily\non `Span`s. For example, we can look between spans to try and find comments, or\nparse a snippet to see how the user wrote their source code.\n\nThe downside of using the AST is that we miss some information - primarily white\nspace and comments. White space is sometimes significant, although mostly we\nwant to ignore it and make our own. We strive to reproduce all comments, but\nthis is sometimes difficult. The crufty corners of Rustfmt are where we hack\naround the absence of comments in the AST and try to recreate them as best we\ncan.\n\nOur primary tool here is to look between spans for text we've missed. For\nexample, in a function call `foo(a, b)`, we have spans for `a` and `b`, in this\ncase, there is only a comma and a single space between the end of `a` and the\nstart of `b`, so there is nothing much to do. But if we look at\n`foo(a /* a comment */, b)`, then between `a` and `b` we find the comment.\n\nAt a higher level, Rustfmt has machinery so that we account for text between\n'top level' items. Then we can reproduce that text pretty much verbatim. We only\ncount spans we actually reformat, so if we can't format a span it is not missed\ncompletely but is reproduced in the output without being formatted. This is\nmostly handled in [src/missed_spans.rs](src/missed_spans.rs). See also `FmtVisitor::last_pos` in\n[src/visitor.rs](src/visitor.rs).\n\n\n#### Some important elements\n\nAt the highest level, Rustfmt uses a `Visitor` implementation called `FmtVisitor`\nto walk the AST. This is in [src/visitor.rs](src/visitor.rs). This is really just used to walk\nitems, rather than the bodies of functions. We also cover macros and attributes\nhere. Most methods of the visitor call out to `Rewrite` implementations that\nthen walk their own children.\n\nThe `Rewrite` trait is defined in [src/rewrite.rs](src/rewrite.rs). It is implemented for many\nthings that can be rewritten, mostly AST nodes. It has a single function,\n`rewrite`, which is called to rewrite `self` into an `Option<String>`. The\narguments are `width` which is the horizontal space we write into and `offset`\nwhich is how much we are currently indented from the lhs of the page. We also\ntake a context which contains information used for parsing, the current block\nindent, and a configuration (see below).\n\n##### Rewrite and Indent\n\nTo understand the indents, consider\n\n```\nimpl Foo {\n    fn foo(...) {\n        bar(argument_one,\n            baz());\n    }\n}\n```\n\nWhen formatting the `bar` call we will format the arguments in order, after the\nfirst one we know we are working on multiple lines (imagine it is longer than\nwritten). So, when we come to the second argument, the indent we pass to\n`rewrite` is 12, which puts us under the first argument. The current block\nindent (stored in the context) is 8. The former is used for visual indenting\n(when objects are vertically aligned with some marker), the latter is used for\nblock indenting (when objects are tabbed in from the lhs). The width available\nfor `baz()` will be the maximum width, minus the space used for indenting, minus\nthe space used for the `);`. (Note that actual argument formatting does not\nquite work like this, but it's close enough).\n\nThe `rewrite` function returns an `Option` - either we successfully rewrite and\nreturn the rewritten string for the caller to use, or we fail to rewrite and\nreturn `None`. This could be because Rustfmt encounters something it doesn't\nknow how to reformat, but more often it is because Rustfmt can't fit the item\ninto the required width. How to handle this is up to the caller. Often the\ncaller just gives up, ultimately relying on the missed spans system to paste in\nthe un-formatted source. A better solution (although not performed in many\nplaces) is for the caller to shuffle around some of its other items to make\nmore width, then call the function again with more space.\n\nSince it is common for callers to bail out when a callee fails, we often use a\n`?` operator to make this pattern more succinct.\n\nOne way we might find out that we don't have enough space is when computing how much\nspace we have. Something like `available_space = budget - overhead`. Since\nwidths are unsized integers, this would cause underflow. Therefore we use\nchecked subtraction: `available_space = budget.checked_sub(overhead)?`.\n`checked_sub` returns an `Option`, and if we would underflow `?` returns\n`None`, otherwise, we proceed with the computed space.\n\n##### Rewrite of list-like expressions\n\nMuch of the syntax in Rust is lists: lists of arguments, lists of fields, lists of\narray elements, etc. We have some generic code to handle lists, including how to\nspace them in horizontal and vertical space, indentation, comments between\nitems, trailing separators, etc. However, since there are so many options, the\ncode is a bit complex. Look in [src/lists.rs](src/lists.rs). `write_list` is the key function,\nand `ListFormatting` the key structure for configuration. You'll need to make a\n`ListItems` for input, this is usually done using `itemize_list`.\n\n##### Configuration\n\nRustfmt strives to be highly configurable. Often the first part of a patch is\ncreating a configuration option for the feature you are implementing. All\nhandling of configuration options is done in [src/config/mod.rs](src/config/mod.rs). Look for the\n`create_config!` macro at the end of the file for all the options. The rest of\nthe file defines a bunch of enums used for options, and the machinery to produce\nthe config struct and parse a config file, etc. Checking an option is done by\naccessing the correct field on the config struct, e.g., `config.max_width()`. Most\nfunctions have a `Config`, or one can be accessed via a visitor or context of\nsome kind.\n"
        },
        {
          "name": "Design.md",
          "type": "blob",
          "size": 8.5048828125,
          "content": "# Some thoughts on the design of rustfmt\n\n## Use cases\n\nA formatting tool can be used in different ways and the different use cases can\naffect the design of the tool. The use cases I'm particularly concerned with are:\n\n* running on a whole repo before check-in\n  - in particular, to replace the `make tidy` pass on the Rust distro\n* running on code from another project that you are adding to your own\n* using for mass changes in code style over a project\n\nSome valid use cases for a formatting tool which I am explicitly not trying to\naddress (although it would be nice, if possible):\n\n* running 'as you type' in an IDE\n* running on arbitrary snippets of code\n* running on Rust-like code, specifically code which doesn't parse\n* use as a pretty printer inside the compiler\n* refactoring\n* formatting totally unformatted source code\n\n\n## Scope and vision\n\nI do not subscribe to the notion that a formatting tool should only change\nwhitespace. I believe that we should semantics preserving, but not necessarily\nsyntax preserving, i.e., we can change the AST of a program.\n\nI.e., we might change glob imports to list or single imports, re-order imports,\nmove bounds to where clauses, combine multiple impls into a single impl, etc.\n\nHowever, we will not change the names of variables or make any changes which\n*could* change the semantics. To be ever so slightly formal, we might imagine\na compilers high level intermediate representation, we should strive to only\nmake changes which do not change the HIR, even if they do change the AST.\n\nI would like to be able to output refactoring scripts for making deeper changes\nthough. (E.g., renaming variables to satisfy our style guidelines).\n\nMy long term goal is that all style lints can be moved from the compiler to\nrustfmt and, as well as warning, can either fix problems or emit refactoring\nscripts to do so.\n\n### Configurability\n\nI believe reformatting should be configurable to some extent. We should read in\noptions from a configuration file and reformat accordingly. We should supply at\nleast a config file which matches the Rust style guidelines.\n\nThere should be multiple modes for running the tool. As well as simply replacing\neach file, we should be able to show the user a list of the changes we would\nmake, or show a list of violations without corrections (the difference being\nthat there are multiple ways to satisfy a given set of style guidelines, and we\nshould distinguish violations from deviations from our own model).\n\n\n## Implementation philosophy\n\nSome details of the philosophy behind the implementation.\n\n\n### Operate on the AST\n\nA reformatting tool can be based on either the AST or a token stream (in Rust\nthis is actually a stream of token trees, but it's not a fundamental difference).\nThere are pros and cons to the two approaches. I have chosen to use the AST\napproach. The primary reasons are that it allows us to do more sophisticated\nmanipulations, rather than just change whitespace, and it gives us more context\nwhen making those changes.\n\nThe advantage of the tokens approach is that you can operate on non-parsable\ncode. I don't care too much about that, it would be nice, but I think being able\nto perform sophisticated transformations is more important. In the future, I hope to\n(optionally) be able to use type information for informing reformatting too. One\nspecific case of unparsable code is macros. Using tokens is certainly easier\nhere, but I believe it is perfectly solvable with the AST approach. At the limit,\nwe can operate on just tokens in the macro case.\n\nI believe that there is not in fact that much difference between the two\napproaches. Due to imperfect span information, under the AST approach, we\nsometimes are reduced to examining tokens or do some re-lexing of our own. Under\nthe tokens approach, you need to implement your own (much simpler) parser. I\nbelieve that as the tool gets more sophisticated, you end up doing more at the\ntoken-level, or having an increasingly sophisticated parser, until at the limit\nyou have the same tool.\n\nHowever, I believe starting from the AST gets you more quickly to a usable and\nuseful tool.\n\n\n### Heuristic rather than algorithmic\n\nMany formatting tools use a very general algorithmic or even algebraic tool for\npretty printing. This results in very elegant code, but I believe does not give\nthe best results. I prefer a more ad hoc approach where each expression/item is\nformatted using custom rules. We hopefully don't end up with too much code due\nto good old fashioned abstraction and code sharing. This will give a bigger code\nbase, but hopefully a better result.\n\nIt also means that there will be some cases we can't format and we have to give\nup. I think that is OK. Hopefully, they are rare enough that manually fixing them\nis not painful. Better to have a tool that gives great code in 99% of cases and\nfails in 1% than a tool which gives 50% great code and 50% ugly code, but never\nfails.\n\n\n### Incremental development\n\nI want rustfmt to be useful as soon as possible and to always be useful. I\nspecifically don't want to have to wait for a feature (or worse, the whole tool)\nto be perfect before it is useful. The main ways this is achieved is to output\nthe source code where we can't yet reformat, be able to turn off new features\nuntil they are ready, and the 'do no harm' principle (see next section).\n\n\n### First, do no harm\n\nUntil rustfmt is perfect, there will always be a trade-off between doing more and\ndoing existing things well. I want to err on the side of the latter.\nSpecifically, rustfmt should never take OK code and make it look worse. If we\ncan't make it better, we should leave it as is. That might mean being less\naggressive than we like or using configurability.\n\n\n### Use the source code as guidance\n\nThere are often multiple ways to format code and satisfy standards. Where this\nis the case, we should use the source code as a hint for reformatting.\nFurthermore, where the code has been formatted in a particular way that satisfies\nthe coding standard, it should not be changed (this is sometimes not possible or\nnot worthwhile due to uniformity being desirable, but it is a useful goal).\n\n\n### Architecture details\n\nWe use the AST from [syntex_syntax], an export of rustc's libsyntax. We use\nsyntex_syntax's visit module to walk the AST to find starting points for\nreformatting. Eventually, we should reformat everything and we shouldn't need\nthe visit module. We keep track of the last formatted position in the code, and\nwhen we reformat the next piece of code we make sure to output the span for all\nthe code in between (handled by missed_spans.rs).\n\n[syntex_syntax]: https://crates.io/crates/syntex_syntax\n\nWe read in formatting configuration from a `rustfmt.toml` file if there is one.\nThe options and their defaults are defined in `config.rs`. A `Config` object is\npassed throughout the formatting code, and each formatting routine looks there\nfor its configuration.\n\nOur visitor keeps track of the desired current indent due to blocks (\n`block_indent`). Each `visit_*` method reformats code according to this indent,\n`config.comment_width()` and `config.max_width()`. Most reformatting that is done\nin the `visit_*` methods is a bit hacky and is meant to be temporary until it can\nbe done properly.\n\nThere are a bunch of methods called `rewrite_*`. They do the bulk of the\nreformatting. These take the AST node to be reformatted (this may not literally\nbe an AST node from syntex_syntax: there might be multiple parameters\ndescribing a logical node), the current indent, and the current width budget.\nThey return a `String` (or sometimes an `Option<String>`) which formats the\ncode in the box given by the indent and width budget. If the method fails, it\nreturns `None` and the calling method then has to fallback in some way to give\nthe callee more space.\n\nSo, in summary, to format a node, we calculate the width budget and then walk down\nthe tree from the node. At a leaf, we generate an actual string and then unwind,\ncombining these strings as we go back up the tree.\n\nFor example, consider a method definition:\n\n```\n    fn foo(a: A, b: B) {\n        ...\n    }\n```\n\nWe start at indent 4, the rewrite function for the whole function knows it must\nwrite `fn foo(` before the arguments and `) {` after them, assuming the max width\nis 100, it thus asks the rewrite argument list function to rewrite with an indent\nof 11 and in a width of 86. Assuming that is possible (obviously in this case),\nit returns a string for the arguments and it can make a string for the function\nheader. If the arguments couldn't be fitted in that space, we might try to\nfallback to a hanging indent, so we try again with indent 8 and width 89.\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.59765625,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright 2016-2021 The Rust Project Developers\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.05078125,
          "content": "Copyright (c) 2016-2021 The Rust Project Developers\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile.toml",
          "type": "blob",
          "size": 0.9580078125,
          "content": "[env]\nCFG_RELEASE = { value = \"${CARGO_MAKE_RUST_VERSION}\", condition = { env_not_set = [\"CFG_RELEASE\"] } }\nCFG_RELEASE_CHANNEL = { value = \"${CARGO_MAKE_RUST_CHANNEL}\", condition = { env_not_set = [\"CFG_RELEASE_CHANNEL\"] } }\n\n[tasks.build-bin]\ncommand = \"cargo\"\nargs = [\n  \"build\",\n  \"--bin\",\n  \"rustfmt\",\n  \"--bin\",\n  \"cargo-fmt\",\n]\n\n[tasks.build-bins]\ncommand = \"cargo\"\nargs = [\n  \"build\",\n  \"--bins\",\n]\n\n[tasks.install]\ncommand = \"cargo\"\nargs = [\n  \"install\",\n  \"--path\",\n  \".\",\n  \"--force\",\n  \"--locked\", # Respect Cargo.lock\n]\n\n[tasks.release]\ncommand = \"cargo\"\nargs = [\n  \"build\",\n\t\"--release\",\n]\n\n[tasks.test]\ncommand = \"cargo\"\nargs = [\n  \"test\",\n]\n\n[tasks.test-all]\ndependencies = [\"build-bin\"]\nrun_task = { name = [\"test\", \"test-ignored\"] }\n\n[tasks.test-ignored]\ncommand = \"cargo\"\nargs = [\n  \"test\",\n\t\"--\",\n\t\"--ignored\",\n]\n\n[tasks.b]\nalias = \"build\"\n\n[tasks.bb]\nalias = \"build-bin\"\n\n[tasks.bins]\nalias = \"build-bins\"\n\n[tasks.c]\nalias = \"check\"\n\n[tasks.t]\nalias = \"test\"\n\n"
        },
        {
          "name": "Processes.md",
          "type": "blob",
          "size": 1.5751953125,
          "content": "This document outlines processes regarding management of rustfmt.\n\n# Stabilising an Option\n\nIn this Section, we describe how to stabilise an option of the rustfmt's configuration.\n\n## Conditions\n\n- Is the default value correct ?\n- The design and implementation of the option are sound and clean.\n- The option is well tested, both in unit tests and, optimally, in real usage.\n- There is no open bug about the option that prevents its use.\n\n## Steps\n\nOpen a pull request that closes the tracking issue. The tracking issue is listed beside the option in `Configurations.md`.\n\n- Update the `Config` enum marking the option as stable.\n- Update the `Configuration.md` file marking the option as stable.\n- Update `CHANGELOG.md` marking the option as stable.\n\n## After the stabilisation\n\nThe option should remain backward-compatible with previous parameters of the option. For instance, if the option is an enum `enum Foo { Alice, Bob }` and the variant `Foo::Bob` is removed/renamed, existing use of the `Foo::Bob` variant should map to the new logic. Breaking changes can be applied under the condition they are version-gated.\n\n# Make a Release\n\n## 0. Update CHANGELOG.md\n\n## 1. Update Cargo.toml and Cargo.lock\n\nFor example, 1.0.0 -> 1.0.1:\n\n```diff\n-version = \"1.0.0\"\n+version = \"1.0.1\"\n```\n\n## 2. Push the commit to the master branch\n\nE.g., https://github.com/rust-lang/rustfmt/commit/5274b49caa1a7db6ac10c76bf1a3d5710ccef569\n\n## 3. Create a release tag\n\n```sh\ngit tag -s v1.2.3 -m \"Release 1.2.3\"\n```\n\n## 4. Publish to crates.io\n\n`cargo publish`\n\n## 5. Create a PR to rust-lang/rust to update the rustfmt submodule\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.9580078125,
          "content": "# rustfmt [![linux](https://github.com/rust-lang/rustfmt/actions/workflows/linux.yml/badge.svg?event=push)](https://github.com/rust-lang/rustfmt/actions/workflows/linux.yml) [![mac](https://github.com/rust-lang/rustfmt/actions/workflows/mac.yml/badge.svg?event=push)](https://github.com/rust-lang/rustfmt/actions/workflows/mac.yml) [![windows](https://github.com/rust-lang/rustfmt/actions/workflows/windows.yml/badge.svg?event=push)](https://github.com/rust-lang/rustfmt/actions/workflows/windows.yml) [![crates.io](https://img.shields.io/crates/v/rustfmt-nightly.svg)](https://crates.io/crates/rustfmt-nightly)\n\nA tool for formatting Rust code according to style guidelines.\n\nIf you'd like to help out (and you should, it's a fun project!), see\n[Contributing.md](Contributing.md) and our [Code of\nConduct](CODE_OF_CONDUCT.md).\n\nYou can use rustfmt in Travis CI builds. We provide a minimal Travis CI\nconfiguration (see [here](#checking-style-on-a-ci-server)).\n\n## Quick start\n\nYou can run `rustfmt` with Rust 1.24 and above.\n\n### On the Stable toolchain\n\nTo install:\n\n```sh\nrustup component add rustfmt\n```\n\nTo run on a cargo project in the current working directory:\n\n```sh\ncargo fmt\n```\n\n### On the Nightly toolchain\n\nFor the latest and greatest `rustfmt`, nightly is required.\n\nTo install:\n\n```sh\nrustup component add rustfmt --toolchain nightly\n```\n\nTo run on a cargo project in the current working directory:\n\n```sh\ncargo +nightly fmt\n```\n\n## Limitations\n\nRustfmt tries to work on as much Rust code as possible. Sometimes, the code\ndoesn't even need to compile! In general, we are looking to limit areas of\ninstability; in particular, post-1.0, the formatting of most code should not\nchange as Rustfmt improves. However, there are some things that Rustfmt can't\ndo or can't do well (and thus where formatting might change significantly,\neven post-1.0). We would like to reduce the list of limitations over time.\n\nThe following list enumerates areas where Rustfmt does not work or where the\nstability guarantees do not apply (we don't make a distinction between the two\nbecause in the future Rustfmt might work on code where it currently does not):\n\n* a program where any part of the program does not parse (parsing is an early\n  stage of compilation and in Rust includes macro expansion).\n* Macro declarations and uses (current status: some macro declarations and uses\n  are formatted).\n* Comments, including any AST node with a comment 'inside' (Rustfmt does not\n  currently attempt to format comments, it does format code with comments inside, but that formatting may change in the future).\n* Rust code in code blocks in comments.\n* Any fragment of a program (i.e., stability guarantees only apply to whole\n  programs, even where fragments of a program can be formatted today).\n* Code containing non-ascii unicode characters (we believe Rustfmt mostly works\n  here, but do not have the test coverage or experience to be 100% sure).\n* Bugs in Rustfmt (like any software, Rustfmt has bugs, we do not consider bug\n  fixes to break our stability guarantees).\n\n\n## Running\n\nYou can run Rustfmt by just typing `rustfmt filename` if you used `cargo\ninstall`. This runs rustfmt on the given file, if the file includes out of line\nmodules, then we reformat those too. So to run on a whole module or crate, you\njust need to run on the root file (usually mod.rs or lib.rs). Rustfmt can also\nread data from stdin. Alternatively, you can use `cargo fmt` to format all\nbinary and library targets of your crate.\n\nYou can run `rustfmt --help` for information about available arguments.\nThe easiest way to run rustfmt against a project is with `cargo fmt`. `cargo fmt` works on both\nsingle-crate projects and [cargo workspaces](https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html).\nPlease see `cargo fmt --help` for usage information.\n\nYou can specify the path to your own `rustfmt` binary for cargo to use by setting the`RUSTFMT` \nenvironment variable. This was added in v1.4.22, so you must have this version or newer to leverage this feature (`cargo fmt --version`)\n\n### Running `rustfmt` directly\n\nTo format individual files or arbitrary codes from stdin, the `rustfmt` binary should be used. Some\nexamples follow:\n\n- `rustfmt lib.rs main.rs` will format \"lib.rs\" and \"main.rs\" in place\n- `rustfmt` will read a code from stdin and write formatting to stdout\n  - `echo \"fn     main() {}\" | rustfmt` would emit \"fn main() {}\".\n\nFor more information, including arguments and emit options, see `rustfmt --help`.\n\n### Verifying code is formatted\n\nWhen running with `--check`, Rustfmt will exit with `0` if Rustfmt would not\nmake any formatting changes to the input, and `1` if Rustfmt would make changes.\nIn other modes, Rustfmt will exit with `1` if there was some error during\nformatting (for example a parsing or internal error) and `0` if formatting\ncompleted without error (whether or not changes were made).\n\n\n\n## Running Rustfmt from your editor\n\n* [Vim](https://github.com/rust-lang/rust.vim#formatting-with-rustfmt)\n* [Emacs](https://github.com/rust-lang/rust-mode)\n* [Sublime Text 3](https://packagecontrol.io/packages/RustFmt)\n* [Atom](atom.md)\n* [Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer)\n* [IntelliJ or CLion](intellij.md)\n\n\n## Checking style on a CI server\n\nTo keep your code base consistently formatted, it can be helpful to fail the CI build\nwhen a pull request contains unformatted code. Using `--check` instructs\nrustfmt to exit with an error code if the input is not formatted correctly.\nIt will also print any found differences. (Older versions of Rustfmt don't\nsupport `--check`, use `--write-mode diff`).\n\nA minimal Travis setup could look like this (requires Rust 1.31.0 or greater):\n\n```yaml\nlanguage: rust\nbefore_script:\n- rustup component add rustfmt\nscript:\n- cargo build\n- cargo test\n- cargo fmt --all -- --check\n```\n\nSee [this blog post](https://medium.com/@ag_dubs/enforcing-style-in-ci-for-rust-projects-18f6b09ec69d)\nfor more info.\n\n## How to build and test\n\n`cargo build` to build.\n\n`cargo test` to run all tests.\n\nTo run rustfmt after this, use `cargo run --bin rustfmt -- filename`. See the\nnotes above on running rustfmt.\n\n\n## Configuring Rustfmt\n\nRustfmt is designed to be very configurable. You can create a TOML file called\n`rustfmt.toml` or `.rustfmt.toml`, place it in the project or any other parent\ndirectory and it will apply the options in that file. See `rustfmt\n--help=config` for the options which are available, or if you prefer to see\nvisual style previews, [GitHub page](https://rust-lang.github.io/rustfmt/).\n\nBy default, Rustfmt uses a style which conforms to the [Rust style guide][style\nguide] that has been formalized through the [style RFC\nprocess][fmt rfcs].\n\nConfiguration options are either stable or unstable. Stable options can always\nbe used, while unstable ones are only available on a nightly toolchain, and opt-in.\nSee [GitHub page](https://rust-lang.github.io/rustfmt/) for details.\n\n### Rust's Editions\n\nRustfmt is able to pick up the edition used by reading the `Cargo.toml` file if\nexecuted through the Cargo's formatting tool `cargo fmt`. Otherwise, the edition\nneeds to be specified in `rustfmt.toml`, e.g., with `edition = \"2018\"`.\n\n## Tips\n\n* For things you do not want rustfmt to mangle, use `#[rustfmt::skip]`\n* To prevent rustfmt from formatting a macro or an attribute,\n  use `#[rustfmt::skip::macros(target_macro_name)]` or\n  `#[rustfmt::skip::attributes(target_attribute_name)]`\n\n  Example:\n\n    ```rust\n    #![rustfmt::skip::attributes(custom_attribute)]\n\n    #[custom_attribute(formatting , here , should , be , Skipped)]\n    #[rustfmt::skip::macros(html)]\n    fn main() {\n        let macro_result1 = html! { <div>\n    Hello</div>\n        }.to_string();\n    ```\n* When you run rustfmt, place a file named `rustfmt.toml` or `.rustfmt.toml` in\n  target file directory or its parents to override the default settings of\n  rustfmt. You can generate a file containing the default configuration with\n  `rustfmt --print-config default rustfmt.toml` and customize as needed.\n* After successful compilation, a `rustfmt` executable can be found in the\n  target directory.\n* If you're having issues compiling Rustfmt (or compile errors when trying to\n  install), make sure you have the most recent version of Rust installed.\n\n* You can change the way rustfmt emits the changes with the --emit flag:\n\n  Example:\n\n  ```sh\n  cargo fmt -- --emit files\n  ```\n\n  Options:\n\n  | Flag |Description| Nightly Only |\n  |:---:|:---:|:---:|\n  | files | overwrites output to files | No |\n  | stdout | writes output to stdout | No |\n  | coverage | displays how much of the input file was processed | Yes |\n  | checkstyle | emits in a checkstyle format | Yes |\n  | json | emits diffs in a json format | Yes |\n\n## License\n\nRustfmt is distributed under the terms of both the MIT license and the\nApache License (Version 2.0).\n\nSee [LICENSE-APACHE](LICENSE-APACHE) and [LICENSE-MIT](LICENSE-MIT) for details.\n\n[rust]: https://github.com/rust-lang/rust\n[fmt rfcs]: https://github.com/rust-dev-tools/fmt-rfcs\n[style guide]: https://doc.rust-lang.org/nightly/style-guide/\n"
        },
        {
          "name": "atom.md",
          "type": "blob",
          "size": 1.380859375,
          "content": "# Running Rustfmt from Atom\n\n## rust-analyzer\n\nRustfmt can be utilized from [rust-analyzer](https://rust-analyzer.github.io/) which is provided by [ide-rust](https://atom.io/packages/ide-rust).\n\n`apm install ide-rust`\n\nOnce installed a file is formatted with `ctrl-shift-c` or `cmd-shift-c`, also available in context menu.\n\n## atom-beautify\n\nAnother way is to install [Beautify](https://atom.io/packages/atom-beautify), you\ncan do this by running `apm install atom-beautify`.\n\nThere are 2 settings that need to be configured in the atom beautifier configuration.\n\n-  Install rustfmt as per the [readme](README.md).\n-  Open the atom beautifier settings\n\n   Go to Edit->Preferences. Click the packages on the left side and click on setting for atom-beautifier\n\n-  Set rustfmt as the beautifier\n\n   Find the setting labeled *Language Config - Rust - Default Beautifier* and make sure it is set to rustfmt as shown below. You can also set the beautifier to auto format on save here.\n![image](https://cloud.githubusercontent.com/assets/6623285/11147685/c8ade16c-8a3d-11e5-9da5-bd3d998d97f9.png)\n\n-  Set the path to your rustfmt location\n\n   Find the setting labeled *Rust - Rustfmt Path*. This setting is towards the bottom and you will need to scroll a bit. Set it to the path for your rustfmt executable.\n![image](https://cloud.githubusercontent.com/assets/6623285/11147718/f4d10224-8a3d-11e5-9f69-9e900cbe0278.png)\n"
        },
        {
          "name": "bootstrap.sh",
          "type": "blob",
          "size": 0.4716796875,
          "content": "#!/bin/bash\n\n# Make sure you double check the diffs after running this script - with great\n# power comes great responsibility.\n# We deliberately avoid reformatting files with rustfmt comment directives.\n\ncargo build --release\n\ntarget/release/rustfmt src/lib.rs\ntarget/release/rustfmt src/bin/main.rs\ntarget/release/rustfmt src/cargo-fmt/main.rs\n\nfor filename in tests/target/*.rs; do\n    if ! grep -q \"rustfmt-\" \"$filename\"; then\n        target/release/rustfmt $filename\n    fi\ndone\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 1.69921875,
          "content": "use std::env;\nuse std::fs::File;\nuse std::io::Write;\nuse std::path::{Path, PathBuf};\nuse std::process::Command;\n\nfn main() {\n    // Only check .git/HEAD dirty status if it exists - doing so when\n    // building dependent crates may lead to false positives and rebuilds\n    if Path::new(\".git/HEAD\").exists() {\n        println!(\"cargo:rerun-if-changed=.git/HEAD\");\n    }\n\n    println!(\"cargo:rerun-if-env-changed=CFG_RELEASE_CHANNEL\");\n\n    let out_dir = PathBuf::from(env::var_os(\"OUT_DIR\").unwrap());\n\n    File::create(out_dir.join(\"commit-info.txt\"))\n        .unwrap()\n        .write_all(commit_info().as_bytes())\n        .unwrap();\n}\n\n// Try to get hash and date of the last commit on a best effort basis. If anything goes wrong\n// (git not installed or if this is not a git repository) just return an empty string.\nfn commit_info() -> String {\n    match (channel(), commit_hash(), commit_date()) {\n        (channel, Some(hash), Some(date)) => format!(\"{} ({} {})\", channel, hash, date),\n        _ => String::new(),\n    }\n}\n\nfn channel() -> String {\n    if let Ok(channel) = env::var(\"CFG_RELEASE_CHANNEL\") {\n        channel\n    } else {\n        \"nightly\".to_owned()\n    }\n}\n\nfn commit_hash() -> Option<String> {\n    let output = Command::new(\"git\")\n        .args([\"rev-parse\", \"HEAD\"])\n        .output()\n        .ok()?;\n    let mut stdout = output.status.success().then_some(output.stdout)?;\n    stdout.truncate(10);\n    String::from_utf8(stdout).ok()\n}\n\nfn commit_date() -> Option<String> {\n    let output = Command::new(\"git\")\n        .args([\"log\", \"-1\", \"--date=short\", \"--pretty=format:%cd\"])\n        .output()\n        .ok()?;\n    let stdout = output.status.success().then_some(output.stdout)?;\n    String::from_utf8(stdout).ok()\n}\n"
        },
        {
          "name": "check_diff",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "config_proc_macro",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "intellij.md",
          "type": "blob",
          "size": 1.9765625,
          "content": "# Running Rustfmt from IntelliJ or CLion\n\n## Installation\n\n- Install [CLion](https://www.jetbrains.com/clion/), [IntelliJ Ultimate or CE](https://www.jetbrains.com/idea/) through the direct download link or using the [JetBrains Toolbox](https://www.jetbrains.com/toolbox/).\n  CLion and IntelliJ Ultimate [provide a built-in debugger interface](https://github.com/intellij-rust/intellij-rust#compatible-ides) but they are not free like IntelliJ CE.\n\n- Install the [Rust Plugin](https://intellij-rust.github.io/) by navigating to File → Settings → Plugins and searching the plugin in the Marketplace\n  ![plugins](https://user-images.githubusercontent.com/6505554/83944518-6f1e5c00-a81d-11ea-9c35-e16948811ba8.png)\n\n- Press \"Install\" on the Rust plugin\n  ![install rust](https://user-images.githubusercontent.com/6505554/83944533-82c9c280-a81d-11ea-86b3-ee2e31bc7d12.png)\n  \n- Restart CLion/IntelliJ\n\n## Configuration\n\n### Run Rustfmt on save\n\n- Open Rustfmt settings (File → Settings → Languages & Frameworks → Rust → Rustfmt) and enable \"Run rustfmt on Save\"\n  ![run_rustfmt_on_save](https://user-images.githubusercontent.com/6505554/83944610-3468f380-a81e-11ea-9c34-0cbd18dd4969.png)\n\n- IntelliJ uses autosave, so now your files will always be formatted according to rustfmt. Alternatively you can use Ctrl+S to reformat file manually\n\n### Bind shortcut to \"Reformat File with Rustfmt\" action\n\n- Open the settings window (File → Settings) and search for \"reformat\"\n  ![keymap](https://user-images.githubusercontent.com/1133787/47240922-2ae10c80-d3ea-11e8-9d8f-c798d9749240.png)\n- Right-click on \"Reformat File with Rustfmt\" and assign a keyboard shortcut\n\n  ![shortcut_window](https://user-images.githubusercontent.com/1133787/47240981-5b28ab00-d3ea-11e8-882e-8b864164db74.png)\n- Press \"OK\"\n  ![shortcut_after](https://user-images.githubusercontent.com/1133787/47241000-6976c700-d3ea-11e8-9342-50ebc2f9f97b.png)\n  \n- Done. You can now use rustfmt in an opened *.rs file with your previously specified shortcut\n"
        },
        {
          "name": "rust-toolchain",
          "type": "blob",
          "size": 0.08203125,
          "content": "[toolchain]\nchannel = \"nightly-2024-12-02\"\ncomponents = [\"llvm-tools\", \"rustc-dev\"]\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.1103515625,
          "content": "error_on_line_overflow = true\nerror_on_unformatted = true\nstyle_edition = \"2024\"\noverflow_delimited_expr = false\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "triagebot.toml",
          "type": "blob",
          "size": 0.052734375,
          "content": "[autolabel.\"pr-not-reviewed\"]\nnew_pr = true\n\n[assign]\n"
        }
      ]
    }
  ]
}