{
  "metadata": {
    "timestamp": 1736709391654,
    "page": 111,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tock/tock",
      "stars": 5559,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.3603515625,
          "content": "# Licensed under the Apache License, Version 2.0 or the MIT License.\n# SPDX-License-Identifier: Apache-2.0 OR MIT\n# Copyright Tock Contributors 2023.\n\ntarget\nbuild/*\n*.rlib\n*.sdb\n*.bin\n*.elf\n*.o\n*.ll\n.gdbinit\n.gdb_history\n\n## OS X\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n# Thumbnails\n._*\n\n# Files that might appear on external disk\n.Spotlight-V100\n.Trashes\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n## Log Files\n*.log\n\n## Vim tags files\ntags\n\n# Files generated by rustfmt\n*.bk\n\n# rustdoc folder\ndoc/rustdoc\n\n# Backup and swap files\n*~\n[._]*.s[a-v][a-z]\n[._]*.sw[a-p]\n[._]s[a-v][a-z]\n[._]sw[a-p]\n\n/.idea\n\n# Cargo.lock files have a lot of noisy churn during development. Instead they\n# are manually included for releases.\nCargo.lock\n\n# The QEMU directory\ntools/qemu\n\n# Python scripts\n__pycache__\n\n# Node.js modules\nnode_modules\npackage-lock.json\n\n# Local Netlify folder\n.netlify\n\n# OpenTitan test build\nboards/opentitan/earlgrey-*/binary*\nboards/opentitan/earlgrey-*/verilator_build/\n\n# FuseSoC build files\nboards/swervolf/binary.hex\nboards/swervolf/build/\nboards/swervolf/fusesoc.conf\nboards/swervolf/fusesoc_libraries/\n\n# ESP C3 temp hex\nboards/esp32-c3-devkitM-1/binary.hex\n\n# Redboard Artemis Nano test binary\nboards/apollo3/redboard_artemis_nano/redboard-artemis-nano-tests.bin\n"
        },
        {
          "name": ".lcignore",
          "type": "blob",
          "size": 0.990234375,
          "content": "# Licensed under the Apache License, Version 2.0 or the MIT License.\n# SPDX-License-Identifier: Apache-2.0 OR MIT\n# Copyright Tock Contributors 2022.\n# Copyright Google LLC 2022.\n\n/.git/\n/COPYRIGHT\n/LICENSE-APACHE\n/LICENSE-MIT\n\n# Files that do not support comments.\n*.json\n*.md\n\n# We're a bit more permissive in the doc/ directory.\n/doc/**/*.svg\n/doc/**/*.txt\n\n# Files that are not authored by Tock contributors.\n/boards/apollo3/ambiq/am_defines.py\n/boards/apollo3/ambiq/ambiq_bin2board.py\n/boards/apollo3/ambiq/keys_info.py\n/boards/arty_e21/core/sifive_coreip_E21_AHB_rtl_eval_v19_05p1_release_arty_a7_100t.mcs\n/boards/arty_e21/core/sifive_coreip_E21_FPGA_Evaluation_v19_02_rc0.mcs\n/tools/sha256sum/src/main.rs\n\n# These files are part of the license checker's test suite, and are designed to\n# produce license checker errors.\n/tools/license-checker/testdata/error_missing.rs\n/tools/license-checker/testdata/many_errors.rs\n/tools/license-checker/testdata/no_copyright.rs\n/tools/license-checker/testdata/no_spdx.rs\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 0.8095703125,
          "content": "# Authors\n\nThe Tock Project Developers include dozens of contributors, some on behalf of\ntheir university, company, or organization. The most up to date list of\ncontributors is available in the git history: `git shortlog -s -n`.\n\nOrganizations that have contributed code to Tock include:\n\n  * Atihita\n  * Chalmers University\n  * Google LLC\n  * Helium\n  * MIT\n  * MIT Lincoln Laboratory\n  * Princeton University\n  * ROSEdu Summer of Code\n  * Stanford University\n  * University of California, Berkeley\n  * University of California, San Diego\n  * University of Michigan\n  * University of Stuttgart\n  * University of Virginia\n  * Western Digital\n  * Wyliodrin\n\n_Note: the above list may be incomplete. If your organization has supported you in\ncontributing to Tock, and wish to be acknowledged, please update this list accordingly._\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 31.8056640625,
          "content": "New in 2.2\n==========\n\nTock 2.2 represents two years of Tock development since v2.1.1. This release\ncontains almost 3900 commits made across 840 PRs by 90 contributors (of which 48\nare new contributors!). It is the first Tock release that can compile on a\nstable Rust toolchain, and contains many other important fixes, new subsystems,\nnew platforms, new drivers, and major refactors.\n\n* Backwards Compatibility\n\n  Tock 2.2 extends its system call interface through one new system call\n  ([`Yield-WaitFor`](https://github.com/tock/tock/pull/3577)), but retains\n  backwards compatbility with Tock 2.1.1 for its core system call interface and\n  all [stabilized\n  drivers](https://github.com/tock/tock/tree/7c88a6209e3960c0eb2081c5071693dc1987964d/doc/syscalls).\n\n  In this release, we revised Tock's alarm system call driver implementation to\n  predictably wrap its `ticks` values at `(2**32 - 1)` ticks, across all\n  platforms. Before this change, hardware alarm implementations that were less\n  than 32 bit wide would wrap before reaching `(2**32 - 1)` ticks, which\n  complicated correct alarm handling in userspace. In Tock 2.2, these alarm\n  implementations are scaled to 32 bit, while also scaling their advertised\n  frequency appropriately. While this change is non-breaking and compatible with\n  the previous alarm implementation, it can expose such scaled alarms to\n  userspace at significantly higher advertised `frequency` values. Userspace\n  alarm implementations that did not correctly handle such high frequencies may\n  need to be fixed to support this new driver implementation.\n\n* Security and `arch`-crate Fixes\n\n  Tock 2.2 includes important and security-relevant fixes for its Cortex-M and\n  RISC-V architecture support.\n\n  * When switching between applications, the RISC-V PMP implementation did not\n    correctly invalidate any additional memory protection regions that are not\n    overwritten by the target app's PMP configuration. Under certain conditions\n    this can allow an application to access private memory regions belonging to\n    a different applications (such as when using IPC).\n\n  * The Cortex-M (Armv7-M) and Cortex-M0/M0+ (Armv6-M) hard fault, interrupt and\n    `svc` handlers contained a bug that could allow an application to execute in\n    `privileged` mode after returning from the handler. This allows an\n    application to execute code at kernel privileges and read / write arbitrary\n    memory.\n\n* Stable Rust Support\n\n  This release removes all nightly Rust features from all of Tock's core kernel\n  crates (such as `kernel`, `arch/*`, and `chips/*`). This allows Tock to be\n  built on the Rust stable toolchain for the first time!\n\n  We demonstrate this by switching the `hail` board to a stable toolchain in\n  this release. We continue to compile other boards on the Rust nightly\n  toolchain, as this enables some important code-size optimizations (such as by\n  compiling our own, size-optimized core library).\n\n* `AppID`, Credentials and Storage Permissions\n\n  This Tock release revisits how applications are identified in the kernel, and\n  introduces a set of mechanisms that allow developers to identify, verify, and\n  restrict applications that are running on a Tock kernel. AppIDs are the core\n  mechanism to enable this and identify an application contained in a userspace\n  binary. AppIDs allow the kernel to apply security policies to applications as\n  their code evolves and their binaries change. We specify AppIDs, Credentials\n  and their interactions with process loading in [a draft\n  TRD](https://github.com/tock/tock/blob/7c88a6209e3960c0eb2081c5071693dc1987964d/doc/reference/trd-appid.md).\n\n  Additionally, we introduce a mechanism to assign applications permissions to\n  access some persistent storage (e.g., keys in a key value store). This\n  mechanism interacts with AppIDs (ShortIDs) and is also specified in a [a draft\n  TRD](https://github.com/tock/tock/blob/7c88a6209e3960c0eb2081c5071693dc1987964d/doc/reference/trd-storage-permissions.md).\n\n* Major Refactors and Interface Changes\n\n  We implement a number of kernel-internal refactors and interface changes:\n\n  - System call drivers are now mandated to either return `Success` or\n    `Failure(ErrorCode::NODEVICE)` for a `command` system call with command\n    number `0`. Previously, some drivers used this command number to also convey\n    additional information to userspace. This release does not change the\n    interface of any [stabilized\n    drivers](https://github.com/tock/tock/tree/7c88a6209e3960c0eb2081c5071693dc1987964d/doc/syscalls),\n    which will be updated as part of Tock 3.0.\n\n  - Tock 2.2 introduces [a new policy to support external\n    dependencies][external-deps] in the upstream Tock codebase. As part of this\n    effort, we split up the existing, single `capsules` crate into multipe\n    crates (such as `capsules-core`, `capsules-extra`, and `capsules-system`)\n    with different guarantees concerning stability and use of external\n    dependencies. The `core` capsules crate contains capsules deemed essential\n    to most Tock systems, as well as virtualizers which enable a given single\n    peripheral to be used by multiple clients. Other capsules have been moved to\n    the `extra` capsules crate. The `system` capsules crate contains components\n    that extend the functionality of the Tock core kernel, while not requiring\n    `unsafe`.\n\n  - Furthermore, the `DeferredCall` and `DynamicDeferredCall` subsystems have\n    been replaced with a more lightweight and unified deferred call\n    infrastructure. This new approach has a smaller code size overhead and\n    requires less setup boilerplate code than `DynamicDeferredCall`.\n\n  - `LeasableBuffer` has been renamed to `SubSlice` and features a significantly\n    improved API. Multiple subsystems have been ported to this new type.\n\n  - Tock 2.2 introduces \"configuration boards\": variants of in-tree board\n    definition showcasing certain subsystems or peripherals. These boards (under\n    `boards/configurations`) are implemented by converting some Tock boards into\n    combined \"lib + bin\" crates and extending these boards.\n\n  - Tock can now be built entirely using `cargo` and without its Makefiles. This\n    change also simplifies downstream board definitions:\n\n  - A new `StreamingProcessSlice` helper provides a reusable data structure to\n    convey a \"stream\" of data from capsures to userspace. This is used in Tock's\n    new CAN driver, and is useful for ADC, networking, etc.\n\n  - Tock introduces a new interface for custom implementations of the\n    userspace-syscall boundary to hook into the RISC-V trap handler, by\n    specifying which registers are clobbered and providing a generic trampoline\n    to jump to custom code on a trap.\n\n* New Boards\n\n  This release features support for 7 new boards in the upstream Tock codebase:\n  * sma_q3 by @dcz-self in https://github.com/tock/tock/pull/3182\n  * particle_boron by @twilfredo in https://github.com/tock/tock/pull/3196\n  * BBC HiFive Inventor by @mateibarbu19 in\n    https://github.com/tock/tock/pull/3225\n  * SparkFun LoRa Thing Plus by @alistair23 in\n    https://github.com/tock/tock/pull/3273\n  * makepython-nrf52840 by @bradjc in https://github.com/tock/tock/pull/3817\n  * Nano33BLE Sense Rev2 by @TheButterMineCutter in\n    https://github.com/tock/tock/pull/3717\n  * VeeR EL2 simulation target by @wsipak in\n    https://github.com/tock/tock/pull/4118\n\n* New HILs, Drivers and Features\n\n  Tock 2.2 features 6 new HILs:\n  * CAN bus by @teonaseverin in https://github.com/tock/tock/pull/3301\n  * `Buzzer` by @TeodoraMiu in https://github.com/tock/tock/pull/3084\n  * `DateTime` by @Remus7 in https://github.com/tock/tock/pull/3559\n  * `CycleCounter` by @codingHahn and @hudson-ayers in\n    https://github.com/tock/tock/pull/3934\n  * `public_key_crypto/SignatureVerify` by @bradjc in\n    https://github.com/tock/tock/pull/3878\n  * `Servo` by @inesmaria08 in https://github.com/tock/tock/pull/4126\n\n  An additional 40 PRs added support for various hardware peripherals, subsystems and other features.\n\n* IEEE 802.15.4 and 6LoWPAN Stack\n\n  We can now join a Thread network by running OpenThread as a libtock-c\n  userspace implementation, thanks to a major refactor and redesign of Tock's\n  IEEE 802.15.4 and 6LoWPAN stack.\n\n  **Known issue**: UDP transmit functionality is currently broken with a bug /\n  inconsistency between the kernel and libtock-c implementation. When executing\n  the transmit syscall, the libtock-c application fails to provide the src\n  address and fails the error check that occurs for the transmit syscall. For\n  more information, see the Tock 2.2 release testing issue:\n  https://github.com/tock/tock/issues/4272#issuecomment-2569993915\n\nIn addition to the above, this release includes a plethora of other fixes,\nimprovements and refactors. You can see the full list of changes at\nhttps://github.com/tock/tock/compare/release-2.1...release-2.2\n\nNew in 2.1\n==========\n\nTock 2.1 has seen numerous changes from Tock 2.0. In particular, the new system\ncall interface introduced with Tock 2.0 has been refined to provide more\nguarantees to processes with respect to sharing and unsharing buffers and\nupcalls. Other changes include the introduction of a _userspace-readable allow_\nsystem call, support for new HILs and boards, and various other bug-fixes and\nimprovements to code size and documentation.\n\n *  Breaking Changes\n\n    - The implemented encoding of the system call return variant \"Success with\n      u32 and u64\" has been changed to match the specification of\n      [TRD 104](https://github.com/tock/tock/blob/master/doc/reference/trd104-syscalls.md).\n      Accordingly, the name of the `SyscallReturnVariant` enum variant has been\n      changed from `SuccessU64U32` to `SuccessU32U64`\n      (https://github.com/tock/tock/pull/3175).\n\n    - `VirtualMuxAlarm`s now require the `setup()` function to be called in\n      board set up code after they are created\n      (https://github.com/tock/tock/pull/2866).\n\n * Noteworthy Changes\n\n    - Subscribe and allow operations are no longer handled by capsules\n      themselves, but through the kernel's `Grant` logic itself\n      (https://github.com/tock/tock/pull/2906). This change has multiple\n      implications for users of Tock:\n\n      - The `Grant` type accepts the number of read-only and read-write allow\n        buffers, as well as the number of subscribe upcalls. It will reserve a\n        fixed amount of space per `Grant` to store the respective allow and\n        subscribe state. Thus, to make efficient use of `Grant` space, allow\n        buffer and subscribe upcall numbers should be assigned in a non-sparse\n        fashion.\n\n      - Legal allow and subscribe calls can no longer be refused by a capsule.\n        This implies that it is always possible for an application to cause the\n        kernel to relinquish a previously shared buffer through an `allow`\n        operation. Similarly, `subscribe` can now be used to infallibly ensure\n        that a given upcall will not be scheduled by the kernel any longer,\n        although already enqueued calls to a given upcall function can still be\n        delivered even after a `subscribe` operation. The precise semantics\n        around these system calls are described in\n        [TRD 104](https://github.com/tock/tock/blob/ffa5ce02bb6e2d9f187c7bebccf33905d9c993ec/doc/reference/trd104-syscalls.md).\n\n    - Introduction of a new userspace-readable allow system call, where apps\n      are explicitly allowed to read buffers shared with the kernel (defined in\n      a [draft TRD](https://github.com/tock/tock/blob/b2053517b4029a6b16360e34937a05138fdc07c1/doc/reference/trd-userspace-readable-allow-syscalls.md)).\n\n    - Introduction of a read-only state mechanism to convey information to\n      processes without explicit system calls\n      (https://github.com/tock/tock/pull/2381).\n\n    - Improvements to kernel code size (e.g.,\n      https://github.com/tock/tock/pull/2836,\n      https://github.com/tock/tock/pull/2849,\n      https://github.com/tock/tock/pull/2759,\n      https://github.com/tock/tock/pull/2823).\n\n * New HILs\n\n    - `hasher`\n    - `public_key_crypto`\n\n * New Platforms\n\n    - OpenTitan EarlGrey CW310\n    - Redboard Red-V B\n    - STM32F429I Discovery development board\n    - QEMU RISC-V 32-bit \"virt\" Platform\n\n * Deprecated Platforms\n\n    - OpenTitan EarlGrey NexysVideo\n\n * Known Issues\n\n    - This release was tagged despite several known bugs in non-tier-1 boards,\n      so as to avoid delaying the release. These include:\n\n      - Raspberry Pi Pico: process faults when running IPC examples:\n        https://github.com/tock/tock/issues/3183\n\n      - The cortex-m exception handler does not correctly handle all possible\n        exception entry cases. This is not known to currently manifest on any\n        examples, but could with unlucky timing:\n        https://github.com/tock/tock/issues/3109\n\n      - STM32F303 Discovery: `adc` app runs, but eventually hangs in the app\n        (seems to be caught in the exit loop, but not sure why it gets there)\n\n      - STM32F303 Discovery: kernel panics lead to only a partial printout of\n        the panic message before the board enters a reboot loop\n\n      - weact_f401ccu6: `gpio` example fails to generate interrupts on the\n        input pin. This board is likely to be deprecated soon anyway, as it is\n        no longer available for sale.\n\n\nNew in 2.0\n==========\n\n* Many core kernel APIs have been redesigned and rewritten.\n\n  - There are two new userspace system calls: `AllowReadOnly` and `Exit`. The\n    old `Allow` system call has been renamed to `AllowReadWrite`.\n    `AllowReadOnly` provides a mechanism for userspace to share a read-only\n    buffer (e.g., constant data stored in flash) to the kernel. `Exit` allows a\n    process to complete execution and request that the kernel either terminate\n    or restart it.\n\n  - The system call ABI has been rewritten. System calls can now return up to 4\n    registers of values to userspace on return. The ABI defines the format and\n    structure of the allowed return types. TRD104 documents the new ABI.\n\n  - The calling semantics and requirements for system calls is more clearly\n    defined, especially with respect to calls to the Allow system calls and how\n    buffers are managed. Furthermore, the lifetime of upcalls passed to the\n    kernel with the `subscribe` system call has been defined. To enforce that\n    the kernel doesn't maintain references to upcalls that it shouldn't (so\n    userspace can reclaim any resources they require), upcalls are now managed\n    by the core kernel. The changes to these calling semantics are documented in\n    TRD104.\n\n  - Several types in the kernel have changed names, to better reflect their\n    actual use and behavior.\n\n    - `AppSlice` is now `ReadOnlyProcessBuffer` and `ReadWriteProcessBuffer`.\n\n    - `Callback` is now `Upcall` (to distinguish upcalls from the kernel to\n      userspace from general softare callbacks). `Upcall`s are now stored in a\n      special block of memory in grant regions and are managed by the kernel\n      rather than drivers. This allows the kernel to enforce their swapping\n      semantics. #2639\n\n    - `Platform` is now `SyscallDriverLookup` and `Chip` is now split into\n      `Chip` for chip-specific operations and `KernelResources` for kernel\n      operations.\n\n    - `Driver` is now `SyscallDriver`.\n\n* The kernel namespace has been reorganized.\n\n  - https://github.com/tock/tock/pull/2659 reorganizes the kernel namespace. The\n    actual abstractions and types exported were not changed, but their places in\n    the namespace were.\n\n  - Almost everything is now exported as `kernel::module::Type` rather than\n    `kernel::Type`.\n\n  - `/common` is split up into `/utilities` and `/collections`\n\n* There is increased chip and board support.\n\n  - RISC-V support has been extended to support progress and revisions to\n    support microcontroller-type systems, including support for EPMP memory\n    protection.\n\n  - There is support for ARM CortexM0+ and CortexM7.\n\n  - Board support adds:\n\n    - Nano RP2040 Connect\n    - Clue nRF52840\n    - BBC Micro:bit v2\n    - WeAct F401CCU6 Core Board\n    - i.MX RT 1052 Evaluation Kit\n    - Teensy 4.0\n    - Pico Explorer Base\n    - Rapsberry Pi Pico\n    - LiteX on Digilent Arty A-7\n    - Verilated LiteX simulation\n    - ESP32-C3-DevKitM-1\n\n\n* Major HIL changes\n\n  - All HILs have changed significantly, to be in line with the new types within\n    the kernel.\n\n  - `ReturnCode` has been removed from the kernel. HILs that used to return\n    `ReturnCode` now return `Result<(), ErrorCode>`, so that `Ok` indicates a\n    success result. #2508\n\n  - There is a draft of a TRD describing guidelines for HIL design, which\n    enumerates 13 principles HIL traits should follow.\n\n  - The SPI, I2C, and CRC HILs have changed in how they handle buffers. SPI and\n    I2C now correctly return buffers on error cases, and CRC now relies on\n    `LeasableBuffer` to compute a CRC over a large block of memory.\n\n  - Digest has been extended to support multiple digest algorithms: in addition\n    to HMAC SHA256 it now supports SHA224, SHA256, SHA384, SHA512, HMAC SHA384\n    and HMAC SHA512.\n\n  - The Time HIL has been updated to better support `dyn` references when\n    needed, by adding a `ConvertTicks` trait. This change is documented in TRD\n    105 (which, when finalized, obsoletes 101).\n\n  - Blanket implementations for UART trait groups have been added. Now, if a\n    structure implements both `uart::Transmit` and `uart::Receive`, it will\n    automatically implement `uart::UartData`.\n\n  - New HILs added:\n\n    - key/value store\n    - 8080 bus (for LCDs)\n    - text screen\n    - screen\n    - touch\n\n* In-kernel virtualizers for the following HILs have been added: AES, RNG, SHA\n\n* The kernel now checks whether loaded processes are compiled for the running\n  kernel version. Because 2.0 changes the user/kernel ABI, processes compiled\n  for Tock 1.x will not run correctly on a Tock 2.x kernel and vice versa. If\n  the kernel detects that a process is compiled for the wrong kernel version it\n  stops loading processes.\n\n* There have been changes to kernel internals and the build system to reduce\n  code size. For example, kernel code that was highly replicated in\n  monomorphized functions has been factored out (#2648).\n\n* All system call driver capsules that do not support use by multiple processes\n  now use grant regions to store state and explicitly forbid access from\n  multiple processes (e.g., #2518).\n\n* The process console has been improved and can now display memory maps for the\n  kernel and processes.\n\n* Added `tools/stack_analysis.sh` and `make stack-analysis` for analyzing stack\n  size.\n\n* Improvements to `tools/print_tock_memory_usage.sh` for displaying code size.\n\n* Transitioned uses of deprecated `llvm_asm!()` to `asm!()` macro for better\n  compile-time checking (#2449, #2363).\n\n* Make it possible for boards to avoid using code space for peripherals they do\n  not use (e.g., #2069).\n\n* Bug fixes.\n\n\nNew in 1.5\n==========\n\n* Major HIL Changes\n\n  None\n\n* Loading and Restarting Processes Improvements\n\n  Processes can now fault and be restarted by the kernel, and\n  [#1565](https://github.com/tock/tock/pull/1565) allows a board configuration\n  file to specify the restart policy that the kernel should use.\n\n  Process discovery, parsing, and creation was also overhauled in\n  [#1480](https://github.com/tock/tock/pull/1480) to remove `unsafe` from the\n  TBF header parsing code. This allows `process::load_processes()` to return\n  errors if process loading fails. Boards now need to handle the `Result` return\n  type.\n\n\nNew in 1.4\n==========\n\n* Major HIL Changes\n\n  Three HILs have been revised to better support embedded devices and clean up\n  the interface for users of the HILs.\n\n  - [#1211](https://github.com/tock/tock/pull/1211) revamps the UART interface\n    to separate the transmit and receive paths.\n\n  - [#1297](https://github.com/tock/tock/pull/1297) breaks the GPIO HIL into\n    component subtraits so GPIO users can be specific about the features they\n    need from GPIO pins.\n\n  - [#1345](https://github.com/tock/tock/pull/1345) clearly defines the\n    differences between counters, alarms, and timers.\n\n* Start on RISC-V Support\n\n  [#1323](https://github.com/tock/tock/pull/1317),\n  [#1323](https://github.com/tock/tock/pull/1323), and\n  [#1345](https://github.com/tock/tock/pull/1345) add architecture support and\n  boards to Tock for the RISC-V architecture.\n\n* Update Userland-Kernel Boundary Interface\n\n  [#1318](https://github.com/tock/tock/pull/1318) updates the interface for\n  switching to and returning from userspace to be less Cortex-M specific. The\n  functions are more general and do not assume values are passed on the stack.\n\n\nNew in 1.2\n==========\n\n* Kernel debug module\n\n  - [#1036](https://github.com/tock/tock/pull/1036),\n    [#1029](https://github.com/tock/tock/pull/1029), and\n    [#997](https://github.com/tock/tock/pull/997) change `debug::panic`'s\n    signature. First, instead of taking a single LED, `panic` takes a slice of LEDs\n    as its first argument. Second, the Rust now uses a `PanicInfo` struct to pass\n    along information about where a panic occured, and `debug::panic` adopts the\n    same structure. Third, architecture specific assembly code was removed\n    from the kernel crate (including the debug module), requiring `debug::panic` to\n    take in a particlar implementation of the `nop` instruction. Finally,\n    `debug::panic` takes a reference to the process array (it is permissible to\n    pass an empty array instead, but you won't get any information about process\n    state on panic).\n\n    Boards most likely call `debug::panic` from their `panic_fmt` function:\n\n    ```rust\n    #[lang = \"panic_fmt\"]\n    pub unsafe extern \"C\" fn panic_fmt(args: Arguments, file: &'static str, line: u32) -> ! {\n            let led = ...;\n            let writer = ...;\n            debug::panic(led, writer, args, file, line)\n    }\n    ```\n\n    should now be:\n    ```rust\n    use core::panic::PanicInfo;\n    ...\n    #[panic_implementation]\n    pub unsafe extern \"C\" fn panic_fmt(pi: &PanicInfo) -> ! {[lang = \"panic_fmt\"]\n        let led = ...;\n        let writer = ...;\n\n        debug::panic(&mut [led], writer, pi, &cortexm4::support::nop, &PROCESSES)\n    ```\n\n  - [#1046](https://github.com/tock/tock/pull/1046) changes how the debug module\n    in the kernel crate is structured. Instead of being a pseudo-process, debug\n    is now treated more like a capsule, and needs a UART object to be passed to\n    it. This means that `main.rs` needs to be updated to correctly set this up.\n\n    First, if the debug UART bus is shared with console (or anything else), and\n    this is likely the case, then a UART mux needs to be created. This is going to\n    look slightly different depending on the underlying MCU, but for the SAM4L\n    this looks like:\n\n    ```rust\n    let uart_mux = static_init!(\n        MuxUart<'static>,\n        MuxUart::new(\n            &sam4l::usart::USART0, // Choose the correct UART HW bus\n            &mut capsules::virtual_uart::RX_BUF,\n            115200\n        )\n    );\n    hil::uart::UART::set_client(&sam4l::usart::USART0, uart_mux);\n    ```\n\n    With the mux created, a user of the UART bus must be defined. This will be\n    passed to the debug module.\n\n    ```rust\n    let debugger_uart = static_init!(UartDevice, UartDevice::new(uart_mux, false));\n    debugger_uart.setup();\n    ```\n\n    The following is the actual debug module, and must be created to use the\n    `debug!()` macro. If debug is sharing a UART bus then the above mux and\n    device is necessary, but if it is on a dedicated UART bus then that UART\n    module can be passed in here instead.\n\n    ```rust\n    let debugger = static_init!(\n        kernel::debug::DebugWriter,\n        kernel::debug::DebugWriter::new(\n            debugger_uart, // Replace with just a HW UART if no sharing is needed.\n            &mut kernel::debug::OUTPUT_BUF,\n            &mut kernel::debug::INTERNAL_BUF,\n        )\n    );\n    hil::uart::UART::set_client(debugger_uart, debugger);\n    ```\n\n    Finally, to get around Rust sharing rules, we need to create this wrapper:\n\n    ```rust\n    let debug_wrapper = static_init!(\n        kernel::debug::DebugWriterWrapper,\n        kernel::debug::DebugWriterWrapper::new(debugger)\n    );\n    kernel::debug::set_debug_writer_wrapper(debug_wrapper);\n    ```\n\n\n\n* Reorganization of the kernel crate: The kernel crate has been restructured to\nenable many improvements to Tock, and to move to a more consistent design between\nthe kernel crate and other parts of Tock. This change has happened through several\npull requests:\n[#975](https://github.com/tock/tock/pull/975),\n[#1044](https://github.com/tock/tock/pull/1044),\n[#1109](https://github.com/tock/tock/pull/1109),\n[#1111](https://github.com/tock/tock/pull/1111),\n[#1113](https://github.com/tock/tock/pull/1113),\n[#1115](https://github.com/tock/tock/pull/1115),\n[#1171](https://github.com/tock/tock/pull/1171), and\n[#1191](https://github.com/tock/tock/pull/1191).\n\n    The primary motivation for this is\n    making the kernel crate architecture agnostic, so that Tock can be ported\n    non Cortex-M platforms ([#985](https://github.com/tock/tock/issues/985)).\n\n    A part of this reorganization is the introduction of Capabilities, or\n    a compile-time access control mechanism in Tock based on being able to\n    forbid `unsafe` code. Capabilities restrict what code in Tock can call\n    certain sensitive functions, like `load_processes()`.\n\n\n  - The `Chip` in main.rs has to be instantiated with `static_init!` to\n    ensure it has a long enough lifetime. Now:\n\n    ```rust\n    let chip = static_init!(sam4l::chip::Sam4l, sam4l::chip::Sam4l::new());\n    ```\n\n  - Capabilities need to be created. Creating a capability requires the ability\n    to call `unsafe`, so capsules cannot create capabilities, and instead must\n    be passed the capability if they need access to protected functions.\n\n    ```rust\n    let process_management_capability =\n        create_capability!(capabilities::ProcessManagementCapability);\n    let main_loop_capability = create_capability!(capabilities::MainLoopCapability);\n    ```\n\n  - There is now a `Kernel` struct that needs to be instantiated by the board.\n    `Kernel` has a method for the kernel's main loop, instead of a global\n    function in the kernel's base module. Board configurations (i.e. each\n    board's `main.rs`) as a result need to instantiate a statically allocate\n    this new struct.\n\n    ```rust\n    let board_kernel = static_init!(kernel::Kernel, kernel::Kernel::new(&PROCESSES));\n\n    board_kernel.kernel_loop(&hail, chip, Some(&hail.ipc), &main_loop_capability);\n    ```\n\n  - `load_processes` takes the `Kernel` struct as an additional first argument,\n    the `chip` as a new second argument, and the required capability as the\n    last argument. Creating a `Process` (which `load_processes()` does) requires\n    a reference to the chip because the process object needs to have access to\n    architecture-specific context switching functions, as well as chip-specific\n    MPU functions.\n\n    ```rust\n     kernel::procs::load_processes(\n        board_kernel,\n        chip,\n        &_sapps as *const u8,\n        &mut APP_MEMORY,\n        &mut PROCESSES,\n        FAULT_RESPONSE,\n        &process_management_capability,\n    );\n    ```\n\n  - Creating a grant requires a capability, as not just any code should be able\n    to allocate memory in the grant regions.\n\n    ```rust\n    let memory_allocation_cap = create_capability!(capabilities::MemoryAllocationCapability);\n    ```\n\n    To use:\n\n    ```rust\n    board_kernel.create_grant(&memory_allocation_cap)\n    ```\n\n    Creating grants is now handled through the main `Kernel` struct so that it\n    can check that no grants are created after processes are setup in memory,\n    since grants require space allocated in process memory.\n\n\n\n* [#1032](https://github.com/tock/tock/pull/1032) updates the ADC HIL to\n  explicitly specify the resolution of the sample and to clarify that samples\n  are always left-aligned in the `u16` buffer. Previously, the only ADC\n  implementation happened to be 12 bits and left-aligned, which callers only\n  assumed. It also added a method to (if possible) report the reference\n  voltage, which can be used to convert raw ADC samples to absolute voltages.\n  Implementers of the ADC HIL must implement two new methods:\n\n  ```rust\n  /// Function to ask the ADC how many bits of resolution are in the samples\n  /// it is returning.\n  fn get_resolution_bits(&self) -> usize;\n\n  /// Function to ask the ADC what reference voltage it used when taking the\n  /// samples. This allows the user of this interface to calculate an actual\n  /// voltage from the ADC reading.\n  ///\n  /// The returned reference voltage is in millivolts, or `None` if unknown.\n  fn get_voltage_reference_mv(&self) -> Option<usize>;\n  ```\n\n* UART HIL Refinements: This release saw several updates to the UART HIL,\n  summarized in the [UART HIL tracking issue](https://github.com/tock/tock/issues/1072).\n\n  - [#1073](https://github.com/tock/tock/pull/1073) removes `initialize` from\n    the UART HIL. Implementations will need to disentangle board-specific\n    initialization code, such as enabling the peripheral or assigning pins,\n    from UART configuration code, such as baud rate or parity. Initialization\n    is no longer part of the UART HIL and should be performed by the top-level\n    board before passing the UART object to any other code. UART configuration\n    is now controlled by the new `configure` HIL method:\n\n    ```rust\n    /// Configure UART\n    ///\n    /// Returns SUCCESS, or\n    ///\n    /// - EOFF: The underlying hardware is currently not available, perhaps\n    ///         because it has not been initialized or in the case of a shared\n    ///         hardware USART controller because it is set up for SPI.\n    /// - EINVAL: Impossible parameters (e.g. a `baud_rate` of 0)\n    /// - ENOSUPPORT: The underlying UART cannot satisfy this configuration.\n    fn configure(&self, params: UARTParameters) -> ReturnCode;\n    ```\n\n* [#1145](https://github.com/tock/tock/pull/1145) rewrites the HILs\n  for random number generation. There are now two HILs, `entropy` and\n  `rng` (random number generation).  They differ in the guarantees they give\n  about the bits they produce. The `entropy` traits guarantee high entropy bits:\n  1 bit of entropy per bit generated, such that every bit generated has an\n  equal chance of being 0 or 1 and is independent of any other bit produced\n  by the trait: that observing the stream of bits provides zero\n  information on what the future bits will be. Entropy's guarantees make\n  it suitable for use in security and cryptography. The `rng` traits\n  provide bits that are assured to satisfy all standard NIST randomness\n  tests, but do not promise that future bits cannot be guessed from\n  past ones. E.g., the bits are random but not robust against an adversary.\n\n  It also adds library components for converting between different entropy\n  sources as well as converting an entropy source into a random number\n  generator (but *not* a random number generator into an entropy source!).\n  Any software that needs entropy for security or cryptography should use\n  an `entropy` trait and not an `rng` trait.\n\n* Updates to linker and toolchain: As of\n  [#993](https://github.com/tock/tock/pull/993) and\n  [#1031](https://github.com/tock/tock/pull/1031), the Tock kernel no longer\n  requires GCC for compilation, and entirely uses the LLVM toolchain.\n\n\n  - Boards now need to explicitly define room for the kernel stack. Something\n    like the following should be in the board's main.rs:\n\n    ```rust\n    /// Dummy buffer that causes the linker to reserve enough space for the stack.\n    #[no_mangle]\n    #[link_section = \".stack_buffer\"]\n    pub static mut STACK_MEMORY: [u8; 0x1000] = [0; 0x1000];\n    ```\n\n  - There are numerous changes to the shared board linker file. Individual boards\n    need to be updated to not use variables, and instead define the entire `MEMORY`\n    section:\n\n    ```\n    /* Memory Spaces Definitions, 448K flash, 64K ram */\n    /* Bootloader is at address 0x00000000 */\n    MEMORY\n    {\n      rom (rx)  : ORIGIN = 0x00010000, LENGTH = 0x00020000\n      prog (rx) : ORIGIN = 0x00030000, LENGTH = 0x00040000\n      ram (rwx) : ORIGIN = 0x20000000, LENGTH = 0x00020000\n    }\n\n    MPU_MIN_ALIGN = 8K;\n    ```\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 0.3544921875,
          "content": "Tock Operating System\nCopyright 2016 The Tock OS Developers\n\nLicensed under the Apache License, Version 2.0\n<LICENSE-APACHE or\nhttp://www.apache.org/licenses/LICENSE-2.0> or the MIT\nlicense <LICENSE-MIT or http://opensource.org/licenses/MIT>,\nat your option. All files in this project may not be copied,\nmodified, or distributed except according to those terms.\n\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 7.3251953125,
          "content": "# Licensed under the Apache License, Version 2.0 or the MIT License.\n# SPDX-License-Identifier: Apache-2.0 OR MIT\n# Copyright Tock Contributors 2022.\n\n[workspace]\nmembers = [\n    \"arch/cortex-m\",\n    \"arch/cortex-v7m\",\n    \"arch/cortex-m0\",\n    \"arch/cortex-m0p\",\n    \"arch/cortex-m3\",\n    \"arch/cortex-m4\",\n    \"arch/cortex-m7\",\n    \"arch/riscv\",\n    \"arch/rv32i\",\n    \"boards/acd52832\",\n    \"boards/nano_rp2040_connect\",\n    \"boards/arty_e21\",\n    \"boards/opentitan/earlgrey-cw310\",\n    \"boards/esp32-c3-devkitM-1\",\n    \"boards/clue_nrf52840\",\n    \"boards/veer_el2_sim\",\n    \"boards/hail\",\n    \"boards/hifive_inventor\",\n    \"boards/hifive1\",\n    \"boards/imix\",\n    \"boards/imxrt1050-evkb\",\n    \"boards/litex/arty\",\n    \"boards/litex/sim\",\n    \"boards/msp_exp432p401r\",\n    \"boards/microbit_v2\",\n    \"boards/wm1110dev\",\n    \"boards/makepython-nrf52840\",\n    \"boards/nordic/nrf52840dk\",\n    \"boards/nordic/nrf52840_dongle\",\n    \"boards/nordic/nrf52dk\",\n    \"boards/sma_q3\",\n    \"boards/nucleo_f429zi\",\n    \"boards/nucleo_f446re\",\n    \"boards/particle_boron\",\n    \"boards/pico_explorer_base\",\n    \"boards/raspberry_pi_pico\",\n    \"boards/apollo3/redboard_artemis_atp\",\n    \"boards/apollo3/redboard_artemis_nano\",\n    \"boards/apollo3/lora_things_plus\",\n    \"boards/redboard_redv\",\n    \"boards/stm32f3discovery\",\n    \"boards/stm32f412gdiscovery\",\n    \"boards/stm32f429idiscovery\",\n    \"boards/teensy40\",\n    \"boards/nano33ble\",\n    \"boards/nano33ble_rev2\",\n    \"boards/qemu_rv32_virt\",\n    \"boards/weact_f401ccu6/\",\n    \"boards/configurations/nrf52840dk/nrf52840dk-test-appid-sha256\",\n    \"boards/configurations/nrf52840dk/nrf52840dk-test-appid-tbf\",\n    \"boards/configurations/nrf52840dk/nrf52840dk-test-kernel\",\n    \"boards/tutorials/nrf52840dk-hotp-tutorial\",\n    \"boards/tutorials/nrf52840dk-thread-tutorial\",\n    \"capsules/aes_gcm\",\n    \"capsules/core\",\n    \"capsules/extra\",\n    \"capsules/system\",\n    \"chips/apollo3\",\n    \"chips/arty_e21_chip\",\n    \"chips/e310_g002\",\n    \"chips/e310_g003\",\n    \"chips/e310x\",\n    \"chips/earlgrey\",\n    \"chips/esp32\",\n    \"chips/esp32-c3\",\n    \"chips/imxrt10xx\",\n    \"chips/litex\",\n    \"chips/litex_vexriscv\",\n    \"chips/lowrisc\",\n    \"chips/msp432\",\n    \"chips/nrf52\",\n    \"chips/nrf52832\",\n    \"chips/nrf52833\",\n    \"chips/nrf52840\",\n    \"chips/nrf5x\",\n    \"chips/qemu_rv32_virt_chip\",\n    \"chips/rp2040\",\n    \"chips/sam4l\",\n    \"chips/segger\",\n    \"chips/sifive\",\n    \"chips/stm32f303xc\",\n    \"chips/stm32f401cc\",\n    \"chips/stm32f429zi\",\n    \"chips/stm32f446re\",\n    \"chips/stm32f412g\",\n    \"chips/stm32f4xx\",\n    \"chips/veer_el2\",\n    \"chips/virtio\",\n    \"kernel\",\n    \"libraries/enum_primitive\",\n    \"libraries/riscv-csr\",\n    \"libraries/tock-cells\",\n    \"libraries/tock-register-interface\",\n    \"libraries/tickv\",\n]\nexclude = [\"tools/\"]\nresolver = \"2\"\n\n[workspace.package]\nversion = \"0.2.3-dev\"\nauthors = [\"Tock Project Developers <tock-dev@googlegroups.com>\"]\nedition = \"2021\"\n\n[profile.dev]\npanic = \"abort\"\nlto = true\nopt-level = \"z\"\ndebug = true\n\n[profile.release]\npanic = \"abort\"\nlto = true\nopt-level = \"z\"\ndebug = true\ncodegen-units = 1\n\n# CLIPPY CONFIGURATION\n#\n# We first disallow all lints in a particular group, then re-allow each one\n# Tock does not comply with or we do not want to use.\n#\n# For each group there are three sections:\n# 1. The first section are lints we almost certainly don't want.\n# 2. The second section are lints we may not want, we probably have to see the\n#    resulting diff.\n# 3. The third section are lints that we do want we just need to fixup the code\n#    to pass the lint checks.\n#\n# There are some lints we specifically do not want:\n#\n# - `clippy::if_same_then_else`: There are often good reasons to enumerate\n#   different states that have the same effect.\n# - `clippy::manual_unwrap_or_default`: As of Apr 2024, this lint has many false\n#   positives.\n[workspace.lints.clippy]\nrestriction = \"allow\"\n\nif_same_then_else = \"allow\"\nmanual_unwrap_or_default = \"allow\"\n\n\n# COMPLEXITY LINTS\ncomplexity = { level = \"deny\", priority = -1 }\n\ntoo_many_arguments = \"allow\"\ntype_complexity = \"allow\"\noption_map_unit_fn = \"allow\"\nnonminimal_bool = \"allow\"\nidentity-op = \"allow\"\nwhile-let-loop = \"allow\"\nonly_used_in_recursion = \"allow\"\nmanual-range-patterns = \"allow\"\nmanual-flatten = \"allow\"\n\nzero_prefixed_literal = \"allow\"\n\n# STYLE\nstyle = { level = \"deny\", priority = -1 }\n\nblocks_in_conditions = \"allow\"\ncollapsible_else_if = \"allow\"\ncollapsible_if = \"allow\"\ncollapsible_match = \"allow\"\ncomparison_chain = \"allow\"\nenum-variant-names = \"allow\"\nfield-reassign-with-default = \"allow\"\nget_first = \"allow\"\nlen_without_is_empty = \"allow\"\nlen_zero = \"allow\"\nmanual-map = \"allow\"\nmanual_range_contains = \"allow\"\nmatch_like_matches_macro = \"allow\"\nmodule_inception = \"allow\"\nnew-ret-no-self = \"allow\"\nnew_without_default = \"allow\"\nredundant_closure = \"allow\"\nresult_unit_err = \"allow\"\nsingle_match = \"allow\"\nupper_case_acronyms = \"allow\"\n\n\ndeclare-interior-mutable-const = \"allow\"\nlet_and_return = \"allow\"\nmissing_safety_doc = \"allow\"\nneedless-range-loop = \"allow\"\noption_map_or_none = \"allow\"\nredundant_pattern_matching = \"allow\"\nunusual-byte-groupings = \"allow\"\ndoc_lazy_continuation = \"allow\"\n\n\n# PERF\nperf = { level = \"deny\", priority = -1 }\n\nlarge-enum-variant = \"allow\"\n\n\n# CARGO\ncargo = { level = \"deny\", priority = -1 }\n\ncargo_common_metadata = \"allow\"\nnegative-feature-names = \"allow\"\n\n\n# NURSERY\nnursery = { level = \"deny\", priority = -1 }\n\nuse_self = \"allow\"\noption_if_let_else = \"allow\"\ncognitive_complexity = \"allow\"\nor_fun_call = \"allow\"\ncollection_is_never_read = \"allow\"\n\n\nmanual_clamp = \"allow\"\nunused_peekable = \"allow\"\nbranches_sharing_code = \"allow\"\n\n\nmissing_const_for_fn = \"allow\"\nredundant_pub_crate = \"allow\"\nequatable_if_let = \"allow\"\nderive_partial_eq_without_eq = \"allow\"\nempty_line_after_doc_comments = \"allow\"\ntrait_duplication_in_bounds = \"allow\"\nuseless_let_if_seq = \"allow\"\nas_ptr_cast_mut = \"allow\"\n\n\n# PEDANTIC\npedantic = { level = \"deny\", priority = -1 }\n\ndoc_markdown = \"allow\"\nmissing_errors_doc = \"allow\"\nif_not_else = \"allow\"\ncast_sign_loss = \"allow\"\ntoo_many_lines = \"allow\"\nmust_use_candidate = \"allow\"\nmanual_let_else = \"allow\"\nsingle_match_else = \"allow\"\ninline_always = \"allow\"\nmodule_name_repetitions = \"allow\"\nunnested-or-patterns = \"allow\"\nredundant_else = \"allow\"\nreturn_self_not_must_use = \"allow\"\nmatch_same_arms = \"allow\"\nexplicit_iter_loop = \"allow\"\nsimilar_names = \"allow\"\nunnecessary_wraps = \"allow\"\nmanual_assert = \"allow\"\ntransmute_ptr_to_ptr = \"allow\"\nstruct_excessive_bools = \"allow\"\nfn_params_excessive_bools = \"allow\"\ntrivially_copy_pass_by_ref = \"allow\"\nborrow_as_ptr = \"allow\"\ntuple_array_conversions = \"allow\"\nverbose_bit_mask = \"allow\"\nlarge_types_passed_by_value = \"allow\"\nno_mangle_with_rust_abi = \"allow\"\nstruct_field_names = \"allow\"\n\n\ncast_lossless = \"allow\"\ncast_possible_truncation = \"allow\"\ncast_precision_loss = \"allow\"\nrange_plus_one = \"allow\"\nmissing_panics_doc = \"allow\"\nmatch_wildcard_for_single_variants = \"allow\"\nunused_self = \"allow\"\ncast-possible-wrap = \"allow\"\nuninlined_format_args = \"allow\"\nunreadable_literal = \"allow\"\nneedless_pass_by_value = \"allow\"\nitems_after_statements = \"allow\"\nref_option_ref = \"allow\"\nmatch_bool = \"allow\"\nredundant_closure_for_method_calls = \"allow\"\nno_effect_underscore_binding = \"allow\"\niter_without_into_iter = \"allow\"\n\n\nsemicolon_if_nothing_returned = \"allow\"\nptr_as_ptr = \"allow\"\nptr_cast_constness = \"allow\"\nmut_mut = \"allow\"\ncast_ptr_alignment = \"allow\"\nused_underscore_binding = \"allow\"\nchecked_conversions = \"allow\"\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0458984375,
          "content": "Copyright (c) 2016 The Tock Project Developers\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 20.033203125,
          "content": "# Licensed under the Apache License, Version 2.0 or the MIT License.\n# SPDX-License-Identifier: Apache-2.0 OR MIT\n# Copyright Tock Contributors 2022.\n\n# For more information on Tock's make system and the CI setup, see the docs at\n# https://github.com/tock/tock/tree/master/doc/CodeReview.md#3-continuous-integration\n\n################################################################################\n##\n## Internal support that needs to run first\n##\n\n# First, need to fill out some variables that the Makefile will use\n$(eval ALL_BOARDS := $(shell ./tools/list_boards.sh))\n\n# Force the Shell to be bash as some systems have strange default shells\nSHELL := bash\n\n##\n## End: internal support.\n##\n################################################################################\n##\n## User interface / usage\n##\n\n# By default, let's print out some help\n.PHONY: usage\nusage:\n\t@echo \"$$(tput bold)Welcome to Tock!$$(tput sgr0)\"\n\t@echo\n\t@echo \"First things first, if you haven't yet, check out doc/Getting_Started.\"\n\t@echo \"You'll need to install a few requirements before we get going.\"\n\t@echo\n\t@echo \"The next step is to choose a board to build Tock for. Mainline\"\n\t@echo \"Tock currently includes support for the following platforms:\"\n\t@for f in $(ALL_BOARDS); do printf \" - $$f\\n\"; done\n\t@echo\n\t@echo \"Run 'make' in a board directory to build Tock for that board, and then\"\n\t@echo \"run 'make install' to load Tock onto hardware. Check out the README in\"\n\t@echo \"your board's folder for more information.\"\n\t@echo\n\t@echo \"There are a few helpful targets that can be run for individual boards. To\"\n\t@echo \"run these, run 'make {target}' from the board directory for these targets:\"\n\t@echo \"      cargobloat: Runs the cargo-bloat tool for attributing binary size\"\n\t@echo \"  stack-analysis: Prints the 5 largest stack frames for the board\"\n\t@echo\n\t@echo \"This root Makefile has a few useful targets as well:\"\n\t@echo \"           audit: Audit Cargo dependencies for all kernel sources\"\n\t@echo \"          boards: Compiles Tock for all supported boards\"\n\t@echo \"           check: Checks, but does not compile, Tock for all supported boards\"\n\t@echo \"             doc: Builds Tock documentation for all boards\"\n\t@echo \"           stack: Prints a basic stack frame analysis for all boards\"\n\t@echo \"           clean: Clean all builds\"\n\t@echo \"    format-check: Checks for formatting errors in kernel sources\"\n\t@echo \"            list: Lists available boards\"\n\t@echo\n\t@echo \"We also define the following aliases:\"\n\t@echo \"          format: cargo fmt\"\n\t@echo\n\t@echo \"The make system also drives all continuous integration and testing:\"\n\t@echo \"         $$(tput bold)prepush$$(tput sgr0): Fast checks to run before pushing changes upstream\"\n\t@echo \"          ci-all: Run all continuous integration tests (possibly slow!)\"\n\t@echo \"         ci-help: More information on Tock CI and testing\"\n\t@echo\n\t@echo \"$$(tput bold)Happy Hacking!$$(tput sgr0)\"\n\n##\n## End: usage.\n##\n################################################################################\n##\n## Utility functions\n##\n\ndefine banner\n\t@printf \"\\n\"\n\t@printf \"$$(tput bold)********************************************************************************$$(tput sgr0)\\n\"\n\t@string=\"$(1)\" && printf \"$$(tput bold)* %-$$((76))s *\\n\" \"$$string\"\n\t@printf \"$$(tput bold)********************************************************************************$$(tput sgr0)\\n\"\n\t@printf \"\\n\"\nendef\n\n# Four arguments:\n#  1) Command to check if already installed\n#  2) String that explains what will be executed if install runs\n#  3) Make function that does the work\n#  4) Guard variable that is defined if job is to run\ndefine ci_setup_helper\n\t@# The line continuation adds a leading space, remove\n\t$(eval explanation := $(strip $(2)))\n\t$(eval build_function := $(strip $(3)))\n\t$(eval guard_variable := $(strip $(4)))\n\t$(eval already_installed := $(shell $(1)))\n\t@# First, if the dependency is installed, we can bail early\n\t$(if $(already_installed),$(eval $(guard_variable) := true),\n\t@# If running in CI context always yes\n\t$(if $(CI),$(eval do_install := yes_CI),\n\t@# If running nosetup always no\n\t$(if $(TOCK_NOSETUP),$(eval do_install := ),\n\t@# Otherwise, ask\n\t$(info )\n\t$(info You have run a (likely CI) rule that requires Tock to run setup commands on your)\n\t$(info machine. Tock can do this automatically for you, or you can look at the recipe)\n\t$(info for '$(build_function)' and do it yourself.)\n\t$(info )\n\t$(info Continuing will: $(explanation).)\n\t$(info )\n\t$(info You can use 'make ci-nosetup' to run all CI with no new setup requirements.)\n\t$(info )\n\t$(eval do_install := $(shell read -p \"Should Tock run setup commands for you? [y/N] \" response && if [[ ( \"$$(echo \"$$response\" | tr :upper: :lower:)\" == \"y\" ) ]]; then echo yes; fi))\n\t) @# End if TOCK_NOSETUP\n\t) @# End if CI\n\t$(if $(do_install),\n\t$(call $(3))\n\t$(eval $(guard_variable) := true)\n\t, @# else of do_install\n\t$(if $(TOCK_NOSETUP),\n\t@# If no setup requested, let this go quietly\n\t, @# else of TOCK_NOSETUP\n\t$(error Missing required external dependency)\n\t) @# End if TOCK_NOSETUP\n\t) @# End of if do_install\n\t) @# End if already installed\nendef\n\n##\n## End: functions.\n##\n################################################################################\n##\n## User convenience targets\n##\n\n## Aggregate targets\n.PHONY: allaudit audit\nallaudit audit:\n\t@for f in `./tools/list_lock.sh`;\\\n\t\tdo echo \"$$(tput bold)Auditing $$f\";\\\n\t\t(cd \"$$f\" && cargo audit || exit 1);\\\n\t\tdone\n\n.PHONY: allboards boards\nallboards boards:\n\t@for f in $(ALL_BOARDS);\\\n\t\tdo echo \"$$(tput bold)Build $$f\";\\\n\t\t$(MAKE) -C \"boards/$$f\" || exit 1;\\\n\t\tdone\n\n.PHONY: allcheck check\nallcheck check:\n\t@cargo check\n\n.PHONY: alldoc doc\nalldoc doc:\n\t@for f in $(ALL_BOARDS);\\\n\t\tdo echo \"$$(tput bold)Documenting $$f\";\\\n\t\t$(MAKE) -C \"boards/$$f\" doc || exit 1;\\\n\t\tdone\n\n.PHONY: allstack stack stack-analysis\nallstack stack stack-analysis:\n\t@for f in $(ALL_BOARDS);\\\n\t\tdo $(MAKE) --no-print-directory -C \"boards/$$f\" stack-analysis || exit 1;\\\n\t\tdone\n\n.PHONY: licensecheck\nlicensecheck:\n\t$(call banner,License checker)\n\t@cargo run --manifest-path=tools/license-checker/Cargo.toml --release\n\n## Commands\n.PHONY: clean\nclean:\n\t@echo \"$$(tput bold)Clean top-level Cargo workspace\" && cargo clean\n\t@echo \"$$(tput bold)Clean tools Cargo workspace\" && cargo clean --manifest-path tools/Cargo.toml\n\t@echo \"$$(tput bold)Clean rustdoc\" && rm -rf doc/rustdoc\n\t@echo \"$$(tput bold)Clean ci-artifacts\" && rm -rf tools/ci-artifacts\n\n.PHONY: fmt format\nfmt format:\n\t$(call banner,Running \\\"cargo fmt\\\" -- for a complete format check run \\\"make format-check\\\")\n\tcargo fmt\n\n.PHONY: format-check\nformat-check:\n\t$(call banner,Formatting checker)\n\t@./tools/check_format.sh\n\t$(call banner,Check for formatting complete)\n\n.PHONY: list\nlist:\n\t@echo \"Supported Tock Boards:\"\n\t@for f in $(ALL_BOARDS); do printf \" - $$f\\n\"; done\n\t@echo\n\t@echo \"To build the kernel for a particular board, change to that directory\"\n\t@echo \"and run make:\"\n\t@echo \"    cd boards/hail\"\n\t@echo \"    make\"\n\n\n## Meta-Targets\n\n# Run all possible CI. If this passes locally, all cloud CI *must* pass as well.\n.PHONY: ci-all\nci-all:\\\n\tci-runner-github\\\n\tci-runner-netlify\n\n# Run all CI that doesn't require installation of extra tools.\n#\n# Note that this will run things that require setup that has already been\n# completed. It simply will not prompt for *new* installs.\n.PHONY: ci-nosetup\nci-nosetup:\n\t@TOCK_NOSETUP=true $(MAKE) ci-all\n\n# Run the fast jobs.\n# This is designed for developers, to be run often and before submitting code upstream.\n.PHONY: prepush\nprepush:\\\n\tformat-check\\\n\tci-job-clippy\\\n\tci-job-syntax\\\n\tlicensecheck\n\t$(call banner,Pre-Push checks all passed!)\n\t# Note: Tock runs additional and more intense CI checks on all PRs.\n\t# If one of these error, you can run `make ci-job-NAME` to test locally.\n\n\n## Hidden convenience targets\n##\n## These are aliases often used by the core team, but are not intended to be\n## part of the official build system interface. They are subject to change at\n## any time without notice.\n.PHONY: clippy\nclippy: ci-job-clippy\n\n\n# And print some help\n#\n# https://stackoverflow.com/questions/4219255/how-do-you-get-the-list-of-targets-in-a-makefile\n.PHONY: ci-help\nci-help:\n\t@echo \"Welcome to Tock CI\"\n\t@echo\n\t@echo \"Tock works hard to automate as much of testing as possible to ensure that\"\n\t@echo \"platforms always work. For full details on the CI infrastructure, please\"\n\t@echo \"review the documentation at 'doc/CodeReview.md'.\"\n\t@echo\n\t@echo \"The following CI runners are available:\"\n\t@$(MAKE) -pRrq -f $(lastword $(MAKEFILE_LIST)) : 2>/dev/null | awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ \"^[#.]\") {print $$1}}' | sort | egrep -v -e '^[^[:alnum:]]' -e '^$@$$' | grep ci-runner | sed 's/^/ - /'\n\t@echo\n\t@echo \"The following CI jobs are available:\"\n\t@$(MAKE) -pRrq -f $(lastword $(MAKEFILE_LIST)) : 2>/dev/null | awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ \"^[#.]\") {print $$1}}' | sort | egrep -v -e '^[^[:alnum:]]' -e '^$@$$' | grep ci-job | sed 's/^/ - /'\n\t@echo\n\t@echo To run the recommended local development CI run $$(tput bold)make prepush$$(tput sgr0).\n\t@echo Developers are encouraged to always run this before pushing code.\n\t@echo\n\t@echo To run all possible CI run $$(tput bold)make ci-all$$(tput sgr0).\n\t@echo Note this may ask you to set up additional support on your machine.\n\t@echo To run all CI that does not require installation, use $$(tput bold)make ci-nosetup$$(tput sgr0).\n\n# Alias the plain `ci` target to `ci-help` to help guessing users\n.PHONY: ci\nci: ci-help\n\n##\n## End: user targets.\n##\n################################################################################\n##\n## Continuous Integration Targets\n##\n\n## Runners\n##\n## These each correspond to a 'status check' line in GitHub PR UX.\n##\n## These recipes *must not* contain rules, they simply collect jobs.\n##\n## NOTE: If you modify these, you must also modify the ci.yml CI workflow file\n##       in `.github/workflows`. This *replicates* configuration in the github\n##       workflow file to allow the GitHub UX to show these subtasks correctly.\n.PHONY: ci-runner-github\nci-runner-github:\\\n\tci-runner-github-format\\\n\tci-runner-github-clippy\\\n\tci-runner-github-build\\\n\tci-runner-github-tests\\\n\tci-runner-github-qemu\n\t$(call banner,CI-Runner: All GitHub runners DONE)\n\n.PHONY: ci-runner-github-format\nci-runner-github-format:\\\n\tci-job-format\\\n\tci-job-markdown-toc\\\n\tci-job-readme-check\n\t$(call banner,CI-Runner: GitHub format runner DONE)\n\n.PHONY: ci-runner-github-clippy\nci-runner-github-clippy:\\\n\tci-job-clippy\n\t$(call banner,CI-Runner: GitHub clippy runner DONE)\n\n.PHONY: ci-runner-github-build\nci-runner-github-build:\\\n\tci-job-syntax\\\n\tci-job-compilation\\\n\tci-job-debug-support-targets\\\n\tci-job-collect-artifacts\n\t$(call banner,CI-Runner: GitHub build runner DONE)\n\n.PHONY: ci-runner-github-tests\nci-runner-github-tests:\\\n\tci-job-libraries\\\n\tci-job-archs\\\n\tci-job-kernel\\\n\tci-job-capsules\\\n\tci-job-chips\\\n\tci-job-tools\\\n\tci-job-cargo-test-build\\\n\tci-job-miri # EXPERIMENTAL\n\t$(call banner,CI-Runner: GitHub tests runner DONE)\n\n.PHONY: ci-runner-github-qemu\nci-runner-github-qemu:\\\n\tci-job-qemu\n\t$(call banner,CI-Runner: GitHub qemu runner DONE)\n\n\n#n.b. netlify calls tools/netlify-build.sh, which is a wrapper\n#     that first installs toolchains, then calls this.\n.PHONY: ci-runner-netlify\nci-runner-netlify:\\\n\tci-job-rustdoc\n\t$(call banner,CI-Runner: Netlify runner DONE)\n\n\n## Jobs & Setup\n##\n## These are the individual CI actions. These should be the smallest reasonable\n## unit of execution that can run independently of other jobs.\n##\n## Developers **must** be able to execute `make ci-job-[...]` and have the\n## status match the result of the CI infrastructure.\n##\n## These rules are ordered by the runners that call them.\n## If rules require setup, the setup rule comes right before the job definition.\n## The order of rules within a runner try to optimize for performance if\n## executed in linear order.\n\n\n\n### ci-runner-github-format jobs:\n.PHONY: ci-job-format\nci-job-format: licensecheck format-check\n\t$(call banner,CI-Job: Format Check DONE)\n\ndefine ci_setup_markdown_toc\n\t$(call banner,CI-Setup: Install markdown-toc)\n\tnpm install markdown-toc\nendef\n\n.PHONY: ci-setup-markdown-toc\nci-setup-markdown-toc:\n\t$(call ci_setup_helper,\\\n\t\tPATH=\"node_modules/.bin:${PATH}\" command -v markdown-toc,\\\n\t\tnpm install markdown-toc,\\\n\t\tci_setup_markdown_toc,\\\n\t\tCI_JOB_MARKDOWN)\n\ndefine ci_job_markdown_toc\n\t$(call banner,CI-Job: Markdown Table of Contents Validation)\n\t@NOWARNINGS=true PATH=\"node_modules/.bin:${PATH}\" tools/toc.sh\nendef\n\n.PHONY: ci-job-markdown-toc\nci-job-markdown-toc: ci-setup-markdown-toc\n\t$(if $(CI_JOB_MARKDOWN),$(call ci_job_markdown_toc))\n\ndefine ci_job_readme_check\n\t$(call banner,CI-Job: README Validation)\n\ttools/check_boards_readme.py\n\ttools/check_capsule_readme.py\n\ttools/check-for-readmes.sh\nendef\n\n.PHONY: ci-job-readme-check\nci-job-readme-check:\n\t$(call ci_job_readme_check)\n\n\n\n### ci-runner-github-clippy jobs:\n.PHONY: ci-job-clippy\nci-job-clippy:\n\t$(call banner,CI-Job: Clippy)\n\t@cargo clippy -- -D warnings\n\t# Run `cargo clippy` in select boards so we run clippy with targets that\n\t# actually check the arch-specific functions.\n\t@cd boards/nordic/nrf52840dk && cargo clippy -- -D warnings\n\t@cd boards/hifive1 && cargo clippy -- -D warnings\n\n\n\n### ci-runner-github-build jobs:\n.PHONY: ci-job-syntax\nci-job-syntax:\n\t$(call banner,CI-Job: Syntax)\n\t@NOWARNINGS=true $(MAKE) allcheck\n\n.PHONY: ci-job-compilation\nci-job-compilation:\n\t$(call banner,CI-Job: Compilation)\n\t@NOWARNINGS=true $(MAKE) allboards\n\n.PHONY: ci-job-debug-support-targets\nci-job-debug-support-targets:\n\t$(call banner, CI-Job: Debug Support Targets)\n\t# These are rules that build additional debugging information, but are\n\t# also quite time consuming. So we want to verify that the rules still\n\t# work, but don't build them for every board.\n\t#\n\t# The choice of building for the nrf52dk was chosen by random die roll.\n\t@NOWARNINGS=true $(MAKE) -C boards/nordic/nrf52dk lst\n\t@NOWARNINGS=true $(MAKE) -C boards/nordic/nrf52dk debug\n\t@NOWARNINGS=true $(MAKE) -C boards/nordic/nrf52dk debug-lst\n\n.PHONY: ci-job-collect-artifacts\nci-job-collect-artifacts: ci-job-compilation\n\t$(call banner, CI-Job: Collect artifacts)\n\t# Collect binary images for each board\n\t#\n\t# This is currently used only for code size detection changes, but in\n\t# the future may also be used to support checks for deterministic builds.\n\t@rm -rf \"tools/ci-artifacts\"\n\t@mkdir tools/ci-artifacts\n\t@for f in $$(find target -iname '*.bin' | grep -E \"release/.*\\.bin\");\\\n\t\tdo mkdir -p \"tools/ci-artifacts/$$(dirname $$f)\";\\\n\t\tcp \"$$f\" \"tools/ci-artifacts/$$f\";\\\n\t\tdone\n\n\n\n### ci-runner-github-tests jobs:\n.PHONY: ci-job-libraries\nci-job-libraries:\n\t$(call banner,CI-Job: Libraries)\n\t@cd libraries/enum_primitive && NOWARNINGS=true RUSTFLAGS=\"-D warnings\" cargo test\n\t@cd libraries/riscv-csr && NOWARNINGS=true RUSTFLAGS=\"-D warnings\" cargo test\n\t@cd libraries/tock-cells && NOWARNINGS=true RUSTFLAGS=\"-D warnings\" cargo test\n\t@cd libraries/tock-register-interface && NOWARNINGS=true RUSTFLAGS=\"-D warnings\" cargo test\n\t@cd libraries/tickv && NOWARNINGS=true RUSTFLAGS=\"-D warnings\" cargo test\n\n.PHONY: ci-job-archs\nci-job-archs:\n\t$(call banner,CI-Job: Archs)\n\t@for arch in `./tools/list_archs.sh`;\\\n\t\tdo echo \"$$(tput bold)Test $$arch\";\\\n\t\tcd arch/$$arch;\\\n\t\tNOWARNINGS=true RUSTFLAGS=\"-D warnings\" TOCK_KERNEL_VERSION=ci_test cargo test || exit 1;\\\n\t\tcd ../..;\\\n\t\tdone\n\n.PHONY: ci-job-kernel\nci-job-kernel:\n\t$(call banner,CI-Job: Kernel)\n\t@cd kernel && NOWARNINGS=true RUSTFLAGS=\"-D warnings\" TOCK_KERNEL_VERSION=ci_test cargo test\n\n.PHONY: ci-job-capsules\nci-job-capsules:\n\t$(call banner,CI-Job: Capsules)\n\t@# Capsule initialization depends on board/chip specific imports, so ignore doc tests\n\t@cd capsules/core && NOWARNINGS=true RUSTFLAGS=\"-D warnings\" TOCK_KERNEL_VERSION=ci_test cargo test\n\t@cd capsules/extra && NOWARNINGS=true RUSTFLAGS=\"-D warnings\" TOCK_KERNEL_VERSION=ci_test cargo test\n\t@cd capsules/system && NOWARNINGS=true RUSTFLAGS=\"-D warnings\" TOCK_KERNEL_VERSION=ci_test cargo test\n\n.PHONY: ci-job-chips\nci-job-chips:\n\t$(call banner,CI-Job: Chips)\n\t@for chip in `./tools/list_chips.sh`;\\\n\t\tdo echo \"$$(tput bold)Test $$chip\";\\\n\t\tcd chips/$$chip;\\\n\t\tNOWARNINGS=true RUSTFLAGS=\"-D warnings\" TOCK_KERNEL_VERSION=ci_test cargo test || exit 1;\\\n\t\tcd ../..;\\\n\t\tdone\n\ndefine ci_setup_tools\n\t$(call banner,CI-Setup: Install support for 'tools' checks)\n\t@if command -v apt-get > /dev/null; then\\\n\t\techo \"Running: sudo apt-get install libusb-1.0.0-dev\";\\\n\t\tsudo apt-get install libusb-1.0.0-dev;\\\n\telif command -v brew > /dev/null; then\\\n\t\techo \"Running: brew install libusb-compat pkg-config\";\\\n\t\tbrew install libusb-compat pkg-config;\\\n\telif command -v dnf > /dev/null; then\\\n\t\techo \"Running: sudo dnf install libusb-devel\";\\\n\t\tsudo dnf install libusb-devel;\\\n\telse\\\n\t\techo \"\";\\\n\t\techo \"ERR: Do not know how to install libusb on this platform.\";\\\n\t\texit 1;\\\n\tfi\nendef\n\n.PHONY: ci-setup-tools\nci-setup-tools:\n\t$(call ci_setup_helper,\\\n\t\tpkg-config --cflags --libs libusb &> /dev/null && echo yes,\\\n\t\tInstall 'libusb' for development using your package manager,\\\n\t\tci_setup_tools,\\\n\t\tCI_JOB_TOOLS)\n\ndefine ci_job_tools\n\t$(call banner,CI-Job: Tools)\n\t@NOWARNINGS=true RUSTFLAGS=\"-D warnings\" \\\n\t\tcargo test --all-targets --manifest-path=tools/Cargo.toml --workspace || exit 1\nendef\n\n.PHONY: ci-job-tools\nci-job-tools: ci-setup-tools\n\t$(if $(CI_JOB_TOOLS),$(call ci_job_tools))\n\n\n.PHONY: ci-job-miri\nci-job-miri:\n\t$(call banner,CI-Job: Miri)\n\t#\n\t# Note: This is highly experimental and limited at the moment.\n\t#\n\t@# Hangs forever during `Building` for this one :shrug:\n\t@#cd libraries/tock-register-interface && NOWARNINGS=true cargo miri test\n\t@cd kernel && NOWARNINGS=true cargo miri test\n\t@for a in $$(tools/list_archs.sh); do cd arch/$$a && NOWARNINGS=true cargo miri test && cd ../..; done\n\t@cd capsules/core && NOWARNINGS=true cargo miri test\n\t@cd capsules/extra && NOWARNINGS=true cargo miri test\n\t@cd capsules/system && NOWARNINGS=true cargo miri test\n\t@for c in $$(tools/list_chips.sh); do cd chips/$$c && NOWARNINGS=true cargo miri test && cd ../..; done\n\n\n.PHONY: ci-job-cargo-test-build\nci-job-cargo-test-build:\n\t@$(MAKE) NO_RUN=\"--no-run\" -C \"boards/opentitan/earlgrey-cw310\" test\n\t@$(MAKE) NO_RUN=\"--no-run\" -C \"boards/esp32-c3-devkitM-1\" test\n\t@$(MAKE) NO_RUN=\"--no-run\" -C \"boards/apollo3/lora_things_plus\" test\n\t@$(MAKE) NO_RUN=\"--no-run\" -C \"boards/apollo3/lora_things_plus\" test-atecc508a\n\t@$(MAKE) NO_RUN=\"--no-run\" -C \"boards/apollo3/lora_things_plus\" test-chirp_i2c_moisture\n\t@$(MAKE) NO_RUN=\"--no-run\" -C \"boards/apollo3/redboard_artemis_atp\" test\n\t@$(MAKE) NO_RUN=\"--no-run\" -C \"boards/apollo3/redboard_artemis_nano\" test\n\n\n\n### ci-runner-github-qemu jobs:\nQEMU_COMMIT_HASH=abb1565d3d863cf210f18f70c4a42b0f39b8ccdb\ndefine ci_setup_qemu_riscv\n\t$(call banner,CI-Setup: Build QEMU)\n\t@# Use the latest QEMU as it has OpenTitan support\n\t@printf \"Building QEMU, this could take a few minutes\\n\\n\"\n\t@git clone https://github.com/qemu/qemu ./tools/qemu 2>/dev/null || echo \"qemu already cloned, checking out\"\n\t@cd tools/qemu; git checkout ${QEMU_COMMIT_HASH}; ../qemu/configure --target-list=riscv32-softmmu --disable-linux-io-uring --disable-libdaxctl;\n\t@# Build qemu\n\t@$(MAKE) -C \"tools/qemu/build\" -j2 || (echo \"You might need to install some missing packages\" || exit 127)\nendef\n\n.PHONY: ci-setup-qemu\nci-setup-qemu:\n\t$(call ci_setup_helper,\\\n\t\t[[ $$(git -C ./tools/qemu rev-parse HEAD 2>/dev/null || echo 0) == \"${QEMU_COMMIT_HASH}\" ]] && \\\n\t\t\tcd tools/qemu/build && make -q riscv32-softmmu && echo yes,\\\n\t\tClone QEMU and run its build scripts,\\\n\t\tci_setup_qemu_riscv,\\\n\t\tCI_JOB_QEMU_RISCV)\n\t$(if $(CI_JOB_QEMU_RISCV),$(eval CI_JOB_QEMU := true))\n\ndefine ci_job_qemu\n\t$(call banner,CI-Job: QEMU)\n\t@cd tools/qemu-runner;\\\n\t\tPATH=\"$(shell pwd)/tools/qemu/build/:${PATH}\"\\\n\t\tNOWARNINGS=true cargo run\n\t@cd boards/opentitan/earlgrey-cw310;\\\n\t\tPATH=\"$(shell pwd)/tools/qemu/build/:${PATH}\"\\\n\t\tmake test\nendef\n\n.PHONY: ci-job-qemu\nci-job-qemu: ci-setup-qemu\n\t$(if $(CI_JOB_QEMU),$(call ci_job_qemu))\n\n\n\n### ci-runner-netlify jobs:\n.PHONY: ci-job-rustdoc\nci-job-rustdoc:\n\t$(call banner,CI-Job: Rustdoc Documentation)\n\t@NOWARNINGS=true tools/build-all-docs.sh\n\n## End CI rules\n##\n################################################################################\n\n.PHONY: board-release-test\nboard-release-test:\n\t@cd tools/board-runner;\\\n\t\tcargo run ${TARGET}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.638671875,
          "content": "# ![TockOS](http://www.tockos.org/assets/img/tock.svg \"TockOS Logo\")\n\n[![tock-ci](https://github.com/tock/tock/workflows/tock-ci/badge.svg)][tock-ci]\n[![slack](https://img.shields.io/badge/slack-tockos-informational)][slack]\n[![book](https://img.shields.io/badge/book-Tock_Book-green)][tock-book]\n\nTock is an embedded operating system designed for running multiple concurrent,\nmutually distrustful applications on Cortex-M and RISC-V based embedded\nplatforms. Tock's design centers around protection, both from potentially\nmalicious applications and from device drivers. Tock uses two mechanisms to\nprotect different components of the operating system. First, the kernel and\ndevice drivers are written in Rust, a systems programming language that provides\ncompile-time memory safety and type safety. Tock uses Rust to protect the kernel\n(e.g. the scheduler and hardware abstraction layer) from platform specific\ndevice drivers as well as isolate device drivers from each other. Second, Tock\nuses memory protection units to isolate applications from each other and the\nkernel.\n\n[tock-ci]: https://github.com/tock/tock/actions?query=branch%3Amaster+workflow%3Atock-ci\n\nTock 2.x!\n---------\n\nTock is now on its second major release! For a summary of the latest new\nfeatures and improvements, check out the [changelog](CHANGELOG.md).\n\n\nGetting Started\n---------------\n\nThere are a variety of resources for learning about Tock, contributing to the\nproject, and getting help.\n\n- About Tock\n  - [The Tock Book][tock-book]: online tutorials and documentation\n  - [Getting Started with Secure Embedded Systems][book-systems]: Tock textbook\n- Developing Tock\n  - [Tock API Docs][tockapidoc]\n  - [Contributing Guide](.github/CONTRIBUTING.md)\n  - [Code Review Guidelines](doc/CodeReview.md)\n- Getting Help\n  - [Slack Channel][slack]\n  - [Email List](https://lists.tockos.org)\n  - [Tock Blog](https://www.tockos.org/blog/)\n  - [@talkingtock](https://twitter.com/talkingtock)\n\n[slack]: https://join.slack.com/t/tockos/shared_invite/enQtNDE5ODQyNDU4NTE1LWVjNTgzMTMwYzA1NDI1MjExZjljMjFmOTMxMGIwOGJlMjk0ZTI4YzY0NTYzNWM0ZmJmZGFjYmY5MTJiMDBlOTk\n\n[tock-book]: https://book.tockos.org\n\n[book-systems]: https://link.springer.com/book/10.1007/978-1-4842-7789-8\n\n[tockapidoc]: https://docs.tockos.org\n\n\nCode of Conduct\n---------------\n\nThe Tock project adheres to the Rust [Code of Conduct][coc].\n\nAll contributors, community members, and visitors are expected to familiarize\nthemselves with the Code of Conduct and to follow these standards in all\nTock-affiliated environments, which includes but is not limited to repositories,\nchats, and meetup events. For moderation issues, please contact members of the\n@tock/core-wg.\n\n[coc]: https://www.rust-lang.org/conduct.html\n\n\nCite this Project\n-----------------\n\n<h4>Tock was presented at SOSP'17</h4>\n\nAmit Levy, Bradford Campbell, Branden Ghena, Daniel B. Giffin, Pat Pannuto, Prabal Dutta, and Philip Levis. 2017. Multiprogramming a 64kB Computer Safely and Efficiently. In Proceedings of the 26th Symposium on Operating Systems Principles (SOSP ’17). Association for Computing Machinery, New York, NY, USA, 234–251. DOI: https://doi.org/10.1145/3132747.3132786\n\n<p>\n<details>\n<summary>Bibtex</summary>\n<pre>\n@inproceedings{levy17multiprogramming,\n      title = {Multiprogramming a 64kB Computer Safely and Efficiently},\n      booktitle = {Proceedings of the 26th Symposium on Operating Systems Principles},\n      series = {SOSP'17},\n      year = {2017},\n      month = {10},\n      isbn = {978-1-4503-5085-3},\n      location = {Shanghai, China},\n      pages = {234--251},\n      numpages = {18},\n      url = {http://doi.acm.org/10.1145/3132747.3132786},\n      doi = {10.1145/3132747.3132786},\n      acmid = {3132786},\n      publisher = {ACM},\n      address = {New York, NY, USA},\n      conference-url = {https://www.sigops.org/sosp/sosp17/},\n      author = {Levy, Amit and Campbell, Bradford and Ghena, Branden and Giffin, Daniel B. and Pannuto, Pat and Dutta, Prabal and Levis, Philip},\n}\n</pre>\n</details>\n</p>\n\n\n<p>This is the primary paper that describes the design considerations of Tock.</p>\n\n<details>\n  <summary>Other Tock-related papers</summary>\n\n  <p>There are two shorter papers that look at potential limitations of the Rust language for embedded software development. The earlier PLOS paper lays out challenges and the later APSys paper lays out potential solutions. Some persons describing work on programming languages and type theory may benefit from these references, but generally, most work should cite the SOSP paper above.</p>\n  <h4><a href=\"http://doi.acm.org/10.1145/3124680.3124717\">APSys: The Case for Writing a Kernel in Rust</a></h4>\n<pre>\n@inproceedings{levy17rustkernel,\n\ttitle = {The Case for Writing a Kernel in Rust},\n\tbooktitle = {Proceedings of the 8th Asia-Pacific Workshop on Systems},\n\tseries = {APSys '17},\n\tyear = {2017},\n\tmonth = {9},\n\tisbn = {978-1-4503-5197-3},\n\tlocation = {Mumbai, India},\n\tpages = {1:1--1:7},\n\tarticleno = {1},\n\tnumpages = {7},\n\turl = {http://doi.acm.org/10.1145/3124680.3124717},\n\tdoi = {10.1145/3124680.3124717},\n\tacmid = {3124717},\n\tpublisher = {ACM},\n\taddress = {New York, NY, USA},\n\tconference-url = {https://www.cse.iitb.ac.in/~apsys2017/},\n\tauthor = {Levy, Amit and Campbell, Bradford and Ghena, Branden and Pannuto, Pat and Dutta, Prabal and Levis, Philip},\n}</pre>\n\n  <h4><a href=\"http://dx.doi.org/10.1145/2818302.2818306\">PLOS: Ownership is Theft: Experiences Building an Embedded OS in Rust</a></h4>\n<pre>\n@inproceedings{levy15ownership,\n\ttitle = {Ownership is Theft: Experiences Building an Embedded {OS} in {R}ust},\n\tbooktitle = {Proceedings of the 8th Workshop on Programming Languages and Operating Systems},\n\tseries = {PLOS 2015},\n\tyear = {2015},\n\tmonth = {10},\n\tisbn = {978-1-4503-3942-1},\n\tdoi = {10.1145/2818302.2818306},\n\turl = {http://dx.doi.org/10.1145/2818302.2818306},\n\tlocation = {Monterey, CA},\n\tpublisher = {ACM},\n\taddress = {New York, NY, USA},\n\tconference-url = {http://plosworkshop.org/2015/},\n\tauthor = {Levy, Amit and Andersen, Michael P and Campbell, Bradford and Culler, David and Dutta, Prabal and Ghena, Branden and Levis, Philip and Pannuto, Pat},\n}</pre>\n  <p>There is also a paper on the Tock security model. The threat model documentation in the docs/ folder is the source of truth for the current Tock threat model, but this paper represents a snapshot of the reasoning behind the Tock threat model and details how it compares to those in similar embedded OSes.</p>\n  <h4><a href=\"https://dx.doi.org/10.1145/3517208.3523752\">EuroSec: Tiered Trust for useful embedded systems security</a></h4>\n<pre>\n@inproceedings{10.1145/3517208.3523752,\n\tauthor = {Ayers, Hudson and Dutta, Prabal and Levis, Philip and Levy, Amit and Pannuto, Pat and Van Why, Johnathan and Watson, Jean-Luc},\n\ttitle = {Tiered Trust for Useful Embedded Systems Security},\n\tyear = {2022},\n\tisbn = {9781450392556},\n\tpublisher = {Association for Computing Machinery},\n\taddress = {New York, NY, USA},\n\turl = {https://doi.org/10.1145/3517208.3523752},\n\tdoi = {10.1145/3517208.3523752},\n\tbooktitle = {Proceedings of the 15th European Workshop on Systems Security},\n\tpages = {15–21},\n\tnumpages = {7},\n\tkeywords = {security, embedded systems, operating systems, IoT},\n\tlocation = {Rennes, France},\n\tseries = {EuroSec '22}\n}</pre>\n</details>\n\n\nLicense\n-------\n\nLicensed under either of\n\n- Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or\n  http://www.apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](LICENSE-MIT) or\n  http://opensource.org/licenses/MIT)\n\nat your option.\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n"
        },
        {
          "name": "arch",
          "type": "tree",
          "content": null
        },
        {
          "name": "boards",
          "type": "tree",
          "content": null
        },
        {
          "name": "capsules",
          "type": "tree",
          "content": null
        },
        {
          "name": "chips",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "kernel",
          "type": "tree",
          "content": null
        },
        {
          "name": "libraries",
          "type": "tree",
          "content": null
        },
        {
          "name": "netlify.toml",
          "type": "blob",
          "size": 0.2744140625,
          "content": "# Licensed under the Apache License, Version 2.0 or the MIT License.\n# SPDX-License-Identifier: Apache-2.0 OR MIT\n# Copyright Tock Contributors 2022.\n\n[[plugins]]\npackage = \"./tools/netlify-cache\"\n\n# Suppress `tput` warnings by setting TERM\n[build]\nenvironment = { TERM = \"dumb\" }\n"
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.4140625,
          "content": "# Licensed under the Apache License, Version 2.0 or the MIT License.\n# SPDX-License-Identifier: Apache-2.0 OR MIT\n# Copyright Tock Contributors 2023.\n\n[toolchain]\nchannel = \"nightly-2024-11-16\"\ncomponents = [\"miri\", \"llvm-tools\", \"rust-src\", \"rustfmt\", \"clippy\", \"rust-analyzer\"]\ntargets = [\"thumbv6m-none-eabi\", \"thumbv7em-none-eabi\", \"thumbv7em-none-eabihf\", \"riscv32imc-unknown-none-elf\", \"riscv32imac-unknown-none-elf\"]\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.7978515625,
          "content": "# Licensed under the Apache License, Version 2.0 or the MIT License.\n# SPDX-License-Identifier: Apache-2.0 OR MIT\n# Copyright Tock Contributors 2022.\n\n# Tock uses rustfmt's default configuration for formatting style.\n\n# Configure rustfmt to error when it cannot format a file. This helps avoid\n# issues where rust code is silently not formatted because rustfmt encounters\n# something it cannot format. Typically, this happens when a comment is inserted\n# somewhere that rustfmt doesn't handle.\nerror_on_unformatted = true\n\n# This configuration file is important so that when rustfmt is run within this\n# repository, it does not search parent directories for a rustfmt.toml file.\n# This allows projects with their own rustfmt.toml file to include tock as a\n# submodule without changing the behavior of `make prepush`.\n"
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 2.4697265625,
          "content": "# Licensed under the Apache License, Version 2.0 or the MIT License.\n# SPDX-License-Identifier: Apache-2.0 OR MIT\n# Copyright Tock Contributors 2022.\n\n# Shell expression for the Nix package manager\n#\n# This nix expression creates an environment with necessary packages installed:\n#\n#  * `tockloader`\n#  * rust\n#\n# To use:\n#\n#  $ nix-shell\n#\n\n{ pkgs ? import <nixpkgs> {}, withUnfreePkgs ? false }:\n\nwith builtins;\nlet\n  inherit (pkgs) stdenv lib;\n\n  # Tockloader v1.12.0\n  tockloader = import (pkgs.fetchFromGitHub {\n    owner = \"tock\";\n    repo = \"tockloader\";\n    rev = \"v1.12.0\";\n    sha256 = \"sha256-VgbAKDY/7ZVINDkqSHF7C0zRzVgtk8YG6O/ZmUpsh/g=\";\n  }) { inherit pkgs withUnfreePkgs; };\n\n  rust_overlay = import \"${pkgs.fetchFromGitHub {\n    owner = \"nix-community\";\n    repo = \"fenix\";\n    rev = \"3743208cafd7bc3c150f0c77c25ef7430e9c0de2\";\n    sha256 = \"sha256-a5EMHpDAxLShxBKUdDVmqZMlfiuOtOUzet2xT/E/RiM=\";\n  }}/overlay.nix\";\n\n  nixpkgs = import <nixpkgs> { overlays = [ rust_overlay ]; };\n\n  # Get a custom cross-compile capable Rust install of a specific channel and\n  # build. Tock expects a specific version of Rust with a selection of targets\n  # and components to be present.\n  rustBuild = (\n    nixpkgs.fenix.fromToolchainFile { file = ./rust-toolchain.toml; }\n  );\n\nin\n  pkgs.mkShell {\n    name = \"tock-dev\";\n\n    buildInputs = with pkgs; [\n      # --- Toolchains ---\n      rustBuild\n      openocd\n\n      # --- Convenience and support packages ---\n      python3Full\n      tockloader\n\n      # Required for tools/print_tock_memory_usage.py\n      python3Packages.cxxfilt\n\n\n      # --- CI support packages ---\n      qemu\n\n      # --- Flashing tools ---\n      # If your board requires J-Link to flash and you are on NixOS,\n      # add these lines to your system wide configuration.\n\n      # Enable udev rules from segger-jlink package\n      # services.udev.packages = [\n      #     pkgs.segger-jlink\n      # ];\n\n      # Add \"segger-jlink\" to your system packages and accept the EULA:\n      # nixpkgs.config.segger-jlink.acceptLicense = true;\n    ];\n\n    LD_LIBRARY_PATH=\"${stdenv.cc.cc.lib}/lib64:$LD_LIBRARY_PATH\";\n\n    # Instruct the Tock gnumake-based build system to not check for rustup and\n    # assume all requirend tools are installed and available in the $PATH\n    NO_RUSTUP = \"1\";\n\n    # The defaults \"objcopy\" and \"objdump\" are wrong (stem from the standard\n    # environment for x86), use \"llvm-obj{copy,dump}\" as defined in the makefile\n    shellHook = ''\n      unset OBJCOPY\n      unset OBJDUMP\n    '';\n  }\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "vagrant",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}