{
  "metadata": {
    "timestamp": 1736709334607,
    "page": 6,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "seanmonstar/warp",
      "stars": 9687,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0458984375,
          "content": "\n/target\n**/*.rs.bk\nCargo.lock\n.idea/\nwarp.iml\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 14.2314453125,
          "content": "### v0.3.7 (April 5, 2024)\n\n- **Features**:\n  - Add ecc private key support to `tls()` config.\n- **Fixes**:\n  - Several dependency upgrades.\n\n### v0.3.6 (September 27, 2023)\n\n- **Features**:\n  - Add ability to pass `None` to `multipart::form().max_length()`.\n  - Implement `Reply` for `Result<impl Reply, impl Reply>`.\n  - Make `multipart::Part::content_type()` return the full mime string.\n  - Add `TlsServer::try_bind_with_graceful_shutdown()`.\n- **Fixes**:\n  - Updated tungstenite and rustls dependencies for security fixes.\n\n### v0.3.5 (April 28, 2023)\n\n- **Fixes**:\n  - `multipart` filters now use `multer` dependency, fixing some streaming bugs.\n  - `Rejection::into_response()` is significantly faster.\n\n### v0.3.4 (March 31, 2023)\n\n- **Fixes**:\n  - `multipart::Part` data is now streamed instead of buffered.\n  - Update dependency used for `multipart` filters.\n\n### v0.3.3 (September 27, 2022)\n\n- **Fixes**:\n  - Fix `fs` filters path sanitization to reject colons on Windows.\n\n### v0.3.2 (November 9, 2021)\n\n- **Features**:\n  - Add `Filter::then()`, which is like `Filter::map()` in that it's infallible, but is async like `Filter::and_then()`.\n  - Add `redirect::found()` reply helper that returns `302 Found`.\n  - Add `compression-brotli` and `compression-gzip` cargo features to enable only the compression you need.\n  - Allow `HEAD` requests to be served to `fs::dir()` filters.\n  - Allow `path!()` with no arguments.\n- **Fixes**:\n  - Update private dependencies Tungstenite and Multipart.\n  - Replaces uses of `futures` with `futures-util`, which is a smaller dependency.\n\n\n### v0.3.1 (March 24, 2021)\n\n- **Features**:\n  - Add `pong` constructor to websocket messages.\n  - Add `redirect::see_other` and `redirect::permanent` helpers.\n- **Fixes**:\n  - Fix `fs` filters sometimes having an off-by-one error with range requests.\n  - Fix CORS to allow spaces when checking `Access-Control-Request-Headers`.\n\n## v0.3.0 (January 19, 2021)\n\n- **Features**:\n  - Add TLS client authentication support.\n  - Add TLS OCSP stapling support.\n  - Add `From<Reject>` for `Rejection`.\n  - Add `close_frame` accessor to `ws::Message`.\n- **Changes**:\n  - Update to Tokio v1.\n  - Update to Bytes v1.\n  - Update to hyper v0.14.\n  - Rework `sse` filter to be more like `ws`, with a single `Event` type and builder.\n  - Change `cookie` filter to extract a generic `FromStr` value.\n\n\n### v0.2.5 (August 31, 2020)\n\n- **Features**:\n  - Add `wrap_fn`, which can be used to create a `Wrap` from a closure. These in turn are used with `Filter::with()`.\n  - Add `warp::host` filters to deal with `Host`/`:authority` headers.\n  - Relax some lifetime bounds on `Server`.\n- **Fixes**:\n  - Fix panic when URI doesn't have a slash (for example, `CONNECT foo.bar`).\n\n### v0.2.4 (July 20, 2020)\n\n- **Features**:\n  - Add `tracing` internals in place of `log` (log is still emitted for backwards compatibility).\n  - Add `warp::trace` module set of filters to customize `tracing` dianostics.\n  - Add `path` method to `warp::fs::File` reply.\n  - Add `source` implementation for `BodyDeserializeError`.\n  - Make `warp::ws::MissingConnectionUpgrade` rejection public.\n\n### v0.2.3 (May 19, 2020)\n\n- **Features**:\n  - Add `warp::compression` filters, which will compress response bodies.\n  - Add `warp::header::value()` filter to get a request `HeaderValue`.\n  - Add `request_headers` method to `warp::log::Info`.\n  - Add `max_frame_size` to `warp::ws::Ws` builder.\n  - Add `remote_addr` to `warp::test::RequestBuilder`.\n  - Add `try_bind_with_graceful_shutdown` to `warp::Server` builder.\n  - Add `serve_incoming_with_graceful_shutdown` to `warp::Server` builder.\n- **Fixes**:\n  - Fix `warp::addr::remote` when used with `Server::tls`.\n  - Fix panic in `warp::path::{peek, tail, full}` filters when the request URI is in authority-form or asterisk-form.\n\n### v0.2.2 (March 3, 2020)\n\n- **Features**:\n  - Implement `Reply` for all `Box<T>` where `T: Reply`.\n  - Add `name` methods to `MissingHeader`, `InvalidHeader`, and `MissingCookie` rejections.\n  - Add `warp::ext::optional()` filter that optionally retrieves an extension from the request.\n- **Fixes**:\n  - Fix the sending of pings when a user sends a `ws::Message::ping()`.\n\n### v0.2.1 (January 23, 2020)\n\n- **Features**:\n  - Add `close` and `close_with` constructors to `warp::ws::Message`.\n- **Fixes**:\n  - Fix `warp::fs` filters using a very small read buffer.\n\n## v0.2.0 (January 16, 2020)\n\n- **Features**:\n  - Update to `std::future`, adding `async`/`await` support!\n  - Add `warp::service()` to convert a `Filter` into a `tower::Service`.\n  - Implement `Reply` for `Box<dyn Reply>`.\n- **Changes**:\n  - Refactored Rejection system (#311).\n  - Change `path!` macro to assume a `path::end()` by default, with explicit `/ ..` to allow building a prefix (#359).\n  - Change `warp::path(str)` to accept any `AsRef<str>` argument.\n  - Rename \"2\"-suffixed filters and types (`get2` to `get`, `ws2` to `ws`, etc).\n  - `Filter::{or, or_else, recover}` now require `Self::Error=Rejection`. This helps catch filters that didn't make sense (like `warp::any().or(warp::get())`).\n  - Change several `warp::body` filters (#345).\n  - Change `warp::cors()` to return a `warp::cors::Builder` which still implements `Wrap`, but can also `build` a cheaper-to-clone wrapper.\n  - Change `warp::multipart` stream API to allow for errors when streaming.\n  - Change `warp::sse` to no longer return a `Filter`, adds `warp::sse::reply` to do what `Sse::reply` did.\n  - Change `Server::tls()` to return a TLS server builder (#340).\n  - Change internal `warp::never::Never` usage with `std::convert::Infallible`.\n  - Remove `warp::ext::set()` function (#222).\n  - Remove deprecated `warp::cookie::optional_value()`.\n\n\n### v0.1.20 (September 17, 2019)\n\n- **Features**:\n  - Implement `Clone` for the `warp::cors` filter.\n  - Add `into_bytes` method for `warp::ws::Message`.\n\n### v0.1.19 (August 16, 2019)\n\n- **Features**:\n  - Make `warp::multipart` and `wrap::ws` support optional, though enabled by default.\n- **Fixes**:\n  - Fix `warp::fs::dir` filter to reject paths containing backslashes.\n\n### v0.1.18 (July 25, 2019)\n\n- **Features**:\n  - Add `warp::multipart` support.\n\n### v0.1.17 (July 8, 2019)\n\n- **Features**:\n  - Export all built-in Rejection causes in the `warp::reject` module.\n  - Add `Server::try_bind` as fallible bind methods.\n\n### v0.1.16 (June 11, 2019)\n\n- **Features**:\n  - Unseal the `Reply` trait: custom types can now implement `Reply`.\n  - Add `warp::sse::keep_alive()` replacement for `warp::sse::keep()` which allows customizing keep-alive behavior.\n  - Add `warp::log::Info::host()` accessor.\n- **Fixes**:\n  - Fix `warp::fs` filters from sending some headers for `304` responses.\n\n### v0.1.15 (April 2, 2019)\n\n- **Features**:\n  - Add more accessors to `warp::log::Info` type for building custom log formats.\n  - Implement `Reply` for `Cow<'static, str>`.\n\n### v0.1.14 (March 19, 2019)\n\n- **Features**:\n  - Add `warp::header::optional` filter.\n\n### v0.1.13 (February 13, 2019)\n\n- **Features**:\n  - Implement `Reply` for `Vec<u8>` and `&'static [u8]`.\n  - Set `content-type` header automatically for string and bytes replies.\n  - Add `expose_headers` to `warp::cors` filter.\n\n### v0.1.12 (January 29, 2019)\n\n- **Features**:\n  - Implement `PartialEq`, `Eq`, and `Clone` for `warp::ws::Message`.\n- **Fixes**:\n  - Fix panic when incoming request URI may not have a path (such as `CONNECT` requests).\n\n### v0.1.11 (January 14, 2019)\n\n- **Features**:\n  - Add `warp::sse` filters for handling Server-Sent-Events.\n  - Add `allow_headers` to `warp::cors` filter.\n- **Fixes**:\n  - Fix TLS handshake to close the connection if handshake fails.\n\n### v0.1.10 (December 17, 2018)\n\n- **Features**:\n  - Add optional TLS support. Enable the `tls` feature, and then use `Server::tls`.\n  - Add `warp::cors` filter for CORS support.\n  - Add `warp::addr::remote` to access the remote address of a request.\n  - Add `warp::log::custom` to support customizing of access logging.\n  - Add `warp::test::ws` to improve testing Websocket filters.\n\n### v0.1.9 (October 30, 2018)\n\n- **Features**:\n  - Add `warp::ext::get` and `warp::ext::set` to set request extensions.\n  - Add `Filter::untuple_one` to unroll nested tuple layers from extractions.\n  - Add `Ws2::max_send_queue` configuration method.\n  - Add `ws::Message::is_ping` method, and yield pings to user code.\n- **Fixes**:\n  - Fix panic in debug mode when receiving a websocket ping.\n\n### v0.1.8 (October 25, 2018)\n\n- **Features**:\n  - Improved flexibility of `Rejection` system.\n    \n    The `Rejection` type can now nest and combine arbitrary rejections,\n    so it is no longer bound to a small set of meanings. The ranking of\n    status codes is still used to determine which rejection gets priority.\n    \n    A different priority can be implemented by handling rejections with\n    a `Filter::recover`, and searching for causes in order via\n    `Rejection::find_cause`.\n    - Adds `warp::reject::custom()` to create a `Rejection` with\n      any `Into<Box<std::error::Error>>`. These rejections should be\n      handled with an eventual `Filter::recover`. Any unhandled\n      custom rejections are considered a server error.\n    - Deprecates `Rejection::with`. Use custom rejections instead.\n    - Deprecates `Rejection::into_cause`, as it can no longer work. Always\n      returns `Err(Rejection)`.\n    - Deprecates `Rejection::json`, since the format needed is too generic.\n      The `errors.rs` example shows how to send custom JSON when recovering\n      from rejections.\n    - Deprecates `warp::reject()`, since it current signals a `400 Bad\n      Request`, but in newer versions, it will signal `404 Not Found`.\n      It's deprecated simply to warn that the semantics are changing,\n      but the function won't actually go away.\n    - Deprecates `reject::bad_request()`, `reject::forbidden()`, and\n      `reject::server_error()`. Uses custom rejections instead.\n  - Renamed `warp::path::index` to `warp::path::end`.\n\n\n### v0.1.7 (October 15, 2018)\n\n- **Features**:\n  - Export the types returned from the `warp::body::stream()` filter, `BodyStream` and `StreamBuf`.\n  - Deprecated `Rejection::into_cause`, since an upcoming Rejection refactor will make it impossible to support.\n\n- **Fixes**:\n  - Fix websocket filters to do a case-insensitive match of the `Connection` header.\n\n### v0.1.6 (October 5, 2018)\n\n- **Features**:\n  - Add Conditional and Range request support for `warp::fs` filters.\n  - Relaxed bounds on `Rejection::with` to no longer need to be `Sized`.\n  - Add `warp::path::peek()` which gets the unmatched tail without adjusting the currently matched path.\n\n### v0.1.5 (October 3, 2018)\n\n- **Features**:\n  - Serve `index.html` automatically with `warp::fs::dir` filter.\n  - Include `last-modified` header with `warp::fs` filters.\n  - Add `warp::redirect` to easily reply with redirections.\n  - Add `warp::reply::{with_status, with_header}` to wrap `impl Reply`s directly with a new status code or header.\n  - Add support for running a warp `Server` with a custom source of incoming connections.\n    - `Server::run_incoming` to have the runtime started automatically.\n    - `Server::serve_incoming` to get a future to run on existing runtime.\n    - These can be used to support Unix Domain Sockets, TLS, and other transports.\n  - Add `Rejection::into_cause()` to retrieve the original error of a rejection back.\n  - Add `Rejection::json()` to convert a rejection into a JSON response.\n\n- **Fixes**\n  - Internal errors in warp that result in rendering a `500 Internal Server Error` are now also logged at the `error` level.\n\n\n### v0.1.4 (September 25, 2018)\n\n- **Features**:\n  - Add `warp::reply::with::headers(HeaderMap)` filter wrapper.\n  - Add `warp::cookie::optional()` to get an optional cookie value.\n  - Add `warp::path::full()` to be able to extract the full request path without affecting route matching.\n  - Add graceful shutdown support to the `Server`.\n  - Allow empty query strings to be treated as for `warp::query()`.\n\n### v0.1.3 (August 28, 2018)\n\n- **Features**:\n  - Add `warp::reject::forbidden()` to represent `403 Forbidden` responses.\n  - Add `Rejection::with(cause)` to customize rejection messages.\n- **Fixes**:\n  - Fix `warp::body::form` to allow charsets in the `content-type` header.\n\n### v0.1.2 (August 14, 2018)\n\n- **Features**:\n  - Implemented `Reply` for `Response<impl Into<hyper::Body>`, allowing streaming response bodies.\n  - Add `warp::body::stream()` filter to access the request body as an `impl Stream`.\n  - Add `warp::ws2()` as a more flexible websocket filter.\n    - This allows passing other extracted values to the upgrade callback, such as a value from a header or path.\n    - Deprecates `warp::ws()`, and `ws2()` will become `ws()` in 0.2.\n  - Add `warp::get2()`, `warp::post2()`, `warp::put2()`, and `warp::delete2()` as more standard method filters that are used via chaining instead of nesting.\n    - `get()`, `post()`, `put()`, and `delete()` are deprecated, and the new versions will become them in 0.2.\n  - Add `Filter::unify()` for when a filter returns `Either<T, T>`, converting the `Either` into the inner `T`, regardless of which variant it was.\n    - This requires that both sides of the `Either` be the same type.\n    - This can be useful when extracting a value that might be present in different places of the request.\n      \n      ```rust\n      // Allow `MyId` to be a path parameter or a header...\n      let id = warp::path::param::<MyId>()\n          .or(warp::header::<MyId>())\n          .unify();\n      \n      // A way of providing default values...\n      let dnt = warp::header::<bool>(\"dnt\")\n          .or(warp::any().map(|| true))\n          .unify();\n      ```\n  - Add `content-type` header automatically to replies from `file` and `dir` filters based on file extension.\n  - Add `warp::head()`, `warp::options()`, and `warp::patch()` as new Method filters.\n  - Try to use OS blocksize in `warp::fs` filters.\n- **Fixes**:\n  - Chaining filters that try to consume the request body will log that the body is already consumed, and return a `500 Internal Server Error` rejection.\n\n### v0.1.1 (August 7, 2018)\n\n- **Features**:\n  - Add `warp::query::raw()` filter to get query as a `String`.\n  - Add `Filter::recover()` to ease customizing of rejected responses.\n  - Add `warp::header::headers_clone()` filter to get a clone of request's `HeaderMap`.\n  - Add `warp::path::tail()` filter to get remaining \"tail\" of the request path.\n- **Fixes**:\n  - URL decode path segments in `warp::fs` filters.\n\n\n## v0.1.0 (August 1, 2018)\n\n- Initial release.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.712890625,
          "content": "[package]\nname = \"warp\"\nversion = \"0.3.7\"\ndescription = \"serve the web at warp speeds\"\nauthors = [\"Sean McArthur <sean@seanmonstar.com>\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\ndocumentation = \"https://docs.rs/warp\"\nrepository = \"https://github.com/seanmonstar/warp\"\ncategories = [\"web-programming::http-server\"]\nkeywords = [\"warp\", \"server\", \"http\", \"hyper\"]\nautotests = true\nautoexamples = true\nedition = \"2018\"\n\n[package.metadata.docs.rs]\nall-features = true\n\n[dependencies]\nasync-compression = { version = \"0.4.5\", features = [\"tokio\"], optional = true }\nbytes = \"1.0\"\nfutures-util = { version = \"0.3\", default-features = false, features = [\"sink\"] }\nfutures-channel = { version = \"0.3.17\", features = [\"sink\"]}\nheaders = \"0.3.5\"\nhttp = \"0.2\"\nhyper = { version = \"0.14\", features = [\"stream\", \"server\", \"http1\", \"http2\", \"tcp\", \"client\"] }\nlog = \"0.4\"\nmime = \"0.3\"\nmime_guess = \"2.0.0\"\nmulter = { version = \"2.1.0\", optional = true }\nscoped-tls = \"1.0\"\nserde = \"1.0\"\nserde_json = \"1.0\"\nserde_urlencoded = \"0.7.1\"\ntokio = { version = \"1.0\", features = [\"fs\", \"sync\", \"time\"] }\ntokio-util = { version = \"0.7.1\", features = [\"io\"] }\ntracing = { version = \"0.1.21\", default-features = false, features = [\"log\", \"std\"] }\ntower-service = \"0.3\"\ntokio-tungstenite = { version = \"0.21\", optional = true }\npercent-encoding = \"2.1\"\npin-project = \"1.0\"\ntokio-rustls = { version = \"0.26\", default-features = false, features = [\"logging\", \"tls12\", \"ring\"], optional = true }\nrustls-pemfile = { version = \"2.0\", optional = true }\n\n[dev-dependencies]\npretty_env_logger = \"0.5\"\ntracing-subscriber = { version = \"0.3\", features = [\"env-filter\"] }\ntracing-log = \"0.2\"\nserde_derive = \"1.0\"\nhandlebars = \"6.0\"\ntokio = { version = \"1.0\", features = [\"macros\", \"rt-multi-thread\"] }\ntokio-stream = { version = \"0.1.1\", features = [\"net\"] }\nlistenfd = \"1.0\"\n\n[features]\ndefault = [\"multipart\", \"websocket\"]\nmultipart = [\"multer\"]\nwebsocket = [\"tokio-tungstenite\"]\ntls = [\"tokio-rustls\", \"rustls-pemfile\"]\n\n# Enable compression-related filters\ncompression = [\"compression-brotli\", \"compression-gzip\"]\ncompression-brotli = [\"async-compression/brotli\"]\ncompression-gzip = [\"async-compression/deflate\", \"async-compression/gzip\"]\n\n[profile.release]\ncodegen-units = 1\nincremental = false\n\n[profile.bench]\ncodegen-units = 1\nincremental = false\n\n[[test]]\nname = \"multipart\"\nrequired-features = [\"multipart\"]\n\n[[test]]\nname = \"ws\"\nrequired-features = [\"websocket\"]\n\n[[example]]\nname = \"compression\"\nrequired-features = [\"compression\"]\n\n[[example]]\nname = \"unix_socket\"\n\n[[example]]\nname = \"websockets\"\nrequired-features = [\"websocket\"]\n\n[[example]]\nname = \"websockets_chat\"\nrequired-features = [\"websocket\"]\n\n[[example]]\nname = \"query_string\"\n\n\n[[example]]\nname = \"multipart\"\nrequired-features = [\"multipart\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0380859375,
          "content": "Copyright (c) 2018-2020 Sean McArthur\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.841796875,
          "content": "# warp\n\n[![crates.io](https://img.shields.io/crates/v/warp.svg)](https://crates.io/crates/warp)\n[![Released API docs](https://docs.rs/warp/badge.svg)](https://docs.rs/warp)\n[![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](./LICENSE)\n[![GHA Build Status](https://github.com/seanmonstar/warp/workflows/CI/badge.svg)](https://github.com/seanmonstar/warp/actions?query=workflow%3ACI)\n[![Discord chat][discord-badge]][discord-url]\n\nA super-easy, composable, web server framework for warp speeds.\n\nThe fundamental building block of `warp` is the `Filter`: they can be combined\nand composed to express rich requirements on requests.\n\nThanks to its `Filter` system, warp provides these out of the box:\n\n* Path routing and parameter extraction\n* Header requirements and extraction\n* Query string deserialization\n* JSON and Form bodies\n* Multipart form data\n* Static Files and Directories\n* Websockets\n* Access logging\n* Gzip, Deflate, and Brotli compression\n\nSince it builds on top of [hyper](https://hyper.rs), you automatically get:\n\n- HTTP/1\n- HTTP/2\n- Asynchronous\n- One of the fastest HTTP implementations\n- Tested and **correct**\n\n## Example\n\nAdd warp and Tokio to your dependencies:\n\n```toml\ntokio = { version = \"1\", features = [\"full\"] }\nwarp = \"0.3\"\n```\n\nAnd then get started in your `main.rs`:\n\n```rust\nuse warp::Filter;\n\n#[tokio::main]\nasync fn main() {\n    // GET /hello/warp => 200 OK with body \"Hello, warp!\"\n    let hello = warp::path!(\"hello\" / String)\n        .map(|name| format!(\"Hello, {}!\", name));\n\n    warp::serve(hello)\n        .run(([127, 0, 0, 1], 3030))\n        .await;\n}\n```\n\nFor more information you can check the [docs](https://docs.rs/warp) or the [examples](https://github.com/seanmonstar/warp/tree/master/examples).\n\n[discord-badge]: https://img.shields.io/discord/500028886025895936.svg?logo=discord\n[discord-url]: https://discord.gg/RFsPjyt\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}