{
  "metadata": {
    "timestamp": 1736709365376,
    "page": 66,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tokio-rs/mio",
      "stars": 6469,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 0.634765625,
          "content": "freebsd_instance:\n  image: freebsd-13-2-release-amd64\n\nenv:\n  RUST_BACKTRACE: full\n\ntask:\n  name: FreeBSD\n  setup_script:\n    - fetch https://sh.rustup.rs -o rustup.sh\n    - sh rustup.sh -y --profile minimal\n  cargo_cache:\n    folder: $HOME/.cargo/registry\n  build_script:\n    - . $HOME/.cargo/env\n    - cargo build\n    - cargo build --no-default-features\n  amd64_test_script:\n    - . $HOME/.cargo/env\n    - cargo test --all-features\n  i386_test_script:\n    - . $HOME/.cargo/env\n    - rustup target add i686-unknown-freebsd\n    - cargo test --target i686-unknown-freebsd --all-features\n  before_cache_script:\n    - rm -rf $HOME/.cargo/registry/index\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0302734375,
          "content": ".cargo\nCargo.lock\ntarget*\nlibs\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 26.6328125,
          "content": "# 1.0.3\n\n* Implement more I/O safety traits\n  (https://github.com/tokio-rs/mio/pull/1831).\n* Remove hermit-abi dependency, now using libc\n  (https://github.com/tokio-rs/mio/pull/1830).\n* Use `poll(2)` implementation on AIX, removing the need for using\n  `mio_unsupported_force_poll_poll`\n  (https://github.com/tokio-rs/mio/pull/1833).\n\n# 1.0.2\n\n* Work around eventfd bug on illumos\n  (https://github.com/tokio-rs/mio/pull/1826).\n* Fix dead code warning on Hermit when building with `--no-default-features\n  --features os-ext`\n  (https://github.com/tokio-rs/mio/pull/1828).\n\n# 1.0.1\n\n* Added Fuchsia support\n  (https://github.com/tokio-rs/mio/pull/1811).\n* Added GNU/Hurd support\n  (https://github.com/tokio-rs/mio/pull/1816).\n* Fixed an issue where accepting on a UDS socket without sometime pass an address\n  with a NULL byte to SocketAddr::from_pathname\n  (https://github.com/tokio-rs/mio/pull/1817).\n* Internal cleanups that should make the `cfg` sitations easier to follow\n  (https://github.com/tokio-rs/mio/pull/1812,\n  https://github.com/tokio-rs/mio/pull/1813).\n\n# 1.0\n\nWith v1 Mio is able to bump its MSRV to 1.70, allowing us to implement I/O\nsafety traits (https://github.com/rust-lang/rust/issues/87074) and replace\n`SocketAddr` with the version found in the standard library.\n\n## Added\n\n* Implement `AsFd` for`TcpListener`, `TcpStream`, `UdpSocket`, `UnixDatagram`,\n  `UnixListener`, `UnixStream`, `pipe::Receiver` and `pipe::Sender`\n  (https://github.com/tokio-rs/mio/pull/1749, https://github.com/tokio-rs/mio/pull/1797).\n* Implement `From` for `TcpListener`, `TcpStream`, `UdpSocket`, `UnixDatagram`,\n  `UnixListener`, and `UnixStream` for their standard library counterpart\n  (https://github.com/tokio-rs/mio/pull/1767).\n* Add support for abstract namespaces on Android\n  (https://github.com/tokio-rs/mio/pull/1749).\n* Add support for QNX OS\n  (https://github.com/tokio-rs/mio/pull/1766,\n  https://github.com/tokio-rs/mio/pull/1800).\n* Add support for Apple visionOS\n  (https://github.com/tokio-rs/mio/pull/1795).\n* Support for Haiku\n  (https://github.com/tokio-rs/mio/pull/1807).\n\n## Removed\n\n* The `SocketAddr` type is removed in favour of `std::os::unix::net::SocketAddr`\n  (https://github.com/tokio-rs/mio/pull/1760). All methods on Mio's version\n  should exist on the version in the standard library.\n\n## Changes\n\n* MSRV was updated to 1.74, updating to Rust edition edition\n  (https://github.com/tokio-rs/mio/pull/1733).\n* `UnixDatagram::{local_addr,peer_addr,bind_addr,recv_from}`,\n  `UnixListener::{local_addr,bind_addr,accept}` and\n  `UnixStream::{local_addr,peer_addr,connect_addr}` return and/or use\n  `std::os::unix::net::SocketAddr` instead of Mio's own `SocketAddr` type\n  (https://github.com/tokio-rs/mio/pull/1760).\n* Use `OwnedFd` internally for `Poll` where possible\n  (https://github.com/tokio-rs/mio/pull/1749).\n* Support ESP-IDF and Hermit without cfg flags\n  (https://github.com/tokio-rs/mio/pull/1789,\n  https://github.com/tokio-rs/mio/pull/1802,\n  https://github.com/tokio-rs/mio/pull/1802).\n* Updated windows-sys to v0.52\n  (https://github.com/tokio-rs/mio/pull/1668).\n\n# 0.8.11\n\n* Fix receiving IOCP events after deregistering a Windows named pipe\n  (https://github.com/tokio-rs/mio/pull/1760, backport pr:\n  https://github.com/tokio-rs/mio/pull/1761).\n\n# 0.8.10\n\n## Added\n\n* Solaris support\n  (https://github.com/tokio-rs/mio/pull/1724).\n\n# 0.8.9\n\n## Added\n\n* ESP-IDF framework support\n  (https://github.com/tokio-rs/mio/pull/1692).\n* AIX operating system support\n  (https://github.com/tokio-rs/mio/pull/1704).\n* Vita support\n  (https://github.com/tokio-rs/mio/pull/1721).\n* `{UnixListener,UnixStream}:bind_addr`\n  (https://github.com/tokio-rs/mio/pull/1630).\n* `mio_unsupported_force_poll_poll` and `mio_unsupported_force_waker_pipe`\n  **unsupported** configuration flags to force a specific poll or waker\n  implementation\n  (https://github.com/tokio-rs/mio/pull/1684,\n  https://github.com/tokio-rs/mio/pull/1685,\n  https://github.com/tokio-rs/mio/pull/1692).\n\n## Fixed\n\n* The `pipe(2)` based waker (swapped file descriptors)\n  (https://github.com/tokio-rs/mio/pull/1722).\n* The duplicate waker check to work correctly with cloned `Registry`s.\n  (https://github.com/tokio-rs/mio/pull/1706).\n\n# 0.8.8\n\n## Fixed\n\n* Fix compilation on WASI (https://github.com/tokio-rs/mio/pull/1676).\n\n# 0.8.7\n\n## Added\n\n* Add/fix support for tvOS and watchOS, Mio should now build for tvOS and\n  watchOS, but we don't have a CI setup yet\n  (https://github.com/tokio-rs/mio/pull/1658).\n\n## Changed\n\n* Made the `log` dependency optional behind the `log` feature flag (enabled by\n  default). Users that disabled Mio's default features will now not see any\n  logging from Mio, enabling the `log` feature will fix that. This was done in\n  response to the `log` crate increasing it's MSRV to v1.60, see\n  https://github.com/rust-lang/log/pull/552\n  (https://github.com/tokio-rs/mio/pull/1673).\n* Update windows-sys dependency to v0.48\n  (https://github.com/tokio-rs/mio/pull/1663).\n\n## Fixed\n\n* Fix overflow in `Poll::poll` when using `Duration::MAX` as timeout\n  (https://github.com/tokio-rs/mio/pull/1657).\n\n# 0.8.6\n\n## Added\n\n* `Interest::PRIORITY` on Linux and Android, to trigger `Event::is_priority`\n  (https://github.com/tokio-rs/mio/pull/1647).\n\n## Changed\n\n* Updated windows-sys to 0.45\n  (https://github.com/tokio-rs/mio/pull/1644).\n* We started testing with sanitizers on the CI\n  (https://github.com/tokio-rs/mio/pull/1648).\n\n## Fixed\n\n* A number of potential fd leaks when setup resulted in an error right after\n  creation (https://github.com/tokio-rs/mio/pull/1636).\n* Less truncating for timeout values in `Poll::poll`\n  (https://github.com/tokio-rs/mio/pull/1642).\n\n# 0.8.5\n\n## Changed\n\n* Updated `windows-sys` to 0.42.0\n  (https://github.com/tokio-rs/mio/pull/1624).\n* Officially document Wine as not supported, some people claimed it worked,\n  other claims it doesn't, but nobody stepped up to fix the problem\n  (https://github.com/tokio-rs/mio/pull/1596).\n* Switch to GitHub Actions\n  (https://github.com/tokio-rs/mio/pull/1598, https://github.com/tokio-rs/mio/pull/1601).\n* Documented the current Poll::poll time behaviour\n  (https://github.com/tokio-rs/mio/pull/1603).\n\n## Fixed\n\n* Timeout less than one millisecond becoming zero millsiconds\n  (https://github.com/tokio-rs/mio/pull/1615, https://github.com/tokio-rs/mio/pull/1616)\n* Undefined reference to `epoll\\_create1` on Android API level < 21.\n  (https://github.com/tokio-rs/mio/pull/1590).\n\n# 0.8.4\n\n## Added\n\n* Support `Registery::try_clone` on `wasm32-wasi`\n  (https://github.com/tokio-rs/mio/pull/1576).\n* Add docs about polling without registering event sources\n  (https://github.com/tokio-rs/mio/pull/1585).\n\n# 0.8.3\n\n## Changed\n\n* Replace `winapi` dependency with `windows-sys`.\n  (https://github.com/tokio-rs/mio/pull/1556).\n* Future proofed the kevent ABI for FreeBSD\n  (https://github.com/tokio-rs/mio/pull/1572).\n\n## Fixed\n\n* Improved support for Redox, making it possible to run on stable Rust\n  (https://github.com/tokio-rs/mio/pull/1555).\n* Don't ignore EAGAIN in UDS connect call\n  (https://github.com/tokio-rs/mio/pull/1564).\n* Documentation of `TcpStream::connect`\n  (https://github.com/tokio-rs/mio/pull/1565).\n\n# 0.8.2\n\n## Added\n\n* Experimental support for Redox.\n\n# 0.8.1\n\n## Added\n\n* Add `try_io` method to all I/O types (#1551). This execute a user defined I/O\n  closure while updating Mio's internal state ensuring that the I/O type\n  receives more events if it hits a WouldBlock error. This is added to the\n  following types:\n   * `TcpStream`\n   * `UdpSocket`\n   * `UnixDatagram`\n   * `UnixStream`\n   * `unix::pipe::Sender`\n   * `unix::pipe::Receiver`\n* Basic, experimental support for `wasm32-wasi` target (#1549). Note that a lot\n  of time type are still missing, e.g. the `Waker`, and may never be possible to\n  implement.\n\n# 0.8.0\n\n## Removed\n\n* Deprecated features (https://github.com/tokio-rs/mio/commit/105f8f2afb57b01ddea716a0aa9720f226c520e3):\n  * extra-docs (always enabled)\n  * tcp (replaced with \"net\" feature).\n  * udp (replaced with \"net\" feature).\n  * uds (replaced with \"net\" feature).\n  * pipe (replaced with \"os-ext\" feature).\n  * os-util (replaced with \"os-ext\" feature).\n* `TcpSocket` type\n  (https://github.com/tokio-rs/mio/commit/02e9be41f27daf822575444fdd2b3067433a5996).\n  The socket2 crate provides all the functionality and more.\n* Support for Solaris, it never really worked anyway\n  (https://github.com/tokio-rs/mio/pull/1528).\n\n## Changes\n\n* Update minimum Rustc version (MSVR) to 1.46.0\n  (https://github.com/tokio-rs/mio/commit/5c577efecd23750a9a3e0f6ad080ab98f14a255d).\n\n## Added\n\n* `UdpSocket::peer_addr`\n  (https://github.com/tokio-rs/mio/commit/5fc104d08e0e74c8a19247f7cba0f058699fc438).\n\n# 0.7.14\n\n## Fixes\n\n* Remove use unsound internal macro (#1519).\n\n## Added\n\n* `sys::unix::SocketAddr::as_abstract_namespace()` (#1520).\n\n# 0.7.13\n\n## Fixes\n\n* Fix `Registry::try_clone` invalid usage of `F_DUPFD_CLOEXEC` (#1497,\n  https://github.com/tokio-rs/mio/commit/2883f5c1f35bf1a59682c5ffc4afe6b97d7d6e68).\n\n# 0.7.12 (yanked)\n\n## Fixes\n\n* Set `FD_CLOEXEC` when calling `Registry::try_clone`\n  (https://github.com/tokio-rs/mio/commit/d1617b567ff6bc669d71e367d22e0e93ff7e2e24 for epoll and\n  (https://github.com/tokio-rs/mio/commit/b367a05e408ca90a26383c3aa16d8a16f019dc59 for kqueue).\n\n# 0.7.11\n\n## Fixes\n\n* Fix missing feature of winapi.\n  (https://github.com/tokio-rs/mio/commit/a7e61db9e3c2b929ef1a33532bfcc22045d163ce).\n\n# 0.7.10\n\n## Fixes\n\n* Fix an instance of not doc(cfg(.*))\n  (https://github.com/tokio-rs/mio/commit/25e8f911357c740034f10a170dfa4ea1b28234ce).\n\n# 0.7.9\n\n## Fixes\n\n* Fix error handling in `NamedPipe::write`\n  (https://github.com/tokio-rs/mio/commit/aec872be9732e5c6685100674278be27f54a271b).\n* Use `accept(2)` on x86 Android instead of `accept4(2)`\n  (https://github.com/tokio-rs/mio/commit/6f86b925d3e48f30905d5cfa54348acf3f1fa036,\n  https://github.com/tokio-rs/mio/commit/8d5414880ab82178305ac1d2c16d715e58633d3e).\n* Improve error message when opening AFD device\n  (https://github.com/tokio-rs/mio/commit/139f7c4422321eb4a17b14ae2c296fddd19a8804).\n\n# 0.7.8\n\n## Fixes\n\n* Fix `TcpStream::set_linger` on macOS\n  (https://github.com/tokio-rs/mio/commit/175773ce02e85977db81224c782c8d140aba8543).\n* Fix compilation on DragonFlyBSD\n  (https://github.com/tokio-rs/mio/commit/b51af46b28871f8dd3233b490ee62237ffed6a26).\n\n# 0.7.7\n\n## Added\n\n* `UdpSocket::only_v6`\n  (https://github.com/tokio-rs/mio/commit/0101e05a800f17fb88f4315d9b9fe0f08cca6e57).\n* `Clone` implementation for `Event`\n  (https://github.com/tokio-rs/mio/commit/26540ebbae89df6d4d08465c56f715d8f2addfc3).\n* `AsRawFd` implementation for `Registry`\n  (https://github.com/tokio-rs/mio/commit/f70daa72da0042b1880256164774c3286d315a02).\n* `Read` and `Write` implementation for `&unix::pipe::Sender` and `Receiver`,\n  that is on the reference to them, an implementation existed on the types\n  themselves already\n  (https://github.com/tokio-rs/mio/commit/1be481dcbbcb6906364008b5d61e7f53cddc3eb3).\n\n## Fixes\n\n* Underflow in `SocketAddr::address`\n  (https://github.com/tokio-rs/mio/commit/6d3fa69240cd4bb95e9d34605c660c30245a18bd).\n* Android build with the net feature enabled, but with os-poll disabled\n  (https://github.com/tokio-rs/mio/commit/49d8fd33e026ad6e2c055d05d6667180ba2af7be).\n* Solaris build with the net feature enabled, but with os-poll disabled\n  (https://github.com/tokio-rs/mio/commit/a6e025e9d9511639ec106ebedc0dd312bdc9be12).\n* Ensure that `Waker::wake` works on illumos systems with poor `pipe(2)` and\n  `epoll(2)` interaction using `EPOLLET`\n  (https://github.com/tokio-rs/mio/commit/943d4249dcc17cd8b4d2250c4fa19116097248fa).\n* Fix `unix::pipe` on illumos\n  (https://github.com/tokio-rs/mio/commit/0db49f6d5caf54b12176821363d154384357e70a).\n\n# 0.7.6\n\n## Added\n\n* `net` feature, replaces `tcp`, `udp` and `uds` features\n  (https://github.com/tokio-rs/mio/commit/a301ba520a8479b459c4acdcefa4a7c5eea818c7).\n* `os-ext` feature, replaces `os-util` and `pipe` features\n  (https://github.com/tokio-rs/mio/commit/f5017fae8a3d3bb4b4cada25b01a2d76a406badc).\n* Added keepalive support to `TcpSocket`\n  (https://github.com/tokio-rs/mio/commit/290c43a96662d54ab7c4b8814e5a9f9a9e523fda).\n* `TcpSocket::set_{send, recv}_buffer_size`\n  (https://github.com/tokio-rs/mio/commit/40c4af79bf5b32b8fbdbf6f2e5c16290e1d3d406).\n* `TcpSocket::get_linger`\n  (https://github.com/tokio-rs/mio/commit/13e82ced655bbb6e2729226e485a7de9f2c2ccd9).\n* Implement `IntoRawFd` for `TcpSocket`\n  (https://github.com/tokio-rs/mio/commit/50548ed45d0b2c98f1f2e003e210d14195284ef4).\n\n## Deprecated\n\n* The `tcp`, `udp` and `uds` features, replaced by a new `net` feature.\n  (https://github.com/tokio-rs/mio/commit/a301ba520a8479b459c4acdcefa4a7c5eea818c7).\n* The `extra-docs` feature, now enabled by default.\n  (https://github.com/tokio-rs/mio/commit/25731e8688a2d91c5c700674a2c2d3841240ece1).\n* The `os-util` and `pipe` features, replaced by a new `os-ext` feature.\n  (https://github.com/tokio-rs/mio/commit/f5017fae8a3d3bb4b4cada25b01a2d76a406badc).\n\n## Fixes\n\n* Incorrect assumption of the layout of `std::net::SocketAddr`. Previously Mio\n  would assume that `SocketAddrV{4,6}` had the same layout as\n  `libc::sockaddr_in(6)`, however this is not guaranteed by the standard\n  library.\n  (https://github.com/tokio-rs/mio/commit/152e0751f0be1c9b0cbd6778645b76bcb0eba93c).\n* Also bumped the miow dependency to version 0.3.6 to solve the same problem as\n  above.\n\n# 0.7.5\n\n## Added\n\n* `TcpSocket::get_localaddr()` retrieves local address\n  (https://github.com/tokio-rs/mio/commit/b41a022b2242eef1969c70c8ba93e04c528dba47).\n* `TcpSocket::set_reuseport()` & `TcpSocket::get_reuseport()` configures and reads `SO_REUSEPORT`\n  (https://github.com/tokio-rs/mio/commit/183bbe409ab69cbf9db41d0263b41ec86202d9a0).\n* `unix:pipe()` a wrapper around pipe(2) sys call\n  (https://github.com/tokio-rs/mio/commit/2b7c0967a7362303946deb3d4ca2ae507af6c72d).\n* Add a check that a single Waker is active per Poll instance (only in debug mode)\n  (https://github.com/tokio-rs/mio/commit/f4874f28b32efcf4841691884c65a89734d96a56).\n* Added `Interest:remove()`\n  (https://github.com/tokio-rs/mio/commit/b8639c3d9ac07bb7e2e27685680c8a6510fa1357).\n\n# 0.7.4\n\n## Fixes\n\n* lost \"socket closed\" events on windows\n  (https://github.com/tokio-rs/mio/commit/50c299aca56c4a26e5ed20c283007239fbe6a7a7).\n\n## Added\n\n* `TcpSocket::set_linger()` configures SO_LINGER\n  (https://github.com/tokio-rs/mio/commit/3b4096565c1a879f651b8f8282ecdcbdbd5c92d3).\n\n# 0.7.3\n\n## Added\n\n* `TcpSocket` for configuring a TCP socket before connecting or listening\n  (https://github.com/tokio-rs/mio/commit/5b09e60d0f64419b989bda88c86a3147334a03b3).\n\n# 0.7.2\n\n## Added\n\n* Windows named pipe support.\n  (https://github.com/tokio-rs/mio/commit/52e8c2220e87696d20f13561402bcaabba4136ed).\n\n# 0.7.1\n\n## Reduced support for 32-bit Apple targets\n\nIn January 2020 Rust reduced its support for 32-bit Apple targets\n(https://blog.rust-lang.org/2020/01/03/reducing-support-for-32-bit-apple-targets.html).\nStarting with v0.7.1 Mio will do the same as we're no longer checking 32 bit\niOS/macOS on our CI.\n\n## Added\n\n* Support for illumos\n  (https://github.com/tokio-rs/mio/commit/976f2354d0e8fbbb64fba3bf017d7131f9c369a0).\n* Report `epoll(2)`'s `EPOLLERR` event as `Event::is_write_closed` if it's the\n  only event\n  (https://github.com/tokio-rs/mio/commit/0c77b5712d675eeb9bd43928b5dd7d22b2c7ac0c).\n* Optimised event::Iter::{size_hint, count}\n  (https://github.com/tokio-rs/mio/commit/40df934a11b05233a7796c4de19a4ee06bc4e03e).\n\n## Fixed\n\n* Work around Linux kernel < 2.6.37 bug on 32-bits making timeouts longer then\n  ~30 minutes effectively infinite\n  (https://github.com/tokio-rs/mio/commit/d555991f5ee81f6c1eec0fe481557d3d5b8d5ff4).\n* Set `SO_NOSIGPIPE` on all sockets (not just UDP) on for Apple targets\n  (https://github.com/tokio-rs/mio/commit/b8bbdcb0d3236f4c4acb257996d42a88dc9987d9).\n* Properly handle `POLL_ABORT` on Windows\n  (https://github.com/tokio-rs/mio/commit/a98da62b3ed1eeed1770aaca12f46d647e4fa749).\n* Improved error handling around failing `SIO_BASE_HANDLE` calls on Windows\n  (https://github.com/tokio-rs/mio/commit/b15fc18458a79ef8a51f73effa92548650f4e5dc).\n\n## Changed\n\n* On NetBSD we now use `accept4(2)`\n  (https://github.com/tokio-rs/mio/commit/4e306addc7144f2e02a7e8397c220b179a006a19).\n* The package uploaded to crates.io should be slightly smaller\n  (https://github.com/tokio-rs/mio/commit/eef8d3b9500bc0db957cd1ac68ee128ebc68351f).\n\n## Removed\n\n* Dependency on `lazy_static` on Windows\n  (https://github.com/tokio-rs/mio/commit/57e4c2a8ac153bc7bb87829e22cf0a21e3927e8a).\n\n# 0.7.0\n\nVersion 0.7 of Mio contains various major changes compared to version 0.6.\nOverall a large number of API changes have been made to reduce the complexity of\nthe implementation and remove overhead where possible.\n\nPlease refer to the [blog post about\n0.7-alpha.1](https://tokio.rs/blog/2019-12-mio-v0.7-alpha.1/) for additional\ninformation.\n\n## Added\n\n* `Interest` structure that replaces `Ready` in registering event sources.\n* `Registry` structure that separates the registering and polling functionality.\n* `Waker` structure that allows another thread to wake a thread polling `Poll`.\n* Unix Domain Socket (UDS) types: `UnixDatagram`, `UnixListener` and\n  `UnixStream`.\n\n## Removed\n\n* All code deprecated in 0.6 was removed in 0.7.\n* Support for Fuchsia was removed as the code was unmaintained.\n* Support for Bitrig was removed, rustc dropped support for it also.\n* `UnixReady` was merged into `Ready`.\n* Custom user-space readiness queue was removed, this includes the public\n  `Registration` and `SetReadiness` types.\n* `PollOpt` was removed and all registrations use edge-triggers. See the upgrade\n  guide on how to process event using edge-triggers.\n* The network types (types in the `net` module) now support only the same API as\n  found in the standard library, various methods on the types were removed.\n* `TcpStream` now supports vectored I/O.\n* `Poll::poll_interruptible` was removed. Instead `Poll::poll` will now return\n  an error if one occurs.\n* `From<usize>` is removed from `Token`, the internal field is still public, so\n  `Token(my_token)` can still be used.\n\n## Changed\n\n* Various documentation improvements were made around correct usage of `Poll`\n  and registered event sources. It is recommended to reread the documentation of\n  at least `event::Source` and `Poll`.\n* Mio now uses Rust 2018 and rustfmt for all code.\n* `Event` was changed to be a wrapper around the OS event. This means it can be\n  significantly larger on some OSs.\n* `Ready` was removed and replaced with various `is_*` methods on `Event`. For\n  example instead checking for readable readiness using\n  `Event::ready().is_readable()`, you would call `Event::is_readable()`.\n* `Ready::is_hup` was removed in favour of `Event::is_read_closed` and\n  `Event::is_write_closed`.\n* The Iterator implementation of `Events` was changed to return `&Event`.\n* `Evented` was renamed to `event::Source` and now takes mutable reference to\n  the source.\n* Minimum supported Rust version was increased to 1.39.\n* By default Mio now uses a shim implementation. To enable the full\n  implementation, that uses the OS, enable the `os-oll` feature. To enable the\n  network types use `tcp`, `udp` and/or `uds`. For more documentation on the\n  features see the `feature` module in the API documentation (requires the\n  `extra-docs` feature).\n* The entire Windows implementation was rewritten.\n* Various optimisation were made to reduce the number of system calls in\n  creating and using sockets, e.g. making use of `accept4(2)`.\n* The `fmt::Debug` implementation of `Events` is now actually useful as it\n  prints all `Event`s.\n\n# 0.6.23 (Dec 01, 2020)\n\n### Changed\n- **MSRV**: Increased the MSRV from 1.18.0 (Jun 8, 2017) to 1.31.0 (Dec 6,\n  2018)\n  (https://github.com/tokio-rs/mio/commit/4879e0d32ddfd98e762fc87240e594a3ad8fca30).\n\n### Fixed\n- Work around Linux kernel < 2.6.37 bug on 32-bits making timeouts longer then\n  ~30 minutes effectively infinite\n  (https://github.com/tokio-rs/mio/commit/e7cba59950e9c9fa6194e29b5b1e72029e3df455).\n- Update miow and net2 depedencies to get rid of invalid memory layout assumption\n  (https://github.com/tokio-rs/mio/commit/13f02ac0a86d7c0c0001e5ff8960a0b4340d075c).\n\n# 0.6.22 (May 01, 2020)\n\n### Added\n- Add support for illumos target (#1294)\n\n# 0.6.21 (November 27, 2019)\n\n### Fixed\n- remove `=` dependency on `cfg-if`.\n\n# 0.6.20 (November 21, 2019)\n\n### Fixed\n- Use default IOCP concurrency value (#1161).\n- setting FD_CLOEXEC in pipe (#1095).\n\n# 0.6.19 (May 28, 2018)\n\n### Fixed\n- Do not trigger HUP events on kqueue platforms (#958).\n\n# 0.6.18 (May 24, 2018)\n\n### Fixed\n- Fix compilation on kqueue platforms with 32bit C long (#948).\n\n# 0.6.17 (May 15, 2018)\n\n### Fixed\n- Don't report `RDHUP` as `HUP` (#939)\n- Fix lazycell related compilation issues.\n- Fix EPOLLPRI conflicting with READABLE\n- Abort process on ref count overflows\n\n### Added\n- Define PRI on all targets\n\n# 0.6.16 (September 5, 2018)\n\n* Add EPOLLPRI readiness to UnixReady on supported platforms (#867)\n* Reduce spurious awaken calls (#875)\n\n# 0.6.15 (July 3, 2018)\n\n* Implement `Evented` for containers (#840).\n* Fix android-aarch64 build (#850).\n\n# 0.6.14 (March 8, 2018)\n\n* Add `Poll::poll_interruptible` (#811)\n* Add `Ready::all` and `usize` conversions (#825)\n\n# 0.6.13 (February 5, 2018)\n\n* Fix build on DragonFlyBSD.\n* Add `TcpListener::from_std` that does not require the socket addr.\n* Deprecate `TcpListener::from_listener` in favor of from_std.\n\n# 0.6.12 (January 5, 2018)\n\n* Add `TcpStream::peek` function (#773).\n* Raise minimum Rust version to 1.18.0.\n* `Poll`: retry select() when interrupted by a signal (#742).\n* Deprecate `Events` index access (#713).\n* Add `Events::clear` (#782).\n* Add support for `lio_listio` (#780).\n\n# 0.6.11 (October 25, 2017)\n\n* Allow register to take empty interest (#640).\n* Fix bug with TCP errors on windows (#725).\n* Add TcpListener::accept_std (#733).\n* Update IoVec to fix soundness bug -- includes behavior change. (#747).\n* Minimum Rust version is now 1.14.0.\n* Fix Android x86_64 build.\n* Misc API & doc polish.\n\n# 0.6.10 (July 27, 2017)\n\n* Experimental support for Fuchsia\n* Add `only_v6` option for UDP sockets\n* Fix build on NetBSD\n* Minimum Rust version is now 1.13.0\n* Assignment operators (e.g. `|=`) are now implemented for `Ready`\n\n# 0.6.9 (June 7, 2017)\n\n* More socket options are exposed through the TCP types, brought in through the\n  `net2` crate.\n\n# 0.6.8 (May 26, 2017)\n\n* Support Fuchia\n* POSIX AIO support\n* Fix memory leak caused by Register::new2\n* Windows: fix handling failed TCP connections\n* Fix build on aarch64-linux-android\n* Fix usage of `O_CLOEXEC` with `SETFL`\n\n# 0.6.7 (April 27, 2017)\n\n* Ignore EPIPE coming out of `kevent`\n* Timer thread should exit when timer is dropped.\n\n# 0.6.6 (March 22, 2017)\n\n* Add send(), recv() and connect() to UDPSocket.\n* Fix bug in custom readiness queue\n* Move net types into `net` module\n\n# 0.6.5 (March 14, 2017)\n\n* Misc improvements to kqueue bindings\n* Add official support for iOS, Android, BSD\n* Reimplement custom readiness queue\n* `Poll` is now `Sync`\n* Officially deprecate non-core functionality (timers, channel, etc...)\n* `Registration` now implements `Evented`\n* Fix bug around error conditions with `connect` on windows.\n* Use iovec crate for scatter / gather operations\n* Only support readable and writable readiness on all platforms\n* Expose additional readiness in a platform specific capacity\n\n# 0.6.4 (January 24, 2017)\n\n* Fix compilation on musl\n* Add `TcpStream::from_stream` which converts a std TCP stream to Mio.\n\n# 0.6.3 (January 22, 2017)\n\n* Implement readv/writev for `TcpStream`, allowing vectored reads/writes to\n  work across platforms\n* Remove `nix` dependency\n* Implement `Display` and `Error` for some channel error types.\n* Optimize TCP on Windows through `SetFileCompletionNotificationModes`\n\n# 0.6.2 (December 18, 2016)\n\n* Allow registration of custom handles on Windows (like `EventedFd` on Unix)\n* Send only one byte for the awakener on Unix instead of four\n* Fix a bug in the timer implementation which caused an infinite loop\n\n# 0.6.1 (October 30, 2016)\n\n* Update dependency of `libc` to 0.2.16\n* Fix channel `dec` logic\n* Fix a timer bug around timeout cancellation\n* Don't allocate buffers for TCP reads on Windows\n* Touched up documentation in a few places\n* Fix an infinite looping timer thread on OSX\n* Fix compile on 32-bit OSX\n* Fix compile on FreeBSD\n\n# 0.6.0 (September 2, 2016)\n\n* Shift primary API towards `Poll`\n* `EventLoop` and types to `deprecated` mod. All contents of the\n  `deprecated` mod will be removed by Mio 1.0.\n* Increase minimum supported Rust version to 1.9.0\n* Deprecate unix domain socket implementation in favor of using a\n  version external to Mio. For example: https://github.com/alexcrichton/mio-uds.\n* Remove various types now included in `std`\n* Updated TCP & UDP APIs to match the versions in `std`\n* Enable implementing `Evented` for any type via `Registration`\n* Rename `IoEvent` -> `Event`\n* Access `Event` data via functions vs. public fields.\n* Expose `Events` as a public type that is passed into `Poll`\n* Use `std::time::Duration` for all APIs that require a time duration.\n* Polled events are now retrieved via `Events` type.\n* Implement `std::error::Error` for `TimerError`\n* Relax `Send` bound on notify messages.\n* Remove `Clone` impl for `Timeout` (future proof)\n* Remove `mio::prelude`\n* Remove `mio::util`\n* Remove dependency on bytes\n\n# 0.5.0 (December 3, 2015)\n\n* Windows support (#239)\n* NetBSD support (#306)\n* Android support (#295)\n* Don't re-export bytes types\n* Renamed `EventLoop::register_opt` to `EventLoop::register` (#257)\n* `EventLoopConfig` is now a builder instead of having public struct fields. It\n  is also no longer `Copy`. (#259)\n* `TcpSocket` is no longer exported in the public API (#262)\n* Integrate with net2. (#262)\n* `TcpListener` now returns the remote peer address from `accept` as well (#275)\n* The `UdpSocket::{send_to, recv_from}` methods are no longer generic over `Buf`\n  or `MutBuf` but instead take slices directly. The return types have also been\n  updated to return the number of bytes transferred. (#260)\n* Fix bug with kqueue where an error on registration prevented the\n  changelist from getting flushed (#276)\n* Support sending/receiving FDs over UNIX sockets (#291)\n* Mio's socket types are permanently associated with an EventLoop (#308)\n* Reduce unnecessary poll wakeups (#314)\n\n\n# 0.4.1 (July 21, 2015)\n\n* [BUGFIX] Fix notify channel concurrency bug (#216)\n\n# 0.4.0 (July 16, 2015)\n\n* [BUGFIX] EventLoop::register requests all events, not just readable.\n* [BUGFIX] Attempting to send a message to a shutdown event loop fails correctly.\n* [FEATURE] Expose TCP shutdown\n* [IMPROVEMENT] Coalesce readable & writable into `ready` event (#184)\n* [IMPROVEMENT] Rename TryRead & TryWrite function names to avoid conflict with std.\n* [IMPROVEMENT] Provide TCP and UDP types in Mio (path to windows #155)\n* [IMPROVEMENT] Use clock_ticks crate instead of time (path to windows #155)\n* [IMPROVEMENT] Move unix specific features into mio::unix module\n* [IMPROVEMENT] TcpListener sets SO_REUSEADDR by default\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.9443359375,
          "content": "[package]\nedition = \"2021\"\nrust-version = \"1.70\"\nname = \"mio\"\n# When releasing to crates.io:\n# - Update CHANGELOG.md.\n# - Create git tag\nversion       = \"1.0.3\"\nlicense       = \"MIT\"\nauthors       = [\n  \"Carl Lerche <me@carllerche.com>\",\n  \"Thomas de Zeeuw <thomasdezeeuw@gmail.com>\",\n  \"Tokio Contributors <team@tokio.rs>\",\n]\ndescription   = \"Lightweight non-blocking I/O.\"\nhomepage      = \"https://github.com/tokio-rs/mio\"\nrepository    = \"https://github.com/tokio-rs/mio\"\nreadme        = \"README.md\"\nkeywords      = [\"io\", \"async\", \"non-blocking\"]\ncategories    = [\"asynchronous\"]\ninclude       = [\n  \"Cargo.toml\",\n  \"LICENSE\",\n  \"README.md\",\n  \"CHANGELOG.md\",\n  \"src/**/*.rs\",\n  \"examples/**/*.rs\",\n]\n\n# For documentation of features see the `mio::features` module.\n[features]\n# By default Mio only provides a shell implementation.\ndefault = [\"log\"]\n\n# Enables the `Poll` and `Registry` types.\nos-poll = []\n# Enables additional OS specific extensions, e.g. Unix `pipe(2)`.\nos-ext = [\n  \"os-poll\",\n  \"windows-sys/Win32_System_Pipes\",\n  \"windows-sys/Win32_Security\",\n]\n# Enables `mio::net` module containing networking primitives.\nnet = []\n\n[dependencies]\nlog = { version = \"0.4.8\", optional = true }\n\n[target.'cfg(unix)'.dependencies]\nlibc = \"0.2.159\"\n\n[target.'cfg(target_os = \"hermit\")'.dependencies]\nlibc = \"0.2.159\"\n\n[target.'cfg(windows)'.dependencies.windows-sys]\nversion = \"0.52\"\nfeatures = [\n  \"Wdk_Foundation\",                   # Required for AFD.\n  \"Wdk_Storage_FileSystem\",           # Required for AFD.\n  \"Wdk_System_IO\",                    # Required for AFD.\n  \"Win32_Foundation\",                 # Basic types eg HANDLE\n  \"Win32_Networking_WinSock\",         # winsock2 types/functions\n  \"Win32_Storage_FileSystem\",         # Enables NtCreateFile\n  \"Win32_System_IO\",                  # IO types like OVERLAPPED etc\n  \"Win32_System_WindowsProgramming\",  # General future used for various types/funcs\n]\n\n[target.'cfg(target_os = \"wasi\")'.dependencies]\nwasi = \"0.11.0\"\nlibc = \"0.2.159\"\n\n[dev-dependencies]\nenv_logger = { version = \"0.9.3\", default-features = false }\nrand = \"0.8\"\n\n[package.metadata.docs.rs]\nall-features = true\nrustdoc-args = [\"--cfg\", \"docsrs\", \"--generate-link-to-definition\"]\ntargets = [\n  \"aarch64-apple-ios\",\n  \"aarch64-linux-android\",\n  \"wasm32-wasip1\",\n  \"x86_64-apple-darwin\",\n  \"x86_64-pc-windows-gnu\",\n  \"x86_64-pc-windows-msvc\",\n  \"x86_64-unknown-dragonfly\",\n  \"x86_64-unknown-freebsd\",\n  \"x86_64-unknown-illumos\",\n  \"x86_64-unknown-linux-gnu\",\n  \"x86_64-unknown-netbsd\",\n  \"x86_64-unknown-openbsd\",\n  \"x86_64-unknown-hermit\",\n]\n\n[package.metadata.playground]\nfeatures = [\"os-poll\", \"os-ext\", \"net\"]\n\n[[example]]\nname = \"tcp_server\"\nrequired-features = [\"os-poll\", \"net\"]\n\n[[example]]\nname = \"tcp_listenfd_server\"\nrequired-features = [\"os-poll\", \"net\"]\n\n[[example]]\nname = \"udp_server\"\nrequired-features = [\"os-poll\", \"net\"]\n\n[lints.rust]\nunexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)', 'cfg(mio_unsupported_force_waker_pipe)'] }\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "Copyright (c) 2014 Carl Lerche and other MIO contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.6513671875,
          "content": "# Targets available via Rustup that are supported.\nTARGETS ?= x86_64-pc-windows-msvc x86_64-unknown-freebsd x86_64-unknown-illumos x86_64-unknown-linux-gnu x86_64-unknown-linux-musl x86_64-unknown-netbsd x86_64-unknown-redox\n# Example value: `nightly-x86_64-apple-darwin`.\nRUSTUP_TOOLCHAIN ?= $(shell rustup show active-toolchain | cut -d' ' -f1)\n# Architecture target. Example value: `x86_64-apple-darwin`.\nRUSTUP_TARGET    ?= $(shell echo $(RUSTUP_TOOLCHAIN) | cut -d'-' -f2,3,4,5)\n\ntest:\n\tcargo test --all-features\n\n# Test everything for the current OS/architecture and check all targets in\n# $TARGETS.\ntest_all: check_all_targets\n\tcargo hack test --feature-powerset\n\tcargo hack test --feature-powerset --release\n\n# NOTE: Requires a nightly compiler.\n# NOTE: Keep `RUSTFLAGS` and `RUSTDOCFLAGS` in sync to ensure the doc tests\n# compile correctly.\ntest_sanitizer:\n\t@if [ -z $${SAN+x} ]; then echo \"Required '\\$$SAN' variable is not set\" 1>&2; exit 1; fi\n\tRUSTFLAGS=\"-Z sanitizer=$$SAN -Z sanitizer-memory-track-origins\" \\\n\tRUSTDOCFLAGS=\"-Z sanitizer=$$SAN -Z sanitizer-memory-track-origins\" \\\n\tcargo test -Z build-std --all-features --target $(RUSTUP_TARGET)\n\n# Check all targets using all features.\ncheck_all_targets: $(TARGETS)\n$(TARGETS):\n\tcargo hack check --target $@ --feature-powerset\n\n# Installs all required targets for `check_all_targets`.\ninstall_targets:\n\trustup target add $(TARGETS)\n\n# NOTE: when using this command you might want to change the `test` target to\n# only run a subset of the tests you're actively working on.\ndev:\n\tfind src/ tests/ Makefile Cargo.toml | entr -d -c $(MAKE) test\n\nclean:\n\tcargo clean\n\n.PHONY: test test_all check_all_targets $(TARGETS) dev clean\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.1103515625,
          "content": "# Mio – Metal I/O\n\nMio is a fast, low-level I/O library for Rust focusing on non-blocking APIs and\nevent notification for building high performance I/O apps with as little\noverhead as possible over the OS abstractions.\n\n[![Crates.io][crates-badge]][crates-url]\n[![MIT licensed][mit-badge]][mit-url]\n[![Build Status][actions-badge]][actions-url]\n[![Build Status][cirrus-badge]][cirrus-url]\n\n[crates-badge]: https://img.shields.io/crates/v/mio.svg\n[crates-url]: https://crates.io/crates/mio\n[mit-badge]: https://img.shields.io/badge/license-MIT-blue.svg\n[mit-url]: LICENSE\n[actions-badge]: https://github.com/tokio-rs/mio/workflows/CI/badge.svg\n[actions-url]: https://github.com/tokio-rs/mio/actions?query=workflow%3ACI+branch%3Amaster\n[cirrus-badge]: https://api.cirrus-ci.com/github/tokio-rs/mio.svg\n[cirrus-url]: https://cirrus-ci.com/github/tokio-rs/mio\n\n**API documentation**\n\n* [v1](https://docs.rs/mio/^1)\n* [v0.8](https://docs.rs/mio/^0.8)\n\nThis is a low level library, if you are looking for something easier to get\nstarted with, see [Tokio](https://tokio.rs).\n\n## Usage\n\nTo use `mio`, first add this to your `Cargo.toml`:\n\n```toml\n[dependencies]\nmio = \"1\"\n```\n\nNext we can start using Mio. The following is quick introduction using\n`TcpListener` and `TcpStream`. Note that `features = [\"os-poll\", \"net\"]` must be\nspecified for this example.\n\n```rust\nuse std::error::Error;\n\nuse mio::net::{TcpListener, TcpStream};\nuse mio::{Events, Interest, Poll, Token};\n\n// Some tokens to allow us to identify which event is for which socket.\nconst SERVER: Token = Token(0);\nconst CLIENT: Token = Token(1);\n\nfn main() -> Result<(), Box<dyn Error>> {\n    // Create a poll instance.\n    let mut poll = Poll::new()?;\n    // Create storage for events.\n    let mut events = Events::with_capacity(128);\n\n    // Setup the server socket.\n    let addr = \"127.0.0.1:13265\".parse()?;\n    let mut server = TcpListener::bind(addr)?;\n    // Start listening for incoming connections.\n    poll.registry()\n        .register(&mut server, SERVER, Interest::READABLE)?;\n\n    // Setup the client socket.\n    let mut client = TcpStream::connect(addr)?;\n    // Register the socket.\n    poll.registry()\n        .register(&mut client, CLIENT, Interest::READABLE | Interest::WRITABLE)?;\n\n    // Start an event loop.\n    loop {\n        // Poll Mio for events, blocking until we get an event.\n        poll.poll(&mut events, None)?;\n\n        // Process each event.\n        for event in events.iter() {\n            // We can use the token we previously provided to `register` to\n            // determine for which socket the event is.\n            match event.token() {\n                SERVER => {\n                    // If this is an event for the server, it means a connection\n                    // is ready to be accepted.\n                    //\n                    // Accept the connection and drop it immediately. This will\n                    // close the socket and notify the client of the EOF.\n                    let connection = server.accept();\n                    drop(connection);\n                }\n                CLIENT => {\n                    if event.is_writable() {\n                        // We can (likely) write to the socket without blocking.\n                    }\n\n                    if event.is_readable() {\n                        // We can (likely) read from the socket without blocking.\n                    }\n\n                    // Since the server just shuts down the connection, let's\n                    // just exit from our event loop.\n                    return Ok(());\n                }\n                // We don't expect any events with tokens other than those we provided.\n                _ => unreachable!(),\n            }\n        }\n    }\n}\n```\n\n## Features\n\n* Non-blocking TCP, UDP, UDS\n* I/O event queue backed by epoll, kqueue, and IOCP\n* Zero allocations at runtime\n* Platform specific extensions\n\n## Non-goals\n\nThe following are specifically omitted from Mio and are left to the user\nor higher-level libraries.\n\n* File operations\n* Thread pools / multi-threaded event loop\n* Timers\n\n## Platforms\n\nCurrently supported platforms:\n\n* Android (API level 21)\n* DragonFly BSD\n* FreeBSD\n* Linux\n* NetBSD\n* OpenBSD\n* Windows\n* iOS\n* macOS\n\nMio can handle interfacing with each of the event systems of the aforementioned\nplatforms. The details of their implementation are further discussed in the\n`Poll` type of the API documentation (see above).\n\nMio generally supports the same versions of the above mentioned platforms as\nRust the language (rustc) does, unless otherwise noted.\n\nThe Windows implementation for polling sockets is using the [wepoll] strategy.\nThis uses the Windows AFD system to access socket readiness events.\n\n[wepoll]: https://github.com/piscisaureus/wepoll\n\n### Unsupported\n\n* Wine, see [issue #1444]\n\n[issue #1444]: https://github.com/tokio-rs/mio/issues/1444\n\n## MSRV Policy\n\nThe MSRV (Minimum Supported Rust Version) is fixed for a given minor (1.x)\nversion. However it can be increased when bumping minor versions, i.e. going\nfrom 1.0 to 1.1 allows us to increase the MSRV. Users unable to increase their\nRust version can use an older minor version instead. Below is a list of Mio versions\nand their MSRV:\n\n * v0.8: Rust 1.46.\n * v1.0: Rust 1.70.\n\nNote however that Mio also has dependencies, which might have different MSRV\npolicies. We try to stick to the above policy when updating dependencies, but\nthis is not always possible.\n\n## Unsupported flags\n\nMio uses different implementations to support the same functionality depending\non the platform. Mio generally uses the \"best\" implementation possible, where\n\"best\" usually means most efficient for Mio's use case. However this means that\nthe implementation is often specific to a limited number of platforms, meaning\nwe often have multiple implementations for the same functionality. In some cases\nit might be required to not use the \"best\" implementation, but another\nimplementation Mio supports (on other platforms). **Mio does not officially\nsupport secondary implementations on platforms**, however we do have various cfg\nflags to force another implementation for these situations.\n\nCurrent flags:\n * `mio_unsupported_force_poll_poll`, uses an implementation based on `poll(2)`\n   for `mio::Poll`.\n * `mio_unsupported_force_waker_pipe`, uses an implementation based on `pipe(2)`\n   for `mio::Waker`.\n\n**Again, Mio does not officially supports this**. Furthermore these flags may\ndisappear in the future.\n\n## Community\n\nA group of Mio users hang out on [Discord], this can be a good place to go for\nquestions. It's also possible to open a [new issue on GitHub] to ask questions,\nreport bugs or suggest new features.\n\n[Discord]: https://discord.gg/tokio\n[new issue on GitHub]: https://github.com/tokio-rs/mio/issues/new\n\n## Contributing\n\nInterested in getting involved? We would love to help you! For simple\nbug fixes, just submit a PR with the fix and we can discuss the fix\ndirectly in the PR. If the fix is more complex, start with an issue.\n\nIf you want to propose an API change, create an issue to start a\ndiscussion with the community. Also, feel free to talk with us in Discord.\n\nFinally, be kind. We support the [Rust Code of Conduct](https://www.rust-lang.org/policies/code-of-conduct).\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}