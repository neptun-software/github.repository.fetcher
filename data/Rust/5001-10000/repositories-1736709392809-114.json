{
  "metadata": {
    "timestamp": 1736709392809,
    "page": 114,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-lang/futures-rs",
      "stars": 5480,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1025390625,
          "content": "[*.rs]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.060546875,
          "content": "# Cargo fmt all code\ndd019055ef5bf4309f15db934407e202caf52e14\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0615234375,
          "content": "target\n**/*.rs.bk\nCargo.lock\n_site\n.sass-cache\n.idea\n.DS_Store\n"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0.044921875,
          "content": "use_small_heuristics = \"Max\"\nedition = \"2018\"\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 39.341796875,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nReleases may yanked if there is a security bug, a soundness bug, or a regression.\n\n<!--\nNote: In this file, do not use the hard wrap in the middle of a sentence for compatibility with GitHub comment style markdown rendering.\n-->\n\n# 0.3.31 - 2024-10-05\n\n* Fix use after free of task in `FuturesUnordered` when dropped future panics (#2886)\n* Fix soundness bug in `task::waker_ref` (#2830)\n  This is a breaking change but allowed because it is soundness bug fix.\n* Fix bugs in `AsyncBufRead::read_line` and `AsyncBufReadExt::lines` (#2884)\n* Fix parsing issue in `select!`/`select_biased!` (#2832)\n  This is technically a breaking change as it will now reject a very odd undocumented syntax that was previously accidentally accepted.\n* Work around issue due to upstream `Waker::will_wake` change (#2865)\n* Add `stream::Iter::{get_ref,get_mut,into_inner}` (#2875)\n* Add `future::AlwaysReady` (#2825)\n* Relax trait bound on non-constructor methods of `io::{BufReader,BufWriter}` (#2848)\n\n# 0.3.30 - 2023-12-24\n\n**Note:** This release of futures-util has been yanked due to a bug fixed in 0.3.31 and a compile failure with futures-task 0.3.31 and later.\n\n* Add `{BiLock,SplitStream,SplitSink,ReadHalf,WriteHalf}::is_pair_of` (#2797)\n* Fix panic in `FuturesUnordered::clear` (#2809)\n* Fix panic in `AsyncBufReadExt::fill_buf` (#2801, #2812)\n* Improve support for targets without atomic CAS (#2811)\n* Remove build scripts (#2811)\n\n# 0.3.29 - 2023-10-26\n\n**Note:** This release of futures-util has been yanked due to a bug fixed in 0.3.31 and a compile failure with futures-task 0.3.31 and later.\n\n* Add `TryStreamExt::try_ready_chunks` (#2757)\n* Add `TryStreamExt::{try_all,try_any}` (#2783)\n* Add `UnboundedSender::{len,is_empty}` (#2750)\n* Fix `Sync` impl of `FuturesUnordered` (#2788)\n* Fix infinite loop caused by invalid UTF-8 bytes (#2785)\n* Fix build error with -Z minimal-versions (#2761)\n\n# 0.3.28 - 2023-03-30\n\n**Note:** This release of futures-util has been yanked due to a bug fixed in 0.3.31 and a compile failure with futures-task 0.3.31 and later.\n\n* Update to syn 2. This raises MSRV of utility crates to 1.56. (#2730, #2733)\n* Fix bug in `FlattenUnordered` (#2726, #2728)\n\n# 0.3.27 - 2023-03-11\n\n**Note:** This release of futures-util has been yanked due to a bug fixed in 0.3.31 and a compile failure with futures-task 0.3.31 and later.\n\n* Add `TryFlattenUnordered` (#2577, #2590, #2606, #2607)\n* Add `AbortHandle::is_aborted` (#2710)\n* Add `AbortRegistration::handle` (#2712)\n* Make `BiLock` strict-provenance compatible (#2716)\n\n# 0.3.26 - 2023-01-30\n\n**Note:** This release of futures-util has been yanked due to a bug fixed in 0.3.31 and a compile failure with futures-task 0.3.31 and later.\n\n* Add `Either::as_pin_mut` and `Either::as_pin_ref` (#2691)\n* Add `Shared::ptr_eq` and `Shared::ptr_hash` (#2691)\n* Implement `FusedStream` for `Buffered` (#2676)\n* Implement `FusedStream` for all streams in `ReadyChunks` (#2693)\n* Fix bug in `FuturesOrdered::push_front` (#2664)\n* Remove `Fut::Output: Clone` bounds from some `Shared` methods (#2662)\n* Remove `T: Debug` bounds from `Debug` implementations of `mpsc` and `oneshot` types (#2666, #2667)\n\n# 0.3.25 - 2022-10-20\n\n**Note:** This release of futures-util has been yanked due to a bug fixed in 0.3.31 and a compile failure with futures-task 0.3.31 and later.\n\n* Fix soundness issue in `join!` and `try_join!` macros (#2649)\n* Implement `Clone` for `sink::Drain` (#2650)\n\n# 0.3.24 - 2022-08-29\n\n**Note:** This release of futures-util has been yanked due to a bug fixed in 0.3.31 and a compile failure with futures-task 0.3.31 and later.\n\n* Fix incorrect termination of `select_with_strategy` streams (#2635)\n\n# 0.3.23 - 2022-08-14\n\n**Note:** This release of futures-util has been yanked due to a bug fixed in 0.3.31 and a compile failure with futures-task 0.3.31 and later.\n\n* Work around MSRV increase due to a cargo bug.\n\n# 0.3.22 - 2022-08-14\n\n**Note:** This release of futures-util has been yanked due to a bug fixed in 0.3.31 and a compile failure with futures-task 0.3.31 and later.\n\n* Fix `Sync` impl of `BiLockGuard` (#2570)\n* Fix partial iteration in `FuturesUnordered` (#2574)\n* Fix false detection of inner panics in `Shared` (#2576)\n* Add `Mutex::lock_owned` and `Mutex::try_lock_owned` (#2571)\n* Add `io::copy_buf_abortable` (#2507)\n* Remove `Unpin` bound from `TryStreamExt::into_async_read` (#2599)\n* Make `run_until_stalled` handle self-waking futures (#2593)\n* Use `FuturesOrdered` in `try_join_all` (#2556)\n* Fix orderings in `LocalPool` waker (#2608)\n* Fix `stream::Chunk` adapters size hints (#2611)\n* Add `push_front` and `push_back` to `FuturesOrdered` (#2591)\n* Deprecate `FuturesOrdered::push` in favor of `FuturesOrdered::push_back` (#2591)\n* Performance improvements (#2583, #2626)\n* Documentation improvements (#2579, #2604, #2613)\n\n# 0.3.21 - 2022-02-06\n\n**Note:** This release of futures-util has been yanked due to a bug fixed in 0.3.31 and a compile failure with futures-task 0.3.31 and later.\n\n* Fix potential data race in `FlattenUnordered` that introduced in 0.3.20 (#2566)\n\n# 0.3.20 - 2022-02-06\n\n**Note:** This release has been yanked due to a bug fixed in 0.3.21.\n\n* Fix stacked borrows violations when `-Zmiri-tag-raw-pointers` is enabled. This raises MSRV of `futures-task` to 1.45. (#2548, #2550)\n* Change `FuturesUnordered` to respect yielding from future (#2551)\n* Add `StreamExt::{flatten_unordered, flat_map_unordered}` (#2083)\n\n# 0.3.19 - 2021-12-18\n\n**Note:** This release of futures-util has been yanked due to a bug fixed in 0.3.31 and a compile failure with futures-task 0.3.31 and later.\n\n* Remove unstable `read-initializer` feature (#2534)\n* Fix panic in `FuturesUnordered` (#2535)\n* Fix compatibility issue with `FuturesUnordered` and tokio's cooperative scheduling (#2527)\n* Add `StreamExt::count` (#2495)\n\n# 0.3.18 - 2021-11-23\n\n**Note:** This release has been yanked. See #2529 for details.\n\n* Fix unusable `Sink` implementation on `stream::Scan` (#2499)\n* Make `task::noop_waker_ref` available without `std` feature (#2505)\n* Add async `LineWriter` (#2477)\n* Remove dependency on `proc-macro-hack`. This raises MSRV of utility crates to 1.45. (#2520)\n\n# 0.3.17 - 2021-08-30\n\n**Note:** This release of futures-util has been yanked due to a bug fixed in 0.3.31 and a compile failure with futures-task 0.3.31 and later.\n\n* Use `FuturesOrdered` in `join_all` (#2412)\n* Add `{future, stream}::poll_immediate` (#2452)\n* Add `stream_select!` macro (#2262)\n* Implement `Default` for `OptionFuture` (#2471)\n* Add `Peekable::{peek_mut, poll_peek_mut}` (#2488)\n* Add `BufReader::seek_relative` (#2489)\n\n# 0.3.16 - 2021-07-23\n\n**Note:** This release of futures-util has been yanked due to a bug fixed in 0.3.31 and a compile failure with futures-task 0.3.31 and later.\n\n* Add `TryStreamExt::try_chunks` (#2438)\n* Add `StreamExt::{all, any}` (#2460)\n* Add `stream::select_with_strategy` (#2450)\n* Update to new `io_slice_advance` interface (#2454)\n\n# 0.3.15 - 2021-05-11\n\n**Note:** This release of futures-util has been yanked due to a bug fixed in 0.3.31 and a compile failure with futures-task 0.3.31 and later.\n\n* Use `#[proc_macro]` at Rust 1.45+ to fix an issue where proc macros don't work with rust-analyzer (#2407)\n* Support targets that do not have atomic CAS on stable Rust (#2400)\n* futures-test: Add async `#[test]` function attribute (#2409)\n* Add `stream::abortable` (#2410)\n* Add `FuturesUnordered::clear` (#2415)\n* Implement `IntoIterator` for `FuturesUnordered` (#2423)\n* Implement `Send` and `Sync` for `FuturesUnordered` iterators (#2416)\n* Make `FuturesUnordered::iter_pin_ref` public (#2423)\n* Add `SelectAll::clear` (#2430)\n* Add `SelectAll::{iter, iter_mut}` (#2428)\n* Implement `IntoIterator` for `SelectAll` (#2428)\n* Implement `Clone` for `WeakShared` (#2396)\n\n# 0.3.14 - 2021-04-10\n\n**Note:** This release of futures-util has been yanked due to a bug fixed in 0.3.31 and a compile failure with futures-task 0.3.31 and later.\n\n* Add `future::SelectAll::into_inner` (#2363)\n* Allow calling `UnboundedReceiver::try_next` after `None` (#2369)\n* Reexport non-Ext traits from the root of `futures_util` (#2377)\n* Add `AsyncSeekExt::stream_position` (#2380)\n* Add `stream::Peekable::{next_if, next_if_eq}` (#2379)\n\n# 0.3.13 - 2021-02-23\n\n**Note:** This release of futures-util has been yanked due to a bug fixed in 0.3.31 and a compile failure with futures-task 0.3.31 and later.\n\n* Mitigated starvation issues in `FuturesUnordered` (#2333)\n* Fixed race with dropping `mpsc::Receiver` (#2304)\n* Added `Shared::{strong_count, weak_count}` (#2346)\n* Added `no_std` support for `task::noop_waker_ref` (#2332)\n* Implemented `Stream::size_hint` for `Either` (#2325)\n\n# 0.3.12 - 2021-01-15\n\n**Note:** This release of futures-util has been yanked due to a bug fixed in 0.3.31 and a compile failure with futures-task 0.3.31 and later.\n\n* Fixed `Unpin` impl of `future::{MaybeDone, TryMaybeDone}` where trait bounds were accidentally added in 0.3.9. (#2317)\n\n# 0.3.11 - 2021-01-14\n\n**Note:** This release of futures-util has been yanked due to a bug fixed in 0.3.31 and a compile failure with futures-task 0.3.31 and later.\n\n* Fixed heap buffer overflow in `AsyncReadExt::{read_to_end, read_to_string}` (#2314)\n\n# 0.3.10 - 2021-01-13\n\n**Note:** This release has been yanked. See #2310 for details.\n\n* Fixed type-inference in `sink::unfold` by specifying more of its types (breaking change -- see #2311)\n\n# 0.3.9 - 2021-01-08\n\n**Note:** This release has been yanked. See #2310 for details.\n\n* Significantly improved compile time when `async-await` crate feature is disabled (#2273)\n* Added `stream::repeat_with` (#2279)\n* Added `StreamExt::unzip` (#2263)\n* Added `sink::unfold` (#2268)\n* Added `SinkExt::feed` (#2155)\n* Implemented `FusedFuture` for `oneshot::Receiver` (#2300)\n* Implemented `Clone` for `sink::With` (#2290)\n* Re-exported `MapOkOrElse`, `MapInto`, `OkInto`, `TryFlatten`, `WriteAllVectored` (#2275)\n\n# 0.3.8 - 2020-11-04\n\n**Note:** This release has been yanked. See #2310 for details.\n\n* Switched proc-macros to use native `#[proc_macro]` at Rust 1.45+ (#2243)\n* Added `WeakShared` (#2169)\n* Added `TryStreamExt::try_buffered` (#2245)\n* Added `StreamExt::cycle` (#2252)\n* Implemented `Clone` for `stream::{Empty, Pending, Repeat, Iter}` (#2248, #2252)\n* Fixed panic in some `TryStreamExt` combinators (#2250)\n\n# 0.3.7 - 2020-10-23\n\n**Note:** This release has been yanked. See #2310 for details.\n\n* Fixed unsoundness in `MappedMutexGuard` (#2240)\n* Re-exported `TakeUntil` (#2235)\n* futures-test: Prevent double panic in `panic_waker` (#2236)\n\n# 0.3.6 - 2020-10-06\n\n**Note:** This release has been yanked. See #2310 for details.\n\n* Fixed UB due to missing 'static on `task::waker` (#2206)\n* Added `AsyncBufReadExt::fill_buf` (#2225)\n* Added `TryStreamExt::try_take_while` (#2212)\n* Added `is_connected_to` method to `mpsc::{Sender, UnboundedSender}` (#2179)\n* Added `is_connected_to` method to `oneshot::Sender` (#2158)\n* Implement `FusedStream` for `FuturesOrdered` (#2205)\n* Fixed documentation links\n* Improved documentation\n* futures-test: Added `track_closed` method to `AsyncWriteTestExt` and `SinkTestExt` (#2159)\n* futures-test: Implemented more traits for `InterleavePending` (#2208)\n* futures-test: Implemented more traits for `AssertUnmoved` (#2208)\n\n# 0.3.5 - 2020-05-08\n\n**Note:** This release has been yanked. See #2310 for details.\n\n* Added `StreamExt::flat_map`.\n* Added `StreamExt::ready_chunks`.\n* Added `*_unpin` methods to `SinkExt`.\n* Added a `cancellation()` future to `oneshot::Sender`.\n* Added `reunite` method to `ReadHalf` and `WriteHalf`.\n* Added `Extend` implementations for `Futures(Un)Ordered` and `SelectAll`.\n* Added support for reexporting the `join!` and `select!` macros.\n* Added `no_std` support for the `pending!` and `poll!` macros.\n* Added `Send` and `Sync` support for `AssertUnmoved`.\n* Fixed a bug where `Shared` wasn't relinquishing control to the executor.\n* Removed the `Send` bound on the output of `RemoteHandle`.\n* Relaxed bounds on `FuturesUnordered`.\n* Reorganized internal tests to work under different `--feature`s.\n* Reorganized the bounds on `StreamExt::forward`.\n* Removed and replaced a large amount of internal `unsafe`.\n\n# 0.3.4 - 2020-02-06\n\n**Note:** This release has been yanked. See #2310 for details.\n\n* Fixed missing `Drop` for `UnboundedReceiver` (#2064)\n\n# 0.3.3 - 2020-02-04\n\n**Note:** This release has been yanked. See #2310 for details.\n\n* Fixed compatibility issue with pinned facade (#2062)\n\n# 0.3.2 - 2020-02-03\n\n**Note:** This release has been yanked. See #2310 for details.\n\n* Improved buffering performance of `SplitSink` (#1969)\n* Added `select_biased!` macro (#1976)\n* Added `hash_receiver` method to mpsc channel (#1962)\n* Added `stream::try_unfold` (#1977)\n* Fixed bug with zero-size buffers in vectored IO (#1998)\n* `AtomicWaker::new()` is now `const fn` (#2007)\n* Fixed bug between threadpool and user park/unparking (#2010)\n* Added `stream::Peekable::peek` (#2021)\n* Added `StreamExt::scan` (#2044)\n* Added impl of `AsyncRead`/`Write` for `BufReader`/`Writer` (#2033)\n* Added impl of `Spawn` and `LocalSpawn` for `Arc<impl Spawn` and `Rc<impl Spawn>` (#2039)\n* Fixed `Sync` issues with `FuturesUnordered` (#2054)\n* Added `into_inner` method for `future::Ready` (#2055)\n* Added `MappedMutexGuard` API (#2056)\n* Mitigated starvation issues in `FuturesUnordered` (#2049)\n* Added `TryFutureExt::map_ok_or_else` (#2058)\n\n# 0.3.1 - 2019-11-07\n\n**Note:** This release has been yanked. See #2310 for details.\n\n* Fix signature of `SpawnExt` and `LocalSpawnExt` trait (breaking change -- see #1959)\n\n# 0.3.0 - 2019-11-05\n\n**Note:** This release has been yanked. See #2310 for details.\n\n* Stable release along with stable async/await!\n* Added async/await to default features (#1953)\n* Changed `Spawn` trait and `FuturesUnordered::push` to take `&self` (#1950)\n* Moved `Spawn` and `FutureObj` out of `futures-core` and into `futures-task` (#1925)\n* Changed case convention for feature names (#1937)\n* Added `executor` feature (#1949)\n* Moved `copy_into`/`copy_buf_into` (#1948)\n* Changed `SinkExt::send_all` to accept a `TryStream` (#1946)\n* Removed `ThreadPool::run` (#1944)\n* Changed to use our own definition of `io::Cursor` (#1943)\n* Removed `BufReader::poll_seek_relative` (#1938)\n* Changed `skip` to take a `usize` rather than `u64` (#1931)\n* Removed `Stream` impl for `VecDeque` (#1930)\n* Renamed `Peekable::peek` to `poll_peek` (#1928)\n* Added immutable iterators for `FuturesUnordered` (#1922)\n* Made `ThreadPool` optional (#1910)\n* Renamed `oneshot::Sender::poll_cancel` to `poll_canceled` (#1908)\n* Added some missing `Clone` implementations\n* Documentation fixes\n\n# 0.3.0-alpha.19 - 2019-09-25\n\n* Stabilized the `async-await` feature (#1816)\n* Made `async-await` feature no longer require `std` feature (#1815)\n* Updated `proc-macro2`, `syn`, and `quote` to 1.0 (#1798)\n* Exposed unstable `BiLock` (#1827)\n* Renamed \"nightly\" feature to \"unstable\" (#1823)\n* Moved to our own `io::{Empty, Repeat, Sink}` (#1829)\n* Made `AsyncRead::initializer` API unstable (#1845)\n* Moved the `Never` type from `futures-core` to `futures-util` (#1836)\n* Fixed use-after-free on panic in `ArcWake::wake_by_ref` (#1797)\n* Added `AsyncReadExt::chain` (#1810)\n* Added `Stream::size_hint` (#1853)\n* Added some missing `FusedFuture` (#1868) and `FusedStream` implementations (#1831)\n* Added a `From` impl for `Mutex` (#1839)\n* Added `Mutex::{get_mut, into_inner}` (#1839)\n* Re-exported `TryConcat` and `TryFilter` (#1814)\n* Lifted `Unpin` bound and implemented `AsyncBufRead` for `io::Take` (#1821)\n* Lifted `Unpin` bounds on `get_pin_mut` (#1820)\n* Changed `SendAll` to flush the `Sink` when the source `Stream` is pending (#1877)\n* Set default threadpool size to one if `num_cpus::get()` returns zero (#1835)\n* Removed dependency on `rand` by using our own PRNG (#1837)\n* Removed `futures-core` dependency from `futures-sink` (#1832)\n\n# 0.3.0-alpha.18 - 2019-08-09\n\n* Rewrote `join!` and `try_join!` as procedural macros to allow passing expressions (#1783)\n* Banned manual implementation of `TryFuture` and `TryStream` for forward compatibility. See #1776 for more details. (#1777)\n* Changed `AsyncReadExt::read_to_end` to return the total number of bytes read (#1721)\n* Changed `ArcWake::into_waker` to a free function `waker` (#1676)\n* Supported trailing commas in macros (#1733)\n* Removed futures-channel dependency from futures-executor (#1735)\n* Supported `channel::oneshot` in no_std environment (#1749)\n* Added `Future` bounds to `FusedFuture` (#1779)\n* Added `Stream` bounds to `FusedStream` (#1779)\n* Changed `StreamExt::boxed` to return `BoxStream` (#1780)\n* Added `StreamExt::boxed_local` (#1780)\n* Added `AsyncReadExt::read_to_string` (#1721)\n* Implemented `AsyncWrite` for `IntoAsyncRead` (#1734)\n* Added get_ref, get_mut and into_inner methods to `Compat01As03` and `Compat01As03Sink` (#1705)\n* Added `ThreadPool::{spawn_ok, spawn_obj_ok}` (#1750)\n* Added `TryStreamExt::try_flatten` (#1731)\n* Added `FutureExt::now_or_never` (#1747)\n\n# 0.3.0-alpha.17 - 2019-07-03\n\n* Removed `try_ready!` macro in favor of `ready!(..)?`. (#1602)\n* Removed `io::Window::{set_start, set_end}` in favor of `io::Window::set`. (#1667)\n* Re-exported `pin_utils::pin_mut!` macro. (#1686)\n* Made all extension traits unnamed in the prelude. (#1662)\n* Allowed `?Sized` types in some methods and structs. (#1647)\n* Added `Send + Sync` bounds to `ArcWake` trait to fix unsoundness. (#1654)\n* Changed `AsyncReadExt::copy_into` to consume `self`. (#1674)\n* Renamed `future::empty` to `pending`. (#1689)\n* Added `#[must_use]` to some combinators. (#1600)\n* Added `AsyncWriteExt::{write, write_vectored}`. (#1612)\n* Added `AsyncReadExt::read_vectored`. (#1612)\n* Added `TryFutureExt::try_poll_unpin`. (#1613)\n* Added `TryFutureExt::try_flatten_stream`. (#1618)\n* Added `io::BufWriter`. (#1608)\n* Added `Sender::same_receiver` and `UnboundedSender::same_receiver`. (#1617)\n* Added `future::try_select`. (#1622)\n* Added `TryFutureExt::{inspect_ok, inspect_err}`. (#1630)\n* Added `Compat::get_ref`. (#1648)\n* Added `io::Window::set`. (#1667)\n* Added `AsyncWriteExt::into_sink`. (#1675)\n* Added `AsyncBufReadExt::copy_buf_into`. (#1674)\n* Added `stream::pending`. (#1689)\n* Implemented `std::error::Error` for `SpawnError`. (#1604)\n* Implemented `Stream` for `FlattenSink`. (#1651)\n* Implemented `Sink` for `TryFlattenStream`. (#1651)\n* Implemented `AsyncRead`, `AsyncWrite`, `AsyncSeek`, `AsyncBufRead`, `FusedFuture` and  `FusedStream` for Either. (#1695)\n* Replaced empty enums with `Never` type, an alias for `core::convert::Infallible`.\n* Removed the `futures-channel` dependency from `futures-sink` and make `futures-sink`\n  an optional dependency of `futures-channel`.\n* Renamed `Sink::SinkError` to `Sink::Error`.\n* Made a number of dependencies of `futures-util` optional.\n\n# 0.3.0-alpha.16 - 2019-05-10\n\n* Updated to new nightly `async_await`.\n* Changed `AsyncRead::poll_vectored_read` and `AsyncWrite::poll_vectored_write` to use\n  stabilized `std::io::{IoSlice, IoSliceMut}` instead of `iovec::IoVec`, and renamed to\n  `AsyncRead::poll_read_vectored` and `AsyncWrite::poll_write_vectored`.\n* Added `LocalBoxFuture` and `FutureExt::boxed_local`.\n* Added `TryStreamExt::{try_filter, inspect_ok, inspect_err}`.\n* Added `try_future::select_ok`.\n* Added `AsyncBufReadExt::{read_line, lines}`.\n* Added `io::BufReader`.\n\n# 0.3.0-alpha.15 - 2019-04-26\n\n* Updated to stabilized `futures_api`.\n* Removed `StreamObj`, cautioned against usage of `FutureObj`.\n* Changed `StreamExt::select` to a function.\n* Added `AsyncBufRead` and `AsyncSeek` traits.\n* Expanded trait impls to include more pinned pointers and ?Sized types.\n* Added `future::Fuse::terminated` constructor.\n* Added `never_error` combinator.\n* Added `StreamExt::enumerate`.\n* Re-added `TryStreamExt::{and_then, or_else}`.\n* Added functions to partially progress a local pool.\n* Changed to use our own `Either` type rather than the one from the `either` crate.\n\n# 0.3.0-alpha.14 - 2019-04-15\n\n* Updated to new nightly `futures_api`.\n* Changed `Forward` combinator to drop sink after completion, and allow `!Unpin` `Sink`s.\n* Added 0.1 <-> 0.3 compatibility shim for `Sink`s.\n* Changed `Sink::Item` to a generic parameter `Sink<Item>`, allowing `Sink`s to accept\n  multiple different types, including types containing references.\n* Changed `AsyncRead` and `AsyncWrite` to take `Pin<&mut Self>` rather than `&mut self`.\n* Added support for `no_std` + `alloc` use.\n* Changed `join` and `try_join` combinators to functions.\n* Fixed propagation of `cfg-target-has-atomic` feature.\n\n# 0.3.0-alpha.13 - 2019-02-20\n\n* Updated to new nightly with stabilization candidate API.\n* Removed `LocalWaker`.\n* Added `#[must_use]` to `Stream` and `Sink` traits.\n* Enabled using `!Unpin` futures in `JoinAll`.\n* Added the `try_join_all` combinator.\n* Stopped closing a whole channel upon closing of one sender.\n* Removed `TokioDefaultSpawner` and `tokio-compat`.\n* Moved intra-crate dependencies to exact versions.\n\n# 0.3.0-alpha.12 - 2019-01-14\n\n* Updated to new nightly with a modification to `Pin::set`.\n* Expose `AssertUnmoved` and `PendingOnce`.\n* Prevent double-panic in `AssertUnmoved`.\n* Support nested invocations of the `select!` macro.\n* Implement `Default` for `Mutex` and `SelectAll`.\n\n# 0.3.0-alpha.11 - 2018-12-27\n\n* Updated to newly stabilized versions of the `pin` and `arbitrary_self_types` features.\n* Re-added `select_all` for streams.\n* Added `TryStream::into_async_read` for converting from a stream of bytes into\n  an `AsyncRead`.\n* Added `try_poll_next_unpin`.\n* Rewrote `select!` as a procedural macro for better error messages\n* Exposed `join_all` from the facade\n\n# 0.3.0-alpha.10 - 2018-11-27\n\n* Revamped `select!` macro\n* Added `select_next_some` method for getting only the `Some` elements of a stream from `select!`\n* Added `futures::lock::Mutex` for async-aware synchronization.\n* Fixed bug converting `Pin<Box<_>>` to `StreamObj`\n* Improved performance of futures::channel\n* Improved performance and documentation of `Shared`\n* Add `new` method and more `derive`s to the `Compat` type\n* Enabled spawning on a borrowed threadpool\n* Re-added `join_all`\n* Added `try_concat`\n\n# 0.3.0-alpha.9 - 2018-10-18\n\n* Fixed in response to new nightly handling of 2018 edition + `#![no_std]`\n\n# 0.3.0-alpha.8 - 2018-10-16\n\n* Fixed stack overflow in 0.1 compatibility layer\n* Added AsyncRead / AsyncWrite compatibility layer\n* Added Spawn -> 0.1 Executor compatibility\n* Made 0.1 futures usable on 0.3 executors without an additional global `Task`, accomplished by wrapping 0.1 futures in an 0.1 `Spawn` when using them as 0.3 futures.\n* Cleanups and improvements to the `AtomicWaker` implementation.\n\n# 0.3.0-alpha.7 - 2018-10-01\n\n* Update to new nightly which removes `Spawn` from `task::Context` and replaces `Context` with `LocalWaker`.\n* Add `Spawn` and `LocalSpawn` traits and `FutureObj` and `LocalFutureObj` types to `futures-core`.\n\n# 0.3.0-alpha.6 - 2018-09-10\n\n* Replace usage of `crate` visibility with `pub(crate)` now that `crate` visibility is no longer included in the 2018 edition\n* Remove newly-stabilized \"edition\" feature in Cargo.toml files\n\n# 0.3.0-alpha.5 - 2018-09-03\n\n* Revert usage of cargo crate renaming feature\n\n# 0.3.0-alpha.4 - 2018-09-02\n\n**Note: This release does not work, use `0.3.0-alpha.5` instead**\n\n* `future::ok` and `future:err` to create result wrapping futures (similar to `future::ready`)\n* `futures-test` crate with testing utilities\n* `StreamExt::boxed` combinator\n* Unsoundness fix for `FuturesUnordered`\n* `StreamObj` (similar to `FutureObj`)\n* Code examples for compatibility layer functions\n* Use cargo create renaming feature to import `futures@0.1` for compatibility layer\n* Import pinning APIs from `core::pin`\n* Run Clippy in CI only when it is available\n\n# 0.3.0-alpha.3 - 2018-08-15\n\n* Compatibility with newest nightly\n* Futures 0.1 compatibility layer including Tokio compatibility\n* Added `spawn!` and `spawn_with_handle!` macros\n* Added `SpawnExt` methods `spawn` and `spawn_with_handle`\n* Extracted pin macros into `pin_utils` crate\n* Added `FutureExt` combinators `boxed` and `unit_error`\n* Remove prelude from all doc examples (The prelude is still recommended for usage in playground examples. However, for doc examples we determined that fully expanded imports are more helpful)\n* Improvements to `select!` and `join!` macros\n* Added `try_join!` macro\n* Added `StreamExt` combinator methods `try_join` and `for_each_concurrent`\n* Added `TryStreamExt` combinator methods `into_stream`, `try_filter_map`, `try_skip_while`, `try_for_each_concurrent` and `try_buffer_unordered`\n* Fix stream termination bug in `StreamExt::buffered` and `StreamExt::buffer_unordered`\n* Added docs for `StreamExt::buffered`, `StreamExt::buffer_unordered`\n* Added `task::local_waker_ref_from_nonlocal` and `task::local_waker_ref` functions\n* CI improvements\n* Doc improvements to `StreamExt::select`\n\n# 0.3.0-alpha.2 - 2018-07-30\n\n* The changelog is back!\n* Compatibility with futures API in latest nightly\n* Code examples and doc improvements\n  * IO: Methods of traits `AsyncReadExt`, `AsyncWriteExt`\n  * Future:\n    * Methods of trait `TryFutureExt`\n    * Free functions `empty`, `lazy`, `maybe_done`, `poll_fn` and `ready`\n    * Type `FutureOption`\n    * Macros `join!`, `select!` and `pending!`\n  * Stream: Methods of trait `TryStreamExt`\n* Added `TryStreamExt` combinators `map_ok`, `map_err`, `err_into`, `try_next` and `try_for_each`\n* Added `Drain`, a sink that will discard all items given to it. Can be created using the `drain` function\n* Bugfix for the `write_all` combinator\n* `AsyncWrite` impl for `Cursor<T: AsMut<[u8]>>`\n* `FuturesUnordered` optimization: Since the context stores a `&LocalWaker` reference, it was possible to avoid cloning the `Arc` of the waker\n* Futures-rs now uses Clippy\n* We now use in-band lifetimes\n* The `join!` and `select!` macros are now exposed by the `futures` crate\n* The project logo was added to the `README.md`\n* `sink::MapErr::get_pinned_mut` is now called `get_pin_mut`\n* We now use the unstable `use_extern_macros` feature for macro reexports\n* CI improvements: Named CI jobs, tests are now run on macOS and Linux, the docs are generated and Clippy needs to pass\n* `#[deny(warnings)]` was removed from all crates and is now only enforced in the CI\n* We now have a naming convention for type parameters: `Fut` future, `F` function, `St` stream, `Si` sink, `S` sink & stream, `R` reader, `W` writer, `T` value, `E` error\n* \"Task\" is now defined as our term for \"lightweight thread\". The code of the executors and `FuturesUnordered` was refactored to align with this definition.\n\n# 0.3.0-alpha.1 - 2018-07-19\n\n* Major changes: See [the announcement](https://rust-lang-nursery.github.io/futures-rs/blog/2018/07/19/futures-0.3.0-alpha.1.html) on our new blog for details. The changes are too numerous to be covered in this changelog because nearly every line of code was modified.\n\n# 0.1.17 - 2017-10-31\n\n* Add a `close` method on `sink::Wait`\n* Undeprecate `stream::iter` as `stream::iter_result`\n* Improve performance of wait-related methods\n* Tweak buffered sinks with a 0 capacity to forward directly to the underlying\n  sink.\n* Add `FromIterator` implementation for `FuturesOrdered` and `FuturesUnordered`.\n\n# 0.1.16 - 2017-09-15\n\n* A `prelude` module has been added to glob import from and pick up a whole\n  bunch of useful types\n* `sync::mpsc::Sender::poll_ready` has been added as an API\n* `sync::mpsc::Sender::try_send` has been added as an API\n\n# 0.1.15 - 2017-08-24\n\n* Improve performance of `BiLock` methods\n* Implement `Clone` for `FutureResult`\n* Forward `Stream` trait through `SinkMapErr`\n* Add `stream::futures_ordered` next to `futures_unordered`\n* Reimplement `Stream::buffered` on top of `stream::futures_ordered` (much more\n  efficient at scale).\n* Add a `with_notify` function for abstractions which previously required\n  `UnparkEvent`.\n* Add `get_ref`/`get_mut`/`into_inner` functions for stream take/skip methods\n* Add a `Clone` implementation for `SharedItem` and `SharedError`\n* Add a `mpsc::spawn` function to spawn a `Stream` into an `Executor`\n* Add a `reunite` function for `BiLock` and the split stream/sink types to\n  rejoin two halves and reclaim the original item.\n* Add `stream::poll_fn` to behave similarly to `future::poll_fn`\n* Add `Sink::with_flat_map` like `Iterator::flat_map`\n* Bump the minimum Rust version to 1.13.0\n* Expose `AtomicTask` in the public API for managing synchronization around task\n  notifications.\n* Unify the `Canceled` type of the `sync` and `unsync` modules.\n* Deprecate the `boxed` methods. These methods have caused more confusion than\n  they've solved historically, so it's recommended to use a local extension\n  trait or a local helper instead of the trait-based methods.\n* Deprecate the `Stream::merge` method as it's less ergonomic than `select`.\n* Add `oneshot::Sender::is_canceled` to test if a oneshot is canceled off a\n  task.\n* Deprecates `UnboundedSender::send` in favor of a method named `unbounded_send`\n  to avoid a conflict with `Sink::send`.\n* Deprecate the `stream::iter` function in favor of an `stream::iter_ok` adaptor\n  to avoid the need to deal with `Result` manually.\n* Add an `inspect` function to the `Future` and `Stream` traits along the lines\n  of `Iterator::inspect`\n\n# 0.1.14 - 2017-05-30\n\nThis is a relatively large release of the `futures` crate, although much of it\nis from reworking internals rather than new APIs. The banner feature of this\nrelease is that the `futures::{task, executor}` modules are now available in\n`no_std` contexts! A large refactoring of the task system was performed in\nPR #436 to accommodate custom memory allocation schemes and otherwise remove\nall dependencies on `std` for the task module. More details about this change\ncan be found on the PR itself.\n\nOther API additions in this release are:\n\n* A `FuturesUnordered::push` method was added and the `FuturesUnordered` type\n  itself was completely rewritten to efficiently track a large number of\n  futures.\n* A `Task::will_notify_current` method was added with a slightly different\n  implementation than `Task::is_current` but with stronger guarantees and\n  documentation wording about its purpose.\n* Many combinators now have `get_ref`, `get_mut`, and `into_inner` methods for\n  accessing internal futures and state.\n* A `Stream::concat2` method was added which should be considered the \"fixed\"\n  version of `concat`, this one doesn't panic on empty streams.\n* An `Executor` trait has been added to represent abstracting over the concept\n  of spawning a new task. Crates which only need the ability to spawn a future\n  can now be generic over `Executor` rather than requiring a\n  `tokio_core::reactor::Handle`.\n\nAs with all 0.1.x releases this PR is intended to be 100% backwards compatible.\nAll code that previously compiled should continue to do so with these changes.\nAs with other changes, though, there are also some updates to be aware of:\n\n* The `task::park` function has been renamed to `task::current`.\n* The `Task::unpark` function has been renamed to `Task::notify`, and in general\n  terminology around \"unpark\" has shifted to terminology around \"notify\"\n* The `Unpark` trait has been deprecated in favor of the `Notify` trait\n  mentioned above.\n* The `UnparkEvent` structure has been deprecated. It currently should perform\n  the same as it used to, but it's planned that in a future 0.1.x release the\n  performance will regress for crates that have not transitioned away. The\n  primary primitive to replace this is the addition of a `push` function on the\n  `FuturesUnordered` type. If this does not help implement your use case though,\n  please let us know!\n* The `Task::is_current` method is now deprecated, and you likely want to use\n  `Task::will_notify_current` instead, but let us know if this doesn't suffice!\n\n# 0.1.13 - 2017-04-05\n\n* Add forwarding sink/stream impls for `stream::FromErr` and `sink::SinkFromErr`\n* Add `PartialEq` and `Eq` to `mpsc::SendError`\n* Reimplement `Shared` with `spawn` instead of `UnparkEvent`\n\n# 0.1.12 - 2017-04-03\n\n* Add `Stream::from_err` and `Sink::from_err`\n* Allow `SendError` to be `Clone` when possible\n\n# 0.1.11 - 2017-03-13\n\nThe major highlight of this release is the addition of a new \"default\" method on\nthe `Sink` trait, `Sink::close`. This method is used to indicate to a sink that\nno new values will ever need to get pushed into it. This can be used to\nimplement graceful shutdown of protocols and otherwise simply indicates to a\nsink that it can start freeing up resources.\n\nCurrently this method is **not** a default method to preserve backwards\ncompatibility, but it's intended to become a default method in the 0.2 series of\nthe `futures` crate. It's highly recommended to audit implementations of `Sink`\nto implement the `close` method as is fit.\n\nOther changes in this release are:\n\n* A new select combinator, `Future::select2` was added for a heterogeneous\n  select.\n* A `Shared::peek` method was added to check to see if it's done.\n* `Sink::map_err` was implemented\n* The `log` dependency was removed\n* Implementations of the `Debug` trait are now generally available.\n* The `stream::IterStream` type was renamed to `stream::Iter` (with a reexport\n  for the old name).\n* Add a `Sink::wait` method which returns an adapter to use an arbitrary `Sink`\n  synchronously.\n* A `Stream::concat` method was added to concatenate a sequence of lists.\n* The `oneshot::Sender::complete` method was renamed to `send` and now returns a\n  `Result` indicating successful transmission of a message or not. Note that the\n  `complete` method still exists, it's just deprecated.\n\n# 0.1.10 - 2017-01-30\n\n* Add a new `unsync` module which mirrors `sync` to the extent that it can but\n  is intended to not perform cross-thread synchronization (only usable within\n  one thread).\n* Tweak `Shared` to work when handles may not get poll'd again.\n\n# 0.1.9 - 2017-01-18\n\n* Fix `Send/Sync` of a few types\n* Add `future::tail_fn` for more easily writing loops\n* Export SharedItem/SharedError\n* Remove an unused type parameter in `from_err`\n\n# 0.1.8 - 2017-01-11\n\n* Fix some race conditions in the `Shared` implementation\n* Add `Stream::take_while`\n* Fix an unwrap in `stream::futures_unordered`\n* Generalize `Stream::for_each`\n* Add `Stream::chain`\n* Add `stream::repeat`\n* Relax `&mut self` to `&self` in `UnboundedSender::send`\n\n# 0.1.7 - 2016-12-18\n\n* Add a `Future::shared` method for creating a future that can be shared\n  amongst threads by cloning the future itself. All derivative futures\n  will resolve to the same value once the original future has been\n  resolved.\n* Add a `FutureFrom` trait for future-based conversion\n* Fix a wakeup bug in `Receiver::close`\n* Add `future::poll_fn` for quickly adapting a `Poll`-based function to\n  a future.\n* Add an `Either` enum with two branches to easily create one future\n  type based on two different futures created on two branches of control\n  flow.\n* Remove the `'static` bound on `Unpark`\n* Optimize `send_all` and `forward` to send as many items as possible\n  before calling `poll_complete`.\n* Unify the return types of the `ok`, `err`, and `result` future to\n  assist returning different varieties in different branches of a function.\n* Add `CpuFuture::forget` to allow the computation to continue running\n  after a drop.\n* Add a `stream::futures_unordered` combinator to turn a list of futures\n  into a stream representing their order of completion.\n\n# 0.1.6 - 2016-11-22\n\n* Fix `Clone` bound on the type parameter on `UnboundedSender`\n\n# 0.1.5 - 2016-11-22\n\n* Fix `#![no_std]` support\n\n# 0.1.4 - 2016-11-22\n\nThis is quite a large release relative to the previous point releases! As\nwith all 0.1 releases, this release should be fully compatible with the 0.1.3\nrelease. If any incompatibilities are discovered please file an issue!\n\nThe largest changes in 0.1.4 are the addition of a `Sink` trait coupled with a\nreorganization of this crate. Note that all old locations for types/traits\nstill exist, they're just deprecated and tagged with `#[doc(hidden)]`.\n\nThe new `Sink` trait is used to represent types which can periodically over\ntime accept items, but may take some time to fully process the item before\nanother can be accepted. Essentially, a sink is the opposite of a stream. This\ntrait will then be used in the tokio-core crate to implement simple framing by\nmodeling I/O streams as both a stream and a sink of frames.\n\nThe organization of this crate is to now have three primary submodules,\n`future`, `stream`, and `sink`. The traits as well as all combinator types are\ndefined in these submodules. The traits and types like `Async` and `Poll` are\nthen reexported at the top of the crate for convenient usage. It should be a\nrelatively rare occasion that the modules themselves are reached into.\n\nFinally, the 0.1.4 release comes with a new module, `sync`, in the futures\ncrate.  This is intended to be the home of a suite of futures-aware\nsynchronization primitives. Currently this is inhabited with a `oneshot` module\n(the old `oneshot` function), a `mpsc` module for a new multi-producer\nsingle-consumer channel, and a `BiLock` type which represents sharing ownership\nof one value between two consumers. This module may expand over time with more\ntypes like a mutex, rwlock, spsc channel, etc.\n\nNotable deprecations in the 0.1.4 release that will be deleted in an eventual\n0.2 release:\n\n* The `TaskRc` type is now deprecated in favor of `BiLock` or otherwise `Arc`\n  sharing.\n* All future combinators should be accessed through the `future` module, not\n  the top-level of the crate.\n* The `Oneshot` and `Complete` types are now replaced with the `sync::oneshot`\n  module.\n* Some old names like `collect` are deprecated in favor of more appropriately\n  named versions like `join_all`\n* The `finished` constructor is now `ok`.\n* The `failed` constructor is now `err`.\n* The `done` constructor is now `result`.\n\nAs always, please report bugs to https://github.com/rust-lang-nursery/futures-rs and\nwe always love feedback! If you've got situations we don't cover, combinators\nyou'd like to see, or slow code, please let us know!\n\nFull changelog:\n\n* Improve scalability of `buffer_unordered` combinator\n* Fix a memory ordering bug in oneshot\n* Add a new trait, `Sink`\n* Reorganize the crate into three primary modules\n* Add a new `sync` module for synchronization primitives\n* Add a `BiLock` sync primitive for two-way sharing\n* Deprecate `TaskRc`\n* Rename `collect` to `join_all`\n* Use a small vec in `Events` for improved clone performance\n* Add `Stream::select` for selecting items from two streams like `merge` but\n  requiring the same types.\n* Add `stream::unfold` constructor\n* Add a `sync::mpsc` module with a futures-aware multi-producer single-consumer\n  queue. Both bounded (with backpressure) and unbounded (no backpressure)\n  variants are provided.\n* Renamed `failed`, `finished`, and `done` combinators to `err`, `ok`, and\n  `result`.\n* Add `Stream::forward` to send all items to a sink, like `Sink::send_all`\n* Add `Stream::split` for streams which are both sinks and streams to have\n  separate ownership of the stream/sink halves\n* Improve `join_all` with concurrency\n\n# 0.1.3 - 2016-10-24\n\n* Rewrite `oneshot` for efficiency and removing allocations on send/recv\n* Errors are passed through in `Stream::take` and `Stream::skip`\n* Add a `select_ok` combinator to pick the first of a list that succeeds\n* Remove the unnecessary `SelectAllNext` typedef\n* Add `Stream::chunks` for receiving chunks of data\n* Rewrite `stream::channel` for efficiency, correctness, and removing\n  allocations\n* Remove `Send + 'static` bounds on the `stream::Empty` type\n\n# 0.1.2 - 2016-10-04\n\n* Fixed a bug in drop of `FutureSender`\n* Expose the channel `SendError` type\n* Add `Future::into_stream` to convert to a single-element stream\n* Add `Future::flatten_to_stream` to convert a future of a stream to a stream\n* impl Debug for SendError\n* Add stream::once for a one element stream\n* Accept IntoIterator in stream::iter\n* Add `Stream::catch_unwind`\n\n# 0.1.1 - 2016-09-09\n\nInitial release!\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.8798828125,
          "content": "[workspace]\nmembers = [\n  \"futures\",\n  \"futures-core\",\n  \"futures-channel\",\n  \"futures-executor\",\n  \"futures-io\",\n  \"futures-macro\",\n  \"futures-sink\",\n  \"futures-task\",\n  \"futures-util\",\n  \"futures-test\",\n\n  \"futures/tests/macro-tests\",\n  \"futures/tests/macro-reexport\",\n  \"futures/tests/no-std\",\n\n  \"examples/functional\",\n  \"examples/imperative\",\n]\n\n[workspace.lints.rust]\nmissing_debug_implementations = \"warn\"\nrust_2018_idioms = \"warn\"\nsingle_use_lifetimes = \"warn\"\nunreachable_pub = \"warn\"\nunexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(futures_sanitizer)'] }\n# unsafe_op_in_unsafe_fn = \"warn\" # Set at crate-level instead since https://github.com/rust-lang/rust/pull/100081 is not available on MSRV\n[workspace.lints.clippy]\nincompatible_msrv = { level = \"allow\", priority = 1 } # https://github.com/rust-lang/rust-clippy/issues/12273, https://github.com/rust-lang/rust-clippy/issues/12257\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.619140625,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright (c) 2016 Alex Crichton\nCopyright (c) 2017 The Tokio Authors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.068359375,
          "content": "Copyright (c) 2016 Alex Crichton\nCopyright (c) 2017 The Tokio Authors\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.8076171875,
          "content": "<p align=\"center\">\n  <img alt=\"futures-rs\" src=\"https://raw.githubusercontent.com/rust-lang/futures-rs/gh-pages/assets/images/futures-rs-logo.svg?sanitize=true\" width=\"400\">\n</p>\n\n<p align=\"center\">\n  Zero-cost asynchronous programming in Rust\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/rust-lang/futures-rs/actions?query=branch%3Amaster\">\n    <img alt=\"Build Status\" src=\"https://img.shields.io/github/actions/workflow/status/rust-lang/futures-rs/ci.yml?branch=master\">\n  </a>\n\n  <a href=\"https://crates.io/crates/futures\">\n    <img alt=\"crates.io\" src=\"https://img.shields.io/crates/v/futures.svg\">\n  </a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://docs.rs/futures\">\n    Documentation\n  </a> | <a href=\"https://rust-lang.github.io/futures-rs/\">\n    Website\n  </a>\n</p>\n\n`futures-rs` is a library providing the foundations for asynchronous programming in Rust.\nIt includes key trait definitions like `Stream`, as well as utilities like `join!`,\n`select!`, and various futures combinator methods which enable expressive asynchronous\ncontrol flow.\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[dependencies]\nfutures = \"0.3\"\n```\n\nThe current `futures` requires Rust 1.63 or later.\n\n### Feature `std`\n\nFutures-rs works without the standard library, such as in bare metal environments.\nHowever, it has a significantly reduced API surface. To use futures-rs in\na `#[no_std]` environment, use:\n\n```toml\n[dependencies]\nfutures = { version = \"0.3\", default-features = false }\n```\n\n## License\n\nLicensed under either of [Apache License, Version 2.0](LICENSE-APACHE) or\n[MIT license](LICENSE-MIT) at your option.\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "futures-channel",
          "type": "tree",
          "content": null
        },
        {
          "name": "futures-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "futures-executor",
          "type": "tree",
          "content": null
        },
        {
          "name": "futures-io",
          "type": "tree",
          "content": null
        },
        {
          "name": "futures-macro",
          "type": "tree",
          "content": null
        },
        {
          "name": "futures-sink",
          "type": "tree",
          "content": null
        },
        {
          "name": "futures-task",
          "type": "tree",
          "content": null
        },
        {
          "name": "futures-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "futures-util",
          "type": "tree",
          "content": null
        },
        {
          "name": "futures",
          "type": "tree",
          "content": null
        },
        {
          "name": "triagebot.toml",
          "type": "blob",
          "size": 0.0390625,
          "content": "[assign]\nwarn_non_default_branch = true\n"
        }
      ]
    }
  ]
}