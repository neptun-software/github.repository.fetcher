{
  "metadata": {
    "timestamp": 1736709350258,
    "page": 36,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rustwasm/wasm-bindgen",
      "stars": 7958,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0263671875,
          "content": "*.webidl linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1904296875,
          "content": ".idea\n/target/\n**/*.rs.bk\nCargo.lock\nnode_modules\npackage-lock.json\nnpm-shrinkwrap.json\npnpm-lock.yaml\nyarn.lock\n/publish\n/publish.exe\n.vscode\nwebdriver.json\nbenchmarks/pkg\n/crates/msrv/*/target\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 102.9873046875,
          "content": "# `wasm-bindgen` Change Log\n--------------------------------------------------------------------------------\n\n## Unreleased\n\n### Added\n\n* Add attributes to overwrite return (``unchecked_return_type`) and parameter types (`unchecked_param_type`), descriptions (`return_description` and `param_description`) as well as parameter names (`js_name`) for exported functions and methods. See the guide for more details.\n  [#4394](https://github.com/rustwasm/wasm-bindgen/pull/4394)\n\n* Add a `copy_to_uninit()` method to all `TypedArray`s. It takes `&mut [MaybeUninit<T>]` and returns `&mut [T]`.\n  [#4340](https://github.com/rustwasm/wasm-bindgen/pull/4340)\n\n* Add test coverage support for Node.js.\n  [#4348](https://github.com/rustwasm/wasm-bindgen/pull/4348)\n\n* Support importing memory and using `wasm_bindgen::module()` in Node.js.\n  [#4349](https://github.com/rustwasm/wasm-bindgen/pull/4349)\n\n* Add `--list`, `--ignored`, `--exact` and `--nocapture` to `wasm-bindgen-test-runner`, analogous to `cargo test`.\n  [#4356](https://github.com/rustwasm/wasm-bindgen/pull/4356)\n\n* Add bindings to `Date.to_locale_time_string_with_options`.\n  [#4384](https://github.com/rustwasm/wasm-bindgen/pull/4384)\n\n* `#[wasm_bindgen]` now correctly applies `#[cfg(...)]`s in `struct`s.\n  [#4351](https://github.com/rustwasm/wasm-bindgen/pull/4351)\n\n\n### Changed\n\n* Optional parameters are now typed as `T | undefined | null` to reflect the actual JS behavior.\n  [#4188](https://github.com/rustwasm/wasm-bindgen/pull/4188)\n\n* Adding `getter`, `setter`, and `constructor` methods to enums now results in a compiler error. This was previously erroneously allowed and resulted in invalid JS code gen.\n  [#4278](https://github.com/rustwasm/wasm-bindgen/pull/4278)\n\n* Handle stuck and failed WebDriver processes when re-trying to start them.\n  [#4340](https://github.com/rustwasm/wasm-bindgen/pull/4340)\n\n* Align test output closer to native `cargo test`.\n  [#4358](https://github.com/rustwasm/wasm-bindgen/pull/4358)\n\n* Error if URL in `<WEBDRIVER>_REMOTE` can't be parsed instead of just ignoring it.\n  [#4362](https://github.com/rustwasm/wasm-bindgen/pull/4362)\n\n* Remove `WASM_BINDGEN_THREADS_MAX_MEMORY` and `WASM_BINDGEN_THREADS_STACK_SIZE`. The maximum memory size can be set via `-Clink-arg=--max-memory=<size>`. The stack size of a thread can be set when initializing the thread via the `default` function.\n  [#4363](https://github.com/rustwasm/wasm-bindgen/pull/4363)\n\n* `console.*()` calls in tests are now always intercepted by default. To show them use `--nocapture`. When shown they are always printed in-place instead of after test results, analogous to `cargo test`.\n  [#4356](https://github.com/rustwasm/wasm-bindgen/pull/4356)\n\n### Fixed\n\n- Fixed using [JavaScript keyword](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords) as identifiers not being handled correctly.\n  [#4329](https://github.com/rustwasm/wasm-bindgen/pull/4329)\n\n  - Using JS keywords as `struct` and `enum` names will now error at compile time, instead of causing invalid JS code gen.\n  - Using JS keywords that are not valid to call or access properties on will now error at compile time, instead of causing invalid JS code gen if used as:\n    1. The first part of a `js_namespace` on imports.\n    2. The name of an imported type or constant if the type or constant does not have a `js_namespace` or `module` attribute.\n    3. The name of an imported function if the function is not a method and does not have a `js_namespace` or `module` attribute.\n  - Using JS keywords on imports in places other than the above will no longer cause the keywords to be escaped as `_{keyword}`.\n\n* Fixed passing large arrays into Rust failing because of internal memory allocations invalidating the memory buffer.\n  [#4353](https://github.com/rustwasm/wasm-bindgen/pull/4353)\n\n* Pass along an `ignore` attribute to `unsupported` tests.\n  [#4360](https://github.com/rustwasm/wasm-bindgen/pull/4360)\n\n* Use OS provided temporary directory for tests instead of Cargo's `target` directory.\n  [#4361](https://github.com/rustwasm/wasm-bindgen/pull/4361)\n\n* Error if URL in `<WEBDRIVER>_REMOTE` can't be parsed.\n  [#4362](https://github.com/rustwasm/wasm-bindgen/pull/4362)\n\n* Internal functions are now removed instead of invalidly imported if they are unused.\n  [#4366](https://github.com/rustwasm/wasm-bindgen/pull/4366)\n\n* Fixed `no_std` support for all APIs in `web-sys`.\n  [#4378](https://github.com/rustwasm/wasm-bindgen/pull/4378)\n\n* Prevent generating duplicate exports for closure conversions.\n  [#4380](https://github.com/rustwasm/wasm-bindgen/pull/4380)\n\n--------------------------------------------------------------------------------\n\n## [0.2.99](https://github.com/rustwasm/wasm-bindgen/compare/0.2.98...0.2.99)\n\nReleased 2024-12-07\n\n### Fixed\n\n- Mark `wasm-bindgen` v0.2.98 only compatible with `wasm-bindgen-cli` of the same version.\n  [#4331](https://github.com/rustwasm/wasm-bindgen/pull/4331)\n\n--------------------------------------------------------------------------------\n\n## [0.2.98](https://github.com/rustwasm/wasm-bindgen/compare/0.2.97...0.2.98)\n\nReleased 2024-12-07\n\n### Added\n\n* Add support for compiling with `atomics` for Node.js.\n  [#4318](https://github.com/rustwasm/wasm-bindgen/pull/4318)\n\n* Add `WASM_BINDGEN_TEST_DRIVER_TIMEOUT` environment variable to control the timeout to start and connect to the test driver.\n  [#4320](https://github.com/rustwasm/wasm-bindgen/pull/4320)\n\n* Add support for number slices of type `MaybeUninit<T>`.\n  [#4316](https://github.com/rustwasm/wasm-bindgen/pull/4316)\n\n### Changed\n\n* Remove `once_cell/critical-section` requirement for `no_std` with atomics.\n  [#4322](https://github.com/rustwasm/wasm-bindgen/pull/4322)\n\n* `static FOO: Option<T>` now returns `None` if undeclared in JS instead of throwing an error in JS.\n  [#4319](https://github.com/rustwasm/wasm-bindgen/pull/4319)\n\n### Fixed\n\n* Fix macro-hygiene for calls to `std::thread_local!`.\n  [#4315](https://github.com/rustwasm/wasm-bindgen/pull/4315)\n\n* Fix feature resolver version 1 compatibility.\n  [#4327](https://github.com/rustwasm/wasm-bindgen/pull/4327)\n\n--------------------------------------------------------------------------------\n\n## [0.2.97](https://github.com/rustwasm/wasm-bindgen/compare/0.2.96...0.2.97)\n\nReleased 2024-11-30\n\n### Fixed\n\n* Fixed `js-sys` and `wasm-bindgen-futures` relying on internal paths of `wasm-bindgen` that are not crate feature additive.\n  [#4305](https://github.com/rustwasm/wasm-bindgen/pull/4305)\n\n--------------------------------------------------------------------------------\n\n## [0.2.96](https://github.com/rustwasm/wasm-bindgen/compare/0.2.95...0.2.96)\n\nReleased 2024-11-29\n\n### Added\n\n* Added support for the [`HTMLOrSVGElement`](https://html.spec.whatwg.org/#htmlorsvgelement) `mixin`, which is used for all interfaces deriving from `Element`.\n  [#4143](https://github.com/rustwasm/wasm-bindgen/pull/4143)\n\n* Added bindings for [MathMLElement](https://www.w3.org/TR/MathML3).\n  [#4143](https://github.com/rustwasm/wasm-bindgen/pull/4143)\n\n* Added JSDoc type annotations to C-style enums.\n  [#4192](https://github.com/rustwasm/wasm-bindgen/pull/4192)\n\n* Added support for C-style enums with negative discriminants.\n  [#4204](https://github.com/rustwasm/wasm-bindgen/pull/4204)\n\n* Added bindings for `MediaStreamTrack.getCapabilities`.\n  [#4236](https://github.com/rustwasm/wasm-bindgen/pull/4236)\n\n* Added WASM ABI support for `u128` and `i128`\n  [#4222](https://github.com/rustwasm/wasm-bindgen/pull/4222)\n\n* Added support for the `wasm32v1-none` target.\n  [#4277](https://github.com/rustwasm/wasm-bindgen/pull/4277)\n\n* Added support for `no_std` to `js-sys`, `web-sys`, `wasm-bindgen-futures` and `wasm-bindgen-test`.\n  [#4277](https://github.com/rustwasm/wasm-bindgen/pull/4277)\n\n* Added support for `no_std` to `link_to!`, `static_string` (via `thread_local_v2`) and `throw`.\n  [#4277](https://github.com/rustwasm/wasm-bindgen/pull/4277)\n\n* Added environment variables to configure tests: `WASM_BINDGEN_USE_BROWSER`, `WASM_BINDGEN_USE_DEDICATED_WORKER`, `WASM_BINDGEN_USE_SHARED_WORKER` `WASM_BINDGEN_USE_SERVICE_WORKER`, `WASM_BINDGEN_USE_DENO` and `WASM_BINDGEN_USE_NODE_EXPERIMENTAL`. The use of `wasm_bindgen_test_configure!` will overwrite any environment variable.\n  [#4295](https://github.com/rustwasm/wasm-bindgen/pull/4295)\n\n### Changed\n\n* String enums now generate private TypeScript types but only if used.\n  [#4174](https://github.com/rustwasm/wasm-bindgen/pull/4174)\n\n* Remove unnecessary JSDoc type annotations from generated `.d.ts` files\n  [#4187](https://github.com/rustwasm/wasm-bindgen/pull/4187)\n\n* Deprecate `autofocus`, `tabIndex`, `focus()` and `blur()` bindings in favor of bindings on the inherited `Element` class.\n  [#4143](https://github.com/rustwasm/wasm-bindgen/pull/4143)\n\n* Optimized ABI performance for `Option<{i32,u32,isize,usize,f32,*const T,*mut T}>`.\n  [#4183](https://github.com/rustwasm/wasm-bindgen/pull/4183)\n\n* Deprecate `--reference-types` in favor of automatic target feature detection.\n  [#4237](https://github.com/rustwasm/wasm-bindgen/pull/4237)\n\n* `wasm-bindgen-test-runner` now tries to restart the WebDriver on failure, instead of spending its timeout period trying to connect to a non-existing WebDriver.\n  [#4267](https://github.com/rustwasm/wasm-bindgen/pull/4267)\n\n* Deprecated `#[wasm_bindgen(thread_local)]` in favor of `#[wasm_bindgen(thread_local_v2)]`, which creates a `wasm_bindgen::JsThreadLocal`. It is similar to `std::thread::LocalKey` but supports `no_std`.\n  [#4277](https://github.com/rustwasm/wasm-bindgen/pull/4277)\n\n* Updated the WebGPU API to the current draft as of 2024-11-22.\n  [#4290](https://github.com/rustwasm/wasm-bindgen/pull/4290)\n\n* Improved error messages for `self` arguments in invalid positions.\n  [#4276](https://github.com/rustwasm/wasm-bindgen/pull/4276)\n\n### Fixed\n\n* Fixed methods with `self: &Self` consuming the object.\n  [#4178](https://github.com/rustwasm/wasm-bindgen/pull/4178)\n\n* Fixed unused string enums generating JS values.\n  [#4193](https://github.com/rustwasm/wasm-bindgen/pull/4193)\n\n* Fixed triggering lints in testing facilities.\n  [#4195](https://github.com/rustwasm/wasm-bindgen/pull/4195)\n\n* Fixed `#[should_panic]` not working with `#[wasm_bindgen_test(unsupported = ...)]`.\n  [#4196](https://github.com/rustwasm/wasm-bindgen/pull/4196)\n\n* Fixed potential `null` error when using `JsValue::as_debug_string()`.\n  [#4192](https://github.com/rustwasm/wasm-bindgen/pull/4192)\n\n* Fixed generated types when the getter and setter of a property have different types.\n  [#4202](https://github.com/rustwasm/wasm-bindgen/pull/4202)\n\n* Fixed generated types when a static getter/setter has the same name as an instance getter/setter.\n  [#4202](https://github.com/rustwasm/wasm-bindgen/pull/4202)\n\n* Fixed invalid TypeScript return types for multivalue signatures.\n  [#4210](https://github.com/rustwasm/wasm-bindgen/pull/4210)\n\n* Only emit `table.fill` instructions if the bulk-memory proposal is enabled.\n  [#4237](https://github.com/rustwasm/wasm-bindgen/pull/4237)\n\n* Fixed calls to `JsCast::instanceof()` not respecting JavaScript namespaces.\n  [#4241](https://github.com/rustwasm/wasm-bindgen/pull/4241)\n\n* Fixed imports for functions using `this` and late binding.\n  [#4225](https://github.com/rustwasm/wasm-bindgen/pull/4225)\n\n* Don't expose non-functioning implicit constructors to classes when none are provided.\n  [#4282](https://github.com/rustwasm/wasm-bindgen/pull/4282)\n\n--------------------------------------------------------------------------------\n\n## [0.2.95](https://github.com/rustwasm/wasm-bindgen/compare/0.2.94...0.2.95)\n\nReleased 2024-10-10\n\n### Added\n\n* Added support for implicit discriminants in enums.\n  [#4152](https://github.com/rustwasm/wasm-bindgen/pull/4152)\n\n* Added support for `Self` in complex type expressions in methods.\n  [#4155](https://github.com/rustwasm/wasm-bindgen/pull/4155)\n\n### Changed\n\n* String enums are no longer generate TypeScript types.\n  [#4174](https://github.com/rustwasm/wasm-bindgen/pull/4174)\n\n### Fixed\n\n* Fixed generated setters from WebIDL interface attributes binding to wrong JS method names.\n  [#4170](https://github.com/rustwasm/wasm-bindgen/pull/4170)\n\n* Fix string enums showing up in JS documentation and TypeScript bindings without corresponding types.\n  [#4175](https://github.com/rustwasm/wasm-bindgen/pull/4175)\n\n--------------------------------------------------------------------------------\n\n## [0.2.94](https://github.com/rustwasm/wasm-bindgen/compare/0.2.93...0.2.94) (YANKED)\n\nReleased 2024-10-09\n\n### Added\n\n* Added support for the WebAssembly `Tail Call` proposal.\n  [#4111](https://github.com/rustwasm/wasm-bindgen/pull/4111)\n\n* Add bindings for `RTCPeerConnection.setConfiguration(RTCConfiguration)` method.\n  [#4105](https://github.com/rustwasm/wasm-bindgen/pull/4105)\n\n* Add bindings to `RTCRtpTransceiverDirection.stopped`.\n  [#4102](https://github.com/rustwasm/wasm-bindgen/pull/4102)\n\n* Added experimental support for `Symbol.dispose` via `WASM_BINDGEN_EXPERIMENTAL_SYMBOL_DISPOSE`.\n  [#4118](https://github.com/rustwasm/wasm-bindgen/pull/4118)\n\n* Added bindings for the draft [WebRTC Encoded Transform](https://www.w3.org/TR/webrtc-encoded-transform) spec.\n  [#4125](https://github.com/rustwasm/wasm-bindgen/pull/4125)\n\n* Added `Debug` implementation to `JsError`.\n  [#4136](https://github.com/rustwasm/wasm-bindgen/pull/4136)\n\n* Added support for `js_name` and `skip_typescript` attributes for string enums.\n  [#4147](https://github.com/rustwasm/wasm-bindgen/pull/4147)\n\n* Added `unsupported` crate to `wasm_bindgen_test(unsupported = test)` as a way of running tests on non-Wasm targets as well.\n  [#4150](https://github.com/rustwasm/wasm-bindgen/pull/4150)\n\n* Added additional bindings for methods taking buffer view types (e.g. `&[u8]`) with corresponding JS types (e.g. `Uint8Array`).\n  [#4156](https://github.com/rustwasm/wasm-bindgen/pull/4156)\n\n* Added additional bindings for setters from WebIDL interface attributes with applicaple parameter types of just `JsValue`.\n  [#4156](https://github.com/rustwasm/wasm-bindgen/pull/4156)\n\n### Changed\n\n* Implicitly enable reference type and multivalue transformations if the module already makes use of the corresponding target features.\n  [#4133](https://github.com/rustwasm/wasm-bindgen/pull/4133)\n\n* Updated Gamepad API.\n  [#4134](https://github.com/rustwasm/wasm-bindgen/pull/4134)\n\n* Deprecated `Gamepad::display_id` and `GamepadHapticActuator::type_`.\n  [#4134](https://github.com/rustwasm/wasm-bindgen/pull/4134)\n\n* Removed `GamepadAxisMoveEvent`, `GamepadAxisMoveEventInit`, `GamepadButtonEvent`, `GamepadButtonEventInit` and `GamepadServiceTest`, which were seemingly never implemented by any JS environment.\n  [#4134](https://github.com/rustwasm/wasm-bindgen/pull/4134)\n\n* Changed `TextDecoder.decode()` `input` parameter type from `&mut [u8]` to `&[u8]`.\n  [#4141](https://github.com/rustwasm/wasm-bindgen/pull/4141)\n\n* Updated the WebGPU API to the current draft as of 2024-10-07.\n  [#4145](https://github.com/rustwasm/wasm-bindgen/pull/4145)\n\n* Deprecated generated setters from WebIDL interface attribute taking `JsValue` in favor of newer bindings with specific parameter types.\n  [#4156](https://github.com/rustwasm/wasm-bindgen/pull/4156)\n\n### Fixed\n\n* Fixed linked modules emitting snippet files when not using `--split-linked-modules`.\n  [#4066](https://github.com/rustwasm/wasm-bindgen/pull/4066)\n\n* Fixed incorrect deprecation warning when passing no parameter into `default()` (`init()`) or `initSync()`.\n  [#4074](https://github.com/rustwasm/wasm-bindgen/pull/4074)\n\n* Fixed many proc-macro generated `impl` blocks missing `#[automatically_derived]`, affecting test coverage.\n  [#4078](https://github.com/rustwasm/wasm-bindgen/pull/4078)\n\n* Fixed negative `BigInt` values being incorrectly formatted with two minus signs.\n  [#4082](https://github.com/rustwasm/wasm-bindgen/pull/4082)\n  [#4088](https://github.com/rustwasm/wasm-bindgen/pull/4088)\n\n* Fixed emitted `package.json` structure to correctly specify its dependencies\n  [#4091](https://github.com/rustwasm/wasm-bindgen/pull/4091)\n\n* Fixed returning `Option<Enum>` now correctly has the `| undefined` type in TS bindings.\n  [#4137](https://github.com/rustwasm/wasm-bindgen/pull/4137)\n\n* Fixed enum variant name collisions with object prototype fields.\n  [#4137](https://github.com/rustwasm/wasm-bindgen/pull/4137)\n\n* Fixed multiline doc comment alignment and remove empty ones entirely.\n  [#4135](https://github.com/rustwasm/wasm-bindgen/pull/4135)\n\n* Fixed `experimental-nodejs-module` target when used with `#[wasm_bindgen(start)]`.\n  [#4093](https://github.com/rustwasm/wasm-bindgen/pull/4093)\n\n* Fixed error when importing very large JS files.\n  [#4146](https://github.com/rustwasm/wasm-bindgen/pull/4146)\n\n* Specify `\"type\": \"module\"` when deploying to nodejs-module\n  [#4092](https://github.com/rustwasm/wasm-bindgen/pull/4092)\n\n* Fixed string enums not generating TypeScript types.\n  [#4147](https://github.com/rustwasm/wasm-bindgen/pull/4147)\n\n* Bindings that take buffer view types (e.g. `&[u8]`) as parameters will now correctly return a `Result` when they might not support a backing `SharedArrayBuffer`. This only applies to new and unstable APIs, which won't cause a breaking in the API.\n  [#4156](https://github.com/rustwasm/wasm-bindgen/pull/4156)\n\n--------------------------------------------------------------------------------\n\n## [0.2.93](https://github.com/rustwasm/wasm-bindgen/compare/0.2.92...0.2.93)\n\nReleased 2024-08-13\n\n### Added\n\n* Allow exporting functions named `default`. Throw error in wasm-bindgen-cli if --target web and\n  an exported symbol is named `default`.\n  [#3930](https://github.com/rustwasm/wasm-bindgen/pull/3930)\n\n* Added support for arbitrary expressions when using `#[wasm_bindgen(typescript_custom_section)]`.\n  [#3901](https://github.com/rustwasm/wasm-bindgen/pull/3901)\n\n* Implement `From<NonNull<T>>` for `JsValue`.\n  [#3877](https://github.com/rustwasm/wasm-bindgen/pull/3877)\n\n* Add method `copy_within` for TypedArray, add methods `find_last`,`find_last_index` for Array.\n  [#3888](https://github.com/rustwasm/wasm-bindgen/pull/3888)\n\n* Added support for returning `Vec`s from async functions.\n  [#3630](https://github.com/rustwasm/wasm-bindgen/pull/3630)\n\n* Added bindings for `InputDeviceInfo` and `MediaTrackCapabilities`.\n  [#3935](https://github.com/rustwasm/wasm-bindgen/pull/3935)\n\n* Add bindings for `RTCRtpReceiver.getCapabilities(DOMString)` method.\n  [#3941](https://github.com/rustwasm/wasm-bindgen/pull/3941)\n\n* Add bindings for `VisualViewport`.\n  [#3931](https://github.com/rustwasm/wasm-bindgen/pull/3931)\n\n* Add bindings for `queueMicrotask`.\n  [#3981](https://github.com/rustwasm/wasm-bindgen/pull/3981)\n\n* Add experimental bindings for User Agent Client Hints API\n  [#3989](https://github.com/rustwasm/wasm-bindgen/pull/3989)\n\n* Add bindings for `FocusOptions`.\n  [#3996](https://github.com/rustwasm/wasm-bindgen/pull/3996)\n\n* Add bindings for `RTCRtpReceiver.jitterBufferTarget`.\n  [#3968](https://github.com/rustwasm/wasm-bindgen/pull/3968)\n\n* Generate getters for all WebIDL dictionary types.\n  [#3993](https://github.com/rustwasm/wasm-bindgen/pull/3993)\n\n* Support for iterable in WebIDL. Gives `entries`, `keys`, `values` methods for regular and asynchronous, as well as `for_each` for regular, iterables.\n  [#3962](https://github.com/rustwasm/wasm-bindgen/pull/3962)\n\n* Add bindings for `HTMLTableCellElement.abbr` and `scope` properties.\n  [#3972](https://github.com/rustwasm/wasm-bindgen/pull/3972)\n\n* Add WebIDL definitions relating to `Popover API`.\n  [#3977](https://github.com/rustwasm/wasm-bindgen/pull/3977)\n\n* Added the `thread_stack_size` property to the object parameter of `default()` (`init()`) and `initSync()`, making it possible to set the stack size of spawned threads. `__wbindgen_thread_destroy()` now has a third optional parameter for the stack size, the default stack size is assumed when not passing it. When calling from the thread to be destroyed, by passing no parameters, the correct stack size is determined internally.\n  [#3995](https://github.com/rustwasm/wasm-bindgen/pull/3995)\n\n* Added bindings to the Device Memory API.\n  [#4011](https://github.com/rustwasm/wasm-bindgen/pull/4011)\n\n* Added support for WebIDL records. This added new methods to various APIs, notably `ClipboardItem()`, `GPUDeviceDescriptor.requiredLimits` and `Header()`.\n  [#4030](https://github.com/rustwasm/wasm-bindgen/pull/4030)\n\n* Added an official MSRV policy. Library MSRV changes will be accompanied by a minor version bump. CLI tool MSRV can change with any version bump.\n  [#4038](https://github.com/rustwasm/wasm-bindgen/pull/4038)\n\n* Added bindings to `NavigatorOptions.vibrate`.\n  [#4041](https://github.com/rustwasm/wasm-bindgen/pull/4041)\n\n* Added an experimental Node.JS ES module target, in comparison the current `node` target uses CommonJS, with `--target experimental-nodejs-module` or when testing with `wasm_bindgen_test_configure!(run_in_node_experimental)`.\n  [#4027](https://github.com/rustwasm/wasm-bindgen/pull/4027)\n\n* Added importing strings as `JsString` through `#[wasm_bindgen(thread_local, static_string)] static STRING: JsString = \"a string literal\";`.\n  [#4055](https://github.com/rustwasm/wasm-bindgen/pull/4055)\n\n* Added experimental test coverage support for `wasm-bindgen-test-runner`, see the guide for more information.\n  [#4060](https://github.com/rustwasm/wasm-bindgen/pull/4060)\n\n### Changed\n\n* Stabilize Web Share API.\n  [#3882](https://github.com/rustwasm/wasm-bindgen/pull/3882)\n\n* Generate JS bindings for WebIDL dictionary setters instead of using `Reflect`. This increases the size of the Web API bindings but should be more performant. Also, importing getters/setters from JS now supports specifying the JS attribute name as a string, e.g. `#[wasm_bindgen(method, setter = \"x-cdm-codecs\")]`.\n  [#3898](https://github.com/rustwasm/wasm-bindgen/pull/3898)\n\n* Greatly improve the performance of sending WebIDL 'string enums' across the JavaScript boundary by converting the enum variant string to/from an int.\n  [#3915](https://github.com/rustwasm/wasm-bindgen/pull/3915)\n\n* Use `table.fill` when appropriate.\n  [#3446](https://github.com/rustwasm/wasm-bindgen/pull/3446)\n\n* Annotated methods in WebCodecs that throw.\n  [#3970](https://github.com/rustwasm/wasm-bindgen/pull/3970)\n\n* Update and stabilize the Clipboard API.\n  [#3992](https://github.com/rustwasm/wasm-bindgen/pull/3992)\n\n* Deprecate builder-pattern type setters for WebIDL dictionary types and introduce non-mutable setters instead.\n  [#3993](https://github.com/rustwasm/wasm-bindgen/pull/3993)\n\n* Allow imported async functions to return any type that can be converted from a `JsValue`.\n  [#3919](https://github.com/rustwasm/wasm-bindgen/pull/3919)\n\n* Update Web Authentication API to level 3.\n  [#4000](https://github.com/rustwasm/wasm-bindgen/pull/4000)\n\n* Deprecate `AudioBufferSourceNode.onended` and `AudioBufferSourceNode.stop()`.\n  [#4020](https://github.com/rustwasm/wasm-bindgen/pull/4020)\n\n* Increase default stack size for spawned threads from 1 to 2 MB.\n  [#3995](https://github.com/rustwasm/wasm-bindgen/pull/3995)\n\n* Deprecated parameters to `default` (`init`) and `initSync` in favor of an object.\n  [#3995](https://github.com/rustwasm/wasm-bindgen/pull/3995)\n\n* Update `AbortSignal` and `AbortController` according to the WHATWG specification.\n  [#4026](https://github.com/rustwasm/wasm-bindgen/pull/4026)\n\n* Update the Indexed DB API.\n  [#4027](https://github.com/rustwasm/wasm-bindgen/pull/4027)\n\n* `UnwrapThrowExt for Result` now makes use of the required `Debug` bound to display the error as well.\n  [#4035](https://github.com/rustwasm/wasm-bindgen/pull/4035)\n  [#4049](https://github.com/rustwasm/wasm-bindgen/pull/4049)\n\n* MSRV of CLI tools bumped to v1.76. This does not affect libraries like `wasm-bindgen`, `js-sys` and `web-sys`!\n  [#4037](https://github.com/rustwasm/wasm-bindgen/pull/4037)\n\n* Filtered files in published crates, significantly reducing the package size and notably excluding any bash files.\n  [#4046](https://github.com/rustwasm/wasm-bindgen/pull/4046)\n\n* Deprecated `JsStatic` in favor of `#[wasm_bindgen(thread_local)]`, which creates a `std::thread::LocalKey`. The syntax is otherwise the same.\n  [#4057](https://github.com/rustwasm/wasm-bindgen/pull/4057)\n\n* Removed `impl Deref for JsStatic` when compiling with `cfg(target_feature = \"atomics\")`, which was unsound.\n  [#4057](https://github.com/rustwasm/wasm-bindgen/pull/4057)\n\n* Updated the WebGPU WebIDL to the current draft as of 2024-08-05.\n  [#4062](https://github.com/rustwasm/wasm-bindgen/pull/4062)\n\n* Use object URLs for linked modules without `--split-linked-modules`.\n  [#4067](https://github.com/rustwasm/wasm-bindgen/pull/4067)\n\n### Fixed\n\n* Copy port from headless test server when using `WASM_BINDGEN_TEST_ADDRESS`.\n  [#3873](https://github.com/rustwasm/wasm-bindgen/pull/3873)\n\n* Fix `catch` not being thread-safe.\n  [#3879](https://github.com/rustwasm/wasm-bindgen/pull/3879)\n\n* Fix MSRV compilation.\n  [#3927](https://github.com/rustwasm/wasm-bindgen/pull/3927)\n\n* Fix `clippy::empty_docs` lint.\n  [#3946](https://github.com/rustwasm/wasm-bindgen/pull/3946)\n\n* Fix missing target features in module when enabling reference types or multi-value transformation.\n  [#3967](https://github.com/rustwasm/wasm-bindgen/pull/3967)\n\n* Fixed Rust values getting GC'd while still borrowed.\n  [#3940](https://github.com/rustwasm/wasm-bindgen/pull/3940)\n\n* Fixed Rust values not getting GC'd if they were created via. a constructor.\n  [#3940](https://github.com/rustwasm/wasm-bindgen/pull/3940)\n\n* Fix triggering `clippy::mem_forget` lint in exported structs.\n  [#3985](https://github.com/rustwasm/wasm-bindgen/pull/3985)\n\n* Fix MDN links to static interface methods.\n  [#4010](https://github.com/rustwasm/wasm-bindgen/pull/4010)\n\n* Fixed Deno support.\n  [#3990](https://github.com/rustwasm/wasm-bindgen/pull/3990)\n\n* Fix `__wbindgen_thread_destroy()` ignoring parameters.\n  [#3995](https://github.com/rustwasm/wasm-bindgen/pull/3995)\n\n* Fix `no_std` support and therefor compiling with `default-features = false`.\n  [#4005](https://github.com/rustwasm/wasm-bindgen/pull/4005)\n\n* Fix byte order for big-endian platforms.\n  [#4015](https://github.com/rustwasm/wasm-bindgen/pull/4015)\n\n* Allow ex/importing structs, functions and parameters named with raw identifiers.\n  [#4025](https://github.com/rustwasm/wasm-bindgen/pull/4025)\n\n* Implement a more reliable way to detect the stack pointer.\n  [#4036](https://github.com/rustwasm/wasm-bindgen/pull/4036)\n\n* `#[track_caller]` is now always applied on `UnwrapThrowExt` methods when not targeting `wasm32-unknown-unknown`.\n  [#4042](https://github.com/rustwasm/wasm-bindgen/pull/4042)\n\n* Fixed linked modules emitting snippet files when not using `--split-linked-modules`.\n  [#4066](https://github.com/rustwasm/wasm-bindgen/pull/4066)\n\n--------------------------------------------------------------------------------\n\n## [0.2.92](https://github.com/rustwasm/wasm-bindgen/compare/0.2.91...0.2.92)\n\nReleased 2024-03-04\n\n### Added\n\n* Add bindings for `RTCPeerConnectionIceErrorEvent`.\n  [#3835](https://github.com/rustwasm/wasm-bindgen/pull/3835)\n\n* Add bindings for `CanvasState.reset()`, affecting `CanvasRenderingContext2D` and `OffscreenCanvasRenderingContext2D`.\n  [#3844](https://github.com/rustwasm/wasm-bindgen/pull/3844)\n\n* Add `TryFrom` implementations for `Number`, that allow losslessly converting from 64- and 128-bits numbers.\n  [#3847](https://github.com/rustwasm/wasm-bindgen/pull/3847)\n\n* Add support for `Option<*const T>`, `Option<*mut T>` and `NonNull<T>`.\n  [#3852](https://github.com/rustwasm/wasm-bindgen/pull/3852)\n  [#3857](https://github.com/rustwasm/wasm-bindgen/pull/3857)\n\n* Allow overriding the URL used for headless tests by setting `WASM_BINDGEN_TEST_ADDRESS`.\n  [#3861](https://github.com/rustwasm/wasm-bindgen/pull/3861)\n\n### Fixed\n\n* Make .wasm output deterministic when using `--reference-types`.\n  [#3851](https://github.com/rustwasm/wasm-bindgen/pull/3851)\n\n* Don't allow invalid Unicode scalar values in `char`.\n  [#3866](https://github.com/rustwasm/wasm-bindgen/pull/3866)\n\n--------------------------------------------------------------------------------\n\n## [0.2.91](https://github.com/rustwasm/wasm-bindgen/compare/0.2.90...0.2.91)\n\nReleased 2024-02-06\n\n### Added\n\n* Added bindings for the `RTCRtpTransceiver.setCodecPreferences()` and unstable bindings for the `RTCRtpEncodingParameters.scalabilityMode`.\n  [#3828](https://github.com/rustwasm/wasm-bindgen/pull/3828)\n\n* Add unstable bindings for the FileSystemAccess API\n  [#3810](https://github.com/rustwasm/wasm-bindgen/pull/3810)\n\n* Added support for running tests in shared and service workers with `wasm_bindgen_test_configure!` `run_in_shared_worker` and `run_in_service_worker`.\n  [#3804](https://github.com/rustwasm/wasm-bindgen/pull/3804)\n\n* Accept the `--skip` flag with `wasm-bindgen-test-runner`.\n  [#3803](https://github.com/rustwasm/wasm-bindgen/pull/3803)\n\n* Introduce environment variable `WASM_BINDGEN_TEST_NO_ORIGIN_ISOLATION` to disable origin isolation for `wasm-bindgen-test-runner`.\n  [#3807](https://github.com/rustwasm/wasm-bindgen/pull/3807)\n\n* Add bindings for `USBDevice.forget()`.\n  [#3821](https://github.com/rustwasm/wasm-bindgen/pull/3821)\n\n### Changed\n\n* Stabilize `ClipboardEvent`.\n  [#3791](https://github.com/rustwasm/wasm-bindgen/pull/3791)\n\n* Use immutable buffers in `SubtleCrypto` methods.\n  [#3797](https://github.com/rustwasm/wasm-bindgen/pull/3797)\n\n* Deprecate `wasm_bindgen_test_configure!`s `run_in_worker` in favor of `run_in_dedicated_worker`.\n  [#3804](https://github.com/rustwasm/wasm-bindgen/pull/3804)\n\n* Updated the WebGPU WebIDL to the current draft as of 2024-01-30. Note that this retains the previous update's workaround for `GPUPipelineError`, and holds back an update to the `buffer` argument of the `GPUQueue.{writeBuffer,writeTexture}` methods.\n  [#3816](https://github.com/rustwasm/wasm-bindgen/pull/3816)\n\n* Deprecate `--weak-refs` and `WASM_BINDGEN_WEAKREF` in favor of automatic run-time detection.\n  [#3822](https://github.com/rustwasm/wasm-bindgen/pull/3822)\n\n### Fixed\n\n* Fixed UB when freeing strings received from JS if not using the default allocator.\n  [#3808](https://github.com/rustwasm/wasm-bindgen/pull/3808)\n\n* Fixed temporary folder detection by `wasm-bindgen-test-runner` on MacOS.\n  [#3817](https://github.com/rustwasm/wasm-bindgen/pull/3817)\n\n* Fixed using `#[wasm_bindgen(js_name = default)]` with `#[wasm_bindgen(module = ...)]`.\n  [#3823](https://github.com/rustwasm/wasm-bindgen/pull/3823)\n\n* Fixed nightly build of `wasm-bindgen-futures`.\n  [#3827](https://github.com/rustwasm/wasm-bindgen/pull/3827)\n\n--------------------------------------------------------------------------------\n\n## [0.2.90](https://github.com/rustwasm/wasm-bindgen/compare/0.2.89...0.2.90)\n\nReleased 2024-01-06\n\n### Fixed\n\n* Fix JS shim default path detection for the no-modules target.\n  [#3748](https://github.com/rustwasm/wasm-bindgen/pull/3748)\n\n### Added\n\n* Add bindings for `HTMLFormElement.requestSubmit()`.\n  [#3747](https://github.com/rustwasm/wasm-bindgen/pull/3747)\n\n* Add bindings for `RTCRtpSender.getCapabilities(DOMString)` method, `RTCRtpCapabilities`, `RTCRtpCodecCapability` and `RTCRtpHeaderExtensionCapability`.\n  [#3737](https://github.com/rustwasm/wasm-bindgen/pull/3737)\n\n* Add bindings for `UserActivation`.\n  [#3719](https://github.com/rustwasm/wasm-bindgen/pull/3719)\n\n* Add unstable bindings for the Compression Streams API.\n  [#3752](https://github.com/rustwasm/wasm-bindgen/pull/3752)\n\n### Changed\n\n* Stabilize File System API.\n  [#3745](https://github.com/rustwasm/wasm-bindgen/pull/3745)\n\n* Stabilize `QueuingStrategy`.\n  [#3753](https://github.com/rustwasm/wasm-bindgen/pull/3753)\n\n### Fixed\n\n* Fixed a compiler error when using `#[wasm_bindgen]` inside `macro_rules!`.\n  [#3725](https://github.com/rustwasm/wasm-bindgen/pull/3725)\n\n### Removed\n\n* Removed Gecko-only `InstallTriggerData` and Gecko-internal `FlexLineGrowthState`, `GridDeclaration`, `GridTrackState`,\n  `RtcLifecycleEvent` and `WebrtcGlobalStatisticsReport` features.\n  [#3723](https://github.com/rustwasm/wasm-bindgen/pull/3723)\n\n--------------------------------------------------------------------------------\n\n## [0.2.89](https://github.com/rustwasm/wasm-bindgen/compare/0.2.88...0.2.89)\n\nReleased 2023-11-27.\n\n### Added\n\n* Add additional constructor to `DataView` for `SharedArrayBuffer`.\n  [#3695](https://github.com/rustwasm/wasm-bindgen/pull/3695)\n\n* Stabilize `wasm_bindgen::module()`.\n  [#3690](https://github.com/rustwasm/wasm-bindgen/pull/3690)\n\n### Fixed\n\n* The DWARF section is now correctly modified instead of leaving it in a broken state.\n  [#3483](https://github.com/rustwasm/wasm-bindgen/pull/3483)\n\n* Fixed an issue where `#[wasm_bindgen]` automatically derived the `TryFrom` trait for any struct, preventing custom `TryFrom<JsValue>` implementations. It has been updated to utilize a new `TryFromJsValue` trait instead.\n  [#3709](https://github.com/rustwasm/wasm-bindgen/pull/3709)\n\n* Update the TypeScript signature of `__wbindgen_thread_destroy` to indicate that it's parameters are optional.\n  [#3703](https://github.com/rustwasm/wasm-bindgen/pull/3703)\n\n### Removed\n\n* Removed Gecko-internal dictionary bindings `Csp`, `CspPolicies`, `CspReport` and `CspReportProperties`.\n  [#3721](https://github.com/rustwasm/wasm-bindgen/pull/3721)\n\n--------------------------------------------------------------------------------\n\n## [0.2.88](https://github.com/rustwasm/wasm-bindgen/compare/0.2.87...0.2.88) (YANKED)\n\nReleased 2023-11-01\n\n### Added\n\n* Add bindings for `RTCRtpTransceiverInit.sendEncodings`.\n  [#3642](https://github.com/rustwasm/wasm-bindgen/pull/3642)\n\n* Add bindings for the Web Locks API to `web-sys`.\n  [#3604](https://github.com/rustwasm/wasm-bindgen/pull/3604)\n\n* Add bindings for `ViewTransition` to `web-sys`.\n  [#3598](https://github.com/rustwasm/wasm-bindgen/pull/3598)\n\n* Extend `AudioContext` with unstable features supporting audio sink configuration.\n  [#3433](https://github.com/rustwasm/wasm-bindgen/pull/3433)\n\n* Add bindings for `WebAssembly.Tag` and `WebAssembly.Exception`.\n  [#3484](https://github.com/rustwasm/wasm-bindgen/pull/3484)\n\n* Re-export `wasm-bindgen` from `js-sys`, `web-sys` and `wasm-bindgen-futures`.\n  [#3466](https://github.com/rustwasm/wasm-bindgen/pull/3466)\n  [#3601](https://github.com/rustwasm/wasm-bindgen/pull/3601)\n\n* Re-export `js-sys` from `web-sys` and `wasm-bindgen-futures`.\n  [#3466](https://github.com/rustwasm/wasm-bindgen/pull/3466)\n  [#3601](https://github.com/rustwasm/wasm-bindgen/pull/3601)\n\n* Add bindings for async variants of `Atomics.wait`.\n  [#3504](https://github.com/rustwasm/wasm-bindgen/pull/3504)\n\n* Add bindings for `WorkerGlobalScope.performance`.\n  [#3506](https://github.com/rustwasm/wasm-bindgen/pull/3506)\n\n* Add support for installing pre-built artifacts of `wasm-bindgen-cli`\n  via `cargo binstall wasm-bindgen-cli`.\n  [#3544](https://github.com/rustwasm/wasm-bindgen/pull/3544)\n\n* Add bindings for `RTCDataChannel.id`.\n  [#3547](https://github.com/rustwasm/wasm-bindgen/pull/3547)\n\n* Add bindings for `HTMLElement.inert`.\n  [#3557](https://github.com/rustwasm/wasm-bindgen/pull/3557)\n\n* Add unstable bindings for the Prioritized Task Scheduling API.\n  [#3566](https://github.com/rustwasm/wasm-bindgen/pull/3566)\n\n* Add bindings for `CssStyleSheet` constructor and `replace(_sync)` methods.\n  [#3573](https://github.com/rustwasm/wasm-bindgen/pull/3573)\n\n* Add bindings for `CanvasTransform.setTransform(DOMMatrix2DInit)`.\n  [#3580](https://github.com/rustwasm/wasm-bindgen/pull/3580)\n\n* Add a `crate` attribute to the `wasm_bindgen_test` proc-macro to specify a\n  non-default path to the `wasm-bindgen-test` crate.\n  [#3593](https://github.com/rustwasm/wasm-bindgen/pull/3593)\n\n* Add support for passing `Vec`s of exported Rust types and strings to/from JS.\n  [#3554](https://github.com/rustwasm/wasm-bindgen/pull/3554)\n\n* Implement `TryFrom<JsValue>` for exported Rust types and strings.\n  [#3554](https://github.com/rustwasm/wasm-bindgen/pull/3554)\n\n* Handle the `#[ignore = \"reason\"]` attribute with the `wasm_bindgen_test`\n  proc-macro and accept the `--include-ignored` flag with `wasm-bindgen-test-runner`.\n  [#3644](https://github.com/rustwasm/wasm-bindgen/pull/3644)\n\n* Added missing additions to the Notification API.\n  [#3667](https://github.com/rustwasm/wasm-bindgen/pull/3667)\n\n### Changed\n\n* Updated the WebGPU WebIDL.\n  The optional `message` argument of [`GPUPipelineError`](https://www.w3.org/TR/webgpu/#gpupipelineerror)'s constructor has been manually specified as a required argument,\n  because required arguments occurring after optional arguments are currently not supported by the generator.\n  [#3480](https://github.com/rustwasm/wasm-bindgen/pull/3480)\n\n* Replaced `curl` with `ureq`. By default we now use Rustls instead of OpenSSL.\n  [#3511](https://github.com/rustwasm/wasm-bindgen/pull/3511)\n\n* Changed mutability of the argument `buffer` in `write` functions to immutable for `FileSystemSyncAccessHandle` and `FileSystemWritableFileStream`.\n  It was also automatically changed for `IdbFileHandle`, which is deprecated.\n  [#3537](https://github.com/rustwasm/wasm-bindgen/pull/3537)\n\n* Changed behavior when compiling to `wasm32-wasi` to match `wasm32-emscripten` and\n  non-Wasm targets, generating a stub that panics when called rather than a wasm-\n  bindgen placeholder.\n  [#3233](https://github.com/rustwasm/wasm-bindgen/pull/3233)\n\n* Changed constructor implementation in generated JS bindings, it is now\n  possible to override methods from generated JS classes using inheritance.\n  When exported constructors return `Self`.\n  [#3562](https://github.com/rustwasm/wasm-bindgen/pull/3562)\n\n* Made `wasm-bindgen` forwards-compatible with the standard C ABI.\n  [#3595](https://github.com/rustwasm/wasm-bindgen/pull/3595)\n\n* Changed the design of the internal `WasmAbi` trait. Rather than marking a type\n  which can be passed directly as a parameter/result to/from JS, it now lets\n  types specify how they can be split into / recreated from multiple primitive\n  types which are then passed to/from JS.\n  `WasmPrimitive` now serves the old function of `WasmAbi`, minus allowing\n  `#[repr(C)]` types.\n  [#3595](https://github.com/rustwasm/wasm-bindgen/pull/3595)\n\n* Use `queueMicrotask` in `wasm-bindgen-futures` for scheduling tasks on the next tick.\n  If that is not available, use the previous `Promise.then` mechanism as a fallback.\n  This should avoid quirks, like exceptions thrown get now properly reported\n  as normal exceptions rather than as rejected promises.\n  [#3611](https://github.com/rustwasm/wasm-bindgen/pull/3611)\n\n* Improved TypeScript bindings to accurately reference Rust enum types in function signatures,\n  enhancing type safety and compatibility.\n  [#3647](https://github.com/rustwasm/wasm-bindgen/pull/3647)\n\n* Throw an error on enum name collisions, previously only one enum would be emitted.\n  [#3669](https://github.com/rustwasm/wasm-bindgen/pull/3669)\n\n### Fixed\n\n* Fixed `wasm_bindgen` macro to handle raw identifiers in field names.\n  [#3621](https://github.com/rustwasm/wasm-bindgen/pull/3621)\n\n* Fixed bindings and comments for `Atomics.wait`.\n  [#3509](https://github.com/rustwasm/wasm-bindgen/pull/3509)\n\n* Fixed `wasm_bindgen_test` macro to handle raw identifiers in test names.\n  [#3541](https://github.com/rustwasm/wasm-bindgen/pull/3541)\n\n* Fixed Cargo license field to follow the SPDX 2.1 license expression standard.\n  [#3529](https://github.com/rustwasm/wasm-bindgen/pull/3529)\n\n* Use fully qualified paths in the `wasm_bindgen_test` macro.\n  [#3549](https://github.com/rustwasm/wasm-bindgen/pull/3549)\n\n* Fixed bug allowing JS primitives to be returned from exported constructors.\n  [#3562](https://github.com/rustwasm/wasm-bindgen/pull/3562)\n\n* Fixed optional parameters in JSDoc.\n  [#3577](https://github.com/rustwasm/wasm-bindgen/pull/3577)\n\n* Use re-exported `js-sys` from `wasm-bindgen-futures` to account for\n  non-default path specified by the `crate` attribute in `wasm_bindgen_futures`\n  proc-macro.\n  [#3601](https://github.com/rustwasm/wasm-bindgen/pull/3601)\n\n* Fix bug with function arguments coming from `macro_rules!`.\n  [#3625](https://github.com/rustwasm/wasm-bindgen/pull/3625)\n\n* Fix some calls to `free()` missing alignment.\n  [#3639](https://github.com/rustwasm/wasm-bindgen/pull/3639)\n\n* Fix wrong ABI for raw pointers.\n  [#3655](https://github.com/rustwasm/wasm-bindgen/pull/3655)\n\n### Removed\n\n* Removed `ReadableStreamByobReader::read_with_u8_array()` because it doesn't work with Wasm.\n  [#3582](https://github.com/rustwasm/wasm-bindgen/pull/3582)\n\n* Removed `GetNotificationOptions`, `NotificationBehavior` and `Notification.get()` because\n  they don't exist anymore.\n\n--------------------------------------------------------------------------------\n\n## [0.2.87](https://github.com/rustwasm/wasm-bindgen/compare/0.2.86...0.2.87)\n\nReleased 2023-06-12.\n\n### Added\n\n* Implemented `IntoIterator` for `Array`.\n  [#3477](https://github.com/rustwasm/wasm-bindgen/pull/3477)\n\n### Changed\n\n* Deprecate `HtmlMenuItemElement` and parts of `HtmlMenuElement`.\n  [#3448](https://github.com/rustwasm/wasm-bindgen/pull/3448)\n\n* Stabilize `ResizeObserver`.\n  [#3459](https://github.com/rustwasm/wasm-bindgen/pull/3459)\n\n### Fixed\n\n* Take alignment into consideration during (de/re)allocation.\n  [#3463](https://github.com/rustwasm/wasm-bindgen/pull/3463)\n\n--------------------------------------------------------------------------------\n\n## 0.2.86\n\nReleased 2023-05-16.\n\n[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.85...0.2.86)\n\n--------------------------------------------------------------------------------\n\n## 0.2.85\n\nReleased 2023-05-09.\n\n[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.84...0.2.85)\n\n--------------------------------------------------------------------------------\n\n## 0.2.84\n\nReleased 2023-02-01.\n\n[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.83...0.2.84)\n\n--------------------------------------------------------------------------------\n\n## 0.2.83\n\nReleased 2022-09-12.\n\n[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.82...0.2.83)\n\n--------------------------------------------------------------------------------\n\n## 0.2.82\n\nReleased 2022-07-25.\n\n[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.81...0.2.82)\n\n--------------------------------------------------------------------------------\n\n## 0.2.81\n\nReleased 2022-06-14.\n\n[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.80...0.2.81)\n\n--------------------------------------------------------------------------------\n\n## 0.2.80\n\nReleased 2022-04-04.\n\n[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.79...0.2.80)\n\n--------------------------------------------------------------------------------\n\n## 0.2.79\n\nReleased 2022-01-19.\n\n[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.78...0.2.79)\n\n--------------------------------------------------------------------------------\n\n## 0.2.78\n\nReleased 2021-09-15.\n\n[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.77...0.2.78)\n\n--------------------------------------------------------------------------------\n\n## 0.2.77\n\nReleased 2021-09-08.\n\n[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.76...0.2.77)\n\n--------------------------------------------------------------------------------\n\n## 0.2.76\n\nReleased 2021-08-19.\n\n[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.75...0.2.76)\n\n--------------------------------------------------------------------------------\n\n## 0.2.75\n\nReleased 2021-08-02.\n\n[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.74...0.2.75)\n\n--------------------------------------------------------------------------------\n\n## 0.2.74\n\nReleased 2021-05-10.\n\n[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.73...0.2.74)\n\n--------------------------------------------------------------------------------\n\n## 0.2.73\n\nReleased 2021-03-29.\n\n[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.72...0.2.73)\n\n--------------------------------------------------------------------------------\n\n## 0.2.72\n\nReleased 2021-03-18.\n\n[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.71...0.2.72)\n\n--------------------------------------------------------------------------------\n\n## 0.2.71\n\nReleased 2021-02-26.\n\n[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.70...0.2.71)\n\n--------------------------------------------------------------------------------\n\n## 0.2.70\n\nReleased 2021-01-25.\n\n[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.69...0.2.70)\n\n--------------------------------------------------------------------------------\n\n## 0.2.69\n\nReleased 2020-11-30.\n\n### Added\n\n* Unstable bindings for WebBluetooth have been added.\n  [#2311](https://github.com/rustwasm/wasm-bindgen/pull/2311)\n\n* Unstable bindings for WebUSB have been added.\n  [#2345](https://github.com/rustwasm/wasm-bindgen/pull/2345)\n\n* Renaming a struct field with `js_name` is now supported.\n  [#2360](https://github.com/rustwasm/wasm-bindgen/pull/2360)\n\n* The WebGPU WebIDL has been updated.\n  [#2353](https://github.com/rustwasm/wasm-bindgen/pull/2353)\n\n### Fixed\n\n* The ImageCapture APIs of web-sys have been moved to unstable and were fixed.\n  [#2348](https://github.com/rustwasm/wasm-bindgen/pull/2348)\n\n* Bindings for `waitAsync` have been updated.\n  [#2362](https://github.com/rustwasm/wasm-bindgen/pull/2362)\n\n--------------------------------------------------------------------------------\n\n## 0.2.68\n\nReleased 2020-09-08.\n\n### Added\n\n* Add userVisibleOnly property to PushSubscriptionOptionsInit.\n  [#2288](https://github.com/rustwasm/wasm-bindgen/pull/2288)\n\n### Fixed\n\n* TypeScript files now import `*.wasm` instead of bare files.\n  [#2283](https://github.com/rustwasm/wasm-bindgen/pull/2283)\n\n* Usage of `externref` now appropriately resizes the table by using 2x the\n  previous capacity, fixing a performance issue with lots of externref objects.\n  [#2294](https://github.com/rustwasm/wasm-bindgen/pull/2294)\n\n* Compatibility with the latest Firefox WebDriver has been fixed.\n  [#2301](https://github.com/rustwasm/wasm-bindgen/pull/2301)\n\n* Non deterministic output with closures has been fixed.\n  [#2304](https://github.com/rustwasm/wasm-bindgen/pull/2304)\n\n### Updated\n\n* The WebGPU WebIDL was updated.\n  [#2267](https://github.com/rustwasm/wasm-bindgen/pull/2267)\n\n--------------------------------------------------------------------------------\n\n## 0.2.67\n\nReleased 2020-07-28.\n\n### Added\n\n* A `--reference-types` flag was added to the CLI.\n  [#2257](https://github.com/rustwasm/wasm-bindgen/pull/2257)\n\n### Fixed\n\n* Breakage with `Closure::forget` in 0.2.66 was fixed.\n  [#2258](https://github.com/rustwasm/wasm-bindgen/pull/2258)\n\n--------------------------------------------------------------------------------\n\n## 0.2.66\n\nReleased 2020-07-28.\n\n### Added\n\n* Reverse mappings from value to name are now available in JS bindings of enums.\n  [#2240](https://github.com/rustwasm/wasm-bindgen/pull/2240)\n\n### Fixed\n\n* Functions using a return pointer in threaded programs now correctly load and\n  store return values in a way that doesn't interfere with other threads.\n  [#2249](https://github.com/rustwasm/wasm-bindgen/pull/2249)\n\n* Support for weak references has been updated and a `--weak-refs` flag is now\n  available in the CLI for enabling weak references.\n  [#2248](https://github.com/rustwasm/wasm-bindgen/pull/2248)\n\n--------------------------------------------------------------------------------\n\n## 0.2.65\n\nReleased 2020-07-15.\n\n### Added\n\n* Functions from JS can now be natively imported as `async` and will use\n  promises under the hood.\n  [#2196](https://github.com/rustwasm/wasm-bindgen/pull/2196)\n\n### Changed\n\n* Encoding for the reference types proposal has been updated to the latest\n  version of the spec.\n  [#2234](https://github.com/rustwasm/wasm-bindgen/pull/2234)\n\n--------------------------------------------------------------------------------\n\n## 0.2.64\n\nReleased 2020-06-29.\n\n### Added\n\n* Nested namespaces for imports can now be specified.\n  [#2105](https://github.com/rustwasm/wasm-bindgen/pull/2105)\n\n* A `deno` target has been added.\n  [#2176](https://github.com/rustwasm/wasm-bindgen/pull/2176)\n\n### Fixed\n\n* Getters/setters that consume the original object have been fixed to invalidate\n  the object correctly.\n  [#2172](https://github.com/rustwasm/wasm-bindgen/pull/2172)\n\n* Compatibility with nightly threading in LLVM has been fixed.\n  [#2183](https://github.com/rustwasm/wasm-bindgen/pull/2183)\n\n* Trailing space in generated doc comments is now removed.\n  [#2210](https://github.com/rustwasm/wasm-bindgen/pull/2210)\n\n--------------------------------------------------------------------------------\n\n## 0.2.63\n\nReleased 2020-05-27.\n\n### Added\n\n* A new example about using WebRTC has been added.\n  [#2131](https://github.com/rustwasm/wasm-bindgen/pull/2131)\n\n* The `Blob.stream()` method has been added.\n  [#2140](https://github.com/rustwasm/wasm-bindgen/pull/2140)\n  [#2142](https://github.com/rustwasm/wasm-bindgen/pull/2142)\n\n### Changed\n\n* The encoding and implementation of WebAssembly reference types has been sync'd\n  with the latest upstream specification.\n  [#2125](https://github.com/rustwasm/wasm-bindgen/pull/2125)\n\n### Fixed\n\n* Test functions names will no longer collide with test intrinsic names.\n  [#2123](https://github.com/rustwasm/wasm-bindgen/pull/2123)\n\n* Fixed warnings with `#[must_use]` types in generated code.\n  [#2144](https://github.com/rustwasm/wasm-bindgen/pull/2144)\n\n* Fixed compatibility with latest Rust nightlies.\n  [#2159](https://github.com/rustwasm/wasm-bindgen/pull/2159)\n\n--------------------------------------------------------------------------------\n\n## 0.2.62\n\nReleased 2020-05-01.\n\n### Fixed\n\n* Usage of `require` has been fixed with Webpack 5.\n  [#2115](https://github.com/rustwasm/wasm-bindgen/pull/2115)\n\n--------------------------------------------------------------------------------\n\n## 0.2.61\n\nReleased 2020-04-29.\n\n### Added\n\n* Exported Rust `enum` types can now be renamed with `js_name`.\n  [#2071](https://github.com/rustwasm/wasm-bindgen/pull/2071)\n\n* More comments are copied to JS/TS files, and comments should no longer\n  accidentally have escape sequences in them.\n  [#2070](https://github.com/rustwasm/wasm-bindgen/pull/2070)\n\n* Experimental bindings for the Clipboard browser APIs have been added.\n  [#2100](https://github.com/rustwasm/wasm-bindgen/pull/2100)\n\n### Changed\n\n* WebGPU bindings have been updated.\n  [#2080](https://github.com/rustwasm/wasm-bindgen/pull/2080)\n\n* `setBindGroup` methods for WebIDL now take immutable slices instead of mutable\n  slices.\n  [#2087](https://github.com/rustwasm/wasm-bindgen/pull/2087)\n\n* JS code generation for `catch` functions has been improved.\n  [#2098](https://github.com/rustwasm/wasm-bindgen/pull/2098)\n\n* Usage of NPM dependencies with the `web` target is no longer an error.\n  [#2103](https://github.com/rustwasm/wasm-bindgen/pull/2103)\n\n### Fixed\n\n* Combining `js_name` with `getter` and `setter` has now been fixed.\n  [#2074](https://github.com/rustwasm/wasm-bindgen/pull/2074)\n\n* Importing global names which conflict with other namespaces should now work\n  correctly.\n  [#2057](https://github.com/rustwasm/wasm-bindgen/pull/2057)\n\n* Acquiring the global JS object has been fixed for Firefox extension content\n  scripts.\n  [#2099](https://github.com/rustwasm/wasm-bindgen/pull/2099)\n\n* The output of `wasm-bindgen` is now compatible with Webpack 5 and the updated\n  version of the Wasm ESM integration specification.\n  [#2110](https://github.com/rustwasm/wasm-bindgen/pull/2099)\n\n--------------------------------------------------------------------------------\n\n## 0.2.60\n\nReleased 2020-03-25.\n\n### Added\n\n* The `js_sys` types are now more accurately reflected in TypeScript.\n  [#2028](https://github.com/rustwasm/wasm-bindgen/pull/2028)\n\n* The timeout in `wasm-bindgen-test-runner`'s timeout can now be configured via\n  `WASM_BINDGEN_TEST_TIMEOUT`.\n  [#2036](https://github.com/rustwasm/wasm-bindgen/pull/2036)\n\n* WebIDL for WebXR has been added.\n  [#2000](https://github.com/rustwasm/wasm-bindgen/pull/2000)\n\n### Changed\n\n* The WebIDL for WebGPU has been updated.\n  [#2037](https://github.com/rustwasm/wasm-bindgen/pull/2037)\n\n--------------------------------------------------------------------------------\n\n## 0.2.59\n\nReleased 2020-03-03.\n\n### Added\n\n* The `js_sys::Number` type now has a number of JS-number associated constants\n  on it now.\n  [#1965](https://github.com/rustwasm/wasm-bindgen/pull/1965)\n\n* The `getTransform` method on `CanvasRenderingContext2D` has been added.\n  [#1966](https://github.com/rustwasm/wasm-bindgen/pull/1966)\n\n* Initial experimental support was added for electron targets with a new\n  `--omit-imports` flag.\n  [#1958](https://github.com/rustwasm/wasm-bindgen/pull/1958)\n\n* Optional struct fields are now reflected idiomatically in TypeScript.\n  [#1990](https://github.com/rustwasm/wasm-bindgen/pull/1990)\n\n* Typed arrays in `js_sys` now have `get_index` and `set_index` methods.\n  [#2001](https://github.com/rustwasm/wasm-bindgen/pull/2001)\n\n* The `web_sys::Blob` type has been updated with `arrayBuffer` and `text`\n  methods.\n  [#2008](https://github.com/rustwasm/wasm-bindgen/pull/2008)\n\n* Support for unstable browser interfaces has now been added. By compiling\n  `web_sys` with `--cfg web_sys_unstable_apis` (typically via `RUSTFLAGS`)\n  you'll be able to access all bound WebIDL functions, even those like GPU\n  support on the web, which has now also had its WebIDL updated.\n  [#1997](https://github.com/rustwasm/wasm-bindgen/pull/1997)\n\n* The compile time for `web_sys` has been massively reduced by pre-generating\n  Rust code from WebIDL. It is also readable now since it generates\n  `#[wasm_bindgen]` annotations instead of expanded code.\n  [#2012](https://github.com/rustwasm/wasm-bindgen/pull/2012)\n\n* A new `typescript_type` attribute can be used to specify the TypeScript type\n  for an `extern` type. [#2012](https://github.com/rustwasm/wasm-bindgen/pull/2012)\n\n* It is now possible to use string values with `#[wasm_bindgen]` `enum`s.\n  [#2012](https://github.com/rustwasm/wasm-bindgen/pull/2012)\n\n* A new `skip_tyepscript` attribute is recognized to skip generating TypeScript\n  bindings for a function or type.\n  [#2016](https://github.com/rustwasm/wasm-bindgen/pull/2016)\n\n### Changed\n\n* More `uniformMatrix*` bindings now are whitelisted take shared slice instead\n  of a mutable slice.\n  [#1957](https://github.com/rustwasm/wasm-bindgen/pull/1957)\n\n* Non-`dependency` keys in `package.json` are now ignored instead of error'd\n  about.\n  [#1969](https://github.com/rustwasm/wasm-bindgen/pull/1969)\n\n* WebGPU has been removed from `web_sys` since it was outdated and didn't work\n  anywhere anyway.\n  [#1972](https://github.com/rustwasm/wasm-bindgen/pull/1972)\n\n* The JS heap of objects managed by wasm-bindgen has had its definition\n  tightended up a bit.\n  [#1987](https://github.com/rustwasm/wasm-bindgen/pull/1987)\n\n* The `self` identifier is no longer used on the `no-modules` target, making it a\n  bit more flexible in more environments.\n  [#1995](https://github.com/rustwasm/wasm-bindgen/pull/1995)\n\n* The wasm-loading logic is now more flexible and can take promises as well.\n  [#1996](https://github.com/rustwasm/wasm-bindgen/pull/1996)\n\n* JS glue for closures is now deduplicated.\n  [#2002](https://github.com/rustwasm/wasm-bindgen/pull/2002)\n\n* The `web_sys` crate now emits more accurate TypeScript definitions using named\n  types instead of `any` everywhere.\n  [#1998](https://github.com/rustwasm/wasm-bindgen/pull/1998)\n\n* The `send_with_u8_array` methods in `web_sys` are whitelisted to take shared\n  slices instead of mutable slices.\n  [#2015](https://github.com/rustwasm/wasm-bindgen/pull/2015)\n\n--------------------------------------------------------------------------------\n\n## 0.2.58\n\nReleased 2020-01-07.\n\n### Added\n\n* When using the `no-modules` output type the initialization path for the wasm\n  file is now optional if it can be inferred from the current JS script.\n  [#1938](https://github.com/rustwasm/wasm-bindgen/pull/1938)\n\n### Fixed\n\n* TypeScript for struct methods that have floats has been fixed.\n  [#1945](https://github.com/rustwasm/wasm-bindgen/pull/1945)\n\n--------------------------------------------------------------------------------\n\n## 0.2.57\n\nReleased 2020-01-06.\n\n### Fixed\n\n* The `js_sys::Promise` type is now marked as `#[must_use]`\n  [#1927](https://github.com/rustwasm/wasm-bindgen/pull/1927)\n\n* Duplicate imports of the same name are now handled correctly again.\n  [#1942](https://github.com/rustwasm/wasm-bindgen/pull/1942)\n\n--------------------------------------------------------------------------------\n\n## 0.2.56\n\nReleased 2019-12-20.\n\n### Added\n\n* Added a `#[wasm_bindgen(inspectable)]` attribute for exported objects to\n  generate `toJSON` and `toString` implementations.\n  [#1876](https://github.com/rustwasm/wasm-bindgen/pull/1876)\n\n* Support for the most recent interface types proposal has been implemented.\n  [#1882](https://github.com/rustwasm/wasm-bindgen/pull/1882)\n\n* Initial support for async iterators has been added.\n  [#1895](https://github.com/rustwasm/wasm-bindgen/pull/1895)\n\n* Support for an `async` start function was added.\n  [#1905](https://github.com/rustwasm/wasm-bindgen/pull/1905)\n\n* `Array::iter` and `Array::to_vec` methods were added to js-sys.\n  [#1909](https://github.com/rustwasm/wasm-bindgen/pull/1909)\n\n### Fixed\n\n* Another webkit-specific WebIDL construct was fixed in web-sys.\n  [#1865](https://github.com/rustwasm/wasm-bindgen/pull/1865)\n\n--------------------------------------------------------------------------------\n\n## 0.2.55\n\nReleased 2019-11-19.\n\n### Fixed\n\n* Running `wasm-bindgen` over empty anyref modules now works again.\n  [#1861](https://github.com/rustwasm/wasm-bindgen/pull/1861)\n\n* Support for multi-value JS engines has been fixed as a Wasm interface types\n  polyfill.\n  [#1863](https://github.com/rustwasm/wasm-bindgen/pull/1863)\n\n--------------------------------------------------------------------------------\n\n## 0.2.54\n\nReleased 2019-11-07.\n\n### Added\n\n* A safe `to_vec` method has been added for typed arrays.\n  [#1844](https://github.com/rustwasm/wasm-bindgen/pull/1844)\n\n* A unsafe method `view_mut_raw` has been added to typed arrays.\n  [#1850](https://github.com/rustwasm/wasm-bindgen/pull/1850)\n\n* The `HTMLImageElement` WebIDL has been updated with recent features.\n  [#1842](https://github.com/rustwasm/wasm-bindgen/pull/1842)\n\n* Binary crates are now supported and `fn main` will be automatically executed\n  like the `start` function.\n  [#1843](https://github.com/rustwasm/wasm-bindgen/pull/1843)\n\n### Changed\n\n* Some JS glue generation has been tweaked to avoid TypeScript warnings.\n  [#1852](https://github.com/rustwasm/wasm-bindgen/pull/1852)\n\n--------------------------------------------------------------------------------\n\n## 0.2.53\n\nReleased 2019-10-29.\n\n### Fixed\n\n* A bug with the experimental support for multi-value interface types has been\n  fixed.\n  [#1839](https://github.com/rustwasm/wasm-bindgen/pull/1839)\n\n--------------------------------------------------------------------------------\n\n## 0.2.52\n\nReleased 2019-10-24.\n\n### Added\n\n* The support for wasm-interface-types now uses multi-value by default.\n  [#1805](https://github.com/rustwasm/wasm-bindgen/pull/1805)\n\n* The Worklet IDL has been updated.\n  [#1817](https://github.com/rustwasm/wasm-bindgen/pull/1817)\n\n* The HTMLInputElement type has selectionStart and selectionEnd properties now.\n  [#1811](https://github.com/rustwasm/wasm-bindgen/pull/1811)\n\n* An `unintern` function has been added to remove an interned string from the\n  cache.\n  [#1828](https://github.com/rustwasm/wasm-bindgen/pull/1828)\n\n### Changed\n\n* Some WebIDL indexing getters have been corrected to reflect that they can\n  throw and/or return `undefined`\n  [#1789](https://github.com/rustwasm/wasm-bindgen/pull/1789)\n\n### Fixed\n\n* A bug with `TextDecoder` and Safari has been fxied\n  [#1789](https://github.com/rustwasm/wasm-bindgen/pull/1789)\n\n--------------------------------------------------------------------------------\n\n## 0.2.51\n\nReleased 2019-09-26.\n\n### Added\n\n* The `wasm-bindgen-futures` and `wasm-bindgen-test` crates now require Nightly\n  Rust and have a new major version published as a result. These crates now\n  support `async`/`await` by default, and they will be supported in the stable\n  Rust 1.39.0 release. The previous versions of crates will continue to work on\n  stable today.\n  [#1741](https://github.com/rustwasm/wasm-bindgen/pull/1741)\n\n* Using `#[wasm_bindgen]` on an `async` function will now work and return a\n  `Promise` on the JS side of things.\n  [#1754](https://github.com/rustwasm/wasm-bindgen/pull/1754)\n\n* More helper methods for `js_sys::Array` have been added.\n  [#1749](https://github.com/rustwasm/wasm-bindgen/pull/1749)\n\n* Initial support for the WebAssembly multi-value proposal has been added.\n  [#1764](https://github.com/rustwasm/wasm-bindgen/pull/1764)\n\n* Constructors for `js_sys::Date` with optional parameters has been added.\n  [#1759](https://github.com/rustwasm/wasm-bindgen/pull/1759)\n\n* Headless tests can now be run against a remote webdriver client\n  [#1744](https://github.com/rustwasm/wasm-bindgen/pull/1744)\n\n### Changed\n\n* The `passStringToWasm` function has been optimized for size.\n  [#1736](https://github.com/rustwasm/wasm-bindgen/pull/1736)\n\n### Fixed\n\n* BOM markers will not be preserved when passing strings to/from wasm.\n  [#1730](https://github.com/rustwasm/wasm-bindgen/pull/1730)\n\n* Importing a `static` value which isn't a `JsValue` has been fixed.\n  [#1784](https://github.com/rustwasm/wasm-bindgen/pull/1784)\n\n* Converting `undefined` to a Rust value via `into_serde` has been fixed.\n  [#1783](https://github.com/rustwasm/wasm-bindgen/pull/1783)\n\n* Routine errors are no longer erroneously logged in debug mode.\n  [#1788](https://github.com/rustwasm/wasm-bindgen/pull/1788)\n\n--------------------------------------------------------------------------------\n\n## 0.2.50\n\nReleased 2019-08-19.\n\n### Added\n\n* Experimental support with a `WASM_INTERFACE_TYPES=1` environment variable has\n  been added to emit a Wasm Interface Types custom section, making the output of\n  `wasm-bindgen` a single standalone WebAssembly file.\n  [#1725](https://github.com/rustwasm/wasm-bindgen/pull/1725)\n\n### Fixed\n\n* Unrelated errors are now no longer accidentally swallowed by the\n  `instantiateStreaming` fallback.\n  [#1723](https://github.com/rustwasm/wasm-bindgen/pull/1723)\n\n--------------------------------------------------------------------------------\n\n## 0.2.49\n\nReleased 2019-08-14.\n\n### Added\n\n* Add binding for `Element.getElementsByClassName`.\n  [#1665](https://github.com/rustwasm/wasm-bindgen/pull/1665)\n\n* `PartialEq` and `Eq` are now implemented for all `web-sys` types.\n  [#1673](https://github.com/rustwasm/wasm-bindgen/pull/1673)\n\n* The `wasm-bindgen-futures` crate now has support for futures when the\n  experimental WebAssembly threading feature is enabled.\n  [#1514](https://github.com/rustwasm/wasm-bindgen/pull/1514)\n\n* A new `enable-interning` feature is available to intern strings and reduce the\n  cost of transferring strings across the JS/Rust boundary.\n  [#1612](https://github.com/rustwasm/wasm-bindgen/pull/1612)\n\n* The `wasm-bindgen` CLI has experimental support for reading native\n  `webidl-bindings` custom sections and generating JS glue. This support is in\n  addition to Rust's own custom sections and allows using `wasm-bindgen` with\n  binaries produced by other than rustc possibly.\n  [#1690](https://github.com/rustwasm/wasm-bindgen/pull/1690)\n\n* New environment variables have been added to configure webdriver startup\n  arguments.\n  [#1703](https://github.com/rustwasm/wasm-bindgen/pull/1703)\n\n* New `JsValue::{is_truthy,is_falsy}` methods are now available.\n  [#1638](https://github.com/rustwasm/wasm-bindgen/pull/1638)\n\n### Changed\n\n* JS import shims are now skipped again when they are unnecessary.\n  [#1654](https://github.com/rustwasm/wasm-bindgen/pull/1654)\n\n* WebAssembly output files now directly embed the module/name for imports if\n  supported for the target and the import, reducing JS shims even further.\n  [#1689](https://github.com/rustwasm/wasm-bindgen/pull/1689)\n\n### Fixed\n\n* Support for threads have been updated for LLVM 9 and nightly Rust.\n  [#1675](https://github.com/rustwasm/wasm-bindgen/pull/1675)\n  [#1688](https://github.com/rustwasm/wasm-bindgen/pull/1688)\n\n* The `anyref` passes in `wasm-bindgen` have seen a number of fixes to improve\n  their correctness and get the full test suite running.\n  [#1692](https://github.com/rustwasm/wasm-bindgen/pull/1692)\n  [#1704](https://github.com/rustwasm/wasm-bindgen/pull/1704)\n\n* Support for `futures-preview 0.3.0-alpha.18` has been added to\n  `wasm-bindgen-futures`.\n  [#1716](https://github.com/rustwasm/wasm-bindgen/pull/1716)\n\n--------------------------------------------------------------------------------\n\n## 0.2.48\n\nReleased 2019-07-11.\n\n### Added\n\n* All typed arrays now implement `From` for the corresponding Rust slice type,\n  providing a safe way to create an instance which copies the data.\n  [#1620](https://github.com/rustwasm/wasm-bindgen/pull/1620)\n\n* `Function::bind{2,3,4}` are now available in `js-sys`.\n  [#1633](https://github.com/rustwasm/wasm-bindgen/pull/1633)\n\n### Changed\n\n* More WebGL methods have been updated to use shared slices instead of mutable\n  slices.\n  [#1639](https://github.com/rustwasm/wasm-bindgen/pull/1639)\n\n* When using the `bundler` target the import of the Wasm file now uses the\n  `.wasm` extension to ensure a Wasm file is loaded.\n  [#1646](https://github.com/rustwasm/wasm-bindgen/pull/1646)\n\n* The old internal `Stack` trait has been removed since it is no longer used.\n  [#1624](https://github.com/rustwasm/wasm-bindgen/pull/1624)\n\n### Fixed\n\n* The `js_sys::global()` accessor now attempts other strategies before falling\n  back to a `Function` constructor which can violate some strict CSP settings.\n  [#1650](https://github.com/rustwasm/wasm-bindgen/pull/1649)\n\n* Dropping a `JsFuture` no longer logs a benign error to the console.\n  [#1649](https://github.com/rustwasm/wasm-bindgen/pull/1649)\n\n* Fixed an assertion which could happen in some modules when generating\n  bindings.\n  [#1617](https://github.com/rustwasm/wasm-bindgen/pull/1617)\n\n--------------------------------------------------------------------------------\n\n## 0.2.47\n\nReleased 2019-06-19.\n\n### Changed\n\n* The `HtmlHyperlinkElement` should now include more native methods after a\n  small edit to the WebIDL.\n  [#1604](https://github.com/rustwasm/wasm-bindgen/pull/1604)\n\n* Duplicate names for getters/setters now have a first-class `wasm-bindgen`\n  error.\n  [#1605](https://github.com/rustwasm/wasm-bindgen/pull/1605)\n\n### Fixed\n\n* TypeScript definition of `init` with `--target web` now reflects that the\n  first argument is optional.\n  [#1599](https://github.com/rustwasm/wasm-bindgen/pull/1599)\n\n* A panic with the futures 0.3 support has been fixed.\n  [#1598](https://github.com/rustwasm/wasm-bindgen/pull/1598)\n\n* More slice types are recognized as becoming immutable in some WebIDL methods.\n  [#1602](https://github.com/rustwasm/wasm-bindgen/pull/1602)\n\n* The function table is now no longer too aggressively removed.\n  [#1606](https://github.com/rustwasm/wasm-bindgen/pull/1606)\n\n--------------------------------------------------------------------------------\n\n## 0.2.46\n\nReleased 2019-06-14.\n\n### Added\n\n* Bindings for `Array#flat` and `Array#flatMap` have been added.\n  [#1573](https://github.com/rustwasm/wasm-bindgen/pull/1573)\n\n* All `#[wasm_bindgen]` types now `AsRef` to themselves.\n  [#1583](https://github.com/rustwasm/wasm-bindgen/pull/1583)\n\n* When using `--target web` the path passed to `init` is no longer required.\n  [#1579](https://github.com/rustwasm/wasm-bindgen/pull/1579)\n\n### Fixed\n\n* Some diagnostics related to compiler errors in `#[wasm_bindgen]` have been\n  improved.\n  [#1550](https://github.com/rustwasm/wasm-bindgen/pull/1550)\n\n* The support for weak references has been updated to the current JS proposal.\n  [#1557](https://github.com/rustwasm/wasm-bindgen/pull/1557)\n\n* Documentation and feature gating for web-sys dictionaries has improved.\n  [#1572](https://github.com/rustwasm/wasm-bindgen/pull/1572)\n\n* Getter and setter TypeScript has been fixed.\n  [#1577](https://github.com/rustwasm/wasm-bindgen/pull/1577)\n\n* The `env_logger` crate and its tree of dependencies is no longer required to\n  build `web-sys`.\n  [#1586](https://github.com/rustwasm/wasm-bindgen/pull/1586)\n\n--------------------------------------------------------------------------------\n\n## 0.2.45\n\nReleased 2019-05-20.\n\n### Fixed\n\n* Using `__wbindgen_cb_forget` on `--target web` has been fixed.\n  [#1544](https://github.com/rustwasm/wasm-bindgen/pull/1544)\n\n### Changed\n\n* More whitelists have been added for `web-sys` to use shared slices instead of\n  mutable slices.\n  [#1539](https://github.com/rustwasm/wasm-bindgen/pull/1539)\n\n--------------------------------------------------------------------------------\n\n## 0.2.44\n\nReleased 2019-05-16.\n\n### Added\n\n* Support for exporting \"fields\" on JS objects wrapping Rust structs which are\n  hooked up to getters/setters has been added. This is in addition to `pub`\n  struct fields and allows performing more complicated computations in\n  getters/setters.\n  [#1440](https://github.com/rustwasm/wasm-bindgen/pull/1440)\n\n* Support for futures 0.3 (and `async` / `await` syntax) has been added to the\n  `wasm-bindgen-futures` crate.\n  [#1507](https://github.com/rustwasm/wasm-bindgen/pull/1507)\n\n* Stacks of imported JS functions that throw and aren't marked `catch` are now\n  logged in debug mode.\n  [#1466](https://github.com/rustwasm/wasm-bindgen/pull/1466)\n\n* A utility for counting the size of the `anyref` heap has been added.\n  [#1521](https://github.com/rustwasm/wasm-bindgen/pull/1521)\n\n* Passing ASCII-only strings to Wasm should now be significantly faster.\n  [#1470](https://github.com/rustwasm/wasm-bindgen/pull/1470)\n\n* The `selectionStart` and `selectionEnd` APIs of text areas have been enabled.\n  [#1533](https://github.com/rustwasm/wasm-bindgen/pull/1533)\n\n### Changed\n\n* Some more methods in `web-sys` now take immutable slices instead of mutable\n  ones.\n  [#1508](https://github.com/rustwasm/wasm-bindgen/pull/1508)\n\n* TypeScript bindings for `Option<T>` arguments now use `foo?` where possible.\n  [#1483](https://github.com/rustwasm/wasm-bindgen/pull/1483)\n\n### Fixed\n\n* Unnecessary bindings to `__wbindgen_object_drop_ref` have been fixed.\n  [#1504](https://github.com/rustwasm/wasm-bindgen/pull/1504)\n\n* Some direct imports have been fixed for `--target web`.\n  [#1503](https://github.com/rustwasm/wasm-bindgen/pull/1503)\n\n* Both importing and exporting the same name has been fixed.\n  [#1506](https://github.com/rustwasm/wasm-bindgen/pull/1506)\n\n* TypeScript typings for `init` in `--target web` have been fixed.\n  [#1520](https://github.com/rustwasm/wasm-bindgen/pull/1520)\n\n* Calling a dropped `Closure` should no longer \"segfault\" but produce a clear\n  error.\n  [#1530](https://github.com/rustwasm/wasm-bindgen/pull/1530)\n\n--------------------------------------------------------------------------------\n\n## 0.2.43\n\nReleased 2019-04-29.\n\n### Added\n\n* Support for `isize` and `usize` arrays has been added.\n  [#1448](https://github.com/rustwasm/wasm-bindgen/pull/1448)\n\n* Support customizing `dyn_ref` and friends via a new `is_type_of` attribute and\n  apply it to some `js_sys` bindings.\n  [#1405](https://github.com/rustwasm/wasm-bindgen/pull/1405)\n  [#1450](https://github.com/rustwasm/wasm-bindgen/pull/1450)\n  [#1490](https://github.com/rustwasm/wasm-bindgen/pull/1490)\n\n* A new `skip` attribute to `#[wasm_bindgen]` has been added to skip fields and\n  methods when generating bindings.\n  [#1410](https://github.com/rustwasm/wasm-bindgen/pull/1410)\n\n* More bindings have been added to `web-sys` for interfaces tagged with\n  `[NoInterfaceObject]` in WebIDL. These types always fail `dyn_ref` and friends\n  and must be manually casted into.\n  [#1449](https://github.com/rustwasm/wasm-bindgen/pull/1449)\n\n* Added `Debug for JsFuture`.\n  [#1477](https://github.com/rustwasm/wasm-bindgen/pull/1477)\n\n* Initial bindings for `Atomics` and `SharedArrayBuffer` have been added to\n  `js_sys`.\n  [#1463](https://github.com/rustwasm/wasm-bindgen/pull/1463)\n\n* Bindings for `Object.fromEntries` has been added to `js_sys`.\n  [#1456](https://github.com/rustwasm/wasm-bindgen/pull/1456)\n\n* Tuple structs exported to JS now have indexed struct properties.\n  [#1467](https://github.com/rustwasm/wasm-bindgen/pull/1467)\n\n* Binding for `new Function(args, body)` has been added to `js_sys`.\n  [#1492](https://github.com/rustwasm/wasm-bindgen/pull/1492)\n\n* Bindings for some variadic functions have been added to `js_sys`.\n  [#1491](https://github.com/rustwasm/wasm-bindgen/pull/1491)\n\n### Changed\n\n* Many `js-sys` types have received various tweaks and improvements to ensure\n  they're consistent and work similarly to native Rust types.\n  [#1447](https://github.com/rustwasm/wasm-bindgen/pull/1447)\n  [#1444](https://github.com/rustwasm/wasm-bindgen/pull/1444)\n  [#1473](https://github.com/rustwasm/wasm-bindgen/pull/1473)\n\n* Dummy types in `js-sys` only used to namespace methods were removed and now\n  modules are used for namespacing instead.\n  [#1451](https://github.com/rustwasm/wasm-bindgen/pull/1451)\n\n* Bindings in `web-sys` are formatted by default for ease of usage in IDEs.\n  [#1461](https://github.com/rustwasm/wasm-bindgen/pull/1461)\n\n### Fixed\n\n* Documentation for Rust methods now show up in TypeScript as well.\n  [#1472](https://github.com/rustwasm/wasm-bindgen/pull/1472)\n\n--------------------------------------------------------------------------------\n\n## 0.2.42\n\nReleased 2019-04-11.\n\n### Fixed\n\n* Fixed an issue in Firefox where using `encodeInto` accidentally caused empty\n  strings to keep getting passed to Rust.\n  [#1434](https://github.com/rustwasm/wasm-bindgen/pull/1434)\n\n--------------------------------------------------------------------------------\n\n## 0.2.41\n\nReleased 2019-04-10.\n\n### Added\n\n* Initial support for transitive NPM dependencies has been added.\n  [#1305](https://github.com/rustwasm/wasm-bindgen/pull/1305)\n\n* The `constructor` property of `Object` is now bound in `js-sys`.\n  [#1403](https://github.com/rustwasm/wasm-bindgen/pull/1403)\n\n* The `Closure` type now always implements `Debug`.\n  [#1408](https://github.com/rustwasm/wasm-bindgen/pull/1408)\n\n* Closures which take one `&T` argument are now supported. More implementations\n  may be added in the future, but for now it's just one argument closures.\n  [#1417](https://github.com/rustwasm/wasm-bindgen/pull/1417)\n\n* The TypeScript bindings for `--web` now expose the `init` function.\n  [#1412](https://github.com/rustwasm/wasm-bindgen/pull/1412)\n\n* A `js_sys::JsString::is_valid_utf16` method has been added to handle unpaired\n  surrogates in JS strings. Surrounding documentation has also been updated to\n  document this potential pitfall.\n  [#1416](https://github.com/rustwasm/wasm-bindgen/pull/1416)\n\n* A `wasm_bindgen::function_table()` function has been added to expose the\n  `WebAssembly.Table` and get access to it in Wasm code.\n  [#1431](https://github.com/rustwasm/wasm-bindgen/pull/1431)\n\n### Fixed\n\n* Reexporting the `wasm_bindgen` macro in crates has been fixed.\n  [#1359](https://github.com/rustwasm/wasm-bindgen/pull/1359)\n\n* Returning `u32` to JS has been fixed where large `u32` values would show up in\n  JS as large negative numbers.\n  [#1401](https://github.com/rustwasm/wasm-bindgen/pull/1401)\n\n* Manual instantiation with `WebAssembly.Module` has been fixed.\n  [#1419](https://github.com/rustwasm/wasm-bindgen/pull/1419)\n\n* Error message for non-`Copy` public struct fields has been improved.\n  [#1430](https://github.com/rustwasm/wasm-bindgen/pull/1430)\n\n### Changed\n\n* Performance of passing strings to Rust in Node.js has been improved.\n  [#1391](https://github.com/rustwasm/wasm-bindgen/pull/1391)\n\n* Performance of `js_sys::try_iter` has been improved.\n  [#1393](https://github.com/rustwasm/wasm-bindgen/pull/1393)\n\n* Performance of using `TextEncoder#encodeInto` has been improved.\n  [#1414](https://github.com/rustwasm/wasm-bindgen/pull/1414)\n\n--------------------------------------------------------------------------------\n\n## 0.2.40\n\nReleased 2019-03-21.\n\n### Added\n\n* TypeScript and JS generation will now attempt to preserve argument names in\n  the generated JS where possible.\n  [#1344](https://github.com/rustwasm/wasm-bindgen/pull/1344)\n\n* Enable `Option<T>` support for enums defined in WebIDL.\n  [#1350](https://github.com/rustwasm/wasm-bindgen/pull/1350)\n\n* Add a `raw_module` attribute to `#[wasm_bindgen]` which is the same as\n  `module` except doesn't attempt to recognize `./`, `../`, `or `/` prefixed\n  paths.\n  [#1353](https://github.com/rustwasm/wasm-bindgen/pull/1353)\n\n* The `wasm-bindgen` CLI flags have now all been renamed under a `--target`\n  flag. Instead of `--web` you'll now pass `--target web`, for example. This\n  increases consistency between the `wasm-bindgen` and `wasm-pack` CLI.\n  [#1369](https://github.com/rustwasm/wasm-bindgen/pull/1369)\n\n### Fixed\n\n* Definitions for `TypedArray` imports of `js-sys` have been unified with a\n  macro to improve consistency and fix future bugs.\n  [#1371](https://github.com/rustwasm/wasm-bindgen/pull/1371)\n\n* Usage of `--no-modules` in CloudFlare workers should now work by default.\n  [#1384](https://github.com/rustwasm/wasm-bindgen/pull/1384)\n\n* A use-after-free when a closure is reinvoked after being destroyed on the Rust\n  die has been fixed.\n  [#1385](https://github.com/rustwasm/wasm-bindgen/pull/1385)\n\n* A bug causing nondeterministic generation of JS bindings has been fixed.\n  [#1383](https://github.com/rustwasm/wasm-bindgen/pull/1383)\n\n--------------------------------------------------------------------------------\n\n## 0.2.39\n\nReleased 2018-03-13.\n\n### Added\n\n* Crates can now import locally written JS snippets to get bundled into the\n  final output. See [RFC 6] for more details as well as the PR.\n  [#1295](https://github.com/rustwasm/wasm-bindgen/pull/1295)\n\n[RFC 6]: https://github.com/rustwasm/rfcs/pull/6\n\n### Changed\n\n* A typo in the return value of `slice` methods on typed arrays in `js-sys` was\n  corrected.\n  [#1321](https://github.com/rustwasm/wasm-bindgen/pull/1321)\n\n* The directory specified by `--out-dir` is now created if it doesn't exist\n  already.\n  [#1330](https://github.com/rustwasm/wasm-bindgen/pull/1330)\n\n### Fixed\n\n* A bug where if `nom` was in a crate graph and was compiled with the\n  `verbose-errors` feature has been fixed. Previously the `wasm-bindgen-webidl`\n  crate wouldn't compile, and now it will.\n  [#1338](https://github.com/rustwasm/wasm-bindgen/pull/1338)\n\n--------------------------------------------------------------------------------\n\n## 0.2.38\n\nReleased 2019-03-04.\n\n### Added\n\n* Support for `Option<RustStruct>` in `#[wasm_bindgen]` functions has now been\n  added.\n  [#1275](https://github.com/rustwasm/wasm-bindgen/pull/1275)\n\n* Experimental support for the `anyref` type proposal in WebAssembly has now\n  landed and is enabled with `WASM_BINDGEN_ANYREF=1`.\n  [#1002](https://github.com/rustwasm/wasm-bindgen/pull/1002)\n\n* Support for the new browser `TextEncode#encodeInto` API has been added.\n  [#1279](https://github.com/rustwasm/wasm-bindgen/pull/1279)\n\n* JS doc comments are now added to TypeScript bindings in addition to the JS\n  bindings generated.\n  [#1302](https://github.com/rustwasm/wasm-bindgen/pull/1302)\n\n* Initial support for `FnOnce` closures has been added to the `Closure` type.\n  [#1281](https://github.com/rustwasm/wasm-bindgen/pull/1281)\n\n### Fixed\n\n* Fixed an internal assert tripping when some modules were compiled with LTO.\n  [#1274](https://github.com/rustwasm/wasm-bindgen/pull/1274)\n\n* The `Context` type in the `wasm-bindgen-test` crate had its JS name changed to\n  avoid conflicts with other crates that have a `Context` type being exported.\n  [#1280](https://github.com/rustwasm/wasm-bindgen/pull/1280)\n\n* The headless test runner for Safari on macOS High Sierra has been fixed.\n  [#1298](https://github.com/rustwasm/wasm-bindgen/pull/1298)\n\n### Changed\n\n* The `wasm-bindgen` CLI tool now emits the `producers` section again with\n  relevant bugs having been fixed in the meantime. The\n  `--remove-producers-section` flag can continue to be used to omit emission of\n  this section.\n  [#1263](https://github.com/rustwasm/wasm-bindgen/pull/1263)\n\n--------------------------------------------------------------------------------\n\n## 0.2.37\n\nReleased 2019-02-15.\n\n### Added\n\n* The `HtmlMediaElement` type now exposes a `src_object` getter.\n  [#1248](https://github.com/rustwasm/wasm-bindgen/pull/1248).\n\n* The `js_sys::Reflect` type now has specializes getter/setters for `u32` and\n  `f64` indices.\n  [#1225](https://github.com/rustwasm/wasm-bindgen/pull/1225).\n\n* A `--remove-producers-section` flag has been added to the CLI tool to, well,\n  remove the `producers` section from the final Wasm file.\n  [#1256](https://github.com/rustwasm/wasm-bindgen/pull/1256).\n\n### Fixed\n\n* The `wasm-bindgen` CLI tool will correctly strip DWARF debug information\n  unless `--keep-debug` is passed.\n  [#1255](https://github.com/rustwasm/wasm-bindgen/pull/1255).\n\n### Changed\n\n* The `wasm-bindgen` CLI tool no longer emits the `producers` custom section by\n  default to work around a [webpack bug]. See\n  [#1260](https://github.com/rustwasm/wasm-bindgen/pull/1260).\n\n[webpack bug]: https://github.com/webpack/webpack/pull/8786\n\n--------------------------------------------------------------------------------\n\n## 0.2.36\n\nReleased 2019-02-12.\n\n### Fixed\n\n* Fixed a bug where using closures and LTO together caused a panic inside the\n  `wasm-bindgen` CLI tool. See\n  [#1244](https://github.com/rustwasm/wasm-bindgen/issues/1244).\n\n--------------------------------------------------------------------------------\n\n## 0.2.35\n\nReleased 2019-02-12.\n\n### Changed\n\n* `wasm-bindgen` now internally uses the `walrus` crate to perform its\n  transformations of the Wasm that rustc/LLVM emits. See\n  [#1237](https://github.com/rustwasm/wasm-bindgen/pull/1237).\n\n### Fixed\n\n* When `WebAssembly.instantiateStreaming` fails due to incorrect MIME type,\n  *actually* properly recover. See\n  [#1243](https://github.com/rustwasm/wasm-bindgen/pull/1243).\n\n--------------------------------------------------------------------------------\n\n## 0.2.34\n\nReleased 2019-02-11.\n\n### Added\n\n* Added support for optional `enum`s. See\n  [#1214](https://github.com/rustwasm/wasm-bindgen/pull/1214).\n* Added the `UnwrapThrowExt<T>` trait, which can enable smaller code sizes for\n  panics. See [#1219](https://github.com/rustwasm/wasm-bindgen/pull/1219).\n\n### Fixed\n\n* Some `WebGlRenderingContext` methods are now whitelisted to use shared slices\n  instead of exclusive slices. See\n  [#1199](https://github.com/rustwasm/wasm-bindgen/pull/1199).\n* Fixed TypeScript definitions for optional types. See\n  [#1201](https://github.com/rustwasm/wasm-bindgen/pull/1201).\n* Quiet clippy warnings inside generated code. See\n  [1207](https://github.com/rustwasm/wasm-bindgen/pull/1207).\n* Fixed using `cfg_attr` and `wasm_bindgen` together like `#[cfg_attr(...,\n  wasm_bindgen)]`. See\n  [1208](https://github.com/rustwasm/wasm-bindgen/pull/1208).\n* The WebAudio example program was fixed. See\n  [#1215](https://github.com/rustwasm/wasm-bindgen/pull/1215).\n* Fixed logging HTML in `wasm-bindgen-test`. See\n  [#1233](https://github.com/rustwasm/wasm-bindgen/pull/1233).\n* When `WebAssembly.instantiateStreaming` fails due to incorrect MIME type,\n  properly recover. See\n  [#1235](https://github.com/rustwasm/wasm-bindgen/pull/1235).\n\n--------------------------------------------------------------------------------\n\n## 0.2.33\n\nReleased 2019-01-18.\n\n### Added\n\n* Improved the `Debug` output of `JsValue`\n  [#1161](https://github.com/rustwasm/wasm-bindgen/pull/1161)\n\n* Bindings for `JSON.stringify` and its optional arguments have been added\n  [#1190](https://github.com/rustwasm/wasm-bindgen/pull/1190)\n\n### Fixed\n\n* A bug with windows binaries being released has ben resolved.\n\n--------------------------------------------------------------------------------\n\n## 0.2.32\n\nReleased 2019-01-16.\n\n### Added\n\n* Added support for Web IDL sequences. This enabled bindings generation for a\n  couple more Web APIs. We generate functions for Web APIs that take sequences\n  to accept any iterable, and for Web APIs that return sequences, a\n  `js_sys::Array` is returned. See\n  [#1152](https://github.com/rustwasm/wasm-bindgen/pull/1152) and\n  [#1038](https://github.com/rustwasm/wasm-bindgen/issues/1038).\n* The `wasm-bindgen-test` test runner will capture `console.debug`,\n  `console.info`, and `console.warn` log messages and print them to `stdout`\n  now. It already supported `console.log` and `console.error` and continues to\n  support them. See\n  [#1183](https://github.com/rustwasm/wasm-bindgen/issues/1183) and\n  [#1184](https://github.com/rustwasm/wasm-bindgen/pull/1184).\n* Added additional `--debug`-only assertions in the emitted JS glue for cases\n  where an imported JS function that is not annotated with\n  `#[wasm_bindgen(catch)]` throws an exception. This should help catch some bugs\n  earlier! See [#1179](https://github.com/rustwasm/wasm-bindgen/pull/1179).\n\n### Fixed\n\n* Fixed a bug where `#[wasm_bindgen_test]` tests would fail in non-headless Web\n  browsers if they used `console.log`. See\n  [#1167](https://github.com/rustwasm/wasm-bindgen/pull/1167).\n* Fixed a bug where returning closures from exported functions sometimes\n  resulted in a faulty error. See\n  [#1174](https://github.com/rustwasm/wasm-bindgen/issues/1174) and\n  [#1175](https://github.com/rustwasm/wasm-bindgen/pull/1175).\n* Sometimes our generated TypeScript interface files had syntax errors in them\n  (missing semicolons). This has been fixed. See\n  [#1181](https://github.com/rustwasm/wasm-bindgen/pull/1181).\n\n--------------------------------------------------------------------------------\n\n## 0.2.31\n\nReleased 2019-01-09.\n\n### Added\n\n* A new `spawn_local` function has been added to the `wasm-bindgen-futures`\n  crate.\n  [#1148](https://github.com/rustwasm/wasm-bindgen/pull/1148)\n\n* Built-in conversions are now available from typed arrays and Rust arrays.\n  [#1147](https://github.com/rustwasm/wasm-bindgen/pull/1147)\n\n### Fixed\n\n* Some casing of dictionary properties in WebIDL has been fixed.\n  [#1155](https://github.com/rustwasm/wasm-bindgen/pull/1155)\n\n--------------------------------------------------------------------------------\n\n## 0.2.30\n\nReleased 2019-01-07.\n\n### Added\n\n* The `wasm-bindgen` CLI now has an `--out-name` argument to name the output\n  module.\n  [#1084](https://github.com/rustwasm/wasm-bindgen/pull/1084)\n\n* Support for importing the `default` export has been added.\n  [#1106](https://github.com/rustwasm/wasm-bindgen/pull/1106)\n\n### Changed\n\n* All `web-sys` methods are now flagged as `structural`, fixing a few bindings.\n  [#1117](https://github.com/rustwasm/wasm-bindgen/pull/1117)\n\n### Fixed\n\n* A small bug with LTO and closures has been fixed.\n  [#1145](https://github.com/rustwasm/wasm-bindgen/pull/1145)\n\n--------------------------------------------------------------------------------\n\n## 0.2.29\n\nReleased 2018-12-04.\n\n### Added\n\n* Add a `#[wasm_bindgen(start)]` attribute to customize the `start` section of\n  the Wasm module.\n  [#1057](https://github.com/rustwasm/wasm-bindgen/pull/1057)\n\n* Add support for producing the new \"producers\" section of Wasm binaries\n  [#1041](https://github.com/rustwasm/wasm-bindgen/pull/1041)\n\n* Add support a `typescript_custom_section` attribute for producing custom\n  typescript abstractions\n  [#1048](https://github.com/rustwasm/wasm-bindgen/pull/1048)\n\n* Generate `*.d.ts` files for Wasm files in addition to the JS bindings\n  [#1053](https://github.com/rustwasm/wasm-bindgen/pull/1053)\n\n* Add a feature to assert that all attributes in `#[wasm_bindgen]` are used to\n  help catch typos and mistakes\n  [#1055](https://github.com/rustwasm/wasm-bindgen/pull/1055)\n\n### Changed\n\n* JS glue generation has received a few small optimizations such as removing\n  shims and removing object allocations\n  [#1033](https://github.com/rustwasm/wasm-bindgen/pull/1033)\n  [#1030](https://github.com/rustwasm/wasm-bindgen/pull/1030)\n\n* JS glue now just uses one array of JS objects instead of two\n  [#1069](https://github.com/rustwasm/wasm-bindgen/pull/1069)\n\n### Fixed\n\n* Fix a typo in the `--no-modules` generated JS\n  [#1045](https://github.com/rustwasm/wasm-bindgen/pull/1045)\n\n--------------------------------------------------------------------------------\n\n## 0.2.28\n\nReleased 2018-11-12.\n\n### Added\n\n* The `js_class` support is now supported on exported types to define a\n  different class in JS than is named in Rust\n  [#1012](https://github.com/rustwasm/wasm-bindgen/pull/1012)\n\n* More WebIDL bindings are exposed with some internal restructuring to ignore\n  unimplemented types at a different location\n  [#1014](https://github.com/rustwasm/wasm-bindgen/pull/1014)\n\n* All imported types now implement `Deref` to their first `extends` attribute\n  (or `JsValue` if one isn't listed). This is intended to greatly improve the\n  ergonomics of `web-sys` bindings by allowing easy access to parent class\n  methods\n  [#1019](https://github.com/rustwasm/wasm-bindgen/pull/1019)\n\n* A new attribute, `final`, can be applied to JS imports. This attribute is\n  relatively nuanced and [best explained in documentation][final-dox], but is\n  added since `structural` is now the default\n  [#1019](https://github.com/rustwasm/wasm-bindgen/pull/1019)\n\n[final-dox]: https://rustwasm.github.io/wasm-bindgen/reference/attributes/on-js-imports/final.html\n\n* A new CLI flag, `--remove-name-section`, can be passed to remove the wasm\n  `name` section which contains the names of functions for debugging (typically\n  not needed in release mode)\n  [#1024](https://github.com/rustwasm/wasm-bindgen/pull/1024)\n\n### Changed\n\n* All imported functions are now `structural` by default. This shouldn't change\n  the semantics of imported functions, only how they're invoked in the JS\n  function shims that are generated by `wasm-bindgen`. More discussion can be\n  founed on [RFC 5] and the PR\n  [#1019](https://github.com/rustwasm/wasm-bindgen/pull/1019)\n\n[RFC 5]: https://rustwasm.github.io/rfcs/005-structural-and-deref.html\n\n* JS glue assertions for moved arguments are now only emitted in debug mode,\n  which is still off by default\n  [#1020](https://github.com/rustwasm/wasm-bindgen/pull/1020)\n\n### Fixed\n\n* Typescript generated bindings now correctly reflect `Option<T>` for more types\n  [#1008](https://github.com/rustwasm/wasm-bindgen/pull/1008)\n\n* The JS shim code generation has been optimized for `structural` bindings (now\n  the default) to include fewer JS shims and more easily optimizable for JS\n  engines\n  [#1019](https://github.com/rustwasm/wasm-bindgen/pull/1019)\n\n* Passing a `WebAssembly.Module` to the `--no-modules` constructor has been\n  fixed\n  [#1025](https://github.com/rustwasm/wasm-bindgen/pull/1025)\n\n--------------------------------------------------------------------------------\n\n## 0.2.27\n\nReleased 2018-10-29.\n\n### Fixed\n\n* Fixed an internal panic where the gc passes were being too aggressive\n  [#995](https://github.com/rustwasm/wasm-bindgen/pull/995)\n\n--------------------------------------------------------------------------------\n\n## 0.2.26\n\nReleased 2018-10-29.\n\n### Added\n\n* The `TypedArray.slice` methods have now been bound in `js-sys`.\n  [#956](https://github.com/rustwasm/wasm-bindgen/pull/956)\n\n* The `Debug` and `Clone` traits are now implemented for `js_sys::Promise`.\n  [#957](https://github.com/rustwasm/wasm-bindgen/pull/957)\n\n* The `js_sys::DataView` type now exposes overloads to specify endianness.\n  [#966](https://github.com/rustwasm/wasm-bindgen/pull/966)\n\n* When using `--no-modules` a `WebAssembly.Module` can now be directly passed\n  into the instantiation glue.\n  [#969](https://github.com/rustwasm/wasm-bindgen/pull/969)\n\n### Fixed\n\n* The `JsValue` type is no longer considered `Send`.\n  [#955](https://github.com/rustwasm/wasm-bindgen/pull/955)\n\n* The generated JS glue is now more robust in the face of missing APIs.\n  [#959](https://github.com/rustwasm/wasm-bindgen/pull/959)\n\n* An issue with the latest version of `safaridriver` used to run headless tests\n  has been resolved.\n  [#991](https://github.com/rustwasm/wasm-bindgen/pull/991)\n\n--------------------------------------------------------------------------------\n\n## 0.2.25\n\nReleased 2018-10-10.\n\n### Fixed\n\n* Using `wasm-bindgen` will no longer unconditionally pull in Rust's default\n  allocator for Wasm (dlmalloc) regardless if you configured a custom global\n  allocator (eg wee_alloc).\n  [#947](https://github.com/rustwasm/wasm-bindgen/pull/947)\n\n* Fixed web-sys build on some Windows machines.\n  [#943](https://github.com/rustwasm/wasm-bindgen/issues/943)\n\n* Fixed generated ES class bindings to Rust structs that were only referenced\n  through struct fields.\n  [#948](https://github.com/rustwasm/wasm-bindgen/issues/948)\n\n--------------------------------------------------------------------------------\n\n## 0.2.24\n\nReleased 2018-10-05.\n\n### Added\n\n* Constructors for types in `web-sys` should now have better documentation.\n\n* A new `vendor_prefix` attribute in `#[wasm_bindgen]` is supported to bind APIs\n  on the web which may have a vendor prefix (like `webkitAudioContext`). This is\n  then subsequently used to fix `AudioContext` usage in Safari.\n\n* The `#[wasm_bindgen(extends = Foo)]` attribute now supports full paths, so you\n  can also say `#[wasm_bindgen(extends = foo::Bar)]` and such.\n\n### Changed\n\n* The `Closure<T>` type is now optimized when the underlying closure is a ZST.\n  The type now no longer allocates memory in this situation.\n\n* The documentation now has a list of caveats for browser support, including how\n  `TextEncoder` and `TextDecoder` are not implemented in Edge. If you're using\n  webpack there's a listed strategy available, and improvements to the polyfill\n  strategy are always welcome!\n\n* The `BaseAudioContext` and `AudioScheduledSourceNode` types in `web-sys` have\n  been deprecated as they don't exist in Safari or Edge.\n\n### Fixed\n\n* Fixed the `#[wasm_bindgen_test]`'s error messages in a browser to correctly\n  escape HTML-looking output.\n\n* WebIDL Attributes on `Window` are now correctly bound to not go through\n  `Window.prototype` which doesn't exist but instead use a `structural`\n  definition.\n\n* Fixed a codegen error when the `BorrowMut` trait was in scope.\n\n* Fixed TypeScript generation for constructors of classes, it was accidentally\n  producing a syntactially invalid file!\n\n--------------------------------------------------------------------------------\n\n## 0.2.23\n\nReleased 2018-09-26.\n\n### Added\n\n* [This is the first release of the `web-sys`\n  crate!](https://rustwasm.github.io/2018/09/26/announcing-web-sys.html)\n\n* Added support for unions of interfaces and non-interfaces in the WebIDL\n  frontend.\n\n* Added a policy for inclusion of new ECMAScript features in `js-sys`: the\n  feature must be in stage 4 or greater for us to support it.\n\n* Added some documentation about size profiling and optimization with\n  `wasm-bindgen` to the guide.\n\n* Added the `Clamped<T>` type for generating JavaScript `Uint8ClampedArray`s.\n\n* CI is now running on beta! Can't wait for the `rustc` release trains to roll\n  over, so we can run CI on stable too!\n\n* Added the `js_sys::try_iter` function, which checks arbitrary JS values for\n  compliance with the JS iteration protocol, and if they are iterable, converts\n  them into an iterator over the JS values that they yield.\n\n### Changed\n\n* We now only generate null checks on methods on the JS side when in debug\n  mode. For safety we will always null check on the Rust side, however.\n\n* Improved error messages when defining setters that don't start with `set_` and\n  don't use `js_name = ...`.\n\n* Improved generated code for classes in a way that avoids an unnecessary\n  allocation with static methods that return `Self` but are not the \"main\"\n  constructor.\n\n* **BREAKING:** `js_sys::Reflect` APIs are all fallible now. This is because\n  reflecting on `Proxy`s whose trap handlers throw an exception can cause any of\n  the reflection APIs to throw. Accordingly, `js_sys` has been bumped from\n  `0.2.X` to `0.3.X`.\n\n### Fixed\n\n* The method of ensuring that `__wbindgen_malloc` and `__wbindgen_free` are\n  always emitted in the `.wasm` binary, regardless of seeming reachability is\n  now zero-overhead.\n\n--------------------------------------------------------------------------------\n\n## 0.2.22\n\nReleased 2018-09-21\n\n### Added\n\n* The `IntoIterator` trait is now implemented for JS `Iterator` types\n* A number of variadic methods in `js-sys` have had explicit arities added.\n* The guide has been improved quite a bit as well as enhanced with more examples\n* The `js-sys` crate is now complete! Thanks so much to everyone involved to\n  help fill out all the APIs.\n* Exported Rust functions with `#[wasm_bindgen]` can now return a `Result` where\n  the `Err` payload is raised as an exception in JS.\n\n### Fixed\n\n* An issue with running `wasm-bindgen` on crates that have been compiled with\n  LTO has been resolved.\n\n--------------------------------------------------------------------------------\n\n## 0.2.21\n\nReleased 2018-09-07\n\n### Added\n\n* Added many more bindings for `WebAssembly` in the `js-sys` crate.\n\n### Fixed\n\n* The \"names\" section of the Wasm binary is now correctly preserved by\n  wasm-bindgen.\n\n--------------------------------------------------------------------------------\n\n## 0.2.20\n\nReleased 2018-09-06\n\n### Added\n\n* All of `wasm-bindgen` is configured to compile on stable Rust as of the\n  upcoming 1.30.0 release, scheduled for October 25, 2018.\n* The underlying `JsValue` of a `Closure<T>` type can now be extracted at any\n  time.\n* Initial and experimental support was added for modules that have shared memory\n  (use atomic instructions).\n\n### Removed\n\n* The `--wasm2asm` flag of `wasm2es6js` was removed because the `wasm2asm` tool\n  has been removed from upstream Binaryen. This is replaced with the new\n  `wasm2js` tool from Binaryen.\n\n### Fixed\n\n* The \"schema\" version for wasm-bindgen now changes on all publishes, meaning we\n  can't forget to update it. This means that the crate version and CLI version\n  must exactly match.\n* The `wasm-bindgen` crate now has a `links` key which forbids multiple versions\n  of `wasm-bindgen` from being linked into a dependency graph, fixing obscure\n  linking errors with a more first-class error message.\n* Binary releases for Windows has been fixed.\n\n--------------------------------------------------------------------------------\n\n## 0.2.19 (and 0.2.18)\n\nReleased 2018-08-27.\n\n### Added\n\n* Added bindings to `js-sys` for some `WebAssembly` types.\n* Added bindings to `js-sys` for some `Intl` types.\n* Added bindings to `js-sys` for some `String` methods.\n* Added an example of using the WebAudio APIs.\n* Added an example of using the `fetch` API.\n* Added more `extends` annotations for types in `js-sys`.\n* Experimental support for `WeakRef` was added to automatically deallocate Rust\n  objects when gc'd.\n* Added support for executing `wasm-bindgen` over modules that import their\n  memory.\n* Added a global `memory()` function in the `wasm-bindgen` crate for accessing\n  the JS object that represent wasm's own memory.\n\n### Removed\n\n* Removed `AsMut` implementations for imported objects.\n\n### Fixed\n\n* Fixed the `constructor` and `catch` attributes combined on imported types.\n* Fixed importing the same-named static in two modules.\n\n--------------------------------------------------------------------------------\n\n## 0.2.17\n\nReleased 2018-08-16.\n\n### Added\n\n* Greatly expanded documentation in the wasm-bindgen guide.\n* Added bindings to `js-sys` for `Intl.DateTimeFormat`\n* Added a number of `extends` attributes for types in `js-sys`\n\n### Fixed\n\n* Fixed compile on latest nightly with latest `proc-macro2`\n* Fixed compilation in some scenarios on Windows with paths in `module` paths\n\n--------------------------------------------------------------------------------\n\n## 0.2.16\n\nReleased 2018-08-13.\n\n### Added\n\n* Added the `wasm_bindgen::JsCast` trait, as described in [RFC #2][rfc-2].\n* Added [the `#[wasm_bindgen(extends = ...)]` attribute][extends-attr] to\n  describe inheritance relationships, as described in [RFC #2][rfc-2].\n* Added support for receiving `Option<&T>` parameters from JavaScript in\n  exported Rust functions and methods.\n* Added support for receiving `Option<u32>` and other option-wrapped scalars.\n* Added reference documentation to the guide for every `#[wasm_bindgen]`\n  attribute and how it affects the generated bindings.\n* Published the `wasm-bindgen-futures` crate for converting between JS\n  `Promise`s and Rust `Future`s.\n\n### Changed\n\n* Overhauled the guide's documentation on passing JS closures to Rust, and Rust\n  closures to JS.\n* Overhauled the guide's documentation on using serde to serialize complex data\n  to `JsValue` and deserialize `JsValue`s back into complex data.\n* Static methods are now always bound to their JS class, as is required for\n  `Promise`'s static methods.\n\n### Removed\n\n* Removed internal usage of `syn`'s `visit-mut` cargo feature, which should\n  result in faster build times.\n\n### Fixed\n\n* Various usage errors for the `#[wasm_bindgen]` proc-macro are now properly\n  reported with source span information, rather than `panic!()`s inside the\n  proc-macro.\n* Fixed a bug where taking a struct by reference and returning a slice resulted\n  in lexical variable redeclaration errors in the generated JS glue. [#662][]\n* The `#[wasm_bindgen(js_class = \"....\")]` attribute for binding methods to\n  renamed imported JS classes now properly works with constructors.\n\n[rfc-2]: https://rustwasm.github.io/rfcs/002-wasm-bindgen-inheritance-casting.html\n[extends-attr]: https://rustwasm.github.io/wasm-bindgen/reference/attributes/on-js-imports/extends.html\n[#662]: https://github.com/rustwasm/wasm-bindgen/pull/662\n\n--------------------------------------------------------------------------------\n\n## 0.2.15\n\nReleased 2018-07-26.\n\n### Fixed\n\n* Fixed `wasm-bindgen` CLI version mismatch checks that got broken in the last\n  point release.\n\n--------------------------------------------------------------------------------\n\n## 0.2.14\n\nReleased 2018-07-25.\n\n### Fixed\n\n* Fixed compilation errors on targets that use\n  Mach-O. [#545](https://github.com/rustwasm/wasm-bindgen/issues/545)\n\n--------------------------------------------------------------------------------\n\n## 0.2.13\n\nReleased 2018-07-22.\n\n### Added\n\n* Support the `#[wasm_bindgen(js_name = foo)]` attribute on exported functions\n  and methods to allow renaming an export to JS. This allows JS to call it by\n  one name and Rust to call it by another, for example using `camelCase` in JS\n  and `snake_case` in Rust\n\n### Fixed\n\n* Compilation with the latest nightly compiler has been fixed (nightlies on and\n  after 2018-07-21)\n\n--------------------------------------------------------------------------------\n\n## 0.2.12\n\nReleased 2018-07-19.\n\nThis release is mostly internal refactorings and minor improvements to the\nexisting crates and functionality, but the bigs news is an upcoming `js-sys` and\n`web-sys` set of crates. The `js-sys` crate will expose [all global JS\nbindings][js-all] and the `web-sys` crate will be generated from WebIDL to\nexpose all APIs browsers have. More info on this soon!\n\n[js-all]: https://github.com/rustwasm/wasm-bindgen/issues/275\n\n### Added\n\n* Support for `Option<T>` was added where `T` can be a number of slices or\n  imported types.\n* Comments in Rust are now preserved in generated JS bindings, as well as\n  comments being generated to indicate the types of arguments/return values.\n* The online documentation has been reorganized [into a book][book].\n* The generated JS is now formatted better by default for readability.\n* A `--keep-debug` flag has been added to the CLI to retain debug sections by\n  default. This happens by default when `--debug` is passed.\n\n[book]: https://rustwasm.github.io/wasm-bindgen/\n\n### Fixed\n\n* Compilation with the latest nightly compiler has been fixed (nightlies on and\n  after 2018-07-19)\n* Declarations of an imported function in multiple crates have been fixed to not\n  conflict.\n* Compilation with `#![deny(missing_docs)]` has been fixed.\n\n--------------------------------------------------------------------------------\n\n## 0.2.11\n\nReleased 2018-05-24.\n\n--------------------------------------------------------------------------------\n\n## 0.2.10\n\nReleased 2018-05-17.\n\n--------------------------------------------------------------------------------\n\n## 0.2.9\n\nReleased 2018-05-11.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.14453125,
          "content": "# Contributing\n\nSee the [\"Contributing\" section of the `wasm-bindgen`\nguide](https://rustwasm.github.io/docs/wasm-bindgen/contributing/index.html).\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 3.9755859375,
          "content": "[package]\nauthors = [\"The wasm-bindgen Developers\"]\ncategories = [\"wasm\"]\ndescription = \"\"\"\nEasy support for interacting between JS and Rust.\n\"\"\"\ndocumentation = \"https://docs.rs/wasm-bindgen\"\nedition = \"2021\"\nhomepage = \"https://rustwasm.github.io/\"\ninclude = [\"/build.rs\", \"/LICENSE-*\", \"/src\"]\nlicense = \"MIT OR Apache-2.0\"\nname = \"wasm-bindgen\"\nreadme = \"README.md\"\nrepository = \"https://github.com/rustwasm/wasm-bindgen\"\nrust-version = \"1.57\"\nversion = \"0.2.99\"\n\n[package.metadata.docs.rs]\nfeatures = [\"serde-serialize\"]\n\n[lib]\ntest = false\n\n[features]\ndefault = [\"std\", \"msrv\"]\nenable-interning = [\"std\"]\nserde-serialize = [\"serde\", \"serde_json\", \"std\"]\nspans = []\nstd = []\n\n# Opt-in for Rust language features that require a higher MSRV.\n#\n# The current rustc version is detected at compile-time, so enabling this\n# feature for older compilers will NOT result in a compilation error. Instead,\n# any unsupported language feature will not be used.\nmsrv = [\"rustversion\"]\n\n# Whether or not the `#[wasm_bindgen]` macro is strict and generates an error on\n# all unused attributes\nstrict-macro = [\"wasm-bindgen-macro/strict-macro\"]\n\n# INTERNAL ONLY: Enables gg-alloc as system allocator when using wasm-bindgen-test to check that large pointers\n# are handled correctly\ngg-alloc = [\"wasm-bindgen-test/gg-alloc\"]\n\n# INTERNAL ONLY: This is only for debugging wasm-bindgen! No stability guarantees, so enable\n# this at your own peril!\nxxx_debug_only_print_generated_code = [\"wasm-bindgen-macro/xxx_debug_only_print_generated_code\"]\n\n[dependencies]\ncfg-if = \"1.0.0\"\nonce_cell = { version = \"1.12\", default-features = false }\nrustversion = { version = \"1.0\", optional = true }\nserde = { version = \"1.0\", optional = true }\nserde_json = { version = \"1.0\", optional = true }\nwasm-bindgen-macro = { path = \"crates/macro\", version = \"=0.2.99\" }\n\n[dev-dependencies]\nonce_cell = \"1\"\nwasm-bindgen-test = { path = 'crates/test' }\n\n[target.'cfg(target_arch = \"wasm32\")'.dev-dependencies]\njs-sys = { path = 'crates/js-sys' }\npaste = \"1\"\nserde_derive = \"1.0\"\nwasm-bindgen-futures = { path = 'crates/futures' }\nwasm-bindgen-test-crate-a = { path = 'tests/crates/a' }\nwasm-bindgen-test-crate-b = { path = 'tests/crates/b' }\n\n[lints.rust]\nunexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wasm_bindgen_unstable_test_coverage)'] }\n\n[lints.clippy]\nlarge_enum_variant = \"allow\"\nnew_without_default = \"allow\"\noverly_complex_bool_expr = \"allow\"\ntoo_many_arguments = \"allow\"\ntype_complexity = \"allow\"\n\n[workspace.lints.clippy]\nlarge_enum_variant = \"allow\"\nnew_without_default = \"allow\"\noverly_complex_bool_expr = \"allow\"\ntoo_many_arguments = \"allow\"\ntype_complexity = \"allow\"\n\n[workspace]\nexclude = [\"crates/msrv/resolver\", \"crates/msrv/lib\", \"crates/msrv/cli\"]\nmembers = [\n  \"benchmarks\",\n  \"crates/cli\",\n  \"crates/js-sys\",\n  \"crates/test\",\n  \"crates/test/sample\",\n  \"crates/example-tests\",\n  \"crates/typescript-tests\",\n  \"crates/web-sys\",\n  \"crates/webidl\",\n  \"crates/webidl-tests\",\n  \"examples/add\",\n  \"examples/canvas\",\n  \"examples/char\",\n  \"examples/closures\",\n  \"examples/console_log\",\n  \"examples/deno\",\n  \"examples/dom\",\n  \"examples/duck-typed-interfaces\",\n  \"examples/explicit-resource-management\",\n  \"examples/fetch\",\n  \"examples/guide-supported-types-examples\",\n  \"examples/hello_world\",\n  \"examples/import_js/crate\",\n  \"examples/julia_set\",\n  \"examples/paint\",\n  \"examples/performance\",\n  \"examples/raytrace-parallel\",\n  \"examples/request-animation-frame\",\n  \"examples/todomvc\",\n  \"examples/wasm-audio-worklet\",\n  \"examples/wasm-in-wasm\",\n  \"examples/wasm-in-wasm-imports\",\n  \"examples/wasm-in-web-worker\",\n  \"examples/weather_report\",\n  \"examples/webaudio\",\n  \"examples/webgl\",\n  \"examples/webrtc_datachannel\",\n  \"examples/websockets\",\n  \"examples/webxr\",\n  \"examples/without-a-bundler\",\n  \"examples/without-a-bundler-no-modules\",\n  \"examples/synchronous-instantiation\",\n  \"tests/no-std\",\n]\nresolver = \"2\"\n\n[patch.crates-io]\njs-sys = { path = 'crates/js-sys' }\nwasm-bindgen = { path = '.' }\nwasm-bindgen-futures = { path = 'crates/futures' }\nweb-sys = { path = 'crates/web-sys' }\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0322265625,
          "content": "Copyright (c) 2014 Alex Crichton\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.7490234375,
          "content": "<div align=\"center\">\n\n  <h1><code>wasm-bindgen</code></h1>\n\n  <p>\n    <strong>Facilitating high-level interactions between Wasm modules and JavaScript.</strong>\n  </p>\n\n  <p>\n    <a href=\"https://github.com/rustwasm/wasm-bindgen/actions/workflows/main.yml?query=branch%3Amain\"><img src=\"https://github.com/rustwasm/wasm-bindgen/actions/workflows/main.yml/badge.svg?branch=main\" alt=\"Build Status\" /></a>\n    <a href=\"https://crates.io/crates/wasm-bindgen\"><img src=\"https://img.shields.io/crates/v/wasm-bindgen.svg?style=flat-square\" alt=\"Crates.io version\" /></a>\n    <a href=\"https://crates.io/crates/wasm-bindgen\"><img src=\"https://img.shields.io/crates/d/wasm-bindgen.svg?style=flat-square\" alt=\"Download\" /></a>\n    <a href=\"https://docs.rs/wasm-bindgen\"><img src=\"https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square\" alt=\"docs.rs docs\" /></a>\n  </p>\n\n  <h3>\n    <a href=\"https://rustwasm.github.io/wasm-bindgen/\">Guide (main branch)</a>\n    <span> | </span>\n    <a href=\"https://docs.rs/wasm-bindgen\">API Docs</a>\n    <span> | </span>\n    <a href=\"https://github.com/rustwasm/wasm-bindgen/blob/master/CONTRIBUTING.md\">Contributing</a>\n    <span> | </span>\n    <a href=\"https://discord.gg/xMZ7CCY\">Chat</a>\n  </h3>\n\n  <sub>Built with 🦀🕸 by <a href=\"https://rustwasm.github.io/\">The Rust and WebAssembly Working Group</a></sub>\n</div>\n\n## Install `wasm-bindgen-cli`\n\nYou can install it using `cargo install`:\n\n```\ncargo install wasm-bindgen-cli\n```\n\nOr, you can download it from the\n[release page](https://github.com/rustwasm/wasm-bindgen/releases).\n\nIf you have [`cargo-binstall`](https://crates.io/crates/cargo-binstall) installed,\nthen you can install the pre-built artifacts by running:\n\n```\ncargo binstall wasm-bindgen-cli\n```\n\n## Example\n\nImport JavaScript things into Rust and export Rust things to JavaScript.\n\n```rust\nuse wasm_bindgen::prelude::*;\n\n// Import the `window.alert` function from the Web.\n#[wasm_bindgen]\nextern \"C\" {\n    fn alert(s: &str);\n}\n\n// Export a `greet` function from Rust to JavaScript, that alerts a\n// hello message.\n#[wasm_bindgen]\npub fn greet(name: &str) {\n    alert(&format!(\"Hello, {}!\", name));\n}\n```\n\nUse exported Rust things from JavaScript with ECMAScript modules!\n\n```js\nimport { greet } from \"./hello_world\";\n\ngreet(\"World!\");\n```\n\n## Features\n\n* **Lightweight.** Only pay for what you use. `wasm-bindgen` only generates\n  bindings and glue for the JavaScript imports you actually use and Rust\n  functionality that you export. For example, importing and using the\n  `document.querySelector` method doesn't cause `Node.prototype.appendChild` or\n  `window.alert` to be included in the bindings as well.\n\n* **ECMAScript modules.** Just import WebAssembly modules the same way you would\n  import JavaScript modules. Future compatible with [WebAssembly modules and\n  ECMAScript modules integration][wasm-es-modules].\n\n* **Designed with the [\"Web IDL bindings\" proposal][webidl-bindings] in mind.**\n  Eventually, there won't be any JavaScript shims between Rust-generated wasm\n  functions and native DOM methods. Because the Wasm functions are statically\n  type checked, some of those native methods' dynamic type checks should become\n  unnecessary, promising to unlock even-faster-than-JavaScript DOM access.\n\n[wasm-es-modules]: https://github.com/WebAssembly/esm-integration\n[webidl-bindings]: https://github.com/WebAssembly/proposals/issues/8\n\n## Guide\n\n[**📚 Read the `wasm-bindgen` guide here! 📚**](https://rustwasm.github.io/docs/wasm-bindgen/)\n\nYou can find general documentation about using Rust and WebAssembly together\n[here](https://rustwasm.github.io/docs).\n\n## API Docs\n\n- [wasm-bindgen](https://docs.rs/wasm-bindgen)\n- [js-sys](https://docs.rs/js-sys)\n- [web-sys](https://docs.rs/web-sys)\n- [wasm-bindgen-futures](https://docs.rs/wasm-bindgen-futures)\n\n## MSRV Policy\n\nLibraries that are released on [crates.io](https://crates.io) have a MSRV of v1.57. Changes to the MSRV will be accompanied by a minor version bump.\n\nCLI tools and their corresponding support libraries have a MSRV of v1.76. Changes to the MSRV will be accompanied by a patch version bump.\n\n## License\n\nThis project is licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   http://opensource.org/licenses/MIT)\n\nat your option.\n\n## Contribution\n\n**[See the \"Contributing\" section of the guide for information on\nhacking on `wasm-bindgen`!][contributing]**\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in this project by you, as defined in the Apache-2.0 license,\nshall be dual licensed as above, without any additional terms or conditions.\n\n[contributing]: https://rustwasm.github.io/docs/wasm-bindgen/contributing/index.html\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 0.134765625,
          "content": "// Empty `build.rs` so that `[package] links = ...` works in `Cargo.toml`.\nfn main() {\n    println!(\"cargo:rerun-if-changed=build.rs\");\n}\n"
        },
        {
          "name": "crates",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "guide",
          "type": "tree",
          "content": null
        },
        {
          "name": "publish.rs",
          "type": "blob",
          "size": 6.3046875,
          "content": "//! Helper script to publish the wasm-bindgen suite of crates\n//!\n//! Usage:\n//!\n//! * First, compile this script\n//! * Next, set cwd to the root of the wasm-bindgen repository\n//! * Execute `./publish bump` to bump versions\n//! * Send a PR\n//! * Merge when green\n//! * Execute `./publish publish` to publish crates\n\nuse std::collections::HashMap;\nuse std::env;\nuse std::fs;\nuse std::io;\nuse std::path::{Path, PathBuf};\nuse std::process::Command;\n\n// note that this list must be topologically sorted by dependencies\nconst CRATES_TO_PUBLISH: &[&str] = &[\n    \"wasm-bindgen-shared\",\n    \"wasm-bindgen-backend\",\n    \"wasm-bindgen-macro-support\",\n    \"wasm-bindgen-macro\",\n    \"wasm-bindgen-test-macro\",\n    \"wasm-bindgen-test\",\n    \"wasm-bindgen-wasm-interpreter\",\n    \"wasm-bindgen-wasm-conventions\",\n    \"wasm-bindgen-threads-xform\",\n    \"wasm-bindgen-multi-value-xform\",\n    \"wasm-bindgen-externref-xform\",\n    \"wasm-bindgen-cli-support\",\n    \"wasm-bindgen-cli\",\n    \"wasm-bindgen\",\n    \"wasm-bindgen-futures\",\n    \"js-sys\",\n    \"web-sys\",\n];\n\nconst CRATES_TO_AVOID_PUBLISH: &[&str] = &[\n    // We'll publish these when they're ready one day\n    \"wasm-bindgen-typescript\",\n    // These are internal crates, unlikely to ever be published\n    \"ui-tests\",\n    \"sample\",\n    \"webidl-tests\",\n    \"typescript-tests\",\n    \"wasm-bindgen-webidl\",\n    \"example-tests\",\n    \"msrv-cli-test\",\n    \"msrv-library-test\",\n    \"msrv-resolver-test\",\n];\n\nstruct Crate {\n    manifest: PathBuf,\n    name: String,\n    version: String,\n    next_version: String,\n}\n\nfn main() {\n    let mut crates = Vec::new();\n    crates.push(read_crate(\"./Cargo.toml\".as_ref()));\n    find_crates(\"crates\".as_ref(), &mut crates);\n    find_crates(\"examples\".as_ref(), &mut crates);\n\n    let pos = CRATES_TO_PUBLISH\n        .iter()\n        .chain(CRATES_TO_AVOID_PUBLISH)\n        .enumerate()\n        .map(|(i, c)| (*c, i))\n        .collect::<HashMap<_, _>>();\n    crates.sort_by_key(|krate| pos.get(&krate.name[..]));\n\n    match &env::args().nth(1).expect(\"must have one argument\")[..] {\n        \"bump\" => {\n            for krate in crates.iter() {\n                bump_version(&krate, &crates);\n            }\n        }\n\n        \"publish\" => {\n            for krate in crates.iter() {\n                publish(&krate);\n            }\n        }\n\n        s => panic!(\"unknown command: {}\", s),\n    }\n}\n\nfn find_crates(dir: &Path, dst: &mut Vec<Crate>) {\n    if dir.join(\"Cargo.toml\").exists() {\n        let krate = read_crate(&dir.join(\"Cargo.toml\"));\n        if CRATES_TO_PUBLISH\n            .iter()\n            .chain(CRATES_TO_AVOID_PUBLISH)\n            .any(|c| krate.name == *c)\n        {\n            dst.push(krate);\n        } else if dir.iter().any(|s| s == \"examples\") {\n            dst.push(krate);\n        } else {\n            panic!(\"failed to find {:?} in whitelist or blacklist\", krate.name);\n        }\n    }\n\n    for entry in dir.read_dir().unwrap() {\n        let entry = entry.unwrap();\n        if entry.file_type().unwrap().is_dir() {\n            find_crates(&entry.path(), dst);\n        }\n    }\n}\n\nfn read_crate(manifest: &Path) -> Crate {\n    let mut name = None;\n    let mut version = None;\n    for line in fs::read_to_string(manifest).unwrap().lines() {\n        if name.is_none() && line.starts_with(\"name = \\\"\") {\n            name = Some(\n                line.replace(\"name = \\\"\", \"\")\n                    .replace(\"\\\"\", \"\")\n                    .trim()\n                    .to_string(),\n            );\n        }\n        if version.is_none() && line.starts_with(\"version = \\\"\") {\n            version = Some(\n                line.replace(\"version = \\\"\", \"\")\n                    .replace(\"\\\"\", \"\")\n                    .trim()\n                    .to_string(),\n            );\n        }\n    }\n    let name = name.unwrap();\n    let version = version.unwrap();\n    let next_version = if CRATES_TO_PUBLISH.contains(&&name[..]) {\n        bump(&version)\n    } else {\n        version.clone()\n    };\n    Crate {\n        manifest: manifest.to_path_buf(),\n        name,\n        version,\n        next_version,\n    }\n}\n\nfn bump_version(krate: &Crate, crates: &[Crate]) {\n    let contents = fs::read_to_string(&krate.manifest).unwrap();\n\n    let mut new_manifest = String::new();\n    let mut is_deps = false;\n    for line in contents.lines() {\n        let mut rewritten = false;\n        if line.starts_with(\"version =\") {\n            if CRATES_TO_PUBLISH.contains(&&krate.name[..]) {\n                println!(\n                    \"bump `{}` {} => {}\",\n                    krate.name, krate.version, krate.next_version\n                );\n                new_manifest.push_str(&line.replace(&krate.version, &krate.next_version));\n                rewritten = true;\n            }\n        }\n\n        is_deps = if line.starts_with(\"[\") {\n            line.contains(\"dependencies\")\n        } else {\n            is_deps\n        };\n\n        for other in crates {\n            if !is_deps || !line.starts_with(&format!(\"{} \", other.name)) {\n                continue;\n            }\n            if !line.contains(&other.version) {\n                if !line.contains(\"version =\") {\n                    continue;\n                }\n                panic!(\n                    \"{:?} has a dep on {} but doesn't list version {}\",\n                    krate.manifest, other.name, other.version\n                );\n            }\n            rewritten = true;\n            new_manifest.push_str(&line.replace(&other.version, &other.next_version));\n            break;\n        }\n        if !rewritten {\n            new_manifest.push_str(line);\n        }\n        new_manifest.push_str(\"\\n\");\n    }\n    fs::write(&krate.manifest, new_manifest).unwrap();\n}\n\nfn bump(version: &str) -> String {\n    let mut iter = version.split('.').map(|s| s.parse::<u32>().unwrap());\n    let major = iter.next().expect(\"major version\");\n    let minor = iter.next().expect(\"minor version\");\n    let patch = iter.next().expect(\"patch version\");\n    format!(\"{}.{}.{}\", major, minor, patch + 1)\n}\n\nfn publish(krate: &Crate) {\n    if !CRATES_TO_PUBLISH.iter().any(|s| *s == krate.name) {\n        return;\n    }\n    let status = Command::new(\"cargo\")\n        .arg(\"publish\")\n        .current_dir(krate.manifest.parent().unwrap())\n        .arg(\"--no-verify\")\n        .arg(\"--allow-dirty\")\n        .status()\n        .expect(\"failed to run cargo\");\n    if !status.success() {\n        panic!(\"FAIL: failed to publish `{}`: {}\", krate.name, status);\n    }\n}\n"
        },
        {
          "name": "releases",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "taplo.toml",
          "type": "blob",
          "size": 0.2060546875,
          "content": "[formatting]\nallowed_blank_lines = 1\ncolumn_width = 100\nreorder_keys = true\n\n[[rule]]\nformatting = { array_auto_expand = false, reorder_keys = false }\ninclude = [\"crates/web-sys/Cargo.toml\"]\nkeys = [\"features\"]\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}