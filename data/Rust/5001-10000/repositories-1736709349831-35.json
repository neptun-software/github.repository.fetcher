{
  "metadata": {
    "timestamp": 1736709349831,
    "page": 35,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "amethyst/amethyst",
      "stars": 8000,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.7626953125,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text=auto\n# Explicitly declare text files you want to always be normalized and converted\n# to native line endings on checkout.\n*.md text\n*.rs text\n*.toml text\n*.yml text\nCOPYING text\nLICENSE-* text\n*.spv binary\n# LFS\nexamples/**/assets/large/**/*.obj filter=lfs diff=lfs merge=lfs -text\nexamples/**/assets/large/**/*.png filter=lfs diff=lfs merge=lfs -text\nexamples/**/assets/large/**/*.ogg filter=lfs diff=lfs merge=lfs -text\nexamples/**/assets/large**/*.dds filter=lfs diff=lfs merge=lfs -text\nexamples/**/assets/large/**/*.glb filter=lfs diff=lfs merge=lfs -text\nexamples/**/assets/large/**/*.bin filter=lfs diff=lfs merge=lfs -text\nexamples/**/assets/large/**/*.jpg filter=lfs diff=lfs merge=lfs -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2333984375,
          "content": "# Unwanted files\nbook/book\ntarget\n*.log\nCargo.lock\n\n# Backup files\n.DS_Store\nthumbs.db\n*~\n*.rs.bk\n*.swp\n\n# IDE / Editor files\n*.iml\n.idea\n.vscode\n\n# Thread profiler output\nthread_profile.json\n\n# Distill Assets\n.assets_db\nprefab.ron\n*.meta\n"
        },
        {
          "name": ".rusty-hook.toml",
          "type": "blob",
          "size": 0.37109375,
          "content": "[hooks]\npre-commit = [\n    \"cargo check --workspace --all-targets --all-features\",\n    \"cargo fix --workspace --all-features --allow-dirty --allow-staged\",\n    \"cargo +nightly clippy -Z unstable-options --workspace --all-features --fix --allow-dirty --allow-staged\",\n    \"cargo +nightly fmt --all\",\n]\npre-push = [\"cargo test --workspace --all-features\"]\n\n[logging]\nverbose = true\n"
        },
        {
          "name": ".sentry_dsn.txt",
          "type": "blob",
          "size": 0.0576171875,
          "content": "https://6bc2b763b60e4651ac237871056eb21b@sentry.io/1445091\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 4.5634765625,
          "content": "# The Amethyst Code of Conduct\n\n## Conduct\n\n**Contact**: [amethyst-mods@amethyst-engine.org](mailto:amethyst-mods@amethyst-engine.org)\n\n- We are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other similar characteristic.\n- On Discord, the forums, IRC, GitHub, or any other community area, please avoid using overtly sexual nicknames or other nicknames that might detract from a friendly, safe and welcoming environment for all.\n- Please be kind and courteous. There's no need to be mean or rude.\n- Respect that people have differences of opinion and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a right answer.\n- Please keep unstructured critique to a minimum. If you have solid ideas you want to experiment with, make a fork and see how it works.\n- We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behavior; we strive to be inclusive. In particular, we don't tolerate behavior that excludes people in socially marginalized groups.\n- Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a community member, please contact one of the channel ops or any of the [Amethyst moderation team][mod_team] immediately. Whether you're a regular contributor or a newcomer, we care about making this community a safe place for you and we've got your back.\n- Likewise any spamming, trolling, flaming, baiting or other attention-stealing behavior is not welcome.\n- Keep political and religious discussions out of the public Amethyst spaces.\n\n## Moderation\n\nThese are the policies for upholding our community's standards of conduct. If you feel that a thread needs moderation, please contact the [Amethyst moderation team][mod_team].\n\n1. Remarks that violate the Amethyst standards of conduct, including hateful, hurtful, oppressive, or exclusionary remarks, are not allowed. (Cursing in general is discouraged, and never tolerated if targeting another user, and never in a hateful manner.)\n1. Remarks that moderators find inappropriate, whether listed in the code of conduct or not, are also not allowed.\n1. Moderators will first respond to such remarks with a warning.\n1. If the warning is unheeded, the user will be \"kicked,\" i.e., kicked out of the communication channel to cool off.\n1. If the user comes back and continues to make trouble, they will be banned, i.e., indefinitely excluded.\n1. Moderators may choose at their discretion to un-ban the user if it was a first offense and they offer the offended party a genuine apology.\n1. If a moderator bans someone and you think it was unjustified, please take it up with that moderator, or with a different moderator, **in private**. Complaints about bans in-channel are not allowed.\n1. Moderators, organization members, and anyone closely involved with the Amethyst project are held to a higher standard than other community members. If a moderator creates an inappropriate situation, they should expect less leeway than others.\n\nIn the Amethyst community we strive to go the extra step to look out for each other. Don't just aim to be technically unimpeachable, try to be your best self. In particular, avoid flirting with offensive or sensitive issues, particularly if they're off-topic; this all too often leads to unnecessary fights, hurt feelings, and damaged trust; worse, it can drive people away from the community entirely.\n\nAnd if someone takes issue with something you said or did, resist the urge to be defensive. Just stop doing what it was they complained about and apologize. Even if you feel you were misinterpreted or unfairly accused, chances are good there was something you could've communicated better — remember that it's your responsibility to make your fellow Amethyst community members comfortable. Everyone wants to get along and we are all here first and foremost because we want to talk about making games. You will find that people will be eager to assume good intent and forgive as long as you earn their trust.\n\nThe enforcement policies listed above apply to all official Amethyst venues; including all Amethyst Discord channels; GitHub repositories under amethyst; and the community forums at https://community.amethyst.rs\n\n_This Code of Conduct is based on the Rust Code of Conduct, available here: https://www.rust-lang.org/conduct.html_\n\n[mod_team]: https://community.amethyst.rs/t/moderation-team/102\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.33203125,
          "content": "Copyright 2016 The Amethyst Project Developers\n\nLicensed under the Apache License, Version 2.0, <docs/LICENSE-APACHE or\nhttp://apache.org/licenses/LICENSE-2.0> or the MIT license <docs/LICENSE-MIT or\nhttp://opensource.org/licenses/MIT>, at your option. This file may not be\ncopied, modified, or distributed except according to those terms.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 5.1728515625,
          "content": "[package]\nname = \"amethyst\"\nversion = \"0.16.0\"\nauthors = [\n    \"Eyal Kalderon <ebkalderon@gmail.com>\",\n    \"Amethyst Foundation <contact@amethyst.rs>\",\n]\nedition = \"2018\"\ndescription = \"Data-oriented game engine written in Rust\"\nexclude = [\"examples/*\", \"book/*\"]\nkeywords = [\"game\", \"engine\", \"sdk\", \"amethyst\"]\ncategories = [\"game-engines\"]\n\ndocumentation = \"https://docs.amethyst.rs/stable/amethyst\"\nhomepage = \"https://amethyst.rs/\"\nrepository = \"https://github.com/amethyst/amethyst\"\n\nreadme = \"README.md\"\nlicense = \"MIT OR Apache-2.0\"\n\nautoexamples = false # Our examples come with their own Cargo.toml and are in the [workspace] section\n\n[lib]\ncrate-type = [\"lib\"]\n\n[features]\ndefault = [\"parallel\", \"renderer\", \"utils\", \"no-slow-safety-checks\", \"asset-daemon\"]\noptional = [\"audio\", \"network\", \"locale\", \"ui\", \"tiles\", \"animation\",]\n\ntiles = [\"amethyst_tiles\"]\nanimation = [\"amethyst_animation\"]\naudio = [\"amethyst_audio\"]\ngltf = [\"amethyst_gltf\", \"amethyst_animation\"]\nlocale = [\"amethyst_locale\"]\nnetwork = [\"amethyst_network\"]\nutils = [\"amethyst_utils\"]\nrenderer = [\"amethyst_rendy\"]\nui = [\"amethyst_ui\", \"amethyst_animation/ui\"]\n\n\n\nempty = [\"amethyst_rendy/empty\"]\nvulkan = [\"amethyst_rendy/vulkan\"]\nmetal = [\"amethyst_rendy/metal\"]\n\nprofiler = [\n    \"thread_profiler\",\n    \"thread_profiler/thread_profiler\",\n    \"amethyst_animation/profiler\",\n    \"amethyst_assets/profiler\",\n    \"amethyst_audio/profiler\",\n    \"amethyst_config/profiler\",\n    \"amethyst_core/profiler\",\n    \"amethyst_controls/profiler\",\n    \"amethyst_input/profiler\",\n    \"amethyst_locale/profiler\",\n    \"amethyst_rendy/profiler\",\n    \"amethyst_ui/profiler\",\n    \"amethyst_utils/profiler\",\n    \"amethyst_tiles/profiler\",\n    \"amethyst_gltf/profiler\",\n]\n# sdl_controller = [\"amethyst_input/sdl_controller\"]\njson = [\"amethyst_assets/json\"]\nserver = [\"locale\", \"network\"]\nno-slow-safety-checks = [\"amethyst_rendy/no-slow-safety-checks\"]\nshader-compiler = [\"amethyst_rendy/shader-compiler\"]\ntest-support = [\"amethyst_rendy/test-support\", \"amethyst_window/test-support\"]\nexperimental-spirv-reflection = [\"amethyst_rendy/experimental-spirv-reflection\"]\nparallel = [\"amethyst_core/parallel\"]\n# asset-packfile = [\"amethyst_assets/packfile\"]\nasset-daemon = [\"amethyst_assets/asset-daemon\"]\n\n[workspace]\nmembers = [\"examples/*\", \"amethyst_*\"]\nexclude = [\n    \"amethyst_test\",\n    \"examples/Cargo.toml\",\n    \"examples/_unused_assets\",\n    \"examples/README.md\",\n    \"examples/LICENSE_ASSETS.md\",\n    \"examples/LICENSE_AUDIO.txt\",\n    \"examples/LICENSE_TEXTURES.txt\",\n    \"examples/renderable\",\n    \"examples/renderable_custom\",\n    \"examples/rendy\",\n    \"examples/states_ui\",\n    \"examples/state_dispatcher\",\n    \"examples/prefab_multi\",\n    \"examples/prefab_custom\",\n    \"examples/prefab_adapter\",\n    \"examples/ui\",\n    \"examples/custom_ui\",\n    \"examples/custom_game_data\",\n]\n\n[dependencies]\namethyst_animation = { path = \"amethyst_animation\", version = \"0.16.0\", optional = true }\namethyst_assets = { path = \"amethyst_assets\", version = \"0.16.0\" }\namethyst_audio = { path = \"amethyst_audio\", version = \"0.16.0\", optional = true }\namethyst_config = { path = \"amethyst_config\", version = \"0.16.0\" }\namethyst_core = { path = \"amethyst_core\", version = \"0.16.0\" }\namethyst_error = { path = \"amethyst_error\", version = \"0.16.0\" }\namethyst_controls = { path = \"amethyst_controls\", version = \"0.16.0\" }\namethyst_derive = { path = \"amethyst_derive\", version = \"0.16.0\" }\namethyst_gltf = { path = \"amethyst_gltf\", version = \"0.16.0\", optional = true }\namethyst_network = { path = \"amethyst_network\", version = \"0.16.0\", optional = true }\namethyst_locale = { path = \"amethyst_locale\", version = \"0.16.0\", optional = true }\namethyst_rendy = { path = \"amethyst_rendy\", version = \"0.16.0\", features = [\"window\"], optional = true }\namethyst_input = { path = \"amethyst_input\", version = \"0.16.0\" }\namethyst_ui = { path = \"amethyst_ui\", version = \"0.16.0\", optional = true }\namethyst_utils = { path = \"amethyst_utils\", version = \"0.16.0\", optional = true }\namethyst_window = { path = \"amethyst_window\", version = \"0.16.0\" }\namethyst_tiles = { path = \"amethyst_tiles\", version = \"0.16.0\", optional = true }\nwinit = { version = \"0.25\", features = [\"serde\"] }\ncrossbeam-channel = \"0.5\"\nderivative = \"2.2.0\"\nlog = { version = \"0.4\", features = [\"serde\"] }\nrayon = \"1.5\"\nrustc_version_runtime = \"0.2.0\"\nsentry = { version = \"0.22.0\", optional = true }\nserde = { version = \"1\", features = [\"derive\"] }\npalette = { version = \"0.5\", default-features = false, features = [\"serde\", \"std\"] }\nthread_profiler = { version = \"0.3.0\", optional = true }\nlazy_static = \"1.4.0\"\nglsl-layout = \"0.4\"\n# until https://github.com/amethyst/legion/pull/186 passed\nlegion = { git = \"https://github.com/amethyst/legion\", rev = \"0b058dd8bd3190d5d5d1d29f62571bb8b70c3b93\", default-features = false, features = [\n    \"serialize\",\n    \"crossbeam-events\",\n    \"codegen\",\n] }\n\n[build-dependencies]\ndirs-next = \"2.0.0\"\nvergen = \"3.2.0\"\n\n[dev-dependencies]\nderive_more = \"0.99.14\"\ndoc-comment = \"0.3.3\"\nenv_logger = \"0.8.4\"\nerr-derive = \"0.3.0\"\nglob = \"0.3.0\"\nron = \"0.6.4\"\ntype-uuid = \"0.1.2\"\n\n[package.metadata.docs.rs]\nfeatures = [\n    \"animation\",\n    \"audio\",\n    \"gltf\",\n    \"tiles\",\n    \"json\",\n    \"locale\",\n    \"network\",\n    \"ui\",\n    \"sdl_controller\",\n    \"vulkan\",\n]\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.7734375,
          "content": "# This Makefile is meant for shader compilation only.\n# Use cargo to compile the rust part of the project.\n\nGLSLC = $(shell ./find_glslc.sh)\nifeq \"$(GLSLC)\" \"\"\n\tbreak;\nendif\n\ndefine outpath\n$(addsuffix .$(1), $(subst /shaders/,/compiled/,$(2)))\nendef\n\nSHADERS = $(filter-out /header/,$(wildcard */shaders/**/*.vert */shaders/**/*.frag))\nOUT = $(call outpath,spv,$(SHADERS)) $(call outpath,spvasm,$(SHADERS))\n\nall: $(OUT)\n\n%.spv:\n\tmkdir -p $(dir $@)\n\t$(GLSLC) -MD -c -g -O -o $@ $<\n\n%.spvasm:\n\tmkdir -p $(dir $@)\n\t$(GLSLC) -MD -S -g -O -o $@ $<\n\ndefine shader_rules\n$(call outpath,spv,$1): $1\n$(call outpath,spvasm,$1) : $1\nendef\n\n$(foreach shader,$(SHADERS),$(eval $(call shader_rules,$(shader))))\n\nclean:\n\t$(RM) */compiled/**/*.spv */compiled/**/*.spvdis */compiled/**/*.d\n\n.PHONY: all clean"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.1796875,
          "content": "<img src=\"docs/splash.png\" alt=\"Amethyst Game Engine\" />\n\n[![Build Status][s1]][ac] [![Crates.io][s2]][ci] [![docs page][docs-badge]][docs] [![MIT/Apache][s3]][li]\n[![Join us on Discord][s4]][di] [![Community forum][s5]][ds] [![Reddit][s7]][rd]\n[![Code coverage][s8]][cc] ![Lines of Code][s6]\n\n# Inactively Maintained!\n![Inactively Maintained](https://img.shields.io/badge/Maintenance%20Level-Inactively%20Maintained-yellowgreen.svg)\n\nThe Amethyst Game Engine has halted its development. Read this post about it:\nhttps://amethyst.rs/posts/amethyst--starting-fresh\n\nFor 0.15.3 and older, the following Rust version has to be used for compiles to work.\n\n`rustup override set 1.47 `\n\n## What is Amethyst?\n\nAmethyst is a data-driven and data-oriented game engine aiming to be fast and as configurable as possible.\n\n## Principles\n\nThese principles are what makes Amethyst unique and competitive in the world of game engines:\n\n- Massively parallel architecture.\n- Powered by a correct [Entity Component System][ecs] model.\n- Rapid prototyping with [RON] files for prefabs and an abstract scripting API.\n- Strong focus on encouraging reusability and clean interfaces.\n\n## Why Amethyst?\n\n### Extreme Multithreading\n\nAmethyst is based over a very powerful parallel [ECS] called Specs. This allows games built with Amethyst to maximize the available processing power to run as smoothly and as quickly as possible, without the headaches of multi-threaded programming.\n\n### Clean\n\nBy design, the Amethyst engine encourages you to write clean and reusable code for your behaviours and data structures. This allows engine users to easily share useful components, thus reducing development time and cost.\n\nUsing the [ECS] architecture, the code of games can be cleanly divided between data and behaviour, making it easy to understand what is going on, even if the game is running on a massive 64-core processor.\n\n### Community\n\n- [Discord](https://discord.gg/amethyst) - Announcements, help, useful information, general discussion.\n\n## Features\n\nPlease visit the [features page][feat] for a list of features Amethyst provides.\n\n## Navigation\n\n- [**Link to the book (master)**][bkm]\n- [**Link to the book (0.15)**][bkstable]\n- [**Link to the book (0.14)**][bks14]\n- [**Link to the examples (master)**][exm]\n- [**Link to the examples (0.15)**][ex15]\n- [**Link to the examples (0.14)**][ex14]\n\n## Usage\n\nWhile the engine can be hard to use at times, we made a lot of [documentation][bkstable] that will teach you everything you need to use Amethyst comfortably.\n\nIf you don't understand a part of the documentation, please let us know. Join us on Discord or open an issue; we are always happy to help!\n\n## Getting started\n\n### Before you begin\n\nThis repository uses Git LFS for some files used in examples.\nIf you intend to run the examples, make sure you have LFS installed in your system before you clone.\nYou can download it and read the installation instructions at [Git LFS home page](https://git-lfs.github.com/).\n\n### Examples\n\nTo compile any of the examples run:\n\n```shell\n$ cargo run -p name_of_example\n```\n\nAll available examples are listed under the [examples][exm] directory.\n\nFor a full-blown \"Hello World\" tutorial check out the [Getting Started][gs] chapter in the book.\n\n### Showcase games\n\nOur official showcase games demonstrate larger, continuously developed game projects made with Amethyst:\n\n- [Evoli] - 3D, ecosystem simulator\n- [Space Menace][menace] - 2D, action platformer\n\nFor more examples see [Games Made With Amethyst][gmwa] topic on the community forum for some good sources of inspiration.\n\n## Dependencies\n\nIf you are compiling on Linux, make sure to install the dependencies below.\n\n### Arch Linux\n\n```sh\npacman -Syu grep gcc pkgconf openssl alsa-lib cmake make python3 freetype2 awk libxcb\n```\n\n### Debian/Ubuntu\n\n```sh\napt install gcc pkg-config openssl libasound2-dev cmake build-essential python3 libfreetype6-dev libexpat1-dev libxcb-composite0-dev libssl-dev libx11-dev libfontconfig1-dev\n```\n\n### Fedora\n\n```sh\ndnf install pkgconfig gcc openssl-devel alsa-lib-devel cmake make gcc-c++ freetype-devel expat-devel libxcb-devel libX11-devel\n```\n\n### openSUSE\n\n```sh\nzypper install gcc pkg-config libopenssl-devel alsa-devel cmake gcc-c++ python3 freetype2-devel libexpat-devel libxcb-devel\n```\n\n### Nix/NixOS\n\nIn your project's root folder, create a file `shell.nix` with the following contents:\n\n```nix\nlet\n  mozilla = import (builtins.fetchTarball https://github.com/mozilla/nixpkgs-mozilla/archive/master.tar.gz);\n  nixpkgs = import <nixpkgs> { overlays = [ mozilla ]; };\nin\n\n  with nixpkgs;\n\n  mkShell {\n    buildInputs = [\n      alsaLib\n      cmake\n      freetype\n      latest.rustChannels.stable.rust\n      expat\n      openssl\n      pkgconfig\n      python3\n      vulkan-validation-layers\n      xlibs.libX11\n    ];\n\n    APPEND_LIBRARY_PATH = lib.makeLibraryPath [\n      vulkan-loader\n      xlibs.libXcursor\n      xlibs.libXi\n      xlibs.libXrandr\n    ];\n\n    shellHook = ''\n      export LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:$APPEND_LIBRARY_PATH\"\n    '';\n  }\n```\n\n### Other\n\nSee your distribution-specific installation process for the equivalent dependencies.\n\n**Please note that you need to have a functional graphics driver installed. If you get a panic about the renderer unable to create the context when trying to run an example, a faulty driver installation could be the issue.**\n\n## Building Documentation\n\nYou can build the book locally with:\n\n```sh\ncargo install mdbook\nmdbook build book\n```\n\nIf you're actively editing the book, it's easiest to run:\n\n```shell\nmdbook serve book\n```\n\nand navigate to `http://localhost:3000`. The text itself can be found in `book/html/index.html`. For more information, please see the [mdBook project](https://github.com/rust-lang-nursery/mdBook).\n\nTo generate the API documentation locally, do:\n\n```shell\n$ cargo doc\n```\n\nThe API reference can be found in `target/doc/amethyst/index.html`.\n\n## Questions/Help\n\nAmethyst supports _only_ the latest stable release of Rust. Use the nightly and beta channels with this project at your own risk.\n\nIf you have a question, please check out the [FAQ] before asking. Chances are, the solution to your problem is already present there. If you still need help, feel free to ask on our [Discord server][di].\n\nOther places you might want to check out are [r/rust\\_gamedev][rg] and the [#rust-gamedev IRC][irc].\n\n## Contributing\n\n**Note:** Any interaction with the Amethyst project is subject to our [Code of Conduct](https://github.com/amethyst/amethyst/blob/master/CODE_OF_CONDUCT.md).\n\nAmethyst is a community-based project that welcomes contributions from anyone. If you're interested in helping out, please read the [contribution guidelines][cm] before getting started.\n\nWe have a [good first issue][gfi] category that groups all issues or feature requests that can be made without having an extensive knowledge of Rust or Amethyst. Working on those issues is a good, if not the best, way to learn.\n\nIf you think you are not ready to code yet, you can still contribute by reviewing code written by other members of the community. Code reviews ensure that code merged into Amethyst is of the highest quality as possible. Pull requests that are available for reviews can be found [here][pr].\n\nIf for some reason we don't have any open PRs in need of a review nor any good first issues (that would be a good thing), feel free to consult our [issue tracker][it].\n\n## Backers\n\nThank you to all our backers! 🙏 [Become a backer](https://amethyst.rs/donate)\n\n## Sponsors\n\nAmethyst is supported by:\n\n<p>\n  <a href=\"https://www.digitalocean.com?utm_medium=opensource&utm_source=amethyst/\">\n    <img src=\"https://opensource.nyc3.cdn.digitaloceanspaces.com/attribution/assets/SVG/DO_Logo_horizontal_blue.svg\" width=\"201px\">\n  </a>\n</p>\n<p>\n  <a href=\"http://embark-studios.com\">\n    <img src=\"https://embark.dev/img/logo_black.png\" width=\"201px\">\n  </a>\n</p>\n\n## License\n\nAmethyst is free and open source software distributed under the terms of both the [MIT License][lm] and the [Apache License 2.0][la].\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[ac]: https://github.com/amethyst/amethyst/actions\n[bkm]: https://book.amethyst.rs/master/\n[bks14]: https://book.amethyst.rs/v0.14.0/\n[bkstable]: https://book.amethyst.rs/stable/\n[cc]: https://codecov.io/gh/amethyst/amethyst\n[ci]: https://crates.io/crates/amethyst/\n[cm]: docs/CONTRIBUTING.md\n[di]: https://discord.gg/amethyst\n[docs]: https://amethyst.rs/doc/\n[docs-badge]: https://img.shields.io/badge/docs-website-blue.svg\n[ds]: https://community.amethyst.rs/\n[ecs]: https://en.wikipedia.org/wiki/Entity%E2%80%93component%E2%80%93system\n[evoli]: https://github.com/amethyst/evoli\n[ex14]: https://github.com/amethyst/amethyst/tree/v0.14.0/examples\n[ex15]: https://github.com/amethyst/amethyst/tree/v0.15.0/examples\n[exm]: https://github.com/amethyst/amethyst/tree/master/examples\n[faq]: https://github.com/amethyst/amethyst/wiki/Frequently-Asked-Questions\n[feat]: docs/FEATURES.md\n[gfi]: https://github.com/amethyst/amethyst/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22\n[gmwa]: https://community.amethyst.rs/t/games-made-with-amethyst/134\n[gs]: https://book.amethyst.rs/stable/getting-started.html\n[irc]: https://botbot.me/mozilla/rust-gamedev/\n[it]: https://github.com/amethyst/amethyst/issues\n[la]: docs/LICENSE-APACHE\n[li]: COPYING\n[lm]: docs/LICENSE-MIT\n[menace]: https://github.com/amethyst/space-menace\n[pr]: https://github.com/amethyst/amethyst/pulls\n[rd]: https://www.reddit.com/r/Amethyst/\n[rg]: https://www.reddit.com/r/rust_gamedev/\n[ron]: https://github.com/ron-rs/ron\n[s1]: https://github.com/amethyst/amethyst/workflows/CI/badge.svg\n[s2]: https://img.shields.io/crates/v/amethyst.svg\n[s3]: https://img.shields.io/badge/license-MIT%2FApache-blue.svg\n[s4]: https://img.shields.io/discord/425678876929163284.svg?logo=discord\n[s5]: https://img.shields.io/badge/discourse-online-green.svg\n[s6]: https://tokei.rs/b1/github/amethyst/amethyst?category=code\n[s7]: https://img.shields.io/badge/dynamic/json.svg?label=r/Amethyst&query=%24.data.subscribers&url=https://www.reddit.com/r/Amethyst/about.json\n[s8]: https://img.shields.io/codecov/c/github/amethyst/amethyst.svg\n"
        },
        {
          "name": "amethyst_animation",
          "type": "tree",
          "content": null
        },
        {
          "name": "amethyst_assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "amethyst_audio",
          "type": "tree",
          "content": null
        },
        {
          "name": "amethyst_config",
          "type": "tree",
          "content": null
        },
        {
          "name": "amethyst_controls",
          "type": "tree",
          "content": null
        },
        {
          "name": "amethyst_core",
          "type": "tree",
          "content": null
        },
        {
          "name": "amethyst_derive",
          "type": "tree",
          "content": null
        },
        {
          "name": "amethyst_error",
          "type": "tree",
          "content": null
        },
        {
          "name": "amethyst_gltf",
          "type": "tree",
          "content": null
        },
        {
          "name": "amethyst_input",
          "type": "tree",
          "content": null
        },
        {
          "name": "amethyst_locale",
          "type": "tree",
          "content": null
        },
        {
          "name": "amethyst_network",
          "type": "tree",
          "content": null
        },
        {
          "name": "amethyst_rendy",
          "type": "tree",
          "content": null
        },
        {
          "name": "amethyst_test",
          "type": "tree",
          "content": null
        },
        {
          "name": "amethyst_tiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "amethyst_ui",
          "type": "tree",
          "content": null
        },
        {
          "name": "amethyst_utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "amethyst_window",
          "type": "tree",
          "content": null
        },
        {
          "name": "book",
          "type": "tree",
          "content": null
        },
        {
          "name": "bors.toml",
          "type": "blob",
          "size": 0.8583984375,
          "content": "# Test suite must pass on GitHub Actions before merging into `main`.\nstatus = [\n    \"Tests (macos-latest, stable)\",\n    \"Tests (macos-latest, beta)\",\n#    \"Tests (macos-latest, nightly)\",\n    \"Tests (windows-latest, stable)\",\n    \"Tests (windows-latest, beta)\",\n#    \"Tests (windows-latest, nightly)\",\n    \"Tests (ubuntu-18.04, stable)\",\n    \"Tests (ubuntu-18.04, beta)\",\n#    \"Tests (ubuntu-18.04, nightly)\",\n]\n\n# Do not allow pull requests with these labels to be merged.\nblock_labels = [\n    \"status: blocked\",\n    \"status: discussing\",\n    \"status: in progress\",\n    \"status: needs triage\"\n]\n\n# This feature is rarely useful and more often problematic, so we turn it off.\ndelete_merged_branches = false\n\n# Increase timeout to 5 hours as the default timeout is too short for our build\ntimeout_sec = 18000\n\n[committer]\nname = \"amethyst-bors\"\nemail = \"bors@amethyst-engine.org\"\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 1.583984375,
          "content": "use std::{\n    fs::{create_dir_all, read_to_string, remove_file},\n    path::Path,\n};\n\nuse dirs_next::config_dir;\nuse vergen::{self, ConstantsFlags};\n\nfn main() {\n    let amethyst_home = config_dir().map(|p| p.as_path().join(\"amethyst\"));\n\n    if let Some(amethyst_home) = amethyst_home {\n        if amethyst_home.exists() {\n            if let Some(true) = check_sentry_allowed(&amethyst_home) {\n                load_sentry_dsn();\n            };\n        } else {\n            create_dir_all(&amethyst_home).expect(\"Failed to create amethyst home directory.\");\n        };\n    }\n\n    vergen::generate_cargo_keys(ConstantsFlags::all())\n        .unwrap_or_else(|e| panic!(\"Vergen crate failed to generate version information! {}\", e));\n\n    println!(\"cargo:rerun-if-changed=build.rs\");\n}\n\nfn check_sentry_allowed(amethyst_home: &Path) -> Option<bool> {\n    let sentry_status_file = amethyst_home.join(\"sentry_status.txt\");\n    if sentry_status_file.exists() {\n        match read_to_string(&sentry_status_file) {\n            Ok(result) => {\n                match result.as_str().trim() {\n                    \"true\" => Some(true),\n                    \"false\" => Some(false),\n                    _ => {\n                        remove_file(sentry_status_file)\n                            .expect(\"Failed to remove invalid sentry file.\");\n                        None\n                    }\n                }\n            }\n            Err(_) => None,\n        }\n    } else {\n        None\n    }\n}\n\nfn load_sentry_dsn() {\n    let sentry_dsn = include_str!(\".sentry_dsn.txt\");\n    println!(\"cargo:rustc-env=SENTRY_DSN={}\", sentry_dsn);\n}\n"
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.150390625,
          "content": "type-complexity-threshold = 750\ncognitive-complexity-threshold = 50\ntoo-many-arguments-threshold = 15\ntoo-many-lines-threshold = 570\nmax-struct-bools = 7\n"
        },
        {
          "name": "deny.toml",
          "type": "blob",
          "size": 3.154296875,
          "content": "# See docs: https://embarkstudios.github.io/cargo-deny/checks/index.html\n\n[advisories]\nvulnerability = \"deny\"\nunmaintained = \"deny\"\nyanked = \"deny\"\nnotice = \"deny\"\nignore = [\n    \"RUSTSEC-2020-0053\", # FIXME: font-kit depends on old dirs\n    \"RUSTSEC-2020-0077\", # FIXME: distill depends on memmap\n    \"RUSTSEC-2020-0056\", # FIXME: cpal dependency, check wasm branches for fix\n    # FIXME(#2472)\n    # `stb_truetype` crate has been deprecated; use `ttf-parser` instead\n    # This crate was maintained for use in rusttype which has switched to use [ttf-parser](https://crates.io/crates/ttf-parser)\n    # URL: https://gitlab.redox-os.org/redox-os/stb_truetype-rs/-/commit/f1f5be4794e87bfc80a4255bc3f23ed75dd77645\n    \"RUSTSEC-2020-0020\",\n    # FIXME: net2 is pulled in via `mio` (https://github.com/tokio-rs/mio/issues/1319#issuecomment-683496712)\n    # The [`net2`](https://crates.io/crates/net2) crate has been deprecated\n    # and users are encouraged to considered [`socket2`](https://crates.io/crates/socket2) instead.\n    # URL: https://github.com/deprecrated/net2-rs/commit/3350e3819adf151709047e93f25583a5df681091\n    \"RUSTSEC-2020-0016\",\n]\n\n[bans]\nmultiple-versions = \"deny\"\nwildcards = \"warn\"\nskip = [\n    # FIXME: Waiting for alga to update its num-complex dep: https://github.com/dimforge/alga/pull/99\n    { version = \"=0.2.4\", name = \"num-complex\" },\n    { name = \"cfg-if\", version = \"0.1.10\" },\n    { name = \"winapi\", version = \"0.2.8\" }, # upgrade tokio and notify\n    { name = \"wasi\", version = \"0.9.0\" }, # upgrade tempfile and uuid\n    { name = \"rusttype\", version = \"0.8.3\" }, # upgrade glyph_brush\n    { name = \"redox_users\", version = \"0.3.5\" }, # upgrade font-kit\n    { name = \"nom\", version = \"5.1.2\" }, # upgrade cpal\n    { name = \"core-graphics\", version = \"0.19.2\" }, # winit uses both?\n    { name = \"core-foundation-sys\", version = \"0.6.2\" }, # upgrade cpal\n    { name = \"approx\", version = \"0.3.2\" }, # upgrade alga,rusttype,glyph_brush\n    { name = \"rand\", version = \"0.4.6\" }, # upgrade genmesh\n    { name = \"rand_hc\", version = \"0.2.0\" }, # upgrade nalgebra,glyph_brush\n    { name = \"rand_core\", version = \"0.5.1\" }, # upgrade nalgebra,glyph_brush\n    { name = \"rand_chacha\", version = \"0.2.2\" }, # upgrade nalgebra,glyph_brush\n    { name = \"rand\", version = \"0.7.3\" }, # upgrade nalgebra,glyph_brush\n    { name = \"itertools\", version = \"0.9.0\" }, # duplicates in rendy tree\n]\nskip-tree = [{ name = \"rendy\" }, { name = \"distill\" }]\ndeny = []\n\n[sources]\nunknown-registry = \"deny\"\nunknown-git = \"deny\"\nallow-registry = [\"https://github.com/rust-lang/crates.io-index\"]\nallow-git = []\nrequired-git-spec = \"rev\"\n\n[licenses]\nunlicensed = \"warn\"\ncopyleft = \"deny\"\ndefault = \"deny\"\nallow-osi-fsf-free = \"neither\"\n\ndeny = []\n\n# Run `cargo deny list` to see which crates use which license\n# and add them to this array if we accept them\n\nallow = [\n    \"MIT\",\n    \"Apache-2.0\",\n    \"Unlicense\",\n    \"Zlib\",\n    \"MPL-2.0\",\n    \"CC0-1.0\",\n    \"ISC\",\n    \"BSD-2-Clause\",\n    \"BSD-3-Clause\",\n]\n\nexceptions = [{ name = \"lazy-bytes-cast\", allow = [\"BSL-1.0\"] }]\n\n# We want really high confidence when inferring licenses from text\nconfidence-threshold = 0.93\n\n[sources.allow-org]\ngithub = [\"amethyst\", \"rust-windowing\"]\n"
        },
        {
          "name": "docs-nginx.conf.sigil",
          "type": "blob",
          "size": 0.6416015625,
          "content": "worker_processes 1;\nerror_log stderr;\npid nginx.pid;\ndaemon off;\n\nevents {\n  worker_connections 768;\n}\n\nhttp {\n  types_hash_max_size 2048;\n  include mime.types;\n  server {\n    listen {{ $.PORT }};\n    server_name  _;\n    root /app/www;\n    index index.html;\n    port_in_redirect off;\n\n    location = / {\n      return 301 /master/;\n    }\n\n    location = /master/.rev {\n      types {}\n      default_type text/plain;\n    }\n\n    location = /stable/.rev {\n      types {}\n      default_type text/plain;\n    }\n    \n    location = /wasm/.rev {\n      types {}\n      default_type text/plain;\n    }\n\n    location / {\n      try_files $uri $uri/ /index.html;\n    }\n  }\n}"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "find_glslc.sh",
          "type": "blob",
          "size": 0.296875,
          "content": "cd \"${0%/*}\"\nset -e\n\nBIN=\"\"\n\nif [ -e \"$(which glslc)\" ]; then\n    BIN=\"$(which glslc)\"\nelif [ -e \"$(which glslc.exe)\" ]; then\n    # support WSL\n    BIN=\"$(which glslc.exe)\"\nelse\n    >&2 echo \"Cannot find glslc binary. Make sure you have VulkanSDK installed and added to PATH.\"\n    exit 1\nfi\n\necho \"$BIN\"\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.173828125,
          "content": "unstable_features = true\nreorder_imports = true\nimports_granularity = \"Crate\"\ngroup_imports = \"StdExternalCrate\"\nforce_multiline_blocks = true\nformat_code_in_doc_comments = true\n"
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}