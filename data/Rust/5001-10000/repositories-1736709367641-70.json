{
  "metadata": {
    "timestamp": 1736709367641,
    "page": 70,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rustwasm/wasm-pack",
      "stars": 6421,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0947265625,
          "content": "target/\n**/*.rs.bk\ntests/.crates.toml\ntests/bin\n/build-installer\ndocs/book\ndocs/installer\n\n.idea\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 115.87890625,
          "content": "# Changelog\n\n## ü§ç Unreleased\n\n## ‚òÄÔ∏è 0.13.1\n\n- ### ‚ú® Features\n\n  - **Requests using proxy settings from env - [jjyr], [pull/1438]**\n\n    This enables ureq to use proxy settings from env, it solves lots of pain in network restricted environments.\n\n    [pull/1438]: https://github.com/rustwasm/wasm-pack/pull/1438\n    [jjyr]: https://github.com/jjyr\n\n- ### ü§ï Fixes\n\n  - **Update binary-install to v0.4.1 - [drager], [pull/1407]**\n\n    Release v0.4.0 of binary-install introduced a regression that caused failures on some platforms. This release fixes that regression.\n\n    [pull/1407]: https://github.com/rustwasm/wasm-pack/pull/1407\n    [drager]: https://github.com/drager\n\n  - ** Allow npm binary upgrades - [net], [pull/1439]**\n\n    Fixes an issue where upgrading `wasm-pack` via NPM would not update the underlying binary.\n    Previously, the binary was stored in the `binary-install` package's directory without versioning, causing version upgrades to silently fail as the old binary continued to be used.\n    The binary is now stored in `node_modules/wasm-pack/binary/`, ensuring proper version updates when upgrading the package.\n\n    **Before:** Upgrading from `0.12.1` to `0.13.0` would continue using the `0.12.1` binary\n    **After:** Each `wasm-pack` version manages its own binary, enabling proper version upgrades\n\n    [pull/1439]: https://github.com/rustwasm/wasm-pack/pull/1439\n    [net]: https://github.com/net\n\n- ### üõ†Ô∏è Maintenance\n  - ** Remove unmaintained dependency atty in favor of stdlib - [mariusvniekerk], [pull/1436]**\n\n    [pull/1436]: https://github.com/rustwasm/wasm-pack/pull/1436\n    [mariusvniekerk]: https://github.com/mariusvniekerk\n\n## ‚òÄÔ∏è 0.13.0\n\n- ### ‚ú® Features\n\n  - **Add option to skip optimization with wasm-opt - [sisou], [pull/1321]**\n\n    This feature introduces the `--no-opt` option to wasm-pack, providing a significant improvement in build efficiency for projects requiring multiple wasm-pack executions.\n\n    [pull/1321]: https://github.com/rustwasm/wasm-pack/pull/1321\n    [sisou]: https://github.com/sisou\n\n  - **Add support geckodriver for linux-aarch64 - [EstebanBorai], [pull/1371]**\n\n    Introduces support to download Geckodriver in Linux aarch64.\n\n    [pull/1371]: https://github.com/rustwasm/wasm-pack/pull/1371\n    [EstebanBorai]: https://github.com/EstebanBorai\n\n  - **Add wasm-opt linux aarch64 condition - [dkristia], [issue/1392], [pull/1393]**\n\n    A linux aarch64 build for wasm-opt exists in the newest binaryen versions.\n\n    [issue/1392]: https://github.com/rustwasm/wasm-pack/issues/1392\n    [pull/1393]: https://github.com/rustwasm/wasm-pack/pull/1393\n    [dkristia]: https://github.com/dkristia\n\n- ### ü§ï Fixes\n\n  - **Fix passing relative paths to cargo - [dfaust], [issue/704], [issue/1156], [issue/1252], [pull/1331]**\n\n    When building a crate located in a sub-directory, relative paths, passed as extra options to cargo (like `--target-dir`), are now handled correctly.\n\n    [issue/704]: https://github.com/rustwasm/wasm-pack/issues/704\n    [issue/1156]: https://github.com/rustwasm/wasm-pack/issues/1156\n    [issue/1252]: https://github.com/rustwasm/wasm-pack/issues/1252\n    [pull/1331]: https://github.com/rustwasm/wasm-pack/pull/1331\n    [dfaust]: https://github.com/dfaust\n\n  - **Rewrite wasm_target to use target-libdir - [daidoji], [issue/1342], [pull/1343]**\n\n    Rewritten wasm_target to use target libdir from the rustc tool rather than looking through sysroot. This is to accomodate non-rustup installations.\n\n    [issue/1342]: https://github.com/rustwasm/wasm-pack/issues/1342\n    [pull/1343]: https://github.com/rustwasm/wasm-pack/pull/1343\n    [daidoji]: https://github.com/daidoji\n\n  - **Declare ES module in package.json - [gthb], [issue/1039], [pull/1061]**\n\n    In bundler mode, generate package.json with \"type\": \"module\" and use the \"main\" attribute instead of the \"module\" attribute.\n\n    This change makes the built ES module palatable to Node.js (when run with --experimental-vm-modules --experimental-wasm-modules),\n    while it remains also palatable to webpack as illustrated in webpack/webpack#14313\n    (where the pkg subfolder is generated with wasm-pack built with this change).\n    This resolves the headache of using a wasm-pack-built package in a library that one needs to both run directly in Node and include in a webpack build.\n\n    [issue/1039]: https://github.com/rustwasm/wasm-pack/issues/1039\n    [pull/1061]: https://github.com/rustwasm/wasm-pack/pull/1061\n    [gthb]: https://github.com/gthb\n\n  - **Use new chromdriver endpoint and fix CI - [Myriad-Dreamin], [kade-robertson], [issue/1315], [issue/1390], [pull/1325], [pull/1391]**\n\n    [issue/1315]: https://github.com/rustwasm/wasm-pack/issues/1315\n    [issue/1390]: https://github.com/rustwasm/wasm-pack/issues/1390\n    [pull/1325]: https://github.com/rustwasm/wasm-pack/pull/1325\n    [pull/1391]: https://github.com/rustwasm/wasm-pack/pull/1391\n    [Myriad-Dreamin]: https://github.com/Myriad-Dreamin\n    [kade-robertson]: https://github.com/kade-robertson\n\n  - **Add mingw support to npm package - [nathaniel-daniel], [issue/1354], [issue/1359], [pull/1363]**\n\n     Fixes the NPM package's platform detection for mingw.\n\n    [issue/1354]: https://github.com/rustwasm/wasm-pack/issues/1354\n    [issue/1359]: https://github.com/rustwasm/wasm-pack/issues/1359\n    [pull/1363]: https://github.com/rustwasm/wasm-pack/pull/1363\n    [nathaniel-daniel]: https://github.com/nathaniel-daniel\n\n  - **pkg-dir option for pack and publish commands - [danielronnkvist], [issue/1369], [pull/1370]**\n\n    To be able to use these commands when the output directory option to the build command isn't the default pkg.\n\n    [issue/1369]: https://github.com/rustwasm/wasm-pack/issues/1369\n    [pull/1370]: https://github.com/rustwasm/wasm-pack/pull/1370\n    [danielronnkvist]: https://github.com/danielronnkvist\n\n  - **Optimize out-dir display - [ahaoboy], [issue/1395], [pull/1396]**\n\n    Optimize out-dir display.\n\n    from:\n\n    `[INFO]: üì¶ Your wasm pkg is ready to publish at /root/code/fib-wasm/fib-rs/../fib-wasm/wasm.`\n\n    to:\n\n    `[INFO]: üì¶ Your wasm pkg is ready to publish at /root/code/fib-wasm/fib-wasm/wasm.`\n\n\n    [issue/1395]: https://github.com/rustwasm/wasm-pack/issues/1395\n    [pull/1396]: https://github.com/rustwasm/wasm-pack/pull/1396\n    [ahaoboy]: https://github.com/ahaoboy\n\n- ### üõ†Ô∏è Maintenance\n  - **Fix error and warnings in install script - [lucashorward], [issue/1159], [issue/1217], [issue/1283], [pull/1320]**\n\n    [issue/1159]: https://github.com/rustwasm/wasm-pack/issues/1159\n    [issue/1217]: https://github.com/rustwasm/wasm-pack/issues/1217\n    [issue/1283]: https://github.com/rustwasm/wasm-pack/issues/1283\n    [pull/1320]: https://github.com/rustwasm/wasm-pack/pull/1320\n    [lucashorward]: https://github.com/lucashorward\n\n  - **Bump follow-redirects from 1.14.9 to 1.15.6 in /npm - [dependabot], [pull/1375]**\n\n    [pull/1375]: https://github.com/rustwasm/wasm-pack/pull/1375\n\n  - **Bump rustls-webpki from 0.100.1 to 0.100.2 - [dependabot], [pull/1323]**\n\n    [pull/1341]: https://github.com/rustwasm/wasm-pack/pull/1341\n\n  - **Bump rustix from 0.37.20 to 0.37.25 - [dependabot], [pull/1341]**\n\n    [pull/1323]: https://github.com/rustwasm/wasm-pack/pull/1323\n    [dependabot]: https://github.com/apps/dependabot\n\n  - **Bump rustls from 0.21.9 to 0.21.11 - [dependabot], [pull/1385]**\n\n    [pull/1385]: https://github.com/rustwasm/wasm-pack/pull/1385\n    [dependabot]: https://github.com/apps/dependabot\n\n  - **Bump tar from 6.1.11 to 6.2.1 in /npm - [dependabot], [pull/1379]**\n\n    [pull/1379]: https://github.com/rustwasm/wasm-pack/pull/1379\n    [dependabot]: https://github.com/apps/dependabot\n\n- ### üìñ Documentation\n\n  - **Fix typo in README - [Lionelf329], [pull/1368]**\n\n    [pull/1268]: https://github.com/rustwasm/wasm-pack/pull/1368\n    [Lionelf329]: https://github.com/Lionelf329\n\n  - **Add a description of build --target deno - [puxiao], [pull/1344]**\n\n    [pull/1344]: https://github.com/rustwasm/wasm-pack/pull/1344\n    [puxiao]: https://github.com/puxiao\n\n  - **Document deno in build target - [sigmaSd], [pull/1348]**\n\n    [pull/1348]: https://github.com/rustwasm/wasm-pack/pull/1348\n    [sigmaSd]: https://github.com/sigmaSd\n\n  - **Fix local navigation backing one step too far in docs - [SamuSoft], [pull/1387]**\n\n    [pull/1387]: https://github.com/rustwasm/wasm-pack/pull/1387\n    [SamuSoft]: https://github.com/SamuSoft\n\n  - **Add --target web to quick start build command - [josephrocca], [pull/1367]**\n\n    [pull/1367]: https://github.com/rustwasm/wasm-pack/pull/1367\n    [josephrocca]: https://github.com/josephrocca\n\n## ‚òÄÔ∏è 0.12.1\n\n- ### ü§ï Fixes\n\n  - **Restore --version command - [lynn], [issue/1301], [pull/1305]**\n\n    The --version command got lost in space in v0.12.0. It's now brought back!\n\n    [issue/1301]: https://github.com/rustwasm/wasm-pack/issues/1301\n    [pull/1305]: https://github.com/rustwasm/wasm-pack/pull/1305\n    [lynn]: https://github.com/lynn\n\n  - **Fix value parser for Option<PathBuf> - [Myriad-Dreamin], [issue/1304], [pull/1307]**\n\n    A value parser for OsString cannot parse a command line argument for Option<PathBuf>,\n    which let it failed to specify paths for pack, publish and test commands, this faulty behavior\n    was introduced in v0.12.0.\n\n    [issue/1304]: https://github.com/rustwasm/wasm-pack/issues/1304\n    [pull/1307]: https://github.com/rustwasm/wasm-pack/pull/1307\n    [Myriad-Dreamin]: https://github.com/Myriad-Dreamin\n\n## ‚òÄÔ∏è 0.12.0\n\n- ### ‚ú® Features\n\n  - **Add --no-pack flag to build command - [hamza1311], [ashleygwilliams], [issue/691], [issue/811], [pull/695], [pull/1291]**\n\n    When calling wasm-pack build a user can optionally pass --no-pack and wasm-pack will build your wasm, generate js, and not build a package.json.\n\n    [issue/691]: https://github.com/rustwasm/wasm-pack/issues/691\n    [issue/811]: https://github.com/rustwasm/wasm-pack/issues/811\n    [pull/695]: https://github.com/rustwasm/wasm-pack/pull/695\n    [pull/1291]: https://github.com/rustwasm/wasm-pack/pull/1291\n    [ashleygwilliams]: https://github.com/ashleygwilliams\n\n  - **Add wasmbindgen option: omit_default_module_path - [matthiasgeihs], [pull/1272]**\n\n    Adds an option to call wasm-bindgen with --omit_default_module_path.\n\n    [pull/1272]: https://github.com/rustwasm/wasm-pack/pull/1272\n    [matthiasgeihs]: https://github.com/matthiasgeihs\n\n- ### ü§ï Fixes\n\n  - **Add HTTP header USER-AGENT - [LeviticusNelson], [issue/1266], [pull/1285]**\n\n    We encountered some issues when we didn't send an User-Agent. This is now fixed.\n\n    [issue/1266]: https://github.com/rustwasm/wasm-pack/issues/1266\n    [pull/1285]: https://github.com/rustwasm/wasm-pack/pull/1285\n    [LeviticusNelson]: https://github.com/LeviticusNelson\n\n  - **Replace curl with ureq - [hamza1311], [issue/650], [issue/823], [issue/997], [issue/1079], [issue/1203], [issue/1234], [issue/1281], [pull/1290]**\n\n    The HTTP client is now pure Rust. Removes the dependency of openssl which have caused a lot of issues for people using wasm-pack on various distributions.\n\n    [issue/650]: https://github.com/rustwasm/wasm-pack/issues/650\n    [issue/823]: https://github.com/rustwasm/wasm-pack/issues/823\n    [issue/997]: https://github.com/rustwasm/wasm-pack/issues/997\n    [issue/1079]: https://github.com/rustwasm/wasm-pack/issues/1079\n    [issue/1203]: https://github.com/rustwasm/wasm-pack/issues/1203\n    [issue/1234]: https://github.com/rustwasm/wasm-pack/issues/1234\n    [issue/1281]: https://github.com/rustwasm/wasm-pack/issues/1281\n    [pull/1290]: https://github.com/rustwasm/wasm-pack/pull/1290\n    [hamza1311]: https://github.com/hamza1311\n\n  - **Update binary-install to 0.2.0. binary-install replaced curl with ureq - [drager]**\n\n    See [PR](https://github.com/rustwasm/binary-install/pull/24) in binary-install repo for more information.\n\n    [drager]: https://github.com/drager\n\n  - **Remove --always-auth from npm login - [EstebanBorai], [pull/1288]**\n\n    npm login doesn't support --always-auth anymore, instead it is under the adduser subcommand.\n\n    [pull/1288]: https://github.com/rustwasm/wasm-pack/pull/1288\n    [EstebanBorai]: https://github.com/EstebanBorai\n\n  - **Turn off cargo colors during log level test - [dtolnay], [pull/1294]**\n\n    [pull/1294]: https://github.com/rustwasm/wasm-pack/pull/1294\n    [dtolnay]: https://github.com/dtolnay\n\n  - **Fix getting the target-dir in wasm_bindgen_build - [tomasol], [issue/1278], [pull/1279]**\n\n    Fixes a wasm-pack panic if --target-dir was supplied (and arguments are not sorted).\n\n    [issue/1278]: https://github.com/rustwasm/wasm-pack/issues/1278\n    [pull/1279]: https://github.com/rustwasm/wasm-pack/pull/1279\n    [tomasol]: https://github.com/tomasol\n\n  - **Respect package.readme in Cargo.toml - [heaths], [issue/1215], [pull/1298], [pull/1216]**\n\n    wasm-pack now respects specifying readme=false:\n\n    ```toml\n    [package]\n    readme = false\n    ```\n\n    [issue/1215]: https://github.com/rustwasm/wasm-pack/issues/1215\n    [pull/1298]: https://github.com/rustwasm/wasm-pack/pull/1298\n    [pull/1216]: https://github.com/rustwasm/wasm-pack/pull/1216\n    [heaths]: https://github.com/heaths\n\n- ### üìñ Documentation\n\n  - **Don't hide install options behind link - [oyamauchi], [issue/355], [pull/1242]**\n\n    [issue/355]: https://github.com/rustwasm/wasm-pack/issues/355\n    [pull/1242]: https://github.com/rustwasm/wasm-pack/issues/1242\n    [oyamauchi]: https://github.com/oyamauchi\n\n- ### üõ†Ô∏è Maintenance\n\n  - **Bump cargo-generate version to 0.18.2 - [sassman], [issue/1245] [pull/1269]**\n\n    [issue/1245]: https://github.com/rustwasm/wasm-pack/issues/1245\n    [pull/1269]: https://github.com/rustwasm/wasm-pack/pull/1269\n    [sassman]: https://github.com/sassman\n\n  - **Replace unmaintained actions-rs/toolchain action in CI workflows - [striezel], [pull/1246]**\n\n    Now we are using https://github.com/dtolnay/rust-toolchain instead.\n\n    [pull/1246]: https://github.com/rustwasm/wasm-pack/pull/1246\n    [striezel]: https://github.com/striezel\n\n  - **Update several dependencies - [hamza1311], [pull/1292]**\n\n    Updated clap, toml, predicates and serial_test to their latest versions.\n\n    [pull/1292]: https://github.com/rustwasm/wasm-pack/pull/1292\n\n## üå¶Ô∏è 0.11.1\n\n- ### ü§ï Fixes\n\n  - **Fix discovery of locally installed `wasm-opt` - [Liamolucko], [issue/1247], [pull/1257]**\n\n    [issue/1247]: https://github.com/rustwasm/wasm-pack/issues/1247\n    [pull/1257]: https://github.com/rustwasm/wasm-pack/pull/1257\n    [Liamolucko]: https://github.com/Liamolucko\n\n  - **Fix wasm-pack bin script entry - [ahippler], [issue/1248], [pull/1250]**\n\n    [issue/1248]: https://github.com/rustwasm/wasm-pack/issues/1248\n    [pull/1250]: https://github.com/rustwasm/wasm-pack/pull/1250\n    [ahippler]: https://github.com/ahippler\n\n- ### üõ†Ô∏è Maintenance\n\n  - **bump openssl from 0.10.46 to 0.10.48 - [pull/1254]**\n\n    [pull/1254]: https://github.com/rustwasm/wasm-pack/pull/1254\n\n## üå¶Ô∏è 0.11.0\n\n- ### ‚ú® Features\n\n  - **Make Deno target available - [egfx-notifications], [issue/672], [issue/879], [pull/1117]**\n\n    [issue/672]: https://github.com/rustwasm/wasm-pack/issues/672\n    [issue/879]: https://github.com/rustwasm/wasm-pack/issues/879\n    [pull/1117]: https://github.com/rustwasm/wasm-pack/pull/1117\n    [egfx-notifications]: https://github.com/egfx-notifications\n\n  - **Add support for more platforms to installer script - [omninonsense], [issue/1064], [issue/952], [issue/1125], [pull/1122]**\n\n    This makes the installation script work on M1 macs, as well as inside docker (especially when combined with buildx) for aarch64/arm64 architectures.\n\n    [issue/1064]: https://github.com/rustwasm/wasm-pack/issues/1064\n    [issue/952]: https://github.com/rustwasm/wasm-pack/issues/952\n    [issue/1125]: https://github.com/rustwasm/wasm-pack/issues/1125\n    [pull/1122]: https://github.com/rustwasm/wasm-pack/pull/1122\n    [omninonsense]: https://github.com/omninonsense\n\n  - **Add Linux arm64 support - [nnelgxorz], [issue/1169], [pull/1170]**\n\n    [issue/1169]: https://github.com/rustwasm/wasm-pack/issues/1169\n    [pull/1170]: https://github.com/rustwasm/wasm-pack/pull/1170\n    [nnelgxorz]: https://github.com/nnelgxorz\n\n  - **Add support for workspace inheritance - [printfn], [issue/1180], [pull/1185]**\n\n    [issue/1180]: https://github.com/rustwasm/wasm-pack/issues/1180\n    [pull/1185]: https://github.com/rustwasm/wasm-pack/pull/1185\n\n- ### ü§ï Fixes\n\n  - **--target-dir as extra option is now considered as expected - [sassman], [issue/1076], [pull/1082]**\n\n    [issue/1076]: https://github.com/rustwasm/wasm-pack/issues/1076\n    [pull/1082]: https://github.com/rustwasm/wasm-pack/pull/1082\n    [sassman]: https://github.com/sassman\n\n  - **Pass through --weak-refs --reference-types flags to bindgen - [serprex], [issue/930], [pull/937]**\n\n    [issue/930]: https://github.com/rustwasm/wasm-pack/issues/930\n    [pull/937]: https://github.com/rustwasm/wasm-pack/pull/937\n    [serprex]: https://github.com/serprex\n\n  - **Fix binaryen URL and use updated binary-install to fix installation on macOS - [matheus23], [printfn], [pull/1188]**\n\n    Use the updated binary-install crate (rustwasm/binary-install#21), switches from failure to anyhow to match what binary-install uses, and fixes wasm-opt installation on macOS.\n\n    [pull/1188]: https://github.com/rustwasm/wasm-pack/pull/1188\n    [matheus23]: https://github.com/matheus23\n    [printfn]: https://github.com/printfn\n    [rustwasm/binary-install#21]: https://github.com/rustwasm/binary-install/pull/21\n\n  - **Mark snippets and the bundler target's main file as having side effects - [Liamolucko], [issue/972], [rustwasm/wasm-bindgen/3276], [pull/1224]**\n\n    [issue/972]: https://github.com/rustwasm/wasm-pack/issues/972\n    [rustwasm/wasm-bindgen/3276]: https://github.com/rustwasm/wasm-bindgen/issues/3276\n    [pull/1224]: https://github.com/rustwasm/wasm-pack/pull/1224\n    [Liamolucko]: https://github.com/Liamolucko\n\n- ### üìñ Documentation\n\n  - **Fix typos in non-rustup-setups.md - [dallasbrittany], [issue/1141], [pull/1142]**\n\n    [issue/1141]: https://github.com/rustwasm/wasm-pack/issues/1141\n    [pull/1142]: https://github.com/rustwasm/wasm-pack/issues/1141\n    [dallasbrittany]: https://github.com/dallasbrittany\n\n  - **Fix typos in considerations.md - [lhjt], [pull/1066]**\n\n    [pull/1066]: https://github.com/rustwasm/wasm-pack/pull/1066\n    [lhjt]: https://github.com/lhjt\n\n  - **Grammar and typo fixes - [helixbass], [pull/1143]**\n\n    [pull/1143]: https://github.com/rustwasm/wasm-pack/pull/1143\n    [helixbass]: https://github.com/helixbass\n\n  - **Replace two mentions of wasm-pack init with wasm-pack build in the docs - [mstange], [pull/1086]**\n\n    [pull/1086]: https://github.com/rustwasm/wasm-pack/pull/1086\n    [mstange]: https://github.com/mstange\n\n  - **Update npm installation link - [benediktwerner], [pull/1227]**\n\n    [pull/1227]: https://github.com/rustwasm/wasm-pack/pull/1227\n    [benediktwerner]: https://github.com/benediktwerner\n\n- ### üõ†Ô∏è Maintenance\n\n  - **Bump wasm-opt to version 108 - [MichaelMauderer], [issue/1135] [pull/1136]**\n\n    [pull/1136]: https://github.com/rustwasm/wasm-pack/pull/1136\n    [issue/1135]: https://github.com/rustwasm/wasm-pack/issues/1135\n    [MichaelMauderer]: https://github.com/MichaelMauderer\n\n  - **Update binary-install to v1.0.1 - [EverlastingBugstopper], [pull/1130]**\n\n    [pull/1130]: https://github.com/rustwasm/wasm-pack/pull/1130\n\n  - **Add back run.js to npm installer - [EverlastingBugstopper], [pull/1149]**\n\n    [pull/1149]: https://github.com/rustwasm/wasm-pack/pull/1149\n\n  - **Fix some typos in the codebase - [striezel], [pull/1220]**\n\n    [pull/1220]: https://github.com/rustwasm/wasm-pack/pull/1220\n    [striezel]: https://github.com/striezel\n\n  - **Update actions/checkout in GitHub Actions workflows to v3 - [striezel], [pull/1221]**\n\n    [pull/1221]: https://github.com/rustwasm/wasm-pack/pull/1221\n\n  - **Update actions/cache in GitHub Actions workflows to v3 - [striezel], [pull/1222]**\n\n    [pull/1222]: https://github.com/rustwasm/wasm-pack/pull/1222\n\n  - **Update JamesIves/github-pages-deploy-action in GHA workflow to v4.4.1 - [striezel], [pull/1223]**\n\n    [pull/1223]: https://github.com/rustwasm/wasm-pack/pull/1223\n\n## üå¶Ô∏è 0.10.3\n\n- ### ü§ï Fixes\n\n  - **Use bash to create release tarballs - [nasso], [issue/1097] [pull/1144]**\n\n     Fixes Windows installer failure due to malformatted tar.\n\n    [pull/1144]: https://github.com/rustwasm/wasm-pack/pull/1144\n    [issue/1097]: https://github.com/rustwasm/wasm-pack/issues/1097\n    [nasso]: https://github.com/nasso\n\n  - **Clean up package.json from previous runs - [main--], [issue/1110-comment] [pull/1119]**\n\n     Remove the package.json file from previous runs to avoid crashes.\n\n    [pull/1119]: https://github.com/rustwasm/wasm-pack/pull/1119\n    [issue/1110-comment]: https://github.com/rustwasm/wasm-pack/pull/1110#issuecomment-1059008962\n    [main--]: https://github.com/main--\n\n  - **Do not remove the pkg directory - [huntc], [issue/1099] [pull/1110]**\n\n     A recent change ensured that the pkg directory was removed as the first step of attempting to create it.\n     Unfortunately, this caused a problem for webpack when watching the pkg directory.\n     Webpack was unable to recover its watching and so any watch server must be restarted,\n     which is a blocker when using it. This PR and release fixes this.\n\n    [pull/1110]: https://github.com/rustwasm/wasm-pack/pull/1110\n    [issue/1099]: https://github.com/rustwasm/wasm-pack/issues/1099\n    [huntc]: https://github.com/huntc\n\n  - **Bump regex from 1.5.4 to 1.5.6 - [dependabot], [pull/1147]**\n\n    Version 1.5.5 of the regex crate fixed a security bug in the regex compiler.\n\n    [pull/1147]: https://github.com/rustwasm/wasm-pack/pull/1147\n\n  - **Bump openssl-src from 111.17.0+1.1.1m to 111.20.0+1.1.1o - [dependabot], [pull/1146]**\n\n    Bring in bug fixes from the new version of openssl-src.\n\n    [pull/1146]: https://github.com/rustwasm/wasm-pack/pull/1146\n    [dependabot]: https://github.com/apps/dependabot\n\n\n## üå¶Ô∏è 0.10.2\n\n- ### ‚ú® Features\n\n  - **Implement support for RFC 8, transitive NPM dependencies - [jpgneves], [issue/606] [pull/986]**\n\n    [pull/986]: https://github.com/rustwasm/wasm-pack/pull/986\n    [issue/606]: https://github.com/rustwasm/wasm-pack/issues/606\n    [jpgneves]: https://github.com/jpgneves\n\n- ### ü§ï Fixes\n\n  - **Add support for macos aarch64 - [d3lm], [issue/913] [pull/1088]**\n\n     This fixes aarch64 for MacOS and will download x86_64-apple-darwin.\n\n    [pull/1088]: https://github.com/rustwasm/wasm-pack/pull/1088\n    [issue/913]: https://github.com/rustwasm/wasm-pack/issues/913\n    [d3lm]: https://github.com/d3lm\n\n  - **Add linux/arm64 to release workflow - [nacardin], [issue/1064] [pull/1065]**\n\n    [pull/1065]: https://github.com/rustwasm/wasm-pack/pull/1065\n    [issue/1064]: https://github.com/rustwasm/wasm-pack/issues/1064\n    [nacardin]: https://github.com/nacardin\n\n  - **Force axios version - [drager], [pull/1094]**\n\n    Forces npm package `axios` to version `0.21.2` in order to get security fix for a security vulnerability present in axios\n    before version `0.21.2`.\n\n    [pull/1094]: https://github.com/rustwasm/wasm-pack/pull/1094\n\n- ### üìñ Documentation\n\n  - **Update docs for how to pass extra options to cargo - [FrankenApps], [issue/1059] [pull/1073]**\n\n    [FrankenApps]: https://github.com/FrankenApps\n    [pull/1073]: https://github.com/rustwasm/wasm-pack/pull/1073\n    [issue/1059]: https://github.com/rustwasm/wasm-pack/issues/1059\n\n\n## üå¶Ô∏è 0.10.1\n\n- ### ü§ï Fixes\n\n  - **Add exe to binary name if windows - [drager], [issue/1038] [pull/1055]**\n\n    [pull/1055]: https://github.com/rustwasm/wasm-pack/pull/1055\n    [issue/1038]: https://github.com/rustwasm/wasm-pack/issues/1038\n\n## üå¶Ô∏è 0.10.0\n\n- ### ‚ú® Features\n\n  - **Added keywords - [lucashorward], [issue/707] [pull/838]**\n\n    `package.json` files usually contain a keywords array so that npm can make searching easier.\n    This PR extracts keywords from `Cargo.toml` and puts them into `package.json`.\n\n    [lucashorward]: https://github.com/lucashorward\n    [pull/838]: https://github.com/rustwasm/wasm-pack/pull/838\n    [issue/707]: https://github.com/rustwasm/wasm-pack/issues/707\n\n- ### ü§ï Fixes\n\n  - **Update binary-install to get fix for axios security vulnerability - [simlay], [Rizary], [issue/958] [pull/973] [pull/1012]**\n\n    Updates `binary-install` npm package to version `^0.1.0` in order to get security fix for a security vulnerability in axios.\n\n    [simlay]: https://github.com/simlay\n    [rizary]: https://github.com/Rizary\n    [pull/973]: https://github.com/rustwasm/wasm-pack/pull/973\n    [pull/1012]: https://github.com/rustwasm/wasm-pack/pull/1012\n    [issue/958]: https://github.com/rustwasm/wasm-pack/issues/958\n\n  - **Fix cargo-generate installation - [bradyjoslin], [issue/975] [issue/907] [pull/983]**\n\n    `wasm-pack new hello-wasm` didn't work due to a bad link when trying to install `cargo-generate`.\n\n    This PR points the installation to the correct place and makes `wasm-pack new` working again!\n\n    [bradyjoslin]: https://github.com/bradyjoslin\n    [pull/983]: https://github.com/rustwasm/wasm-pack/pull/983\n    [issue/975]: https://github.com/rustwasm/wasm-pack/issues/975\n    [issue/907]: https://github.com/rustwasm/wasm-pack/issues/907\n\n  - **Pass through extra options when building tests - [azriel91], [issue/698] [pull/851]**\n\n    `wasm-pack test` accepts extra options to pass through to `cargo` when running tests.\n    Under the hood, this runs `cargo build` before `cargo test`, and the additional options were only passed through to the `test` command. This meant that crates that enabled native features by default could not be built using `wasm-pack`, as it would attempt to build tests for the `wasm32-unknown-unknown` target with the native features enabled.\n\n    This PR passes through the extra options to `cargo` when building the tests as well.\n\n    [azriel91]: https://github.com/azriel91\n    [pull/851]: https://github.com/rustwasm/wasm-pack/pull/851\n    [issue/698]: https://github.com/rustwasm/wasm-pack/issues/698\n\n  - **Corrected files included in package.json for bundler / no target - [lucashorward], [issue/837] [pull/839]**\n\n    `wasm-pack build` and `wasm-pack build --target bundler` generates a \\_bg.js file, but it was not added to the `package.json`.\n    The file that is added, \\*.js will however reference the \\_bg.js, so when the package was distributed (both through pack or publish) it is not usable.\n\n    This PR includes that \\_bg.js file in `package.json`.\n\n    [pull/839]: https://github.com/rustwasm/wasm-pack/pull/839\n    [issue/837]: https://github.com/rustwasm/wasm-pack/issues/837\n\n  - **Find the main package if multiple packages have the same name - [ghost], [pull/830]**\n\n    If there were 2 packages with the same name, `wasm-pack` would sometimes use the wrong one and errored.\n\n    [ghost]: https://github.com/ghost\n    [pull/830]: https://github.com/rustwasm/wasm-pack/pull/830\n    [issue/829]: https://github.com/rustwasm/wasm-pack/issues/829\n\n- ### üìñ Documentation\n\n  - **Remove duplicated \"is\" in the wee_alloc tutorial- [pione30], [issue/1003] [pull/1004]**\n\n    [pione30]: https://github.com/pione30\n    [pull/1004]: https://github.com/rustwasm/wasm-pack/pull/1004\n    [issue/1003]: https://github.com/rustwasm/wasm-pack/issues/1003\n\n  - **Fix TOC links - [Swaagie], [pull/1007]**\n\n    [swaagie]: https://github.com/Swaagie\n    [pull/1007]: https://github.com/rustwasm/wasm-pack/pull/1007\n\n  - **Remove outdated TOC heading- [gthb], [pull/1011]**\n\n    [gthb]: https://github.com/gthb\n    [pull/1011]: https://github.com/rustwasm/wasm-pack/pull/1011\n\n  - **Add link to template repo - [milahu], [pull/942]**\n\n    [milahu]: https://github.com/milahu\n    [pull/942]: https://github.com/rustwasm/wasm-pack/pull/942\n\n  - **Remove greenkeeper reference - [cdvv7788], [crotwell], [issue/1001] [pull/844] [pull/1002]**\n\n    [cdvv7788]: https://github.com/cdvv7788\n    [crotwell]: https://github.com/crotwell\n    [pull/844]: https://github.com/rustwasm/wasm-pack/pull/844\n    [pull/1002]: https://github.com/rustwasm/wasm-pack/pull/1002\n    [issue/1001]: https://github.com/rustwasm/wasm-pack/issues/1001\n\n- ### üõ†Ô∏è Maintenance\n\n  - **Fix CI. Remove appveyor and travis and use Github actions - [ashleygwilliams], [drager], [issue/594] [issue/979] [pull/947]**\n\n    [pull/947]: https://github.com/rustwasm/wasm-pack/pull/947\n    [issue/594]: https://github.com/rustwasm/wasm-pack/issues/594\n    [issue/979]: https://github.com/rustwasm/wasm-pack/issues/979\n\n  - **Cargo update - [ashleygwilliams], [pull/800]**\n\n    [ashleygwilliams]: https://github.com/ashleygwilliams\n    [pull/800]: https://github.com/rustwasm/wasm-pack/pull/800\n\n  - **Remove dirs dependency - [brightly-salty], [issue/943] [pull/944]**\n\n    [brightly-salty]: https://github.com/brightly-salty\n    [pull/944]: https://github.com/rustwasm/wasm-pack/pull/944\n    [issue/943]: https://github.com/rustwasm/wasm-pack/issues/943\n\n  - **Fix logs for uniformity - [petosorus], [issue/716] [pull/723]**\n\n    [petosorus]: https://github.com/petosorus\n    [pull/723]: https://github.com/rustwasm/wasm-pack/pull/723\n    [issue/716]: https://github.com/rustwasm/wasm-pack/issues/716\n\n  - **Fixing build error - [Pauan], [pull/841]**\n\n    [pull/841]: https://github.com/rustwasm/wasm-pack/pull/841\n\n## ‚òÅÔ∏è  0.9.1\n\n- ### ü§ï Fixes\n\n  - **Bump binaryen to version_90 - [ashleygwilliams], [issue/781] [issue/782] [pull/687]**\n\n    Previously, wasm-pack was hardcoded to install and attempt to execute wasm-opt on every build\n    using binaryen version 78. This version had various issues on Unix/Linux and caused broken CI\n    builds for many folks (we're so sorry!).\n\n    This PR updates the binaryen version to 90, which should fix the issues folks were having. \n\n    Long-term, we'd like to create an auto-updating mechanism so that we can install and use the\n    latest release of binaryen as we do for other binaries we orchestrate.\n\n    [ashleygwilliams]: https://github.com/ashleygwilliams\n    [pull/687]: https://github.com/rustwasm/wasm-pack/pull/687\n    [issue/782]: https://github.com/rustwasm/wasm-pack/issues/782\n    [issue/781]: https://github.com/rustwasm/wasm-pack/issues/781\n\n- ### üõ†Ô∏è Maintenance\n\n  - **Consolidate wasm-opt installation into existing binary install logic - [ashleygwilliams], [issue/685] [pull/687]**\n\n    [ashleygwilliams]: https://github.com/ashleygwilliams\n    [pull/687]: https://github.com/rustwasm/wasm-pack/pull/687\n    [issue/685]: https://github.com/rustwasm/wasm-pack/issues/685\n\n## üå•Ô∏è 0.9.0\n\n- ### ‚ú® Features\n\n  - **Adding in `--quiet` and `--log-level` flags to control the console output - [Pauan], [pull/694]**\n\n    The `--verbose` flag has long existed as a way to get more console output, but now there are two flags to get *less* console output:\n\n    * `--quiet` will silence *all* stdout, so only errors will be displayed.\n    * `--log-level` can be used to silence `[INFO]` or `[WARN]` output from wasm-pack.\n\n    You can cause it to display even *more* information by using `--verbose`, or you can silence *all* stdout by using `--quiet`.\n\n    You can also use `--log-level` to have fine-grained control over wasm-pack's log output:\n\n    * `--log-level info` is the default, it causes all messages to be logged.\n    * `--log-level warn` causes warnings and errors to be displayed, but not info.\n    * `--log-level error` causes only errors to be displayed.\n\n    These flags are global flags, so they can be used with every command, and they must come *before* the command:\n\n    ```sh\n    wasm-pack --log-level error build\n    wasm-pack --quiet build\n    ```\n\n    [Pauan]: https://github.com/Pauan\n    [pull/694]: https://github.com/rustwasm/wasm-pack/pull/694\n\n  - **Wrap `cargo-generate` with `wasm-pack new` - [ashleygwilliams], [issue/373] [pull/623]**\n\n    One of the first steps in getting started with `wasm-pack` is to `cargo install cargo-generate` to bootstrap some project templates. This can take a while and is an extra burden on users just getting started with `wasm-pack`. `wasm-pack new` uses `cargo-generate` to bootstrap new projects, removing the need to install the tool on your own. You can read more about this feature [here](https://github.com/rustwasm/wasm-pack/blob/master/docs/src/commands/new.md).\n\n    [ashleygwilliams]: https://github.com/ashleygwilliams\n    [pull/623]: https://github.com/rustwasm/wasm-pack/pull/623\n    [issue/373]: https://github.com/rustwasm/wasm-pack/issues/373\n\n  - **Allow `wasm-pack` to be run from subdirectories - [gameldar], [issue/620] [pull/624]**\n\n    If a crate path is not specified when running `wasm-pack` and there is no `Cargo.toml` in the current working directory, `wasm-pack` will walk up the directory structure to find a `Cargo.toml`.\n\n    [gameldar]: https://github.com/gameldar\n    [pull/624]: https://github.com/rustwasm/wasm-pack/pull/624\n    [issue/620]: https://github.com/rustwasm/wasm-pack/issues/620\n\n  - **Automatically execute `wasm-opt` on produced binaries - [alexcrichton], [issue/159] [pull/625]**\n\n    When `wasm-pack` builds binaries in released and profiling modes, it will execute `wasm-opt` on the binary, making the result smaller and more performant.\n\n    [alexcrichton]: https://github.com/alexcrichton\n    [pull/625]: https://github.com/rustwasm/wasm-pack/pull/625\n    [issue/159]: https://github.com/rustwasm/wasm-pack/issues/159  \n\n  - **Helpful error message when wasm-bindgen fails because of an old version - [gameldar], [ashleygwilliams], [issue/627] [pull/633]**\n\n    `wasm-pack` will pass a `--web` flag to `wasm-bindgen` when `wasm-pack build --target web` is run. Before, if the user had an old version of `wasm-bindgen` in their dependencies, they would receive a cryptic error message. Now they will be notified that they need to update their `wasm-bindgen` dependency if they want to build for the `web` target.\n\n    [gameldar]: https://github.com/gameldar\n    [pull/633]: https://github.com/rustwasm/wasm-pack/pull/633\n    [issue/627]: https://github.com/rustwasm/wasm-pack/issues/627\n\n  - **Publish releases by tag to npm - [Tarnadas], [pull/690]**\n\n    You can now use `wasm-pack publish` to publish tagged releases with the optional `--tag` argument. You can read more about [distribution tags](https://docs.npmjs.com/cli/dist-tag) on NPM, and more about this feature in [our docs](https://github.com/Tarnadas/wasm-pack/blob/master/docs/src/commands/pack-and-publish.md#publishing-tagged-releases).\n\n    [Tarnadas]: https://github.com/Tarnadas\n    [pull/690]: https://github.com/rustwasm/wasm-pack/pull/690\n\n- ### ü§ï Fixes\n\n  - **Only use exactly v0.24.0 geckodriver on Windows - [ashleygwilliams], [issue/770] [pull/774]**\n\n    `wasm-pack test` is a great way to test your web Wasm modules- and it very nicely sets up and configures\n    the necessary browser engine drivers to do so!\n\n    For the v0.25.0 release of geckodriver, the team switched their build environment- which introduced a new\n    surprise runtime dependency, Visual C++ redistributable package, to their windows binaries. You can read\n    more about the issue here, [mozilla/geckodriver/issue/1617].\n\n    Becuase the introduction of this runtime dependency is considered a bug, and should be eventually fixed,\n    the team decided that the least invasive solution would be to hold geckodriver binaries, on Windows, at\n    v0.24.0, and to disable the auto-update logic, until the bug is fixed.\n\n    [ashleygwilliams]: https://github.com/ashleygwilliams\n    [issue/770]: https://github.com/rustwasm/wasm-pack/issues/770\n    [pull/774]: https://github.com/rustwasm/wasm-pack/pull/774\n    [mozilla/geckodriver/issue/1617]: https://github.com/mozilla/geckodriver/issues/1617#issuecomment-532168958\n\n  - **Handle version check failures - [drager], [issue/652], [issue/653] [pull/660]**\n\n    Every day, `wasm-pack` checks the crates.io API for the latest version number and lets the user know if their installation is out of date. Now, when these API calls fail, `wasm-pack` alerts the user of the failure and waits until the next day to make another call to crates.io.\n\n    [drager]: https://github.com/drager\n    [pull/660]: https://github.com/rustwasm/wasm-pack/pull/660\n    [issue/652]: https://github.com/rustwasm/wasm-pack/issues/652\n    [issue/653]: https://github.com/rustwasm/wasm-pack/issues/653\n\n  - **Add user agent for version check - [drager], [issue/651] [pull/658]**\n\n    crates.io requires tools to set a version check `User-Agent` header when requesting the latest version. Now, when `wasm-pack` performs an API request to crates.io, it sends `User-Agent: wasm-pack/0.9.0`.\n\n    [drager]: https://github.com/drager\n    [pull/658]: https://github.com/rustwasm/wasm-pack/pull/658\n    [issue/651]: https://github.com/rustwasm/wasm-pack/issues/651\n\n  - **Remove broken link from the README - [drager], [pull/635]**\n\n    [drager]: https://github.com/drager\n    [pull/635]: https://github.com/rustwasm/wasm-pack/pull/635 \n\n  - **Make `sideEffects` in generated `package.json` a boolean instead of a string - [rhysd], [pull/649]**\n\n    [rhysd]: https://github.com/rhysd\n    [pull/649]: https://github.com/rustwasm/wasm-pack/pull/649\n\n  - **Don't warn if license-file is present - [ashleygwilliams], [issue/692] [pull/693]**\n\n    Previously, `wasm-pack` would warn that the `license` field was missing if the `license-file` field was used instead. This warning is now only surfaced if both `license` and `license-field` are absent from a `Cargo.toml`.\n\n    [ashleygwilliams]: https://github.com/ashleygwilliams\n    [pull/693]: https://github.com/rustwasm/wasm-pack/pull/693\n    [issue/692]: https://github.com/rustwasm/wasm-pack/issues/692\n\n  - **Select correct webdriver version - [MartinKavik], [issue/611] [pull/706]**\n\n    `wasm-pack` used to install a pinned version of the Chrome, Gecko, and Safari drivers. Now when a driver needs to be installed, `wasm-pack` will pull the latest version from the API and install that instead.\n\n    [MartinKavik]: https://github.com/MartinKavik\n    [pull/706]: https://github.com/rustwasm/wasm-pack/pull/706\n    [issue/611]: https://github.com/rustwasm/wasm-pack/issues/611\n\n  - **Only run node tests on `wasm-pack test --node` - [alexcrichton], [pull/630]**\n\n    [alexcrichton]: https://github.com/alexcrichton\n    [pull/630]: https://github.com/rustwasm/wasm-pack/pull/630\n\n  - **Fix npm installs for Windows Users - [EverlastingBugstopper], [issue/757] [pull/759]**\n\n    We recently published `wasm-pack` on the npm registry but forgot to test on Windows! `npm install -g wasm-pack` now works on Windows machines.\n\n    [EverlastingBugstopper]: https://github.com/EverlastingBugstopper\n    [pull/759]: https://github.com/rustwasm/wasm-pack/pull/759\n    [issue/757]: https://github.com/rustwasm/wasm-pack/issues/757\n\n  - **Clean up `cargo test` warnings - [ashleygwilliams], [issue/752] [pull/753]**\n\n    Tests now use `std::sync::Once::new()` instead of the deprecated `std::sync::ONCE_INIT`\n\n    [ashleygwilliams]: https://github.com/ashleygwilliams\n    [pull/753]: https://github.com/rustwasm/wasm-pack/pull/753\n    [issue/752]: https://github.com/rustwasm/wasm-pack/issues/752\n\n- ### üìñ Documentation\n\n  - **Document npm installer - [drager], [issue/751] [pull/767]**\n\n    [drager]: https://github.com/drager\n    [issue/751]: https://github.com/rustwasm/wasm-pack/issues/751\n    [pull/767]: https://github.com/rustwasm/wasm-pack/pull/767\n\n  - **Update help message for `build` and `publish` subcommands - [ibaryshnikov], [issue/636] [pull/640]**\n\n    `wasm-bindgen` recently changed the default target from `browser` to `bundler` and deprecated `browser`. This change is now reflected in the help message for `wasm-pack build`.\n\n    [ibaryshnikov]: https://github.com/ibaryshnikov\n    [pull/640]: https://github.com/rustwasm/wasm-pack/pull/640\n    [issue/636]: https://github.com/rustwasm/wasm-pack/issues/636\n\n  - **Add Release Checklist - [ashleygwilliams], [issue/370] [pull/626]**\n\n    While we try to automate releases of `wasm-pack` as much as possible, there are still some manual steps that need to be completed when releasing a new version (like writing a changelog üòâ). These steps now live in [`RELEASE_CHECKLIST.md`](https://github.com/rustwasm/wasm-pack/blob/master/RELEASE_CHECKLIST.md).\n\n    [ashleygwilliams]: https://github.com/ashleygwilliams\n    [pull/626]: https://github.com/rustwasm/wasm-pack/pull/626\n    [issue/370]: https://github.com/rustwasm/wasm-pack/issues/370  \n\n- ### üõ†Ô∏è Maintenance\n\n  - **Ensure that `wasm-bindgen` generates move assertions - [fitzgen], [issue/677] [pull/683]**\n\n    `wasm-pack` now creates `wasm-bindgen` test fixtures that must generate move assertions for both free functions and methods.\n\n    [fitzgen]: https://github.com/fitzgen\n    [pull/683]: https://github.com/rustwasm/wasm-pack/pull/683\n    [issue/677]: https://github.com/rustwasm/wasm-pack/issues/677\n\n  - **Update `cargo_metadata` to v0.8.0 - [ThomasdenH], [pull/670]**\n\n    [ThomasdenH]: https://github.com/ThomasdenH\n    [pull/670]: https://github.com/rustwasm/wasm-pack/pull/670\n\n  - **Update `rustfmt` install snippet in PR template` - [data-pup], [issue/639] [pull/664]**\n\n    `rustfmt` is now available on Rust's stable channel so now the `wasm-pack` PR template recommends installing the stable version instead of the nightly version.\n\n    [data-pup]: https://github.com/data-pup\n    [pull/664]: https://github.com/rustwasm/wasm-pack/pull/664\n    [issue/639]: https://github.com/rustwasm/wasm-pack/issues/639  \n\n## üõ†Ô∏è 0.8.1\n\n- ### ü§ï Fixes\n\n  - **Check for \"rustup\" rather than \".rustup\" when checking for wasm32 - [drager], [issue/613][pull/616]**\n\n      When we introduced support for non-rustup setups we did a check if the user was\n      using rustup or not. However, this check was too constrained and only covered\n      the most common cases, but it did not work for Docker setups.\n\n      This PR addresses that and it now covers Docker setups as well!\n      When doing this fix we also found two other small issues which this PR also addresses.\n      The first is that we did not print the helpful error message when the wasm32 target\n      was not found and the other one was that it linked to the wrong section of the documentation.\n\n      [issue/613]: https://github.com/rustwasm/wasm-pack/issues/613\n      [pull/616]: https://github.com/rustwasm/wasm-pack/pull/616\n\n## üå§Ô∏è 0.8.0\n\n- ### ‚ú® Features\n\n    - **Give user's ability to customize generated filenames with `--out-name` flag - [ibaryshnikov], [issue/596] [pull/599]**\n\n        When running `wasm-pack build`, several files are generated. These files\n        are named based on the name of the crate, as per your `Cargo.toml` file.\n        Sometimes- that's not the name you'd like your files to have!\n\n        You can now specify a custom name for the generated files using a new\n        flag, `--out-name`. Given a project called `dom`, here's a comparison of\n        the default and custom generated filenames:\n\n        ```\n        wasm-pack build\n        # will produce files\n        # dom.d.ts  dom.js  dom_bg.d.ts  dom_bg.wasm  package.json  README.md\n\n         wasm-pack build --out-name index\n        # will produce files\n        # index.d.ts  index.js  index_bg.d.ts  index_bg.wasm  package.json  README.md\n        ``` \n\n        [ibaryshnikov]: https://github.com/ibaryshnikov\n        [issue/596]: https://github.com/rustwasm/wasm-pack/issues/596\n        [pull/599]: https://github.com/rustwasm/wasm-pack/pull/599\n\n- ### ü§ï Fixes\n\n    - **Fix panics in `build mode --no-install` - [alexcrichton], [pull/598]**\n\n        This commit fixes the `wasm-pack build --mode no-install` command from\n        unconditionally panicking as well as `--mode force`. These steps were\n        calling an `unwrap()` on an internal `Option<T>` which was supposed to\n        be set during `step_install_wasm_bindgen`, but that step wasn't run in\n        these modes. The mode configuration of steps has been refactored\n        slightly to ensure that more steps are shared between these modes to\n        reduce duplication.\n\n        [pull/598]: https://github.com/rustwasm/wasm-pack/pull/598\n\n    - **Print unexpected panics to standard error - [drager], [issue/562] [pull/601]**\n\n        Unexpected panics are unfortunate but they're currently covered up and written\n        out to an auxiliary file. This makes panics in CI difficult to debug,\n        especially at a glance, as CI builders are likely not uploading those files.\n\n        This PR will print to standard error for unexpected panics and then let\n        `human_panic` handle panics, just like before.\n\n        [issue/562]: https://github.com/rustwasm/wasm-pack/issues/562\n        [pull/601]: https://github.com/rustwasm/wasm-pack/pull/601\n\n    - **Improve error message when `wasm32-unknown-unknown` is missing - [drager], [issue/579] [pull/602]**\n\n        For folks with non-rustup environments (which we only started supporting in\n        0.7.0!), we were giving a missing target error that was not helpful!\n\n        We've updated the error message to include more information, and we've added\n        some documentation to help explain how you can remedy the error by manually\n        installing the target on your specific rust setup- including the fact that\n        it may *not* be possible to add the target to some setups.\n\n        Check out the docs [here](https://rustwasm.github.io/wasm-pack/book/prerequisites/non-rustup-setups.html).\n\n        [issue/579]: https://github.com/rustwasm/wasm-pack/issues/579\n        [pull/602]: https://github.com/rustwasm/wasm-pack/pull/602\n\n- ### üìñ Documentation\n\n    - **Document `--out-dir` flag - [ashleygwilliams], [issue/592] [pull/593]**\n\n        Recently, someone asked on Discord about customizing the name of the directory\n        that contains the assets built by `wasm-pack`. We've had the `out-dir` flag for\n        a while, but it wasn't documented! Now it is.\n\n        [issue/592]: https://github.com/rustwasm/wasm-pack/issues/592\n        [pull/593]: https://github.com/rustwasm/wasm-pack/pull/593\n\n    - **Fix broken links in docs and update for template changes - [drager], [ashleygwilliams], [issue/609] [pull/612] [pull/614]**\n\n        Recently, some improvements were made to the [`wasmpack-template`]. Additionally,\n        there were some broken links in the documentation. We've updated the docs for the\n        new template and fixed the broken links!\n\n        [issue/609]: https://github.com/rustwasm/wasm-pack/issues/609\n        [pull/612]: https://github.com/rustwasm/wasm-pack/pull/612\n        [pull/614]: https://github.com/rustwasm/wasm-pack/pull/614\n\n- ### üõ†Ô∏è Maintenance\n\n    - **Move `binary-install` to its own repo - [drager], [issue/500] [pull/600]**\n\n        `binary-install` is a crate that holds the abstractions for how `wasm-pack` downloads\n        and caches pre-built binaries for the tools it wraps. It was originally part of the\n        `wasm-pack` code, then moved into a workspace as an independent crate. Now that we\n        believe it's stable, we've moved it into its own [repo](https://github.com/rustwasm/binary-install)!\n\n        [issue/500]: https://github.com/rustwasm/wasm-pack/issues/500\n        [pull/600]: https://github.com/rustwasm/wasm-pack/pull/600\n\n## üå§Ô∏è 0.7.0\n\n- ### ‚ú® Features\n\n  - **Non `rustup` environment support - [drager], [pull/552]**\n\n    Before now, `wasm-pack` had a hard requirement that `rustup` had to be in the PATH. While most Rust users use\n    `rustup` there are variety reasons to have an environment that doesn't use `rustup`. With this PR, we'll now\n    support folks who are using a non-`rustup` environment!\n\n    [pull/552]: https://github.com/rustwasm/wasm-pack/pull/552\n\n  - **Improved CLI Output - [alexcrichton], [pull/547]**\n\n    It's hard to decide if this is a fix or a feature, but let's keep it positive! This PR moves `wasm-pack`'s CLI\n    output strategy closer to the desired standard we have for 1.0. This is important as it fixes many small bugs\n    that are distributed across a diveristy of terminals and difficult to test for locally.\n\n    This strategy was first introduced as a mini RFC in [issue/298], and then was discussed in a session at the Rust\n    All Hands ([notes](https://gist.github.com/fitzgen/23a62ebbd67574b9f6f72e5ac8eaeb67#file-road-to-wasm-pack-1-0-md)).\n\n    You'll notice that the spinner is gone- we eventually want to have one, but we'd like one that doesn't cause bugs!\n    If you have feedback about terminal support or an output bug, please [file an issue]! We want to hear from you!\n\n    Check out the new output in the `README` demo- or update your `wasm-pack` and take it for a spin!\n\n    [file an issue]: https://github.com/rustwasm/wasm-pack/issues/new/choose\n    [pull/547]: https://github.com/rustwasm/wasm-pack/pull/547\n    [issue/298]: https://github.com/rustwasm/wasm-pack/issues/298\n\n  - **Add support for `--target web` - [alexcrichton], [pull/567]**\n\n    Recently, `wasm-bindgen` add a new target- `web`. This new target is similar to the `no-modules` target, in that\n    it is designed to generate code that should be loaded directly in a browser, without the need of a bundler. As \n    opposed to the `no-modules` target, which produces an IIFE (Immediately Invoked Function Expression), this target\n    produces code that is an ES6 module.\n\n    You can use this target by running:\n\n    ```\n    wasm-pack build --target web\n    ```\n\n    Learn more about how to use this target by [checking out the docs!](https://rustwasm.github.io/wasm-pack/book/commands/build.html#target)\n\n    [pull/567]: https://github.com/rustwasm/wasm-pack/pull/567\n\n  - **Support passing arbitrary arguments to `cargo test` via `wasm-pack test` - [chinedufn], [issue/525] [pull/530]**\n\n    `wasm-pack test` is an awesome command that wraps `cargo test` in a way that helps provide you some nice out of the\n    box configuration and setup. However, you may find yourself wanting to leverage the full funcationality of `cargo test`\n    by passing arguments that haven't been re-exported by the `wasm-pack test` interface.\n\n    For example, if you have a large test suite, it can be nice to simply run one test, or a subset of your tests.\n    `cargo test` supports this, however up until now, the `wasm-pack test` interface did not!\n\n    `wasm-pack test` now accepts passing and arbitrary set of arguments that it will forward along to its `cargo test` call\n    by allowing users to use `--` after any `wasm-pack test` arguments, followed by the set of arguments you'd like to pass\n    to `cargo test`.\n\n    For example:\n\n    ```\n    # Anything after `--` gets passed to the `cargo test`\n    wasm-pack test --firefox --headless -- --package my-workspace-crate my_test_name --color=always\n    ```\n\n    This will just run the `my_test_name` test and will output using color!\n\n    [See the `test` docs here!](https://rustwasm.github.io/docs/wasm-pack/commands/test.html)\n\n    [chinedufn]: https://github.com/chinedufn\n    [issue/525]: https://github.com/rustwasm/wasm-pack/issues/525\n    [pull/530]: https://github.com/rustwasm/wasm-pack/pull/530\n\n  - **Support `homepage` field of `Cargo.toml` and `package.json` - [rhysd], [pull/531]**\n\n    Both `Cargo.toml` and `package.json` support a `homepage` field that allow you to specify a website for\n    your project. We didn't support it previously (purely an accidental omission) - but now we do!\n\n    [pull/531]: https://github.com/rustwasm/wasm-pack/pull/531\n\n  - **Support `license-file` field in `Cargo.toml` - [rhysd], [pull/527]**\n\n    Sometimes, you want to provide a custom license, or specific license file that doesn't map to SPDX standard\n    licenses. In Rust/Cargo, you accomplish this by omitting the `license` field and including a `license-file`\n    field instead. You can read more about this in the [`cargo` manifest documentation].\n\n    In an npm package, this translates to `\"license\": \"SEE LICENSE IN <filename>\"` in your `package.json`. You can\n    read more about this in the [npm `package.json` documentation].\n\n    We previously only supported using SPDX standard licenses, by only supporting the `\"license\"` key in your\n    `Cargo.toml`- but now we'll allow you to leverage the `license-file` key as well, and will translate it\n    correctly into your `package.json`!\n\n    [`cargo` manifest documentation]: https://doc.rust-lang.org/cargo/reference/manifest.html\n    [npm `package.json` documentation]: https://docs.npmjs.com/files/package.json#license\n    [rhysd]: https://github.com/rhysd\n    [pull/527]: https://github.com/rustwasm/wasm-pack/pull/527\n\n- ### ü§ï Fixes\n\n  - **`wasm-pack-init (1).exe` should work - [ashleygwilliams], [issue/518] [pull/550]**\n\n    Several users noted that when downloading a new version of `wasm-pack` their browser named the executable\n    file `wasm-pack-init (1).exe`. When named this way, the file didn't show the init instructions on execution.\n    This happened because the installation logic was requiring an exact match on filename. We've loosened that\n    restriction so that the filename must *start* with `wasm-pack-init` and will still execute files with these\n    additional, extraneous charaters in the filename. Thanks so much to [Mblkolo] and [danwilhelm] for filing the\n    issue and the excellent discussion!\n\n    [issue/518]: https://github.com/rustwasm/wasm-pack/issues/518\n    [pull/550]: https://github.com/rustwasm/wasm-pack/pull/550\n    [Mblkolo]: https://github.com/Mblkolo\n\n  - **Fix chromedriver error and message on Windows for `wasm-pack test` - [jscheffner], [issue/535] [pull/537]**\n\n    When running `wasm-pack test` on a 64-bit Windows machine, users would receive an error:\n    `geckodriver binaries are unavailable for this target`. This error message had two issues- firstly, it accidentally\n    said \"geckodriver\" instead of \"chromedriver\", secondly, it threw an error instead of using the available 32-bit\n    chromedriver distribution. Chromedriver does not do a specific disribution for Windows 64-bit!\n\n    We've fixed the error message and have also ensured that 64-bit Windows users won't encounter an error, and will\n    appropriately fallback to the 32-bit Windows chromedriver.\n\n    [jscheffner]: https://github.com/jscheffner\n    [issue/535]: https://github.com/rustwasm/wasm-pack/issues/535\n    [pull/537]: https://github.com/rustwasm/wasm-pack/pull/537\n\n  - **Correct look up location for `wasm-bindgen` when it's installed via `cargo install` - [fitzgen], [pull/504]**\n\n    Sometimes, when a `wasm-bindgen` binary is not available, or if `wasm-pack` is being run on an architecture that\n    `wasm-bindgen` doesn't produce binaries for, instead of downloading a pre-built binary, `wasm-pack` will install \n    `wasm-bindgen` using `cargo install`. This is a great and flexible back up!\n\n    However, due to the last release's recent refactor to use a global cache, we overlooked the `cargo install` case\n    and did not look for `wasm-bindgen` in the appropriate location. As a result, this led to a bug where `wasm-pack`\n    would panic.\n\n    We've fixed the lookup for the `cargo install`'d `wasm-bindgen` by moving the `cargo-install`'d version to global\n    cache location for `wasm-pack` once it's successfully built. We also eliminated the panic in favor of \n    propagating an error. Thanks for your bug reports and sorry about the mistake!\n\n    [pull/504]: https://github.com/rustwasm/wasm-pack/pull/504\n\n  - **Only print `cargo test` output the once - [fitzgen], [issue/511] [pull/521]**\n\n    Due to some technical debt and churn in the part of the codebase that handles output, we were accidentally\n    printing the output of `cargo test` twice. Now we ensure that we print it only one time!\n\n    [issue/511]: https://github.com/rustwasm/wasm-pack/issues/511\n    [pull/521]: https://github.com/rustwasm/wasm-pack/pull/521\n\n- ### üõ†Ô∏è Maintenance\n\n  - **Fix `clippy` warnings - [mstallmo], [issue/477] [pull/478]**\n\n    [`clippy`] is an awesome utilty that helps lint your Rust code for common optimizations and idioms. at the\n    beginning of `wasm-pack` development, `clippy` had not yet stablized, but it has since 1.0'd and it was\n    high time we leveraged it in `wasm-pack`. We still aren't *completely* fixed, but we're working on it, and\n    we've already dervived a ton of value from the tool!\n\n    [`clippy`]: https://github.com/rust-lang/rust-clippy\n    [issue/477]: https://github.com/rustwasm/wasm-pack/issues/477\n    [pull/478]: https://github.com/rustwasm/wasm-pack/pull/478\n\n  - **Run `clippy` check on Travis - [drager], [pull/502]**\n\n    Now that `wasm-pack` has been clippified- we want to keep it that way! Now in addition to `cargo fmt` and\n    `cargo test`, we'll also run `cargo clippy` on all incoming PRs!\n\n    [pull/502]: https://github.com/rustwasm/wasm-pack/pull/502\n\n  - **Port tests to use `assert-cmd` - [fitzgen], [pull/522]**\n\n    [`assert_cmd`] is a great utility for testing CLI applications that is supported by the [CLI WG]. `wasm-pack`\n    development began before this library existed- so we were using a much less pleasant and efficient strategy\n    to test the CLI functionality of `wasm-pack`. Now we've ported over to using this great library!\n    \n    [CLI WG]: https://www.rust-lang.org/what/cli\n    [`assert_cmd`]: https://crates.io/crates/assert_cmd\n    [pull/522]: https://github.com/rustwasm/wasm-pack/pull/522\n\n  - **Add initial tests for `binary-install` crate - [drager], [pull/517]**\n\n    In the last release, we separated some of our binary install logic into a new crate, `binary-install`.\n    However, that's about all we did... move the logic! In an effort to move the crate into true open source\n    status, [drager] has done some excellent work adding tests to the crate. This was trickier than it looked\n    and involved creating a test server! Thanks for all the efforts [drager], and the great review work [fitzgen]\n    and [lfairy]!\n\n    [pull/517]: https://github.com/rustwasm/wasm-pack/pull/517\n    [lfairy]: https://github.com/lfairy\n\n  - **Update tests `wasm-bindgen` version - [huangjj27], [issue/519] [issue/417] [pull/526]**\n\n    Our tests use fixtures that reference `wasm-bindgen` often, but the versions were not consistent or up to\n    date. As a result, the test suite leverage many version of `wasm-bindgen` which meant that they took a while\n    to run as they couldn't use the cached version of `wasm-bindgen` because the cached versions we slightly\n    different! Now they are up to date and consistent so the tests can perform better!\n\n    [pull/526]: https://github.com/rustwasm/wasm-pack/pull/526\n    [issue/519]: https://github.com/rustwasm/wasm-pack/issues/519\n    [issue/417]: https://github.com/rustwasm/wasm-pack/issues/417\n\n- ### üìñ Documentation\n\n  - **Flag gh-pages docs as unpublished - [alexcrichton] [pull/565]**\n\n    Recently, [DebugSteven] made a PR to merge all the documentation for the rustwasm toolchain into a \n    [single location]. This is going to make discovering and using tools from the entire organization easier\n    for new and seasoned folks alike. This also has the feature of displaying documentation that is related\n    to the current published version of each tool- unlike before, where the only accessible documentation was\n    for the tools at current master (which may or may not be currently published!)\n\n    If you like reading the current master's documentation- fear not, each tool will still publish the\n    documentation generated from the master branch on their individual `gh-pages` \n    ([See `wasm-pack's` master docs here]). To avoid confusion, we've added a flash message that let's you know\n    which documentation you are reading- and provides a link to documentation of the published version- just\n    in case that's what you're looking for!\n\n    [DebugSteve]: https://github.com/DebugSteven\n    [single location]: https://rustwasm.github.io/docs.html\n    [See `wasm-pack's` master docs here]: https://rustwasm.github.io/wasm-pack/book/\n    [pull/565]: https://github.com/rustwasm/wasm-pack/pull/565\n\n  - **Add new QuickStart guide for \"Hybrid Applications with Webpack\" - [DebugSteven] [pull/536]**\n\n    Since `wasm-pack` was first published, we've focused on a workflow where a user writes a library and then\n    publishes it to npm, where anyone can use it like any npm package in their JavaScript or Node.js application.\n\n    Shortly after `wasm-pack` appeared, some RustWASM teammates created a template for a similar workflow- building\n    a RustWASM package *alongside* an application. They did this by leveraging Webpack plugins, and it's a really\n    lovely user experience!\n\n    [This template] hasn't gotten as much attention because we've lacked a quickstart guide for folks to discover\n    and follow- now we've got one!\n\n    Check out the guide [here](https://rustwasm.github.io/wasm-pack/book/tutorials/hybrid-applications-with-webpack/index.html)!\n\n    [This temaplte]: https://github.com/rustwasm/rust-webpack-template\n    [DebugSteven]: https://github.com/DebugSteven\n    [pull/536]: https://github.com/rustwasm/wasm-pack/pull/536\n\n  - **Add `wee_alloc` deepdive - [surma], [pull/542]**\n\n    `wee_alloc` is a useful utility that deserved more attention and explanation than our previous docs addressed.\n    This was partially because the `wasm-pack` template has an explanatory comment that helps explain its use.\n    However, for folks who don't use the template, `wee_alloc` is something important to know about- so now we have\n    given it its own section!\n\n    Check out the deepdive [here](https://rustwasm.github.io/wasm-pack/book/tutorials/npm-browser-packages/template-deep-dive/wee_alloc.html)!\n\n    [surma]: https://github.com/surma\n    [pull/542]: https://github.com/rustwasm/wasm-pack/pull/542\n\n  - **Update prerequisite documentation - [alexcrichton], [pull/569]**\n\n    Many folks are using `wasm-pack` without publishing to npm- as a result, we've updated the documentation to\n    clearly indicate that npm is an optional requirement, only required for specific targets and workflows.\n    Additionally, since the 2018 Edition landed, `nightly` Rust is no longer a requirement. We've removed those\n    instructions and have consolidated the documentation so it is shorter and more efficient at getting you\n    started!\n\n    [pull/569]: https://github.com/rustwasm/wasm-pack/pull/569\n\n  - **Clarify what kind of account `login` adds - [killercup], [pull/539]**\n\n    Previously, when view `--help`, the command description for `login` showed:\n    `üë§  Add a registry user account!` This could be confusing for folks, so now it's been updated to read:\n    `üë§  Add an npm registry user account!`, which is much clearer!\n\n    [killercup]: https://github.com/killercup\n    [pull/539]: https://github.com/rustwasm/wasm-pack/pull/539\n\n  - **Wasm is a contraction, not an acronym - [fitzgen], [pull/555]**\n\n    Ever wonder how you're *actually* supposed to refer to WebAssembly in short-form? WASM? wasm? For the pedants\n    out there, the correct usage is \"Wasm\" because Wasm is a *contraction* of the words Web and Assembly. We've\n    updated our doucmentation to consistently refer to WebAssembly as Wasm in the shortform.\n\n    *The more you know!*\n\n    [pull/555]: https://github.com/rustwasm/wasm-pack/pull/555\n\n  - **Fix links and Rust highlightning - [drager], [issue/513] [pull/514] [pull/516]**\n\n    We had some broken links and missing Rust syntax highlighting in a few sections of the docs. This fixes that!\n\n    [issue/513]: https://github.com/rustwasm/wasm-pack/issues/513\n    [pull/514]: https://github.com/rustwasm/wasm-pack/pull/514\n    [pull/516]: https://github.com/rustwasm/wasm-pack/pull/516  \n    \n\n## üåÖ 0.6.0\n\n- ### ‚ú® Features\n\n  - **Add three build profiles and infrastructure for their toml config - [fitzgen], [issue/153] [issue/160] [pull/440]**\n\n    When originally conceived, `wasm-pack` was exclusively a packaging and publishing tool, which naively assumed\n    that the crate author would simply run `wasm-pack` when they were ready to publish a wasm package. As a result,\n    `wasm-pack` always ran `cargo build` in `--release` mode. Since then, `wasm-pack` has grown into an integrated build\n    tool used at all stages of development, from idea conception to publishing, and as such has developed new needs.\n\n    In previous releases, we've supported a flag called `--debug` which will run `cargo build` in `dev` mode, which\n    trades faster compilation speed for a lack of optimizations. We've renamed this flag to `--dev` to match `cargo`\n    and added an additional flag, representing a third, intermediary, build profile, called `--profiling` which\n    is useful for investigating performance issues. You can see all three flags and their uses in the table below:\n\n    | Profile       | Debug Assertions | Debug Info | Optimizations | Notes                                 |\n    |---------------|------------------|------------|---------------|---------------------------------------|\n    | `--dev`       | Yes              | Yes        | No            | Useful for development and debugging. |\n    | `--profiling` | No               | Yes        | Yes           | Useful when profiling and investigating performance issues. |\n    | `--release`   | No               | No         | Yes           | Useful for shipping to production.    |\n\n    The meaning of these flags will evolve as the platform grows, and always be tied to the behavior of these flags\n    in `cargo`. You can learn more about these in the [`cargo profile` documentation].\n\n    This PR also introduces a way to configure `wasm-pack` in your `Cargo.toml` file that we intend to use much more\n    in the future. As a largely convention-based tool, `wasm-pack` will never require that you configure it manually,\n    however, as our community and their projects mature alongside the tool, it became clear that allowing folks the\n    ability to drop down and configure things was something we needed to do to meet their needs.\n\n    Currently, you can only configure things related to the above-mentioned build profiles. To learn more, \n    [check out the documentation][profile-config-docs]. It leverages the `package.metadata.wasm-pack` key in your\n    `Cargo.toml`, and looks like this:\n\n    ```toml\n    # Cargo.toml\n\n    [package.metadata.wasm-pack.profile.dev.wasm-bindgen]\n    # Should we enable wasm-bindgen's debug assertions in its generated JS glue?\n    debug-js-glue = true\n    # Should wasm-bindgen demangle the symbols in the \"name\" custom section?\n    demangle-name-section = true\n    # Should we emit the DWARF debug info custom sections?\n    dwarf-debug-info = false\n    ```\n\n    As always- there are defaults for you to use, but if you love to configure (or have a project that requires it),\n    get excited, as your options have grown now and will continue to!\n\n    [profile-config-docs]: https://rustwasm.github.io/wasm-pack/book/cargo-toml-configuration.html\n    [`cargo profile` documentation]: https://doc.rust-lang.org/cargo/reference/manifest.html#the-profile-sections\n    [issue/153]: https://github.com/rustwasm/wasm-pack/issues/153\n    [issue/160]: https://github.com/rustwasm/wasm-pack/issues/160\n    [pull/440]: https://github.com/rustwasm/wasm-pack/pull/440\n\n  - **DEPRECATION: Rename `--debug` to `--dev` to match `cargo` - [fitzgen], [pull/439]**\n\n    See the discussion of the build profiles feature above. This is a strict renaming of the previous `--debug` flag,\n    which will now warn as deprecated.\n\n    [pull/439]: https://github.com/rustwasm/wasm-pack/pull/439\n\n  - **Add an option to pass an arbitrary set of arguments to `cargo build` - [torkve], [issue/455] [pull/461]**\n\n    As an integrated build tool, `wasm-pack` orchestrates many secondary command line tools to build your package\n    in a single command. Notably, one of these tools is `cargo`. `cargo` has a wide array of features and flags, and\n    we couldn't reasonably expect to implement them all as first class features of `wasm-pack`. As a result, we've\n    created the option to allow users to pass an arbitrary number of additional flags to `wasm-pack` by appending them\n    to the `wasm-pack build` command, after passing `--`. For example:\n\n    ```\n    wasm-pack build examples/js-hello-world --mode no-install -- -Z offline\n    ```\n\n    In the above example, the flag `-Z offline` will be passed to `cargo build`. This feature is documented \n    [here][cargo opts docs].\n\n    [cargo opts docs]: https://rustwasm.github.io/wasm-pack/book/commands/build.html#extra-options\n    [torkve]: https://github.com/torkve\n    [issue/455]: https://github.com/rustwasm/wasm-pack/issues/455\n    [pull/461]: https://github.com/rustwasm/wasm-pack/pull/461\n\n\n  - **Pre-build before wasm-pack publish - [csmoe], [issue/438] [pull/444]**\n\n    Previously, if you ran `wasm-pack publish` before you had successfully run `wasm-pack build`,\n    you'd receive an error that a package could not be found- because there would be no `pkg` or\n    out-directory containing a `package.json`.\n\n    In this situation, you would hope that `wasm-pack` would build your package for you when you\n    ran `wasm-pack publish`. This is slightly complicated by the fact that not everyone wants to \n    build their package to the default target or to a directory named `pkg`.\n\n    To solve this, running `wasm-pack publish` before a successful build  will give you an interactive\n    prompt to build your package- allowing you to specify your out directory as well as the target you'd\n    like to build to. Check it out in the gif below:\n\n    ![pre-build publish workflow](https://user-images.githubusercontent.com/35686186/50500909-5984fe80-0a8f-11e9-9de6-43d1423b2969.gif)\n\n    [issue/438]: https://github.com/rustwasm/wasm-pack/issues/438\n    [pull/444]: https://github.com/rustwasm/wasm-pack/pull/444\n\n  - **Generate self-.gitignore as part of pkg folder - [RReverser], [pull/453]**\n\n    Since `wasm-pack` was first published, the `pkg` directory was intended to be treated as a\n    build artifact, and as such should never be published to version control. This was\n    never enforced by any assets generated by `wasm-pack`, however.\n\n    Now, when building your package, `wasm-pack` will also generate a `.gitignore` file so that the\n    `pkg`, or out-directory, will be ignored.\n\n    If you use another version control tool, you'll need to still create or edit your own ignore file-\n    pull requests to support other version control tools are welcome!\n\n    If you require editing of the generated `package.json` or add additonal assets to your package\n    before publishing, you'll want to remove the `.gitignore` file and commit to version control. We\n    intend to have a solution that makes this workflow significantly easier in upcoming releases!\n\n    [RReverser]: https://github.com/RReverser\n    [pull/453]: https://github.com/rustwasm/wasm-pack/pull/453\n\n  - **Support cargo workspaces - [fitzgen], [issue/252] [issue/305] [pull/430]**\n\n    Workspaces are a well-liked and used feature of cargo that allow you to build multiple crates\n    in a single cargo project. Because of how `wasm-pack` handled paths for `target` and out-directories,\n    we did not support cargo workspaces out of the box. Now they should work well and the feature is\n    well guarded by tests!\n    \n    [issue/252]: https://github.com/rustwasm/wasm-pack/issues/252\n    [issue/305]: https://github.com/rustwasm/wasm-pack/issues/305\n    [pull/430]: https://github.com/rustwasm/wasm-pack/pull/430\n\n  - **Use a global cache for all downloaded binaries - [alexcrichton], [pull/426]**\n\n    `wasm-pack` is an integrated build tool that orchestrates several other command line tools to build\n    your wasm project for you. How `wasm-pack` does this has evolved significantly since it's early versions.\n    In the last version, a `bin` directory was created to house the tool binaries that `wasm-pack` needed to\n    build our project, but this had several limitations. Firstly, it created a `bin` directory in your project's\n    root, which could be confusing. Secondly, it meant that sharing these tools across multiple projects was\n    not possible. We did this because it gaves us the fine-grained control over the version of these tools that\n    you used.\n\n    Now, `wasm-pack` will not generate a `bin` directory, but rather will use a global cache. We retain the\n    fine-grained control over the versions of these tools that are used, but allow multiple projects that use\n    the same tools at the same versions to share the already installed asset. Your global cache will generally\n    be in your user's home directory- we use the [`dirs` crate] to determine where to place this global cache.\n    This is not currently customizable but is something we intend to look into doing!\n\n    This feature ensures that `wasm-pack` users are downloading a minimal number of binaries from the network,\n    which, for `wasm-pack` users with multiple projects, should speed up build times.\n\n    [`dirs` crate]: https://docs.rs/dirs/1.0.4/dirs/fn.cache_dir.html\n    [pull/426]: https://github.com/rustwasm/wasm-pack/pull/426\n\n- ### ü§ï Fixes\n\n  - **Fix `pack`, `login`, and `publish` for Windows users - [danwilhelm], [issue/277] [pull/489]**\n\n    Rust's behavior for spawning processes on some Windows targets introduced an interesting case where\n    Rust would fail unless the command was explicitly spawned with a prepended `cmd /c`. This failure\n    of `wasm-pack` was well noticed by our community - and thanks to the efforts of `danwilhelm` is now\n    fixed! You can read more on the background of this issue in [rust-lang/rust issue/44542].\n\n    [rust-lang/rust issue/44542]: https://github.com/rust-lang/rust/pull/44542\n    [issue/277]: https://github.com/rustwasm/wasm-pack/issues/277\n    [pull/489]: https://github.com/rustwasm/wasm-pack/pull/489\n\n  - **Validate `--target` argument - [csmoe], [issue/483] [pull/484]**\n\n    For a few releases now, `wasm-pack` has supported allowing users to specifying the target module system\n    they'd like their package built for- `browser`, `nodejs`, and `no-modules`. We did not however, validate\n    this input, and so if a user made even a slight mistake, e.g. `node`, `wasm-pack` would not catch the\n    error and would build your project using the default, `browser`. This is of course, surprising, and \n    unpleasant behavior and so now we'll error out with a message containing the supported target names.\n\n    [issue/483]: https://github.com/rustwasm/wasm-pack/issues/483\n    [pull/484]: https://github.com/rustwasm/wasm-pack/pull/484\n\n  - **Fix login - [danwilhelm], [issue/486] [pull/487]**\n\n    [danwilhelm]: https://github.com/danwilhelm\n    [issue/486]: https://github.com/rustwasm/wasm-pack/issues/486\n    [pull/487]: https://github.com/rustwasm/wasm-pack/pull/487\n\n  - **Eliminate unecessary escaping in build success terminal output - [huangjj27], [issue/390] [pull/396]**\n\n    Previously, on some systems, a successful `wasm-pack build` would print a unfortunate looking string:\n\n    ```\n    | :-) Your wasm pkg is ready to publish at \"\\\\\\\\?\\\\C:\\\\Users\\\\Ferris\\\\tmp\\\\wasm-bug\\\\pkg\".\n    ```\n\n    We've updated this to make sure the path to your project is well-formed, and most importantly, \n    human-readable.\n\n    [issue/390]: https://github.com/rustwasm/wasm-pack/issues/390\n    [pull/396]: https://github.com/rustwasm/wasm-pack/pull/396\n\n  - **Copy license file(s) to out directory - [mstallmo], [issue/407] [pull/411]**\n\n    Since `wasm-pack` was first published, we've copied over your `Cargo.toml` license definition over to\n    your `package.json`. However, we overlooked copying the actual `LICENSE` files over! Now we do!\n\n    [issue/407]: https://github.com/rustwasm/wasm-pack/issues/407\n    [pull/411]: https://github.com/rustwasm/wasm-pack/pull/411\n\n  - **Don't require cdylib crate-type for testing - [alexcrichton], [pull/442]**\n\n    `wasm-pack` was unecssarily checking `Cargo.toml` for the `cdylib` crate type during calls to `wasm-pack test`.\n    The `cdylib` output isn't necessary for the `wasm-pack test` stage because `wasm-bindgen` isn't being run over\n    a wasm file during testing. This check is now removed!\n\n    [pull/442]: https://github.com/rustwasm/wasm-pack/pull/442\n\n  - **Fix wasm-bindgen if lib is renamed via `lib.name` - [alexcrichton], [issue/339] [pull/435]**\n\n    In some circumstances, a library author may wish to specify a `name` in the `[package]` portion of their \n    `Cargo.toml`, as well as a different `name` in the `[lib]` portion, e.g.:\n\n    ```toml\n    [package]\n    name = \"hello-wasm\"\n  \n    [lib]\n    name = \"wasm-lib\"\n    ```\n\n    This would cause the `wasm-bindgen` build stage of `wasm-pack` to error out because `wasm-pack` would attempt\n    to run `wasm-bindgen-cli` on a path using the `[package]` name, which wouldn't exist (because it would be using\n    the `[lib]` name). Now it works- thanks to more usage of [`cargo_metadata`] in `wasm-pack` internals!\n\n    [`cargo_metadata`]: https://crates.io/crates/cargo_metadata\n    [issue/339]: https://github.com/rustwasm/wasm-pack/issues/339\n    [pull/435]: https://github.com/rustwasm/wasm-pack/pull/435\n\n  - **Print standard error only once for failing commands - [fitzgen], [issue/422] [pull/424]**\n\n    Previously, `wasm-pack` may have printed `stderr` twice in some circumstances. This was both confusing and not\n    a pleasant experience, so now we've ensued that `wasm-pack` prints `stderr` exactly once! (It's hard enough to have\n    errors, you don't want `wasm-pack` rubbing it in, right?)\n\n    [issue/422]: https://github.com/rustwasm/wasm-pack/issues/422\n    [pull/424]: https://github.com/rustwasm/wasm-pack/pull/424\n\n  - **Add no-modules to --target flag's help text - [fitzgen], [issue/416] [pull/417]**\n\n    This is an interesting one! `fitzgen` very reasonably filed an issue asking to add `wasm-bindgen`'s \n    `--target no-modules` feature to `wasm-pack`. This was confusing as this feature was indeed already implemented,\n    and documented- BUT, notably missing from the `wasm-pack --help` text. We've fixed that now- and it was an omission\n    so glaring we definitely considered it a bug!\n\n    [issue/416]: https://github.com/rustwasm/wasm-pack/issues/416\n    [pull/417]: https://github.com/rustwasm/wasm-pack/pull/417\n\n- ### üõ†Ô∏è Maintenance\n\n  - **Replace `slog` with `log` - [alexcrichton], [issue/425] [pull/434]**\n\n    For internal maintenance reasons, as well as several end-user ones, we've migrated away from the `slog` family\n    of crates, and are now using the `log` crate plus `env_logger`. Now, `wasm-pack` won't create a `wasm-pack.log`.\n    Additionally, enabling logging will now be done through `RUST_LOG=wasm_pack` instead of  `-v` flags. \n\n    [issue/425]: https://github.com/rustwasm/wasm-pack/issues/425\n    [pull/434]: https://github.com/rustwasm/wasm-pack/pull/434\n\n  - **Move binary installation to its own crate - [drager], [issue/384] [pull/415]**\n\n    In `wasm-pack 0.5.0`, we move away from `cargo install`ing many of the tools that `wasm-pack` orchestrates. Because\n    we used `cargo install`, this required an end user to sit through the compilation of each tool, which was a \n    prohibitively long time. We moved, instead, to building, and then installing, binaries of the tools. This sped up\n    build times dramatically!\n\n    This pattern has been very beneficial to `wasm-pack` and is potentially something that could be beneficial to other\n    projects! As a result, we've refactored it out into a crate and have published it as it's own crate, [`binary-install`].\n\n    [`binary-install`]: https://crates.io/crates/binary-install\n    [drager]: https://github.com/drager\n    [issue/384]: https://github.com/rustwasm/wasm-pack/issues/384\n    [pull/415]: https://github.com/rustwasm/wasm-pack/pull/415\n\n  - **Replace internal `Error` with `failure::Error` - [alexcrichton], [pull/436]**\n\n    The story of error message handling in `wasm-pack` has not been the prettiest. We originally were manually implementing\n    errors, adding the [`failure` crate] at one point, but not fully updating the entire codebase. With this PR, we are\n    nearly completely handling errors with `failure`, bringing the code into a much more maintainable and \n    pleasant-to-work-on place.\n\n    [`failure` crate]: https://crates.io/crates/failure\n    [pull/436]: https://github.com/rustwasm/wasm-pack/pull/436\n\n  - **Update `mdbook` version used by Travis - [fitzgen], [pull/433]**\n\n    [pull/433]: https://github.com/rustwasm/wasm-pack/pull/433\n\n  - **Read the `Cargo.toml` file only once - [fitzgen], [issue/25] [pull/431]**\n\n    This is a very fun one since it fixes one of the original issues filed by `ag_dubs` at the very beginning of `wasm-pack`\n    development. In a rush to implement a POC tool, `ag_dubs` noted for posterity that the `Cargo.toml` was being read \n    multiple times (twice), when it did not need to be. Thanks to `fitzgen` now it's read only once! A minor performance\n    improvement in the scheme of things, but a nice one :)\n\n    [issue/25]: https://github.com/rustwasm/wasm-pack/issues/25\n    [pull/431]: https://github.com/rustwasm/wasm-pack/pull/431\n\n  - **Use `name` field for Travis CI jobs - [fitzgen], [pull/432]**\n\n    [pull/432]: https://github.com/rustwasm/wasm-pack/pull/432\n\n  - **Add a test for build command - [huangjj27], [pull/408]**\n\n    [huangjj27]: https://github.com/huangjj27\n    [pull/408]: https://github.com/rustwasm/wasm-pack/pull/408\n\n  - **Test paths on Windows - [xmclark], [issue/380] [pull/389]**\n\n    [xmclark]: https://github.com/xmclark\n    [issue/380]: https://github.com/rustwasm/wasm-pack/issues/380\n    [pull/389]: https://github.com/rustwasm/wasm-pack/pull/389\n\n  - **Fix typo in test function name for copying the README - [mstallmo], [pull/412]**\n\n    [pull/412]: https://github.com/rustwasm/wasm-pack/pull/412\n\n- ### üìñ Documentation\n\n  - **Complete template deep dive docs - [danwilhelm], [issue/345] [issue/346] [pull/490]**\n\n    In a rush to publish a release, `ag_dubs` left some \"Coming soon!\" comments on most pages\n    of the \"Template Deep Dive\" docs. These docs help walk new users through the boilerplate\n    that using the `wasm-pack` template generates for you. Thanks so much to `danwilhem` for\n    picking this up and doing an excellent job!\n\n    [issue/345]: https://github.com/rustwasm/wasm-pack/issues/345\n    [issue/346]: https://github.com/rustwasm/wasm-pack/issues/346\n    [pull/490]: https://github.com/rustwasm/wasm-pack/pull/490\n\n  - **Minor docs updates - [fitzgen], [issue/473] [pull/485]**\n\n    [issue/473]: https://github.com/rustwasm/wasm-pack/issues/473\n    [pull/485]: https://github.com/rustwasm/wasm-pack/pull/485\n\n## üåÑ 0.5.1\n\n- ### ü§ï Fixes\n\n  - **Child Process and output management - [fitzgen], [issue/287] [pull/392]**\n\n    Not exactly a \"fix\", but definitely a huge improvment in how child processes and their\n    output are handled by `wasm-pack`. Ever sat at a long prompt from `wasm-pack` and\n    wondered what was happening? No longer! Did `wasm-pack` eat your test output- no more!\n\n    [issue/287]: https://github.com/rustwasm/wasm-pack/issues/287\n    [pull/392]: https://github.com/rustwasm/wasm-pack/pull/392\n\n  - **Less scary missing field  messages - [mstallmo], [issue/393] [pull/394]**\n\n    After watching a livestream of someone using `wasm-pack`, [fitzgen] noted that folks\n    seemed pretty alarmed by the loud warning about missing optional manifest fields.\n    As a result, we are now downgrading those messages from WARN to INFO, and consolidating\n    them on a single line.\n\n    [issue/393]: https://github.com/rustwasm/wasm-pack/issues/393\n    [pull/394]: https://github.com/rustwasm/wasm-pack/pull/394\n  \n  - **Add `exit_status` to CLI errors - [konstin], [issue/291] [pull/387]**\n\n    We'd been hiding these- but we shouldn't have been!\n\n    [konstin]: https://github.com/konstin\n    [issue/291]: https://github.com/rustwasm/wasm-pack/issues/291\n    [pull/387]: https://github.com/rustwasm/wasm-pack/pull/387\n\n  - **Remove lingering forced nightly usage - [alexcrichton], [pull/383]**\n\n    In 0.5.0 we removed all forced nightly usage as we depend on `~1.30` which is now\n    available on both nightly and beta channels! We had a bit of a race condition with \n    that PR and the `wasm-pack test` PR, and missed a few as a result! This removes all\n    lingering forced nightly, which only affected the `wasm-pack test` command.\n\n    [pull/383]: https://github.com/rustwasm/wasm-pack/pull/383\n\n  - **Fix `wasm-bindgen-test` dependency error message - [fitzgen], [issue/377] [pull/378]**\n\n    The error message about missing the `wasm-bindgen-test` dependency errantly stated\n    that the user was missing a `wasm-bindgen` dependency! We've fixed it to correctly\n    state the missing dependency now.\n\n    [issue/377]: https://github.com/rustwasm/wasm-pack/issues/377\n    [pull/378]: https://github.com/rustwasm/wasm-pack/pull/378\n\n  - **Fix prerequisites links in docs - [fitzgen], [pull/376]**\n\n    [pull/376]: https://github.com/rustwasm/wasm-pack/pull/376\n\n- ### üõ†Ô∏è Maintenance\n\n  - **Leverage `failure::Error` consistently - [drager], [issue/280] [pull/401]**\n\n    This PR finally makes it so that `wasm-pack` is handling errors in a consistent\n    way across the codebase. \n\n    [drager]: https://github.com/drager\n    [issue/280]: https://github.com/rustwasm/wasm-pack/issues/280\n    [pull/401]: https://github.com/rustwasm/wasm-pack/pull/401\n\n  \n\n## ‚òÄÔ∏è 0.5.0\n\n- ### ‚ú® Features\n\n  - #### **Website!** - [ashleygwilliams], [pull/246]\n\n    We have a website now. It has the installer and links to documentation. In the future,\n    we hope to have calls to action for folks first coming to the site who are looking to\n    do specific things- these will help them find the docs and tutorials they need to.\n\n    This PR also has a complete rework of our documentation.\n\n    Check it out [here](https://rustwasm.github.io/wasm-pack/)!\n\n  - #### üç± Module Support\n\n    - **BREAKING: use correct `package.json` keys for generated JavaScript - [ashleygwilliams], [issue/309] [pull/312]**\n\n      This is marked as potentially breaking because it changes the `package.json` keys that\n      are generated by the project.\n\n      Previously, we generated a JavaScript file and placed it in the `main` key, regardless\n      of what you were targeting, ES6 and Node.js alike. \n\n      We have received a lot of requests for `wasm-pack` to generate \"isomorphic\" packages,\n      that contain assets that could work on both Node.js and ES6, and this led to us \n      looking more closely at how we are using `package.json`.\n\n      With this release, we will do the following:\n\n      - `--target browser`: By default, we generate JS that is an ES6 module. We used to put\n        this in the `main` field. Now we put it in the `module` field. We also add \n        `sideEffects: false` so that bundlers that want to tree shake can.\n\n      - `--target nodejs`: This target doesn't change. We put generated JS that is a\n        CommonJS module in the `main` key.\n\n      - `--target no-modules`: This is a new target. For this target we generate bare JavaScript.\n        This code is put in a `browser` field.\n\n      You can see the structs that represent each target's expected `package.json` [here](https://github.com/rustwasm/wasm-pack/tree/master/src/manifest/npm).\n\n      Thanks so much to [bterlson] for his help in sorting this out for us!\n\n      [bterlson]: https://github.com/bterlson\n      [issue/309]: https://github.com/rustwasm/wasm-pack/issues/309\n      [pull/312]: https://github.com/rustwasm/wasm-pack/pull/312\n\n  - #### üõ†Ô∏è New Commands\n\n    - **`wasm-pack init` is now `wasm-pack build` - [csmoe], [issue/188] [pull/216]**\n\n      When this project was first conceived, we imagined it would be simply a way to package\n      up generate wasm and js and publish it to npm. Here we are at version `0.5.0` and we\n      have become much more- an integrated build tool!\n\n      As a result, the original command `init` does a lot more than that these days. We've\n      renamed the command to better reflect the work it's actually doing. `init` will still\n      work, but is deprecated now, and we will eventually remove it.\n\n      [csmoe]: https://github.com/csmoe\n      [issue/188]: https://github.com/rustwasm/wasm-pack/issues/188\n      [pull/216]: https://github.com/rustwasm/wasm-pack/pull/216\n\n    - **add new command: `wasm-pack test` - [fitzgen], [pull/271]**\n\n      This is an experimental new command that will run your tests in Node.js or a headless\n      browser using `wasm-pack test`. Check out this [tutorial](https://rustwasm.github.io/wasm-bindgen/wasm-bindgen-test/index.html)\n      to learn more!\n\n      [pull/271]: https://github.com/rustwasm/wasm-pack/pull/271\n\n    - **add 2FA support to `wasm-pack publish` - [mstallmo], [issue/257] [pull/282]**\n\n      We've been wrapping the `npm login` and `npm publish` commands as `wasm-pack login`\n      and `wasm-pack publish` for a while now- but we didn't fully support two factor\n      authentication. Now we do! (Be safe out there! 2FA is good for everyone!)\n\n      [issue/257]: https://github.com/rustwasm/wasm-pack/issues/257\n      [pull/282]: https://github.com/rustwasm/wasm-pack/pull/282\n\n  - #### üéè New Flags\n\n    - **New target, bare JavaScript: `--target no-modules`  - [ashleygwilliams], [issue/317] [pull/327]**\n\n      `wasm-bindgen` offers a `no-modules` flag that until now, we didn't support. This flag\n      produces bare, no modules JavaScript. So if that's your thing, this target is for you!\n\n      [issue/317]: https://github.com/rustwasm/wasm-pack/issues/317\n      [pull/327]: https://github.com/rustwasm/wasm-pack/pull/327\n\n    - **`--access` flag for `wasm-pack` publish - [ashleygwilliams], [issue/297] [pull/299]**\n\n      Many of our tutorials use scopes to help prevent folks from attempting to publish \n      packages that will lead to npm Registry errors because the package name already exists.\n\n      However, by default, scoped packages are assumed by the npm registry to be private, and\n      the ability to publish private packages to the npm registry is a paid feature. Worry not!\n      Now you can pass `--access public` to `wasm-pack publish` and publish scoped packages\n      publicly.\n\n      [issue/297]: https://github.com/rustwasm/wasm-pack/issues/297\n      [pull/299]: https://github.com/rustwasm/wasm-pack/pull/299\n\n  - #### ‚úÖ New Checks\n    \n    - **rustc version check - [ashleygwilliams], [issue/351] [pull/353]**\n\n      Now that we have a new fangled installer, there's a chance that folks might install `wasm-pack`\n      and not have Rust installed. Additionally, now that the features we required from the `nightly`\n      channel of Rust have moved to `beta`- we don't need to enforce `nightly`.\n\n      As of this release, we will check that your Rust version is above `1.30.0`. You can be on\n      either the `nightly` or `beta` channel and all of `wasm-pack`s calls to `cargo` will\n      respect that.\n\n      Really hate this? You can pass `--mode force` to `wasm-pack` to skip this check. I hope you know\n      what you're doing!\n\n    - **coordinating wasm-bindgen versions and installing from binaries for improved speed - [datapup], [issue/146] [pull/244] [pull/324]**\n\n      This is the true gem of this release. Have you been frustrated by how long `wasm-pack` takes to\n      run? Overusing `--mode no-install`? This is the release you're looking for.\n\n      Many releases back we realized that folks were struggling to keep the `wasm-bindgen` library\n      that their project used in sync with the `wasm-bindgen` CLI application which `wasm-pack`\n      runs for you. This became such an issue that we opted to force install `wasm-bindgen` to ensure\n      that every `wasm-pack` user had the latest version.\n\n      Like many technical solutions, this solved our original problem, but caused a new one. Now, we\n      we are forcing a `cargo install` of `wasm-bindgen` on every run, and that means downloading\n      and compiling `wasm-bindgen` everytime you want to run `wasm-pack`. That's unacceptable!\n\n      We're happy to announce that we have a pretty great solution, and several more planned for\n      future releases. As of this release, we will read your `Cargo.lock` to find the version of\n      `wasm-bindgen` you are using in your local project. We will attempt to fetch a binary version\n      of `wasm-bindgen` that matches your local version. We place that binary local to your project,\n      and use it when you run `wasm-pack build`. The next time you run `wasm-pack build` we'll use\n      that binary, instead of fetching a new one. We still fall back to `cargo install` for\n      less common architectures but this is a huge speed improvement. Check out these benchmarks!\n\n      ##### `wasm-pack` v0.4.2\n\n      ```\n      $ time wasm-pack init                   # fresh build\n      real    1m58.802s\n      user    14m49.679s\n      sys     0m24.957s\n\n      $ time wasm-pack init                   # re-build\n      real    0m56.953s\n      user    11m12.075s\n      sys     0m18.835s\n\n      $ time wasm-pack init -m no-install     # re-build with no-install\n      real    0m0.091s\n      user    0m0.052s\n      sys     0m0.042s\n      ```\n\n      ##### `wasm-pack` v0.5.0\n\n      ```\n      $ time wasm-pack build                  # fresh build\n      real    1m3.350s\n      user    3m46.912s\n      sys     0m6.057s\n\n      $ time wasm-pack build                  # re-build\n      real    0m0.230s\n      user    0m0.185s\n      sys     0m0.047s\n\n      $ time wasm-pack build -m no-install    # re-build with no-install\n      real    0m0.104s\n      user    0m0.066s\n      sys     0m0.041s\n      ```\n\n      [datapup]: https://github.com/datapup\n      [issue/146]: https://github.com/rustwasm/wasm-pack/issues/146\n      [pull/244]: https://github.com/rustwasm/wasm-pack/pull/244\n      [pull/324]: https://github.com/rustwasm/wasm-pack/pull/324\n\n    - **enforce `cargo build` with `--lib` - [ashleygwilliams], [issue/303] [pull/330]**\n\n      Right now, `wasm-pack` only works on Rust library projects. But sometimes, if you're\n      new to Rust, you might end up having a `main.rs` in your project, just by mistake.\n      Some folks ran into this and realized that it can cause issues!\n\n      As a result, we are enforcing that `cargo build` only build the library at this time.\n\n      Want to use `wasm-pack` on a binary application? We're interested in hearing from you!\n      Checkout [issue/326] and please comment! We want to support binary applicaitons in\n      the future and are always happy and curious to hear about how folks use `wasm-pack`!\n\n      [issue/326]: https://github.com/rustwasm/wasm-pack/issues/326\n      [issue/303]: https://github.com/rustwasm/wasm-pack/issues/303\n      [pull/330]: https://github.com/rustwasm/wasm-pack/pull/330\n\n  - #### Installers and Releases\n\n    - **Appveyor Windows Pre-Built binaries - [alexcrichton], [issue/147] [pull/301]**\n\n      We finally got Appveyor to publish pre-built binaries to GitHub releases.\n      Aside: I really wish there were an easier way to test and debug this stuff.\n\n      [alexcrichton]: https://github.com/alexcrichton\n      [issue/147]: https://github.com/rustwasm/wasm-pack/issues/147\n      [pull/301]: https://github.com/rustwasm/wasm-pack/pull/301\n\n    - **new experimental installer - [alexcrichton], [pull/307]**\n\n      Whew, this one is exciting. Up until now, `wasm-pack` has been distributed using\n      `cargo install`. This is not ideal for several reasons. Updating is confusing,\n      and every time it's installed the user has to wait for it to compile- right at the\n      moment they just want to hurry up and use it already.\n\n      Say hello to the new `wasm-pack` installer- we have an executable for Windows\n      and a `curl` script for *nix users. Not pleased with that? File an issue for your\n      preferred distribution method and we'll do our best to get it working!\n\n      This is experimental- so please try it out and file issues as you run into things!\n      You'll always be able to use `cargo install` as a backup.\n\n      Checkout the new installer [here](https://rustwasm.github.io/wasm-pack/installer/)!\n\n      [pull/307]: https://github.com/rustwasm/wasm-pack/pull/307\n\n- ### üõ†Ô∏è Maintenance\n\n    - **testing fixture strategy improvements - [fitzgen], [pull/211] [pull/323]**\n\n      [pull/211]: https://github.com/rustwasm/wasm-pack/pull/211\n      [pull/323]: https://github.com/rustwasm/wasm-pack/pull/323\n\n    - **split testing utils into separate files - [csmoe], [issue/231] [pull/216]**\n\n      [issue/231]: https://github.com/rustwasm/wasm-pack/issues/231\n      [pull/216]: https://github.com/rustwasm/wasm-pack/pull/216\n\n    - **update dependencies - [ashleygwilliams], [issue/319] [pull/320]**\n\n      [issue/319]: https://github.com/rustwasm/wasm-pack/issues/319\n      [pull/320]: https://github.com/rustwasm/wasm-pack/pull/320\n\n- ### üìñ Documentation\n\n    - **improve readability of warnings about missing optional fields - [twilco], [pull/296]**\n\n      A little punctuation goes a long way. Error message improvement PRs are the best.\n\n      [twilco]: https://github.com/twilco\n      [pull/296]: https://github.com/rustwasm/wasm-pack/pull/296\n\n    - **update links in README - [alexcrichton], [pull/300]**\n\n      We had a real dicey documentation situation for a while. Sorry about that, and thank\n      you SO MUCH to all the folks who filed PRs to fix it.\n\n      [pull/300]: https://github.com/rustwasm/wasm-pack/pull/300\n\n    - **fix broken links in book by using relative paths - [mstallmo], [issue/325] [pull/328]**\n\n      [mstallmo]: https://github.com/mstallmo\n      [issue/325]: https://github.com/rustwasm/wasm-pack/issues/325\n      [pull/328]: https://github.com/rustwasm/wasm-pack/pull/328\n\n## ‚ú® 0.4.2\n\n- #### ü§ï Fixes\n\n  - **recognize `[dependencies.wasm-bindgen]` during dep check in `init` - [ashleygwilliams], [issue/221] [pull/224]**\n\n    When we originally implemented the dependency check in `wasm-pack init` we naively only checked for the\n    \"simple\" dependency declaration, `[dependencies] wasm-bindgen=\"0.2\"`. However! This is not the only way\n    to declare this dependency, and it's not the ideal way to do it if you want to specify features from the\n    crate. Now that a bunch of folks want to use `features = [\"serde-serialize\"]` we ran into a bunch of folks\n    having issues with our naive dependency checker! Thanks so much to [turboladen] for filing the very detailed\n    issue that helped us solve this quickly!\n\n    PSSSST! Curious what `features = [\"serde-serialize\"]` with `wasm-bindgen` actually does? It's awesome:\n\n    > It's possible to pass data from Rust to JS not explicitly supported in the [Feature Reference](./feature-reference.md) by serializing via [Serde](https://github.com/serde-rs/serde).\n\n    Read the [Passing arbitrary data to JS docs] to learn more!\n\n    [Passing arbitrary data to JS docs]: https://github.com/rustwasm/wasm-bindgen/blob/master/guide/src/reference/arbitrary-data-with-serde.md\n    [turboladen]: https://github.com/turboladen\n    [issue/221]: https://github.com/rustwasm/wasm-pack/issues/221\n    [pull/224]: https://github.com/rustwasm/wasm-pack/pull/224\n\n  - **improve UX of publish and pack commands - [Mackiovello], [pull/198]**\n\n    Previous to this fix, you would need to be in the parent directory of the `/pkg` dir to successfully run\n    `pack` or `publish`. This was pretty crummy! Thankfully, [Mackiovello] swooped in with a fix, that you can\n    find documented in the [pack and publish docs]!\n\n    [Mackiovello]: https://github.com/Mackiovello\n    [pull/198]: https://github.com/rustwasm/wasm-pack/pull/198\n    [pack and publish docs]: https://github.com/rustwasm/wasm-pack/blob/05e4743c22b57f4c4a1bfff1df1d2cc1a595f523/docs/pack-and-publish.md\n\n  - **use `PathBuf` instead of `String` for paths - [Mackiovello], [pull/220]**\n\n    This is mostly a maintenance PR  but does fix one very small bug- depending on if you add a trailing slash to\n    a path that you pass to `init`, you might have seen an extra `/`! Now that we're using a proper Type to\n    handle this, that's much better, and in general, all the operations using paths are more robust now.\n\n    [pull/220]: https://github.com/rustwasm/wasm-pack/pull/220\n\n- #### üìñ Documentation\n\n  - **update docs and tests to eliminate no longer necessary feature flags - [ashleygwilliams], [pull/226]**\n\n    The Rust 2018 edition marches on and we are seeing feature flags drop like flies :) Instead of a whole slew\n    of feature flags, we now only need one, `#![feature(use_extern_macros)]`, and that one is also not long for\n    this world :)\n  \n    [pull/226]: https://github.com/rustwasm/wasm-pack/pull/226\n\n\n## ‚≠ê 0.4.1\n\n- #### ü§ï Fixes\n\n  - **fix `files` key value for projects build for `nodejs` target - [ashleygwilliams], [issue/199] [pull/205]**\n\n    We became aware that the `files` key in `package.json` did not include the additional `_bg.js` file that \n    `wasm-bindgen` generates for projects being built for the `nodejs` target. This resulted in the file not\n    being included in the published package and resulted in a `Module Not Found` error for folks.\n\n    This was a group effort from [mciantyre] with [pull/200] and [Brooooooklyn] with [pull/197]. Thank you so\n    much for your diligence and patience while we sorted through it.\n\n    [mciantyre]: https://github.com/mciantyre\n    [Brooooooklyn]: https://github.com/Brooooooklyn\n    [issue/199]: https://github.com/rustwasm/wasm-pack/issues/199\n    [pull/205]: https://github.com/rustwasm/wasm-pack/pull/205\n    [pull/197]: https://github.com/rustwasm/wasm-pack/pull/197\n    [pull/200]: https://github.com/rustwasm/wasm-pack/pull/200\n\n- #### üõ†Ô∏è Maintenance\n\n  - **clean up `quicli` remnants - [SoryRawyer], [pull/193]**\n\n    In [v0.3.0] we removed the `quicli` dependency, however there were a few remnants\n    left behind. They are now removed!\n\n    [SoryRawyer]: https://github.com/SoryRawyer\n    [pull/193]: https://github.com/rustwasm/wasm-pack/pull/193\n    [v0.3.0]: https://github.com/rustwasm/wasm-pack/blob/master/CHANGELOG.md#-030\n\n- #### üìñ Documentation\n\n  - **DOCUMENT EVERYTHING!! and deny missing docs for all future development - [fitzgen], [pull/208]**\n\n    The `wasm-pack` team has worked hard on tutorial documentation and keeping the codebase as self-explanatory\n    as possible, but we have been slowly accruing a documentation debt. This amazing PR, landed just moments\n    before this point release and was just too good not to include. Thank you so much, [fitzgen]!\n\n    [fitzgen]: https://github.com/fitzgen\n    [pull/208]: https://github.com/rustwasm/wasm-pack/pull/208\n\n  - **fix README code example - [steveklabnik], [pull/195]**\n\n    The code example in our `README.md` was missing a critical `pub`. It's there now!\n\n    [pull/195]: https://github.com/rustwasm/wasm-pack/pull/195/files\n\n  - **fix README markup - [Hywan], [pull/202]**\n\n    There was an errant `` ` `` - it's gone now!\n\n    [Hywan]: https://github.com/Hywan\n    [pull/202]: https://github.com/rustwasm/wasm-pack/pull/202\n\n## üåü 0.4.0\n\nThis release has a ton of awesome things in it, but the best thing is that\nalmost all of this awesome work is brought to you by a **new** contributor\nto `wasm-pack`. Welcome ya'll! We're so glad to have you!\n\n### ‚ú® Features\n\n- #### üéè New Flags\n\n  - **`--mode` flag for skipping steps when calling `init` - [ashleygwilliams], [pull/186]** \n\n      After teaching and working with `wasm-pack` for some time, it's clear that people would\n      like the flexibility to run some of the steps included in the `init` command and not others.\n      This release introduces a `--mode` flag that you can pass to `init`. The two modes currently\n      available are `skip-build` and `no-installs` and they are explained below. In the future, \n      we are looking to change the `init` interface, and potentially to split it into two commands.\n      If you have thoughts or opinions on this, please weigh in on [issue/188]!\n\n      [issue/188]: https://github.com/ashleygwilliams/wasm-pack/issues/188\n      [pull/186]: https://github.com/ashleygwilliams/wasm-pack/pull/186\n\n    - **`skip-build` mode - [kohensu], [pull/151]**\n\n      ```\n      wasm-pack init --mode skip-build\n      ```\n\n      Sometimes you want to run some of the shorter meta-data steps that\n      `wasm-pack init` does for you without all the longer build steps. Now\n      you can! Additionally, this PR was a fantastic refactor that allows even\n      more custom build configurations will be simple to implement!\n\n      [kohensu]: https://github.com/kohensu\n      [pull/151]: https://github.com/ashleygwilliams/wasm-pack/pull/151\n\n    - **`no-installs` mode - [ashleygwilliams], [pull/186]**\n\n      ```\n      wasm-pack init --mode no-installs\n      ```\n\n      Sometimes you want to run `wasm-pack` and not have it modify your global\n      env by installing stuff! Or maybe you are just in a hurry and trust your\n      env is set up correctly- now the `--mode no-install` option allows you to\n      do this.\n\n  - **`--debug`  - [clanehin], [pull/127]**\n\n    ```\n    wasm-pack init --debug\n    ```\n\n    Find yourself needing to compile your Rust in `development` mode? You can now\n    pass the `--debug` flag to do so! Thanks so much to [clanehin] for filing \n    [issue/126] for this feature... and then implementing it!\n\n    [pull/127]: https://github.com/ashleygwilliams/wasm-pack/pull/127\n    [issue/126]: https://github.com/ashleygwilliams/wasm-pack/issues/126\n    [clanehin]: https://github.com/clanehin\n\n- #### ‚úÖ New Checks\n\n  - **ensure you have `cdylib` crate type - [kendromelon], [pull/150]**\n\n    One of the biggest mistakes we've seen beginners make is forgetting to declare\n    the `cdylib` crate type in their `Cargo.toml` before running `wasm-pack init`.\n    This PR fixes that, and comes from someone who ran into this exact issue learning\n    about `wasm-pack` at [JSConfEU]! Love when it works out like this.\n\n    [JSConfEU]: https://2018.jsconf.eu/\n    [kendromelon]: https://github.com/kedromelon\n    [pull/150]: https://github.com/ashleygwilliams/wasm-pack/pull/150\n\n  - **ensure you have declared wasm-bindgen as a dep - [robertohuertasm], [pull/162]**\n\n    Another easy mistake to make is to forget to declare `wasm-bindgen` as a\n    dependency in your `Cargo.toml`. Now `wasm-pack` will check and make sure you\n    have it set before doing a bunch of long build steps :)\n\n    [robertohuertasm]: https://github.com/robertohuertasm\n    [pull/162]: https://github.com/ashleygwilliams/wasm-pack/pull/162\n\n  - **ensure you are running `nightly` - [FreeMasen], [pull/172]**\n\n    `wasm-pack` currently requires that you run it with `nightly` Rust. Now, `wasm-pack`\n    will make sure you have `nightly` installed and will ensure that `cargo build` is run\n    with `nightly`. Thanks so much to [FreeMasen] for filing [issue/171] and fixing it!\n\n    [FreeMasen]: https://github.com/FreeMasen\n    [issue/171]: https://github.com/ashleygwilliams/wasm-pack/issues/171\n    [pull/172]: https://github.com/ashleygwilliams/wasm-pack/pull/172\n\n### ü§ï Fixes\n\n- **fixed broken progress bar spinner - [migerh], [pull/164]**\n\n  Oh no! We broke the progress bar spinner in version 0.3.0. Thankfully, it's\n  fixed now- with a thoughtful refactor that also makes the underlying code\n  sounder overall.\n\n[migerh]: https://github.com/migerh\n[pull/164]: https://github.com/ashleygwilliams/wasm-pack/pull/164\n\n### üõ†Ô∏è Maintenance\n\n- **WIP bot - [ashleygwilliams] & [mgattozzi], [issue/170]**\n\n  We've got a lot of work happening on `wasm-pack` so it's good to have a bit\n  of protection from accidentally merging a Work In Progress. As a result, we\n  now have the [WIP Github App] set up on `wasm-pack`. Great suggestion [mgattozzi]!\n\n  [WIP Github App]: https://github.com/wip/app\n  [issue/170]: https://github.com/ashleygwilliams/wasm-pack/issues/170\n\n- **modularize `command.rs` - [ashleygwilliams], [pull/182]**\n\n  Thanks to the growth of `wasm-pack`, `command.rs` was getting pretty long.\n  We've broken it out into per command modules now, to help make it easier to\n  read and maintain!\n\n  [pull/182]: https://github.com/ashleygwilliams/wasm-pack/pull/182\n\n- **improve PoisonError conversion - [migerh], [pull/187]**\n\n  As part of the awesome progress bar spinner fix in [pull/164], [migerh] introduced\n  a small concern with an `unwrap` due to an outstanding need to convert `PoisonError`\n  into `wasm-pack`'s custom `Error`. Though not a critical concern, [migerh] mitigated\n  this right away by replacing `std::sync::RwLock` with the [`parking_lot` crate]!\n  This cleaned up the code even more than the previous patch!\n\n  [`parking_lot` crate]: https://github.com/Amanieu/parking_lot\n  [pull/187]: https://github.com/ashleygwilliams/wasm-pack/pull/187\n\n- **wasm category for crates.io discovery- [TomasHubelbauer], [pull/149]**\n\n  [crates.io] has [categories] to help folks discover crates, be we weren't\n  leveraging it! Now- if you explore the [`wasm` category] on [crates.io]\n  you'll see `wasm-pack`!\n\n[crates.io]: https://crates.io/\n[categories]: https://crates.io/categories\n[`wasm` category]: https://crates.io/categories/wasm\n[TomasHubelbauer]: https://github.com/TomasHubelbauer\n[pull/149]: https://github.com/ashleygwilliams/wasm-pack/pull/149\n\n- **human panic is now 1.0.0 - [spacekookie], [pull/156]**\n\n  Congrats friends! We like what you do.\n\n[pull/156]: https://github.com/ashleygwilliams/wasm-pack/pull/156\n[spacekookie]: https://github.com/spacekookie\n\n### üìñ Documentation\n\n- **cleaned up the README - [ashleygwilliams], [pull/155]**\n\n  Our `README` was struggling with a common problem- doing too much at once.\n  More specifically, it wasn't clear who the audience was, contributers or \n  end users? We've cleaned up our README and created a document specifically\n  to help contributors get up and running.\n\n[pull/155]: https://github.com/ashleygwilliams/wasm-pack/pull/155\n\n## üå† 0.3.1\n\nBabby's first point release! Are we a real project now?\n\n### ü§ï Fixes \n\n- **fixed `init` `Is a Directory` error - [ashleygwilliams], [pull/139]**\n\n  Our new logging feature accidentally introduced a regression into 0.3.0. When\n  calling `wasm-pack init`, if a directory was not passed, a user would receive\n  a \"Is a Directory\" Error. Sorry about that! Thanks to [jbolila] for filing \n  [issue/136]!\n\n[pull/139]: https://github.com/ashleygwilliams/wasm-pack/pull/139\n[issue/136]: https://github.com/ashleygwilliams/wasm-pack/issues/136\n[jbolila]: https://github.com/jbolila\n\n- **typescript files were not included in published package - [danreeves], [pull/138]**\n\n  Generating Typescript type files by default was a pretty rad feature in\n  0.3.0 but we accidentally forgot to ensure they were included in the \n  published package. Thanks so much to [danreeves] for catching this issue \n  and fixing it for us!\n\n[danreeves]: https://github.com/danreeves\n[pull/138]: https://github.com/ashleygwilliams/wasm-pack/pull/138\n\n## üí´ 0.3.0\n\n### ‚ú® Features\n\n- **Logging - [mgattozzi], [pull/134]**\n\n  Up until now, we've forced folks to rely on emoji-jammed console output to debug\n  errors. While emojis are fun, this is often not the most pleasant experience. Now\n  we'll generate a `wasm-pack.log` file if `wasm-pack` errors on you, and you can\n  customize the log verbosity using the (previously unimplemented) verbosity flag.\n\n[pull/134]: https://github.com/ashleygwilliams/wasm-pack/pull/134\n\n- **`--target` flag - [djfarly], [pull/132]**\n\n  `wasm-bindgen-cli` is able to generate a JS module wrapper for generated wasm files\n  for both ES6 modules and CommonJS. Up until now, we only used wasm-bindgen's default\n  behavior, ES6 modules. You can now pass a `--target` flag with either `nodejs` or \n  `browser` to generate the type of module you want to use. Defaults to `browser` if not\n  passed.\n\n[djfarly]: https://github.com/djfarly\n[pull/132]: https://github.com/ashleygwilliams/wasm-pack/pull/132\n\n- **human readable panics - [yoshuawuyts], [pull/118]**\n\n  Panics aren't always the most friendly situation ever. While we never want to panic on ya,\n  if we do- we'll do it in a way that's a little more readable now.\n\n[pull/118]: https://github.com/ashleygwilliams/wasm-pack/pull/118\n\n- **typescript support by default - [kwonoj], [pull/109]**\n\n  `wasm-bindgen` now generates typescript type files by default. To suppress generating\n  the type file you can pass the `--no-typescript` flag. The type file is useful for more\n  than just typescript folks- many IDEs use it for completion!\n\n[kwonoj]: https://github.com/kwonoj\n[pull/109]: https://github.com/ashleygwilliams/wasm-pack/pull/109\n\n- **wrap `npm login` command - [djfarly], [pull/100]**\n\n  In order to publish a package to npm, you need to be logged in. You can now use\n  `wasm-pack login` to login to the npm (or any other) registry.\n\n[pull/100]: https://github.com/ashleygwilliams/wasm-pack/pull/100\n\n- **exit early on failure - [mgattozzi], [pull/90]**\n\n  Until now, `wasm-pack` would continue to run tasks, even if a task failed. Now- if something\n  fails, we'll exit so you don't have to wait to fix the error.\n\n[pull/90]: https://github.com/ashleygwilliams/wasm-pack/pull/90\n\n### ü§ï Fixes\n\n- **force install wasm-bindgen - [ashleygwilliams], [pull/133]**\n\n  Using an out of date version of `wasm-bindgen` can run you into a bunch of trouble. This\n  very small change should fix the large number of bug reports we received from users using\n  an out of date `wasm-bindgen-cli` by force installing `wasm-bindgen-cli` to ensure the user\n  always has the latest version. We don't expect this to be a forever solution (it's a bit\n  slow!) but it should help those who are getting started have a less rough time.\n\n[pull/133]: https://github.com/ashleygwilliams/wasm-pack/pull/133\n\n- **fix CI release builds - [ashleygwilliams], [pull/135]**\n\n  This was not working! But now it is! You can always use `cargo install` to install\n  wasm-pack, but now you can find pre-built Linux and Mac binaries in the [Releases]\n  tab of our GitHub repo.\n\n[Releases]: https://github.com/ashleygwilliams/wasm-pack/releases\n[pull/135]: https://github.com/ashleygwilliams/wasm-pack/pull/135   \n\n### üõ†Ô∏è Maintenance \n\n- **remove `quicli` dependency - [mgattozzi], [pull/131]**\n\n  While `quicli` is a great way to get started writing a CLI app in Rust- it's not meant for \n  large, mature applications. Now that `wasm-pack` is bigger and has many active users, we've\n  removed this dependency to unblock further development on the tool.\n\n[pull/131]: https://github.com/ashleygwilliams/wasm-pack/pull/131\n\n- **update rustfmt CI test - [djfarly], [pull/128]**\n\n  Since 0.2.0 how one should call `rustfmt` changed! We've kept it up to date so we can continue\n  to maintain conventional style in the codebase.\n\n[pull/128]: https://github.com/ashleygwilliams/wasm-pack/pull/128\n\n- **custom module for errors - [mgattozzi], [pull/120]**\n\n  Thanks to the `failure` crate, we've been playing fast and loose with errors for a bit. We're\n  finally getting serious about error handling - by organizing all of our specific errors in a\n  specific module. This will make it easier to communicate these errors out and handle new error\n  cases from future features.\n\n[pull/120]: https://github.com/ashleygwilliams/wasm-pack/pull/120\n\n### üìñ Documentation\n\nSpecial thanks to [data-pup] who continues to be our documentation champion! In case you missed it,\ncheck out the guides in the [docs directory!](docs)!\n\n## üåå 0.2.0\n\nThis release focuses on filling out all commands and improving stderr/out\nhandling for improved user experience!\n\n### ‚ú® Features\n\n- **`pack` and `publish` - [jamiebuilds], [pull/67]**\n  You can now run `wasm-pack pack` to generate a tarball of your generated package,\n  as well as run `wasm-pack publish` to publish your package to the npm registry.\n  Both commands require that you have npm installed, and the `publish` command requires\n  that you be logged in to the npm client. We're working on wrapping the `npm login`\n  command so that you can also login directly from `wasm-pack`, see [pull/100] for more\n  details.\n\n[jamiebuilds]: https://github.com/jamiebuilds\n[pull/67]: https://github.com/ashleygwilliams/wasm-pack/pull/67\n[pull/100]: https://github.com/ashleygwilliams/wasm-pack/pull/100\n\n- **`package.json` is pretty printed now - [yoshuawuyts], [pull/70]**\n\n  Previously, `package.json` was not very human readable. Now it is pretty printed!\n\n- **`collaborators` - [yoshuawuyts], [pull/70]**\n\n  `wasm-pack` now will fill out the `collaborators` field in your `package.json` for\n  you based on your `Cargo.toml` `authors` data. For more discussion on how we decided\n  on this v.s. other types of `author` fields in `package.json`, see [issues/2].\n\n[yoshuawuyts]: https://github.com/yoshuawuyts\n[pull/70]: https://github.com/ashleygwilliams/wasm-pack/pull/70\n[issues/2]: https://github.com/ashleygwilliams/wasm-pack/issues/2\n\n- **Release binaries built with CI - [ashleygwilliams], [pull/103]**\n\n[ashleygwilliams]: https://github.com/ashleygwilliams\n[pull/103]: https://github.com/ashleygwilliams/wasm-pack/pull/103\n\n### ü§ï Fixes\n\n- **Optional `package.json` fields warn instead of failing - [mgattozzi], [pull/65]**\n\n[pull/65]: https://github.com/ashleygwilliams/wasm-pack/pull/65\n\n- **Program doesn't swallow stout and sterr - [mgattozzi], [pull/90]**\n\n[mgattozzi]: https://github.com/mgattozzi\n[pull/90]: https://github.com/ashleygwilliams/wasm-pack/pull/90\n\n### üõ†Ô∏è Maintenance and üìñ Documentation\n\nThanks so much to [mgattozzi], [data-pup], [sendilkumarn], [Andy-Bell], \n[steveklabnik], [jasondavies], and [edsrzf] for all the awesome refactoring,\ndocumentation, typo-fixing, and testing work. We appreciate it so much!\n\n[data-pup]: https://github.com/data-pup\n[sendilkumarn]: https://github.com/sendilkumarn\n[Andy-Bell]: https://github.com/Andy-Bell\n[steveklabnik]: https://github.com/steveklabnik\n[jasondavies]: https://github.com/jasondavies\n[edsrzf]: https://github.com/edsrzf\n\n## üí•  0.1.0\n\n- First release! \n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.1552734375,
          "content": "# The Rust Code of Conduct\n\nA version of this document [can be found online](https://www.rust-lang.org/conduct.html).\n\n## Conduct\n\n**Contact**: [rust-mods@rust-lang.org](mailto:rust-mods@rust-lang.org)\n\n* We are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other similar characteristic.\n* On IRC, please avoid using overtly sexual nicknames or other nicknames that might detract from a friendly, safe and welcoming environment for all.\n* Please be kind and courteous. There's no need to be mean or rude.\n* Respect that people have differences of opinion and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a right answer.\n* Please keep unstructured critique to a minimum. If you have solid ideas you want to experiment with, make a fork and see how it works.\n* We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behavior. We interpret the term \"harassment\" as including the definition in the <a href=\"http://citizencodeofconduct.org/\">Citizen Code of Conduct</a>; if you have any lack of clarity about what might be included in that concept, please read their definition. In particular, we don't tolerate behavior that excludes people in socially marginalized groups.\n* Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a community member, please contact one of the channel ops or any of the [Rust moderation team][mod_team] immediately. Whether you're a regular contributor or a newcomer, we care about making this community a safe place for you and we've got your back.\n* Likewise any spamming, trolling, flaming, baiting or other attention-stealing behavior is not welcome.\n\n## Moderation\n\n\nThese are the policies for upholding our community's standards of conduct. If you feel that a thread needs moderation, please contact the [Rust moderation team][mod_team].\n\n1. Remarks that violate the Rust standards of conduct, including hateful, hurtful, oppressive, or exclusionary remarks, are not allowed. (Cursing is allowed, but never targeting another user, and never in a hateful manner.)\n2. Remarks that moderators find inappropriate, whether listed in the code of conduct or not, are also not allowed.\n3. Moderators will first respond to such remarks with a warning.\n4. If the warning is unheeded, the user will be \"kicked,\" i.e., kicked out of the communication channel to cool off.\n5. If the user comes back and continues to make trouble, they will be banned, i.e., indefinitely excluded.\n6. Moderators may choose at their discretion to un-ban the user if it was a first offense and they offer the offended party a genuine apology.\n7. If a moderator bans someone and you think it was unjustified, please take it up with that moderator, or with a different moderator, **in private**. Complaints about bans in-channel are not allowed.\n8. Moderators are held to a higher standard than other community members. If a moderator creates an inappropriate situation, they should expect less leeway than others.\n\nIn the Rust community we strive to go the extra step to look out for each other. Don't just aim to be technically unimpeachable, try to be your best self. In particular, avoid flirting with offensive or sensitive issues, particularly if they're off-topic; this all too often leads to unnecessary fights, hurt feelings, and damaged trust; worse, it can drive people away from the community entirely.\n\nAnd if someone takes issue with something you said or did, resist the urge to be defensive. Just stop doing what it was they complained about and apologize. Even if you feel you were misinterpreted or unfairly accused, chances are good there was something you could've communicated better ‚Äî remember that it's your responsibility to make your fellow Rustaceans comfortable. Everyone wants to get along and we are all here first and foremost because we want to talk about cool technology. You will find that people will be eager to assume good intent and forgive as long as you earn their trust.\n\nThe enforcement policies listed above apply to all official Rust venues; including official IRC channels (#rust, #rust-internals, #rust-tools, #rust-libs, #rustc, #rust-beginners, #rust-docs, #rust-community, #rust-lang, and #cargo); GitHub repositories under rust-lang, rust-lang-nursery, and rust-lang-deprecated; and all forums under rust-lang.org (users.rust-lang.org, internals.rust-lang.org). For other projects adopting the Rust Code of Conduct, please contact the maintainers of those projects for enforcement. If you wish to use this code of conduct for your own project, consider explicitly mentioning your moderation policy or making a copy with your own moderation policy so as to avoid confusion.\n\n*Adapted from the [Node.js Policy on Trolling](http://blog.izs.me/post/30036893703/policy-on-trolling) as well as the [Contributor Covenant v1.3.0](https://www.contributor-covenant.org/version/1/3/0/).*\n\n[mod_team]: https://www.rust-lang.org/team.html#Moderation-team\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.076171875,
          "content": "# Contributing\n\n## Filing an Issue\n\nIf you are trying to use `wasm-pack` and run into an issue- please file an\nissue! We'd love to get you up and running, even if the issue you have might\nnot be directly related to the code in `wasm-pack`. This tool seeks to make\nit easy for developers to get going, so there's a good chance we can do\nsomething to alleviate the issue by making `wasm-pack` better documented or\nmore robust to different developer environments.\n\nWhen filing an issue, do your best to be as specific as possible. Include\nthe version of rust you are using (`rustc --version`) and your operating\nsystem and version. The faster was can reproduce your issue, the faster we\ncan fix it for you!\n\n## Submitting a PR\n\nIf you are considering filing a pull request, make sure that there's an issue\nfiled for the work you'd like to do. There might be some discussion required!\nFiling an issue first will help ensure that the work you put into your pull\nrequest will get merged :)\n\nBefore you submit your pull request, check that you have completed all of the\nsteps mentioned in the pull request template. Link the issue that your pull\nrequest is responding to, and format your code using [rustfmt][rustfmt].\n\n### Configuring rustfmt\n\nBefore submitting code in a PR, make sure that you have formatted the codebase\nusing [rustfmt][rustfmt]. `rustfmt` is a tool for formatting Rust code, which\nhelps keep style consistent across the project. If you have not used `rustfmt`\nbefore, it is not too difficult.\n\nIf you have not already configured `rustfmt` for the\nnightly toolchain, it can be done using the following steps:\n\n**1. Use Nightly Toolchain**\n\nUse the `rustup override` command to make sure that you are using the nightly\ntoolchain. Run this command in the `wasm-pack` directory you cloned.\n\n```sh\nrustup override set nightly\n```\n\n**2. Add the rustfmt component**\n\nInstall the most recent version of `rustfmt` using this command:\n\n```sh\nrustup component add rustfmt-preview --toolchain nightly\n```\n\n**3. Running rustfmt**\n\nTo run `rustfmt`, use this command:\n\n```sh\ncargo +nightly fmt\n```\n\n[rustfmt]: https://github.com/rust-lang-nursery/rustfmt\n\n### IDE Configuration files\nMachine specific configuration files may be generaged by your IDE while working on the project. Please make sure to add these files to a global .gitignore so they are kept from accidentally being commited to the project and causing issues for other contributors.\n\nSome examples of these files are the `.idea` folder created by JetBrains products (WebStorm, IntelliJ, etc) as well as `.vscode` created by Visual Studio Code for workspace specific settings. \n\nFor help setting up a global .gitignore check out this [GitHub article]!\n\n[GitHub article]: https://help.github.com/articles/ignoring-files/#create-a-global-gitignore\n\n## Conduct\n\nAs mentioned in the readme file, this project is a part of the [`rust-wasm` working group],\nan official working group of the Rust project. We follow the Rust [Code of Conduct and enforcement policies].\n\n[`rust-wasm` working group]: https://github.com/rustwasm/team\n[Code of Conduct and enforcement policies]: CODE_OF_CONDUCT.md\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 54.5390625,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.24.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dfbe277e56a376000877090da837660b4427aad530e3028d44e0bffe4f89a1c1\"\ndependencies = [\n \"gimli\",\n]\n\n[[package]]\nname = \"adler2\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"512761e0bb2578dd7380c6baaa0f4ce03e84f95e960231d1dec8bf4d7d6e2627\"\n\n[[package]]\nname = \"aes\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b169f7a6d4742236a0a00c541b845991d0ac43e546831af1249753ab4c3aa3a0\"\ndependencies = [\n \"cfg-if\",\n \"cipher\",\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"android-tzdata\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"anstream\"\nversion = \"0.6.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23a1e53f0f5d86382dafe1cf314783b2044280f406e7e1506368220ad11b1338\"\ndependencies = [\n \"anstyle\",\n \"anstyle-parse\",\n \"anstyle-query\",\n \"anstyle-wincon\",\n \"colorchoice\",\n \"is_terminal_polyfill\",\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8365de52b16c035ff4fcafe0092ba9390540e3e352870ac09933bebcaa2c8c56\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b2d16507662817a6a20a9ea92df6652ee4f94f914589377d69f3b21bc5798a9\"\ndependencies = [\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79947af37f4177cfead1110013d678905c37501914fba0efea834c3fe9a8d60c\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"3.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2109dbce0e72be3ec00bed26e6a7479ca384ad226efdd66db8fa2e3a38c83125\"\ndependencies = [\n \"anstyle\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.91\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c042108f3ed77fd83760a5fd79b53be043192bb3b9dba91d8c574c0ada7850c8\"\n\n[[package]]\nname = \"arbitrary\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d5a26814d8dcb93b0e5a0ff3c6d80a8843bafb21b39e8e18a6f05471870e110\"\ndependencies = [\n \"derive_arbitrary\",\n]\n\n[[package]]\nname = \"assert_cmd\"\nversion = \"2.0.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc1835b7f27878de8525dc71410b5a31cdcc5f230aed5ba5df968e09c201b23d\"\ndependencies = [\n \"anstyle\",\n \"bstr\",\n \"doc-comment\",\n \"libc\",\n \"predicates\",\n \"predicates-core\",\n \"predicates-tree\",\n \"wait-timeout\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26\"\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.74\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d82cb332cdfaed17ae235a638438ac4d4839913cc2af585c3c6746e8f8bee1a\"\ndependencies = [\n \"addr2line\",\n \"cfg-if\",\n \"libc\",\n \"miniz_oxide\",\n \"object\",\n \"rustc-demangle\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"base64\"\nversion = \"0.22.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6\"\n\n[[package]]\nname = \"binary-install\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5252e41a4ed7657f79827123f232443077984ec55c540adf48e8fe67b6ec0763\"\ndependencies = [\n \"anyhow\",\n \"dirs-next\",\n \"flate2\",\n \"fs4\",\n \"hex\",\n \"is_executable\",\n \"siphasher\",\n \"tar\",\n \"ureq\",\n \"zip\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de\"\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"bstr\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"40723b8fb387abc38f4f4a37c09073622e41dd12327033091ef8950659e6dc0c\"\ndependencies = [\n \"memchr\",\n \"regex-automata\",\n \"serde\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"bzip2\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bdb116a6ef3f6c3698828873ad02c3014b3c85cadb88496095628e3ef1e347f8\"\ndependencies = [\n \"bzip2-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"bzip2-sys\"\nversion = \"0.1.11+1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"736a955f3fa7875102d57c82b8cac37ec45224a07fd32d58f9f7a186b6cd4cdc\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b96ec4966b5813e2c0507c1f86115c8c5abaadc3980879c3424042a02fd1ad3\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.15.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eee4243f1f26fc7a42710e7439c149e2b10b05472f88090acce52632f231a73a\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c2e7962b54006dcfcc61cb72735f4d89bb97061dd6a7ed882ec6b8ee53714c6f\"\ndependencies = [\n \"jobserver\",\n \"libc\",\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a21f936df1771bf62b77f047b726c4625ff2e8aa607c01ec06e5a05bd8463401\"\ndependencies = [\n \"android-tzdata\",\n \"iana-time-zone\",\n \"js-sys\",\n \"num-traits\",\n \"wasm-bindgen\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"cipher\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"773f3b9af64447d2ce9850330c473515014aa235e6a783b02db81ff39e4a3dad\"\ndependencies = [\n \"crypto-common\",\n \"inout\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"4.5.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b97f376d85a664d5837dbae44bf546e6477a679ff6610010f17276f686d867e8\"\ndependencies = [\n \"clap_builder\",\n \"clap_derive\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.5.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19bc80abd44e4bed93ca373a0704ccbd1b710dc5749406201bb018272808dc54\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap_lex\",\n \"strsim 0.11.1\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.5.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ac6a0c7b1a9e9a5186361f67dfa1b88213572f427fb9ab038efb2bd8c582dab\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1462739cb27611015575c0c11df5df7601141071f07518d56fcc1be504cbec97\"\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b63caa9aa9397e2d9480a9b13673856c78d8ac123288526c37d7839f2a86990\"\n\n[[package]]\nname = \"console\"\nversion = \"0.15.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e1f83fc076bd6dd27517eacdf25fef6c4dfe5f1d7448bafaaf3a26f13b5e4eb\"\ndependencies = [\n \"encode_unicode\",\n \"lazy_static\",\n \"libc\",\n \"unicode-width\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"constant_time_eq\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c74b8349d32d297c9134b8c88677813a227df8f779daa29bfc29c183fe3dca6\"\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b\"\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"608697df725056feaccfa42cffdaeeec3fccc4ffc38358ecd19b243e716a78e0\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crc\"\nversion = \"3.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69e6e4d7b33a94f0991c26729976b10ebde1d34c3ee82408fb536164fa10d636\"\ndependencies = [\n \"crc-catalog\",\n]\n\n[[package]]\nname = \"crc-catalog\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19d374276b40fb8bbdee95aef7c7fa6b5316ec764510eb64b8dd0e2ed0d7e7f5\"\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22ec99545bb0ed0ea7bb9b8e1e9122ea386ff8a48c0922e43f36d45ab09e0e80\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"typenum\",\n]\n\n[[package]]\nname = \"dashmap\"\nversion = \"5.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"978747c1d849a7d2ee5e8adc0159961c48fb7e5db2f06af6723b80123bb53856\"\ndependencies = [\n \"cfg-if\",\n \"hashbrown 0.14.5\",\n \"lock_api\",\n \"once_cell\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"deflate64\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da692b8d1080ea3045efaab14434d40468c3d8657e42abddfffca87b428f4c1b\"\n\n[[package]]\nname = \"deranged\"\nversion = \"0.3.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b42b6fa04a440b495c8b04d0e71b707c585f83cb9cb28cf8cd0d976c315e31b4\"\ndependencies = [\n \"powerfmt\",\n]\n\n[[package]]\nname = \"derive_arbitrary\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"67e77553c4162a157adbf834ebae5b415acbecbeafc7a74b0e886657506a7611\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"dialoguer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59c6f2989294b9a498d3ad5491a79c6deb604617378e1cdc4bfc1c1361fe2f87\"\ndependencies = [\n \"console\",\n \"shell-words\",\n \"tempfile\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"difflib\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6184e33543162437515c2e2b48714794e37845ec9851711914eec9d308f6ebe8\"\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"dirs-next\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1\"\ndependencies = [\n \"cfg-if\",\n \"dirs-sys-next\",\n]\n\n[[package]]\nname = \"dirs-sys-next\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d\"\ndependencies = [\n \"libc\",\n \"redox_users\",\n \"winapi\",\n]\n\n[[package]]\nname = \"displaydoc\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97369cbbc041bc366949bc74d34658d6cda5621039731c6310521892a3a20ae0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"doc-comment\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fea41bba32d969b513997752735605054bc0dfa92b4c56bf1189f2e174be7a10\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"encode_unicode\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4cd405aab171cb85d6735e5c8d9db038c17d3ca007a4d2c25f337935c3d90580\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"534c5cf6194dfab3db3242765c03bbe257cf92f22b38f6bc0c58d59108a820ba\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"fastrand\"\nversion = \"2.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8c02a5121d4ea3eb16a80748c74f5549a5665e4c21333c6098f283870fbdea6\"\n\n[[package]]\nname = \"filetime\"\nversion = \"0.2.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"35c0522e981e68cbfa8c3f978441a5f34b30b96e146b33cd3359176b50fe8586\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"libredox\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"flate2\"\nversion = \"1.0.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1b589b4dc103969ad3cf85c950899926ec64300a1a46d76c03a6072957036f0\"\ndependencies = [\n \"crc32fast\",\n \"miniz_oxide\",\n]\n\n[[package]]\nname = \"float-cmp\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"98de4bbd547a563b716d8dfa9aad1cb19bfab00f4fa09a6a4ed21dbcf44ce9c4\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456\"\ndependencies = [\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"fs4\"\nversion = \"0.6.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2eeb4ed9e12f43b7fa0baae3f9cdda28352770132ef2e09a23760c29cae8bd47\"\ndependencies = [\n \"rustix\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"futures\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"65bc07b1a8bc7c85c5f2e110c476c7389b4554ba72af57d8445ea63a576b0876\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-executor\",\n \"futures-io\",\n \"futures-sink\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2dff15bf788c671c1934e366d07e30c1814a8ef514e1af724a602e8a2fbe1b10\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f29059c0c2090612e8d742178b0580d2dc940c837851ad723096f87af6663e\"\n\n[[package]]\nname = \"futures-executor\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e28d1d997f585e54aebc3f97d39e72338912123a67330d723fdbb564d646c9f\"\ndependencies = [\n \"futures-core\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e5c1b78ca4aae1ac06c48a526a655760685149f0d465d21f37abfe57ce075c6\"\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e575fab7d1e0dcb8d0c7bcf9a63ee213816ab51902e6d244a95819acacf1d4f7\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f90f7dce0722e95104fcb095585910c0977252f286e354b5e3bd38902cd99988\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9fa08315bb612088cc391249efdc3bc77536f16c91f6cf495e6fbe85b20a4a81\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-sink\",\n \"futures-task\",\n \"memchr\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.31.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07e28edb80900c19c28f1072f2e8aeca7fa06b23cd4169cefe1af5aa3260783f\"\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b\"\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e087f84d4f86bf4b218b927129862374b72199ae7d8657835f1e89000eea4fb\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"hmac\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c49c37c09c17a53d937dfbb742eb3a961d65a994e6bcdcf37e7399d0cc8ab5e\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"home\"\nversion = \"0.5.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3d1354bf6b7235cb4a0576c2619fd4ed18183f689b12b006a0ee7329eeff9a5\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"human-panic\"\nversion = \"1.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4f016c89920bbb30951a8405ecacbb4540db5524313b9445736e7e1855cf370\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"backtrace\",\n \"os_info\",\n \"serde\",\n \"serde_derive\",\n \"toml 0.8.19\",\n \"uuid\",\n]\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"235e081f3925a06703c2d0117ea8b91f042756fd6e7a6e5d901e8ca1a996b220\"\ndependencies = [\n \"android_system_properties\",\n \"core-foundation-sys\",\n \"iana-time-zone-haiku\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"windows-core\",\n]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"idna\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"634d9b1461af396cad843f47fdba5597a4f9e6ddd4bfb6ff5d85028c25cb12f6\"\ndependencies = [\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"707907fe3c25f5424cce2cb7e1cbcafee6bdbe735ca90ef77c29e84591e5b9da\"\ndependencies = [\n \"equivalent\",\n \"hashbrown 0.15.0\",\n]\n\n[[package]]\nname = \"inout\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0c10553d664a4d0bcff9f4215d0aac67a639cc68ef660840afe309b807bc9f5\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"is_executable\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"302d553b8abc8187beb7d663e34c065ac4570b273bc9511a50e940e99409c577\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"is_terminal_polyfill\"\nversion = \"1.70.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf\"\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48d1dbcbbeb6a7fec7e059840aa538bd62aaccf972c7346c4d9d2059312853d0\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.72\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a88f1bda2bd75b0452a14784937d796722fdebfe50df998aeb3f0b7603019a9\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.161\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9489c2807c139ffd9c1794f4af0ebe86a828db53ecdc7fea2111d0fed085d1\"\n\n[[package]]\nname = \"libredox\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d\"\ndependencies = [\n \"bitflags\",\n \"libc\",\n \"redox_syscall\",\n]\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"lockfree-object-pool\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9374ef4228402d4b7e403e5838cb880d9ee663314b0a900d5a6aabf0c213552e\"\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"lzma-rs\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"297e814c836ae64db86b36cf2a557ba54368d03f6afcd7d947c266692f71115e\"\ndependencies = [\n \"byteorder\",\n \"crc\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2d80299ef12ff69b16a84bb182e3b9df68b5a91574d3d4fa6e41b65deec4df1\"\ndependencies = [\n \"adler2\",\n]\n\n[[package]]\nname = \"normalize-line-endings\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61807f77802ff30975e01f4f071c8ba10c022052f98b3294119f3e615d13e5be\"\n\n[[package]]\nname = \"num-conv\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51d515d32fb182ee37cda2ccdcb92950d6a3c2893aa280e540671c2cd0f3b1d9\"\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.36.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aedf0a2d09c573ed1d8d85b30c119153926a2b36dce0ab28322c09a117a4683e\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.20.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1261fe7e33c73b354eab43b1273a57c8f967d0391e80353e51f764ac02cf6775\"\n\n[[package]]\nname = \"os_info\"\nversion = \"3.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae99c7fa6dd38c7cafe1ec085e804f8f555a2f8659b0dbe03f1f9963a9b51092\"\ndependencies = [\n \"log\",\n \"serde\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall\",\n \"smallvec\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"path-clean\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"17359afc20d7ab31fdb42bb844c8b3bb1dabd7dcf7e68428492da7f16966fcef\"\n\n[[package]]\nname = \"pbkdf2\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8ed6a7761f76e3b9f92dfb0a60a6a6477c61024b775147ff0973a02653abaf2\"\ndependencies = [\n \"digest\",\n \"hmac\",\n]\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e\"\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"915a1e146535de9163f3987b8944ed8cf49a18bb0056bcebcdcece385cece4ff\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"953ec861398dccce10c670dfeaf3ec4911ca479e9c02154b3a215178c5f566f2\"\n\n[[package]]\nname = \"powerfmt\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"439ee305def115ba05938db6eb1644ff94165c5ab5e9420d1c1bcedbba909391\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"predicates\"\nversion = \"3.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e9086cc7640c29a356d1a29fd134380bee9d8f79a17410aa76e7ad295f42c97\"\ndependencies = [\n \"anstyle\",\n \"difflib\",\n \"float-cmp\",\n \"normalize-line-endings\",\n \"predicates-core\",\n \"regex\",\n]\n\n[[package]]\nname = \"predicates-core\"\nversion = \"1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae8177bee8e75d6846599c6b9ff679ed51e882816914eec639944d7c9aa11931\"\n\n[[package]]\nname = \"predicates-tree\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"41b740d195ed3166cd147c8047ec98db0e22ec019eb8eeb76d343b795304fb13\"\ndependencies = [\n \"predicates-core\",\n \"termtree\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.89\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f139b0662de085916d1fb67d2b4169d1addddda1919e696f3252b740b629986e\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.5.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b6dfecf2c74bce2466cabf93f6664d6998a69eb21e39f4207930065b27b771f\"\ndependencies = [\n \"bitflags\",\n]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba009ff324d1fc1b900bd1fdb31564febe58a8ccc8a6fdbb93b543d33b13ca43\"\ndependencies = [\n \"getrandom\",\n \"libredox\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"368758f23274712b504848e9d5a6f010445cc8b87a7cdb4d7cbee666c1288da3\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c\"\n\n[[package]]\nname = \"ring\"\nversion = \"0.17.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c17fa4cb658e3583423e915b9f3acc01cceaee1860e33d59ebae66adc3a2dc0d\"\ndependencies = [\n \"cc\",\n \"cfg-if\",\n \"getrandom\",\n \"libc\",\n \"spin\",\n \"untrusted\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"719b953e2095829ee67db738b3bfa9fa368c94900df327b3f07fe6e794d2fe1f\"\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa260229e6538e52293eeb577aabd09945a09d6d9cc0fc550ed7529056c2e32a\"\ndependencies = [\n \"bitflags\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"rustls\"\nversion = \"0.23.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eee87ff5d9b36712a58574e12e9f0ea80f915a5b0ac518d322b24a465617925e\"\ndependencies = [\n \"log\",\n \"once_cell\",\n \"ring\",\n \"rustls-pki-types\",\n \"rustls-webpki\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"rustls-pki-types\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16f1201b3c9a7ee8039bcadc17b7e605e2945b27eee7631788c1bd2b0643674b\"\n\n[[package]]\nname = \"rustls-webpki\"\nversion = \"0.102.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64ca1bc8749bd4cf37b5ce386cc146580777b4e8572c7b97baf22c83f444bee9\"\ndependencies = [\n \"ring\",\n \"rustls-pki-types\",\n \"untrusted\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.214\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f55c3193aca71c12ad7890f1785d2b73e1b9f63a0bbc353c08ef26fe03fc56b5\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.214\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"de523f781f095e28fa605cdce0f8307e451cc0fd14e2eb4cd2e98a355b147766\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_ignored\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8e319a36d1b52126a0d608f24e93b2d81297091818cd70625fcf50a15d84ddf\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.132\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d726bfaff4b320266d395898905d0eba0345aae23b54aee3a737e260fd46db03\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_spanned\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87607cb1398ed59d48732e575a4c28a7a8ebf2454b964fe3f224f2afc07909e1\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serial_test\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e56dd856803e253c8f298af3f4d7eb0ae5e23a737252cd90bb4f3b435033b2d\"\ndependencies = [\n \"dashmap\",\n \"futures\",\n \"lazy_static\",\n \"log\",\n \"parking_lot\",\n \"serial_test_derive\",\n]\n\n[[package]]\nname = \"serial_test_derive\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91d129178576168c589c9ec973feedf7d3126c01ac2bf08795109aa35b69fb8f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"sha1\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3bf829a2d51ab4a5ddf1352d8470c140cadc8301b2ae1789db023f01cedd6ba\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"shell-words\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24188a676b6ae68c3b2cb3a01be17fbf7240ce009799bb56d5b1409051e78fde\"\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"simd-adler32\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d66dc143e6b11c1eddc06d5c423cfc97062865baf299914ab64caa38182078fe\"\n\n[[package]]\nname = \"siphasher\"\nversion = \"0.3.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38b58827f4464d87d377d175e90bf58eb00fd8716ff0a62f80356b5e61555d0d\"\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"socks\"\nversion = \"0.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0c3dbbd9ae980613c6dd8e28a9407b50509d3803b57624d5dfe8315218cd58b\"\ndependencies = [\n \"byteorder\",\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f\"\n\n[[package]]\nname = \"subtle\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292\"\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.85\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5023162dfcd14ef8f32034d8bcd4cc5ddc61ef7a247c024a33e24e1f24d21b56\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"tar\"\nversion = \"0.4.42\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ff6c40d3aedb5e06b57c6f669ad17ab063dd1e63d977c6a88e7f4dfa4f04020\"\ndependencies = [\n \"filetime\",\n \"libc\",\n \"xattr\",\n]\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0f2c9fc62d0beef6951ccffd757e241266a2c833136efbe35af6cd2567dca5b\"\ndependencies = [\n \"cfg-if\",\n \"fastrand\",\n \"once_cell\",\n \"rustix\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"termtree\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3369f5ac52d5eb6ab48c6b4ffdc8efbcad6b89c765749064ba298f2c68a16a76\"\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.65\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5d11abd9594d9b38965ef50805c5e469ca9cc6f197f883f717e0269a3057b3d5\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.65\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae71770322cbd277e69d762a16c444af02aa0575ac0d174f0b9562d3b37f8602\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"time\"\nversion = \"0.3.36\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5dfd88e563464686c916c7e46e623e520ddc6d79fa6641390f2e3fa86e83e885\"\ndependencies = [\n \"deranged\",\n \"num-conv\",\n \"powerfmt\",\n \"serde\",\n \"time-core\",\n]\n\n[[package]]\nname = \"time-core\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef927ca75afb808a4d64dd374f00a2adf8d0fcff8e7b184af886c3c87ec4a3f3\"\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"445e881f4f6d382d5f27c034e25eb92edd7c784ceab92a0937db7f2e9471b938\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\"\n\n[[package]]\nname = \"toml\"\nversion = \"0.7.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd79e69d3b627db300ff956027cc6c3798cef26d22526befdfcd12feeb6d2257\"\ndependencies = [\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"toml_edit 0.19.15\",\n]\n\n[[package]]\nname = \"toml\"\nversion = \"0.8.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1ed1f98e3fdc28d6d910e6737ae6ab1a93bf1985935a1193e68f93eeb68d24e\"\ndependencies = [\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"toml_edit 0.22.22\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421\"\ndependencies = [\n \"indexmap\",\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.22.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ae48d6208a266e853d946088ed816055e556cc6028c5e8e2b84d9fa5dd7c7f5\"\ndependencies = [\n \"indexmap\",\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"unicode-bidi\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5ab17db44d7388991a428b2ee655ce0c212e862eff1768a455c58f9aad6e7893\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e91b56cd4cadaeb79bbf1a5645f6b4f8dc5bde8834ad5894a8db35fda9efa1fe\"\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5033c97c4262335cded6d6fc3e5c18ab755e1a3dc96376350f3d8e9f009ad956\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af\"\n\n[[package]]\nname = \"untrusted\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ecb6da28b8a351d773b68d5825ac39017e680750f980f3a1a85cd8dd28a47c1\"\n\n[[package]]\nname = \"ureq\"\nversion = \"2.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b74fc6b57825be3373f7054754755f03ac3a8f5d70015ccad699ba2029956f4a\"\ndependencies = [\n \"base64\",\n \"flate2\",\n \"log\",\n \"once_cell\",\n \"rustls\",\n \"rustls-pki-types\",\n \"serde\",\n \"serde_json\",\n \"socks\",\n \"url\",\n \"webpki-roots\",\n]\n\n[[package]]\nname = \"url\"\nversion = \"2.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22784dbdf76fdde8af1aeda5622b546b422b6fc585325248a2bf9f5e41e94d6c\"\ndependencies = [\n \"form_urlencoded\",\n \"idna\",\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821\"\n\n[[package]]\nname = \"uuid\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8c5f0a0af699448548ad1a2fbf920fb4bee257eae39953ba95cb84891a0446a\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"wait-timeout\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9f200f5b12eb75f8c1ed65abd4b2db8a6e1b138a20de009dacee265a2498f3f6\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"128d1e363af62632b8eb57219c8fd7877144af57558fb2ef0368d0087bddeb2e\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb6dd4d3ca0ddffd1dd1c9c04f94b868c37ff5fac97c30b97cff2d74fce3a358\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e79384be7f8f5a9dd5d7167216f022090cf1f9ec128e6e6a482a2cb5c5422c56\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26c6ab57572f7a24a4985830b120de1594465e5d500f24afe89e16b4e833ef68\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"65fc09f10666a9f147042251e0dda9c18f166ff7de300607007e96bdebc1068d\"\n\n[[package]]\nname = \"wasm-pack\"\nversion = \"0.13.1\"\ndependencies = [\n \"anyhow\",\n \"assert_cmd\",\n \"binary-install\",\n \"cargo_metadata\",\n \"chrono\",\n \"clap\",\n \"console\",\n \"dialoguer\",\n \"env_logger\",\n \"glob\",\n \"human-panic\",\n \"lazy_static\",\n \"log\",\n \"parking_lot\",\n \"path-clean\",\n \"predicates\",\n \"semver\",\n \"serde\",\n \"serde_derive\",\n \"serde_ignored\",\n \"serde_json\",\n \"serial_test\",\n \"siphasher\",\n \"strsim 0.10.0\",\n \"tempfile\",\n \"toml 0.7.8\",\n \"ureq\",\n \"walkdir\",\n \"which\",\n]\n\n[[package]]\nname = \"webpki-roots\"\nversion = \"0.26.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"841c67bff177718f1d4dfefde8d8f0e78f9b6589319ba88312f567fc5841a958\"\ndependencies = [\n \"rustls-pki-types\",\n]\n\n[[package]]\nname = \"which\"\nversion = \"4.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87ba24419a2078cd2b0f2ede2691b6c66d8e47836da3b6db8265ebad47afbfc7\"\ndependencies = [\n \"either\",\n \"home\",\n \"once_cell\",\n \"rustix\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf221c93e13a30d793f7645a0e7762c55d169dbb0a49671918a2319d289b10bb\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.59.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.5\",\n \"windows_aarch64_msvc 0.48.5\",\n \"windows_i686_gnu 0.48.5\",\n \"windows_i686_msvc 0.48.5\",\n \"windows_x86_64_gnu 0.48.5\",\n \"windows_x86_64_gnullvm 0.48.5\",\n \"windows_x86_64_msvc 0.48.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.52.6\",\n \"windows_aarch64_msvc 0.52.6\",\n \"windows_i686_gnu 0.52.6\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc 0.52.6\",\n \"windows_x86_64_gnu 0.52.6\",\n \"windows_x86_64_gnullvm 0.52.6\",\n \"windows_x86_64_msvc 0.52.6\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"xattr\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8da84f1a25939b27f6820d92aed108f83ff920fdf11a7b19366c27c4cda81d4f\"\ndependencies = [\n \"libc\",\n \"linux-raw-sys\",\n \"rustix\",\n]\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde\"\ndependencies = [\n \"zeroize_derive\",\n]\n\n[[package]]\nname = \"zeroize_derive\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"zip\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc5e4288ea4057ae23afc69a4472434a87a2495cafce6632fd1c4ec9f5cf3494\"\ndependencies = [\n \"aes\",\n \"arbitrary\",\n \"bzip2\",\n \"constant_time_eq\",\n \"crc32fast\",\n \"crossbeam-utils\",\n \"deflate64\",\n \"displaydoc\",\n \"flate2\",\n \"hmac\",\n \"indexmap\",\n \"lzma-rs\",\n \"memchr\",\n \"pbkdf2\",\n \"rand\",\n \"sha1\",\n \"thiserror\",\n \"time\",\n \"zeroize\",\n \"zopfli\",\n \"zstd\",\n]\n\n[[package]]\nname = \"zopfli\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5019f391bac5cf252e93bbcc53d039ffd62c7bfb7c150414d61369afe57e946\"\ndependencies = [\n \"bumpalo\",\n \"crc32fast\",\n \"lockfree-object-pool\",\n \"log\",\n \"once_cell\",\n \"simd-adler32\",\n]\n\n[[package]]\nname = \"zstd\"\nversion = \"0.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fcf2b778a664581e31e389454a7072dab1647606d44f7feea22cd5abb9c9f3f9\"\ndependencies = [\n \"zstd-safe\",\n]\n\n[[package]]\nname = \"zstd-safe\"\nversion = \"7.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54a3ab4db68cea366acc5c897c7b4d4d1b8994a9cd6e6f841f8964566a419059\"\ndependencies = [\n \"zstd-sys\",\n]\n\n[[package]]\nname = \"zstd-sys\"\nversion = \"2.0.13+zstd.1.5.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38ff0f21cfee8f97d94cef41359e0c89aa6113028ab0291aa8ca0038995a95aa\"\ndependencies = [\n \"cc\",\n \"pkg-config\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.1279296875,
          "content": "[package]\nname = \"wasm-pack\"\ndescription = \"üì¶‚ú® your favorite rust -> wasm workflow tool!\"\nversion = \"0.13.1\"\nauthors = [\"Ashley Williams <ashley666ashley@gmail.com>\", \"Jesper H√•kansson <jesper@jesperh.se>\"]\nrepository = \"https://github.com/rustwasm/wasm-pack.git\"\nlicense = \"MIT OR Apache-2.0\"\nedition = \"2021\"\nreadme = \"README.md\"\ncategories = [\"wasm\"]\ndocumentation = \"https://rustwasm.github.io/wasm-pack/\"\n\n[dependencies]\nanyhow = \"1.0.68\"\nbinary-install = \"0.4.1\"\ncargo_metadata = \"0.15.2\"\nchrono = \"0.4.23\"\nconsole = \"0.15.5\"\ndialoguer = \"0.10.3\"\nenv_logger = { version = \"0.10.0\", default-features = false }\nglob = \"0.3.1\"\nhuman-panic = \"1.0.3\"\nlog = \"0.4.17\"\nparking_lot = \"0.12.1\"\nsemver = \"1.0.16\"\nserde = \"1.0.152\"\nserde_derive = \"1.0.152\"\nserde_ignored = \"0.1.7\"\nserde_json = \"1.0.91\"\nsiphasher = \"0.3.10\"\nstrsim = \"0.10.0\"\nclap = { version = \"4.2.5\", features = [\"derive\"] }\ntoml = \"0.7.3\"\nureq = { version = \"2.6.2\", features = [\"json\", \"socks-proxy\"] }\nwalkdir = \"2.3.2\"\nwhich = \"4.4.0\"\npath-clean = \"1.0.1\"\n\n[dev-dependencies]\nassert_cmd = \"2.0.8\"\nlazy_static = \"1.4.0\"\npredicates = \"3.0.3\"\nserial_test = \"2.0.0\"\ntempfile = \"3.3.0\"\n\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.595703125,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0341796875,
          "content": "Copyright (c) 2018 Ashley Williams\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.3037109375,
          "content": "<div align=\"center\">\n\n  <h1>üì¶‚ú®  wasm-pack</h1>\n\n  <p>\n    <strong>Your favorite Rust ‚Üí Wasm workflow tool!</strong>\n  </p>\n\n  <p>\n    <a href=\"https://github.com/rustwasm/wasm-pack/actions/workflows/test.yml\"><img alt=\"Build Status\" src=\"https://github.com/rustwasm/wasm-pack/actions/workflows/test.yml/badge.svg?branch=master\"/></a>\n    <a href=\"https://crates.io/crates/wasm-pack\"><img alt=\"crates.io\" src=\"https://img.shields.io/crates/v/wasm-pack\"/></a>\n  </p>\n\n  <h3>\n    <a href=\"https://rustwasm.github.io/docs/wasm-pack/\">Docs</a>\n    <span> | </span>\n    <a href=\"https://github.com/rustwasm/wasm-pack/blob/master/CONTRIBUTING.md\">Contributing</a>\n    <span> | </span>\n    <a href=\"https://discordapp.com/channels/442252698964721669/443151097398296587\">Chat</a>\n  </h3>\n\n<sub>Built with ü¶Äüï∏ by <a href=\"https://rustwasm.github.io/\">The Rust and WebAssembly Working Group</a></sub>\n\n</div>\n\n## About\n\nThis tool seeks to be a one-stop shop for building and working with rust-\ngenerated WebAssembly that you would like to interop with JavaScript, in the\nbrowser or with Node.js. `wasm-pack` helps you build rust-generated\nWebAssembly packages that you could publish to the npm registry, or otherwise use\nalongside any javascript packages in workflows that you already use, such as [webpack].\n\n[bundler-support]: https://github.com/rustwasm/team/blob/master/goals/bundler-integration.md#details\n[webpack]: https://webpack.js.org/\n\nThis project is a part of the [rust-wasm] group. You can find more info by\nvisiting that repo!\n\n[rust-wasm]: https://github.com/rustwasm/team\n\n![demo](demo.gif)\n\n## üîÆ Prerequisites\n\nThis project requires Rust 1.30.0 or later.\n\n- [Development Environment](https://rustwasm.github.io/wasm-pack/book/prerequisites/index.html)\n- [Installation](https://rustwasm.github.io/wasm-pack/installer)\n\n## ‚ö° Quickstart Guide\n\nVisit the [quickstart guide] in our documentation.\n\n[quickstart guide]: https://rustwasm.github.io/wasm-pack/book/quickstart.html\n\n## üéôÔ∏è Commands\n\n- [`new`](https://rustwasm.github.io/wasm-pack/book/commands/new.html): Generate a new RustWasm project using a template\n- [`build`](https://rustwasm.github.io/wasm-pack/book/commands/build.html): Generate an npm wasm pkg from a rustwasm crate\n- [`test`](https://rustwasm.github.io/wasm-pack/book/commands/test.html): Run browser tests\n- [`pack` and `publish`](https://rustwasm.github.io/wasm-pack/book/commands/pack-and-publish.html): Create a tarball of your rustwasm pkg and/or publish to a registry\n\n## üìù Logging\n\n`wasm-pack` uses [`env_logger`] to produce logs when `wasm-pack` runs.\n\nTo configure your log level, use the `RUST_LOG` environment variable. For example:\n\n```\nRUST_LOG=info wasm-pack build\n```\n\n[`env_logger`]: https://crates.io/crates/env_logger\n\n## üëØ Contributing\n\nRead our [guide] on getting up and running for developing `wasm-pack`, and\ncheck out our [contribution policy].\n\n[guide]: https://rustwasm.github.io/wasm-pack/book/contributing.html\n[contribution policy]: CONTRIBUTING.md\n\n## ü§π‚Äç‚ôÄÔ∏è Governance\n\nThis project is part of the [rustwasm Working Group].\n\nThis project was started by [ashleygwilliams] and is maintained by [drager] and the Rust Wasm Working Group Core Team.\n\n[ashleygwilliams]: https://github.com/ashleygwilliams\n[drager]: https://github.com/drager\n[rustwasm working group]: https://github.com/rustwasm/team\n"
        },
        {
          "name": "RELEASE_CHECKLIST.md",
          "type": "blob",
          "size": 2.3154296875,
          "content": "# Release Checklist\n\nThis is a list of the things that need to happen during a release.\n\n1. Open the associated milestone. All issues and PRs should be closed. If\n  they are not you should reassign all open issues and PRs to future\n  milestones.\n1. Go through the commit history since last release. Ensure that all PRs\n  that have landed are marked with the milestone. You can use this to \n  show all the PRs that are merged on or after YYY-MM-DD: \n  `https://github.com/issues?utf8=%E2%9C%93&q=repo%3Arustwasm%2Fwasm-pack+merged%3A%3E%3DYYYY-MM-DD`\n1. Go through the closed PRs in the milestone. Each should have a changelog\n  label indicating if the change is docs, fix, feature, or maintenance. If\n  there is a missing label, please add one.\n1. Choose an emoji for the release. Try to make it some sort of transition\n  from the previous releases emoji (point releases can be a little weirder).\n1. Create a new branch \"#.#.#\" where \"#.#.#\" is the release's version.\n1. Add this release to the `CHANGELOG.md`. Use the structure of previous \n  entries.\n1. Update `DEFAULT_CHROMEDRIVER_VERSION` in `chromedriver.rs`. \n  Version is the response of `https://chromedriver.storage.googleapis.com/LATEST_RELEASE`.\n1. Update `DEFAULT_GECKODRIVER_VERSION` in `geckodriver.rs`.\n  Version is the name of the latest tag - `https://github.com/mozilla/geckodriver/releases/latest`.\n1. Update the version in `Cargo.toml`.\n1. Update the version number and date in `docs/index.html`.\n1. Run `cargo update`.\n1. Run `cargo test`.\n1. Run `cargo build`.\n1. Copy `README.md` to `npm/README.md`\n1. Bump the version number in `npm/package.json`\n1. `cd npm && npm install`\n1. Push up a commit with the `Cargo.toml`, `Cargo.lock`, `docs/index.html`,\n  and `CHANGELOG.md` changes. The commit message can just be \"#.#.#\".\n1. Request review from `@ashleygwilliams` and `@drager`.\n1. `git commit --amend` all changes into the single commit.\n1. Once ready to merge, tag the commit with the tag `v#.#.#`.\n1. Wait for the CI to go green.\n1. The CI will build the release binaries. Take the `CHANGELOG.md` release\n  entry and cut and paste it into the release body.\n1. Be sure to add any missing link definitions to the release.\n1. Hit the big green Merge button.\n1. `git checkout master` and `git pull --rebase origin master`\n1. Run `cargo test`.\n1. `cargo publish`\n1. `cd npm && npm publish`\n1. Tweet.\n"
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.03125,
          "content": "too-many-arguments-threshold = 8"
        },
        {
          "name": "demo.gif",
          "type": "blob",
          "size": 47.9150390625,
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "npm",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}