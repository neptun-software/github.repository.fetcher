{
  "metadata": {
    "timestamp": 1736709405000,
    "page": 138,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "serde-rs/json",
      "stars": 5011,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0380859375,
          "content": "target/\n**/*.rs.bk\n*.sw[po]\nCargo.lock\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.6923828125,
          "content": "# Contributing to Serde\n\nSerde welcomes contribution from everyone in the form of suggestions, bug\nreports, pull requests, and feedback. This document gives some guidance if you\nare thinking of helping us.\n\n## Submitting bug reports and feature requests\n\nSerde development is spread across lots of repositories. In general, prefer to\nopen issues against the main [serde-rs/serde] repository unless the topic is\nclearly specific to JSON.\n\n[serde-rs/serde]: https://github.com/serde-rs/serde\n\nWhen reporting a bug or asking for help, please include enough details so that\nthe people helping you can reproduce the behavior you are seeing. For some tips\non how to approach this, read about how to produce a [Minimal, Complete, and\nVerifiable example].\n\n[Minimal, Complete, and Verifiable example]: https://stackoverflow.com/help/mcve\n\nWhen making a feature request, please make it clear what problem you intend to\nsolve with the feature, any ideas for how Serde could support solving that\nproblem, any possible alternatives, and any disadvantages.\n\n## Running the test suite\n\nWe encourage you to check that the test suite passes locally before submitting a\npull request with your changes. If anything does not pass, typically it will be\neasier to iterate and fix it locally than waiting for the CI servers to run\ntests for you.\n\nThe test suite requires a nightly compiler.\n\n```sh\n# Run the full test suite, including doc test and compile-tests\ncargo test\n```\n\n## Conduct\n\nIn all Serde-related forums, we follow the [Rust Code of Conduct]. For\nescalation or moderation issues please contact Erick (erick.tryzelaar@gmail.com)\ninstead of the Rust moderation team.\n\n[Rust Code of Conduct]: https://www.rust-lang.org/policies/code-of-conduct\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 3.2265625,
          "content": "[package]\nname = \"serde_json\"\nversion = \"1.0.135\"\nauthors = [\"Erick Tryzelaar <erick.tryzelaar@gmail.com>\", \"David Tolnay <dtolnay@gmail.com>\"]\ncategories = [\"encoding\", \"parser-implementations\", \"no-std\"]\ndescription = \"A JSON serialization file format\"\ndocumentation = \"https://docs.rs/serde_json\"\nedition = \"2021\"\nkeywords = [\"json\", \"serde\", \"serialization\"]\nlicense = \"MIT OR Apache-2.0\"\nrepository = \"https://github.com/serde-rs/json\"\nrust-version = \"1.56\"\n\n[dependencies]\nindexmap = { version = \"2.2.3\", optional = true }\nitoa = \"1.0\"\nmemchr = { version = \"2\", default-features = false }\nryu = \"1.0\"\nserde = { version = \"1.0.194\", default-features = false }\n\n[dev-dependencies]\nautomod = \"1.0.11\"\nindoc = \"2.0.2\"\nref-cast = \"1.0.18\"\nrustversion = \"1.0.13\"\nserde = { version = \"1.0.194\", features = [\"derive\"] }\nserde_bytes = \"0.11.10\"\nserde_derive = \"1.0.166\"\nserde_stacker = \"0.1.8\"\ntrybuild = { version = \"1.0.81\", features = [\"diff\"] }\n\n[lib]\ndoc-scrape-examples = false\n\n[package.metadata.docs.rs]\nfeatures = [\"preserve_order\", \"raw_value\", \"unbounded_depth\"]\ntargets = [\"x86_64-unknown-linux-gnu\"]\nrustdoc-args = [\"--generate-link-to-definition\"]\n\n[package.metadata.playground]\nfeatures = [\"raw_value\"]\n\n\n### FEATURES #################################################################\n\n[features]\ndefault = [\"std\"]\n\nstd = [\"memchr/std\", \"serde/std\"]\n\n# Provide integration for heap-allocated collections without depending on the\n# rest of the Rust standard library.\n# NOTE: Disabling both `std` *and* `alloc` features is not supported yet.\nalloc = [\"serde/alloc\"]\n\n# Make serde_json::Map use a representation which maintains insertion order.\n# This allows data to be read into a Value and written back to a JSON string\n# while preserving the order of map keys in the input.\npreserve_order = [\"indexmap\", \"std\"]\n\n# Use sufficient precision when parsing fixed precision floats from JSON to\n# ensure that they maintain accuracy when round-tripped through JSON. This comes\n# at an approximately 2x performance cost for parsing floats compared to the\n# default best-effort precision.\n#\n# Unlike arbitrary_precision, this feature makes f64 -> JSON -> f64 produce\n# output identical to the input.\nfloat_roundtrip = []\n\n# Use an arbitrary precision number representation for serde_json::Number. This\n# allows JSON numbers of arbitrary size/precision to be read into a Number and\n# written back to a JSON string without loss of precision.\n#\n# Unlike float_roundtrip, this feature makes JSON -> serde_json::Number -> JSON\n# produce output identical to the input.\narbitrary_precision = []\n\n# Provide a RawValue type that can hold unprocessed JSON during deserialization.\nraw_value = []\n\n# Provide a method disable_recursion_limit to parse arbitrarily deep JSON\n# structures without any consideration for overflowing the stack. When using\n# this feature, you will want to provide some other way to protect against stack\n# overflows, such as by wrapping your Deserializer in the dynamically growing\n# stack adapter provided by the serde_stacker crate. Additionally you will need\n# to be careful around other recursive operations on the parsed result which may\n# overflow the stack after deserialization has completed, including, but not\n# limited to, Display and Debug and Drop impls.\nunbounded_depth = []\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 9.4951171875,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 0.9990234375,
          "content": "Permission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.8837890625,
          "content": "# Serde JSON &emsp; [![Build Status]][actions] [![Latest Version]][crates.io] [![Rustc Version 1.36+]][rustc]\n\n[Build Status]: https://img.shields.io/github/actions/workflow/status/serde-rs/json/ci.yml?branch=master\n[actions]: https://github.com/serde-rs/json/actions?query=branch%3Amaster\n[Latest Version]: https://img.shields.io/crates/v/serde_json.svg\n[crates.io]: https://crates.io/crates/serde\\_json\n[Rustc Version 1.36+]: https://img.shields.io/badge/rustc-1.36+-lightgray.svg\n[rustc]: https://blog.rust-lang.org/2019/07/04/Rust-1.36.0.html\n\n**Serde is a framework for *ser*ializing and *de*serializing Rust data structures efficiently and generically.**\n\n---\n\n```toml\n[dependencies]\nserde_json = \"1.0\"\n```\n\nYou may be looking for:\n\n- [JSON API documentation](https://docs.rs/serde_json)\n- [Serde API documentation](https://docs.rs/serde)\n- [Detailed documentation about Serde](https://serde.rs/)\n- [Setting up `#[derive(Serialize, Deserialize)]`](https://serde.rs/derive.html)\n- [Release notes](https://github.com/serde-rs/json/releases)\n\nJSON is a ubiquitous open-standard format that uses human-readable text to\ntransmit data objects consisting of key-value pairs.\n\n```json\n{\n    \"name\": \"John Doe\",\n    \"age\": 43,\n    \"address\": {\n        \"street\": \"10 Downing Street\",\n        \"city\": \"London\"\n    },\n    \"phones\": [\n        \"+44 1234567\",\n        \"+44 2345678\"\n    ]\n}\n```\n\nThere are three common ways that you might find yourself needing to work with\nJSON data in Rust.\n\n - **As text data.** An unprocessed string of JSON data that you receive on an\n   HTTP endpoint, read from a file, or prepare to send to a remote server.\n - **As an untyped or loosely typed representation.** Maybe you want to check\n   that some JSON data is valid before passing it on, but without knowing the\n   structure of what it contains. Or you want to do very basic manipulations\n   like insert a key in a particular spot.\n - **As a strongly typed Rust data structure.** When you expect all or most of\n   your data to conform to a particular structure and want to get real work done\n   without JSON's loosey-goosey nature tripping you up.\n\nSerde JSON provides efficient, flexible, safe ways of converting data between\neach of these representations.\n\n## Operating on untyped JSON values\n\nAny valid JSON data can be manipulated in the following recursive enum\nrepresentation. This data structure is [`serde_json::Value`][value].\n\n```rust\nenum Value {\n    Null,\n    Bool(bool),\n    Number(Number),\n    String(String),\n    Array(Vec<Value>),\n    Object(Map<String, Value>),\n}\n```\n\nA string of JSON data can be parsed into a `serde_json::Value` by the\n[`serde_json::from_str`][from_str] function. There is also\n[`from_slice`][from_slice] for parsing from a byte slice `&[u8]` and\n[`from_reader`][from_reader] for parsing from any `io::Read` like a File or a\nTCP stream.\n\n<div align=\"right\">\n<a href=\"https://play.rust-lang.org/?edition=2018&gist=d69d8e3156d4bb81c4461b60b772ab72\" target=\"_blank\">\n<img align=\"center\" width=\"85\" src=\"https://raw.githubusercontent.com/serde-rs/serde-rs.github.io/master/img/runtab.png\">\n</a>\n</div>\n\n```rust\nuse serde_json::{Result, Value};\n\nfn untyped_example() -> Result<()> {\n    // Some JSON input data as a &str. Maybe this comes from the user.\n    let data = r#\"\n        {\n            \"name\": \"John Doe\",\n            \"age\": 43,\n            \"phones\": [\n                \"+44 1234567\",\n                \"+44 2345678\"\n            ]\n        }\"#;\n\n    // Parse the string of data into serde_json::Value.\n    let v: Value = serde_json::from_str(data)?;\n\n    // Access parts of the data by indexing with square brackets.\n    println!(\"Please call {} at the number {}\", v[\"name\"], v[\"phones\"][0]);\n\n    Ok(())\n}\n```\n\nThe result of square bracket indexing like `v[\"name\"]` is a borrow of the data\nat that index, so the type is `&Value`. A JSON map can be indexed with string\nkeys, while a JSON array can be indexed with integer keys. If the type of the\ndata is not right for the type with which it is being indexed, or if a map does\nnot contain the key being indexed, or if the index into a vector is out of\nbounds, the returned element is `Value::Null`.\n\nWhen a `Value` is printed, it is printed as a JSON string. So in the code above,\nthe output looks like `Please call \"John Doe\" at the number \"+44 1234567\"`. The\nquotation marks appear because `v[\"name\"]` is a `&Value` containing a JSON\nstring and its JSON representation is `\"John Doe\"`. Printing as a plain string\nwithout quotation marks involves converting from a JSON string to a Rust string\nwith [`as_str()`] or avoiding the use of `Value` as described in the following\nsection.\n\n[`as_str()`]: https://docs.rs/serde_json/1/serde_json/enum.Value.html#method.as_str\n\nThe `Value` representation is sufficient for very basic tasks but can be tedious\nto work with for anything more significant. Error handling is verbose to\nimplement correctly, for example imagine trying to detect the presence of\nunrecognized fields in the input data. The compiler is powerless to help you\nwhen you make a mistake, for example imagine typoing `v[\"name\"]` as `v[\"nmae\"]`\nin one of the dozens of places it is used in your code.\n\n## Parsing JSON as strongly typed data structures\n\nSerde provides a powerful way of mapping JSON data into Rust data structures\nlargely automatically.\n\n<div align=\"right\">\n<a href=\"https://play.rust-lang.org/?edition=2018&gist=15cfab66d38ff8a15a9cf1d8d897ac68\" target=\"_blank\">\n<img align=\"center\" width=\"85\" src=\"https://raw.githubusercontent.com/serde-rs/serde-rs.github.io/master/img/runtab.png\">\n</a>\n</div>\n\n```rust\nuse serde::{Deserialize, Serialize};\nuse serde_json::Result;\n\n#[derive(Serialize, Deserialize)]\nstruct Person {\n    name: String,\n    age: u8,\n    phones: Vec<String>,\n}\n\nfn typed_example() -> Result<()> {\n    // Some JSON input data as a &str. Maybe this comes from the user.\n    let data = r#\"\n        {\n            \"name\": \"John Doe\",\n            \"age\": 43,\n            \"phones\": [\n                \"+44 1234567\",\n                \"+44 2345678\"\n            ]\n        }\"#;\n\n    // Parse the string of data into a Person object. This is exactly the\n    // same function as the one that produced serde_json::Value above, but\n    // now we are asking it for a Person as output.\n    let p: Person = serde_json::from_str(data)?;\n\n    // Do things just like with any other Rust data structure.\n    println!(\"Please call {} at the number {}\", p.name, p.phones[0]);\n\n    Ok(())\n}\n```\n\nThis is the same `serde_json::from_str` function as before, but this time we\nassign the return value to a variable of type `Person` so Serde will\nautomatically interpret the input data as a `Person` and produce informative\nerror messages if the layout does not conform to what a `Person` is expected to\nlook like.\n\nAny type that implements Serde's `Deserialize` trait can be deserialized this\nway. This includes built-in Rust standard library types like `Vec<T>` and\n`HashMap<K, V>`, as well as any structs or enums annotated with\n`#[derive(Deserialize)]`.\n\nOnce we have `p` of type `Person`, our IDE and the Rust compiler can help us use\nit correctly like they do for any other Rust code. The IDE can autocomplete\nfield names to prevent typos, which was impossible in the `serde_json::Value`\nrepresentation. And the Rust compiler can check that when we write\n`p.phones[0]`, then `p.phones` is guaranteed to be a `Vec<String>` so indexing\ninto it makes sense and produces a `String`.\n\nThe necessary setup for using Serde's derive macros is explained on the *[Using\nderive]* page of the Serde site.\n\n[Using derive]: https://serde.rs/derive.html\n\n## Constructing JSON values\n\nSerde JSON provides a [`json!` macro][macro] to build `serde_json::Value`\nobjects with very natural JSON syntax.\n\n<div align=\"right\">\n<a href=\"https://play.rust-lang.org/?edition=2018&gist=6ccafad431d72b62e77cc34c8e879b24\" target=\"_blank\">\n<img align=\"center\" width=\"85\" src=\"https://raw.githubusercontent.com/serde-rs/serde-rs.github.io/master/img/runtab.png\">\n</a>\n</div>\n\n```rust\nuse serde_json::json;\n\nfn main() {\n    // The type of `john` is `serde_json::Value`\n    let john = json!({\n        \"name\": \"John Doe\",\n        \"age\": 43,\n        \"phones\": [\n            \"+44 1234567\",\n            \"+44 2345678\"\n        ]\n    });\n\n    println!(\"first phone number: {}\", john[\"phones\"][0]);\n\n    // Convert to a string of JSON and print it out\n    println!(\"{}\", john.to_string());\n}\n```\n\nThe `Value::to_string()` function converts a `serde_json::Value` into a `String`\nof JSON text.\n\nOne neat thing about the `json!` macro is that variables and expressions can be\ninterpolated directly into the JSON value as you are building it. Serde will\ncheck at compile time that the value you are interpolating is able to be\nrepresented as JSON.\n\n<div align=\"right\">\n<a href=\"https://play.rust-lang.org/?edition=2018&gist=f9101a6e61dfc9e02c6a67f315ed24f2\" target=\"_blank\">\n<img align=\"center\" width=\"85\" src=\"https://raw.githubusercontent.com/serde-rs/serde-rs.github.io/master/img/runtab.png\">\n</a>\n</div>\n\n```rust\nlet full_name = \"John Doe\";\nlet age_last_year = 42;\n\n// The type of `john` is `serde_json::Value`\nlet john = json!({\n    \"name\": full_name,\n    \"age\": age_last_year + 1,\n    \"phones\": [\n        format!(\"+44 {}\", random_phone())\n    ]\n});\n```\n\nThis is amazingly convenient, but we have the problem we had before with\n`Value`: the IDE and Rust compiler cannot help us if we get it wrong. Serde JSON\nprovides a better way of serializing strongly-typed data structures into JSON\ntext.\n\n## Creating JSON by serializing data structures\n\nA data structure can be converted to a JSON string by\n[`serde_json::to_string`][to_string]. There is also\n[`serde_json::to_vec`][to_vec] which serializes to a `Vec<u8>` and\n[`serde_json::to_writer`][to_writer] which serializes to any `io::Write`\nsuch as a File or a TCP stream.\n\n<div align=\"right\">\n<a href=\"https://play.rust-lang.org/?edition=2018&gist=3472242a08ed2ff88a944f2a2283b0ee\" target=\"_blank\">\n<img align=\"center\" width=\"85\" src=\"https://raw.githubusercontent.com/serde-rs/serde-rs.github.io/master/img/runtab.png\">\n</a>\n</div>\n\n```rust\nuse serde::{Deserialize, Serialize};\nuse serde_json::Result;\n\n#[derive(Serialize, Deserialize)]\nstruct Address {\n    street: String,\n    city: String,\n}\n\nfn print_an_address() -> Result<()> {\n    // Some data structure.\n    let address = Address {\n        street: \"10 Downing Street\".to_owned(),\n        city: \"London\".to_owned(),\n    };\n\n    // Serialize it to a JSON string.\n    let j = serde_json::to_string(&address)?;\n\n    // Print, write to a file, or send to an HTTP server.\n    println!(\"{}\", j);\n\n    Ok(())\n}\n```\n\nAny type that implements Serde's `Serialize` trait can be serialized this way.\nThis includes built-in Rust standard library types like `Vec<T>` and `HashMap<K,\nV>`, as well as any structs or enums annotated with `#[derive(Serialize)]`.\n\n## Performance\n\nIt is fast. You should expect in the ballpark of 500 to 1000 megabytes per\nsecond deserialization and 600 to 900 megabytes per second serialization,\ndepending on the characteristics of your data. This is competitive with the\nfastest C and C++ JSON libraries or even 30% faster for many use cases.\nBenchmarks live in the [serde-rs/json-benchmark] repo.\n\n[serde-rs/json-benchmark]: https://github.com/serde-rs/json-benchmark\n\n## Getting help\n\nSerde is one of the most widely used Rust libraries, so any place that\nRustaceans congregate will be able to help you out. For chat, consider trying\nthe [#rust-questions] or [#rust-beginners] channels of the unofficial community\nDiscord (invite: <https://discord.gg/rust-lang-community>), the [#rust-usage] or\n[#beginners] channels of the official Rust Project Discord (invite:\n<https://discord.gg/rust-lang>), or the [#general][zulip] stream in Zulip. For\nasynchronous, consider the [\\[rust\\] tag on StackOverflow][stackoverflow], the\n[/r/rust] subreddit which has a pinned weekly easy questions post, or the Rust\n[Discourse forum][discourse]. It's acceptable to file a support issue in this\nrepo, but they tend not to get as many eyes as any of the above and may get\nclosed without a response after some time.\n\n[#rust-questions]: https://discord.com/channels/273534239310479360/274215136414400513\n[#rust-beginners]: https://discord.com/channels/273534239310479360/273541522815713281\n[#rust-usage]: https://discord.com/channels/442252698964721669/443150878111694848\n[#beginners]: https://discord.com/channels/442252698964721669/448238009733742612\n[zulip]: https://rust-lang.zulipchat.com/#narrow/stream/122651-general\n[stackoverflow]: https://stackoverflow.com/questions/tagged/rust\n[/r/rust]: https://www.reddit.com/r/rust\n[discourse]: https://users.rust-lang.org\n\n## No-std support\n\nAs long as there is a memory allocator, it is possible to use serde_json without\nthe rest of the Rust standard library. Disable the default \"std\" feature and\nenable the \"alloc\" feature:\n\n```toml\n[dependencies]\nserde_json = { version = \"1.0\", default-features = false, features = [\"alloc\"] }\n```\n\nFor JSON support in Serde without a memory allocator, please see the\n[`serde-json-core`] crate.\n\n[`serde-json-core`]: https://github.com/rust-embedded-community/serde-json-core\n\n[value]: https://docs.rs/serde_json/1/serde_json/value/enum.Value.html\n[from_str]: https://docs.rs/serde_json/1/serde_json/de/fn.from_str.html\n[from_slice]: https://docs.rs/serde_json/1/serde_json/de/fn.from_slice.html\n[from_reader]: https://docs.rs/serde_json/1/serde_json/de/fn.from_reader.html\n[to_string]: https://docs.rs/serde_json/1/serde_json/ser/fn.to_string.html\n[to_vec]: https://docs.rs/serde_json/1/serde_json/ser/fn.to_vec.html\n[to_writer]: https://docs.rs/serde_json/1/serde_json/ser/fn.to_writer.html\n[macro]: https://docs.rs/serde_json/1/serde_json/macro.json.html\n\n<br>\n\n#### License\n\n<sup>\nLicensed under either of <a href=\"LICENSE-APACHE\">Apache License, Version\n2.0</a> or <a href=\"LICENSE-MIT\">MIT license</a> at your option.\n</sup>\n\n<br>\n\n<sub>\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in this crate by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n</sub>\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 1.142578125,
          "content": "use std::env;\n\nfn main() {\n    println!(\"cargo:rerun-if-changed=build.rs\");\n\n    println!(\"cargo:rustc-check-cfg=cfg(fast_arithmetic, values(\\\"32\\\", \\\"64\\\"))\");\n\n    // Decide ideal limb width for arithmetic in the float parser and string\n    // parser.\n    let target_arch = env::var_os(\"CARGO_CFG_TARGET_ARCH\").unwrap();\n    let target_pointer_width = env::var_os(\"CARGO_CFG_TARGET_POINTER_WIDTH\").unwrap();\n    if target_arch == \"aarch64\"\n        || target_arch == \"loongarch64\"\n        || target_arch == \"mips64\"\n        || target_arch == \"powerpc64\"\n        || target_arch == \"wasm32\"\n        || target_arch == \"x86_64\"\n        || target_pointer_width == \"64\"\n    {\n        // The above list of architectures are ones that have native support for\n        // 64-bit arithmetic, but which have some targets using a smaller\n        // pointer width. Examples include aarch64-unknown-linux-gnu_ilp32 and\n        // x86_64-unknown-linux-gnux32. So our choice of limb width is not\n        // equivalent to using usize everywhere.\n        println!(\"cargo:rustc-cfg=fast_arithmetic=\\\"64\\\"\");\n    } else {\n        println!(\"cargo:rustc-cfg=fast_arithmetic=\\\"32\\\"\");\n    }\n}\n"
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}